
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c824  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001c824  0001c824  0002c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a44  20000000  0001c82c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a44  2**0
                  CONTENTS
  5 .bss          0000d7c8  20000a48  0001d278  00030a48  2**3
                  ALLOC
  6 .stack        00010000  2000e210  0002aa40  00030a48  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f7e78  00000000  00000000  00030acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000147b3  00000000  00000000  00128943  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00027b87  00000000  00000000  0013d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004600  00000000  00000000  00164c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004170  00000000  00000000  0016927d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0006a585  00000000  00000000  0016d3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006ab94  00000000  00000000  001d7972  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00150e01  00000000  00000000  00242506  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000118d8  00000000  00000000  00393308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 e2 01 20 71 0c 00 00 6d 0c 00 00 6d 0c 00 00     ... q...m...m...
      10:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 00 00 00 00     m...m...m.......
	...
      2c:	6d 0c 00 00 6d 0c 00 00 00 00 00 00 6d 0c 00 00     m...m.......m...
      3c:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      4c:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      5c:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      6c:	ed 79 00 00 85 66 00 00 95 66 00 00 6d 0c 00 00     .y...f...f..m...
      7c:	a5 66 00 00 b5 66 00 00 c5 66 00 00 d5 66 00 00     .f...f...f...f..
      8c:	e5 66 00 00 f5 66 00 00 05 67 00 00 15 67 00 00     .f...f...g...g..
      9c:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      ac:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      bc:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      cc:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
      dc:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 00 00 00 00     m...m...m.......
	...
      f4:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     104:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     114:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     124:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     134:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     144:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     154:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     164:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     174:	6d 0c 00 00 6d 0c 00 00 b9 5a 00 00 59 ca 00 00     m...m....Z..Y...
     184:	69 ca 00 00 79 ca 00 00 89 ca 00 00 6d 0c 00 00     i...y.......m...
     194:	99 94 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     ....m...m...m...
     1a4:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 b5 94 00 00     m...m...m.......
     1b4:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     1c4:	d1 94 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     ....m...m...m...
     1d4:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     1e4:	6d 0c 00 00 6d 0c 00 00 55 a1 00 00 6d 0c 00 00     m...m...U...m...
     1f4:	71 a1 00 00 6d 0c 00 00 8d a1 00 00 a9 a1 00 00     q...m...........
     204:	c5 a1 00 00 e1 a1 00 00 6d 0c 00 00 6d 0c 00 00     ........m...m...
     214:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     224:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     234:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     244:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...
     254:	6d 0c 00 00 6d 0c 00 00 6d 0c 00 00 6d 0c 00 00     m...m...m...m...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a48 	.word	0x20000a48
     280:	00000000 	.word	0x00000000
     284:	0001c82c 	.word	0x0001c82c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001c82c 	.word	0x0001c82c
     2c4:	20000a4c 	.word	0x20000a4c
     2c8:	0001c82c 	.word	0x0001c82c
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
static uint8_t  local_memory_block[QSPI_ERBLK];
static uint32_t local_last_read_stack;
uint8_t	local_compressor_data_array[COMPRESSOR_CONTROLLER_DATA_SIZE];

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
     2f4:	f880 6084 	strb.w	r6, [r0, #132]	; 0x84
     2f8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
     2fc:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
     300:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
     304:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
{
	last_logger_array_stack=&local_last_read_stack;
     308:	4a02      	ldr	r2, [pc, #8]	; (314 <_ZN16Commands_HandlerC2Ev+0x44>)
     30a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
} //Commands_Handler
     30e:	bc70      	pop	{r4, r5, r6}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	20000a64 	.word	0x20000a64

00000318 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     318:	680b      	ldr	r3, [r1, #0]
     31a:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     31c:	4770      	bx	lr
	...

00000320 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     320:	60c1      	str	r1, [r0, #12]
	memory_block=local_memory_block;
     322:	4b03      	ldr	r3, [pc, #12]	; (330 <_ZN16Commands_Handler18InitCommandHandlerEPh+0x10>)
     324:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
	compressor_data_array=local_compressor_data_array;
     328:	4b02      	ldr	r3, [pc, #8]	; (334 <_ZN16Commands_Handler18InitCommandHandlerEPh+0x14>)
     32a:	65c3      	str	r3, [r0, #92]	; 0x5c
     32c:	4770      	bx	lr
     32e:	bf00      	nop
     330:	20000a68 	.word	0x20000a68
     334:	20001a68 	.word	0x20001a68

00000338 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     338:	b510      	push	{r4, lr}
     33a:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     33c:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     340:	bf14      	ite	ne
     342:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     344:	2100      	moveq	r1, #0
     346:	4b03      	ldr	r3, [pc, #12]	; (354 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     348:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     34c:	4798      	blx	r3
	}
	return data;
}
     34e:	4620      	mov	r0, r4
     350:	bd10      	pop	{r4, pc}
     352:	bf00      	nop
     354:	200037b4 	.word	0x200037b4
     358:	000119dd 	.word	0x000119dd

0000035c <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     35c:	b538      	push	{r3, r4, r5, lr}
     35e:	4605      	mov	r5, r0
     360:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     362:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     366:	bf14      	ite	ne
     368:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     36a:	2100      	moveq	r1, #0
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     36e:	6e18      	ldr	r0, [r3, #96]	; 0x60
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     372:	4798      	blx	r3
	return SetEnableFan1(data);
     374:	4621      	mov	r1, r4
     376:	4628      	mov	r0, r5
     378:	4b03      	ldr	r3, [pc, #12]	; (388 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     37a:	4798      	blx	r3
}
     37c:	bd38      	pop	{r3, r4, r5, pc}
     37e:	bf00      	nop
     380:	200037b4 	.word	0x200037b4
     384:	000119dd 	.word	0x000119dd
     388:	00000339 	.word	0x00000339

0000038c <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     38c:	b538      	push	{r3, r4, r5, lr}
     38e:	4605      	mov	r5, r0
     390:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     392:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     396:	bf14      	ite	ne
     398:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     39a:	2100      	moveq	r1, #0
     39c:	4b04      	ldr	r3, [pc, #16]	; (3b0 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     39e:	6e58      	ldr	r0, [r3, #100]	; 0x64
     3a0:	4b04      	ldr	r3, [pc, #16]	; (3b4 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     3a2:	4798      	blx	r3
	return SetEnableFan2(data);
     3a4:	4621      	mov	r1, r4
     3a6:	4628      	mov	r0, r5
     3a8:	4b03      	ldr	r3, [pc, #12]	; (3b8 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     3aa:	4798      	blx	r3
}
     3ac:	bd38      	pop	{r3, r4, r5, pc}
     3ae:	bf00      	nop
     3b0:	200037b4 	.word	0x200037b4
     3b4:	00011555 	.word	0x00011555
     3b8:	0000035d 	.word	0x0000035d

000003bc <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     3bc:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3be:	68c3      	ldr	r3, [r0, #12]
     3c0:	6819      	ldr	r1, [r3, #0]
     3c2:	6041      	str	r1, [r0, #4]
     3c4:	8899      	ldrh	r1, [r3, #4]
     3c6:	799b      	ldrb	r3, [r3, #6]
     3c8:	8101      	strh	r1, [r0, #8]
     3ca:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     3cc:	7a43      	ldrb	r3, [r0, #9]
     3ce:	2b4b      	cmp	r3, #75	; 0x4b
     3d0:	bf0c      	ite	eq
     3d2:	2401      	moveq	r4, #1
     3d4:	2400      	movne	r4, #0
	if (result){
     3d6:	d001      	beq.n	3dc <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3d8:	4620      	mov	r0, r4
     3da:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3dc:	7a81      	ldrb	r1, [r0, #10]
     3de:	4b01      	ldr	r3, [pc, #4]	; (3e4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3e0:	4798      	blx	r3
     3e2:	e7f9      	b.n	3d8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3e4:	0000038d 	.word	0x0000038d

000003e8 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3ea:	68c3      	ldr	r3, [r0, #12]
     3ec:	f100 0210 	add.w	r2, r0, #16
     3f0:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3f4:	681f      	ldr	r7, [r3, #0]
     3f6:	685e      	ldr	r6, [r3, #4]
     3f8:	689d      	ldr	r5, [r3, #8]
     3fa:	68dc      	ldr	r4, [r3, #12]
     3fc:	6017      	str	r7, [r2, #0]
     3fe:	6056      	str	r6, [r2, #4]
     400:	6095      	str	r5, [r2, #8]
     402:	60d4      	str	r4, [r2, #12]
     404:	3310      	adds	r3, #16
     406:	3210      	adds	r2, #16
     408:	428b      	cmp	r3, r1
     40a:	d1f3      	bne.n	3f4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     40c:	7d43      	ldrb	r3, [r0, #21]
     40e:	2b4c      	cmp	r3, #76	; 0x4c
     410:	bf0c      	ite	eq
     412:	2501      	moveq	r5, #1
     414:	2500      	movne	r5, #0
	if (result){
     416:	d112      	bne.n	43e <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     418:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     41a:	7d81      	ldrb	r1, [r0, #22]
     41c:	b119      	cbz	r1, 426 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     41e:	4b09      	ldr	r3, [pc, #36]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     420:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     422:	4b09      	ldr	r3, [pc, #36]	; (448 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     424:	4798      	blx	r3
			
		}

		if (data[1]>0){
     426:	7de1      	ldrb	r1, [r4, #23]
     428:	b119      	cbz	r1, 432 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     42c:	6e18      	ldr	r0, [r3, #96]	; 0x60
     42e:	4b06      	ldr	r3, [pc, #24]	; (448 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     430:	4798      	blx	r3
		}
		if (data[2]>0){
     432:	7e21      	ldrb	r1, [r4, #24]
     434:	b119      	cbz	r1, 43e <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     438:	6e58      	ldr	r0, [r3, #100]	; 0x64
     43a:	4b04      	ldr	r3, [pc, #16]	; (44c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     43c:	4798      	blx	r3
		

	}
	
	return result;
}
     43e:	4628      	mov	r0, r5
     440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     442:	bf00      	nop
     444:	200037b4 	.word	0x200037b4
     448:	00011a01 	.word	0x00011a01
     44c:	000115a1 	.word	0x000115a1

00000450 <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     454:	68c3      	ldr	r3, [r0, #12]
     456:	f100 0210 	add.w	r2, r0, #16
     45a:	f103 0140 	add.w	r1, r3, #64	; 0x40
     45e:	681f      	ldr	r7, [r3, #0]
     460:	685e      	ldr	r6, [r3, #4]
     462:	689d      	ldr	r5, [r3, #8]
     464:	68dc      	ldr	r4, [r3, #12]
     466:	6017      	str	r7, [r2, #0]
     468:	6056      	str	r6, [r2, #4]
     46a:	6095      	str	r5, [r2, #8]
     46c:	60d4      	str	r4, [r2, #12]
     46e:	3310      	adds	r3, #16
     470:	3210      	adds	r2, #16
     472:	428b      	cmp	r3, r1
     474:	d1f3      	bne.n	45e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xe>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     476:	7d43      	ldrb	r3, [r0, #21]
     478:	2b4f      	cmp	r3, #79	; 0x4f
     47a:	bf0c      	ite	eq
     47c:	2701      	moveq	r7, #1
     47e:	2700      	movne	r7, #0
	if (result){
     480:	d002      	beq.n	488 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x38>
	}else{

	}
	
	return result;
}
     482:	4638      	mov	r0, r7
     484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     488:	4e0d      	ldr	r6, [pc, #52]	; (4c0 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x70>)
     48a:	f100 0516 	add.w	r5, r0, #22
     48e:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->StopControlling();
     492:	f8df 9030 	ldr.w	r9, [pc, #48]	; 4c4 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x74>
					flapper.valve[i]->StartControlling() ;
     496:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4c8 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x78>
     49a:	e005      	b.n	4a8 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x58>
					flapper.valve[i]->StopControlling();
     49c:	47c8      	blx	r9
     49e:	e000      	b.n	4a2 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x52>
				flapper.valve[i]->StopControlling();
     4a0:	47c8      	blx	r9
     4a2:	3501      	adds	r5, #1
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     4a4:	42a5      	cmp	r5, r4
     4a6:	d0ec      	beq.n	482 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x32>
			if (flapper.valve[i]->isOK)
     4a8:	f856 0b04 	ldr.w	r0, [r6], #4
     4ac:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
     4b0:	2b00      	cmp	r3, #0
     4b2:	d0f5      	beq.n	4a0 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x50>
				if ((data&(0x01))>0)
     4b4:	782b      	ldrb	r3, [r5, #0]
     4b6:	f013 0f01 	tst.w	r3, #1
     4ba:	d0ef      	beq.n	49c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4c>
					flapper.valve[i]->StartControlling() ;
     4bc:	47c0      	blx	r8
     4be:	e7f0      	b.n	4a2 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x52>
     4c0:	20005288 	.word	0x20005288
     4c4:	000134d9 	.word	0x000134d9
     4c8:	000136d1 	.word	0x000136d1

000004cc <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     4d0:	68c3      	ldr	r3, [r0, #12]
     4d2:	f100 0210 	add.w	r2, r0, #16
     4d6:	f103 0140 	add.w	r1, r3, #64	; 0x40
     4da:	681f      	ldr	r7, [r3, #0]
     4dc:	685e      	ldr	r6, [r3, #4]
     4de:	689d      	ldr	r5, [r3, #8]
     4e0:	68dc      	ldr	r4, [r3, #12]
     4e2:	6017      	str	r7, [r2, #0]
     4e4:	6056      	str	r6, [r2, #4]
     4e6:	6095      	str	r5, [r2, #8]
     4e8:	60d4      	str	r4, [r2, #12]
     4ea:	3310      	adds	r3, #16
     4ec:	3210      	adds	r2, #16
     4ee:	428b      	cmp	r3, r1
     4f0:	d1f3      	bne.n	4da <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xe>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4f2:	7d43      	ldrb	r3, [r0, #21]
     4f4:	2b50      	cmp	r3, #80	; 0x50
     4f6:	bf0c      	ite	eq
     4f8:	2701      	moveq	r7, #1
     4fa:	2700      	movne	r7, #0
	if (result){
     4fc:	d002      	beq.n	504 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x38>
	}else{

	}
	
	return result;
}
     4fe:	4638      	mov	r0, r7
     500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     504:	4d0f      	ldr	r5, [pc, #60]	; (544 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     506:	f100 0616 	add.w	r6, r0, #22
     50a:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->doPeriodicTask=false;
     50e:	f04f 0900 	mov.w	r9, #0
					flapper.valve[i]->StartControlling(data);
     512:	f8df a034 	ldr.w	sl, [pc, #52]	; 548 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x7c>
     516:	e007      	b.n	528 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x5c>
				flapper.valve[i]->doPeriodicTask=false;
     518:	f8d8 3000 	ldr.w	r3, [r8]
     51c:	f883 907d 	strb.w	r9, [r3, #125]	; 0x7d
     520:	3504      	adds	r5, #4
     522:	3601      	adds	r6, #1
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     524:	42a6      	cmp	r6, r4
     526:	d0ea      	beq.n	4fe <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x32>
     528:	46a8      	mov	r8, r5
			if (flapper.valve[i]->isOK)
     52a:	6828      	ldr	r0, [r5, #0]
     52c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
     530:	2b00      	cmp	r3, #0
     532:	d0f5      	beq.n	520 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
				if (flapper.valve[i]->controllerEnabled)
     534:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
     538:	2b00      	cmp	r3, #0
     53a:	d0ed      	beq.n	518 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
					flapper.valve[i]->StartControlling(data);
     53c:	7831      	ldrb	r1, [r6, #0]
     53e:	47d0      	blx	sl
     540:	e7ea      	b.n	518 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
     542:	bf00      	nop
     544:	20005288 	.word	0x20005288
     548:	0001351d 	.word	0x0001351d

0000054c <_ZN16Commands_Handler22CommandWriteParametersEv>:


	
	return result;
}
bool Commands_Handler::CommandWriteParameters(void){
     54c:	b510      	push	{r4, lr}

	uint32_t	w,r;
	int n=sizeof(HVACMessageHeader);
	HVACMessageHeader hm;
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     54e:	68c3      	ldr	r3, [r0, #12]
     550:	6819      	ldr	r1, [r3, #0]
     552:	6041      	str	r1, [r0, #4]
     554:	889c      	ldrh	r4, [r3, #4]
     556:	7999      	ldrb	r1, [r3, #6]
     558:	8104      	strh	r4, [r0, #8]
     55a:	7281      	strb	r1, [r0, #10]
	
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
	if (result){
     55c:	7a42      	ldrb	r2, [r0, #9]
     55e:	2a47      	cmp	r2, #71	; 0x47
     560:	d001      	beq.n	566 <_ZN16Commands_Handler22CommandWriteParametersEv+0x1a>
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
     562:	2000      	movs	r0, #0
		}else{

	}
	
	return result;
}
     564:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&usbMessageBuffer[n],sizeof(UserParameters));
     566:	f8d3 3006 	ldr.w	r3, [r3, #6]
     56a:	4601      	mov	r1, r0
     56c:	f841 3f60 	str.w	r3, [r1, #96]!
		r=memory.SaveParameters(parameters);
     570:	4803      	ldr	r0, [pc, #12]	; (580 <_ZN16Commands_Handler22CommandWriteParametersEv+0x34>)
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <_ZN16Commands_Handler22CommandWriteParametersEv+0x38>)
     574:	4798      	blx	r3
		result=(bool)(r==0);
     576:	fab0 f080 	clz	r0, r0
     57a:	0940      	lsrs	r0, r0, #5
     57c:	bd10      	pop	{r4, pc}
     57e:	bf00      	nop
     580:	20006b04 	.word	0x20006b04
     584:	00014a65 	.word	0x00014a65

00000588 <_ZN16Commands_Handler17CommandSetHeatersEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetHeaters(void){
     588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     58c:	68c3      	ldr	r3, [r0, #12]
     58e:	6819      	ldr	r1, [r3, #0]
     590:	6041      	str	r1, [r0, #4]
     592:	8899      	ldrh	r1, [r3, #4]
     594:	799b      	ldrb	r3, [r3, #6]
     596:	8101      	strh	r1, [r0, #8]
     598:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetHeaters);
     59a:	7a43      	ldrb	r3, [r0, #9]
     59c:	2b49      	cmp	r3, #73	; 0x49
     59e:	bf0c      	ite	eq
     5a0:	f04f 0a01 	moveq.w	sl, #1
     5a4:	f04f 0a00 	movne.w	sl, #0
	if (result){
     5a8:	d002      	beq.n	5b0 <_ZN16Commands_Handler17CommandSetHeatersEv+0x28>
			
		}
	}
	
	return result;
}
     5aa:	4650      	mov	r0, sl
     5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lastEnableHeaters=enableHeaters;
     5b0:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
     5b4:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
		enableHeaters=singleTaskMessage.description;
     5b8:	7a83      	ldrb	r3, [r0, #10]
     5ba:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
		if (enableHeaters!=lastEnableHeaters)
     5be:	429a      	cmp	r2, r3
     5c0:	d0f3      	beq.n	5aa <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5c2:	4605      	mov	r5, r0
     5c4:	2600      	movs	r6, #0
					heaters.module[j]->SetRelay(i,powerOn);
     5c6:	f8df 9030 	ldr.w	r9, [pc, #48]	; 5f8 <_ZN16Commands_Handler17CommandSetHeatersEv+0x70>
     5ca:	f8df 8030 	ldr.w	r8, [pc, #48]	; 5fc <_ZN16Commands_Handler17CommandSetHeatersEv+0x74>
     5ce:	2400      	movs	r4, #0
     5d0:	eb06 0709 	add.w	r7, r6, r9
					powerOn=enableHeaters&(0x01<<(i+4*j));
     5d4:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
     5d8:	1933      	adds	r3, r6, r4
     5da:	411a      	asrs	r2, r3
     5dc:	f002 0201 	and.w	r2, r2, #1
     5e0:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
					heaters.module[j]->SetRelay(i,powerOn);
     5e4:	b2e1      	uxtb	r1, r4
     5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
     5e8:	47c0      	blx	r8
     5ea:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     5ec:	2c04      	cmp	r4, #4
     5ee:	d1f1      	bne.n	5d4 <_ZN16Commands_Handler17CommandSetHeatersEv+0x4c>
     5f0:	3604      	adds	r6, #4
			for (uint8_t j = 0; j < 2; j++)
     5f2:	2e08      	cmp	r6, #8
     5f4:	d1eb      	bne.n	5ce <_ZN16Commands_Handler17CommandSetHeatersEv+0x46>
     5f6:	e7d8      	b.n	5aa <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5f8:	20002df4 	.word	0x20002df4
     5fc:	00014701 	.word	0x00014701

00000600 <_ZN16Commands_Handler18CommandSetScavengeEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetScavenge(void){
     600:	b510      	push	{r4, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     602:	68c3      	ldr	r3, [r0, #12]
     604:	6819      	ldr	r1, [r3, #0]
     606:	6041      	str	r1, [r0, #4]
     608:	8899      	ldrh	r1, [r3, #4]
     60a:	799b      	ldrb	r3, [r3, #6]
     60c:	8101      	strh	r1, [r0, #8]
     60e:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetScavenge);
     610:	7a43      	ldrb	r3, [r0, #9]
     612:	2b53      	cmp	r3, #83	; 0x53
     614:	bf0c      	ite	eq
     616:	2401      	moveq	r4, #1
     618:	2400      	movne	r4, #0
	if (result){
     61a:	d001      	beq.n	620 <_ZN16Commands_Handler18CommandSetScavengeEv+0x20>
		scavenge.SetEnable(powerOn);
	
	}
	
	return result;
}
     61c:	4620      	mov	r0, r4
     61e:	bd10      	pop	{r4, pc}
		data_byte=singleTaskMessage.description;
     620:	7a81      	ldrb	r1, [r0, #10]
     622:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
		powerOn=(data_byte&(0x02))>0;
     626:	f3c1 0140 	ubfx	r1, r1, #1, #1
     62a:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
		scavenge.SetEnable(powerOn);
     62e:	4802      	ldr	r0, [pc, #8]	; (638 <_ZN16Commands_Handler18CommandSetScavengeEv+0x38>)
     630:	4b02      	ldr	r3, [pc, #8]	; (63c <_ZN16Commands_Handler18CommandSetScavengeEv+0x3c>)
     632:	4798      	blx	r3
     634:	e7f2      	b.n	61c <_ZN16Commands_Handler18CommandSetScavengeEv+0x1c>
     636:	bf00      	nop
     638:	2000ce64 	.word	0x2000ce64
     63c:	00014c39 	.word	0x00014c39

00000640 <_ZN16Commands_Handler20CommandSetCompressorEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetCompressor(void){
     640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	memcpy(&message64,usbMessageBuffer,64);
     642:	68c3      	ldr	r3, [r0, #12]
     644:	f100 0210 	add.w	r2, r0, #16
     648:	f103 0140 	add.w	r1, r3, #64	; 0x40
     64c:	681f      	ldr	r7, [r3, #0]
     64e:	685e      	ldr	r6, [r3, #4]
     650:	689d      	ldr	r5, [r3, #8]
     652:	68dc      	ldr	r4, [r3, #12]
     654:	6017      	str	r7, [r2, #0]
     656:	6056      	str	r6, [r2, #4]
     658:	6095      	str	r5, [r2, #8]
     65a:	60d4      	str	r4, [r2, #12]
     65c:	3310      	adds	r3, #16
     65e:	3210      	adds	r2, #16
     660:	428b      	cmp	r3, r1
     662:	d1f3      	bne.n	64c <_ZN16Commands_Handler20CommandSetCompressorEv+0xc>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandSetCompressor);
     664:	7d43      	ldrb	r3, [r0, #21]
     666:	2b55      	cmp	r3, #85	; 0x55
     668:	bf0c      	ite	eq
     66a:	2501      	moveq	r5, #1
     66c:	2500      	movne	r5, #0
	if (result){
     66e:	d001      	beq.n	674 <_ZN16Commands_Handler20CommandSetCompressorEv+0x34>
	
		
	}
	
	return result;
     670:	4628      	mov	r0, r5
     672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     674:	4604      	mov	r4, r0
		data_byte=message64.content[0] ;
     676:	7d82      	ldrb	r2, [r0, #22]
     678:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
		compressor_speed=message64.content[1]*256+message64.content[2];
     67c:	7dc1      	ldrb	r1, [r0, #23]
     67e:	7e03      	ldrb	r3, [r0, #24]
     680:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     684:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		if ((data_byte&0x01)>0)
     688:	f012 0f01 	tst.w	r2, #1
     68c:	d014      	beq.n	6b8 <_ZN16Commands_Handler20CommandSetCompressorEv+0x78>
			if (ccu.IsEnabled())
     68e:	4813      	ldr	r0, [pc, #76]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     690:	4b13      	ldr	r3, [pc, #76]	; (6e0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     692:	4798      	blx	r3
     694:	b158      	cbz	r0, 6ae <_ZN16Commands_Handler20CommandSetCompressorEv+0x6e>
				if ( compressor_speed>0)
     696:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
     69a:	b119      	cbz	r1, 6a4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x64>
					ccu.Set_Motor_Speed(compressor_speed);
     69c:	4811      	ldr	r0, [pc, #68]	; (6e4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     69e:	4b12      	ldr	r3, [pc, #72]	; (6e8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     6a0:	4798      	blx	r3
     6a2:	e7e5      	b.n	670 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.SetEnable(false);
     6a4:	2100      	movs	r1, #0
     6a6:	480d      	ldr	r0, [pc, #52]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6a8:	4b10      	ldr	r3, [pc, #64]	; (6ec <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6aa:	4798      	blx	r3
     6ac:	e7e0      	b.n	670 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(true);
     6ae:	2101      	movs	r1, #1
     6b0:	480a      	ldr	r0, [pc, #40]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6b2:	4b0e      	ldr	r3, [pc, #56]	; (6ec <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6b4:	4798      	blx	r3
     6b6:	e7db      	b.n	670 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
			if (ccu.IsEnabled())
     6b8:	4808      	ldr	r0, [pc, #32]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6ba:	4b09      	ldr	r3, [pc, #36]	; (6e0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     6bc:	4798      	blx	r3
     6be:	b938      	cbnz	r0, 6d0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x90>
				if ( compressor_speed>0)
     6c0:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
     6c4:	2900      	cmp	r1, #0
     6c6:	d0d3      	beq.n	670 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.Set_Motor_Speed(compressor_speed);
     6c8:	4806      	ldr	r0, [pc, #24]	; (6e4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     6ca:	4b07      	ldr	r3, [pc, #28]	; (6e8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     6cc:	4798      	blx	r3
     6ce:	e7cf      	b.n	670 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(false);
     6d0:	2100      	movs	r1, #0
     6d2:	4802      	ldr	r0, [pc, #8]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6d4:	4b05      	ldr	r3, [pc, #20]	; (6ec <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6d6:	4798      	blx	r3
     6d8:	e7ca      	b.n	670 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
     6da:	bf00      	nop
     6dc:	20002ad0 	.word	0x20002ad0
     6e0:	0000f519 	.word	0x0000f519
     6e4:	20002920 	.word	0x20002920
     6e8:	0000f931 	.word	0x0000f931
     6ec:	0000f4e5 	.word	0x0000f4e5

000006f0 <_GLOBAL__sub_I_local_compressor_data_array>:
     6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     6f4:	4c2c      	ldr	r4, [pc, #176]	; (7a8 <_GLOBAL__sub_I_local_compressor_data_array+0xb8>)
     6f6:	f1a4 05dc 	sub.w	r5, r4, #220	; 0xdc
     6fa:	492c      	ldr	r1, [pc, #176]	; (7ac <_GLOBAL__sub_I_local_compressor_data_array+0xbc>)
     6fc:	4628      	mov	r0, r5
     6fe:	4b2c      	ldr	r3, [pc, #176]	; (7b0 <_GLOBAL__sub_I_local_compressor_data_array+0xc0>)
     700:	4798      	blx	r3
     702:	4e2c      	ldr	r6, [pc, #176]	; (7b4 <_GLOBAL__sub_I_local_compressor_data_array+0xc4>)
     704:	4632      	mov	r2, r6
     706:	492c      	ldr	r1, [pc, #176]	; (7b8 <_GLOBAL__sub_I_local_compressor_data_array+0xc8>)
     708:	4628      	mov	r0, r5
     70a:	4d2c      	ldr	r5, [pc, #176]	; (7bc <_GLOBAL__sub_I_local_compressor_data_array+0xcc>)
     70c:	47a8      	blx	r5
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     70e:	f1a4 09c4 	sub.w	r9, r4, #196	; 0xc4
     712:	492b      	ldr	r1, [pc, #172]	; (7c0 <_GLOBAL__sub_I_local_compressor_data_array+0xd0>)
     714:	4648      	mov	r0, r9
     716:	4f2b      	ldr	r7, [pc, #172]	; (7c4 <_GLOBAL__sub_I_local_compressor_data_array+0xd4>)
     718:	47b8      	blx	r7
     71a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7e4 <_GLOBAL__sub_I_local_compressor_data_array+0xf4>
     71e:	4632      	mov	r2, r6
     720:	4641      	mov	r1, r8
     722:	4648      	mov	r0, r9
     724:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     726:	f1a4 09a4 	sub.w	r9, r4, #164	; 0xa4
     72a:	4927      	ldr	r1, [pc, #156]	; (7c8 <_GLOBAL__sub_I_local_compressor_data_array+0xd8>)
     72c:	4648      	mov	r0, r9
     72e:	47b8      	blx	r7
     730:	4632      	mov	r2, r6
     732:	4641      	mov	r1, r8
     734:	4648      	mov	r0, r9
     736:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     738:	f1a4 0984 	sub.w	r9, r4, #132	; 0x84
     73c:	4923      	ldr	r1, [pc, #140]	; (7cc <_GLOBAL__sub_I_local_compressor_data_array+0xdc>)
     73e:	4648      	mov	r0, r9
     740:	47b8      	blx	r7
     742:	4632      	mov	r2, r6
     744:	4641      	mov	r1, r8
     746:	4648      	mov	r0, r9
     748:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     74a:	f1a4 0964 	sub.w	r9, r4, #100	; 0x64
     74e:	4920      	ldr	r1, [pc, #128]	; (7d0 <_GLOBAL__sub_I_local_compressor_data_array+0xe0>)
     750:	4648      	mov	r0, r9
     752:	47b8      	blx	r7
     754:	4632      	mov	r2, r6
     756:	4641      	mov	r1, r8
     758:	4648      	mov	r0, r9
     75a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     75c:	f1a4 0944 	sub.w	r9, r4, #68	; 0x44
     760:	491c      	ldr	r1, [pc, #112]	; (7d4 <_GLOBAL__sub_I_local_compressor_data_array+0xe4>)
     762:	4648      	mov	r0, r9
     764:	47b8      	blx	r7
     766:	4632      	mov	r2, r6
     768:	4641      	mov	r1, r8
     76a:	4648      	mov	r0, r9
     76c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     76e:	f1a4 0924 	sub.w	r9, r4, #36	; 0x24
     772:	4919      	ldr	r1, [pc, #100]	; (7d8 <_GLOBAL__sub_I_local_compressor_data_array+0xe8>)
     774:	4648      	mov	r0, r9
     776:	47b8      	blx	r7
     778:	4632      	mov	r2, r6
     77a:	4641      	mov	r1, r8
     77c:	4648      	mov	r0, r9
     77e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     780:	f1a4 0904 	sub.w	r9, r4, #4
     784:	4915      	ldr	r1, [pc, #84]	; (7dc <_GLOBAL__sub_I_local_compressor_data_array+0xec>)
     786:	4648      	mov	r0, r9
     788:	47b8      	blx	r7
     78a:	4632      	mov	r2, r6
     78c:	4641      	mov	r1, r8
     78e:	4648      	mov	r0, r9
     790:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     792:	341c      	adds	r4, #28
     794:	4912      	ldr	r1, [pc, #72]	; (7e0 <_GLOBAL__sub_I_local_compressor_data_array+0xf0>)
     796:	4620      	mov	r0, r4
     798:	47b8      	blx	r7
     79a:	4632      	mov	r2, r6
     79c:	4641      	mov	r1, r8
     79e:	4620      	mov	r0, r4
     7a0:	47a8      	blx	r5
     7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     7a6:	bf00      	nop
     7a8:	20001b5c 	.word	0x20001b5c
     7ac:	2000e088 	.word	0x2000e088
     7b0:	0000fcb5 	.word	0x0000fcb5
     7b4:	20000000 	.word	0x20000000
     7b8:	0000fcd1 	.word	0x0000fcd1
     7bc:	0001ab61 	.word	0x0001ab61
     7c0:	2000df58 	.word	0x2000df58
     7c4:	000104e5 	.word	0x000104e5
     7c8:	2000dfec 	.word	0x2000dfec
     7cc:	2000e110 	.word	0x2000e110
     7d0:	2000e00c 	.word	0x2000e00c
     7d4:	2000e0d0 	.word	0x2000e0d0
     7d8:	2000e0f0 	.word	0x2000e0f0
     7dc:	2000dfc8 	.word	0x2000dfc8
     7e0:	2000e068 	.word	0x2000e068
     7e4:	0001051d 	.word	0x0001051d

000007e8 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     7ec:	68c3      	ldr	r3, [r0, #12]
     7ee:	6819      	ldr	r1, [r3, #0]
     7f0:	6041      	str	r1, [r0, #4]
     7f2:	8899      	ldrh	r1, [r3, #4]
     7f4:	799b      	ldrb	r3, [r3, #6]
     7f6:	8101      	strh	r1, [r0, #8]
     7f8:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     7fa:	7a43      	ldrb	r3, [r0, #9]
     7fc:	2b51      	cmp	r3, #81	; 0x51
     7fe:	bf0c      	ite	eq
     800:	2501      	moveq	r5, #1
     802:	2500      	movne	r5, #0
	if (result){
     804:	d002      	beq.n	80c <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     806:	4628      	mov	r0, r5
     808:	b003      	add	sp, #12
     80a:	bd30      	pop	{r4, r5, pc}
     80c:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     80e:	4669      	mov	r1, sp
     810:	4808      	ldr	r0, [pc, #32]	; (834 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     812:	4b09      	ldr	r3, [pc, #36]	; (838 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     814:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     816:	6823      	ldr	r3, [r4, #0]
     818:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     81c:	466a      	mov	r2, sp
     81e:	68e1      	ldr	r1, [r4, #12]
     820:	4420      	add	r0, r4
     822:	4b06      	ldr	r3, [pc, #24]	; (83c <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     824:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     826:	2240      	movs	r2, #64	; 0x40
     828:	68e1      	ldr	r1, [r4, #12]
     82a:	4805      	ldr	r0, [pc, #20]	; (840 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     82c:	4b05      	ldr	r3, [pc, #20]	; (844 <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     82e:	4798      	blx	r3
     830:	e7e9      	b.n	806 <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     832:	bf00      	nop
     834:	200037b4 	.word	0x200037b4
     838:	000117c5 	.word	0x000117c5
     83c:	00001115 	.word	0x00001115
     840:	200034b8 	.word	0x200034b8
     844:	00010f15 	.word	0x00010f15

00000848 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     84c:	b08c      	sub	sp, #48	; 0x30
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     84e:	68c3      	ldr	r3, [r0, #12]
     850:	6819      	ldr	r1, [r3, #0]
     852:	6041      	str	r1, [r0, #4]
     854:	8899      	ldrh	r1, [r3, #4]
     856:	799b      	ldrb	r3, [r3, #6]
     858:	8101      	strh	r1, [r0, #8]
     85a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     85c:	7a43      	ldrb	r3, [r0, #9]
     85e:	2b4e      	cmp	r3, #78	; 0x4e
     860:	bf0c      	ite	eq
     862:	f04f 0901 	moveq.w	r9, #1
     866:	f04f 0900 	movne.w	r9, #0
	if (result){
     86a:	d003      	beq.n	874 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
}
     86c:	4648      	mov	r0, r9
     86e:	b00c      	add	sp, #48	; 0x30
     870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     874:	4605      	mov	r5, r0
     876:	f8df 808c 	ldr.w	r8, [pc, #140]	; 904 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xbc>
	if (result){
     87a:	2700      	movs	r7, #0
				flapper.valve[i]->UpdateFlapperValveData();
     87c:	f8df a088 	ldr.w	sl, [pc, #136]	; 908 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc0>
			if (flapper.valve[i]->isOK)
     880:	f8d8 0000 	ldr.w	r0, [r8]
     884:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
     888:	bb13      	cbnz	r3, 8d0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x88>
				fvds[i]= flapper.valve[i]->dataStruct;
     88a:	eb0d 0607 	add.w	r6, sp, r7
     88e:	f100 0488 	add.w	r4, r0, #136	; 0x88
     892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     894:	f84d 0007 	str.w	r0, [sp, r7]
     898:	6071      	str	r1, [r6, #4]
     89a:	60b2      	str	r2, [r6, #8]
     89c:	60f3      	str	r3, [r6, #12]
     89e:	6820      	ldr	r0, [r4, #0]
     8a0:	6130      	str	r0, [r6, #16]
     8a2:	88a2      	ldrh	r2, [r4, #4]
     8a4:	79a3      	ldrb	r3, [r4, #6]
     8a6:	82b2      	strh	r2, [r6, #20]
     8a8:	75b3      	strb	r3, [r6, #22]
     8aa:	f108 0804 	add.w	r8, r8, #4
     8ae:	3717      	adds	r7, #23
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     8b0:	2f2e      	cmp	r7, #46	; 0x2e
     8b2:	d1e5      	bne.n	880 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x38>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     8b4:	682b      	ldr	r3, [r5, #0]
     8b6:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     8ba:	466a      	mov	r2, sp
     8bc:	68e9      	ldr	r1, [r5, #12]
     8be:	4428      	add	r0, r5
     8c0:	4b0d      	ldr	r3, [pc, #52]	; (8f8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xb0>)
     8c2:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     8c4:	2240      	movs	r2, #64	; 0x40
     8c6:	68e9      	ldr	r1, [r5, #12]
     8c8:	480c      	ldr	r0, [pc, #48]	; (8fc <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xb4>)
     8ca:	4b0d      	ldr	r3, [pc, #52]	; (900 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xb8>)
     8cc:	4798      	blx	r3
     8ce:	e7cd      	b.n	86c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
				flapper.valve[i]->UpdateFlapperValveData();
     8d0:	47d0      	blx	sl
				fvds[i]= flapper.valve[i]->dataStruct;
     8d2:	f8d8 4000 	ldr.w	r4, [r8]
     8d6:	eb0d 0607 	add.w	r6, sp, r7
     8da:	3488      	adds	r4, #136	; 0x88
     8dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     8de:	f84d 0007 	str.w	r0, [sp, r7]
     8e2:	6071      	str	r1, [r6, #4]
     8e4:	60b2      	str	r2, [r6, #8]
     8e6:	60f3      	str	r3, [r6, #12]
     8e8:	6820      	ldr	r0, [r4, #0]
     8ea:	6130      	str	r0, [r6, #16]
     8ec:	88a2      	ldrh	r2, [r4, #4]
     8ee:	79a3      	ldrb	r3, [r4, #6]
     8f0:	82b2      	strh	r2, [r6, #20]
     8f2:	75b3      	strb	r3, [r6, #22]
     8f4:	e7d9      	b.n	8aa <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x62>
     8f6:	bf00      	nop
     8f8:	00001115 	.word	0x00001115
     8fc:	200034b8 	.word	0x200034b8
     900:	00010f15 	.word	0x00010f15
     904:	20005288 	.word	0x20005288
     908:	0001372d 	.word	0x0001372d

0000090c <_ZN16Commands_Handler21CommandReadParametersEv>:
bool Commands_Handler::CommandReadParameters(){
     90c:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     90e:	68c3      	ldr	r3, [r0, #12]
     910:	6819      	ldr	r1, [r3, #0]
     912:	6041      	str	r1, [r0, #4]
     914:	8899      	ldrh	r1, [r3, #4]
     916:	799b      	ldrb	r3, [r3, #6]
     918:	8101      	strh	r1, [r0, #8]
     91a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kGAINCommandReadParameters);
     91c:	7a43      	ldrb	r3, [r0, #9]
     91e:	2b48      	cmp	r3, #72	; 0x48
     920:	bf0c      	ite	eq
     922:	2501      	moveq	r5, #1
     924:	2500      	movne	r5, #0
	if (result){
     926:	d001      	beq.n	92c <_ZN16Commands_Handler21CommandReadParametersEv+0x20>
}
     928:	4628      	mov	r0, r5
     92a:	bd38      	pop	{r3, r4, r5, pc}
     92c:	4604      	mov	r4, r0
		memory.ReadParameters(parameters);
     92e:	f100 0160 	add.w	r1, r0, #96	; 0x60
     932:	4811      	ldr	r0, [pc, #68]	; (978 <_ZN16Commands_Handler21CommandReadParametersEv+0x6c>)
     934:	4b11      	ldr	r3, [pc, #68]	; (97c <_ZN16Commands_Handler21CommandReadParametersEv+0x70>)
     936:	4798      	blx	r3
		memcpy(usbMessageBuffer,(void*)&hm,n);
     938:	68e3      	ldr	r3, [r4, #12]
     93a:	4a11      	ldr	r2, [pc, #68]	; (980 <_ZN16Commands_Handler21CommandReadParametersEv+0x74>)
     93c:	601a      	str	r2, [r3, #0]
     93e:	2200      	movs	r2, #0
     940:	711a      	strb	r2, [r3, #4]
     942:	715a      	strb	r2, [r3, #5]
		memcpy((uint8_t*)&usbMessageBuffer[n],(void*)&parameters,sizeof(UserParameters));
     944:	68e3      	ldr	r3, [r4, #12]
     946:	6e22      	ldr	r2, [r4, #96]	; 0x60
     948:	f8c3 2006 	str.w	r2, [r3, #6]
		is_stand_alone=flapper.IsStandAlone();
     94c:	480d      	ldr	r0, [pc, #52]	; (984 <_ZN16Commands_Handler21CommandReadParametersEv+0x78>)
     94e:	4b0e      	ldr	r3, [pc, #56]	; (988 <_ZN16Commands_Handler21CommandReadParametersEv+0x7c>)
     950:	4798      	blx	r3
     952:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
		if (is_stand_alone)
     956:	b148      	cbz	r0, 96c <_ZN16Commands_Handler21CommandReadParametersEv+0x60>
			memcpy(&usbMessageBuffer[n+sizeof(UserParameters)],parameters.flapperValveStandAloneMinimumPosition,2);
     958:	68e3      	ldr	r3, [r4, #12]
     95a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
     95e:	815a      	strh	r2, [r3, #10]
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     960:	2240      	movs	r2, #64	; 0x40
     962:	68e1      	ldr	r1, [r4, #12]
     964:	4809      	ldr	r0, [pc, #36]	; (98c <_ZN16Commands_Handler21CommandReadParametersEv+0x80>)
     966:	4b0a      	ldr	r3, [pc, #40]	; (990 <_ZN16Commands_Handler21CommandReadParametersEv+0x84>)
     968:	4798      	blx	r3
     96a:	e7dd      	b.n	928 <_ZN16Commands_Handler21CommandReadParametersEv+0x1c>
			memcpy(&usbMessageBuffer[n+sizeof(UserParameters)],parameters.flapperValveMinimumPosition,2);
     96c:	68e3      	ldr	r3, [r4, #12]
     96e:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
     972:	815a      	strh	r2, [r3, #10]
     974:	e7f4      	b.n	960 <_ZN16Commands_Handler21CommandReadParametersEv+0x54>
     976:	bf00      	nop
     978:	20006b04 	.word	0x20006b04
     97c:	00014939 	.word	0x00014939
     980:	61626364 	.word	0x61626364
     984:	200051a0 	.word	0x200051a0
     988:	0001241d 	.word	0x0001241d
     98c:	200034b8 	.word	0x200034b8
     990:	00010f15 	.word	0x00010f15

00000994 <_ZN16Commands_Handler21CommandReadDataLoggerEv>:
bool Commands_Handler::CommandReadDataLogger(){
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
     996:	b083      	sub	sp, #12
	memcpy(&dataLogMessage,usbMessageBuffer,sizeof(DataLogMessage));
     998:	68c1      	ldr	r1, [r0, #12]
     99a:	680c      	ldr	r4, [r1, #0]
     99c:	684a      	ldr	r2, [r1, #4]
     99e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
     9a2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
     9a6:	890a      	ldrh	r2, [r1, #8]
     9a8:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
	if (result){
     9ac:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
     9b0:	2b57      	cmp	r3, #87	; 0x57
     9b2:	d002      	beq.n	9ba <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x26>
	bool	result(dataLogMessage.header.task == kHVACCommandReadDataLog);
     9b4:	2000      	movs	r0, #0
}
     9b6:	b003      	add	sp, #12
     9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ba:	4604      	mov	r4, r0
			uint32_t add=*logger.memory_event_stack;
     9bc:	4b57      	ldr	r3, [pc, #348]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9be:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	9301      	str	r3, [sp, #4]
			if (add>=dataLogMessage.address)
     9c6:	f8d0 008a 	ldr.w	r0, [r0, #138]	; 0x8a
     9ca:	4283      	cmp	r3, r0
     9cc:	d241      	bcs.n	a52 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xbe>
				current_logger_stack_value=*logger.event_buffer_arrray_stack;
     9ce:	4b53      	ldr	r3, [pc, #332]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9d0:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
				if (current_logger_stack_value>local_last_read_stack)
     9da:	4a51      	ldr	r2, [pc, #324]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     9dc:	6812      	ldr	r2, [r2, #0]
     9de:	4293      	cmp	r3, r2
     9e0:	f240 808c 	bls.w	afc <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x168>
					logger_data_buffer_temp_size=current_logger_stack_value-local_last_read_stack;
     9e4:	1a9b      	subs	r3, r3, r2
     9e6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
					memory_flash_address=(logger_data_buffer_temp_size)&(0xffff);
     9ea:	b29b      	uxth	r3, r3
					memory_flash_address|=EVENT_LOGGER_MASK;
     9ec:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     9f0:	f443 032a 	orr.w	r3, r3, #11141120	; 0xaa0000
     9f4:	6763      	str	r3, [r4, #116]	; 0x74
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     9f6:	67e3      	str	r3, [r4, #124]	; 0x7c
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     9f8:	4f48      	ldr	r7, [pc, #288]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9fa:	4638      	mov	r0, r7
     9fc:	4b49      	ldr	r3, [pc, #292]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     9fe:	4798      	blx	r3
     a00:	67a0      	str	r0, [r4, #120]	; 0x78
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     a02:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     a06:	6823      	ldr	r3, [r4, #0]
     a08:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a0c:	f104 027c 	add.w	r2, r4, #124	; 0x7c
     a10:	68e1      	ldr	r1, [r4, #12]
     a12:	4420      	add	r0, r4
     a14:	4b44      	ldr	r3, [pc, #272]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     a16:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a18:	4e44      	ldr	r6, [pc, #272]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     a1a:	2240      	movs	r2, #64	; 0x40
     a1c:	68e1      	ldr	r1, [r4, #12]
     a1e:	4630      	mov	r0, r6
     a20:	4d43      	ldr	r5, [pc, #268]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     a22:	47a8      	blx	r5
					delay_ms(100);
     a24:	2064      	movs	r0, #100	; 0x64
     a26:	4b43      	ldr	r3, [pc, #268]	; (b34 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a0>)
     a28:	4798      	blx	r3
					write_result=usb.write(&logger.event_buffer_arrray[local_last_read_stack],logger_data_buffer_temp_size);
     a2a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
     a2e:	4b3c      	ldr	r3, [pc, #240]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     a30:	681b      	ldr	r3, [r3, #0]
     a32:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
     a36:	4419      	add	r1, r3
     a38:	4630      	mov	r0, r6
     a3a:	47a8      	blx	r5
     a3c:	6720      	str	r0, [r4, #112]	; 0x70
					if (write_result==0)
     a3e:	2800      	cmp	r0, #0
     a40:	d04c      	beq.n	adc <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x148>
						local_last_read_stack=*logger.event_buffer_arrray_stack;
     a42:	4b36      	ldr	r3, [pc, #216]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     a44:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
     a48:	681a      	ldr	r2, [r3, #0]
     a4a:	4b35      	ldr	r3, [pc, #212]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     a4c:	601a      	str	r2, [r3, #0]
						result=false;
     a4e:	2000      	movs	r0, #0
     a50:	e7b1      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
				memory_flash_address= dataLogMessage.address;
     a52:	6760      	str	r0, [r4, #116]	; 0x74
				read_result=memory.ReadEventLogSector(memory_flash_address,memory_block);
     a54:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
     a58:	4601      	mov	r1, r0
     a5a:	4837      	ldr	r0, [pc, #220]	; (b38 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a4>)
     a5c:	4b37      	ldr	r3, [pc, #220]	; (b3c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a8>)
     a5e:	4798      	blx	r3
     a60:	66e0      	str	r0, [r4, #108]	; 0x6c
				if (read_result==0)
     a62:	bb50      	cbnz	r0, aba <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x126>
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     a64:	6f63      	ldr	r3, [r4, #116]	; 0x74
     a66:	67e3      	str	r3, [r4, #124]	; 0x7c
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     a68:	4d2c      	ldr	r5, [pc, #176]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     a6a:	4628      	mov	r0, r5
     a6c:	4b2d      	ldr	r3, [pc, #180]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     a6e:	4798      	blx	r3
     a70:	67a0      	str	r0, [r4, #120]	; 0x78
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     a72:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     a76:	6823      	ldr	r3, [r4, #0]
     a78:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a7c:	f104 027c 	add.w	r2, r4, #124	; 0x7c
     a80:	68e1      	ldr	r1, [r4, #12]
     a82:	4420      	add	r0, r4
     a84:	4b28      	ldr	r3, [pc, #160]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     a86:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a88:	4f28      	ldr	r7, [pc, #160]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     a8a:	2240      	movs	r2, #64	; 0x40
     a8c:	68e1      	ldr	r1, [r4, #12]
     a8e:	4638      	mov	r0, r7
     a90:	4e27      	ldr	r6, [pc, #156]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     a92:	47b0      	blx	r6
					delay_ms(100);
     a94:	2064      	movs	r0, #100	; 0x64
     a96:	4b27      	ldr	r3, [pc, #156]	; (b34 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a0>)
     a98:	4798      	blx	r3
					write_result=usb.write(memory_block,QSPI_ERBLK);
     a9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a9e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
     aa2:	4638      	mov	r0, r7
     aa4:	47b0      	blx	r6
     aa6:	6720      	str	r0, [r4, #112]	; 0x70
					local_last_read_stack=*logger.event_buffer_arrray_stack;
     aa8:	f8d5 35f4 	ldr.w	r3, [r5, #1524]	; 0x5f4
     aac:	681a      	ldr	r2, [r3, #0]
     aae:	4b1c      	ldr	r3, [pc, #112]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     ab0:	601a      	str	r2, [r3, #0]
					result=write_result==0;
     ab2:	fab0 f080 	clz	r0, r0
     ab6:	0940      	lsrs	r0, r0, #5
     ab8:	e77d      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
					memory_flash_address=0;
     aba:	2500      	movs	r5, #0
     abc:	6765      	str	r5, [r4, #116]	; 0x74
					CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     abe:	6823      	ldr	r3, [r4, #0]
     ac0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     ac4:	aa01      	add	r2, sp, #4
     ac6:	68e1      	ldr	r1, [r4, #12]
     ac8:	4420      	add	r0, r4
     aca:	4b17      	ldr	r3, [pc, #92]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     acc:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     ace:	2240      	movs	r2, #64	; 0x40
     ad0:	68e1      	ldr	r1, [r4, #12]
     ad2:	4816      	ldr	r0, [pc, #88]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     ad4:	4b16      	ldr	r3, [pc, #88]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     ad6:	4798      	blx	r3
					result=false;
     ad8:	4628      	mov	r0, r5
     ada:	e76c      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
						memset(&logger.event_buffer_arrray[local_last_read_stack],0,logger_data_buffer_temp_size);
     adc:	4d10      	ldr	r5, [pc, #64]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     ade:	f8d7 05f0 	ldr.w	r0, [r7, #1520]	; 0x5f0
     ae2:	682b      	ldr	r3, [r5, #0]
     ae4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
     ae8:	2100      	movs	r1, #0
     aea:	4418      	add	r0, r3
     aec:	4b14      	ldr	r3, [pc, #80]	; (b40 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1ac>)
     aee:	4798      	blx	r3
						*logger.event_buffer_arrray_stack=local_last_read_stack;
     af0:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
     af4:	682a      	ldr	r2, [r5, #0]
     af6:	601a      	str	r2, [r3, #0]
						result=true;
     af8:	2001      	movs	r0, #1
     afa:	e75c      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
						memory_flash_address=0;
     afc:	2500      	movs	r5, #0
     afe:	6765      	str	r5, [r4, #116]	; 0x74
						CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     b00:	6823      	ldr	r3, [r4, #0]
     b02:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b06:	aa01      	add	r2, sp, #4
     b08:	4420      	add	r0, r4
     b0a:	4b07      	ldr	r3, [pc, #28]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     b0c:	4798      	blx	r3
						usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b0e:	2240      	movs	r2, #64	; 0x40
     b10:	68e1      	ldr	r1, [r4, #12]
     b12:	4806      	ldr	r0, [pc, #24]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     b16:	4798      	blx	r3
						result=false;
     b18:	4628      	mov	r0, r5
     b1a:	e74c      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
     b1c:	20003a78 	.word	0x20003a78
     b20:	20000a64 	.word	0x20000a64
     b24:	00011e45 	.word	0x00011e45
     b28:	00001115 	.word	0x00001115
     b2c:	200034b8 	.word	0x200034b8
     b30:	00010f15 	.word	0x00010f15
     b34:	000036c9 	.word	0x000036c9
     b38:	20006b04 	.word	0x20006b04
     b3c:	000148d9 	.word	0x000148d9
     b40:	0001b215 	.word	0x0001b215

00000b44 <_ZN16Commands_Handler23CommandReadHeaterStatusEv>:
bool Commands_Handler::CommandReadHeaterStatus(){
     b44:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     b46:	68c3      	ldr	r3, [r0, #12]
     b48:	6819      	ldr	r1, [r3, #0]
     b4a:	6041      	str	r1, [r0, #4]
     b4c:	8899      	ldrh	r1, [r3, #4]
     b4e:	799b      	ldrb	r3, [r3, #6]
     b50:	8101      	strh	r1, [r0, #8]
     b52:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadHeaterStatus);
     b54:	7a43      	ldrb	r3, [r0, #9]
     b56:	2b4a      	cmp	r3, #74	; 0x4a
     b58:	bf0c      	ite	eq
     b5a:	2501      	moveq	r5, #1
     b5c:	2500      	movne	r5, #0
	if (result){
     b5e:	d001      	beq.n	b64 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x20>
}
     b60:	4628      	mov	r0, r5
     b62:	bd70      	pop	{r4, r5, r6, pc}
     b64:	4604      	mov	r4, r0
		heaters.ReadAllGPIOs(heater_data_array);
     b66:	f100 0655 	add.w	r6, r0, #85	; 0x55
     b6a:	4631      	mov	r1, r6
     b6c:	4808      	ldr	r0, [pc, #32]	; (b90 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x4c>)
     b6e:	4b09      	ldr	r3, [pc, #36]	; (b94 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x50>)
     b70:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,heater_data_array);
     b72:	6823      	ldr	r3, [r4, #0]
     b74:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b78:	4632      	mov	r2, r6
     b7a:	68e1      	ldr	r1, [r4, #12]
     b7c:	4420      	add	r0, r4
     b7e:	4b06      	ldr	r3, [pc, #24]	; (b98 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x54>)
     b80:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b82:	2240      	movs	r2, #64	; 0x40
     b84:	68e1      	ldr	r1, [r4, #12]
     b86:	4805      	ldr	r0, [pc, #20]	; (b9c <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x58>)
     b88:	4b05      	ldr	r3, [pc, #20]	; (ba0 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x5c>)
     b8a:	4798      	blx	r3
     b8c:	e7e8      	b.n	b60 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x1c>
     b8e:	bf00      	nop
     b90:	20002df4 	.word	0x20002df4
     b94:	0000fc05 	.word	0x0000fc05
     b98:	00001115 	.word	0x00001115
     b9c:	200034b8 	.word	0x200034b8
     ba0:	00010f15 	.word	0x00010f15

00000ba4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv>:
bool Commands_Handler::CommandReadScavengeStatus(void){
     ba4:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     ba6:	68c3      	ldr	r3, [r0, #12]
     ba8:	6819      	ldr	r1, [r3, #0]
     baa:	6041      	str	r1, [r0, #4]
     bac:	8899      	ldrh	r1, [r3, #4]
     bae:	799b      	ldrb	r3, [r3, #6]
     bb0:	8101      	strh	r1, [r0, #8]
     bb2:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadScavengeStatus);
     bb4:	7a43      	ldrb	r3, [r0, #9]
     bb6:	2b52      	cmp	r3, #82	; 0x52
     bb8:	bf0c      	ite	eq
     bba:	2501      	moveq	r5, #1
     bbc:	2500      	movne	r5, #0
	if (result){
     bbe:	d001      	beq.n	bc4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x20>
}
     bc0:	4628      	mov	r0, r5
     bc2:	bd38      	pop	{r3, r4, r5, pc}
     bc4:	4604      	mov	r4, r0
		data_byte=scavenge.ReadStatus();
     bc6:	4809      	ldr	r0, [pc, #36]	; (bec <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x48>)
     bc8:	4b09      	ldr	r3, [pc, #36]	; (bf0 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x4c>)
     bca:	4798      	blx	r3
     bcc:	4622      	mov	r2, r4
     bce:	f802 0f68 	strb.w	r0, [r2, #104]!
		CreateFullBufferMessage(usbMessageBuffer,&data_byte);
     bd2:	6823      	ldr	r3, [r4, #0]
     bd4:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     bd8:	68e1      	ldr	r1, [r4, #12]
     bda:	4420      	add	r0, r4
     bdc:	4b05      	ldr	r3, [pc, #20]	; (bf4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x50>)
     bde:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     be0:	2240      	movs	r2, #64	; 0x40
     be2:	68e1      	ldr	r1, [r4, #12]
     be4:	4804      	ldr	r0, [pc, #16]	; (bf8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x54>)
     be6:	4b05      	ldr	r3, [pc, #20]	; (bfc <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x58>)
     be8:	4798      	blx	r3
     bea:	e7e9      	b.n	bc0 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x1c>
     bec:	2000ce64 	.word	0x2000ce64
     bf0:	00014ca1 	.word	0x00014ca1
     bf4:	00001115 	.word	0x00001115
     bf8:	200034b8 	.word	0x200034b8
     bfc:	00010f15 	.word	0x00010f15

00000c00 <_ZN16Commands_Handler27CommandReadCompressorStatusEv>:
bool Commands_Handler::CommandReadCompressorStatus(void){
     c00:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     c02:	68c3      	ldr	r3, [r0, #12]
     c04:	6819      	ldr	r1, [r3, #0]
     c06:	6041      	str	r1, [r0, #4]
     c08:	8899      	ldrh	r1, [r3, #4]
     c0a:	799b      	ldrb	r3, [r3, #6]
     c0c:	8101      	strh	r1, [r0, #8]
     c0e:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadCompressorStatus);
     c10:	7a43      	ldrb	r3, [r0, #9]
     c12:	2b54      	cmp	r3, #84	; 0x54
     c14:	bf0c      	ite	eq
     c16:	2501      	moveq	r5, #1
     c18:	2500      	movne	r5, #0
	if (result){
     c1a:	d001      	beq.n	c20 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x20>
}
     c1c:	4628      	mov	r0, r5
     c1e:	bd38      	pop	{r3, r4, r5, pc}
     c20:	4604      	mov	r4, r0
		ccu.GetCompressorStatus(compressor_data_array);
     c22:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
     c24:	480b      	ldr	r0, [pc, #44]	; (c54 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x54>)
     c26:	4b0c      	ldr	r3, [pc, #48]	; (c58 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x58>)
     c28:	4798      	blx	r3
		memcpy(&compressor_data_array[16],(void*)&temperatures.values[0][0],4);
     c2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     c2c:	4b0b      	ldr	r3, [pc, #44]	; (c5c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x5c>)
     c2e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
     c30:	6111      	str	r1, [r2, #16]
		memcpy(&compressor_data_array[20],(void*)&temperatures.values[0][1],4);
     c32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     c36:	6153      	str	r3, [r2, #20]
		CreateFullBufferMessage(usbMessageBuffer,compressor_data_array);
     c38:	6823      	ldr	r3, [r4, #0]
     c3a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     c40:	68e1      	ldr	r1, [r4, #12]
     c42:	4420      	add	r0, r4
     c44:	4b06      	ldr	r3, [pc, #24]	; (c60 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x60>)
     c46:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     c48:	2240      	movs	r2, #64	; 0x40
     c4a:	68e1      	ldr	r1, [r4, #12]
     c4c:	4805      	ldr	r0, [pc, #20]	; (c64 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x64>)
     c4e:	4b06      	ldr	r3, [pc, #24]	; (c68 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x68>)
     c50:	4798      	blx	r3
     c52:	e7e3      	b.n	c1c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x1c>
     c54:	20002920 	.word	0x20002920
     c58:	0000f185 	.word	0x0000f185
     c5c:	2000ce78 	.word	0x2000ce78
     c60:	00001115 	.word	0x00001115
     c64:	200034b8 	.word	0x200034b8
     c68:	00010f15 	.word	0x00010f15

00000c6c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     c6c:	bf00      	nop
     c6e:	e7fd      	b.n	c6c <Dummy_Handler>

00000c70 <Reset_Handler>:
{
     c70:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     c72:	4b17      	ldr	r3, [pc, #92]	; (cd0 <Reset_Handler+0x60>)
     c74:	4a17      	ldr	r2, [pc, #92]	; (cd4 <Reset_Handler+0x64>)
     c76:	429a      	cmp	r2, r3
     c78:	d010      	beq.n	c9c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     c7a:	4b17      	ldr	r3, [pc, #92]	; (cd8 <Reset_Handler+0x68>)
     c7c:	4a14      	ldr	r2, [pc, #80]	; (cd0 <Reset_Handler+0x60>)
     c7e:	429a      	cmp	r2, r3
     c80:	d20c      	bcs.n	c9c <Reset_Handler+0x2c>
     c82:	3b01      	subs	r3, #1
     c84:	1a9b      	subs	r3, r3, r2
     c86:	f023 0303 	bic.w	r3, r3, #3
     c8a:	3304      	adds	r3, #4
     c8c:	4413      	add	r3, r2
     c8e:	4911      	ldr	r1, [pc, #68]	; (cd4 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     c90:	f851 0b04 	ldr.w	r0, [r1], #4
     c94:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     c98:	429a      	cmp	r2, r3
     c9a:	d1f9      	bne.n	c90 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     c9c:	4b0f      	ldr	r3, [pc, #60]	; (cdc <Reset_Handler+0x6c>)
     c9e:	4a10      	ldr	r2, [pc, #64]	; (ce0 <Reset_Handler+0x70>)
     ca0:	429a      	cmp	r2, r3
     ca2:	d20a      	bcs.n	cba <Reset_Handler+0x4a>
     ca4:	3b01      	subs	r3, #1
     ca6:	1a9b      	subs	r3, r3, r2
     ca8:	f023 0303 	bic.w	r3, r3, #3
     cac:	3304      	adds	r3, #4
     cae:	4413      	add	r3, r2
                *pDest++ = 0;
     cb0:	2100      	movs	r1, #0
     cb2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     cb6:	4293      	cmp	r3, r2
     cb8:	d1fb      	bne.n	cb2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     cba:	4a0a      	ldr	r2, [pc, #40]	; (ce4 <Reset_Handler+0x74>)
     cbc:	4b0a      	ldr	r3, [pc, #40]	; (ce8 <Reset_Handler+0x78>)
     cbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     cc2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     cc4:	4b09      	ldr	r3, [pc, #36]	; (cec <Reset_Handler+0x7c>)
     cc6:	4798      	blx	r3
        main();
     cc8:	4b09      	ldr	r3, [pc, #36]	; (cf0 <Reset_Handler+0x80>)
     cca:	4798      	blx	r3
     ccc:	e7fe      	b.n	ccc <Reset_Handler+0x5c>
     cce:	bf00      	nop
     cd0:	20000000 	.word	0x20000000
     cd4:	0001c82c 	.word	0x0001c82c
     cd8:	20000a44 	.word	0x20000a44
     cdc:	2000e210 	.word	0x2000e210
     ce0:	20000a48 	.word	0x20000a48
     ce4:	e000ed00 	.word	0xe000ed00
     ce8:	00000000 	.word	0x00000000
     cec:	0001b091 	.word	0x0001b091
     cf0:	00000d29 	.word	0x00000d29

00000cf4 <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cf4:	2280      	movs	r2, #128	; 0x80
     cf6:	4b0a      	ldr	r3, [pc, #40]	; (d20 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     cf8:	619a      	str	r2, [r3, #24]

static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	is_firmware_OK=true;
	if (counter_running==last_count)
     cfa:	4b0a      	ldr	r3, [pc, #40]	; (d24 <_ZL15FirmwareIsAlivePK10timer_task+0x30>)
     cfc:	681a      	ldr	r2, [r3, #0]
     cfe:	685b      	ldr	r3, [r3, #4]
     d00:	429a      	cmp	r2, r3
     d02:	d009      	beq.n	d18 <_ZL15FirmwareIsAlivePK10timer_task+0x24>
		is_running=false;
	} 
	else
	{
		is_running=true;
		last_count=counter_running;
     d04:	4b07      	ldr	r3, [pc, #28]	; (d24 <_ZL15FirmwareIsAlivePK10timer_task+0x30>)
     d06:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     d08:	4b05      	ldr	r3, [pc, #20]	; (d20 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     d0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d0e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d12:	2204      	movs	r2, #4
     d14:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		gpio_toggle_pin_level(LED0);
		gpio_toggle_pin_level(CPU_RUNNING);
		
	}
	
	localtimeout=true;
     d18:	2201      	movs	r2, #1
     d1a:	4b02      	ldr	r3, [pc, #8]	; (d24 <_ZL15FirmwareIsAlivePK10timer_task+0x30>)
     d1c:	721a      	strb	r2, [r3, #8]
     d1e:	4770      	bx	lr
     d20:	41008000 	.word	0x41008000
     d24:	20001b98 	.word	0x20001b98

00000d28 <main>:




int main(void)		
{
     d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     d2c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2e:	2204      	movs	r2, #4
     d30:	4b7d      	ldr	r3, [pc, #500]	; (f28 <main+0x200>)
     d32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(CPU_RUNNING,false);
	bool gotNewTemperature=false;
	atmel_start_init();
     d36:	4b7d      	ldr	r3, [pc, #500]	; (f2c <main+0x204>)
     d38:	4798      	blx	r3
	UserParameters parameters=defaultParameters;
     d3a:	4b7d      	ldr	r3, [pc, #500]	; (f30 <main+0x208>)
     d3c:	6818      	ldr	r0, [r3, #0]
     d3e:	9001      	str	r0, [sp, #4]
	
	//StartLivePulse();
	delay_ms(200);
     d40:	20c8      	movs	r0, #200	; 0xc8
     d42:	4b7c      	ldr	r3, [pc, #496]	; (f34 <main+0x20c>)
     d44:	4798      	blx	r3
	logger.Init();
     d46:	487c      	ldr	r0, [pc, #496]	; (f38 <main+0x210>)
     d48:	4b7c      	ldr	r3, [pc, #496]	; (f3c <main+0x214>)
     d4a:	4798      	blx	r3
	while(!memory.Init()){
     d4c:	4e7c      	ldr	r6, [pc, #496]	; (f40 <main+0x218>)
     d4e:	4d7d      	ldr	r5, [pc, #500]	; (f44 <main+0x21c>)
		delay_ms(DELAY_ERROR);
     d50:	4c78      	ldr	r4, [pc, #480]	; (f34 <main+0x20c>)
	while(!memory.Init()){
     d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     d56:	4630      	mov	r0, r6
     d58:	47a8      	blx	r5
     d5a:	b938      	cbnz	r0, d6c <main+0x44>
		delay_ms(DELAY_ERROR);
     d5c:	2064      	movs	r0, #100	; 0x64
     d5e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     d60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d64:	4b70      	ldr	r3, [pc, #448]	; (f28 <main+0x200>)
     d66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d6a:	e7f2      	b.n	d52 <main+0x2a>
		gpio_toggle_pin_level(LED0);
	}
	if (memory.initiated)
     d6c:	4b74      	ldr	r3, [pc, #464]	; (f40 <main+0x218>)
     d6e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
     d72:	b15b      	cbz	r3, d8c <main+0x64>
	{
		memory.WriteDefaultParameters();
     d74:	4c72      	ldr	r4, [pc, #456]	; (f40 <main+0x218>)
     d76:	4620      	mov	r0, r4
     d78:	4b73      	ldr	r3, [pc, #460]	; (f48 <main+0x220>)
     d7a:	4798      	blx	r3
		memory.SaveParameters(parameters);
     d7c:	a901      	add	r1, sp, #4
     d7e:	4620      	mov	r0, r4
     d80:	4b72      	ldr	r3, [pc, #456]	; (f4c <main+0x224>)
     d82:	4798      	blx	r3
		logger.SaveEvent("Info:Memory Started");
     d84:	4972      	ldr	r1, [pc, #456]	; (f50 <main+0x228>)
     d86:	486c      	ldr	r0, [pc, #432]	; (f38 <main+0x210>)
     d88:	4b72      	ldr	r3, [pc, #456]	; (f54 <main+0x22c>)
     d8a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d90:	4b65      	ldr	r3, [pc, #404]	; (f28 <main+0x200>)
     d92:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	}
	gpio_set_pin_level(LED0,true);
	while(!heaters.Init()){
     d96:	4e70      	ldr	r6, [pc, #448]	; (f58 <main+0x230>)
     d98:	4d70      	ldr	r5, [pc, #448]	; (f5c <main+0x234>)
		delay_ms(DELAY_ERROR);
     d9a:	4c66      	ldr	r4, [pc, #408]	; (f34 <main+0x20c>)
	while(!heaters.Init()){
     d9c:	4630      	mov	r0, r6
     d9e:	47a8      	blx	r5
     da0:	b938      	cbnz	r0, db2 <main+0x8a>
		delay_ms(DELAY_ERROR);
     da2:	2064      	movs	r0, #100	; 0x64
     da4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     da6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     daa:	4b5f      	ldr	r3, [pc, #380]	; (f28 <main+0x200>)
     dac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     db0:	e7f4      	b.n	d9c <main+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     db2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     db6:	4b5c      	ldr	r3, [pc, #368]	; (f28 <main+0x200>)
     db8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		gpio_toggle_pin_level(LED0);

	}
	gpio_set_pin_level(LED0,true);
	while(!fans.Init()){
     dbc:	4e68      	ldr	r6, [pc, #416]	; (f60 <main+0x238>)
     dbe:	4d69      	ldr	r5, [pc, #420]	; (f64 <main+0x23c>)
		delay_ms(DELAY_ERROR);
     dc0:	4c5c      	ldr	r4, [pc, #368]	; (f34 <main+0x20c>)
	while(!fans.Init()){
     dc2:	4630      	mov	r0, r6
     dc4:	47a8      	blx	r5
     dc6:	b938      	cbnz	r0, dd8 <main+0xb0>
		delay_ms(DELAY_ERROR);
     dc8:	2064      	movs	r0, #100	; 0x64
     dca:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     dcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     dd0:	4b55      	ldr	r3, [pc, #340]	; (f28 <main+0x200>)
     dd2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     dd6:	e7f4      	b.n	dc2 <main+0x9a>
		gpio_toggle_pin_level(LED0);
			
	}
	fans.condesator->SetEnable(false);
     dd8:	4c61      	ldr	r4, [pc, #388]	; (f60 <main+0x238>)
     dda:	2100      	movs	r1, #0
     ddc:	6e60      	ldr	r0, [r4, #100]	; 0x64
     dde:	4b62      	ldr	r3, [pc, #392]	; (f68 <main+0x240>)
     de0:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     de2:	2100      	movs	r1, #0
     de4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     de6:	4d61      	ldr	r5, [pc, #388]	; (f6c <main+0x244>)
     de8:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     dea:	2100      	movs	r1, #0
     dec:	6e20      	ldr	r0, [r4, #96]	; 0x60
     dee:	47a8      	blx	r5
	
	bool isOK=temperatures.Init();
     df0:	485f      	ldr	r0, [pc, #380]	; (f70 <main+0x248>)
     df2:	4b60      	ldr	r3, [pc, #384]	; (f74 <main+0x24c>)
     df4:	4798      	blx	r3
	if (isOK)
     df6:	b110      	cbz	r0, dfe <main+0xd6>
	{
		temperatures.StartOneConversion();
     df8:	485d      	ldr	r0, [pc, #372]	; (f70 <main+0x248>)
     dfa:	4b5f      	ldr	r3, [pc, #380]	; (f78 <main+0x250>)
     dfc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dfe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e02:	4b49      	ldr	r3, [pc, #292]	; (f28 <main+0x200>)
     e04:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
 	gpio_set_pin_level(LED0,true);
	while (!flapper.Init())
     e08:	4e5c      	ldr	r6, [pc, #368]	; (f7c <main+0x254>)
     e0a:	4d5d      	ldr	r5, [pc, #372]	; (f80 <main+0x258>)
	{
		delay_ms(DELAY_ERROR);
     e0c:	4c49      	ldr	r4, [pc, #292]	; (f34 <main+0x20c>)
	while (!flapper.Init())
     e0e:	4630      	mov	r0, r6
     e10:	47a8      	blx	r5
     e12:	b938      	cbnz	r0, e24 <main+0xfc>
		delay_ms(DELAY_ERROR);
     e14:	2064      	movs	r0, #100	; 0x64
     e16:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     e18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e1c:	4b42      	ldr	r3, [pc, #264]	; (f28 <main+0x200>)
     e1e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e22:	e7f4      	b.n	e0e <main+0xe6>
		gpio_toggle_pin_level(LED0);
	}

// 	

	while(!scavenge.Init()){
     e24:	4e57      	ldr	r6, [pc, #348]	; (f84 <main+0x25c>)
     e26:	4d58      	ldr	r5, [pc, #352]	; (f88 <main+0x260>)
		delay_ms(DELAY_ERROR);
     e28:	4c42      	ldr	r4, [pc, #264]	; (f34 <main+0x20c>)
	while(!scavenge.Init()){
     e2a:	4630      	mov	r0, r6
     e2c:	47a8      	blx	r5
     e2e:	b938      	cbnz	r0, e40 <main+0x118>
		delay_ms(DELAY_ERROR);
     e30:	2064      	movs	r0, #100	; 0x64
     e32:	47a0      	blx	r4
     e34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e38:	4b3b      	ldr	r3, [pc, #236]	; (f28 <main+0x200>)
     e3a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e3e:	e7f4      	b.n	e2a <main+0x102>

		gpio_toggle_pin_level(LED0);

	}
	scavenge.SetEnable(false);
     e40:	2100      	movs	r1, #0
     e42:	4850      	ldr	r0, [pc, #320]	; (f84 <main+0x25c>)
     e44:	4b51      	ldr	r3, [pc, #324]	; (f8c <main+0x264>)
     e46:	4798      	blx	r3
	while(!ccu.Init()){
     e48:	4e51      	ldr	r6, [pc, #324]	; (f90 <main+0x268>)
     e4a:	4d52      	ldr	r5, [pc, #328]	; (f94 <main+0x26c>)
		delay_ms(DELAY_ERROR);
     e4c:	4c39      	ldr	r4, [pc, #228]	; (f34 <main+0x20c>)
	while(!ccu.Init()){
     e4e:	4630      	mov	r0, r6
     e50:	47a8      	blx	r5
     e52:	b938      	cbnz	r0, e64 <main+0x13c>
		delay_ms(DELAY_ERROR);
     e54:	2064      	movs	r0, #100	; 0x64
     e56:	47a0      	blx	r4
     e58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e5c:	4b32      	ldr	r3, [pc, #200]	; (f28 <main+0x200>)
     e5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e62:	e7f4      	b.n	e4e <main+0x126>
		gpio_toggle_pin_level(LED0);
	}
	ccu.SetEnable(false);
     e64:	2100      	movs	r1, #0
     e66:	484c      	ldr	r0, [pc, #304]	; (f98 <main+0x270>)
     e68:	4b4c      	ldr	r3, [pc, #304]	; (f9c <main+0x274>)
     e6a:	4798      	blx	r3
	
	
	
	usb.Init();
     e6c:	484c      	ldr	r0, [pc, #304]	; (fa0 <main+0x278>)
     e6e:	4b4d      	ldr	r3, [pc, #308]	; (fa4 <main+0x27c>)
     e70:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     e76:	4b2c      	ldr	r3, [pc, #176]	; (f28 <main+0x200>)
     e78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	
	



	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),1000);
     e7c:	4c4a      	ldr	r4, [pc, #296]	; (fa8 <main+0x280>)
     e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e82:	494a      	ldr	r1, [pc, #296]	; (fac <main+0x284>)
     e84:	f104 000c 	add.w	r0, r4, #12
     e88:	4b49      	ldr	r3, [pc, #292]	; (fb0 <main+0x288>)
     e8a:	4798      	blx	r3
	uint8_t localPosition;
 	//flapper.valve1->StartControlling(220);

 	//flapper.valve2->StartControlling(220);
	
	userApp.Init();
     e8c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     e90:	4b48      	ldr	r3, [pc, #288]	; (fb4 <main+0x28c>)
     e92:	4798      	blx	r3

	
	


	logger.SaveInstationLog();
     e94:	4828      	ldr	r0, [pc, #160]	; (f38 <main+0x210>)
     e96:	4b48      	ldr	r3, [pc, #288]	; (fb8 <main+0x290>)
     e98:	4798      	blx	r3

	while (1)
	{
		
		if (userApp.IsAppConnected())
     e9a:	4625      	mov	r5, r4
     e9c:	f8df 813c 	ldr.w	r8, [pc, #316]	; fdc <main+0x2b4>
		{
			userApp.handleCommunication();			
     ea0:	f8df 913c 	ldr.w	r9, [pc, #316]	; fe0 <main+0x2b8>
		}
	//	delay_ms(10);
		
	//	while ((!flapper.valve1->gotSetpoint)|((!flapper.valve2->gotSetpoint)&false))
	//	{
			flapper.valve1->Control_NBC_StandAlone_Reset();
     ea4:	4e35      	ldr	r6, [pc, #212]	; (f7c <main+0x254>)
     ea6:	e03b      	b.n	f20 <main+0x1f8>
			userApp.handleCommunication();			
     ea8:	4638      	mov	r0, r7
     eaa:	47c8      	blx	r9
     eac:	e014      	b.n	ed8 <main+0x1b0>
						gotNewTemperature=true;
					
					}
				
				}
				temperatures.StartOneConversion();
     eae:	4830      	ldr	r0, [pc, #192]	; (f70 <main+0x248>)
     eb0:	4b31      	ldr	r3, [pc, #196]	; (f78 <main+0x250>)
     eb2:	4798      	blx	r3
				asm("nop");
     eb4:	bf00      	nop
			}
		}
		
		
		ccu.Periodic_Task();
     eb6:	4836      	ldr	r0, [pc, #216]	; (f90 <main+0x268>)
     eb8:	4b40      	ldr	r3, [pc, #256]	; (fbc <main+0x294>)
     eba:	4798      	blx	r3
		fans.CheckFansOperation();
     ebc:	4828      	ldr	r0, [pc, #160]	; (f60 <main+0x238>)
     ebe:	4b40      	ldr	r3, [pc, #256]	; (fc0 <main+0x298>)
     ec0:	4798      	blx	r3
		scavenge.FillLowSpeedFIFO();
     ec2:	4830      	ldr	r0, [pc, #192]	; (f84 <main+0x25c>)
     ec4:	4b3f      	ldr	r3, [pc, #252]	; (fc4 <main+0x29c>)
     ec6:	4798      	blx	r3
		counter_running++;
     ec8:	682b      	ldr	r3, [r5, #0]
     eca:	3301      	adds	r3, #1
     ecc:	602b      	str	r3, [r5, #0]
		if (counter_running==0)
     ece:	b30b      	cbz	r3, f14 <main+0x1ec>
		if (userApp.IsAppConnected())
     ed0:	4638      	mov	r0, r7
     ed2:	47c0      	blx	r8
     ed4:	2800      	cmp	r0, #0
     ed6:	d1e7      	bne.n	ea8 <main+0x180>
			flapper.valve1->Control_NBC_StandAlone_Reset();
     ed8:	f8d6 00e0 	ldr.w	r0, [r6, #224]	; 0xe0
     edc:	4c3a      	ldr	r4, [pc, #232]	; (fc8 <main+0x2a0>)
     ede:	47a0      	blx	r4
			flapper.valve2->Control_NBC_StandAlone_Reset();
     ee0:	f8d6 00e4 	ldr.w	r0, [r6, #228]	; 0xe4
     ee4:	47a0      	blx	r4
		if (temperatures.isOK)
     ee6:	4b22      	ldr	r3, [pc, #136]	; (f70 <main+0x248>)
     ee8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
     eec:	2b00      	cmp	r3, #0
     eee:	d0e2      	beq.n	eb6 <main+0x18e>
			if (temperatures.IsConversionFinished())
     ef0:	481f      	ldr	r0, [pc, #124]	; (f70 <main+0x248>)
     ef2:	4b36      	ldr	r3, [pc, #216]	; (fcc <main+0x2a4>)
     ef4:	4798      	blx	r3
     ef6:	2800      	cmp	r0, #0
     ef8:	d0dd      	beq.n	eb6 <main+0x18e>
				temperatures.GetConversionResult();
     efa:	4c1d      	ldr	r4, [pc, #116]	; (f70 <main+0x248>)
     efc:	4620      	mov	r0, r4
     efe:	4b34      	ldr	r3, [pc, #208]	; (fd0 <main+0x2a8>)
     f00:	4798      	blx	r3
				if (temperatures.faultData==VALID_TEMPERATURE)
     f02:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     f06:	2b01      	cmp	r3, #1
     f08:	d1d1      	bne.n	eae <main+0x186>
					currentTemperature=temperatures.lastValue;
     f0a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     f0e:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
     f12:	e7cc      	b.n	eae <main+0x186>
		{
			logger.SaveEventIndexResult("Running  like crazy!!!: ",(uint8_t)counter_running,true);
     f14:	2301      	movs	r3, #1
     f16:	2200      	movs	r2, #0
     f18:	492e      	ldr	r1, [pc, #184]	; (fd4 <main+0x2ac>)
     f1a:	4807      	ldr	r0, [pc, #28]	; (f38 <main+0x210>)
     f1c:	4c2e      	ldr	r4, [pc, #184]	; (fd8 <main+0x2b0>)
     f1e:	47a0      	blx	r4
		if (userApp.IsAppConnected())
     f20:	f105 072c 	add.w	r7, r5, #44	; 0x2c
     f24:	e7d4      	b.n	ed0 <main+0x1a8>
     f26:	bf00      	nop
     f28:	41008000 	.word	0x41008000
     f2c:	0000184d 	.word	0x0000184d
     f30:	0001baa4 	.word	0x0001baa4
     f34:	000036c9 	.word	0x000036c9
     f38:	20003a78 	.word	0x20003a78
     f3c:	00011c0d 	.word	0x00011c0d
     f40:	20006b04 	.word	0x20006b04
     f44:	00014a1d 	.word	0x00014a1d
     f48:	00014965 	.word	0x00014965
     f4c:	00014a65 	.word	0x00014a65
     f50:	0001b5fc 	.word	0x0001b5fc
     f54:	00012035 	.word	0x00012035
     f58:	20002df4 	.word	0x20002df4
     f5c:	0000fb71 	.word	0x0000fb71
     f60:	200037b4 	.word	0x200037b4
     f64:	0001174d 	.word	0x0001174d
     f68:	00011555 	.word	0x00011555
     f6c:	000119dd 	.word	0x000119dd
     f70:	2000ce78 	.word	0x2000ce78
     f74:	00014f1d 	.word	0x00014f1d
     f78:	00014fd1 	.word	0x00014fd1
     f7c:	200051a0 	.word	0x200051a0
     f80:	00012389 	.word	0x00012389
     f84:	2000ce64 	.word	0x2000ce64
     f88:	00014d29 	.word	0x00014d29
     f8c:	00014c39 	.word	0x00014c39
     f90:	20002920 	.word	0x20002920
     f94:	0000f0b9 	.word	0x0000f0b9
     f98:	20002ad0 	.word	0x20002ad0
     f9c:	0000f4e5 	.word	0x0000f4e5
     fa0:	200034b8 	.word	0x200034b8
     fa4:	00010c45 	.word	0x00010c45
     fa8:	20001b98 	.word	0x20001b98
     fac:	00000cf5 	.word	0x00000cf5
     fb0:	000106c1 	.word	0x000106c1
     fb4:	000012e5 	.word	0x000012e5
     fb8:	00011d65 	.word	0x00011d65
     fbc:	0000f7a1 	.word	0x0000f7a1
     fc0:	000117e9 	.word	0x000117e9
     fc4:	00014cd9 	.word	0x00014cd9
     fc8:	00012b2d 	.word	0x00012b2d
     fcc:	000150ad 	.word	0x000150ad
     fd0:	00015019 	.word	0x00015019
     fd4:	0001b610 	.word	0x0001b610
     fd8:	00012025 	.word	0x00012025
     fdc:	000017c5 	.word	0x000017c5
     fe0:	000016e5 	.word	0x000016e5

00000fe4 <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     fe8:	4c30      	ldr	r4, [pc, #192]	; (10ac <_GLOBAL__sub_I_localtimeout+0xc8>)
     fea:	f504 7502 	add.w	r5, r4, #520	; 0x208
     fee:	4930      	ldr	r1, [pc, #192]	; (10b0 <_GLOBAL__sub_I_localtimeout+0xcc>)
     ff0:	4628      	mov	r0, r5
     ff2:	4f30      	ldr	r7, [pc, #192]	; (10b4 <_GLOBAL__sub_I_localtimeout+0xd0>)
     ff4:	47b8      	blx	r7
     ff6:	4e30      	ldr	r6, [pc, #192]	; (10b8 <_GLOBAL__sub_I_localtimeout+0xd4>)
     ff8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10f0 <_GLOBAL__sub_I_localtimeout+0x10c>
     ffc:	4632      	mov	r2, r6
     ffe:	4641      	mov	r1, r8
    1000:	4628      	mov	r0, r5
    1002:	4d2e      	ldr	r5, [pc, #184]	; (10bc <_GLOBAL__sub_I_localtimeout+0xd8>)
    1004:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    1006:	f504 790a 	add.w	r9, r4, #552	; 0x228
    100a:	492d      	ldr	r1, [pc, #180]	; (10c0 <_GLOBAL__sub_I_localtimeout+0xdc>)
    100c:	4648      	mov	r0, r9
    100e:	47b8      	blx	r7
    1010:	4632      	mov	r2, r6
    1012:	4641      	mov	r1, r8
    1014:	4648      	mov	r0, r9
    1016:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    1018:	f104 090c 	add.w	r9, r4, #12
    101c:	4929      	ldr	r1, [pc, #164]	; (10c4 <_GLOBAL__sub_I_localtimeout+0xe0>)
    101e:	4648      	mov	r0, r9
    1020:	47b8      	blx	r7
    1022:	4632      	mov	r2, r6
    1024:	4641      	mov	r1, r8
    1026:	4648      	mov	r0, r9
    1028:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    102a:	f504 7912 	add.w	r9, r4, #584	; 0x248
    102e:	4926      	ldr	r1, [pc, #152]	; (10c8 <_GLOBAL__sub_I_localtimeout+0xe4>)
    1030:	4648      	mov	r0, r9
    1032:	47b8      	blx	r7
    1034:	4632      	mov	r2, r6
    1036:	4641      	mov	r1, r8
    1038:	4648      	mov	r0, r9
    103a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    103c:	f504 791a 	add.w	r9, r4, #616	; 0x268
    1040:	4922      	ldr	r1, [pc, #136]	; (10cc <_GLOBAL__sub_I_localtimeout+0xe8>)
    1042:	4648      	mov	r0, r9
    1044:	47b8      	blx	r7
    1046:	4632      	mov	r2, r6
    1048:	4641      	mov	r1, r8
    104a:	4648      	mov	r0, r9
    104c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    104e:	f504 7922 	add.w	r9, r4, #648	; 0x288
    1052:	491f      	ldr	r1, [pc, #124]	; (10d0 <_GLOBAL__sub_I_localtimeout+0xec>)
    1054:	4648      	mov	r0, r9
    1056:	47b8      	blx	r7
    1058:	4632      	mov	r2, r6
    105a:	4641      	mov	r1, r8
    105c:	4648      	mov	r0, r9
    105e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1060:	f504 792a 	add.w	r9, r4, #680	; 0x2a8
    1064:	491b      	ldr	r1, [pc, #108]	; (10d4 <_GLOBAL__sub_I_localtimeout+0xf0>)
    1066:	4648      	mov	r0, r9
    1068:	47b8      	blx	r7
    106a:	4632      	mov	r2, r6
    106c:	4641      	mov	r1, r8
    106e:	4648      	mov	r0, r9
    1070:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    1072:	f504 7932 	add.w	r9, r4, #712	; 0x2c8
    1076:	4918      	ldr	r1, [pc, #96]	; (10d8 <_GLOBAL__sub_I_localtimeout+0xf4>)
    1078:	4648      	mov	r0, r9
    107a:	47b8      	blx	r7
    107c:	4632      	mov	r2, r6
    107e:	4641      	mov	r1, r8
    1080:	4648      	mov	r0, r9
    1082:	47a8      	blx	r5
    1084:	f504 773a 	add.w	r7, r4, #744	; 0x2e8
    1088:	4914      	ldr	r1, [pc, #80]	; (10dc <_GLOBAL__sub_I_localtimeout+0xf8>)
    108a:	4638      	mov	r0, r7
    108c:	4b14      	ldr	r3, [pc, #80]	; (10e0 <_GLOBAL__sub_I_localtimeout+0xfc>)
    108e:	4798      	blx	r3
    1090:	4632      	mov	r2, r6
    1092:	4914      	ldr	r1, [pc, #80]	; (10e4 <_GLOBAL__sub_I_localtimeout+0x100>)
    1094:	4638      	mov	r0, r7
    1096:	47a8      	blx	r5
static Maintenance_Tool	userApp;
    1098:	342c      	adds	r4, #44	; 0x2c
    109a:	4620      	mov	r0, r4
    109c:	4b12      	ldr	r3, [pc, #72]	; (10e8 <_GLOBAL__sub_I_localtimeout+0x104>)
    109e:	4798      	blx	r3
    10a0:	4632      	mov	r2, r6
    10a2:	4912      	ldr	r1, [pc, #72]	; (10ec <_GLOBAL__sub_I_localtimeout+0x108>)
    10a4:	4620      	mov	r0, r4
    10a6:	47a8      	blx	r5
    10a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    10ac:	20001b98 	.word	0x20001b98
    10b0:	2000df58 	.word	0x2000df58
    10b4:	000104e5 	.word	0x000104e5
    10b8:	20000000 	.word	0x20000000
    10bc:	0001ab61 	.word	0x0001ab61
    10c0:	2000dfec 	.word	0x2000dfec
    10c4:	2000e110 	.word	0x2000e110
    10c8:	2000e00c 	.word	0x2000e00c
    10cc:	2000e0d0 	.word	0x2000e0d0
    10d0:	2000e0f0 	.word	0x2000e0f0
    10d4:	2000dfc8 	.word	0x2000dfc8
    10d8:	2000e068 	.word	0x2000e068
    10dc:	2000e088 	.word	0x2000e088
    10e0:	0000fcb5 	.word	0x0000fcb5
    10e4:	0000fcd1 	.word	0x0000fcd1
    10e8:	000011bd 	.word	0x000011bd
    10ec:	00001171 	.word	0x00001171
    10f0:	0001051d 	.word	0x0001051d

000010f4 <_ZN22MaintenanceDataHandlerC1Ev>:
    10f4:	2264      	movs	r2, #100	; 0x64
    10f6:	7002      	strb	r2, [r0, #0]
    10f8:	2263      	movs	r2, #99	; 0x63
    10fa:	7042      	strb	r2, [r0, #1]
    10fc:	2262      	movs	r2, #98	; 0x62
    10fe:	7082      	strb	r2, [r0, #2]
    1100:	2261      	movs	r2, #97	; 0x61
    1102:	70c2      	strb	r2, [r0, #3]
    1104:	2200      	movs	r2, #0
    1106:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
    1108:	223a      	movs	r2, #58	; 0x3a
    110a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
    110e:	4770      	bx	lr

00001110 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
    1110:	4770      	bx	lr
	...

00001114 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
    1114:	b570      	push	{r4, r5, r6, lr}
    1116:	4605      	mov	r5, r0
    1118:	460c      	mov	r4, r1
    111a:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
    111c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    1120:	3006      	adds	r0, #6
    1122:	4b09      	ldr	r3, [pc, #36]	; (1148 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
    1124:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
    1126:	462b      	mov	r3, r5
    1128:	4621      	mov	r1, r4
    112a:	3540      	adds	r5, #64	; 0x40
    112c:	681e      	ldr	r6, [r3, #0]
    112e:	685c      	ldr	r4, [r3, #4]
    1130:	6898      	ldr	r0, [r3, #8]
    1132:	68da      	ldr	r2, [r3, #12]
    1134:	600e      	str	r6, [r1, #0]
    1136:	604c      	str	r4, [r1, #4]
    1138:	6088      	str	r0, [r1, #8]
    113a:	60ca      	str	r2, [r1, #12]
    113c:	3310      	adds	r3, #16
    113e:	3110      	adds	r1, #16
    1140:	42ab      	cmp	r3, r5
    1142:	d1f3      	bne.n	112c <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
    1144:	2000      	movs	r0, #0
    1146:	bd70      	pop	{r4, r5, r6, pc}
    1148:	0001b0e1 	.word	0x0001b0e1

0000114c <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
    114c:	4b03      	ldr	r3, [pc, #12]	; (115c <_ZL21MaintenaceToolTimmingPK10timer_task+0x10>)
    114e:	681a      	ldr	r2, [r3, #0]
    1150:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
    1154:	3301      	adds	r3, #1
    1156:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    115a:	4770      	bx	lr
    115c:	20001e9c 	.word	0x20001e9c

00001160 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
    1160:	4b02      	ldr	r3, [pc, #8]	; (116c <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	2200      	movs	r2, #0
    1166:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    116a:	4770      	bx	lr
    116c:	20001e9c 	.word	0x20001e9c

00001170 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
    1170:	b538      	push	{r3, r4, r5, lr}
    1172:	4604      	mov	r4, r0
    1174:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <_ZN16Maintenance_ToolD1Ev+0x30>)
    1176:	6003      	str	r3, [r0, #0]
{
	ticks=0;
    1178:	2300      	movs	r3, #0
    117a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	interfaceTimer.Stop();
    117e:	4d09      	ldr	r5, [pc, #36]	; (11a4 <_ZN16Maintenance_ToolD1Ev+0x34>)
    1180:	4628      	mov	r0, r5
    1182:	4b09      	ldr	r3, [pc, #36]	; (11a8 <_ZN16Maintenance_ToolD1Ev+0x38>)
    1184:	4798      	blx	r3
	interfaceTimer.Remove_task();
    1186:	4628      	mov	r0, r5
    1188:	4b08      	ldr	r3, [pc, #32]	; (11ac <_ZN16Maintenance_ToolD1Ev+0x3c>)
    118a:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
    118c:	4908      	ldr	r1, [pc, #32]	; (11b0 <_ZN16Maintenance_ToolD1Ev+0x40>)
    118e:	4620      	mov	r0, r4
    1190:	4b08      	ldr	r3, [pc, #32]	; (11b4 <_ZN16Maintenance_ToolD1Ev+0x44>)
    1192:	4798      	blx	r3
    1194:	f504 70ca 	add.w	r0, r4, #404	; 0x194
    1198:	4b07      	ldr	r3, [pc, #28]	; (11b8 <_ZN16Maintenance_ToolD1Ev+0x48>)
    119a:	4798      	blx	r3
	
} //~Maintenance_Tool
    119c:	4620      	mov	r0, r4
    119e:	bd38      	pop	{r3, r4, r5, pc}
    11a0:	0001b64c 	.word	0x0001b64c
    11a4:	20001ea0 	.word	0x20001ea0
    11a8:	00010645 	.word	0x00010645
    11ac:	00010735 	.word	0x00010735
    11b0:	0001b63c 	.word	0x0001b63c
    11b4:	00000319 	.word	0x00000319
    11b8:	00001111 	.word	0x00001111

000011bc <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
    11bc:	b538      	push	{r3, r4, r5, lr}
    11be:	4604      	mov	r4, r0
    11c0:	f500 70ca 	add.w	r0, r0, #404	; 0x194
    11c4:	4b17      	ldr	r3, [pc, #92]	; (1224 <_ZN16Maintenance_ToolC1Ev+0x68>)
    11c6:	4798      	blx	r3
    11c8:	4917      	ldr	r1, [pc, #92]	; (1228 <_ZN16Maintenance_ToolC1Ev+0x6c>)
    11ca:	4620      	mov	r0, r4
    11cc:	4b17      	ldr	r3, [pc, #92]	; (122c <_ZN16Maintenance_ToolC1Ev+0x70>)
    11ce:	4798      	blx	r3
    11d0:	4b17      	ldr	r3, [pc, #92]	; (1230 <_ZN16Maintenance_ToolC1Ev+0x74>)
    11d2:	6023      	str	r3, [r4, #0]
    11d4:	2300      	movs	r3, #0
    11d6:	2564      	movs	r5, #100	; 0x64
    11d8:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
    11dc:	2063      	movs	r0, #99	; 0x63
    11de:	f884 00f9 	strb.w	r0, [r4, #249]	; 0xf9
    11e2:	2162      	movs	r1, #98	; 0x62
    11e4:	f884 10fa 	strb.w	r1, [r4, #250]	; 0xfa
    11e8:	2261      	movs	r2, #97	; 0x61
    11ea:	f884 20fb 	strb.w	r2, [r4, #251]	; 0xfb
    11ee:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
    11f2:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
    11f6:	f884 0187 	strb.w	r0, [r4, #391]	; 0x187
    11fa:	f884 1188 	strb.w	r1, [r4, #392]	; 0x188
    11fe:	f884 2189 	strb.w	r2, [r4, #393]	; 0x189
    1202:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
	ptrMaintenanceTool=this;
    1206:	4a0b      	ldr	r2, [pc, #44]	; (1234 <_ZN16Maintenance_ToolC1Ev+0x78>)
    1208:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
    120c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	nextMaintenanceSyncTime = 0;
    1210:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	nextMaintenanceUsageTimerSyncTime = 0;
    1214:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	ticks=0;
    1218:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	localBuffer=staticBuffer;
    121c:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
} //Maintenance_Tool
    1220:	4620      	mov	r0, r4
    1222:	bd38      	pop	{r3, r4, r5, pc}
    1224:	000010f5 	.word	0x000010f5
    1228:	0001b63c 	.word	0x0001b63c
    122c:	000002d1 	.word	0x000002d1
    1230:	0001b64c 	.word	0x0001b64c
    1234:	20001e9c 	.word	0x20001e9c

00001238 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
    1238:	b410      	push	{r4}
    123a:	4604      	mov	r4, r0
    123c:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
    123e:	4619      	mov	r1, r3
    1240:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    1244:	54d1      	strb	r1, [r2, r3]
    1246:	1c58      	adds	r0, r3, #1
    1248:	b2c0      	uxtb	r0, r0
    124a:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
    124c:	2b40      	cmp	r3, #64	; 0x40
    124e:	d1f7      	bne.n	1240 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
    1250:	bc10      	pop	{r4}
    1252:	4770      	bx	lr

00001254 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
    1254:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
    1258:	b933      	cbnz	r3, 1268 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
    125a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
		maintenanceIsConnected = true;
    125e:	2301      	movs	r3, #1
    1260:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
		bSendNotifications = true;
    1264:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
    1268:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
    126c:	4770      	bx	lr

0000126e <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
    126e:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
    1270:	0855      	lsrs	r5, r2, #1
    1272:	d007      	beq.n	1284 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
    1274:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
    1276:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    127a:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
    127c:	3401      	adds	r4, #1
    127e:	b2a4      	uxth	r4, r4
    1280:	42ac      	cmp	r4, r5
    1282:	dbf8      	blt.n	1276 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
    1284:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
    1288:	bf1d      	ittte	ne
    128a:	189b      	addne	r3, r3, r2
    128c:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
    1290:	4048      	eorne	r0, r1
    1292:	4608      	moveq	r0, r1

	return checksum;
	}
    1294:	bc30      	pop	{r4, r5}
    1296:	4770      	bx	lr

00001298 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
    1298:	b538      	push	{r3, r4, r5, lr}
    129a:	4604      	mov	r4, r0
	checksum=0;
    129c:	2500      	movs	r5, #0
    129e:	f8a0 5162 	strh.w	r5, [r0, #354]	; 0x162
	checksum = calculateChecksum(0, sizeof(header), &header);
    12a2:	460b      	mov	r3, r1
    12a4:	2206      	movs	r2, #6
    12a6:	4629      	mov	r1, r5
    12a8:	4d02      	ldr	r5, [pc, #8]	; (12b4 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
    12aa:	47a8      	blx	r5
    12ac:	f8a4 0162 	strh.w	r0, [r4, #354]	; 0x162
	}
    12b0:	bd38      	pop	{r3, r4, r5, pc}
    12b2:	bf00      	nop
    12b4:	0000126f 	.word	0x0000126f

000012b8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
    12b8:	4b06      	ldr	r3, [pc, #24]	; (12d4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	600b      	str	r3, [r1, #0]
    12be:	4b06      	ldr	r3, [pc, #24]	; (12d8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	604b      	str	r3, [r1, #4]
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
    12c6:	681b      	ldr	r3, [r3, #0]
    12c8:	608b      	str	r3, [r1, #8]
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	60cb      	str	r3, [r1, #12]
    12d0:	4770      	bx	lr
    12d2:	bf00      	nop
    12d4:	41002018 	.word	0x41002018
    12d8:	4100201c 	.word	0x4100201c
    12dc:	41002020 	.word	0x41002020
    12e0:	41002024 	.word	0x41002024

000012e4 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
    12e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12e6:	4604      	mov	r4, r0
	ticks=0;
    12e8:	2600      	movs	r6, #0
    12ea:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
	interfaceTimer.Init();
    12ee:	4d14      	ldr	r5, [pc, #80]	; (1340 <_ZN16Maintenance_Tool4InitEv+0x5c>)
    12f0:	4628      	mov	r0, r5
    12f2:	4b14      	ldr	r3, [pc, #80]	; (1344 <_ZN16Maintenance_Tool4InitEv+0x60>)
    12f4:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
    12f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12fa:	4913      	ldr	r1, [pc, #76]	; (1348 <_ZN16Maintenance_Tool4InitEv+0x64>)
    12fc:	4628      	mov	r0, r5
    12fe:	4b13      	ldr	r3, [pc, #76]	; (134c <_ZN16Maintenance_Tool4InitEv+0x68>)
    1300:	4798      	blx	r3
	InitCommandHandler(localBuffer);
    1302:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    1306:	4620      	mov	r0, r4
    1308:	4b11      	ldr	r3, [pc, #68]	; (1350 <_ZN16Maintenance_Tool4InitEv+0x6c>)
    130a:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
    130c:	f204 156b 	addw	r5, r4, #363	; 0x16b
    1310:	4629      	mov	r1, r5
    1312:	4620      	mov	r0, r4
    1314:	4b0f      	ldr	r3, [pc, #60]	; (1354 <_ZN16Maintenance_Tool4InitEv+0x70>)
    1316:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
    1318:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    131c:	f8d4 716b 	ldr.w	r7, [r4, #363]	; 0x16b
    1320:	f8d4 016f 	ldr.w	r0, [r4, #367]	; 0x16f
    1324:	f8d4 1173 	ldr.w	r1, [r4, #371]	; 0x173
    1328:	f8d4 2177 	ldr.w	r2, [r4, #375]	; 0x177
    132c:	601f      	str	r7, [r3, #0]
    132e:	6058      	str	r0, [r3, #4]
    1330:	6099      	str	r1, [r3, #8]
    1332:	60da      	str	r2, [r3, #12]
	gotAccess=false;
    1334:	f884 615d 	strb.w	r6, [r4, #349]	; 0x15d
}
    1338:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
    133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    133e:	bf00      	nop
    1340:	20001ea0 	.word	0x20001ea0
    1344:	000105d1 	.word	0x000105d1
    1348:	0000114d 	.word	0x0000114d
    134c:	0001070d 	.word	0x0001070d
    1350:	00000321 	.word	0x00000321
    1354:	000012b9 	.word	0x000012b9

00001358 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
    1358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    135c:	4c31      	ldr	r4, [pc, #196]	; (1424 <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
    135e:	f104 0564 	add.w	r5, r4, #100	; 0x64
    1362:	4931      	ldr	r1, [pc, #196]	; (1428 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
    1364:	4628      	mov	r0, r5
    1366:	4f31      	ldr	r7, [pc, #196]	; (142c <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
    1368:	47b8      	blx	r7
    136a:	4e31      	ldr	r6, [pc, #196]	; (1430 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
    136c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1468 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
    1370:	4632      	mov	r2, r6
    1372:	4641      	mov	r1, r8
    1374:	4628      	mov	r0, r5
    1376:	4d2f      	ldr	r5, [pc, #188]	; (1434 <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
    1378:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    137a:	f104 0984 	add.w	r9, r4, #132	; 0x84
    137e:	492e      	ldr	r1, [pc, #184]	; (1438 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
    1380:	4648      	mov	r0, r9
    1382:	47b8      	blx	r7
    1384:	4632      	mov	r2, r6
    1386:	4641      	mov	r1, r8
    1388:	4648      	mov	r0, r9
    138a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    138c:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
    1390:	492a      	ldr	r1, [pc, #168]	; (143c <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
    1392:	4648      	mov	r0, r9
    1394:	47b8      	blx	r7
    1396:	4632      	mov	r2, r6
    1398:	4641      	mov	r1, r8
    139a:	4648      	mov	r0, r9
    139c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    139e:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
    13a2:	4927      	ldr	r1, [pc, #156]	; (1440 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
    13a4:	4648      	mov	r0, r9
    13a6:	47b8      	blx	r7
    13a8:	4632      	mov	r2, r6
    13aa:	4641      	mov	r1, r8
    13ac:	4648      	mov	r0, r9
    13ae:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    13b0:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
    13b4:	4923      	ldr	r1, [pc, #140]	; (1444 <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
    13b6:	4648      	mov	r0, r9
    13b8:	47b8      	blx	r7
    13ba:	4632      	mov	r2, r6
    13bc:	4641      	mov	r1, r8
    13be:	4648      	mov	r0, r9
    13c0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    13c2:	f504 7982 	add.w	r9, r4, #260	; 0x104
    13c6:	4920      	ldr	r1, [pc, #128]	; (1448 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
    13c8:	4648      	mov	r0, r9
    13ca:	47b8      	blx	r7
    13cc:	4632      	mov	r2, r6
    13ce:	4641      	mov	r1, r8
    13d0:	4648      	mov	r0, r9
    13d2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    13d4:	f104 0904 	add.w	r9, r4, #4
    13d8:	491c      	ldr	r1, [pc, #112]	; (144c <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
    13da:	4648      	mov	r0, r9
    13dc:	47b8      	blx	r7
    13de:	4632      	mov	r2, r6
    13e0:	4641      	mov	r1, r8
    13e2:	4648      	mov	r0, r9
    13e4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    13e6:	f504 7992 	add.w	r9, r4, #292	; 0x124
    13ea:	4919      	ldr	r1, [pc, #100]	; (1450 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
    13ec:	4648      	mov	r0, r9
    13ee:	47b8      	blx	r7
    13f0:	4632      	mov	r2, r6
    13f2:	4641      	mov	r1, r8
    13f4:	4648      	mov	r0, r9
    13f6:	47a8      	blx	r5
    13f8:	f504 77a2 	add.w	r7, r4, #324	; 0x144
    13fc:	4915      	ldr	r1, [pc, #84]	; (1454 <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
    13fe:	4638      	mov	r0, r7
    1400:	4b15      	ldr	r3, [pc, #84]	; (1458 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
    1402:	4798      	blx	r3
    1404:	4632      	mov	r2, r6
    1406:	4915      	ldr	r1, [pc, #84]	; (145c <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
    1408:	4638      	mov	r0, r7
    140a:	47a8      	blx	r5
    140c:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
    1410:	4620      	mov	r0, r4
    1412:	4b13      	ldr	r3, [pc, #76]	; (1460 <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
    1414:	4798      	blx	r3
    1416:	4632      	mov	r2, r6
    1418:	4912      	ldr	r1, [pc, #72]	; (1464 <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
    141a:	4620      	mov	r0, r4
    141c:	47a8      	blx	r5
    141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1422:	bf00      	nop
    1424:	20001e9c 	.word	0x20001e9c
    1428:	2000df58 	.word	0x2000df58
    142c:	000104e5 	.word	0x000104e5
    1430:	20000000 	.word	0x20000000
    1434:	0001ab61 	.word	0x0001ab61
    1438:	2000dfec 	.word	0x2000dfec
    143c:	2000e110 	.word	0x2000e110
    1440:	2000e00c 	.word	0x2000e00c
    1444:	2000e0d0 	.word	0x2000e0d0
    1448:	2000e0f0 	.word	0x2000e0f0
    144c:	2000dfc8 	.word	0x2000dfc8
    1450:	2000e068 	.word	0x2000e068
    1454:	2000e088 	.word	0x2000e088
    1458:	0000fcb5 	.word	0x0000fcb5
    145c:	0000fcd1 	.word	0x0000fcd1
    1460:	000011bd 	.word	0x000011bd
    1464:	00001171 	.word	0x00001171
    1468:	0001051d 	.word	0x0001051d

0000146c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
    146c:	b538      	push	{r3, r4, r5, lr}
    146e:	4605      	mov	r5, r0
    1470:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
    1472:	4b05      	ldr	r3, [pc, #20]	; (1488 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
    1474:	4798      	blx	r3
    1476:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
	usb.writeData(&header, sizeof(header));
    147a:	2206      	movs	r2, #6
    147c:	4621      	mov	r1, r4
    147e:	4803      	ldr	r0, [pc, #12]	; (148c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
    1480:	4b03      	ldr	r3, [pc, #12]	; (1490 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
    1482:	4798      	blx	r3
    1484:	bd38      	pop	{r3, r4, r5, pc}
    1486:	bf00      	nop
    1488:	00001299 	.word	0x00001299
    148c:	200034b8 	.word	0x200034b8
    1490:	00010e7d 	.word	0x00010e7d

00001494 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
    1494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
    1498:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
    149c:	2b4d      	cmp	r3, #77	; 0x4d
    149e:	bf0c      	ite	eq
    14a0:	2501      	moveq	r5, #1
    14a2:	2500      	movne	r5, #0
	if (result){
    14a4:	d002      	beq.n	14ac <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
    14a6:	4628      	mov	r0, r5
    14a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
    14ac:	4b18      	ldr	r3, [pc, #96]	; (1510 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    14ae:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
    14b2:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    14b6:	4a17      	ldr	r2, [pc, #92]	; (1514 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    14b8:	601a      	str	r2, [r3, #0]
    14ba:	2200      	movs	r2, #0
    14bc:	711a      	strb	r2, [r3, #4]
    14be:	224d      	movs	r2, #77	; 0x4d
    14c0:	715a      	strb	r2, [r3, #5]
    14c2:	f883 8006 	strb.w	r8, [r3, #6]
    14c6:	2307      	movs	r3, #7
    14c8:	4911      	ldr	r1, [pc, #68]	; (1510 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    14ca:	f103 0261 	add.w	r2, r3, #97	; 0x61
    14ce:	440a      	add	r2, r1
    14d0:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
    14d4:	f852 4f04 	ldr.w	r4, [r2, #4]!
    14d8:	f8d0 6190 	ldr.w	r6, [r0, #400]	; 0x190
    14dc:	50f4      	str	r4, [r6, r3]
    14de:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
    14e0:	42bb      	cmp	r3, r7
    14e2:	d1f7      	bne.n	14d4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
    14e4:	2b37      	cmp	r3, #55	; 0x37
    14e6:	d1f0      	bne.n	14ca <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
    14e8:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    14ea:	2240      	movs	r2, #64	; 0x40
    14ec:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    14f0:	4809      	ldr	r0, [pc, #36]	; (1518 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
    14f2:	4b0a      	ldr	r3, [pc, #40]	; (151c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
    14f4:	4798      	blx	r3
		singleTaskMessage=singleTask;
    14f6:	4b07      	ldr	r3, [pc, #28]	; (1514 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    14f8:	f8c4 3186 	str.w	r3, [r4, #390]	; 0x186
    14fc:	2200      	movs	r2, #0
    14fe:	f884 218a 	strb.w	r2, [r4, #394]	; 0x18a
    1502:	234d      	movs	r3, #77	; 0x4d
    1504:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
    1508:	f884 818c 	strb.w	r8, [r4, #396]	; 0x18c
    150c:	e7cb      	b.n	14a6 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
    150e:	bf00      	nop
    1510:	2000ce78 	.word	0x2000ce78
    1514:	61626364 	.word	0x61626364
    1518:	200034b8 	.word	0x200034b8
    151c:	00010f15 	.word	0x00010f15

00001520 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    1520:	b570      	push	{r4, r5, r6, lr}
    1522:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    1524:	f100 05f8 	add.w	r5, r0, #248	; 0xf8
    1528:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    152c:	681a      	ldr	r2, [r3, #0]
    152e:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    1532:	889b      	ldrh	r3, [r3, #4]
    1534:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    1536:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
    153a:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    153c:	b2db      	uxtb	r3, r3
    153e:	2b1c      	cmp	r3, #28
    1540:	d81b      	bhi.n	157a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x5a>
		gotTask=true;
    1542:	2301      	movs	r3, #1
    1544:	f880 315f 	strb.w	r3, [r0, #351]	; 0x15f
		result=gotTask;
    1548:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
		switch (header.task)
    154c:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
    1550:	3b41      	subs	r3, #65	; 0x41
    1552:	2b1c      	cmp	r3, #28
    1554:	f200 809a 	bhi.w	168c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x16c>
    1558:	e8df f003 	tbb	[pc, r3]
    155c:	2f1f2922 	.word	0x2f1f2922
    1560:	3e381f1f 	.word	0x3e381f1f
    1564:	746e504a 	.word	0x746e504a
    1568:	928c8680 	.word	0x928c8680
    156c:	68565c7a 	.word	0x68565c7a
    1570:	1f449862 	.word	0x1f449862
    1574:	98981f1f 	.word	0x98981f1f
    1578:	1f          	.byte	0x1f
    1579:	00          	.byte	0x00
		gotTask=false;
    157a:	2300      	movs	r3, #0
    157c:	f880 315f 	strb.w	r3, [r0, #351]	; 0x15f
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    1580:	4e44      	ldr	r6, [pc, #272]	; (1694 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x174>)
    1582:	2240      	movs	r2, #64	; 0x40
    1584:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    1588:	4630      	mov	r0, r6
    158a:	4b43      	ldr	r3, [pc, #268]	; (1698 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x178>)
    158c:	4798      	blx	r3
		result=usb.rxReady;
    158e:	7d73      	ldrb	r3, [r6, #21]
    1590:	b2db      	uxtb	r3, r3
    1592:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
	if (result)
    1596:	2b00      	cmp	r3, #0
    1598:	d1d8      	bne.n	154c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    159a:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
    159e:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    15a0:	4629      	mov	r1, r5
    15a2:	4620      	mov	r0, r4
    15a4:	4b3d      	ldr	r3, [pc, #244]	; (169c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x17c>)
    15a6:	4798      	blx	r3
    15a8:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15ac:	e7f5      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
	maintenanceIsConnected = false;
    15ae:	2300      	movs	r3, #0
    15b0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	bSendNotifications = false;
    15b4:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
				break;
    15b8:	e7ef      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				notifyGAINCommandReceived( header, result);
    15ba:	2201      	movs	r2, #1
    15bc:	4629      	mov	r1, r5
    15be:	4620      	mov	r0, r4
    15c0:	4b37      	ldr	r3, [pc, #220]	; (16a0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x180>)
    15c2:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    15c4:	2301      	movs	r3, #1
    15c6:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				break;
    15ca:	e7e6      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandWriteParameters();
    15cc:	4620      	mov	r0, r4
    15ce:	4b35      	ldr	r3, [pc, #212]	; (16a4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x184>)
    15d0:	4798      	blx	r3
    15d2:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15d6:	e7e0      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadParameters();
    15d8:	4620      	mov	r0, r4
    15da:	4b33      	ldr	r3, [pc, #204]	; (16a8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x188>)
    15dc:	4798      	blx	r3
    15de:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15e2:	e7da      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadDataLogger();
    15e4:	4620      	mov	r0, r4
    15e6:	4b31      	ldr	r3, [pc, #196]	; (16ac <_ZN16Maintenance_Tool14handleHVACTaskEv+0x18c>)
    15e8:	4798      	blx	r3
    15ea:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15ee:	e7d4      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetHeaters();
    15f0:	4620      	mov	r0, r4
    15f2:	4b2f      	ldr	r3, [pc, #188]	; (16b0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x190>)
    15f4:	4798      	blx	r3
    15f6:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15fa:	e7ce      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadHeaterStatus();
    15fc:	4620      	mov	r0, r4
    15fe:	4b2d      	ldr	r3, [pc, #180]	; (16b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x194>)
    1600:	4798      	blx	r3
    1602:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1606:	e7c8      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetScavenge();
    1608:	4620      	mov	r0, r4
    160a:	4b2b      	ldr	r3, [pc, #172]	; (16b8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x198>)
    160c:	4798      	blx	r3
    160e:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1612:	e7c2      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadScavengeStatus();
    1614:	4620      	mov	r0, r4
    1616:	4b29      	ldr	r3, [pc, #164]	; (16bc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x19c>)
    1618:	4798      	blx	r3
    161a:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    161e:	e7bc      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetCompressor();
    1620:	4620      	mov	r0, r4
    1622:	4b27      	ldr	r3, [pc, #156]	; (16c0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a0>)
    1624:	4798      	blx	r3
    1626:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    162a:	e7b6      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadCompressorStatus();
    162c:	4620      	mov	r0, r4
    162e:	4b25      	ldr	r3, [pc, #148]	; (16c4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a4>)
    1630:	4798      	blx	r3
    1632:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1636:	e7b0      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetEnableFans();
    1638:	4620      	mov	r0, r4
    163a:	4b23      	ldr	r3, [pc, #140]	; (16c8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a8>)
    163c:	4798      	blx	r3
    163e:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1642:	e7aa      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetPWMFans();
    1644:	4620      	mov	r0, r4
    1646:	4b21      	ldr	r3, [pc, #132]	; (16cc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1ac>)
    1648:	4798      	blx	r3
    164a:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    164e:	e7a4      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandFansStatus();
    1650:	4620      	mov	r0, r4
    1652:	4b1f      	ldr	r3, [pc, #124]	; (16d0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b0>)
    1654:	4798      	blx	r3
    1656:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    165a:	e79e      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadTemmperatures();
    165c:	4620      	mov	r0, r4
    165e:	4b1d      	ldr	r3, [pc, #116]	; (16d4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b4>)
    1660:	4798      	blx	r3
    1662:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1666:	e798      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadFlapperData();
    1668:	4620      	mov	r0, r4
    166a:	4b1b      	ldr	r3, [pc, #108]	; (16d8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b8>)
    166c:	4798      	blx	r3
    166e:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1672:	e792      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperValve();
    1674:	4620      	mov	r0, r4
    1676:	4b19      	ldr	r3, [pc, #100]	; (16dc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1bc>)
    1678:	4798      	blx	r3
    167a:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    167e:	e78c      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperPosition();
    1680:	4620      	mov	r0, r4
    1682:	4b17      	ldr	r3, [pc, #92]	; (16e0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1c0>)
    1684:	4798      	blx	r3
    1686:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    168a:	e786      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = false;
    168c:	2300      	movs	r3, #0
    168e:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				break;
    1692:	e782      	b.n	159a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
    1694:	200034b8 	.word	0x200034b8
    1698:	00010d91 	.word	0x00010d91
    169c:	00001255 	.word	0x00001255
    16a0:	0000146d 	.word	0x0000146d
    16a4:	0000054d 	.word	0x0000054d
    16a8:	0000090d 	.word	0x0000090d
    16ac:	00000995 	.word	0x00000995
    16b0:	00000589 	.word	0x00000589
    16b4:	00000b45 	.word	0x00000b45
    16b8:	00000601 	.word	0x00000601
    16bc:	00000ba5 	.word	0x00000ba5
    16c0:	00000641 	.word	0x00000641
    16c4:	00000c01 	.word	0x00000c01
    16c8:	000003bd 	.word	0x000003bd
    16cc:	000003e9 	.word	0x000003e9
    16d0:	000007e9 	.word	0x000007e9
    16d4:	00001495 	.word	0x00001495
    16d8:	00000849 	.word	0x00000849
    16dc:	00000451 	.word	0x00000451
    16e0:	000004cd 	.word	0x000004cd

000016e4 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    16e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16e6:	4604      	mov	r4, r0
	result=false;
    16e8:	2300      	movs	r3, #0
    16ea:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	if (gotAccess)
    16ee:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
    16f2:	2b00      	cmp	r3, #0
    16f4:	d050      	beq.n	1798 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>
		if (usb.rxReady)
    16f6:	4b2a      	ldr	r3, [pc, #168]	; (17a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    16f8:	7d5b      	ldrb	r3, [r3, #21]
    16fa:	b95b      	cbnz	r3, 1714 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    16fc:	2300      	movs	r3, #0
    16fe:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1702:	2240      	movs	r2, #64	; 0x40
    1704:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    1708:	4825      	ldr	r0, [pc, #148]	; (17a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    170a:	4b26      	ldr	r3, [pc, #152]	; (17a4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    170c:	4798      	blx	r3
	}
    170e:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
    1712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    1714:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    1718:	681a      	ldr	r2, [r3, #0]
    171a:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    171e:	889b      	ldrh	r3, [r3, #4]
    1720:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
			switch (input){
    1724:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
    1728:	2b3d      	cmp	r3, #61	; 0x3d
    172a:	d017      	beq.n	175c <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    172c:	2b3e      	cmp	r3, #62	; 0x3e
    172e:	d010      	beq.n	1752 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    1730:	2b3c      	cmp	r3, #60	; 0x3c
    1732:	d003      	beq.n	173c <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    1734:	2300      	movs	r3, #0
    1736:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
				break;
    173a:	e006      	b.n	174a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    173c:	2301      	movs	r3, #1
    173e:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
					result = handleHVACTask();
    1742:	4b19      	ldr	r3, [pc, #100]	; (17a8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1744:	4798      	blx	r3
    1746:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
			ClearLocalBuffer();
    174a:	4620      	mov	r0, r4
    174c:	4b17      	ldr	r3, [pc, #92]	; (17ac <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    174e:	4798      	blx	r3
    1750:	e7d7      	b.n	1702 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    1752:	4b15      	ldr	r3, [pc, #84]	; (17a8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1754:	4798      	blx	r3
    1756:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    175a:	e7f6      	b.n	174a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    175c:	2501      	movs	r5, #1
    175e:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
					interfaceTimer.Stop();
    1762:	4e13      	ldr	r6, [pc, #76]	; (17b0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    1764:	4630      	mov	r0, r6
    1766:	4b13      	ldr	r3, [pc, #76]	; (17b4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    1768:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    176a:	4f13      	ldr	r7, [pc, #76]	; (17b8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    176c:	4639      	mov	r1, r7
    176e:	4630      	mov	r0, r6
    1770:	4b12      	ldr	r3, [pc, #72]	; (17bc <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    1772:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1774:	f242 7210 	movw	r2, #10000	; 0x2710
    1778:	4639      	mov	r1, r7
    177a:	4630      	mov	r0, r6
    177c:	4b10      	ldr	r3, [pc, #64]	; (17c0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    177e:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1780:	2300      	movs	r3, #0
    1782:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
					maintenanceIsConnected = true;
    1786:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
					bSendNotifications = true;
    178a:	f884 50b5 	strb.w	r5, [r4, #181]	; 0xb5
					result=is_MTPC_Beaming;
    178e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    1792:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				break;
    1796:	e7d8      	b.n	174a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1798:	2300      	movs	r3, #0
    179a:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
    179e:	e7b6      	b.n	170e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    17a0:	200034b8 	.word	0x200034b8
    17a4:	00010d91 	.word	0x00010d91
    17a8:	00001521 	.word	0x00001521
    17ac:	00001239 	.word	0x00001239
    17b0:	20001ea0 	.word	0x20001ea0
    17b4:	00010645 	.word	0x00010645
    17b8:	00001161 	.word	0x00001161
    17bc:	00010761 	.word	0x00010761
    17c0:	000107b9 	.word	0x000107b9

000017c4 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    17c4:	b510      	push	{r4, lr}
    17c6:	4604      	mov	r4, r0
	result=false;
    17c8:	2300      	movs	r3, #0
    17ca:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	magic=0;
    17ce:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
	if (gotAccess==true)
    17d2:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
    17d6:	b12b      	cbz	r3, 17e4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    17d8:	2301      	movs	r3, #1
    17da:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	return	result;
    17de:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
}
    17e2:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    17e4:	4b15      	ldr	r3, [pc, #84]	; (183c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    17e6:	7d5b      	ldrb	r3, [r3, #21]
    17e8:	b1b3      	cbz	r3, 1818 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
    17ea:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
    17ee:	1e41      	subs	r1, r0, #1
    17f0:	3003      	adds	r0, #3
				magic=magic<<8;
    17f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    17f6:	021b      	lsls	r3, r3, #8
    17f8:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
				magic|= localBuffer[i];
    17fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1800:	4313      	orrs	r3, r2
    1802:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
			for (int i = 0; i < 4; i++)
    1806:	4281      	cmp	r1, r0
    1808:	d1f3      	bne.n	17f2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    180a:	4a0d      	ldr	r2, [pc, #52]	; (1840 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    180c:	ea83 0102 	eor.w	r1, r3, r2
    1810:	f8c4 117c 	str.w	r1, [r4, #380]	; 0x17c
			if (xorResult==0)
    1814:	4293      	cmp	r3, r2
    1816:	d006      	beq.n	1826 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1818:	2240      	movs	r2, #64	; 0x40
    181a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    181e:	4807      	ldr	r0, [pc, #28]	; (183c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    1820:	4b08      	ldr	r3, [pc, #32]	; (1844 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
    1822:	4798      	blx	r3
    1824:	e7db      	b.n	17de <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    1826:	2301      	movs	r3, #1
    1828:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
				result=true;
    182c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				is_MTPC_Beaming=true;
    1830:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
				return	handleCommunication();
    1834:	4620      	mov	r0, r4
    1836:	4b04      	ldr	r3, [pc, #16]	; (1848 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
    1838:	4798      	blx	r3
    183a:	bd10      	pop	{r4, pc}
    183c:	200034b8 	.word	0x200034b8
    1840:	61626364 	.word	0x61626364
    1844:	00010d91 	.word	0x00010d91
    1848:	000016e5 	.word	0x000016e5

0000184c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    184c:	b580      	push	{r7, lr}
    184e:	af00      	add	r7, sp, #0
	system_init();
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <atmel_start_init+0x14>)
    1852:	4798      	blx	r3
	usb_init();
    1854:	4b03      	ldr	r3, [pc, #12]	; (1864 <atmel_start_init+0x18>)
    1856:	4798      	blx	r3
	spi_nor_flash_init();
    1858:	4b03      	ldr	r3, [pc, #12]	; (1868 <atmel_start_init+0x1c>)
    185a:	4798      	blx	r3
}
    185c:	bf00      	nop
    185e:	bd80      	pop	{r7, pc}
    1860:	00002c65 	.word	0x00002c65
    1864:	0000d15d 	.word	0x0000d15d
    1868:	0000d0f1 	.word	0x0000d0f1

0000186c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    186c:	b480      	push	{r7}
    186e:	b085      	sub	sp, #20
    1870:	af00      	add	r7, sp, #0
    1872:	60f8      	str	r0, [r7, #12]
    1874:	460b      	mov	r3, r1
    1876:	607a      	str	r2, [r7, #4]
    1878:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    187a:	7afa      	ldrb	r2, [r7, #11]
    187c:	68fb      	ldr	r3, [r7, #12]
    187e:	3220      	adds	r2, #32
    1880:	6879      	ldr	r1, [r7, #4]
    1882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1886:	bf00      	nop
    1888:	3714      	adds	r7, #20
    188a:	46bd      	mov	sp, r7
    188c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1890:	4770      	bx	lr

00001892 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    1892:	b480      	push	{r7}
    1894:	b083      	sub	sp, #12
    1896:	af00      	add	r7, sp, #0
    1898:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	691b      	ldr	r3, [r3, #16]
    189e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18a6:	bf00      	nop
    18a8:	370c      	adds	r7, #12
    18aa:	46bd      	mov	sp, r7
    18ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    18b0:	4770      	bx	lr

000018b2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    18b2:	b480      	push	{r7}
    18b4:	b083      	sub	sp, #12
    18b6:	af00      	add	r7, sp, #0
    18b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	691b      	ldr	r3, [r3, #16]
    18be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18c6:	bf00      	nop
    18c8:	370c      	adds	r7, #12
    18ca:	46bd      	mov	sp, r7
    18cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d0:	4770      	bx	lr

000018d2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    18d2:	b480      	push	{r7}
    18d4:	b083      	sub	sp, #12
    18d6:	af00      	add	r7, sp, #0
    18d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	691b      	ldr	r3, [r3, #16]
    18de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18e6:	bf00      	nop
    18e8:	370c      	adds	r7, #12
    18ea:	46bd      	mov	sp, r7
    18ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f0:	4770      	bx	lr

000018f2 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    18f2:	b480      	push	{r7}
    18f4:	b083      	sub	sp, #12
    18f6:	af00      	add	r7, sp, #0
    18f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	691b      	ldr	r3, [r3, #16]
    18fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1906:	bf00      	nop
    1908:	370c      	adds	r7, #12
    190a:	46bd      	mov	sp, r7
    190c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1910:	4770      	bx	lr

00001912 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    1912:	b480      	push	{r7}
    1914:	b083      	sub	sp, #12
    1916:	af00      	add	r7, sp, #0
    1918:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	695b      	ldr	r3, [r3, #20]
    191e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1926:	bf00      	nop
    1928:	370c      	adds	r7, #12
    192a:	46bd      	mov	sp, r7
    192c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1930:	4770      	bx	lr

00001932 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    1932:	b480      	push	{r7}
    1934:	b083      	sub	sp, #12
    1936:	af00      	add	r7, sp, #0
    1938:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	695b      	ldr	r3, [r3, #20]
    193e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1946:	bf00      	nop
    1948:	370c      	adds	r7, #12
    194a:	46bd      	mov	sp, r7
    194c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1950:	4770      	bx	lr

00001952 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    1952:	b480      	push	{r7}
    1954:	b083      	sub	sp, #12
    1956:	af00      	add	r7, sp, #0
    1958:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	695b      	ldr	r3, [r3, #20]
    195e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1966:	bf00      	nop
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr

00001972 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    1972:	b480      	push	{r7}
    1974:	b083      	sub	sp, #12
    1976:	af00      	add	r7, sp, #0
    1978:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	695b      	ldr	r3, [r3, #20]
    197e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1986:	bf00      	nop
    1988:	370c      	adds	r7, #12
    198a:	46bd      	mov	sp, r7
    198c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1990:	4770      	bx	lr

00001992 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    1992:	b480      	push	{r7}
    1994:	b083      	sub	sp, #12
    1996:	af00      	add	r7, sp, #0
    1998:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	699b      	ldr	r3, [r3, #24]
    199e:	f043 0201 	orr.w	r2, r3, #1
    19a2:	687b      	ldr	r3, [r7, #4]
    19a4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19a6:	bf00      	nop
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr

000019b2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    19b2:	b480      	push	{r7}
    19b4:	b083      	sub	sp, #12
    19b6:	af00      	add	r7, sp, #0
    19b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	699b      	ldr	r3, [r3, #24]
    19be:	f043 0202 	orr.w	r2, r3, #2
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19c6:	bf00      	nop
    19c8:	370c      	adds	r7, #12
    19ca:	46bd      	mov	sp, r7
    19cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d0:	4770      	bx	lr

000019d2 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    19d2:	b480      	push	{r7}
    19d4:	b083      	sub	sp, #12
    19d6:	af00      	add	r7, sp, #0
    19d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	699b      	ldr	r3, [r3, #24]
    19de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19e6:	bf00      	nop
    19e8:	370c      	adds	r7, #12
    19ea:	46bd      	mov	sp, r7
    19ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f0:	4770      	bx	lr

000019f2 <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
    19f2:	b480      	push	{r7}
    19f4:	b083      	sub	sp, #12
    19f6:	af00      	add	r7, sp, #0
    19f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	699b      	ldr	r3, [r3, #24]
    19fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a06:	bf00      	nop
    1a08:	370c      	adds	r7, #12
    1a0a:	46bd      	mov	sp, r7
    1a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a10:	4770      	bx	lr

00001a12 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    1a12:	b480      	push	{r7}
    1a14:	b083      	sub	sp, #12
    1a16:	af00      	add	r7, sp, #0
    1a18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	699b      	ldr	r3, [r3, #24]
    1a1e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a26:	bf00      	nop
    1a28:	370c      	adds	r7, #12
    1a2a:	46bd      	mov	sp, r7
    1a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a30:	4770      	bx	lr

00001a32 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    1a32:	b480      	push	{r7}
    1a34:	b083      	sub	sp, #12
    1a36:	af00      	add	r7, sp, #0
    1a38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	699b      	ldr	r3, [r3, #24]
    1a3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a46:	bf00      	nop
    1a48:	370c      	adds	r7, #12
    1a4a:	46bd      	mov	sp, r7
    1a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a50:	4770      	bx	lr

00001a52 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    1a52:	b480      	push	{r7}
    1a54:	b083      	sub	sp, #12
    1a56:	af00      	add	r7, sp, #0
    1a58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	699b      	ldr	r3, [r3, #24]
    1a5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a66:	bf00      	nop
    1a68:	370c      	adds	r7, #12
    1a6a:	46bd      	mov	sp, r7
    1a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a70:	4770      	bx	lr

00001a72 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    1a72:	b480      	push	{r7}
    1a74:	b083      	sub	sp, #12
    1a76:	af00      	add	r7, sp, #0
    1a78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	69db      	ldr	r3, [r3, #28]
    1a7e:	f043 0208 	orr.w	r2, r3, #8
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a86:	bf00      	nop
    1a88:	370c      	adds	r7, #12
    1a8a:	46bd      	mov	sp, r7
    1a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a90:	4770      	bx	lr

00001a92 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1a92:	b480      	push	{r7}
    1a94:	b083      	sub	sp, #12
    1a96:	af00      	add	r7, sp, #0
    1a98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1a9a:	687b      	ldr	r3, [r7, #4]
    1a9c:	69db      	ldr	r3, [r3, #28]
    1a9e:	f043 0220 	orr.w	r2, r3, #32
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1aa6:	bf00      	nop
    1aa8:	370c      	adds	r7, #12
    1aaa:	46bd      	mov	sp, r7
    1aac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ab0:	4770      	bx	lr

00001ab2 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1ab2:	b480      	push	{r7}
    1ab4:	b083      	sub	sp, #12
    1ab6:	af00      	add	r7, sp, #0
    1ab8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	69db      	ldr	r3, [r3, #28]
    1abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ac6:	bf00      	nop
    1ac8:	370c      	adds	r7, #12
    1aca:	46bd      	mov	sp, r7
    1acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad0:	4770      	bx	lr

00001ad2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1ad2:	b480      	push	{r7}
    1ad4:	b083      	sub	sp, #12
    1ad6:	af00      	add	r7, sp, #0
    1ad8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	69db      	ldr	r3, [r3, #28]
    1ade:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ae6:	bf00      	nop
    1ae8:	370c      	adds	r7, #12
    1aea:	46bd      	mov	sp, r7
    1aec:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af0:	4770      	bx	lr

00001af2 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1af2:	b480      	push	{r7}
    1af4:	b083      	sub	sp, #12
    1af6:	af00      	add	r7, sp, #0
    1af8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	6a1b      	ldr	r3, [r3, #32]
    1afe:	f043 0201 	orr.w	r2, r3, #1
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b06:	bf00      	nop
    1b08:	370c      	adds	r7, #12
    1b0a:	46bd      	mov	sp, r7
    1b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b10:	4770      	bx	lr

00001b12 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1b12:	b480      	push	{r7}
    1b14:	b083      	sub	sp, #12
    1b16:	af00      	add	r7, sp, #0
    1b18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	6a1b      	ldr	r3, [r3, #32]
    1b1e:	f043 0202 	orr.w	r2, r3, #2
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b26:	bf00      	nop
    1b28:	370c      	adds	r7, #12
    1b2a:	46bd      	mov	sp, r7
    1b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b30:	4770      	bx	lr

00001b32 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1b32:	b480      	push	{r7}
    1b34:	b083      	sub	sp, #12
    1b36:	af00      	add	r7, sp, #0
    1b38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	6a1b      	ldr	r3, [r3, #32]
    1b3e:	f043 0204 	orr.w	r2, r3, #4
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b46:	bf00      	nop
    1b48:	370c      	adds	r7, #12
    1b4a:	46bd      	mov	sp, r7
    1b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b50:	4770      	bx	lr

00001b52 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    1b52:	b480      	push	{r7}
    1b54:	b083      	sub	sp, #12
    1b56:	af00      	add	r7, sp, #0
    1b58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	6a1b      	ldr	r3, [r3, #32]
    1b5e:	f043 0208 	orr.w	r2, r3, #8
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b66:	bf00      	nop
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr

00001b72 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1b72:	b480      	push	{r7}
    1b74:	b083      	sub	sp, #12
    1b76:	af00      	add	r7, sp, #0
    1b78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	6a1b      	ldr	r3, [r3, #32]
    1b7e:	f043 0220 	orr.w	r2, r3, #32
    1b82:	687b      	ldr	r3, [r7, #4]
    1b84:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b86:	bf00      	nop
    1b88:	370c      	adds	r7, #12
    1b8a:	46bd      	mov	sp, r7
    1b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b90:	4770      	bx	lr

00001b92 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1b92:	b480      	push	{r7}
    1b94:	b083      	sub	sp, #12
    1b96:	af00      	add	r7, sp, #0
    1b98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	6a1b      	ldr	r3, [r3, #32]
    1b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ba6:	bf00      	nop
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr

00001bb2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1bb2:	b480      	push	{r7}
    1bb4:	b085      	sub	sp, #20
    1bb6:	af00      	add	r7, sp, #0
    1bb8:	60f8      	str	r0, [r7, #12]
    1bba:	460b      	mov	r3, r1
    1bbc:	607a      	str	r2, [r7, #4]
    1bbe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bc0:	7afb      	ldrb	r3, [r7, #11]
    1bc2:	68fa      	ldr	r2, [r7, #12]
    1bc4:	01db      	lsls	r3, r3, #7
    1bc6:	4413      	add	r3, r2
    1bc8:	3308      	adds	r3, #8
    1bca:	687a      	ldr	r2, [r7, #4]
    1bcc:	601a      	str	r2, [r3, #0]
}
    1bce:	bf00      	nop
    1bd0:	3714      	adds	r7, #20
    1bd2:	46bd      	mov	sp, r7
    1bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd8:	4770      	bx	lr

00001bda <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1bda:	b480      	push	{r7}
    1bdc:	b085      	sub	sp, #20
    1bde:	af00      	add	r7, sp, #0
    1be0:	60f8      	str	r0, [r7, #12]
    1be2:	460b      	mov	r3, r1
    1be4:	607a      	str	r2, [r7, #4]
    1be6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1be8:	7afb      	ldrb	r3, [r7, #11]
    1bea:	68fa      	ldr	r2, [r7, #12]
    1bec:	01db      	lsls	r3, r3, #7
    1bee:	4413      	add	r3, r2
    1bf0:	3304      	adds	r3, #4
    1bf2:	687a      	ldr	r2, [r7, #4]
    1bf4:	601a      	str	r2, [r3, #0]
}
    1bf6:	bf00      	nop
    1bf8:	3714      	adds	r7, #20
    1bfa:	46bd      	mov	sp, r7
    1bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c00:	4770      	bx	lr

00001c02 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1c02:	b480      	push	{r7}
    1c04:	b085      	sub	sp, #20
    1c06:	af00      	add	r7, sp, #0
    1c08:	60f8      	str	r0, [r7, #12]
    1c0a:	460b      	mov	r3, r1
    1c0c:	607a      	str	r2, [r7, #4]
    1c0e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c10:	7afb      	ldrb	r3, [r7, #11]
    1c12:	68fa      	ldr	r2, [r7, #12]
    1c14:	01db      	lsls	r3, r3, #7
    1c16:	4413      	add	r3, r2
    1c18:	3318      	adds	r3, #24
    1c1a:	687a      	ldr	r2, [r7, #4]
    1c1c:	601a      	str	r2, [r3, #0]
}
    1c1e:	bf00      	nop
    1c20:	3714      	adds	r7, #20
    1c22:	46bd      	mov	sp, r7
    1c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c28:	4770      	bx	lr

00001c2a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1c2a:	b480      	push	{r7}
    1c2c:	b085      	sub	sp, #20
    1c2e:	af00      	add	r7, sp, #0
    1c30:	60f8      	str	r0, [r7, #12]
    1c32:	460b      	mov	r3, r1
    1c34:	607a      	str	r2, [r7, #4]
    1c36:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c38:	7afb      	ldrb	r3, [r7, #11]
    1c3a:	68fa      	ldr	r2, [r7, #12]
    1c3c:	01db      	lsls	r3, r3, #7
    1c3e:	4413      	add	r3, r2
    1c40:	3314      	adds	r3, #20
    1c42:	687a      	ldr	r2, [r7, #4]
    1c44:	601a      	str	r2, [r3, #0]
}
    1c46:	bf00      	nop
    1c48:	3714      	adds	r7, #20
    1c4a:	46bd      	mov	sp, r7
    1c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c50:	4770      	bx	lr

00001c52 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1c52:	b480      	push	{r7}
    1c54:	b085      	sub	sp, #20
    1c56:	af00      	add	r7, sp, #0
    1c58:	6078      	str	r0, [r7, #4]
    1c5a:	4608      	mov	r0, r1
    1c5c:	4611      	mov	r1, r2
    1c5e:	461a      	mov	r2, r3
    1c60:	4603      	mov	r3, r0
    1c62:	70fb      	strb	r3, [r7, #3]
    1c64:	460b      	mov	r3, r1
    1c66:	70bb      	strb	r3, [r7, #2]
    1c68:	4613      	mov	r3, r2
    1c6a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c6c:	78fa      	ldrb	r2, [r7, #3]
    1c6e:	78bb      	ldrb	r3, [r7, #2]
    1c70:	6879      	ldr	r1, [r7, #4]
    1c72:	01d2      	lsls	r2, r2, #7
    1c74:	440a      	add	r2, r1
    1c76:	4413      	add	r3, r2
    1c78:	3330      	adds	r3, #48	; 0x30
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c7e:	7bfb      	ldrb	r3, [r7, #15]
    1c80:	f023 030f 	bic.w	r3, r3, #15
    1c84:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1c86:	787b      	ldrb	r3, [r7, #1]
    1c88:	f003 030f 	and.w	r3, r3, #15
    1c8c:	b2da      	uxtb	r2, r3
    1c8e:	7bfb      	ldrb	r3, [r7, #15]
    1c90:	4313      	orrs	r3, r2
    1c92:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c94:	78fa      	ldrb	r2, [r7, #3]
    1c96:	78bb      	ldrb	r3, [r7, #2]
    1c98:	6879      	ldr	r1, [r7, #4]
    1c9a:	01d2      	lsls	r2, r2, #7
    1c9c:	440a      	add	r2, r1
    1c9e:	4413      	add	r3, r2
    1ca0:	3330      	adds	r3, #48	; 0x30
    1ca2:	7bfa      	ldrb	r2, [r7, #15]
    1ca4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1ca6:	bf00      	nop
    1ca8:	3714      	adds	r7, #20
    1caa:	46bd      	mov	sp, r7
    1cac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb0:	4770      	bx	lr

00001cb2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1cb2:	b480      	push	{r7}
    1cb4:	b085      	sub	sp, #20
    1cb6:	af00      	add	r7, sp, #0
    1cb8:	6078      	str	r0, [r7, #4]
    1cba:	4608      	mov	r0, r1
    1cbc:	4611      	mov	r1, r2
    1cbe:	461a      	mov	r2, r3
    1cc0:	4603      	mov	r3, r0
    1cc2:	70fb      	strb	r3, [r7, #3]
    1cc4:	460b      	mov	r3, r1
    1cc6:	70bb      	strb	r3, [r7, #2]
    1cc8:	4613      	mov	r3, r2
    1cca:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ccc:	78fa      	ldrb	r2, [r7, #3]
    1cce:	78bb      	ldrb	r3, [r7, #2]
    1cd0:	6879      	ldr	r1, [r7, #4]
    1cd2:	01d2      	lsls	r2, r2, #7
    1cd4:	440a      	add	r2, r1
    1cd6:	4413      	add	r3, r2
    1cd8:	3330      	adds	r3, #48	; 0x30
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1cde:	7bfb      	ldrb	r3, [r7, #15]
    1ce0:	f003 030f 	and.w	r3, r3, #15
    1ce4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1ce6:	787b      	ldrb	r3, [r7, #1]
    1ce8:	011b      	lsls	r3, r3, #4
    1cea:	b2da      	uxtb	r2, r3
    1cec:	7bfb      	ldrb	r3, [r7, #15]
    1cee:	4313      	orrs	r3, r2
    1cf0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1cf2:	78fa      	ldrb	r2, [r7, #3]
    1cf4:	78bb      	ldrb	r3, [r7, #2]
    1cf6:	6879      	ldr	r1, [r7, #4]
    1cf8:	01d2      	lsls	r2, r2, #7
    1cfa:	440a      	add	r2, r1
    1cfc:	4413      	add	r3, r2
    1cfe:	3330      	adds	r3, #48	; 0x30
    1d00:	7bfa      	ldrb	r2, [r7, #15]
    1d02:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d04:	bf00      	nop
    1d06:	3714      	adds	r7, #20
    1d08:	46bd      	mov	sp, r7
    1d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0e:	4770      	bx	lr

00001d10 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1d10:	b480      	push	{r7}
    1d12:	b085      	sub	sp, #20
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	4608      	mov	r0, r1
    1d1a:	4611      	mov	r1, r2
    1d1c:	461a      	mov	r2, r3
    1d1e:	4603      	mov	r3, r0
    1d20:	70fb      	strb	r3, [r7, #3]
    1d22:	460b      	mov	r3, r1
    1d24:	70bb      	strb	r3, [r7, #2]
    1d26:	4613      	mov	r3, r2
    1d28:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d2a:	78fa      	ldrb	r2, [r7, #3]
    1d2c:	78bb      	ldrb	r3, [r7, #2]
    1d2e:	6879      	ldr	r1, [r7, #4]
    1d30:	01d2      	lsls	r2, r2, #7
    1d32:	440a      	add	r2, r1
    1d34:	4413      	add	r3, r2
    1d36:	3340      	adds	r3, #64	; 0x40
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d3c:	7bfb      	ldrb	r3, [r7, #15]
    1d3e:	f023 0301 	bic.w	r3, r3, #1
    1d42:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d44:	787a      	ldrb	r2, [r7, #1]
    1d46:	7bfb      	ldrb	r3, [r7, #15]
    1d48:	4313      	orrs	r3, r2
    1d4a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d4c:	78fa      	ldrb	r2, [r7, #3]
    1d4e:	78bb      	ldrb	r3, [r7, #2]
    1d50:	6879      	ldr	r1, [r7, #4]
    1d52:	01d2      	lsls	r2, r2, #7
    1d54:	440a      	add	r2, r1
    1d56:	4413      	add	r3, r2
    1d58:	3340      	adds	r3, #64	; 0x40
    1d5a:	7bfa      	ldrb	r2, [r7, #15]
    1d5c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d5e:	bf00      	nop
    1d60:	3714      	adds	r7, #20
    1d62:	46bd      	mov	sp, r7
    1d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d68:	4770      	bx	lr

00001d6a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1d6a:	b490      	push	{r4, r7}
    1d6c:	b082      	sub	sp, #8
    1d6e:	af00      	add	r7, sp, #0
    1d70:	6078      	str	r0, [r7, #4]
    1d72:	460b      	mov	r3, r1
    1d74:	70fb      	strb	r3, [r7, #3]
    1d76:	4613      	mov	r3, r2
    1d78:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1d7a:	78fa      	ldrb	r2, [r7, #3]
    1d7c:	78bb      	ldrb	r3, [r7, #2]
    1d7e:	78f8      	ldrb	r0, [r7, #3]
    1d80:	78b9      	ldrb	r1, [r7, #2]
    1d82:	687c      	ldr	r4, [r7, #4]
    1d84:	01c0      	lsls	r0, r0, #7
    1d86:	4420      	add	r0, r4
    1d88:	4401      	add	r1, r0
    1d8a:	3140      	adds	r1, #64	; 0x40
    1d8c:	7809      	ldrb	r1, [r1, #0]
    1d8e:	b2c9      	uxtb	r1, r1
    1d90:	f041 0104 	orr.w	r1, r1, #4
    1d94:	b2c8      	uxtb	r0, r1
    1d96:	6879      	ldr	r1, [r7, #4]
    1d98:	01d2      	lsls	r2, r2, #7
    1d9a:	440a      	add	r2, r1
    1d9c:	4413      	add	r3, r2
    1d9e:	3340      	adds	r3, #64	; 0x40
    1da0:	4602      	mov	r2, r0
    1da2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1da4:	bf00      	nop
    1da6:	3708      	adds	r7, #8
    1da8:	46bd      	mov	sp, r7
    1daa:	bc90      	pop	{r4, r7}
    1dac:	4770      	bx	lr

00001dae <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1dae:	b490      	push	{r4, r7}
    1db0:	b082      	sub	sp, #8
    1db2:	af00      	add	r7, sp, #0
    1db4:	6078      	str	r0, [r7, #4]
    1db6:	460b      	mov	r3, r1
    1db8:	70fb      	strb	r3, [r7, #3]
    1dba:	4613      	mov	r3, r2
    1dbc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1dbe:	78fa      	ldrb	r2, [r7, #3]
    1dc0:	78bb      	ldrb	r3, [r7, #2]
    1dc2:	78f8      	ldrb	r0, [r7, #3]
    1dc4:	78b9      	ldrb	r1, [r7, #2]
    1dc6:	687c      	ldr	r4, [r7, #4]
    1dc8:	01c0      	lsls	r0, r0, #7
    1dca:	4420      	add	r0, r4
    1dcc:	4401      	add	r1, r0
    1dce:	3140      	adds	r1, #64	; 0x40
    1dd0:	7809      	ldrb	r1, [r1, #0]
    1dd2:	b2c9      	uxtb	r1, r1
    1dd4:	f021 0104 	bic.w	r1, r1, #4
    1dd8:	b2c8      	uxtb	r0, r1
    1dda:	6879      	ldr	r1, [r7, #4]
    1ddc:	01d2      	lsls	r2, r2, #7
    1dde:	440a      	add	r2, r1
    1de0:	4413      	add	r3, r2
    1de2:	3340      	adds	r3, #64	; 0x40
    1de4:	4602      	mov	r2, r0
    1de6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1de8:	bf00      	nop
    1dea:	3708      	adds	r7, #8
    1dec:	46bd      	mov	sp, r7
    1dee:	bc90      	pop	{r4, r7}
    1df0:	4770      	bx	lr

00001df2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1df2:	b480      	push	{r7}
    1df4:	b085      	sub	sp, #20
    1df6:	af00      	add	r7, sp, #0
    1df8:	60f8      	str	r0, [r7, #12]
    1dfa:	460b      	mov	r3, r1
    1dfc:	607a      	str	r2, [r7, #4]
    1dfe:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e00:	7afb      	ldrb	r3, [r7, #11]
    1e02:	68fa      	ldr	r2, [r7, #12]
    1e04:	01db      	lsls	r3, r3, #7
    1e06:	4413      	add	r3, r2
    1e08:	3328      	adds	r3, #40	; 0x28
    1e0a:	687a      	ldr	r2, [r7, #4]
    1e0c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1e0e:	bf00      	nop
    1e10:	3714      	adds	r7, #20
    1e12:	46bd      	mov	sp, r7
    1e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e18:	4770      	bx	lr
	...

00001e1c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b082      	sub	sp, #8
    1e20:	af00      	add	r7, sp, #0
    1e22:	4603      	mov	r3, r0
    1e24:	6039      	str	r1, [r7, #0]
    1e26:	71fb      	strb	r3, [r7, #7]
    1e28:	4613      	mov	r3, r2
    1e2a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1e2c:	79bb      	ldrb	r3, [r7, #6]
    1e2e:	2b01      	cmp	r3, #1
    1e30:	d01c      	beq.n	1e6c <_gpio_set_direction+0x50>
    1e32:	2b02      	cmp	r3, #2
    1e34:	d037      	beq.n	1ea6 <_gpio_set_direction+0x8a>
    1e36:	2b00      	cmp	r3, #0
    1e38:	d14e      	bne.n	1ed8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1e3a:	79fb      	ldrb	r3, [r7, #7]
    1e3c:	683a      	ldr	r2, [r7, #0]
    1e3e:	4619      	mov	r1, r3
    1e40:	482a      	ldr	r0, [pc, #168]	; (1eec <_gpio_set_direction+0xd0>)
    1e42:	4b2b      	ldr	r3, [pc, #172]	; (1ef0 <_gpio_set_direction+0xd4>)
    1e44:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1e46:	683b      	ldr	r3, [r7, #0]
    1e48:	b29b      	uxth	r3, r3
    1e4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1e4e:	79fb      	ldrb	r3, [r7, #7]
    1e50:	4619      	mov	r1, r3
    1e52:	4826      	ldr	r0, [pc, #152]	; (1eec <_gpio_set_direction+0xd0>)
    1e54:	4b27      	ldr	r3, [pc, #156]	; (1ef4 <_gpio_set_direction+0xd8>)
    1e56:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1e5c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1e60:	79fb      	ldrb	r3, [r7, #7]
    1e62:	4619      	mov	r1, r3
    1e64:	4821      	ldr	r0, [pc, #132]	; (1eec <_gpio_set_direction+0xd0>)
    1e66:	4b23      	ldr	r3, [pc, #140]	; (1ef4 <_gpio_set_direction+0xd8>)
    1e68:	4798      	blx	r3
		break;
    1e6a:	e03a      	b.n	1ee2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1e6c:	79fb      	ldrb	r3, [r7, #7]
    1e6e:	683a      	ldr	r2, [r7, #0]
    1e70:	4619      	mov	r1, r3
    1e72:	481e      	ldr	r0, [pc, #120]	; (1eec <_gpio_set_direction+0xd0>)
    1e74:	4b1e      	ldr	r3, [pc, #120]	; (1ef0 <_gpio_set_direction+0xd4>)
    1e76:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1e78:	683b      	ldr	r3, [r7, #0]
    1e7a:	b29b      	uxth	r3, r3
    1e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e84:	79f9      	ldrb	r1, [r7, #7]
    1e86:	461a      	mov	r2, r3
    1e88:	4818      	ldr	r0, [pc, #96]	; (1eec <_gpio_set_direction+0xd0>)
    1e8a:	4b1a      	ldr	r3, [pc, #104]	; (1ef4 <_gpio_set_direction+0xd8>)
    1e8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1e8e:	683b      	ldr	r3, [r7, #0]
    1e90:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e9a:	79f9      	ldrb	r1, [r7, #7]
    1e9c:	461a      	mov	r2, r3
    1e9e:	4813      	ldr	r0, [pc, #76]	; (1eec <_gpio_set_direction+0xd0>)
    1ea0:	4b14      	ldr	r3, [pc, #80]	; (1ef4 <_gpio_set_direction+0xd8>)
    1ea2:	4798      	blx	r3
		break;
    1ea4:	e01d      	b.n	1ee2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1ea6:	79fb      	ldrb	r3, [r7, #7]
    1ea8:	683a      	ldr	r2, [r7, #0]
    1eaa:	4619      	mov	r1, r3
    1eac:	480f      	ldr	r0, [pc, #60]	; (1eec <_gpio_set_direction+0xd0>)
    1eae:	4b12      	ldr	r3, [pc, #72]	; (1ef8 <_gpio_set_direction+0xdc>)
    1eb0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1eb2:	683b      	ldr	r3, [r7, #0]
    1eb4:	b29b      	uxth	r3, r3
    1eb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1eba:	79fb      	ldrb	r3, [r7, #7]
    1ebc:	4619      	mov	r1, r3
    1ebe:	480b      	ldr	r0, [pc, #44]	; (1eec <_gpio_set_direction+0xd0>)
    1ec0:	4b0c      	ldr	r3, [pc, #48]	; (1ef4 <_gpio_set_direction+0xd8>)
    1ec2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1ec4:	683b      	ldr	r3, [r7, #0]
    1ec6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1ec8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1ecc:	79fb      	ldrb	r3, [r7, #7]
    1ece:	4619      	mov	r1, r3
    1ed0:	4806      	ldr	r0, [pc, #24]	; (1eec <_gpio_set_direction+0xd0>)
    1ed2:	4b08      	ldr	r3, [pc, #32]	; (1ef4 <_gpio_set_direction+0xd8>)
    1ed4:	4798      	blx	r3
		break;
    1ed6:	e004      	b.n	1ee2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1ed8:	2246      	movs	r2, #70	; 0x46
    1eda:	4908      	ldr	r1, [pc, #32]	; (1efc <_gpio_set_direction+0xe0>)
    1edc:	2000      	movs	r0, #0
    1ede:	4b08      	ldr	r3, [pc, #32]	; (1f00 <_gpio_set_direction+0xe4>)
    1ee0:	4798      	blx	r3
	}
}
    1ee2:	bf00      	nop
    1ee4:	3708      	adds	r7, #8
    1ee6:	46bd      	mov	sp, r7
    1ee8:	bd80      	pop	{r7, pc}
    1eea:	bf00      	nop
    1eec:	41008000 	.word	0x41008000
    1ef0:	00001bdb 	.word	0x00001bdb
    1ef4:	00001df3 	.word	0x00001df3
    1ef8:	00001bb3 	.word	0x00001bb3
    1efc:	0001b64c 	.word	0x0001b64c
    1f00:	00004d25 	.word	0x00004d25

00001f04 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1f04:	b580      	push	{r7, lr}
    1f06:	b082      	sub	sp, #8
    1f08:	af00      	add	r7, sp, #0
    1f0a:	4603      	mov	r3, r0
    1f0c:	6039      	str	r1, [r7, #0]
    1f0e:	71fb      	strb	r3, [r7, #7]
    1f10:	4613      	mov	r3, r2
    1f12:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1f14:	79bb      	ldrb	r3, [r7, #6]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d006      	beq.n	1f28 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1f1a:	79fb      	ldrb	r3, [r7, #7]
    1f1c:	683a      	ldr	r2, [r7, #0]
    1f1e:	4619      	mov	r1, r3
    1f20:	4806      	ldr	r0, [pc, #24]	; (1f3c <_gpio_set_level+0x38>)
    1f22:	4b07      	ldr	r3, [pc, #28]	; (1f40 <_gpio_set_level+0x3c>)
    1f24:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1f26:	e005      	b.n	1f34 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1f28:	79fb      	ldrb	r3, [r7, #7]
    1f2a:	683a      	ldr	r2, [r7, #0]
    1f2c:	4619      	mov	r1, r3
    1f2e:	4803      	ldr	r0, [pc, #12]	; (1f3c <_gpio_set_level+0x38>)
    1f30:	4b04      	ldr	r3, [pc, #16]	; (1f44 <_gpio_set_level+0x40>)
    1f32:	4798      	blx	r3
}
    1f34:	bf00      	nop
    1f36:	3708      	adds	r7, #8
    1f38:	46bd      	mov	sp, r7
    1f3a:	bd80      	pop	{r7, pc}
    1f3c:	41008000 	.word	0x41008000
    1f40:	00001c03 	.word	0x00001c03
    1f44:	00001c2b 	.word	0x00001c2b

00001f48 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b082      	sub	sp, #8
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	4603      	mov	r3, r0
    1f50:	71fb      	strb	r3, [r7, #7]
    1f52:	460b      	mov	r3, r1
    1f54:	71bb      	strb	r3, [r7, #6]
    1f56:	4613      	mov	r3, r2
    1f58:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1f5a:	797b      	ldrb	r3, [r7, #5]
    1f5c:	2b01      	cmp	r3, #1
    1f5e:	d00a      	beq.n	1f76 <_gpio_set_pin_pull_mode+0x2e>
    1f60:	2b02      	cmp	r3, #2
    1f62:	d01f      	beq.n	1fa4 <_gpio_set_pin_pull_mode+0x5c>
    1f64:	2b00      	cmp	r3, #0
    1f66:	d134      	bne.n	1fd2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1f68:	79ba      	ldrb	r2, [r7, #6]
    1f6a:	79fb      	ldrb	r3, [r7, #7]
    1f6c:	4619      	mov	r1, r3
    1f6e:	481e      	ldr	r0, [pc, #120]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1f70:	4b1e      	ldr	r3, [pc, #120]	; (1fec <_gpio_set_pin_pull_mode+0xa4>)
    1f72:	4798      	blx	r3
		break;
    1f74:	e033      	b.n	1fde <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1f76:	79bb      	ldrb	r3, [r7, #6]
    1f78:	2201      	movs	r2, #1
    1f7a:	409a      	lsls	r2, r3
    1f7c:	79fb      	ldrb	r3, [r7, #7]
    1f7e:	4619      	mov	r1, r3
    1f80:	4819      	ldr	r0, [pc, #100]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1f82:	4b1b      	ldr	r3, [pc, #108]	; (1ff0 <_gpio_set_pin_pull_mode+0xa8>)
    1f84:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1f86:	79ba      	ldrb	r2, [r7, #6]
    1f88:	79fb      	ldrb	r3, [r7, #7]
    1f8a:	4619      	mov	r1, r3
    1f8c:	4816      	ldr	r0, [pc, #88]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1f8e:	4b19      	ldr	r3, [pc, #100]	; (1ff4 <_gpio_set_pin_pull_mode+0xac>)
    1f90:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1f92:	79bb      	ldrb	r3, [r7, #6]
    1f94:	2201      	movs	r2, #1
    1f96:	409a      	lsls	r2, r3
    1f98:	79fb      	ldrb	r3, [r7, #7]
    1f9a:	4619      	mov	r1, r3
    1f9c:	4812      	ldr	r0, [pc, #72]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1f9e:	4b16      	ldr	r3, [pc, #88]	; (1ff8 <_gpio_set_pin_pull_mode+0xb0>)
    1fa0:	4798      	blx	r3
		break;
    1fa2:	e01c      	b.n	1fde <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1fa4:	79bb      	ldrb	r3, [r7, #6]
    1fa6:	2201      	movs	r2, #1
    1fa8:	409a      	lsls	r2, r3
    1faa:	79fb      	ldrb	r3, [r7, #7]
    1fac:	4619      	mov	r1, r3
    1fae:	480e      	ldr	r0, [pc, #56]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1fb0:	4b0f      	ldr	r3, [pc, #60]	; (1ff0 <_gpio_set_pin_pull_mode+0xa8>)
    1fb2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1fb4:	79ba      	ldrb	r2, [r7, #6]
    1fb6:	79fb      	ldrb	r3, [r7, #7]
    1fb8:	4619      	mov	r1, r3
    1fba:	480b      	ldr	r0, [pc, #44]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1fbc:	4b0d      	ldr	r3, [pc, #52]	; (1ff4 <_gpio_set_pin_pull_mode+0xac>)
    1fbe:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1fc0:	79bb      	ldrb	r3, [r7, #6]
    1fc2:	2201      	movs	r2, #1
    1fc4:	409a      	lsls	r2, r3
    1fc6:	79fb      	ldrb	r3, [r7, #7]
    1fc8:	4619      	mov	r1, r3
    1fca:	4807      	ldr	r0, [pc, #28]	; (1fe8 <_gpio_set_pin_pull_mode+0xa0>)
    1fcc:	4b0b      	ldr	r3, [pc, #44]	; (1ffc <_gpio_set_pin_pull_mode+0xb4>)
    1fce:	4798      	blx	r3
		break;
    1fd0:	e005      	b.n	1fde <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1fd2:	2289      	movs	r2, #137	; 0x89
    1fd4:	490a      	ldr	r1, [pc, #40]	; (2000 <_gpio_set_pin_pull_mode+0xb8>)
    1fd6:	2000      	movs	r0, #0
    1fd8:	4b0a      	ldr	r3, [pc, #40]	; (2004 <_gpio_set_pin_pull_mode+0xbc>)
    1fda:	4798      	blx	r3
		break;
    1fdc:	bf00      	nop
	}
}
    1fde:	bf00      	nop
    1fe0:	3708      	adds	r7, #8
    1fe2:	46bd      	mov	sp, r7
    1fe4:	bd80      	pop	{r7, pc}
    1fe6:	bf00      	nop
    1fe8:	41008000 	.word	0x41008000
    1fec:	00001daf 	.word	0x00001daf
    1ff0:	00001bdb 	.word	0x00001bdb
    1ff4:	00001d6b 	.word	0x00001d6b
    1ff8:	00001c03 	.word	0x00001c03
    1ffc:	00001c2b 	.word	0x00001c2b
    2000:	0001b64c 	.word	0x0001b64c
    2004:	00004d25 	.word	0x00004d25

00002008 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2008:	b590      	push	{r4, r7, lr}
    200a:	b085      	sub	sp, #20
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
    2010:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	095b      	lsrs	r3, r3, #5
    2016:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	b2db      	uxtb	r3, r3
    201c:	f003 031f 	and.w	r3, r3, #31
    2020:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2022:	683b      	ldr	r3, [r7, #0]
    2024:	f1b3 3fff 	cmp.w	r3, #4294967295
    2028:	d106      	bne.n	2038 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    202a:	7bba      	ldrb	r2, [r7, #14]
    202c:	7bf9      	ldrb	r1, [r7, #15]
    202e:	2300      	movs	r3, #0
    2030:	4812      	ldr	r0, [pc, #72]	; (207c <_gpio_set_pin_function+0x74>)
    2032:	4c13      	ldr	r4, [pc, #76]	; (2080 <_gpio_set_pin_function+0x78>)
    2034:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    2036:	e01d      	b.n	2074 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    2038:	7bba      	ldrb	r2, [r7, #14]
    203a:	7bf9      	ldrb	r1, [r7, #15]
    203c:	2301      	movs	r3, #1
    203e:	480f      	ldr	r0, [pc, #60]	; (207c <_gpio_set_pin_function+0x74>)
    2040:	4c0f      	ldr	r4, [pc, #60]	; (2080 <_gpio_set_pin_function+0x78>)
    2042:	47a0      	blx	r4
		if (pin & 1) {
    2044:	7bbb      	ldrb	r3, [r7, #14]
    2046:	f003 0301 	and.w	r3, r3, #1
    204a:	2b00      	cmp	r3, #0
    204c:	d009      	beq.n	2062 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    204e:	7bbb      	ldrb	r3, [r7, #14]
    2050:	085b      	lsrs	r3, r3, #1
    2052:	b2da      	uxtb	r2, r3
    2054:	683b      	ldr	r3, [r7, #0]
    2056:	b2db      	uxtb	r3, r3
    2058:	7bf9      	ldrb	r1, [r7, #15]
    205a:	4808      	ldr	r0, [pc, #32]	; (207c <_gpio_set_pin_function+0x74>)
    205c:	4c09      	ldr	r4, [pc, #36]	; (2084 <_gpio_set_pin_function+0x7c>)
    205e:	47a0      	blx	r4
}
    2060:	e008      	b.n	2074 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2062:	7bbb      	ldrb	r3, [r7, #14]
    2064:	085b      	lsrs	r3, r3, #1
    2066:	b2da      	uxtb	r2, r3
    2068:	683b      	ldr	r3, [r7, #0]
    206a:	b2db      	uxtb	r3, r3
    206c:	7bf9      	ldrb	r1, [r7, #15]
    206e:	4803      	ldr	r0, [pc, #12]	; (207c <_gpio_set_pin_function+0x74>)
    2070:	4c05      	ldr	r4, [pc, #20]	; (2088 <_gpio_set_pin_function+0x80>)
    2072:	47a0      	blx	r4
}
    2074:	bf00      	nop
    2076:	3714      	adds	r7, #20
    2078:	46bd      	mov	sp, r7
    207a:	bd90      	pop	{r4, r7, pc}
    207c:	41008000 	.word	0x41008000
    2080:	00001d11 	.word	0x00001d11
    2084:	00001cb3 	.word	0x00001cb3
    2088:	00001c53 	.word	0x00001c53

0000208c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    208c:	b580      	push	{r7, lr}
    208e:	b082      	sub	sp, #8
    2090:	af00      	add	r7, sp, #0
    2092:	4603      	mov	r3, r0
    2094:	460a      	mov	r2, r1
    2096:	71fb      	strb	r3, [r7, #7]
    2098:	4613      	mov	r3, r2
    209a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    209c:	79fb      	ldrb	r3, [r7, #7]
    209e:	095b      	lsrs	r3, r3, #5
    20a0:	b2d8      	uxtb	r0, r3
    20a2:	79fb      	ldrb	r3, [r7, #7]
    20a4:	f003 031f 	and.w	r3, r3, #31
    20a8:	b2db      	uxtb	r3, r3
    20aa:	79ba      	ldrb	r2, [r7, #6]
    20ac:	4619      	mov	r1, r3
    20ae:	4b03      	ldr	r3, [pc, #12]	; (20bc <gpio_set_pin_pull_mode+0x30>)
    20b0:	4798      	blx	r3
}
    20b2:	bf00      	nop
    20b4:	3708      	adds	r7, #8
    20b6:	46bd      	mov	sp, r7
    20b8:	bd80      	pop	{r7, pc}
    20ba:	bf00      	nop
    20bc:	00001f49 	.word	0x00001f49

000020c0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b082      	sub	sp, #8
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
    20c8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    20ca:	6839      	ldr	r1, [r7, #0]
    20cc:	6878      	ldr	r0, [r7, #4]
    20ce:	4b03      	ldr	r3, [pc, #12]	; (20dc <gpio_set_pin_function+0x1c>)
    20d0:	4798      	blx	r3
}
    20d2:	bf00      	nop
    20d4:	3708      	adds	r7, #8
    20d6:	46bd      	mov	sp, r7
    20d8:	bd80      	pop	{r7, pc}
    20da:	bf00      	nop
    20dc:	00002009 	.word	0x00002009

000020e0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
    20e6:	4603      	mov	r3, r0
    20e8:	460a      	mov	r2, r1
    20ea:	71fb      	strb	r3, [r7, #7]
    20ec:	4613      	mov	r3, r2
    20ee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    20f0:	79fb      	ldrb	r3, [r7, #7]
    20f2:	095b      	lsrs	r3, r3, #5
    20f4:	b2d8      	uxtb	r0, r3
    20f6:	79fb      	ldrb	r3, [r7, #7]
    20f8:	f003 031f 	and.w	r3, r3, #31
    20fc:	2201      	movs	r2, #1
    20fe:	fa02 f303 	lsl.w	r3, r2, r3
    2102:	79ba      	ldrb	r2, [r7, #6]
    2104:	4619      	mov	r1, r3
    2106:	4b03      	ldr	r3, [pc, #12]	; (2114 <gpio_set_pin_direction+0x34>)
    2108:	4798      	blx	r3
}
    210a:	bf00      	nop
    210c:	3708      	adds	r7, #8
    210e:	46bd      	mov	sp, r7
    2110:	bd80      	pop	{r7, pc}
    2112:	bf00      	nop
    2114:	00001e1d 	.word	0x00001e1d

00002118 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    2118:	b580      	push	{r7, lr}
    211a:	b082      	sub	sp, #8
    211c:	af00      	add	r7, sp, #0
    211e:	4603      	mov	r3, r0
    2120:	460a      	mov	r2, r1
    2122:	71fb      	strb	r3, [r7, #7]
    2124:	4613      	mov	r3, r2
    2126:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2128:	79fb      	ldrb	r3, [r7, #7]
    212a:	095b      	lsrs	r3, r3, #5
    212c:	b2d8      	uxtb	r0, r3
    212e:	79fb      	ldrb	r3, [r7, #7]
    2130:	f003 031f 	and.w	r3, r3, #31
    2134:	2201      	movs	r2, #1
    2136:	fa02 f303 	lsl.w	r3, r2, r3
    213a:	79ba      	ldrb	r2, [r7, #6]
    213c:	4619      	mov	r1, r3
    213e:	4b03      	ldr	r3, [pc, #12]	; (214c <gpio_set_pin_level+0x34>)
    2140:	4798      	blx	r3
}
    2142:	bf00      	nop
    2144:	3708      	adds	r7, #8
    2146:	46bd      	mov	sp, r7
    2148:	bd80      	pop	{r7, pc}
    214a:	bf00      	nop
    214c:	00001f05 	.word	0x00001f05

00002150 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2150:	b580      	push	{r7, lr}
    2152:	af00      	add	r7, sp, #0
	_init_chip();
    2154:	4b01      	ldr	r3, [pc, #4]	; (215c <init_mcu+0xc>)
    2156:	4798      	blx	r3
}
    2158:	bf00      	nop
    215a:	bd80      	pop	{r7, pc}
    215c:	00005f7d 	.word	0x00005f7d

00002160 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2160:	b580      	push	{r7, lr}
    2162:	b082      	sub	sp, #8
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
    2168:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	2b00      	cmp	r3, #0
    216e:	d004      	beq.n	217a <wdt_init+0x1a>
    2170:	683b      	ldr	r3, [r7, #0]
    2172:	2b00      	cmp	r3, #0
    2174:	d001      	beq.n	217a <wdt_init+0x1a>
    2176:	2301      	movs	r3, #1
    2178:	e000      	b.n	217c <wdt_init+0x1c>
    217a:	2300      	movs	r3, #0
    217c:	f003 0301 	and.w	r3, r3, #1
    2180:	b2db      	uxtb	r3, r3
    2182:	2248      	movs	r2, #72	; 0x48
    2184:	4907      	ldr	r1, [pc, #28]	; (21a4 <wdt_init+0x44>)
    2186:	4618      	mov	r0, r3
    2188:	4b07      	ldr	r3, [pc, #28]	; (21a8 <wdt_init+0x48>)
    218a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	683a      	ldr	r2, [r7, #0]
    2190:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	4618      	mov	r0, r3
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <wdt_init+0x4c>)
    2198:	4798      	blx	r3
    219a:	4603      	mov	r3, r0
}
    219c:	4618      	mov	r0, r3
    219e:	3708      	adds	r7, #8
    21a0:	46bd      	mov	sp, r7
    21a2:	bd80      	pop	{r7, pc}
    21a4:	0001b668 	.word	0x0001b668
    21a8:	00004d25 	.word	0x00004d25
    21ac:	0000cb95 	.word	0x0000cb95

000021b0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    21b4:	4804      	ldr	r0, [pc, #16]	; (21c8 <CRC_CALC_init+0x18>)
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <CRC_CALC_init+0x1c>)
    21b8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    21ba:	4905      	ldr	r1, [pc, #20]	; (21d0 <CRC_CALC_init+0x20>)
    21bc:	4805      	ldr	r0, [pc, #20]	; (21d4 <CRC_CALC_init+0x24>)
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <CRC_CALC_init+0x28>)
    21c0:	4798      	blx	r3
}
    21c2:	bf00      	nop
    21c4:	bd80      	pop	{r7, pc}
    21c6:	bf00      	nop
    21c8:	40000800 	.word	0x40000800
    21cc:	000019b3 	.word	0x000019b3
    21d0:	41002000 	.word	0x41002000
    21d4:	2000e154 	.word	0x2000e154
    21d8:	00003649 	.word	0x00003649

000021dc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    21dc:	b580      	push	{r7, lr}
    21de:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21e0:	2244      	movs	r2, #68	; 0x44
    21e2:	2104      	movs	r1, #4
    21e4:	4845      	ldr	r0, [pc, #276]	; (22fc <EXTERNAL_IRQ_0_init+0x120>)
    21e6:	4b46      	ldr	r3, [pc, #280]	; (2300 <EXTERNAL_IRQ_0_init+0x124>)
    21e8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    21ea:	4846      	ldr	r0, [pc, #280]	; (2304 <EXTERNAL_IRQ_0_init+0x128>)
    21ec:	4b46      	ldr	r3, [pc, #280]	; (2308 <EXTERNAL_IRQ_0_init+0x12c>)
    21ee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    21f0:	2101      	movs	r1, #1
    21f2:	2040      	movs	r0, #64	; 0x40
    21f4:	4b45      	ldr	r3, [pc, #276]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    21f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    21f8:	2100      	movs	r1, #0
    21fa:	2040      	movs	r0, #64	; 0x40
    21fc:	4b44      	ldr	r3, [pc, #272]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    21fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    2200:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    2204:	2040      	movs	r0, #64	; 0x40
    2206:	4b43      	ldr	r3, [pc, #268]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    2208:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    220a:	2101      	movs	r1, #1
    220c:	2021      	movs	r0, #33	; 0x21
    220e:	4b3f      	ldr	r3, [pc, #252]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    2210:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    2212:	2100      	movs	r1, #0
    2214:	2021      	movs	r0, #33	; 0x21
    2216:	4b3e      	ldr	r3, [pc, #248]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    2218:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    221a:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    221e:	2021      	movs	r0, #33	; 0x21
    2220:	4b3c      	ldr	r3, [pc, #240]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    2222:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    2224:	2101      	movs	r1, #1
    2226:	2003      	movs	r0, #3
    2228:	4b38      	ldr	r3, [pc, #224]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    222a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    222c:	2102      	movs	r1, #2
    222e:	2003      	movs	r0, #3
    2230:	4b37      	ldr	r3, [pc, #220]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    2232:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    2234:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    2238:	2003      	movs	r0, #3
    223a:	4b36      	ldr	r3, [pc, #216]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    223c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    223e:	2101      	movs	r1, #1
    2240:	2004      	movs	r0, #4
    2242:	4b32      	ldr	r3, [pc, #200]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    2244:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    2246:	2102      	movs	r1, #2
    2248:	2004      	movs	r0, #4
    224a:	4b31      	ldr	r3, [pc, #196]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    224c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    224e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2252:	2004      	movs	r0, #4
    2254:	4b2f      	ldr	r3, [pc, #188]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    2256:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    2258:	2101      	movs	r1, #1
    225a:	2005      	movs	r0, #5
    225c:	4b2b      	ldr	r3, [pc, #172]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    225e:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2260:	2102      	movs	r1, #2
    2262:	2005      	movs	r0, #5
    2264:	4b2a      	ldr	r3, [pc, #168]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    2266:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    2268:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    226c:	2005      	movs	r0, #5
    226e:	4b29      	ldr	r3, [pc, #164]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    2270:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    2272:	2101      	movs	r1, #1
    2274:	2056      	movs	r0, #86	; 0x56
    2276:	4b25      	ldr	r3, [pc, #148]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    2278:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    227a:	2102      	movs	r1, #2
    227c:	2056      	movs	r0, #86	; 0x56
    227e:	4b24      	ldr	r3, [pc, #144]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    2280:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    2282:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    2286:	2056      	movs	r0, #86	; 0x56
    2288:	4b22      	ldr	r3, [pc, #136]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    228a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    228c:	2101      	movs	r1, #1
    228e:	2057      	movs	r0, #87	; 0x57
    2290:	4b1e      	ldr	r3, [pc, #120]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    2292:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    2294:	2102      	movs	r1, #2
    2296:	2057      	movs	r0, #87	; 0x57
    2298:	4b1d      	ldr	r3, [pc, #116]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    229a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    229c:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    22a0:	2057      	movs	r0, #87	; 0x57
    22a2:	4b1c      	ldr	r3, [pc, #112]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    22a4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    22a6:	2101      	movs	r1, #1
    22a8:	2028      	movs	r0, #40	; 0x28
    22aa:	4b18      	ldr	r3, [pc, #96]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    22ac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    22ae:	2100      	movs	r1, #0
    22b0:	2028      	movs	r0, #40	; 0x28
    22b2:	4b17      	ldr	r3, [pc, #92]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    22b4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    22b6:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    22ba:	2028      	movs	r0, #40	; 0x28
    22bc:	4b15      	ldr	r3, [pc, #84]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    22be:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    22c0:	2101      	movs	r1, #1
    22c2:	2029      	movs	r0, #41	; 0x29
    22c4:	4b11      	ldr	r3, [pc, #68]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    22c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    22c8:	2100      	movs	r1, #0
    22ca:	2029      	movs	r0, #41	; 0x29
    22cc:	4b10      	ldr	r3, [pc, #64]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    22ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    22d0:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    22d4:	2029      	movs	r0, #41	; 0x29
    22d6:	4b0f      	ldr	r3, [pc, #60]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    22d8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC10, GPIO_DIRECTION_IN);
    22da:	2101      	movs	r1, #1
    22dc:	204a      	movs	r0, #74	; 0x4a
    22de:	4b0b      	ldr	r3, [pc, #44]	; (230c <EXTERNAL_IRQ_0_init+0x130>)
    22e0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC10,
    22e2:	2100      	movs	r1, #0
    22e4:	204a      	movs	r0, #74	; 0x4a
    22e6:	4b0a      	ldr	r3, [pc, #40]	; (2310 <EXTERNAL_IRQ_0_init+0x134>)
    22e8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC10, PINMUX_PC10A_EIC_EXTINT10);
    22ea:	f44f 0194 	mov.w	r1, #4849664	; 0x4a0000
    22ee:	204a      	movs	r0, #74	; 0x4a
    22f0:	4b08      	ldr	r3, [pc, #32]	; (2314 <EXTERNAL_IRQ_0_init+0x138>)
    22f2:	4798      	blx	r3

	ext_irq_init();
    22f4:	4b08      	ldr	r3, [pc, #32]	; (2318 <EXTERNAL_IRQ_0_init+0x13c>)
    22f6:	4798      	blx	r3
}
    22f8:	bf00      	nop
    22fa:	bd80      	pop	{r7, pc}
    22fc:	40001c00 	.word	0x40001c00
    2300:	0000186d 	.word	0x0000186d
    2304:	40000800 	.word	0x40000800
    2308:	00001953 	.word	0x00001953
    230c:	000020e1 	.word	0x000020e1
    2310:	0000208d 	.word	0x0000208d
    2314:	000020c1 	.word	0x000020c1
    2318:	00003711 	.word	0x00003711

0000231c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    231c:	b580      	push	{r7, lr}
    231e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2320:	2244      	movs	r2, #68	; 0x44
    2322:	210b      	movs	r1, #11
    2324:	4807      	ldr	r0, [pc, #28]	; (2344 <EVENT_SYSTEM_0_init+0x28>)
    2326:	4b08      	ldr	r3, [pc, #32]	; (2348 <EVENT_SYSTEM_0_init+0x2c>)
    2328:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    232a:	2244      	movs	r2, #68	; 0x44
    232c:	210c      	movs	r1, #12
    232e:	4805      	ldr	r0, [pc, #20]	; (2344 <EVENT_SYSTEM_0_init+0x28>)
    2330:	4b05      	ldr	r3, [pc, #20]	; (2348 <EVENT_SYSTEM_0_init+0x2c>)
    2332:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    2334:	4805      	ldr	r0, [pc, #20]	; (234c <EVENT_SYSTEM_0_init+0x30>)
    2336:	4b06      	ldr	r3, [pc, #24]	; (2350 <EVENT_SYSTEM_0_init+0x34>)
    2338:	4798      	blx	r3

	event_system_init();
    233a:	4b06      	ldr	r3, [pc, #24]	; (2354 <EVENT_SYSTEM_0_init+0x38>)
    233c:	4798      	blx	r3
}
    233e:	bf00      	nop
    2340:	bd80      	pop	{r7, pc}
    2342:	bf00      	nop
    2344:	40001c00 	.word	0x40001c00
    2348:	0000186d 	.word	0x0000186d
    234c:	40000800 	.word	0x40000800
    2350:	000019d3 	.word	0x000019d3
    2354:	000036fd 	.word	0x000036fd

00002358 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2358:	b580      	push	{r7, lr}
    235a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    235c:	2101      	movs	r1, #1
    235e:	202b      	movs	r0, #43	; 0x2b
    2360:	4b2b      	ldr	r3, [pc, #172]	; (2410 <QSPI_N25Q256_PORT_init+0xb8>)
    2362:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    2364:	2100      	movs	r1, #0
    2366:	202b      	movs	r0, #43	; 0x2b
    2368:	4b2a      	ldr	r3, [pc, #168]	; (2414 <QSPI_N25Q256_PORT_init+0xbc>)
    236a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    236c:	492a      	ldr	r1, [pc, #168]	; (2418 <QSPI_N25Q256_PORT_init+0xc0>)
    236e:	202b      	movs	r0, #43	; 0x2b
    2370:	4b2a      	ldr	r3, [pc, #168]	; (241c <QSPI_N25Q256_PORT_init+0xc4>)
    2372:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2374:	2102      	movs	r1, #2
    2376:	2008      	movs	r0, #8
    2378:	4b25      	ldr	r3, [pc, #148]	; (2410 <QSPI_N25Q256_PORT_init+0xb8>)
    237a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    237c:	2100      	movs	r1, #0
    237e:	2008      	movs	r0, #8
    2380:	4b27      	ldr	r3, [pc, #156]	; (2420 <QSPI_N25Q256_PORT_init+0xc8>)
    2382:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2384:	2100      	movs	r1, #0
    2386:	2008      	movs	r0, #8
    2388:	4b22      	ldr	r3, [pc, #136]	; (2414 <QSPI_N25Q256_PORT_init+0xbc>)
    238a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    238c:	4925      	ldr	r1, [pc, #148]	; (2424 <QSPI_N25Q256_PORT_init+0xcc>)
    238e:	2008      	movs	r0, #8
    2390:	4b22      	ldr	r3, [pc, #136]	; (241c <QSPI_N25Q256_PORT_init+0xc4>)
    2392:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2394:	2102      	movs	r1, #2
    2396:	2009      	movs	r0, #9
    2398:	4b1d      	ldr	r3, [pc, #116]	; (2410 <QSPI_N25Q256_PORT_init+0xb8>)
    239a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    239c:	2100      	movs	r1, #0
    239e:	2009      	movs	r0, #9
    23a0:	4b1f      	ldr	r3, [pc, #124]	; (2420 <QSPI_N25Q256_PORT_init+0xc8>)
    23a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    23a4:	2100      	movs	r1, #0
    23a6:	2009      	movs	r0, #9
    23a8:	4b1a      	ldr	r3, [pc, #104]	; (2414 <QSPI_N25Q256_PORT_init+0xbc>)
    23aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    23ac:	491e      	ldr	r1, [pc, #120]	; (2428 <QSPI_N25Q256_PORT_init+0xd0>)
    23ae:	2009      	movs	r0, #9
    23b0:	4b1a      	ldr	r3, [pc, #104]	; (241c <QSPI_N25Q256_PORT_init+0xc4>)
    23b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    23b4:	2102      	movs	r1, #2
    23b6:	200a      	movs	r0, #10
    23b8:	4b15      	ldr	r3, [pc, #84]	; (2410 <QSPI_N25Q256_PORT_init+0xb8>)
    23ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    23bc:	2100      	movs	r1, #0
    23be:	200a      	movs	r0, #10
    23c0:	4b17      	ldr	r3, [pc, #92]	; (2420 <QSPI_N25Q256_PORT_init+0xc8>)
    23c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    23c4:	2100      	movs	r1, #0
    23c6:	200a      	movs	r0, #10
    23c8:	4b12      	ldr	r3, [pc, #72]	; (2414 <QSPI_N25Q256_PORT_init+0xbc>)
    23ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    23cc:	4917      	ldr	r1, [pc, #92]	; (242c <QSPI_N25Q256_PORT_init+0xd4>)
    23ce:	200a      	movs	r0, #10
    23d0:	4b12      	ldr	r3, [pc, #72]	; (241c <QSPI_N25Q256_PORT_init+0xc4>)
    23d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    23d4:	2102      	movs	r1, #2
    23d6:	200b      	movs	r0, #11
    23d8:	4b0d      	ldr	r3, [pc, #52]	; (2410 <QSPI_N25Q256_PORT_init+0xb8>)
    23da:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    23dc:	2100      	movs	r1, #0
    23de:	200b      	movs	r0, #11
    23e0:	4b0f      	ldr	r3, [pc, #60]	; (2420 <QSPI_N25Q256_PORT_init+0xc8>)
    23e2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    23e4:	2100      	movs	r1, #0
    23e6:	200b      	movs	r0, #11
    23e8:	4b0a      	ldr	r3, [pc, #40]	; (2414 <QSPI_N25Q256_PORT_init+0xbc>)
    23ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    23ec:	4910      	ldr	r1, [pc, #64]	; (2430 <QSPI_N25Q256_PORT_init+0xd8>)
    23ee:	200b      	movs	r0, #11
    23f0:	4b0a      	ldr	r3, [pc, #40]	; (241c <QSPI_N25Q256_PORT_init+0xc4>)
    23f2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    23f4:	2101      	movs	r1, #1
    23f6:	202a      	movs	r0, #42	; 0x2a
    23f8:	4b05      	ldr	r3, [pc, #20]	; (2410 <QSPI_N25Q256_PORT_init+0xb8>)
    23fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    23fc:	2100      	movs	r1, #0
    23fe:	202a      	movs	r0, #42	; 0x2a
    2400:	4b04      	ldr	r3, [pc, #16]	; (2414 <QSPI_N25Q256_PORT_init+0xbc>)
    2402:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    2404:	490b      	ldr	r1, [pc, #44]	; (2434 <QSPI_N25Q256_PORT_init+0xdc>)
    2406:	202a      	movs	r0, #42	; 0x2a
    2408:	4b04      	ldr	r3, [pc, #16]	; (241c <QSPI_N25Q256_PORT_init+0xc4>)
    240a:	4798      	blx	r3
}
    240c:	bf00      	nop
    240e:	bd80      	pop	{r7, pc}
    2410:	000020e1 	.word	0x000020e1
    2414:	0000208d 	.word	0x0000208d
    2418:	002b0007 	.word	0x002b0007
    241c:	000020c1 	.word	0x000020c1
    2420:	00002119 	.word	0x00002119
    2424:	00080007 	.word	0x00080007
    2428:	00090007 	.word	0x00090007
    242c:	000a0007 	.word	0x000a0007
    2430:	000b0007 	.word	0x000b0007
    2434:	002a0007 	.word	0x002a0007

00002438 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    2438:	b580      	push	{r7, lr}
    243a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    243c:	4805      	ldr	r0, [pc, #20]	; (2454 <QSPI_N25Q256_CLOCK_init+0x1c>)
    243e:	4b06      	ldr	r3, [pc, #24]	; (2458 <QSPI_N25Q256_CLOCK_init+0x20>)
    2440:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    2442:	4804      	ldr	r0, [pc, #16]	; (2454 <QSPI_N25Q256_CLOCK_init+0x1c>)
    2444:	4b05      	ldr	r3, [pc, #20]	; (245c <QSPI_N25Q256_CLOCK_init+0x24>)
    2446:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    2448:	4802      	ldr	r0, [pc, #8]	; (2454 <QSPI_N25Q256_CLOCK_init+0x1c>)
    244a:	4b05      	ldr	r3, [pc, #20]	; (2460 <QSPI_N25Q256_CLOCK_init+0x28>)
    244c:	4798      	blx	r3
}
    244e:	bf00      	nop
    2450:	bd80      	pop	{r7, pc}
    2452:	bf00      	nop
    2454:	40000800 	.word	0x40000800
    2458:	000018b3 	.word	0x000018b3
    245c:	000018f3 	.word	0x000018f3
    2460:	00001ad3 	.word	0x00001ad3

00002464 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    2464:	b580      	push	{r7, lr}
    2466:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    2468:	4b04      	ldr	r3, [pc, #16]	; (247c <QSPI_N25Q256_init+0x18>)
    246a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    246c:	4904      	ldr	r1, [pc, #16]	; (2480 <QSPI_N25Q256_init+0x1c>)
    246e:	4805      	ldr	r0, [pc, #20]	; (2484 <QSPI_N25Q256_init+0x20>)
    2470:	4b05      	ldr	r3, [pc, #20]	; (2488 <QSPI_N25Q256_init+0x24>)
    2472:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    2474:	4b05      	ldr	r3, [pc, #20]	; (248c <QSPI_N25Q256_init+0x28>)
    2476:	4798      	blx	r3
}
    2478:	bf00      	nop
    247a:	bd80      	pop	{r7, pc}
    247c:	00002439 	.word	0x00002439
    2480:	42003400 	.word	0x42003400
    2484:	2000dfe8 	.word	0x2000dfe8
    2488:	00003b81 	.word	0x00003b81
    248c:	00002359 	.word	0x00002359

00002490 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2490:	b580      	push	{r7, lr}
    2492:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    2494:	4802      	ldr	r0, [pc, #8]	; (24a0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    2496:	4b03      	ldr	r3, [pc, #12]	; (24a4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    2498:	4798      	blx	r3
}
    249a:	bf00      	nop
    249c:	bd80      	pop	{r7, pc}
    249e:	bf00      	nop
    24a0:	40000800 	.word	0x40000800
    24a4:	00001933 	.word	0x00001933

000024a8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    24ac:	4b03      	ldr	r3, [pc, #12]	; (24bc <DATETIME_CLOCK_init+0x14>)
    24ae:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    24b0:	4903      	ldr	r1, [pc, #12]	; (24c0 <DATETIME_CLOCK_init+0x18>)
    24b2:	4804      	ldr	r0, [pc, #16]	; (24c4 <DATETIME_CLOCK_init+0x1c>)
    24b4:	4b04      	ldr	r3, [pc, #16]	; (24c8 <DATETIME_CLOCK_init+0x20>)
    24b6:	4798      	blx	r3
}
    24b8:	bf00      	nop
    24ba:	bd80      	pop	{r7, pc}
    24bc:	00002491 	.word	0x00002491
    24c0:	40002400 	.word	0x40002400
    24c4:	2000e130 	.word	0x2000e130
    24c8:	000031b1 	.word	0x000031b1

000024cc <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    24d0:	2100      	movs	r1, #0
    24d2:	2011      	movs	r0, #17
    24d4:	4b07      	ldr	r3, [pc, #28]	; (24f4 <I2C_HEATERS_PORT_init+0x28>)
    24d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    24d8:	4907      	ldr	r1, [pc, #28]	; (24f8 <I2C_HEATERS_PORT_init+0x2c>)
    24da:	2011      	movs	r0, #17
    24dc:	4b07      	ldr	r3, [pc, #28]	; (24fc <I2C_HEATERS_PORT_init+0x30>)
    24de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    24e0:	2100      	movs	r1, #0
    24e2:	2010      	movs	r0, #16
    24e4:	4b03      	ldr	r3, [pc, #12]	; (24f4 <I2C_HEATERS_PORT_init+0x28>)
    24e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    24e8:	4905      	ldr	r1, [pc, #20]	; (2500 <I2C_HEATERS_PORT_init+0x34>)
    24ea:	2010      	movs	r0, #16
    24ec:	4b03      	ldr	r3, [pc, #12]	; (24fc <I2C_HEATERS_PORT_init+0x30>)
    24ee:	4798      	blx	r3
}
    24f0:	bf00      	nop
    24f2:	bd80      	pop	{r7, pc}
    24f4:	0000208d 	.word	0x0000208d
    24f8:	00110003 	.word	0x00110003
    24fc:	000020c1 	.word	0x000020c1
    2500:	00100003 	.word	0x00100003

00002504 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    2504:	b580      	push	{r7, lr}
    2506:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2508:	2240      	movs	r2, #64	; 0x40
    250a:	2118      	movs	r1, #24
    250c:	4806      	ldr	r0, [pc, #24]	; (2528 <I2C_HEATERS_CLOCK_init+0x24>)
    250e:	4b07      	ldr	r3, [pc, #28]	; (252c <I2C_HEATERS_CLOCK_init+0x28>)
    2510:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2512:	2243      	movs	r2, #67	; 0x43
    2514:	2103      	movs	r1, #3
    2516:	4804      	ldr	r0, [pc, #16]	; (2528 <I2C_HEATERS_CLOCK_init+0x24>)
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <I2C_HEATERS_CLOCK_init+0x28>)
    251a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    251c:	4804      	ldr	r0, [pc, #16]	; (2530 <I2C_HEATERS_CLOCK_init+0x2c>)
    251e:	4b05      	ldr	r3, [pc, #20]	; (2534 <I2C_HEATERS_CLOCK_init+0x30>)
    2520:	4798      	blx	r3
}
    2522:	bf00      	nop
    2524:	bd80      	pop	{r7, pc}
    2526:	bf00      	nop
    2528:	40001c00 	.word	0x40001c00
    252c:	0000186d 	.word	0x0000186d
    2530:	40000800 	.word	0x40000800
    2534:	000019f3 	.word	0x000019f3

00002538 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    2538:	b580      	push	{r7, lr}
    253a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <I2C_HEATERS_init+0x18>)
    253e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    2540:	4904      	ldr	r1, [pc, #16]	; (2554 <I2C_HEATERS_init+0x1c>)
    2542:	4805      	ldr	r0, [pc, #20]	; (2558 <I2C_HEATERS_init+0x20>)
    2544:	4b05      	ldr	r3, [pc, #20]	; (255c <I2C_HEATERS_init+0x24>)
    2546:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <I2C_HEATERS_init+0x28>)
    254a:	4798      	blx	r3
}
    254c:	bf00      	nop
    254e:	bd80      	pop	{r7, pc}
    2550:	00002505 	.word	0x00002505
    2554:	41014000 	.word	0x41014000
    2558:	2000e088 	.word	0x2000e088
    255c:	000039d9 	.word	0x000039d9
    2560:	000024cd 	.word	0x000024cd

00002564 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    2564:	b580      	push	{r7, lr}
    2566:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    2568:	2100      	movs	r1, #0
    256a:	203b      	movs	r0, #59	; 0x3b
    256c:	4b11      	ldr	r3, [pc, #68]	; (25b4 <SPI_TEMP_PORT_init+0x50>)
    256e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    2570:	2102      	movs	r1, #2
    2572:	203b      	movs	r0, #59	; 0x3b
    2574:	4b10      	ldr	r3, [pc, #64]	; (25b8 <SPI_TEMP_PORT_init+0x54>)
    2576:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2578:	4910      	ldr	r1, [pc, #64]	; (25bc <SPI_TEMP_PORT_init+0x58>)
    257a:	203b      	movs	r0, #59	; 0x3b
    257c:	4b10      	ldr	r3, [pc, #64]	; (25c0 <SPI_TEMP_PORT_init+0x5c>)
    257e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2580:	2100      	movs	r1, #0
    2582:	203a      	movs	r0, #58	; 0x3a
    2584:	4b0b      	ldr	r3, [pc, #44]	; (25b4 <SPI_TEMP_PORT_init+0x50>)
    2586:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2588:	2102      	movs	r1, #2
    258a:	203a      	movs	r0, #58	; 0x3a
    258c:	4b0a      	ldr	r3, [pc, #40]	; (25b8 <SPI_TEMP_PORT_init+0x54>)
    258e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2590:	490c      	ldr	r1, [pc, #48]	; (25c4 <SPI_TEMP_PORT_init+0x60>)
    2592:	203a      	movs	r0, #58	; 0x3a
    2594:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <SPI_TEMP_PORT_init+0x5c>)
    2596:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2598:	2101      	movs	r1, #1
    259a:	203c      	movs	r0, #60	; 0x3c
    259c:	4b06      	ldr	r3, [pc, #24]	; (25b8 <SPI_TEMP_PORT_init+0x54>)
    259e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    25a0:	2100      	movs	r1, #0
    25a2:	203c      	movs	r0, #60	; 0x3c
    25a4:	4b08      	ldr	r3, [pc, #32]	; (25c8 <SPI_TEMP_PORT_init+0x64>)
    25a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    25a8:	4908      	ldr	r1, [pc, #32]	; (25cc <SPI_TEMP_PORT_init+0x68>)
    25aa:	203c      	movs	r0, #60	; 0x3c
    25ac:	4b04      	ldr	r3, [pc, #16]	; (25c0 <SPI_TEMP_PORT_init+0x5c>)
    25ae:	4798      	blx	r3
}
    25b0:	bf00      	nop
    25b2:	bd80      	pop	{r7, pc}
    25b4:	00002119 	.word	0x00002119
    25b8:	000020e1 	.word	0x000020e1
    25bc:	003b0003 	.word	0x003b0003
    25c0:	000020c1 	.word	0x000020c1
    25c4:	003a0003 	.word	0x003a0003
    25c8:	0000208d 	.word	0x0000208d
    25cc:	003c0003 	.word	0x003c0003

000025d0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    25d0:	b580      	push	{r7, lr}
    25d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    25d4:	2245      	movs	r2, #69	; 0x45
    25d6:	2122      	movs	r1, #34	; 0x22
    25d8:	4806      	ldr	r0, [pc, #24]	; (25f4 <SPI_TEMP_CLOCK_init+0x24>)
    25da:	4b07      	ldr	r3, [pc, #28]	; (25f8 <SPI_TEMP_CLOCK_init+0x28>)
    25dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    25de:	224a      	movs	r2, #74	; 0x4a
    25e0:	2103      	movs	r1, #3
    25e2:	4804      	ldr	r0, [pc, #16]	; (25f4 <SPI_TEMP_CLOCK_init+0x24>)
    25e4:	4b04      	ldr	r3, [pc, #16]	; (25f8 <SPI_TEMP_CLOCK_init+0x28>)
    25e6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    25e8:	4804      	ldr	r0, [pc, #16]	; (25fc <SPI_TEMP_CLOCK_init+0x2c>)
    25ea:	4b05      	ldr	r3, [pc, #20]	; (2600 <SPI_TEMP_CLOCK_init+0x30>)
    25ec:	4798      	blx	r3
}
    25ee:	bf00      	nop
    25f0:	bd80      	pop	{r7, pc}
    25f2:	bf00      	nop
    25f4:	40001c00 	.word	0x40001c00
    25f8:	0000186d 	.word	0x0000186d
    25fc:	40000800 	.word	0x40000800
    2600:	00001af3 	.word	0x00001af3

00002604 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2604:	b580      	push	{r7, lr}
    2606:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2608:	4b05      	ldr	r3, [pc, #20]	; (2620 <SPI_TEMP_init+0x1c>)
    260a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    260c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2610:	4804      	ldr	r0, [pc, #16]	; (2624 <SPI_TEMP_init+0x20>)
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <SPI_TEMP_init+0x24>)
    2614:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    2616:	4b05      	ldr	r3, [pc, #20]	; (262c <SPI_TEMP_init+0x28>)
    2618:	4798      	blx	r3
}
    261a:	bf00      	nop
    261c:	bd80      	pop	{r7, pc}
    261e:	bf00      	nop
    2620:	000025d1 	.word	0x000025d1
    2624:	2000df90 	.word	0x2000df90
    2628:	00003c91 	.word	0x00003c91
    262c:	00002565 	.word	0x00002565

00002630 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    2630:	b580      	push	{r7, lr}
    2632:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2634:	2100      	movs	r1, #0
    2636:	2017      	movs	r0, #23
    2638:	4b07      	ldr	r3, [pc, #28]	; (2658 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    263a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    263c:	4907      	ldr	r1, [pc, #28]	; (265c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    263e:	2017      	movs	r0, #23
    2640:	4b07      	ldr	r3, [pc, #28]	; (2660 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2642:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2644:	2100      	movs	r1, #0
    2646:	2016      	movs	r0, #22
    2648:	4b03      	ldr	r3, [pc, #12]	; (2658 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    264a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    264c:	4905      	ldr	r1, [pc, #20]	; (2664 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    264e:	2016      	movs	r0, #22
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2652:	4798      	blx	r3
}
    2654:	bf00      	nop
    2656:	bd80      	pop	{r7, pc}
    2658:	0000208d 	.word	0x0000208d
    265c:	00170003 	.word	0x00170003
    2660:	000020c1 	.word	0x000020c1
    2664:	00160003 	.word	0x00160003

00002668 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    2668:	b580      	push	{r7, lr}
    266a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    266c:	2244      	movs	r2, #68	; 0x44
    266e:	2123      	movs	r1, #35	; 0x23
    2670:	4806      	ldr	r0, [pc, #24]	; (268c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2672:	4b07      	ldr	r3, [pc, #28]	; (2690 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2674:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2676:	224a      	movs	r2, #74	; 0x4a
    2678:	2103      	movs	r1, #3
    267a:	4804      	ldr	r0, [pc, #16]	; (268c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    267c:	4b04      	ldr	r3, [pc, #16]	; (2690 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    267e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2680:	4804      	ldr	r0, [pc, #16]	; (2694 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    2682:	4b05      	ldr	r3, [pc, #20]	; (2698 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    2684:	4798      	blx	r3
}
    2686:	bf00      	nop
    2688:	bd80      	pop	{r7, pc}
    268a:	bf00      	nop
    268c:	40001c00 	.word	0x40001c00
    2690:	0000186d 	.word	0x0000186d
    2694:	40000800 	.word	0x40000800
    2698:	00001b13 	.word	0x00001b13

0000269c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    269c:	b580      	push	{r7, lr}
    269e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <I2C_FLAPPER_VALVE_init+0x18>)
    26a2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    26a4:	4904      	ldr	r1, [pc, #16]	; (26b8 <I2C_FLAPPER_VALVE_init+0x1c>)
    26a6:	4805      	ldr	r0, [pc, #20]	; (26bc <I2C_FLAPPER_VALVE_init+0x20>)
    26a8:	4b05      	ldr	r3, [pc, #20]	; (26c0 <I2C_FLAPPER_VALVE_init+0x24>)
    26aa:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    26ac:	4b05      	ldr	r3, [pc, #20]	; (26c4 <I2C_FLAPPER_VALVE_init+0x28>)
    26ae:	4798      	blx	r3
}
    26b0:	bf00      	nop
    26b2:	bd80      	pop	{r7, pc}
    26b4:	00002669 	.word	0x00002669
    26b8:	43000400 	.word	0x43000400
    26bc:	2000e02c 	.word	0x2000e02c
    26c0:	000039d9 	.word	0x000039d9
    26c4:	00002631 	.word	0x00002631

000026c8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    26cc:	2100      	movs	r1, #0
    26ce:	2044      	movs	r0, #68	; 0x44
    26d0:	4b11      	ldr	r3, [pc, #68]	; (2718 <SPI_HI3593_PORT_init+0x50>)
    26d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    26d4:	2102      	movs	r1, #2
    26d6:	2044      	movs	r0, #68	; 0x44
    26d8:	4b10      	ldr	r3, [pc, #64]	; (271c <SPI_HI3593_PORT_init+0x54>)
    26da:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    26dc:	4910      	ldr	r1, [pc, #64]	; (2720 <SPI_HI3593_PORT_init+0x58>)
    26de:	2044      	movs	r0, #68	; 0x44
    26e0:	4b10      	ldr	r3, [pc, #64]	; (2724 <SPI_HI3593_PORT_init+0x5c>)
    26e2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    26e4:	2100      	movs	r1, #0
    26e6:	2045      	movs	r0, #69	; 0x45
    26e8:	4b0b      	ldr	r3, [pc, #44]	; (2718 <SPI_HI3593_PORT_init+0x50>)
    26ea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    26ec:	2102      	movs	r1, #2
    26ee:	2045      	movs	r0, #69	; 0x45
    26f0:	4b0a      	ldr	r3, [pc, #40]	; (271c <SPI_HI3593_PORT_init+0x54>)
    26f2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    26f4:	490c      	ldr	r1, [pc, #48]	; (2728 <SPI_HI3593_PORT_init+0x60>)
    26f6:	2045      	movs	r0, #69	; 0x45
    26f8:	4b0a      	ldr	r3, [pc, #40]	; (2724 <SPI_HI3593_PORT_init+0x5c>)
    26fa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    26fc:	2101      	movs	r1, #1
    26fe:	2047      	movs	r0, #71	; 0x47
    2700:	4b06      	ldr	r3, [pc, #24]	; (271c <SPI_HI3593_PORT_init+0x54>)
    2702:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2704:	2100      	movs	r1, #0
    2706:	2047      	movs	r0, #71	; 0x47
    2708:	4b08      	ldr	r3, [pc, #32]	; (272c <SPI_HI3593_PORT_init+0x64>)
    270a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    270c:	4908      	ldr	r1, [pc, #32]	; (2730 <SPI_HI3593_PORT_init+0x68>)
    270e:	2047      	movs	r0, #71	; 0x47
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <SPI_HI3593_PORT_init+0x5c>)
    2712:	4798      	blx	r3
}
    2714:	bf00      	nop
    2716:	bd80      	pop	{r7, pc}
    2718:	00002119 	.word	0x00002119
    271c:	000020e1 	.word	0x000020e1
    2720:	00440002 	.word	0x00440002
    2724:	000020c1 	.word	0x000020c1
    2728:	00450002 	.word	0x00450002
    272c:	0000208d 	.word	0x0000208d
    2730:	00470002 	.word	0x00470002

00002734 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2734:	b580      	push	{r7, lr}
    2736:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2738:	2242      	movs	r2, #66	; 0x42
    273a:	2124      	movs	r1, #36	; 0x24
    273c:	4806      	ldr	r0, [pc, #24]	; (2758 <SPI_HI3593_CLOCK_init+0x24>)
    273e:	4b07      	ldr	r3, [pc, #28]	; (275c <SPI_HI3593_CLOCK_init+0x28>)
    2740:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2742:	224a      	movs	r2, #74	; 0x4a
    2744:	2103      	movs	r1, #3
    2746:	4804      	ldr	r0, [pc, #16]	; (2758 <SPI_HI3593_CLOCK_init+0x24>)
    2748:	4b04      	ldr	r3, [pc, #16]	; (275c <SPI_HI3593_CLOCK_init+0x28>)
    274a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    274c:	4804      	ldr	r0, [pc, #16]	; (2760 <SPI_HI3593_CLOCK_init+0x2c>)
    274e:	4b05      	ldr	r3, [pc, #20]	; (2764 <SPI_HI3593_CLOCK_init+0x30>)
    2750:	4798      	blx	r3
}
    2752:	bf00      	nop
    2754:	bd80      	pop	{r7, pc}
    2756:	bf00      	nop
    2758:	40001c00 	.word	0x40001c00
    275c:	0000186d 	.word	0x0000186d
    2760:	40000800 	.word	0x40000800
    2764:	00001b33 	.word	0x00001b33

00002768 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    2768:	b580      	push	{r7, lr}
    276a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    276c:	4b04      	ldr	r3, [pc, #16]	; (2780 <SPI_HI3593_init+0x18>)
    276e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    2770:	4904      	ldr	r1, [pc, #16]	; (2784 <SPI_HI3593_init+0x1c>)
    2772:	4805      	ldr	r0, [pc, #20]	; (2788 <SPI_HI3593_init+0x20>)
    2774:	4b05      	ldr	r3, [pc, #20]	; (278c <SPI_HI3593_init+0x24>)
    2776:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2778:	4b05      	ldr	r3, [pc, #20]	; (2790 <SPI_HI3593_init+0x28>)
    277a:	4798      	blx	r3
}
    277c:	bf00      	nop
    277e:	bd80      	pop	{r7, pc}
    2780:	00002735 	.word	0x00002735
    2784:	43000800 	.word	0x43000800
    2788:	2000df78 	.word	0x2000df78
    278c:	00003c91 	.word	0x00003c91
    2790:	000026c9 	.word	0x000026c9

00002794 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    2794:	b580      	push	{r7, lr}
    2796:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2798:	2100      	movs	r1, #0
    279a:	2068      	movs	r0, #104	; 0x68
    279c:	4b07      	ldr	r3, [pc, #28]	; (27bc <I2C_FANS_PORT_init+0x28>)
    279e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    27a0:	4907      	ldr	r1, [pc, #28]	; (27c0 <I2C_FANS_PORT_init+0x2c>)
    27a2:	2068      	movs	r0, #104	; 0x68
    27a4:	4b07      	ldr	r3, [pc, #28]	; (27c4 <I2C_FANS_PORT_init+0x30>)
    27a6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    27a8:	2100      	movs	r1, #0
    27aa:	2069      	movs	r0, #105	; 0x69
    27ac:	4b03      	ldr	r3, [pc, #12]	; (27bc <I2C_FANS_PORT_init+0x28>)
    27ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    27b0:	4905      	ldr	r1, [pc, #20]	; (27c8 <I2C_FANS_PORT_init+0x34>)
    27b2:	2069      	movs	r0, #105	; 0x69
    27b4:	4b03      	ldr	r3, [pc, #12]	; (27c4 <I2C_FANS_PORT_init+0x30>)
    27b6:	4798      	blx	r3
}
    27b8:	bf00      	nop
    27ba:	bd80      	pop	{r7, pc}
    27bc:	0000208d 	.word	0x0000208d
    27c0:	00680002 	.word	0x00680002
    27c4:	000020c1 	.word	0x000020c1
    27c8:	00690002 	.word	0x00690002

000027cc <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27d0:	2244      	movs	r2, #68	; 0x44
    27d2:	2125      	movs	r1, #37	; 0x25
    27d4:	4806      	ldr	r0, [pc, #24]	; (27f0 <I2C_FANS_CLOCK_init+0x24>)
    27d6:	4b07      	ldr	r3, [pc, #28]	; (27f4 <I2C_FANS_CLOCK_init+0x28>)
    27d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27da:	224a      	movs	r2, #74	; 0x4a
    27dc:	2103      	movs	r1, #3
    27de:	4804      	ldr	r0, [pc, #16]	; (27f0 <I2C_FANS_CLOCK_init+0x24>)
    27e0:	4b04      	ldr	r3, [pc, #16]	; (27f4 <I2C_FANS_CLOCK_init+0x28>)
    27e2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    27e4:	4804      	ldr	r0, [pc, #16]	; (27f8 <I2C_FANS_CLOCK_init+0x2c>)
    27e6:	4b05      	ldr	r3, [pc, #20]	; (27fc <I2C_FANS_CLOCK_init+0x30>)
    27e8:	4798      	blx	r3
}
    27ea:	bf00      	nop
    27ec:	bd80      	pop	{r7, pc}
    27ee:	bf00      	nop
    27f0:	40001c00 	.word	0x40001c00
    27f4:	0000186d 	.word	0x0000186d
    27f8:	40000800 	.word	0x40000800
    27fc:	00001b53 	.word	0x00001b53

00002800 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2800:	b580      	push	{r7, lr}
    2802:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    2804:	4b04      	ldr	r3, [pc, #16]	; (2818 <I2C_FANS_init+0x18>)
    2806:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2808:	4904      	ldr	r1, [pc, #16]	; (281c <I2C_FANS_init+0x1c>)
    280a:	4805      	ldr	r0, [pc, #20]	; (2820 <I2C_FANS_init+0x20>)
    280c:	4b05      	ldr	r3, [pc, #20]	; (2824 <I2C_FANS_init+0x24>)
    280e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2810:	4b05      	ldr	r3, [pc, #20]	; (2828 <I2C_FANS_init+0x28>)
    2812:	4798      	blx	r3
}
    2814:	bf00      	nop
    2816:	bd80      	pop	{r7, pc}
    2818:	000027cd 	.word	0x000027cd
    281c:	43000c00 	.word	0x43000c00
    2820:	2000dfa8 	.word	0x2000dfa8
    2824:	000039d9 	.word	0x000039d9
    2828:	00002795 	.word	0x00002795

0000282c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    282c:	b580      	push	{r7, lr}
    282e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2830:	4808      	ldr	r0, [pc, #32]	; (2854 <TIMER_USB_init+0x28>)
    2832:	4b09      	ldr	r3, [pc, #36]	; (2858 <TIMER_USB_init+0x2c>)
    2834:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2836:	2243      	movs	r2, #67	; 0x43
    2838:	2109      	movs	r1, #9
    283a:	4808      	ldr	r0, [pc, #32]	; (285c <TIMER_USB_init+0x30>)
    283c:	4b08      	ldr	r3, [pc, #32]	; (2860 <TIMER_USB_init+0x34>)
    283e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2840:	4b08      	ldr	r3, [pc, #32]	; (2864 <TIMER_USB_init+0x38>)
    2842:	4798      	blx	r3
    2844:	4603      	mov	r3, r0
    2846:	461a      	mov	r2, r3
    2848:	4907      	ldr	r1, [pc, #28]	; (2868 <TIMER_USB_init+0x3c>)
    284a:	4808      	ldr	r0, [pc, #32]	; (286c <TIMER_USB_init+0x40>)
    284c:	4b08      	ldr	r3, [pc, #32]	; (2870 <TIMER_USB_init+0x44>)
    284e:	4798      	blx	r3
}
    2850:	bf00      	nop
    2852:	bd80      	pop	{r7, pc}
    2854:	40000800 	.word	0x40000800
    2858:	00001973 	.word	0x00001973
    285c:	40001c00 	.word	0x40001c00
    2860:	0000186d 	.word	0x0000186d
    2864:	0000a02d 	.word	0x0000a02d
    2868:	40003800 	.word	0x40003800
    286c:	2000e0f0 	.word	0x2000e0f0
    2870:	00003f21 	.word	0x00003f21

00002874 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2874:	b580      	push	{r7, lr}
    2876:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2878:	4808      	ldr	r0, [pc, #32]	; (289c <TIMER_ARINC_init+0x28>)
    287a:	4b09      	ldr	r3, [pc, #36]	; (28a0 <TIMER_ARINC_init+0x2c>)
    287c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    287e:	2244      	movs	r2, #68	; 0x44
    2880:	211a      	movs	r1, #26
    2882:	4808      	ldr	r0, [pc, #32]	; (28a4 <TIMER_ARINC_init+0x30>)
    2884:	4b08      	ldr	r3, [pc, #32]	; (28a8 <TIMER_ARINC_init+0x34>)
    2886:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2888:	4b08      	ldr	r3, [pc, #32]	; (28ac <TIMER_ARINC_init+0x38>)
    288a:	4798      	blx	r3
    288c:	4603      	mov	r3, r0
    288e:	461a      	mov	r2, r3
    2890:	4907      	ldr	r1, [pc, #28]	; (28b0 <TIMER_ARINC_init+0x3c>)
    2892:	4808      	ldr	r0, [pc, #32]	; (28b4 <TIMER_ARINC_init+0x40>)
    2894:	4b08      	ldr	r3, [pc, #32]	; (28b8 <TIMER_ARINC_init+0x44>)
    2896:	4798      	blx	r3
}
    2898:	bf00      	nop
    289a:	bd80      	pop	{r7, pc}
    289c:	40000800 	.word	0x40000800
    28a0:	00001a53 	.word	0x00001a53
    28a4:	40001c00 	.word	0x40001c00
    28a8:	0000186d 	.word	0x0000186d
    28ac:	0000a02d 	.word	0x0000a02d
    28b0:	4101a000 	.word	0x4101a000
    28b4:	2000e0d0 	.word	0x2000e0d0
    28b8:	00003f21 	.word	0x00003f21

000028bc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    28bc:	b580      	push	{r7, lr}
    28be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    28c0:	4808      	ldr	r0, [pc, #32]	; (28e4 <TIMER_MAINTENANCE_init+0x28>)
    28c2:	4b09      	ldr	r3, [pc, #36]	; (28e8 <TIMER_MAINTENANCE_init+0x2c>)
    28c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    28c6:	2246      	movs	r2, #70	; 0x46
    28c8:	211e      	movs	r1, #30
    28ca:	4808      	ldr	r0, [pc, #32]	; (28ec <TIMER_MAINTENANCE_init+0x30>)
    28cc:	4b08      	ldr	r3, [pc, #32]	; (28f0 <TIMER_MAINTENANCE_init+0x34>)
    28ce:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    28d0:	4b08      	ldr	r3, [pc, #32]	; (28f4 <TIMER_MAINTENANCE_init+0x38>)
    28d2:	4798      	blx	r3
    28d4:	4603      	mov	r3, r0
    28d6:	461a      	mov	r2, r3
    28d8:	4907      	ldr	r1, [pc, #28]	; (28f8 <TIMER_MAINTENANCE_init+0x3c>)
    28da:	4808      	ldr	r0, [pc, #32]	; (28fc <TIMER_MAINTENANCE_init+0x40>)
    28dc:	4b08      	ldr	r3, [pc, #32]	; (2900 <TIMER_MAINTENANCE_init+0x44>)
    28de:	4798      	blx	r3
}
    28e0:	bf00      	nop
    28e2:	bd80      	pop	{r7, pc}
    28e4:	40000800 	.word	0x40000800
    28e8:	00001a93 	.word	0x00001a93
    28ec:	40001c00 	.word	0x40001c00
    28f0:	0000186d 	.word	0x0000186d
    28f4:	0000a02d 	.word	0x0000a02d
    28f8:	42001400 	.word	0x42001400
    28fc:	2000dfc8 	.word	0x2000dfc8
    2900:	00003f21 	.word	0x00003f21

00002904 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2904:	b580      	push	{r7, lr}
    2906:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2908:	4808      	ldr	r0, [pc, #32]	; (292c <TIMER_INTERFACE_init+0x28>)
    290a:	4b09      	ldr	r3, [pc, #36]	; (2930 <TIMER_INTERFACE_init+0x2c>)
    290c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    290e:	2246      	movs	r2, #70	; 0x46
    2910:	211e      	movs	r1, #30
    2912:	4808      	ldr	r0, [pc, #32]	; (2934 <TIMER_INTERFACE_init+0x30>)
    2914:	4b08      	ldr	r3, [pc, #32]	; (2938 <TIMER_INTERFACE_init+0x34>)
    2916:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2918:	4b08      	ldr	r3, [pc, #32]	; (293c <TIMER_INTERFACE_init+0x38>)
    291a:	4798      	blx	r3
    291c:	4603      	mov	r3, r0
    291e:	461a      	mov	r2, r3
    2920:	4907      	ldr	r1, [pc, #28]	; (2940 <TIMER_INTERFACE_init+0x3c>)
    2922:	4808      	ldr	r0, [pc, #32]	; (2944 <TIMER_INTERFACE_init+0x40>)
    2924:	4b08      	ldr	r3, [pc, #32]	; (2948 <TIMER_INTERFACE_init+0x44>)
    2926:	4798      	blx	r3
}
    2928:	bf00      	nop
    292a:	bd80      	pop	{r7, pc}
    292c:	40000800 	.word	0x40000800
    2930:	00001ab3 	.word	0x00001ab3
    2934:	40001c00 	.word	0x40001c00
    2938:	0000186d 	.word	0x0000186d
    293c:	0000a02d 	.word	0x0000a02d
    2940:	42001800 	.word	0x42001800
    2944:	2000e00c 	.word	0x2000e00c
    2948:	00003f21 	.word	0x00003f21

0000294c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    294c:	b580      	push	{r7, lr}
    294e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2950:	4808      	ldr	r0, [pc, #32]	; (2974 <TIMER_EVENT_init+0x28>)
    2952:	4b09      	ldr	r3, [pc, #36]	; (2978 <TIMER_EVENT_init+0x2c>)
    2954:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2956:	2246      	movs	r2, #70	; 0x46
    2958:	2127      	movs	r1, #39	; 0x27
    295a:	4808      	ldr	r0, [pc, #32]	; (297c <TIMER_EVENT_init+0x30>)
    295c:	4b08      	ldr	r3, [pc, #32]	; (2980 <TIMER_EVENT_init+0x34>)
    295e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2960:	4b08      	ldr	r3, [pc, #32]	; (2984 <TIMER_EVENT_init+0x38>)
    2962:	4798      	blx	r3
    2964:	4603      	mov	r3, r0
    2966:	461a      	mov	r2, r3
    2968:	4907      	ldr	r1, [pc, #28]	; (2988 <TIMER_EVENT_init+0x3c>)
    296a:	4808      	ldr	r0, [pc, #32]	; (298c <TIMER_EVENT_init+0x40>)
    296c:	4b08      	ldr	r3, [pc, #32]	; (2990 <TIMER_EVENT_init+0x44>)
    296e:	4798      	blx	r3
}
    2970:	bf00      	nop
    2972:	bd80      	pop	{r7, pc}
    2974:	40000800 	.word	0x40000800
    2978:	00001b73 	.word	0x00001b73
    297c:	40001c00 	.word	0x40001c00
    2980:	0000186d 	.word	0x0000186d
    2984:	0000a02d 	.word	0x0000a02d
    2988:	43001400 	.word	0x43001400
    298c:	2000dfec 	.word	0x2000dfec
    2990:	00003f21 	.word	0x00003f21

00002994 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2994:	b480      	push	{r7}
    2996:	af00      	add	r7, sp, #0
}
    2998:	bf00      	nop
    299a:	46bd      	mov	sp, r7
    299c:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a0:	4770      	bx	lr
	...

000029a4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    29a8:	4804      	ldr	r0, [pc, #16]	; (29bc <LIVE_PULSE_CLOCK_init+0x18>)
    29aa:	4b05      	ldr	r3, [pc, #20]	; (29c0 <LIVE_PULSE_CLOCK_init+0x1c>)
    29ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    29ae:	2240      	movs	r2, #64	; 0x40
    29b0:	2127      	movs	r1, #39	; 0x27
    29b2:	4804      	ldr	r0, [pc, #16]	; (29c4 <LIVE_PULSE_CLOCK_init+0x20>)
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <LIVE_PULSE_CLOCK_init+0x24>)
    29b6:	4798      	blx	r3
}
    29b8:	bf00      	nop
    29ba:	bd80      	pop	{r7, pc}
    29bc:	40000800 	.word	0x40000800
    29c0:	00001b93 	.word	0x00001b93
    29c4:	40001c00 	.word	0x40001c00
    29c8:	0000186d 	.word	0x0000186d

000029cc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    29cc:	b580      	push	{r7, lr}
    29ce:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    29d0:	4b06      	ldr	r3, [pc, #24]	; (29ec <LIVE_PULSE_init+0x20>)
    29d2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    29d4:	4b06      	ldr	r3, [pc, #24]	; (29f0 <LIVE_PULSE_init+0x24>)
    29d6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    29d8:	4b06      	ldr	r3, [pc, #24]	; (29f4 <LIVE_PULSE_init+0x28>)
    29da:	4798      	blx	r3
    29dc:	4603      	mov	r3, r0
    29de:	461a      	mov	r2, r3
    29e0:	4905      	ldr	r1, [pc, #20]	; (29f8 <LIVE_PULSE_init+0x2c>)
    29e2:	4806      	ldr	r0, [pc, #24]	; (29fc <LIVE_PULSE_init+0x30>)
    29e4:	4b06      	ldr	r3, [pc, #24]	; (2a00 <LIVE_PULSE_init+0x34>)
    29e6:	4798      	blx	r3
}
    29e8:	bf00      	nop
    29ea:	bd80      	pop	{r7, pc}
    29ec:	000029a5 	.word	0x000029a5
    29f0:	00002995 	.word	0x00002995
    29f4:	0000a041 	.word	0x0000a041
    29f8:	43001800 	.word	0x43001800
    29fc:	2000e04c 	.word	0x2000e04c
    2a00:	00003ad5 	.word	0x00003ad5

00002a04 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2a04:	b580      	push	{r7, lr}
    2a06:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2a08:	4804      	ldr	r0, [pc, #16]	; (2a1c <TIMER_HVAC_CLOCK_init+0x18>)
    2a0a:	4b05      	ldr	r3, [pc, #20]	; (2a20 <TIMER_HVAC_CLOCK_init+0x1c>)
    2a0c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a0e:	2244      	movs	r2, #68	; 0x44
    2a10:	2119      	movs	r1, #25
    2a12:	4804      	ldr	r0, [pc, #16]	; (2a24 <TIMER_HVAC_CLOCK_init+0x20>)
    2a14:	4b04      	ldr	r3, [pc, #16]	; (2a28 <TIMER_HVAC_CLOCK_init+0x24>)
    2a16:	4798      	blx	r3
}
    2a18:	bf00      	nop
    2a1a:	bd80      	pop	{r7, pc}
    2a1c:	40000800 	.word	0x40000800
    2a20:	00001a13 	.word	0x00001a13
    2a24:	40001c00 	.word	0x40001c00
    2a28:	0000186d 	.word	0x0000186d

00002a2c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2a30:	4b05      	ldr	r3, [pc, #20]	; (2a48 <TIMER_HVAC_init+0x1c>)
    2a32:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    2a34:	4b05      	ldr	r3, [pc, #20]	; (2a4c <TIMER_HVAC_init+0x20>)
    2a36:	4798      	blx	r3
    2a38:	4603      	mov	r3, r0
    2a3a:	461a      	mov	r2, r3
    2a3c:	4904      	ldr	r1, [pc, #16]	; (2a50 <TIMER_HVAC_init+0x24>)
    2a3e:	4805      	ldr	r0, [pc, #20]	; (2a54 <TIMER_HVAC_init+0x28>)
    2a40:	4b05      	ldr	r3, [pc, #20]	; (2a58 <TIMER_HVAC_init+0x2c>)
    2a42:	4798      	blx	r3
}
    2a44:	bf00      	nop
    2a46:	bd80      	pop	{r7, pc}
    2a48:	00002a05 	.word	0x00002a05
    2a4c:	00009411 	.word	0x00009411
    2a50:	41016000 	.word	0x41016000
    2a54:	2000e110 	.word	0x2000e110
    2a58:	00003f21 	.word	0x00003f21

00002a5c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2a60:	4804      	ldr	r0, [pc, #16]	; (2a74 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    2a62:	4b05      	ldr	r3, [pc, #20]	; (2a78 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2a64:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a66:	2244      	movs	r2, #68	; 0x44
    2a68:	2119      	movs	r1, #25
    2a6a:	4804      	ldr	r0, [pc, #16]	; (2a7c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2a6c:	4b04      	ldr	r3, [pc, #16]	; (2a80 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    2a6e:	4798      	blx	r3
}
    2a70:	bf00      	nop
    2a72:	bd80      	pop	{r7, pc}
    2a74:	40000800 	.word	0x40000800
    2a78:	00001a33 	.word	0x00001a33
    2a7c:	40001c00 	.word	0x40001c00
    2a80:	0000186d 	.word	0x0000186d

00002a84 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2a84:	b580      	push	{r7, lr}
    2a86:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2a88:	4b05      	ldr	r3, [pc, #20]	; (2aa0 <TIMER_TEMPERATURES_init+0x1c>)
    2a8a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2a8c:	4b05      	ldr	r3, [pc, #20]	; (2aa4 <TIMER_TEMPERATURES_init+0x20>)
    2a8e:	4798      	blx	r3
    2a90:	4603      	mov	r3, r0
    2a92:	461a      	mov	r2, r3
    2a94:	4904      	ldr	r1, [pc, #16]	; (2aa8 <TIMER_TEMPERATURES_init+0x24>)
    2a96:	4805      	ldr	r0, [pc, #20]	; (2aac <TIMER_TEMPERATURES_init+0x28>)
    2a98:	4b05      	ldr	r3, [pc, #20]	; (2ab0 <TIMER_TEMPERATURES_init+0x2c>)
    2a9a:	4798      	blx	r3
}
    2a9c:	bf00      	nop
    2a9e:	bd80      	pop	{r7, pc}
    2aa0:	00002a5d 	.word	0x00002a5d
    2aa4:	00009411 	.word	0x00009411
    2aa8:	41018000 	.word	0x41018000
    2aac:	2000df58 	.word	0x2000df58
    2ab0:	00003f21 	.word	0x00003f21

00002ab4 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2ab8:	4804      	ldr	r0, [pc, #16]	; (2acc <TIMER_CCU_CLOCK_init+0x18>)
    2aba:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <TIMER_CCU_CLOCK_init+0x1c>)
    2abc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2abe:	2240      	movs	r2, #64	; 0x40
    2ac0:	211d      	movs	r1, #29
    2ac2:	4804      	ldr	r0, [pc, #16]	; (2ad4 <TIMER_CCU_CLOCK_init+0x20>)
    2ac4:	4b04      	ldr	r3, [pc, #16]	; (2ad8 <TIMER_CCU_CLOCK_init+0x24>)
    2ac6:	4798      	blx	r3
}
    2ac8:	bf00      	nop
    2aca:	bd80      	pop	{r7, pc}
    2acc:	40000800 	.word	0x40000800
    2ad0:	00001a73 	.word	0x00001a73
    2ad4:	40001c00 	.word	0x40001c00
    2ad8:	0000186d 	.word	0x0000186d

00002adc <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2adc:	b580      	push	{r7, lr}
    2ade:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2ae0:	4b05      	ldr	r3, [pc, #20]	; (2af8 <TIMER_CCU_init+0x1c>)
    2ae2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    2ae4:	4b05      	ldr	r3, [pc, #20]	; (2afc <TIMER_CCU_init+0x20>)
    2ae6:	4798      	blx	r3
    2ae8:	4603      	mov	r3, r0
    2aea:	461a      	mov	r2, r3
    2aec:	4904      	ldr	r1, [pc, #16]	; (2b00 <TIMER_CCU_init+0x24>)
    2aee:	4805      	ldr	r0, [pc, #20]	; (2b04 <TIMER_CCU_init+0x28>)
    2af0:	4b05      	ldr	r3, [pc, #20]	; (2b08 <TIMER_CCU_init+0x2c>)
    2af2:	4798      	blx	r3
}
    2af4:	bf00      	nop
    2af6:	bd80      	pop	{r7, pc}
    2af8:	00002ab5 	.word	0x00002ab5
    2afc:	00009411 	.word	0x00009411
    2b00:	42000c00 	.word	0x42000c00
    2b04:	2000e068 	.word	0x2000e068
    2b08:	00003f21 	.word	0x00003f21

00002b0c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2b10:	2102      	movs	r1, #2
    2b12:	2018      	movs	r0, #24
    2b14:	4b0f      	ldr	r3, [pc, #60]	; (2b54 <CDCUSB_PORT_init+0x48>)
    2b16:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2b18:	2100      	movs	r1, #0
    2b1a:	2018      	movs	r0, #24
    2b1c:	4b0e      	ldr	r3, [pc, #56]	; (2b58 <CDCUSB_PORT_init+0x4c>)
    2b1e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2b20:	2100      	movs	r1, #0
    2b22:	2018      	movs	r0, #24
    2b24:	4b0d      	ldr	r3, [pc, #52]	; (2b5c <CDCUSB_PORT_init+0x50>)
    2b26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2b28:	490d      	ldr	r1, [pc, #52]	; (2b60 <CDCUSB_PORT_init+0x54>)
    2b2a:	2018      	movs	r0, #24
    2b2c:	4b0d      	ldr	r3, [pc, #52]	; (2b64 <CDCUSB_PORT_init+0x58>)
    2b2e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2b30:	2102      	movs	r1, #2
    2b32:	2019      	movs	r0, #25
    2b34:	4b07      	ldr	r3, [pc, #28]	; (2b54 <CDCUSB_PORT_init+0x48>)
    2b36:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2b38:	2100      	movs	r1, #0
    2b3a:	2019      	movs	r0, #25
    2b3c:	4b06      	ldr	r3, [pc, #24]	; (2b58 <CDCUSB_PORT_init+0x4c>)
    2b3e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2b40:	2100      	movs	r1, #0
    2b42:	2019      	movs	r0, #25
    2b44:	4b05      	ldr	r3, [pc, #20]	; (2b5c <CDCUSB_PORT_init+0x50>)
    2b46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2b48:	4907      	ldr	r1, [pc, #28]	; (2b68 <CDCUSB_PORT_init+0x5c>)
    2b4a:	2019      	movs	r0, #25
    2b4c:	4b05      	ldr	r3, [pc, #20]	; (2b64 <CDCUSB_PORT_init+0x58>)
    2b4e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2b50:	bf00      	nop
    2b52:	bd80      	pop	{r7, pc}
    2b54:	000020e1 	.word	0x000020e1
    2b58:	00002119 	.word	0x00002119
    2b5c:	0000208d 	.word	0x0000208d
    2b60:	00180007 	.word	0x00180007
    2b64:	000020c1 	.word	0x000020c1
    2b68:	00190007 	.word	0x00190007

00002b6c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2b70:	2242      	movs	r2, #66	; 0x42
    2b72:	210a      	movs	r1, #10
    2b74:	4805      	ldr	r0, [pc, #20]	; (2b8c <CDCUSB_CLOCK_init+0x20>)
    2b76:	4b06      	ldr	r3, [pc, #24]	; (2b90 <CDCUSB_CLOCK_init+0x24>)
    2b78:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2b7a:	4806      	ldr	r0, [pc, #24]	; (2b94 <CDCUSB_CLOCK_init+0x28>)
    2b7c:	4b06      	ldr	r3, [pc, #24]	; (2b98 <CDCUSB_CLOCK_init+0x2c>)
    2b7e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2b80:	4804      	ldr	r0, [pc, #16]	; (2b94 <CDCUSB_CLOCK_init+0x28>)
    2b82:	4b06      	ldr	r3, [pc, #24]	; (2b9c <CDCUSB_CLOCK_init+0x30>)
    2b84:	4798      	blx	r3
}
    2b86:	bf00      	nop
    2b88:	bd80      	pop	{r7, pc}
    2b8a:	bf00      	nop
    2b8c:	40001c00 	.word	0x40001c00
    2b90:	0000186d 	.word	0x0000186d
    2b94:	40000800 	.word	0x40000800
    2b98:	00001893 	.word	0x00001893
    2b9c:	00001993 	.word	0x00001993

00002ba0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2ba0:	b580      	push	{r7, lr}
    2ba2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2ba4:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <CDCUSB_init+0x14>)
    2ba6:	4798      	blx	r3
	usb_d_init();
    2ba8:	4b03      	ldr	r3, [pc, #12]	; (2bb8 <CDCUSB_init+0x18>)
    2baa:	4798      	blx	r3
	CDCUSB_PORT_init();
    2bac:	4b03      	ldr	r3, [pc, #12]	; (2bbc <CDCUSB_init+0x1c>)
    2bae:	4798      	blx	r3
}
    2bb0:	bf00      	nop
    2bb2:	bd80      	pop	{r7, pc}
    2bb4:	00002b6d 	.word	0x00002b6d
    2bb8:	0000477d 	.word	0x0000477d
    2bbc:	00002b0d 	.word	0x00002b0d

00002bc0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2bc0:	b580      	push	{r7, lr}
    2bc2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2bc4:	4802      	ldr	r0, [pc, #8]	; (2bd0 <WATCHDOG_CLOCK_init+0x10>)
    2bc6:	4b03      	ldr	r3, [pc, #12]	; (2bd4 <WATCHDOG_CLOCK_init+0x14>)
    2bc8:	4798      	blx	r3
}
    2bca:	bf00      	nop
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	bf00      	nop
    2bd0:	40000800 	.word	0x40000800
    2bd4:	00001913 	.word	0x00001913

00002bd8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2bdc:	4b03      	ldr	r3, [pc, #12]	; (2bec <WATCHDOG_init+0x14>)
    2bde:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2be0:	4903      	ldr	r1, [pc, #12]	; (2bf0 <WATCHDOG_init+0x18>)
    2be2:	4804      	ldr	r0, [pc, #16]	; (2bf4 <WATCHDOG_init+0x1c>)
    2be4:	4b04      	ldr	r3, [pc, #16]	; (2bf8 <WATCHDOG_init+0x20>)
    2be6:	4798      	blx	r3
}
    2be8:	bf00      	nop
    2bea:	bd80      	pop	{r7, pc}
    2bec:	00002bc1 	.word	0x00002bc1
    2bf0:	40002000 	.word	0x40002000
    2bf4:	2000e150 	.word	0x2000e150
    2bf8:	00002161 	.word	0x00002161

00002bfc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2c00:	4904      	ldr	r1, [pc, #16]	; (2c14 <CAN_CCU_PORT_init+0x18>)
    2c02:	202d      	movs	r0, #45	; 0x2d
    2c04:	4b04      	ldr	r3, [pc, #16]	; (2c18 <CAN_CCU_PORT_init+0x1c>)
    2c06:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2c08:	4904      	ldr	r1, [pc, #16]	; (2c1c <CAN_CCU_PORT_init+0x20>)
    2c0a:	202c      	movs	r0, #44	; 0x2c
    2c0c:	4b02      	ldr	r3, [pc, #8]	; (2c18 <CAN_CCU_PORT_init+0x1c>)
    2c0e:	4798      	blx	r3
}
    2c10:	bf00      	nop
    2c12:	bd80      	pop	{r7, pc}
    2c14:	002d0007 	.word	0x002d0007
    2c18:	000020c1 	.word	0x000020c1
    2c1c:	002c0007 	.word	0x002c0007

00002c20 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2c20:	b580      	push	{r7, lr}
    2c22:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2c24:	4807      	ldr	r0, [pc, #28]	; (2c44 <CAN_CCU_init+0x24>)
    2c26:	4b08      	ldr	r3, [pc, #32]	; (2c48 <CAN_CCU_init+0x28>)
    2c28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2c2a:	2249      	movs	r2, #73	; 0x49
    2c2c:	211c      	movs	r1, #28
    2c2e:	4807      	ldr	r0, [pc, #28]	; (2c4c <CAN_CCU_init+0x2c>)
    2c30:	4b07      	ldr	r3, [pc, #28]	; (2c50 <CAN_CCU_init+0x30>)
    2c32:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2c34:	4907      	ldr	r1, [pc, #28]	; (2c54 <CAN_CCU_init+0x34>)
    2c36:	4808      	ldr	r0, [pc, #32]	; (2c58 <CAN_CCU_init+0x38>)
    2c38:	4b08      	ldr	r3, [pc, #32]	; (2c5c <CAN_CCU_init+0x3c>)
    2c3a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2c3c:	4b08      	ldr	r3, [pc, #32]	; (2c60 <CAN_CCU_init+0x40>)
    2c3e:	4798      	blx	r3
}
    2c40:	bf00      	nop
    2c42:	bd80      	pop	{r7, pc}
    2c44:	40000800 	.word	0x40000800
    2c48:	000018d3 	.word	0x000018d3
    2c4c:	40001c00 	.word	0x40001c00
    2c50:	0000186d 	.word	0x0000186d
    2c54:	42000400 	.word	0x42000400
    2c58:	2000e0a8 	.word	0x2000e0a8
    2c5c:	000033c1 	.word	0x000033c1
    2c60:	00002bfd 	.word	0x00002bfd

00002c64 <system_init>:

void system_init(void)
{
    2c64:	b580      	push	{r7, lr}
    2c66:	af00      	add	r7, sp, #0
	init_mcu();
    2c68:	4b6c      	ldr	r3, [pc, #432]	; (2e1c <system_init+0x1b8>)
    2c6a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    2c6c:	2100      	movs	r1, #0
    2c6e:	2007      	movs	r0, #7
    2c70:	4b6b      	ldr	r3, [pc, #428]	; (2e20 <system_init+0x1bc>)
    2c72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2c74:	2102      	movs	r1, #2
    2c76:	2007      	movs	r0, #7
    2c78:	4b6a      	ldr	r3, [pc, #424]	; (2e24 <system_init+0x1c0>)
    2c7a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2c7c:	f04f 31ff 	mov.w	r1, #4294967295
    2c80:	2007      	movs	r0, #7
    2c82:	4b69      	ldr	r3, [pc, #420]	; (2e28 <system_init+0x1c4>)
    2c84:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2c86:	2101      	movs	r1, #1
    2c88:	200f      	movs	r0, #15
    2c8a:	4b65      	ldr	r3, [pc, #404]	; (2e20 <system_init+0x1bc>)
    2c8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2c8e:	2102      	movs	r1, #2
    2c90:	200f      	movs	r0, #15
    2c92:	4b64      	ldr	r3, [pc, #400]	; (2e24 <system_init+0x1c0>)
    2c94:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2c96:	f04f 31ff 	mov.w	r1, #4294967295
    2c9a:	200f      	movs	r0, #15
    2c9c:	4b62      	ldr	r3, [pc, #392]	; (2e28 <system_init+0x1c4>)
    2c9e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2ca0:	2101      	movs	r1, #1
    2ca2:	2013      	movs	r0, #19
    2ca4:	4b5e      	ldr	r3, [pc, #376]	; (2e20 <system_init+0x1bc>)
    2ca6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2ca8:	2102      	movs	r1, #2
    2caa:	2013      	movs	r0, #19
    2cac:	4b5d      	ldr	r3, [pc, #372]	; (2e24 <system_init+0x1c0>)
    2cae:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2cb0:	f04f 31ff 	mov.w	r1, #4294967295
    2cb4:	2013      	movs	r0, #19
    2cb6:	4b5c      	ldr	r3, [pc, #368]	; (2e28 <system_init+0x1c4>)
    2cb8:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2cba:	2101      	movs	r1, #1
    2cbc:	201b      	movs	r0, #27
    2cbe:	4b58      	ldr	r3, [pc, #352]	; (2e20 <system_init+0x1bc>)
    2cc0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2cc2:	2102      	movs	r1, #2
    2cc4:	201b      	movs	r0, #27
    2cc6:	4b57      	ldr	r3, [pc, #348]	; (2e24 <system_init+0x1c0>)
    2cc8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2cca:	f04f 31ff 	mov.w	r1, #4294967295
    2cce:	201b      	movs	r0, #27
    2cd0:	4b55      	ldr	r3, [pc, #340]	; (2e28 <system_init+0x1c4>)
    2cd2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2cd4:	2101      	movs	r1, #1
    2cd6:	2027      	movs	r0, #39	; 0x27
    2cd8:	4b51      	ldr	r3, [pc, #324]	; (2e20 <system_init+0x1bc>)
    2cda:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2cdc:	2102      	movs	r1, #2
    2cde:	2027      	movs	r0, #39	; 0x27
    2ce0:	4b50      	ldr	r3, [pc, #320]	; (2e24 <system_init+0x1c0>)
    2ce2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2ce4:	f04f 31ff 	mov.w	r1, #4294967295
    2ce8:	2027      	movs	r0, #39	; 0x27
    2cea:	4b4f      	ldr	r3, [pc, #316]	; (2e28 <system_init+0x1c4>)
    2cec:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2cee:	2101      	movs	r1, #1
    2cf0:	203d      	movs	r0, #61	; 0x3d
    2cf2:	4b4b      	ldr	r3, [pc, #300]	; (2e20 <system_init+0x1bc>)
    2cf4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2cf6:	2102      	movs	r1, #2
    2cf8:	203d      	movs	r0, #61	; 0x3d
    2cfa:	4b4a      	ldr	r3, [pc, #296]	; (2e24 <system_init+0x1c0>)
    2cfc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2cfe:	f04f 31ff 	mov.w	r1, #4294967295
    2d02:	203d      	movs	r0, #61	; 0x3d
    2d04:	4b48      	ldr	r3, [pc, #288]	; (2e28 <system_init+0x1c4>)
    2d06:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2d08:	2101      	movs	r1, #1
    2d0a:	203f      	movs	r0, #63	; 0x3f
    2d0c:	4b45      	ldr	r3, [pc, #276]	; (2e24 <system_init+0x1c0>)
    2d0e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2d10:	2101      	movs	r1, #1
    2d12:	203f      	movs	r0, #63	; 0x3f
    2d14:	4b45      	ldr	r3, [pc, #276]	; (2e2c <system_init+0x1c8>)
    2d16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2d18:	f04f 31ff 	mov.w	r1, #4294967295
    2d1c:	203f      	movs	r0, #63	; 0x3f
    2d1e:	4b42      	ldr	r3, [pc, #264]	; (2e28 <system_init+0x1c4>)
    2d20:	4798      	blx	r3

	// GPIO on PC02

	gpio_set_pin_level(CPU_RUNNING,
    2d22:	2100      	movs	r1, #0
    2d24:	2042      	movs	r0, #66	; 0x42
    2d26:	4b3e      	ldr	r3, [pc, #248]	; (2e20 <system_init+0x1bc>)
    2d28:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CPU_RUNNING, GPIO_DIRECTION_OUT);
    2d2a:	2102      	movs	r1, #2
    2d2c:	2042      	movs	r0, #66	; 0x42
    2d2e:	4b3d      	ldr	r3, [pc, #244]	; (2e24 <system_init+0x1c0>)
    2d30:	4798      	blx	r3

	gpio_set_pin_function(CPU_RUNNING, GPIO_PIN_FUNCTION_OFF);
    2d32:	f04f 31ff 	mov.w	r1, #4294967295
    2d36:	2042      	movs	r0, #66	; 0x42
    2d38:	4b3b      	ldr	r3, [pc, #236]	; (2e28 <system_init+0x1c4>)
    2d3a:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2d3c:	2100      	movs	r1, #0
    2d3e:	204d      	movs	r0, #77	; 0x4d
    2d40:	4b37      	ldr	r3, [pc, #220]	; (2e20 <system_init+0x1bc>)
    2d42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2d44:	2102      	movs	r1, #2
    2d46:	204d      	movs	r0, #77	; 0x4d
    2d48:	4b36      	ldr	r3, [pc, #216]	; (2e24 <system_init+0x1c0>)
    2d4a:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2d4c:	f04f 31ff 	mov.w	r1, #4294967295
    2d50:	204d      	movs	r0, #77	; 0x4d
    2d52:	4b35      	ldr	r3, [pc, #212]	; (2e28 <system_init+0x1c4>)
    2d54:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2d56:	2101      	movs	r1, #1
    2d58:	204e      	movs	r0, #78	; 0x4e
    2d5a:	4b31      	ldr	r3, [pc, #196]	; (2e20 <system_init+0x1bc>)
    2d5c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2d5e:	2102      	movs	r1, #2
    2d60:	204e      	movs	r0, #78	; 0x4e
    2d62:	4b30      	ldr	r3, [pc, #192]	; (2e24 <system_init+0x1c0>)
    2d64:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2d66:	f04f 31ff 	mov.w	r1, #4294967295
    2d6a:	204e      	movs	r0, #78	; 0x4e
    2d6c:	4b2e      	ldr	r3, [pc, #184]	; (2e28 <system_init+0x1c4>)
    2d6e:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2d70:	2100      	movs	r1, #0
    2d72:	204f      	movs	r0, #79	; 0x4f
    2d74:	4b2a      	ldr	r3, [pc, #168]	; (2e20 <system_init+0x1bc>)
    2d76:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2d78:	2102      	movs	r1, #2
    2d7a:	204f      	movs	r0, #79	; 0x4f
    2d7c:	4b29      	ldr	r3, [pc, #164]	; (2e24 <system_init+0x1c0>)
    2d7e:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2d80:	f04f 31ff 	mov.w	r1, #4294967295
    2d84:	204f      	movs	r0, #79	; 0x4f
    2d86:	4b28      	ldr	r3, [pc, #160]	; (2e28 <system_init+0x1c4>)
    2d88:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2d8a:	2100      	movs	r1, #0
    2d8c:	2052      	movs	r0, #82	; 0x52
    2d8e:	4b24      	ldr	r3, [pc, #144]	; (2e20 <system_init+0x1bc>)
    2d90:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2d92:	2102      	movs	r1, #2
    2d94:	2052      	movs	r0, #82	; 0x52
    2d96:	4b23      	ldr	r3, [pc, #140]	; (2e24 <system_init+0x1c0>)
    2d98:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2d9a:	f04f 31ff 	mov.w	r1, #4294967295
    2d9e:	2052      	movs	r0, #82	; 0x52
    2da0:	4b21      	ldr	r3, [pc, #132]	; (2e28 <system_init+0x1c4>)
    2da2:	4798      	blx	r3

	// GPIO on PC19

	gpio_set_pin_level(USB_ID,
    2da4:	2100      	movs	r1, #0
    2da6:	2053      	movs	r0, #83	; 0x53
    2da8:	4b1d      	ldr	r3, [pc, #116]	; (2e20 <system_init+0x1bc>)
    2daa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(USB_ID, GPIO_DIRECTION_OUT);
    2dac:	2102      	movs	r1, #2
    2dae:	2053      	movs	r0, #83	; 0x53
    2db0:	4b1c      	ldr	r3, [pc, #112]	; (2e24 <system_init+0x1c0>)
    2db2:	4798      	blx	r3

	gpio_set_pin_function(USB_ID, GPIO_PIN_FUNCTION_OFF);
    2db4:	f04f 31ff 	mov.w	r1, #4294967295
    2db8:	2053      	movs	r0, #83	; 0x53
    2dba:	4b1b      	ldr	r3, [pc, #108]	; (2e28 <system_init+0x1c4>)
    2dbc:	4798      	blx	r3

	CRC_CALC_init();
    2dbe:	4b1c      	ldr	r3, [pc, #112]	; (2e30 <system_init+0x1cc>)
    2dc0:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2dc2:	4b1c      	ldr	r3, [pc, #112]	; (2e34 <system_init+0x1d0>)
    2dc4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2dc6:	4b1c      	ldr	r3, [pc, #112]	; (2e38 <system_init+0x1d4>)
    2dc8:	4798      	blx	r3

	QSPI_N25Q256_init();
    2dca:	4b1c      	ldr	r3, [pc, #112]	; (2e3c <system_init+0x1d8>)
    2dcc:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2dce:	4b1c      	ldr	r3, [pc, #112]	; (2e40 <system_init+0x1dc>)
    2dd0:	4798      	blx	r3

	I2C_HEATERS_init();
    2dd2:	4b1c      	ldr	r3, [pc, #112]	; (2e44 <system_init+0x1e0>)
    2dd4:	4798      	blx	r3

	SPI_TEMP_init();
    2dd6:	4b1c      	ldr	r3, [pc, #112]	; (2e48 <system_init+0x1e4>)
    2dd8:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2dda:	4b1c      	ldr	r3, [pc, #112]	; (2e4c <system_init+0x1e8>)
    2ddc:	4798      	blx	r3

	SPI_HI3593_init();
    2dde:	4b1c      	ldr	r3, [pc, #112]	; (2e50 <system_init+0x1ec>)
    2de0:	4798      	blx	r3

	I2C_FANS_init();
    2de2:	4b1c      	ldr	r3, [pc, #112]	; (2e54 <system_init+0x1f0>)
    2de4:	4798      	blx	r3

	TIMER_USB_init();
    2de6:	4b1c      	ldr	r3, [pc, #112]	; (2e58 <system_init+0x1f4>)
    2de8:	4798      	blx	r3
	TIMER_ARINC_init();
    2dea:	4b1c      	ldr	r3, [pc, #112]	; (2e5c <system_init+0x1f8>)
    2dec:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2dee:	4b1c      	ldr	r3, [pc, #112]	; (2e60 <system_init+0x1fc>)
    2df0:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2df2:	4b1c      	ldr	r3, [pc, #112]	; (2e64 <system_init+0x200>)
    2df4:	4798      	blx	r3
	TIMER_EVENT_init();
    2df6:	4b1c      	ldr	r3, [pc, #112]	; (2e68 <system_init+0x204>)
    2df8:	4798      	blx	r3
	LIVE_PULSE_init();
    2dfa:	4b1c      	ldr	r3, [pc, #112]	; (2e6c <system_init+0x208>)
    2dfc:	4798      	blx	r3

	TIMER_HVAC_init();
    2dfe:	4b1c      	ldr	r3, [pc, #112]	; (2e70 <system_init+0x20c>)
    2e00:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2e02:	4b1c      	ldr	r3, [pc, #112]	; (2e74 <system_init+0x210>)
    2e04:	4798      	blx	r3

	TIMER_CCU_init();
    2e06:	4b1c      	ldr	r3, [pc, #112]	; (2e78 <system_init+0x214>)
    2e08:	4798      	blx	r3

	CDCUSB_init();
    2e0a:	4b1c      	ldr	r3, [pc, #112]	; (2e7c <system_init+0x218>)
    2e0c:	4798      	blx	r3

	WATCHDOG_init();
    2e0e:	4b1c      	ldr	r3, [pc, #112]	; (2e80 <system_init+0x21c>)
    2e10:	4798      	blx	r3
	CAN_CCU_init();
    2e12:	4b1c      	ldr	r3, [pc, #112]	; (2e84 <system_init+0x220>)
    2e14:	4798      	blx	r3
}
    2e16:	bf00      	nop
    2e18:	bd80      	pop	{r7, pc}
    2e1a:	bf00      	nop
    2e1c:	00002151 	.word	0x00002151
    2e20:	00002119 	.word	0x00002119
    2e24:	000020e1 	.word	0x000020e1
    2e28:	000020c1 	.word	0x000020c1
    2e2c:	0000208d 	.word	0x0000208d
    2e30:	000021b1 	.word	0x000021b1
    2e34:	000021dd 	.word	0x000021dd
    2e38:	0000231d 	.word	0x0000231d
    2e3c:	00002465 	.word	0x00002465
    2e40:	000024a9 	.word	0x000024a9
    2e44:	00002539 	.word	0x00002539
    2e48:	00002605 	.word	0x00002605
    2e4c:	0000269d 	.word	0x0000269d
    2e50:	00002769 	.word	0x00002769
    2e54:	00002801 	.word	0x00002801
    2e58:	0000282d 	.word	0x0000282d
    2e5c:	00002875 	.word	0x00002875
    2e60:	000028bd 	.word	0x000028bd
    2e64:	00002905 	.word	0x00002905
    2e68:	0000294d 	.word	0x0000294d
    2e6c:	000029cd 	.word	0x000029cd
    2e70:	00002a2d 	.word	0x00002a2d
    2e74:	00002a85 	.word	0x00002a85
    2e78:	00002add 	.word	0x00002add
    2e7c:	00002ba1 	.word	0x00002ba1
    2e80:	00002bd9 	.word	0x00002bd9
    2e84:	00002c21 	.word	0x00002c21

00002e88 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    2e88:	b480      	push	{r7}
    2e8a:	b083      	sub	sp, #12
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	4603      	mov	r3, r0
    2e90:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    2e92:	88fb      	ldrh	r3, [r7, #6]
    2e94:	f003 0303 	and.w	r3, r3, #3
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d001      	beq.n	2ea0 <leap_year+0x18>
		return false;
    2e9c:	2300      	movs	r3, #0
    2e9e:	e000      	b.n	2ea2 <leap_year+0x1a>
	} else {
		return true;
    2ea0:	2301      	movs	r3, #1
	}
}
    2ea2:	4618      	mov	r0, r3
    2ea4:	370c      	adds	r7, #12
    2ea6:	46bd      	mov	sp, r7
    2ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eac:	4770      	bx	lr
	...

00002eb0 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b084      	sub	sp, #16
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	6078      	str	r0, [r7, #4]
    2eb8:	460b      	mov	r3, r1
    2eba:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2ebc:	2300      	movs	r3, #0
    2ebe:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	b29b      	uxth	r3, r3
    2ec4:	4618      	mov	r0, r3
    2ec6:	4b2f      	ldr	r3, [pc, #188]	; (2f84 <get_secs_in_month+0xd4>)
    2ec8:	4798      	blx	r3
    2eca:	4603      	mov	r3, r0
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d028      	beq.n	2f22 <get_secs_in_month+0x72>
		switch (month) {
    2ed0:	78fb      	ldrb	r3, [r7, #3]
    2ed2:	3b01      	subs	r3, #1
    2ed4:	2b0b      	cmp	r3, #11
    2ed6:	d84c      	bhi.n	2f72 <get_secs_in_month+0xc2>
    2ed8:	a201      	add	r2, pc, #4	; (adr r2, 2ee0 <get_secs_in_month+0x30>)
    2eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2ede:	bf00      	nop
    2ee0:	00002f11 	.word	0x00002f11
    2ee4:	00002f17 	.word	0x00002f17
    2ee8:	00002f11 	.word	0x00002f11
    2eec:	00002f1d 	.word	0x00002f1d
    2ef0:	00002f11 	.word	0x00002f11
    2ef4:	00002f1d 	.word	0x00002f1d
    2ef8:	00002f11 	.word	0x00002f11
    2efc:	00002f11 	.word	0x00002f11
    2f00:	00002f1d 	.word	0x00002f1d
    2f04:	00002f11 	.word	0x00002f11
    2f08:	00002f1d 	.word	0x00002f1d
    2f0c:	00002f11 	.word	0x00002f11
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2f10:	4b1d      	ldr	r3, [pc, #116]	; (2f88 <get_secs_in_month+0xd8>)
    2f12:	60fb      	str	r3, [r7, #12]
			break;
    2f14:	e030      	b.n	2f78 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2f16:	4b1d      	ldr	r3, [pc, #116]	; (2f8c <get_secs_in_month+0xdc>)
    2f18:	60fb      	str	r3, [r7, #12]
			break;
    2f1a:	e02d      	b.n	2f78 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2f1c:	4b1c      	ldr	r3, [pc, #112]	; (2f90 <get_secs_in_month+0xe0>)
    2f1e:	60fb      	str	r3, [r7, #12]
			break;
    2f20:	e02a      	b.n	2f78 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    2f22:	78fb      	ldrb	r3, [r7, #3]
    2f24:	3b01      	subs	r3, #1
    2f26:	2b0b      	cmp	r3, #11
    2f28:	d825      	bhi.n	2f76 <get_secs_in_month+0xc6>
    2f2a:	a201      	add	r2, pc, #4	; (adr r2, 2f30 <get_secs_in_month+0x80>)
    2f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2f30:	00002f61 	.word	0x00002f61
    2f34:	00002f67 	.word	0x00002f67
    2f38:	00002f61 	.word	0x00002f61
    2f3c:	00002f6d 	.word	0x00002f6d
    2f40:	00002f61 	.word	0x00002f61
    2f44:	00002f6d 	.word	0x00002f6d
    2f48:	00002f61 	.word	0x00002f61
    2f4c:	00002f61 	.word	0x00002f61
    2f50:	00002f6d 	.word	0x00002f6d
    2f54:	00002f61 	.word	0x00002f61
    2f58:	00002f6d 	.word	0x00002f6d
    2f5c:	00002f61 	.word	0x00002f61
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2f60:	4b09      	ldr	r3, [pc, #36]	; (2f88 <get_secs_in_month+0xd8>)
    2f62:	60fb      	str	r3, [r7, #12]
			break;
    2f64:	e008      	b.n	2f78 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2f66:	4b0b      	ldr	r3, [pc, #44]	; (2f94 <get_secs_in_month+0xe4>)
    2f68:	60fb      	str	r3, [r7, #12]
			break;
    2f6a:	e005      	b.n	2f78 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2f6c:	4b08      	ldr	r3, [pc, #32]	; (2f90 <get_secs_in_month+0xe0>)
    2f6e:	60fb      	str	r3, [r7, #12]
			break;
    2f70:	e002      	b.n	2f78 <get_secs_in_month+0xc8>
			break;
    2f72:	bf00      	nop
    2f74:	e000      	b.n	2f78 <get_secs_in_month+0xc8>
		default:
			break;
    2f76:	bf00      	nop
		}
	}

	return sec_in_month;
    2f78:	68fb      	ldr	r3, [r7, #12]
}
    2f7a:	4618      	mov	r0, r3
    2f7c:	3710      	adds	r7, #16
    2f7e:	46bd      	mov	sp, r7
    2f80:	bd80      	pop	{r7, pc}
    2f82:	bf00      	nop
    2f84:	00002e89 	.word	0x00002e89
    2f88:	0028de80 	.word	0x0028de80
    2f8c:	00263b80 	.word	0x00263b80
    2f90:	00278d00 	.word	0x00278d00
    2f94:	0024ea00 	.word	0x0024ea00

00002f98 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	b08a      	sub	sp, #40	; 0x28
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	60f8      	str	r0, [r7, #12]
    2fa0:	60b9      	str	r1, [r7, #8]
    2fa2:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2fa4:	68fb      	ldr	r3, [r7, #12]
    2fa6:	699b      	ldr	r3, [r3, #24]
    2fa8:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2faa:	2301      	movs	r3, #1
    2fac:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2fae:	2301      	movs	r3, #1
    2fb0:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    2fb2:	2300      	movs	r3, #0
    2fb4:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    2fb6:	2300      	movs	r3, #0
    2fb8:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2fba:	68bb      	ldr	r3, [r7, #8]
    2fbc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2fbe:	6a3b      	ldr	r3, [r7, #32]
    2fc0:	b29b      	uxth	r3, r3
    2fc2:	4618      	mov	r0, r3
    2fc4:	4b32      	ldr	r3, [pc, #200]	; (3090 <convert_timestamp_to_datetime+0xf8>)
    2fc6:	4798      	blx	r3
    2fc8:	4603      	mov	r3, r0
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d001      	beq.n	2fd2 <convert_timestamp_to_datetime+0x3a>
    2fce:	4b31      	ldr	r3, [pc, #196]	; (3094 <convert_timestamp_to_datetime+0xfc>)
    2fd0:	e000      	b.n	2fd4 <convert_timestamp_to_datetime+0x3c>
    2fd2:	4b31      	ldr	r3, [pc, #196]	; (3098 <convert_timestamp_to_datetime+0x100>)
    2fd4:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    2fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2fd8:	69bb      	ldr	r3, [r7, #24]
    2fda:	429a      	cmp	r2, r3
    2fdc:	d307      	bcc.n	2fee <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2fe0:	69bb      	ldr	r3, [r7, #24]
    2fe2:	1ad3      	subs	r3, r2, r3
    2fe4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    2fe6:	6a3b      	ldr	r3, [r7, #32]
    2fe8:	3301      	adds	r3, #1
    2fea:	623b      	str	r3, [r7, #32]
    2fec:	e7e7      	b.n	2fbe <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2fee:	7ffb      	ldrb	r3, [r7, #31]
    2ff0:	4619      	mov	r1, r3
    2ff2:	6a38      	ldr	r0, [r7, #32]
    2ff4:	4b29      	ldr	r3, [pc, #164]	; (309c <convert_timestamp_to_datetime+0x104>)
    2ff6:	4798      	blx	r3
    2ff8:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2ffc:	697b      	ldr	r3, [r7, #20]
    2ffe:	429a      	cmp	r2, r3
    3000:	d307      	bcc.n	3012 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    3002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3004:	697b      	ldr	r3, [r7, #20]
    3006:	1ad3      	subs	r3, r2, r3
    3008:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    300a:	7ffb      	ldrb	r3, [r7, #31]
    300c:	3301      	adds	r3, #1
    300e:	77fb      	strb	r3, [r7, #31]
    3010:	e7ed      	b.n	2fee <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    3012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3014:	4a22      	ldr	r2, [pc, #136]	; (30a0 <convert_timestamp_to_datetime+0x108>)
    3016:	4293      	cmp	r3, r2
    3018:	d909      	bls.n	302e <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    301c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    3020:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    3024:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    3026:	7fbb      	ldrb	r3, [r7, #30]
    3028:	3301      	adds	r3, #1
    302a:	77bb      	strb	r3, [r7, #30]
    302c:	e7f1      	b.n	3012 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3030:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    3034:	d307      	bcc.n	3046 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    3036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3038:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    303c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    303e:	7f7b      	ldrb	r3, [r7, #29]
    3040:	3301      	adds	r3, #1
    3042:	777b      	strb	r3, [r7, #29]
    3044:	e7f3      	b.n	302e <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    3046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3048:	2b3b      	cmp	r3, #59	; 0x3b
    304a:	d906      	bls.n	305a <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    304e:	3b3c      	subs	r3, #60	; 0x3c
    3050:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    3052:	7f3b      	ldrb	r3, [r7, #28]
    3054:	3301      	adds	r3, #1
    3056:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    3058:	e7f5      	b.n	3046 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    305a:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    305c:	6a3b      	ldr	r3, [r7, #32]
    305e:	b29a      	uxth	r2, r3
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	7ffa      	ldrb	r2, [r7, #31]
    3068:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	7fba      	ldrb	r2, [r7, #30]
    306e:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	7f7a      	ldrb	r2, [r7, #29]
    3074:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	7f3a      	ldrb	r2, [r7, #28]
    307a:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    307e:	b2da      	uxtb	r2, r3
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    3084:	2300      	movs	r3, #0
}
    3086:	4618      	mov	r0, r3
    3088:	3728      	adds	r7, #40	; 0x28
    308a:	46bd      	mov	sp, r7
    308c:	bd80      	pop	{r7, pc}
    308e:	bf00      	nop
    3090:	00002e89 	.word	0x00002e89
    3094:	01e28500 	.word	0x01e28500
    3098:	01e13380 	.word	0x01e13380
    309c:	00002eb1 	.word	0x00002eb1
    30a0:	0001517f 	.word	0x0001517f

000030a4 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    30a4:	b580      	push	{r7, lr}
    30a6:	b086      	sub	sp, #24
    30a8:	af00      	add	r7, sp, #0
    30aa:	6078      	str	r0, [r7, #4]
    30ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    30ae:	2300      	movs	r3, #0
    30b0:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    30b2:	2300      	movs	r3, #0
    30b4:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    30b6:	683b      	ldr	r3, [r7, #0]
    30b8:	88db      	ldrh	r3, [r3, #6]
    30ba:	b2da      	uxtb	r2, r3
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	699b      	ldr	r3, [r3, #24]
    30c0:	b2db      	uxtb	r3, r3
    30c2:	1ad3      	subs	r3, r2, r3
    30c4:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    30c6:	683b      	ldr	r3, [r7, #0]
    30c8:	795b      	ldrb	r3, [r3, #5]
    30ca:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    30cc:	683b      	ldr	r3, [r7, #0]
    30ce:	791b      	ldrb	r3, [r3, #4]
    30d0:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    30d2:	683b      	ldr	r3, [r7, #0]
    30d4:	789b      	ldrb	r3, [r3, #2]
    30d6:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    30d8:	683b      	ldr	r3, [r7, #0]
    30da:	785b      	ldrb	r3, [r3, #1]
    30dc:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    30de:	683b      	ldr	r3, [r7, #0]
    30e0:	781b      	ldrb	r3, [r3, #0]
    30e2:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    30e4:	2300      	movs	r3, #0
    30e6:	613b      	str	r3, [r7, #16]
    30e8:	e01a      	b.n	3120 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    30ea:	687b      	ldr	r3, [r7, #4]
    30ec:	699b      	ldr	r3, [r3, #24]
    30ee:	b29a      	uxth	r2, r3
    30f0:	693b      	ldr	r3, [r7, #16]
    30f2:	b29b      	uxth	r3, r3
    30f4:	4413      	add	r3, r2
    30f6:	b29b      	uxth	r3, r3
    30f8:	4618      	mov	r0, r3
    30fa:	4b29      	ldr	r3, [pc, #164]	; (31a0 <convert_datetime_to_timestamp+0xfc>)
    30fc:	4798      	blx	r3
    30fe:	4603      	mov	r3, r0
    3100:	2b00      	cmp	r3, #0
    3102:	d006      	beq.n	3112 <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    3104:	697b      	ldr	r3, [r7, #20]
    3106:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    310a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    310e:	617b      	str	r3, [r7, #20]
    3110:	e003      	b.n	311a <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    3112:	697a      	ldr	r2, [r7, #20]
    3114:	4b23      	ldr	r3, [pc, #140]	; (31a4 <convert_datetime_to_timestamp+0x100>)
    3116:	4413      	add	r3, r2
    3118:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    311a:	693b      	ldr	r3, [r7, #16]
    311c:	3301      	adds	r3, #1
    311e:	613b      	str	r3, [r7, #16]
    3120:	7bfa      	ldrb	r2, [r7, #15]
    3122:	693b      	ldr	r3, [r7, #16]
    3124:	429a      	cmp	r2, r3
    3126:	d8e0      	bhi.n	30ea <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    3128:	2301      	movs	r3, #1
    312a:	613b      	str	r3, [r7, #16]
    312c:	e00f      	b.n	314e <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    312e:	683b      	ldr	r3, [r7, #0]
    3130:	88db      	ldrh	r3, [r3, #6]
    3132:	461a      	mov	r2, r3
    3134:	693b      	ldr	r3, [r7, #16]
    3136:	b2db      	uxtb	r3, r3
    3138:	4619      	mov	r1, r3
    313a:	4610      	mov	r0, r2
    313c:	4b1a      	ldr	r3, [pc, #104]	; (31a8 <convert_datetime_to_timestamp+0x104>)
    313e:	4798      	blx	r3
    3140:	4602      	mov	r2, r0
    3142:	697b      	ldr	r3, [r7, #20]
    3144:	4413      	add	r3, r2
    3146:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    3148:	693b      	ldr	r3, [r7, #16]
    314a:	3301      	adds	r3, #1
    314c:	613b      	str	r3, [r7, #16]
    314e:	7bba      	ldrb	r2, [r7, #14]
    3150:	693b      	ldr	r3, [r7, #16]
    3152:	429a      	cmp	r2, r3
    3154:	d8eb      	bhi.n	312e <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    3156:	7b7b      	ldrb	r3, [r7, #13]
    3158:	3b01      	subs	r3, #1
    315a:	4a14      	ldr	r2, [pc, #80]	; (31ac <convert_datetime_to_timestamp+0x108>)
    315c:	fb02 f303 	mul.w	r3, r2, r3
    3160:	461a      	mov	r2, r3
    3162:	697b      	ldr	r3, [r7, #20]
    3164:	4413      	add	r3, r2
    3166:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    3168:	7b3b      	ldrb	r3, [r7, #12]
    316a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    316e:	fb02 f303 	mul.w	r3, r2, r3
    3172:	461a      	mov	r2, r3
    3174:	697b      	ldr	r3, [r7, #20]
    3176:	4413      	add	r3, r2
    3178:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    317a:	7afa      	ldrb	r2, [r7, #11]
    317c:	4613      	mov	r3, r2
    317e:	011b      	lsls	r3, r3, #4
    3180:	1a9b      	subs	r3, r3, r2
    3182:	009b      	lsls	r3, r3, #2
    3184:	461a      	mov	r2, r3
    3186:	697b      	ldr	r3, [r7, #20]
    3188:	4413      	add	r3, r2
    318a:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    318c:	7abb      	ldrb	r3, [r7, #10]
    318e:	697a      	ldr	r2, [r7, #20]
    3190:	4413      	add	r3, r2
    3192:	617b      	str	r3, [r7, #20]

	return tmp;
    3194:	697b      	ldr	r3, [r7, #20]
}
    3196:	4618      	mov	r0, r3
    3198:	3718      	adds	r7, #24
    319a:	46bd      	mov	sp, r7
    319c:	bd80      	pop	{r7, pc}
    319e:	bf00      	nop
    31a0:	00002e89 	.word	0x00002e89
    31a4:	01e13380 	.word	0x01e13380
    31a8:	00002eb1 	.word	0x00002eb1
    31ac:	00015180 	.word	0x00015180

000031b0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b084      	sub	sp, #16
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    31ba:	2300      	movs	r3, #0
    31bc:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	2b00      	cmp	r3, #0
    31c2:	bf14      	ite	ne
    31c4:	2301      	movne	r3, #1
    31c6:	2300      	moveq	r3, #0
    31c8:	b2db      	uxtb	r3, r3
    31ca:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    31ce:	4911      	ldr	r1, [pc, #68]	; (3214 <calendar_init+0x64>)
    31d0:	4618      	mov	r0, r3
    31d2:	4b11      	ldr	r3, [pc, #68]	; (3218 <calendar_init+0x68>)
    31d4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	681a      	ldr	r2, [r3, #0]
    31da:	683b      	ldr	r3, [r7, #0]
    31dc:	429a      	cmp	r2, r3
    31de:	d101      	bne.n	31e4 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    31e0:	2300      	movs	r3, #0
    31e2:	e013      	b.n	320c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	681b      	ldr	r3, [r3, #0]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d002      	beq.n	31f2 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    31ec:	f06f 0311 	mvn.w	r3, #17
    31f0:	e00c      	b.n	320c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	683a      	ldr	r2, [r7, #0]
    31f6:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	4618      	mov	r0, r3
    31fc:	4b07      	ldr	r3, [pc, #28]	; (321c <calendar_init+0x6c>)
    31fe:	4798      	blx	r3
    3200:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3208:	619a      	str	r2, [r3, #24]

	return ret;
    320a:	68fb      	ldr	r3, [r7, #12]
}
    320c:	4618      	mov	r0, r3
    320e:	3710      	adds	r7, #16
    3210:	46bd      	mov	sp, r7
    3212:	bd80      	pop	{r7, pc}
    3214:	0001b684 	.word	0x0001b684
    3218:	00004d25 	.word	0x00004d25
    321c:	000077c9 	.word	0x000077c9

00003220 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	2b00      	cmp	r3, #0
    322c:	bf14      	ite	ne
    322e:	2301      	movne	r3, #1
    3230:	2300      	moveq	r3, #0
    3232:	b2db      	uxtb	r3, r3
    3234:	f240 12e5 	movw	r2, #485	; 0x1e5
    3238:	4906      	ldr	r1, [pc, #24]	; (3254 <calendar_enable+0x34>)
    323a:	4618      	mov	r0, r3
    323c:	4b06      	ldr	r3, [pc, #24]	; (3258 <calendar_enable+0x38>)
    323e:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	4618      	mov	r0, r3
    3244:	4b05      	ldr	r3, [pc, #20]	; (325c <calendar_enable+0x3c>)
    3246:	4798      	blx	r3

	return ERR_NONE;
    3248:	2300      	movs	r3, #0
}
    324a:	4618      	mov	r0, r3
    324c:	3708      	adds	r7, #8
    324e:	46bd      	mov	sp, r7
    3250:	bd80      	pop	{r7, pc}
    3252:	bf00      	nop
    3254:	0001b684 	.word	0x0001b684
    3258:	00004d25 	.word	0x00004d25
    325c:	00007881 	.word	0x00007881

00003260 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    3260:	b580      	push	{r7, lr}
    3262:	b086      	sub	sp, #24
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
    3268:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	2b00      	cmp	r3, #0
    326e:	bf14      	ite	ne
    3270:	2301      	movne	r3, #1
    3272:	2300      	moveq	r3, #0
    3274:	b2db      	uxtb	r3, r3
    3276:	f44f 7203 	mov.w	r2, #524	; 0x20c
    327a:	4915      	ldr	r1, [pc, #84]	; (32d0 <calendar_set_time+0x70>)
    327c:	4618      	mov	r0, r3
    327e:	4b15      	ldr	r3, [pc, #84]	; (32d4 <calendar_set_time+0x74>)
    3280:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	4618      	mov	r0, r3
    3286:	4b14      	ldr	r3, [pc, #80]	; (32d8 <calendar_set_time+0x78>)
    3288:	4798      	blx	r3
    328a:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    328c:	f107 0308 	add.w	r3, r7, #8
    3290:	461a      	mov	r2, r3
    3292:	6979      	ldr	r1, [r7, #20]
    3294:	6878      	ldr	r0, [r7, #4]
    3296:	4b11      	ldr	r3, [pc, #68]	; (32dc <calendar_set_time+0x7c>)
    3298:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    329a:	683b      	ldr	r3, [r7, #0]
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    32a0:	683b      	ldr	r3, [r7, #0]
    32a2:	785b      	ldrb	r3, [r3, #1]
    32a4:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    32a6:	683b      	ldr	r3, [r7, #0]
    32a8:	789b      	ldrb	r3, [r3, #2]
    32aa:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    32ac:	f107 0308 	add.w	r3, r7, #8
    32b0:	4619      	mov	r1, r3
    32b2:	6878      	ldr	r0, [r7, #4]
    32b4:	4b0a      	ldr	r3, [pc, #40]	; (32e0 <calendar_set_time+0x80>)
    32b6:	4798      	blx	r3
    32b8:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    32ba:	687b      	ldr	r3, [r7, #4]
    32bc:	6939      	ldr	r1, [r7, #16]
    32be:	4618      	mov	r0, r3
    32c0:	4b08      	ldr	r3, [pc, #32]	; (32e4 <calendar_set_time+0x84>)
    32c2:	4798      	blx	r3

	return ERR_NONE;
    32c4:	2300      	movs	r3, #0
}
    32c6:	4618      	mov	r0, r3
    32c8:	3718      	adds	r7, #24
    32ca:	46bd      	mov	sp, r7
    32cc:	bd80      	pop	{r7, pc}
    32ce:	bf00      	nop
    32d0:	0001b684 	.word	0x0001b684
    32d4:	00004d25 	.word	0x00004d25
    32d8:	0000791d 	.word	0x0000791d
    32dc:	00002f99 	.word	0x00002f99
    32e0:	000030a5 	.word	0x000030a5
    32e4:	000078cd 	.word	0x000078cd

000032e8 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b086      	sub	sp, #24
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	2b00      	cmp	r3, #0
    32f6:	bf14      	ite	ne
    32f8:	2301      	movne	r3, #1
    32fa:	2300      	moveq	r3, #0
    32fc:	b2db      	uxtb	r3, r3
    32fe:	f44f 7209 	mov.w	r2, #548	; 0x224
    3302:	4915      	ldr	r1, [pc, #84]	; (3358 <calendar_set_date+0x70>)
    3304:	4618      	mov	r0, r3
    3306:	4b15      	ldr	r3, [pc, #84]	; (335c <calendar_set_date+0x74>)
    3308:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	4618      	mov	r0, r3
    330e:	4b14      	ldr	r3, [pc, #80]	; (3360 <calendar_set_date+0x78>)
    3310:	4798      	blx	r3
    3312:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    3314:	f107 0308 	add.w	r3, r7, #8
    3318:	461a      	mov	r2, r3
    331a:	6979      	ldr	r1, [r7, #20]
    331c:	6878      	ldr	r0, [r7, #4]
    331e:	4b11      	ldr	r3, [pc, #68]	; (3364 <calendar_set_date+0x7c>)
    3320:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    3322:	683b      	ldr	r3, [r7, #0]
    3324:	781b      	ldrb	r3, [r3, #0]
    3326:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    3328:	683b      	ldr	r3, [r7, #0]
    332a:	785b      	ldrb	r3, [r3, #1]
    332c:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    332e:	683b      	ldr	r3, [r7, #0]
    3330:	885b      	ldrh	r3, [r3, #2]
    3332:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    3334:	f107 0308 	add.w	r3, r7, #8
    3338:	4619      	mov	r1, r3
    333a:	6878      	ldr	r0, [r7, #4]
    333c:	4b0a      	ldr	r3, [pc, #40]	; (3368 <calendar_set_date+0x80>)
    333e:	4798      	blx	r3
    3340:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    3342:	687b      	ldr	r3, [r7, #4]
    3344:	6939      	ldr	r1, [r7, #16]
    3346:	4618      	mov	r0, r3
    3348:	4b08      	ldr	r3, [pc, #32]	; (336c <calendar_set_date+0x84>)
    334a:	4798      	blx	r3

	return ERR_NONE;
    334c:	2300      	movs	r3, #0
}
    334e:	4618      	mov	r0, r3
    3350:	3718      	adds	r7, #24
    3352:	46bd      	mov	sp, r7
    3354:	bd80      	pop	{r7, pc}
    3356:	bf00      	nop
    3358:	0001b684 	.word	0x0001b684
    335c:	00004d25 	.word	0x00004d25
    3360:	0000791d 	.word	0x0000791d
    3364:	00002f99 	.word	0x00002f99
    3368:	000030a5 	.word	0x000030a5
    336c:	000078cd 	.word	0x000078cd

00003370 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3370:	b580      	push	{r7, lr}
    3372:	b084      	sub	sp, #16
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
    3378:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	2b00      	cmp	r3, #0
    337e:	bf14      	ite	ne
    3380:	2301      	movne	r3, #1
    3382:	2300      	moveq	r3, #0
    3384:	b2db      	uxtb	r3, r3
    3386:	f240 223b 	movw	r2, #571	; 0x23b
    338a:	4909      	ldr	r1, [pc, #36]	; (33b0 <calendar_get_date_time+0x40>)
    338c:	4618      	mov	r0, r3
    338e:	4b09      	ldr	r3, [pc, #36]	; (33b4 <calendar_get_date_time+0x44>)
    3390:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	4618      	mov	r0, r3
    3396:	4b08      	ldr	r3, [pc, #32]	; (33b8 <calendar_get_date_time+0x48>)
    3398:	4798      	blx	r3
    339a:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    339c:	683a      	ldr	r2, [r7, #0]
    339e:	68f9      	ldr	r1, [r7, #12]
    33a0:	6878      	ldr	r0, [r7, #4]
    33a2:	4b06      	ldr	r3, [pc, #24]	; (33bc <calendar_get_date_time+0x4c>)
    33a4:	4798      	blx	r3

	return ERR_NONE;
    33a6:	2300      	movs	r3, #0
}
    33a8:	4618      	mov	r0, r3
    33aa:	3710      	adds	r7, #16
    33ac:	46bd      	mov	sp, r7
    33ae:	bd80      	pop	{r7, pc}
    33b0:	0001b684 	.word	0x0001b684
    33b4:	00004d25 	.word	0x00004d25
    33b8:	0000791d 	.word	0x0000791d
    33bc:	00002f99 	.word	0x00002f99

000033c0 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b084      	sub	sp, #16
    33c4:	af00      	add	r7, sp, #0
    33c6:	6078      	str	r0, [r7, #4]
    33c8:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	2b00      	cmp	r3, #0
    33ce:	d004      	beq.n	33da <can_async_init+0x1a>
    33d0:	683b      	ldr	r3, [r7, #0]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d001      	beq.n	33da <can_async_init+0x1a>
    33d6:	2301      	movs	r3, #1
    33d8:	e000      	b.n	33dc <can_async_init+0x1c>
    33da:	2300      	movs	r3, #0
    33dc:	f003 0301 	and.w	r3, r3, #1
    33e0:	b2db      	uxtb	r3, r3
    33e2:	2241      	movs	r2, #65	; 0x41
    33e4:	490e      	ldr	r1, [pc, #56]	; (3420 <can_async_init+0x60>)
    33e6:	4618      	mov	r0, r3
    33e8:	4b0e      	ldr	r3, [pc, #56]	; (3424 <can_async_init+0x64>)
    33ea:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	6839      	ldr	r1, [r7, #0]
    33f0:	4618      	mov	r0, r3
    33f2:	4b0d      	ldr	r3, [pc, #52]	; (3428 <can_async_init+0x68>)
    33f4:	4798      	blx	r3
    33f6:	60f8      	str	r0, [r7, #12]
	if (rc) {
    33f8:	68fb      	ldr	r3, [r7, #12]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d001      	beq.n	3402 <can_async_init+0x42>
		return rc;
    33fe:	68fb      	ldr	r3, [r7, #12]
    3400:	e009      	b.n	3416 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	4a09      	ldr	r2, [pc, #36]	; (342c <can_async_init+0x6c>)
    3406:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	4a09      	ldr	r2, [pc, #36]	; (3430 <can_async_init+0x70>)
    340c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	4a08      	ldr	r2, [pc, #32]	; (3434 <can_async_init+0x74>)
    3412:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3414:	2300      	movs	r3, #0
}
    3416:	4618      	mov	r0, r3
    3418:	3710      	adds	r7, #16
    341a:	46bd      	mov	sp, r7
    341c:	bd80      	pop	{r7, pc}
    341e:	bf00      	nop
    3420:	0001b6a0 	.word	0x0001b6a0
    3424:	00004d25 	.word	0x00004d25
    3428:	0000548d 	.word	0x0000548d
    342c:	000035d5 	.word	0x000035d5
    3430:	000035f9 	.word	0x000035f9
    3434:	0000361d 	.word	0x0000361d

00003438 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    3438:	b580      	push	{r7, lr}
    343a:	b082      	sub	sp, #8
    343c:	af00      	add	r7, sp, #0
    343e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	2b00      	cmp	r3, #0
    3444:	bf14      	ite	ne
    3446:	2301      	movne	r3, #1
    3448:	2300      	moveq	r3, #0
    344a:	b2db      	uxtb	r3, r3
    344c:	225c      	movs	r2, #92	; 0x5c
    344e:	4906      	ldr	r1, [pc, #24]	; (3468 <can_async_enable+0x30>)
    3450:	4618      	mov	r0, r3
    3452:	4b06      	ldr	r3, [pc, #24]	; (346c <can_async_enable+0x34>)
    3454:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	4618      	mov	r0, r3
    345a:	4b05      	ldr	r3, [pc, #20]	; (3470 <can_async_enable+0x38>)
    345c:	4798      	blx	r3
    345e:	4603      	mov	r3, r0
}
    3460:	4618      	mov	r0, r3
    3462:	3708      	adds	r7, #8
    3464:	46bd      	mov	sp, r7
    3466:	bd80      	pop	{r7, pc}
    3468:	0001b6a0 	.word	0x0001b6a0
    346c:	00004d25 	.word	0x00004d25
    3470:	00005675 	.word	0x00005675

00003474 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    3474:	b580      	push	{r7, lr}
    3476:	b082      	sub	sp, #8
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
    347c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	2b00      	cmp	r3, #0
    3482:	d004      	beq.n	348e <can_async_read+0x1a>
    3484:	683b      	ldr	r3, [r7, #0]
    3486:	2b00      	cmp	r3, #0
    3488:	d001      	beq.n	348e <can_async_read+0x1a>
    348a:	2301      	movs	r3, #1
    348c:	e000      	b.n	3490 <can_async_read+0x1c>
    348e:	2300      	movs	r3, #0
    3490:	f003 0301 	and.w	r3, r3, #1
    3494:	b2db      	uxtb	r3, r3
    3496:	226e      	movs	r2, #110	; 0x6e
    3498:	4906      	ldr	r1, [pc, #24]	; (34b4 <can_async_read+0x40>)
    349a:	4618      	mov	r0, r3
    349c:	4b06      	ldr	r3, [pc, #24]	; (34b8 <can_async_read+0x44>)
    349e:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    34a0:	687b      	ldr	r3, [r7, #4]
    34a2:	6839      	ldr	r1, [r7, #0]
    34a4:	4618      	mov	r0, r3
    34a6:	4b05      	ldr	r3, [pc, #20]	; (34bc <can_async_read+0x48>)
    34a8:	4798      	blx	r3
    34aa:	4603      	mov	r3, r0
}
    34ac:	4618      	mov	r0, r3
    34ae:	3708      	adds	r7, #8
    34b0:	46bd      	mov	sp, r7
    34b2:	bd80      	pop	{r7, pc}
    34b4:	0001b6a0 	.word	0x0001b6a0
    34b8:	00004d25 	.word	0x00004d25
    34bc:	00005695 	.word	0x00005695

000034c0 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b082      	sub	sp, #8
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
    34c8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d004      	beq.n	34da <can_async_write+0x1a>
    34d0:	683b      	ldr	r3, [r7, #0]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d001      	beq.n	34da <can_async_write+0x1a>
    34d6:	2301      	movs	r3, #1
    34d8:	e000      	b.n	34dc <can_async_write+0x1c>
    34da:	2300      	movs	r3, #0
    34dc:	f003 0301 	and.w	r3, r3, #1
    34e0:	b2db      	uxtb	r3, r3
    34e2:	2277      	movs	r2, #119	; 0x77
    34e4:	4906      	ldr	r1, [pc, #24]	; (3500 <can_async_write+0x40>)
    34e6:	4618      	mov	r0, r3
    34e8:	4b06      	ldr	r3, [pc, #24]	; (3504 <can_async_write+0x44>)
    34ea:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	6839      	ldr	r1, [r7, #0]
    34f0:	4618      	mov	r0, r3
    34f2:	4b05      	ldr	r3, [pc, #20]	; (3508 <can_async_write+0x48>)
    34f4:	4798      	blx	r3
    34f6:	4603      	mov	r3, r0
}
    34f8:	4618      	mov	r0, r3
    34fa:	3708      	adds	r7, #8
    34fc:	46bd      	mov	sp, r7
    34fe:	bd80      	pop	{r7, pc}
    3500:	0001b6a0 	.word	0x0001b6a0
    3504:	00004d25 	.word	0x00004d25
    3508:	000057a5 	.word	0x000057a5

0000350c <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    350c:	b580      	push	{r7, lr}
    350e:	b084      	sub	sp, #16
    3510:	af00      	add	r7, sp, #0
    3512:	60f8      	str	r0, [r7, #12]
    3514:	460b      	mov	r3, r1
    3516:	607a      	str	r2, [r7, #4]
    3518:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    351a:	68fb      	ldr	r3, [r7, #12]
    351c:	2b00      	cmp	r3, #0
    351e:	bf14      	ite	ne
    3520:	2301      	movne	r3, #1
    3522:	2300      	moveq	r3, #0
    3524:	b2db      	uxtb	r3, r3
    3526:	2281      	movs	r2, #129	; 0x81
    3528:	4914      	ldr	r1, [pc, #80]	; (357c <can_async_register_callback+0x70>)
    352a:	4618      	mov	r0, r3
    352c:	4b14      	ldr	r3, [pc, #80]	; (3580 <can_async_register_callback+0x74>)
    352e:	4798      	blx	r3

	switch (type) {
    3530:	7afb      	ldrb	r3, [r7, #11]
    3532:	2b01      	cmp	r3, #1
    3534:	d007      	beq.n	3546 <can_async_register_callback+0x3a>
    3536:	2b02      	cmp	r3, #2
    3538:	d009      	beq.n	354e <can_async_register_callback+0x42>
    353a:	2b00      	cmp	r3, #0
    353c:	d10b      	bne.n	3556 <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    353e:	68fb      	ldr	r3, [r7, #12]
    3540:	687a      	ldr	r2, [r7, #4]
    3542:	621a      	str	r2, [r3, #32]
		break;
    3544:	e00a      	b.n	355c <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    3546:	68fb      	ldr	r3, [r7, #12]
    3548:	687a      	ldr	r2, [r7, #4]
    354a:	61da      	str	r2, [r3, #28]
		break;
    354c:	e006      	b.n	355c <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    354e:	68fb      	ldr	r3, [r7, #12]
    3550:	687a      	ldr	r2, [r7, #4]
    3552:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    3554:	e002      	b.n	355c <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    3556:	f06f 030c 	mvn.w	r3, #12
    355a:	e00b      	b.n	3574 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    355c:	68f8      	ldr	r0, [r7, #12]
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	2b00      	cmp	r3, #0
    3562:	bf14      	ite	ne
    3564:	2301      	movne	r3, #1
    3566:	2300      	moveq	r3, #0
    3568:	b2da      	uxtb	r2, r3
    356a:	7afb      	ldrb	r3, [r7, #11]
    356c:	4619      	mov	r1, r3
    356e:	4b05      	ldr	r3, [pc, #20]	; (3584 <can_async_register_callback+0x78>)
    3570:	4798      	blx	r3

	return ERR_NONE;
    3572:	2300      	movs	r3, #0
}
    3574:	4618      	mov	r0, r3
    3576:	3710      	adds	r7, #16
    3578:	46bd      	mov	sp, r7
    357a:	bd80      	pop	{r7, pc}
    357c:	0001b6a0 	.word	0x0001b6a0
    3580:	00004d25 	.word	0x00004d25
    3584:	00005961 	.word	0x00005961

00003588 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    3588:	b590      	push	{r4, r7, lr}
    358a:	b085      	sub	sp, #20
    358c:	af00      	add	r7, sp, #0
    358e:	60f8      	str	r0, [r7, #12]
    3590:	607b      	str	r3, [r7, #4]
    3592:	460b      	mov	r3, r1
    3594:	72fb      	strb	r3, [r7, #11]
    3596:	4613      	mov	r3, r2
    3598:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    359a:	68fb      	ldr	r3, [r7, #12]
    359c:	2b00      	cmp	r3, #0
    359e:	bf14      	ite	ne
    35a0:	2301      	movne	r3, #1
    35a2:	2300      	moveq	r3, #0
    35a4:	b2db      	uxtb	r3, r3
    35a6:	22b8      	movs	r2, #184	; 0xb8
    35a8:	4907      	ldr	r1, [pc, #28]	; (35c8 <can_async_set_filter+0x40>)
    35aa:	4618      	mov	r0, r3
    35ac:	4b07      	ldr	r3, [pc, #28]	; (35cc <can_async_set_filter+0x44>)
    35ae:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    35b0:	68f8      	ldr	r0, [r7, #12]
    35b2:	7aba      	ldrb	r2, [r7, #10]
    35b4:	7af9      	ldrb	r1, [r7, #11]
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	4c05      	ldr	r4, [pc, #20]	; (35d0 <can_async_set_filter+0x48>)
    35ba:	47a0      	blx	r4
    35bc:	4603      	mov	r3, r0
}
    35be:	4618      	mov	r0, r3
    35c0:	3714      	adds	r7, #20
    35c2:	46bd      	mov	sp, r7
    35c4:	bd90      	pop	{r4, r7, pc}
    35c6:	bf00      	nop
    35c8:	0001b6a0 	.word	0x0001b6a0
    35cc:	00004d25 	.word	0x00004d25
    35d0:	000059f1 	.word	0x000059f1

000035d4 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b084      	sub	sp, #16
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    35e0:	68fb      	ldr	r3, [r7, #12]
    35e2:	69db      	ldr	r3, [r3, #28]
    35e4:	2b00      	cmp	r3, #0
    35e6:	d003      	beq.n	35f0 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    35e8:	68fb      	ldr	r3, [r7, #12]
    35ea:	69db      	ldr	r3, [r3, #28]
    35ec:	68f8      	ldr	r0, [r7, #12]
    35ee:	4798      	blx	r3
	}
}
    35f0:	bf00      	nop
    35f2:	3710      	adds	r7, #16
    35f4:	46bd      	mov	sp, r7
    35f6:	bd80      	pop	{r7, pc}

000035f8 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    35f8:	b580      	push	{r7, lr}
    35fa:	b084      	sub	sp, #16
    35fc:	af00      	add	r7, sp, #0
    35fe:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3604:	68fb      	ldr	r3, [r7, #12]
    3606:	6a1b      	ldr	r3, [r3, #32]
    3608:	2b00      	cmp	r3, #0
    360a:	d003      	beq.n	3614 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    360c:	68fb      	ldr	r3, [r7, #12]
    360e:	6a1b      	ldr	r3, [r3, #32]
    3610:	68f8      	ldr	r0, [r7, #12]
    3612:	4798      	blx	r3
	}
}
    3614:	bf00      	nop
    3616:	3710      	adds	r7, #16
    3618:	46bd      	mov	sp, r7
    361a:	bd80      	pop	{r7, pc}

0000361c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    361c:	b580      	push	{r7, lr}
    361e:	b084      	sub	sp, #16
    3620:	af00      	add	r7, sp, #0
    3622:	6078      	str	r0, [r7, #4]
    3624:	460b      	mov	r3, r1
    3626:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    362c:	68fb      	ldr	r3, [r7, #12]
    362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3630:	2b00      	cmp	r3, #0
    3632:	d005      	beq.n	3640 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3634:	68fb      	ldr	r3, [r7, #12]
    3636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3638:	78fa      	ldrb	r2, [r7, #3]
    363a:	4611      	mov	r1, r2
    363c:	68f8      	ldr	r0, [r7, #12]
    363e:	4798      	blx	r3
	}
}
    3640:	bf00      	nop
    3642:	3710      	adds	r7, #16
    3644:	46bd      	mov	sp, r7
    3646:	bd80      	pop	{r7, pc}

00003648 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
    364e:	6078      	str	r0, [r7, #4]
    3650:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	2b00      	cmp	r3, #0
    3656:	d004      	beq.n	3662 <crc_sync_init+0x1a>
    3658:	683b      	ldr	r3, [r7, #0]
    365a:	2b00      	cmp	r3, #0
    365c:	d001      	beq.n	3662 <crc_sync_init+0x1a>
    365e:	2301      	movs	r3, #1
    3660:	e000      	b.n	3664 <crc_sync_init+0x1c>
    3662:	2300      	movs	r3, #0
    3664:	f003 0301 	and.w	r3, r3, #1
    3668:	b2db      	uxtb	r3, r3
    366a:	222b      	movs	r2, #43	; 0x2b
    366c:	4906      	ldr	r1, [pc, #24]	; (3688 <crc_sync_init+0x40>)
    366e:	4618      	mov	r0, r3
    3670:	4b06      	ldr	r3, [pc, #24]	; (368c <crc_sync_init+0x44>)
    3672:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	6839      	ldr	r1, [r7, #0]
    3678:	4618      	mov	r0, r3
    367a:	4b05      	ldr	r3, [pc, #20]	; (3690 <crc_sync_init+0x48>)
    367c:	4798      	blx	r3
    367e:	4603      	mov	r3, r0
}
    3680:	4618      	mov	r0, r3
    3682:	3708      	adds	r7, #8
    3684:	46bd      	mov	sp, r7
    3686:	bd80      	pop	{r7, pc}
    3688:	0001b6bc 	.word	0x0001b6bc
    368c:	00004d25 	.word	0x00004d25
    3690:	00005fd1 	.word	0x00005fd1

00003694 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3694:	b590      	push	{r4, r7, lr}
    3696:	b083      	sub	sp, #12
    3698:	af00      	add	r7, sp, #0
    369a:	4603      	mov	r3, r0
    369c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    369e:	4b07      	ldr	r3, [pc, #28]	; (36bc <delay_us+0x28>)
    36a0:	681c      	ldr	r4, [r3, #0]
    36a2:	88fb      	ldrh	r3, [r7, #6]
    36a4:	4618      	mov	r0, r3
    36a6:	4b06      	ldr	r3, [pc, #24]	; (36c0 <delay_us+0x2c>)
    36a8:	4798      	blx	r3
    36aa:	4603      	mov	r3, r0
    36ac:	4619      	mov	r1, r3
    36ae:	4620      	mov	r0, r4
    36b0:	4b04      	ldr	r3, [pc, #16]	; (36c4 <delay_us+0x30>)
    36b2:	4798      	blx	r3
}
    36b4:	bf00      	nop
    36b6:	370c      	adds	r7, #12
    36b8:	46bd      	mov	sp, r7
    36ba:	bd90      	pop	{r4, r7, pc}
    36bc:	200021d0 	.word	0x200021d0
    36c0:	00005d25 	.word	0x00005d25
    36c4:	00005eb9 	.word	0x00005eb9

000036c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    36c8:	b590      	push	{r4, r7, lr}
    36ca:	b083      	sub	sp, #12
    36cc:	af00      	add	r7, sp, #0
    36ce:	4603      	mov	r3, r0
    36d0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    36d2:	4b07      	ldr	r3, [pc, #28]	; (36f0 <delay_ms+0x28>)
    36d4:	681c      	ldr	r4, [r3, #0]
    36d6:	88fb      	ldrh	r3, [r7, #6]
    36d8:	4618      	mov	r0, r3
    36da:	4b06      	ldr	r3, [pc, #24]	; (36f4 <delay_ms+0x2c>)
    36dc:	4798      	blx	r3
    36de:	4603      	mov	r3, r0
    36e0:	4619      	mov	r1, r3
    36e2:	4620      	mov	r0, r4
    36e4:	4b04      	ldr	r3, [pc, #16]	; (36f8 <delay_ms+0x30>)
    36e6:	4798      	blx	r3
}
    36e8:	bf00      	nop
    36ea:	370c      	adds	r7, #12
    36ec:	46bd      	mov	sp, r7
    36ee:	bd90      	pop	{r4, r7, pc}
    36f0:	200021d0 	.word	0x200021d0
    36f4:	00005e91 	.word	0x00005e91
    36f8:	00005eb9 	.word	0x00005eb9

000036fc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    36fc:	b580      	push	{r7, lr}
    36fe:	af00      	add	r7, sp, #0
	return _event_system_init();
    3700:	4b02      	ldr	r3, [pc, #8]	; (370c <event_system_init+0x10>)
    3702:	4798      	blx	r3
    3704:	4603      	mov	r3, r0
}
    3706:	4618      	mov	r0, r3
    3708:	bd80      	pop	{r7, pc}
    370a:	bf00      	nop
    370c:	000067b1 	.word	0x000067b1

00003710 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    3710:	b580      	push	{r7, lr}
    3712:	b082      	sub	sp, #8
    3714:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3716:	2300      	movs	r3, #0
    3718:	80fb      	strh	r3, [r7, #6]
    371a:	e00e      	b.n	373a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    371c:	88fb      	ldrh	r3, [r7, #6]
    371e:	4a0c      	ldr	r2, [pc, #48]	; (3750 <ext_irq_init+0x40>)
    3720:	00db      	lsls	r3, r3, #3
    3722:	4413      	add	r3, r2
    3724:	f04f 32ff 	mov.w	r2, #4294967295
    3728:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    372a:	88fb      	ldrh	r3, [r7, #6]
    372c:	4a08      	ldr	r2, [pc, #32]	; (3750 <ext_irq_init+0x40>)
    372e:	2100      	movs	r1, #0
    3730:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3734:	88fb      	ldrh	r3, [r7, #6]
    3736:	3301      	adds	r3, #1
    3738:	80fb      	strh	r3, [r7, #6]
    373a:	88fb      	ldrh	r3, [r7, #6]
    373c:	2b09      	cmp	r3, #9
    373e:	d9ed      	bls.n	371c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    3740:	4804      	ldr	r0, [pc, #16]	; (3754 <ext_irq_init+0x44>)
    3742:	4b05      	ldr	r3, [pc, #20]	; (3758 <ext_irq_init+0x48>)
    3744:	4798      	blx	r3
    3746:	4603      	mov	r3, r0
}
    3748:	4618      	mov	r0, r3
    374a:	3708      	adds	r7, #8
    374c:	46bd      	mov	sp, r7
    374e:	bd80      	pop	{r7, pc}
    3750:	200021d4 	.word	0x200021d4
    3754:	000038b5 	.word	0x000038b5
    3758:	00006311 	.word	0x00006311

0000375c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    375c:	b580      	push	{r7, lr}
    375e:	b086      	sub	sp, #24
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
    3764:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    3766:	2300      	movs	r3, #0
    3768:	75fb      	strb	r3, [r7, #23]
    376a:	2300      	movs	r3, #0
    376c:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    376e:	2300      	movs	r3, #0
    3770:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    3772:	e012      	b.n	379a <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    3774:	7dfb      	ldrb	r3, [r7, #23]
    3776:	4a4d      	ldr	r2, [pc, #308]	; (38ac <ext_irq_register+0x150>)
    3778:	00db      	lsls	r3, r3, #3
    377a:	4413      	add	r3, r2
    377c:	685a      	ldr	r2, [r3, #4]
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	429a      	cmp	r2, r3
    3782:	d107      	bne.n	3794 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    3784:	7dfb      	ldrb	r3, [r7, #23]
    3786:	4949      	ldr	r1, [pc, #292]	; (38ac <ext_irq_register+0x150>)
    3788:	683a      	ldr	r2, [r7, #0]
    378a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    378e:	2301      	movs	r3, #1
    3790:	757b      	strb	r3, [r7, #21]
			break;
    3792:	e005      	b.n	37a0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    3794:	7dfb      	ldrb	r3, [r7, #23]
    3796:	3301      	adds	r3, #1
    3798:	75fb      	strb	r3, [r7, #23]
    379a:	7dfb      	ldrb	r3, [r7, #23]
    379c:	2b09      	cmp	r3, #9
    379e:	d9e9      	bls.n	3774 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    37a0:	683b      	ldr	r3, [r7, #0]
    37a2:	2b00      	cmp	r3, #0
    37a4:	d10e      	bne.n	37c4 <ext_irq_register+0x68>
		if (!found) {
    37a6:	7d7b      	ldrb	r3, [r7, #21]
    37a8:	f083 0301 	eor.w	r3, r3, #1
    37ac:	b2db      	uxtb	r3, r3
    37ae:	2b00      	cmp	r3, #0
    37b0:	d002      	beq.n	37b8 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    37b2:	f06f 030c 	mvn.w	r3, #12
    37b6:	e074      	b.n	38a2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    37b8:	2100      	movs	r1, #0
    37ba:	6878      	ldr	r0, [r7, #4]
    37bc:	4b3c      	ldr	r3, [pc, #240]	; (38b0 <ext_irq_register+0x154>)
    37be:	4798      	blx	r3
    37c0:	4603      	mov	r3, r0
    37c2:	e06e      	b.n	38a2 <ext_irq_register+0x146>
	}

	if (!found) {
    37c4:	7d7b      	ldrb	r3, [r7, #21]
    37c6:	f083 0301 	eor.w	r3, r3, #1
    37ca:	b2db      	uxtb	r3, r3
    37cc:	2b00      	cmp	r3, #0
    37ce:	d05a      	beq.n	3886 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    37d0:	2300      	movs	r3, #0
    37d2:	75fb      	strb	r3, [r7, #23]
    37d4:	e016      	b.n	3804 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    37d6:	7dfb      	ldrb	r3, [r7, #23]
    37d8:	4a34      	ldr	r2, [pc, #208]	; (38ac <ext_irq_register+0x150>)
    37da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    37de:	2b00      	cmp	r3, #0
    37e0:	d10d      	bne.n	37fe <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    37e2:	7dfb      	ldrb	r3, [r7, #23]
    37e4:	4931      	ldr	r1, [pc, #196]	; (38ac <ext_irq_register+0x150>)
    37e6:	683a      	ldr	r2, [r7, #0]
    37e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    37ec:	7dfb      	ldrb	r3, [r7, #23]
    37ee:	4a2f      	ldr	r2, [pc, #188]	; (38ac <ext_irq_register+0x150>)
    37f0:	00db      	lsls	r3, r3, #3
    37f2:	4413      	add	r3, r2
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	605a      	str	r2, [r3, #4]
				found           = true;
    37f8:	2301      	movs	r3, #1
    37fa:	757b      	strb	r3, [r7, #21]
				break;
    37fc:	e005      	b.n	380a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    37fe:	7dfb      	ldrb	r3, [r7, #23]
    3800:	3301      	adds	r3, #1
    3802:	75fb      	strb	r3, [r7, #23]
    3804:	7dfb      	ldrb	r3, [r7, #23]
    3806:	2b09      	cmp	r3, #9
    3808:	d9e5      	bls.n	37d6 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    380a:	e036      	b.n	387a <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    380c:	7dfb      	ldrb	r3, [r7, #23]
    380e:	4a27      	ldr	r2, [pc, #156]	; (38ac <ext_irq_register+0x150>)
    3810:	00db      	lsls	r3, r3, #3
    3812:	4413      	add	r3, r2
    3814:	685a      	ldr	r2, [r3, #4]
    3816:	7dbb      	ldrb	r3, [r7, #22]
    3818:	4924      	ldr	r1, [pc, #144]	; (38ac <ext_irq_register+0x150>)
    381a:	00db      	lsls	r3, r3, #3
    381c:	440b      	add	r3, r1
    381e:	685b      	ldr	r3, [r3, #4]
    3820:	429a      	cmp	r2, r3
    3822:	d227      	bcs.n	3874 <ext_irq_register+0x118>
    3824:	7dbb      	ldrb	r3, [r7, #22]
    3826:	4a21      	ldr	r2, [pc, #132]	; (38ac <ext_irq_register+0x150>)
    3828:	00db      	lsls	r3, r3, #3
    382a:	4413      	add	r3, r2
    382c:	685b      	ldr	r3, [r3, #4]
    382e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3832:	d01f      	beq.n	3874 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    3834:	7dbb      	ldrb	r3, [r7, #22]
    3836:	491d      	ldr	r1, [pc, #116]	; (38ac <ext_irq_register+0x150>)
    3838:	f107 020c 	add.w	r2, r7, #12
    383c:	00db      	lsls	r3, r3, #3
    383e:	440b      	add	r3, r1
    3840:	e893 0003 	ldmia.w	r3, {r0, r1}
    3844:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    3848:	7dbb      	ldrb	r3, [r7, #22]
    384a:	7dfa      	ldrb	r2, [r7, #23]
    384c:	4817      	ldr	r0, [pc, #92]	; (38ac <ext_irq_register+0x150>)
    384e:	4917      	ldr	r1, [pc, #92]	; (38ac <ext_irq_register+0x150>)
    3850:	00db      	lsls	r3, r3, #3
    3852:	4403      	add	r3, r0
    3854:	00d2      	lsls	r2, r2, #3
    3856:	440a      	add	r2, r1
    3858:	e892 0003 	ldmia.w	r2, {r0, r1}
    385c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    3860:	7dfb      	ldrb	r3, [r7, #23]
    3862:	4a12      	ldr	r2, [pc, #72]	; (38ac <ext_irq_register+0x150>)
    3864:	00db      	lsls	r3, r3, #3
    3866:	4413      	add	r3, r2
    3868:	f107 020c 	add.w	r2, r7, #12
    386c:	e892 0003 	ldmia.w	r2, {r0, r1}
    3870:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    3874:	7dbb      	ldrb	r3, [r7, #22]
    3876:	3301      	adds	r3, #1
    3878:	75bb      	strb	r3, [r7, #22]
    387a:	7dbb      	ldrb	r3, [r7, #22]
    387c:	2b09      	cmp	r3, #9
    387e:	d802      	bhi.n	3886 <ext_irq_register+0x12a>
    3880:	7dfb      	ldrb	r3, [r7, #23]
    3882:	2b09      	cmp	r3, #9
    3884:	d9c2      	bls.n	380c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    3886:	7d7b      	ldrb	r3, [r7, #21]
    3888:	f083 0301 	eor.w	r3, r3, #1
    388c:	b2db      	uxtb	r3, r3
    388e:	2b00      	cmp	r3, #0
    3890:	d002      	beq.n	3898 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    3892:	f06f 030c 	mvn.w	r3, #12
    3896:	e004      	b.n	38a2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    3898:	2101      	movs	r1, #1
    389a:	6878      	ldr	r0, [r7, #4]
    389c:	4b04      	ldr	r3, [pc, #16]	; (38b0 <ext_irq_register+0x154>)
    389e:	4798      	blx	r3
    38a0:	4603      	mov	r3, r0
}
    38a2:	4618      	mov	r0, r3
    38a4:	3718      	adds	r7, #24
    38a6:	46bd      	mov	sp, r7
    38a8:	bd80      	pop	{r7, pc}
    38aa:	bf00      	nop
    38ac:	200021d4 	.word	0x200021d4
    38b0:	000064b9 	.word	0x000064b9

000038b4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    38b4:	b580      	push	{r7, lr}
    38b6:	b084      	sub	sp, #16
    38b8:	af00      	add	r7, sp, #0
    38ba:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    38bc:	2300      	movs	r3, #0
    38be:	73fb      	strb	r3, [r7, #15]
    38c0:	230a      	movs	r3, #10
    38c2:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    38c4:	e02a      	b.n	391c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    38c6:	7bba      	ldrb	r2, [r7, #14]
    38c8:	7bfb      	ldrb	r3, [r7, #15]
    38ca:	4413      	add	r3, r2
    38cc:	105b      	asrs	r3, r3, #1
    38ce:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    38d0:	7b7b      	ldrb	r3, [r7, #13]
    38d2:	2b09      	cmp	r3, #9
    38d4:	d827      	bhi.n	3926 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    38d6:	7b7b      	ldrb	r3, [r7, #13]
    38d8:	4a16      	ldr	r2, [pc, #88]	; (3934 <process_ext_irq+0x80>)
    38da:	00db      	lsls	r3, r3, #3
    38dc:	4413      	add	r3, r2
    38de:	685a      	ldr	r2, [r3, #4]
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	429a      	cmp	r2, r3
    38e4:	d10b      	bne.n	38fe <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    38e6:	7b7b      	ldrb	r3, [r7, #13]
    38e8:	4a12      	ldr	r2, [pc, #72]	; (3934 <process_ext_irq+0x80>)
    38ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d01b      	beq.n	392a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    38f2:	7b7b      	ldrb	r3, [r7, #13]
    38f4:	4a0f      	ldr	r2, [pc, #60]	; (3934 <process_ext_irq+0x80>)
    38f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    38fa:	4798      	blx	r3
			}
			return;
    38fc:	e015      	b.n	392a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    38fe:	7b7b      	ldrb	r3, [r7, #13]
    3900:	4a0c      	ldr	r2, [pc, #48]	; (3934 <process_ext_irq+0x80>)
    3902:	00db      	lsls	r3, r3, #3
    3904:	4413      	add	r3, r2
    3906:	685a      	ldr	r2, [r3, #4]
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	429a      	cmp	r2, r3
    390c:	d203      	bcs.n	3916 <process_ext_irq+0x62>
			lower = middle + 1;
    390e:	7b7b      	ldrb	r3, [r7, #13]
    3910:	3301      	adds	r3, #1
    3912:	73fb      	strb	r3, [r7, #15]
    3914:	e002      	b.n	391c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    3916:	7b7b      	ldrb	r3, [r7, #13]
    3918:	3b01      	subs	r3, #1
    391a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    391c:	7bba      	ldrb	r2, [r7, #14]
    391e:	7bfb      	ldrb	r3, [r7, #15]
    3920:	429a      	cmp	r2, r3
    3922:	d2d0      	bcs.n	38c6 <process_ext_irq+0x12>
    3924:	e002      	b.n	392c <process_ext_irq+0x78>
			return;
    3926:	bf00      	nop
    3928:	e000      	b.n	392c <process_ext_irq+0x78>
			return;
    392a:	bf00      	nop
		}
	}
}
    392c:	3710      	adds	r7, #16
    392e:	46bd      	mov	sp, r7
    3930:	bd80      	pop	{r7, pc}
    3932:	bf00      	nop
    3934:	200021d4 	.word	0x200021d4

00003938 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    3938:	b580      	push	{r7, lr}
    393a:	b08a      	sub	sp, #40	; 0x28
    393c:	af00      	add	r7, sp, #0
    393e:	60f8      	str	r0, [r7, #12]
    3940:	60b9      	str	r1, [r7, #8]
    3942:	4613      	mov	r3, r2
    3944:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	3b14      	subs	r3, #20
    394a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    394e:	8b9b      	ldrh	r3, [r3, #28]
    3950:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3952:	88fb      	ldrh	r3, [r7, #6]
    3954:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    3956:	f248 0301 	movw	r3, #32769	; 0x8001
    395a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    395c:	68bb      	ldr	r3, [r7, #8]
    395e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3962:	f107 0214 	add.w	r2, r7, #20
    3966:	4611      	mov	r1, r2
    3968:	4618      	mov	r0, r3
    396a:	4b06      	ldr	r3, [pc, #24]	; (3984 <i2c_m_sync_read+0x4c>)
    396c:	4798      	blx	r3
    396e:	6238      	str	r0, [r7, #32]

	if (ret) {
    3970:	6a3b      	ldr	r3, [r7, #32]
    3972:	2b00      	cmp	r3, #0
    3974:	d001      	beq.n	397a <i2c_m_sync_read+0x42>
		return ret;
    3976:	6a3b      	ldr	r3, [r7, #32]
    3978:	e000      	b.n	397c <i2c_m_sync_read+0x44>
	}

	return n;
    397a:	88fb      	ldrh	r3, [r7, #6]
}
    397c:	4618      	mov	r0, r3
    397e:	3728      	adds	r7, #40	; 0x28
    3980:	46bd      	mov	sp, r7
    3982:	bd80      	pop	{r7, pc}
    3984:	00008595 	.word	0x00008595

00003988 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    3988:	b580      	push	{r7, lr}
    398a:	b08a      	sub	sp, #40	; 0x28
    398c:	af00      	add	r7, sp, #0
    398e:	60f8      	str	r0, [r7, #12]
    3990:	60b9      	str	r1, [r7, #8]
    3992:	4613      	mov	r3, r2
    3994:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    3996:	68fb      	ldr	r3, [r7, #12]
    3998:	3b14      	subs	r3, #20
    399a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    399e:	8b9b      	ldrh	r3, [r3, #28]
    39a0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    39a2:	88fb      	ldrh	r3, [r7, #6]
    39a4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    39a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    39aa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    39ac:	68bb      	ldr	r3, [r7, #8]
    39ae:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    39b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39b2:	f107 0214 	add.w	r2, r7, #20
    39b6:	4611      	mov	r1, r2
    39b8:	4618      	mov	r0, r3
    39ba:	4b06      	ldr	r3, [pc, #24]	; (39d4 <i2c_m_sync_write+0x4c>)
    39bc:	4798      	blx	r3
    39be:	6238      	str	r0, [r7, #32]

	if (ret) {
    39c0:	6a3b      	ldr	r3, [r7, #32]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d001      	beq.n	39ca <i2c_m_sync_write+0x42>
		return ret;
    39c6:	6a3b      	ldr	r3, [r7, #32]
    39c8:	e000      	b.n	39cc <i2c_m_sync_write+0x44>
	}

	return n;
    39ca:	88fb      	ldrh	r3, [r7, #6]
}
    39cc:	4618      	mov	r0, r3
    39ce:	3728      	adds	r7, #40	; 0x28
    39d0:	46bd      	mov	sp, r7
    39d2:	bd80      	pop	{r7, pc}
    39d4:	00008595 	.word	0x00008595

000039d8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    39d8:	b580      	push	{r7, lr}
    39da:	b084      	sub	sp, #16
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
    39e0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	2b00      	cmp	r3, #0
    39e6:	bf14      	ite	ne
    39e8:	2301      	movne	r3, #1
    39ea:	2300      	moveq	r3, #0
    39ec:	b2db      	uxtb	r3, r3
    39ee:	225e      	movs	r2, #94	; 0x5e
    39f0:	490c      	ldr	r1, [pc, #48]	; (3a24 <i2c_m_sync_init+0x4c>)
    39f2:	4618      	mov	r0, r3
    39f4:	4b0c      	ldr	r3, [pc, #48]	; (3a28 <i2c_m_sync_init+0x50>)
    39f6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	6839      	ldr	r1, [r7, #0]
    39fc:	4618      	mov	r0, r3
    39fe:	4b0b      	ldr	r3, [pc, #44]	; (3a2c <i2c_m_sync_init+0x54>)
    3a00:	4798      	blx	r3
    3a02:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    3a04:	68fb      	ldr	r3, [r7, #12]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d001      	beq.n	3a0e <i2c_m_sync_init+0x36>
		return init_status;
    3a0a:	68fb      	ldr	r3, [r7, #12]
    3a0c:	e006      	b.n	3a1c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	4a07      	ldr	r2, [pc, #28]	; (3a30 <i2c_m_sync_init+0x58>)
    3a12:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	4a07      	ldr	r2, [pc, #28]	; (3a34 <i2c_m_sync_init+0x5c>)
    3a18:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    3a1a:	2300      	movs	r3, #0
}
    3a1c:	4618      	mov	r0, r3
    3a1e:	3710      	adds	r7, #16
    3a20:	46bd      	mov	sp, r7
    3a22:	bd80      	pop	{r7, pc}
    3a24:	0001b6d8 	.word	0x0001b6d8
    3a28:	00004d25 	.word	0x00004d25
    3a2c:	00008335 	.word	0x00008335
    3a30:	00003939 	.word	0x00003939
    3a34:	00003989 	.word	0x00003989

00003a38 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b082      	sub	sp, #8
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    3a40:	687b      	ldr	r3, [r7, #4]
    3a42:	4618      	mov	r0, r3
    3a44:	4b03      	ldr	r3, [pc, #12]	; (3a54 <i2c_m_sync_enable+0x1c>)
    3a46:	4798      	blx	r3
    3a48:	4603      	mov	r3, r0
}
    3a4a:	4618      	mov	r0, r3
    3a4c:	3708      	adds	r7, #8
    3a4e:	46bd      	mov	sp, r7
    3a50:	bd80      	pop	{r7, pc}
    3a52:	bf00      	nop
    3a54:	0000837d 	.word	0x0000837d

00003a58 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b082      	sub	sp, #8
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    3a60:	687b      	ldr	r3, [r7, #4]
    3a62:	4618      	mov	r0, r3
    3a64:	4b03      	ldr	r3, [pc, #12]	; (3a74 <i2c_m_sync_disable+0x1c>)
    3a66:	4798      	blx	r3
    3a68:	4603      	mov	r3, r0
}
    3a6a:	4618      	mov	r0, r3
    3a6c:	3708      	adds	r7, #8
    3a6e:	46bd      	mov	sp, r7
    3a70:	bd80      	pop	{r7, pc}
    3a72:	bf00      	nop
    3a74:	000083bd 	.word	0x000083bd

00003a78 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    3a78:	b480      	push	{r7}
    3a7a:	b085      	sub	sp, #20
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	60f8      	str	r0, [r7, #12]
    3a80:	460b      	mov	r3, r1
    3a82:	607a      	str	r2, [r7, #4]
    3a84:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    3a86:	897b      	ldrh	r3, [r7, #10]
    3a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3a8c:	b21a      	sxth	r2, r3
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	b21b      	sxth	r3, r3
    3a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3a96:	b21b      	sxth	r3, r3
    3a98:	4313      	orrs	r3, r2
    3a9a:	b21b      	sxth	r3, r3
    3a9c:	b29a      	uxth	r2, r3
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	839a      	strh	r2, [r3, #28]
    3aa2:	68fb      	ldr	r3, [r7, #12]
    3aa4:	8b9b      	ldrh	r3, [r3, #28]
}
    3aa6:	4618      	mov	r0, r3
    3aa8:	3714      	adds	r7, #20
    3aaa:	46bd      	mov	sp, r7
    3aac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ab0:	4770      	bx	lr

00003ab2 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    3ab2:	b480      	push	{r7}
    3ab4:	b083      	sub	sp, #12
    3ab6:	af00      	add	r7, sp, #0
    3ab8:	6078      	str	r0, [r7, #4]
    3aba:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	f103 0214 	add.w	r2, r3, #20
    3ac2:	683b      	ldr	r3, [r7, #0]
    3ac4:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3ac6:	2300      	movs	r3, #0
}
    3ac8:	4618      	mov	r0, r3
    3aca:	370c      	adds	r7, #12
    3acc:	46bd      	mov	sp, r7
    3ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad2:	4770      	bx	lr

00003ad4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b084      	sub	sp, #16
    3ad8:	af00      	add	r7, sp, #0
    3ada:	60f8      	str	r0, [r7, #12]
    3adc:	60b9      	str	r1, [r7, #8]
    3ade:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3ae0:	68fb      	ldr	r3, [r7, #12]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d004      	beq.n	3af0 <pwm_init+0x1c>
    3ae6:	68bb      	ldr	r3, [r7, #8]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d001      	beq.n	3af0 <pwm_init+0x1c>
    3aec:	2301      	movs	r3, #1
    3aee:	e000      	b.n	3af2 <pwm_init+0x1e>
    3af0:	2300      	movs	r3, #0
    3af2:	f003 0301 	and.w	r3, r3, #1
    3af6:	b2db      	uxtb	r3, r3
    3af8:	2233      	movs	r2, #51	; 0x33
    3afa:	490a      	ldr	r1, [pc, #40]	; (3b24 <pwm_init+0x50>)
    3afc:	4618      	mov	r0, r3
    3afe:	4b0a      	ldr	r3, [pc, #40]	; (3b28 <pwm_init+0x54>)
    3b00:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	68b9      	ldr	r1, [r7, #8]
    3b06:	4618      	mov	r0, r3
    3b08:	4b08      	ldr	r3, [pc, #32]	; (3b2c <pwm_init+0x58>)
    3b0a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    3b0c:	68fb      	ldr	r3, [r7, #12]
    3b0e:	4a08      	ldr	r2, [pc, #32]	; (3b30 <pwm_init+0x5c>)
    3b10:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    3b12:	68fb      	ldr	r3, [r7, #12]
    3b14:	4a07      	ldr	r2, [pc, #28]	; (3b34 <pwm_init+0x60>)
    3b16:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    3b18:	2300      	movs	r3, #0
}
    3b1a:	4618      	mov	r0, r3
    3b1c:	3710      	adds	r7, #16
    3b1e:	46bd      	mov	sp, r7
    3b20:	bd80      	pop	{r7, pc}
    3b22:	bf00      	nop
    3b24:	0001b6f4 	.word	0x0001b6f4
    3b28:	00004d25 	.word	0x00004d25
    3b2c:	00009c5d 	.word	0x00009c5d
    3b30:	00003b39 	.word	0x00003b39
    3b34:	00003b5d 	.word	0x00003b5d

00003b38 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b084      	sub	sp, #16
    3b3c:	af00      	add	r7, sp, #0
    3b3e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3b40:	687b      	ldr	r3, [r7, #4]
    3b42:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    3b44:	68fb      	ldr	r3, [r7, #12]
    3b46:	695b      	ldr	r3, [r3, #20]
    3b48:	2b00      	cmp	r3, #0
    3b4a:	d003      	beq.n	3b54 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    3b4c:	68fb      	ldr	r3, [r7, #12]
    3b4e:	695b      	ldr	r3, [r3, #20]
    3b50:	68f8      	ldr	r0, [r7, #12]
    3b52:	4798      	blx	r3
	}
}
    3b54:	bf00      	nop
    3b56:	3710      	adds	r7, #16
    3b58:	46bd      	mov	sp, r7
    3b5a:	bd80      	pop	{r7, pc}

00003b5c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3b5c:	b580      	push	{r7, lr}
    3b5e:	b084      	sub	sp, #16
    3b60:	af00      	add	r7, sp, #0
    3b62:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	699b      	ldr	r3, [r3, #24]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d003      	beq.n	3b78 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3b70:	68fb      	ldr	r3, [r7, #12]
    3b72:	699b      	ldr	r3, [r3, #24]
    3b74:	68f8      	ldr	r0, [r7, #12]
    3b76:	4798      	blx	r3
	}
}
    3b78:	bf00      	nop
    3b7a:	3710      	adds	r7, #16
    3b7c:	46bd      	mov	sp, r7
    3b7e:	bd80      	pop	{r7, pc}

00003b80 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b082      	sub	sp, #8
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
    3b88:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d004      	beq.n	3b9a <qspi_sync_init+0x1a>
    3b90:	683b      	ldr	r3, [r7, #0]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d001      	beq.n	3b9a <qspi_sync_init+0x1a>
    3b96:	2301      	movs	r3, #1
    3b98:	e000      	b.n	3b9c <qspi_sync_init+0x1c>
    3b9a:	2300      	movs	r3, #0
    3b9c:	f003 0301 	and.w	r3, r3, #1
    3ba0:	b2db      	uxtb	r3, r3
    3ba2:	2231      	movs	r2, #49	; 0x31
    3ba4:	4906      	ldr	r1, [pc, #24]	; (3bc0 <qspi_sync_init+0x40>)
    3ba6:	4618      	mov	r0, r3
    3ba8:	4b06      	ldr	r3, [pc, #24]	; (3bc4 <qspi_sync_init+0x44>)
    3baa:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3bac:	687b      	ldr	r3, [r7, #4]
    3bae:	6839      	ldr	r1, [r7, #0]
    3bb0:	4618      	mov	r0, r3
    3bb2:	4b05      	ldr	r3, [pc, #20]	; (3bc8 <qspi_sync_init+0x48>)
    3bb4:	4798      	blx	r3
    3bb6:	4603      	mov	r3, r0
}
    3bb8:	4618      	mov	r0, r3
    3bba:	3708      	adds	r7, #8
    3bbc:	46bd      	mov	sp, r7
    3bbe:	bd80      	pop	{r7, pc}
    3bc0:	0001b70c 	.word	0x0001b70c
    3bc4:	00004d25 	.word	0x00004d25
    3bc8:	00007391 	.word	0x00007391

00003bcc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    3bcc:	b580      	push	{r7, lr}
    3bce:	b082      	sub	sp, #8
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	bf14      	ite	ne
    3bda:	2301      	movne	r3, #1
    3bdc:	2300      	moveq	r3, #0
    3bde:	b2db      	uxtb	r3, r3
    3be0:	223f      	movs	r2, #63	; 0x3f
    3be2:	4906      	ldr	r1, [pc, #24]	; (3bfc <qspi_sync_enable+0x30>)
    3be4:	4618      	mov	r0, r3
    3be6:	4b06      	ldr	r3, [pc, #24]	; (3c00 <qspi_sync_enable+0x34>)
    3be8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    3bea:	687b      	ldr	r3, [r7, #4]
    3bec:	4618      	mov	r0, r3
    3bee:	4b05      	ldr	r3, [pc, #20]	; (3c04 <qspi_sync_enable+0x38>)
    3bf0:	4798      	blx	r3
    3bf2:	4603      	mov	r3, r0
}
    3bf4:	4618      	mov	r0, r3
    3bf6:	3708      	adds	r7, #8
    3bf8:	46bd      	mov	sp, r7
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	0001b70c 	.word	0x0001b70c
    3c00:	00004d25 	.word	0x00004d25
    3c04:	00007405 	.word	0x00007405

00003c08 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b082      	sub	sp, #8
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	2b00      	cmp	r3, #0
    3c14:	bf14      	ite	ne
    3c16:	2301      	movne	r3, #1
    3c18:	2300      	moveq	r3, #0
    3c1a:	b2db      	uxtb	r3, r3
    3c1c:	2246      	movs	r2, #70	; 0x46
    3c1e:	4906      	ldr	r1, [pc, #24]	; (3c38 <qspi_sync_disable+0x30>)
    3c20:	4618      	mov	r0, r3
    3c22:	4b06      	ldr	r3, [pc, #24]	; (3c3c <qspi_sync_disable+0x34>)
    3c24:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	4618      	mov	r0, r3
    3c2a:	4b05      	ldr	r3, [pc, #20]	; (3c40 <qspi_sync_disable+0x38>)
    3c2c:	4798      	blx	r3
    3c2e:	4603      	mov	r3, r0
}
    3c30:	4618      	mov	r0, r3
    3c32:	3708      	adds	r7, #8
    3c34:	46bd      	mov	sp, r7
    3c36:	bd80      	pop	{r7, pc}
    3c38:	0001b70c 	.word	0x0001b70c
    3c3c:	00004d25 	.word	0x00004d25
    3c40:	00007429 	.word	0x00007429

00003c44 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b082      	sub	sp, #8
    3c48:	af00      	add	r7, sp, #0
    3c4a:	6078      	str	r0, [r7, #4]
    3c4c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d004      	beq.n	3c5e <qspi_sync_serial_run_command+0x1a>
    3c54:	683b      	ldr	r3, [r7, #0]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d001      	beq.n	3c5e <qspi_sync_serial_run_command+0x1a>
    3c5a:	2301      	movs	r3, #1
    3c5c:	e000      	b.n	3c60 <qspi_sync_serial_run_command+0x1c>
    3c5e:	2300      	movs	r3, #0
    3c60:	f003 0301 	and.w	r3, r3, #1
    3c64:	b2db      	uxtb	r3, r3
    3c66:	224d      	movs	r2, #77	; 0x4d
    3c68:	4906      	ldr	r1, [pc, #24]	; (3c84 <qspi_sync_serial_run_command+0x40>)
    3c6a:	4618      	mov	r0, r3
    3c6c:	4b06      	ldr	r3, [pc, #24]	; (3c88 <qspi_sync_serial_run_command+0x44>)
    3c6e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	6839      	ldr	r1, [r7, #0]
    3c74:	4618      	mov	r0, r3
    3c76:	4b05      	ldr	r3, [pc, #20]	; (3c8c <qspi_sync_serial_run_command+0x48>)
    3c78:	4798      	blx	r3
    3c7a:	4603      	mov	r3, r0
}
    3c7c:	4618      	mov	r0, r3
    3c7e:	3708      	adds	r7, #8
    3c80:	46bd      	mov	sp, r7
    3c82:	bd80      	pop	{r7, pc}
    3c84:	0001b70c 	.word	0x0001b70c
    3c88:	00004d25 	.word	0x00004d25
    3c8c:	00007575 	.word	0x00007575

00003c90 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b084      	sub	sp, #16
    3c94:	af00      	add	r7, sp, #0
    3c96:	6078      	str	r0, [r7, #4]
    3c98:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3c9a:	2300      	movs	r3, #0
    3c9c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d004      	beq.n	3cae <spi_m_sync_init+0x1e>
    3ca4:	683b      	ldr	r3, [r7, #0]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d001      	beq.n	3cae <spi_m_sync_init+0x1e>
    3caa:	2301      	movs	r3, #1
    3cac:	e000      	b.n	3cb0 <spi_m_sync_init+0x20>
    3cae:	2300      	movs	r3, #0
    3cb0:	f003 0301 	and.w	r3, r3, #1
    3cb4:	b2db      	uxtb	r3, r3
    3cb6:	2240      	movs	r2, #64	; 0x40
    3cb8:	4910      	ldr	r1, [pc, #64]	; (3cfc <spi_m_sync_init+0x6c>)
    3cba:	4618      	mov	r0, r3
    3cbc:	4b10      	ldr	r3, [pc, #64]	; (3d00 <spi_m_sync_init+0x70>)
    3cbe:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	683a      	ldr	r2, [r7, #0]
    3cc4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	3304      	adds	r3, #4
    3cca:	6839      	ldr	r1, [r7, #0]
    3ccc:	4618      	mov	r0, r3
    3cce:	4b0d      	ldr	r3, [pc, #52]	; (3d04 <spi_m_sync_init+0x74>)
    3cd0:	4798      	blx	r3
    3cd2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3cd4:	68fb      	ldr	r3, [r7, #12]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	da01      	bge.n	3cde <spi_m_sync_init+0x4e>
		return rc;
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	e00a      	b.n	3cf4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3ce4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	4a07      	ldr	r2, [pc, #28]	; (3d08 <spi_m_sync_init+0x78>)
    3cea:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	4a07      	ldr	r2, [pc, #28]	; (3d0c <spi_m_sync_init+0x7c>)
    3cf0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3cf2:	2300      	movs	r3, #0
}
    3cf4:	4618      	mov	r0, r3
    3cf6:	3710      	adds	r7, #16
    3cf8:	46bd      	mov	sp, r7
    3cfa:	bd80      	pop	{r7, pc}
    3cfc:	0001b728 	.word	0x0001b728
    3d00:	00004d25 	.word	0x00004d25
    3d04:	00008a91 	.word	0x00008a91
    3d08:	00003d89 	.word	0x00003d89
    3d0c:	00003de1 	.word	0x00003de1

00003d10 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b082      	sub	sp, #8
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	bf14      	ite	ne
    3d1e:	2301      	movne	r3, #1
    3d20:	2300      	moveq	r3, #0
    3d22:	b2db      	uxtb	r3, r3
    3d24:	2257      	movs	r2, #87	; 0x57
    3d26:	4906      	ldr	r1, [pc, #24]	; (3d40 <spi_m_sync_enable+0x30>)
    3d28:	4618      	mov	r0, r3
    3d2a:	4b06      	ldr	r3, [pc, #24]	; (3d44 <spi_m_sync_enable+0x34>)
    3d2c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	3304      	adds	r3, #4
    3d32:	4618      	mov	r0, r3
    3d34:	4b04      	ldr	r3, [pc, #16]	; (3d48 <spi_m_sync_enable+0x38>)
    3d36:	4798      	blx	r3
}
    3d38:	bf00      	nop
    3d3a:	3708      	adds	r7, #8
    3d3c:	46bd      	mov	sp, r7
    3d3e:	bd80      	pop	{r7, pc}
    3d40:	0001b728 	.word	0x0001b728
    3d44:	00004d25 	.word	0x00004d25
    3d48:	00008b9d 	.word	0x00008b9d

00003d4c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	2b00      	cmp	r3, #0
    3d58:	bf14      	ite	ne
    3d5a:	2301      	movne	r3, #1
    3d5c:	2300      	moveq	r3, #0
    3d5e:	b2db      	uxtb	r3, r3
    3d60:	225d      	movs	r2, #93	; 0x5d
    3d62:	4906      	ldr	r1, [pc, #24]	; (3d7c <spi_m_sync_disable+0x30>)
    3d64:	4618      	mov	r0, r3
    3d66:	4b06      	ldr	r3, [pc, #24]	; (3d80 <spi_m_sync_disable+0x34>)
    3d68:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	3304      	adds	r3, #4
    3d6e:	4618      	mov	r0, r3
    3d70:	4b04      	ldr	r3, [pc, #16]	; (3d84 <spi_m_sync_disable+0x38>)
    3d72:	4798      	blx	r3
}
    3d74:	bf00      	nop
    3d76:	3708      	adds	r7, #8
    3d78:	46bd      	mov	sp, r7
    3d7a:	bd80      	pop	{r7, pc}
    3d7c:	0001b728 	.word	0x0001b728
    3d80:	00004d25 	.word	0x00004d25
    3d84:	00008bed 	.word	0x00008bed

00003d88 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b088      	sub	sp, #32
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	60f8      	str	r0, [r7, #12]
    3d90:	60b9      	str	r1, [r7, #8]
    3d92:	4613      	mov	r3, r2
    3d94:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3d96:	68fb      	ldr	r3, [r7, #12]
    3d98:	2b00      	cmp	r3, #0
    3d9a:	bf14      	ite	ne
    3d9c:	2301      	movne	r3, #1
    3d9e:	2300      	moveq	r3, #0
    3da0:	b2db      	uxtb	r3, r3
    3da2:	2287      	movs	r2, #135	; 0x87
    3da4:	490b      	ldr	r1, [pc, #44]	; (3dd4 <_spi_m_sync_io_read+0x4c>)
    3da6:	4618      	mov	r0, r3
    3da8:	4b0b      	ldr	r3, [pc, #44]	; (3dd8 <_spi_m_sync_io_read+0x50>)
    3daa:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3dac:	68fb      	ldr	r3, [r7, #12]
    3dae:	3b0c      	subs	r3, #12
    3db0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3db2:	68bb      	ldr	r3, [r7, #8]
    3db4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3db6:	2300      	movs	r3, #0
    3db8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3dba:	88fb      	ldrh	r3, [r7, #6]
    3dbc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3dbe:	f107 0310 	add.w	r3, r7, #16
    3dc2:	4619      	mov	r1, r3
    3dc4:	69f8      	ldr	r0, [r7, #28]
    3dc6:	4b05      	ldr	r3, [pc, #20]	; (3ddc <_spi_m_sync_io_read+0x54>)
    3dc8:	4798      	blx	r3
    3dca:	4603      	mov	r3, r0
}
    3dcc:	4618      	mov	r0, r3
    3dce:	3720      	adds	r7, #32
    3dd0:	46bd      	mov	sp, r7
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	0001b728 	.word	0x0001b728
    3dd8:	00004d25 	.word	0x00004d25
    3ddc:	00003e39 	.word	0x00003e39

00003de0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b088      	sub	sp, #32
    3de4:	af00      	add	r7, sp, #0
    3de6:	60f8      	str	r0, [r7, #12]
    3de8:	60b9      	str	r1, [r7, #8]
    3dea:	4613      	mov	r3, r2
    3dec:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3dee:	68fb      	ldr	r3, [r7, #12]
    3df0:	2b00      	cmp	r3, #0
    3df2:	bf14      	ite	ne
    3df4:	2301      	movne	r3, #1
    3df6:	2300      	moveq	r3, #0
    3df8:	b2db      	uxtb	r3, r3
    3dfa:	22a3      	movs	r2, #163	; 0xa3
    3dfc:	490b      	ldr	r1, [pc, #44]	; (3e2c <_spi_m_sync_io_write+0x4c>)
    3dfe:	4618      	mov	r0, r3
    3e00:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <_spi_m_sync_io_write+0x50>)
    3e02:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3e04:	68fb      	ldr	r3, [r7, #12]
    3e06:	3b0c      	subs	r3, #12
    3e08:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3e0a:	2300      	movs	r3, #0
    3e0c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    3e0e:	68bb      	ldr	r3, [r7, #8]
    3e10:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3e12:	88fb      	ldrh	r3, [r7, #6]
    3e14:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3e16:	f107 0310 	add.w	r3, r7, #16
    3e1a:	4619      	mov	r1, r3
    3e1c:	69f8      	ldr	r0, [r7, #28]
    3e1e:	4b05      	ldr	r3, [pc, #20]	; (3e34 <_spi_m_sync_io_write+0x54>)
    3e20:	4798      	blx	r3
    3e22:	4603      	mov	r3, r0
}
    3e24:	4618      	mov	r0, r3
    3e26:	3720      	adds	r7, #32
    3e28:	46bd      	mov	sp, r7
    3e2a:	bd80      	pop	{r7, pc}
    3e2c:	0001b728 	.word	0x0001b728
    3e30:	00004d25 	.word	0x00004d25
    3e34:	00003e39 	.word	0x00003e39

00003e38 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3e38:	b580      	push	{r7, lr}
    3e3a:	b086      	sub	sp, #24
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
    3e40:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	2b00      	cmp	r3, #0
    3e46:	d004      	beq.n	3e52 <spi_m_sync_transfer+0x1a>
    3e48:	683b      	ldr	r3, [r7, #0]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d001      	beq.n	3e52 <spi_m_sync_transfer+0x1a>
    3e4e:	2301      	movs	r3, #1
    3e50:	e000      	b.n	3e54 <spi_m_sync_transfer+0x1c>
    3e52:	2300      	movs	r3, #0
    3e54:	f003 0301 	and.w	r3, r3, #1
    3e58:	b2db      	uxtb	r3, r3
    3e5a:	22b3      	movs	r2, #179	; 0xb3
    3e5c:	490c      	ldr	r1, [pc, #48]	; (3e90 <spi_m_sync_transfer+0x58>)
    3e5e:	4618      	mov	r0, r3
    3e60:	4b0c      	ldr	r3, [pc, #48]	; (3e94 <spi_m_sync_transfer+0x5c>)
    3e62:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3e6a:	683b      	ldr	r3, [r7, #0]
    3e6c:	685b      	ldr	r3, [r3, #4]
    3e6e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3e70:	683b      	ldr	r3, [r7, #0]
    3e72:	689b      	ldr	r3, [r3, #8]
    3e74:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	3304      	adds	r3, #4
    3e7a:	f107 020c 	add.w	r2, r7, #12
    3e7e:	4611      	mov	r1, r2
    3e80:	4618      	mov	r0, r3
    3e82:	4b05      	ldr	r3, [pc, #20]	; (3e98 <spi_m_sync_transfer+0x60>)
    3e84:	4798      	blx	r3
    3e86:	4603      	mov	r3, r0
}
    3e88:	4618      	mov	r0, r3
    3e8a:	3718      	adds	r7, #24
    3e8c:	46bd      	mov	sp, r7
    3e8e:	bd80      	pop	{r7, pc}
    3e90:	0001b728 	.word	0x0001b728
    3e94:	00004d25 	.word	0x00004d25
    3e98:	00008d91 	.word	0x00008d91

00003e9c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
    3ea4:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d004      	beq.n	3eb6 <spi_m_sync_get_io_descriptor+0x1a>
    3eac:	683b      	ldr	r3, [r7, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d001      	beq.n	3eb6 <spi_m_sync_get_io_descriptor+0x1a>
    3eb2:	2301      	movs	r3, #1
    3eb4:	e000      	b.n	3eb8 <spi_m_sync_get_io_descriptor+0x1c>
    3eb6:	2300      	movs	r3, #0
    3eb8:	f003 0301 	and.w	r3, r3, #1
    3ebc:	b2db      	uxtb	r3, r3
    3ebe:	22bd      	movs	r2, #189	; 0xbd
    3ec0:	4906      	ldr	r1, [pc, #24]	; (3edc <spi_m_sync_get_io_descriptor+0x40>)
    3ec2:	4618      	mov	r0, r3
    3ec4:	4b06      	ldr	r3, [pc, #24]	; (3ee0 <spi_m_sync_get_io_descriptor+0x44>)
    3ec6:	4798      	blx	r3
	*io = &spi->io;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	f103 020c 	add.w	r2, r3, #12
    3ece:	683b      	ldr	r3, [r7, #0]
    3ed0:	601a      	str	r2, [r3, #0]
	return 0;
    3ed2:	2300      	movs	r3, #0
}
    3ed4:	4618      	mov	r0, r3
    3ed6:	3708      	adds	r7, #8
    3ed8:	46bd      	mov	sp, r7
    3eda:	bd80      	pop	{r7, pc}
    3edc:	0001b728 	.word	0x0001b728
    3ee0:	00004d25 	.word	0x00004d25

00003ee4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3ee4:	b480      	push	{r7}
    3ee6:	b083      	sub	sp, #12
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	681b      	ldr	r3, [r3, #0]
}
    3ef0:	4618      	mov	r0, r3
    3ef2:	370c      	adds	r7, #12
    3ef4:	46bd      	mov	sp, r7
    3ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efa:	4770      	bx	lr

00003efc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3efc:	b480      	push	{r7}
    3efe:	b083      	sub	sp, #12
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d002      	beq.n	3f10 <list_get_next_element+0x14>
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	681b      	ldr	r3, [r3, #0]
    3f0e:	e000      	b.n	3f12 <list_get_next_element+0x16>
    3f10:	2300      	movs	r3, #0
}
    3f12:	4618      	mov	r0, r3
    3f14:	370c      	adds	r7, #12
    3f16:	46bd      	mov	sp, r7
    3f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1c:	4770      	bx	lr
	...

00003f20 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3f20:	b580      	push	{r7, lr}
    3f22:	b084      	sub	sp, #16
    3f24:	af00      	add	r7, sp, #0
    3f26:	60f8      	str	r0, [r7, #12]
    3f28:	60b9      	str	r1, [r7, #8]
    3f2a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3f2c:	68fb      	ldr	r3, [r7, #12]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d007      	beq.n	3f42 <timer_init+0x22>
    3f32:	68bb      	ldr	r3, [r7, #8]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d004      	beq.n	3f42 <timer_init+0x22>
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d001      	beq.n	3f42 <timer_init+0x22>
    3f3e:	2301      	movs	r3, #1
    3f40:	e000      	b.n	3f44 <timer_init+0x24>
    3f42:	2300      	movs	r3, #0
    3f44:	f003 0301 	and.w	r3, r3, #1
    3f48:	b2db      	uxtb	r3, r3
    3f4a:	223b      	movs	r2, #59	; 0x3b
    3f4c:	490c      	ldr	r1, [pc, #48]	; (3f80 <timer_init+0x60>)
    3f4e:	4618      	mov	r0, r3
    3f50:	4b0c      	ldr	r3, [pc, #48]	; (3f84 <timer_init+0x64>)
    3f52:	4798      	blx	r3
	descr->func = func;
    3f54:	68fb      	ldr	r3, [r7, #12]
    3f56:	687a      	ldr	r2, [r7, #4]
    3f58:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3f5a:	68fb      	ldr	r3, [r7, #12]
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	68fa      	ldr	r2, [r7, #12]
    3f62:	3204      	adds	r2, #4
    3f64:	68b9      	ldr	r1, [r7, #8]
    3f66:	4610      	mov	r0, r2
    3f68:	4798      	blx	r3
	descr->time                           = 0;
    3f6a:	68fb      	ldr	r3, [r7, #12]
    3f6c:	2200      	movs	r2, #0
    3f6e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3f70:	68fb      	ldr	r3, [r7, #12]
    3f72:	4a05      	ldr	r2, [pc, #20]	; (3f88 <timer_init+0x68>)
    3f74:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3f76:	2300      	movs	r3, #0
}
    3f78:	4618      	mov	r0, r3
    3f7a:	3710      	adds	r7, #16
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	0001b744 	.word	0x0001b744
    3f84:	00004d25 	.word	0x00004d25
    3f88:	00004311 	.word	0x00004311

00003f8c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b082      	sub	sp, #8
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d005      	beq.n	3fa6 <timer_start+0x1a>
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d001      	beq.n	3fa6 <timer_start+0x1a>
    3fa2:	2301      	movs	r3, #1
    3fa4:	e000      	b.n	3fa8 <timer_start+0x1c>
    3fa6:	2300      	movs	r3, #0
    3fa8:	f003 0301 	and.w	r3, r3, #1
    3fac:	b2db      	uxtb	r3, r3
    3fae:	2254      	movs	r2, #84	; 0x54
    3fb0:	490e      	ldr	r1, [pc, #56]	; (3fec <timer_start+0x60>)
    3fb2:	4618      	mov	r0, r3
    3fb4:	4b0e      	ldr	r3, [pc, #56]	; (3ff0 <timer_start+0x64>)
    3fb6:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	699b      	ldr	r3, [r3, #24]
    3fbe:	687a      	ldr	r2, [r7, #4]
    3fc0:	3204      	adds	r2, #4
    3fc2:	4610      	mov	r0, r2
    3fc4:	4798      	blx	r3
    3fc6:	4603      	mov	r3, r0
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d002      	beq.n	3fd2 <timer_start+0x46>
		return ERR_DENIED;
    3fcc:	f06f 0310 	mvn.w	r3, #16
    3fd0:	e007      	b.n	3fe2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	681b      	ldr	r3, [r3, #0]
    3fd6:	689b      	ldr	r3, [r3, #8]
    3fd8:	687a      	ldr	r2, [r7, #4]
    3fda:	3204      	adds	r2, #4
    3fdc:	4610      	mov	r0, r2
    3fde:	4798      	blx	r3

	return ERR_NONE;
    3fe0:	2300      	movs	r3, #0
}
    3fe2:	4618      	mov	r0, r3
    3fe4:	3708      	adds	r7, #8
    3fe6:	46bd      	mov	sp, r7
    3fe8:	bd80      	pop	{r7, pc}
    3fea:	bf00      	nop
    3fec:	0001b744 	.word	0x0001b744
    3ff0:	00004d25 	.word	0x00004d25

00003ff4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	b082      	sub	sp, #8
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d005      	beq.n	400e <timer_stop+0x1a>
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	681b      	ldr	r3, [r3, #0]
    4006:	2b00      	cmp	r3, #0
    4008:	d001      	beq.n	400e <timer_stop+0x1a>
    400a:	2301      	movs	r3, #1
    400c:	e000      	b.n	4010 <timer_stop+0x1c>
    400e:	2300      	movs	r3, #0
    4010:	f003 0301 	and.w	r3, r3, #1
    4014:	b2db      	uxtb	r3, r3
    4016:	2262      	movs	r2, #98	; 0x62
    4018:	490f      	ldr	r1, [pc, #60]	; (4058 <timer_stop+0x64>)
    401a:	4618      	mov	r0, r3
    401c:	4b0f      	ldr	r3, [pc, #60]	; (405c <timer_stop+0x68>)
    401e:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	681b      	ldr	r3, [r3, #0]
    4024:	699b      	ldr	r3, [r3, #24]
    4026:	687a      	ldr	r2, [r7, #4]
    4028:	3204      	adds	r2, #4
    402a:	4610      	mov	r0, r2
    402c:	4798      	blx	r3
    402e:	4603      	mov	r3, r0
    4030:	f083 0301 	eor.w	r3, r3, #1
    4034:	b2db      	uxtb	r3, r3
    4036:	2b00      	cmp	r3, #0
    4038:	d002      	beq.n	4040 <timer_stop+0x4c>
		return ERR_DENIED;
    403a:	f06f 0310 	mvn.w	r3, #16
    403e:	e007      	b.n	4050 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	681b      	ldr	r3, [r3, #0]
    4044:	68db      	ldr	r3, [r3, #12]
    4046:	687a      	ldr	r2, [r7, #4]
    4048:	3204      	adds	r2, #4
    404a:	4610      	mov	r0, r2
    404c:	4798      	blx	r3

	return ERR_NONE;
    404e:	2300      	movs	r3, #0
}
    4050:	4618      	mov	r0, r3
    4052:	3708      	adds	r7, #8
    4054:	46bd      	mov	sp, r7
    4056:	bd80      	pop	{r7, pc}
    4058:	0001b744 	.word	0x0001b744
    405c:	00004d25 	.word	0x00004d25

00004060 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    4060:	b580      	push	{r7, lr}
    4062:	b084      	sub	sp, #16
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
    4068:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	2b00      	cmp	r3, #0
    406e:	d008      	beq.n	4082 <timer_add_task+0x22>
    4070:	683b      	ldr	r3, [r7, #0]
    4072:	2b00      	cmp	r3, #0
    4074:	d005      	beq.n	4082 <timer_add_task+0x22>
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	2b00      	cmp	r3, #0
    407c:	d001      	beq.n	4082 <timer_add_task+0x22>
    407e:	2301      	movs	r3, #1
    4080:	e000      	b.n	4084 <timer_add_task+0x24>
    4082:	2300      	movs	r3, #0
    4084:	f003 0301 	and.w	r3, r3, #1
    4088:	b2db      	uxtb	r3, r3
    408a:	227b      	movs	r2, #123	; 0x7b
    408c:	492f      	ldr	r1, [pc, #188]	; (414c <timer_add_task+0xec>)
    408e:	4618      	mov	r0, r3
    4090:	4b2f      	ldr	r3, [pc, #188]	; (4150 <timer_add_task+0xf0>)
    4092:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4094:	687b      	ldr	r3, [r7, #4]
    4096:	7f1b      	ldrb	r3, [r3, #28]
    4098:	b2db      	uxtb	r3, r3
    409a:	f043 0301 	orr.w	r3, r3, #1
    409e:	b2da      	uxtb	r2, r3
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	3318      	adds	r3, #24
    40a8:	6839      	ldr	r1, [r7, #0]
    40aa:	4618      	mov	r0, r3
    40ac:	4b29      	ldr	r3, [pc, #164]	; (4154 <timer_add_task+0xf4>)
    40ae:	4798      	blx	r3
    40b0:	4603      	mov	r3, r0
    40b2:	2b00      	cmp	r3, #0
    40b4:	d00f      	beq.n	40d6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	7f1b      	ldrb	r3, [r3, #28]
    40ba:	b2db      	uxtb	r3, r3
    40bc:	f023 0301 	bic.w	r3, r3, #1
    40c0:	b2da      	uxtb	r2, r3
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    40c6:	2280      	movs	r2, #128	; 0x80
    40c8:	4920      	ldr	r1, [pc, #128]	; (414c <timer_add_task+0xec>)
    40ca:	2000      	movs	r0, #0
    40cc:	4b20      	ldr	r3, [pc, #128]	; (4150 <timer_add_task+0xf0>)
    40ce:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    40d0:	f06f 0311 	mvn.w	r3, #17
    40d4:	e035      	b.n	4142 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	695a      	ldr	r2, [r3, #20]
    40da:	683b      	ldr	r3, [r7, #0]
    40dc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	f103 0018 	add.w	r0, r3, #24
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	695b      	ldr	r3, [r3, #20]
    40e8:	461a      	mov	r2, r3
    40ea:	6839      	ldr	r1, [r7, #0]
    40ec:	4b1a      	ldr	r3, [pc, #104]	; (4158 <timer_add_task+0xf8>)
    40ee:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	7f1b      	ldrb	r3, [r3, #28]
    40f4:	b2db      	uxtb	r3, r3
    40f6:	f023 0301 	bic.w	r3, r3, #1
    40fa:	b2da      	uxtb	r2, r3
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	7f1b      	ldrb	r3, [r3, #28]
    4104:	b2db      	uxtb	r3, r3
    4106:	f003 0302 	and.w	r3, r3, #2
    410a:	2b00      	cmp	r3, #0
    410c:	d018      	beq.n	4140 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    410e:	f107 030c 	add.w	r3, r7, #12
    4112:	4618      	mov	r0, r3
    4114:	4b11      	ldr	r3, [pc, #68]	; (415c <timer_add_task+0xfc>)
    4116:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	7f1b      	ldrb	r3, [r3, #28]
    411c:	b2db      	uxtb	r3, r3
    411e:	f023 0302 	bic.w	r3, r3, #2
    4122:	b2da      	uxtb	r2, r3
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4128:	687b      	ldr	r3, [r7, #4]
    412a:	681b      	ldr	r3, [r3, #0]
    412c:	69db      	ldr	r3, [r3, #28]
    412e:	687a      	ldr	r2, [r7, #4]
    4130:	3204      	adds	r2, #4
    4132:	4610      	mov	r0, r2
    4134:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4136:	f107 030c 	add.w	r3, r7, #12
    413a:	4618      	mov	r0, r3
    413c:	4b08      	ldr	r3, [pc, #32]	; (4160 <timer_add_task+0x100>)
    413e:	4798      	blx	r3
	}

	return ERR_NONE;
    4140:	2300      	movs	r3, #0
}
    4142:	4618      	mov	r0, r3
    4144:	3710      	adds	r7, #16
    4146:	46bd      	mov	sp, r7
    4148:	bd80      	pop	{r7, pc}
    414a:	bf00      	nop
    414c:	0001b744 	.word	0x0001b744
    4150:	00004d25 	.word	0x00004d25
    4154:	00004d4d 	.word	0x00004d4d
    4158:	00004261 	.word	0x00004261
    415c:	0000d16d 	.word	0x0000d16d
    4160:	0000d193 	.word	0x0000d193

00004164 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    4164:	b580      	push	{r7, lr}
    4166:	b084      	sub	sp, #16
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
    416c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	2b00      	cmp	r3, #0
    4172:	d008      	beq.n	4186 <timer_remove_task+0x22>
    4174:	683b      	ldr	r3, [r7, #0]
    4176:	2b00      	cmp	r3, #0
    4178:	d005      	beq.n	4186 <timer_remove_task+0x22>
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	681b      	ldr	r3, [r3, #0]
    417e:	2b00      	cmp	r3, #0
    4180:	d001      	beq.n	4186 <timer_remove_task+0x22>
    4182:	2301      	movs	r3, #1
    4184:	e000      	b.n	4188 <timer_remove_task+0x24>
    4186:	2300      	movs	r3, #0
    4188:	f003 0301 	and.w	r3, r3, #1
    418c:	b2db      	uxtb	r3, r3
    418e:	2296      	movs	r2, #150	; 0x96
    4190:	492d      	ldr	r1, [pc, #180]	; (4248 <timer_remove_task+0xe4>)
    4192:	4618      	mov	r0, r3
    4194:	4b2d      	ldr	r3, [pc, #180]	; (424c <timer_remove_task+0xe8>)
    4196:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	7f1b      	ldrb	r3, [r3, #28]
    419c:	b2db      	uxtb	r3, r3
    419e:	f043 0301 	orr.w	r3, r3, #1
    41a2:	b2da      	uxtb	r2, r3
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	3318      	adds	r3, #24
    41ac:	6839      	ldr	r1, [r7, #0]
    41ae:	4618      	mov	r0, r3
    41b0:	4b27      	ldr	r3, [pc, #156]	; (4250 <timer_remove_task+0xec>)
    41b2:	4798      	blx	r3
    41b4:	4603      	mov	r3, r0
    41b6:	f083 0301 	eor.w	r3, r3, #1
    41ba:	b2db      	uxtb	r3, r3
    41bc:	2b00      	cmp	r3, #0
    41be:	d00f      	beq.n	41e0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	7f1b      	ldrb	r3, [r3, #28]
    41c4:	b2db      	uxtb	r3, r3
    41c6:	f023 0301 	bic.w	r3, r3, #1
    41ca:	b2da      	uxtb	r2, r3
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    41d0:	229b      	movs	r2, #155	; 0x9b
    41d2:	491d      	ldr	r1, [pc, #116]	; (4248 <timer_remove_task+0xe4>)
    41d4:	2000      	movs	r0, #0
    41d6:	4b1d      	ldr	r3, [pc, #116]	; (424c <timer_remove_task+0xe8>)
    41d8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    41da:	f06f 0309 	mvn.w	r3, #9
    41de:	e02e      	b.n	423e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	3318      	adds	r3, #24
    41e4:	6839      	ldr	r1, [r7, #0]
    41e6:	4618      	mov	r0, r3
    41e8:	4b1a      	ldr	r3, [pc, #104]	; (4254 <timer_remove_task+0xf0>)
    41ea:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	7f1b      	ldrb	r3, [r3, #28]
    41f0:	b2db      	uxtb	r3, r3
    41f2:	f023 0301 	bic.w	r3, r3, #1
    41f6:	b2da      	uxtb	r2, r3
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	7f1b      	ldrb	r3, [r3, #28]
    4200:	b2db      	uxtb	r3, r3
    4202:	f003 0302 	and.w	r3, r3, #2
    4206:	2b00      	cmp	r3, #0
    4208:	d018      	beq.n	423c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    420a:	f107 030c 	add.w	r3, r7, #12
    420e:	4618      	mov	r0, r3
    4210:	4b11      	ldr	r3, [pc, #68]	; (4258 <timer_remove_task+0xf4>)
    4212:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	7f1b      	ldrb	r3, [r3, #28]
    4218:	b2db      	uxtb	r3, r3
    421a:	f023 0302 	bic.w	r3, r3, #2
    421e:	b2da      	uxtb	r2, r3
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	681b      	ldr	r3, [r3, #0]
    4228:	69db      	ldr	r3, [r3, #28]
    422a:	687a      	ldr	r2, [r7, #4]
    422c:	3204      	adds	r2, #4
    422e:	4610      	mov	r0, r2
    4230:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4232:	f107 030c 	add.w	r3, r7, #12
    4236:	4618      	mov	r0, r3
    4238:	4b08      	ldr	r3, [pc, #32]	; (425c <timer_remove_task+0xf8>)
    423a:	4798      	blx	r3
	}

	return ERR_NONE;
    423c:	2300      	movs	r3, #0
}
    423e:	4618      	mov	r0, r3
    4240:	3710      	adds	r7, #16
    4242:	46bd      	mov	sp, r7
    4244:	bd80      	pop	{r7, pc}
    4246:	bf00      	nop
    4248:	0001b744 	.word	0x0001b744
    424c:	00004d25 	.word	0x00004d25
    4250:	00004d4d 	.word	0x00004d4d
    4254:	00004eaf 	.word	0x00004eaf
    4258:	0000d16d 	.word	0x0000d16d
    425c:	0000d193 	.word	0x0000d193

00004260 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4260:	b580      	push	{r7, lr}
    4262:	b088      	sub	sp, #32
    4264:	af00      	add	r7, sp, #0
    4266:	60f8      	str	r0, [r7, #12]
    4268:	60b9      	str	r1, [r7, #8]
    426a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    426c:	2300      	movs	r3, #0
    426e:	61bb      	str	r3, [r7, #24]
    4270:	68f8      	ldr	r0, [r7, #12]
    4272:	4b23      	ldr	r3, [pc, #140]	; (4300 <timer_add_timer_task+0xa0>)
    4274:	4798      	blx	r3
    4276:	6138      	str	r0, [r7, #16]

	if (!head) {
    4278:	693b      	ldr	r3, [r7, #16]
    427a:	2b00      	cmp	r3, #0
    427c:	d104      	bne.n	4288 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    427e:	68b9      	ldr	r1, [r7, #8]
    4280:	68f8      	ldr	r0, [r7, #12]
    4282:	4b20      	ldr	r3, [pc, #128]	; (4304 <timer_add_timer_task+0xa4>)
    4284:	4798      	blx	r3
		return;
    4286:	e037      	b.n	42f8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4288:	693b      	ldr	r3, [r7, #16]
    428a:	61fb      	str	r3, [r7, #28]
    428c:	e022      	b.n	42d4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    428e:	69fb      	ldr	r3, [r7, #28]
    4290:	685a      	ldr	r2, [r3, #4]
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	429a      	cmp	r2, r3
    4296:	d808      	bhi.n	42aa <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4298:	69fb      	ldr	r3, [r7, #28]
    429a:	689a      	ldr	r2, [r3, #8]
    429c:	69fb      	ldr	r3, [r7, #28]
    429e:	6859      	ldr	r1, [r3, #4]
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	1acb      	subs	r3, r1, r3
    42a4:	4413      	add	r3, r2
    42a6:	617b      	str	r3, [r7, #20]
    42a8:	e009      	b.n	42be <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    42aa:	69fb      	ldr	r3, [r7, #28]
    42ac:	689a      	ldr	r2, [r3, #8]
    42ae:	69fb      	ldr	r3, [r7, #28]
    42b0:	685b      	ldr	r3, [r3, #4]
    42b2:	441a      	add	r2, r3
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	425b      	negs	r3, r3
    42b8:	4413      	add	r3, r2
    42ba:	3301      	adds	r3, #1
    42bc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    42be:	68bb      	ldr	r3, [r7, #8]
    42c0:	689a      	ldr	r2, [r3, #8]
    42c2:	697b      	ldr	r3, [r7, #20]
    42c4:	429a      	cmp	r2, r3
    42c6:	d909      	bls.n	42dc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    42c8:	69fb      	ldr	r3, [r7, #28]
    42ca:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    42cc:	69f8      	ldr	r0, [r7, #28]
    42ce:	4b0e      	ldr	r3, [pc, #56]	; (4308 <timer_add_timer_task+0xa8>)
    42d0:	4798      	blx	r3
    42d2:	61f8      	str	r0, [r7, #28]
    42d4:	69fb      	ldr	r3, [r7, #28]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d1d9      	bne.n	428e <timer_add_timer_task+0x2e>
    42da:	e000      	b.n	42de <timer_add_timer_task+0x7e>
			break;
    42dc:	bf00      	nop
	}

	if (it == head) {
    42de:	69fa      	ldr	r2, [r7, #28]
    42e0:	693b      	ldr	r3, [r7, #16]
    42e2:	429a      	cmp	r2, r3
    42e4:	d104      	bne.n	42f0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    42e6:	68b9      	ldr	r1, [r7, #8]
    42e8:	68f8      	ldr	r0, [r7, #12]
    42ea:	4b06      	ldr	r3, [pc, #24]	; (4304 <timer_add_timer_task+0xa4>)
    42ec:	4798      	blx	r3
    42ee:	e003      	b.n	42f8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    42f0:	68b9      	ldr	r1, [r7, #8]
    42f2:	69b8      	ldr	r0, [r7, #24]
    42f4:	4b05      	ldr	r3, [pc, #20]	; (430c <timer_add_timer_task+0xac>)
    42f6:	4798      	blx	r3
	}
}
    42f8:	3720      	adds	r7, #32
    42fa:	46bd      	mov	sp, r7
    42fc:	bd80      	pop	{r7, pc}
    42fe:	bf00      	nop
    4300:	00003ee5 	.word	0x00003ee5
    4304:	00004d85 	.word	0x00004d85
    4308:	00003efd 	.word	0x00003efd
    430c:	00004ddd 	.word	0x00004ddd

00004310 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4310:	b580      	push	{r7, lr}
    4312:	b086      	sub	sp, #24
    4314:	af00      	add	r7, sp, #0
    4316:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	3b04      	subs	r3, #4
    431c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    431e:	693b      	ldr	r3, [r7, #16]
    4320:	3318      	adds	r3, #24
    4322:	4618      	mov	r0, r3
    4324:	4b27      	ldr	r3, [pc, #156]	; (43c4 <timer_process_counted+0xb4>)
    4326:	4798      	blx	r3
    4328:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    432a:	693b      	ldr	r3, [r7, #16]
    432c:	695b      	ldr	r3, [r3, #20]
    432e:	1c5a      	adds	r2, r3, #1
    4330:	693b      	ldr	r3, [r7, #16]
    4332:	615a      	str	r2, [r3, #20]
    4334:	693b      	ldr	r3, [r7, #16]
    4336:	695b      	ldr	r3, [r3, #20]
    4338:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    433a:	693b      	ldr	r3, [r7, #16]
    433c:	7f1b      	ldrb	r3, [r3, #28]
    433e:	b2db      	uxtb	r3, r3
    4340:	f003 0301 	and.w	r3, r3, #1
    4344:	2b00      	cmp	r3, #0
    4346:	d106      	bne.n	4356 <timer_process_counted+0x46>
    4348:	693b      	ldr	r3, [r7, #16]
    434a:	7f1b      	ldrb	r3, [r3, #28]
    434c:	b2db      	uxtb	r3, r3
    434e:	f003 0302 	and.w	r3, r3, #2
    4352:	2b00      	cmp	r3, #0
    4354:	d027      	beq.n	43a6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4356:	693b      	ldr	r3, [r7, #16]
    4358:	7f1b      	ldrb	r3, [r3, #28]
    435a:	b2db      	uxtb	r3, r3
    435c:	f043 0302 	orr.w	r3, r3, #2
    4360:	b2da      	uxtb	r2, r3
    4362:	693b      	ldr	r3, [r7, #16]
    4364:	771a      	strb	r2, [r3, #28]
		return;
    4366:	e029      	b.n	43bc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4368:	697b      	ldr	r3, [r7, #20]
    436a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    436c:	693b      	ldr	r3, [r7, #16]
    436e:	3318      	adds	r3, #24
    4370:	4618      	mov	r0, r3
    4372:	4b15      	ldr	r3, [pc, #84]	; (43c8 <timer_process_counted+0xb8>)
    4374:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4376:	68bb      	ldr	r3, [r7, #8]
    4378:	7c1b      	ldrb	r3, [r3, #16]
    437a:	2b01      	cmp	r3, #1
    437c:	d109      	bne.n	4392 <timer_process_counted+0x82>
			tmp->time_label = time;
    437e:	68bb      	ldr	r3, [r7, #8]
    4380:	68fa      	ldr	r2, [r7, #12]
    4382:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4384:	693b      	ldr	r3, [r7, #16]
    4386:	3318      	adds	r3, #24
    4388:	68fa      	ldr	r2, [r7, #12]
    438a:	68b9      	ldr	r1, [r7, #8]
    438c:	4618      	mov	r0, r3
    438e:	4b0f      	ldr	r3, [pc, #60]	; (43cc <timer_process_counted+0xbc>)
    4390:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4392:	693b      	ldr	r3, [r7, #16]
    4394:	3318      	adds	r3, #24
    4396:	4618      	mov	r0, r3
    4398:	4b0a      	ldr	r3, [pc, #40]	; (43c4 <timer_process_counted+0xb4>)
    439a:	4798      	blx	r3
    439c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    439e:	68bb      	ldr	r3, [r7, #8]
    43a0:	68db      	ldr	r3, [r3, #12]
    43a2:	68b8      	ldr	r0, [r7, #8]
    43a4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    43a6:	697b      	ldr	r3, [r7, #20]
    43a8:	2b00      	cmp	r3, #0
    43aa:	d007      	beq.n	43bc <timer_process_counted+0xac>
    43ac:	697b      	ldr	r3, [r7, #20]
    43ae:	685b      	ldr	r3, [r3, #4]
    43b0:	68fa      	ldr	r2, [r7, #12]
    43b2:	1ad2      	subs	r2, r2, r3
    43b4:	697b      	ldr	r3, [r7, #20]
    43b6:	689b      	ldr	r3, [r3, #8]
    43b8:	429a      	cmp	r2, r3
    43ba:	d2d5      	bcs.n	4368 <timer_process_counted+0x58>
	}
}
    43bc:	3718      	adds	r7, #24
    43be:	46bd      	mov	sp, r7
    43c0:	bd80      	pop	{r7, pc}
    43c2:	bf00      	nop
    43c4:	00003ee5 	.word	0x00003ee5
    43c8:	00004e7d 	.word	0x00004e7d
    43cc:	00004261 	.word	0x00004261

000043d0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    43d0:	b480      	push	{r7}
    43d2:	b085      	sub	sp, #20
    43d4:	af00      	add	r7, sp, #0
    43d6:	4603      	mov	r3, r0
    43d8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    43da:	2300      	movs	r3, #0
    43dc:	73fb      	strb	r3, [r7, #15]
    43de:	e029      	b.n	4434 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    43e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43e4:	4a19      	ldr	r2, [pc, #100]	; (444c <_usb_d_find_ep+0x7c>)
    43e6:	015b      	lsls	r3, r3, #5
    43e8:	4413      	add	r3, r2
    43ea:	3301      	adds	r3, #1
    43ec:	781b      	ldrb	r3, [r3, #0]
    43ee:	79fa      	ldrb	r2, [r7, #7]
    43f0:	429a      	cmp	r2, r3
    43f2:	d102      	bne.n	43fa <_usb_d_find_ep+0x2a>
			return i;
    43f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43f8:	e022      	b.n	4440 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    43fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43fe:	4a13      	ldr	r2, [pc, #76]	; (444c <_usb_d_find_ep+0x7c>)
    4400:	015b      	lsls	r3, r3, #5
    4402:	4413      	add	r3, r2
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d10e      	bne.n	4428 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    440a:	79fb      	ldrb	r3, [r7, #7]
    440c:	f003 030f 	and.w	r3, r3, #15
    4410:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4414:	490d      	ldr	r1, [pc, #52]	; (444c <_usb_d_find_ep+0x7c>)
    4416:	0152      	lsls	r2, r2, #5
    4418:	440a      	add	r2, r1
    441a:	3201      	adds	r2, #1
    441c:	7812      	ldrb	r2, [r2, #0]
    441e:	4293      	cmp	r3, r2
    4420:	d102      	bne.n	4428 <_usb_d_find_ep+0x58>
			return i;
    4422:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4426:	e00b      	b.n	4440 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4428:	f997 300f 	ldrsb.w	r3, [r7, #15]
    442c:	b2db      	uxtb	r3, r3
    442e:	3301      	adds	r3, #1
    4430:	b2db      	uxtb	r3, r3
    4432:	73fb      	strb	r3, [r7, #15]
    4434:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4438:	2b03      	cmp	r3, #3
    443a:	ddd1      	ble.n	43e0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    443c:	f04f 33ff 	mov.w	r3, #4294967295
}
    4440:	4618      	mov	r0, r3
    4442:	3714      	adds	r7, #20
    4444:	46bd      	mov	sp, r7
    4446:	f85d 7b04 	ldr.w	r7, [sp], #4
    444a:	4770      	bx	lr
    444c:	20002224 	.word	0x20002224

00004450 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    4450:	b580      	push	{r7, lr}
    4452:	b088      	sub	sp, #32
    4454:	af00      	add	r7, sp, #0
    4456:	60ba      	str	r2, [r7, #8]
    4458:	607b      	str	r3, [r7, #4]
    445a:	4603      	mov	r3, r0
    445c:	73fb      	strb	r3, [r7, #15]
    445e:	460b      	mov	r3, r1
    4460:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    4462:	68bb      	ldr	r3, [r7, #8]
    4464:	617b      	str	r3, [r7, #20]
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	61bb      	str	r3, [r7, #24]
    446a:	7bbb      	ldrb	r3, [r7, #14]
    446c:	2b00      	cmp	r3, #0
    446e:	d004      	beq.n	447a <_usb_d_trans+0x2a>
    4470:	7bfb      	ldrb	r3, [r7, #15]
    4472:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4476:	b2db      	uxtb	r3, r3
    4478:	e003      	b.n	4482 <_usb_d_trans+0x32>
    447a:	7bfb      	ldrb	r3, [r7, #15]
    447c:	f003 030f 	and.w	r3, r3, #15
    4480:	b2db      	uxtb	r3, r3
    4482:	773b      	strb	r3, [r7, #28]
    4484:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4488:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    448a:	f107 0314 	add.w	r3, r7, #20
    448e:	4618      	mov	r0, r3
    4490:	4b03      	ldr	r3, [pc, #12]	; (44a0 <_usb_d_trans+0x50>)
    4492:	4798      	blx	r3
    4494:	4603      	mov	r3, r0
}
    4496:	4618      	mov	r0, r3
    4498:	3720      	adds	r7, #32
    449a:	46bd      	mov	sp, r7
    449c:	bd80      	pop	{r7, pc}
    449e:	bf00      	nop
    44a0:	0000c7a1 	.word	0x0000c7a1

000044a4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    44a4:	b480      	push	{r7}
    44a6:	b085      	sub	sp, #20
    44a8:	af00      	add	r7, sp, #0
    44aa:	60f8      	str	r0, [r7, #12]
    44ac:	60b9      	str	r1, [r7, #8]
    44ae:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    44b0:	2300      	movs	r3, #0
}
    44b2:	4618      	mov	r0, r3
    44b4:	3714      	adds	r7, #20
    44b6:	46bd      	mov	sp, r7
    44b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44bc:	4770      	bx	lr
	...

000044c0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b086      	sub	sp, #24
    44c4:	af00      	add	r7, sp, #0
    44c6:	4603      	mov	r3, r0
    44c8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    44ca:	79fb      	ldrb	r3, [r7, #7]
    44cc:	4618      	mov	r0, r3
    44ce:	4b2a      	ldr	r3, [pc, #168]	; (4578 <usb_d_cb_trans_setup+0xb8>)
    44d0:	4798      	blx	r3
    44d2:	4603      	mov	r3, r0
    44d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    44d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    44da:	015b      	lsls	r3, r3, #5
    44dc:	4a27      	ldr	r2, [pc, #156]	; (457c <usb_d_cb_trans_setup+0xbc>)
    44de:	4413      	add	r3, r2
    44e0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    44e2:	693b      	ldr	r3, [r7, #16]
    44e4:	330c      	adds	r3, #12
    44e6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    44e8:	79fb      	ldrb	r3, [r7, #7]
    44ea:	68f9      	ldr	r1, [r7, #12]
    44ec:	4618      	mov	r0, r3
    44ee:	4b24      	ldr	r3, [pc, #144]	; (4580 <usb_d_cb_trans_setup+0xc0>)
    44f0:	4798      	blx	r3
    44f2:	4603      	mov	r3, r0
    44f4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    44f6:	7afb      	ldrb	r3, [r7, #11]
    44f8:	2b08      	cmp	r3, #8
    44fa:	d00d      	beq.n	4518 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    44fc:	79fb      	ldrb	r3, [r7, #7]
    44fe:	2101      	movs	r1, #1
    4500:	4618      	mov	r0, r3
    4502:	4b20      	ldr	r3, [pc, #128]	; (4584 <usb_d_cb_trans_setup+0xc4>)
    4504:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4506:	79fb      	ldrb	r3, [r7, #7]
    4508:	f063 037f 	orn	r3, r3, #127	; 0x7f
    450c:	b2db      	uxtb	r3, r3
    450e:	2101      	movs	r1, #1
    4510:	4618      	mov	r0, r3
    4512:	4b1c      	ldr	r3, [pc, #112]	; (4584 <usb_d_cb_trans_setup+0xc4>)
    4514:	4798      	blx	r3
		return;
    4516:	e02b      	b.n	4570 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4518:	79fb      	ldrb	r3, [r7, #7]
    451a:	2100      	movs	r1, #0
    451c:	4618      	mov	r0, r3
    451e:	4b19      	ldr	r3, [pc, #100]	; (4584 <usb_d_cb_trans_setup+0xc4>)
    4520:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4522:	79fb      	ldrb	r3, [r7, #7]
    4524:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4528:	b2db      	uxtb	r3, r3
    452a:	2100      	movs	r1, #0
    452c:	4618      	mov	r0, r3
    452e:	4b15      	ldr	r3, [pc, #84]	; (4584 <usb_d_cb_trans_setup+0xc4>)
    4530:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4532:	693b      	ldr	r3, [r7, #16]
    4534:	2201      	movs	r2, #1
    4536:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4538:	693b      	ldr	r3, [r7, #16]
    453a:	695b      	ldr	r3, [r3, #20]
    453c:	79fa      	ldrb	r2, [r7, #7]
    453e:	68f9      	ldr	r1, [r7, #12]
    4540:	4610      	mov	r0, r2
    4542:	4798      	blx	r3
    4544:	4603      	mov	r3, r0
    4546:	f083 0301 	eor.w	r3, r3, #1
    454a:	b2db      	uxtb	r3, r3
    454c:	2b00      	cmp	r3, #0
    454e:	d00f      	beq.n	4570 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4550:	693b      	ldr	r3, [r7, #16]
    4552:	2205      	movs	r2, #5
    4554:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4556:	79fb      	ldrb	r3, [r7, #7]
    4558:	2101      	movs	r1, #1
    455a:	4618      	mov	r0, r3
    455c:	4b09      	ldr	r3, [pc, #36]	; (4584 <usb_d_cb_trans_setup+0xc4>)
    455e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4560:	79fb      	ldrb	r3, [r7, #7]
    4562:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4566:	b2db      	uxtb	r3, r3
    4568:	2101      	movs	r1, #1
    456a:	4618      	mov	r0, r3
    456c:	4b05      	ldr	r3, [pc, #20]	; (4584 <usb_d_cb_trans_setup+0xc4>)
    456e:	4798      	blx	r3
	}
}
    4570:	3718      	adds	r7, #24
    4572:	46bd      	mov	sp, r7
    4574:	bd80      	pop	{r7, pc}
    4576:	bf00      	nop
    4578:	000043d1 	.word	0x000043d1
    457c:	20002224 	.word	0x20002224
    4580:	0000c6f9 	.word	0x0000c6f9
    4584:	0000c571 	.word	0x0000c571

00004588 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4588:	b580      	push	{r7, lr}
    458a:	b084      	sub	sp, #16
    458c:	af00      	add	r7, sp, #0
    458e:	4603      	mov	r3, r0
    4590:	6039      	str	r1, [r7, #0]
    4592:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4594:	79fb      	ldrb	r3, [r7, #7]
    4596:	4618      	mov	r0, r3
    4598:	4b0d      	ldr	r3, [pc, #52]	; (45d0 <usb_d_cb_trans_more+0x48>)
    459a:	4798      	blx	r3
    459c:	4603      	mov	r3, r0
    459e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    45a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45a4:	015b      	lsls	r3, r3, #5
    45a6:	4a0b      	ldr	r2, [pc, #44]	; (45d4 <usb_d_cb_trans_more+0x4c>)
    45a8:	4413      	add	r3, r2
    45aa:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    45ac:	68bb      	ldr	r3, [r7, #8]
    45ae:	789b      	ldrb	r3, [r3, #2]
    45b0:	2b03      	cmp	r3, #3
    45b2:	d107      	bne.n	45c4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    45b4:	68bb      	ldr	r3, [r7, #8]
    45b6:	699b      	ldr	r3, [r3, #24]
    45b8:	79fa      	ldrb	r2, [r7, #7]
    45ba:	6839      	ldr	r1, [r7, #0]
    45bc:	4610      	mov	r0, r2
    45be:	4798      	blx	r3
    45c0:	4603      	mov	r3, r0
    45c2:	e000      	b.n	45c6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    45c4:	2300      	movs	r3, #0
}
    45c6:	4618      	mov	r0, r3
    45c8:	3710      	adds	r7, #16
    45ca:	46bd      	mov	sp, r7
    45cc:	bd80      	pop	{r7, pc}
    45ce:	bf00      	nop
    45d0:	000043d1 	.word	0x000043d1
    45d4:	20002224 	.word	0x20002224

000045d8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    45d8:	b590      	push	{r4, r7, lr}
    45da:	b087      	sub	sp, #28
    45dc:	af02      	add	r7, sp, #8
    45de:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    45e0:	687b      	ldr	r3, [r7, #4]
    45e2:	789b      	ldrb	r3, [r3, #2]
    45e4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	7b1b      	ldrb	r3, [r3, #12]
    45ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    45ee:	2b00      	cmp	r3, #0
    45f0:	bf14      	ite	ne
    45f2:	2301      	movne	r3, #1
    45f4:	2300      	moveq	r3, #0
    45f6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    45f8:	7bfb      	ldrb	r3, [r7, #15]
    45fa:	2b03      	cmp	r3, #3
    45fc:	d13a      	bne.n	4674 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	69db      	ldr	r3, [r3, #28]
    4602:	687a      	ldr	r2, [r7, #4]
    4604:	7850      	ldrb	r0, [r2, #1]
    4606:	687a      	ldr	r2, [r7, #4]
    4608:	320c      	adds	r2, #12
    460a:	2101      	movs	r1, #1
    460c:	4798      	blx	r3
    460e:	4603      	mov	r3, r0
    4610:	737b      	strb	r3, [r7, #13]
		if (err) {
    4612:	7b7b      	ldrb	r3, [r7, #13]
    4614:	2b00      	cmp	r3, #0
    4616:	d015      	beq.n	4644 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	2205      	movs	r2, #5
    461c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    461e:	687b      	ldr	r3, [r7, #4]
    4620:	2202      	movs	r2, #2
    4622:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4624:	7bbb      	ldrb	r3, [r7, #14]
    4626:	2b00      	cmp	r3, #0
    4628:	d002      	beq.n	4630 <usb_d_ctrl_trans_done+0x58>
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	785b      	ldrb	r3, [r3, #1]
    462e:	e004      	b.n	463a <usb_d_ctrl_trans_done+0x62>
    4630:	687b      	ldr	r3, [r7, #4]
    4632:	785b      	ldrb	r3, [r3, #1]
    4634:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4638:	b2db      	uxtb	r3, r3
    463a:	2101      	movs	r1, #1
    463c:	4618      	mov	r0, r3
    463e:	4b15      	ldr	r3, [pc, #84]	; (4694 <usb_d_ctrl_trans_done+0xbc>)
    4640:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    4642:	e022      	b.n	468a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	2204      	movs	r2, #4
    4648:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	7858      	ldrb	r0, [r3, #1]
    464e:	7bbb      	ldrb	r3, [r7, #14]
    4650:	2b00      	cmp	r3, #0
    4652:	bf14      	ite	ne
    4654:	2301      	movne	r3, #1
    4656:	2300      	moveq	r3, #0
    4658:	b2db      	uxtb	r3, r3
    465a:	f083 0301 	eor.w	r3, r3, #1
    465e:	b2db      	uxtb	r3, r3
    4660:	f003 0301 	and.w	r3, r3, #1
    4664:	b2d9      	uxtb	r1, r3
    4666:	2301      	movs	r3, #1
    4668:	9300      	str	r3, [sp, #0]
    466a:	2300      	movs	r3, #0
    466c:	2200      	movs	r2, #0
    466e:	4c0a      	ldr	r4, [pc, #40]	; (4698 <usb_d_ctrl_trans_done+0xc0>)
    4670:	47a0      	blx	r4
}
    4672:	e00a      	b.n	468a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	69db      	ldr	r3, [r3, #28]
    4678:	687a      	ldr	r2, [r7, #4]
    467a:	7850      	ldrb	r0, [r2, #1]
    467c:	687a      	ldr	r2, [r7, #4]
    467e:	320c      	adds	r2, #12
    4680:	2100      	movs	r1, #0
    4682:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	2202      	movs	r2, #2
    4688:	709a      	strb	r2, [r3, #2]
}
    468a:	bf00      	nop
    468c:	3714      	adds	r7, #20
    468e:	46bd      	mov	sp, r7
    4690:	bd90      	pop	{r4, r7, pc}
    4692:	bf00      	nop
    4694:	0000c571 	.word	0x0000c571
    4698:	00004451 	.word	0x00004451

0000469c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    469c:	b580      	push	{r7, lr}
    469e:	b086      	sub	sp, #24
    46a0:	af00      	add	r7, sp, #0
    46a2:	4603      	mov	r3, r0
    46a4:	60b9      	str	r1, [r7, #8]
    46a6:	607a      	str	r2, [r7, #4]
    46a8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    46aa:	7bfb      	ldrb	r3, [r7, #15]
    46ac:	4618      	mov	r0, r3
    46ae:	4b2f      	ldr	r3, [pc, #188]	; (476c <_usb_d_cb_trans_done+0xd0>)
    46b0:	4798      	blx	r3
    46b2:	4603      	mov	r3, r0
    46b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    46b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    46ba:	015b      	lsls	r3, r3, #5
    46bc:	4a2c      	ldr	r2, [pc, #176]	; (4770 <_usb_d_cb_trans_done+0xd4>)
    46be:	4413      	add	r3, r2
    46c0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    46c2:	68bb      	ldr	r3, [r7, #8]
    46c4:	2b00      	cmp	r3, #0
    46c6:	d10e      	bne.n	46e6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    46c8:	693b      	ldr	r3, [r7, #16]
    46ca:	2200      	movs	r2, #0
    46cc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    46ce:	693b      	ldr	r3, [r7, #16]
    46d0:	781b      	ldrb	r3, [r3, #0]
    46d2:	2b00      	cmp	r3, #0
    46d4:	d103      	bne.n	46de <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    46d6:	6938      	ldr	r0, [r7, #16]
    46d8:	4b26      	ldr	r3, [pc, #152]	; (4774 <_usb_d_cb_trans_done+0xd8>)
    46da:	4798      	blx	r3
			return;
    46dc:	e043      	b.n	4766 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    46de:	693b      	ldr	r3, [r7, #16]
    46e0:	2201      	movs	r2, #1
    46e2:	709a      	strb	r2, [r3, #2]
    46e4:	e038      	b.n	4758 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    46e6:	68bb      	ldr	r3, [r7, #8]
    46e8:	2b01      	cmp	r3, #1
    46ea:	d113      	bne.n	4714 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    46ec:	693b      	ldr	r3, [r7, #16]
    46ee:	2202      	movs	r2, #2
    46f0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    46f2:	693b      	ldr	r3, [r7, #16]
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d108      	bne.n	470c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    46fa:	693b      	ldr	r3, [r7, #16]
    46fc:	2202      	movs	r2, #2
    46fe:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4700:	7bfb      	ldrb	r3, [r7, #15]
    4702:	2100      	movs	r1, #0
    4704:	4618      	mov	r0, r3
    4706:	4b1c      	ldr	r3, [pc, #112]	; (4778 <_usb_d_cb_trans_done+0xdc>)
    4708:	4798      	blx	r3
    470a:	e025      	b.n	4758 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    470c:	693b      	ldr	r3, [r7, #16]
    470e:	2205      	movs	r2, #5
    4710:	709a      	strb	r2, [r3, #2]
    4712:	e021      	b.n	4758 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4714:	68bb      	ldr	r3, [r7, #8]
    4716:	2b02      	cmp	r3, #2
    4718:	d10e      	bne.n	4738 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    471a:	693b      	ldr	r3, [r7, #16]
    471c:	2204      	movs	r2, #4
    471e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4720:	693b      	ldr	r3, [r7, #16]
    4722:	781b      	ldrb	r3, [r3, #0]
    4724:	2b00      	cmp	r3, #0
    4726:	d103      	bne.n	4730 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4728:	693b      	ldr	r3, [r7, #16]
    472a:	2202      	movs	r2, #2
    472c:	709a      	strb	r2, [r3, #2]
			return;
    472e:	e01a      	b.n	4766 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4730:	693b      	ldr	r3, [r7, #16]
    4732:	2201      	movs	r2, #1
    4734:	709a      	strb	r2, [r3, #2]
    4736:	e00f      	b.n	4758 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    4738:	68bb      	ldr	r3, [r7, #8]
    473a:	2b03      	cmp	r3, #3
    473c:	d106      	bne.n	474c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    473e:	693b      	ldr	r3, [r7, #16]
    4740:	2200      	movs	r2, #0
    4742:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4744:	693b      	ldr	r3, [r7, #16]
    4746:	2205      	movs	r2, #5
    4748:	70da      	strb	r2, [r3, #3]
    474a:	e005      	b.n	4758 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    474c:	693b      	ldr	r3, [r7, #16]
    474e:	2206      	movs	r2, #6
    4750:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4752:	693b      	ldr	r3, [r7, #16]
    4754:	2206      	movs	r2, #6
    4756:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4758:	693b      	ldr	r3, [r7, #16]
    475a:	69db      	ldr	r3, [r3, #28]
    475c:	693a      	ldr	r2, [r7, #16]
    475e:	78d1      	ldrb	r1, [r2, #3]
    4760:	687a      	ldr	r2, [r7, #4]
    4762:	7bf8      	ldrb	r0, [r7, #15]
    4764:	4798      	blx	r3
}
    4766:	3718      	adds	r7, #24
    4768:	46bd      	mov	sp, r7
    476a:	bd80      	pop	{r7, pc}
    476c:	000043d1 	.word	0x000043d1
    4770:	20002224 	.word	0x20002224
    4774:	000045d9 	.word	0x000045d9
    4778:	0000c571 	.word	0x0000c571

0000477c <usb_d_init>:

int32_t usb_d_init(void)
{
    477c:	b580      	push	{r7, lr}
    477e:	b082      	sub	sp, #8
    4780:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    4782:	4b21      	ldr	r3, [pc, #132]	; (4808 <usb_d_init+0x8c>)
    4784:	4798      	blx	r3
    4786:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    4788:	683b      	ldr	r3, [r7, #0]
    478a:	2b00      	cmp	r3, #0
    478c:	da01      	bge.n	4792 <usb_d_init+0x16>
		return rc;
    478e:	683b      	ldr	r3, [r7, #0]
    4790:	e036      	b.n	4800 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4792:	2280      	movs	r2, #128	; 0x80
    4794:	2100      	movs	r1, #0
    4796:	481d      	ldr	r0, [pc, #116]	; (480c <usb_d_init+0x90>)
    4798:	4b1d      	ldr	r3, [pc, #116]	; (4810 <usb_d_init+0x94>)
    479a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    479c:	2300      	movs	r3, #0
    479e:	71fb      	strb	r3, [r7, #7]
    47a0:	e01e      	b.n	47e0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    47a2:	79fb      	ldrb	r3, [r7, #7]
    47a4:	4a19      	ldr	r2, [pc, #100]	; (480c <usb_d_init+0x90>)
    47a6:	015b      	lsls	r3, r3, #5
    47a8:	4413      	add	r3, r2
    47aa:	3301      	adds	r3, #1
    47ac:	22ff      	movs	r2, #255	; 0xff
    47ae:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    47b0:	79fb      	ldrb	r3, [r7, #7]
    47b2:	4a16      	ldr	r2, [pc, #88]	; (480c <usb_d_init+0x90>)
    47b4:	015b      	lsls	r3, r3, #5
    47b6:	4413      	add	r3, r2
    47b8:	3314      	adds	r3, #20
    47ba:	4a16      	ldr	r2, [pc, #88]	; (4814 <usb_d_init+0x98>)
    47bc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    47be:	79fb      	ldrb	r3, [r7, #7]
    47c0:	4a12      	ldr	r2, [pc, #72]	; (480c <usb_d_init+0x90>)
    47c2:	015b      	lsls	r3, r3, #5
    47c4:	4413      	add	r3, r2
    47c6:	3318      	adds	r3, #24
    47c8:	4a12      	ldr	r2, [pc, #72]	; (4814 <usb_d_init+0x98>)
    47ca:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    47cc:	79fb      	ldrb	r3, [r7, #7]
    47ce:	4a0f      	ldr	r2, [pc, #60]	; (480c <usb_d_init+0x90>)
    47d0:	015b      	lsls	r3, r3, #5
    47d2:	4413      	add	r3, r2
    47d4:	331c      	adds	r3, #28
    47d6:	4a0f      	ldr	r2, [pc, #60]	; (4814 <usb_d_init+0x98>)
    47d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    47da:	79fb      	ldrb	r3, [r7, #7]
    47dc:	3301      	adds	r3, #1
    47de:	71fb      	strb	r3, [r7, #7]
    47e0:	79fb      	ldrb	r3, [r7, #7]
    47e2:	2b03      	cmp	r3, #3
    47e4:	d9dd      	bls.n	47a2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    47e6:	490c      	ldr	r1, [pc, #48]	; (4818 <usb_d_init+0x9c>)
    47e8:	2000      	movs	r0, #0
    47ea:	4b0c      	ldr	r3, [pc, #48]	; (481c <usb_d_init+0xa0>)
    47ec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    47ee:	490c      	ldr	r1, [pc, #48]	; (4820 <usb_d_init+0xa4>)
    47f0:	2001      	movs	r0, #1
    47f2:	4b0a      	ldr	r3, [pc, #40]	; (481c <usb_d_init+0xa0>)
    47f4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    47f6:	490b      	ldr	r1, [pc, #44]	; (4824 <usb_d_init+0xa8>)
    47f8:	2002      	movs	r0, #2
    47fa:	4b08      	ldr	r3, [pc, #32]	; (481c <usb_d_init+0xa0>)
    47fc:	4798      	blx	r3
	return ERR_NONE;
    47fe:	2300      	movs	r3, #0
}
    4800:	4618      	mov	r0, r3
    4802:	3708      	adds	r7, #8
    4804:	46bd      	mov	sp, r7
    4806:	bd80      	pop	{r7, pc}
    4808:	0000bdb9 	.word	0x0000bdb9
    480c:	20002224 	.word	0x20002224
    4810:	0001b215 	.word	0x0001b215
    4814:	000044a5 	.word	0x000044a5
    4818:	000044c1 	.word	0x000044c1
    481c:	0000ca01 	.word	0x0000ca01
    4820:	00004589 	.word	0x00004589
    4824:	0000469d 	.word	0x0000469d

00004828 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4828:	b580      	push	{r7, lr}
    482a:	b082      	sub	sp, #8
    482c:	af00      	add	r7, sp, #0
    482e:	4603      	mov	r3, r0
    4830:	6039      	str	r1, [r7, #0]
    4832:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4834:	79fb      	ldrb	r3, [r7, #7]
    4836:	6839      	ldr	r1, [r7, #0]
    4838:	4618      	mov	r0, r3
    483a:	4b03      	ldr	r3, [pc, #12]	; (4848 <usb_d_register_callback+0x20>)
    483c:	4798      	blx	r3
}
    483e:	bf00      	nop
    4840:	3708      	adds	r7, #8
    4842:	46bd      	mov	sp, r7
    4844:	bd80      	pop	{r7, pc}
    4846:	bf00      	nop
    4848:	0000c9b9 	.word	0x0000c9b9

0000484c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    484c:	b580      	push	{r7, lr}
    484e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    4850:	4b02      	ldr	r3, [pc, #8]	; (485c <usb_d_enable+0x10>)
    4852:	4798      	blx	r3
    4854:	4603      	mov	r3, r0
}
    4856:	4618      	mov	r0, r3
    4858:	bd80      	pop	{r7, pc}
    485a:	bf00      	nop
    485c:	0000bea9 	.word	0x0000bea9

00004860 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4860:	b580      	push	{r7, lr}
    4862:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    4864:	4b01      	ldr	r3, [pc, #4]	; (486c <usb_d_attach+0xc>)
    4866:	4798      	blx	r3
}
    4868:	bf00      	nop
    486a:	bd80      	pop	{r7, pc}
    486c:	0000bf2d 	.word	0x0000bf2d

00004870 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4870:	b580      	push	{r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
    4876:	4603      	mov	r3, r0
    4878:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    487a:	79fb      	ldrb	r3, [r7, #7]
    487c:	4618      	mov	r0, r3
    487e:	4b03      	ldr	r3, [pc, #12]	; (488c <usb_d_set_address+0x1c>)
    4880:	4798      	blx	r3
}
    4882:	bf00      	nop
    4884:	3708      	adds	r7, #8
    4886:	46bd      	mov	sp, r7
    4888:	bd80      	pop	{r7, pc}
    488a:	bf00      	nop
    488c:	0000bf41 	.word	0x0000bf41

00004890 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    4890:	b580      	push	{r7, lr}
    4892:	b082      	sub	sp, #8
    4894:	af00      	add	r7, sp, #0
    4896:	4603      	mov	r3, r0
    4898:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    489a:	79fb      	ldrb	r3, [r7, #7]
    489c:	b29b      	uxth	r3, r3
    489e:	461a      	mov	r2, r3
    48a0:	2100      	movs	r1, #0
    48a2:	2000      	movs	r0, #0
    48a4:	4b03      	ldr	r3, [pc, #12]	; (48b4 <usb_d_ep0_init+0x24>)
    48a6:	4798      	blx	r3
    48a8:	4603      	mov	r3, r0
}
    48aa:	4618      	mov	r0, r3
    48ac:	3708      	adds	r7, #8
    48ae:	46bd      	mov	sp, r7
    48b0:	bd80      	pop	{r7, pc}
    48b2:	bf00      	nop
    48b4:	000048b9 	.word	0x000048b9

000048b8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    48b8:	b580      	push	{r7, lr}
    48ba:	b086      	sub	sp, #24
    48bc:	af00      	add	r7, sp, #0
    48be:	4603      	mov	r3, r0
    48c0:	71fb      	strb	r3, [r7, #7]
    48c2:	460b      	mov	r3, r1
    48c4:	71bb      	strb	r3, [r7, #6]
    48c6:	4613      	mov	r3, r2
    48c8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    48ca:	79fb      	ldrb	r3, [r7, #7]
    48cc:	4618      	mov	r0, r3
    48ce:	4b1e      	ldr	r3, [pc, #120]	; (4948 <usb_d_ep_init+0x90>)
    48d0:	4798      	blx	r3
    48d2:	4603      	mov	r3, r0
    48d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    48d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    48da:	015b      	lsls	r3, r3, #5
    48dc:	4a1b      	ldr	r2, [pc, #108]	; (494c <usb_d_ep_init+0x94>)
    48de:	4413      	add	r3, r2
    48e0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    48e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    48e6:	2b00      	cmp	r3, #0
    48e8:	db02      	blt.n	48f0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    48ea:	f06f 0313 	mvn.w	r3, #19
    48ee:	e027      	b.n	4940 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    48f0:	20ff      	movs	r0, #255	; 0xff
    48f2:	4b15      	ldr	r3, [pc, #84]	; (4948 <usb_d_ep_init+0x90>)
    48f4:	4798      	blx	r3
    48f6:	4603      	mov	r3, r0
    48f8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    48fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    48fe:	2b00      	cmp	r3, #0
    4900:	da02      	bge.n	4908 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    4902:	f06f 0314 	mvn.w	r3, #20
    4906:	e01b      	b.n	4940 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    4908:	f997 3017 	ldrsb.w	r3, [r7, #23]
    490c:	015b      	lsls	r3, r3, #5
    490e:	4a0f      	ldr	r2, [pc, #60]	; (494c <usb_d_ep_init+0x94>)
    4910:	4413      	add	r3, r2
    4912:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4914:	88ba      	ldrh	r2, [r7, #4]
    4916:	79b9      	ldrb	r1, [r7, #6]
    4918:	79fb      	ldrb	r3, [r7, #7]
    491a:	4618      	mov	r0, r3
    491c:	4b0c      	ldr	r3, [pc, #48]	; (4950 <usb_d_ep_init+0x98>)
    491e:	4798      	blx	r3
    4920:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4922:	68fb      	ldr	r3, [r7, #12]
    4924:	2b00      	cmp	r3, #0
    4926:	da01      	bge.n	492c <usb_d_ep_init+0x74>
		return rc;
    4928:	68fb      	ldr	r3, [r7, #12]
    492a:	e009      	b.n	4940 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    492c:	693b      	ldr	r3, [r7, #16]
    492e:	79fa      	ldrb	r2, [r7, #7]
    4930:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4932:	79bb      	ldrb	r3, [r7, #6]
    4934:	f003 0303 	and.w	r3, r3, #3
    4938:	b2da      	uxtb	r2, r3
    493a:	693b      	ldr	r3, [r7, #16]
    493c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    493e:	2300      	movs	r3, #0
}
    4940:	4618      	mov	r0, r3
    4942:	3718      	adds	r7, #24
    4944:	46bd      	mov	sp, r7
    4946:	bd80      	pop	{r7, pc}
    4948:	000043d1 	.word	0x000043d1
    494c:	20002224 	.word	0x20002224
    4950:	0000bfe1 	.word	0x0000bfe1

00004954 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    4954:	b580      	push	{r7, lr}
    4956:	b084      	sub	sp, #16
    4958:	af00      	add	r7, sp, #0
    495a:	4603      	mov	r3, r0
    495c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    495e:	79fb      	ldrb	r3, [r7, #7]
    4960:	4618      	mov	r0, r3
    4962:	4b0d      	ldr	r3, [pc, #52]	; (4998 <usb_d_ep_deinit+0x44>)
    4964:	4798      	blx	r3
    4966:	4603      	mov	r3, r0
    4968:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    496e:	015b      	lsls	r3, r3, #5
    4970:	4a0a      	ldr	r2, [pc, #40]	; (499c <usb_d_ep_deinit+0x48>)
    4972:	4413      	add	r3, r2
    4974:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4976:	f997 300f 	ldrsb.w	r3, [r7, #15]
    497a:	2b00      	cmp	r3, #0
    497c:	db07      	blt.n	498e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    497e:	79fb      	ldrb	r3, [r7, #7]
    4980:	4618      	mov	r0, r3
    4982:	4b07      	ldr	r3, [pc, #28]	; (49a0 <usb_d_ep_deinit+0x4c>)
    4984:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    4986:	68bb      	ldr	r3, [r7, #8]
    4988:	22ff      	movs	r2, #255	; 0xff
    498a:	705a      	strb	r2, [r3, #1]
    498c:	e000      	b.n	4990 <usb_d_ep_deinit+0x3c>
		return;
    498e:	bf00      	nop
}
    4990:	3710      	adds	r7, #16
    4992:	46bd      	mov	sp, r7
    4994:	bd80      	pop	{r7, pc}
    4996:	bf00      	nop
    4998:	000043d1 	.word	0x000043d1
    499c:	20002224 	.word	0x20002224
    49a0:	0000c115 	.word	0x0000c115

000049a4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    49a4:	b580      	push	{r7, lr}
    49a6:	b086      	sub	sp, #24
    49a8:	af00      	add	r7, sp, #0
    49aa:	4603      	mov	r3, r0
    49ac:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    49ae:	79fb      	ldrb	r3, [r7, #7]
    49b0:	4618      	mov	r0, r3
    49b2:	4b15      	ldr	r3, [pc, #84]	; (4a08 <usb_d_ep_enable+0x64>)
    49b4:	4798      	blx	r3
    49b6:	4603      	mov	r3, r0
    49b8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    49ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    49be:	015b      	lsls	r3, r3, #5
    49c0:	4a12      	ldr	r2, [pc, #72]	; (4a0c <usb_d_ep_enable+0x68>)
    49c2:	4413      	add	r3, r2
    49c4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    49c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    49ca:	2b00      	cmp	r3, #0
    49cc:	da02      	bge.n	49d4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    49ce:	f06f 0311 	mvn.w	r3, #17
    49d2:	e014      	b.n	49fe <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    49d4:	693b      	ldr	r3, [r7, #16]
    49d6:	781b      	ldrb	r3, [r3, #0]
    49d8:	2b00      	cmp	r3, #0
    49da:	d101      	bne.n	49e0 <usb_d_ep_enable+0x3c>
    49dc:	2202      	movs	r2, #2
    49de:	e000      	b.n	49e2 <usb_d_ep_enable+0x3e>
    49e0:	2201      	movs	r2, #1
    49e2:	693b      	ldr	r3, [r7, #16]
    49e4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    49e6:	79fb      	ldrb	r3, [r7, #7]
    49e8:	4618      	mov	r0, r3
    49ea:	4b09      	ldr	r3, [pc, #36]	; (4a10 <usb_d_ep_enable+0x6c>)
    49ec:	4798      	blx	r3
    49ee:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	2b00      	cmp	r3, #0
    49f4:	da02      	bge.n	49fc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    49f6:	693b      	ldr	r3, [r7, #16]
    49f8:	2200      	movs	r2, #0
    49fa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    49fc:	68fb      	ldr	r3, [r7, #12]
}
    49fe:	4618      	mov	r0, r3
    4a00:	3718      	adds	r7, #24
    4a02:	46bd      	mov	sp, r7
    4a04:	bd80      	pop	{r7, pc}
    4a06:	bf00      	nop
    4a08:	000043d1 	.word	0x000043d1
    4a0c:	20002224 	.word	0x20002224
    4a10:	0000c1f9 	.word	0x0000c1f9

00004a14 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    4a14:	b590      	push	{r4, r7, lr}
    4a16:	b08d      	sub	sp, #52	; 0x34
    4a18:	af02      	add	r7, sp, #8
    4a1a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	7a1b      	ldrb	r3, [r3, #8]
    4a20:	4618      	mov	r0, r3
    4a22:	4b51      	ldr	r3, [pc, #324]	; (4b68 <usb_d_ep_transfer+0x154>)
    4a24:	4798      	blx	r3
    4a26:	4603      	mov	r3, r0
    4a28:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    4a2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4a2e:	015b      	lsls	r3, r3, #5
    4a30:	4a4e      	ldr	r2, [pc, #312]	; (4b6c <usb_d_ep_transfer+0x158>)
    4a32:	4413      	add	r3, r2
    4a34:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    4a36:	687b      	ldr	r3, [r7, #4]
    4a38:	7a1b      	ldrb	r3, [r3, #8]
    4a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4a3e:	2b00      	cmp	r3, #0
    4a40:	bf14      	ite	ne
    4a42:	2301      	movne	r3, #1
    4a44:	2300      	moveq	r3, #0
    4a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    4a4a:	687b      	ldr	r3, [r7, #4]
    4a4c:	7a5b      	ldrb	r3, [r3, #9]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	bf14      	ite	ne
    4a52:	2301      	movne	r3, #1
    4a54:	2300      	moveq	r3, #0
    4a56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	685b      	ldr	r3, [r3, #4]
    4a5e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    4a60:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4a64:	2b00      	cmp	r3, #0
    4a66:	da02      	bge.n	4a6e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    4a68:	f06f 0311 	mvn.w	r3, #17
    4a6c:	e077      	b.n	4b5e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    4a6e:	f107 0308 	add.w	r3, r7, #8
    4a72:	4618      	mov	r0, r3
    4a74:	4b3e      	ldr	r3, [pc, #248]	; (4b70 <usb_d_ep_transfer+0x15c>)
    4a76:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    4a78:	69bb      	ldr	r3, [r7, #24]
    4a7a:	789b      	ldrb	r3, [r3, #2]
    4a7c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    4a7e:	7bfb      	ldrb	r3, [r7, #15]
    4a80:	b2db      	uxtb	r3, r3
    4a82:	2b01      	cmp	r3, #1
    4a84:	d10c      	bne.n	4aa0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    4a86:	69bb      	ldr	r3, [r7, #24]
    4a88:	2203      	movs	r2, #3
    4a8a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    4a8c:	f107 0308 	add.w	r3, r7, #8
    4a90:	4618      	mov	r0, r3
    4a92:	4b38      	ldr	r3, [pc, #224]	; (4b74 <usb_d_ep_transfer+0x160>)
    4a94:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4a96:	69bb      	ldr	r3, [r7, #24]
    4a98:	781b      	ldrb	r3, [r3, #0]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d151      	bne.n	4b42 <usb_d_ep_transfer+0x12e>
    4a9e:	e017      	b.n	4ad0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    4aa0:	f107 0308 	add.w	r3, r7, #8
    4aa4:	4618      	mov	r0, r3
    4aa6:	4b33      	ldr	r3, [pc, #204]	; (4b74 <usb_d_ep_transfer+0x160>)
    4aa8:	4798      	blx	r3
		switch (state) {
    4aaa:	7bfb      	ldrb	r3, [r7, #15]
    4aac:	b2db      	uxtb	r3, r3
    4aae:	2b05      	cmp	r3, #5
    4ab0:	d004      	beq.n	4abc <usb_d_ep_transfer+0xa8>
    4ab2:	2b06      	cmp	r3, #6
    4ab4:	d004      	beq.n	4ac0 <usb_d_ep_transfer+0xac>
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d005      	beq.n	4ac6 <usb_d_ep_transfer+0xb2>
    4aba:	e007      	b.n	4acc <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    4abc:	2302      	movs	r3, #2
    4abe:	e04e      	b.n	4b5e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    4ac0:	f06f 030f 	mvn.w	r3, #15
    4ac4:	e04b      	b.n	4b5e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    4ac6:	f06f 0312 	mvn.w	r3, #18
    4aca:	e048      	b.n	4b5e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    4acc:	2301      	movs	r3, #1
    4ace:	e046      	b.n	4b5e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4ad0:	69bb      	ldr	r3, [r7, #24]
    4ad2:	7c9b      	ldrb	r3, [r3, #18]
    4ad4:	b29a      	uxth	r2, r3
    4ad6:	69bb      	ldr	r3, [r7, #24]
    4ad8:	7cdb      	ldrb	r3, [r3, #19]
    4ada:	b29b      	uxth	r3, r3
    4adc:	021b      	lsls	r3, r3, #8
    4ade:	b29b      	uxth	r3, r3
    4ae0:	4413      	add	r3, r2
    4ae2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    4ae4:	8afb      	ldrh	r3, [r7, #22]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d10b      	bne.n	4b02 <usb_d_ep_transfer+0xee>
			dir                 = true;
    4aea:	2301      	movs	r3, #1
    4aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4af0:	2300      	movs	r3, #0
    4af2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    4af4:	2301      	movs	r3, #1
    4af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4afa:	69bb      	ldr	r3, [r7, #24]
    4afc:	2204      	movs	r2, #4
    4afe:	709a      	strb	r2, [r3, #2]
    4b00:	e01f      	b.n	4b42 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    4b02:	69bb      	ldr	r3, [r7, #24]
    4b04:	7b1b      	ldrb	r3, [r3, #12]
    4b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	bf14      	ite	ne
    4b0e:	2301      	movne	r3, #1
    4b10:	2300      	moveq	r3, #0
    4b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    4b16:	8afa      	ldrh	r2, [r7, #22]
    4b18:	6a3b      	ldr	r3, [r7, #32]
    4b1a:	429a      	cmp	r2, r3
    4b1c:	d201      	bcs.n	4b22 <usb_d_ep_transfer+0x10e>
				len = req_len;
    4b1e:	8afb      	ldrh	r3, [r7, #22]
    4b20:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    4b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    4b26:	2b00      	cmp	r3, #0
    4b28:	d008      	beq.n	4b3c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    4b2a:	8afa      	ldrh	r2, [r7, #22]
    4b2c:	6a3b      	ldr	r3, [r7, #32]
    4b2e:	429a      	cmp	r2, r3
    4b30:	bf8c      	ite	hi
    4b32:	2301      	movhi	r3, #1
    4b34:	2300      	movls	r3, #0
    4b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    4b3a:	e002      	b.n	4b42 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4b3c:	2300      	movs	r3, #0
    4b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	7a18      	ldrb	r0, [r3, #8]
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	681a      	ldr	r2, [r3, #0]
    4b4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    4b4e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    4b52:	9300      	str	r3, [sp, #0]
    4b54:	6a3b      	ldr	r3, [r7, #32]
    4b56:	4c08      	ldr	r4, [pc, #32]	; (4b78 <usb_d_ep_transfer+0x164>)
    4b58:	47a0      	blx	r4
    4b5a:	6138      	str	r0, [r7, #16]
	return rc;
    4b5c:	693b      	ldr	r3, [r7, #16]
}
    4b5e:	4618      	mov	r0, r3
    4b60:	372c      	adds	r7, #44	; 0x2c
    4b62:	46bd      	mov	sp, r7
    4b64:	bd90      	pop	{r4, r7, pc}
    4b66:	bf00      	nop
    4b68:	000043d1 	.word	0x000043d1
    4b6c:	20002224 	.word	0x20002224
    4b70:	0000d16d 	.word	0x0000d16d
    4b74:	0000d193 	.word	0x0000d193
    4b78:	00004451 	.word	0x00004451

00004b7c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b084      	sub	sp, #16
    4b80:	af00      	add	r7, sp, #0
    4b82:	4603      	mov	r3, r0
    4b84:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4b86:	79fb      	ldrb	r3, [r7, #7]
    4b88:	4618      	mov	r0, r3
    4b8a:	4b0e      	ldr	r3, [pc, #56]	; (4bc4 <usb_d_ep_abort+0x48>)
    4b8c:	4798      	blx	r3
    4b8e:	4603      	mov	r3, r0
    4b90:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b96:	015b      	lsls	r3, r3, #5
    4b98:	4a0b      	ldr	r2, [pc, #44]	; (4bc8 <usb_d_ep_abort+0x4c>)
    4b9a:	4413      	add	r3, r2
    4b9c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	db0a      	blt.n	4bbc <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4ba6:	79fb      	ldrb	r3, [r7, #7]
    4ba8:	4618      	mov	r0, r3
    4baa:	4b08      	ldr	r3, [pc, #32]	; (4bcc <usb_d_ep_abort+0x50>)
    4bac:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4bae:	68bb      	ldr	r3, [r7, #8]
    4bb0:	2201      	movs	r2, #1
    4bb2:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4bb4:	68bb      	ldr	r3, [r7, #8]
    4bb6:	2204      	movs	r2, #4
    4bb8:	70da      	strb	r2, [r3, #3]
    4bba:	e000      	b.n	4bbe <usb_d_ep_abort+0x42>
		return;
    4bbc:	bf00      	nop
}
    4bbe:	3710      	adds	r7, #16
    4bc0:	46bd      	mov	sp, r7
    4bc2:	bd80      	pop	{r7, pc}
    4bc4:	000043d1 	.word	0x000043d1
    4bc8:	20002224 	.word	0x20002224
    4bcc:	0000c965 	.word	0x0000c965

00004bd0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b086      	sub	sp, #24
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	4603      	mov	r3, r0
    4bd8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4bda:	79fb      	ldrb	r3, [r7, #7]
    4bdc:	4618      	mov	r0, r3
    4bde:	4b1a      	ldr	r3, [pc, #104]	; (4c48 <_usb_d_ep_halt_clr+0x78>)
    4be0:	4798      	blx	r3
    4be2:	4603      	mov	r3, r0
    4be4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4bea:	015b      	lsls	r3, r3, #5
    4bec:	4a17      	ldr	r2, [pc, #92]	; (4c4c <_usb_d_ep_halt_clr+0x7c>)
    4bee:	4413      	add	r3, r2
    4bf0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	da02      	bge.n	4c00 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    4bfa:	f06f 0311 	mvn.w	r3, #17
    4bfe:	e01f      	b.n	4c40 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4c00:	79fb      	ldrb	r3, [r7, #7]
    4c02:	2102      	movs	r1, #2
    4c04:	4618      	mov	r0, r3
    4c06:	4b12      	ldr	r3, [pc, #72]	; (4c50 <_usb_d_ep_halt_clr+0x80>)
    4c08:	4798      	blx	r3
    4c0a:	4603      	mov	r3, r0
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d016      	beq.n	4c3e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4c10:	79fb      	ldrb	r3, [r7, #7]
    4c12:	2100      	movs	r1, #0
    4c14:	4618      	mov	r0, r3
    4c16:	4b0e      	ldr	r3, [pc, #56]	; (4c50 <_usb_d_ep_halt_clr+0x80>)
    4c18:	4798      	blx	r3
    4c1a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	da01      	bge.n	4c26 <_usb_d_ep_halt_clr+0x56>
			return rc;
    4c22:	68fb      	ldr	r3, [r7, #12]
    4c24:	e00c      	b.n	4c40 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4c26:	693b      	ldr	r3, [r7, #16]
    4c28:	2201      	movs	r2, #1
    4c2a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4c2c:	693b      	ldr	r3, [r7, #16]
    4c2e:	2203      	movs	r2, #3
    4c30:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4c32:	693b      	ldr	r3, [r7, #16]
    4c34:	69db      	ldr	r3, [r3, #28]
    4c36:	79f8      	ldrb	r0, [r7, #7]
    4c38:	2200      	movs	r2, #0
    4c3a:	2103      	movs	r1, #3
    4c3c:	4798      	blx	r3
	}
	return ERR_NONE;
    4c3e:	2300      	movs	r3, #0
}
    4c40:	4618      	mov	r0, r3
    4c42:	3718      	adds	r7, #24
    4c44:	46bd      	mov	sp, r7
    4c46:	bd80      	pop	{r7, pc}
    4c48:	000043d1 	.word	0x000043d1
    4c4c:	20002224 	.word	0x20002224
    4c50:	0000c571 	.word	0x0000c571

00004c54 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4c54:	b580      	push	{r7, lr}
    4c56:	b082      	sub	sp, #8
    4c58:	af00      	add	r7, sp, #0
    4c5a:	4603      	mov	r3, r0
    4c5c:	460a      	mov	r2, r1
    4c5e:	71fb      	strb	r3, [r7, #7]
    4c60:	4613      	mov	r3, r2
    4c62:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4c64:	79bb      	ldrb	r3, [r7, #6]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d105      	bne.n	4c76 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4c6a:	79fb      	ldrb	r3, [r7, #7]
    4c6c:	4618      	mov	r0, r3
    4c6e:	4b0c      	ldr	r3, [pc, #48]	; (4ca0 <usb_d_ep_halt+0x4c>)
    4c70:	4798      	blx	r3
    4c72:	4603      	mov	r3, r0
    4c74:	e00f      	b.n	4c96 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4c76:	79bb      	ldrb	r3, [r7, #6]
    4c78:	2b01      	cmp	r3, #1
    4c7a:	d106      	bne.n	4c8a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4c7c:	79fb      	ldrb	r3, [r7, #7]
    4c7e:	2101      	movs	r1, #1
    4c80:	4618      	mov	r0, r3
    4c82:	4b08      	ldr	r3, [pc, #32]	; (4ca4 <usb_d_ep_halt+0x50>)
    4c84:	4798      	blx	r3
    4c86:	4603      	mov	r3, r0
    4c88:	e005      	b.n	4c96 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4c8a:	79fb      	ldrb	r3, [r7, #7]
    4c8c:	2102      	movs	r1, #2
    4c8e:	4618      	mov	r0, r3
    4c90:	4b04      	ldr	r3, [pc, #16]	; (4ca4 <usb_d_ep_halt+0x50>)
    4c92:	4798      	blx	r3
    4c94:	4603      	mov	r3, r0
	}
}
    4c96:	4618      	mov	r0, r3
    4c98:	3708      	adds	r7, #8
    4c9a:	46bd      	mov	sp, r7
    4c9c:	bd80      	pop	{r7, pc}
    4c9e:	bf00      	nop
    4ca0:	00004bd1 	.word	0x00004bd1
    4ca4:	0000c571 	.word	0x0000c571

00004ca8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b086      	sub	sp, #24
    4cac:	af00      	add	r7, sp, #0
    4cae:	4603      	mov	r3, r0
    4cb0:	603a      	str	r2, [r7, #0]
    4cb2:	71fb      	strb	r3, [r7, #7]
    4cb4:	460b      	mov	r3, r1
    4cb6:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4cb8:	79fb      	ldrb	r3, [r7, #7]
    4cba:	4618      	mov	r0, r3
    4cbc:	4b16      	ldr	r3, [pc, #88]	; (4d18 <usb_d_ep_register_callback+0x70>)
    4cbe:	4798      	blx	r3
    4cc0:	4603      	mov	r3, r0
    4cc2:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4cc8:	015b      	lsls	r3, r3, #5
    4cca:	4a14      	ldr	r2, [pc, #80]	; (4d1c <usb_d_ep_register_callback+0x74>)
    4ccc:	4413      	add	r3, r2
    4cce:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4cd0:	683b      	ldr	r3, [r7, #0]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d001      	beq.n	4cda <usb_d_ep_register_callback+0x32>
    4cd6:	683b      	ldr	r3, [r7, #0]
    4cd8:	e000      	b.n	4cdc <usb_d_ep_register_callback+0x34>
    4cda:	4b11      	ldr	r3, [pc, #68]	; (4d20 <usb_d_ep_register_callback+0x78>)
    4cdc:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	db13      	blt.n	4d0e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    4ce6:	79bb      	ldrb	r3, [r7, #6]
    4ce8:	2b01      	cmp	r3, #1
    4cea:	d008      	beq.n	4cfe <usb_d_ep_register_callback+0x56>
    4cec:	2b02      	cmp	r3, #2
    4cee:	d00a      	beq.n	4d06 <usb_d_ep_register_callback+0x5e>
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d000      	beq.n	4cf6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    4cf4:	e00c      	b.n	4d10 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    4cf6:	693b      	ldr	r3, [r7, #16]
    4cf8:	68fa      	ldr	r2, [r7, #12]
    4cfa:	615a      	str	r2, [r3, #20]
		break;
    4cfc:	e008      	b.n	4d10 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4cfe:	693b      	ldr	r3, [r7, #16]
    4d00:	68fa      	ldr	r2, [r7, #12]
    4d02:	619a      	str	r2, [r3, #24]
		break;
    4d04:	e004      	b.n	4d10 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4d06:	693b      	ldr	r3, [r7, #16]
    4d08:	68fa      	ldr	r2, [r7, #12]
    4d0a:	61da      	str	r2, [r3, #28]
		break;
    4d0c:	e000      	b.n	4d10 <usb_d_ep_register_callback+0x68>
		return;
    4d0e:	bf00      	nop
	}
}
    4d10:	3718      	adds	r7, #24
    4d12:	46bd      	mov	sp, r7
    4d14:	bd80      	pop	{r7, pc}
    4d16:	bf00      	nop
    4d18:	000043d1 	.word	0x000043d1
    4d1c:	20002224 	.word	0x20002224
    4d20:	000044a5 	.word	0x000044a5

00004d24 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4d24:	b480      	push	{r7}
    4d26:	b085      	sub	sp, #20
    4d28:	af00      	add	r7, sp, #0
    4d2a:	4603      	mov	r3, r0
    4d2c:	60b9      	str	r1, [r7, #8]
    4d2e:	607a      	str	r2, [r7, #4]
    4d30:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4d32:	7bfb      	ldrb	r3, [r7, #15]
    4d34:	f083 0301 	eor.w	r3, r3, #1
    4d38:	b2db      	uxtb	r3, r3
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d000      	beq.n	4d40 <assert+0x1c>
		__asm("BKPT #0");
    4d3e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4d40:	bf00      	nop
    4d42:	3714      	adds	r7, #20
    4d44:	46bd      	mov	sp, r7
    4d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4a:	4770      	bx	lr

00004d4c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4d4c:	b480      	push	{r7}
    4d4e:	b085      	sub	sp, #20
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
    4d54:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	681b      	ldr	r3, [r3, #0]
    4d5a:	60fb      	str	r3, [r7, #12]
    4d5c:	e008      	b.n	4d70 <is_list_element+0x24>
		if (it == element) {
    4d5e:	68fa      	ldr	r2, [r7, #12]
    4d60:	683b      	ldr	r3, [r7, #0]
    4d62:	429a      	cmp	r2, r3
    4d64:	d101      	bne.n	4d6a <is_list_element+0x1e>
			return true;
    4d66:	2301      	movs	r3, #1
    4d68:	e006      	b.n	4d78 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4d6a:	68fb      	ldr	r3, [r7, #12]
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	60fb      	str	r3, [r7, #12]
    4d70:	68fb      	ldr	r3, [r7, #12]
    4d72:	2b00      	cmp	r3, #0
    4d74:	d1f3      	bne.n	4d5e <is_list_element+0x12>
		}
	}

	return false;
    4d76:	2300      	movs	r3, #0
}
    4d78:	4618      	mov	r0, r3
    4d7a:	3714      	adds	r7, #20
    4d7c:	46bd      	mov	sp, r7
    4d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d82:	4770      	bx	lr

00004d84 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4d84:	b580      	push	{r7, lr}
    4d86:	b082      	sub	sp, #8
    4d88:	af00      	add	r7, sp, #0
    4d8a:	6078      	str	r0, [r7, #4]
    4d8c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4d8e:	6839      	ldr	r1, [r7, #0]
    4d90:	6878      	ldr	r0, [r7, #4]
    4d92:	4b0f      	ldr	r3, [pc, #60]	; (4dd0 <list_insert_as_head+0x4c>)
    4d94:	4798      	blx	r3
    4d96:	4603      	mov	r3, r0
    4d98:	2b00      	cmp	r3, #0
    4d9a:	bf14      	ite	ne
    4d9c:	2301      	movne	r3, #1
    4d9e:	2300      	moveq	r3, #0
    4da0:	b2db      	uxtb	r3, r3
    4da2:	f083 0301 	eor.w	r3, r3, #1
    4da6:	b2db      	uxtb	r3, r3
    4da8:	f003 0301 	and.w	r3, r3, #1
    4dac:	b2db      	uxtb	r3, r3
    4dae:	2239      	movs	r2, #57	; 0x39
    4db0:	4908      	ldr	r1, [pc, #32]	; (4dd4 <list_insert_as_head+0x50>)
    4db2:	4618      	mov	r0, r3
    4db4:	4b08      	ldr	r3, [pc, #32]	; (4dd8 <list_insert_as_head+0x54>)
    4db6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	681a      	ldr	r2, [r3, #0]
    4dbc:	683b      	ldr	r3, [r7, #0]
    4dbe:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	683a      	ldr	r2, [r7, #0]
    4dc4:	601a      	str	r2, [r3, #0]
}
    4dc6:	bf00      	nop
    4dc8:	3708      	adds	r7, #8
    4dca:	46bd      	mov	sp, r7
    4dcc:	bd80      	pop	{r7, pc}
    4dce:	bf00      	nop
    4dd0:	00004d4d 	.word	0x00004d4d
    4dd4:	0001b75c 	.word	0x0001b75c
    4dd8:	00004d25 	.word	0x00004d25

00004ddc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4ddc:	b480      	push	{r7}
    4dde:	b083      	sub	sp, #12
    4de0:	af00      	add	r7, sp, #0
    4de2:	6078      	str	r0, [r7, #4]
    4de4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	681a      	ldr	r2, [r3, #0]
    4dea:	683b      	ldr	r3, [r7, #0]
    4dec:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	683a      	ldr	r2, [r7, #0]
    4df2:	601a      	str	r2, [r3, #0]
}
    4df4:	bf00      	nop
    4df6:	370c      	adds	r7, #12
    4df8:	46bd      	mov	sp, r7
    4dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfe:	4770      	bx	lr

00004e00 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	b084      	sub	sp, #16
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
    4e08:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4e10:	6839      	ldr	r1, [r7, #0]
    4e12:	6878      	ldr	r0, [r7, #4]
    4e14:	4b16      	ldr	r3, [pc, #88]	; (4e70 <list_insert_at_end+0x70>)
    4e16:	4798      	blx	r3
    4e18:	4603      	mov	r3, r0
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	bf14      	ite	ne
    4e1e:	2301      	movne	r3, #1
    4e20:	2300      	moveq	r3, #0
    4e22:	b2db      	uxtb	r3, r3
    4e24:	f083 0301 	eor.w	r3, r3, #1
    4e28:	b2db      	uxtb	r3, r3
    4e2a:	f003 0301 	and.w	r3, r3, #1
    4e2e:	b2db      	uxtb	r3, r3
    4e30:	224f      	movs	r2, #79	; 0x4f
    4e32:	4910      	ldr	r1, [pc, #64]	; (4e74 <list_insert_at_end+0x74>)
    4e34:	4618      	mov	r0, r3
    4e36:	4b10      	ldr	r3, [pc, #64]	; (4e78 <list_insert_at_end+0x78>)
    4e38:	4798      	blx	r3

	if (!list->head) {
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	681b      	ldr	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d109      	bne.n	4e56 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	683a      	ldr	r2, [r7, #0]
    4e46:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4e48:	683b      	ldr	r3, [r7, #0]
    4e4a:	2200      	movs	r2, #0
    4e4c:	601a      	str	r2, [r3, #0]
		return;
    4e4e:	e00c      	b.n	4e6a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4e50:	68fb      	ldr	r3, [r7, #12]
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4e56:	68fb      	ldr	r3, [r7, #12]
    4e58:	681b      	ldr	r3, [r3, #0]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d1f8      	bne.n	4e50 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4e5e:	68fb      	ldr	r3, [r7, #12]
    4e60:	683a      	ldr	r2, [r7, #0]
    4e62:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4e64:	683b      	ldr	r3, [r7, #0]
    4e66:	2200      	movs	r2, #0
    4e68:	601a      	str	r2, [r3, #0]
}
    4e6a:	3710      	adds	r7, #16
    4e6c:	46bd      	mov	sp, r7
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	00004d4d 	.word	0x00004d4d
    4e74:	0001b75c 	.word	0x0001b75c
    4e78:	00004d25 	.word	0x00004d25

00004e7c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4e7c:	b480      	push	{r7}
    4e7e:	b085      	sub	sp, #20
    4e80:	af00      	add	r7, sp, #0
    4e82:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	681b      	ldr	r3, [r3, #0]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d009      	beq.n	4ea0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	681b      	ldr	r3, [r3, #0]
    4e90:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	681b      	ldr	r3, [r3, #0]
    4e96:	681a      	ldr	r2, [r3, #0]
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4e9c:	68fb      	ldr	r3, [r7, #12]
    4e9e:	e000      	b.n	4ea2 <list_remove_head+0x26>
	}

	return NULL;
    4ea0:	2300      	movs	r3, #0
}
    4ea2:	4618      	mov	r0, r3
    4ea4:	3714      	adds	r7, #20
    4ea6:	46bd      	mov	sp, r7
    4ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eac:	4770      	bx	lr

00004eae <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4eae:	b480      	push	{r7}
    4eb0:	b085      	sub	sp, #20
    4eb2:	af00      	add	r7, sp, #0
    4eb4:	6078      	str	r0, [r7, #4]
    4eb6:	6039      	str	r1, [r7, #0]
	if (!element) {
    4eb8:	683b      	ldr	r3, [r7, #0]
    4eba:	2b00      	cmp	r3, #0
    4ebc:	d101      	bne.n	4ec2 <list_delete_element+0x14>
		return false;
    4ebe:	2300      	movs	r3, #0
    4ec0:	e024      	b.n	4f0c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	681a      	ldr	r2, [r3, #0]
    4ec6:	683b      	ldr	r3, [r7, #0]
    4ec8:	429a      	cmp	r2, r3
    4eca:	d106      	bne.n	4eda <list_delete_element+0x2c>
		list->head = list->head->next;
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	681b      	ldr	r3, [r3, #0]
    4ed0:	681a      	ldr	r2, [r3, #0]
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	601a      	str	r2, [r3, #0]
		return true;
    4ed6:	2301      	movs	r3, #1
    4ed8:	e018      	b.n	4f0c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4ee0:	e002      	b.n	4ee8 <list_delete_element+0x3a>
			it = it->next;
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	681b      	ldr	r3, [r3, #0]
    4ee6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4ee8:	68fb      	ldr	r3, [r7, #12]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d004      	beq.n	4ef8 <list_delete_element+0x4a>
    4eee:	68fb      	ldr	r3, [r7, #12]
    4ef0:	681a      	ldr	r2, [r3, #0]
    4ef2:	683b      	ldr	r3, [r7, #0]
    4ef4:	429a      	cmp	r2, r3
    4ef6:	d1f4      	bne.n	4ee2 <list_delete_element+0x34>
		}
		if (it) {
    4ef8:	68fb      	ldr	r3, [r7, #12]
    4efa:	2b00      	cmp	r3, #0
    4efc:	d005      	beq.n	4f0a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4efe:	683b      	ldr	r3, [r7, #0]
    4f00:	681a      	ldr	r2, [r3, #0]
    4f02:	68fb      	ldr	r3, [r7, #12]
    4f04:	601a      	str	r2, [r3, #0]
			return true;
    4f06:	2301      	movs	r3, #1
    4f08:	e000      	b.n	4f0c <list_delete_element+0x5e>
		}
	}

	return false;
    4f0a:	2300      	movs	r3, #0
}
    4f0c:	4618      	mov	r0, r3
    4f0e:	3714      	adds	r7, #20
    4f10:	46bd      	mov	sp, r7
    4f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f16:	4770      	bx	lr

00004f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4f18:	b480      	push	{r7}
    4f1a:	b083      	sub	sp, #12
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	4603      	mov	r3, r0
    4f20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f26:	2b00      	cmp	r3, #0
    4f28:	db0b      	blt.n	4f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f2a:	4909      	ldr	r1, [pc, #36]	; (4f50 <__NVIC_EnableIRQ+0x38>)
    4f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f30:	095b      	lsrs	r3, r3, #5
    4f32:	88fa      	ldrh	r2, [r7, #6]
    4f34:	f002 021f 	and.w	r2, r2, #31
    4f38:	2001      	movs	r0, #1
    4f3a:	fa00 f202 	lsl.w	r2, r0, r2
    4f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4f42:	bf00      	nop
    4f44:	370c      	adds	r7, #12
    4f46:	46bd      	mov	sp, r7
    4f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f4c:	4770      	bx	lr
    4f4e:	bf00      	nop
    4f50:	e000e100 	.word	0xe000e100

00004f54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4f54:	b480      	push	{r7}
    4f56:	b083      	sub	sp, #12
    4f58:	af00      	add	r7, sp, #0
    4f5a:	4603      	mov	r3, r0
    4f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f62:	2b00      	cmp	r3, #0
    4f64:	db10      	blt.n	4f88 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f66:	490b      	ldr	r1, [pc, #44]	; (4f94 <__NVIC_DisableIRQ+0x40>)
    4f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f6c:	095b      	lsrs	r3, r3, #5
    4f6e:	88fa      	ldrh	r2, [r7, #6]
    4f70:	f002 021f 	and.w	r2, r2, #31
    4f74:	2001      	movs	r0, #1
    4f76:	fa00 f202 	lsl.w	r2, r0, r2
    4f7a:	3320      	adds	r3, #32
    4f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4f80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4f88:	bf00      	nop
    4f8a:	370c      	adds	r7, #12
    4f8c:	46bd      	mov	sp, r7
    4f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f92:	4770      	bx	lr
    4f94:	e000e100 	.word	0xe000e100

00004f98 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4f98:	b480      	push	{r7}
    4f9a:	b083      	sub	sp, #12
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	4603      	mov	r3, r0
    4fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	db0c      	blt.n	4fc4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4faa:	4909      	ldr	r1, [pc, #36]	; (4fd0 <__NVIC_ClearPendingIRQ+0x38>)
    4fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4fb0:	095b      	lsrs	r3, r3, #5
    4fb2:	88fa      	ldrh	r2, [r7, #6]
    4fb4:	f002 021f 	and.w	r2, r2, #31
    4fb8:	2001      	movs	r0, #1
    4fba:	fa00 f202 	lsl.w	r2, r0, r2
    4fbe:	3360      	adds	r3, #96	; 0x60
    4fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4fc4:	bf00      	nop
    4fc6:	370c      	adds	r7, #12
    4fc8:	46bd      	mov	sp, r7
    4fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fce:	4770      	bx	lr
    4fd0:	e000e100 	.word	0xe000e100

00004fd4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4fd4:	b480      	push	{r7}
    4fd6:	b083      	sub	sp, #12
    4fd8:	af00      	add	r7, sp, #0
    4fda:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fe0:	095b      	lsrs	r3, r3, #5
    4fe2:	f003 0301 	and.w	r3, r3, #1
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	bf14      	ite	ne
    4fea:	2301      	movne	r3, #1
    4fec:	2300      	moveq	r3, #0
    4fee:	b2db      	uxtb	r3, r3
}
    4ff0:	4618      	mov	r0, r3
    4ff2:	370c      	adds	r7, #12
    4ff4:	46bd      	mov	sp, r7
    4ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ffa:	4770      	bx	lr

00004ffc <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    4ffc:	b480      	push	{r7}
    4ffe:	b083      	sub	sp, #12
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    500a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    500e:	4618      	mov	r0, r3
    5010:	370c      	adds	r7, #12
    5012:	46bd      	mov	sp, r7
    5014:	f85d 7b04 	ldr.w	r7, [sp], #4
    5018:	4770      	bx	lr

0000501a <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    501a:	b480      	push	{r7}
    501c:	b083      	sub	sp, #12
    501e:	af00      	add	r7, sp, #0
    5020:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5028:	0a1b      	lsrs	r3, r3, #8
    502a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    502e:	4618      	mov	r0, r3
    5030:	370c      	adds	r7, #12
    5032:	46bd      	mov	sp, r7
    5034:	f85d 7b04 	ldr.w	r7, [sp], #4
    5038:	4770      	bx	lr

0000503a <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    503a:	b480      	push	{r7}
    503c:	b083      	sub	sp, #12
    503e:	af00      	add	r7, sp, #0
    5040:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    5048:	0d5b      	lsrs	r3, r3, #21
    504a:	f003 0301 	and.w	r3, r3, #1
    504e:	2b00      	cmp	r3, #0
    5050:	bf14      	ite	ne
    5052:	2301      	movne	r3, #1
    5054:	2300      	moveq	r3, #0
    5056:	b2db      	uxtb	r3, r3
}
    5058:	4618      	mov	r0, r3
    505a:	370c      	adds	r7, #12
    505c:	46bd      	mov	sp, r7
    505e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5062:	4770      	bx	lr

00005064 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    5064:	b480      	push	{r7}
    5066:	b083      	sub	sp, #12
    5068:	af00      	add	r7, sp, #0
    506a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    5072:	0c1b      	lsrs	r3, r3, #16
    5074:	f003 031f 	and.w	r3, r3, #31
}
    5078:	4618      	mov	r0, r3
    507a:	370c      	adds	r7, #12
    507c:	46bd      	mov	sp, r7
    507e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5082:	4770      	bx	lr

00005084 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    5084:	b480      	push	{r7}
    5086:	b083      	sub	sp, #12
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
    508c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	683a      	ldr	r2, [r7, #0]
    5092:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5094:	bf00      	nop
    5096:	370c      	adds	r7, #12
    5098:	46bd      	mov	sp, r7
    509a:	f85d 7b04 	ldr.w	r7, [sp], #4
    509e:	4770      	bx	lr

000050a0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    50a0:	b480      	push	{r7}
    50a2:	b083      	sub	sp, #12
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
    50a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	683a      	ldr	r2, [r7, #0]
    50ae:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    50b0:	bf00      	nop
    50b2:	370c      	adds	r7, #12
    50b4:	46bd      	mov	sp, r7
    50b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ba:	4770      	bx	lr

000050bc <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    50bc:	b480      	push	{r7}
    50be:	b083      	sub	sp, #12
    50c0:	af00      	add	r7, sp, #0
    50c2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    50c4:	687b      	ldr	r3, [r7, #4]
    50c6:	699b      	ldr	r3, [r3, #24]
    50c8:	f043 0201 	orr.w	r2, r3, #1
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    50d0:	bf00      	nop
    50d2:	370c      	adds	r7, #12
    50d4:	46bd      	mov	sp, r7
    50d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50da:	4770      	bx	lr

000050dc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    50dc:	b480      	push	{r7}
    50de:	b085      	sub	sp, #20
    50e0:	af00      	add	r7, sp, #0
    50e2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    50e4:	687b      	ldr	r3, [r7, #4]
    50e6:	699b      	ldr	r3, [r3, #24]
    50e8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    50ea:	68fb      	ldr	r3, [r7, #12]
    50ec:	f003 0301 	and.w	r3, r3, #1
    50f0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    50f2:	68fb      	ldr	r3, [r7, #12]
    50f4:	2b00      	cmp	r3, #0
    50f6:	bf14      	ite	ne
    50f8:	2301      	movne	r3, #1
    50fa:	2300      	moveq	r3, #0
    50fc:	b2db      	uxtb	r3, r3
}
    50fe:	4618      	mov	r0, r3
    5100:	3714      	adds	r7, #20
    5102:	46bd      	mov	sp, r7
    5104:	f85d 7b04 	ldr.w	r7, [sp], #4
    5108:	4770      	bx	lr

0000510a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    510a:	b480      	push	{r7}
    510c:	b083      	sub	sp, #12
    510e:	af00      	add	r7, sp, #0
    5110:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    5112:	687b      	ldr	r3, [r7, #4]
    5114:	699b      	ldr	r3, [r3, #24]
    5116:	f023 0201 	bic.w	r2, r3, #1
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    511e:	bf00      	nop
    5120:	370c      	adds	r7, #12
    5122:	46bd      	mov	sp, r7
    5124:	f85d 7b04 	ldr.w	r7, [sp], #4
    5128:	4770      	bx	lr

0000512a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    512a:	b480      	push	{r7}
    512c:	b083      	sub	sp, #12
    512e:	af00      	add	r7, sp, #0
    5130:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    5132:	687b      	ldr	r3, [r7, #4]
    5134:	699b      	ldr	r3, [r3, #24]
    5136:	f043 0202 	orr.w	r2, r3, #2
    513a:	687b      	ldr	r3, [r7, #4]
    513c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    513e:	bf00      	nop
    5140:	370c      	adds	r7, #12
    5142:	46bd      	mov	sp, r7
    5144:	f85d 7b04 	ldr.w	r7, [sp], #4
    5148:	4770      	bx	lr

0000514a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    514a:	b480      	push	{r7}
    514c:	b083      	sub	sp, #12
    514e:	af00      	add	r7, sp, #0
    5150:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	699b      	ldr	r3, [r3, #24]
    5156:	f023 0202 	bic.w	r2, r3, #2
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    515e:	bf00      	nop
    5160:	370c      	adds	r7, #12
    5162:	46bd      	mov	sp, r7
    5164:	f85d 7b04 	ldr.w	r7, [sp], #4
    5168:	4770      	bx	lr

0000516a <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    516a:	b480      	push	{r7}
    516c:	b085      	sub	sp, #20
    516e:	af00      	add	r7, sp, #0
    5170:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    5172:	687b      	ldr	r3, [r7, #4]
    5174:	699b      	ldr	r3, [r3, #24]
    5176:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    5178:	68fb      	ldr	r3, [r7, #12]
    517a:	0a1b      	lsrs	r3, r3, #8
    517c:	f003 0301 	and.w	r3, r3, #1
    5180:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5182:	68fb      	ldr	r3, [r7, #12]
    5184:	2b00      	cmp	r3, #0
    5186:	bf14      	ite	ne
    5188:	2301      	movne	r3, #1
    518a:	2300      	moveq	r3, #0
    518c:	b2db      	uxtb	r3, r3
}
    518e:	4618      	mov	r0, r3
    5190:	3714      	adds	r7, #20
    5192:	46bd      	mov	sp, r7
    5194:	f85d 7b04 	ldr.w	r7, [sp], #4
    5198:	4770      	bx	lr

0000519a <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    519a:	b480      	push	{r7}
    519c:	b085      	sub	sp, #20
    519e:	af00      	add	r7, sp, #0
    51a0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	699b      	ldr	r3, [r3, #24]
    51a6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    51a8:	68fb      	ldr	r3, [r7, #12]
    51aa:	0a5b      	lsrs	r3, r3, #9
    51ac:	f003 0301 	and.w	r3, r3, #1
    51b0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    51b2:	68fb      	ldr	r3, [r7, #12]
    51b4:	2b00      	cmp	r3, #0
    51b6:	bf14      	ite	ne
    51b8:	2301      	movne	r3, #1
    51ba:	2300      	moveq	r3, #0
    51bc:	b2db      	uxtb	r3, r3
}
    51be:	4618      	mov	r0, r3
    51c0:	3714      	adds	r7, #20
    51c2:	46bd      	mov	sp, r7
    51c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c8:	4770      	bx	lr

000051ca <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    51ca:	b480      	push	{r7}
    51cc:	b083      	sub	sp, #12
    51ce:	af00      	add	r7, sp, #0
    51d0:	6078      	str	r0, [r7, #4]
    51d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	699a      	ldr	r2, [r3, #24]
    51d8:	683b      	ldr	r3, [r7, #0]
    51da:	431a      	orrs	r2, r3
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    51e0:	bf00      	nop
    51e2:	370c      	adds	r7, #12
    51e4:	46bd      	mov	sp, r7
    51e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ea:	4770      	bx	lr

000051ec <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    51ec:	b480      	push	{r7}
    51ee:	b083      	sub	sp, #12
    51f0:	af00      	add	r7, sp, #0
    51f2:	6078      	str	r0, [r7, #4]
    51f4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	683a      	ldr	r2, [r7, #0]
    51fa:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    51fc:	bf00      	nop
    51fe:	370c      	adds	r7, #12
    5200:	46bd      	mov	sp, r7
    5202:	f85d 7b04 	ldr.w	r7, [sp], #4
    5206:	4770      	bx	lr

00005208 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5208:	b480      	push	{r7}
    520a:	b083      	sub	sp, #12
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
    5210:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    5212:	687b      	ldr	r3, [r7, #4]
    5214:	683a      	ldr	r2, [r7, #0]
    5216:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5218:	bf00      	nop
    521a:	370c      	adds	r7, #12
    521c:	46bd      	mov	sp, r7
    521e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5222:	4770      	bx	lr

00005224 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    5224:	b480      	push	{r7}
    5226:	b083      	sub	sp, #12
    5228:	af00      	add	r7, sp, #0
    522a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    5230:	4618      	mov	r0, r3
    5232:	370c      	adds	r7, #12
    5234:	46bd      	mov	sp, r7
    5236:	f85d 7b04 	ldr.w	r7, [sp], #4
    523a:	4770      	bx	lr

0000523c <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    523c:	b480      	push	{r7}
    523e:	b085      	sub	sp, #20
    5240:	af00      	add	r7, sp, #0
    5242:	6078      	str	r0, [r7, #4]
    5244:	460b      	mov	r3, r1
    5246:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    524c:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    524e:	68fb      	ldr	r3, [r7, #12]
    5250:	f023 0301 	bic.w	r3, r3, #1
    5254:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    5256:	78fb      	ldrb	r3, [r7, #3]
    5258:	68fa      	ldr	r2, [r7, #12]
    525a:	4313      	orrs	r3, r2
    525c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    525e:	687b      	ldr	r3, [r7, #4]
    5260:	68fa      	ldr	r2, [r7, #12]
    5262:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    5264:	bf00      	nop
    5266:	3714      	adds	r7, #20
    5268:	46bd      	mov	sp, r7
    526a:	f85d 7b04 	ldr.w	r7, [sp], #4
    526e:	4770      	bx	lr

00005270 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    5270:	b480      	push	{r7}
    5272:	b085      	sub	sp, #20
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
    5278:	460b      	mov	r3, r1
    527a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5280:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    5282:	68fb      	ldr	r3, [r7, #12]
    5284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5288:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    528a:	78fb      	ldrb	r3, [r7, #3]
    528c:	025b      	lsls	r3, r3, #9
    528e:	461a      	mov	r2, r3
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	4313      	orrs	r3, r2
    5294:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	68fa      	ldr	r2, [r7, #12]
    529a:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    529c:	bf00      	nop
    529e:	3714      	adds	r7, #20
    52a0:	46bd      	mov	sp, r7
    52a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a6:	4770      	bx	lr

000052a8 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    52a8:	b480      	push	{r7}
    52aa:	b085      	sub	sp, #20
    52ac:	af00      	add	r7, sp, #0
    52ae:	6078      	str	r0, [r7, #4]
    52b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    52b2:	687b      	ldr	r3, [r7, #4]
    52b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    52b6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    52b8:	68fa      	ldr	r2, [r7, #12]
    52ba:	683b      	ldr	r3, [r7, #0]
    52bc:	4013      	ands	r3, r2
    52be:	60fb      	str	r3, [r7, #12]
	return tmp;
    52c0:	68fb      	ldr	r3, [r7, #12]
}
    52c2:	4618      	mov	r0, r3
    52c4:	3714      	adds	r7, #20
    52c6:	46bd      	mov	sp, r7
    52c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52cc:	4770      	bx	lr

000052ce <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    52ce:	b480      	push	{r7}
    52d0:	b083      	sub	sp, #12
    52d2:	af00      	add	r7, sp, #0
    52d4:	6078      	str	r0, [r7, #4]
    52d6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	683a      	ldr	r2, [r7, #0]
    52dc:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    52de:	bf00      	nop
    52e0:	370c      	adds	r7, #12
    52e2:	46bd      	mov	sp, r7
    52e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e8:	4770      	bx	lr

000052ea <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    52ea:	b480      	push	{r7}
    52ec:	b083      	sub	sp, #12
    52ee:	af00      	add	r7, sp, #0
    52f0:	6078      	str	r0, [r7, #4]
    52f2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    52f4:	687b      	ldr	r3, [r7, #4]
    52f6:	683a      	ldr	r2, [r7, #0]
    52f8:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    52fa:	bf00      	nop
    52fc:	370c      	adds	r7, #12
    52fe:	46bd      	mov	sp, r7
    5300:	f85d 7b04 	ldr.w	r7, [sp], #4
    5304:	4770      	bx	lr

00005306 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5306:	b480      	push	{r7}
    5308:	b083      	sub	sp, #12
    530a:	af00      	add	r7, sp, #0
    530c:	6078      	str	r0, [r7, #4]
    530e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	683a      	ldr	r2, [r7, #0]
    5314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    5318:	bf00      	nop
    531a:	370c      	adds	r7, #12
    531c:	46bd      	mov	sp, r7
    531e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5322:	4770      	bx	lr

00005324 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    5324:	b480      	push	{r7}
    5326:	b083      	sub	sp, #12
    5328:	af00      	add	r7, sp, #0
    532a:	6078      	str	r0, [r7, #4]
    532c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	683a      	ldr	r2, [r7, #0]
    5332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    5336:	bf00      	nop
    5338:	370c      	adds	r7, #12
    533a:	46bd      	mov	sp, r7
    533c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5340:	4770      	bx	lr

00005342 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    5342:	b480      	push	{r7}
    5344:	b083      	sub	sp, #12
    5346:	af00      	add	r7, sp, #0
    5348:	6078      	str	r0, [r7, #4]
    534a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	683a      	ldr	r2, [r7, #0]
    5350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    5354:	bf00      	nop
    5356:	370c      	adds	r7, #12
    5358:	46bd      	mov	sp, r7
    535a:	f85d 7b04 	ldr.w	r7, [sp], #4
    535e:	4770      	bx	lr

00005360 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    5360:	b480      	push	{r7}
    5362:	b083      	sub	sp, #12
    5364:	af00      	add	r7, sp, #0
    5366:	6078      	str	r0, [r7, #4]
    5368:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	683a      	ldr	r2, [r7, #0]
    536e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    5372:	bf00      	nop
    5374:	370c      	adds	r7, #12
    5376:	46bd      	mov	sp, r7
    5378:	f85d 7b04 	ldr.w	r7, [sp], #4
    537c:	4770      	bx	lr

0000537e <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    537e:	b480      	push	{r7}
    5380:	b083      	sub	sp, #12
    5382:	af00      	add	r7, sp, #0
    5384:	6078      	str	r0, [r7, #4]
    5386:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5388:	687b      	ldr	r3, [r7, #4]
    538a:	683a      	ldr	r2, [r7, #0]
    538c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5390:	bf00      	nop
    5392:	370c      	adds	r7, #12
    5394:	46bd      	mov	sp, r7
    5396:	f85d 7b04 	ldr.w	r7, [sp], #4
    539a:	4770      	bx	lr

0000539c <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    539c:	b480      	push	{r7}
    539e:	b085      	sub	sp, #20
    53a0:	af00      	add	r7, sp, #0
    53a2:	6078      	str	r0, [r7, #4]
    53a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    53ac:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    53b4:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    53b6:	683b      	ldr	r3, [r7, #0]
    53b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53bc:	68fa      	ldr	r2, [r7, #12]
    53be:	4313      	orrs	r3, r2
    53c0:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	68fa      	ldr	r2, [r7, #12]
    53c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    53ca:	bf00      	nop
    53cc:	3714      	adds	r7, #20
    53ce:	46bd      	mov	sp, r7
    53d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d4:	4770      	bx	lr

000053d6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    53d6:	b480      	push	{r7}
    53d8:	b083      	sub	sp, #12
    53da:	af00      	add	r7, sp, #0
    53dc:	6078      	str	r0, [r7, #4]
    53de:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	683a      	ldr	r2, [r7, #0]
    53e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    53e8:	bf00      	nop
    53ea:	370c      	adds	r7, #12
    53ec:	46bd      	mov	sp, r7
    53ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f2:	4770      	bx	lr

000053f4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    53f4:	b480      	push	{r7}
    53f6:	b083      	sub	sp, #12
    53f8:	af00      	add	r7, sp, #0
    53fa:	6078      	str	r0, [r7, #4]
    53fc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    53fe:	687b      	ldr	r3, [r7, #4]
    5400:	683a      	ldr	r2, [r7, #0]
    5402:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5406:	bf00      	nop
    5408:	370c      	adds	r7, #12
    540a:	46bd      	mov	sp, r7
    540c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5410:	4770      	bx	lr

00005412 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    5412:	b480      	push	{r7}
    5414:	b083      	sub	sp, #12
    5416:	af00      	add	r7, sp, #0
    5418:	6078      	str	r0, [r7, #4]
    541a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    541c:	687b      	ldr	r3, [r7, #4]
    541e:	683a      	ldr	r2, [r7, #0]
    5420:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5424:	bf00      	nop
    5426:	370c      	adds	r7, #12
    5428:	46bd      	mov	sp, r7
    542a:	f85d 7b04 	ldr.w	r7, [sp], #4
    542e:	4770      	bx	lr

00005430 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    5430:	b480      	push	{r7}
    5432:	b083      	sub	sp, #12
    5434:	af00      	add	r7, sp, #0
    5436:	6078      	str	r0, [r7, #4]
    5438:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	683a      	ldr	r2, [r7, #0]
    543e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5442:	bf00      	nop
    5444:	370c      	adds	r7, #12
    5446:	46bd      	mov	sp, r7
    5448:	f85d 7b04 	ldr.w	r7, [sp], #4
    544c:	4770      	bx	lr

0000544e <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    544e:	b480      	push	{r7}
    5450:	b083      	sub	sp, #12
    5452:	af00      	add	r7, sp, #0
    5454:	6078      	str	r0, [r7, #4]
    5456:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	683a      	ldr	r2, [r7, #0]
    545c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5460:	bf00      	nop
    5462:	370c      	adds	r7, #12
    5464:	46bd      	mov	sp, r7
    5466:	f85d 7b04 	ldr.w	r7, [sp], #4
    546a:	4770      	bx	lr

0000546c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    546c:	b480      	push	{r7}
    546e:	b083      	sub	sp, #12
    5470:	af00      	add	r7, sp, #0
    5472:	6078      	str	r0, [r7, #4]
    5474:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	683a      	ldr	r2, [r7, #0]
    547a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    547e:	bf00      	nop
    5480:	370c      	adds	r7, #12
    5482:	46bd      	mov	sp, r7
    5484:	f85d 7b04 	ldr.w	r7, [sp], #4
    5488:	4770      	bx	lr
	...

0000548c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    548c:	b580      	push	{r7, lr}
    548e:	b082      	sub	sp, #8
    5490:	af00      	add	r7, sp, #0
    5492:	6078      	str	r0, [r7, #4]
    5494:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	683a      	ldr	r2, [r7, #0]
    549a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    549c:	687b      	ldr	r3, [r7, #4]
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	4618      	mov	r0, r3
    54a2:	4b56      	ldr	r3, [pc, #344]	; (55fc <_can_async_init+0x170>)
    54a4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    54a6:	bf00      	nop
    54a8:	687b      	ldr	r3, [r7, #4]
    54aa:	681b      	ldr	r3, [r3, #0]
    54ac:	4618      	mov	r0, r3
    54ae:	4b54      	ldr	r3, [pc, #336]	; (5600 <_can_async_init+0x174>)
    54b0:	4798      	blx	r3
    54b2:	4603      	mov	r3, r0
    54b4:	f083 0301 	eor.w	r3, r3, #1
    54b8:	b2db      	uxtb	r3, r3
    54ba:	2b00      	cmp	r3, #0
    54bc:	d1f4      	bne.n	54a8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	4618      	mov	r0, r3
    54c4:	4b4f      	ldr	r3, [pc, #316]	; (5604 <_can_async_init+0x178>)
    54c6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    54c8:	683b      	ldr	r3, [r7, #0]
    54ca:	4a4f      	ldr	r2, [pc, #316]	; (5608 <_can_async_init+0x17c>)
    54cc:	4293      	cmp	r3, r2
    54ce:	d17c      	bne.n	55ca <_can_async_init+0x13e>
		_can1_dev    = dev;
    54d0:	4a4e      	ldr	r2, [pc, #312]	; (560c <_can_async_init+0x180>)
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	4a4d      	ldr	r2, [pc, #308]	; (5610 <_can_async_init+0x184>)
    54da:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	f44f 7100 	mov.w	r1, #512	; 0x200
    54e4:	4618      	mov	r0, r3
    54e6:	4b4b      	ldr	r3, [pc, #300]	; (5614 <_can_async_init+0x188>)
    54e8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	2102      	movs	r1, #2
    54f0:	4618      	mov	r0, r3
    54f2:	4b49      	ldr	r3, [pc, #292]	; (5618 <_can_async_init+0x18c>)
    54f4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    54f6:	687b      	ldr	r3, [r7, #4]
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	f640 2103 	movw	r1, #2563	; 0xa03
    54fe:	4618      	mov	r0, r3
    5500:	4b46      	ldr	r3, [pc, #280]	; (561c <_can_async_init+0x190>)
    5502:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    550c:	4618      	mov	r0, r3
    550e:	4b44      	ldr	r3, [pc, #272]	; (5620 <_can_async_init+0x194>)
    5510:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	681a      	ldr	r2, [r3, #0]
    5516:	4b43      	ldr	r3, [pc, #268]	; (5624 <_can_async_init+0x198>)
    5518:	b29b      	uxth	r3, r3
    551a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    551e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5522:	4619      	mov	r1, r3
    5524:	4610      	mov	r0, r2
    5526:	4b40      	ldr	r3, [pc, #256]	; (5628 <_can_async_init+0x19c>)
    5528:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	2107      	movs	r1, #7
    5530:	4618      	mov	r0, r3
    5532:	4b3e      	ldr	r3, [pc, #248]	; (562c <_can_async_init+0x1a0>)
    5534:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	681b      	ldr	r3, [r3, #0]
    553a:	2107      	movs	r1, #7
    553c:	4618      	mov	r0, r3
    553e:	4b3c      	ldr	r3, [pc, #240]	; (5630 <_can_async_init+0x1a4>)
    5540:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    5542:	687b      	ldr	r3, [r7, #4]
    5544:	681a      	ldr	r2, [r3, #0]
    5546:	4b3b      	ldr	r3, [pc, #236]	; (5634 <_can_async_init+0x1a8>)
    5548:	b29b      	uxth	r3, r3
    554a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    554e:	4619      	mov	r1, r3
    5550:	4610      	mov	r0, r2
    5552:	4b39      	ldr	r3, [pc, #228]	; (5638 <_can_async_init+0x1ac>)
    5554:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	681a      	ldr	r2, [r3, #0]
    555a:	4b38      	ldr	r3, [pc, #224]	; (563c <_can_async_init+0x1b0>)
    555c:	b29b      	uxth	r3, r3
    555e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5562:	4619      	mov	r1, r3
    5564:	4610      	mov	r0, r2
    5566:	4b36      	ldr	r3, [pc, #216]	; (5640 <_can_async_init+0x1b4>)
    5568:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    556a:	687b      	ldr	r3, [r7, #4]
    556c:	681b      	ldr	r3, [r3, #0]
    556e:	2108      	movs	r1, #8
    5570:	4618      	mov	r0, r3
    5572:	4b34      	ldr	r3, [pc, #208]	; (5644 <_can_async_init+0x1b8>)
    5574:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	681a      	ldr	r2, [r3, #0]
    557a:	4b33      	ldr	r3, [pc, #204]	; (5648 <_can_async_init+0x1bc>)
    557c:	b29b      	uxth	r3, r3
    557e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    5582:	4619      	mov	r1, r3
    5584:	4610      	mov	r0, r2
    5586:	4b31      	ldr	r3, [pc, #196]	; (564c <_can_async_init+0x1c0>)
    5588:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	4b30      	ldr	r3, [pc, #192]	; (5650 <_can_async_init+0x1c4>)
    5590:	b29b      	uxth	r3, r3
    5592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5596:	4619      	mov	r1, r3
    5598:	4610      	mov	r0, r2
    559a:	4b2e      	ldr	r3, [pc, #184]	; (5654 <_can_async_init+0x1c8>)
    559c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    55a6:	4618      	mov	r0, r3
    55a8:	4b2b      	ldr	r3, [pc, #172]	; (5658 <_can_async_init+0x1cc>)
    55aa:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    55ac:	204f      	movs	r0, #79	; 0x4f
    55ae:	4b2b      	ldr	r3, [pc, #172]	; (565c <_can_async_init+0x1d0>)
    55b0:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    55b2:	204f      	movs	r0, #79	; 0x4f
    55b4:	4b2a      	ldr	r3, [pc, #168]	; (5660 <_can_async_init+0x1d4>)
    55b6:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    55b8:	204f      	movs	r0, #79	; 0x4f
    55ba:	4b2a      	ldr	r3, [pc, #168]	; (5664 <_can_async_init+0x1d8>)
    55bc:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	681b      	ldr	r3, [r3, #0]
    55c2:	2101      	movs	r1, #1
    55c4:	4618      	mov	r0, r3
    55c6:	4b28      	ldr	r3, [pc, #160]	; (5668 <_can_async_init+0x1dc>)
    55c8:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    55ca:	687b      	ldr	r3, [r7, #4]
    55cc:	681b      	ldr	r3, [r3, #0]
    55ce:	4618      	mov	r0, r3
    55d0:	4b26      	ldr	r3, [pc, #152]	; (566c <_can_async_init+0x1e0>)
    55d2:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	681b      	ldr	r3, [r3, #0]
    55d8:	4618      	mov	r0, r3
    55da:	4b25      	ldr	r3, [pc, #148]	; (5670 <_can_async_init+0x1e4>)
    55dc:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    55de:	bf00      	nop
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	4618      	mov	r0, r3
    55e6:	4b06      	ldr	r3, [pc, #24]	; (5600 <_can_async_init+0x174>)
    55e8:	4798      	blx	r3
    55ea:	4603      	mov	r3, r0
    55ec:	2b00      	cmp	r3, #0
    55ee:	d1f7      	bne.n	55e0 <_can_async_init+0x154>
	};

	return ERR_NONE;
    55f0:	2300      	movs	r3, #0
}
    55f2:	4618      	mov	r0, r3
    55f4:	3708      	adds	r7, #8
    55f6:	46bd      	mov	sp, r7
    55f8:	bd80      	pop	{r7, pc}
    55fa:	bf00      	nop
    55fc:	000050bd 	.word	0x000050bd
    5600:	000050dd 	.word	0x000050dd
    5604:	0000512b 	.word	0x0000512b
    5608:	42000400 	.word	0x42000400
    560c:	20002344 	.word	0x20002344
    5610:	20000004 	.word	0x20000004
    5614:	000051cb 	.word	0x000051cb
    5618:	00005085 	.word	0x00005085
    561c:	000051ed 	.word	0x000051ed
    5620:	000050a1 	.word	0x000050a1
    5624:	2000e1a0 	.word	0x2000e1a0
    5628:	0000537f 	.word	0x0000537f
    562c:	000053d7 	.word	0x000053d7
    5630:	00005413 	.word	0x00005413
    5634:	2000e158 	.word	0x2000e158
    5638:	000053f5 	.word	0x000053f5
    563c:	200022a4 	.word	0x200022a4
    5640:	0000546d 	.word	0x0000546d
    5644:	00005307 	.word	0x00005307
    5648:	200022b4 	.word	0x200022b4
    564c:	00005325 	.word	0x00005325
    5650:	20002334 	.word	0x20002334
    5654:	00005343 	.word	0x00005343
    5658:	00005361 	.word	0x00005361
    565c:	00004f55 	.word	0x00004f55
    5660:	00004f99 	.word	0x00004f99
    5664:	00004f19 	.word	0x00004f19
    5668:	000052eb 	.word	0x000052eb
    566c:	0000514b 	.word	0x0000514b
    5670:	0000510b 	.word	0x0000510b

00005674 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    5674:	b580      	push	{r7, lr}
    5676:	b082      	sub	sp, #8
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	4618      	mov	r0, r3
    5682:	4b03      	ldr	r3, [pc, #12]	; (5690 <_can_async_enable+0x1c>)
    5684:	4798      	blx	r3
	return ERR_NONE;
    5686:	2300      	movs	r3, #0
}
    5688:	4618      	mov	r0, r3
    568a:	3708      	adds	r7, #8
    568c:	46bd      	mov	sp, r7
    568e:	bd80      	pop	{r7, pc}
    5690:	0000510b 	.word	0x0000510b

00005694 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    5694:	b590      	push	{r4, r7, lr}
    5696:	b089      	sub	sp, #36	; 0x24
    5698:	af00      	add	r7, sp, #0
    569a:	6078      	str	r0, [r7, #4]
    569c:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    569e:	2300      	movs	r3, #0
    56a0:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    56a2:	687b      	ldr	r3, [r7, #4]
    56a4:	681b      	ldr	r3, [r3, #0]
    56a6:	4618      	mov	r0, r3
    56a8:	4b37      	ldr	r3, [pc, #220]	; (5788 <_can_async_read+0xf4>)
    56aa:	4798      	blx	r3
    56ac:	4603      	mov	r3, r0
    56ae:	2b00      	cmp	r3, #0
    56b0:	d102      	bne.n	56b8 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    56b2:	f06f 0309 	mvn.w	r3, #9
    56b6:	e063      	b.n	5780 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	4618      	mov	r0, r3
    56be:	4b33      	ldr	r3, [pc, #204]	; (578c <_can_async_read+0xf8>)
    56c0:	4798      	blx	r3
    56c2:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	4a31      	ldr	r2, [pc, #196]	; (5790 <_can_async_read+0xfc>)
    56ca:	4293      	cmp	r3, r2
    56cc:	d108      	bne.n	56e0 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    56ce:	69ba      	ldr	r2, [r7, #24]
    56d0:	4613      	mov	r3, r2
    56d2:	00db      	lsls	r3, r3, #3
    56d4:	4413      	add	r3, r2
    56d6:	00db      	lsls	r3, r3, #3
    56d8:	461a      	mov	r2, r3
    56da:	4b2e      	ldr	r3, [pc, #184]	; (5794 <_can_async_read+0x100>)
    56dc:	4413      	add	r3, r2
    56de:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    56e0:	69fb      	ldr	r3, [r7, #28]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d102      	bne.n	56ec <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    56e6:	f06f 031b 	mvn.w	r3, #27
    56ea:	e049      	b.n	5780 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    56ec:	69fb      	ldr	r3, [r7, #28]
    56ee:	681b      	ldr	r3, [r3, #0]
    56f0:	f3c3 7380 	ubfx	r3, r3, #30, #1
    56f4:	b2db      	uxtb	r3, r3
    56f6:	2b01      	cmp	r3, #1
    56f8:	d10a      	bne.n	5710 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    56fa:	683b      	ldr	r3, [r7, #0]
    56fc:	2201      	movs	r2, #1
    56fe:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    5700:	69fb      	ldr	r3, [r7, #28]
    5702:	681b      	ldr	r3, [r3, #0]
    5704:	f3c3 031c 	ubfx	r3, r3, #0, #29
    5708:	461a      	mov	r2, r3
    570a:	683b      	ldr	r3, [r7, #0]
    570c:	601a      	str	r2, [r3, #0]
    570e:	e00a      	b.n	5726 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    5710:	683b      	ldr	r3, [r7, #0]
    5712:	2200      	movs	r2, #0
    5714:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    5716:	69fb      	ldr	r3, [r7, #28]
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	f3c3 031c 	ubfx	r3, r3, #0, #29
    571e:	149b      	asrs	r3, r3, #18
    5720:	461a      	mov	r2, r3
    5722:	683b      	ldr	r3, [r7, #0]
    5724:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    5726:	69fb      	ldr	r3, [r7, #28]
    5728:	681b      	ldr	r3, [r3, #0]
    572a:	f3c3 7340 	ubfx	r3, r3, #29, #1
    572e:	b2db      	uxtb	r3, r3
    5730:	2b01      	cmp	r3, #1
    5732:	d102      	bne.n	573a <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    5734:	683b      	ldr	r3, [r7, #0]
    5736:	2201      	movs	r2, #1
    5738:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    573a:	4b17      	ldr	r3, [pc, #92]	; (5798 <_can_async_read+0x104>)
    573c:	f107 0408 	add.w	r4, r7, #8
    5740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    5746:	69fb      	ldr	r3, [r7, #28]
    5748:	685b      	ldr	r3, [r3, #4]
    574a:	f3c3 4303 	ubfx	r3, r3, #16, #4
    574e:	b2db      	uxtb	r3, r3
    5750:	f107 0220 	add.w	r2, r7, #32
    5754:	4413      	add	r3, r2
    5756:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    575a:	683b      	ldr	r3, [r7, #0]
    575c:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    575e:	683b      	ldr	r3, [r7, #0]
    5760:	6898      	ldr	r0, [r3, #8]
    5762:	69fb      	ldr	r3, [r7, #28]
    5764:	f103 0108 	add.w	r1, r3, #8
    5768:	683b      	ldr	r3, [r7, #0]
    576a:	7b1b      	ldrb	r3, [r3, #12]
    576c:	461a      	mov	r2, r3
    576e:	4b0b      	ldr	r3, [pc, #44]	; (579c <_can_async_read+0x108>)
    5770:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    5772:	687b      	ldr	r3, [r7, #4]
    5774:	681b      	ldr	r3, [r3, #0]
    5776:	69b9      	ldr	r1, [r7, #24]
    5778:	4618      	mov	r0, r3
    577a:	4b09      	ldr	r3, [pc, #36]	; (57a0 <_can_async_read+0x10c>)
    577c:	4798      	blx	r3

	return ERR_NONE;
    577e:	2300      	movs	r3, #0
}
    5780:	4618      	mov	r0, r3
    5782:	3724      	adds	r7, #36	; 0x24
    5784:	46bd      	mov	sp, r7
    5786:	bd90      	pop	{r4, r7, pc}
    5788:	00004ffd 	.word	0x00004ffd
    578c:	0000501b 	.word	0x0000501b
    5790:	42000400 	.word	0x42000400
    5794:	2000e1a0 	.word	0x2000e1a0
    5798:	0001b77c 	.word	0x0001b77c
    579c:	0001b0e1 	.word	0x0001b0e1
    57a0:	0000539d 	.word	0x0000539d

000057a4 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    57a4:	b590      	push	{r4, r7, lr}
    57a6:	b085      	sub	sp, #20
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
    57ac:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    57ae:	2300      	movs	r3, #0
    57b0:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    57b2:	687b      	ldr	r3, [r7, #4]
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	4618      	mov	r0, r3
    57b8:	4b61      	ldr	r3, [pc, #388]	; (5940 <_can_async_write+0x19c>)
    57ba:	4798      	blx	r3
    57bc:	4603      	mov	r3, r0
    57be:	2b00      	cmp	r3, #0
    57c0:	d002      	beq.n	57c8 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    57c2:	f06f 031b 	mvn.w	r3, #27
    57c6:	e0b7      	b.n	5938 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	4618      	mov	r0, r3
    57ce:	4b5d      	ldr	r3, [pc, #372]	; (5944 <_can_async_write+0x1a0>)
    57d0:	4798      	blx	r3
    57d2:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	4a5b      	ldr	r2, [pc, #364]	; (5948 <_can_async_write+0x1a4>)
    57da:	4293      	cmp	r3, r2
    57dc:	d108      	bne.n	57f0 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    57de:	68ba      	ldr	r2, [r7, #8]
    57e0:	4613      	mov	r3, r2
    57e2:	00db      	lsls	r3, r3, #3
    57e4:	4413      	add	r3, r2
    57e6:	00db      	lsls	r3, r3, #3
    57e8:	461a      	mov	r2, r3
    57ea:	4b58      	ldr	r3, [pc, #352]	; (594c <_can_async_write+0x1a8>)
    57ec:	4413      	add	r3, r2
    57ee:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    57f0:	68fb      	ldr	r3, [r7, #12]
    57f2:	2b00      	cmp	r3, #0
    57f4:	d102      	bne.n	57fc <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    57f6:	f06f 031b 	mvn.w	r3, #27
    57fa:	e09d      	b.n	5938 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    57fc:	683b      	ldr	r3, [r7, #0]
    57fe:	7b5b      	ldrb	r3, [r3, #13]
    5800:	2b01      	cmp	r3, #1
    5802:	d109      	bne.n	5818 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    5804:	683b      	ldr	r3, [r7, #0]
    5806:	681a      	ldr	r2, [r3, #0]
    5808:	68fb      	ldr	r3, [r7, #12]
    580a:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    580c:	68fa      	ldr	r2, [r7, #12]
    580e:	6813      	ldr	r3, [r2, #0]
    5810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5814:	6013      	str	r3, [r2, #0]
    5816:	e004      	b.n	5822 <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    5818:	683b      	ldr	r3, [r7, #0]
    581a:	681b      	ldr	r3, [r3, #0]
    581c:	049a      	lsls	r2, r3, #18
    581e:	68fb      	ldr	r3, [r7, #12]
    5820:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    5822:	683b      	ldr	r3, [r7, #0]
    5824:	7b1b      	ldrb	r3, [r3, #12]
    5826:	2b08      	cmp	r3, #8
    5828:	d80a      	bhi.n	5840 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    582a:	683b      	ldr	r3, [r7, #0]
    582c:	7b1b      	ldrb	r3, [r3, #12]
    582e:	f003 030f 	and.w	r3, r3, #15
    5832:	b2d9      	uxtb	r1, r3
    5834:	68fa      	ldr	r2, [r7, #12]
    5836:	6853      	ldr	r3, [r2, #4]
    5838:	f361 4313 	bfi	r3, r1, #16, #4
    583c:	6053      	str	r3, [r2, #4]
    583e:	e04a      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    5840:	683b      	ldr	r3, [r7, #0]
    5842:	7b1b      	ldrb	r3, [r3, #12]
    5844:	2b0c      	cmp	r3, #12
    5846:	d806      	bhi.n	5856 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    5848:	68fa      	ldr	r2, [r7, #12]
    584a:	6853      	ldr	r3, [r2, #4]
    584c:	2109      	movs	r1, #9
    584e:	f361 4313 	bfi	r3, r1, #16, #4
    5852:	6053      	str	r3, [r2, #4]
    5854:	e03f      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    5856:	683b      	ldr	r3, [r7, #0]
    5858:	7b1b      	ldrb	r3, [r3, #12]
    585a:	2b10      	cmp	r3, #16
    585c:	d806      	bhi.n	586c <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    585e:	68fa      	ldr	r2, [r7, #12]
    5860:	6853      	ldr	r3, [r2, #4]
    5862:	210a      	movs	r1, #10
    5864:	f361 4313 	bfi	r3, r1, #16, #4
    5868:	6053      	str	r3, [r2, #4]
    586a:	e034      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    586c:	683b      	ldr	r3, [r7, #0]
    586e:	7b1b      	ldrb	r3, [r3, #12]
    5870:	2b14      	cmp	r3, #20
    5872:	d806      	bhi.n	5882 <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    5874:	68fa      	ldr	r2, [r7, #12]
    5876:	6853      	ldr	r3, [r2, #4]
    5878:	210b      	movs	r1, #11
    587a:	f361 4313 	bfi	r3, r1, #16, #4
    587e:	6053      	str	r3, [r2, #4]
    5880:	e029      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    5882:	683b      	ldr	r3, [r7, #0]
    5884:	7b1b      	ldrb	r3, [r3, #12]
    5886:	2b18      	cmp	r3, #24
    5888:	d806      	bhi.n	5898 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    588a:	68fa      	ldr	r2, [r7, #12]
    588c:	6853      	ldr	r3, [r2, #4]
    588e:	210c      	movs	r1, #12
    5890:	f361 4313 	bfi	r3, r1, #16, #4
    5894:	6053      	str	r3, [r2, #4]
    5896:	e01e      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    5898:	683b      	ldr	r3, [r7, #0]
    589a:	7b1b      	ldrb	r3, [r3, #12]
    589c:	2b20      	cmp	r3, #32
    589e:	d806      	bhi.n	58ae <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    58a0:	68fa      	ldr	r2, [r7, #12]
    58a2:	6853      	ldr	r3, [r2, #4]
    58a4:	210d      	movs	r1, #13
    58a6:	f361 4313 	bfi	r3, r1, #16, #4
    58aa:	6053      	str	r3, [r2, #4]
    58ac:	e013      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    58ae:	683b      	ldr	r3, [r7, #0]
    58b0:	7b1b      	ldrb	r3, [r3, #12]
    58b2:	2b30      	cmp	r3, #48	; 0x30
    58b4:	d806      	bhi.n	58c4 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    58b6:	68fa      	ldr	r2, [r7, #12]
    58b8:	6853      	ldr	r3, [r2, #4]
    58ba:	210e      	movs	r1, #14
    58bc:	f361 4313 	bfi	r3, r1, #16, #4
    58c0:	6053      	str	r3, [r2, #4]
    58c2:	e008      	b.n	58d6 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    58c4:	683b      	ldr	r3, [r7, #0]
    58c6:	7b1b      	ldrb	r3, [r3, #12]
    58c8:	2b40      	cmp	r3, #64	; 0x40
    58ca:	d804      	bhi.n	58d6 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    58cc:	68fa      	ldr	r2, [r7, #12]
    58ce:	6853      	ldr	r3, [r2, #4]
    58d0:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    58d4:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	4618      	mov	r0, r3
    58dc:	4b1c      	ldr	r3, [pc, #112]	; (5950 <_can_async_write+0x1ac>)
    58de:	4798      	blx	r3
    58e0:	4603      	mov	r3, r0
    58e2:	4619      	mov	r1, r3
    58e4:	68fa      	ldr	r2, [r7, #12]
    58e6:	6853      	ldr	r3, [r2, #4]
    58e8:	f361 5355 	bfi	r3, r1, #21, #1
    58ec:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    58ee:	687b      	ldr	r3, [r7, #4]
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	4618      	mov	r0, r3
    58f4:	4b17      	ldr	r3, [pc, #92]	; (5954 <_can_async_write+0x1b0>)
    58f6:	4798      	blx	r3
    58f8:	4603      	mov	r3, r0
    58fa:	4619      	mov	r1, r3
    58fc:	68fa      	ldr	r2, [r7, #12]
    58fe:	6853      	ldr	r3, [r2, #4]
    5900:	f361 5314 	bfi	r3, r1, #20, #1
    5904:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    5906:	68fb      	ldr	r3, [r7, #12]
    5908:	f103 0008 	add.w	r0, r3, #8
    590c:	683b      	ldr	r3, [r7, #0]
    590e:	6899      	ldr	r1, [r3, #8]
    5910:	683b      	ldr	r3, [r7, #0]
    5912:	7b1b      	ldrb	r3, [r3, #12]
    5914:	461a      	mov	r2, r3
    5916:	4b10      	ldr	r3, [pc, #64]	; (5958 <_can_async_write+0x1b4>)
    5918:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	681c      	ldr	r4, [r3, #0]
    591e:	687b      	ldr	r3, [r7, #4]
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	4618      	mov	r0, r3
    5924:	4b07      	ldr	r3, [pc, #28]	; (5944 <_can_async_write+0x1a0>)
    5926:	4798      	blx	r3
    5928:	4602      	mov	r2, r0
    592a:	2301      	movs	r3, #1
    592c:	4093      	lsls	r3, r2
    592e:	4619      	mov	r1, r3
    5930:	4620      	mov	r0, r4
    5932:	4b0a      	ldr	r3, [pc, #40]	; (595c <_can_async_write+0x1b8>)
    5934:	4798      	blx	r3
	return ERR_NONE;
    5936:	2300      	movs	r3, #0
}
    5938:	4618      	mov	r0, r3
    593a:	3714      	adds	r7, #20
    593c:	46bd      	mov	sp, r7
    593e:	bd90      	pop	{r4, r7, pc}
    5940:	0000503b 	.word	0x0000503b
    5944:	00005065 	.word	0x00005065
    5948:	42000400 	.word	0x42000400
    594c:	2000e158 	.word	0x2000e158
    5950:	0000516b 	.word	0x0000516b
    5954:	0000519b 	.word	0x0000519b
    5958:	0001b0e1 	.word	0x0001b0e1
    595c:	00005431 	.word	0x00005431

00005960 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    5960:	b580      	push	{r7, lr}
    5962:	b084      	sub	sp, #16
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
    5968:	460b      	mov	r3, r1
    596a:	70fb      	strb	r3, [r7, #3]
    596c:	4613      	mov	r3, r2
    596e:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    5970:	78fb      	ldrb	r3, [r7, #3]
    5972:	2b00      	cmp	r3, #0
    5974:	d107      	bne.n	5986 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	78ba      	ldrb	r2, [r7, #2]
    597c:	4611      	mov	r1, r2
    597e:	4618      	mov	r0, r3
    5980:	4b16      	ldr	r3, [pc, #88]	; (59dc <_can_async_set_irq_state+0x7c>)
    5982:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    5984:	e026      	b.n	59d4 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    5986:	78fb      	ldrb	r3, [r7, #3]
    5988:	2b01      	cmp	r3, #1
    598a:	d10e      	bne.n	59aa <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	78ba      	ldrb	r2, [r7, #2]
    5992:	4611      	mov	r1, r2
    5994:	4618      	mov	r0, r3
    5996:	4b12      	ldr	r3, [pc, #72]	; (59e0 <_can_async_set_irq_state+0x80>)
    5998:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    599a:	687b      	ldr	r3, [r7, #4]
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	f04f 31ff 	mov.w	r1, #4294967295
    59a2:	4618      	mov	r0, r3
    59a4:	4b0f      	ldr	r3, [pc, #60]	; (59e4 <_can_async_set_irq_state+0x84>)
    59a6:	4798      	blx	r3
	return;
    59a8:	e014      	b.n	59d4 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    59aa:	78fb      	ldrb	r3, [r7, #3]
    59ac:	2b02      	cmp	r3, #2
    59ae:	d111      	bne.n	59d4 <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	f240 2101 	movw	r1, #513	; 0x201
    59b8:	4618      	mov	r0, r3
    59ba:	4b0b      	ldr	r3, [pc, #44]	; (59e8 <_can_async_set_irq_state+0x88>)
    59bc:	4798      	blx	r3
    59be:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	681a      	ldr	r2, [r3, #0]
    59c4:	68fb      	ldr	r3, [r7, #12]
    59c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    59ca:	4619      	mov	r1, r3
    59cc:	4610      	mov	r0, r2
    59ce:	4b07      	ldr	r3, [pc, #28]	; (59ec <_can_async_set_irq_state+0x8c>)
    59d0:	4798      	blx	r3
	return;
    59d2:	bf00      	nop
    59d4:	bf00      	nop
}
    59d6:	3710      	adds	r7, #16
    59d8:	46bd      	mov	sp, r7
    59da:	bd80      	pop	{r7, pc}
    59dc:	0000523d 	.word	0x0000523d
    59e0:	00005271 	.word	0x00005271
    59e4:	0000544f 	.word	0x0000544f
    59e8:	000052a9 	.word	0x000052a9
    59ec:	000052cf 	.word	0x000052cf

000059f0 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    59f0:	b480      	push	{r7}
    59f2:	b087      	sub	sp, #28
    59f4:	af00      	add	r7, sp, #0
    59f6:	60f8      	str	r0, [r7, #12]
    59f8:	607b      	str	r3, [r7, #4]
    59fa:	460b      	mov	r3, r1
    59fc:	72fb      	strb	r3, [r7, #11]
    59fe:	4613      	mov	r3, r2
    5a00:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    5a02:	68fb      	ldr	r3, [r7, #12]
    5a04:	699b      	ldr	r3, [r3, #24]
    5a06:	68da      	ldr	r2, [r3, #12]
    5a08:	7afb      	ldrb	r3, [r7, #11]
    5a0a:	009b      	lsls	r3, r3, #2
    5a0c:	4413      	add	r3, r2
    5a0e:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    5a10:	68fb      	ldr	r3, [r7, #12]
    5a12:	699b      	ldr	r3, [r3, #24]
    5a14:	691a      	ldr	r2, [r3, #16]
    5a16:	7afb      	ldrb	r3, [r7, #11]
    5a18:	00db      	lsls	r3, r3, #3
    5a1a:	4413      	add	r3, r2
    5a1c:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    5a1e:	7abb      	ldrb	r3, [r7, #10]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d123      	bne.n	5a6c <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	2b00      	cmp	r3, #0
    5a28:	d104      	bne.n	5a34 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    5a2a:	697b      	ldr	r3, [r7, #20]
    5a2c:	2200      	movs	r2, #0
    5a2e:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    5a30:	2300      	movs	r3, #0
    5a32:	e03b      	b.n	5aac <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	685a      	ldr	r2, [r3, #4]
    5a38:	697b      	ldr	r3, [r7, #20]
    5a3a:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	b29b      	uxth	r3, r3
    5a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
    5a46:	b299      	uxth	r1, r3
    5a48:	697a      	ldr	r2, [r7, #20]
    5a4a:	6813      	ldr	r3, [r2, #0]
    5a4c:	f361 431a 	bfi	r3, r1, #16, #11
    5a50:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    5a52:	697a      	ldr	r2, [r7, #20]
    5a54:	6813      	ldr	r3, [r2, #0]
    5a56:	2102      	movs	r1, #2
    5a58:	f361 739f 	bfi	r3, r1, #30, #2
    5a5c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    5a5e:	697a      	ldr	r2, [r7, #20]
    5a60:	6813      	ldr	r3, [r2, #0]
    5a62:	2101      	movs	r1, #1
    5a64:	f361 63dd 	bfi	r3, r1, #27, #3
    5a68:	6013      	str	r3, [r2, #0]
    5a6a:	e01e      	b.n	5aaa <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    5a6c:	7abb      	ldrb	r3, [r7, #10]
    5a6e:	2b01      	cmp	r3, #1
    5a70:	d11b      	bne.n	5aaa <_can_async_set_filter+0xba>
		if (filter == NULL) {
    5a72:	687b      	ldr	r3, [r7, #4]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d104      	bne.n	5a82 <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    5a78:	693b      	ldr	r3, [r7, #16]
    5a7a:	2200      	movs	r2, #0
    5a7c:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    5a7e:	2300      	movs	r3, #0
    5a80:	e014      	b.n	5aac <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    5a82:	687b      	ldr	r3, [r7, #4]
    5a84:	681a      	ldr	r2, [r3, #0]
    5a86:	693b      	ldr	r3, [r7, #16]
    5a88:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    5a8a:	693a      	ldr	r2, [r7, #16]
    5a8c:	6813      	ldr	r3, [r2, #0]
    5a8e:	2101      	movs	r1, #1
    5a90:	f361 735f 	bfi	r3, r1, #29, #3
    5a94:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    5a96:	687b      	ldr	r3, [r7, #4]
    5a98:	685a      	ldr	r2, [r3, #4]
    5a9a:	693b      	ldr	r3, [r7, #16]
    5a9c:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    5a9e:	693a      	ldr	r2, [r7, #16]
    5aa0:	6853      	ldr	r3, [r2, #4]
    5aa2:	2102      	movs	r1, #2
    5aa4:	f361 739f 	bfi	r3, r1, #30, #2
    5aa8:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    5aaa:	2300      	movs	r3, #0
}
    5aac:	4618      	mov	r0, r3
    5aae:	371c      	adds	r7, #28
    5ab0:	46bd      	mov	sp, r7
    5ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ab6:	4770      	bx	lr

00005ab8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5ab8:	b590      	push	{r4, r7, lr}
    5aba:	b083      	sub	sp, #12
    5abc:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5abe:	4b2c      	ldr	r3, [pc, #176]	; (5b70 <CAN1_Handler+0xb8>)
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	4618      	mov	r0, r3
    5aca:	4b2a      	ldr	r3, [pc, #168]	; (5b74 <CAN1_Handler+0xbc>)
    5acc:	4798      	blx	r3
    5ace:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5ad0:	683b      	ldr	r3, [r7, #0]
    5ad2:	f003 0301 	and.w	r3, r3, #1
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d003      	beq.n	5ae2 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	689b      	ldr	r3, [r3, #8]
    5ade:	6878      	ldr	r0, [r7, #4]
    5ae0:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5ae2:	683b      	ldr	r3, [r7, #0]
    5ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5ae8:	2b00      	cmp	r3, #0
    5aea:	d003      	beq.n	5af4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	685b      	ldr	r3, [r3, #4]
    5af0:	6878      	ldr	r0, [r7, #4]
    5af2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5af4:	683b      	ldr	r3, [r7, #0]
    5af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5afa:	2b00      	cmp	r3, #0
    5afc:	d004      	beq.n	5b08 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	68db      	ldr	r3, [r3, #12]
    5b02:	2103      	movs	r1, #3
    5b04:	6878      	ldr	r0, [r7, #4]
    5b06:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5b08:	683b      	ldr	r3, [r7, #0]
    5b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d004      	beq.n	5b1c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	68db      	ldr	r3, [r3, #12]
    5b16:	2100      	movs	r1, #0
    5b18:	6878      	ldr	r0, [r7, #4]
    5b1a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5b1c:	683b      	ldr	r3, [r7, #0]
    5b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5b22:	2b00      	cmp	r3, #0
    5b24:	d00f      	beq.n	5b46 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	68dc      	ldr	r4, [r3, #12]
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	4618      	mov	r0, r3
    5b30:	4b11      	ldr	r3, [pc, #68]	; (5b78 <CAN1_Handler+0xc0>)
    5b32:	4798      	blx	r3
    5b34:	4603      	mov	r3, r0
    5b36:	2b00      	cmp	r3, #0
    5b38:	d001      	beq.n	5b3e <CAN1_Handler+0x86>
    5b3a:	2302      	movs	r3, #2
    5b3c:	e000      	b.n	5b40 <CAN1_Handler+0x88>
    5b3e:	2301      	movs	r3, #1
    5b40:	4619      	mov	r1, r3
    5b42:	6878      	ldr	r0, [r7, #4]
    5b44:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5b46:	683b      	ldr	r3, [r7, #0]
    5b48:	f003 0308 	and.w	r3, r3, #8
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d004      	beq.n	5b5a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	68db      	ldr	r3, [r3, #12]
    5b54:	2104      	movs	r1, #4
    5b56:	6878      	ldr	r0, [r7, #4]
    5b58:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	6839      	ldr	r1, [r7, #0]
    5b60:	4618      	mov	r0, r3
    5b62:	4b06      	ldr	r3, [pc, #24]	; (5b7c <CAN1_Handler+0xc4>)
    5b64:	4798      	blx	r3
}
    5b66:	bf00      	nop
    5b68:	370c      	adds	r7, #12
    5b6a:	46bd      	mov	sp, r7
    5b6c:	bd90      	pop	{r4, r7, pc}
    5b6e:	bf00      	nop
    5b70:	20002344 	.word	0x20002344
    5b74:	00005225 	.word	0x00005225
    5b78:	00004fd5 	.word	0x00004fd5
    5b7c:	00005209 	.word	0x00005209

00005b80 <__NVIC_SetPendingIRQ>:
{
    5b80:	b480      	push	{r7}
    5b82:	b083      	sub	sp, #12
    5b84:	af00      	add	r7, sp, #0
    5b86:	4603      	mov	r3, r0
    5b88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	db0c      	blt.n	5bac <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b92:	4909      	ldr	r1, [pc, #36]	; (5bb8 <__NVIC_SetPendingIRQ+0x38>)
    5b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5b98:	095b      	lsrs	r3, r3, #5
    5b9a:	88fa      	ldrh	r2, [r7, #6]
    5b9c:	f002 021f 	and.w	r2, r2, #31
    5ba0:	2001      	movs	r0, #1
    5ba2:	fa00 f202 	lsl.w	r2, r0, r2
    5ba6:	3340      	adds	r3, #64	; 0x40
    5ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5bac:	bf00      	nop
    5bae:	370c      	adds	r7, #12
    5bb0:	46bd      	mov	sp, r7
    5bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb6:	4770      	bx	lr
    5bb8:	e000e100 	.word	0xe000e100

00005bbc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b082      	sub	sp, #8
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	4603      	mov	r3, r0
    5bc4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5bc6:	79fb      	ldrb	r3, [r7, #7]
    5bc8:	b21b      	sxth	r3, r3
    5bca:	4618      	mov	r0, r3
    5bcc:	4b02      	ldr	r3, [pc, #8]	; (5bd8 <_irq_set+0x1c>)
    5bce:	4798      	blx	r3
}
    5bd0:	bf00      	nop
    5bd2:	3708      	adds	r7, #8
    5bd4:	46bd      	mov	sp, r7
    5bd6:	bd80      	pop	{r7, pc}
    5bd8:	00005b81 	.word	0x00005b81

00005bdc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5bdc:	b480      	push	{r7}
    5bde:	b083      	sub	sp, #12
    5be0:	af00      	add	r7, sp, #0
    5be2:	4603      	mov	r3, r0
    5be4:	6039      	str	r1, [r7, #0]
    5be6:	80fb      	strh	r3, [r7, #6]
    5be8:	4613      	mov	r3, r2
    5bea:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5bec:	797b      	ldrb	r3, [r7, #5]
    5bee:	3b04      	subs	r3, #4
    5bf0:	2b05      	cmp	r3, #5
    5bf2:	d86b      	bhi.n	5ccc <_get_cycles_for_us_internal+0xf0>
    5bf4:	a201      	add	r2, pc, #4	; (adr r2, 5bfc <_get_cycles_for_us_internal+0x20>)
    5bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5bfa:	bf00      	nop
    5bfc:	00005cab 	.word	0x00005cab
    5c00:	00005c8b 	.word	0x00005c8b
    5c04:	00005c6d 	.word	0x00005c6d
    5c08:	00005c4f 	.word	0x00005c4f
    5c0c:	00005c31 	.word	0x00005c31
    5c10:	00005c15 	.word	0x00005c15
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5c14:	88fb      	ldrh	r3, [r7, #6]
    5c16:	683a      	ldr	r2, [r7, #0]
    5c18:	4935      	ldr	r1, [pc, #212]	; (5cf0 <_get_cycles_for_us_internal+0x114>)
    5c1a:	fba1 1202 	umull	r1, r2, r1, r2
    5c1e:	0c92      	lsrs	r2, r2, #18
    5c20:	fb02 f303 	mul.w	r3, r2, r3
    5c24:	3302      	adds	r3, #2
    5c26:	4a33      	ldr	r2, [pc, #204]	; (5cf4 <_get_cycles_for_us_internal+0x118>)
    5c28:	fba2 2303 	umull	r2, r3, r2, r3
    5c2c:	085b      	lsrs	r3, r3, #1
    5c2e:	e059      	b.n	5ce4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5c30:	88fb      	ldrh	r3, [r7, #6]
    5c32:	683a      	ldr	r2, [r7, #0]
    5c34:	0952      	lsrs	r2, r2, #5
    5c36:	4930      	ldr	r1, [pc, #192]	; (5cf8 <_get_cycles_for_us_internal+0x11c>)
    5c38:	fba1 1202 	umull	r1, r2, r1, r2
    5c3c:	09d2      	lsrs	r2, r2, #7
    5c3e:	fb02 f303 	mul.w	r3, r2, r3
    5c42:	331d      	adds	r3, #29
    5c44:	4a2d      	ldr	r2, [pc, #180]	; (5cfc <_get_cycles_for_us_internal+0x120>)
    5c46:	fba2 2303 	umull	r2, r3, r2, r3
    5c4a:	091b      	lsrs	r3, r3, #4
    5c4c:	e04a      	b.n	5ce4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5c4e:	88fb      	ldrh	r3, [r7, #6]
    5c50:	683a      	ldr	r2, [r7, #0]
    5c52:	492b      	ldr	r1, [pc, #172]	; (5d00 <_get_cycles_for_us_internal+0x124>)
    5c54:	fba1 1202 	umull	r1, r2, r1, r2
    5c58:	0b52      	lsrs	r2, r2, #13
    5c5a:	fb02 f303 	mul.w	r3, r2, r3
    5c5e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5c62:	4a28      	ldr	r2, [pc, #160]	; (5d04 <_get_cycles_for_us_internal+0x128>)
    5c64:	fba2 2303 	umull	r2, r3, r2, r3
    5c68:	095b      	lsrs	r3, r3, #5
    5c6a:	e03b      	b.n	5ce4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5c6c:	88fb      	ldrh	r3, [r7, #6]
    5c6e:	683a      	ldr	r2, [r7, #0]
    5c70:	4925      	ldr	r1, [pc, #148]	; (5d08 <_get_cycles_for_us_internal+0x12c>)
    5c72:	fba1 1202 	umull	r1, r2, r1, r2
    5c76:	0992      	lsrs	r2, r2, #6
    5c78:	fb02 f303 	mul.w	r3, r2, r3
    5c7c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5c80:	4a22      	ldr	r2, [pc, #136]	; (5d0c <_get_cycles_for_us_internal+0x130>)
    5c82:	fba2 2303 	umull	r2, r3, r2, r3
    5c86:	099b      	lsrs	r3, r3, #6
    5c88:	e02c      	b.n	5ce4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5c8a:	88fb      	ldrh	r3, [r7, #6]
    5c8c:	683a      	ldr	r2, [r7, #0]
    5c8e:	4920      	ldr	r1, [pc, #128]	; (5d10 <_get_cycles_for_us_internal+0x134>)
    5c90:	fba1 1202 	umull	r1, r2, r1, r2
    5c94:	0952      	lsrs	r2, r2, #5
    5c96:	fb02 f303 	mul.w	r3, r2, r3
    5c9a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5c9e:	332f      	adds	r3, #47	; 0x2f
    5ca0:	4a1c      	ldr	r2, [pc, #112]	; (5d14 <_get_cycles_for_us_internal+0x138>)
    5ca2:	fba2 2303 	umull	r2, r3, r2, r3
    5ca6:	0b5b      	lsrs	r3, r3, #13
    5ca8:	e01c      	b.n	5ce4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5caa:	88fb      	ldrh	r3, [r7, #6]
    5cac:	683a      	ldr	r2, [r7, #0]
    5cae:	491a      	ldr	r1, [pc, #104]	; (5d18 <_get_cycles_for_us_internal+0x13c>)
    5cb0:	fba1 1202 	umull	r1, r2, r1, r2
    5cb4:	08d2      	lsrs	r2, r2, #3
    5cb6:	fb02 f303 	mul.w	r3, r2, r3
    5cba:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5cbe:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5cc2:	4a16      	ldr	r2, [pc, #88]	; (5d1c <_get_cycles_for_us_internal+0x140>)
    5cc4:	fba2 2303 	umull	r2, r3, r2, r3
    5cc8:	0c5b      	lsrs	r3, r3, #17
    5cca:	e00b      	b.n	5ce4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5ccc:	88fb      	ldrh	r3, [r7, #6]
    5cce:	683a      	ldr	r2, [r7, #0]
    5cd0:	fb02 f303 	mul.w	r3, r2, r3
    5cd4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5cd8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5cdc:	4a10      	ldr	r2, [pc, #64]	; (5d20 <_get_cycles_for_us_internal+0x144>)
    5cde:	fba2 2303 	umull	r2, r3, r2, r3
    5ce2:	0c9b      	lsrs	r3, r3, #18
	}
}
    5ce4:	4618      	mov	r0, r3
    5ce6:	370c      	adds	r7, #12
    5ce8:	46bd      	mov	sp, r7
    5cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cee:	4770      	bx	lr
    5cf0:	431bde83 	.word	0x431bde83
    5cf4:	aaaaaaab 	.word	0xaaaaaaab
    5cf8:	0a7c5ac5 	.word	0x0a7c5ac5
    5cfc:	88888889 	.word	0x88888889
    5d00:	d1b71759 	.word	0xd1b71759
    5d04:	1b4e81b5 	.word	0x1b4e81b5
    5d08:	10624dd3 	.word	0x10624dd3
    5d0c:	057619f1 	.word	0x057619f1
    5d10:	51eb851f 	.word	0x51eb851f
    5d14:	45e7b273 	.word	0x45e7b273
    5d18:	cccccccd 	.word	0xcccccccd
    5d1c:	6fd91d85 	.word	0x6fd91d85
    5d20:	165e9f81 	.word	0x165e9f81

00005d24 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b082      	sub	sp, #8
    5d28:	af00      	add	r7, sp, #0
    5d2a:	4603      	mov	r3, r0
    5d2c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5d2e:	88fb      	ldrh	r3, [r7, #6]
    5d30:	2209      	movs	r2, #9
    5d32:	4904      	ldr	r1, [pc, #16]	; (5d44 <_get_cycles_for_us+0x20>)
    5d34:	4618      	mov	r0, r3
    5d36:	4b04      	ldr	r3, [pc, #16]	; (5d48 <_get_cycles_for_us+0x24>)
    5d38:	4798      	blx	r3
    5d3a:	4603      	mov	r3, r0
}
    5d3c:	4618      	mov	r0, r3
    5d3e:	3708      	adds	r7, #8
    5d40:	46bd      	mov	sp, r7
    5d42:	bd80      	pop	{r7, pc}
    5d44:	07270e00 	.word	0x07270e00
    5d48:	00005bdd 	.word	0x00005bdd

00005d4c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5d4c:	b480      	push	{r7}
    5d4e:	b083      	sub	sp, #12
    5d50:	af00      	add	r7, sp, #0
    5d52:	4603      	mov	r3, r0
    5d54:	6039      	str	r1, [r7, #0]
    5d56:	80fb      	strh	r3, [r7, #6]
    5d58:	4613      	mov	r3, r2
    5d5a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5d5c:	797b      	ldrb	r3, [r7, #5]
    5d5e:	3b04      	subs	r3, #4
    5d60:	2b05      	cmp	r3, #5
    5d62:	d870      	bhi.n	5e46 <_get_cycles_for_ms_internal+0xfa>
    5d64:	a201      	add	r2, pc, #4	; (adr r2, 5d6c <_get_cycles_for_ms_internal+0x20>)
    5d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5d6a:	bf00      	nop
    5d6c:	00005e29 	.word	0x00005e29
    5d70:	00005e0d 	.word	0x00005e0d
    5d74:	00005df1 	.word	0x00005df1
    5d78:	00005dcd 	.word	0x00005dcd
    5d7c:	00005da9 	.word	0x00005da9
    5d80:	00005d85 	.word	0x00005d85
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5d84:	88fb      	ldrh	r3, [r7, #6]
    5d86:	683a      	ldr	r2, [r7, #0]
    5d88:	4937      	ldr	r1, [pc, #220]	; (5e68 <_get_cycles_for_ms_internal+0x11c>)
    5d8a:	fba1 1202 	umull	r1, r2, r1, r2
    5d8e:	0c92      	lsrs	r2, r2, #18
    5d90:	fb02 f303 	mul.w	r3, r2, r3
    5d94:	3302      	adds	r3, #2
    5d96:	4a35      	ldr	r2, [pc, #212]	; (5e6c <_get_cycles_for_ms_internal+0x120>)
    5d98:	fba2 2303 	umull	r2, r3, r2, r3
    5d9c:	085b      	lsrs	r3, r3, #1
    5d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5da2:	fb02 f303 	mul.w	r3, r2, r3
    5da6:	e058      	b.n	5e5a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5da8:	88fb      	ldrh	r3, [r7, #6]
    5daa:	683a      	ldr	r2, [r7, #0]
    5dac:	0952      	lsrs	r2, r2, #5
    5dae:	4930      	ldr	r1, [pc, #192]	; (5e70 <_get_cycles_for_ms_internal+0x124>)
    5db0:	fba1 1202 	umull	r1, r2, r1, r2
    5db4:	09d2      	lsrs	r2, r2, #7
    5db6:	fb02 f303 	mul.w	r3, r2, r3
    5dba:	3302      	adds	r3, #2
    5dbc:	4a2b      	ldr	r2, [pc, #172]	; (5e6c <_get_cycles_for_ms_internal+0x120>)
    5dbe:	fba2 2303 	umull	r2, r3, r2, r3
    5dc2:	085b      	lsrs	r3, r3, #1
    5dc4:	2264      	movs	r2, #100	; 0x64
    5dc6:	fb02 f303 	mul.w	r3, r2, r3
    5dca:	e046      	b.n	5e5a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5dcc:	88fb      	ldrh	r3, [r7, #6]
    5dce:	683a      	ldr	r2, [r7, #0]
    5dd0:	4928      	ldr	r1, [pc, #160]	; (5e74 <_get_cycles_for_ms_internal+0x128>)
    5dd2:	fba1 1202 	umull	r1, r2, r1, r2
    5dd6:	0b52      	lsrs	r2, r2, #13
    5dd8:	fb02 f303 	mul.w	r3, r2, r3
    5ddc:	3302      	adds	r3, #2
    5dde:	4a23      	ldr	r2, [pc, #140]	; (5e6c <_get_cycles_for_ms_internal+0x120>)
    5de0:	fba2 2303 	umull	r2, r3, r2, r3
    5de4:	085a      	lsrs	r2, r3, #1
    5de6:	4613      	mov	r3, r2
    5de8:	009b      	lsls	r3, r3, #2
    5dea:	4413      	add	r3, r2
    5dec:	005b      	lsls	r3, r3, #1
    5dee:	e034      	b.n	5e5a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5df0:	88fb      	ldrh	r3, [r7, #6]
    5df2:	683a      	ldr	r2, [r7, #0]
    5df4:	4920      	ldr	r1, [pc, #128]	; (5e78 <_get_cycles_for_ms_internal+0x12c>)
    5df6:	fba1 1202 	umull	r1, r2, r1, r2
    5dfa:	0992      	lsrs	r2, r2, #6
    5dfc:	fb02 f303 	mul.w	r3, r2, r3
    5e00:	3302      	adds	r3, #2
    5e02:	4a1a      	ldr	r2, [pc, #104]	; (5e6c <_get_cycles_for_ms_internal+0x120>)
    5e04:	fba2 2303 	umull	r2, r3, r2, r3
    5e08:	085b      	lsrs	r3, r3, #1
    5e0a:	e026      	b.n	5e5a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5e0c:	88fb      	ldrh	r3, [r7, #6]
    5e0e:	683a      	ldr	r2, [r7, #0]
    5e10:	491a      	ldr	r1, [pc, #104]	; (5e7c <_get_cycles_for_ms_internal+0x130>)
    5e12:	fba1 1202 	umull	r1, r2, r1, r2
    5e16:	0952      	lsrs	r2, r2, #5
    5e18:	fb02 f303 	mul.w	r3, r2, r3
    5e1c:	331d      	adds	r3, #29
    5e1e:	4a18      	ldr	r2, [pc, #96]	; (5e80 <_get_cycles_for_ms_internal+0x134>)
    5e20:	fba2 2303 	umull	r2, r3, r2, r3
    5e24:	091b      	lsrs	r3, r3, #4
    5e26:	e018      	b.n	5e5a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5e28:	88fb      	ldrh	r3, [r7, #6]
    5e2a:	683a      	ldr	r2, [r7, #0]
    5e2c:	4915      	ldr	r1, [pc, #84]	; (5e84 <_get_cycles_for_ms_internal+0x138>)
    5e2e:	fba1 1202 	umull	r1, r2, r1, r2
    5e32:	08d2      	lsrs	r2, r2, #3
    5e34:	fb02 f303 	mul.w	r3, r2, r3
    5e38:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5e3c:	4a12      	ldr	r2, [pc, #72]	; (5e88 <_get_cycles_for_ms_internal+0x13c>)
    5e3e:	fba2 2303 	umull	r2, r3, r2, r3
    5e42:	095b      	lsrs	r3, r3, #5
    5e44:	e009      	b.n	5e5a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    5e46:	88fb      	ldrh	r3, [r7, #6]
    5e48:	683a      	ldr	r2, [r7, #0]
    5e4a:	fb02 f303 	mul.w	r3, r2, r3
    5e4e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5e52:	4a0e      	ldr	r2, [pc, #56]	; (5e8c <_get_cycles_for_ms_internal+0x140>)
    5e54:	fba2 2303 	umull	r2, r3, r2, r3
    5e58:	099b      	lsrs	r3, r3, #6
	}
}
    5e5a:	4618      	mov	r0, r3
    5e5c:	370c      	adds	r7, #12
    5e5e:	46bd      	mov	sp, r7
    5e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e64:	4770      	bx	lr
    5e66:	bf00      	nop
    5e68:	431bde83 	.word	0x431bde83
    5e6c:	aaaaaaab 	.word	0xaaaaaaab
    5e70:	0a7c5ac5 	.word	0x0a7c5ac5
    5e74:	d1b71759 	.word	0xd1b71759
    5e78:	10624dd3 	.word	0x10624dd3
    5e7c:	51eb851f 	.word	0x51eb851f
    5e80:	88888889 	.word	0x88888889
    5e84:	cccccccd 	.word	0xcccccccd
    5e88:	1b4e81b5 	.word	0x1b4e81b5
    5e8c:	057619f1 	.word	0x057619f1

00005e90 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    5e90:	b580      	push	{r7, lr}
    5e92:	b082      	sub	sp, #8
    5e94:	af00      	add	r7, sp, #0
    5e96:	4603      	mov	r3, r0
    5e98:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5e9a:	88fb      	ldrh	r3, [r7, #6]
    5e9c:	2209      	movs	r2, #9
    5e9e:	4904      	ldr	r1, [pc, #16]	; (5eb0 <_get_cycles_for_ms+0x20>)
    5ea0:	4618      	mov	r0, r3
    5ea2:	4b04      	ldr	r3, [pc, #16]	; (5eb4 <_get_cycles_for_ms+0x24>)
    5ea4:	4798      	blx	r3
    5ea6:	4603      	mov	r3, r0
}
    5ea8:	4618      	mov	r0, r3
    5eaa:	3708      	adds	r7, #8
    5eac:	46bd      	mov	sp, r7
    5eae:	bd80      	pop	{r7, pc}
    5eb0:	07270e00 	.word	0x07270e00
    5eb4:	00005d4d 	.word	0x00005d4d

00005eb8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5eb8:	b480      	push	{r7}
    5eba:	b083      	sub	sp, #12
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	6078      	str	r0, [r7, #4]
    5ec0:	6039      	str	r1, [r7, #0]
    5ec2:	bf00      	nop
    5ec4:	f3af 8000 	nop.w

00005ec8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    5ec8:	3901      	subs	r1, #1
    5eca:	d8fd      	bhi.n	5ec8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    5ecc:	bf00      	nop
    5ece:	370c      	adds	r7, #12
    5ed0:	46bd      	mov	sp, r7
    5ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed6:	4770      	bx	lr

00005ed8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5ed8:	b480      	push	{r7}
    5eda:	b083      	sub	sp, #12
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
    5ee0:	460b      	mov	r3, r1
    5ee2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	881b      	ldrh	r3, [r3, #0]
    5ee8:	b29a      	uxth	r2, r3
    5eea:	887b      	ldrh	r3, [r7, #2]
    5eec:	021b      	lsls	r3, r3, #8
    5eee:	b29b      	uxth	r3, r3
    5ef0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    5ef4:	b29b      	uxth	r3, r3
    5ef6:	4313      	orrs	r3, r2
    5ef8:	b29a      	uxth	r2, r3
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5efe:	bf00      	nop
    5f00:	370c      	adds	r7, #12
    5f02:	46bd      	mov	sp, r7
    5f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f08:	4770      	bx	lr

00005f0a <hri_port_set_EVCTRL_reg>:
{
    5f0a:	b480      	push	{r7}
    5f0c:	b085      	sub	sp, #20
    5f0e:	af00      	add	r7, sp, #0
    5f10:	60f8      	str	r0, [r7, #12]
    5f12:	460b      	mov	r3, r1
    5f14:	607a      	str	r2, [r7, #4]
    5f16:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5f18:	7afb      	ldrb	r3, [r7, #11]
    5f1a:	7afa      	ldrb	r2, [r7, #11]
    5f1c:	68f9      	ldr	r1, [r7, #12]
    5f1e:	01d2      	lsls	r2, r2, #7
    5f20:	440a      	add	r2, r1
    5f22:	322c      	adds	r2, #44	; 0x2c
    5f24:	6811      	ldr	r1, [r2, #0]
    5f26:	687a      	ldr	r2, [r7, #4]
    5f28:	430a      	orrs	r2, r1
    5f2a:	68f9      	ldr	r1, [r7, #12]
    5f2c:	01db      	lsls	r3, r3, #7
    5f2e:	440b      	add	r3, r1
    5f30:	332c      	adds	r3, #44	; 0x2c
    5f32:	601a      	str	r2, [r3, #0]
}
    5f34:	bf00      	nop
    5f36:	3714      	adds	r7, #20
    5f38:	46bd      	mov	sp, r7
    5f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3e:	4770      	bx	lr

00005f40 <_port_event_init>:

static inline void _port_event_init()
{
    5f40:	b580      	push	{r7, lr}
    5f42:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    5f44:	2200      	movs	r2, #0
    5f46:	2100      	movs	r1, #0
    5f48:	480a      	ldr	r0, [pc, #40]	; (5f74 <_port_event_init+0x34>)
    5f4a:	4b0b      	ldr	r3, [pc, #44]	; (5f78 <_port_event_init+0x38>)
    5f4c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5f4e:	2200      	movs	r2, #0
    5f50:	2101      	movs	r1, #1
    5f52:	4808      	ldr	r0, [pc, #32]	; (5f74 <_port_event_init+0x34>)
    5f54:	4b08      	ldr	r3, [pc, #32]	; (5f78 <_port_event_init+0x38>)
    5f56:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5f58:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5f5c:	2102      	movs	r1, #2
    5f5e:	4805      	ldr	r0, [pc, #20]	; (5f74 <_port_event_init+0x34>)
    5f60:	4b05      	ldr	r3, [pc, #20]	; (5f78 <_port_event_init+0x38>)
    5f62:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    5f64:	2200      	movs	r2, #0
    5f66:	2103      	movs	r1, #3
    5f68:	4802      	ldr	r0, [pc, #8]	; (5f74 <_port_event_init+0x34>)
    5f6a:	4b03      	ldr	r3, [pc, #12]	; (5f78 <_port_event_init+0x38>)
    5f6c:	4798      	blx	r3
}
    5f6e:	bf00      	nop
    5f70:	bd80      	pop	{r7, pc}
    5f72:	bf00      	nop
    5f74:	41008000 	.word	0x41008000
    5f78:	00005f0b 	.word	0x00005f0b

00005f7c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5f7c:	b580      	push	{r7, lr}
    5f7e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5f80:	2104      	movs	r1, #4
    5f82:	480b      	ldr	r0, [pc, #44]	; (5fb0 <_init_chip+0x34>)
    5f84:	4b0b      	ldr	r3, [pc, #44]	; (5fb4 <_init_chip+0x38>)
    5f86:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5f88:	4b0b      	ldr	r3, [pc, #44]	; (5fb8 <_init_chip+0x3c>)
    5f8a:	4798      	blx	r3
	_oscctrl_init_sources();
    5f8c:	4b0b      	ldr	r3, [pc, #44]	; (5fbc <_init_chip+0x40>)
    5f8e:	4798      	blx	r3
	_mclk_init();
    5f90:	4b0b      	ldr	r3, [pc, #44]	; (5fc0 <_init_chip+0x44>)
    5f92:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5f94:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5f98:	4b0a      	ldr	r3, [pc, #40]	; (5fc4 <_init_chip+0x48>)
    5f9a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5f9c:	4b0a      	ldr	r3, [pc, #40]	; (5fc8 <_init_chip+0x4c>)
    5f9e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5fa0:	f640 30df 	movw	r0, #3039	; 0xbdf
    5fa4:	4b07      	ldr	r3, [pc, #28]	; (5fc4 <_init_chip+0x48>)
    5fa6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5fa8:	4b08      	ldr	r3, [pc, #32]	; (5fcc <_init_chip+0x50>)
    5faa:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5fac:	bf00      	nop
    5fae:	bd80      	pop	{r7, pc}
    5fb0:	41004000 	.word	0x41004000
    5fb4:	00005ed9 	.word	0x00005ed9
    5fb8:	00006ac9 	.word	0x00006ac9
    5fbc:	00006f91 	.word	0x00006f91
    5fc0:	000069e9 	.word	0x000069e9
    5fc4:	00006891 	.word	0x00006891
    5fc8:	00006fd1 	.word	0x00006fd1
    5fcc:	00005f41 	.word	0x00005f41

00005fd0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5fd0:	b480      	push	{r7}
    5fd2:	b083      	sub	sp, #12
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	6078      	str	r0, [r7, #4]
    5fd8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	683a      	ldr	r2, [r7, #0]
    5fde:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5fe0:	2300      	movs	r3, #0
}
    5fe2:	4618      	mov	r0, r3
    5fe4:	370c      	adds	r7, #12
    5fe6:	46bd      	mov	sp, r7
    5fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fec:	4770      	bx	lr
	...

00005ff0 <__NVIC_EnableIRQ>:
{
    5ff0:	b480      	push	{r7}
    5ff2:	b083      	sub	sp, #12
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	4603      	mov	r3, r0
    5ff8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ffe:	2b00      	cmp	r3, #0
    6000:	db0b      	blt.n	601a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6002:	4909      	ldr	r1, [pc, #36]	; (6028 <__NVIC_EnableIRQ+0x38>)
    6004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6008:	095b      	lsrs	r3, r3, #5
    600a:	88fa      	ldrh	r2, [r7, #6]
    600c:	f002 021f 	and.w	r2, r2, #31
    6010:	2001      	movs	r0, #1
    6012:	fa00 f202 	lsl.w	r2, r0, r2
    6016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    601a:	bf00      	nop
    601c:	370c      	adds	r7, #12
    601e:	46bd      	mov	sp, r7
    6020:	f85d 7b04 	ldr.w	r7, [sp], #4
    6024:	4770      	bx	lr
    6026:	bf00      	nop
    6028:	e000e100 	.word	0xe000e100

0000602c <__NVIC_DisableIRQ>:
{
    602c:	b480      	push	{r7}
    602e:	b083      	sub	sp, #12
    6030:	af00      	add	r7, sp, #0
    6032:	4603      	mov	r3, r0
    6034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    603a:	2b00      	cmp	r3, #0
    603c:	db10      	blt.n	6060 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    603e:	490b      	ldr	r1, [pc, #44]	; (606c <__NVIC_DisableIRQ+0x40>)
    6040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6044:	095b      	lsrs	r3, r3, #5
    6046:	88fa      	ldrh	r2, [r7, #6]
    6048:	f002 021f 	and.w	r2, r2, #31
    604c:	2001      	movs	r0, #1
    604e:	fa00 f202 	lsl.w	r2, r0, r2
    6052:	3320      	adds	r3, #32
    6054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6058:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    605c:	f3bf 8f6f 	isb	sy
}
    6060:	bf00      	nop
    6062:	370c      	adds	r7, #12
    6064:	46bd      	mov	sp, r7
    6066:	f85d 7b04 	ldr.w	r7, [sp], #4
    606a:	4770      	bx	lr
    606c:	e000e100 	.word	0xe000e100

00006070 <__NVIC_ClearPendingIRQ>:
{
    6070:	b480      	push	{r7}
    6072:	b083      	sub	sp, #12
    6074:	af00      	add	r7, sp, #0
    6076:	4603      	mov	r3, r0
    6078:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    607a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    607e:	2b00      	cmp	r3, #0
    6080:	db0c      	blt.n	609c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6082:	4909      	ldr	r1, [pc, #36]	; (60a8 <__NVIC_ClearPendingIRQ+0x38>)
    6084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6088:	095b      	lsrs	r3, r3, #5
    608a:	88fa      	ldrh	r2, [r7, #6]
    608c:	f002 021f 	and.w	r2, r2, #31
    6090:	2001      	movs	r0, #1
    6092:	fa00 f202 	lsl.w	r2, r0, r2
    6096:	3360      	adds	r3, #96	; 0x60
    6098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    609c:	bf00      	nop
    609e:	370c      	adds	r7, #12
    60a0:	46bd      	mov	sp, r7
    60a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60a6:	4770      	bx	lr
    60a8:	e000e100 	.word	0xe000e100

000060ac <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    60ac:	b480      	push	{r7}
    60ae:	b083      	sub	sp, #12
    60b0:	af00      	add	r7, sp, #0
    60b2:	6078      	str	r0, [r7, #4]
    60b4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    60b6:	bf00      	nop
    60b8:	687b      	ldr	r3, [r7, #4]
    60ba:	685a      	ldr	r2, [r3, #4]
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	4013      	ands	r3, r2
    60c0:	2b00      	cmp	r3, #0
    60c2:	d1f9      	bne.n	60b8 <hri_eic_wait_for_sync+0xc>
	};
}
    60c4:	bf00      	nop
    60c6:	370c      	adds	r7, #12
    60c8:	46bd      	mov	sp, r7
    60ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ce:	4770      	bx	lr

000060d0 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    60d0:	b480      	push	{r7}
    60d2:	b083      	sub	sp, #12
    60d4:	af00      	add	r7, sp, #0
    60d6:	6078      	str	r0, [r7, #4]
    60d8:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	685a      	ldr	r2, [r3, #4]
    60de:	683b      	ldr	r3, [r7, #0]
    60e0:	4013      	ands	r3, r2
    60e2:	2b00      	cmp	r3, #0
    60e4:	bf14      	ite	ne
    60e6:	2301      	movne	r3, #1
    60e8:	2300      	moveq	r3, #0
    60ea:	b2db      	uxtb	r3, r3
}
    60ec:	4618      	mov	r0, r3
    60ee:	370c      	adds	r7, #12
    60f0:	46bd      	mov	sp, r7
    60f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60f6:	4770      	bx	lr

000060f8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    60f8:	b480      	push	{r7}
    60fa:	b083      	sub	sp, #12
    60fc:	af00      	add	r7, sp, #0
    60fe:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    6100:	687b      	ldr	r3, [r7, #4]
    6102:	695b      	ldr	r3, [r3, #20]
}
    6104:	4618      	mov	r0, r3
    6106:	370c      	adds	r7, #12
    6108:	46bd      	mov	sp, r7
    610a:	f85d 7b04 	ldr.w	r7, [sp], #4
    610e:	4770      	bx	lr

00006110 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    6110:	b480      	push	{r7}
    6112:	b083      	sub	sp, #12
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
    6118:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    611a:	687b      	ldr	r3, [r7, #4]
    611c:	683a      	ldr	r2, [r7, #0]
    611e:	615a      	str	r2, [r3, #20]
}
    6120:	bf00      	nop
    6122:	370c      	adds	r7, #12
    6124:	46bd      	mov	sp, r7
    6126:	f85d 7b04 	ldr.w	r7, [sp], #4
    612a:	4770      	bx	lr

0000612c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    612c:	b480      	push	{r7}
    612e:	b083      	sub	sp, #12
    6130:	af00      	add	r7, sp, #0
    6132:	6078      	str	r0, [r7, #4]
    6134:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    6136:	687b      	ldr	r3, [r7, #4]
    6138:	683a      	ldr	r2, [r7, #0]
    613a:	611a      	str	r2, [r3, #16]
}
    613c:	bf00      	nop
    613e:	370c      	adds	r7, #12
    6140:	46bd      	mov	sp, r7
    6142:	f85d 7b04 	ldr.w	r7, [sp], #4
    6146:	4770      	bx	lr

00006148 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6148:	b480      	push	{r7}
    614a:	b083      	sub	sp, #12
    614c:	af00      	add	r7, sp, #0
    614e:	6078      	str	r0, [r7, #4]
    6150:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    6152:	687b      	ldr	r3, [r7, #4]
    6154:	683a      	ldr	r2, [r7, #0]
    6156:	60da      	str	r2, [r3, #12]
}
    6158:	bf00      	nop
    615a:	370c      	adds	r7, #12
    615c:	46bd      	mov	sp, r7
    615e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6162:	4770      	bx	lr

00006164 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6164:	b580      	push	{r7, lr}
    6166:	b082      	sub	sp, #8
    6168:	af00      	add	r7, sp, #0
    616a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	b2db      	uxtb	r3, r3
    6172:	f043 0302 	orr.w	r3, r3, #2
    6176:	b2da      	uxtb	r2, r3
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    617c:	2103      	movs	r1, #3
    617e:	6878      	ldr	r0, [r7, #4]
    6180:	4b02      	ldr	r3, [pc, #8]	; (618c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    6182:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6184:	bf00      	nop
    6186:	3708      	adds	r7, #8
    6188:	46bd      	mov	sp, r7
    618a:	bd80      	pop	{r7, pc}
    618c:	000060ad 	.word	0x000060ad

00006190 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6190:	b580      	push	{r7, lr}
    6192:	b082      	sub	sp, #8
    6194:	af00      	add	r7, sp, #0
    6196:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6198:	687b      	ldr	r3, [r7, #4]
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	b2db      	uxtb	r3, r3
    619e:	f023 0302 	bic.w	r3, r3, #2
    61a2:	b2da      	uxtb	r2, r3
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    61a8:	2103      	movs	r1, #3
    61aa:	6878      	ldr	r0, [r7, #4]
    61ac:	4b02      	ldr	r3, [pc, #8]	; (61b8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    61ae:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    61b0:	bf00      	nop
    61b2:	3708      	adds	r7, #8
    61b4:	46bd      	mov	sp, r7
    61b6:	bd80      	pop	{r7, pc}
    61b8:	000060ad 	.word	0x000060ad

000061bc <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    61bc:	b580      	push	{r7, lr}
    61be:	b084      	sub	sp, #16
    61c0:	af00      	add	r7, sp, #0
    61c2:	6078      	str	r0, [r7, #4]
    61c4:	460b      	mov	r3, r1
    61c6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	781b      	ldrb	r3, [r3, #0]
    61cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    61ce:	7bfb      	ldrb	r3, [r7, #15]
    61d0:	f023 0310 	bic.w	r3, r3, #16
    61d4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    61d6:	78fb      	ldrb	r3, [r7, #3]
    61d8:	011b      	lsls	r3, r3, #4
    61da:	b25a      	sxtb	r2, r3
    61dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    61e0:	4313      	orrs	r3, r2
    61e2:	b25b      	sxtb	r3, r3
    61e4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	7bfa      	ldrb	r2, [r7, #15]
    61ea:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    61ec:	2103      	movs	r1, #3
    61ee:	6878      	ldr	r0, [r7, #4]
    61f0:	4b02      	ldr	r3, [pc, #8]	; (61fc <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    61f2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    61f4:	bf00      	nop
    61f6:	3710      	adds	r7, #16
    61f8:	46bd      	mov	sp, r7
    61fa:	bd80      	pop	{r7, pc}
    61fc:	000060ad 	.word	0x000060ad

00006200 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6200:	b580      	push	{r7, lr}
    6202:	b084      	sub	sp, #16
    6204:	af00      	add	r7, sp, #0
    6206:	6078      	str	r0, [r7, #4]
    6208:	460b      	mov	r3, r1
    620a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    620c:	2103      	movs	r1, #3
    620e:	6878      	ldr	r0, [r7, #4]
    6210:	4b06      	ldr	r3, [pc, #24]	; (622c <hri_eic_get_CTRLA_reg+0x2c>)
    6212:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	781b      	ldrb	r3, [r3, #0]
    6218:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    621a:	7bfa      	ldrb	r2, [r7, #15]
    621c:	78fb      	ldrb	r3, [r7, #3]
    621e:	4013      	ands	r3, r2
    6220:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6222:	7bfb      	ldrb	r3, [r7, #15]
}
    6224:	4618      	mov	r0, r3
    6226:	3710      	adds	r7, #16
    6228:	46bd      	mov	sp, r7
    622a:	bd80      	pop	{r7, pc}
    622c:	000060ad 	.word	0x000060ad

00006230 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    6230:	b580      	push	{r7, lr}
    6232:	b082      	sub	sp, #8
    6234:	af00      	add	r7, sp, #0
    6236:	6078      	str	r0, [r7, #4]
    6238:	460b      	mov	r3, r1
    623a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	78fa      	ldrb	r2, [r7, #3]
    6240:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6242:	2103      	movs	r1, #3
    6244:	6878      	ldr	r0, [r7, #4]
    6246:	4b03      	ldr	r3, [pc, #12]	; (6254 <hri_eic_write_CTRLA_reg+0x24>)
    6248:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    624a:	bf00      	nop
    624c:	3708      	adds	r7, #8
    624e:	46bd      	mov	sp, r7
    6250:	bd80      	pop	{r7, pc}
    6252:	bf00      	nop
    6254:	000060ad 	.word	0x000060ad

00006258 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    6258:	b480      	push	{r7}
    625a:	b083      	sub	sp, #12
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
    6260:	460b      	mov	r3, r1
    6262:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	78fa      	ldrb	r2, [r7, #3]
    6268:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    626a:	bf00      	nop
    626c:	370c      	adds	r7, #12
    626e:	46bd      	mov	sp, r7
    6270:	f85d 7b04 	ldr.w	r7, [sp], #4
    6274:	4770      	bx	lr

00006276 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    6276:	b480      	push	{r7}
    6278:	b083      	sub	sp, #12
    627a:	af00      	add	r7, sp, #0
    627c:	6078      	str	r0, [r7, #4]
    627e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6280:	687b      	ldr	r3, [r7, #4]
    6282:	683a      	ldr	r2, [r7, #0]
    6284:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6286:	bf00      	nop
    6288:	370c      	adds	r7, #12
    628a:	46bd      	mov	sp, r7
    628c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6290:	4770      	bx	lr

00006292 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    6292:	b480      	push	{r7}
    6294:	b083      	sub	sp, #12
    6296:	af00      	add	r7, sp, #0
    6298:	6078      	str	r0, [r7, #4]
    629a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	683a      	ldr	r2, [r7, #0]
    62a0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    62a2:	bf00      	nop
    62a4:	370c      	adds	r7, #12
    62a6:	46bd      	mov	sp, r7
    62a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ac:	4770      	bx	lr

000062ae <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    62ae:	b480      	push	{r7}
    62b0:	b085      	sub	sp, #20
    62b2:	af00      	add	r7, sp, #0
    62b4:	60f8      	str	r0, [r7, #12]
    62b6:	460b      	mov	r3, r1
    62b8:	607a      	str	r2, [r7, #4]
    62ba:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    62bc:	7afb      	ldrb	r3, [r7, #11]
    62be:	68fa      	ldr	r2, [r7, #12]
    62c0:	3306      	adds	r3, #6
    62c2:	009b      	lsls	r3, r3, #2
    62c4:	4413      	add	r3, r2
    62c6:	687a      	ldr	r2, [r7, #4]
    62c8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    62ca:	bf00      	nop
    62cc:	3714      	adds	r7, #20
    62ce:	46bd      	mov	sp, r7
    62d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    62d4:	4770      	bx	lr

000062d6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    62d6:	b480      	push	{r7}
    62d8:	b083      	sub	sp, #12
    62da:	af00      	add	r7, sp, #0
    62dc:	6078      	str	r0, [r7, #4]
    62de:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    62e0:	687b      	ldr	r3, [r7, #4]
    62e2:	683a      	ldr	r2, [r7, #0]
    62e4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    62e6:	bf00      	nop
    62e8:	370c      	adds	r7, #12
    62ea:	46bd      	mov	sp, r7
    62ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    62f0:	4770      	bx	lr

000062f2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    62f2:	b480      	push	{r7}
    62f4:	b083      	sub	sp, #12
    62f6:	af00      	add	r7, sp, #0
    62f8:	6078      	str	r0, [r7, #4]
    62fa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	683a      	ldr	r2, [r7, #0]
    6300:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6302:	bf00      	nop
    6304:	370c      	adds	r7, #12
    6306:	46bd      	mov	sp, r7
    6308:	f85d 7b04 	ldr.w	r7, [sp], #4
    630c:	4770      	bx	lr
	...

00006310 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    6310:	b580      	push	{r7, lr}
    6312:	b082      	sub	sp, #8
    6314:	af00      	add	r7, sp, #0
    6316:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    6318:	2101      	movs	r1, #1
    631a:	4854      	ldr	r0, [pc, #336]	; (646c <_ext_irq_init+0x15c>)
    631c:	4b54      	ldr	r3, [pc, #336]	; (6470 <_ext_irq_init+0x160>)
    631e:	4798      	blx	r3
    6320:	4603      	mov	r3, r0
    6322:	f083 0301 	eor.w	r3, r3, #1
    6326:	b2db      	uxtb	r3, r3
    6328:	2b00      	cmp	r3, #0
    632a:	d011      	beq.n	6350 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    632c:	2102      	movs	r1, #2
    632e:	484f      	ldr	r0, [pc, #316]	; (646c <_ext_irq_init+0x15c>)
    6330:	4b50      	ldr	r3, [pc, #320]	; (6474 <_ext_irq_init+0x164>)
    6332:	4798      	blx	r3
    6334:	4603      	mov	r3, r0
    6336:	2b00      	cmp	r3, #0
    6338:	d006      	beq.n	6348 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    633a:	484c      	ldr	r0, [pc, #304]	; (646c <_ext_irq_init+0x15c>)
    633c:	4b4e      	ldr	r3, [pc, #312]	; (6478 <_ext_irq_init+0x168>)
    633e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    6340:	2102      	movs	r1, #2
    6342:	484a      	ldr	r0, [pc, #296]	; (646c <_ext_irq_init+0x15c>)
    6344:	4b4d      	ldr	r3, [pc, #308]	; (647c <_ext_irq_init+0x16c>)
    6346:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    6348:	2101      	movs	r1, #1
    634a:	4848      	ldr	r0, [pc, #288]	; (646c <_ext_irq_init+0x15c>)
    634c:	4b4c      	ldr	r3, [pc, #304]	; (6480 <_ext_irq_init+0x170>)
    634e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    6350:	2101      	movs	r1, #1
    6352:	4846      	ldr	r0, [pc, #280]	; (646c <_ext_irq_init+0x15c>)
    6354:	4b49      	ldr	r3, [pc, #292]	; (647c <_ext_irq_init+0x16c>)
    6356:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    6358:	2100      	movs	r1, #0
    635a:	4844      	ldr	r0, [pc, #272]	; (646c <_ext_irq_init+0x15c>)
    635c:	4b49      	ldr	r3, [pc, #292]	; (6484 <_ext_irq_init+0x174>)
    635e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    6360:	2100      	movs	r1, #0
    6362:	4842      	ldr	r0, [pc, #264]	; (646c <_ext_irq_init+0x15c>)
    6364:	4b48      	ldr	r3, [pc, #288]	; (6488 <_ext_irq_init+0x178>)
    6366:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    6368:	2100      	movs	r1, #0
    636a:	4840      	ldr	r0, [pc, #256]	; (646c <_ext_irq_init+0x15c>)
    636c:	4b47      	ldr	r3, [pc, #284]	; (648c <_ext_irq_init+0x17c>)
    636e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6370:	f240 71bb 	movw	r1, #1979	; 0x7bb
    6374:	483d      	ldr	r0, [pc, #244]	; (646c <_ext_irq_init+0x15c>)
    6376:	4b46      	ldr	r3, [pc, #280]	; (6490 <_ext_irq_init+0x180>)
    6378:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    637a:	f240 713b 	movw	r1, #1851	; 0x73b
    637e:	483b      	ldr	r0, [pc, #236]	; (646c <_ext_irq_init+0x15c>)
    6380:	4b44      	ldr	r3, [pc, #272]	; (6494 <_ext_irq_init+0x184>)
    6382:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    6384:	2100      	movs	r1, #0
    6386:	4839      	ldr	r0, [pc, #228]	; (646c <_ext_irq_init+0x15c>)
    6388:	4b43      	ldr	r3, [pc, #268]	; (6498 <_ext_irq_init+0x188>)
    638a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    638c:	4a43      	ldr	r2, [pc, #268]	; (649c <_ext_irq_init+0x18c>)
    638e:	2100      	movs	r1, #0
    6390:	4836      	ldr	r0, [pc, #216]	; (646c <_ext_irq_init+0x15c>)
    6392:	4b43      	ldr	r3, [pc, #268]	; (64a0 <_ext_irq_init+0x190>)
    6394:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6396:	f240 1211 	movw	r2, #273	; 0x111
    639a:	2101      	movs	r1, #1
    639c:	4833      	ldr	r0, [pc, #204]	; (646c <_ext_irq_init+0x15c>)
    639e:	4b40      	ldr	r3, [pc, #256]	; (64a0 <_ext_irq_init+0x190>)
    63a0:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    63a2:	4832      	ldr	r0, [pc, #200]	; (646c <_ext_irq_init+0x15c>)
    63a4:	4b3f      	ldr	r3, [pc, #252]	; (64a4 <_ext_irq_init+0x194>)
    63a6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    63a8:	200c      	movs	r0, #12
    63aa:	4b3f      	ldr	r3, [pc, #252]	; (64a8 <_ext_irq_init+0x198>)
    63ac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    63ae:	200c      	movs	r0, #12
    63b0:	4b3e      	ldr	r3, [pc, #248]	; (64ac <_ext_irq_init+0x19c>)
    63b2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    63b4:	200c      	movs	r0, #12
    63b6:	4b3e      	ldr	r3, [pc, #248]	; (64b0 <_ext_irq_init+0x1a0>)
    63b8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    63ba:	200d      	movs	r0, #13
    63bc:	4b3a      	ldr	r3, [pc, #232]	; (64a8 <_ext_irq_init+0x198>)
    63be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    63c0:	200d      	movs	r0, #13
    63c2:	4b3a      	ldr	r3, [pc, #232]	; (64ac <_ext_irq_init+0x19c>)
    63c4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    63c6:	200d      	movs	r0, #13
    63c8:	4b39      	ldr	r3, [pc, #228]	; (64b0 <_ext_irq_init+0x1a0>)
    63ca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    63cc:	200f      	movs	r0, #15
    63ce:	4b36      	ldr	r3, [pc, #216]	; (64a8 <_ext_irq_init+0x198>)
    63d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    63d2:	200f      	movs	r0, #15
    63d4:	4b35      	ldr	r3, [pc, #212]	; (64ac <_ext_irq_init+0x19c>)
    63d6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    63d8:	200f      	movs	r0, #15
    63da:	4b35      	ldr	r3, [pc, #212]	; (64b0 <_ext_irq_init+0x1a0>)
    63dc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    63de:	2010      	movs	r0, #16
    63e0:	4b31      	ldr	r3, [pc, #196]	; (64a8 <_ext_irq_init+0x198>)
    63e2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    63e4:	2010      	movs	r0, #16
    63e6:	4b31      	ldr	r3, [pc, #196]	; (64ac <_ext_irq_init+0x19c>)
    63e8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    63ea:	2010      	movs	r0, #16
    63ec:	4b30      	ldr	r3, [pc, #192]	; (64b0 <_ext_irq_init+0x1a0>)
    63ee:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    63f0:	2011      	movs	r0, #17
    63f2:	4b2d      	ldr	r3, [pc, #180]	; (64a8 <_ext_irq_init+0x198>)
    63f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    63f6:	2011      	movs	r0, #17
    63f8:	4b2c      	ldr	r3, [pc, #176]	; (64ac <_ext_irq_init+0x19c>)
    63fa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    63fc:	2011      	movs	r0, #17
    63fe:	4b2c      	ldr	r3, [pc, #176]	; (64b0 <_ext_irq_init+0x1a0>)
    6400:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6402:	2012      	movs	r0, #18
    6404:	4b28      	ldr	r3, [pc, #160]	; (64a8 <_ext_irq_init+0x198>)
    6406:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6408:	2012      	movs	r0, #18
    640a:	4b28      	ldr	r3, [pc, #160]	; (64ac <_ext_irq_init+0x19c>)
    640c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    640e:	2012      	movs	r0, #18
    6410:	4b27      	ldr	r3, [pc, #156]	; (64b0 <_ext_irq_init+0x1a0>)
    6412:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    6414:	2013      	movs	r0, #19
    6416:	4b24      	ldr	r3, [pc, #144]	; (64a8 <_ext_irq_init+0x198>)
    6418:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    641a:	2013      	movs	r0, #19
    641c:	4b23      	ldr	r3, [pc, #140]	; (64ac <_ext_irq_init+0x19c>)
    641e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    6420:	2013      	movs	r0, #19
    6422:	4b23      	ldr	r3, [pc, #140]	; (64b0 <_ext_irq_init+0x1a0>)
    6424:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    6426:	2014      	movs	r0, #20
    6428:	4b1f      	ldr	r3, [pc, #124]	; (64a8 <_ext_irq_init+0x198>)
    642a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    642c:	2014      	movs	r0, #20
    642e:	4b1f      	ldr	r3, [pc, #124]	; (64ac <_ext_irq_init+0x19c>)
    6430:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    6432:	2014      	movs	r0, #20
    6434:	4b1e      	ldr	r3, [pc, #120]	; (64b0 <_ext_irq_init+0x1a0>)
    6436:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    6438:	2015      	movs	r0, #21
    643a:	4b1b      	ldr	r3, [pc, #108]	; (64a8 <_ext_irq_init+0x198>)
    643c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    643e:	2015      	movs	r0, #21
    6440:	4b1a      	ldr	r3, [pc, #104]	; (64ac <_ext_irq_init+0x19c>)
    6442:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    6444:	2015      	movs	r0, #21
    6446:	4b1a      	ldr	r3, [pc, #104]	; (64b0 <_ext_irq_init+0x1a0>)
    6448:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_10_IRQn);
    644a:	2016      	movs	r0, #22
    644c:	4b16      	ldr	r3, [pc, #88]	; (64a8 <_ext_irq_init+0x198>)
    644e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_10_IRQn);
    6450:	2016      	movs	r0, #22
    6452:	4b16      	ldr	r3, [pc, #88]	; (64ac <_ext_irq_init+0x19c>)
    6454:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_10_IRQn);
    6456:	2016      	movs	r0, #22
    6458:	4b15      	ldr	r3, [pc, #84]	; (64b0 <_ext_irq_init+0x1a0>)
    645a:	4798      	blx	r3

	callback = cb;
    645c:	4a15      	ldr	r2, [pc, #84]	; (64b4 <_ext_irq_init+0x1a4>)
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    6462:	2300      	movs	r3, #0
}
    6464:	4618      	mov	r0, r3
    6466:	3708      	adds	r7, #8
    6468:	46bd      	mov	sp, r7
    646a:	bd80      	pop	{r7, pc}
    646c:	40002800 	.word	0x40002800
    6470:	000060d1 	.word	0x000060d1
    6474:	00006201 	.word	0x00006201
    6478:	00006191 	.word	0x00006191
    647c:	000060ad 	.word	0x000060ad
    6480:	00006231 	.word	0x00006231
    6484:	000061bd 	.word	0x000061bd
    6488:	00006259 	.word	0x00006259
    648c:	00006277 	.word	0x00006277
    6490:	00006293 	.word	0x00006293
    6494:	000062d7 	.word	0x000062d7
    6498:	000062f3 	.word	0x000062f3
    649c:	90aa1013 	.word	0x90aa1013
    64a0:	000062af 	.word	0x000062af
    64a4:	00006165 	.word	0x00006165
    64a8:	0000602d 	.word	0x0000602d
    64ac:	00006071 	.word	0x00006071
    64b0:	00005ff1 	.word	0x00005ff1
    64b4:	20002348 	.word	0x20002348

000064b8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    64b8:	b580      	push	{r7, lr}
    64ba:	b084      	sub	sp, #16
    64bc:	af00      	add	r7, sp, #0
    64be:	6078      	str	r0, [r7, #4]
    64c0:	460b      	mov	r3, r1
    64c2:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    64c4:	23ff      	movs	r3, #255	; 0xff
    64c6:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    64c8:	2300      	movs	r3, #0
    64ca:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    64cc:	e010      	b.n	64f0 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    64ce:	7bbb      	ldrb	r3, [r7, #14]
    64d0:	4a1c      	ldr	r2, [pc, #112]	; (6544 <_ext_irq_enable+0x8c>)
    64d2:	00db      	lsls	r3, r3, #3
    64d4:	4413      	add	r3, r2
    64d6:	685a      	ldr	r2, [r3, #4]
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	429a      	cmp	r2, r3
    64dc:	d105      	bne.n	64ea <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    64de:	7bbb      	ldrb	r3, [r7, #14]
    64e0:	4a18      	ldr	r2, [pc, #96]	; (6544 <_ext_irq_enable+0x8c>)
    64e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    64e6:	73fb      	strb	r3, [r7, #15]
			break;
    64e8:	e005      	b.n	64f6 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    64ea:	7bbb      	ldrb	r3, [r7, #14]
    64ec:	3301      	adds	r3, #1
    64ee:	73bb      	strb	r3, [r7, #14]
    64f0:	7bbb      	ldrb	r3, [r7, #14]
    64f2:	2b09      	cmp	r3, #9
    64f4:	d9eb      	bls.n	64ce <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    64f6:	7bfb      	ldrb	r3, [r7, #15]
    64f8:	2bff      	cmp	r3, #255	; 0xff
    64fa:	d102      	bne.n	6502 <_ext_irq_enable+0x4a>
		return -1;
    64fc:	f04f 33ff 	mov.w	r3, #4294967295
    6500:	e01c      	b.n	653c <_ext_irq_enable+0x84>
	}

	if (enable) {
    6502:	78fb      	ldrb	r3, [r7, #3]
    6504:	2b00      	cmp	r3, #0
    6506:	d008      	beq.n	651a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    6508:	7bfb      	ldrb	r3, [r7, #15]
    650a:	2201      	movs	r2, #1
    650c:	fa02 f303 	lsl.w	r3, r2, r3
    6510:	4619      	mov	r1, r3
    6512:	480d      	ldr	r0, [pc, #52]	; (6548 <_ext_irq_enable+0x90>)
    6514:	4b0d      	ldr	r3, [pc, #52]	; (654c <_ext_irq_enable+0x94>)
    6516:	4798      	blx	r3
    6518:	e00f      	b.n	653a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    651a:	7bfb      	ldrb	r3, [r7, #15]
    651c:	2201      	movs	r2, #1
    651e:	fa02 f303 	lsl.w	r3, r2, r3
    6522:	4619      	mov	r1, r3
    6524:	4808      	ldr	r0, [pc, #32]	; (6548 <_ext_irq_enable+0x90>)
    6526:	4b0a      	ldr	r3, [pc, #40]	; (6550 <_ext_irq_enable+0x98>)
    6528:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    652a:	7bfb      	ldrb	r3, [r7, #15]
    652c:	2201      	movs	r2, #1
    652e:	fa02 f303 	lsl.w	r3, r2, r3
    6532:	4619      	mov	r1, r3
    6534:	4804      	ldr	r0, [pc, #16]	; (6548 <_ext_irq_enable+0x90>)
    6536:	4b07      	ldr	r3, [pc, #28]	; (6554 <_ext_irq_enable+0x9c>)
    6538:	4798      	blx	r3
	}

	return ERR_NONE;
    653a:	2300      	movs	r3, #0
}
    653c:	4618      	mov	r0, r3
    653e:	3710      	adds	r7, #16
    6540:	46bd      	mov	sp, r7
    6542:	bd80      	pop	{r7, pc}
    6544:	0001b78c 	.word	0x0001b78c
    6548:	40002800 	.word	0x40002800
    654c:	0000612d 	.word	0x0000612d
    6550:	00006149 	.word	0x00006149
    6554:	00006111 	.word	0x00006111

00006558 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    6558:	b580      	push	{r7, lr}
    655a:	b084      	sub	sp, #16
    655c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    655e:	4841      	ldr	r0, [pc, #260]	; (6664 <_ext_irq_handler+0x10c>)
    6560:	4b41      	ldr	r3, [pc, #260]	; (6668 <_ext_irq_handler+0x110>)
    6562:	4798      	blx	r3
    6564:	4603      	mov	r3, r0
    6566:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    6568:	f04f 33ff 	mov.w	r3, #4294967295
    656c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    656e:	683b      	ldr	r3, [r7, #0]
    6570:	4619      	mov	r1, r3
    6572:	483c      	ldr	r0, [pc, #240]	; (6664 <_ext_irq_handler+0x10c>)
    6574:	4b3d      	ldr	r3, [pc, #244]	; (666c <_ext_irq_handler+0x114>)
    6576:	4798      	blx	r3

	ASSERT(callback);
    6578:	4b3d      	ldr	r3, [pc, #244]	; (6670 <_ext_irq_handler+0x118>)
    657a:	681b      	ldr	r3, [r3, #0]
    657c:	2b00      	cmp	r3, #0
    657e:	bf14      	ite	ne
    6580:	2301      	movne	r3, #1
    6582:	2300      	moveq	r3, #0
    6584:	b2db      	uxtb	r3, r3
    6586:	f44f 7286 	mov.w	r2, #268	; 0x10c
    658a:	493a      	ldr	r1, [pc, #232]	; (6674 <_ext_irq_handler+0x11c>)
    658c:	4618      	mov	r0, r3
    658e:	4b3a      	ldr	r3, [pc, #232]	; (6678 <_ext_irq_handler+0x120>)
    6590:	4798      	blx	r3

	while (flags) {
    6592:	e060      	b.n	6656 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    6594:	683b      	ldr	r3, [r7, #0]
    6596:	4618      	mov	r0, r3
    6598:	4b38      	ldr	r3, [pc, #224]	; (667c <_ext_irq_handler+0x124>)
    659a:	4798      	blx	r3
    659c:	4603      	mov	r3, r0
    659e:	b2db      	uxtb	r3, r3
    65a0:	3b01      	subs	r3, #1
    65a2:	b2db      	uxtb	r3, r3
    65a4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    65a6:	e047      	b.n	6638 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    65a8:	2300      	movs	r3, #0
    65aa:	71fb      	strb	r3, [r7, #7]
    65ac:	230a      	movs	r3, #10
    65ae:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    65b0:	e024      	b.n	65fc <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    65b2:	79ba      	ldrb	r2, [r7, #6]
    65b4:	79fb      	ldrb	r3, [r7, #7]
    65b6:	4413      	add	r3, r2
    65b8:	105b      	asrs	r3, r3, #1
    65ba:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    65bc:	797b      	ldrb	r3, [r7, #5]
    65be:	4a30      	ldr	r2, [pc, #192]	; (6680 <_ext_irq_handler+0x128>)
    65c0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    65c4:	461a      	mov	r2, r3
    65c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65ca:	429a      	cmp	r2, r3
    65cc:	d106      	bne.n	65dc <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    65ce:	797b      	ldrb	r3, [r7, #5]
    65d0:	4a2b      	ldr	r2, [pc, #172]	; (6680 <_ext_irq_handler+0x128>)
    65d2:	00db      	lsls	r3, r3, #3
    65d4:	4413      	add	r3, r2
    65d6:	685b      	ldr	r3, [r3, #4]
    65d8:	60bb      	str	r3, [r7, #8]
					break;
    65da:	e013      	b.n	6604 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    65dc:	797b      	ldrb	r3, [r7, #5]
    65de:	4a28      	ldr	r2, [pc, #160]	; (6680 <_ext_irq_handler+0x128>)
    65e0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    65e4:	461a      	mov	r2, r3
    65e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65ea:	429a      	cmp	r2, r3
    65ec:	da03      	bge.n	65f6 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    65ee:	797b      	ldrb	r3, [r7, #5]
    65f0:	3301      	adds	r3, #1
    65f2:	71fb      	strb	r3, [r7, #7]
    65f4:	e002      	b.n	65fc <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    65f6:	797b      	ldrb	r3, [r7, #5]
    65f8:	3b01      	subs	r3, #1
    65fa:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    65fc:	79ba      	ldrb	r2, [r7, #6]
    65fe:	79fb      	ldrb	r3, [r7, #7]
    6600:	429a      	cmp	r2, r3
    6602:	d2d6      	bcs.n	65b2 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    6604:	68bb      	ldr	r3, [r7, #8]
    6606:	f1b3 3fff 	cmp.w	r3, #4294967295
    660a:	d003      	beq.n	6614 <_ext_irq_handler+0xbc>
				callback(pin);
    660c:	4b18      	ldr	r3, [pc, #96]	; (6670 <_ext_irq_handler+0x118>)
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	68b8      	ldr	r0, [r7, #8]
    6612:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    6614:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6618:	2201      	movs	r2, #1
    661a:	fa02 f303 	lsl.w	r3, r2, r3
    661e:	43da      	mvns	r2, r3
    6620:	683b      	ldr	r3, [r7, #0]
    6622:	4013      	ands	r3, r2
    6624:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    6626:	683b      	ldr	r3, [r7, #0]
    6628:	4618      	mov	r0, r3
    662a:	4b14      	ldr	r3, [pc, #80]	; (667c <_ext_irq_handler+0x124>)
    662c:	4798      	blx	r3
    662e:	4603      	mov	r3, r0
    6630:	b2db      	uxtb	r3, r3
    6632:	3b01      	subs	r3, #1
    6634:	b2db      	uxtb	r3, r3
    6636:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6638:	f997 300f 	ldrsb.w	r3, [r7, #15]
    663c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6640:	d1b2      	bne.n	65a8 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    6642:	4808      	ldr	r0, [pc, #32]	; (6664 <_ext_irq_handler+0x10c>)
    6644:	4b08      	ldr	r3, [pc, #32]	; (6668 <_ext_irq_handler+0x110>)
    6646:	4798      	blx	r3
    6648:	4603      	mov	r3, r0
    664a:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    664c:	683b      	ldr	r3, [r7, #0]
    664e:	4619      	mov	r1, r3
    6650:	4804      	ldr	r0, [pc, #16]	; (6664 <_ext_irq_handler+0x10c>)
    6652:	4b06      	ldr	r3, [pc, #24]	; (666c <_ext_irq_handler+0x114>)
    6654:	4798      	blx	r3
	while (flags) {
    6656:	683b      	ldr	r3, [r7, #0]
    6658:	2b00      	cmp	r3, #0
    665a:	d19b      	bne.n	6594 <_ext_irq_handler+0x3c>
	}
}
    665c:	bf00      	nop
    665e:	3710      	adds	r7, #16
    6660:	46bd      	mov	sp, r7
    6662:	bd80      	pop	{r7, pc}
    6664:	40002800 	.word	0x40002800
    6668:	000060f9 	.word	0x000060f9
    666c:	00006111 	.word	0x00006111
    6670:	20002348 	.word	0x20002348
    6674:	0001b7dc 	.word	0x0001b7dc
    6678:	00004d25 	.word	0x00004d25
    667c:	0001b075 	.word	0x0001b075
    6680:	0001b78c 	.word	0x0001b78c

00006684 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    6684:	b580      	push	{r7, lr}
    6686:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6688:	4b01      	ldr	r3, [pc, #4]	; (6690 <EIC_0_Handler+0xc>)
    668a:	4798      	blx	r3
} /**
    668c:	bf00      	nop
    668e:	bd80      	pop	{r7, pc}
    6690:	00006559 	.word	0x00006559

00006694 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    6694:	b580      	push	{r7, lr}
    6696:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6698:	4b01      	ldr	r3, [pc, #4]	; (66a0 <EIC_1_Handler+0xc>)
    669a:	4798      	blx	r3
} /**
    669c:	bf00      	nop
    669e:	bd80      	pop	{r7, pc}
    66a0:	00006559 	.word	0x00006559

000066a4 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    66a4:	b580      	push	{r7, lr}
    66a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66a8:	4b01      	ldr	r3, [pc, #4]	; (66b0 <EIC_3_Handler+0xc>)
    66aa:	4798      	blx	r3
} /**
    66ac:	bf00      	nop
    66ae:	bd80      	pop	{r7, pc}
    66b0:	00006559 	.word	0x00006559

000066b4 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    66b4:	b580      	push	{r7, lr}
    66b6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66b8:	4b01      	ldr	r3, [pc, #4]	; (66c0 <EIC_4_Handler+0xc>)
    66ba:	4798      	blx	r3
} /**
    66bc:	bf00      	nop
    66be:	bd80      	pop	{r7, pc}
    66c0:	00006559 	.word	0x00006559

000066c4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66c8:	4b01      	ldr	r3, [pc, #4]	; (66d0 <EIC_5_Handler+0xc>)
    66ca:	4798      	blx	r3
} /**
    66cc:	bf00      	nop
    66ce:	bd80      	pop	{r7, pc}
    66d0:	00006559 	.word	0x00006559

000066d4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    66d4:	b580      	push	{r7, lr}
    66d6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66d8:	4b01      	ldr	r3, [pc, #4]	; (66e0 <EIC_6_Handler+0xc>)
    66da:	4798      	blx	r3
} /**
    66dc:	bf00      	nop
    66de:	bd80      	pop	{r7, pc}
    66e0:	00006559 	.word	0x00006559

000066e4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    66e4:	b580      	push	{r7, lr}
    66e6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66e8:	4b01      	ldr	r3, [pc, #4]	; (66f0 <EIC_7_Handler+0xc>)
    66ea:	4798      	blx	r3
} /**
    66ec:	bf00      	nop
    66ee:	bd80      	pop	{r7, pc}
    66f0:	00006559 	.word	0x00006559

000066f4 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66f8:	4b01      	ldr	r3, [pc, #4]	; (6700 <EIC_8_Handler+0xc>)
    66fa:	4798      	blx	r3
} /**
    66fc:	bf00      	nop
    66fe:	bd80      	pop	{r7, pc}
    6700:	00006559 	.word	0x00006559

00006704 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    6704:	b580      	push	{r7, lr}
    6706:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6708:	4b01      	ldr	r3, [pc, #4]	; (6710 <EIC_9_Handler+0xc>)
    670a:	4798      	blx	r3
} /**
    670c:	bf00      	nop
    670e:	bd80      	pop	{r7, pc}
    6710:	00006559 	.word	0x00006559

00006714 <EIC_10_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_10_Handler(void)
{
    6714:	b580      	push	{r7, lr}
    6716:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6718:	4b01      	ldr	r3, [pc, #4]	; (6720 <EIC_10_Handler+0xc>)
    671a:	4798      	blx	r3
}
    671c:	bf00      	nop
    671e:	bd80      	pop	{r7, pc}
    6720:	00006559 	.word	0x00006559

00006724 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    6724:	b480      	push	{r7}
    6726:	b085      	sub	sp, #20
    6728:	af00      	add	r7, sp, #0
    672a:	60f8      	str	r0, [r7, #12]
    672c:	460b      	mov	r3, r1
    672e:	607a      	str	r2, [r7, #4]
    6730:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6732:	7afa      	ldrb	r2, [r7, #11]
    6734:	68fb      	ldr	r3, [r7, #12]
    6736:	3248      	adds	r2, #72	; 0x48
    6738:	6879      	ldr	r1, [r7, #4]
    673a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    673e:	bf00      	nop
    6740:	3714      	adds	r7, #20
    6742:	46bd      	mov	sp, r7
    6744:	f85d 7b04 	ldr.w	r7, [sp], #4
    6748:	4770      	bx	lr

0000674a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    674a:	b480      	push	{r7}
    674c:	b083      	sub	sp, #12
    674e:	af00      	add	r7, sp, #0
    6750:	6078      	str	r0, [r7, #4]
    6752:	460b      	mov	r3, r1
    6754:	70fb      	strb	r3, [r7, #3]
    6756:	4613      	mov	r3, r2
    6758:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    675a:	78fb      	ldrb	r3, [r7, #3]
    675c:	687a      	ldr	r2, [r7, #4]
    675e:	3304      	adds	r3, #4
    6760:	00db      	lsls	r3, r3, #3
    6762:	4413      	add	r3, r2
    6764:	78ba      	ldrb	r2, [r7, #2]
    6766:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6768:	78fb      	ldrb	r3, [r7, #3]
    676a:	78ba      	ldrb	r2, [r7, #2]
    676c:	43d2      	mvns	r2, r2
    676e:	b2d1      	uxtb	r1, r2
    6770:	687a      	ldr	r2, [r7, #4]
    6772:	3304      	adds	r3, #4
    6774:	00db      	lsls	r3, r3, #3
    6776:	4413      	add	r3, r2
    6778:	460a      	mov	r2, r1
    677a:	711a      	strb	r2, [r3, #4]
}
    677c:	bf00      	nop
    677e:	370c      	adds	r7, #12
    6780:	46bd      	mov	sp, r7
    6782:	f85d 7b04 	ldr.w	r7, [sp], #4
    6786:	4770      	bx	lr

00006788 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    6788:	b480      	push	{r7}
    678a:	b085      	sub	sp, #20
    678c:	af00      	add	r7, sp, #0
    678e:	60f8      	str	r0, [r7, #12]
    6790:	460b      	mov	r3, r1
    6792:	607a      	str	r2, [r7, #4]
    6794:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6796:	7afa      	ldrb	r2, [r7, #11]
    6798:	68fb      	ldr	r3, [r7, #12]
    679a:	3204      	adds	r2, #4
    679c:	6879      	ldr	r1, [r7, #4]
    679e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    67a2:	bf00      	nop
    67a4:	3714      	adds	r7, #20
    67a6:	46bd      	mov	sp, r7
    67a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ac:	4770      	bx	lr
	...

000067b0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    67b0:	b580      	push	{r7, lr}
    67b2:	b082      	sub	sp, #8
    67b4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    67b6:	2300      	movs	r3, #0
    67b8:	71fb      	strb	r3, [r7, #7]
    67ba:	e00b      	b.n	67d4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    67bc:	79fb      	ldrb	r3, [r7, #7]
    67be:	4a18      	ldr	r2, [pc, #96]	; (6820 <_event_system_init+0x70>)
    67c0:	5cd3      	ldrb	r3, [r2, r3]
    67c2:	461a      	mov	r2, r3
    67c4:	79fb      	ldrb	r3, [r7, #7]
    67c6:	4619      	mov	r1, r3
    67c8:	4816      	ldr	r0, [pc, #88]	; (6824 <_event_system_init+0x74>)
    67ca:	4b17      	ldr	r3, [pc, #92]	; (6828 <_event_system_init+0x78>)
    67cc:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    67ce:	79fb      	ldrb	r3, [r7, #7]
    67d0:	3301      	adds	r3, #1
    67d2:	71fb      	strb	r3, [r7, #7]
    67d4:	79fb      	ldrb	r3, [r7, #7]
    67d6:	2b42      	cmp	r3, #66	; 0x42
    67d8:	d9f0      	bls.n	67bc <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    67da:	2300      	movs	r3, #0
    67dc:	71fb      	strb	r3, [r7, #7]
    67de:	e016      	b.n	680e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    67e0:	79fb      	ldrb	r3, [r7, #7]
    67e2:	4a12      	ldr	r2, [pc, #72]	; (682c <_event_system_init+0x7c>)
    67e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    67e8:	461a      	mov	r2, r3
    67ea:	79fb      	ldrb	r3, [r7, #7]
    67ec:	4619      	mov	r1, r3
    67ee:	480d      	ldr	r0, [pc, #52]	; (6824 <_event_system_init+0x74>)
    67f0:	4b0f      	ldr	r3, [pc, #60]	; (6830 <_event_system_init+0x80>)
    67f2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    67f4:	79fb      	ldrb	r3, [r7, #7]
    67f6:	4a0f      	ldr	r2, [pc, #60]	; (6834 <_event_system_init+0x84>)
    67f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67fc:	b2da      	uxtb	r2, r3
    67fe:	79fb      	ldrb	r3, [r7, #7]
    6800:	4619      	mov	r1, r3
    6802:	4808      	ldr	r0, [pc, #32]	; (6824 <_event_system_init+0x74>)
    6804:	4b0c      	ldr	r3, [pc, #48]	; (6838 <_event_system_init+0x88>)
    6806:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6808:	79fb      	ldrb	r3, [r7, #7]
    680a:	3301      	adds	r3, #1
    680c:	71fb      	strb	r3, [r7, #7]
    680e:	79fb      	ldrb	r3, [r7, #7]
    6810:	2b1f      	cmp	r3, #31
    6812:	d9e5      	bls.n	67e0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    6814:	2300      	movs	r3, #0
}
    6816:	4618      	mov	r0, r3
    6818:	3708      	adds	r7, #8
    681a:	46bd      	mov	sp, r7
    681c:	bd80      	pop	{r7, pc}
    681e:	bf00      	nop
    6820:	0001b7f4 	.word	0x0001b7f4
    6824:	4100e000 	.word	0x4100e000
    6828:	00006725 	.word	0x00006725
    682c:	0001b838 	.word	0x0001b838
    6830:	00006789 	.word	0x00006789
    6834:	0001b878 	.word	0x0001b878
    6838:	0000674b 	.word	0x0000674b

0000683c <hri_gclk_wait_for_sync>:
{
    683c:	b480      	push	{r7}
    683e:	b083      	sub	sp, #12
    6840:	af00      	add	r7, sp, #0
    6842:	6078      	str	r0, [r7, #4]
    6844:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6846:	bf00      	nop
    6848:	687b      	ldr	r3, [r7, #4]
    684a:	685a      	ldr	r2, [r3, #4]
    684c:	683b      	ldr	r3, [r7, #0]
    684e:	4013      	ands	r3, r2
    6850:	2b00      	cmp	r3, #0
    6852:	d1f9      	bne.n	6848 <hri_gclk_wait_for_sync+0xc>
}
    6854:	bf00      	nop
    6856:	370c      	adds	r7, #12
    6858:	46bd      	mov	sp, r7
    685a:	f85d 7b04 	ldr.w	r7, [sp], #4
    685e:	4770      	bx	lr

00006860 <hri_gclk_write_GENCTRL_reg>:
{
    6860:	b580      	push	{r7, lr}
    6862:	b084      	sub	sp, #16
    6864:	af00      	add	r7, sp, #0
    6866:	60f8      	str	r0, [r7, #12]
    6868:	460b      	mov	r3, r1
    686a:	607a      	str	r2, [r7, #4]
    686c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    686e:	7afa      	ldrb	r2, [r7, #11]
    6870:	68fb      	ldr	r3, [r7, #12]
    6872:	3208      	adds	r2, #8
    6874:	6879      	ldr	r1, [r7, #4]
    6876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    687a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    687e:	68f8      	ldr	r0, [r7, #12]
    6880:	4b02      	ldr	r3, [pc, #8]	; (688c <hri_gclk_write_GENCTRL_reg+0x2c>)
    6882:	4798      	blx	r3
}
    6884:	bf00      	nop
    6886:	3710      	adds	r7, #16
    6888:	46bd      	mov	sp, r7
    688a:	bd80      	pop	{r7, pc}
    688c:	0000683d 	.word	0x0000683d

00006890 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6890:	b580      	push	{r7, lr}
    6892:	b082      	sub	sp, #8
    6894:	af00      	add	r7, sp, #0
    6896:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6898:	687b      	ldr	r3, [r7, #4]
    689a:	f003 0301 	and.w	r3, r3, #1
    689e:	2b00      	cmp	r3, #0
    68a0:	d004      	beq.n	68ac <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    68a2:	4a3b      	ldr	r2, [pc, #236]	; (6990 <_gclk_init_generators_by_fref+0x100>)
    68a4:	2100      	movs	r1, #0
    68a6:	483b      	ldr	r0, [pc, #236]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    68a8:	4b3b      	ldr	r3, [pc, #236]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    68aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    68ac:	687b      	ldr	r3, [r7, #4]
    68ae:	f003 0302 	and.w	r3, r3, #2
    68b2:	2b00      	cmp	r3, #0
    68b4:	d004      	beq.n	68c0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    68b6:	4a39      	ldr	r2, [pc, #228]	; (699c <_gclk_init_generators_by_fref+0x10c>)
    68b8:	2101      	movs	r1, #1
    68ba:	4836      	ldr	r0, [pc, #216]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    68bc:	4b36      	ldr	r3, [pc, #216]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    68be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	f003 0304 	and.w	r3, r3, #4
    68c6:	2b00      	cmp	r3, #0
    68c8:	d004      	beq.n	68d4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    68ca:	4a35      	ldr	r2, [pc, #212]	; (69a0 <_gclk_init_generators_by_fref+0x110>)
    68cc:	2102      	movs	r1, #2
    68ce:	4831      	ldr	r0, [pc, #196]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    68d0:	4b31      	ldr	r3, [pc, #196]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    68d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	f003 0308 	and.w	r3, r3, #8
    68da:	2b00      	cmp	r3, #0
    68dc:	d004      	beq.n	68e8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    68de:	4a31      	ldr	r2, [pc, #196]	; (69a4 <_gclk_init_generators_by_fref+0x114>)
    68e0:	2103      	movs	r1, #3
    68e2:	482c      	ldr	r0, [pc, #176]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    68e4:	4b2c      	ldr	r3, [pc, #176]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    68e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	f003 0310 	and.w	r3, r3, #16
    68ee:	2b00      	cmp	r3, #0
    68f0:	d004      	beq.n	68fc <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    68f2:	4a2d      	ldr	r2, [pc, #180]	; (69a8 <_gclk_init_generators_by_fref+0x118>)
    68f4:	2104      	movs	r1, #4
    68f6:	4827      	ldr	r0, [pc, #156]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    68f8:	4b27      	ldr	r3, [pc, #156]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    68fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    68fc:	687b      	ldr	r3, [r7, #4]
    68fe:	f003 0320 	and.w	r3, r3, #32
    6902:	2b00      	cmp	r3, #0
    6904:	d004      	beq.n	6910 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    6906:	4a29      	ldr	r2, [pc, #164]	; (69ac <_gclk_init_generators_by_fref+0x11c>)
    6908:	2105      	movs	r1, #5
    690a:	4822      	ldr	r0, [pc, #136]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    690c:	4b22      	ldr	r3, [pc, #136]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    690e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6916:	2b00      	cmp	r3, #0
    6918:	d004      	beq.n	6924 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    691a:	4a25      	ldr	r2, [pc, #148]	; (69b0 <_gclk_init_generators_by_fref+0x120>)
    691c:	2106      	movs	r1, #6
    691e:	481d      	ldr	r0, [pc, #116]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    6920:	4b1d      	ldr	r3, [pc, #116]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    6922:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    6924:	687b      	ldr	r3, [r7, #4]
    6926:	f003 0380 	and.w	r3, r3, #128	; 0x80
    692a:	2b00      	cmp	r3, #0
    692c:	d004      	beq.n	6938 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    692e:	4a21      	ldr	r2, [pc, #132]	; (69b4 <_gclk_init_generators_by_fref+0x124>)
    6930:	2107      	movs	r1, #7
    6932:	4818      	ldr	r0, [pc, #96]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    6934:	4b18      	ldr	r3, [pc, #96]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    6936:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    693e:	2b00      	cmp	r3, #0
    6940:	d004      	beq.n	694c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    6942:	4a1d      	ldr	r2, [pc, #116]	; (69b8 <_gclk_init_generators_by_fref+0x128>)
    6944:	2108      	movs	r1, #8
    6946:	4813      	ldr	r0, [pc, #76]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    6948:	4b13      	ldr	r3, [pc, #76]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    694a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    6952:	2b00      	cmp	r3, #0
    6954:	d004      	beq.n	6960 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    6956:	4a19      	ldr	r2, [pc, #100]	; (69bc <_gclk_init_generators_by_fref+0x12c>)
    6958:	2109      	movs	r1, #9
    695a:	480e      	ldr	r0, [pc, #56]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    695c:	4b0e      	ldr	r3, [pc, #56]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    695e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6966:	2b00      	cmp	r3, #0
    6968:	d004      	beq.n	6974 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    696a:	4a15      	ldr	r2, [pc, #84]	; (69c0 <_gclk_init_generators_by_fref+0x130>)
    696c:	210a      	movs	r1, #10
    696e:	4809      	ldr	r0, [pc, #36]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    6970:	4b09      	ldr	r3, [pc, #36]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    6972:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    697a:	2b00      	cmp	r3, #0
    697c:	d004      	beq.n	6988 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    697e:	4a11      	ldr	r2, [pc, #68]	; (69c4 <_gclk_init_generators_by_fref+0x134>)
    6980:	210b      	movs	r1, #11
    6982:	4804      	ldr	r0, [pc, #16]	; (6994 <_gclk_init_generators_by_fref+0x104>)
    6984:	4b04      	ldr	r3, [pc, #16]	; (6998 <_gclk_init_generators_by_fref+0x108>)
    6986:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6988:	bf00      	nop
    698a:	3708      	adds	r7, #8
    698c:	46bd      	mov	sp, r7
    698e:	bd80      	pop	{r7, pc}
    6990:	00010107 	.word	0x00010107
    6994:	40001c00 	.word	0x40001c00
    6998:	00006861 	.word	0x00006861
    699c:	00010907 	.word	0x00010907
    69a0:	00010906 	.word	0x00010906
    69a4:	00020908 	.word	0x00020908
    69a8:	00010901 	.word	0x00010901
    69ac:	00062901 	.word	0x00062901
    69b0:	000c2901 	.word	0x000c2901
    69b4:	00082908 	.word	0x00082908
    69b8:	00032901 	.word	0x00032901
    69bc:	00011908 	.word	0x00011908
    69c0:	00010905 	.word	0x00010905
    69c4:	00041905 	.word	0x00041905

000069c8 <hri_mclk_write_CPUDIV_reg>:
{
    69c8:	b480      	push	{r7}
    69ca:	b083      	sub	sp, #12
    69cc:	af00      	add	r7, sp, #0
    69ce:	6078      	str	r0, [r7, #4]
    69d0:	460b      	mov	r3, r1
    69d2:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    69d4:	687b      	ldr	r3, [r7, #4]
    69d6:	78fa      	ldrb	r2, [r7, #3]
    69d8:	715a      	strb	r2, [r3, #5]
}
    69da:	bf00      	nop
    69dc:	370c      	adds	r7, #12
    69de:	46bd      	mov	sp, r7
    69e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    69e4:	4770      	bx	lr
	...

000069e8 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    69e8:	b580      	push	{r7, lr}
    69ea:	b082      	sub	sp, #8
    69ec:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    69ee:	4b05      	ldr	r3, [pc, #20]	; (6a04 <_mclk_init+0x1c>)
    69f0:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    69f2:	2101      	movs	r1, #1
    69f4:	6878      	ldr	r0, [r7, #4]
    69f6:	4b04      	ldr	r3, [pc, #16]	; (6a08 <_mclk_init+0x20>)
    69f8:	4798      	blx	r3
}
    69fa:	bf00      	nop
    69fc:	3708      	adds	r7, #8
    69fe:	46bd      	mov	sp, r7
    6a00:	bd80      	pop	{r7, pc}
    6a02:	bf00      	nop
    6a04:	40000800 	.word	0x40000800
    6a08:	000069c9 	.word	0x000069c9

00006a0c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    6a0c:	b480      	push	{r7}
    6a0e:	b083      	sub	sp, #12
    6a10:	af00      	add	r7, sp, #0
    6a12:	6078      	str	r0, [r7, #4]
    6a14:	460b      	mov	r3, r1
    6a16:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	78fa      	ldrb	r2, [r7, #3]
    6a1c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a1e:	bf00      	nop
    6a20:	370c      	adds	r7, #12
    6a22:	46bd      	mov	sp, r7
    6a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a28:	4770      	bx	lr

00006a2a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    6a2a:	b480      	push	{r7}
    6a2c:	b083      	sub	sp, #12
    6a2e:	af00      	add	r7, sp, #0
    6a30:	6078      	str	r0, [r7, #4]
    6a32:	460b      	mov	r3, r1
    6a34:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	887a      	ldrh	r2, [r7, #2]
    6a3a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a3c:	bf00      	nop
    6a3e:	370c      	adds	r7, #12
    6a40:	46bd      	mov	sp, r7
    6a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a46:	4770      	bx	lr

00006a48 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6a48:	b480      	push	{r7}
    6a4a:	b083      	sub	sp, #12
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
    6a50:	460b      	mov	r3, r1
    6a52:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	78fa      	ldrb	r2, [r7, #3]
    6a58:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a5a:	bf00      	nop
    6a5c:	370c      	adds	r7, #12
    6a5e:	46bd      	mov	sp, r7
    6a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a64:	4770      	bx	lr

00006a66 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6a66:	b480      	push	{r7}
    6a68:	b083      	sub	sp, #12
    6a6a:	af00      	add	r7, sp, #0
    6a6c:	6078      	str	r0, [r7, #4]
    6a6e:	460b      	mov	r3, r1
    6a70:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    6a72:	687b      	ldr	r3, [r7, #4]
    6a74:	78fa      	ldrb	r2, [r7, #3]
    6a76:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a78:	bf00      	nop
    6a7a:	370c      	adds	r7, #12
    6a7c:	46bd      	mov	sp, r7
    6a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a82:	4770      	bx	lr

00006a84 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6a84:	b480      	push	{r7}
    6a86:	b085      	sub	sp, #20
    6a88:	af00      	add	r7, sp, #0
    6a8a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6a8c:	687b      	ldr	r3, [r7, #4]
    6a8e:	69db      	ldr	r3, [r3, #28]
    6a90:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    6a92:	68fb      	ldr	r3, [r7, #12]
    6a94:	0a1b      	lsrs	r3, r3, #8
    6a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a9a:	60fb      	str	r3, [r7, #12]
	return tmp;
    6a9c:	68fb      	ldr	r3, [r7, #12]
}
    6a9e:	4618      	mov	r0, r3
    6aa0:	3714      	adds	r7, #20
    6aa2:	46bd      	mov	sp, r7
    6aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aa8:	4770      	bx	lr

00006aaa <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6aaa:	b480      	push	{r7}
    6aac:	b083      	sub	sp, #12
    6aae:	af00      	add	r7, sp, #0
    6ab0:	6078      	str	r0, [r7, #4]
    6ab2:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	683a      	ldr	r2, [r7, #0]
    6ab8:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6aba:	bf00      	nop
    6abc:	370c      	adds	r7, #12
    6abe:	46bd      	mov	sp, r7
    6ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ac4:	4770      	bx	lr
	...

00006ac8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6ac8:	b580      	push	{r7, lr}
    6aca:	b082      	sub	sp, #8
    6acc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6ace:	4b13      	ldr	r3, [pc, #76]	; (6b1c <_osc32kctrl_init_sources+0x54>)
    6ad0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6ad2:	2300      	movs	r3, #0
    6ad4:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6ad6:	f242 018e 	movw	r1, #8334	; 0x208e
    6ada:	6878      	ldr	r0, [r7, #4]
    6adc:	4b10      	ldr	r3, [pc, #64]	; (6b20 <_osc32kctrl_init_sources+0x58>)
    6ade:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6ae0:	2100      	movs	r1, #0
    6ae2:	6878      	ldr	r0, [r7, #4]
    6ae4:	4b0f      	ldr	r3, [pc, #60]	; (6b24 <_osc32kctrl_init_sources+0x5c>)
    6ae6:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6ae8:	2100      	movs	r1, #0
    6aea:	6878      	ldr	r0, [r7, #4]
    6aec:	4b0e      	ldr	r3, [pc, #56]	; (6b28 <_osc32kctrl_init_sources+0x60>)
    6aee:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6af0:	6878      	ldr	r0, [r7, #4]
    6af2:	4b0e      	ldr	r3, [pc, #56]	; (6b2c <_osc32kctrl_init_sources+0x64>)
    6af4:	4798      	blx	r3
    6af6:	4603      	mov	r3, r0
    6af8:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6afa:	887b      	ldrh	r3, [r7, #2]
    6afc:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6afe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6b02:	4619      	mov	r1, r3
    6b04:	6878      	ldr	r0, [r7, #4]
    6b06:	4b0a      	ldr	r3, [pc, #40]	; (6b30 <_osc32kctrl_init_sources+0x68>)
    6b08:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    6b0a:	2100      	movs	r1, #0
    6b0c:	6878      	ldr	r0, [r7, #4]
    6b0e:	4b09      	ldr	r3, [pc, #36]	; (6b34 <_osc32kctrl_init_sources+0x6c>)
    6b10:	4798      	blx	r3
	(void)calib;
}
    6b12:	bf00      	nop
    6b14:	3708      	adds	r7, #8
    6b16:	46bd      	mov	sp, r7
    6b18:	bd80      	pop	{r7, pc}
    6b1a:	bf00      	nop
    6b1c:	40001400 	.word	0x40001400
    6b20:	00006a2b 	.word	0x00006a2b
    6b24:	00006a49 	.word	0x00006a49
    6b28:	00006a67 	.word	0x00006a67
    6b2c:	00006a85 	.word	0x00006a85
    6b30:	00006aab 	.word	0x00006aab
    6b34:	00006a0d 	.word	0x00006a0d

00006b38 <hri_gclk_wait_for_sync>:
{
    6b38:	b480      	push	{r7}
    6b3a:	b083      	sub	sp, #12
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
    6b40:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6b42:	bf00      	nop
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	685a      	ldr	r2, [r3, #4]
    6b48:	683b      	ldr	r3, [r7, #0]
    6b4a:	4013      	ands	r3, r2
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d1f9      	bne.n	6b44 <hri_gclk_wait_for_sync+0xc>
}
    6b50:	bf00      	nop
    6b52:	370c      	adds	r7, #12
    6b54:	46bd      	mov	sp, r7
    6b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b5a:	4770      	bx	lr

00006b5c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6b5c:	b480      	push	{r7}
    6b5e:	b083      	sub	sp, #12
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	685b      	ldr	r3, [r3, #4]
    6b68:	089b      	lsrs	r3, r3, #2
    6b6a:	f003 0301 	and.w	r3, r3, #1
    6b6e:	2b00      	cmp	r3, #0
    6b70:	bf14      	ite	ne
    6b72:	2301      	movne	r3, #1
    6b74:	2300      	moveq	r3, #0
    6b76:	b2db      	uxtb	r3, r3
}
    6b78:	4618      	mov	r0, r3
    6b7a:	370c      	adds	r7, #12
    6b7c:	46bd      	mov	sp, r7
    6b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b82:	4770      	bx	lr

00006b84 <hri_gclk_read_SYNCBUSY_reg>:
{
    6b84:	b480      	push	{r7}
    6b86:	b083      	sub	sp, #12
    6b88:	af00      	add	r7, sp, #0
    6b8a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6b8c:	687b      	ldr	r3, [r7, #4]
    6b8e:	685b      	ldr	r3, [r3, #4]
}
    6b90:	4618      	mov	r0, r3
    6b92:	370c      	adds	r7, #12
    6b94:	46bd      	mov	sp, r7
    6b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b9a:	4770      	bx	lr

00006b9c <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6b9c:	b580      	push	{r7, lr}
    6b9e:	b086      	sub	sp, #24
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	60f8      	str	r0, [r7, #12]
    6ba4:	460b      	mov	r3, r1
    6ba6:	607a      	str	r2, [r7, #4]
    6ba8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6baa:	7afa      	ldrb	r2, [r7, #11]
    6bac:	68fb      	ldr	r3, [r7, #12]
    6bae:	3208      	adds	r2, #8
    6bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bb4:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6bb6:	697b      	ldr	r3, [r7, #20]
    6bb8:	f023 030f 	bic.w	r3, r3, #15
    6bbc:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	f003 030f 	and.w	r3, r3, #15
    6bc4:	697a      	ldr	r2, [r7, #20]
    6bc6:	4313      	orrs	r3, r2
    6bc8:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6bca:	7afa      	ldrb	r2, [r7, #11]
    6bcc:	68fb      	ldr	r3, [r7, #12]
    6bce:	3208      	adds	r2, #8
    6bd0:	6979      	ldr	r1, [r7, #20]
    6bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6bd6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6bda:	68f8      	ldr	r0, [r7, #12]
    6bdc:	4b02      	ldr	r3, [pc, #8]	; (6be8 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6bde:	4798      	blx	r3
}
    6be0:	bf00      	nop
    6be2:	3718      	adds	r7, #24
    6be4:	46bd      	mov	sp, r7
    6be6:	bd80      	pop	{r7, pc}
    6be8:	00006b39 	.word	0x00006b39

00006bec <hri_gclk_write_PCHCTRL_reg>:
{
    6bec:	b480      	push	{r7}
    6bee:	b085      	sub	sp, #20
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	60f8      	str	r0, [r7, #12]
    6bf4:	460b      	mov	r3, r1
    6bf6:	607a      	str	r2, [r7, #4]
    6bf8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6bfa:	7afa      	ldrb	r2, [r7, #11]
    6bfc:	68fb      	ldr	r3, [r7, #12]
    6bfe:	3220      	adds	r2, #32
    6c00:	6879      	ldr	r1, [r7, #4]
    6c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6c06:	bf00      	nop
    6c08:	3714      	adds	r7, #20
    6c0a:	46bd      	mov	sp, r7
    6c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c10:	4770      	bx	lr

00006c12 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6c12:	b480      	push	{r7}
    6c14:	b085      	sub	sp, #20
    6c16:	af00      	add	r7, sp, #0
    6c18:	60f8      	str	r0, [r7, #12]
    6c1a:	460b      	mov	r3, r1
    6c1c:	607a      	str	r2, [r7, #4]
    6c1e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6c20:	bf00      	nop
    6c22:	7afa      	ldrb	r2, [r7, #11]
    6c24:	68f9      	ldr	r1, [r7, #12]
    6c26:	4613      	mov	r3, r2
    6c28:	009b      	lsls	r3, r3, #2
    6c2a:	4413      	add	r3, r2
    6c2c:	009b      	lsls	r3, r3, #2
    6c2e:	440b      	add	r3, r1
    6c30:	333c      	adds	r3, #60	; 0x3c
    6c32:	681a      	ldr	r2, [r3, #0]
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	4013      	ands	r3, r2
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d1f2      	bne.n	6c22 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6c3c:	bf00      	nop
    6c3e:	3714      	adds	r7, #20
    6c40:	46bd      	mov	sp, r7
    6c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c46:	4770      	bx	lr

00006c48 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6c48:	b480      	push	{r7}
    6c4a:	b083      	sub	sp, #12
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	6078      	str	r0, [r7, #4]
    6c50:	460b      	mov	r3, r1
    6c52:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6c54:	78fa      	ldrb	r2, [r7, #3]
    6c56:	6879      	ldr	r1, [r7, #4]
    6c58:	4613      	mov	r3, r2
    6c5a:	009b      	lsls	r3, r3, #2
    6c5c:	4413      	add	r3, r2
    6c5e:	009b      	lsls	r3, r3, #2
    6c60:	440b      	add	r3, r1
    6c62:	3340      	adds	r3, #64	; 0x40
    6c64:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6c66:	f003 0301 	and.w	r3, r3, #1
    6c6a:	2b00      	cmp	r3, #0
    6c6c:	bf14      	ite	ne
    6c6e:	2301      	movne	r3, #1
    6c70:	2300      	moveq	r3, #0
    6c72:	b2db      	uxtb	r3, r3
}
    6c74:	4618      	mov	r0, r3
    6c76:	370c      	adds	r7, #12
    6c78:	46bd      	mov	sp, r7
    6c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c7e:	4770      	bx	lr

00006c80 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6c80:	b480      	push	{r7}
    6c82:	b083      	sub	sp, #12
    6c84:	af00      	add	r7, sp, #0
    6c86:	6078      	str	r0, [r7, #4]
    6c88:	460b      	mov	r3, r1
    6c8a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6c8c:	78fa      	ldrb	r2, [r7, #3]
    6c8e:	6879      	ldr	r1, [r7, #4]
    6c90:	4613      	mov	r3, r2
    6c92:	009b      	lsls	r3, r3, #2
    6c94:	4413      	add	r3, r2
    6c96:	009b      	lsls	r3, r3, #2
    6c98:	440b      	add	r3, r1
    6c9a:	3340      	adds	r3, #64	; 0x40
    6c9c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6c9e:	085b      	lsrs	r3, r3, #1
    6ca0:	f003 0301 	and.w	r3, r3, #1
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	bf14      	ite	ne
    6ca8:	2301      	movne	r3, #1
    6caa:	2300      	moveq	r3, #0
    6cac:	b2db      	uxtb	r3, r3
}
    6cae:	4618      	mov	r0, r3
    6cb0:	370c      	adds	r7, #12
    6cb2:	46bd      	mov	sp, r7
    6cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cb8:	4770      	bx	lr
	...

00006cbc <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b082      	sub	sp, #8
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]
    6cc4:	460b      	mov	r3, r1
    6cc6:	70fb      	strb	r3, [r7, #3]
    6cc8:	4613      	mov	r3, r2
    6cca:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6ccc:	78fa      	ldrb	r2, [r7, #3]
    6cce:	6879      	ldr	r1, [r7, #4]
    6cd0:	4613      	mov	r3, r2
    6cd2:	009b      	lsls	r3, r3, #2
    6cd4:	4413      	add	r3, r2
    6cd6:	009b      	lsls	r3, r3, #2
    6cd8:	440b      	add	r3, r1
    6cda:	3330      	adds	r3, #48	; 0x30
    6cdc:	78ba      	ldrb	r2, [r7, #2]
    6cde:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6ce0:	78fb      	ldrb	r3, [r7, #3]
    6ce2:	2202      	movs	r2, #2
    6ce4:	4619      	mov	r1, r3
    6ce6:	6878      	ldr	r0, [r7, #4]
    6ce8:	4b02      	ldr	r3, [pc, #8]	; (6cf4 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6cea:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6cec:	bf00      	nop
    6cee:	3708      	adds	r7, #8
    6cf0:	46bd      	mov	sp, r7
    6cf2:	bd80      	pop	{r7, pc}
    6cf4:	00006c13 	.word	0x00006c13

00006cf8 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b084      	sub	sp, #16
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	60f8      	str	r0, [r7, #12]
    6d00:	460b      	mov	r3, r1
    6d02:	607a      	str	r2, [r7, #4]
    6d04:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6d06:	7afa      	ldrb	r2, [r7, #11]
    6d08:	68f9      	ldr	r1, [r7, #12]
    6d0a:	4613      	mov	r3, r2
    6d0c:	009b      	lsls	r3, r3, #2
    6d0e:	4413      	add	r3, r2
    6d10:	009b      	lsls	r3, r3, #2
    6d12:	440b      	add	r3, r1
    6d14:	3334      	adds	r3, #52	; 0x34
    6d16:	687a      	ldr	r2, [r7, #4]
    6d18:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6d1a:	7afb      	ldrb	r3, [r7, #11]
    6d1c:	2206      	movs	r2, #6
    6d1e:	4619      	mov	r1, r3
    6d20:	68f8      	ldr	r0, [r7, #12]
    6d22:	4b03      	ldr	r3, [pc, #12]	; (6d30 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6d24:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d26:	bf00      	nop
    6d28:	3710      	adds	r7, #16
    6d2a:	46bd      	mov	sp, r7
    6d2c:	bd80      	pop	{r7, pc}
    6d2e:	bf00      	nop
    6d30:	00006c13 	.word	0x00006c13

00006d34 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6d34:	b480      	push	{r7}
    6d36:	b085      	sub	sp, #20
    6d38:	af00      	add	r7, sp, #0
    6d3a:	60f8      	str	r0, [r7, #12]
    6d3c:	460b      	mov	r3, r1
    6d3e:	607a      	str	r2, [r7, #4]
    6d40:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6d42:	7afa      	ldrb	r2, [r7, #11]
    6d44:	68f9      	ldr	r1, [r7, #12]
    6d46:	4613      	mov	r3, r2
    6d48:	009b      	lsls	r3, r3, #2
    6d4a:	4413      	add	r3, r2
    6d4c:	009b      	lsls	r3, r3, #2
    6d4e:	440b      	add	r3, r1
    6d50:	3338      	adds	r3, #56	; 0x38
    6d52:	687a      	ldr	r2, [r7, #4]
    6d54:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d56:	bf00      	nop
    6d58:	3714      	adds	r7, #20
    6d5a:	46bd      	mov	sp, r7
    6d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d60:	4770      	bx	lr

00006d62 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6d62:	b480      	push	{r7}
    6d64:	b083      	sub	sp, #12
    6d66:	af00      	add	r7, sp, #0
    6d68:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	691b      	ldr	r3, [r3, #16]
    6d6e:	085b      	lsrs	r3, r3, #1
    6d70:	f003 0301 	and.w	r3, r3, #1
    6d74:	2b00      	cmp	r3, #0
    6d76:	bf14      	ite	ne
    6d78:	2301      	movne	r3, #1
    6d7a:	2300      	moveq	r3, #0
    6d7c:	b2db      	uxtb	r3, r3
}
    6d7e:	4618      	mov	r0, r3
    6d80:	370c      	adds	r7, #12
    6d82:	46bd      	mov	sp, r7
    6d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d88:	4770      	bx	lr

00006d8a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6d8a:	b480      	push	{r7}
    6d8c:	b083      	sub	sp, #12
    6d8e:	af00      	add	r7, sp, #0
    6d90:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	691b      	ldr	r3, [r3, #16]
    6d96:	0a1b      	lsrs	r3, r3, #8
    6d98:	f003 0301 	and.w	r3, r3, #1
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	bf14      	ite	ne
    6da0:	2301      	movne	r3, #1
    6da2:	2300      	moveq	r3, #0
    6da4:	b2db      	uxtb	r3, r3
}
    6da6:	4618      	mov	r0, r3
    6da8:	370c      	adds	r7, #12
    6daa:	46bd      	mov	sp, r7
    6dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    6db0:	4770      	bx	lr

00006db2 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6db2:	b480      	push	{r7}
    6db4:	b085      	sub	sp, #20
    6db6:	af00      	add	r7, sp, #0
    6db8:	6078      	str	r0, [r7, #4]
    6dba:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	691b      	ldr	r3, [r3, #16]
    6dc0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6dc2:	68fa      	ldr	r2, [r7, #12]
    6dc4:	683b      	ldr	r3, [r7, #0]
    6dc6:	4013      	ands	r3, r2
    6dc8:	60fb      	str	r3, [r7, #12]
	return tmp;
    6dca:	68fb      	ldr	r3, [r7, #12]
}
    6dcc:	4618      	mov	r0, r3
    6dce:	3714      	adds	r7, #20
    6dd0:	46bd      	mov	sp, r7
    6dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dd6:	4770      	bx	lr

00006dd8 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6dd8:	b480      	push	{r7}
    6dda:	b085      	sub	sp, #20
    6ddc:	af00      	add	r7, sp, #0
    6dde:	60f8      	str	r0, [r7, #12]
    6de0:	460b      	mov	r3, r1
    6de2:	607a      	str	r2, [r7, #4]
    6de4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6de6:	7afb      	ldrb	r3, [r7, #11]
    6de8:	68fa      	ldr	r2, [r7, #12]
    6dea:	3304      	adds	r3, #4
    6dec:	009b      	lsls	r3, r3, #2
    6dee:	4413      	add	r3, r2
    6df0:	687a      	ldr	r2, [r7, #4]
    6df2:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6df4:	bf00      	nop
    6df6:	3714      	adds	r7, #20
    6df8:	46bd      	mov	sp, r7
    6dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dfe:	4770      	bx	lr

00006e00 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6e00:	b480      	push	{r7}
    6e02:	b083      	sub	sp, #12
    6e04:	af00      	add	r7, sp, #0
    6e06:	6078      	str	r0, [r7, #4]
    6e08:	460b      	mov	r3, r1
    6e0a:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	78fa      	ldrb	r2, [r7, #3]
    6e10:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e12:	bf00      	nop
    6e14:	370c      	adds	r7, #12
    6e16:	46bd      	mov	sp, r7
    6e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e1c:	4770      	bx	lr

00006e1e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    6e1e:	b480      	push	{r7}
    6e20:	b085      	sub	sp, #20
    6e22:	af00      	add	r7, sp, #0
    6e24:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	f893 3020 	ldrb.w	r3, [r3, #32]
    6e2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6e2e:	7bfb      	ldrb	r3, [r7, #15]
    6e30:	f003 0301 	and.w	r3, r3, #1
    6e34:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6e36:	7bfb      	ldrb	r3, [r7, #15]
    6e38:	2b00      	cmp	r3, #0
    6e3a:	bf14      	ite	ne
    6e3c:	2301      	movne	r3, #1
    6e3e:	2300      	moveq	r3, #0
    6e40:	b2db      	uxtb	r3, r3
}
    6e42:	4618      	mov	r0, r3
    6e44:	3714      	adds	r7, #20
    6e46:	46bd      	mov	sp, r7
    6e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e4c:	4770      	bx	lr

00006e4e <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    6e4e:	b480      	push	{r7}
    6e50:	b083      	sub	sp, #12
    6e52:	af00      	add	r7, sp, #0
    6e54:	6078      	str	r0, [r7, #4]
    6e56:	460b      	mov	r3, r1
    6e58:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	78fa      	ldrb	r2, [r7, #3]
    6e5e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e62:	bf00      	nop
    6e64:	370c      	adds	r7, #12
    6e66:	46bd      	mov	sp, r7
    6e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e6c:	4770      	bx	lr

00006e6e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    6e6e:	b480      	push	{r7}
    6e70:	b083      	sub	sp, #12
    6e72:	af00      	add	r7, sp, #0
    6e74:	6078      	str	r0, [r7, #4]
    6e76:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6e78:	687b      	ldr	r3, [r7, #4]
    6e7a:	683a      	ldr	r2, [r7, #0]
    6e7c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e7e:	bf00      	nop
    6e80:	370c      	adds	r7, #12
    6e82:	46bd      	mov	sp, r7
    6e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e88:	4770      	bx	lr

00006e8a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6e8a:	b480      	push	{r7}
    6e8c:	b083      	sub	sp, #12
    6e8e:	af00      	add	r7, sp, #0
    6e90:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6e96:	4618      	mov	r0, r3
    6e98:	370c      	adds	r7, #12
    6e9a:	46bd      	mov	sp, r7
    6e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea0:	4770      	bx	lr

00006ea2 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6ea2:	b480      	push	{r7}
    6ea4:	b083      	sub	sp, #12
    6ea6:	af00      	add	r7, sp, #0
    6ea8:	6078      	str	r0, [r7, #4]
    6eaa:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6eac:	687b      	ldr	r3, [r7, #4]
    6eae:	683a      	ldr	r2, [r7, #0]
    6eb0:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6eb2:	bf00      	nop
    6eb4:	370c      	adds	r7, #12
    6eb6:	46bd      	mov	sp, r7
    6eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ebc:	4770      	bx	lr

00006ebe <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    6ebe:	b480      	push	{r7}
    6ec0:	b085      	sub	sp, #20
    6ec2:	af00      	add	r7, sp, #0
    6ec4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6ecc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    6ece:	7bfb      	ldrb	r3, [r7, #15]
    6ed0:	085b      	lsrs	r3, r3, #1
    6ed2:	b2db      	uxtb	r3, r3
    6ed4:	f003 0301 	and.w	r3, r3, #1
    6ed8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6eda:	7bfb      	ldrb	r3, [r7, #15]
    6edc:	2b00      	cmp	r3, #0
    6ede:	bf14      	ite	ne
    6ee0:	2301      	movne	r3, #1
    6ee2:	2300      	moveq	r3, #0
    6ee4:	b2db      	uxtb	r3, r3
}
    6ee6:	4618      	mov	r0, r3
    6ee8:	3714      	adds	r7, #20
    6eea:	46bd      	mov	sp, r7
    6eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ef0:	4770      	bx	lr

00006ef2 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6ef2:	b480      	push	{r7}
    6ef4:	b085      	sub	sp, #20
    6ef6:	af00      	add	r7, sp, #0
    6ef8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6efa:	687b      	ldr	r3, [r7, #4]
    6efc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6f00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6f02:	7bfb      	ldrb	r3, [r7, #15]
    6f04:	089b      	lsrs	r3, r3, #2
    6f06:	b2db      	uxtb	r3, r3
    6f08:	f003 0301 	and.w	r3, r3, #1
    6f0c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6f0e:	7bfb      	ldrb	r3, [r7, #15]
    6f10:	2b00      	cmp	r3, #0
    6f12:	bf14      	ite	ne
    6f14:	2301      	movne	r3, #1
    6f16:	2300      	moveq	r3, #0
    6f18:	b2db      	uxtb	r3, r3
}
    6f1a:	4618      	mov	r0, r3
    6f1c:	3714      	adds	r7, #20
    6f1e:	46bd      	mov	sp, r7
    6f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f24:	4770      	bx	lr

00006f26 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6f26:	b480      	push	{r7}
    6f28:	b085      	sub	sp, #20
    6f2a:	af00      	add	r7, sp, #0
    6f2c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6f2e:	687b      	ldr	r3, [r7, #4]
    6f30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6f34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6f36:	7bfb      	ldrb	r3, [r7, #15]
    6f38:	08db      	lsrs	r3, r3, #3
    6f3a:	b2db      	uxtb	r3, r3
    6f3c:	f003 0301 	and.w	r3, r3, #1
    6f40:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6f42:	7bfb      	ldrb	r3, [r7, #15]
    6f44:	2b00      	cmp	r3, #0
    6f46:	bf14      	ite	ne
    6f48:	2301      	movne	r3, #1
    6f4a:	2300      	moveq	r3, #0
    6f4c:	b2db      	uxtb	r3, r3
}
    6f4e:	4618      	mov	r0, r3
    6f50:	3714      	adds	r7, #20
    6f52:	46bd      	mov	sp, r7
    6f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f58:	4770      	bx	lr

00006f5a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6f5a:	b480      	push	{r7}
    6f5c:	b085      	sub	sp, #20
    6f5e:	af00      	add	r7, sp, #0
    6f60:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6f68:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6f6a:	7bfb      	ldrb	r3, [r7, #15]
    6f6c:	091b      	lsrs	r3, r3, #4
    6f6e:	b2db      	uxtb	r3, r3
    6f70:	f003 0301 	and.w	r3, r3, #1
    6f74:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6f76:	7bfb      	ldrb	r3, [r7, #15]
    6f78:	2b00      	cmp	r3, #0
    6f7a:	bf14      	ite	ne
    6f7c:	2301      	movne	r3, #1
    6f7e:	2300      	moveq	r3, #0
    6f80:	b2db      	uxtb	r3, r3
}
    6f82:	4618      	mov	r0, r3
    6f84:	3714      	adds	r7, #20
    6f86:	46bd      	mov	sp, r7
    6f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f8c:	4770      	bx	lr
	...

00006f90 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6f90:	b580      	push	{r7, lr}
    6f92:	b082      	sub	sp, #8
    6f94:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6f96:	4b0a      	ldr	r3, [pc, #40]	; (6fc0 <_oscctrl_init_sources+0x30>)
    6f98:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6f9a:	4a0a      	ldr	r2, [pc, #40]	; (6fc4 <_oscctrl_init_sources+0x34>)
    6f9c:	2101      	movs	r1, #1
    6f9e:	6878      	ldr	r0, [r7, #4]
    6fa0:	4b09      	ldr	r3, [pc, #36]	; (6fc8 <_oscctrl_init_sources+0x38>)
    6fa2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6fa4:	bf00      	nop
    6fa6:	6878      	ldr	r0, [r7, #4]
    6fa8:	4b08      	ldr	r3, [pc, #32]	; (6fcc <_oscctrl_init_sources+0x3c>)
    6faa:	4798      	blx	r3
    6fac:	4603      	mov	r3, r0
    6fae:	f083 0301 	eor.w	r3, r3, #1
    6fb2:	b2db      	uxtb	r3, r3
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d1f6      	bne.n	6fa6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6fb8:	bf00      	nop
    6fba:	3708      	adds	r7, #8
    6fbc:	46bd      	mov	sp, r7
    6fbe:	bd80      	pop	{r7, pc}
    6fc0:	40001000 	.word	0x40001000
    6fc4:	03002646 	.word	0x03002646
    6fc8:	00006dd9 	.word	0x00006dd9
    6fcc:	00006d63 	.word	0x00006d63

00006fd0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6fd0:	b580      	push	{r7, lr}
    6fd2:	b084      	sub	sp, #16
    6fd4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6fd6:	4b6b      	ldr	r3, [pc, #428]	; (7184 <_oscctrl_init_referenced_generators+0x1b4>)
    6fd8:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    6fda:	2204      	movs	r2, #4
    6fdc:	2100      	movs	r1, #0
    6fde:	486a      	ldr	r0, [pc, #424]	; (7188 <_oscctrl_init_referenced_generators+0x1b8>)
    6fe0:	4b6a      	ldr	r3, [pc, #424]	; (718c <_oscctrl_init_referenced_generators+0x1bc>)
    6fe2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6fe4:	bf00      	nop
    6fe6:	4868      	ldr	r0, [pc, #416]	; (7188 <_oscctrl_init_referenced_generators+0x1b8>)
    6fe8:	4b69      	ldr	r3, [pc, #420]	; (7190 <_oscctrl_init_referenced_generators+0x1c0>)
    6fea:	4798      	blx	r3
    6fec:	4603      	mov	r3, r0
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d1f9      	bne.n	6fe6 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6ff2:	2100      	movs	r1, #0
    6ff4:	68f8      	ldr	r0, [r7, #12]
    6ff6:	4b67      	ldr	r3, [pc, #412]	; (7194 <_oscctrl_init_referenced_generators+0x1c4>)
    6ff8:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    6ffa:	4967      	ldr	r1, [pc, #412]	; (7198 <_oscctrl_init_referenced_generators+0x1c8>)
    6ffc:	68f8      	ldr	r0, [r7, #12]
    6ffe:	4b67      	ldr	r3, [pc, #412]	; (719c <_oscctrl_init_referenced_generators+0x1cc>)
    7000:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7002:	bf00      	nop
    7004:	68f8      	ldr	r0, [r7, #12]
    7006:	4b66      	ldr	r3, [pc, #408]	; (71a0 <_oscctrl_init_referenced_generators+0x1d0>)
    7008:	4798      	blx	r3
    700a:	4603      	mov	r3, r0
    700c:	2b00      	cmp	r3, #0
    700e:	d1f9      	bne.n	7004 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7010:	2100      	movs	r1, #0
    7012:	68f8      	ldr	r0, [r7, #12]
    7014:	4b63      	ldr	r3, [pc, #396]	; (71a4 <_oscctrl_init_referenced_generators+0x1d4>)
    7016:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7018:	bf00      	nop
    701a:	68f8      	ldr	r0, [r7, #12]
    701c:	4b62      	ldr	r3, [pc, #392]	; (71a8 <_oscctrl_init_referenced_generators+0x1d8>)
    701e:	4798      	blx	r3
    7020:	4603      	mov	r3, r0
    7022:	2b00      	cmp	r3, #0
    7024:	d1f9      	bne.n	701a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    7026:	2302      	movs	r3, #2
    7028:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    702a:	7afb      	ldrb	r3, [r7, #11]
    702c:	4619      	mov	r1, r3
    702e:	68f8      	ldr	r0, [r7, #12]
    7030:	4b58      	ldr	r3, [pc, #352]	; (7194 <_oscctrl_init_referenced_generators+0x1c4>)
    7032:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7034:	bf00      	nop
    7036:	68f8      	ldr	r0, [r7, #12]
    7038:	4b5c      	ldr	r3, [pc, #368]	; (71ac <_oscctrl_init_referenced_generators+0x1dc>)
    703a:	4798      	blx	r3
    703c:	4603      	mov	r3, r0
    703e:	2b00      	cmp	r3, #0
    7040:	d1f9      	bne.n	7036 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    7042:	68f8      	ldr	r0, [r7, #12]
    7044:	4b5a      	ldr	r3, [pc, #360]	; (71b0 <_oscctrl_init_referenced_generators+0x1e0>)
    7046:	4798      	blx	r3
    7048:	4603      	mov	r3, r0
    704a:	4619      	mov	r1, r3
    704c:	68f8      	ldr	r0, [r7, #12]
    704e:	4b59      	ldr	r3, [pc, #356]	; (71b4 <_oscctrl_init_referenced_generators+0x1e4>)
    7050:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7052:	bf00      	nop
    7054:	68f8      	ldr	r0, [r7, #12]
    7056:	4b58      	ldr	r3, [pc, #352]	; (71b8 <_oscctrl_init_referenced_generators+0x1e8>)
    7058:	4798      	blx	r3
    705a:	4603      	mov	r3, r0
    705c:	2b00      	cmp	r3, #0
    705e:	d1f9      	bne.n	7054 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7060:	2319      	movs	r3, #25
    7062:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    7064:	7afb      	ldrb	r3, [r7, #11]
    7066:	4619      	mov	r1, r3
    7068:	68f8      	ldr	r0, [r7, #12]
    706a:	4b4e      	ldr	r3, [pc, #312]	; (71a4 <_oscctrl_init_referenced_generators+0x1d4>)
    706c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    706e:	bf00      	nop
    7070:	68f8      	ldr	r0, [r7, #12]
    7072:	4b4d      	ldr	r3, [pc, #308]	; (71a8 <_oscctrl_init_referenced_generators+0x1d8>)
    7074:	4798      	blx	r3
    7076:	4603      	mov	r3, r0
    7078:	2b00      	cmp	r3, #0
    707a:	d1f9      	bne.n	7070 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    707c:	2245      	movs	r2, #69	; 0x45
    707e:	2101      	movs	r1, #1
    7080:	4841      	ldr	r0, [pc, #260]	; (7188 <_oscctrl_init_referenced_generators+0x1b8>)
    7082:	4b4e      	ldr	r3, [pc, #312]	; (71bc <_oscctrl_init_referenced_generators+0x1ec>)
    7084:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    7086:	223b      	movs	r2, #59	; 0x3b
    7088:	2100      	movs	r1, #0
    708a:	68f8      	ldr	r0, [r7, #12]
    708c:	4b4c      	ldr	r3, [pc, #304]	; (71c0 <_oscctrl_init_referenced_generators+0x1f0>)
    708e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7090:	f44f 6201 	mov.w	r2, #2064	; 0x810
    7094:	2100      	movs	r1, #0
    7096:	68f8      	ldr	r0, [r7, #12]
    7098:	4b4a      	ldr	r3, [pc, #296]	; (71c4 <_oscctrl_init_referenced_generators+0x1f4>)
    709a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    709c:	2242      	movs	r2, #66	; 0x42
    709e:	2100      	movs	r1, #0
    70a0:	68f8      	ldr	r0, [r7, #12]
    70a2:	4b49      	ldr	r3, [pc, #292]	; (71c8 <_oscctrl_init_referenced_generators+0x1f8>)
    70a4:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    70a6:	4a49      	ldr	r2, [pc, #292]	; (71cc <_oscctrl_init_referenced_generators+0x1fc>)
    70a8:	2101      	movs	r1, #1
    70aa:	68f8      	ldr	r0, [r7, #12]
    70ac:	4b44      	ldr	r3, [pc, #272]	; (71c0 <_oscctrl_init_referenced_generators+0x1f0>)
    70ae:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    70b0:	f44f 6203 	mov.w	r2, #2096	; 0x830
    70b4:	2101      	movs	r1, #1
    70b6:	68f8      	ldr	r0, [r7, #12]
    70b8:	4b42      	ldr	r3, [pc, #264]	; (71c4 <_oscctrl_init_referenced_generators+0x1f4>)
    70ba:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    70bc:	2202      	movs	r2, #2
    70be:	2101      	movs	r1, #1
    70c0:	68f8      	ldr	r0, [r7, #12]
    70c2:	4b41      	ldr	r3, [pc, #260]	; (71c8 <_oscctrl_init_referenced_generators+0x1f8>)
    70c4:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    70c6:	68f8      	ldr	r0, [r7, #12]
    70c8:	4b41      	ldr	r3, [pc, #260]	; (71d0 <_oscctrl_init_referenced_generators+0x200>)
    70ca:	4798      	blx	r3
    70cc:	4603      	mov	r3, r0
    70ce:	2b00      	cmp	r3, #0
    70d0:	d00c      	beq.n	70ec <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    70d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
    70d6:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    70d8:	bf00      	nop
    70da:	6879      	ldr	r1, [r7, #4]
    70dc:	68f8      	ldr	r0, [r7, #12]
    70de:	4b3d      	ldr	r3, [pc, #244]	; (71d4 <_oscctrl_init_referenced_generators+0x204>)
    70e0:	4798      	blx	r3
    70e2:	4602      	mov	r2, r0
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	429a      	cmp	r2, r3
    70e8:	d1f7      	bne.n	70da <_oscctrl_init_referenced_generators+0x10a>
    70ea:	e009      	b.n	7100 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    70ec:	bf00      	nop
    70ee:	68f8      	ldr	r0, [r7, #12]
    70f0:	4b39      	ldr	r3, [pc, #228]	; (71d8 <_oscctrl_init_referenced_generators+0x208>)
    70f2:	4798      	blx	r3
    70f4:	4603      	mov	r3, r0
    70f6:	f083 0301 	eor.w	r3, r3, #1
    70fa:	b2db      	uxtb	r3, r3
    70fc:	2b00      	cmp	r3, #0
    70fe:	d1f6      	bne.n	70ee <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    7100:	bf00      	nop
    7102:	2100      	movs	r1, #0
    7104:	68f8      	ldr	r0, [r7, #12]
    7106:	4b35      	ldr	r3, [pc, #212]	; (71dc <_oscctrl_init_referenced_generators+0x20c>)
    7108:	4798      	blx	r3
    710a:	4603      	mov	r3, r0
    710c:	f083 0301 	eor.w	r3, r3, #1
    7110:	b2db      	uxtb	r3, r3
    7112:	2b00      	cmp	r3, #0
    7114:	d009      	beq.n	712a <_oscctrl_init_referenced_generators+0x15a>
    7116:	2100      	movs	r1, #0
    7118:	68f8      	ldr	r0, [r7, #12]
    711a:	4b31      	ldr	r3, [pc, #196]	; (71e0 <_oscctrl_init_referenced_generators+0x210>)
    711c:	4798      	blx	r3
    711e:	4603      	mov	r3, r0
    7120:	f083 0301 	eor.w	r3, r3, #1
    7124:	b2db      	uxtb	r3, r3
    7126:	2b00      	cmp	r3, #0
    7128:	d1eb      	bne.n	7102 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    712a:	bf00      	nop
    712c:	2101      	movs	r1, #1
    712e:	68f8      	ldr	r0, [r7, #12]
    7130:	4b2a      	ldr	r3, [pc, #168]	; (71dc <_oscctrl_init_referenced_generators+0x20c>)
    7132:	4798      	blx	r3
    7134:	4603      	mov	r3, r0
    7136:	f083 0301 	eor.w	r3, r3, #1
    713a:	b2db      	uxtb	r3, r3
    713c:	2b00      	cmp	r3, #0
    713e:	d009      	beq.n	7154 <_oscctrl_init_referenced_generators+0x184>
    7140:	2101      	movs	r1, #1
    7142:	68f8      	ldr	r0, [r7, #12]
    7144:	4b26      	ldr	r3, [pc, #152]	; (71e0 <_oscctrl_init_referenced_generators+0x210>)
    7146:	4798      	blx	r3
    7148:	4603      	mov	r3, r0
    714a:	f083 0301 	eor.w	r3, r3, #1
    714e:	b2db      	uxtb	r3, r3
    7150:	2b00      	cmp	r3, #0
    7152:	d1eb      	bne.n	712c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7154:	bf00      	nop
    7156:	480c      	ldr	r0, [pc, #48]	; (7188 <_oscctrl_init_referenced_generators+0x1b8>)
    7158:	4b22      	ldr	r3, [pc, #136]	; (71e4 <_oscctrl_init_referenced_generators+0x214>)
    715a:	4798      	blx	r3
    715c:	4603      	mov	r3, r0
    715e:	2b00      	cmp	r3, #0
    7160:	d1f9      	bne.n	7156 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    7162:	2207      	movs	r2, #7
    7164:	2100      	movs	r1, #0
    7166:	4808      	ldr	r0, [pc, #32]	; (7188 <_oscctrl_init_referenced_generators+0x1b8>)
    7168:	4b08      	ldr	r3, [pc, #32]	; (718c <_oscctrl_init_referenced_generators+0x1bc>)
    716a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    716c:	bf00      	nop
    716e:	4806      	ldr	r0, [pc, #24]	; (7188 <_oscctrl_init_referenced_generators+0x1b8>)
    7170:	4b07      	ldr	r3, [pc, #28]	; (7190 <_oscctrl_init_referenced_generators+0x1c0>)
    7172:	4798      	blx	r3
    7174:	4603      	mov	r3, r0
    7176:	2b00      	cmp	r3, #0
    7178:	d1f9      	bne.n	716e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    717a:	bf00      	nop
    717c:	3710      	adds	r7, #16
    717e:	46bd      	mov	sp, r7
    7180:	bd80      	pop	{r7, pc}
    7182:	bf00      	nop
    7184:	40001000 	.word	0x40001000
    7188:	40001c00 	.word	0x40001c00
    718c:	00006b9d 	.word	0x00006b9d
    7190:	00006b5d 	.word	0x00006b5d
    7194:	00006e01 	.word	0x00006e01
    7198:	0401bb80 	.word	0x0401bb80
    719c:	00006ea3 	.word	0x00006ea3
    71a0:	00006f5b 	.word	0x00006f5b
    71a4:	00006e4f 	.word	0x00006e4f
    71a8:	00006ef3 	.word	0x00006ef3
    71ac:	00006ebf 	.word	0x00006ebf
    71b0:	00006e8b 	.word	0x00006e8b
    71b4:	00006e6f 	.word	0x00006e6f
    71b8:	00006f27 	.word	0x00006f27
    71bc:	00006bed 	.word	0x00006bed
    71c0:	00006cf9 	.word	0x00006cf9
    71c4:	00006d35 	.word	0x00006d35
    71c8:	00006cbd 	.word	0x00006cbd
    71cc:	000407a0 	.word	0x000407a0
    71d0:	00006e1f 	.word	0x00006e1f
    71d4:	00006db3 	.word	0x00006db3
    71d8:	00006d8b 	.word	0x00006d8b
    71dc:	00006c49 	.word	0x00006c49
    71e0:	00006c81 	.word	0x00006c81
    71e4:	00006b85 	.word	0x00006b85

000071e8 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    71e8:	b480      	push	{r7}
    71ea:	b083      	sub	sp, #12
    71ec:	af00      	add	r7, sp, #0
    71ee:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	69db      	ldr	r3, [r3, #28]
    71f4:	0a9b      	lsrs	r3, r3, #10
    71f6:	f003 0301 	and.w	r3, r3, #1
    71fa:	2b00      	cmp	r3, #0
    71fc:	bf14      	ite	ne
    71fe:	2301      	movne	r3, #1
    7200:	2300      	moveq	r3, #0
    7202:	b2db      	uxtb	r3, r3
}
    7204:	4618      	mov	r0, r3
    7206:	370c      	adds	r7, #12
    7208:	46bd      	mov	sp, r7
    720a:	f85d 7b04 	ldr.w	r7, [sp], #4
    720e:	4770      	bx	lr

00007210 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    7210:	b480      	push	{r7}
    7212:	b083      	sub	sp, #12
    7214:	af00      	add	r7, sp, #0
    7216:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    721e:	61da      	str	r2, [r3, #28]
}
    7220:	bf00      	nop
    7222:	370c      	adds	r7, #12
    7224:	46bd      	mov	sp, r7
    7226:	f85d 7b04 	ldr.w	r7, [sp], #4
    722a:	4770      	bx	lr

0000722c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    722c:	b480      	push	{r7}
    722e:	b083      	sub	sp, #12
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
    7234:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	683a      	ldr	r2, [r7, #0]
    723a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    723c:	bf00      	nop
    723e:	370c      	adds	r7, #12
    7240:	46bd      	mov	sp, r7
    7242:	f85d 7b04 	ldr.w	r7, [sp], #4
    7246:	4770      	bx	lr

00007248 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7248:	b480      	push	{r7}
    724a:	b083      	sub	sp, #12
    724c:	af00      	add	r7, sp, #0
    724e:	6078      	str	r0, [r7, #4]
    7250:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	683a      	ldr	r2, [r7, #0]
    7256:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7258:	bf00      	nop
    725a:	370c      	adds	r7, #12
    725c:	46bd      	mov	sp, r7
    725e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7262:	4770      	bx	lr

00007264 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    7264:	b480      	push	{r7}
    7266:	b083      	sub	sp, #12
    7268:	af00      	add	r7, sp, #0
    726a:	6078      	str	r0, [r7, #4]
    726c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	683a      	ldr	r2, [r7, #0]
    7272:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7274:	bf00      	nop
    7276:	370c      	adds	r7, #12
    7278:	46bd      	mov	sp, r7
    727a:	f85d 7b04 	ldr.w	r7, [sp], #4
    727e:	4770      	bx	lr

00007280 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    7280:	b480      	push	{r7}
    7282:	b083      	sub	sp, #12
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
    7288:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    728a:	687b      	ldr	r3, [r7, #4]
    728c:	683a      	ldr	r2, [r7, #0]
    728e:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7290:	bf00      	nop
    7292:	370c      	adds	r7, #12
    7294:	46bd      	mov	sp, r7
    7296:	f85d 7b04 	ldr.w	r7, [sp], #4
    729a:	4770      	bx	lr

0000729c <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    729c:	b480      	push	{r7}
    729e:	b085      	sub	sp, #20
    72a0:	af00      	add	r7, sp, #0
    72a2:	6078      	str	r0, [r7, #4]
    72a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    72a6:	687b      	ldr	r3, [r7, #4]
    72a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    72aa:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    72ac:	68fb      	ldr	r3, [r7, #12]
    72ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    72b2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    72b4:	683b      	ldr	r3, [r7, #0]
    72b6:	b2db      	uxtb	r3, r3
    72b8:	68fa      	ldr	r2, [r7, #12]
    72ba:	4313      	orrs	r3, r2
    72bc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    72be:	687b      	ldr	r3, [r7, #4]
    72c0:	68fa      	ldr	r2, [r7, #12]
    72c2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    72c4:	bf00      	nop
    72c6:	3714      	adds	r7, #20
    72c8:	46bd      	mov	sp, r7
    72ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ce:	4770      	bx	lr

000072d0 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    72d0:	b480      	push	{r7}
    72d2:	b085      	sub	sp, #20
    72d4:	af00      	add	r7, sp, #0
    72d6:	6078      	str	r0, [r7, #4]
    72d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    72da:	687b      	ldr	r3, [r7, #4]
    72dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    72de:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    72e0:	68fb      	ldr	r3, [r7, #12]
    72e2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    72e6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    72e8:	683b      	ldr	r3, [r7, #0]
    72ea:	041b      	lsls	r3, r3, #16
    72ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    72f0:	68fa      	ldr	r2, [r7, #12]
    72f2:	4313      	orrs	r3, r2
    72f4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    72f6:	687b      	ldr	r3, [r7, #4]
    72f8:	68fa      	ldr	r2, [r7, #12]
    72fa:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    72fc:	bf00      	nop
    72fe:	3714      	adds	r7, #20
    7300:	46bd      	mov	sp, r7
    7302:	f85d 7b04 	ldr.w	r7, [sp], #4
    7306:	4770      	bx	lr

00007308 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7308:	b480      	push	{r7}
    730a:	b083      	sub	sp, #12
    730c:	af00      	add	r7, sp, #0
    730e:	6078      	str	r0, [r7, #4]
    7310:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	683a      	ldr	r2, [r7, #0]
    7316:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7318:	bf00      	nop
    731a:	370c      	adds	r7, #12
    731c:	46bd      	mov	sp, r7
    731e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7322:	4770      	bx	lr

00007324 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7324:	b480      	push	{r7}
    7326:	b083      	sub	sp, #12
    7328:	af00      	add	r7, sp, #0
    732a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    7330:	4618      	mov	r0, r3
    7332:	370c      	adds	r7, #12
    7334:	46bd      	mov	sp, r7
    7336:	f85d 7b04 	ldr.w	r7, [sp], #4
    733a:	4770      	bx	lr

0000733c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    733c:	b480      	push	{r7}
    733e:	b085      	sub	sp, #20
    7340:	af00      	add	r7, sp, #0
    7342:	60f8      	str	r0, [r7, #12]
    7344:	60b9      	str	r1, [r7, #8]
    7346:	607a      	str	r2, [r7, #4]
	while (count--) {
    7348:	e007      	b.n	735a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    734a:	68fb      	ldr	r3, [r7, #12]
    734c:	1c5a      	adds	r2, r3, #1
    734e:	60fa      	str	r2, [r7, #12]
    7350:	68ba      	ldr	r2, [r7, #8]
    7352:	1c51      	adds	r1, r2, #1
    7354:	60b9      	str	r1, [r7, #8]
    7356:	7812      	ldrb	r2, [r2, #0]
    7358:	701a      	strb	r2, [r3, #0]
	while (count--) {
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	1e5a      	subs	r2, r3, #1
    735e:	607a      	str	r2, [r7, #4]
    7360:	2b00      	cmp	r3, #0
    7362:	d1f2      	bne.n	734a <_qspi_memcpy+0xe>
	}
}
    7364:	bf00      	nop
    7366:	3714      	adds	r7, #20
    7368:	46bd      	mov	sp, r7
    736a:	f85d 7b04 	ldr.w	r7, [sp], #4
    736e:	4770      	bx	lr

00007370 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7370:	b580      	push	{r7, lr}
    7372:	b082      	sub	sp, #8
    7374:	af00      	add	r7, sp, #0
    7376:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7378:	4903      	ldr	r1, [pc, #12]	; (7388 <_qspi_end_transfer+0x18>)
    737a:	6878      	ldr	r0, [r7, #4]
    737c:	4b03      	ldr	r3, [pc, #12]	; (738c <_qspi_end_transfer+0x1c>)
    737e:	4798      	blx	r3
}
    7380:	bf00      	nop
    7382:	3708      	adds	r7, #8
    7384:	46bd      	mov	sp, r7
    7386:	bd80      	pop	{r7, pc}
    7388:	01000002 	.word	0x01000002
    738c:	0000722d 	.word	0x0000722d

00007390 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7390:	b580      	push	{r7, lr}
    7392:	b082      	sub	sp, #8
    7394:	af00      	add	r7, sp, #0
    7396:	6078      	str	r0, [r7, #4]
    7398:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    739a:	687b      	ldr	r3, [r7, #4]
    739c:	2b00      	cmp	r3, #0
    739e:	d004      	beq.n	73aa <_qspi_sync_init+0x1a>
    73a0:	683b      	ldr	r3, [r7, #0]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d001      	beq.n	73aa <_qspi_sync_init+0x1a>
    73a6:	2301      	movs	r3, #1
    73a8:	e000      	b.n	73ac <_qspi_sync_init+0x1c>
    73aa:	2300      	movs	r3, #0
    73ac:	f003 0301 	and.w	r3, r3, #1
    73b0:	b2db      	uxtb	r3, r3
    73b2:	2240      	movs	r2, #64	; 0x40
    73b4:	490c      	ldr	r1, [pc, #48]	; (73e8 <_qspi_sync_init+0x58>)
    73b6:	4618      	mov	r0, r3
    73b8:	4b0c      	ldr	r3, [pc, #48]	; (73ec <_qspi_sync_init+0x5c>)
    73ba:	4798      	blx	r3
	dev->prvt = hw;
    73bc:	687b      	ldr	r3, [r7, #4]
    73be:	683a      	ldr	r2, [r7, #0]
    73c0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    73c2:	687b      	ldr	r3, [r7, #4]
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	2101      	movs	r1, #1
    73c8:	4618      	mov	r0, r3
    73ca:	4b09      	ldr	r3, [pc, #36]	; (73f0 <_qspi_sync_init+0x60>)
    73cc:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    73ce:	4909      	ldr	r1, [pc, #36]	; (73f4 <_qspi_sync_init+0x64>)
    73d0:	6838      	ldr	r0, [r7, #0]
    73d2:	4b09      	ldr	r3, [pc, #36]	; (73f8 <_qspi_sync_init+0x68>)
    73d4:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    73d6:	4909      	ldr	r1, [pc, #36]	; (73fc <_qspi_sync_init+0x6c>)
    73d8:	6838      	ldr	r0, [r7, #0]
    73da:	4b09      	ldr	r3, [pc, #36]	; (7400 <_qspi_sync_init+0x70>)
    73dc:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    73de:	2300      	movs	r3, #0
}
    73e0:	4618      	mov	r0, r3
    73e2:	3708      	adds	r7, #8
    73e4:	46bd      	mov	sp, r7
    73e6:	bd80      	pop	{r7, pc}
    73e8:	0001b8f8 	.word	0x0001b8f8
    73ec:	00004d25 	.word	0x00004d25
    73f0:	0000722d 	.word	0x0000722d
    73f4:	06000011 	.word	0x06000011
    73f8:	00007249 	.word	0x00007249
    73fc:	00241300 	.word	0x00241300
    7400:	00007265 	.word	0x00007265

00007404 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7404:	b580      	push	{r7, lr}
    7406:	b082      	sub	sp, #8
    7408:	af00      	add	r7, sp, #0
    740a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	681b      	ldr	r3, [r3, #0]
    7410:	2102      	movs	r1, #2
    7412:	4618      	mov	r0, r3
    7414:	4b03      	ldr	r3, [pc, #12]	; (7424 <_qspi_sync_enable+0x20>)
    7416:	4798      	blx	r3
	return ERR_NONE;
    7418:	2300      	movs	r3, #0
}
    741a:	4618      	mov	r0, r3
    741c:	3708      	adds	r7, #8
    741e:	46bd      	mov	sp, r7
    7420:	bd80      	pop	{r7, pc}
    7422:	bf00      	nop
    7424:	0000722d 	.word	0x0000722d

00007428 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7428:	b580      	push	{r7, lr}
    742a:	b082      	sub	sp, #8
    742c:	af00      	add	r7, sp, #0
    742e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    7430:	687b      	ldr	r3, [r7, #4]
    7432:	681b      	ldr	r3, [r3, #0]
    7434:	2100      	movs	r1, #0
    7436:	4618      	mov	r0, r3
    7438:	4b03      	ldr	r3, [pc, #12]	; (7448 <_qspi_sync_disable+0x20>)
    743a:	4798      	blx	r3
	return ERR_NONE;
    743c:	2300      	movs	r3, #0
}
    743e:	4618      	mov	r0, r3
    7440:	3708      	adds	r7, #8
    7442:	46bd      	mov	sp, r7
    7444:	bd80      	pop	{r7, pc}
    7446:	bf00      	nop
    7448:	0000722d 	.word	0x0000722d

0000744c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    744c:	b580      	push	{r7, lr}
    744e:	b084      	sub	sp, #16
    7450:	af00      	add	r7, sp, #0
    7452:	6078      	str	r0, [r7, #4]
    7454:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	681b      	ldr	r3, [r3, #0]
    745a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    745c:	683b      	ldr	r3, [r7, #0]
    745e:	781b      	ldrb	r3, [r3, #0]
    7460:	f003 0320 	and.w	r3, r3, #32
    7464:	b2db      	uxtb	r3, r3
    7466:	2b00      	cmp	r3, #0
    7468:	d005      	beq.n	7476 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    746a:	683b      	ldr	r3, [r7, #0]
    746c:	689b      	ldr	r3, [r3, #8]
    746e:	4619      	mov	r1, r3
    7470:	68f8      	ldr	r0, [r7, #12]
    7472:	4b13      	ldr	r3, [pc, #76]	; (74c0 <_qspi_sync_command_set_ifr+0x74>)
    7474:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7476:	683b      	ldr	r3, [r7, #0]
    7478:	781b      	ldrb	r3, [r3, #0]
    747a:	f003 0310 	and.w	r3, r3, #16
    747e:	b2db      	uxtb	r3, r3
    7480:	2b00      	cmp	r3, #0
    7482:	d005      	beq.n	7490 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7484:	683b      	ldr	r3, [r7, #0]
    7486:	791b      	ldrb	r3, [r3, #4]
    7488:	4619      	mov	r1, r3
    748a:	68f8      	ldr	r0, [r7, #12]
    748c:	4b0d      	ldr	r3, [pc, #52]	; (74c4 <_qspi_sync_command_set_ifr+0x78>)
    748e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7490:	683b      	ldr	r3, [r7, #0]
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7498:	b2db      	uxtb	r3, r3
    749a:	2b00      	cmp	r3, #0
    749c:	d005      	beq.n	74aa <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    749e:	683b      	ldr	r3, [r7, #0]
    74a0:	795b      	ldrb	r3, [r3, #5]
    74a2:	4619      	mov	r1, r3
    74a4:	68f8      	ldr	r0, [r7, #12]
    74a6:	4b08      	ldr	r3, [pc, #32]	; (74c8 <_qspi_sync_command_set_ifr+0x7c>)
    74a8:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    74aa:	683b      	ldr	r3, [r7, #0]
    74ac:	681b      	ldr	r3, [r3, #0]
    74ae:	4619      	mov	r1, r3
    74b0:	68f8      	ldr	r0, [r7, #12]
    74b2:	4b06      	ldr	r3, [pc, #24]	; (74cc <_qspi_sync_command_set_ifr+0x80>)
    74b4:	4798      	blx	r3
}
    74b6:	bf00      	nop
    74b8:	3710      	adds	r7, #16
    74ba:	46bd      	mov	sp, r7
    74bc:	bd80      	pop	{r7, pc}
    74be:	bf00      	nop
    74c0:	00007281 	.word	0x00007281
    74c4:	0000729d 	.word	0x0000729d
    74c8:	000072d1 	.word	0x000072d1
    74cc:	00007309 	.word	0x00007309

000074d0 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    74d0:	b580      	push	{r7, lr}
    74d2:	b084      	sub	sp, #16
    74d4:	af00      	add	r7, sp, #0
    74d6:	6078      	str	r0, [r7, #4]
    74d8:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    74da:	687b      	ldr	r3, [r7, #4]
    74dc:	681b      	ldr	r3, [r3, #0]
    74de:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    74e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    74e4:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    74e6:	683b      	ldr	r3, [r7, #0]
    74e8:	781b      	ldrb	r3, [r3, #0]
    74ea:	f003 0320 	and.w	r3, r3, #32
    74ee:	b2db      	uxtb	r3, r3
    74f0:	2b00      	cmp	r3, #0
    74f2:	d004      	beq.n	74fe <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    74f4:	683b      	ldr	r3, [r7, #0]
    74f6:	689b      	ldr	r3, [r3, #8]
    74f8:	68fa      	ldr	r2, [r7, #12]
    74fa:	4413      	add	r3, r2
    74fc:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    74fe:	68b8      	ldr	r0, [r7, #8]
    7500:	4b18      	ldr	r3, [pc, #96]	; (7564 <_qspi_sync_run_transfer+0x94>)
    7502:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7504:	683b      	ldr	r3, [r7, #0]
    7506:	691b      	ldr	r3, [r3, #16]
    7508:	2b00      	cmp	r3, #0
    750a:	d103      	bne.n	7514 <_qspi_sync_run_transfer+0x44>
    750c:	683b      	ldr	r3, [r7, #0]
    750e:	695b      	ldr	r3, [r3, #20]
    7510:	2b00      	cmp	r3, #0
    7512:	d001      	beq.n	7518 <_qspi_sync_run_transfer+0x48>
    7514:	2301      	movs	r3, #1
    7516:	e000      	b.n	751a <_qspi_sync_run_transfer+0x4a>
    7518:	2300      	movs	r3, #0
    751a:	f003 0301 	and.w	r3, r3, #1
    751e:	b2db      	uxtb	r3, r3
    7520:	2282      	movs	r2, #130	; 0x82
    7522:	4911      	ldr	r1, [pc, #68]	; (7568 <_qspi_sync_run_transfer+0x98>)
    7524:	4618      	mov	r0, r3
    7526:	4b11      	ldr	r3, [pc, #68]	; (756c <_qspi_sync_run_transfer+0x9c>)
    7528:	4798      	blx	r3

	if (cmd->tx_buf) {
    752a:	683b      	ldr	r3, [r7, #0]
    752c:	691b      	ldr	r3, [r3, #16]
    752e:	2b00      	cmp	r3, #0
    7530:	d008      	beq.n	7544 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    7532:	683b      	ldr	r3, [r7, #0]
    7534:	6919      	ldr	r1, [r3, #16]
    7536:	683b      	ldr	r3, [r7, #0]
    7538:	68db      	ldr	r3, [r3, #12]
    753a:	461a      	mov	r2, r3
    753c:	68f8      	ldr	r0, [r7, #12]
    753e:	4b0c      	ldr	r3, [pc, #48]	; (7570 <_qspi_sync_run_transfer+0xa0>)
    7540:	4798      	blx	r3
    7542:	e007      	b.n	7554 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7544:	683b      	ldr	r3, [r7, #0]
    7546:	6958      	ldr	r0, [r3, #20]
    7548:	683b      	ldr	r3, [r7, #0]
    754a:	68db      	ldr	r3, [r3, #12]
    754c:	461a      	mov	r2, r3
    754e:	68f9      	ldr	r1, [r7, #12]
    7550:	4b07      	ldr	r3, [pc, #28]	; (7570 <_qspi_sync_run_transfer+0xa0>)
    7552:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7558:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    755c:	bf00      	nop
    755e:	3710      	adds	r7, #16
    7560:	46bd      	mov	sp, r7
    7562:	bd80      	pop	{r7, pc}
    7564:	00007325 	.word	0x00007325
    7568:	0001b8f8 	.word	0x0001b8f8
    756c:	00004d25 	.word	0x00004d25
    7570:	0000733d 	.word	0x0000733d

00007574 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7574:	b580      	push	{r7, lr}
    7576:	b082      	sub	sp, #8
    7578:	af00      	add	r7, sp, #0
    757a:	6078      	str	r0, [r7, #4]
    757c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    757e:	6839      	ldr	r1, [r7, #0]
    7580:	6878      	ldr	r0, [r7, #4]
    7582:	4b14      	ldr	r3, [pc, #80]	; (75d4 <_qspi_sync_serial_run_command+0x60>)
    7584:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    7586:	683b      	ldr	r3, [r7, #0]
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    758e:	b2db      	uxtb	r3, r3
    7590:	2b00      	cmp	r3, #0
    7592:	d003      	beq.n	759c <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    7594:	6839      	ldr	r1, [r7, #0]
    7596:	6878      	ldr	r0, [r7, #4]
    7598:	4b0f      	ldr	r3, [pc, #60]	; (75d8 <_qspi_sync_serial_run_command+0x64>)
    759a:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    759c:	687b      	ldr	r3, [r7, #4]
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	4618      	mov	r0, r3
    75a2:	4b0e      	ldr	r3, [pc, #56]	; (75dc <_qspi_sync_serial_run_command+0x68>)
    75a4:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    75a6:	bf00      	nop
    75a8:	687b      	ldr	r3, [r7, #4]
    75aa:	681b      	ldr	r3, [r3, #0]
    75ac:	4618      	mov	r0, r3
    75ae:	4b0c      	ldr	r3, [pc, #48]	; (75e0 <_qspi_sync_serial_run_command+0x6c>)
    75b0:	4798      	blx	r3
    75b2:	4603      	mov	r3, r0
    75b4:	f083 0301 	eor.w	r3, r3, #1
    75b8:	b2db      	uxtb	r3, r3
    75ba:	2b00      	cmp	r3, #0
    75bc:	d1f4      	bne.n	75a8 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	681b      	ldr	r3, [r3, #0]
    75c2:	4618      	mov	r0, r3
    75c4:	4b07      	ldr	r3, [pc, #28]	; (75e4 <_qspi_sync_serial_run_command+0x70>)
    75c6:	4798      	blx	r3
	return ERR_NONE;
    75c8:	2300      	movs	r3, #0
}
    75ca:	4618      	mov	r0, r3
    75cc:	3708      	adds	r7, #8
    75ce:	46bd      	mov	sp, r7
    75d0:	bd80      	pop	{r7, pc}
    75d2:	bf00      	nop
    75d4:	0000744d 	.word	0x0000744d
    75d8:	000074d1 	.word	0x000074d1
    75dc:	00007371 	.word	0x00007371
    75e0:	000071e9 	.word	0x000071e9
    75e4:	00007211 	.word	0x00007211

000075e8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    75e8:	b480      	push	{r7}
    75ea:	b083      	sub	sp, #12
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
    75f0:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    75f2:	bf00      	nop
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	691a      	ldr	r2, [r3, #16]
    75f8:	683b      	ldr	r3, [r7, #0]
    75fa:	4013      	ands	r3, r2
    75fc:	2b00      	cmp	r3, #0
    75fe:	d1f9      	bne.n	75f4 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    7600:	bf00      	nop
    7602:	370c      	adds	r7, #12
    7604:	46bd      	mov	sp, r7
    7606:	f85d 7b04 	ldr.w	r7, [sp], #4
    760a:	4770      	bx	lr

0000760c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    760c:	b480      	push	{r7}
    760e:	b083      	sub	sp, #12
    7610:	af00      	add	r7, sp, #0
    7612:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7614:	687b      	ldr	r3, [r7, #4]
    7616:	f44f 7280 	mov.w	r2, #256	; 0x100
    761a:	819a      	strh	r2, [r3, #12]
}
    761c:	bf00      	nop
    761e:	370c      	adds	r7, #12
    7620:	46bd      	mov	sp, r7
    7622:	f85d 7b04 	ldr.w	r7, [sp], #4
    7626:	4770      	bx	lr

00007628 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    7628:	b480      	push	{r7}
    762a:	b083      	sub	sp, #12
    762c:	af00      	add	r7, sp, #0
    762e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    7630:	687b      	ldr	r3, [r7, #4]
    7632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7636:	819a      	strh	r2, [r3, #12]
}
    7638:	bf00      	nop
    763a:	370c      	adds	r7, #12
    763c:	46bd      	mov	sp, r7
    763e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7642:	4770      	bx	lr

00007644 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    7644:	b480      	push	{r7}
    7646:	b083      	sub	sp, #12
    7648:	af00      	add	r7, sp, #0
    764a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	899b      	ldrh	r3, [r3, #12]
    7650:	b29b      	uxth	r3, r3
}
    7652:	4618      	mov	r0, r3
    7654:	370c      	adds	r7, #12
    7656:	46bd      	mov	sp, r7
    7658:	f85d 7b04 	ldr.w	r7, [sp], #4
    765c:	4770      	bx	lr

0000765e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    765e:	b480      	push	{r7}
    7660:	b083      	sub	sp, #12
    7662:	af00      	add	r7, sp, #0
    7664:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	895b      	ldrh	r3, [r3, #10]
    766a:	b29b      	uxth	r3, r3
}
    766c:	4618      	mov	r0, r3
    766e:	370c      	adds	r7, #12
    7670:	46bd      	mov	sp, r7
    7672:	f85d 7b04 	ldr.w	r7, [sp], #4
    7676:	4770      	bx	lr

00007678 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7678:	b580      	push	{r7, lr}
    767a:	b082      	sub	sp, #8
    767c:	af00      	add	r7, sp, #0
    767e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	881b      	ldrh	r3, [r3, #0]
    7684:	b29b      	uxth	r3, r3
    7686:	f043 0301 	orr.w	r3, r3, #1
    768a:	b29a      	uxth	r2, r3
    768c:	687b      	ldr	r3, [r7, #4]
    768e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    7690:	2101      	movs	r1, #1
    7692:	6878      	ldr	r0, [r7, #4]
    7694:	4b02      	ldr	r3, [pc, #8]	; (76a0 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    7696:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7698:	bf00      	nop
    769a:	3708      	adds	r7, #8
    769c:	46bd      	mov	sp, r7
    769e:	bd80      	pop	{r7, pc}
    76a0:	000075e9 	.word	0x000075e9

000076a4 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    76a4:	b580      	push	{r7, lr}
    76a6:	b082      	sub	sp, #8
    76a8:	af00      	add	r7, sp, #0
    76aa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	881b      	ldrh	r3, [r3, #0]
    76b0:	b29b      	uxth	r3, r3
    76b2:	f043 0302 	orr.w	r3, r3, #2
    76b6:	b29a      	uxth	r2, r3
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    76bc:	f248 0103 	movw	r1, #32771	; 0x8003
    76c0:	6878      	ldr	r0, [r7, #4]
    76c2:	4b03      	ldr	r3, [pc, #12]	; (76d0 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    76c4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    76c6:	bf00      	nop
    76c8:	3708      	adds	r7, #8
    76ca:	46bd      	mov	sp, r7
    76cc:	bd80      	pop	{r7, pc}
    76ce:	bf00      	nop
    76d0:	000075e9 	.word	0x000075e9

000076d4 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    76d4:	b580      	push	{r7, lr}
    76d6:	b084      	sub	sp, #16
    76d8:	af00      	add	r7, sp, #0
    76da:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    76dc:	f248 0103 	movw	r1, #32771	; 0x8003
    76e0:	6878      	ldr	r0, [r7, #4]
    76e2:	4b0a      	ldr	r3, [pc, #40]	; (770c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    76e4:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    76e6:	687b      	ldr	r3, [r7, #4]
    76e8:	881b      	ldrh	r3, [r3, #0]
    76ea:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    76ec:	89fb      	ldrh	r3, [r7, #14]
    76ee:	085b      	lsrs	r3, r3, #1
    76f0:	b29b      	uxth	r3, r3
    76f2:	f003 0301 	and.w	r3, r3, #1
    76f6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    76f8:	89fb      	ldrh	r3, [r7, #14]
    76fa:	2b00      	cmp	r3, #0
    76fc:	bf14      	ite	ne
    76fe:	2301      	movne	r3, #1
    7700:	2300      	moveq	r3, #0
    7702:	b2db      	uxtb	r3, r3
}
    7704:	4618      	mov	r0, r3
    7706:	3710      	adds	r7, #16
    7708:	46bd      	mov	sp, r7
    770a:	bd80      	pop	{r7, pc}
    770c:	000075e9 	.word	0x000075e9

00007710 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7710:	b580      	push	{r7, lr}
    7712:	b082      	sub	sp, #8
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	881b      	ldrh	r3, [r3, #0]
    771c:	b29b      	uxth	r3, r3
    771e:	f023 0302 	bic.w	r3, r3, #2
    7722:	b29a      	uxth	r2, r3
    7724:	687b      	ldr	r3, [r7, #4]
    7726:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7728:	f248 0103 	movw	r1, #32771	; 0x8003
    772c:	6878      	ldr	r0, [r7, #4]
    772e:	4b03      	ldr	r3, [pc, #12]	; (773c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    7730:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7732:	bf00      	nop
    7734:	3708      	adds	r7, #8
    7736:	46bd      	mov	sp, r7
    7738:	bd80      	pop	{r7, pc}
    773a:	bf00      	nop
    773c:	000075e9 	.word	0x000075e9

00007740 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    7740:	b580      	push	{r7, lr}
    7742:	b082      	sub	sp, #8
    7744:	af00      	add	r7, sp, #0
    7746:	6078      	str	r0, [r7, #4]
    7748:	460b      	mov	r3, r1
    774a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    774c:	687b      	ldr	r3, [r7, #4]
    774e:	887a      	ldrh	r2, [r7, #2]
    7750:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7752:	f248 0103 	movw	r1, #32771	; 0x8003
    7756:	6878      	ldr	r0, [r7, #4]
    7758:	4b02      	ldr	r3, [pc, #8]	; (7764 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    775a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    775c:	bf00      	nop
    775e:	3708      	adds	r7, #8
    7760:	46bd      	mov	sp, r7
    7762:	bd80      	pop	{r7, pc}
    7764:	000075e9 	.word	0x000075e9

00007768 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    7768:	b580      	push	{r7, lr}
    776a:	b082      	sub	sp, #8
    776c:	af00      	add	r7, sp, #0
    776e:	6078      	str	r0, [r7, #4]
    7770:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	683a      	ldr	r2, [r7, #0]
    7776:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7778:	2108      	movs	r1, #8
    777a:	6878      	ldr	r0, [r7, #4]
    777c:	4b02      	ldr	r3, [pc, #8]	; (7788 <hri_rtcmode0_write_COUNT_reg+0x20>)
    777e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7780:	bf00      	nop
    7782:	3708      	adds	r7, #8
    7784:	46bd      	mov	sp, r7
    7786:	bd80      	pop	{r7, pc}
    7788:	000075e9 	.word	0x000075e9

0000778c <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    778c:	b580      	push	{r7, lr}
    778e:	b082      	sub	sp, #8
    7790:	af00      	add	r7, sp, #0
    7792:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7794:	2108      	movs	r1, #8
    7796:	6878      	ldr	r0, [r7, #4]
    7798:	4b03      	ldr	r3, [pc, #12]	; (77a8 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    779a:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    779c:	687b      	ldr	r3, [r7, #4]
    779e:	699b      	ldr	r3, [r3, #24]
}
    77a0:	4618      	mov	r0, r3
    77a2:	3708      	adds	r7, #8
    77a4:	46bd      	mov	sp, r7
    77a6:	bd80      	pop	{r7, pc}
    77a8:	000075e9 	.word	0x000075e9

000077ac <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    77ac:	b480      	push	{r7}
    77ae:	b083      	sub	sp, #12
    77b0:	af00      	add	r7, sp, #0
    77b2:	6078      	str	r0, [r7, #4]
    77b4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	683a      	ldr	r2, [r7, #0]
    77ba:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    77bc:	bf00      	nop
    77be:	370c      	adds	r7, #12
    77c0:	46bd      	mov	sp, r7
    77c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c6:	4770      	bx	lr

000077c8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    77c8:	b580      	push	{r7, lr}
    77ca:	b082      	sub	sp, #8
    77cc:	af00      	add	r7, sp, #0
    77ce:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	2b00      	cmp	r3, #0
    77d4:	d005      	beq.n	77e2 <_calendar_init+0x1a>
    77d6:	687b      	ldr	r3, [r7, #4]
    77d8:	681b      	ldr	r3, [r3, #0]
    77da:	2b00      	cmp	r3, #0
    77dc:	d001      	beq.n	77e2 <_calendar_init+0x1a>
    77de:	2301      	movs	r3, #1
    77e0:	e000      	b.n	77e4 <_calendar_init+0x1c>
    77e2:	2300      	movs	r3, #0
    77e4:	f003 0301 	and.w	r3, r3, #1
    77e8:	b2db      	uxtb	r3, r3
    77ea:	222f      	movs	r2, #47	; 0x2f
    77ec:	491b      	ldr	r1, [pc, #108]	; (785c <_calendar_init+0x94>)
    77ee:	4618      	mov	r0, r3
    77f0:	4b1b      	ldr	r3, [pc, #108]	; (7860 <_calendar_init+0x98>)
    77f2:	4798      	blx	r3

	_rtc_dev = dev;
    77f4:	4a1b      	ldr	r2, [pc, #108]	; (7864 <_calendar_init+0x9c>)
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	681b      	ldr	r3, [r3, #0]
    77fe:	4618      	mov	r0, r3
    7800:	4b19      	ldr	r3, [pc, #100]	; (7868 <_calendar_init+0xa0>)
    7802:	4798      	blx	r3
    7804:	4603      	mov	r3, r0
    7806:	2b00      	cmp	r3, #0
    7808:	d00a      	beq.n	7820 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	681b      	ldr	r3, [r3, #0]
    780e:	4618      	mov	r0, r3
    7810:	4b16      	ldr	r3, [pc, #88]	; (786c <_calendar_init+0xa4>)
    7812:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	681b      	ldr	r3, [r3, #0]
    7818:	2102      	movs	r1, #2
    781a:	4618      	mov	r0, r3
    781c:	4b14      	ldr	r3, [pc, #80]	; (7870 <_calendar_init+0xa8>)
    781e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	681b      	ldr	r3, [r3, #0]
    7824:	4618      	mov	r0, r3
    7826:	4b13      	ldr	r3, [pc, #76]	; (7874 <_calendar_init+0xac>)
    7828:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	681b      	ldr	r3, [r3, #0]
    782e:	2101      	movs	r1, #1
    7830:	4618      	mov	r0, r3
    7832:	4b0f      	ldr	r3, [pc, #60]	; (7870 <_calendar_init+0xa8>)
    7834:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    783e:	4618      	mov	r0, r3
    7840:	4b0d      	ldr	r3, [pc, #52]	; (7878 <_calendar_init+0xb0>)
    7842:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7848:	2100      	movs	r1, #0
    784a:	4618      	mov	r0, r3
    784c:	4b0b      	ldr	r3, [pc, #44]	; (787c <_calendar_init+0xb4>)
    784e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    7850:	2300      	movs	r3, #0
}
    7852:	4618      	mov	r0, r3
    7854:	3708      	adds	r7, #8
    7856:	46bd      	mov	sp, r7
    7858:	bd80      	pop	{r7, pc}
    785a:	bf00      	nop
    785c:	0001b910 	.word	0x0001b910
    7860:	00004d25 	.word	0x00004d25
    7864:	2000234c 	.word	0x2000234c
    7868:	000076d5 	.word	0x000076d5
    786c:	00007711 	.word	0x00007711
    7870:	000075e9 	.word	0x000075e9
    7874:	00007679 	.word	0x00007679
    7878:	00007741 	.word	0x00007741
    787c:	000077ad 	.word	0x000077ad

00007880 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    7880:	b580      	push	{r7, lr}
    7882:	b082      	sub	sp, #8
    7884:	af00      	add	r7, sp, #0
    7886:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	2b00      	cmp	r3, #0
    788c:	d005      	beq.n	789a <_calendar_enable+0x1a>
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	681b      	ldr	r3, [r3, #0]
    7892:	2b00      	cmp	r3, #0
    7894:	d001      	beq.n	789a <_calendar_enable+0x1a>
    7896:	2301      	movs	r3, #1
    7898:	e000      	b.n	789c <_calendar_enable+0x1c>
    789a:	2300      	movs	r3, #0
    789c:	f003 0301 	and.w	r3, r3, #1
    78a0:	b2db      	uxtb	r3, r3
    78a2:	2275      	movs	r2, #117	; 0x75
    78a4:	4906      	ldr	r1, [pc, #24]	; (78c0 <_calendar_enable+0x40>)
    78a6:	4618      	mov	r0, r3
    78a8:	4b06      	ldr	r3, [pc, #24]	; (78c4 <_calendar_enable+0x44>)
    78aa:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    78ac:	687b      	ldr	r3, [r7, #4]
    78ae:	681b      	ldr	r3, [r3, #0]
    78b0:	4618      	mov	r0, r3
    78b2:	4b05      	ldr	r3, [pc, #20]	; (78c8 <_calendar_enable+0x48>)
    78b4:	4798      	blx	r3

	return ERR_NONE;
    78b6:	2300      	movs	r3, #0
}
    78b8:	4618      	mov	r0, r3
    78ba:	3708      	adds	r7, #8
    78bc:	46bd      	mov	sp, r7
    78be:	bd80      	pop	{r7, pc}
    78c0:	0001b910 	.word	0x0001b910
    78c4:	00004d25 	.word	0x00004d25
    78c8:	000076a5 	.word	0x000076a5

000078cc <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b082      	sub	sp, #8
    78d0:	af00      	add	r7, sp, #0
    78d2:	6078      	str	r0, [r7, #4]
    78d4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    78d6:	687b      	ldr	r3, [r7, #4]
    78d8:	2b00      	cmp	r3, #0
    78da:	d005      	beq.n	78e8 <_calendar_set_counter+0x1c>
    78dc:	687b      	ldr	r3, [r7, #4]
    78de:	681b      	ldr	r3, [r3, #0]
    78e0:	2b00      	cmp	r3, #0
    78e2:	d001      	beq.n	78e8 <_calendar_set_counter+0x1c>
    78e4:	2301      	movs	r3, #1
    78e6:	e000      	b.n	78ea <_calendar_set_counter+0x1e>
    78e8:	2300      	movs	r3, #0
    78ea:	f003 0301 	and.w	r3, r3, #1
    78ee:	b2db      	uxtb	r3, r3
    78f0:	228d      	movs	r2, #141	; 0x8d
    78f2:	4907      	ldr	r1, [pc, #28]	; (7910 <_calendar_set_counter+0x44>)
    78f4:	4618      	mov	r0, r3
    78f6:	4b07      	ldr	r3, [pc, #28]	; (7914 <_calendar_set_counter+0x48>)
    78f8:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	681b      	ldr	r3, [r3, #0]
    78fe:	6839      	ldr	r1, [r7, #0]
    7900:	4618      	mov	r0, r3
    7902:	4b05      	ldr	r3, [pc, #20]	; (7918 <_calendar_set_counter+0x4c>)
    7904:	4798      	blx	r3

	return ERR_NONE;
    7906:	2300      	movs	r3, #0
}
    7908:	4618      	mov	r0, r3
    790a:	3708      	adds	r7, #8
    790c:	46bd      	mov	sp, r7
    790e:	bd80      	pop	{r7, pc}
    7910:	0001b910 	.word	0x0001b910
    7914:	00004d25 	.word	0x00004d25
    7918:	00007769 	.word	0x00007769

0000791c <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    791c:	b580      	push	{r7, lr}
    791e:	b082      	sub	sp, #8
    7920:	af00      	add	r7, sp, #0
    7922:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	2b00      	cmp	r3, #0
    7928:	d005      	beq.n	7936 <_calendar_get_counter+0x1a>
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	681b      	ldr	r3, [r3, #0]
    792e:	2b00      	cmp	r3, #0
    7930:	d001      	beq.n	7936 <_calendar_get_counter+0x1a>
    7932:	2301      	movs	r3, #1
    7934:	e000      	b.n	7938 <_calendar_get_counter+0x1c>
    7936:	2300      	movs	r3, #0
    7938:	f003 0301 	and.w	r3, r3, #1
    793c:	b2db      	uxtb	r3, r3
    793e:	2299      	movs	r2, #153	; 0x99
    7940:	4906      	ldr	r1, [pc, #24]	; (795c <_calendar_get_counter+0x40>)
    7942:	4618      	mov	r0, r3
    7944:	4b06      	ldr	r3, [pc, #24]	; (7960 <_calendar_get_counter+0x44>)
    7946:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	681b      	ldr	r3, [r3, #0]
    794c:	4618      	mov	r0, r3
    794e:	4b05      	ldr	r3, [pc, #20]	; (7964 <_calendar_get_counter+0x48>)
    7950:	4798      	blx	r3
    7952:	4603      	mov	r3, r0
}
    7954:	4618      	mov	r0, r3
    7956:	3708      	adds	r7, #8
    7958:	46bd      	mov	sp, r7
    795a:	bd80      	pop	{r7, pc}
    795c:	0001b910 	.word	0x0001b910
    7960:	00004d25 	.word	0x00004d25
    7964:	0000778d 	.word	0x0000778d

00007968 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    7968:	b580      	push	{r7, lr}
    796a:	b084      	sub	sp, #16
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7970:	687b      	ldr	r3, [r7, #4]
    7972:	681b      	ldr	r3, [r3, #0]
    7974:	4618      	mov	r0, r3
    7976:	4b19      	ldr	r3, [pc, #100]	; (79dc <_rtc_interrupt_handler+0x74>)
    7978:	4798      	blx	r3
    797a:	4603      	mov	r3, r0
    797c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	681b      	ldr	r3, [r3, #0]
    7982:	4618      	mov	r0, r3
    7984:	4b16      	ldr	r3, [pc, #88]	; (79e0 <_rtc_interrupt_handler+0x78>)
    7986:	4798      	blx	r3
    7988:	4603      	mov	r3, r0
    798a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    798c:	89fa      	ldrh	r2, [r7, #14]
    798e:	89bb      	ldrh	r3, [r7, #12]
    7990:	4013      	ands	r3, r2
    7992:	b29b      	uxth	r3, r3
    7994:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7998:	2b00      	cmp	r3, #0
    799a:	d009      	beq.n	79b0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	685b      	ldr	r3, [r3, #4]
    79a0:	6878      	ldr	r0, [r7, #4]
    79a2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	681b      	ldr	r3, [r3, #0]
    79a8:	4618      	mov	r0, r3
    79aa:	4b0e      	ldr	r3, [pc, #56]	; (79e4 <_rtc_interrupt_handler+0x7c>)
    79ac:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    79ae:	e010      	b.n	79d2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    79b0:	89fa      	ldrh	r2, [r7, #14]
    79b2:	89bb      	ldrh	r3, [r7, #12]
    79b4:	4013      	ands	r3, r2
    79b6:	b29b      	uxth	r3, r3
    79b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    79bc:	2b00      	cmp	r3, #0
    79be:	d008      	beq.n	79d2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    79c0:	687b      	ldr	r3, [r7, #4]
    79c2:	689b      	ldr	r3, [r3, #8]
    79c4:	6878      	ldr	r0, [r7, #4]
    79c6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	4618      	mov	r0, r3
    79ce:	4b06      	ldr	r3, [pc, #24]	; (79e8 <_rtc_interrupt_handler+0x80>)
    79d0:	4798      	blx	r3
}
    79d2:	bf00      	nop
    79d4:	3710      	adds	r7, #16
    79d6:	46bd      	mov	sp, r7
    79d8:	bd80      	pop	{r7, pc}
    79da:	bf00      	nop
    79dc:	00007645 	.word	0x00007645
    79e0:	0000765f 	.word	0x0000765f
    79e4:	0000760d 	.word	0x0000760d
    79e8:	00007629 	.word	0x00007629

000079ec <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    79ec:	b580      	push	{r7, lr}
    79ee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    79f0:	4b03      	ldr	r3, [pc, #12]	; (7a00 <RTC_Handler+0x14>)
    79f2:	681b      	ldr	r3, [r3, #0]
    79f4:	4618      	mov	r0, r3
    79f6:	4b03      	ldr	r3, [pc, #12]	; (7a04 <RTC_Handler+0x18>)
    79f8:	4798      	blx	r3
}
    79fa:	bf00      	nop
    79fc:	bd80      	pop	{r7, pc}
    79fe:	bf00      	nop
    7a00:	2000234c 	.word	0x2000234c
    7a04:	00007969 	.word	0x00007969

00007a08 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7a08:	b480      	push	{r7}
    7a0a:	b083      	sub	sp, #12
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	6078      	str	r0, [r7, #4]
    7a10:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7a12:	bf00      	nop
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	69da      	ldr	r2, [r3, #28]
    7a18:	683b      	ldr	r3, [r7, #0]
    7a1a:	4013      	ands	r3, r2
    7a1c:	2b00      	cmp	r3, #0
    7a1e:	d1f9      	bne.n	7a14 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    7a20:	bf00      	nop
    7a22:	370c      	adds	r7, #12
    7a24:	46bd      	mov	sp, r7
    7a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2a:	4770      	bx	lr

00007a2c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7a2c:	b480      	push	{r7}
    7a2e:	b083      	sub	sp, #12
    7a30:	af00      	add	r7, sp, #0
    7a32:	6078      	str	r0, [r7, #4]
    7a34:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	69da      	ldr	r2, [r3, #28]
    7a3a:	683b      	ldr	r3, [r7, #0]
    7a3c:	4013      	ands	r3, r2
    7a3e:	2b00      	cmp	r3, #0
    7a40:	bf14      	ite	ne
    7a42:	2301      	movne	r3, #1
    7a44:	2300      	moveq	r3, #0
    7a46:	b2db      	uxtb	r3, r3
}
    7a48:	4618      	mov	r0, r3
    7a4a:	370c      	adds	r7, #12
    7a4c:	46bd      	mov	sp, r7
    7a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a52:	4770      	bx	lr

00007a54 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7a54:	b480      	push	{r7}
    7a56:	b083      	sub	sp, #12
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
    7a5c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a5e:	bf00      	nop
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	69da      	ldr	r2, [r3, #28]
    7a64:	683b      	ldr	r3, [r7, #0]
    7a66:	4013      	ands	r3, r2
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d1f9      	bne.n	7a60 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    7a6c:	bf00      	nop
    7a6e:	370c      	adds	r7, #12
    7a70:	46bd      	mov	sp, r7
    7a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a76:	4770      	bx	lr

00007a78 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7a78:	b480      	push	{r7}
    7a7a:	b083      	sub	sp, #12
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	6078      	str	r0, [r7, #4]
    7a80:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a82:	687b      	ldr	r3, [r7, #4]
    7a84:	69da      	ldr	r2, [r3, #28]
    7a86:	683b      	ldr	r3, [r7, #0]
    7a88:	4013      	ands	r3, r2
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	bf14      	ite	ne
    7a8e:	2301      	movne	r3, #1
    7a90:	2300      	moveq	r3, #0
    7a92:	b2db      	uxtb	r3, r3
}
    7a94:	4618      	mov	r0, r3
    7a96:	370c      	adds	r7, #12
    7a98:	46bd      	mov	sp, r7
    7a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a9e:	4770      	bx	lr

00007aa0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    7aa0:	b480      	push	{r7}
    7aa2:	b083      	sub	sp, #12
    7aa4:	af00      	add	r7, sp, #0
    7aa6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	2201      	movs	r2, #1
    7aac:	761a      	strb	r2, [r3, #24]
}
    7aae:	bf00      	nop
    7ab0:	370c      	adds	r7, #12
    7ab2:	46bd      	mov	sp, r7
    7ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ab8:	4770      	bx	lr

00007aba <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    7aba:	b480      	push	{r7}
    7abc:	b083      	sub	sp, #12
    7abe:	af00      	add	r7, sp, #0
    7ac0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7ac2:	687b      	ldr	r3, [r7, #4]
    7ac4:	2202      	movs	r2, #2
    7ac6:	761a      	strb	r2, [r3, #24]
}
    7ac8:	bf00      	nop
    7aca:	370c      	adds	r7, #12
    7acc:	46bd      	mov	sp, r7
    7ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ad2:	4770      	bx	lr

00007ad4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7ad4:	b480      	push	{r7}
    7ad6:	b083      	sub	sp, #12
    7ad8:	af00      	add	r7, sp, #0
    7ada:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7adc:	687b      	ldr	r3, [r7, #4]
    7ade:	7e1b      	ldrb	r3, [r3, #24]
    7ae0:	b2db      	uxtb	r3, r3
}
    7ae2:	4618      	mov	r0, r3
    7ae4:	370c      	adds	r7, #12
    7ae6:	46bd      	mov	sp, r7
    7ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aec:	4770      	bx	lr

00007aee <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7aee:	b480      	push	{r7}
    7af0:	b085      	sub	sp, #20
    7af2:	af00      	add	r7, sp, #0
    7af4:	6078      	str	r0, [r7, #4]
    7af6:	460b      	mov	r3, r1
    7af8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	7e1b      	ldrb	r3, [r3, #24]
    7afe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7b00:	7bfa      	ldrb	r2, [r7, #15]
    7b02:	78fb      	ldrb	r3, [r7, #3]
    7b04:	4013      	ands	r3, r2
    7b06:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7b08:	7bfb      	ldrb	r3, [r7, #15]
}
    7b0a:	4618      	mov	r0, r3
    7b0c:	3714      	adds	r7, #20
    7b0e:	46bd      	mov	sp, r7
    7b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b14:	4770      	bx	lr

00007b16 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    7b16:	b480      	push	{r7}
    7b18:	b083      	sub	sp, #12
    7b1a:	af00      	add	r7, sp, #0
    7b1c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	7e1b      	ldrb	r3, [r3, #24]
    7b22:	b2db      	uxtb	r3, r3
}
    7b24:	4618      	mov	r0, r3
    7b26:	370c      	adds	r7, #12
    7b28:	46bd      	mov	sp, r7
    7b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b2e:	4770      	bx	lr

00007b30 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    7b30:	b480      	push	{r7}
    7b32:	b083      	sub	sp, #12
    7b34:	af00      	add	r7, sp, #0
    7b36:	6078      	str	r0, [r7, #4]
    7b38:	460b      	mov	r3, r1
    7b3a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	78fa      	ldrb	r2, [r7, #3]
    7b40:	761a      	strb	r2, [r3, #24]
}
    7b42:	bf00      	nop
    7b44:	370c      	adds	r7, #12
    7b46:	46bd      	mov	sp, r7
    7b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b4c:	4770      	bx	lr
	...

00007b50 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7b50:	b580      	push	{r7, lr}
    7b52:	b082      	sub	sp, #8
    7b54:	af00      	add	r7, sp, #0
    7b56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7b58:	687b      	ldr	r3, [r7, #4]
    7b5a:	681b      	ldr	r3, [r3, #0]
    7b5c:	f043 0202 	orr.w	r2, r3, #2
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b64:	2103      	movs	r1, #3
    7b66:	6878      	ldr	r0, [r7, #4]
    7b68:	4b02      	ldr	r3, [pc, #8]	; (7b74 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    7b6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b6c:	bf00      	nop
    7b6e:	3708      	adds	r7, #8
    7b70:	46bd      	mov	sp, r7
    7b72:	bd80      	pop	{r7, pc}
    7b74:	00007a09 	.word	0x00007a09

00007b78 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7b78:	b580      	push	{r7, lr}
    7b7a:	b082      	sub	sp, #8
    7b7c:	af00      	add	r7, sp, #0
    7b7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7b80:	687b      	ldr	r3, [r7, #4]
    7b82:	681b      	ldr	r3, [r3, #0]
    7b84:	f023 0202 	bic.w	r2, r3, #2
    7b88:	687b      	ldr	r3, [r7, #4]
    7b8a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b8c:	2103      	movs	r1, #3
    7b8e:	6878      	ldr	r0, [r7, #4]
    7b90:	4b02      	ldr	r3, [pc, #8]	; (7b9c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7b92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b94:	bf00      	nop
    7b96:	3708      	adds	r7, #8
    7b98:	46bd      	mov	sp, r7
    7b9a:	bd80      	pop	{r7, pc}
    7b9c:	00007a09 	.word	0x00007a09

00007ba0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7ba0:	b480      	push	{r7}
    7ba2:	b085      	sub	sp, #20
    7ba4:	af00      	add	r7, sp, #0
    7ba6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	681b      	ldr	r3, [r3, #0]
    7bac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7bae:	68fb      	ldr	r3, [r7, #12]
    7bb0:	0edb      	lsrs	r3, r3, #27
    7bb2:	f003 0301 	and.w	r3, r3, #1
    7bb6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7bb8:	68fb      	ldr	r3, [r7, #12]
    7bba:	2b00      	cmp	r3, #0
    7bbc:	bf14      	ite	ne
    7bbe:	2301      	movne	r3, #1
    7bc0:	2300      	moveq	r3, #0
    7bc2:	b2db      	uxtb	r3, r3
}
    7bc4:	4618      	mov	r0, r3
    7bc6:	3714      	adds	r7, #20
    7bc8:	46bd      	mov	sp, r7
    7bca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bce:	4770      	bx	lr

00007bd0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7bd0:	b580      	push	{r7, lr}
    7bd2:	b084      	sub	sp, #16
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	6078      	str	r0, [r7, #4]
    7bd8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7bda:	2103      	movs	r1, #3
    7bdc:	6878      	ldr	r0, [r7, #4]
    7bde:	4b07      	ldr	r3, [pc, #28]	; (7bfc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7be0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7be2:	687b      	ldr	r3, [r7, #4]
    7be4:	681b      	ldr	r3, [r3, #0]
    7be6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7be8:	68fa      	ldr	r2, [r7, #12]
    7bea:	683b      	ldr	r3, [r7, #0]
    7bec:	4013      	ands	r3, r2
    7bee:	60fb      	str	r3, [r7, #12]
	return tmp;
    7bf0:	68fb      	ldr	r3, [r7, #12]
}
    7bf2:	4618      	mov	r0, r3
    7bf4:	3710      	adds	r7, #16
    7bf6:	46bd      	mov	sp, r7
    7bf8:	bd80      	pop	{r7, pc}
    7bfa:	bf00      	nop
    7bfc:	00007a09 	.word	0x00007a09

00007c00 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7c00:	b580      	push	{r7, lr}
    7c02:	b082      	sub	sp, #8
    7c04:	af00      	add	r7, sp, #0
    7c06:	6078      	str	r0, [r7, #4]
    7c08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7c0a:	687b      	ldr	r3, [r7, #4]
    7c0c:	683a      	ldr	r2, [r7, #0]
    7c0e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7c10:	2103      	movs	r1, #3
    7c12:	6878      	ldr	r0, [r7, #4]
    7c14:	4b02      	ldr	r3, [pc, #8]	; (7c20 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    7c16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c18:	bf00      	nop
    7c1a:	3708      	adds	r7, #8
    7c1c:	46bd      	mov	sp, r7
    7c1e:	bd80      	pop	{r7, pc}
    7c20:	00007a09 	.word	0x00007a09

00007c24 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7c24:	b580      	push	{r7, lr}
    7c26:	b082      	sub	sp, #8
    7c28:	af00      	add	r7, sp, #0
    7c2a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	681b      	ldr	r3, [r3, #0]
    7c30:	f043 0202 	orr.w	r2, r3, #2
    7c34:	687b      	ldr	r3, [r7, #4]
    7c36:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c38:	2103      	movs	r1, #3
    7c3a:	6878      	ldr	r0, [r7, #4]
    7c3c:	4b02      	ldr	r3, [pc, #8]	; (7c48 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    7c3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c40:	bf00      	nop
    7c42:	3708      	adds	r7, #8
    7c44:	46bd      	mov	sp, r7
    7c46:	bd80      	pop	{r7, pc}
    7c48:	00007a55 	.word	0x00007a55

00007c4c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7c4c:	b580      	push	{r7, lr}
    7c4e:	b084      	sub	sp, #16
    7c50:	af00      	add	r7, sp, #0
    7c52:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c54:	2103      	movs	r1, #3
    7c56:	6878      	ldr	r0, [r7, #4]
    7c58:	4b09      	ldr	r3, [pc, #36]	; (7c80 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    7c5a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	681b      	ldr	r3, [r3, #0]
    7c60:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7c62:	68fb      	ldr	r3, [r7, #12]
    7c64:	085b      	lsrs	r3, r3, #1
    7c66:	f003 0301 	and.w	r3, r3, #1
    7c6a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c6c:	68fb      	ldr	r3, [r7, #12]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	bf14      	ite	ne
    7c72:	2301      	movne	r3, #1
    7c74:	2300      	moveq	r3, #0
    7c76:	b2db      	uxtb	r3, r3
}
    7c78:	4618      	mov	r0, r3
    7c7a:	3710      	adds	r7, #16
    7c7c:	46bd      	mov	sp, r7
    7c7e:	bd80      	pop	{r7, pc}
    7c80:	00007a55 	.word	0x00007a55

00007c84 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c84:	b580      	push	{r7, lr}
    7c86:	b082      	sub	sp, #8
    7c88:	af00      	add	r7, sp, #0
    7c8a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	681b      	ldr	r3, [r3, #0]
    7c90:	f023 0202 	bic.w	r2, r3, #2
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c98:	2103      	movs	r1, #3
    7c9a:	6878      	ldr	r0, [r7, #4]
    7c9c:	4b02      	ldr	r3, [pc, #8]	; (7ca8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7c9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ca0:	bf00      	nop
    7ca2:	3708      	adds	r7, #8
    7ca4:	46bd      	mov	sp, r7
    7ca6:	bd80      	pop	{r7, pc}
    7ca8:	00007a55 	.word	0x00007a55

00007cac <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7cac:	b580      	push	{r7, lr}
    7cae:	b084      	sub	sp, #16
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
    7cb4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7cb6:	2103      	movs	r1, #3
    7cb8:	6878      	ldr	r0, [r7, #4]
    7cba:	4b07      	ldr	r3, [pc, #28]	; (7cd8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7cbc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7cbe:	687b      	ldr	r3, [r7, #4]
    7cc0:	681b      	ldr	r3, [r3, #0]
    7cc2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7cc4:	68fa      	ldr	r2, [r7, #12]
    7cc6:	683b      	ldr	r3, [r7, #0]
    7cc8:	4013      	ands	r3, r2
    7cca:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ccc:	68fb      	ldr	r3, [r7, #12]
}
    7cce:	4618      	mov	r0, r3
    7cd0:	3710      	adds	r7, #16
    7cd2:	46bd      	mov	sp, r7
    7cd4:	bd80      	pop	{r7, pc}
    7cd6:	bf00      	nop
    7cd8:	00007a55 	.word	0x00007a55

00007cdc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7cdc:	b580      	push	{r7, lr}
    7cde:	b082      	sub	sp, #8
    7ce0:	af00      	add	r7, sp, #0
    7ce2:	6078      	str	r0, [r7, #4]
    7ce4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7ce6:	687b      	ldr	r3, [r7, #4]
    7ce8:	683a      	ldr	r2, [r7, #0]
    7cea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7cec:	2103      	movs	r1, #3
    7cee:	6878      	ldr	r0, [r7, #4]
    7cf0:	4b02      	ldr	r3, [pc, #8]	; (7cfc <hri_sercomspi_write_CTRLA_reg+0x20>)
    7cf2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cf4:	bf00      	nop
    7cf6:	3708      	adds	r7, #8
    7cf8:	46bd      	mov	sp, r7
    7cfa:	bd80      	pop	{r7, pc}
    7cfc:	00007a55 	.word	0x00007a55

00007d00 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7d00:	b580      	push	{r7, lr}
    7d02:	b082      	sub	sp, #8
    7d04:	af00      	add	r7, sp, #0
    7d06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	685b      	ldr	r3, [r3, #4]
    7d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d14:	2104      	movs	r1, #4
    7d16:	6878      	ldr	r0, [r7, #4]
    7d18:	4b02      	ldr	r3, [pc, #8]	; (7d24 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7d1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d1c:	bf00      	nop
    7d1e:	3708      	adds	r7, #8
    7d20:	46bd      	mov	sp, r7
    7d22:	bd80      	pop	{r7, pc}
    7d24:	00007a09 	.word	0x00007a09

00007d28 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7d28:	b580      	push	{r7, lr}
    7d2a:	b082      	sub	sp, #8
    7d2c:	af00      	add	r7, sp, #0
    7d2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7d30:	687b      	ldr	r3, [r7, #4]
    7d32:	685b      	ldr	r3, [r3, #4]
    7d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    7d38:	687b      	ldr	r3, [r7, #4]
    7d3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d3c:	2104      	movs	r1, #4
    7d3e:	6878      	ldr	r0, [r7, #4]
    7d40:	4b02      	ldr	r3, [pc, #8]	; (7d4c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    7d42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d44:	bf00      	nop
    7d46:	3708      	adds	r7, #8
    7d48:	46bd      	mov	sp, r7
    7d4a:	bd80      	pop	{r7, pc}
    7d4c:	00007a09 	.word	0x00007a09

00007d50 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b082      	sub	sp, #8
    7d54:	af00      	add	r7, sp, #0
    7d56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	685b      	ldr	r3, [r3, #4]
    7d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d64:	2104      	movs	r1, #4
    7d66:	6878      	ldr	r0, [r7, #4]
    7d68:	4b02      	ldr	r3, [pc, #8]	; (7d74 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7d6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d6c:	bf00      	nop
    7d6e:	3708      	adds	r7, #8
    7d70:	46bd      	mov	sp, r7
    7d72:	bd80      	pop	{r7, pc}
    7d74:	00007a09 	.word	0x00007a09

00007d78 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7d78:	b580      	push	{r7, lr}
    7d7a:	b082      	sub	sp, #8
    7d7c:	af00      	add	r7, sp, #0
    7d7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7d80:	687b      	ldr	r3, [r7, #4]
    7d82:	685b      	ldr	r3, [r3, #4]
    7d84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7d88:	687b      	ldr	r3, [r7, #4]
    7d8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d8c:	2104      	movs	r1, #4
    7d8e:	6878      	ldr	r0, [r7, #4]
    7d90:	4b02      	ldr	r3, [pc, #8]	; (7d9c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7d92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d94:	bf00      	nop
    7d96:	3708      	adds	r7, #8
    7d98:	46bd      	mov	sp, r7
    7d9a:	bd80      	pop	{r7, pc}
    7d9c:	00007a09 	.word	0x00007a09

00007da0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7da0:	b580      	push	{r7, lr}
    7da2:	b082      	sub	sp, #8
    7da4:	af00      	add	r7, sp, #0
    7da6:	6078      	str	r0, [r7, #4]
    7da8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7daa:	687b      	ldr	r3, [r7, #4]
    7dac:	685a      	ldr	r2, [r3, #4]
    7dae:	683b      	ldr	r3, [r7, #0]
    7db0:	041b      	lsls	r3, r3, #16
    7db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    7db6:	431a      	orrs	r2, r3
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7dbc:	2104      	movs	r1, #4
    7dbe:	6878      	ldr	r0, [r7, #4]
    7dc0:	4b02      	ldr	r3, [pc, #8]	; (7dcc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    7dc2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dc4:	bf00      	nop
    7dc6:	3708      	adds	r7, #8
    7dc8:	46bd      	mov	sp, r7
    7dca:	bd80      	pop	{r7, pc}
    7dcc:	00007a09 	.word	0x00007a09

00007dd0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	b082      	sub	sp, #8
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	6078      	str	r0, [r7, #4]
    7dd8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	683a      	ldr	r2, [r7, #0]
    7dde:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7de0:	2104      	movs	r1, #4
    7de2:	6878      	ldr	r0, [r7, #4]
    7de4:	4b02      	ldr	r3, [pc, #8]	; (7df0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    7de6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7de8:	bf00      	nop
    7dea:	3708      	adds	r7, #8
    7dec:	46bd      	mov	sp, r7
    7dee:	bd80      	pop	{r7, pc}
    7df0:	00007a09 	.word	0x00007a09

00007df4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    7df4:	b580      	push	{r7, lr}
    7df6:	b082      	sub	sp, #8
    7df8:	af00      	add	r7, sp, #0
    7dfa:	6078      	str	r0, [r7, #4]
    7dfc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7dfe:	687b      	ldr	r3, [r7, #4]
    7e00:	683a      	ldr	r2, [r7, #0]
    7e02:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    7e04:	2117      	movs	r1, #23
    7e06:	6878      	ldr	r0, [r7, #4]
    7e08:	4b02      	ldr	r3, [pc, #8]	; (7e14 <hri_sercomspi_write_CTRLB_reg+0x20>)
    7e0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e0c:	bf00      	nop
    7e0e:	3708      	adds	r7, #8
    7e10:	46bd      	mov	sp, r7
    7e12:	bd80      	pop	{r7, pc}
    7e14:	00007a55 	.word	0x00007a55

00007e18 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7e18:	b480      	push	{r7}
    7e1a:	b083      	sub	sp, #12
    7e1c:	af00      	add	r7, sp, #0
    7e1e:	6078      	str	r0, [r7, #4]
    7e20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	683a      	ldr	r2, [r7, #0]
    7e26:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e28:	bf00      	nop
    7e2a:	370c      	adds	r7, #12
    7e2c:	46bd      	mov	sp, r7
    7e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e32:	4770      	bx	lr

00007e34 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    7e34:	b480      	push	{r7}
    7e36:	b083      	sub	sp, #12
    7e38:	af00      	add	r7, sp, #0
    7e3a:	6078      	str	r0, [r7, #4]
    7e3c:	460b      	mov	r3, r1
    7e3e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	78fa      	ldrb	r2, [r7, #3]
    7e44:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e46:	bf00      	nop
    7e48:	370c      	adds	r7, #12
    7e4a:	46bd      	mov	sp, r7
    7e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e50:	4770      	bx	lr
	...

00007e54 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    7e54:	b580      	push	{r7, lr}
    7e56:	b084      	sub	sp, #16
    7e58:	af00      	add	r7, sp, #0
    7e5a:	6078      	str	r0, [r7, #4]
    7e5c:	460b      	mov	r3, r1
    7e5e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7e60:	687b      	ldr	r3, [r7, #4]
    7e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7e64:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7e66:	68fb      	ldr	r3, [r7, #12]
    7e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    7e6c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7e6e:	78fb      	ldrb	r3, [r7, #3]
    7e70:	039b      	lsls	r3, r3, #14
    7e72:	461a      	mov	r2, r3
    7e74:	68fb      	ldr	r3, [r7, #12]
    7e76:	4313      	orrs	r3, r2
    7e78:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	68fa      	ldr	r2, [r7, #12]
    7e7e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e80:	2104      	movs	r1, #4
    7e82:	6878      	ldr	r0, [r7, #4]
    7e84:	4b02      	ldr	r3, [pc, #8]	; (7e90 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    7e86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e88:	bf00      	nop
    7e8a:	3710      	adds	r7, #16
    7e8c:	46bd      	mov	sp, r7
    7e8e:	bd80      	pop	{r7, pc}
    7e90:	00007a09 	.word	0x00007a09

00007e94 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    7e94:	b580      	push	{r7, lr}
    7e96:	b082      	sub	sp, #8
    7e98:	af00      	add	r7, sp, #0
    7e9a:	6078      	str	r0, [r7, #4]
    7e9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7e9e:	687b      	ldr	r3, [r7, #4]
    7ea0:	683a      	ldr	r2, [r7, #0]
    7ea2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ea4:	2104      	movs	r1, #4
    7ea6:	6878      	ldr	r0, [r7, #4]
    7ea8:	4b02      	ldr	r3, [pc, #8]	; (7eb4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7eaa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7eac:	bf00      	nop
    7eae:	3708      	adds	r7, #8
    7eb0:	46bd      	mov	sp, r7
    7eb2:	bd80      	pop	{r7, pc}
    7eb4:	00007a09 	.word	0x00007a09

00007eb8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b082      	sub	sp, #8
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ec0:	2104      	movs	r1, #4
    7ec2:	6878      	ldr	r0, [r7, #4]
    7ec4:	4b03      	ldr	r3, [pc, #12]	; (7ed4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    7ec6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7ecc:	4618      	mov	r0, r3
    7ece:	3708      	adds	r7, #8
    7ed0:	46bd      	mov	sp, r7
    7ed2:	bd80      	pop	{r7, pc}
    7ed4:	00007a09 	.word	0x00007a09

00007ed8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7ed8:	b480      	push	{r7}
    7eda:	b083      	sub	sp, #12
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
    7ee0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	683a      	ldr	r2, [r7, #0]
    7ee6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ee8:	bf00      	nop
    7eea:	370c      	adds	r7, #12
    7eec:	46bd      	mov	sp, r7
    7eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ef2:	4770      	bx	lr

00007ef4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    7ef4:	b580      	push	{r7, lr}
    7ef6:	b082      	sub	sp, #8
    7ef8:	af00      	add	r7, sp, #0
    7efa:	6078      	str	r0, [r7, #4]
    7efc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7efe:	687b      	ldr	r3, [r7, #4]
    7f00:	683a      	ldr	r2, [r7, #0]
    7f02:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f04:	2104      	movs	r1, #4
    7f06:	6878      	ldr	r0, [r7, #4]
    7f08:	4b02      	ldr	r3, [pc, #8]	; (7f14 <hri_sercomi2cm_write_DATA_reg+0x20>)
    7f0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f0c:	bf00      	nop
    7f0e:	3708      	adds	r7, #8
    7f10:	46bd      	mov	sp, r7
    7f12:	bd80      	pop	{r7, pc}
    7f14:	00007a09 	.word	0x00007a09

00007f18 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7f18:	b580      	push	{r7, lr}
    7f1a:	b082      	sub	sp, #8
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f20:	2104      	movs	r1, #4
    7f22:	6878      	ldr	r0, [r7, #4]
    7f24:	4b03      	ldr	r3, [pc, #12]	; (7f34 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    7f26:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7f28:	687b      	ldr	r3, [r7, #4]
    7f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7f2c:	4618      	mov	r0, r3
    7f2e:	3708      	adds	r7, #8
    7f30:	46bd      	mov	sp, r7
    7f32:	bd80      	pop	{r7, pc}
    7f34:	00007a09 	.word	0x00007a09

00007f38 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    7f38:	b480      	push	{r7}
    7f3a:	b083      	sub	sp, #12
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]
    7f40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	683a      	ldr	r2, [r7, #0]
    7f46:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f48:	bf00      	nop
    7f4a:	370c      	adds	r7, #12
    7f4c:	46bd      	mov	sp, r7
    7f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f52:	4770      	bx	lr

00007f54 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    7f54:	b480      	push	{r7}
    7f56:	b083      	sub	sp, #12
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7f60:	4618      	mov	r0, r3
    7f62:	370c      	adds	r7, #12
    7f64:	46bd      	mov	sp, r7
    7f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f6a:	4770      	bx	lr

00007f6c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    7f6c:	b480      	push	{r7}
    7f6e:	b083      	sub	sp, #12
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
    7f74:	460b      	mov	r3, r1
    7f76:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	78fa      	ldrb	r2, [r7, #3]
    7f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f80:	bf00      	nop
    7f82:	370c      	adds	r7, #12
    7f84:	46bd      	mov	sp, r7
    7f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8a:	4770      	bx	lr

00007f8c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    7f8c:	b480      	push	{r7}
    7f8e:	b083      	sub	sp, #12
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
    7f94:	460b      	mov	r3, r1
    7f96:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	887a      	ldrh	r2, [r7, #2]
    7f9c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f9e:	bf00      	nop
    7fa0:	370c      	adds	r7, #12
    7fa2:	46bd      	mov	sp, r7
    7fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fa8:	4770      	bx	lr
	...

00007fac <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b082      	sub	sp, #8
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7fb4:	2104      	movs	r1, #4
    7fb6:	6878      	ldr	r0, [r7, #4]
    7fb8:	4b06      	ldr	r3, [pc, #24]	; (7fd4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7fba:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	8b5b      	ldrh	r3, [r3, #26]
    7fc0:	b29b      	uxth	r3, r3
    7fc2:	091b      	lsrs	r3, r3, #4
    7fc4:	b29b      	uxth	r3, r3
    7fc6:	f003 0303 	and.w	r3, r3, #3
    7fca:	b29b      	uxth	r3, r3
}
    7fcc:	4618      	mov	r0, r3
    7fce:	3708      	adds	r7, #8
    7fd0:	46bd      	mov	sp, r7
    7fd2:	bd80      	pop	{r7, pc}
    7fd4:	00007a09 	.word	0x00007a09

00007fd8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7fe0:	2104      	movs	r1, #4
    7fe2:	6878      	ldr	r0, [r7, #4]
    7fe4:	4b04      	ldr	r3, [pc, #16]	; (7ff8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    7fe6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	8b5b      	ldrh	r3, [r3, #26]
    7fec:	b29b      	uxth	r3, r3
}
    7fee:	4618      	mov	r0, r3
    7ff0:	3708      	adds	r7, #8
    7ff2:	46bd      	mov	sp, r7
    7ff4:	bd80      	pop	{r7, pc}
    7ff6:	bf00      	nop
    7ff8:	00007a09 	.word	0x00007a09

00007ffc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7ffc:	b580      	push	{r7, lr}
    7ffe:	b082      	sub	sp, #8
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
    8004:	460b      	mov	r3, r1
    8006:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	887a      	ldrh	r2, [r7, #2]
    800c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    800e:	2104      	movs	r1, #4
    8010:	6878      	ldr	r0, [r7, #4]
    8012:	4b03      	ldr	r3, [pc, #12]	; (8020 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    8014:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8016:	bf00      	nop
    8018:	3708      	adds	r7, #8
    801a:	46bd      	mov	sp, r7
    801c:	bd80      	pop	{r7, pc}
    801e:	bf00      	nop
    8020:	00007a09 	.word	0x00007a09

00008024 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    8024:	b4b0      	push	{r4, r5, r7}
    8026:	b08d      	sub	sp, #52	; 0x34
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    802c:	4b13      	ldr	r3, [pc, #76]	; (807c <_sercom_get_hardware_index+0x58>)
    802e:	f107 040c 	add.w	r4, r7, #12
    8032:	461d      	mov	r5, r3
    8034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8038:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    803c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8040:	2300      	movs	r3, #0
    8042:	62fb      	str	r3, [r7, #44]	; 0x2c
    8044:	e010      	b.n	8068 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    8046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8048:	009b      	lsls	r3, r3, #2
    804a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    804e:	4413      	add	r3, r2
    8050:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8054:	461a      	mov	r2, r3
    8056:	687b      	ldr	r3, [r7, #4]
    8058:	429a      	cmp	r2, r3
    805a:	d102      	bne.n	8062 <_sercom_get_hardware_index+0x3e>
			return i;
    805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    805e:	b2db      	uxtb	r3, r3
    8060:	e006      	b.n	8070 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8064:	3301      	adds	r3, #1
    8066:	62fb      	str	r3, [r7, #44]	; 0x2c
    8068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    806a:	2b07      	cmp	r3, #7
    806c:	d9eb      	bls.n	8046 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    806e:	2300      	movs	r3, #0
}
    8070:	4618      	mov	r0, r3
    8072:	3734      	adds	r7, #52	; 0x34
    8074:	46bd      	mov	sp, r7
    8076:	bcb0      	pop	{r4, r5, r7}
    8078:	4770      	bx	lr
    807a:	bf00      	nop
    807c:	0001b944 	.word	0x0001b944

00008080 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    8080:	b580      	push	{r7, lr}
    8082:	b084      	sub	sp, #16
    8084:	af00      	add	r7, sp, #0
    8086:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    8088:	6878      	ldr	r0, [r7, #4]
    808a:	4b13      	ldr	r3, [pc, #76]	; (80d8 <_get_i2cm_index+0x58>)
    808c:	4798      	blx	r3
    808e:	4603      	mov	r3, r0
    8090:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8092:	2300      	movs	r3, #0
    8094:	73fb      	strb	r3, [r7, #15]
    8096:	e010      	b.n	80ba <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    8098:	7bfa      	ldrb	r2, [r7, #15]
    809a:	4910      	ldr	r1, [pc, #64]	; (80dc <_get_i2cm_index+0x5c>)
    809c:	4613      	mov	r3, r2
    809e:	005b      	lsls	r3, r3, #1
    80a0:	4413      	add	r3, r2
    80a2:	00db      	lsls	r3, r3, #3
    80a4:	440b      	add	r3, r1
    80a6:	781b      	ldrb	r3, [r3, #0]
    80a8:	7bba      	ldrb	r2, [r7, #14]
    80aa:	429a      	cmp	r2, r3
    80ac:	d102      	bne.n	80b4 <_get_i2cm_index+0x34>
			return i;
    80ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    80b2:	e00d      	b.n	80d0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    80b4:	7bfb      	ldrb	r3, [r7, #15]
    80b6:	3301      	adds	r3, #1
    80b8:	73fb      	strb	r3, [r7, #15]
    80ba:	7bfb      	ldrb	r3, [r7, #15]
    80bc:	2b02      	cmp	r3, #2
    80be:	d9eb      	bls.n	8098 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    80c0:	f240 32a6 	movw	r2, #934	; 0x3a6
    80c4:	4906      	ldr	r1, [pc, #24]	; (80e0 <_get_i2cm_index+0x60>)
    80c6:	2000      	movs	r0, #0
    80c8:	4b06      	ldr	r3, [pc, #24]	; (80e4 <_get_i2cm_index+0x64>)
    80ca:	4798      	blx	r3
	return -1;
    80cc:	f04f 33ff 	mov.w	r3, #4294967295
}
    80d0:	4618      	mov	r0, r3
    80d2:	3710      	adds	r7, #16
    80d4:	46bd      	mov	sp, r7
    80d6:	bd80      	pop	{r7, pc}
    80d8:	00008025 	.word	0x00008025
    80dc:	20000018 	.word	0x20000018
    80e0:	0001b928 	.word	0x0001b928
    80e4:	00004d25 	.word	0x00004d25

000080e8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    80e8:	b580      	push	{r7, lr}
    80ea:	b082      	sub	sp, #8
    80ec:	af00      	add	r7, sp, #0
    80ee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    80f0:	2103      	movs	r1, #3
    80f2:	6878      	ldr	r0, [r7, #4]
    80f4:	4b02      	ldr	r3, [pc, #8]	; (8100 <_sercom_i2c_send_stop+0x18>)
    80f6:	4798      	blx	r3
}
    80f8:	bf00      	nop
    80fa:	3708      	adds	r7, #8
    80fc:	46bd      	mov	sp, r7
    80fe:	bd80      	pop	{r7, pc}
    8100:	00007da1 	.word	0x00007da1

00008104 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8104:	b590      	push	{r4, r7, lr}
    8106:	b087      	sub	sp, #28
    8108:	af00      	add	r7, sp, #0
    810a:	60f8      	str	r0, [r7, #12]
    810c:	60b9      	str	r1, [r7, #8]
    810e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8110:	68f8      	ldr	r0, [r7, #12]
    8112:	4b7d      	ldr	r3, [pc, #500]	; (8308 <_sercom_i2c_sync_analyse_flags+0x204>)
    8114:	4798      	blx	r3
    8116:	4603      	mov	r3, r0
    8118:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    811a:	68f8      	ldr	r0, [r7, #12]
    811c:	4b7b      	ldr	r3, [pc, #492]	; (830c <_sercom_i2c_sync_analyse_flags+0x208>)
    811e:	4798      	blx	r3
    8120:	4603      	mov	r3, r0
    8122:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8124:	68bb      	ldr	r3, [r7, #8]
    8126:	f003 0301 	and.w	r3, r3, #1
    812a:	2b00      	cmp	r3, #0
    812c:	f000 8095 	beq.w	825a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8130:	8a7b      	ldrh	r3, [r7, #18]
    8132:	f003 0302 	and.w	r3, r3, #2
    8136:	2b00      	cmp	r3, #0
    8138:	d01d      	beq.n	8176 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    813a:	68f8      	ldr	r0, [r7, #12]
    813c:	4b74      	ldr	r3, [pc, #464]	; (8310 <_sercom_i2c_sync_analyse_flags+0x20c>)
    813e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	885b      	ldrh	r3, [r3, #2]
    8144:	b29b      	uxth	r3, r3
    8146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    814a:	b29a      	uxth	r2, r3
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	885b      	ldrh	r3, [r3, #2]
    8154:	b29b      	uxth	r3, r3
    8156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    815a:	b29a      	uxth	r2, r3
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8160:	8a7b      	ldrh	r3, [r7, #18]
    8162:	f003 0301 	and.w	r3, r3, #1
    8166:	2b00      	cmp	r3, #0
    8168:	d002      	beq.n	8170 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    816a:	f06f 0304 	mvn.w	r3, #4
    816e:	e0c6      	b.n	82fe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    8170:	f06f 0303 	mvn.w	r3, #3
    8174:	e0c3      	b.n	82fe <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    8176:	8a7b      	ldrh	r3, [r7, #18]
    8178:	f003 0304 	and.w	r3, r3, #4
    817c:	2b00      	cmp	r3, #0
    817e:	d01f      	beq.n	81c0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    8180:	687b      	ldr	r3, [r7, #4]
    8182:	685b      	ldr	r3, [r3, #4]
    8184:	2b00      	cmp	r3, #0
    8186:	dd07      	ble.n	8198 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	885b      	ldrh	r3, [r3, #2]
    818c:	b29b      	uxth	r3, r3
    818e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8192:	b29a      	uxth	r2, r3
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    8198:	687b      	ldr	r3, [r7, #4]
    819a:	885b      	ldrh	r3, [r3, #2]
    819c:	b29b      	uxth	r3, r3
    819e:	b21b      	sxth	r3, r3
    81a0:	2b00      	cmp	r3, #0
    81a2:	da02      	bge.n	81aa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    81a4:	68f8      	ldr	r0, [r7, #12]
    81a6:	4b5b      	ldr	r3, [pc, #364]	; (8314 <_sercom_i2c_sync_analyse_flags+0x210>)
    81a8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    81aa:	687b      	ldr	r3, [r7, #4]
    81ac:	885b      	ldrh	r3, [r3, #2]
    81ae:	b29b      	uxth	r3, r3
    81b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    81b4:	b29a      	uxth	r2, r3
    81b6:	687b      	ldr	r3, [r7, #4]
    81b8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    81ba:	f06f 0301 	mvn.w	r3, #1
    81be:	e09e      	b.n	82fe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    81c0:	687b      	ldr	r3, [r7, #4]
    81c2:	885b      	ldrh	r3, [r3, #2]
    81c4:	b29b      	uxth	r3, r3
    81c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    81ca:	2b00      	cmp	r3, #0
    81cc:	d01c      	beq.n	8208 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	881b      	ldrh	r3, [r3, #0]
    81d2:	121b      	asrs	r3, r3, #8
    81d4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    81d6:	f003 0406 	and.w	r4, r3, #6
    81da:	68f8      	ldr	r0, [r7, #12]
    81dc:	4b4e      	ldr	r3, [pc, #312]	; (8318 <_sercom_i2c_sync_analyse_flags+0x214>)
    81de:	4798      	blx	r3
    81e0:	4603      	mov	r3, r0
    81e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    81e6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    81e8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    81ec:	4619      	mov	r1, r3
    81ee:	68f8      	ldr	r0, [r7, #12]
    81f0:	4b4a      	ldr	r3, [pc, #296]	; (831c <_sercom_i2c_sync_analyse_flags+0x218>)
    81f2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    81f4:	687b      	ldr	r3, [r7, #4]
    81f6:	885b      	ldrh	r3, [r3, #2]
    81f8:	b29b      	uxth	r3, r3
    81fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    81fe:	b29a      	uxth	r2, r3
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8204:	2300      	movs	r3, #0
    8206:	e07a      	b.n	82fe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	685b      	ldr	r3, [r3, #4]
    820c:	2b00      	cmp	r3, #0
    820e:	d111      	bne.n	8234 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	885b      	ldrh	r3, [r3, #2]
    8214:	b29b      	uxth	r3, r3
    8216:	b21b      	sxth	r3, r3
    8218:	2b00      	cmp	r3, #0
    821a:	da02      	bge.n	8222 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    821c:	68f8      	ldr	r0, [r7, #12]
    821e:	4b3d      	ldr	r3, [pc, #244]	; (8314 <_sercom_i2c_sync_analyse_flags+0x210>)
    8220:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8222:	687b      	ldr	r3, [r7, #4]
    8224:	885b      	ldrh	r3, [r3, #2]
    8226:	b29b      	uxth	r3, r3
    8228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    822c:	b29a      	uxth	r2, r3
    822e:	687b      	ldr	r3, [r7, #4]
    8230:	805a      	strh	r2, [r3, #2]
    8232:	e010      	b.n	8256 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8234:	687b      	ldr	r3, [r7, #4]
    8236:	689b      	ldr	r3, [r3, #8]
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	4619      	mov	r1, r3
    823c:	68f8      	ldr	r0, [r7, #12]
    823e:	4b38      	ldr	r3, [pc, #224]	; (8320 <_sercom_i2c_sync_analyse_flags+0x21c>)
    8240:	4798      	blx	r3
				msg->buffer++;
    8242:	687b      	ldr	r3, [r7, #4]
    8244:	689b      	ldr	r3, [r3, #8]
    8246:	1c5a      	adds	r2, r3, #1
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	609a      	str	r2, [r3, #8]
				msg->len--;
    824c:	687b      	ldr	r3, [r7, #4]
    824e:	685b      	ldr	r3, [r3, #4]
    8250:	1e5a      	subs	r2, r3, #1
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    8256:	2300      	movs	r3, #0
    8258:	e051      	b.n	82fe <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    825a:	68bb      	ldr	r3, [r7, #8]
    825c:	f003 0302 	and.w	r3, r3, #2
    8260:	2b00      	cmp	r3, #0
    8262:	d04b      	beq.n	82fc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    8264:	687b      	ldr	r3, [r7, #4]
    8266:	685b      	ldr	r3, [r3, #4]
    8268:	2b00      	cmp	r3, #0
    826a:	d041      	beq.n	82f0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    826c:	8a7b      	ldrh	r3, [r7, #18]
    826e:	f003 0304 	and.w	r3, r3, #4
    8272:	2b00      	cmp	r3, #0
    8274:	d13c      	bne.n	82f0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	685b      	ldr	r3, [r3, #4]
    827a:	1e5a      	subs	r2, r3, #1
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	685b      	ldr	r3, [r3, #4]
    8284:	2b00      	cmp	r3, #0
    8286:	d102      	bne.n	828e <_sercom_i2c_sync_analyse_flags+0x18a>
    8288:	697b      	ldr	r3, [r7, #20]
    828a:	2b00      	cmp	r3, #0
    828c:	d006      	beq.n	829c <_sercom_i2c_sync_analyse_flags+0x198>
    828e:	687b      	ldr	r3, [r7, #4]
    8290:	685b      	ldr	r3, [r3, #4]
    8292:	2b01      	cmp	r3, #1
    8294:	d105      	bne.n	82a2 <_sercom_i2c_sync_analyse_flags+0x19e>
    8296:	697b      	ldr	r3, [r7, #20]
    8298:	2b00      	cmp	r3, #0
    829a:	d002      	beq.n	82a2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    829c:	68f8      	ldr	r0, [r7, #12]
    829e:	4b21      	ldr	r3, [pc, #132]	; (8324 <_sercom_i2c_sync_analyse_flags+0x220>)
    82a0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    82a2:	687b      	ldr	r3, [r7, #4]
    82a4:	685b      	ldr	r3, [r3, #4]
    82a6:	2b00      	cmp	r3, #0
    82a8:	d113      	bne.n	82d2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    82aa:	687b      	ldr	r3, [r7, #4]
    82ac:	885b      	ldrh	r3, [r3, #2]
    82ae:	b29b      	uxth	r3, r3
    82b0:	b21b      	sxth	r3, r3
    82b2:	2b00      	cmp	r3, #0
    82b4:	da05      	bge.n	82c2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    82b6:	68f8      	ldr	r0, [r7, #12]
    82b8:	4b1b      	ldr	r3, [pc, #108]	; (8328 <_sercom_i2c_sync_analyse_flags+0x224>)
    82ba:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    82bc:	68f8      	ldr	r0, [r7, #12]
    82be:	4b15      	ldr	r3, [pc, #84]	; (8314 <_sercom_i2c_sync_analyse_flags+0x210>)
    82c0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    82c2:	687b      	ldr	r3, [r7, #4]
    82c4:	885b      	ldrh	r3, [r3, #2]
    82c6:	b29b      	uxth	r3, r3
    82c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    82cc:	b29a      	uxth	r2, r3
    82ce:	687b      	ldr	r3, [r7, #4]
    82d0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    82d2:	687b      	ldr	r3, [r7, #4]
    82d4:	689c      	ldr	r4, [r3, #8]
    82d6:	1c62      	adds	r2, r4, #1
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	609a      	str	r2, [r3, #8]
    82dc:	68f8      	ldr	r0, [r7, #12]
    82de:	4b13      	ldr	r3, [pc, #76]	; (832c <_sercom_i2c_sync_analyse_flags+0x228>)
    82e0:	4798      	blx	r3
    82e2:	4603      	mov	r3, r0
    82e4:	b2db      	uxtb	r3, r3
    82e6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    82e8:	68f8      	ldr	r0, [r7, #12]
    82ea:	4b11      	ldr	r3, [pc, #68]	; (8330 <_sercom_i2c_sync_analyse_flags+0x22c>)
    82ec:	4798      	blx	r3
    82ee:	e005      	b.n	82fc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    82f0:	68f8      	ldr	r0, [r7, #12]
    82f2:	4b0f      	ldr	r3, [pc, #60]	; (8330 <_sercom_i2c_sync_analyse_flags+0x22c>)
    82f4:	4798      	blx	r3
			return I2C_NACK;
    82f6:	f06f 0301 	mvn.w	r3, #1
    82fa:	e000      	b.n	82fe <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    82fc:	2300      	movs	r3, #0
}
    82fe:	4618      	mov	r0, r3
    8300:	371c      	adds	r7, #28
    8302:	46bd      	mov	sp, r7
    8304:	bd90      	pop	{r4, r7, pc}
    8306:	bf00      	nop
    8308:	00007ba1 	.word	0x00007ba1
    830c:	00007fd9 	.word	0x00007fd9
    8310:	00007aa1 	.word	0x00007aa1
    8314:	000080e9 	.word	0x000080e9
    8318:	00007eb9 	.word	0x00007eb9
    831c:	00007e95 	.word	0x00007e95
    8320:	00007ef5 	.word	0x00007ef5
    8324:	00007d51 	.word	0x00007d51
    8328:	00007d29 	.word	0x00007d29
    832c:	00007f19 	.word	0x00007f19
    8330:	00007abb 	.word	0x00007abb

00008334 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
    833c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    833e:	687b      	ldr	r3, [r7, #4]
    8340:	2b00      	cmp	r3, #0
    8342:	bf14      	ite	ne
    8344:	2301      	movne	r3, #1
    8346:	2300      	moveq	r3, #0
    8348:	b2db      	uxtb	r3, r3
    834a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    834e:	4908      	ldr	r1, [pc, #32]	; (8370 <_i2c_m_sync_init+0x3c>)
    8350:	4618      	mov	r0, r3
    8352:	4b08      	ldr	r3, [pc, #32]	; (8374 <_i2c_m_sync_init+0x40>)
    8354:	4798      	blx	r3

	i2c_dev->hw = hw;
    8356:	687b      	ldr	r3, [r7, #4]
    8358:	683a      	ldr	r2, [r7, #0]
    835a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    835c:	687b      	ldr	r3, [r7, #4]
    835e:	6839      	ldr	r1, [r7, #0]
    8360:	4618      	mov	r0, r3
    8362:	4b05      	ldr	r3, [pc, #20]	; (8378 <_i2c_m_sync_init+0x44>)
    8364:	4798      	blx	r3
    8366:	4603      	mov	r3, r0
}
    8368:	4618      	mov	r0, r3
    836a:	3708      	adds	r7, #8
    836c:	46bd      	mov	sp, r7
    836e:	bd80      	pop	{r7, pc}
    8370:	0001b928 	.word	0x0001b928
    8374:	00004d25 	.word	0x00004d25
    8378:	0000874d 	.word	0x0000874d

0000837c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    837c:	b580      	push	{r7, lr}
    837e:	b082      	sub	sp, #8
    8380:	af00      	add	r7, sp, #0
    8382:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    8384:	687b      	ldr	r3, [r7, #4]
    8386:	2b00      	cmp	r3, #0
    8388:	bf14      	ite	ne
    838a:	2301      	movne	r3, #1
    838c:	2300      	moveq	r3, #0
    838e:	b2db      	uxtb	r3, r3
    8390:	f240 5235 	movw	r2, #1333	; 0x535
    8394:	4906      	ldr	r1, [pc, #24]	; (83b0 <_i2c_m_sync_enable+0x34>)
    8396:	4618      	mov	r0, r3
    8398:	4b06      	ldr	r3, [pc, #24]	; (83b4 <_i2c_m_sync_enable+0x38>)
    839a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    839c:	687b      	ldr	r3, [r7, #4]
    839e:	691b      	ldr	r3, [r3, #16]
    83a0:	4618      	mov	r0, r3
    83a2:	4b05      	ldr	r3, [pc, #20]	; (83b8 <_i2c_m_sync_enable+0x3c>)
    83a4:	4798      	blx	r3
    83a6:	4603      	mov	r3, r0
}
    83a8:	4618      	mov	r0, r3
    83aa:	3708      	adds	r7, #8
    83ac:	46bd      	mov	sp, r7
    83ae:	bd80      	pop	{r7, pc}
    83b0:	0001b928 	.word	0x0001b928
    83b4:	00004d25 	.word	0x00004d25
    83b8:	000086c1 	.word	0x000086c1

000083bc <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    83bc:	b580      	push	{r7, lr}
    83be:	b084      	sub	sp, #16
    83c0:	af00      	add	r7, sp, #0
    83c2:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    83c4:	687b      	ldr	r3, [r7, #4]
    83c6:	691b      	ldr	r3, [r3, #16]
    83c8:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    83ca:	687b      	ldr	r3, [r7, #4]
    83cc:	2b00      	cmp	r3, #0
    83ce:	bf14      	ite	ne
    83d0:	2301      	movne	r3, #1
    83d2:	2300      	moveq	r3, #0
    83d4:	b2db      	uxtb	r3, r3
    83d6:	f240 5243 	movw	r2, #1347	; 0x543
    83da:	490c      	ldr	r1, [pc, #48]	; (840c <_i2c_m_sync_disable+0x50>)
    83dc:	4618      	mov	r0, r3
    83de:	4b0c      	ldr	r3, [pc, #48]	; (8410 <_i2c_m_sync_disable+0x54>)
    83e0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    83e2:	687b      	ldr	r3, [r7, #4]
    83e4:	691b      	ldr	r3, [r3, #16]
    83e6:	2b00      	cmp	r3, #0
    83e8:	bf14      	ite	ne
    83ea:	2301      	movne	r3, #1
    83ec:	2300      	moveq	r3, #0
    83ee:	b2db      	uxtb	r3, r3
    83f0:	f240 5244 	movw	r2, #1348	; 0x544
    83f4:	4905      	ldr	r1, [pc, #20]	; (840c <_i2c_m_sync_disable+0x50>)
    83f6:	4618      	mov	r0, r3
    83f8:	4b05      	ldr	r3, [pc, #20]	; (8410 <_i2c_m_sync_disable+0x54>)
    83fa:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    83fc:	68f8      	ldr	r0, [r7, #12]
    83fe:	4b05      	ldr	r3, [pc, #20]	; (8414 <_i2c_m_sync_disable+0x58>)
    8400:	4798      	blx	r3

	return ERR_NONE;
    8402:	2300      	movs	r3, #0
}
    8404:	4618      	mov	r0, r3
    8406:	3710      	adds	r7, #16
    8408:	46bd      	mov	sp, r7
    840a:	bd80      	pop	{r7, pc}
    840c:	0001b928 	.word	0x0001b928
    8410:	00004d25 	.word	0x00004d25
    8414:	00007b79 	.word	0x00007b79

00008418 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    8418:	b580      	push	{r7, lr}
    841a:	b084      	sub	sp, #16
    841c:	af00      	add	r7, sp, #0
    841e:	6078      	str	r0, [r7, #4]
    8420:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    8422:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8426:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	691b      	ldr	r3, [r3, #16]
    842c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    842e:	68b8      	ldr	r0, [r7, #8]
    8430:	4b0f      	ldr	r3, [pc, #60]	; (8470 <_sercom_i2c_sync_wait_bus+0x58>)
    8432:	4798      	blx	r3
    8434:	4603      	mov	r3, r0
    8436:	461a      	mov	r2, r3
    8438:	683b      	ldr	r3, [r7, #0]
    843a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    843c:	68fb      	ldr	r3, [r7, #12]
    843e:	1e5a      	subs	r2, r3, #1
    8440:	60fa      	str	r2, [r7, #12]
    8442:	2b00      	cmp	r3, #0
    8444:	d102      	bne.n	844c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    8446:	f06f 0304 	mvn.w	r3, #4
    844a:	e00c      	b.n	8466 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    844c:	683b      	ldr	r3, [r7, #0]
    844e:	681b      	ldr	r3, [r3, #0]
    8450:	f003 0301 	and.w	r3, r3, #1
    8454:	2b00      	cmp	r3, #0
    8456:	d105      	bne.n	8464 <_sercom_i2c_sync_wait_bus+0x4c>
    8458:	683b      	ldr	r3, [r7, #0]
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	f003 0302 	and.w	r3, r3, #2
    8460:	2b00      	cmp	r3, #0
    8462:	d0e4      	beq.n	842e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    8464:	2300      	movs	r3, #0
}
    8466:	4618      	mov	r0, r3
    8468:	3710      	adds	r7, #16
    846a:	46bd      	mov	sp, r7
    846c:	bd80      	pop	{r7, pc}
    846e:	bf00      	nop
    8470:	00007ad5 	.word	0x00007ad5

00008474 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    8474:	b590      	push	{r4, r7, lr}
    8476:	b087      	sub	sp, #28
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	691b      	ldr	r3, [r3, #16]
    8480:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    8482:	687b      	ldr	r3, [r7, #4]
    8484:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8486:	6978      	ldr	r0, [r7, #20]
    8488:	4b39      	ldr	r3, [pc, #228]	; (8570 <_sercom_i2c_sync_send_address+0xfc>)
    848a:	4798      	blx	r3
    848c:	4603      	mov	r3, r0
    848e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	2b00      	cmp	r3, #0
    8494:	bf14      	ite	ne
    8496:	2301      	movne	r3, #1
    8498:	2300      	moveq	r3, #0
    849a:	b2db      	uxtb	r3, r3
    849c:	f240 52a5 	movw	r2, #1445	; 0x5a5
    84a0:	4934      	ldr	r1, [pc, #208]	; (8574 <_sercom_i2c_sync_send_address+0x100>)
    84a2:	4618      	mov	r0, r3
    84a4:	4b34      	ldr	r3, [pc, #208]	; (8578 <_sercom_i2c_sync_send_address+0x104>)
    84a6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    84a8:	693b      	ldr	r3, [r7, #16]
    84aa:	685b      	ldr	r3, [r3, #4]
    84ac:	2b01      	cmp	r3, #1
    84ae:	d106      	bne.n	84be <_sercom_i2c_sync_send_address+0x4a>
    84b0:	68fb      	ldr	r3, [r7, #12]
    84b2:	2b00      	cmp	r3, #0
    84b4:	d003      	beq.n	84be <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    84b6:	6978      	ldr	r0, [r7, #20]
    84b8:	4b30      	ldr	r3, [pc, #192]	; (857c <_sercom_i2c_sync_send_address+0x108>)
    84ba:	4798      	blx	r3
    84bc:	e002      	b.n	84c4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    84be:	6978      	ldr	r0, [r7, #20]
    84c0:	4b2f      	ldr	r3, [pc, #188]	; (8580 <_sercom_i2c_sync_send_address+0x10c>)
    84c2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    84c4:	693b      	ldr	r3, [r7, #16]
    84c6:	881b      	ldrh	r3, [r3, #0]
    84c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    84cc:	2b00      	cmp	r3, #0
    84ce:	d022      	beq.n	8516 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    84d0:	693b      	ldr	r3, [r7, #16]
    84d2:	885b      	ldrh	r3, [r3, #2]
    84d4:	b29b      	uxth	r3, r3
    84d6:	f003 0301 	and.w	r3, r3, #1
    84da:	2b00      	cmp	r3, #0
    84dc:	d007      	beq.n	84ee <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    84de:	693b      	ldr	r3, [r7, #16]
    84e0:	885b      	ldrh	r3, [r3, #2]
    84e2:	b29b      	uxth	r3, r3
    84e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    84e8:	b29a      	uxth	r2, r3
    84ea:	693b      	ldr	r3, [r7, #16]
    84ec:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    84ee:	693b      	ldr	r3, [r7, #16]
    84f0:	881b      	ldrh	r3, [r3, #0]
    84f2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    84f4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    84f8:	401c      	ands	r4, r3
    84fa:	6978      	ldr	r0, [r7, #20]
    84fc:	4b21      	ldr	r3, [pc, #132]	; (8584 <_sercom_i2c_sync_send_address+0x110>)
    84fe:	4798      	blx	r3
    8500:	4603      	mov	r3, r0
    8502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8506:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    8508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    850c:	4619      	mov	r1, r3
    850e:	6978      	ldr	r0, [r7, #20]
    8510:	4b1d      	ldr	r3, [pc, #116]	; (8588 <_sercom_i2c_sync_send_address+0x114>)
    8512:	4798      	blx	r3
    8514:	e01a      	b.n	854c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8516:	693b      	ldr	r3, [r7, #16]
    8518:	881b      	ldrh	r3, [r3, #0]
    851a:	005b      	lsls	r3, r3, #1
    851c:	b2db      	uxtb	r3, r3
    851e:	693a      	ldr	r2, [r7, #16]
    8520:	8852      	ldrh	r2, [r2, #2]
    8522:	b292      	uxth	r2, r2
    8524:	f002 0201 	and.w	r2, r2, #1
    8528:	2a00      	cmp	r2, #0
    852a:	bf14      	ite	ne
    852c:	2201      	movne	r2, #1
    852e:	2200      	moveq	r2, #0
    8530:	b2d2      	uxtb	r2, r2
    8532:	4313      	orrs	r3, r2
    8534:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8536:	6978      	ldr	r0, [r7, #20]
    8538:	4b12      	ldr	r3, [pc, #72]	; (8584 <_sercom_i2c_sync_send_address+0x110>)
    853a:	4798      	blx	r3
    853c:	4603      	mov	r3, r0
    853e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8542:	4323      	orrs	r3, r4
    8544:	4619      	mov	r1, r3
    8546:	6978      	ldr	r0, [r7, #20]
    8548:	4b0f      	ldr	r3, [pc, #60]	; (8588 <_sercom_i2c_sync_send_address+0x114>)
    854a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    854c:	f107 0308 	add.w	r3, r7, #8
    8550:	4619      	mov	r1, r3
    8552:	6878      	ldr	r0, [r7, #4]
    8554:	4b0d      	ldr	r3, [pc, #52]	; (858c <_sercom_i2c_sync_send_address+0x118>)
    8556:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    8558:	68bb      	ldr	r3, [r7, #8]
    855a:	693a      	ldr	r2, [r7, #16]
    855c:	4619      	mov	r1, r3
    855e:	6978      	ldr	r0, [r7, #20]
    8560:	4b0b      	ldr	r3, [pc, #44]	; (8590 <_sercom_i2c_sync_send_address+0x11c>)
    8562:	4798      	blx	r3
    8564:	4603      	mov	r3, r0
}
    8566:	4618      	mov	r0, r3
    8568:	371c      	adds	r7, #28
    856a:	46bd      	mov	sp, r7
    856c:	bd90      	pop	{r4, r7, pc}
    856e:	bf00      	nop
    8570:	00007ba1 	.word	0x00007ba1
    8574:	0001b928 	.word	0x0001b928
    8578:	00004d25 	.word	0x00004d25
    857c:	00007d51 	.word	0x00007d51
    8580:	00007d79 	.word	0x00007d79
    8584:	00007eb9 	.word	0x00007eb9
    8588:	00007e95 	.word	0x00007e95
    858c:	00008419 	.word	0x00008419
    8590:	00008105 	.word	0x00008105

00008594 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    8594:	b580      	push	{r7, lr}
    8596:	b086      	sub	sp, #24
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	691b      	ldr	r3, [r3, #16]
    85a2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    85a4:	687b      	ldr	r3, [r7, #4]
    85a6:	2b00      	cmp	r3, #0
    85a8:	bf14      	ite	ne
    85aa:	2301      	movne	r3, #1
    85ac:	2300      	moveq	r3, #0
    85ae:	b2db      	uxtb	r3, r3
    85b0:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    85b4:	493b      	ldr	r1, [pc, #236]	; (86a4 <_i2c_m_sync_transfer+0x110>)
    85b6:	4618      	mov	r0, r3
    85b8:	4b3b      	ldr	r3, [pc, #236]	; (86a8 <_i2c_m_sync_transfer+0x114>)
    85ba:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	691b      	ldr	r3, [r3, #16]
    85c0:	2b00      	cmp	r3, #0
    85c2:	bf14      	ite	ne
    85c4:	2301      	movne	r3, #1
    85c6:	2300      	moveq	r3, #0
    85c8:	b2db      	uxtb	r3, r3
    85ca:	f240 52d1 	movw	r2, #1489	; 0x5d1
    85ce:	4935      	ldr	r1, [pc, #212]	; (86a4 <_i2c_m_sync_transfer+0x110>)
    85d0:	4618      	mov	r0, r3
    85d2:	4b35      	ldr	r3, [pc, #212]	; (86a8 <_i2c_m_sync_transfer+0x114>)
    85d4:	4798      	blx	r3
	ASSERT(msg);
    85d6:	683b      	ldr	r3, [r7, #0]
    85d8:	2b00      	cmp	r3, #0
    85da:	bf14      	ite	ne
    85dc:	2301      	movne	r3, #1
    85de:	2300      	moveq	r3, #0
    85e0:	b2db      	uxtb	r3, r3
    85e2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    85e6:	492f      	ldr	r1, [pc, #188]	; (86a4 <_i2c_m_sync_transfer+0x110>)
    85e8:	4618      	mov	r0, r3
    85ea:	4b2f      	ldr	r3, [pc, #188]	; (86a8 <_i2c_m_sync_transfer+0x114>)
    85ec:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    85ee:	687b      	ldr	r3, [r7, #4]
    85f0:	885b      	ldrh	r3, [r3, #2]
    85f2:	b29b      	uxth	r3, r3
    85f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    85f8:	2b00      	cmp	r3, #0
    85fa:	d002      	beq.n	8602 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    85fc:	f06f 0305 	mvn.w	r3, #5
    8600:	e04c      	b.n	869c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    8602:	683b      	ldr	r3, [r7, #0]
    8604:	885b      	ldrh	r3, [r3, #2]
    8606:	b29b      	uxth	r3, r3
    8608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    860c:	b29a      	uxth	r2, r3
    860e:	683b      	ldr	r3, [r7, #0]
    8610:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    8612:	687b      	ldr	r3, [r7, #4]
    8614:	683a      	ldr	r2, [r7, #0]
    8616:	ca07      	ldmia	r2, {r0, r1, r2}
    8618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    861c:	6938      	ldr	r0, [r7, #16]
    861e:	4b23      	ldr	r3, [pc, #140]	; (86ac <_i2c_m_sync_transfer+0x118>)
    8620:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    8622:	6878      	ldr	r0, [r7, #4]
    8624:	4b22      	ldr	r3, [pc, #136]	; (86b0 <_i2c_m_sync_transfer+0x11c>)
    8626:	4798      	blx	r3
    8628:	6178      	str	r0, [r7, #20]

	if (ret) {
    862a:	697b      	ldr	r3, [r7, #20]
    862c:	2b00      	cmp	r3, #0
    862e:	d02d      	beq.n	868c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	885b      	ldrh	r3, [r3, #2]
    8634:	b29b      	uxth	r3, r3
    8636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    863a:	b29a      	uxth	r2, r3
    863c:	687b      	ldr	r3, [r7, #4]
    863e:	805a      	strh	r2, [r3, #2]

		return ret;
    8640:	697b      	ldr	r3, [r7, #20]
    8642:	e02b      	b.n	869c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8644:	f107 030c 	add.w	r3, r7, #12
    8648:	4619      	mov	r1, r3
    864a:	6878      	ldr	r0, [r7, #4]
    864c:	4b19      	ldr	r3, [pc, #100]	; (86b4 <_i2c_m_sync_transfer+0x120>)
    864e:	4798      	blx	r3
    8650:	6178      	str	r0, [r7, #20]

		if (ret) {
    8652:	697b      	ldr	r3, [r7, #20]
    8654:	2b00      	cmp	r3, #0
    8656:	d012      	beq.n	867e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    8658:	683b      	ldr	r3, [r7, #0]
    865a:	885b      	ldrh	r3, [r3, #2]
    865c:	b29b      	uxth	r3, r3
    865e:	b21b      	sxth	r3, r3
    8660:	2b00      	cmp	r3, #0
    8662:	da02      	bge.n	866a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    8664:	6938      	ldr	r0, [r7, #16]
    8666:	4b14      	ldr	r3, [pc, #80]	; (86b8 <_i2c_m_sync_transfer+0x124>)
    8668:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    866a:	687b      	ldr	r3, [r7, #4]
    866c:	885b      	ldrh	r3, [r3, #2]
    866e:	b29b      	uxth	r3, r3
    8670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8674:	b29a      	uxth	r2, r3
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	805a      	strh	r2, [r3, #2]

			return ret;
    867a:	697b      	ldr	r3, [r7, #20]
    867c:	e00e      	b.n	869c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    867e:	68fb      	ldr	r3, [r7, #12]
    8680:	687a      	ldr	r2, [r7, #4]
    8682:	4619      	mov	r1, r3
    8684:	6938      	ldr	r0, [r7, #16]
    8686:	4b0d      	ldr	r3, [pc, #52]	; (86bc <_i2c_m_sync_transfer+0x128>)
    8688:	4798      	blx	r3
    868a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	885b      	ldrh	r3, [r3, #2]
    8690:	b29b      	uxth	r3, r3
    8692:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8696:	2b00      	cmp	r3, #0
    8698:	d1d4      	bne.n	8644 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    869a:	697b      	ldr	r3, [r7, #20]
}
    869c:	4618      	mov	r0, r3
    869e:	3718      	adds	r7, #24
    86a0:	46bd      	mov	sp, r7
    86a2:	bd80      	pop	{r7, pc}
    86a4:	0001b928 	.word	0x0001b928
    86a8:	00004d25 	.word	0x00004d25
    86ac:	00007d01 	.word	0x00007d01
    86b0:	00008475 	.word	0x00008475
    86b4:	00008419 	.word	0x00008419
    86b8:	000080e9 	.word	0x000080e9
    86bc:	00008105 	.word	0x00008105

000086c0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    86c0:	b580      	push	{r7, lr}
    86c2:	b084      	sub	sp, #16
    86c4:	af00      	add	r7, sp, #0
    86c6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    86c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86cc:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    86ce:	2304      	movs	r3, #4
    86d0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	2b00      	cmp	r3, #0
    86d6:	bf14      	ite	ne
    86d8:	2301      	movne	r3, #1
    86da:	2300      	moveq	r3, #0
    86dc:	b2db      	uxtb	r3, r3
    86de:	f240 6205 	movw	r2, #1541	; 0x605
    86e2:	4915      	ldr	r1, [pc, #84]	; (8738 <_i2c_m_enable_implementation+0x78>)
    86e4:	4618      	mov	r0, r3
    86e6:	4b15      	ldr	r3, [pc, #84]	; (873c <_i2c_m_enable_implementation+0x7c>)
    86e8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    86ea:	6878      	ldr	r0, [r7, #4]
    86ec:	4b14      	ldr	r3, [pc, #80]	; (8740 <_i2c_m_enable_implementation+0x80>)
    86ee:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    86f0:	e016      	b.n	8720 <_i2c_m_enable_implementation+0x60>
		timeout--;
    86f2:	68fb      	ldr	r3, [r7, #12]
    86f4:	3b01      	subs	r3, #1
    86f6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    86f8:	68fb      	ldr	r3, [r7, #12]
    86fa:	2b00      	cmp	r3, #0
    86fc:	dc10      	bgt.n	8720 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    86fe:	68bb      	ldr	r3, [r7, #8]
    8700:	3b01      	subs	r3, #1
    8702:	60bb      	str	r3, [r7, #8]
    8704:	68bb      	ldr	r3, [r7, #8]
    8706:	2b00      	cmp	r3, #0
    8708:	d007      	beq.n	871a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    870a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    870e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    8710:	2110      	movs	r1, #16
    8712:	6878      	ldr	r0, [r7, #4]
    8714:	4b0b      	ldr	r3, [pc, #44]	; (8744 <_i2c_m_enable_implementation+0x84>)
    8716:	4798      	blx	r3
    8718:	e002      	b.n	8720 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    871a:	f06f 0305 	mvn.w	r3, #5
    871e:	e006      	b.n	872e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    8720:	6878      	ldr	r0, [r7, #4]
    8722:	4b09      	ldr	r3, [pc, #36]	; (8748 <_i2c_m_enable_implementation+0x88>)
    8724:	4798      	blx	r3
    8726:	4603      	mov	r3, r0
    8728:	2b01      	cmp	r3, #1
    872a:	d1e2      	bne.n	86f2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    872c:	2300      	movs	r3, #0
}
    872e:	4618      	mov	r0, r3
    8730:	3710      	adds	r7, #16
    8732:	46bd      	mov	sp, r7
    8734:	bd80      	pop	{r7, pc}
    8736:	bf00      	nop
    8738:	0001b928 	.word	0x0001b928
    873c:	00004d25 	.word	0x00004d25
    8740:	00007b51 	.word	0x00007b51
    8744:	00007ffd 	.word	0x00007ffd
    8748:	00007fad 	.word	0x00007fad

0000874c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    874c:	b580      	push	{r7, lr}
    874e:	b084      	sub	sp, #16
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
    8754:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    8756:	6838      	ldr	r0, [r7, #0]
    8758:	4b42      	ldr	r3, [pc, #264]	; (8864 <_i2c_m_sync_init_impl+0x118>)
    875a:	4798      	blx	r3
    875c:	4603      	mov	r3, r0
    875e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8760:	2101      	movs	r1, #1
    8762:	6838      	ldr	r0, [r7, #0]
    8764:	4b40      	ldr	r3, [pc, #256]	; (8868 <_i2c_m_sync_init_impl+0x11c>)
    8766:	4798      	blx	r3
    8768:	4603      	mov	r3, r0
    876a:	f083 0301 	eor.w	r3, r3, #1
    876e:	b2db      	uxtb	r3, r3
    8770:	2b00      	cmp	r3, #0
    8772:	d020      	beq.n	87b6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    8774:	7bfa      	ldrb	r2, [r7, #15]
    8776:	493d      	ldr	r1, [pc, #244]	; (886c <_i2c_m_sync_init_impl+0x120>)
    8778:	4613      	mov	r3, r2
    877a:	005b      	lsls	r3, r3, #1
    877c:	4413      	add	r3, r2
    877e:	00db      	lsls	r3, r3, #3
    8780:	440b      	add	r3, r1
    8782:	3304      	adds	r3, #4
    8784:	681b      	ldr	r3, [r3, #0]
    8786:	f003 031c 	and.w	r3, r3, #28
    878a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    878c:	2102      	movs	r1, #2
    878e:	6838      	ldr	r0, [r7, #0]
    8790:	4b37      	ldr	r3, [pc, #220]	; (8870 <_i2c_m_sync_init_impl+0x124>)
    8792:	4798      	blx	r3
    8794:	4603      	mov	r3, r0
    8796:	2b00      	cmp	r3, #0
    8798:	d006      	beq.n	87a8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    879a:	6838      	ldr	r0, [r7, #0]
    879c:	4b35      	ldr	r3, [pc, #212]	; (8874 <_i2c_m_sync_init_impl+0x128>)
    879e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    87a0:	2102      	movs	r1, #2
    87a2:	6838      	ldr	r0, [r7, #0]
    87a4:	4b34      	ldr	r3, [pc, #208]	; (8878 <_i2c_m_sync_init_impl+0x12c>)
    87a6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    87a8:	68bb      	ldr	r3, [r7, #8]
    87aa:	f043 0301 	orr.w	r3, r3, #1
    87ae:	4619      	mov	r1, r3
    87b0:	6838      	ldr	r0, [r7, #0]
    87b2:	4b32      	ldr	r3, [pc, #200]	; (887c <_i2c_m_sync_init_impl+0x130>)
    87b4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    87b6:	2101      	movs	r1, #1
    87b8:	6838      	ldr	r0, [r7, #0]
    87ba:	4b2f      	ldr	r3, [pc, #188]	; (8878 <_i2c_m_sync_init_impl+0x12c>)
    87bc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    87be:	7bfa      	ldrb	r2, [r7, #15]
    87c0:	492a      	ldr	r1, [pc, #168]	; (886c <_i2c_m_sync_init_impl+0x120>)
    87c2:	4613      	mov	r3, r2
    87c4:	005b      	lsls	r3, r3, #1
    87c6:	4413      	add	r3, r2
    87c8:	00db      	lsls	r3, r3, #3
    87ca:	440b      	add	r3, r1
    87cc:	3304      	adds	r3, #4
    87ce:	681b      	ldr	r3, [r3, #0]
    87d0:	4619      	mov	r1, r3
    87d2:	6838      	ldr	r0, [r7, #0]
    87d4:	4b29      	ldr	r3, [pc, #164]	; (887c <_i2c_m_sync_init_impl+0x130>)
    87d6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    87d8:	7bfa      	ldrb	r2, [r7, #15]
    87da:	4924      	ldr	r1, [pc, #144]	; (886c <_i2c_m_sync_init_impl+0x120>)
    87dc:	4613      	mov	r3, r2
    87de:	005b      	lsls	r3, r3, #1
    87e0:	4413      	add	r3, r2
    87e2:	00db      	lsls	r3, r3, #3
    87e4:	440b      	add	r3, r1
    87e6:	3308      	adds	r3, #8
    87e8:	681b      	ldr	r3, [r3, #0]
    87ea:	4619      	mov	r1, r3
    87ec:	6838      	ldr	r0, [r7, #0]
    87ee:	4b24      	ldr	r3, [pc, #144]	; (8880 <_i2c_m_sync_init_impl+0x134>)
    87f0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    87f2:	7bfa      	ldrb	r2, [r7, #15]
    87f4:	491d      	ldr	r1, [pc, #116]	; (886c <_i2c_m_sync_init_impl+0x120>)
    87f6:	4613      	mov	r3, r2
    87f8:	005b      	lsls	r3, r3, #1
    87fa:	4413      	add	r3, r2
    87fc:	00db      	lsls	r3, r3, #3
    87fe:	440b      	add	r3, r1
    8800:	330c      	adds	r3, #12
    8802:	681b      	ldr	r3, [r3, #0]
    8804:	4619      	mov	r1, r3
    8806:	6838      	ldr	r0, [r7, #0]
    8808:	4b1e      	ldr	r3, [pc, #120]	; (8884 <_i2c_m_sync_init_impl+0x138>)
    880a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    880c:	7bfa      	ldrb	r2, [r7, #15]
    880e:	4917      	ldr	r1, [pc, #92]	; (886c <_i2c_m_sync_init_impl+0x120>)
    8810:	4613      	mov	r3, r2
    8812:	005b      	lsls	r3, r3, #1
    8814:	4413      	add	r3, r2
    8816:	00db      	lsls	r3, r3, #3
    8818:	440b      	add	r3, r1
    881a:	3304      	adds	r3, #4
    881c:	681b      	ldr	r3, [r3, #0]
    881e:	0e1b      	lsrs	r3, r3, #24
    8820:	b29b      	uxth	r3, r3
    8822:	f003 0303 	and.w	r3, r3, #3
    8826:	b29a      	uxth	r2, r3
    8828:	687b      	ldr	r3, [r7, #4]
    882a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	899b      	ldrh	r3, [r3, #12]
    8830:	2b01      	cmp	r3, #1
    8832:	bf8c      	ite	hi
    8834:	2301      	movhi	r3, #1
    8836:	2300      	movls	r3, #0
    8838:	b2db      	uxtb	r3, r3
    883a:	4619      	mov	r1, r3
    883c:	6838      	ldr	r0, [r7, #0]
    883e:	4b12      	ldr	r3, [pc, #72]	; (8888 <_i2c_m_sync_init_impl+0x13c>)
    8840:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    8842:	7bfa      	ldrb	r2, [r7, #15]
    8844:	4909      	ldr	r1, [pc, #36]	; (886c <_i2c_m_sync_init_impl+0x120>)
    8846:	4613      	mov	r3, r2
    8848:	005b      	lsls	r3, r3, #1
    884a:	4413      	add	r3, r2
    884c:	00db      	lsls	r3, r3, #3
    884e:	440b      	add	r3, r1
    8850:	3312      	adds	r3, #18
    8852:	881a      	ldrh	r2, [r3, #0]
    8854:	687b      	ldr	r3, [r7, #4]
    8856:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8858:	2300      	movs	r3, #0
}
    885a:	4618      	mov	r0, r3
    885c:	3710      	adds	r7, #16
    885e:	46bd      	mov	sp, r7
    8860:	bd80      	pop	{r7, pc}
    8862:	bf00      	nop
    8864:	00008081 	.word	0x00008081
    8868:	00007a2d 	.word	0x00007a2d
    886c:	20000018 	.word	0x20000018
    8870:	00007bd1 	.word	0x00007bd1
    8874:	00007b79 	.word	0x00007b79
    8878:	00007a09 	.word	0x00007a09
    887c:	00007c01 	.word	0x00007c01
    8880:	00007dd1 	.word	0x00007dd1
    8884:	00007e19 	.word	0x00007e19
    8888:	00007e55 	.word	0x00007e55

0000888c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    888c:	b580      	push	{r7, lr}
    888e:	b082      	sub	sp, #8
    8890:	af00      	add	r7, sp, #0
    8892:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8894:	2101      	movs	r1, #1
    8896:	6878      	ldr	r0, [r7, #4]
    8898:	4b07      	ldr	r3, [pc, #28]	; (88b8 <_spi_sync_enable+0x2c>)
    889a:	4798      	blx	r3
    889c:	4603      	mov	r3, r0
    889e:	2b00      	cmp	r3, #0
    88a0:	d002      	beq.n	88a8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    88a2:	f06f 0303 	mvn.w	r3, #3
    88a6:	e003      	b.n	88b0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    88a8:	6878      	ldr	r0, [r7, #4]
    88aa:	4b04      	ldr	r3, [pc, #16]	; (88bc <_spi_sync_enable+0x30>)
    88ac:	4798      	blx	r3

	return ERR_NONE;
    88ae:	2300      	movs	r3, #0
}
    88b0:	4618      	mov	r0, r3
    88b2:	3708      	adds	r7, #8
    88b4:	46bd      	mov	sp, r7
    88b6:	bd80      	pop	{r7, pc}
    88b8:	00007a79 	.word	0x00007a79
    88bc:	00007c25 	.word	0x00007c25

000088c0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    88c0:	b580      	push	{r7, lr}
    88c2:	b082      	sub	sp, #8
    88c4:	af00      	add	r7, sp, #0
    88c6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    88c8:	2101      	movs	r1, #1
    88ca:	6878      	ldr	r0, [r7, #4]
    88cc:	4b07      	ldr	r3, [pc, #28]	; (88ec <_spi_sync_disable+0x2c>)
    88ce:	4798      	blx	r3
    88d0:	4603      	mov	r3, r0
    88d2:	2b00      	cmp	r3, #0
    88d4:	d002      	beq.n	88dc <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    88d6:	f06f 0303 	mvn.w	r3, #3
    88da:	e003      	b.n	88e4 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    88dc:	6878      	ldr	r0, [r7, #4]
    88de:	4b04      	ldr	r3, [pc, #16]	; (88f0 <_spi_sync_disable+0x30>)
    88e0:	4798      	blx	r3

	return ERR_NONE;
    88e2:	2300      	movs	r3, #0
}
    88e4:	4618      	mov	r0, r3
    88e6:	3708      	adds	r7, #8
    88e8:	46bd      	mov	sp, r7
    88ea:	bd80      	pop	{r7, pc}
    88ec:	00007a79 	.word	0x00007a79
    88f0:	00007c85 	.word	0x00007c85

000088f4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    88f4:	b580      	push	{r7, lr}
    88f6:	b082      	sub	sp, #8
    88f8:	af00      	add	r7, sp, #0
    88fa:	6078      	str	r0, [r7, #4]
    88fc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	2b00      	cmp	r3, #0
    8902:	d004      	beq.n	890e <_spi_load_regs_master+0x1a>
    8904:	683b      	ldr	r3, [r7, #0]
    8906:	2b00      	cmp	r3, #0
    8908:	d001      	beq.n	890e <_spi_load_regs_master+0x1a>
    890a:	2301      	movs	r3, #1
    890c:	e000      	b.n	8910 <_spi_load_regs_master+0x1c>
    890e:	2300      	movs	r3, #0
    8910:	f003 0301 	and.w	r3, r3, #1
    8914:	b2db      	uxtb	r3, r3
    8916:	f640 1209 	movw	r2, #2313	; 0x909
    891a:	4915      	ldr	r1, [pc, #84]	; (8970 <_spi_load_regs_master+0x7c>)
    891c:	4618      	mov	r0, r3
    891e:	4b15      	ldr	r3, [pc, #84]	; (8974 <_spi_load_regs_master+0x80>)
    8920:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8922:	683b      	ldr	r3, [r7, #0]
    8924:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8926:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    892a:	f023 0301 	bic.w	r3, r3, #1
    892e:	4619      	mov	r1, r3
    8930:	6878      	ldr	r0, [r7, #4]
    8932:	4b11      	ldr	r3, [pc, #68]	; (8978 <_spi_load_regs_master+0x84>)
    8934:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8936:	683b      	ldr	r3, [r7, #0]
    8938:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    893a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    893e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8946:	4619      	mov	r1, r3
    8948:	6878      	ldr	r0, [r7, #4]
    894a:	4b0c      	ldr	r3, [pc, #48]	; (897c <_spi_load_regs_master+0x88>)
    894c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    894e:	683b      	ldr	r3, [r7, #0]
    8950:	7b1b      	ldrb	r3, [r3, #12]
    8952:	4619      	mov	r1, r3
    8954:	6878      	ldr	r0, [r7, #4]
    8956:	4b0a      	ldr	r3, [pc, #40]	; (8980 <_spi_load_regs_master+0x8c>)
    8958:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    895a:	683b      	ldr	r3, [r7, #0]
    895c:	7b5b      	ldrb	r3, [r3, #13]
    895e:	4619      	mov	r1, r3
    8960:	6878      	ldr	r0, [r7, #4]
    8962:	4b08      	ldr	r3, [pc, #32]	; (8984 <_spi_load_regs_master+0x90>)
    8964:	4798      	blx	r3
}
    8966:	bf00      	nop
    8968:	3708      	adds	r7, #8
    896a:	46bd      	mov	sp, r7
    896c:	bd80      	pop	{r7, pc}
    896e:	bf00      	nop
    8970:	0001b928 	.word	0x0001b928
    8974:	00004d25 	.word	0x00004d25
    8978:	00007cdd 	.word	0x00007cdd
    897c:	00007df5 	.word	0x00007df5
    8980:	00007e35 	.word	0x00007e35
    8984:	00007f6d 	.word	0x00007f6d

00008988 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8988:	b580      	push	{r7, lr}
    898a:	b082      	sub	sp, #8
    898c:	af00      	add	r7, sp, #0
    898e:	6078      	str	r0, [r7, #4]
    8990:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8992:	687b      	ldr	r3, [r7, #4]
    8994:	2b00      	cmp	r3, #0
    8996:	d004      	beq.n	89a2 <_spi_load_regs_slave+0x1a>
    8998:	683b      	ldr	r3, [r7, #0]
    899a:	2b00      	cmp	r3, #0
    899c:	d001      	beq.n	89a2 <_spi_load_regs_slave+0x1a>
    899e:	2301      	movs	r3, #1
    89a0:	e000      	b.n	89a4 <_spi_load_regs_slave+0x1c>
    89a2:	2300      	movs	r3, #0
    89a4:	f003 0301 	and.w	r3, r3, #1
    89a8:	b2db      	uxtb	r3, r3
    89aa:	f640 121d 	movw	r2, #2333	; 0x91d
    89ae:	491a      	ldr	r1, [pc, #104]	; (8a18 <_spi_load_regs_slave+0x90>)
    89b0:	4618      	mov	r0, r3
    89b2:	4b1a      	ldr	r3, [pc, #104]	; (8a1c <_spi_load_regs_slave+0x94>)
    89b4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    89b6:	683b      	ldr	r3, [r7, #0]
    89b8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    89ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    89be:	f023 0301 	bic.w	r3, r3, #1
    89c2:	4619      	mov	r1, r3
    89c4:	6878      	ldr	r0, [r7, #4]
    89c6:	4b16      	ldr	r3, [pc, #88]	; (8a20 <_spi_load_regs_slave+0x98>)
    89c8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    89ca:	683b      	ldr	r3, [r7, #0]
    89cc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    89ce:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    89d2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    89d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    89da:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    89de:	4619      	mov	r1, r3
    89e0:	6878      	ldr	r0, [r7, #4]
    89e2:	4b10      	ldr	r3, [pc, #64]	; (8a24 <_spi_load_regs_slave+0x9c>)
    89e4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    89e6:	683b      	ldr	r3, [r7, #0]
    89e8:	689b      	ldr	r3, [r3, #8]
    89ea:	4619      	mov	r1, r3
    89ec:	6878      	ldr	r0, [r7, #4]
    89ee:	4b0e      	ldr	r3, [pc, #56]	; (8a28 <_spi_load_regs_slave+0xa0>)
    89f0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    89f2:	683b      	ldr	r3, [r7, #0]
    89f4:	7b5b      	ldrb	r3, [r3, #13]
    89f6:	4619      	mov	r1, r3
    89f8:	6878      	ldr	r0, [r7, #4]
    89fa:	4b0c      	ldr	r3, [pc, #48]	; (8a2c <_spi_load_regs_slave+0xa4>)
    89fc:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    89fe:	bf00      	nop
    8a00:	f04f 31ff 	mov.w	r1, #4294967295
    8a04:	6878      	ldr	r0, [r7, #4]
    8a06:	4b0a      	ldr	r3, [pc, #40]	; (8a30 <_spi_load_regs_slave+0xa8>)
    8a08:	4798      	blx	r3
    8a0a:	4603      	mov	r3, r0
    8a0c:	2b00      	cmp	r3, #0
    8a0e:	d1f7      	bne.n	8a00 <_spi_load_regs_slave+0x78>
		;
}
    8a10:	bf00      	nop
    8a12:	3708      	adds	r7, #8
    8a14:	46bd      	mov	sp, r7
    8a16:	bd80      	pop	{r7, pc}
    8a18:	0001b928 	.word	0x0001b928
    8a1c:	00004d25 	.word	0x00004d25
    8a20:	00007cdd 	.word	0x00007cdd
    8a24:	00007df5 	.word	0x00007df5
    8a28:	00007ed9 	.word	0x00007ed9
    8a2c:	00007f6d 	.word	0x00007f6d
    8a30:	00007a79 	.word	0x00007a79

00008a34 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	b084      	sub	sp, #16
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	4618      	mov	r0, r3
    8a40:	4b11      	ldr	r3, [pc, #68]	; (8a88 <_spi_get_regs+0x54>)
    8a42:	4798      	blx	r3
    8a44:	4603      	mov	r3, r0
    8a46:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8a48:	2300      	movs	r3, #0
    8a4a:	73fb      	strb	r3, [r7, #15]
    8a4c:	e014      	b.n	8a78 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    8a4e:	7bfa      	ldrb	r2, [r7, #15]
    8a50:	490e      	ldr	r1, [pc, #56]	; (8a8c <_spi_get_regs+0x58>)
    8a52:	4613      	mov	r3, r2
    8a54:	011b      	lsls	r3, r3, #4
    8a56:	4413      	add	r3, r2
    8a58:	440b      	add	r3, r1
    8a5a:	3310      	adds	r3, #16
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	7bba      	ldrb	r2, [r7, #14]
    8a60:	429a      	cmp	r2, r3
    8a62:	d106      	bne.n	8a72 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    8a64:	7bfa      	ldrb	r2, [r7, #15]
    8a66:	4613      	mov	r3, r2
    8a68:	011b      	lsls	r3, r3, #4
    8a6a:	4413      	add	r3, r2
    8a6c:	4a07      	ldr	r2, [pc, #28]	; (8a8c <_spi_get_regs+0x58>)
    8a6e:	4413      	add	r3, r2
    8a70:	e006      	b.n	8a80 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8a72:	7bfb      	ldrb	r3, [r7, #15]
    8a74:	3301      	adds	r3, #1
    8a76:	73fb      	strb	r3, [r7, #15]
    8a78:	7bfb      	ldrb	r3, [r7, #15]
    8a7a:	2b01      	cmp	r3, #1
    8a7c:	d9e7      	bls.n	8a4e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    8a7e:	2300      	movs	r3, #0
}
    8a80:	4618      	mov	r0, r3
    8a82:	3710      	adds	r7, #16
    8a84:	46bd      	mov	sp, r7
    8a86:	bd80      	pop	{r7, pc}
    8a88:	00008025 	.word	0x00008025
    8a8c:	0001b964 	.word	0x0001b964

00008a90 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    8a90:	b580      	push	{r7, lr}
    8a92:	b084      	sub	sp, #16
    8a94:	af00      	add	r7, sp, #0
    8a96:	6078      	str	r0, [r7, #4]
    8a98:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    8a9a:	683b      	ldr	r3, [r7, #0]
    8a9c:	4618      	mov	r0, r3
    8a9e:	4b35      	ldr	r3, [pc, #212]	; (8b74 <_spi_m_sync_init+0xe4>)
    8aa0:	4798      	blx	r3
    8aa2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8aa4:	687b      	ldr	r3, [r7, #4]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d004      	beq.n	8ab4 <_spi_m_sync_init+0x24>
    8aaa:	683b      	ldr	r3, [r7, #0]
    8aac:	2b00      	cmp	r3, #0
    8aae:	d001      	beq.n	8ab4 <_spi_m_sync_init+0x24>
    8ab0:	2301      	movs	r3, #1
    8ab2:	e000      	b.n	8ab6 <_spi_m_sync_init+0x26>
    8ab4:	2300      	movs	r3, #0
    8ab6:	f003 0301 	and.w	r3, r3, #1
    8aba:	b2db      	uxtb	r3, r3
    8abc:	f640 123f 	movw	r2, #2367	; 0x93f
    8ac0:	492d      	ldr	r1, [pc, #180]	; (8b78 <_spi_m_sync_init+0xe8>)
    8ac2:	4618      	mov	r0, r3
    8ac4:	4b2d      	ldr	r3, [pc, #180]	; (8b7c <_spi_m_sync_init+0xec>)
    8ac6:	4798      	blx	r3

	if (regs == NULL) {
    8ac8:	68fb      	ldr	r3, [r7, #12]
    8aca:	2b00      	cmp	r3, #0
    8acc:	d102      	bne.n	8ad4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8ace:	f06f 030c 	mvn.w	r3, #12
    8ad2:	e04a      	b.n	8b6a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8ad4:	2101      	movs	r1, #1
    8ad6:	6838      	ldr	r0, [r7, #0]
    8ad8:	4b29      	ldr	r3, [pc, #164]	; (8b80 <_spi_m_sync_init+0xf0>)
    8ada:	4798      	blx	r3
    8adc:	4603      	mov	r3, r0
    8ade:	f083 0301 	eor.w	r3, r3, #1
    8ae2:	b2db      	uxtb	r3, r3
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	d019      	beq.n	8b1c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8ae8:	68fb      	ldr	r3, [r7, #12]
    8aea:	681b      	ldr	r3, [r3, #0]
    8aec:	f003 031c 	and.w	r3, r3, #28
    8af0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8af2:	2102      	movs	r1, #2
    8af4:	6838      	ldr	r0, [r7, #0]
    8af6:	4b23      	ldr	r3, [pc, #140]	; (8b84 <_spi_m_sync_init+0xf4>)
    8af8:	4798      	blx	r3
    8afa:	4603      	mov	r3, r0
    8afc:	2b00      	cmp	r3, #0
    8afe:	d006      	beq.n	8b0e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8b00:	6838      	ldr	r0, [r7, #0]
    8b02:	4b21      	ldr	r3, [pc, #132]	; (8b88 <_spi_m_sync_init+0xf8>)
    8b04:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8b06:	2102      	movs	r1, #2
    8b08:	6838      	ldr	r0, [r7, #0]
    8b0a:	4b20      	ldr	r3, [pc, #128]	; (8b8c <_spi_m_sync_init+0xfc>)
    8b0c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8b0e:	68bb      	ldr	r3, [r7, #8]
    8b10:	f043 0301 	orr.w	r3, r3, #1
    8b14:	4619      	mov	r1, r3
    8b16:	6838      	ldr	r0, [r7, #0]
    8b18:	4b1d      	ldr	r3, [pc, #116]	; (8b90 <_spi_m_sync_init+0x100>)
    8b1a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8b1c:	2101      	movs	r1, #1
    8b1e:	6838      	ldr	r0, [r7, #0]
    8b20:	4b1a      	ldr	r3, [pc, #104]	; (8b8c <_spi_m_sync_init+0xfc>)
    8b22:	4798      	blx	r3

	dev->prvt = hw;
    8b24:	687b      	ldr	r3, [r7, #4]
    8b26:	683a      	ldr	r2, [r7, #0]
    8b28:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8b2a:	68fb      	ldr	r3, [r7, #12]
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	f003 031c 	and.w	r3, r3, #28
    8b32:	2b08      	cmp	r3, #8
    8b34:	d104      	bne.n	8b40 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8b36:	68f9      	ldr	r1, [r7, #12]
    8b38:	6838      	ldr	r0, [r7, #0]
    8b3a:	4b16      	ldr	r3, [pc, #88]	; (8b94 <_spi_m_sync_init+0x104>)
    8b3c:	4798      	blx	r3
    8b3e:	e003      	b.n	8b48 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    8b40:	68f9      	ldr	r1, [r7, #12]
    8b42:	6838      	ldr	r0, [r7, #0]
    8b44:	4b14      	ldr	r3, [pc, #80]	; (8b98 <_spi_m_sync_init+0x108>)
    8b46:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	685b      	ldr	r3, [r3, #4]
    8b4c:	f003 0307 	and.w	r3, r3, #7
    8b50:	2b00      	cmp	r3, #0
    8b52:	d101      	bne.n	8b58 <_spi_m_sync_init+0xc8>
    8b54:	2201      	movs	r2, #1
    8b56:	e000      	b.n	8b5a <_spi_m_sync_init+0xca>
    8b58:	2202      	movs	r2, #2
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	89db      	ldrh	r3, [r3, #14]
    8b62:	b29a      	uxth	r2, r3
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    8b68:	2300      	movs	r3, #0
}
    8b6a:	4618      	mov	r0, r3
    8b6c:	3710      	adds	r7, #16
    8b6e:	46bd      	mov	sp, r7
    8b70:	bd80      	pop	{r7, pc}
    8b72:	bf00      	nop
    8b74:	00008a35 	.word	0x00008a35
    8b78:	0001b928 	.word	0x0001b928
    8b7c:	00004d25 	.word	0x00004d25
    8b80:	00007a79 	.word	0x00007a79
    8b84:	00007cad 	.word	0x00007cad
    8b88:	00007c85 	.word	0x00007c85
    8b8c:	00007a55 	.word	0x00007a55
    8b90:	00007cdd 	.word	0x00007cdd
    8b94:	00008989 	.word	0x00008989
    8b98:	000088f5 	.word	0x000088f5

00008b9c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    8b9c:	b580      	push	{r7, lr}
    8b9e:	b082      	sub	sp, #8
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8ba4:	687b      	ldr	r3, [r7, #4]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d005      	beq.n	8bb6 <_spi_m_sync_enable+0x1a>
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	681b      	ldr	r3, [r3, #0]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d001      	beq.n	8bb6 <_spi_m_sync_enable+0x1a>
    8bb2:	2301      	movs	r3, #1
    8bb4:	e000      	b.n	8bb8 <_spi_m_sync_enable+0x1c>
    8bb6:	2300      	movs	r3, #0
    8bb8:	f003 0301 	and.w	r3, r3, #1
    8bbc:	b2db      	uxtb	r3, r3
    8bbe:	f640 129e 	movw	r2, #2462	; 0x99e
    8bc2:	4907      	ldr	r1, [pc, #28]	; (8be0 <_spi_m_sync_enable+0x44>)
    8bc4:	4618      	mov	r0, r3
    8bc6:	4b07      	ldr	r3, [pc, #28]	; (8be4 <_spi_m_sync_enable+0x48>)
    8bc8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	681b      	ldr	r3, [r3, #0]
    8bce:	4618      	mov	r0, r3
    8bd0:	4b05      	ldr	r3, [pc, #20]	; (8be8 <_spi_m_sync_enable+0x4c>)
    8bd2:	4798      	blx	r3
    8bd4:	4603      	mov	r3, r0
}
    8bd6:	4618      	mov	r0, r3
    8bd8:	3708      	adds	r7, #8
    8bda:	46bd      	mov	sp, r7
    8bdc:	bd80      	pop	{r7, pc}
    8bde:	bf00      	nop
    8be0:	0001b928 	.word	0x0001b928
    8be4:	00004d25 	.word	0x00004d25
    8be8:	0000888d 	.word	0x0000888d

00008bec <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    8bec:	b580      	push	{r7, lr}
    8bee:	b082      	sub	sp, #8
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d005      	beq.n	8c06 <_spi_m_sync_disable+0x1a>
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	681b      	ldr	r3, [r3, #0]
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d001      	beq.n	8c06 <_spi_m_sync_disable+0x1a>
    8c02:	2301      	movs	r3, #1
    8c04:	e000      	b.n	8c08 <_spi_m_sync_disable+0x1c>
    8c06:	2300      	movs	r3, #0
    8c08:	f003 0301 	and.w	r3, r3, #1
    8c0c:	b2db      	uxtb	r3, r3
    8c0e:	f640 12ba 	movw	r2, #2490	; 0x9ba
    8c12:	4907      	ldr	r1, [pc, #28]	; (8c30 <_spi_m_sync_disable+0x44>)
    8c14:	4618      	mov	r0, r3
    8c16:	4b07      	ldr	r3, [pc, #28]	; (8c34 <_spi_m_sync_disable+0x48>)
    8c18:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    8c1a:	687b      	ldr	r3, [r7, #4]
    8c1c:	681b      	ldr	r3, [r3, #0]
    8c1e:	4618      	mov	r0, r3
    8c20:	4b05      	ldr	r3, [pc, #20]	; (8c38 <_spi_m_sync_disable+0x4c>)
    8c22:	4798      	blx	r3
    8c24:	4603      	mov	r3, r0
}
    8c26:	4618      	mov	r0, r3
    8c28:	3708      	adds	r7, #8
    8c2a:	46bd      	mov	sp, r7
    8c2c:	bd80      	pop	{r7, pc}
    8c2e:	bf00      	nop
    8c30:	0001b928 	.word	0x0001b928
    8c34:	00004d25 	.word	0x00004d25
    8c38:	000088c1 	.word	0x000088c1

00008c3c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8c3c:	b580      	push	{r7, lr}
    8c3e:	b082      	sub	sp, #8
    8c40:	af00      	add	r7, sp, #0
    8c42:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8c44:	bf00      	nop
    8c46:	2103      	movs	r1, #3
    8c48:	6878      	ldr	r0, [r7, #4]
    8c4a:	4b06      	ldr	r3, [pc, #24]	; (8c64 <_spi_wait_bus_idle+0x28>)
    8c4c:	4798      	blx	r3
    8c4e:	4603      	mov	r3, r0
    8c50:	2b00      	cmp	r3, #0
    8c52:	d0f8      	beq.n	8c46 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    8c54:	2103      	movs	r1, #3
    8c56:	6878      	ldr	r0, [r7, #4]
    8c58:	4b03      	ldr	r3, [pc, #12]	; (8c68 <_spi_wait_bus_idle+0x2c>)
    8c5a:	4798      	blx	r3
}
    8c5c:	bf00      	nop
    8c5e:	3708      	adds	r7, #8
    8c60:	46bd      	mov	sp, r7
    8c62:	bd80      	pop	{r7, pc}
    8c64:	00007aef 	.word	0x00007aef
    8c68:	00007b31 	.word	0x00007b31

00008c6c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b086      	sub	sp, #24
    8c70:	af00      	add	r7, sp, #0
    8c72:	60f8      	str	r0, [r7, #12]
    8c74:	60b9      	str	r1, [r7, #8]
    8c76:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    8c78:	68bb      	ldr	r3, [r7, #8]
    8c7a:	f003 0304 	and.w	r3, r3, #4
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d101      	bne.n	8c86 <_spi_rx_check_and_receive+0x1a>
		return false;
    8c82:	2300      	movs	r3, #0
    8c84:	e022      	b.n	8ccc <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    8c86:	68f8      	ldr	r0, [r7, #12]
    8c88:	4b12      	ldr	r3, [pc, #72]	; (8cd4 <_spi_rx_check_and_receive+0x68>)
    8c8a:	4798      	blx	r3
    8c8c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    8c8e:	687b      	ldr	r3, [r7, #4]
    8c90:	685b      	ldr	r3, [r3, #4]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d014      	beq.n	8cc0 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	685b      	ldr	r3, [r3, #4]
    8c9a:	1c59      	adds	r1, r3, #1
    8c9c:	687a      	ldr	r2, [r7, #4]
    8c9e:	6051      	str	r1, [r2, #4]
    8ca0:	697a      	ldr	r2, [r7, #20]
    8ca2:	b2d2      	uxtb	r2, r2
    8ca4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	7c1b      	ldrb	r3, [r3, #16]
    8caa:	2b01      	cmp	r3, #1
    8cac:	d908      	bls.n	8cc0 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    8cae:	687b      	ldr	r3, [r7, #4]
    8cb0:	685b      	ldr	r3, [r3, #4]
    8cb2:	1c59      	adds	r1, r3, #1
    8cb4:	687a      	ldr	r2, [r7, #4]
    8cb6:	6051      	str	r1, [r2, #4]
    8cb8:	697a      	ldr	r2, [r7, #20]
    8cba:	0a12      	lsrs	r2, r2, #8
    8cbc:	b2d2      	uxtb	r2, r2
    8cbe:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	68db      	ldr	r3, [r3, #12]
    8cc4:	1c5a      	adds	r2, r3, #1
    8cc6:	687b      	ldr	r3, [r7, #4]
    8cc8:	60da      	str	r2, [r3, #12]

	return true;
    8cca:	2301      	movs	r3, #1
}
    8ccc:	4618      	mov	r0, r3
    8cce:	3718      	adds	r7, #24
    8cd0:	46bd      	mov	sp, r7
    8cd2:	bd80      	pop	{r7, pc}
    8cd4:	00007f55 	.word	0x00007f55

00008cd8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    8cd8:	b580      	push	{r7, lr}
    8cda:	b086      	sub	sp, #24
    8cdc:	af00      	add	r7, sp, #0
    8cde:	60f8      	str	r0, [r7, #12]
    8ce0:	60b9      	str	r1, [r7, #8]
    8ce2:	607a      	str	r2, [r7, #4]
    8ce4:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    8ce6:	68bb      	ldr	r3, [r7, #8]
    8ce8:	f003 0301 	and.w	r3, r3, #1
    8cec:	2b00      	cmp	r3, #0
    8cee:	d028      	beq.n	8d42 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d018      	beq.n	8d2a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    8cf8:	687b      	ldr	r3, [r7, #4]
    8cfa:	681b      	ldr	r3, [r3, #0]
    8cfc:	1c59      	adds	r1, r3, #1
    8cfe:	687a      	ldr	r2, [r7, #4]
    8d00:	6011      	str	r1, [r2, #0]
    8d02:	781b      	ldrb	r3, [r3, #0]
    8d04:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	7c1b      	ldrb	r3, [r3, #16]
    8d0a:	2b01      	cmp	r3, #1
    8d0c:	d90f      	bls.n	8d2e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    8d0e:	687b      	ldr	r3, [r7, #4]
    8d10:	681b      	ldr	r3, [r3, #0]
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	021b      	lsls	r3, r3, #8
    8d16:	461a      	mov	r2, r3
    8d18:	697b      	ldr	r3, [r7, #20]
    8d1a:	4313      	orrs	r3, r2
    8d1c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    8d1e:	687b      	ldr	r3, [r7, #4]
    8d20:	681b      	ldr	r3, [r3, #0]
    8d22:	1c5a      	adds	r2, r3, #1
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	601a      	str	r2, [r3, #0]
    8d28:	e001      	b.n	8d2e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    8d2a:	887b      	ldrh	r3, [r7, #2]
    8d2c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    8d2e:	687b      	ldr	r3, [r7, #4]
    8d30:	689b      	ldr	r3, [r3, #8]
    8d32:	1c5a      	adds	r2, r3, #1
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    8d38:	6979      	ldr	r1, [r7, #20]
    8d3a:	68f8      	ldr	r0, [r7, #12]
    8d3c:	4b03      	ldr	r3, [pc, #12]	; (8d4c <_spi_tx_check_and_send+0x74>)
    8d3e:	4798      	blx	r3
    8d40:	e000      	b.n	8d44 <_spi_tx_check_and_send+0x6c>
		return;
    8d42:	bf00      	nop
}
    8d44:	3718      	adds	r7, #24
    8d46:	46bd      	mov	sp, r7
    8d48:	bd80      	pop	{r7, pc}
    8d4a:	bf00      	nop
    8d4c:	00007f39 	.word	0x00007f39

00008d50 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    8d50:	b580      	push	{r7, lr}
    8d52:	b082      	sub	sp, #8
    8d54:	af00      	add	r7, sp, #0
    8d56:	6078      	str	r0, [r7, #4]
    8d58:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    8d5a:	687b      	ldr	r3, [r7, #4]
    8d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8d60:	2b00      	cmp	r3, #0
    8d62:	d00b      	beq.n	8d7c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8d64:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8d68:	6838      	ldr	r0, [r7, #0]
    8d6a:	4b07      	ldr	r3, [pc, #28]	; (8d88 <_spi_err_check+0x38>)
    8d6c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8d6e:	2180      	movs	r1, #128	; 0x80
    8d70:	6838      	ldr	r0, [r7, #0]
    8d72:	4b06      	ldr	r3, [pc, #24]	; (8d8c <_spi_err_check+0x3c>)
    8d74:	4798      	blx	r3
		return ERR_OVERFLOW;
    8d76:	f06f 0312 	mvn.w	r3, #18
    8d7a:	e000      	b.n	8d7e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8d7c:	2300      	movs	r3, #0
}
    8d7e:	4618      	mov	r0, r3
    8d80:	3708      	adds	r7, #8
    8d82:	46bd      	mov	sp, r7
    8d84:	bd80      	pop	{r7, pc}
    8d86:	bf00      	nop
    8d88:	00007f8d 	.word	0x00007f8d
    8d8c:	00007b31 	.word	0x00007b31

00008d90 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    8d90:	b590      	push	{r4, r7, lr}
    8d92:	b08b      	sub	sp, #44	; 0x2c
    8d94:	af00      	add	r7, sp, #0
    8d96:	6078      	str	r0, [r7, #4]
    8d98:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    8d9a:	687b      	ldr	r3, [r7, #4]
    8d9c:	681b      	ldr	r3, [r3, #0]
    8d9e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    8da0:	2300      	movs	r3, #0
    8da2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    8da4:	683b      	ldr	r3, [r7, #0]
    8da6:	681b      	ldr	r3, [r3, #0]
    8da8:	60bb      	str	r3, [r7, #8]
    8daa:	683b      	ldr	r3, [r7, #0]
    8dac:	685b      	ldr	r3, [r3, #4]
    8dae:	60fb      	str	r3, [r7, #12]
    8db0:	2300      	movs	r3, #0
    8db2:	613b      	str	r3, [r7, #16]
    8db4:	2300      	movs	r3, #0
    8db6:	617b      	str	r3, [r7, #20]
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	791b      	ldrb	r3, [r3, #4]
    8dbc:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    8dbe:	687b      	ldr	r3, [r7, #4]
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d004      	beq.n	8dce <_spi_m_sync_trans+0x3e>
    8dc4:	6a3b      	ldr	r3, [r7, #32]
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d001      	beq.n	8dce <_spi_m_sync_trans+0x3e>
    8dca:	2301      	movs	r3, #1
    8dcc:	e000      	b.n	8dd0 <_spi_m_sync_trans+0x40>
    8dce:	2300      	movs	r3, #0
    8dd0:	f003 0301 	and.w	r3, r3, #1
    8dd4:	b2db      	uxtb	r3, r3
    8dd6:	f640 22a3 	movw	r2, #2723	; 0xaa3
    8dda:	492b      	ldr	r1, [pc, #172]	; (8e88 <_spi_m_sync_trans+0xf8>)
    8ddc:	4618      	mov	r0, r3
    8dde:	4b2b      	ldr	r3, [pc, #172]	; (8e8c <_spi_m_sync_trans+0xfc>)
    8de0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    8de2:	2107      	movs	r1, #7
    8de4:	6a38      	ldr	r0, [r7, #32]
    8de6:	4b2a      	ldr	r3, [pc, #168]	; (8e90 <_spi_m_sync_trans+0x100>)
    8de8:	4798      	blx	r3
    8dea:	4603      	mov	r3, r0
    8dec:	2b00      	cmp	r3, #0
    8dee:	d002      	beq.n	8df6 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    8df0:	f06f 0303 	mvn.w	r3, #3
    8df4:	e043      	b.n	8e7e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    8df6:	6a38      	ldr	r0, [r7, #32]
    8df8:	4b26      	ldr	r3, [pc, #152]	; (8e94 <_spi_m_sync_trans+0x104>)
    8dfa:	4798      	blx	r3
    8dfc:	4603      	mov	r3, r0
    8dfe:	f083 0301 	eor.w	r3, r3, #1
    8e02:	b2db      	uxtb	r3, r3
    8e04:	2b00      	cmp	r3, #0
    8e06:	d002      	beq.n	8e0e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    8e08:	f06f 0313 	mvn.w	r3, #19
    8e0c:	e037      	b.n	8e7e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    8e0e:	6a38      	ldr	r0, [r7, #32]
    8e10:	4b21      	ldr	r3, [pc, #132]	; (8e98 <_spi_m_sync_trans+0x108>)
    8e12:	4798      	blx	r3
    8e14:	4603      	mov	r3, r0
    8e16:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    8e18:	f107 0308 	add.w	r3, r7, #8
    8e1c:	461a      	mov	r2, r3
    8e1e:	69f9      	ldr	r1, [r7, #28]
    8e20:	6a38      	ldr	r0, [r7, #32]
    8e22:	4b1e      	ldr	r3, [pc, #120]	; (8e9c <_spi_m_sync_trans+0x10c>)
    8e24:	4798      	blx	r3
    8e26:	4603      	mov	r3, r0
    8e28:	f083 0301 	eor.w	r3, r3, #1
    8e2c:	b2db      	uxtb	r3, r3
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d00b      	beq.n	8e4a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    8e32:	697a      	ldr	r2, [r7, #20]
    8e34:	693b      	ldr	r3, [r7, #16]
    8e36:	429a      	cmp	r2, r3
    8e38:	d307      	bcc.n	8e4a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    8e3a:	687b      	ldr	r3, [r7, #4]
    8e3c:	88db      	ldrh	r3, [r3, #6]
    8e3e:	f107 0208 	add.w	r2, r7, #8
    8e42:	69f9      	ldr	r1, [r7, #28]
    8e44:	6a38      	ldr	r0, [r7, #32]
    8e46:	4c16      	ldr	r4, [pc, #88]	; (8ea0 <_spi_m_sync_trans+0x110>)
    8e48:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    8e4a:	6a39      	ldr	r1, [r7, #32]
    8e4c:	69f8      	ldr	r0, [r7, #28]
    8e4e:	4b15      	ldr	r3, [pc, #84]	; (8ea4 <_spi_m_sync_trans+0x114>)
    8e50:	4798      	blx	r3
    8e52:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e56:	2b00      	cmp	r3, #0
    8e58:	db0c      	blt.n	8e74 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    8e5a:	693a      	ldr	r2, [r7, #16]
    8e5c:	683b      	ldr	r3, [r7, #0]
    8e5e:	689b      	ldr	r3, [r3, #8]
    8e60:	429a      	cmp	r2, r3
    8e62:	d3d4      	bcc.n	8e0e <_spi_m_sync_trans+0x7e>
    8e64:	697a      	ldr	r2, [r7, #20]
    8e66:	683b      	ldr	r3, [r7, #0]
    8e68:	689b      	ldr	r3, [r3, #8]
    8e6a:	429a      	cmp	r2, r3
    8e6c:	d3cf      	bcc.n	8e0e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8e6e:	693b      	ldr	r3, [r7, #16]
    8e70:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8e72:	e000      	b.n	8e76 <_spi_m_sync_trans+0xe6>
			break;
    8e74:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    8e76:	6a38      	ldr	r0, [r7, #32]
    8e78:	4b0b      	ldr	r3, [pc, #44]	; (8ea8 <_spi_m_sync_trans+0x118>)
    8e7a:	4798      	blx	r3

	return rc;
    8e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8e7e:	4618      	mov	r0, r3
    8e80:	372c      	adds	r7, #44	; 0x2c
    8e82:	46bd      	mov	sp, r7
    8e84:	bd90      	pop	{r4, r7, pc}
    8e86:	bf00      	nop
    8e88:	0001b928 	.word	0x0001b928
    8e8c:	00004d25 	.word	0x00004d25
    8e90:	00007a79 	.word	0x00007a79
    8e94:	00007c4d 	.word	0x00007c4d
    8e98:	00007b17 	.word	0x00007b17
    8e9c:	00008c6d 	.word	0x00008c6d
    8ea0:	00008cd9 	.word	0x00008cd9
    8ea4:	00008d51 	.word	0x00008d51
    8ea8:	00008c3d 	.word	0x00008c3d

00008eac <__NVIC_EnableIRQ>:
{
    8eac:	b480      	push	{r7}
    8eae:	b083      	sub	sp, #12
    8eb0:	af00      	add	r7, sp, #0
    8eb2:	4603      	mov	r3, r0
    8eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8eba:	2b00      	cmp	r3, #0
    8ebc:	db0b      	blt.n	8ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ebe:	4909      	ldr	r1, [pc, #36]	; (8ee4 <__NVIC_EnableIRQ+0x38>)
    8ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ec4:	095b      	lsrs	r3, r3, #5
    8ec6:	88fa      	ldrh	r2, [r7, #6]
    8ec8:	f002 021f 	and.w	r2, r2, #31
    8ecc:	2001      	movs	r0, #1
    8ece:	fa00 f202 	lsl.w	r2, r0, r2
    8ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ed6:	bf00      	nop
    8ed8:	370c      	adds	r7, #12
    8eda:	46bd      	mov	sp, r7
    8edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ee0:	4770      	bx	lr
    8ee2:	bf00      	nop
    8ee4:	e000e100 	.word	0xe000e100

00008ee8 <__NVIC_DisableIRQ>:
{
    8ee8:	b480      	push	{r7}
    8eea:	b083      	sub	sp, #12
    8eec:	af00      	add	r7, sp, #0
    8eee:	4603      	mov	r3, r0
    8ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	db10      	blt.n	8f1c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8efa:	490b      	ldr	r1, [pc, #44]	; (8f28 <__NVIC_DisableIRQ+0x40>)
    8efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f00:	095b      	lsrs	r3, r3, #5
    8f02:	88fa      	ldrh	r2, [r7, #6]
    8f04:	f002 021f 	and.w	r2, r2, #31
    8f08:	2001      	movs	r0, #1
    8f0a:	fa00 f202 	lsl.w	r2, r0, r2
    8f0e:	3320      	adds	r3, #32
    8f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8f14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8f18:	f3bf 8f6f 	isb	sy
}
    8f1c:	bf00      	nop
    8f1e:	370c      	adds	r7, #12
    8f20:	46bd      	mov	sp, r7
    8f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f26:	4770      	bx	lr
    8f28:	e000e100 	.word	0xe000e100

00008f2c <__NVIC_ClearPendingIRQ>:
{
    8f2c:	b480      	push	{r7}
    8f2e:	b083      	sub	sp, #12
    8f30:	af00      	add	r7, sp, #0
    8f32:	4603      	mov	r3, r0
    8f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	db0c      	blt.n	8f58 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f3e:	4909      	ldr	r1, [pc, #36]	; (8f64 <__NVIC_ClearPendingIRQ+0x38>)
    8f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f44:	095b      	lsrs	r3, r3, #5
    8f46:	88fa      	ldrh	r2, [r7, #6]
    8f48:	f002 021f 	and.w	r2, r2, #31
    8f4c:	2001      	movs	r0, #1
    8f4e:	fa00 f202 	lsl.w	r2, r0, r2
    8f52:	3360      	adds	r3, #96	; 0x60
    8f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f58:	bf00      	nop
    8f5a:	370c      	adds	r7, #12
    8f5c:	46bd      	mov	sp, r7
    8f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f62:	4770      	bx	lr
    8f64:	e000e100 	.word	0xe000e100

00008f68 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8f68:	b480      	push	{r7}
    8f6a:	b083      	sub	sp, #12
    8f6c:	af00      	add	r7, sp, #0
    8f6e:	6078      	str	r0, [r7, #4]
    8f70:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    8f72:	bf00      	nop
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	689a      	ldr	r2, [r3, #8]
    8f78:	683b      	ldr	r3, [r7, #0]
    8f7a:	4013      	ands	r3, r2
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d1f9      	bne.n	8f74 <hri_tcc_wait_for_sync+0xc>
	};
}
    8f80:	bf00      	nop
    8f82:	370c      	adds	r7, #12
    8f84:	46bd      	mov	sp, r7
    8f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f8a:	4770      	bx	lr

00008f8c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8f8c:	b480      	push	{r7}
    8f8e:	b083      	sub	sp, #12
    8f90:	af00      	add	r7, sp, #0
    8f92:	6078      	str	r0, [r7, #4]
    8f94:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	689a      	ldr	r2, [r3, #8]
    8f9a:	683b      	ldr	r3, [r7, #0]
    8f9c:	4013      	ands	r3, r2
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	bf14      	ite	ne
    8fa2:	2301      	movne	r3, #1
    8fa4:	2300      	moveq	r3, #0
    8fa6:	b2db      	uxtb	r3, r3
}
    8fa8:	4618      	mov	r0, r3
    8faa:	370c      	adds	r7, #12
    8fac:	46bd      	mov	sp, r7
    8fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fb2:	4770      	bx	lr

00008fb4 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    8fb4:	b480      	push	{r7}
    8fb6:	b083      	sub	sp, #12
    8fb8:	af00      	add	r7, sp, #0
    8fba:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8fc0:	f003 0301 	and.w	r3, r3, #1
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	bf14      	ite	ne
    8fc8:	2301      	movne	r3, #1
    8fca:	2300      	moveq	r3, #0
    8fcc:	b2db      	uxtb	r3, r3
}
    8fce:	4618      	mov	r0, r3
    8fd0:	370c      	adds	r7, #12
    8fd2:	46bd      	mov	sp, r7
    8fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd8:	4770      	bx	lr

00008fda <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    8fda:	b480      	push	{r7}
    8fdc:	b083      	sub	sp, #12
    8fde:	af00      	add	r7, sp, #0
    8fe0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	2201      	movs	r2, #1
    8fe6:	62da      	str	r2, [r3, #44]	; 0x2c
}
    8fe8:	bf00      	nop
    8fea:	370c      	adds	r7, #12
    8fec:	46bd      	mov	sp, r7
    8fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff2:	4770      	bx	lr

00008ff4 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    8ff4:	b480      	push	{r7}
    8ff6:	b083      	sub	sp, #12
    8ff8:	af00      	add	r7, sp, #0
    8ffa:	6078      	str	r0, [r7, #4]
    8ffc:	460b      	mov	r3, r1
    8ffe:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	78fa      	ldrb	r2, [r7, #3]
    9004:	715a      	strb	r2, [r3, #5]
}
    9006:	bf00      	nop
    9008:	370c      	adds	r7, #12
    900a:	46bd      	mov	sp, r7
    900c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9010:	4770      	bx	lr

00009012 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    9012:	b480      	push	{r7}
    9014:	b083      	sub	sp, #12
    9016:	af00      	add	r7, sp, #0
    9018:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    901a:	687b      	ldr	r3, [r7, #4]
    901c:	2201      	movs	r2, #1
    901e:	629a      	str	r2, [r3, #40]	; 0x28
}
    9020:	bf00      	nop
    9022:	370c      	adds	r7, #12
    9024:	46bd      	mov	sp, r7
    9026:	f85d 7b04 	ldr.w	r7, [sp], #4
    902a:	4770      	bx	lr

0000902c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    902c:	b580      	push	{r7, lr}
    902e:	b082      	sub	sp, #8
    9030:	af00      	add	r7, sp, #0
    9032:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    9034:	687b      	ldr	r3, [r7, #4]
    9036:	681b      	ldr	r3, [r3, #0]
    9038:	f043 0201 	orr.w	r2, r3, #1
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    9040:	2101      	movs	r1, #1
    9042:	6878      	ldr	r0, [r7, #4]
    9044:	4b02      	ldr	r3, [pc, #8]	; (9050 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    9046:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9048:	bf00      	nop
    904a:	3708      	adds	r7, #8
    904c:	46bd      	mov	sp, r7
    904e:	bd80      	pop	{r7, pc}
    9050:	00008f69 	.word	0x00008f69

00009054 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9054:	b580      	push	{r7, lr}
    9056:	b082      	sub	sp, #8
    9058:	af00      	add	r7, sp, #0
    905a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	681b      	ldr	r3, [r3, #0]
    9060:	f043 0202 	orr.w	r2, r3, #2
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9068:	2103      	movs	r1, #3
    906a:	6878      	ldr	r0, [r7, #4]
    906c:	4b02      	ldr	r3, [pc, #8]	; (9078 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    906e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9070:	bf00      	nop
    9072:	3708      	adds	r7, #8
    9074:	46bd      	mov	sp, r7
    9076:	bd80      	pop	{r7, pc}
    9078:	00008f69 	.word	0x00008f69

0000907c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    907c:	b580      	push	{r7, lr}
    907e:	b084      	sub	sp, #16
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9084:	2103      	movs	r1, #3
    9086:	6878      	ldr	r0, [r7, #4]
    9088:	4b09      	ldr	r3, [pc, #36]	; (90b0 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    908a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	681b      	ldr	r3, [r3, #0]
    9090:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    9092:	68fb      	ldr	r3, [r7, #12]
    9094:	085b      	lsrs	r3, r3, #1
    9096:	f003 0301 	and.w	r3, r3, #1
    909a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    909c:	68fb      	ldr	r3, [r7, #12]
    909e:	2b00      	cmp	r3, #0
    90a0:	bf14      	ite	ne
    90a2:	2301      	movne	r3, #1
    90a4:	2300      	moveq	r3, #0
    90a6:	b2db      	uxtb	r3, r3
}
    90a8:	4618      	mov	r0, r3
    90aa:	3710      	adds	r7, #16
    90ac:	46bd      	mov	sp, r7
    90ae:	bd80      	pop	{r7, pc}
    90b0:	00008f69 	.word	0x00008f69

000090b4 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    90b4:	b580      	push	{r7, lr}
    90b6:	b082      	sub	sp, #8
    90b8:	af00      	add	r7, sp, #0
    90ba:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    90bc:	687b      	ldr	r3, [r7, #4]
    90be:	681b      	ldr	r3, [r3, #0]
    90c0:	f023 0202 	bic.w	r2, r3, #2
    90c4:	687b      	ldr	r3, [r7, #4]
    90c6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    90c8:	2103      	movs	r1, #3
    90ca:	6878      	ldr	r0, [r7, #4]
    90cc:	4b02      	ldr	r3, [pc, #8]	; (90d8 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    90ce:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    90d0:	bf00      	nop
    90d2:	3708      	adds	r7, #8
    90d4:	46bd      	mov	sp, r7
    90d6:	bd80      	pop	{r7, pc}
    90d8:	00008f69 	.word	0x00008f69

000090dc <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    90dc:	b580      	push	{r7, lr}
    90de:	b084      	sub	sp, #16
    90e0:	af00      	add	r7, sp, #0
    90e2:	6078      	str	r0, [r7, #4]
    90e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    90e6:	2103      	movs	r1, #3
    90e8:	6878      	ldr	r0, [r7, #4]
    90ea:	4b07      	ldr	r3, [pc, #28]	; (9108 <hri_tcc_get_CTRLA_reg+0x2c>)
    90ec:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	681b      	ldr	r3, [r3, #0]
    90f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    90f4:	68fa      	ldr	r2, [r7, #12]
    90f6:	683b      	ldr	r3, [r7, #0]
    90f8:	4013      	ands	r3, r2
    90fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    90fc:	68fb      	ldr	r3, [r7, #12]
}
    90fe:	4618      	mov	r0, r3
    9100:	3710      	adds	r7, #16
    9102:	46bd      	mov	sp, r7
    9104:	bd80      	pop	{r7, pc}
    9106:	bf00      	nop
    9108:	00008f69 	.word	0x00008f69

0000910c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    910c:	b580      	push	{r7, lr}
    910e:	b082      	sub	sp, #8
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
    9114:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    9116:	687b      	ldr	r3, [r7, #4]
    9118:	683a      	ldr	r2, [r7, #0]
    911a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    911c:	2103      	movs	r1, #3
    911e:	6878      	ldr	r0, [r7, #4]
    9120:	4b02      	ldr	r3, [pc, #8]	; (912c <hri_tcc_write_CTRLA_reg+0x20>)
    9122:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9124:	bf00      	nop
    9126:	3708      	adds	r7, #8
    9128:	46bd      	mov	sp, r7
    912a:	bd80      	pop	{r7, pc}
    912c:	00008f69 	.word	0x00008f69

00009130 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    9130:	b480      	push	{r7}
    9132:	b083      	sub	sp, #12
    9134:	af00      	add	r7, sp, #0
    9136:	6078      	str	r0, [r7, #4]
    9138:	460b      	mov	r3, r1
    913a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	78fa      	ldrb	r2, [r7, #3]
    9140:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    9142:	bf00      	nop
    9144:	370c      	adds	r7, #12
    9146:	46bd      	mov	sp, r7
    9148:	f85d 7b04 	ldr.w	r7, [sp], #4
    914c:	4770      	bx	lr

0000914e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    914e:	b480      	push	{r7}
    9150:	b083      	sub	sp, #12
    9152:	af00      	add	r7, sp, #0
    9154:	6078      	str	r0, [r7, #4]
    9156:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	683a      	ldr	r2, [r7, #0]
    915c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    915e:	bf00      	nop
    9160:	370c      	adds	r7, #12
    9162:	46bd      	mov	sp, r7
    9164:	f85d 7b04 	ldr.w	r7, [sp], #4
    9168:	4770      	bx	lr
	...

0000916c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    916c:	b580      	push	{r7, lr}
    916e:	b082      	sub	sp, #8
    9170:	af00      	add	r7, sp, #0
    9172:	6078      	str	r0, [r7, #4]
    9174:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    9176:	687b      	ldr	r3, [r7, #4]
    9178:	683a      	ldr	r2, [r7, #0]
    917a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    917c:	2180      	movs	r1, #128	; 0x80
    917e:	6878      	ldr	r0, [r7, #4]
    9180:	4b02      	ldr	r3, [pc, #8]	; (918c <hri_tcc_write_PER_reg+0x20>)
    9182:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9184:	bf00      	nop
    9186:	3708      	adds	r7, #8
    9188:	46bd      	mov	sp, r7
    918a:	bd80      	pop	{r7, pc}
    918c:	00008f69 	.word	0x00008f69

00009190 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    9190:	b580      	push	{r7, lr}
    9192:	b082      	sub	sp, #8
    9194:	af00      	add	r7, sp, #0
    9196:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    9198:	2180      	movs	r1, #128	; 0x80
    919a:	6878      	ldr	r0, [r7, #4]
    919c:	4b03      	ldr	r3, [pc, #12]	; (91ac <hri_tcc_read_PER_reg+0x1c>)
    919e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    91a4:	4618      	mov	r0, r3
    91a6:	3708      	adds	r7, #8
    91a8:	46bd      	mov	sp, r7
    91aa:	bd80      	pop	{r7, pc}
    91ac:	00008f69 	.word	0x00008f69

000091b0 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    91b0:	b480      	push	{r7}
    91b2:	b083      	sub	sp, #12
    91b4:	af00      	add	r7, sp, #0
    91b6:	6078      	str	r0, [r7, #4]
    91b8:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    91ba:	687b      	ldr	r3, [r7, #4]
    91bc:	4a0c      	ldr	r2, [pc, #48]	; (91f0 <_tcc_init_irq_param+0x40>)
    91be:	4293      	cmp	r3, r2
    91c0:	d102      	bne.n	91c8 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    91c2:	4a0c      	ldr	r2, [pc, #48]	; (91f4 <_tcc_init_irq_param+0x44>)
    91c4:	683b      	ldr	r3, [r7, #0]
    91c6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    91c8:	687b      	ldr	r3, [r7, #4]
    91ca:	4a0b      	ldr	r2, [pc, #44]	; (91f8 <_tcc_init_irq_param+0x48>)
    91cc:	4293      	cmp	r3, r2
    91ce:	d102      	bne.n	91d6 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    91d0:	4a0a      	ldr	r2, [pc, #40]	; (91fc <_tcc_init_irq_param+0x4c>)
    91d2:	683b      	ldr	r3, [r7, #0]
    91d4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    91d6:	687b      	ldr	r3, [r7, #4]
    91d8:	4a09      	ldr	r2, [pc, #36]	; (9200 <_tcc_init_irq_param+0x50>)
    91da:	4293      	cmp	r3, r2
    91dc:	d102      	bne.n	91e4 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    91de:	4a09      	ldr	r2, [pc, #36]	; (9204 <_tcc_init_irq_param+0x54>)
    91e0:	683b      	ldr	r3, [r7, #0]
    91e2:	6013      	str	r3, [r2, #0]
	}
}
    91e4:	bf00      	nop
    91e6:	370c      	adds	r7, #12
    91e8:	46bd      	mov	sp, r7
    91ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ee:	4770      	bx	lr
    91f0:	41016000 	.word	0x41016000
    91f4:	20002350 	.word	0x20002350
    91f8:	41018000 	.word	0x41018000
    91fc:	20002354 	.word	0x20002354
    9200:	42000c00 	.word	0x42000c00
    9204:	20002358 	.word	0x20002358

00009208 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    9208:	b580      	push	{r7, lr}
    920a:	b084      	sub	sp, #16
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
    9210:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    9212:	6838      	ldr	r0, [r7, #0]
    9214:	4b33      	ldr	r3, [pc, #204]	; (92e4 <_tcc_timer_init+0xdc>)
    9216:	4798      	blx	r3
    9218:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    921a:	68fb      	ldr	r3, [r7, #12]
    921c:	2b00      	cmp	r3, #0
    921e:	d102      	bne.n	9226 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    9220:	f06f 0309 	mvn.w	r3, #9
    9224:	e05a      	b.n	92dc <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	683a      	ldr	r2, [r7, #0]
    922a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    922c:	2101      	movs	r1, #1
    922e:	6838      	ldr	r0, [r7, #0]
    9230:	4b2d      	ldr	r3, [pc, #180]	; (92e8 <_tcc_timer_init+0xe0>)
    9232:	4798      	blx	r3
    9234:	4603      	mov	r3, r0
    9236:	f083 0301 	eor.w	r3, r3, #1
    923a:	b2db      	uxtb	r3, r3
    923c:	2b00      	cmp	r3, #0
    923e:	d011      	beq.n	9264 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    9240:	2102      	movs	r1, #2
    9242:	6838      	ldr	r0, [r7, #0]
    9244:	4b29      	ldr	r3, [pc, #164]	; (92ec <_tcc_timer_init+0xe4>)
    9246:	4798      	blx	r3
    9248:	4603      	mov	r3, r0
    924a:	2b00      	cmp	r3, #0
    924c:	d006      	beq.n	925c <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    924e:	6838      	ldr	r0, [r7, #0]
    9250:	4b27      	ldr	r3, [pc, #156]	; (92f0 <_tcc_timer_init+0xe8>)
    9252:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    9254:	2102      	movs	r1, #2
    9256:	6838      	ldr	r0, [r7, #0]
    9258:	4b26      	ldr	r3, [pc, #152]	; (92f4 <_tcc_timer_init+0xec>)
    925a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    925c:	2101      	movs	r1, #1
    925e:	6838      	ldr	r0, [r7, #0]
    9260:	4b25      	ldr	r3, [pc, #148]	; (92f8 <_tcc_timer_init+0xf0>)
    9262:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    9264:	2101      	movs	r1, #1
    9266:	6838      	ldr	r0, [r7, #0]
    9268:	4b22      	ldr	r3, [pc, #136]	; (92f4 <_tcc_timer_init+0xec>)
    926a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    926c:	68fb      	ldr	r3, [r7, #12]
    926e:	689b      	ldr	r3, [r3, #8]
    9270:	4619      	mov	r1, r3
    9272:	6838      	ldr	r0, [r7, #0]
    9274:	4b20      	ldr	r3, [pc, #128]	; (92f8 <_tcc_timer_init+0xf0>)
    9276:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    9278:	68fb      	ldr	r3, [r7, #12]
    927a:	7b1b      	ldrb	r3, [r3, #12]
    927c:	4619      	mov	r1, r3
    927e:	6838      	ldr	r0, [r7, #0]
    9280:	4b1e      	ldr	r3, [pc, #120]	; (92fc <_tcc_timer_init+0xf4>)
    9282:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    9284:	68fb      	ldr	r3, [r7, #12]
    9286:	7b5b      	ldrb	r3, [r3, #13]
    9288:	4619      	mov	r1, r3
    928a:	6838      	ldr	r0, [r7, #0]
    928c:	4b1c      	ldr	r3, [pc, #112]	; (9300 <_tcc_timer_init+0xf8>)
    928e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    9290:	68fb      	ldr	r3, [r7, #12]
    9292:	691b      	ldr	r3, [r3, #16]
    9294:	4619      	mov	r1, r3
    9296:	6838      	ldr	r0, [r7, #0]
    9298:	4b1a      	ldr	r3, [pc, #104]	; (9304 <_tcc_timer_init+0xfc>)
    929a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    929c:	68fb      	ldr	r3, [r7, #12]
    929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    92a0:	4619      	mov	r1, r3
    92a2:	6838      	ldr	r0, [r7, #0]
    92a4:	4b18      	ldr	r3, [pc, #96]	; (9308 <_tcc_timer_init+0x100>)
    92a6:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    92a8:	6838      	ldr	r0, [r7, #0]
    92aa:	4b18      	ldr	r3, [pc, #96]	; (930c <_tcc_timer_init+0x104>)
    92ac:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    92ae:	6879      	ldr	r1, [r7, #4]
    92b0:	6838      	ldr	r0, [r7, #0]
    92b2:	4b17      	ldr	r3, [pc, #92]	; (9310 <_tcc_timer_init+0x108>)
    92b4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    92b6:	68fb      	ldr	r3, [r7, #12]
    92b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    92bc:	4618      	mov	r0, r3
    92be:	4b15      	ldr	r3, [pc, #84]	; (9314 <_tcc_timer_init+0x10c>)
    92c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    92c2:	68fb      	ldr	r3, [r7, #12]
    92c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    92c8:	4618      	mov	r0, r3
    92ca:	4b13      	ldr	r3, [pc, #76]	; (9318 <_tcc_timer_init+0x110>)
    92cc:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    92ce:	68fb      	ldr	r3, [r7, #12]
    92d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    92d4:	4618      	mov	r0, r3
    92d6:	4b11      	ldr	r3, [pc, #68]	; (931c <_tcc_timer_init+0x114>)
    92d8:	4798      	blx	r3

	return ERR_NONE;
    92da:	2300      	movs	r3, #0
}
    92dc:	4618      	mov	r0, r3
    92de:	3710      	adds	r7, #16
    92e0:	46bd      	mov	sp, r7
    92e2:	bd80      	pop	{r7, pc}
    92e4:	000094ed 	.word	0x000094ed
    92e8:	00008f8d 	.word	0x00008f8d
    92ec:	000090dd 	.word	0x000090dd
    92f0:	000090b5 	.word	0x000090b5
    92f4:	00008f69 	.word	0x00008f69
    92f8:	0000910d 	.word	0x0000910d
    92fc:	00008ff5 	.word	0x00008ff5
    9300:	00009131 	.word	0x00009131
    9304:	0000914f 	.word	0x0000914f
    9308:	0000916d 	.word	0x0000916d
    930c:	00009013 	.word	0x00009013
    9310:	000091b1 	.word	0x000091b1
    9314:	00008ee9 	.word	0x00008ee9
    9318:	00008f2d 	.word	0x00008f2d
    931c:	00008ead 	.word	0x00008ead

00009320 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    9320:	b580      	push	{r7, lr}
    9322:	b084      	sub	sp, #16
    9324:	af00      	add	r7, sp, #0
    9326:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	68db      	ldr	r3, [r3, #12]
    932c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    932e:	68f8      	ldr	r0, [r7, #12]
    9330:	4b0a      	ldr	r3, [pc, #40]	; (935c <_tcc_timer_deinit+0x3c>)
    9332:	4798      	blx	r3
    9334:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    9336:	68bb      	ldr	r3, [r7, #8]
    9338:	2b00      	cmp	r3, #0
    933a:	d00b      	beq.n	9354 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    933c:	68bb      	ldr	r3, [r7, #8]
    933e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9342:	4618      	mov	r0, r3
    9344:	4b06      	ldr	r3, [pc, #24]	; (9360 <_tcc_timer_deinit+0x40>)
    9346:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    9348:	68f8      	ldr	r0, [r7, #12]
    934a:	4b06      	ldr	r3, [pc, #24]	; (9364 <_tcc_timer_deinit+0x44>)
    934c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    934e:	68f8      	ldr	r0, [r7, #12]
    9350:	4b05      	ldr	r3, [pc, #20]	; (9368 <_tcc_timer_deinit+0x48>)
    9352:	4798      	blx	r3
	}
}
    9354:	bf00      	nop
    9356:	3710      	adds	r7, #16
    9358:	46bd      	mov	sp, r7
    935a:	bd80      	pop	{r7, pc}
    935c:	000094ed 	.word	0x000094ed
    9360:	00008ee9 	.word	0x00008ee9
    9364:	000090b5 	.word	0x000090b5
    9368:	0000902d 	.word	0x0000902d

0000936c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    936c:	b580      	push	{r7, lr}
    936e:	b082      	sub	sp, #8
    9370:	af00      	add	r7, sp, #0
    9372:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	68db      	ldr	r3, [r3, #12]
    9378:	4618      	mov	r0, r3
    937a:	4b03      	ldr	r3, [pc, #12]	; (9388 <_tcc_timer_start+0x1c>)
    937c:	4798      	blx	r3
}
    937e:	bf00      	nop
    9380:	3708      	adds	r7, #8
    9382:	46bd      	mov	sp, r7
    9384:	bd80      	pop	{r7, pc}
    9386:	bf00      	nop
    9388:	00009055 	.word	0x00009055

0000938c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    938c:	b580      	push	{r7, lr}
    938e:	b082      	sub	sp, #8
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    9394:	687b      	ldr	r3, [r7, #4]
    9396:	68db      	ldr	r3, [r3, #12]
    9398:	4618      	mov	r0, r3
    939a:	4b03      	ldr	r3, [pc, #12]	; (93a8 <_tcc_timer_stop+0x1c>)
    939c:	4798      	blx	r3
}
    939e:	bf00      	nop
    93a0:	3708      	adds	r7, #8
    93a2:	46bd      	mov	sp, r7
    93a4:	bd80      	pop	{r7, pc}
    93a6:	bf00      	nop
    93a8:	000090b5 	.word	0x000090b5

000093ac <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    93ac:	b580      	push	{r7, lr}
    93ae:	b082      	sub	sp, #8
    93b0:	af00      	add	r7, sp, #0
    93b2:	6078      	str	r0, [r7, #4]
    93b4:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    93b6:	687b      	ldr	r3, [r7, #4]
    93b8:	68db      	ldr	r3, [r3, #12]
    93ba:	6839      	ldr	r1, [r7, #0]
    93bc:	4618      	mov	r0, r3
    93be:	4b03      	ldr	r3, [pc, #12]	; (93cc <_tcc_timer_set_period+0x20>)
    93c0:	4798      	blx	r3
}
    93c2:	bf00      	nop
    93c4:	3708      	adds	r7, #8
    93c6:	46bd      	mov	sp, r7
    93c8:	bd80      	pop	{r7, pc}
    93ca:	bf00      	nop
    93cc:	0000916d 	.word	0x0000916d

000093d0 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    93d0:	b580      	push	{r7, lr}
    93d2:	b082      	sub	sp, #8
    93d4:	af00      	add	r7, sp, #0
    93d6:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    93d8:	687b      	ldr	r3, [r7, #4]
    93da:	68db      	ldr	r3, [r3, #12]
    93dc:	4618      	mov	r0, r3
    93de:	4b03      	ldr	r3, [pc, #12]	; (93ec <_tcc_timer_get_period+0x1c>)
    93e0:	4798      	blx	r3
    93e2:	4603      	mov	r3, r0
}
    93e4:	4618      	mov	r0, r3
    93e6:	3708      	adds	r7, #8
    93e8:	46bd      	mov	sp, r7
    93ea:	bd80      	pop	{r7, pc}
    93ec:	00009191 	.word	0x00009191

000093f0 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    93f0:	b580      	push	{r7, lr}
    93f2:	b082      	sub	sp, #8
    93f4:	af00      	add	r7, sp, #0
    93f6:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    93f8:	687b      	ldr	r3, [r7, #4]
    93fa:	68db      	ldr	r3, [r3, #12]
    93fc:	4618      	mov	r0, r3
    93fe:	4b03      	ldr	r3, [pc, #12]	; (940c <_tcc_timer_is_started+0x1c>)
    9400:	4798      	blx	r3
    9402:	4603      	mov	r3, r0
}
    9404:	4618      	mov	r0, r3
    9406:	3708      	adds	r7, #8
    9408:	46bd      	mov	sp, r7
    940a:	bd80      	pop	{r7, pc}
    940c:	0000907d 	.word	0x0000907d

00009410 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    9410:	b480      	push	{r7}
    9412:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    9414:	4b02      	ldr	r3, [pc, #8]	; (9420 <_tcc_get_timer+0x10>)
}
    9416:	4618      	mov	r0, r3
    9418:	46bd      	mov	sp, r7
    941a:	f85d 7b04 	ldr.w	r7, [sp], #4
    941e:	4770      	bx	lr
    9420:	200000f0 	.word	0x200000f0

00009424 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    9424:	b580      	push	{r7, lr}
    9426:	b084      	sub	sp, #16
    9428:	af00      	add	r7, sp, #0
    942a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    942c:	687b      	ldr	r3, [r7, #4]
    942e:	68db      	ldr	r3, [r3, #12]
    9430:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    9432:	68f8      	ldr	r0, [r7, #12]
    9434:	4b08      	ldr	r3, [pc, #32]	; (9458 <_tcc_timer_set_irq+0x34>)
    9436:	4798      	blx	r3
    9438:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    943a:	68bb      	ldr	r3, [r7, #8]
    943c:	2b00      	cmp	r3, #0
    943e:	d006      	beq.n	944e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    9440:	68bb      	ldr	r3, [r7, #8]
    9442:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9446:	b2db      	uxtb	r3, r3
    9448:	4618      	mov	r0, r3
    944a:	4b04      	ldr	r3, [pc, #16]	; (945c <_tcc_timer_set_irq+0x38>)
    944c:	4798      	blx	r3
	}
}
    944e:	bf00      	nop
    9450:	3710      	adds	r7, #16
    9452:	46bd      	mov	sp, r7
    9454:	bd80      	pop	{r7, pc}
    9456:	bf00      	nop
    9458:	000094ed 	.word	0x000094ed
    945c:	00005bbd 	.word	0x00005bbd

00009460 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    9460:	b580      	push	{r7, lr}
    9462:	b084      	sub	sp, #16
    9464:	af00      	add	r7, sp, #0
    9466:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9468:	687b      	ldr	r3, [r7, #4]
    946a:	68db      	ldr	r3, [r3, #12]
    946c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    946e:	68f8      	ldr	r0, [r7, #12]
    9470:	4b07      	ldr	r3, [pc, #28]	; (9490 <tcc_interrupt_handler+0x30>)
    9472:	4798      	blx	r3
    9474:	4603      	mov	r3, r0
    9476:	2b00      	cmp	r3, #0
    9478:	d006      	beq.n	9488 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    947a:	68f8      	ldr	r0, [r7, #12]
    947c:	4b05      	ldr	r3, [pc, #20]	; (9494 <tcc_interrupt_handler+0x34>)
    947e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	6878      	ldr	r0, [r7, #4]
    9486:	4798      	blx	r3
	}
}
    9488:	bf00      	nop
    948a:	3710      	adds	r7, #16
    948c:	46bd      	mov	sp, r7
    948e:	bd80      	pop	{r7, pc}
    9490:	00008fb5 	.word	0x00008fb5
    9494:	00008fdb 	.word	0x00008fdb

00009498 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    9498:	b580      	push	{r7, lr}
    949a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    949c:	4b03      	ldr	r3, [pc, #12]	; (94ac <TCC0_0_Handler+0x14>)
    949e:	681b      	ldr	r3, [r3, #0]
    94a0:	4618      	mov	r0, r3
    94a2:	4b03      	ldr	r3, [pc, #12]	; (94b0 <TCC0_0_Handler+0x18>)
    94a4:	4798      	blx	r3
}
    94a6:	bf00      	nop
    94a8:	bd80      	pop	{r7, pc}
    94aa:	bf00      	nop
    94ac:	20002350 	.word	0x20002350
    94b0:	00009461 	.word	0x00009461

000094b4 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    94b4:	b580      	push	{r7, lr}
    94b6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    94b8:	4b03      	ldr	r3, [pc, #12]	; (94c8 <TCC1_0_Handler+0x14>)
    94ba:	681b      	ldr	r3, [r3, #0]
    94bc:	4618      	mov	r0, r3
    94be:	4b03      	ldr	r3, [pc, #12]	; (94cc <TCC1_0_Handler+0x18>)
    94c0:	4798      	blx	r3
}
    94c2:	bf00      	nop
    94c4:	bd80      	pop	{r7, pc}
    94c6:	bf00      	nop
    94c8:	20002354 	.word	0x20002354
    94cc:	00009461 	.word	0x00009461

000094d0 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    94d0:	b580      	push	{r7, lr}
    94d2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    94d4:	4b03      	ldr	r3, [pc, #12]	; (94e4 <TCC2_0_Handler+0x14>)
    94d6:	681b      	ldr	r3, [r3, #0]
    94d8:	4618      	mov	r0, r3
    94da:	4b03      	ldr	r3, [pc, #12]	; (94e8 <TCC2_0_Handler+0x18>)
    94dc:	4798      	blx	r3
}
    94de:	bf00      	nop
    94e0:	bd80      	pop	{r7, pc}
    94e2:	bf00      	nop
    94e4:	20002358 	.word	0x20002358
    94e8:	00009461 	.word	0x00009461

000094ec <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    94ec:	b480      	push	{r7}
    94ee:	b085      	sub	sp, #20
    94f0:	af00      	add	r7, sp, #0
    94f2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    94f4:	2300      	movs	r3, #0
    94f6:	73fb      	strb	r3, [r7, #15]
    94f8:	e015      	b.n	9526 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    94fa:	7bfa      	ldrb	r2, [r7, #15]
    94fc:	490f      	ldr	r1, [pc, #60]	; (953c <_get_tcc_cfg+0x50>)
    94fe:	4613      	mov	r3, r2
    9500:	005b      	lsls	r3, r3, #1
    9502:	4413      	add	r3, r2
    9504:	011b      	lsls	r3, r3, #4
    9506:	440b      	add	r3, r1
    9508:	681a      	ldr	r2, [r3, #0]
    950a:	687b      	ldr	r3, [r7, #4]
    950c:	429a      	cmp	r2, r3
    950e:	d107      	bne.n	9520 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    9510:	7bfa      	ldrb	r2, [r7, #15]
    9512:	4613      	mov	r3, r2
    9514:	005b      	lsls	r3, r3, #1
    9516:	4413      	add	r3, r2
    9518:	011b      	lsls	r3, r3, #4
    951a:	4a08      	ldr	r2, [pc, #32]	; (953c <_get_tcc_cfg+0x50>)
    951c:	4413      	add	r3, r2
    951e:	e006      	b.n	952e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    9520:	7bfb      	ldrb	r3, [r7, #15]
    9522:	3301      	adds	r3, #1
    9524:	73fb      	strb	r3, [r7, #15]
    9526:	7bfb      	ldrb	r3, [r7, #15]
    9528:	2b02      	cmp	r3, #2
    952a:	d9e6      	bls.n	94fa <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    952c:	2300      	movs	r3, #0
}
    952e:	4618      	mov	r0, r3
    9530:	3714      	adds	r7, #20
    9532:	46bd      	mov	sp, r7
    9534:	f85d 7b04 	ldr.w	r7, [sp], #4
    9538:	4770      	bx	lr
    953a:	bf00      	nop
    953c:	20000060 	.word	0x20000060

00009540 <__NVIC_EnableIRQ>:
{
    9540:	b480      	push	{r7}
    9542:	b083      	sub	sp, #12
    9544:	af00      	add	r7, sp, #0
    9546:	4603      	mov	r3, r0
    9548:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    954a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    954e:	2b00      	cmp	r3, #0
    9550:	db0b      	blt.n	956a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9552:	4909      	ldr	r1, [pc, #36]	; (9578 <__NVIC_EnableIRQ+0x38>)
    9554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9558:	095b      	lsrs	r3, r3, #5
    955a:	88fa      	ldrh	r2, [r7, #6]
    955c:	f002 021f 	and.w	r2, r2, #31
    9560:	2001      	movs	r0, #1
    9562:	fa00 f202 	lsl.w	r2, r0, r2
    9566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    956a:	bf00      	nop
    956c:	370c      	adds	r7, #12
    956e:	46bd      	mov	sp, r7
    9570:	f85d 7b04 	ldr.w	r7, [sp], #4
    9574:	4770      	bx	lr
    9576:	bf00      	nop
    9578:	e000e100 	.word	0xe000e100

0000957c <__NVIC_DisableIRQ>:
{
    957c:	b480      	push	{r7}
    957e:	b083      	sub	sp, #12
    9580:	af00      	add	r7, sp, #0
    9582:	4603      	mov	r3, r0
    9584:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    958a:	2b00      	cmp	r3, #0
    958c:	db10      	blt.n	95b0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    958e:	490b      	ldr	r1, [pc, #44]	; (95bc <__NVIC_DisableIRQ+0x40>)
    9590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9594:	095b      	lsrs	r3, r3, #5
    9596:	88fa      	ldrh	r2, [r7, #6]
    9598:	f002 021f 	and.w	r2, r2, #31
    959c:	2001      	movs	r0, #1
    959e:	fa00 f202 	lsl.w	r2, r0, r2
    95a2:	3320      	adds	r3, #32
    95a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    95a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    95ac:	f3bf 8f6f 	isb	sy
}
    95b0:	bf00      	nop
    95b2:	370c      	adds	r7, #12
    95b4:	46bd      	mov	sp, r7
    95b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ba:	4770      	bx	lr
    95bc:	e000e100 	.word	0xe000e100

000095c0 <__NVIC_ClearPendingIRQ>:
{
    95c0:	b480      	push	{r7}
    95c2:	b083      	sub	sp, #12
    95c4:	af00      	add	r7, sp, #0
    95c6:	4603      	mov	r3, r0
    95c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    95ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    95ce:	2b00      	cmp	r3, #0
    95d0:	db0c      	blt.n	95ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    95d2:	4909      	ldr	r1, [pc, #36]	; (95f8 <__NVIC_ClearPendingIRQ+0x38>)
    95d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    95d8:	095b      	lsrs	r3, r3, #5
    95da:	88fa      	ldrh	r2, [r7, #6]
    95dc:	f002 021f 	and.w	r2, r2, #31
    95e0:	2001      	movs	r0, #1
    95e2:	fa00 f202 	lsl.w	r2, r0, r2
    95e6:	3360      	adds	r3, #96	; 0x60
    95e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95ec:	bf00      	nop
    95ee:	370c      	adds	r7, #12
    95f0:	46bd      	mov	sp, r7
    95f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95f6:	4770      	bx	lr
    95f8:	e000e100 	.word	0xe000e100

000095fc <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    95fc:	b480      	push	{r7}
    95fe:	b083      	sub	sp, #12
    9600:	af00      	add	r7, sp, #0
    9602:	6078      	str	r0, [r7, #4]
    9604:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9606:	bf00      	nop
    9608:	687b      	ldr	r3, [r7, #4]
    960a:	691a      	ldr	r2, [r3, #16]
    960c:	683b      	ldr	r3, [r7, #0]
    960e:	4013      	ands	r3, r2
    9610:	2b00      	cmp	r3, #0
    9612:	d1f9      	bne.n	9608 <hri_tc_wait_for_sync+0xc>
	};
}
    9614:	bf00      	nop
    9616:	370c      	adds	r7, #12
    9618:	46bd      	mov	sp, r7
    961a:	f85d 7b04 	ldr.w	r7, [sp], #4
    961e:	4770      	bx	lr

00009620 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9620:	b480      	push	{r7}
    9622:	b083      	sub	sp, #12
    9624:	af00      	add	r7, sp, #0
    9626:	6078      	str	r0, [r7, #4]
    9628:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    962a:	687b      	ldr	r3, [r7, #4]
    962c:	691a      	ldr	r2, [r3, #16]
    962e:	683b      	ldr	r3, [r7, #0]
    9630:	4013      	ands	r3, r2
    9632:	2b00      	cmp	r3, #0
    9634:	bf14      	ite	ne
    9636:	2301      	movne	r3, #1
    9638:	2300      	moveq	r3, #0
    963a:	b2db      	uxtb	r3, r3
}
    963c:	4618      	mov	r0, r3
    963e:	370c      	adds	r7, #12
    9640:	46bd      	mov	sp, r7
    9642:	f85d 7b04 	ldr.w	r7, [sp], #4
    9646:	4770      	bx	lr

00009648 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    9648:	b480      	push	{r7}
    964a:	b083      	sub	sp, #12
    964c:	af00      	add	r7, sp, #0
    964e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    9650:	687b      	ldr	r3, [r7, #4]
    9652:	7a9b      	ldrb	r3, [r3, #10]
    9654:	b2db      	uxtb	r3, r3
    9656:	f003 0301 	and.w	r3, r3, #1
    965a:	2b00      	cmp	r3, #0
    965c:	bf14      	ite	ne
    965e:	2301      	movne	r3, #1
    9660:	2300      	moveq	r3, #0
    9662:	b2db      	uxtb	r3, r3
}
    9664:	4618      	mov	r0, r3
    9666:	370c      	adds	r7, #12
    9668:	46bd      	mov	sp, r7
    966a:	f85d 7b04 	ldr.w	r7, [sp], #4
    966e:	4770      	bx	lr

00009670 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    9670:	b480      	push	{r7}
    9672:	b083      	sub	sp, #12
    9674:	af00      	add	r7, sp, #0
    9676:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    9678:	687b      	ldr	r3, [r7, #4]
    967a:	2201      	movs	r2, #1
    967c:	729a      	strb	r2, [r3, #10]
}
    967e:	bf00      	nop
    9680:	370c      	adds	r7, #12
    9682:	46bd      	mov	sp, r7
    9684:	f85d 7b04 	ldr.w	r7, [sp], #4
    9688:	4770      	bx	lr

0000968a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    968a:	b480      	push	{r7}
    968c:	b083      	sub	sp, #12
    968e:	af00      	add	r7, sp, #0
    9690:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    9692:	687b      	ldr	r3, [r7, #4]
    9694:	2202      	movs	r2, #2
    9696:	729a      	strb	r2, [r3, #10]
}
    9698:	bf00      	nop
    969a:	370c      	adds	r7, #12
    969c:	46bd      	mov	sp, r7
    969e:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a2:	4770      	bx	lr

000096a4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    96a4:	b480      	push	{r7}
    96a6:	b083      	sub	sp, #12
    96a8:	af00      	add	r7, sp, #0
    96aa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	2201      	movs	r2, #1
    96b0:	725a      	strb	r2, [r3, #9]
}
    96b2:	bf00      	nop
    96b4:	370c      	adds	r7, #12
    96b6:	46bd      	mov	sp, r7
    96b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96bc:	4770      	bx	lr

000096be <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    96be:	b480      	push	{r7}
    96c0:	b083      	sub	sp, #12
    96c2:	af00      	add	r7, sp, #0
    96c4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    96c6:	687b      	ldr	r3, [r7, #4]
    96c8:	7a5b      	ldrb	r3, [r3, #9]
    96ca:	b2db      	uxtb	r3, r3
    96cc:	085b      	lsrs	r3, r3, #1
    96ce:	f003 0301 	and.w	r3, r3, #1
    96d2:	2b00      	cmp	r3, #0
    96d4:	bf14      	ite	ne
    96d6:	2301      	movne	r3, #1
    96d8:	2300      	moveq	r3, #0
    96da:	b2db      	uxtb	r3, r3
}
    96dc:	4618      	mov	r0, r3
    96de:	370c      	adds	r7, #12
    96e0:	46bd      	mov	sp, r7
    96e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    96e6:	4770      	bx	lr

000096e8 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    96e8:	b580      	push	{r7, lr}
    96ea:	b082      	sub	sp, #8
    96ec:	af00      	add	r7, sp, #0
    96ee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	681b      	ldr	r3, [r3, #0]
    96f4:	f043 0201 	orr.w	r2, r3, #1
    96f8:	687b      	ldr	r3, [r7, #4]
    96fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    96fc:	2101      	movs	r1, #1
    96fe:	6878      	ldr	r0, [r7, #4]
    9700:	4b02      	ldr	r3, [pc, #8]	; (970c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    9702:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9704:	bf00      	nop
    9706:	3708      	adds	r7, #8
    9708:	46bd      	mov	sp, r7
    970a:	bd80      	pop	{r7, pc}
    970c:	000095fd 	.word	0x000095fd

00009710 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9710:	b580      	push	{r7, lr}
    9712:	b082      	sub	sp, #8
    9714:	af00      	add	r7, sp, #0
    9716:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9718:	687b      	ldr	r3, [r7, #4]
    971a:	681b      	ldr	r3, [r3, #0]
    971c:	f043 0202 	orr.w	r2, r3, #2
    9720:	687b      	ldr	r3, [r7, #4]
    9722:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9724:	2103      	movs	r1, #3
    9726:	6878      	ldr	r0, [r7, #4]
    9728:	4b02      	ldr	r3, [pc, #8]	; (9734 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    972a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    972c:	bf00      	nop
    972e:	3708      	adds	r7, #8
    9730:	46bd      	mov	sp, r7
    9732:	bd80      	pop	{r7, pc}
    9734:	000095fd 	.word	0x000095fd

00009738 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9738:	b580      	push	{r7, lr}
    973a:	b084      	sub	sp, #16
    973c:	af00      	add	r7, sp, #0
    973e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9740:	2103      	movs	r1, #3
    9742:	6878      	ldr	r0, [r7, #4]
    9744:	4b09      	ldr	r3, [pc, #36]	; (976c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    9746:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9748:	687b      	ldr	r3, [r7, #4]
    974a:	681b      	ldr	r3, [r3, #0]
    974c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    974e:	68fb      	ldr	r3, [r7, #12]
    9750:	085b      	lsrs	r3, r3, #1
    9752:	f003 0301 	and.w	r3, r3, #1
    9756:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9758:	68fb      	ldr	r3, [r7, #12]
    975a:	2b00      	cmp	r3, #0
    975c:	bf14      	ite	ne
    975e:	2301      	movne	r3, #1
    9760:	2300      	moveq	r3, #0
    9762:	b2db      	uxtb	r3, r3
}
    9764:	4618      	mov	r0, r3
    9766:	3710      	adds	r7, #16
    9768:	46bd      	mov	sp, r7
    976a:	bd80      	pop	{r7, pc}
    976c:	000095fd 	.word	0x000095fd

00009770 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9770:	b580      	push	{r7, lr}
    9772:	b082      	sub	sp, #8
    9774:	af00      	add	r7, sp, #0
    9776:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9778:	687b      	ldr	r3, [r7, #4]
    977a:	681b      	ldr	r3, [r3, #0]
    977c:	f023 0202 	bic.w	r2, r3, #2
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9784:	2103      	movs	r1, #3
    9786:	6878      	ldr	r0, [r7, #4]
    9788:	4b02      	ldr	r3, [pc, #8]	; (9794 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    978a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    978c:	bf00      	nop
    978e:	3708      	adds	r7, #8
    9790:	46bd      	mov	sp, r7
    9792:	bd80      	pop	{r7, pc}
    9794:	000095fd 	.word	0x000095fd

00009798 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    9798:	b480      	push	{r7}
    979a:	b085      	sub	sp, #20
    979c:	af00      	add	r7, sp, #0
    979e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    97a0:	687b      	ldr	r3, [r7, #4]
    97a2:	681b      	ldr	r3, [r3, #0]
    97a4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    97a6:	68fb      	ldr	r3, [r7, #12]
    97a8:	089b      	lsrs	r3, r3, #2
    97aa:	f003 0303 	and.w	r3, r3, #3
    97ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    97b0:	68fb      	ldr	r3, [r7, #12]
}
    97b2:	4618      	mov	r0, r3
    97b4:	3714      	adds	r7, #20
    97b6:	46bd      	mov	sp, r7
    97b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    97bc:	4770      	bx	lr
	...

000097c0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    97c0:	b580      	push	{r7, lr}
    97c2:	b084      	sub	sp, #16
    97c4:	af00      	add	r7, sp, #0
    97c6:	6078      	str	r0, [r7, #4]
    97c8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    97ca:	2103      	movs	r1, #3
    97cc:	6878      	ldr	r0, [r7, #4]
    97ce:	4b07      	ldr	r3, [pc, #28]	; (97ec <hri_tc_get_CTRLA_reg+0x2c>)
    97d0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    97d2:	687b      	ldr	r3, [r7, #4]
    97d4:	681b      	ldr	r3, [r3, #0]
    97d6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    97d8:	68fa      	ldr	r2, [r7, #12]
    97da:	683b      	ldr	r3, [r7, #0]
    97dc:	4013      	ands	r3, r2
    97de:	60fb      	str	r3, [r7, #12]
	return tmp;
    97e0:	68fb      	ldr	r3, [r7, #12]
}
    97e2:	4618      	mov	r0, r3
    97e4:	3710      	adds	r7, #16
    97e6:	46bd      	mov	sp, r7
    97e8:	bd80      	pop	{r7, pc}
    97ea:	bf00      	nop
    97ec:	000095fd 	.word	0x000095fd

000097f0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    97f0:	b580      	push	{r7, lr}
    97f2:	b082      	sub	sp, #8
    97f4:	af00      	add	r7, sp, #0
    97f6:	6078      	str	r0, [r7, #4]
    97f8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    97fa:	687b      	ldr	r3, [r7, #4]
    97fc:	683a      	ldr	r2, [r7, #0]
    97fe:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9800:	2103      	movs	r1, #3
    9802:	6878      	ldr	r0, [r7, #4]
    9804:	4b02      	ldr	r3, [pc, #8]	; (9810 <hri_tc_write_CTRLA_reg+0x20>)
    9806:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9808:	bf00      	nop
    980a:	3708      	adds	r7, #8
    980c:	46bd      	mov	sp, r7
    980e:	bd80      	pop	{r7, pc}
    9810:	000095fd 	.word	0x000095fd

00009814 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    9814:	b480      	push	{r7}
    9816:	b083      	sub	sp, #12
    9818:	af00      	add	r7, sp, #0
    981a:	6078      	str	r0, [r7, #4]
    981c:	460b      	mov	r3, r1
    981e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	887a      	ldrh	r2, [r7, #2]
    9824:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    9826:	bf00      	nop
    9828:	370c      	adds	r7, #12
    982a:	46bd      	mov	sp, r7
    982c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9830:	4770      	bx	lr

00009832 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    9832:	b480      	push	{r7}
    9834:	b083      	sub	sp, #12
    9836:	af00      	add	r7, sp, #0
    9838:	6078      	str	r0, [r7, #4]
    983a:	460b      	mov	r3, r1
    983c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    983e:	687b      	ldr	r3, [r7, #4]
    9840:	78fa      	ldrb	r2, [r7, #3]
    9842:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    9844:	bf00      	nop
    9846:	370c      	adds	r7, #12
    9848:	46bd      	mov	sp, r7
    984a:	f85d 7b04 	ldr.w	r7, [sp], #4
    984e:	4770      	bx	lr

00009850 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9850:	b480      	push	{r7}
    9852:	b083      	sub	sp, #12
    9854:	af00      	add	r7, sp, #0
    9856:	6078      	str	r0, [r7, #4]
    9858:	460b      	mov	r3, r1
    985a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    985c:	687b      	ldr	r3, [r7, #4]
    985e:	78fa      	ldrb	r2, [r7, #3]
    9860:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    9862:	bf00      	nop
    9864:	370c      	adds	r7, #12
    9866:	46bd      	mov	sp, r7
    9868:	f85d 7b04 	ldr.w	r7, [sp], #4
    986c:	4770      	bx	lr
	...

00009870 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9870:	b580      	push	{r7, lr}
    9872:	b082      	sub	sp, #8
    9874:	af00      	add	r7, sp, #0
    9876:	6078      	str	r0, [r7, #4]
    9878:	460b      	mov	r3, r1
    987a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    987c:	687b      	ldr	r3, [r7, #4]
    987e:	78fa      	ldrb	r2, [r7, #3]
    9880:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9882:	2120      	movs	r1, #32
    9884:	6878      	ldr	r0, [r7, #4]
    9886:	4b03      	ldr	r3, [pc, #12]	; (9894 <hri_tccount8_write_PER_reg+0x24>)
    9888:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    988a:	bf00      	nop
    988c:	3708      	adds	r7, #8
    988e:	46bd      	mov	sp, r7
    9890:	bd80      	pop	{r7, pc}
    9892:	bf00      	nop
    9894:	000095fd 	.word	0x000095fd

00009898 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    9898:	b580      	push	{r7, lr}
    989a:	b082      	sub	sp, #8
    989c:	af00      	add	r7, sp, #0
    989e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    98a0:	2120      	movs	r1, #32
    98a2:	6878      	ldr	r0, [r7, #4]
    98a4:	4b04      	ldr	r3, [pc, #16]	; (98b8 <hri_tccount8_read_PER_reg+0x20>)
    98a6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	7edb      	ldrb	r3, [r3, #27]
    98ac:	b2db      	uxtb	r3, r3
}
    98ae:	4618      	mov	r0, r3
    98b0:	3708      	adds	r7, #8
    98b2:	46bd      	mov	sp, r7
    98b4:	bd80      	pop	{r7, pc}
    98b6:	bf00      	nop
    98b8:	000095fd 	.word	0x000095fd

000098bc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    98bc:	b580      	push	{r7, lr}
    98be:	b082      	sub	sp, #8
    98c0:	af00      	add	r7, sp, #0
    98c2:	6078      	str	r0, [r7, #4]
    98c4:	460b      	mov	r3, r1
    98c6:	70fb      	strb	r3, [r7, #3]
    98c8:	4613      	mov	r3, r2
    98ca:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    98cc:	78fb      	ldrb	r3, [r7, #3]
    98ce:	687a      	ldr	r2, [r7, #4]
    98d0:	4413      	add	r3, r2
    98d2:	78ba      	ldrb	r2, [r7, #2]
    98d4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    98d6:	21c0      	movs	r1, #192	; 0xc0
    98d8:	6878      	ldr	r0, [r7, #4]
    98da:	4b03      	ldr	r3, [pc, #12]	; (98e8 <hri_tccount8_write_CC_reg+0x2c>)
    98dc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    98de:	bf00      	nop
    98e0:	3708      	adds	r7, #8
    98e2:	46bd      	mov	sp, r7
    98e4:	bd80      	pop	{r7, pc}
    98e6:	bf00      	nop
    98e8:	000095fd 	.word	0x000095fd

000098ec <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    98ec:	b580      	push	{r7, lr}
    98ee:	b082      	sub	sp, #8
    98f0:	af00      	add	r7, sp, #0
    98f2:	6078      	str	r0, [r7, #4]
    98f4:	460b      	mov	r3, r1
    98f6:	70fb      	strb	r3, [r7, #3]
    98f8:	4613      	mov	r3, r2
    98fa:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    98fc:	78fb      	ldrb	r3, [r7, #3]
    98fe:	687a      	ldr	r2, [r7, #4]
    9900:	330c      	adds	r3, #12
    9902:	005b      	lsls	r3, r3, #1
    9904:	4413      	add	r3, r2
    9906:	883a      	ldrh	r2, [r7, #0]
    9908:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    990a:	21c0      	movs	r1, #192	; 0xc0
    990c:	6878      	ldr	r0, [r7, #4]
    990e:	4b03      	ldr	r3, [pc, #12]	; (991c <hri_tccount16_write_CC_reg+0x30>)
    9910:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9912:	bf00      	nop
    9914:	3708      	adds	r7, #8
    9916:	46bd      	mov	sp, r7
    9918:	bd80      	pop	{r7, pc}
    991a:	bf00      	nop
    991c:	000095fd 	.word	0x000095fd

00009920 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    9920:	b580      	push	{r7, lr}
    9922:	b082      	sub	sp, #8
    9924:	af00      	add	r7, sp, #0
    9926:	6078      	str	r0, [r7, #4]
    9928:	460b      	mov	r3, r1
    992a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    992c:	21c0      	movs	r1, #192	; 0xc0
    992e:	6878      	ldr	r0, [r7, #4]
    9930:	4b06      	ldr	r3, [pc, #24]	; (994c <hri_tccount16_read_CC_reg+0x2c>)
    9932:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    9934:	78fb      	ldrb	r3, [r7, #3]
    9936:	687a      	ldr	r2, [r7, #4]
    9938:	330c      	adds	r3, #12
    993a:	005b      	lsls	r3, r3, #1
    993c:	4413      	add	r3, r2
    993e:	889b      	ldrh	r3, [r3, #4]
    9940:	b29b      	uxth	r3, r3
}
    9942:	4618      	mov	r0, r3
    9944:	3708      	adds	r7, #8
    9946:	46bd      	mov	sp, r7
    9948:	bd80      	pop	{r7, pc}
    994a:	bf00      	nop
    994c:	000095fd 	.word	0x000095fd

00009950 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    9950:	b580      	push	{r7, lr}
    9952:	b084      	sub	sp, #16
    9954:	af00      	add	r7, sp, #0
    9956:	60f8      	str	r0, [r7, #12]
    9958:	460b      	mov	r3, r1
    995a:	607a      	str	r2, [r7, #4]
    995c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    995e:	7afb      	ldrb	r3, [r7, #11]
    9960:	68fa      	ldr	r2, [r7, #12]
    9962:	3306      	adds	r3, #6
    9964:	009b      	lsls	r3, r3, #2
    9966:	4413      	add	r3, r2
    9968:	687a      	ldr	r2, [r7, #4]
    996a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    996c:	21c0      	movs	r1, #192	; 0xc0
    996e:	68f8      	ldr	r0, [r7, #12]
    9970:	4b02      	ldr	r3, [pc, #8]	; (997c <hri_tccount32_write_CC_reg+0x2c>)
    9972:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9974:	bf00      	nop
    9976:	3710      	adds	r7, #16
    9978:	46bd      	mov	sp, r7
    997a:	bd80      	pop	{r7, pc}
    997c:	000095fd 	.word	0x000095fd

00009980 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    9980:	b580      	push	{r7, lr}
    9982:	b082      	sub	sp, #8
    9984:	af00      	add	r7, sp, #0
    9986:	6078      	str	r0, [r7, #4]
    9988:	460b      	mov	r3, r1
    998a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    998c:	21c0      	movs	r1, #192	; 0xc0
    998e:	6878      	ldr	r0, [r7, #4]
    9990:	4b05      	ldr	r3, [pc, #20]	; (99a8 <hri_tccount32_read_CC_reg+0x28>)
    9992:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    9994:	78fb      	ldrb	r3, [r7, #3]
    9996:	687a      	ldr	r2, [r7, #4]
    9998:	3306      	adds	r3, #6
    999a:	009b      	lsls	r3, r3, #2
    999c:	4413      	add	r3, r2
    999e:	685b      	ldr	r3, [r3, #4]
}
    99a0:	4618      	mov	r0, r3
    99a2:	3708      	adds	r7, #8
    99a4:	46bd      	mov	sp, r7
    99a6:	bd80      	pop	{r7, pc}
    99a8:	000095fd 	.word	0x000095fd

000099ac <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    99ac:	b580      	push	{r7, lr}
    99ae:	b084      	sub	sp, #16
    99b0:	af00      	add	r7, sp, #0
    99b2:	6078      	str	r0, [r7, #4]
    99b4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    99b6:	6838      	ldr	r0, [r7, #0]
    99b8:	4b93      	ldr	r3, [pc, #588]	; (9c08 <_tc_timer_init+0x25c>)
    99ba:	4798      	blx	r3
    99bc:	4603      	mov	r3, r0
    99be:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    99c0:	687b      	ldr	r3, [r7, #4]
    99c2:	683a      	ldr	r2, [r7, #0]
    99c4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    99c6:	22a4      	movs	r2, #164	; 0xa4
    99c8:	4990      	ldr	r1, [pc, #576]	; (9c0c <_tc_timer_init+0x260>)
    99ca:	2001      	movs	r0, #1
    99cc:	4b90      	ldr	r3, [pc, #576]	; (9c10 <_tc_timer_init+0x264>)
    99ce:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    99d0:	2101      	movs	r1, #1
    99d2:	6838      	ldr	r0, [r7, #0]
    99d4:	4b8f      	ldr	r3, [pc, #572]	; (9c14 <_tc_timer_init+0x268>)
    99d6:	4798      	blx	r3
    99d8:	4603      	mov	r3, r0
    99da:	f083 0301 	eor.w	r3, r3, #1
    99de:	b2db      	uxtb	r3, r3
    99e0:	2b00      	cmp	r3, #0
    99e2:	d011      	beq.n	9a08 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    99e4:	2102      	movs	r1, #2
    99e6:	6838      	ldr	r0, [r7, #0]
    99e8:	4b8b      	ldr	r3, [pc, #556]	; (9c18 <_tc_timer_init+0x26c>)
    99ea:	4798      	blx	r3
    99ec:	4603      	mov	r3, r0
    99ee:	2b00      	cmp	r3, #0
    99f0:	d006      	beq.n	9a00 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    99f2:	6838      	ldr	r0, [r7, #0]
    99f4:	4b89      	ldr	r3, [pc, #548]	; (9c1c <_tc_timer_init+0x270>)
    99f6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    99f8:	2102      	movs	r1, #2
    99fa:	6838      	ldr	r0, [r7, #0]
    99fc:	4b88      	ldr	r3, [pc, #544]	; (9c20 <_tc_timer_init+0x274>)
    99fe:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9a00:	2101      	movs	r1, #1
    9a02:	6838      	ldr	r0, [r7, #0]
    9a04:	4b87      	ldr	r3, [pc, #540]	; (9c24 <_tc_timer_init+0x278>)
    9a06:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9a08:	2101      	movs	r1, #1
    9a0a:	6838      	ldr	r0, [r7, #0]
    9a0c:	4b84      	ldr	r3, [pc, #528]	; (9c20 <_tc_timer_init+0x274>)
    9a0e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9a10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a14:	4984      	ldr	r1, [pc, #528]	; (9c28 <_tc_timer_init+0x27c>)
    9a16:	4613      	mov	r3, r2
    9a18:	009b      	lsls	r3, r3, #2
    9a1a:	4413      	add	r3, r2
    9a1c:	009b      	lsls	r3, r3, #2
    9a1e:	440b      	add	r3, r1
    9a20:	3304      	adds	r3, #4
    9a22:	681b      	ldr	r3, [r3, #0]
    9a24:	4619      	mov	r1, r3
    9a26:	6838      	ldr	r0, [r7, #0]
    9a28:	4b7e      	ldr	r3, [pc, #504]	; (9c24 <_tc_timer_init+0x278>)
    9a2a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9a2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a30:	497d      	ldr	r1, [pc, #500]	; (9c28 <_tc_timer_init+0x27c>)
    9a32:	4613      	mov	r3, r2
    9a34:	009b      	lsls	r3, r3, #2
    9a36:	4413      	add	r3, r2
    9a38:	009b      	lsls	r3, r3, #2
    9a3a:	440b      	add	r3, r1
    9a3c:	330a      	adds	r3, #10
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	4619      	mov	r1, r3
    9a42:	6838      	ldr	r0, [r7, #0]
    9a44:	4b79      	ldr	r3, [pc, #484]	; (9c2c <_tc_timer_init+0x280>)
    9a46:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9a48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a4c:	4976      	ldr	r1, [pc, #472]	; (9c28 <_tc_timer_init+0x27c>)
    9a4e:	4613      	mov	r3, r2
    9a50:	009b      	lsls	r3, r3, #2
    9a52:	4413      	add	r3, r2
    9a54:	009b      	lsls	r3, r3, #2
    9a56:	440b      	add	r3, r1
    9a58:	3308      	adds	r3, #8
    9a5a:	881b      	ldrh	r3, [r3, #0]
    9a5c:	4619      	mov	r1, r3
    9a5e:	6838      	ldr	r0, [r7, #0]
    9a60:	4b73      	ldr	r3, [pc, #460]	; (9c30 <_tc_timer_init+0x284>)
    9a62:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    9a64:	2101      	movs	r1, #1
    9a66:	6838      	ldr	r0, [r7, #0]
    9a68:	4b72      	ldr	r3, [pc, #456]	; (9c34 <_tc_timer_init+0x288>)
    9a6a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9a6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a70:	496d      	ldr	r1, [pc, #436]	; (9c28 <_tc_timer_init+0x27c>)
    9a72:	4613      	mov	r3, r2
    9a74:	009b      	lsls	r3, r3, #2
    9a76:	4413      	add	r3, r2
    9a78:	009b      	lsls	r3, r3, #2
    9a7a:	440b      	add	r3, r1
    9a7c:	3304      	adds	r3, #4
    9a7e:	681b      	ldr	r3, [r3, #0]
    9a80:	f003 030c 	and.w	r3, r3, #12
    9a84:	2b08      	cmp	r3, #8
    9a86:	d11e      	bne.n	9ac6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9a88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a8c:	4966      	ldr	r1, [pc, #408]	; (9c28 <_tc_timer_init+0x27c>)
    9a8e:	4613      	mov	r3, r2
    9a90:	009b      	lsls	r3, r3, #2
    9a92:	4413      	add	r3, r2
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	440b      	add	r3, r1
    9a98:	330c      	adds	r3, #12
    9a9a:	681b      	ldr	r3, [r3, #0]
    9a9c:	461a      	mov	r2, r3
    9a9e:	2100      	movs	r1, #0
    9aa0:	6838      	ldr	r0, [r7, #0]
    9aa2:	4b65      	ldr	r3, [pc, #404]	; (9c38 <_tc_timer_init+0x28c>)
    9aa4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9aa6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9aaa:	495f      	ldr	r1, [pc, #380]	; (9c28 <_tc_timer_init+0x27c>)
    9aac:	4613      	mov	r3, r2
    9aae:	009b      	lsls	r3, r3, #2
    9ab0:	4413      	add	r3, r2
    9ab2:	009b      	lsls	r3, r3, #2
    9ab4:	440b      	add	r3, r1
    9ab6:	3310      	adds	r3, #16
    9ab8:	681b      	ldr	r3, [r3, #0]
    9aba:	461a      	mov	r2, r3
    9abc:	2101      	movs	r1, #1
    9abe:	6838      	ldr	r0, [r7, #0]
    9ac0:	4b5d      	ldr	r3, [pc, #372]	; (9c38 <_tc_timer_init+0x28c>)
    9ac2:	4798      	blx	r3
    9ac4:	e06a      	b.n	9b9c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9ac6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9aca:	4957      	ldr	r1, [pc, #348]	; (9c28 <_tc_timer_init+0x27c>)
    9acc:	4613      	mov	r3, r2
    9ace:	009b      	lsls	r3, r3, #2
    9ad0:	4413      	add	r3, r2
    9ad2:	009b      	lsls	r3, r3, #2
    9ad4:	440b      	add	r3, r1
    9ad6:	3304      	adds	r3, #4
    9ad8:	681b      	ldr	r3, [r3, #0]
    9ada:	f003 030c 	and.w	r3, r3, #12
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d120      	bne.n	9b24 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9ae2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ae6:	4950      	ldr	r1, [pc, #320]	; (9c28 <_tc_timer_init+0x27c>)
    9ae8:	4613      	mov	r3, r2
    9aea:	009b      	lsls	r3, r3, #2
    9aec:	4413      	add	r3, r2
    9aee:	009b      	lsls	r3, r3, #2
    9af0:	440b      	add	r3, r1
    9af2:	330c      	adds	r3, #12
    9af4:	681b      	ldr	r3, [r3, #0]
    9af6:	b29b      	uxth	r3, r3
    9af8:	461a      	mov	r2, r3
    9afa:	2100      	movs	r1, #0
    9afc:	6838      	ldr	r0, [r7, #0]
    9afe:	4b4f      	ldr	r3, [pc, #316]	; (9c3c <_tc_timer_init+0x290>)
    9b00:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9b02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b06:	4948      	ldr	r1, [pc, #288]	; (9c28 <_tc_timer_init+0x27c>)
    9b08:	4613      	mov	r3, r2
    9b0a:	009b      	lsls	r3, r3, #2
    9b0c:	4413      	add	r3, r2
    9b0e:	009b      	lsls	r3, r3, #2
    9b10:	440b      	add	r3, r1
    9b12:	3310      	adds	r3, #16
    9b14:	681b      	ldr	r3, [r3, #0]
    9b16:	b29b      	uxth	r3, r3
    9b18:	461a      	mov	r2, r3
    9b1a:	2101      	movs	r1, #1
    9b1c:	6838      	ldr	r0, [r7, #0]
    9b1e:	4b47      	ldr	r3, [pc, #284]	; (9c3c <_tc_timer_init+0x290>)
    9b20:	4798      	blx	r3
    9b22:	e03b      	b.n	9b9c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9b24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b28:	493f      	ldr	r1, [pc, #252]	; (9c28 <_tc_timer_init+0x27c>)
    9b2a:	4613      	mov	r3, r2
    9b2c:	009b      	lsls	r3, r3, #2
    9b2e:	4413      	add	r3, r2
    9b30:	009b      	lsls	r3, r3, #2
    9b32:	440b      	add	r3, r1
    9b34:	3304      	adds	r3, #4
    9b36:	681b      	ldr	r3, [r3, #0]
    9b38:	f003 030c 	and.w	r3, r3, #12
    9b3c:	2b04      	cmp	r3, #4
    9b3e:	d12d      	bne.n	9b9c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9b40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b44:	4938      	ldr	r1, [pc, #224]	; (9c28 <_tc_timer_init+0x27c>)
    9b46:	4613      	mov	r3, r2
    9b48:	009b      	lsls	r3, r3, #2
    9b4a:	4413      	add	r3, r2
    9b4c:	009b      	lsls	r3, r3, #2
    9b4e:	440b      	add	r3, r1
    9b50:	330c      	adds	r3, #12
    9b52:	681b      	ldr	r3, [r3, #0]
    9b54:	b2db      	uxtb	r3, r3
    9b56:	461a      	mov	r2, r3
    9b58:	2100      	movs	r1, #0
    9b5a:	6838      	ldr	r0, [r7, #0]
    9b5c:	4b38      	ldr	r3, [pc, #224]	; (9c40 <_tc_timer_init+0x294>)
    9b5e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9b60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b64:	4930      	ldr	r1, [pc, #192]	; (9c28 <_tc_timer_init+0x27c>)
    9b66:	4613      	mov	r3, r2
    9b68:	009b      	lsls	r3, r3, #2
    9b6a:	4413      	add	r3, r2
    9b6c:	009b      	lsls	r3, r3, #2
    9b6e:	440b      	add	r3, r1
    9b70:	3310      	adds	r3, #16
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	b2db      	uxtb	r3, r3
    9b76:	461a      	mov	r2, r3
    9b78:	2101      	movs	r1, #1
    9b7a:	6838      	ldr	r0, [r7, #0]
    9b7c:	4b30      	ldr	r3, [pc, #192]	; (9c40 <_tc_timer_init+0x294>)
    9b7e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9b80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b84:	4928      	ldr	r1, [pc, #160]	; (9c28 <_tc_timer_init+0x27c>)
    9b86:	4613      	mov	r3, r2
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	4413      	add	r3, r2
    9b8c:	009b      	lsls	r3, r3, #2
    9b8e:	440b      	add	r3, r1
    9b90:	330b      	adds	r3, #11
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	4619      	mov	r1, r3
    9b96:	6838      	ldr	r0, [r7, #0]
    9b98:	4b2a      	ldr	r3, [pc, #168]	; (9c44 <_tc_timer_init+0x298>)
    9b9a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9b9c:	6838      	ldr	r0, [r7, #0]
    9b9e:	4b2a      	ldr	r3, [pc, #168]	; (9c48 <_tc_timer_init+0x29c>)
    9ba0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    9ba2:	6879      	ldr	r1, [r7, #4]
    9ba4:	6838      	ldr	r0, [r7, #0]
    9ba6:	4b29      	ldr	r3, [pc, #164]	; (9c4c <_tc_timer_init+0x2a0>)
    9ba8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9baa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bae:	491e      	ldr	r1, [pc, #120]	; (9c28 <_tc_timer_init+0x27c>)
    9bb0:	4613      	mov	r3, r2
    9bb2:	009b      	lsls	r3, r3, #2
    9bb4:	4413      	add	r3, r2
    9bb6:	009b      	lsls	r3, r3, #2
    9bb8:	440b      	add	r3, r1
    9bba:	3302      	adds	r3, #2
    9bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
    9bc0:	4618      	mov	r0, r3
    9bc2:	4b23      	ldr	r3, [pc, #140]	; (9c50 <_tc_timer_init+0x2a4>)
    9bc4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9bc6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bca:	4917      	ldr	r1, [pc, #92]	; (9c28 <_tc_timer_init+0x27c>)
    9bcc:	4613      	mov	r3, r2
    9bce:	009b      	lsls	r3, r3, #2
    9bd0:	4413      	add	r3, r2
    9bd2:	009b      	lsls	r3, r3, #2
    9bd4:	440b      	add	r3, r1
    9bd6:	3302      	adds	r3, #2
    9bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
    9bdc:	4618      	mov	r0, r3
    9bde:	4b1d      	ldr	r3, [pc, #116]	; (9c54 <_tc_timer_init+0x2a8>)
    9be0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9be2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9be6:	4910      	ldr	r1, [pc, #64]	; (9c28 <_tc_timer_init+0x27c>)
    9be8:	4613      	mov	r3, r2
    9bea:	009b      	lsls	r3, r3, #2
    9bec:	4413      	add	r3, r2
    9bee:	009b      	lsls	r3, r3, #2
    9bf0:	440b      	add	r3, r1
    9bf2:	3302      	adds	r3, #2
    9bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
    9bf8:	4618      	mov	r0, r3
    9bfa:	4b17      	ldr	r3, [pc, #92]	; (9c58 <_tc_timer_init+0x2ac>)
    9bfc:	4798      	blx	r3

	return ERR_NONE;
    9bfe:	2300      	movs	r3, #0
}
    9c00:	4618      	mov	r0, r3
    9c02:	3710      	adds	r7, #16
    9c04:	46bd      	mov	sp, r7
    9c06:	bd80      	pop	{r7, pc}
    9c08:	0000a1fd 	.word	0x0000a1fd
    9c0c:	0001b988 	.word	0x0001b988
    9c10:	00004d25 	.word	0x00004d25
    9c14:	00009621 	.word	0x00009621
    9c18:	000097c1 	.word	0x000097c1
    9c1c:	00009771 	.word	0x00009771
    9c20:	000095fd 	.word	0x000095fd
    9c24:	000097f1 	.word	0x000097f1
    9c28:	20000110 	.word	0x20000110
    9c2c:	00009851 	.word	0x00009851
    9c30:	00009815 	.word	0x00009815
    9c34:	00009833 	.word	0x00009833
    9c38:	00009951 	.word	0x00009951
    9c3c:	000098ed 	.word	0x000098ed
    9c40:	000098bd 	.word	0x000098bd
    9c44:	00009871 	.word	0x00009871
    9c48:	000096a5 	.word	0x000096a5
    9c4c:	0000a265 	.word	0x0000a265
    9c50:	0000957d 	.word	0x0000957d
    9c54:	000095c1 	.word	0x000095c1
    9c58:	00009541 	.word	0x00009541

00009c5c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9c5c:	b580      	push	{r7, lr}
    9c5e:	b084      	sub	sp, #16
    9c60:	af00      	add	r7, sp, #0
    9c62:	6078      	str	r0, [r7, #4]
    9c64:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9c66:	6838      	ldr	r0, [r7, #0]
    9c68:	4b73      	ldr	r3, [pc, #460]	; (9e38 <_pwm_init+0x1dc>)
    9c6a:	4798      	blx	r3
    9c6c:	4603      	mov	r3, r0
    9c6e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9c70:	687b      	ldr	r3, [r7, #4]
    9c72:	683a      	ldr	r2, [r7, #0]
    9c74:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9c76:	2101      	movs	r1, #1
    9c78:	6838      	ldr	r0, [r7, #0]
    9c7a:	4b70      	ldr	r3, [pc, #448]	; (9e3c <_pwm_init+0x1e0>)
    9c7c:	4798      	blx	r3
    9c7e:	4603      	mov	r3, r0
    9c80:	f083 0301 	eor.w	r3, r3, #1
    9c84:	b2db      	uxtb	r3, r3
    9c86:	2b00      	cmp	r3, #0
    9c88:	d011      	beq.n	9cae <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9c8a:	2102      	movs	r1, #2
    9c8c:	6838      	ldr	r0, [r7, #0]
    9c8e:	4b6c      	ldr	r3, [pc, #432]	; (9e40 <_pwm_init+0x1e4>)
    9c90:	4798      	blx	r3
    9c92:	4603      	mov	r3, r0
    9c94:	2b00      	cmp	r3, #0
    9c96:	d006      	beq.n	9ca6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9c98:	6838      	ldr	r0, [r7, #0]
    9c9a:	4b6a      	ldr	r3, [pc, #424]	; (9e44 <_pwm_init+0x1e8>)
    9c9c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9c9e:	2102      	movs	r1, #2
    9ca0:	6838      	ldr	r0, [r7, #0]
    9ca2:	4b69      	ldr	r3, [pc, #420]	; (9e48 <_pwm_init+0x1ec>)
    9ca4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9ca6:	2101      	movs	r1, #1
    9ca8:	6838      	ldr	r0, [r7, #0]
    9caa:	4b68      	ldr	r3, [pc, #416]	; (9e4c <_pwm_init+0x1f0>)
    9cac:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9cae:	2101      	movs	r1, #1
    9cb0:	6838      	ldr	r0, [r7, #0]
    9cb2:	4b65      	ldr	r3, [pc, #404]	; (9e48 <_pwm_init+0x1ec>)
    9cb4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9cb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cba:	4965      	ldr	r1, [pc, #404]	; (9e50 <_pwm_init+0x1f4>)
    9cbc:	4613      	mov	r3, r2
    9cbe:	009b      	lsls	r3, r3, #2
    9cc0:	4413      	add	r3, r2
    9cc2:	009b      	lsls	r3, r3, #2
    9cc4:	440b      	add	r3, r1
    9cc6:	3304      	adds	r3, #4
    9cc8:	681b      	ldr	r3, [r3, #0]
    9cca:	4619      	mov	r1, r3
    9ccc:	6838      	ldr	r0, [r7, #0]
    9cce:	4b5f      	ldr	r3, [pc, #380]	; (9e4c <_pwm_init+0x1f0>)
    9cd0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9cd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cd6:	495e      	ldr	r1, [pc, #376]	; (9e50 <_pwm_init+0x1f4>)
    9cd8:	4613      	mov	r3, r2
    9cda:	009b      	lsls	r3, r3, #2
    9cdc:	4413      	add	r3, r2
    9cde:	009b      	lsls	r3, r3, #2
    9ce0:	440b      	add	r3, r1
    9ce2:	330a      	adds	r3, #10
    9ce4:	781b      	ldrb	r3, [r3, #0]
    9ce6:	4619      	mov	r1, r3
    9ce8:	6838      	ldr	r0, [r7, #0]
    9cea:	4b5a      	ldr	r3, [pc, #360]	; (9e54 <_pwm_init+0x1f8>)
    9cec:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9cee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cf2:	4957      	ldr	r1, [pc, #348]	; (9e50 <_pwm_init+0x1f4>)
    9cf4:	4613      	mov	r3, r2
    9cf6:	009b      	lsls	r3, r3, #2
    9cf8:	4413      	add	r3, r2
    9cfa:	009b      	lsls	r3, r3, #2
    9cfc:	440b      	add	r3, r1
    9cfe:	3308      	adds	r3, #8
    9d00:	881b      	ldrh	r3, [r3, #0]
    9d02:	4619      	mov	r1, r3
    9d04:	6838      	ldr	r0, [r7, #0]
    9d06:	4b54      	ldr	r3, [pc, #336]	; (9e58 <_pwm_init+0x1fc>)
    9d08:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    9d0a:	2103      	movs	r1, #3
    9d0c:	6838      	ldr	r0, [r7, #0]
    9d0e:	4b53      	ldr	r3, [pc, #332]	; (9e5c <_pwm_init+0x200>)
    9d10:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9d12:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d16:	494e      	ldr	r1, [pc, #312]	; (9e50 <_pwm_init+0x1f4>)
    9d18:	4613      	mov	r3, r2
    9d1a:	009b      	lsls	r3, r3, #2
    9d1c:	4413      	add	r3, r2
    9d1e:	009b      	lsls	r3, r3, #2
    9d20:	440b      	add	r3, r1
    9d22:	3304      	adds	r3, #4
    9d24:	681b      	ldr	r3, [r3, #0]
    9d26:	f003 030c 	and.w	r3, r3, #12
    9d2a:	2b08      	cmp	r3, #8
    9d2c:	d11e      	bne.n	9d6c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9d2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d32:	4947      	ldr	r1, [pc, #284]	; (9e50 <_pwm_init+0x1f4>)
    9d34:	4613      	mov	r3, r2
    9d36:	009b      	lsls	r3, r3, #2
    9d38:	4413      	add	r3, r2
    9d3a:	009b      	lsls	r3, r3, #2
    9d3c:	440b      	add	r3, r1
    9d3e:	330c      	adds	r3, #12
    9d40:	681b      	ldr	r3, [r3, #0]
    9d42:	461a      	mov	r2, r3
    9d44:	2100      	movs	r1, #0
    9d46:	6838      	ldr	r0, [r7, #0]
    9d48:	4b45      	ldr	r3, [pc, #276]	; (9e60 <_pwm_init+0x204>)
    9d4a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9d4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d50:	493f      	ldr	r1, [pc, #252]	; (9e50 <_pwm_init+0x1f4>)
    9d52:	4613      	mov	r3, r2
    9d54:	009b      	lsls	r3, r3, #2
    9d56:	4413      	add	r3, r2
    9d58:	009b      	lsls	r3, r3, #2
    9d5a:	440b      	add	r3, r1
    9d5c:	3310      	adds	r3, #16
    9d5e:	681b      	ldr	r3, [r3, #0]
    9d60:	461a      	mov	r2, r3
    9d62:	2101      	movs	r1, #1
    9d64:	6838      	ldr	r0, [r7, #0]
    9d66:	4b3e      	ldr	r3, [pc, #248]	; (9e60 <_pwm_init+0x204>)
    9d68:	4798      	blx	r3
    9d6a:	e031      	b.n	9dd0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9d6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d70:	4937      	ldr	r1, [pc, #220]	; (9e50 <_pwm_init+0x1f4>)
    9d72:	4613      	mov	r3, r2
    9d74:	009b      	lsls	r3, r3, #2
    9d76:	4413      	add	r3, r2
    9d78:	009b      	lsls	r3, r3, #2
    9d7a:	440b      	add	r3, r1
    9d7c:	3304      	adds	r3, #4
    9d7e:	681b      	ldr	r3, [r3, #0]
    9d80:	f003 030c 	and.w	r3, r3, #12
    9d84:	2b00      	cmp	r3, #0
    9d86:	d120      	bne.n	9dca <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9d88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d8c:	4930      	ldr	r1, [pc, #192]	; (9e50 <_pwm_init+0x1f4>)
    9d8e:	4613      	mov	r3, r2
    9d90:	009b      	lsls	r3, r3, #2
    9d92:	4413      	add	r3, r2
    9d94:	009b      	lsls	r3, r3, #2
    9d96:	440b      	add	r3, r1
    9d98:	330c      	adds	r3, #12
    9d9a:	681b      	ldr	r3, [r3, #0]
    9d9c:	b29b      	uxth	r3, r3
    9d9e:	461a      	mov	r2, r3
    9da0:	2100      	movs	r1, #0
    9da2:	6838      	ldr	r0, [r7, #0]
    9da4:	4b2f      	ldr	r3, [pc, #188]	; (9e64 <_pwm_init+0x208>)
    9da6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9da8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9dac:	4928      	ldr	r1, [pc, #160]	; (9e50 <_pwm_init+0x1f4>)
    9dae:	4613      	mov	r3, r2
    9db0:	009b      	lsls	r3, r3, #2
    9db2:	4413      	add	r3, r2
    9db4:	009b      	lsls	r3, r3, #2
    9db6:	440b      	add	r3, r1
    9db8:	3310      	adds	r3, #16
    9dba:	681b      	ldr	r3, [r3, #0]
    9dbc:	b29b      	uxth	r3, r3
    9dbe:	461a      	mov	r2, r3
    9dc0:	2101      	movs	r1, #1
    9dc2:	6838      	ldr	r0, [r7, #0]
    9dc4:	4b27      	ldr	r3, [pc, #156]	; (9e64 <_pwm_init+0x208>)
    9dc6:	4798      	blx	r3
    9dc8:	e002      	b.n	9dd0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9dca:	f04f 33ff 	mov.w	r3, #4294967295
    9dce:	e02e      	b.n	9e2e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9dd0:	6879      	ldr	r1, [r7, #4]
    9dd2:	6838      	ldr	r0, [r7, #0]
    9dd4:	4b24      	ldr	r3, [pc, #144]	; (9e68 <_pwm_init+0x20c>)
    9dd6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9dd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ddc:	491c      	ldr	r1, [pc, #112]	; (9e50 <_pwm_init+0x1f4>)
    9dde:	4613      	mov	r3, r2
    9de0:	009b      	lsls	r3, r3, #2
    9de2:	4413      	add	r3, r2
    9de4:	009b      	lsls	r3, r3, #2
    9de6:	440b      	add	r3, r1
    9de8:	3302      	adds	r3, #2
    9dea:	f9b3 3000 	ldrsh.w	r3, [r3]
    9dee:	4618      	mov	r0, r3
    9df0:	4b1e      	ldr	r3, [pc, #120]	; (9e6c <_pwm_init+0x210>)
    9df2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9df4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9df8:	4915      	ldr	r1, [pc, #84]	; (9e50 <_pwm_init+0x1f4>)
    9dfa:	4613      	mov	r3, r2
    9dfc:	009b      	lsls	r3, r3, #2
    9dfe:	4413      	add	r3, r2
    9e00:	009b      	lsls	r3, r3, #2
    9e02:	440b      	add	r3, r1
    9e04:	3302      	adds	r3, #2
    9e06:	f9b3 3000 	ldrsh.w	r3, [r3]
    9e0a:	4618      	mov	r0, r3
    9e0c:	4b18      	ldr	r3, [pc, #96]	; (9e70 <_pwm_init+0x214>)
    9e0e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9e10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9e14:	490e      	ldr	r1, [pc, #56]	; (9e50 <_pwm_init+0x1f4>)
    9e16:	4613      	mov	r3, r2
    9e18:	009b      	lsls	r3, r3, #2
    9e1a:	4413      	add	r3, r2
    9e1c:	009b      	lsls	r3, r3, #2
    9e1e:	440b      	add	r3, r1
    9e20:	3302      	adds	r3, #2
    9e22:	f9b3 3000 	ldrsh.w	r3, [r3]
    9e26:	4618      	mov	r0, r3
    9e28:	4b12      	ldr	r3, [pc, #72]	; (9e74 <_pwm_init+0x218>)
    9e2a:	4798      	blx	r3

	return 0;
    9e2c:	2300      	movs	r3, #0
}
    9e2e:	4618      	mov	r0, r3
    9e30:	3710      	adds	r7, #16
    9e32:	46bd      	mov	sp, r7
    9e34:	bd80      	pop	{r7, pc}
    9e36:	bf00      	nop
    9e38:	0000a1fd 	.word	0x0000a1fd
    9e3c:	00009621 	.word	0x00009621
    9e40:	000097c1 	.word	0x000097c1
    9e44:	00009771 	.word	0x00009771
    9e48:	000095fd 	.word	0x000095fd
    9e4c:	000097f1 	.word	0x000097f1
    9e50:	20000110 	.word	0x20000110
    9e54:	00009851 	.word	0x00009851
    9e58:	00009815 	.word	0x00009815
    9e5c:	00009833 	.word	0x00009833
    9e60:	00009951 	.word	0x00009951
    9e64:	000098ed 	.word	0x000098ed
    9e68:	0000a265 	.word	0x0000a265
    9e6c:	0000957d 	.word	0x0000957d
    9e70:	000095c1 	.word	0x000095c1
    9e74:	00009541 	.word	0x00009541

00009e78 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    9e78:	b580      	push	{r7, lr}
    9e7a:	b084      	sub	sp, #16
    9e7c:	af00      	add	r7, sp, #0
    9e7e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	68db      	ldr	r3, [r3, #12]
    9e84:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9e86:	68f8      	ldr	r0, [r7, #12]
    9e88:	4b10      	ldr	r3, [pc, #64]	; (9ecc <_tc_timer_deinit+0x54>)
    9e8a:	4798      	blx	r3
    9e8c:	4603      	mov	r3, r0
    9e8e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9e90:	22f9      	movs	r2, #249	; 0xf9
    9e92:	490f      	ldr	r1, [pc, #60]	; (9ed0 <_tc_timer_deinit+0x58>)
    9e94:	2001      	movs	r0, #1
    9e96:	4b0f      	ldr	r3, [pc, #60]	; (9ed4 <_tc_timer_deinit+0x5c>)
    9e98:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    9e9a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9e9e:	490e      	ldr	r1, [pc, #56]	; (9ed8 <_tc_timer_deinit+0x60>)
    9ea0:	4613      	mov	r3, r2
    9ea2:	009b      	lsls	r3, r3, #2
    9ea4:	4413      	add	r3, r2
    9ea6:	009b      	lsls	r3, r3, #2
    9ea8:	440b      	add	r3, r1
    9eaa:	3302      	adds	r3, #2
    9eac:	f9b3 3000 	ldrsh.w	r3, [r3]
    9eb0:	4618      	mov	r0, r3
    9eb2:	4b0a      	ldr	r3, [pc, #40]	; (9edc <_tc_timer_deinit+0x64>)
    9eb4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9eb6:	68f8      	ldr	r0, [r7, #12]
    9eb8:	4b09      	ldr	r3, [pc, #36]	; (9ee0 <_tc_timer_deinit+0x68>)
    9eba:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    9ebc:	68f8      	ldr	r0, [r7, #12]
    9ebe:	4b09      	ldr	r3, [pc, #36]	; (9ee4 <_tc_timer_deinit+0x6c>)
    9ec0:	4798      	blx	r3
}
    9ec2:	bf00      	nop
    9ec4:	3710      	adds	r7, #16
    9ec6:	46bd      	mov	sp, r7
    9ec8:	bd80      	pop	{r7, pc}
    9eca:	bf00      	nop
    9ecc:	0000a1fd 	.word	0x0000a1fd
    9ed0:	0001b988 	.word	0x0001b988
    9ed4:	00004d25 	.word	0x00004d25
    9ed8:	20000110 	.word	0x20000110
    9edc:	0000957d 	.word	0x0000957d
    9ee0:	00009771 	.word	0x00009771
    9ee4:	000096e9 	.word	0x000096e9

00009ee8 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    9ee8:	b580      	push	{r7, lr}
    9eea:	b082      	sub	sp, #8
    9eec:	af00      	add	r7, sp, #0
    9eee:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9ef0:	687b      	ldr	r3, [r7, #4]
    9ef2:	68db      	ldr	r3, [r3, #12]
    9ef4:	4618      	mov	r0, r3
    9ef6:	4b03      	ldr	r3, [pc, #12]	; (9f04 <_tc_timer_start+0x1c>)
    9ef8:	4798      	blx	r3
}
    9efa:	bf00      	nop
    9efc:	3708      	adds	r7, #8
    9efe:	46bd      	mov	sp, r7
    9f00:	bd80      	pop	{r7, pc}
    9f02:	bf00      	nop
    9f04:	00009711 	.word	0x00009711

00009f08 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    9f08:	b580      	push	{r7, lr}
    9f0a:	b082      	sub	sp, #8
    9f0c:	af00      	add	r7, sp, #0
    9f0e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9f10:	687b      	ldr	r3, [r7, #4]
    9f12:	68db      	ldr	r3, [r3, #12]
    9f14:	4618      	mov	r0, r3
    9f16:	4b03      	ldr	r3, [pc, #12]	; (9f24 <_tc_timer_stop+0x1c>)
    9f18:	4798      	blx	r3
}
    9f1a:	bf00      	nop
    9f1c:	3708      	adds	r7, #8
    9f1e:	46bd      	mov	sp, r7
    9f20:	bd80      	pop	{r7, pc}
    9f22:	bf00      	nop
    9f24:	00009771 	.word	0x00009771

00009f28 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9f28:	b580      	push	{r7, lr}
    9f2a:	b084      	sub	sp, #16
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	6078      	str	r0, [r7, #4]
    9f30:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	68db      	ldr	r3, [r3, #12]
    9f36:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f38:	68f8      	ldr	r0, [r7, #12]
    9f3a:	4b14      	ldr	r3, [pc, #80]	; (9f8c <_tc_timer_set_period+0x64>)
    9f3c:	4798      	blx	r3
    9f3e:	4603      	mov	r3, r0
    9f40:	2b02      	cmp	r3, #2
    9f42:	d105      	bne.n	9f50 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    9f44:	683a      	ldr	r2, [r7, #0]
    9f46:	2100      	movs	r1, #0
    9f48:	68f8      	ldr	r0, [r7, #12]
    9f4a:	4b11      	ldr	r3, [pc, #68]	; (9f90 <_tc_timer_set_period+0x68>)
    9f4c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    9f4e:	e019      	b.n	9f84 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f50:	68f8      	ldr	r0, [r7, #12]
    9f52:	4b0e      	ldr	r3, [pc, #56]	; (9f8c <_tc_timer_set_period+0x64>)
    9f54:	4798      	blx	r3
    9f56:	4603      	mov	r3, r0
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d107      	bne.n	9f6c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    9f5c:	683b      	ldr	r3, [r7, #0]
    9f5e:	b29b      	uxth	r3, r3
    9f60:	461a      	mov	r2, r3
    9f62:	2100      	movs	r1, #0
    9f64:	68f8      	ldr	r0, [r7, #12]
    9f66:	4b0b      	ldr	r3, [pc, #44]	; (9f94 <_tc_timer_set_period+0x6c>)
    9f68:	4798      	blx	r3
}
    9f6a:	e00b      	b.n	9f84 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f6c:	68f8      	ldr	r0, [r7, #12]
    9f6e:	4b07      	ldr	r3, [pc, #28]	; (9f8c <_tc_timer_set_period+0x64>)
    9f70:	4798      	blx	r3
    9f72:	4603      	mov	r3, r0
    9f74:	2b01      	cmp	r3, #1
    9f76:	d105      	bne.n	9f84 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    9f78:	683b      	ldr	r3, [r7, #0]
    9f7a:	b2db      	uxtb	r3, r3
    9f7c:	4619      	mov	r1, r3
    9f7e:	68f8      	ldr	r0, [r7, #12]
    9f80:	4b05      	ldr	r3, [pc, #20]	; (9f98 <_tc_timer_set_period+0x70>)
    9f82:	4798      	blx	r3
}
    9f84:	bf00      	nop
    9f86:	3710      	adds	r7, #16
    9f88:	46bd      	mov	sp, r7
    9f8a:	bd80      	pop	{r7, pc}
    9f8c:	00009799 	.word	0x00009799
    9f90:	00009951 	.word	0x00009951
    9f94:	000098ed 	.word	0x000098ed
    9f98:	00009871 	.word	0x00009871

00009f9c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    9f9c:	b580      	push	{r7, lr}
    9f9e:	b084      	sub	sp, #16
    9fa0:	af00      	add	r7, sp, #0
    9fa2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9fa4:	687b      	ldr	r3, [r7, #4]
    9fa6:	68db      	ldr	r3, [r3, #12]
    9fa8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9faa:	68f8      	ldr	r0, [r7, #12]
    9fac:	4b13      	ldr	r3, [pc, #76]	; (9ffc <_tc_timer_get_period+0x60>)
    9fae:	4798      	blx	r3
    9fb0:	4603      	mov	r3, r0
    9fb2:	2b02      	cmp	r3, #2
    9fb4:	d105      	bne.n	9fc2 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    9fb6:	2100      	movs	r1, #0
    9fb8:	68f8      	ldr	r0, [r7, #12]
    9fba:	4b11      	ldr	r3, [pc, #68]	; (a000 <_tc_timer_get_period+0x64>)
    9fbc:	4798      	blx	r3
    9fbe:	4603      	mov	r3, r0
    9fc0:	e017      	b.n	9ff2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9fc2:	68f8      	ldr	r0, [r7, #12]
    9fc4:	4b0d      	ldr	r3, [pc, #52]	; (9ffc <_tc_timer_get_period+0x60>)
    9fc6:	4798      	blx	r3
    9fc8:	4603      	mov	r3, r0
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d105      	bne.n	9fda <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    9fce:	2100      	movs	r1, #0
    9fd0:	68f8      	ldr	r0, [r7, #12]
    9fd2:	4b0c      	ldr	r3, [pc, #48]	; (a004 <_tc_timer_get_period+0x68>)
    9fd4:	4798      	blx	r3
    9fd6:	4603      	mov	r3, r0
    9fd8:	e00b      	b.n	9ff2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9fda:	68f8      	ldr	r0, [r7, #12]
    9fdc:	4b07      	ldr	r3, [pc, #28]	; (9ffc <_tc_timer_get_period+0x60>)
    9fde:	4798      	blx	r3
    9fe0:	4603      	mov	r3, r0
    9fe2:	2b01      	cmp	r3, #1
    9fe4:	d104      	bne.n	9ff0 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    9fe6:	68f8      	ldr	r0, [r7, #12]
    9fe8:	4b07      	ldr	r3, [pc, #28]	; (a008 <_tc_timer_get_period+0x6c>)
    9fea:	4798      	blx	r3
    9fec:	4603      	mov	r3, r0
    9fee:	e000      	b.n	9ff2 <_tc_timer_get_period+0x56>
	}

	return 0;
    9ff0:	2300      	movs	r3, #0
}
    9ff2:	4618      	mov	r0, r3
    9ff4:	3710      	adds	r7, #16
    9ff6:	46bd      	mov	sp, r7
    9ff8:	bd80      	pop	{r7, pc}
    9ffa:	bf00      	nop
    9ffc:	00009799 	.word	0x00009799
    a000:	00009981 	.word	0x00009981
    a004:	00009921 	.word	0x00009921
    a008:	00009899 	.word	0x00009899

0000a00c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    a00c:	b580      	push	{r7, lr}
    a00e:	b082      	sub	sp, #8
    a010:	af00      	add	r7, sp, #0
    a012:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a014:	687b      	ldr	r3, [r7, #4]
    a016:	68db      	ldr	r3, [r3, #12]
    a018:	4618      	mov	r0, r3
    a01a:	4b03      	ldr	r3, [pc, #12]	; (a028 <_tc_timer_is_started+0x1c>)
    a01c:	4798      	blx	r3
    a01e:	4603      	mov	r3, r0
}
    a020:	4618      	mov	r0, r3
    a022:	3708      	adds	r7, #8
    a024:	46bd      	mov	sp, r7
    a026:	bd80      	pop	{r7, pc}
    a028:	00009739 	.word	0x00009739

0000a02c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    a02c:	b480      	push	{r7}
    a02e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    a030:	4b02      	ldr	r3, [pc, #8]	; (a03c <_tc_get_timer+0x10>)
}
    a032:	4618      	mov	r0, r3
    a034:	46bd      	mov	sp, r7
    a036:	f85d 7b04 	ldr.w	r7, [sp], #4
    a03a:	4770      	bx	lr
    a03c:	20000188 	.word	0x20000188

0000a040 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    a040:	b480      	push	{r7}
    a042:	af00      	add	r7, sp, #0
	return NULL;
    a044:	2300      	movs	r3, #0
}
    a046:	4618      	mov	r0, r3
    a048:	46bd      	mov	sp, r7
    a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a04e:	4770      	bx	lr

0000a050 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    a050:	b580      	push	{r7, lr}
    a052:	b084      	sub	sp, #16
    a054:	af00      	add	r7, sp, #0
    a056:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a058:	687b      	ldr	r3, [r7, #4]
    a05a:	68db      	ldr	r3, [r3, #12]
    a05c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a05e:	68f8      	ldr	r0, [r7, #12]
    a060:	4b0e      	ldr	r3, [pc, #56]	; (a09c <_tc_timer_set_irq+0x4c>)
    a062:	4798      	blx	r3
    a064:	4603      	mov	r3, r0
    a066:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a068:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    a06c:	490c      	ldr	r1, [pc, #48]	; (a0a0 <_tc_timer_set_irq+0x50>)
    a06e:	2001      	movs	r0, #1
    a070:	4b0c      	ldr	r3, [pc, #48]	; (a0a4 <_tc_timer_set_irq+0x54>)
    a072:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    a074:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a078:	490b      	ldr	r1, [pc, #44]	; (a0a8 <_tc_timer_set_irq+0x58>)
    a07a:	4613      	mov	r3, r2
    a07c:	009b      	lsls	r3, r3, #2
    a07e:	4413      	add	r3, r2
    a080:	009b      	lsls	r3, r3, #2
    a082:	440b      	add	r3, r1
    a084:	3302      	adds	r3, #2
    a086:	f9b3 3000 	ldrsh.w	r3, [r3]
    a08a:	b2db      	uxtb	r3, r3
    a08c:	4618      	mov	r0, r3
    a08e:	4b07      	ldr	r3, [pc, #28]	; (a0ac <_tc_timer_set_irq+0x5c>)
    a090:	4798      	blx	r3
}
    a092:	bf00      	nop
    a094:	3710      	adds	r7, #16
    a096:	46bd      	mov	sp, r7
    a098:	bd80      	pop	{r7, pc}
    a09a:	bf00      	nop
    a09c:	0000a1fd 	.word	0x0000a1fd
    a0a0:	0001b988 	.word	0x0001b988
    a0a4:	00004d25 	.word	0x00004d25
    a0a8:	20000110 	.word	0x20000110
    a0ac:	00005bbd 	.word	0x00005bbd

0000a0b0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    a0b0:	b580      	push	{r7, lr}
    a0b2:	b084      	sub	sp, #16
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	68db      	ldr	r3, [r3, #12]
    a0bc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a0be:	68f8      	ldr	r0, [r7, #12]
    a0c0:	4b07      	ldr	r3, [pc, #28]	; (a0e0 <tc_interrupt_handler+0x30>)
    a0c2:	4798      	blx	r3
    a0c4:	4603      	mov	r3, r0
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	d006      	beq.n	a0d8 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a0ca:	68f8      	ldr	r0, [r7, #12]
    a0cc:	4b05      	ldr	r3, [pc, #20]	; (a0e4 <tc_interrupt_handler+0x34>)
    a0ce:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	681b      	ldr	r3, [r3, #0]
    a0d4:	6878      	ldr	r0, [r7, #4]
    a0d6:	4798      	blx	r3
	}
}
    a0d8:	bf00      	nop
    a0da:	3710      	adds	r7, #16
    a0dc:	46bd      	mov	sp, r7
    a0de:	bd80      	pop	{r7, pc}
    a0e0:	00009649 	.word	0x00009649
    a0e4:	00009671 	.word	0x00009671

0000a0e8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    a0e8:	b580      	push	{r7, lr}
    a0ea:	b084      	sub	sp, #16
    a0ec:	af00      	add	r7, sp, #0
    a0ee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	691b      	ldr	r3, [r3, #16]
    a0f4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a0f6:	68f8      	ldr	r0, [r7, #12]
    a0f8:	4b12      	ldr	r3, [pc, #72]	; (a144 <tc_pwm_interrupt_handler+0x5c>)
    a0fa:	4798      	blx	r3
    a0fc:	4603      	mov	r3, r0
    a0fe:	2b00      	cmp	r3, #0
    a100:	d00a      	beq.n	a118 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a102:	68f8      	ldr	r0, [r7, #12]
    a104:	4b10      	ldr	r3, [pc, #64]	; (a148 <tc_pwm_interrupt_handler+0x60>)
    a106:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	681b      	ldr	r3, [r3, #0]
    a10c:	2b00      	cmp	r3, #0
    a10e:	d003      	beq.n	a118 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	681b      	ldr	r3, [r3, #0]
    a114:	6878      	ldr	r0, [r7, #4]
    a116:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    a118:	68f8      	ldr	r0, [r7, #12]
    a11a:	4b0c      	ldr	r3, [pc, #48]	; (a14c <tc_pwm_interrupt_handler+0x64>)
    a11c:	4798      	blx	r3
    a11e:	4603      	mov	r3, r0
    a120:	2b00      	cmp	r3, #0
    a122:	d00a      	beq.n	a13a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    a124:	68f8      	ldr	r0, [r7, #12]
    a126:	4b0a      	ldr	r3, [pc, #40]	; (a150 <tc_pwm_interrupt_handler+0x68>)
    a128:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	685b      	ldr	r3, [r3, #4]
    a12e:	2b00      	cmp	r3, #0
    a130:	d003      	beq.n	a13a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	685b      	ldr	r3, [r3, #4]
    a136:	6878      	ldr	r0, [r7, #4]
    a138:	4798      	blx	r3
		}
	}
}
    a13a:	bf00      	nop
    a13c:	3710      	adds	r7, #16
    a13e:	46bd      	mov	sp, r7
    a140:	bd80      	pop	{r7, pc}
    a142:	bf00      	nop
    a144:	00009649 	.word	0x00009649
    a148:	00009671 	.word	0x00009671
    a14c:	000096bf 	.word	0x000096bf
    a150:	0000968b 	.word	0x0000968b

0000a154 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    a154:	b580      	push	{r7, lr}
    a156:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    a158:	4b03      	ldr	r3, [pc, #12]	; (a168 <TC0_Handler+0x14>)
    a15a:	681b      	ldr	r3, [r3, #0]
    a15c:	4618      	mov	r0, r3
    a15e:	4b03      	ldr	r3, [pc, #12]	; (a16c <TC0_Handler+0x18>)
    a160:	4798      	blx	r3
}
    a162:	bf00      	nop
    a164:	bd80      	pop	{r7, pc}
    a166:	bf00      	nop
    a168:	2000235c 	.word	0x2000235c
    a16c:	0000a0b1 	.word	0x0000a0b1

0000a170 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    a170:	b580      	push	{r7, lr}
    a172:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    a174:	4b03      	ldr	r3, [pc, #12]	; (a184 <TC2_Handler+0x14>)
    a176:	681b      	ldr	r3, [r3, #0]
    a178:	4618      	mov	r0, r3
    a17a:	4b03      	ldr	r3, [pc, #12]	; (a188 <TC2_Handler+0x18>)
    a17c:	4798      	blx	r3
}
    a17e:	bf00      	nop
    a180:	bd80      	pop	{r7, pc}
    a182:	bf00      	nop
    a184:	20002360 	.word	0x20002360
    a188:	0000a0b1 	.word	0x0000a0b1

0000a18c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    a18c:	b580      	push	{r7, lr}
    a18e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    a190:	4b03      	ldr	r3, [pc, #12]	; (a1a0 <TC4_Handler+0x14>)
    a192:	681b      	ldr	r3, [r3, #0]
    a194:	4618      	mov	r0, r3
    a196:	4b03      	ldr	r3, [pc, #12]	; (a1a4 <TC4_Handler+0x18>)
    a198:	4798      	blx	r3
}
    a19a:	bf00      	nop
    a19c:	bd80      	pop	{r7, pc}
    a19e:	bf00      	nop
    a1a0:	20002364 	.word	0x20002364
    a1a4:	0000a0b1 	.word	0x0000a0b1

0000a1a8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    a1a8:	b580      	push	{r7, lr}
    a1aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    a1ac:	4b03      	ldr	r3, [pc, #12]	; (a1bc <TC5_Handler+0x14>)
    a1ae:	681b      	ldr	r3, [r3, #0]
    a1b0:	4618      	mov	r0, r3
    a1b2:	4b03      	ldr	r3, [pc, #12]	; (a1c0 <TC5_Handler+0x18>)
    a1b4:	4798      	blx	r3
}
    a1b6:	bf00      	nop
    a1b8:	bd80      	pop	{r7, pc}
    a1ba:	bf00      	nop
    a1bc:	20002368 	.word	0x20002368
    a1c0:	0000a0b1 	.word	0x0000a0b1

0000a1c4 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    a1c4:	b580      	push	{r7, lr}
    a1c6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    a1c8:	4b03      	ldr	r3, [pc, #12]	; (a1d8 <TC6_Handler+0x14>)
    a1ca:	681b      	ldr	r3, [r3, #0]
    a1cc:	4618      	mov	r0, r3
    a1ce:	4b03      	ldr	r3, [pc, #12]	; (a1dc <TC6_Handler+0x18>)
    a1d0:	4798      	blx	r3
}
    a1d2:	bf00      	nop
    a1d4:	bd80      	pop	{r7, pc}
    a1d6:	bf00      	nop
    a1d8:	2000236c 	.word	0x2000236c
    a1dc:	0000a0b1 	.word	0x0000a0b1

0000a1e0 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    a1e4:	4b03      	ldr	r3, [pc, #12]	; (a1f4 <TC7_Handler+0x14>)
    a1e6:	681b      	ldr	r3, [r3, #0]
    a1e8:	4618      	mov	r0, r3
    a1ea:	4b03      	ldr	r3, [pc, #12]	; (a1f8 <TC7_Handler+0x18>)
    a1ec:	4798      	blx	r3
}
    a1ee:	bf00      	nop
    a1f0:	bd80      	pop	{r7, pc}
    a1f2:	bf00      	nop
    a1f4:	20002370 	.word	0x20002370
    a1f8:	0000a0e9 	.word	0x0000a0e9

0000a1fc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a1fc:	b580      	push	{r7, lr}
    a1fe:	b084      	sub	sp, #16
    a200:	af00      	add	r7, sp, #0
    a202:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    a204:	6878      	ldr	r0, [r7, #4]
    a206:	4b13      	ldr	r3, [pc, #76]	; (a254 <get_tc_index+0x58>)
    a208:	4798      	blx	r3
    a20a:	4603      	mov	r3, r0
    a20c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a20e:	2300      	movs	r3, #0
    a210:	73fb      	strb	r3, [r7, #15]
    a212:	e010      	b.n	a236 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    a214:	7bfa      	ldrb	r2, [r7, #15]
    a216:	4910      	ldr	r1, [pc, #64]	; (a258 <get_tc_index+0x5c>)
    a218:	4613      	mov	r3, r2
    a21a:	009b      	lsls	r3, r3, #2
    a21c:	4413      	add	r3, r2
    a21e:	009b      	lsls	r3, r3, #2
    a220:	440b      	add	r3, r1
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	7bba      	ldrb	r2, [r7, #14]
    a226:	429a      	cmp	r2, r3
    a228:	d102      	bne.n	a230 <get_tc_index+0x34>
			return i;
    a22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a22e:	e00d      	b.n	a24c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a230:	7bfb      	ldrb	r3, [r7, #15]
    a232:	3301      	adds	r3, #1
    a234:	73fb      	strb	r3, [r7, #15]
    a236:	7bfb      	ldrb	r3, [r7, #15]
    a238:	2b05      	cmp	r3, #5
    a23a:	d9eb      	bls.n	a214 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    a23c:	f240 221d 	movw	r2, #541	; 0x21d
    a240:	4906      	ldr	r1, [pc, #24]	; (a25c <get_tc_index+0x60>)
    a242:	2000      	movs	r0, #0
    a244:	4b06      	ldr	r3, [pc, #24]	; (a260 <get_tc_index+0x64>)
    a246:	4798      	blx	r3
	return -1;
    a248:	f04f 33ff 	mov.w	r3, #4294967295
}
    a24c:	4618      	mov	r0, r3
    a24e:	3710      	adds	r7, #16
    a250:	46bd      	mov	sp, r7
    a252:	bd80      	pop	{r7, pc}
    a254:	0000a301 	.word	0x0000a301
    a258:	20000110 	.word	0x20000110
    a25c:	0001b988 	.word	0x0001b988
    a260:	00004d25 	.word	0x00004d25

0000a264 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    a264:	b480      	push	{r7}
    a266:	b083      	sub	sp, #12
    a268:	af00      	add	r7, sp, #0
    a26a:	6078      	str	r0, [r7, #4]
    a26c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	4a17      	ldr	r2, [pc, #92]	; (a2d0 <_tc_init_irq_param+0x6c>)
    a272:	4293      	cmp	r3, r2
    a274:	d102      	bne.n	a27c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    a276:	4a17      	ldr	r2, [pc, #92]	; (a2d4 <_tc_init_irq_param+0x70>)
    a278:	683b      	ldr	r3, [r7, #0]
    a27a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	4a16      	ldr	r2, [pc, #88]	; (a2d8 <_tc_init_irq_param+0x74>)
    a280:	4293      	cmp	r3, r2
    a282:	d102      	bne.n	a28a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    a284:	4a15      	ldr	r2, [pc, #84]	; (a2dc <_tc_init_irq_param+0x78>)
    a286:	683b      	ldr	r3, [r7, #0]
    a288:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	4a14      	ldr	r2, [pc, #80]	; (a2e0 <_tc_init_irq_param+0x7c>)
    a28e:	4293      	cmp	r3, r2
    a290:	d102      	bne.n	a298 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    a292:	4a14      	ldr	r2, [pc, #80]	; (a2e4 <_tc_init_irq_param+0x80>)
    a294:	683b      	ldr	r3, [r7, #0]
    a296:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	4a13      	ldr	r2, [pc, #76]	; (a2e8 <_tc_init_irq_param+0x84>)
    a29c:	4293      	cmp	r3, r2
    a29e:	d102      	bne.n	a2a6 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    a2a0:	4a12      	ldr	r2, [pc, #72]	; (a2ec <_tc_init_irq_param+0x88>)
    a2a2:	683b      	ldr	r3, [r7, #0]
    a2a4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    a2a6:	687b      	ldr	r3, [r7, #4]
    a2a8:	4a11      	ldr	r2, [pc, #68]	; (a2f0 <_tc_init_irq_param+0x8c>)
    a2aa:	4293      	cmp	r3, r2
    a2ac:	d102      	bne.n	a2b4 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    a2ae:	4a11      	ldr	r2, [pc, #68]	; (a2f4 <_tc_init_irq_param+0x90>)
    a2b0:	683b      	ldr	r3, [r7, #0]
    a2b2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a2b4:	687b      	ldr	r3, [r7, #4]
    a2b6:	4a10      	ldr	r2, [pc, #64]	; (a2f8 <_tc_init_irq_param+0x94>)
    a2b8:	4293      	cmp	r3, r2
    a2ba:	d102      	bne.n	a2c2 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    a2bc:	4a0f      	ldr	r2, [pc, #60]	; (a2fc <_tc_init_irq_param+0x98>)
    a2be:	683b      	ldr	r3, [r7, #0]
    a2c0:	6013      	str	r3, [r2, #0]
	}
}
    a2c2:	bf00      	nop
    a2c4:	370c      	adds	r7, #12
    a2c6:	46bd      	mov	sp, r7
    a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2cc:	4770      	bx	lr
    a2ce:	bf00      	nop
    a2d0:	40003800 	.word	0x40003800
    a2d4:	2000235c 	.word	0x2000235c
    a2d8:	4101a000 	.word	0x4101a000
    a2dc:	20002360 	.word	0x20002360
    a2e0:	42001400 	.word	0x42001400
    a2e4:	20002364 	.word	0x20002364
    a2e8:	42001800 	.word	0x42001800
    a2ec:	20002368 	.word	0x20002368
    a2f0:	43001400 	.word	0x43001400
    a2f4:	2000236c 	.word	0x2000236c
    a2f8:	43001800 	.word	0x43001800
    a2fc:	20002370 	.word	0x20002370

0000a300 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a300:	b4b0      	push	{r4, r5, r7}
    a302:	b08d      	sub	sp, #52	; 0x34
    a304:	af00      	add	r7, sp, #0
    a306:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a308:	4b13      	ldr	r3, [pc, #76]	; (a358 <_get_hardware_offset+0x58>)
    a30a:	f107 040c 	add.w	r4, r7, #12
    a30e:	461d      	mov	r5, r3
    a310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a31c:	2300      	movs	r3, #0
    a31e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a320:	e010      	b.n	a344 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a324:	009b      	lsls	r3, r3, #2
    a326:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a32a:	4413      	add	r3, r2
    a32c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a330:	461a      	mov	r2, r3
    a332:	687b      	ldr	r3, [r7, #4]
    a334:	429a      	cmp	r2, r3
    a336:	d102      	bne.n	a33e <_get_hardware_offset+0x3e>
			return i;
    a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a33a:	b2db      	uxtb	r3, r3
    a33c:	e006      	b.n	a34c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a340:	3301      	adds	r3, #1
    a342:	62fb      	str	r3, [r7, #44]	; 0x2c
    a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a346:	2b07      	cmp	r3, #7
    a348:	d9eb      	bls.n	a322 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a34a:	2300      	movs	r3, #0
}
    a34c:	4618      	mov	r0, r3
    a34e:	3734      	adds	r7, #52	; 0x34
    a350:	46bd      	mov	sp, r7
    a352:	bcb0      	pop	{r4, r5, r7}
    a354:	4770      	bx	lr
    a356:	bf00      	nop
    a358:	0001b99c 	.word	0x0001b99c

0000a35c <__NVIC_EnableIRQ>:
{
    a35c:	b480      	push	{r7}
    a35e:	b083      	sub	sp, #12
    a360:	af00      	add	r7, sp, #0
    a362:	4603      	mov	r3, r0
    a364:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a36a:	2b00      	cmp	r3, #0
    a36c:	db0b      	blt.n	a386 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a36e:	4909      	ldr	r1, [pc, #36]	; (a394 <__NVIC_EnableIRQ+0x38>)
    a370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a374:	095b      	lsrs	r3, r3, #5
    a376:	88fa      	ldrh	r2, [r7, #6]
    a378:	f002 021f 	and.w	r2, r2, #31
    a37c:	2001      	movs	r0, #1
    a37e:	fa00 f202 	lsl.w	r2, r0, r2
    a382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a386:	bf00      	nop
    a388:	370c      	adds	r7, #12
    a38a:	46bd      	mov	sp, r7
    a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a390:	4770      	bx	lr
    a392:	bf00      	nop
    a394:	e000e100 	.word	0xe000e100

0000a398 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a398:	b480      	push	{r7}
    a39a:	b087      	sub	sp, #28
    a39c:	af00      	add	r7, sp, #0
    a39e:	60f8      	str	r0, [r7, #12]
    a3a0:	460b      	mov	r3, r1
    a3a2:	607a      	str	r2, [r7, #4]
    a3a4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a3a6:	7afa      	ldrb	r2, [r7, #11]
    a3a8:	68f9      	ldr	r1, [r7, #12]
    a3aa:	4613      	mov	r3, r2
    a3ac:	009b      	lsls	r3, r3, #2
    a3ae:	4413      	add	r3, r2
    a3b0:	009b      	lsls	r3, r3, #2
    a3b2:	440b      	add	r3, r1
    a3b4:	3340      	adds	r3, #64	; 0x40
    a3b6:	681b      	ldr	r3, [r3, #0]
    a3b8:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a3ba:	697a      	ldr	r2, [r7, #20]
    a3bc:	687b      	ldr	r3, [r7, #4]
    a3be:	4013      	ands	r3, r2
    a3c0:	617b      	str	r3, [r7, #20]
	return tmp;
    a3c2:	697b      	ldr	r3, [r7, #20]
}
    a3c4:	4618      	mov	r0, r3
    a3c6:	371c      	adds	r7, #28
    a3c8:	46bd      	mov	sp, r7
    a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ce:	4770      	bx	lr

0000a3d0 <hri_oscctrl_get_STATUS_reg>:
{
    a3d0:	b480      	push	{r7}
    a3d2:	b085      	sub	sp, #20
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	6078      	str	r0, [r7, #4]
    a3d8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a3da:	687b      	ldr	r3, [r7, #4]
    a3dc:	691b      	ldr	r3, [r3, #16]
    a3de:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a3e0:	68fa      	ldr	r2, [r7, #12]
    a3e2:	683b      	ldr	r3, [r7, #0]
    a3e4:	4013      	ands	r3, r2
    a3e6:	60fb      	str	r3, [r7, #12]
	return tmp;
    a3e8:	68fb      	ldr	r3, [r7, #12]
}
    a3ea:	4618      	mov	r0, r3
    a3ec:	3714      	adds	r7, #20
    a3ee:	46bd      	mov	sp, r7
    a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3f4:	4770      	bx	lr

0000a3f6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a3f6:	b480      	push	{r7}
    a3f8:	b085      	sub	sp, #20
    a3fa:	af00      	add	r7, sp, #0
    a3fc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a3fe:	687b      	ldr	r3, [r7, #4]
    a400:	f893 3020 	ldrb.w	r3, [r3, #32]
    a404:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a406:	7bfb      	ldrb	r3, [r7, #15]
    a408:	f003 0301 	and.w	r3, r3, #1
    a40c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a40e:	7bfb      	ldrb	r3, [r7, #15]
    a410:	2b00      	cmp	r3, #0
    a412:	bf14      	ite	ne
    a414:	2301      	movne	r3, #1
    a416:	2300      	moveq	r3, #0
    a418:	b2db      	uxtb	r3, r3
}
    a41a:	4618      	mov	r0, r3
    a41c:	3714      	adds	r7, #20
    a41e:	46bd      	mov	sp, r7
    a420:	f85d 7b04 	ldr.w	r7, [sp], #4
    a424:	4770      	bx	lr

0000a426 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a426:	b480      	push	{r7}
    a428:	b083      	sub	sp, #12
    a42a:	af00      	add	r7, sp, #0
    a42c:	6078      	str	r0, [r7, #4]
    a42e:	460b      	mov	r3, r1
    a430:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a432:	bf00      	nop
    a434:	687b      	ldr	r3, [r7, #4]
    a436:	789b      	ldrb	r3, [r3, #2]
    a438:	b2da      	uxtb	r2, r3
    a43a:	78fb      	ldrb	r3, [r7, #3]
    a43c:	4013      	ands	r3, r2
    a43e:	b2db      	uxtb	r3, r3
    a440:	2b00      	cmp	r3, #0
    a442:	d1f7      	bne.n	a434 <hri_usb_wait_for_sync+0xe>
	};
}
    a444:	bf00      	nop
    a446:	370c      	adds	r7, #12
    a448:	46bd      	mov	sp, r7
    a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a44e:	4770      	bx	lr

0000a450 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a450:	b480      	push	{r7}
    a452:	b083      	sub	sp, #12
    a454:	af00      	add	r7, sp, #0
    a456:	6078      	str	r0, [r7, #4]
    a458:	460b      	mov	r3, r1
    a45a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a45c:	687b      	ldr	r3, [r7, #4]
    a45e:	789b      	ldrb	r3, [r3, #2]
    a460:	b2da      	uxtb	r2, r3
    a462:	78fb      	ldrb	r3, [r7, #3]
    a464:	4013      	ands	r3, r2
    a466:	b2db      	uxtb	r3, r3
    a468:	2b00      	cmp	r3, #0
    a46a:	bf14      	ite	ne
    a46c:	2301      	movne	r3, #1
    a46e:	2300      	moveq	r3, #0
    a470:	b2db      	uxtb	r3, r3
}
    a472:	4618      	mov	r0, r3
    a474:	370c      	adds	r7, #12
    a476:	46bd      	mov	sp, r7
    a478:	f85d 7b04 	ldr.w	r7, [sp], #4
    a47c:	4770      	bx	lr

0000a47e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a47e:	b480      	push	{r7}
    a480:	b085      	sub	sp, #20
    a482:	af00      	add	r7, sp, #0
    a484:	6078      	str	r0, [r7, #4]
    a486:	460b      	mov	r3, r1
    a488:	70fb      	strb	r3, [r7, #3]
    a48a:	4613      	mov	r3, r2
    a48c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a48e:	78fb      	ldrb	r3, [r7, #3]
    a490:	687a      	ldr	r2, [r7, #4]
    a492:	3308      	adds	r3, #8
    a494:	015b      	lsls	r3, r3, #5
    a496:	4413      	add	r3, r2
    a498:	3307      	adds	r3, #7
    a49a:	781b      	ldrb	r3, [r3, #0]
    a49c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a49e:	7bfa      	ldrb	r2, [r7, #15]
    a4a0:	78bb      	ldrb	r3, [r7, #2]
    a4a2:	4013      	ands	r3, r2
    a4a4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
    a4a8:	4618      	mov	r0, r3
    a4aa:	3714      	adds	r7, #20
    a4ac:	46bd      	mov	sp, r7
    a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4b2:	4770      	bx	lr

0000a4b4 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a4b4:	b480      	push	{r7}
    a4b6:	b083      	sub	sp, #12
    a4b8:	af00      	add	r7, sp, #0
    a4ba:	6078      	str	r0, [r7, #4]
    a4bc:	460b      	mov	r3, r1
    a4be:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a4c0:	78fb      	ldrb	r3, [r7, #3]
    a4c2:	687a      	ldr	r2, [r7, #4]
    a4c4:	3308      	adds	r3, #8
    a4c6:	015b      	lsls	r3, r3, #5
    a4c8:	4413      	add	r3, r2
    a4ca:	3307      	adds	r3, #7
    a4cc:	781b      	ldrb	r3, [r3, #0]
    a4ce:	b2db      	uxtb	r3, r3
}
    a4d0:	4618      	mov	r0, r3
    a4d2:	370c      	adds	r7, #12
    a4d4:	46bd      	mov	sp, r7
    a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4da:	4770      	bx	lr

0000a4dc <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a4dc:	b480      	push	{r7}
    a4de:	b083      	sub	sp, #12
    a4e0:	af00      	add	r7, sp, #0
    a4e2:	6078      	str	r0, [r7, #4]
    a4e4:	460b      	mov	r3, r1
    a4e6:	70fb      	strb	r3, [r7, #3]
    a4e8:	4613      	mov	r3, r2
    a4ea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a4ec:	78fb      	ldrb	r3, [r7, #3]
    a4ee:	687a      	ldr	r2, [r7, #4]
    a4f0:	3308      	adds	r3, #8
    a4f2:	015b      	lsls	r3, r3, #5
    a4f4:	4413      	add	r3, r2
    a4f6:	3307      	adds	r3, #7
    a4f8:	78ba      	ldrb	r2, [r7, #2]
    a4fa:	701a      	strb	r2, [r3, #0]
}
    a4fc:	bf00      	nop
    a4fe:	370c      	adds	r7, #12
    a500:	46bd      	mov	sp, r7
    a502:	f85d 7b04 	ldr.w	r7, [sp], #4
    a506:	4770      	bx	lr

0000a508 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a508:	b480      	push	{r7}
    a50a:	b083      	sub	sp, #12
    a50c:	af00      	add	r7, sp, #0
    a50e:	6078      	str	r0, [r7, #4]
    a510:	460b      	mov	r3, r1
    a512:	70fb      	strb	r3, [r7, #3]
    a514:	4613      	mov	r3, r2
    a516:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a518:	78fb      	ldrb	r3, [r7, #3]
    a51a:	687a      	ldr	r2, [r7, #4]
    a51c:	3308      	adds	r3, #8
    a51e:	015b      	lsls	r3, r3, #5
    a520:	4413      	add	r3, r2
    a522:	3305      	adds	r3, #5
    a524:	78ba      	ldrb	r2, [r7, #2]
    a526:	701a      	strb	r2, [r3, #0]
}
    a528:	bf00      	nop
    a52a:	370c      	adds	r7, #12
    a52c:	46bd      	mov	sp, r7
    a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a532:	4770      	bx	lr

0000a534 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a534:	b480      	push	{r7}
    a536:	b083      	sub	sp, #12
    a538:	af00      	add	r7, sp, #0
    a53a:	6078      	str	r0, [r7, #4]
    a53c:	460b      	mov	r3, r1
    a53e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a540:	78fb      	ldrb	r3, [r7, #3]
    a542:	687a      	ldr	r2, [r7, #4]
    a544:	3308      	adds	r3, #8
    a546:	015b      	lsls	r3, r3, #5
    a548:	4413      	add	r3, r2
    a54a:	3306      	adds	r3, #6
    a54c:	781b      	ldrb	r3, [r3, #0]
    a54e:	b2db      	uxtb	r3, r3
}
    a550:	4618      	mov	r0, r3
    a552:	370c      	adds	r7, #12
    a554:	46bd      	mov	sp, r7
    a556:	f85d 7b04 	ldr.w	r7, [sp], #4
    a55a:	4770      	bx	lr

0000a55c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a55c:	b480      	push	{r7}
    a55e:	b083      	sub	sp, #12
    a560:	af00      	add	r7, sp, #0
    a562:	6078      	str	r0, [r7, #4]
    a564:	460b      	mov	r3, r1
    a566:	70fb      	strb	r3, [r7, #3]
    a568:	4613      	mov	r3, r2
    a56a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a56c:	78fb      	ldrb	r3, [r7, #3]
    a56e:	687a      	ldr	r2, [r7, #4]
    a570:	3308      	adds	r3, #8
    a572:	015b      	lsls	r3, r3, #5
    a574:	4413      	add	r3, r2
    a576:	3304      	adds	r3, #4
    a578:	78ba      	ldrb	r2, [r7, #2]
    a57a:	701a      	strb	r2, [r3, #0]
}
    a57c:	bf00      	nop
    a57e:	370c      	adds	r7, #12
    a580:	46bd      	mov	sp, r7
    a582:	f85d 7b04 	ldr.w	r7, [sp], #4
    a586:	4770      	bx	lr

0000a588 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a588:	b480      	push	{r7}
    a58a:	b083      	sub	sp, #12
    a58c:	af00      	add	r7, sp, #0
    a58e:	6078      	str	r0, [r7, #4]
    a590:	460b      	mov	r3, r1
    a592:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a594:	78fb      	ldrb	r3, [r7, #3]
    a596:	687a      	ldr	r2, [r7, #4]
    a598:	015b      	lsls	r3, r3, #5
    a59a:	4413      	add	r3, r2
    a59c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a5a0:	2210      	movs	r2, #16
    a5a2:	701a      	strb	r2, [r3, #0]
}
    a5a4:	bf00      	nop
    a5a6:	370c      	adds	r7, #12
    a5a8:	46bd      	mov	sp, r7
    a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ae:	4770      	bx	lr

0000a5b0 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a5b0:	b480      	push	{r7}
    a5b2:	b083      	sub	sp, #12
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
    a5b8:	460b      	mov	r3, r1
    a5ba:	70fb      	strb	r3, [r7, #3]
    a5bc:	4613      	mov	r3, r2
    a5be:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a5c0:	78fb      	ldrb	r3, [r7, #3]
    a5c2:	687a      	ldr	r2, [r7, #4]
    a5c4:	015b      	lsls	r3, r3, #5
    a5c6:	4413      	add	r3, r2
    a5c8:	f203 1309 	addw	r3, r3, #265	; 0x109
    a5cc:	78ba      	ldrb	r2, [r7, #2]
    a5ce:	701a      	strb	r2, [r3, #0]
}
    a5d0:	bf00      	nop
    a5d2:	370c      	adds	r7, #12
    a5d4:	46bd      	mov	sp, r7
    a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5da:	4770      	bx	lr

0000a5dc <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a5dc:	b480      	push	{r7}
    a5de:	b083      	sub	sp, #12
    a5e0:	af00      	add	r7, sp, #0
    a5e2:	6078      	str	r0, [r7, #4]
    a5e4:	460b      	mov	r3, r1
    a5e6:	70fb      	strb	r3, [r7, #3]
    a5e8:	4613      	mov	r3, r2
    a5ea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a5ec:	78fb      	ldrb	r3, [r7, #3]
    a5ee:	687a      	ldr	r2, [r7, #4]
    a5f0:	015b      	lsls	r3, r3, #5
    a5f2:	4413      	add	r3, r2
    a5f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a5f8:	78ba      	ldrb	r2, [r7, #2]
    a5fa:	701a      	strb	r2, [r3, #0]
}
    a5fc:	bf00      	nop
    a5fe:	370c      	adds	r7, #12
    a600:	46bd      	mov	sp, r7
    a602:	f85d 7b04 	ldr.w	r7, [sp], #4
    a606:	4770      	bx	lr

0000a608 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a608:	b480      	push	{r7}
    a60a:	b085      	sub	sp, #20
    a60c:	af00      	add	r7, sp, #0
    a60e:	6078      	str	r0, [r7, #4]
    a610:	460b      	mov	r3, r1
    a612:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a614:	78fb      	ldrb	r3, [r7, #3]
    a616:	687a      	ldr	r2, [r7, #4]
    a618:	3308      	adds	r3, #8
    a61a:	015b      	lsls	r3, r3, #5
    a61c:	4413      	add	r3, r2
    a61e:	781b      	ldrb	r3, [r3, #0]
    a620:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a622:	7bfb      	ldrb	r3, [r7, #15]
    a624:	f003 0307 	and.w	r3, r3, #7
    a628:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a62a:	7bfb      	ldrb	r3, [r7, #15]
}
    a62c:	4618      	mov	r0, r3
    a62e:	3714      	adds	r7, #20
    a630:	46bd      	mov	sp, r7
    a632:	f85d 7b04 	ldr.w	r7, [sp], #4
    a636:	4770      	bx	lr

0000a638 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a638:	b480      	push	{r7}
    a63a:	b085      	sub	sp, #20
    a63c:	af00      	add	r7, sp, #0
    a63e:	6078      	str	r0, [r7, #4]
    a640:	460b      	mov	r3, r1
    a642:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a644:	78fb      	ldrb	r3, [r7, #3]
    a646:	687a      	ldr	r2, [r7, #4]
    a648:	3308      	adds	r3, #8
    a64a:	015b      	lsls	r3, r3, #5
    a64c:	4413      	add	r3, r2
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a652:	7bfb      	ldrb	r3, [r7, #15]
    a654:	091b      	lsrs	r3, r3, #4
    a656:	b2db      	uxtb	r3, r3
    a658:	f003 0307 	and.w	r3, r3, #7
    a65c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a65e:	7bfb      	ldrb	r3, [r7, #15]
}
    a660:	4618      	mov	r0, r3
    a662:	3714      	adds	r7, #20
    a664:	46bd      	mov	sp, r7
    a666:	f85d 7b04 	ldr.w	r7, [sp], #4
    a66a:	4770      	bx	lr

0000a66c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a66c:	b480      	push	{r7}
    a66e:	b083      	sub	sp, #12
    a670:	af00      	add	r7, sp, #0
    a672:	6078      	str	r0, [r7, #4]
    a674:	460b      	mov	r3, r1
    a676:	70fb      	strb	r3, [r7, #3]
    a678:	4613      	mov	r3, r2
    a67a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a67c:	78fb      	ldrb	r3, [r7, #3]
    a67e:	687a      	ldr	r2, [r7, #4]
    a680:	3308      	adds	r3, #8
    a682:	015b      	lsls	r3, r3, #5
    a684:	4413      	add	r3, r2
    a686:	78ba      	ldrb	r2, [r7, #2]
    a688:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a68a:	bf00      	nop
    a68c:	370c      	adds	r7, #12
    a68e:	46bd      	mov	sp, r7
    a690:	f85d 7b04 	ldr.w	r7, [sp], #4
    a694:	4770      	bx	lr

0000a696 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a696:	b480      	push	{r7}
    a698:	b083      	sub	sp, #12
    a69a:	af00      	add	r7, sp, #0
    a69c:	6078      	str	r0, [r7, #4]
    a69e:	460b      	mov	r3, r1
    a6a0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a6a2:	78fb      	ldrb	r3, [r7, #3]
    a6a4:	687a      	ldr	r2, [r7, #4]
    a6a6:	3308      	adds	r3, #8
    a6a8:	015b      	lsls	r3, r3, #5
    a6aa:	4413      	add	r3, r2
    a6ac:	781b      	ldrb	r3, [r3, #0]
    a6ae:	b2db      	uxtb	r3, r3
}
    a6b0:	4618      	mov	r0, r3
    a6b2:	370c      	adds	r7, #12
    a6b4:	46bd      	mov	sp, r7
    a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6ba:	4770      	bx	lr

0000a6bc <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a6bc:	b480      	push	{r7}
    a6be:	b083      	sub	sp, #12
    a6c0:	af00      	add	r7, sp, #0
    a6c2:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	8b9b      	ldrh	r3, [r3, #28]
    a6c8:	b29b      	uxth	r3, r3
}
    a6ca:	4618      	mov	r0, r3
    a6cc:	370c      	adds	r7, #12
    a6ce:	46bd      	mov	sp, r7
    a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6d4:	4770      	bx	lr

0000a6d6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a6d6:	b480      	push	{r7}
    a6d8:	b083      	sub	sp, #12
    a6da:	af00      	add	r7, sp, #0
    a6dc:	6078      	str	r0, [r7, #4]
    a6de:	460b      	mov	r3, r1
    a6e0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a6e2:	687b      	ldr	r3, [r7, #4]
    a6e4:	887a      	ldrh	r2, [r7, #2]
    a6e6:	839a      	strh	r2, [r3, #28]
}
    a6e8:	bf00      	nop
    a6ea:	370c      	adds	r7, #12
    a6ec:	46bd      	mov	sp, r7
    a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6f2:	4770      	bx	lr

0000a6f4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a6f4:	b480      	push	{r7}
    a6f6:	b083      	sub	sp, #12
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	6078      	str	r0, [r7, #4]
    a6fc:	460b      	mov	r3, r1
    a6fe:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a700:	687b      	ldr	r3, [r7, #4]
    a702:	887a      	ldrh	r2, [r7, #2]
    a704:	831a      	strh	r2, [r3, #24]
}
    a706:	bf00      	nop
    a708:	370c      	adds	r7, #12
    a70a:	46bd      	mov	sp, r7
    a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a710:	4770      	bx	lr

0000a712 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a712:	b480      	push	{r7}
    a714:	b083      	sub	sp, #12
    a716:	af00      	add	r7, sp, #0
    a718:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	8b1b      	ldrh	r3, [r3, #24]
    a71e:	b29b      	uxth	r3, r3
}
    a720:	4618      	mov	r0, r3
    a722:	370c      	adds	r7, #12
    a724:	46bd      	mov	sp, r7
    a726:	f85d 7b04 	ldr.w	r7, [sp], #4
    a72a:	4770      	bx	lr

0000a72c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a72c:	b480      	push	{r7}
    a72e:	b083      	sub	sp, #12
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
    a734:	460b      	mov	r3, r1
    a736:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	887a      	ldrh	r2, [r7, #2]
    a73c:	829a      	strh	r2, [r3, #20]
}
    a73e:	bf00      	nop
    a740:	370c      	adds	r7, #12
    a742:	46bd      	mov	sp, r7
    a744:	f85d 7b04 	ldr.w	r7, [sp], #4
    a748:	4770      	bx	lr

0000a74a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a74a:	b480      	push	{r7}
    a74c:	b085      	sub	sp, #20
    a74e:	af00      	add	r7, sp, #0
    a750:	6078      	str	r0, [r7, #4]
    a752:	460b      	mov	r3, r1
    a754:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a756:	687b      	ldr	r3, [r7, #4]
    a758:	789b      	ldrb	r3, [r3, #2]
    a75a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a75c:	7bfa      	ldrb	r2, [r7, #15]
    a75e:	78fb      	ldrb	r3, [r7, #3]
    a760:	4013      	ands	r3, r2
    a762:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a764:	7bfb      	ldrb	r3, [r7, #15]
}
    a766:	4618      	mov	r0, r3
    a768:	3714      	adds	r7, #20
    a76a:	46bd      	mov	sp, r7
    a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a770:	4770      	bx	lr
	...

0000a774 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a774:	b580      	push	{r7, lr}
    a776:	b082      	sub	sp, #8
    a778:	af00      	add	r7, sp, #0
    a77a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	b2db      	uxtb	r3, r3
    a782:	f023 0302 	bic.w	r3, r3, #2
    a786:	b2da      	uxtb	r2, r3
    a788:	687b      	ldr	r3, [r7, #4]
    a78a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a78c:	2103      	movs	r1, #3
    a78e:	6878      	ldr	r0, [r7, #4]
    a790:	4b02      	ldr	r3, [pc, #8]	; (a79c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a792:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a794:	bf00      	nop
    a796:	3708      	adds	r7, #8
    a798:	46bd      	mov	sp, r7
    a79a:	bd80      	pop	{r7, pc}
    a79c:	0000a427 	.word	0x0000a427

0000a7a0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a7a0:	b580      	push	{r7, lr}
    a7a2:	b084      	sub	sp, #16
    a7a4:	af00      	add	r7, sp, #0
    a7a6:	6078      	str	r0, [r7, #4]
    a7a8:	460b      	mov	r3, r1
    a7aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a7ac:	2103      	movs	r1, #3
    a7ae:	6878      	ldr	r0, [r7, #4]
    a7b0:	4b06      	ldr	r3, [pc, #24]	; (a7cc <hri_usb_get_CTRLA_reg+0x2c>)
    a7b2:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a7b4:	687b      	ldr	r3, [r7, #4]
    a7b6:	781b      	ldrb	r3, [r3, #0]
    a7b8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a7ba:	7bfa      	ldrb	r2, [r7, #15]
    a7bc:	78fb      	ldrb	r3, [r7, #3]
    a7be:	4013      	ands	r3, r2
    a7c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a7c2:	7bfb      	ldrb	r3, [r7, #15]
}
    a7c4:	4618      	mov	r0, r3
    a7c6:	3710      	adds	r7, #16
    a7c8:	46bd      	mov	sp, r7
    a7ca:	bd80      	pop	{r7, pc}
    a7cc:	0000a427 	.word	0x0000a427

0000a7d0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a7d0:	b580      	push	{r7, lr}
    a7d2:	b082      	sub	sp, #8
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	6078      	str	r0, [r7, #4]
    a7d8:	460b      	mov	r3, r1
    a7da:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a7dc:	687b      	ldr	r3, [r7, #4]
    a7de:	78fa      	ldrb	r2, [r7, #3]
    a7e0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a7e2:	2103      	movs	r1, #3
    a7e4:	6878      	ldr	r0, [r7, #4]
    a7e6:	4b03      	ldr	r3, [pc, #12]	; (a7f4 <hri_usb_write_CTRLA_reg+0x24>)
    a7e8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a7ea:	bf00      	nop
    a7ec:	3708      	adds	r7, #8
    a7ee:	46bd      	mov	sp, r7
    a7f0:	bd80      	pop	{r7, pc}
    a7f2:	bf00      	nop
    a7f4:	0000a427 	.word	0x0000a427

0000a7f8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a7f8:	b580      	push	{r7, lr}
    a7fa:	b082      	sub	sp, #8
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a800:	2103      	movs	r1, #3
    a802:	6878      	ldr	r0, [r7, #4]
    a804:	4b04      	ldr	r3, [pc, #16]	; (a818 <hri_usb_read_CTRLA_reg+0x20>)
    a806:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a808:	687b      	ldr	r3, [r7, #4]
    a80a:	781b      	ldrb	r3, [r3, #0]
    a80c:	b2db      	uxtb	r3, r3
}
    a80e:	4618      	mov	r0, r3
    a810:	3708      	adds	r7, #8
    a812:	46bd      	mov	sp, r7
    a814:	bd80      	pop	{r7, pc}
    a816:	bf00      	nop
    a818:	0000a427 	.word	0x0000a427

0000a81c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a81c:	b480      	push	{r7}
    a81e:	b083      	sub	sp, #12
    a820:	af00      	add	r7, sp, #0
    a822:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a824:	687b      	ldr	r3, [r7, #4]
    a826:	891b      	ldrh	r3, [r3, #8]
    a828:	b29b      	uxth	r3, r3
    a82a:	f023 0301 	bic.w	r3, r3, #1
    a82e:	b29a      	uxth	r2, r3
    a830:	687b      	ldr	r3, [r7, #4]
    a832:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a834:	bf00      	nop
    a836:	370c      	adds	r7, #12
    a838:	46bd      	mov	sp, r7
    a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a83e:	4770      	bx	lr

0000a840 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a840:	b480      	push	{r7}
    a842:	b083      	sub	sp, #12
    a844:	af00      	add	r7, sp, #0
    a846:	6078      	str	r0, [r7, #4]
    a848:	460b      	mov	r3, r1
    a84a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	887a      	ldrh	r2, [r7, #2]
    a850:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a852:	bf00      	nop
    a854:	370c      	adds	r7, #12
    a856:	46bd      	mov	sp, r7
    a858:	f85d 7b04 	ldr.w	r7, [sp], #4
    a85c:	4770      	bx	lr

0000a85e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a85e:	b480      	push	{r7}
    a860:	b083      	sub	sp, #12
    a862:	af00      	add	r7, sp, #0
    a864:	6078      	str	r0, [r7, #4]
    a866:	460b      	mov	r3, r1
    a868:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a86a:	687b      	ldr	r3, [r7, #4]
    a86c:	78fa      	ldrb	r2, [r7, #3]
    a86e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a870:	bf00      	nop
    a872:	370c      	adds	r7, #12
    a874:	46bd      	mov	sp, r7
    a876:	f85d 7b04 	ldr.w	r7, [sp], #4
    a87a:	4770      	bx	lr

0000a87c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a87c:	b480      	push	{r7}
    a87e:	b083      	sub	sp, #12
    a880:	af00      	add	r7, sp, #0
    a882:	6078      	str	r0, [r7, #4]
    a884:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a886:	687b      	ldr	r3, [r7, #4]
    a888:	683a      	ldr	r2, [r7, #0]
    a88a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a88c:	bf00      	nop
    a88e:	370c      	adds	r7, #12
    a890:	46bd      	mov	sp, r7
    a892:	f85d 7b04 	ldr.w	r7, [sp], #4
    a896:	4770      	bx	lr

0000a898 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a898:	b480      	push	{r7}
    a89a:	b083      	sub	sp, #12
    a89c:	af00      	add	r7, sp, #0
    a89e:	6078      	str	r0, [r7, #4]
    a8a0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a8a2:	2300      	movs	r3, #0
}
    a8a4:	4618      	mov	r0, r3
    a8a6:	370c      	adds	r7, #12
    a8a8:	46bd      	mov	sp, r7
    a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8ae:	4770      	bx	lr

0000a8b0 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a8b0:	b480      	push	{r7}
    a8b2:	b085      	sub	sp, #20
    a8b4:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a8b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a8ba:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a8bc:	4b28      	ldr	r3, [pc, #160]	; (a960 <_usb_load_calib+0xb0>)
    a8be:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a8c0:	f003 031f 	and.w	r3, r3, #31
    a8c4:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a8c6:	4b26      	ldr	r3, [pc, #152]	; (a960 <_usb_load_calib+0xb0>)
    a8c8:	681b      	ldr	r3, [r3, #0]
    a8ca:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a8cc:	f003 031f 	and.w	r3, r3, #31
    a8d0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a8d2:	4b23      	ldr	r3, [pc, #140]	; (a960 <_usb_load_calib+0xb0>)
    a8d4:	681b      	ldr	r3, [r3, #0]
    a8d6:	0a9b      	lsrs	r3, r3, #10
    a8d8:	f003 0307 	and.w	r3, r3, #7
    a8dc:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a8de:	68fb      	ldr	r3, [r7, #12]
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d002      	beq.n	a8ea <_usb_load_calib+0x3a>
    a8e4:	68fb      	ldr	r3, [r7, #12]
    a8e6:	2b1f      	cmp	r3, #31
    a8e8:	d101      	bne.n	a8ee <_usb_load_calib+0x3e>
		pad_transn = 9;
    a8ea:	2309      	movs	r3, #9
    a8ec:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a8ee:	68bb      	ldr	r3, [r7, #8]
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	d002      	beq.n	a8fa <_usb_load_calib+0x4a>
    a8f4:	68bb      	ldr	r3, [r7, #8]
    a8f6:	2b1f      	cmp	r3, #31
    a8f8:	d101      	bne.n	a8fe <_usb_load_calib+0x4e>
		pad_transp = 25;
    a8fa:	2319      	movs	r3, #25
    a8fc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a8fe:	687b      	ldr	r3, [r7, #4]
    a900:	2b00      	cmp	r3, #0
    a902:	d002      	beq.n	a90a <_usb_load_calib+0x5a>
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	2b07      	cmp	r3, #7
    a908:	d101      	bne.n	a90e <_usb_load_calib+0x5e>
		pad_trim = 6;
    a90a:	2306      	movs	r3, #6
    a90c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a90e:	68fb      	ldr	r3, [r7, #12]
    a910:	b29b      	uxth	r3, r3
    a912:	019b      	lsls	r3, r3, #6
    a914:	b29b      	uxth	r3, r3
    a916:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a91a:	b29a      	uxth	r2, r3
    a91c:	68bb      	ldr	r3, [r7, #8]
    a91e:	b29b      	uxth	r3, r3
    a920:	f003 031f 	and.w	r3, r3, #31
    a924:	b29b      	uxth	r3, r3
    a926:	4313      	orrs	r3, r2
    a928:	b29a      	uxth	r2, r3
    a92a:	687b      	ldr	r3, [r7, #4]
    a92c:	b29b      	uxth	r3, r3
    a92e:	031b      	lsls	r3, r3, #12
    a930:	b29b      	uxth	r3, r3
    a932:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a936:	b29b      	uxth	r3, r3
    a938:	4313      	orrs	r3, r2
    a93a:	b29a      	uxth	r2, r3
    a93c:	683b      	ldr	r3, [r7, #0]
    a93e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a940:	683a      	ldr	r2, [r7, #0]
    a942:	78d3      	ldrb	r3, [r2, #3]
    a944:	f043 0303 	orr.w	r3, r3, #3
    a948:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a94a:	683a      	ldr	r2, [r7, #0]
    a94c:	78d3      	ldrb	r3, [r2, #3]
    a94e:	f043 030c 	orr.w	r3, r3, #12
    a952:	70d3      	strb	r3, [r2, #3]
}
    a954:	bf00      	nop
    a956:	3714      	adds	r7, #20
    a958:	46bd      	mov	sp, r7
    a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a95e:	4770      	bx	lr
    a960:	00800084 	.word	0x00800084

0000a964 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a964:	b580      	push	{r7, lr}
    a966:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a968:	bf00      	nop
    a96a:	2203      	movs	r2, #3
    a96c:	2100      	movs	r1, #0
    a96e:	4804      	ldr	r0, [pc, #16]	; (a980 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a970:	4b04      	ldr	r3, [pc, #16]	; (a984 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a972:	4798      	blx	r3
    a974:	4603      	mov	r3, r0
    a976:	2b03      	cmp	r3, #3
    a978:	d1f7      	bne.n	a96a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a97a:	bf00      	nop
    a97c:	bd80      	pop	{r7, pc}
    a97e:	bf00      	nop
    a980:	40001000 	.word	0x40001000
    a984:	0000a399 	.word	0x0000a399

0000a988 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a988:	b580      	push	{r7, lr}
    a98a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a98c:	480e      	ldr	r0, [pc, #56]	; (a9c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a98e:	4b0f      	ldr	r3, [pc, #60]	; (a9cc <_usb_d_dev_wait_dfll_rdy+0x44>)
    a990:	4798      	blx	r3
    a992:	4603      	mov	r3, r0
    a994:	2b00      	cmp	r3, #0
    a996:	d00a      	beq.n	a9ae <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a998:	bf00      	nop
    a99a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a99e:	480a      	ldr	r0, [pc, #40]	; (a9c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a9a0:	4b0b      	ldr	r3, [pc, #44]	; (a9d0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a9a2:	4798      	blx	r3
    a9a4:	4603      	mov	r3, r0
    a9a6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a9aa:	d1f6      	bne.n	a99a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a9ac:	e009      	b.n	a9c2 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a9ae:	bf00      	nop
    a9b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    a9b4:	4804      	ldr	r0, [pc, #16]	; (a9c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a9b6:	4b06      	ldr	r3, [pc, #24]	; (a9d0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a9b8:	4798      	blx	r3
    a9ba:	4603      	mov	r3, r0
    a9bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a9c0:	d1f6      	bne.n	a9b0 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a9c2:	bf00      	nop
    a9c4:	bd80      	pop	{r7, pc}
    a9c6:	bf00      	nop
    a9c8:	40001000 	.word	0x40001000
    a9cc:	0000a3f7 	.word	0x0000a3f7
    a9d0:	0000a3d1 	.word	0x0000a3d1

0000a9d4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a9d4:	b580      	push	{r7, lr}
    a9d6:	b082      	sub	sp, #8
    a9d8:	af00      	add	r7, sp, #0
    a9da:	4603      	mov	r3, r0
    a9dc:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a9de:	79fb      	ldrb	r3, [r7, #7]
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d102      	bne.n	a9ea <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a9e4:	4b05      	ldr	r3, [pc, #20]	; (a9fc <_usb_d_dev_wait_clk_rdy+0x28>)
    a9e6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a9e8:	e004      	b.n	a9f4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a9ea:	79fb      	ldrb	r3, [r7, #7]
    a9ec:	2b01      	cmp	r3, #1
    a9ee:	d101      	bne.n	a9f4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a9f0:	4b03      	ldr	r3, [pc, #12]	; (aa00 <_usb_d_dev_wait_clk_rdy+0x2c>)
    a9f2:	4798      	blx	r3
}
    a9f4:	bf00      	nop
    a9f6:	3708      	adds	r7, #8
    a9f8:	46bd      	mov	sp, r7
    a9fa:	bd80      	pop	{r7, pc}
    a9fc:	0000a989 	.word	0x0000a989
    aa00:	0000a965 	.word	0x0000a965

0000aa04 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    aa04:	b580      	push	{r7, lr}
    aa06:	b082      	sub	sp, #8
    aa08:	af00      	add	r7, sp, #0
    aa0a:	4603      	mov	r3, r0
    aa0c:	6039      	str	r1, [r7, #0]
    aa0e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    aa10:	683b      	ldr	r3, [r7, #0]
    aa12:	b2da      	uxtb	r2, r3
    aa14:	79fb      	ldrb	r3, [r7, #7]
    aa16:	4619      	mov	r1, r3
    aa18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa1c:	4b02      	ldr	r3, [pc, #8]	; (aa28 <_usbd_ep_int_ack+0x24>)
    aa1e:	4798      	blx	r3
}
    aa20:	bf00      	nop
    aa22:	3708      	adds	r7, #8
    aa24:	46bd      	mov	sp, r7
    aa26:	bd80      	pop	{r7, pc}
    aa28:	0000a4dd 	.word	0x0000a4dd

0000aa2c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    aa2c:	b580      	push	{r7, lr}
    aa2e:	b082      	sub	sp, #8
    aa30:	af00      	add	r7, sp, #0
    aa32:	4603      	mov	r3, r0
    aa34:	6039      	str	r1, [r7, #0]
    aa36:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    aa38:	683b      	ldr	r3, [r7, #0]
    aa3a:	b2da      	uxtb	r2, r3
    aa3c:	79fb      	ldrb	r3, [r7, #7]
    aa3e:	4619      	mov	r1, r3
    aa40:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa44:	4b02      	ldr	r3, [pc, #8]	; (aa50 <_usbd_ep_int_en+0x24>)
    aa46:	4798      	blx	r3
}
    aa48:	bf00      	nop
    aa4a:	3708      	adds	r7, #8
    aa4c:	46bd      	mov	sp, r7
    aa4e:	bd80      	pop	{r7, pc}
    aa50:	0000a5b1 	.word	0x0000a5b1

0000aa54 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    aa54:	b580      	push	{r7, lr}
    aa56:	b082      	sub	sp, #8
    aa58:	af00      	add	r7, sp, #0
    aa5a:	4603      	mov	r3, r0
    aa5c:	6039      	str	r1, [r7, #0]
    aa5e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    aa60:	683b      	ldr	r3, [r7, #0]
    aa62:	b2da      	uxtb	r2, r3
    aa64:	79fb      	ldrb	r3, [r7, #7]
    aa66:	4619      	mov	r1, r3
    aa68:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa6c:	4b02      	ldr	r3, [pc, #8]	; (aa78 <_usbd_ep_int_dis+0x24>)
    aa6e:	4798      	blx	r3
}
    aa70:	bf00      	nop
    aa72:	3708      	adds	r7, #8
    aa74:	46bd      	mov	sp, r7
    aa76:	bd80      	pop	{r7, pc}
    aa78:	0000a5dd 	.word	0x0000a5dd

0000aa7c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	b082      	sub	sp, #8
    aa80:	af00      	add	r7, sp, #0
    aa82:	4603      	mov	r3, r0
    aa84:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    aa86:	79fb      	ldrb	r3, [r7, #7]
    aa88:	4619      	mov	r1, r3
    aa8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa8e:	4b06      	ldr	r3, [pc, #24]	; (aaa8 <_usbd_ep_is_ctrl+0x2c>)
    aa90:	4798      	blx	r3
    aa92:	4603      	mov	r3, r0
    aa94:	2b11      	cmp	r3, #17
    aa96:	bf0c      	ite	eq
    aa98:	2301      	moveq	r3, #1
    aa9a:	2300      	movne	r3, #0
    aa9c:	b2db      	uxtb	r3, r3
}
    aa9e:	4618      	mov	r0, r3
    aaa0:	3708      	adds	r7, #8
    aaa2:	46bd      	mov	sp, r7
    aaa4:	bd80      	pop	{r7, pc}
    aaa6:	bf00      	nop
    aaa8:	0000a697 	.word	0x0000a697

0000aaac <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    aaac:	b580      	push	{r7, lr}
    aaae:	b082      	sub	sp, #8
    aab0:	af00      	add	r7, sp, #0
    aab2:	4603      	mov	r3, r0
    aab4:	71fb      	strb	r3, [r7, #7]
    aab6:	460b      	mov	r3, r1
    aab8:	71bb      	strb	r3, [r7, #6]
    aaba:	4613      	mov	r3, r2
    aabc:	717b      	strb	r3, [r7, #5]
	if (st) {
    aabe:	797b      	ldrb	r3, [r7, #5]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d00b      	beq.n	aadc <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aac4:	79bb      	ldrb	r3, [r7, #6]
    aac6:	2210      	movs	r2, #16
    aac8:	fa02 f303 	lsl.w	r3, r2, r3
    aacc:	b2da      	uxtb	r2, r3
    aace:	79fb      	ldrb	r3, [r7, #7]
    aad0:	4619      	mov	r1, r3
    aad2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aad6:	4b09      	ldr	r3, [pc, #36]	; (aafc <_usbd_ep_set_stall+0x50>)
    aad8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    aada:	e00a      	b.n	aaf2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aadc:	79bb      	ldrb	r3, [r7, #6]
    aade:	2210      	movs	r2, #16
    aae0:	fa02 f303 	lsl.w	r3, r2, r3
    aae4:	b2da      	uxtb	r2, r3
    aae6:	79fb      	ldrb	r3, [r7, #7]
    aae8:	4619      	mov	r1, r3
    aaea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aaee:	4b04      	ldr	r3, [pc, #16]	; (ab00 <_usbd_ep_set_stall+0x54>)
    aaf0:	4798      	blx	r3
}
    aaf2:	bf00      	nop
    aaf4:	3708      	adds	r7, #8
    aaf6:	46bd      	mov	sp, r7
    aaf8:	bd80      	pop	{r7, pc}
    aafa:	bf00      	nop
    aafc:	0000a509 	.word	0x0000a509
    ab00:	0000a55d 	.word	0x0000a55d

0000ab04 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    ab04:	b580      	push	{r7, lr}
    ab06:	b084      	sub	sp, #16
    ab08:	af00      	add	r7, sp, #0
    ab0a:	4603      	mov	r3, r0
    ab0c:	460a      	mov	r2, r1
    ab0e:	71fb      	strb	r3, [r7, #7]
    ab10:	4613      	mov	r3, r2
    ab12:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    ab14:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab18:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ab1a:	79fb      	ldrb	r3, [r7, #7]
    ab1c:	4619      	mov	r1, r3
    ab1e:	68f8      	ldr	r0, [r7, #12]
    ab20:	4b08      	ldr	r3, [pc, #32]	; (ab44 <_usbd_ep_is_stalled+0x40>)
    ab22:	4798      	blx	r3
    ab24:	4603      	mov	r3, r0
    ab26:	4619      	mov	r1, r3
    ab28:	79bb      	ldrb	r3, [r7, #6]
    ab2a:	2210      	movs	r2, #16
    ab2c:	fa02 f303 	lsl.w	r3, r2, r3
    ab30:	400b      	ands	r3, r1
    ab32:	2b00      	cmp	r3, #0
    ab34:	bf14      	ite	ne
    ab36:	2301      	movne	r3, #1
    ab38:	2300      	moveq	r3, #0
    ab3a:	b2db      	uxtb	r3, r3
}
    ab3c:	4618      	mov	r0, r3
    ab3e:	3710      	adds	r7, #16
    ab40:	46bd      	mov	sp, r7
    ab42:	bd80      	pop	{r7, pc}
    ab44:	0000a535 	.word	0x0000a535

0000ab48 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    ab48:	b580      	push	{r7, lr}
    ab4a:	b084      	sub	sp, #16
    ab4c:	af00      	add	r7, sp, #0
    ab4e:	4603      	mov	r3, r0
    ab50:	460a      	mov	r2, r1
    ab52:	71fb      	strb	r3, [r7, #7]
    ab54:	4613      	mov	r3, r2
    ab56:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    ab58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab5c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ab5e:	79fb      	ldrb	r3, [r7, #7]
    ab60:	4619      	mov	r1, r3
    ab62:	68f8      	ldr	r0, [r7, #12]
    ab64:	4b08      	ldr	r3, [pc, #32]	; (ab88 <_usbd_ep_is_stall_sent+0x40>)
    ab66:	4798      	blx	r3
    ab68:	4603      	mov	r3, r0
    ab6a:	4619      	mov	r1, r3
    ab6c:	79bb      	ldrb	r3, [r7, #6]
    ab6e:	2220      	movs	r2, #32
    ab70:	fa02 f303 	lsl.w	r3, r2, r3
    ab74:	400b      	ands	r3, r1
    ab76:	2b00      	cmp	r3, #0
    ab78:	bf14      	ite	ne
    ab7a:	2301      	movne	r3, #1
    ab7c:	2300      	moveq	r3, #0
    ab7e:	b2db      	uxtb	r3, r3
}
    ab80:	4618      	mov	r0, r3
    ab82:	3710      	adds	r7, #16
    ab84:	46bd      	mov	sp, r7
    ab86:	bd80      	pop	{r7, pc}
    ab88:	0000a4b5 	.word	0x0000a4b5

0000ab8c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b082      	sub	sp, #8
    ab90:	af00      	add	r7, sp, #0
    ab92:	4603      	mov	r3, r0
    ab94:	460a      	mov	r2, r1
    ab96:	71fb      	strb	r3, [r7, #7]
    ab98:	4613      	mov	r3, r2
    ab9a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ab9c:	79bb      	ldrb	r3, [r7, #6]
    ab9e:	2220      	movs	r2, #32
    aba0:	409a      	lsls	r2, r3
    aba2:	79fb      	ldrb	r3, [r7, #7]
    aba4:	4611      	mov	r1, r2
    aba6:	4618      	mov	r0, r3
    aba8:	4b02      	ldr	r3, [pc, #8]	; (abb4 <_usbd_ep_ack_stall+0x28>)
    abaa:	4798      	blx	r3
}
    abac:	bf00      	nop
    abae:	3708      	adds	r7, #8
    abb0:	46bd      	mov	sp, r7
    abb2:	bd80      	pop	{r7, pc}
    abb4:	0000aa05 	.word	0x0000aa05

0000abb8 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    abb8:	b580      	push	{r7, lr}
    abba:	b082      	sub	sp, #8
    abbc:	af00      	add	r7, sp, #0
    abbe:	4603      	mov	r3, r0
    abc0:	71fb      	strb	r3, [r7, #7]
    abc2:	460b      	mov	r3, r1
    abc4:	71bb      	strb	r3, [r7, #6]
    abc6:	4613      	mov	r3, r2
    abc8:	717b      	strb	r3, [r7, #5]
	if (en) {
    abca:	797b      	ldrb	r3, [r7, #5]
    abcc:	2b00      	cmp	r3, #0
    abce:	d008      	beq.n	abe2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    abd0:	79bb      	ldrb	r3, [r7, #6]
    abd2:	2220      	movs	r2, #32
    abd4:	409a      	lsls	r2, r3
    abd6:	79fb      	ldrb	r3, [r7, #7]
    abd8:	4611      	mov	r1, r2
    abda:	4618      	mov	r0, r3
    abdc:	4b07      	ldr	r3, [pc, #28]	; (abfc <_usbd_ep_int_stall_en+0x44>)
    abde:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    abe0:	e007      	b.n	abf2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    abe2:	79bb      	ldrb	r3, [r7, #6]
    abe4:	2220      	movs	r2, #32
    abe6:	409a      	lsls	r2, r3
    abe8:	79fb      	ldrb	r3, [r7, #7]
    abea:	4611      	mov	r1, r2
    abec:	4618      	mov	r0, r3
    abee:	4b04      	ldr	r3, [pc, #16]	; (ac00 <_usbd_ep_int_stall_en+0x48>)
    abf0:	4798      	blx	r3
}
    abf2:	bf00      	nop
    abf4:	3708      	adds	r7, #8
    abf6:	46bd      	mov	sp, r7
    abf8:	bd80      	pop	{r7, pc}
    abfa:	bf00      	nop
    abfc:	0000aa2d 	.word	0x0000aa2d
    ac00:	0000aa55 	.word	0x0000aa55

0000ac04 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    ac04:	b580      	push	{r7, lr}
    ac06:	b082      	sub	sp, #8
    ac08:	af00      	add	r7, sp, #0
    ac0a:	4603      	mov	r3, r0
    ac0c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    ac0e:	79fb      	ldrb	r3, [r7, #7]
    ac10:	4619      	mov	r1, r3
    ac12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac16:	4b03      	ldr	r3, [pc, #12]	; (ac24 <_usbd_ep_stop_setup+0x20>)
    ac18:	4798      	blx	r3
}
    ac1a:	bf00      	nop
    ac1c:	3708      	adds	r7, #8
    ac1e:	46bd      	mov	sp, r7
    ac20:	bd80      	pop	{r7, pc}
    ac22:	bf00      	nop
    ac24:	0000a589 	.word	0x0000a589

0000ac28 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    ac28:	b580      	push	{r7, lr}
    ac2a:	b082      	sub	sp, #8
    ac2c:	af00      	add	r7, sp, #0
    ac2e:	4603      	mov	r3, r0
    ac30:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ac32:	79fb      	ldrb	r3, [r7, #7]
    ac34:	2210      	movs	r2, #16
    ac36:	4619      	mov	r1, r3
    ac38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac3c:	4b05      	ldr	r3, [pc, #20]	; (ac54 <_usbd_ep_is_setup+0x2c>)
    ac3e:	4798      	blx	r3
    ac40:	4603      	mov	r3, r0
    ac42:	2b00      	cmp	r3, #0
    ac44:	bf14      	ite	ne
    ac46:	2301      	movne	r3, #1
    ac48:	2300      	moveq	r3, #0
    ac4a:	b2db      	uxtb	r3, r3
}
    ac4c:	4618      	mov	r0, r3
    ac4e:	3708      	adds	r7, #8
    ac50:	46bd      	mov	sp, r7
    ac52:	bd80      	pop	{r7, pc}
    ac54:	0000a47f 	.word	0x0000a47f

0000ac58 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    ac58:	b580      	push	{r7, lr}
    ac5a:	b082      	sub	sp, #8
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	4603      	mov	r3, r0
    ac60:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ac62:	79fb      	ldrb	r3, [r7, #7]
    ac64:	2110      	movs	r1, #16
    ac66:	4618      	mov	r0, r3
    ac68:	4b02      	ldr	r3, [pc, #8]	; (ac74 <_usbd_ep_ack_setup+0x1c>)
    ac6a:	4798      	blx	r3
}
    ac6c:	bf00      	nop
    ac6e:	3708      	adds	r7, #8
    ac70:	46bd      	mov	sp, r7
    ac72:	bd80      	pop	{r7, pc}
    ac74:	0000aa05 	.word	0x0000aa05

0000ac78 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    ac78:	b580      	push	{r7, lr}
    ac7a:	b082      	sub	sp, #8
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	4603      	mov	r3, r0
    ac80:	71fb      	strb	r3, [r7, #7]
    ac82:	460b      	mov	r3, r1
    ac84:	71bb      	strb	r3, [r7, #6]
    ac86:	4613      	mov	r3, r2
    ac88:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    ac8a:	797b      	ldrb	r3, [r7, #5]
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d00b      	beq.n	aca8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ac90:	79bb      	ldrb	r3, [r7, #6]
    ac92:	2201      	movs	r2, #1
    ac94:	fa02 f303 	lsl.w	r3, r2, r3
    ac98:	b2da      	uxtb	r2, r3
    ac9a:	79fb      	ldrb	r3, [r7, #7]
    ac9c:	4619      	mov	r1, r3
    ac9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aca2:	4b09      	ldr	r3, [pc, #36]	; (acc8 <_usbd_ep_set_toggle+0x50>)
    aca4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    aca6:	e00a      	b.n	acbe <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    aca8:	79bb      	ldrb	r3, [r7, #6]
    acaa:	2201      	movs	r2, #1
    acac:	fa02 f303 	lsl.w	r3, r2, r3
    acb0:	b2da      	uxtb	r2, r3
    acb2:	79fb      	ldrb	r3, [r7, #7]
    acb4:	4619      	mov	r1, r3
    acb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acba:	4b04      	ldr	r3, [pc, #16]	; (accc <_usbd_ep_set_toggle+0x54>)
    acbc:	4798      	blx	r3
}
    acbe:	bf00      	nop
    acc0:	3708      	adds	r7, #8
    acc2:	46bd      	mov	sp, r7
    acc4:	bd80      	pop	{r7, pc}
    acc6:	bf00      	nop
    acc8:	0000a509 	.word	0x0000a509
    accc:	0000a55d 	.word	0x0000a55d

0000acd0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    acd0:	b580      	push	{r7, lr}
    acd2:	b082      	sub	sp, #8
    acd4:	af00      	add	r7, sp, #0
    acd6:	4603      	mov	r3, r0
    acd8:	460a      	mov	r2, r1
    acda:	71fb      	strb	r3, [r7, #7]
    acdc:	4613      	mov	r3, r2
    acde:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    ace0:	79bb      	ldrb	r3, [r7, #6]
    ace2:	2201      	movs	r2, #1
    ace4:	409a      	lsls	r2, r3
    ace6:	79fb      	ldrb	r3, [r7, #7]
    ace8:	4611      	mov	r1, r2
    acea:	4618      	mov	r0, r3
    acec:	4b02      	ldr	r3, [pc, #8]	; (acf8 <_usbd_ep_ack_io_cpt+0x28>)
    acee:	4798      	blx	r3
}
    acf0:	bf00      	nop
    acf2:	3708      	adds	r7, #8
    acf4:	46bd      	mov	sp, r7
    acf6:	bd80      	pop	{r7, pc}
    acf8:	0000aa05 	.word	0x0000aa05

0000acfc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    acfc:	b480      	push	{r7}
    acfe:	b085      	sub	sp, #20
    ad00:	af00      	add	r7, sp, #0
    ad02:	4603      	mov	r3, r0
    ad04:	603a      	str	r2, [r7, #0]
    ad06:	71fb      	strb	r3, [r7, #7]
    ad08:	460b      	mov	r3, r1
    ad0a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad0c:	79fa      	ldrb	r2, [r7, #7]
    ad0e:	79bb      	ldrb	r3, [r7, #6]
    ad10:	0052      	lsls	r2, r2, #1
    ad12:	4413      	add	r3, r2
    ad14:	011b      	lsls	r3, r3, #4
    ad16:	4a06      	ldr	r2, [pc, #24]	; (ad30 <_usbd_ep_set_buf+0x34>)
    ad18:	4413      	add	r3, r2
    ad1a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    ad1c:	68fb      	ldr	r3, [r7, #12]
    ad1e:	683a      	ldr	r2, [r7, #0]
    ad20:	601a      	str	r2, [r3, #0]
}
    ad22:	bf00      	nop
    ad24:	3714      	adds	r7, #20
    ad26:	46bd      	mov	sp, r7
    ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad2c:	4770      	bx	lr
    ad2e:	bf00      	nop
    ad30:	2000267c 	.word	0x2000267c

0000ad34 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ad34:	b480      	push	{r7}
    ad36:	b085      	sub	sp, #20
    ad38:	af00      	add	r7, sp, #0
    ad3a:	4603      	mov	r3, r0
    ad3c:	71fb      	strb	r3, [r7, #7]
    ad3e:	460b      	mov	r3, r1
    ad40:	71bb      	strb	r3, [r7, #6]
    ad42:	4613      	mov	r3, r2
    ad44:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad46:	79fa      	ldrb	r2, [r7, #7]
    ad48:	79bb      	ldrb	r3, [r7, #6]
    ad4a:	0052      	lsls	r2, r2, #1
    ad4c:	4413      	add	r3, r2
    ad4e:	011b      	lsls	r3, r3, #4
    ad50:	4a08      	ldr	r2, [pc, #32]	; (ad74 <_usbd_ep_set_in_count+0x40>)
    ad52:	4413      	add	r3, r2
    ad54:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    ad56:	88bb      	ldrh	r3, [r7, #4]
    ad58:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad5c:	b299      	uxth	r1, r3
    ad5e:	68fa      	ldr	r2, [r7, #12]
    ad60:	6853      	ldr	r3, [r2, #4]
    ad62:	f361 339b 	bfi	r3, r1, #14, #14
    ad66:	6053      	str	r3, [r2, #4]
}
    ad68:	bf00      	nop
    ad6a:	3714      	adds	r7, #20
    ad6c:	46bd      	mov	sp, r7
    ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad72:	4770      	bx	lr
    ad74:	2000267c 	.word	0x2000267c

0000ad78 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ad78:	b480      	push	{r7}
    ad7a:	b085      	sub	sp, #20
    ad7c:	af00      	add	r7, sp, #0
    ad7e:	4603      	mov	r3, r0
    ad80:	71fb      	strb	r3, [r7, #7]
    ad82:	460b      	mov	r3, r1
    ad84:	71bb      	strb	r3, [r7, #6]
    ad86:	4613      	mov	r3, r2
    ad88:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad8a:	79fa      	ldrb	r2, [r7, #7]
    ad8c:	79bb      	ldrb	r3, [r7, #6]
    ad8e:	0052      	lsls	r2, r2, #1
    ad90:	4413      	add	r3, r2
    ad92:	011b      	lsls	r3, r3, #4
    ad94:	4a08      	ldr	r2, [pc, #32]	; (adb8 <_usbd_ep_set_in_size+0x40>)
    ad96:	4413      	add	r3, r2
    ad98:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    ad9a:	88bb      	ldrh	r3, [r7, #4]
    ad9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ada0:	b299      	uxth	r1, r3
    ada2:	68fa      	ldr	r2, [r7, #12]
    ada4:	6853      	ldr	r3, [r2, #4]
    ada6:	f361 030d 	bfi	r3, r1, #0, #14
    adaa:	6053      	str	r3, [r2, #4]
}
    adac:	bf00      	nop
    adae:	3714      	adds	r7, #20
    adb0:	46bd      	mov	sp, r7
    adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    adb6:	4770      	bx	lr
    adb8:	2000267c 	.word	0x2000267c

0000adbc <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    adbc:	b480      	push	{r7}
    adbe:	b085      	sub	sp, #20
    adc0:	af00      	add	r7, sp, #0
    adc2:	4603      	mov	r3, r0
    adc4:	71fb      	strb	r3, [r7, #7]
    adc6:	460b      	mov	r3, r1
    adc8:	71bb      	strb	r3, [r7, #6]
    adca:	4613      	mov	r3, r2
    adcc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    adce:	79fa      	ldrb	r2, [r7, #7]
    add0:	79bb      	ldrb	r3, [r7, #6]
    add2:	0052      	lsls	r2, r2, #1
    add4:	4413      	add	r3, r2
    add6:	011b      	lsls	r3, r3, #4
    add8:	4a08      	ldr	r2, [pc, #32]	; (adfc <_usbd_ep_set_out_count+0x40>)
    adda:	4413      	add	r3, r2
    addc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    adde:	88bb      	ldrh	r3, [r7, #4]
    ade0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ade4:	b299      	uxth	r1, r3
    ade6:	68fa      	ldr	r2, [r7, #12]
    ade8:	6853      	ldr	r3, [r2, #4]
    adea:	f361 030d 	bfi	r3, r1, #0, #14
    adee:	6053      	str	r3, [r2, #4]
}
    adf0:	bf00      	nop
    adf2:	3714      	adds	r7, #20
    adf4:	46bd      	mov	sp, r7
    adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    adfa:	4770      	bx	lr
    adfc:	2000267c 	.word	0x2000267c

0000ae00 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ae00:	b480      	push	{r7}
    ae02:	b085      	sub	sp, #20
    ae04:	af00      	add	r7, sp, #0
    ae06:	4603      	mov	r3, r0
    ae08:	71fb      	strb	r3, [r7, #7]
    ae0a:	460b      	mov	r3, r1
    ae0c:	71bb      	strb	r3, [r7, #6]
    ae0e:	4613      	mov	r3, r2
    ae10:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ae12:	79fa      	ldrb	r2, [r7, #7]
    ae14:	79bb      	ldrb	r3, [r7, #6]
    ae16:	0052      	lsls	r2, r2, #1
    ae18:	4413      	add	r3, r2
    ae1a:	011b      	lsls	r3, r3, #4
    ae1c:	4a08      	ldr	r2, [pc, #32]	; (ae40 <_usbd_ep_set_out_size+0x40>)
    ae1e:	4413      	add	r3, r2
    ae20:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ae22:	88bb      	ldrh	r3, [r7, #4]
    ae24:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ae28:	b299      	uxth	r1, r3
    ae2a:	68fa      	ldr	r2, [r7, #12]
    ae2c:	6853      	ldr	r3, [r2, #4]
    ae2e:	f361 339b 	bfi	r3, r1, #14, #14
    ae32:	6053      	str	r3, [r2, #4]
}
    ae34:	bf00      	nop
    ae36:	3714      	adds	r7, #20
    ae38:	46bd      	mov	sp, r7
    ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae3e:	4770      	bx	lr
    ae40:	2000267c 	.word	0x2000267c

0000ae44 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ae44:	b580      	push	{r7, lr}
    ae46:	b084      	sub	sp, #16
    ae48:	af00      	add	r7, sp, #0
    ae4a:	60ba      	str	r2, [r7, #8]
    ae4c:	607b      	str	r3, [r7, #4]
    ae4e:	4603      	mov	r3, r0
    ae50:	73fb      	strb	r3, [r7, #15]
    ae52:	460b      	mov	r3, r1
    ae54:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    ae56:	68bb      	ldr	r3, [r7, #8]
    ae58:	b29a      	uxth	r2, r3
    ae5a:	7bb9      	ldrb	r1, [r7, #14]
    ae5c:	7bfb      	ldrb	r3, [r7, #15]
    ae5e:	4618      	mov	r0, r3
    ae60:	4b06      	ldr	r3, [pc, #24]	; (ae7c <_usbd_ep_set_in_trans+0x38>)
    ae62:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	b29a      	uxth	r2, r3
    ae68:	7bb9      	ldrb	r1, [r7, #14]
    ae6a:	7bfb      	ldrb	r3, [r7, #15]
    ae6c:	4618      	mov	r0, r3
    ae6e:	4b04      	ldr	r3, [pc, #16]	; (ae80 <_usbd_ep_set_in_trans+0x3c>)
    ae70:	4798      	blx	r3
}
    ae72:	bf00      	nop
    ae74:	3710      	adds	r7, #16
    ae76:	46bd      	mov	sp, r7
    ae78:	bd80      	pop	{r7, pc}
    ae7a:	bf00      	nop
    ae7c:	0000ad79 	.word	0x0000ad79
    ae80:	0000ad35 	.word	0x0000ad35

0000ae84 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ae84:	b580      	push	{r7, lr}
    ae86:	b084      	sub	sp, #16
    ae88:	af00      	add	r7, sp, #0
    ae8a:	60ba      	str	r2, [r7, #8]
    ae8c:	607b      	str	r3, [r7, #4]
    ae8e:	4603      	mov	r3, r0
    ae90:	73fb      	strb	r3, [r7, #15]
    ae92:	460b      	mov	r3, r1
    ae94:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    ae96:	68bb      	ldr	r3, [r7, #8]
    ae98:	b29a      	uxth	r2, r3
    ae9a:	7bb9      	ldrb	r1, [r7, #14]
    ae9c:	7bfb      	ldrb	r3, [r7, #15]
    ae9e:	4618      	mov	r0, r3
    aea0:	4b06      	ldr	r3, [pc, #24]	; (aebc <_usbd_ep_set_out_trans+0x38>)
    aea2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    aea4:	687b      	ldr	r3, [r7, #4]
    aea6:	b29a      	uxth	r2, r3
    aea8:	7bb9      	ldrb	r1, [r7, #14]
    aeaa:	7bfb      	ldrb	r3, [r7, #15]
    aeac:	4618      	mov	r0, r3
    aeae:	4b04      	ldr	r3, [pc, #16]	; (aec0 <_usbd_ep_set_out_trans+0x3c>)
    aeb0:	4798      	blx	r3
}
    aeb2:	bf00      	nop
    aeb4:	3710      	adds	r7, #16
    aeb6:	46bd      	mov	sp, r7
    aeb8:	bd80      	pop	{r7, pc}
    aeba:	bf00      	nop
    aebc:	0000ae01 	.word	0x0000ae01
    aec0:	0000adbd 	.word	0x0000adbd

0000aec4 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    aec4:	b480      	push	{r7}
    aec6:	b085      	sub	sp, #20
    aec8:	af00      	add	r7, sp, #0
    aeca:	4603      	mov	r3, r0
    aecc:	460a      	mov	r2, r1
    aece:	71fb      	strb	r3, [r7, #7]
    aed0:	4613      	mov	r3, r2
    aed2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aed4:	79fa      	ldrb	r2, [r7, #7]
    aed6:	79bb      	ldrb	r3, [r7, #6]
    aed8:	0052      	lsls	r2, r2, #1
    aeda:	4413      	add	r3, r2
    aedc:	011b      	lsls	r3, r3, #4
    aede:	4a06      	ldr	r2, [pc, #24]	; (aef8 <_usbd_ep_clear_bank_status+0x34>)
    aee0:	4413      	add	r3, r2
    aee2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    aee4:	68fb      	ldr	r3, [r7, #12]
    aee6:	2200      	movs	r2, #0
    aee8:	729a      	strb	r2, [r3, #10]
}
    aeea:	bf00      	nop
    aeec:	3714      	adds	r7, #20
    aeee:	46bd      	mov	sp, r7
    aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aef4:	4770      	bx	lr
    aef6:	bf00      	nop
    aef8:	2000267c 	.word	0x2000267c

0000aefc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    aefc:	b580      	push	{r7, lr}
    aefe:	b082      	sub	sp, #8
    af00:	af00      	add	r7, sp, #0
    af02:	4603      	mov	r3, r0
    af04:	71fb      	strb	r3, [r7, #7]
    af06:	460b      	mov	r3, r1
    af08:	71bb      	strb	r3, [r7, #6]
    af0a:	4613      	mov	r3, r2
    af0c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    af0e:	797b      	ldrb	r3, [r7, #5]
    af10:	2b00      	cmp	r3, #0
    af12:	d00b      	beq.n	af2c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    af14:	79bb      	ldrb	r3, [r7, #6]
    af16:	2240      	movs	r2, #64	; 0x40
    af18:	fa02 f303 	lsl.w	r3, r2, r3
    af1c:	b2da      	uxtb	r2, r3
    af1e:	79fb      	ldrb	r3, [r7, #7]
    af20:	4619      	mov	r1, r3
    af22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af26:	4b09      	ldr	r3, [pc, #36]	; (af4c <_usbd_ep_set_in_rdy+0x50>)
    af28:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    af2a:	e00a      	b.n	af42 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    af2c:	79bb      	ldrb	r3, [r7, #6]
    af2e:	2240      	movs	r2, #64	; 0x40
    af30:	fa02 f303 	lsl.w	r3, r2, r3
    af34:	b2da      	uxtb	r2, r3
    af36:	79fb      	ldrb	r3, [r7, #7]
    af38:	4619      	mov	r1, r3
    af3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af3e:	4b04      	ldr	r3, [pc, #16]	; (af50 <_usbd_ep_set_in_rdy+0x54>)
    af40:	4798      	blx	r3
}
    af42:	bf00      	nop
    af44:	3708      	adds	r7, #8
    af46:	46bd      	mov	sp, r7
    af48:	bd80      	pop	{r7, pc}
    af4a:	bf00      	nop
    af4c:	0000a509 	.word	0x0000a509
    af50:	0000a55d 	.word	0x0000a55d

0000af54 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    af54:	b580      	push	{r7, lr}
    af56:	b082      	sub	sp, #8
    af58:	af00      	add	r7, sp, #0
    af5a:	4603      	mov	r3, r0
    af5c:	71fb      	strb	r3, [r7, #7]
    af5e:	460b      	mov	r3, r1
    af60:	71bb      	strb	r3, [r7, #6]
    af62:	4613      	mov	r3, r2
    af64:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    af66:	797b      	ldrb	r3, [r7, #5]
    af68:	2b00      	cmp	r3, #0
    af6a:	d00b      	beq.n	af84 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    af6c:	79bb      	ldrb	r3, [r7, #6]
    af6e:	2240      	movs	r2, #64	; 0x40
    af70:	fa02 f303 	lsl.w	r3, r2, r3
    af74:	b2da      	uxtb	r2, r3
    af76:	79fb      	ldrb	r3, [r7, #7]
    af78:	4619      	mov	r1, r3
    af7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af7e:	4b09      	ldr	r3, [pc, #36]	; (afa4 <_usbd_ep_set_out_rdy+0x50>)
    af80:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    af82:	e00a      	b.n	af9a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    af84:	79bb      	ldrb	r3, [r7, #6]
    af86:	2240      	movs	r2, #64	; 0x40
    af88:	fa02 f303 	lsl.w	r3, r2, r3
    af8c:	b2da      	uxtb	r2, r3
    af8e:	79fb      	ldrb	r3, [r7, #7]
    af90:	4619      	mov	r1, r3
    af92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af96:	4b04      	ldr	r3, [pc, #16]	; (afa8 <_usbd_ep_set_out_rdy+0x54>)
    af98:	4798      	blx	r3
}
    af9a:	bf00      	nop
    af9c:	3708      	adds	r7, #8
    af9e:	46bd      	mov	sp, r7
    afa0:	bd80      	pop	{r7, pc}
    afa2:	bf00      	nop
    afa4:	0000a55d 	.word	0x0000a55d
    afa8:	0000a509 	.word	0x0000a509

0000afac <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    afac:	b480      	push	{r7}
    afae:	b083      	sub	sp, #12
    afb0:	af00      	add	r7, sp, #0
    afb2:	4603      	mov	r3, r0
    afb4:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    afb6:	88fb      	ldrh	r3, [r7, #6]
    afb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    afbc:	d820      	bhi.n	b000 <_usbd_ep_pcksize_size+0x54>
    afbe:	88fb      	ldrh	r3, [r7, #6]
    afc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    afc4:	d81a      	bhi.n	affc <_usbd_ep_pcksize_size+0x50>
    afc6:	88fb      	ldrh	r3, [r7, #6]
    afc8:	2b80      	cmp	r3, #128	; 0x80
    afca:	d815      	bhi.n	aff8 <_usbd_ep_pcksize_size+0x4c>
    afcc:	88fb      	ldrh	r3, [r7, #6]
    afce:	2b40      	cmp	r3, #64	; 0x40
    afd0:	d810      	bhi.n	aff4 <_usbd_ep_pcksize_size+0x48>
    afd2:	88fb      	ldrh	r3, [r7, #6]
    afd4:	2b20      	cmp	r3, #32
    afd6:	d80b      	bhi.n	aff0 <_usbd_ep_pcksize_size+0x44>
    afd8:	88fb      	ldrh	r3, [r7, #6]
    afda:	2b10      	cmp	r3, #16
    afdc:	d806      	bhi.n	afec <_usbd_ep_pcksize_size+0x40>
    afde:	88fb      	ldrh	r3, [r7, #6]
    afe0:	2b08      	cmp	r3, #8
    afe2:	bf8c      	ite	hi
    afe4:	2301      	movhi	r3, #1
    afe6:	2300      	movls	r3, #0
    afe8:	b2db      	uxtb	r3, r3
    afea:	e00a      	b.n	b002 <_usbd_ep_pcksize_size+0x56>
    afec:	2302      	movs	r3, #2
    afee:	e008      	b.n	b002 <_usbd_ep_pcksize_size+0x56>
    aff0:	2303      	movs	r3, #3
    aff2:	e006      	b.n	b002 <_usbd_ep_pcksize_size+0x56>
    aff4:	2304      	movs	r3, #4
    aff6:	e004      	b.n	b002 <_usbd_ep_pcksize_size+0x56>
    aff8:	2305      	movs	r3, #5
    affa:	e002      	b.n	b002 <_usbd_ep_pcksize_size+0x56>
    affc:	2306      	movs	r3, #6
    affe:	e000      	b.n	b002 <_usbd_ep_pcksize_size+0x56>
    b000:	2307      	movs	r3, #7
}
    b002:	4618      	mov	r0, r3
    b004:	370c      	adds	r7, #12
    b006:	46bd      	mov	sp, r7
    b008:	f85d 7b04 	ldr.w	r7, [sp], #4
    b00c:	4770      	bx	lr
	...

0000b010 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    b010:	b480      	push	{r7}
    b012:	b085      	sub	sp, #20
    b014:	af00      	add	r7, sp, #0
    b016:	4603      	mov	r3, r0
    b018:	460a      	mov	r2, r1
    b01a:	71fb      	strb	r3, [r7, #7]
    b01c:	4613      	mov	r3, r2
    b01e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b020:	79fb      	ldrb	r3, [r7, #7]
    b022:	2b00      	cmp	r3, #0
    b024:	d008      	beq.n	b038 <_usb_d_dev_ept+0x28>
    b026:	79bb      	ldrb	r3, [r7, #6]
    b028:	2b00      	cmp	r3, #0
    b02a:	d003      	beq.n	b034 <_usb_d_dev_ept+0x24>
    b02c:	79fb      	ldrb	r3, [r7, #7]
    b02e:	3304      	adds	r3, #4
    b030:	b2db      	uxtb	r3, r3
    b032:	e002      	b.n	b03a <_usb_d_dev_ept+0x2a>
    b034:	79fb      	ldrb	r3, [r7, #7]
    b036:	e000      	b.n	b03a <_usb_d_dev_ept+0x2a>
    b038:	2300      	movs	r3, #0
    b03a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    b03c:	7bfa      	ldrb	r2, [r7, #15]
    b03e:	4613      	mov	r3, r2
    b040:	009b      	lsls	r3, r3, #2
    b042:	4413      	add	r3, r2
    b044:	009b      	lsls	r3, r3, #2
    b046:	3310      	adds	r3, #16
    b048:	4a04      	ldr	r2, [pc, #16]	; (b05c <_usb_d_dev_ept+0x4c>)
    b04a:	4413      	add	r3, r2
    b04c:	3304      	adds	r3, #4
}
    b04e:	4618      	mov	r0, r3
    b050:	3714      	adds	r7, #20
    b052:	46bd      	mov	sp, r7
    b054:	f85d 7b04 	ldr.w	r7, [sp], #4
    b058:	4770      	bx	lr
    b05a:	bf00      	nop
    b05c:	200025b4 	.word	0x200025b4

0000b060 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    b060:	b580      	push	{r7, lr}
    b062:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    b064:	2104      	movs	r1, #4
    b066:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b06a:	4b03      	ldr	r3, [pc, #12]	; (b078 <_usb_d_dev_sof+0x18>)
    b06c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    b06e:	4b03      	ldr	r3, [pc, #12]	; (b07c <_usb_d_dev_sof+0x1c>)
    b070:	681b      	ldr	r3, [r3, #0]
    b072:	4798      	blx	r3
}
    b074:	bf00      	nop
    b076:	bd80      	pop	{r7, pc}
    b078:	0000a6d7 	.word	0x0000a6d7
    b07c:	200025b4 	.word	0x200025b4

0000b080 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    b080:	b580      	push	{r7, lr}
    b082:	b084      	sub	sp, #16
    b084:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    b086:	2300      	movs	r3, #0
    b088:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b08a:	f240 2101 	movw	r1, #513	; 0x201
    b08e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b092:	4b1a      	ldr	r3, [pc, #104]	; (b0fc <_usb_d_dev_lpmsusp+0x7c>)
    b094:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b096:	f240 2101 	movw	r1, #513	; 0x201
    b09a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b09e:	4b18      	ldr	r3, [pc, #96]	; (b100 <_usb_d_dev_lpmsusp+0x80>)
    b0a0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b0a2:	2170      	movs	r1, #112	; 0x70
    b0a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0a8:	4b16      	ldr	r3, [pc, #88]	; (b104 <_usb_d_dev_lpmsusp+0x84>)
    b0aa:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b0ac:	2300      	movs	r3, #0
    b0ae:	73fb      	strb	r3, [r7, #15]
    b0b0:	e018      	b.n	b0e4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    b0b2:	7bfb      	ldrb	r3, [r7, #15]
    b0b4:	015b      	lsls	r3, r3, #5
    b0b6:	4a14      	ldr	r2, [pc, #80]	; (b108 <_usb_d_dev_lpmsusp+0x88>)
    b0b8:	4413      	add	r3, r2
    b0ba:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    b0bc:	687b      	ldr	r3, [r7, #4]
    b0be:	891b      	ldrh	r3, [r3, #8]
    b0c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    b0c4:	b2db      	uxtb	r3, r3
    b0c6:	2b03      	cmp	r3, #3
    b0c8:	d109      	bne.n	b0de <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	891b      	ldrh	r3, [r3, #8]
    b0ce:	f3c3 130a 	ubfx	r3, r3, #4, #11
    b0d2:	b29b      	uxth	r3, r3
    b0d4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	2200      	movs	r2, #0
    b0da:	811a      	strh	r2, [r3, #8]
			break;
    b0dc:	e005      	b.n	b0ea <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b0de:	7bfb      	ldrb	r3, [r7, #15]
    b0e0:	3301      	adds	r3, #1
    b0e2:	73fb      	strb	r3, [r7, #15]
    b0e4:	7bfb      	ldrb	r3, [r7, #15]
    b0e6:	2b03      	cmp	r3, #3
    b0e8:	d9e3      	bls.n	b0b2 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    b0ea:	4b08      	ldr	r3, [pc, #32]	; (b10c <_usb_d_dev_lpmsusp+0x8c>)
    b0ec:	685b      	ldr	r3, [r3, #4]
    b0ee:	68b9      	ldr	r1, [r7, #8]
    b0f0:	2003      	movs	r0, #3
    b0f2:	4798      	blx	r3
}
    b0f4:	bf00      	nop
    b0f6:	3710      	adds	r7, #16
    b0f8:	46bd      	mov	sp, r7
    b0fa:	bd80      	pop	{r7, pc}
    b0fc:	0000a6d7 	.word	0x0000a6d7
    b100:	0000a72d 	.word	0x0000a72d
    b104:	0000a6f5 	.word	0x0000a6f5
    b108:	2000267c 	.word	0x2000267c
    b10c:	200025b4 	.word	0x200025b4

0000b110 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    b110:	b580      	push	{r7, lr}
    b112:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    b114:	2180      	movs	r1, #128	; 0x80
    b116:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b11a:	4b04      	ldr	r3, [pc, #16]	; (b12c <_usb_d_dev_ramerr+0x1c>)
    b11c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    b11e:	4b04      	ldr	r3, [pc, #16]	; (b130 <_usb_d_dev_ramerr+0x20>)
    b120:	685b      	ldr	r3, [r3, #4]
    b122:	2100      	movs	r1, #0
    b124:	2005      	movs	r0, #5
    b126:	4798      	blx	r3
}
    b128:	bf00      	nop
    b12a:	bd80      	pop	{r7, pc}
    b12c:	0000a6d7 	.word	0x0000a6d7
    b130:	200025b4 	.word	0x200025b4

0000b134 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    b134:	b580      	push	{r7, lr}
    b136:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b138:	2170      	movs	r1, #112	; 0x70
    b13a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b13e:	4b0b      	ldr	r3, [pc, #44]	; (b16c <_usb_d_dev_wakeup+0x38>)
    b140:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b142:	2170      	movs	r1, #112	; 0x70
    b144:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b148:	4b09      	ldr	r3, [pc, #36]	; (b170 <_usb_d_dev_wakeup+0x3c>)
    b14a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b14c:	f240 2101 	movw	r1, #513	; 0x201
    b150:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b154:	4b07      	ldr	r3, [pc, #28]	; (b174 <_usb_d_dev_wakeup+0x40>)
    b156:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    b158:	2000      	movs	r0, #0
    b15a:	4b07      	ldr	r3, [pc, #28]	; (b178 <_usb_d_dev_wakeup+0x44>)
    b15c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    b15e:	4b07      	ldr	r3, [pc, #28]	; (b17c <_usb_d_dev_wakeup+0x48>)
    b160:	685b      	ldr	r3, [r3, #4]
    b162:	2100      	movs	r1, #0
    b164:	2002      	movs	r0, #2
    b166:	4798      	blx	r3
}
    b168:	bf00      	nop
    b16a:	bd80      	pop	{r7, pc}
    b16c:	0000a6d7 	.word	0x0000a6d7
    b170:	0000a72d 	.word	0x0000a72d
    b174:	0000a6f5 	.word	0x0000a6f5
    b178:	0000a9d5 	.word	0x0000a9d5
    b17c:	200025b4 	.word	0x200025b4

0000b180 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    b180:	b580      	push	{r7, lr}
    b182:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    b184:	2200      	movs	r2, #0
    b186:	2100      	movs	r1, #0
    b188:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b18c:	4b0d      	ldr	r3, [pc, #52]	; (b1c4 <_usb_d_dev_reset+0x44>)
    b18e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    b190:	2108      	movs	r1, #8
    b192:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b196:	4b0c      	ldr	r3, [pc, #48]	; (b1c8 <_usb_d_dev_reset+0x48>)
    b198:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b19a:	2170      	movs	r1, #112	; 0x70
    b19c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1a0:	4b0a      	ldr	r3, [pc, #40]	; (b1cc <_usb_d_dev_reset+0x4c>)
    b1a2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b1a4:	f240 2101 	movw	r1, #513	; 0x201
    b1a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1ac:	4b08      	ldr	r3, [pc, #32]	; (b1d0 <_usb_d_dev_reset+0x50>)
    b1ae:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    b1b0:	4b08      	ldr	r3, [pc, #32]	; (b1d4 <_usb_d_dev_reset+0x54>)
    b1b2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    b1b4:	4b08      	ldr	r3, [pc, #32]	; (b1d8 <_usb_d_dev_reset+0x58>)
    b1b6:	685b      	ldr	r3, [r3, #4]
    b1b8:	2100      	movs	r1, #0
    b1ba:	2001      	movs	r0, #1
    b1bc:	4798      	blx	r3
}
    b1be:	bf00      	nop
    b1c0:	bd80      	pop	{r7, pc}
    b1c2:	bf00      	nop
    b1c4:	0000a66d 	.word	0x0000a66d
    b1c8:	0000a6d7 	.word	0x0000a6d7
    b1cc:	0000a72d 	.word	0x0000a72d
    b1d0:	0000a6f5 	.word	0x0000a6f5
    b1d4:	0000bd3d 	.word	0x0000bd3d
    b1d8:	200025b4 	.word	0x200025b4

0000b1dc <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    b1dc:	b580      	push	{r7, lr}
    b1de:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b1e0:	f240 2101 	movw	r1, #513	; 0x201
    b1e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1e8:	4b09      	ldr	r3, [pc, #36]	; (b210 <_usb_d_dev_suspend+0x34>)
    b1ea:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b1ec:	f240 2101 	movw	r1, #513	; 0x201
    b1f0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1f4:	4b07      	ldr	r3, [pc, #28]	; (b214 <_usb_d_dev_suspend+0x38>)
    b1f6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b1f8:	2170      	movs	r1, #112	; 0x70
    b1fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1fe:	4b06      	ldr	r3, [pc, #24]	; (b218 <_usb_d_dev_suspend+0x3c>)
    b200:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    b202:	4b06      	ldr	r3, [pc, #24]	; (b21c <_usb_d_dev_suspend+0x40>)
    b204:	685b      	ldr	r3, [r3, #4]
    b206:	2100      	movs	r1, #0
    b208:	2004      	movs	r0, #4
    b20a:	4798      	blx	r3
}
    b20c:	bf00      	nop
    b20e:	bd80      	pop	{r7, pc}
    b210:	0000a6d7 	.word	0x0000a6d7
    b214:	0000a72d 	.word	0x0000a72d
    b218:	0000a6f5 	.word	0x0000a6f5
    b21c:	200025b4 	.word	0x200025b4

0000b220 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    b220:	b580      	push	{r7, lr}
    b222:	b082      	sub	sp, #8
    b224:	af00      	add	r7, sp, #0
	bool     rc    = true;
    b226:	2301      	movs	r3, #1
    b228:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    b22a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b22e:	4b22      	ldr	r3, [pc, #136]	; (b2b8 <_usb_d_dev_handle_nep+0x98>)
    b230:	4798      	blx	r3
    b232:	4603      	mov	r3, r0
    b234:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    b236:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b23a:	4b20      	ldr	r3, [pc, #128]	; (b2bc <_usb_d_dev_handle_nep+0x9c>)
    b23c:	4798      	blx	r3
    b23e:	4603      	mov	r3, r0
    b240:	461a      	mov	r2, r3
    b242:	88bb      	ldrh	r3, [r7, #4]
    b244:	4013      	ands	r3, r2
    b246:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    b248:	88bb      	ldrh	r3, [r7, #4]
    b24a:	f003 0304 	and.w	r3, r3, #4
    b24e:	2b00      	cmp	r3, #0
    b250:	d003      	beq.n	b25a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    b252:	4b1b      	ldr	r3, [pc, #108]	; (b2c0 <_usb_d_dev_handle_nep+0xa0>)
    b254:	4798      	blx	r3
		return true;
    b256:	2301      	movs	r3, #1
    b258:	e02a      	b.n	b2b0 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    b25a:	88bb      	ldrh	r3, [r7, #4]
    b25c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b260:	2b00      	cmp	r3, #0
    b262:	d002      	beq.n	b26a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    b264:	4b17      	ldr	r3, [pc, #92]	; (b2c4 <_usb_d_dev_handle_nep+0xa4>)
    b266:	4798      	blx	r3
    b268:	e021      	b.n	b2ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    b26a:	88bb      	ldrh	r3, [r7, #4]
    b26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b270:	2b00      	cmp	r3, #0
    b272:	d002      	beq.n	b27a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    b274:	4b14      	ldr	r3, [pc, #80]	; (b2c8 <_usb_d_dev_handle_nep+0xa8>)
    b276:	4798      	blx	r3
    b278:	e019      	b.n	b2ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    b27a:	88bb      	ldrh	r3, [r7, #4]
    b27c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b280:	2b00      	cmp	r3, #0
    b282:	d002      	beq.n	b28a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    b284:	4b11      	ldr	r3, [pc, #68]	; (b2cc <_usb_d_dev_handle_nep+0xac>)
    b286:	4798      	blx	r3
    b288:	e011      	b.n	b2ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    b28a:	88bb      	ldrh	r3, [r7, #4]
    b28c:	f003 0308 	and.w	r3, r3, #8
    b290:	2b00      	cmp	r3, #0
    b292:	d002      	beq.n	b29a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    b294:	4b0e      	ldr	r3, [pc, #56]	; (b2d0 <_usb_d_dev_handle_nep+0xb0>)
    b296:	4798      	blx	r3
    b298:	e009      	b.n	b2ae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    b29a:	88bb      	ldrh	r3, [r7, #4]
    b29c:	f003 0301 	and.w	r3, r3, #1
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d002      	beq.n	b2aa <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    b2a4:	4b0b      	ldr	r3, [pc, #44]	; (b2d4 <_usb_d_dev_handle_nep+0xb4>)
    b2a6:	4798      	blx	r3
    b2a8:	e001      	b.n	b2ae <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    b2aa:	2300      	movs	r3, #0
    b2ac:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b2ae:	79fb      	ldrb	r3, [r7, #7]
}
    b2b0:	4618      	mov	r0, r3
    b2b2:	3708      	adds	r7, #8
    b2b4:	46bd      	mov	sp, r7
    b2b6:	bd80      	pop	{r7, pc}
    b2b8:	0000a6bd 	.word	0x0000a6bd
    b2bc:	0000a713 	.word	0x0000a713
    b2c0:	0000b061 	.word	0x0000b061
    b2c4:	0000b081 	.word	0x0000b081
    b2c8:	0000b111 	.word	0x0000b111
    b2cc:	0000b135 	.word	0x0000b135
    b2d0:	0000b181 	.word	0x0000b181
    b2d4:	0000b1dd 	.word	0x0000b1dd

0000b2d8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b2d8:	b590      	push	{r4, r7, lr}
    b2da:	b089      	sub	sp, #36	; 0x24
    b2dc:	af00      	add	r7, sp, #0
    b2de:	6078      	str	r0, [r7, #4]
    b2e0:	460b      	mov	r3, r1
    b2e2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b2e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b2e8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b2ea:	687b      	ldr	r3, [r7, #4]
    b2ec:	7c9b      	ldrb	r3, [r3, #18]
    b2ee:	f003 030f 	and.w	r3, r3, #15
    b2f2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b2f4:	7dfb      	ldrb	r3, [r7, #23]
    b2f6:	015b      	lsls	r3, r3, #5
    b2f8:	4a73      	ldr	r2, [pc, #460]	; (b4c8 <_usb_d_dev_in_next+0x1f0>)
    b2fa:	4413      	add	r3, r2
    b2fc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b2fe:	78fb      	ldrb	r3, [r7, #3]
    b300:	2b00      	cmp	r3, #0
    b302:	d006      	beq.n	b312 <_usb_d_dev_in_next+0x3a>
    b304:	693b      	ldr	r3, [r7, #16]
    b306:	3310      	adds	r3, #16
    b308:	685b      	ldr	r3, [r3, #4]
    b30a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b30e:	b29b      	uxth	r3, r3
    b310:	e000      	b.n	b314 <_usb_d_dev_in_next+0x3c>
    b312:	2300      	movs	r3, #0
    b314:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b316:	687b      	ldr	r3, [r7, #4]
    b318:	8a1b      	ldrh	r3, [r3, #16]
    b31a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b31e:	4293      	cmp	r3, r2
    b320:	d103      	bne.n	b32a <_usb_d_dev_in_next+0x52>
    b322:	687b      	ldr	r3, [r7, #4]
    b324:	8a1b      	ldrh	r3, [r3, #16]
    b326:	b21b      	sxth	r3, r3
    b328:	e004      	b.n	b334 <_usb_d_dev_in_next+0x5c>
    b32a:	687b      	ldr	r3, [r7, #4]
    b32c:	8a1b      	ldrh	r3, [r3, #16]
    b32e:	3b01      	subs	r3, #1
    b330:	b29b      	uxth	r3, r3
    b332:	b21b      	sxth	r3, r3
    b334:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b338:	4013      	ands	r3, r2
    b33a:	b21b      	sxth	r3, r3
    b33c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b33e:	2300      	movs	r3, #0
    b340:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b342:	687b      	ldr	r3, [r7, #4]
    b344:	7cdb      	ldrb	r3, [r3, #19]
    b346:	f003 0307 	and.w	r3, r3, #7
    b34a:	b2db      	uxtb	r3, r3
    b34c:	2b01      	cmp	r3, #1
    b34e:	bf0c      	ite	eq
    b350:	2301      	moveq	r3, #1
    b352:	2300      	movne	r3, #0
    b354:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b356:	78fb      	ldrb	r3, [r7, #3]
    b358:	2b00      	cmp	r3, #0
    b35a:	d004      	beq.n	b366 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b35c:	7dfb      	ldrb	r3, [r7, #23]
    b35e:	2101      	movs	r1, #1
    b360:	4618      	mov	r0, r3
    b362:	4b5a      	ldr	r3, [pc, #360]	; (b4cc <_usb_d_dev_in_next+0x1f4>)
    b364:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b366:	687b      	ldr	r3, [r7, #4]
    b368:	689a      	ldr	r2, [r3, #8]
    b36a:	89fb      	ldrh	r3, [r7, #14]
    b36c:	441a      	add	r2, r3
    b36e:	687b      	ldr	r3, [r7, #4]
    b370:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	689a      	ldr	r2, [r3, #8]
    b376:	687b      	ldr	r3, [r7, #4]
    b378:	685b      	ldr	r3, [r3, #4]
    b37a:	429a      	cmp	r2, r3
    b37c:	d243      	bcs.n	b406 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	685b      	ldr	r3, [r3, #4]
    b382:	b29a      	uxth	r2, r3
    b384:	687b      	ldr	r3, [r7, #4]
    b386:	689b      	ldr	r3, [r3, #8]
    b388:	b29b      	uxth	r3, r3
    b38a:	1ad3      	subs	r3, r2, r3
    b38c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	7cdb      	ldrb	r3, [r3, #19]
    b392:	f003 0320 	and.w	r3, r3, #32
    b396:	b2db      	uxtb	r3, r3
    b398:	2b00      	cmp	r3, #0
    b39a:	d01b      	beq.n	b3d4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b39c:	687b      	ldr	r3, [r7, #4]
    b39e:	8a1b      	ldrh	r3, [r3, #16]
    b3a0:	8bfa      	ldrh	r2, [r7, #30]
    b3a2:	429a      	cmp	r2, r3
    b3a4:	d902      	bls.n	b3ac <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	8a1b      	ldrh	r3, [r3, #16]
    b3aa:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	68d8      	ldr	r0, [r3, #12]
    b3b0:	687b      	ldr	r3, [r7, #4]
    b3b2:	681a      	ldr	r2, [r3, #0]
    b3b4:	687b      	ldr	r3, [r7, #4]
    b3b6:	689b      	ldr	r3, [r3, #8]
    b3b8:	4413      	add	r3, r2
    b3ba:	8bfa      	ldrh	r2, [r7, #30]
    b3bc:	4619      	mov	r1, r3
    b3be:	4b44      	ldr	r3, [pc, #272]	; (b4d0 <_usb_d_dev_in_next+0x1f8>)
    b3c0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	68db      	ldr	r3, [r3, #12]
    b3c6:	461a      	mov	r2, r3
    b3c8:	7dfb      	ldrb	r3, [r7, #23]
    b3ca:	2101      	movs	r1, #1
    b3cc:	4618      	mov	r0, r3
    b3ce:	4b41      	ldr	r3, [pc, #260]	; (b4d4 <_usb_d_dev_in_next+0x1fc>)
    b3d0:	4798      	blx	r3
    b3d2:	e011      	b.n	b3f8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b3d4:	8bfb      	ldrh	r3, [r7, #30]
    b3d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b3da:	d902      	bls.n	b3e2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b3dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b3e0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	681a      	ldr	r2, [r3, #0]
    b3e6:	687b      	ldr	r3, [r7, #4]
    b3e8:	689b      	ldr	r3, [r3, #8]
    b3ea:	4413      	add	r3, r2
    b3ec:	461a      	mov	r2, r3
    b3ee:	7dfb      	ldrb	r3, [r7, #23]
    b3f0:	2101      	movs	r1, #1
    b3f2:	4618      	mov	r0, r3
    b3f4:	4b37      	ldr	r3, [pc, #220]	; (b4d4 <_usb_d_dev_in_next+0x1fc>)
    b3f6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b3f8:	8bfa      	ldrh	r2, [r7, #30]
    b3fa:	7df8      	ldrb	r0, [r7, #23]
    b3fc:	2300      	movs	r3, #0
    b3fe:	2101      	movs	r1, #1
    b400:	4c35      	ldr	r4, [pc, #212]	; (b4d8 <_usb_d_dev_in_next+0x200>)
    b402:	47a0      	blx	r4
		goto _in_tx_exec;
    b404:	e041      	b.n	b48a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b406:	687b      	ldr	r3, [r7, #4]
    b408:	7cdb      	ldrb	r3, [r3, #19]
    b40a:	f003 0310 	and.w	r3, r3, #16
    b40e:	b2db      	uxtb	r3, r3
    b410:	2b00      	cmp	r3, #0
    b412:	d00b      	beq.n	b42c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b414:	687a      	ldr	r2, [r7, #4]
    b416:	7cd3      	ldrb	r3, [r2, #19]
    b418:	f36f 1304 	bfc	r3, #4, #1
    b41c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b41e:	7df8      	ldrb	r0, [r7, #23]
    b420:	2300      	movs	r3, #0
    b422:	2200      	movs	r2, #0
    b424:	2101      	movs	r1, #1
    b426:	4c2c      	ldr	r4, [pc, #176]	; (b4d8 <_usb_d_dev_in_next+0x200>)
    b428:	47a0      	blx	r4
		goto _in_tx_exec;
    b42a:	e02e      	b.n	b48a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b42c:	7afb      	ldrb	r3, [r7, #11]
    b42e:	2b00      	cmp	r3, #0
    b430:	d006      	beq.n	b440 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b432:	7dfb      	ldrb	r3, [r7, #23]
    b434:	224b      	movs	r2, #75	; 0x4b
    b436:	4619      	mov	r1, r3
    b438:	69b8      	ldr	r0, [r7, #24]
    b43a:	4b28      	ldr	r3, [pc, #160]	; (b4dc <_usb_d_dev_in_next+0x204>)
    b43c:	4798      	blx	r3
    b43e:	e005      	b.n	b44c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b440:	7dfb      	ldrb	r3, [r7, #23]
    b442:	224a      	movs	r2, #74	; 0x4a
    b444:	4619      	mov	r1, r3
    b446:	69b8      	ldr	r0, [r7, #24]
    b448:	4b24      	ldr	r3, [pc, #144]	; (b4dc <_usb_d_dev_in_next+0x204>)
    b44a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b44c:	687b      	ldr	r3, [r7, #4]
    b44e:	8a1b      	ldrh	r3, [r3, #16]
    b450:	89ba      	ldrh	r2, [r7, #12]
    b452:	429a      	cmp	r2, r3
    b454:	d114      	bne.n	b480 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b456:	687a      	ldr	r2, [r7, #4]
    b458:	7cd3      	ldrb	r3, [r2, #19]
    b45a:	f36f 1386 	bfc	r3, #6, #1
    b45e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b460:	4b1f      	ldr	r3, [pc, #124]	; (b4e0 <_usb_d_dev_in_next+0x208>)
    b462:	68db      	ldr	r3, [r3, #12]
    b464:	687a      	ldr	r2, [r7, #4]
    b466:	7c90      	ldrb	r0, [r2, #18]
    b468:	687a      	ldr	r2, [r7, #4]
    b46a:	6892      	ldr	r2, [r2, #8]
    b46c:	4611      	mov	r1, r2
    b46e:	4798      	blx	r3
    b470:	4603      	mov	r3, r0
    b472:	2b00      	cmp	r3, #0
    b474:	d124      	bne.n	b4c0 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b476:	687a      	ldr	r2, [r7, #4]
    b478:	7cd3      	ldrb	r3, [r2, #19]
    b47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b47e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b480:	2100      	movs	r1, #0
    b482:	6878      	ldr	r0, [r7, #4]
    b484:	4b17      	ldr	r3, [pc, #92]	; (b4e4 <_usb_d_dev_in_next+0x20c>)
    b486:	4798      	blx	r3
	return;
    b488:	e01b      	b.n	b4c2 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b48a:	78fb      	ldrb	r3, [r7, #3]
    b48c:	f083 0301 	eor.w	r3, r3, #1
    b490:	b2db      	uxtb	r3, r3
    b492:	2b00      	cmp	r3, #0
    b494:	d00d      	beq.n	b4b2 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b496:	7afb      	ldrb	r3, [r7, #11]
    b498:	2b00      	cmp	r3, #0
    b49a:	d002      	beq.n	b4a2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b49c:	234e      	movs	r3, #78	; 0x4e
    b49e:	777b      	strb	r3, [r7, #29]
    b4a0:	e001      	b.n	b4a6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b4a2:	234a      	movs	r3, #74	; 0x4a
    b4a4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b4a6:	7f7a      	ldrb	r2, [r7, #29]
    b4a8:	7dfb      	ldrb	r3, [r7, #23]
    b4aa:	4619      	mov	r1, r3
    b4ac:	69b8      	ldr	r0, [r7, #24]
    b4ae:	4b0e      	ldr	r3, [pc, #56]	; (b4e8 <_usb_d_dev_in_next+0x210>)
    b4b0:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b4b2:	7dfb      	ldrb	r3, [r7, #23]
    b4b4:	2201      	movs	r2, #1
    b4b6:	2101      	movs	r1, #1
    b4b8:	4618      	mov	r0, r3
    b4ba:	4b0c      	ldr	r3, [pc, #48]	; (b4ec <_usb_d_dev_in_next+0x214>)
    b4bc:	4798      	blx	r3
    b4be:	e000      	b.n	b4c2 <_usb_d_dev_in_next+0x1ea>
			return;
    b4c0:	bf00      	nop
}
    b4c2:	3724      	adds	r7, #36	; 0x24
    b4c4:	46bd      	mov	sp, r7
    b4c6:	bd90      	pop	{r4, r7, pc}
    b4c8:	2000267c 	.word	0x2000267c
    b4cc:	0000acd1 	.word	0x0000acd1
    b4d0:	0001b0e1 	.word	0x0001b0e1
    b4d4:	0000acfd 	.word	0x0000acfd
    b4d8:	0000ae45 	.word	0x0000ae45
    b4dc:	0000a5dd 	.word	0x0000a5dd
    b4e0:	200025b4 	.word	0x200025b4
    b4e4:	0000c601 	.word	0x0000c601
    b4e8:	0000a5b1 	.word	0x0000a5b1
    b4ec:	0000aefd 	.word	0x0000aefd

0000b4f0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b4f0:	b590      	push	{r4, r7, lr}
    b4f2:	b08b      	sub	sp, #44	; 0x2c
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	6078      	str	r0, [r7, #4]
    b4f8:	460b      	mov	r3, r1
    b4fa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b4fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b500:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b502:	687b      	ldr	r3, [r7, #4]
    b504:	7c9b      	ldrb	r3, [r3, #18]
    b506:	f003 030f 	and.w	r3, r3, #15
    b50a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b50c:	7ffb      	ldrb	r3, [r7, #31]
    b50e:	015b      	lsls	r3, r3, #5
    b510:	4a94      	ldr	r2, [pc, #592]	; (b764 <_usb_d_dev_out_next+0x274>)
    b512:	4413      	add	r3, r2
    b514:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b516:	78fb      	ldrb	r3, [r7, #3]
    b518:	2b00      	cmp	r3, #0
    b51a:	d005      	beq.n	b528 <_usb_d_dev_out_next+0x38>
    b51c:	69bb      	ldr	r3, [r7, #24]
    b51e:	685b      	ldr	r3, [r3, #4]
    b520:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b524:	b29b      	uxth	r3, r3
    b526:	e000      	b.n	b52a <_usb_d_dev_out_next+0x3a>
    b528:	2300      	movs	r3, #0
    b52a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b52c:	78fb      	ldrb	r3, [r7, #3]
    b52e:	2b00      	cmp	r3, #0
    b530:	d005      	beq.n	b53e <_usb_d_dev_out_next+0x4e>
    b532:	69bb      	ldr	r3, [r7, #24]
    b534:	685b      	ldr	r3, [r3, #4]
    b536:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b53a:	b29b      	uxth	r3, r3
    b53c:	e000      	b.n	b540 <_usb_d_dev_out_next+0x50>
    b53e:	2300      	movs	r3, #0
    b540:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	8a1b      	ldrh	r3, [r3, #16]
    b546:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b54a:	4293      	cmp	r3, r2
    b54c:	d004      	beq.n	b558 <_usb_d_dev_out_next+0x68>
    b54e:	687b      	ldr	r3, [r7, #4]
    b550:	8a1b      	ldrh	r3, [r3, #16]
    b552:	3b01      	subs	r3, #1
    b554:	b29b      	uxth	r3, r3
    b556:	e001      	b.n	b55c <_usb_d_dev_out_next+0x6c>
    b558:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b55c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b55e:	8aba      	ldrh	r2, [r7, #20]
    b560:	8a7b      	ldrh	r3, [r7, #18]
    b562:	4013      	ands	r3, r2
    b564:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b566:	687b      	ldr	r3, [r7, #4]
    b568:	7cdb      	ldrb	r3, [r3, #19]
    b56a:	f003 0307 	and.w	r3, r3, #7
    b56e:	b2db      	uxtb	r3, r3
    b570:	2b01      	cmp	r3, #1
    b572:	bf0c      	ite	eq
    b574:	2301      	moveq	r3, #1
    b576:	2300      	movne	r3, #0
    b578:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b57a:	78fb      	ldrb	r3, [r7, #3]
    b57c:	2b00      	cmp	r3, #0
    b57e:	d004      	beq.n	b58a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b580:	7ffb      	ldrb	r3, [r7, #31]
    b582:	2100      	movs	r1, #0
    b584:	4618      	mov	r0, r3
    b586:	4b78      	ldr	r3, [pc, #480]	; (b768 <_usb_d_dev_out_next+0x278>)
    b588:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	7cdb      	ldrb	r3, [r3, #19]
    b58e:	f003 0320 	and.w	r3, r3, #32
    b592:	b2db      	uxtb	r3, r3
    b594:	2b00      	cmp	r3, #0
    b596:	d01c      	beq.n	b5d2 <_usb_d_dev_out_next+0xe2>
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	685b      	ldr	r3, [r3, #4]
    b59c:	2b00      	cmp	r3, #0
    b59e:	d018      	beq.n	b5d2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	685b      	ldr	r3, [r3, #4]
    b5a4:	b29a      	uxth	r2, r3
    b5a6:	687b      	ldr	r3, [r7, #4]
    b5a8:	689b      	ldr	r3, [r3, #8]
    b5aa:	b29b      	uxth	r3, r3
    b5ac:	1ad3      	subs	r3, r2, r3
    b5ae:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b5b0:	687b      	ldr	r3, [r7, #4]
    b5b2:	681a      	ldr	r2, [r3, #0]
    b5b4:	687b      	ldr	r3, [r7, #4]
    b5b6:	689b      	ldr	r3, [r3, #8]
    b5b8:	18d0      	adds	r0, r2, r3
    b5ba:	687b      	ldr	r3, [r7, #4]
    b5bc:	68d9      	ldr	r1, [r3, #12]
    b5be:	89ba      	ldrh	r2, [r7, #12]
    b5c0:	8a3b      	ldrh	r3, [r7, #16]
    b5c2:	429a      	cmp	r2, r3
    b5c4:	d901      	bls.n	b5ca <_usb_d_dev_out_next+0xda>
    b5c6:	8a3b      	ldrh	r3, [r7, #16]
    b5c8:	e000      	b.n	b5cc <_usb_d_dev_out_next+0xdc>
    b5ca:	89bb      	ldrh	r3, [r7, #12]
    b5cc:	461a      	mov	r2, r3
    b5ce:	4b67      	ldr	r3, [pc, #412]	; (b76c <_usb_d_dev_out_next+0x27c>)
    b5d0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b5d2:	687b      	ldr	r3, [r7, #4]
    b5d4:	685b      	ldr	r3, [r3, #4]
    b5d6:	2b00      	cmp	r3, #0
    b5d8:	d121      	bne.n	b61e <_usb_d_dev_out_next+0x12e>
    b5da:	687b      	ldr	r3, [r7, #4]
    b5dc:	7cdb      	ldrb	r3, [r3, #19]
    b5de:	f003 0310 	and.w	r3, r3, #16
    b5e2:	b2db      	uxtb	r3, r3
    b5e4:	2b00      	cmp	r3, #0
    b5e6:	d01a      	beq.n	b61e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b5e8:	687a      	ldr	r2, [r7, #4]
    b5ea:	7cd3      	ldrb	r3, [r2, #19]
    b5ec:	f36f 1304 	bfc	r3, #4, #1
    b5f0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b5f2:	687a      	ldr	r2, [r7, #4]
    b5f4:	7cd3      	ldrb	r3, [r2, #19]
    b5f6:	f043 0320 	orr.w	r3, r3, #32
    b5fa:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	68db      	ldr	r3, [r3, #12]
    b600:	461a      	mov	r2, r3
    b602:	7ffb      	ldrb	r3, [r7, #31]
    b604:	2100      	movs	r1, #0
    b606:	4618      	mov	r0, r3
    b608:	4b59      	ldr	r3, [pc, #356]	; (b770 <_usb_d_dev_out_next+0x280>)
    b60a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b60c:	687b      	ldr	r3, [r7, #4]
    b60e:	8a1b      	ldrh	r3, [r3, #16]
    b610:	461a      	mov	r2, r3
    b612:	7ff8      	ldrb	r0, [r7, #31]
    b614:	2300      	movs	r3, #0
    b616:	2100      	movs	r1, #0
    b618:	4c56      	ldr	r4, [pc, #344]	; (b774 <_usb_d_dev_out_next+0x284>)
    b61a:	47a0      	blx	r4
		goto _out_rx_exec;
    b61c:	e090      	b.n	b740 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b61e:	78fb      	ldrb	r3, [r7, #3]
    b620:	2b00      	cmp	r3, #0
    b622:	d010      	beq.n	b646 <_usb_d_dev_out_next+0x156>
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	8a1b      	ldrh	r3, [r3, #16]
    b628:	8a3a      	ldrh	r2, [r7, #16]
    b62a:	429a      	cmp	r2, r3
    b62c:	d20b      	bcs.n	b646 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b62e:	687a      	ldr	r2, [r7, #4]
    b630:	7cd3      	ldrb	r3, [r2, #19]
    b632:	f36f 1304 	bfc	r3, #4, #1
    b636:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b638:	687b      	ldr	r3, [r7, #4]
    b63a:	689a      	ldr	r2, [r3, #8]
    b63c:	8abb      	ldrh	r3, [r7, #20]
    b63e:	441a      	add	r2, r3
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	609a      	str	r2, [r3, #8]
    b644:	e05c      	b.n	b700 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	689a      	ldr	r2, [r3, #8]
    b64a:	8afb      	ldrh	r3, [r7, #22]
    b64c:	441a      	add	r2, r3
    b64e:	687b      	ldr	r3, [r7, #4]
    b650:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b652:	687b      	ldr	r3, [r7, #4]
    b654:	689a      	ldr	r2, [r3, #8]
    b656:	687b      	ldr	r3, [r7, #4]
    b658:	685b      	ldr	r3, [r3, #4]
    b65a:	429a      	cmp	r2, r3
    b65c:	d250      	bcs.n	b700 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b65e:	687b      	ldr	r3, [r7, #4]
    b660:	685b      	ldr	r3, [r3, #4]
    b662:	b29a      	uxth	r2, r3
    b664:	687b      	ldr	r3, [r7, #4]
    b666:	689b      	ldr	r3, [r3, #8]
    b668:	b29b      	uxth	r3, r3
    b66a:	1ad3      	subs	r3, r2, r3
    b66c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b66e:	687b      	ldr	r3, [r7, #4]
    b670:	7cdb      	ldrb	r3, [r3, #19]
    b672:	f003 0320 	and.w	r3, r3, #32
    b676:	b2db      	uxtb	r3, r3
    b678:	2b00      	cmp	r3, #0
    b67a:	d010      	beq.n	b69e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b67c:	687b      	ldr	r3, [r7, #4]
    b67e:	8a1b      	ldrh	r3, [r3, #16]
    b680:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b682:	429a      	cmp	r2, r3
    b684:	d902      	bls.n	b68c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b686:	687b      	ldr	r3, [r7, #4]
    b688:	8a1b      	ldrh	r3, [r3, #16]
    b68a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b68c:	687b      	ldr	r3, [r7, #4]
    b68e:	68db      	ldr	r3, [r3, #12]
    b690:	461a      	mov	r2, r3
    b692:	7ffb      	ldrb	r3, [r7, #31]
    b694:	2100      	movs	r1, #0
    b696:	4618      	mov	r0, r3
    b698:	4b35      	ldr	r3, [pc, #212]	; (b770 <_usb_d_dev_out_next+0x280>)
    b69a:	4798      	blx	r3
    b69c:	e029      	b.n	b6f2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b69e:	687b      	ldr	r3, [r7, #4]
    b6a0:	8a1b      	ldrh	r3, [r3, #16]
    b6a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b6a4:	429a      	cmp	r2, r3
    b6a6:	d90f      	bls.n	b6c8 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b6a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b6ae:	d903      	bls.n	b6b8 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b6b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b6b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    b6b6:	e011      	b.n	b6dc <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b6b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b6ba:	8a7b      	ldrh	r3, [r7, #18]
    b6bc:	4013      	ands	r3, r2
    b6be:	b29b      	uxth	r3, r3
    b6c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b6c2:	1ad3      	subs	r3, r2, r3
    b6c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    b6c6:	e009      	b.n	b6dc <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b6c8:	687b      	ldr	r3, [r7, #4]
    b6ca:	8a1b      	ldrh	r3, [r3, #16]
    b6cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b6ce:	429a      	cmp	r2, r3
    b6d0:	d204      	bcs.n	b6dc <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b6d2:	687a      	ldr	r2, [r7, #4]
    b6d4:	7cd3      	ldrb	r3, [r2, #19]
    b6d6:	f043 0320 	orr.w	r3, r3, #32
    b6da:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b6dc:	687b      	ldr	r3, [r7, #4]
    b6de:	681a      	ldr	r2, [r3, #0]
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	689b      	ldr	r3, [r3, #8]
    b6e4:	4413      	add	r3, r2
    b6e6:	461a      	mov	r2, r3
    b6e8:	7ffb      	ldrb	r3, [r7, #31]
    b6ea:	2100      	movs	r1, #0
    b6ec:	4618      	mov	r0, r3
    b6ee:	4b20      	ldr	r3, [pc, #128]	; (b770 <_usb_d_dev_out_next+0x280>)
    b6f0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b6f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b6f4:	7ff8      	ldrb	r0, [r7, #31]
    b6f6:	2300      	movs	r3, #0
    b6f8:	2100      	movs	r1, #0
    b6fa:	4c1e      	ldr	r4, [pc, #120]	; (b774 <_usb_d_dev_out_next+0x284>)
    b6fc:	47a0      	blx	r4
			goto _out_rx_exec;
    b6fe:	e01f      	b.n	b740 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b700:	7bfb      	ldrb	r3, [r7, #15]
    b702:	2b00      	cmp	r3, #0
    b704:	d006      	beq.n	b714 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b706:	7ffb      	ldrb	r3, [r7, #31]
    b708:	222d      	movs	r2, #45	; 0x2d
    b70a:	4619      	mov	r1, r3
    b70c:	6a38      	ldr	r0, [r7, #32]
    b70e:	4b1a      	ldr	r3, [pc, #104]	; (b778 <_usb_d_dev_out_next+0x288>)
    b710:	4798      	blx	r3
    b712:	e005      	b.n	b720 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b714:	7ffb      	ldrb	r3, [r7, #31]
    b716:	2225      	movs	r2, #37	; 0x25
    b718:	4619      	mov	r1, r3
    b71a:	6a38      	ldr	r0, [r7, #32]
    b71c:	4b16      	ldr	r3, [pc, #88]	; (b778 <_usb_d_dev_out_next+0x288>)
    b71e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b720:	7ffb      	ldrb	r3, [r7, #31]
    b722:	2b00      	cmp	r3, #0
    b724:	d107      	bne.n	b736 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b726:	687b      	ldr	r3, [r7, #4]
    b728:	68db      	ldr	r3, [r3, #12]
    b72a:	461a      	mov	r2, r3
    b72c:	7ffb      	ldrb	r3, [r7, #31]
    b72e:	2100      	movs	r1, #0
    b730:	4618      	mov	r0, r3
    b732:	4b0f      	ldr	r3, [pc, #60]	; (b770 <_usb_d_dev_out_next+0x280>)
    b734:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b736:	2100      	movs	r1, #0
    b738:	6878      	ldr	r0, [r7, #4]
    b73a:	4b10      	ldr	r3, [pc, #64]	; (b77c <_usb_d_dev_out_next+0x28c>)
    b73c:	4798      	blx	r3
	return;
    b73e:	e031      	b.n	b7a4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b740:	78fb      	ldrb	r3, [r7, #3]
    b742:	f083 0301 	eor.w	r3, r3, #1
    b746:	b2db      	uxtb	r3, r3
    b748:	2b00      	cmp	r3, #0
    b74a:	d025      	beq.n	b798 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b74c:	7bfb      	ldrb	r3, [r7, #15]
    b74e:	2b00      	cmp	r3, #0
    b750:	d018      	beq.n	b784 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b752:	7ffb      	ldrb	r3, [r7, #31]
    b754:	2101      	movs	r1, #1
    b756:	4618      	mov	r0, r3
    b758:	4b09      	ldr	r3, [pc, #36]	; (b780 <_usb_d_dev_out_next+0x290>)
    b75a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b75c:	232d      	movs	r3, #45	; 0x2d
    b75e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b762:	e012      	b.n	b78a <_usb_d_dev_out_next+0x29a>
    b764:	2000267c 	.word	0x2000267c
    b768:	0000acd1 	.word	0x0000acd1
    b76c:	0001b0e1 	.word	0x0001b0e1
    b770:	0000acfd 	.word	0x0000acfd
    b774:	0000ae85 	.word	0x0000ae85
    b778:	0000a5dd 	.word	0x0000a5dd
    b77c:	0000c601 	.word	0x0000c601
    b780:	0000aec5 	.word	0x0000aec5
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b784:	2325      	movs	r3, #37	; 0x25
    b786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b78a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b78e:	7ffb      	ldrb	r3, [r7, #31]
    b790:	4619      	mov	r1, r3
    b792:	6a38      	ldr	r0, [r7, #32]
    b794:	4b05      	ldr	r3, [pc, #20]	; (b7ac <_usb_d_dev_out_next+0x2bc>)
    b796:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b798:	7ffb      	ldrb	r3, [r7, #31]
    b79a:	2201      	movs	r2, #1
    b79c:	2100      	movs	r1, #0
    b79e:	4618      	mov	r0, r3
    b7a0:	4b03      	ldr	r3, [pc, #12]	; (b7b0 <_usb_d_dev_out_next+0x2c0>)
    b7a2:	4798      	blx	r3
}
    b7a4:	372c      	adds	r7, #44	; 0x2c
    b7a6:	46bd      	mov	sp, r7
    b7a8:	bd90      	pop	{r4, r7, pc}
    b7aa:	bf00      	nop
    b7ac:	0000a5b1 	.word	0x0000a5b1
    b7b0:	0000af55 	.word	0x0000af55

0000b7b4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b7b4:	b580      	push	{r7, lr}
    b7b6:	b084      	sub	sp, #16
    b7b8:	af00      	add	r7, sp, #0
    b7ba:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	7c9b      	ldrb	r3, [r3, #18]
    b7c0:	f003 030f 	and.w	r3, r3, #15
    b7c4:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b7c6:	687b      	ldr	r3, [r7, #4]
    b7c8:	7cdb      	ldrb	r3, [r3, #19]
    b7ca:	f003 0307 	and.w	r3, r3, #7
    b7ce:	b2db      	uxtb	r3, r3
    b7d0:	2b01      	cmp	r3, #1
    b7d2:	bf0c      	ite	eq
    b7d4:	2301      	moveq	r3, #1
    b7d6:	2300      	movne	r3, #0
    b7d8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b7da:	7bbb      	ldrb	r3, [r7, #14]
    b7dc:	f083 0301 	eor.w	r3, r3, #1
    b7e0:	b2db      	uxtb	r3, r3
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	d008      	beq.n	b7f8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b7e6:	7bfb      	ldrb	r3, [r7, #15]
    b7e8:	4618      	mov	r0, r3
    b7ea:	4b20      	ldr	r3, [pc, #128]	; (b86c <_usb_d_dev_handle_setup+0xb8>)
    b7ec:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b7ee:	7bfb      	ldrb	r3, [r7, #15]
    b7f0:	4618      	mov	r0, r3
    b7f2:	4b1f      	ldr	r3, [pc, #124]	; (b870 <_usb_d_dev_handle_setup+0xbc>)
    b7f4:	4798      	blx	r3
		return;
    b7f6:	e036      	b.n	b866 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b7f8:	687b      	ldr	r3, [r7, #4]
    b7fa:	7cdb      	ldrb	r3, [r3, #19]
    b7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b800:	b2db      	uxtb	r3, r3
    b802:	2b00      	cmp	r3, #0
    b804:	d010      	beq.n	b828 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b806:	687a      	ldr	r2, [r7, #4]
    b808:	7cd3      	ldrb	r3, [r2, #19]
    b80a:	f36f 1386 	bfc	r3, #6, #1
    b80e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b810:	7bfb      	ldrb	r3, [r7, #15]
    b812:	2200      	movs	r2, #0
    b814:	2101      	movs	r1, #1
    b816:	4618      	mov	r0, r3
    b818:	4b16      	ldr	r3, [pc, #88]	; (b874 <_usb_d_dev_handle_setup+0xc0>)
    b81a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b81c:	7bfb      	ldrb	r3, [r7, #15]
    b81e:	2200      	movs	r2, #0
    b820:	2100      	movs	r1, #0
    b822:	4618      	mov	r0, r3
    b824:	4b14      	ldr	r3, [pc, #80]	; (b878 <_usb_d_dev_handle_setup+0xc4>)
    b826:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b828:	687a      	ldr	r2, [r7, #4]
    b82a:	7cd3      	ldrb	r3, [r2, #19]
    b82c:	f36f 03c3 	bfc	r3, #3, #1
    b830:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b832:	7bfb      	ldrb	r3, [r7, #15]
    b834:	2100      	movs	r1, #0
    b836:	4618      	mov	r0, r3
    b838:	4b10      	ldr	r3, [pc, #64]	; (b87c <_usb_d_dev_handle_setup+0xc8>)
    b83a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b83c:	7bfb      	ldrb	r3, [r7, #15]
    b83e:	2101      	movs	r1, #1
    b840:	4618      	mov	r0, r3
    b842:	4b0e      	ldr	r3, [pc, #56]	; (b87c <_usb_d_dev_handle_setup+0xc8>)
    b844:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b846:	7bfb      	ldrb	r3, [r7, #15]
    b848:	216f      	movs	r1, #111	; 0x6f
    b84a:	4618      	mov	r0, r3
    b84c:	4b0c      	ldr	r3, [pc, #48]	; (b880 <_usb_d_dev_handle_setup+0xcc>)
    b84e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b850:	7bfb      	ldrb	r3, [r7, #15]
    b852:	216f      	movs	r1, #111	; 0x6f
    b854:	4618      	mov	r0, r3
    b856:	4b0b      	ldr	r3, [pc, #44]	; (b884 <_usb_d_dev_handle_setup+0xd0>)
    b858:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b85a:	4b0b      	ldr	r3, [pc, #44]	; (b888 <_usb_d_dev_handle_setup+0xd4>)
    b85c:	689b      	ldr	r3, [r3, #8]
    b85e:	687a      	ldr	r2, [r7, #4]
    b860:	7c92      	ldrb	r2, [r2, #18]
    b862:	4610      	mov	r0, r2
    b864:	4798      	blx	r3
}
    b866:	3710      	adds	r7, #16
    b868:	46bd      	mov	sp, r7
    b86a:	bd80      	pop	{r7, pc}
    b86c:	0000ac59 	.word	0x0000ac59
    b870:	0000ac05 	.word	0x0000ac05
    b874:	0000aefd 	.word	0x0000aefd
    b878:	0000af55 	.word	0x0000af55
    b87c:	0000aec5 	.word	0x0000aec5
    b880:	0000aa05 	.word	0x0000aa05
    b884:	0000aa55 	.word	0x0000aa55
    b888:	200025b4 	.word	0x200025b4

0000b88c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b88c:	b580      	push	{r7, lr}
    b88e:	b084      	sub	sp, #16
    b890:	af00      	add	r7, sp, #0
    b892:	6078      	str	r0, [r7, #4]
    b894:	460b      	mov	r3, r1
    b896:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	7c9b      	ldrb	r3, [r3, #18]
    b89c:	f003 030f 	and.w	r3, r3, #15
    b8a0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b8a2:	78f9      	ldrb	r1, [r7, #3]
    b8a4:	7bfb      	ldrb	r3, [r7, #15]
    b8a6:	2200      	movs	r2, #0
    b8a8:	4618      	mov	r0, r3
    b8aa:	4b07      	ldr	r3, [pc, #28]	; (b8c8 <_usb_d_dev_handle_stall+0x3c>)
    b8ac:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b8ae:	4b07      	ldr	r3, [pc, #28]	; (b8cc <_usb_d_dev_handle_stall+0x40>)
    b8b0:	691b      	ldr	r3, [r3, #16]
    b8b2:	687a      	ldr	r2, [r7, #4]
    b8b4:	7c90      	ldrb	r0, [r2, #18]
    b8b6:	687a      	ldr	r2, [r7, #4]
    b8b8:	6892      	ldr	r2, [r2, #8]
    b8ba:	2101      	movs	r1, #1
    b8bc:	4798      	blx	r3
}
    b8be:	bf00      	nop
    b8c0:	3710      	adds	r7, #16
    b8c2:	46bd      	mov	sp, r7
    b8c4:	bd80      	pop	{r7, pc}
    b8c6:	bf00      	nop
    b8c8:	0000abb9 	.word	0x0000abb9
    b8cc:	200025b4 	.word	0x200025b4

0000b8d0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b8d0:	b580      	push	{r7, lr}
    b8d2:	b088      	sub	sp, #32
    b8d4:	af00      	add	r7, sp, #0
    b8d6:	6078      	str	r0, [r7, #4]
    b8d8:	460b      	mov	r3, r1
    b8da:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b8dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b8e0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b8e2:	687b      	ldr	r3, [r7, #4]
    b8e4:	7c9b      	ldrb	r3, [r3, #18]
    b8e6:	f003 030f 	and.w	r3, r3, #15
    b8ea:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b8ec:	4b61      	ldr	r3, [pc, #388]	; (ba74 <_usb_d_dev_handle_trfail+0x1a4>)
    b8ee:	881b      	ldrh	r3, [r3, #0]
    b8f0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b8f2:	7efb      	ldrb	r3, [r7, #27]
    b8f4:	015b      	lsls	r3, r3, #5
    b8f6:	4a60      	ldr	r2, [pc, #384]	; (ba78 <_usb_d_dev_handle_trfail+0x1a8>)
    b8f8:	4413      	add	r3, r2
    b8fa:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b8fc:	78fb      	ldrb	r3, [r7, #3]
    b8fe:	2b00      	cmp	r3, #0
    b900:	d006      	beq.n	b910 <_usb_d_dev_handle_trfail+0x40>
    b902:	7efb      	ldrb	r3, [r7, #27]
    b904:	4619      	mov	r1, r3
    b906:	69f8      	ldr	r0, [r7, #28]
    b908:	4b5c      	ldr	r3, [pc, #368]	; (ba7c <_usb_d_dev_handle_trfail+0x1ac>)
    b90a:	4798      	blx	r3
    b90c:	4603      	mov	r3, r0
    b90e:	e005      	b.n	b91c <_usb_d_dev_handle_trfail+0x4c>
    b910:	7efb      	ldrb	r3, [r7, #27]
    b912:	4619      	mov	r1, r3
    b914:	69f8      	ldr	r0, [r7, #28]
    b916:	4b5a      	ldr	r3, [pc, #360]	; (ba80 <_usb_d_dev_handle_trfail+0x1b0>)
    b918:	4798      	blx	r3
    b91a:	4603      	mov	r3, r0
    b91c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	7cdb      	ldrb	r3, [r3, #19]
    b922:	f003 0307 	and.w	r3, r3, #7
    b926:	b2db      	uxtb	r3, r3
    b928:	2b01      	cmp	r3, #1
    b92a:	bf0c      	ite	eq
    b92c:	2301      	moveq	r3, #1
    b92e:	2300      	movne	r3, #0
    b930:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b932:	78fb      	ldrb	r3, [r7, #3]
    b934:	011b      	lsls	r3, r3, #4
    b936:	697a      	ldr	r2, [r7, #20]
    b938:	4413      	add	r3, r2
    b93a:	7a9b      	ldrb	r3, [r3, #10]
    b93c:	b2db      	uxtb	r3, r3
    b93e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b940:	7cfb      	ldrb	r3, [r7, #19]
    b942:	2b02      	cmp	r3, #2
    b944:	d12f      	bne.n	b9a6 <_usb_d_dev_handle_trfail+0xd6>
    b946:	7b3b      	ldrb	r3, [r7, #12]
    b948:	f003 0301 	and.w	r3, r3, #1
    b94c:	b2db      	uxtb	r3, r3
    b94e:	2b00      	cmp	r3, #0
    b950:	d029      	beq.n	b9a6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b952:	78fb      	ldrb	r3, [r7, #3]
    b954:	011b      	lsls	r3, r3, #4
    b956:	697a      	ldr	r2, [r7, #20]
    b958:	441a      	add	r2, r3
    b95a:	7a93      	ldrb	r3, [r2, #10]
    b95c:	f36f 0300 	bfc	r3, #0, #1
    b960:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b962:	78fb      	ldrb	r3, [r7, #3]
    b964:	f107 0220 	add.w	r2, r7, #32
    b968:	4413      	add	r3, r2
    b96a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b96e:	7efb      	ldrb	r3, [r7, #27]
    b970:	4619      	mov	r1, r3
    b972:	69f8      	ldr	r0, [r7, #28]
    b974:	4b43      	ldr	r3, [pc, #268]	; (ba84 <_usb_d_dev_handle_trfail+0x1b4>)
    b976:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b978:	78fb      	ldrb	r3, [r7, #3]
    b97a:	f107 0220 	add.w	r2, r7, #32
    b97e:	4413      	add	r3, r2
    b980:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b984:	7efb      	ldrb	r3, [r7, #27]
    b986:	4619      	mov	r1, r3
    b988:	69f8      	ldr	r0, [r7, #28]
    b98a:	4b3f      	ldr	r3, [pc, #252]	; (ba88 <_usb_d_dev_handle_trfail+0x1b8>)
    b98c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b98e:	78fb      	ldrb	r3, [r7, #3]
    b990:	2b00      	cmp	r3, #0
    b992:	bf14      	ite	ne
    b994:	2301      	movne	r3, #1
    b996:	2300      	moveq	r3, #0
    b998:	b2db      	uxtb	r3, r3
    b99a:	2204      	movs	r2, #4
    b99c:	4619      	mov	r1, r3
    b99e:	6878      	ldr	r0, [r7, #4]
    b9a0:	4b3a      	ldr	r3, [pc, #232]	; (ba8c <_usb_d_dev_handle_trfail+0x1bc>)
    b9a2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b9a4:	e062      	b.n	ba6c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b9a6:	7b3b      	ldrb	r3, [r7, #12]
    b9a8:	f003 0302 	and.w	r3, r3, #2
    b9ac:	b2db      	uxtb	r3, r3
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d040      	beq.n	ba34 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b9b2:	78fb      	ldrb	r3, [r7, #3]
    b9b4:	011b      	lsls	r3, r3, #4
    b9b6:	697a      	ldr	r2, [r7, #20]
    b9b8:	441a      	add	r2, r3
    b9ba:	7a93      	ldrb	r3, [r2, #10]
    b9bc:	f36f 0341 	bfc	r3, #1, #1
    b9c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b9c2:	78fb      	ldrb	r3, [r7, #3]
    b9c4:	f107 0220 	add.w	r2, r7, #32
    b9c8:	4413      	add	r3, r2
    b9ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b9ce:	7efb      	ldrb	r3, [r7, #27]
    b9d0:	4619      	mov	r1, r3
    b9d2:	69f8      	ldr	r0, [r7, #28]
    b9d4:	4b2b      	ldr	r3, [pc, #172]	; (ba84 <_usb_d_dev_handle_trfail+0x1b4>)
    b9d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b9d8:	78fb      	ldrb	r3, [r7, #3]
    b9da:	f107 0220 	add.w	r2, r7, #32
    b9de:	4413      	add	r3, r2
    b9e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b9e4:	7efb      	ldrb	r3, [r7, #27]
    b9e6:	4619      	mov	r1, r3
    b9e8:	69f8      	ldr	r0, [r7, #28]
    b9ea:	4b27      	ldr	r3, [pc, #156]	; (ba88 <_usb_d_dev_handle_trfail+0x1b8>)
    b9ec:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b9ee:	7cbb      	ldrb	r3, [r7, #18]
    b9f0:	2b00      	cmp	r3, #0
    b9f2:	d03b      	beq.n	ba6c <_usb_d_dev_handle_trfail+0x19c>
    b9f4:	687b      	ldr	r3, [r7, #4]
    b9f6:	7cdb      	ldrb	r3, [r3, #19]
    b9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9fc:	b2db      	uxtb	r3, r3
    b9fe:	2b00      	cmp	r3, #0
    ba00:	d034      	beq.n	ba6c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    ba02:	687b      	ldr	r3, [r7, #4]
    ba04:	7cdb      	ldrb	r3, [r3, #19]
    ba06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ba0a:	b2db      	uxtb	r3, r3
    ba0c:	461a      	mov	r2, r3
    ba0e:	78fb      	ldrb	r3, [r7, #3]
    ba10:	4293      	cmp	r3, r2
    ba12:	d02b      	beq.n	ba6c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	7cdb      	ldrb	r3, [r3, #19]
    ba18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ba1c:	b2db      	uxtb	r3, r3
    ba1e:	2b00      	cmp	r3, #0
    ba20:	bf14      	ite	ne
    ba22:	2301      	movne	r3, #1
    ba24:	2300      	moveq	r3, #0
    ba26:	b2db      	uxtb	r3, r3
    ba28:	2200      	movs	r2, #0
    ba2a:	4619      	mov	r1, r3
    ba2c:	6878      	ldr	r0, [r7, #4]
    ba2e:	4b17      	ldr	r3, [pc, #92]	; (ba8c <_usb_d_dev_handle_trfail+0x1bc>)
    ba30:	4798      	blx	r3
}
    ba32:	e01b      	b.n	ba6c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    ba34:	78fa      	ldrb	r2, [r7, #3]
    ba36:	7efb      	ldrb	r3, [r7, #27]
    ba38:	4611      	mov	r1, r2
    ba3a:	4618      	mov	r0, r3
    ba3c:	4b14      	ldr	r3, [pc, #80]	; (ba90 <_usb_d_dev_handle_trfail+0x1c0>)
    ba3e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ba40:	78fb      	ldrb	r3, [r7, #3]
    ba42:	f107 0220 	add.w	r2, r7, #32
    ba46:	4413      	add	r3, r2
    ba48:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ba4c:	7efb      	ldrb	r3, [r7, #27]
    ba4e:	4619      	mov	r1, r3
    ba50:	69f8      	ldr	r0, [r7, #28]
    ba52:	4b0c      	ldr	r3, [pc, #48]	; (ba84 <_usb_d_dev_handle_trfail+0x1b4>)
    ba54:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ba56:	78fb      	ldrb	r3, [r7, #3]
    ba58:	f107 0220 	add.w	r2, r7, #32
    ba5c:	4413      	add	r3, r2
    ba5e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ba62:	7efb      	ldrb	r3, [r7, #27]
    ba64:	4619      	mov	r1, r3
    ba66:	69f8      	ldr	r0, [r7, #28]
    ba68:	4b07      	ldr	r3, [pc, #28]	; (ba88 <_usb_d_dev_handle_trfail+0x1b8>)
    ba6a:	4798      	blx	r3
}
    ba6c:	bf00      	nop
    ba6e:	3720      	adds	r7, #32
    ba70:	46bd      	mov	sp, r7
    ba72:	bd80      	pop	{r7, pc}
    ba74:	0001b9f8 	.word	0x0001b9f8
    ba78:	2000267c 	.word	0x2000267c
    ba7c:	0000a639 	.word	0x0000a639
    ba80:	0000a609 	.word	0x0000a609
    ba84:	0000a4dd 	.word	0x0000a4dd
    ba88:	0000a5dd 	.word	0x0000a5dd
    ba8c:	0000c649 	.word	0x0000c649
    ba90:	0000aec5 	.word	0x0000aec5

0000ba94 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ba94:	b580      	push	{r7, lr}
    ba96:	b082      	sub	sp, #8
    ba98:	af00      	add	r7, sp, #0
    ba9a:	6078      	str	r0, [r7, #4]
    ba9c:	460b      	mov	r3, r1
    ba9e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    baa0:	78fb      	ldrb	r3, [r7, #3]
    baa2:	f003 0310 	and.w	r3, r3, #16
    baa6:	2b00      	cmp	r3, #0
    baa8:	d003      	beq.n	bab2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    baaa:	6878      	ldr	r0, [r7, #4]
    baac:	4b0c      	ldr	r3, [pc, #48]	; (bae0 <_usb_d_dev_trans_setup_isr+0x4c>)
    baae:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    bab0:	e012      	b.n	bad8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    bab2:	78fb      	ldrb	r3, [r7, #3]
    bab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bab8:	2b00      	cmp	r3, #0
    baba:	d004      	beq.n	bac6 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    babc:	2101      	movs	r1, #1
    babe:	6878      	ldr	r0, [r7, #4]
    bac0:	4b08      	ldr	r3, [pc, #32]	; (bae4 <_usb_d_dev_trans_setup_isr+0x50>)
    bac2:	4798      	blx	r3
}
    bac4:	e008      	b.n	bad8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    bac6:	78fb      	ldrb	r3, [r7, #3]
    bac8:	f003 0320 	and.w	r3, r3, #32
    bacc:	2b00      	cmp	r3, #0
    bace:	d003      	beq.n	bad8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    bad0:	2100      	movs	r1, #0
    bad2:	6878      	ldr	r0, [r7, #4]
    bad4:	4b03      	ldr	r3, [pc, #12]	; (bae4 <_usb_d_dev_trans_setup_isr+0x50>)
    bad6:	4798      	blx	r3
}
    bad8:	bf00      	nop
    bada:	3708      	adds	r7, #8
    badc:	46bd      	mov	sp, r7
    bade:	bd80      	pop	{r7, pc}
    bae0:	0000b7b5 	.word	0x0000b7b5
    bae4:	0000b88d 	.word	0x0000b88d

0000bae8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    bae8:	b580      	push	{r7, lr}
    baea:	b082      	sub	sp, #8
    baec:	af00      	add	r7, sp, #0
    baee:	6078      	str	r0, [r7, #4]
    baf0:	460b      	mov	r3, r1
    baf2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    baf4:	78fb      	ldrb	r3, [r7, #3]
    baf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bafa:	2b00      	cmp	r3, #0
    bafc:	d004      	beq.n	bb08 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    bafe:	2101      	movs	r1, #1
    bb00:	6878      	ldr	r0, [r7, #4]
    bb02:	4b1a      	ldr	r3, [pc, #104]	; (bb6c <_usb_d_dev_trans_in_isr+0x84>)
    bb04:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    bb06:	e02c      	b.n	bb62 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bb08:	78fb      	ldrb	r3, [r7, #3]
    bb0a:	f003 0308 	and.w	r3, r3, #8
    bb0e:	2b00      	cmp	r3, #0
    bb10:	d004      	beq.n	bb1c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    bb12:	2101      	movs	r1, #1
    bb14:	6878      	ldr	r0, [r7, #4]
    bb16:	4b16      	ldr	r3, [pc, #88]	; (bb70 <_usb_d_dev_trans_in_isr+0x88>)
    bb18:	4798      	blx	r3
}
    bb1a:	e022      	b.n	bb62 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    bb1c:	78fb      	ldrb	r3, [r7, #3]
    bb1e:	f003 0302 	and.w	r3, r3, #2
    bb22:	2b00      	cmp	r3, #0
    bb24:	d004      	beq.n	bb30 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    bb26:	2101      	movs	r1, #1
    bb28:	6878      	ldr	r0, [r7, #4]
    bb2a:	4b12      	ldr	r3, [pc, #72]	; (bb74 <_usb_d_dev_trans_in_isr+0x8c>)
    bb2c:	4798      	blx	r3
}
    bb2e:	e018      	b.n	bb62 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bb30:	687b      	ldr	r3, [r7, #4]
    bb32:	7cdb      	ldrb	r3, [r3, #19]
    bb34:	f003 0307 	and.w	r3, r3, #7
    bb38:	b2db      	uxtb	r3, r3
    bb3a:	2b01      	cmp	r3, #1
    bb3c:	d111      	bne.n	bb62 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    bb3e:	78fb      	ldrb	r3, [r7, #3]
    bb40:	f003 0304 	and.w	r3, r3, #4
    bb44:	2b00      	cmp	r3, #0
    bb46:	d004      	beq.n	bb52 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    bb48:	2100      	movs	r1, #0
    bb4a:	6878      	ldr	r0, [r7, #4]
    bb4c:	4b08      	ldr	r3, [pc, #32]	; (bb70 <_usb_d_dev_trans_in_isr+0x88>)
    bb4e:	4798      	blx	r3
}
    bb50:	e007      	b.n	bb62 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bb52:	78fb      	ldrb	r3, [r7, #3]
    bb54:	f003 0310 	and.w	r3, r3, #16
    bb58:	2b00      	cmp	r3, #0
    bb5a:	d002      	beq.n	bb62 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    bb5c:	6878      	ldr	r0, [r7, #4]
    bb5e:	4b06      	ldr	r3, [pc, #24]	; (bb78 <_usb_d_dev_trans_in_isr+0x90>)
    bb60:	4798      	blx	r3
}
    bb62:	bf00      	nop
    bb64:	3708      	adds	r7, #8
    bb66:	46bd      	mov	sp, r7
    bb68:	bd80      	pop	{r7, pc}
    bb6a:	bf00      	nop
    bb6c:	0000b88d 	.word	0x0000b88d
    bb70:	0000b8d1 	.word	0x0000b8d1
    bb74:	0000b2d9 	.word	0x0000b2d9
    bb78:	0000b7b5 	.word	0x0000b7b5

0000bb7c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    bb7c:	b580      	push	{r7, lr}
    bb7e:	b082      	sub	sp, #8
    bb80:	af00      	add	r7, sp, #0
    bb82:	6078      	str	r0, [r7, #4]
    bb84:	460b      	mov	r3, r1
    bb86:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    bb88:	78fb      	ldrb	r3, [r7, #3]
    bb8a:	f003 0320 	and.w	r3, r3, #32
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d004      	beq.n	bb9c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    bb92:	2100      	movs	r1, #0
    bb94:	6878      	ldr	r0, [r7, #4]
    bb96:	4b1a      	ldr	r3, [pc, #104]	; (bc00 <_usb_d_dev_trans_out_isr+0x84>)
    bb98:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    bb9a:	e02c      	b.n	bbf6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    bb9c:	78fb      	ldrb	r3, [r7, #3]
    bb9e:	f003 0304 	and.w	r3, r3, #4
    bba2:	2b00      	cmp	r3, #0
    bba4:	d004      	beq.n	bbb0 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    bba6:	2100      	movs	r1, #0
    bba8:	6878      	ldr	r0, [r7, #4]
    bbaa:	4b16      	ldr	r3, [pc, #88]	; (bc04 <_usb_d_dev_trans_out_isr+0x88>)
    bbac:	4798      	blx	r3
}
    bbae:	e022      	b.n	bbf6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    bbb0:	78fb      	ldrb	r3, [r7, #3]
    bbb2:	f003 0301 	and.w	r3, r3, #1
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d004      	beq.n	bbc4 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    bbba:	2101      	movs	r1, #1
    bbbc:	6878      	ldr	r0, [r7, #4]
    bbbe:	4b12      	ldr	r3, [pc, #72]	; (bc08 <_usb_d_dev_trans_out_isr+0x8c>)
    bbc0:	4798      	blx	r3
}
    bbc2:	e018      	b.n	bbf6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bbc4:	687b      	ldr	r3, [r7, #4]
    bbc6:	7cdb      	ldrb	r3, [r3, #19]
    bbc8:	f003 0307 	and.w	r3, r3, #7
    bbcc:	b2db      	uxtb	r3, r3
    bbce:	2b01      	cmp	r3, #1
    bbd0:	d111      	bne.n	bbf6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bbd2:	78fb      	ldrb	r3, [r7, #3]
    bbd4:	f003 0308 	and.w	r3, r3, #8
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d004      	beq.n	bbe6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    bbdc:	2101      	movs	r1, #1
    bbde:	6878      	ldr	r0, [r7, #4]
    bbe0:	4b08      	ldr	r3, [pc, #32]	; (bc04 <_usb_d_dev_trans_out_isr+0x88>)
    bbe2:	4798      	blx	r3
}
    bbe4:	e007      	b.n	bbf6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bbe6:	78fb      	ldrb	r3, [r7, #3]
    bbe8:	f003 0310 	and.w	r3, r3, #16
    bbec:	2b00      	cmp	r3, #0
    bbee:	d002      	beq.n	bbf6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    bbf0:	6878      	ldr	r0, [r7, #4]
    bbf2:	4b06      	ldr	r3, [pc, #24]	; (bc0c <_usb_d_dev_trans_out_isr+0x90>)
    bbf4:	4798      	blx	r3
}
    bbf6:	bf00      	nop
    bbf8:	3708      	adds	r7, #8
    bbfa:	46bd      	mov	sp, r7
    bbfc:	bd80      	pop	{r7, pc}
    bbfe:	bf00      	nop
    bc00:	0000b88d 	.word	0x0000b88d
    bc04:	0000b8d1 	.word	0x0000b8d1
    bc08:	0000b4f1 	.word	0x0000b4f1
    bc0c:	0000b7b5 	.word	0x0000b7b5

0000bc10 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    bc10:	b580      	push	{r7, lr}
    bc12:	b084      	sub	sp, #16
    bc14:	af00      	add	r7, sp, #0
    bc16:	6078      	str	r0, [r7, #4]
    bc18:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    bc1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc1e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bc20:	683b      	ldr	r3, [r7, #0]
    bc22:	7c9b      	ldrb	r3, [r3, #18]
    bc24:	f003 030f 	and.w	r3, r3, #15
    bc28:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    bc2a:	7afb      	ldrb	r3, [r7, #11]
    bc2c:	2201      	movs	r2, #1
    bc2e:	409a      	lsls	r2, r3
    bc30:	687b      	ldr	r3, [r7, #4]
    bc32:	4013      	ands	r3, r2
    bc34:	2b00      	cmp	r3, #0
    bc36:	d03d      	beq.n	bcb4 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    bc38:	7afb      	ldrb	r3, [r7, #11]
    bc3a:	68fa      	ldr	r2, [r7, #12]
    bc3c:	3308      	adds	r3, #8
    bc3e:	015b      	lsls	r3, r3, #5
    bc40:	4413      	add	r3, r2
    bc42:	3307      	adds	r3, #7
    bc44:	781b      	ldrb	r3, [r3, #0]
    bc46:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    bc48:	7afb      	ldrb	r3, [r7, #11]
    bc4a:	68fa      	ldr	r2, [r7, #12]
    bc4c:	015b      	lsls	r3, r3, #5
    bc4e:	4413      	add	r3, r2
    bc50:	f203 1309 	addw	r3, r3, #265	; 0x109
    bc54:	781b      	ldrb	r3, [r3, #0]
    bc56:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    bc58:	7aba      	ldrb	r2, [r7, #10]
    bc5a:	7a7b      	ldrb	r3, [r7, #9]
    bc5c:	4013      	ands	r3, r2
    bc5e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    bc60:	7abb      	ldrb	r3, [r7, #10]
    bc62:	2b00      	cmp	r3, #0
    bc64:	d027      	beq.n	bcb6 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    bc66:	683b      	ldr	r3, [r7, #0]
    bc68:	7cdb      	ldrb	r3, [r3, #19]
    bc6a:	f003 0307 	and.w	r3, r3, #7
    bc6e:	b2db      	uxtb	r3, r3
    bc70:	2b01      	cmp	r3, #1
    bc72:	d10c      	bne.n	bc8e <_usb_d_dev_handle_eps+0x7e>
    bc74:	683b      	ldr	r3, [r7, #0]
    bc76:	7cdb      	ldrb	r3, [r3, #19]
    bc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bc7c:	b2db      	uxtb	r3, r3
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d105      	bne.n	bc8e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    bc82:	7abb      	ldrb	r3, [r7, #10]
    bc84:	4619      	mov	r1, r3
    bc86:	6838      	ldr	r0, [r7, #0]
    bc88:	4b0c      	ldr	r3, [pc, #48]	; (bcbc <_usb_d_dev_handle_eps+0xac>)
    bc8a:	4798      	blx	r3
    bc8c:	e013      	b.n	bcb6 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    bc8e:	683b      	ldr	r3, [r7, #0]
    bc90:	7cdb      	ldrb	r3, [r3, #19]
    bc92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    bc96:	b2db      	uxtb	r3, r3
    bc98:	2b00      	cmp	r3, #0
    bc9a:	d005      	beq.n	bca8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    bc9c:	7abb      	ldrb	r3, [r7, #10]
    bc9e:	4619      	mov	r1, r3
    bca0:	6838      	ldr	r0, [r7, #0]
    bca2:	4b07      	ldr	r3, [pc, #28]	; (bcc0 <_usb_d_dev_handle_eps+0xb0>)
    bca4:	4798      	blx	r3
    bca6:	e006      	b.n	bcb6 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    bca8:	7abb      	ldrb	r3, [r7, #10]
    bcaa:	4619      	mov	r1, r3
    bcac:	6838      	ldr	r0, [r7, #0]
    bcae:	4b05      	ldr	r3, [pc, #20]	; (bcc4 <_usb_d_dev_handle_eps+0xb4>)
    bcb0:	4798      	blx	r3
    bcb2:	e000      	b.n	bcb6 <_usb_d_dev_handle_eps+0xa6>
		return;
    bcb4:	bf00      	nop
		}
	}
}
    bcb6:	3710      	adds	r7, #16
    bcb8:	46bd      	mov	sp, r7
    bcba:	bd80      	pop	{r7, pc}
    bcbc:	0000ba95 	.word	0x0000ba95
    bcc0:	0000bae9 	.word	0x0000bae9
    bcc4:	0000bb7d 	.word	0x0000bb7d

0000bcc8 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    bcc8:	b580      	push	{r7, lr}
    bcca:	b084      	sub	sp, #16
    bccc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bcce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bcd2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bcd4:	68bb      	ldr	r3, [r7, #8]
    bcd6:	8c1b      	ldrh	r3, [r3, #32]
    bcd8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    bcda:	88fb      	ldrh	r3, [r7, #6]
    bcdc:	2b00      	cmp	r3, #0
    bcde:	d104      	bne.n	bcea <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    bce0:	4b13      	ldr	r3, [pc, #76]	; (bd30 <_usb_d_dev_handler+0x68>)
    bce2:	4798      	blx	r3
    bce4:	4603      	mov	r3, r0
    bce6:	2b00      	cmp	r3, #0
    bce8:	d11e      	bne.n	bd28 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    bcea:	2300      	movs	r3, #0
    bcec:	73fb      	strb	r3, [r7, #15]
    bcee:	e017      	b.n	bd20 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    bcf0:	7bfa      	ldrb	r2, [r7, #15]
    bcf2:	4613      	mov	r3, r2
    bcf4:	009b      	lsls	r3, r3, #2
    bcf6:	4413      	add	r3, r2
    bcf8:	009b      	lsls	r3, r3, #2
    bcfa:	3310      	adds	r3, #16
    bcfc:	4a0d      	ldr	r2, [pc, #52]	; (bd34 <_usb_d_dev_handler+0x6c>)
    bcfe:	4413      	add	r3, r2
    bd00:	3304      	adds	r3, #4
    bd02:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    bd04:	683b      	ldr	r3, [r7, #0]
    bd06:	7c9b      	ldrb	r3, [r3, #18]
    bd08:	2bff      	cmp	r3, #255	; 0xff
    bd0a:	d005      	beq.n	bd18 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    bd0c:	88fb      	ldrh	r3, [r7, #6]
    bd0e:	6839      	ldr	r1, [r7, #0]
    bd10:	4618      	mov	r0, r3
    bd12:	4b09      	ldr	r3, [pc, #36]	; (bd38 <_usb_d_dev_handler+0x70>)
    bd14:	4798      	blx	r3
    bd16:	e000      	b.n	bd1a <_usb_d_dev_handler+0x52>
			continue;
    bd18:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    bd1a:	7bfb      	ldrb	r3, [r7, #15]
    bd1c:	3301      	adds	r3, #1
    bd1e:	73fb      	strb	r3, [r7, #15]
    bd20:	7bfb      	ldrb	r3, [r7, #15]
    bd22:	2b08      	cmp	r3, #8
    bd24:	d9e4      	bls.n	bcf0 <_usb_d_dev_handler+0x28>
    bd26:	e000      	b.n	bd2a <_usb_d_dev_handler+0x62>
			return;
    bd28:	bf00      	nop
	}
}
    bd2a:	3710      	adds	r7, #16
    bd2c:	46bd      	mov	sp, r7
    bd2e:	bd80      	pop	{r7, pc}
    bd30:	0000b221 	.word	0x0000b221
    bd34:	200025b4 	.word	0x200025b4
    bd38:	0000bc11 	.word	0x0000bc11

0000bd3c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    bd3c:	b580      	push	{r7, lr}
    bd3e:	b082      	sub	sp, #8
    bd40:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    bd42:	2300      	movs	r3, #0
    bd44:	71fb      	strb	r3, [r7, #7]
    bd46:	e023      	b.n	bd90 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    bd48:	79fa      	ldrb	r2, [r7, #7]
    bd4a:	4613      	mov	r3, r2
    bd4c:	009b      	lsls	r3, r3, #2
    bd4e:	4413      	add	r3, r2
    bd50:	009b      	lsls	r3, r3, #2
    bd52:	3310      	adds	r3, #16
    bd54:	4a14      	ldr	r2, [pc, #80]	; (bda8 <_usb_d_dev_reset_epts+0x6c>)
    bd56:	4413      	add	r3, r2
    bd58:	3304      	adds	r3, #4
    bd5a:	2103      	movs	r1, #3
    bd5c:	4618      	mov	r0, r3
    bd5e:	4b13      	ldr	r3, [pc, #76]	; (bdac <_usb_d_dev_reset_epts+0x70>)
    bd60:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    bd62:	79fa      	ldrb	r2, [r7, #7]
    bd64:	4910      	ldr	r1, [pc, #64]	; (bda8 <_usb_d_dev_reset_epts+0x6c>)
    bd66:	4613      	mov	r3, r2
    bd68:	009b      	lsls	r3, r3, #2
    bd6a:	4413      	add	r3, r2
    bd6c:	009b      	lsls	r3, r3, #2
    bd6e:	440b      	add	r3, r1
    bd70:	3326      	adds	r3, #38	; 0x26
    bd72:	22ff      	movs	r2, #255	; 0xff
    bd74:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    bd76:	79fa      	ldrb	r2, [r7, #7]
    bd78:	490b      	ldr	r1, [pc, #44]	; (bda8 <_usb_d_dev_reset_epts+0x6c>)
    bd7a:	4613      	mov	r3, r2
    bd7c:	009b      	lsls	r3, r3, #2
    bd7e:	4413      	add	r3, r2
    bd80:	009b      	lsls	r3, r3, #2
    bd82:	440b      	add	r3, r1
    bd84:	3327      	adds	r3, #39	; 0x27
    bd86:	2200      	movs	r2, #0
    bd88:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    bd8a:	79fb      	ldrb	r3, [r7, #7]
    bd8c:	3301      	adds	r3, #1
    bd8e:	71fb      	strb	r3, [r7, #7]
    bd90:	79fb      	ldrb	r3, [r7, #7]
    bd92:	2b08      	cmp	r3, #8
    bd94:	d9d8      	bls.n	bd48 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    bd96:	22a0      	movs	r2, #160	; 0xa0
    bd98:	2100      	movs	r1, #0
    bd9a:	4805      	ldr	r0, [pc, #20]	; (bdb0 <_usb_d_dev_reset_epts+0x74>)
    bd9c:	4b05      	ldr	r3, [pc, #20]	; (bdb4 <_usb_d_dev_reset_epts+0x78>)
    bd9e:	4798      	blx	r3
}
    bda0:	bf00      	nop
    bda2:	3708      	adds	r7, #8
    bda4:	46bd      	mov	sp, r7
    bda6:	bd80      	pop	{r7, pc}
    bda8:	200025b4 	.word	0x200025b4
    bdac:	0000c601 	.word	0x0000c601
    bdb0:	2000267c 	.word	0x2000267c
    bdb4:	0001b215 	.word	0x0001b215

0000bdb8 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    bdb8:	b580      	push	{r7, lr}
    bdba:	b084      	sub	sp, #16
    bdbc:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    bdbe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bdc2:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    bdc4:	2301      	movs	r3, #1
    bdc6:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    bdc8:	2304      	movs	r3, #4
    bdca:	713b      	strb	r3, [r7, #4]
    bdcc:	2300      	movs	r3, #0
    bdce:	717b      	strb	r3, [r7, #5]
    bdd0:	2300      	movs	r3, #0
    bdd2:	71bb      	strb	r3, [r7, #6]
    bdd4:	2300      	movs	r3, #0
    bdd6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    bdd8:	2101      	movs	r1, #1
    bdda:	68f8      	ldr	r0, [r7, #12]
    bddc:	4b26      	ldr	r3, [pc, #152]	; (be78 <_usb_d_dev_init+0xc0>)
    bdde:	4798      	blx	r3
    bde0:	4603      	mov	r3, r0
    bde2:	f083 0301 	eor.w	r3, r3, #1
    bde6:	b2db      	uxtb	r3, r3
    bde8:	2b00      	cmp	r3, #0
    bdea:	d011      	beq.n	be10 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    bdec:	2102      	movs	r1, #2
    bdee:	68f8      	ldr	r0, [r7, #12]
    bdf0:	4b22      	ldr	r3, [pc, #136]	; (be7c <_usb_d_dev_init+0xc4>)
    bdf2:	4798      	blx	r3
    bdf4:	4603      	mov	r3, r0
    bdf6:	2b00      	cmp	r3, #0
    bdf8:	d006      	beq.n	be08 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    bdfa:	68f8      	ldr	r0, [r7, #12]
    bdfc:	4b20      	ldr	r3, [pc, #128]	; (be80 <_usb_d_dev_init+0xc8>)
    bdfe:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    be00:	2102      	movs	r1, #2
    be02:	68f8      	ldr	r0, [r7, #12]
    be04:	4b1f      	ldr	r3, [pc, #124]	; (be84 <_usb_d_dev_init+0xcc>)
    be06:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    be08:	2101      	movs	r1, #1
    be0a:	68f8      	ldr	r0, [r7, #12]
    be0c:	4b1e      	ldr	r3, [pc, #120]	; (be88 <_usb_d_dev_init+0xd0>)
    be0e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    be10:	2101      	movs	r1, #1
    be12:	68f8      	ldr	r0, [r7, #12]
    be14:	4b1b      	ldr	r3, [pc, #108]	; (be84 <_usb_d_dev_init+0xcc>)
    be16:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    be18:	4b1c      	ldr	r3, [pc, #112]	; (be8c <_usb_d_dev_init+0xd4>)
    be1a:	4a1d      	ldr	r2, [pc, #116]	; (be90 <_usb_d_dev_init+0xd8>)
    be1c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    be1e:	4b1b      	ldr	r3, [pc, #108]	; (be8c <_usb_d_dev_init+0xd4>)
    be20:	4a1b      	ldr	r2, [pc, #108]	; (be90 <_usb_d_dev_init+0xd8>)
    be22:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    be24:	4b19      	ldr	r3, [pc, #100]	; (be8c <_usb_d_dev_init+0xd4>)
    be26:	4a1a      	ldr	r2, [pc, #104]	; (be90 <_usb_d_dev_init+0xd8>)
    be28:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    be2a:	4b18      	ldr	r3, [pc, #96]	; (be8c <_usb_d_dev_init+0xd4>)
    be2c:	4a18      	ldr	r2, [pc, #96]	; (be90 <_usb_d_dev_init+0xd8>)
    be2e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    be30:	4b16      	ldr	r3, [pc, #88]	; (be8c <_usb_d_dev_init+0xd4>)
    be32:	4a17      	ldr	r2, [pc, #92]	; (be90 <_usb_d_dev_init+0xd8>)
    be34:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    be36:	4b17      	ldr	r3, [pc, #92]	; (be94 <_usb_d_dev_init+0xdc>)
    be38:	4798      	blx	r3

	_usb_load_calib();
    be3a:	4b17      	ldr	r3, [pc, #92]	; (be98 <_usb_d_dev_init+0xe0>)
    be3c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    be3e:	2104      	movs	r1, #4
    be40:	68f8      	ldr	r0, [r7, #12]
    be42:	4b11      	ldr	r3, [pc, #68]	; (be88 <_usb_d_dev_init+0xd0>)
    be44:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    be46:	4b15      	ldr	r3, [pc, #84]	; (be9c <_usb_d_dev_init+0xe4>)
    be48:	4619      	mov	r1, r3
    be4a:	68f8      	ldr	r0, [r7, #12]
    be4c:	4b14      	ldr	r3, [pc, #80]	; (bea0 <_usb_d_dev_init+0xe8>)
    be4e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    be50:	7afb      	ldrb	r3, [r7, #11]
    be52:	f107 0210 	add.w	r2, r7, #16
    be56:	4413      	add	r3, r2
    be58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    be5c:	f043 0301 	orr.w	r3, r3, #1
    be60:	b2db      	uxtb	r3, r3
    be62:	b29b      	uxth	r3, r3
    be64:	4619      	mov	r1, r3
    be66:	68f8      	ldr	r0, [r7, #12]
    be68:	4b0e      	ldr	r3, [pc, #56]	; (bea4 <_usb_d_dev_init+0xec>)
    be6a:	4798      	blx	r3

	return ERR_NONE;
    be6c:	2300      	movs	r3, #0
}
    be6e:	4618      	mov	r0, r3
    be70:	3710      	adds	r7, #16
    be72:	46bd      	mov	sp, r7
    be74:	bd80      	pop	{r7, pc}
    be76:	bf00      	nop
    be78:	0000a451 	.word	0x0000a451
    be7c:	0000a7a1 	.word	0x0000a7a1
    be80:	0000a775 	.word	0x0000a775
    be84:	0000a427 	.word	0x0000a427
    be88:	0000a7d1 	.word	0x0000a7d1
    be8c:	200025b4 	.word	0x200025b4
    be90:	0000a899 	.word	0x0000a899
    be94:	0000bd3d 	.word	0x0000bd3d
    be98:	0000a8b1 	.word	0x0000a8b1
    be9c:	2000267c 	.word	0x2000267c
    bea0:	0000a87d 	.word	0x0000a87d
    bea4:	0000a841 	.word	0x0000a841

0000bea8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    bea8:	b580      	push	{r7, lr}
    beaa:	b082      	sub	sp, #8
    beac:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    beae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    beb2:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    beb4:	2103      	movs	r1, #3
    beb6:	6878      	ldr	r0, [r7, #4]
    beb8:	4b17      	ldr	r3, [pc, #92]	; (bf18 <_usb_d_dev_enable+0x70>)
    beba:	4798      	blx	r3
    bebc:	4603      	mov	r3, r0
    bebe:	2b00      	cmp	r3, #0
    bec0:	d002      	beq.n	bec8 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    bec2:	f06f 0310 	mvn.w	r3, #16
    bec6:	e023      	b.n	bf10 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    bec8:	6878      	ldr	r0, [r7, #4]
    beca:	4b14      	ldr	r3, [pc, #80]	; (bf1c <_usb_d_dev_enable+0x74>)
    becc:	4798      	blx	r3
    bece:	4603      	mov	r3, r0
    bed0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    bed2:	78fb      	ldrb	r3, [r7, #3]
    bed4:	f003 0302 	and.w	r3, r3, #2
    bed8:	2b00      	cmp	r3, #0
    beda:	d107      	bne.n	beec <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    bedc:	78fb      	ldrb	r3, [r7, #3]
    bede:	f043 0302 	orr.w	r3, r3, #2
    bee2:	b2db      	uxtb	r3, r3
    bee4:	4619      	mov	r1, r3
    bee6:	6878      	ldr	r0, [r7, #4]
    bee8:	4b0d      	ldr	r3, [pc, #52]	; (bf20 <_usb_d_dev_enable+0x78>)
    beea:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    beec:	2050      	movs	r0, #80	; 0x50
    beee:	4b0d      	ldr	r3, [pc, #52]	; (bf24 <_usb_d_dev_enable+0x7c>)
    bef0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    bef2:	2051      	movs	r0, #81	; 0x51
    bef4:	4b0b      	ldr	r3, [pc, #44]	; (bf24 <_usb_d_dev_enable+0x7c>)
    bef6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    bef8:	2052      	movs	r0, #82	; 0x52
    befa:	4b0a      	ldr	r3, [pc, #40]	; (bf24 <_usb_d_dev_enable+0x7c>)
    befc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    befe:	2053      	movs	r0, #83	; 0x53
    bf00:	4b08      	ldr	r3, [pc, #32]	; (bf24 <_usb_d_dev_enable+0x7c>)
    bf02:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    bf04:	f240 218d 	movw	r1, #653	; 0x28d
    bf08:	6878      	ldr	r0, [r7, #4]
    bf0a:	4b07      	ldr	r3, [pc, #28]	; (bf28 <_usb_d_dev_enable+0x80>)
    bf0c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    bf0e:	2300      	movs	r3, #0
}
    bf10:	4618      	mov	r0, r3
    bf12:	3708      	adds	r7, #8
    bf14:	46bd      	mov	sp, r7
    bf16:	bd80      	pop	{r7, pc}
    bf18:	0000a74b 	.word	0x0000a74b
    bf1c:	0000a7f9 	.word	0x0000a7f9
    bf20:	0000a7d1 	.word	0x0000a7d1
    bf24:	0000a35d 	.word	0x0000a35d
    bf28:	0000a6f5 	.word	0x0000a6f5

0000bf2c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    bf2c:	b580      	push	{r7, lr}
    bf2e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    bf30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bf34:	4b01      	ldr	r3, [pc, #4]	; (bf3c <_usb_d_dev_attach+0x10>)
    bf36:	4798      	blx	r3
}
    bf38:	bf00      	nop
    bf3a:	bd80      	pop	{r7, pc}
    bf3c:	0000a81d 	.word	0x0000a81d

0000bf40 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    bf40:	b580      	push	{r7, lr}
    bf42:	b082      	sub	sp, #8
    bf44:	af00      	add	r7, sp, #0
    bf46:	4603      	mov	r3, r0
    bf48:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    bf4a:	79fb      	ldrb	r3, [r7, #7]
    bf4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bf50:	b2db      	uxtb	r3, r3
    bf52:	4619      	mov	r1, r3
    bf54:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bf58:	4b02      	ldr	r3, [pc, #8]	; (bf64 <_usb_d_dev_set_address+0x24>)
    bf5a:	4798      	blx	r3
}
    bf5c:	bf00      	nop
    bf5e:	3708      	adds	r7, #8
    bf60:	46bd      	mov	sp, r7
    bf62:	bd80      	pop	{r7, pc}
    bf64:	0000a85f 	.word	0x0000a85f

0000bf68 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bf68:	b590      	push	{r4, r7, lr}
    bf6a:	b085      	sub	sp, #20
    bf6c:	af00      	add	r7, sp, #0
    bf6e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    bf70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf74:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bf76:	687b      	ldr	r3, [r7, #4]
    bf78:	7c9b      	ldrb	r3, [r3, #18]
    bf7a:	f003 030f 	and.w	r3, r3, #15
    bf7e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bf80:	687b      	ldr	r3, [r7, #4]
    bf82:	68db      	ldr	r3, [r3, #12]
    bf84:	461a      	mov	r2, r3
    bf86:	7afb      	ldrb	r3, [r7, #11]
    bf88:	2100      	movs	r1, #0
    bf8a:	4618      	mov	r0, r3
    bf8c:	4b0f      	ldr	r3, [pc, #60]	; (bfcc <_usb_d_dev_trans_setup+0x64>)
    bf8e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bf90:	687b      	ldr	r3, [r7, #4]
    bf92:	8a1b      	ldrh	r3, [r3, #16]
    bf94:	461a      	mov	r2, r3
    bf96:	7af8      	ldrb	r0, [r7, #11]
    bf98:	2300      	movs	r3, #0
    bf9a:	2100      	movs	r1, #0
    bf9c:	4c0c      	ldr	r4, [pc, #48]	; (bfd0 <_usb_d_dev_trans_setup+0x68>)
    bf9e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    bfa0:	7afb      	ldrb	r3, [r7, #11]
    bfa2:	22b0      	movs	r2, #176	; 0xb0
    bfa4:	4619      	mov	r1, r3
    bfa6:	68f8      	ldr	r0, [r7, #12]
    bfa8:	4b0a      	ldr	r3, [pc, #40]	; (bfd4 <_usb_d_dev_trans_setup+0x6c>)
    bfaa:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    bfac:	7afb      	ldrb	r3, [r7, #11]
    bfae:	2200      	movs	r2, #0
    bfb0:	2100      	movs	r1, #0
    bfb2:	4618      	mov	r0, r3
    bfb4:	4b08      	ldr	r3, [pc, #32]	; (bfd8 <_usb_d_dev_trans_setup+0x70>)
    bfb6:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    bfb8:	7afb      	ldrb	r3, [r7, #11]
    bfba:	2210      	movs	r2, #16
    bfbc:	4619      	mov	r1, r3
    bfbe:	68f8      	ldr	r0, [r7, #12]
    bfc0:	4b06      	ldr	r3, [pc, #24]	; (bfdc <_usb_d_dev_trans_setup+0x74>)
    bfc2:	4798      	blx	r3
}
    bfc4:	bf00      	nop
    bfc6:	3714      	adds	r7, #20
    bfc8:	46bd      	mov	sp, r7
    bfca:	bd90      	pop	{r4, r7, pc}
    bfcc:	0000acfd 	.word	0x0000acfd
    bfd0:	0000ae85 	.word	0x0000ae85
    bfd4:	0000a55d 	.word	0x0000a55d
    bfd8:	0000af55 	.word	0x0000af55
    bfdc:	0000a5b1 	.word	0x0000a5b1

0000bfe0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    bfe0:	b580      	push	{r7, lr}
    bfe2:	b088      	sub	sp, #32
    bfe4:	af00      	add	r7, sp, #0
    bfe6:	4603      	mov	r3, r0
    bfe8:	71fb      	strb	r3, [r7, #7]
    bfea:	460b      	mov	r3, r1
    bfec:	71bb      	strb	r3, [r7, #6]
    bfee:	4613      	mov	r3, r2
    bff0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    bff2:	79fb      	ldrb	r3, [r7, #7]
    bff4:	f003 030f 	and.w	r3, r3, #15
    bff8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    bffa:	79fb      	ldrb	r3, [r7, #7]
    bffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c000:	2b00      	cmp	r3, #0
    c002:	bf14      	ite	ne
    c004:	2301      	movne	r3, #1
    c006:	2300      	moveq	r3, #0
    c008:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c00a:	7fba      	ldrb	r2, [r7, #30]
    c00c:	7ffb      	ldrb	r3, [r7, #31]
    c00e:	4611      	mov	r1, r2
    c010:	4618      	mov	r0, r3
    c012:	4b3e      	ldr	r3, [pc, #248]	; (c10c <_usb_d_dev_ep_init+0x12c>)
    c014:	4798      	blx	r3
    c016:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    c018:	79bb      	ldrb	r3, [r7, #6]
    c01a:	f003 0303 	and.w	r3, r3, #3
    c01e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    c020:	7ffa      	ldrb	r2, [r7, #31]
    c022:	4613      	mov	r3, r2
    c024:	005b      	lsls	r3, r3, #1
    c026:	4413      	add	r3, r2
    c028:	009b      	lsls	r3, r3, #2
    c02a:	4a39      	ldr	r2, [pc, #228]	; (c110 <_usb_d_dev_ep_init+0x130>)
    c02c:	4413      	add	r3, r2
    c02e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    c030:	7ffb      	ldrb	r3, [r7, #31]
    c032:	2b04      	cmp	r3, #4
    c034:	d902      	bls.n	c03c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    c036:	f06f 0311 	mvn.w	r3, #17
    c03a:	e063      	b.n	c104 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    c03c:	69bb      	ldr	r3, [r7, #24]
    c03e:	7c9b      	ldrb	r3, [r3, #18]
    c040:	2bff      	cmp	r3, #255	; 0xff
    c042:	d002      	beq.n	c04a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    c044:	f06f 0313 	mvn.w	r3, #19
    c048:	e05c      	b.n	c104 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    c04a:	7dfb      	ldrb	r3, [r7, #23]
    c04c:	2b00      	cmp	r3, #0
    c04e:	d11f      	bne.n	c090 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    c050:	7fbb      	ldrb	r3, [r7, #30]
    c052:	2b00      	cmp	r3, #0
    c054:	bf14      	ite	ne
    c056:	2301      	movne	r3, #1
    c058:	2300      	moveq	r3, #0
    c05a:	b2db      	uxtb	r3, r3
    c05c:	f083 0301 	eor.w	r3, r3, #1
    c060:	b2db      	uxtb	r3, r3
    c062:	f003 0301 	and.w	r3, r3, #1
    c066:	b2da      	uxtb	r2, r3
    c068:	7ffb      	ldrb	r3, [r7, #31]
    c06a:	4611      	mov	r1, r2
    c06c:	4618      	mov	r0, r3
    c06e:	4b27      	ldr	r3, [pc, #156]	; (c10c <_usb_d_dev_ep_init+0x12c>)
    c070:	4798      	blx	r3
    c072:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    c074:	68fb      	ldr	r3, [r7, #12]
    c076:	7c9b      	ldrb	r3, [r3, #18]
    c078:	2bff      	cmp	r3, #255	; 0xff
    c07a:	d002      	beq.n	c082 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    c07c:	f06f 0313 	mvn.w	r3, #19
    c080:	e040      	b.n	c104 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    c082:	693b      	ldr	r3, [r7, #16]
    c084:	681b      	ldr	r3, [r3, #0]
    c086:	2b00      	cmp	r3, #0
    c088:	d102      	bne.n	c090 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    c08a:	f06f 0312 	mvn.w	r3, #18
    c08e:	e039      	b.n	c104 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c090:	7fbb      	ldrb	r3, [r7, #30]
    c092:	2b00      	cmp	r3, #0
    c094:	d007      	beq.n	c0a6 <_usb_d_dev_ep_init+0xc6>
    c096:	693b      	ldr	r3, [r7, #16]
    c098:	685b      	ldr	r3, [r3, #4]
    c09a:	2b00      	cmp	r3, #0
    c09c:	bf14      	ite	ne
    c09e:	2301      	movne	r3, #1
    c0a0:	2300      	moveq	r3, #0
    c0a2:	b2db      	uxtb	r3, r3
    c0a4:	e006      	b.n	c0b4 <_usb_d_dev_ep_init+0xd4>
    c0a6:	693b      	ldr	r3, [r7, #16]
    c0a8:	681b      	ldr	r3, [r3, #0]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	bf14      	ite	ne
    c0ae:	2301      	movne	r3, #1
    c0b0:	2300      	moveq	r3, #0
    c0b2:	b2db      	uxtb	r3, r3
    c0b4:	2b00      	cmp	r3, #0
    c0b6:	d00f      	beq.n	c0d8 <_usb_d_dev_ep_init+0xf8>
    c0b8:	7fbb      	ldrb	r3, [r7, #30]
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	d003      	beq.n	c0c6 <_usb_d_dev_ep_init+0xe6>
    c0be:	693b      	ldr	r3, [r7, #16]
    c0c0:	895b      	ldrh	r3, [r3, #10]
    c0c2:	461a      	mov	r2, r3
    c0c4:	e002      	b.n	c0cc <_usb_d_dev_ep_init+0xec>
    c0c6:	693b      	ldr	r3, [r7, #16]
    c0c8:	891b      	ldrh	r3, [r3, #8]
    c0ca:	461a      	mov	r2, r3
    c0cc:	88bb      	ldrh	r3, [r7, #4]
    c0ce:	429a      	cmp	r2, r3
    c0d0:	da02      	bge.n	c0d8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    c0d2:	f06f 0312 	mvn.w	r3, #18
    c0d6:	e015      	b.n	c104 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c0d8:	7fbb      	ldrb	r3, [r7, #30]
    c0da:	2b00      	cmp	r3, #0
    c0dc:	d002      	beq.n	c0e4 <_usb_d_dev_ep_init+0x104>
    c0de:	693b      	ldr	r3, [r7, #16]
    c0e0:	685b      	ldr	r3, [r3, #4]
    c0e2:	e001      	b.n	c0e8 <_usb_d_dev_ep_init+0x108>
    c0e4:	693b      	ldr	r3, [r7, #16]
    c0e6:	681b      	ldr	r3, [r3, #0]
    c0e8:	69ba      	ldr	r2, [r7, #24]
    c0ea:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    c0ec:	69bb      	ldr	r3, [r7, #24]
    c0ee:	88ba      	ldrh	r2, [r7, #4]
    c0f0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    c0f2:	7dfb      	ldrb	r3, [r7, #23]
    c0f4:	3301      	adds	r3, #1
    c0f6:	b2da      	uxtb	r2, r3
    c0f8:	69bb      	ldr	r3, [r7, #24]
    c0fa:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    c0fc:	69bb      	ldr	r3, [r7, #24]
    c0fe:	79fa      	ldrb	r2, [r7, #7]
    c100:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    c102:	2300      	movs	r3, #0
}
    c104:	4618      	mov	r0, r3
    c106:	3720      	adds	r7, #32
    c108:	46bd      	mov	sp, r7
    c10a:	bd80      	pop	{r7, pc}
    c10c:	0000b011 	.word	0x0000b011
    c110:	0001b9bc 	.word	0x0001b9bc

0000c114 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    c114:	b580      	push	{r7, lr}
    c116:	b086      	sub	sp, #24
    c118:	af00      	add	r7, sp, #0
    c11a:	4603      	mov	r3, r0
    c11c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    c11e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c122:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    c124:	79fb      	ldrb	r3, [r7, #7]
    c126:	f003 030f 	and.w	r3, r3, #15
    c12a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c12c:	79fb      	ldrb	r3, [r7, #7]
    c12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c132:	2b00      	cmp	r3, #0
    c134:	bf14      	ite	ne
    c136:	2301      	movne	r3, #1
    c138:	2300      	moveq	r3, #0
    c13a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c13c:	7cba      	ldrb	r2, [r7, #18]
    c13e:	7cfb      	ldrb	r3, [r7, #19]
    c140:	4611      	mov	r1, r2
    c142:	4618      	mov	r0, r3
    c144:	4b2a      	ldr	r3, [pc, #168]	; (c1f0 <_usb_d_dev_ep_deinit+0xdc>)
    c146:	4798      	blx	r3
    c148:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c14a:	7cfb      	ldrb	r3, [r7, #19]
    c14c:	2b04      	cmp	r3, #4
    c14e:	d84a      	bhi.n	c1e6 <_usb_d_dev_ep_deinit+0xd2>
    c150:	68fb      	ldr	r3, [r7, #12]
    c152:	7c9b      	ldrb	r3, [r3, #18]
    c154:	2bff      	cmp	r3, #255	; 0xff
    c156:	d046      	beq.n	c1e6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    c158:	7cbb      	ldrb	r3, [r7, #18]
    c15a:	2203      	movs	r2, #3
    c15c:	4619      	mov	r1, r3
    c15e:	68f8      	ldr	r0, [r7, #12]
    c160:	4b24      	ldr	r3, [pc, #144]	; (c1f4 <_usb_d_dev_ep_deinit+0xe0>)
    c162:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c164:	68fb      	ldr	r3, [r7, #12]
    c166:	7cdb      	ldrb	r3, [r3, #19]
    c168:	f003 0307 	and.w	r3, r3, #7
    c16c:	b2db      	uxtb	r3, r3
    c16e:	2b01      	cmp	r3, #1
    c170:	d107      	bne.n	c182 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    c172:	79fb      	ldrb	r3, [r7, #7]
    c174:	697a      	ldr	r2, [r7, #20]
    c176:	3308      	adds	r3, #8
    c178:	015b      	lsls	r3, r3, #5
    c17a:	4413      	add	r3, r2
    c17c:	2200      	movs	r2, #0
    c17e:	701a      	strb	r2, [r3, #0]
    c180:	e02a      	b.n	c1d8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    c182:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c186:	2b00      	cmp	r3, #0
    c188:	da15      	bge.n	c1b6 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    c18a:	79fb      	ldrb	r3, [r7, #7]
    c18c:	f003 030f 	and.w	r3, r3, #15
    c190:	79fa      	ldrb	r2, [r7, #7]
    c192:	f002 020f 	and.w	r2, r2, #15
    c196:	6979      	ldr	r1, [r7, #20]
    c198:	3208      	adds	r2, #8
    c19a:	0152      	lsls	r2, r2, #5
    c19c:	440a      	add	r2, r1
    c19e:	7812      	ldrb	r2, [r2, #0]
    c1a0:	b2d2      	uxtb	r2, r2
    c1a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    c1a6:	b2d1      	uxtb	r1, r2
    c1a8:	697a      	ldr	r2, [r7, #20]
    c1aa:	3308      	adds	r3, #8
    c1ac:	015b      	lsls	r3, r3, #5
    c1ae:	4413      	add	r3, r2
    c1b0:	460a      	mov	r2, r1
    c1b2:	701a      	strb	r2, [r3, #0]
    c1b4:	e010      	b.n	c1d8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c1b6:	79fb      	ldrb	r3, [r7, #7]
    c1b8:	79fa      	ldrb	r2, [r7, #7]
    c1ba:	6979      	ldr	r1, [r7, #20]
    c1bc:	3208      	adds	r2, #8
    c1be:	0152      	lsls	r2, r2, #5
    c1c0:	440a      	add	r2, r1
    c1c2:	7812      	ldrb	r2, [r2, #0]
    c1c4:	b2d2      	uxtb	r2, r2
    c1c6:	f022 0207 	bic.w	r2, r2, #7
    c1ca:	b2d1      	uxtb	r1, r2
    c1cc:	697a      	ldr	r2, [r7, #20]
    c1ce:	3308      	adds	r3, #8
    c1d0:	015b      	lsls	r3, r3, #5
    c1d2:	4413      	add	r3, r2
    c1d4:	460a      	mov	r2, r1
    c1d6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    c1d8:	68fb      	ldr	r3, [r7, #12]
    c1da:	2200      	movs	r2, #0
    c1dc:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    c1de:	68fb      	ldr	r3, [r7, #12]
    c1e0:	22ff      	movs	r2, #255	; 0xff
    c1e2:	749a      	strb	r2, [r3, #18]
    c1e4:	e000      	b.n	c1e8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    c1e6:	bf00      	nop
}
    c1e8:	3718      	adds	r7, #24
    c1ea:	46bd      	mov	sp, r7
    c1ec:	bd80      	pop	{r7, pc}
    c1ee:	bf00      	nop
    c1f0:	0000b011 	.word	0x0000b011
    c1f4:	0000c649 	.word	0x0000c649

0000c1f8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    c1f8:	b5b0      	push	{r4, r5, r7, lr}
    c1fa:	b088      	sub	sp, #32
    c1fc:	af00      	add	r7, sp, #0
    c1fe:	4603      	mov	r3, r0
    c200:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    c202:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c206:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    c208:	79fb      	ldrb	r3, [r7, #7]
    c20a:	f003 030f 	and.w	r3, r3, #15
    c20e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    c210:	79fb      	ldrb	r3, [r7, #7]
    c212:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c216:	2b00      	cmp	r3, #0
    c218:	bf14      	ite	ne
    c21a:	2301      	movne	r3, #1
    c21c:	2300      	moveq	r3, #0
    c21e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c220:	7eba      	ldrb	r2, [r7, #26]
    c222:	7efb      	ldrb	r3, [r7, #27]
    c224:	4611      	mov	r1, r2
    c226:	4618      	mov	r0, r3
    c228:	4b70      	ldr	r3, [pc, #448]	; (c3ec <_usb_d_dev_ep_enable+0x1f4>)
    c22a:	4798      	blx	r3
    c22c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    c22e:	7efb      	ldrb	r3, [r7, #27]
    c230:	4619      	mov	r1, r3
    c232:	69f8      	ldr	r0, [r7, #28]
    c234:	4b6e      	ldr	r3, [pc, #440]	; (c3f0 <_usb_d_dev_ep_enable+0x1f8>)
    c236:	4798      	blx	r3
    c238:	4603      	mov	r3, r0
    c23a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c23c:	7efb      	ldrb	r3, [r7, #27]
    c23e:	2b04      	cmp	r3, #4
    c240:	d803      	bhi.n	c24a <_usb_d_dev_ep_enable+0x52>
    c242:	697b      	ldr	r3, [r7, #20]
    c244:	7c9b      	ldrb	r3, [r3, #18]
    c246:	2bff      	cmp	r3, #255	; 0xff
    c248:	d102      	bne.n	c250 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    c24a:	f06f 0311 	mvn.w	r3, #17
    c24e:	e0c8      	b.n	c3e2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c250:	7efb      	ldrb	r3, [r7, #27]
    c252:	015b      	lsls	r3, r3, #5
    c254:	4a67      	ldr	r2, [pc, #412]	; (c3f4 <_usb_d_dev_ep_enable+0x1fc>)
    c256:	4413      	add	r3, r2
    c258:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c25a:	697b      	ldr	r3, [r7, #20]
    c25c:	7cdb      	ldrb	r3, [r3, #19]
    c25e:	f003 0307 	and.w	r3, r3, #7
    c262:	b2db      	uxtb	r3, r3
    c264:	2b01      	cmp	r3, #1
    c266:	d14b      	bne.n	c300 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c268:	7cfb      	ldrb	r3, [r7, #19]
    c26a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    c26e:	2b00      	cmp	r3, #0
    c270:	d002      	beq.n	c278 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    c272:	f06f 0313 	mvn.w	r3, #19
    c276:	e0b4      	b.n	c3e2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    c278:	7efb      	ldrb	r3, [r7, #27]
    c27a:	2211      	movs	r2, #17
    c27c:	4619      	mov	r1, r3
    c27e:	69f8      	ldr	r0, [r7, #28]
    c280:	4b5d      	ldr	r3, [pc, #372]	; (c3f8 <_usb_d_dev_ep_enable+0x200>)
    c282:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c284:	697b      	ldr	r3, [r7, #20]
    c286:	8a1b      	ldrh	r3, [r3, #16]
    c288:	039b      	lsls	r3, r3, #14
    c28a:	4c5c      	ldr	r4, [pc, #368]	; (c3fc <_usb_d_dev_ep_enable+0x204>)
    c28c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c28e:	697b      	ldr	r3, [r7, #20]
    c290:	8a1b      	ldrh	r3, [r3, #16]
    c292:	4618      	mov	r0, r3
    c294:	4b5a      	ldr	r3, [pc, #360]	; (c400 <_usb_d_dev_ep_enable+0x208>)
    c296:	4798      	blx	r3
    c298:	4603      	mov	r3, r0
    c29a:	071b      	lsls	r3, r3, #28
    c29c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c2a0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c2a4:	68fb      	ldr	r3, [r7, #12]
    c2a6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    c2a8:	68fb      	ldr	r3, [r7, #12]
    c2aa:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c2ae:	697b      	ldr	r3, [r7, #20]
    c2b0:	8a1b      	ldrh	r3, [r3, #16]
    c2b2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c2b6:	697b      	ldr	r3, [r7, #20]
    c2b8:	8a1b      	ldrh	r3, [r3, #16]
    c2ba:	4618      	mov	r0, r3
    c2bc:	4b50      	ldr	r3, [pc, #320]	; (c400 <_usb_d_dev_ep_enable+0x208>)
    c2be:	4798      	blx	r3
    c2c0:	4603      	mov	r3, r0
    c2c2:	071b      	lsls	r3, r3, #28
    c2c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c2c8:	432b      	orrs	r3, r5
    c2ca:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c2cc:	7efb      	ldrb	r3, [r7, #27]
    c2ce:	2200      	movs	r2, #0
    c2d0:	2100      	movs	r1, #0
    c2d2:	4618      	mov	r0, r3
    c2d4:	4b4b      	ldr	r3, [pc, #300]	; (c404 <_usb_d_dev_ep_enable+0x20c>)
    c2d6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c2d8:	7efb      	ldrb	r3, [r7, #27]
    c2da:	2200      	movs	r2, #0
    c2dc:	2101      	movs	r1, #1
    c2de:	4618      	mov	r0, r3
    c2e0:	4b49      	ldr	r3, [pc, #292]	; (c408 <_usb_d_dev_ep_enable+0x210>)
    c2e2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c2e4:	7efb      	ldrb	r3, [r7, #27]
    c2e6:	2100      	movs	r1, #0
    c2e8:	4618      	mov	r0, r3
    c2ea:	4b48      	ldr	r3, [pc, #288]	; (c40c <_usb_d_dev_ep_enable+0x214>)
    c2ec:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c2ee:	7efb      	ldrb	r3, [r7, #27]
    c2f0:	2101      	movs	r1, #1
    c2f2:	4618      	mov	r0, r3
    c2f4:	4b45      	ldr	r3, [pc, #276]	; (c40c <_usb_d_dev_ep_enable+0x214>)
    c2f6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c2f8:	6978      	ldr	r0, [r7, #20]
    c2fa:	4b45      	ldr	r3, [pc, #276]	; (c410 <_usb_d_dev_ep_enable+0x218>)
    c2fc:	4798      	blx	r3
    c2fe:	e06f      	b.n	c3e0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c300:	7ebb      	ldrb	r3, [r7, #26]
    c302:	2b00      	cmp	r3, #0
    c304:	d038      	beq.n	c378 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c306:	7cfb      	ldrb	r3, [r7, #19]
    c308:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c30c:	2b00      	cmp	r3, #0
    c30e:	d002      	beq.n	c316 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c310:	f06f 0313 	mvn.w	r3, #19
    c314:	e065      	b.n	c3e2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c316:	697b      	ldr	r3, [r7, #20]
    c318:	7cdb      	ldrb	r3, [r3, #19]
    c31a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c31e:	b2db      	uxtb	r3, r3
    c320:	011b      	lsls	r3, r3, #4
    c322:	b2db      	uxtb	r3, r3
    c324:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c328:	b2da      	uxtb	r2, r3
    c32a:	7cfb      	ldrb	r3, [r7, #19]
    c32c:	4313      	orrs	r3, r2
    c32e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c330:	7cfa      	ldrb	r2, [r7, #19]
    c332:	7efb      	ldrb	r3, [r7, #27]
    c334:	4619      	mov	r1, r3
    c336:	69f8      	ldr	r0, [r7, #28]
    c338:	4b2f      	ldr	r3, [pc, #188]	; (c3f8 <_usb_d_dev_ep_enable+0x200>)
    c33a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c33c:	68fb      	ldr	r3, [r7, #12]
    c33e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c342:	697b      	ldr	r3, [r7, #20]
    c344:	8a1b      	ldrh	r3, [r3, #16]
    c346:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c34a:	697b      	ldr	r3, [r7, #20]
    c34c:	8a1b      	ldrh	r3, [r3, #16]
    c34e:	4618      	mov	r0, r3
    c350:	4b2b      	ldr	r3, [pc, #172]	; (c400 <_usb_d_dev_ep_enable+0x208>)
    c352:	4798      	blx	r3
    c354:	4603      	mov	r3, r0
    c356:	071b      	lsls	r3, r3, #28
    c358:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c35c:	432b      	orrs	r3, r5
    c35e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c360:	7efb      	ldrb	r3, [r7, #27]
    c362:	2200      	movs	r2, #0
    c364:	2101      	movs	r1, #1
    c366:	4618      	mov	r0, r3
    c368:	4b27      	ldr	r3, [pc, #156]	; (c408 <_usb_d_dev_ep_enable+0x210>)
    c36a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c36c:	7efb      	ldrb	r3, [r7, #27]
    c36e:	2101      	movs	r1, #1
    c370:	4618      	mov	r0, r3
    c372:	4b26      	ldr	r3, [pc, #152]	; (c40c <_usb_d_dev_ep_enable+0x214>)
    c374:	4798      	blx	r3
    c376:	e033      	b.n	c3e0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c378:	7cfb      	ldrb	r3, [r7, #19]
    c37a:	f003 0307 	and.w	r3, r3, #7
    c37e:	2b00      	cmp	r3, #0
    c380:	d002      	beq.n	c388 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c382:	f06f 0313 	mvn.w	r3, #19
    c386:	e02c      	b.n	c3e2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c388:	697b      	ldr	r3, [r7, #20]
    c38a:	7cdb      	ldrb	r3, [r3, #19]
    c38c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c390:	b2db      	uxtb	r3, r3
    c392:	461a      	mov	r2, r3
    c394:	7cfb      	ldrb	r3, [r7, #19]
    c396:	4313      	orrs	r3, r2
    c398:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c39a:	7cfa      	ldrb	r2, [r7, #19]
    c39c:	7efb      	ldrb	r3, [r7, #27]
    c39e:	4619      	mov	r1, r3
    c3a0:	69f8      	ldr	r0, [r7, #28]
    c3a2:	4b15      	ldr	r3, [pc, #84]	; (c3f8 <_usb_d_dev_ep_enable+0x200>)
    c3a4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c3a6:	697b      	ldr	r3, [r7, #20]
    c3a8:	8a1b      	ldrh	r3, [r3, #16]
    c3aa:	039b      	lsls	r3, r3, #14
    c3ac:	4c13      	ldr	r4, [pc, #76]	; (c3fc <_usb_d_dev_ep_enable+0x204>)
    c3ae:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c3b0:	697b      	ldr	r3, [r7, #20]
    c3b2:	8a1b      	ldrh	r3, [r3, #16]
    c3b4:	4618      	mov	r0, r3
    c3b6:	4b12      	ldr	r3, [pc, #72]	; (c400 <_usb_d_dev_ep_enable+0x208>)
    c3b8:	4798      	blx	r3
    c3ba:	4603      	mov	r3, r0
    c3bc:	071b      	lsls	r3, r3, #28
    c3be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c3c2:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c3c6:	68fb      	ldr	r3, [r7, #12]
    c3c8:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c3ca:	7efb      	ldrb	r3, [r7, #27]
    c3cc:	2200      	movs	r2, #0
    c3ce:	2100      	movs	r1, #0
    c3d0:	4618      	mov	r0, r3
    c3d2:	4b0c      	ldr	r3, [pc, #48]	; (c404 <_usb_d_dev_ep_enable+0x20c>)
    c3d4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c3d6:	7efb      	ldrb	r3, [r7, #27]
    c3d8:	2100      	movs	r1, #0
    c3da:	4618      	mov	r0, r3
    c3dc:	4b0b      	ldr	r3, [pc, #44]	; (c40c <_usb_d_dev_ep_enable+0x214>)
    c3de:	4798      	blx	r3
	}

	return USB_OK;
    c3e0:	2300      	movs	r3, #0
}
    c3e2:	4618      	mov	r0, r3
    c3e4:	3720      	adds	r7, #32
    c3e6:	46bd      	mov	sp, r7
    c3e8:	bdb0      	pop	{r4, r5, r7, pc}
    c3ea:	bf00      	nop
    c3ec:	0000b011 	.word	0x0000b011
    c3f0:	0000a697 	.word	0x0000a697
    c3f4:	2000267c 	.word	0x2000267c
    c3f8:	0000a66d 	.word	0x0000a66d
    c3fc:	0fffc000 	.word	0x0fffc000
    c400:	0000afad 	.word	0x0000afad
    c404:	0000af55 	.word	0x0000af55
    c408:	0000aefd 	.word	0x0000aefd
    c40c:	0000aec5 	.word	0x0000aec5
    c410:	0000bf69 	.word	0x0000bf69

0000c414 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c414:	b580      	push	{r7, lr}
    c416:	b084      	sub	sp, #16
    c418:	af00      	add	r7, sp, #0
    c41a:	6078      	str	r0, [r7, #4]
    c41c:	460b      	mov	r3, r1
    c41e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c420:	687b      	ldr	r3, [r7, #4]
    c422:	7c9b      	ldrb	r3, [r3, #18]
    c424:	f003 030f 	and.w	r3, r3, #15
    c428:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c42a:	78fa      	ldrb	r2, [r7, #3]
    c42c:	7bfb      	ldrb	r3, [r7, #15]
    c42e:	4611      	mov	r1, r2
    c430:	4618      	mov	r0, r3
    c432:	4b03      	ldr	r3, [pc, #12]	; (c440 <_usb_d_dev_ep_stall_get+0x2c>)
    c434:	4798      	blx	r3
    c436:	4603      	mov	r3, r0
}
    c438:	4618      	mov	r0, r3
    c43a:	3710      	adds	r7, #16
    c43c:	46bd      	mov	sp, r7
    c43e:	bd80      	pop	{r7, pc}
    c440:	0000ab05 	.word	0x0000ab05

0000c444 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c444:	b580      	push	{r7, lr}
    c446:	b084      	sub	sp, #16
    c448:	af00      	add	r7, sp, #0
    c44a:	6078      	str	r0, [r7, #4]
    c44c:	460b      	mov	r3, r1
    c44e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	7c9b      	ldrb	r3, [r3, #18]
    c454:	f003 030f 	and.w	r3, r3, #15
    c458:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c45a:	78f9      	ldrb	r1, [r7, #3]
    c45c:	7bfb      	ldrb	r3, [r7, #15]
    c45e:	2201      	movs	r2, #1
    c460:	4618      	mov	r0, r3
    c462:	4b0a      	ldr	r3, [pc, #40]	; (c48c <_usb_d_dev_ep_stall_set+0x48>)
    c464:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c466:	78fb      	ldrb	r3, [r7, #3]
    c468:	2220      	movs	r2, #32
    c46a:	409a      	lsls	r2, r3
    c46c:	7bfb      	ldrb	r3, [r7, #15]
    c46e:	4611      	mov	r1, r2
    c470:	4618      	mov	r0, r3
    c472:	4b07      	ldr	r3, [pc, #28]	; (c490 <_usb_d_dev_ep_stall_set+0x4c>)
    c474:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c476:	687a      	ldr	r2, [r7, #4]
    c478:	7cd3      	ldrb	r3, [r2, #19]
    c47a:	f043 0308 	orr.w	r3, r3, #8
    c47e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c480:	2300      	movs	r3, #0
}
    c482:	4618      	mov	r0, r3
    c484:	3710      	adds	r7, #16
    c486:	46bd      	mov	sp, r7
    c488:	bd80      	pop	{r7, pc}
    c48a:	bf00      	nop
    c48c:	0000aaad 	.word	0x0000aaad
    c490:	0000aa2d 	.word	0x0000aa2d

0000c494 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c494:	b580      	push	{r7, lr}
    c496:	b084      	sub	sp, #16
    c498:	af00      	add	r7, sp, #0
    c49a:	6078      	str	r0, [r7, #4]
    c49c:	460b      	mov	r3, r1
    c49e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c4a0:	687b      	ldr	r3, [r7, #4]
    c4a2:	7c9b      	ldrb	r3, [r3, #18]
    c4a4:	f003 030f 	and.w	r3, r3, #15
    c4a8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c4aa:	78fa      	ldrb	r2, [r7, #3]
    c4ac:	7bfb      	ldrb	r3, [r7, #15]
    c4ae:	4611      	mov	r1, r2
    c4b0:	4618      	mov	r0, r3
    c4b2:	4b28      	ldr	r3, [pc, #160]	; (c554 <_usb_d_dev_ep_stall_clr+0xc0>)
    c4b4:	4798      	blx	r3
    c4b6:	4603      	mov	r3, r0
    c4b8:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c4ba:	7bbb      	ldrb	r3, [r7, #14]
    c4bc:	f083 0301 	eor.w	r3, r3, #1
    c4c0:	b2db      	uxtb	r3, r3
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	d001      	beq.n	c4ca <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c4c6:	2300      	movs	r3, #0
    c4c8:	e040      	b.n	c54c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c4ca:	78f9      	ldrb	r1, [r7, #3]
    c4cc:	7bfb      	ldrb	r3, [r7, #15]
    c4ce:	2200      	movs	r2, #0
    c4d0:	4618      	mov	r0, r3
    c4d2:	4b21      	ldr	r3, [pc, #132]	; (c558 <_usb_d_dev_ep_stall_clr+0xc4>)
    c4d4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c4d6:	78fb      	ldrb	r3, [r7, #3]
    c4d8:	2220      	movs	r2, #32
    c4da:	409a      	lsls	r2, r3
    c4dc:	7bfb      	ldrb	r3, [r7, #15]
    c4de:	4611      	mov	r1, r2
    c4e0:	4618      	mov	r0, r3
    c4e2:	4b1e      	ldr	r3, [pc, #120]	; (c55c <_usb_d_dev_ep_stall_clr+0xc8>)
    c4e4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c4e6:	78fa      	ldrb	r2, [r7, #3]
    c4e8:	7bfb      	ldrb	r3, [r7, #15]
    c4ea:	4611      	mov	r1, r2
    c4ec:	4618      	mov	r0, r3
    c4ee:	4b1c      	ldr	r3, [pc, #112]	; (c560 <_usb_d_dev_ep_stall_clr+0xcc>)
    c4f0:	4798      	blx	r3
    c4f2:	4603      	mov	r3, r0
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d00b      	beq.n	c510 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c4f8:	78fa      	ldrb	r2, [r7, #3]
    c4fa:	7bfb      	ldrb	r3, [r7, #15]
    c4fc:	4611      	mov	r1, r2
    c4fe:	4618      	mov	r0, r3
    c500:	4b18      	ldr	r3, [pc, #96]	; (c564 <_usb_d_dev_ep_stall_clr+0xd0>)
    c502:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c504:	78f9      	ldrb	r1, [r7, #3]
    c506:	7bfb      	ldrb	r3, [r7, #15]
    c508:	2200      	movs	r2, #0
    c50a:	4618      	mov	r0, r3
    c50c:	4b16      	ldr	r3, [pc, #88]	; (c568 <_usb_d_dev_ep_stall_clr+0xd4>)
    c50e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	7cdb      	ldrb	r3, [r3, #19]
    c514:	f003 0307 	and.w	r3, r3, #7
    c518:	b2db      	uxtb	r3, r3
    c51a:	2b01      	cmp	r3, #1
    c51c:	d110      	bne.n	c540 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c51e:	7bfb      	ldrb	r3, [r7, #15]
    c520:	4619      	mov	r1, r3
    c522:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c526:	4b11      	ldr	r3, [pc, #68]	; (c56c <_usb_d_dev_ep_stall_clr+0xd8>)
    c528:	4798      	blx	r3
    c52a:	4603      	mov	r3, r0
    c52c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c530:	2b00      	cmp	r3, #0
    c532:	d10a      	bne.n	c54a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c534:	687a      	ldr	r2, [r7, #4]
    c536:	7cd3      	ldrb	r3, [r2, #19]
    c538:	f36f 03c3 	bfc	r3, #3, #1
    c53c:	74d3      	strb	r3, [r2, #19]
    c53e:	e004      	b.n	c54a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c540:	687a      	ldr	r2, [r7, #4]
    c542:	7cd3      	ldrb	r3, [r2, #19]
    c544:	f36f 03c3 	bfc	r3, #3, #1
    c548:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c54a:	2300      	movs	r3, #0
}
    c54c:	4618      	mov	r0, r3
    c54e:	3710      	adds	r7, #16
    c550:	46bd      	mov	sp, r7
    c552:	bd80      	pop	{r7, pc}
    c554:	0000ab05 	.word	0x0000ab05
    c558:	0000aaad 	.word	0x0000aaad
    c55c:	0000aa55 	.word	0x0000aa55
    c560:	0000ab49 	.word	0x0000ab49
    c564:	0000ab8d 	.word	0x0000ab8d
    c568:	0000ac79 	.word	0x0000ac79
    c56c:	0000a535 	.word	0x0000a535

0000c570 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c570:	b580      	push	{r7, lr}
    c572:	b086      	sub	sp, #24
    c574:	af00      	add	r7, sp, #0
    c576:	4603      	mov	r3, r0
    c578:	460a      	mov	r2, r1
    c57a:	71fb      	strb	r3, [r7, #7]
    c57c:	4613      	mov	r3, r2
    c57e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c580:	79fb      	ldrb	r3, [r7, #7]
    c582:	f003 030f 	and.w	r3, r3, #15
    c586:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c588:	79fb      	ldrb	r3, [r7, #7]
    c58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c58e:	2b00      	cmp	r3, #0
    c590:	bf14      	ite	ne
    c592:	2301      	movne	r3, #1
    c594:	2300      	moveq	r3, #0
    c596:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c598:	7cba      	ldrb	r2, [r7, #18]
    c59a:	7cfb      	ldrb	r3, [r7, #19]
    c59c:	4611      	mov	r1, r2
    c59e:	4618      	mov	r0, r3
    c5a0:	4b13      	ldr	r3, [pc, #76]	; (c5f0 <_usb_d_dev_ep_stall+0x80>)
    c5a2:	4798      	blx	r3
    c5a4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c5a6:	7cfb      	ldrb	r3, [r7, #19]
    c5a8:	2b04      	cmp	r3, #4
    c5aa:	d902      	bls.n	c5b2 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c5ac:	f06f 0311 	mvn.w	r3, #17
    c5b0:	e01a      	b.n	c5e8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c5b2:	79bb      	ldrb	r3, [r7, #6]
    c5b4:	2b01      	cmp	r3, #1
    c5b6:	d106      	bne.n	c5c6 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c5b8:	7cbb      	ldrb	r3, [r7, #18]
    c5ba:	4619      	mov	r1, r3
    c5bc:	68f8      	ldr	r0, [r7, #12]
    c5be:	4b0d      	ldr	r3, [pc, #52]	; (c5f4 <_usb_d_dev_ep_stall+0x84>)
    c5c0:	4798      	blx	r3
    c5c2:	6178      	str	r0, [r7, #20]
    c5c4:	e00f      	b.n	c5e6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c5c6:	79bb      	ldrb	r3, [r7, #6]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d106      	bne.n	c5da <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c5cc:	7cbb      	ldrb	r3, [r7, #18]
    c5ce:	4619      	mov	r1, r3
    c5d0:	68f8      	ldr	r0, [r7, #12]
    c5d2:	4b09      	ldr	r3, [pc, #36]	; (c5f8 <_usb_d_dev_ep_stall+0x88>)
    c5d4:	4798      	blx	r3
    c5d6:	6178      	str	r0, [r7, #20]
    c5d8:	e005      	b.n	c5e6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c5da:	7cbb      	ldrb	r3, [r7, #18]
    c5dc:	4619      	mov	r1, r3
    c5de:	68f8      	ldr	r0, [r7, #12]
    c5e0:	4b06      	ldr	r3, [pc, #24]	; (c5fc <_usb_d_dev_ep_stall+0x8c>)
    c5e2:	4798      	blx	r3
    c5e4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c5e6:	697b      	ldr	r3, [r7, #20]
}
    c5e8:	4618      	mov	r0, r3
    c5ea:	3718      	adds	r7, #24
    c5ec:	46bd      	mov	sp, r7
    c5ee:	bd80      	pop	{r7, pc}
    c5f0:	0000b011 	.word	0x0000b011
    c5f4:	0000c445 	.word	0x0000c445
    c5f8:	0000c495 	.word	0x0000c495
    c5fc:	0000c415 	.word	0x0000c415

0000c600 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c600:	b580      	push	{r7, lr}
    c602:	b082      	sub	sp, #8
    c604:	af00      	add	r7, sp, #0
    c606:	6078      	str	r0, [r7, #4]
    c608:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	7c9b      	ldrb	r3, [r3, #18]
    c60e:	2bff      	cmp	r3, #255	; 0xff
    c610:	d014      	beq.n	c63c <_usb_d_dev_trans_done+0x3c>
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	7cdb      	ldrb	r3, [r3, #19]
    c616:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c61a:	b2db      	uxtb	r3, r3
    c61c:	2b00      	cmp	r3, #0
    c61e:	d00d      	beq.n	c63c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c620:	687a      	ldr	r2, [r7, #4]
    c622:	7cd3      	ldrb	r3, [r2, #19]
    c624:	f36f 1386 	bfc	r3, #6, #1
    c628:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c62a:	4b06      	ldr	r3, [pc, #24]	; (c644 <_usb_d_dev_trans_done+0x44>)
    c62c:	691b      	ldr	r3, [r3, #16]
    c62e:	687a      	ldr	r2, [r7, #4]
    c630:	7c90      	ldrb	r0, [r2, #18]
    c632:	687a      	ldr	r2, [r7, #4]
    c634:	6892      	ldr	r2, [r2, #8]
    c636:	6839      	ldr	r1, [r7, #0]
    c638:	4798      	blx	r3
    c63a:	e000      	b.n	c63e <_usb_d_dev_trans_done+0x3e>
		return;
    c63c:	bf00      	nop
}
    c63e:	3708      	adds	r7, #8
    c640:	46bd      	mov	sp, r7
    c642:	bd80      	pop	{r7, pc}
    c644:	200025b4 	.word	0x200025b4

0000c648 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c648:	b580      	push	{r7, lr}
    c64a:	b086      	sub	sp, #24
    c64c:	af00      	add	r7, sp, #0
    c64e:	60f8      	str	r0, [r7, #12]
    c650:	460b      	mov	r3, r1
    c652:	607a      	str	r2, [r7, #4]
    c654:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c656:	68fb      	ldr	r3, [r7, #12]
    c658:	7c9b      	ldrb	r3, [r3, #18]
    c65a:	f003 030f 	and.w	r3, r3, #15
    c65e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c660:	4b1f      	ldr	r3, [pc, #124]	; (c6e0 <_usb_d_dev_trans_stop+0x98>)
    c662:	881b      	ldrh	r3, [r3, #0]
    c664:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c666:	68fb      	ldr	r3, [r7, #12]
    c668:	7c9b      	ldrb	r3, [r3, #18]
    c66a:	2bff      	cmp	r3, #255	; 0xff
    c66c:	d033      	beq.n	c6d6 <_usb_d_dev_trans_stop+0x8e>
    c66e:	68fb      	ldr	r3, [r7, #12]
    c670:	7cdb      	ldrb	r3, [r3, #19]
    c672:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c676:	b2db      	uxtb	r3, r3
    c678:	2b00      	cmp	r3, #0
    c67a:	d02c      	beq.n	c6d6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c67c:	7afb      	ldrb	r3, [r7, #11]
    c67e:	2b00      	cmp	r3, #0
    c680:	d006      	beq.n	c690 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c682:	7dfb      	ldrb	r3, [r7, #23]
    c684:	2200      	movs	r2, #0
    c686:	2101      	movs	r1, #1
    c688:	4618      	mov	r0, r3
    c68a:	4b16      	ldr	r3, [pc, #88]	; (c6e4 <_usb_d_dev_trans_stop+0x9c>)
    c68c:	4798      	blx	r3
    c68e:	e005      	b.n	c69c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c690:	7dfb      	ldrb	r3, [r7, #23]
    c692:	2200      	movs	r2, #0
    c694:	2100      	movs	r1, #0
    c696:	4618      	mov	r0, r3
    c698:	4b13      	ldr	r3, [pc, #76]	; (c6e8 <_usb_d_dev_trans_stop+0xa0>)
    c69a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c69c:	7afb      	ldrb	r3, [r7, #11]
    c69e:	f107 0218 	add.w	r2, r7, #24
    c6a2:	4413      	add	r3, r2
    c6a4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c6a8:	461a      	mov	r2, r3
    c6aa:	7dfb      	ldrb	r3, [r7, #23]
    c6ac:	4611      	mov	r1, r2
    c6ae:	4618      	mov	r0, r3
    c6b0:	4b0e      	ldr	r3, [pc, #56]	; (c6ec <_usb_d_dev_trans_stop+0xa4>)
    c6b2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c6b4:	7afb      	ldrb	r3, [r7, #11]
    c6b6:	f107 0218 	add.w	r2, r7, #24
    c6ba:	4413      	add	r3, r2
    c6bc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c6c0:	461a      	mov	r2, r3
    c6c2:	7dfb      	ldrb	r3, [r7, #23]
    c6c4:	4611      	mov	r1, r2
    c6c6:	4618      	mov	r0, r3
    c6c8:	4b09      	ldr	r3, [pc, #36]	; (c6f0 <_usb_d_dev_trans_stop+0xa8>)
    c6ca:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c6cc:	6879      	ldr	r1, [r7, #4]
    c6ce:	68f8      	ldr	r0, [r7, #12]
    c6d0:	4b08      	ldr	r3, [pc, #32]	; (c6f4 <_usb_d_dev_trans_stop+0xac>)
    c6d2:	4798      	blx	r3
    c6d4:	e000      	b.n	c6d8 <_usb_d_dev_trans_stop+0x90>
		return;
    c6d6:	bf00      	nop
}
    c6d8:	3718      	adds	r7, #24
    c6da:	46bd      	mov	sp, r7
    c6dc:	bd80      	pop	{r7, pc}
    c6de:	bf00      	nop
    c6e0:	0001b9fc 	.word	0x0001b9fc
    c6e4:	0000aefd 	.word	0x0000aefd
    c6e8:	0000af55 	.word	0x0000af55
    c6ec:	0000aa05 	.word	0x0000aa05
    c6f0:	0000aa55 	.word	0x0000aa55
    c6f4:	0000c601 	.word	0x0000c601

0000c6f8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b086      	sub	sp, #24
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	4603      	mov	r3, r0
    c700:	6039      	str	r1, [r7, #0]
    c702:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c704:	79fb      	ldrb	r3, [r7, #7]
    c706:	f003 030f 	and.w	r3, r3, #15
    c70a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c70c:	7dfb      	ldrb	r3, [r7, #23]
    c70e:	015b      	lsls	r3, r3, #5
    c710:	4a1e      	ldr	r2, [pc, #120]	; (c78c <_usb_d_dev_ep_read_req+0x94>)
    c712:	4413      	add	r3, r2
    c714:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c716:	693b      	ldr	r3, [r7, #16]
    c718:	681b      	ldr	r3, [r3, #0]
    c71a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c71c:	693b      	ldr	r3, [r7, #16]
    c71e:	685b      	ldr	r3, [r3, #4]
    c720:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c724:	b29b      	uxth	r3, r3
    c726:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c728:	7dfb      	ldrb	r3, [r7, #23]
    c72a:	2b04      	cmp	r3, #4
    c72c:	d802      	bhi.n	c734 <_usb_d_dev_ep_read_req+0x3c>
    c72e:	683b      	ldr	r3, [r7, #0]
    c730:	2b00      	cmp	r3, #0
    c732:	d102      	bne.n	c73a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c734:	f06f 0311 	mvn.w	r3, #17
    c738:	e023      	b.n	c782 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c73a:	7dfb      	ldrb	r3, [r7, #23]
    c73c:	4618      	mov	r0, r3
    c73e:	4b14      	ldr	r3, [pc, #80]	; (c790 <_usb_d_dev_ep_read_req+0x98>)
    c740:	4798      	blx	r3
    c742:	4603      	mov	r3, r0
    c744:	f083 0301 	eor.w	r3, r3, #1
    c748:	b2db      	uxtb	r3, r3
    c74a:	2b00      	cmp	r3, #0
    c74c:	d002      	beq.n	c754 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c74e:	f06f 0312 	mvn.w	r3, #18
    c752:	e016      	b.n	c782 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c754:	7dfb      	ldrb	r3, [r7, #23]
    c756:	4618      	mov	r0, r3
    c758:	4b0e      	ldr	r3, [pc, #56]	; (c794 <_usb_d_dev_ep_read_req+0x9c>)
    c75a:	4798      	blx	r3
    c75c:	4603      	mov	r3, r0
    c75e:	f083 0301 	eor.w	r3, r3, #1
    c762:	b2db      	uxtb	r3, r3
    c764:	2b00      	cmp	r3, #0
    c766:	d001      	beq.n	c76c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c768:	2300      	movs	r3, #0
    c76a:	e00a      	b.n	c782 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	2208      	movs	r2, #8
    c770:	4619      	mov	r1, r3
    c772:	6838      	ldr	r0, [r7, #0]
    c774:	4b08      	ldr	r3, [pc, #32]	; (c798 <_usb_d_dev_ep_read_req+0xa0>)
    c776:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c778:	7dfb      	ldrb	r3, [r7, #23]
    c77a:	4618      	mov	r0, r3
    c77c:	4b07      	ldr	r3, [pc, #28]	; (c79c <_usb_d_dev_ep_read_req+0xa4>)
    c77e:	4798      	blx	r3

	return bytes;
    c780:	897b      	ldrh	r3, [r7, #10]
}
    c782:	4618      	mov	r0, r3
    c784:	3718      	adds	r7, #24
    c786:	46bd      	mov	sp, r7
    c788:	bd80      	pop	{r7, pc}
    c78a:	bf00      	nop
    c78c:	2000267c 	.word	0x2000267c
    c790:	0000aa7d 	.word	0x0000aa7d
    c794:	0000ac29 	.word	0x0000ac29
    c798:	0001b0e1 	.word	0x0001b0e1
    c79c:	0000ac59 	.word	0x0000ac59

0000c7a0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c7a0:	b580      	push	{r7, lr}
    c7a2:	b086      	sub	sp, #24
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	7a1b      	ldrb	r3, [r3, #8]
    c7ac:	f003 030f 	and.w	r3, r3, #15
    c7b0:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	7a1b      	ldrb	r3, [r3, #8]
    c7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	bf14      	ite	ne
    c7be:	2301      	movne	r3, #1
    c7c0:	2300      	moveq	r3, #0
    c7c2:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c7c4:	7d7a      	ldrb	r2, [r7, #21]
    c7c6:	7dbb      	ldrb	r3, [r7, #22]
    c7c8:	4611      	mov	r1, r2
    c7ca:	4618      	mov	r0, r3
    c7cc:	4b5f      	ldr	r3, [pc, #380]	; (c94c <_usb_d_dev_ep_trans+0x1ac>)
    c7ce:	4798      	blx	r3
    c7d0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c7d2:	693b      	ldr	r3, [r7, #16]
    c7d4:	8a1b      	ldrh	r3, [r3, #16]
    c7d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c7da:	4293      	cmp	r3, r2
    c7dc:	d004      	beq.n	c7e8 <_usb_d_dev_ep_trans+0x48>
    c7de:	693b      	ldr	r3, [r7, #16]
    c7e0:	8a1b      	ldrh	r3, [r3, #16]
    c7e2:	3b01      	subs	r3, #1
    c7e4:	b29b      	uxth	r3, r3
    c7e6:	e001      	b.n	c7ec <_usb_d_dev_ep_trans+0x4c>
    c7e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c7ec:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	685a      	ldr	r2, [r3, #4]
    c7f2:	89fb      	ldrh	r3, [r7, #14]
    c7f4:	4013      	ands	r3, r2
    c7f6:	2b00      	cmp	r3, #0
    c7f8:	bf14      	ite	ne
    c7fa:	2301      	movne	r3, #1
    c7fc:	2300      	moveq	r3, #0
    c7fe:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c800:	2300      	movs	r3, #0
    c802:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c804:	7dbb      	ldrb	r3, [r7, #22]
    c806:	2b04      	cmp	r3, #4
    c808:	d902      	bls.n	c810 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c80a:	f06f 0311 	mvn.w	r3, #17
    c80e:	e098      	b.n	c942 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c810:	687b      	ldr	r3, [r7, #4]
    c812:	681b      	ldr	r3, [r3, #0]
    c814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c818:	d31a      	bcc.n	c850 <_usb_d_dev_ep_trans+0xb0>
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	681b      	ldr	r3, [r3, #0]
    c81e:	461a      	mov	r2, r3
    c820:	687b      	ldr	r3, [r7, #4]
    c822:	685b      	ldr	r3, [r3, #4]
    c824:	4413      	add	r3, r2
    c826:	4a4a      	ldr	r2, [pc, #296]	; (c950 <_usb_d_dev_ep_trans+0x1b0>)
    c828:	4293      	cmp	r3, r2
    c82a:	d811      	bhi.n	c850 <_usb_d_dev_ep_trans+0xb0>
    c82c:	687b      	ldr	r3, [r7, #4]
    c82e:	681b      	ldr	r3, [r3, #0]
    c830:	f003 0303 	and.w	r3, r3, #3
    c834:	2b00      	cmp	r3, #0
    c836:	d10b      	bne.n	c850 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c838:	7d7b      	ldrb	r3, [r7, #21]
    c83a:	f083 0301 	eor.w	r3, r3, #1
    c83e:	b2db      	uxtb	r3, r3
    c840:	2b00      	cmp	r3, #0
    c842:	d00e      	beq.n	c862 <_usb_d_dev_ep_trans+0xc2>
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	685b      	ldr	r3, [r3, #4]
    c848:	693a      	ldr	r2, [r7, #16]
    c84a:	8a12      	ldrh	r2, [r2, #16]
    c84c:	4293      	cmp	r3, r2
    c84e:	d208      	bcs.n	c862 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c850:	693b      	ldr	r3, [r7, #16]
    c852:	68db      	ldr	r3, [r3, #12]
    c854:	2b00      	cmp	r3, #0
    c856:	d102      	bne.n	c85e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c858:	f06f 0312 	mvn.w	r3, #18
    c85c:	e071      	b.n	c942 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c85e:	2301      	movs	r3, #1
    c860:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c862:	7d7b      	ldrb	r3, [r7, #21]
    c864:	f083 0301 	eor.w	r3, r3, #1
    c868:	b2db      	uxtb	r3, r3
    c86a:	2b00      	cmp	r3, #0
    c86c:	d009      	beq.n	c882 <_usb_d_dev_ep_trans+0xe2>
    c86e:	7b7b      	ldrb	r3, [r7, #13]
    c870:	2b00      	cmp	r3, #0
    c872:	d006      	beq.n	c882 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c874:	693b      	ldr	r3, [r7, #16]
    c876:	68db      	ldr	r3, [r3, #12]
    c878:	2b00      	cmp	r3, #0
    c87a:	d102      	bne.n	c882 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c87c:	f06f 0311 	mvn.w	r3, #17
    c880:	e05f      	b.n	c942 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c882:	693b      	ldr	r3, [r7, #16]
    c884:	7cdb      	ldrb	r3, [r3, #19]
    c886:	f003 0308 	and.w	r3, r3, #8
    c88a:	b2db      	uxtb	r3, r3
    c88c:	2b00      	cmp	r3, #0
    c88e:	d001      	beq.n	c894 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c890:	2302      	movs	r3, #2
    c892:	e056      	b.n	c942 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c894:	f107 0308 	add.w	r3, r7, #8
    c898:	4618      	mov	r0, r3
    c89a:	4b2e      	ldr	r3, [pc, #184]	; (c954 <_usb_d_dev_ep_trans+0x1b4>)
    c89c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c89e:	693b      	ldr	r3, [r7, #16]
    c8a0:	7cdb      	ldrb	r3, [r3, #19]
    c8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c8a6:	b2db      	uxtb	r3, r3
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d006      	beq.n	c8ba <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c8ac:	f107 0308 	add.w	r3, r7, #8
    c8b0:	4618      	mov	r0, r3
    c8b2:	4b29      	ldr	r3, [pc, #164]	; (c958 <_usb_d_dev_ep_trans+0x1b8>)
    c8b4:	4798      	blx	r3
		return USB_BUSY;
    c8b6:	2301      	movs	r3, #1
    c8b8:	e043      	b.n	c942 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c8ba:	693a      	ldr	r2, [r7, #16]
    c8bc:	7cd3      	ldrb	r3, [r2, #19]
    c8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c8c2:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c8c4:	f107 0308 	add.w	r3, r7, #8
    c8c8:	4618      	mov	r0, r3
    c8ca:	4b23      	ldr	r3, [pc, #140]	; (c958 <_usb_d_dev_ep_trans+0x1b8>)
    c8cc:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c8ce:	687b      	ldr	r3, [r7, #4]
    c8d0:	681a      	ldr	r2, [r3, #0]
    c8d2:	693b      	ldr	r3, [r7, #16]
    c8d4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c8d6:	687b      	ldr	r3, [r7, #4]
    c8d8:	685a      	ldr	r2, [r3, #4]
    c8da:	693b      	ldr	r3, [r7, #16]
    c8dc:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c8de:	693b      	ldr	r3, [r7, #16]
    c8e0:	2200      	movs	r2, #0
    c8e2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c8e4:	693a      	ldr	r2, [r7, #16]
    c8e6:	7cd3      	ldrb	r3, [r2, #19]
    c8e8:	7d79      	ldrb	r1, [r7, #21]
    c8ea:	f361 13c7 	bfi	r3, r1, #7, #1
    c8ee:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c8f0:	693a      	ldr	r2, [r7, #16]
    c8f2:	7cd3      	ldrb	r3, [r2, #19]
    c8f4:	7df9      	ldrb	r1, [r7, #23]
    c8f6:	f361 1345 	bfi	r3, r1, #5, #1
    c8fa:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c8fc:	687b      	ldr	r3, [r7, #4]
    c8fe:	7a5b      	ldrb	r3, [r3, #9]
    c900:	2b00      	cmp	r3, #0
    c902:	d007      	beq.n	c914 <_usb_d_dev_ep_trans+0x174>
    c904:	7b7b      	ldrb	r3, [r7, #13]
    c906:	f083 0301 	eor.w	r3, r3, #1
    c90a:	b2db      	uxtb	r3, r3
    c90c:	2b00      	cmp	r3, #0
    c90e:	d001      	beq.n	c914 <_usb_d_dev_ep_trans+0x174>
    c910:	2301      	movs	r3, #1
    c912:	e000      	b.n	c916 <_usb_d_dev_ep_trans+0x176>
    c914:	2300      	movs	r3, #0
    c916:	b2db      	uxtb	r3, r3
    c918:	f003 0301 	and.w	r3, r3, #1
    c91c:	b2d9      	uxtb	r1, r3
    c91e:	693a      	ldr	r2, [r7, #16]
    c920:	7cd3      	ldrb	r3, [r2, #19]
    c922:	f361 1304 	bfi	r3, r1, #4, #1
    c926:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c928:	7d7b      	ldrb	r3, [r7, #21]
    c92a:	2b00      	cmp	r3, #0
    c92c:	d004      	beq.n	c938 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c92e:	2100      	movs	r1, #0
    c930:	6938      	ldr	r0, [r7, #16]
    c932:	4b0a      	ldr	r3, [pc, #40]	; (c95c <_usb_d_dev_ep_trans+0x1bc>)
    c934:	4798      	blx	r3
    c936:	e003      	b.n	c940 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c938:	2100      	movs	r1, #0
    c93a:	6938      	ldr	r0, [r7, #16]
    c93c:	4b08      	ldr	r3, [pc, #32]	; (c960 <_usb_d_dev_ep_trans+0x1c0>)
    c93e:	4798      	blx	r3
	}

	return ERR_NONE;
    c940:	2300      	movs	r3, #0
}
    c942:	4618      	mov	r0, r3
    c944:	3718      	adds	r7, #24
    c946:	46bd      	mov	sp, r7
    c948:	bd80      	pop	{r7, pc}
    c94a:	bf00      	nop
    c94c:	0000b011 	.word	0x0000b011
    c950:	20041fff 	.word	0x20041fff
    c954:	0000d16d 	.word	0x0000d16d
    c958:	0000d193 	.word	0x0000d193
    c95c:	0000b2d9 	.word	0x0000b2d9
    c960:	0000b4f1 	.word	0x0000b4f1

0000c964 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c964:	b580      	push	{r7, lr}
    c966:	b084      	sub	sp, #16
    c968:	af00      	add	r7, sp, #0
    c96a:	4603      	mov	r3, r0
    c96c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c96e:	79fb      	ldrb	r3, [r7, #7]
    c970:	f003 030f 	and.w	r3, r3, #15
    c974:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c976:	79fb      	ldrb	r3, [r7, #7]
    c978:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c97c:	2b00      	cmp	r3, #0
    c97e:	bf14      	ite	ne
    c980:	2301      	movne	r3, #1
    c982:	2300      	moveq	r3, #0
    c984:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c986:	7bba      	ldrb	r2, [r7, #14]
    c988:	7bfb      	ldrb	r3, [r7, #15]
    c98a:	4611      	mov	r1, r2
    c98c:	4618      	mov	r0, r3
    c98e:	4b08      	ldr	r3, [pc, #32]	; (c9b0 <_usb_d_dev_ep_abort+0x4c>)
    c990:	4798      	blx	r3
    c992:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c994:	7bfb      	ldrb	r3, [r7, #15]
    c996:	2b04      	cmp	r3, #4
    c998:	d806      	bhi.n	c9a8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c99a:	7bbb      	ldrb	r3, [r7, #14]
    c99c:	2202      	movs	r2, #2
    c99e:	4619      	mov	r1, r3
    c9a0:	68b8      	ldr	r0, [r7, #8]
    c9a2:	4b04      	ldr	r3, [pc, #16]	; (c9b4 <_usb_d_dev_ep_abort+0x50>)
    c9a4:	4798      	blx	r3
    c9a6:	e000      	b.n	c9aa <_usb_d_dev_ep_abort+0x46>
		return;
    c9a8:	bf00      	nop
}
    c9aa:	3710      	adds	r7, #16
    c9ac:	46bd      	mov	sp, r7
    c9ae:	bd80      	pop	{r7, pc}
    c9b0:	0000b011 	.word	0x0000b011
    c9b4:	0000c649 	.word	0x0000c649

0000c9b8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c9b8:	b480      	push	{r7}
    c9ba:	b085      	sub	sp, #20
    c9bc:	af00      	add	r7, sp, #0
    c9be:	4603      	mov	r3, r0
    c9c0:	6039      	str	r1, [r7, #0]
    c9c2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c9c4:	683b      	ldr	r3, [r7, #0]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d001      	beq.n	c9ce <_usb_d_dev_register_callback+0x16>
    c9ca:	683b      	ldr	r3, [r7, #0]
    c9cc:	e000      	b.n	c9d0 <_usb_d_dev_register_callback+0x18>
    c9ce:	4b0a      	ldr	r3, [pc, #40]	; (c9f8 <_usb_d_dev_register_callback+0x40>)
    c9d0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c9d2:	79fb      	ldrb	r3, [r7, #7]
    c9d4:	2b01      	cmp	r3, #1
    c9d6:	d103      	bne.n	c9e0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c9d8:	4a08      	ldr	r2, [pc, #32]	; (c9fc <_usb_d_dev_register_callback+0x44>)
    c9da:	68fb      	ldr	r3, [r7, #12]
    c9dc:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c9de:	e005      	b.n	c9ec <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c9e0:	79fb      	ldrb	r3, [r7, #7]
    c9e2:	2b00      	cmp	r3, #0
    c9e4:	d102      	bne.n	c9ec <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c9e6:	4a05      	ldr	r2, [pc, #20]	; (c9fc <_usb_d_dev_register_callback+0x44>)
    c9e8:	68fb      	ldr	r3, [r7, #12]
    c9ea:	6013      	str	r3, [r2, #0]
}
    c9ec:	bf00      	nop
    c9ee:	3714      	adds	r7, #20
    c9f0:	46bd      	mov	sp, r7
    c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9f6:	4770      	bx	lr
    c9f8:	0000a899 	.word	0x0000a899
    c9fc:	200025b4 	.word	0x200025b4

0000ca00 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ca00:	b480      	push	{r7}
    ca02:	b085      	sub	sp, #20
    ca04:	af00      	add	r7, sp, #0
    ca06:	4603      	mov	r3, r0
    ca08:	6039      	str	r1, [r7, #0]
    ca0a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ca0c:	683b      	ldr	r3, [r7, #0]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d001      	beq.n	ca16 <_usb_d_dev_register_ep_callback+0x16>
    ca12:	683b      	ldr	r3, [r7, #0]
    ca14:	e000      	b.n	ca18 <_usb_d_dev_register_ep_callback+0x18>
    ca16:	4b0e      	ldr	r3, [pc, #56]	; (ca50 <_usb_d_dev_register_ep_callback+0x50>)
    ca18:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ca1a:	79fb      	ldrb	r3, [r7, #7]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d103      	bne.n	ca28 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ca20:	4a0c      	ldr	r2, [pc, #48]	; (ca54 <_usb_d_dev_register_ep_callback+0x54>)
    ca22:	68fb      	ldr	r3, [r7, #12]
    ca24:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ca26:	e00c      	b.n	ca42 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ca28:	79fb      	ldrb	r3, [r7, #7]
    ca2a:	2b01      	cmp	r3, #1
    ca2c:	d103      	bne.n	ca36 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ca2e:	4a09      	ldr	r2, [pc, #36]	; (ca54 <_usb_d_dev_register_ep_callback+0x54>)
    ca30:	68fb      	ldr	r3, [r7, #12]
    ca32:	60d3      	str	r3, [r2, #12]
}
    ca34:	e005      	b.n	ca42 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ca36:	79fb      	ldrb	r3, [r7, #7]
    ca38:	2b02      	cmp	r3, #2
    ca3a:	d102      	bne.n	ca42 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ca3c:	4a05      	ldr	r2, [pc, #20]	; (ca54 <_usb_d_dev_register_ep_callback+0x54>)
    ca3e:	68fb      	ldr	r3, [r7, #12]
    ca40:	6113      	str	r3, [r2, #16]
}
    ca42:	bf00      	nop
    ca44:	3714      	adds	r7, #20
    ca46:	46bd      	mov	sp, r7
    ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca4c:	4770      	bx	lr
    ca4e:	bf00      	nop
    ca50:	0000a899 	.word	0x0000a899
    ca54:	200025b4 	.word	0x200025b4

0000ca58 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ca58:	b580      	push	{r7, lr}
    ca5a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca5c:	4b01      	ldr	r3, [pc, #4]	; (ca64 <USB_0_Handler+0xc>)
    ca5e:	4798      	blx	r3
}
    ca60:	bf00      	nop
    ca62:	bd80      	pop	{r7, pc}
    ca64:	0000bcc9 	.word	0x0000bcc9

0000ca68 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ca68:	b580      	push	{r7, lr}
    ca6a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca6c:	4b01      	ldr	r3, [pc, #4]	; (ca74 <USB_1_Handler+0xc>)
    ca6e:	4798      	blx	r3
}
    ca70:	bf00      	nop
    ca72:	bd80      	pop	{r7, pc}
    ca74:	0000bcc9 	.word	0x0000bcc9

0000ca78 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ca78:	b580      	push	{r7, lr}
    ca7a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca7c:	4b01      	ldr	r3, [pc, #4]	; (ca84 <USB_2_Handler+0xc>)
    ca7e:	4798      	blx	r3
}
    ca80:	bf00      	nop
    ca82:	bd80      	pop	{r7, pc}
    ca84:	0000bcc9 	.word	0x0000bcc9

0000ca88 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ca88:	b580      	push	{r7, lr}
    ca8a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca8c:	4b01      	ldr	r3, [pc, #4]	; (ca94 <USB_3_Handler+0xc>)
    ca8e:	4798      	blx	r3
}
    ca90:	bf00      	nop
    ca92:	bd80      	pop	{r7, pc}
    ca94:	0000bcc9 	.word	0x0000bcc9

0000ca98 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ca98:	b480      	push	{r7}
    ca9a:	b083      	sub	sp, #12
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	6078      	str	r0, [r7, #4]
    caa0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    caa2:	bf00      	nop
    caa4:	687b      	ldr	r3, [r7, #4]
    caa6:	689a      	ldr	r2, [r3, #8]
    caa8:	683b      	ldr	r3, [r7, #0]
    caaa:	4013      	ands	r3, r2
    caac:	2b00      	cmp	r3, #0
    caae:	d1f9      	bne.n	caa4 <hri_wdt_wait_for_sync+0xc>
	};
}
    cab0:	bf00      	nop
    cab2:	370c      	adds	r7, #12
    cab4:	46bd      	mov	sp, r7
    cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    caba:	4770      	bx	lr

0000cabc <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    cabc:	b580      	push	{r7, lr}
    cabe:	b084      	sub	sp, #16
    cac0:	af00      	add	r7, sp, #0
    cac2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cac4:	210e      	movs	r1, #14
    cac6:	6878      	ldr	r0, [r7, #4]
    cac8:	4b0a      	ldr	r3, [pc, #40]	; (caf4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    caca:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    cad2:	7bfb      	ldrb	r3, [r7, #15]
    cad4:	085b      	lsrs	r3, r3, #1
    cad6:	b2db      	uxtb	r3, r3
    cad8:	f003 0301 	and.w	r3, r3, #1
    cadc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    cade:	7bfb      	ldrb	r3, [r7, #15]
    cae0:	2b00      	cmp	r3, #0
    cae2:	bf14      	ite	ne
    cae4:	2301      	movne	r3, #1
    cae6:	2300      	moveq	r3, #0
    cae8:	b2db      	uxtb	r3, r3
}
    caea:	4618      	mov	r0, r3
    caec:	3710      	adds	r7, #16
    caee:	46bd      	mov	sp, r7
    caf0:	bd80      	pop	{r7, pc}
    caf2:	bf00      	nop
    caf4:	0000ca99 	.word	0x0000ca99

0000caf8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    caf8:	b580      	push	{r7, lr}
    cafa:	b082      	sub	sp, #8
    cafc:	af00      	add	r7, sp, #0
    cafe:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	781b      	ldrb	r3, [r3, #0]
    cb04:	b2db      	uxtb	r3, r3
    cb06:	f023 0304 	bic.w	r3, r3, #4
    cb0a:	b2da      	uxtb	r2, r3
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cb10:	210e      	movs	r1, #14
    cb12:	6878      	ldr	r0, [r7, #4]
    cb14:	4b02      	ldr	r3, [pc, #8]	; (cb20 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    cb16:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    cb18:	bf00      	nop
    cb1a:	3708      	adds	r7, #8
    cb1c:	46bd      	mov	sp, r7
    cb1e:	bd80      	pop	{r7, pc}
    cb20:	0000ca99 	.word	0x0000ca99

0000cb24 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    cb24:	b580      	push	{r7, lr}
    cb26:	b084      	sub	sp, #16
    cb28:	af00      	add	r7, sp, #0
    cb2a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cb2c:	210e      	movs	r1, #14
    cb2e:	6878      	ldr	r0, [r7, #4]
    cb30:	4b08      	ldr	r3, [pc, #32]	; (cb54 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    cb32:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    cb34:	687b      	ldr	r3, [r7, #4]
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    cb3a:	7bfb      	ldrb	r3, [r7, #15]
    cb3c:	09db      	lsrs	r3, r3, #7
    cb3e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    cb40:	7bfb      	ldrb	r3, [r7, #15]
    cb42:	2b00      	cmp	r3, #0
    cb44:	bf14      	ite	ne
    cb46:	2301      	movne	r3, #1
    cb48:	2300      	moveq	r3, #0
    cb4a:	b2db      	uxtb	r3, r3
}
    cb4c:	4618      	mov	r0, r3
    cb4e:	3710      	adds	r7, #16
    cb50:	46bd      	mov	sp, r7
    cb52:	bd80      	pop	{r7, pc}
    cb54:	0000ca99 	.word	0x0000ca99

0000cb58 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    cb58:	b480      	push	{r7}
    cb5a:	b085      	sub	sp, #20
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	6078      	str	r0, [r7, #4]
    cb60:	460b      	mov	r3, r1
    cb62:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    cb64:	687b      	ldr	r3, [r7, #4]
    cb66:	785b      	ldrb	r3, [r3, #1]
    cb68:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    cb6a:	7bfb      	ldrb	r3, [r7, #15]
    cb6c:	f023 030f 	bic.w	r3, r3, #15
    cb70:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    cb72:	78fb      	ldrb	r3, [r7, #3]
    cb74:	f003 030f 	and.w	r3, r3, #15
    cb78:	b2da      	uxtb	r2, r3
    cb7a:	7bfb      	ldrb	r3, [r7, #15]
    cb7c:	4313      	orrs	r3, r2
    cb7e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    cb80:	687b      	ldr	r3, [r7, #4]
    cb82:	7bfa      	ldrb	r2, [r7, #15]
    cb84:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    cb86:	bf00      	nop
    cb88:	3714      	adds	r7, #20
    cb8a:	46bd      	mov	sp, r7
    cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb90:	4770      	bx	lr
	...

0000cb94 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    cb94:	b580      	push	{r7, lr}
    cb96:	b082      	sub	sp, #8
    cb98:	af00      	add	r7, sp, #0
    cb9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d005      	beq.n	cbae <_wdt_init+0x1a>
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	681b      	ldr	r3, [r3, #0]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d001      	beq.n	cbae <_wdt_init+0x1a>
    cbaa:	2301      	movs	r3, #1
    cbac:	e000      	b.n	cbb0 <_wdt_init+0x1c>
    cbae:	2300      	movs	r3, #0
    cbb0:	f003 0301 	and.w	r3, r3, #1
    cbb4:	b2db      	uxtb	r3, r3
    cbb6:	2250      	movs	r2, #80	; 0x50
    cbb8:	4913      	ldr	r1, [pc, #76]	; (cc08 <_wdt_init+0x74>)
    cbba:	4618      	mov	r0, r3
    cbbc:	4b13      	ldr	r3, [pc, #76]	; (cc0c <_wdt_init+0x78>)
    cbbe:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    cbc0:	687b      	ldr	r3, [r7, #4]
    cbc2:	681b      	ldr	r3, [r3, #0]
    cbc4:	4618      	mov	r0, r3
    cbc6:	4b12      	ldr	r3, [pc, #72]	; (cc10 <_wdt_init+0x7c>)
    cbc8:	4798      	blx	r3
    cbca:	4603      	mov	r3, r0
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d107      	bne.n	cbe0 <_wdt_init+0x4c>
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	681b      	ldr	r3, [r3, #0]
    cbd4:	4618      	mov	r0, r3
    cbd6:	4b0f      	ldr	r3, [pc, #60]	; (cc14 <_wdt_init+0x80>)
    cbd8:	4798      	blx	r3
    cbda:	4603      	mov	r3, r0
    cbdc:	2b00      	cmp	r3, #0
    cbde:	d002      	beq.n	cbe6 <_wdt_init+0x52>
		return ERR_DENIED;
    cbe0:	f06f 0310 	mvn.w	r3, #16
    cbe4:	e00b      	b.n	cbfe <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    cbe6:	687b      	ldr	r3, [r7, #4]
    cbe8:	681b      	ldr	r3, [r3, #0]
    cbea:	4618      	mov	r0, r3
    cbec:	4b0a      	ldr	r3, [pc, #40]	; (cc18 <_wdt_init+0x84>)
    cbee:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	681b      	ldr	r3, [r3, #0]
    cbf4:	210b      	movs	r1, #11
    cbf6:	4618      	mov	r0, r3
    cbf8:	4b08      	ldr	r3, [pc, #32]	; (cc1c <_wdt_init+0x88>)
    cbfa:	4798      	blx	r3
	}

	return ERR_NONE;
    cbfc:	2300      	movs	r3, #0
}
    cbfe:	4618      	mov	r0, r3
    cc00:	3708      	adds	r7, #8
    cc02:	46bd      	mov	sp, r7
    cc04:	bd80      	pop	{r7, pc}
    cc06:	bf00      	nop
    cc08:	0001ba00 	.word	0x0001ba00
    cc0c:	00004d25 	.word	0x00004d25
    cc10:	0000cb25 	.word	0x0000cb25
    cc14:	0000cabd 	.word	0x0000cabd
    cc18:	0000caf9 	.word	0x0000caf9
    cc1c:	0000cb59 	.word	0x0000cb59

0000cc20 <hri_port_set_DIR_reg>:
{
    cc20:	b480      	push	{r7}
    cc22:	b085      	sub	sp, #20
    cc24:	af00      	add	r7, sp, #0
    cc26:	60f8      	str	r0, [r7, #12]
    cc28:	460b      	mov	r3, r1
    cc2a:	607a      	str	r2, [r7, #4]
    cc2c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    cc2e:	7afb      	ldrb	r3, [r7, #11]
    cc30:	68fa      	ldr	r2, [r7, #12]
    cc32:	01db      	lsls	r3, r3, #7
    cc34:	4413      	add	r3, r2
    cc36:	3308      	adds	r3, #8
    cc38:	687a      	ldr	r2, [r7, #4]
    cc3a:	601a      	str	r2, [r3, #0]
}
    cc3c:	bf00      	nop
    cc3e:	3714      	adds	r7, #20
    cc40:	46bd      	mov	sp, r7
    cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc46:	4770      	bx	lr

0000cc48 <hri_port_clear_DIR_reg>:
{
    cc48:	b480      	push	{r7}
    cc4a:	b085      	sub	sp, #20
    cc4c:	af00      	add	r7, sp, #0
    cc4e:	60f8      	str	r0, [r7, #12]
    cc50:	460b      	mov	r3, r1
    cc52:	607a      	str	r2, [r7, #4]
    cc54:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    cc56:	7afb      	ldrb	r3, [r7, #11]
    cc58:	68fa      	ldr	r2, [r7, #12]
    cc5a:	01db      	lsls	r3, r3, #7
    cc5c:	4413      	add	r3, r2
    cc5e:	3304      	adds	r3, #4
    cc60:	687a      	ldr	r2, [r7, #4]
    cc62:	601a      	str	r2, [r3, #0]
}
    cc64:	bf00      	nop
    cc66:	3714      	adds	r7, #20
    cc68:	46bd      	mov	sp, r7
    cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc6e:	4770      	bx	lr

0000cc70 <hri_port_set_OUT_reg>:
{
    cc70:	b480      	push	{r7}
    cc72:	b085      	sub	sp, #20
    cc74:	af00      	add	r7, sp, #0
    cc76:	60f8      	str	r0, [r7, #12]
    cc78:	460b      	mov	r3, r1
    cc7a:	607a      	str	r2, [r7, #4]
    cc7c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    cc7e:	7afb      	ldrb	r3, [r7, #11]
    cc80:	68fa      	ldr	r2, [r7, #12]
    cc82:	01db      	lsls	r3, r3, #7
    cc84:	4413      	add	r3, r2
    cc86:	3318      	adds	r3, #24
    cc88:	687a      	ldr	r2, [r7, #4]
    cc8a:	601a      	str	r2, [r3, #0]
}
    cc8c:	bf00      	nop
    cc8e:	3714      	adds	r7, #20
    cc90:	46bd      	mov	sp, r7
    cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc96:	4770      	bx	lr

0000cc98 <hri_port_clear_OUT_reg>:
{
    cc98:	b480      	push	{r7}
    cc9a:	b085      	sub	sp, #20
    cc9c:	af00      	add	r7, sp, #0
    cc9e:	60f8      	str	r0, [r7, #12]
    cca0:	460b      	mov	r3, r1
    cca2:	607a      	str	r2, [r7, #4]
    cca4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    cca6:	7afb      	ldrb	r3, [r7, #11]
    cca8:	68fa      	ldr	r2, [r7, #12]
    ccaa:	01db      	lsls	r3, r3, #7
    ccac:	4413      	add	r3, r2
    ccae:	3314      	adds	r3, #20
    ccb0:	687a      	ldr	r2, [r7, #4]
    ccb2:	601a      	str	r2, [r3, #0]
}
    ccb4:	bf00      	nop
    ccb6:	3714      	adds	r7, #20
    ccb8:	46bd      	mov	sp, r7
    ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccbe:	4770      	bx	lr

0000ccc0 <hri_port_write_PMUX_PMUXE_bf>:
{
    ccc0:	b480      	push	{r7}
    ccc2:	b085      	sub	sp, #20
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	6078      	str	r0, [r7, #4]
    ccc8:	4608      	mov	r0, r1
    ccca:	4611      	mov	r1, r2
    cccc:	461a      	mov	r2, r3
    ccce:	4603      	mov	r3, r0
    ccd0:	70fb      	strb	r3, [r7, #3]
    ccd2:	460b      	mov	r3, r1
    ccd4:	70bb      	strb	r3, [r7, #2]
    ccd6:	4613      	mov	r3, r2
    ccd8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ccda:	78fa      	ldrb	r2, [r7, #3]
    ccdc:	78bb      	ldrb	r3, [r7, #2]
    ccde:	6879      	ldr	r1, [r7, #4]
    cce0:	01d2      	lsls	r2, r2, #7
    cce2:	440a      	add	r2, r1
    cce4:	4413      	add	r3, r2
    cce6:	3330      	adds	r3, #48	; 0x30
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ccec:	7bfb      	ldrb	r3, [r7, #15]
    ccee:	f023 030f 	bic.w	r3, r3, #15
    ccf2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ccf4:	787b      	ldrb	r3, [r7, #1]
    ccf6:	f003 030f 	and.w	r3, r3, #15
    ccfa:	b2da      	uxtb	r2, r3
    ccfc:	7bfb      	ldrb	r3, [r7, #15]
    ccfe:	4313      	orrs	r3, r2
    cd00:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cd02:	78fa      	ldrb	r2, [r7, #3]
    cd04:	78bb      	ldrb	r3, [r7, #2]
    cd06:	6879      	ldr	r1, [r7, #4]
    cd08:	01d2      	lsls	r2, r2, #7
    cd0a:	440a      	add	r2, r1
    cd0c:	4413      	add	r3, r2
    cd0e:	3330      	adds	r3, #48	; 0x30
    cd10:	7bfa      	ldrb	r2, [r7, #15]
    cd12:	701a      	strb	r2, [r3, #0]
}
    cd14:	bf00      	nop
    cd16:	3714      	adds	r7, #20
    cd18:	46bd      	mov	sp, r7
    cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd1e:	4770      	bx	lr

0000cd20 <hri_port_write_PMUX_PMUXO_bf>:
{
    cd20:	b480      	push	{r7}
    cd22:	b085      	sub	sp, #20
    cd24:	af00      	add	r7, sp, #0
    cd26:	6078      	str	r0, [r7, #4]
    cd28:	4608      	mov	r0, r1
    cd2a:	4611      	mov	r1, r2
    cd2c:	461a      	mov	r2, r3
    cd2e:	4603      	mov	r3, r0
    cd30:	70fb      	strb	r3, [r7, #3]
    cd32:	460b      	mov	r3, r1
    cd34:	70bb      	strb	r3, [r7, #2]
    cd36:	4613      	mov	r3, r2
    cd38:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cd3a:	78fa      	ldrb	r2, [r7, #3]
    cd3c:	78bb      	ldrb	r3, [r7, #2]
    cd3e:	6879      	ldr	r1, [r7, #4]
    cd40:	01d2      	lsls	r2, r2, #7
    cd42:	440a      	add	r2, r1
    cd44:	4413      	add	r3, r2
    cd46:	3330      	adds	r3, #48	; 0x30
    cd48:	781b      	ldrb	r3, [r3, #0]
    cd4a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    cd4c:	7bfb      	ldrb	r3, [r7, #15]
    cd4e:	f003 030f 	and.w	r3, r3, #15
    cd52:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    cd54:	787b      	ldrb	r3, [r7, #1]
    cd56:	011b      	lsls	r3, r3, #4
    cd58:	b2da      	uxtb	r2, r3
    cd5a:	7bfb      	ldrb	r3, [r7, #15]
    cd5c:	4313      	orrs	r3, r2
    cd5e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cd60:	78fa      	ldrb	r2, [r7, #3]
    cd62:	78bb      	ldrb	r3, [r7, #2]
    cd64:	6879      	ldr	r1, [r7, #4]
    cd66:	01d2      	lsls	r2, r2, #7
    cd68:	440a      	add	r2, r1
    cd6a:	4413      	add	r3, r2
    cd6c:	3330      	adds	r3, #48	; 0x30
    cd6e:	7bfa      	ldrb	r2, [r7, #15]
    cd70:	701a      	strb	r2, [r3, #0]
}
    cd72:	bf00      	nop
    cd74:	3714      	adds	r7, #20
    cd76:	46bd      	mov	sp, r7
    cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd7c:	4770      	bx	lr

0000cd7e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    cd7e:	b480      	push	{r7}
    cd80:	b085      	sub	sp, #20
    cd82:	af00      	add	r7, sp, #0
    cd84:	6078      	str	r0, [r7, #4]
    cd86:	4608      	mov	r0, r1
    cd88:	4611      	mov	r1, r2
    cd8a:	461a      	mov	r2, r3
    cd8c:	4603      	mov	r3, r0
    cd8e:	70fb      	strb	r3, [r7, #3]
    cd90:	460b      	mov	r3, r1
    cd92:	70bb      	strb	r3, [r7, #2]
    cd94:	4613      	mov	r3, r2
    cd96:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    cd98:	78fa      	ldrb	r2, [r7, #3]
    cd9a:	78bb      	ldrb	r3, [r7, #2]
    cd9c:	6879      	ldr	r1, [r7, #4]
    cd9e:	01d2      	lsls	r2, r2, #7
    cda0:	440a      	add	r2, r1
    cda2:	4413      	add	r3, r2
    cda4:	3340      	adds	r3, #64	; 0x40
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    cdaa:	7bfb      	ldrb	r3, [r7, #15]
    cdac:	f023 0301 	bic.w	r3, r3, #1
    cdb0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    cdb2:	787a      	ldrb	r2, [r7, #1]
    cdb4:	7bfb      	ldrb	r3, [r7, #15]
    cdb6:	4313      	orrs	r3, r2
    cdb8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    cdba:	78fa      	ldrb	r2, [r7, #3]
    cdbc:	78bb      	ldrb	r3, [r7, #2]
    cdbe:	6879      	ldr	r1, [r7, #4]
    cdc0:	01d2      	lsls	r2, r2, #7
    cdc2:	440a      	add	r2, r1
    cdc4:	4413      	add	r3, r2
    cdc6:	3340      	adds	r3, #64	; 0x40
    cdc8:	7bfa      	ldrb	r2, [r7, #15]
    cdca:	701a      	strb	r2, [r3, #0]
}
    cdcc:	bf00      	nop
    cdce:	3714      	adds	r7, #20
    cdd0:	46bd      	mov	sp, r7
    cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdd6:	4770      	bx	lr

0000cdd8 <hri_port_write_WRCONFIG_reg>:
{
    cdd8:	b480      	push	{r7}
    cdda:	b085      	sub	sp, #20
    cddc:	af00      	add	r7, sp, #0
    cdde:	60f8      	str	r0, [r7, #12]
    cde0:	460b      	mov	r3, r1
    cde2:	607a      	str	r2, [r7, #4]
    cde4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    cde6:	7afb      	ldrb	r3, [r7, #11]
    cde8:	68fa      	ldr	r2, [r7, #12]
    cdea:	01db      	lsls	r3, r3, #7
    cdec:	4413      	add	r3, r2
    cdee:	3328      	adds	r3, #40	; 0x28
    cdf0:	687a      	ldr	r2, [r7, #4]
    cdf2:	601a      	str	r2, [r3, #0]
}
    cdf4:	bf00      	nop
    cdf6:	3714      	adds	r7, #20
    cdf8:	46bd      	mov	sp, r7
    cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdfe:	4770      	bx	lr

0000ce00 <_gpio_set_direction>:
{
    ce00:	b580      	push	{r7, lr}
    ce02:	b082      	sub	sp, #8
    ce04:	af00      	add	r7, sp, #0
    ce06:	4603      	mov	r3, r0
    ce08:	6039      	str	r1, [r7, #0]
    ce0a:	71fb      	strb	r3, [r7, #7]
    ce0c:	4613      	mov	r3, r2
    ce0e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ce10:	79bb      	ldrb	r3, [r7, #6]
    ce12:	2b01      	cmp	r3, #1
    ce14:	d01c      	beq.n	ce50 <_gpio_set_direction+0x50>
    ce16:	2b02      	cmp	r3, #2
    ce18:	d037      	beq.n	ce8a <_gpio_set_direction+0x8a>
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d14e      	bne.n	cebc <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ce1e:	79fb      	ldrb	r3, [r7, #7]
    ce20:	683a      	ldr	r2, [r7, #0]
    ce22:	4619      	mov	r1, r3
    ce24:	482a      	ldr	r0, [pc, #168]	; (ced0 <_gpio_set_direction+0xd0>)
    ce26:	4b2b      	ldr	r3, [pc, #172]	; (ced4 <_gpio_set_direction+0xd4>)
    ce28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ce2a:	683b      	ldr	r3, [r7, #0]
    ce2c:	b29b      	uxth	r3, r3
    ce2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ce32:	79fb      	ldrb	r3, [r7, #7]
    ce34:	4619      	mov	r1, r3
    ce36:	4826      	ldr	r0, [pc, #152]	; (ced0 <_gpio_set_direction+0xd0>)
    ce38:	4b27      	ldr	r3, [pc, #156]	; (ced8 <_gpio_set_direction+0xd8>)
    ce3a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ce3c:	683b      	ldr	r3, [r7, #0]
    ce3e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ce40:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ce44:	79fb      	ldrb	r3, [r7, #7]
    ce46:	4619      	mov	r1, r3
    ce48:	4821      	ldr	r0, [pc, #132]	; (ced0 <_gpio_set_direction+0xd0>)
    ce4a:	4b23      	ldr	r3, [pc, #140]	; (ced8 <_gpio_set_direction+0xd8>)
    ce4c:	4798      	blx	r3
		break;
    ce4e:	e03a      	b.n	cec6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ce50:	79fb      	ldrb	r3, [r7, #7]
    ce52:	683a      	ldr	r2, [r7, #0]
    ce54:	4619      	mov	r1, r3
    ce56:	481e      	ldr	r0, [pc, #120]	; (ced0 <_gpio_set_direction+0xd0>)
    ce58:	4b1e      	ldr	r3, [pc, #120]	; (ced4 <_gpio_set_direction+0xd4>)
    ce5a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ce5c:	683b      	ldr	r3, [r7, #0]
    ce5e:	b29b      	uxth	r3, r3
    ce60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ce64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce68:	79f9      	ldrb	r1, [r7, #7]
    ce6a:	461a      	mov	r2, r3
    ce6c:	4818      	ldr	r0, [pc, #96]	; (ced0 <_gpio_set_direction+0xd0>)
    ce6e:	4b1a      	ldr	r3, [pc, #104]	; (ced8 <_gpio_set_direction+0xd8>)
    ce70:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ce72:	683b      	ldr	r3, [r7, #0]
    ce74:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ce76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ce7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce7e:	79f9      	ldrb	r1, [r7, #7]
    ce80:	461a      	mov	r2, r3
    ce82:	4813      	ldr	r0, [pc, #76]	; (ced0 <_gpio_set_direction+0xd0>)
    ce84:	4b14      	ldr	r3, [pc, #80]	; (ced8 <_gpio_set_direction+0xd8>)
    ce86:	4798      	blx	r3
		break;
    ce88:	e01d      	b.n	cec6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ce8a:	79fb      	ldrb	r3, [r7, #7]
    ce8c:	683a      	ldr	r2, [r7, #0]
    ce8e:	4619      	mov	r1, r3
    ce90:	480f      	ldr	r0, [pc, #60]	; (ced0 <_gpio_set_direction+0xd0>)
    ce92:	4b12      	ldr	r3, [pc, #72]	; (cedc <_gpio_set_direction+0xdc>)
    ce94:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ce96:	683b      	ldr	r3, [r7, #0]
    ce98:	b29b      	uxth	r3, r3
    ce9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ce9e:	79fb      	ldrb	r3, [r7, #7]
    cea0:	4619      	mov	r1, r3
    cea2:	480b      	ldr	r0, [pc, #44]	; (ced0 <_gpio_set_direction+0xd0>)
    cea4:	4b0c      	ldr	r3, [pc, #48]	; (ced8 <_gpio_set_direction+0xd8>)
    cea6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    cea8:	683b      	ldr	r3, [r7, #0]
    ceaa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ceac:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ceb0:	79fb      	ldrb	r3, [r7, #7]
    ceb2:	4619      	mov	r1, r3
    ceb4:	4806      	ldr	r0, [pc, #24]	; (ced0 <_gpio_set_direction+0xd0>)
    ceb6:	4b08      	ldr	r3, [pc, #32]	; (ced8 <_gpio_set_direction+0xd8>)
    ceb8:	4798      	blx	r3
		break;
    ceba:	e004      	b.n	cec6 <_gpio_set_direction+0xc6>
		ASSERT(false);
    cebc:	2246      	movs	r2, #70	; 0x46
    cebe:	4908      	ldr	r1, [pc, #32]	; (cee0 <_gpio_set_direction+0xe0>)
    cec0:	2000      	movs	r0, #0
    cec2:	4b08      	ldr	r3, [pc, #32]	; (cee4 <_gpio_set_direction+0xe4>)
    cec4:	4798      	blx	r3
}
    cec6:	bf00      	nop
    cec8:	3708      	adds	r7, #8
    ceca:	46bd      	mov	sp, r7
    cecc:	bd80      	pop	{r7, pc}
    cece:	bf00      	nop
    ced0:	41008000 	.word	0x41008000
    ced4:	0000cc49 	.word	0x0000cc49
    ced8:	0000cdd9 	.word	0x0000cdd9
    cedc:	0000cc21 	.word	0x0000cc21
    cee0:	0001ba18 	.word	0x0001ba18
    cee4:	00004d25 	.word	0x00004d25

0000cee8 <_gpio_set_level>:
{
    cee8:	b580      	push	{r7, lr}
    ceea:	b082      	sub	sp, #8
    ceec:	af00      	add	r7, sp, #0
    ceee:	4603      	mov	r3, r0
    cef0:	6039      	str	r1, [r7, #0]
    cef2:	71fb      	strb	r3, [r7, #7]
    cef4:	4613      	mov	r3, r2
    cef6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    cef8:	79bb      	ldrb	r3, [r7, #6]
    cefa:	2b00      	cmp	r3, #0
    cefc:	d006      	beq.n	cf0c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    cefe:	79fb      	ldrb	r3, [r7, #7]
    cf00:	683a      	ldr	r2, [r7, #0]
    cf02:	4619      	mov	r1, r3
    cf04:	4806      	ldr	r0, [pc, #24]	; (cf20 <_gpio_set_level+0x38>)
    cf06:	4b07      	ldr	r3, [pc, #28]	; (cf24 <_gpio_set_level+0x3c>)
    cf08:	4798      	blx	r3
}
    cf0a:	e005      	b.n	cf18 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    cf0c:	79fb      	ldrb	r3, [r7, #7]
    cf0e:	683a      	ldr	r2, [r7, #0]
    cf10:	4619      	mov	r1, r3
    cf12:	4803      	ldr	r0, [pc, #12]	; (cf20 <_gpio_set_level+0x38>)
    cf14:	4b04      	ldr	r3, [pc, #16]	; (cf28 <_gpio_set_level+0x40>)
    cf16:	4798      	blx	r3
}
    cf18:	bf00      	nop
    cf1a:	3708      	adds	r7, #8
    cf1c:	46bd      	mov	sp, r7
    cf1e:	bd80      	pop	{r7, pc}
    cf20:	41008000 	.word	0x41008000
    cf24:	0000cc71 	.word	0x0000cc71
    cf28:	0000cc99 	.word	0x0000cc99

0000cf2c <_gpio_set_pin_function>:
{
    cf2c:	b590      	push	{r4, r7, lr}
    cf2e:	b085      	sub	sp, #20
    cf30:	af00      	add	r7, sp, #0
    cf32:	6078      	str	r0, [r7, #4]
    cf34:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    cf36:	687b      	ldr	r3, [r7, #4]
    cf38:	095b      	lsrs	r3, r3, #5
    cf3a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    cf3c:	687b      	ldr	r3, [r7, #4]
    cf3e:	b2db      	uxtb	r3, r3
    cf40:	f003 031f 	and.w	r3, r3, #31
    cf44:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    cf46:	683b      	ldr	r3, [r7, #0]
    cf48:	f1b3 3fff 	cmp.w	r3, #4294967295
    cf4c:	d106      	bne.n	cf5c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    cf4e:	7bba      	ldrb	r2, [r7, #14]
    cf50:	7bf9      	ldrb	r1, [r7, #15]
    cf52:	2300      	movs	r3, #0
    cf54:	4812      	ldr	r0, [pc, #72]	; (cfa0 <_gpio_set_pin_function+0x74>)
    cf56:	4c13      	ldr	r4, [pc, #76]	; (cfa4 <_gpio_set_pin_function+0x78>)
    cf58:	47a0      	blx	r4
}
    cf5a:	e01d      	b.n	cf98 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    cf5c:	7bba      	ldrb	r2, [r7, #14]
    cf5e:	7bf9      	ldrb	r1, [r7, #15]
    cf60:	2301      	movs	r3, #1
    cf62:	480f      	ldr	r0, [pc, #60]	; (cfa0 <_gpio_set_pin_function+0x74>)
    cf64:	4c0f      	ldr	r4, [pc, #60]	; (cfa4 <_gpio_set_pin_function+0x78>)
    cf66:	47a0      	blx	r4
		if (pin & 1) {
    cf68:	7bbb      	ldrb	r3, [r7, #14]
    cf6a:	f003 0301 	and.w	r3, r3, #1
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d009      	beq.n	cf86 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    cf72:	7bbb      	ldrb	r3, [r7, #14]
    cf74:	085b      	lsrs	r3, r3, #1
    cf76:	b2da      	uxtb	r2, r3
    cf78:	683b      	ldr	r3, [r7, #0]
    cf7a:	b2db      	uxtb	r3, r3
    cf7c:	7bf9      	ldrb	r1, [r7, #15]
    cf7e:	4808      	ldr	r0, [pc, #32]	; (cfa0 <_gpio_set_pin_function+0x74>)
    cf80:	4c09      	ldr	r4, [pc, #36]	; (cfa8 <_gpio_set_pin_function+0x7c>)
    cf82:	47a0      	blx	r4
}
    cf84:	e008      	b.n	cf98 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    cf86:	7bbb      	ldrb	r3, [r7, #14]
    cf88:	085b      	lsrs	r3, r3, #1
    cf8a:	b2da      	uxtb	r2, r3
    cf8c:	683b      	ldr	r3, [r7, #0]
    cf8e:	b2db      	uxtb	r3, r3
    cf90:	7bf9      	ldrb	r1, [r7, #15]
    cf92:	4803      	ldr	r0, [pc, #12]	; (cfa0 <_gpio_set_pin_function+0x74>)
    cf94:	4c05      	ldr	r4, [pc, #20]	; (cfac <_gpio_set_pin_function+0x80>)
    cf96:	47a0      	blx	r4
}
    cf98:	bf00      	nop
    cf9a:	3714      	adds	r7, #20
    cf9c:	46bd      	mov	sp, r7
    cf9e:	bd90      	pop	{r4, r7, pc}
    cfa0:	41008000 	.word	0x41008000
    cfa4:	0000cd7f 	.word	0x0000cd7f
    cfa8:	0000cd21 	.word	0x0000cd21
    cfac:	0000ccc1 	.word	0x0000ccc1

0000cfb0 <gpio_set_pin_function>:
{
    cfb0:	b580      	push	{r7, lr}
    cfb2:	b082      	sub	sp, #8
    cfb4:	af00      	add	r7, sp, #0
    cfb6:	6078      	str	r0, [r7, #4]
    cfb8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    cfba:	6839      	ldr	r1, [r7, #0]
    cfbc:	6878      	ldr	r0, [r7, #4]
    cfbe:	4b03      	ldr	r3, [pc, #12]	; (cfcc <gpio_set_pin_function+0x1c>)
    cfc0:	4798      	blx	r3
}
    cfc2:	bf00      	nop
    cfc4:	3708      	adds	r7, #8
    cfc6:	46bd      	mov	sp, r7
    cfc8:	bd80      	pop	{r7, pc}
    cfca:	bf00      	nop
    cfcc:	0000cf2d 	.word	0x0000cf2d

0000cfd0 <gpio_set_pin_direction>:
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	b082      	sub	sp, #8
    cfd4:	af00      	add	r7, sp, #0
    cfd6:	4603      	mov	r3, r0
    cfd8:	460a      	mov	r2, r1
    cfda:	71fb      	strb	r3, [r7, #7]
    cfdc:	4613      	mov	r3, r2
    cfde:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    cfe0:	79fb      	ldrb	r3, [r7, #7]
    cfe2:	095b      	lsrs	r3, r3, #5
    cfe4:	b2d8      	uxtb	r0, r3
    cfe6:	79fb      	ldrb	r3, [r7, #7]
    cfe8:	f003 031f 	and.w	r3, r3, #31
    cfec:	2201      	movs	r2, #1
    cfee:	fa02 f303 	lsl.w	r3, r2, r3
    cff2:	79ba      	ldrb	r2, [r7, #6]
    cff4:	4619      	mov	r1, r3
    cff6:	4b03      	ldr	r3, [pc, #12]	; (d004 <gpio_set_pin_direction+0x34>)
    cff8:	4798      	blx	r3
}
    cffa:	bf00      	nop
    cffc:	3708      	adds	r7, #8
    cffe:	46bd      	mov	sp, r7
    d000:	bd80      	pop	{r7, pc}
    d002:	bf00      	nop
    d004:	0000ce01 	.word	0x0000ce01

0000d008 <gpio_set_pin_level>:
{
    d008:	b580      	push	{r7, lr}
    d00a:	b082      	sub	sp, #8
    d00c:	af00      	add	r7, sp, #0
    d00e:	4603      	mov	r3, r0
    d010:	460a      	mov	r2, r1
    d012:	71fb      	strb	r3, [r7, #7]
    d014:	4613      	mov	r3, r2
    d016:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d018:	79fb      	ldrb	r3, [r7, #7]
    d01a:	095b      	lsrs	r3, r3, #5
    d01c:	b2d8      	uxtb	r0, r3
    d01e:	79fb      	ldrb	r3, [r7, #7]
    d020:	f003 031f 	and.w	r3, r3, #31
    d024:	2201      	movs	r2, #1
    d026:	fa02 f303 	lsl.w	r3, r2, r3
    d02a:	79ba      	ldrb	r2, [r7, #6]
    d02c:	4619      	mov	r1, r3
    d02e:	4b03      	ldr	r3, [pc, #12]	; (d03c <gpio_set_pin_level+0x34>)
    d030:	4798      	blx	r3
}
    d032:	bf00      	nop
    d034:	3708      	adds	r7, #8
    d036:	46bd      	mov	sp, r7
    d038:	bd80      	pop	{r7, pc}
    d03a:	bf00      	nop
    d03c:	0000cee9 	.word	0x0000cee9

0000d040 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    d040:	b580      	push	{r7, lr}
    d042:	b082      	sub	sp, #8
    d044:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    d046:	2100      	movs	r1, #0
    d048:	2008      	movs	r0, #8
    d04a:	4b24      	ldr	r3, [pc, #144]	; (d0dc <QSPI_N25Q256_exit_xip+0x9c>)
    d04c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    d04e:	2100      	movs	r1, #0
    d050:	202b      	movs	r0, #43	; 0x2b
    d052:	4b22      	ldr	r3, [pc, #136]	; (d0dc <QSPI_N25Q256_exit_xip+0x9c>)
    d054:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    d056:	2100      	movs	r1, #0
    d058:	202a      	movs	r0, #42	; 0x2a
    d05a:	4b20      	ldr	r3, [pc, #128]	; (d0dc <QSPI_N25Q256_exit_xip+0x9c>)
    d05c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    d05e:	2102      	movs	r1, #2
    d060:	2008      	movs	r0, #8
    d062:	4b1f      	ldr	r3, [pc, #124]	; (d0e0 <QSPI_N25Q256_exit_xip+0xa0>)
    d064:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    d066:	2102      	movs	r1, #2
    d068:	202b      	movs	r0, #43	; 0x2b
    d06a:	4b1d      	ldr	r3, [pc, #116]	; (d0e0 <QSPI_N25Q256_exit_xip+0xa0>)
    d06c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    d06e:	2102      	movs	r1, #2
    d070:	202a      	movs	r0, #42	; 0x2a
    d072:	4b1b      	ldr	r3, [pc, #108]	; (d0e0 <QSPI_N25Q256_exit_xip+0xa0>)
    d074:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d076:	2101      	movs	r1, #1
    d078:	2008      	movs	r0, #8
    d07a:	4b1a      	ldr	r3, [pc, #104]	; (d0e4 <QSPI_N25Q256_exit_xip+0xa4>)
    d07c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d07e:	2100      	movs	r1, #0
    d080:	202b      	movs	r0, #43	; 0x2b
    d082:	4b18      	ldr	r3, [pc, #96]	; (d0e4 <QSPI_N25Q256_exit_xip+0xa4>)
    d084:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d086:	2100      	movs	r1, #0
    d088:	202a      	movs	r0, #42	; 0x2a
    d08a:	4b16      	ldr	r3, [pc, #88]	; (d0e4 <QSPI_N25Q256_exit_xip+0xa4>)
    d08c:	4798      	blx	r3

	delay_us(1);
    d08e:	2001      	movs	r0, #1
    d090:	4b15      	ldr	r3, [pc, #84]	; (d0e8 <QSPI_N25Q256_exit_xip+0xa8>)
    d092:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d094:	2300      	movs	r3, #0
    d096:	607b      	str	r3, [r7, #4]
    d098:	e010      	b.n	d0bc <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    d09a:	2101      	movs	r1, #1
    d09c:	202a      	movs	r0, #42	; 0x2a
    d09e:	4b11      	ldr	r3, [pc, #68]	; (d0e4 <QSPI_N25Q256_exit_xip+0xa4>)
    d0a0:	4798      	blx	r3
		delay_us(1);
    d0a2:	2001      	movs	r0, #1
    d0a4:	4b10      	ldr	r3, [pc, #64]	; (d0e8 <QSPI_N25Q256_exit_xip+0xa8>)
    d0a6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d0a8:	2100      	movs	r1, #0
    d0aa:	202a      	movs	r0, #42	; 0x2a
    d0ac:	4b0d      	ldr	r3, [pc, #52]	; (d0e4 <QSPI_N25Q256_exit_xip+0xa4>)
    d0ae:	4798      	blx	r3
		delay_us(1);
    d0b0:	2001      	movs	r0, #1
    d0b2:	4b0d      	ldr	r3, [pc, #52]	; (d0e8 <QSPI_N25Q256_exit_xip+0xa8>)
    d0b4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d0b6:	687b      	ldr	r3, [r7, #4]
    d0b8:	3301      	adds	r3, #1
    d0ba:	607b      	str	r3, [r7, #4]
    d0bc:	687b      	ldr	r3, [r7, #4]
    d0be:	2b06      	cmp	r3, #6
    d0c0:	ddeb      	ble.n	d09a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d0c2:	2101      	movs	r1, #1
    d0c4:	202b      	movs	r0, #43	; 0x2b
    d0c6:	4b07      	ldr	r3, [pc, #28]	; (d0e4 <QSPI_N25Q256_exit_xip+0xa4>)
    d0c8:	4798      	blx	r3
	delay_us(1);
    d0ca:	2001      	movs	r0, #1
    d0cc:	4b06      	ldr	r3, [pc, #24]	; (d0e8 <QSPI_N25Q256_exit_xip+0xa8>)
    d0ce:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d0d0:	4b06      	ldr	r3, [pc, #24]	; (d0ec <QSPI_N25Q256_exit_xip+0xac>)
    d0d2:	4798      	blx	r3
}
    d0d4:	bf00      	nop
    d0d6:	3708      	adds	r7, #8
    d0d8:	46bd      	mov	sp, r7
    d0da:	bd80      	pop	{r7, pc}
    d0dc:	0000cfb1 	.word	0x0000cfb1
    d0e0:	0000cfd1 	.word	0x0000cfd1
    d0e4:	0000d009 	.word	0x0000d009
    d0e8:	00003695 	.word	0x00003695
    d0ec:	00002359 	.word	0x00002359

0000d0f0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d0f0:	b598      	push	{r3, r4, r7, lr}
    d0f2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d0f4:	4806      	ldr	r0, [pc, #24]	; (d110 <spi_nor_flash_init+0x20>)
    d0f6:	4b07      	ldr	r3, [pc, #28]	; (d114 <spi_nor_flash_init+0x24>)
    d0f8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d0fa:	2300      	movs	r3, #0
    d0fc:	4a06      	ldr	r2, [pc, #24]	; (d118 <spi_nor_flash_init+0x28>)
    d0fe:	4904      	ldr	r1, [pc, #16]	; (d110 <spi_nor_flash_init+0x20>)
    d100:	4806      	ldr	r0, [pc, #24]	; (d11c <spi_nor_flash_init+0x2c>)
    d102:	4c07      	ldr	r4, [pc, #28]	; (d120 <spi_nor_flash_init+0x30>)
    d104:	47a0      	blx	r4
    d106:	4602      	mov	r2, r0
    d108:	4b06      	ldr	r3, [pc, #24]	; (d124 <spi_nor_flash_init+0x34>)
    d10a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d10c:	bf00      	nop
    d10e:	bd98      	pop	{r3, r4, r7, pc}
    d110:	2000dfe8 	.word	0x2000dfe8
    d114:	00003bcd 	.word	0x00003bcd
    d118:	0000d041 	.word	0x0000d041
    d11c:	2000271c 	.word	0x2000271c
    d120:	0000d55d 	.word	0x0000d55d
    d124:	2000e1e8 	.word	0x2000e1e8

0000d128 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    d128:	b580      	push	{r7, lr}
    d12a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    d12c:	4805      	ldr	r0, [pc, #20]	; (d144 <cdc_device_acm_init+0x1c>)
    d12e:	4b06      	ldr	r3, [pc, #24]	; (d148 <cdc_device_acm_init+0x20>)
    d130:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    d132:	4b06      	ldr	r3, [pc, #24]	; (d14c <cdc_device_acm_init+0x24>)
    d134:	4798      	blx	r3

	usbdc_start(single_desc);
    d136:	4806      	ldr	r0, [pc, #24]	; (d150 <cdc_device_acm_init+0x28>)
    d138:	4b06      	ldr	r3, [pc, #24]	; (d154 <cdc_device_acm_init+0x2c>)
    d13a:	4798      	blx	r3
	usbdc_attach();
    d13c:	4b06      	ldr	r3, [pc, #24]	; (d158 <cdc_device_acm_init+0x30>)
    d13e:	4798      	blx	r3
}
    d140:	bf00      	nop
    d142:	bd80      	pop	{r7, pc}
    d144:	2000276c 	.word	0x2000276c
    d148:	0000ec85 	.word	0x0000ec85
    d14c:	0000defd 	.word	0x0000defd
    d150:	20000200 	.word	0x20000200
    d154:	0000ed21 	.word	0x0000ed21
    d158:	0000ed71 	.word	0x0000ed71

0000d15c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    d15c:	b580      	push	{r7, lr}
    d15e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    d160:	4b01      	ldr	r3, [pc, #4]	; (d168 <usb_init+0xc>)
    d162:	4798      	blx	r3
}
    d164:	bf00      	nop
    d166:	bd80      	pop	{r7, pc}
    d168:	0000d129 	.word	0x0000d129

0000d16c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    d16c:	b480      	push	{r7}
    d16e:	b085      	sub	sp, #20
    d170:	af00      	add	r7, sp, #0
    d172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d174:	f3ef 8310 	mrs	r3, PRIMASK
    d178:	60fb      	str	r3, [r7, #12]
  return(result);
    d17a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d180:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d182:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    d186:	bf00      	nop
    d188:	3714      	adds	r7, #20
    d18a:	46bd      	mov	sp, r7
    d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d190:	4770      	bx	lr

0000d192 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    d192:	b480      	push	{r7}
    d194:	b085      	sub	sp, #20
    d196:	af00      	add	r7, sp, #0
    d198:	6078      	str	r0, [r7, #4]
    d19a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	681b      	ldr	r3, [r3, #0]
    d1a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d1a4:	68fb      	ldr	r3, [r7, #12]
    d1a6:	f383 8810 	msr	PRIMASK, r3
}
    d1aa:	bf00      	nop
    d1ac:	3714      	adds	r7, #20
    d1ae:	46bd      	mov	sp, r7
    d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1b4:	4770      	bx	lr
	...

0000d1b8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d1b8:	b580      	push	{r7, lr}
    d1ba:	b08c      	sub	sp, #48	; 0x30
    d1bc:	af00      	add	r7, sp, #0
    d1be:	6078      	str	r0, [r7, #4]
    d1c0:	460b      	mov	r3, r1
    d1c2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d1c4:	687b      	ldr	r3, [r7, #4]
    d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d1c8:	687b      	ldr	r3, [r7, #4]
    d1ca:	681b      	ldr	r3, [r3, #0]
    d1cc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d1ce:	f107 030c 	add.w	r3, r7, #12
    d1d2:	2200      	movs	r2, #0
    d1d4:	601a      	str	r2, [r3, #0]
    d1d6:	605a      	str	r2, [r3, #4]
    d1d8:	609a      	str	r2, [r3, #8]
    d1da:	60da      	str	r2, [r3, #12]
    d1dc:	611a      	str	r2, [r3, #16]
    d1de:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1e2:	7b1b      	ldrb	r3, [r3, #12]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d001      	beq.n	d1ec <n25q256a_xip_confirm+0x34>
    d1e8:	2206      	movs	r2, #6
    d1ea:	e000      	b.n	d1ee <n25q256a_xip_confirm+0x36>
    d1ec:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d1ee:	7b3b      	ldrb	r3, [r7, #12]
    d1f0:	f362 0302 	bfi	r3, r2, #0, #3
    d1f4:	733b      	strb	r3, [r7, #12]
    d1f6:	7b3b      	ldrb	r3, [r7, #12]
    d1f8:	f043 0310 	orr.w	r3, r3, #16
    d1fc:	733b      	strb	r3, [r7, #12]
    d1fe:	7b3b      	ldrb	r3, [r7, #12]
    d200:	f043 0320 	orr.w	r3, r3, #32
    d204:	733b      	strb	r3, [r7, #12]
    d206:	7b3b      	ldrb	r3, [r7, #12]
    d208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d20c:	733b      	strb	r3, [r7, #12]
    d20e:	7b3b      	ldrb	r3, [r7, #12]
    d210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d214:	733b      	strb	r3, [r7, #12]
    d216:	7b7b      	ldrb	r3, [r7, #13]
    d218:	f043 0303 	orr.w	r3, r3, #3
    d21c:	737b      	strb	r3, [r7, #13]
    d21e:	7b7b      	ldrb	r3, [r7, #13]
    d220:	2201      	movs	r2, #1
    d222:	f362 1305 	bfi	r3, r2, #4, #2
    d226:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d22a:	7b1b      	ldrb	r3, [r3, #12]
    d22c:	2b00      	cmp	r3, #0
    d22e:	d001      	beq.n	d234 <n25q256a_xip_confirm+0x7c>
    d230:	2208      	movs	r2, #8
    d232:	e000      	b.n	d236 <n25q256a_xip_confirm+0x7e>
    d234:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d236:	7bbb      	ldrb	r3, [r7, #14]
    d238:	f362 0304 	bfi	r3, r2, #0, #5
    d23c:	73bb      	strb	r3, [r7, #14]
    d23e:	230b      	movs	r3, #11
    d240:	743b      	strb	r3, [r7, #16]
    d242:	78fb      	ldrb	r3, [r7, #3]
    d244:	2b00      	cmp	r3, #0
    d246:	d001      	beq.n	d24c <n25q256a_xip_confirm+0x94>
    d248:	2300      	movs	r3, #0
    d24a:	e000      	b.n	d24e <n25q256a_xip_confirm+0x96>
    d24c:	23ff      	movs	r3, #255	; 0xff
    d24e:	747b      	strb	r3, [r7, #17]
    d250:	2301      	movs	r3, #1
    d252:	61bb      	str	r3, [r7, #24]
    d254:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d258:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d25a:	f107 030c 	add.w	r3, r7, #12
    d25e:	4619      	mov	r1, r3
    d260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d262:	4b07      	ldr	r3, [pc, #28]	; (d280 <n25q256a_xip_confirm+0xc8>)
    d264:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d266:	78fb      	ldrb	r3, [r7, #3]
    d268:	2b00      	cmp	r3, #0
    d26a:	d001      	beq.n	d270 <n25q256a_xip_confirm+0xb8>
    d26c:	2202      	movs	r2, #2
    d26e:	e000      	b.n	d272 <n25q256a_xip_confirm+0xba>
    d270:	2201      	movs	r2, #1
    d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d274:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d276:	2300      	movs	r3, #0
}
    d278:	4618      	mov	r0, r3
    d27a:	3730      	adds	r7, #48	; 0x30
    d27c:	46bd      	mov	sp, r7
    d27e:	bd80      	pop	{r7, pc}
    d280:	00003c45 	.word	0x00003c45

0000d284 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d284:	b580      	push	{r7, lr}
    d286:	b08c      	sub	sp, #48	; 0x30
    d288:	af00      	add	r7, sp, #0
    d28a:	6078      	str	r0, [r7, #4]
    d28c:	460b      	mov	r3, r1
    d28e:	70fb      	strb	r3, [r7, #3]
    d290:	4613      	mov	r3, r2
    d292:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d294:	2300      	movs	r3, #0
    d296:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d298:	687b      	ldr	r3, [r7, #4]
    d29a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d29c:	687b      	ldr	r3, [r7, #4]
    d29e:	681b      	ldr	r3, [r3, #0]
    d2a0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d2a2:	f107 030c 	add.w	r3, r7, #12
    d2a6:	2200      	movs	r2, #0
    d2a8:	601a      	str	r2, [r3, #0]
    d2aa:	605a      	str	r2, [r3, #4]
    d2ac:	609a      	str	r2, [r3, #8]
    d2ae:	60da      	str	r2, [r3, #12]
    d2b0:	611a      	str	r2, [r3, #16]
    d2b2:	615a      	str	r2, [r3, #20]
    d2b4:	78fb      	ldrb	r3, [r7, #3]
    d2b6:	f003 0307 	and.w	r3, r3, #7
    d2ba:	b2da      	uxtb	r2, r3
    d2bc:	7b3b      	ldrb	r3, [r7, #12]
    d2be:	f362 0302 	bfi	r3, r2, #0, #3
    d2c2:	733b      	strb	r3, [r7, #12]
    d2c4:	7b3b      	ldrb	r3, [r7, #12]
    d2c6:	f043 0310 	orr.w	r3, r3, #16
    d2ca:	733b      	strb	r3, [r7, #12]
    d2cc:	7b3b      	ldrb	r3, [r7, #12]
    d2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d2d2:	733b      	strb	r3, [r7, #12]
    d2d4:	78bb      	ldrb	r3, [r7, #2]
    d2d6:	743b      	strb	r3, [r7, #16]
    d2d8:	2301      	movs	r3, #1
    d2da:	61bb      	str	r3, [r7, #24]
    d2dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d2e0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2e4:	7b5b      	ldrb	r3, [r3, #13]
    d2e6:	2b00      	cmp	r3, #0
    d2e8:	d003      	beq.n	d2f2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d2ea:	2100      	movs	r1, #0
    d2ec:	6878      	ldr	r0, [r7, #4]
    d2ee:	4b0a      	ldr	r3, [pc, #40]	; (d318 <n25q256a_read_reg+0x94>)
    d2f0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d2f2:	f107 030c 	add.w	r3, r7, #12
    d2f6:	4619      	mov	r1, r3
    d2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d2fa:	4b08      	ldr	r3, [pc, #32]	; (d31c <n25q256a_read_reg+0x98>)
    d2fc:	4798      	blx	r3
	if (n25q->xip_mode) {
    d2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d300:	7b5b      	ldrb	r3, [r3, #13]
    d302:	2b00      	cmp	r3, #0
    d304:	d003      	beq.n	d30e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d306:	2101      	movs	r1, #1
    d308:	6878      	ldr	r0, [r7, #4]
    d30a:	4b03      	ldr	r3, [pc, #12]	; (d318 <n25q256a_read_reg+0x94>)
    d30c:	4798      	blx	r3
	}
	return status;
    d30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d310:	4618      	mov	r0, r3
    d312:	3730      	adds	r7, #48	; 0x30
    d314:	46bd      	mov	sp, r7
    d316:	bd80      	pop	{r7, pc}
    d318:	0000d1b9 	.word	0x0000d1b9
    d31c:	00003c45 	.word	0x00003c45

0000d320 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d320:	b580      	push	{r7, lr}
    d322:	b08c      	sub	sp, #48	; 0x30
    d324:	af00      	add	r7, sp, #0
    d326:	60f8      	str	r0, [r7, #12]
    d328:	607b      	str	r3, [r7, #4]
    d32a:	460b      	mov	r3, r1
    d32c:	72fb      	strb	r3, [r7, #11]
    d32e:	4613      	mov	r3, r2
    d330:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d332:	68fb      	ldr	r3, [r7, #12]
    d334:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d336:	68fb      	ldr	r3, [r7, #12]
    d338:	681b      	ldr	r3, [r3, #0]
    d33a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d33c:	f107 0310 	add.w	r3, r7, #16
    d340:	2200      	movs	r2, #0
    d342:	601a      	str	r2, [r3, #0]
    d344:	605a      	str	r2, [r3, #4]
    d346:	609a      	str	r2, [r3, #8]
    d348:	60da      	str	r2, [r3, #12]
    d34a:	611a      	str	r2, [r3, #16]
    d34c:	615a      	str	r2, [r3, #20]
    d34e:	7afb      	ldrb	r3, [r7, #11]
    d350:	f003 0307 	and.w	r3, r3, #7
    d354:	b2da      	uxtb	r2, r3
    d356:	7c3b      	ldrb	r3, [r7, #16]
    d358:	f362 0302 	bfi	r3, r2, #0, #3
    d35c:	743b      	strb	r3, [r7, #16]
    d35e:	7c3b      	ldrb	r3, [r7, #16]
    d360:	f043 0310 	orr.w	r3, r3, #16
    d364:	743b      	strb	r3, [r7, #16]
    d366:	7c3b      	ldrb	r3, [r7, #16]
    d368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d36c:	743b      	strb	r3, [r7, #16]
    d36e:	7c7b      	ldrb	r3, [r7, #17]
    d370:	2202      	movs	r2, #2
    d372:	f362 1305 	bfi	r3, r2, #4, #2
    d376:	747b      	strb	r3, [r7, #17]
    d378:	7abb      	ldrb	r3, [r7, #10]
    d37a:	753b      	strb	r3, [r7, #20]
    d37c:	2301      	movs	r3, #1
    d37e:	61fb      	str	r3, [r7, #28]
    d380:	1d3b      	adds	r3, r7, #4
    d382:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d386:	7b5b      	ldrb	r3, [r3, #13]
    d388:	2b00      	cmp	r3, #0
    d38a:	d003      	beq.n	d394 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d38c:	2100      	movs	r1, #0
    d38e:	68f8      	ldr	r0, [r7, #12]
    d390:	4b09      	ldr	r3, [pc, #36]	; (d3b8 <n25q256a_write_reg+0x98>)
    d392:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d394:	f107 0310 	add.w	r3, r7, #16
    d398:	4619      	mov	r1, r3
    d39a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d39c:	4b07      	ldr	r3, [pc, #28]	; (d3bc <n25q256a_write_reg+0x9c>)
    d39e:	4798      	blx	r3
	if (n25q->xip_mode) {
    d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d3a2:	7b5b      	ldrb	r3, [r3, #13]
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d003      	beq.n	d3b0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d3a8:	2101      	movs	r1, #1
    d3aa:	68f8      	ldr	r0, [r7, #12]
    d3ac:	4b02      	ldr	r3, [pc, #8]	; (d3b8 <n25q256a_write_reg+0x98>)
    d3ae:	4798      	blx	r3
	}
}
    d3b0:	bf00      	nop
    d3b2:	3730      	adds	r7, #48	; 0x30
    d3b4:	46bd      	mov	sp, r7
    d3b6:	bd80      	pop	{r7, pc}
    d3b8:	0000d1b9 	.word	0x0000d1b9
    d3bc:	00003c45 	.word	0x00003c45

0000d3c0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b090      	sub	sp, #64	; 0x40
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	6078      	str	r0, [r7, #4]
    d3c8:	460b      	mov	r3, r1
    d3ca:	70fb      	strb	r3, [r7, #3]
    d3cc:	4613      	mov	r3, r2
    d3ce:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	681b      	ldr	r3, [r3, #0]
    d3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d3d6:	78bb      	ldrb	r3, [r7, #2]
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d001      	beq.n	d3e0 <n25q256a_write_enable+0x20>
    d3dc:	2306      	movs	r3, #6
    d3de:	e000      	b.n	d3e2 <n25q256a_write_enable+0x22>
    d3e0:	2304      	movs	r3, #4
    d3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d3e6:	f107 0320 	add.w	r3, r7, #32
    d3ea:	2200      	movs	r2, #0
    d3ec:	601a      	str	r2, [r3, #0]
    d3ee:	605a      	str	r2, [r3, #4]
    d3f0:	609a      	str	r2, [r3, #8]
    d3f2:	60da      	str	r2, [r3, #12]
    d3f4:	611a      	str	r2, [r3, #16]
    d3f6:	615a      	str	r2, [r3, #20]
    d3f8:	78fb      	ldrb	r3, [r7, #3]
    d3fa:	f003 0307 	and.w	r3, r3, #7
    d3fe:	b2da      	uxtb	r2, r3
    d400:	f897 3020 	ldrb.w	r3, [r7, #32]
    d404:	f362 0302 	bfi	r3, r2, #0, #3
    d408:	f887 3020 	strb.w	r3, [r7, #32]
    d40c:	f897 3020 	ldrb.w	r3, [r7, #32]
    d410:	f043 0310 	orr.w	r3, r3, #16
    d414:	f887 3020 	strb.w	r3, [r7, #32]
    d418:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d41c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d420:	f107 0308 	add.w	r3, r7, #8
    d424:	2200      	movs	r2, #0
    d426:	601a      	str	r2, [r3, #0]
    d428:	605a      	str	r2, [r3, #4]
    d42a:	609a      	str	r2, [r3, #8]
    d42c:	60da      	str	r2, [r3, #12]
    d42e:	611a      	str	r2, [r3, #16]
    d430:	615a      	str	r2, [r3, #20]
    d432:	78fb      	ldrb	r3, [r7, #3]
    d434:	f003 0307 	and.w	r3, r3, #7
    d438:	b2da      	uxtb	r2, r3
    d43a:	7a3b      	ldrb	r3, [r7, #8]
    d43c:	f362 0302 	bfi	r3, r2, #0, #3
    d440:	723b      	strb	r3, [r7, #8]
    d442:	7a3b      	ldrb	r3, [r7, #8]
    d444:	f043 0310 	orr.w	r3, r3, #16
    d448:	723b      	strb	r3, [r7, #8]
    d44a:	7a3b      	ldrb	r3, [r7, #8]
    d44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d450:	723b      	strb	r3, [r7, #8]
    d452:	2305      	movs	r3, #5
    d454:	733b      	strb	r3, [r7, #12]
    d456:	2301      	movs	r3, #1
    d458:	617b      	str	r3, [r7, #20]
    d45a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    d45e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    d460:	f107 0320 	add.w	r3, r7, #32
    d464:	4619      	mov	r1, r3
    d466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d468:	4b08      	ldr	r3, [pc, #32]	; (d48c <n25q256a_write_enable+0xcc>)
    d46a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    d46c:	f107 0308 	add.w	r3, r7, #8
    d470:	4619      	mov	r1, r3
    d472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d474:	4b05      	ldr	r3, [pc, #20]	; (d48c <n25q256a_write_enable+0xcc>)
    d476:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    d478:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    d47c:	f003 0302 	and.w	r3, r3, #2
    d480:	2b00      	cmp	r3, #0
    d482:	d0ed      	beq.n	d460 <n25q256a_write_enable+0xa0>
}
    d484:	bf00      	nop
    d486:	3740      	adds	r7, #64	; 0x40
    d488:	46bd      	mov	sp, r7
    d48a:	bd80      	pop	{r7, pc}
    d48c:	00003c45 	.word	0x00003c45

0000d490 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    d490:	b590      	push	{r4, r7, lr}
    d492:	b087      	sub	sp, #28
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    d498:	460b      	mov	r3, r1
    d49a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d4a0:	68fb      	ldr	r3, [r7, #12]
    d4a2:	7b1b      	ldrb	r3, [r3, #12]
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d001      	beq.n	d4ac <n25q256a_switch_mode+0x1c>
    d4a8:	2306      	movs	r3, #6
    d4aa:	e000      	b.n	d4ae <n25q256a_switch_mode+0x1e>
    d4ac:	2300      	movs	r3, #0
    d4ae:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d4b0:	7afb      	ldrb	r3, [r7, #11]
    d4b2:	2265      	movs	r2, #101	; 0x65
    d4b4:	4619      	mov	r1, r3
    d4b6:	6878      	ldr	r0, [r7, #4]
    d4b8:	4b25      	ldr	r3, [pc, #148]	; (d550 <n25q256a_switch_mode+0xc0>)
    d4ba:	4798      	blx	r3
    d4bc:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    d4be:	2300      	movs	r3, #0
    d4c0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    d4c2:	68fb      	ldr	r3, [r7, #12]
    d4c4:	7b1b      	ldrb	r3, [r3, #12]
    d4c6:	78fa      	ldrb	r2, [r7, #3]
    d4c8:	429a      	cmp	r2, r3
    d4ca:	d03d      	beq.n	d548 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    d4cc:	78fb      	ldrb	r3, [r7, #3]
    d4ce:	2b00      	cmp	r3, #0
    d4d0:	d00b      	beq.n	d4ea <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    d4d2:	697b      	ldr	r3, [r7, #20]
    d4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d011      	beq.n	d500 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    d4dc:	697b      	ldr	r3, [r7, #20]
    d4de:	f003 031f 	and.w	r3, r3, #31
    d4e2:	617b      	str	r3, [r7, #20]
			modify = 1;
    d4e4:	2301      	movs	r3, #1
    d4e6:	74fb      	strb	r3, [r7, #19]
    d4e8:	e00a      	b.n	d500 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    d4ea:	697b      	ldr	r3, [r7, #20]
    d4ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d105      	bne.n	d500 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d4f4:	697b      	ldr	r3, [r7, #20]
    d4f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d4fa:	617b      	str	r3, [r7, #20]
			modify = 1;
    d4fc:	2301      	movs	r3, #1
    d4fe:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d500:	7cfb      	ldrb	r3, [r7, #19]
    d502:	2b00      	cmp	r3, #0
    d504:	d021      	beq.n	d54a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d506:	68fb      	ldr	r3, [r7, #12]
    d508:	78fa      	ldrb	r2, [r7, #3]
    d50a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d50c:	7afb      	ldrb	r3, [r7, #11]
    d50e:	2201      	movs	r2, #1
    d510:	4619      	mov	r1, r3
    d512:	6878      	ldr	r0, [r7, #4]
    d514:	4b0f      	ldr	r3, [pc, #60]	; (d554 <n25q256a_switch_mode+0xc4>)
    d516:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d518:	7af9      	ldrb	r1, [r7, #11]
    d51a:	697b      	ldr	r3, [r7, #20]
    d51c:	2261      	movs	r2, #97	; 0x61
    d51e:	6878      	ldr	r0, [r7, #4]
    d520:	4c0d      	ldr	r4, [pc, #52]	; (d558 <n25q256a_switch_mode+0xc8>)
    d522:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d524:	78fb      	ldrb	r3, [r7, #3]
    d526:	2b00      	cmp	r3, #0
    d528:	d001      	beq.n	d52e <n25q256a_switch_mode+0x9e>
    d52a:	2306      	movs	r3, #6
    d52c:	e000      	b.n	d530 <n25q256a_switch_mode+0xa0>
    d52e:	2300      	movs	r3, #0
    d530:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d532:	7afb      	ldrb	r3, [r7, #11]
    d534:	2265      	movs	r2, #101	; 0x65
    d536:	4619      	mov	r1, r3
    d538:	6878      	ldr	r0, [r7, #4]
    d53a:	4b05      	ldr	r3, [pc, #20]	; (d550 <n25q256a_switch_mode+0xc0>)
    d53c:	4798      	blx	r3
    d53e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	78fa      	ldrb	r2, [r7, #3]
    d544:	731a      	strb	r2, [r3, #12]
    d546:	e000      	b.n	d54a <n25q256a_switch_mode+0xba>
		return;
    d548:	bf00      	nop
	}
}
    d54a:	371c      	adds	r7, #28
    d54c:	46bd      	mov	sp, r7
    d54e:	bd90      	pop	{r4, r7, pc}
    d550:	0000d285 	.word	0x0000d285
    d554:	0000d3c1 	.word	0x0000d3c1
    d558:	0000d321 	.word	0x0000d321

0000d55c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d55c:	b580      	push	{r7, lr}
    d55e:	b086      	sub	sp, #24
    d560:	af00      	add	r7, sp, #0
    d562:	60f8      	str	r0, [r7, #12]
    d564:	60b9      	str	r1, [r7, #8]
    d566:	607a      	str	r2, [r7, #4]
    d568:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d56a:	68fb      	ldr	r3, [r7, #12]
    d56c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d56e:	4a0c      	ldr	r2, [pc, #48]	; (d5a0 <n25q256a_construct+0x44>)
    d570:	68b9      	ldr	r1, [r7, #8]
    d572:	68f8      	ldr	r0, [r7, #12]
    d574:	4b0b      	ldr	r3, [pc, #44]	; (d5a4 <n25q256a_construct+0x48>)
    d576:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d578:	697b      	ldr	r3, [r7, #20]
    d57a:	2200      	movs	r2, #0
    d57c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d57e:	697b      	ldr	r3, [r7, #20]
    d580:	2200      	movs	r2, #0
    d582:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d584:	697b      	ldr	r3, [r7, #20]
    d586:	687a      	ldr	r2, [r7, #4]
    d588:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d58a:	78fb      	ldrb	r3, [r7, #3]
    d58c:	4619      	mov	r1, r3
    d58e:	68f8      	ldr	r0, [r7, #12]
    d590:	4b05      	ldr	r3, [pc, #20]	; (d5a8 <n25q256a_construct+0x4c>)
    d592:	4798      	blx	r3
	return me;
    d594:	68fb      	ldr	r3, [r7, #12]
}
    d596:	4618      	mov	r0, r3
    d598:	3718      	adds	r7, #24
    d59a:	46bd      	mov	sp, r7
    d59c:	bd80      	pop	{r7, pc}
    d59e:	bf00      	nop
    d5a0:	0001ba34 	.word	0x0001ba34
    d5a4:	0000da39 	.word	0x0000da39
    d5a8:	0000d491 	.word	0x0000d491

0000d5ac <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d5ac:	b580      	push	{r7, lr}
    d5ae:	b08c      	sub	sp, #48	; 0x30
    d5b0:	af00      	add	r7, sp, #0
    d5b2:	60f8      	str	r0, [r7, #12]
    d5b4:	60b9      	str	r1, [r7, #8]
    d5b6:	607a      	str	r2, [r7, #4]
    d5b8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d5ba:	68fb      	ldr	r3, [r7, #12]
    d5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d5be:	68fb      	ldr	r3, [r7, #12]
    d5c0:	681b      	ldr	r3, [r3, #0]
    d5c2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d5c4:	f107 0310 	add.w	r3, r7, #16
    d5c8:	2200      	movs	r2, #0
    d5ca:	601a      	str	r2, [r3, #0]
    d5cc:	605a      	str	r2, [r3, #4]
    d5ce:	609a      	str	r2, [r3, #8]
    d5d0:	60da      	str	r2, [r3, #12]
    d5d2:	611a      	str	r2, [r3, #16]
    d5d4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5d8:	7b1b      	ldrb	r3, [r3, #12]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d001      	beq.n	d5e2 <n25q256a_read+0x36>
    d5de:	2206      	movs	r2, #6
    d5e0:	e000      	b.n	d5e4 <n25q256a_read+0x38>
    d5e2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d5e4:	7c3b      	ldrb	r3, [r7, #16]
    d5e6:	f362 0302 	bfi	r3, r2, #0, #3
    d5ea:	743b      	strb	r3, [r7, #16]
    d5ec:	7c3b      	ldrb	r3, [r7, #16]
    d5ee:	f043 0310 	orr.w	r3, r3, #16
    d5f2:	743b      	strb	r3, [r7, #16]
    d5f4:	7c3b      	ldrb	r3, [r7, #16]
    d5f6:	f043 0320 	orr.w	r3, r3, #32
    d5fa:	743b      	strb	r3, [r7, #16]
    d5fc:	7c3b      	ldrb	r3, [r7, #16]
    d5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d602:	743b      	strb	r3, [r7, #16]
    d604:	7c7b      	ldrb	r3, [r7, #17]
    d606:	2201      	movs	r2, #1
    d608:	f362 1305 	bfi	r3, r2, #4, #2
    d60c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d610:	7b1b      	ldrb	r3, [r3, #12]
    d612:	2b00      	cmp	r3, #0
    d614:	d001      	beq.n	d61a <n25q256a_read+0x6e>
    d616:	220a      	movs	r2, #10
    d618:	e000      	b.n	d61c <n25q256a_read+0x70>
    d61a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d61c:	7cbb      	ldrb	r3, [r7, #18]
    d61e:	f362 0304 	bfi	r3, r2, #0, #5
    d622:	74bb      	strb	r3, [r7, #18]
    d624:	230b      	movs	r3, #11
    d626:	753b      	strb	r3, [r7, #20]
    d628:	687b      	ldr	r3, [r7, #4]
    d62a:	61bb      	str	r3, [r7, #24]
    d62c:	683b      	ldr	r3, [r7, #0]
    d62e:	61fb      	str	r3, [r7, #28]
    d630:	68bb      	ldr	r3, [r7, #8]
    d632:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d634:	f107 0310 	add.w	r3, r7, #16
    d638:	4619      	mov	r1, r3
    d63a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d63c:	4b03      	ldr	r3, [pc, #12]	; (d64c <n25q256a_read+0xa0>)
    d63e:	4798      	blx	r3
	return ERR_NONE;
    d640:	2300      	movs	r3, #0
}
    d642:	4618      	mov	r0, r3
    d644:	3730      	adds	r7, #48	; 0x30
    d646:	46bd      	mov	sp, r7
    d648:	bd80      	pop	{r7, pc}
    d64a:	bf00      	nop
    d64c:	00003c45 	.word	0x00003c45

0000d650 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d650:	b580      	push	{r7, lr}
    d652:	b08c      	sub	sp, #48	; 0x30
    d654:	af00      	add	r7, sp, #0
    d656:	60f8      	str	r0, [r7, #12]
    d658:	60b9      	str	r1, [r7, #8]
    d65a:	607a      	str	r2, [r7, #4]
    d65c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d65e:	68fb      	ldr	r3, [r7, #12]
    d660:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d662:	68fb      	ldr	r3, [r7, #12]
    d664:	681b      	ldr	r3, [r3, #0]
    d666:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d668:	f107 0310 	add.w	r3, r7, #16
    d66c:	2200      	movs	r2, #0
    d66e:	601a      	str	r2, [r3, #0]
    d670:	605a      	str	r2, [r3, #4]
    d672:	609a      	str	r2, [r3, #8]
    d674:	60da      	str	r2, [r3, #12]
    d676:	611a      	str	r2, [r3, #16]
    d678:	615a      	str	r2, [r3, #20]
    d67a:	7c3b      	ldrb	r3, [r7, #16]
    d67c:	f043 0310 	orr.w	r3, r3, #16
    d680:	743b      	strb	r3, [r7, #16]
    d682:	7c3b      	ldrb	r3, [r7, #16]
    d684:	f043 0320 	orr.w	r3, r3, #32
    d688:	743b      	strb	r3, [r7, #16]
    d68a:	7c3b      	ldrb	r3, [r7, #16]
    d68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d690:	743b      	strb	r3, [r7, #16]
    d692:	7c7b      	ldrb	r3, [r7, #17]
    d694:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d698:	747b      	strb	r3, [r7, #17]
    d69a:	2302      	movs	r3, #2
    d69c:	753b      	strb	r3, [r7, #20]
    d69e:	687b      	ldr	r3, [r7, #4]
    d6a0:	61bb      	str	r3, [r7, #24]
    d6a2:	683b      	ldr	r3, [r7, #0]
    d6a4:	61fb      	str	r3, [r7, #28]
    d6a6:	68bb      	ldr	r3, [r7, #8]
    d6a8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d6ac:	7b1b      	ldrb	r3, [r3, #12]
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	d001      	beq.n	d6b6 <n25q256a_write+0x66>
    d6b2:	2206      	movs	r2, #6
    d6b4:	e000      	b.n	d6b8 <n25q256a_write+0x68>
    d6b6:	2200      	movs	r2, #0
    d6b8:	7c3b      	ldrb	r3, [r7, #16]
    d6ba:	f362 0302 	bfi	r3, r2, #0, #3
    d6be:	743b      	strb	r3, [r7, #16]
	while (length) {
    d6c0:	e035      	b.n	d72e <n25q256a_write+0xde>
		cmd.address = address;
    d6c2:	687b      	ldr	r3, [r7, #4]
    d6c4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    d6c6:	683b      	ldr	r3, [r7, #0]
    d6c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d6cc:	d802      	bhi.n	d6d4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    d6ce:	683b      	ldr	r3, [r7, #0]
    d6d0:	61fb      	str	r3, [r7, #28]
    d6d2:	e002      	b.n	d6da <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    d6d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    d6d8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d6da:	7c3b      	ldrb	r3, [r7, #16]
    d6dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6e0:	b2db      	uxtb	r3, r3
    d6e2:	2201      	movs	r2, #1
    d6e4:	4619      	mov	r1, r3
    d6e6:	68f8      	ldr	r0, [r7, #12]
    d6e8:	4b19      	ldr	r3, [pc, #100]	; (d750 <n25q256a_write+0x100>)
    d6ea:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    d6ec:	f107 0310 	add.w	r3, r7, #16
    d6f0:	4619      	mov	r1, r3
    d6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d6f4:	4b17      	ldr	r3, [pc, #92]	; (d754 <n25q256a_write+0x104>)
    d6f6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d6f8:	bf00      	nop
    d6fa:	7c3b      	ldrb	r3, [r7, #16]
    d6fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d700:	b2db      	uxtb	r3, r3
    d702:	2270      	movs	r2, #112	; 0x70
    d704:	4619      	mov	r1, r3
    d706:	68f8      	ldr	r0, [r7, #12]
    d708:	4b13      	ldr	r3, [pc, #76]	; (d758 <n25q256a_write+0x108>)
    d70a:	4798      	blx	r3
    d70c:	4603      	mov	r3, r0
    d70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d712:	2b00      	cmp	r3, #0
    d714:	d0f1      	beq.n	d6fa <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    d716:	6a3a      	ldr	r2, [r7, #32]
    d718:	69fb      	ldr	r3, [r7, #28]
    d71a:	4413      	add	r3, r2
    d71c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    d71e:	69fb      	ldr	r3, [r7, #28]
    d720:	683a      	ldr	r2, [r7, #0]
    d722:	1ad3      	subs	r3, r2, r3
    d724:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    d726:	69fb      	ldr	r3, [r7, #28]
    d728:	687a      	ldr	r2, [r7, #4]
    d72a:	4413      	add	r3, r2
    d72c:	607b      	str	r3, [r7, #4]
	while (length) {
    d72e:	683b      	ldr	r3, [r7, #0]
    d730:	2b00      	cmp	r3, #0
    d732:	d1c6      	bne.n	d6c2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d736:	7b5b      	ldrb	r3, [r3, #13]
    d738:	2b00      	cmp	r3, #0
    d73a:	d003      	beq.n	d744 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    d73c:	2101      	movs	r1, #1
    d73e:	68f8      	ldr	r0, [r7, #12]
    d740:	4b06      	ldr	r3, [pc, #24]	; (d75c <n25q256a_write+0x10c>)
    d742:	4798      	blx	r3
	}
	return ERR_NONE;
    d744:	2300      	movs	r3, #0
}
    d746:	4618      	mov	r0, r3
    d748:	3730      	adds	r7, #48	; 0x30
    d74a:	46bd      	mov	sp, r7
    d74c:	bd80      	pop	{r7, pc}
    d74e:	bf00      	nop
    d750:	0000d3c1 	.word	0x0000d3c1
    d754:	00003c45 	.word	0x00003c45
    d758:	0000d285 	.word	0x0000d285
    d75c:	0000d1b9 	.word	0x0000d1b9

0000d760 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    d760:	b580      	push	{r7, lr}
    d762:	b090      	sub	sp, #64	; 0x40
    d764:	af00      	add	r7, sp, #0
    d766:	60f8      	str	r0, [r7, #12]
    d768:	60b9      	str	r1, [r7, #8]
    d76a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d770:	68fb      	ldr	r3, [r7, #12]
    d772:	681b      	ldr	r3, [r3, #0]
    d774:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    d776:	f107 0314 	add.w	r3, r7, #20
    d77a:	2200      	movs	r2, #0
    d77c:	601a      	str	r2, [r3, #0]
    d77e:	605a      	str	r2, [r3, #4]
    d780:	609a      	str	r2, [r3, #8]
    d782:	60da      	str	r2, [r3, #12]
    d784:	611a      	str	r2, [r3, #16]
    d786:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d78a:	7b1b      	ldrb	r3, [r3, #12]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d001      	beq.n	d794 <n25q256a_erase+0x34>
    d790:	2206      	movs	r2, #6
    d792:	e000      	b.n	d796 <n25q256a_erase+0x36>
    d794:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    d796:	7d3b      	ldrb	r3, [r7, #20]
    d798:	f362 0302 	bfi	r3, r2, #0, #3
    d79c:	753b      	strb	r3, [r7, #20]
    d79e:	7d3b      	ldrb	r3, [r7, #20]
    d7a0:	f043 0310 	orr.w	r3, r3, #16
    d7a4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    d7a6:	687b      	ldr	r3, [r7, #4]
    d7a8:	4a56      	ldr	r2, [pc, #344]	; (d904 <n25q256a_erase+0x1a4>)
    d7aa:	4293      	cmp	r3, r2
    d7ac:	bf94      	ite	ls
    d7ae:	2301      	movls	r3, #1
    d7b0:	2300      	movhi	r3, #0
    d7b2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    d7b4:	7d3b      	ldrb	r3, [r7, #20]
    d7b6:	f362 1345 	bfi	r3, r2, #5, #1
    d7ba:	753b      	strb	r3, [r7, #20]
    d7bc:	7d7b      	ldrb	r3, [r7, #21]
    d7be:	2202      	movs	r2, #2
    d7c0:	f362 1305 	bfi	r3, r2, #4, #2
    d7c4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    d7c6:	68bb      	ldr	r3, [r7, #8]
    d7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    d7ca:	687b      	ldr	r3, [r7, #4]
    d7cc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    d7ce:	2300      	movs	r3, #0
    d7d0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    d7d2:	687b      	ldr	r3, [r7, #4]
    d7d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d104      	bne.n	d7e6 <n25q256a_erase+0x86>
    d7dc:	68bb      	ldr	r3, [r7, #8]
    d7de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d7e2:	2b00      	cmp	r3, #0
    d7e4:	d002      	beq.n	d7ec <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    d7e6:	f06f 030c 	mvn.w	r3, #12
    d7ea:	e087      	b.n	d8fc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    d7ec:	687b      	ldr	r3, [r7, #4]
    d7ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    d7f2:	d368      	bcc.n	d8c6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    d7f4:	23c7      	movs	r3, #199	; 0xc7
    d7f6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d7f8:	7d3b      	ldrb	r3, [r7, #20]
    d7fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7fe:	b2db      	uxtb	r3, r3
    d800:	2201      	movs	r2, #1
    d802:	4619      	mov	r1, r3
    d804:	68f8      	ldr	r0, [r7, #12]
    d806:	4b40      	ldr	r3, [pc, #256]	; (d908 <n25q256a_erase+0x1a8>)
    d808:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    d80a:	f107 0314 	add.w	r3, r7, #20
    d80e:	4619      	mov	r1, r3
    d810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d812:	4b3e      	ldr	r3, [pc, #248]	; (d90c <n25q256a_erase+0x1ac>)
    d814:	4798      	blx	r3
    d816:	e059      	b.n	d8cc <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    d818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d81a:	b29b      	uxth	r3, r3
    d81c:	2b00      	cmp	r3, #0
    d81e:	d11f      	bne.n	d860 <n25q256a_erase+0x100>
    d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d826:	d31b      	bcc.n	d860 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d82a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    d82c:	23d8      	movs	r3, #216	; 0xd8
    d82e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d830:	7d3b      	ldrb	r3, [r7, #20]
    d832:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d836:	b2db      	uxtb	r3, r3
    d838:	2201      	movs	r2, #1
    d83a:	4619      	mov	r1, r3
    d83c:	68f8      	ldr	r0, [r7, #12]
    d83e:	4b32      	ldr	r3, [pc, #200]	; (d908 <n25q256a_erase+0x1a8>)
    d840:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d842:	f107 0314 	add.w	r3, r7, #20
    d846:	4619      	mov	r1, r3
    d848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d84a:	4b30      	ldr	r3, [pc, #192]	; (d90c <n25q256a_erase+0x1ac>)
    d84c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d850:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d854:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d858:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d85c:	63bb      	str	r3, [r7, #56]	; 0x38
    d85e:	e023      	b.n	d8a8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d866:	d31b      	bcc.n	d8a0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d86a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d86c:	2320      	movs	r3, #32
    d86e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d870:	7d3b      	ldrb	r3, [r7, #20]
    d872:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d876:	b2db      	uxtb	r3, r3
    d878:	2201      	movs	r2, #1
    d87a:	4619      	mov	r1, r3
    d87c:	68f8      	ldr	r0, [r7, #12]
    d87e:	4b22      	ldr	r3, [pc, #136]	; (d908 <n25q256a_erase+0x1a8>)
    d880:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d882:	f107 0314 	add.w	r3, r7, #20
    d886:	4619      	mov	r1, r3
    d888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d88a:	4b20      	ldr	r3, [pc, #128]	; (d90c <n25q256a_erase+0x1ac>)
    d88c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d894:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d898:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d89c:	63bb      	str	r3, [r7, #56]	; 0x38
    d89e:	e003      	b.n	d8a8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d8a0:	f06f 030c 	mvn.w	r3, #12
    d8a4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d8a6:	e011      	b.n	d8cc <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d8a8:	bf00      	nop
    d8aa:	7d3b      	ldrb	r3, [r7, #20]
    d8ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d8b0:	b2db      	uxtb	r3, r3
    d8b2:	2270      	movs	r2, #112	; 0x70
    d8b4:	4619      	mov	r1, r3
    d8b6:	68f8      	ldr	r0, [r7, #12]
    d8b8:	4b15      	ldr	r3, [pc, #84]	; (d910 <n25q256a_erase+0x1b0>)
    d8ba:	4798      	blx	r3
    d8bc:	4603      	mov	r3, r0
    d8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d0f1      	beq.n	d8aa <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d1a5      	bne.n	d818 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d8cc:	bf00      	nop
    d8ce:	7d3b      	ldrb	r3, [r7, #20]
    d8d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d8d4:	b2db      	uxtb	r3, r3
    d8d6:	2270      	movs	r2, #112	; 0x70
    d8d8:	4619      	mov	r1, r3
    d8da:	68f8      	ldr	r0, [r7, #12]
    d8dc:	4b0c      	ldr	r3, [pc, #48]	; (d910 <n25q256a_erase+0x1b0>)
    d8de:	4798      	blx	r3
    d8e0:	4603      	mov	r3, r0
    d8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	d0f1      	beq.n	d8ce <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d8ec:	7b5b      	ldrb	r3, [r3, #13]
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	d003      	beq.n	d8fa <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d8f2:	2101      	movs	r1, #1
    d8f4:	68f8      	ldr	r0, [r7, #12]
    d8f6:	4b07      	ldr	r3, [pc, #28]	; (d914 <n25q256a_erase+0x1b4>)
    d8f8:	4798      	blx	r3
	}
	return rc;
    d8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d8fc:	4618      	mov	r0, r3
    d8fe:	3740      	adds	r7, #64	; 0x40
    d900:	46bd      	mov	sp, r7
    d902:	bd80      	pop	{r7, pc}
    d904:	001fffff 	.word	0x001fffff
    d908:	0000d3c1 	.word	0x0000d3c1
    d90c:	00003c45 	.word	0x00003c45
    d910:	0000d285 	.word	0x0000d285
    d914:	0000d1b9 	.word	0x0000d1b9

0000d918 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d918:	b590      	push	{r4, r7, lr}
    d91a:	b085      	sub	sp, #20
    d91c:	af00      	add	r7, sp, #0
    d91e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d920:	687b      	ldr	r3, [r7, #4]
    d922:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d924:	68fb      	ldr	r3, [r7, #12]
    d926:	7b1b      	ldrb	r3, [r3, #12]
    d928:	2b00      	cmp	r3, #0
    d92a:	d001      	beq.n	d930 <n25q256a_enable_xip+0x18>
    d92c:	2306      	movs	r3, #6
    d92e:	e000      	b.n	d932 <n25q256a_enable_xip+0x1a>
    d930:	2300      	movs	r3, #0
    d932:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d934:	68fb      	ldr	r3, [r7, #12]
    d936:	7b5b      	ldrb	r3, [r3, #13]
    d938:	2b00      	cmp	r3, #0
    d93a:	d129      	bne.n	d990 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d93c:	7afb      	ldrb	r3, [r7, #11]
    d93e:	2285      	movs	r2, #133	; 0x85
    d940:	4619      	mov	r1, r3
    d942:	6878      	ldr	r0, [r7, #4]
    d944:	4b15      	ldr	r3, [pc, #84]	; (d99c <n25q256a_enable_xip+0x84>)
    d946:	4798      	blx	r3
    d948:	4603      	mov	r3, r0
    d94a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d94c:	7abb      	ldrb	r3, [r7, #10]
    d94e:	f003 0308 	and.w	r3, r3, #8
    d952:	2b00      	cmp	r3, #0
    d954:	d015      	beq.n	d982 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d956:	7abb      	ldrb	r3, [r7, #10]
    d958:	f023 0308 	bic.w	r3, r3, #8
    d95c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d95e:	7abb      	ldrb	r3, [r7, #10]
    d960:	7af9      	ldrb	r1, [r7, #11]
    d962:	2281      	movs	r2, #129	; 0x81
    d964:	6878      	ldr	r0, [r7, #4]
    d966:	4c0e      	ldr	r4, [pc, #56]	; (d9a0 <n25q256a_enable_xip+0x88>)
    d968:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d96a:	bf00      	nop
    d96c:	7afb      	ldrb	r3, [r7, #11]
    d96e:	2270      	movs	r2, #112	; 0x70
    d970:	4619      	mov	r1, r3
    d972:	6878      	ldr	r0, [r7, #4]
    d974:	4b09      	ldr	r3, [pc, #36]	; (d99c <n25q256a_enable_xip+0x84>)
    d976:	4798      	blx	r3
    d978:	4603      	mov	r3, r0
    d97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d97e:	2b00      	cmp	r3, #0
    d980:	d0f4      	beq.n	d96c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d982:	68fb      	ldr	r3, [r7, #12]
    d984:	2201      	movs	r2, #1
    d986:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d988:	2101      	movs	r1, #1
    d98a:	6878      	ldr	r0, [r7, #4]
    d98c:	4b05      	ldr	r3, [pc, #20]	; (d9a4 <n25q256a_enable_xip+0x8c>)
    d98e:	4798      	blx	r3
	}
	return ERR_NONE;
    d990:	2300      	movs	r3, #0
}
    d992:	4618      	mov	r0, r3
    d994:	3714      	adds	r7, #20
    d996:	46bd      	mov	sp, r7
    d998:	bd90      	pop	{r4, r7, pc}
    d99a:	bf00      	nop
    d99c:	0000d285 	.word	0x0000d285
    d9a0:	0000d321 	.word	0x0000d321
    d9a4:	0000d1b9 	.word	0x0000d1b9

0000d9a8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d9a8:	b580      	push	{r7, lr}
    d9aa:	b086      	sub	sp, #24
    d9ac:	af00      	add	r7, sp, #0
    d9ae:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d9b4:	687b      	ldr	r3, [r7, #4]
    d9b6:	681b      	ldr	r3, [r3, #0]
    d9b8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d9ba:	697b      	ldr	r3, [r7, #20]
    d9bc:	7b1b      	ldrb	r3, [r3, #12]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d001      	beq.n	d9c6 <n25q256a_disable_xip+0x1e>
    d9c2:	2306      	movs	r3, #6
    d9c4:	e000      	b.n	d9c8 <n25q256a_disable_xip+0x20>
    d9c6:	2300      	movs	r3, #0
    d9c8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d9ca:	2100      	movs	r1, #0
    d9cc:	6878      	ldr	r0, [r7, #4]
    d9ce:	4b15      	ldr	r3, [pc, #84]	; (da24 <n25q256a_disable_xip+0x7c>)
    d9d0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d9d2:	7bfb      	ldrb	r3, [r7, #15]
    d9d4:	2285      	movs	r2, #133	; 0x85
    d9d6:	4619      	mov	r1, r3
    d9d8:	6878      	ldr	r0, [r7, #4]
    d9da:	4b13      	ldr	r3, [pc, #76]	; (da28 <n25q256a_disable_xip+0x80>)
    d9dc:	4798      	blx	r3
    d9de:	4603      	mov	r3, r0
    d9e0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d9e2:	7bbb      	ldrb	r3, [r7, #14]
    d9e4:	f003 0308 	and.w	r3, r3, #8
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d113      	bne.n	da14 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d9ec:	697b      	ldr	r3, [r7, #20]
    d9ee:	689b      	ldr	r3, [r3, #8]
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d00f      	beq.n	da14 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d9f4:	693b      	ldr	r3, [r7, #16]
    d9f6:	681b      	ldr	r3, [r3, #0]
    d9f8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d9fa:	6938      	ldr	r0, [r7, #16]
    d9fc:	4b0b      	ldr	r3, [pc, #44]	; (da2c <n25q256a_disable_xip+0x84>)
    d9fe:	4798      	blx	r3
			n25q->pin_exit_xip();
    da00:	697b      	ldr	r3, [r7, #20]
    da02:	689b      	ldr	r3, [r3, #8]
    da04:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    da06:	68b9      	ldr	r1, [r7, #8]
    da08:	6938      	ldr	r0, [r7, #16]
    da0a:	4b09      	ldr	r3, [pc, #36]	; (da30 <n25q256a_disable_xip+0x88>)
    da0c:	4798      	blx	r3
			qspi_sync_enable(descr);
    da0e:	6938      	ldr	r0, [r7, #16]
    da10:	4b08      	ldr	r3, [pc, #32]	; (da34 <n25q256a_disable_xip+0x8c>)
    da12:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    da14:	697b      	ldr	r3, [r7, #20]
    da16:	2200      	movs	r2, #0
    da18:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    da1a:	2300      	movs	r3, #0
}
    da1c:	4618      	mov	r0, r3
    da1e:	3718      	adds	r7, #24
    da20:	46bd      	mov	sp, r7
    da22:	bd80      	pop	{r7, pc}
    da24:	0000d1b9 	.word	0x0000d1b9
    da28:	0000d285 	.word	0x0000d285
    da2c:	00003c09 	.word	0x00003c09
    da30:	00003b81 	.word	0x00003b81
    da34:	00003bcd 	.word	0x00003bcd

0000da38 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    da38:	b480      	push	{r7}
    da3a:	b085      	sub	sp, #20
    da3c:	af00      	add	r7, sp, #0
    da3e:	60f8      	str	r0, [r7, #12]
    da40:	60b9      	str	r1, [r7, #8]
    da42:	607a      	str	r2, [r7, #4]
	me->io        = io;
    da44:	68fb      	ldr	r3, [r7, #12]
    da46:	68ba      	ldr	r2, [r7, #8]
    da48:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    da4a:	68fb      	ldr	r3, [r7, #12]
    da4c:	687a      	ldr	r2, [r7, #4]
    da4e:	605a      	str	r2, [r3, #4]

	return me;
    da50:	68fb      	ldr	r3, [r7, #12]
}
    da52:	4618      	mov	r0, r3
    da54:	3714      	adds	r7, #20
    da56:	46bd      	mov	sp, r7
    da58:	f85d 7b04 	ldr.w	r7, [sp], #4
    da5c:	4770      	bx	lr

0000da5e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    da5e:	b480      	push	{r7}
    da60:	b083      	sub	sp, #12
    da62:	af00      	add	r7, sp, #0
    da64:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    da66:	687b      	ldr	r3, [r7, #4]
    da68:	781b      	ldrb	r3, [r3, #0]
    da6a:	b29a      	uxth	r2, r3
    da6c:	687b      	ldr	r3, [r7, #4]
    da6e:	3301      	adds	r3, #1
    da70:	781b      	ldrb	r3, [r3, #0]
    da72:	b29b      	uxth	r3, r3
    da74:	021b      	lsls	r3, r3, #8
    da76:	b29b      	uxth	r3, r3
    da78:	4413      	add	r3, r2
    da7a:	b29b      	uxth	r3, r3
}
    da7c:	4618      	mov	r0, r3
    da7e:	370c      	adds	r7, #12
    da80:	46bd      	mov	sp, r7
    da82:	f85d 7b04 	ldr.w	r7, [sp], #4
    da86:	4770      	bx	lr

0000da88 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    da88:	b480      	push	{r7}
    da8a:	b083      	sub	sp, #12
    da8c:	af00      	add	r7, sp, #0
    da8e:	6078      	str	r0, [r7, #4]
	return desc[0];
    da90:	687b      	ldr	r3, [r7, #4]
    da92:	781b      	ldrb	r3, [r3, #0]
}
    da94:	4618      	mov	r0, r3
    da96:	370c      	adds	r7, #12
    da98:	46bd      	mov	sp, r7
    da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    da9e:	4770      	bx	lr

0000daa0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    daa0:	b580      	push	{r7, lr}
    daa2:	b082      	sub	sp, #8
    daa4:	af00      	add	r7, sp, #0
    daa6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    daa8:	6878      	ldr	r0, [r7, #4]
    daaa:	4b05      	ldr	r3, [pc, #20]	; (dac0 <usb_desc_next+0x20>)
    daac:	4798      	blx	r3
    daae:	4603      	mov	r3, r0
    dab0:	461a      	mov	r2, r3
    dab2:	687b      	ldr	r3, [r7, #4]
    dab4:	4413      	add	r3, r2
}
    dab6:	4618      	mov	r0, r3
    dab8:	3708      	adds	r7, #8
    daba:	46bd      	mov	sp, r7
    dabc:	bd80      	pop	{r7, pc}
    dabe:	bf00      	nop
    dac0:	0000da89 	.word	0x0000da89

0000dac4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    dac4:	b580      	push	{r7, lr}
    dac6:	b08c      	sub	sp, #48	; 0x30
    dac8:	af00      	add	r7, sp, #0
    daca:	6078      	str	r0, [r7, #4]
    dacc:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    dace:	687b      	ldr	r3, [r7, #4]
    dad0:	689b      	ldr	r3, [r3, #8]
    dad2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    dad4:	683b      	ldr	r3, [r7, #0]
    dad6:	681b      	ldr	r3, [r3, #0]
    dad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    dada:	2300      	movs	r3, #0
    dadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    dae0:	e08f      	b.n	dc02 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dae4:	2b00      	cmp	r3, #0
    dae6:	d102      	bne.n	daee <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    dae8:	f06f 0309 	mvn.w	r3, #9
    daec:	e092      	b.n	dc14 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daf0:	789b      	ldrb	r3, [r3, #2]
    daf2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daf6:	795b      	ldrb	r3, [r3, #5]
    daf8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    dafa:	7c7b      	ldrb	r3, [r7, #17]
    dafc:	2b02      	cmp	r3, #2
    dafe:	d002      	beq.n	db06 <cdcdf_acm_enable+0x42>
    db00:	7c7b      	ldrb	r3, [r7, #17]
    db02:	2b0a      	cmp	r3, #10
    db04:	d121      	bne.n	db4a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    db06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db0a:	6a3a      	ldr	r2, [r7, #32]
    db0c:	5cd2      	ldrb	r2, [r2, r3]
    db0e:	7bbb      	ldrb	r3, [r7, #14]
    db10:	429a      	cmp	r2, r3
    db12:	d102      	bne.n	db1a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    db14:	f06f 0311 	mvn.w	r3, #17
    db18:	e07c      	b.n	dc14 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    db1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db1e:	6a3a      	ldr	r2, [r7, #32]
    db20:	5cd3      	ldrb	r3, [r2, r3]
    db22:	2bff      	cmp	r3, #255	; 0xff
    db24:	d002      	beq.n	db2c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    db26:	f06f 031b 	mvn.w	r3, #27
    db2a:	e073      	b.n	dc14 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    db2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db30:	7bb9      	ldrb	r1, [r7, #14]
    db32:	6a3a      	ldr	r2, [r7, #32]
    db34:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    db36:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    db38:	683b      	ldr	r3, [r7, #0]
    db3a:	685b      	ldr	r3, [r3, #4]
    db3c:	2205      	movs	r2, #5
    db3e:	4619      	mov	r1, r3
    db40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    db42:	4b36      	ldr	r3, [pc, #216]	; (dc1c <cdcdf_acm_enable+0x158>)
    db44:	4798      	blx	r3
    db46:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    db48:	e047      	b.n	dbda <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    db4a:	f06f 0309 	mvn.w	r3, #9
    db4e:	e061      	b.n	dc14 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db52:	789b      	ldrb	r3, [r3, #2]
    db54:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    db56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db58:	78db      	ldrb	r3, [r3, #3]
    db5a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db5e:	3304      	adds	r3, #4
    db60:	4618      	mov	r0, r3
    db62:	4b2f      	ldr	r3, [pc, #188]	; (dc20 <cdcdf_acm_enable+0x15c>)
    db64:	4798      	blx	r3
    db66:	4603      	mov	r3, r0
    db68:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    db6a:	7ebb      	ldrb	r3, [r7, #26]
    db6c:	7ef9      	ldrb	r1, [r7, #27]
    db6e:	8bba      	ldrh	r2, [r7, #28]
    db70:	4618      	mov	r0, r3
    db72:	4b2c      	ldr	r3, [pc, #176]	; (dc24 <cdcdf_acm_enable+0x160>)
    db74:	4798      	blx	r3
    db76:	4603      	mov	r3, r0
    db78:	2b00      	cmp	r3, #0
    db7a:	d002      	beq.n	db82 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    db7c:	f06f 0313 	mvn.w	r3, #19
    db80:	e048      	b.n	dc14 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    db82:	7ebb      	ldrb	r3, [r7, #26]
    db84:	b25b      	sxtb	r3, r3
    db86:	2b00      	cmp	r3, #0
    db88:	da0f      	bge.n	dbaa <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    db8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db8e:	7eb9      	ldrb	r1, [r7, #26]
    db90:	6a3a      	ldr	r2, [r7, #32]
    db92:	4413      	add	r3, r2
    db94:	460a      	mov	r2, r1
    db96:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    db98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db9c:	6a3a      	ldr	r2, [r7, #32]
    db9e:	4413      	add	r3, r2
    dba0:	789b      	ldrb	r3, [r3, #2]
    dba2:	4618      	mov	r0, r3
    dba4:	4b20      	ldr	r3, [pc, #128]	; (dc28 <cdcdf_acm_enable+0x164>)
    dba6:	4798      	blx	r3
    dba8:	e007      	b.n	dbba <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    dbaa:	7eba      	ldrb	r2, [r7, #26]
    dbac:	6a3b      	ldr	r3, [r7, #32]
    dbae:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    dbb0:	6a3b      	ldr	r3, [r7, #32]
    dbb2:	791b      	ldrb	r3, [r3, #4]
    dbb4:	4618      	mov	r0, r3
    dbb6:	4b1c      	ldr	r3, [pc, #112]	; (dc28 <cdcdf_acm_enable+0x164>)
    dbb8:	4798      	blx	r3
			}
			desc->sod = ep;
    dbba:	683b      	ldr	r3, [r7, #0]
    dbbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dbbe:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    dbc0:	683b      	ldr	r3, [r7, #0]
    dbc2:	681b      	ldr	r3, [r3, #0]
    dbc4:	4618      	mov	r0, r3
    dbc6:	4b19      	ldr	r3, [pc, #100]	; (dc2c <cdcdf_acm_enable+0x168>)
    dbc8:	4798      	blx	r3
    dbca:	4602      	mov	r2, r0
    dbcc:	683b      	ldr	r3, [r7, #0]
    dbce:	685b      	ldr	r3, [r3, #4]
    dbd0:	4619      	mov	r1, r3
    dbd2:	4610      	mov	r0, r2
    dbd4:	4b16      	ldr	r3, [pc, #88]	; (dc30 <cdcdf_acm_enable+0x16c>)
    dbd6:	4798      	blx	r3
    dbd8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dbdc:	2b00      	cmp	r3, #0
    dbde:	d1b7      	bne.n	db50 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    dbe0:	683b      	ldr	r3, [r7, #0]
    dbe2:	681b      	ldr	r3, [r3, #0]
    dbe4:	4618      	mov	r0, r3
    dbe6:	4b11      	ldr	r3, [pc, #68]	; (dc2c <cdcdf_acm_enable+0x168>)
    dbe8:	4798      	blx	r3
    dbea:	683b      	ldr	r3, [r7, #0]
    dbec:	685b      	ldr	r3, [r3, #4]
    dbee:	2204      	movs	r2, #4
    dbf0:	4619      	mov	r1, r3
    dbf2:	4b0a      	ldr	r3, [pc, #40]	; (dc1c <cdcdf_acm_enable+0x158>)
    dbf4:	4798      	blx	r3
    dbf6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    dbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dbfc:	3301      	adds	r3, #1
    dbfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    dc02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dc06:	2b01      	cmp	r3, #1
    dc08:	f67f af6b 	bls.w	dae2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    dc0c:	4b09      	ldr	r3, [pc, #36]	; (dc34 <cdcdf_acm_enable+0x170>)
    dc0e:	2201      	movs	r2, #1
    dc10:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    dc12:	2300      	movs	r3, #0
}
    dc14:	4618      	mov	r0, r3
    dc16:	3730      	adds	r7, #48	; 0x30
    dc18:	46bd      	mov	sp, r7
    dc1a:	bd80      	pop	{r7, pc}
    dc1c:	0000ee85 	.word	0x0000ee85
    dc20:	0000da5f 	.word	0x0000da5f
    dc24:	000048b9 	.word	0x000048b9
    dc28:	000049a5 	.word	0x000049a5
    dc2c:	0000daa1 	.word	0x0000daa1
    dc30:	0000eee1 	.word	0x0000eee1
    dc34:	200027b8 	.word	0x200027b8

0000dc38 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    dc38:	b580      	push	{r7, lr}
    dc3a:	b088      	sub	sp, #32
    dc3c:	af00      	add	r7, sp, #0
    dc3e:	6078      	str	r0, [r7, #4]
    dc40:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    dc42:	687b      	ldr	r3, [r7, #4]
    dc44:	689b      	ldr	r3, [r3, #8]
    dc46:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    dc48:	683b      	ldr	r3, [r7, #0]
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d00c      	beq.n	dc68 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    dc4e:	683b      	ldr	r3, [r7, #0]
    dc50:	681b      	ldr	r3, [r3, #0]
    dc52:	795b      	ldrb	r3, [r3, #5]
    dc54:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    dc56:	7c7b      	ldrb	r3, [r7, #17]
    dc58:	2b02      	cmp	r3, #2
    dc5a:	d005      	beq.n	dc68 <cdcdf_acm_disable+0x30>
    dc5c:	7c7b      	ldrb	r3, [r7, #17]
    dc5e:	2b0a      	cmp	r3, #10
    dc60:	d002      	beq.n	dc68 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    dc62:	f06f 0309 	mvn.w	r3, #9
    dc66:	e035      	b.n	dcd4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    dc68:	2300      	movs	r3, #0
    dc6a:	77fb      	strb	r3, [r7, #31]
    dc6c:	e01f      	b.n	dcae <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    dc6e:	7ffb      	ldrb	r3, [r7, #31]
    dc70:	69ba      	ldr	r2, [r7, #24]
    dc72:	5cd3      	ldrb	r3, [r2, r3]
    dc74:	2bff      	cmp	r3, #255	; 0xff
    dc76:	d016      	beq.n	dca6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    dc78:	7ffb      	ldrb	r3, [r7, #31]
    dc7a:	69ba      	ldr	r2, [r7, #24]
    dc7c:	21ff      	movs	r1, #255	; 0xff
    dc7e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    dc80:	7ffb      	ldrb	r3, [r7, #31]
    dc82:	69ba      	ldr	r2, [r7, #24]
    dc84:	4413      	add	r3, r2
    dc86:	789b      	ldrb	r3, [r3, #2]
    dc88:	2bff      	cmp	r3, #255	; 0xff
    dc8a:	d00d      	beq.n	dca8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    dc8c:	7ffb      	ldrb	r3, [r7, #31]
    dc8e:	69ba      	ldr	r2, [r7, #24]
    dc90:	4413      	add	r3, r2
    dc92:	789b      	ldrb	r3, [r3, #2]
    dc94:	4618      	mov	r0, r3
    dc96:	4b11      	ldr	r3, [pc, #68]	; (dcdc <cdcdf_acm_disable+0xa4>)
    dc98:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    dc9a:	7ffb      	ldrb	r3, [r7, #31]
    dc9c:	69ba      	ldr	r2, [r7, #24]
    dc9e:	4413      	add	r3, r2
    dca0:	22ff      	movs	r2, #255	; 0xff
    dca2:	709a      	strb	r2, [r3, #2]
    dca4:	e000      	b.n	dca8 <cdcdf_acm_disable+0x70>
			continue;
    dca6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    dca8:	7ffb      	ldrb	r3, [r7, #31]
    dcaa:	3301      	adds	r3, #1
    dcac:	77fb      	strb	r3, [r7, #31]
    dcae:	7ffb      	ldrb	r3, [r7, #31]
    dcb0:	2b01      	cmp	r3, #1
    dcb2:	d9dc      	bls.n	dc6e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    dcb4:	69bb      	ldr	r3, [r7, #24]
    dcb6:	791b      	ldrb	r3, [r3, #4]
    dcb8:	2bff      	cmp	r3, #255	; 0xff
    dcba:	d007      	beq.n	dccc <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    dcbc:	69bb      	ldr	r3, [r7, #24]
    dcbe:	791b      	ldrb	r3, [r3, #4]
    dcc0:	4618      	mov	r0, r3
    dcc2:	4b06      	ldr	r3, [pc, #24]	; (dcdc <cdcdf_acm_disable+0xa4>)
    dcc4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    dcc6:	69bb      	ldr	r3, [r7, #24]
    dcc8:	22ff      	movs	r2, #255	; 0xff
    dcca:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    dccc:	4b04      	ldr	r3, [pc, #16]	; (dce0 <cdcdf_acm_disable+0xa8>)
    dcce:	2200      	movs	r2, #0
    dcd0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    dcd2:	2300      	movs	r3, #0
}
    dcd4:	4618      	mov	r0, r3
    dcd6:	3720      	adds	r7, #32
    dcd8:	46bd      	mov	sp, r7
    dcda:	bd80      	pop	{r7, pc}
    dcdc:	00004955 	.word	0x00004955
    dce0:	200027b8 	.word	0x200027b8

0000dce4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    dce4:	b580      	push	{r7, lr}
    dce6:	b084      	sub	sp, #16
    dce8:	af00      	add	r7, sp, #0
    dcea:	60f8      	str	r0, [r7, #12]
    dcec:	460b      	mov	r3, r1
    dcee:	607a      	str	r2, [r7, #4]
    dcf0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    dcf2:	7afb      	ldrb	r3, [r7, #11]
    dcf4:	2b01      	cmp	r3, #1
    dcf6:	d009      	beq.n	dd0c <cdcdf_acm_ctrl+0x28>
    dcf8:	2b02      	cmp	r3, #2
    dcfa:	d00d      	beq.n	dd18 <cdcdf_acm_ctrl+0x34>
    dcfc:	2b00      	cmp	r3, #0
    dcfe:	d10e      	bne.n	dd1e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    dd00:	6879      	ldr	r1, [r7, #4]
    dd02:	68f8      	ldr	r0, [r7, #12]
    dd04:	4b09      	ldr	r3, [pc, #36]	; (dd2c <cdcdf_acm_ctrl+0x48>)
    dd06:	4798      	blx	r3
    dd08:	4603      	mov	r3, r0
    dd0a:	e00a      	b.n	dd22 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    dd0c:	6879      	ldr	r1, [r7, #4]
    dd0e:	68f8      	ldr	r0, [r7, #12]
    dd10:	4b07      	ldr	r3, [pc, #28]	; (dd30 <cdcdf_acm_ctrl+0x4c>)
    dd12:	4798      	blx	r3
    dd14:	4603      	mov	r3, r0
    dd16:	e004      	b.n	dd22 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    dd18:	f06f 031a 	mvn.w	r3, #26
    dd1c:	e001      	b.n	dd22 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    dd1e:	f06f 030c 	mvn.w	r3, #12
	}
}
    dd22:	4618      	mov	r0, r3
    dd24:	3710      	adds	r7, #16
    dd26:	46bd      	mov	sp, r7
    dd28:	bd80      	pop	{r7, pc}
    dd2a:	bf00      	nop
    dd2c:	0000dac5 	.word	0x0000dac5
    dd30:	0000dc39 	.word	0x0000dc39

0000dd34 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dd34:	b590      	push	{r4, r7, lr}
    dd36:	b087      	sub	sp, #28
    dd38:	af00      	add	r7, sp, #0
    dd3a:	4603      	mov	r3, r0
    dd3c:	6039      	str	r1, [r7, #0]
    dd3e:	71fb      	strb	r3, [r7, #7]
    dd40:	4613      	mov	r3, r2
    dd42:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    dd44:	683b      	ldr	r3, [r7, #0]
    dd46:	799a      	ldrb	r2, [r3, #6]
    dd48:	79db      	ldrb	r3, [r3, #7]
    dd4a:	021b      	lsls	r3, r3, #8
    dd4c:	4313      	orrs	r3, r2
    dd4e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    dd50:	4b2b      	ldr	r3, [pc, #172]	; (de00 <cdcdf_acm_set_req+0xcc>)
    dd52:	4798      	blx	r3
    dd54:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    dd56:	683b      	ldr	r3, [r7, #0]
    dd58:	785b      	ldrb	r3, [r3, #1]
    dd5a:	2b20      	cmp	r3, #32
    dd5c:	d002      	beq.n	dd64 <cdcdf_acm_set_req+0x30>
    dd5e:	2b22      	cmp	r3, #34	; 0x22
    dd60:	d034      	beq.n	ddcc <cdcdf_acm_set_req+0x98>
    dd62:	e046      	b.n	ddf2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    dd64:	8afb      	ldrh	r3, [r7, #22]
    dd66:	2b07      	cmp	r3, #7
    dd68:	d002      	beq.n	dd70 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    dd6a:	f04f 33ff 	mov.w	r3, #4294967295
    dd6e:	e042      	b.n	ddf6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    dd70:	79bb      	ldrb	r3, [r7, #6]
    dd72:	2b00      	cmp	r3, #0
    dd74:	d107      	bne.n	dd86 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    dd76:	8afa      	ldrh	r2, [r7, #22]
    dd78:	79f8      	ldrb	r0, [r7, #7]
    dd7a:	2300      	movs	r3, #0
    dd7c:	6939      	ldr	r1, [r7, #16]
    dd7e:	4c21      	ldr	r4, [pc, #132]	; (de04 <cdcdf_acm_set_req+0xd0>)
    dd80:	47a0      	blx	r4
    dd82:	4603      	mov	r3, r0
    dd84:	e037      	b.n	ddf6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    dd86:	693a      	ldr	r2, [r7, #16]
    dd88:	f107 0308 	add.w	r3, r7, #8
    dd8c:	6810      	ldr	r0, [r2, #0]
    dd8e:	6018      	str	r0, [r3, #0]
    dd90:	8891      	ldrh	r1, [r2, #4]
    dd92:	7992      	ldrb	r2, [r2, #6]
    dd94:	8099      	strh	r1, [r3, #4]
    dd96:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    dd98:	4b1b      	ldr	r3, [pc, #108]	; (de08 <cdcdf_acm_set_req+0xd4>)
    dd9a:	681b      	ldr	r3, [r3, #0]
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	d008      	beq.n	ddb2 <cdcdf_acm_set_req+0x7e>
    dda0:	4b19      	ldr	r3, [pc, #100]	; (de08 <cdcdf_acm_set_req+0xd4>)
    dda2:	681b      	ldr	r3, [r3, #0]
    dda4:	f107 0208 	add.w	r2, r7, #8
    dda8:	4610      	mov	r0, r2
    ddaa:	4798      	blx	r3
    ddac:	4603      	mov	r3, r0
    ddae:	2b00      	cmp	r3, #0
    ddb0:	d00a      	beq.n	ddc8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    ddb2:	4b16      	ldr	r3, [pc, #88]	; (de0c <cdcdf_acm_set_req+0xd8>)
    ddb4:	f107 0208 	add.w	r2, r7, #8
    ddb8:	e892 0003 	ldmia.w	r2, {r0, r1}
    ddbc:	6018      	str	r0, [r3, #0]
    ddbe:	3304      	adds	r3, #4
    ddc0:	8019      	strh	r1, [r3, #0]
    ddc2:	3302      	adds	r3, #2
    ddc4:	0c0a      	lsrs	r2, r1, #16
    ddc6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    ddc8:	2300      	movs	r3, #0
    ddca:	e014      	b.n	ddf6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    ddcc:	2300      	movs	r3, #0
    ddce:	2200      	movs	r2, #0
    ddd0:	2100      	movs	r1, #0
    ddd2:	2000      	movs	r0, #0
    ddd4:	4c0b      	ldr	r4, [pc, #44]	; (de04 <cdcdf_acm_set_req+0xd0>)
    ddd6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    ddd8:	4b0d      	ldr	r3, [pc, #52]	; (de10 <cdcdf_acm_set_req+0xdc>)
    ddda:	681b      	ldr	r3, [r3, #0]
    dddc:	2b00      	cmp	r3, #0
    ddde:	d006      	beq.n	ddee <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    dde0:	4b0b      	ldr	r3, [pc, #44]	; (de10 <cdcdf_acm_set_req+0xdc>)
    dde2:	681b      	ldr	r3, [r3, #0]
    dde4:	683a      	ldr	r2, [r7, #0]
    dde6:	8852      	ldrh	r2, [r2, #2]
    dde8:	b292      	uxth	r2, r2
    ddea:	4610      	mov	r0, r2
    ddec:	4798      	blx	r3
		}
		return ERR_NONE;
    ddee:	2300      	movs	r3, #0
    ddf0:	e001      	b.n	ddf6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    ddf2:	f06f 030c 	mvn.w	r3, #12
	}
}
    ddf6:	4618      	mov	r0, r3
    ddf8:	371c      	adds	r7, #28
    ddfa:	46bd      	mov	sp, r7
    ddfc:	bd90      	pop	{r4, r7, pc}
    ddfe:	bf00      	nop
    de00:	0000ed81 	.word	0x0000ed81
    de04:	0000ebf5 	.word	0x0000ebf5
    de08:	200027cc 	.word	0x200027cc
    de0c:	200027c0 	.word	0x200027c0
    de10:	200027c8 	.word	0x200027c8

0000de14 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    de14:	b590      	push	{r4, r7, lr}
    de16:	b085      	sub	sp, #20
    de18:	af00      	add	r7, sp, #0
    de1a:	4603      	mov	r3, r0
    de1c:	6039      	str	r1, [r7, #0]
    de1e:	71fb      	strb	r3, [r7, #7]
    de20:	4613      	mov	r3, r2
    de22:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    de24:	683b      	ldr	r3, [r7, #0]
    de26:	799a      	ldrb	r2, [r3, #6]
    de28:	79db      	ldrb	r3, [r3, #7]
    de2a:	021b      	lsls	r3, r3, #8
    de2c:	4313      	orrs	r3, r2
    de2e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    de30:	79bb      	ldrb	r3, [r7, #6]
    de32:	2b01      	cmp	r3, #1
    de34:	d101      	bne.n	de3a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    de36:	2300      	movs	r3, #0
    de38:	e013      	b.n	de62 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    de3a:	683b      	ldr	r3, [r7, #0]
    de3c:	785b      	ldrb	r3, [r3, #1]
    de3e:	2b21      	cmp	r3, #33	; 0x21
    de40:	d10d      	bne.n	de5e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    de42:	89fb      	ldrh	r3, [r7, #14]
    de44:	2b07      	cmp	r3, #7
    de46:	d002      	beq.n	de4e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    de48:	f04f 33ff 	mov.w	r3, #4294967295
    de4c:	e009      	b.n	de62 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    de4e:	89fa      	ldrh	r2, [r7, #14]
    de50:	79f8      	ldrb	r0, [r7, #7]
    de52:	2300      	movs	r3, #0
    de54:	4905      	ldr	r1, [pc, #20]	; (de6c <cdcdf_acm_get_req+0x58>)
    de56:	4c06      	ldr	r4, [pc, #24]	; (de70 <cdcdf_acm_get_req+0x5c>)
    de58:	47a0      	blx	r4
    de5a:	4603      	mov	r3, r0
    de5c:	e001      	b.n	de62 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    de5e:	f06f 030c 	mvn.w	r3, #12
	}
}
    de62:	4618      	mov	r0, r3
    de64:	3714      	adds	r7, #20
    de66:	46bd      	mov	sp, r7
    de68:	bd90      	pop	{r4, r7, pc}
    de6a:	bf00      	nop
    de6c:	200027c0 	.word	0x200027c0
    de70:	0000ebf5 	.word	0x0000ebf5

0000de74 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    de74:	b580      	push	{r7, lr}
    de76:	b082      	sub	sp, #8
    de78:	af00      	add	r7, sp, #0
    de7a:	4603      	mov	r3, r0
    de7c:	6039      	str	r1, [r7, #0]
    de7e:	71fb      	strb	r3, [r7, #7]
    de80:	4613      	mov	r3, r2
    de82:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    de84:	683b      	ldr	r3, [r7, #0]
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	095b      	lsrs	r3, r3, #5
    de8a:	b2db      	uxtb	r3, r3
    de8c:	f003 0303 	and.w	r3, r3, #3
    de90:	2b01      	cmp	r3, #1
    de92:	d002      	beq.n	de9a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    de94:	f06f 0309 	mvn.w	r3, #9
    de98:	e026      	b.n	dee8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    de9a:	683b      	ldr	r3, [r7, #0]
    de9c:	889b      	ldrh	r3, [r3, #4]
    de9e:	b29a      	uxth	r2, r3
    dea0:	4b13      	ldr	r3, [pc, #76]	; (def0 <cdcdf_acm_req+0x7c>)
    dea2:	781b      	ldrb	r3, [r3, #0]
    dea4:	b29b      	uxth	r3, r3
    dea6:	429a      	cmp	r2, r3
    dea8:	d007      	beq.n	deba <cdcdf_acm_req+0x46>
    deaa:	683b      	ldr	r3, [r7, #0]
    deac:	889b      	ldrh	r3, [r3, #4]
    deae:	b29a      	uxth	r2, r3
    deb0:	4b0f      	ldr	r3, [pc, #60]	; (def0 <cdcdf_acm_req+0x7c>)
    deb2:	785b      	ldrb	r3, [r3, #1]
    deb4:	b29b      	uxth	r3, r3
    deb6:	429a      	cmp	r2, r3
    deb8:	d114      	bne.n	dee4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    deba:	683b      	ldr	r3, [r7, #0]
    debc:	781b      	ldrb	r3, [r3, #0]
    debe:	b25b      	sxtb	r3, r3
    dec0:	2b00      	cmp	r3, #0
    dec2:	da07      	bge.n	ded4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    dec4:	79ba      	ldrb	r2, [r7, #6]
    dec6:	79fb      	ldrb	r3, [r7, #7]
    dec8:	6839      	ldr	r1, [r7, #0]
    deca:	4618      	mov	r0, r3
    decc:	4b09      	ldr	r3, [pc, #36]	; (def4 <cdcdf_acm_req+0x80>)
    dece:	4798      	blx	r3
    ded0:	4603      	mov	r3, r0
    ded2:	e009      	b.n	dee8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    ded4:	79ba      	ldrb	r2, [r7, #6]
    ded6:	79fb      	ldrb	r3, [r7, #7]
    ded8:	6839      	ldr	r1, [r7, #0]
    deda:	4618      	mov	r0, r3
    dedc:	4b06      	ldr	r3, [pc, #24]	; (def8 <cdcdf_acm_req+0x84>)
    dede:	4798      	blx	r3
    dee0:	4603      	mov	r3, r0
    dee2:	e001      	b.n	dee8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    dee4:	f06f 0309 	mvn.w	r3, #9
	}
}
    dee8:	4618      	mov	r0, r3
    deea:	3708      	adds	r7, #8
    deec:	46bd      	mov	sp, r7
    deee:	bd80      	pop	{r7, pc}
    def0:	200027b8 	.word	0x200027b8
    def4:	0000de15 	.word	0x0000de15
    def8:	0000dd35 	.word	0x0000dd35

0000defc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    defc:	b580      	push	{r7, lr}
    defe:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    df00:	4b0b      	ldr	r3, [pc, #44]	; (df30 <cdcdf_acm_init+0x34>)
    df02:	4798      	blx	r3
    df04:	4603      	mov	r3, r0
    df06:	2b01      	cmp	r3, #1
    df08:	d902      	bls.n	df10 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    df0a:	f06f 0310 	mvn.w	r3, #16
    df0e:	e00d      	b.n	df2c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    df10:	4b08      	ldr	r3, [pc, #32]	; (df34 <cdcdf_acm_init+0x38>)
    df12:	4a09      	ldr	r2, [pc, #36]	; (df38 <cdcdf_acm_init+0x3c>)
    df14:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    df16:	4b07      	ldr	r3, [pc, #28]	; (df34 <cdcdf_acm_init+0x38>)
    df18:	4a08      	ldr	r2, [pc, #32]	; (df3c <cdcdf_acm_init+0x40>)
    df1a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    df1c:	4805      	ldr	r0, [pc, #20]	; (df34 <cdcdf_acm_init+0x38>)
    df1e:	4b08      	ldr	r3, [pc, #32]	; (df40 <cdcdf_acm_init+0x44>)
    df20:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    df22:	4908      	ldr	r1, [pc, #32]	; (df44 <cdcdf_acm_init+0x48>)
    df24:	2001      	movs	r0, #1
    df26:	4b08      	ldr	r3, [pc, #32]	; (df48 <cdcdf_acm_init+0x4c>)
    df28:	4798      	blx	r3
	return ERR_NONE;
    df2a:	2300      	movs	r3, #0
}
    df2c:	4618      	mov	r0, r3
    df2e:	bd80      	pop	{r7, pc}
    df30:	0000ed99 	.word	0x0000ed99
    df34:	200027ac 	.word	0x200027ac
    df38:	0000dce5 	.word	0x0000dce5
    df3c:	200027b8 	.word	0x200027b8
    df40:	0000ed01 	.word	0x0000ed01
    df44:	20000208 	.word	0x20000208
    df48:	0000ec31 	.word	0x0000ec31

0000df4c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    df4c:	b590      	push	{r4, r7, lr}
    df4e:	b083      	sub	sp, #12
    df50:	af00      	add	r7, sp, #0
    df52:	6078      	str	r0, [r7, #4]
    df54:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    df56:	4b0b      	ldr	r3, [pc, #44]	; (df84 <cdcdf_acm_read+0x38>)
    df58:	4798      	blx	r3
    df5a:	4603      	mov	r3, r0
    df5c:	f083 0301 	eor.w	r3, r3, #1
    df60:	b2db      	uxtb	r3, r3
    df62:	2b00      	cmp	r3, #0
    df64:	d002      	beq.n	df6c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    df66:	f06f 0310 	mvn.w	r3, #16
    df6a:	e007      	b.n	df7c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    df6c:	4b06      	ldr	r3, [pc, #24]	; (df88 <cdcdf_acm_read+0x3c>)
    df6e:	7918      	ldrb	r0, [r3, #4]
    df70:	2300      	movs	r3, #0
    df72:	683a      	ldr	r2, [r7, #0]
    df74:	6879      	ldr	r1, [r7, #4]
    df76:	4c05      	ldr	r4, [pc, #20]	; (df8c <cdcdf_acm_read+0x40>)
    df78:	47a0      	blx	r4
    df7a:	4603      	mov	r3, r0
}
    df7c:	4618      	mov	r0, r3
    df7e:	370c      	adds	r7, #12
    df80:	46bd      	mov	sp, r7
    df82:	bd90      	pop	{r4, r7, pc}
    df84:	0000e071 	.word	0x0000e071
    df88:	200027b8 	.word	0x200027b8
    df8c:	0000ebf5 	.word	0x0000ebf5

0000df90 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    df90:	b590      	push	{r4, r7, lr}
    df92:	b083      	sub	sp, #12
    df94:	af00      	add	r7, sp, #0
    df96:	6078      	str	r0, [r7, #4]
    df98:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    df9a:	4b0b      	ldr	r3, [pc, #44]	; (dfc8 <cdcdf_acm_write+0x38>)
    df9c:	4798      	blx	r3
    df9e:	4603      	mov	r3, r0
    dfa0:	f083 0301 	eor.w	r3, r3, #1
    dfa4:	b2db      	uxtb	r3, r3
    dfa6:	2b00      	cmp	r3, #0
    dfa8:	d002      	beq.n	dfb0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    dfaa:	f06f 0310 	mvn.w	r3, #16
    dfae:	e007      	b.n	dfc0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    dfb0:	4b06      	ldr	r3, [pc, #24]	; (dfcc <cdcdf_acm_write+0x3c>)
    dfb2:	78d8      	ldrb	r0, [r3, #3]
    dfb4:	2301      	movs	r3, #1
    dfb6:	683a      	ldr	r2, [r7, #0]
    dfb8:	6879      	ldr	r1, [r7, #4]
    dfba:	4c05      	ldr	r4, [pc, #20]	; (dfd0 <cdcdf_acm_write+0x40>)
    dfbc:	47a0      	blx	r4
    dfbe:	4603      	mov	r3, r0
}
    dfc0:	4618      	mov	r0, r3
    dfc2:	370c      	adds	r7, #12
    dfc4:	46bd      	mov	sp, r7
    dfc6:	bd90      	pop	{r4, r7, pc}
    dfc8:	0000e071 	.word	0x0000e071
    dfcc:	200027b8 	.word	0x200027b8
    dfd0:	0000ebf5 	.word	0x0000ebf5

0000dfd4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    dfd4:	b580      	push	{r7, lr}
    dfd6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    dfd8:	4b05      	ldr	r3, [pc, #20]	; (dff0 <cdcdf_acm_stop_xfer+0x1c>)
    dfda:	78db      	ldrb	r3, [r3, #3]
    dfdc:	4618      	mov	r0, r3
    dfde:	4b05      	ldr	r3, [pc, #20]	; (dff4 <cdcdf_acm_stop_xfer+0x20>)
    dfe0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    dfe2:	4b03      	ldr	r3, [pc, #12]	; (dff0 <cdcdf_acm_stop_xfer+0x1c>)
    dfe4:	791b      	ldrb	r3, [r3, #4]
    dfe6:	4618      	mov	r0, r3
    dfe8:	4b02      	ldr	r3, [pc, #8]	; (dff4 <cdcdf_acm_stop_xfer+0x20>)
    dfea:	4798      	blx	r3
}
    dfec:	bf00      	nop
    dfee:	bd80      	pop	{r7, pc}
    dff0:	200027b8 	.word	0x200027b8
    dff4:	00004b7d 	.word	0x00004b7d

0000dff8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    dff8:	b580      	push	{r7, lr}
    dffa:	b082      	sub	sp, #8
    dffc:	af00      	add	r7, sp, #0
    dffe:	4603      	mov	r3, r0
    e000:	6039      	str	r1, [r7, #0]
    e002:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    e004:	79fb      	ldrb	r3, [r7, #7]
    e006:	2b03      	cmp	r3, #3
    e008:	d822      	bhi.n	e050 <cdcdf_acm_register_callback+0x58>
    e00a:	a201      	add	r2, pc, #4	; (adr r2, e010 <cdcdf_acm_register_callback+0x18>)
    e00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e010:	0000e021 	.word	0x0000e021
    e014:	0000e031 	.word	0x0000e031
    e018:	0000e041 	.word	0x0000e041
    e01c:	0000e049 	.word	0x0000e049
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    e020:	4b0f      	ldr	r3, [pc, #60]	; (e060 <cdcdf_acm_register_callback+0x68>)
    e022:	791b      	ldrb	r3, [r3, #4]
    e024:	683a      	ldr	r2, [r7, #0]
    e026:	2102      	movs	r1, #2
    e028:	4618      	mov	r0, r3
    e02a:	4b0e      	ldr	r3, [pc, #56]	; (e064 <cdcdf_acm_register_callback+0x6c>)
    e02c:	4798      	blx	r3
		break;
    e02e:	e012      	b.n	e056 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    e030:	4b0b      	ldr	r3, [pc, #44]	; (e060 <cdcdf_acm_register_callback+0x68>)
    e032:	78db      	ldrb	r3, [r3, #3]
    e034:	683a      	ldr	r2, [r7, #0]
    e036:	2102      	movs	r1, #2
    e038:	4618      	mov	r0, r3
    e03a:	4b0a      	ldr	r3, [pc, #40]	; (e064 <cdcdf_acm_register_callback+0x6c>)
    e03c:	4798      	blx	r3
		break;
    e03e:	e00a      	b.n	e056 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    e040:	4a09      	ldr	r2, [pc, #36]	; (e068 <cdcdf_acm_register_callback+0x70>)
    e042:	683b      	ldr	r3, [r7, #0]
    e044:	6013      	str	r3, [r2, #0]
		break;
    e046:	e006      	b.n	e056 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    e048:	4a08      	ldr	r2, [pc, #32]	; (e06c <cdcdf_acm_register_callback+0x74>)
    e04a:	683b      	ldr	r3, [r7, #0]
    e04c:	6013      	str	r3, [r2, #0]
		break;
    e04e:	e002      	b.n	e056 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    e050:	f06f 030c 	mvn.w	r3, #12
    e054:	e000      	b.n	e058 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    e056:	2300      	movs	r3, #0
}
    e058:	4618      	mov	r0, r3
    e05a:	3708      	adds	r7, #8
    e05c:	46bd      	mov	sp, r7
    e05e:	bd80      	pop	{r7, pc}
    e060:	200027b8 	.word	0x200027b8
    e064:	00004ca9 	.word	0x00004ca9
    e068:	200027cc 	.word	0x200027cc
    e06c:	200027c8 	.word	0x200027c8

0000e070 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    e070:	b480      	push	{r7}
    e072:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    e074:	4b03      	ldr	r3, [pc, #12]	; (e084 <cdcdf_acm_is_enabled+0x14>)
    e076:	795b      	ldrb	r3, [r3, #5]
}
    e078:	4618      	mov	r0, r3
    e07a:	46bd      	mov	sp, r7
    e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e080:	4770      	bx	lr
    e082:	bf00      	nop
    e084:	200027b8 	.word	0x200027b8

0000e088 <usb_get_u16>:
{
    e088:	b480      	push	{r7}
    e08a:	b083      	sub	sp, #12
    e08c:	af00      	add	r7, sp, #0
    e08e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	781b      	ldrb	r3, [r3, #0]
    e094:	b29a      	uxth	r2, r3
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	3301      	adds	r3, #1
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	b29b      	uxth	r3, r3
    e09e:	021b      	lsls	r3, r3, #8
    e0a0:	b29b      	uxth	r3, r3
    e0a2:	4413      	add	r3, r2
    e0a4:	b29b      	uxth	r3, r3
}
    e0a6:	4618      	mov	r0, r3
    e0a8:	370c      	adds	r7, #12
    e0aa:	46bd      	mov	sp, r7
    e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0b0:	4770      	bx	lr

0000e0b2 <usb_desc_len>:
{
    e0b2:	b480      	push	{r7}
    e0b4:	b083      	sub	sp, #12
    e0b6:	af00      	add	r7, sp, #0
    e0b8:	6078      	str	r0, [r7, #4]
	return desc[0];
    e0ba:	687b      	ldr	r3, [r7, #4]
    e0bc:	781b      	ldrb	r3, [r3, #0]
}
    e0be:	4618      	mov	r0, r3
    e0c0:	370c      	adds	r7, #12
    e0c2:	46bd      	mov	sp, r7
    e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0c8:	4770      	bx	lr
	...

0000e0cc <usb_desc_next>:
{
    e0cc:	b580      	push	{r7, lr}
    e0ce:	b082      	sub	sp, #8
    e0d0:	af00      	add	r7, sp, #0
    e0d2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e0d4:	6878      	ldr	r0, [r7, #4]
    e0d6:	4b05      	ldr	r3, [pc, #20]	; (e0ec <usb_desc_next+0x20>)
    e0d8:	4798      	blx	r3
    e0da:	4603      	mov	r3, r0
    e0dc:	461a      	mov	r2, r3
    e0de:	687b      	ldr	r3, [r7, #4]
    e0e0:	4413      	add	r3, r2
}
    e0e2:	4618      	mov	r0, r3
    e0e4:	3708      	adds	r7, #8
    e0e6:	46bd      	mov	sp, r7
    e0e8:	bd80      	pop	{r7, pc}
    e0ea:	bf00      	nop
    e0ec:	0000e0b3 	.word	0x0000e0b3

0000e0f0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    e0f0:	b580      	push	{r7, lr}
    e0f2:	b082      	sub	sp, #8
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e0f8:	687b      	ldr	r3, [r7, #4]
    e0fa:	3302      	adds	r3, #2
    e0fc:	4618      	mov	r0, r3
    e0fe:	4b03      	ldr	r3, [pc, #12]	; (e10c <usb_cfg_desc_total_len+0x1c>)
    e100:	4798      	blx	r3
    e102:	4603      	mov	r3, r0
}
    e104:	4618      	mov	r0, r3
    e106:	3708      	adds	r7, #8
    e108:	46bd      	mov	sp, r7
    e10a:	bd80      	pop	{r7, pc}
    e10c:	0000e089 	.word	0x0000e089

0000e110 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    e110:	b590      	push	{r4, r7, lr}
    e112:	b085      	sub	sp, #20
    e114:	af00      	add	r7, sp, #0
    e116:	4603      	mov	r3, r0
    e118:	6039      	str	r1, [r7, #0]
    e11a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    e11c:	2300      	movs	r3, #0
    e11e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    e120:	683b      	ldr	r3, [r7, #0]
    e122:	799a      	ldrb	r2, [r3, #6]
    e124:	79db      	ldrb	r3, [r3, #7]
    e126:	021b      	lsls	r3, r3, #8
    e128:	4313      	orrs	r3, r2
    e12a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    e12c:	897b      	ldrh	r3, [r7, #10]
    e12e:	2b12      	cmp	r3, #18
    e130:	d901      	bls.n	e136 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    e132:	2312      	movs	r3, #18
    e134:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    e136:	68fb      	ldr	r3, [r7, #12]
    e138:	2b00      	cmp	r3, #0
    e13a:	d10a      	bne.n	e152 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    e13c:	4b0f      	ldr	r3, [pc, #60]	; (e17c <usbdc_get_dev_desc+0x6c>)
    e13e:	681b      	ldr	r3, [r3, #0]
    e140:	6818      	ldr	r0, [r3, #0]
    e142:	4b0e      	ldr	r3, [pc, #56]	; (e17c <usbdc_get_dev_desc+0x6c>)
    e144:	681b      	ldr	r3, [r3, #0]
    e146:	685b      	ldr	r3, [r3, #4]
    e148:	2201      	movs	r2, #1
    e14a:	4619      	mov	r1, r3
    e14c:	4b0c      	ldr	r3, [pc, #48]	; (e180 <usbdc_get_dev_desc+0x70>)
    e14e:	4798      	blx	r3
    e150:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    e152:	68fb      	ldr	r3, [r7, #12]
    e154:	2b00      	cmp	r3, #0
    e156:	d101      	bne.n	e15c <usbdc_get_dev_desc+0x4c>
		return false;
    e158:	2300      	movs	r3, #0
    e15a:	e00b      	b.n	e174 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    e15c:	897a      	ldrh	r2, [r7, #10]
    e15e:	79f8      	ldrb	r0, [r7, #7]
    e160:	2300      	movs	r3, #0
    e162:	68f9      	ldr	r1, [r7, #12]
    e164:	4c07      	ldr	r4, [pc, #28]	; (e184 <usbdc_get_dev_desc+0x74>)
    e166:	47a0      	blx	r4
    e168:	4603      	mov	r3, r0
    e16a:	2b00      	cmp	r3, #0
    e16c:	d001      	beq.n	e172 <usbdc_get_dev_desc+0x62>
		return false;
    e16e:	2300      	movs	r3, #0
    e170:	e000      	b.n	e174 <usbdc_get_dev_desc+0x64>
	}
	return true;
    e172:	2301      	movs	r3, #1
}
    e174:	4618      	mov	r0, r3
    e176:	3714      	adds	r7, #20
    e178:	46bd      	mov	sp, r7
    e17a:	bd90      	pop	{r4, r7, pc}
    e17c:	200027d0 	.word	0x200027d0
    e180:	0000ee85 	.word	0x0000ee85
    e184:	0000ebf5 	.word	0x0000ebf5

0000e188 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    e188:	b590      	push	{r4, r7, lr}
    e18a:	b087      	sub	sp, #28
    e18c:	af00      	add	r7, sp, #0
    e18e:	4603      	mov	r3, r0
    e190:	6039      	str	r1, [r7, #0]
    e192:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    e194:	2300      	movs	r3, #0
    e196:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    e198:	683b      	ldr	r3, [r7, #0]
    e19a:	799a      	ldrb	r2, [r3, #6]
    e19c:	79db      	ldrb	r3, [r3, #7]
    e19e:	021b      	lsls	r3, r3, #8
    e1a0:	4313      	orrs	r3, r2
    e1a2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    e1a4:	683b      	ldr	r3, [r7, #0]
    e1a6:	885b      	ldrh	r3, [r3, #2]
    e1a8:	b29b      	uxth	r3, r3
    e1aa:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e1ac:	8a7a      	ldrh	r2, [r7, #18]
    e1ae:	4b1e      	ldr	r3, [pc, #120]	; (e228 <usbdc_get_cfg_desc+0xa0>)
    e1b0:	7f1b      	ldrb	r3, [r3, #28]
    e1b2:	3b01      	subs	r3, #1
    e1b4:	4013      	ands	r3, r2
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	bf0c      	ite	eq
    e1ba:	2301      	moveq	r3, #1
    e1bc:	2300      	movne	r3, #0
    e1be:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e1c0:	697b      	ldr	r3, [r7, #20]
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	d10c      	bne.n	e1e0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    e1c6:	4b18      	ldr	r3, [pc, #96]	; (e228 <usbdc_get_cfg_desc+0xa0>)
    e1c8:	681b      	ldr	r3, [r3, #0]
    e1ca:	6818      	ldr	r0, [r3, #0]
    e1cc:	4b16      	ldr	r3, [pc, #88]	; (e228 <usbdc_get_cfg_desc+0xa0>)
    e1ce:	681b      	ldr	r3, [r3, #0]
    e1d0:	6859      	ldr	r1, [r3, #4]
    e1d2:	7c3b      	ldrb	r3, [r7, #16]
    e1d4:	3301      	adds	r3, #1
    e1d6:	b2db      	uxtb	r3, r3
    e1d8:	461a      	mov	r2, r3
    e1da:	4b14      	ldr	r3, [pc, #80]	; (e22c <usbdc_get_cfg_desc+0xa4>)
    e1dc:	4798      	blx	r3
    e1de:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    e1e0:	697b      	ldr	r3, [r7, #20]
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d101      	bne.n	e1ea <usbdc_get_cfg_desc+0x62>
		return false;
    e1e6:	2300      	movs	r3, #0
    e1e8:	e019      	b.n	e21e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    e1ea:	6978      	ldr	r0, [r7, #20]
    e1ec:	4b10      	ldr	r3, [pc, #64]	; (e230 <usbdc_get_cfg_desc+0xa8>)
    e1ee:	4798      	blx	r3
    e1f0:	4603      	mov	r3, r0
    e1f2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    e1f4:	8a7a      	ldrh	r2, [r7, #18]
    e1f6:	89fb      	ldrh	r3, [r7, #14]
    e1f8:	429a      	cmp	r2, r3
    e1fa:	d802      	bhi.n	e202 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    e1fc:	2300      	movs	r3, #0
    e1fe:	747b      	strb	r3, [r7, #17]
    e200:	e001      	b.n	e206 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    e202:	89fb      	ldrh	r3, [r7, #14]
    e204:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    e206:	8a7a      	ldrh	r2, [r7, #18]
    e208:	7c7b      	ldrb	r3, [r7, #17]
    e20a:	79f8      	ldrb	r0, [r7, #7]
    e20c:	6979      	ldr	r1, [r7, #20]
    e20e:	4c09      	ldr	r4, [pc, #36]	; (e234 <usbdc_get_cfg_desc+0xac>)
    e210:	47a0      	blx	r4
    e212:	4603      	mov	r3, r0
    e214:	2b00      	cmp	r3, #0
    e216:	d001      	beq.n	e21c <usbdc_get_cfg_desc+0x94>
		return false;
    e218:	2300      	movs	r3, #0
    e21a:	e000      	b.n	e21e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    e21c:	2301      	movs	r3, #1
}
    e21e:	4618      	mov	r0, r3
    e220:	371c      	adds	r7, #28
    e222:	46bd      	mov	sp, r7
    e224:	bd90      	pop	{r4, r7, pc}
    e226:	bf00      	nop
    e228:	200027d0 	.word	0x200027d0
    e22c:	0000ef45 	.word	0x0000ef45
    e230:	0000e0f1 	.word	0x0000e0f1
    e234:	0000ebf5 	.word	0x0000ebf5

0000e238 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    e238:	b590      	push	{r4, r7, lr}
    e23a:	b085      	sub	sp, #20
    e23c:	af00      	add	r7, sp, #0
    e23e:	4603      	mov	r3, r0
    e240:	6039      	str	r1, [r7, #0]
    e242:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    e244:	683b      	ldr	r3, [r7, #0]
    e246:	799a      	ldrb	r2, [r3, #6]
    e248:	79db      	ldrb	r3, [r3, #7]
    e24a:	021b      	lsls	r3, r3, #8
    e24c:	4313      	orrs	r3, r2
    e24e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    e250:	683b      	ldr	r3, [r7, #0]
    e252:	885b      	ldrh	r3, [r3, #2]
    e254:	b29b      	uxth	r3, r3
    e256:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e258:	89fa      	ldrh	r2, [r7, #14]
    e25a:	4b1a      	ldr	r3, [pc, #104]	; (e2c4 <usbdc_get_str_desc+0x8c>)
    e25c:	7f1b      	ldrb	r3, [r3, #28]
    e25e:	3b01      	subs	r3, #1
    e260:	4013      	ands	r3, r2
    e262:	2b00      	cmp	r3, #0
    e264:	bf0c      	ite	eq
    e266:	2301      	moveq	r3, #1
    e268:	2300      	movne	r3, #0
    e26a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    e26c:	4b15      	ldr	r3, [pc, #84]	; (e2c4 <usbdc_get_str_desc+0x8c>)
    e26e:	681b      	ldr	r3, [r3, #0]
    e270:	6818      	ldr	r0, [r3, #0]
    e272:	4b14      	ldr	r3, [pc, #80]	; (e2c4 <usbdc_get_str_desc+0x8c>)
    e274:	681b      	ldr	r3, [r3, #0]
    e276:	685b      	ldr	r3, [r3, #4]
    e278:	7b3a      	ldrb	r2, [r7, #12]
    e27a:	4619      	mov	r1, r3
    e27c:	4b12      	ldr	r3, [pc, #72]	; (e2c8 <usbdc_get_str_desc+0x90>)
    e27e:	4798      	blx	r3
    e280:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    e282:	68bb      	ldr	r3, [r7, #8]
    e284:	2b00      	cmp	r3, #0
    e286:	d101      	bne.n	e28c <usbdc_get_str_desc+0x54>
		return false;
    e288:	2300      	movs	r3, #0
    e28a:	e017      	b.n	e2bc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    e28c:	68bb      	ldr	r3, [r7, #8]
    e28e:	781b      	ldrb	r3, [r3, #0]
    e290:	b29b      	uxth	r3, r3
    e292:	89fa      	ldrh	r2, [r7, #14]
    e294:	429a      	cmp	r2, r3
    e296:	d802      	bhi.n	e29e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    e298:	2300      	movs	r3, #0
    e29a:	737b      	strb	r3, [r7, #13]
    e29c:	e002      	b.n	e2a4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    e29e:	68bb      	ldr	r3, [r7, #8]
    e2a0:	781b      	ldrb	r3, [r3, #0]
    e2a2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    e2a4:	89fa      	ldrh	r2, [r7, #14]
    e2a6:	7b7b      	ldrb	r3, [r7, #13]
    e2a8:	79f8      	ldrb	r0, [r7, #7]
    e2aa:	68b9      	ldr	r1, [r7, #8]
    e2ac:	4c07      	ldr	r4, [pc, #28]	; (e2cc <usbdc_get_str_desc+0x94>)
    e2ae:	47a0      	blx	r4
    e2b0:	4603      	mov	r3, r0
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	d001      	beq.n	e2ba <usbdc_get_str_desc+0x82>
		return false;
    e2b6:	2300      	movs	r3, #0
    e2b8:	e000      	b.n	e2bc <usbdc_get_str_desc+0x84>
	}
	return true;
    e2ba:	2301      	movs	r3, #1
}
    e2bc:	4618      	mov	r0, r3
    e2be:	3714      	adds	r7, #20
    e2c0:	46bd      	mov	sp, r7
    e2c2:	bd90      	pop	{r4, r7, pc}
    e2c4:	200027d0 	.word	0x200027d0
    e2c8:	0000efbd 	.word	0x0000efbd
    e2cc:	0000ebf5 	.word	0x0000ebf5

0000e2d0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    e2d0:	b580      	push	{r7, lr}
    e2d2:	b084      	sub	sp, #16
    e2d4:	af00      	add	r7, sp, #0
    e2d6:	4603      	mov	r3, r0
    e2d8:	6039      	str	r1, [r7, #0]
    e2da:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    e2dc:	683b      	ldr	r3, [r7, #0]
    e2de:	885b      	ldrh	r3, [r3, #2]
    e2e0:	b29b      	uxth	r3, r3
    e2e2:	0a1b      	lsrs	r3, r3, #8
    e2e4:	b29b      	uxth	r3, r3
    e2e6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    e2e8:	7bfb      	ldrb	r3, [r7, #15]
    e2ea:	2b02      	cmp	r3, #2
    e2ec:	d00d      	beq.n	e30a <usbdc_get_desc_req+0x3a>
    e2ee:	2b03      	cmp	r3, #3
    e2f0:	d012      	beq.n	e318 <usbdc_get_desc_req+0x48>
    e2f2:	2b01      	cmp	r3, #1
    e2f4:	d002      	beq.n	e2fc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    e2f6:	bf00      	nop
	}
	return false;
    e2f8:	2300      	movs	r3, #0
    e2fa:	e013      	b.n	e324 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    e2fc:	79fb      	ldrb	r3, [r7, #7]
    e2fe:	6839      	ldr	r1, [r7, #0]
    e300:	4618      	mov	r0, r3
    e302:	4b0a      	ldr	r3, [pc, #40]	; (e32c <usbdc_get_desc_req+0x5c>)
    e304:	4798      	blx	r3
    e306:	4603      	mov	r3, r0
    e308:	e00c      	b.n	e324 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    e30a:	79fb      	ldrb	r3, [r7, #7]
    e30c:	6839      	ldr	r1, [r7, #0]
    e30e:	4618      	mov	r0, r3
    e310:	4b07      	ldr	r3, [pc, #28]	; (e330 <usbdc_get_desc_req+0x60>)
    e312:	4798      	blx	r3
    e314:	4603      	mov	r3, r0
    e316:	e005      	b.n	e324 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    e318:	79fb      	ldrb	r3, [r7, #7]
    e31a:	6839      	ldr	r1, [r7, #0]
    e31c:	4618      	mov	r0, r3
    e31e:	4b05      	ldr	r3, [pc, #20]	; (e334 <usbdc_get_desc_req+0x64>)
    e320:	4798      	blx	r3
    e322:	4603      	mov	r3, r0
}
    e324:	4618      	mov	r0, r3
    e326:	3710      	adds	r7, #16
    e328:	46bd      	mov	sp, r7
    e32a:	bd80      	pop	{r7, pc}
    e32c:	0000e111 	.word	0x0000e111
    e330:	0000e189 	.word	0x0000e189
    e334:	0000e239 	.word	0x0000e239

0000e338 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    e338:	b590      	push	{r4, r7, lr}
    e33a:	b085      	sub	sp, #20
    e33c:	af00      	add	r7, sp, #0
    e33e:	4603      	mov	r3, r0
    e340:	6039      	str	r1, [r7, #0]
    e342:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e344:	683b      	ldr	r3, [r7, #0]
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	f003 031f 	and.w	r3, r3, #31
    e34c:	2b00      	cmp	r3, #0
    e34e:	db1b      	blt.n	e388 <usbdc_get_status_req+0x50>
    e350:	2b01      	cmp	r3, #1
    e352:	dd02      	ble.n	e35a <usbdc_get_status_req+0x22>
    e354:	2b02      	cmp	r3, #2
    e356:	d003      	beq.n	e360 <usbdc_get_status_req+0x28>
    e358:	e016      	b.n	e388 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e35a:	2300      	movs	r3, #0
    e35c:	60fb      	str	r3, [r7, #12]
		break;
    e35e:	e015      	b.n	e38c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e360:	683b      	ldr	r3, [r7, #0]
    e362:	889b      	ldrh	r3, [r3, #4]
    e364:	b29b      	uxth	r3, r3
    e366:	b2db      	uxtb	r3, r3
    e368:	2102      	movs	r1, #2
    e36a:	4618      	mov	r0, r3
    e36c:	4b0f      	ldr	r3, [pc, #60]	; (e3ac <usbdc_get_status_req+0x74>)
    e36e:	4798      	blx	r3
    e370:	4603      	mov	r3, r0
    e372:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e374:	68fb      	ldr	r3, [r7, #12]
    e376:	2b00      	cmp	r3, #0
    e378:	da01      	bge.n	e37e <usbdc_get_status_req+0x46>
			return false;
    e37a:	2300      	movs	r3, #0
    e37c:	e012      	b.n	e3a4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e37e:	68fb      	ldr	r3, [r7, #12]
    e380:	f003 0301 	and.w	r3, r3, #1
    e384:	60fb      	str	r3, [r7, #12]
		break;
    e386:	e001      	b.n	e38c <usbdc_get_status_req+0x54>
	default:
		return false;
    e388:	2300      	movs	r3, #0
    e38a:	e00b      	b.n	e3a4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e38c:	4b08      	ldr	r3, [pc, #32]	; (e3b0 <usbdc_get_status_req+0x78>)
    e38e:	695b      	ldr	r3, [r3, #20]
    e390:	89ba      	ldrh	r2, [r7, #12]
    e392:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e394:	4b06      	ldr	r3, [pc, #24]	; (e3b0 <usbdc_get_status_req+0x78>)
    e396:	6959      	ldr	r1, [r3, #20]
    e398:	79f8      	ldrb	r0, [r7, #7]
    e39a:	2300      	movs	r3, #0
    e39c:	2202      	movs	r2, #2
    e39e:	4c05      	ldr	r4, [pc, #20]	; (e3b4 <usbdc_get_status_req+0x7c>)
    e3a0:	47a0      	blx	r4
	return true;
    e3a2:	2301      	movs	r3, #1
}
    e3a4:	4618      	mov	r0, r3
    e3a6:	3714      	adds	r7, #20
    e3a8:	46bd      	mov	sp, r7
    e3aa:	bd90      	pop	{r4, r7, pc}
    e3ac:	00004c55 	.word	0x00004c55
    e3b0:	200027d0 	.word	0x200027d0
    e3b4:	0000ebf5 	.word	0x0000ebf5

0000e3b8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e3b8:	b590      	push	{r4, r7, lr}
    e3ba:	b085      	sub	sp, #20
    e3bc:	af00      	add	r7, sp, #0
    e3be:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e3c0:	4b1f      	ldr	r3, [pc, #124]	; (e440 <usbdc_get_interface+0x88>)
    e3c2:	691b      	ldr	r3, [r3, #16]
    e3c4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e3c6:	4b1e      	ldr	r3, [pc, #120]	; (e440 <usbdc_get_interface+0x88>)
    e3c8:	7f5b      	ldrb	r3, [r3, #29]
    e3ca:	461a      	mov	r2, r3
    e3cc:	687b      	ldr	r3, [r7, #4]
    e3ce:	889b      	ldrh	r3, [r3, #4]
    e3d0:	b29b      	uxth	r3, r3
    e3d2:	fa42 f303 	asr.w	r3, r2, r3
    e3d6:	f003 0301 	and.w	r3, r3, #1
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d128      	bne.n	e430 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e3de:	4b18      	ldr	r3, [pc, #96]	; (e440 <usbdc_get_interface+0x88>)
    e3e0:	695b      	ldr	r3, [r3, #20]
    e3e2:	2200      	movs	r2, #0
    e3e4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e3e6:	4b16      	ldr	r3, [pc, #88]	; (e440 <usbdc_get_interface+0x88>)
    e3e8:	6959      	ldr	r1, [r3, #20]
    e3ea:	2300      	movs	r3, #0
    e3ec:	2201      	movs	r2, #1
    e3ee:	2000      	movs	r0, #0
    e3f0:	4c14      	ldr	r4, [pc, #80]	; (e444 <usbdc_get_interface+0x8c>)
    e3f2:	47a0      	blx	r4
		return true;
    e3f4:	2301      	movs	r3, #1
    e3f6:	e01f      	b.n	e438 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e3f8:	68fb      	ldr	r3, [r7, #12]
    e3fa:	685b      	ldr	r3, [r3, #4]
    e3fc:	687a      	ldr	r2, [r7, #4]
    e3fe:	2102      	movs	r1, #2
    e400:	68f8      	ldr	r0, [r7, #12]
    e402:	4798      	blx	r3
    e404:	60b8      	str	r0, [r7, #8]
    e406:	68bb      	ldr	r3, [r7, #8]
    e408:	2b00      	cmp	r3, #0
    e40a:	da03      	bge.n	e414 <usbdc_get_interface+0x5c>
			func = func->next;
    e40c:	68fb      	ldr	r3, [r7, #12]
    e40e:	681b      	ldr	r3, [r3, #0]
    e410:	60fb      	str	r3, [r7, #12]
    e412:	e00d      	b.n	e430 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e414:	4b0a      	ldr	r3, [pc, #40]	; (e440 <usbdc_get_interface+0x88>)
    e416:	695b      	ldr	r3, [r3, #20]
    e418:	68ba      	ldr	r2, [r7, #8]
    e41a:	b2d2      	uxtb	r2, r2
    e41c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e41e:	4b08      	ldr	r3, [pc, #32]	; (e440 <usbdc_get_interface+0x88>)
    e420:	6959      	ldr	r1, [r3, #20]
    e422:	2300      	movs	r3, #0
    e424:	2201      	movs	r2, #1
    e426:	2000      	movs	r0, #0
    e428:	4c06      	ldr	r4, [pc, #24]	; (e444 <usbdc_get_interface+0x8c>)
    e42a:	47a0      	blx	r4
			return true;
    e42c:	2301      	movs	r3, #1
    e42e:	e003      	b.n	e438 <usbdc_get_interface+0x80>
	while (NULL != func) {
    e430:	68fb      	ldr	r3, [r7, #12]
    e432:	2b00      	cmp	r3, #0
    e434:	d1e0      	bne.n	e3f8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    e436:	2300      	movs	r3, #0
}
    e438:	4618      	mov	r0, r3
    e43a:	3714      	adds	r7, #20
    e43c:	46bd      	mov	sp, r7
    e43e:	bd90      	pop	{r4, r7, pc}
    e440:	200027d0 	.word	0x200027d0
    e444:	0000ebf5 	.word	0x0000ebf5

0000e448 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e448:	b590      	push	{r4, r7, lr}
    e44a:	b083      	sub	sp, #12
    e44c:	af00      	add	r7, sp, #0
    e44e:	4603      	mov	r3, r0
    e450:	6039      	str	r1, [r7, #0]
    e452:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e454:	683b      	ldr	r3, [r7, #0]
    e456:	785b      	ldrb	r3, [r3, #1]
    e458:	2b0a      	cmp	r3, #10
    e45a:	d83a      	bhi.n	e4d2 <usbdc_get_req+0x8a>
    e45c:	a201      	add	r2, pc, #4	; (adr r2, e464 <usbdc_get_req+0x1c>)
    e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e462:	bf00      	nop
    e464:	0000e4bb 	.word	0x0000e4bb
    e468:	0000e4d3 	.word	0x0000e4d3
    e46c:	0000e4d3 	.word	0x0000e4d3
    e470:	0000e4d3 	.word	0x0000e4d3
    e474:	0000e4d3 	.word	0x0000e4d3
    e478:	0000e4d3 	.word	0x0000e4d3
    e47c:	0000e491 	.word	0x0000e491
    e480:	0000e4d3 	.word	0x0000e4d3
    e484:	0000e49f 	.word	0x0000e49f
    e488:	0000e4d3 	.word	0x0000e4d3
    e48c:	0000e4c9 	.word	0x0000e4c9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e490:	79fb      	ldrb	r3, [r7, #7]
    e492:	6839      	ldr	r1, [r7, #0]
    e494:	4618      	mov	r0, r3
    e496:	4b11      	ldr	r3, [pc, #68]	; (e4dc <usbdc_get_req+0x94>)
    e498:	4798      	blx	r3
    e49a:	4603      	mov	r3, r0
    e49c:	e01a      	b.n	e4d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e49e:	4b10      	ldr	r3, [pc, #64]	; (e4e0 <usbdc_get_req+0x98>)
    e4a0:	695b      	ldr	r3, [r3, #20]
    e4a2:	4a0f      	ldr	r2, [pc, #60]	; (e4e0 <usbdc_get_req+0x98>)
    e4a4:	7ed2      	ldrb	r2, [r2, #27]
    e4a6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e4a8:	4b0d      	ldr	r3, [pc, #52]	; (e4e0 <usbdc_get_req+0x98>)
    e4aa:	6959      	ldr	r1, [r3, #20]
    e4ac:	79f8      	ldrb	r0, [r7, #7]
    e4ae:	2300      	movs	r3, #0
    e4b0:	2201      	movs	r2, #1
    e4b2:	4c0c      	ldr	r4, [pc, #48]	; (e4e4 <usbdc_get_req+0x9c>)
    e4b4:	47a0      	blx	r4
		return true;
    e4b6:	2301      	movs	r3, #1
    e4b8:	e00c      	b.n	e4d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e4ba:	79fb      	ldrb	r3, [r7, #7]
    e4bc:	6839      	ldr	r1, [r7, #0]
    e4be:	4618      	mov	r0, r3
    e4c0:	4b09      	ldr	r3, [pc, #36]	; (e4e8 <usbdc_get_req+0xa0>)
    e4c2:	4798      	blx	r3
    e4c4:	4603      	mov	r3, r0
    e4c6:	e005      	b.n	e4d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e4c8:	6838      	ldr	r0, [r7, #0]
    e4ca:	4b08      	ldr	r3, [pc, #32]	; (e4ec <usbdc_get_req+0xa4>)
    e4cc:	4798      	blx	r3
    e4ce:	4603      	mov	r3, r0
    e4d0:	e000      	b.n	e4d4 <usbdc_get_req+0x8c>
	default:
		return false;
    e4d2:	2300      	movs	r3, #0
	}
}
    e4d4:	4618      	mov	r0, r3
    e4d6:	370c      	adds	r7, #12
    e4d8:	46bd      	mov	sp, r7
    e4da:	bd90      	pop	{r4, r7, pc}
    e4dc:	0000e2d1 	.word	0x0000e2d1
    e4e0:	200027d0 	.word	0x200027d0
    e4e4:	0000ebf5 	.word	0x0000ebf5
    e4e8:	0000e339 	.word	0x0000e339
    e4ec:	0000e3b9 	.word	0x0000e3b9

0000e4f0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e4f0:	b590      	push	{r4, r7, lr}
    e4f2:	b083      	sub	sp, #12
    e4f4:	af00      	add	r7, sp, #0
    e4f6:	4603      	mov	r3, r0
    e4f8:	6039      	str	r1, [r7, #0]
    e4fa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e4fc:	683b      	ldr	r3, [r7, #0]
    e4fe:	781b      	ldrb	r3, [r3, #0]
    e500:	f003 031f 	and.w	r3, r3, #31
    e504:	2b02      	cmp	r3, #2
    e506:	d116      	bne.n	e536 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e508:	683b      	ldr	r3, [r7, #0]
    e50a:	88db      	ldrh	r3, [r3, #6]
    e50c:	b29b      	uxth	r3, r3
    e50e:	2b00      	cmp	r3, #0
    e510:	d001      	beq.n	e516 <usbdc_clear_ftr_req+0x26>
			return false;
    e512:	2300      	movs	r3, #0
    e514:	e010      	b.n	e538 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e516:	683b      	ldr	r3, [r7, #0]
    e518:	889b      	ldrh	r3, [r3, #4]
    e51a:	b29b      	uxth	r3, r3
    e51c:	b2db      	uxtb	r3, r3
    e51e:	2100      	movs	r1, #0
    e520:	4618      	mov	r0, r3
    e522:	4b07      	ldr	r3, [pc, #28]	; (e540 <usbdc_clear_ftr_req+0x50>)
    e524:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e526:	79f8      	ldrb	r0, [r7, #7]
    e528:	2301      	movs	r3, #1
    e52a:	2200      	movs	r2, #0
    e52c:	2100      	movs	r1, #0
    e52e:	4c05      	ldr	r4, [pc, #20]	; (e544 <usbdc_clear_ftr_req+0x54>)
    e530:	47a0      	blx	r4
		return true;
    e532:	2301      	movs	r3, #1
    e534:	e000      	b.n	e538 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e536:	2300      	movs	r3, #0
	}
}
    e538:	4618      	mov	r0, r3
    e53a:	370c      	adds	r7, #12
    e53c:	46bd      	mov	sp, r7
    e53e:	bd90      	pop	{r4, r7, pc}
    e540:	00004c55 	.word	0x00004c55
    e544:	0000ebf5 	.word	0x0000ebf5

0000e548 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e548:	b590      	push	{r4, r7, lr}
    e54a:	b083      	sub	sp, #12
    e54c:	af00      	add	r7, sp, #0
    e54e:	4603      	mov	r3, r0
    e550:	6039      	str	r1, [r7, #0]
    e552:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e554:	683b      	ldr	r3, [r7, #0]
    e556:	781b      	ldrb	r3, [r3, #0]
    e558:	f003 031f 	and.w	r3, r3, #31
    e55c:	2b02      	cmp	r3, #2
    e55e:	d116      	bne.n	e58e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e560:	683b      	ldr	r3, [r7, #0]
    e562:	88db      	ldrh	r3, [r3, #6]
    e564:	b29b      	uxth	r3, r3
    e566:	2b00      	cmp	r3, #0
    e568:	d001      	beq.n	e56e <usbdc_set_ftr_req+0x26>
			return false;
    e56a:	2300      	movs	r3, #0
    e56c:	e010      	b.n	e590 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e56e:	683b      	ldr	r3, [r7, #0]
    e570:	889b      	ldrh	r3, [r3, #4]
    e572:	b29b      	uxth	r3, r3
    e574:	b2db      	uxtb	r3, r3
    e576:	2101      	movs	r1, #1
    e578:	4618      	mov	r0, r3
    e57a:	4b07      	ldr	r3, [pc, #28]	; (e598 <usbdc_set_ftr_req+0x50>)
    e57c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e57e:	79f8      	ldrb	r0, [r7, #7]
    e580:	2301      	movs	r3, #1
    e582:	2200      	movs	r2, #0
    e584:	2100      	movs	r1, #0
    e586:	4c05      	ldr	r4, [pc, #20]	; (e59c <usbdc_set_ftr_req+0x54>)
    e588:	47a0      	blx	r4
		return true;
    e58a:	2301      	movs	r3, #1
    e58c:	e000      	b.n	e590 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e58e:	2300      	movs	r3, #0
	}
}
    e590:	4618      	mov	r0, r3
    e592:	370c      	adds	r7, #12
    e594:	46bd      	mov	sp, r7
    e596:	bd90      	pop	{r4, r7, pc}
    e598:	00004c55 	.word	0x00004c55
    e59c:	0000ebf5 	.word	0x0000ebf5

0000e5a0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e5a0:	b580      	push	{r7, lr}
    e5a2:	b082      	sub	sp, #8
    e5a4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e5a6:	4b0a      	ldr	r3, [pc, #40]	; (e5d0 <usbdc_unconfig+0x30>)
    e5a8:	691b      	ldr	r3, [r3, #16]
    e5aa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e5ac:	e008      	b.n	e5c0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	685b      	ldr	r3, [r3, #4]
    e5b2:	2200      	movs	r2, #0
    e5b4:	2101      	movs	r1, #1
    e5b6:	6878      	ldr	r0, [r7, #4]
    e5b8:	4798      	blx	r3
		func = func->next;
    e5ba:	687b      	ldr	r3, [r7, #4]
    e5bc:	681b      	ldr	r3, [r3, #0]
    e5be:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	2b00      	cmp	r3, #0
    e5c4:	d1f3      	bne.n	e5ae <usbdc_unconfig+0xe>
	}
}
    e5c6:	bf00      	nop
    e5c8:	3708      	adds	r7, #8
    e5ca:	46bd      	mov	sp, r7
    e5cc:	bd80      	pop	{r7, pc}
    e5ce:	bf00      	nop
    e5d0:	200027d0 	.word	0x200027d0

0000e5d4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    e5d4:	b580      	push	{r7, lr}
    e5d6:	b088      	sub	sp, #32
    e5d8:	af00      	add	r7, sp, #0
    e5da:	4603      	mov	r3, r0
    e5dc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    e5de:	2300      	movs	r3, #0
    e5e0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    e5e2:	23ff      	movs	r3, #255	; 0xff
    e5e4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    e5e6:	79fb      	ldrb	r3, [r7, #7]
    e5e8:	2b00      	cmp	r3, #0
    e5ea:	d103      	bne.n	e5f4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    e5ec:	4b2e      	ldr	r3, [pc, #184]	; (e6a8 <usbdc_set_config+0xd4>)
    e5ee:	4798      	blx	r3
		return true;
    e5f0:	2301      	movs	r3, #1
    e5f2:	e055      	b.n	e6a0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e5f4:	69bb      	ldr	r3, [r7, #24]
    e5f6:	2b00      	cmp	r3, #0
    e5f8:	d10a      	bne.n	e610 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    e5fa:	4b2c      	ldr	r3, [pc, #176]	; (e6ac <usbdc_set_config+0xd8>)
    e5fc:	681b      	ldr	r3, [r3, #0]
    e5fe:	6818      	ldr	r0, [r3, #0]
    e600:	4b2a      	ldr	r3, [pc, #168]	; (e6ac <usbdc_set_config+0xd8>)
    e602:	681b      	ldr	r3, [r3, #0]
    e604:	685b      	ldr	r3, [r3, #4]
    e606:	79fa      	ldrb	r2, [r7, #7]
    e608:	4619      	mov	r1, r3
    e60a:	4b29      	ldr	r3, [pc, #164]	; (e6b0 <usbdc_set_config+0xdc>)
    e60c:	4798      	blx	r3
    e60e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    e610:	69bb      	ldr	r3, [r7, #24]
    e612:	2b00      	cmp	r3, #0
    e614:	d101      	bne.n	e61a <usbdc_set_config+0x46>
		return false;
    e616:	2300      	movs	r3, #0
    e618:	e042      	b.n	e6a0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    e61a:	69b8      	ldr	r0, [r7, #24]
    e61c:	4b25      	ldr	r3, [pc, #148]	; (e6b4 <usbdc_set_config+0xe0>)
    e61e:	4798      	blx	r3
    e620:	4603      	mov	r3, r0
    e622:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    e624:	8abb      	ldrh	r3, [r7, #20]
    e626:	69ba      	ldr	r2, [r7, #24]
    e628:	4413      	add	r3, r2
    e62a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    e62c:	693b      	ldr	r3, [r7, #16]
    e62e:	2204      	movs	r2, #4
    e630:	4619      	mov	r1, r3
    e632:	69b8      	ldr	r0, [r7, #24]
    e634:	4b20      	ldr	r3, [pc, #128]	; (e6b8 <usbdc_set_config+0xe4>)
    e636:	4798      	blx	r3
    e638:	4603      	mov	r3, r0
    e63a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e63c:	e02c      	b.n	e698 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e63e:	68fb      	ldr	r3, [r7, #12]
    e640:	3302      	adds	r3, #2
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	7dfa      	ldrb	r2, [r7, #23]
    e646:	429a      	cmp	r2, r3
    e648:	d018      	beq.n	e67c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e64a:	68fb      	ldr	r3, [r7, #12]
    e64c:	789b      	ldrb	r3, [r3, #2]
    e64e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e650:	4b16      	ldr	r3, [pc, #88]	; (e6ac <usbdc_set_config+0xd8>)
    e652:	691b      	ldr	r3, [r3, #16]
    e654:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e656:	e00c      	b.n	e672 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e658:	69fb      	ldr	r3, [r7, #28]
    e65a:	685b      	ldr	r3, [r3, #4]
    e65c:	f107 020c 	add.w	r2, r7, #12
    e660:	2100      	movs	r1, #0
    e662:	69f8      	ldr	r0, [r7, #28]
    e664:	4798      	blx	r3
    e666:	4603      	mov	r3, r0
    e668:	2b00      	cmp	r3, #0
    e66a:	d006      	beq.n	e67a <usbdc_set_config+0xa6>
					func = func->next;
    e66c:	69fb      	ldr	r3, [r7, #28]
    e66e:	681b      	ldr	r3, [r3, #0]
    e670:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e672:	69fb      	ldr	r3, [r7, #28]
    e674:	2b00      	cmp	r3, #0
    e676:	d1ef      	bne.n	e658 <usbdc_set_config+0x84>
    e678:	e000      	b.n	e67c <usbdc_set_config+0xa8>
				} else {
					break;
    e67a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e67c:	68fb      	ldr	r3, [r7, #12]
    e67e:	4618      	mov	r0, r3
    e680:	4b0e      	ldr	r3, [pc, #56]	; (e6bc <usbdc_set_config+0xe8>)
    e682:	4798      	blx	r3
    e684:	4603      	mov	r3, r0
    e686:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e688:	68fb      	ldr	r3, [r7, #12]
    e68a:	6939      	ldr	r1, [r7, #16]
    e68c:	2204      	movs	r2, #4
    e68e:	4618      	mov	r0, r3
    e690:	4b09      	ldr	r3, [pc, #36]	; (e6b8 <usbdc_set_config+0xe4>)
    e692:	4798      	blx	r3
    e694:	4603      	mov	r3, r0
    e696:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e698:	68fb      	ldr	r3, [r7, #12]
    e69a:	2b00      	cmp	r3, #0
    e69c:	d1cf      	bne.n	e63e <usbdc_set_config+0x6a>
	}
	return true;
    e69e:	2301      	movs	r3, #1
}
    e6a0:	4618      	mov	r0, r3
    e6a2:	3720      	adds	r7, #32
    e6a4:	46bd      	mov	sp, r7
    e6a6:	bd80      	pop	{r7, pc}
    e6a8:	0000e5a1 	.word	0x0000e5a1
    e6ac:	200027d0 	.word	0x200027d0
    e6b0:	0000ef45 	.word	0x0000ef45
    e6b4:	0000e0f1 	.word	0x0000e0f1
    e6b8:	0000ee85 	.word	0x0000ee85
    e6bc:	0000e0cd 	.word	0x0000e0cd

0000e6c0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e6c0:	b580      	push	{r7, lr}
    e6c2:	b082      	sub	sp, #8
    e6c4:	af00      	add	r7, sp, #0
    e6c6:	4603      	mov	r3, r0
    e6c8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e6ca:	79fb      	ldrb	r3, [r7, #7]
    e6cc:	4618      	mov	r0, r3
    e6ce:	4b03      	ldr	r3, [pc, #12]	; (e6dc <usbdc_set_address+0x1c>)
    e6d0:	4798      	blx	r3
}
    e6d2:	bf00      	nop
    e6d4:	3708      	adds	r7, #8
    e6d6:	46bd      	mov	sp, r7
    e6d8:	bd80      	pop	{r7, pc}
    e6da:	bf00      	nop
    e6dc:	00004871 	.word	0x00004871

0000e6e0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e6e0:	b590      	push	{r4, r7, lr}
    e6e2:	b087      	sub	sp, #28
    e6e4:	af00      	add	r7, sp, #0
    e6e6:	4603      	mov	r3, r0
    e6e8:	460a      	mov	r2, r1
    e6ea:	80fb      	strh	r3, [r7, #6]
    e6ec:	4613      	mov	r3, r2
    e6ee:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e6f0:	2300      	movs	r3, #0
    e6f2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e6f4:	693b      	ldr	r3, [r7, #16]
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d10b      	bne.n	e712 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e6fa:	4b43      	ldr	r3, [pc, #268]	; (e808 <usbdc_set_interface+0x128>)
    e6fc:	681b      	ldr	r3, [r3, #0]
    e6fe:	6818      	ldr	r0, [r3, #0]
    e700:	4b41      	ldr	r3, [pc, #260]	; (e808 <usbdc_set_interface+0x128>)
    e702:	681b      	ldr	r3, [r3, #0]
    e704:	6859      	ldr	r1, [r3, #4]
    e706:	4b40      	ldr	r3, [pc, #256]	; (e808 <usbdc_set_interface+0x128>)
    e708:	7edb      	ldrb	r3, [r3, #27]
    e70a:	461a      	mov	r2, r3
    e70c:	4b3f      	ldr	r3, [pc, #252]	; (e80c <usbdc_set_interface+0x12c>)
    e70e:	4798      	blx	r3
    e710:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e712:	693b      	ldr	r3, [r7, #16]
    e714:	2b00      	cmp	r3, #0
    e716:	d101      	bne.n	e71c <usbdc_set_interface+0x3c>
		return false;
    e718:	2300      	movs	r3, #0
    e71a:	e071      	b.n	e800 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e71c:	693b      	ldr	r3, [r7, #16]
    e71e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e720:	6938      	ldr	r0, [r7, #16]
    e722:	4b3b      	ldr	r3, [pc, #236]	; (e810 <usbdc_set_interface+0x130>)
    e724:	4798      	blx	r3
    e726:	4603      	mov	r3, r0
    e728:	461a      	mov	r2, r3
    e72a:	693b      	ldr	r3, [r7, #16]
    e72c:	4413      	add	r3, r2
    e72e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e730:	68bb      	ldr	r3, [r7, #8]
    e732:	68f9      	ldr	r1, [r7, #12]
    e734:	2204      	movs	r2, #4
    e736:	4618      	mov	r0, r3
    e738:	4b36      	ldr	r3, [pc, #216]	; (e814 <usbdc_set_interface+0x134>)
    e73a:	4798      	blx	r3
    e73c:	6138      	str	r0, [r7, #16]
    e73e:	693b      	ldr	r3, [r7, #16]
    e740:	2b00      	cmp	r3, #0
    e742:	d113      	bne.n	e76c <usbdc_set_interface+0x8c>
		return false;
    e744:	2300      	movs	r3, #0
    e746:	e05b      	b.n	e800 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e748:	68bb      	ldr	r3, [r7, #8]
    e74a:	4618      	mov	r0, r3
    e74c:	4b32      	ldr	r3, [pc, #200]	; (e818 <usbdc_set_interface+0x138>)
    e74e:	4798      	blx	r3
    e750:	4603      	mov	r3, r0
    e752:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e754:	68bb      	ldr	r3, [r7, #8]
    e756:	68f9      	ldr	r1, [r7, #12]
    e758:	2204      	movs	r2, #4
    e75a:	4618      	mov	r0, r3
    e75c:	4b2d      	ldr	r3, [pc, #180]	; (e814 <usbdc_set_interface+0x134>)
    e75e:	4798      	blx	r3
    e760:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e762:	693b      	ldr	r3, [r7, #16]
    e764:	2b00      	cmp	r3, #0
    e766:	d101      	bne.n	e76c <usbdc_set_interface+0x8c>
			return false;
    e768:	2300      	movs	r3, #0
    e76a:	e049      	b.n	e800 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e76c:	693b      	ldr	r3, [r7, #16]
    e76e:	3302      	adds	r3, #2
    e770:	781b      	ldrb	r3, [r3, #0]
    e772:	b29b      	uxth	r3, r3
    e774:	88ba      	ldrh	r2, [r7, #4]
    e776:	429a      	cmp	r2, r3
    e778:	d1e6      	bne.n	e748 <usbdc_set_interface+0x68>
    e77a:	693b      	ldr	r3, [r7, #16]
    e77c:	3303      	adds	r3, #3
    e77e:	781b      	ldrb	r3, [r3, #0]
    e780:	b29b      	uxth	r3, r3
    e782:	88fa      	ldrh	r2, [r7, #6]
    e784:	429a      	cmp	r2, r3
    e786:	d1df      	bne.n	e748 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e788:	693b      	ldr	r3, [r7, #16]
    e78a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e78c:	4b1e      	ldr	r3, [pc, #120]	; (e808 <usbdc_set_interface+0x128>)
    e78e:	691b      	ldr	r3, [r3, #16]
    e790:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e792:	e031      	b.n	e7f8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e794:	697b      	ldr	r3, [r7, #20]
    e796:	685b      	ldr	r3, [r3, #4]
    e798:	f107 0208 	add.w	r2, r7, #8
    e79c:	2101      	movs	r1, #1
    e79e:	6978      	ldr	r0, [r7, #20]
    e7a0:	4798      	blx	r3
    e7a2:	4603      	mov	r3, r0
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d003      	beq.n	e7b0 <usbdc_set_interface+0xd0>
			func = func->next;
    e7a8:	697b      	ldr	r3, [r7, #20]
    e7aa:	681b      	ldr	r3, [r3, #0]
    e7ac:	617b      	str	r3, [r7, #20]
    e7ae:	e023      	b.n	e7f8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e7b0:	697b      	ldr	r3, [r7, #20]
    e7b2:	685b      	ldr	r3, [r3, #4]
    e7b4:	f107 0208 	add.w	r2, r7, #8
    e7b8:	2100      	movs	r1, #0
    e7ba:	6978      	ldr	r0, [r7, #20]
    e7bc:	4798      	blx	r3
    e7be:	4603      	mov	r3, r0
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d117      	bne.n	e7f4 <usbdc_set_interface+0x114>
			if (alt_set) {
    e7c4:	88fb      	ldrh	r3, [r7, #6]
    e7c6:	2b00      	cmp	r3, #0
    e7c8:	d00c      	beq.n	e7e4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e7ca:	4b0f      	ldr	r3, [pc, #60]	; (e808 <usbdc_set_interface+0x128>)
    e7cc:	7f5b      	ldrb	r3, [r3, #29]
    e7ce:	b25a      	sxtb	r2, r3
    e7d0:	88bb      	ldrh	r3, [r7, #4]
    e7d2:	2101      	movs	r1, #1
    e7d4:	fa01 f303 	lsl.w	r3, r1, r3
    e7d8:	b25b      	sxtb	r3, r3
    e7da:	4313      	orrs	r3, r2
    e7dc:	b25b      	sxtb	r3, r3
    e7de:	b2da      	uxtb	r2, r3
    e7e0:	4b09      	ldr	r3, [pc, #36]	; (e808 <usbdc_set_interface+0x128>)
    e7e2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e7e4:	2300      	movs	r3, #0
    e7e6:	2200      	movs	r2, #0
    e7e8:	2100      	movs	r1, #0
    e7ea:	2000      	movs	r0, #0
    e7ec:	4c0b      	ldr	r4, [pc, #44]	; (e81c <usbdc_set_interface+0x13c>)
    e7ee:	47a0      	blx	r4
			return true;
    e7f0:	2301      	movs	r3, #1
    e7f2:	e005      	b.n	e800 <usbdc_set_interface+0x120>
		} else {
			return false;
    e7f4:	2300      	movs	r3, #0
    e7f6:	e003      	b.n	e800 <usbdc_set_interface+0x120>
	while (NULL != func) {
    e7f8:	697b      	ldr	r3, [r7, #20]
    e7fa:	2b00      	cmp	r3, #0
    e7fc:	d1ca      	bne.n	e794 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e7fe:	2300      	movs	r3, #0
}
    e800:	4618      	mov	r0, r3
    e802:	371c      	adds	r7, #28
    e804:	46bd      	mov	sp, r7
    e806:	bd90      	pop	{r4, r7, pc}
    e808:	200027d0 	.word	0x200027d0
    e80c:	0000ef45 	.word	0x0000ef45
    e810:	0000e0f1 	.word	0x0000e0f1
    e814:	0000ee85 	.word	0x0000ee85
    e818:	0000e0cd 	.word	0x0000e0cd
    e81c:	0000ebf5 	.word	0x0000ebf5

0000e820 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e820:	b590      	push	{r4, r7, lr}
    e822:	b083      	sub	sp, #12
    e824:	af00      	add	r7, sp, #0
    e826:	4603      	mov	r3, r0
    e828:	6039      	str	r1, [r7, #0]
    e82a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e82c:	683b      	ldr	r3, [r7, #0]
    e82e:	785b      	ldrb	r3, [r3, #1]
    e830:	3b01      	subs	r3, #1
    e832:	2b0a      	cmp	r3, #10
    e834:	d85b      	bhi.n	e8ee <usbdc_set_req+0xce>
    e836:	a201      	add	r2, pc, #4	; (adr r2, e83c <usbdc_set_req+0x1c>)
    e838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e83c:	0000e8bb 	.word	0x0000e8bb
    e840:	0000e8ef 	.word	0x0000e8ef
    e844:	0000e8c9 	.word	0x0000e8c9
    e848:	0000e8ef 	.word	0x0000e8ef
    e84c:	0000e869 	.word	0x0000e869
    e850:	0000e8ef 	.word	0x0000e8ef
    e854:	0000e8ef 	.word	0x0000e8ef
    e858:	0000e8ef 	.word	0x0000e8ef
    e85c:	0000e883 	.word	0x0000e883
    e860:	0000e8ef 	.word	0x0000e8ef
    e864:	0000e8d7 	.word	0x0000e8d7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e868:	79f8      	ldrb	r0, [r7, #7]
    e86a:	2301      	movs	r3, #1
    e86c:	2200      	movs	r2, #0
    e86e:	2100      	movs	r1, #0
    e870:	4c21      	ldr	r4, [pc, #132]	; (e8f8 <usbdc_set_req+0xd8>)
    e872:	47a0      	blx	r4
    e874:	4603      	mov	r3, r0
    e876:	2b00      	cmp	r3, #0
    e878:	bf0c      	ite	eq
    e87a:	2301      	moveq	r3, #1
    e87c:	2300      	movne	r3, #0
    e87e:	b2db      	uxtb	r3, r3
    e880:	e036      	b.n	e8f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e882:	683b      	ldr	r3, [r7, #0]
    e884:	885b      	ldrh	r3, [r3, #2]
    e886:	b29b      	uxth	r3, r3
    e888:	b2db      	uxtb	r3, r3
    e88a:	4618      	mov	r0, r3
    e88c:	4b1b      	ldr	r3, [pc, #108]	; (e8fc <usbdc_set_req+0xdc>)
    e88e:	4798      	blx	r3
    e890:	4603      	mov	r3, r0
    e892:	f083 0301 	eor.w	r3, r3, #1
    e896:	b2db      	uxtb	r3, r3
    e898:	2b00      	cmp	r3, #0
    e89a:	d001      	beq.n	e8a0 <usbdc_set_req+0x80>
			return false;
    e89c:	2300      	movs	r3, #0
    e89e:	e027      	b.n	e8f0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e8a0:	79f8      	ldrb	r0, [r7, #7]
    e8a2:	2301      	movs	r3, #1
    e8a4:	2200      	movs	r2, #0
    e8a6:	2100      	movs	r1, #0
    e8a8:	4c13      	ldr	r4, [pc, #76]	; (e8f8 <usbdc_set_req+0xd8>)
    e8aa:	47a0      	blx	r4
    e8ac:	4603      	mov	r3, r0
    e8ae:	2b00      	cmp	r3, #0
    e8b0:	bf0c      	ite	eq
    e8b2:	2301      	moveq	r3, #1
    e8b4:	2300      	movne	r3, #0
    e8b6:	b2db      	uxtb	r3, r3
    e8b8:	e01a      	b.n	e8f0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e8ba:	79fb      	ldrb	r3, [r7, #7]
    e8bc:	6839      	ldr	r1, [r7, #0]
    e8be:	4618      	mov	r0, r3
    e8c0:	4b0f      	ldr	r3, [pc, #60]	; (e900 <usbdc_set_req+0xe0>)
    e8c2:	4798      	blx	r3
    e8c4:	4603      	mov	r3, r0
    e8c6:	e013      	b.n	e8f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e8c8:	79fb      	ldrb	r3, [r7, #7]
    e8ca:	6839      	ldr	r1, [r7, #0]
    e8cc:	4618      	mov	r0, r3
    e8ce:	4b0d      	ldr	r3, [pc, #52]	; (e904 <usbdc_set_req+0xe4>)
    e8d0:	4798      	blx	r3
    e8d2:	4603      	mov	r3, r0
    e8d4:	e00c      	b.n	e8f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e8d6:	683b      	ldr	r3, [r7, #0]
    e8d8:	885b      	ldrh	r3, [r3, #2]
    e8da:	b29a      	uxth	r2, r3
    e8dc:	683b      	ldr	r3, [r7, #0]
    e8de:	889b      	ldrh	r3, [r3, #4]
    e8e0:	b29b      	uxth	r3, r3
    e8e2:	4619      	mov	r1, r3
    e8e4:	4610      	mov	r0, r2
    e8e6:	4b08      	ldr	r3, [pc, #32]	; (e908 <usbdc_set_req+0xe8>)
    e8e8:	4798      	blx	r3
    e8ea:	4603      	mov	r3, r0
    e8ec:	e000      	b.n	e8f0 <usbdc_set_req+0xd0>
	default:
		return false;
    e8ee:	2300      	movs	r3, #0
	}
}
    e8f0:	4618      	mov	r0, r3
    e8f2:	370c      	adds	r7, #12
    e8f4:	46bd      	mov	sp, r7
    e8f6:	bd90      	pop	{r4, r7, pc}
    e8f8:	0000ebf5 	.word	0x0000ebf5
    e8fc:	0000e5d5 	.word	0x0000e5d5
    e900:	0000e4f1 	.word	0x0000e4f1
    e904:	0000e549 	.word	0x0000e549
    e908:	0000e6e1 	.word	0x0000e6e1

0000e90c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e90c:	b580      	push	{r7, lr}
    e90e:	b082      	sub	sp, #8
    e910:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e912:	4b0a      	ldr	r3, [pc, #40]	; (e93c <usbdc_sof_notify+0x30>)
    e914:	685b      	ldr	r3, [r3, #4]
    e916:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e918:	e009      	b.n	e92e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e91a:	687b      	ldr	r3, [r7, #4]
    e91c:	685b      	ldr	r3, [r3, #4]
    e91e:	2b00      	cmp	r3, #0
    e920:	d002      	beq.n	e928 <usbdc_sof_notify+0x1c>
			sof->cb();
    e922:	687b      	ldr	r3, [r7, #4]
    e924:	685b      	ldr	r3, [r3, #4]
    e926:	4798      	blx	r3
		}
		sof = sof->next;
    e928:	687b      	ldr	r3, [r7, #4]
    e92a:	681b      	ldr	r3, [r3, #0]
    e92c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e92e:	687b      	ldr	r3, [r7, #4]
    e930:	2b00      	cmp	r3, #0
    e932:	d1f2      	bne.n	e91a <usbdc_sof_notify+0xe>
	}
}
    e934:	bf00      	nop
    e936:	3708      	adds	r7, #8
    e938:	46bd      	mov	sp, r7
    e93a:	bd80      	pop	{r7, pc}
    e93c:	200027d0 	.word	0x200027d0

0000e940 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e940:	b580      	push	{r7, lr}
    e942:	b084      	sub	sp, #16
    e944:	af00      	add	r7, sp, #0
    e946:	4603      	mov	r3, r0
    e948:	6039      	str	r1, [r7, #0]
    e94a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e94c:	4b0b      	ldr	r3, [pc, #44]	; (e97c <usbdc_change_notify+0x3c>)
    e94e:	68db      	ldr	r3, [r3, #12]
    e950:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e952:	e00c      	b.n	e96e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e954:	68fb      	ldr	r3, [r7, #12]
    e956:	685b      	ldr	r3, [r3, #4]
    e958:	2b00      	cmp	r3, #0
    e95a:	d005      	beq.n	e968 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e95c:	68fb      	ldr	r3, [r7, #12]
    e95e:	685b      	ldr	r3, [r3, #4]
    e960:	79fa      	ldrb	r2, [r7, #7]
    e962:	6839      	ldr	r1, [r7, #0]
    e964:	4610      	mov	r0, r2
    e966:	4798      	blx	r3
		}
		cg = cg->next;
    e968:	68fb      	ldr	r3, [r7, #12]
    e96a:	681b      	ldr	r3, [r3, #0]
    e96c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e96e:	68fb      	ldr	r3, [r7, #12]
    e970:	2b00      	cmp	r3, #0
    e972:	d1ef      	bne.n	e954 <usbdc_change_notify+0x14>
	}
}
    e974:	bf00      	nop
    e976:	3710      	adds	r7, #16
    e978:	46bd      	mov	sp, r7
    e97a:	bd80      	pop	{r7, pc}
    e97c:	200027d0 	.word	0x200027d0

0000e980 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e980:	b580      	push	{r7, lr}
    e982:	b084      	sub	sp, #16
    e984:	af00      	add	r7, sp, #0
    e986:	4603      	mov	r3, r0
    e988:	6039      	str	r1, [r7, #0]
    e98a:	71fb      	strb	r3, [r7, #7]
    e98c:	4613      	mov	r3, r2
    e98e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e990:	4b12      	ldr	r3, [pc, #72]	; (e9dc <usbdc_request_handler+0x5c>)
    e992:	689b      	ldr	r3, [r3, #8]
    e994:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e996:	e019      	b.n	e9cc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e998:	68fb      	ldr	r3, [r7, #12]
    e99a:	685b      	ldr	r3, [r3, #4]
    e99c:	2b00      	cmp	r3, #0
    e99e:	d012      	beq.n	e9c6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e9a0:	68fb      	ldr	r3, [r7, #12]
    e9a2:	685b      	ldr	r3, [r3, #4]
    e9a4:	79ba      	ldrb	r2, [r7, #6]
    e9a6:	79f8      	ldrb	r0, [r7, #7]
    e9a8:	6839      	ldr	r1, [r7, #0]
    e9aa:	4798      	blx	r3
    e9ac:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e9ae:	68bb      	ldr	r3, [r7, #8]
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	d101      	bne.n	e9b8 <usbdc_request_handler+0x38>
				return true;
    e9b4:	2301      	movs	r3, #1
    e9b6:	e00d      	b.n	e9d4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e9b8:	68bb      	ldr	r3, [r7, #8]
    e9ba:	f113 0f0a 	cmn.w	r3, #10
    e9be:	d002      	beq.n	e9c6 <usbdc_request_handler+0x46>
				return -1;
    e9c0:	f04f 33ff 	mov.w	r3, #4294967295
    e9c4:	e006      	b.n	e9d4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e9c6:	68fb      	ldr	r3, [r7, #12]
    e9c8:	681b      	ldr	r3, [r3, #0]
    e9ca:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e9cc:	68fb      	ldr	r3, [r7, #12]
    e9ce:	2b00      	cmp	r3, #0
    e9d0:	d1e2      	bne.n	e998 <usbdc_request_handler+0x18>
	}
	return false;
    e9d2:	2300      	movs	r3, #0
}
    e9d4:	4618      	mov	r0, r3
    e9d6:	3710      	adds	r7, #16
    e9d8:	46bd      	mov	sp, r7
    e9da:	bd80      	pop	{r7, pc}
    e9dc:	200027d0 	.word	0x200027d0

0000e9e0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e9e0:	b580      	push	{r7, lr}
    e9e2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e9e4:	4b01      	ldr	r3, [pc, #4]	; (e9ec <usbd_sof_cb+0xc>)
    e9e6:	4798      	blx	r3
}
    e9e8:	bf00      	nop
    e9ea:	bd80      	pop	{r7, pc}
    e9ec:	0000e90d 	.word	0x0000e90d

0000e9f0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e9f0:	b580      	push	{r7, lr}
    e9f2:	b082      	sub	sp, #8
    e9f4:	af00      	add	r7, sp, #0
    e9f6:	4603      	mov	r3, r0
    e9f8:	6039      	str	r1, [r7, #0]
    e9fa:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e9fc:	79fb      	ldrb	r3, [r7, #7]
    e9fe:	2200      	movs	r2, #0
    ea00:	6839      	ldr	r1, [r7, #0]
    ea02:	4618      	mov	r0, r3
    ea04:	4b14      	ldr	r3, [pc, #80]	; (ea58 <usbdc_cb_ctl_req+0x68>)
    ea06:	4798      	blx	r3
    ea08:	4603      	mov	r3, r0
    ea0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ea0e:	d00b      	beq.n	ea28 <usbdc_cb_ctl_req+0x38>
    ea10:	2b01      	cmp	r3, #1
    ea12:	d007      	beq.n	ea24 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ea14:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ea16:	683b      	ldr	r3, [r7, #0]
    ea18:	781b      	ldrb	r3, [r3, #0]
    ea1a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ea1e:	2b00      	cmp	r3, #0
    ea20:	d007      	beq.n	ea32 <usbdc_cb_ctl_req+0x42>
    ea22:	e003      	b.n	ea2c <usbdc_cb_ctl_req+0x3c>
		return true;
    ea24:	2301      	movs	r3, #1
    ea26:	e013      	b.n	ea50 <usbdc_cb_ctl_req+0x60>
		return false;
    ea28:	2300      	movs	r3, #0
    ea2a:	e011      	b.n	ea50 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ea2c:	2b80      	cmp	r3, #128	; 0x80
    ea2e:	d007      	beq.n	ea40 <usbdc_cb_ctl_req+0x50>
    ea30:	e00d      	b.n	ea4e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ea32:	79fb      	ldrb	r3, [r7, #7]
    ea34:	6839      	ldr	r1, [r7, #0]
    ea36:	4618      	mov	r0, r3
    ea38:	4b08      	ldr	r3, [pc, #32]	; (ea5c <usbdc_cb_ctl_req+0x6c>)
    ea3a:	4798      	blx	r3
    ea3c:	4603      	mov	r3, r0
    ea3e:	e007      	b.n	ea50 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    ea40:	79fb      	ldrb	r3, [r7, #7]
    ea42:	6839      	ldr	r1, [r7, #0]
    ea44:	4618      	mov	r0, r3
    ea46:	4b06      	ldr	r3, [pc, #24]	; (ea60 <usbdc_cb_ctl_req+0x70>)
    ea48:	4798      	blx	r3
    ea4a:	4603      	mov	r3, r0
    ea4c:	e000      	b.n	ea50 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ea4e:	2300      	movs	r3, #0
	}
}
    ea50:	4618      	mov	r0, r3
    ea52:	3708      	adds	r7, #8
    ea54:	46bd      	mov	sp, r7
    ea56:	bd80      	pop	{r7, pc}
    ea58:	0000e981 	.word	0x0000e981
    ea5c:	0000e821 	.word	0x0000e821
    ea60:	0000e449 	.word	0x0000e449

0000ea64 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ea64:	b580      	push	{r7, lr}
    ea66:	b082      	sub	sp, #8
    ea68:	af00      	add	r7, sp, #0
    ea6a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    ea6c:	687b      	ldr	r3, [r7, #4]
    ea6e:	781b      	ldrb	r3, [r3, #0]
    ea70:	2b00      	cmp	r3, #0
    ea72:	d135      	bne.n	eae0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    ea74:	687b      	ldr	r3, [r7, #4]
    ea76:	785b      	ldrb	r3, [r3, #1]
    ea78:	2b05      	cmp	r3, #5
    ea7a:	d019      	beq.n	eab0 <usbdc_ctrl_status_end+0x4c>
    ea7c:	2b09      	cmp	r3, #9
    ea7e:	d000      	beq.n	ea82 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    ea80:	e02f      	b.n	eae2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    ea82:	687b      	ldr	r3, [r7, #4]
    ea84:	885b      	ldrh	r3, [r3, #2]
    ea86:	b29b      	uxth	r3, r3
    ea88:	b2da      	uxtb	r2, r3
    ea8a:	4b17      	ldr	r3, [pc, #92]	; (eae8 <usbdc_ctrl_status_end+0x84>)
    ea8c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ea8e:	687b      	ldr	r3, [r7, #4]
    ea90:	885b      	ldrh	r3, [r3, #2]
    ea92:	b29b      	uxth	r3, r3
    ea94:	2b00      	cmp	r3, #0
    ea96:	d001      	beq.n	ea9c <usbdc_ctrl_status_end+0x38>
    ea98:	2204      	movs	r2, #4
    ea9a:	e000      	b.n	ea9e <usbdc_ctrl_status_end+0x3a>
    ea9c:	2203      	movs	r2, #3
    ea9e:	4b12      	ldr	r3, [pc, #72]	; (eae8 <usbdc_ctrl_status_end+0x84>)
    eaa0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    eaa2:	4b11      	ldr	r3, [pc, #68]	; (eae8 <usbdc_ctrl_status_end+0x84>)
    eaa4:	7e9b      	ldrb	r3, [r3, #26]
    eaa6:	4619      	mov	r1, r3
    eaa8:	2001      	movs	r0, #1
    eaaa:	4b10      	ldr	r3, [pc, #64]	; (eaec <usbdc_ctrl_status_end+0x88>)
    eaac:	4798      	blx	r3
		break;
    eaae:	e018      	b.n	eae2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    eab0:	687b      	ldr	r3, [r7, #4]
    eab2:	885b      	ldrh	r3, [r3, #2]
    eab4:	b29b      	uxth	r3, r3
    eab6:	b2db      	uxtb	r3, r3
    eab8:	4618      	mov	r0, r3
    eaba:	4b0d      	ldr	r3, [pc, #52]	; (eaf0 <usbdc_ctrl_status_end+0x8c>)
    eabc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    eabe:	687b      	ldr	r3, [r7, #4]
    eac0:	885b      	ldrh	r3, [r3, #2]
    eac2:	b29b      	uxth	r3, r3
    eac4:	2b00      	cmp	r3, #0
    eac6:	d001      	beq.n	eacc <usbdc_ctrl_status_end+0x68>
    eac8:	2203      	movs	r2, #3
    eaca:	e000      	b.n	eace <usbdc_ctrl_status_end+0x6a>
    eacc:	2202      	movs	r2, #2
    eace:	4b06      	ldr	r3, [pc, #24]	; (eae8 <usbdc_ctrl_status_end+0x84>)
    ead0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ead2:	4b05      	ldr	r3, [pc, #20]	; (eae8 <usbdc_ctrl_status_end+0x84>)
    ead4:	7e9b      	ldrb	r3, [r3, #26]
    ead6:	4619      	mov	r1, r3
    ead8:	2001      	movs	r0, #1
    eada:	4b04      	ldr	r3, [pc, #16]	; (eaec <usbdc_ctrl_status_end+0x88>)
    eadc:	4798      	blx	r3
		break;
    eade:	e000      	b.n	eae2 <usbdc_ctrl_status_end+0x7e>
		return;
    eae0:	bf00      	nop
	}
}
    eae2:	3708      	adds	r7, #8
    eae4:	46bd      	mov	sp, r7
    eae6:	bd80      	pop	{r7, pc}
    eae8:	200027d0 	.word	0x200027d0
    eaec:	0000e941 	.word	0x0000e941
    eaf0:	0000e6c1 	.word	0x0000e6c1

0000eaf4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    eaf4:	b580      	push	{r7, lr}
    eaf6:	b082      	sub	sp, #8
    eaf8:	af00      	add	r7, sp, #0
    eafa:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    eafc:	2201      	movs	r2, #1
    eafe:	6879      	ldr	r1, [r7, #4]
    eb00:	2000      	movs	r0, #0
    eb02:	4b03      	ldr	r3, [pc, #12]	; (eb10 <usbdc_ctrl_data_end+0x1c>)
    eb04:	4798      	blx	r3
	return false;
    eb06:	2300      	movs	r3, #0
}
    eb08:	4618      	mov	r0, r3
    eb0a:	3708      	adds	r7, #8
    eb0c:	46bd      	mov	sp, r7
    eb0e:	bd80      	pop	{r7, pc}
    eb10:	0000e981 	.word	0x0000e981

0000eb14 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    eb14:	b580      	push	{r7, lr}
    eb16:	b082      	sub	sp, #8
    eb18:	af00      	add	r7, sp, #0
    eb1a:	4603      	mov	r3, r0
    eb1c:	603a      	str	r2, [r7, #0]
    eb1e:	71fb      	strb	r3, [r7, #7]
    eb20:	460b      	mov	r3, r1
    eb22:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    eb24:	79bb      	ldrb	r3, [r7, #6]
    eb26:	2b00      	cmp	r3, #0
    eb28:	d002      	beq.n	eb30 <usbdc_cb_ctl_done+0x1c>
    eb2a:	2b01      	cmp	r3, #1
    eb2c:	d004      	beq.n	eb38 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    eb2e:	e008      	b.n	eb42 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    eb30:	6838      	ldr	r0, [r7, #0]
    eb32:	4b06      	ldr	r3, [pc, #24]	; (eb4c <usbdc_cb_ctl_done+0x38>)
    eb34:	4798      	blx	r3
		break;
    eb36:	e004      	b.n	eb42 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    eb38:	6838      	ldr	r0, [r7, #0]
    eb3a:	4b05      	ldr	r3, [pc, #20]	; (eb50 <usbdc_cb_ctl_done+0x3c>)
    eb3c:	4798      	blx	r3
    eb3e:	4603      	mov	r3, r0
    eb40:	e000      	b.n	eb44 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    eb42:	2300      	movs	r3, #0
}
    eb44:	4618      	mov	r0, r3
    eb46:	3708      	adds	r7, #8
    eb48:	46bd      	mov	sp, r7
    eb4a:	bd80      	pop	{r7, pc}
    eb4c:	0000ea65 	.word	0x0000ea65
    eb50:	0000eaf5 	.word	0x0000eaf5

0000eb54 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    eb54:	b580      	push	{r7, lr}
    eb56:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    eb58:	4b10      	ldr	r3, [pc, #64]	; (eb9c <usbdc_reset+0x48>)
    eb5a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    eb5c:	4b10      	ldr	r3, [pc, #64]	; (eba0 <usbdc_reset+0x4c>)
    eb5e:	2202      	movs	r2, #2
    eb60:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    eb62:	4b0f      	ldr	r3, [pc, #60]	; (eba0 <usbdc_reset+0x4c>)
    eb64:	2200      	movs	r2, #0
    eb66:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    eb68:	4b0d      	ldr	r3, [pc, #52]	; (eba0 <usbdc_reset+0x4c>)
    eb6a:	2200      	movs	r2, #0
    eb6c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    eb6e:	2000      	movs	r0, #0
    eb70:	4b0c      	ldr	r3, [pc, #48]	; (eba4 <usbdc_reset+0x50>)
    eb72:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    eb74:	4b0a      	ldr	r3, [pc, #40]	; (eba0 <usbdc_reset+0x4c>)
    eb76:	7f1b      	ldrb	r3, [r3, #28]
    eb78:	4618      	mov	r0, r3
    eb7a:	4b0b      	ldr	r3, [pc, #44]	; (eba8 <usbdc_reset+0x54>)
    eb7c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    eb7e:	4a0b      	ldr	r2, [pc, #44]	; (ebac <usbdc_reset+0x58>)
    eb80:	2100      	movs	r1, #0
    eb82:	2000      	movs	r0, #0
    eb84:	4b0a      	ldr	r3, [pc, #40]	; (ebb0 <usbdc_reset+0x5c>)
    eb86:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    eb88:	4a0a      	ldr	r2, [pc, #40]	; (ebb4 <usbdc_reset+0x60>)
    eb8a:	2102      	movs	r1, #2
    eb8c:	2000      	movs	r0, #0
    eb8e:	4b08      	ldr	r3, [pc, #32]	; (ebb0 <usbdc_reset+0x5c>)
    eb90:	4798      	blx	r3
	usb_d_ep_enable(0);
    eb92:	2000      	movs	r0, #0
    eb94:	4b08      	ldr	r3, [pc, #32]	; (ebb8 <usbdc_reset+0x64>)
    eb96:	4798      	blx	r3
}
    eb98:	bf00      	nop
    eb9a:	bd80      	pop	{r7, pc}
    eb9c:	0000e5a1 	.word	0x0000e5a1
    eba0:	200027d0 	.word	0x200027d0
    eba4:	00004955 	.word	0x00004955
    eba8:	00004891 	.word	0x00004891
    ebac:	0000e9f1 	.word	0x0000e9f1
    ebb0:	00004ca9 	.word	0x00004ca9
    ebb4:	0000eb15 	.word	0x0000eb15
    ebb8:	000049a5 	.word	0x000049a5

0000ebbc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ebbc:	b580      	push	{r7, lr}
    ebbe:	b082      	sub	sp, #8
    ebc0:	af00      	add	r7, sp, #0
    ebc2:	4603      	mov	r3, r0
    ebc4:	6039      	str	r1, [r7, #0]
    ebc6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    ebc8:	79fb      	ldrb	r3, [r7, #7]
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d002      	beq.n	ebd4 <usbd_event_cb+0x18>
    ebce:	2b01      	cmp	r3, #1
    ebd0:	d005      	beq.n	ebde <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    ebd2:	e007      	b.n	ebe4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    ebd4:	6839      	ldr	r1, [r7, #0]
    ebd6:	2000      	movs	r0, #0
    ebd8:	4b04      	ldr	r3, [pc, #16]	; (ebec <usbd_event_cb+0x30>)
    ebda:	4798      	blx	r3
		break;
    ebdc:	e002      	b.n	ebe4 <usbd_event_cb+0x28>
		usbdc_reset();
    ebde:	4b04      	ldr	r3, [pc, #16]	; (ebf0 <usbd_event_cb+0x34>)
    ebe0:	4798      	blx	r3
		break;
    ebe2:	bf00      	nop
	}
}
    ebe4:	bf00      	nop
    ebe6:	3708      	adds	r7, #8
    ebe8:	46bd      	mov	sp, r7
    ebea:	bd80      	pop	{r7, pc}
    ebec:	0000e941 	.word	0x0000e941
    ebf0:	0000eb55 	.word	0x0000eb55

0000ebf4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ebf4:	b580      	push	{r7, lr}
    ebf6:	b088      	sub	sp, #32
    ebf8:	af00      	add	r7, sp, #0
    ebfa:	60b9      	str	r1, [r7, #8]
    ebfc:	607a      	str	r2, [r7, #4]
    ebfe:	461a      	mov	r2, r3
    ec00:	4603      	mov	r3, r0
    ec02:	73fb      	strb	r3, [r7, #15]
    ec04:	4613      	mov	r3, r2
    ec06:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ec08:	68bb      	ldr	r3, [r7, #8]
    ec0a:	617b      	str	r3, [r7, #20]
    ec0c:	687b      	ldr	r3, [r7, #4]
    ec0e:	61bb      	str	r3, [r7, #24]
    ec10:	7bfb      	ldrb	r3, [r7, #15]
    ec12:	773b      	strb	r3, [r7, #28]
    ec14:	7bbb      	ldrb	r3, [r7, #14]
    ec16:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ec18:	f107 0314 	add.w	r3, r7, #20
    ec1c:	4618      	mov	r0, r3
    ec1e:	4b03      	ldr	r3, [pc, #12]	; (ec2c <usbdc_xfer+0x38>)
    ec20:	4798      	blx	r3
    ec22:	4603      	mov	r3, r0
}
    ec24:	4618      	mov	r0, r3
    ec26:	3720      	adds	r7, #32
    ec28:	46bd      	mov	sp, r7
    ec2a:	bd80      	pop	{r7, pc}
    ec2c:	00004a15 	.word	0x00004a15

0000ec30 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ec30:	b580      	push	{r7, lr}
    ec32:	b082      	sub	sp, #8
    ec34:	af00      	add	r7, sp, #0
    ec36:	4603      	mov	r3, r0
    ec38:	6039      	str	r1, [r7, #0]
    ec3a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    ec3c:	79fb      	ldrb	r3, [r7, #7]
    ec3e:	2b01      	cmp	r3, #1
    ec40:	d009      	beq.n	ec56 <usbdc_register_handler+0x26>
    ec42:	2b02      	cmp	r3, #2
    ec44:	d00c      	beq.n	ec60 <usbdc_register_handler+0x30>
    ec46:	2b00      	cmp	r3, #0
    ec48:	d000      	beq.n	ec4c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ec4a:	e00e      	b.n	ec6a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ec4c:	6839      	ldr	r1, [r7, #0]
    ec4e:	4809      	ldr	r0, [pc, #36]	; (ec74 <usbdc_register_handler+0x44>)
    ec50:	4b09      	ldr	r3, [pc, #36]	; (ec78 <usbdc_register_handler+0x48>)
    ec52:	4798      	blx	r3
		break;
    ec54:	e009      	b.n	ec6a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ec56:	6839      	ldr	r1, [r7, #0]
    ec58:	4808      	ldr	r0, [pc, #32]	; (ec7c <usbdc_register_handler+0x4c>)
    ec5a:	4b07      	ldr	r3, [pc, #28]	; (ec78 <usbdc_register_handler+0x48>)
    ec5c:	4798      	blx	r3
		break;
    ec5e:	e004      	b.n	ec6a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ec60:	6839      	ldr	r1, [r7, #0]
    ec62:	4807      	ldr	r0, [pc, #28]	; (ec80 <usbdc_register_handler+0x50>)
    ec64:	4b04      	ldr	r3, [pc, #16]	; (ec78 <usbdc_register_handler+0x48>)
    ec66:	4798      	blx	r3
		break;
    ec68:	bf00      	nop
	}
}
    ec6a:	bf00      	nop
    ec6c:	3708      	adds	r7, #8
    ec6e:	46bd      	mov	sp, r7
    ec70:	bd80      	pop	{r7, pc}
    ec72:	bf00      	nop
    ec74:	200027d4 	.word	0x200027d4
    ec78:	00004e01 	.word	0x00004e01
    ec7c:	200027d8 	.word	0x200027d8
    ec80:	200027dc 	.word	0x200027dc

0000ec84 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ec84:	b580      	push	{r7, lr}
    ec86:	b084      	sub	sp, #16
    ec88:	af00      	add	r7, sp, #0
    ec8a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ec8c:	687b      	ldr	r3, [r7, #4]
    ec8e:	2b00      	cmp	r3, #0
    ec90:	bf14      	ite	ne
    ec92:	2301      	movne	r3, #1
    ec94:	2300      	moveq	r3, #0
    ec96:	b2db      	uxtb	r3, r3
    ec98:	f240 3255 	movw	r2, #853	; 0x355
    ec9c:	4910      	ldr	r1, [pc, #64]	; (ece0 <usbdc_init+0x5c>)
    ec9e:	4618      	mov	r0, r3
    eca0:	4b10      	ldr	r3, [pc, #64]	; (ece4 <usbdc_init+0x60>)
    eca2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    eca4:	4b10      	ldr	r3, [pc, #64]	; (ece8 <usbdc_init+0x64>)
    eca6:	4798      	blx	r3
    eca8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    ecaa:	68fb      	ldr	r3, [r7, #12]
    ecac:	2b00      	cmp	r3, #0
    ecae:	da01      	bge.n	ecb4 <usbdc_init+0x30>
		return rc;
    ecb0:	68fb      	ldr	r3, [r7, #12]
    ecb2:	e010      	b.n	ecd6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ecb4:	2220      	movs	r2, #32
    ecb6:	2100      	movs	r1, #0
    ecb8:	480c      	ldr	r0, [pc, #48]	; (ecec <usbdc_init+0x68>)
    ecba:	4b0d      	ldr	r3, [pc, #52]	; (ecf0 <usbdc_init+0x6c>)
    ecbc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ecbe:	4a0b      	ldr	r2, [pc, #44]	; (ecec <usbdc_init+0x68>)
    ecc0:	687b      	ldr	r3, [r7, #4]
    ecc2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ecc4:	490b      	ldr	r1, [pc, #44]	; (ecf4 <usbdc_init+0x70>)
    ecc6:	2000      	movs	r0, #0
    ecc8:	4b0b      	ldr	r3, [pc, #44]	; (ecf8 <usbdc_init+0x74>)
    ecca:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    eccc:	490b      	ldr	r1, [pc, #44]	; (ecfc <usbdc_init+0x78>)
    ecce:	2001      	movs	r0, #1
    ecd0:	4b09      	ldr	r3, [pc, #36]	; (ecf8 <usbdc_init+0x74>)
    ecd2:	4798      	blx	r3

	return 0;
    ecd4:	2300      	movs	r3, #0
}
    ecd6:	4618      	mov	r0, r3
    ecd8:	3710      	adds	r7, #16
    ecda:	46bd      	mov	sp, r7
    ecdc:	bd80      	pop	{r7, pc}
    ecde:	bf00      	nop
    ece0:	0001ba48 	.word	0x0001ba48
    ece4:	00004d25 	.word	0x00004d25
    ece8:	0000477d 	.word	0x0000477d
    ecec:	200027d0 	.word	0x200027d0
    ecf0:	0001b215 	.word	0x0001b215
    ecf4:	0000e9e1 	.word	0x0000e9e1
    ecf8:	00004829 	.word	0x00004829
    ecfc:	0000ebbd 	.word	0x0000ebbd

0000ed00 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ed00:	b580      	push	{r7, lr}
    ed02:	b082      	sub	sp, #8
    ed04:	af00      	add	r7, sp, #0
    ed06:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    ed08:	6879      	ldr	r1, [r7, #4]
    ed0a:	4803      	ldr	r0, [pc, #12]	; (ed18 <usbdc_register_function+0x18>)
    ed0c:	4b03      	ldr	r3, [pc, #12]	; (ed1c <usbdc_register_function+0x1c>)
    ed0e:	4798      	blx	r3
}
    ed10:	bf00      	nop
    ed12:	3708      	adds	r7, #8
    ed14:	46bd      	mov	sp, r7
    ed16:	bd80      	pop	{r7, pc}
    ed18:	200027e0 	.word	0x200027e0
    ed1c:	00004e01 	.word	0x00004e01

0000ed20 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ed20:	b580      	push	{r7, lr}
    ed22:	b082      	sub	sp, #8
    ed24:	af00      	add	r7, sp, #0
    ed26:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    ed28:	4b0f      	ldr	r3, [pc, #60]	; (ed68 <usbdc_start+0x48>)
    ed2a:	7e9b      	ldrb	r3, [r3, #26]
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	d002      	beq.n	ed36 <usbdc_start+0x16>
		return ERR_BUSY;
    ed30:	f06f 0303 	mvn.w	r3, #3
    ed34:	e013      	b.n	ed5e <usbdc_start+0x3e>
	}

	if (desces) {
    ed36:	687b      	ldr	r3, [r7, #4]
    ed38:	2b00      	cmp	r3, #0
    ed3a:	d00e      	beq.n	ed5a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ed3c:	4a0a      	ldr	r2, [pc, #40]	; (ed68 <usbdc_start+0x48>)
    ed3e:	687b      	ldr	r3, [r7, #4]
    ed40:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ed42:	687b      	ldr	r3, [r7, #4]
    ed44:	681b      	ldr	r3, [r3, #0]
    ed46:	79da      	ldrb	r2, [r3, #7]
    ed48:	4b07      	ldr	r3, [pc, #28]	; (ed68 <usbdc_start+0x48>)
    ed4a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ed4c:	4b06      	ldr	r3, [pc, #24]	; (ed68 <usbdc_start+0x48>)
    ed4e:	2201      	movs	r2, #1
    ed50:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ed52:	4b06      	ldr	r3, [pc, #24]	; (ed6c <usbdc_start+0x4c>)
    ed54:	4798      	blx	r3
	return ERR_NONE;
    ed56:	2300      	movs	r3, #0
    ed58:	e001      	b.n	ed5e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ed5a:	f06f 0308 	mvn.w	r3, #8
}
    ed5e:	4618      	mov	r0, r3
    ed60:	3708      	adds	r7, #8
    ed62:	46bd      	mov	sp, r7
    ed64:	bd80      	pop	{r7, pc}
    ed66:	bf00      	nop
    ed68:	200027d0 	.word	0x200027d0
    ed6c:	0000484d 	.word	0x0000484d

0000ed70 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ed70:	b580      	push	{r7, lr}
    ed72:	af00      	add	r7, sp, #0
	usb_d_attach();
    ed74:	4b01      	ldr	r3, [pc, #4]	; (ed7c <usbdc_attach+0xc>)
    ed76:	4798      	blx	r3
}
    ed78:	bf00      	nop
    ed7a:	bd80      	pop	{r7, pc}
    ed7c:	00004861 	.word	0x00004861

0000ed80 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ed80:	b480      	push	{r7}
    ed82:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ed84:	4b03      	ldr	r3, [pc, #12]	; (ed94 <usbdc_get_ctrl_buffer+0x14>)
    ed86:	695b      	ldr	r3, [r3, #20]
}
    ed88:	4618      	mov	r0, r3
    ed8a:	46bd      	mov	sp, r7
    ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed90:	4770      	bx	lr
    ed92:	bf00      	nop
    ed94:	200027d0 	.word	0x200027d0

0000ed98 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ed98:	b480      	push	{r7}
    ed9a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ed9c:	4b07      	ldr	r3, [pc, #28]	; (edbc <usbdc_get_state+0x24>)
    ed9e:	7e9b      	ldrb	r3, [r3, #26]
    eda0:	f003 0310 	and.w	r3, r3, #16
    eda4:	2b00      	cmp	r3, #0
    eda6:	d001      	beq.n	edac <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    eda8:	2310      	movs	r3, #16
    edaa:	e001      	b.n	edb0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    edac:	4b03      	ldr	r3, [pc, #12]	; (edbc <usbdc_get_state+0x24>)
    edae:	7e9b      	ldrb	r3, [r3, #26]
}
    edb0:	4618      	mov	r0, r3
    edb2:	46bd      	mov	sp, r7
    edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    edb8:	4770      	bx	lr
    edba:	bf00      	nop
    edbc:	200027d0 	.word	0x200027d0

0000edc0 <usb_get_u16>:
{
    edc0:	b480      	push	{r7}
    edc2:	b083      	sub	sp, #12
    edc4:	af00      	add	r7, sp, #0
    edc6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    edc8:	687b      	ldr	r3, [r7, #4]
    edca:	781b      	ldrb	r3, [r3, #0]
    edcc:	b29a      	uxth	r2, r3
    edce:	687b      	ldr	r3, [r7, #4]
    edd0:	3301      	adds	r3, #1
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	b29b      	uxth	r3, r3
    edd6:	021b      	lsls	r3, r3, #8
    edd8:	b29b      	uxth	r3, r3
    edda:	4413      	add	r3, r2
    eddc:	b29b      	uxth	r3, r3
}
    edde:	4618      	mov	r0, r3
    ede0:	370c      	adds	r7, #12
    ede2:	46bd      	mov	sp, r7
    ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ede8:	4770      	bx	lr

0000edea <usb_desc_len>:
{
    edea:	b480      	push	{r7}
    edec:	b083      	sub	sp, #12
    edee:	af00      	add	r7, sp, #0
    edf0:	6078      	str	r0, [r7, #4]
	return desc[0];
    edf2:	687b      	ldr	r3, [r7, #4]
    edf4:	781b      	ldrb	r3, [r3, #0]
}
    edf6:	4618      	mov	r0, r3
    edf8:	370c      	adds	r7, #12
    edfa:	46bd      	mov	sp, r7
    edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee00:	4770      	bx	lr

0000ee02 <usb_desc_type>:
{
    ee02:	b480      	push	{r7}
    ee04:	b083      	sub	sp, #12
    ee06:	af00      	add	r7, sp, #0
    ee08:	6078      	str	r0, [r7, #4]
	return desc[1];
    ee0a:	687b      	ldr	r3, [r7, #4]
    ee0c:	3301      	adds	r3, #1
    ee0e:	781b      	ldrb	r3, [r3, #0]
}
    ee10:	4618      	mov	r0, r3
    ee12:	370c      	adds	r7, #12
    ee14:	46bd      	mov	sp, r7
    ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee1a:	4770      	bx	lr

0000ee1c <usb_desc_next>:
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	b082      	sub	sp, #8
    ee20:	af00      	add	r7, sp, #0
    ee22:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ee24:	6878      	ldr	r0, [r7, #4]
    ee26:	4b05      	ldr	r3, [pc, #20]	; (ee3c <usb_desc_next+0x20>)
    ee28:	4798      	blx	r3
    ee2a:	4603      	mov	r3, r0
    ee2c:	461a      	mov	r2, r3
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	4413      	add	r3, r2
}
    ee32:	4618      	mov	r0, r3
    ee34:	3708      	adds	r7, #8
    ee36:	46bd      	mov	sp, r7
    ee38:	bd80      	pop	{r7, pc}
    ee3a:	bf00      	nop
    ee3c:	0000edeb 	.word	0x0000edeb

0000ee40 <usb_cfg_desc_total_len>:
{
    ee40:	b580      	push	{r7, lr}
    ee42:	b082      	sub	sp, #8
    ee44:	af00      	add	r7, sp, #0
    ee46:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ee48:	687b      	ldr	r3, [r7, #4]
    ee4a:	3302      	adds	r3, #2
    ee4c:	4618      	mov	r0, r3
    ee4e:	4b03      	ldr	r3, [pc, #12]	; (ee5c <usb_cfg_desc_total_len+0x1c>)
    ee50:	4798      	blx	r3
    ee52:	4603      	mov	r3, r0
}
    ee54:	4618      	mov	r0, r3
    ee56:	3708      	adds	r7, #8
    ee58:	46bd      	mov	sp, r7
    ee5a:	bd80      	pop	{r7, pc}
    ee5c:	0000edc1 	.word	0x0000edc1

0000ee60 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    ee60:	b580      	push	{r7, lr}
    ee62:	b082      	sub	sp, #8
    ee64:	af00      	add	r7, sp, #0
    ee66:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ee68:	6878      	ldr	r0, [r7, #4]
    ee6a:	4b05      	ldr	r3, [pc, #20]	; (ee80 <usb_cfg_desc_next+0x20>)
    ee6c:	4798      	blx	r3
    ee6e:	4603      	mov	r3, r0
    ee70:	461a      	mov	r2, r3
    ee72:	687b      	ldr	r3, [r7, #4]
    ee74:	4413      	add	r3, r2
}
    ee76:	4618      	mov	r0, r3
    ee78:	3708      	adds	r7, #8
    ee7a:	46bd      	mov	sp, r7
    ee7c:	bd80      	pop	{r7, pc}
    ee7e:	bf00      	nop
    ee80:	0000ee41 	.word	0x0000ee41

0000ee84 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    ee84:	b580      	push	{r7, lr}
    ee86:	b084      	sub	sp, #16
    ee88:	af00      	add	r7, sp, #0
    ee8a:	60f8      	str	r0, [r7, #12]
    ee8c:	60b9      	str	r1, [r7, #8]
    ee8e:	4613      	mov	r3, r2
    ee90:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ee92:	e015      	b.n	eec0 <usb_find_desc+0x3c>
		_desc_len_check();
    ee94:	68f8      	ldr	r0, [r7, #12]
    ee96:	4b0f      	ldr	r3, [pc, #60]	; (eed4 <usb_find_desc+0x50>)
    ee98:	4798      	blx	r3
    ee9a:	4603      	mov	r3, r0
    ee9c:	2b01      	cmp	r3, #1
    ee9e:	d801      	bhi.n	eea4 <usb_find_desc+0x20>
    eea0:	2300      	movs	r3, #0
    eea2:	e012      	b.n	eeca <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    eea4:	68f8      	ldr	r0, [r7, #12]
    eea6:	4b0c      	ldr	r3, [pc, #48]	; (eed8 <usb_find_desc+0x54>)
    eea8:	4798      	blx	r3
    eeaa:	4603      	mov	r3, r0
    eeac:	461a      	mov	r2, r3
    eeae:	79fb      	ldrb	r3, [r7, #7]
    eeb0:	4293      	cmp	r3, r2
    eeb2:	d101      	bne.n	eeb8 <usb_find_desc+0x34>
			return desc;
    eeb4:	68fb      	ldr	r3, [r7, #12]
    eeb6:	e008      	b.n	eeca <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    eeb8:	68f8      	ldr	r0, [r7, #12]
    eeba:	4b08      	ldr	r3, [pc, #32]	; (eedc <usb_find_desc+0x58>)
    eebc:	4798      	blx	r3
    eebe:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    eec0:	68fa      	ldr	r2, [r7, #12]
    eec2:	68bb      	ldr	r3, [r7, #8]
    eec4:	429a      	cmp	r2, r3
    eec6:	d3e5      	bcc.n	ee94 <usb_find_desc+0x10>
	}
	return NULL;
    eec8:	2300      	movs	r3, #0
}
    eeca:	4618      	mov	r0, r3
    eecc:	3710      	adds	r7, #16
    eece:	46bd      	mov	sp, r7
    eed0:	bd80      	pop	{r7, pc}
    eed2:	bf00      	nop
    eed4:	0000edeb 	.word	0x0000edeb
    eed8:	0000ee03 	.word	0x0000ee03
    eedc:	0000ee1d 	.word	0x0000ee1d

0000eee0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    eee0:	b580      	push	{r7, lr}
    eee2:	b082      	sub	sp, #8
    eee4:	af00      	add	r7, sp, #0
    eee6:	6078      	str	r0, [r7, #4]
    eee8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    eeea:	e019      	b.n	ef20 <usb_find_ep_desc+0x40>
		_desc_len_check();
    eeec:	6878      	ldr	r0, [r7, #4]
    eeee:	4b12      	ldr	r3, [pc, #72]	; (ef38 <usb_find_ep_desc+0x58>)
    eef0:	4798      	blx	r3
    eef2:	4603      	mov	r3, r0
    eef4:	2b01      	cmp	r3, #1
    eef6:	d801      	bhi.n	eefc <usb_find_ep_desc+0x1c>
    eef8:	2300      	movs	r3, #0
    eefa:	e018      	b.n	ef2e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    eefc:	6878      	ldr	r0, [r7, #4]
    eefe:	4b0f      	ldr	r3, [pc, #60]	; (ef3c <usb_find_ep_desc+0x5c>)
    ef00:	4798      	blx	r3
    ef02:	4603      	mov	r3, r0
    ef04:	2b04      	cmp	r3, #4
    ef06:	d010      	beq.n	ef2a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ef08:	6878      	ldr	r0, [r7, #4]
    ef0a:	4b0c      	ldr	r3, [pc, #48]	; (ef3c <usb_find_ep_desc+0x5c>)
    ef0c:	4798      	blx	r3
    ef0e:	4603      	mov	r3, r0
    ef10:	2b05      	cmp	r3, #5
    ef12:	d101      	bne.n	ef18 <usb_find_ep_desc+0x38>
			return desc;
    ef14:	687b      	ldr	r3, [r7, #4]
    ef16:	e00a      	b.n	ef2e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ef18:	6878      	ldr	r0, [r7, #4]
    ef1a:	4b09      	ldr	r3, [pc, #36]	; (ef40 <usb_find_ep_desc+0x60>)
    ef1c:	4798      	blx	r3
    ef1e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ef20:	687a      	ldr	r2, [r7, #4]
    ef22:	683b      	ldr	r3, [r7, #0]
    ef24:	429a      	cmp	r2, r3
    ef26:	d3e1      	bcc.n	eeec <usb_find_ep_desc+0xc>
    ef28:	e000      	b.n	ef2c <usb_find_ep_desc+0x4c>
			break;
    ef2a:	bf00      	nop
	}
	return NULL;
    ef2c:	2300      	movs	r3, #0
}
    ef2e:	4618      	mov	r0, r3
    ef30:	3708      	adds	r7, #8
    ef32:	46bd      	mov	sp, r7
    ef34:	bd80      	pop	{r7, pc}
    ef36:	bf00      	nop
    ef38:	0000edeb 	.word	0x0000edeb
    ef3c:	0000ee03 	.word	0x0000ee03
    ef40:	0000ee1d 	.word	0x0000ee1d

0000ef44 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ef44:	b580      	push	{r7, lr}
    ef46:	b084      	sub	sp, #16
    ef48:	af00      	add	r7, sp, #0
    ef4a:	60f8      	str	r0, [r7, #12]
    ef4c:	60b9      	str	r1, [r7, #8]
    ef4e:	4613      	mov	r3, r2
    ef50:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ef52:	2202      	movs	r2, #2
    ef54:	68b9      	ldr	r1, [r7, #8]
    ef56:	68f8      	ldr	r0, [r7, #12]
    ef58:	4b15      	ldr	r3, [pc, #84]	; (efb0 <usb_find_cfg_desc+0x6c>)
    ef5a:	4798      	blx	r3
    ef5c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ef5e:	68fb      	ldr	r3, [r7, #12]
    ef60:	2b00      	cmp	r3, #0
    ef62:	d11a      	bne.n	ef9a <usb_find_cfg_desc+0x56>
		return NULL;
    ef64:	2300      	movs	r3, #0
    ef66:	e01f      	b.n	efa8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    ef68:	68f8      	ldr	r0, [r7, #12]
    ef6a:	4b12      	ldr	r3, [pc, #72]	; (efb4 <usb_find_cfg_desc+0x70>)
    ef6c:	4798      	blx	r3
    ef6e:	4603      	mov	r3, r0
    ef70:	2b01      	cmp	r3, #1
    ef72:	d801      	bhi.n	ef78 <usb_find_cfg_desc+0x34>
    ef74:	2300      	movs	r3, #0
    ef76:	e017      	b.n	efa8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    ef78:	68fb      	ldr	r3, [r7, #12]
    ef7a:	3301      	adds	r3, #1
    ef7c:	781b      	ldrb	r3, [r3, #0]
    ef7e:	2b02      	cmp	r3, #2
    ef80:	d110      	bne.n	efa4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ef82:	68fb      	ldr	r3, [r7, #12]
    ef84:	3305      	adds	r3, #5
    ef86:	781b      	ldrb	r3, [r3, #0]
    ef88:	79fa      	ldrb	r2, [r7, #7]
    ef8a:	429a      	cmp	r2, r3
    ef8c:	d101      	bne.n	ef92 <usb_find_cfg_desc+0x4e>
			return desc;
    ef8e:	68fb      	ldr	r3, [r7, #12]
    ef90:	e00a      	b.n	efa8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ef92:	68f8      	ldr	r0, [r7, #12]
    ef94:	4b08      	ldr	r3, [pc, #32]	; (efb8 <usb_find_cfg_desc+0x74>)
    ef96:	4798      	blx	r3
    ef98:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ef9a:	68fa      	ldr	r2, [r7, #12]
    ef9c:	68bb      	ldr	r3, [r7, #8]
    ef9e:	429a      	cmp	r2, r3
    efa0:	d3e2      	bcc.n	ef68 <usb_find_cfg_desc+0x24>
    efa2:	e000      	b.n	efa6 <usb_find_cfg_desc+0x62>
			break;
    efa4:	bf00      	nop
	}
	return NULL;
    efa6:	2300      	movs	r3, #0
}
    efa8:	4618      	mov	r0, r3
    efaa:	3710      	adds	r7, #16
    efac:	46bd      	mov	sp, r7
    efae:	bd80      	pop	{r7, pc}
    efb0:	0000ee85 	.word	0x0000ee85
    efb4:	0000edeb 	.word	0x0000edeb
    efb8:	0000ee61 	.word	0x0000ee61

0000efbc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    efbc:	b580      	push	{r7, lr}
    efbe:	b086      	sub	sp, #24
    efc0:	af00      	add	r7, sp, #0
    efc2:	60f8      	str	r0, [r7, #12]
    efc4:	60b9      	str	r1, [r7, #8]
    efc6:	4613      	mov	r3, r2
    efc8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    efca:	2300      	movs	r3, #0
    efcc:	75fb      	strb	r3, [r7, #23]
    efce:	e020      	b.n	f012 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    efd0:	2203      	movs	r2, #3
    efd2:	68b9      	ldr	r1, [r7, #8]
    efd4:	68f8      	ldr	r0, [r7, #12]
    efd6:	4b13      	ldr	r3, [pc, #76]	; (f024 <usb_find_str_desc+0x68>)
    efd8:	4798      	blx	r3
    efda:	60f8      	str	r0, [r7, #12]
		if (desc) {
    efdc:	68fb      	ldr	r3, [r7, #12]
    efde:	2b00      	cmp	r3, #0
    efe0:	d015      	beq.n	f00e <usb_find_str_desc+0x52>
			_desc_len_check();
    efe2:	68f8      	ldr	r0, [r7, #12]
    efe4:	4b10      	ldr	r3, [pc, #64]	; (f028 <usb_find_str_desc+0x6c>)
    efe6:	4798      	blx	r3
    efe8:	4603      	mov	r3, r0
    efea:	2b01      	cmp	r3, #1
    efec:	d801      	bhi.n	eff2 <usb_find_str_desc+0x36>
    efee:	2300      	movs	r3, #0
    eff0:	e014      	b.n	f01c <usb_find_str_desc+0x60>
			if (i == str_index) {
    eff2:	7dfa      	ldrb	r2, [r7, #23]
    eff4:	79fb      	ldrb	r3, [r7, #7]
    eff6:	429a      	cmp	r2, r3
    eff8:	d101      	bne.n	effe <usb_find_str_desc+0x42>
				return desc;
    effa:	68fb      	ldr	r3, [r7, #12]
    effc:	e00e      	b.n	f01c <usb_find_str_desc+0x60>
			}
			i++;
    effe:	7dfb      	ldrb	r3, [r7, #23]
    f000:	3301      	adds	r3, #1
    f002:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    f004:	68f8      	ldr	r0, [r7, #12]
    f006:	4b09      	ldr	r3, [pc, #36]	; (f02c <usb_find_str_desc+0x70>)
    f008:	4798      	blx	r3
    f00a:	60f8      	str	r0, [r7, #12]
    f00c:	e001      	b.n	f012 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    f00e:	2300      	movs	r3, #0
    f010:	e004      	b.n	f01c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    f012:	68fa      	ldr	r2, [r7, #12]
    f014:	68bb      	ldr	r3, [r7, #8]
    f016:	429a      	cmp	r2, r3
    f018:	d3da      	bcc.n	efd0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    f01a:	2300      	movs	r3, #0
}
    f01c:	4618      	mov	r0, r3
    f01e:	3718      	adds	r7, #24
    f020:	46bd      	mov	sp, r7
    f022:	bd80      	pop	{r7, pc}
    f024:	0000ee85 	.word	0x0000ee85
    f028:	0000edeb 	.word	0x0000edeb
    f02c:	0000ee1d 	.word	0x0000ee1d

0000f030 <_ZN28Compressor_CANOpen_Interface15GetCurrentSpeedEv>:
	bool	InitCANOpen(void);
	int	Comporesor_Process(void);
	void	Periodic_Task(void);
	bool	Set_CAN_Enable(bool *st);
	void	Set_Motor_Speed(uint16_t sp);
	uint16_t GetCurrentSpeed(void){return current_speed;};
    f030:	b480      	push	{r7}
    f032:	b083      	sub	sp, #12
    f034:	af00      	add	r7, sp, #0
    f036:	6078      	str	r0, [r7, #4]
    f038:	687b      	ldr	r3, [r7, #4]
    f03a:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
    f03e:	4618      	mov	r0, r3
    f040:	370c      	adds	r7, #12
    f042:	46bd      	mov	sp, r7
    f044:	bc80      	pop	{r7}
    f046:	4770      	bx	lr

0000f048 <_ZN20Compresor_ControllerC1Ev>:
#include "Compresor_Controller.h"
#include "CO_Driver_Class.h"
static uint8_t local_data_array[COMPRESSOR_CONTROLLER_DATA_SIZE];

// default constructor
Compresor_Controller::Compresor_Controller()
    f048:	b580      	push	{r7, lr}
    f04a:	b082      	sub	sp, #8
    f04c:	af00      	add	r7, sp, #0
    f04e:	6078      	str	r0, [r7, #4]
    f050:	687b      	ldr	r3, [r7, #4]
    f052:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f056:	4618      	mov	r0, r3
    f058:	4b06      	ldr	r3, [pc, #24]	; (f074 <_ZN20Compresor_ControllerC1Ev+0x2c>)
    f05a:	4798      	blx	r3
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	4618      	mov	r0, r3
    f060:	4b05      	ldr	r3, [pc, #20]	; (f078 <_ZN20Compresor_ControllerC1Ev+0x30>)
    f062:	4798      	blx	r3
    f064:	4a05      	ldr	r2, [pc, #20]	; (f07c <_ZN20Compresor_ControllerC1Ev+0x34>)
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	601a      	str	r2, [r3, #0]
{
} //Compresor_Controller
    f06a:	687b      	ldr	r3, [r7, #4]
    f06c:	4618      	mov	r0, r3
    f06e:	3708      	adds	r7, #8
    f070:	46bd      	mov	sp, r7
    f072:	bd80      	pop	{r7, pc}
    f074:	0000f3bd 	.word	0x0000f3bd
    f078:	0000f695 	.word	0x0000f695
    f07c:	0001ba68 	.word	0x0001ba68

0000f080 <_ZN20Compresor_ControllerD1Ev>:

// default destructor
Compresor_Controller::~Compresor_Controller()
    f080:	b580      	push	{r7, lr}
    f082:	b082      	sub	sp, #8
    f084:	af00      	add	r7, sp, #0
    f086:	6078      	str	r0, [r7, #4]
    f088:	4a08      	ldr	r2, [pc, #32]	; (f0ac <_ZN20Compresor_ControllerD1Ev+0x2c>)
    f08a:	687b      	ldr	r3, [r7, #4]
    f08c:	601a      	str	r2, [r3, #0]
    f08e:	687b      	ldr	r3, [r7, #4]
    f090:	4618      	mov	r0, r3
    f092:	4b07      	ldr	r3, [pc, #28]	; (f0b0 <_ZN20Compresor_ControllerD1Ev+0x30>)
    f094:	4798      	blx	r3
    f096:	687b      	ldr	r3, [r7, #4]
    f098:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f09c:	4618      	mov	r0, r3
    f09e:	4b05      	ldr	r3, [pc, #20]	; (f0b4 <_ZN20Compresor_ControllerD1Ev+0x34>)
    f0a0:	4798      	blx	r3
{
} //~Compresor_Controller
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	4618      	mov	r0, r3
    f0a6:	3708      	adds	r7, #8
    f0a8:	46bd      	mov	sp, r7
    f0aa:	bd80      	pop	{r7, pc}
    f0ac:	0001ba68 	.word	0x0001ba68
    f0b0:	0000f6d1 	.word	0x0000f6d1
    f0b4:	0000f3e1 	.word	0x0000f3e1

0000f0b8 <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
    f0b8:	b590      	push	{r4, r7, lr}
    f0ba:	b083      	sub	sp, #12
    f0bc:	af00      	add	r7, sp, #0
    f0be:	6078      	str	r0, [r7, #4]
	data_array=local_data_array;
    f0c0:	687b      	ldr	r3, [r7, #4]
    f0c2:	4a1e      	ldr	r2, [pc, #120]	; (f13c <_ZN20Compresor_Controller4InitEv+0x84>)
    f0c4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	isOK=InitExpander();
    f0c8:	687b      	ldr	r3, [r7, #4]
    f0ca:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f0ce:	4618      	mov	r0, r3
    f0d0:	4b1b      	ldr	r3, [pc, #108]	; (f140 <_ZN20Compresor_Controller4InitEv+0x88>)
    f0d2:	4798      	blx	r3
    f0d4:	4603      	mov	r3, r0
    f0d6:	461a      	mov	r2, r3
    f0d8:	687b      	ldr	r3, [r7, #4]
    f0da:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	if (isOK)
    f0de:	687b      	ldr	r3, [r7, #4]
    f0e0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
    f0e4:	b2db      	uxtb	r3, r3
    f0e6:	2b00      	cmp	r3, #0
    f0e8:	d01f      	beq.n	f12a <_ZN20Compresor_Controller4InitEv+0x72>
	{
		if (InitCANOpen())
    f0ea:	687b      	ldr	r3, [r7, #4]
    f0ec:	4618      	mov	r0, r3
    f0ee:	4b15      	ldr	r3, [pc, #84]	; (f144 <_ZN20Compresor_Controller4InitEv+0x8c>)
    f0f0:	4798      	blx	r3
    f0f2:	4603      	mov	r3, r0
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d018      	beq.n	f12a <_ZN20Compresor_Controller4InitEv+0x72>
		{
			canopen_driver->canopen_ready=true;
    f0f8:	4b13      	ldr	r3, [pc, #76]	; (f148 <_ZN20Compresor_Controller4InitEv+0x90>)
    f0fa:	681b      	ldr	r3, [r3, #0]
    f0fc:	2201      	movs	r2, #1
    f0fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			Set_CAN_Enable(IsEnabledPointer());
    f102:	687c      	ldr	r4, [r7, #4]
    f104:	687b      	ldr	r3, [r7, #4]
    f106:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f10a:	4618      	mov	r0, r3
    f10c:	4b0f      	ldr	r3, [pc, #60]	; (f14c <_ZN20Compresor_Controller4InitEv+0x94>)
    f10e:	4798      	blx	r3
    f110:	4603      	mov	r3, r0
    f112:	4619      	mov	r1, r3
    f114:	4620      	mov	r0, r4
    f116:	4b0e      	ldr	r3, [pc, #56]	; (f150 <_ZN20Compresor_Controller4InitEv+0x98>)
    f118:	4798      	blx	r3
			Set_Slave_ID(CCU_CANOPEN_NODE);
    f11a:	2103      	movs	r1, #3
    f11c:	6878      	ldr	r0, [r7, #4]
    f11e:	4b0d      	ldr	r3, [pc, #52]	; (f154 <_ZN20Compresor_Controller4InitEv+0x9c>)
    f120:	4798      	blx	r3
			isOK=true;
    f122:	687b      	ldr	r3, [r7, #4]
    f124:	2201      	movs	r2, #1
    f126:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		}
	} 
	else
	{
	}
	return isOK;
    f12a:	687b      	ldr	r3, [r7, #4]
    f12c:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
    f130:	b2db      	uxtb	r3, r3
}
    f132:	4618      	mov	r0, r3
    f134:	370c      	adds	r7, #12
    f136:	46bd      	mov	sp, r7
    f138:	bd90      	pop	{r4, r7, pc}
    f13a:	bf00      	nop
    f13c:	20002908 	.word	0x20002908
    f140:	0000f3f5 	.word	0x0000f3f5
    f144:	0000f6f9 	.word	0x0000f6f9
    f148:	2000da88 	.word	0x2000da88
    f14c:	0000f555 	.word	0x0000f555
    f150:	0000f90d 	.word	0x0000f90d
    f154:	0000f159 	.word	0x0000f159

0000f158 <_ZN20Compresor_Controller12Set_Slave_IDEh>:
uint8_t Compresor_Controller::Set_Slave_ID (uint8_t sn){
    f158:	b580      	push	{r7, lr}
    f15a:	b082      	sub	sp, #8
    f15c:	af00      	add	r7, sp, #0
    f15e:	6078      	str	r0, [r7, #4]
    f160:	460b      	mov	r3, r1
    f162:	70fb      	strb	r3, [r7, #3]
	return	canopen_driver->Set_Slave_Node(sn);
    f164:	4b05      	ldr	r3, [pc, #20]	; (f17c <_ZN20Compresor_Controller12Set_Slave_IDEh+0x24>)
    f166:	681b      	ldr	r3, [r3, #0]
    f168:	78fa      	ldrb	r2, [r7, #3]
    f16a:	4611      	mov	r1, r2
    f16c:	4618      	mov	r0, r3
    f16e:	4b04      	ldr	r3, [pc, #16]	; (f180 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x28>)
    f170:	4798      	blx	r3
    f172:	4603      	mov	r3, r0
}
    f174:	4618      	mov	r0, r3
    f176:	3708      	adds	r7, #8
    f178:	46bd      	mov	sp, r7
    f17a:	bd80      	pop	{r7, pc}
    f17c:	2000da88 	.word	0x2000da88
    f180:	000160db 	.word	0x000160db

0000f184 <_ZN20Compresor_Controller19GetCompressorStatusEPh>:
void Compresor_Controller::GetCompressorStatus(uint8_t *arr){
    f184:	b590      	push	{r4, r7, lr}
    f186:	b083      	sub	sp, #12
    f188:	af00      	add	r7, sp, #0
    f18a:	6078      	str	r0, [r7, #4]
    f18c:	6039      	str	r1, [r7, #0]
	data_array[0]=ReadStatus();
    f18e:	687b      	ldr	r3, [r7, #4]
    f190:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
    f194:	687b      	ldr	r3, [r7, #4]
    f196:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f19a:	4618      	mov	r0, r3
    f19c:	4b2d      	ldr	r3, [pc, #180]	; (f254 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xd0>)
    f19e:	4798      	blx	r3
    f1a0:	4603      	mov	r3, r0
    f1a2:	7023      	strb	r3, [r4, #0]
	current_speed=GetCurrentSpeed();
    f1a4:	687b      	ldr	r3, [r7, #4]
    f1a6:	4618      	mov	r0, r3
    f1a8:	4b2b      	ldr	r3, [pc, #172]	; (f258 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xd4>)
    f1aa:	4798      	blx	r3
    f1ac:	4603      	mov	r3, r0
    f1ae:	461a      	mov	r2, r3
    f1b0:	687b      	ldr	r3, [r7, #4]
    f1b2:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	memcpy(&data_array[1],&current_speed,2);
    f1b6:	687b      	ldr	r3, [r7, #4]
    f1b8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1bc:	3301      	adds	r3, #1
    f1be:	687a      	ldr	r2, [r7, #4]
    f1c0:	f502 72e6 	add.w	r2, r2, #460	; 0x1cc
    f1c4:	8812      	ldrh	r2, [r2, #0]
    f1c6:	b292      	uxth	r2, r2
    f1c8:	801a      	strh	r2, [r3, #0]
	data_array[3]=ReadPressureLimits();
    f1ca:	687b      	ldr	r3, [r7, #4]
    f1cc:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1d0:	1cdc      	adds	r4, r3, #3
    f1d2:	687b      	ldr	r3, [r7, #4]
    f1d4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f1d8:	4618      	mov	r0, r3
    f1da:	4b20      	ldr	r3, [pc, #128]	; (f25c <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xd8>)
    f1dc:	4798      	blx	r3
    f1de:	4603      	mov	r3, r0
    f1e0:	7023      	strb	r3, [r4, #0]
	memcpy(&data_array[4],(void*)canopen_driver->error_flags_array,2);
    f1e2:	687b      	ldr	r3, [r7, #4]
    f1e4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1e8:	3304      	adds	r3, #4
    f1ea:	4a1d      	ldr	r2, [pc, #116]	; (f260 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f1ec:	6812      	ldr	r2, [r2, #0]
    f1ee:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    f1f2:	8812      	ldrh	r2, [r2, #0]
    f1f4:	b292      	uxth	r2, r2
    f1f6:	801a      	strh	r2, [r3, #0]
	memcpy(&data_array[6],(void*)&canopen_driver->current_IQFilt,2);
    f1f8:	687b      	ldr	r3, [r7, #4]
    f1fa:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1fe:	3306      	adds	r3, #6
    f200:	4a17      	ldr	r2, [pc, #92]	; (f260 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f202:	6812      	ldr	r2, [r2, #0]
    f204:	3298      	adds	r2, #152	; 0x98
    f206:	8812      	ldrh	r2, [r2, #0]
    f208:	b292      	uxth	r2, r2
    f20a:	801a      	strh	r2, [r3, #0]
	memcpy(&data_array[8],(void*)&canopen_driver->current_IDFilt,2);
    f20c:	687b      	ldr	r3, [r7, #4]
    f20e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f212:	3308      	adds	r3, #8
    f214:	4a12      	ldr	r2, [pc, #72]	; (f260 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f216:	6812      	ldr	r2, [r2, #0]
    f218:	329a      	adds	r2, #154	; 0x9a
    f21a:	8812      	ldrh	r2, [r2, #0]
    f21c:	b292      	uxth	r2, r2
    f21e:	801a      	strh	r2, [r3, #0]
	memcpy(&data_array[10],(void*)canopen_driver->compressor_temperatures,6);
    f220:	687b      	ldr	r3, [r7, #4]
    f222:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f226:	f103 000a 	add.w	r0, r3, #10
    f22a:	4b0d      	ldr	r3, [pc, #52]	; (f260 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f22c:	681b      	ldr	r3, [r3, #0]
    f22e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    f232:	2206      	movs	r2, #6
    f234:	4619      	mov	r1, r3
    f236:	4b0b      	ldr	r3, [pc, #44]	; (f264 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xe0>)
    f238:	4798      	blx	r3
	memcpy(arr,data_array,16);
    f23a:	687b      	ldr	r3, [r7, #4]
    f23c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f240:	2210      	movs	r2, #16
    f242:	4619      	mov	r1, r3
    f244:	6838      	ldr	r0, [r7, #0]
    f246:	4b07      	ldr	r3, [pc, #28]	; (f264 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xe0>)
    f248:	4798      	blx	r3
}
    f24a:	bf00      	nop
    f24c:	370c      	adds	r7, #12
    f24e:	46bd      	mov	sp, r7
    f250:	bd90      	pop	{r4, r7, pc}
    f252:	bf00      	nop
    f254:	0000f49d 	.word	0x0000f49d
    f258:	0000f031 	.word	0x0000f031
    f25c:	0000f4c1 	.word	0x0000f4c1
    f260:	2000da88 	.word	0x2000da88
    f264:	0001b0e1 	.word	0x0001b0e1

0000f268 <_Z41__static_initialization_and_destruction_0ii>:
    f268:	b580      	push	{r7, lr}
    f26a:	b082      	sub	sp, #8
    f26c:	af00      	add	r7, sp, #0
    f26e:	6078      	str	r0, [r7, #4]
    f270:	6039      	str	r1, [r7, #0]
    f272:	687b      	ldr	r3, [r7, #4]
    f274:	2b01      	cmp	r3, #1
    f276:	d15d      	bne.n	f334 <_Z41__static_initialization_and_destruction_0ii+0xcc>
    f278:	683b      	ldr	r3, [r7, #0]
    f27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f27e:	4293      	cmp	r3, r2
    f280:	d158      	bne.n	f334 <_Z41__static_initialization_and_destruction_0ii+0xcc>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f282:	492e      	ldr	r1, [pc, #184]	; (f33c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f284:	482e      	ldr	r0, [pc, #184]	; (f340 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f286:	4b2f      	ldr	r3, [pc, #188]	; (f344 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f288:	4798      	blx	r3
    f28a:	4a2f      	ldr	r2, [pc, #188]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f28c:	492f      	ldr	r1, [pc, #188]	; (f34c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f28e:	482c      	ldr	r0, [pc, #176]	; (f340 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f290:	4b2f      	ldr	r3, [pc, #188]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f292:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f294:	492f      	ldr	r1, [pc, #188]	; (f354 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f296:	4830      	ldr	r0, [pc, #192]	; (f358 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f298:	4b30      	ldr	r3, [pc, #192]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f29a:	4798      	blx	r3
    f29c:	4a2a      	ldr	r2, [pc, #168]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f29e:	4930      	ldr	r1, [pc, #192]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2a0:	482d      	ldr	r0, [pc, #180]	; (f358 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2a2:	4b2b      	ldr	r3, [pc, #172]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2a4:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f2a6:	492f      	ldr	r1, [pc, #188]	; (f364 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f2a8:	482f      	ldr	r0, [pc, #188]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f2aa:	4b2c      	ldr	r3, [pc, #176]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2ac:	4798      	blx	r3
    f2ae:	4a26      	ldr	r2, [pc, #152]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2b0:	492b      	ldr	r1, [pc, #172]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2b2:	482d      	ldr	r0, [pc, #180]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f2b4:	4b26      	ldr	r3, [pc, #152]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2b6:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f2b8:	492c      	ldr	r1, [pc, #176]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f2ba:	482d      	ldr	r0, [pc, #180]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f2bc:	4b27      	ldr	r3, [pc, #156]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2be:	4798      	blx	r3
    f2c0:	4a21      	ldr	r2, [pc, #132]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2c2:	4927      	ldr	r1, [pc, #156]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2c4:	482a      	ldr	r0, [pc, #168]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f2c6:	4b22      	ldr	r3, [pc, #136]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2c8:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f2ca:	492a      	ldr	r1, [pc, #168]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f2cc:	482a      	ldr	r0, [pc, #168]	; (f378 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f2ce:	4b23      	ldr	r3, [pc, #140]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2d0:	4798      	blx	r3
    f2d2:	4a1d      	ldr	r2, [pc, #116]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2d4:	4922      	ldr	r1, [pc, #136]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2d6:	4828      	ldr	r0, [pc, #160]	; (f378 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f2d8:	4b1d      	ldr	r3, [pc, #116]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2da:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f2dc:	4927      	ldr	r1, [pc, #156]	; (f37c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f2de:	4828      	ldr	r0, [pc, #160]	; (f380 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f2e0:	4b1e      	ldr	r3, [pc, #120]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2e2:	4798      	blx	r3
    f2e4:	4a18      	ldr	r2, [pc, #96]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2e6:	491e      	ldr	r1, [pc, #120]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2e8:	4825      	ldr	r0, [pc, #148]	; (f380 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f2ea:	4b19      	ldr	r3, [pc, #100]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2ec:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f2ee:	4925      	ldr	r1, [pc, #148]	; (f384 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f2f0:	4825      	ldr	r0, [pc, #148]	; (f388 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f2f2:	4b1a      	ldr	r3, [pc, #104]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2f4:	4798      	blx	r3
    f2f6:	4a14      	ldr	r2, [pc, #80]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2f8:	4919      	ldr	r1, [pc, #100]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2fa:	4823      	ldr	r0, [pc, #140]	; (f388 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f2fc:	4b14      	ldr	r3, [pc, #80]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2fe:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f300:	4922      	ldr	r1, [pc, #136]	; (f38c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f302:	4823      	ldr	r0, [pc, #140]	; (f390 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f304:	4b15      	ldr	r3, [pc, #84]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f306:	4798      	blx	r3
    f308:	4a0f      	ldr	r2, [pc, #60]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f30a:	4915      	ldr	r1, [pc, #84]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f30c:	4820      	ldr	r0, [pc, #128]	; (f390 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f30e:	4b10      	ldr	r3, [pc, #64]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f310:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f312:	4920      	ldr	r1, [pc, #128]	; (f394 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f314:	4820      	ldr	r0, [pc, #128]	; (f398 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f316:	4b11      	ldr	r3, [pc, #68]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f318:	4798      	blx	r3
    f31a:	4a0b      	ldr	r2, [pc, #44]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f31c:	4910      	ldr	r1, [pc, #64]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f31e:	481e      	ldr	r0, [pc, #120]	; (f398 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f320:	4b0b      	ldr	r3, [pc, #44]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f322:	4798      	blx	r3
    f324:	481d      	ldr	r0, [pc, #116]	; (f39c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f326:	4b1e      	ldr	r3, [pc, #120]	; (f3a0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f328:	4798      	blx	r3
    f32a:	4a07      	ldr	r2, [pc, #28]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f32c:	491d      	ldr	r1, [pc, #116]	; (f3a4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f32e:	481b      	ldr	r0, [pc, #108]	; (f39c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f330:	4b07      	ldr	r3, [pc, #28]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f332:	4798      	blx	r3
    f334:	bf00      	nop
    f336:	3708      	adds	r7, #8
    f338:	46bd      	mov	sp, r7
    f33a:	bd80      	pop	{r7, pc}
    f33c:	2000e088 	.word	0x2000e088
    f340:	200027f0 	.word	0x200027f0
    f344:	0000fcb5 	.word	0x0000fcb5
    f348:	20000000 	.word	0x20000000
    f34c:	0000fcd1 	.word	0x0000fcd1
    f350:	0001ab61 	.word	0x0001ab61
    f354:	2000df58 	.word	0x2000df58
    f358:	20002808 	.word	0x20002808
    f35c:	000104e5 	.word	0x000104e5
    f360:	0001051d 	.word	0x0001051d
    f364:	2000dfec 	.word	0x2000dfec
    f368:	20002828 	.word	0x20002828
    f36c:	2000e110 	.word	0x2000e110
    f370:	20002848 	.word	0x20002848
    f374:	2000e00c 	.word	0x2000e00c
    f378:	20002868 	.word	0x20002868
    f37c:	2000e0d0 	.word	0x2000e0d0
    f380:	20002888 	.word	0x20002888
    f384:	2000e0f0 	.word	0x2000e0f0
    f388:	200028a8 	.word	0x200028a8
    f38c:	2000dfc8 	.word	0x2000dfc8
    f390:	200028c8 	.word	0x200028c8
    f394:	2000e068 	.word	0x2000e068
    f398:	200028e8 	.word	0x200028e8
    f39c:	20002920 	.word	0x20002920
    f3a0:	0000f049 	.word	0x0000f049
    f3a4:	0000f081 	.word	0x0000f081

0000f3a8 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
    f3a8:	b580      	push	{r7, lr}
    f3aa:	af00      	add	r7, sp, #0
    f3ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f3b0:	2001      	movs	r0, #1
    f3b2:	4b01      	ldr	r3, [pc, #4]	; (f3b8 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10>)
    f3b4:	4798      	blx	r3
    f3b6:	bd80      	pop	{r7, pc}
    f3b8:	0000f269 	.word	0x0000f269

0000f3bc <_ZN23Compresor_I2C_InterfaceC1Ev>:
#include "Compresor_I2C_Interface.h"

//static	MCP23008_Class expandersCompresorStatic;
static	MCP23008_Class local_expanders_compressor[2];
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
    f3bc:	b480      	push	{r7}
    f3be:	b083      	sub	sp, #12
    f3c0:	af00      	add	r7, sp, #0
    f3c2:	6078      	str	r0, [r7, #4]
{
	i2c=&i2cSharedStatic;
    f3c4:	687b      	ldr	r3, [r7, #4]
    f3c6:	4a05      	ldr	r2, [pc, #20]	; (f3dc <_ZN23Compresor_I2C_InterfaceC1Ev+0x20>)
    f3c8:	609a      	str	r2, [r3, #8]
	isOK=false;
    f3ca:	687b      	ldr	r3, [r7, #4]
    f3cc:	2200      	movs	r2, #0
    f3ce:	731a      	strb	r2, [r3, #12]
} //Compresor_I2C_Interface
    f3d0:	687b      	ldr	r3, [r7, #4]
    f3d2:	4618      	mov	r0, r3
    f3d4:	370c      	adds	r7, #12
    f3d6:	46bd      	mov	sp, r7
    f3d8:	bc80      	pop	{r7}
    f3da:	4770      	bx	lr
    f3dc:	20002af4 	.word	0x20002af4

0000f3e0 <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
    f3e0:	b480      	push	{r7}
    f3e2:	b083      	sub	sp, #12
    f3e4:	af00      	add	r7, sp, #0
    f3e6:	6078      	str	r0, [r7, #4]
{
} //~Compresor_I2C_Interface
    f3e8:	687b      	ldr	r3, [r7, #4]
    f3ea:	4618      	mov	r0, r3
    f3ec:	370c      	adds	r7, #12
    f3ee:	46bd      	mov	sp, r7
    f3f0:	bc80      	pop	{r7}
    f3f2:	4770      	bx	lr

0000f3f4 <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
    f3f4:	b580      	push	{r7, lr}
    f3f6:	b082      	sub	sp, #8
    f3f8:	af00      	add	r7, sp, #0
    f3fa:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
    f3fc:	687b      	ldr	r3, [r7, #4]
    f3fe:	689b      	ldr	r3, [r3, #8]
    f400:	7a1b      	ldrb	r3, [r3, #8]
    f402:	b2db      	uxtb	r3, r3
    f404:	2b00      	cmp	r3, #0
    f406:	d104      	bne.n	f412 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1e>
	{
	} 
	else
	{
		
		i2c->Init();
    f408:	687b      	ldr	r3, [r7, #4]
    f40a:	689b      	ldr	r3, [r3, #8]
    f40c:	4618      	mov	r0, r3
    f40e:	4b1c      	ldr	r3, [pc, #112]	; (f480 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x8c>)
    f410:	4798      	blx	r3
	}
	if (i2c->isOK)
    f412:	687b      	ldr	r3, [r7, #4]
    f414:	689b      	ldr	r3, [r3, #8]
    f416:	7a5b      	ldrb	r3, [r3, #9]
    f418:	b2db      	uxtb	r3, r3
    f41a:	2b00      	cmp	r3, #0
    f41c:	d028      	beq.n	f470 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7c>
	{
		expander[0]=&local_expanders_compressor[0];
    f41e:	687b      	ldr	r3, [r7, #4]
    f420:	4a18      	ldr	r2, [pc, #96]	; (f484 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x90>)
    f422:	611a      	str	r2, [r3, #16]
		expander[0]->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
    f424:	687b      	ldr	r3, [r7, #4]
    f426:	6918      	ldr	r0, [r3, #16]
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	689b      	ldr	r3, [r3, #8]
    f42c:	461a      	mov	r2, r3
    f42e:	2125      	movs	r1, #37	; 0x25
    f430:	4b15      	ldr	r3, [pc, #84]	; (f488 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f432:	4798      	blx	r3
		expander[0]->SetPortInput(0xf0);
    f434:	687b      	ldr	r3, [r7, #4]
    f436:	691b      	ldr	r3, [r3, #16]
    f438:	21f0      	movs	r1, #240	; 0xf0
    f43a:	4618      	mov	r0, r3
    f43c:	4b13      	ldr	r3, [pc, #76]	; (f48c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x98>)
    f43e:	4798      	blx	r3
				expander[1]=&local_expanders_compressor[1];
    f440:	687b      	ldr	r3, [r7, #4]
    f442:	4a13      	ldr	r2, [pc, #76]	; (f490 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x9c>)
    f444:	615a      	str	r2, [r3, #20]
				expander[1]->Init(COMPRESOR_MCP23008_ADDRESS+1,i2c);
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	6958      	ldr	r0, [r3, #20]
    f44a:	687b      	ldr	r3, [r7, #4]
    f44c:	689b      	ldr	r3, [r3, #8]
    f44e:	461a      	mov	r2, r3
    f450:	2126      	movs	r1, #38	; 0x26
    f452:	4b0d      	ldr	r3, [pc, #52]	; (f488 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f454:	4798      	blx	r3
				expander[1]->SetPortInput();
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	695b      	ldr	r3, [r3, #20]
    f45a:	4618      	mov	r0, r3
    f45c:	4b0d      	ldr	r3, [pc, #52]	; (f494 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa0>)
    f45e:	4798      	blx	r3
	//	expander->SetPortOutput();
		isOK=SelfTest();
    f460:	6878      	ldr	r0, [r7, #4]
    f462:	4b0d      	ldr	r3, [pc, #52]	; (f498 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa4>)
    f464:	4798      	blx	r3
    f466:	4603      	mov	r3, r0
    f468:	461a      	mov	r2, r3
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	731a      	strb	r2, [r3, #12]
    f46e:	e000      	b.n	f472 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7e>
	}
	else
	{
		asm("nop");
    f470:	bf00      	nop
	}
	//isOK=i2c->isOK;
		return isOK;
    f472:	687b      	ldr	r3, [r7, #4]
    f474:	7b1b      	ldrb	r3, [r3, #12]
}
    f476:	4618      	mov	r0, r3
    f478:	3708      	adds	r7, #8
    f47a:	46bd      	mov	sp, r7
    f47c:	bd80      	pop	{r7, pc}
    f47e:	bf00      	nop
    f480:	0000fce5 	.word	0x0000fce5
    f484:	20002b0c 	.word	0x20002b0c
    f488:	0000fe99 	.word	0x0000fe99
    f48c:	00010081 	.word	0x00010081
    f490:	20002b28 	.word	0x20002b28
    f494:	0001003d 	.word	0x0001003d
    f498:	0000f591 	.word	0x0000f591

0000f49c <_ZN23Compresor_I2C_Interface10ReadStatusEv>:

uint8_t	Compresor_I2C_Interface::ReadStatus(void){
    f49c:	b580      	push	{r7, lr}
    f49e:	b084      	sub	sp, #16
    f4a0:	af00      	add	r7, sp, #0
    f4a2:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[0]->ReadGPIORegister();
    f4a4:	687b      	ldr	r3, [r7, #4]
    f4a6:	691b      	ldr	r3, [r3, #16]
    f4a8:	4618      	mov	r0, r3
    f4aa:	4b04      	ldr	r3, [pc, #16]	; (f4bc <_ZN23Compresor_I2C_Interface10ReadStatusEv+0x20>)
    f4ac:	4798      	blx	r3
    f4ae:	4603      	mov	r3, r0
    f4b0:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f4b2:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f4b4:	4618      	mov	r0, r3
    f4b6:	3710      	adds	r7, #16
    f4b8:	46bd      	mov	sp, r7
    f4ba:	bd80      	pop	{r7, pc}
    f4bc:	0000ff7d 	.word	0x0000ff7d

0000f4c0 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv>:
uint8_t	Compresor_I2C_Interface::ReadPressureLimits(void){
    f4c0:	b580      	push	{r7, lr}
    f4c2:	b084      	sub	sp, #16
    f4c4:	af00      	add	r7, sp, #0
    f4c6:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[1]->ReadGPIORegister();
    f4c8:	687b      	ldr	r3, [r7, #4]
    f4ca:	695b      	ldr	r3, [r3, #20]
    f4cc:	4618      	mov	r0, r3
    f4ce:	4b04      	ldr	r3, [pc, #16]	; (f4e0 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv+0x20>)
    f4d0:	4798      	blx	r3
    f4d2:	4603      	mov	r3, r0
    f4d4:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f4d6:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f4d8:	4618      	mov	r0, r3
    f4da:	3710      	adds	r7, #16
    f4dc:	46bd      	mov	sp, r7
    f4de:	bd80      	pop	{r7, pc}
    f4e0:	0000ff7d 	.word	0x0000ff7d

0000f4e4 <_ZN23Compresor_I2C_Interface9SetEnableEb>:
uint8_t	Compresor_I2C_Interface::SetEnable(bool state){
    f4e4:	b580      	push	{r7, lr}
    f4e6:	b082      	sub	sp, #8
    f4e8:	af00      	add	r7, sp, #0
    f4ea:	6078      	str	r0, [r7, #4]
    f4ec:	460b      	mov	r3, r1
    f4ee:	70fb      	strb	r3, [r7, #3]

	enabled=expander[0]->WriteDigit(0,state);
    f4f0:	687b      	ldr	r3, [r7, #4]
    f4f2:	691b      	ldr	r3, [r3, #16]
    f4f4:	78fa      	ldrb	r2, [r7, #3]
    f4f6:	2100      	movs	r1, #0
    f4f8:	4618      	mov	r0, r3
    f4fa:	4b06      	ldr	r3, [pc, #24]	; (f514 <_ZN23Compresor_I2C_Interface9SetEnableEb+0x30>)
    f4fc:	4798      	blx	r3
    f4fe:	4603      	mov	r3, r0
    f500:	461a      	mov	r2, r3
    f502:	687b      	ldr	r3, [r7, #4]
    f504:	735a      	strb	r2, [r3, #13]
	return uint8_t(enabled);
    f506:	687b      	ldr	r3, [r7, #4]
    f508:	7b5b      	ldrb	r3, [r3, #13]
}
    f50a:	4618      	mov	r0, r3
    f50c:	3708      	adds	r7, #8
    f50e:	46bd      	mov	sp, r7
    f510:	bd80      	pop	{r7, pc}
    f512:	bf00      	nop
    f514:	00010235 	.word	0x00010235

0000f518 <_ZN23Compresor_I2C_Interface9IsEnabledEv>:

	enabled=expander[0]->WriteDigit(2,!state);
	return uint8_t(enabled);
}

bool Compresor_I2C_Interface::IsEnabled(void){
    f518:	b580      	push	{r7, lr}
    f51a:	b084      	sub	sp, #16
    f51c:	af00      	add	r7, sp, #0
    f51e:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	691b      	ldr	r3, [r3, #16]
    f524:	4618      	mov	r0, r3
    f526:	4b0a      	ldr	r3, [pc, #40]	; (f550 <_ZN23Compresor_I2C_Interface9IsEnabledEv+0x38>)
    f528:	4798      	blx	r3
    f52a:	4603      	mov	r3, r0
    f52c:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f52e:	7bfb      	ldrb	r3, [r7, #15]
    f530:	f003 0301 	and.w	r3, r3, #1
    f534:	2b00      	cmp	r3, #0
    f536:	bf14      	ite	ne
    f538:	2301      	movne	r3, #1
    f53a:	2300      	moveq	r3, #0
    f53c:	b2da      	uxtb	r2, r3
    f53e:	687b      	ldr	r3, [r7, #4]
    f540:	735a      	strb	r2, [r3, #13]
	return enabled;
    f542:	687b      	ldr	r3, [r7, #4]
    f544:	7b5b      	ldrb	r3, [r3, #13]
}
    f546:	4618      	mov	r0, r3
    f548:	3710      	adds	r7, #16
    f54a:	46bd      	mov	sp, r7
    f54c:	bd80      	pop	{r7, pc}
    f54e:	bf00      	nop
    f550:	0000ff7d 	.word	0x0000ff7d

0000f554 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv>:
bool* Compresor_I2C_Interface::IsEnabledPointer(void){
    f554:	b580      	push	{r7, lr}
    f556:	b084      	sub	sp, #16
    f558:	af00      	add	r7, sp, #0
    f55a:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f55c:	687b      	ldr	r3, [r7, #4]
    f55e:	691b      	ldr	r3, [r3, #16]
    f560:	4618      	mov	r0, r3
    f562:	4b0a      	ldr	r3, [pc, #40]	; (f58c <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv+0x38>)
    f564:	4798      	blx	r3
    f566:	4603      	mov	r3, r0
    f568:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f56a:	7bfb      	ldrb	r3, [r7, #15]
    f56c:	f003 0301 	and.w	r3, r3, #1
    f570:	2b00      	cmp	r3, #0
    f572:	bf14      	ite	ne
    f574:	2301      	movne	r3, #1
    f576:	2300      	moveq	r3, #0
    f578:	b2da      	uxtb	r2, r3
    f57a:	687b      	ldr	r3, [r7, #4]
    f57c:	735a      	strb	r2, [r3, #13]
	return &enabled;
    f57e:	687b      	ldr	r3, [r7, #4]
    f580:	330d      	adds	r3, #13
}
    f582:	4618      	mov	r0, r3
    f584:	3710      	adds	r7, #16
    f586:	46bd      	mov	sp, r7
    f588:	bd80      	pop	{r7, pc}
    f58a:	bf00      	nop
    f58c:	0000ff7d 	.word	0x0000ff7d

0000f590 <_ZN23Compresor_I2C_Interface8SelfTestEv>:

bool Compresor_I2C_Interface::SelfTest(void){
    f590:	b480      	push	{r7}
    f592:	b085      	sub	sp, #20
    f594:	af00      	add	r7, sp, #0
    f596:	6078      	str	r0, [r7, #4]
	bool result=true;
    f598:	2301      	movs	r3, #1
    f59a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
    f59c:	2300      	movs	r3, #0
    f59e:	73fb      	strb	r3, [r7, #15]
    f5a0:	7bfb      	ldrb	r3, [r7, #15]
    f5a2:	2b03      	cmp	r3, #3
    f5a4:	dc03      	bgt.n	f5ae <_ZN23Compresor_I2C_Interface8SelfTestEv+0x1e>
    f5a6:	7bfb      	ldrb	r3, [r7, #15]
    f5a8:	3301      	adds	r3, #1
    f5aa:	73fb      	strb	r3, [r7, #15]
    f5ac:	e7f8      	b.n	f5a0 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x10>
		
		
	}
	

	return result;
    f5ae:	7bbb      	ldrb	r3, [r7, #14]
    f5b0:	4618      	mov	r0, r3
    f5b2:	3714      	adds	r7, #20
    f5b4:	46bd      	mov	sp, r7
    f5b6:	bc80      	pop	{r7}
    f5b8:	4770      	bx	lr
	...

0000f5bc <__tcf_0>:
static	MCP23008_Class local_expanders_compressor[2];
    f5bc:	b590      	push	{r4, r7, lr}
    f5be:	b083      	sub	sp, #12
    f5c0:	af00      	add	r7, sp, #0
    f5c2:	6078      	str	r0, [r7, #4]
    f5c4:	4c05      	ldr	r4, [pc, #20]	; (f5dc <__tcf_0+0x20>)
    f5c6:	4b06      	ldr	r3, [pc, #24]	; (f5e0 <__tcf_0+0x24>)
    f5c8:	429c      	cmp	r4, r3
    f5ca:	d004      	beq.n	f5d6 <__tcf_0+0x1a>
    f5cc:	3c1c      	subs	r4, #28
    f5ce:	4620      	mov	r0, r4
    f5d0:	4b04      	ldr	r3, [pc, #16]	; (f5e4 <__tcf_0+0x28>)
    f5d2:	4798      	blx	r3
    f5d4:	e7f7      	b.n	f5c6 <__tcf_0+0xa>
    f5d6:	370c      	adds	r7, #12
    f5d8:	46bd      	mov	sp, r7
    f5da:	bd90      	pop	{r4, r7, pc}
    f5dc:	20002b44 	.word	0x20002b44
    f5e0:	20002b0c 	.word	0x20002b0c
    f5e4:	0000fe85 	.word	0x0000fe85

0000f5e8 <_Z41__static_initialization_and_destruction_0ii>:
    f5e8:	b5b0      	push	{r4, r5, r7, lr}
    f5ea:	b082      	sub	sp, #8
    f5ec:	af00      	add	r7, sp, #0
    f5ee:	6078      	str	r0, [r7, #4]
    f5f0:	6039      	str	r1, [r7, #0]
    f5f2:	687b      	ldr	r3, [r7, #4]
    f5f4:	2b01      	cmp	r3, #1
    f5f6:	d11d      	bne.n	f634 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f5f8:	683b      	ldr	r3, [r7, #0]
    f5fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f5fe:	4293      	cmp	r3, r2
    f600:	d118      	bne.n	f634 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f602:	490e      	ldr	r1, [pc, #56]	; (f63c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f604:	480e      	ldr	r0, [pc, #56]	; (f640 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f606:	4b0f      	ldr	r3, [pc, #60]	; (f644 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f608:	4798      	blx	r3
    f60a:	4a0f      	ldr	r2, [pc, #60]	; (f648 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f60c:	490f      	ldr	r1, [pc, #60]	; (f64c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f60e:	480c      	ldr	r0, [pc, #48]	; (f640 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f610:	4b0f      	ldr	r3, [pc, #60]	; (f650 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f612:	4798      	blx	r3
static	MCP23008_Class local_expanders_compressor[2];
    f614:	4b0f      	ldr	r3, [pc, #60]	; (f654 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    f616:	2401      	movs	r4, #1
    f618:	461d      	mov	r5, r3
    f61a:	2c00      	cmp	r4, #0
    f61c:	db05      	blt.n	f62a <_Z41__static_initialization_and_destruction_0ii+0x42>
    f61e:	4628      	mov	r0, r5
    f620:	4b0d      	ldr	r3, [pc, #52]	; (f658 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    f622:	4798      	blx	r3
    f624:	351c      	adds	r5, #28
    f626:	3c01      	subs	r4, #1
    f628:	e7f7      	b.n	f61a <_Z41__static_initialization_and_destruction_0ii+0x32>
    f62a:	4a07      	ldr	r2, [pc, #28]	; (f648 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f62c:	490b      	ldr	r1, [pc, #44]	; (f65c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    f62e:	2000      	movs	r0, #0
    f630:	4b07      	ldr	r3, [pc, #28]	; (f650 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f632:	4798      	blx	r3
    f634:	bf00      	nop
    f636:	3708      	adds	r7, #8
    f638:	46bd      	mov	sp, r7
    f63a:	bdb0      	pop	{r4, r5, r7, pc}
    f63c:	2000e088 	.word	0x2000e088
    f640:	20002af4 	.word	0x20002af4
    f644:	0000fcb5 	.word	0x0000fcb5
    f648:	20000000 	.word	0x20000000
    f64c:	0000fcd1 	.word	0x0000fcd1
    f650:	0001ab61 	.word	0x0001ab61
    f654:	20002b0c 	.word	0x20002b0c
    f658:	0000fe71 	.word	0x0000fe71
    f65c:	0000f5bd 	.word	0x0000f5bd

0000f660 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
    f660:	b580      	push	{r7, lr}
    f662:	af00      	add	r7, sp, #0
    f664:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f668:	2001      	movs	r0, #1
    f66a:	4b01      	ldr	r3, [pc, #4]	; (f670 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x10>)
    f66c:	4798      	blx	r3
    f66e:	bd80      	pop	{r7, pc}
    f670:	0000f5e9 	.word	0x0000f5e9

0000f674 <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	uint8_t local_tx_data[8];
static bool syncCANOpenTimeoutStatic=false;
static uint16_t local_speed;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
    f674:	b480      	push	{r7}
    f676:	b083      	sub	sp, #12
    f678:	af00      	add	r7, sp, #0
    f67a:	6078      	str	r0, [r7, #4]
	syncCANOpenTimeoutStatic=true;
    f67c:	4b04      	ldr	r3, [pc, #16]	; (f690 <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0x1c>)
    f67e:	2201      	movs	r2, #1
    f680:	701a      	strb	r2, [r3, #0]
	asm("nop" );
    f682:	bf00      	nop
}
    f684:	bf00      	nop
    f686:	370c      	adds	r7, #12
    f688:	46bd      	mov	sp, r7
    f68a:	bc80      	pop	{r7}
    f68c:	4770      	bx	lr
    f68e:	bf00      	nop
    f690:	20002dec 	.word	0x20002dec

0000f694 <_ZN28Compressor_CANOpen_InterfaceC1Ev>:

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
    f694:	b580      	push	{r7, lr}
    f696:	b082      	sub	sp, #8
    f698:	af00      	add	r7, sp, #0
    f69a:	6078      	str	r0, [r7, #4]
    f69c:	687b      	ldr	r3, [r7, #4]
    f69e:	4618      	mov	r0, r3
    f6a0:	4b08      	ldr	r3, [pc, #32]	; (f6c4 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x30>)
    f6a2:	4798      	blx	r3
    f6a4:	4a08      	ldr	r2, [pc, #32]	; (f6c8 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x34>)
    f6a6:	687b      	ldr	r3, [r7, #4]
    f6a8:	601a      	str	r2, [r3, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	4a07      	ldr	r2, [pc, #28]	; (f6cc <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x38>)
    f6ae:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f6b2:	687b      	ldr	r3, [r7, #4]
    f6b4:	2201      	movs	r2, #1
    f6b6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
} //Compressor_Can_Interface
    f6ba:	687b      	ldr	r3, [r7, #4]
    f6bc:	4618      	mov	r0, r3
    f6be:	3708      	adds	r7, #8
    f6c0:	46bd      	mov	sp, r7
    f6c2:	bd80      	pop	{r7, pc}
    f6c4:	000151d1 	.word	0x000151d1
    f6c8:	0001ba74 	.word	0x0001ba74
    f6cc:	20002dec 	.word	0x20002dec

0000f6d0 <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
    f6d0:	b580      	push	{r7, lr}
    f6d2:	b082      	sub	sp, #8
    f6d4:	af00      	add	r7, sp, #0
    f6d6:	6078      	str	r0, [r7, #4]
    f6d8:	4a05      	ldr	r2, [pc, #20]	; (f6f0 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x20>)
    f6da:	687b      	ldr	r3, [r7, #4]
    f6dc:	601a      	str	r2, [r3, #0]
    f6de:	687b      	ldr	r3, [r7, #4]
    f6e0:	4618      	mov	r0, r3
    f6e2:	4b04      	ldr	r3, [pc, #16]	; (f6f4 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x24>)
    f6e4:	4798      	blx	r3
{
} //~Compressor_Can_Interface
    f6e6:	687b      	ldr	r3, [r7, #4]
    f6e8:	4618      	mov	r0, r3
    f6ea:	3708      	adds	r7, #8
    f6ec:	46bd      	mov	sp, r7
    f6ee:	bd80      	pop	{r7, pc}
    f6f0:	0001ba74 	.word	0x0001ba74
    f6f4:	00015241 	.word	0x00015241

0000f6f8 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
    f6f8:	b580      	push	{r7, lr}
    f6fa:	b082      	sub	sp, #8
    f6fc:	af00      	add	r7, sp, #0
    f6fe:	6078      	str	r0, [r7, #4]
	tx_can_buffer=local_tx_data;
    f700:	687b      	ldr	r3, [r7, #4]
    f702:	4a1e      	ldr	r2, [pc, #120]	; (f77c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x84>)
    f704:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	speed=&local_speed;
    f708:	687b      	ldr	r3, [r7, #4]
    f70a:	4a1d      	ldr	r2, [pc, #116]	; (f780 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x88>)
    f70c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f710:	687b      	ldr	r3, [r7, #4]
    f712:	4a1c      	ldr	r2, [pc, #112]	; (f784 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x8c>)
    f714:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	2201      	movs	r2, #1
    f71c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	cano=&canoStatic;
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	4a19      	ldr	r2, [pc, #100]	; (f788 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x90>)
    f724:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	int_result=cano->Init_CO_CLASS(NMT_MASTER_NODE);
    f728:	687b      	ldr	r3, [r7, #4]
    f72a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f72e:	2101      	movs	r1, #1
    f730:	4618      	mov	r0, r3
    f732:	4b16      	ldr	r3, [pc, #88]	; (f78c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x94>)
    f734:	4798      	blx	r3
    f736:	4602      	mov	r2, r0
    f738:	687b      	ldr	r3, [r7, #4]
    f73a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	if (int_result==0)
    f73e:	687b      	ldr	r3, [r7, #4]
    f740:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
    f744:	2b00      	cmp	r3, #0
    f746:	d10b      	bne.n	f760 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x68>
	{
	//	cano->SetInitialMode();
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
    f748:	687b      	ldr	r3, [r7, #4]
    f74a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f74e:	2103      	movs	r1, #3
    f750:	4618      	mov	r0, r3
    f752:	4b0f      	ldr	r3, [pc, #60]	; (f790 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x98>)
    f754:	4798      	blx	r3
    f756:	4603      	mov	r3, r0
    f758:	461a      	mov	r2, r3
    f75a:	687b      	ldr	r3, [r7, #4]
    f75c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
    f760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f764:	490b      	ldr	r1, [pc, #44]	; (f794 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x9c>)
    f766:	480c      	ldr	r0, [pc, #48]	; (f798 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa0>)
    f768:	4b0c      	ldr	r3, [pc, #48]	; (f79c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa4>)
    f76a:	4798      	blx	r3
	
	return boolResult;
    f76c:	687b      	ldr	r3, [r7, #4]
    f76e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
	
}
    f772:	4618      	mov	r0, r3
    f774:	3708      	adds	r7, #8
    f776:	46bd      	mov	sp, r7
    f778:	bd80      	pop	{r7, pc}
    f77a:	bf00      	nop
    f77c:	20002de4 	.word	0x20002de4
    f780:	20002dee 	.word	0x20002dee
    f784:	20002dec 	.word	0x20002dec
    f788:	20002c5c 	.word	0x20002c5c
    f78c:	00015269 	.word	0x00015269
    f790:	0001532d 	.word	0x0001532d
    f794:	0000f675 	.word	0x0000f675
    f798:	20002c3c 	.word	0x20002c3c
    f79c:	000107b9 	.word	0x000107b9

0000f7a0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:
	

		return (int)reset;
}

void Compressor_CANOpen_Interface::Periodic_Task(void){
    f7a0:	b580      	push	{r7, lr}
    f7a2:	b082      	sub	sp, #8
    f7a4:	af00      	add	r7, sp, #0
    f7a6:	6078      	str	r0, [r7, #4]
	
	if (syncCANOpenTimeoutStatic)
    f7a8:	4b37      	ldr	r3, [pc, #220]	; (f888 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	2b00      	cmp	r3, #0
    f7ae:	d066      	beq.n	f87e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xde>
	{
		//Comporesor_Process();
		if ( cano->ptrCO->CANmodule[0]->CANnormal)
    f7b0:	687b      	ldr	r3, [r7, #4]
    f7b2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f7b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    f7ba:	681b      	ldr	r3, [r3, #0]
    f7bc:	7d1b      	ldrb	r3, [r3, #20]
    f7be:	b2db      	uxtb	r3, r3
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	bf14      	ite	ne
    f7c4:	2301      	movne	r3, #1
    f7c6:	2300      	moveq	r3, #0
    f7c8:	b2db      	uxtb	r3, r3
    f7ca:	2b00      	cmp	r3, #0
    f7cc:	d04f      	beq.n	f86e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xce>
		{
				syncWas=cano->Send_SYNC_Signal();
    f7ce:	687b      	ldr	r3, [r7, #4]
    f7d0:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f7d4:	330c      	adds	r3, #12
    f7d6:	4618      	mov	r0, r3
    f7d8:	4b2c      	ldr	r3, [pc, #176]	; (f88c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xec>)
    f7da:	4798      	blx	r3
    f7dc:	4603      	mov	r3, r0
    f7de:	461a      	mov	r2, r3
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
				if (syncWas==0)
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
    f7ec:	2b00      	cmp	r3, #0
    f7ee:	d107      	bne.n	f800 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x60>
				{
					//cano->Pass_Temperature_To_voltage();
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f7f0:	687b      	ldr	r3, [r7, #4]
    f7f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    f7f6:	4a26      	ldr	r2, [pc, #152]	; (f890 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f7f8:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f7fc:	801a      	strh	r2, [r3, #0]
    f7fe:	e006      	b.n	f80e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x6e>
				//	current_speed=(uint16_t)(CO_OD_RAM.voltage)
				} 
				else
				{
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f800:	687b      	ldr	r3, [r7, #4]
    f802:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    f806:	4a22      	ldr	r2, [pc, #136]	; (f890 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f808:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f80c:	801a      	strh	r2, [r3, #0]
				}
				is_enabled=ccu.IsEnabled();
    f80e:	4821      	ldr	r0, [pc, #132]	; (f894 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf4>)
    f810:	4b21      	ldr	r3, [pc, #132]	; (f898 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf8>)
    f812:	4798      	blx	r3
    f814:	4603      	mov	r3, r0
    f816:	461a      	mov	r2, r3
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
				if ((is_enabled))
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
    f824:	2b00      	cmp	r3, #0
    f826:	d00b      	beq.n	f840 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xa0>
				{
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f82e:	8819      	ldrh	r1, [r3, #0]
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    f836:	461a      	mov	r2, r3
    f838:	6878      	ldr	r0, [r7, #4]
    f83a:	4b18      	ldr	r3, [pc, #96]	; (f89c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f83c:	4798      	blx	r3
    f83e:	e00a      	b.n	f856 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xb6>
					
				}else{
					
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f840:	687b      	ldr	r3, [r7, #4]
    f842:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f846:	8819      	ldrh	r1, [r3, #0]
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    f84e:	461a      	mov	r2, r3
    f850:	6878      	ldr	r0, [r7, #4]
    f852:	4b12      	ldr	r3, [pc, #72]	; (f89c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f854:	4798      	blx	r3
				}
				cano->Send_Simple_Run_Command(tx_can_buffer,CCU_CANOPEN_NODE);
    f856:	687b      	ldr	r3, [r7, #4]
    f858:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f85c:	f103 0014 	add.w	r0, r3, #20
    f860:	687b      	ldr	r3, [r7, #4]
    f862:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    f866:	2203      	movs	r2, #3
    f868:	4619      	mov	r1, r3
    f86a:	4b0d      	ldr	r3, [pc, #52]	; (f8a0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x100>)
    f86c:	4798      	blx	r3
			//	cano->CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
    f86e:	4b06      	ldr	r3, [pc, #24]	; (f888 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f870:	2200      	movs	r2, #0
    f872:	701a      	strb	r2, [r3, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),100);
    f874:	2264      	movs	r2, #100	; 0x64
    f876:	490b      	ldr	r1, [pc, #44]	; (f8a4 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x104>)
    f878:	480b      	ldr	r0, [pc, #44]	; (f8a8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x108>)
    f87a:	4b0c      	ldr	r3, [pc, #48]	; (f8ac <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x10c>)
    f87c:	4798      	blx	r3
	} 
	else
	{
	}

}
    f87e:	bf00      	nop
    f880:	3708      	adds	r7, #8
    f882:	46bd      	mov	sp, r7
    f884:	bd80      	pop	{r7, pc}
    f886:	bf00      	nop
    f888:	20002dec 	.word	0x20002dec
    f88c:	00018961 	.word	0x00018961
    f890:	20000220 	.word	0x20000220
    f894:	20002ad0 	.word	0x20002ad0
    f898:	0000f519 	.word	0x0000f519
    f89c:	0000f8b1 	.word	0x0000f8b1
    f8a0:	00017c59 	.word	0x00017c59
    f8a4:	0000f675 	.word	0x0000f675
    f8a8:	20002c3c 	.word	0x20002c3c
    f8ac:	000107b9 	.word	0x000107b9

0000f8b0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh>:

void	Compressor_CANOpen_Interface::Convert_Uint16_Array(uint16_t sp, uint8_t * arr){
    f8b0:	b480      	push	{r7}
    f8b2:	b087      	sub	sp, #28
    f8b4:	af00      	add	r7, sp, #0
    f8b6:	60f8      	str	r0, [r7, #12]
    f8b8:	460b      	mov	r3, r1
    f8ba:	607a      	str	r2, [r7, #4]
    f8bc:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++)
    f8be:	2300      	movs	r3, #0
    f8c0:	75fb      	strb	r3, [r7, #23]
    f8c2:	7dfb      	ldrb	r3, [r7, #23]
    f8c4:	2b07      	cmp	r3, #7
    f8c6:	dc18      	bgt.n	f8fa <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x4a>
	{
		if (i<2)
    f8c8:	7dfb      	ldrb	r3, [r7, #23]
    f8ca:	2b01      	cmp	r3, #1
    f8cc:	dc0d      	bgt.n	f8ea <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x3a>
		{
			local_tx_data[i]=(uint8_t)(((*speed)>>8*i)&0x00ff);
    f8ce:	7dfb      	ldrb	r3, [r7, #23]
    f8d0:	68fa      	ldr	r2, [r7, #12]
    f8d2:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
    f8d6:	8812      	ldrh	r2, [r2, #0]
    f8d8:	4611      	mov	r1, r2
    f8da:	7dfa      	ldrb	r2, [r7, #23]
    f8dc:	00d2      	lsls	r2, r2, #3
    f8de:	fa41 f202 	asr.w	r2, r1, r2
    f8e2:	b2d1      	uxtb	r1, r2
    f8e4:	4a08      	ldr	r2, [pc, #32]	; (f908 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f8e6:	54d1      	strb	r1, [r2, r3]
    f8e8:	e003      	b.n	f8f2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x42>
		}else{
			local_tx_data[i]=0;
    f8ea:	7dfb      	ldrb	r3, [r7, #23]
    f8ec:	4a06      	ldr	r2, [pc, #24]	; (f908 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f8ee:	2100      	movs	r1, #0
    f8f0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
    f8f2:	7dfb      	ldrb	r3, [r7, #23]
    f8f4:	3301      	adds	r3, #1
    f8f6:	75fb      	strb	r3, [r7, #23]
    f8f8:	e7e3      	b.n	f8c2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x12>
		}
		
	}
	arr=local_tx_data;
    f8fa:	4b03      	ldr	r3, [pc, #12]	; (f908 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f8fc:	607b      	str	r3, [r7, #4]
}
    f8fe:	bf00      	nop
    f900:	371c      	adds	r7, #28
    f902:	46bd      	mov	sp, r7
    f904:	bc80      	pop	{r7}
    f906:	4770      	bx	lr
    f908:	20002de4 	.word	0x20002de4

0000f90c <_ZN28Compressor_CANOpen_Interface14Set_CAN_EnableEPb>:

bool Compressor_CANOpen_Interface::Set_CAN_Enable(bool *st){
    f90c:	b480      	push	{r7}
    f90e:	b083      	sub	sp, #12
    f910:	af00      	add	r7, sp, #0
    f912:	6078      	str	r0, [r7, #4]
    f914:	6039      	str	r1, [r7, #0]
	enable=st;
    f916:	687b      	ldr	r3, [r7, #4]
    f918:	683a      	ldr	r2, [r7, #0]
    f91a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	return  *enable;
    f91e:	687b      	ldr	r3, [r7, #4]
    f920:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f924:	781b      	ldrb	r3, [r3, #0]
}
    f926:	4618      	mov	r0, r3
    f928:	370c      	adds	r7, #12
    f92a:	46bd      	mov	sp, r7
    f92c:	bc80      	pop	{r7}
    f92e:	4770      	bx	lr

0000f930 <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt>:

void	Compressor_CANOpen_Interface::Set_Motor_Speed(uint16_t sp){
    f930:	b480      	push	{r7}
    f932:	b083      	sub	sp, #12
    f934:	af00      	add	r7, sp, #0
    f936:	6078      	str	r0, [r7, #4]
    f938:	460b      	mov	r3, r1
    f93a:	807b      	strh	r3, [r7, #2]
	if (sp>7000)
    f93c:	887b      	ldrh	r3, [r7, #2]
    f93e:	f641 3258 	movw	r2, #7000	; 0x1b58
    f942:	4293      	cmp	r3, r2
    f944:	dd06      	ble.n	f954 <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt+0x24>
	{
		*speed=7000;
    f946:	687b      	ldr	r3, [r7, #4]
    f948:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f94c:	f641 3258 	movw	r2, #7000	; 0x1b58
    f950:	801a      	strh	r2, [r3, #0]
	{
		*speed=sp;
	}
	
	
}
    f952:	e004      	b.n	f95e <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt+0x2e>
		*speed=sp;
    f954:	687b      	ldr	r3, [r7, #4]
    f956:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f95a:	887a      	ldrh	r2, [r7, #2]
    f95c:	801a      	strh	r2, [r3, #0]
}
    f95e:	bf00      	nop
    f960:	370c      	adds	r7, #12
    f962:	46bd      	mov	sp, r7
    f964:	bc80      	pop	{r7}
    f966:	4770      	bx	lr

0000f968 <_Z41__static_initialization_and_destruction_0ii>:
    f968:	b580      	push	{r7, lr}
    f96a:	b082      	sub	sp, #8
    f96c:	af00      	add	r7, sp, #0
    f96e:	6078      	str	r0, [r7, #4]
    f970:	6039      	str	r1, [r7, #0]
    f972:	687b      	ldr	r3, [r7, #4]
    f974:	2b01      	cmp	r3, #1
    f976:	d15e      	bne.n	fa36 <_Z41__static_initialization_and_destruction_0ii+0xce>
    f978:	683b      	ldr	r3, [r7, #0]
    f97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f97e:	4293      	cmp	r3, r2
    f980:	d159      	bne.n	fa36 <_Z41__static_initialization_and_destruction_0ii+0xce>
    f982:	492f      	ldr	r1, [pc, #188]	; (fa40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f984:	482f      	ldr	r0, [pc, #188]	; (fa44 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f986:	4b30      	ldr	r3, [pc, #192]	; (fa48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f988:	4798      	blx	r3
    f98a:	4a30      	ldr	r2, [pc, #192]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f98c:	4930      	ldr	r1, [pc, #192]	; (fa50 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f98e:	482d      	ldr	r0, [pc, #180]	; (fa44 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f990:	4b30      	ldr	r3, [pc, #192]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f992:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f994:	4930      	ldr	r1, [pc, #192]	; (fa58 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f996:	4831      	ldr	r0, [pc, #196]	; (fa5c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f998:	4b31      	ldr	r3, [pc, #196]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f99a:	4798      	blx	r3
    f99c:	4a2b      	ldr	r2, [pc, #172]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f99e:	4931      	ldr	r1, [pc, #196]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9a0:	482e      	ldr	r0, [pc, #184]	; (fa5c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f9a2:	4b2c      	ldr	r3, [pc, #176]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9a4:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f9a6:	4930      	ldr	r1, [pc, #192]	; (fa68 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f9a8:	4830      	ldr	r0, [pc, #192]	; (fa6c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f9aa:	4b2d      	ldr	r3, [pc, #180]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9ac:	4798      	blx	r3
    f9ae:	4a27      	ldr	r2, [pc, #156]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9b0:	492c      	ldr	r1, [pc, #176]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9b2:	482e      	ldr	r0, [pc, #184]	; (fa6c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f9b4:	4b27      	ldr	r3, [pc, #156]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9b6:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f9b8:	492d      	ldr	r1, [pc, #180]	; (fa70 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f9ba:	482e      	ldr	r0, [pc, #184]	; (fa74 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f9bc:	4b28      	ldr	r3, [pc, #160]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9be:	4798      	blx	r3
    f9c0:	4a22      	ldr	r2, [pc, #136]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9c2:	4928      	ldr	r1, [pc, #160]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9c4:	482b      	ldr	r0, [pc, #172]	; (fa74 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f9c6:	4b23      	ldr	r3, [pc, #140]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9c8:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f9ca:	492b      	ldr	r1, [pc, #172]	; (fa78 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f9cc:	482b      	ldr	r0, [pc, #172]	; (fa7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f9ce:	4b24      	ldr	r3, [pc, #144]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9d0:	4798      	blx	r3
    f9d2:	4a1e      	ldr	r2, [pc, #120]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9d4:	4923      	ldr	r1, [pc, #140]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9d6:	4829      	ldr	r0, [pc, #164]	; (fa7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f9d8:	4b1e      	ldr	r3, [pc, #120]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9da:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f9dc:	4928      	ldr	r1, [pc, #160]	; (fa80 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f9de:	4829      	ldr	r0, [pc, #164]	; (fa84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f9e0:	4b1f      	ldr	r3, [pc, #124]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9e2:	4798      	blx	r3
    f9e4:	4a19      	ldr	r2, [pc, #100]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9e6:	491f      	ldr	r1, [pc, #124]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9e8:	4826      	ldr	r0, [pc, #152]	; (fa84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f9ea:	4b1a      	ldr	r3, [pc, #104]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9ec:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f9ee:	4926      	ldr	r1, [pc, #152]	; (fa88 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f9f0:	4826      	ldr	r0, [pc, #152]	; (fa8c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f9f2:	4b1b      	ldr	r3, [pc, #108]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9f4:	4798      	blx	r3
    f9f6:	4a15      	ldr	r2, [pc, #84]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9f8:	491a      	ldr	r1, [pc, #104]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9fa:	4824      	ldr	r0, [pc, #144]	; (fa8c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f9fc:	4b15      	ldr	r3, [pc, #84]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9fe:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    fa00:	4923      	ldr	r1, [pc, #140]	; (fa90 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    fa02:	4824      	ldr	r0, [pc, #144]	; (fa94 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    fa04:	4b16      	ldr	r3, [pc, #88]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    fa06:	4798      	blx	r3
    fa08:	4a10      	ldr	r2, [pc, #64]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    fa0a:	4916      	ldr	r1, [pc, #88]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    fa0c:	4821      	ldr	r0, [pc, #132]	; (fa94 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    fa0e:	4b11      	ldr	r3, [pc, #68]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    fa10:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    fa12:	4921      	ldr	r1, [pc, #132]	; (fa98 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    fa14:	4821      	ldr	r0, [pc, #132]	; (fa9c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    fa16:	4b12      	ldr	r3, [pc, #72]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    fa18:	4798      	blx	r3
    fa1a:	4a0c      	ldr	r2, [pc, #48]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    fa1c:	4911      	ldr	r1, [pc, #68]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    fa1e:	481f      	ldr	r0, [pc, #124]	; (fa9c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    fa20:	4b0c      	ldr	r3, [pc, #48]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    fa22:	4798      	blx	r3
static	CANOpen_Class canoStatic(&CAN_CCU);
    fa24:	491e      	ldr	r1, [pc, #120]	; (faa0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    fa26:	481f      	ldr	r0, [pc, #124]	; (faa4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    fa28:	4b1f      	ldr	r3, [pc, #124]	; (faa8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    fa2a:	4798      	blx	r3
    fa2c:	4a07      	ldr	r2, [pc, #28]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    fa2e:	491f      	ldr	r1, [pc, #124]	; (faac <_Z41__static_initialization_and_destruction_0ii+0x144>)
    fa30:	481c      	ldr	r0, [pc, #112]	; (faa4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    fa32:	4b08      	ldr	r3, [pc, #32]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    fa34:	4798      	blx	r3
}
    fa36:	bf00      	nop
    fa38:	3708      	adds	r7, #8
    fa3a:	46bd      	mov	sp, r7
    fa3c:	bd80      	pop	{r7, pc}
    fa3e:	bf00      	nop
    fa40:	2000e088 	.word	0x2000e088
    fa44:	20002b44 	.word	0x20002b44
    fa48:	0000fcb5 	.word	0x0000fcb5
    fa4c:	20000000 	.word	0x20000000
    fa50:	0000fcd1 	.word	0x0000fcd1
    fa54:	0001ab61 	.word	0x0001ab61
    fa58:	2000df58 	.word	0x2000df58
    fa5c:	20002b5c 	.word	0x20002b5c
    fa60:	000104e5 	.word	0x000104e5
    fa64:	0001051d 	.word	0x0001051d
    fa68:	2000dfec 	.word	0x2000dfec
    fa6c:	20002b7c 	.word	0x20002b7c
    fa70:	2000e110 	.word	0x2000e110
    fa74:	20002b9c 	.word	0x20002b9c
    fa78:	2000e00c 	.word	0x2000e00c
    fa7c:	20002bbc 	.word	0x20002bbc
    fa80:	2000e0d0 	.word	0x2000e0d0
    fa84:	20002bdc 	.word	0x20002bdc
    fa88:	2000e0f0 	.word	0x2000e0f0
    fa8c:	20002bfc 	.word	0x20002bfc
    fa90:	2000dfc8 	.word	0x2000dfc8
    fa94:	20002c1c 	.word	0x20002c1c
    fa98:	2000e068 	.word	0x2000e068
    fa9c:	20002c3c 	.word	0x20002c3c
    faa0:	2000e0a8 	.word	0x2000e0a8
    faa4:	20002c5c 	.word	0x20002c5c
    faa8:	00015205 	.word	0x00015205
    faac:	00015241 	.word	0x00015241

0000fab0 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
    fab0:	b580      	push	{r7, lr}
    fab2:	af00      	add	r7, sp, #0
    fab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fab8:	2001      	movs	r0, #1
    faba:	4b01      	ldr	r3, [pc, #4]	; (fac0 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0x10>)
    fabc:	4798      	blx	r3
    fabe:	bd80      	pop	{r7, pc}
    fac0:	0000f969 	.word	0x0000f969

0000fac4 <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
    fac4:	b510      	push	{r4, lr}
    fac6:	4604      	mov	r4, r0
    fac8:	4b01      	ldr	r3, [pc, #4]	; (fad0 <_ZN15HEATERS_HANDLERD1Ev+0xc>)
    faca:	4798      	blx	r3
{
} //~HEATERS_HANDLER
    facc:	4620      	mov	r0, r4
    face:	bd10      	pop	{r4, pc}
    fad0:	000144d9 	.word	0x000144d9

0000fad4 <_ZL20Heater_2_Has_Changedv>:
{
    fad4:	b510      	push	{r4, lr}
	heaters.module[1]->ReadGPIOs(local_gpios_buffer);
    fad6:	4c06      	ldr	r4, [pc, #24]	; (faf0 <_ZL20Heater_2_Has_Changedv+0x1c>)
    fad8:	4621      	mov	r1, r4
    fada:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fadc:	4b05      	ldr	r3, [pc, #20]	; (faf4 <_ZL20Heater_2_Has_Changedv+0x20>)
    fade:	4798      	blx	r3
	logger.SaveEventGPIOValue("Heater 2 , gpios = ",local_gpios_buffer,SINGLE_HEATER_EXPANDERS);
    fae0:	2302      	movs	r3, #2
    fae2:	4622      	mov	r2, r4
    fae4:	4904      	ldr	r1, [pc, #16]	; (faf8 <_ZL20Heater_2_Has_Changedv+0x24>)
    fae6:	4805      	ldr	r0, [pc, #20]	; (fafc <_ZL20Heater_2_Has_Changedv+0x28>)
    fae8:	4c05      	ldr	r4, [pc, #20]	; (fb00 <_ZL20Heater_2_Has_Changedv+0x2c>)
    faea:	47a0      	blx	r4
    faec:	bd10      	pop	{r4, pc}
    faee:	bf00      	nop
    faf0:	20002df0 	.word	0x20002df0
    faf4:	00014689 	.word	0x00014689
    faf8:	0001ba78 	.word	0x0001ba78
    fafc:	20003a78 	.word	0x20003a78
    fb00:	00011fad 	.word	0x00011fad

0000fb04 <_ZL20Heater_1_Has_Changedv>:
{
    fb04:	b510      	push	{r4, lr}
	heaters.module[0]->ReadGPIOs(local_gpios_buffer);
    fb06:	4c06      	ldr	r4, [pc, #24]	; (fb20 <_ZL20Heater_1_Has_Changedv+0x1c>)
    fb08:	4621      	mov	r1, r4
    fb0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fb0c:	4b05      	ldr	r3, [pc, #20]	; (fb24 <_ZL20Heater_1_Has_Changedv+0x20>)
    fb0e:	4798      	blx	r3
	logger.SaveEventGPIOValue("Heater 1 , gpios =  ",local_gpios_buffer,SINGLE_HEATER_EXPANDERS);
    fb10:	2302      	movs	r3, #2
    fb12:	4622      	mov	r2, r4
    fb14:	4904      	ldr	r1, [pc, #16]	; (fb28 <_ZL20Heater_1_Has_Changedv+0x24>)
    fb16:	4805      	ldr	r0, [pc, #20]	; (fb2c <_ZL20Heater_1_Has_Changedv+0x28>)
    fb18:	4c05      	ldr	r4, [pc, #20]	; (fb30 <_ZL20Heater_1_Has_Changedv+0x2c>)
    fb1a:	47a0      	blx	r4
    fb1c:	bd10      	pop	{r4, pc}
    fb1e:	bf00      	nop
    fb20:	20002df0 	.word	0x20002df0
    fb24:	00014689 	.word	0x00014689
    fb28:	0001ba8c 	.word	0x0001ba8c
    fb2c:	20003a78 	.word	0x20003a78
    fb30:	00011fad 	.word	0x00011fad

0000fb34 <__tcf_1>:
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    fb34:	b570      	push	{r4, r5, r6, lr}
    fb36:	4c05      	ldr	r4, [pc, #20]	; (fb4c <__tcf_1+0x18>)
    fb38:	4e05      	ldr	r6, [pc, #20]	; (fb50 <__tcf_1+0x1c>)
    fb3a:	f1a4 0570 	sub.w	r5, r4, #112	; 0x70
    fb3e:	3c1c      	subs	r4, #28
    fb40:	4620      	mov	r0, r4
    fb42:	47b0      	blx	r6
    fb44:	42ac      	cmp	r4, r5
    fb46:	d1fa      	bne.n	fb3e <__tcf_1+0xa>
    fb48:	bd70      	pop	{r4, r5, r6, pc}
    fb4a:	bf00      	nop
    fb4c:	20002e9c 	.word	0x20002e9c
    fb50:	0000fe85 	.word	0x0000fe85

0000fb54 <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    fb54:	b510      	push	{r4, lr}
    fb56:	4803      	ldr	r0, [pc, #12]	; (fb64 <__tcf_0+0x10>)
    fb58:	4c03      	ldr	r4, [pc, #12]	; (fb68 <__tcf_0+0x14>)
    fb5a:	47a0      	blx	r4
    fb5c:	4803      	ldr	r0, [pc, #12]	; (fb6c <__tcf_0+0x18>)
    fb5e:	47a0      	blx	r4
    fb60:	bd10      	pop	{r4, pc}
    fb62:	bf00      	nop
    fb64:	20002ec0 	.word	0x20002ec0
    fb68:	000144d9 	.word	0x000144d9
    fb6c:	20002e9c 	.word	0x20002e9c

0000fb70 <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
    fb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb72:	4604      	mov	r4, r0

	//InitHeaterExpanders();

	heater_expanders=local_heater_expanders;
    fb74:	4b1b      	ldr	r3, [pc, #108]	; (fbe4 <_ZN15HEATERS_HANDLER4InitEv+0x74>)
    fb76:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    fb7a:	6302      	str	r2, [r0, #48]	; 0x30
	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
    fb7c:	33ac      	adds	r3, #172	; 0xac
    fb7e:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i,heater_expanders))
    fb80:	4d19      	ldr	r5, [pc, #100]	; (fbe8 <_ZN15HEATERS_HANDLER4InitEv+0x78>)
		{
			delay_ms(200);
    fb82:	4f1a      	ldr	r7, [pc, #104]	; (fbec <_ZN15HEATERS_HANDLER4InitEv+0x7c>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    fb84:	4e1a      	ldr	r6, [pc, #104]	; (fbf0 <_ZN15HEATERS_HANDLER4InitEv+0x80>)
		while (!module[i]->Init(i,heater_expanders))
    fb86:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fb88:	2100      	movs	r1, #0
    fb8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    fb8c:	47a8      	blx	r5
    fb8e:	b930      	cbnz	r0, fb9e <_ZN15HEATERS_HANDLER4InitEv+0x2e>
			delay_ms(200);
    fb90:	20c8      	movs	r0, #200	; 0xc8
    fb92:	47b8      	blx	r7
    fb94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fb98:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    fb9c:	e7f3      	b.n	fb86 <_ZN15HEATERS_HANDLER4InitEv+0x16>
		module[i]=&local_heaters[i];
    fb9e:	4b15      	ldr	r3, [pc, #84]	; (fbf4 <_ZN15HEATERS_HANDLER4InitEv+0x84>)
    fba0:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i,heater_expanders))
    fba2:	4d11      	ldr	r5, [pc, #68]	; (fbe8 <_ZN15HEATERS_HANDLER4InitEv+0x78>)
			delay_ms(200);
    fba4:	4f11      	ldr	r7, [pc, #68]	; (fbec <_ZN15HEATERS_HANDLER4InitEv+0x7c>)
    fba6:	4e12      	ldr	r6, [pc, #72]	; (fbf0 <_ZN15HEATERS_HANDLER4InitEv+0x80>)
		while (!module[i]->Init(i,heater_expanders))
    fba8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fbaa:	2101      	movs	r1, #1
    fbac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fbae:	47a8      	blx	r5
    fbb0:	b930      	cbnz	r0, fbc0 <_ZN15HEATERS_HANDLER4InitEv+0x50>
			delay_ms(200);
    fbb2:	20c8      	movs	r0, #200	; 0xc8
    fbb4:	47b8      	blx	r7
    fbb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fbba:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    fbbe:	e7f3      	b.n	fba8 <_ZN15HEATERS_HANDLER4InitEv+0x38>
			gpio_toggle_pin_level(LED0);
			
		}
		
	}
	ext_irq_register(PIN_PA03, Heater_1_Has_Changed);
    fbc0:	490d      	ldr	r1, [pc, #52]	; (fbf8 <_ZN15HEATERS_HANDLER4InitEv+0x88>)
    fbc2:	2003      	movs	r0, #3
    fbc4:	4d0d      	ldr	r5, [pc, #52]	; (fbfc <_ZN15HEATERS_HANDLER4InitEv+0x8c>)
    fbc6:	47a8      	blx	r5
	ext_irq_register(PIN_PC10, Heater_2_Has_Changed);
    fbc8:	490d      	ldr	r1, [pc, #52]	; (fc00 <_ZN15HEATERS_HANDLER4InitEv+0x90>)
    fbca:	204a      	movs	r0, #74	; 0x4a
    fbcc:	47a8      	blx	r5
	
	isOK=(module[0]->isOK)&(module[1]->isOK);
    fbce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fbd0:	781a      	ldrb	r2, [r3, #0]
    fbd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fbd4:	781b      	ldrb	r3, [r3, #0]
    fbd6:	4013      	ands	r3, r2
    fbd8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
    fbdc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
    fbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbe2:	bf00      	nop
    fbe4:	20002df0 	.word	0x20002df0
    fbe8:	000144ed 	.word	0x000144ed
    fbec:	000036c9 	.word	0x000036c9
    fbf0:	41008000 	.word	0x41008000
    fbf4:	20002ec0 	.word	0x20002ec0
    fbf8:	0000fb05 	.word	0x0000fb05
    fbfc:	0000375d 	.word	0x0000375d
    fc00:	0000fad5 	.word	0x0000fad5

0000fc04 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh>:
			heater_expanders=&local_heater_expanders[2*i+j];
		}
	}
}

void	HEATERS_HANDLER::ReadAllGPIOs(uint8_t *buffer){
    fc04:	b570      	push	{r4, r5, r6, lr}
    fc06:	4605      	mov	r5, r0
    fc08:	460e      	mov	r6, r1
	for (uint8_t i = 0; i < 2; i++)
	{
	//	heater_data_array[i]=local_heater_expanders[i].ReadGPIORegister();
		module[i]->ReadGPIOs(&buffer[i*2]);
    fc0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    fc0c:	4c02      	ldr	r4, [pc, #8]	; (fc18 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh+0x14>)
    fc0e:	47a0      	blx	r4
    fc10:	1cb1      	adds	r1, r6, #2
    fc12:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    fc14:	47a0      	blx	r4
    fc16:	bd70      	pop	{r4, r5, r6, pc}
    fc18:	00014689 	.word	0x00014689

0000fc1c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
		//heater_data_array=buffer;
	}
	
}
    fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fc1e:	4c19      	ldr	r4, [pc, #100]	; (fc84 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
    fc20:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
    fc24:	4918      	ldr	r1, [pc, #96]	; (fc88 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x6c>)
    fc26:	4628      	mov	r0, r5
    fc28:	4b18      	ldr	r3, [pc, #96]	; (fc8c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x70>)
    fc2a:	4798      	blx	r3
    fc2c:	4e18      	ldr	r6, [pc, #96]	; (fc90 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x74>)
    fc2e:	4632      	mov	r2, r6
    fc30:	4918      	ldr	r1, [pc, #96]	; (fc94 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x78>)
    fc32:	4628      	mov	r0, r5
    fc34:	4d18      	ldr	r5, [pc, #96]	; (fc98 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x7c>)
    fc36:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    fc38:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    fc3c:	4f17      	ldr	r7, [pc, #92]	; (fc9c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x80>)
    fc3e:	47b8      	blx	r7
    fc40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    fc44:	47b8      	blx	r7
    fc46:	4632      	mov	r2, r6
    fc48:	4915      	ldr	r1, [pc, #84]	; (fca0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x84>)
    fc4a:	2000      	movs	r0, #0
    fc4c:	47a8      	blx	r5
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    fc4e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    fc52:	4f14      	ldr	r7, [pc, #80]	; (fca4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x88>)
    fc54:	47b8      	blx	r7
    fc56:	f104 0058 	add.w	r0, r4, #88	; 0x58
    fc5a:	47b8      	blx	r7
    fc5c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    fc60:	47b8      	blx	r7
    fc62:	f104 0090 	add.w	r0, r4, #144	; 0x90
    fc66:	47b8      	blx	r7
    fc68:	4632      	mov	r2, r6
    fc6a:	490f      	ldr	r1, [pc, #60]	; (fca8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x8c>)
    fc6c:	2000      	movs	r0, #0
    fc6e:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
    fc70:	3404      	adds	r4, #4
    fc72:	4620      	mov	r0, r4
    fc74:	4b0d      	ldr	r3, [pc, #52]	; (fcac <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x90>)
    fc76:	4798      	blx	r3
    fc78:	4632      	mov	r2, r6
    fc7a:	490d      	ldr	r1, [pc, #52]	; (fcb0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x94>)
    fc7c:	4620      	mov	r0, r4
    fc7e:	47a8      	blx	r5
    fc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc82:	bf00      	nop
    fc84:	20002df0 	.word	0x20002df0
    fc88:	2000e088 	.word	0x2000e088
    fc8c:	0000fcb5 	.word	0x0000fcb5
    fc90:	20000000 	.word	0x20000000
    fc94:	0000fcd1 	.word	0x0000fcd1
    fc98:	0001ab61 	.word	0x0001ab61
    fc9c:	000144a9 	.word	0x000144a9
    fca0:	0000fb55 	.word	0x0000fb55
    fca4:	0000fe71 	.word	0x0000fe71
    fca8:	0000fb35 	.word	0x0000fb35
    fcac:	000144a9 	.word	0x000144a9
    fcb0:	0000fac5 	.word	0x0000fac5

0000fcb4 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    fcb4:	b480      	push	{r7}
    fcb6:	b083      	sub	sp, #12
    fcb8:	af00      	add	r7, sp, #0
    fcba:	6078      	str	r0, [r7, #4]
    fcbc:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    fcbe:	687b      	ldr	r3, [r7, #4]
    fcc0:	683a      	ldr	r2, [r7, #0]
    fcc2:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    fcc4:	687b      	ldr	r3, [r7, #4]
    fcc6:	4618      	mov	r0, r3
    fcc8:	370c      	adds	r7, #12
    fcca:	46bd      	mov	sp, r7
    fccc:	bc80      	pop	{r7}
    fcce:	4770      	bx	lr

0000fcd0 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    fcd0:	b480      	push	{r7}
    fcd2:	b083      	sub	sp, #12
    fcd4:	af00      	add	r7, sp, #0
    fcd6:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    fcd8:	687b      	ldr	r3, [r7, #4]
    fcda:	4618      	mov	r0, r3
    fcdc:	370c      	adds	r7, #12
    fcde:	46bd      	mov	sp, r7
    fce0:	bc80      	pop	{r7}
    fce2:	4770      	bx	lr

0000fce4 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    fce4:	b580      	push	{r7, lr}
    fce6:	b082      	sub	sp, #8
    fce8:	af00      	add	r7, sp, #0
    fcea:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    fcec:	687b      	ldr	r3, [r7, #4]
    fcee:	4a23      	ldr	r2, [pc, #140]	; (fd7c <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fcf0:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    fcf2:	687b      	ldr	r3, [r7, #4]
    fcf4:	4a21      	ldr	r2, [pc, #132]	; (fd7c <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fcf6:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    fcf8:	687b      	ldr	r3, [r7, #4]
    fcfa:	691a      	ldr	r2, [r3, #16]
    fcfc:	687b      	ldr	r3, [r7, #4]
    fcfe:	330c      	adds	r3, #12
    fd00:	4619      	mov	r1, r3
    fd02:	4610      	mov	r0, r2
    fd04:	4b1e      	ldr	r3, [pc, #120]	; (fd80 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    fd06:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fd08:	687b      	ldr	r3, [r7, #4]
    fd0a:	691b      	ldr	r3, [r3, #16]
    fd0c:	4618      	mov	r0, r3
    fd0e:	4b1d      	ldr	r3, [pc, #116]	; (fd84 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fd10:	4798      	blx	r3
    fd12:	4603      	mov	r3, r0
    fd14:	b2da      	uxtb	r2, r3
    fd16:	687b      	ldr	r3, [r7, #4]
    fd18:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    fd1a:	687b      	ldr	r3, [r7, #4]
    fd1c:	7d1b      	ldrb	r3, [r3, #20]
    fd1e:	2b00      	cmp	r3, #0
    fd20:	bf0c      	ite	eq
    fd22:	2301      	moveq	r3, #1
    fd24:	2300      	movne	r3, #0
    fd26:	b2da      	uxtb	r2, r3
    fd28:	687b      	ldr	r3, [r7, #4]
    fd2a:	725a      	strb	r2, [r3, #9]
	if (isOK)
    fd2c:	687b      	ldr	r3, [r7, #4]
    fd2e:	7a5b      	ldrb	r3, [r3, #9]
    fd30:	b2db      	uxtb	r3, r3
    fd32:	2b00      	cmp	r3, #0
    fd34:	d116      	bne.n	fd64 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    fd36:	687b      	ldr	r3, [r7, #4]
    fd38:	691b      	ldr	r3, [r3, #16]
    fd3a:	4618      	mov	r0, r3
    fd3c:	4b12      	ldr	r3, [pc, #72]	; (fd88 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    fd3e:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	691b      	ldr	r3, [r3, #16]
    fd44:	4618      	mov	r0, r3
    fd46:	4b0f      	ldr	r3, [pc, #60]	; (fd84 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fd48:	4798      	blx	r3
    fd4a:	4603      	mov	r3, r0
    fd4c:	b2da      	uxtb	r2, r3
    fd4e:	687b      	ldr	r3, [r7, #4]
    fd50:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    fd52:	687b      	ldr	r3, [r7, #4]
    fd54:	7d1b      	ldrb	r3, [r3, #20]
    fd56:	2b00      	cmp	r3, #0
    fd58:	bf0c      	ite	eq
    fd5a:	2301      	moveq	r3, #1
    fd5c:	2300      	movne	r3, #0
    fd5e:	b2da      	uxtb	r2, r3
    fd60:	687b      	ldr	r3, [r7, #4]
    fd62:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    fd64:	687b      	ldr	r3, [r7, #4]
    fd66:	7a5b      	ldrb	r3, [r3, #9]
    fd68:	b2da      	uxtb	r2, r3
    fd6a:	687b      	ldr	r3, [r7, #4]
    fd6c:	721a      	strb	r2, [r3, #8]
	return isOK;
    fd6e:	687b      	ldr	r3, [r7, #4]
    fd70:	7a5b      	ldrb	r3, [r3, #9]
    fd72:	b2db      	uxtb	r3, r3
	
}
    fd74:	4618      	mov	r0, r3
    fd76:	3708      	adds	r7, #8
    fd78:	46bd      	mov	sp, r7
    fd7a:	bd80      	pop	{r7, pc}
    fd7c:	20002f14 	.word	0x20002f14
    fd80:	00003ab3 	.word	0x00003ab3
    fd84:	00003a39 	.word	0x00003a39
    fd88:	00003a59 	.word	0x00003a59

0000fd8c <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    fd8c:	b580      	push	{r7, lr}
    fd8e:	b082      	sub	sp, #8
    fd90:	af00      	add	r7, sp, #0
    fd92:	6078      	str	r0, [r7, #4]
    fd94:	460b      	mov	r3, r1
    fd96:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    fd98:	687b      	ldr	r3, [r7, #4]
    fd9a:	691b      	ldr	r3, [r3, #16]
    fd9c:	78fa      	ldrb	r2, [r7, #3]
    fd9e:	b211      	sxth	r1, r2
    fda0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fda4:	4618      	mov	r0, r3
    fda6:	4b03      	ldr	r3, [pc, #12]	; (fdb4 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    fda8:	4798      	blx	r3
    fdaa:	4603      	mov	r3, r0
}
    fdac:	4618      	mov	r0, r3
    fdae:	3708      	adds	r7, #8
    fdb0:	46bd      	mov	sp, r7
    fdb2:	bd80      	pop	{r7, pc}
    fdb4:	00003a79 	.word	0x00003a79

0000fdb8 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    fdb8:	b580      	push	{r7, lr}
    fdba:	b086      	sub	sp, #24
    fdbc:	af00      	add	r7, sp, #0
    fdbe:	60f8      	str	r0, [r7, #12]
    fdc0:	60b9      	str	r1, [r7, #8]
    fdc2:	4613      	mov	r3, r2
    fdc4:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    fdc6:	68fb      	ldr	r3, [r7, #12]
    fdc8:	68db      	ldr	r3, [r3, #12]
    fdca:	88fa      	ldrh	r2, [r7, #6]
    fdcc:	68b9      	ldr	r1, [r7, #8]
    fdce:	4618      	mov	r0, r3
    fdd0:	4b03      	ldr	r3, [pc, #12]	; (fde0 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    fdd2:	4798      	blx	r3
    fdd4:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    fdd6:	697b      	ldr	r3, [r7, #20]
}
    fdd8:	4618      	mov	r0, r3
    fdda:	3718      	adds	r7, #24
    fddc:	46bd      	mov	sp, r7
    fdde:	bd80      	pop	{r7, pc}
    fde0:	000189b5 	.word	0x000189b5

0000fde4 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    fde4:	b580      	push	{r7, lr}
    fde6:	b086      	sub	sp, #24
    fde8:	af00      	add	r7, sp, #0
    fdea:	60f8      	str	r0, [r7, #12]
    fdec:	60b9      	str	r1, [r7, #8]
    fdee:	4613      	mov	r3, r2
    fdf0:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    fdf2:	68fb      	ldr	r3, [r7, #12]
    fdf4:	68db      	ldr	r3, [r3, #12]
    fdf6:	88fa      	ldrh	r2, [r7, #6]
    fdf8:	68b9      	ldr	r1, [r7, #8]
    fdfa:	4618      	mov	r0, r3
    fdfc:	4b03      	ldr	r3, [pc, #12]	; (fe0c <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    fdfe:	4798      	blx	r3
    fe00:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    fe02:	697b      	ldr	r3, [r7, #20]
}
    fe04:	4618      	mov	r0, r3
    fe06:	3718      	adds	r7, #24
    fe08:	46bd      	mov	sp, r7
    fe0a:	bd80      	pop	{r7, pc}
    fe0c:	00018a05 	.word	0x00018a05

0000fe10 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    fe10:	b580      	push	{r7, lr}
    fe12:	b082      	sub	sp, #8
    fe14:	af00      	add	r7, sp, #0
    fe16:	6078      	str	r0, [r7, #4]
    fe18:	6039      	str	r1, [r7, #0]
    fe1a:	687b      	ldr	r3, [r7, #4]
    fe1c:	2b01      	cmp	r3, #1
    fe1e:	d10d      	bne.n	fe3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fe20:	683b      	ldr	r3, [r7, #0]
    fe22:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fe26:	4293      	cmp	r3, r2
    fe28:	d108      	bne.n	fe3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fe2a:	4906      	ldr	r1, [pc, #24]	; (fe44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    fe2c:	4806      	ldr	r0, [pc, #24]	; (fe48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fe2e:	4b07      	ldr	r3, [pc, #28]	; (fe4c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    fe30:	4798      	blx	r3
    fe32:	4a07      	ldr	r2, [pc, #28]	; (fe50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    fe34:	4907      	ldr	r1, [pc, #28]	; (fe54 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fe36:	4804      	ldr	r0, [pc, #16]	; (fe48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fe38:	4b07      	ldr	r3, [pc, #28]	; (fe58 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fe3a:	4798      	blx	r3
    fe3c:	bf00      	nop
    fe3e:	3708      	adds	r7, #8
    fe40:	46bd      	mov	sp, r7
    fe42:	bd80      	pop	{r7, pc}
    fe44:	2000e088 	.word	0x2000e088
    fe48:	20002efc 	.word	0x20002efc
    fe4c:	0000fcb5 	.word	0x0000fcb5
    fe50:	20000000 	.word	0x20000000
    fe54:	0000fcd1 	.word	0x0000fcd1
    fe58:	0001ab61 	.word	0x0001ab61

0000fe5c <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    fe5c:	b580      	push	{r7, lr}
    fe5e:	af00      	add	r7, sp, #0
    fe60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fe64:	2001      	movs	r0, #1
    fe66:	4b01      	ldr	r3, [pc, #4]	; (fe6c <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    fe68:	4798      	blx	r3
    fe6a:	bd80      	pop	{r7, pc}
    fe6c:	0000fe11 	.word	0x0000fe11

0000fe70 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    fe70:	b480      	push	{r7}
    fe72:	b083      	sub	sp, #12
    fe74:	af00      	add	r7, sp, #0
    fe76:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    fe78:	687b      	ldr	r3, [r7, #4]
    fe7a:	4618      	mov	r0, r3
    fe7c:	370c      	adds	r7, #12
    fe7e:	46bd      	mov	sp, r7
    fe80:	bc80      	pop	{r7}
    fe82:	4770      	bx	lr

0000fe84 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    fe84:	b480      	push	{r7}
    fe86:	b083      	sub	sp, #12
    fe88:	af00      	add	r7, sp, #0
    fe8a:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	4618      	mov	r0, r3
    fe90:	370c      	adds	r7, #12
    fe92:	46bd      	mov	sp, r7
    fe94:	bc80      	pop	{r7}
    fe96:	4770      	bx	lr

0000fe98 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    fe98:	b480      	push	{r7}
    fe9a:	b085      	sub	sp, #20
    fe9c:	af00      	add	r7, sp, #0
    fe9e:	60f8      	str	r0, [r7, #12]
    fea0:	460b      	mov	r3, r1
    fea2:	607a      	str	r2, [r7, #4]
    fea4:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    fea6:	687b      	ldr	r3, [r7, #4]
    fea8:	681a      	ldr	r2, [r3, #0]
    feaa:	68fb      	ldr	r3, [r7, #12]
    feac:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    feae:	687b      	ldr	r3, [r7, #4]
    feb0:	685a      	ldr	r2, [r3, #4]
    feb2:	68fb      	ldr	r3, [r7, #12]
    feb4:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    feb6:	68fb      	ldr	r3, [r7, #12]
    feb8:	7afa      	ldrb	r2, [r7, #11]
    feba:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    febc:	68fb      	ldr	r3, [r7, #12]
    febe:	687a      	ldr	r2, [r7, #4]
    fec0:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    fec2:	68fb      	ldr	r3, [r7, #12]
    fec4:	68db      	ldr	r3, [r3, #12]
    fec6:	7a5b      	ldrb	r3, [r3, #9]
    fec8:	b2da      	uxtb	r2, r3
    feca:	68fb      	ldr	r3, [r7, #12]
    fecc:	719a      	strb	r2, [r3, #6]
	return isOK;
    fece:	68fb      	ldr	r3, [r7, #12]
    fed0:	799b      	ldrb	r3, [r3, #6]
    fed2:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    fed4:	4618      	mov	r0, r3
    fed6:	3714      	adds	r7, #20
    fed8:	46bd      	mov	sp, r7
    feda:	bc80      	pop	{r7}
    fedc:	4770      	bx	lr

0000fede <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    fede:	b480      	push	{r7}
    fee0:	b083      	sub	sp, #12
    fee2:	af00      	add	r7, sp, #0
    fee4:	6078      	str	r0, [r7, #4]
    fee6:	460b      	mov	r3, r1
    fee8:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    feea:	78fb      	ldrb	r3, [r7, #3]
    feec:	f003 0307 	and.w	r3, r3, #7
    fef0:	b2db      	uxtb	r3, r3
}
    fef2:	4618      	mov	r0, r3
    fef4:	370c      	adds	r7, #12
    fef6:	46bd      	mov	sp, r7
    fef8:	bc80      	pop	{r7}
    fefa:	4770      	bx	lr

0000fefc <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    fefc:	b480      	push	{r7}
    fefe:	b083      	sub	sp, #12
    ff00:	af00      	add	r7, sp, #0
    ff02:	6078      	str	r0, [r7, #4]
    ff04:	4608      	mov	r0, r1
    ff06:	4611      	mov	r1, r2
    ff08:	461a      	mov	r2, r3
    ff0a:	4603      	mov	r3, r0
    ff0c:	70fb      	strb	r3, [r7, #3]
    ff0e:	460b      	mov	r3, r1
    ff10:	70bb      	strb	r3, [r7, #2]
    ff12:	4613      	mov	r3, r2
    ff14:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    ff16:	78fb      	ldrb	r3, [r7, #3]
    ff18:	2b07      	cmp	r3, #7
    ff1a:	dc01      	bgt.n	ff20 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    ff1c:	78bb      	ldrb	r3, [r7, #2]
    ff1e:	e000      	b.n	ff22 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    ff20:	787b      	ldrb	r3, [r7, #1]
}
    ff22:	4618      	mov	r0, r3
    ff24:	370c      	adds	r7, #12
    ff26:	46bd      	mov	sp, r7
    ff28:	bc80      	pop	{r7}
    ff2a:	4770      	bx	lr

0000ff2c <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    ff2c:	b580      	push	{r7, lr}
    ff2e:	b082      	sub	sp, #8
    ff30:	af00      	add	r7, sp, #0
    ff32:	6078      	str	r0, [r7, #4]
    ff34:	460b      	mov	r3, r1
    ff36:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    ff38:	687b      	ldr	r3, [r7, #4]
    ff3a:	68da      	ldr	r2, [r3, #12]
    ff3c:	687b      	ldr	r3, [r7, #4]
    ff3e:	7a1b      	ldrb	r3, [r3, #8]
    ff40:	4619      	mov	r1, r3
    ff42:	4610      	mov	r0, r2
    ff44:	4b0a      	ldr	r3, [pc, #40]	; (ff70 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    ff46:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    ff48:	687b      	ldr	r3, [r7, #4]
    ff4a:	68db      	ldr	r3, [r3, #12]
    ff4c:	1cf9      	adds	r1, r7, #3
    ff4e:	2201      	movs	r2, #1
    ff50:	4618      	mov	r0, r3
    ff52:	4b08      	ldr	r3, [pc, #32]	; (ff74 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    ff54:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    ff56:	687b      	ldr	r3, [r7, #4]
    ff58:	68db      	ldr	r3, [r3, #12]
    ff5a:	6879      	ldr	r1, [r7, #4]
    ff5c:	2201      	movs	r2, #1
    ff5e:	4618      	mov	r0, r3
    ff60:	4b05      	ldr	r3, [pc, #20]	; (ff78 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    ff62:	4798      	blx	r3

	return registerValue;
    ff64:	687b      	ldr	r3, [r7, #4]
    ff66:	781b      	ldrb	r3, [r3, #0]
}
    ff68:	4618      	mov	r0, r3
    ff6a:	3708      	adds	r7, #8
    ff6c:	46bd      	mov	sp, r7
    ff6e:	bd80      	pop	{r7, pc}
    ff70:	0000fd8d 	.word	0x0000fd8d
    ff74:	0000fdb9 	.word	0x0000fdb9
    ff78:	0000fde5 	.word	0x0000fde5

0000ff7c <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    ff7c:	b580      	push	{r7, lr}
    ff7e:	b084      	sub	sp, #16
    ff80:	af00      	add	r7, sp, #0
    ff82:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    ff84:	687b      	ldr	r3, [r7, #4]
    ff86:	68da      	ldr	r2, [r3, #12]
    ff88:	687b      	ldr	r3, [r7, #4]
    ff8a:	7a1b      	ldrb	r3, [r3, #8]
    ff8c:	4619      	mov	r1, r3
    ff8e:	4610      	mov	r0, r2
    ff90:	4b06      	ldr	r3, [pc, #24]	; (ffac <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    ff92:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    ff94:	2109      	movs	r1, #9
    ff96:	6878      	ldr	r0, [r7, #4]
    ff98:	4b05      	ldr	r3, [pc, #20]	; (ffb0 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    ff9a:	4798      	blx	r3
    ff9c:	4603      	mov	r3, r0
    ff9e:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    ffa0:	7bfb      	ldrb	r3, [r7, #15]
}
    ffa2:	4618      	mov	r0, r3
    ffa4:	3710      	adds	r7, #16
    ffa6:	46bd      	mov	sp, r7
    ffa8:	bd80      	pop	{r7, pc}
    ffaa:	bf00      	nop
    ffac:	0000fd8d 	.word	0x0000fd8d
    ffb0:	0000ff2d 	.word	0x0000ff2d

0000ffb4 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    ffb4:	b580      	push	{r7, lr}
    ffb6:	b084      	sub	sp, #16
    ffb8:	af00      	add	r7, sp, #0
    ffba:	6078      	str	r0, [r7, #4]
    ffbc:	460b      	mov	r3, r1
    ffbe:	70fb      	strb	r3, [r7, #3]
    ffc0:	4613      	mov	r3, r2
    ffc2:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    ffc4:	687b      	ldr	r3, [r7, #4]
    ffc6:	68da      	ldr	r2, [r3, #12]
    ffc8:	687b      	ldr	r3, [r7, #4]
    ffca:	7a1b      	ldrb	r3, [r3, #8]
    ffcc:	4619      	mov	r1, r3
    ffce:	4610      	mov	r0, r2
    ffd0:	4b09      	ldr	r3, [pc, #36]	; (fff8 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    ffd2:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    ffd4:	78fb      	ldrb	r3, [r7, #3]
    ffd6:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    ffd8:	78bb      	ldrb	r3, [r7, #2]
    ffda:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    ffdc:	687b      	ldr	r3, [r7, #4]
    ffde:	68db      	ldr	r3, [r3, #12]
    ffe0:	f107 010c 	add.w	r1, r7, #12
    ffe4:	2202      	movs	r2, #2
    ffe6:	4618      	mov	r0, r3
    ffe8:	4b04      	ldr	r3, [pc, #16]	; (fffc <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    ffea:	4798      	blx	r3
    ffec:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    ffee:	4618      	mov	r0, r3
    fff0:	3710      	adds	r7, #16
    fff2:	46bd      	mov	sp, r7
    fff4:	bd80      	pop	{r7, pc}
    fff6:	bf00      	nop
    fff8:	0000fd8d 	.word	0x0000fd8d
    fffc:	0000fdb9 	.word	0x0000fdb9

00010000 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   10000:	b580      	push	{r7, lr}
   10002:	b082      	sub	sp, #8
   10004:	af00      	add	r7, sp, #0
   10006:	6078      	str	r0, [r7, #4]
   10008:	460b      	mov	r3, r1
   1000a:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   1000c:	687b      	ldr	r3, [r7, #4]
   1000e:	68da      	ldr	r2, [r3, #12]
   10010:	687b      	ldr	r3, [r7, #4]
   10012:	7a1b      	ldrb	r3, [r3, #8]
   10014:	4619      	mov	r1, r3
   10016:	4610      	mov	r0, r2
   10018:	4b06      	ldr	r3, [pc, #24]	; (10034 <STACK_SIZE+0x34>)
   1001a:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   1001c:	78fb      	ldrb	r3, [r7, #3]
   1001e:	461a      	mov	r2, r3
   10020:	2109      	movs	r1, #9
   10022:	6878      	ldr	r0, [r7, #4]
   10024:	4b04      	ldr	r3, [pc, #16]	; (10038 <STACK_SIZE+0x38>)
   10026:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   10028:	78fb      	ldrb	r3, [r7, #3]
}
   1002a:	4618      	mov	r0, r3
   1002c:	3708      	adds	r7, #8
   1002e:	46bd      	mov	sp, r7
   10030:	bd80      	pop	{r7, pc}
   10032:	bf00      	nop
   10034:	0000fd8d 	.word	0x0000fd8d
   10038:	0000ffb5 	.word	0x0000ffb5

0001003c <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   1003c:	b580      	push	{r7, lr}
   1003e:	b084      	sub	sp, #16
   10040:	af00      	add	r7, sp, #0
   10042:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   10044:	2300      	movs	r3, #0
   10046:	73fb      	strb	r3, [r7, #15]
   10048:	7bfb      	ldrb	r3, [r7, #15]
   1004a:	2b07      	cmp	r3, #7
   1004c:	dc0f      	bgt.n	1006e <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   1004e:	7bfb      	ldrb	r3, [r7, #15]
   10050:	2201      	movs	r2, #1
   10052:	4619      	mov	r1, r3
   10054:	6878      	ldr	r0, [r7, #4]
   10056:	4b08      	ldr	r3, [pc, #32]	; (10078 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   10058:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   1005a:	7bfb      	ldrb	r3, [r7, #15]
   1005c:	2201      	movs	r2, #1
   1005e:	4619      	mov	r1, r3
   10060:	6878      	ldr	r0, [r7, #4]
   10062:	4b06      	ldr	r3, [pc, #24]	; (1007c <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   10064:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   10066:	7bfb      	ldrb	r3, [r7, #15]
   10068:	3301      	adds	r3, #1
   1006a:	73fb      	strb	r3, [r7, #15]
   1006c:	e7ec      	b.n	10048 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   1006e:	bf00      	nop
   10070:	3710      	adds	r7, #16
   10072:	46bd      	mov	sp, r7
   10074:	bd80      	pop	{r7, pc}
   10076:	bf00      	nop
   10078:	000101fd 	.word	0x000101fd
   1007c:	000102e1 	.word	0x000102e1

00010080 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   10080:	b580      	push	{r7, lr}
   10082:	b084      	sub	sp, #16
   10084:	af00      	add	r7, sp, #0
   10086:	6078      	str	r0, [r7, #4]
   10088:	460b      	mov	r3, r1
   1008a:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   1008c:	78fb      	ldrb	r3, [r7, #3]
   1008e:	2b00      	cmp	r3, #0
   10090:	dd23      	ble.n	100da <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   10092:	2300      	movs	r3, #0
   10094:	73fb      	strb	r3, [r7, #15]
   10096:	7bfb      	ldrb	r3, [r7, #15]
   10098:	2b07      	cmp	r3, #7
   1009a:	dc21      	bgt.n	100e0 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   1009c:	78fa      	ldrb	r2, [r7, #3]
   1009e:	7bfb      	ldrb	r3, [r7, #15]
   100a0:	fa42 f303 	asr.w	r3, r2, r3
   100a4:	f003 0301 	and.w	r3, r3, #1
   100a8:	2b00      	cmp	r3, #0
   100aa:	d00c      	beq.n	100c6 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   100ac:	7bfb      	ldrb	r3, [r7, #15]
   100ae:	2201      	movs	r2, #1
   100b0:	4619      	mov	r1, r3
   100b2:	6878      	ldr	r0, [r7, #4]
   100b4:	4b0c      	ldr	r3, [pc, #48]	; (100e8 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   100b6:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   100b8:	7bfb      	ldrb	r3, [r7, #15]
   100ba:	2201      	movs	r2, #1
   100bc:	4619      	mov	r1, r3
   100be:	6878      	ldr	r0, [r7, #4]
   100c0:	4b0a      	ldr	r3, [pc, #40]	; (100ec <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   100c2:	4798      	blx	r3
   100c4:	e005      	b.n	100d2 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   100c6:	7bfb      	ldrb	r3, [r7, #15]
   100c8:	2200      	movs	r2, #0
   100ca:	4619      	mov	r1, r3
   100cc:	6878      	ldr	r0, [r7, #4]
   100ce:	4b06      	ldr	r3, [pc, #24]	; (100e8 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   100d0:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   100d2:	7bfb      	ldrb	r3, [r7, #15]
   100d4:	3301      	adds	r3, #1
   100d6:	73fb      	strb	r3, [r7, #15]
   100d8:	e7dd      	b.n	10096 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   100da:	6878      	ldr	r0, [r7, #4]
   100dc:	4b04      	ldr	r3, [pc, #16]	; (100f0 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   100de:	4798      	blx	r3
	}
	
}
   100e0:	bf00      	nop
   100e2:	3710      	adds	r7, #16
   100e4:	46bd      	mov	sp, r7
   100e6:	bd80      	pop	{r7, pc}
   100e8:	000101fd 	.word	0x000101fd
   100ec:	000102e1 	.word	0x000102e1
   100f0:	000100f5 	.word	0x000100f5

000100f4 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   100f4:	b580      	push	{r7, lr}
   100f6:	b084      	sub	sp, #16
   100f8:	af00      	add	r7, sp, #0
   100fa:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   100fc:	2300      	movs	r3, #0
   100fe:	73fb      	strb	r3, [r7, #15]
   10100:	7bfb      	ldrb	r3, [r7, #15]
   10102:	2b07      	cmp	r3, #7
   10104:	dc09      	bgt.n	1011a <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   10106:	7bfb      	ldrb	r3, [r7, #15]
   10108:	2200      	movs	r2, #0
   1010a:	4619      	mov	r1, r3
   1010c:	6878      	ldr	r0, [r7, #4]
   1010e:	4b05      	ldr	r3, [pc, #20]	; (10124 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   10110:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   10112:	7bfb      	ldrb	r3, [r7, #15]
   10114:	3301      	adds	r3, #1
   10116:	73fb      	strb	r3, [r7, #15]
   10118:	e7f2      	b.n	10100 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   1011a:	bf00      	nop
   1011c:	3710      	adds	r7, #16
   1011e:	46bd      	mov	sp, r7
   10120:	bd80      	pop	{r7, pc}
   10122:	bf00      	nop
   10124:	000101fd 	.word	0x000101fd

00010128 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
   10128:	b580      	push	{r7, lr}
   1012a:	b084      	sub	sp, #16
   1012c:	af00      	add	r7, sp, #0
   1012e:	6078      	str	r0, [r7, #4]
   10130:	460b      	mov	r3, r1
   10132:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
   10134:	2300      	movs	r3, #0
   10136:	73fb      	strb	r3, [r7, #15]
   10138:	7bfb      	ldrb	r3, [r7, #15]
   1013a:	2b07      	cmp	r3, #7
   1013c:	dc11      	bgt.n	10162 <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
   1013e:	78fa      	ldrb	r2, [r7, #3]
   10140:	7bfb      	ldrb	r3, [r7, #15]
   10142:	fa42 f303 	asr.w	r3, r2, r3
   10146:	f003 0301 	and.w	r3, r3, #1
   1014a:	2b00      	cmp	r3, #0
   1014c:	d005      	beq.n	1015a <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
   1014e:	7bfb      	ldrb	r3, [r7, #15]
   10150:	2200      	movs	r2, #0
   10152:	4619      	mov	r1, r3
   10154:	6878      	ldr	r0, [r7, #4]
   10156:	4b05      	ldr	r3, [pc, #20]	; (1016c <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
   10158:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   1015a:	7bfb      	ldrb	r3, [r7, #15]
   1015c:	3301      	adds	r3, #1
   1015e:	73fb      	strb	r3, [r7, #15]
   10160:	e7ea      	b.n	10138 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
   10162:	bf00      	nop
   10164:	3710      	adds	r7, #16
   10166:	46bd      	mov	sp, r7
   10168:	bd80      	pop	{r7, pc}
   1016a:	bf00      	nop
   1016c:	000101fd 	.word	0x000101fd

00010170 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   10170:	b580      	push	{r7, lr}
   10172:	b084      	sub	sp, #16
   10174:	af00      	add	r7, sp, #0
   10176:	6078      	str	r0, [r7, #4]
   10178:	4608      	mov	r0, r1
   1017a:	4611      	mov	r1, r2
   1017c:	461a      	mov	r2, r3
   1017e:	4603      	mov	r3, r0
   10180:	70fb      	strb	r3, [r7, #3]
   10182:	460b      	mov	r3, r1
   10184:	70bb      	strb	r3, [r7, #2]
   10186:	4613      	mov	r3, r2
   10188:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   1018a:	787b      	ldrb	r3, [r7, #1]
   1018c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   1018e:	78fb      	ldrb	r3, [r7, #3]
   10190:	4619      	mov	r1, r3
   10192:	6878      	ldr	r0, [r7, #4]
   10194:	4b16      	ldr	r3, [pc, #88]	; (101f0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   10196:	4798      	blx	r3
   10198:	4603      	mov	r3, r0
   1019a:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   1019c:	7bfb      	ldrb	r3, [r7, #15]
   1019e:	4619      	mov	r1, r3
   101a0:	6878      	ldr	r0, [r7, #4]
   101a2:	4b14      	ldr	r3, [pc, #80]	; (101f4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   101a4:	4798      	blx	r3
   101a6:	4603      	mov	r3, r0
   101a8:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   101aa:	78bb      	ldrb	r3, [r7, #2]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d009      	beq.n	101c4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   101b0:	7bba      	ldrb	r2, [r7, #14]
   101b2:	7b7b      	ldrb	r3, [r7, #13]
   101b4:	4619      	mov	r1, r3
   101b6:	2301      	movs	r3, #1
   101b8:	408b      	lsls	r3, r1
   101ba:	b2db      	uxtb	r3, r3
   101bc:	4313      	orrs	r3, r2
   101be:	b2db      	uxtb	r3, r3
   101c0:	73bb      	strb	r3, [r7, #14]
   101c2:	e00a      	b.n	101da <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   101c4:	7bba      	ldrb	r2, [r7, #14]
   101c6:	7b7b      	ldrb	r3, [r7, #13]
   101c8:	4619      	mov	r1, r3
   101ca:	2301      	movs	r3, #1
   101cc:	408b      	lsls	r3, r1
   101ce:	b2db      	uxtb	r3, r3
   101d0:	43db      	mvns	r3, r3
   101d2:	b2db      	uxtb	r3, r3
   101d4:	4013      	ands	r3, r2
   101d6:	b2db      	uxtb	r3, r3
   101d8:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   101da:	7bba      	ldrb	r2, [r7, #14]
   101dc:	7bfb      	ldrb	r3, [r7, #15]
   101de:	4619      	mov	r1, r3
   101e0:	6878      	ldr	r0, [r7, #4]
   101e2:	4b05      	ldr	r3, [pc, #20]	; (101f8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   101e4:	4798      	blx	r3
}
   101e6:	bf00      	nop
   101e8:	3710      	adds	r7, #16
   101ea:	46bd      	mov	sp, r7
   101ec:	bd80      	pop	{r7, pc}
   101ee:	bf00      	nop
   101f0:	0000fedf 	.word	0x0000fedf
   101f4:	0000ff2d 	.word	0x0000ff2d
   101f8:	0000ffb5 	.word	0x0000ffb5

000101fc <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   101fc:	b590      	push	{r4, r7, lr}
   101fe:	b085      	sub	sp, #20
   10200:	af02      	add	r7, sp, #8
   10202:	6078      	str	r0, [r7, #4]
   10204:	460b      	mov	r3, r1
   10206:	70fb      	strb	r3, [r7, #3]
   10208:	4613      	mov	r3, r2
   1020a:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   1020c:	78bb      	ldrb	r3, [r7, #2]
   1020e:	2b01      	cmp	r3, #1
   10210:	bf0c      	ite	eq
   10212:	2301      	moveq	r3, #1
   10214:	2300      	movne	r3, #0
   10216:	b2db      	uxtb	r3, r3
   10218:	461a      	mov	r2, r3
   1021a:	78f9      	ldrb	r1, [r7, #3]
   1021c:	2300      	movs	r3, #0
   1021e:	9300      	str	r3, [sp, #0]
   10220:	2300      	movs	r3, #0
   10222:	6878      	ldr	r0, [r7, #4]
   10224:	4c02      	ldr	r4, [pc, #8]	; (10230 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   10226:	47a0      	blx	r4
}
   10228:	bf00      	nop
   1022a:	370c      	adds	r7, #12
   1022c:	46bd      	mov	sp, r7
   1022e:	bd90      	pop	{r4, r7, pc}
   10230:	00010171 	.word	0x00010171

00010234 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   10234:	b590      	push	{r4, r7, lr}
   10236:	b085      	sub	sp, #20
   10238:	af00      	add	r7, sp, #0
   1023a:	6078      	str	r0, [r7, #4]
   1023c:	460b      	mov	r3, r1
   1023e:	70fb      	strb	r3, [r7, #3]
   10240:	4613      	mov	r3, r2
   10242:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   10244:	78fb      	ldrb	r3, [r7, #3]
   10246:	4619      	mov	r1, r3
   10248:	6878      	ldr	r0, [r7, #4]
   1024a:	4b21      	ldr	r3, [pc, #132]	; (102d0 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   1024c:	4798      	blx	r3
   1024e:	4603      	mov	r3, r0
   10250:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   10252:	78f9      	ldrb	r1, [r7, #3]
   10254:	230a      	movs	r3, #10
   10256:	220a      	movs	r2, #10
   10258:	6878      	ldr	r0, [r7, #4]
   1025a:	4c1e      	ldr	r4, [pc, #120]	; (102d4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   1025c:	47a0      	blx	r4
   1025e:	4603      	mov	r3, r0
   10260:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   10262:	7bfb      	ldrb	r3, [r7, #15]
   10264:	4619      	mov	r1, r3
   10266:	6878      	ldr	r0, [r7, #4]
   10268:	4b1b      	ldr	r3, [pc, #108]	; (102d8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   1026a:	4798      	blx	r3
   1026c:	4603      	mov	r3, r0
   1026e:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   10270:	78bb      	ldrb	r3, [r7, #2]
   10272:	2b00      	cmp	r3, #0
   10274:	d009      	beq.n	1028a <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   10276:	7bba      	ldrb	r2, [r7, #14]
   10278:	7b7b      	ldrb	r3, [r7, #13]
   1027a:	4619      	mov	r1, r3
   1027c:	2301      	movs	r3, #1
   1027e:	408b      	lsls	r3, r1
   10280:	b2db      	uxtb	r3, r3
   10282:	4313      	orrs	r3, r2
   10284:	b2db      	uxtb	r3, r3
   10286:	73bb      	strb	r3, [r7, #14]
   10288:	e00a      	b.n	102a0 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   1028a:	7bba      	ldrb	r2, [r7, #14]
   1028c:	7b7b      	ldrb	r3, [r7, #13]
   1028e:	4619      	mov	r1, r3
   10290:	2301      	movs	r3, #1
   10292:	408b      	lsls	r3, r1
   10294:	b2db      	uxtb	r3, r3
   10296:	43db      	mvns	r3, r3
   10298:	b2db      	uxtb	r3, r3
   1029a:	4013      	ands	r3, r2
   1029c:	b2db      	uxtb	r3, r3
   1029e:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   102a0:	78f9      	ldrb	r1, [r7, #3]
   102a2:	2309      	movs	r3, #9
   102a4:	2209      	movs	r2, #9
   102a6:	6878      	ldr	r0, [r7, #4]
   102a8:	4c0a      	ldr	r4, [pc, #40]	; (102d4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   102aa:	47a0      	blx	r4
   102ac:	4603      	mov	r3, r0
   102ae:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   102b0:	7bba      	ldrb	r2, [r7, #14]
   102b2:	7bfb      	ldrb	r3, [r7, #15]
   102b4:	4619      	mov	r1, r3
   102b6:	6878      	ldr	r0, [r7, #4]
   102b8:	4b08      	ldr	r3, [pc, #32]	; (102dc <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   102ba:	4798      	blx	r3
   102bc:	4603      	mov	r3, r0
   102be:	2b00      	cmp	r3, #0
   102c0:	bf0c      	ite	eq
   102c2:	2301      	moveq	r3, #1
   102c4:	2300      	movne	r3, #0
   102c6:	b2db      	uxtb	r3, r3
}
   102c8:	4618      	mov	r0, r3
   102ca:	3714      	adds	r7, #20
   102cc:	46bd      	mov	sp, r7
   102ce:	bd90      	pop	{r4, r7, pc}
   102d0:	0000fedf 	.word	0x0000fedf
   102d4:	0000fefd 	.word	0x0000fefd
   102d8:	0000ff2d 	.word	0x0000ff2d
   102dc:	0000ffb5 	.word	0x0000ffb5

000102e0 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   102e0:	b590      	push	{r4, r7, lr}
   102e2:	b085      	sub	sp, #20
   102e4:	af02      	add	r7, sp, #8
   102e6:	6078      	str	r0, [r7, #4]
   102e8:	460b      	mov	r3, r1
   102ea:	70fb      	strb	r3, [r7, #3]
   102ec:	4613      	mov	r3, r2
   102ee:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   102f0:	78ba      	ldrb	r2, [r7, #2]
   102f2:	78f9      	ldrb	r1, [r7, #3]
   102f4:	2306      	movs	r3, #6
   102f6:	9300      	str	r3, [sp, #0]
   102f8:	2306      	movs	r3, #6
   102fa:	6878      	ldr	r0, [r7, #4]
   102fc:	4c02      	ldr	r4, [pc, #8]	; (10308 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   102fe:	47a0      	blx	r4
}
   10300:	bf00      	nop
   10302:	370c      	adds	r7, #12
   10304:	46bd      	mov	sp, r7
   10306:	bd90      	pop	{r4, r7, pc}
   10308:	00010171 	.word	0x00010171

0001030c <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh>:
 * polarity will set LOW or HIGH on interrupt.
 * Default values after Power On Reset are: (false, false, LOW)
 * If you are connecting the INTA/B pin to arduino 2/3, you should configure the interupt handling as FALLING with
 * the default configuration.
 */
void MCP23008_Class::setupConfigurationRegister(uint8_t mirroring, uint8_t openDrain, uint8_t polarity){
   1030c:	b580      	push	{r7, lr}
   1030e:	b084      	sub	sp, #16
   10310:	af00      	add	r7, sp, #0
   10312:	6078      	str	r0, [r7, #4]
   10314:	4608      	mov	r0, r1
   10316:	4611      	mov	r1, r2
   10318:	461a      	mov	r2, r3
   1031a:	4603      	mov	r3, r0
   1031c:	70fb      	strb	r3, [r7, #3]
   1031e:	460b      	mov	r3, r1
   10320:	70bb      	strb	r3, [r7, #2]
   10322:	4613      	mov	r3, r2
   10324:	707b      	strb	r3, [r7, #1]
	// configure the port A
	uint8_t ioconfValue=readRegister(MCP23008_IOCONA);
   10326:	2105      	movs	r1, #5
   10328:	6878      	ldr	r0, [r7, #4]
   1032a:	4b15      	ldr	r3, [pc, #84]	; (10380 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x74>)
   1032c:	4798      	blx	r3
   1032e:	4603      	mov	r3, r0
   10330:	73fb      	strb	r3, [r7, #15]
//	bitWrite(ioconfValue,6,mirroring);
	bitWrite(ioconfValue,2,openDrain);
   10332:	78bb      	ldrb	r3, [r7, #2]
   10334:	2b00      	cmp	r3, #0
   10336:	d005      	beq.n	10344 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x38>
   10338:	7bfb      	ldrb	r3, [r7, #15]
   1033a:	f043 0304 	orr.w	r3, r3, #4
   1033e:	b2db      	uxtb	r3, r3
   10340:	73fb      	strb	r3, [r7, #15]
   10342:	e004      	b.n	1034e <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x42>
   10344:	7bfb      	ldrb	r3, [r7, #15]
   10346:	f023 0304 	bic.w	r3, r3, #4
   1034a:	b2db      	uxtb	r3, r3
   1034c:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,1,polarity);
   1034e:	787b      	ldrb	r3, [r7, #1]
   10350:	2b00      	cmp	r3, #0
   10352:	d005      	beq.n	10360 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x54>
   10354:	7bfb      	ldrb	r3, [r7, #15]
   10356:	f043 0302 	orr.w	r3, r3, #2
   1035a:	b2db      	uxtb	r3, r3
   1035c:	73fb      	strb	r3, [r7, #15]
   1035e:	e004      	b.n	1036a <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x5e>
   10360:	7bfb      	ldrb	r3, [r7, #15]
   10362:	f023 0302 	bic.w	r3, r3, #2
   10366:	b2db      	uxtb	r3, r3
   10368:	73fb      	strb	r3, [r7, #15]
	writeRegister(MCP23008_IOCONA,ioconfValue);
   1036a:	7bfb      	ldrb	r3, [r7, #15]
   1036c:	461a      	mov	r2, r3
   1036e:	2105      	movs	r1, #5
   10370:	6878      	ldr	r0, [r7, #4]
   10372:	4b04      	ldr	r3, [pc, #16]	; (10384 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x78>)
   10374:	4798      	blx	r3


}
   10376:	bf00      	nop
   10378:	3710      	adds	r7, #16
   1037a:	46bd      	mov	sp, r7
   1037c:	bd80      	pop	{r7, pc}
   1037e:	bf00      	nop
   10380:	0000ff2d 	.word	0x0000ff2d
   10384:	0000ffb5 	.word	0x0000ffb5

00010388 <_ZN14MCP23008_Class17setupInterruptPinEhh>:
 *
 * Note that the interrupt condition finishes when you read the information about the port / value
 * that caused the interrupt or you read the port itself. Check the datasheet can be confusing.
 *
 */
void MCP23008_Class::setupInterruptPin(uint8_t pin, uint8_t mode) {
   10388:	b590      	push	{r4, r7, lr}
   1038a:	b085      	sub	sp, #20
   1038c:	af02      	add	r7, sp, #8
   1038e:	6078      	str	r0, [r7, #4]
   10390:	460b      	mov	r3, r1
   10392:	70fb      	strb	r3, [r7, #3]
   10394:	4613      	mov	r3, r2
   10396:	70bb      	strb	r3, [r7, #2]

	// set the pin interrupt control (0 means change, 1 means compare against given value);
	updateRegisterBit(pin,mode!=MCP23008_CHANGE,MCP23008_INTCONA,MCP23008_INTCONA);
   10398:	78bb      	ldrb	r3, [r7, #2]
   1039a:	2b02      	cmp	r3, #2
   1039c:	bf14      	ite	ne
   1039e:	2301      	movne	r3, #1
   103a0:	2300      	moveq	r3, #0
   103a2:	b2db      	uxtb	r3, r3
   103a4:	461a      	mov	r2, r3
   103a6:	78f9      	ldrb	r1, [r7, #3]
   103a8:	2304      	movs	r3, #4
   103aa:	9300      	str	r3, [sp, #0]
   103ac:	2304      	movs	r3, #4
   103ae:	6878      	ldr	r0, [r7, #4]
   103b0:	4c06      	ldr	r4, [pc, #24]	; (103cc <_ZN14MCP23008_Class17setupInterruptPinEhh+0x44>)
   103b2:	47a0      	blx	r4
	// In a RISING interrupt the default value is 0, interrupt is triggered when the pin goes to 1.
	// In a FALLING interrupt the default value is 1, interrupt is triggered when pin goes to 0.
//	updateRegisterBit(pin,(mode==MCP23008_FALLING),MCP23008_DEFVALA,MCP23008_DEFVALA);

	// enable the pin for interrupt
	updateRegisterBit(pin,MCP23008_HIGH,MCP23008_GPINTENA,MCP23008_GPINTENA);
   103b4:	78f9      	ldrb	r1, [r7, #3]
   103b6:	2302      	movs	r3, #2
   103b8:	9300      	str	r3, [sp, #0]
   103ba:	2302      	movs	r3, #2
   103bc:	2201      	movs	r2, #1
   103be:	6878      	ldr	r0, [r7, #4]
   103c0:	4c02      	ldr	r4, [pc, #8]	; (103cc <_ZN14MCP23008_Class17setupInterruptPinEhh+0x44>)
   103c2:	47a0      	blx	r4

}
   103c4:	bf00      	nop
   103c6:	370c      	adds	r7, #12
   103c8:	46bd      	mov	sp, r7
   103ca:	bd90      	pop	{r4, r7, pc}
   103cc:	00010171 	.word	0x00010171

000103d0 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh>:
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
	{
		setupInterruptPin(ii,MCP23008_CHANGE);
	}
}
void MCP23008_Class::SetChangeInterruptPins(uint8_t mask){
   103d0:	b590      	push	{r4, r7, lr}
   103d2:	b085      	sub	sp, #20
   103d4:	af00      	add	r7, sp, #0
   103d6:	6078      	str	r0, [r7, #4]
   103d8:	460b      	mov	r3, r1
   103da:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
   103dc:	2300      	movs	r3, #0
   103de:	73fb      	strb	r3, [r7, #15]
   103e0:	7bfb      	ldrb	r3, [r7, #15]
   103e2:	2b07      	cmp	r3, #7
   103e4:	dc11      	bgt.n	1040a <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x3a>
	{
		if (mask&(0x01<<ii))
   103e6:	78fa      	ldrb	r2, [r7, #3]
   103e8:	7bfb      	ldrb	r3, [r7, #15]
   103ea:	fa42 f303 	asr.w	r3, r2, r3
   103ee:	f003 0301 	and.w	r3, r3, #1
   103f2:	2b00      	cmp	r3, #0
   103f4:	d005      	beq.n	10402 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x32>
		{
			setupInterruptPin(ii,MCP23008_CHANGE);
   103f6:	7bfb      	ldrb	r3, [r7, #15]
   103f8:	2202      	movs	r2, #2
   103fa:	4619      	mov	r1, r3
   103fc:	6878      	ldr	r0, [r7, #4]
   103fe:	4b08      	ldr	r3, [pc, #32]	; (10420 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x50>)
   10400:	4798      	blx	r3
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
   10402:	7bfb      	ldrb	r3, [r7, #15]
   10404:	3301      	adds	r3, #1
   10406:	73fb      	strb	r3, [r7, #15]
   10408:	e7ea      	b.n	103e0 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x10>
		}
		
	}
	setupConfigurationRegister(false,false,MCP23008_HIGH);
   1040a:	2301      	movs	r3, #1
   1040c:	2200      	movs	r2, #0
   1040e:	2100      	movs	r1, #0
   10410:	6878      	ldr	r0, [r7, #4]
   10412:	4c04      	ldr	r4, [pc, #16]	; (10424 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x54>)
   10414:	47a0      	blx	r4
}
   10416:	bf00      	nop
   10418:	3714      	adds	r7, #20
   1041a:	46bd      	mov	sp, r7
   1041c:	bd90      	pop	{r4, r7, pc}
   1041e:	bf00      	nop
   10420:	00010389 	.word	0x00010389
   10424:	0001030d 	.word	0x0001030d

00010428 <_ZN14MCP23008_Class22SetChangeInterruptPinsEhb>:
void MCP23008_Class::SetChangeInterruptPins(uint8_t mask,bool int_pol){
   10428:	b590      	push	{r4, r7, lr}
   1042a:	b085      	sub	sp, #20
   1042c:	af00      	add	r7, sp, #0
   1042e:	6078      	str	r0, [r7, #4]
   10430:	460b      	mov	r3, r1
   10432:	70fb      	strb	r3, [r7, #3]
   10434:	4613      	mov	r3, r2
   10436:	70bb      	strb	r3, [r7, #2]
	
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
   10438:	2300      	movs	r3, #0
   1043a:	73fb      	strb	r3, [r7, #15]
   1043c:	7bfb      	ldrb	r3, [r7, #15]
   1043e:	2b07      	cmp	r3, #7
   10440:	dc11      	bgt.n	10466 <_ZN14MCP23008_Class22SetChangeInterruptPinsEhb+0x3e>
	{
		if (mask&(0x01<<ii))
   10442:	78fa      	ldrb	r2, [r7, #3]
   10444:	7bfb      	ldrb	r3, [r7, #15]
   10446:	fa42 f303 	asr.w	r3, r2, r3
   1044a:	f003 0301 	and.w	r3, r3, #1
   1044e:	2b00      	cmp	r3, #0
   10450:	d005      	beq.n	1045e <_ZN14MCP23008_Class22SetChangeInterruptPinsEhb+0x36>
		{
			setupInterruptPin(ii,MCP23008_CHANGE);
   10452:	7bfb      	ldrb	r3, [r7, #15]
   10454:	2202      	movs	r2, #2
   10456:	4619      	mov	r1, r3
   10458:	6878      	ldr	r0, [r7, #4]
   1045a:	4b08      	ldr	r3, [pc, #32]	; (1047c <_ZN14MCP23008_Class22SetChangeInterruptPinsEhb+0x54>)
   1045c:	4798      	blx	r3
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
   1045e:	7bfb      	ldrb	r3, [r7, #15]
   10460:	3301      	adds	r3, #1
   10462:	73fb      	strb	r3, [r7, #15]
   10464:	e7ea      	b.n	1043c <_ZN14MCP23008_Class22SetChangeInterruptPinsEhb+0x14>
		}
		
	}
	setupConfigurationRegister(false,false,int_pol);
   10466:	78bb      	ldrb	r3, [r7, #2]
   10468:	2200      	movs	r2, #0
   1046a:	2100      	movs	r1, #0
   1046c:	6878      	ldr	r0, [r7, #4]
   1046e:	4c04      	ldr	r4, [pc, #16]	; (10480 <_ZN14MCP23008_Class22SetChangeInterruptPinsEhb+0x58>)
   10470:	47a0      	blx	r4
}
   10472:	bf00      	nop
   10474:	3714      	adds	r7, #20
   10476:	46bd      	mov	sp, r7
   10478:	bd90      	pop	{r4, r7, pc}
   1047a:	bf00      	nop
   1047c:	00010389 	.word	0x00010389
   10480:	0001030d 	.word	0x0001030d

00010484 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   10484:	b580      	push	{r7, lr}
   10486:	b082      	sub	sp, #8
   10488:	af00      	add	r7, sp, #0
   1048a:	6078      	str	r0, [r7, #4]
   1048c:	6039      	str	r1, [r7, #0]
   1048e:	687b      	ldr	r3, [r7, #4]
   10490:	2b01      	cmp	r3, #1
   10492:	d10d      	bne.n	104b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10494:	683b      	ldr	r3, [r7, #0]
   10496:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1049a:	4293      	cmp	r3, r2
   1049c:	d108      	bne.n	104b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1049e:	4906      	ldr	r1, [pc, #24]	; (104b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   104a0:	4806      	ldr	r0, [pc, #24]	; (104bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
   104a2:	4b07      	ldr	r3, [pc, #28]	; (104c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   104a4:	4798      	blx	r3
   104a6:	4a07      	ldr	r2, [pc, #28]	; (104c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   104a8:	4907      	ldr	r1, [pc, #28]	; (104c8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   104aa:	4804      	ldr	r0, [pc, #16]	; (104bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
   104ac:	4b07      	ldr	r3, [pc, #28]	; (104cc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   104ae:	4798      	blx	r3
   104b0:	bf00      	nop
   104b2:	3708      	adds	r7, #8
   104b4:	46bd      	mov	sp, r7
   104b6:	bd80      	pop	{r7, pc}
   104b8:	2000e088 	.word	0x2000e088
   104bc:	20002f94 	.word	0x20002f94
   104c0:	0000fcb5 	.word	0x0000fcb5
   104c4:	20000000 	.word	0x20000000
   104c8:	0000fcd1 	.word	0x0000fcd1
   104cc:	0001ab61 	.word	0x0001ab61

000104d0 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   104d0:	b580      	push	{r7, lr}
   104d2:	af00      	add	r7, sp, #0
   104d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   104d8:	2001      	movs	r0, #1
   104da:	4b01      	ldr	r3, [pc, #4]	; (104e0 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   104dc:	4798      	blx	r3
   104de:	bd80      	pop	{r7, pc}
   104e0:	00010485 	.word	0x00010485

000104e4 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   104e4:	b480      	push	{r7}
   104e6:	b083      	sub	sp, #12
   104e8:	af00      	add	r7, sp, #0
   104ea:	6078      	str	r0, [r7, #4]
   104ec:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   104ee:	687b      	ldr	r3, [r7, #4]
   104f0:	683a      	ldr	r2, [r7, #0]
   104f2:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   104f4:	687b      	ldr	r3, [r7, #4]
   104f6:	68db      	ldr	r3, [r3, #12]
   104f8:	2200      	movs	r2, #0
   104fa:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   104fc:	4a06      	ldr	r2, [pc, #24]	; (10518 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   104fe:	687b      	ldr	r3, [r7, #4]
   10500:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   10502:	687b      	ldr	r3, [r7, #4]
   10504:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10508:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   1050a:	687b      	ldr	r3, [r7, #4]
   1050c:	4618      	mov	r0, r3
   1050e:	370c      	adds	r7, #12
   10510:	46bd      	mov	sp, r7
   10512:	bc80      	pop	{r7}
   10514:	4770      	bx	lr
   10516:	bf00      	nop
   10518:	200030ac 	.word	0x200030ac

0001051c <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   1051c:	b480      	push	{r7}
   1051e:	b083      	sub	sp, #12
   10520:	af00      	add	r7, sp, #0
   10522:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   10524:	687b      	ldr	r3, [r7, #4]
   10526:	2200      	movs	r2, #0
   10528:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1052a:	687b      	ldr	r3, [r7, #4]
   1052c:	4618      	mov	r0, r3
   1052e:	370c      	adds	r7, #12
   10530:	46bd      	mov	sp, r7
   10532:	bc80      	pop	{r7}
   10534:	4770      	bx	lr
	...

00010538 <_ZL9InitArrayv>:


static void InitArray(){
   10538:	b480      	push	{r7}
   1053a:	b083      	sub	sp, #12
   1053c:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   1053e:	2301      	movs	r3, #1
   10540:	607b      	str	r3, [r7, #4]
   10542:	687b      	ldr	r3, [r7, #4]
   10544:	2b1f      	cmp	r3, #31
   10546:	dc34      	bgt.n	105b2 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   10548:	491e      	ldr	r1, [pc, #120]	; (105c4 <_ZL9InitArrayv+0x8c>)
   1054a:	687a      	ldr	r2, [r7, #4]
   1054c:	4613      	mov	r3, r2
   1054e:	009b      	lsls	r3, r3, #2
   10550:	4413      	add	r3, r2
   10552:	009b      	lsls	r3, r3, #2
   10554:	440b      	add	r3, r1
   10556:	2200      	movs	r2, #0
   10558:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   1055a:	491a      	ldr	r1, [pc, #104]	; (105c4 <_ZL9InitArrayv+0x8c>)
   1055c:	687a      	ldr	r2, [r7, #4]
   1055e:	4613      	mov	r3, r2
   10560:	009b      	lsls	r3, r3, #2
   10562:	4413      	add	r3, r2
   10564:	009b      	lsls	r3, r3, #2
   10566:	440b      	add	r3, r1
   10568:	330c      	adds	r3, #12
   1056a:	2200      	movs	r2, #0
   1056c:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   1056e:	687b      	ldr	r3, [r7, #4]
   10570:	1e5a      	subs	r2, r3, #1
   10572:	6879      	ldr	r1, [r7, #4]
   10574:	460b      	mov	r3, r1
   10576:	009b      	lsls	r3, r3, #2
   10578:	440b      	add	r3, r1
   1057a:	009b      	lsls	r3, r3, #2
   1057c:	4911      	ldr	r1, [pc, #68]	; (105c4 <_ZL9InitArrayv+0x8c>)
   1057e:	4419      	add	r1, r3
   10580:	4810      	ldr	r0, [pc, #64]	; (105c4 <_ZL9InitArrayv+0x8c>)
   10582:	4613      	mov	r3, r2
   10584:	009b      	lsls	r3, r3, #2
   10586:	4413      	add	r3, r2
   10588:	009b      	lsls	r3, r3, #2
   1058a:	4403      	add	r3, r0
   1058c:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
   1058e:	4a0e      	ldr	r2, [pc, #56]	; (105c8 <_ZL9InitArrayv+0x90>)
   10590:	687b      	ldr	r3, [r7, #4]
   10592:	2100      	movs	r1, #0
   10594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
   10598:	687b      	ldr	r3, [r7, #4]
   1059a:	3b01      	subs	r3, #1
   1059c:	687a      	ldr	r2, [r7, #4]
   1059e:	0092      	lsls	r2, r2, #2
   105a0:	4909      	ldr	r1, [pc, #36]	; (105c8 <_ZL9InitArrayv+0x90>)
   105a2:	440a      	add	r2, r1
   105a4:	4908      	ldr	r1, [pc, #32]	; (105c8 <_ZL9InitArrayv+0x90>)
   105a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
   105aa:	687b      	ldr	r3, [r7, #4]
   105ac:	3301      	adds	r3, #1
   105ae:	607b      	str	r3, [r7, #4]
   105b0:	e7c7      	b.n	10542 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
   105b2:	4b06      	ldr	r3, [pc, #24]	; (105cc <_ZL9InitArrayv+0x94>)
   105b4:	2201      	movs	r2, #1
   105b6:	701a      	strb	r2, [r3, #0]
		
}
   105b8:	bf00      	nop
   105ba:	370c      	adds	r7, #12
   105bc:	46bd      	mov	sp, r7
   105be:	bc80      	pop	{r7}
   105c0:	4770      	bx	lr
   105c2:	bf00      	nop
   105c4:	200030b0 	.word	0x200030b0
   105c8:	20003330 	.word	0x20003330
   105cc:	200033b0 	.word	0x200033b0

000105d0 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   105d0:	b580      	push	{r7, lr}
   105d2:	b082      	sub	sp, #8
   105d4:	af00      	add	r7, sp, #0
   105d6:	6078      	str	r0, [r7, #4]
	ticks=0;
   105d8:	687b      	ldr	r3, [r7, #4]
   105da:	2200      	movs	r2, #0
   105dc:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   105de:	4b0d      	ldr	r3, [pc, #52]	; (10614 <_ZN11Timer_Class4InitEv+0x44>)
   105e0:	781b      	ldrb	r3, [r3, #0]
   105e2:	f083 0301 	eor.w	r3, r3, #1
   105e6:	b2db      	uxtb	r3, r3
   105e8:	2b00      	cmp	r3, #0
   105ea:	d001      	beq.n	105f0 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   105ec:	4b0a      	ldr	r3, [pc, #40]	; (10618 <_ZN11Timer_Class4InitEv+0x48>)
   105ee:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
   105f0:	6878      	ldr	r0, [r7, #4]
   105f2:	4b0a      	ldr	r3, [pc, #40]	; (1061c <_ZN11Timer_Class4InitEv+0x4c>)
   105f4:	4798      	blx	r3
   105f6:	4603      	mov	r3, r0
   105f8:	2b00      	cmp	r3, #0
   105fa:	bf0c      	ite	eq
   105fc:	2301      	moveq	r3, #1
   105fe:	2300      	movne	r3, #0
   10600:	b2da      	uxtb	r2, r3
   10602:	687b      	ldr	r3, [r7, #4]
   10604:	709a      	strb	r2, [r3, #2]
	return isOK;
   10606:	687b      	ldr	r3, [r7, #4]
   10608:	789b      	ldrb	r3, [r3, #2]
   1060a:	b2db      	uxtb	r3, r3
}
   1060c:	4618      	mov	r0, r3
   1060e:	3708      	adds	r7, #8
   10610:	46bd      	mov	sp, r7
   10612:	bd80      	pop	{r7, pc}
   10614:	200033b0 	.word	0x200033b0
   10618:	00010539 	.word	0x00010539
   1061c:	00010621 	.word	0x00010621

00010620 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
   10620:	b580      	push	{r7, lr}
   10622:	b084      	sub	sp, #16
   10624:	af00      	add	r7, sp, #0
   10626:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   10628:	687b      	ldr	r3, [r7, #4]
   1062a:	68db      	ldr	r3, [r3, #12]
   1062c:	4618      	mov	r0, r3
   1062e:	4b04      	ldr	r3, [pc, #16]	; (10640 <_ZN11Timer_Class5StartEv+0x20>)
   10630:	4798      	blx	r3
   10632:	60f8      	str	r0, [r7, #12]
	return status;
   10634:	68fb      	ldr	r3, [r7, #12]
	
}
   10636:	4618      	mov	r0, r3
   10638:	3710      	adds	r7, #16
   1063a:	46bd      	mov	sp, r7
   1063c:	bd80      	pop	{r7, pc}
   1063e:	bf00      	nop
   10640:	00003f8d 	.word	0x00003f8d

00010644 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
   10644:	b580      	push	{r7, lr}
   10646:	b084      	sub	sp, #16
   10648:	af00      	add	r7, sp, #0
   1064a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   1064c:	687b      	ldr	r3, [r7, #4]
   1064e:	68db      	ldr	r3, [r3, #12]
   10650:	4618      	mov	r0, r3
   10652:	4b05      	ldr	r3, [pc, #20]	; (10668 <_ZN11Timer_Class4StopEv+0x24>)
   10654:	4798      	blx	r3
   10656:	60f8      	str	r0, [r7, #12]
	timeout=0;
   10658:	687b      	ldr	r3, [r7, #4]
   1065a:	2200      	movs	r2, #0
   1065c:	705a      	strb	r2, [r3, #1]
	return status;
   1065e:	68fb      	ldr	r3, [r7, #12]
}
   10660:	4618      	mov	r0, r3
   10662:	3710      	adds	r7, #16
   10664:	46bd      	mov	sp, r7
   10666:	bd80      	pop	{r7, pc}
   10668:	00003ff5 	.word	0x00003ff5

0001066c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   1066c:	b580      	push	{r7, lr}
   1066e:	b086      	sub	sp, #24
   10670:	af00      	add	r7, sp, #0
   10672:	60f8      	str	r0, [r7, #12]
   10674:	60b9      	str	r1, [r7, #8]
   10676:	607a      	str	r2, [r7, #4]
   10678:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   1067a:	68b9      	ldr	r1, [r7, #8]
   1067c:	68f8      	ldr	r0, [r7, #12]
   1067e:	4b0e      	ldr	r3, [pc, #56]	; (106b8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   10680:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   10682:	68fb      	ldr	r3, [r7, #12]
   10684:	699b      	ldr	r3, [r3, #24]
   10686:	687a      	ldr	r2, [r7, #4]
   10688:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   1068a:	68fb      	ldr	r3, [r7, #12]
   1068c:	699b      	ldr	r3, [r3, #24]
   1068e:	68ba      	ldr	r2, [r7, #8]
   10690:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   10692:	68fb      	ldr	r3, [r7, #12]
   10694:	699b      	ldr	r3, [r3, #24]
   10696:	78fa      	ldrb	r2, [r7, #3]
   10698:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   1069a:	68fb      	ldr	r3, [r7, #12]
   1069c:	68da      	ldr	r2, [r3, #12]
   1069e:	68fb      	ldr	r3, [r7, #12]
   106a0:	699b      	ldr	r3, [r3, #24]
   106a2:	4619      	mov	r1, r3
   106a4:	4610      	mov	r0, r2
   106a6:	4b05      	ldr	r3, [pc, #20]	; (106bc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   106a8:	4798      	blx	r3
   106aa:	6178      	str	r0, [r7, #20]
	
	return status;
   106ac:	697b      	ldr	r3, [r7, #20]
}
   106ae:	4618      	mov	r0, r3
   106b0:	3718      	adds	r7, #24
   106b2:	46bd      	mov	sp, r7
   106b4:	bd80      	pop	{r7, pc}
   106b6:	bf00      	nop
   106b8:	00010875 	.word	0x00010875
   106bc:	00004061 	.word	0x00004061

000106c0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   106c0:	b580      	push	{r7, lr}
   106c2:	b086      	sub	sp, #24
   106c4:	af00      	add	r7, sp, #0
   106c6:	60f8      	str	r0, [r7, #12]
   106c8:	60b9      	str	r1, [r7, #8]
   106ca:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   106cc:	687a      	ldr	r2, [r7, #4]
   106ce:	68b9      	ldr	r1, [r7, #8]
   106d0:	68f8      	ldr	r0, [r7, #12]
   106d2:	4b0c      	ldr	r3, [pc, #48]	; (10704 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   106d4:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   106d6:	68fb      	ldr	r3, [r7, #12]
   106d8:	68db      	ldr	r3, [r3, #12]
   106da:	681b      	ldr	r3, [r3, #0]
   106dc:	699b      	ldr	r3, [r3, #24]
   106de:	68fa      	ldr	r2, [r7, #12]
   106e0:	68d2      	ldr	r2, [r2, #12]
   106e2:	3204      	adds	r2, #4
   106e4:	4610      	mov	r0, r2
   106e6:	4798      	blx	r3
   106e8:	4603      	mov	r3, r0
   106ea:	2b00      	cmp	r3, #0
   106ec:	d105      	bne.n	106fa <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   106ee:	68fb      	ldr	r3, [r7, #12]
   106f0:	68db      	ldr	r3, [r3, #12]
   106f2:	4618      	mov	r0, r3
   106f4:	4b04      	ldr	r3, [pc, #16]	; (10708 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   106f6:	4798      	blx	r3
   106f8:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   106fa:	697b      	ldr	r3, [r7, #20]
}
   106fc:	4618      	mov	r0, r3
   106fe:	3718      	adds	r7, #24
   10700:	46bd      	mov	sp, r7
   10702:	bd80      	pop	{r7, pc}
   10704:	0001070d 	.word	0x0001070d
   10708:	00003f8d 	.word	0x00003f8d

0001070c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   1070c:	b590      	push	{r4, r7, lr}
   1070e:	b087      	sub	sp, #28
   10710:	af00      	add	r7, sp, #0
   10712:	60f8      	str	r0, [r7, #12]
   10714:	60b9      	str	r1, [r7, #8]
   10716:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   10718:	2301      	movs	r3, #1
   1071a:	687a      	ldr	r2, [r7, #4]
   1071c:	68b9      	ldr	r1, [r7, #8]
   1071e:	68f8      	ldr	r0, [r7, #12]
   10720:	4c03      	ldr	r4, [pc, #12]	; (10730 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   10722:	47a0      	blx	r4
   10724:	6178      	str	r0, [r7, #20]
		return status;
   10726:	697b      	ldr	r3, [r7, #20]
}
   10728:	4618      	mov	r0, r3
   1072a:	371c      	adds	r7, #28
   1072c:	46bd      	mov	sp, r7
   1072e:	bd90      	pop	{r4, r7, pc}
   10730:	0001066d 	.word	0x0001066d

00010734 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
   10734:	b580      	push	{r7, lr}
   10736:	b082      	sub	sp, #8
   10738:	af00      	add	r7, sp, #0
   1073a:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   1073c:	687b      	ldr	r3, [r7, #4]
   1073e:	68da      	ldr	r2, [r3, #12]
   10740:	687b      	ldr	r3, [r7, #4]
   10742:	699b      	ldr	r3, [r3, #24]
   10744:	4619      	mov	r1, r3
   10746:	4610      	mov	r0, r2
   10748:	4b04      	ldr	r3, [pc, #16]	; (1075c <_ZN11Timer_Class11Remove_taskEv+0x28>)
   1074a:	4798      	blx	r3
	task->cb=NULL;
   1074c:	687b      	ldr	r3, [r7, #4]
   1074e:	699b      	ldr	r3, [r3, #24]
   10750:	2200      	movs	r2, #0
   10752:	60da      	str	r2, [r3, #12]
}
   10754:	bf00      	nop
   10756:	3708      	adds	r7, #8
   10758:	46bd      	mov	sp, r7
   1075a:	bd80      	pop	{r7, pc}
   1075c:	00004165 	.word	0x00004165

00010760 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
   10760:	b580      	push	{r7, lr}
   10762:	b082      	sub	sp, #8
   10764:	af00      	add	r7, sp, #0
   10766:	6078      	str	r0, [r7, #4]
   10768:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   1076a:	6839      	ldr	r1, [r7, #0]
   1076c:	6878      	ldr	r0, [r7, #4]
   1076e:	4b0f      	ldr	r3, [pc, #60]	; (107ac <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   10770:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   10772:	687b      	ldr	r3, [r7, #4]
   10774:	68db      	ldr	r3, [r3, #12]
   10776:	f103 0218 	add.w	r2, r3, #24
   1077a:	687b      	ldr	r3, [r7, #4]
   1077c:	699b      	ldr	r3, [r3, #24]
   1077e:	4619      	mov	r1, r3
   10780:	4610      	mov	r0, r2
   10782:	4b0b      	ldr	r3, [pc, #44]	; (107b0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   10784:	4798      	blx	r3
   10786:	4603      	mov	r3, r0
   10788:	2b00      	cmp	r3, #0
   1078a:	d007      	beq.n	1079c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   1078c:	687b      	ldr	r3, [r7, #4]
   1078e:	68da      	ldr	r2, [r3, #12]
   10790:	687b      	ldr	r3, [r7, #4]
   10792:	699b      	ldr	r3, [r3, #24]
   10794:	4619      	mov	r1, r3
   10796:	4610      	mov	r0, r2
   10798:	4b06      	ldr	r3, [pc, #24]	; (107b4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   1079a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   1079c:	687b      	ldr	r3, [r7, #4]
   1079e:	699b      	ldr	r3, [r3, #24]
   107a0:	2200      	movs	r2, #0
   107a2:	60da      	str	r2, [r3, #12]
}
   107a4:	bf00      	nop
   107a6:	3708      	adds	r7, #8
   107a8:	46bd      	mov	sp, r7
   107aa:	bd80      	pop	{r7, pc}
   107ac:	000108f5 	.word	0x000108f5
   107b0:	00004d4d 	.word	0x00004d4d
   107b4:	00004165 	.word	0x00004165

000107b8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   107b8:	b590      	push	{r4, r7, lr}
   107ba:	b087      	sub	sp, #28
   107bc:	af00      	add	r7, sp, #0
   107be:	60f8      	str	r0, [r7, #12]
   107c0:	60b9      	str	r1, [r7, #8]
   107c2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   107c4:	2300      	movs	r3, #0
   107c6:	687a      	ldr	r2, [r7, #4]
   107c8:	68b9      	ldr	r1, [r7, #8]
   107ca:	68f8      	ldr	r0, [r7, #12]
   107cc:	4c0c      	ldr	r4, [pc, #48]	; (10800 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   107ce:	47a0      	blx	r4
   107d0:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   107d2:	68fb      	ldr	r3, [r7, #12]
   107d4:	68db      	ldr	r3, [r3, #12]
   107d6:	681b      	ldr	r3, [r3, #0]
   107d8:	699b      	ldr	r3, [r3, #24]
   107da:	68fa      	ldr	r2, [r7, #12]
   107dc:	68d2      	ldr	r2, [r2, #12]
   107de:	3204      	adds	r2, #4
   107e0:	4610      	mov	r0, r2
   107e2:	4798      	blx	r3
   107e4:	4603      	mov	r3, r0
   107e6:	2b00      	cmp	r3, #0
   107e8:	d105      	bne.n	107f6 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   107ea:	68fb      	ldr	r3, [r7, #12]
   107ec:	68db      	ldr	r3, [r3, #12]
   107ee:	4618      	mov	r0, r3
   107f0:	4b04      	ldr	r3, [pc, #16]	; (10804 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   107f2:	4798      	blx	r3
   107f4:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   107f6:	697b      	ldr	r3, [r7, #20]
}
   107f8:	4618      	mov	r0, r3
   107fa:	371c      	adds	r7, #28
   107fc:	46bd      	mov	sp, r7
   107fe:	bd90      	pop	{r4, r7, pc}
   10800:	0001066d 	.word	0x0001066d
   10804:	00003f8d 	.word	0x00003f8d

00010808 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   10808:	b480      	push	{r7}
   1080a:	b085      	sub	sp, #20
   1080c:	af00      	add	r7, sp, #0
   1080e:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10810:	2300      	movs	r3, #0
   10812:	73fb      	strb	r3, [r7, #15]
   10814:	7bfb      	ldrb	r3, [r7, #15]
   10816:	2b1f      	cmp	r3, #31
   10818:	dc23      	bgt.n	10862 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   1081a:	687b      	ldr	r3, [r7, #4]
   1081c:	7f1a      	ldrb	r2, [r3, #28]
   1081e:	7bfb      	ldrb	r3, [r7, #15]
   10820:	4413      	add	r3, r2
   10822:	b2db      	uxtb	r3, r3
   10824:	f003 031f 	and.w	r3, r3, #31
   10828:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   1082a:	7bba      	ldrb	r2, [r7, #14]
   1082c:	4910      	ldr	r1, [pc, #64]	; (10870 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   1082e:	4613      	mov	r3, r2
   10830:	009b      	lsls	r3, r3, #2
   10832:	4413      	add	r3, r2
   10834:	009b      	lsls	r3, r3, #2
   10836:	440b      	add	r3, r1
   10838:	330c      	adds	r3, #12
   1083a:	681b      	ldr	r3, [r3, #0]
   1083c:	2b00      	cmp	r3, #0
   1083e:	d10c      	bne.n	1085a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   10840:	7bba      	ldrb	r2, [r7, #14]
   10842:	4613      	mov	r3, r2
   10844:	009b      	lsls	r3, r3, #2
   10846:	4413      	add	r3, r2
   10848:	009b      	lsls	r3, r3, #2
   1084a:	4a09      	ldr	r2, [pc, #36]	; (10870 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   1084c:	441a      	add	r2, r3
   1084e:	687b      	ldr	r3, [r7, #4]
   10850:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   10852:	687b      	ldr	r3, [r7, #4]
   10854:	7bba      	ldrb	r2, [r7, #14]
   10856:	771a      	strb	r2, [r3, #28]
			return;
   10858:	e006      	b.n	10868 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1085a:	7bfb      	ldrb	r3, [r7, #15]
   1085c:	3301      	adds	r3, #1
   1085e:	73fb      	strb	r3, [r7, #15]
   10860:	e7d8      	b.n	10814 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   10862:	687b      	ldr	r3, [r7, #4]
   10864:	4a02      	ldr	r2, [pc, #8]	; (10870 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   10866:	619a      	str	r2, [r3, #24]

}
   10868:	3714      	adds	r7, #20
   1086a:	46bd      	mov	sp, r7
   1086c:	bc80      	pop	{r7}
   1086e:	4770      	bx	lr
   10870:	200030b0 	.word	0x200030b0

00010874 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   10874:	b580      	push	{r7, lr}
   10876:	b084      	sub	sp, #16
   10878:	af00      	add	r7, sp, #0
   1087a:	6078      	str	r0, [r7, #4]
   1087c:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1087e:	2300      	movs	r3, #0
   10880:	73fb      	strb	r3, [r7, #15]
   10882:	7bfb      	ldrb	r3, [r7, #15]
   10884:	2b1f      	cmp	r3, #31
   10886:	dc28      	bgt.n	108da <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   10888:	687b      	ldr	r3, [r7, #4]
   1088a:	7f1a      	ldrb	r2, [r3, #28]
   1088c:	7bfb      	ldrb	r3, [r7, #15]
   1088e:	4413      	add	r3, r2
   10890:	b2db      	uxtb	r3, r3
   10892:	f003 031f 	and.w	r3, r3, #31
   10896:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   10898:	7bba      	ldrb	r2, [r7, #14]
   1089a:	4913      	ldr	r1, [pc, #76]	; (108e8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   1089c:	4613      	mov	r3, r2
   1089e:	009b      	lsls	r3, r3, #2
   108a0:	4413      	add	r3, r2
   108a2:	009b      	lsls	r3, r3, #2
   108a4:	440b      	add	r3, r1
   108a6:	330c      	adds	r3, #12
   108a8:	681a      	ldr	r2, [r3, #0]
   108aa:	683b      	ldr	r3, [r7, #0]
   108ac:	429a      	cmp	r2, r3
   108ae:	d110      	bne.n	108d2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   108b0:	6839      	ldr	r1, [r7, #0]
   108b2:	6878      	ldr	r0, [r7, #4]
   108b4:	4b0d      	ldr	r3, [pc, #52]	; (108ec <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   108b6:	4798      	blx	r3
			task=&taskArray[j];
   108b8:	7bba      	ldrb	r2, [r7, #14]
   108ba:	4613      	mov	r3, r2
   108bc:	009b      	lsls	r3, r3, #2
   108be:	4413      	add	r3, r2
   108c0:	009b      	lsls	r3, r3, #2
   108c2:	4a09      	ldr	r2, [pc, #36]	; (108e8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   108c4:	441a      	add	r2, r3
   108c6:	687b      	ldr	r3, [r7, #4]
   108c8:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   108ca:	687b      	ldr	r3, [r7, #4]
   108cc:	7bba      	ldrb	r2, [r7, #14]
   108ce:	771a      	strb	r2, [r3, #28]
			return;
   108d0:	e006      	b.n	108e0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   108d2:	7bfb      	ldrb	r3, [r7, #15]
   108d4:	3301      	adds	r3, #1
   108d6:	73fb      	strb	r3, [r7, #15]
   108d8:	e7d3      	b.n	10882 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   108da:	6878      	ldr	r0, [r7, #4]
   108dc:	4b04      	ldr	r3, [pc, #16]	; (108f0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   108de:	4798      	blx	r3
	//task=&taskArray[0];

}
   108e0:	3710      	adds	r7, #16
   108e2:	46bd      	mov	sp, r7
   108e4:	bd80      	pop	{r7, pc}
   108e6:	bf00      	nop
   108e8:	200030b0 	.word	0x200030b0
   108ec:	00010761 	.word	0x00010761
   108f0:	00010809 	.word	0x00010809

000108f4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   108f4:	b480      	push	{r7}
   108f6:	b085      	sub	sp, #20
   108f8:	af00      	add	r7, sp, #0
   108fa:	6078      	str	r0, [r7, #4]
   108fc:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   108fe:	2300      	movs	r3, #0
   10900:	73fb      	strb	r3, [r7, #15]
   10902:	7bfb      	ldrb	r3, [r7, #15]
   10904:	2b1f      	cmp	r3, #31
   10906:	dc19      	bgt.n	1093c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   10908:	7bfa      	ldrb	r2, [r7, #15]
   1090a:	490f      	ldr	r1, [pc, #60]	; (10948 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   1090c:	4613      	mov	r3, r2
   1090e:	009b      	lsls	r3, r3, #2
   10910:	4413      	add	r3, r2
   10912:	009b      	lsls	r3, r3, #2
   10914:	440b      	add	r3, r1
   10916:	330c      	adds	r3, #12
   10918:	681a      	ldr	r2, [r3, #0]
   1091a:	683b      	ldr	r3, [r7, #0]
   1091c:	429a      	cmp	r2, r3
   1091e:	d109      	bne.n	10934 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   10920:	7bfa      	ldrb	r2, [r7, #15]
   10922:	4613      	mov	r3, r2
   10924:	009b      	lsls	r3, r3, #2
   10926:	4413      	add	r3, r2
   10928:	009b      	lsls	r3, r3, #2
   1092a:	4a07      	ldr	r2, [pc, #28]	; (10948 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   1092c:	441a      	add	r2, r3
   1092e:	687b      	ldr	r3, [r7, #4]
   10930:	619a      	str	r2, [r3, #24]
			return;
   10932:	e004      	b.n	1093e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10934:	7bfb      	ldrb	r3, [r7, #15]
   10936:	3301      	adds	r3, #1
   10938:	73fb      	strb	r3, [r7, #15]
   1093a:	e7e2      	b.n	10902 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   1093c:	bf00      	nop
}
   1093e:	3714      	adds	r7, #20
   10940:	46bd      	mov	sp, r7
   10942:	bc80      	pop	{r7}
   10944:	4770      	bx	lr
   10946:	bf00      	nop
   10948:	200030b0 	.word	0x200030b0

0001094c <_Z41__static_initialization_and_destruction_0ii>:
   1094c:	b580      	push	{r7, lr}
   1094e:	b082      	sub	sp, #8
   10950:	af00      	add	r7, sp, #0
   10952:	6078      	str	r0, [r7, #4]
   10954:	6039      	str	r1, [r7, #0]
   10956:	687b      	ldr	r3, [r7, #4]
   10958:	2b01      	cmp	r3, #1
   1095a:	d14c      	bne.n	109f6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   1095c:	683b      	ldr	r3, [r7, #0]
   1095e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10962:	4293      	cmp	r3, r2
   10964:	d147      	bne.n	109f6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10966:	4926      	ldr	r1, [pc, #152]	; (10a00 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   10968:	4826      	ldr	r0, [pc, #152]	; (10a04 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1096a:	4b27      	ldr	r3, [pc, #156]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1096c:	4798      	blx	r3
   1096e:	4a27      	ldr	r2, [pc, #156]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10970:	4927      	ldr	r1, [pc, #156]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10972:	4824      	ldr	r0, [pc, #144]	; (10a04 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   10974:	4b27      	ldr	r3, [pc, #156]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10976:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10978:	4927      	ldr	r1, [pc, #156]	; (10a18 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1097a:	4828      	ldr	r0, [pc, #160]	; (10a1c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1097c:	4b22      	ldr	r3, [pc, #136]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1097e:	4798      	blx	r3
   10980:	4a22      	ldr	r2, [pc, #136]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10982:	4923      	ldr	r1, [pc, #140]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10984:	4825      	ldr	r0, [pc, #148]	; (10a1c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10986:	4b23      	ldr	r3, [pc, #140]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10988:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1098a:	4925      	ldr	r1, [pc, #148]	; (10a20 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1098c:	4825      	ldr	r0, [pc, #148]	; (10a24 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1098e:	4b1e      	ldr	r3, [pc, #120]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10990:	4798      	blx	r3
   10992:	4a1e      	ldr	r2, [pc, #120]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10994:	491e      	ldr	r1, [pc, #120]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10996:	4823      	ldr	r0, [pc, #140]	; (10a24 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10998:	4b1e      	ldr	r3, [pc, #120]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1099a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1099c:	4922      	ldr	r1, [pc, #136]	; (10a28 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1099e:	4823      	ldr	r0, [pc, #140]	; (10a2c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   109a0:	4b19      	ldr	r3, [pc, #100]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   109a2:	4798      	blx	r3
   109a4:	4a19      	ldr	r2, [pc, #100]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   109a6:	491a      	ldr	r1, [pc, #104]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   109a8:	4820      	ldr	r0, [pc, #128]	; (10a2c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   109aa:	4b1a      	ldr	r3, [pc, #104]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   109ac:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   109ae:	4920      	ldr	r1, [pc, #128]	; (10a30 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   109b0:	4820      	ldr	r0, [pc, #128]	; (10a34 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   109b2:	4b15      	ldr	r3, [pc, #84]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   109b4:	4798      	blx	r3
   109b6:	4a15      	ldr	r2, [pc, #84]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   109b8:	4915      	ldr	r1, [pc, #84]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   109ba:	481e      	ldr	r0, [pc, #120]	; (10a34 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   109bc:	4b15      	ldr	r3, [pc, #84]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   109be:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   109c0:	491d      	ldr	r1, [pc, #116]	; (10a38 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   109c2:	481e      	ldr	r0, [pc, #120]	; (10a3c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   109c4:	4b10      	ldr	r3, [pc, #64]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   109c6:	4798      	blx	r3
   109c8:	4a10      	ldr	r2, [pc, #64]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   109ca:	4911      	ldr	r1, [pc, #68]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   109cc:	481b      	ldr	r0, [pc, #108]	; (10a3c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   109ce:	4b11      	ldr	r3, [pc, #68]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   109d0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   109d2:	491b      	ldr	r1, [pc, #108]	; (10a40 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   109d4:	481b      	ldr	r0, [pc, #108]	; (10a44 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   109d6:	4b0c      	ldr	r3, [pc, #48]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   109d8:	4798      	blx	r3
   109da:	4a0c      	ldr	r2, [pc, #48]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   109dc:	490c      	ldr	r1, [pc, #48]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   109de:	4819      	ldr	r0, [pc, #100]	; (10a44 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   109e0:	4b0c      	ldr	r3, [pc, #48]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   109e2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   109e4:	4918      	ldr	r1, [pc, #96]	; (10a48 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   109e6:	4819      	ldr	r0, [pc, #100]	; (10a4c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   109e8:	4b07      	ldr	r3, [pc, #28]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   109ea:	4798      	blx	r3
   109ec:	4a07      	ldr	r2, [pc, #28]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   109ee:	4908      	ldr	r1, [pc, #32]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   109f0:	4816      	ldr	r0, [pc, #88]	; (10a4c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   109f2:	4b08      	ldr	r3, [pc, #32]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   109f4:	4798      	blx	r3
   109f6:	bf00      	nop
   109f8:	3708      	adds	r7, #8
   109fa:	46bd      	mov	sp, r7
   109fc:	bd80      	pop	{r7, pc}
   109fe:	bf00      	nop
   10a00:	2000df58 	.word	0x2000df58
   10a04:	20002fac 	.word	0x20002fac
   10a08:	000104e5 	.word	0x000104e5
   10a0c:	20000000 	.word	0x20000000
   10a10:	0001051d 	.word	0x0001051d
   10a14:	0001ab61 	.word	0x0001ab61
   10a18:	2000dfec 	.word	0x2000dfec
   10a1c:	20002fcc 	.word	0x20002fcc
   10a20:	2000e110 	.word	0x2000e110
   10a24:	20002fec 	.word	0x20002fec
   10a28:	2000e00c 	.word	0x2000e00c
   10a2c:	2000300c 	.word	0x2000300c
   10a30:	2000e0d0 	.word	0x2000e0d0
   10a34:	2000302c 	.word	0x2000302c
   10a38:	2000e0f0 	.word	0x2000e0f0
   10a3c:	2000304c 	.word	0x2000304c
   10a40:	2000dfc8 	.word	0x2000dfc8
   10a44:	2000306c 	.word	0x2000306c
   10a48:	2000e068 	.word	0x2000e068
   10a4c:	2000308c 	.word	0x2000308c

00010a50 <_GLOBAL__sub_I_ptrTimerClass>:
   10a50:	b580      	push	{r7, lr}
   10a52:	af00      	add	r7, sp, #0
   10a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10a58:	2001      	movs	r0, #1
   10a5a:	4b01      	ldr	r3, [pc, #4]	; (10a60 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   10a5c:	4798      	blx	r3
   10a5e:	bd80      	pop	{r7, pc}
   10a60:	0001094d 	.word	0x0001094d

00010a64 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10a64:	b480      	push	{r7}
   10a66:	b083      	sub	sp, #12
   10a68:	af00      	add	r7, sp, #0
   10a6a:	6078      	str	r0, [r7, #4]
   10a6c:	4a05      	ldr	r2, [pc, #20]	; (10a84 <_ZN5PrintC1Ev+0x20>)
   10a6e:	687b      	ldr	r3, [r7, #4]
   10a70:	601a      	str	r2, [r3, #0]
   10a72:	687b      	ldr	r3, [r7, #4]
   10a74:	2200      	movs	r2, #0
   10a76:	605a      	str	r2, [r3, #4]
   10a78:	687b      	ldr	r3, [r7, #4]
   10a7a:	4618      	mov	r0, r3
   10a7c:	370c      	adds	r7, #12
   10a7e:	46bd      	mov	sp, r7
   10a80:	bc80      	pop	{r7}
   10a82:	4770      	bx	lr
   10a84:	0001bb24 	.word	0x0001bb24

00010a88 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   10a88:	b480      	push	{r7}
   10a8a:	b083      	sub	sp, #12
   10a8c:	af00      	add	r7, sp, #0
   10a8e:	6078      	str	r0, [r7, #4]
   10a90:	2300      	movs	r3, #0
   10a92:	4618      	mov	r0, r3
   10a94:	370c      	adds	r7, #12
   10a96:	46bd      	mov	sp, r7
   10a98:	bc80      	pop	{r7}
   10a9a:	4770      	bx	lr

00010a9c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   10a9c:	b480      	push	{r7}
   10a9e:	b083      	sub	sp, #12
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	6078      	str	r0, [r7, #4]
   10aa4:	bf00      	nop
   10aa6:	370c      	adds	r7, #12
   10aa8:	46bd      	mov	sp, r7
   10aaa:	bc80      	pop	{r7}
   10aac:	4770      	bx	lr
	...

00010ab0 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   10ab0:	b580      	push	{r7, lr}
   10ab2:	b082      	sub	sp, #8
   10ab4:	af00      	add	r7, sp, #0
   10ab6:	6078      	str	r0, [r7, #4]
   10ab8:	687b      	ldr	r3, [r7, #4]
   10aba:	4618      	mov	r0, r3
   10abc:	4b06      	ldr	r3, [pc, #24]	; (10ad8 <_ZN6StreamC1Ev+0x28>)
   10abe:	4798      	blx	r3
   10ac0:	4a06      	ldr	r2, [pc, #24]	; (10adc <_ZN6StreamC1Ev+0x2c>)
   10ac2:	687b      	ldr	r3, [r7, #4]
   10ac4:	601a      	str	r2, [r3, #0]
   10ac6:	687b      	ldr	r3, [r7, #4]
   10ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10acc:	609a      	str	r2, [r3, #8]
   10ace:	687b      	ldr	r3, [r7, #4]
   10ad0:	4618      	mov	r0, r3
   10ad2:	3708      	adds	r7, #8
   10ad4:	46bd      	mov	sp, r7
   10ad6:	bd80      	pop	{r7, pc}
   10ad8:	00010a65 	.word	0x00010a65
   10adc:	0001bae8 	.word	0x0001bae8

00010ae0 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   10ae0:	b480      	push	{r7}
   10ae2:	b083      	sub	sp, #12
   10ae4:	af00      	add	r7, sp, #0
   10ae6:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   10ae8:	4b06      	ldr	r3, [pc, #24]	; (10b04 <_ZL10USBTimeoutPK10timer_task+0x24>)
   10aea:	681b      	ldr	r3, [r3, #0]
   10aec:	2201      	movs	r2, #1
   10aee:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   10af0:	4b04      	ldr	r3, [pc, #16]	; (10b04 <_ZL10USBTimeoutPK10timer_task+0x24>)
   10af2:	681b      	ldr	r3, [r3, #0]
   10af4:	2200      	movs	r2, #0
   10af6:	741a      	strb	r2, [r3, #16]
	
}
   10af8:	bf00      	nop
   10afa:	370c      	adds	r7, #12
   10afc:	46bd      	mov	sp, r7
   10afe:	bc80      	pop	{r7}
   10b00:	4770      	bx	lr
   10b02:	bf00      	nop
   10b04:	200034b4 	.word	0x200034b4

00010b08 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   10b08:	b480      	push	{r7}
   10b0a:	b083      	sub	sp, #12
   10b0c:	af00      	add	r7, sp, #0
   10b0e:	4603      	mov	r3, r0
   10b10:	603a      	str	r2, [r7, #0]
   10b12:	71fb      	strb	r3, [r7, #7]
   10b14:	460b      	mov	r3, r1
   10b16:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   10b18:	4b08      	ldr	r3, [pc, #32]	; (10b3c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10b1a:	681b      	ldr	r3, [r3, #0]
   10b1c:	2201      	movs	r2, #1
   10b1e:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   10b20:	4b06      	ldr	r3, [pc, #24]	; (10b3c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10b22:	681b      	ldr	r3, [r3, #0]
   10b24:	2201      	movs	r2, #1
   10b26:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   10b28:	4b04      	ldr	r3, [pc, #16]	; (10b3c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10b2a:	681b      	ldr	r3, [r3, #0]
   10b2c:	2201      	movs	r2, #1
   10b2e:	741a      	strb	r2, [r3, #16]


	return false;
   10b30:	2300      	movs	r3, #0
}
   10b32:	4618      	mov	r0, r3
   10b34:	370c      	adds	r7, #12
   10b36:	46bd      	mov	sp, r7
   10b38:	bc80      	pop	{r7}
   10b3a:	4770      	bx	lr
   10b3c:	200034b4 	.word	0x200034b4

00010b40 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   10b40:	b480      	push	{r7}
   10b42:	b083      	sub	sp, #12
   10b44:	af00      	add	r7, sp, #0
   10b46:	4603      	mov	r3, r0
   10b48:	603a      	str	r2, [r7, #0]
   10b4a:	71fb      	strb	r3, [r7, #7]
   10b4c:	460b      	mov	r3, r1
   10b4e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   10b50:	4b08      	ldr	r3, [pc, #32]	; (10b74 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10b52:	681b      	ldr	r3, [r3, #0]
   10b54:	2201      	movs	r2, #1
   10b56:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   10b58:	4b06      	ldr	r3, [pc, #24]	; (10b74 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10b5a:	681b      	ldr	r3, [r3, #0]
   10b5c:	2201      	movs	r2, #1
   10b5e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   10b60:	4b04      	ldr	r3, [pc, #16]	; (10b74 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10b62:	681b      	ldr	r3, [r3, #0]
   10b64:	2201      	movs	r2, #1
   10b66:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   10b68:	2300      	movs	r3, #0
}
   10b6a:	4618      	mov	r0, r3
   10b6c:	370c      	adds	r7, #12
   10b6e:	46bd      	mov	sp, r7
   10b70:	bc80      	pop	{r7}
   10b72:	4770      	bx	lr
   10b74:	200034b4 	.word	0x200034b4

00010b78 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   10b78:	b580      	push	{r7, lr}
   10b7a:	b082      	sub	sp, #8
   10b7c:	af00      	add	r7, sp, #0
   10b7e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   10b80:	793b      	ldrb	r3, [r7, #4]
   10b82:	f003 0301 	and.w	r3, r3, #1
   10b86:	b2db      	uxtb	r3, r3
   10b88:	2b00      	cmp	r3, #0
   10b8a:	d013      	beq.n	10bb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   10b8c:	490c      	ldr	r1, [pc, #48]	; (10bc0 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   10b8e:	2000      	movs	r0, #0
   10b90:	4b0c      	ldr	r3, [pc, #48]	; (10bc4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   10b92:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   10b94:	490c      	ldr	r1, [pc, #48]	; (10bc8 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   10b96:	2001      	movs	r0, #1
   10b98:	4b0a      	ldr	r3, [pc, #40]	; (10bc4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   10b9a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   10b9c:	4b0b      	ldr	r3, [pc, #44]	; (10bcc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10b9e:	681b      	ldr	r3, [r3, #0]
   10ba0:	2201      	movs	r2, #1
   10ba2:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   10ba4:	4b09      	ldr	r3, [pc, #36]	; (10bcc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10ba6:	681b      	ldr	r3, [r3, #0]
   10ba8:	2201      	movs	r2, #1
   10baa:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   10bac:	4b07      	ldr	r3, [pc, #28]	; (10bcc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10bae:	681b      	ldr	r3, [r3, #0]
   10bb0:	2201      	movs	r2, #1
   10bb2:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   10bb4:	2300      	movs	r3, #0
}
   10bb6:	4618      	mov	r0, r3
   10bb8:	3708      	adds	r7, #8
   10bba:	46bd      	mov	sp, r7
   10bbc:	bd80      	pop	{r7, pc}
   10bbe:	bf00      	nop
   10bc0:	00010b09 	.word	0x00010b09
   10bc4:	0000dff9 	.word	0x0000dff9
   10bc8:	00010b41 	.word	0x00010b41
   10bcc:	200034b4 	.word	0x200034b4

00010bd0 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   10bd0:	b580      	push	{r7, lr}
   10bd2:	b082      	sub	sp, #8
   10bd4:	af00      	add	r7, sp, #0
   10bd6:	6078      	str	r0, [r7, #4]
   10bd8:	687b      	ldr	r3, [r7, #4]
   10bda:	4618      	mov	r0, r3
   10bdc:	4b0a      	ldr	r3, [pc, #40]	; (10c08 <_ZN9CDC_ClassC1Ev+0x38>)
   10bde:	4798      	blx	r3
   10be0:	687b      	ldr	r3, [r7, #4]
   10be2:	3310      	adds	r3, #16
   10be4:	4618      	mov	r0, r3
   10be6:	4b09      	ldr	r3, [pc, #36]	; (10c0c <_ZN9CDC_ClassC1Ev+0x3c>)
   10be8:	4798      	blx	r3
   10bea:	4a09      	ldr	r2, [pc, #36]	; (10c10 <_ZN9CDC_ClassC1Ev+0x40>)
   10bec:	687b      	ldr	r3, [r7, #4]
   10bee:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   10bf0:	687b      	ldr	r3, [r7, #4]
   10bf2:	f04f 32ff 	mov.w	r2, #4294967295
   10bf6:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   10bf8:	4a06      	ldr	r2, [pc, #24]	; (10c14 <_ZN9CDC_ClassC1Ev+0x44>)
   10bfa:	687b      	ldr	r3, [r7, #4]
   10bfc:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   10bfe:	687b      	ldr	r3, [r7, #4]
   10c00:	4618      	mov	r0, r3
   10c02:	3708      	adds	r7, #8
   10c04:	46bd      	mov	sp, r7
   10c06:	bd80      	pop	{r7, pc}
   10c08:	00010ab1 	.word	0x00010ab1
   10c0c:	000112ed 	.word	0x000112ed
   10c10:	0001bab8 	.word	0x0001bab8
   10c14:	200034b4 	.word	0x200034b4

00010c18 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   10c18:	b580      	push	{r7, lr}
   10c1a:	b082      	sub	sp, #8
   10c1c:	af00      	add	r7, sp, #0
   10c1e:	6078      	str	r0, [r7, #4]
   10c20:	4a06      	ldr	r2, [pc, #24]	; (10c3c <_ZN9CDC_ClassD1Ev+0x24>)
   10c22:	687b      	ldr	r3, [r7, #4]
   10c24:	601a      	str	r2, [r3, #0]
   10c26:	687b      	ldr	r3, [r7, #4]
   10c28:	3310      	adds	r3, #16
   10c2a:	4618      	mov	r0, r3
   10c2c:	4b04      	ldr	r3, [pc, #16]	; (10c40 <_ZN9CDC_ClassD1Ev+0x28>)
   10c2e:	4798      	blx	r3
{
} //~CDC_Class
   10c30:	687b      	ldr	r3, [r7, #4]
   10c32:	4618      	mov	r0, r3
   10c34:	3708      	adds	r7, #8
   10c36:	46bd      	mov	sp, r7
   10c38:	bd80      	pop	{r7, pc}
   10c3a:	bf00      	nop
   10c3c:	0001bab8 	.word	0x0001bab8
   10c40:	0001130d 	.word	0x0001130d

00010c44 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   10c44:	b580      	push	{r7, lr}
   10c46:	b082      	sub	sp, #8
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
	
	OnInit();
   10c4c:	687b      	ldr	r3, [r7, #4]
   10c4e:	3310      	adds	r3, #16
   10c50:	4618      	mov	r0, r3
   10c52:	4b09      	ldr	r3, [pc, #36]	; (10c78 <_ZN9CDC_Class4InitEv+0x34>)
   10c54:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   10c56:	4909      	ldr	r1, [pc, #36]	; (10c7c <_ZN9CDC_Class4InitEv+0x38>)
   10c58:	2003      	movs	r0, #3
   10c5a:	4b09      	ldr	r3, [pc, #36]	; (10c80 <_ZN9CDC_Class4InitEv+0x3c>)
   10c5c:	4798      	blx	r3
	delay_ms(100);
   10c5e:	2064      	movs	r0, #100	; 0x64
   10c60:	4b08      	ldr	r3, [pc, #32]	; (10c84 <_ZN9CDC_Class4InitEv+0x40>)
   10c62:	4798      	blx	r3
		
	if (connected)
   10c64:	687b      	ldr	r3, [r7, #4]
   10c66:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   10c68:	2064      	movs	r0, #100	; 0x64
   10c6a:	4b06      	ldr	r3, [pc, #24]	; (10c84 <_ZN9CDC_Class4InitEv+0x40>)
   10c6c:	4798      	blx	r3

	

}
   10c6e:	bf00      	nop
   10c70:	3708      	adds	r7, #8
   10c72:	46bd      	mov	sp, r7
   10c74:	bd80      	pop	{r7, pc}
   10c76:	bf00      	nop
   10c78:	00011321 	.word	0x00011321
   10c7c:	00010b79 	.word	0x00010b79
   10c80:	0000dff9 	.word	0x0000dff9
   10c84:	000036c9 	.word	0x000036c9

00010c88 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   10c88:	b580      	push	{r7, lr}
   10c8a:	b082      	sub	sp, #8
   10c8c:	af00      	add	r7, sp, #0
   10c8e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   10c90:	4b03      	ldr	r3, [pc, #12]	; (10ca0 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   10c92:	4798      	blx	r3
   10c94:	4603      	mov	r3, r0
	
}
   10c96:	4618      	mov	r0, r3
   10c98:	3708      	adds	r7, #8
   10c9a:	46bd      	mov	sp, r7
   10c9c:	bd80      	pop	{r7, pc}
   10c9e:	bf00      	nop
   10ca0:	0000e071 	.word	0x0000e071

00010ca4 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   10ca4:	b580      	push	{r7, lr}
   10ca6:	b084      	sub	sp, #16
   10ca8:	af00      	add	r7, sp, #0
   10caa:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   10cac:	687b      	ldr	r3, [r7, #4]
   10cae:	699b      	ldr	r3, [r3, #24]
   10cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
   10cb4:	bf14      	ite	ne
   10cb6:	2301      	movne	r3, #1
   10cb8:	2300      	moveq	r3, #0
   10cba:	b2db      	uxtb	r3, r3
   10cbc:	2b00      	cmp	r3, #0
   10cbe:	d002      	beq.n	10cc6 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   10cc0:	687b      	ldr	r3, [r7, #4]
   10cc2:	699b      	ldr	r3, [r3, #24]
   10cc4:	e011      	b.n	10cea <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   10cc6:	687b      	ldr	r3, [r7, #4]
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	331c      	adds	r3, #28
   10ccc:	681b      	ldr	r3, [r3, #0]
   10cce:	f107 010f 	add.w	r1, r7, #15
   10cd2:	2201      	movs	r2, #1
   10cd4:	6878      	ldr	r0, [r7, #4]
   10cd6:	4798      	blx	r3
   10cd8:	4602      	mov	r2, r0
   10cda:	687b      	ldr	r3, [r7, #4]
   10cdc:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   10cde:	7bfb      	ldrb	r3, [r7, #15]
   10ce0:	461a      	mov	r2, r3
   10ce2:	687b      	ldr	r3, [r7, #4]
   10ce4:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   10ce6:	687b      	ldr	r3, [r7, #4]
   10ce8:	699b      	ldr	r3, [r3, #24]
}
   10cea:	4618      	mov	r0, r3
   10cec:	3710      	adds	r7, #16
   10cee:	46bd      	mov	sp, r7
   10cf0:	bd80      	pop	{r7, pc}
	...

00010cf4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   10cf4:	b580      	push	{r7, lr}
   10cf6:	b086      	sub	sp, #24
   10cf8:	af00      	add	r7, sp, #0
   10cfa:	60f8      	str	r0, [r7, #12]
   10cfc:	60b9      	str	r1, [r7, #8]
   10cfe:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   10d00:	68fb      	ldr	r3, [r7, #12]
   10d02:	7c1b      	ldrb	r3, [r3, #16]
   10d04:	b2db      	uxtb	r3, r3
   10d06:	2b00      	cmp	r3, #0
   10d08:	d02e      	beq.n	10d68 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10d0a:	687a      	ldr	r2, [r7, #4]
   10d0c:	4613      	mov	r3, r2
   10d0e:	009b      	lsls	r3, r3, #2
   10d10:	4413      	add	r3, r2
   10d12:	005b      	lsls	r3, r3, #1
   10d14:	461a      	mov	r2, r3
   10d16:	4918      	ldr	r1, [pc, #96]	; (10d78 <_ZN9CDC_Class8readDataEPvl+0x84>)
   10d18:	4818      	ldr	r0, [pc, #96]	; (10d7c <_ZN9CDC_Class8readDataEPvl+0x88>)
   10d1a:	4b19      	ldr	r3, [pc, #100]	; (10d80 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   10d1c:	4798      	blx	r3
		rxReady=false;
   10d1e:	68fb      	ldr	r3, [r7, #12]
   10d20:	2200      	movs	r2, #0
   10d22:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	4619      	mov	r1, r3
   10d28:	68b8      	ldr	r0, [r7, #8]
   10d2a:	4b16      	ldr	r3, [pc, #88]	; (10d84 <_ZN9CDC_Class8readDataEPvl+0x90>)
   10d2c:	4798      	blx	r3
   10d2e:	4603      	mov	r3, r0
   10d30:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   10d32:	68fb      	ldr	r3, [r7, #12]
   10d34:	7d5b      	ldrb	r3, [r3, #21]
   10d36:	b2db      	uxtb	r3, r3
   10d38:	f083 0301 	eor.w	r3, r3, #1
   10d3c:	b2db      	uxtb	r3, r3
   10d3e:	2b00      	cmp	r3, #0
   10d40:	d006      	beq.n	10d50 <_ZN9CDC_Class8readDataEPvl+0x5c>
   10d42:	68fb      	ldr	r3, [r7, #12]
   10d44:	7c1b      	ldrb	r3, [r3, #16]
   10d46:	b2db      	uxtb	r3, r3
   10d48:	2b00      	cmp	r3, #0
   10d4a:	d001      	beq.n	10d50 <_ZN9CDC_Class8readDataEPvl+0x5c>
   10d4c:	2301      	movs	r3, #1
   10d4e:	e000      	b.n	10d52 <_ZN9CDC_Class8readDataEPvl+0x5e>
   10d50:	2300      	movs	r3, #0
   10d52:	2b00      	cmp	r3, #0
   10d54:	d000      	beq.n	10d58 <_ZN9CDC_Class8readDataEPvl+0x64>
   10d56:	e7ec      	b.n	10d32 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   10d58:	4808      	ldr	r0, [pc, #32]	; (10d7c <_ZN9CDC_Class8readDataEPvl+0x88>)
   10d5a:	4b0b      	ldr	r3, [pc, #44]	; (10d88 <_ZN9CDC_Class8readDataEPvl+0x94>)
   10d5c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10d5e:	4906      	ldr	r1, [pc, #24]	; (10d78 <_ZN9CDC_Class8readDataEPvl+0x84>)
   10d60:	4806      	ldr	r0, [pc, #24]	; (10d7c <_ZN9CDC_Class8readDataEPvl+0x88>)
   10d62:	4b0a      	ldr	r3, [pc, #40]	; (10d8c <_ZN9CDC_Class8readDataEPvl+0x98>)
   10d64:	4798      	blx	r3
   10d66:	e001      	b.n	10d6c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   10d68:	2300      	movs	r3, #0
   10d6a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   10d6c:	7dfb      	ldrb	r3, [r7, #23]
}
   10d6e:	4618      	mov	r0, r3
   10d70:	3718      	adds	r7, #24
   10d72:	46bd      	mov	sp, r7
   10d74:	bd80      	pop	{r7, pc}
   10d76:	bf00      	nop
   10d78:	00010ae1 	.word	0x00010ae1
   10d7c:	20003454 	.word	0x20003454
   10d80:	000107b9 	.word	0x000107b9
   10d84:	0000df4d 	.word	0x0000df4d
   10d88:	00010645 	.word	0x00010645
   10d8c:	00010761 	.word	0x00010761

00010d90 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   10d90:	b580      	push	{r7, lr}
   10d92:	b086      	sub	sp, #24
   10d94:	af00      	add	r7, sp, #0
   10d96:	60f8      	str	r0, [r7, #12]
   10d98:	60b9      	str	r1, [r7, #8]
   10d9a:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   10d9c:	68fb      	ldr	r3, [r7, #12]
   10d9e:	2200      	movs	r2, #0
   10da0:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   10da2:	687b      	ldr	r3, [r7, #4]
   10da4:	4619      	mov	r1, r3
   10da6:	68b8      	ldr	r0, [r7, #8]
   10da8:	4b04      	ldr	r3, [pc, #16]	; (10dbc <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   10daa:	4798      	blx	r3
   10dac:	4603      	mov	r3, r0
   10dae:	617b      	str	r3, [r7, #20]
	return r;
   10db0:	697b      	ldr	r3, [r7, #20]
}
   10db2:	4618      	mov	r0, r3
   10db4:	3718      	adds	r7, #24
   10db6:	46bd      	mov	sp, r7
   10db8:	bd80      	pop	{r7, pc}
   10dba:	bf00      	nop
   10dbc:	0000df4d 	.word	0x0000df4d

00010dc0 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   10dc0:	b580      	push	{r7, lr}
   10dc2:	b084      	sub	sp, #16
   10dc4:	af00      	add	r7, sp, #0
   10dc6:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   10dc8:	687b      	ldr	r3, [r7, #4]
   10dca:	2200      	movs	r2, #0
   10dcc:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   10dce:	f107 030f 	add.w	r3, r7, #15
   10dd2:	2101      	movs	r1, #1
   10dd4:	4618      	mov	r0, r3
   10dd6:	4b08      	ldr	r3, [pc, #32]	; (10df8 <_ZN9CDC_Class4readEv+0x38>)
   10dd8:	4798      	blx	r3
	while(!rxReady);
   10dda:	687b      	ldr	r3, [r7, #4]
   10ddc:	7d5b      	ldrb	r3, [r3, #21]
   10dde:	b2db      	uxtb	r3, r3
   10de0:	f083 0301 	eor.w	r3, r3, #1
   10de4:	b2db      	uxtb	r3, r3
   10de6:	2b00      	cmp	r3, #0
   10de8:	d000      	beq.n	10dec <_ZN9CDC_Class4readEv+0x2c>
   10dea:	e7f6      	b.n	10dda <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   10dec:	7bfb      	ldrb	r3, [r7, #15]
}
   10dee:	4618      	mov	r0, r3
   10df0:	3710      	adds	r7, #16
   10df2:	46bd      	mov	sp, r7
   10df4:	bd80      	pop	{r7, pc}
   10df6:	bf00      	nop
   10df8:	0000df4d 	.word	0x0000df4d

00010dfc <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   10dfc:	b580      	push	{r7, lr}
   10dfe:	b082      	sub	sp, #8
   10e00:	af00      	add	r7, sp, #0
   10e02:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   10e04:	687b      	ldr	r3, [r7, #4]
   10e06:	331c      	adds	r3, #28
   10e08:	2140      	movs	r1, #64	; 0x40
   10e0a:	4618      	mov	r0, r3
   10e0c:	4b02      	ldr	r3, [pc, #8]	; (10e18 <_ZN9CDC_Class5flushEv+0x1c>)
   10e0e:	4798      	blx	r3
}
   10e10:	bf00      	nop
   10e12:	3708      	adds	r7, #8
   10e14:	46bd      	mov	sp, r7
   10e16:	bd80      	pop	{r7, pc}
   10e18:	0000df91 	.word	0x0000df91

00010e1c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   10e1c:	b580      	push	{r7, lr}
   10e1e:	b082      	sub	sp, #8
   10e20:	af00      	add	r7, sp, #0
   10e22:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   10e24:	4b02      	ldr	r3, [pc, #8]	; (10e30 <_ZN9CDC_Class5clearEv+0x14>)
   10e26:	4798      	blx	r3
}
   10e28:	bf00      	nop
   10e2a:	3708      	adds	r7, #8
   10e2c:	46bd      	mov	sp, r7
   10e2e:	bd80      	pop	{r7, pc}
   10e30:	0000dfd5 	.word	0x0000dfd5

00010e34 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   10e34:	b580      	push	{r7, lr}
   10e36:	b082      	sub	sp, #8
   10e38:	af00      	add	r7, sp, #0
   10e3a:	6078      	str	r0, [r7, #4]
   10e3c:	460b      	mov	r3, r1
   10e3e:	70fb      	strb	r3, [r7, #3]
	if (connected){
   10e40:	687b      	ldr	r3, [r7, #4]
   10e42:	7c1b      	ldrb	r3, [r3, #16]
   10e44:	b2db      	uxtb	r3, r3
   10e46:	2b00      	cmp	r3, #0
   10e48:	d012      	beq.n	10e70 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   10e4a:	687b      	ldr	r3, [r7, #4]
   10e4c:	7d1b      	ldrb	r3, [r3, #20]
   10e4e:	b2db      	uxtb	r3, r3
   10e50:	f083 0301 	eor.w	r3, r3, #1
   10e54:	b2db      	uxtb	r3, r3
   10e56:	2b00      	cmp	r3, #0
   10e58:	d000      	beq.n	10e5c <_ZN9CDC_Class5writeEh+0x28>
   10e5a:	e7f6      	b.n	10e4a <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   10e5c:	687b      	ldr	r3, [r7, #4]
   10e5e:	681b      	ldr	r3, [r3, #0]
   10e60:	3324      	adds	r3, #36	; 0x24
   10e62:	681b      	ldr	r3, [r3, #0]
   10e64:	1cf9      	adds	r1, r7, #3
   10e66:	2201      	movs	r2, #1
   10e68:	6878      	ldr	r0, [r7, #4]
   10e6a:	4798      	blx	r3
   10e6c:	4603      	mov	r3, r0
   10e6e:	e000      	b.n	10e72 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   10e70:	2300      	movs	r3, #0
	}
		
}
   10e72:	4618      	mov	r0, r3
   10e74:	3708      	adds	r7, #8
   10e76:	46bd      	mov	sp, r7
   10e78:	bd80      	pop	{r7, pc}
	...

00010e7c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   10e7c:	b580      	push	{r7, lr}
   10e7e:	b086      	sub	sp, #24
   10e80:	af00      	add	r7, sp, #0
   10e82:	60f8      	str	r0, [r7, #12]
   10e84:	60b9      	str	r1, [r7, #8]
   10e86:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   10e88:	68fb      	ldr	r3, [r7, #12]
   10e8a:	7c1b      	ldrb	r3, [r3, #16]
   10e8c:	b2db      	uxtb	r3, r3
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d02f      	beq.n	10ef2 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10e92:	687a      	ldr	r2, [r7, #4]
   10e94:	4613      	mov	r3, r2
   10e96:	009b      	lsls	r3, r3, #2
   10e98:	4413      	add	r3, r2
   10e9a:	005b      	lsls	r3, r3, #1
   10e9c:	461a      	mov	r2, r3
   10e9e:	4917      	ldr	r1, [pc, #92]	; (10efc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10ea0:	4817      	ldr	r0, [pc, #92]	; (10f00 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10ea2:	4b18      	ldr	r3, [pc, #96]	; (10f04 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   10ea4:	4798      	blx	r3
		txReady=false;
   10ea6:	68fb      	ldr	r3, [r7, #12]
   10ea8:	2200      	movs	r2, #0
   10eaa:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10eac:	687b      	ldr	r3, [r7, #4]
   10eae:	4619      	mov	r1, r3
   10eb0:	68b8      	ldr	r0, [r7, #8]
   10eb2:	4b15      	ldr	r3, [pc, #84]	; (10f08 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   10eb4:	4798      	blx	r3
   10eb6:	4603      	mov	r3, r0
   10eb8:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   10eba:	68fb      	ldr	r3, [r7, #12]
   10ebc:	7d1b      	ldrb	r3, [r3, #20]
   10ebe:	b2db      	uxtb	r3, r3
   10ec0:	f083 0301 	eor.w	r3, r3, #1
   10ec4:	b2db      	uxtb	r3, r3
   10ec6:	2b00      	cmp	r3, #0
   10ec8:	d006      	beq.n	10ed8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10eca:	68fb      	ldr	r3, [r7, #12]
   10ecc:	7c1b      	ldrb	r3, [r3, #16]
   10ece:	b2db      	uxtb	r3, r3
   10ed0:	2b00      	cmp	r3, #0
   10ed2:	d001      	beq.n	10ed8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10ed4:	2301      	movs	r3, #1
   10ed6:	e000      	b.n	10eda <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   10ed8:	2300      	movs	r3, #0
   10eda:	2b00      	cmp	r3, #0
   10edc:	d000      	beq.n	10ee0 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   10ede:	e7ec      	b.n	10eba <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   10ee0:	4807      	ldr	r0, [pc, #28]	; (10f00 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10ee2:	4b0a      	ldr	r3, [pc, #40]	; (10f0c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   10ee4:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10ee6:	4905      	ldr	r1, [pc, #20]	; (10efc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10ee8:	4805      	ldr	r0, [pc, #20]	; (10f00 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10eea:	4b09      	ldr	r3, [pc, #36]	; (10f10 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   10eec:	4798      	blx	r3
		return r;
   10eee:	697b      	ldr	r3, [r7, #20]
   10ef0:	e000      	b.n	10ef4 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   10ef2:	2300      	movs	r3, #0
	}
	

}
   10ef4:	4618      	mov	r0, r3
   10ef6:	3718      	adds	r7, #24
   10ef8:	46bd      	mov	sp, r7
   10efa:	bd80      	pop	{r7, pc}
   10efc:	00010ae1 	.word	0x00010ae1
   10f00:	20003454 	.word	0x20003454
   10f04:	000107b9 	.word	0x000107b9
   10f08:	0000df91 	.word	0x0000df91
   10f0c:	00010645 	.word	0x00010645
   10f10:	00010761 	.word	0x00010761

00010f14 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   10f14:	b580      	push	{r7, lr}
   10f16:	b086      	sub	sp, #24
   10f18:	af00      	add	r7, sp, #0
   10f1a:	60f8      	str	r0, [r7, #12]
   10f1c:	60b9      	str	r1, [r7, #8]
   10f1e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   10f20:	68fb      	ldr	r3, [r7, #12]
   10f22:	2200      	movs	r2, #0
   10f24:	751a      	strb	r2, [r3, #20]

 	if (connected){
   10f26:	68fb      	ldr	r3, [r7, #12]
   10f28:	7c1b      	ldrb	r3, [r3, #16]
   10f2a:	b2db      	uxtb	r3, r3
   10f2c:	2b00      	cmp	r3, #0
   10f2e:	d02a      	beq.n	10f86 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10f30:	687a      	ldr	r2, [r7, #4]
   10f32:	4613      	mov	r3, r2
   10f34:	009b      	lsls	r3, r3, #2
   10f36:	4413      	add	r3, r2
   10f38:	005b      	lsls	r3, r3, #1
   10f3a:	461a      	mov	r2, r3
   10f3c:	4915      	ldr	r1, [pc, #84]	; (10f94 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10f3e:	4816      	ldr	r0, [pc, #88]	; (10f98 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10f40:	4b16      	ldr	r3, [pc, #88]	; (10f9c <_ZN9CDC_Class5writeEPKhj+0x88>)
   10f42:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10f44:	6879      	ldr	r1, [r7, #4]
   10f46:	68b8      	ldr	r0, [r7, #8]
   10f48:	4b15      	ldr	r3, [pc, #84]	; (10fa0 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   10f4a:	4798      	blx	r3
   10f4c:	4603      	mov	r3, r0
   10f4e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   10f50:	68fb      	ldr	r3, [r7, #12]
   10f52:	7d1b      	ldrb	r3, [r3, #20]
   10f54:	b2db      	uxtb	r3, r3
   10f56:	f083 0301 	eor.w	r3, r3, #1
   10f5a:	b2db      	uxtb	r3, r3
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	d006      	beq.n	10f6e <_ZN9CDC_Class5writeEPKhj+0x5a>
   10f60:	68fb      	ldr	r3, [r7, #12]
   10f62:	7c1b      	ldrb	r3, [r3, #16]
   10f64:	b2db      	uxtb	r3, r3
   10f66:	2b00      	cmp	r3, #0
   10f68:	d001      	beq.n	10f6e <_ZN9CDC_Class5writeEPKhj+0x5a>
   10f6a:	2301      	movs	r3, #1
   10f6c:	e000      	b.n	10f70 <_ZN9CDC_Class5writeEPKhj+0x5c>
   10f6e:	2300      	movs	r3, #0
   10f70:	2b00      	cmp	r3, #0
   10f72:	d000      	beq.n	10f76 <_ZN9CDC_Class5writeEPKhj+0x62>
   10f74:	e7ec      	b.n	10f50 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   10f76:	4808      	ldr	r0, [pc, #32]	; (10f98 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10f78:	4b0a      	ldr	r3, [pc, #40]	; (10fa4 <_ZN9CDC_Class5writeEPKhj+0x90>)
   10f7a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10f7c:	4905      	ldr	r1, [pc, #20]	; (10f94 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10f7e:	4806      	ldr	r0, [pc, #24]	; (10f98 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10f80:	4b09      	ldr	r3, [pc, #36]	; (10fa8 <_ZN9CDC_Class5writeEPKhj+0x94>)
   10f82:	4798      	blx	r3
   10f84:	e001      	b.n	10f8a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   10f86:	2300      	movs	r3, #0
   10f88:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   10f8a:	697b      	ldr	r3, [r7, #20]
}
   10f8c:	4618      	mov	r0, r3
   10f8e:	3718      	adds	r7, #24
   10f90:	46bd      	mov	sp, r7
   10f92:	bd80      	pop	{r7, pc}
   10f94:	00010ae1 	.word	0x00010ae1
   10f98:	20003454 	.word	0x20003454
   10f9c:	000107b9 	.word	0x000107b9
   10fa0:	0000df91 	.word	0x0000df91
   10fa4:	00010645 	.word	0x00010645
   10fa8:	00010761 	.word	0x00010761

00010fac <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   10fac:	b480      	push	{r7}
   10fae:	b083      	sub	sp, #12
   10fb0:	af00      	add	r7, sp, #0
   10fb2:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   10fb4:	687b      	ldr	r3, [r7, #4]
   10fb6:	7d5b      	ldrb	r3, [r3, #21]
   10fb8:	b2db      	uxtb	r3, r3
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d006      	beq.n	10fcc <_ZN9CDC_Class9availableEv+0x20>
   10fbe:	687b      	ldr	r3, [r7, #4]
   10fc0:	7d1b      	ldrb	r3, [r3, #20]
   10fc2:	b2db      	uxtb	r3, r3
   10fc4:	2b00      	cmp	r3, #0
   10fc6:	d001      	beq.n	10fcc <_ZN9CDC_Class9availableEv+0x20>
   10fc8:	2301      	movs	r3, #1
   10fca:	e000      	b.n	10fce <_ZN9CDC_Class9availableEv+0x22>
   10fcc:	2300      	movs	r3, #0
   10fce:	2b00      	cmp	r3, #0
   10fd0:	d001      	beq.n	10fd6 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   10fd2:	2301      	movs	r3, #1
   10fd4:	e000      	b.n	10fd8 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   10fd6:	2300      	movs	r3, #0
	}
	
}
   10fd8:	4618      	mov	r0, r3
   10fda:	370c      	adds	r7, #12
   10fdc:	46bd      	mov	sp, r7
   10fde:	bc80      	pop	{r7}
   10fe0:	4770      	bx	lr
	...

00010fe4 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   10fe4:	b580      	push	{r7, lr}
   10fe6:	b082      	sub	sp, #8
   10fe8:	af00      	add	r7, sp, #0
   10fea:	6078      	str	r0, [r7, #4]
   10fec:	6039      	str	r1, [r7, #0]
   10fee:	687b      	ldr	r3, [r7, #4]
   10ff0:	2b01      	cmp	r3, #1
   10ff2:	d154      	bne.n	1109e <_Z41__static_initialization_and_destruction_0ii+0xba>
   10ff4:	683b      	ldr	r3, [r7, #0]
   10ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ffa:	4293      	cmp	r3, r2
   10ffc:	d14f      	bne.n	1109e <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10ffe:	492a      	ldr	r1, [pc, #168]	; (110a8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11000:	482a      	ldr	r0, [pc, #168]	; (110ac <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11002:	4b2b      	ldr	r3, [pc, #172]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11004:	4798      	blx	r3
   11006:	4a2b      	ldr	r2, [pc, #172]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11008:	492b      	ldr	r1, [pc, #172]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1100a:	4828      	ldr	r0, [pc, #160]	; (110ac <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1100c:	4b2b      	ldr	r3, [pc, #172]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1100e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   11010:	492b      	ldr	r1, [pc, #172]	; (110c0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   11012:	482c      	ldr	r0, [pc, #176]	; (110c4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11014:	4b26      	ldr	r3, [pc, #152]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11016:	4798      	blx	r3
   11018:	4a26      	ldr	r2, [pc, #152]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1101a:	4927      	ldr	r1, [pc, #156]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1101c:	4829      	ldr	r0, [pc, #164]	; (110c4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1101e:	4b27      	ldr	r3, [pc, #156]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11020:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   11022:	4929      	ldr	r1, [pc, #164]	; (110c8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   11024:	4829      	ldr	r0, [pc, #164]	; (110cc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11026:	4b22      	ldr	r3, [pc, #136]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11028:	4798      	blx	r3
   1102a:	4a22      	ldr	r2, [pc, #136]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1102c:	4922      	ldr	r1, [pc, #136]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1102e:	4827      	ldr	r0, [pc, #156]	; (110cc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11030:	4b22      	ldr	r3, [pc, #136]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11032:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11034:	4926      	ldr	r1, [pc, #152]	; (110d0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   11036:	4827      	ldr	r0, [pc, #156]	; (110d4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11038:	4b1d      	ldr	r3, [pc, #116]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1103a:	4798      	blx	r3
   1103c:	4a1d      	ldr	r2, [pc, #116]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1103e:	491e      	ldr	r1, [pc, #120]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11040:	4824      	ldr	r0, [pc, #144]	; (110d4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11042:	4b1e      	ldr	r3, [pc, #120]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11044:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   11046:	4924      	ldr	r1, [pc, #144]	; (110d8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   11048:	4824      	ldr	r0, [pc, #144]	; (110dc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1104a:	4b19      	ldr	r3, [pc, #100]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1104c:	4798      	blx	r3
   1104e:	4a19      	ldr	r2, [pc, #100]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11050:	4919      	ldr	r1, [pc, #100]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11052:	4822      	ldr	r0, [pc, #136]	; (110dc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11054:	4b19      	ldr	r3, [pc, #100]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11056:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11058:	4921      	ldr	r1, [pc, #132]	; (110e0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   1105a:	4822      	ldr	r0, [pc, #136]	; (110e4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1105c:	4b14      	ldr	r3, [pc, #80]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1105e:	4798      	blx	r3
   11060:	4a14      	ldr	r2, [pc, #80]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11062:	4915      	ldr	r1, [pc, #84]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11064:	481f      	ldr	r0, [pc, #124]	; (110e4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11066:	4b15      	ldr	r3, [pc, #84]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11068:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1106a:	491f      	ldr	r1, [pc, #124]	; (110e8 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   1106c:	481f      	ldr	r0, [pc, #124]	; (110ec <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1106e:	4b10      	ldr	r3, [pc, #64]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11070:	4798      	blx	r3
   11072:	4a10      	ldr	r2, [pc, #64]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11074:	4910      	ldr	r1, [pc, #64]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11076:	481d      	ldr	r0, [pc, #116]	; (110ec <_Z41__static_initialization_and_destruction_0ii+0x108>)
   11078:	4b10      	ldr	r3, [pc, #64]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1107a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   1107c:	491c      	ldr	r1, [pc, #112]	; (110f0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   1107e:	481d      	ldr	r0, [pc, #116]	; (110f4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11080:	4b0b      	ldr	r3, [pc, #44]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11082:	4798      	blx	r3
   11084:	4a0b      	ldr	r2, [pc, #44]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11086:	490c      	ldr	r1, [pc, #48]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11088:	481a      	ldr	r0, [pc, #104]	; (110f4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1108a:	4b0c      	ldr	r3, [pc, #48]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1108c:	4798      	blx	r3
   1108e:	481a      	ldr	r0, [pc, #104]	; (110f8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   11090:	4b1a      	ldr	r3, [pc, #104]	; (110fc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   11092:	4798      	blx	r3
   11094:	4a07      	ldr	r2, [pc, #28]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11096:	491a      	ldr	r1, [pc, #104]	; (11100 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   11098:	4817      	ldr	r0, [pc, #92]	; (110f8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1109a:	4b08      	ldr	r3, [pc, #32]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1109c:	4798      	blx	r3
   1109e:	bf00      	nop
   110a0:	3708      	adds	r7, #8
   110a2:	46bd      	mov	sp, r7
   110a4:	bd80      	pop	{r7, pc}
   110a6:	bf00      	nop
   110a8:	2000df58 	.word	0x2000df58
   110ac:	200033b4 	.word	0x200033b4
   110b0:	000104e5 	.word	0x000104e5
   110b4:	20000000 	.word	0x20000000
   110b8:	0001051d 	.word	0x0001051d
   110bc:	0001ab61 	.word	0x0001ab61
   110c0:	2000dfec 	.word	0x2000dfec
   110c4:	200033d4 	.word	0x200033d4
   110c8:	2000e110 	.word	0x2000e110
   110cc:	200033f4 	.word	0x200033f4
   110d0:	2000e00c 	.word	0x2000e00c
   110d4:	20003414 	.word	0x20003414
   110d8:	2000e0d0 	.word	0x2000e0d0
   110dc:	20003434 	.word	0x20003434
   110e0:	2000e0f0 	.word	0x2000e0f0
   110e4:	20003454 	.word	0x20003454
   110e8:	2000dfc8 	.word	0x2000dfc8
   110ec:	20003474 	.word	0x20003474
   110f0:	2000e068 	.word	0x2000e068
   110f4:	20003494 	.word	0x20003494
   110f8:	200034b8 	.word	0x200034b8
   110fc:	00010bd1 	.word	0x00010bd1
   11100:	00010c19 	.word	0x00010c19

00011104 <_GLOBAL__sub_I_ptrCDCClass>:
   11104:	b580      	push	{r7, lr}
   11106:	af00      	add	r7, sp, #0
   11108:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1110c:	2001      	movs	r0, #1
   1110e:	4b01      	ldr	r3, [pc, #4]	; (11114 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   11110:	4798      	blx	r3
   11112:	bd80      	pop	{r7, pc}
   11114:	00010fe5 	.word	0x00010fe5

00011118 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   11118:	b580      	push	{r7, lr}
   1111a:	b086      	sub	sp, #24
   1111c:	af00      	add	r7, sp, #0
   1111e:	60f8      	str	r0, [r7, #12]
   11120:	60b9      	str	r1, [r7, #8]
   11122:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   11124:	2300      	movs	r3, #0
   11126:	617b      	str	r3, [r7, #20]
  while (size--) {
   11128:	687b      	ldr	r3, [r7, #4]
   1112a:	1e5a      	subs	r2, r3, #1
   1112c:	607a      	str	r2, [r7, #4]
   1112e:	2b00      	cmp	r3, #0
   11130:	bf14      	ite	ne
   11132:	2301      	movne	r3, #1
   11134:	2300      	moveq	r3, #0
   11136:	b2db      	uxtb	r3, r3
   11138:	2b00      	cmp	r3, #0
   1113a:	d016      	beq.n	1116a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   1113c:	68fb      	ldr	r3, [r7, #12]
   1113e:	681b      	ldr	r3, [r3, #0]
   11140:	681a      	ldr	r2, [r3, #0]
   11142:	68bb      	ldr	r3, [r7, #8]
   11144:	1c59      	adds	r1, r3, #1
   11146:	60b9      	str	r1, [r7, #8]
   11148:	781b      	ldrb	r3, [r3, #0]
   1114a:	4619      	mov	r1, r3
   1114c:	68f8      	ldr	r0, [r7, #12]
   1114e:	4790      	blx	r2
   11150:	4603      	mov	r3, r0
   11152:	2b00      	cmp	r3, #0
   11154:	bf14      	ite	ne
   11156:	2301      	movne	r3, #1
   11158:	2300      	moveq	r3, #0
   1115a:	b2db      	uxtb	r3, r3
   1115c:	2b00      	cmp	r3, #0
   1115e:	d003      	beq.n	11168 <_ZN5Print5writeEPKhj+0x50>
   11160:	697b      	ldr	r3, [r7, #20]
   11162:	3301      	adds	r3, #1
   11164:	617b      	str	r3, [r7, #20]
  while (size--) {
   11166:	e7df      	b.n	11128 <_ZN5Print5writeEPKhj+0x10>
    else break;
   11168:	bf00      	nop
  }
  return n;
   1116a:	697b      	ldr	r3, [r7, #20]
}
   1116c:	4618      	mov	r0, r3
   1116e:	3718      	adds	r7, #24
   11170:	46bd      	mov	sp, r7
   11172:	bd80      	pop	{r7, pc}

00011174 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   11174:	b480      	push	{r7}
   11176:	b083      	sub	sp, #12
   11178:	af00      	add	r7, sp, #0
   1117a:	6078      	str	r0, [r7, #4]
   1117c:	460b      	mov	r3, r1
   1117e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   11180:	78fb      	ldrb	r3, [r7, #3]
   11182:	687a      	ldr	r2, [r7, #4]
   11184:	01db      	lsls	r3, r3, #7
   11186:	4413      	add	r3, r2
   11188:	681b      	ldr	r3, [r3, #0]
}
   1118a:	4618      	mov	r0, r3
   1118c:	370c      	adds	r7, #12
   1118e:	46bd      	mov	sp, r7
   11190:	bc80      	pop	{r7}
   11192:	4770      	bx	lr

00011194 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   11194:	b480      	push	{r7}
   11196:	b083      	sub	sp, #12
   11198:	af00      	add	r7, sp, #0
   1119a:	6078      	str	r0, [r7, #4]
   1119c:	460b      	mov	r3, r1
   1119e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   111a0:	78fb      	ldrb	r3, [r7, #3]
   111a2:	687a      	ldr	r2, [r7, #4]
   111a4:	01db      	lsls	r3, r3, #7
   111a6:	4413      	add	r3, r2
   111a8:	3310      	adds	r3, #16
   111aa:	681b      	ldr	r3, [r3, #0]
}
   111ac:	4618      	mov	r0, r3
   111ae:	370c      	adds	r7, #12
   111b0:	46bd      	mov	sp, r7
   111b2:	bc80      	pop	{r7}
   111b4:	4770      	bx	lr

000111b6 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   111b6:	b480      	push	{r7}
   111b8:	b083      	sub	sp, #12
   111ba:	af00      	add	r7, sp, #0
   111bc:	6078      	str	r0, [r7, #4]
   111be:	460b      	mov	r3, r1
   111c0:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   111c2:	78fb      	ldrb	r3, [r7, #3]
   111c4:	687a      	ldr	r2, [r7, #4]
   111c6:	01db      	lsls	r3, r3, #7
   111c8:	4413      	add	r3, r2
   111ca:	3320      	adds	r3, #32
   111cc:	681b      	ldr	r3, [r3, #0]
}
   111ce:	4618      	mov	r0, r3
   111d0:	370c      	adds	r7, #12
   111d2:	46bd      	mov	sp, r7
   111d4:	bc80      	pop	{r7}
   111d6:	4770      	bx	lr

000111d8 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   111d8:	b580      	push	{r7, lr}
   111da:	b086      	sub	sp, #24
   111dc:	af00      	add	r7, sp, #0
   111de:	4603      	mov	r3, r0
   111e0:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   111e2:	f107 030c 	add.w	r3, r7, #12
   111e6:	4618      	mov	r0, r3
   111e8:	4b13      	ldr	r3, [pc, #76]	; (11238 <_gpio_get_level+0x60>)
   111ea:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   111ec:	79fb      	ldrb	r3, [r7, #7]
   111ee:	4619      	mov	r1, r3
   111f0:	4812      	ldr	r0, [pc, #72]	; (1123c <_gpio_get_level+0x64>)
   111f2:	4b13      	ldr	r3, [pc, #76]	; (11240 <_gpio_get_level+0x68>)
   111f4:	4798      	blx	r3
   111f6:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   111f8:	79fb      	ldrb	r3, [r7, #7]
   111fa:	4619      	mov	r1, r3
   111fc:	480f      	ldr	r0, [pc, #60]	; (1123c <_gpio_get_level+0x64>)
   111fe:	4b11      	ldr	r3, [pc, #68]	; (11244 <_gpio_get_level+0x6c>)
   11200:	4798      	blx	r3
   11202:	4602      	mov	r2, r0
   11204:	697b      	ldr	r3, [r7, #20]
   11206:	43db      	mvns	r3, r3
   11208:	4013      	ands	r3, r2
   1120a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   1120c:	79fb      	ldrb	r3, [r7, #7]
   1120e:	4619      	mov	r1, r3
   11210:	480a      	ldr	r0, [pc, #40]	; (1123c <_gpio_get_level+0x64>)
   11212:	4b0d      	ldr	r3, [pc, #52]	; (11248 <_gpio_get_level+0x70>)
   11214:	4798      	blx	r3
   11216:	4602      	mov	r2, r0
   11218:	697b      	ldr	r3, [r7, #20]
   1121a:	4013      	ands	r3, r2
   1121c:	693a      	ldr	r2, [r7, #16]
   1121e:	4313      	orrs	r3, r2
   11220:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   11222:	f107 030c 	add.w	r3, r7, #12
   11226:	4618      	mov	r0, r3
   11228:	4b08      	ldr	r3, [pc, #32]	; (1124c <_gpio_get_level+0x74>)
   1122a:	4798      	blx	r3

	return tmp;
   1122c:	693b      	ldr	r3, [r7, #16]
}
   1122e:	4618      	mov	r0, r3
   11230:	3718      	adds	r7, #24
   11232:	46bd      	mov	sp, r7
   11234:	bd80      	pop	{r7, pc}
   11236:	bf00      	nop
   11238:	0000d16d 	.word	0x0000d16d
   1123c:	41008000 	.word	0x41008000
   11240:	00011175 	.word	0x00011175
   11244:	000111b7 	.word	0x000111b7
   11248:	00011195 	.word	0x00011195
   1124c:	0000d193 	.word	0x0000d193

00011250 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   11250:	b580      	push	{r7, lr}
   11252:	b082      	sub	sp, #8
   11254:	af00      	add	r7, sp, #0
   11256:	4603      	mov	r3, r0
   11258:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   1125a:	79fb      	ldrb	r3, [r7, #7]
   1125c:	115b      	asrs	r3, r3, #5
   1125e:	b2db      	uxtb	r3, r3
   11260:	4618      	mov	r0, r3
   11262:	4b09      	ldr	r3, [pc, #36]	; (11288 <gpio_get_pin_level+0x38>)
   11264:	4798      	blx	r3
   11266:	4601      	mov	r1, r0
   11268:	79fb      	ldrb	r3, [r7, #7]
   1126a:	f003 031f 	and.w	r3, r3, #31
   1126e:	2201      	movs	r2, #1
   11270:	fa02 f303 	lsl.w	r3, r2, r3
   11274:	400b      	ands	r3, r1
   11276:	2b00      	cmp	r3, #0
   11278:	bf14      	ite	ne
   1127a:	2301      	movne	r3, #1
   1127c:	2300      	moveq	r3, #0
   1127e:	b2db      	uxtb	r3, r3
}
   11280:	4618      	mov	r0, r3
   11282:	3708      	adds	r7, #8
   11284:	46bd      	mov	sp, r7
   11286:	bd80      	pop	{r7, pc}
   11288:	000111d9 	.word	0x000111d9

0001128c <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   1128c:	b480      	push	{r7}
   1128e:	b083      	sub	sp, #12
   11290:	af00      	add	r7, sp, #0
   11292:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   11294:	4b06      	ldr	r3, [pc, #24]	; (112b0 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   11296:	681b      	ldr	r3, [r3, #0]
   11298:	2201      	movs	r2, #1
   1129a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   1129c:	4b04      	ldr	r3, [pc, #16]	; (112b0 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   1129e:	681b      	ldr	r3, [r3, #0]
   112a0:	2200      	movs	r2, #0
   112a2:	705a      	strb	r2, [r3, #1]
}
   112a4:	bf00      	nop
   112a6:	370c      	adds	r7, #12
   112a8:	46bd      	mov	sp, r7
   112aa:	bc80      	pop	{r7}
   112ac:	4770      	bx	lr
   112ae:	bf00      	nop
   112b0:	20003618 	.word	0x20003618

000112b4 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   112b4:	b580      	push	{r7, lr}
   112b6:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   112b8:	2040      	movs	r0, #64	; 0x40
   112ba:	4b0a      	ldr	r3, [pc, #40]	; (112e4 <_ZL10USBPluggedv+0x30>)
   112bc:	4798      	blx	r3
   112be:	4603      	mov	r3, r0
   112c0:	2b00      	cmp	r3, #0
   112c2:	d004      	beq.n	112ce <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   112c4:	4b08      	ldr	r3, [pc, #32]	; (112e8 <_ZL10USBPluggedv+0x34>)
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	2201      	movs	r2, #1
   112ca:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   112cc:	e007      	b.n	112de <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   112ce:	4b06      	ldr	r3, [pc, #24]	; (112e8 <_ZL10USBPluggedv+0x34>)
   112d0:	681b      	ldr	r3, [r3, #0]
   112d2:	2200      	movs	r2, #0
   112d4:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   112d6:	4b04      	ldr	r3, [pc, #16]	; (112e8 <_ZL10USBPluggedv+0x34>)
   112d8:	681b      	ldr	r3, [r3, #0]
   112da:	2200      	movs	r2, #0
   112dc:	701a      	strb	r2, [r3, #0]
}
   112de:	bf00      	nop
   112e0:	bd80      	pop	{r7, pc}
   112e2:	bf00      	nop
   112e4:	00011251 	.word	0x00011251
   112e8:	20003618 	.word	0x20003618

000112ec <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   112ec:	b480      	push	{r7}
   112ee:	b083      	sub	sp, #12
   112f0:	af00      	add	r7, sp, #0
   112f2:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   112f4:	4a04      	ldr	r2, [pc, #16]	; (11308 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   112f6:	687b      	ldr	r3, [r7, #4]
   112f8:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   112fa:	687b      	ldr	r3, [r7, #4]
   112fc:	4618      	mov	r0, r3
   112fe:	370c      	adds	r7, #12
   11300:	46bd      	mov	sp, r7
   11302:	bc80      	pop	{r7}
   11304:	4770      	bx	lr
   11306:	bf00      	nop
   11308:	20003618 	.word	0x20003618

0001130c <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   1130c:	b480      	push	{r7}
   1130e:	b083      	sub	sp, #12
   11310:	af00      	add	r7, sp, #0
   11312:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   11314:	687b      	ldr	r3, [r7, #4]
   11316:	4618      	mov	r0, r3
   11318:	370c      	adds	r7, #12
   1131a:	46bd      	mov	sp, r7
   1131c:	bc80      	pop	{r7}
   1131e:	4770      	bx	lr

00011320 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   11320:	b580      	push	{r7, lr}
   11322:	b082      	sub	sp, #8
   11324:	af00      	add	r7, sp, #0
   11326:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   11328:	491e      	ldr	r1, [pc, #120]	; (113a4 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   1132a:	2040      	movs	r0, #64	; 0x40
   1132c:	4b1e      	ldr	r3, [pc, #120]	; (113a8 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   1132e:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   11330:	481e      	ldr	r0, [pc, #120]	; (113ac <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   11332:	4b1f      	ldr	r3, [pc, #124]	; (113b0 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   11334:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   11336:	2040      	movs	r0, #64	; 0x40
   11338:	4b1e      	ldr	r3, [pc, #120]	; (113b4 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   1133a:	4798      	blx	r3
   1133c:	4603      	mov	r3, r0
   1133e:	461a      	mov	r2, r3
   11340:	687b      	ldr	r3, [r7, #4]
   11342:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   11344:	687b      	ldr	r3, [r7, #4]
   11346:	78db      	ldrb	r3, [r3, #3]
   11348:	2b00      	cmp	r3, #0
   1134a:	d021      	beq.n	11390 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   1134c:	687b      	ldr	r3, [r7, #4]
   1134e:	2200      	movs	r2, #0
   11350:	709a      	strb	r2, [r3, #2]
			plugged=true;
   11352:	687b      	ldr	r3, [r7, #4]
   11354:	2201      	movs	r2, #1
   11356:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   11358:	f44f 7216 	mov.w	r2, #600	; 0x258
   1135c:	4916      	ldr	r1, [pc, #88]	; (113b8 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   1135e:	4813      	ldr	r0, [pc, #76]	; (113ac <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   11360:	4b16      	ldr	r3, [pc, #88]	; (113bc <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   11362:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   11364:	4816      	ldr	r0, [pc, #88]	; (113c0 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   11366:	4b17      	ldr	r3, [pc, #92]	; (113c4 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   11368:	4798      	blx	r3
   1136a:	4603      	mov	r3, r0
   1136c:	f083 0301 	eor.w	r3, r3, #1
   11370:	b2db      	uxtb	r3, r3
   11372:	2b00      	cmp	r3, #0
   11374:	d008      	beq.n	11388 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   11376:	687b      	ldr	r3, [r7, #4]
   11378:	789b      	ldrb	r3, [r3, #2]
   1137a:	b2db      	uxtb	r3, r3
   1137c:	2b00      	cmp	r3, #0
   1137e:	d0f1      	beq.n	11364 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   11380:	687b      	ldr	r3, [r7, #4]
   11382:	2200      	movs	r2, #0
   11384:	701a      	strb	r2, [r3, #0]
					return;
   11386:	e009      	b.n	1139c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   11388:	4808      	ldr	r0, [pc, #32]	; (113ac <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   1138a:	4b0f      	ldr	r3, [pc, #60]	; (113c8 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   1138c:	4798      	blx	r3
   1138e:	e005      	b.n	1139c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   11390:	687b      	ldr	r3, [r7, #4]
   11392:	2200      	movs	r2, #0
   11394:	701a      	strb	r2, [r3, #0]
			plugged=false;
   11396:	687b      	ldr	r3, [r7, #4]
   11398:	2200      	movs	r2, #0
   1139a:	705a      	strb	r2, [r3, #1]
		}
		
}
   1139c:	3708      	adds	r7, #8
   1139e:	46bd      	mov	sp, r7
   113a0:	bd80      	pop	{r7, pc}
   113a2:	bf00      	nop
   113a4:	000112b5 	.word	0x000112b5
   113a8:	0000375d 	.word	0x0000375d
   113ac:	200035b8 	.word	0x200035b8
   113b0:	000105d1 	.word	0x000105d1
   113b4:	00011251 	.word	0x00011251
   113b8:	0001128d 	.word	0x0001128d
   113bc:	000107b9 	.word	0x000107b9
   113c0:	200034b8 	.word	0x200034b8
   113c4:	00010c89 	.word	0x00010c89
   113c8:	00010645 	.word	0x00010645

000113cc <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
   113cc:	b580      	push	{r7, lr}
   113ce:	b082      	sub	sp, #8
   113d0:	af00      	add	r7, sp, #0
   113d2:	6078      	str	r0, [r7, #4]
   113d4:	6039      	str	r1, [r7, #0]
   113d6:	687b      	ldr	r3, [r7, #4]
   113d8:	2b01      	cmp	r3, #1
   113da:	d14c      	bne.n	11476 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   113dc:	683b      	ldr	r3, [r7, #0]
   113de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   113e2:	4293      	cmp	r3, r2
   113e4:	d147      	bne.n	11476 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   113e6:	4926      	ldr	r1, [pc, #152]	; (11480 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   113e8:	4826      	ldr	r0, [pc, #152]	; (11484 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   113ea:	4b27      	ldr	r3, [pc, #156]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   113ec:	4798      	blx	r3
   113ee:	4a27      	ldr	r2, [pc, #156]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   113f0:	4927      	ldr	r1, [pc, #156]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   113f2:	4824      	ldr	r0, [pc, #144]	; (11484 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   113f4:	4b27      	ldr	r3, [pc, #156]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   113f6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   113f8:	4927      	ldr	r1, [pc, #156]	; (11498 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   113fa:	4828      	ldr	r0, [pc, #160]	; (1149c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   113fc:	4b22      	ldr	r3, [pc, #136]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   113fe:	4798      	blx	r3
   11400:	4a22      	ldr	r2, [pc, #136]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11402:	4923      	ldr	r1, [pc, #140]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11404:	4825      	ldr	r0, [pc, #148]	; (1149c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11406:	4b23      	ldr	r3, [pc, #140]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11408:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1140a:	4925      	ldr	r1, [pc, #148]	; (114a0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1140c:	4825      	ldr	r0, [pc, #148]	; (114a4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1140e:	4b1e      	ldr	r3, [pc, #120]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11410:	4798      	blx	r3
   11412:	4a1e      	ldr	r2, [pc, #120]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11414:	491e      	ldr	r1, [pc, #120]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11416:	4823      	ldr	r0, [pc, #140]	; (114a4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11418:	4b1e      	ldr	r3, [pc, #120]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1141a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1141c:	4922      	ldr	r1, [pc, #136]	; (114a8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1141e:	4823      	ldr	r0, [pc, #140]	; (114ac <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11420:	4b19      	ldr	r3, [pc, #100]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11422:	4798      	blx	r3
   11424:	4a19      	ldr	r2, [pc, #100]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11426:	491a      	ldr	r1, [pc, #104]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11428:	4820      	ldr	r0, [pc, #128]	; (114ac <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1142a:	4b1a      	ldr	r3, [pc, #104]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1142c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1142e:	4920      	ldr	r1, [pc, #128]	; (114b0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   11430:	4820      	ldr	r0, [pc, #128]	; (114b4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11432:	4b15      	ldr	r3, [pc, #84]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11434:	4798      	blx	r3
   11436:	4a15      	ldr	r2, [pc, #84]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11438:	4915      	ldr	r1, [pc, #84]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1143a:	481e      	ldr	r0, [pc, #120]	; (114b4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1143c:	4b15      	ldr	r3, [pc, #84]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1143e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11440:	491d      	ldr	r1, [pc, #116]	; (114b8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   11442:	481e      	ldr	r0, [pc, #120]	; (114bc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11444:	4b10      	ldr	r3, [pc, #64]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11446:	4798      	blx	r3
   11448:	4a10      	ldr	r2, [pc, #64]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1144a:	4911      	ldr	r1, [pc, #68]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1144c:	481b      	ldr	r0, [pc, #108]	; (114bc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1144e:	4b11      	ldr	r3, [pc, #68]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11450:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11452:	491b      	ldr	r1, [pc, #108]	; (114c0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   11454:	481b      	ldr	r0, [pc, #108]	; (114c4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11456:	4b0c      	ldr	r3, [pc, #48]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11458:	4798      	blx	r3
   1145a:	4a0c      	ldr	r2, [pc, #48]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1145c:	490c      	ldr	r1, [pc, #48]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1145e:	4819      	ldr	r0, [pc, #100]	; (114c4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11460:	4b0c      	ldr	r3, [pc, #48]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11462:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   11464:	4918      	ldr	r1, [pc, #96]	; (114c8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   11466:	4819      	ldr	r0, [pc, #100]	; (114cc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11468:	4b07      	ldr	r3, [pc, #28]	; (11488 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1146a:	4798      	blx	r3
   1146c:	4a07      	ldr	r2, [pc, #28]	; (1148c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1146e:	4908      	ldr	r1, [pc, #32]	; (11490 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11470:	4816      	ldr	r0, [pc, #88]	; (114cc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11472:	4b08      	ldr	r3, [pc, #32]	; (11494 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11474:	4798      	blx	r3
   11476:	bf00      	nop
   11478:	3708      	adds	r7, #8
   1147a:	46bd      	mov	sp, r7
   1147c:	bd80      	pop	{r7, pc}
   1147e:	bf00      	nop
   11480:	2000df58 	.word	0x2000df58
   11484:	20003518 	.word	0x20003518
   11488:	000104e5 	.word	0x000104e5
   1148c:	20000000 	.word	0x20000000
   11490:	0001051d 	.word	0x0001051d
   11494:	0001ab61 	.word	0x0001ab61
   11498:	2000dfec 	.word	0x2000dfec
   1149c:	20003538 	.word	0x20003538
   114a0:	2000e110 	.word	0x2000e110
   114a4:	20003558 	.word	0x20003558
   114a8:	2000e00c 	.word	0x2000e00c
   114ac:	20003578 	.word	0x20003578
   114b0:	2000e0d0 	.word	0x2000e0d0
   114b4:	20003598 	.word	0x20003598
   114b8:	2000e0f0 	.word	0x2000e0f0
   114bc:	200035b8 	.word	0x200035b8
   114c0:	2000dfc8 	.word	0x2000dfc8
   114c4:	200035d8 	.word	0x200035d8
   114c8:	2000e068 	.word	0x2000e068
   114cc:	200035f8 	.word	0x200035f8

000114d0 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
   114d0:	b580      	push	{r7, lr}
   114d2:	af00      	add	r7, sp, #0
   114d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   114d8:	2001      	movs	r0, #1
   114da:	4b01      	ldr	r3, [pc, #4]	; (114e0 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
   114dc:	4798      	blx	r3
   114de:	bd80      	pop	{r7, pc}
   114e0:	000113cd 	.word	0x000113cd

000114e4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   114e4:	b480      	push	{r7}
   114e6:	b083      	sub	sp, #12
   114e8:	af00      	add	r7, sp, #0
   114ea:	6078      	str	r0, [r7, #4]
    return (void *)0;
   114ec:	2300      	movs	r3, #0
	}
   114ee:	4618      	mov	r0, r3
   114f0:	370c      	adds	r7, #12
   114f2:	46bd      	mov	sp, r7
   114f4:	bc80      	pop	{r7}
   114f6:	4770      	bx	lr

000114f8 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   114f8:	b480      	push	{r7}
   114fa:	af00      	add	r7, sp, #0
		}
   114fc:	bf00      	nop
   114fe:	46bd      	mov	sp, r7
   11500:	bc80      	pop	{r7}
   11502:	4770      	bx	lr

00011504 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
   11504:	4770      	bx	lr

00011506 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
   11506:	4770      	bx	lr

00011508 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
   11508:	1f0b      	subs	r3, r1, #4
   1150a:	300c      	adds	r0, #12
   1150c:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
   1150e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11512:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11516:	428b      	cmp	r3, r1
   11518:	d1f9      	bne.n	1150e <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
   1151a:	2000      	movs	r0, #0
   1151c:	4770      	bx	lr
	...

00011520 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
   11520:	b510      	push	{r4, lr}
   11522:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
   11524:	68c0      	ldr	r0, [r0, #12]
   11526:	4b0a      	ldr	r3, [pc, #40]	; (11550 <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
   11528:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
   1152a:	f3c0 1200 	ubfx	r2, r0, #4, #1
   1152e:	78e3      	ldrb	r3, [r4, #3]
   11530:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
   11534:	f3c0 1240 	ubfx	r2, r0, #5, #1
   11538:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
   1153c:	f3c0 1280 	ubfx	r2, r0, #6, #1
   11540:	f362 0300 	bfi	r3, r2, #0, #1
   11544:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
   11546:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1154a:	7120      	strb	r0, [r4, #4]
	return faults;
}
   1154c:	bd10      	pop	{r4, pc}
   1154e:	bf00      	nop
   11550:	0000ff7d 	.word	0x0000ff7d

00011554 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
   11554:	b510      	push	{r4, lr}
   11556:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
   11558:	f081 0201 	eor.w	r2, r1, #1
   1155c:	2100      	movs	r1, #0
   1155e:	68c0      	ldr	r0, [r0, #12]
   11560:	4b01      	ldr	r3, [pc, #4]	; (11568 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
   11562:	4798      	blx	r3
   11564:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
   11566:	bd10      	pop	{r4, pc}
   11568:	00010235 	.word	0x00010235

0001156c <_ZN19CondesatorFan_Class9IsEnabledEv>:
uint8_t	CondesatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(2,false)?false:true;
	return uint8_t(enabled);
}
bool CondesatorFan_Class::IsEnabled(void){
   1156c:	b510      	push	{r4, lr}
   1156e:	4604      	mov	r4, r0
	uint8_t value=expanders[0]->ReadGPIORegister();
   11570:	68c0      	ldr	r0, [r0, #12]
   11572:	4b03      	ldr	r3, [pc, #12]	; (11580 <_ZN19CondesatorFan_Class9IsEnabledEv+0x14>)
   11574:	4798      	blx	r3
	enabled=(value&0x01);
   11576:	f000 0001 	and.w	r0, r0, #1
   1157a:	7060      	strb	r0, [r4, #1]
	return enabled;
}
   1157c:	bd10      	pop	{r4, pc}
   1157e:	bf00      	nop
   11580:	0000ff7d 	.word	0x0000ff7d

00011584 <_ZN19CondesatorFan_Class13IsExternFaultEv>:
bool CondesatorFan_Class::IsExternFault(void){
   11584:	b510      	push	{r4, lr}
   11586:	4604      	mov	r4, r0
	
	fault_value=expanders[0]->ReadGPIORegister();
   11588:	68c0      	ldr	r0, [r0, #12]
   1158a:	4b04      	ldr	r3, [pc, #16]	; (1159c <_ZN19CondesatorFan_Class13IsExternFaultEv+0x18>)
   1158c:	4798      	blx	r3
   1158e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	return ((!(fault_value>>4))&0x01)>0;
   11592:	0903      	lsrs	r3, r0, #4
	
}
   11594:	bf0c      	ite	eq
   11596:	2001      	moveq	r0, #1
   11598:	2000      	movne	r0, #0
   1159a:	bd10      	pop	{r4, pc}
   1159c:	0000ff7d 	.word	0x0000ff7d

000115a0 <_ZN19CondesatorFan_Class6SetPWMEh>:


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
   115a0:	b510      	push	{r4, lr}
   115a2:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
   115a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   115a6:	4b02      	ldr	r3, [pc, #8]	; (115b0 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
   115a8:	4798      	blx	r3
   115aa:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
   115ac:	bd10      	pop	{r4, pc}
   115ae:	bf00      	nop
   115b0:	00010001 	.word	0x00010001

000115b4 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
   115b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115b8:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
   115ba:	2100      	movs	r1, #0
   115bc:	4c0f      	ldr	r4, [pc, #60]	; (115fc <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
   115be:	47a0      	blx	r4
		SetPWM(0xff);
   115c0:	21ff      	movs	r1, #255	; 0xff
   115c2:	4628      	mov	r0, r5
   115c4:	4b0e      	ldr	r3, [pc, #56]	; (11600 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
   115c6:	4798      	blx	r3
		SetEnable(true);
   115c8:	2101      	movs	r1, #1
   115ca:	4628      	mov	r0, r5
   115cc:	47a0      	blx	r4
   115ce:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
   115d0:	4f0b      	ldr	r7, [pc, #44]	; (11600 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
   115d2:	f04f 080a 	mov.w	r8, #10
   115d6:	4e0b      	ldr	r6, [pc, #44]	; (11604 <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
   115d8:	4621      	mov	r1, r4
   115da:	4628      	mov	r0, r5
   115dc:	47b8      	blx	r7
			delay_us(10);
   115de:	4640      	mov	r0, r8
   115e0:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
   115e2:	3c01      	subs	r4, #1
   115e4:	b2e4      	uxtb	r4, r4
   115e6:	2c10      	cmp	r4, #16
   115e8:	d1f6      	bne.n	115d8 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
   115ea:	4628      	mov	r0, r5
   115ec:	4b06      	ldr	r3, [pc, #24]	; (11608 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
   115ee:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
   115f0:	78e8      	ldrb	r0, [r5, #3]
		return result;
   115f2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   115f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115fa:	bf00      	nop
   115fc:	00011555 	.word	0x00011555
   11600:	000115a1 	.word	0x000115a1
   11604:	00003695 	.word	0x00003695
   11608:	00011521 	.word	0x00011521

0001160c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
   1160c:	b510      	push	{r4, lr}
   1160e:	4604      	mov	r4, r0
	i2c=i2cClass;
   11610:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
   11612:	7a4b      	ldrb	r3, [r1, #9]
   11614:	b90b      	cbnz	r3, 1161a <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
   11616:	78a0      	ldrb	r0, [r4, #2]
   11618:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
   1161a:	4611      	mov	r1, r2
   1161c:	4b04      	ldr	r3, [pc, #16]	; (11630 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
   1161e:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
   11620:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11622:	4b04      	ldr	r3, [pc, #16]	; (11634 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
   11624:	4798      	blx	r3
		isOK=SelfTest();
   11626:	4620      	mov	r0, r4
   11628:	4b03      	ldr	r3, [pc, #12]	; (11638 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
   1162a:	4798      	blx	r3
   1162c:	70a0      	strb	r0, [r4, #2]
   1162e:	e7f2      	b.n	11616 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
   11630:	00011509 	.word	0x00011509
   11634:	000100f5 	.word	0x000100f5
   11638:	000115b5 	.word	0x000115b5

0001163c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev>:
   1163c:	b510      	push	{r4, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1163e:	4c05      	ldr	r4, [pc, #20]	; (11654 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x18>)
   11640:	4905      	ldr	r1, [pc, #20]	; (11658 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x1c>)
   11642:	4620      	mov	r0, r4
   11644:	4b05      	ldr	r3, [pc, #20]	; (1165c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x20>)
   11646:	4798      	blx	r3
   11648:	4a05      	ldr	r2, [pc, #20]	; (11660 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x24>)
   1164a:	4906      	ldr	r1, [pc, #24]	; (11664 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x28>)
   1164c:	4620      	mov	r0, r4
   1164e:	4b06      	ldr	r3, [pc, #24]	; (11668 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x2c>)
   11650:	4798      	blx	r3
   11652:	bd10      	pop	{r4, pc}
   11654:	2000361c 	.word	0x2000361c
   11658:	2000e088 	.word	0x2000e088
   1165c:	0000fcb5 	.word	0x0000fcb5
   11660:	20000000 	.word	0x20000000
   11664:	0000fcd1 	.word	0x0000fcd1
   11668:	0001ab61 	.word	0x0001ab61

0001166c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
   1166c:	b510      	push	{r4, lr}
   1166e:	4604      	mov	r4, r0
   11670:	302c      	adds	r0, #44	; 0x2c
   11672:	4b03      	ldr	r3, [pc, #12]	; (11680 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
   11674:	4798      	blx	r3
   11676:	4620      	mov	r0, r4
   11678:	4b02      	ldr	r3, [pc, #8]	; (11684 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
   1167a:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
   1167c:	4620      	mov	r0, r4
   1167e:	bd10      	pop	{r4, pc}
   11680:	00011507 	.word	0x00011507
   11684:	00011969 	.word	0x00011969

00011688 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   11688:	b570      	push	{r4, r5, r6, lr}
   1168a:	4c05      	ldr	r4, [pc, #20]	; (116a0 <__tcf_1+0x18>)
   1168c:	4e05      	ldr	r6, [pc, #20]	; (116a4 <__tcf_1+0x1c>)
   1168e:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
   11692:	3c1c      	subs	r4, #28
   11694:	4620      	mov	r0, r4
   11696:	47b0      	blx	r6
   11698:	42ac      	cmp	r4, r5
   1169a:	d1fa      	bne.n	11692 <__tcf_1+0xa>
   1169c:	bd70      	pop	{r4, r5, r6, pc}
   1169e:	bf00      	nop
   116a0:	200036f8 	.word	0x200036f8
   116a4:	0000fe85 	.word	0x0000fe85

000116a8 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
   116a8:	b510      	push	{r4, lr}
   116aa:	4803      	ldr	r0, [pc, #12]	; (116b8 <__tcf_0+0x10>)
   116ac:	4c03      	ldr	r4, [pc, #12]	; (116bc <__tcf_0+0x14>)
   116ae:	47a0      	blx	r4
   116b0:	4803      	ldr	r0, [pc, #12]	; (116c0 <__tcf_0+0x18>)
   116b2:	47a0      	blx	r4
   116b4:	bd10      	pop	{r4, pc}
   116b6:	bf00      	nop
   116b8:	20003724 	.word	0x20003724
   116bc:	00011969 	.word	0x00011969
   116c0:	200036f8 	.word	0x200036f8

000116c4 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
   116c4:	b510      	push	{r4, lr}
   116c6:	4604      	mov	r4, r0
   116c8:	4b0d      	ldr	r3, [pc, #52]	; (11700 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
   116ca:	4798      	blx	r3
   116cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   116d0:	4b0c      	ldr	r3, [pc, #48]	; (11704 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
   116d2:	4798      	blx	r3
	i2c=&i2cFansStatic;
   116d4:	4b0c      	ldr	r3, [pc, #48]	; (11708 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
   116d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
   116da:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
   116de:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
   116e2:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
   116e4:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   116e8:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
   116ea:	f503 729a 	add.w	r2, r3, #308	; 0x134
   116ee:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
   116f0:	f8c3 4164 	str.w	r4, [r3, #356]	; 0x164
	somethingChanged=false;
   116f4:	2300      	movs	r3, #0
   116f6:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
} //EvaporatorAndCondesatorFans_Class
   116fa:	4620      	mov	r0, r4
   116fc:	bd10      	pop	{r4, pc}
   116fe:	bf00      	nop
   11700:	00011951 	.word	0x00011951
   11704:	00011505 	.word	0x00011505
   11708:	20003634 	.word	0x20003634

0001170c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
   1170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11710:	4606      	mov	r6, r0
   11712:	4c0c      	ldr	r4, [pc, #48]	; (11744 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
   11714:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11718:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   1171a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 11748 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
   1171e:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
   11722:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   11726:	f045 0120 	orr.w	r1, r5, #32
   1172a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   1172e:	b2c9      	uxtb	r1, r1
   11730:	4620      	mov	r0, r4
   11732:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11734:	3501      	adds	r5, #1
   11736:	341c      	adds	r4, #28
   11738:	2d07      	cmp	r5, #7
   1173a:	d1f0      	bne.n	1171e <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
   1173c:	2000      	movs	r0, #0
   1173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11742:	bf00      	nop
   11744:	20003634 	.word	0x20003634
   11748:	0000fe99 	.word	0x0000fe99

0001174c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
   1174c:	b570      	push	{r4, r5, r6, lr}
   1174e:	4604      	mov	r4, r0
	i2c->Init();
   11750:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   11754:	4b17      	ldr	r3, [pc, #92]	; (117b4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
   11756:	4798      	blx	r3
	if (i2c->isOK)
   11758:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1175c:	7a5b      	ldrb	r3, [r3, #9]
   1175e:	b943      	cbnz	r3, 11772 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
   11760:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   11764:	7a5b      	ldrb	r3, [r3, #9]
   11766:	b2db      	uxtb	r3, r3
   11768:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
	return isOK;
   1176c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
}
   11770:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
   11772:	4620      	mov	r0, r4
   11774:	4b10      	ldr	r3, [pc, #64]	; (117b8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
   11776:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
   11778:	f104 0568 	add.w	r5, r4, #104	; 0x68
   1177c:	462b      	mov	r3, r5
   1177e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   11782:	2100      	movs	r1, #0
   11784:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11786:	4e0d      	ldr	r6, [pc, #52]	; (117bc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
   11788:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
   1178a:	462b      	mov	r3, r5
   1178c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   11790:	2101      	movs	r1, #1
   11792:	6e20      	ldr	r0, [r4, #96]	; 0x60
   11794:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
   11796:	462a      	mov	r2, r5
   11798:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   1179c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1179e:	4b08      	ldr	r3, [pc, #32]	; (117c0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
   117a0:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
   117a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   117a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   117a6:	791b      	ldrb	r3, [r3, #4]
   117a8:	7912      	ldrb	r2, [r2, #4]
   117aa:	4013      	ands	r3, r2
   117ac:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
   117b0:	e7d6      	b.n	11760 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
   117b2:	bf00      	nop
   117b4:	0000fce5 	.word	0x0000fce5
   117b8:	0001170d 	.word	0x0001170d
   117bc:	00011ac1 	.word	0x00011ac1
   117c0:	0001160d 	.word	0x0001160d

000117c4 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
   117c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117c6:	f100 0468 	add.w	r4, r0, #104	; 0x68
   117ca:	1e4d      	subs	r5, r1, #1
   117cc:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
   117d0:	4f04      	ldr	r7, [pc, #16]	; (117e4 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
   117d2:	f854 0b04 	ldr.w	r0, [r4], #4
   117d6:	47b8      	blx	r7
   117d8:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   117dc:	42b4      	cmp	r4, r6
   117de:	d1f8      	bne.n	117d2 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
   117e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117e2:	bf00      	nop
   117e4:	0000ff7d 	.word	0x0000ff7d

000117e8 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv>:

void EvaporatorAndCondesatorFans_Class::CheckFansOperation(void){
   117e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117ec:	4606      	mov	r6, r0
   117ee:	f100 045c 	add.w	r4, r0, #92	; 0x5c
	for (int i = 0; i < 2; i++)
   117f2:	2500      	movs	r5, #0
	{
		if (evaporator[i]->IsEnabled())
   117f4:	4f18      	ldr	r7, [pc, #96]	; (11858 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x70>)
		{
			if (evaporator[i]->IsExternFault())
   117f6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 11878 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x90>
			{
				evaporator[i]->SetEnable(false);
   117fa:	f8df a080 	ldr.w	sl, [pc, #128]	; 1187c <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x94>
		if (evaporator[i]->IsEnabled())
   117fe:	6820      	ldr	r0, [r4, #0]
   11800:	47b8      	blx	r7
   11802:	b948      	cbnz	r0, 11818 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x30>
	for (int i = 0; i < 2; i++)
   11804:	3501      	adds	r5, #1
   11806:	3404      	adds	r4, #4
   11808:	2d02      	cmp	r5, #2
   1180a:	d1f8      	bne.n	117fe <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x16>
		else
		{
		}
		
	}
	if (condesator->IsEnabled())
   1180c:	6e70      	ldr	r0, [r6, #100]	; 0x64
   1180e:	4b13      	ldr	r3, [pc, #76]	; (1185c <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x74>)
   11810:	4798      	blx	r3
   11812:	b980      	cbnz	r0, 11836 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x4e>
   11814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (evaporator[i]->IsExternFault())
   11818:	6820      	ldr	r0, [r4, #0]
   1181a:	47c8      	blx	r9
   1181c:	2800      	cmp	r0, #0
   1181e:	d0f1      	beq.n	11804 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x1c>
				evaporator[i]->SetEnable(false);
   11820:	2100      	movs	r1, #0
   11822:	6820      	ldr	r0, [r4, #0]
   11824:	47d0      	blx	sl
				logger.SaveEventIndexEnable("Evaporator ",i,false);
   11826:	2300      	movs	r3, #0
   11828:	b2ea      	uxtb	r2, r5
   1182a:	490d      	ldr	r1, [pc, #52]	; (11860 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x78>)
   1182c:	480d      	ldr	r0, [pc, #52]	; (11864 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x7c>)
   1182e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 11874 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x8c>
   11832:	47c0      	blx	r8
   11834:	e7e6      	b.n	11804 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x1c>
	{
		if (condesator->IsExternFault())
   11836:	6e70      	ldr	r0, [r6, #100]	; 0x64
   11838:	4b0b      	ldr	r3, [pc, #44]	; (11868 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x80>)
   1183a:	4798      	blx	r3
   1183c:	2800      	cmp	r0, #0
   1183e:	d0e9      	beq.n	11814 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x2c>
		{
			condesator->SetEnable(false);
   11840:	2100      	movs	r1, #0
   11842:	6e70      	ldr	r0, [r6, #100]	; 0x64
   11844:	4b09      	ldr	r3, [pc, #36]	; (1186c <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x84>)
   11846:	4798      	blx	r3
			logger.SaveEventIndexEnable("Condesator ",(uint8_t)0,false);
   11848:	2300      	movs	r3, #0
   1184a:	461a      	mov	r2, r3
   1184c:	4908      	ldr	r1, [pc, #32]	; (11870 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x88>)
   1184e:	4805      	ldr	r0, [pc, #20]	; (11864 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x7c>)
   11850:	4c08      	ldr	r4, [pc, #32]	; (11874 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x8c>)
   11852:	47a0      	blx	r4
		}
	}
	else
	{
	}
}
   11854:	e7de      	b.n	11814 <_ZN33EvaporatorAndCondesatorFans_Class18CheckFansOperationEv+0x2c>
   11856:	bf00      	nop
   11858:	00011a41 	.word	0x00011a41
   1185c:	0001156d 	.word	0x0001156d
   11860:	0001bb34 	.word	0x0001bb34
   11864:	20003a78 	.word	0x20003a78
   11868:	00011585 	.word	0x00011585
   1186c:	00011555 	.word	0x00011555
   11870:	0001bb40 	.word	0x0001bb40
   11874:	00011f21 	.word	0x00011f21
   11878:	00011a1d 	.word	0x00011a1d
   1187c:	000119dd 	.word	0x000119dd

00011880 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
   11880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11884:	4c22      	ldr	r4, [pc, #136]	; (11910 <_GLOBAL__sub_I_ptrFansClass+0x90>)
   11886:	f504 75b4 	add.w	r5, r4, #360	; 0x168
   1188a:	4922      	ldr	r1, [pc, #136]	; (11914 <_GLOBAL__sub_I_ptrFansClass+0x94>)
   1188c:	4628      	mov	r0, r5
   1188e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 11944 <_GLOBAL__sub_I_ptrFansClass+0xc4>
   11892:	47c8      	blx	r9
   11894:	4f20      	ldr	r7, [pc, #128]	; (11918 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   11896:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11948 <_GLOBAL__sub_I_ptrFansClass+0xc8>
   1189a:	463a      	mov	r2, r7
   1189c:	4641      	mov	r1, r8
   1189e:	4628      	mov	r0, r5
   118a0:	4e1e      	ldr	r6, [pc, #120]	; (1191c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   118a2:	47b0      	blx	r6
static I2C_Sync_Class	i2cFansStatic(&I2C_FANS);
   118a4:	f504 758e 	add.w	r5, r4, #284	; 0x11c
   118a8:	491d      	ldr	r1, [pc, #116]	; (11920 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
   118aa:	4628      	mov	r0, r5
   118ac:	47c8      	blx	r9
   118ae:	463a      	mov	r2, r7
   118b0:	4641      	mov	r1, r8
   118b2:	4628      	mov	r0, r5
   118b4:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
   118b6:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
   118ba:	4628      	mov	r0, r5
   118bc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1194c <_GLOBAL__sub_I_ptrFansClass+0xcc>
   118c0:	47c0      	blx	r8
   118c2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   118c6:	47c0      	blx	r8
   118c8:	463a      	mov	r2, r7
   118ca:	4916      	ldr	r1, [pc, #88]	; (11924 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
   118cc:	2000      	movs	r0, #0
   118ce:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
   118d0:	f504 789a 	add.w	r8, r4, #308	; 0x134
   118d4:	4640      	mov	r0, r8
   118d6:	4b14      	ldr	r3, [pc, #80]	; (11928 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
   118d8:	4798      	blx	r3
   118da:	463a      	mov	r2, r7
   118dc:	4913      	ldr	r1, [pc, #76]	; (1192c <_GLOBAL__sub_I_ptrFansClass+0xac>)
   118de:	4640      	mov	r0, r8
   118e0:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   118e2:	4e13      	ldr	r6, [pc, #76]	; (11930 <_GLOBAL__sub_I_ptrFansClass+0xb0>)
   118e4:	4620      	mov	r0, r4
   118e6:	47b0      	blx	r6
   118e8:	341c      	adds	r4, #28
   118ea:	42a5      	cmp	r5, r4
   118ec:	d1fa      	bne.n	118e4 <_GLOBAL__sub_I_ptrFansClass+0x64>
   118ee:	4e0a      	ldr	r6, [pc, #40]	; (11918 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   118f0:	4632      	mov	r2, r6
   118f2:	4910      	ldr	r1, [pc, #64]	; (11934 <_GLOBAL__sub_I_ptrFansClass+0xb4>)
   118f4:	2000      	movs	r0, #0
   118f6:	4c09      	ldr	r4, [pc, #36]	; (1191c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   118f8:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
   118fa:	4d0f      	ldr	r5, [pc, #60]	; (11938 <_GLOBAL__sub_I_ptrFansClass+0xb8>)
   118fc:	4628      	mov	r0, r5
   118fe:	4b0f      	ldr	r3, [pc, #60]	; (1193c <_GLOBAL__sub_I_ptrFansClass+0xbc>)
   11900:	4798      	blx	r3
   11902:	4632      	mov	r2, r6
   11904:	490e      	ldr	r1, [pc, #56]	; (11940 <_GLOBAL__sub_I_ptrFansClass+0xc0>)
   11906:	4628      	mov	r0, r5
   11908:	47a0      	blx	r4
   1190a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1190e:	bf00      	nop
   11910:	20003634 	.word	0x20003634
   11914:	2000e088 	.word	0x2000e088
   11918:	20000000 	.word	0x20000000
   1191c:	0001ab61 	.word	0x0001ab61
   11920:	2000dfa8 	.word	0x2000dfa8
   11924:	000116a9 	.word	0x000116a9
   11928:	00011505 	.word	0x00011505
   1192c:	00011507 	.word	0x00011507
   11930:	0000fe71 	.word	0x0000fe71
   11934:	00011689 	.word	0x00011689
   11938:	200037b4 	.word	0x200037b4
   1193c:	000116c5 	.word	0x000116c5
   11940:	0001166d 	.word	0x0001166d
   11944:	0000fcb5 	.word	0x0000fcb5
   11948:	0000fcd1 	.word	0x0000fcd1
   1194c:	00011951 	.word	0x00011951

00011950 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
   11950:	b510      	push	{r4, lr}
   11952:	4604      	mov	r4, r0
   11954:	4b02      	ldr	r3, [pc, #8]	; (11960 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
   11956:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
   11958:	4b02      	ldr	r3, [pc, #8]	; (11964 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
   1195a:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
   1195c:	4620      	mov	r0, r4
   1195e:	bd10      	pop	{r4, pc}
   11960:	00011b59 	.word	0x00011b59
   11964:	20003840 	.word	0x20003840

00011968 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
   11968:	b510      	push	{r4, lr}
   1196a:	4604      	mov	r4, r0
   1196c:	4b01      	ldr	r3, [pc, #4]	; (11974 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
   1196e:	4798      	blx	r3
{
} //~EvaporatorFan_Class
   11970:	4620      	mov	r0, r4
   11972:	bd10      	pop	{r4, pc}
   11974:	00011b5b 	.word	0x00011b5b

00011978 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
   11978:	1f0b      	subs	r3, r1, #4
   1197a:	300c      	adds	r0, #12
   1197c:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
   1197e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11982:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
   11986:	428b      	cmp	r3, r1
   11988:	d1f9      	bne.n	1197e <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
   1198a:	2000      	movs	r0, #0
   1198c:	4770      	bx	lr
	...

00011990 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
   11990:	b538      	push	{r3, r4, r5, lr}
   11992:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
   11994:	6900      	ldr	r0, [r0, #16]
   11996:	4b10      	ldr	r3, [pc, #64]	; (119d8 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
   11998:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
   1199a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1199e:	0099      	lsls	r1, r3, #2
   119a0:	fa40 f501 	asr.w	r5, r0, r1
   119a4:	5ce2      	ldrb	r2, [r4, r3]
   119a6:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
   119aa:	2502      	movs	r5, #2
   119ac:	408d      	lsls	r5, r1
   119ae:	4205      	tst	r5, r0
   119b0:	bf14      	ite	ne
   119b2:	2501      	movne	r5, #1
   119b4:	2500      	moveq	r5, #0
   119b6:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
   119ba:	2504      	movs	r5, #4
   119bc:	408d      	lsls	r5, r1
   119be:	4205      	tst	r5, r0
   119c0:	bf14      	ite	ne
   119c2:	2501      	movne	r5, #1
   119c4:	2500      	moveq	r5, #0
   119c6:	f365 0200 	bfi	r2, r5, #0, #1
   119ca:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
   119cc:	2307      	movs	r3, #7
   119ce:	408b      	lsls	r3, r1
   119d0:	4018      	ands	r0, r3
   119d2:	b2c0      	uxtb	r0, r0
   119d4:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
   119d6:	bd38      	pop	{r3, r4, r5, pc}
   119d8:	0000ff7d 	.word	0x0000ff7d

000119dc <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
   119dc:	b510      	push	{r4, lr}
   119de:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   119e0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   119e4:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
   119e6:	f081 0201 	eor.w	r2, r1, #1
   119ea:	bf0c      	ite	eq
   119ec:	2102      	moveq	r1, #2
   119ee:	2101      	movne	r1, #1
   119f0:	68c0      	ldr	r0, [r0, #12]
   119f2:	4b02      	ldr	r3, [pc, #8]	; (119fc <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
   119f4:	4798      	blx	r3
   119f6:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
   119f8:	bd10      	pop	{r4, pc}
   119fa:	bf00      	nop
   119fc:	00010235 	.word	0x00010235

00011a00 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
   11a00:	b510      	push	{r4, lr}
   11a02:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
   11a04:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11a08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11a0c:	69d8      	ldr	r0, [r3, #28]
   11a0e:	4b02      	ldr	r3, [pc, #8]	; (11a18 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
   11a10:	4798      	blx	r3
   11a12:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
   11a16:	bd10      	pop	{r4, pc}
   11a18:	00010001 	.word	0x00010001

00011a1c <_ZN19EvaporatorFan_Class13IsExternFaultEv>:
uint8_t	EvaporatorFan_Class::ReadPWM(void){
	return pwmValue;

}
bool EvaporatorFan_Class::IsExternFault(){
   11a1c:	b510      	push	{r4, lr}
   11a1e:	4604      	mov	r4, r0
	
	fault_value=expanders[1]->ReadGPIORegister();
   11a20:	6900      	ldr	r0, [r0, #16]
   11a22:	4b06      	ldr	r3, [pc, #24]	; (11a3c <_ZN19EvaporatorFan_Class13IsExternFaultEv+0x20>)
   11a24:	4798      	blx	r3
   11a26:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
	return ((!(fault_value>>(fanNumber*4)))&0x01)>0;
   11a2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11a2e:	009b      	lsls	r3, r3, #2
   11a30:	fa50 f303 	asrs.w	r3, r0, r3
	
}
   11a34:	bf0c      	ite	eq
   11a36:	2001      	moveq	r0, #1
   11a38:	2000      	movne	r0, #0
   11a3a:	bd10      	pop	{r4, pc}
   11a3c:	0000ff7d 	.word	0x0000ff7d

00011a40 <_ZN19EvaporatorFan_Class9IsEnabledEv>:
bool EvaporatorFan_Class::IsEnabled(void){
   11a40:	b538      	push	{r3, r4, r5, lr}
   11a42:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   11a44:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11a48:	2b01      	cmp	r3, #1
   11a4a:	bf0c      	ite	eq
   11a4c:	2502      	moveq	r5, #2
   11a4e:	2501      	movne	r5, #1
	uint8_t value=expanders[0]->ReadGPIORegister();
   11a50:	68c0      	ldr	r0, [r0, #12]
   11a52:	4b04      	ldr	r3, [pc, #16]	; (11a64 <_ZN19EvaporatorFan_Class9IsEnabledEv+0x24>)
   11a54:	4798      	blx	r3
	enabled=!(value&fanCorrrection);
   11a56:	4205      	tst	r5, r0
   11a58:	bf0c      	ite	eq
   11a5a:	2001      	moveq	r0, #1
   11a5c:	2000      	movne	r0, #0
   11a5e:	70e0      	strb	r0, [r4, #3]
	return enabled;
}
   11a60:	bd38      	pop	{r3, r4, r5, pc}
   11a62:	bf00      	nop
   11a64:	0000ff7d 	.word	0x0000ff7d

00011a68 <_ZN19EvaporatorFan_Class8SelfTestEv>:

bool EvaporatorFan_Class::SelfTest(void){
   11a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a6c:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
   11a6e:	2100      	movs	r1, #0
   11a70:	4c0f      	ldr	r4, [pc, #60]	; (11ab0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
   11a72:	47a0      	blx	r4
	SetPWM(0xff);
   11a74:	21ff      	movs	r1, #255	; 0xff
   11a76:	4628      	mov	r0, r5
   11a78:	4b0e      	ldr	r3, [pc, #56]	; (11ab4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
   11a7a:	4798      	blx	r3
	SetEnable(true);
   11a7c:	2101      	movs	r1, #1
   11a7e:	4628      	mov	r0, r5
   11a80:	47a0      	blx	r4
   11a82:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
   11a84:	4f0b      	ldr	r7, [pc, #44]	; (11ab4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
   11a86:	f04f 080a 	mov.w	r8, #10
   11a8a:	4e0b      	ldr	r6, [pc, #44]	; (11ab8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
   11a8c:	4621      	mov	r1, r4
   11a8e:	4628      	mov	r0, r5
   11a90:	47b8      	blx	r7
		delay_us(10);
   11a92:	4640      	mov	r0, r8
   11a94:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
   11a96:	3c01      	subs	r4, #1
   11a98:	b2e4      	uxtb	r4, r4
   11a9a:	2c0c      	cmp	r4, #12
   11a9c:	d1f6      	bne.n	11a8c <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
   11a9e:	4628      	mov	r0, r5
   11aa0:	4b06      	ldr	r3, [pc, #24]	; (11abc <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
   11aa2:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
   11aa4:	7828      	ldrb	r0, [r5, #0]
	return result;
}
   11aa6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11aae:	bf00      	nop
   11ab0:	000119dd 	.word	0x000119dd
   11ab4:	00011a01 	.word	0x00011a01
   11ab8:	00003695 	.word	0x00003695
   11abc:	00011991 	.word	0x00011991

00011ac0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
   11ac0:	b510      	push	{r4, lr}
   11ac2:	4604      	mov	r4, r0
	i2c=i2cClass;
   11ac4:	6082      	str	r2, [r0, #8]
	fanNumber=number;
   11ac6:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
   11aca:	7a52      	ldrb	r2, [r2, #9]
   11acc:	b90a      	cbnz	r2, 11ad2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
   11ace:	7920      	ldrb	r0, [r4, #4]
   11ad0:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
   11ad2:	4619      	mov	r1, r3
   11ad4:	4b0e      	ldr	r3, [pc, #56]	; (11b10 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
   11ad6:	4798      	blx	r3
			if (fanNumber==0)
   11ad8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11adc:	b15b      	cbz	r3, 11af6 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
   11ade:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11ae2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   11ae6:	69d8      	ldr	r0, [r3, #28]
   11ae8:	4b0a      	ldr	r3, [pc, #40]	; (11b14 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
   11aea:	4798      	blx	r3
			isOK=SelfTest();
   11aec:	4620      	mov	r0, r4
   11aee:	4b0a      	ldr	r3, [pc, #40]	; (11b18 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
   11af0:	4798      	blx	r3
   11af2:	7120      	strb	r0, [r4, #4]
   11af4:	e7eb      	b.n	11ace <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
   11af6:	2170      	movs	r1, #112	; 0x70
   11af8:	68e0      	ldr	r0, [r4, #12]
   11afa:	4b08      	ldr	r3, [pc, #32]	; (11b1c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
   11afc:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
   11afe:	2107      	movs	r1, #7
   11b00:	68e0      	ldr	r0, [r4, #12]
   11b02:	4b07      	ldr	r3, [pc, #28]	; (11b20 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
   11b04:	4798      	blx	r3
				expanders[1]->SetPortInput();
   11b06:	6920      	ldr	r0, [r4, #16]
   11b08:	4b06      	ldr	r3, [pc, #24]	; (11b24 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
   11b0a:	4798      	blx	r3
   11b0c:	e7e7      	b.n	11ade <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
   11b0e:	bf00      	nop
   11b10:	00011979 	.word	0x00011979
   11b14:	000100f5 	.word	0x000100f5
   11b18:	00011a69 	.word	0x00011a69
   11b1c:	00010081 	.word	0x00010081
   11b20:	00010129 	.word	0x00010129
   11b24:	0001003d 	.word	0x0001003d

00011b28 <_GLOBAL__sub_I_ptrEvaFanClass>:
}
   11b28:	b510      	push	{r4, lr}
   11b2a:	4c05      	ldr	r4, [pc, #20]	; (11b40 <_GLOBAL__sub_I_ptrEvaFanClass+0x18>)
   11b2c:	4905      	ldr	r1, [pc, #20]	; (11b44 <_GLOBAL__sub_I_ptrEvaFanClass+0x1c>)
   11b2e:	4620      	mov	r0, r4
   11b30:	4b05      	ldr	r3, [pc, #20]	; (11b48 <_GLOBAL__sub_I_ptrEvaFanClass+0x20>)
   11b32:	4798      	blx	r3
   11b34:	4a05      	ldr	r2, [pc, #20]	; (11b4c <_GLOBAL__sub_I_ptrEvaFanClass+0x24>)
   11b36:	4906      	ldr	r1, [pc, #24]	; (11b50 <_GLOBAL__sub_I_ptrEvaFanClass+0x28>)
   11b38:	4620      	mov	r0, r4
   11b3a:	4b06      	ldr	r3, [pc, #24]	; (11b54 <_GLOBAL__sub_I_ptrEvaFanClass+0x2c>)
   11b3c:	4798      	blx	r3
   11b3e:	bd10      	pop	{r4, pc}
   11b40:	20003844 	.word	0x20003844
   11b44:	2000e088 	.word	0x2000e088
   11b48:	0000fcb5 	.word	0x0000fcb5
   11b4c:	20000000 	.word	0x20000000
   11b50:	0000fcd1 	.word	0x0000fcd1
   11b54:	0001ab61 	.word	0x0001ab61

00011b58 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
   11b58:	4770      	bx	lr

00011b5a <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
   11b5a:	4770      	bx	lr

00011b5c <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   11b5c:	b510      	push	{r4, lr}
   11b5e:	4604      	mov	r4, r0
   11b60:	4b06      	ldr	r3, [pc, #24]	; (11b7c <_ZN18Event_Logger_ClassD1Ev+0x20>)
   11b62:	f840 3bb4 	str.w	r3, [r0], #180
   11b66:	4b06      	ldr	r3, [pc, #24]	; (11b80 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   11b68:	4798      	blx	r3
   11b6a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11b6e:	4b05      	ldr	r3, [pc, #20]	; (11b84 <_ZN18Event_Logger_ClassD1Ev+0x28>)
   11b70:	4798      	blx	r3
   11b72:	4620      	mov	r0, r4
   11b74:	4b04      	ldr	r3, [pc, #16]	; (11b88 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   11b76:	4798      	blx	r3
{
} //~Event_Logger_Class
   11b78:	4620      	mov	r0, r4
   11b7a:	bd10      	pop	{r4, pc}
   11b7c:	0001bb54 	.word	0x0001bb54
   11b80:	000121ed 	.word	0x000121ed
   11b84:	00012153 	.word	0x00012153
   11b88:	0001a445 	.word	0x0001a445

00011b8c <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   11b8c:	b510      	push	{r4, lr}
   11b8e:	4604      	mov	r4, r0
   11b90:	4b11      	ldr	r3, [pc, #68]	; (11bd8 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   11b92:	4798      	blx	r3
   11b94:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11b98:	4b10      	ldr	r3, [pc, #64]	; (11bdc <_ZN18Event_Logger_ClassC1Ev+0x50>)
   11b9a:	4798      	blx	r3
   11b9c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11ba0:	4b0f      	ldr	r3, [pc, #60]	; (11be0 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   11ba2:	4798      	blx	r3
   11ba4:	4b0f      	ldr	r3, [pc, #60]	; (11be4 <_ZN18Event_Logger_ClassC1Ev+0x58>)
   11ba6:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   11ba8:	230a      	movs	r3, #10
   11baa:	f884 36fb 	strb.w	r3, [r4, #1787]	; 0x6fb
	cal=&staticClock;
   11bae:	4b0e      	ldr	r3, [pc, #56]	; (11be8 <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   11bb0:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
	logger_text=(char*)text_buffer_local;
   11bb4:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   11bb8:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_module=(char*)module_buffer_local;
   11bbc:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   11bc0:	f8c4 2710 	str.w	r2, [r4, #1808]	; 0x710
	logger_number=(char*)number_buffer_local;
   11bc4:	f503 7388 	add.w	r3, r3, #272	; 0x110
   11bc8:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
	info_text=local_info_text;
   11bcc:	4b07      	ldr	r3, [pc, #28]	; (11bec <_ZN18Event_Logger_ClassC1Ev+0x60>)
   11bce:	f8c4 3718 	str.w	r3, [r4, #1816]	; 0x718
} //Event_Logger_Class
   11bd2:	4620      	mov	r0, r4
   11bd4:	bd10      	pop	{r4, pc}
   11bd6:	bf00      	nop
   11bd8:	0001a3d5 	.word	0x0001a3d5
   11bdc:	00012151 	.word	0x00012151
   11be0:	00012195 	.word	0x00012195
   11be4:	0001bb54 	.word	0x0001bb54
   11be8:	20003860 	.word	0x20003860
   11bec:	20000210 	.word	0x20000210

00011bf0 <_ZN18Event_Logger_Class16MakeNullDateTimeEv>:
	SetStackValue(stackLocalArray);
	memset(event_buffer_arrray,0,QSPI_ERBLK);
}

void Event_Logger_Class::MakeNullDateTime(void){
	nullDateTime.date.year  = 0x0;
   11bf0:	2300      	movs	r3, #0
   11bf2:	f8a0 3612 	strh.w	r3, [r0, #1554]	; 0x612
	nullDateTime.date.month = 0x0;
   11bf6:	f880 3611 	strb.w	r3, [r0, #1553]	; 0x611
	nullDateTime.date.day   = 0x0;
   11bfa:	f880 3610 	strb.w	r3, [r0, #1552]	; 0x610

	nullDateTime.time.hour = 0x0;
   11bfe:	f880 360e 	strb.w	r3, [r0, #1550]	; 0x60e
	nullDateTime.time.min  = 0x0;
   11c02:	f880 360d 	strb.w	r3, [r0, #1549]	; 0x60d
	nullDateTime.time.sec  = 0x0;
   11c06:	f880 360c 	strb.w	r3, [r0, #1548]	; 0x60c
   11c0a:	4770      	bx	lr

00011c0c <_ZN18Event_Logger_Class4InitEv>:
bool Event_Logger_Class::Init(void){
   11c0c:	b538      	push	{r3, r4, r5, lr}
   11c0e:	4604      	mov	r4, r0
	MakeNullDateTime();
   11c10:	4b0c      	ldr	r3, [pc, #48]	; (11c44 <_ZN18Event_Logger_Class4InitEv+0x38>)
   11c12:	4798      	blx	r3
	cal->Init(nullDateTime);
   11c14:	f204 630c 	addw	r3, r4, #1548	; 0x60c
   11c18:	e893 0006 	ldmia.w	r3, {r1, r2}
   11c1c:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11c20:	4b09      	ldr	r3, [pc, #36]	; (11c48 <_ZN18Event_Logger_Class4InitEv+0x3c>)
   11c22:	4798      	blx	r3
	stackLocalArray=0;
   11c24:	2500      	movs	r5, #0
   11c26:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
	SetStackValue(stackLocalArray);
   11c2a:	4629      	mov	r1, r5
   11c2c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11c30:	4b06      	ldr	r3, [pc, #24]	; (11c4c <_ZN18Event_Logger_Class4InitEv+0x40>)
   11c32:	4798      	blx	r3
	memset(event_buffer_arrray,0,QSPI_ERBLK);
   11c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11c38:	4629      	mov	r1, r5
   11c3a:	f8d4 05f0 	ldr.w	r0, [r4, #1520]	; 0x5f0
   11c3e:	4b04      	ldr	r3, [pc, #16]	; (11c50 <_ZN18Event_Logger_Class4InitEv+0x44>)
   11c40:	4798      	blx	r3
}
   11c42:	bd38      	pop	{r3, r4, r5, pc}
   11c44:	00011bf1 	.word	0x00011bf1
   11c48:	0001a46d 	.word	0x0001a46d
   11c4c:	000121fd 	.word	0x000121fd
   11c50:	0001b215 	.word	0x0001b215

00011c54 <_ZN18Event_Logger_Class9SaveEventEPh>:
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   11c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c58:	4604      	mov	r4, r0
   11c5a:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   11c5c:	f8d0 05f8 	ldr.w	r0, [r0, #1528]	; 0x5f8
   11c60:	f204 6604 	addw	r6, r4, #1540	; 0x604
   11c64:	6803      	ldr	r3, [r0, #0]
   11c66:	681b      	ldr	r3, [r3, #0]
   11c68:	4631      	mov	r1, r6
   11c6a:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11c6c:	f504 67d8 	add.w	r7, r4, #1728	; 0x6c0
   11c70:	f8d4 3718 	ldr.w	r3, [r4, #1816]	; 0x718
   11c74:	681a      	ldr	r2, [r3, #0]
   11c76:	685b      	ldr	r3, [r3, #4]
   11c78:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11c7c:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   11c7e:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   11c82:	4629      	mov	r1, r5
   11c84:	4640      	mov	r0, r8
   11c86:	4b32      	ldr	r3, [pc, #200]	; (11d50 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   11c88:	4798      	blx	r3
   11c8a:	f884 06fc 	strb.w	r0, [r4, #1788]	; 0x6fc
	if (semiColonPosition>0)
   11c8e:	b130      	cbz	r0, 11c9e <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   11c90:	2807      	cmp	r0, #7
   11c92:	dc2d      	bgt.n	11cf0 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   11c94:	4602      	mov	r2, r0
   11c96:	4629      	mov	r1, r5
   11c98:	4638      	mov	r0, r7
   11c9a:	4b2e      	ldr	r3, [pc, #184]	; (11d54 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11c9c:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   11c9e:	4628      	mov	r0, r5
   11ca0:	4b2d      	ldr	r3, [pc, #180]	; (11d58 <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   11ca2:	4798      	blx	r3
   11ca4:	f884 071c 	strb.w	r0, [r4, #1820]	; 0x71c
   11ca8:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   11caa:	2a33      	cmp	r2, #51	; 0x33
   11cac:	dd26      	ble.n	11cfc <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   11cae:	4629      	mov	r1, r5
   11cb0:	4640      	mov	r0, r8
   11cb2:	4b2a      	ldr	r3, [pc, #168]	; (11d5c <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   11cb4:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   11cb6:	f894 16fc 	ldrb.w	r1, [r4, #1788]	; 0x6fc
   11cba:	4429      	add	r1, r5
   11cbc:	f504 63d9 	add.w	r3, r4, #1736	; 0x6c8
   11cc0:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11cc4:	f8d1 e000 	ldr.w	lr, [r1]
   11cc8:	684f      	ldr	r7, [r1, #4]
   11cca:	688d      	ldr	r5, [r1, #8]
   11ccc:	68c8      	ldr	r0, [r1, #12]
   11cce:	f8c3 e000 	str.w	lr, [r3]
   11cd2:	605f      	str	r7, [r3, #4]
   11cd4:	609d      	str	r5, [r3, #8]
   11cd6:	60d8      	str	r0, [r3, #12]
   11cd8:	3110      	adds	r1, #16
   11cda:	3310      	adds	r3, #16
   11cdc:	4291      	cmp	r1, r2
   11cde:	d1f1      	bne.n	11cc4 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   11ce0:	8808      	ldrh	r0, [r1, #0]
   11ce2:	788a      	ldrb	r2, [r1, #2]
   11ce4:	8018      	strh	r0, [r3, #0]
   11ce6:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   11ce8:	2333      	movs	r3, #51	; 0x33
   11cea:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
   11cee:	e012      	b.n	11d16 <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   11cf0:	682a      	ldr	r2, [r5, #0]
   11cf2:	686b      	ldr	r3, [r5, #4]
   11cf4:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11cf8:	607b      	str	r3, [r7, #4]
   11cfa:	e7d0      	b.n	11c9e <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   11cfc:	f894 16fc 	ldrb.w	r1, [r4, #1788]	; 0x6fc
   11d00:	4429      	add	r1, r5
   11d02:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   11d06:	4b13      	ldr	r3, [pc, #76]	; (11d54 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11d08:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   11d0a:	f894 371c 	ldrb.w	r3, [r4, #1820]	; 0x71c
   11d0e:	4423      	add	r3, r4
   11d10:	220a      	movs	r2, #10
   11d12:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11d16:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11d1a:	6803      	ldr	r3, [r0, #0]
   11d1c:	685b      	ldr	r3, [r3, #4]
   11d1e:	4631      	mov	r1, r6
   11d20:	4798      	blx	r3
   11d22:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	if (currentTimestamp>0)
   11d26:	b978      	cbnz	r0, 11d48 <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   11d28:	f04f 33ff 	mov.w	r3, #4294967295
   11d2c:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
	}
	
	StackEventEntry(&entry,text_length+1);
   11d30:	f894 271c 	ldrb.w	r2, [r4, #1820]	; 0x71c
   11d34:	3201      	adds	r2, #1
   11d36:	b2d2      	uxtb	r2, r2
   11d38:	f204 61bc 	addw	r1, r4, #1724	; 0x6bc
   11d3c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11d40:	4b07      	ldr	r3, [pc, #28]	; (11d60 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   11d42:	4798      	blx	r3
   11d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   11d48:	f8c4 06bc 	str.w	r0, [r4, #1724]	; 0x6bc
   11d4c:	e7f0      	b.n	11d30 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   11d4e:	bf00      	nop
   11d50:	00012175 	.word	0x00012175
   11d54:	0001b0e1 	.word	0x0001b0e1
   11d58:	0001b401 	.word	0x0001b401
   11d5c:	00012155 	.word	0x00012155
   11d60:	00012225 	.word	0x00012225

00011d64 <_ZN18Event_Logger_Class16SaveInstationLogEv>:
	

}

void Event_Logger_Class::SaveInstationLog(void){
   11d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d68:	b086      	sub	sp, #24
   11d6a:	4604      	mov	r4, r0
	
	uint8_t text[]="Initialization Finished";
   11d6c:	466d      	mov	r5, sp
   11d6e:	4e30      	ldr	r6, [pc, #192]	; (11e30 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xcc>)
   11d70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11d74:	e896 0003 	ldmia.w	r6, {r0, r1}
   11d78:	e885 0003 	stmia.w	r5, {r0, r1}
	
	cal->GetDateTime(&currentDateTime);
   11d7c:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11d80:	f204 6804 	addw	r8, r4, #1540	; 0x604
   11d84:	6803      	ldr	r3, [r0, #0]
   11d86:	681b      	ldr	r3, [r3, #0]
   11d88:	4641      	mov	r1, r8
   11d8a:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11d8c:	f8d4 3718 	ldr.w	r3, [r4, #1816]	; 0x718
   11d90:	681a      	ldr	r2, [r3, #0]
   11d92:	685b      	ldr	r3, [r3, #4]
   11d94:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11d98:	f8c4 36c4 	str.w	r3, [r4, #1732]	; 0x6c4

	text_length=(uint8_t)strlen((char*)text);
   11d9c:	4668      	mov	r0, sp
   11d9e:	4b25      	ldr	r3, [pc, #148]	; (11e34 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd0>)
   11da0:	4798      	blx	r3
   11da2:	f884 071c 	strb.w	r0, [r4, #1820]	; 0x71c
   11da6:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   11da8:	2a33      	cmp	r2, #51	; 0x33
   11daa:	dd1b      	ble.n	11de4 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x80>
	{
		ChopStringDescription(text);
   11dac:	4669      	mov	r1, sp
   11dae:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11db2:	4b21      	ldr	r3, [pc, #132]	; (11e38 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd4>)
   11db4:	4798      	blx	r3
		memcpy(&entry.description,text,DESCRIPTION_LENGHT_TEXT);
   11db6:	466d      	mov	r5, sp
   11db8:	f504 66d9 	add.w	r6, r4, #1736	; 0x6c8
   11dbc:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   11dc0:	462f      	mov	r7, r5
   11dc2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11dc4:	6030      	str	r0, [r6, #0]
   11dc6:	6071      	str	r1, [r6, #4]
   11dc8:	60b2      	str	r2, [r6, #8]
   11dca:	60f3      	str	r3, [r6, #12]
   11dcc:	463d      	mov	r5, r7
   11dce:	3610      	adds	r6, #16
   11dd0:	4577      	cmp	r7, lr
   11dd2:	d1f5      	bne.n	11dc0 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x5c>
   11dd4:	883a      	ldrh	r2, [r7, #0]
   11dd6:	78bb      	ldrb	r3, [r7, #2]
   11dd8:	8032      	strh	r2, [r6, #0]
   11dda:	70b3      	strb	r3, [r6, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   11ddc:	2333      	movs	r3, #51	; 0x33
   11dde:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
   11de2:	e00a      	b.n	11dfa <_ZN18Event_Logger_Class16SaveInstationLogEv+0x96>
	}
	else
	{
		memcpy(&entry.description,text,(uint32_t)text_length);
   11de4:	4669      	mov	r1, sp
   11de6:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   11dea:	4b14      	ldr	r3, [pc, #80]	; (11e3c <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd8>)
   11dec:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   11dee:	f894 371c 	ldrb.w	r3, [r4, #1820]	; 0x71c
   11df2:	4423      	add	r3, r4
   11df4:	220a      	movs	r2, #10
   11df6:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11dfa:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11dfe:	6803      	ldr	r3, [r0, #0]
   11e00:	685b      	ldr	r3, [r3, #4]
   11e02:	4641      	mov	r1, r8
   11e04:	4798      	blx	r3
   11e06:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	if (currentTimestamp>0)
   11e0a:	b968      	cbnz	r0, 11e28 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xc4>
	{
		entry.timestamp=currentTimestamp;
	}
	else
	{
		entry.timestamp=0xffffffff;
   11e0c:	f04f 33ff 	mov.w	r3, #4294967295
   11e10:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
	}
	
	StackEventEntry(&entry,0xff);
   11e14:	22ff      	movs	r2, #255	; 0xff
   11e16:	f204 61bc 	addw	r1, r4, #1724	; 0x6bc
   11e1a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11e1e:	4b08      	ldr	r3, [pc, #32]	; (11e40 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xdc>)
   11e20:	4798      	blx	r3
	

}
   11e22:	b006      	add	sp, #24
   11e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   11e28:	f8c4 06bc 	str.w	r0, [r4, #1724]	; 0x6bc
   11e2c:	e7f2      	b.n	11e14 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xb0>
   11e2e:	bf00      	nop
   11e30:	0001bb5c 	.word	0x0001bb5c
   11e34:	0001b401 	.word	0x0001b401
   11e38:	00012155 	.word	0x00012155
   11e3c:	0001b0e1 	.word	0x0001b0e1
   11e40:	00012225 	.word	0x00012225

00011e44 <_ZN18Event_Logger_Class19GetCurrentTimeStampEv>:

uint32_t Event_Logger_Class::GetCurrentTimeStamp(void){
   11e44:	b538      	push	{r3, r4, r5, lr}
   11e46:	4604      	mov	r4, r0
	cal->GetDateTime(&currentDateTime);
   11e48:	f8d0 05f8 	ldr.w	r0, [r0, #1528]	; 0x5f8
   11e4c:	f204 6504 	addw	r5, r4, #1540	; 0x604
   11e50:	6803      	ldr	r3, [r0, #0]
   11e52:	681b      	ldr	r3, [r3, #0]
   11e54:	4629      	mov	r1, r5
   11e56:	4798      	blx	r3
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11e58:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11e5c:	6803      	ldr	r3, [r0, #0]
   11e5e:	685b      	ldr	r3, [r3, #4]
   11e60:	4629      	mov	r1, r5
   11e62:	4798      	blx	r3
   11e64:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	return currentTimestamp;
}
   11e68:	bd38      	pop	{r3, r4, r5, pc}
	...

00011e6c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh>:

void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, uint8_t result){
   11e6c:	b570      	push	{r4, r5, r6, lr}
   11e6e:	4604      	mov	r4, r0
   11e70:	460d      	mov	r5, r1
   11e72:	4610      	mov	r0, r2
	task_result	=(TaskResult)result;
   11e74:	f884 3708 	strb.w	r3, [r4, #1800]	; 0x708

	itoa(index,logger_number,10);
   11e78:	220a      	movs	r2, #10
   11e7a:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11e7e:	4b20      	ldr	r3, [pc, #128]	; (11f00 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x94>)
   11e80:	4798      	blx	r3
	strcpy(logger_text,text);
   11e82:	4629      	mov	r1, r5
   11e84:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11e88:	4b1e      	ldr	r3, [pc, #120]	; (11f04 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x98>)
   11e8a:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
   11e8c:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11e90:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11e94:	4b1c      	ldr	r3, [pc, #112]	; (11f08 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x9c>)
   11e96:	4798      	blx	r3
   11e98:	4605      	mov	r5, r0
   11e9a:	f8c4 0710 	str.w	r0, [r4, #1808]	; 0x710
	switch (task_result)
   11e9e:	f894 3708 	ldrb.w	r3, [r4, #1800]	; 0x708
   11ea2:	b173      	cbz	r3, 11ec2 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x56>
   11ea4:	2b01      	cmp	r3, #1
   11ea6:	d01e      	beq.n	11ee6 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x7a>
		case FAILLED :
			logger_module=strcat(logger_module," FAILLED");
		
		break;
		default:
			logger_module=strcat(logger_module," UNKNOWN");
   11ea8:	4b18      	ldr	r3, [pc, #96]	; (11f0c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11eaa:	4798      	blx	r3
   11eac:	4606      	mov	r6, r0
   11eae:	182a      	adds	r2, r5, r0
   11eb0:	4b17      	ldr	r3, [pc, #92]	; (11f10 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa4>)
   11eb2:	cb03      	ldmia	r3!, {r0, r1}
   11eb4:	51a8      	str	r0, [r5, r6]
   11eb6:	6051      	str	r1, [r2, #4]
   11eb8:	781b      	ldrb	r3, [r3, #0]
   11eba:	7213      	strb	r3, [r2, #8]
   11ebc:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
		/* Your code here */
		break;
   11ec0:	e00b      	b.n	11eda <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
			logger_module=strcat(logger_module," SUCCESS");
   11ec2:	4b12      	ldr	r3, [pc, #72]	; (11f0c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11ec4:	4798      	blx	r3
   11ec6:	4606      	mov	r6, r0
   11ec8:	182a      	adds	r2, r5, r0
   11eca:	4b12      	ldr	r3, [pc, #72]	; (11f14 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa8>)
   11ecc:	cb03      	ldmia	r3!, {r0, r1}
   11ece:	51a8      	str	r0, [r5, r6]
   11ed0:	6051      	str	r1, [r2, #4]
   11ed2:	781b      	ldrb	r3, [r3, #0]
   11ed4:	7213      	strb	r3, [r2, #8]
   11ed6:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
	SaveEventIndexResult(text,index,(uint8_t)(!rb));
}

void Event_Logger_Class::SaveEvent(char const * text){
	
	SaveEvent((uint8_t*)text);
   11eda:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   11ede:	4620      	mov	r0, r4
   11ee0:	4b0d      	ldr	r3, [pc, #52]	; (11f18 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xac>)
   11ee2:	4798      	blx	r3
   11ee4:	bd70      	pop	{r4, r5, r6, pc}
			logger_module=strcat(logger_module," FAILLED");
   11ee6:	4b09      	ldr	r3, [pc, #36]	; (11f0c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11ee8:	4798      	blx	r3
   11eea:	4606      	mov	r6, r0
   11eec:	182a      	adds	r2, r5, r0
   11eee:	4b0b      	ldr	r3, [pc, #44]	; (11f1c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xb0>)
   11ef0:	cb03      	ldmia	r3!, {r0, r1}
   11ef2:	51a8      	str	r0, [r5, r6]
   11ef4:	6051      	str	r1, [r2, #4]
   11ef6:	781b      	ldrb	r3, [r3, #0]
   11ef8:	7213      	strb	r3, [r2, #8]
   11efa:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
		break;
   11efe:	e7ec      	b.n	11eda <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
   11f00:	00018a55 	.word	0x00018a55
   11f04:	0001b331 	.word	0x0001b331
   11f08:	0001b2f1 	.word	0x0001b2f1
   11f0c:	0001b401 	.word	0x0001b401
   11f10:	0001bb8c 	.word	0x0001bb8c
   11f14:	0001bb74 	.word	0x0001bb74
   11f18:	00011c55 	.word	0x00011c55
   11f1c:	0001bb80 	.word	0x0001bb80

00011f20 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb>:
void Event_Logger_Class::SaveEventIndexEnable(char *text,uint8_t index, bool res){
   11f20:	b570      	push	{r4, r5, r6, lr}
   11f22:	4604      	mov	r4, r0
   11f24:	460d      	mov	r5, r1
   11f26:	4610      	mov	r0, r2
   11f28:	461e      	mov	r6, r3
	itoa(index,logger_number,10);
   11f2a:	220a      	movs	r2, #10
   11f2c:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11f30:	4b17      	ldr	r3, [pc, #92]	; (11f90 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x70>)
   11f32:	4798      	blx	r3
	strcpy(logger_text,text);
   11f34:	4629      	mov	r1, r5
   11f36:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11f3a:	4b16      	ldr	r3, [pc, #88]	; (11f94 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x74>)
   11f3c:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
   11f3e:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11f42:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11f46:	4b14      	ldr	r3, [pc, #80]	; (11f98 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x78>)
   11f48:	4798      	blx	r3
   11f4a:	4605      	mov	r5, r0
   11f4c:	f8c4 0710 	str.w	r0, [r4, #1808]	; 0x710
	if (res)
   11f50:	b98e      	cbnz	r6, 11f76 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x56>
		logger_module=strcat(logger_module," Disabled");
   11f52:	4b12      	ldr	r3, [pc, #72]	; (11f9c <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x7c>)
   11f54:	4798      	blx	r3
   11f56:	4606      	mov	r6, r0
   11f58:	182a      	adds	r2, r5, r0
   11f5a:	4b11      	ldr	r3, [pc, #68]	; (11fa0 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x80>)
   11f5c:	cb03      	ldmia	r3!, {r0, r1}
   11f5e:	51a8      	str	r0, [r5, r6]
   11f60:	6051      	str	r1, [r2, #4]
   11f62:	881b      	ldrh	r3, [r3, #0]
   11f64:	8113      	strh	r3, [r2, #8]
   11f66:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
	SaveEvent((uint8_t*)text);
   11f6a:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   11f6e:	4620      	mov	r0, r4
   11f70:	4b0c      	ldr	r3, [pc, #48]	; (11fa4 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x84>)
   11f72:	4798      	blx	r3
   11f74:	bd70      	pop	{r4, r5, r6, pc}
		logger_module=strcat(logger_module," Enabled");
   11f76:	4b09      	ldr	r3, [pc, #36]	; (11f9c <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x7c>)
   11f78:	4798      	blx	r3
   11f7a:	4606      	mov	r6, r0
   11f7c:	182a      	adds	r2, r5, r0
   11f7e:	4b0a      	ldr	r3, [pc, #40]	; (11fa8 <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x88>)
   11f80:	cb03      	ldmia	r3!, {r0, r1}
   11f82:	51a8      	str	r0, [r5, r6]
   11f84:	6051      	str	r1, [r2, #4]
   11f86:	781b      	ldrb	r3, [r3, #0]
   11f88:	7213      	strb	r3, [r2, #8]
   11f8a:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
   11f8e:	e7ec      	b.n	11f6a <_ZN18Event_Logger_Class20SaveEventIndexEnableEPchb+0x4a>
   11f90:	00018a55 	.word	0x00018a55
   11f94:	0001b331 	.word	0x0001b331
   11f98:	0001b2f1 	.word	0x0001b2f1
   11f9c:	0001b401 	.word	0x0001b401
   11fa0:	0001bba4 	.word	0x0001bba4
   11fa4:	00011c55 	.word	0x00011c55
   11fa8:	0001bb98 	.word	0x0001bb98

00011fac <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh>:
void Event_Logger_Class::SaveEventGPIOValue(char *text,uint8_t *gpio_array,uint8_t size){
   11fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11fb0:	b084      	sub	sp, #16
   11fb2:	4681      	mov	r9, r0
   11fb4:	468a      	mov	sl, r1
   11fb6:	4616      	mov	r6, r2
   11fb8:	461f      	mov	r7, r3
	char temp_logger_number[]="0x123456789a";
   11fba:	4b15      	ldr	r3, [pc, #84]	; (12010 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x64>)
   11fbc:	466c      	mov	r4, sp
   11fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11fc0:	c407      	stmia	r4!, {r0, r1, r2}
   11fc2:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < size; i++)
   11fc4:	b187      	cbz	r7, 11fe8 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x3c>
   11fc6:	463d      	mov	r5, r7
   11fc8:	2100      	movs	r1, #0
   11fca:	460c      	mov	r4, r1
		utoa(gpio_array[i],&temp_logger_number[2*(i+1)],16);
   11fcc:	f04f 0810 	mov.w	r8, #16
   11fd0:	4f10      	ldr	r7, [pc, #64]	; (12014 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x68>)
   11fd2:	3101      	adds	r1, #1
   11fd4:	4642      	mov	r2, r8
   11fd6:	eb0d 0141 	add.w	r1, sp, r1, lsl #1
   11fda:	5d30      	ldrb	r0, [r6, r4]
   11fdc:	47b8      	blx	r7
	for (uint8_t i = 0; i < size; i++)
   11fde:	3401      	adds	r4, #1
   11fe0:	b2e4      	uxtb	r4, r4
   11fe2:	4621      	mov	r1, r4
   11fe4:	42ac      	cmp	r4, r5
   11fe6:	dbf4      	blt.n	11fd2 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x26>
	strcpy(logger_text,text);
   11fe8:	4651      	mov	r1, sl
   11fea:	f8d9 070c 	ldr.w	r0, [r9, #1804]	; 0x70c
   11fee:	4b0a      	ldr	r3, [pc, #40]	; (12018 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x6c>)
   11ff0:	4798      	blx	r3
	logger_module=strcat(logger_text,temp_logger_number);
   11ff2:	4669      	mov	r1, sp
   11ff4:	f8d9 070c 	ldr.w	r0, [r9, #1804]	; 0x70c
   11ff8:	4b08      	ldr	r3, [pc, #32]	; (1201c <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x70>)
   11ffa:	4798      	blx	r3
   11ffc:	4601      	mov	r1, r0
   11ffe:	f8c9 0710 	str.w	r0, [r9, #1808]	; 0x710
	SaveEvent((uint8_t*)text);
   12002:	4648      	mov	r0, r9
   12004:	4b06      	ldr	r3, [pc, #24]	; (12020 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x74>)
   12006:	4798      	blx	r3
}
   12008:	b004      	add	sp, #16
   1200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1200e:	bf00      	nop
   12010:	0001bbb0 	.word	0x0001bbb0
   12014:	00018b65 	.word	0x00018b65
   12018:	0001b331 	.word	0x0001b331
   1201c:	0001b2f1 	.word	0x0001b2f1
   12020:	00011c55 	.word	0x00011c55

00012024 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchb>:
void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, bool rb){
   12024:	b510      	push	{r4, lr}
	SaveEventIndexResult(text,index,(uint8_t)(!rb));
   12026:	f083 0301 	eor.w	r3, r3, #1
   1202a:	4c01      	ldr	r4, [pc, #4]	; (12030 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchb+0xc>)
   1202c:	47a0      	blx	r4
   1202e:	bd10      	pop	{r4, pc}
   12030:	00011e6d 	.word	0x00011e6d

00012034 <_ZN18Event_Logger_Class9SaveEventEPKc>:
void Event_Logger_Class::SaveEvent(char const * text){
   12034:	b508      	push	{r3, lr}
	SaveEvent((uint8_t*)text);
   12036:	4b01      	ldr	r3, [pc, #4]	; (1203c <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   12038:	4798      	blx	r3
   1203a:	bd08      	pop	{r3, pc}
   1203c:	00011c55 	.word	0x00011c55

00012040 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   12040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   12044:	4c30      	ldr	r4, [pc, #192]	; (12108 <_GLOBAL__sub_I_local_info_text+0xc8>)
   12046:	f504 758c 	add.w	r5, r4, #280	; 0x118
   1204a:	4930      	ldr	r1, [pc, #192]	; (1210c <_GLOBAL__sub_I_local_info_text+0xcc>)
   1204c:	4628      	mov	r0, r5
   1204e:	4f30      	ldr	r7, [pc, #192]	; (12110 <_GLOBAL__sub_I_local_info_text+0xd0>)
   12050:	47b8      	blx	r7
   12052:	4e30      	ldr	r6, [pc, #192]	; (12114 <_GLOBAL__sub_I_local_info_text+0xd4>)
   12054:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1214c <_GLOBAL__sub_I_local_info_text+0x10c>
   12058:	4632      	mov	r2, r6
   1205a:	4641      	mov	r1, r8
   1205c:	4628      	mov	r0, r5
   1205e:	4d2e      	ldr	r5, [pc, #184]	; (12118 <_GLOBAL__sub_I_local_info_text+0xd8>)
   12060:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   12062:	f504 799c 	add.w	r9, r4, #312	; 0x138
   12066:	492d      	ldr	r1, [pc, #180]	; (1211c <_GLOBAL__sub_I_local_info_text+0xdc>)
   12068:	4648      	mov	r0, r9
   1206a:	47b8      	blx	r7
   1206c:	4632      	mov	r2, r6
   1206e:	4641      	mov	r1, r8
   12070:	4648      	mov	r0, r9
   12072:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   12074:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   12078:	4929      	ldr	r1, [pc, #164]	; (12120 <_GLOBAL__sub_I_local_info_text+0xe0>)
   1207a:	4648      	mov	r0, r9
   1207c:	47b8      	blx	r7
   1207e:	4632      	mov	r2, r6
   12080:	4641      	mov	r1, r8
   12082:	4648      	mov	r0, r9
   12084:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   12086:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   1208a:	4926      	ldr	r1, [pc, #152]	; (12124 <_GLOBAL__sub_I_local_info_text+0xe4>)
   1208c:	4648      	mov	r0, r9
   1208e:	47b8      	blx	r7
   12090:	4632      	mov	r2, r6
   12092:	4641      	mov	r1, r8
   12094:	4648      	mov	r0, r9
   12096:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   12098:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   1209c:	4922      	ldr	r1, [pc, #136]	; (12128 <_GLOBAL__sub_I_local_info_text+0xe8>)
   1209e:	4648      	mov	r0, r9
   120a0:	47b8      	blx	r7
   120a2:	4632      	mov	r2, r6
   120a4:	4641      	mov	r1, r8
   120a6:	4648      	mov	r0, r9
   120a8:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   120aa:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   120ae:	491f      	ldr	r1, [pc, #124]	; (1212c <_GLOBAL__sub_I_local_info_text+0xec>)
   120b0:	4648      	mov	r0, r9
   120b2:	47b8      	blx	r7
   120b4:	4632      	mov	r2, r6
   120b6:	4641      	mov	r1, r8
   120b8:	4648      	mov	r0, r9
   120ba:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   120bc:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   120c0:	491b      	ldr	r1, [pc, #108]	; (12130 <_GLOBAL__sub_I_local_info_text+0xf0>)
   120c2:	4648      	mov	r0, r9
   120c4:	47b8      	blx	r7
   120c6:	4632      	mov	r2, r6
   120c8:	4641      	mov	r1, r8
   120ca:	4648      	mov	r0, r9
   120cc:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   120ce:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   120d2:	4918      	ldr	r1, [pc, #96]	; (12134 <_GLOBAL__sub_I_local_info_text+0xf4>)
   120d4:	4648      	mov	r0, r9
   120d6:	47b8      	blx	r7
   120d8:	4632      	mov	r2, r6
   120da:	4641      	mov	r1, r8
   120dc:	4648      	mov	r0, r9
   120de:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   120e0:	4915      	ldr	r1, [pc, #84]	; (12138 <_GLOBAL__sub_I_local_info_text+0xf8>)
   120e2:	4620      	mov	r0, r4
   120e4:	4b15      	ldr	r3, [pc, #84]	; (1213c <_GLOBAL__sub_I_local_info_text+0xfc>)
   120e6:	4798      	blx	r3
   120e8:	4632      	mov	r2, r6
   120ea:	4915      	ldr	r1, [pc, #84]	; (12140 <_GLOBAL__sub_I_local_info_text+0x100>)
   120ec:	4620      	mov	r0, r4
   120ee:	47a8      	blx	r5
 Event_Logger_Class	logger;
   120f0:	f504 7406 	add.w	r4, r4, #536	; 0x218
   120f4:	4620      	mov	r0, r4
   120f6:	4b13      	ldr	r3, [pc, #76]	; (12144 <_GLOBAL__sub_I_local_info_text+0x104>)
   120f8:	4798      	blx	r3
   120fa:	4632      	mov	r2, r6
   120fc:	4912      	ldr	r1, [pc, #72]	; (12148 <_GLOBAL__sub_I_local_info_text+0x108>)
   120fe:	4620      	mov	r0, r4
   12100:	47a8      	blx	r5
   12102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12106:	bf00      	nop
   12108:	20003860 	.word	0x20003860
   1210c:	2000df58 	.word	0x2000df58
   12110:	000104e5 	.word	0x000104e5
   12114:	20000000 	.word	0x20000000
   12118:	0001ab61 	.word	0x0001ab61
   1211c:	2000dfec 	.word	0x2000dfec
   12120:	2000e110 	.word	0x2000e110
   12124:	2000e00c 	.word	0x2000e00c
   12128:	2000e0d0 	.word	0x2000e0d0
   1212c:	2000e0f0 	.word	0x2000e0f0
   12130:	2000dfc8 	.word	0x2000dfc8
   12134:	2000e068 	.word	0x2000e068
   12138:	2000e130 	.word	0x2000e130
   1213c:	0001a409 	.word	0x0001a409
   12140:	0001a445 	.word	0x0001a445
   12144:	00011b8d 	.word	0x00011b8d
   12148:	00011b5d 	.word	0x00011b5d
   1214c:	0001051d 	.word	0x0001051d

00012150 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   12150:	4770      	bx	lr

00012152 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   12152:	4770      	bx	lr

00012154 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   12154:	b538      	push	{r3, r4, r5, lr}
   12156:	4605      	mov	r5, r0
   12158:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   1215a:	4608      	mov	r0, r1
   1215c:	4b04      	ldr	r3, [pc, #16]	; (12170 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   1215e:	4798      	blx	r3
   12160:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   12162:	b2c0      	uxtb	r0, r0
   12164:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   12166:	bfc4      	itt	gt
   12168:	230a      	movgt	r3, #10
   1216a:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   1216e:	bd38      	pop	{r3, r4, r5, pc}
   12170:	0001b401 	.word	0x0001b401

00012174 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   12174:	7808      	ldrb	r0, [r1, #0]
   12176:	b148      	cbz	r0, 1218c <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   12178:	283a      	cmp	r0, #58	; 0x3a
   1217a:	d009      	beq.n	12190 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   1217c:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   1217e:	3301      	adds	r3, #1
   12180:	b2db      	uxtb	r3, r3
   12182:	5cc8      	ldrb	r0, [r1, r3]
   12184:	b118      	cbz	r0, 1218e <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   12186:	283a      	cmp	r0, #58	; 0x3a
   12188:	d1f9      	bne.n	1217e <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   1218a:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   1218c:	4770      	bx	lr
   1218e:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   12190:	2000      	movs	r0, #0
   12192:	4770      	bx	lr

00012194 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   12194:	b510      	push	{r4, lr}
   12196:	4604      	mov	r4, r0
   12198:	4b0f      	ldr	r3, [pc, #60]	; (121d8 <_ZN15DataLoger_ClassC1Ev+0x44>)
   1219a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   1219c:	f44f 7200 	mov.w	r2, #512	; 0x200
   121a0:	2100      	movs	r1, #0
   121a2:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   121a6:	4b0d      	ldr	r3, [pc, #52]	; (121dc <_ZN15DataLoger_ClassC1Ev+0x48>)
   121a8:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   121aa:	2300      	movs	r3, #0
   121ac:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   121b0:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   121b4:	230a      	movs	r3, #10
   121b6:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   121ba:	4a09      	ldr	r2, [pc, #36]	; (121e0 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   121bc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   121c0:	4b08      	ldr	r3, [pc, #32]	; (121e4 <_ZN15DataLoger_ClassC1Ev+0x50>)
   121c2:	4909      	ldr	r1, [pc, #36]	; (121e8 <_ZN15DataLoger_ClassC1Ev+0x54>)
   121c4:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   121c8:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	logger.event_buffer_arrray_stack=&stackValue;
   121cc:	f504 629e 	add.w	r2, r4, #1264	; 0x4f0
   121d0:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	
} //DataLoger_Class
   121d4:	4620      	mov	r0, r4
   121d6:	bd10      	pop	{r4, pc}
   121d8:	00019f89 	.word	0x00019f89
   121dc:	0001b215 	.word	0x0001b215
   121e0:	20004198 	.word	0x20004198
   121e4:	20003a78 	.word	0x20003a78
   121e8:	20005198 	.word	0x20005198

000121ec <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   121ec:	b510      	push	{r4, lr}
   121ee:	4604      	mov	r4, r0
   121f0:	4b01      	ldr	r3, [pc, #4]	; (121f8 <_ZN15DataLoger_ClassD1Ev+0xc>)
   121f2:	4798      	blx	r3
{
} //~DataLoger_Class
   121f4:	4620      	mov	r0, r4
   121f6:	bd10      	pop	{r4, pc}
   121f8:	00019fc5 	.word	0x00019fc5

000121fc <_ZN15DataLoger_Class13SetStackValueEm>:
	return 0;
}

void	DataLoger_Class::SetStackValue(uint32_t stk){
	
	if (stk==0)
   121fc:	460b      	mov	r3, r1
   121fe:	b911      	cbnz	r1, 12206 <_ZN15DataLoger_Class13SetStackValueEm+0xa>
	{
		stackPointer=&staticEventLogs[stk];
   12200:	4a02      	ldr	r2, [pc, #8]	; (1220c <_ZN15DataLoger_Class13SetStackValueEm+0x10>)
   12202:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
	} 
	else
	{
	}
	stackValue=stk;
   12206:	f8c0 34f0 	str.w	r3, [r0, #1264]	; 0x4f0
   1220a:	4770      	bx	lr
   1220c:	20004198 	.word	0x20004198

00012210 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   12210:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   12214:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   12216:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1221a:	bf94      	ite	ls
   1221c:	2000      	movls	r0, #0
   1221e:	2001      	movhi	r0, #1
   12220:	4770      	bx	lr
	...

00012224 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   12224:	b5f0      	push	{r4, r5, r6, r7, lr}
   12226:	b087      	sub	sp, #28
   12228:	4604      	mov	r4, r0
   1222a:	460e      	mov	r6, r1
	if (len==0xff)
   1222c:	2aff      	cmp	r2, #255	; 0xff
   1222e:	d018      	beq.n	12262 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   12230:	4615      	mov	r5, r2
		if (IsStackFull())
   12232:	4b29      	ldr	r3, [pc, #164]	; (122d8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   12234:	4798      	blx	r3
   12236:	2800      	cmp	r0, #0
   12238:	d13b      	bne.n	122b2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   1223a:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   1223e:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   12242:	f105 020c 	add.w	r2, r5, #12
   12246:	4631      	mov	r1, r6
   12248:	4418      	add	r0, r3
   1224a:	4b24      	ldr	r3, [pc, #144]	; (122dc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   1224c:	4798      	blx	r3
		stackValue+=12+len;
   1224e:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   12252:	320c      	adds	r2, #12
   12254:	442a      	add	r2, r5
   12256:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   1225a:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   1225e:	b007      	add	sp, #28
   12260:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   12262:	466d      	mov	r5, sp
   12264:	4f1e      	ldr	r7, [pc, #120]	; (122e0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   12266:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   12268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1226a:	e897 0003 	ldmia.w	r7, {r0, r1}
   1226e:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   12272:	4668      	mov	r0, sp
   12274:	4b1b      	ldr	r3, [pc, #108]	; (122e4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   12276:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   12278:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   1227c:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   12280:	b2c2      	uxtb	r2, r0
   12282:	320d      	adds	r2, #13
   12284:	4631      	mov	r1, r6
   12286:	18e8      	adds	r0, r5, r3
   12288:	4b14      	ldr	r3, [pc, #80]	; (122dc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   1228a:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   1228c:	4d16      	ldr	r5, [pc, #88]	; (122e8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   1228e:	4629      	mov	r1, r5
   12290:	4816      	ldr	r0, [pc, #88]	; (122ec <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   12292:	4b17      	ldr	r3, [pc, #92]	; (122f0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   12294:	4798      	blx	r3
   12296:	4b17      	ldr	r3, [pc, #92]	; (122f4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   12298:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   1229c:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   122a0:	2100      	movs	r1, #0
   122a2:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   122a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   122aa:	4628      	mov	r0, r5
   122ac:	4b12      	ldr	r3, [pc, #72]	; (122f8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   122ae:	4798      	blx	r3
   122b0:	e7d3      	b.n	1225a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   122b2:	4f0d      	ldr	r7, [pc, #52]	; (122e8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   122b4:	4639      	mov	r1, r7
   122b6:	480d      	ldr	r0, [pc, #52]	; (122ec <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   122b8:	4b0d      	ldr	r3, [pc, #52]	; (122f0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   122ba:	4798      	blx	r3
   122bc:	4b0d      	ldr	r3, [pc, #52]	; (122f4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   122be:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   122c2:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   122c6:	2100      	movs	r1, #0
   122c8:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   122cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   122d0:	4638      	mov	r0, r7
   122d2:	4b09      	ldr	r3, [pc, #36]	; (122f8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   122d4:	4798      	blx	r3
   122d6:	e7b0      	b.n	1223a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   122d8:	00012211 	.word	0x00012211
   122dc:	0001b0e1 	.word	0x0001b0e1
   122e0:	0001bb5c 	.word	0x0001bb5c
   122e4:	0001b401 	.word	0x0001b401
   122e8:	20004198 	.word	0x20004198
   122ec:	20006b04 	.word	0x20006b04
   122f0:	00014ac1 	.word	0x00014ac1
   122f4:	20005290 	.word	0x20005290
   122f8:	0001b215 	.word	0x0001b215

000122fc <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
   122fc:	b510      	push	{r4, lr}
   122fe:	4604      	mov	r4, r0
   12300:	4b01      	ldr	r3, [pc, #4]	; (12308 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
   12302:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
   12304:	4620      	mov	r0, r4
   12306:	bd10      	pop	{r4, pc}
   12308:	00012879 	.word	0x00012879

0001230c <_ZL19Valve_2_Has_Changedv>:
{
   1230c:	b510      	push	{r4, lr}
	flapper.valve2->ReadGPIOS(local_valve_gpios_buffer);
   1230e:	4c06      	ldr	r4, [pc, #24]	; (12328 <_ZL19Valve_2_Has_Changedv+0x1c>)
   12310:	4621      	mov	r1, r4
   12312:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   12316:	4b05      	ldr	r3, [pc, #20]	; (1232c <_ZL19Valve_2_Has_Changedv+0x20>)
   12318:	4798      	blx	r3
	logger.SaveEventGPIOValue("Valve 2 , gpios = ",local_valve_gpios_buffer,FLAPPER_VALVE_EXPANDERS);
   1231a:	2304      	movs	r3, #4
   1231c:	4622      	mov	r2, r4
   1231e:	4904      	ldr	r1, [pc, #16]	; (12330 <_ZL19Valve_2_Has_Changedv+0x24>)
   12320:	4804      	ldr	r0, [pc, #16]	; (12334 <_ZL19Valve_2_Has_Changedv+0x28>)
   12322:	4c05      	ldr	r4, [pc, #20]	; (12338 <_ZL19Valve_2_Has_Changedv+0x2c>)
   12324:	47a0      	blx	r4
   12326:	bd10      	pop	{r4, pc}
   12328:	2000519c 	.word	0x2000519c
   1232c:	00012b09 	.word	0x00012b09
   12330:	0001bbc0 	.word	0x0001bbc0
   12334:	20003a78 	.word	0x20003a78
   12338:	00011fad 	.word	0x00011fad

0001233c <_ZL19Valve_1_Has_Changedv>:
{
   1233c:	b510      	push	{r4, lr}
	flapper.valve1->ReadGPIOS(local_valve_gpios_buffer);
   1233e:	4c06      	ldr	r4, [pc, #24]	; (12358 <_ZL19Valve_1_Has_Changedv+0x1c>)
   12340:	4621      	mov	r1, r4
   12342:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   12346:	4b05      	ldr	r3, [pc, #20]	; (1235c <_ZL19Valve_1_Has_Changedv+0x20>)
   12348:	4798      	blx	r3
	logger.SaveEventGPIOValue("Valve 1 , gpios = ",local_valve_gpios_buffer,FLAPPER_VALVE_EXPANDERS);
   1234a:	2304      	movs	r3, #4
   1234c:	4622      	mov	r2, r4
   1234e:	4904      	ldr	r1, [pc, #16]	; (12360 <_ZL19Valve_1_Has_Changedv+0x24>)
   12350:	4804      	ldr	r0, [pc, #16]	; (12364 <_ZL19Valve_1_Has_Changedv+0x28>)
   12352:	4c05      	ldr	r4, [pc, #20]	; (12368 <_ZL19Valve_1_Has_Changedv+0x2c>)
   12354:	47a0      	blx	r4
   12356:	bd10      	pop	{r4, pc}
   12358:	2000519c 	.word	0x2000519c
   1235c:	00012b09 	.word	0x00012b09
   12360:	0001bbd4 	.word	0x0001bbd4
   12364:	20003a78 	.word	0x20003a78
   12368:	00011fad 	.word	0x00011fad

0001236c <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   1236c:	b510      	push	{r4, lr}
   1236e:	4803      	ldr	r0, [pc, #12]	; (1237c <__tcf_0+0x10>)
   12370:	4c03      	ldr	r4, [pc, #12]	; (12380 <__tcf_0+0x14>)
   12372:	47a0      	blx	r4
   12374:	4803      	ldr	r0, [pc, #12]	; (12384 <__tcf_0+0x18>)
   12376:	47a0      	blx	r4
   12378:	bd10      	pop	{r4, pc}
   1237a:	bf00      	nop
   1237c:	20005374 	.word	0x20005374
   12380:	00012879 	.word	0x00012879
   12384:	20005294 	.word	0x20005294

00012388 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
   12388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1238a:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
   1238c:	4d1d      	ldr	r5, [pc, #116]	; (12404 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x7c>)
   1238e:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
   12392:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
   12396:	2100      	movs	r1, #0
   12398:	4f1b      	ldr	r7, [pc, #108]	; (12408 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x80>)
   1239a:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   1239c:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
   123a0:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   123a4:	4e19      	ldr	r6, [pc, #100]	; (1240c <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x84>)
   123a6:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
   123a8:	f505 70ec 	add.w	r0, r5, #472	; 0x1d8
   123ac:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
		valve[i]->InitController(i);
   123b0:	2101      	movs	r1, #1
   123b2:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   123b4:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   123b8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   123bc:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
   123be:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
   123c2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   123c6:	47b0      	blx	r6
   123c8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   123cc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   123d0:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
   123d2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   123d6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	valve2=valve[1]; 
   123da:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   123de:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	ext_irq_register(PIN_PA04, Valve_1_Has_Changed);
   123e2:	490b      	ldr	r1, [pc, #44]	; (12410 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x88>)
   123e4:	2004      	movs	r0, #4
   123e6:	4d0b      	ldr	r5, [pc, #44]	; (12414 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x8c>)
   123e8:	47a8      	blx	r5
	ext_irq_register(PIN_PA05, Valve_2_Has_Changed);
   123ea:	490b      	ldr	r1, [pc, #44]	; (12418 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x90>)
   123ec:	2005      	movs	r0, #5
   123ee:	47a8      	blx	r5
	return (valve1->isOK)|(valve2->isOK);
   123f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   123f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   123f8:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   123fc:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
}
   12400:	4318      	orrs	r0, r3
   12402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12404:	2000519c 	.word	0x2000519c
   12408:	00012899 	.word	0x00012899
   1240c:	00012cd3 	.word	0x00012cd3
   12410:	0001233d 	.word	0x0001233d
   12414:	0000375d 	.word	0x0000375d
   12418:	0001230d 	.word	0x0001230d

0001241c <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv>:
		boolResult=	!valve1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
   1241c:	b570      	push	{r4, r5, r6, lr}
   1241e:	4605      	mov	r5, r0
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
   12420:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
   12424:	4e05      	ldr	r6, [pc, #20]	; (1243c <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv+0x20>)
   12426:	47b0      	blx	r6
   12428:	4604      	mov	r4, r0
   1242a:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
   1242e:	47b0      	blx	r6
   12430:	4320      	orrs	r0, r4
   12432:	b2c0      	uxtb	r0, r0
   12434:	f885 00f0 	strb.w	r0, [r5, #240]	; 0xf0
	return is_stand_alone;
}
   12438:	bd70      	pop	{r4, r5, r6, pc}
   1243a:	bf00      	nop
   1243c:	00012c89 	.word	0x00012c89

00012440 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:

Dual_Flapper_Valve_Controller flapper;
   12440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   12442:	4c10      	ldr	r4, [pc, #64]	; (12484 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
   12444:	f504 752e 	add.w	r5, r4, #696	; 0x2b8
   12448:	490f      	ldr	r1, [pc, #60]	; (12488 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
   1244a:	4628      	mov	r0, r5
   1244c:	4b0f      	ldr	r3, [pc, #60]	; (1248c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x4c>)
   1244e:	4798      	blx	r3
   12450:	4e0f      	ldr	r6, [pc, #60]	; (12490 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x50>)
   12452:	4632      	mov	r2, r6
   12454:	490f      	ldr	r1, [pc, #60]	; (12494 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x54>)
   12456:	4628      	mov	r0, r5
   12458:	4d0f      	ldr	r5, [pc, #60]	; (12498 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x58>)
   1245a:	47a8      	blx	r5
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   1245c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   12460:	4f0e      	ldr	r7, [pc, #56]	; (1249c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x5c>)
   12462:	47b8      	blx	r7
   12464:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   12468:	47b8      	blx	r7
   1246a:	4632      	mov	r2, r6
   1246c:	490c      	ldr	r1, [pc, #48]	; (124a0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x60>)
   1246e:	2000      	movs	r0, #0
   12470:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
   12472:	3404      	adds	r4, #4
   12474:	4620      	mov	r0, r4
   12476:	4b0b      	ldr	r3, [pc, #44]	; (124a4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x64>)
   12478:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
   1247a:	4632      	mov	r2, r6
   1247c:	490a      	ldr	r1, [pc, #40]	; (124a8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x68>)
   1247e:	4620      	mov	r0, r4
   12480:	47a8      	blx	r5
   12482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12484:	2000519c 	.word	0x2000519c
   12488:	2000e088 	.word	0x2000e088
   1248c:	0000fcb5 	.word	0x0000fcb5
   12490:	20000000 	.word	0x20000000
   12494:	0000fcd1 	.word	0x0000fcd1
   12498:	0001ab61 	.word	0x0001ab61
   1249c:	000127e5 	.word	0x000127e5
   124a0:	0001236d 	.word	0x0001236d
   124a4:	000127e5 	.word	0x000127e5
   124a8:	000122fd 	.word	0x000122fd

000124ac <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   124ac:	b480      	push	{r7}
   124ae:	b083      	sub	sp, #12
   124b0:	af00      	add	r7, sp, #0
   124b2:	6078      	str	r0, [r7, #4]
   124b4:	460b      	mov	r3, r1
   124b6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   124b8:	78fb      	ldrb	r3, [r7, #3]
   124ba:	687a      	ldr	r2, [r7, #4]
   124bc:	01db      	lsls	r3, r3, #7
   124be:	4413      	add	r3, r2
   124c0:	681b      	ldr	r3, [r3, #0]
}
   124c2:	4618      	mov	r0, r3
   124c4:	370c      	adds	r7, #12
   124c6:	46bd      	mov	sp, r7
   124c8:	bc80      	pop	{r7}
   124ca:	4770      	bx	lr

000124cc <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   124cc:	b480      	push	{r7}
   124ce:	b085      	sub	sp, #20
   124d0:	af00      	add	r7, sp, #0
   124d2:	60f8      	str	r0, [r7, #12]
   124d4:	460b      	mov	r3, r1
   124d6:	607a      	str	r2, [r7, #4]
   124d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   124da:	7afb      	ldrb	r3, [r7, #11]
   124dc:	68fa      	ldr	r2, [r7, #12]
   124de:	01db      	lsls	r3, r3, #7
   124e0:	4413      	add	r3, r2
   124e2:	3318      	adds	r3, #24
   124e4:	687a      	ldr	r2, [r7, #4]
   124e6:	601a      	str	r2, [r3, #0]
}
   124e8:	bf00      	nop
   124ea:	3714      	adds	r7, #20
   124ec:	46bd      	mov	sp, r7
   124ee:	bc80      	pop	{r7}
   124f0:	4770      	bx	lr

000124f2 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   124f2:	b480      	push	{r7}
   124f4:	b083      	sub	sp, #12
   124f6:	af00      	add	r7, sp, #0
   124f8:	6078      	str	r0, [r7, #4]
   124fa:	460b      	mov	r3, r1
   124fc:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   124fe:	78fb      	ldrb	r3, [r7, #3]
   12500:	687a      	ldr	r2, [r7, #4]
   12502:	01db      	lsls	r3, r3, #7
   12504:	4413      	add	r3, r2
   12506:	3310      	adds	r3, #16
   12508:	681b      	ldr	r3, [r3, #0]
}
   1250a:	4618      	mov	r0, r3
   1250c:	370c      	adds	r7, #12
   1250e:	46bd      	mov	sp, r7
   12510:	bc80      	pop	{r7}
   12512:	4770      	bx	lr

00012514 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12514:	b480      	push	{r7}
   12516:	b085      	sub	sp, #20
   12518:	af00      	add	r7, sp, #0
   1251a:	60f8      	str	r0, [r7, #12]
   1251c:	460b      	mov	r3, r1
   1251e:	607a      	str	r2, [r7, #4]
   12520:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12522:	7afb      	ldrb	r3, [r7, #11]
   12524:	68fa      	ldr	r2, [r7, #12]
   12526:	01db      	lsls	r3, r3, #7
   12528:	4413      	add	r3, r2
   1252a:	3314      	adds	r3, #20
   1252c:	687a      	ldr	r2, [r7, #4]
   1252e:	601a      	str	r2, [r3, #0]
}
   12530:	bf00      	nop
   12532:	3714      	adds	r7, #20
   12534:	46bd      	mov	sp, r7
   12536:	bc80      	pop	{r7}
   12538:	4770      	bx	lr

0001253a <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   1253a:	b480      	push	{r7}
   1253c:	b085      	sub	sp, #20
   1253e:	af00      	add	r7, sp, #0
   12540:	60f8      	str	r0, [r7, #12]
   12542:	460b      	mov	r3, r1
   12544:	607a      	str	r2, [r7, #4]
   12546:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   12548:	7afb      	ldrb	r3, [r7, #11]
   1254a:	68fa      	ldr	r2, [r7, #12]
   1254c:	01db      	lsls	r3, r3, #7
   1254e:	4413      	add	r3, r2
   12550:	331c      	adds	r3, #28
   12552:	687a      	ldr	r2, [r7, #4]
   12554:	601a      	str	r2, [r3, #0]
}
   12556:	bf00      	nop
   12558:	3714      	adds	r7, #20
   1255a:	46bd      	mov	sp, r7
   1255c:	bc80      	pop	{r7}
   1255e:	4770      	bx	lr

00012560 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   12560:	b480      	push	{r7}
   12562:	b083      	sub	sp, #12
   12564:	af00      	add	r7, sp, #0
   12566:	6078      	str	r0, [r7, #4]
   12568:	460b      	mov	r3, r1
   1256a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   1256c:	78fb      	ldrb	r3, [r7, #3]
   1256e:	687a      	ldr	r2, [r7, #4]
   12570:	01db      	lsls	r3, r3, #7
   12572:	4413      	add	r3, r2
   12574:	3320      	adds	r3, #32
   12576:	681b      	ldr	r3, [r3, #0]
}
   12578:	4618      	mov	r0, r3
   1257a:	370c      	adds	r7, #12
   1257c:	46bd      	mov	sp, r7
   1257e:	bc80      	pop	{r7}
   12580:	4770      	bx	lr
	...

00012584 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   12584:	b580      	push	{r7, lr}
   12586:	b082      	sub	sp, #8
   12588:	af00      	add	r7, sp, #0
   1258a:	4603      	mov	r3, r0
   1258c:	6039      	str	r1, [r7, #0]
   1258e:	71fb      	strb	r3, [r7, #7]
   12590:	4613      	mov	r3, r2
   12592:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12594:	79bb      	ldrb	r3, [r7, #6]
   12596:	2b00      	cmp	r3, #0
   12598:	d006      	beq.n	125a8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1259a:	79fb      	ldrb	r3, [r7, #7]
   1259c:	683a      	ldr	r2, [r7, #0]
   1259e:	4619      	mov	r1, r3
   125a0:	4806      	ldr	r0, [pc, #24]	; (125bc <_gpio_set_level+0x38>)
   125a2:	4b07      	ldr	r3, [pc, #28]	; (125c0 <_gpio_set_level+0x3c>)
   125a4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   125a6:	e005      	b.n	125b4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   125a8:	79fb      	ldrb	r3, [r7, #7]
   125aa:	683a      	ldr	r2, [r7, #0]
   125ac:	4619      	mov	r1, r3
   125ae:	4803      	ldr	r0, [pc, #12]	; (125bc <_gpio_set_level+0x38>)
   125b0:	4b04      	ldr	r3, [pc, #16]	; (125c4 <_gpio_set_level+0x40>)
   125b2:	4798      	blx	r3
}
   125b4:	bf00      	nop
   125b6:	3708      	adds	r7, #8
   125b8:	46bd      	mov	sp, r7
   125ba:	bd80      	pop	{r7, pc}
   125bc:	41008000 	.word	0x41008000
   125c0:	000124cd 	.word	0x000124cd
   125c4:	00012515 	.word	0x00012515

000125c8 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   125c8:	b580      	push	{r7, lr}
   125ca:	b082      	sub	sp, #8
   125cc:	af00      	add	r7, sp, #0
   125ce:	4603      	mov	r3, r0
   125d0:	6039      	str	r1, [r7, #0]
   125d2:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   125d4:	79fb      	ldrb	r3, [r7, #7]
   125d6:	683a      	ldr	r2, [r7, #0]
   125d8:	4619      	mov	r1, r3
   125da:	4803      	ldr	r0, [pc, #12]	; (125e8 <_gpio_toggle_level+0x20>)
   125dc:	4b03      	ldr	r3, [pc, #12]	; (125ec <_gpio_toggle_level+0x24>)
   125de:	4798      	blx	r3
}
   125e0:	bf00      	nop
   125e2:	3708      	adds	r7, #8
   125e4:	46bd      	mov	sp, r7
   125e6:	bd80      	pop	{r7, pc}
   125e8:	41008000 	.word	0x41008000
   125ec:	0001253b 	.word	0x0001253b

000125f0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   125f0:	b580      	push	{r7, lr}
   125f2:	b086      	sub	sp, #24
   125f4:	af00      	add	r7, sp, #0
   125f6:	4603      	mov	r3, r0
   125f8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   125fa:	f107 030c 	add.w	r3, r7, #12
   125fe:	4618      	mov	r0, r3
   12600:	4b13      	ldr	r3, [pc, #76]	; (12650 <_gpio_get_level+0x60>)
   12602:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   12604:	79fb      	ldrb	r3, [r7, #7]
   12606:	4619      	mov	r1, r3
   12608:	4812      	ldr	r0, [pc, #72]	; (12654 <_gpio_get_level+0x64>)
   1260a:	4b13      	ldr	r3, [pc, #76]	; (12658 <_gpio_get_level+0x68>)
   1260c:	4798      	blx	r3
   1260e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   12610:	79fb      	ldrb	r3, [r7, #7]
   12612:	4619      	mov	r1, r3
   12614:	480f      	ldr	r0, [pc, #60]	; (12654 <_gpio_get_level+0x64>)
   12616:	4b11      	ldr	r3, [pc, #68]	; (1265c <_gpio_get_level+0x6c>)
   12618:	4798      	blx	r3
   1261a:	4602      	mov	r2, r0
   1261c:	697b      	ldr	r3, [r7, #20]
   1261e:	43db      	mvns	r3, r3
   12620:	4013      	ands	r3, r2
   12622:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   12624:	79fb      	ldrb	r3, [r7, #7]
   12626:	4619      	mov	r1, r3
   12628:	480a      	ldr	r0, [pc, #40]	; (12654 <_gpio_get_level+0x64>)
   1262a:	4b0d      	ldr	r3, [pc, #52]	; (12660 <_gpio_get_level+0x70>)
   1262c:	4798      	blx	r3
   1262e:	4602      	mov	r2, r0
   12630:	697b      	ldr	r3, [r7, #20]
   12632:	4013      	ands	r3, r2
   12634:	693a      	ldr	r2, [r7, #16]
   12636:	4313      	orrs	r3, r2
   12638:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   1263a:	f107 030c 	add.w	r3, r7, #12
   1263e:	4618      	mov	r0, r3
   12640:	4b08      	ldr	r3, [pc, #32]	; (12664 <_gpio_get_level+0x74>)
   12642:	4798      	blx	r3

	return tmp;
   12644:	693b      	ldr	r3, [r7, #16]
}
   12646:	4618      	mov	r0, r3
   12648:	3718      	adds	r7, #24
   1264a:	46bd      	mov	sp, r7
   1264c:	bd80      	pop	{r7, pc}
   1264e:	bf00      	nop
   12650:	0000d16d 	.word	0x0000d16d
   12654:	41008000 	.word	0x41008000
   12658:	000124ad 	.word	0x000124ad
   1265c:	00012561 	.word	0x00012561
   12660:	000124f3 	.word	0x000124f3
   12664:	0000d193 	.word	0x0000d193

00012668 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   12668:	b580      	push	{r7, lr}
   1266a:	b082      	sub	sp, #8
   1266c:	af00      	add	r7, sp, #0
   1266e:	4603      	mov	r3, r0
   12670:	460a      	mov	r2, r1
   12672:	71fb      	strb	r3, [r7, #7]
   12674:	4613      	mov	r3, r2
   12676:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12678:	79fb      	ldrb	r3, [r7, #7]
   1267a:	115b      	asrs	r3, r3, #5
   1267c:	b2d8      	uxtb	r0, r3
   1267e:	79fb      	ldrb	r3, [r7, #7]
   12680:	f003 031f 	and.w	r3, r3, #31
   12684:	2201      	movs	r2, #1
   12686:	fa02 f303 	lsl.w	r3, r2, r3
   1268a:	79ba      	ldrb	r2, [r7, #6]
   1268c:	4619      	mov	r1, r3
   1268e:	4b03      	ldr	r3, [pc, #12]	; (1269c <gpio_set_pin_level+0x34>)
   12690:	4798      	blx	r3
}
   12692:	bf00      	nop
   12694:	3708      	adds	r7, #8
   12696:	46bd      	mov	sp, r7
   12698:	bd80      	pop	{r7, pc}
   1269a:	bf00      	nop
   1269c:	00012585 	.word	0x00012585

000126a0 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   126a0:	b580      	push	{r7, lr}
   126a2:	b082      	sub	sp, #8
   126a4:	af00      	add	r7, sp, #0
   126a6:	4603      	mov	r3, r0
   126a8:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   126aa:	79fb      	ldrb	r3, [r7, #7]
   126ac:	115b      	asrs	r3, r3, #5
   126ae:	b2d8      	uxtb	r0, r3
   126b0:	79fb      	ldrb	r3, [r7, #7]
   126b2:	f003 031f 	and.w	r3, r3, #31
   126b6:	2201      	movs	r2, #1
   126b8:	fa02 f303 	lsl.w	r3, r2, r3
   126bc:	4619      	mov	r1, r3
   126be:	4b03      	ldr	r3, [pc, #12]	; (126cc <gpio_toggle_pin_level+0x2c>)
   126c0:	4798      	blx	r3
}
   126c2:	bf00      	nop
   126c4:	3708      	adds	r7, #8
   126c6:	46bd      	mov	sp, r7
   126c8:	bd80      	pop	{r7, pc}
   126ca:	bf00      	nop
   126cc:	000125c9 	.word	0x000125c9

000126d0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   126d0:	b580      	push	{r7, lr}
   126d2:	b082      	sub	sp, #8
   126d4:	af00      	add	r7, sp, #0
   126d6:	4603      	mov	r3, r0
   126d8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   126da:	79fb      	ldrb	r3, [r7, #7]
   126dc:	115b      	asrs	r3, r3, #5
   126de:	b2db      	uxtb	r3, r3
   126e0:	4618      	mov	r0, r3
   126e2:	4b09      	ldr	r3, [pc, #36]	; (12708 <gpio_get_pin_level+0x38>)
   126e4:	4798      	blx	r3
   126e6:	4601      	mov	r1, r0
   126e8:	79fb      	ldrb	r3, [r7, #7]
   126ea:	f003 031f 	and.w	r3, r3, #31
   126ee:	2201      	movs	r2, #1
   126f0:	fa02 f303 	lsl.w	r3, r2, r3
   126f4:	400b      	ands	r3, r1
   126f6:	2b00      	cmp	r3, #0
   126f8:	bf14      	ite	ne
   126fa:	2301      	movne	r3, #1
   126fc:	2300      	moveq	r3, #0
   126fe:	b2db      	uxtb	r3, r3
}
   12700:	4618      	mov	r0, r3
   12702:	3708      	adds	r7, #8
   12704:	46bd      	mov	sp, r7
   12706:	bd80      	pop	{r7, pc}
   12708:	000125f1 	.word	0x000125f1

0001270c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
   1270c:	b480      	push	{r7}
   1270e:	b083      	sub	sp, #12
   12710:	af00      	add	r7, sp, #0
   12712:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
   12714:	4b07      	ldr	r3, [pc, #28]	; (12734 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   12716:	681b      	ldr	r3, [r3, #0]
   12718:	2201      	movs	r2, #1
   1271a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
   1271e:	4b05      	ldr	r3, [pc, #20]	; (12734 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   12720:	681b      	ldr	r3, [r3, #0]
   12722:	2201      	movs	r2, #1
   12724:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	
}
   12728:	bf00      	nop
   1272a:	370c      	adds	r7, #12
   1272c:	46bd      	mov	sp, r7
   1272e:	bc80      	pop	{r7}
   12730:	4770      	bx	lr
   12732:	bf00      	nop
   12734:	20005594 	.word	0x20005594

00012738 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
   12738:	b480      	push	{r7}
   1273a:	b083      	sub	sp, #12
   1273c:	af00      	add	r7, sp, #0
   1273e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
   12740:	4b07      	ldr	r3, [pc, #28]	; (12760 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   12742:	685b      	ldr	r3, [r3, #4]
   12744:	2201      	movs	r2, #1
   12746:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
   1274a:	4b05      	ldr	r3, [pc, #20]	; (12760 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   1274c:	685b      	ldr	r3, [r3, #4]
   1274e:	2201      	movs	r2, #1
   12750:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	
}
   12754:	bf00      	nop
   12756:	370c      	adds	r7, #12
   12758:	46bd      	mov	sp, r7
   1275a:	bc80      	pop	{r7}
   1275c:	4770      	bx	lr
   1275e:	bf00      	nop
   12760:	20005594 	.word	0x20005594

00012764 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
   12764:	b480      	push	{r7}
   12766:	b083      	sub	sp, #12
   12768:	af00      	add	r7, sp, #0
   1276a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
   1276c:	4b04      	ldr	r3, [pc, #16]	; (12780 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
   1276e:	681b      	ldr	r3, [r3, #0]
   12770:	2201      	movs	r2, #1
   12772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	
}
   12776:	bf00      	nop
   12778:	370c      	adds	r7, #12
   1277a:	46bd      	mov	sp, r7
   1277c:	bc80      	pop	{r7}
   1277e:	4770      	bx	lr
   12780:	20005594 	.word	0x20005594

00012784 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
   12784:	b480      	push	{r7}
   12786:	b083      	sub	sp, #12
   12788:	af00      	add	r7, sp, #0
   1278a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
   1278c:	4b04      	ldr	r3, [pc, #16]	; (127a0 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
   1278e:	685b      	ldr	r3, [r3, #4]
   12790:	2201      	movs	r2, #1
   12792:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	
}
   12796:	bf00      	nop
   12798:	370c      	adds	r7, #12
   1279a:	46bd      	mov	sp, r7
   1279c:	bc80      	pop	{r7}
   1279e:	4770      	bx	lr
   127a0:	20005594 	.word	0x20005594

000127a4 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
   127a4:	b480      	push	{r7}
   127a6:	b083      	sub	sp, #12
   127a8:	af00      	add	r7, sp, #0
   127aa:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
   127ac:	4b04      	ldr	r3, [pc, #16]	; (127c0 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
   127ae:	681b      	ldr	r3, [r3, #0]
   127b0:	2201      	movs	r2, #1
   127b2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
}
   127b6:	bf00      	nop
   127b8:	370c      	adds	r7, #12
   127ba:	46bd      	mov	sp, r7
   127bc:	bc80      	pop	{r7}
   127be:	4770      	bx	lr
   127c0:	20005594 	.word	0x20005594

000127c4 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
   127c4:	b480      	push	{r7}
   127c6:	b083      	sub	sp, #12
   127c8:	af00      	add	r7, sp, #0
   127ca:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
   127cc:	4b04      	ldr	r3, [pc, #16]	; (127e0 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
   127ce:	685b      	ldr	r3, [r3, #4]
   127d0:	2201      	movs	r2, #1
   127d2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
}
   127d6:	bf00      	nop
   127d8:	370c      	adds	r7, #12
   127da:	46bd      	mov	sp, r7
   127dc:	bc80      	pop	{r7}
   127de:	4770      	bx	lr
   127e0:	20005594 	.word	0x20005594

000127e4 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
   127e4:	b580      	push	{r7, lr}
   127e6:	b082      	sub	sp, #8
   127e8:	af00      	add	r7, sp, #0
   127ea:	6078      	str	r0, [r7, #4]
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	4618      	mov	r0, r3
   127f0:	4b1f      	ldr	r3, [pc, #124]	; (12870 <_ZN22FlapperValveControllerC1Ev+0x8c>)
   127f2:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
   127f4:	687b      	ldr	r3, [r7, #4]
   127f6:	4a1f      	ldr	r2, [pc, #124]	; (12874 <_ZN22FlapperValveControllerC1Ev+0x90>)
   127f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
   127fc:	687b      	ldr	r3, [r7, #4]
   127fe:	2200      	movs	r2, #0
   12800:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	isControlling=false;
   12804:	687b      	ldr	r3, [r7, #4]
   12806:	2200      	movs	r2, #0
   12808:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	gotSetpoint=false;
   1280c:	687b      	ldr	r3, [r7, #4]
   1280e:	2200      	movs	r2, #0
   12810:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	controllerEnabled=false;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	2200      	movs	r2, #0
   12818:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	closing=false;
   1281c:	687b      	ldr	r3, [r7, #4]
   1281e:	2200      	movs	r2, #0
   12820:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
   12824:	687b      	ldr	r3, [r7, #4]
   12826:	22da      	movs	r2, #218	; 0xda
   12828:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	NBC_Mode=false;
   1282c:	687b      	ldr	r3, [r7, #4]
   1282e:	2200      	movs	r2, #0
   12830:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	NBC_Activated=false;
   12834:	687b      	ldr	r3, [r7, #4]
   12836:	2200      	movs	r2, #0
   12838:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	standAloneActivated=false;
   1283c:	687b      	ldr	r3, [r7, #4]
   1283e:	2200      	movs	r2, #0
   12840:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	standAloneMode=false;
   12844:	687b      	ldr	r3, [r7, #4]
   12846:	2200      	movs	r2, #0
   12848:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	resetTimeout=false;
   1284c:	687b      	ldr	r3, [r7, #4]
   1284e:	2200      	movs	r2, #0
   12850:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	standAloneReturning=false;
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	2200      	movs	r2, #0
   12858:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	partner=NULL;
   1285c:	687b      	ldr	r3, [r7, #4]
   1285e:	2200      	movs	r2, #0
   12860:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	
	
} //FlapperValveController
   12864:	687b      	ldr	r3, [r7, #4]
   12866:	4618      	mov	r0, r3
   12868:	3708      	adds	r7, #8
   1286a:	46bd      	mov	sp, r7
   1286c:	bd80      	pop	{r7, pc}
   1286e:	bf00      	nop
   12870:	00013d5d 	.word	0x00013d5d
   12874:	2000559c 	.word	0x2000559c

00012878 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   12878:	b580      	push	{r7, lr}
   1287a:	b082      	sub	sp, #8
   1287c:	af00      	add	r7, sp, #0
   1287e:	6078      	str	r0, [r7, #4]
   12880:	687b      	ldr	r3, [r7, #4]
   12882:	4618      	mov	r0, r3
   12884:	4b03      	ldr	r3, [pc, #12]	; (12894 <_ZN22FlapperValveControllerD1Ev+0x1c>)
   12886:	4798      	blx	r3
{
} //~FlapperValveController
   12888:	687b      	ldr	r3, [r7, #4]
   1288a:	4618      	mov	r0, r3
   1288c:	3708      	adds	r7, #8
   1288e:	46bd      	mov	sp, r7
   12890:	bd80      	pop	{r7, pc}
   12892:	bf00      	nop
   12894:	00013da9 	.word	0x00013da9

00012898 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
   12898:	b590      	push	{r4, r7, lr}
   1289a:	b083      	sub	sp, #12
   1289c:	af00      	add	r7, sp, #0
   1289e:	6078      	str	r0, [r7, #4]
   128a0:	460b      	mov	r3, r1
   128a2:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
   128a4:	78fb      	ldrb	r3, [r7, #3]
   128a6:	4920      	ldr	r1, [pc, #128]	; (12928 <_ZN22FlapperValveController14InitControllerEh+0x90>)
   128a8:	687a      	ldr	r2, [r7, #4]
   128aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
   128ae:	687b      	ldr	r3, [r7, #4]
   128b0:	78fa      	ldrb	r2, [r7, #3]
   128b2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
		singlefv=&fvStatic[valve_id];
   128b6:	78fa      	ldrb	r2, [r7, #3]
   128b8:	4613      	mov	r3, r2
   128ba:	015b      	lsls	r3, r3, #5
   128bc:	1a9b      	subs	r3, r3, r2
   128be:	009b      	lsls	r3, r3, #2
   128c0:	4a1a      	ldr	r2, [pc, #104]	; (1292c <_ZN22FlapperValveController14InitControllerEh+0x94>)
   128c2:	441a      	add	r2, r3
   128c4:	687b      	ldr	r3, [r7, #4]
   128c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		positions[valve_id]=position_array_static[valve_id];
   128ca:	78fa      	ldrb	r2, [r7, #3]
   128cc:	78fb      	ldrb	r3, [r7, #3]
   128ce:	00db      	lsls	r3, r3, #3
   128d0:	4917      	ldr	r1, [pc, #92]	; (12930 <_ZN22FlapperValveController14InitControllerEh+0x98>)
   128d2:	4419      	add	r1, r3
   128d4:	687b      	ldr	r3, [r7, #4]
   128d6:	3234      	adds	r2, #52	; 0x34
   128d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (singlefv->Init(valve_id))
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   128e2:	78fa      	ldrb	r2, [r7, #3]
   128e4:	4611      	mov	r1, r2
   128e6:	4618      	mov	r0, r3
   128e8:	4b12      	ldr	r3, [pc, #72]	; (12934 <_ZN22FlapperValveController14InitControllerEh+0x9c>)
   128ea:	4798      	blx	r3
   128ec:	4603      	mov	r3, r0
   128ee:	2b00      	cmp	r3, #0
   128f0:	d012      	beq.n	12918 <_ZN22FlapperValveController14InitControllerEh+0x80>
		{
			isOK=Selftest();
   128f2:	6878      	ldr	r0, [r7, #4]
   128f4:	4b10      	ldr	r3, [pc, #64]	; (12938 <_ZN22FlapperValveController14InitControllerEh+0xa0>)
   128f6:	4798      	blx	r3
   128f8:	4603      	mov	r3, r0
   128fa:	461a      	mov	r2, r3
   128fc:	687b      	ldr	r3, [r7, #4]
   128fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			logger.SaveEventIndexResult("Flapper Valve ",valve_id+1,isOK);
   12902:	78fb      	ldrb	r3, [r7, #3]
   12904:	3301      	adds	r3, #1
   12906:	b2da      	uxtb	r2, r3
   12908:	687b      	ldr	r3, [r7, #4]
   1290a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   1290e:	b2db      	uxtb	r3, r3
   12910:	490a      	ldr	r1, [pc, #40]	; (1293c <_ZN22FlapperValveController14InitControllerEh+0xa4>)
   12912:	480b      	ldr	r0, [pc, #44]	; (12940 <_ZN22FlapperValveController14InitControllerEh+0xa8>)
   12914:	4c0b      	ldr	r4, [pc, #44]	; (12944 <_ZN22FlapperValveController14InitControllerEh+0xac>)
   12916:	47a0      	blx	r4
		}
		return	isOK;
   12918:	687b      	ldr	r3, [r7, #4]
   1291a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   1291e:	b2db      	uxtb	r3, r3
}
   12920:	4618      	mov	r0, r3
   12922:	370c      	adds	r7, #12
   12924:	46bd      	mov	sp, r7
   12926:	bd90      	pop	{r4, r7, pc}
   12928:	20005594 	.word	0x20005594
   1292c:	2000559c 	.word	0x2000559c
   12930:	20005584 	.word	0x20005584
   12934:	00013ea1 	.word	0x00013ea1
   12938:	000138e9 	.word	0x000138e9
   1293c:	0001bbe8 	.word	0x0001bbe8
   12940:	20003a78 	.word	0x20003a78
   12944:	00012025 	.word	0x00012025

00012948 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   12948:	b480      	push	{r7}
   1294a:	b083      	sub	sp, #12
   1294c:	af00      	add	r7, sp, #0
   1294e:	6078      	str	r0, [r7, #4]
   12950:	460b      	mov	r3, r1
   12952:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   12954:	687b      	ldr	r3, [r7, #4]
   12956:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	direction=currentPosition>sp;
   12960:	687b      	ldr	r3, [r7, #4]
   12962:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12966:	461a      	mov	r2, r3
   12968:	78fb      	ldrb	r3, [r7, #3]
   1296a:	429a      	cmp	r2, r3
   1296c:	bfcc      	ite	gt
   1296e:	2301      	movgt	r3, #1
   12970:	2300      	movle	r3, #0
   12972:	b2da      	uxtb	r2, r3
   12974:	687b      	ldr	r3, [r7, #4]
   12976:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	return direction;
   1297a:	687b      	ldr	r3, [r7, #4]
   1297c:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
   12980:	4618      	mov	r0, r3
   12982:	370c      	adds	r7, #12
   12984:	46bd      	mov	sp, r7
   12986:	bc80      	pop	{r7}
   12988:	4770      	bx	lr
	...

0001298c <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   1298c:	b580      	push	{r7, lr}
   1298e:	b082      	sub	sp, #8
   12990:	af00      	add	r7, sp, #0
   12992:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   1299a:	4619      	mov	r1, r3
   1299c:	6878      	ldr	r0, [r7, #4]
   1299e:	4b03      	ldr	r3, [pc, #12]	; (129ac <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   129a0:	4798      	blx	r3
   129a2:	4603      	mov	r3, r0
	
}
   129a4:	4618      	mov	r0, r3
   129a6:	3708      	adds	r7, #8
   129a8:	46bd      	mov	sp, r7
   129aa:	bd80      	pop	{r7, pc}
   129ac:	00012949 	.word	0x00012949

000129b0 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   129b0:	b590      	push	{r4, r7, lr}
   129b2:	b083      	sub	sp, #12
   129b4:	af00      	add	r7, sp, #0
   129b6:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   129b8:	687b      	ldr	r3, [r7, #4]
   129ba:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
   129be:	687b      	ldr	r3, [r7, #4]
   129c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   129c4:	687b      	ldr	r3, [r7, #4]
   129c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   129ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   129ce:	2b00      	cmp	r3, #0
   129d0:	d009      	beq.n	129e6 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
   129d2:	687b      	ldr	r3, [r7, #4]
   129d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   129d8:	2100      	movs	r1, #0
   129da:	4618      	mov	r0, r3
   129dc:	4b0b      	ldr	r3, [pc, #44]	; (12a0c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   129de:	4798      	blx	r3
		delay_ms(10);
   129e0:	200a      	movs	r0, #10
   129e2:	4b0b      	ldr	r3, [pc, #44]	; (12a10 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   129e4:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
   129e6:	687b      	ldr	r3, [r7, #4]
   129e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
   129ec:	6878      	ldr	r0, [r7, #4]
   129ee:	4b09      	ldr	r3, [pc, #36]	; (12a14 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   129f0:	4798      	blx	r3
   129f2:	4603      	mov	r3, r0
   129f4:	4619      	mov	r1, r3
   129f6:	4620      	mov	r0, r4
   129f8:	4b07      	ldr	r3, [pc, #28]	; (12a18 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   129fa:	4798      	blx	r3
	StartMotor();
   129fc:	6878      	ldr	r0, [r7, #4]
   129fe:	4b07      	ldr	r3, [pc, #28]	; (12a1c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
   12a00:	4798      	blx	r3
	return 0;
   12a02:	2300      	movs	r3, #0
}
   12a04:	4618      	mov	r0, r3
   12a06:	370c      	adds	r7, #12
   12a08:	46bd      	mov	sp, r7
   12a0a:	bd90      	pop	{r4, r7, pc}
   12a0c:	00014005 	.word	0x00014005
   12a10:	000036c9 	.word	0x000036c9
   12a14:	0001298d 	.word	0x0001298d
   12a18:	00014085 	.word	0x00014085
   12a1c:	00013479 	.word	0x00013479

00012a20 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   12a20:	b580      	push	{r7, lr}
   12a22:	b082      	sub	sp, #8
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   12a28:	6878      	ldr	r0, [r7, #4]
   12a2a:	4b13      	ldr	r3, [pc, #76]	; (12a78 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   12a2c:	4798      	blx	r3
   12a2e:	4603      	mov	r3, r0
   12a30:	2b00      	cmp	r3, #0
   12a32:	d003      	beq.n	12a3c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   12a34:	6878      	ldr	r0, [r7, #4]
   12a36:	4b11      	ldr	r3, [pc, #68]	; (12a7c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   12a38:	4798      	blx	r3
   12a3a:	e013      	b.n	12a64 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   12a3c:	687b      	ldr	r3, [r7, #4]
   12a3e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
   12a42:	2b00      	cmp	r3, #0
   12a44:	d00b      	beq.n	12a5e <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   12a46:	687b      	ldr	r3, [r7, #4]
   12a48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
   12a4c:	4619      	mov	r1, r3
   12a4e:	6878      	ldr	r0, [r7, #4]
   12a50:	4b0b      	ldr	r3, [pc, #44]	; (12a80 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   12a52:	4798      	blx	r3
			NBC_Activated=false;
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	2200      	movs	r2, #0
   12a58:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
   12a5c:	e002      	b.n	12a64 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   12a5e:	6878      	ldr	r0, [r7, #4]
   12a60:	4b08      	ldr	r3, [pc, #32]	; (12a84 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   12a62:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   12a64:	687b      	ldr	r3, [r7, #4]
   12a66:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
   12a6a:	f083 0301 	eor.w	r3, r3, #1
   12a6e:	b2db      	uxtb	r3, r3
}
   12a70:	4618      	mov	r0, r3
   12a72:	3708      	adds	r7, #8
   12a74:	46bd      	mov	sp, r7
   12a76:	bd80      	pop	{r7, pc}
   12a78:	000131e1 	.word	0x000131e1
   12a7c:	00013181 	.word	0x00013181
   12a80:	0001351d 	.word	0x0001351d
   12a84:	00012dc1 	.word	0x00012dc1

00012a88 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   12a88:	b590      	push	{r4, r7, lr}
   12a8a:	b085      	sub	sp, #20
   12a8c:	af00      	add	r7, sp, #0
   12a8e:	6078      	str	r0, [r7, #4]
	bool result=false;
   12a90:	2300      	movs	r3, #0
   12a92:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   12a94:	687b      	ldr	r3, [r7, #4]
   12a96:	33cb      	adds	r3, #203	; 0xcb
   12a98:	4619      	mov	r1, r3
   12a9a:	4817      	ldr	r0, [pc, #92]	; (12af8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   12a9c:	4b17      	ldr	r3, [pc, #92]	; (12afc <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   12a9e:	4798      	blx	r3
	UpdateFlapperValveData();
   12aa0:	6878      	ldr	r0, [r7, #4]
   12aa2:	4b17      	ldr	r3, [pc, #92]	; (12b00 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   12aa4:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   12aa6:	687b      	ldr	r3, [r7, #4]
   12aa8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   12aac:	f083 0301 	eor.w	r3, r3, #1
   12ab0:	b2db      	uxtb	r3, r3
   12ab2:	461c      	mov	r4, r3
   12ab4:	6878      	ldr	r0, [r7, #4]
   12ab6:	4b13      	ldr	r3, [pc, #76]	; (12b04 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   12ab8:	4798      	blx	r3
   12aba:	4603      	mov	r3, r0
   12abc:	f083 0301 	eor.w	r3, r3, #1
   12ac0:	b2db      	uxtb	r3, r3
   12ac2:	4023      	ands	r3, r4
   12ac4:	2b00      	cmp	r3, #0
   12ac6:	bf14      	ite	ne
   12ac8:	2301      	movne	r3, #1
   12aca:	2300      	moveq	r3, #0
   12acc:	b2db      	uxtb	r3, r3
   12ace:	2b00      	cmp	r3, #0
   12ad0:	d00d      	beq.n	12aee <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   12ad2:	687b      	ldr	r3, [r7, #4]
   12ad4:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12ad8:	461a      	mov	r2, r3
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   12ae0:	429a      	cmp	r2, r3
   12ae2:	dd02      	ble.n	12aea <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   12ae4:	2301      	movs	r3, #1
   12ae6:	73fb      	strb	r3, [r7, #15]
   12ae8:	e001      	b.n	12aee <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   12aea:	2300      	movs	r3, #0
   12aec:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   12aee:	7bfb      	ldrb	r3, [r7, #15]
}
   12af0:	4618      	mov	r0, r3
   12af2:	3714      	adds	r7, #20
   12af4:	46bd      	mov	sp, r7
   12af6:	bd90      	pop	{r4, r7, pc}
   12af8:	20006b04 	.word	0x20006b04
   12afc:	00014939 	.word	0x00014939
   12b00:	0001372d 	.word	0x0001372d
   12b04:	000131e1 	.word	0x000131e1

00012b08 <_ZN22FlapperValveController9ReadGPIOSEPh>:

void FlapperValveController::ReadGPIOS(uint8_t *buffer){
   12b08:	b580      	push	{r7, lr}
   12b0a:	b082      	sub	sp, #8
   12b0c:	af00      	add	r7, sp, #0
   12b0e:	6078      	str	r0, [r7, #4]
   12b10:	6039      	str	r1, [r7, #0]
	singlefv->ReadGPIOs(buffer);
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12b18:	6839      	ldr	r1, [r7, #0]
   12b1a:	4618      	mov	r0, r3
   12b1c:	4b02      	ldr	r3, [pc, #8]	; (12b28 <_ZN22FlapperValveController9ReadGPIOSEPh+0x20>)
   12b1e:	4798      	blx	r3
}
   12b20:	bf00      	nop
   12b22:	3708      	adds	r7, #8
   12b24:	46bd      	mov	sp, r7
   12b26:	bd80      	pop	{r7, pc}
   12b28:	00014225 	.word	0x00014225

00012b2c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b082      	sub	sp, #8
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   12b34:	6878      	ldr	r0, [r7, #4]
   12b36:	4b1c      	ldr	r3, [pc, #112]	; (12ba8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
   12b38:	4798      	blx	r3
   12b3a:	4603      	mov	r3, r0
   12b3c:	461a      	mov	r2, r3
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   12b44:	b2db      	uxtb	r3, r3
   12b46:	f083 0301 	eor.w	r3, r3, #1
   12b4a:	b2db      	uxtb	r3, r3
   12b4c:	4013      	ands	r3, r2
   12b4e:	2b00      	cmp	r3, #0
   12b50:	bf14      	ite	ne
   12b52:	2301      	movne	r3, #1
   12b54:	2300      	moveq	r3, #0
   12b56:	b2db      	uxtb	r3, r3
   12b58:	2b00      	cmp	r3, #0
   12b5a:	d003      	beq.n	12b64 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   12b5c:	6878      	ldr	r0, [r7, #4]
   12b5e:	4b13      	ldr	r3, [pc, #76]	; (12bac <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
   12b60:	4798      	blx	r3
   12b62:	e019      	b.n	12b98 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
   12b64:	687b      	ldr	r3, [r7, #4]
   12b66:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   12b6a:	2b00      	cmp	r3, #0
   12b6c:	d011      	beq.n	12b92 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
   12b6e:	687b      	ldr	r3, [r7, #4]
   12b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12b74:	2100      	movs	r1, #0
   12b76:	4618      	mov	r0, r3
   12b78:	4b0d      	ldr	r3, [pc, #52]	; (12bb0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   12b7a:	4798      	blx	r3
			delay_us(10);
   12b7c:	200a      	movs	r0, #10
   12b7e:	4b0d      	ldr	r3, [pc, #52]	; (12bb4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
   12b80:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
   12b82:	687b      	ldr	r3, [r7, #4]
   12b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12b88:	2101      	movs	r1, #1
   12b8a:	4618      	mov	r0, r3
   12b8c:	4b08      	ldr	r3, [pc, #32]	; (12bb0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   12b8e:	4798      	blx	r3
   12b90:	e002      	b.n	12b98 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
   12b92:	6878      	ldr	r0, [r7, #4]
   12b94:	4b08      	ldr	r3, [pc, #32]	; (12bb8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
   12b96:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
   12b98:	687b      	ldr	r3, [r7, #4]
   12b9a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   12b9e:	b2db      	uxtb	r3, r3
}
   12ba0:	4618      	mov	r0, r3
   12ba2:	3708      	adds	r7, #8
   12ba4:	46bd      	mov	sp, r7
   12ba6:	bd80      	pop	{r7, pc}
   12ba8:	00012a89 	.word	0x00012a89
   12bac:	00012fb9 	.word	0x00012fb9
   12bb0:	000140fd 	.word	0x000140fd
   12bb4:	00003695 	.word	0x00003695
   12bb8:	00012bbd 	.word	0x00012bbd

00012bbc <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   12bbc:	b580      	push	{r7, lr}
   12bbe:	b082      	sub	sp, #8
   12bc0:	af00      	add	r7, sp, #0
   12bc2:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   12bc4:	6878      	ldr	r0, [r7, #4]
   12bc6:	4b2d      	ldr	r3, [pc, #180]	; (12c7c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc0>)
   12bc8:	4798      	blx	r3
   12bca:	4603      	mov	r3, r0
   12bcc:	2b00      	cmp	r3, #0
   12bce:	d03a      	beq.n	12c46 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x8a>
	{	

			standAloneMode=true;
   12bd0:	687b      	ldr	r3, [r7, #4]
   12bd2:	2201      	movs	r2, #1
   12bd4:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
			if (standAloneActivated)
   12bd8:	687b      	ldr	r3, [r7, #4]
   12bda:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   12bde:	2b00      	cmp	r3, #0
   12be0:	d003      	beq.n	12bea <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   12be2:	6878      	ldr	r0, [r7, #4]
   12be4:	4b26      	ldr	r3, [pc, #152]	; (12c80 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc4>)
   12be6:	4798      	blx	r3
   12be8:	e041      	b.n	12c6e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb2>
			}
			else
			{
				
				if ((currentPosition>parameters.flapperValveStandAloneMinimumPosition[valve_ID]))
   12bea:	687b      	ldr	r3, [r7, #4]
   12bec:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12bf0:	461a      	mov	r2, r3
   12bf2:	687b      	ldr	r3, [r7, #4]
   12bf4:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   12bf8:	4619      	mov	r1, r3
   12bfa:	687b      	ldr	r3, [r7, #4]
   12bfc:	440b      	add	r3, r1
   12bfe:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   12c02:	429a      	cmp	r2, r3
   12c04:	dd0f      	ble.n	12c26 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x6a>
				{
					StartControlling(parameters.flapperValveStandAloneMinimumPosition[valve_ID]);
   12c06:	687b      	ldr	r3, [r7, #4]
   12c08:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   12c0c:	461a      	mov	r2, r3
   12c0e:	687b      	ldr	r3, [r7, #4]
   12c10:	4413      	add	r3, r2
   12c12:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   12c16:	4619      	mov	r1, r3
   12c18:	6878      	ldr	r0, [r7, #4]
   12c1a:	4b1a      	ldr	r3, [pc, #104]	; (12c84 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc8>)
   12c1c:	4798      	blx	r3
					standAloneReturning=true;
   12c1e:	687b      	ldr	r3, [r7, #4]
   12c20:	2201      	movs	r2, #1
   12c22:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				}
				else
				{
					
				}
				currentMaximum=parameters.flapperValveStandAloneMinimumPosition[valve_ID];
   12c26:	687b      	ldr	r3, [r7, #4]
   12c28:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   12c2c:	461a      	mov	r2, r3
   12c2e:	687b      	ldr	r3, [r7, #4]
   12c30:	4413      	add	r3, r2
   12c32:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
				standAloneActivated=true;
   12c3c:	687b      	ldr	r3, [r7, #4]
   12c3e:	2201      	movs	r2, #1
   12c40:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
   12c44:	e013      	b.n	12c6e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb2>
		
		
	} 
	else
	{
		standAloneMode=false;
   12c46:	687b      	ldr	r3, [r7, #4]
   12c48:	2200      	movs	r2, #0
   12c4a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
		if (standAloneActivated)
   12c4e:	687b      	ldr	r3, [r7, #4]
   12c50:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   12c54:	2b00      	cmp	r3, #0
   12c56:	d007      	beq.n	12c68 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xac>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   12c58:	687b      	ldr	r3, [r7, #4]
   12c5a:	2200      	movs	r2, #0
   12c5c:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
			standAloneReturning=false;
   12c60:	687b      	ldr	r3, [r7, #4]
   12c62:	2200      	movs	r2, #0
   12c64:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   12c68:	6878      	ldr	r0, [r7, #4]
   12c6a:	4b05      	ldr	r3, [pc, #20]	; (12c80 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc4>)
   12c6c:	4798      	blx	r3
		
	}
	return standAloneMode;
   12c6e:	687b      	ldr	r3, [r7, #4]
   12c70:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
}
   12c74:	4618      	mov	r0, r3
   12c76:	3708      	adds	r7, #8
   12c78:	46bd      	mov	sp, r7
   12c7a:	bd80      	pop	{r7, pc}
   12c7c:	00012c89 	.word	0x00012c89
   12c80:	00012a21 	.word	0x00012a21
   12c84:	0001351d 	.word	0x0001351d

00012c88 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   12c88:	b480      	push	{r7}
   12c8a:	b085      	sub	sp, #20
   12c8c:	af00      	add	r7, sp, #0
   12c8e:	6078      	str	r0, [r7, #4]
	
	bool result=false;
   12c90:	2300      	movs	r3, #0
   12c92:	73fb      	strb	r3, [r7, #15]
	if (partner!=NULL)
   12c94:	687b      	ldr	r3, [r7, #4]
   12c96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   12c9a:	2b00      	cmp	r3, #0
   12c9c:	d011      	beq.n	12cc2 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3a>
	{
		if (partner->isOK)
   12c9e:	687b      	ldr	r3, [r7, #4]
   12ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   12ca4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   12ca8:	b2db      	uxtb	r3, r3
   12caa:	2b00      	cmp	r3, #0
   12cac:	d006      	beq.n	12cbc <_ZN22FlapperValveController16IsStandAloneModeEv+0x34>
		{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
   12cae:	687b      	ldr	r3, [r7, #4]
   12cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   12cb4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   12cb8:	73fb      	strb	r3, [r7, #15]
   12cba:	e004      	b.n	12cc6 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
		else
		{
			result=true;
   12cbc:	2301      	movs	r3, #1
   12cbe:	73fb      	strb	r3, [r7, #15]
   12cc0:	e001      	b.n	12cc6 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
	} 
	else
	{
		result=true;
   12cc2:	2301      	movs	r3, #1
   12cc4:	73fb      	strb	r3, [r7, #15]
	}
	


	return result;
   12cc6:	7bfb      	ldrb	r3, [r7, #15]
}
   12cc8:	4618      	mov	r0, r3
   12cca:	3714      	adds	r7, #20
   12ccc:	46bd      	mov	sp, r7
   12cce:	bc80      	pop	{r7}
   12cd0:	4770      	bx	lr

00012cd2 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
   12cd2:	b480      	push	{r7}
   12cd4:	b083      	sub	sp, #12
   12cd6:	af00      	add	r7, sp, #0
   12cd8:	6078      	str	r0, [r7, #4]
   12cda:	6039      	str	r1, [r7, #0]
	partner=part;
   12cdc:	687b      	ldr	r3, [r7, #4]
   12cde:	683a      	ldr	r2, [r7, #0]
   12ce0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
   12ce4:	bf00      	nop
   12ce6:	370c      	adds	r7, #12
   12ce8:	46bd      	mov	sp, r7
   12cea:	bc80      	pop	{r7}
   12cec:	4770      	bx	lr
	...

00012cf0 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
   12cf0:	b580      	push	{r7, lr}
   12cf2:	b082      	sub	sp, #8
   12cf4:	af00      	add	r7, sp, #0
   12cf6:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(is_motor_on)))
   12cf8:	687b      	ldr	r3, [r7, #4]
   12cfa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   12cfe:	2b05      	cmp	r3, #5
   12d00:	bfd4      	ite	le
   12d02:	2301      	movle	r3, #1
   12d04:	2300      	movgt	r3, #0
   12d06:	b2da      	uxtb	r2, r3
   12d08:	687b      	ldr	r3, [r7, #4]
   12d0a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12d0e:	2b05      	cmp	r3, #5
   12d10:	bfd4      	ite	le
   12d12:	2301      	movle	r3, #1
   12d14:	2300      	movgt	r3, #0
   12d16:	b2db      	uxtb	r3, r3
   12d18:	4013      	ands	r3, r2
   12d1a:	b2da      	uxtb	r2, r3
   12d1c:	687b      	ldr	r3, [r7, #4]
   12d1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   12d22:	2bfa      	cmp	r3, #250	; 0xfa
   12d24:	bfcc      	ite	gt
   12d26:	2301      	movgt	r3, #1
   12d28:	2300      	movle	r3, #0
   12d2a:	b2d9      	uxtb	r1, r3
   12d2c:	687b      	ldr	r3, [r7, #4]
   12d2e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12d32:	2bf5      	cmp	r3, #245	; 0xf5
   12d34:	bfcc      	ite	gt
   12d36:	2301      	movgt	r3, #1
   12d38:	2300      	movle	r3, #0
   12d3a:	b2db      	uxtb	r3, r3
   12d3c:	400b      	ands	r3, r1
   12d3e:	b2db      	uxtb	r3, r3
   12d40:	4313      	orrs	r3, r2
   12d42:	b2db      	uxtb	r3, r3
   12d44:	461a      	mov	r2, r3
   12d46:	687b      	ldr	r3, [r7, #4]
   12d48:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12d4c:	f083 0301 	eor.w	r3, r3, #1
   12d50:	b2db      	uxtb	r3, r3
   12d52:	4619      	mov	r1, r3
   12d54:	687b      	ldr	r3, [r7, #4]
   12d56:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   12d5a:	400b      	ands	r3, r1
   12d5c:	4013      	ands	r3, r2
   12d5e:	2b00      	cmp	r3, #0
   12d60:	d01f      	beq.n	12da2 <_ZN22FlapperValveController14CheckIsClosingEv+0xb2>
		{
			if (valve_ID==0)
   12d62:	687b      	ldr	r3, [r7, #4]
   12d64:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   12d68:	2b00      	cmp	r3, #0
   12d6a:	d105      	bne.n	12d78 <_ZN22FlapperValveController14CheckIsClosingEv+0x88>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12d6c:	22c8      	movs	r2, #200	; 0xc8
   12d6e:	4910      	ldr	r1, [pc, #64]	; (12db0 <_ZN22FlapperValveController14CheckIsClosingEv+0xc0>)
   12d70:	4810      	ldr	r0, [pc, #64]	; (12db4 <_ZN22FlapperValveController14CheckIsClosingEv+0xc4>)
   12d72:	4b11      	ldr	r3, [pc, #68]	; (12db8 <_ZN22FlapperValveController14CheckIsClosingEv+0xc8>)
   12d74:	4798      	blx	r3
   12d76:	e004      	b.n	12d82 <_ZN22FlapperValveController14CheckIsClosingEv+0x92>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12d78:	22c8      	movs	r2, #200	; 0xc8
   12d7a:	4910      	ldr	r1, [pc, #64]	; (12dbc <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
   12d7c:	480d      	ldr	r0, [pc, #52]	; (12db4 <_ZN22FlapperValveController14CheckIsClosingEv+0xc4>)
   12d7e:	4b0e      	ldr	r3, [pc, #56]	; (12db8 <_ZN22FlapperValveController14CheckIsClosingEv+0xc8>)
   12d80:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
   12d82:	687b      	ldr	r3, [r7, #4]
   12d84:	2200      	movs	r2, #0
   12d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			gotSetpoint=false;
   12d8a:	687b      	ldr	r3, [r7, #4]
   12d8c:	2200      	movs	r2, #0
   12d8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			closing=true;
   12d92:	687b      	ldr	r3, [r7, #4]
   12d94:	2201      	movs	r2, #1
   12d96:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			unLockTimeout=true;
   12d9a:	687b      	ldr	r3, [r7, #4]
   12d9c:	2201      	movs	r2, #1
   12d9e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		}
		return closing;
   12da2:	687b      	ldr	r3, [r7, #4]
   12da4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
	
}
   12da8:	4618      	mov	r0, r3
   12daa:	3708      	adds	r7, #8
   12dac:	46bd      	mov	sp, r7
   12dae:	bd80      	pop	{r7, pc}
   12db0:	00012765 	.word	0x00012765
   12db4:	200054c4 	.word	0x200054c4
   12db8:	000107b9 	.word	0x000107b9
   12dbc:	00012785 	.word	0x00012785

00012dc0 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   12dc0:	b590      	push	{r4, r7, lr}
   12dc2:	b083      	sub	sp, #12
   12dc4:	af00      	add	r7, sp, #0
   12dc6:	6078      	str	r0, [r7, #4]
	if (isControlling)
   12dc8:	687b      	ldr	r3, [r7, #4]
   12dca:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
   12dce:	2b00      	cmp	r3, #0
   12dd0:	f000 80dc 	beq.w	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   12dd4:	687b      	ldr	r3, [r7, #4]
   12dd6:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
   12dda:	687b      	ldr	r3, [r7, #4]
   12ddc:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
   12de0:	4313      	orrs	r3, r2
   12de2:	b2db      	uxtb	r3, r3
   12de4:	461a      	mov	r2, r3
   12de6:	687b      	ldr	r3, [r7, #4]
   12de8:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12dec:	4013      	ands	r3, r2
   12dee:	687a      	ldr	r2, [r7, #4]
   12df0:	f892 209f 	ldrb.w	r2, [r2, #159]	; 0x9f
   12df4:	b2d2      	uxtb	r2, r2
   12df6:	4013      	ands	r3, r2
   12df8:	2b00      	cmp	r3, #0
   12dfa:	bf14      	ite	ne
   12dfc:	2301      	movne	r3, #1
   12dfe:	2300      	moveq	r3, #0
   12e00:	b2db      	uxtb	r3, r3
   12e02:	2b00      	cmp	r3, #0
   12e04:	d003      	beq.n	12e0e <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   12e06:	6878      	ldr	r0, [r7, #4]
   12e08:	4b63      	ldr	r3, [pc, #396]	; (12f98 <_ZN22FlapperValveController15ControlMovementEv+0x1d8>)
   12e0a:	4798      	blx	r3
   12e0c:	e0be      	b.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>

		} 
		else
		{
			
			CheckIsClosing();
   12e0e:	6878      	ldr	r0, [r7, #4]
   12e10:	4b62      	ldr	r3, [pc, #392]	; (12f9c <_ZN22FlapperValveController15ControlMovementEv+0x1dc>)
   12e12:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   12e14:	687b      	ldr	r3, [r7, #4]
   12e16:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12e1a:	461a      	mov	r2, r3
   12e1c:	687b      	ldr	r3, [r7, #4]
   12e1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   12e22:	1ad3      	subs	r3, r2, r3
   12e24:	2b00      	cmp	r3, #0
   12e26:	bfb8      	it	lt
   12e28:	425b      	neglt	r3, r3
   12e2a:	687a      	ldr	r2, [r7, #4]
   12e2c:	f892 20a6 	ldrb.w	r2, [r2, #166]	; 0xa6
   12e30:	4293      	cmp	r3, r2
   12e32:	bfcc      	ite	gt
   12e34:	2301      	movgt	r3, #1
   12e36:	2300      	movle	r3, #0
   12e38:	b2db      	uxtb	r3, r3
   12e3a:	461a      	mov	r2, r3
   12e3c:	687b      	ldr	r3, [r7, #4]
   12e3e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12e42:	4313      	orrs	r3, r2
   12e44:	2b00      	cmp	r3, #0
   12e46:	f000 8084 	beq.w	12f52 <_ZN22FlapperValveController15ControlMovementEv+0x192>
			{
				if (IsFlapperMoving())
   12e4a:	6878      	ldr	r0, [r7, #4]
   12e4c:	4b54      	ldr	r3, [pc, #336]	; (12fa0 <_ZN22FlapperValveController15ControlMovementEv+0x1e0>)
   12e4e:	4798      	blx	r3
   12e50:	4603      	mov	r3, r0
   12e52:	2b00      	cmp	r3, #0
   12e54:	d04a      	beq.n	12eec <_ZN22FlapperValveController15ControlMovementEv+0x12c>
				{
					if (closing)
   12e56:	687b      	ldr	r3, [r7, #4]
   12e58:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12e5c:	2b00      	cmp	r3, #0
   12e5e:	d00e      	beq.n	12e7e <_ZN22FlapperValveController15ControlMovementEv+0xbe>
					{
						if (keepControlling)
   12e60:	687b      	ldr	r3, [r7, #4]
   12e62:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
   12e66:	2b00      	cmp	r3, #0
   12e68:	d054      	beq.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
						{
							if (fullClosedTimeout)
   12e6a:	687b      	ldr	r3, [r7, #4]
   12e6c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   12e70:	b2db      	uxtb	r3, r3
   12e72:	2b00      	cmp	r3, #0
   12e74:	d04e      	beq.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
							{
								StopValveAtLimit();
   12e76:	6878      	ldr	r0, [r7, #4]
   12e78:	4b47      	ldr	r3, [pc, #284]	; (12f98 <_ZN22FlapperValveController15ControlMovementEv+0x1d8>)
   12e7a:	4798      	blx	r3
   12e7c:	e04a      	b.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   12e7e:	687b      	ldr	r3, [r7, #4]
   12e80:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   12e84:	6878      	ldr	r0, [r7, #4]
   12e86:	4b47      	ldr	r3, [pc, #284]	; (12fa4 <_ZN22FlapperValveController15ControlMovementEv+0x1e4>)
   12e88:	4798      	blx	r3
   12e8a:	4603      	mov	r3, r0
   12e8c:	429c      	cmp	r4, r3
   12e8e:	bf14      	ite	ne
   12e90:	2301      	movne	r3, #1
   12e92:	2300      	moveq	r3, #0
   12e94:	b2db      	uxtb	r3, r3
   12e96:	2b00      	cmp	r3, #0
   12e98:	d00a      	beq.n	12eb0 <_ZN22FlapperValveController15ControlMovementEv+0xf0>
						{
							StopMotor();
   12e9a:	6878      	ldr	r0, [r7, #4]
   12e9c:	4b42      	ldr	r3, [pc, #264]	; (12fa8 <_ZN22FlapperValveController15ControlMovementEv+0x1e8>)
   12e9e:	4798      	blx	r3
							RemoveTimeoutTask();
   12ea0:	6878      	ldr	r0, [r7, #4]
   12ea2:	4b42      	ldr	r3, [pc, #264]	; (12fac <_ZN22FlapperValveController15ControlMovementEv+0x1ec>)
   12ea4:	4798      	blx	r3
							keepControlling=true;
   12ea6:	687b      	ldr	r3, [r7, #4]
   12ea8:	2201      	movs	r2, #1
   12eaa:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
   12eae:	e031      	b.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
						}
						else
						{
							if (timeoutFlapperValveController)
   12eb0:	687b      	ldr	r3, [r7, #4]
   12eb2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	2b00      	cmp	r3, #0
   12eba:	d003      	beq.n	12ec4 <_ZN22FlapperValveController15ControlMovementEv+0x104>
							{
								StopMotor();
   12ebc:	6878      	ldr	r0, [r7, #4]
   12ebe:	4b3a      	ldr	r3, [pc, #232]	; (12fa8 <_ZN22FlapperValveController15ControlMovementEv+0x1e8>)
   12ec0:	4798      	blx	r3
   12ec2:	e027      	b.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
								
							}
							else
							{
								if (keepControlling)
   12ec4:	687b      	ldr	r3, [r7, #4]
   12ec6:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d022      	beq.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
								{
									if (timeoutKeepControlling)
   12ece:	687b      	ldr	r3, [r7, #4]
   12ed0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
   12ed4:	b2db      	uxtb	r3, r3
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	d003      	beq.n	12ee2 <_ZN22FlapperValveController15ControlMovementEv+0x122>
									{
										StopMotor();
   12eda:	6878      	ldr	r0, [r7, #4]
   12edc:	4b32      	ldr	r3, [pc, #200]	; (12fa8 <_ZN22FlapperValveController15ControlMovementEv+0x1e8>)
   12ede:	4798      	blx	r3
   12ee0:	e018      	b.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
									}
									else
									{
										KeepControlling();
   12ee2:	2100      	movs	r1, #0
   12ee4:	6878      	ldr	r0, [r7, #4]
   12ee6:	4b32      	ldr	r3, [pc, #200]	; (12fb0 <_ZN22FlapperValveController15ControlMovementEv+0x1f0>)
   12ee8:	4798      	blx	r3
   12eea:	e013      	b.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
					}
					
				}
				else
				{
					if (keepControlling)
   12eec:	687b      	ldr	r3, [r7, #4]
   12eee:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
   12ef2:	2b00      	cmp	r3, #0
   12ef4:	d00e      	beq.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
					{
						if (timeoutKeepControlling)
   12ef6:	687b      	ldr	r3, [r7, #4]
   12ef8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
   12efc:	b2db      	uxtb	r3, r3
   12efe:	2b00      	cmp	r3, #0
   12f00:	d004      	beq.n	12f0c <_ZN22FlapperValveController15ControlMovementEv+0x14c>
						{
							StopValveinBetween(false);
   12f02:	2100      	movs	r1, #0
   12f04:	6878      	ldr	r0, [r7, #4]
   12f06:	4b2b      	ldr	r3, [pc, #172]	; (12fb4 <_ZN22FlapperValveController15ControlMovementEv+0x1f4>)
   12f08:	4798      	blx	r3
   12f0a:	e003      	b.n	12f14 <_ZN22FlapperValveController15ControlMovementEv+0x154>
						}
						else
						{
							KeepControlling();
   12f0c:	2100      	movs	r1, #0
   12f0e:	6878      	ldr	r0, [r7, #4]
   12f10:	4b27      	ldr	r3, [pc, #156]	; (12fb0 <_ZN22FlapperValveController15ControlMovementEv+0x1f0>)
   12f12:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   12f14:	687b      	ldr	r3, [r7, #4]
   12f16:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   12f1a:	461a      	mov	r2, r3
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   12f22:	1ad3      	subs	r3, r2, r3
   12f24:	2b00      	cmp	r3, #0
   12f26:	bfb8      	it	lt
   12f28:	425b      	neglt	r3, r3
   12f2a:	687a      	ldr	r2, [r7, #4]
   12f2c:	f892 20a6 	ldrb.w	r2, [r2, #166]	; 0xa6
   12f30:	4293      	cmp	r3, r2
   12f32:	dd2b      	ble.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
				{
					
					if (timeoutFlapperValveController)
   12f34:	687b      	ldr	r3, [r7, #4]
   12f36:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   12f3a:	b2db      	uxtb	r3, r3
   12f3c:	2b00      	cmp	r3, #0
   12f3e:	d025      	beq.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
					{
						StopValveinBetween(false);
   12f40:	2100      	movs	r1, #0
   12f42:	6878      	ldr	r0, [r7, #4]
   12f44:	4b1b      	ldr	r3, [pc, #108]	; (12fb4 <_ZN22FlapperValveController15ControlMovementEv+0x1f4>)
   12f46:	4798      	blx	r3
						gotSetpoint=false;
   12f48:	687b      	ldr	r3, [r7, #4]
   12f4a:	2200      	movs	r2, #0
   12f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
   12f50:	e01c      	b.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
				
				
			}
			else
			{
				if (closing)
   12f52:	687b      	ldr	r3, [r7, #4]
   12f54:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d009      	beq.n	12f70 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>
				{
					if (fullClosedTimeout)
   12f5c:	687b      	ldr	r3, [r7, #4]
   12f5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   12f62:	b2db      	uxtb	r3, r3
   12f64:	2b00      	cmp	r3, #0
   12f66:	d011      	beq.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
					{
						StopValveAtLimit();
   12f68:	6878      	ldr	r0, [r7, #4]
   12f6a:	4b0b      	ldr	r3, [pc, #44]	; (12f98 <_ZN22FlapperValveController15ControlMovementEv+0x1d8>)
   12f6c:	4798      	blx	r3
   12f6e:	e00d      	b.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
					{
					}
				} 
				else
				{
					if (gotSetpoint)
   12f70:	687b      	ldr	r3, [r7, #4]
   12f72:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
   12f76:	b2db      	uxtb	r3, r3
   12f78:	2b00      	cmp	r3, #0
   12f7a:	d107      	bne.n	12f8c <_ZN22FlapperValveController15ControlMovementEv+0x1cc>
					{
					} 
					else
					{
						StopValveinBetween();
   12f7c:	2101      	movs	r1, #1
   12f7e:	6878      	ldr	r0, [r7, #4]
   12f80:	4b0c      	ldr	r3, [pc, #48]	; (12fb4 <_ZN22FlapperValveController15ControlMovementEv+0x1f4>)
   12f82:	4798      	blx	r3
						gotSetpoint=true;
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2201      	movs	r2, #1
   12f88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		
	} 
	else
	{
	}
	return 0;
   12f8c:	2300      	movs	r3, #0
	
}
   12f8e:	4618      	mov	r0, r3
   12f90:	370c      	adds	r7, #12
   12f92:	46bd      	mov	sp, r7
   12f94:	bd90      	pop	{r4, r7, pc}
   12f96:	bf00      	nop
   12f98:	00013305 	.word	0x00013305
   12f9c:	00012cf1 	.word	0x00012cf1
   12fa0:	0001325d 	.word	0x0001325d
   12fa4:	0001298d 	.word	0x0001298d
   12fa8:	00013229 	.word	0x00013229
   12fac:	00013b75 	.word	0x00013b75
   12fb0:	000136f5 	.word	0x000136f5
   12fb4:	0001339d 	.word	0x0001339d

00012fb8 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   12fb8:	b580      	push	{r7, lr}
   12fba:	b084      	sub	sp, #16
   12fbc:	af00      	add	r7, sp, #0
   12fbe:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   12fc0:	2052      	movs	r0, #82	; 0x52
   12fc2:	4b60      	ldr	r3, [pc, #384]	; (13144 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   12fc4:	4798      	blx	r3
   12fc6:	4603      	mov	r3, r0
   12fc8:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   12fca:	6878      	ldr	r0, [r7, #4]
   12fcc:	4b5e      	ldr	r3, [pc, #376]	; (13148 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   12fce:	4798      	blx	r3
   12fd0:	4603      	mov	r3, r0
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	f000 80b2 	beq.w	1313c <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
   12fd8:	687b      	ldr	r3, [r7, #4]
   12fda:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   12fde:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
   12fe0:	687b      	ldr	r3, [r7, #4]
   12fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12fe6:	2100      	movs	r1, #0
   12fe8:	4618      	mov	r0, r3
   12fea:	4b58      	ldr	r3, [pc, #352]	; (1314c <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12fec:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
   12fee:	687b      	ldr	r3, [r7, #4]
   12ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12ff4:	2100      	movs	r1, #0
   12ff6:	4618      	mov	r0, r3
   12ff8:	4b55      	ldr	r3, [pc, #340]	; (13150 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   12ffa:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
   12ffc:	687b      	ldr	r3, [r7, #4]
   12ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13002:	2100      	movs	r1, #0
   13004:	4618      	mov	r0, r3
   13006:	4b53      	ldr	r3, [pc, #332]	; (13154 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   13008:	4798      	blx	r3
		delay_ms(100);
   1300a:	2064      	movs	r0, #100	; 0x64
   1300c:	4b52      	ldr	r3, [pc, #328]	; (13158 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
   1300e:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
   13010:	687b      	ldr	r3, [r7, #4]
   13012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13016:	4618      	mov	r0, r3
   13018:	4b50      	ldr	r3, [pc, #320]	; (1315c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   1301a:	4798      	blx	r3
   1301c:	4603      	mov	r3, r0
   1301e:	461a      	mov	r2, r3
   13020:	7bbb      	ldrb	r3, [r7, #14]
   13022:	429a      	cmp	r2, r3
   13024:	bfcc      	ite	gt
   13026:	2301      	movgt	r3, #1
   13028:	2300      	movle	r3, #0
   1302a:	b2db      	uxtb	r3, r3
   1302c:	2b00      	cmp	r3, #0
   1302e:	d007      	beq.n	13040 <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
   13030:	687b      	ldr	r3, [r7, #4]
   13032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13036:	2101      	movs	r1, #1
   13038:	4618      	mov	r0, r3
   1303a:	4b49      	ldr	r3, [pc, #292]	; (13160 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   1303c:	4798      	blx	r3
   1303e:	e006      	b.n	1304e <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
   13040:	687b      	ldr	r3, [r7, #4]
   13042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13046:	2100      	movs	r1, #0
   13048:	4618      	mov	r0, r3
   1304a:	4b45      	ldr	r3, [pc, #276]	; (13160 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   1304c:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
   1304e:	687b      	ldr	r3, [r7, #4]
   13050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13054:	2101      	movs	r1, #1
   13056:	4618      	mov	r0, r3
   13058:	4b3d      	ldr	r3, [pc, #244]	; (13150 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   1305a:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
   1305c:	687b      	ldr	r3, [r7, #4]
   1305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13062:	2101      	movs	r1, #1
   13064:	4618      	mov	r0, r3
   13066:	4b3b      	ldr	r3, [pc, #236]	; (13154 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   13068:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
   1306a:	687b      	ldr	r3, [r7, #4]
   1306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13070:	7bba      	ldrb	r2, [r7, #14]
   13072:	4611      	mov	r1, r2
   13074:	4618      	mov	r0, r3
   13076:	4b3b      	ldr	r3, [pc, #236]	; (13164 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
   13078:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
   1307a:	687b      	ldr	r3, [r7, #4]
   1307c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13080:	4618      	mov	r0, r3
   13082:	4b36      	ldr	r3, [pc, #216]	; (1315c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   13084:	4798      	blx	r3
   13086:	4603      	mov	r3, r0
   13088:	461a      	mov	r2, r3
   1308a:	687b      	ldr	r3, [r7, #4]
   1308c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
		
		resetTimeout=false;
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	2200      	movs	r2, #0
   13094:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		if (valve_ID==0)
   13098:	687b      	ldr	r3, [r7, #4]
   1309a:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1309e:	2b00      	cmp	r3, #0
   130a0:	d106      	bne.n	130b0 <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
   130a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   130a6:	4930      	ldr	r1, [pc, #192]	; (13168 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
   130a8:	4830      	ldr	r0, [pc, #192]	; (1316c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   130aa:	4b31      	ldr	r3, [pc, #196]	; (13170 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   130ac:	4798      	blx	r3
   130ae:	e005      	b.n	130bc <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
   130b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   130b4:	492f      	ldr	r1, [pc, #188]	; (13174 <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
   130b6:	482d      	ldr	r0, [pc, #180]	; (1316c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   130b8:	4b2d      	ldr	r3, [pc, #180]	; (13170 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   130ba:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
   130bc:	687b      	ldr	r3, [r7, #4]
   130be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   130c2:	2101      	movs	r1, #1
   130c4:	4618      	mov	r0, r3
   130c6:	4b21      	ldr	r3, [pc, #132]	; (1314c <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   130c8:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   130d0:	461a      	mov	r2, r3
   130d2:	7bbb      	ldrb	r3, [r7, #14]
   130d4:	1ad3      	subs	r3, r2, r3
   130d6:	2b00      	cmp	r3, #0
   130d8:	bfb8      	it	lt
   130da:	425b      	neglt	r3, r3
   130dc:	2b06      	cmp	r3, #6
   130de:	bfcc      	ite	gt
   130e0:	2301      	movgt	r3, #1
   130e2:	2300      	movle	r3, #0
   130e4:	b2db      	uxtb	r3, r3
   130e6:	461a      	mov	r2, r3
   130e8:	687b      	ldr	r3, [r7, #4]
   130ea:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   130ee:	b2db      	uxtb	r3, r3
   130f0:	f083 0301 	eor.w	r3, r3, #1
   130f4:	b2db      	uxtb	r3, r3
   130f6:	4013      	ands	r3, r2
   130f8:	2b00      	cmp	r3, #0
   130fa:	bf14      	ite	ne
   130fc:	2301      	movne	r3, #1
   130fe:	2300      	moveq	r3, #0
   13100:	b2db      	uxtb	r3, r3
   13102:	2b00      	cmp	r3, #0
   13104:	d00e      	beq.n	13124 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
   13106:	2052      	movs	r0, #82	; 0x52
   13108:	4b1b      	ldr	r3, [pc, #108]	; (13178 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
   1310a:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13112:	4618      	mov	r0, r3
   13114:	4b11      	ldr	r3, [pc, #68]	; (1315c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   13116:	4798      	blx	r3
   13118:	4603      	mov	r3, r0
   1311a:	461a      	mov	r2, r3
   1311c:	687b      	ldr	r3, [r7, #4]
   1311e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   13122:	e7d2      	b.n	130ca <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1312a:	2100      	movs	r1, #0
   1312c:	4618      	mov	r0, r3
   1312e:	4b07      	ldr	r3, [pc, #28]	; (1314c <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   13130:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   13132:	7bfb      	ldrb	r3, [r7, #15]
   13134:	4619      	mov	r1, r3
   13136:	2052      	movs	r0, #82	; 0x52
   13138:	4b10      	ldr	r3, [pc, #64]	; (1317c <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
   1313a:	4798      	blx	r3
	} 
	else
	{
	}
}
   1313c:	bf00      	nop
   1313e:	3710      	adds	r7, #16
   13140:	46bd      	mov	sp, r7
   13142:	bd80      	pop	{r7, pc}
   13144:	000126d1 	.word	0x000126d1
   13148:	00012a89 	.word	0x00012a89
   1314c:	00014005 	.word	0x00014005
   13150:	00014175 	.word	0x00014175
   13154:	000140fd 	.word	0x000140fd
   13158:	000036c9 	.word	0x000036c9
   1315c:	00014269 	.word	0x00014269
   13160:	00014085 	.word	0x00014085
   13164:	000141ed 	.word	0x000141ed
   13168:	000127a5 	.word	0x000127a5
   1316c:	200054c4 	.word	0x200054c4
   13170:	000107b9 	.word	0x000107b9
   13174:	000127c5 	.word	0x000127c5
   13178:	000126a1 	.word	0x000126a1
   1317c:	00012669 	.word	0x00012669

00013180 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   13180:	b580      	push	{r7, lr}
   13182:	b082      	sub	sp, #8
   13184:	af00      	add	r7, sp, #0
   13186:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
   1318e:	2b00      	cmp	r3, #0
   13190:	d014      	beq.n	131bc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   13192:	687b      	ldr	r3, [r7, #4]
   13194:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
   13198:	2b00      	cmp	r3, #0
   1319a:	d003      	beq.n	131a4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   1319c:	6878      	ldr	r0, [r7, #4]
   1319e:	4b0e      	ldr	r3, [pc, #56]	; (131d8 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   131a0:	4798      	blx	r3
   131a2:	e013      	b.n	131cc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   131a4:	687b      	ldr	r3, [r7, #4]
   131a6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
   131aa:	4619      	mov	r1, r3
   131ac:	6878      	ldr	r0, [r7, #4]
   131ae:	4b0b      	ldr	r3, [pc, #44]	; (131dc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   131b0:	4798      	blx	r3
			NBC_Activated=false;
   131b2:	687b      	ldr	r3, [r7, #4]
   131b4:	2200      	movs	r2, #0
   131b6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
   131ba:	e007      	b.n	131cc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   131bc:	21ff      	movs	r1, #255	; 0xff
   131be:	6878      	ldr	r0, [r7, #4]
   131c0:	4b06      	ldr	r3, [pc, #24]	; (131dc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   131c2:	4798      	blx	r3
			NBC_Activated=true;
   131c4:	687b      	ldr	r3, [r7, #4]
   131c6:	2201      	movs	r2, #1
   131c8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	}

	return 0;
   131cc:	2300      	movs	r3, #0
	
}
   131ce:	4618      	mov	r0, r3
   131d0:	3708      	adds	r7, #8
   131d2:	46bd      	mov	sp, r7
   131d4:	bd80      	pop	{r7, pc}
   131d6:	bf00      	nop
   131d8:	00012dc1 	.word	0x00012dc1
   131dc:	0001351d 	.word	0x0001351d

000131e0 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   131e0:	b480      	push	{r7}
   131e2:	b083      	sub	sp, #12
   131e4:	af00      	add	r7, sp, #0
   131e6:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   131e8:	687b      	ldr	r3, [r7, #4]
   131ea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   131ee:	461a      	mov	r2, r3
   131f0:	687b      	ldr	r3, [r7, #4]
   131f2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
   131f6:	4013      	ands	r3, r2
   131f8:	687a      	ldr	r2, [r7, #4]
   131fa:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
   131fe:	4313      	orrs	r3, r2
   13200:	2b00      	cmp	r3, #0
   13202:	bf14      	ite	ne
   13204:	2301      	movne	r3, #1
   13206:	2300      	moveq	r3, #0
   13208:	b2da      	uxtb	r2, r3
   1320a:	687b      	ldr	r3, [r7, #4]
   1320c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	currentMaximum=255;
   13210:	687b      	ldr	r3, [r7, #4]
   13212:	22ff      	movs	r2, #255	; 0xff
   13214:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	return NBC_Mode;
   13218:	687b      	ldr	r3, [r7, #4]
   1321a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
}
   1321e:	4618      	mov	r0, r3
   13220:	370c      	adds	r7, #12
   13222:	46bd      	mov	sp, r7
   13224:	bc80      	pop	{r7}
   13226:	4770      	bx	lr

00013228 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
   13228:	b580      	push	{r7, lr}
   1322a:	b082      	sub	sp, #8
   1322c:	af00      	add	r7, sp, #0
   1322e:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
   13230:	687b      	ldr	r3, [r7, #4]
   13232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13236:	2100      	movs	r1, #0
   13238:	4618      	mov	r0, r3
   1323a:	4b07      	ldr	r3, [pc, #28]	; (13258 <_ZN22FlapperValveController9StopMotorEv+0x30>)
   1323c:	4798      	blx	r3
	flapperValveIsMoving=false;
   1323e:	687b      	ldr	r3, [r7, #4]
   13240:	2200      	movs	r2, #0
   13242:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	is_motor_on=false;
   13246:	687b      	ldr	r3, [r7, #4]
   13248:	2200      	movs	r2, #0
   1324a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	return 0;
   1324e:	2300      	movs	r3, #0
}
   13250:	4618      	mov	r0, r3
   13252:	3708      	adds	r7, #8
   13254:	46bd      	mov	sp, r7
   13256:	bd80      	pop	{r7, pc}
   13258:	00014005 	.word	0x00014005

0001325c <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
   1325c:	b480      	push	{r7}
   1325e:	b085      	sub	sp, #20
   13260:	af00      	add	r7, sp, #0
   13262:	6078      	str	r0, [r7, #4]
	bool_result=true;
   13264:	687b      	ldr	r3, [r7, #4]
   13266:	2201      	movs	r2, #1
   13268:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (flapperValveIsMoving)
   1326c:	687b      	ldr	r3, [r7, #4]
   1326e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   13272:	b2db      	uxtb	r3, r3
   13274:	2b00      	cmp	r3, #0
   13276:	d03c      	beq.n	132f2 <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   13278:	2300      	movs	r3, #0
   1327a:	73fb      	strb	r3, [r7, #15]
   1327c:	7bfb      	ldrb	r3, [r7, #15]
   1327e:	2b06      	cmp	r3, #6
   13280:	dc26      	bgt.n	132d0 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   13282:	687b      	ldr	r3, [r7, #4]
   13284:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   13288:	461a      	mov	r2, r3
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	3234      	adds	r2, #52	; 0x34
   1328e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13292:	7bfb      	ldrb	r3, [r7, #15]
   13294:	4413      	add	r3, r2
   13296:	781a      	ldrb	r2, [r3, #0]
   13298:	687b      	ldr	r3, [r7, #4]
   1329a:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1329e:	4619      	mov	r1, r3
   132a0:	687b      	ldr	r3, [r7, #4]
   132a2:	3134      	adds	r1, #52	; 0x34
   132a4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   132a8:	7bfb      	ldrb	r3, [r7, #15]
   132aa:	3301      	adds	r3, #1
   132ac:	440b      	add	r3, r1
   132ae:	781b      	ldrb	r3, [r3, #0]
   132b0:	429a      	cmp	r2, r3
   132b2:	d104      	bne.n	132be <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
   132b4:	687b      	ldr	r3, [r7, #4]
   132b6:	2200      	movs	r2, #0
   132b8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
   132bc:	e004      	b.n	132c8 <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
   132be:	687b      	ldr	r3, [r7, #4]
   132c0:	2201      	movs	r2, #1
   132c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
				break;
   132c6:	e003      	b.n	132d0 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   132c8:	7bfb      	ldrb	r3, [r7, #15]
   132ca:	3301      	adds	r3, #1
   132cc:	73fb      	strb	r3, [r7, #15]
   132ce:	e7d5      	b.n	1327c <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   132d0:	687b      	ldr	r3, [r7, #4]
   132d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   132d6:	b2db      	uxtb	r3, r3
   132d8:	461a      	mov	r2, r3
   132da:	687b      	ldr	r3, [r7, #4]
   132dc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   132e0:	4013      	ands	r3, r2
   132e2:	2b00      	cmp	r3, #0
   132e4:	bf14      	ite	ne
   132e6:	2301      	movne	r3, #1
   132e8:	2300      	moveq	r3, #0
   132ea:	b2da      	uxtb	r2, r3
   132ec:	687b      	ldr	r3, [r7, #4]
   132ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	} 
	else
	{
	}
	return flapperValveIsMoving;
   132f2:	687b      	ldr	r3, [r7, #4]
   132f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   132f8:	b2db      	uxtb	r3, r3
	
}
   132fa:	4618      	mov	r0, r3
   132fc:	3714      	adds	r7, #20
   132fe:	46bd      	mov	sp, r7
   13300:	bc80      	pop	{r7}
   13302:	4770      	bx	lr

00013304 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   13304:	b580      	push	{r7, lr}
   13306:	b082      	sub	sp, #8
   13308:	af00      	add	r7, sp, #0
   1330a:	6078      	str	r0, [r7, #4]
		if (closing)
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   13312:	2b00      	cmp	r3, #0
   13314:	d003      	beq.n	1331e <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   13316:	687b      	ldr	r3, [r7, #4]
   13318:	2200      	movs	r2, #0
   1331a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		}
	
		StopMotor();
   1331e:	6878      	ldr	r0, [r7, #4]
   13320:	4b17      	ldr	r3, [pc, #92]	; (13380 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   13322:	4798      	blx	r3
		if (valve_ID==0)
   13324:	687b      	ldr	r3, [r7, #4]
   13326:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1332a:	2b00      	cmp	r3, #0
   1332c:	d108      	bne.n	13340 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   1332e:	4915      	ldr	r1, [pc, #84]	; (13384 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   13330:	4815      	ldr	r0, [pc, #84]	; (13388 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   13332:	4b16      	ldr	r3, [pc, #88]	; (1338c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   13334:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   13336:	4916      	ldr	r1, [pc, #88]	; (13390 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   13338:	4813      	ldr	r0, [pc, #76]	; (13388 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   1333a:	4b14      	ldr	r3, [pc, #80]	; (1338c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   1333c:	4798      	blx	r3
   1333e:	e007      	b.n	13350 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   13340:	4914      	ldr	r1, [pc, #80]	; (13394 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   13342:	4811      	ldr	r0, [pc, #68]	; (13388 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   13344:	4b11      	ldr	r3, [pc, #68]	; (1338c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   13346:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   13348:	4913      	ldr	r1, [pc, #76]	; (13398 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   1334a:	480f      	ldr	r0, [pc, #60]	; (13388 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   1334c:	4b0f      	ldr	r3, [pc, #60]	; (1338c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   1334e:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   13350:	687b      	ldr	r3, [r7, #4]
   13352:	2200      	movs	r2, #0
   13354:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		timeoutKeepControlling=false;
   13358:	687b      	ldr	r3, [r7, #4]
   1335a:	2200      	movs	r2, #0
   1335c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		unLockTimeout=false;
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	2200      	movs	r2, #0
   13364:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		paused=false;
   13368:	687b      	ldr	r3, [r7, #4]
   1336a:	2200      	movs	r2, #0
   1336c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		keepControlling=false;
   13370:	687b      	ldr	r3, [r7, #4]
   13372:	2200      	movs	r2, #0
   13374:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
}
   13378:	bf00      	nop
   1337a:	3708      	adds	r7, #8
   1337c:	46bd      	mov	sp, r7
   1337e:	bd80      	pop	{r7, pc}
   13380:	00013229 	.word	0x00013229
   13384:	0001270d 	.word	0x0001270d
   13388:	200054c4 	.word	0x200054c4
   1338c:	00010761 	.word	0x00010761
   13390:	00012765 	.word	0x00012765
   13394:	00012739 	.word	0x00012739
   13398:	00012785 	.word	0x00012785

0001339c <_ZN22FlapperValveController18StopValveinBetweenEb>:

void FlapperValveController::StopValveinBetween(bool gs){
   1339c:	b580      	push	{r7, lr}
   1339e:	b082      	sub	sp, #8
   133a0:	af00      	add	r7, sp, #0
   133a2:	6078      	str	r0, [r7, #4]
   133a4:	460b      	mov	r3, r1
   133a6:	70fb      	strb	r3, [r7, #3]
		StopMotor();
   133a8:	6878      	ldr	r0, [r7, #4]
   133aa:	4b0f      	ldr	r3, [pc, #60]	; (133e8 <_ZN22FlapperValveController18StopValveinBetweenEb+0x4c>)
   133ac:	4798      	blx	r3
		RemoveTimeoutTask();
   133ae:	6878      	ldr	r0, [r7, #4]
   133b0:	4b0e      	ldr	r3, [pc, #56]	; (133ec <_ZN22FlapperValveController18StopValveinBetweenEb+0x50>)
   133b2:	4798      	blx	r3
		timeoutFlapperValveController=false;
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	2200      	movs	r2, #0
   133b8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		paused=false;
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	2200      	movs	r2, #0
   133c0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		timeoutKeepControlling=false;
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	2200      	movs	r2, #0
   133c8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		keepControlling=gs;
   133cc:	687b      	ldr	r3, [r7, #4]
   133ce:	78fa      	ldrb	r2, [r7, #3]
   133d0:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		if (gs)
   133d4:	78fb      	ldrb	r3, [r7, #3]
   133d6:	2b00      	cmp	r3, #0
   133d8:	d102      	bne.n	133e0 <_ZN22FlapperValveController18StopValveinBetweenEb+0x44>
		{
			
		} 
		else
		{
			StopControlling();
   133da:	6878      	ldr	r0, [r7, #4]
   133dc:	4b04      	ldr	r3, [pc, #16]	; (133f0 <_ZN22FlapperValveController18StopValveinBetweenEb+0x54>)
   133de:	4798      	blx	r3
		}
}
   133e0:	bf00      	nop
   133e2:	3708      	adds	r7, #8
   133e4:	46bd      	mov	sp, r7
   133e6:	bd80      	pop	{r7, pc}
   133e8:	00013229 	.word	0x00013229
   133ec:	00013b75 	.word	0x00013b75
   133f0:	000134d9 	.word	0x000134d9

000133f4 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   133f4:	b580      	push	{r7, lr}
   133f6:	b084      	sub	sp, #16
   133f8:	af00      	add	r7, sp, #0
   133fa:	6078      	str	r0, [r7, #4]
   133fc:	460b      	mov	r3, r1
   133fe:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   13400:	78fb      	ldrb	r3, [r7, #3]
   13402:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   13406:	2b00      	cmp	r3, #0
   13408:	dd0c      	ble.n	13424 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   1340a:	78fb      	ldrb	r3, [r7, #3]
   1340c:	43db      	mvns	r3, r3
   1340e:	009b      	lsls	r3, r3, #2
   13410:	2b00      	cmp	r3, #0
   13412:	da00      	bge.n	13416 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   13414:	33ff      	adds	r3, #255	; 0xff
   13416:	121b      	asrs	r3, r3, #8
   13418:	461a      	mov	r2, r3
   1341a:	4b15      	ldr	r3, [pc, #84]	; (13470 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
   1341c:	4610      	mov	r0, r2
   1341e:	4798      	blx	r3
   13420:	4603      	mov	r3, r0
   13422:	e00b      	b.n	1343c <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   13424:	78fb      	ldrb	r3, [r7, #3]
   13426:	3bff      	subs	r3, #255	; 0xff
   13428:	009b      	lsls	r3, r3, #2
   1342a:	2b00      	cmp	r3, #0
   1342c:	da00      	bge.n	13430 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   1342e:	33ff      	adds	r3, #255	; 0xff
   13430:	121b      	asrs	r3, r3, #8
   13432:	461a      	mov	r2, r3
   13434:	4b0e      	ldr	r3, [pc, #56]	; (13470 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
   13436:	4610      	mov	r0, r2
   13438:	4798      	blx	r3
   1343a:	4603      	mov	r3, r0
   1343c:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   1343e:	4b0d      	ldr	r3, [pc, #52]	; (13474 <_ZN22FlapperValveController16CorrectToleranceEh+0x80>)
   13440:	68f8      	ldr	r0, [r7, #12]
   13442:	4798      	blx	r3
   13444:	4603      	mov	r3, r0
   13446:	b2da      	uxtb	r2, r3
   13448:	687b      	ldr	r3, [r7, #4]
   1344a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	if (tolerance<1)
   1344e:	687b      	ldr	r3, [r7, #4]
   13450:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   13454:	2b00      	cmp	r3, #0
   13456:	dc03      	bgt.n	13460 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>
	{
		tolerance=0x01;
   13458:	687b      	ldr	r3, [r7, #4]
   1345a:	2201      	movs	r2, #1
   1345c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	}
	return tolerance;
   13460:	687b      	ldr	r3, [r7, #4]
   13462:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
}
   13466:	4618      	mov	r0, r3
   13468:	3710      	adds	r7, #16
   1346a:	46bd      	mov	sp, r7
   1346c:	bd80      	pop	{r7, pc}
   1346e:	bf00      	nop
   13470:	0001ace1 	.word	0x0001ace1
   13474:	0001b029 	.word	0x0001b029

00013478 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   13478:	b580      	push	{r7, lr}
   1347a:	b082      	sub	sp, #8
   1347c:	af00      	add	r7, sp, #0
   1347e:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   13480:	687b      	ldr	r3, [r7, #4]
   13482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13486:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   1348a:	2b00      	cmp	r3, #0
   1348c:	d009      	beq.n	134a2 <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
   1348e:	687b      	ldr	r3, [r7, #4]
   13490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13494:	2100      	movs	r1, #0
   13496:	4618      	mov	r0, r3
   13498:	4b0d      	ldr	r3, [pc, #52]	; (134d0 <_ZN22FlapperValveController10StartMotorEv+0x58>)
   1349a:	4798      	blx	r3
		delay_ms(10);
   1349c:	200a      	movs	r0, #10
   1349e:	4b0d      	ldr	r3, [pc, #52]	; (134d4 <_ZN22FlapperValveController10StartMotorEv+0x5c>)
   134a0:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   134a2:	687b      	ldr	r3, [r7, #4]
   134a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   134a8:	2101      	movs	r1, #1
   134aa:	4618      	mov	r0, r3
   134ac:	4b08      	ldr	r3, [pc, #32]	; (134d0 <_ZN22FlapperValveController10StartMotorEv+0x58>)
   134ae:	4798      	blx	r3
	flapperValveIsMoving=true;
   134b0:	687b      	ldr	r3, [r7, #4]
   134b2:	2201      	movs	r2, #1
   134b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	is_motor_on=flapperValveIsMoving;
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   134be:	b2da      	uxtb	r2, r3
   134c0:	687b      	ldr	r3, [r7, #4]
   134c2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	return 0;
   134c6:	2300      	movs	r3, #0
}
   134c8:	4618      	mov	r0, r3
   134ca:	3708      	adds	r7, #8
   134cc:	46bd      	mov	sp, r7
   134ce:	bd80      	pop	{r7, pc}
   134d0:	00014005 	.word	0x00014005
   134d4:	000036c9 	.word	0x000036c9

000134d8 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   134d8:	b580      	push	{r7, lr}
   134da:	b082      	sub	sp, #8
   134dc:	af00      	add	r7, sp, #0
   134de:	6078      	str	r0, [r7, #4]
	StopMotor();
   134e0:	6878      	ldr	r0, [r7, #4]
   134e2:	4b0d      	ldr	r3, [pc, #52]	; (13518 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   134e4:	4798      	blx	r3
	timeoutKeepControlling=false;
   134e6:	687b      	ldr	r3, [r7, #4]
   134e8:	2200      	movs	r2, #0
   134ea:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	timeoutFlapperValveController=false;
   134ee:	687b      	ldr	r3, [r7, #4]
   134f0:	2200      	movs	r2, #0
   134f2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	isControlling=false;
   134f6:	687b      	ldr	r3, [r7, #4]
   134f8:	2200      	movs	r2, #0
   134fa:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	keepControlling=false;
   134fe:	687b      	ldr	r3, [r7, #4]
   13500:	2200      	movs	r2, #0
   13502:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	controllerEnabled=false;
   13506:	687b      	ldr	r3, [r7, #4]
   13508:	2200      	movs	r2, #0
   1350a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	return 0;
   1350e:	2300      	movs	r3, #0
}
   13510:	4618      	mov	r0, r3
   13512:	3708      	adds	r7, #8
   13514:	46bd      	mov	sp, r7
   13516:	bd80      	pop	{r7, pc}
   13518:	00013229 	.word	0x00013229

0001351c <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   1351c:	b580      	push	{r7, lr}
   1351e:	b082      	sub	sp, #8
   13520:	af00      	add	r7, sp, #0
   13522:	6078      	str	r0, [r7, #4]
   13524:	460b      	mov	r3, r1
   13526:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   13528:	78fb      	ldrb	r3, [r7, #3]
   1352a:	4619      	mov	r1, r3
   1352c:	6878      	ldr	r0, [r7, #4]
   1352e:	4b2d      	ldr	r3, [pc, #180]	; (135e4 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   13530:	4798      	blx	r3
   13532:	4603      	mov	r3, r0
   13534:	461a      	mov	r2, r3
   13536:	687b      	ldr	r3, [r7, #4]
   13538:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		CorrectTolerance(setpoint);
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   13542:	4619      	mov	r1, r3
   13544:	6878      	ldr	r0, [r7, #4]
   13546:	4b28      	ldr	r3, [pc, #160]	; (135e8 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   13548:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   1354a:	687b      	ldr	r3, [r7, #4]
   1354c:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
   13550:	4b26      	ldr	r3, [pc, #152]	; (135ec <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   13552:	4610      	mov	r0, r2
   13554:	4798      	blx	r3
   13556:	4602      	mov	r2, r0
   13558:	687b      	ldr	r3, [r7, #4]
   1355a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		timeoutFlapperValveController=false;
   1355e:	687b      	ldr	r3, [r7, #4]
   13560:	2200      	movs	r2, #0
   13562:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		timeoutKeepControlling=false;
   13566:	687b      	ldr	r3, [r7, #4]
   13568:	2200      	movs	r2, #0
   1356a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		keepControlling=false;
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	2200      	movs	r2, #0
   13572:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		controllerEnabled=true;
   13576:	687b      	ldr	r3, [r7, #4]
   13578:	2201      	movs	r2, #1
   1357a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		unLockTimeout=false;
   1357e:	687b      	ldr	r3, [r7, #4]
   13580:	2200      	movs	r2, #0
   13582:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		if (valve_ID==0)
   13586:	687b      	ldr	r3, [r7, #4]
   13588:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1358c:	2b00      	cmp	r3, #0
   1358e:	d106      	bne.n	1359e <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   13590:	f242 7210 	movw	r2, #10000	; 0x2710
   13594:	4916      	ldr	r1, [pc, #88]	; (135f0 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   13596:	4817      	ldr	r0, [pc, #92]	; (135f4 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   13598:	4b17      	ldr	r3, [pc, #92]	; (135f8 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   1359a:	4798      	blx	r3
   1359c:	e005      	b.n	135aa <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   1359e:	f242 7210 	movw	r2, #10000	; 0x2710
   135a2:	4916      	ldr	r1, [pc, #88]	; (135fc <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   135a4:	4813      	ldr	r0, [pc, #76]	; (135f4 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   135a6:	4b14      	ldr	r3, [pc, #80]	; (135f8 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   135a8:	4798      	blx	r3
		}
		
		isControlling=true;
   135aa:	687b      	ldr	r3, [r7, #4]
   135ac:	2201      	movs	r2, #1
   135ae:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		StartMovingOnDirection();
   135b2:	6878      	ldr	r0, [r7, #4]
   135b4:	4b12      	ldr	r3, [pc, #72]	; (13600 <_ZN22FlapperValveController16StartControllingEh+0xe4>)
   135b6:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
		gotSetpoint=false;
   135b8:	687b      	ldr	r3, [r7, #4]
   135ba:	2200      	movs	r2, #0
   135bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			ControlMovement();
   135c0:	6878      	ldr	r0, [r7, #4]
   135c2:	4b10      	ldr	r3, [pc, #64]	; (13604 <_ZN22FlapperValveController16StartControllingEh+0xe8>)
   135c4:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   135c6:	687b      	ldr	r3, [r7, #4]
   135c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   135cc:	b2db      	uxtb	r3, r3
   135ce:	2b00      	cmp	r3, #0
   135d0:	d003      	beq.n	135da <_ZN22FlapperValveController16StartControllingEh+0xbe>
		{
			paused=true;
   135d2:	687b      	ldr	r3, [r7, #4]
   135d4:	2201      	movs	r2, #1
   135d6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		return 0;
   135da:	2300      	movs	r3, #0
	
}
   135dc:	4618      	mov	r0, r3
   135de:	3708      	adds	r7, #8
   135e0:	46bd      	mov	sp, r7
   135e2:	bd80      	pop	{r7, pc}
   135e4:	00013609 	.word	0x00013609
   135e8:	000133f5 	.word	0x000133f5
   135ec:	0001acd9 	.word	0x0001acd9
   135f0:	0001270d 	.word	0x0001270d
   135f4:	200054c4 	.word	0x200054c4
   135f8:	000107b9 	.word	0x000107b9
   135fc:	00012739 	.word	0x00012739
   13600:	000129b1 	.word	0x000129b1
   13604:	00012dc1 	.word	0x00012dc1

00013608 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   13608:	b580      	push	{r7, lr}
   1360a:	b082      	sub	sp, #8
   1360c:	af00      	add	r7, sp, #0
   1360e:	6078      	str	r0, [r7, #4]
   13610:	460b      	mov	r3, r1
   13612:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   13614:	6878      	ldr	r0, [r7, #4]
   13616:	4b2d      	ldr	r3, [pc, #180]	; (136cc <_ZN22FlapperValveController14VerifySetpointEh+0xc4>)
   13618:	4798      	blx	r3
   1361a:	4603      	mov	r3, r0
   1361c:	2b00      	cmp	r3, #0
   1361e:	d004      	beq.n	1362a <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   13620:	687b      	ldr	r3, [r7, #4]
   13622:	78fa      	ldrb	r2, [r7, #3]
   13624:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
   13628:	e049      	b.n	136be <_ZN22FlapperValveController14VerifySetpointEh+0xb6>
	} 
	else
	{
		if (standAloneActivated)
   1362a:	687b      	ldr	r3, [r7, #4]
   1362c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   13630:	2b00      	cmp	r3, #0
   13632:	d022      	beq.n	1367a <_ZN22FlapperValveController14VerifySetpointEh+0x72>
		{
			standAlonePosition=parameters.flapperValveStandAloneMinimumPosition[valve_ID];
   13634:	687b      	ldr	r3, [r7, #4]
   13636:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1363a:	461a      	mov	r2, r3
   1363c:	687b      	ldr	r3, [r7, #4]
   1363e:	4413      	add	r3, r2
   13640:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   13644:	687b      	ldr	r3, [r7, #4]
   13646:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (sp>(standAlonePosition))
   1364a:	78fb      	ldrb	r3, [r7, #3]
   1364c:	687a      	ldr	r2, [r7, #4]
   1364e:	f892 20c9 	ldrb.w	r2, [r2, #201]	; 0xc9
   13652:	4293      	cmp	r3, r2
   13654:	dd0c      	ble.n	13670 <_ZN22FlapperValveController14VerifySetpointEh+0x68>
			{
				setpoint=standAlonePosition;
   13656:	687b      	ldr	r3, [r7, #4]
   13658:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
   1365c:	687b      	ldr	r3, [r7, #4]
   1365e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
				currentMaximum=standAlonePosition;
   13662:	687b      	ldr	r3, [r7, #4]
   13664:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
   13668:	687b      	ldr	r3, [r7, #4]
   1366a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   1366e:	e026      	b.n	136be <_ZN22FlapperValveController14VerifySetpointEh+0xb6>
			}
			else
			{
				setpoint=sp;
   13670:	687b      	ldr	r3, [r7, #4]
   13672:	78fa      	ldrb	r2, [r7, #3]
   13674:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
   13678:	e021      	b.n	136be <_ZN22FlapperValveController14VerifySetpointEh+0xb6>
			}
		}
		else
		{
			maximumPosition=parameters.flapperValveMinimumPosition[valve_ID];
   1367a:	687b      	ldr	r3, [r7, #4]
   1367c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   13680:	461a      	mov	r2, r3
   13682:	687b      	ldr	r3, [r7, #4]
   13684:	4413      	add	r3, r2
   13686:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1368a:	687b      	ldr	r3, [r7, #4]
   1368c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			if (sp>maximumPosition)
   13690:	78fb      	ldrb	r3, [r7, #3]
   13692:	687a      	ldr	r2, [r7, #4]
   13694:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
   13698:	4293      	cmp	r3, r2
   1369a:	dd0c      	ble.n	136b6 <_ZN22FlapperValveController14VerifySetpointEh+0xae>
			{
				setpoint=maximumPosition;
   1369c:	687b      	ldr	r3, [r7, #4]
   1369e:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   136a2:	687b      	ldr	r3, [r7, #4]
   136a4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
				currentMaximum=maximumPosition;
   136a8:	687b      	ldr	r3, [r7, #4]
   136aa:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   136ae:	687b      	ldr	r3, [r7, #4]
   136b0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   136b4:	e003      	b.n	136be <_ZN22FlapperValveController14VerifySetpointEh+0xb6>
			}
			else
			{
				setpoint=sp;
   136b6:	687b      	ldr	r3, [r7, #4]
   136b8:	78fa      	ldrb	r2, [r7, #3]
   136ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
		}
	}
	
	return setpoint;
   136be:	687b      	ldr	r3, [r7, #4]
   136c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
	
}
   136c4:	4618      	mov	r0, r3
   136c6:	3708      	adds	r7, #8
   136c8:	46bd      	mov	sp, r7
   136ca:	bd80      	pop	{r7, pc}
   136cc:	000131e1 	.word	0x000131e1

000136d0 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   136d0:	b580      	push	{r7, lr}
   136d2:	b082      	sub	sp, #8
   136d4:	af00      	add	r7, sp, #0
   136d6:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   136d8:	687b      	ldr	r3, [r7, #4]
   136da:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   136de:	4619      	mov	r1, r3
   136e0:	6878      	ldr	r0, [r7, #4]
   136e2:	4b03      	ldr	r3, [pc, #12]	; (136f0 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   136e4:	4798      	blx	r3
   136e6:	4603      	mov	r3, r0
	
}
   136e8:	4618      	mov	r0, r3
   136ea:	3708      	adds	r7, #8
   136ec:	46bd      	mov	sp, r7
   136ee:	bd80      	pop	{r7, pc}
   136f0:	0001351d 	.word	0x0001351d

000136f4 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   136f4:	b580      	push	{r7, lr}
   136f6:	b082      	sub	sp, #8
   136f8:	af00      	add	r7, sp, #0
   136fa:	6078      	str	r0, [r7, #4]
   136fc:	460b      	mov	r3, r1
   136fe:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   13700:	687b      	ldr	r3, [r7, #4]
   13702:	2200      	movs	r2, #0
   13704:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   13708:	687b      	ldr	r3, [r7, #4]
   1370a:	2201      	movs	r2, #1
   1370c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		StartMovingOnDirection();
   13710:	6878      	ldr	r0, [r7, #4]
   13712:	4b05      	ldr	r3, [pc, #20]	; (13728 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   13714:	4798      	blx	r3
		keepControlling=false;
   13716:	687b      	ldr	r3, [r7, #4]
   13718:	2200      	movs	r2, #0
   1371a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6

	return 0;
   1371e:	2300      	movs	r3, #0
	
}
   13720:	4618      	mov	r0, r3
   13722:	3708      	adds	r7, #8
   13724:	46bd      	mov	sp, r7
   13726:	bd80      	pop	{r7, pc}
   13728:	000129b1 	.word	0x000129b1

0001372c <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   1372c:	b590      	push	{r4, r7, lr}
   1372e:	b085      	sub	sp, #20
   13730:	af00      	add	r7, sp, #0
   13732:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   13734:	68fb      	ldr	r3, [r7, #12]
   13736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1373a:	4618      	mov	r0, r3
   1373c:	4b40      	ldr	r3, [pc, #256]	; (13840 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0x114>)
   1373e:	4798      	blx	r3
   13740:	4603      	mov	r3, r0
   13742:	461a      	mov	r2, r3
   13744:	68fb      	ldr	r3, [r7, #12]
   13746:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   1374a:	68fb      	ldr	r3, [r7, #12]
   1374c:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
   13750:	68fb      	ldr	r3, [r7, #12]
   13752:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.setPointPosition=setpoint;
   13756:	68fb      	ldr	r3, [r7, #12]
   13758:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
   1375c:	68fb      	ldr	r3, [r7, #12]
   1375e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   13762:	68fb      	ldr	r3, [r7, #12]
   13764:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   13768:	68fc      	ldr	r4, [r7, #12]
   1376a:	463b      	mov	r3, r7
   1376c:	4611      	mov	r1, r2
   1376e:	4618      	mov	r0, r3
   13770:	4b34      	ldr	r3, [pc, #208]	; (13844 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0x118>)
   13772:	4798      	blx	r3
   13774:	f104 0388 	add.w	r3, r4, #136	; 0x88
   13778:	463a      	mov	r2, r7
   1377a:	6810      	ldr	r0, [r2, #0]
   1377c:	6018      	str	r0, [r3, #0]
   1377e:	8892      	ldrh	r2, [r2, #4]
   13780:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   13782:	68fb      	ldr	r3, [r7, #12]
   13784:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   13788:	68fc      	ldr	r4, [r7, #12]
   1378a:	463b      	mov	r3, r7
   1378c:	4611      	mov	r1, r2
   1378e:	4618      	mov	r0, r3
   13790:	4b2d      	ldr	r3, [pc, #180]	; (13848 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0x11c>)
   13792:	4798      	blx	r3
   13794:	f104 038e 	add.w	r3, r4, #142	; 0x8e
   13798:	463a      	mov	r2, r7
   1379a:	6811      	ldr	r1, [r2, #0]
   1379c:	6852      	ldr	r2, [r2, #4]
   1379e:	6019      	str	r1, [r3, #0]
   137a0:	605a      	str	r2, [r3, #4]
	
//	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
	dataStruct.controllerStatus.isDriverON=is_motor_on;
   137a2:	68fb      	ldr	r3, [r7, #12]
   137a4:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   137a8:	68fb      	ldr	r3, [r7, #12]
   137aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.controllerStatus.isControlling=isControlling;
   137ae:	68fb      	ldr	r3, [r7, #12]
   137b0:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
   137b4:	68fb      	ldr	r3, [r7, #12]
   137b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   137ba:	68fb      	ldr	r3, [r7, #12]
   137bc:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   137c0:	68fb      	ldr	r3, [r7, #12]
   137c2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dataStruct.controllerStatus.is_flapper_OK=isOK;
   137c6:	68fb      	ldr	r3, [r7, #12]
   137c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   137cc:	b2da      	uxtb	r2, r3
   137ce:	68fb      	ldr	r3, [r7, #12]
   137d0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	dataStruct.controllerStatus.is_stand_alone=IsStandAloneMode();
   137d4:	68f8      	ldr	r0, [r7, #12]
   137d6:	4b1d      	ldr	r3, [pc, #116]	; (1384c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0x120>)
   137d8:	4798      	blx	r3
   137da:	4603      	mov	r3, r0
   137dc:	461a      	mov	r2, r3
   137de:	68fb      	ldr	r3, [r7, #12]
   137e0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	dataStruct.controllerStatus.got_setpoint=gotSetpoint;
   137e4:	68fb      	ldr	r3, [r7, #12]
   137e6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
   137ea:	b2da      	uxtb	r2, r3
   137ec:	68fb      	ldr	r3, [r7, #12]
   137ee:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	
	if (standAloneActivated)
   137f2:	68fb      	ldr	r3, [r7, #12]
   137f4:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   137f8:	2b00      	cmp	r3, #0
   137fa:	d00b      	beq.n	13814 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xe8>
	{
		currentMaximum=parameters.flapperValveStandAloneMinimumPosition[valve_ID];
   137fc:	68fb      	ldr	r3, [r7, #12]
   137fe:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   13802:	461a      	mov	r2, r3
   13804:	68fb      	ldr	r3, [r7, #12]
   13806:	4413      	add	r3, r2
   13808:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1380c:	68fb      	ldr	r3, [r7, #12]
   1380e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   13812:	e00a      	b.n	1382a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xfe>
	} 
	else
	{
		currentMaximum=parameters.flapperValveMinimumPosition[valve_ID];
   13814:	68fb      	ldr	r3, [r7, #12]
   13816:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1381a:	461a      	mov	r2, r3
   1381c:	68fb      	ldr	r3, [r7, #12]
   1381e:	4413      	add	r3, r2
   13820:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   13824:	68fb      	ldr	r3, [r7, #12]
   13826:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	}
	FillPositionsFIFO(currentPosition);
   1382a:	68fb      	ldr	r3, [r7, #12]
   1382c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
   13830:	4619      	mov	r1, r3
   13832:	68f8      	ldr	r0, [r7, #12]
   13834:	4b06      	ldr	r3, [pc, #24]	; (13850 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0x124>)
   13836:	4798      	blx	r3
}
   13838:	bf00      	nop
   1383a:	3714      	adds	r7, #20
   1383c:	46bd      	mov	sp, r7
   1383e:	bd90      	pop	{r4, r7, pc}
   13840:	00014269 	.word	0x00014269
   13844:	00013fa9 	.word	0x00013fa9
   13848:	00013f51 	.word	0x00013f51
   1384c:	00012c89 	.word	0x00012c89
   13850:	00013855 	.word	0x00013855

00013854 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   13854:	b480      	push	{r7}
   13856:	b085      	sub	sp, #20
   13858:	af00      	add	r7, sp, #0
   1385a:	6078      	str	r0, [r7, #4]
   1385c:	460b      	mov	r3, r1
   1385e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   13860:	2300      	movs	r3, #0
   13862:	73fb      	strb	r3, [r7, #15]
   13864:	7bfb      	ldrb	r3, [r7, #15]
   13866:	2b06      	cmp	r3, #6
   13868:	dc1d      	bgt.n	138a6 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   1386a:	687b      	ldr	r3, [r7, #4]
   1386c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   13870:	461a      	mov	r2, r3
   13872:	687b      	ldr	r3, [r7, #4]
   13874:	3234      	adds	r2, #52	; 0x34
   13876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1387a:	7bfa      	ldrb	r2, [r7, #15]
   1387c:	f1c2 0207 	rsb	r2, r2, #7
   13880:	4413      	add	r3, r2
   13882:	687a      	ldr	r2, [r7, #4]
   13884:	f892 20cf 	ldrb.w	r2, [r2, #207]	; 0xcf
   13888:	4611      	mov	r1, r2
   1388a:	687a      	ldr	r2, [r7, #4]
   1388c:	3134      	adds	r1, #52	; 0x34
   1388e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   13892:	7bf9      	ldrb	r1, [r7, #15]
   13894:	f1c1 0106 	rsb	r1, r1, #6
   13898:	440a      	add	r2, r1
   1389a:	7812      	ldrb	r2, [r2, #0]
   1389c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   1389e:	7bfb      	ldrb	r3, [r7, #15]
   138a0:	3301      	adds	r3, #1
   138a2:	73fb      	strb	r3, [r7, #15]
   138a4:	e7de      	b.n	13864 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   138ac:	461a      	mov	r2, r3
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	3234      	adds	r2, #52	; 0x34
   138b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   138b6:	78fa      	ldrb	r2, [r7, #3]
   138b8:	701a      	strb	r2, [r3, #0]
}
   138ba:	bf00      	nop
   138bc:	3714      	adds	r7, #20
   138be:	46bd      	mov	sp, r7
   138c0:	bc80      	pop	{r7}
   138c2:	4770      	bx	lr

000138c4 <_ZN22FlapperValveController18GetCurrentPositionEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
   138c4:	b580      	push	{r7, lr}
   138c6:	b082      	sub	sp, #8
   138c8:	af00      	add	r7, sp, #0
   138ca:	6078      	str	r0, [r7, #4]
	return singlefv->ReadActualPosition();
   138cc:	687b      	ldr	r3, [r7, #4]
   138ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   138d2:	4618      	mov	r0, r3
   138d4:	4b03      	ldr	r3, [pc, #12]	; (138e4 <_ZN22FlapperValveController18GetCurrentPositionEv+0x20>)
   138d6:	4798      	blx	r3
   138d8:	4603      	mov	r3, r0
}
   138da:	4618      	mov	r0, r3
   138dc:	3708      	adds	r7, #8
   138de:	46bd      	mov	sp, r7
   138e0:	bd80      	pop	{r7, pc}
   138e2:	bf00      	nop
   138e4:	00014269 	.word	0x00014269

000138e8 <_ZN22FlapperValveController8SelftestEv>:

bool	FlapperValveController::Selftest(void){
   138e8:	b590      	push	{r4, r7, lr}
   138ea:	b085      	sub	sp, #20
   138ec:	af00      	add	r7, sp, #0
   138ee:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   138f0:	23b4      	movs	r3, #180	; 0xb4
   138f2:	73fb      	strb	r3, [r7, #15]
		parameters=defaultParameters;
   138f4:	687b      	ldr	r3, [r7, #4]
   138f6:	4a8f      	ldr	r2, [pc, #572]	; (13b34 <_ZN22FlapperValveController8SelftestEv+0x24c>)
   138f8:	33cb      	adds	r3, #203	; 0xcb
   138fa:	6812      	ldr	r2, [r2, #0]
   138fc:	601a      	str	r2, [r3, #0]
		uint8_t localPosition;
		bool must_be_tested=true;
   138fe:	2301      	movs	r3, #1
   13900:	737b      	strb	r3, [r7, #13]
	UpdateFlapperValveData();
   13902:	6878      	ldr	r0, [r7, #4]
   13904:	4b8c      	ldr	r3, [pc, #560]	; (13b38 <_ZN22FlapperValveController8SelftestEv+0x250>)
   13906:	4798      	blx	r3
	singlefv->SetEnable(false);
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1390e:	2100      	movs	r1, #0
   13910:	4618      	mov	r0, r3
   13912:	4b8a      	ldr	r3, [pc, #552]	; (13b3c <_ZN22FlapperValveController8SelftestEv+0x254>)
   13914:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   13916:	687b      	ldr	r3, [r7, #4]
   13918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1391c:	2100      	movs	r1, #0
   1391e:	4618      	mov	r0, r3
   13920:	4b87      	ldr	r3, [pc, #540]	; (13b40 <_ZN22FlapperValveController8SelftestEv+0x258>)
   13922:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   13924:	687b      	ldr	r3, [r7, #4]
   13926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1392a:	2100      	movs	r1, #0
   1392c:	4618      	mov	r0, r3
   1392e:	4b85      	ldr	r3, [pc, #532]	; (13b44 <_ZN22FlapperValveController8SelftestEv+0x25c>)
   13930:	4798      	blx	r3
	delay_ms(10);
   13932:	200a      	movs	r0, #10
   13934:	4b84      	ldr	r3, [pc, #528]	; (13b48 <_ZN22FlapperValveController8SelftestEv+0x260>)
   13936:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   13938:	687b      	ldr	r3, [r7, #4]
   1393a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1393e:	2101      	movs	r1, #1
   13940:	4618      	mov	r0, r3
   13942:	4b80      	ldr	r3, [pc, #512]	; (13b44 <_ZN22FlapperValveController8SelftestEv+0x25c>)
   13944:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   13946:	687b      	ldr	r3, [r7, #4]
   13948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1394c:	7bfa      	ldrb	r2, [r7, #15]
   1394e:	4611      	mov	r1, r2
   13950:	4618      	mov	r0, r3
   13952:	4b7e      	ldr	r3, [pc, #504]	; (13b4c <_ZN22FlapperValveController8SelftestEv+0x264>)
   13954:	4798      	blx	r3
	singlefv->SetDirection(false);
   13956:	687b      	ldr	r3, [r7, #4]
   13958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1395c:	2100      	movs	r1, #0
   1395e:	4618      	mov	r0, r3
   13960:	4b7b      	ldr	r3, [pc, #492]	; (13b50 <_ZN22FlapperValveController8SelftestEv+0x268>)
   13962:	4798      	blx	r3

	
		if (valve_ID==0)
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1396a:	2b00      	cmp	r3, #0
   1396c:	d106      	bne.n	1397c <_ZN22FlapperValveController8SelftestEv+0x94>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   1396e:	f242 7210 	movw	r2, #10000	; 0x2710
   13972:	4978      	ldr	r1, [pc, #480]	; (13b54 <_ZN22FlapperValveController8SelftestEv+0x26c>)
   13974:	4878      	ldr	r0, [pc, #480]	; (13b58 <_ZN22FlapperValveController8SelftestEv+0x270>)
   13976:	4b79      	ldr	r3, [pc, #484]	; (13b5c <_ZN22FlapperValveController8SelftestEv+0x274>)
   13978:	4798      	blx	r3
   1397a:	e005      	b.n	13988 <_ZN22FlapperValveController8SelftestEv+0xa0>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   1397c:	f242 7210 	movw	r2, #10000	; 0x2710
   13980:	4977      	ldr	r1, [pc, #476]	; (13b60 <_ZN22FlapperValveController8SelftestEv+0x278>)
   13982:	4875      	ldr	r0, [pc, #468]	; (13b58 <_ZN22FlapperValveController8SelftestEv+0x270>)
   13984:	4b75      	ldr	r3, [pc, #468]	; (13b5c <_ZN22FlapperValveController8SelftestEv+0x274>)
   13986:	4798      	blx	r3
		}
	

		localPosition=singlefv->ReadActualPosition();
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1398e:	4618      	mov	r0, r3
   13990:	4b74      	ldr	r3, [pc, #464]	; (13b64 <_ZN22FlapperValveController8SelftestEv+0x27c>)
   13992:	4798      	blx	r3
   13994:	4603      	mov	r3, r0
   13996:	73bb      	strb	r3, [r7, #14]
		if ((abs(localPosition-localSetpoint)<(12+1)))
   13998:	7bba      	ldrb	r2, [r7, #14]
   1399a:	7bfb      	ldrb	r3, [r7, #15]
   1399c:	1ad3      	subs	r3, r2, r3
   1399e:	2b00      	cmp	r3, #0
   139a0:	bfb8      	it	lt
   139a2:	425b      	neglt	r3, r3
   139a4:	2b0c      	cmp	r3, #12
   139a6:	dc32      	bgt.n	13a0e <_ZN22FlapperValveController8SelftestEv+0x126>
		{
		
#ifdef ATP_TEST
	
		
			if (valve_ID==0)
   139a8:	687b      	ldr	r3, [r7, #4]
   139aa:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   139ae:	2b00      	cmp	r3, #0
   139b0:	d105      	bne.n	139be <_ZN22FlapperValveController8SelftestEv+0xd6>
			{
				localSetpoint-=64;
   139b2:	7bfb      	ldrb	r3, [r7, #15]
   139b4:	3b40      	subs	r3, #64	; 0x40
   139b6:	73fb      	strb	r3, [r7, #15]
				must_be_tested=true;
   139b8:	2301      	movs	r3, #1
   139ba:	737b      	strb	r3, [r7, #13]
   139bc:	e053      	b.n	13a66 <_ZN22FlapperValveController8SelftestEv+0x17e>
			}else{
				if ((abs(localPosition-ptrFlapperValveController[0]->GetCurrentPosition())<(6)))
   139be:	7bbc      	ldrb	r4, [r7, #14]
   139c0:	4b69      	ldr	r3, [pc, #420]	; (13b68 <_ZN22FlapperValveController8SelftestEv+0x280>)
   139c2:	681b      	ldr	r3, [r3, #0]
   139c4:	4618      	mov	r0, r3
   139c6:	4b69      	ldr	r3, [pc, #420]	; (13b6c <_ZN22FlapperValveController8SelftestEv+0x284>)
   139c8:	4798      	blx	r3
   139ca:	4603      	mov	r3, r0
   139cc:	1ae3      	subs	r3, r4, r3
   139ce:	2b00      	cmp	r3, #0
   139d0:	dd08      	ble.n	139e4 <_ZN22FlapperValveController8SelftestEv+0xfc>
   139d2:	7bbc      	ldrb	r4, [r7, #14]
   139d4:	4b64      	ldr	r3, [pc, #400]	; (13b68 <_ZN22FlapperValveController8SelftestEv+0x280>)
   139d6:	681b      	ldr	r3, [r3, #0]
   139d8:	4618      	mov	r0, r3
   139da:	4b64      	ldr	r3, [pc, #400]	; (13b6c <_ZN22FlapperValveController8SelftestEv+0x284>)
   139dc:	4798      	blx	r3
   139de:	4603      	mov	r3, r0
   139e0:	1ae3      	subs	r3, r4, r3
   139e2:	e008      	b.n	139f6 <_ZN22FlapperValveController8SelftestEv+0x10e>
   139e4:	4b60      	ldr	r3, [pc, #384]	; (13b68 <_ZN22FlapperValveController8SelftestEv+0x280>)
   139e6:	681b      	ldr	r3, [r3, #0]
   139e8:	4618      	mov	r0, r3
   139ea:	4b60      	ldr	r3, [pc, #384]	; (13b6c <_ZN22FlapperValveController8SelftestEv+0x284>)
   139ec:	4798      	blx	r3
   139ee:	4603      	mov	r3, r0
   139f0:	461a      	mov	r2, r3
   139f2:	7bbb      	ldrb	r3, [r7, #14]
   139f4:	1ad3      	subs	r3, r2, r3
   139f6:	2b05      	cmp	r3, #5
   139f8:	bfd4      	ite	le
   139fa:	2301      	movle	r3, #1
   139fc:	2300      	movgt	r3, #0
   139fe:	b2db      	uxtb	r3, r3
   13a00:	2b00      	cmp	r3, #0
   13a02:	d030      	beq.n	13a66 <_ZN22FlapperValveController8SelftestEv+0x17e>
				{
					localSetpoint=localPosition;
   13a04:	7bbb      	ldrb	r3, [r7, #14]
   13a06:	73fb      	strb	r3, [r7, #15]
					must_be_tested=false;
   13a08:	2300      	movs	r3, #0
   13a0a:	737b      	strb	r3, [r7, #13]
   13a0c:	e02b      	b.n	13a66 <_ZN22FlapperValveController8SelftestEv+0x17e>
		}
		else
		{
#ifdef ATP_TEST
		
			if (valve_ID==1)
   13a0e:	687b      	ldr	r3, [r7, #4]
   13a10:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   13a14:	2b01      	cmp	r3, #1
   13a16:	d126      	bne.n	13a66 <_ZN22FlapperValveController8SelftestEv+0x17e>
			{
				if ((abs(localPosition-ptrFlapperValveController[0]->GetCurrentPosition())<(6)))
   13a18:	7bbc      	ldrb	r4, [r7, #14]
   13a1a:	4b53      	ldr	r3, [pc, #332]	; (13b68 <_ZN22FlapperValveController8SelftestEv+0x280>)
   13a1c:	681b      	ldr	r3, [r3, #0]
   13a1e:	4618      	mov	r0, r3
   13a20:	4b52      	ldr	r3, [pc, #328]	; (13b6c <_ZN22FlapperValveController8SelftestEv+0x284>)
   13a22:	4798      	blx	r3
   13a24:	4603      	mov	r3, r0
   13a26:	1ae3      	subs	r3, r4, r3
   13a28:	2b00      	cmp	r3, #0
   13a2a:	dd08      	ble.n	13a3e <_ZN22FlapperValveController8SelftestEv+0x156>
   13a2c:	7bbc      	ldrb	r4, [r7, #14]
   13a2e:	4b4e      	ldr	r3, [pc, #312]	; (13b68 <_ZN22FlapperValveController8SelftestEv+0x280>)
   13a30:	681b      	ldr	r3, [r3, #0]
   13a32:	4618      	mov	r0, r3
   13a34:	4b4d      	ldr	r3, [pc, #308]	; (13b6c <_ZN22FlapperValveController8SelftestEv+0x284>)
   13a36:	4798      	blx	r3
   13a38:	4603      	mov	r3, r0
   13a3a:	1ae3      	subs	r3, r4, r3
   13a3c:	e008      	b.n	13a50 <_ZN22FlapperValveController8SelftestEv+0x168>
   13a3e:	4b4a      	ldr	r3, [pc, #296]	; (13b68 <_ZN22FlapperValveController8SelftestEv+0x280>)
   13a40:	681b      	ldr	r3, [r3, #0]
   13a42:	4618      	mov	r0, r3
   13a44:	4b49      	ldr	r3, [pc, #292]	; (13b6c <_ZN22FlapperValveController8SelftestEv+0x284>)
   13a46:	4798      	blx	r3
   13a48:	4603      	mov	r3, r0
   13a4a:	461a      	mov	r2, r3
   13a4c:	7bbb      	ldrb	r3, [r7, #14]
   13a4e:	1ad3      	subs	r3, r2, r3
   13a50:	2b05      	cmp	r3, #5
   13a52:	bfd4      	ite	le
   13a54:	2301      	movle	r3, #1
   13a56:	2300      	movgt	r3, #0
   13a58:	b2db      	uxtb	r3, r3
   13a5a:	2b00      	cmp	r3, #0
   13a5c:	d003      	beq.n	13a66 <_ZN22FlapperValveController8SelftestEv+0x17e>
				{
					localSetpoint=localPosition;
   13a5e:	7bbb      	ldrb	r3, [r7, #14]
   13a60:	73fb      	strb	r3, [r7, #15]
					must_be_tested=false;
   13a62:	2300      	movs	r3, #0
   13a64:	737b      	strb	r3, [r7, #13]

#endif
			
		}
	
	timeoutFlapperValveController=false;
   13a66:	687b      	ldr	r3, [r7, #4]
   13a68:	2200      	movs	r2, #0
   13a6a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	if (must_be_tested)
   13a6e:	7b7b      	ldrb	r3, [r7, #13]
   13a70:	2b00      	cmp	r3, #0
   13a72:	d048      	beq.n	13b06 <_ZN22FlapperValveController8SelftestEv+0x21e>
	{
		if (localPosition>localSetpoint)
   13a74:	7bba      	ldrb	r2, [r7, #14]
   13a76:	7bfb      	ldrb	r3, [r7, #15]
   13a78:	429a      	cmp	r2, r3
   13a7a:	dd07      	ble.n	13a8c <_ZN22FlapperValveController8SelftestEv+0x1a4>
		{
			singlefv->SetDirection(true);
   13a7c:	687b      	ldr	r3, [r7, #4]
   13a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13a82:	2101      	movs	r1, #1
   13a84:	4618      	mov	r0, r3
   13a86:	4b32      	ldr	r3, [pc, #200]	; (13b50 <_ZN22FlapperValveController8SelftestEv+0x268>)
   13a88:	4798      	blx	r3
   13a8a:	e006      	b.n	13a9a <_ZN22FlapperValveController8SelftestEv+0x1b2>
		}
		else
		{
			singlefv->SetDirection(false);
   13a8c:	687b      	ldr	r3, [r7, #4]
   13a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13a92:	2100      	movs	r1, #0
   13a94:	4618      	mov	r0, r3
   13a96:	4b2e      	ldr	r3, [pc, #184]	; (13b50 <_ZN22FlapperValveController8SelftestEv+0x268>)
   13a98:	4798      	blx	r3
		}
		
		singlefv->SetEnable(true);
   13a9a:	687b      	ldr	r3, [r7, #4]
   13a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13aa0:	2101      	movs	r1, #1
   13aa2:	4618      	mov	r0, r3
   13aa4:	4b25      	ldr	r3, [pc, #148]	; (13b3c <_ZN22FlapperValveController8SelftestEv+0x254>)
   13aa6:	4798      	blx	r3
		while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   13aa8:	7bba      	ldrb	r2, [r7, #14]
   13aaa:	7bfb      	ldrb	r3, [r7, #15]
   13aac:	1ad3      	subs	r3, r2, r3
   13aae:	2b00      	cmp	r3, #0
   13ab0:	bfb8      	it	lt
   13ab2:	425b      	neglt	r3, r3
   13ab4:	2b0c      	cmp	r3, #12
   13ab6:	bfcc      	ite	gt
   13ab8:	2301      	movgt	r3, #1
   13aba:	2300      	movle	r3, #0
   13abc:	b2db      	uxtb	r3, r3
   13abe:	461a      	mov	r2, r3
   13ac0:	687b      	ldr	r3, [r7, #4]
   13ac2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   13ac6:	b2db      	uxtb	r3, r3
   13ac8:	f083 0301 	eor.w	r3, r3, #1
   13acc:	b2db      	uxtb	r3, r3
   13ace:	4013      	ands	r3, r2
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	bf14      	ite	ne
   13ad4:	2301      	movne	r3, #1
   13ad6:	2300      	moveq	r3, #0
   13ad8:	b2db      	uxtb	r3, r3
   13ada:	2b00      	cmp	r3, #0
   13adc:	d008      	beq.n	13af0 <_ZN22FlapperValveController8SelftestEv+0x208>

		{

			localPosition=singlefv->ReadActualPosition();
   13ade:	687b      	ldr	r3, [r7, #4]
   13ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13ae4:	4618      	mov	r0, r3
   13ae6:	4b1f      	ldr	r3, [pc, #124]	; (13b64 <_ZN22FlapperValveController8SelftestEv+0x27c>)
   13ae8:	4798      	blx	r3
   13aea:	4603      	mov	r3, r0
   13aec:	73bb      	strb	r3, [r7, #14]
		while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   13aee:	e7db      	b.n	13aa8 <_ZN22FlapperValveController8SelftestEv+0x1c0>

		}
		RemoveTimeoutTask();
   13af0:	6878      	ldr	r0, [r7, #4]
   13af2:	4b1f      	ldr	r3, [pc, #124]	; (13b70 <_ZN22FlapperValveController8SelftestEv+0x288>)
   13af4:	4798      	blx	r3

		singlefv->SetEnable(false);
   13af6:	687b      	ldr	r3, [r7, #4]
   13af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   13afc:	2100      	movs	r1, #0
   13afe:	4618      	mov	r0, r3
   13b00:	4b0e      	ldr	r3, [pc, #56]	; (13b3c <_ZN22FlapperValveController8SelftestEv+0x254>)
   13b02:	4798      	blx	r3
   13b04:	e003      	b.n	13b0e <_ZN22FlapperValveController8SelftestEv+0x226>
	} 
	else
	{
		gotSetpoint=true;
   13b06:	687b      	ldr	r3, [r7, #4]
   13b08:	2201      	movs	r2, #1
   13b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	}
	gotSetpoint=!timeoutFlapperValveController;
   13b0e:	687b      	ldr	r3, [r7, #4]
   13b10:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   13b14:	b2db      	uxtb	r3, r3
   13b16:	f083 0301 	eor.w	r3, r3, #1
   13b1a:	b2da      	uxtb	r2, r3
   13b1c:	687b      	ldr	r3, [r7, #4]
   13b1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	return gotSetpoint;
   13b22:	687b      	ldr	r3, [r7, #4]
   13b24:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
   13b28:	b2db      	uxtb	r3, r3
}
   13b2a:	4618      	mov	r0, r3
   13b2c:	3714      	adds	r7, #20
   13b2e:	46bd      	mov	sp, r7
   13b30:	bd90      	pop	{r4, r7, pc}
   13b32:	bf00      	nop
   13b34:	0001baa4 	.word	0x0001baa4
   13b38:	0001372d 	.word	0x0001372d
   13b3c:	00014005 	.word	0x00014005
   13b40:	00014175 	.word	0x00014175
   13b44:	000140fd 	.word	0x000140fd
   13b48:	000036c9 	.word	0x000036c9
   13b4c:	000141ed 	.word	0x000141ed
   13b50:	00014085 	.word	0x00014085
   13b54:	0001270d 	.word	0x0001270d
   13b58:	200054c4 	.word	0x200054c4
   13b5c:	000107b9 	.word	0x000107b9
   13b60:	00012739 	.word	0x00012739
   13b64:	00014269 	.word	0x00014269
   13b68:	20005594 	.word	0x20005594
   13b6c:	000138c5 	.word	0x000138c5
   13b70:	00013b75 	.word	0x00013b75

00013b74 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:


void	FlapperValveController::RemoveTimeoutTask(void){
   13b74:	b580      	push	{r7, lr}
   13b76:	b082      	sub	sp, #8
   13b78:	af00      	add	r7, sp, #0
   13b7a:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   13b7c:	687b      	ldr	r3, [r7, #4]
   13b7e:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   13b82:	2b00      	cmp	r3, #0
   13b84:	d104      	bne.n	13b90 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   13b86:	4906      	ldr	r1, [pc, #24]	; (13ba0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   13b88:	4806      	ldr	r0, [pc, #24]	; (13ba4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   13b8a:	4b07      	ldr	r3, [pc, #28]	; (13ba8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   13b8c:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   13b8e:	e003      	b.n	13b98 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   13b90:	4906      	ldr	r1, [pc, #24]	; (13bac <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   13b92:	4804      	ldr	r0, [pc, #16]	; (13ba4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   13b94:	4b04      	ldr	r3, [pc, #16]	; (13ba8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   13b96:	4798      	blx	r3
}
   13b98:	bf00      	nop
   13b9a:	3708      	adds	r7, #8
   13b9c:	46bd      	mov	sp, r7
   13b9e:	bd80      	pop	{r7, pc}
   13ba0:	0001270d 	.word	0x0001270d
   13ba4:	200054c4 	.word	0x200054c4
   13ba8:	00010761 	.word	0x00010761
   13bac:	00012739 	.word	0x00012739

00013bb0 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   13bb0:	b590      	push	{r4, r7, lr}
   13bb2:	b083      	sub	sp, #12
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	6078      	str	r0, [r7, #4]
   13bb8:	4c05      	ldr	r4, [pc, #20]	; (13bd0 <__tcf_0+0x20>)
   13bba:	4b06      	ldr	r3, [pc, #24]	; (13bd4 <__tcf_0+0x24>)
   13bbc:	429c      	cmp	r4, r3
   13bbe:	d004      	beq.n	13bca <__tcf_0+0x1a>
   13bc0:	3c7c      	subs	r4, #124	; 0x7c
   13bc2:	4620      	mov	r0, r4
   13bc4:	4b04      	ldr	r3, [pc, #16]	; (13bd8 <__tcf_0+0x28>)
   13bc6:	4798      	blx	r3
   13bc8:	e7f7      	b.n	13bba <__tcf_0+0xa>
   13bca:	370c      	adds	r7, #12
   13bcc:	46bd      	mov	sp, r7
   13bce:	bd90      	pop	{r4, r7, pc}
   13bd0:	20005694 	.word	0x20005694
   13bd4:	2000559c 	.word	0x2000559c
   13bd8:	00013da9 	.word	0x00013da9

00013bdc <_Z41__static_initialization_and_destruction_0ii>:

   13bdc:	b5b0      	push	{r4, r5, r7, lr}
   13bde:	b082      	sub	sp, #8
   13be0:	af00      	add	r7, sp, #0
   13be2:	6078      	str	r0, [r7, #4]
   13be4:	6039      	str	r1, [r7, #0]
   13be6:	687b      	ldr	r3, [r7, #4]
   13be8:	2b01      	cmp	r3, #1
   13bea:	d16d      	bne.n	13cc8 <_Z41__static_initialization_and_destruction_0ii+0xec>
   13bec:	683b      	ldr	r3, [r7, #0]
   13bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13bf2:	4293      	cmp	r3, r2
   13bf4:	d168      	bne.n	13cc8 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   13bf6:	4936      	ldr	r1, [pc, #216]	; (13cd0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   13bf8:	4836      	ldr	r0, [pc, #216]	; (13cd4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13bfa:	4b37      	ldr	r3, [pc, #220]	; (13cd8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   13bfc:	4798      	blx	r3
   13bfe:	4a37      	ldr	r2, [pc, #220]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c00:	4937      	ldr	r1, [pc, #220]	; (13ce0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   13c02:	4834      	ldr	r0, [pc, #208]	; (13cd4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13c04:	4b37      	ldr	r3, [pc, #220]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c06:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   13c08:	4937      	ldr	r1, [pc, #220]	; (13ce8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   13c0a:	4838      	ldr	r0, [pc, #224]	; (13cec <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13c0c:	4b38      	ldr	r3, [pc, #224]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c0e:	4798      	blx	r3
   13c10:	4a32      	ldr	r2, [pc, #200]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c12:	4938      	ldr	r1, [pc, #224]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c14:	4835      	ldr	r0, [pc, #212]	; (13cec <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13c16:	4b33      	ldr	r3, [pc, #204]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c18:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13c1a:	4937      	ldr	r1, [pc, #220]	; (13cf8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13c1c:	4837      	ldr	r0, [pc, #220]	; (13cfc <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13c1e:	4b34      	ldr	r3, [pc, #208]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c20:	4798      	blx	r3
   13c22:	4a2e      	ldr	r2, [pc, #184]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c24:	4933      	ldr	r1, [pc, #204]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c26:	4835      	ldr	r0, [pc, #212]	; (13cfc <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13c28:	4b2e      	ldr	r3, [pc, #184]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c2a:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13c2c:	4934      	ldr	r1, [pc, #208]	; (13d00 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   13c2e:	4835      	ldr	r0, [pc, #212]	; (13d04 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13c30:	4b2f      	ldr	r3, [pc, #188]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c32:	4798      	blx	r3
   13c34:	4a29      	ldr	r2, [pc, #164]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c36:	492f      	ldr	r1, [pc, #188]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c38:	4832      	ldr	r0, [pc, #200]	; (13d04 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13c3a:	4b2a      	ldr	r3, [pc, #168]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c3c:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   13c3e:	4932      	ldr	r1, [pc, #200]	; (13d08 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13c40:	4832      	ldr	r0, [pc, #200]	; (13d0c <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13c42:	4b2b      	ldr	r3, [pc, #172]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c44:	4798      	blx	r3
   13c46:	4a25      	ldr	r2, [pc, #148]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c48:	492a      	ldr	r1, [pc, #168]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c4a:	4830      	ldr	r0, [pc, #192]	; (13d0c <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13c4c:	4b25      	ldr	r3, [pc, #148]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c4e:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   13c50:	492f      	ldr	r1, [pc, #188]	; (13d10 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   13c52:	4830      	ldr	r0, [pc, #192]	; (13d14 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13c54:	4b26      	ldr	r3, [pc, #152]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c56:	4798      	blx	r3
   13c58:	4a20      	ldr	r2, [pc, #128]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c5a:	4926      	ldr	r1, [pc, #152]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c5c:	482d      	ldr	r0, [pc, #180]	; (13d14 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13c5e:	4b21      	ldr	r3, [pc, #132]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c60:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   13c62:	492d      	ldr	r1, [pc, #180]	; (13d18 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   13c64:	482d      	ldr	r0, [pc, #180]	; (13d1c <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13c66:	4b22      	ldr	r3, [pc, #136]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c68:	4798      	blx	r3
   13c6a:	4a1c      	ldr	r2, [pc, #112]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c6c:	4921      	ldr	r1, [pc, #132]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c6e:	482b      	ldr	r0, [pc, #172]	; (13d1c <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13c70:	4b1c      	ldr	r3, [pc, #112]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c72:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   13c74:	492a      	ldr	r1, [pc, #168]	; (13d20 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   13c76:	482b      	ldr	r0, [pc, #172]	; (13d24 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13c78:	4b1d      	ldr	r3, [pc, #116]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c7a:	4798      	blx	r3
   13c7c:	4a17      	ldr	r2, [pc, #92]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c7e:	491d      	ldr	r1, [pc, #116]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c80:	4828      	ldr	r0, [pc, #160]	; (13d24 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13c82:	4b18      	ldr	r3, [pc, #96]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c84:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   13c86:	4928      	ldr	r1, [pc, #160]	; (13d28 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   13c88:	4828      	ldr	r0, [pc, #160]	; (13d2c <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13c8a:	4b19      	ldr	r3, [pc, #100]	; (13cf0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13c8c:	4798      	blx	r3
   13c8e:	4a13      	ldr	r2, [pc, #76]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13c90:	4918      	ldr	r1, [pc, #96]	; (13cf4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13c92:	4826      	ldr	r0, [pc, #152]	; (13d2c <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13c94:	4b13      	ldr	r3, [pc, #76]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13c96:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   13c98:	4b25      	ldr	r3, [pc, #148]	; (13d30 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   13c9a:	2401      	movs	r4, #1
   13c9c:	461d      	mov	r5, r3
   13c9e:	2c00      	cmp	r4, #0
   13ca0:	db05      	blt.n	13cae <_Z41__static_initialization_and_destruction_0ii+0xd2>
   13ca2:	4628      	mov	r0, r5
   13ca4:	4b23      	ldr	r3, [pc, #140]	; (13d34 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13ca6:	4798      	blx	r3
   13ca8:	357c      	adds	r5, #124	; 0x7c
   13caa:	3c01      	subs	r4, #1
   13cac:	e7f7      	b.n	13c9e <_Z41__static_initialization_and_destruction_0ii+0xc2>
   13cae:	4a0b      	ldr	r2, [pc, #44]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13cb0:	4921      	ldr	r1, [pc, #132]	; (13d38 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   13cb2:	2000      	movs	r0, #0
   13cb4:	4b0b      	ldr	r3, [pc, #44]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13cb6:	4798      	blx	r3
   13cb8:	4820      	ldr	r0, [pc, #128]	; (13d3c <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13cba:	4b21      	ldr	r3, [pc, #132]	; (13d40 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   13cbc:	4798      	blx	r3
   13cbe:	4a07      	ldr	r2, [pc, #28]	; (13cdc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13cc0:	4920      	ldr	r1, [pc, #128]	; (13d44 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13cc2:	481e      	ldr	r0, [pc, #120]	; (13d3c <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13cc4:	4b07      	ldr	r3, [pc, #28]	; (13ce4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13cc6:	4798      	blx	r3
   13cc8:	bf00      	nop
   13cca:	3708      	adds	r7, #8
   13ccc:	46bd      	mov	sp, r7
   13cce:	bdb0      	pop	{r4, r5, r7, pc}
   13cd0:	2000e088 	.word	0x2000e088
   13cd4:	2000546c 	.word	0x2000546c
   13cd8:	0000fcb5 	.word	0x0000fcb5
   13cdc:	20000000 	.word	0x20000000
   13ce0:	0000fcd1 	.word	0x0000fcd1
   13ce4:	0001ab61 	.word	0x0001ab61
   13ce8:	2000df58 	.word	0x2000df58
   13cec:	20005484 	.word	0x20005484
   13cf0:	000104e5 	.word	0x000104e5
   13cf4:	0001051d 	.word	0x0001051d
   13cf8:	2000dfec 	.word	0x2000dfec
   13cfc:	200054a4 	.word	0x200054a4
   13d00:	2000e110 	.word	0x2000e110
   13d04:	200054c4 	.word	0x200054c4
   13d08:	2000e00c 	.word	0x2000e00c
   13d0c:	200054e4 	.word	0x200054e4
   13d10:	2000e0d0 	.word	0x2000e0d0
   13d14:	20005504 	.word	0x20005504
   13d18:	2000e0f0 	.word	0x2000e0f0
   13d1c:	20005524 	.word	0x20005524
   13d20:	2000dfc8 	.word	0x2000dfc8
   13d24:	20005544 	.word	0x20005544
   13d28:	2000e068 	.word	0x2000e068
   13d2c:	20005564 	.word	0x20005564
   13d30:	2000559c 	.word	0x2000559c
   13d34:	00013d5d 	.word	0x00013d5d
   13d38:	00013bb1 	.word	0x00013bb1
   13d3c:	20005694 	.word	0x20005694
   13d40:	000127e5 	.word	0x000127e5
   13d44:	00012879 	.word	0x00012879

00013d48 <_GLOBAL__sub_I_ptrFlapperValveController>:
   13d48:	b580      	push	{r7, lr}
   13d4a:	af00      	add	r7, sp, #0
   13d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13d50:	2001      	movs	r0, #1
   13d52:	4b01      	ldr	r3, [pc, #4]	; (13d58 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   13d54:	4798      	blx	r3
   13d56:	bd80      	pop	{r7, pc}
   13d58:	00013bdd 	.word	0x00013bdd

00013d5c <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   13d5c:	b580      	push	{r7, lr}
   13d5e:	b082      	sub	sp, #8
   13d60:	af00      	add	r7, sp, #0
   13d62:	6078      	str	r0, [r7, #4]
   13d64:	687b      	ldr	r3, [r7, #4]
   13d66:	4618      	mov	r0, r3
   13d68:	4b0c      	ldr	r3, [pc, #48]	; (13d9c <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   13d6a:	4798      	blx	r3
{
	valveID=0;
   13d6c:	687b      	ldr	r3, [r7, #4]
   13d6e:	2200      	movs	r2, #0
   13d70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	i2c=&i2cStatic;
   13d74:	687b      	ldr	r3, [r7, #4]
   13d76:	4a0a      	ldr	r2, [pc, #40]	; (13da0 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   13d78:	651a      	str	r2, [r3, #80]	; 0x50
	fv1StatusChanged=false;
   13d7a:	687b      	ldr	r3, [r7, #4]
   13d7c:	2200      	movs	r2, #0
   13d7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	ptrSingleFlapperValveClass=this;
   13d82:	4a08      	ldr	r2, [pc, #32]	; (13da4 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   13d84:	687b      	ldr	r3, [r7, #4]
   13d86:	6013      	str	r3, [r2, #0]
	isOK=false;
   13d88:	687b      	ldr	r3, [r7, #4]
   13d8a:	2200      	movs	r2, #0
   13d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
} //FlapperValve_Class
   13d90:	687b      	ldr	r3, [r7, #4]
   13d92:	4618      	mov	r0, r3
   13d94:	3708      	adds	r7, #8
   13d96:	46bd      	mov	sp, r7
   13d98:	bd80      	pop	{r7, pc}
   13d9a:	bf00      	nop
   13d9c:	00018c41 	.word	0x00018c41
   13da0:	20005890 	.word	0x20005890
   13da4:	2000588c 	.word	0x2000588c

00013da8 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   13da8:	b580      	push	{r7, lr}
   13daa:	b082      	sub	sp, #8
   13dac:	af00      	add	r7, sp, #0
   13dae:	6078      	str	r0, [r7, #4]
   13db0:	687b      	ldr	r3, [r7, #4]
   13db2:	4618      	mov	r0, r3
   13db4:	4b03      	ldr	r3, [pc, #12]	; (13dc4 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   13db6:	4798      	blx	r3
{
} //~FlapperValve_Class
   13db8:	687b      	ldr	r3, [r7, #4]
   13dba:	4618      	mov	r0, r3
   13dbc:	3708      	adds	r7, #8
   13dbe:	46bd      	mov	sp, r7
   13dc0:	bd80      	pop	{r7, pc}
   13dc2:	bf00      	nop
   13dc4:	00018c55 	.word	0x00018c55

00013dc8 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   13dc8:	b590      	push	{r4, r7, lr}
   13dca:	b083      	sub	sp, #12
   13dcc:	af00      	add	r7, sp, #0
   13dce:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
   13dd0:	687b      	ldr	r3, [r7, #4]
   13dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13dd4:	7a1b      	ldrb	r3, [r3, #8]
   13dd6:	b2db      	uxtb	r3, r3
   13dd8:	2b00      	cmp	r3, #0
   13dda:	d10f      	bne.n	13dfc <_ZN24SingleFlapperValve_Class4InitEv+0x34>
	{
	} 
	else
	{
		i2c->Init();
   13ddc:	687b      	ldr	r3, [r7, #4]
   13dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13de0:	4618      	mov	r0, r3
   13de2:	4b26      	ldr	r3, [pc, #152]	; (13e7c <_ZN24SingleFlapperValve_Class4InitEv+0xb4>)
   13de4:	4798      	blx	r3
		logger.SaveEventIndexEnable("I2C Flapper Valve ", valveID,i2c->isOK);
   13de6:	687b      	ldr	r3, [r7, #4]
   13de8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   13dec:	687b      	ldr	r3, [r7, #4]
   13dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13df0:	7a5b      	ldrb	r3, [r3, #9]
   13df2:	b2db      	uxtb	r3, r3
   13df4:	4922      	ldr	r1, [pc, #136]	; (13e80 <_ZN24SingleFlapperValve_Class4InitEv+0xb8>)
   13df6:	4823      	ldr	r0, [pc, #140]	; (13e84 <_ZN24SingleFlapperValve_Class4InitEv+0xbc>)
   13df8:	4c23      	ldr	r4, [pc, #140]	; (13e88 <_ZN24SingleFlapperValve_Class4InitEv+0xc0>)
   13dfa:	47a0      	blx	r4

	}
		

		if (i2c->isOK)
   13dfc:	687b      	ldr	r3, [r7, #4]
   13dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13e00:	7a5b      	ldrb	r3, [r3, #9]
   13e02:	b2db      	uxtb	r3, r3
   13e04:	2b00      	cmp	r3, #0
   13e06:	d029      	beq.n	13e5c <_ZN24SingleFlapperValve_Class4InitEv+0x94>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   13e08:	687b      	ldr	r3, [r7, #4]
   13e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   13e0e:	4619      	mov	r1, r3
   13e10:	6878      	ldr	r0, [r7, #4]
   13e12:	4b1e      	ldr	r3, [pc, #120]	; (13e8c <_ZN24SingleFlapperValve_Class4InitEv+0xc4>)
   13e14:	4798      	blx	r3
			expanders[0]->SetPortInput();
   13e16:	687b      	ldr	r3, [r7, #4]
   13e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13e1a:	4618      	mov	r0, r3
   13e1c:	4b1c      	ldr	r3, [pc, #112]	; (13e90 <_ZN24SingleFlapperValve_Class4InitEv+0xc8>)
   13e1e:	4798      	blx	r3
			expanders[0]->SetChangeInterruptPins(0xf9,false);
   13e20:	687b      	ldr	r3, [r7, #4]
   13e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13e24:	2200      	movs	r2, #0
   13e26:	21f9      	movs	r1, #249	; 0xf9
   13e28:	4618      	mov	r0, r3
   13e2a:	4b1a      	ldr	r3, [pc, #104]	; (13e94 <_ZN24SingleFlapperValve_Class4InitEv+0xcc>)
   13e2c:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
   13e2e:	687b      	ldr	r3, [r7, #4]
   13e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13e32:	2182      	movs	r1, #130	; 0x82
   13e34:	4618      	mov	r0, r3
   13e36:	4b18      	ldr	r3, [pc, #96]	; (13e98 <_ZN24SingleFlapperValve_Class4InitEv+0xd0>)
   13e38:	4798      	blx	r3
			expanders[1]->SetChangeInterruptPins(0x9e,false);
   13e3a:	687b      	ldr	r3, [r7, #4]
   13e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13e3e:	2200      	movs	r2, #0
   13e40:	219e      	movs	r1, #158	; 0x9e
   13e42:	4618      	mov	r0, r3
   13e44:	4b13      	ldr	r3, [pc, #76]	; (13e94 <_ZN24SingleFlapperValve_Class4InitEv+0xcc>)
   13e46:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   13e48:	687b      	ldr	r3, [r7, #4]
   13e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13e4c:	4618      	mov	r0, r3
   13e4e:	4b13      	ldr	r3, [pc, #76]	; (13e9c <_ZN24SingleFlapperValve_Class4InitEv+0xd4>)
   13e50:	4798      	blx	r3
			expanders[3]->SetPortInput();
   13e52:	687b      	ldr	r3, [r7, #4]
   13e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   13e56:	4618      	mov	r0, r3
   13e58:	4b0d      	ldr	r3, [pc, #52]	; (13e90 <_ZN24SingleFlapperValve_Class4InitEv+0xc8>)
   13e5a:	4798      	blx	r3
			
							
		}else{
			
		}
		isOK=i2c->isOK;
   13e5c:	687b      	ldr	r3, [r7, #4]
   13e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13e60:	7a5b      	ldrb	r3, [r3, #9]
   13e62:	b2da      	uxtb	r2, r3
   13e64:	687b      	ldr	r3, [r7, #4]
   13e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		
		return isOK;
   13e6a:	687b      	ldr	r3, [r7, #4]
   13e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   13e70:	b2db      	uxtb	r3, r3


}
   13e72:	4618      	mov	r0, r3
   13e74:	370c      	adds	r7, #12
   13e76:	46bd      	mov	sp, r7
   13e78:	bd90      	pop	{r4, r7, pc}
   13e7a:	bf00      	nop
   13e7c:	0000fce5 	.word	0x0000fce5
   13e80:	0001bbf8 	.word	0x0001bbf8
   13e84:	20003a78 	.word	0x20003a78
   13e88:	00011f21 	.word	0x00011f21
   13e8c:	00013ec9 	.word	0x00013ec9
   13e90:	0001003d 	.word	0x0001003d
   13e94:	00010429 	.word	0x00010429
   13e98:	00010081 	.word	0x00010081
   13e9c:	000100f5 	.word	0x000100f5

00013ea0 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   13ea0:	b580      	push	{r7, lr}
   13ea2:	b082      	sub	sp, #8
   13ea4:	af00      	add	r7, sp, #0
   13ea6:	6078      	str	r0, [r7, #4]
   13ea8:	460b      	mov	r3, r1
   13eaa:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   13eac:	687b      	ldr	r3, [r7, #4]
   13eae:	78fa      	ldrb	r2, [r7, #3]
   13eb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	return Init();
   13eb4:	6878      	ldr	r0, [r7, #4]
   13eb6:	4b03      	ldr	r3, [pc, #12]	; (13ec4 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   13eb8:	4798      	blx	r3
   13eba:	4603      	mov	r3, r0
}
   13ebc:	4618      	mov	r0, r3
   13ebe:	3708      	adds	r7, #8
   13ec0:	46bd      	mov	sp, r7
   13ec2:	bd80      	pop	{r7, pc}
   13ec4:	00013dc9 	.word	0x00013dc9

00013ec8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   13ec8:	b580      	push	{r7, lr}
   13eca:	b084      	sub	sp, #16
   13ecc:	af00      	add	r7, sp, #0
   13ece:	6078      	str	r0, [r7, #4]
   13ed0:	460b      	mov	r3, r1
   13ed2:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13ed4:	2300      	movs	r3, #0
   13ed6:	60fb      	str	r3, [r7, #12]
   13ed8:	68fb      	ldr	r3, [r7, #12]
   13eda:	2b03      	cmp	r3, #3
   13edc:	dc2e      	bgt.n	13f3c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x74>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   13ede:	687b      	ldr	r3, [r7, #4]
   13ee0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   13ee4:	4619      	mov	r1, r3
   13ee6:	68fb      	ldr	r3, [r7, #12]
   13ee8:	461a      	mov	r2, r3
   13eea:	00d2      	lsls	r2, r2, #3
   13eec:	1ad2      	subs	r2, r2, r3
   13eee:	0093      	lsls	r3, r2, #2
   13ef0:	461a      	mov	r2, r3
   13ef2:	460b      	mov	r3, r1
   13ef4:	00db      	lsls	r3, r3, #3
   13ef6:	1a5b      	subs	r3, r3, r1
   13ef8:	011b      	lsls	r3, r3, #4
   13efa:	4413      	add	r3, r2
   13efc:	4a12      	ldr	r2, [pc, #72]	; (13f48 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   13efe:	441a      	add	r2, r3
   13f00:	687b      	ldr	r3, [r7, #4]
   13f02:	66da      	str	r2, [r3, #108]	; 0x6c
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   13f04:	687b      	ldr	r3, [r7, #4]
   13f06:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   13f08:	68fb      	ldr	r3, [r7, #12]
   13f0a:	b2da      	uxtb	r2, r3
   13f0c:	78fb      	ldrb	r3, [r7, #3]
   13f0e:	009b      	lsls	r3, r3, #2
   13f10:	b2db      	uxtb	r3, r3
   13f12:	4413      	add	r3, r2
   13f14:	b2db      	uxtb	r3, r3
   13f16:	3320      	adds	r3, #32
   13f18:	b2d9      	uxtb	r1, r3
   13f1a:	687b      	ldr	r3, [r7, #4]
   13f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13f1e:	461a      	mov	r2, r3
   13f20:	4b0a      	ldr	r3, [pc, #40]	; (13f4c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x84>)
   13f22:	4798      	blx	r3
		expanders[i]=currentExpander;
   13f24:	687b      	ldr	r3, [r7, #4]
   13f26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   13f28:	6879      	ldr	r1, [r7, #4]
   13f2a:	68fb      	ldr	r3, [r7, #12]
   13f2c:	3316      	adds	r3, #22
   13f2e:	009b      	lsls	r3, r3, #2
   13f30:	440b      	add	r3, r1
   13f32:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13f34:	68fb      	ldr	r3, [r7, #12]
   13f36:	3301      	adds	r3, #1
   13f38:	60fb      	str	r3, [r7, #12]
   13f3a:	e7cd      	b.n	13ed8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   13f3c:	2300      	movs	r3, #0
}
   13f3e:	4618      	mov	r0, r3
   13f40:	3710      	adds	r7, #16
   13f42:	46bd      	mov	sp, r7
   13f44:	bd80      	pop	{r7, pc}
   13f46:	bf00      	nop
   13f48:	200058a8 	.word	0x200058a8
   13f4c:	0000fe99 	.word	0x0000fe99

00013f50 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   13f50:	b590      	push	{r4, r7, lr}
   13f52:	b085      	sub	sp, #20
   13f54:	af00      	add	r7, sp, #0
   13f56:	60f8      	str	r0, [r7, #12]
   13f58:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   13f5a:	68bb      	ldr	r3, [r7, #8]
   13f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13f5e:	4618      	mov	r0, r3
   13f60:	4b0f      	ldr	r3, [pc, #60]	; (13fa0 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
   13f62:	4798      	blx	r3
   13f64:	4603      	mov	r3, r0
   13f66:	461a      	mov	r2, r3
   13f68:	68bb      	ldr	r3, [r7, #8]
   13f6a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	controlOutputs=FillControlOutputs(value);
   13f6e:	68b9      	ldr	r1, [r7, #8]
   13f70:	68bb      	ldr	r3, [r7, #8]
   13f72:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   13f76:	68bc      	ldr	r4, [r7, #8]
   13f78:	463b      	mov	r3, r7
   13f7a:	4618      	mov	r0, r3
   13f7c:	4b09      	ldr	r3, [pc, #36]	; (13fa4 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   13f7e:	4798      	blx	r3
   13f80:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13f84:	463a      	mov	r2, r7
   13f86:	6810      	ldr	r0, [r2, #0]
   13f88:	6851      	ldr	r1, [r2, #4]
   13f8a:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
   13f8c:	68fa      	ldr	r2, [r7, #12]
   13f8e:	68bb      	ldr	r3, [r7, #8]
   13f90:	3340      	adds	r3, #64	; 0x40
   13f92:	cb03      	ldmia	r3!, {r0, r1}
   13f94:	6010      	str	r0, [r2, #0]
   13f96:	6051      	str	r1, [r2, #4]
}
   13f98:	68f8      	ldr	r0, [r7, #12]
   13f9a:	3714      	adds	r7, #20
   13f9c:	46bd      	mov	sp, r7
   13f9e:	bd90      	pop	{r4, r7, pc}
   13fa0:	0000ff7d 	.word	0x0000ff7d
   13fa4:	00018d51 	.word	0x00018d51

00013fa8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   13fa8:	b590      	push	{r4, r7, lr}
   13faa:	b085      	sub	sp, #20
   13fac:	af00      	add	r7, sp, #0
   13fae:	60f8      	str	r0, [r7, #12]
   13fb0:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   13fb2:	68bb      	ldr	r3, [r7, #8]
   13fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13fb6:	4618      	mov	r0, r3
   13fb8:	4b10      	ldr	r3, [pc, #64]	; (13ffc <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   13fba:	4798      	blx	r3
   13fbc:	4603      	mov	r3, r0
   13fbe:	461a      	mov	r2, r3
   13fc0:	68bb      	ldr	r3, [r7, #8]
   13fc2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	statusInputs=FillInputStatus(value);
   13fc6:	68b9      	ldr	r1, [r7, #8]
   13fc8:	68bb      	ldr	r3, [r7, #8]
   13fca:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   13fce:	68bc      	ldr	r4, [r7, #8]
   13fd0:	463b      	mov	r3, r7
   13fd2:	4618      	mov	r0, r3
   13fd4:	4b0a      	ldr	r3, [pc, #40]	; (14000 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   13fd6:	4798      	blx	r3
   13fd8:	f104 0348 	add.w	r3, r4, #72	; 0x48
   13fdc:	463a      	mov	r2, r7
   13fde:	6810      	ldr	r0, [r2, #0]
   13fe0:	6018      	str	r0, [r3, #0]
   13fe2:	8892      	ldrh	r2, [r2, #4]
   13fe4:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   13fe6:	68fa      	ldr	r2, [r7, #12]
   13fe8:	68bb      	ldr	r3, [r7, #8]
   13fea:	3348      	adds	r3, #72	; 0x48
   13fec:	6818      	ldr	r0, [r3, #0]
   13fee:	6010      	str	r0, [r2, #0]
   13ff0:	889b      	ldrh	r3, [r3, #4]
   13ff2:	8093      	strh	r3, [r2, #4]
}
   13ff4:	68f8      	ldr	r0, [r7, #12]
   13ff6:	3714      	adds	r7, #20
   13ff8:	46bd      	mov	sp, r7
   13ffa:	bd90      	pop	{r4, r7, pc}
   13ffc:	0000ff7d 	.word	0x0000ff7d
   14000:	00018cfd 	.word	0x00018cfd

00014004 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   14004:	b580      	push	{r7, lr}
   14006:	b082      	sub	sp, #8
   14008:	af00      	add	r7, sp, #0
   1400a:	6078      	str	r0, [r7, #4]
   1400c:	460b      	mov	r3, r1
   1400e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   14010:	687b      	ldr	r3, [r7, #4]
   14012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   14014:	4618      	mov	r0, r3
   14016:	4b19      	ldr	r3, [pc, #100]	; (1407c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   14018:	4798      	blx	r3
   1401a:	4603      	mov	r3, r0
   1401c:	461a      	mov	r2, r3
   1401e:	687b      	ldr	r3, [r7, #4]
   14020:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	value=b?value|0x01:value&0xfe;
   14024:	78fb      	ldrb	r3, [r7, #3]
   14026:	2b00      	cmp	r3, #0
   14028:	d006      	beq.n	14038 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   1402a:	687b      	ldr	r3, [r7, #4]
   1402c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   14030:	f043 0301 	orr.w	r3, r3, #1
   14034:	b2db      	uxtb	r3, r3
   14036:	e005      	b.n	14044 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   14038:	687b      	ldr	r3, [r7, #4]
   1403a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1403e:	f023 0301 	bic.w	r3, r3, #1
   14042:	b2db      	uxtb	r3, r3
   14044:	687a      	ldr	r2, [r7, #4]
   14046:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
	controlOutputs.niAlcFvMotorEnable=b;
   1404a:	687b      	ldr	r3, [r7, #4]
   1404c:	78fa      	ldrb	r2, [r7, #3]
   1404e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	value=expanders[1]->WriteGPIORegister(value);
   14052:	687b      	ldr	r3, [r7, #4]
   14054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   14056:	687b      	ldr	r3, [r7, #4]
   14058:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1405c:	4619      	mov	r1, r3
   1405e:	4610      	mov	r0, r2
   14060:	4b07      	ldr	r3, [pc, #28]	; (14080 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   14062:	4798      	blx	r3
   14064:	4603      	mov	r3, r0
   14066:	461a      	mov	r2, r3
   14068:	687b      	ldr	r3, [r7, #4]
   1406a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	return value;
   1406e:	687b      	ldr	r3, [r7, #4]
   14070:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
}
   14074:	4618      	mov	r0, r3
   14076:	3708      	adds	r7, #8
   14078:	46bd      	mov	sp, r7
   1407a:	bd80      	pop	{r7, pc}
   1407c:	0000ff7d 	.word	0x0000ff7d
   14080:	00010001 	.word	0x00010001

00014084 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   14084:	b580      	push	{r7, lr}
   14086:	b082      	sub	sp, #8
   14088:	af00      	add	r7, sp, #0
   1408a:	6078      	str	r0, [r7, #4]
   1408c:	460b      	mov	r3, r1
   1408e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   14094:	4618      	mov	r0, r3
   14096:	4b17      	ldr	r3, [pc, #92]	; (140f4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   14098:	4798      	blx	r3
   1409a:	4603      	mov	r3, r0
   1409c:	461a      	mov	r2, r3
   1409e:	687b      	ldr	r3, [r7, #4]
   140a0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	value=b?value|0x20:value&0xdf;
   140a4:	78fb      	ldrb	r3, [r7, #3]
   140a6:	2b00      	cmp	r3, #0
   140a8:	d006      	beq.n	140b8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   140aa:	687b      	ldr	r3, [r7, #4]
   140ac:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   140b0:	f043 0320 	orr.w	r3, r3, #32
   140b4:	b2db      	uxtb	r3, r3
   140b6:	e005      	b.n	140c4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   140b8:	687b      	ldr	r3, [r7, #4]
   140ba:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   140be:	f023 0320 	bic.w	r3, r3, #32
   140c2:	b2db      	uxtb	r3, r3
   140c4:	687a      	ldr	r2, [r7, #4]
   140c6:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
	value=expanders[1]->WriteGPIORegister(value);
   140ca:	687b      	ldr	r3, [r7, #4]
   140cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   140ce:	687b      	ldr	r3, [r7, #4]
   140d0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   140d4:	4619      	mov	r1, r3
   140d6:	4610      	mov	r0, r2
   140d8:	4b07      	ldr	r3, [pc, #28]	; (140f8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   140da:	4798      	blx	r3
   140dc:	4603      	mov	r3, r0
   140de:	461a      	mov	r2, r3
   140e0:	687b      	ldr	r3, [r7, #4]
   140e2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	return value;
   140e6:	687b      	ldr	r3, [r7, #4]
   140e8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
}
   140ec:	4618      	mov	r0, r3
   140ee:	3708      	adds	r7, #8
   140f0:	46bd      	mov	sp, r7
   140f2:	bd80      	pop	{r7, pc}
   140f4:	0000ff7d 	.word	0x0000ff7d
   140f8:	00010001 	.word	0x00010001

000140fc <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   140fc:	b580      	push	{r7, lr}
   140fe:	b082      	sub	sp, #8
   14100:	af00      	add	r7, sp, #0
   14102:	6078      	str	r0, [r7, #4]
   14104:	460b      	mov	r3, r1
   14106:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   14108:	687b      	ldr	r3, [r7, #4]
   1410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1410c:	4618      	mov	r0, r3
   1410e:	4b17      	ldr	r3, [pc, #92]	; (1416c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   14110:	4798      	blx	r3
   14112:	4603      	mov	r3, r0
   14114:	461a      	mov	r2, r3
   14116:	687b      	ldr	r3, [r7, #4]
   14118:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	value=b?value|0x40:value&0xbf;
   1411c:	78fb      	ldrb	r3, [r7, #3]
   1411e:	2b00      	cmp	r3, #0
   14120:	d006      	beq.n	14130 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   14122:	687b      	ldr	r3, [r7, #4]
   14124:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   14128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1412c:	b2db      	uxtb	r3, r3
   1412e:	e005      	b.n	1413c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   14130:	687b      	ldr	r3, [r7, #4]
   14132:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   14136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1413a:	b2db      	uxtb	r3, r3
   1413c:	687a      	ldr	r2, [r7, #4]
   1413e:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
	value=expanders[1]->WriteGPIORegister(value);
   14142:	687b      	ldr	r3, [r7, #4]
   14144:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   14146:	687b      	ldr	r3, [r7, #4]
   14148:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1414c:	4619      	mov	r1, r3
   1414e:	4610      	mov	r0, r2
   14150:	4b07      	ldr	r3, [pc, #28]	; (14170 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   14152:	4798      	blx	r3
   14154:	4603      	mov	r3, r0
   14156:	461a      	mov	r2, r3
   14158:	687b      	ldr	r3, [r7, #4]
   1415a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	return value;
   1415e:	687b      	ldr	r3, [r7, #4]
   14160:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
}
   14164:	4618      	mov	r0, r3
   14166:	3708      	adds	r7, #8
   14168:	46bd      	mov	sp, r7
   1416a:	bd80      	pop	{r7, pc}
   1416c:	0000ff7d 	.word	0x0000ff7d
   14170:	00010001 	.word	0x00010001

00014174 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   14174:	b580      	push	{r7, lr}
   14176:	b082      	sub	sp, #8
   14178:	af00      	add	r7, sp, #0
   1417a:	6078      	str	r0, [r7, #4]
   1417c:	460b      	mov	r3, r1
   1417e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   14180:	687b      	ldr	r3, [r7, #4]
   14182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   14184:	4618      	mov	r0, r3
   14186:	4b17      	ldr	r3, [pc, #92]	; (141e4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   14188:	4798      	blx	r3
   1418a:	4603      	mov	r3, r0
   1418c:	461a      	mov	r2, r3
   1418e:	687b      	ldr	r3, [r7, #4]
   14190:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	value=b?value|0x04:value&0xfb;
   14194:	78fb      	ldrb	r3, [r7, #3]
   14196:	2b00      	cmp	r3, #0
   14198:	d006      	beq.n	141a8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   1419a:	687b      	ldr	r3, [r7, #4]
   1419c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   141a0:	f043 0304 	orr.w	r3, r3, #4
   141a4:	b2db      	uxtb	r3, r3
   141a6:	e005      	b.n	141b4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   141a8:	687b      	ldr	r3, [r7, #4]
   141aa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   141ae:	f023 0304 	bic.w	r3, r3, #4
   141b2:	b2db      	uxtb	r3, r3
   141b4:	687a      	ldr	r2, [r7, #4]
   141b6:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
	value=expanders[1]->WriteGPIORegister(value);
   141ba:	687b      	ldr	r3, [r7, #4]
   141bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   141be:	687b      	ldr	r3, [r7, #4]
   141c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   141c4:	4619      	mov	r1, r3
   141c6:	4610      	mov	r0, r2
   141c8:	4b07      	ldr	r3, [pc, #28]	; (141e8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   141ca:	4798      	blx	r3
   141cc:	4603      	mov	r3, r0
   141ce:	461a      	mov	r2, r3
   141d0:	687b      	ldr	r3, [r7, #4]
   141d2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	return value;
   141d6:	687b      	ldr	r3, [r7, #4]
   141d8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
}
   141dc:	4618      	mov	r0, r3
   141de:	3708      	adds	r7, #8
   141e0:	46bd      	mov	sp, r7
   141e2:	bd80      	pop	{r7, pc}
   141e4:	0000ff7d 	.word	0x0000ff7d
   141e8:	00010001 	.word	0x00010001

000141ec <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   141ec:	b580      	push	{r7, lr}
   141ee:	b082      	sub	sp, #8
   141f0:	af00      	add	r7, sp, #0
   141f2:	6078      	str	r0, [r7, #4]
   141f4:	460b      	mov	r3, r1
   141f6:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   141f8:	687b      	ldr	r3, [r7, #4]
   141fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   141fc:	78fa      	ldrb	r2, [r7, #3]
   141fe:	4611      	mov	r1, r2
   14200:	4618      	mov	r0, r3
   14202:	4b07      	ldr	r3, [pc, #28]	; (14220 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   14204:	4798      	blx	r3
   14206:	4603      	mov	r3, r0
   14208:	461a      	mov	r2, r3
   1420a:	687b      	ldr	r3, [r7, #4]
   1420c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   14210:	687b      	ldr	r3, [r7, #4]
   14212:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
}
   14216:	4618      	mov	r0, r3
   14218:	3708      	adds	r7, #8
   1421a:	46bd      	mov	sp, r7
   1421c:	bd80      	pop	{r7, pc}
   1421e:	bf00      	nop
   14220:	00010001 	.word	0x00010001

00014224 <_ZN24SingleFlapperValve_Class9ReadGPIOsEPh>:
}
uint8_t SingleFlapperValve_Class::ReadSetpoint(){
	setpointPosition= expanders[2]->ReadGPIORegister();
	return setpointPosition;
}
void  SingleFlapperValve_Class::ReadGPIOs(uint8_t *buf){
   14224:	b590      	push	{r4, r7, lr}
   14226:	b085      	sub	sp, #20
   14228:	af00      	add	r7, sp, #0
   1422a:	6078      	str	r0, [r7, #4]
   1422c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   1422e:	2300      	movs	r3, #0
   14230:	60fb      	str	r3, [r7, #12]
   14232:	68fb      	ldr	r3, [r7, #12]
   14234:	2b03      	cmp	r3, #3
   14236:	dc11      	bgt.n	1425c <_ZN24SingleFlapperValve_Class9ReadGPIOsEPh+0x38>
	{
		buf[i]=expanders[i]->ReadGPIORegister();
   14238:	68fb      	ldr	r3, [r7, #12]
   1423a:	683a      	ldr	r2, [r7, #0]
   1423c:	18d4      	adds	r4, r2, r3
   1423e:	687a      	ldr	r2, [r7, #4]
   14240:	68fb      	ldr	r3, [r7, #12]
   14242:	3316      	adds	r3, #22
   14244:	009b      	lsls	r3, r3, #2
   14246:	4413      	add	r3, r2
   14248:	685b      	ldr	r3, [r3, #4]
   1424a:	4618      	mov	r0, r3
   1424c:	4b05      	ldr	r3, [pc, #20]	; (14264 <_ZN24SingleFlapperValve_Class9ReadGPIOsEPh+0x40>)
   1424e:	4798      	blx	r3
   14250:	4603      	mov	r3, r0
   14252:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	3301      	adds	r3, #1
   14258:	60fb      	str	r3, [r7, #12]
   1425a:	e7ea      	b.n	14232 <_ZN24SingleFlapperValve_Class9ReadGPIOsEPh+0xe>
	}
}
   1425c:	bf00      	nop
   1425e:	3714      	adds	r7, #20
   14260:	46bd      	mov	sp, r7
   14262:	bd90      	pop	{r4, r7, pc}
   14264:	0000ff7d 	.word	0x0000ff7d

00014268 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   14268:	b580      	push	{r7, lr}
   1426a:	b082      	sub	sp, #8
   1426c:	af00      	add	r7, sp, #0
   1426e:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   14270:	687b      	ldr	r3, [r7, #4]
   14272:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   14276:	687b      	ldr	r3, [r7, #4]
   14278:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   1427c:	687b      	ldr	r3, [r7, #4]
   1427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   14280:	4618      	mov	r0, r3
   14282:	4b18      	ldr	r3, [pc, #96]	; (142e4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   14284:	4798      	blx	r3
   14286:	4603      	mov	r3, r0
   14288:	461a      	mov	r2, r3
   1428a:	687b      	ldr	r3, [r7, #4]
   1428c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   14290:	687b      	ldr	r3, [r7, #4]
   14292:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   14296:	2bda      	cmp	r3, #218	; 0xda
   14298:	dd04      	ble.n	142a4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   1429a:	687b      	ldr	r3, [r7, #4]
   1429c:	2203      	movs	r2, #3
   1429e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   142a2:	e017      	b.n	142d4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   142a4:	687b      	ldr	r3, [r7, #4]
   142a6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   142aa:	2b6d      	cmp	r3, #109	; 0x6d
   142ac:	dd04      	ble.n	142b8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   142ae:	687b      	ldr	r3, [r7, #4]
   142b0:	2202      	movs	r2, #2
   142b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   142b6:	e00d      	b.n	142d4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   142b8:	687b      	ldr	r3, [r7, #4]
   142ba:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   142be:	2b36      	cmp	r3, #54	; 0x36
   142c0:	dd04      	ble.n	142cc <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   142c2:	687b      	ldr	r3, [r7, #4]
   142c4:	2201      	movs	r2, #1
   142c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   142ca:	e003      	b.n	142d4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   142cc:	687b      	ldr	r3, [r7, #4]
   142ce:	2200      	movs	r2, #0
   142d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	}
	return actualPosition;
   142d4:	687b      	ldr	r3, [r7, #4]
   142d6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
}
   142da:	4618      	mov	r0, r3
   142dc:	3708      	adds	r7, #8
   142de:	46bd      	mov	sp, r7
   142e0:	bd80      	pop	{r7, pc}
   142e2:	bf00      	nop
   142e4:	0000ff7d 	.word	0x0000ff7d

000142e8 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   142e8:	b590      	push	{r4, r7, lr}
   142ea:	b083      	sub	sp, #12
   142ec:	af00      	add	r7, sp, #0
   142ee:	6078      	str	r0, [r7, #4]
   142f0:	4c05      	ldr	r4, [pc, #20]	; (14308 <__tcf_0+0x20>)
   142f2:	4b06      	ldr	r3, [pc, #24]	; (1430c <__tcf_0+0x24>)
   142f4:	429c      	cmp	r4, r3
   142f6:	d004      	beq.n	14302 <__tcf_0+0x1a>
   142f8:	3c1c      	subs	r4, #28
   142fa:	4620      	mov	r0, r4
   142fc:	4b04      	ldr	r3, [pc, #16]	; (14310 <__tcf_0+0x28>)
   142fe:	4798      	blx	r3
   14300:	e7f7      	b.n	142f2 <__tcf_0+0xa>
   14302:	370c      	adds	r7, #12
   14304:	46bd      	mov	sp, r7
   14306:	bd90      	pop	{r4, r7, pc}
   14308:	20005988 	.word	0x20005988
   1430c:	200058a8 	.word	0x200058a8
   14310:	0000fe85 	.word	0x0000fe85

00014314 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   14314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14318:	b082      	sub	sp, #8
   1431a:	af00      	add	r7, sp, #0
   1431c:	6078      	str	r0, [r7, #4]
   1431e:	6039      	str	r1, [r7, #0]
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	2b01      	cmp	r3, #1
   14324:	d177      	bne.n	14416 <_Z41__static_initialization_and_destruction_0ii+0x102>
   14326:	683b      	ldr	r3, [r7, #0]
   14328:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1432c:	4293      	cmp	r3, r2
   1432e:	d172      	bne.n	14416 <_Z41__static_initialization_and_destruction_0ii+0x102>
   14330:	493b      	ldr	r1, [pc, #236]	; (14420 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   14332:	483c      	ldr	r0, [pc, #240]	; (14424 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   14334:	4b3c      	ldr	r3, [pc, #240]	; (14428 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   14336:	4798      	blx	r3
   14338:	4a3c      	ldr	r2, [pc, #240]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1433a:	493d      	ldr	r1, [pc, #244]	; (14430 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   1433c:	4839      	ldr	r0, [pc, #228]	; (14424 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1433e:	4b3d      	ldr	r3, [pc, #244]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   14340:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   14342:	493d      	ldr	r1, [pc, #244]	; (14438 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   14344:	483d      	ldr	r0, [pc, #244]	; (1443c <_Z41__static_initialization_and_destruction_0ii+0x128>)
   14346:	4b3e      	ldr	r3, [pc, #248]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   14348:	4798      	blx	r3
   1434a:	4a38      	ldr	r2, [pc, #224]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1434c:	493d      	ldr	r1, [pc, #244]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1434e:	483b      	ldr	r0, [pc, #236]	; (1443c <_Z41__static_initialization_and_destruction_0ii+0x128>)
   14350:	4b38      	ldr	r3, [pc, #224]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   14352:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   14354:	493c      	ldr	r1, [pc, #240]	; (14448 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   14356:	483d      	ldr	r0, [pc, #244]	; (1444c <_Z41__static_initialization_and_destruction_0ii+0x138>)
   14358:	4b39      	ldr	r3, [pc, #228]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1435a:	4798      	blx	r3
   1435c:	4a33      	ldr	r2, [pc, #204]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1435e:	4939      	ldr	r1, [pc, #228]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   14360:	483a      	ldr	r0, [pc, #232]	; (1444c <_Z41__static_initialization_and_destruction_0ii+0x138>)
   14362:	4b34      	ldr	r3, [pc, #208]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   14364:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   14366:	493a      	ldr	r1, [pc, #232]	; (14450 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   14368:	483a      	ldr	r0, [pc, #232]	; (14454 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   1436a:	4b35      	ldr	r3, [pc, #212]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1436c:	4798      	blx	r3
   1436e:	4a2f      	ldr	r2, [pc, #188]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   14370:	4934      	ldr	r1, [pc, #208]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   14372:	4838      	ldr	r0, [pc, #224]	; (14454 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   14374:	4b2f      	ldr	r3, [pc, #188]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   14376:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   14378:	4937      	ldr	r1, [pc, #220]	; (14458 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   1437a:	4838      	ldr	r0, [pc, #224]	; (1445c <_Z41__static_initialization_and_destruction_0ii+0x148>)
   1437c:	4b30      	ldr	r3, [pc, #192]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1437e:	4798      	blx	r3
   14380:	4a2a      	ldr	r2, [pc, #168]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   14382:	4930      	ldr	r1, [pc, #192]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   14384:	4835      	ldr	r0, [pc, #212]	; (1445c <_Z41__static_initialization_and_destruction_0ii+0x148>)
   14386:	4b2b      	ldr	r3, [pc, #172]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   14388:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1438a:	4935      	ldr	r1, [pc, #212]	; (14460 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   1438c:	4835      	ldr	r0, [pc, #212]	; (14464 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   1438e:	4b2c      	ldr	r3, [pc, #176]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   14390:	4798      	blx	r3
   14392:	4a26      	ldr	r2, [pc, #152]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   14394:	492b      	ldr	r1, [pc, #172]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   14396:	4833      	ldr	r0, [pc, #204]	; (14464 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   14398:	4b26      	ldr	r3, [pc, #152]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1439a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1439c:	4932      	ldr	r1, [pc, #200]	; (14468 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   1439e:	4833      	ldr	r0, [pc, #204]	; (1446c <_Z41__static_initialization_and_destruction_0ii+0x158>)
   143a0:	4b27      	ldr	r3, [pc, #156]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   143a2:	4798      	blx	r3
   143a4:	4a21      	ldr	r2, [pc, #132]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   143a6:	4927      	ldr	r1, [pc, #156]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   143a8:	4830      	ldr	r0, [pc, #192]	; (1446c <_Z41__static_initialization_and_destruction_0ii+0x158>)
   143aa:	4b22      	ldr	r3, [pc, #136]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   143ac:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   143ae:	4930      	ldr	r1, [pc, #192]	; (14470 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   143b0:	4830      	ldr	r0, [pc, #192]	; (14474 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   143b2:	4b23      	ldr	r3, [pc, #140]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   143b4:	4798      	blx	r3
   143b6:	4a1d      	ldr	r2, [pc, #116]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   143b8:	4922      	ldr	r1, [pc, #136]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   143ba:	482e      	ldr	r0, [pc, #184]	; (14474 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   143bc:	4b1d      	ldr	r3, [pc, #116]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   143be:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   143c0:	492d      	ldr	r1, [pc, #180]	; (14478 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   143c2:	482e      	ldr	r0, [pc, #184]	; (1447c <_Z41__static_initialization_and_destruction_0ii+0x168>)
   143c4:	4b1e      	ldr	r3, [pc, #120]	; (14440 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   143c6:	4798      	blx	r3
   143c8:	4a18      	ldr	r2, [pc, #96]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   143ca:	491e      	ldr	r1, [pc, #120]	; (14444 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   143cc:	482b      	ldr	r0, [pc, #172]	; (1447c <_Z41__static_initialization_and_destruction_0ii+0x168>)
   143ce:	4b19      	ldr	r3, [pc, #100]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   143d0:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   143d2:	492b      	ldr	r1, [pc, #172]	; (14480 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
   143d4:	482b      	ldr	r0, [pc, #172]	; (14484 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   143d6:	4b14      	ldr	r3, [pc, #80]	; (14428 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   143d8:	4798      	blx	r3
   143da:	4a14      	ldr	r2, [pc, #80]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   143dc:	4914      	ldr	r1, [pc, #80]	; (14430 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   143de:	4829      	ldr	r0, [pc, #164]	; (14484 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   143e0:	4b14      	ldr	r3, [pc, #80]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   143e2:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   143e4:	4b28      	ldr	r3, [pc, #160]	; (14488 <_Z41__static_initialization_and_destruction_0ii+0x174>)
   143e6:	2401      	movs	r4, #1
   143e8:	461e      	mov	r6, r3
   143ea:	2c00      	cmp	r4, #0
   143ec:	db0e      	blt.n	1440c <_Z41__static_initialization_and_destruction_0ii+0xf8>
   143ee:	4633      	mov	r3, r6
   143f0:	2503      	movs	r5, #3
   143f2:	4698      	mov	r8, r3
   143f4:	2d00      	cmp	r5, #0
   143f6:	db06      	blt.n	14406 <_Z41__static_initialization_and_destruction_0ii+0xf2>
   143f8:	4640      	mov	r0, r8
   143fa:	4b24      	ldr	r3, [pc, #144]	; (1448c <_Z41__static_initialization_and_destruction_0ii+0x178>)
   143fc:	4798      	blx	r3
   143fe:	f108 081c 	add.w	r8, r8, #28
   14402:	3d01      	subs	r5, #1
   14404:	e7f6      	b.n	143f4 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   14406:	3670      	adds	r6, #112	; 0x70
   14408:	3c01      	subs	r4, #1
   1440a:	e7ee      	b.n	143ea <_Z41__static_initialization_and_destruction_0ii+0xd6>
   1440c:	4a07      	ldr	r2, [pc, #28]	; (1442c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1440e:	4920      	ldr	r1, [pc, #128]	; (14490 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
   14410:	2000      	movs	r0, #0
   14412:	4b08      	ldr	r3, [pc, #32]	; (14434 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   14414:	4798      	blx	r3
}
   14416:	bf00      	nop
   14418:	3708      	adds	r7, #8
   1441a:	46bd      	mov	sp, r7
   1441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14420:	2000e088 	.word	0x2000e088
   14424:	20005774 	.word	0x20005774
   14428:	0000fcb5 	.word	0x0000fcb5
   1442c:	20000000 	.word	0x20000000
   14430:	0000fcd1 	.word	0x0000fcd1
   14434:	0001ab61 	.word	0x0001ab61
   14438:	2000df58 	.word	0x2000df58
   1443c:	2000578c 	.word	0x2000578c
   14440:	000104e5 	.word	0x000104e5
   14444:	0001051d 	.word	0x0001051d
   14448:	2000dfec 	.word	0x2000dfec
   1444c:	200057ac 	.word	0x200057ac
   14450:	2000e110 	.word	0x2000e110
   14454:	200057cc 	.word	0x200057cc
   14458:	2000e00c 	.word	0x2000e00c
   1445c:	200057ec 	.word	0x200057ec
   14460:	2000e0d0 	.word	0x2000e0d0
   14464:	2000580c 	.word	0x2000580c
   14468:	2000e0f0 	.word	0x2000e0f0
   1446c:	2000582c 	.word	0x2000582c
   14470:	2000dfc8 	.word	0x2000dfc8
   14474:	2000584c 	.word	0x2000584c
   14478:	2000e068 	.word	0x2000e068
   1447c:	2000586c 	.word	0x2000586c
   14480:	2000e02c 	.word	0x2000e02c
   14484:	20005890 	.word	0x20005890
   14488:	200058a8 	.word	0x200058a8
   1448c:	0000fe71 	.word	0x0000fe71
   14490:	000142e9 	.word	0x000142e9

00014494 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   14494:	b580      	push	{r7, lr}
   14496:	af00      	add	r7, sp, #0
   14498:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1449c:	2001      	movs	r0, #1
   1449e:	4b01      	ldr	r3, [pc, #4]	; (144a4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   144a0:	4798      	blx	r3
   144a2:	bd80      	pop	{r7, pc}
   144a4:	00014315 	.word	0x00014315

000144a8 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   144a8:	b480      	push	{r7}
   144aa:	b083      	sub	sp, #12
   144ac:	af00      	add	r7, sp, #0
   144ae:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   144b0:	4a07      	ldr	r2, [pc, #28]	; (144d0 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   144b2:	687b      	ldr	r3, [r7, #4]
   144b4:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   144b6:	687b      	ldr	r3, [r7, #4]
   144b8:	4a06      	ldr	r2, [pc, #24]	; (144d4 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   144ba:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   144bc:	687b      	ldr	r3, [r7, #4]
   144be:	2200      	movs	r2, #0
   144c0:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	4618      	mov	r0, r3
   144c6:	370c      	adds	r7, #12
   144c8:	46bd      	mov	sp, r7
   144ca:	bc80      	pop	{r7}
   144cc:	4770      	bx	lr
   144ce:	bf00      	nop
   144d0:	200059a0 	.word	0x200059a0
   144d4:	20005988 	.word	0x20005988

000144d8 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   144d8:	b480      	push	{r7}
   144da:	b083      	sub	sp, #12
   144dc:	af00      	add	r7, sp, #0
   144de:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   144e0:	687b      	ldr	r3, [r7, #4]
   144e2:	4618      	mov	r0, r3
   144e4:	370c      	adds	r7, #12
   144e6:	46bd      	mov	sp, r7
   144e8:	bc80      	pop	{r7}
   144ea:	4770      	bx	lr

000144ec <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id,MCP23008_Class *heater_expanders){
   144ec:	b580      	push	{r7, lr}
   144ee:	b084      	sub	sp, #16
   144f0:	af00      	add	r7, sp, #0
   144f2:	60f8      	str	r0, [r7, #12]
   144f4:	460b      	mov	r3, r1
   144f6:	607a      	str	r2, [r7, #4]
   144f8:	72fb      	strb	r3, [r7, #11]
	heater_id=id;
   144fa:	68fb      	ldr	r3, [r7, #12]
   144fc:	7afa      	ldrb	r2, [r7, #11]
   144fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->initiated)
   14502:	68fb      	ldr	r3, [r7, #12]
   14504:	699b      	ldr	r3, [r3, #24]
   14506:	7a1b      	ldrb	r3, [r3, #8]
   14508:	b2db      	uxtb	r3, r3
   1450a:	2b00      	cmp	r3, #0
   1450c:	d104      	bne.n	14518 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x2c>
	{
		
	} 
	else{
		i2c->Init();
   1450e:	68fb      	ldr	r3, [r7, #12]
   14510:	699b      	ldr	r3, [r3, #24]
   14512:	4618      	mov	r0, r3
   14514:	4b18      	ldr	r3, [pc, #96]	; (14578 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x8c>)
   14516:	4798      	blx	r3
	}
	
	if (i2c->isOK)
   14518:	68fb      	ldr	r3, [r7, #12]
   1451a:	699b      	ldr	r3, [r3, #24]
   1451c:	7a5b      	ldrb	r3, [r3, #9]
   1451e:	b2db      	uxtb	r3, r3
   14520:	2b00      	cmp	r3, #0
   14522:	d01b      	beq.n	1455c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x70>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray(heater_expanders);
   14524:	6879      	ldr	r1, [r7, #4]
   14526:	68f8      	ldr	r0, [r7, #12]
   14528:	4b14      	ldr	r3, [pc, #80]	; (1457c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x90>)
   1452a:	4798      	blx	r3
		expanders[0]->SetPortInput();
   1452c:	68fb      	ldr	r3, [r7, #12]
   1452e:	68db      	ldr	r3, [r3, #12]
   14530:	4618      	mov	r0, r3
   14532:	4b13      	ldr	r3, [pc, #76]	; (14580 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x94>)
   14534:	4798      	blx	r3
		expanders[0]->SetChangeInterruptPins(0x1f);
   14536:	68fb      	ldr	r3, [r7, #12]
   14538:	68db      	ldr	r3, [r3, #12]
   1453a:	211f      	movs	r1, #31
   1453c:	4618      	mov	r0, r3
   1453e:	4b11      	ldr	r3, [pc, #68]	; (14584 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x98>)
   14540:	4798      	blx	r3
		expanders[1]->SetPortOutput();
   14542:	68fb      	ldr	r3, [r7, #12]
   14544:	691b      	ldr	r3, [r3, #16]
   14546:	4618      	mov	r0, r3
   14548:	4b0f      	ldr	r3, [pc, #60]	; (14588 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x9c>)
   1454a:	4798      	blx	r3
		isOK=SelfTest();
   1454c:	68f8      	ldr	r0, [r7, #12]
   1454e:	4b0f      	ldr	r3, [pc, #60]	; (1458c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0xa0>)
   14550:	4798      	blx	r3
   14552:	4603      	mov	r3, r0
   14554:	461a      	mov	r2, r3
   14556:	68fb      	ldr	r3, [r7, #12]
   14558:	701a      	strb	r2, [r3, #0]
   1455a:	e000      	b.n	1455e <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x72>
	}
	else
	{
		asm("nop");
   1455c:	bf00      	nop
	}
	isOK=i2c->isOK;
   1455e:	68fb      	ldr	r3, [r7, #12]
   14560:	699b      	ldr	r3, [r3, #24]
   14562:	7a5b      	ldrb	r3, [r3, #9]
   14564:	b2da      	uxtb	r2, r3
   14566:	68fb      	ldr	r3, [r7, #12]
   14568:	701a      	strb	r2, [r3, #0]
	return isOK;
   1456a:	68fb      	ldr	r3, [r7, #12]
   1456c:	781b      	ldrb	r3, [r3, #0]
   1456e:	b2db      	uxtb	r3, r3
}
   14570:	4618      	mov	r0, r3
   14572:	3710      	adds	r7, #16
   14574:	46bd      	mov	sp, r7
   14576:	bd80      	pop	{r7, pc}
   14578:	0000fce5 	.word	0x0000fce5
   1457c:	00014591 	.word	0x00014591
   14580:	0001003d 	.word	0x0001003d
   14584:	000103d1 	.word	0x000103d1
   14588:	000100f5 	.word	0x000100f5
   1458c:	00014795 	.word	0x00014795

00014590 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t SingleHeater_Class::InitExpanderArray(MCP23008_Class *heater_expanders){
   14590:	b580      	push	{r7, lr}
   14592:	b084      	sub	sp, #16
   14594:	af00      	add	r7, sp, #0
   14596:	6078      	str	r0, [r7, #4]
   14598:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   1459a:	2300      	movs	r3, #0
   1459c:	60fb      	str	r3, [r7, #12]
   1459e:	68fb      	ldr	r3, [r7, #12]
   145a0:	2b01      	cmp	r3, #1
   145a2:	dc34      	bgt.n	1460e <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x7e>
	{
		expanders[i]=&heater_expanders[2*heater_id+i];
   145a4:	687b      	ldr	r3, [r7, #4]
   145a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   145aa:	005a      	lsls	r2, r3, #1
   145ac:	68fb      	ldr	r3, [r7, #12]
   145ae:	4413      	add	r3, r2
   145b0:	461a      	mov	r2, r3
   145b2:	4613      	mov	r3, r2
   145b4:	00db      	lsls	r3, r3, #3
   145b6:	1a9b      	subs	r3, r3, r2
   145b8:	009b      	lsls	r3, r3, #2
   145ba:	461a      	mov	r2, r3
   145bc:	683b      	ldr	r3, [r7, #0]
   145be:	441a      	add	r2, r3
   145c0:	6879      	ldr	r1, [r7, #4]
   145c2:	68fb      	ldr	r3, [r7, #12]
   145c4:	3302      	adds	r3, #2
   145c6:	009b      	lsls	r3, r3, #2
   145c8:	440b      	add	r3, r1
   145ca:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   145cc:	687a      	ldr	r2, [r7, #4]
   145ce:	68fb      	ldr	r3, [r7, #12]
   145d0:	3302      	adds	r3, #2
   145d2:	009b      	lsls	r3, r3, #2
   145d4:	4413      	add	r3, r2
   145d6:	685a      	ldr	r2, [r3, #4]
   145d8:	687b      	ldr	r3, [r7, #4]
   145da:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
   145dc:	687b      	ldr	r3, [r7, #4]
   145de:	6958      	ldr	r0, [r3, #20]
   145e0:	68fb      	ldr	r3, [r7, #12]
   145e2:	b2da      	uxtb	r2, r3
   145e4:	687b      	ldr	r3, [r7, #4]
   145e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   145ea:	005b      	lsls	r3, r3, #1
   145ec:	b2db      	uxtb	r3, r3
   145ee:	4313      	orrs	r3, r2
   145f0:	b2db      	uxtb	r3, r3
   145f2:	f043 0320 	orr.w	r3, r3, #32
   145f6:	b2db      	uxtb	r3, r3
   145f8:	b25b      	sxtb	r3, r3
   145fa:	b2d9      	uxtb	r1, r3
   145fc:	687b      	ldr	r3, [r7, #4]
   145fe:	699b      	ldr	r3, [r3, #24]
   14600:	461a      	mov	r2, r3
   14602:	4b05      	ldr	r3, [pc, #20]	; (14618 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x88>)
   14604:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   14606:	68fb      	ldr	r3, [r7, #12]
   14608:	3301      	adds	r3, #1
   1460a:	60fb      	str	r3, [r7, #12]
   1460c:	e7c7      	b.n	1459e <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0xe>
	}
	
}
   1460e:	bf00      	nop
   14610:	4618      	mov	r0, r3
   14612:	3710      	adds	r7, #16
   14614:	46bd      	mov	sp, r7
   14616:	bd80      	pop	{r7, pc}
   14618:	0000fe99 	.word	0x0000fe99

0001461c <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   1461c:	b580      	push	{r7, lr}
   1461e:	b084      	sub	sp, #16
   14620:	af00      	add	r7, sp, #0
   14622:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	68db      	ldr	r3, [r3, #12]
   14628:	4618      	mov	r0, r3
   1462a:	4b16      	ldr	r3, [pc, #88]	; (14684 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   1462c:	4798      	blx	r3
   1462e:	4603      	mov	r3, r0
   14630:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   14632:	7bbb      	ldrb	r3, [r7, #14]
   14634:	f003 0301 	and.w	r3, r3, #1
   14638:	2b00      	cmp	r3, #0
   1463a:	bf14      	ite	ne
   1463c:	2301      	movne	r3, #1
   1463e:	2300      	moveq	r3, #0
   14640:	b2da      	uxtb	r2, r3
   14642:	687b      	ldr	r3, [r7, #4]
   14644:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   14646:	2300      	movs	r3, #0
   14648:	73fb      	strb	r3, [r7, #15]
   1464a:	7bfb      	ldrb	r3, [r7, #15]
   1464c:	2b03      	cmp	r3, #3
   1464e:	dc14      	bgt.n	1467a <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   14650:	7bfb      	ldrb	r3, [r7, #15]
   14652:	7bb9      	ldrb	r1, [r7, #14]
   14654:	7bfa      	ldrb	r2, [r7, #15]
   14656:	3201      	adds	r2, #1
   14658:	fa41 f202 	asr.w	r2, r1, r2
   1465c:	f002 0201 	and.w	r2, r2, #1
   14660:	2a00      	cmp	r2, #0
   14662:	bf14      	ite	ne
   14664:	2201      	movne	r2, #1
   14666:	2200      	moveq	r2, #0
   14668:	b2d1      	uxtb	r1, r2
   1466a:	687a      	ldr	r2, [r7, #4]
   1466c:	4413      	add	r3, r2
   1466e:	460a      	mov	r2, r1
   14670:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   14672:	7bfb      	ldrb	r3, [r7, #15]
   14674:	3301      	adds	r3, #1
   14676:	73fb      	strb	r3, [r7, #15]
   14678:	e7e7      	b.n	1464a <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   1467a:	7bbb      	ldrb	r3, [r7, #14]
}
   1467c:	4618      	mov	r0, r3
   1467e:	3710      	adds	r7, #16
   14680:	46bd      	mov	sp, r7
   14682:	bd80      	pop	{r7, pc}
   14684:	0000ff7d 	.word	0x0000ff7d

00014688 <_ZN18SingleHeater_Class9ReadGPIOsEPh>:
void	SingleHeater_Class::ReadGPIOs(uint8_t *buffer){
   14688:	b590      	push	{r4, r7, lr}
   1468a:	b085      	sub	sp, #20
   1468c:	af00      	add	r7, sp, #0
   1468e:	6078      	str	r0, [r7, #4]
   14690:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < 2; i++)
   14692:	2300      	movs	r3, #0
   14694:	73fb      	strb	r3, [r7, #15]
   14696:	7bfb      	ldrb	r3, [r7, #15]
   14698:	2b01      	cmp	r3, #1
   1469a:	dc11      	bgt.n	146c0 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x38>
	{
		buffer[i]=expanders[i]->ReadGPIORegister();
   1469c:	7bfb      	ldrb	r3, [r7, #15]
   1469e:	683a      	ldr	r2, [r7, #0]
   146a0:	18d4      	adds	r4, r2, r3
   146a2:	7bfb      	ldrb	r3, [r7, #15]
   146a4:	687a      	ldr	r2, [r7, #4]
   146a6:	3302      	adds	r3, #2
   146a8:	009b      	lsls	r3, r3, #2
   146aa:	4413      	add	r3, r2
   146ac:	685b      	ldr	r3, [r3, #4]
   146ae:	4618      	mov	r0, r3
   146b0:	4b05      	ldr	r3, [pc, #20]	; (146c8 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x40>)
   146b2:	4798      	blx	r3
   146b4:	4603      	mov	r3, r0
   146b6:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++)
   146b8:	7bfb      	ldrb	r3, [r7, #15]
   146ba:	3301      	adds	r3, #1
   146bc:	73fb      	strb	r3, [r7, #15]
   146be:	e7ea      	b.n	14696 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0xe>
		
	}
	
}
   146c0:	bf00      	nop
   146c2:	3714      	adds	r7, #20
   146c4:	46bd      	mov	sp, r7
   146c6:	bd90      	pop	{r4, r7, pc}
   146c8:	0000ff7d 	.word	0x0000ff7d

000146cc <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   146cc:	b580      	push	{r7, lr}
   146ce:	b082      	sub	sp, #8
   146d0:	af00      	add	r7, sp, #0
   146d2:	6078      	str	r0, [r7, #4]
   146d4:	460b      	mov	r3, r1
   146d6:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   146d8:	687b      	ldr	r3, [r7, #4]
   146da:	691b      	ldr	r3, [r3, #16]
   146dc:	78f9      	ldrb	r1, [r7, #3]
   146de:	2200      	movs	r2, #0
   146e0:	4618      	mov	r0, r3
   146e2:	4b06      	ldr	r3, [pc, #24]	; (146fc <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   146e4:	4798      	blx	r3
   146e6:	4603      	mov	r3, r0
   146e8:	461a      	mov	r2, r3
   146ea:	687b      	ldr	r3, [r7, #4]
   146ec:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   146ee:	687b      	ldr	r3, [r7, #4]
   146f0:	7adb      	ldrb	r3, [r3, #11]
}
   146f2:	4618      	mov	r0, r3
   146f4:	3708      	adds	r7, #8
   146f6:	46bd      	mov	sp, r7
   146f8:	bd80      	pop	{r7, pc}
   146fa:	bf00      	nop
   146fc:	00010235 	.word	0x00010235

00014700 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   14700:	b590      	push	{r4, r7, lr}
   14702:	b083      	sub	sp, #12
   14704:	af00      	add	r7, sp, #0
   14706:	6078      	str	r0, [r7, #4]
   14708:	460b      	mov	r3, r1
   1470a:	70fb      	strb	r3, [r7, #3]
   1470c:	4613      	mov	r3, r2
   1470e:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   14710:	687b      	ldr	r3, [r7, #4]
   14712:	6918      	ldr	r0, [r3, #16]
   14714:	78bb      	ldrb	r3, [r7, #2]
   14716:	f083 0301 	eor.w	r3, r3, #1
   1471a:	b2da      	uxtb	r2, r3
   1471c:	78fb      	ldrb	r3, [r7, #3]
   1471e:	4619      	mov	r1, r3
   14720:	4b09      	ldr	r3, [pc, #36]	; (14748 <_ZN18SingleHeater_Class8SetRelayEhb+0x48>)
   14722:	4798      	blx	r3
   14724:	4603      	mov	r3, r0
   14726:	461a      	mov	r2, r3
   14728:	687b      	ldr	r3, [r7, #4]
   1472a:	72da      	strb	r2, [r3, #11]
	logger.SaveEventIndexResult("Heater ",indexHeater+1,state);
   1472c:	78fb      	ldrb	r3, [r7, #3]
   1472e:	3301      	adds	r3, #1
   14730:	b2da      	uxtb	r2, r3
   14732:	78bb      	ldrb	r3, [r7, #2]
   14734:	4905      	ldr	r1, [pc, #20]	; (1474c <_ZN18SingleHeater_Class8SetRelayEhb+0x4c>)
   14736:	4806      	ldr	r0, [pc, #24]	; (14750 <_ZN18SingleHeater_Class8SetRelayEhb+0x50>)
   14738:	4c06      	ldr	r4, [pc, #24]	; (14754 <_ZN18SingleHeater_Class8SetRelayEhb+0x54>)
   1473a:	47a0      	blx	r4
	return uint8_t(enabled);
   1473c:	687b      	ldr	r3, [r7, #4]
   1473e:	7adb      	ldrb	r3, [r3, #11]
}
   14740:	4618      	mov	r0, r3
   14742:	370c      	adds	r7, #12
   14744:	46bd      	mov	sp, r7
   14746:	bd90      	pop	{r4, r7, pc}
   14748:	00010235 	.word	0x00010235
   1474c:	0001bc0c 	.word	0x0001bc0c
   14750:	20003a78 	.word	0x20003a78
   14754:	00012025 	.word	0x00012025

00014758 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   14758:	b580      	push	{r7, lr}
   1475a:	b082      	sub	sp, #8
   1475c:	af00      	add	r7, sp, #0
   1475e:	6078      	str	r0, [r7, #4]
   14760:	460b      	mov	r3, r1
   14762:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   14764:	687b      	ldr	r3, [r7, #4]
   14766:	691b      	ldr	r3, [r3, #16]
   14768:	78f9      	ldrb	r1, [r7, #3]
   1476a:	2201      	movs	r2, #1
   1476c:	4618      	mov	r0, r3
   1476e:	4b08      	ldr	r3, [pc, #32]	; (14790 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   14770:	4798      	blx	r3
   14772:	4603      	mov	r3, r0
   14774:	2b00      	cmp	r3, #0
   14776:	d001      	beq.n	1477c <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   14778:	2200      	movs	r2, #0
   1477a:	e000      	b.n	1477e <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   1477c:	2201      	movs	r2, #1
   1477e:	687b      	ldr	r3, [r7, #4]
   14780:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	7adb      	ldrb	r3, [r3, #11]
}
   14786:	4618      	mov	r0, r3
   14788:	3708      	adds	r7, #8
   1478a:	46bd      	mov	sp, r7
   1478c:	bd80      	pop	{r7, pc}
   1478e:	bf00      	nop
   14790:	00010235 	.word	0x00010235

00014794 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
   14794:	b580      	push	{r7, lr}
   14796:	b084      	sub	sp, #16
   14798:	af00      	add	r7, sp, #0
   1479a:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   1479c:	2300      	movs	r3, #0
   1479e:	73bb      	strb	r3, [r7, #14]
   147a0:	7bbb      	ldrb	r3, [r7, #14]
   147a2:	2b03      	cmp	r3, #3
   147a4:	dc1f      	bgt.n	147e6 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
   147a6:	7bbb      	ldrb	r3, [r7, #14]
   147a8:	4619      	mov	r1, r3
   147aa:	6878      	ldr	r0, [r7, #4]
   147ac:	4b10      	ldr	r3, [pc, #64]	; (147f0 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   147ae:	4798      	blx	r3
		delay_ms(50);
   147b0:	2032      	movs	r0, #50	; 0x32
   147b2:	4b10      	ldr	r3, [pc, #64]	; (147f4 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   147b4:	4798      	blx	r3
		DisableIndex(i);
   147b6:	7bbb      	ldrb	r3, [r7, #14]
   147b8:	4619      	mov	r1, r3
   147ba:	6878      	ldr	r0, [r7, #4]
   147bc:	4b0e      	ldr	r3, [pc, #56]	; (147f8 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   147be:	4798      	blx	r3
		ReadStatus();
   147c0:	6878      	ldr	r0, [r7, #4]
   147c2:	4b0e      	ldr	r3, [pc, #56]	; (147fc <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   147c4:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   147c6:	7bbb      	ldrb	r3, [r7, #14]
   147c8:	687a      	ldr	r2, [r7, #4]
   147ca:	4413      	add	r3, r2
   147cc:	78db      	ldrb	r3, [r3, #3]
   147ce:	2b00      	cmp	r3, #0
   147d0:	d002      	beq.n	147d8 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
   147d2:	2301      	movs	r3, #1
   147d4:	73fb      	strb	r3, [r7, #15]
   147d6:	e002      	b.n	147de <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
   147d8:	2300      	movs	r3, #0
   147da:	73fb      	strb	r3, [r7, #15]
			break;
   147dc:	e003      	b.n	147e6 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   147de:	7bbb      	ldrb	r3, [r7, #14]
   147e0:	3301      	adds	r3, #1
   147e2:	73bb      	strb	r3, [r7, #14]
   147e4:	e7dc      	b.n	147a0 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
   147e6:	7bfb      	ldrb	r3, [r7, #15]
}
   147e8:	4618      	mov	r0, r3
   147ea:	3710      	adds	r7, #16
   147ec:	46bd      	mov	sp, r7
   147ee:	bd80      	pop	{r7, pc}
   147f0:	000146cd 	.word	0x000146cd
   147f4:	000036c9 	.word	0x000036c9
   147f8:	00014759 	.word	0x00014759
   147fc:	0001461d 	.word	0x0001461d

00014800 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   14800:	b590      	push	{r4, r7, lr}
   14802:	b083      	sub	sp, #12
   14804:	af00      	add	r7, sp, #0
   14806:	6078      	str	r0, [r7, #4]
   14808:	4c05      	ldr	r4, [pc, #20]	; (14820 <__tcf_0+0x20>)
   1480a:	4b06      	ldr	r3, [pc, #24]	; (14824 <__tcf_0+0x24>)
   1480c:	429c      	cmp	r4, r3
   1480e:	d004      	beq.n	1481a <__tcf_0+0x1a>
   14810:	3c1c      	subs	r4, #28
   14812:	4620      	mov	r0, r4
   14814:	4b04      	ldr	r3, [pc, #16]	; (14828 <__tcf_0+0x28>)
   14816:	4798      	blx	r3
   14818:	e7f7      	b.n	1480a <__tcf_0+0xa>
   1481a:	370c      	adds	r7, #12
   1481c:	46bd      	mov	sp, r7
   1481e:	bd90      	pop	{r4, r7, pc}
   14820:	200059dc 	.word	0x200059dc
   14824:	200059a4 	.word	0x200059a4
   14828:	0000fe85 	.word	0x0000fe85

0001482c <_Z41__static_initialization_and_destruction_0ii>:

   1482c:	b5b0      	push	{r4, r5, r7, lr}
   1482e:	b082      	sub	sp, #8
   14830:	af00      	add	r7, sp, #0
   14832:	6078      	str	r0, [r7, #4]
   14834:	6039      	str	r1, [r7, #0]
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	2b01      	cmp	r3, #1
   1483a:	d125      	bne.n	14888 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   1483c:	683b      	ldr	r3, [r7, #0]
   1483e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14842:	4293      	cmp	r3, r2
   14844:	d120      	bne.n	14888 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   14846:	4912      	ldr	r1, [pc, #72]	; (14890 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   14848:	4812      	ldr	r0, [pc, #72]	; (14894 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1484a:	4b13      	ldr	r3, [pc, #76]	; (14898 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1484c:	4798      	blx	r3
   1484e:	4a13      	ldr	r2, [pc, #76]	; (1489c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14850:	4913      	ldr	r1, [pc, #76]	; (148a0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   14852:	4810      	ldr	r0, [pc, #64]	; (14894 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   14854:	4b13      	ldr	r3, [pc, #76]	; (148a4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   14856:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   14858:	4b13      	ldr	r3, [pc, #76]	; (148a8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   1485a:	2401      	movs	r4, #1
   1485c:	461d      	mov	r5, r3
   1485e:	2c00      	cmp	r4, #0
   14860:	db05      	blt.n	1486e <_Z41__static_initialization_and_destruction_0ii+0x42>
   14862:	4628      	mov	r0, r5
   14864:	4b11      	ldr	r3, [pc, #68]	; (148ac <_Z41__static_initialization_and_destruction_0ii+0x80>)
   14866:	4798      	blx	r3
   14868:	351c      	adds	r5, #28
   1486a:	3c01      	subs	r4, #1
   1486c:	e7f7      	b.n	1485e <_Z41__static_initialization_and_destruction_0ii+0x32>
   1486e:	4a0b      	ldr	r2, [pc, #44]	; (1489c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14870:	490f      	ldr	r1, [pc, #60]	; (148b0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   14872:	2000      	movs	r0, #0
   14874:	4b0b      	ldr	r3, [pc, #44]	; (148a4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   14876:	4798      	blx	r3
   14878:	480e      	ldr	r0, [pc, #56]	; (148b4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1487a:	4b0f      	ldr	r3, [pc, #60]	; (148b8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1487c:	4798      	blx	r3
   1487e:	4a07      	ldr	r2, [pc, #28]	; (1489c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14880:	490e      	ldr	r1, [pc, #56]	; (148bc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   14882:	480c      	ldr	r0, [pc, #48]	; (148b4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   14884:	4b07      	ldr	r3, [pc, #28]	; (148a4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   14886:	4798      	blx	r3
   14888:	bf00      	nop
   1488a:	3708      	adds	r7, #8
   1488c:	46bd      	mov	sp, r7
   1488e:	bdb0      	pop	{r4, r5, r7, pc}
   14890:	2000e088 	.word	0x2000e088
   14894:	20005988 	.word	0x20005988
   14898:	0000fcb5 	.word	0x0000fcb5
   1489c:	20000000 	.word	0x20000000
   148a0:	0000fcd1 	.word	0x0000fcd1
   148a4:	0001ab61 	.word	0x0001ab61
   148a8:	200059a4 	.word	0x200059a4
   148ac:	0000fe71 	.word	0x0000fe71
   148b0:	00014801 	.word	0x00014801
   148b4:	200059dc 	.word	0x200059dc
   148b8:	000144a9 	.word	0x000144a9
   148bc:	000144d9 	.word	0x000144d9

000148c0 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   148c0:	b580      	push	{r7, lr}
   148c2:	af00      	add	r7, sp, #0
   148c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   148c8:	2001      	movs	r0, #1
   148ca:	4b01      	ldr	r3, [pc, #4]	; (148d0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   148cc:	4798      	blx	r3
   148ce:	bd80      	pop	{r7, pc}
   148d0:	0001482d 	.word	0x0001482d

000148d4 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   148d4:	4770      	bx	lr

000148d6 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   148d6:	4770      	bx	lr

000148d8 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadEventLogSector(uint32_t add, uint8_t *buffer){
   148d8:	b570      	push	{r4, r5, r6, lr}
   148da:	4604      	mov	r4, r0
	if (add>(uint32_t)&flashMap->EventsLogStateSector)
   148dc:	4b0d      	ldr	r3, [pc, #52]	; (14914 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x3c>)
   148de:	681b      	ldr	r3, [r3, #0]
   148e0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   148e4:	428b      	cmp	r3, r1
   148e6:	d305      	bcc.n	148f4 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x1c>
		qspiFlash.WaitOnBusy();
		
	} 
	else
	{
		read_result=1;
   148e8:	2301      	movs	r3, #1
   148ea:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	}

	return	read_result;
}
   148ee:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   148f2:	bd70      	pop	{r4, r5, r6, pc}
   148f4:	4610      	mov	r0, r2
		read_result=qspiFlash.ReadAddress(buffer,add,QSPI_ERBLK);
   148f6:	4d08      	ldr	r5, [pc, #32]	; (14918 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x40>)
   148f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   148fc:	460a      	mov	r2, r1
   148fe:	4601      	mov	r1, r0
   14900:	4628      	mov	r0, r5
   14902:	4e06      	ldr	r6, [pc, #24]	; (1491c <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x44>)
   14904:	47b0      	blx	r6
   14906:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		qspiFlash.WaitOnBusy();
   1490a:	4628      	mov	r0, r5
   1490c:	4b04      	ldr	r3, [pc, #16]	; (14920 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x48>)
   1490e:	4798      	blx	r3
   14910:	e7ed      	b.n	148ee <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x16>
   14912:	bf00      	nop
   14914:	20005a00 	.word	0x20005a00
   14918:	2000dc6c 	.word	0x2000dc6c
   1491c:	0001a0a9 	.word	0x0001a0a9
   14920:	0001a159 	.word	0x0001a159

00014924 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   14924:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   14926:	2304      	movs	r3, #4
   14928:	4801      	ldr	r0, [pc, #4]	; (14930 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   1492a:	4c02      	ldr	r4, [pc, #8]	; (14934 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   1492c:	47a0      	blx	r4
	return	r;
}
   1492e:	bd10      	pop	{r4, pc}
   14930:	2000dc6c 	.word	0x2000dc6c
   14934:	0001a0a9 	.word	0x0001a0a9

00014938 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   14938:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   1493a:	4b03      	ldr	r3, [pc, #12]	; (14948 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   1493c:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   1493e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   14942:	4b02      	ldr	r3, [pc, #8]	; (1494c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   14944:	4798      	blx	r3
}
   14946:	bd08      	pop	{r3, pc}
   14948:	20005a00 	.word	0x20005a00
   1494c:	00014925 	.word	0x00014925

00014950 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   14950:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   14952:	2304      	movs	r3, #4
   14954:	4801      	ldr	r0, [pc, #4]	; (1495c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   14956:	4c02      	ldr	r4, [pc, #8]	; (14960 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   14958:	47a0      	blx	r4
	return	w;
}
   1495a:	bd10      	pop	{r4, pc}
   1495c:	2000dc6c 	.word	0x2000dc6c
   14960:	0001a075 	.word	0x0001a075

00014964 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   14964:	b500      	push	{lr}
   14966:	b083      	sub	sp, #12
   14968:	4603      	mov	r3, r0
	UserParameters up=defaultParameters;
   1496a:	4a07      	ldr	r2, [pc, #28]	; (14988 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   1496c:	6810      	ldr	r0, [r2, #0]
   1496e:	9001      	str	r0, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   14970:	4a06      	ldr	r2, [pc, #24]	; (1498c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   14972:	6812      	ldr	r2, [r2, #0]
	uint32_t	w=WriteParameters(up,add);
   14974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   14978:	3204      	adds	r2, #4
   1497a:	a901      	add	r1, sp, #4
   1497c:	4618      	mov	r0, r3
   1497e:	4b04      	ldr	r3, [pc, #16]	; (14990 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   14980:	4798      	blx	r3
	return	w;
}
   14982:	b003      	add	sp, #12
   14984:	f85d fb04 	ldr.w	pc, [sp], #4
   14988:	0001baa4 	.word	0x0001baa4
   1498c:	20005a00 	.word	0x20005a00
   14990:	00014951 	.word	0x00014951

00014994 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   14994:	b510      	push	{r4, lr}
   14996:	4604      	mov	r4, r0
   14998:	30c0      	adds	r0, #192	; 0xc0
   1499a:	4b03      	ldr	r3, [pc, #12]	; (149a8 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   1499c:	4798      	blx	r3
   1499e:	4620      	mov	r0, r4
   149a0:	4b02      	ldr	r3, [pc, #8]	; (149ac <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   149a2:	4798      	blx	r3
{
} //~MemoryManagment_Class
   149a4:	4620      	mov	r0, r4
   149a6:	bd10      	pop	{r4, pc}
   149a8:	00014c33 	.word	0x00014c33
   149ac:	000148d7 	.word	0x000148d7

000149b0 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   149b0:	b538      	push	{r3, r4, r5, lr}
   149b2:	4604      	mov	r4, r0
   149b4:	4b14      	ldr	r3, [pc, #80]	; (14a08 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   149b6:	4798      	blx	r3
   149b8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   149bc:	4b13      	ldr	r3, [pc, #76]	; (14a0c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   149be:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   149c0:	f44f 7500 	mov.w	r5, #512	; 0x200
   149c4:	462a      	mov	r2, r5
   149c6:	2100      	movs	r1, #0
   149c8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   149cc:	4b10      	ldr	r3, [pc, #64]	; (14a10 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   149ce:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   149d0:	2300      	movs	r3, #0
   149d2:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
   149d6:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
   149da:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
   149de:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
   149e2:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
   149e6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
   149ea:	490a      	ldr	r1, [pc, #40]	; (14a14 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   149ec:	f246 3214 	movw	r2, #25364	; 0x6314
   149f0:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   149f2:	4a09      	ldr	r2, [pc, #36]	; (14a18 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   149f4:	6812      	ldr	r2, [r2, #0]
   149f6:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
   149fa:	f246 3118 	movw	r1, #25368	; 0x6318
   149fe:	5062      	str	r2, [r4, r1]
	initiated=false;
   14a00:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
   14a04:	4620      	mov	r0, r4
   14a06:	bd38      	pop	{r3, r4, r5, pc}
   14a08:	000148d5 	.word	0x000148d5
   14a0c:	00014c31 	.word	0x00014c31
   14a10:	0001b215 	.word	0x0001b215
   14a14:	20005a04 	.word	0x20005a04
   14a18:	20005a00 	.word	0x20005a00

00014a1c <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   14a1c:	b510      	push	{r4, lr}
   14a1e:	4604      	mov	r4, r0
		if (qspiFlash.Init())
   14a20:	480a      	ldr	r0, [pc, #40]	; (14a4c <_ZN17MemoryFlash_Class4InitEm+0x30>)
   14a22:	4b0b      	ldr	r3, [pc, #44]	; (14a50 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   14a24:	4798      	blx	r3
   14a26:	b948      	cbnz	r0, 14a3c <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
   14a28:	490a      	ldr	r1, [pc, #40]	; (14a54 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   14a2a:	480b      	ldr	r0, [pc, #44]	; (14a58 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   14a2c:	4b0b      	ldr	r3, [pc, #44]	; (14a5c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   14a2e:	4798      	blx	r3
			initiated=false;
   14a30:	2300      	movs	r3, #0
   14a32:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
   14a36:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
   14a3a:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
   14a3c:	4908      	ldr	r1, [pc, #32]	; (14a60 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   14a3e:	4806      	ldr	r0, [pc, #24]	; (14a58 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   14a40:	4b06      	ldr	r3, [pc, #24]	; (14a5c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   14a42:	4798      	blx	r3
			initiated=true;
   14a44:	2301      	movs	r3, #1
   14a46:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
   14a4a:	e7f4      	b.n	14a36 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   14a4c:	2000dc6c 	.word	0x2000dc6c
   14a50:	00019fd9 	.word	0x00019fd9
   14a54:	0001bc34 	.word	0x0001bc34
   14a58:	20003a78 	.word	0x20003a78
   14a5c:	00012035 	.word	0x00012035
   14a60:	0001bc14 	.word	0x0001bc14

00014a64 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   14a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a66:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   14a68:	4b10      	ldr	r3, [pc, #64]	; (14aac <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   14a6a:	681c      	ldr	r4, [r3, #0]
   14a6c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   14a70:	f246 3314 	movw	r3, #25364	; 0x6314
   14a74:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   14a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14a7a:	4622      	mov	r2, r4
   14a7c:	4629      	mov	r1, r5
   14a7e:	480c      	ldr	r0, [pc, #48]	; (14ab0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   14a80:	4e0c      	ldr	r6, [pc, #48]	; (14ab4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   14a82:	47b0      	blx	r6
	  if (r==0)
   14a84:	4603      	mov	r3, r0
   14a86:	b108      	cbz	r0, 14a8c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   14a88:	4618      	mov	r0, r3
   14a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   14a8c:	683b      	ldr	r3, [r7, #0]
   14a8e:	602b      	str	r3, [r5, #0]
		  qspiFlash.Erase(add);
   14a90:	4e07      	ldr	r6, [pc, #28]	; (14ab0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   14a92:	4621      	mov	r1, r4
   14a94:	4630      	mov	r0, r6
   14a96:	4b08      	ldr	r3, [pc, #32]	; (14ab8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   14a98:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   14a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14a9e:	4622      	mov	r2, r4
   14aa0:	4629      	mov	r1, r5
   14aa2:	4630      	mov	r0, r6
   14aa4:	4c05      	ldr	r4, [pc, #20]	; (14abc <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   14aa6:	47a0      	blx	r4
   14aa8:	4603      	mov	r3, r0
		  return	w;
   14aaa:	e7ed      	b.n	14a88 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   14aac:	20005a00 	.word	0x20005a00
   14ab0:	2000dc6c 	.word	0x2000dc6c
   14ab4:	0001a0a9 	.word	0x0001a0a9
   14ab8:	0001a045 	.word	0x0001a045
   14abc:	0001a075 	.word	0x0001a075

00014ac0 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
   14ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ac4:	4604      	mov	r4, r0
   14ac6:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
   14ac8:	f246 3318 	movw	r3, #25368	; 0x6318
   14acc:	58c3      	ldr	r3, [r0, r3]
   14ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   14ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   14ad6:	d906      	bls.n	14ae6 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
   14ad8:	4b14      	ldr	r3, [pc, #80]	; (14b2c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
   14ae0:	f246 3218 	movw	r2, #25368	; 0x6318
   14ae4:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
   14ae6:	f246 3618 	movw	r6, #25368	; 0x6318
   14aea:	59a1      	ldr	r1, [r4, r6]
   14aec:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   14af0:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
   14af2:	4d0f      	ldr	r5, [pc, #60]	; (14b30 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
   14af4:	4628      	mov	r0, r5
   14af6:	4b0f      	ldr	r3, [pc, #60]	; (14b34 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
   14af8:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
   14afa:	4628      	mov	r0, r5
   14afc:	4f0e      	ldr	r7, [pc, #56]	; (14b38 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
   14afe:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
   14b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14b04:	59a2      	ldr	r2, [r4, r6]
   14b06:	4641      	mov	r1, r8
   14b08:	4628      	mov	r0, r5
   14b0a:	4e0c      	ldr	r6, [pc, #48]	; (14b3c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
   14b0c:	47b0      	blx	r6
   14b0e:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
   14b10:	4628      	mov	r0, r5
   14b12:	47b8      	blx	r7
		   if (w==0)
   14b14:	b12e      	cbz	r6, 14b22 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
   14b16:	4b05      	ldr	r3, [pc, #20]	; (14b2c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   14b18:	6818      	ldr	r0, [r3, #0]
   14b1a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
   14b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
   14b22:	f246 3318 	movw	r3, #25368	; 0x6318
   14b26:	58e0      	ldr	r0, [r4, r3]
   14b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b2c:	20005a00 	.word	0x20005a00
   14b30:	2000dc6c 	.word	0x2000dc6c
   14b34:	0001a045 	.word	0x0001a045
   14b38:	0001a159 	.word	0x0001a159
   14b3c:	0001a075 	.word	0x0001a075

00014b40 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   14b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   14b44:	4c2b      	ldr	r4, [pc, #172]	; (14bf4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   14b46:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   14b4a:	492b      	ldr	r1, [pc, #172]	; (14bf8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   14b4c:	4628      	mov	r0, r5
   14b4e:	4f2b      	ldr	r7, [pc, #172]	; (14bfc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   14b50:	47b8      	blx	r7
   14b52:	4e2b      	ldr	r6, [pc, #172]	; (14c00 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   14b54:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 14c2c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   14b58:	4632      	mov	r2, r6
   14b5a:	4641      	mov	r1, r8
   14b5c:	4628      	mov	r0, r5
   14b5e:	4d29      	ldr	r5, [pc, #164]	; (14c04 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   14b60:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   14b62:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   14b66:	4928      	ldr	r1, [pc, #160]	; (14c08 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   14b68:	4648      	mov	r0, r9
   14b6a:	47b8      	blx	r7
   14b6c:	4632      	mov	r2, r6
   14b6e:	4641      	mov	r1, r8
   14b70:	4648      	mov	r0, r9
   14b72:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   14b74:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   14b78:	4924      	ldr	r1, [pc, #144]	; (14c0c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   14b7a:	4648      	mov	r0, r9
   14b7c:	47b8      	blx	r7
   14b7e:	4632      	mov	r2, r6
   14b80:	4641      	mov	r1, r8
   14b82:	4648      	mov	r0, r9
   14b84:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   14b86:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   14b8a:	4921      	ldr	r1, [pc, #132]	; (14c10 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   14b8c:	4648      	mov	r0, r9
   14b8e:	47b8      	blx	r7
   14b90:	4632      	mov	r2, r6
   14b92:	4641      	mov	r1, r8
   14b94:	4648      	mov	r0, r9
   14b96:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   14b98:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   14b9c:	491d      	ldr	r1, [pc, #116]	; (14c14 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   14b9e:	4648      	mov	r0, r9
   14ba0:	47b8      	blx	r7
   14ba2:	4632      	mov	r2, r6
   14ba4:	4641      	mov	r1, r8
   14ba6:	4648      	mov	r0, r9
   14ba8:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   14baa:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   14bae:	491a      	ldr	r1, [pc, #104]	; (14c18 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   14bb0:	4648      	mov	r0, r9
   14bb2:	47b8      	blx	r7
   14bb4:	4632      	mov	r2, r6
   14bb6:	4641      	mov	r1, r8
   14bb8:	4648      	mov	r0, r9
   14bba:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   14bbc:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   14bc0:	4916      	ldr	r1, [pc, #88]	; (14c1c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   14bc2:	4648      	mov	r0, r9
   14bc4:	47b8      	blx	r7
   14bc6:	4632      	mov	r2, r6
   14bc8:	4641      	mov	r1, r8
   14bca:	4648      	mov	r0, r9
   14bcc:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   14bce:	f1a4 0918 	sub.w	r9, r4, #24
   14bd2:	4913      	ldr	r1, [pc, #76]	; (14c20 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   14bd4:	4648      	mov	r0, r9
   14bd6:	47b8      	blx	r7
   14bd8:	4632      	mov	r2, r6
   14bda:	4641      	mov	r1, r8
   14bdc:	4648      	mov	r0, r9
   14bde:	47a8      	blx	r5
   14be0:	3408      	adds	r4, #8
   14be2:	4620      	mov	r0, r4
   14be4:	4b0f      	ldr	r3, [pc, #60]	; (14c24 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   14be6:	4798      	blx	r3
   14be8:	4632      	mov	r2, r6
   14bea:	490f      	ldr	r1, [pc, #60]	; (14c28 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   14bec:	4620      	mov	r0, r4
   14bee:	47a8      	blx	r5
   14bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14bf4:	20006afc 	.word	0x20006afc
   14bf8:	2000df58 	.word	0x2000df58
   14bfc:	000104e5 	.word	0x000104e5
   14c00:	20000000 	.word	0x20000000
   14c04:	0001ab61 	.word	0x0001ab61
   14c08:	2000dfec 	.word	0x2000dfec
   14c0c:	2000e110 	.word	0x2000e110
   14c10:	2000e00c 	.word	0x2000e00c
   14c14:	2000e0d0 	.word	0x2000e0d0
   14c18:	2000e0f0 	.word	0x2000e0f0
   14c1c:	2000dfc8 	.word	0x2000dfc8
   14c20:	2000e068 	.word	0x2000e068
   14c24:	000149b1 	.word	0x000149b1
   14c28:	00014995 	.word	0x00014995
   14c2c:	0001051d 	.word	0x0001051d

00014c30 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   14c30:	4770      	bx	lr

00014c32 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   14c32:	4770      	bx	lr

00014c34 <_ZN12Scavenge_FanD1Ev>:
} //Scavenge_Fan

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
   14c34:	4770      	bx	lr
	...

00014c38 <_ZN12Scavenge_Fan9SetEnableEb>:
	

	return r;
	
}
uint8_t	Scavenge_Fan::SetEnable(bool state){
   14c38:	b510      	push	{r4, lr}
   14c3a:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
   14c3c:	f081 0201 	eor.w	r2, r1, #1
   14c40:	2101      	movs	r1, #1
   14c42:	6880      	ldr	r0, [r0, #8]
   14c44:	4b01      	ldr	r3, [pc, #4]	; (14c4c <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
   14c46:	4798      	blx	r3
   14c48:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
   14c4a:	bd10      	pop	{r4, pc}
   14c4c:	00010235 	.word	0x00010235

00014c50 <_ZN12Scavenge_Fan10IsLowSpeedEv>:

bool Scavenge_Fan::IsLowSpeed(void){
	low_speed=false;
   14c50:	2300      	movs	r3, #0
   14c52:	7443      	strb	r3, [r0, #17]
	for (uint8_t i = 0; i < TACHO_SIGNAL_BUFFER_SIZE-1; i++)
	{	
		if (low_speed_array[i])
   14c54:	4b11      	ldr	r3, [pc, #68]	; (14c9c <_ZN12Scavenge_Fan10IsLowSpeedEv+0x4c>)
   14c56:	781b      	ldrb	r3, [r3, #0]
   14c58:	b9cb      	cbnz	r3, 14c8e <_ZN12Scavenge_Fan10IsLowSpeedEv+0x3e>
			low_speed=true;
			break;
		} 
		else
		{
			if (low_speed_array[i]==low_speed_array[i+1])
   14c5a:	4b10      	ldr	r3, [pc, #64]	; (14c9c <_ZN12Scavenge_Fan10IsLowSpeedEv+0x4c>)
   14c5c:	785b      	ldrb	r3, [r3, #1]
   14c5e:	b9d3      	cbnz	r3, 14c96 <_ZN12Scavenge_Fan10IsLowSpeedEv+0x46>
bool Scavenge_Fan::IsLowSpeed(void){
   14c60:	b410      	push	{r4}
			if (low_speed_array[i]==low_speed_array[i+1])
   14c62:	2301      	movs	r3, #1
   14c64:	461a      	mov	r2, r3
		if (low_speed_array[i])
   14c66:	490d      	ldr	r1, [pc, #52]	; (14c9c <_ZN12Scavenge_Fan10IsLowSpeedEv+0x4c>)
   14c68:	5c8c      	ldrb	r4, [r1, r2]
   14c6a:	b954      	cbnz	r4, 14c82 <_ZN12Scavenge_Fan10IsLowSpeedEv+0x32>
			if (low_speed_array[i]==low_speed_array[i+1])
   14c6c:	440a      	add	r2, r1
   14c6e:	7852      	ldrb	r2, [r2, #1]
   14c70:	b952      	cbnz	r2, 14c88 <_ZN12Scavenge_Fan10IsLowSpeedEv+0x38>
	for (uint8_t i = 0; i < TACHO_SIGNAL_BUFFER_SIZE-1; i++)
   14c72:	3301      	adds	r3, #1
   14c74:	b2db      	uxtb	r3, r3
   14c76:	461a      	mov	r2, r3
   14c78:	2b0e      	cmp	r3, #14
   14c7a:	ddf5      	ble.n	14c68 <_ZN12Scavenge_Fan10IsLowSpeedEv+0x18>
		}
		
		
	}
	return low_speed;
}
   14c7c:	7c40      	ldrb	r0, [r0, #17]
   14c7e:	bc10      	pop	{r4}
   14c80:	4770      	bx	lr
			low_speed=true;
   14c82:	2301      	movs	r3, #1
   14c84:	7443      	strb	r3, [r0, #17]
			break;
   14c86:	e7f9      	b.n	14c7c <_ZN12Scavenge_Fan10IsLowSpeedEv+0x2c>
				low_speed=true;
   14c88:	2301      	movs	r3, #1
   14c8a:	7443      	strb	r3, [r0, #17]
				break;
   14c8c:	e7f6      	b.n	14c7c <_ZN12Scavenge_Fan10IsLowSpeedEv+0x2c>
			low_speed=true;
   14c8e:	2301      	movs	r3, #1
   14c90:	7443      	strb	r3, [r0, #17]
}
   14c92:	7c40      	ldrb	r0, [r0, #17]
   14c94:	4770      	bx	lr
				low_speed=true;
   14c96:	2301      	movs	r3, #1
   14c98:	7443      	strb	r3, [r0, #17]
   14c9a:	e7fa      	b.n	14c92 <_ZN12Scavenge_Fan10IsLowSpeedEv+0x42>
   14c9c:	2000ce20 	.word	0x2000ce20

00014ca0 <_ZN12Scavenge_Fan10ReadStatusEv>:
uint8_t	Scavenge_Fan::ReadStatus(void){
   14ca0:	b538      	push	{r3, r4, r5, lr}
   14ca2:	4605      	mov	r5, r0
	uint8_t r=expander->ReadGPIORegister();
   14ca4:	6880      	ldr	r0, [r0, #8]
   14ca6:	4b0a      	ldr	r3, [pc, #40]	; (14cd0 <_ZN12Scavenge_Fan10ReadStatusEv+0x30>)
   14ca8:	4798      	blx	r3
	scavengeData.tempFault=r&(0x01<<(7));
   14caa:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   14cae:	70eb      	strb	r3, [r5, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
   14cb0:	f3c0 1380 	ubfx	r3, r0, #6, #1
   14cb4:	712b      	strb	r3, [r5, #4]
	scavengeData.relayFault=r&(0x01<<(4));
   14cb6:	f3c0 1300 	ubfx	r3, r0, #4, #1
   14cba:	716b      	strb	r3, [r5, #5]
	r&=0xfe;
   14cbc:	f000 04fe 	and.w	r4, r0, #254	; 0xfe
	if (IsLowSpeed())
   14cc0:	4628      	mov	r0, r5
   14cc2:	4b04      	ldr	r3, [pc, #16]	; (14cd4 <_ZN12Scavenge_Fan10ReadStatusEv+0x34>)
   14cc4:	4798      	blx	r3
   14cc6:	b108      	cbz	r0, 14ccc <_ZN12Scavenge_Fan10ReadStatusEv+0x2c>
		r|=0x01;
   14cc8:	f044 0401 	orr.w	r4, r4, #1
}
   14ccc:	4620      	mov	r0, r4
   14cce:	bd38      	pop	{r3, r4, r5, pc}
   14cd0:	0000ff7d 	.word	0x0000ff7d
   14cd4:	00014c51 	.word	0x00014c51

00014cd8 <_ZN12Scavenge_Fan16FillLowSpeedFIFOEv>:
	
void Scavenge_Fan::FillLowSpeedFIFO(void){
   14cd8:	b508      	push	{r3, lr}
	uint8_t r=expander->ReadGPIORegister();
   14cda:	6880      	ldr	r0, [r0, #8]
   14cdc:	4b08      	ldr	r3, [pc, #32]	; (14d00 <_ZN12Scavenge_Fan16FillLowSpeedFIFOEv+0x28>)
   14cde:	4798      	blx	r3
   14ce0:	4908      	ldr	r1, [pc, #32]	; (14d04 <_ZN12Scavenge_Fan16FillLowSpeedFIFOEv+0x2c>)
   14ce2:	f101 030f 	add.w	r3, r1, #15
	for (uint8_t i = 0; i < TACHO_SIGNAL_BUFFER_SIZE-1; i++)
	{
		low_speed_array[TACHO_SIGNAL_BUFFER_SIZE-1-i]=low_speed_array[TACHO_SIGNAL_BUFFER_SIZE-2-i];
   14ce6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   14cea:	f803 2901 	strb.w	r2, [r3], #-1
	for (uint8_t i = 0; i < TACHO_SIGNAL_BUFFER_SIZE-1; i++)
   14cee:	428b      	cmp	r3, r1
   14cf0:	d1f9      	bne.n	14ce6 <_ZN12Scavenge_Fan16FillLowSpeedFIFOEv+0xe>
	}
	low_speed_array[0]=(!(r>>6))&0x01;
   14cf2:	0983      	lsrs	r3, r0, #6
   14cf4:	bf0c      	ite	eq
   14cf6:	2201      	moveq	r2, #1
   14cf8:	2200      	movne	r2, #0
   14cfa:	4b02      	ldr	r3, [pc, #8]	; (14d04 <_ZN12Scavenge_Fan16FillLowSpeedFIFOEv+0x2c>)
   14cfc:	701a      	strb	r2, [r3, #0]
   14cfe:	bd08      	pop	{r3, pc}
   14d00:	0000ff7d 	.word	0x0000ff7d
   14d04:	2000ce20 	.word	0x2000ce20

00014d08 <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
   14d08:	b510      	push	{r4, lr}
   14d0a:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
   14d0c:	4b05      	ldr	r3, [pc, #20]	; (14d24 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
   14d0e:	4798      	blx	r3
   14d10:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
   14d14:	280c      	cmp	r0, #12
	{
		bool_result=false;
   14d16:	bfd4      	ite	le
   14d18:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
   14d1a:	2301      	movgt	r3, #1
   14d1c:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
}
   14d1e:	7c20      	ldrb	r0, [r4, #16]
   14d20:	bd10      	pop	{r4, pc}
   14d22:	bf00      	nop
   14d24:	00014ca1 	.word	0x00014ca1

00014d28 <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
   14d28:	b510      	push	{r4, lr}
   14d2a:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
   14d2c:	480e      	ldr	r0, [pc, #56]	; (14d68 <_ZN12Scavenge_Fan4InitEv+0x40>)
   14d2e:	f100 0210 	add.w	r2, r0, #16
   14d32:	60e2      	str	r2, [r4, #12]
	expander=&local_expander;
   14d34:	3028      	adds	r0, #40	; 0x28
   14d36:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
   14d38:	2124      	movs	r1, #36	; 0x24
   14d3a:	4b0c      	ldr	r3, [pc, #48]	; (14d6c <_ZN12Scavenge_Fan4InitEv+0x44>)
   14d3c:	4798      	blx	r3
	if (i2c->initiated)
   14d3e:	68e0      	ldr	r0, [r4, #12]
   14d40:	7a03      	ldrb	r3, [r0, #8]
   14d42:	b123      	cbz	r3, 14d4e <_ZN12Scavenge_Fan4InitEv+0x26>
	if (i2c->isOK)
   14d44:	68e3      	ldr	r3, [r4, #12]
   14d46:	7a5b      	ldrb	r3, [r3, #9]
   14d48:	b923      	cbnz	r3, 14d54 <_ZN12Scavenge_Fan4InitEv+0x2c>
}
   14d4a:	78a0      	ldrb	r0, [r4, #2]
   14d4c:	bd10      	pop	{r4, pc}
		i2c->Init();
   14d4e:	4b08      	ldr	r3, [pc, #32]	; (14d70 <_ZN12Scavenge_Fan4InitEv+0x48>)
   14d50:	4798      	blx	r3
   14d52:	e7f7      	b.n	14d44 <_ZN12Scavenge_Fan4InitEv+0x1c>
		expander->SetPortInput(0xf0);
   14d54:	21f0      	movs	r1, #240	; 0xf0
   14d56:	68a0      	ldr	r0, [r4, #8]
   14d58:	4b06      	ldr	r3, [pc, #24]	; (14d74 <_ZN12Scavenge_Fan4InitEv+0x4c>)
   14d5a:	4798      	blx	r3
		isOK=SelfTest();
   14d5c:	4620      	mov	r0, r4
   14d5e:	4b06      	ldr	r3, [pc, #24]	; (14d78 <_ZN12Scavenge_Fan4InitEv+0x50>)
   14d60:	4798      	blx	r3
   14d62:	70a0      	strb	r0, [r4, #2]
   14d64:	e7f1      	b.n	14d4a <_ZN12Scavenge_Fan4InitEv+0x22>
   14d66:	bf00      	nop
   14d68:	2000ce20 	.word	0x2000ce20
   14d6c:	0000fe99 	.word	0x0000fe99
   14d70:	0000fce5 	.word	0x0000fce5
   14d74:	00010081 	.word	0x00010081
   14d78:	00014d09 	.word	0x00014d09

00014d7c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
   14d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   14d7e:	4c0f      	ldr	r4, [pc, #60]	; (14dbc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
   14d80:	f104 0510 	add.w	r5, r4, #16
   14d84:	490e      	ldr	r1, [pc, #56]	; (14dc0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
   14d86:	4628      	mov	r0, r5
   14d88:	4b0e      	ldr	r3, [pc, #56]	; (14dc4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
   14d8a:	4798      	blx	r3
   14d8c:	4e0e      	ldr	r6, [pc, #56]	; (14dc8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x4c>)
   14d8e:	4632      	mov	r2, r6
   14d90:	490e      	ldr	r1, [pc, #56]	; (14dcc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x50>)
   14d92:	4628      	mov	r0, r5
   14d94:	4d0e      	ldr	r5, [pc, #56]	; (14dd0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x54>)
   14d96:	47a8      	blx	r5
static MCP23008_Class local_expander;
   14d98:	f104 0728 	add.w	r7, r4, #40	; 0x28
   14d9c:	4638      	mov	r0, r7
   14d9e:	4b0d      	ldr	r3, [pc, #52]	; (14dd4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x58>)
   14da0:	4798      	blx	r3
   14da2:	4632      	mov	r2, r6
   14da4:	490c      	ldr	r1, [pc, #48]	; (14dd8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x5c>)
   14da6:	4638      	mov	r0, r7
   14da8:	47a8      	blx	r5
	isOK=false;
   14daa:	2300      	movs	r3, #0
   14dac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
   14db0:	4632      	mov	r2, r6
   14db2:	490a      	ldr	r1, [pc, #40]	; (14ddc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x60>)
   14db4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   14db8:	47a8      	blx	r5
   14dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14dbc:	2000ce20 	.word	0x2000ce20
   14dc0:	2000e088 	.word	0x2000e088
   14dc4:	0000fcb5 	.word	0x0000fcb5
   14dc8:	20000000 	.word	0x20000000
   14dcc:	0000fcd1 	.word	0x0000fcd1
   14dd0:	0001ab61 	.word	0x0001ab61
   14dd4:	0000fe71 	.word	0x0000fe71
   14dd8:	0000fe85 	.word	0x0000fe85
   14ddc:	00014c35 	.word	0x00014c35

00014de0 <_ZL17ConversionTimeoutPK10timer_task>:
	temperatures.converterReady[2]=true;
	temperatures.SetModuleReady(2);
	temperatures.converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	temperatures.converterTimeout=true;
   14de0:	2201      	movs	r2, #1
   14de2:	4b02      	ldr	r3, [pc, #8]	; (14dec <_ZL17ConversionTimeoutPK10timer_task+0xc>)
   14de4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   14de8:	bf00      	nop
   14dea:	4770      	bx	lr
   14dec:	2000ce78 	.word	0x2000ce78

00014df0 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   14df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14df2:	4607      	mov	r7, r0
   14df4:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   14df8:	d007      	beq.n	14e0a <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   14dfa:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   14dfe:	4e05      	ldr	r6, [pc, #20]	; (14e14 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   14e00:	3c68      	subs	r4, #104	; 0x68
   14e02:	4620      	mov	r0, r4
   14e04:	47b0      	blx	r6
   14e06:	42a5      	cmp	r5, r4
   14e08:	d1fa      	bne.n	14e00 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   14e0a:	4638      	mov	r0, r7
   14e0c:	4b02      	ldr	r3, [pc, #8]	; (14e18 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   14e0e:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   14e10:	4638      	mov	r0, r7
   14e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e14:	00018e55 	.word	0x00018e55
   14e18:	00018e55 	.word	0x00018e55

00014e1c <_ZL15Converter1Readyv>:
	temperatures.converterReady[0]=true;
   14e1c:	4b05      	ldr	r3, [pc, #20]	; (14e34 <_ZL15Converter1Readyv+0x18>)
   14e1e:	2201      	movs	r2, #1
   14e20:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsOneConversionFinished(){
	return converterReady[0]|converterReady[1]|converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   14e24:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   14e28:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	temperatures.converterTimeout=false;
   14e2c:	2200      	movs	r2, #0
   14e2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14e32:	4770      	bx	lr
   14e34:	2000ce78 	.word	0x2000ce78

00014e38 <_ZL15Converter2Readyv>:
	temperatures.converterReady[1]=true;
   14e38:	4b05      	ldr	r3, [pc, #20]	; (14e50 <_ZL15Converter2Readyv+0x18>)
   14e3a:	2201      	movs	r2, #1
   14e3c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   14e40:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   14e44:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	temperatures.converterTimeout=false;
   14e48:	2200      	movs	r2, #0
   14e4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14e4e:	4770      	bx	lr
   14e50:	2000ce78 	.word	0x2000ce78

00014e54 <_ZL15Converter3Readyv>:
	temperatures.converterReady[2]=true;
   14e54:	4b05      	ldr	r3, [pc, #20]	; (14e6c <_ZL15Converter3Readyv+0x18>)
   14e56:	2201      	movs	r2, #1
   14e58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   14e5c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   14e60:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	temperatures.converterTimeout=false;
   14e64:	2200      	movs	r2, #0
   14e66:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14e6a:	4770      	bx	lr
   14e6c:	2000ce78 	.word	0x2000ce78

00014e70 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   14e70:	b570      	push	{r4, r5, r6, lr}
   14e72:	4604      	mov	r4, r0
   14e74:	460e      	mov	r6, r1
   14e76:	4b0b      	ldr	r3, [pc, #44]	; (14ea4 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   14e78:	4798      	blx	r3
   14e7a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   14e7e:	4d0a      	ldr	r5, [pc, #40]	; (14ea8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   14e80:	47a8      	blx	r5
   14e82:	f504 7088 	add.w	r0, r4, #272	; 0x110
   14e86:	47a8      	blx	r5
   14e88:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   14e8c:	47a8      	blx	r5
		spiLite=&ltSPI;
   14e8e:	4b07      	ldr	r3, [pc, #28]	; (14eac <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x3c>)
   14e90:	f503 7201 	add.w	r2, r3, #516	; 0x204
   14e94:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   14e98:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
		SPIA=SPI_LTC;
   14e9c:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   14ea0:	4620      	mov	r0, r4
   14ea2:	bd70      	pop	{r4, r5, r6, pc}
   14ea4:	00018e41 	.word	0x00018e41
   14ea8:	00018e41 	.word	0x00018e41
   14eac:	2000ce78 	.word	0x2000ce78

00014eb0 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   14eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb4:	4605      	mov	r5, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   14eb6:	233d      	movs	r3, #61	; 0x3d
   14eb8:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   14ebc:	231b      	movs	r3, #27
   14ebe:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   14ec2:	2327      	movs	r3, #39	; 0x27
   14ec4:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   14ec8:	f500 77f0 	add.w	r7, r0, #480	; 0x1e0
   14ecc:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
   14ed0:	2400      	movs	r4, #0
		module[ii].Init(csPins[ii],spiLite);
   14ed2:	f8df b038 	ldr.w	fp, [pc, #56]	; 14f0c <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   14ed6:	f8df a038 	ldr.w	sl, [pc, #56]	; 14f10 <_ZN24TemperatureSensors_Class11InitModulesEv+0x60>
   14eda:	f8df 9038 	ldr.w	r9, [pc, #56]	; 14f14 <_ZN24TemperatureSensors_Class11InitModulesEv+0x64>
		module[ii].Init(csPins[ii],spiLite);
   14ede:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   14ee2:	f857 1b04 	ldr.w	r1, [r7], #4
   14ee6:	4630      	mov	r0, r6
   14ee8:	47d8      	blx	fp
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   14eea:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
   14eee:	f083 0301 	eor.w	r3, r3, #1
   14ef2:	b2e2      	uxtb	r2, r4
   14ef4:	4651      	mov	r1, sl
   14ef6:	4648      	mov	r0, r9
   14ef8:	f8df 801c 	ldr.w	r8, [pc, #28]	; 14f18 <_ZN24TemperatureSensors_Class11InitModulesEv+0x68>
   14efc:	47c0      	blx	r8
   14efe:	3401      	adds	r4, #1
   14f00:	3668      	adds	r6, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   14f02:	2c03      	cmp	r4, #3
   14f04:	d1eb      	bne.n	14ede <_ZN24TemperatureSensors_Class11InitModulesEv+0x2e>
}
   14f06:	2001      	movs	r0, #1
   14f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f0c:	00018e69 	.word	0x00018e69
   14f10:	0001bc54 	.word	0x0001bc54
   14f14:	20003a78 	.word	0x20003a78
   14f18:	00011e6d 	.word	0x00011e6d

00014f1c <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   14f1c:	b538      	push	{r3, r4, r5, lr}
   14f1e:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   14f20:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   14f24:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   14f28:	4b1d      	ldr	r3, [pc, #116]	; (14fa0 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   14f2a:	4798      	blx	r3
	spiLite->init();
   14f2c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   14f30:	4b1c      	ldr	r3, [pc, #112]	; (14fa4 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   14f32:	4798      	blx	r3
	if (spiLite->ready)
   14f34:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   14f38:	781b      	ldrb	r3, [r3, #0]
   14f3a:	bb63      	cbnz	r3, 14f96 <_ZN24TemperatureSensors_Class4InitEv+0x7a>
		logger.SaveEvent("SPI Temperatures Failed");
   14f3c:	491a      	ldr	r1, [pc, #104]	; (14fa8 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   14f3e:	481b      	ldr	r0, [pc, #108]	; (14fac <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   14f40:	4b1b      	ldr	r3, [pc, #108]	; (14fb0 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   14f42:	4798      	blx	r3
	ptrTemperaturesClass=this;
   14f44:	4b1b      	ldr	r3, [pc, #108]	; (14fb4 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   14f46:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	ext_irq_register(PIN_PB08, Converter1Ready);
   14f4a:	491b      	ldr	r1, [pc, #108]	; (14fb8 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   14f4c:	2028      	movs	r0, #40	; 0x28
   14f4e:	4d1b      	ldr	r5, [pc, #108]	; (14fbc <_ZN24TemperatureSensors_Class4InitEv+0xa0>)
   14f50:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   14f52:	491b      	ldr	r1, [pc, #108]	; (14fc0 <_ZN24TemperatureSensors_Class4InitEv+0xa4>)
   14f54:	2029      	movs	r0, #41	; 0x29
   14f56:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   14f58:	491a      	ldr	r1, [pc, #104]	; (14fc4 <_ZN24TemperatureSensors_Class4InitEv+0xa8>)
   14f5a:	2021      	movs	r0, #33	; 0x21
   14f5c:	47a8      	blx	r5
	InitModules();
   14f5e:	4620      	mov	r0, r4
   14f60:	4b19      	ldr	r3, [pc, #100]	; (14fc8 <_ZN24TemperatureSensors_Class4InitEv+0xac>)
   14f62:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   14f64:	2301      	movs	r3, #1
   14f66:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   14f6a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   14f6e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   14f72:	2300      	movs	r3, #0
   14f74:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
   14f78:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
   14f7c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   14f80:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   14f84:	4013      	ands	r3, r2
   14f86:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   14f8a:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   14f8c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   14f90:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   14f94:	bd38      	pop	{r3, r4, r5, pc}
		logger.SaveEvent("SPI Temperatures Started");
   14f96:	490d      	ldr	r1, [pc, #52]	; (14fcc <_ZN24TemperatureSensors_Class4InitEv+0xb0>)
   14f98:	4804      	ldr	r0, [pc, #16]	; (14fac <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   14f9a:	4b05      	ldr	r3, [pc, #20]	; (14fb0 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   14f9c:	4798      	blx	r3
   14f9e:	e7d1      	b.n	14f44 <_ZN24TemperatureSensors_Class4InitEv+0x28>
   14fa0:	00019775 	.word	0x00019775
   14fa4:	00019719 	.word	0x00019719
   14fa8:	0001bc78 	.word	0x0001bc78
   14fac:	20003a78 	.word	0x20003a78
   14fb0:	00012035 	.word	0x00012035
   14fb4:	2000ce78 	.word	0x2000ce78
   14fb8:	00014e1d 	.word	0x00014e1d
   14fbc:	0000375d 	.word	0x0000375d
   14fc0:	00014e39 	.word	0x00014e39
   14fc4:	00014e55 	.word	0x00014e55
   14fc8:	00014eb1 	.word	0x00014eb1
   14fcc:	0001bc5c 	.word	0x0001bc5c

00014fd0 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   14fd0:	b510      	push	{r4, lr}
   14fd2:	4604      	mov	r4, r0
	converterTimeout=false;
   14fd4:	2200      	movs	r2, #0
   14fd6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   14fda:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
   14fde:	4403      	add	r3, r0
   14fe0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   14fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14fe8:	4907      	ldr	r1, [pc, #28]	; (15008 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   14fea:	4808      	ldr	r0, [pc, #32]	; (1500c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   14fec:	4b08      	ldr	r3, [pc, #32]	; (15010 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   14fee:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   14ff0:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   14ff4:	2368      	movs	r3, #104	; 0x68
   14ff6:	fb03 4000 	mla	r0, r3, r0, r4
   14ffa:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   14ffe:	30a8      	adds	r0, #168	; 0xa8
   15000:	4b04      	ldr	r3, [pc, #16]	; (15014 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   15002:	4798      	blx	r3
   15004:	bd10      	pop	{r4, pc}
   15006:	bf00      	nop
   15008:	00014de1 	.word	0x00014de1
   1500c:	2000d094 	.word	0x2000d094
   15010:	000107b9 	.word	0x000107b9
   15014:	00018f5d 	.word	0x00018f5d

00015018 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   15018:	b538      	push	{r3, r4, r5, lr}
   1501a:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   1501c:	491e      	ldr	r1, [pc, #120]	; (15098 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   1501e:	481f      	ldr	r0, [pc, #124]	; (1509c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   15020:	4b1f      	ldr	r3, [pc, #124]	; (150a0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   15022:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   15024:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   15028:	2568      	movs	r5, #104	; 0x68
   1502a:	fb05 4000 	mla	r0, r5, r0, r4
   1502e:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   15032:	30a8      	adds	r0, #168	; 0xa8
   15034:	4b1b      	ldr	r3, [pc, #108]	; (150a4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   15036:	4798      	blx	r3
   15038:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   1503c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
   15040:	fb05 4502 	mla	r5, r5, r2, r4
   15044:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   15048:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   1504c:	2b01      	cmp	r3, #1
   1504e:	d00d      	beq.n	1506c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   15050:	4b15      	ldr	r3, [pc, #84]	; (150a8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   15052:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   15056:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   1505a:	3301      	adds	r3, #1
   1505c:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   1505e:	2b04      	cmp	r3, #4
   15060:	d00c      	beq.n	1507c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   15062:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
   15066:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1506a:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   1506c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   15070:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   15074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   15078:	66d8      	str	r0, [r3, #108]	; 0x6c
   1507a:	e7ec      	b.n	15056 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   1507c:	2300      	movs	r3, #0
   1507e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
		currentModule++;
   15082:	3201      	adds	r2, #1
   15084:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   15086:	2a03      	cmp	r2, #3
		currentModule++;
   15088:	bf12      	itee	ne
   1508a:	f884 21ff 	strbne.w	r2, [r4, #511]	; 0x1ff
			currentModule=0;
   1508e:	2300      	moveq	r3, #0
   15090:	f884 31ff 	strbeq.w	r3, [r4, #511]	; 0x1ff
   15094:	e7e7      	b.n	15066 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   15096:	bf00      	nop
   15098:	00014de1 	.word	0x00014de1
   1509c:	2000d094 	.word	0x2000d094
   150a0:	00010761 	.word	0x00010761
   150a4:	00019065 	.word	0x00019065
   150a8:	c479c000 	.word	0xc479c000

000150ac <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   150ac:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   150b0:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   150b4:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   150b8:	4013      	ands	r3, r2
}
   150ba:	4018      	ands	r0, r3
   150bc:	4770      	bx	lr
	...

000150c0 <_GLOBAL__sub_I_ptrTemperaturesClass>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   150c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   150c4:	4c30      	ldr	r4, [pc, #192]	; (15188 <_GLOBAL__sub_I_ptrTemperaturesClass+0xc8>)
   150c6:	f504 7507 	add.w	r5, r4, #540	; 0x21c
   150ca:	4930      	ldr	r1, [pc, #192]	; (1518c <_GLOBAL__sub_I_ptrTemperaturesClass+0xcc>)
   150cc:	4628      	mov	r0, r5
   150ce:	4f30      	ldr	r7, [pc, #192]	; (15190 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd0>)
   150d0:	47b8      	blx	r7
   150d2:	4e30      	ldr	r6, [pc, #192]	; (15194 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd4>)
   150d4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 151cc <_GLOBAL__sub_I_ptrTemperaturesClass+0x10c>
   150d8:	4632      	mov	r2, r6
   150da:	4641      	mov	r1, r8
   150dc:	4628      	mov	r0, r5
   150de:	4d2e      	ldr	r5, [pc, #184]	; (15198 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd8>)
   150e0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   150e2:	f504 790f 	add.w	r9, r4, #572	; 0x23c
   150e6:	492d      	ldr	r1, [pc, #180]	; (1519c <_GLOBAL__sub_I_ptrTemperaturesClass+0xdc>)
   150e8:	4648      	mov	r0, r9
   150ea:	47b8      	blx	r7
   150ec:	4632      	mov	r2, r6
   150ee:	4641      	mov	r1, r8
   150f0:	4648      	mov	r0, r9
   150f2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   150f4:	f504 7917 	add.w	r9, r4, #604	; 0x25c
   150f8:	4929      	ldr	r1, [pc, #164]	; (151a0 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe0>)
   150fa:	4648      	mov	r0, r9
   150fc:	47b8      	blx	r7
   150fe:	4632      	mov	r2, r6
   15100:	4641      	mov	r1, r8
   15102:	4648      	mov	r0, r9
   15104:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   15106:	f504 791f 	add.w	r9, r4, #636	; 0x27c
   1510a:	4926      	ldr	r1, [pc, #152]	; (151a4 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe4>)
   1510c:	4648      	mov	r0, r9
   1510e:	47b8      	blx	r7
   15110:	4632      	mov	r2, r6
   15112:	4641      	mov	r1, r8
   15114:	4648      	mov	r0, r9
   15116:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   15118:	f504 7927 	add.w	r9, r4, #668	; 0x29c
   1511c:	4922      	ldr	r1, [pc, #136]	; (151a8 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe8>)
   1511e:	4648      	mov	r0, r9
   15120:	47b8      	blx	r7
   15122:	4632      	mov	r2, r6
   15124:	4641      	mov	r1, r8
   15126:	4648      	mov	r0, r9
   15128:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1512a:	f504 792f 	add.w	r9, r4, #700	; 0x2bc
   1512e:	491f      	ldr	r1, [pc, #124]	; (151ac <_GLOBAL__sub_I_ptrTemperaturesClass+0xec>)
   15130:	4648      	mov	r0, r9
   15132:	47b8      	blx	r7
   15134:	4632      	mov	r2, r6
   15136:	4641      	mov	r1, r8
   15138:	4648      	mov	r0, r9
   1513a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1513c:	f504 7937 	add.w	r9, r4, #732	; 0x2dc
   15140:	491b      	ldr	r1, [pc, #108]	; (151b0 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf0>)
   15142:	4648      	mov	r0, r9
   15144:	47b8      	blx	r7
   15146:	4632      	mov	r2, r6
   15148:	4641      	mov	r1, r8
   1514a:	4648      	mov	r0, r9
   1514c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   1514e:	f504 793f 	add.w	r9, r4, #764	; 0x2fc
   15152:	4918      	ldr	r1, [pc, #96]	; (151b4 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf4>)
   15154:	4648      	mov	r0, r9
   15156:	47b8      	blx	r7
   15158:	4632      	mov	r2, r6
   1515a:	4641      	mov	r1, r8
   1515c:	4648      	mov	r0, r9
   1515e:	47a8      	blx	r5
static LT_SPI	ltSPI;
   15160:	f504 7701 	add.w	r7, r4, #516	; 0x204
   15164:	4638      	mov	r0, r7
   15166:	4b14      	ldr	r3, [pc, #80]	; (151b8 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf8>)
   15168:	4798      	blx	r3
   1516a:	4632      	mov	r2, r6
   1516c:	4913      	ldr	r1, [pc, #76]	; (151bc <_GLOBAL__sub_I_ptrTemperaturesClass+0xfc>)
   1516e:	4638      	mov	r0, r7
   15170:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   15172:	4913      	ldr	r1, [pc, #76]	; (151c0 <_GLOBAL__sub_I_ptrTemperaturesClass+0x100>)
   15174:	4620      	mov	r0, r4
   15176:	4b13      	ldr	r3, [pc, #76]	; (151c4 <_GLOBAL__sub_I_ptrTemperaturesClass+0x104>)
   15178:	4798      	blx	r3
   1517a:	4632      	mov	r2, r6
   1517c:	4912      	ldr	r1, [pc, #72]	; (151c8 <_GLOBAL__sub_I_ptrTemperaturesClass+0x108>)
   1517e:	4620      	mov	r0, r4
   15180:	47a8      	blx	r5
   15182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15186:	bf00      	nop
   15188:	2000ce78 	.word	0x2000ce78
   1518c:	2000df58 	.word	0x2000df58
   15190:	000104e5 	.word	0x000104e5
   15194:	20000000 	.word	0x20000000
   15198:	0001ab61 	.word	0x0001ab61
   1519c:	2000dfec 	.word	0x2000dfec
   151a0:	2000e110 	.word	0x2000e110
   151a4:	2000e00c 	.word	0x2000e00c
   151a8:	2000e0d0 	.word	0x2000e0d0
   151ac:	2000e0f0 	.word	0x2000e0f0
   151b0:	2000dfc8 	.word	0x2000dfc8
   151b4:	2000e068 	.word	0x2000e068
   151b8:	000196dd 	.word	0x000196dd
   151bc:	00019705 	.word	0x00019705
   151c0:	2000df90 	.word	0x2000df90
   151c4:	00014e71 	.word	0x00014e71
   151c8:	00014df1 	.word	0x00014df1
   151cc:	0001051d 	.word	0x0001051d

000151d0 <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
   151d0:	b580      	push	{r7, lr}
   151d2:	b082      	sub	sp, #8
   151d4:	af00      	add	r7, sp, #0
   151d6:	6078      	str	r0, [r7, #4]
   151d8:	687b      	ldr	r3, [r7, #4]
   151da:	4618      	mov	r0, r3
   151dc:	4b06      	ldr	r3, [pc, #24]	; (151f8 <_ZN13CANOpen_ClassC1Ev+0x28>)
   151de:	4798      	blx	r3
   151e0:	4a06      	ldr	r2, [pc, #24]	; (151fc <_ZN13CANOpen_ClassC1Ev+0x2c>)
   151e2:	687b      	ldr	r3, [r7, #4]
   151e4:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   151e6:	4a06      	ldr	r2, [pc, #24]	; (15200 <_ZN13CANOpen_ClassC1Ev+0x30>)
   151e8:	687b      	ldr	r3, [r7, #4]
   151ea:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
   151ec:	687b      	ldr	r3, [r7, #4]
   151ee:	4618      	mov	r0, r3
   151f0:	3708      	adds	r7, #8
   151f2:	46bd      	mov	sp, r7
   151f4:	bd80      	pop	{r7, pc}
   151f6:	bf00      	nop
   151f8:	00015385 	.word	0x00015385
   151fc:	0001bc98 	.word	0x0001bc98
   15200:	2000d194 	.word	0x2000d194

00015204 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
   15204:	b580      	push	{r7, lr}
   15206:	b082      	sub	sp, #8
   15208:	af00      	add	r7, sp, #0
   1520a:	6078      	str	r0, [r7, #4]
   1520c:	6039      	str	r1, [r7, #0]
   1520e:	687b      	ldr	r3, [r7, #4]
   15210:	4618      	mov	r0, r3
   15212:	4b08      	ldr	r3, [pc, #32]	; (15234 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
   15214:	4798      	blx	r3
   15216:	4a08      	ldr	r2, [pc, #32]	; (15238 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
   15218:	687b      	ldr	r3, [r7, #4]
   1521a:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   1521c:	4a07      	ldr	r2, [pc, #28]	; (1523c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
   1521e:	687b      	ldr	r3, [r7, #4]
   15220:	6013      	str	r3, [r2, #0]
	canDescr=descr;
   15222:	687b      	ldr	r3, [r7, #4]
   15224:	683a      	ldr	r2, [r7, #0]
   15226:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
} //CANOpen_Class
   1522a:	687b      	ldr	r3, [r7, #4]
   1522c:	4618      	mov	r0, r3
   1522e:	3708      	adds	r7, #8
   15230:	46bd      	mov	sp, r7
   15232:	bd80      	pop	{r7, pc}
   15234:	00015385 	.word	0x00015385
   15238:	0001bc98 	.word	0x0001bc98
   1523c:	2000d194 	.word	0x2000d194

00015240 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
   15240:	b580      	push	{r7, lr}
   15242:	b082      	sub	sp, #8
   15244:	af00      	add	r7, sp, #0
   15246:	6078      	str	r0, [r7, #4]
   15248:	4a05      	ldr	r2, [pc, #20]	; (15260 <_ZN13CANOpen_ClassD1Ev+0x20>)
   1524a:	687b      	ldr	r3, [r7, #4]
   1524c:	601a      	str	r2, [r3, #0]
   1524e:	687b      	ldr	r3, [r7, #4]
   15250:	4618      	mov	r0, r3
   15252:	4b04      	ldr	r3, [pc, #16]	; (15264 <_ZN13CANOpen_ClassD1Ev+0x24>)
   15254:	4798      	blx	r3
{
} //~CANOpen_Class
   15256:	687b      	ldr	r3, [r7, #4]
   15258:	4618      	mov	r0, r3
   1525a:	3708      	adds	r7, #8
   1525c:	46bd      	mov	sp, r7
   1525e:	bd80      	pop	{r7, pc}
   15260:	0001bc98 	.word	0x0001bc98
   15264:	000153e5 	.word	0x000153e5

00015268 <_ZN13CANOpen_Class13Init_CO_CLASSEh>:

int	CANOpen_Class::Init_CO_CLASS(uint8_t node){
   15268:	b590      	push	{r4, r7, lr}
   1526a:	b083      	sub	sp, #12
   1526c:	af00      	add	r7, sp, #0
   1526e:	6078      	str	r0, [r7, #4]
   15270:	460b      	mov	r3, r1
   15272:	70fb      	strb	r3, [r7, #3]
	coNode=node;
   15274:	687b      	ldr	r3, [r7, #4]
   15276:	78fa      	ldrb	r2, [r7, #3]
   15278:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
   1527c:	6878      	ldr	r0, [r7, #4]
   1527e:	687b      	ldr	r3, [r7, #4]
   15280:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
   15284:	78fa      	ldrb	r2, [r7, #3]
   15286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1528a:	4c17      	ldr	r4, [pc, #92]	; (152e8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x80>)
   1528c:	47a0      	blx	r4
   1528e:	4603      	mov	r3, r0
   15290:	461a      	mov	r2, r3
   15292:	687b      	ldr	r3, [r7, #4]
   15294:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
	
	if (err==0)
   15298:	687b      	ldr	r3, [r7, #4]
   1529a:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
   1529e:	2b00      	cmp	r3, #0
   152a0:	d116      	bne.n	152d0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x68>
	{
		canopen_driver->canopen_ready=true;
   152a2:	4b12      	ldr	r3, [pc, #72]	; (152ec <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x84>)
   152a4:	681b      	ldr	r3, [r3, #0]
   152a6:	2201      	movs	r2, #1
   152a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
   152ac:	6878      	ldr	r0, [r7, #4]
   152ae:	4b10      	ldr	r3, [pc, #64]	; (152f0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x88>)
   152b0:	4798      	blx	r3
   152b2:	4603      	mov	r3, r0
   152b4:	b25a      	sxtb	r2, r3
   152b6:	687b      	ldr	r3, [r7, #4]
   152b8:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
		if (node==1)
   152bc:	78fb      	ldrb	r3, [r7, #3]
   152be:	2b01      	cmp	r3, #1
   152c0:	d10a      	bne.n	152d8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		{
			CO_sendNMTcommand(1,0);
   152c2:	687b      	ldr	r3, [r7, #4]
   152c4:	2200      	movs	r2, #0
   152c6:	2101      	movs	r1, #1
   152c8:	4618      	mov	r0, r3
   152ca:	4b0a      	ldr	r3, [pc, #40]	; (152f4 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x8c>)
   152cc:	4798      	blx	r3
   152ce:	e003      	b.n	152d8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		}
			

		
	}else{
		return	(int)err;
   152d0:	687b      	ldr	r3, [r7, #4]
   152d2:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
   152d6:	e002      	b.n	152de <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x76>
	}
	return	(int)err;
   152d8:	687b      	ldr	r3, [r7, #4]
   152da:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
}
   152de:	4618      	mov	r0, r3
   152e0:	370c      	adds	r7, #12
   152e2:	46bd      	mov	sp, r7
   152e4:	bd90      	pop	{r4, r7, pc}
   152e6:	bf00      	nop
   152e8:	000154f5 	.word	0x000154f5
   152ec:	2000da88 	.word	0x2000da88
   152f0:	000152f9 	.word	0x000152f9
   152f4:	0001541d 	.word	0x0001541d

000152f8 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
   152f8:	b580      	push	{r7, lr}
   152fa:	b082      	sub	sp, #8
   152fc:	af00      	add	r7, sp, #0
   152fe:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
   15300:	687b      	ldr	r3, [r7, #4]
   15302:	4618      	mov	r0, r3
   15304:	4b08      	ldr	r3, [pc, #32]	; (15328 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
   15306:	4798      	blx	r3
   15308:	4603      	mov	r3, r0
   1530a:	461a      	mov	r2, r3
   1530c:	687b      	ldr	r3, [r7, #4]
   1530e:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
   15312:	687b      	ldr	r3, [r7, #4]
   15314:	2200      	movs	r2, #0
   15316:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	return	(int)err;
   1531a:	687b      	ldr	r3, [r7, #4]
   1531c:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
}
   15320:	4618      	mov	r0, r3
   15322:	3708      	adds	r7, #8
   15324:	46bd      	mov	sp, r7
   15326:	bd80      	pop	{r7, pc}
   15328:	00015f1d 	.word	0x00015f1d

0001532c <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
   1532c:	b580      	push	{r7, lr}
   1532e:	b084      	sub	sp, #16
   15330:	af00      	add	r7, sp, #0
   15332:	6078      	str	r0, [r7, #4]
   15334:	460b      	mov	r3, r1
   15336:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
   15338:	2300      	movs	r3, #0
   1533a:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
   1533c:	687b      	ldr	r3, [r7, #4]
   1533e:	78fa      	ldrb	r2, [r7, #3]
   15340:	2101      	movs	r1, #1
   15342:	4618      	mov	r0, r3
   15344:	4b0d      	ldr	r3, [pc, #52]	; (1537c <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
   15346:	4798      	blx	r3
		delay_ms(100);
   15348:	2064      	movs	r0, #100	; 0x64
   1534a:	4b0d      	ldr	r3, [pc, #52]	; (15380 <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
   1534c:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
   1534e:	687b      	ldr	r3, [r7, #4]
   15350:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   15354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15356:	689a      	ldr	r2, [r3, #8]
   15358:	78fb      	ldrb	r3, [r7, #3]
   1535a:	011b      	lsls	r3, r3, #4
   1535c:	4413      	add	r3, r2
   1535e:	781b      	ldrb	r3, [r3, #0]
   15360:	2b05      	cmp	r3, #5
   15362:	bf0c      	ite	eq
   15364:	2301      	moveq	r3, #1
   15366:	2300      	movne	r3, #0
   15368:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
   1536a:	687b      	ldr	r3, [r7, #4]
   1536c:	7bfa      	ldrb	r2, [r7, #15]
   1536e:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
//	}
	return	localOperational;
   15372:	7bfb      	ldrb	r3, [r7, #15]
}
   15374:	4618      	mov	r0, r3
   15376:	3710      	adds	r7, #16
   15378:	46bd      	mov	sp, r7
   1537a:	bd80      	pop	{r7, pc}
   1537c:	0001541d 	.word	0x0001541d
   15380:	000036c9 	.word	0x000036c9

00015384 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
   15384:	b580      	push	{r7, lr}
   15386:	b082      	sub	sp, #8
   15388:	af00      	add	r7, sp, #0
   1538a:	6078      	str	r0, [r7, #4]
   1538c:	687b      	ldr	r3, [r7, #4]
   1538e:	4618      	mov	r0, r3
   15390:	4b10      	ldr	r3, [pc, #64]	; (153d4 <_ZN8CO_ClassC1Ev+0x50>)
   15392:	4798      	blx	r3
   15394:	687b      	ldr	r3, [r7, #4]
   15396:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
   1539a:	4618      	mov	r0, r3
   1539c:	4b0e      	ldr	r3, [pc, #56]	; (153d8 <_ZN8CO_ClassC1Ev+0x54>)
   1539e:	4798      	blx	r3
   153a0:	4a0e      	ldr	r2, [pc, #56]	; (153dc <_ZN8CO_ClassC1Ev+0x58>)
   153a2:	687b      	ldr	r3, [r7, #4]
   153a4:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
   153a6:	4b0e      	ldr	r3, [pc, #56]	; (153e0 <_ZN8CO_ClassC1Ev+0x5c>)
   153a8:	681a      	ldr	r2, [r3, #0]
   153aa:	687b      	ldr	r3, [r7, #4]
   153ac:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	coCanDescr=NULL;
   153b0:	687b      	ldr	r3, [r7, #4]
   153b2:	2200      	movs	r2, #0
   153b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	CO_memoryUsed=sizeof(COO);
   153b8:	687b      	ldr	r3, [r7, #4]
   153ba:	223c      	movs	r2, #60	; 0x3c
   153bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	timer_next=NULL;
   153c0:	687b      	ldr	r3, [r7, #4]
   153c2:	2200      	movs	r2, #0
   153c4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
} //CO_Class
   153c8:	687b      	ldr	r3, [r7, #4]
   153ca:	4618      	mov	r0, r3
   153cc:	3708      	adds	r7, #8
   153ce:	46bd      	mov	sp, r7
   153d0:	bd80      	pop	{r7, pc}
   153d2:	bf00      	nop
   153d4:	00015d7d 	.word	0x00015d7d
   153d8:	00016e19 	.word	0x00016e19
   153dc:	0001bca4 	.word	0x0001bca4
   153e0:	2000d1d4 	.word	0x2000d1d4

000153e4 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
   153e4:	b580      	push	{r7, lr}
   153e6:	b082      	sub	sp, #8
   153e8:	af00      	add	r7, sp, #0
   153ea:	6078      	str	r0, [r7, #4]
   153ec:	4a08      	ldr	r2, [pc, #32]	; (15410 <_ZN8CO_ClassD1Ev+0x2c>)
   153ee:	687b      	ldr	r3, [r7, #4]
   153f0:	601a      	str	r2, [r3, #0]
   153f2:	687b      	ldr	r3, [r7, #4]
   153f4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
   153f8:	4618      	mov	r0, r3
   153fa:	4b06      	ldr	r3, [pc, #24]	; (15414 <_ZN8CO_ClassD1Ev+0x30>)
   153fc:	4798      	blx	r3
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	4618      	mov	r0, r3
   15402:	4b05      	ldr	r3, [pc, #20]	; (15418 <_ZN8CO_ClassD1Ev+0x34>)
   15404:	4798      	blx	r3
{
} //~CO_Class
   15406:	687b      	ldr	r3, [r7, #4]
   15408:	4618      	mov	r0, r3
   1540a:	3708      	adds	r7, #8
   1540c:	46bd      	mov	sp, r7
   1540e:	bd80      	pop	{r7, pc}
   15410:	0001bca4 	.word	0x0001bca4
   15414:	00016e2d 	.word	0x00016e2d
   15418:	00015e0d 	.word	0x00015e0d

0001541c <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
   1541c:	b580      	push	{r7, lr}
   1541e:	b082      	sub	sp, #8
   15420:	af00      	add	r7, sp, #0
   15422:	6078      	str	r0, [r7, #4]
   15424:	460b      	mov	r3, r1
   15426:	70fb      	strb	r3, [r7, #3]
   15428:	4613      	mov	r3, r2
   1542a:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
   1542c:	687b      	ldr	r3, [r7, #4]
   1542e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   15432:	2b00      	cmp	r3, #0
   15434:	d101      	bne.n	1543a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
   15436:	23f5      	movs	r3, #245	; 0xf5
   15438:	e053      	b.n	154e2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
   1543a:	687b      	ldr	r3, [r7, #4]
   1543c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   15440:	78fa      	ldrb	r2, [r7, #3]
   15442:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
   15444:	687b      	ldr	r3, [r7, #4]
   15446:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   1544a:	78ba      	ldrb	r2, [r7, #2]
   1544c:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
   1544e:	78bb      	ldrb	r3, [r7, #2]
   15450:	2b00      	cmp	r3, #0
   15452:	d006      	beq.n	15462 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
   15454:	4b25      	ldr	r3, [pc, #148]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   15456:	681b      	ldr	r3, [r3, #0]
   15458:	691b      	ldr	r3, [r3, #16]
   1545a:	7a9b      	ldrb	r3, [r3, #10]
   1545c:	78ba      	ldrb	r2, [r7, #2]
   1545e:	429a      	cmp	r2, r3
   15460:	d135      	bne.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
   15462:	78fb      	ldrb	r3, [r7, #3]
   15464:	2b80      	cmp	r3, #128	; 0x80
   15466:	d01f      	beq.n	154a8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
   15468:	2b80      	cmp	r3, #128	; 0x80
   1546a:	dc04      	bgt.n	15476 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
   1546c:	2b01      	cmp	r3, #1
   1546e:	d007      	beq.n	15480 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
   15470:	2b02      	cmp	r3, #2
   15472:	d013      	beq.n	1549c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
   15474:	e02b      	b.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
   15476:	2b81      	cmp	r3, #129	; 0x81
   15478:	d01c      	beq.n	154b4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
   1547a:	2b82      	cmp	r3, #130	; 0x82
   1547c:	d020      	beq.n	154c0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
   1547e:	e026      	b.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
   15480:	4b1a      	ldr	r3, [pc, #104]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   15482:	681b      	ldr	r3, [r3, #0]
   15484:	691b      	ldr	r3, [r3, #16]
   15486:	695b      	ldr	r3, [r3, #20]
   15488:	681b      	ldr	r3, [r3, #0]
   1548a:	781b      	ldrb	r3, [r3, #0]
   1548c:	2b00      	cmp	r3, #0
   1548e:	d11d      	bne.n	154cc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
   15490:	4b16      	ldr	r3, [pc, #88]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   15492:	681b      	ldr	r3, [r3, #0]
   15494:	691b      	ldr	r3, [r3, #16]
   15496:	2205      	movs	r2, #5
   15498:	701a      	strb	r2, [r3, #0]
			}
			break;
   1549a:	e017      	b.n	154cc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
   1549c:	4b13      	ldr	r3, [pc, #76]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   1549e:	681b      	ldr	r3, [r3, #0]
   154a0:	691b      	ldr	r3, [r3, #16]
   154a2:	2204      	movs	r2, #4
   154a4:	701a      	strb	r2, [r3, #0]
			break;
   154a6:	e012      	b.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   154a8:	4b10      	ldr	r3, [pc, #64]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   154aa:	681b      	ldr	r3, [r3, #0]
   154ac:	691b      	ldr	r3, [r3, #16]
   154ae:	227f      	movs	r2, #127	; 0x7f
   154b0:	701a      	strb	r2, [r3, #0]
			break;
   154b2:	e00c      	b.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
   154b4:	4b0d      	ldr	r3, [pc, #52]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   154b6:	681b      	ldr	r3, [r3, #0]
   154b8:	691b      	ldr	r3, [r3, #16]
   154ba:	2202      	movs	r2, #2
   154bc:	725a      	strb	r2, [r3, #9]
			break;
   154be:	e006      	b.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
   154c0:	4b0a      	ldr	r3, [pc, #40]	; (154ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   154c2:	681b      	ldr	r3, [r3, #0]
   154c4:	691b      	ldr	r3, [r3, #16]
   154c6:	2201      	movs	r2, #1
   154c8:	725a      	strb	r2, [r3, #9]
			break;
   154ca:	e000      	b.n	154ce <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
   154cc:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
   154ce:	687a      	ldr	r2, [r7, #4]
   154d0:	687b      	ldr	r3, [r7, #4]
   154d2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   154d6:	4619      	mov	r1, r3
   154d8:	4610      	mov	r0, r2
   154da:	4b05      	ldr	r3, [pc, #20]	; (154f0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
   154dc:	4798      	blx	r3
   154de:	4603      	mov	r3, r0
   154e0:	b2db      	uxtb	r3, r3
}
   154e2:	4618      	mov	r0, r3
   154e4:	3708      	adds	r7, #8
   154e6:	46bd      	mov	sp, r7
   154e8:	bd80      	pop	{r7, pc}
   154ea:	bf00      	nop
   154ec:	2000d1d4 	.word	0x2000d1d4
   154f0:	000162ad 	.word	0x000162ad

000154f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
   154f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   154f6:	b099      	sub	sp, #100	; 0x64
   154f8:	af0c      	add	r7, sp, #48	; 0x30
   154fa:	61f8      	str	r0, [r7, #28]
   154fc:	61b9      	str	r1, [r7, #24]
   154fe:	613b      	str	r3, [r7, #16]
   15500:	4613      	mov	r3, r2
   15502:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
   15504:	69fb      	ldr	r3, [r7, #28]
   15506:	69ba      	ldr	r2, [r7, #24]
   15508:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	coNode=nodeId;
   1550c:	69fb      	ldr	r3, [r7, #28]
   1550e:	7dfa      	ldrb	r2, [r7, #23]
   15510:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
   15514:	4ba3      	ldr	r3, [pc, #652]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15516:	4aa4      	ldr	r2, [pc, #656]	; (157a8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
   15518:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
   1551a:	4ba2      	ldr	r3, [pc, #648]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1551c:	681b      	ldr	r3, [r3, #0]
   1551e:	4aa3      	ldr	r2, [pc, #652]	; (157ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
   15520:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
   15522:	4ba3      	ldr	r3, [pc, #652]	; (157b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   15524:	4aa3      	ldr	r2, [pc, #652]	; (157b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
   15526:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
   15528:	4ba3      	ldr	r3, [pc, #652]	; (157b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   1552a:	4aa4      	ldr	r2, [pc, #656]	; (157bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
   1552c:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   1552e:	69fb      	ldr	r3, [r7, #28]
   15530:	2200      	movs	r2, #0
   15532:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15536:	69fb      	ldr	r3, [r7, #28]
   15538:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1553c:	2b00      	cmp	r3, #0
   1553e:	d118      	bne.n	15572 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
   15540:	4b98      	ldr	r3, [pc, #608]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15542:	6819      	ldr	r1, [r3, #0]
   15544:	69fb      	ldr	r3, [r7, #28]
   15546:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
   1554a:	69fb      	ldr	r3, [r7, #28]
   1554c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   15550:	4613      	mov	r3, r2
   15552:	011b      	lsls	r3, r3, #4
   15554:	4413      	add	r3, r2
   15556:	00db      	lsls	r3, r3, #3
   15558:	4a99      	ldr	r2, [pc, #612]	; (157c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
   1555a:	441a      	add	r2, r3
   1555c:	0083      	lsls	r3, r0, #2
   1555e:	440b      	add	r3, r1
   15560:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   15562:	69fb      	ldr	r3, [r7, #28]
   15564:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15568:	1c5a      	adds	r2, r3, #1
   1556a:	69fb      	ldr	r3, [r7, #28]
   1556c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15570:	e7e1      	b.n	15536 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
   15572:	4b94      	ldr	r3, [pc, #592]	; (157c4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   15574:	4a94      	ldr	r2, [pc, #592]	; (157c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
   15576:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
   15578:	4b8a      	ldr	r3, [pc, #552]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1557a:	681b      	ldr	r3, [r3, #0]
   1557c:	4a93      	ldr	r2, [pc, #588]	; (157cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
   1557e:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
   15580:	4b88      	ldr	r3, [pc, #544]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15582:	681b      	ldr	r3, [r3, #0]
   15584:	4a92      	ldr	r2, [pc, #584]	; (157d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
   15586:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
   15588:	4b86      	ldr	r3, [pc, #536]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1558a:	681b      	ldr	r3, [r3, #0]
   1558c:	4a91      	ldr	r2, [pc, #580]	; (157d4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
   1558e:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
   15590:	4b84      	ldr	r3, [pc, #528]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15592:	681b      	ldr	r3, [r3, #0]
   15594:	4a90      	ldr	r2, [pc, #576]	; (157d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
   15596:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
   15598:	69fb      	ldr	r3, [r7, #28]
   1559a:	2200      	movs	r2, #0
   1559c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   155a0:	69fb      	ldr	r3, [r7, #28]
   155a2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   155a6:	2b03      	cmp	r3, #3
   155a8:	d818      	bhi.n	155dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
   155aa:	4b7e      	ldr	r3, [pc, #504]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   155ac:	6819      	ldr	r1, [r3, #0]
   155ae:	69fb      	ldr	r3, [r7, #28]
   155b0:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
   155b4:	69fb      	ldr	r3, [r7, #28]
   155b6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   155ba:	4613      	mov	r3, r2
   155bc:	005b      	lsls	r3, r3, #1
   155be:	4413      	add	r3, r2
   155c0:	015b      	lsls	r3, r3, #5
   155c2:	4a86      	ldr	r2, [pc, #536]	; (157dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
   155c4:	441a      	add	r2, r3
   155c6:	1d83      	adds	r3, r0, #6
   155c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
   155cc:	69fb      	ldr	r3, [r7, #28]
   155ce:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   155d2:	1c5a      	adds	r2, r3, #1
   155d4:	69fb      	ldr	r3, [r7, #28]
   155d6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   155da:	e7e1      	b.n	155a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
   155dc:	69fb      	ldr	r3, [r7, #28]
   155de:	2200      	movs	r2, #0
   155e0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   155e4:	69fb      	ldr	r3, [r7, #28]
   155e6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   155ea:	2b03      	cmp	r3, #3
   155ec:	d817      	bhi.n	1561e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
   155ee:	4b6d      	ldr	r3, [pc, #436]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   155f0:	681b      	ldr	r3, [r3, #0]
   155f2:	69fa      	ldr	r2, [r7, #28]
   155f4:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
   155f8:	69f9      	ldr	r1, [r7, #28]
   155fa:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
   155fe:	2058      	movs	r0, #88	; 0x58
   15600:	fb00 f101 	mul.w	r1, r0, r1
   15604:	4876      	ldr	r0, [pc, #472]	; (157e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
   15606:	4401      	add	r1, r0
   15608:	320a      	adds	r2, #10
   1560a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
   1560e:	69fb      	ldr	r3, [r7, #28]
   15610:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15614:	1c5a      	adds	r2, r3, #1
   15616:	69fb      	ldr	r3, [r7, #28]
   15618:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   1561c:	e7e2      	b.n	155e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
   1561e:	4b61      	ldr	r3, [pc, #388]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15620:	681b      	ldr	r3, [r3, #0]
   15622:	4a70      	ldr	r2, [pc, #448]	; (157e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
   15624:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
   15626:	4b70      	ldr	r3, [pc, #448]	; (157e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
   15628:	4a70      	ldr	r2, [pc, #448]	; (157ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
   1562a:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
   1562c:	4b5d      	ldr	r3, [pc, #372]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1562e:	681b      	ldr	r3, [r3, #0]
   15630:	681b      	ldr	r3, [r3, #0]
   15632:	2200      	movs	r2, #0
   15634:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
   15636:	69fa      	ldr	r2, [r7, #28]
   15638:	69fb      	ldr	r3, [r7, #28]
   1563a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1563e:	4619      	mov	r1, r3
   15640:	4610      	mov	r0, r2
   15642:	4b6b      	ldr	r3, [pc, #428]	; (157f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
   15644:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
   15646:	7dfb      	ldrb	r3, [r7, #23]
   15648:	2b00      	cmp	r3, #0
   1564a:	dd02      	ble.n	15652 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
   1564c:	7dfb      	ldrb	r3, [r7, #23]
   1564e:	2b7f      	cmp	r3, #127	; 0x7f
   15650:	dd05      	ble.n	1565e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
   15652:	69f8      	ldr	r0, [r7, #28]
   15654:	4b67      	ldr	r3, [pc, #412]	; (157f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   15656:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
   15658:	f06f 030b 	mvn.w	r3, #11
   1565c:	e2fc      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
   1565e:	69f8      	ldr	r0, [r7, #28]
   15660:	4b50      	ldr	r3, [pc, #320]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15662:	681b      	ldr	r3, [r3, #0]
   15664:	6819      	ldr	r1, [r3, #0]
   15666:	69fb      	ldr	r3, [r7, #28]
   15668:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
   1566c:	4b50      	ldr	r3, [pc, #320]	; (157b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   1566e:	681d      	ldr	r5, [r3, #0]
   15670:	4b51      	ldr	r3, [pc, #324]	; (157b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   15672:	681b      	ldr	r3, [r3, #0]
   15674:	693a      	ldr	r2, [r7, #16]
   15676:	9203      	str	r2, [sp, #12]
   15678:	2209      	movs	r2, #9
   1567a:	9202      	str	r2, [sp, #8]
   1567c:	9301      	str	r3, [sp, #4]
   1567e:	230b      	movs	r3, #11
   15680:	9300      	str	r3, [sp, #0]
   15682:	462b      	mov	r3, r5
   15684:	4622      	mov	r2, r4
   15686:	4c5c      	ldr	r4, [pc, #368]	; (157f8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
   15688:	47a0      	blx	r4
   1568a:	4603      	mov	r3, r0
   1568c:	461a      	mov	r2, r3
   1568e:	69fb      	ldr	r3, [r7, #28]
   15690:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
   15694:	69fb      	ldr	r3, [r7, #28]
   15696:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1569a:	2b00      	cmp	r3, #0
   1569c:	d006      	beq.n	156ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
   1569e:	69f8      	ldr	r0, [r7, #28]
   156a0:	4b54      	ldr	r3, [pc, #336]	; (157f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   156a2:	4798      	blx	r3
   156a4:	69fb      	ldr	r3, [r7, #28]
   156a6:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   156aa:	e2d5      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
   156ac:	69fb      	ldr	r3, [r7, #28]
   156ae:	2200      	movs	r2, #0
   156b0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   156b4:	69fb      	ldr	r3, [r7, #28]
   156b6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   156ba:	2b00      	cmp	r3, #0
   156bc:	f040 80a4 	bne.w	15808 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
   156c0:	69fb      	ldr	r3, [r7, #28]
   156c2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   156c6:	2b00      	cmp	r3, #0
   156c8:	d108      	bne.n	156dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
   156ca:	7dfb      	ldrb	r3, [r7, #23]
   156cc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   156d0:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
   156d2:	7dfb      	ldrb	r3, [r7, #23]
   156d4:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
   156d8:	62bb      	str	r3, [r7, #40]	; 0x28
   156da:	e017      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
   156dc:	69fb      	ldr	r3, [r7, #28]
   156de:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   156e2:	4946      	ldr	r1, [pc, #280]	; (157fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   156e4:	4613      	mov	r3, r2
   156e6:	005b      	lsls	r3, r3, #1
   156e8:	4413      	add	r3, r2
   156ea:	009b      	lsls	r3, r3, #2
   156ec:	440b      	add	r3, r1
   156ee:	3364      	adds	r3, #100	; 0x64
   156f0:	681b      	ldr	r3, [r3, #0]
   156f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
   156f4:	69fb      	ldr	r3, [r7, #28]
   156f6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   156fa:	4940      	ldr	r1, [pc, #256]	; (157fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   156fc:	4613      	mov	r3, r2
   156fe:	005b      	lsls	r3, r3, #1
   15700:	4413      	add	r3, r2
   15702:	009b      	lsls	r3, r3, #2
   15704:	440b      	add	r3, r1
   15706:	3368      	adds	r3, #104	; 0x68
   15708:	681b      	ldr	r3, [r3, #0]
   1570a:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
   1570c:	69fb      	ldr	r3, [r7, #28]
   1570e:	f103 0e04 	add.w	lr, r3, #4
   15712:	4b24      	ldr	r3, [pc, #144]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15714:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
   15716:	69fb      	ldr	r3, [r7, #28]
   15718:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_SDO_init(
   1571c:	009b      	lsls	r3, r3, #2
   1571e:	4413      	add	r3, r2
   15720:	685b      	ldr	r3, [r3, #4]
   15722:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
   15724:	69fb      	ldr	r3, [r7, #28]
   15726:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_SDO_init(
   1572a:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
   1572e:	69fb      	ldr	r3, [r7, #28]
   15730:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_SDO_init(
   15734:	2b00      	cmp	r3, #0
   15736:	d003      	beq.n	15740 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
   15738:	4b1a      	ldr	r3, [pc, #104]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1573a:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
   1573c:	685b      	ldr	r3, [r3, #4]
   1573e:	e000      	b.n	15742 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
   15740:	2300      	movs	r3, #0
   15742:	4920      	ldr	r1, [pc, #128]	; (157c4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   15744:	6809      	ldr	r1, [r1, #0]
   15746:	4817      	ldr	r0, [pc, #92]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15748:	6800      	ldr	r0, [r0, #0]
   1574a:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
   1574c:	69fc      	ldr	r4, [r7, #28]
   1574e:	f8d4 4168 	ldr.w	r4, [r4, #360]	; 0x168
		err = CO_SDO_init(
   15752:	3406      	adds	r4, #6
   15754:	4d13      	ldr	r5, [pc, #76]	; (157a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15756:	682d      	ldr	r5, [r5, #0]
   15758:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
   1575a:	69fe      	ldr	r6, [r7, #28]
   1575c:	f8d6 6168 	ldr.w	r6, [r6, #360]	; 0x168
		err = CO_SDO_init(
   15760:	3607      	adds	r6, #7
   15762:	9609      	str	r6, [sp, #36]	; 0x24
   15764:	9508      	str	r5, [sp, #32]
   15766:	9407      	str	r4, [sp, #28]
   15768:	9006      	str	r0, [sp, #24]
   1576a:	7df8      	ldrb	r0, [r7, #23]
   1576c:	9005      	str	r0, [sp, #20]
   1576e:	9104      	str	r1, [sp, #16]
   15770:	2137      	movs	r1, #55	; 0x37
   15772:	9103      	str	r1, [sp, #12]
   15774:	4922      	ldr	r1, [pc, #136]	; (15800 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
   15776:	9102      	str	r1, [sp, #8]
   15778:	9301      	str	r3, [sp, #4]
   1577a:	9200      	str	r2, [sp, #0]
   1577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1577e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15780:	68f9      	ldr	r1, [r7, #12]
   15782:	4670      	mov	r0, lr
   15784:	4c1f      	ldr	r4, [pc, #124]	; (15804 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
   15786:	47a0      	blx	r4
   15788:	4603      	mov	r3, r0
   1578a:	461a      	mov	r2, r3
   1578c:	69fb      	ldr	r3, [r7, #28]
   1578e:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	for (i=0; i<CO_NO_SDO_SERVER; i++)
   15792:	69fb      	ldr	r3, [r7, #28]
   15794:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15798:	1c5a      	adds	r2, r3, #1
   1579a:	69fb      	ldr	r3, [r7, #28]
   1579c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   157a0:	e788      	b.n	156b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
   157a2:	bf00      	nop
   157a4:	2000d1d4 	.word	0x2000d1d4
   157a8:	2000d198 	.word	0x2000d198
   157ac:	2000d1e8 	.word	0x2000d1e8
   157b0:	2000d1d8 	.word	0x2000d1d8
   157b4:	2000d20c 	.word	0x2000d20c
   157b8:	2000d1dc 	.word	0x2000d1dc
   157bc:	2000d2bc 	.word	0x2000d2bc
   157c0:	2000d34c 	.word	0x2000d34c
   157c4:	2000d1e0 	.word	0x2000d1e0
   157c8:	2000d3d4 	.word	0x2000d3d4
   157cc:	2000d668 	.word	0x2000d668
   157d0:	2000d6d4 	.word	0x2000d6d4
   157d4:	2000d6f0 	.word	0x2000d6f0
   157d8:	2000d714 	.word	0x2000d714
   157dc:	2000d750 	.word	0x2000d750
   157e0:	2000d8d0 	.word	0x2000d8d0
   157e4:	2000da30 	.word	0x2000da30
   157e8:	2000d1e4 	.word	0x2000d1e4
   157ec:	2000da48 	.word	0x2000da48
   157f0:	00015f01 	.word	0x00015f01
   157f4:	00015c85 	.word	0x00015c85
   157f8:	00015f65 	.word	0x00015f65
   157fc:	2000039c 	.word	0x2000039c
   15800:	0001c2cc 	.word	0x0001c2cc
   15804:	00017ff5 	.word	0x00017ff5
	}

	if(err){CO_delete(); return err;}
   15808:	69fb      	ldr	r3, [r7, #28]
   1580a:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1580e:	2b00      	cmp	r3, #0
   15810:	d006      	beq.n	15820 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
   15812:	69f8      	ldr	r0, [r7, #28]
   15814:	4b7c      	ldr	r3, [pc, #496]	; (15a08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   15816:	4798      	blx	r3
   15818:	69fb      	ldr	r3, [r7, #28]
   1581a:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1581e:	e21b      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
   15820:	69fb      	ldr	r3, [r7, #28]
   15822:	1d18      	adds	r0, r3, #4
   15824:	4b79      	ldr	r3, [pc, #484]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15826:	681b      	ldr	r3, [r3, #0]
   15828:	6899      	ldr	r1, [r3, #8]
   1582a:	4b78      	ldr	r3, [pc, #480]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1582c:	681b      	ldr	r3, [r3, #0]
   1582e:	68dc      	ldr	r4, [r3, #12]
   15830:	4b76      	ldr	r3, [pc, #472]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15832:	681b      	ldr	r3, [r3, #0]
   15834:	685d      	ldr	r5, [r3, #4]
   15836:	4b75      	ldr	r3, [pc, #468]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15838:	681b      	ldr	r3, [r3, #0]
   1583a:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
   1583c:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
   1583e:	3280      	adds	r2, #128	; 0x80
   15840:	9207      	str	r2, [sp, #28]
   15842:	2202      	movs	r2, #2
   15844:	9206      	str	r2, [sp, #24]
   15846:	9305      	str	r3, [sp, #20]
   15848:	2308      	movs	r3, #8
   1584a:	9304      	str	r3, [sp, #16]
   1584c:	4b70      	ldr	r3, [pc, #448]	; (15a10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
   1584e:	9303      	str	r3, [sp, #12]
   15850:	4b70      	ldr	r3, [pc, #448]	; (15a14 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
   15852:	9302      	str	r3, [sp, #8]
   15854:	230a      	movs	r3, #10
   15856:	9301      	str	r3, [sp, #4]
   15858:	4b6f      	ldr	r3, [pc, #444]	; (15a18 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
   1585a:	9300      	str	r3, [sp, #0]
   1585c:	462b      	mov	r3, r5
   1585e:	4622      	mov	r2, r4
   15860:	4c6e      	ldr	r4, [pc, #440]	; (15a1c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
   15862:	47a0      	blx	r4
   15864:	4603      	mov	r3, r0
   15866:	461a      	mov	r2, r3
   15868:	69fb      	ldr	r3, [r7, #28]
   1586a:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

	if(err){CO_delete(); return err;}
   1586e:	69fb      	ldr	r3, [r7, #28]
   15870:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15874:	2b00      	cmp	r3, #0
   15876:	d006      	beq.n	15886 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
   15878:	69f8      	ldr	r0, [r7, #28]
   1587a:	4b63      	ldr	r3, [pc, #396]	; (15a08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   1587c:	4798      	blx	r3
   1587e:	69fb      	ldr	r3, [r7, #28]
   15880:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15884:	e1e8      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
   15886:	4b61      	ldr	r3, [pc, #388]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15888:	681b      	ldr	r3, [r3, #0]
   1588a:	6918      	ldr	r0, [r3, #16]
   1588c:	4b5f      	ldr	r3, [pc, #380]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1588e:	681b      	ldr	r3, [r3, #0]
   15890:	68dc      	ldr	r4, [r3, #12]
   15892:	4b5e      	ldr	r3, [pc, #376]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15894:	681b      	ldr	r3, [r3, #0]
   15896:	681b      	ldr	r3, [r3, #0]
   15898:	4a5c      	ldr	r2, [pc, #368]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1589a:	6812      	ldr	r2, [r2, #0]
   1589c:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
   1589e:	7df9      	ldrb	r1, [r7, #23]
   158a0:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
   158a4:	7dfd      	ldrb	r5, [r7, #23]
   158a6:	9106      	str	r1, [sp, #24]
   158a8:	2108      	movs	r1, #8
   158aa:	9105      	str	r1, [sp, #20]
   158ac:	9204      	str	r2, [sp, #16]
   158ae:	2200      	movs	r2, #0
   158b0:	9203      	str	r2, [sp, #12]
   158b2:	2200      	movs	r2, #0
   158b4:	9202      	str	r2, [sp, #8]
   158b6:	9301      	str	r3, [sp, #4]
   158b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   158bc:	9300      	str	r3, [sp, #0]
   158be:	462b      	mov	r3, r5
   158c0:	4622      	mov	r2, r4
   158c2:	4601      	mov	r1, r0
   158c4:	69f8      	ldr	r0, [r7, #28]
   158c6:	4c56      	ldr	r4, [pc, #344]	; (15a20 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
   158c8:	47a0      	blx	r4
   158ca:	4603      	mov	r3, r0
   158cc:	461a      	mov	r2, r3
   158ce:	69fb      	ldr	r3, [r7, #28]
   158d0:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

	if(err){CO_delete(); return err;}
   158d4:	69fb      	ldr	r3, [r7, #28]
   158d6:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   158da:	2b00      	cmp	r3, #0
   158dc:	d006      	beq.n	158ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
   158de:	69f8      	ldr	r0, [r7, #28]
   158e0:	4b49      	ldr	r3, [pc, #292]	; (15a08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   158e2:	4798      	blx	r3
   158e4:	69fb      	ldr	r3, [r7, #28]
   158e6:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   158ea:	e1b5      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
   158ec:	7dfb      	ldrb	r3, [r7, #23]
   158ee:	2b01      	cmp	r3, #1
   158f0:	d10d      	bne.n	1590e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
   158f2:	69f8      	ldr	r0, [r7, #28]
   158f4:	2300      	movs	r3, #0
   158f6:	9301      	str	r3, [sp, #4]
   158f8:	2302      	movs	r3, #2
   158fa:	9300      	str	r3, [sp, #0]
   158fc:	2300      	movs	r3, #0
   158fe:	2200      	movs	r2, #0
   15900:	2100      	movs	r1, #0
   15902:	4c48      	ldr	r4, [pc, #288]	; (15a24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
   15904:	47a0      	blx	r4
   15906:	4602      	mov	r2, r0
   15908:	69fb      	ldr	r3, [r7, #28]
   1590a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

	}else{

	}
       
	err = SYNC_Init(
   1590e:	69fb      	ldr	r3, [r7, #28]
   15910:	f103 060c 	add.w	r6, r3, #12
   15914:	4b3d      	ldr	r3, [pc, #244]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15916:	681b      	ldr	r3, [r3, #0]
   15918:	695b      	ldr	r3, [r3, #20]
   1591a:	60fb      	str	r3, [r7, #12]
   1591c:	4b3b      	ldr	r3, [pc, #236]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1591e:	681b      	ldr	r3, [r3, #0]
   15920:	689a      	ldr	r2, [r3, #8]
   15922:	60ba      	str	r2, [r7, #8]
   15924:	4b39      	ldr	r3, [pc, #228]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15926:	681b      	ldr	r3, [r3, #0]
   15928:	6858      	ldr	r0, [r3, #4]
   1592a:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
   1592c:	4b37      	ldr	r3, [pc, #220]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1592e:	681b      	ldr	r3, [r3, #0]
   15930:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
   15932:	603b      	str	r3, [r7, #0]
   15934:	4b3c      	ldr	r3, [pc, #240]	; (15a28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   15936:	689b      	ldr	r3, [r3, #8]
   15938:	4a3b      	ldr	r2, [pc, #236]	; (15a28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   1593a:	68d2      	ldr	r2, [r2, #12]
   1593c:	493a      	ldr	r1, [pc, #232]	; (15a28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   1593e:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
   15942:	4832      	ldr	r0, [pc, #200]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15944:	6800      	ldr	r0, [r0, #0]
   15946:	6800      	ldr	r0, [r0, #0]
   15948:	4c30      	ldr	r4, [pc, #192]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1594a:	6824      	ldr	r4, [r4, #0]
   1594c:	6824      	ldr	r4, [r4, #0]
   1594e:	2501      	movs	r5, #1
   15950:	9507      	str	r5, [sp, #28]
   15952:	9406      	str	r4, [sp, #24]
   15954:	2401      	movs	r4, #1
   15956:	9405      	str	r4, [sp, #20]
   15958:	9004      	str	r0, [sp, #16]
   1595a:	9103      	str	r1, [sp, #12]
   1595c:	9202      	str	r2, [sp, #8]
   1595e:	9301      	str	r3, [sp, #4]
   15960:	683c      	ldr	r4, [r7, #0]
   15962:	9400      	str	r4, [sp, #0]
   15964:	687b      	ldr	r3, [r7, #4]
   15966:	68ba      	ldr	r2, [r7, #8]
   15968:	68f9      	ldr	r1, [r7, #12]
   1596a:	4630      	mov	r0, r6
   1596c:	4c2f      	ldr	r4, [pc, #188]	; (15a2c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
   1596e:	47a0      	blx	r4
   15970:	4603      	mov	r3, r0
   15972:	461a      	mov	r2, r3
   15974:	69fb      	ldr	r3, [r7, #28]
   15976:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
   1597a:	69fb      	ldr	r3, [r7, #28]
   1597c:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15980:	2b00      	cmp	r3, #0
   15982:	d006      	beq.n	15992 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
   15984:	69f8      	ldr	r0, [r7, #28]
   15986:	4b20      	ldr	r3, [pc, #128]	; (15a08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   15988:	4798      	blx	r3
   1598a:	69fb      	ldr	r3, [r7, #28]
   1598c:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15990:	e162      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
   15992:	69fb      	ldr	r3, [r7, #28]
   15994:	2200      	movs	r2, #0
   15996:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   1599a:	69fb      	ldr	r3, [r7, #28]
   1599c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   159a0:	2b03      	cmp	r3, #3
   159a2:	f200 8097 	bhi.w	15ad4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
   159a6:	4b19      	ldr	r3, [pc, #100]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   159a8:	681b      	ldr	r3, [r3, #0]
   159aa:	681b      	ldr	r3, [r3, #0]
   159ac:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
   159ae:	69fb      	ldr	r3, [r7, #28]
   159b0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   159b4:	1c9a      	adds	r2, r3, #2
   159b6:	69fb      	ldr	r3, [r7, #28]
   159b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

		err = CO_RPDO_init(
   159bc:	69fb      	ldr	r3, [r7, #28]
   159be:	f103 0e14 	add.w	lr, r3, #20
   159c2:	4b12      	ldr	r3, [pc, #72]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   159c4:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
   159c6:	69fa      	ldr	r2, [r7, #28]
   159c8:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
		err = CO_RPDO_init(
   159cc:	3206      	adds	r2, #6
   159ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   159d2:	60fb      	str	r3, [r7, #12]
   159d4:	4b0d      	ldr	r3, [pc, #52]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   159d6:	681b      	ldr	r3, [r3, #0]
   159d8:	689b      	ldr	r3, [r3, #8]
   159da:	60bb      	str	r3, [r7, #8]
   159dc:	4b0b      	ldr	r3, [pc, #44]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   159de:	681b      	ldr	r3, [r3, #0]
   159e0:	685b      	ldr	r3, [r3, #4]
   159e2:	607b      	str	r3, [r7, #4]
   159e4:	4b09      	ldr	r3, [pc, #36]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   159e6:	681b      	ldr	r3, [r3, #0]
   159e8:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
   159ea:	4b08      	ldr	r3, [pc, #32]	; (15a0c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   159ec:	681b      	ldr	r3, [r3, #0]
   159ee:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
   159f0:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   159f2:	69fb      	ldr	r3, [r7, #28]
   159f4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_RPDO_init(
   159f8:	2b03      	cmp	r3, #3
   159fa:	d819      	bhi.n	15a30 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   159fc:	69fb      	ldr	r3, [r7, #28]
   159fe:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_RPDO_init(
   15a02:	3302      	adds	r3, #2
   15a04:	021a      	lsls	r2, r3, #8
   15a06:	e014      	b.n	15a32 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
   15a08:	00015c85 	.word	0x00015c85
   15a0c:	2000d1d4 	.word	0x2000d1d4
   15a10:	2000022c 	.word	0x2000022c
   15a14:	20000224 	.word	0x20000224
   15a18:	20000254 	.word	0x20000254
   15a1c:	000166b5 	.word	0x000166b5
   15a20:	00016d09 	.word	0x00016d09
   15a24:	00016201 	.word	0x00016201
   15a28:	2000039c 	.word	0x2000039c
   15a2c:	000187c5 	.word	0x000187c5
   15a30:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
   15a32:	69fb      	ldr	r3, [r7, #28]
   15a34:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   15a38:	460b      	mov	r3, r1
   15a3a:	005b      	lsls	r3, r3, #1
   15a3c:	440b      	add	r3, r1
   15a3e:	009b      	lsls	r3, r3, #2
   15a40:	3368      	adds	r3, #104	; 0x68
   15a42:	4987      	ldr	r1, [pc, #540]	; (15c60 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15a44:	440b      	add	r3, r1
   15a46:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
   15a48:	69fb      	ldr	r3, [r7, #28]
   15a4a:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   15a4e:	460b      	mov	r3, r1
   15a50:	00db      	lsls	r3, r3, #3
   15a52:	440b      	add	r3, r1
   15a54:	009b      	lsls	r3, r3, #2
   15a56:	3398      	adds	r3, #152	; 0x98
   15a58:	4981      	ldr	r1, [pc, #516]	; (15c60 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15a5a:	440b      	add	r3, r1
   15a5c:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
   15a5e:	69f9      	ldr	r1, [r7, #28]
   15a60:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
		err = CO_RPDO_init(
   15a64:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
   15a68:	69fd      	ldr	r5, [r7, #28]
   15a6a:	f8d5 5168 	ldr.w	r5, [r5, #360]	; 0x168
		err = CO_RPDO_init(
   15a6e:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
   15a72:	69fe      	ldr	r6, [r7, #28]
   15a74:	f8d6 6160 	ldr.w	r6, [r6, #352]	; 0x160
   15a78:	960a      	str	r6, [sp, #40]	; 0x28
   15a7a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   15a7c:	9609      	str	r6, [sp, #36]	; 0x24
   15a7e:	9508      	str	r5, [sp, #32]
   15a80:	9107      	str	r1, [sp, #28]
   15a82:	9306      	str	r3, [sp, #24]
   15a84:	9405      	str	r4, [sp, #20]
   15a86:	2300      	movs	r3, #0
   15a88:	9304      	str	r3, [sp, #16]
   15a8a:	9203      	str	r2, [sp, #12]
   15a8c:	7dfb      	ldrb	r3, [r7, #23]
   15a8e:	9302      	str	r3, [sp, #8]
   15a90:	683b      	ldr	r3, [r7, #0]
   15a92:	9301      	str	r3, [sp, #4]
   15a94:	9000      	str	r0, [sp, #0]
   15a96:	687b      	ldr	r3, [r7, #4]
   15a98:	68ba      	ldr	r2, [r7, #8]
   15a9a:	68f9      	ldr	r1, [r7, #12]
   15a9c:	4670      	mov	r0, lr
   15a9e:	4c71      	ldr	r4, [pc, #452]	; (15c64 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
   15aa0:	47a0      	blx	r4
   15aa2:	4603      	mov	r3, r0
   15aa4:	461a      	mov	r2, r3
   15aa6:	69fb      	ldr	r3, [r7, #28]
   15aa8:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
   15aac:	69fb      	ldr	r3, [r7, #28]
   15aae:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15ab2:	2b00      	cmp	r3, #0
   15ab4:	d006      	beq.n	15ac4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
   15ab6:	69f8      	ldr	r0, [r7, #28]
   15ab8:	4b6b      	ldr	r3, [pc, #428]	; (15c68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   15aba:	4798      	blx	r3
   15abc:	69fb      	ldr	r3, [r7, #28]
   15abe:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15ac2:	e0c9      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
   15ac4:	69fb      	ldr	r3, [r7, #28]
   15ac6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15aca:	1c5a      	adds	r2, r3, #1
   15acc:	69fb      	ldr	r3, [r7, #28]
   15ace:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15ad2:	e762      	b.n	1599a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
   15ad4:	69fb      	ldr	r3, [r7, #28]
   15ad6:	2200      	movs	r2, #0
   15ad8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15adc:	69fb      	ldr	r3, [r7, #28]
   15ade:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15ae2:	2b03      	cmp	r3, #3
   15ae4:	d879      	bhi.n	15bda <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
   15ae6:	69fb      	ldr	r3, [r7, #28]
   15ae8:	f103 0e14 	add.w	lr, r3, #20
   15aec:	4b5f      	ldr	r3, [pc, #380]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15aee:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
   15af0:	69fa      	ldr	r2, [r7, #28]
   15af2:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
		err = CO_TPDO_init(
   15af6:	320a      	adds	r2, #10
   15af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15afc:	60fb      	str	r3, [r7, #12]
   15afe:	4b5b      	ldr	r3, [pc, #364]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15b00:	681b      	ldr	r3, [r3, #0]
   15b02:	689b      	ldr	r3, [r3, #8]
   15b04:	60bb      	str	r3, [r7, #8]
   15b06:	4b59      	ldr	r3, [pc, #356]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15b08:	681b      	ldr	r3, [r3, #0]
   15b0a:	685b      	ldr	r3, [r3, #4]
   15b0c:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
   15b0e:	4b57      	ldr	r3, [pc, #348]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15b10:	681b      	ldr	r3, [r3, #0]
   15b12:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
   15b14:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   15b16:	69fb      	ldr	r3, [r7, #28]
   15b18:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_TPDO_init(
   15b1c:	2b03      	cmp	r3, #3
   15b1e:	d806      	bhi.n	15b2e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   15b20:	69fb      	ldr	r3, [r7, #28]
   15b22:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15b26:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
   15b28:	f503 72c0 	add.w	r2, r3, #384	; 0x180
   15b2c:	e000      	b.n	15b30 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
   15b2e:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
   15b30:	69fb      	ldr	r3, [r7, #28]
   15b32:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   15b36:	460b      	mov	r3, r1
   15b38:	00db      	lsls	r3, r3, #3
   15b3a:	1a5b      	subs	r3, r3, r1
   15b3c:	009b      	lsls	r3, r3, #2
   15b3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
   15b42:	4947      	ldr	r1, [pc, #284]	; (15c60 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15b44:	440b      	add	r3, r1
   15b46:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
   15b48:	69fb      	ldr	r3, [r7, #28]
   15b4a:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   15b4e:	460b      	mov	r3, r1
   15b50:	00db      	lsls	r3, r3, #3
   15b52:	440b      	add	r3, r1
   15b54:	009b      	lsls	r3, r3, #2
   15b56:	f503 73cc 	add.w	r3, r3, #408	; 0x198
   15b5a:	4941      	ldr	r1, [pc, #260]	; (15c60 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15b5c:	440b      	add	r3, r1
   15b5e:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
   15b60:	69f9      	ldr	r1, [r7, #28]
   15b62:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
		err = CO_TPDO_init(
   15b66:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
   15b6a:	69fc      	ldr	r4, [r7, #28]
   15b6c:	f8d4 4168 	ldr.w	r4, [r4, #360]	; 0x168
		err = CO_TPDO_init(
   15b70:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
   15b74:	4d3d      	ldr	r5, [pc, #244]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15b76:	682d      	ldr	r5, [r5, #0]
   15b78:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
   15b7a:	69fe      	ldr	r6, [r7, #28]
   15b7c:	f8d6 6168 	ldr.w	r6, [r6, #360]	; 0x168
		err = CO_TPDO_init(
   15b80:	3603      	adds	r6, #3
   15b82:	9609      	str	r6, [sp, #36]	; 0x24
   15b84:	9508      	str	r5, [sp, #32]
   15b86:	9407      	str	r4, [sp, #28]
   15b88:	9106      	str	r1, [sp, #24]
   15b8a:	9305      	str	r3, [sp, #20]
   15b8c:	9004      	str	r0, [sp, #16]
   15b8e:	2300      	movs	r3, #0
   15b90:	9303      	str	r3, [sp, #12]
   15b92:	9202      	str	r2, [sp, #8]
   15b94:	7dfb      	ldrb	r3, [r7, #23]
   15b96:	9301      	str	r3, [sp, #4]
   15b98:	683b      	ldr	r3, [r7, #0]
   15b9a:	9300      	str	r3, [sp, #0]
   15b9c:	687b      	ldr	r3, [r7, #4]
   15b9e:	68ba      	ldr	r2, [r7, #8]
   15ba0:	68f9      	ldr	r1, [r7, #12]
   15ba2:	4670      	mov	r0, lr
   15ba4:	4c32      	ldr	r4, [pc, #200]	; (15c70 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
   15ba6:	47a0      	blx	r4
   15ba8:	4603      	mov	r3, r0
   15baa:	461a      	mov	r2, r3
   15bac:	69fb      	ldr	r3, [r7, #28]
   15bae:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		if(err){CO_delete(); return err;}
   15bb2:	69fb      	ldr	r3, [r7, #28]
   15bb4:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15bb8:	2b00      	cmp	r3, #0
   15bba:	d006      	beq.n	15bca <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
   15bbc:	69f8      	ldr	r0, [r7, #28]
   15bbe:	4b2a      	ldr	r3, [pc, #168]	; (15c68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   15bc0:	4798      	blx	r3
   15bc2:	69fb      	ldr	r3, [r7, #28]
   15bc4:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15bc8:	e046      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
   15bca:	69fb      	ldr	r3, [r7, #28]
   15bcc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15bd0:	1c5a      	adds	r2, r3, #1
   15bd2:	69fb      	ldr	r3, [r7, #28]
   15bd4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15bd8:	e780      	b.n	15adc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
   15bda:	69fb      	ldr	r3, [r7, #28]
   15bdc:	f103 0220 	add.w	r2, r3, #32
   15be0:	69fb      	ldr	r3, [r7, #28]
   15be2:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
   15be6:	4619      	mov	r1, r3
   15be8:	4610      	mov	r0, r2
   15bea:	4b22      	ldr	r3, [pc, #136]	; (15c74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
   15bec:	4798      	blx	r3
	err = CO_HBconsumer_init(
   15bee:	69fb      	ldr	r3, [r7, #28]
   15bf0:	f103 0020 	add.w	r0, r3, #32
   15bf4:	4b1d      	ldr	r3, [pc, #116]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15bf6:	681b      	ldr	r3, [r3, #0]
   15bf8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   15bfa:	4b1c      	ldr	r3, [pc, #112]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15bfc:	681b      	ldr	r3, [r3, #0]
   15bfe:	689d      	ldr	r5, [r3, #8]
   15c00:	4b1a      	ldr	r3, [pc, #104]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15c02:	681b      	ldr	r3, [r3, #0]
   15c04:	685e      	ldr	r6, [r3, #4]
   15c06:	4b1c      	ldr	r3, [pc, #112]	; (15c78 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
   15c08:	681b      	ldr	r3, [r3, #0]
   15c0a:	4a18      	ldr	r2, [pc, #96]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15c0c:	6812      	ldr	r2, [r2, #0]
   15c0e:	6812      	ldr	r2, [r2, #0]
   15c10:	2107      	movs	r1, #7
   15c12:	9104      	str	r1, [sp, #16]
   15c14:	9203      	str	r2, [sp, #12]
   15c16:	2204      	movs	r2, #4
   15c18:	9202      	str	r2, [sp, #8]
   15c1a:	9301      	str	r3, [sp, #4]
   15c1c:	4b17      	ldr	r3, [pc, #92]	; (15c7c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
   15c1e:	9300      	str	r3, [sp, #0]
   15c20:	4633      	mov	r3, r6
   15c22:	462a      	mov	r2, r5
   15c24:	4621      	mov	r1, r4
   15c26:	4c16      	ldr	r4, [pc, #88]	; (15c80 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
   15c28:	47a0      	blx	r4
   15c2a:	4603      	mov	r3, r0
   15c2c:	461a      	mov	r2, r3
   15c2e:	69fb      	ldr	r3, [r7, #28]
   15c30:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
   15c34:	69fb      	ldr	r3, [r7, #28]
   15c36:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15c3a:	2b00      	cmp	r3, #0
   15c3c:	d006      	beq.n	15c4c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
   15c3e:	69f8      	ldr	r0, [r7, #28]
   15c40:	4b09      	ldr	r3, [pc, #36]	; (15c68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   15c42:	4798      	blx	r3
   15c44:	69fb      	ldr	r3, [r7, #28]
   15c46:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15c4a:	e005      	b.n	15c58 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
   15c4c:	4b07      	ldr	r3, [pc, #28]	; (15c6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15c4e:	681a      	ldr	r2, [r3, #0]
   15c50:	69fb      	ldr	r3, [r7, #28]
   15c52:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	return CO_ERROR_NO;
   15c56:	2300      	movs	r3, #0
}
   15c58:	4618      	mov	r0, r3
   15c5a:	3734      	adds	r7, #52	; 0x34
   15c5c:	46bd      	mov	sp, r7
   15c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c60:	2000039c 	.word	0x2000039c
   15c64:	000179ed 	.word	0x000179ed
   15c68:	00015c85 	.word	0x00015c85
   15c6c:	2000d1d4 	.word	0x2000d1d4
   15c70:	00017af5 	.word	0x00017af5
   15c74:	00016c11 	.word	0x00016c11
   15c78:	2000d1e4 	.word	0x2000d1e4
   15c7c:	200003cc 	.word	0x200003cc
   15c80:	00016b41 	.word	0x00016b41

00015c84 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
   15c84:	b580      	push	{r7, lr}
   15c86:	b082      	sub	sp, #8
   15c88:	af00      	add	r7, sp, #0
   15c8a:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
   15c8c:	687a      	ldr	r2, [r7, #4]
   15c8e:	687b      	ldr	r3, [r7, #4]
   15c90:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   15c94:	4619      	mov	r1, r3
   15c96:	4610      	mov	r0, r2
   15c98:	4b04      	ldr	r3, [pc, #16]	; (15cac <_ZN8CO_Class9CO_deleteEv+0x28>)
   15c9a:	4798      	blx	r3
	CANmodule_Disable();
   15c9c:	687b      	ldr	r3, [r7, #4]
   15c9e:	4618      	mov	r0, r3
   15ca0:	4b03      	ldr	r3, [pc, #12]	; (15cb0 <_ZN8CO_Class9CO_deleteEv+0x2c>)
   15ca2:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
   15ca4:	bf00      	nop
   15ca6:	3708      	adds	r7, #8
   15ca8:	46bd      	mov	sp, r7
   15caa:	bd80      	pop	{r7, pc}
   15cac:	00015f01 	.word	0x00015f01
   15cb0:	000160c9 	.word	0x000160c9

00015cb4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
   15cb4:	b480      	push	{r7}
   15cb6:	b083      	sub	sp, #12
   15cb8:	af00      	add	r7, sp, #0
   15cba:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
   15cbc:	687b      	ldr	r3, [r7, #4]
   15cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   15cc0:	4618      	mov	r0, r3
   15cc2:	370c      	adds	r7, #12
   15cc4:	46bd      	mov	sp, r7
   15cc6:	bc80      	pop	{r7}
   15cc8:	4770      	bx	lr
	...

00015ccc <_ZL14CO_rx_callbackP20can_async_descriptor>:
static uint8_t		local_error_flags_array[2];
static uint16_t	local_compressor_temperatures[3];


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
   15ccc:	b580      	push	{r7, lr}
   15cce:	b082      	sub	sp, #8
   15cd0:	af00      	add	r7, sp, #0
   15cd2:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
   15cd4:	4b12      	ldr	r3, [pc, #72]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15cd6:	681b      	ldr	r3, [r3, #0]
   15cd8:	4a11      	ldr	r2, [pc, #68]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15cda:	6812      	ldr	r2, [r2, #0]
   15cdc:	3230      	adds	r2, #48	; 0x30
   15cde:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
   15ce0:	4b0f      	ldr	r3, [pc, #60]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15ce2:	681b      	ldr	r3, [r3, #0]
   15ce4:	3370      	adds	r3, #112	; 0x70
   15ce6:	4619      	mov	r1, r3
   15ce8:	6878      	ldr	r0, [r7, #4]
   15cea:	4b0e      	ldr	r3, [pc, #56]	; (15d24 <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
   15cec:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
   15cee:	4b0c      	ldr	r3, [pc, #48]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15cf0:	681b      	ldr	r3, [r3, #0]
   15cf2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   15cf6:	b2db      	uxtb	r3, r3
   15cf8:	2b00      	cmp	r3, #0
   15cfa:	d007      	beq.n	15d0c <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
   15cfc:	4b08      	ldr	r3, [pc, #32]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15cfe:	681b      	ldr	r3, [r3, #0]
   15d00:	681b      	ldr	r3, [r3, #0]
   15d02:	681b      	ldr	r3, [r3, #0]
   15d04:	4a06      	ldr	r2, [pc, #24]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15d06:	6812      	ldr	r2, [r2, #0]
   15d08:	4610      	mov	r0, r2
   15d0a:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
   15d0c:	4b04      	ldr	r3, [pc, #16]	; (15d20 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15d0e:	681b      	ldr	r3, [r3, #0]
   15d10:	2201      	movs	r2, #1
   15d12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
   15d16:	bf00      	nop
   15d18:	3708      	adds	r7, #8
   15d1a:	46bd      	mov	sp, r7
   15d1c:	bd80      	pop	{r7, pc}
   15d1e:	bf00      	nop
   15d20:	2000da88 	.word	0x2000da88
   15d24:	00003475 	.word	0x00003475

00015d28 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
   15d28:	b590      	push	{r4, r7, lr}
   15d2a:	b083      	sub	sp, #12
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
   15d30:	4b08      	ldr	r3, [pc, #32]	; (15d54 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   15d32:	681c      	ldr	r4, [r3, #0]
   15d34:	687b      	ldr	r3, [r7, #4]
   15d36:	681b      	ldr	r3, [r3, #0]
   15d38:	4618      	mov	r0, r3
   15d3a:	4b07      	ldr	r3, [pc, #28]	; (15d58 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
   15d3c:	4798      	blx	r3
   15d3e:	4603      	mov	r3, r0
   15d40:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
   15d42:	4b04      	ldr	r3, [pc, #16]	; (15d54 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   15d44:	681b      	ldr	r3, [r3, #0]
   15d46:	2201      	movs	r2, #1
   15d48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   15d4c:	bf00      	nop
   15d4e:	370c      	adds	r7, #12
   15d50:	46bd      	mov	sp, r7
   15d52:	bd90      	pop	{r4, r7, pc}
   15d54:	2000da88 	.word	0x2000da88
   15d58:	00015cb5 	.word	0x00015cb5

00015d5c <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
   15d5c:	b480      	push	{r7}
   15d5e:	b083      	sub	sp, #12
   15d60:	af00      	add	r7, sp, #0
   15d62:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
   15d64:	4b04      	ldr	r3, [pc, #16]	; (15d78 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
   15d66:	681b      	ldr	r3, [r3, #0]
   15d68:	2201      	movs	r2, #1
   15d6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
   15d6e:	bf00      	nop
   15d70:	370c      	adds	r7, #12
   15d72:	46bd      	mov	sp, r7
   15d74:	bc80      	pop	{r7}
   15d76:	4770      	bx	lr
   15d78:	2000da88 	.word	0x2000da88

00015d7c <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
   15d7c:	b580      	push	{r7, lr}
   15d7e:	b082      	sub	sp, #8
   15d80:	af00      	add	r7, sp, #0
   15d82:	6078      	str	r0, [r7, #4]
   15d84:	687b      	ldr	r3, [r7, #4]
   15d86:	3304      	adds	r3, #4
   15d88:	4618      	mov	r0, r3
   15d8a:	4b17      	ldr	r3, [pc, #92]	; (15de8 <_ZN15CO_Driver_ClassC1Ev+0x6c>)
   15d8c:	4798      	blx	r3
   15d8e:	6878      	ldr	r0, [r7, #4]
   15d90:	4b16      	ldr	r3, [pc, #88]	; (15dec <_ZN15CO_Driver_ClassC1Ev+0x70>)
   15d92:	4798      	blx	r3
   15d94:	687b      	ldr	r3, [r7, #4]
   15d96:	330c      	adds	r3, #12
   15d98:	4618      	mov	r0, r3
   15d9a:	4b15      	ldr	r3, [pc, #84]	; (15df0 <_ZN15CO_Driver_ClassC1Ev+0x74>)
   15d9c:	4798      	blx	r3
   15d9e:	687b      	ldr	r3, [r7, #4]
   15da0:	3314      	adds	r3, #20
   15da2:	4618      	mov	r0, r3
   15da4:	4b13      	ldr	r3, [pc, #76]	; (15df4 <_ZN15CO_Driver_ClassC1Ev+0x78>)
   15da6:	4798      	blx	r3
   15da8:	687b      	ldr	r3, [r7, #4]
   15daa:	3320      	adds	r3, #32
   15dac:	4618      	mov	r0, r3
   15dae:	4b12      	ldr	r3, [pc, #72]	; (15df8 <_ZN15CO_Driver_ClassC1Ev+0x7c>)
   15db0:	4798      	blx	r3
   15db2:	4a12      	ldr	r2, [pc, #72]	; (15dfc <_ZN15CO_Driver_ClassC1Ev+0x80>)
   15db4:	687b      	ldr	r3, [r7, #4]
   15db6:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
   15db8:	687b      	ldr	r3, [r7, #4]
   15dba:	2200      	movs	r2, #0
   15dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
   15dc0:	4a0f      	ldr	r2, [pc, #60]	; (15e00 <_ZN15CO_Driver_ClassC1Ev+0x84>)
   15dc2:	687b      	ldr	r3, [r7, #4]
   15dc4:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
   15dc6:	687b      	ldr	r3, [r7, #4]
   15dc8:	2200      	movs	r2, #0
   15dca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	status_flags=&local_status_flags;
   15dce:	687b      	ldr	r3, [r7, #4]
   15dd0:	4a0c      	ldr	r2, [pc, #48]	; (15e04 <_ZN15CO_Driver_ClassC1Ev+0x88>)
   15dd2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	error_flags_array=local_error_flags_array;
   15dd6:	687b      	ldr	r3, [r7, #4]
   15dd8:	4a0b      	ldr	r2, [pc, #44]	; (15e08 <_ZN15CO_Driver_ClassC1Ev+0x8c>)
   15dda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
} //CO_Driver_Class
   15dde:	687b      	ldr	r3, [r7, #4]
   15de0:	4618      	mov	r0, r3
   15de2:	3708      	adds	r7, #8
   15de4:	46bd      	mov	sp, r7
   15de6:	bd80      	pop	{r7, pc}
   15de8:	00016589 	.word	0x00016589
   15dec:	00016cdf 	.word	0x00016cdf
   15df0:	000184ed 	.word	0x000184ed
   15df4:	00016e41 	.word	0x00016e41
   15df8:	00016b0d 	.word	0x00016b0d
   15dfc:	0001bcb0 	.word	0x0001bcb0
   15e00:	2000da88 	.word	0x2000da88
   15e04:	2000da8c 	.word	0x2000da8c
   15e08:	2000da94 	.word	0x2000da94

00015e0c <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
   15e0c:	b580      	push	{r7, lr}
   15e0e:	b082      	sub	sp, #8
   15e10:	af00      	add	r7, sp, #0
   15e12:	6078      	str	r0, [r7, #4]
   15e14:	4a0f      	ldr	r2, [pc, #60]	; (15e54 <_ZN15CO_Driver_ClassD1Ev+0x48>)
   15e16:	687b      	ldr	r3, [r7, #4]
   15e18:	601a      	str	r2, [r3, #0]
   15e1a:	687b      	ldr	r3, [r7, #4]
   15e1c:	3320      	adds	r3, #32
   15e1e:	4618      	mov	r0, r3
   15e20:	4b0d      	ldr	r3, [pc, #52]	; (15e58 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
   15e22:	4798      	blx	r3
   15e24:	687b      	ldr	r3, [r7, #4]
   15e26:	3314      	adds	r3, #20
   15e28:	4618      	mov	r0, r3
   15e2a:	4b0c      	ldr	r3, [pc, #48]	; (15e5c <_ZN15CO_Driver_ClassD1Ev+0x50>)
   15e2c:	4798      	blx	r3
   15e2e:	687b      	ldr	r3, [r7, #4]
   15e30:	330c      	adds	r3, #12
   15e32:	4618      	mov	r0, r3
   15e34:	4b0a      	ldr	r3, [pc, #40]	; (15e60 <_ZN15CO_Driver_ClassD1Ev+0x54>)
   15e36:	4798      	blx	r3
   15e38:	6878      	ldr	r0, [r7, #4]
   15e3a:	4b0a      	ldr	r3, [pc, #40]	; (15e64 <_ZN15CO_Driver_ClassD1Ev+0x58>)
   15e3c:	4798      	blx	r3
   15e3e:	687b      	ldr	r3, [r7, #4]
   15e40:	3304      	adds	r3, #4
   15e42:	4618      	mov	r0, r3
   15e44:	4b08      	ldr	r3, [pc, #32]	; (15e68 <_ZN15CO_Driver_ClassD1Ev+0x5c>)
   15e46:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
   15e48:	687b      	ldr	r3, [r7, #4]
   15e4a:	4618      	mov	r0, r3
   15e4c:	3708      	adds	r7, #8
   15e4e:	46bd      	mov	sp, r7
   15e50:	bd80      	pop	{r7, pc}
   15e52:	bf00      	nop
   15e54:	0001bcb0 	.word	0x0001bcb0
   15e58:	00016b2d 	.word	0x00016b2d
   15e5c:	00016e55 	.word	0x00016e55
   15e60:	00018501 	.word	0x00018501
   15e64:	00016cf3 	.word	0x00016cf3
   15e68:	000165b1 	.word	0x000165b1

00015e6c <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
   15e6c:	b480      	push	{r7}
   15e6e:	b085      	sub	sp, #20
   15e70:	af00      	add	r7, sp, #0
   15e72:	60f8      	str	r0, [r7, #12]
   15e74:	60b9      	str	r1, [r7, #8]
   15e76:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
   15e78:	68bb      	ldr	r3, [r7, #8]
   15e7a:	2200      	movs	r2, #0
   15e7c:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
   15e7e:	68bb      	ldr	r3, [r7, #8]
   15e80:	2200      	movs	r2, #0
   15e82:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
   15e84:	687b      	ldr	r3, [r7, #4]
   15e86:	791a      	ldrb	r2, [r3, #4]
   15e88:	68bb      	ldr	r3, [r7, #8]
   15e8a:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
   15e8c:	687b      	ldr	r3, [r7, #4]
   15e8e:	681b      	ldr	r3, [r3, #0]
   15e90:	089a      	lsrs	r2, r3, #2
   15e92:	68bb      	ldr	r3, [r7, #8]
   15e94:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
   15e96:	687b      	ldr	r3, [r7, #4]
   15e98:	681b      	ldr	r3, [r3, #0]
   15e9a:	b2db      	uxtb	r3, r3
   15e9c:	f003 0302 	and.w	r3, r3, #2
   15ea0:	b2da      	uxtb	r2, r3
   15ea2:	68bb      	ldr	r3, [r7, #8]
   15ea4:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
   15ea6:	687b      	ldr	r3, [r7, #4]
   15ea8:	1d5a      	adds	r2, r3, #5
   15eaa:	68bb      	ldr	r3, [r7, #8]
   15eac:	609a      	str	r2, [r3, #8]
}
   15eae:	bf00      	nop
   15eb0:	3714      	adds	r7, #20
   15eb2:	46bd      	mov	sp, r7
   15eb4:	bc80      	pop	{r7}
   15eb6:	4770      	bx	lr

00015eb8 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
   15eb8:	b590      	push	{r4, r7, lr}
   15eba:	b085      	sub	sp, #20
   15ebc:	af00      	add	r7, sp, #0
   15ebe:	60f8      	str	r0, [r7, #12]
   15ec0:	60b9      	str	r1, [r7, #8]
   15ec2:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
   15ec4:	687a      	ldr	r2, [r7, #4]
   15ec6:	68bb      	ldr	r3, [r7, #8]
   15ec8:	4614      	mov	r4, r2
   15eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
   15ed0:	68bb      	ldr	r3, [r7, #8]
   15ed2:	7b1a      	ldrb	r2, [r3, #12]
   15ed4:	687b      	ldr	r3, [r7, #4]
   15ed6:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
   15ed8:	68bb      	ldr	r3, [r7, #8]
   15eda:	681a      	ldr	r2, [r3, #0]
   15edc:	687b      	ldr	r3, [r7, #4]
   15ede:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
   15ee0:	687b      	ldr	r3, [r7, #4]
   15ee2:	f103 0015 	add.w	r0, r3, #21
   15ee6:	68bb      	ldr	r3, [r7, #8]
   15ee8:	6899      	ldr	r1, [r3, #8]
   15eea:	68bb      	ldr	r3, [r7, #8]
   15eec:	7b1b      	ldrb	r3, [r3, #12]
   15eee:	461a      	mov	r2, r3
   15ef0:	4b02      	ldr	r3, [pc, #8]	; (15efc <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
   15ef2:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
   15ef4:	bf00      	nop
   15ef6:	3714      	adds	r7, #20
   15ef8:	46bd      	mov	sp, r7
   15efa:	bd90      	pop	{r4, r7, pc}
   15efc:	0001b0e1 	.word	0x0001b0e1

00015f00 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
   15f00:	b480      	push	{r7}
   15f02:	b083      	sub	sp, #12
   15f04:	af00      	add	r7, sp, #0
   15f06:	6078      	str	r0, [r7, #4]
   15f08:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
   15f0a:	687b      	ldr	r3, [r7, #4]
   15f0c:	683a      	ldr	r2, [r7, #0]
   15f0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
   15f12:	bf00      	nop
   15f14:	370c      	adds	r7, #12
   15f16:	46bd      	mov	sp, r7
   15f18:	bc80      	pop	{r7}
   15f1a:	4770      	bx	lr

00015f1c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
   15f1c:	b580      	push	{r7, lr}
   15f1e:	b084      	sub	sp, #16
   15f20:	af00      	add	r7, sp, #0
   15f22:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
   15f24:	687b      	ldr	r3, [r7, #4]
   15f26:	2200      	movs	r2, #0
   15f28:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
   15f2c:	687b      	ldr	r3, [r7, #4]
   15f2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15f32:	681b      	ldr	r3, [r3, #0]
   15f34:	4618      	mov	r0, r3
   15f36:	4b0a      	ldr	r3, [pc, #40]	; (15f60 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
   15f38:	4798      	blx	r3
   15f3a:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
   15f3c:	68fb      	ldr	r3, [r7, #12]
   15f3e:	2b00      	cmp	r3, #0
   15f40:	d002      	beq.n	15f48 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   15f42:	f06f 030e 	mvn.w	r3, #14
   15f46:	e007      	b.n	15f58 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
   15f48:	687b      	ldr	r3, [r7, #4]
   15f4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15f4e:	2201      	movs	r2, #1
   15f50:	751a      	strb	r2, [r3, #20]
	return Error;
   15f52:	687b      	ldr	r3, [r7, #4]
   15f54:	f993 30b4 	ldrsb.w	r3, [r3, #180]	; 0xb4
}
   15f58:	4618      	mov	r0, r3
   15f5a:	3710      	adds	r7, #16
   15f5c:	46bd      	mov	sp, r7
   15f5e:	bd80      	pop	{r7, pc}
   15f60:	00003439 	.word	0x00003439

00015f64 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
   15f64:	b580      	push	{r7, lr}
   15f66:	b086      	sub	sp, #24
   15f68:	af00      	add	r7, sp, #0
   15f6a:	60f8      	str	r0, [r7, #12]
   15f6c:	60b9      	str	r1, [r7, #8]
   15f6e:	607a      	str	r2, [r7, #4]
   15f70:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
   15f72:	68fb      	ldr	r3, [r7, #12]
   15f74:	687a      	ldr	r2, [r7, #4]
   15f76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
   15f7a:	68bb      	ldr	r3, [r7, #8]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d005      	beq.n	15f8c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15f80:	683b      	ldr	r3, [r7, #0]
   15f82:	2b00      	cmp	r3, #0
   15f84:	d002      	beq.n	15f8c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f88:	2b00      	cmp	r3, #0
   15f8a:	d102      	bne.n	15f92 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
   15f8c:	f04f 33ff 	mov.w	r3, #4294967295
   15f90:	e089      	b.n	160a6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x142>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
   15f92:	68fb      	ldr	r3, [r7, #12]
   15f94:	68ba      	ldr	r2, [r7, #8]
   15f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
   15f9a:	68bb      	ldr	r3, [r7, #8]
   15f9c:	687a      	ldr	r2, [r7, #4]
   15f9e:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
   15fa0:	68bb      	ldr	r3, [r7, #8]
   15fa2:	683a      	ldr	r2, [r7, #0]
   15fa4:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
   15fa6:	68bb      	ldr	r3, [r7, #8]
   15fa8:	6a3a      	ldr	r2, [r7, #32]
   15faa:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
   15fac:	68bb      	ldr	r3, [r7, #8]
   15fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15fb0:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
   15fb2:	68bb      	ldr	r3, [r7, #8]
   15fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15fb6:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
   15fb8:	68bb      	ldr	r3, [r7, #8]
   15fba:	2200      	movs	r2, #0
   15fbc:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
   15fbe:	68bb      	ldr	r3, [r7, #8]
   15fc0:	2200      	movs	r2, #0
   15fc2:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
   15fc4:	68bb      	ldr	r3, [r7, #8]
   15fc6:	2200      	movs	r2, #0
   15fc8:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
   15fca:	68bb      	ldr	r3, [r7, #8]
   15fcc:	2201      	movs	r2, #1
   15fce:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
   15fd0:	68bb      	ldr	r3, [r7, #8]
   15fd2:	2200      	movs	r2, #0
   15fd4:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
   15fd6:	68bb      	ldr	r3, [r7, #8]
   15fd8:	2200      	movs	r2, #0
   15fda:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
   15fdc:	68bb      	ldr	r3, [r7, #8]
   15fde:	2200      	movs	r2, #0
   15fe0:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
   15fe2:	68fb      	ldr	r3, [r7, #12]
   15fe4:	2200      	movs	r2, #0
   15fe6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   15fea:	68fb      	ldr	r3, [r7, #12]
   15fec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   15ff0:	6a3b      	ldr	r3, [r7, #32]
   15ff2:	429a      	cmp	r2, r3
   15ff4:	d217      	bcs.n	16026 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
   15ff6:	68fb      	ldr	r3, [r7, #12]
   15ff8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15ffc:	011b      	lsls	r3, r3, #4
   15ffe:	683a      	ldr	r2, [r7, #0]
   16000:	4413      	add	r3, r2
   16002:	2200      	movs	r2, #0
   16004:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
   16006:	68fb      	ldr	r3, [r7, #12]
   16008:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1600c:	011b      	lsls	r3, r3, #4
   1600e:	683a      	ldr	r2, [r7, #0]
   16010:	4413      	add	r3, r2
   16012:	2200      	movs	r2, #0
   16014:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
   16016:	68fb      	ldr	r3, [r7, #12]
   16018:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1601c:	1c5a      	adds	r2, r3, #1
   1601e:	68fb      	ldr	r3, [r7, #12]
   16020:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   16024:	e7e1      	b.n	15fea <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
   16026:	68fb      	ldr	r3, [r7, #12]
   16028:	2200      	movs	r2, #0
   1602a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   1602e:	68fb      	ldr	r3, [r7, #12]
   16030:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   16034:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16036:	429a      	cmp	r2, r3
   16038:	d20f      	bcs.n	1605a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
   1603a:	68fb      	ldr	r3, [r7, #12]
   1603c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   16040:	011b      	lsls	r3, r3, #4
   16042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16044:	4413      	add	r3, r2
   16046:	2200      	movs	r2, #0
   16048:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
   1604a:	68fb      	ldr	r3, [r7, #12]
   1604c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   16050:	1c5a      	adds	r2, r3, #1
   16052:	68fb      	ldr	r3, [r7, #12]
   16054:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   16058:	e7e9      	b.n	1602e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
   1605a:	68f8      	ldr	r0, [r7, #12]
   1605c:	4b14      	ldr	r3, [pc, #80]	; (160b0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
   1605e:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
   16060:	68fb      	ldr	r3, [r7, #12]
   16062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   16066:	4a13      	ldr	r2, [pc, #76]	; (160b4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
   16068:	2100      	movs	r1, #0
   1606a:	4618      	mov	r0, r3
   1606c:	4b12      	ldr	r3, [pc, #72]	; (160b8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
   1606e:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
   16070:	68fb      	ldr	r3, [r7, #12]
   16072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   16076:	4a11      	ldr	r2, [pc, #68]	; (160bc <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x158>)
   16078:	2102      	movs	r1, #2
   1607a:	4618      	mov	r0, r3
   1607c:	4b0e      	ldr	r3, [pc, #56]	; (160b8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
   1607e:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
   16080:	6878      	ldr	r0, [r7, #4]
   16082:	4b0f      	ldr	r3, [pc, #60]	; (160c0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x15c>)
   16084:	4798      	blx	r3
   16086:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
   16088:	697b      	ldr	r3, [r7, #20]
   1608a:	2b00      	cmp	r3, #0
   1608c:	d002      	beq.n	16094 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   1608e:	f06f 030e 	mvn.w	r3, #14
   16092:	e008      	b.n	160a6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x142>
	}
	CAN_Module=CANmodule;
   16094:	68fb      	ldr	r3, [r7, #12]
   16096:	68ba      	ldr	r2, [r7, #8]
   16098:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	compressor_temperatures=local_compressor_temperatures;
   1609c:	68fb      	ldr	r3, [r7, #12]
   1609e:	4a09      	ldr	r2, [pc, #36]	; (160c4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x160>)
   160a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	return CO_ERROR_NO;
   160a4:	2300      	movs	r3, #0
}
   160a6:	4618      	mov	r0, r3
   160a8:	3718      	adds	r7, #24
   160aa:	46bd      	mov	sp, r7
   160ac:	bd80      	pop	{r7, pc}
   160ae:	bf00      	nop
   160b0:	000160c9 	.word	0x000160c9
   160b4:	00015ccd 	.word	0x00015ccd
   160b8:	0000350d 	.word	0x0000350d
   160bc:	00015d29 	.word	0x00015d29
   160c0:	00003439 	.word	0x00003439
   160c4:	2000da98 	.word	0x2000da98

000160c8 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
   160c8:	b480      	push	{r7}
   160ca:	b083      	sub	sp, #12
   160cc:	af00      	add	r7, sp, #0
   160ce:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
   160d0:	bf00      	nop
   160d2:	370c      	adds	r7, #12
   160d4:	46bd      	mov	sp, r7
   160d6:	bc80      	pop	{r7}
   160d8:	4770      	bx	lr

000160da <_ZN15CO_Driver_Class14Set_Slave_NodeEh>:
uint8_t CO_Driver_Class::Set_Slave_Node(uint8_t sn){
   160da:	b480      	push	{r7}
   160dc:	b083      	sub	sp, #12
   160de:	af00      	add	r7, sp, #0
   160e0:	6078      	str	r0, [r7, #4]
   160e2:	460b      	mov	r3, r1
   160e4:	70fb      	strb	r3, [r7, #3]
	slave_node=sn;
   160e6:	687b      	ldr	r3, [r7, #4]
   160e8:	78fa      	ldrb	r2, [r7, #3]
   160ea:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	return slave_node;
   160ee:	687b      	ldr	r3, [r7, #4]
   160f0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
}
   160f4:	4618      	mov	r0, r3
   160f6:	370c      	adds	r7, #12
   160f8:	46bd      	mov	sp, r7
   160fa:	bc80      	pop	{r7}
   160fc:	4770      	bx	lr
	...

00016100 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
   16100:	b590      	push	{r4, r7, lr}
   16102:	b087      	sub	sp, #28
   16104:	af00      	add	r7, sp, #0
   16106:	60f8      	str	r0, [r7, #12]
   16108:	60b9      	str	r1, [r7, #8]
   1610a:	607a      	str	r2, [r7, #4]
   1610c:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
   1610e:	68fb      	ldr	r3, [r7, #12]
   16110:	2200      	movs	r2, #0
   16112:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
   16116:	68fb      	ldr	r3, [r7, #12]
   16118:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1611c:	2b00      	cmp	r3, #0
   1611e:	d060      	beq.n	161e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   16120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16122:	2b00      	cmp	r3, #0
   16124:	d05d      	beq.n	161e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   16126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16128:	2b00      	cmp	r3, #0
   1612a:	d05a      	beq.n	161e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   1612c:	68fb      	ldr	r3, [r7, #12]
   1612e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16132:	689a      	ldr	r2, [r3, #8]
   16134:	68bb      	ldr	r3, [r7, #8]
   16136:	429a      	cmp	r2, r3
   16138:	d953      	bls.n	161e2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
   1613a:	68fb      	ldr	r3, [r7, #12]
   1613c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16140:	685a      	ldr	r2, [r3, #4]
   16142:	68bb      	ldr	r3, [r7, #8]
   16144:	011b      	lsls	r3, r3, #4
   16146:	4413      	add	r3, r2
   16148:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
   1614a:	697b      	ldr	r3, [r7, #20]
   1614c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1614e:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
   16150:	697b      	ldr	r3, [r7, #20]
   16152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16154:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
   16156:	687b      	ldr	r3, [r7, #4]
   16158:	009a      	lsls	r2, r3, #2
   1615a:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   1615e:	4013      	ands	r3, r2
   16160:	697a      	ldr	r2, [r7, #20]
   16162:	6013      	str	r3, [r2, #0]
		if (rtr)
   16164:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16168:	2b00      	cmp	r3, #0
   1616a:	d005      	beq.n	16178 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
   1616c:	697b      	ldr	r3, [r7, #20]
   1616e:	681b      	ldr	r3, [r3, #0]
   16170:	f043 0202 	orr.w	r2, r3, #2
   16174:	697b      	ldr	r3, [r7, #20]
   16176:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
   16178:	683b      	ldr	r3, [r7, #0]
   1617a:	009a      	lsls	r2, r3, #2
   1617c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   16180:	4013      	ands	r3, r2
   16182:	697a      	ldr	r2, [r7, #20]
   16184:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
   16186:	697b      	ldr	r3, [r7, #20]
   16188:	685b      	ldr	r3, [r3, #4]
   1618a:	f043 0202 	orr.w	r2, r3, #2
   1618e:	697b      	ldr	r3, [r7, #20]
   16190:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
   16192:	68fb      	ldr	r3, [r7, #12]
   16194:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16198:	7d5b      	ldrb	r3, [r3, #21]
   1619a:	b2db      	uxtb	r3, r3
   1619c:	2b00      	cmp	r3, #0
   1619e:	bf14      	ite	ne
   161a0:	2301      	movne	r3, #1
   161a2:	2300      	moveq	r3, #0
   161a4:	b2db      	uxtb	r3, r3
   161a6:	2b00      	cmp	r3, #0
   161a8:	d120      	bne.n	161ec <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
   161aa:	697b      	ldr	r3, [r7, #20]
   161ac:	681a      	ldr	r2, [r3, #0]
   161ae:	68fb      	ldr	r3, [r7, #12]
   161b0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			CO_Filter.mask = buffer->mask;
   161b4:	697b      	ldr	r3, [r7, #20]
   161b6:	685a      	ldr	r2, [r3, #4]
   161b8:	68fb      	ldr	r3, [r7, #12]
   161ba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
   161be:	68fb      	ldr	r3, [r7, #12]
   161c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   161c4:	6818      	ldr	r0, [r3, #0]
   161c6:	68bb      	ldr	r3, [r7, #8]
   161c8:	b2d9      	uxtb	r1, r3
   161ca:	68fb      	ldr	r3, [r7, #12]
   161cc:	f503 739c 	add.w	r3, r3, #312	; 0x138
   161d0:	2200      	movs	r2, #0
   161d2:	4c0a      	ldr	r4, [pc, #40]	; (161fc <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
   161d4:	47a0      	blx	r4
   161d6:	4603      	mov	r3, r0
   161d8:	b25a      	sxtb	r2, r3
   161da:	68fb      	ldr	r3, [r7, #12]
   161dc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
   161e0:	e004      	b.n	161ec <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
   161e2:	68fb      	ldr	r3, [r7, #12]
   161e4:	22ff      	movs	r2, #255	; 0xff
   161e6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
   161ea:	e000      	b.n	161ee <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
   161ec:	bf00      	nop
	}
	return ret;
   161ee:	68fb      	ldr	r3, [r7, #12]
   161f0:	f993 30b5 	ldrsb.w	r3, [r3, #181]	; 0xb5
}
   161f4:	4618      	mov	r0, r3
   161f6:	371c      	adds	r7, #28
   161f8:	46bd      	mov	sp, r7
   161fa:	bd90      	pop	{r4, r7, pc}
   161fc:	00003589 	.word	0x00003589

00016200 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
   16200:	b480      	push	{r7}
   16202:	b085      	sub	sp, #20
   16204:	af00      	add	r7, sp, #0
   16206:	60f8      	str	r0, [r7, #12]
   16208:	60b9      	str	r1, [r7, #8]
   1620a:	607a      	str	r2, [r7, #4]
   1620c:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
   1620e:	68fb      	ldr	r3, [r7, #12]
   16210:	2200      	movs	r2, #0
   16212:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
   16216:	68fb      	ldr	r3, [r7, #12]
   16218:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1621c:	2b00      	cmp	r3, #0
   1621e:	d03c      	beq.n	1629a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
   16220:	68fb      	ldr	r3, [r7, #12]
   16222:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16226:	691a      	ldr	r2, [r3, #16]
   16228:	68bb      	ldr	r3, [r7, #8]
   1622a:	429a      	cmp	r2, r3
   1622c:	d935      	bls.n	1629a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
   1622e:	68fb      	ldr	r3, [r7, #12]
   16230:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16234:	68da      	ldr	r2, [r3, #12]
   16236:	68bb      	ldr	r3, [r7, #8]
   16238:	011b      	lsls	r3, r3, #4
   1623a:	441a      	add	r2, r3
   1623c:	68fb      	ldr	r3, [r7, #12]
   1623e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
   16242:	68fb      	ldr	r3, [r7, #12]
   16244:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   16248:	68fa      	ldr	r2, [r7, #12]
   1624a:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   1624e:	6812      	ldr	r2, [r2, #0]
   16250:	f3c2 020a 	ubfx	r2, r2, #0, #11
   16254:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
   16256:	68fb      	ldr	r3, [r7, #12]
   16258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1625c:	687a      	ldr	r2, [r7, #4]
   1625e:	0092      	lsls	r2, r2, #2
   16260:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
   16262:	78fb      	ldrb	r3, [r7, #3]
   16264:	2b00      	cmp	r3, #0
   16266:	d009      	beq.n	1627c <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
   16268:	68fb      	ldr	r3, [r7, #12]
   1626a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1626e:	68fa      	ldr	r2, [r7, #12]
   16270:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   16274:	6812      	ldr	r2, [r2, #0]
   16276:	f042 0202 	orr.w	r2, r2, #2
   1627a:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
   1627c:	68fb      	ldr	r3, [r7, #12]
   1627e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   16282:	7e3a      	ldrb	r2, [r7, #24]
   16284:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
   16286:	68fb      	ldr	r3, [r7, #12]
   16288:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1628c:	2200      	movs	r2, #0
   1628e:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
   16290:	68fb      	ldr	r3, [r7, #12]
   16292:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   16296:	7f3a      	ldrb	r2, [r7, #28]
   16298:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
   1629a:	68fb      	ldr	r3, [r7, #12]
   1629c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
}
   162a0:	4618      	mov	r0, r3
   162a2:	3714      	adds	r7, #20
   162a4:	46bd      	mov	sp, r7
   162a6:	bc80      	pop	{r7}
   162a8:	4770      	bx	lr
	...

000162ac <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
   162ac:	b590      	push	{r4, r7, lr}
   162ae:	b089      	sub	sp, #36	; 0x24
   162b0:	af02      	add	r7, sp, #8
   162b2:	6078      	str	r0, [r7, #4]
   162b4:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
   162b6:	687b      	ldr	r3, [r7, #4]
   162b8:	2200      	movs	r2, #0
   162ba:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6

	if(buffer->bufferFull){
   162be:	683b      	ldr	r3, [r7, #0]
   162c0:	7b5b      	ldrb	r3, [r3, #13]
   162c2:	b2db      	uxtb	r3, r3
   162c4:	2b00      	cmp	r3, #0
   162c6:	bf14      	ite	ne
   162c8:	2301      	movne	r3, #1
   162ca:	2300      	moveq	r3, #0
   162cc:	b2db      	uxtb	r3, r3
   162ce:	2b00      	cmp	r3, #0
   162d0:	d01d      	beq.n	1630e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
   162d2:	687b      	ldr	r3, [r7, #4]
   162d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   162d8:	7ddb      	ldrb	r3, [r3, #23]
   162da:	b2db      	uxtb	r3, r3
   162dc:	2b00      	cmp	r3, #0
   162de:	bf0c      	ite	eq
   162e0:	2301      	moveq	r3, #1
   162e2:	2300      	movne	r3, #0
   162e4:	b2db      	uxtb	r3, r3
   162e6:	2b00      	cmp	r3, #0
   162e8:	d00d      	beq.n	16306 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
   162ea:	687b      	ldr	r3, [r7, #4]
   162ec:	1d18      	adds	r0, r3, #4
   162ee:	687b      	ldr	r3, [r7, #4]
   162f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   162f4:	6a19      	ldr	r1, [r3, #32]
   162f6:	683b      	ldr	r3, [r7, #0]
   162f8:	681b      	ldr	r3, [r3, #0]
   162fa:	9300      	str	r3, [sp, #0]
   162fc:	f248 1310 	movw	r3, #33040	; 0x8110
   16300:	2214      	movs	r2, #20
   16302:	4c35      	ldr	r4, [pc, #212]	; (163d8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
   16304:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
   16306:	687b      	ldr	r3, [r7, #4]
   16308:	22f7      	movs	r2, #247	; 0xf7
   1630a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	}

	

	PrepareTxMessage(&msgHeader, buffer);
   1630e:	687b      	ldr	r3, [r7, #4]
   16310:	3384      	adds	r3, #132	; 0x84
   16312:	683a      	ldr	r2, [r7, #0]
   16314:	4619      	mov	r1, r3
   16316:	6878      	ldr	r0, [r7, #4]
   16318:	4b30      	ldr	r3, [pc, #192]	; (163dc <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
   1631a:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
   1631c:	687b      	ldr	r3, [r7, #4]
   1631e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16322:	699b      	ldr	r3, [r3, #24]
   16324:	2b00      	cmp	r3, #0
   16326:	bf0c      	ite	eq
   16328:	2301      	moveq	r3, #1
   1632a:	2300      	movne	r3, #0
   1632c:	b2db      	uxtb	r3, r3
   1632e:	2b00      	cmp	r3, #0
   16330:	d041      	beq.n	163b6 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
   16332:	687b      	ldr	r3, [r7, #4]
   16334:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16338:	683a      	ldr	r2, [r7, #0]
   1633a:	7b92      	ldrb	r2, [r2, #14]
   1633c:	b2d2      	uxtb	r2, r2
   1633e:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
   16340:	687b      	ldr	r3, [r7, #4]
   16342:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16346:	681b      	ldr	r3, [r3, #0]
   16348:	4a25      	ldr	r2, [pc, #148]	; (163e0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
   1634a:	2101      	movs	r1, #1
   1634c:	4618      	mov	r0, r3
   1634e:	4b25      	ldr	r3, [pc, #148]	; (163e4 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
   16350:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
   16352:	687b      	ldr	r3, [r7, #4]
   16354:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16358:	681b      	ldr	r3, [r3, #0]
   1635a:	4618      	mov	r0, r3
   1635c:	4b22      	ldr	r3, [pc, #136]	; (163e8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
   1635e:	4798      	blx	r3
		receivedtxCOCallback=false;
   16360:	687b      	ldr	r3, [r7, #4]
   16362:	2200      	movs	r2, #0
   16364:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16368:	f3ef 8310 	mrs	r3, PRIMASK
   1636c:	60fb      	str	r3, [r7, #12]
  return(result);
   1636e:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
   16370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   16372:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
   16374:	687b      	ldr	r3, [r7, #4]
   16376:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1637a:	681a      	ldr	r2, [r3, #0]
   1637c:	687b      	ldr	r3, [r7, #4]
   1637e:	3384      	adds	r3, #132	; 0x84
   16380:	4619      	mov	r1, r3
   16382:	4610      	mov	r0, r2
   16384:	4b19      	ldr	r3, [pc, #100]	; (163ec <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
   16386:	4798      	blx	r3
   16388:	4603      	mov	r3, r0
   1638a:	461a      	mov	r2, r3
   1638c:	687b      	ldr	r3, [r7, #4]
   1638e:	629a      	str	r2, [r3, #40]	; 0x28
   16390:	697b      	ldr	r3, [r7, #20]
   16392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16394:	693b      	ldr	r3, [r7, #16]
   16396:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
   1639a:	687b      	ldr	r3, [r7, #4]
   1639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1639e:	2b00      	cmp	r3, #0
   163a0:	bf14      	ite	ne
   163a2:	2301      	movne	r3, #1
   163a4:	2300      	moveq	r3, #0
   163a6:	b2db      	uxtb	r3, r3
   163a8:	2b00      	cmp	r3, #0
   163aa:	d00d      	beq.n	163c8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
   163ac:	687b      	ldr	r3, [r7, #4]
   163ae:	22f1      	movs	r2, #241	; 0xf1
   163b0:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
   163b4:	e008      	b.n	163c8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
   163b6:	683b      	ldr	r3, [r7, #0]
   163b8:	2201      	movs	r2, #1
   163ba:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
   163bc:	687b      	ldr	r3, [r7, #4]
   163be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   163c2:	699a      	ldr	r2, [r3, #24]
   163c4:	3201      	adds	r2, #1
   163c6:	619a      	str	r2, [r3, #24]
	}
	

	return err;
   163c8:	687b      	ldr	r3, [r7, #4]
   163ca:	f993 30b6 	ldrsb.w	r3, [r3, #182]	; 0xb6
}
   163ce:	4618      	mov	r0, r3
   163d0:	371c      	adds	r7, #28
   163d2:	46bd      	mov	sp, r7
   163d4:	bd90      	pop	{r4, r7, pc}
   163d6:	bf00      	nop
   163d8:	000167fd 	.word	0x000167fd
   163dc:	00015e6d 	.word	0x00015e6d
   163e0:	00015d5d 	.word	0x00015d5d
   163e4:	0000350d 	.word	0x0000350d
   163e8:	00003439 	.word	0x00003439
   163ec:	000034c1 	.word	0x000034c1

000163f0 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
   163f0:	b580      	push	{r7, lr}
   163f2:	b084      	sub	sp, #16
   163f4:	af00      	add	r7, sp, #0
   163f6:	6078      	str	r0, [r7, #4]

	msgMatched = false;
   163f8:	687b      	ldr	r3, [r7, #4]
   163fa:	2200      	movs	r2, #0
   163fc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
   16400:	687b      	ldr	r3, [r7, #4]
   16402:	f103 0170 	add.w	r1, r3, #112	; 0x70
   16406:	687b      	ldr	r3, [r7, #4]
   16408:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   1640c:	461a      	mov	r2, r3
   1640e:	6878      	ldr	r0, [r7, #4]
   16410:	4b5b      	ldr	r3, [pc, #364]	; (16580 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x190>)
   16412:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
   16414:	687b      	ldr	r3, [r7, #4]
   16416:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1641a:	685a      	ldr	r2, [r3, #4]
   1641c:	687b      	ldr	r3, [r7, #4]
   1641e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
   16422:	687b      	ldr	r3, [r7, #4]
   16424:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   16428:	009b      	lsls	r3, r3, #2
   1642a:	687a      	ldr	r2, [r7, #4]
   1642c:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
   16430:	4313      	orrs	r3, r2
   16432:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   16434:	687b      	ldr	r3, [r7, #4]
   16436:	2200      	movs	r2, #0
   16438:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1643c:	687b      	ldr	r3, [r7, #4]
   1643e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   16442:	687b      	ldr	r3, [r7, #4]
   16444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   16448:	689b      	ldr	r3, [r3, #8]
   1644a:	429a      	cmp	r2, r3
   1644c:	d221      	bcs.n	16492 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
   1644e:	687b      	ldr	r3, [r7, #4]
   16450:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   16454:	681a      	ldr	r2, [r3, #0]
   16456:	68fb      	ldr	r3, [r7, #12]
   16458:	405a      	eors	r2, r3
   1645a:	687b      	ldr	r3, [r7, #4]
   1645c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   16460:	685b      	ldr	r3, [r3, #4]
   16462:	4013      	ands	r3, r2
   16464:	2b00      	cmp	r3, #0
   16466:	d104      	bne.n	16472 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x82>
		{
			msgMatched = true;
   16468:	687b      	ldr	r3, [r7, #4]
   1646a:	2201      	movs	r2, #1
   1646c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			break;
   16470:	e00f      	b.n	16492 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
		}
		MsgBuff++;
   16472:	687b      	ldr	r3, [r7, #4]
   16474:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   16478:	f103 0210 	add.w	r2, r3, #16
   1647c:	687b      	ldr	r3, [r7, #4]
   1647e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   16482:	687b      	ldr	r3, [r7, #4]
   16484:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   16488:	1c5a      	adds	r2, r3, #1
   1648a:	687b      	ldr	r3, [r7, #4]
   1648c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   16490:	e7d4      	b.n	1643c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x4c>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
   16492:	687b      	ldr	r3, [r7, #4]
   16494:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   16498:	2b00      	cmp	r3, #0
   1649a:	d018      	beq.n	164ce <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   1649c:	687b      	ldr	r3, [r7, #4]
   1649e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   164a2:	2b00      	cmp	r3, #0
   164a4:	d013      	beq.n	164ce <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   164a6:	687b      	ldr	r3, [r7, #4]
   164a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   164ac:	68db      	ldr	r3, [r3, #12]
   164ae:	2b00      	cmp	r3, #0
   164b0:	d00d      	beq.n	164ce <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
   164b2:	687b      	ldr	r3, [r7, #4]
   164b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   164b8:	68db      	ldr	r3, [r3, #12]
   164ba:	687a      	ldr	r2, [r7, #4]
   164bc:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
   164c0:	6890      	ldr	r0, [r2, #8]
   164c2:	687a      	ldr	r2, [r7, #4]
   164c4:	f502 7286 	add.w	r2, r2, #268	; 0x10c
   164c8:	4611      	mov	r1, r2
   164ca:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
   164cc:	e054      	b.n	16578 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
		if (CANmessage.ident==(CO_CAN_ID_TPDO_1+CCU_CANOPEN_NODE))
   164ce:	687b      	ldr	r3, [r7, #4]
   164d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   164d4:	f240 1283 	movw	r2, #387	; 0x183
   164d8:	4293      	cmp	r3, r2
   164da:	d111      	bne.n	16500 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x110>
			memcpy((void*)CO_OD_RAM.voltage,(void*)&CANmessage.data[6],2);
   164dc:	687b      	ldr	r3, [r7, #4]
   164de:	f203 1327 	addw	r3, r3, #295	; 0x127
   164e2:	881b      	ldrh	r3, [r3, #0]
   164e4:	b29a      	uxth	r2, r3
   164e6:	4b27      	ldr	r3, [pc, #156]	; (16584 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x194>)
   164e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			memcpy(error_flags_array,(void*)&CANmessage.data[4],2);
   164ec:	687b      	ldr	r3, [r7, #4]
   164ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   164f2:	687a      	ldr	r2, [r7, #4]
   164f4:	f202 1225 	addw	r2, r2, #293	; 0x125
   164f8:	8812      	ldrh	r2, [r2, #0]
   164fa:	b292      	uxth	r2, r2
   164fc:	801a      	strh	r2, [r3, #0]
}
   164fe:	e03b      	b.n	16578 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
			if (CANmessage.ident==(CO_CAN_ID_TPDO_2+CCU_CANOPEN_NODE)){
   16500:	687b      	ldr	r3, [r7, #4]
   16502:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   16506:	f240 2283 	movw	r2, #643	; 0x283
   1650a:	4293      	cmp	r3, r2
   1650c:	d110      	bne.n	16530 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x140>
				memcpy((void*)&current_IQFilt,(void*)&CANmessage.data[0],2);
   1650e:	687b      	ldr	r3, [r7, #4]
   16510:	3398      	adds	r3, #152	; 0x98
   16512:	687a      	ldr	r2, [r7, #4]
   16514:	f202 1221 	addw	r2, r2, #289	; 0x121
   16518:	8812      	ldrh	r2, [r2, #0]
   1651a:	b292      	uxth	r2, r2
   1651c:	801a      	strh	r2, [r3, #0]
				memcpy((void*)&current_IDFilt,(void*)&CANmessage.data[2],2);
   1651e:	687b      	ldr	r3, [r7, #4]
   16520:	339a      	adds	r3, #154	; 0x9a
   16522:	687a      	ldr	r2, [r7, #4]
   16524:	f202 1223 	addw	r2, r2, #291	; 0x123
   16528:	8812      	ldrh	r2, [r2, #0]
   1652a:	b292      	uxth	r2, r2
   1652c:	801a      	strh	r2, [r3, #0]
}
   1652e:	e023      	b.n	16578 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
				if (CANmessage.ident==(CO_CAN_ID_TPDO_4+CCU_CANOPEN_NODE)){
   16530:	687b      	ldr	r3, [r7, #4]
   16532:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   16536:	f240 4283 	movw	r2, #1155	; 0x483
   1653a:	4293      	cmp	r3, r2
   1653c:	d11c      	bne.n	16578 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
						memcpy((void*)&compressor_temperatures[0],(void*)&CANmessage.data[0],2);
   1653e:	687b      	ldr	r3, [r7, #4]
   16540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16544:	687a      	ldr	r2, [r7, #4]
   16546:	f202 1221 	addw	r2, r2, #289	; 0x121
   1654a:	8812      	ldrh	r2, [r2, #0]
   1654c:	b292      	uxth	r2, r2
   1654e:	801a      	strh	r2, [r3, #0]
						memcpy((void*)&compressor_temperatures[1],(void*)&CANmessage.data[4],2);
   16550:	687b      	ldr	r3, [r7, #4]
   16552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16556:	3302      	adds	r3, #2
   16558:	687a      	ldr	r2, [r7, #4]
   1655a:	f202 1225 	addw	r2, r2, #293	; 0x125
   1655e:	8812      	ldrh	r2, [r2, #0]
   16560:	b292      	uxth	r2, r2
   16562:	801a      	strh	r2, [r3, #0]
						memcpy((void*)&compressor_temperatures[2],(void*)&CANmessage.data[6],2);
   16564:	687b      	ldr	r3, [r7, #4]
   16566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1656a:	3304      	adds	r3, #4
   1656c:	687a      	ldr	r2, [r7, #4]
   1656e:	f202 1227 	addw	r2, r2, #295	; 0x127
   16572:	8812      	ldrh	r2, [r2, #0]
   16574:	b292      	uxth	r2, r2
   16576:	801a      	strh	r2, [r3, #0]
}
   16578:	bf00      	nop
   1657a:	3710      	adds	r7, #16
   1657c:	46bd      	mov	sp, r7
   1657e:	bd80      	pop	{r7, pc}
   16580:	00015eb9 	.word	0x00015eb9
   16584:	20000220 	.word	0x20000220

00016588 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
   16588:	b580      	push	{r7, lr}
   1658a:	b082      	sub	sp, #8
   1658c:	af00      	add	r7, sp, #0
   1658e:	6078      	str	r0, [r7, #4]
   16590:	6878      	ldr	r0, [r7, #4]
   16592:	4b05      	ldr	r3, [pc, #20]	; (165a8 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
   16594:	4798      	blx	r3
{
	ptrCOEMClass=this;
   16596:	4a05      	ldr	r2, [pc, #20]	; (165ac <_ZN18CO_Emergency_ClassC1Ev+0x24>)
   16598:	687b      	ldr	r3, [r7, #4]
   1659a:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
   1659c:	687b      	ldr	r3, [r7, #4]
   1659e:	4618      	mov	r0, r3
   165a0:	3708      	adds	r7, #8
   165a2:	46bd      	mov	sp, r7
   165a4:	bd80      	pop	{r7, pc}
   165a6:	bf00      	nop
   165a8:	00017cc5 	.word	0x00017cc5
   165ac:	2000daa0 	.word	0x2000daa0

000165b0 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
   165b0:	b580      	push	{r7, lr}
   165b2:	b082      	sub	sp, #8
   165b4:	af00      	add	r7, sp, #0
   165b6:	6078      	str	r0, [r7, #4]
   165b8:	6878      	ldr	r0, [r7, #4]
   165ba:	4b03      	ldr	r3, [pc, #12]	; (165c8 <_ZN18CO_Emergency_ClassD1Ev+0x18>)
   165bc:	4798      	blx	r3
{
} //~CO_Emergency_Class
   165be:	687b      	ldr	r3, [r7, #4]
   165c0:	4618      	mov	r0, r3
   165c2:	3708      	adds	r7, #8
   165c4:	46bd      	mov	sp, r7
   165c6:	bd80      	pop	{r7, pc}
   165c8:	00017ced 	.word	0x00017ced

000165cc <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
   165cc:	b480      	push	{r7}
   165ce:	b087      	sub	sp, #28
   165d0:	af00      	add	r7, sp, #0
   165d2:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   165d4:	2300      	movs	r3, #0
   165d6:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
   165d8:	687b      	ldr	r3, [r7, #4]
   165da:	681b      	ldr	r3, [r3, #0]
   165dc:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
   165de:	687b      	ldr	r3, [r7, #4]
   165e0:	685b      	ldr	r3, [r3, #4]
   165e2:	781b      	ldrb	r3, [r3, #0]
   165e4:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
   165e6:	687b      	ldr	r3, [r7, #4]
   165e8:	7f5b      	ldrb	r3, [r3, #29]
   165ea:	2b00      	cmp	r3, #0
   165ec:	d017      	beq.n	1661e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
   165ee:	693b      	ldr	r3, [r7, #16]
   165f0:	7a5b      	ldrb	r3, [r3, #9]
   165f2:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
   165f4:	687b      	ldr	r3, [r7, #4]
   165f6:	7f1b      	ldrb	r3, [r3, #28]
   165f8:	2b00      	cmp	r3, #0
   165fa:	d104      	bne.n	16606 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
   165fc:	687b      	ldr	r3, [r7, #4]
   165fe:	685b      	ldr	r3, [r3, #4]
   16600:	7bba      	ldrb	r2, [r7, #14]
   16602:	701a      	strb	r2, [r3, #0]
   16604:	e01b      	b.n	1663e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
   16606:	687b      	ldr	r3, [r7, #4]
   16608:	7f1b      	ldrb	r3, [r3, #28]
   1660a:	461a      	mov	r2, r3
   1660c:	7bbb      	ldrb	r3, [r7, #14]
   1660e:	429a      	cmp	r2, r3
   16610:	dd02      	ble.n	16618 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
   16612:	4b0e      	ldr	r3, [pc, #56]	; (1664c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
   16614:	617b      	str	r3, [r7, #20]
   16616:	e012      	b.n	1663e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
   16618:	2300      	movs	r3, #0
   1661a:	617b      	str	r3, [r7, #20]
   1661c:	e00f      	b.n	1663e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
   1661e:	687b      	ldr	r3, [r7, #4]
   16620:	7f1b      	ldrb	r3, [r3, #28]
   16622:	2b00      	cmp	r3, #0
   16624:	d109      	bne.n	1663a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
   16626:	7bfb      	ldrb	r3, [r7, #15]
   16628:	2b00      	cmp	r3, #0
   1662a:	d103      	bne.n	16634 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
   1662c:	693b      	ldr	r3, [r7, #16]
   1662e:	2200      	movs	r2, #0
   16630:	725a      	strb	r2, [r3, #9]
   16632:	e004      	b.n	1663e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
   16634:	4b06      	ldr	r3, [pc, #24]	; (16650 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
   16636:	617b      	str	r3, [r7, #20]
   16638:	e001      	b.n	1663e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
   1663a:	4b06      	ldr	r3, [pc, #24]	; (16654 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
   1663c:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
   1663e:	697b      	ldr	r3, [r7, #20]
}
   16640:	4618      	mov	r0, r3
   16642:	371c      	adds	r7, #28
   16644:	46bd      	mov	sp, r7
   16646:	bc80      	pop	{r7}
   16648:	4770      	bx	lr
   1664a:	bf00      	nop
   1664c:	08000024 	.word	0x08000024
   16650:	06090030 	.word	0x06090030
   16654:	06010002 	.word	0x06010002

00016658 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
   16658:	b580      	push	{r7, lr}
   1665a:	b086      	sub	sp, #24
   1665c:	af00      	add	r7, sp, #0
   1665e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   16660:	2300      	movs	r3, #0
   16662:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
   16664:	687b      	ldr	r3, [r7, #4]
   16666:	681b      	ldr	r3, [r3, #0]
   16668:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
   1666a:	4b0f      	ldr	r3, [pc, #60]	; (166a8 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   1666c:	681a      	ldr	r2, [r3, #0]
   1666e:	687b      	ldr	r3, [r7, #4]
   16670:	685b      	ldr	r3, [r3, #4]
   16672:	4619      	mov	r1, r3
   16674:	4610      	mov	r0, r2
   16676:	4b0d      	ldr	r3, [pc, #52]	; (166ac <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
   16678:	4798      	blx	r3
   1667a:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
   1667c:	687b      	ldr	r3, [r7, #4]
   1667e:	7f5b      	ldrb	r3, [r3, #29]
   16680:	2b00      	cmp	r3, #0
   16682:	d00b      	beq.n	1669c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   16684:	4b08      	ldr	r3, [pc, #32]	; (166a8 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   16686:	6818      	ldr	r0, [r3, #0]
   16688:	687b      	ldr	r3, [r7, #4]
   1668a:	6859      	ldr	r1, [r3, #4]
   1668c:	693b      	ldr	r3, [r7, #16]
   1668e:	781b      	ldrb	r3, [r3, #0]
   16690:	461a      	mov	r2, r3
   16692:	68fb      	ldr	r3, [r7, #12]
   16694:	4413      	add	r3, r2
   16696:	461a      	mov	r2, r3
   16698:	4b05      	ldr	r3, [pc, #20]	; (166b0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
   1669a:	4798      	blx	r3
    }

    return ret;
   1669c:	697b      	ldr	r3, [r7, #20]
}
   1669e:	4618      	mov	r0, r3
   166a0:	3718      	adds	r7, #24
   166a2:	46bd      	mov	sp, r7
   166a4:	bd80      	pop	{r7, pc}
   166a6:	bf00      	nop
   166a8:	2000daa0 	.word	0x2000daa0
   166ac:	00017d45 	.word	0x00017d45
   166b0:	00017d79 	.word	0x00017d79

000166b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
   166b4:	b590      	push	{r4, r7, lr}
   166b6:	b089      	sub	sp, #36	; 0x24
   166b8:	af02      	add	r7, sp, #8
   166ba:	60f8      	str	r0, [r7, #12]
   166bc:	60b9      	str	r1, [r7, #8]
   166be:	607a      	str	r2, [r7, #4]
   166c0:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
   166c2:	68bb      	ldr	r3, [r7, #8]
   166c4:	2b00      	cmp	r3, #0
   166c6:	d015      	beq.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   166c8:	687b      	ldr	r3, [r7, #4]
   166ca:	2b00      	cmp	r3, #0
   166cc:	d012      	beq.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   166ce:	683b      	ldr	r3, [r7, #0]
   166d0:	2b00      	cmp	r3, #0
   166d2:	d00f      	beq.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   166d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166d6:	2b00      	cmp	r3, #0
   166d8:	d00c      	beq.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   166da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   166de:	2b05      	cmp	r3, #5
   166e0:	d908      	bls.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
   166e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   166e4:	2b00      	cmp	r3, #0
   166e6:	d005      	beq.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   166e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166ea:	2b00      	cmp	r3, #0
   166ec:	d002      	beq.n	166f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   166ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   166f0:	2b00      	cmp	r3, #0
   166f2:	d102      	bne.n	166fa <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   166f4:	f04f 33ff 	mov.w	r3, #4294967295
   166f8:	e072      	b.n	167e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
   166fa:	68bb      	ldr	r3, [r7, #8]
   166fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   166fe:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
   16700:	68bb      	ldr	r3, [r7, #8]
   16702:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   16706:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
   16708:	68bb      	ldr	r3, [r7, #8]
   1670a:	3305      	adds	r3, #5
   1670c:	f103 0250 	add.w	r2, r3, #80	; 0x50
   16710:	68bb      	ldr	r3, [r7, #8]
   16712:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
   16714:	68bb      	ldr	r3, [r7, #8]
   16716:	1d5a      	adds	r2, r3, #5
   16718:	68bb      	ldr	r3, [r7, #8]
   1671a:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
   1671c:	68bb      	ldr	r3, [r7, #8]
   1671e:	1d5a      	adds	r2, r3, #5
   16720:	68bb      	ldr	r3, [r7, #8]
   16722:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
   16724:	68bb      	ldr	r3, [r7, #8]
   16726:	2200      	movs	r2, #0
   16728:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
   1672c:	68bb      	ldr	r3, [r7, #8]
   1672e:	2200      	movs	r2, #0
   16730:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
   16734:	68bb      	ldr	r3, [r7, #8]
   16736:	2200      	movs	r2, #0
   16738:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
   1673a:	687b      	ldr	r3, [r7, #4]
   1673c:	68ba      	ldr	r2, [r7, #8]
   1673e:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
   16740:	687b      	ldr	r3, [r7, #4]
   16742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16744:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
   16746:	687b      	ldr	r3, [r7, #4]
   16748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1674a:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
   1674c:	687b      	ldr	r3, [r7, #4]
   1674e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
   16752:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
   16754:	687b      	ldr	r3, [r7, #4]
   16756:	2200      	movs	r2, #0
   16758:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
   1675a:	687b      	ldr	r3, [r7, #4]
   1675c:	2200      	movs	r2, #0
   1675e:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
   16760:	2300      	movs	r3, #0
   16762:	75fb      	strb	r3, [r7, #23]
   16764:	7dfa      	ldrb	r2, [r7, #23]
   16766:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1676a:	429a      	cmp	r2, r3
   1676c:	da09      	bge.n	16782 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
   1676e:	68bb      	ldr	r3, [r7, #8]
   16770:	681a      	ldr	r2, [r3, #0]
   16772:	7dfb      	ldrb	r3, [r7, #23]
   16774:	4413      	add	r3, r2
   16776:	2200      	movs	r2, #0
   16778:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
   1677a:	7dfb      	ldrb	r3, [r7, #23]
   1677c:	3301      	adds	r3, #1
   1677e:	75fb      	strb	r3, [r7, #23]
   16780:	e7f0      	b.n	16764 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
   16782:	2300      	movs	r3, #0
   16784:	9301      	str	r3, [sp, #4]
   16786:	2300      	movs	r3, #0
   16788:	9300      	str	r3, [sp, #0]
   1678a:	687b      	ldr	r3, [r7, #4]
   1678c:	4a16      	ldr	r2, [pc, #88]	; (167e8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
   1678e:	f241 0103 	movw	r1, #4099	; 0x1003
   16792:	68f8      	ldr	r0, [r7, #12]
   16794:	4c15      	ldr	r4, [pc, #84]	; (167ec <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   16796:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
   16798:	683b      	ldr	r3, [r7, #0]
   1679a:	f103 0268 	add.w	r2, r3, #104	; 0x68
   1679e:	2300      	movs	r3, #0
   167a0:	9301      	str	r3, [sp, #4]
   167a2:	2300      	movs	r3, #0
   167a4:	9300      	str	r3, [sp, #0]
   167a6:	4613      	mov	r3, r2
   167a8:	4a11      	ldr	r2, [pc, #68]	; (167f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
   167aa:	f241 0114 	movw	r1, #4116	; 0x1014
   167ae:	68f8      	ldr	r0, [r7, #12]
   167b0:	4c0e      	ldr	r4, [pc, #56]	; (167ec <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   167b2:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
   167b4:	687b      	ldr	r3, [r7, #4]
   167b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   167b8:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
   167ba:	687b      	ldr	r3, [r7, #4]
   167bc:	695b      	ldr	r3, [r3, #20]
   167be:	68ba      	ldr	r2, [r7, #8]
   167c0:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   167c2:	4b0c      	ldr	r3, [pc, #48]	; (167f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
   167c4:	6818      	ldr	r0, [r3, #0]
   167c6:	2300      	movs	r3, #0
   167c8:	9301      	str	r3, [sp, #4]
   167ca:	2308      	movs	r3, #8
   167cc:	9300      	str	r3, [sp, #0]
   167ce:	2300      	movs	r3, #0
   167d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   167d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
   167d4:	4c08      	ldr	r4, [pc, #32]	; (167f8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
   167d6:	47a0      	blx	r4
   167d8:	4602      	mov	r2, r0
   167da:	687b      	ldr	r3, [r7, #4]
   167dc:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   167de:	2300      	movs	r3, #0
}
   167e0:	4618      	mov	r0, r3
   167e2:	371c      	adds	r7, #28
   167e4:	46bd      	mov	sp, r7
   167e6:	bd90      	pop	{r4, r7, pc}
   167e8:	000165cd 	.word	0x000165cd
   167ec:	00018199 	.word	0x00018199
   167f0:	00016659 	.word	0x00016659
   167f4:	2000da88 	.word	0x2000da88
   167f8:	00016201 	.word	0x00016201

000167fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:
    return;
}


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
   167fc:	b590      	push	{r4, r7, lr}
   167fe:	b08d      	sub	sp, #52	; 0x34
   16800:	af00      	add	r7, sp, #0
   16802:	60f8      	str	r0, [r7, #12]
   16804:	60b9      	str	r1, [r7, #8]
   16806:	603b      	str	r3, [r7, #0]
   16808:	4613      	mov	r3, r2
   1680a:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
   1680c:	79fb      	ldrb	r3, [r7, #7]
   1680e:	10db      	asrs	r3, r3, #3
   16810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
   16814:	79fb      	ldrb	r3, [r7, #7]
   16816:	f003 0307 	and.w	r3, r3, #7
   1681a:	2201      	movs	r2, #1
   1681c:	fa02 f303 	lsl.w	r3, r2, r3
   16820:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
   16824:	2300      	movs	r3, #0
   16826:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
   16828:	2301      	movs	r3, #1
   1682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
   1682e:	68bb      	ldr	r3, [r7, #8]
   16830:	2b00      	cmp	r3, #0
   16832:	d103      	bne.n	1683c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
   16834:	2300      	movs	r3, #0
   16836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1683a:	e01e      	b.n	1687a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
   1683c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   16840:	68ba      	ldr	r2, [r7, #8]
   16842:	7912      	ldrb	r2, [r2, #4]
   16844:	4293      	cmp	r3, r2
   16846:	db07      	blt.n	16858 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
   16848:	68bb      	ldr	r3, [r7, #8]
   1684a:	79fa      	ldrb	r2, [r7, #7]
   1684c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
   16850:	2300      	movs	r3, #0
   16852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16856:	e010      	b.n	1687a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
   16858:	68bb      	ldr	r3, [r7, #8]
   1685a:	681a      	ldr	r2, [r3, #0]
   1685c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   16860:	4413      	add	r3, r2
   16862:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
   16864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16866:	781a      	ldrb	r2, [r3, #0]
   16868:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   1686c:	4013      	ands	r3, r2
   1686e:	b2db      	uxtb	r3, r3
   16870:	2b00      	cmp	r3, #0
   16872:	d002      	beq.n	1687a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
   16874:	2300      	movs	r3, #0
   16876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
   1687a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1687e:	2b00      	cmp	r3, #0
   16880:	d05c      	beq.n	1693c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
   16882:	79fb      	ldrb	r3, [r7, #7]
   16884:	2b00      	cmp	r3, #0
   16886:	d007      	beq.n	16898 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
   16888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1688a:	781a      	ldrb	r2, [r3, #0]
   1688c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   16890:	4313      	orrs	r3, r2
   16892:	b2da      	uxtb	r2, r3
   16894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16896:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
   16898:	68bb      	ldr	r3, [r7, #8]
   1689a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1689e:	2b00      	cmp	r3, #0
   168a0:	d004      	beq.n	168ac <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
   168a2:	68bb      	ldr	r3, [r7, #8]
   168a4:	2202      	movs	r2, #2
   168a6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
   168aa:	e047      	b.n	1693c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
   168ac:	463a      	mov	r2, r7
   168ae:	f107 0318 	add.w	r3, r7, #24
   168b2:	4619      	mov	r1, r3
   168b4:	68f8      	ldr	r0, [r7, #12]
   168b6:	4b23      	ldr	r3, [pc, #140]	; (16944 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
   168b8:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
   168ba:	2300      	movs	r3, #0
   168bc:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
   168be:	79fb      	ldrb	r3, [r7, #7]
   168c0:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
   168c2:	f107 0318 	add.w	r3, r7, #24
   168c6:	3304      	adds	r3, #4
   168c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
   168cc:	4619      	mov	r1, r3
   168ce:	68f8      	ldr	r0, [r7, #12]
   168d0:	4b1d      	ldr	r3, [pc, #116]	; (16948 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
   168d2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   168d4:	f3ef 8310 	mrs	r3, PRIMASK
   168d8:	617b      	str	r3, [r7, #20]
  return(result);
   168da:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
   168dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
   168de:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
   168e0:	68bb      	ldr	r3, [r7, #8]
   168e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   168e4:	f107 0218 	add.w	r2, r7, #24
   168e8:	2308      	movs	r3, #8
   168ea:	68f8      	ldr	r0, [r7, #12]
   168ec:	4c17      	ldr	r4, [pc, #92]	; (1694c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
   168ee:	47a0      	blx	r4
            em->bufWritePtr += 8;
   168f0:	68bb      	ldr	r3, [r7, #8]
   168f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   168f4:	f103 0208 	add.w	r2, r3, #8
   168f8:	68bb      	ldr	r3, [r7, #8]
   168fa:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
   168fc:	68bb      	ldr	r3, [r7, #8]
   168fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   16900:	68bb      	ldr	r3, [r7, #8]
   16902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   16904:	429a      	cmp	r2, r3
   16906:	d103      	bne.n	16910 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
   16908:	68bb      	ldr	r3, [r7, #8]
   1690a:	1d5a      	adds	r2, r3, #5
   1690c:	68bb      	ldr	r3, [r7, #8]
   1690e:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
   16910:	68bb      	ldr	r3, [r7, #8]
   16912:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   16914:	68bb      	ldr	r3, [r7, #8]
   16916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16918:	429a      	cmp	r2, r3
   1691a:	d103      	bne.n	16924 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
   1691c:	68bb      	ldr	r3, [r7, #8]
   1691e:	2201      	movs	r2, #1
   16920:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   16924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16926:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16928:	6a3b      	ldr	r3, [r7, #32]
   1692a:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
   1692e:	68bb      	ldr	r3, [r7, #8]
   16930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16932:	2b00      	cmp	r3, #0
   16934:	d002      	beq.n	1693c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
   16936:	68bb      	ldr	r3, [r7, #8]
   16938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1693a:	4798      	blx	r3
}
   1693c:	bf00      	nop
   1693e:	3734      	adds	r7, #52	; 0x34
   16940:	46bd      	mov	sp, r7
   16942:	bd90      	pop	{r4, r7, pc}
   16944:	00017db1 	.word	0x00017db1
   16948:	00017de1 	.word	0x00017de1
   1694c:	00017d09 	.word	0x00017d09

00016950 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "string.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
   16950:	b480      	push	{r7}
   16952:	b085      	sub	sp, #20
   16954:	af00      	add	r7, sp, #0
   16956:	6078      	str	r0, [r7, #4]
   16958:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
   1695a:	687b      	ldr	r3, [r7, #4]
   1695c:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
   1695e:	683b      	ldr	r3, [r7, #0]
   16960:	7d1b      	ldrb	r3, [r3, #20]
   16962:	2b01      	cmp	r3, #1
   16964:	d106      	bne.n	16974 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
   16966:	683b      	ldr	r3, [r7, #0]
   16968:	7d5a      	ldrb	r2, [r3, #21]
   1696a:	68fb      	ldr	r3, [r7, #12]
   1696c:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
   1696e:	68fb      	ldr	r3, [r7, #12]
   16970:	2201      	movs	r2, #1
   16972:	731a      	strb	r2, [r3, #12]
	}
	
	
	
}
   16974:	bf00      	nop
   16976:	3714      	adds	r7, #20
   16978:	46bd      	mov	sp, r7
   1697a:	bc80      	pop	{r7}
   1697c:	4770      	bx	lr
	...

00016980 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
   16980:	b590      	push	{r4, r7, lr}
   16982:	b08d      	sub	sp, #52	; 0x34
   16984:	af04      	add	r7, sp, #16
   16986:	60f8      	str	r0, [r7, #12]
   16988:	460b      	mov	r3, r1
   1698a:	607a      	str	r2, [r7, #4]
   1698c:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
   1698e:	7afb      	ldrb	r3, [r7, #11]
   16990:	461a      	mov	r2, r3
   16992:	68fb      	ldr	r3, [r7, #12]
   16994:	7b1b      	ldrb	r3, [r3, #12]
   16996:	429a      	cmp	r2, r3
   16998:	da37      	bge.n	16a0a <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
   1699a:	7afb      	ldrb	r3, [r7, #11]
   1699c:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
   1699e:	68fb      	ldr	r3, [r7, #12]
   169a0:	689a      	ldr	r2, [r3, #8]
   169a2:	7afb      	ldrb	r3, [r7, #11]
   169a4:	011b      	lsls	r3, r3, #4
   169a6:	4413      	add	r3, r2
   169a8:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
   169aa:	697b      	ldr	r3, [r7, #20]
   169ac:	687a      	ldr	r2, [r7, #4]
   169ae:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
   169b0:	697b      	ldr	r3, [r7, #20]
   169b2:	2200      	movs	r2, #0
   169b4:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
   169b6:	697b      	ldr	r3, [r7, #20]
   169b8:	2200      	movs	r2, #0
   169ba:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
   169bc:	69bb      	ldr	r3, [r7, #24]
   169be:	2b00      	cmp	r3, #0
   169c0:	d008      	beq.n	169d4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
   169c2:	697b      	ldr	r3, [r7, #20]
   169c4:	689b      	ldr	r3, [r3, #8]
   169c6:	2b00      	cmp	r3, #0
   169c8:	d004      	beq.n	169d4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
   169ca:	69bb      	ldr	r3, [r7, #24]
   169cc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
   169d0:	61fb      	str	r3, [r7, #28]
   169d2:	e004      	b.n	169de <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
   169d4:	2300      	movs	r3, #0
   169d6:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
   169d8:	697b      	ldr	r3, [r7, #20]
   169da:	2200      	movs	r2, #0
   169dc:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
   169de:	4b0d      	ldr	r3, [pc, #52]	; (16a14 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
   169e0:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
   169e2:	68fb      	ldr	r3, [r7, #12]
   169e4:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
   169e6:	7afa      	ldrb	r2, [r7, #11]
   169e8:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
   169ea:	68fb      	ldr	r3, [r7, #12]
   169ec:	689a      	ldr	r2, [r3, #8]
   169ee:	7afb      	ldrb	r3, [r7, #11]
   169f0:	011b      	lsls	r3, r3, #4
   169f2:	4413      	add	r3, r2
	CO_HBcons_receive);
   169f4:	4a08      	ldr	r2, [pc, #32]	; (16a18 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
   169f6:	9202      	str	r2, [sp, #8]
   169f8:	9301      	str	r3, [sp, #4]
   169fa:	2300      	movs	r3, #0
   169fc:	9300      	str	r3, [sp, #0]
   169fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
   16a02:	69fa      	ldr	r2, [r7, #28]
   16a04:	4c05      	ldr	r4, [pc, #20]	; (16a1c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
   16a06:	47a0      	blx	r4
   16a08:	e000      	b.n	16a0c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
   16a0a:	bf00      	nop
}
   16a0c:	3724      	adds	r7, #36	; 0x24
   16a0e:	46bd      	mov	sp, r7
   16a10:	bd90      	pop	{r4, r7, pc}
   16a12:	bf00      	nop
   16a14:	2000da88 	.word	0x2000da88
   16a18:	00016951 	.word	0x00016951
   16a1c:	00016101 	.word	0x00016101

00016a20 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
   16a20:	b580      	push	{r7, lr}
   16a22:	b08c      	sub	sp, #48	; 0x30
   16a24:	af00      	add	r7, sp, #0
   16a26:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   16a28:	2300      	movs	r3, #0
   16a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
   16a2c:	687b      	ldr	r3, [r7, #4]
   16a2e:	681b      	ldr	r3, [r3, #0]
   16a30:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
   16a32:	4b32      	ldr	r3, [pc, #200]	; (16afc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
   16a34:	681b      	ldr	r3, [r3, #0]
   16a36:	1d1a      	adds	r2, r3, #4
   16a38:	687b      	ldr	r3, [r7, #4]
   16a3a:	685b      	ldr	r3, [r3, #4]
   16a3c:	4619      	mov	r1, r3
   16a3e:	4610      	mov	r0, r2
   16a40:	4b2f      	ldr	r3, [pc, #188]	; (16b00 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
   16a42:	4798      	blx	r3
   16a44:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
   16a46:	687b      	ldr	r3, [r7, #4]
   16a48:	7f5b      	ldrb	r3, [r3, #29]
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d150      	bne.n	16af0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
   16a4e:	6a3b      	ldr	r3, [r7, #32]
   16a50:	0c1b      	lsrs	r3, r3, #16
   16a52:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
   16a54:	6a3b      	ldr	r3, [r7, #32]
   16a56:	b29b      	uxth	r3, r3
   16a58:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
   16a5a:	6a3b      	ldr	r3, [r7, #32]
   16a5c:	0ddb      	lsrs	r3, r3, #23
   16a5e:	05db      	lsls	r3, r3, #23
   16a60:	2b00      	cmp	r3, #0
   16a62:	d002      	beq.n	16a6a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
   16a64:	4b27      	ldr	r3, [pc, #156]	; (16b04 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   16a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   16a68:	e036      	b.n	16ad8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
   16a6a:	69bb      	ldr	r3, [r7, #24]
   16a6c:	2b00      	cmp	r3, #0
   16a6e:	d02f      	beq.n	16ad0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
   16a70:	7ffb      	ldrb	r3, [r7, #31]
   16a72:	2b00      	cmp	r3, #0
   16a74:	d02c      	beq.n	16ad0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   16a76:	2300      	movs	r3, #0
   16a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16a7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16a82:	7b12      	ldrb	r2, [r2, #12]
   16a84:	4293      	cmp	r3, r2
   16a86:	da26      	bge.n	16ad6 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
   16a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16a8a:	685a      	ldr	r2, [r3, #4]
   16a8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16a90:	009b      	lsls	r3, r3, #2
   16a92:	4413      	add	r3, r2
   16a94:	681b      	ldr	r3, [r3, #0]
   16a96:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
   16a98:	697b      	ldr	r3, [r7, #20]
   16a9a:	0c1b      	lsrs	r3, r3, #16
   16a9c:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
   16a9e:	697b      	ldr	r3, [r7, #20]
   16aa0:	b29b      	uxth	r3, r3
   16aa2:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
   16aa4:	687b      	ldr	r3, [r7, #4]
   16aa6:	7f1b      	ldrb	r3, [r3, #28]
   16aa8:	1e5a      	subs	r2, r3, #1
   16aaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16aae:	429a      	cmp	r2, r3
   16ab0:	d008      	beq.n	16ac4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   16ab2:	68fb      	ldr	r3, [r7, #12]
   16ab4:	2b00      	cmp	r3, #0
   16ab6:	d005      	beq.n	16ac4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   16ab8:	7ffa      	ldrb	r2, [r7, #31]
   16aba:	7cfb      	ldrb	r3, [r7, #19]
   16abc:	429a      	cmp	r2, r3
   16abe:	d101      	bne.n	16ac4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
   16ac0:	4b10      	ldr	r3, [pc, #64]	; (16b04 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   16ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   16ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16ac8:	3301      	adds	r3, #1
   16aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16ace:	e7d5      	b.n	16a7c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
   16ad0:	2300      	movs	r3, #0
   16ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   16ad4:	e000      	b.n	16ad8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
   16ad6:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
   16ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ada:	2b00      	cmp	r3, #0
   16adc:	d108      	bne.n	16af0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
   16ade:	687b      	ldr	r3, [r7, #4]
   16ae0:	7f1b      	ldrb	r3, [r3, #28]
   16ae2:	3b01      	subs	r3, #1
   16ae4:	b2db      	uxtb	r3, r3
   16ae6:	6a3a      	ldr	r2, [r7, #32]
   16ae8:	4619      	mov	r1, r3
   16aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16aec:	4b06      	ldr	r3, [pc, #24]	; (16b08 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
   16aee:	4798      	blx	r3
		}
	}

	return ret;
   16af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   16af2:	4618      	mov	r0, r3
   16af4:	3730      	adds	r7, #48	; 0x30
   16af6:	46bd      	mov	sp, r7
   16af8:	bd80      	pop	{r7, pc}
   16afa:	bf00      	nop
   16afc:	2000da88 	.word	0x2000da88
   16b00:	00017d45 	.word	0x00017d45
   16b04:	06040043 	.word	0x06040043
   16b08:	00016981 	.word	0x00016981

00016b0c <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
   16b0c:	b480      	push	{r7}
   16b0e:	b083      	sub	sp, #12
   16b10:	af00      	add	r7, sp, #0
   16b12:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
   16b14:	4a04      	ldr	r2, [pc, #16]	; (16b28 <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
   16b16:	687b      	ldr	r3, [r7, #4]
   16b18:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
   16b1a:	687b      	ldr	r3, [r7, #4]
   16b1c:	4618      	mov	r0, r3
   16b1e:	370c      	adds	r7, #12
   16b20:	46bd      	mov	sp, r7
   16b22:	bc80      	pop	{r7}
   16b24:	4770      	bx	lr
   16b26:	bf00      	nop
   16b28:	2000daa4 	.word	0x2000daa4

00016b2c <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
   16b2c:	b480      	push	{r7}
   16b2e:	b083      	sub	sp, #12
   16b30:	af00      	add	r7, sp, #0
   16b32:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
   16b34:	687b      	ldr	r3, [r7, #4]
   16b36:	4618      	mov	r0, r3
   16b38:	370c      	adds	r7, #12
   16b3a:	46bd      	mov	sp, r7
   16b3c:	bc80      	pop	{r7}
   16b3e:	4770      	bx	lr

00016b40 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
   16b40:	b590      	push	{r4, r7, lr}
   16b42:	b089      	sub	sp, #36	; 0x24
   16b44:	af02      	add	r7, sp, #8
   16b46:	60f8      	str	r0, [r7, #12]
   16b48:	60b9      	str	r1, [r7, #8]
   16b4a:	607a      	str	r2, [r7, #4]
   16b4c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
   16b4e:	4a2b      	ldr	r2, [pc, #172]	; (16bfc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
   16b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b52:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
   16b54:	68bb      	ldr	r3, [r7, #8]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d00e      	beq.n	16b78 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16b5a:	687b      	ldr	r3, [r7, #4]
   16b5c:	2b00      	cmp	r3, #0
   16b5e:	d00b      	beq.n	16b78 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16b60:	683b      	ldr	r3, [r7, #0]
   16b62:	2b00      	cmp	r3, #0
   16b64:	d008      	beq.n	16b78 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b68:	2b00      	cmp	r3, #0
   16b6a:	d005      	beq.n	16b78 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b6e:	2b00      	cmp	r3, #0
   16b70:	d002      	beq.n	16b78 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
   16b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b74:	2b00      	cmp	r3, #0
   16b76:	d102      	bne.n	16b7e <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
   16b78:	f04f 33ff 	mov.w	r3, #4294967295
   16b7c:	e039      	b.n	16bf2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
   16b7e:	68bb      	ldr	r3, [r7, #8]
   16b80:	687a      	ldr	r2, [r7, #4]
   16b82:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
   16b84:	68bb      	ldr	r3, [r7, #8]
   16b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16b88:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
   16b8a:	68bb      	ldr	r3, [r7, #8]
   16b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16b8e:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
   16b90:	68bb      	ldr	r3, [r7, #8]
   16b92:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   16b96:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
   16b98:	68bb      	ldr	r3, [r7, #8]
   16b9a:	2200      	movs	r2, #0
   16b9c:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
   16b9e:	68bb      	ldr	r3, [r7, #8]
   16ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16ba2:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
   16ba4:	68bb      	ldr	r3, [r7, #8]
   16ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16ba8:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   16baa:	2300      	movs	r3, #0
   16bac:	75fb      	strb	r3, [r7, #23]
   16bae:	7dfb      	ldrb	r3, [r7, #23]
   16bb0:	68ba      	ldr	r2, [r7, #8]
   16bb2:	7b12      	ldrb	r2, [r2, #12]
   16bb4:	4293      	cmp	r3, r2
   16bb6:	da0e      	bge.n	16bd6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
   16bb8:	68bb      	ldr	r3, [r7, #8]
   16bba:	685a      	ldr	r2, [r3, #4]
   16bbc:	7dfb      	ldrb	r3, [r7, #23]
   16bbe:	009b      	lsls	r3, r3, #2
   16bc0:	4413      	add	r3, r2
   16bc2:	681a      	ldr	r2, [r3, #0]
   16bc4:	7dfb      	ldrb	r3, [r7, #23]
   16bc6:	4619      	mov	r1, r3
   16bc8:	68b8      	ldr	r0, [r7, #8]
   16bca:	4b0d      	ldr	r3, [pc, #52]	; (16c00 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
   16bcc:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   16bce:	7dfb      	ldrb	r3, [r7, #23]
   16bd0:	3301      	adds	r3, #1
   16bd2:	75fb      	strb	r3, [r7, #23]
   16bd4:	e7eb      	b.n	16bae <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
   16bd6:	4b0b      	ldr	r3, [pc, #44]	; (16c04 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
   16bd8:	681b      	ldr	r3, [r3, #0]
   16bda:	1d18      	adds	r0, r3, #4
   16bdc:	2300      	movs	r3, #0
   16bde:	9301      	str	r3, [sp, #4]
   16be0:	2300      	movs	r3, #0
   16be2:	9300      	str	r3, [sp, #0]
   16be4:	68bb      	ldr	r3, [r7, #8]
   16be6:	4a08      	ldr	r2, [pc, #32]	; (16c08 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
   16be8:	f241 0116 	movw	r1, #4118	; 0x1016
   16bec:	4c07      	ldr	r4, [pc, #28]	; (16c0c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
   16bee:	47a0      	blx	r4

	return CO_ERROR_NO;
   16bf0:	2300      	movs	r3, #0
}
   16bf2:	4618      	mov	r0, r3
   16bf4:	371c      	adds	r7, #28
   16bf6:	46bd      	mov	sp, r7
   16bf8:	bd90      	pop	{r4, r7, pc}
   16bfa:	bf00      	nop
   16bfc:	2000daa8 	.word	0x2000daa8
   16c00:	00016981 	.word	0x00016981
   16c04:	2000da88 	.word	0x2000da88
   16c08:	00016a21 	.word	0x00016a21
   16c0c:	00018199 	.word	0x00018199

00016c10 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:
		AllMonitoredOperationalCopy = 0;
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
}

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
   16c10:	b480      	push	{r7}
   16c12:	b083      	sub	sp, #12
   16c14:	af00      	add	r7, sp, #0
   16c16:	6078      	str	r0, [r7, #4]
   16c18:	460b      	mov	r3, r1
   16c1a:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
   16c1c:	687b      	ldr	r3, [r7, #4]
   16c1e:	78fa      	ldrb	r2, [r7, #3]
   16c20:	711a      	strb	r2, [r3, #4]
}
   16c22:	bf00      	nop
   16c24:	370c      	adds	r7, #12
   16c26:	46bd      	mov	sp, r7
   16c28:	bc80      	pop	{r7}
   16c2a:	4770      	bx	lr

00016c2c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
   16c2c:	b580      	push	{r7, lr}
   16c2e:	b084      	sub	sp, #16
   16c30:	af00      	add	r7, sp, #0
   16c32:	6078      	str	r0, [r7, #4]
   16c34:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
   16c36:	687b      	ldr	r3, [r7, #4]
   16c38:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
   16c3a:	683b      	ldr	r3, [r7, #0]
   16c3c:	7d9b      	ldrb	r3, [r3, #22]
   16c3e:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
   16c40:	683b      	ldr	r3, [r7, #0]
   16c42:	7d1b      	ldrb	r3, [r3, #20]
   16c44:	2b02      	cmp	r3, #2
   16c46:	d146      	bne.n	16cd6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   16c48:	7afb      	ldrb	r3, [r7, #11]
   16c4a:	2b00      	cmp	r3, #0
   16c4c:	d004      	beq.n	16c58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
   16c4e:	68fb      	ldr	r3, [r7, #12]
   16c50:	7a9b      	ldrb	r3, [r3, #10]
   16c52:	7afa      	ldrb	r2, [r7, #11]
   16c54:	429a      	cmp	r2, r3
   16c56:	d13e      	bne.n	16cd6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
   16c58:	683b      	ldr	r3, [r7, #0]
   16c5a:	7d5b      	ldrb	r3, [r3, #21]
   16c5c:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
   16c5e:	68fb      	ldr	r3, [r7, #12]
   16c60:	781b      	ldrb	r3, [r3, #0]
   16c62:	727b      	strb	r3, [r7, #9]

        switch(command){
   16c64:	7abb      	ldrb	r3, [r7, #10]
   16c66:	2b80      	cmp	r3, #128	; 0x80
   16c68:	d019      	beq.n	16c9e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
   16c6a:	2b80      	cmp	r3, #128	; 0x80
   16c6c:	dc04      	bgt.n	16c78 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
   16c6e:	2b01      	cmp	r3, #1
   16c70:	d007      	beq.n	16c82 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
   16c72:	2b02      	cmp	r3, #2
   16c74:	d00f      	beq.n	16c96 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
   16c76:	e01f      	b.n	16cb8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
   16c78:	2b81      	cmp	r3, #129	; 0x81
   16c7a:	d014      	beq.n	16ca6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
   16c7c:	2b82      	cmp	r3, #130	; 0x82
   16c7e:	d016      	beq.n	16cae <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
   16c80:	e01a      	b.n	16cb8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
   16c82:	68fb      	ldr	r3, [r7, #12]
   16c84:	695b      	ldr	r3, [r3, #20]
   16c86:	681b      	ldr	r3, [r3, #0]
   16c88:	781b      	ldrb	r3, [r3, #0]
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	d113      	bne.n	16cb6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
   16c8e:	68fb      	ldr	r3, [r7, #12]
   16c90:	2205      	movs	r2, #5
   16c92:	701a      	strb	r2, [r3, #0]
                }
                break;
   16c94:	e00f      	b.n	16cb6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
   16c96:	68fb      	ldr	r3, [r7, #12]
   16c98:	2204      	movs	r2, #4
   16c9a:	701a      	strb	r2, [r3, #0]
                break;
   16c9c:	e00c      	b.n	16cb8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   16c9e:	68fb      	ldr	r3, [r7, #12]
   16ca0:	227f      	movs	r2, #127	; 0x7f
   16ca2:	701a      	strb	r2, [r3, #0]
                break;
   16ca4:	e008      	b.n	16cb8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
   16ca6:	68fb      	ldr	r3, [r7, #12]
   16ca8:	2202      	movs	r2, #2
   16caa:	725a      	strb	r2, [r3, #9]
                break;
   16cac:	e004      	b.n	16cb8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
   16cae:	68fb      	ldr	r3, [r7, #12]
   16cb0:	2201      	movs	r2, #1
   16cb2:	725a      	strb	r2, [r3, #9]
                break;
   16cb4:	e000      	b.n	16cb8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
   16cb6:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
   16cb8:	68fb      	ldr	r3, [r7, #12]
   16cba:	69db      	ldr	r3, [r3, #28]
   16cbc:	2b00      	cmp	r3, #0
   16cbe:	d00a      	beq.n	16cd6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   16cc0:	68fb      	ldr	r3, [r7, #12]
   16cc2:	781b      	ldrb	r3, [r3, #0]
   16cc4:	7a7a      	ldrb	r2, [r7, #9]
   16cc6:	429a      	cmp	r2, r3
   16cc8:	d005      	beq.n	16cd6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
   16cca:	68fb      	ldr	r3, [r7, #12]
   16ccc:	69db      	ldr	r3, [r3, #28]
   16cce:	68fa      	ldr	r2, [r7, #12]
   16cd0:	7812      	ldrb	r2, [r2, #0]
   16cd2:	4610      	mov	r0, r2
   16cd4:	4798      	blx	r3
        }
    }
}
   16cd6:	bf00      	nop
   16cd8:	3710      	adds	r7, #16
   16cda:	46bd      	mov	sp, r7
   16cdc:	bd80      	pop	{r7, pc}

00016cde <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
   16cde:	b480      	push	{r7}
   16ce0:	b083      	sub	sp, #12
   16ce2:	af00      	add	r7, sp, #0
   16ce4:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
   16ce6:	687b      	ldr	r3, [r7, #4]
   16ce8:	4618      	mov	r0, r3
   16cea:	370c      	adds	r7, #12
   16cec:	46bd      	mov	sp, r7
   16cee:	bc80      	pop	{r7}
   16cf0:	4770      	bx	lr

00016cf2 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
   16cf2:	b480      	push	{r7}
   16cf4:	b083      	sub	sp, #12
   16cf6:	af00      	add	r7, sp, #0
   16cf8:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
   16cfa:	687b      	ldr	r3, [r7, #4]
   16cfc:	4618      	mov	r0, r3
   16cfe:	370c      	adds	r7, #12
   16d00:	46bd      	mov	sp, r7
   16d02:	bc80      	pop	{r7}
   16d04:	4770      	bx	lr
	...

00016d08 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
   16d08:	b5b0      	push	{r4, r5, r7, lr}
   16d0a:	b088      	sub	sp, #32
   16d0c:	af04      	add	r7, sp, #16
   16d0e:	60f8      	str	r0, [r7, #12]
   16d10:	60b9      	str	r1, [r7, #8]
   16d12:	607a      	str	r2, [r7, #4]
   16d14:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
   16d16:	68bb      	ldr	r3, [r7, #8]
   16d18:	2b00      	cmp	r3, #0
   16d1a:	d008      	beq.n	16d2e <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16d1c:	687b      	ldr	r3, [r7, #4]
   16d1e:	2b00      	cmp	r3, #0
   16d20:	d005      	beq.n	16d2e <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d24:	2b00      	cmp	r3, #0
   16d26:	d002      	beq.n	16d2e <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16d2a:	2b00      	cmp	r3, #0
   16d2c:	d102      	bne.n	16d34 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   16d2e:	f04f 33ff 	mov.w	r3, #4294967295
   16d32:	e062      	b.n	16dfa <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
   16d34:	4a33      	ldr	r2, [pc, #204]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d36:	68bb      	ldr	r3, [r7, #8]
   16d38:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
   16d3a:	4b32      	ldr	r3, [pc, #200]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d3c:	681b      	ldr	r3, [r3, #0]
   16d3e:	2200      	movs	r2, #0
   16d40:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
   16d42:	4b30      	ldr	r3, [pc, #192]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d44:	681b      	ldr	r3, [r3, #0]
   16d46:	2200      	movs	r2, #0
   16d48:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
   16d4a:	4b2e      	ldr	r3, [pc, #184]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d4c:	681b      	ldr	r3, [r3, #0]
   16d4e:	2200      	movs	r2, #0
   16d50:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
   16d52:	4b2c      	ldr	r3, [pc, #176]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d54:	681b      	ldr	r3, [r3, #0]
   16d56:	2200      	movs	r2, #0
   16d58:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
   16d5a:	4b2a      	ldr	r3, [pc, #168]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d5c:	681b      	ldr	r3, [r3, #0]
   16d5e:	2200      	movs	r2, #0
   16d60:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
   16d62:	4b28      	ldr	r3, [pc, #160]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d64:	681b      	ldr	r3, [r3, #0]
   16d66:	2200      	movs	r2, #0
   16d68:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
   16d6a:	4b26      	ldr	r3, [pc, #152]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d6c:	681b      	ldr	r3, [r3, #0]
   16d6e:	2200      	movs	r2, #0
   16d70:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
   16d72:	4b24      	ldr	r3, [pc, #144]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d74:	681b      	ldr	r3, [r3, #0]
   16d76:	22ff      	movs	r2, #255	; 0xff
   16d78:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
   16d7a:	4b22      	ldr	r3, [pc, #136]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d7c:	681b      	ldr	r3, [r3, #0]
   16d7e:	2201      	movs	r2, #1
   16d80:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
   16d82:	4b20      	ldr	r3, [pc, #128]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d84:	681b      	ldr	r3, [r3, #0]
   16d86:	78fa      	ldrb	r2, [r7, #3]
   16d88:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
   16d8a:	4b1e      	ldr	r3, [pc, #120]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d8c:	681b      	ldr	r3, [r3, #0]
   16d8e:	6a3a      	ldr	r2, [r7, #32]
   16d90:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
   16d92:	4b1c      	ldr	r3, [pc, #112]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d94:	681b      	ldr	r3, [r3, #0]
   16d96:	2200      	movs	r2, #0
   16d98:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
   16d9a:	4b1a      	ldr	r3, [pc, #104]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16d9c:	681b      	ldr	r3, [r3, #0]
   16d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16da2:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
   16da4:	4b17      	ldr	r3, [pc, #92]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16da6:	681b      	ldr	r3, [r3, #0]
   16da8:	687a      	ldr	r2, [r7, #4]
   16daa:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
   16dac:	4b15      	ldr	r3, [pc, #84]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16dae:	681b      	ldr	r3, [r3, #0]
   16db0:	2200      	movs	r2, #0
   16db2:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
   16db4:	4b14      	ldr	r3, [pc, #80]	; (16e08 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   16db6:	6818      	ldr	r0, [r3, #0]
   16db8:	4b12      	ldr	r3, [pc, #72]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16dba:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
   16dbc:	4a13      	ldr	r2, [pc, #76]	; (16e0c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
   16dbe:	9202      	str	r2, [sp, #8]
   16dc0:	9301      	str	r3, [sp, #4]
   16dc2:	2300      	movs	r3, #0
   16dc4:	9300      	str	r3, [sp, #0]
   16dc6:	f240 73ff 	movw	r3, #2047	; 0x7ff
   16dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16dce:	4c10      	ldr	r4, [pc, #64]	; (16e10 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
   16dd0:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
   16dd2:	4b0c      	ldr	r3, [pc, #48]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16dd4:	681b      	ldr	r3, [r3, #0]
   16dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16dd8:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
   16dda:	4b0a      	ldr	r3, [pc, #40]	; (16e04 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16ddc:	681c      	ldr	r4, [r3, #0]
   16dde:	4b0a      	ldr	r3, [pc, #40]	; (16e08 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   16de0:	6818      	ldr	r0, [r3, #0]
   16de2:	2300      	movs	r3, #0
   16de4:	9301      	str	r3, [sp, #4]
   16de6:	2301      	movs	r3, #1
   16de8:	9300      	str	r3, [sp, #0]
   16dea:	2300      	movs	r3, #0
   16dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16dee:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16df0:	4d08      	ldr	r5, [pc, #32]	; (16e14 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
   16df2:	47a8      	blx	r5
   16df4:	4603      	mov	r3, r0
   16df6:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   16df8:	2300      	movs	r3, #0
}
   16dfa:	4618      	mov	r0, r3
   16dfc:	3710      	adds	r7, #16
   16dfe:	46bd      	mov	sp, r7
   16e00:	bdb0      	pop	{r4, r5, r7, pc}
   16e02:	bf00      	nop
   16e04:	2000daac 	.word	0x2000daac
   16e08:	2000da88 	.word	0x2000da88
   16e0c:	00016c2d 	.word	0x00016c2d
   16e10:	00016101 	.word	0x00016101
   16e14:	00016201 	.word	0x00016201

00016e18 <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
   16e18:	b480      	push	{r7}
   16e1a:	b083      	sub	sp, #12
   16e1c:	af00      	add	r7, sp, #0
   16e1e:	6078      	str	r0, [r7, #4]
{
} //CO_OD
   16e20:	687b      	ldr	r3, [r7, #4]
   16e22:	4618      	mov	r0, r3
   16e24:	370c      	adds	r7, #12
   16e26:	46bd      	mov	sp, r7
   16e28:	bc80      	pop	{r7}
   16e2a:	4770      	bx	lr

00016e2c <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
   16e2c:	b480      	push	{r7}
   16e2e:	b083      	sub	sp, #12
   16e30:	af00      	add	r7, sp, #0
   16e32:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
   16e34:	687b      	ldr	r3, [r7, #4]
   16e36:	4618      	mov	r0, r3
   16e38:	370c      	adds	r7, #12
   16e3a:	46bd      	mov	sp, r7
   16e3c:	bc80      	pop	{r7}
   16e3e:	4770      	bx	lr

00016e40 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
   16e40:	b480      	push	{r7}
   16e42:	b083      	sub	sp, #12
   16e44:	af00      	add	r7, sp, #0
   16e46:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
   16e48:	687b      	ldr	r3, [r7, #4]
   16e4a:	4618      	mov	r0, r3
   16e4c:	370c      	adds	r7, #12
   16e4e:	46bd      	mov	sp, r7
   16e50:	bc80      	pop	{r7}
   16e52:	4770      	bx	lr

00016e54 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
   16e54:	b480      	push	{r7}
   16e56:	b083      	sub	sp, #12
   16e58:	af00      	add	r7, sp, #0
   16e5a:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
   16e5c:	687b      	ldr	r3, [r7, #4]
   16e5e:	4618      	mov	r0, r3
   16e60:	370c      	adds	r7, #12
   16e62:	46bd      	mov	sp, r7
   16e64:	bc80      	pop	{r7}
   16e66:	4770      	bx	lr

00016e68 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
   16e68:	b580      	push	{r7, lr}
   16e6a:	b084      	sub	sp, #16
   16e6c:	af00      	add	r7, sp, #0
   16e6e:	6078      	str	r0, [r7, #4]
   16e70:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
   16e72:	687b      	ldr	r3, [r7, #4]
   16e74:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
   16e76:	68fb      	ldr	r3, [r7, #12]
   16e78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16e7c:	2b00      	cmp	r3, #0
   16e7e:	d076      	beq.n	16f6e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   16e80:	68fb      	ldr	r3, [r7, #12]
   16e82:	695b      	ldr	r3, [r3, #20]
   16e84:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
   16e86:	2b05      	cmp	r3, #5
   16e88:	d171      	bne.n	16f6e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
   16e8a:	683b      	ldr	r3, [r7, #0]
   16e8c:	7d1b      	ldrb	r3, [r3, #20]
   16e8e:	461a      	mov	r2, r3
   16e90:	68fb      	ldr	r3, [r7, #12]
   16e92:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   16e96:	429a      	cmp	r2, r3
   16e98:	db69      	blt.n	16f6e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
   16e9a:	68fb      	ldr	r3, [r7, #12]
   16e9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16ea0:	2b00      	cmp	r3, #0
   16ea2:	d031      	beq.n	16f08 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
   16ea4:	68fb      	ldr	r3, [r7, #12]
   16ea6:	689b      	ldr	r3, [r3, #8]
   16ea8:	7edb      	ldrb	r3, [r3, #27]
   16eaa:	2b00      	cmp	r3, #0
   16eac:	d02c      	beq.n	16f08 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
   16eae:	683b      	ldr	r3, [r7, #0]
   16eb0:	7d5a      	ldrb	r2, [r3, #21]
   16eb2:	68fb      	ldr	r3, [r7, #12]
   16eb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
   16eb8:	683b      	ldr	r3, [r7, #0]
   16eba:	7d9a      	ldrb	r2, [r3, #22]
   16ebc:	68fb      	ldr	r3, [r7, #12]
   16ebe:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
   16ec2:	683b      	ldr	r3, [r7, #0]
   16ec4:	7dda      	ldrb	r2, [r3, #23]
   16ec6:	68fb      	ldr	r3, [r7, #12]
   16ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
   16ecc:	683b      	ldr	r3, [r7, #0]
   16ece:	7e1a      	ldrb	r2, [r3, #24]
   16ed0:	68fb      	ldr	r3, [r7, #12]
   16ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
   16ed6:	683b      	ldr	r3, [r7, #0]
   16ed8:	7e5a      	ldrb	r2, [r3, #25]
   16eda:	68fb      	ldr	r3, [r7, #12]
   16edc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
   16ee0:	683b      	ldr	r3, [r7, #0]
   16ee2:	7e9a      	ldrb	r2, [r3, #26]
   16ee4:	68fb      	ldr	r3, [r7, #12]
   16ee6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
   16eea:	683b      	ldr	r3, [r7, #0]
   16eec:	7eda      	ldrb	r2, [r3, #27]
   16eee:	68fb      	ldr	r3, [r7, #12]
   16ef0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
   16ef4:	683b      	ldr	r3, [r7, #0]
   16ef6:	7f1a      	ldrb	r2, [r3, #28]
   16ef8:	68fb      	ldr	r3, [r7, #12]
   16efa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
   16efe:	68fb      	ldr	r3, [r7, #12]
   16f00:	2201      	movs	r2, #1
   16f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   16f06:	e02b      	b.n	16f60 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
   16f08:	683b      	ldr	r3, [r7, #0]
   16f0a:	7d5a      	ldrb	r2, [r3, #21]
   16f0c:	68fb      	ldr	r3, [r7, #12]
   16f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
   16f12:	683b      	ldr	r3, [r7, #0]
   16f14:	7d9a      	ldrb	r2, [r3, #22]
   16f16:	68fb      	ldr	r3, [r7, #12]
   16f18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
   16f1c:	683b      	ldr	r3, [r7, #0]
   16f1e:	7dda      	ldrb	r2, [r3, #23]
   16f20:	68fb      	ldr	r3, [r7, #12]
   16f22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
   16f26:	683b      	ldr	r3, [r7, #0]
   16f28:	7e1a      	ldrb	r2, [r3, #24]
   16f2a:	68fb      	ldr	r3, [r7, #12]
   16f2c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
   16f30:	683b      	ldr	r3, [r7, #0]
   16f32:	7e5a      	ldrb	r2, [r3, #25]
   16f34:	68fb      	ldr	r3, [r7, #12]
   16f36:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
   16f3a:	683b      	ldr	r3, [r7, #0]
   16f3c:	7e9a      	ldrb	r2, [r3, #26]
   16f3e:	68fb      	ldr	r3, [r7, #12]
   16f40:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
   16f44:	683b      	ldr	r3, [r7, #0]
   16f46:	7eda      	ldrb	r2, [r3, #27]
   16f48:	68fb      	ldr	r3, [r7, #12]
   16f4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
   16f4e:	683b      	ldr	r3, [r7, #0]
   16f50:	7f1a      	ldrb	r2, [r3, #28]
   16f52:	68fb      	ldr	r3, [r7, #12]
   16f54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
   16f58:	68fb      	ldr	r3, [r7, #12]
   16f5a:	2201      	movs	r2, #1
   16f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
   16f60:	683b      	ldr	r3, [r7, #0]
   16f62:	3315      	adds	r3, #21
   16f64:	2208      	movs	r2, #8
   16f66:	4619      	mov	r1, r3
   16f68:	4803      	ldr	r0, [pc, #12]	; (16f78 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
   16f6a:	4b04      	ldr	r3, [pc, #16]	; (16f7c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
   16f6c:	4798      	blx	r3
    }
}
   16f6e:	bf00      	nop
   16f70:	3710      	adds	r7, #16
   16f72:	46bd      	mov	sp, r7
   16f74:	bd80      	pop	{r7, pc}
   16f76:	bf00      	nop
   16f78:	2000dac5 	.word	0x2000dac5
   16f7c:	0001b0e1 	.word	0x0001b0e1

00016f80 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
   16f80:	b590      	push	{r4, r7, lr}
   16f82:	b089      	sub	sp, #36	; 0x24
   16f84:	af04      	add	r7, sp, #16
   16f86:	6078      	str	r0, [r7, #4]
   16f88:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
   16f8a:	683b      	ldr	r3, [r7, #0]
   16f8c:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
   16f8e:	683a      	ldr	r2, [r7, #0]
   16f90:	4b2d      	ldr	r3, [pc, #180]	; (17048 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
   16f92:	4013      	ands	r3, r2
   16f94:	2b00      	cmp	r3, #0
   16f96:	d123      	bne.n	16fe0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   16f98:	687b      	ldr	r3, [r7, #4]
   16f9a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	d01e      	beq.n	16fe0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   16fa2:	68fb      	ldr	r3, [r7, #12]
   16fa4:	2b00      	cmp	r3, #0
   16fa6:	d01b      	beq.n	16fe0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
   16fa8:	687b      	ldr	r3, [r7, #4]
   16faa:	69da      	ldr	r2, [r3, #28]
   16fac:	68fb      	ldr	r3, [r7, #12]
   16fae:	429a      	cmp	r2, r3
   16fb0:	d105      	bne.n	16fbe <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
   16fb2:	687b      	ldr	r3, [r7, #4]
   16fb4:	7e1b      	ldrb	r3, [r3, #24]
   16fb6:	461a      	mov	r2, r3
   16fb8:	68fb      	ldr	r3, [r7, #12]
   16fba:	4413      	add	r3, r2
   16fbc:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
   16fbe:	687b      	ldr	r3, [r7, #4]
   16fc0:	2201      	movs	r2, #1
   16fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	68db      	ldr	r3, [r3, #12]
   16fca:	7a1b      	ldrb	r3, [r3, #8]
   16fcc:	2bf0      	cmp	r3, #240	; 0xf0
   16fce:	bfd4      	ite	le
   16fd0:	2301      	movle	r3, #1
   16fd2:	2300      	movgt	r3, #0
   16fd4:	b2db      	uxtb	r3, r3
   16fd6:	461a      	mov	r2, r3
   16fd8:	687b      	ldr	r3, [r7, #4]
   16fda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   16fde:	e00d      	b.n	16ffc <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
   16fe0:	2300      	movs	r3, #0
   16fe2:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
   16fe4:	687b      	ldr	r3, [r7, #4]
   16fe6:	2200      	movs	r2, #0
   16fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16fec:	687b      	ldr	r3, [r7, #4]
   16fee:	2200      	movs	r2, #0
   16ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   16ff4:	687b      	ldr	r3, [r7, #4]
   16ff6:	2200      	movs	r2, #0
   16ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
   16ffc:	4b13      	ldr	r3, [pc, #76]	; (1704c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
   16ffe:	6818      	ldr	r0, [r3, #0]
   17000:	687b      	ldr	r3, [r7, #4]
   17002:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
   17004:	4b12      	ldr	r3, [pc, #72]	; (17050 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
   17006:	9302      	str	r3, [sp, #8]
   17008:	687b      	ldr	r3, [r7, #4]
   1700a:	9301      	str	r3, [sp, #4]
   1700c:	2300      	movs	r3, #0
   1700e:	9300      	str	r3, [sp, #0]
   17010:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17014:	68fa      	ldr	r2, [r7, #12]
   17016:	4c0f      	ldr	r4, [pc, #60]	; (17054 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
   17018:	47a0      	blx	r4
   1701a:	4603      	mov	r3, r0
   1701c:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
   1701e:	f997 300b 	ldrsb.w	r3, [r7, #11]
   17022:	2b00      	cmp	r3, #0
   17024:	d00b      	beq.n	1703e <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
   17026:	687b      	ldr	r3, [r7, #4]
   17028:	2200      	movs	r2, #0
   1702a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   1702e:	687b      	ldr	r3, [r7, #4]
   17030:	2200      	movs	r2, #0
   17032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   17036:	687b      	ldr	r3, [r7, #4]
   17038:	2200      	movs	r2, #0
   1703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
   1703e:	bf00      	nop
   17040:	3714      	adds	r7, #20
   17042:	46bd      	mov	sp, r7
   17044:	bd90      	pop	{r4, r7, pc}
   17046:	bf00      	nop
   17048:	bffff800 	.word	0xbffff800
   1704c:	2000da88 	.word	0x2000da88
   17050:	00016e69 	.word	0x00016e69
   17054:	00016101 	.word	0x00016101

00017058 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
   17058:	b590      	push	{r4, r7, lr}
   1705a:	b089      	sub	sp, #36	; 0x24
   1705c:	af02      	add	r7, sp, #8
   1705e:	60f8      	str	r0, [r7, #12]
   17060:	60b9      	str	r1, [r7, #8]
   17062:	4613      	mov	r3, r2
   17064:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
   17066:	68bb      	ldr	r3, [r7, #8]
   17068:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
   1706a:	68ba      	ldr	r2, [r7, #8]
   1706c:	4b1c      	ldr	r3, [pc, #112]	; (170e0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
   1706e:	4013      	ands	r3, r2
   17070:	2b00      	cmp	r3, #0
   17072:	d115      	bne.n	170a0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   17074:	68fb      	ldr	r3, [r7, #12]
   17076:	7f9b      	ldrb	r3, [r3, #30]
   17078:	2b00      	cmp	r3, #0
   1707a:	d011      	beq.n	170a0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   1707c:	697b      	ldr	r3, [r7, #20]
   1707e:	2b00      	cmp	r3, #0
   17080:	d00e      	beq.n	170a0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
   17082:	68fb      	ldr	r3, [r7, #12]
   17084:	699a      	ldr	r2, [r3, #24]
   17086:	697b      	ldr	r3, [r7, #20]
   17088:	429a      	cmp	r2, r3
   1708a:	d105      	bne.n	17098 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
   1708c:	68fb      	ldr	r3, [r7, #12]
   1708e:	7d1b      	ldrb	r3, [r3, #20]
   17090:	461a      	mov	r2, r3
   17092:	697b      	ldr	r3, [r7, #20]
   17094:	4413      	add	r3, r2
   17096:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
   17098:	68fb      	ldr	r3, [r7, #12]
   1709a:	2201      	movs	r2, #1
   1709c:	775a      	strb	r2, [r3, #29]
   1709e:	e004      	b.n	170aa <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
   170a0:	2300      	movs	r3, #0
   170a2:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
   170a4:	68fb      	ldr	r3, [r7, #12]
   170a6:	2200      	movs	r2, #0
   170a8:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   170aa:	4b0e      	ldr	r3, [pc, #56]	; (170e4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
   170ac:	6818      	ldr	r0, [r3, #0]
   170ae:	68fb      	ldr	r3, [r7, #12]
   170b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   170b2:	68fb      	ldr	r3, [r7, #12]
   170b4:	7f9b      	ldrb	r3, [r3, #30]
   170b6:	79fa      	ldrb	r2, [r7, #7]
   170b8:	9201      	str	r2, [sp, #4]
   170ba:	9300      	str	r3, [sp, #0]
   170bc:	2300      	movs	r3, #0
   170be:	697a      	ldr	r2, [r7, #20]
   170c0:	4c09      	ldr	r4, [pc, #36]	; (170e8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
   170c2:	47a0      	blx	r4
   170c4:	4602      	mov	r2, r0
   170c6:	68fb      	ldr	r3, [r7, #12]
   170c8:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
   170ca:	68fb      	ldr	r3, [r7, #12]
   170cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   170ce:	2b00      	cmp	r3, #0
   170d0:	d102      	bne.n	170d8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
   170d2:	68fb      	ldr	r3, [r7, #12]
   170d4:	2200      	movs	r2, #0
   170d6:	775a      	strb	r2, [r3, #29]
    }
}
   170d8:	bf00      	nop
   170da:	371c      	adds	r7, #28
   170dc:	46bd      	mov	sp, r7
   170de:	bd90      	pop	{r4, r7, pc}
   170e0:	bffff800 	.word	0xbffff800
   170e4:	2000da88 	.word	0x2000da88
   170e8:	00016201 	.word	0x00016201

000170ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
   170ec:	b580      	push	{r7, lr}
   170ee:	b08a      	sub	sp, #40	; 0x28
   170f0:	af00      	add	r7, sp, #0
   170f2:	60f8      	str	r0, [r7, #12]
   170f4:	60b9      	str	r1, [r7, #8]
   170f6:	603b      	str	r3, [r7, #0]
   170f8:	4613      	mov	r3, r2
   170fa:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
   170fc:	68bb      	ldr	r3, [r7, #8]
   170fe:	0c1b      	lsrs	r3, r3, #16
   17100:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
   17102:	68bb      	ldr	r3, [r7, #8]
   17104:	0a1b      	lsrs	r3, r3, #8
   17106:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
   17108:	68bb      	ldr	r3, [r7, #8]
   1710a:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   1710c:	7ebb      	ldrb	r3, [r7, #26]
   1710e:	f003 0307 	and.w	r3, r3, #7
   17112:	2b00      	cmp	r3, #0
   17114:	d001      	beq.n	1711a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
   17116:	4b6b      	ldr	r3, [pc, #428]	; (172c4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   17118:	e0cf      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
   1711a:	7ebb      	ldrb	r3, [r7, #26]
   1711c:	10db      	asrs	r3, r3, #3
   1711e:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
   17120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17122:	781a      	ldrb	r2, [r3, #0]
   17124:	7ebb      	ldrb	r3, [r7, #26]
   17126:	4413      	add	r3, r2
   17128:	b2da      	uxtb	r2, r3
   1712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1712c:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
   1712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17130:	781b      	ldrb	r3, [r3, #0]
   17132:	2b08      	cmp	r3, #8
   17134:	dd01      	ble.n	1713a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
   17136:	4b64      	ldr	r3, [pc, #400]	; (172c8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
   17138:	e0bf      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
   1713a:	69fb      	ldr	r3, [r7, #28]
   1713c:	2b07      	cmp	r3, #7
   1713e:	d832      	bhi.n	171a6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
   17140:	7efb      	ldrb	r3, [r7, #27]
   17142:	2b00      	cmp	r3, #0
   17144:	d12f      	bne.n	171a6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
   17146:	2304      	movs	r3, #4
   17148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
   1714c:	69fb      	ldr	r3, [r7, #28]
   1714e:	2b01      	cmp	r3, #1
   17150:	d803      	bhi.n	1715a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
   17152:	2300      	movs	r3, #0
   17154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   17158:	e012      	b.n	17180 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
   1715a:	69fb      	ldr	r3, [r7, #28]
   1715c:	2b02      	cmp	r3, #2
   1715e:	d002      	beq.n	17166 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
   17160:	69fb      	ldr	r3, [r7, #28]
   17162:	2b05      	cmp	r3, #5
   17164:	d103      	bne.n	1716e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
   17166:	2301      	movs	r3, #1
   17168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1716c:	e008      	b.n	17180 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
   1716e:	69fb      	ldr	r3, [r7, #28]
   17170:	2b03      	cmp	r3, #3
   17172:	d002      	beq.n	1717a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
   17174:	69fb      	ldr	r3, [r7, #28]
   17176:	2b06      	cmp	r3, #6
   17178:	d102      	bne.n	17180 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
   1717a:	2302      	movs	r3, #2
   1717c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   17180:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   17184:	7ebb      	ldrb	r3, [r7, #26]
   17186:	429a      	cmp	r2, r3
   17188:	da01      	bge.n	1718e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
   1718a:	4b4e      	ldr	r3, [pc, #312]	; (172c4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1718c:	e095      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
   1718e:	79fb      	ldrb	r3, [r7, #7]
   17190:	2b00      	cmp	r3, #0
   17192:	d103      	bne.n	1719c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
   17194:	683b      	ldr	r3, [r7, #0]
   17196:	4a4d      	ldr	r2, [pc, #308]	; (172cc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
   17198:	601a      	str	r2, [r3, #0]
   1719a:	e002      	b.n	171a2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
   1719c:	683b      	ldr	r3, [r7, #0]
   1719e:	4a4c      	ldr	r2, [pc, #304]	; (172d0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
   171a0:	601a      	str	r2, [r3, #0]

        return 0;
   171a2:	2300      	movs	r3, #0
   171a4:	e089      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
   171a6:	4b4b      	ldr	r3, [pc, #300]	; (172d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   171a8:	681b      	ldr	r3, [r3, #0]
   171aa:	3304      	adds	r3, #4
   171ac:	69f9      	ldr	r1, [r7, #28]
   171ae:	4618      	mov	r0, r3
   171b0:	4b49      	ldr	r3, [pc, #292]	; (172d8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
   171b2:	4798      	blx	r3
   171b4:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
   171b6:	697b      	ldr	r3, [r7, #20]
   171b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   171bc:	4293      	cmp	r3, r2
   171be:	d00b      	beq.n	171d8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
   171c0:	7ef9      	ldrb	r1, [r7, #27]
   171c2:	68fb      	ldr	r3, [r7, #12]
   171c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   171c6:	697a      	ldr	r2, [r7, #20]
   171c8:	4613      	mov	r3, r2
   171ca:	009b      	lsls	r3, r3, #2
   171cc:	4413      	add	r3, r2
   171ce:	009b      	lsls	r3, r3, #2
   171d0:	4403      	add	r3, r0
   171d2:	791b      	ldrb	r3, [r3, #4]
   171d4:	4299      	cmp	r1, r3
   171d6:	dd01      	ble.n	171dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
   171d8:	4b40      	ldr	r3, [pc, #256]	; (172dc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
   171da:	e06e      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
   171dc:	4b3d      	ldr	r3, [pc, #244]	; (172d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   171de:	681b      	ldr	r3, [r3, #0]
   171e0:	3304      	adds	r3, #4
   171e2:	7efa      	ldrb	r2, [r7, #27]
   171e4:	6979      	ldr	r1, [r7, #20]
   171e6:	4618      	mov	r0, r3
   171e8:	4b3d      	ldr	r3, [pc, #244]	; (172e0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
   171ea:	4798      	blx	r3
   171ec:	4603      	mov	r3, r0
   171ee:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   171f0:	79fb      	ldrb	r3, [r7, #7]
   171f2:	2b00      	cmp	r3, #0
   171f4:	d10b      	bne.n	1720e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   171f6:	7cfb      	ldrb	r3, [r7, #19]
   171f8:	f003 0310 	and.w	r3, r3, #16
   171fc:	2b00      	cmp	r3, #0
   171fe:	d004      	beq.n	1720a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
   17200:	7cfb      	ldrb	r3, [r7, #19]
   17202:	f003 0308 	and.w	r3, r3, #8
   17206:	2b00      	cmp	r3, #0
   17208:	d101      	bne.n	1720e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   1720a:	4b2e      	ldr	r3, [pc, #184]	; (172c4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1720c:	e055      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   1720e:	79fb      	ldrb	r3, [r7, #7]
   17210:	2b00      	cmp	r3, #0
   17212:	d00b      	beq.n	1722c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   17214:	7cfb      	ldrb	r3, [r7, #19]
   17216:	f003 0320 	and.w	r3, r3, #32
   1721a:	2b00      	cmp	r3, #0
   1721c:	d004      	beq.n	17228 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
   1721e:	7cfb      	ldrb	r3, [r7, #19]
   17220:	f003 0304 	and.w	r3, r3, #4
   17224:	2b00      	cmp	r3, #0
   17226:	d101      	bne.n	1722c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   17228:	4b26      	ldr	r3, [pc, #152]	; (172c4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1722a:	e046      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
   1722c:	4b29      	ldr	r3, [pc, #164]	; (172d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   1722e:	681b      	ldr	r3, [r3, #0]
   17230:	3304      	adds	r3, #4
   17232:	7efa      	ldrb	r2, [r7, #27]
   17234:	6979      	ldr	r1, [r7, #20]
   17236:	4618      	mov	r0, r3
   17238:	4b2a      	ldr	r3, [pc, #168]	; (172e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
   1723a:	4798      	blx	r3
   1723c:	4603      	mov	r3, r0
   1723e:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   17240:	7cba      	ldrb	r2, [r7, #18]
   17242:	7ebb      	ldrb	r3, [r7, #26]
   17244:	429a      	cmp	r2, r3
   17246:	da01      	bge.n	1724c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
   17248:	4b1e      	ldr	r3, [pc, #120]	; (172c4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1724a:	e036      	b.n	172ba <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
   1724c:	f997 3013 	ldrsb.w	r3, [r7, #19]
   17250:	2b00      	cmp	r3, #0
   17252:	da01      	bge.n	17258 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
   17254:	2201      	movs	r2, #1
   17256:	e000      	b.n	1725a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
   17258:	2200      	movs	r2, #0
   1725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1725c:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
   1725e:	4b1d      	ldr	r3, [pc, #116]	; (172d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   17260:	681b      	ldr	r3, [r3, #0]
   17262:	3304      	adds	r3, #4
   17264:	7efa      	ldrb	r2, [r7, #27]
   17266:	6979      	ldr	r1, [r7, #20]
   17268:	4618      	mov	r0, r3
   1726a:	4b1f      	ldr	r3, [pc, #124]	; (172e8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
   1726c:	4798      	blx	r3
   1726e:	4602      	mov	r2, r0
   17270:	683b      	ldr	r3, [r7, #0]
   17272:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
   17274:	7cfb      	ldrb	r3, [r7, #19]
   17276:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1727a:	2b00      	cmp	r3, #0
   1727c:	d01c      	beq.n	172b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
   1727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17280:	781b      	ldrb	r3, [r3, #0]
   17282:	461a      	mov	r2, r3
   17284:	7ebb      	ldrb	r3, [r7, #26]
   17286:	1ad3      	subs	r3, r2, r3
   17288:	623b      	str	r3, [r7, #32]
   1728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1728c:	781b      	ldrb	r3, [r3, #0]
   1728e:	461a      	mov	r2, r3
   17290:	6a3b      	ldr	r3, [r7, #32]
   17292:	429a      	cmp	r2, r3
   17294:	d910      	bls.n	172b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
   17296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17298:	781b      	ldrb	r3, [r3, #0]
   1729a:	b25a      	sxtb	r2, r3
   1729c:	2101      	movs	r1, #1
   1729e:	6a3b      	ldr	r3, [r7, #32]
   172a0:	fa01 f303 	lsl.w	r3, r1, r3
   172a4:	b25b      	sxtb	r3, r3
   172a6:	4313      	orrs	r3, r2
   172a8:	b25b      	sxtb	r3, r3
   172aa:	b2da      	uxtb	r2, r3
   172ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   172ae:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
   172b0:	6a3b      	ldr	r3, [r7, #32]
   172b2:	3301      	adds	r3, #1
   172b4:	623b      	str	r3, [r7, #32]
   172b6:	e7e8      	b.n	1728a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
   172b8:	2300      	movs	r3, #0
}
   172ba:	4618      	mov	r0, r3
   172bc:	3728      	adds	r7, #40	; 0x28
   172be:	46bd      	mov	sp, r7
   172c0:	bd80      	pop	{r7, pc}
   172c2:	bf00      	nop
   172c4:	06040041 	.word	0x06040041
   172c8:	06040042 	.word	0x06040042
   172cc:	2000dad4 	.word	0x2000dad4
   172d0:	2000dad0 	.word	0x2000dad0
   172d4:	2000da88 	.word	0x2000da88
   172d8:	00018255 	.word	0x00018255
   172dc:	06020000 	.word	0x06020000
   172e0:	000183a9 	.word	0x000183a9
   172e4:	00018301 	.word	0x00018301
   172e8:	00018459 	.word	0x00018459

000172ec <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
   172ec:	b590      	push	{r4, r7, lr}
   172ee:	b091      	sub	sp, #68	; 0x44
   172f0:	af04      	add	r7, sp, #16
   172f2:	6078      	str	r0, [r7, #4]
   172f4:	460b      	mov	r3, r1
   172f6:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   172f8:	2300      	movs	r3, #0
   172fa:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   172fc:	2300      	movs	r3, #0
   172fe:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
   17300:	687b      	ldr	r3, [r7, #4]
   17302:	691b      	ldr	r3, [r3, #16]
   17304:	3304      	adds	r3, #4
   17306:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
   17308:	78fb      	ldrb	r3, [r7, #3]
   1730a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1730e:	2b00      	cmp	r3, #0
   17310:	d045      	beq.n	1739e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
   17312:	2300      	movs	r3, #0
   17314:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
   17316:	7dfb      	ldrb	r3, [r7, #23]
   17318:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   1731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1731c:	1d1a      	adds	r2, r3, #4
   1731e:	627a      	str	r2, [r7, #36]	; 0x24
   17320:	681b      	ldr	r3, [r3, #0]
   17322:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
   17328:	f107 0210 	add.w	r2, r7, #16
   1732c:	f107 030e 	add.w	r3, r7, #14
   17330:	9302      	str	r3, [sp, #8]
   17332:	f107 030f 	add.w	r3, r7, #15
   17336:	9301      	str	r3, [sp, #4]
   17338:	f107 0317 	add.w	r3, r7, #23
   1733c:	9300      	str	r3, [sp, #0]
   1733e:	4613      	mov	r3, r2
   17340:	2200      	movs	r2, #0
   17342:	69b9      	ldr	r1, [r7, #24]
   17344:	4c1a      	ldr	r4, [pc, #104]	; (173b0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
   17346:	47a0      	blx	r4
   17348:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   1734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1734c:	2b00      	cmp	r3, #0
   1734e:	d00e      	beq.n	1736e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
   17350:	2300      	movs	r3, #0
   17352:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   17354:	4b17      	ldr	r3, [pc, #92]	; (173b4 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
   17356:	681b      	ldr	r3, [r3, #0]
   17358:	1d18      	adds	r0, r3, #4
   1735a:	687b      	ldr	r3, [r7, #4]
   1735c:	6819      	ldr	r1, [r3, #0]
   1735e:	69bb      	ldr	r3, [r7, #24]
   17360:	9300      	str	r3, [sp, #0]
   17362:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   17366:	221a      	movs	r2, #26
   17368:	4c13      	ldr	r4, [pc, #76]	; (173b8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
   1736a:	47a0      	blx	r4
   1736c:	e017      	b.n	1739e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   1736e:	7ffb      	ldrb	r3, [r7, #31]
   17370:	623b      	str	r3, [r7, #32]
   17372:	7dfb      	ldrb	r3, [r7, #23]
   17374:	461a      	mov	r2, r3
   17376:	6a3b      	ldr	r3, [r7, #32]
   17378:	429a      	cmp	r2, r3
   1737a:	d90c      	bls.n	17396 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
   1737c:	693a      	ldr	r2, [r7, #16]
   1737e:	1c53      	adds	r3, r2, #1
   17380:	613b      	str	r3, [r7, #16]
   17382:	6879      	ldr	r1, [r7, #4]
   17384:	6a3b      	ldr	r3, [r7, #32]
   17386:	3308      	adds	r3, #8
   17388:	009b      	lsls	r3, r3, #2
   1738a:	440b      	add	r3, r1
   1738c:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
   1738e:	6a3b      	ldr	r3, [r7, #32]
   17390:	3301      	adds	r3, #1
   17392:	623b      	str	r3, [r7, #32]
   17394:	e7ed      	b.n	17372 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
   17396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17398:	3b01      	subs	r3, #1
   1739a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1739c:	e7b6      	b.n	1730c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
   1739e:	7dfa      	ldrb	r2, [r7, #23]
   173a0:	687b      	ldr	r3, [r7, #4]
   173a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
   173a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   173a8:	4618      	mov	r0, r3
   173aa:	3734      	adds	r7, #52	; 0x34
   173ac:	46bd      	mov	sp, r7
   173ae:	bd90      	pop	{r4, r7, pc}
   173b0:	000170ed 	.word	0x000170ed
   173b4:	2000da88 	.word	0x2000da88
   173b8:	000167fd 	.word	0x000167fd

000173bc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
   173bc:	b590      	push	{r4, r7, lr}
   173be:	b091      	sub	sp, #68	; 0x44
   173c0:	af04      	add	r7, sp, #16
   173c2:	6078      	str	r0, [r7, #4]
   173c4:	460b      	mov	r3, r1
   173c6:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   173c8:	2300      	movs	r3, #0
   173ca:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   173cc:	2300      	movs	r3, #0
   173ce:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
   173d0:	687b      	ldr	r3, [r7, #4]
   173d2:	68db      	ldr	r3, [r3, #12]
   173d4:	3304      	adds	r3, #4
   173d6:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
   173d8:	687b      	ldr	r3, [r7, #4]
   173da:	2200      	movs	r2, #0
   173dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
   173e0:	78fb      	ldrb	r3, [r7, #3]
   173e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   173e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   173e6:	2b00      	cmp	r3, #0
   173e8:	d042      	beq.n	17470 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
   173ea:	7dfb      	ldrb	r3, [r7, #23]
   173ec:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   173ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   173f0:	1d1a      	adds	r2, r3, #4
   173f2:	627a      	str	r2, [r7, #36]	; 0x24
   173f4:	681b      	ldr	r3, [r3, #0]
   173f6:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   173f8:	687b      	ldr	r3, [r7, #4]
   173fa:	6858      	ldr	r0, [r3, #4]
   173fc:	687b      	ldr	r3, [r7, #4]
   173fe:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
   17400:	f107 0110 	add.w	r1, r7, #16
   17404:	f107 020f 	add.w	r2, r7, #15
   17408:	9202      	str	r2, [sp, #8]
   1740a:	9301      	str	r3, [sp, #4]
   1740c:	f107 0317 	add.w	r3, r7, #23
   17410:	9300      	str	r3, [sp, #0]
   17412:	460b      	mov	r3, r1
   17414:	2201      	movs	r2, #1
   17416:	69b9      	ldr	r1, [r7, #24]
   17418:	4c19      	ldr	r4, [pc, #100]	; (17480 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
   1741a:	47a0      	blx	r4
   1741c:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   1741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17420:	2b00      	cmp	r3, #0
   17422:	d00e      	beq.n	17442 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
   17424:	2300      	movs	r3, #0
   17426:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   17428:	4b16      	ldr	r3, [pc, #88]	; (17484 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
   1742a:	681b      	ldr	r3, [r3, #0]
   1742c:	1d18      	adds	r0, r3, #4
   1742e:	687b      	ldr	r3, [r7, #4]
   17430:	6819      	ldr	r1, [r3, #0]
   17432:	69bb      	ldr	r3, [r7, #24]
   17434:	9300      	str	r3, [sp, #0]
   17436:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   1743a:	221a      	movs	r2, #26
   1743c:	4c12      	ldr	r4, [pc, #72]	; (17488 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
   1743e:	47a0      	blx	r4
   17440:	e016      	b.n	17470 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   17442:	7ffb      	ldrb	r3, [r7, #31]
   17444:	623b      	str	r3, [r7, #32]
   17446:	7dfb      	ldrb	r3, [r7, #23]
   17448:	461a      	mov	r2, r3
   1744a:	6a3b      	ldr	r3, [r7, #32]
   1744c:	429a      	cmp	r2, r3
   1744e:	d90b      	bls.n	17468 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
   17450:	693b      	ldr	r3, [r7, #16]
   17452:	1c5a      	adds	r2, r3, #1
   17454:	613a      	str	r2, [r7, #16]
   17456:	687a      	ldr	r2, [r7, #4]
   17458:	6a39      	ldr	r1, [r7, #32]
   1745a:	3108      	adds	r1, #8
   1745c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
   17460:	6a3b      	ldr	r3, [r7, #32]
   17462:	3301      	adds	r3, #1
   17464:	623b      	str	r3, [r7, #32]
   17466:	e7ee      	b.n	17446 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
   17468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1746a:	3b01      	subs	r3, #1
   1746c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1746e:	e7b9      	b.n	173e4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
   17470:	7dfa      	ldrb	r2, [r7, #23]
   17472:	687b      	ldr	r3, [r7, #4]
   17474:	779a      	strb	r2, [r3, #30]

    return ret;
   17476:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   17478:	4618      	mov	r0, r3
   1747a:	3734      	adds	r7, #52	; 0x34
   1747c:	46bd      	mov	sp, r7
   1747e:	bd90      	pop	{r4, r7, pc}
   17480:	000170ed 	.word	0x000170ed
   17484:	2000da88 	.word	0x2000da88
   17488:	000167fd 	.word	0x000167fd

0001748c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
   1748c:	b580      	push	{r7, lr}
   1748e:	b088      	sub	sp, #32
   17490:	af00      	add	r7, sp, #0
   17492:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   17494:	687b      	ldr	r3, [r7, #4]
   17496:	681b      	ldr	r3, [r3, #0]
   17498:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   1749a:	687b      	ldr	r3, [r7, #4]
   1749c:	7f5b      	ldrb	r3, [r3, #29]
   1749e:	2b00      	cmp	r3, #0
   174a0:	d025      	beq.n	174ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
   174a2:	687b      	ldr	r3, [r7, #4]
   174a4:	7f1b      	ldrb	r3, [r3, #28]
   174a6:	2b01      	cmp	r3, #1
   174a8:	d11f      	bne.n	174ea <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   174aa:	687b      	ldr	r3, [r7, #4]
   174ac:	685b      	ldr	r3, [r3, #4]
   174ae:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
   174b0:	69bb      	ldr	r3, [r7, #24]
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	b29a      	uxth	r2, r3
   174b6:	69fb      	ldr	r3, [r7, #28]
   174b8:	69db      	ldr	r3, [r3, #28]
   174ba:	429a      	cmp	r2, r3
   174bc:	d10a      	bne.n	174d4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
   174be:	69fb      	ldr	r3, [r7, #28]
   174c0:	69db      	ldr	r3, [r3, #28]
   174c2:	2b00      	cmp	r3, #0
   174c4:	d006      	beq.n	174d4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
   174c6:	69bb      	ldr	r3, [r7, #24]
   174c8:	681b      	ldr	r3, [r3, #0]
   174ca:	69fa      	ldr	r2, [r7, #28]
   174cc:	7e12      	ldrb	r2, [r2, #24]
   174ce:	441a      	add	r2, r3
   174d0:	69bb      	ldr	r3, [r7, #24]
   174d2:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
   174d4:	69fb      	ldr	r3, [r7, #28]
   174d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   174da:	2b00      	cmp	r3, #0
   174dc:	d105      	bne.n	174ea <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
   174de:	69bb      	ldr	r3, [r7, #24]
   174e0:	681b      	ldr	r3, [r3, #0]
   174e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   174e6:	69bb      	ldr	r3, [r7, #24]
   174e8:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   174ea:	2300      	movs	r3, #0
   174ec:	e07f      	b.n	175ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
   174ee:	69fb      	ldr	r3, [r7, #28]
   174f0:	f893 3020 	ldrb.w	r3, [r3, #32]
   174f4:	f003 0304 	and.w	r3, r3, #4
   174f8:	2b00      	cmp	r3, #0
   174fa:	d001      	beq.n	17500 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   174fc:	4b3e      	ldr	r3, [pc, #248]	; (175f8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
   174fe:	e076      	b.n	175ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
   17500:	69fb      	ldr	r3, [r7, #28]
   17502:	695b      	ldr	r3, [r3, #20]
   17504:	781b      	ldrb	r3, [r3, #0]
   17506:	2b05      	cmp	r3, #5
   17508:	d108      	bne.n	1751c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
   1750a:	69fb      	ldr	r3, [r7, #28]
   1750c:	f893 3020 	ldrb.w	r3, [r3, #32]
   17510:	f003 0301 	and.w	r3, r3, #1
   17514:	2b00      	cmp	r3, #0
   17516:	d001      	beq.n	1751c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   17518:	4b38      	ldr	r3, [pc, #224]	; (175fc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
   1751a:	e068      	b.n	175ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   1751c:	687b      	ldr	r3, [r7, #4]
   1751e:	7f1b      	ldrb	r3, [r3, #28]
   17520:	2b01      	cmp	r3, #1
   17522:	d139      	bne.n	17598 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   17524:	687b      	ldr	r3, [r7, #4]
   17526:	685b      	ldr	r3, [r3, #4]
   17528:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   1752a:	697b      	ldr	r3, [r7, #20]
   1752c:	681a      	ldr	r2, [r3, #0]
   1752e:	4b34      	ldr	r3, [pc, #208]	; (17600 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
   17530:	4013      	ands	r3, r2
   17532:	2b00      	cmp	r3, #0
   17534:	d001      	beq.n	1753a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   17536:	4b33      	ldr	r3, [pc, #204]	; (17604 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   17538:	e059      	b.n	175ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
   1753a:	697b      	ldr	r3, [r7, #20]
   1753c:	681b      	ldr	r3, [r3, #0]
   1753e:	b29a      	uxth	r2, r3
   17540:	69fb      	ldr	r3, [r7, #28]
   17542:	69db      	ldr	r3, [r3, #28]
   17544:	69f9      	ldr	r1, [r7, #28]
   17546:	7e09      	ldrb	r1, [r1, #24]
   17548:	440b      	add	r3, r1
   1754a:	429a      	cmp	r2, r3
   1754c:	d10c      	bne.n	17568 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
   1754e:	697b      	ldr	r3, [r7, #20]
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   17556:	697b      	ldr	r3, [r7, #20]
   17558:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
   1755a:	697b      	ldr	r3, [r7, #20]
   1755c:	681a      	ldr	r2, [r3, #0]
   1755e:	69fb      	ldr	r3, [r7, #28]
   17560:	69db      	ldr	r3, [r3, #28]
   17562:	441a      	add	r2, r3
   17564:	697b      	ldr	r3, [r7, #20]
   17566:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
   17568:	69fb      	ldr	r3, [r7, #28]
   1756a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1756e:	2b00      	cmp	r3, #0
   17570:	d00b      	beq.n	1758a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
   17572:	697b      	ldr	r3, [r7, #20]
   17574:	681a      	ldr	r2, [r3, #0]
   17576:	69fb      	ldr	r3, [r7, #28]
   17578:	68db      	ldr	r3, [r3, #12]
   1757a:	685b      	ldr	r3, [r3, #4]
   1757c:	4053      	eors	r3, r2
   1757e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   17582:	2b00      	cmp	r3, #0
   17584:	d001      	beq.n	1758a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   17586:	4b1f      	ldr	r3, [pc, #124]	; (17604 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   17588:	e031      	b.n	175ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
   1758a:	697b      	ldr	r3, [r7, #20]
   1758c:	681b      	ldr	r3, [r3, #0]
   1758e:	4619      	mov	r1, r3
   17590:	69f8      	ldr	r0, [r7, #28]
   17592:	4b1d      	ldr	r3, [pc, #116]	; (17608 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
   17594:	4798      	blx	r3
   17596:	e029      	b.n	175ec <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   17598:	687b      	ldr	r3, [r7, #4]
   1759a:	7f1b      	ldrb	r3, [r3, #28]
   1759c:	2b02      	cmp	r3, #2
   1759e:	d125      	bne.n	175ec <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   175a0:	687b      	ldr	r3, [r7, #4]
   175a2:	685b      	ldr	r3, [r3, #4]
   175a4:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
   175a6:	69fb      	ldr	r3, [r7, #28]
   175a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   175ac:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   175ae:	693b      	ldr	r3, [r7, #16]
   175b0:	781b      	ldrb	r3, [r3, #0]
   175b2:	2bf0      	cmp	r3, #240	; 0xf0
   175b4:	dd05      	ble.n	175c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
   175b6:	693b      	ldr	r3, [r7, #16]
   175b8:	781b      	ldrb	r3, [r3, #0]
   175ba:	2bfd      	cmp	r3, #253	; 0xfd
   175bc:	dc01      	bgt.n	175c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   175be:	4b11      	ldr	r3, [pc, #68]	; (17604 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   175c0:	e015      	b.n	175ee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
   175c2:	693b      	ldr	r3, [r7, #16]
   175c4:	781b      	ldrb	r3, [r3, #0]
   175c6:	2bf0      	cmp	r3, #240	; 0xf0
   175c8:	bfd4      	ite	le
   175ca:	2301      	movle	r3, #1
   175cc:	2300      	movgt	r3, #0
   175ce:	b2db      	uxtb	r3, r3
   175d0:	461a      	mov	r2, r3
   175d2:	69fb      	ldr	r3, [r7, #28]
   175d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
   175d8:	69fb      	ldr	r3, [r7, #28]
   175da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   175de:	7bfa      	ldrb	r2, [r7, #15]
   175e0:	429a      	cmp	r2, r3
   175e2:	d003      	beq.n	175ec <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
   175e4:	69fb      	ldr	r3, [r7, #28]
   175e6:	2200      	movs	r2, #0
   175e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
   175ec:	2300      	movs	r3, #0
}
   175ee:	4618      	mov	r0, r3
   175f0:	3720      	adds	r7, #32
   175f2:	46bd      	mov	sp, r7
   175f4:	bd80      	pop	{r7, pc}
   175f6:	bf00      	nop
   175f8:	06010002 	.word	0x06010002
   175fc:	08000022 	.word	0x08000022
   17600:	3fff8000 	.word	0x3fff8000
   17604:	06090030 	.word	0x06090030
   17608:	00016f81 	.word	0x00016f81

0001760c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
   1760c:	b580      	push	{r7, lr}
   1760e:	b088      	sub	sp, #32
   17610:	af00      	add	r7, sp, #0
   17612:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   17614:	687b      	ldr	r3, [r7, #4]
   17616:	681b      	ldr	r3, [r3, #0]
   17618:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
   1761a:	687b      	ldr	r3, [r7, #4]
   1761c:	7f1b      	ldrb	r3, [r3, #28]
   1761e:	2b04      	cmp	r3, #4
   17620:	d101      	bne.n	17626 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
   17622:	4b6d      	ldr	r3, [pc, #436]	; (177d8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
   17624:	e0d4      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   17626:	687b      	ldr	r3, [r7, #4]
   17628:	7f5b      	ldrb	r3, [r3, #29]
   1762a:	2b00      	cmp	r3, #0
   1762c:	d024      	beq.n	17678 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
   1762e:	687b      	ldr	r3, [r7, #4]
   17630:	7f1b      	ldrb	r3, [r3, #28]
   17632:	2b01      	cmp	r3, #1
   17634:	d11e      	bne.n	17674 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   17636:	687b      	ldr	r3, [r7, #4]
   17638:	685b      	ldr	r3, [r3, #4]
   1763a:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
   1763c:	69bb      	ldr	r3, [r7, #24]
   1763e:	681b      	ldr	r3, [r3, #0]
   17640:	b29a      	uxth	r2, r3
   17642:	69fb      	ldr	r3, [r7, #28]
   17644:	699b      	ldr	r3, [r3, #24]
   17646:	429a      	cmp	r2, r3
   17648:	d10a      	bne.n	17660 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
   1764a:	69fb      	ldr	r3, [r7, #28]
   1764c:	699b      	ldr	r3, [r3, #24]
   1764e:	2b00      	cmp	r3, #0
   17650:	d006      	beq.n	17660 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
   17652:	69bb      	ldr	r3, [r7, #24]
   17654:	681b      	ldr	r3, [r3, #0]
   17656:	69fa      	ldr	r2, [r7, #28]
   17658:	7d12      	ldrb	r2, [r2, #20]
   1765a:	441a      	add	r2, r3
   1765c:	69bb      	ldr	r3, [r7, #24]
   1765e:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
   17660:	69fb      	ldr	r3, [r7, #28]
   17662:	7f5b      	ldrb	r3, [r3, #29]
   17664:	2b00      	cmp	r3, #0
   17666:	d105      	bne.n	17674 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
   17668:	69bb      	ldr	r3, [r7, #24]
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   17670:	69bb      	ldr	r3, [r7, #24]
   17672:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   17674:	2300      	movs	r3, #0
   17676:	e0ab      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
   17678:	69fb      	ldr	r3, [r7, #28]
   1767a:	7f1b      	ldrb	r3, [r3, #28]
   1767c:	f003 0304 	and.w	r3, r3, #4
   17680:	2b00      	cmp	r3, #0
   17682:	d001      	beq.n	17688 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   17684:	4b55      	ldr	r3, [pc, #340]	; (177dc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
   17686:	e0a3      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
   17688:	69fb      	ldr	r3, [r7, #28]
   1768a:	691b      	ldr	r3, [r3, #16]
   1768c:	781b      	ldrb	r3, [r3, #0]
   1768e:	2b05      	cmp	r3, #5
   17690:	d107      	bne.n	176a2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
   17692:	69fb      	ldr	r3, [r7, #28]
   17694:	7f1b      	ldrb	r3, [r3, #28]
   17696:	f003 0301 	and.w	r3, r3, #1
   1769a:	2b00      	cmp	r3, #0
   1769c:	d001      	beq.n	176a2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   1769e:	4b50      	ldr	r3, [pc, #320]	; (177e0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
   176a0:	e096      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   176a2:	687b      	ldr	r3, [r7, #4]
   176a4:	7f1b      	ldrb	r3, [r3, #28]
   176a6:	2b01      	cmp	r3, #1
   176a8:	d140      	bne.n	1772c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   176aa:	687b      	ldr	r3, [r7, #4]
   176ac:	685b      	ldr	r3, [r3, #4]
   176ae:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   176b0:	697b      	ldr	r3, [r7, #20]
   176b2:	681a      	ldr	r2, [r3, #0]
   176b4:	4b4b      	ldr	r3, [pc, #300]	; (177e4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
   176b6:	4013      	ands	r3, r2
   176b8:	2b00      	cmp	r3, #0
   176ba:	d001      	beq.n	176c0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   176bc:	4b4a      	ldr	r3, [pc, #296]	; (177e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   176be:	e087      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
   176c0:	697b      	ldr	r3, [r7, #20]
   176c2:	681b      	ldr	r3, [r3, #0]
   176c4:	b29a      	uxth	r2, r3
   176c6:	69fb      	ldr	r3, [r7, #28]
   176c8:	699b      	ldr	r3, [r3, #24]
   176ca:	69f9      	ldr	r1, [r7, #28]
   176cc:	7d09      	ldrb	r1, [r1, #20]
   176ce:	440b      	add	r3, r1
   176d0:	429a      	cmp	r2, r3
   176d2:	d10c      	bne.n	176ee <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
   176d4:	697b      	ldr	r3, [r7, #20]
   176d6:	681b      	ldr	r3, [r3, #0]
   176d8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   176dc:	697b      	ldr	r3, [r7, #20]
   176de:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
   176e0:	697b      	ldr	r3, [r7, #20]
   176e2:	681a      	ldr	r2, [r3, #0]
   176e4:	69fb      	ldr	r3, [r7, #28]
   176e6:	699b      	ldr	r3, [r3, #24]
   176e8:	441a      	add	r2, r3
   176ea:	697b      	ldr	r3, [r7, #20]
   176ec:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
   176ee:	69fb      	ldr	r3, [r7, #28]
   176f0:	7f5b      	ldrb	r3, [r3, #29]
   176f2:	2b00      	cmp	r3, #0
   176f4:	d00b      	beq.n	1770e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
   176f6:	697b      	ldr	r3, [r7, #20]
   176f8:	681a      	ldr	r2, [r3, #0]
   176fa:	69fb      	ldr	r3, [r7, #28]
   176fc:	689b      	ldr	r3, [r3, #8]
   176fe:	685b      	ldr	r3, [r3, #4]
   17700:	4053      	eors	r3, r2
   17702:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   17706:	2b00      	cmp	r3, #0
   17708:	d001      	beq.n	1770e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   1770a:	4b37      	ldr	r3, [pc, #220]	; (177e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   1770c:	e060      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
   1770e:	697b      	ldr	r3, [r7, #20]
   17710:	6819      	ldr	r1, [r3, #0]
   17712:	69fb      	ldr	r3, [r7, #28]
   17714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17716:	7b9b      	ldrb	r3, [r3, #14]
   17718:	b2db      	uxtb	r3, r3
   1771a:	461a      	mov	r2, r3
   1771c:	69f8      	ldr	r0, [r7, #28]
   1771e:	4b33      	ldr	r3, [pc, #204]	; (177ec <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
   17720:	4798      	blx	r3
        TPDO->syncCounter = 255;
   17722:	69fb      	ldr	r3, [r7, #28]
   17724:	22ff      	movs	r2, #255	; 0xff
   17726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1772a:	e050      	b.n	177ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   1772c:	687b      	ldr	r3, [r7, #4]
   1772e:	7f1b      	ldrb	r3, [r3, #28]
   17730:	2b02      	cmp	r3, #2
   17732:	d11b      	bne.n	1776c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   17734:	687b      	ldr	r3, [r7, #4]
   17736:	685b      	ldr	r3, [r3, #4]
   17738:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   1773a:	693b      	ldr	r3, [r7, #16]
   1773c:	781b      	ldrb	r3, [r3, #0]
   1773e:	2bf0      	cmp	r3, #240	; 0xf0
   17740:	dd05      	ble.n	1774e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
   17742:	693b      	ldr	r3, [r7, #16]
   17744:	781b      	ldrb	r3, [r3, #0]
   17746:	2bfd      	cmp	r3, #253	; 0xfd
   17748:	dc01      	bgt.n	1774e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   1774a:	4b27      	ldr	r3, [pc, #156]	; (177e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   1774c:	e040      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
   1774e:	69fb      	ldr	r3, [r7, #28]
   17750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17752:	693a      	ldr	r2, [r7, #16]
   17754:	7812      	ldrb	r2, [r2, #0]
   17756:	2af0      	cmp	r2, #240	; 0xf0
   17758:	dc01      	bgt.n	1775e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
   1775a:	2201      	movs	r2, #1
   1775c:	e000      	b.n	17760 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
   1775e:	2200      	movs	r2, #0
   17760:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
   17762:	69fb      	ldr	r3, [r7, #28]
   17764:	22ff      	movs	r2, #255	; 0xff
   17766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1776a:	e030      	b.n	177ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
   1776c:	687b      	ldr	r3, [r7, #4]
   1776e:	7f1b      	ldrb	r3, [r3, #28]
   17770:	2b03      	cmp	r3, #3
   17772:	d109      	bne.n	17788 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   17774:	69fb      	ldr	r3, [r7, #28]
   17776:	7f5b      	ldrb	r3, [r3, #29]
   17778:	2b00      	cmp	r3, #0
   1777a:	d001      	beq.n	17780 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   1777c:	4b1a      	ldr	r3, [pc, #104]	; (177e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   1777e:	e027      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
   17780:	69fb      	ldr	r3, [r7, #28]
   17782:	2200      	movs	r2, #0
   17784:	645a      	str	r2, [r3, #68]	; 0x44
   17786:	e022      	b.n	177ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
   17788:	687b      	ldr	r3, [r7, #4]
   1778a:	7f1b      	ldrb	r3, [r3, #28]
   1778c:	2b05      	cmp	r3, #5
   1778e:	d10b      	bne.n	177a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   17790:	687b      	ldr	r3, [r7, #4]
   17792:	685b      	ldr	r3, [r3, #4]
   17794:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
   17796:	68bb      	ldr	r3, [r7, #8]
   17798:	681b      	ldr	r3, [r3, #0]
   1779a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1779e:	fb02 f203 	mul.w	r2, r2, r3
   177a2:	69fb      	ldr	r3, [r7, #28]
   177a4:	649a      	str	r2, [r3, #72]	; 0x48
   177a6:	e012      	b.n	177ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
   177a8:	687b      	ldr	r3, [r7, #4]
   177aa:	7f1b      	ldrb	r3, [r3, #28]
   177ac:	2b06      	cmp	r3, #6
   177ae:	d10e      	bne.n	177ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   177b0:	687b      	ldr	r3, [r7, #4]
   177b2:	685b      	ldr	r3, [r3, #4]
   177b4:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   177b6:	69fb      	ldr	r3, [r7, #28]
   177b8:	7f5b      	ldrb	r3, [r3, #29]
   177ba:	2b00      	cmp	r3, #0
   177bc:	d001      	beq.n	177c2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   177be:	4b0a      	ldr	r3, [pc, #40]	; (177e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   177c0:	e006      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
   177c2:	68fb      	ldr	r3, [r7, #12]
   177c4:	781b      	ldrb	r3, [r3, #0]
   177c6:	2bf0      	cmp	r3, #240	; 0xf0
   177c8:	dd01      	ble.n	177ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   177ca:	4b07      	ldr	r3, [pc, #28]	; (177e8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   177cc:	e000      	b.n	177d0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
   177ce:	2300      	movs	r3, #0
}
   177d0:	4618      	mov	r0, r3
   177d2:	3720      	adds	r7, #32
   177d4:	46bd      	mov	sp, r7
   177d6:	bd80      	pop	{r7, pc}
   177d8:	06090011 	.word	0x06090011
   177dc:	06010002 	.word	0x06010002
   177e0:	08000022 	.word	0x08000022
   177e4:	3fff8000 	.word	0x3fff8000
   177e8:	06090030 	.word	0x06090030
   177ec:	00017059 	.word	0x00017059

000177f0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
   177f0:	b590      	push	{r4, r7, lr}
   177f2:	b08d      	sub	sp, #52	; 0x34
   177f4:	af04      	add	r7, sp, #16
   177f6:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   177f8:	687b      	ldr	r3, [r7, #4]
   177fa:	681b      	ldr	r3, [r3, #0]
   177fc:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   177fe:	687b      	ldr	r3, [r7, #4]
   17800:	7f5b      	ldrb	r3, [r3, #29]
   17802:	2b00      	cmp	r3, #0
   17804:	d010      	beq.n	17828 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   17806:	687b      	ldr	r3, [r7, #4]
   17808:	685b      	ldr	r3, [r3, #4]
   1780a:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   1780c:	687b      	ldr	r3, [r7, #4]
   1780e:	7f1b      	ldrb	r3, [r3, #28]
   17810:	2b00      	cmp	r3, #0
   17812:	d107      	bne.n	17824 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
   17814:	69fb      	ldr	r3, [r7, #28]
   17816:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1781a:	2b00      	cmp	r3, #0
   1781c:	d102      	bne.n	17824 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
   1781e:	69bb      	ldr	r3, [r7, #24]
   17820:	2200      	movs	r2, #0
   17822:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   17824:	2300      	movs	r3, #0
   17826:	e054      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
   17828:	69fb      	ldr	r3, [r7, #28]
   1782a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1782e:	f003 0308 	and.w	r3, r3, #8
   17832:	2b00      	cmp	r3, #0
   17834:	d001      	beq.n	1783a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   17836:	4b29      	ldr	r3, [pc, #164]	; (178dc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
   17838:	e04b      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
   1783a:	69fb      	ldr	r3, [r7, #28]
   1783c:	695b      	ldr	r3, [r3, #20]
   1783e:	781b      	ldrb	r3, [r3, #0]
   17840:	2b05      	cmp	r3, #5
   17842:	d108      	bne.n	17856 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
   17844:	69fb      	ldr	r3, [r7, #28]
   17846:	f893 3020 	ldrb.w	r3, [r3, #32]
   1784a:	f003 0302 	and.w	r3, r3, #2
   1784e:	2b00      	cmp	r3, #0
   17850:	d001      	beq.n	17856 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   17852:	4b23      	ldr	r3, [pc, #140]	; (178e0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
   17854:	e03d      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
   17856:	69fb      	ldr	r3, [r7, #28]
   17858:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1785c:	2b00      	cmp	r3, #0
   1785e:	d001      	beq.n	17864 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   17860:	4b20      	ldr	r3, [pc, #128]	; (178e4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   17862:	e036      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   17864:	687b      	ldr	r3, [r7, #4]
   17866:	7f1b      	ldrb	r3, [r3, #28]
   17868:	2b00      	cmp	r3, #0
   1786a:	d110      	bne.n	1788e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   1786c:	687b      	ldr	r3, [r7, #4]
   1786e:	685b      	ldr	r3, [r3, #4]
   17870:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   17872:	697b      	ldr	r3, [r7, #20]
   17874:	781b      	ldrb	r3, [r3, #0]
   17876:	2b08      	cmp	r3, #8
   17878:	dd01      	ble.n	1787e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   1787a:	4b1b      	ldr	r3, [pc, #108]	; (178e8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
   1787c:	e029      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
   1787e:	697b      	ldr	r3, [r7, #20]
   17880:	781b      	ldrb	r3, [r3, #0]
   17882:	4619      	mov	r1, r3
   17884:	69f8      	ldr	r0, [r7, #28]
   17886:	4b19      	ldr	r3, [pc, #100]	; (178ec <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
   17888:	4798      	blx	r3
   1788a:	4603      	mov	r3, r0
   1788c:	e021      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   1788e:	687b      	ldr	r3, [r7, #4]
   17890:	685b      	ldr	r3, [r3, #4]
   17892:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   17894:	2300      	movs	r3, #0
   17896:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   17898:	2300      	movs	r3, #0
   1789a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
   1789c:	69fb      	ldr	r3, [r7, #28]
   1789e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   178a2:	2b00      	cmp	r3, #0
   178a4:	d001      	beq.n	178aa <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   178a6:	4b0f      	ldr	r3, [pc, #60]	; (178e4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   178a8:	e013      	b.n	178d2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
   178aa:	69fb      	ldr	r3, [r7, #28]
   178ac:	6858      	ldr	r0, [r3, #4]
   178ae:	693b      	ldr	r3, [r7, #16]
   178b0:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
   178b2:	f107 020c 	add.w	r2, r7, #12
   178b6:	f107 0309 	add.w	r3, r7, #9
   178ba:	9302      	str	r3, [sp, #8]
   178bc:	f107 030a 	add.w	r3, r7, #10
   178c0:	9301      	str	r3, [sp, #4]
   178c2:	f107 030b 	add.w	r3, r7, #11
   178c6:	9300      	str	r3, [sp, #0]
   178c8:	4613      	mov	r3, r2
   178ca:	2200      	movs	r2, #0
   178cc:	4c08      	ldr	r4, [pc, #32]	; (178f0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
   178ce:	47a0      	blx	r4
   178d0:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   178d2:	4618      	mov	r0, r3
   178d4:	3724      	adds	r7, #36	; 0x24
   178d6:	46bd      	mov	sp, r7
   178d8:	bd90      	pop	{r4, r7, pc}
   178da:	bf00      	nop
   178dc:	06010002 	.word	0x06010002
   178e0:	08000022 	.word	0x08000022
   178e4:	06010000 	.word	0x06010000
   178e8:	06040042 	.word	0x06040042
   178ec:	000172ed 	.word	0x000172ed
   178f0:	000170ed 	.word	0x000170ed

000178f4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
   178f4:	b590      	push	{r4, r7, lr}
   178f6:	b08d      	sub	sp, #52	; 0x34
   178f8:	af04      	add	r7, sp, #16
   178fa:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   178fc:	687b      	ldr	r3, [r7, #4]
   178fe:	681b      	ldr	r3, [r3, #0]
   17900:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   17902:	687b      	ldr	r3, [r7, #4]
   17904:	7f5b      	ldrb	r3, [r3, #29]
   17906:	2b00      	cmp	r3, #0
   17908:	d00f      	beq.n	1792a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   1790a:	687b      	ldr	r3, [r7, #4]
   1790c:	685b      	ldr	r3, [r3, #4]
   1790e:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   17910:	687b      	ldr	r3, [r7, #4]
   17912:	7f1b      	ldrb	r3, [r3, #28]
   17914:	2b00      	cmp	r3, #0
   17916:	d106      	bne.n	17926 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
   17918:	69fb      	ldr	r3, [r7, #28]
   1791a:	7f9b      	ldrb	r3, [r3, #30]
   1791c:	2b00      	cmp	r3, #0
   1791e:	d102      	bne.n	17926 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
   17920:	69bb      	ldr	r3, [r7, #24]
   17922:	2200      	movs	r2, #0
   17924:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   17926:	2300      	movs	r3, #0
   17928:	e050      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
   1792a:	69fb      	ldr	r3, [r7, #28]
   1792c:	7f1b      	ldrb	r3, [r3, #28]
   1792e:	f003 0308 	and.w	r3, r3, #8
   17932:	2b00      	cmp	r3, #0
   17934:	d001      	beq.n	1793a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   17936:	4b27      	ldr	r3, [pc, #156]	; (179d4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
   17938:	e048      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
   1793a:	69fb      	ldr	r3, [r7, #28]
   1793c:	691b      	ldr	r3, [r3, #16]
   1793e:	781b      	ldrb	r3, [r3, #0]
   17940:	2b05      	cmp	r3, #5
   17942:	d107      	bne.n	17954 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
   17944:	69fb      	ldr	r3, [r7, #28]
   17946:	7f1b      	ldrb	r3, [r3, #28]
   17948:	f003 0302 	and.w	r3, r3, #2
   1794c:	2b00      	cmp	r3, #0
   1794e:	d001      	beq.n	17954 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   17950:	4b21      	ldr	r3, [pc, #132]	; (179d8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
   17952:	e03b      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
   17954:	69fb      	ldr	r3, [r7, #28]
   17956:	7f5b      	ldrb	r3, [r3, #29]
   17958:	2b00      	cmp	r3, #0
   1795a:	d001      	beq.n	17960 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   1795c:	4b1f      	ldr	r3, [pc, #124]	; (179dc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   1795e:	e035      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   17960:	687b      	ldr	r3, [r7, #4]
   17962:	7f1b      	ldrb	r3, [r3, #28]
   17964:	2b00      	cmp	r3, #0
   17966:	d110      	bne.n	1798a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   17968:	687b      	ldr	r3, [r7, #4]
   1796a:	685b      	ldr	r3, [r3, #4]
   1796c:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   1796e:	697b      	ldr	r3, [r7, #20]
   17970:	781b      	ldrb	r3, [r3, #0]
   17972:	2b08      	cmp	r3, #8
   17974:	dd01      	ble.n	1797a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   17976:	4b1a      	ldr	r3, [pc, #104]	; (179e0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
   17978:	e028      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
   1797a:	697b      	ldr	r3, [r7, #20]
   1797c:	781b      	ldrb	r3, [r3, #0]
   1797e:	4619      	mov	r1, r3
   17980:	69f8      	ldr	r0, [r7, #28]
   17982:	4b18      	ldr	r3, [pc, #96]	; (179e4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
   17984:	4798      	blx	r3
   17986:	4603      	mov	r3, r0
   17988:	e020      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   1798a:	687b      	ldr	r3, [r7, #4]
   1798c:	685b      	ldr	r3, [r3, #4]
   1798e:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   17990:	2300      	movs	r3, #0
   17992:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   17994:	2300      	movs	r3, #0
   17996:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
   17998:	69fb      	ldr	r3, [r7, #28]
   1799a:	7f9b      	ldrb	r3, [r3, #30]
   1799c:	2b00      	cmp	r3, #0
   1799e:	d001      	beq.n	179a4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   179a0:	4b0e      	ldr	r3, [pc, #56]	; (179dc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   179a2:	e013      	b.n	179cc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
   179a4:	69fb      	ldr	r3, [r7, #28]
   179a6:	6858      	ldr	r0, [r3, #4]
   179a8:	693b      	ldr	r3, [r7, #16]
   179aa:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
   179ac:	f107 020c 	add.w	r2, r7, #12
   179b0:	f107 0309 	add.w	r3, r7, #9
   179b4:	9302      	str	r3, [sp, #8]
   179b6:	f107 030a 	add.w	r3, r7, #10
   179ba:	9301      	str	r3, [sp, #4]
   179bc:	f107 030b 	add.w	r3, r7, #11
   179c0:	9300      	str	r3, [sp, #0]
   179c2:	4613      	mov	r3, r2
   179c4:	2201      	movs	r2, #1
   179c6:	4c08      	ldr	r4, [pc, #32]	; (179e8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
   179c8:	47a0      	blx	r4
   179ca:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   179cc:	4618      	mov	r0, r3
   179ce:	3724      	adds	r7, #36	; 0x24
   179d0:	46bd      	mov	sp, r7
   179d2:	bd90      	pop	{r4, r7, pc}
   179d4:	06010002 	.word	0x06010002
   179d8:	08000022 	.word	0x08000022
   179dc:	06010000 	.word	0x06010000
   179e0:	06040042 	.word	0x06040042
   179e4:	000173bd 	.word	0x000173bd
   179e8:	000170ed 	.word	0x000170ed

000179ec <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
   179ec:	b590      	push	{r4, r7, lr}
   179ee:	b087      	sub	sp, #28
   179f0:	af02      	add	r7, sp, #8
   179f2:	60f8      	str	r0, [r7, #12]
   179f4:	60b9      	str	r1, [r7, #8]
   179f6:	607a      	str	r2, [r7, #4]
   179f8:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
   179fa:	68bb      	ldr	r3, [r7, #8]
   179fc:	2b00      	cmp	r3, #0
   179fe:	d014      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17a00:	687b      	ldr	r3, [r7, #4]
   17a02:	2b00      	cmp	r3, #0
   17a04:	d011      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17a06:	683b      	ldr	r3, [r7, #0]
   17a08:	2b00      	cmp	r3, #0
   17a0a:	d00e      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17a0c:	6a3b      	ldr	r3, [r7, #32]
   17a0e:	2b00      	cmp	r3, #0
   17a10:	d00b      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a14:	2b00      	cmp	r3, #0
   17a16:	d008      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17a1a:	2b00      	cmp	r3, #0
   17a1c:	d005      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
   17a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a20:	2b00      	cmp	r3, #0
   17a22:	d002      	beq.n	17a2a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17a26:	2b00      	cmp	r3, #0
   17a28:	d102      	bne.n	17a30 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17a2a:	f04f 33ff 	mov.w	r3, #4294967295
   17a2e:	e050      	b.n	17ad2 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
   17a30:	68bb      	ldr	r3, [r7, #8]
   17a32:	687a      	ldr	r2, [r7, #4]
   17a34:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
   17a36:	68bb      	ldr	r3, [r7, #8]
   17a38:	683a      	ldr	r2, [r7, #0]
   17a3a:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
   17a3c:	68bb      	ldr	r3, [r7, #8]
   17a3e:	6a3a      	ldr	r2, [r7, #32]
   17a40:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
   17a42:	68bb      	ldr	r3, [r7, #8]
   17a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17a46:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
   17a48:	68bb      	ldr	r3, [r7, #8]
   17a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17a4c:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
   17a4e:	68bb      	ldr	r3, [r7, #8]
   17a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17a52:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
   17a54:	68bb      	ldr	r3, [r7, #8]
   17a56:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   17a5a:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
   17a5c:	68bb      	ldr	r3, [r7, #8]
   17a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17a60:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
   17a62:	68bb      	ldr	r3, [r7, #8]
   17a64:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   17a68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
   17a6c:	4b1b      	ldr	r3, [pc, #108]	; (17adc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   17a6e:	681b      	ldr	r3, [r3, #0]
   17a70:	1d18      	adds	r0, r3, #4
   17a72:	2300      	movs	r3, #0
   17a74:	9301      	str	r3, [sp, #4]
   17a76:	2300      	movs	r3, #0
   17a78:	9300      	str	r3, [sp, #0]
   17a7a:	68bb      	ldr	r3, [r7, #8]
   17a7c:	4a18      	ldr	r2, [pc, #96]	; (17ae0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
   17a7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17a80:	4c18      	ldr	r4, [pc, #96]	; (17ae4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   17a82:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
   17a84:	4b15      	ldr	r3, [pc, #84]	; (17adc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   17a86:	681b      	ldr	r3, [r3, #0]
   17a88:	1d18      	adds	r0, r3, #4
   17a8a:	2300      	movs	r3, #0
   17a8c:	9301      	str	r3, [sp, #4]
   17a8e:	2300      	movs	r3, #0
   17a90:	9300      	str	r3, [sp, #0]
   17a92:	68bb      	ldr	r3, [r7, #8]
   17a94:	4a14      	ldr	r2, [pc, #80]	; (17ae8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
   17a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
   17a98:	4c12      	ldr	r4, [pc, #72]	; (17ae4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   17a9a:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   17a9c:	68bb      	ldr	r3, [r7, #8]
   17a9e:	2200      	movs	r2, #0
   17aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   17aa4:	68bb      	ldr	r3, [r7, #8]
   17aa6:	2200      	movs	r2, #0
   17aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
   17aac:	68bb      	ldr	r3, [r7, #8]
   17aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   17ab0:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
   17ab2:	68bb      	ldr	r3, [r7, #8]
   17ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17ab6:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
   17ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17aba:	781b      	ldrb	r3, [r3, #0]
   17abc:	4619      	mov	r1, r3
   17abe:	68b8      	ldr	r0, [r7, #8]
   17ac0:	4b0a      	ldr	r3, [pc, #40]	; (17aec <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
   17ac2:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
   17ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17ac6:	685b      	ldr	r3, [r3, #4]
   17ac8:	4619      	mov	r1, r3
   17aca:	68b8      	ldr	r0, [r7, #8]
   17acc:	4b08      	ldr	r3, [pc, #32]	; (17af0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
   17ace:	4798      	blx	r3

    return CO_ERROR_NO;
   17ad0:	2300      	movs	r3, #0
}
   17ad2:	4618      	mov	r0, r3
   17ad4:	3714      	adds	r7, #20
   17ad6:	46bd      	mov	sp, r7
   17ad8:	bd90      	pop	{r4, r7, pc}
   17ada:	bf00      	nop
   17adc:	2000da88 	.word	0x2000da88
   17ae0:	0001748d 	.word	0x0001748d
   17ae4:	00018199 	.word	0x00018199
   17ae8:	000177f1 	.word	0x000177f1
   17aec:	000172ed 	.word	0x000172ed
   17af0:	00016f81 	.word	0x00016f81

00017af4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17af4:	b590      	push	{r4, r7, lr}
   17af6:	b087      	sub	sp, #28
   17af8:	af02      	add	r7, sp, #8
   17afa:	60f8      	str	r0, [r7, #12]
   17afc:	60b9      	str	r1, [r7, #8]
   17afe:	607a      	str	r2, [r7, #4]
   17b00:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   17b02:	68bb      	ldr	r3, [r7, #8]
   17b04:	2b00      	cmp	r3, #0
   17b06:	d011      	beq.n	17b2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17b08:	687b      	ldr	r3, [r7, #4]
   17b0a:	2b00      	cmp	r3, #0
   17b0c:	d00e      	beq.n	17b2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17b0e:	683b      	ldr	r3, [r7, #0]
   17b10:	2b00      	cmp	r3, #0
   17b12:	d00b      	beq.n	17b2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17b14:	6a3b      	ldr	r3, [r7, #32]
   17b16:	2b00      	cmp	r3, #0
   17b18:	d008      	beq.n	17b2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b1c:	2b00      	cmp	r3, #0
   17b1e:	d005      	beq.n	17b2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
   17b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17b22:	2b00      	cmp	r3, #0
   17b24:	d002      	beq.n	17b2c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17b28:	2b00      	cmp	r3, #0
   17b2a:	d102      	bne.n	17b32 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17b2c:	f04f 33ff 	mov.w	r3, #4294967295
   17b30:	e07e      	b.n	17c30 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
   17b32:	68bb      	ldr	r3, [r7, #8]
   17b34:	687a      	ldr	r2, [r7, #4]
   17b36:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
   17b38:	68bb      	ldr	r3, [r7, #8]
   17b3a:	683a      	ldr	r2, [r7, #0]
   17b3c:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
   17b3e:	68bb      	ldr	r3, [r7, #8]
   17b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17b42:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
   17b44:	68bb      	ldr	r3, [r7, #8]
   17b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17b48:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
   17b4a:	68bb      	ldr	r3, [r7, #8]
   17b4c:	6a3a      	ldr	r2, [r7, #32]
   17b4e:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
   17b50:	68bb      	ldr	r3, [r7, #8]
   17b52:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   17b56:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
   17b58:	68bb      	ldr	r3, [r7, #8]
   17b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17b5c:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
   17b5e:	68bb      	ldr	r3, [r7, #8]
   17b60:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   17b64:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
   17b66:	4b34      	ldr	r3, [pc, #208]	; (17c38 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   17b68:	681b      	ldr	r3, [r3, #0]
   17b6a:	1d18      	adds	r0, r3, #4
   17b6c:	2300      	movs	r3, #0
   17b6e:	9301      	str	r3, [sp, #4]
   17b70:	2300      	movs	r3, #0
   17b72:	9300      	str	r3, [sp, #0]
   17b74:	68bb      	ldr	r3, [r7, #8]
   17b76:	4a31      	ldr	r2, [pc, #196]	; (17c3c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
   17b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   17b7a:	4c31      	ldr	r4, [pc, #196]	; (17c40 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   17b7c:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
   17b7e:	4b2e      	ldr	r3, [pc, #184]	; (17c38 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   17b80:	681b      	ldr	r3, [r3, #0]
   17b82:	1d18      	adds	r0, r3, #4
   17b84:	2300      	movs	r3, #0
   17b86:	9301      	str	r3, [sp, #4]
   17b88:	2300      	movs	r3, #0
   17b8a:	9300      	str	r3, [sp, #0]
   17b8c:	68bb      	ldr	r3, [r7, #8]
   17b8e:	4a2d      	ldr	r2, [pc, #180]	; (17c44 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
   17b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17b92:	4c2b      	ldr	r4, [pc, #172]	; (17c40 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   17b94:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
   17b96:	68bb      	ldr	r3, [r7, #8]
   17b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17b9a:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
   17b9c:	68bb      	ldr	r3, [r7, #8]
   17b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   17ba0:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
   17ba2:	68bb      	ldr	r3, [r7, #8]
   17ba4:	22ff      	movs	r2, #255	; 0xff
   17ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
   17baa:	68bb      	ldr	r3, [r7, #8]
   17bac:	2200      	movs	r2, #0
   17bae:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
   17bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bb2:	695b      	ldr	r3, [r3, #20]
   17bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17bb8:	fb02 f203 	mul.w	r2, r2, r3
   17bbc:	68bb      	ldr	r3, [r7, #8]
   17bbe:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   17bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bc2:	7a1b      	ldrb	r3, [r3, #8]
   17bc4:	2bfd      	cmp	r3, #253	; 0xfd
   17bc6:	dd02      	ble.n	17bce <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
   17bc8:	68bb      	ldr	r3, [r7, #8]
   17bca:	2201      	movs	r2, #1
   17bcc:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
   17bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17bd0:	781b      	ldrb	r3, [r3, #0]
   17bd2:	4619      	mov	r1, r3
   17bd4:	68b8      	ldr	r0, [r7, #8]
   17bd6:	4b1c      	ldr	r3, [pc, #112]	; (17c48 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
   17bd8:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
   17bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bdc:	6859      	ldr	r1, [r3, #4]
   17bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17be0:	7a1b      	ldrb	r3, [r3, #8]
   17be2:	2bf0      	cmp	r3, #240	; 0xf0
   17be4:	dc01      	bgt.n	17bea <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
   17be6:	2301      	movs	r3, #1
   17be8:	e000      	b.n	17bec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
   17bea:	2300      	movs	r3, #0
   17bec:	461a      	mov	r2, r3
   17bee:	68b8      	ldr	r0, [r7, #8]
   17bf0:	4b16      	ldr	r3, [pc, #88]	; (17c4c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
   17bf2:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
   17bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bf6:	7a1b      	ldrb	r3, [r3, #8]
   17bf8:	2bf0      	cmp	r3, #240	; 0xf0
   17bfa:	dd03      	ble.n	17c04 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
   17bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bfe:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
   17c00:	2bfd      	cmp	r3, #253	; 0xfd
   17c02:	dd03      	ble.n	17c0c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
   17c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17c06:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
   17c08:	2bf0      	cmp	r3, #240	; 0xf0
   17c0a:	dd02      	ble.n	17c12 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
   17c0c:	68bb      	ldr	r3, [r7, #8]
   17c0e:	2200      	movs	r2, #0
   17c10:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
   17c12:	68fb      	ldr	r3, [r7, #12]
   17c14:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   17c18:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
   17c1a:	68bb      	ldr	r3, [r7, #8]
   17c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17c1e:	2210      	movs	r2, #16
   17c20:	4619      	mov	r1, r3
   17c22:	480b      	ldr	r0, [pc, #44]	; (17c50 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   17c24:	4b0b      	ldr	r3, [pc, #44]	; (17c54 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
   17c26:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
   17c28:	68fb      	ldr	r3, [r7, #12]
   17c2a:	4a09      	ldr	r2, [pc, #36]	; (17c50 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   17c2c:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   17c2e:	2300      	movs	r3, #0
}
   17c30:	4618      	mov	r0, r3
   17c32:	3714      	adds	r7, #20
   17c34:	46bd      	mov	sp, r7
   17c36:	bd90      	pop	{r4, r7, pc}
   17c38:	2000da88 	.word	0x2000da88
   17c3c:	0001760d 	.word	0x0001760d
   17c40:	00018199 	.word	0x00018199
   17c44:	000178f5 	.word	0x000178f5
   17c48:	000173bd 	.word	0x000173bd
   17c4c:	00017059 	.word	0x00017059
   17c50:	2000dab0 	.word	0x2000dab0
   17c54:	0001b0e1 	.word	0x0001b0e1

00017c58 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh>:


    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
}

uint32_t CO_PDO_Class::Send_Simple_Run_Command(uint8_t *data,uint8_t node){
   17c58:	b580      	push	{r7, lr}
   17c5a:	b086      	sub	sp, #24
   17c5c:	af00      	add	r7, sp, #0
   17c5e:	60f8      	str	r0, [r7, #12]
   17c60:	60b9      	str	r1, [r7, #8]
   17c62:	4613      	mov	r3, r2
   17c64:	71fb      	strb	r3, [r7, #7]
	tx_buffer->ident=(CO_CAN_ID_RPDO_1+node)<<2;
   17c66:	68fb      	ldr	r3, [r7, #12]
   17c68:	681b      	ldr	r3, [r3, #0]
   17c6a:	79fa      	ldrb	r2, [r7, #7]
   17c6c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   17c70:	0092      	lsls	r2, r2, #2
   17c72:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
   17c74:	2300      	movs	r3, #0
   17c76:	75fb      	strb	r3, [r7, #23]
   17c78:	7dfb      	ldrb	r3, [r7, #23]
   17c7a:	2b07      	cmp	r3, #7
   17c7c:	dc0d      	bgt.n	17c9a <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x42>
	{
		tx_buffer->data[i]=data[i];
   17c7e:	68fb      	ldr	r3, [r7, #12]
   17c80:	681a      	ldr	r2, [r3, #0]
   17c82:	7dfb      	ldrb	r3, [r7, #23]
   17c84:	7df9      	ldrb	r1, [r7, #23]
   17c86:	68b8      	ldr	r0, [r7, #8]
   17c88:	4401      	add	r1, r0
   17c8a:	7809      	ldrb	r1, [r1, #0]
   17c8c:	4413      	add	r3, r2
   17c8e:	460a      	mov	r2, r1
   17c90:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 8; i++)
   17c92:	7dfb      	ldrb	r3, [r7, #23]
   17c94:	3301      	adds	r3, #1
   17c96:	75fb      	strb	r3, [r7, #23]
   17c98:	e7ee      	b.n	17c78 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x20>
	}
	tx_buffer->DLC=4;
   17c9a:	68fb      	ldr	r3, [r7, #12]
   17c9c:	681b      	ldr	r3, [r3, #0]
   17c9e:	2204      	movs	r2, #4
   17ca0:	711a      	strb	r2, [r3, #4]
	 return   canopen_driver->CAN_Send(tx_buffer);
   17ca2:	4b06      	ldr	r3, [pc, #24]	; (17cbc <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x64>)
   17ca4:	681a      	ldr	r2, [r3, #0]
   17ca6:	68fb      	ldr	r3, [r7, #12]
   17ca8:	681b      	ldr	r3, [r3, #0]
   17caa:	4619      	mov	r1, r3
   17cac:	4610      	mov	r0, r2
   17cae:	4b04      	ldr	r3, [pc, #16]	; (17cc0 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x68>)
   17cb0:	4798      	blx	r3
   17cb2:	4603      	mov	r3, r0
}
   17cb4:	4618      	mov	r0, r3
   17cb6:	3718      	adds	r7, #24
   17cb8:	46bd      	mov	sp, r7
   17cba:	bd80      	pop	{r7, pc}
   17cbc:	2000da88 	.word	0x2000da88
   17cc0:	000162ad 	.word	0x000162ad

00017cc4 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   17cc4:	b580      	push	{r7, lr}
   17cc6:	b082      	sub	sp, #8
   17cc8:	af00      	add	r7, sp, #0
   17cca:	6078      	str	r0, [r7, #4]
   17ccc:	6878      	ldr	r0, [r7, #4]
   17cce:	4b05      	ldr	r3, [pc, #20]	; (17ce4 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   17cd0:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   17cd2:	4a05      	ldr	r2, [pc, #20]	; (17ce8 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   17cd4:	687b      	ldr	r3, [r7, #4]
   17cd6:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   17cd8:	687b      	ldr	r3, [r7, #4]
   17cda:	4618      	mov	r0, r3
   17cdc:	3708      	adds	r7, #8
   17cde:	46bd      	mov	sp, r7
   17ce0:	bd80      	pop	{r7, pc}
   17ce2:	bf00      	nop
   17ce4:	0001898d 	.word	0x0001898d
   17ce8:	2000dad8 	.word	0x2000dad8

00017cec <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   17cec:	b580      	push	{r7, lr}
   17cee:	b082      	sub	sp, #8
   17cf0:	af00      	add	r7, sp, #0
   17cf2:	6078      	str	r0, [r7, #4]
   17cf4:	6878      	ldr	r0, [r7, #4]
   17cf6:	4b03      	ldr	r3, [pc, #12]	; (17d04 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   17cf8:	4798      	blx	r3
{
} //~CO_SDO_Class
   17cfa:	687b      	ldr	r3, [r7, #4]
   17cfc:	4618      	mov	r0, r3
   17cfe:	3708      	adds	r7, #8
   17d00:	46bd      	mov	sp, r7
   17d02:	bd80      	pop	{r7, pc}
   17d04:	000189a1 	.word	0x000189a1

00017d08 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   17d08:	b480      	push	{r7}
   17d0a:	b087      	sub	sp, #28
   17d0c:	af00      	add	r7, sp, #0
   17d0e:	60f8      	str	r0, [r7, #12]
   17d10:	60b9      	str	r1, [r7, #8]
   17d12:	607a      	str	r2, [r7, #4]
   17d14:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   17d16:	2300      	movs	r3, #0
   17d18:	617b      	str	r3, [r7, #20]
   17d1a:	697a      	ldr	r2, [r7, #20]
   17d1c:	683b      	ldr	r3, [r7, #0]
   17d1e:	429a      	cmp	r2, r3
   17d20:	d20b      	bcs.n	17d3a <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   17d22:	68ba      	ldr	r2, [r7, #8]
   17d24:	697b      	ldr	r3, [r7, #20]
   17d26:	4413      	add	r3, r2
   17d28:	6879      	ldr	r1, [r7, #4]
   17d2a:	697a      	ldr	r2, [r7, #20]
   17d2c:	440a      	add	r2, r1
   17d2e:	7812      	ldrb	r2, [r2, #0]
   17d30:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   17d32:	697b      	ldr	r3, [r7, #20]
   17d34:	3301      	adds	r3, #1
   17d36:	617b      	str	r3, [r7, #20]
   17d38:	e7ef      	b.n	17d1a <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   17d3a:	bf00      	nop
   17d3c:	371c      	adds	r7, #28
   17d3e:	46bd      	mov	sp, r7
   17d40:	bc80      	pop	{r7}
   17d42:	4770      	bx	lr

00017d44 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   17d44:	b480      	push	{r7}
   17d46:	b087      	sub	sp, #28
   17d48:	af00      	add	r7, sp, #0
   17d4a:	6078      	str	r0, [r7, #4]
   17d4c:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   17d4e:	683b      	ldr	r3, [r7, #0]
   17d50:	781b      	ldrb	r3, [r3, #0]
   17d52:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   17d54:	683b      	ldr	r3, [r7, #0]
   17d56:	3301      	adds	r3, #1
   17d58:	781b      	ldrb	r3, [r3, #0]
   17d5a:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   17d5c:	683b      	ldr	r3, [r7, #0]
   17d5e:	3302      	adds	r3, #2
   17d60:	781b      	ldrb	r3, [r3, #0]
   17d62:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   17d64:	683b      	ldr	r3, [r7, #0]
   17d66:	3303      	adds	r3, #3
   17d68:	781b      	ldrb	r3, [r3, #0]
   17d6a:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   17d6c:	68bb      	ldr	r3, [r7, #8]
}
   17d6e:	4618      	mov	r0, r3
   17d70:	371c      	adds	r7, #28
   17d72:	46bd      	mov	sp, r7
   17d74:	bc80      	pop	{r7}
   17d76:	4770      	bx	lr

00017d78 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   17d78:	b480      	push	{r7}
   17d7a:	b089      	sub	sp, #36	; 0x24
   17d7c:	af00      	add	r7, sp, #0
   17d7e:	60f8      	str	r0, [r7, #12]
   17d80:	60b9      	str	r1, [r7, #8]
   17d82:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   17d84:	687b      	ldr	r3, [r7, #4]
   17d86:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   17d88:	7c3a      	ldrb	r2, [r7, #16]
   17d8a:	68bb      	ldr	r3, [r7, #8]
   17d8c:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   17d8e:	68bb      	ldr	r3, [r7, #8]
   17d90:	3301      	adds	r3, #1
   17d92:	7c7a      	ldrb	r2, [r7, #17]
   17d94:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   17d96:	68bb      	ldr	r3, [r7, #8]
   17d98:	3302      	adds	r3, #2
   17d9a:	7cba      	ldrb	r2, [r7, #18]
   17d9c:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   17d9e:	68bb      	ldr	r3, [r7, #8]
   17da0:	3303      	adds	r3, #3
   17da2:	7cfa      	ldrb	r2, [r7, #19]
   17da4:	701a      	strb	r2, [r3, #0]
}
   17da6:	bf00      	nop
   17da8:	3724      	adds	r7, #36	; 0x24
   17daa:	46bd      	mov	sp, r7
   17dac:	bc80      	pop	{r7}
   17dae:	4770      	bx	lr

00017db0 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   17db0:	b480      	push	{r7}
   17db2:	b087      	sub	sp, #28
   17db4:	af00      	add	r7, sp, #0
   17db6:	60f8      	str	r0, [r7, #12]
   17db8:	60b9      	str	r1, [r7, #8]
   17dba:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   17dbc:	68bb      	ldr	r3, [r7, #8]
   17dbe:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   17dc0:	687b      	ldr	r3, [r7, #4]
   17dc2:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   17dc4:	693b      	ldr	r3, [r7, #16]
   17dc6:	781a      	ldrb	r2, [r3, #0]
   17dc8:	697b      	ldr	r3, [r7, #20]
   17dca:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17dcc:	697b      	ldr	r3, [r7, #20]
   17dce:	3301      	adds	r3, #1
   17dd0:	693a      	ldr	r2, [r7, #16]
   17dd2:	7852      	ldrb	r2, [r2, #1]
   17dd4:	701a      	strb	r2, [r3, #0]
}
   17dd6:	bf00      	nop
   17dd8:	371c      	adds	r7, #28
   17dda:	46bd      	mov	sp, r7
   17ddc:	bc80      	pop	{r7}
   17dde:	4770      	bx	lr

00017de0 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   17de0:	b480      	push	{r7}
   17de2:	b087      	sub	sp, #28
   17de4:	af00      	add	r7, sp, #0
   17de6:	60f8      	str	r0, [r7, #12]
   17de8:	60b9      	str	r1, [r7, #8]
   17dea:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   17dec:	68bb      	ldr	r3, [r7, #8]
   17dee:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   17df0:	687b      	ldr	r3, [r7, #4]
   17df2:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   17df4:	693b      	ldr	r3, [r7, #16]
   17df6:	781a      	ldrb	r2, [r3, #0]
   17df8:	697b      	ldr	r3, [r7, #20]
   17dfa:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17dfc:	697b      	ldr	r3, [r7, #20]
   17dfe:	3301      	adds	r3, #1
   17e00:	693a      	ldr	r2, [r7, #16]
   17e02:	7852      	ldrb	r2, [r2, #1]
   17e04:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   17e06:	697b      	ldr	r3, [r7, #20]
   17e08:	3302      	adds	r3, #2
   17e0a:	693a      	ldr	r2, [r7, #16]
   17e0c:	7892      	ldrb	r2, [r2, #2]
   17e0e:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   17e10:	697b      	ldr	r3, [r7, #20]
   17e12:	3303      	adds	r3, #3
   17e14:	693a      	ldr	r2, [r7, #16]
   17e16:	78d2      	ldrb	r2, [r2, #3]
   17e18:	701a      	strb	r2, [r3, #0]
}
   17e1a:	bf00      	nop
   17e1c:	371c      	adds	r7, #28
   17e1e:	46bd      	mov	sp, r7
   17e20:	bc80      	pop	{r7}
   17e22:	4770      	bx	lr

00017e24 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   17e24:	b580      	push	{r7, lr}
   17e26:	b086      	sub	sp, #24
   17e28:	af00      	add	r7, sp, #0
   17e2a:	6078      	str	r0, [r7, #4]
   17e2c:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   17e2e:	687b      	ldr	r3, [r7, #4]
   17e30:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   17e32:	683b      	ldr	r3, [r7, #0]
   17e34:	7d1b      	ldrb	r3, [r3, #20]
   17e36:	2b08      	cmp	r3, #8
   17e38:	f040 80a4 	bne.w	17f84 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   17e3c:	693b      	ldr	r3, [r7, #16]
   17e3e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   17e42:	2b00      	cmp	r3, #0
   17e44:	f040 809e 	bne.w	17f84 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   17e48:	693b      	ldr	r3, [r7, #16]
   17e4a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   17e4e:	2b15      	cmp	r3, #21
   17e50:	d024      	beq.n	17e9c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   17e52:	683b      	ldr	r3, [r7, #0]
   17e54:	7d5a      	ldrb	r2, [r3, #21]
   17e56:	693b      	ldr	r3, [r7, #16]
   17e58:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   17e5a:	683b      	ldr	r3, [r7, #0]
   17e5c:	7d9a      	ldrb	r2, [r3, #22]
   17e5e:	693b      	ldr	r3, [r7, #16]
   17e60:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   17e62:	683b      	ldr	r3, [r7, #0]
   17e64:	7dda      	ldrb	r2, [r3, #23]
   17e66:	693b      	ldr	r3, [r7, #16]
   17e68:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   17e6a:	683b      	ldr	r3, [r7, #0]
   17e6c:	7e1a      	ldrb	r2, [r3, #24]
   17e6e:	693b      	ldr	r3, [r7, #16]
   17e70:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   17e72:	683b      	ldr	r3, [r7, #0]
   17e74:	7e5a      	ldrb	r2, [r3, #25]
   17e76:	693b      	ldr	r3, [r7, #16]
   17e78:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   17e7a:	683b      	ldr	r3, [r7, #0]
   17e7c:	7e9a      	ldrb	r2, [r3, #26]
   17e7e:	693b      	ldr	r3, [r7, #16]
   17e80:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   17e82:	683b      	ldr	r3, [r7, #0]
   17e84:	7eda      	ldrb	r2, [r3, #27]
   17e86:	693b      	ldr	r3, [r7, #16]
   17e88:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   17e8a:	683b      	ldr	r3, [r7, #0]
   17e8c:	7f1a      	ldrb	r2, [r3, #28]
   17e8e:	693b      	ldr	r3, [r7, #16]
   17e90:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   17e92:	693b      	ldr	r3, [r7, #16]
   17e94:	2201      	movs	r2, #1
   17e96:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   17e9a:	e067      	b.n	17f6c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   17e9c:	683b      	ldr	r3, [r7, #0]
   17e9e:	7d5a      	ldrb	r2, [r3, #21]
   17ea0:	693b      	ldr	r3, [r7, #16]
   17ea2:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   17ea4:	693b      	ldr	r3, [r7, #16]
   17ea6:	781b      	ldrb	r3, [r3, #0]
   17ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17eac:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   17eae:	693b      	ldr	r3, [r7, #16]
   17eb0:	2200      	movs	r2, #0
   17eb2:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   17eb4:	7bfa      	ldrb	r2, [r7, #15]
   17eb6:	693b      	ldr	r3, [r7, #16]
   17eb8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17ebc:	3301      	adds	r3, #1
   17ebe:	429a      	cmp	r2, r3
   17ec0:	d141      	bne.n	17f46 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   17ec2:	693b      	ldr	r3, [r7, #16]
   17ec4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17ec8:	3301      	adds	r3, #1
   17eca:	b2da      	uxtb	r2, r3
   17ecc:	693b      	ldr	r3, [r7, #16]
   17ece:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   17ed2:	2301      	movs	r3, #1
   17ed4:	75fb      	strb	r3, [r7, #23]
   17ed6:	7dfb      	ldrb	r3, [r7, #23]
   17ed8:	2b07      	cmp	r3, #7
   17eda:	dc1d      	bgt.n	17f18 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   17edc:	693b      	ldr	r3, [r7, #16]
   17ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   17ee0:	693b      	ldr	r3, [r7, #16]
   17ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17ee4:	1c58      	adds	r0, r3, #1
   17ee6:	6939      	ldr	r1, [r7, #16]
   17ee8:	6388      	str	r0, [r1, #56]	; 0x38
   17eea:	4413      	add	r3, r2
   17eec:	7dfa      	ldrb	r2, [r7, #23]
   17eee:	6839      	ldr	r1, [r7, #0]
   17ef0:	440a      	add	r2, r1
   17ef2:	7d52      	ldrb	r2, [r2, #21]
   17ef4:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   17ef6:	693b      	ldr	r3, [r7, #16]
   17ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17efa:	2b1f      	cmp	r3, #31
   17efc:	d908      	bls.n	17f10 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17efe:	693b      	ldr	r3, [r7, #16]
   17f00:	2216      	movs	r2, #22
   17f02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   17f06:	693b      	ldr	r3, [r7, #16]
   17f08:	2201      	movs	r2, #1
   17f0a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   17f0e:	e003      	b.n	17f18 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   17f10:	7dfb      	ldrb	r3, [r7, #23]
   17f12:	3301      	adds	r3, #1
   17f14:	75fb      	strb	r3, [r7, #23]
   17f16:	e7de      	b.n	17ed6 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   17f18:	693b      	ldr	r3, [r7, #16]
   17f1a:	781b      	ldrb	r3, [r3, #0]
   17f1c:	b25b      	sxtb	r3, r3
   17f1e:	2b00      	cmp	r3, #0
   17f20:	db08      	blt.n	17f34 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   17f22:	693b      	ldr	r3, [r7, #16]
   17f24:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17f28:	461a      	mov	r2, r3
   17f2a:	693b      	ldr	r3, [r7, #16]
   17f2c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   17f30:	429a      	cmp	r2, r3
   17f32:	db1b      	blt.n	17f6c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17f34:	693b      	ldr	r3, [r7, #16]
   17f36:	2216      	movs	r2, #22
   17f38:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   17f3c:	693b      	ldr	r3, [r7, #16]
   17f3e:	2201      	movs	r2, #1
   17f40:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   17f44:	e012      	b.n	17f6c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   17f46:	693b      	ldr	r3, [r7, #16]
   17f48:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17f4c:	7bfa      	ldrb	r2, [r7, #15]
   17f4e:	429a      	cmp	r2, r3
   17f50:	d00c      	beq.n	17f6c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   17f52:	693b      	ldr	r3, [r7, #16]
   17f54:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17f58:	2b00      	cmp	r3, #0
   17f5a:	d007      	beq.n	17f6c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17f5c:	693b      	ldr	r3, [r7, #16]
   17f5e:	2216      	movs	r2, #22
   17f60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   17f64:	693b      	ldr	r3, [r7, #16]
   17f66:	2201      	movs	r2, #1
   17f68:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   17f6c:	693b      	ldr	r3, [r7, #16]
   17f6e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   17f72:	2b00      	cmp	r3, #0
   17f74:	d006      	beq.n	17f84 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   17f76:	693b      	ldr	r3, [r7, #16]
   17f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   17f7a:	2b00      	cmp	r3, #0
   17f7c:	d002      	beq.n	17f84 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   17f7e:	693b      	ldr	r3, [r7, #16]
   17f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   17f82:	4798      	blx	r3
        }
    }
}
   17f84:	bf00      	nop
   17f86:	3718      	adds	r7, #24
   17f88:	46bd      	mov	sp, r7
   17f8a:	bd80      	pop	{r7, pc}

00017f8c <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   17f8c:	b580      	push	{r7, lr}
   17f8e:	b086      	sub	sp, #24
   17f90:	af00      	add	r7, sp, #0
   17f92:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17f94:	2300      	movs	r3, #0
   17f96:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   17f98:	687b      	ldr	r3, [r7, #4]
   17f9a:	681b      	ldr	r3, [r3, #0]
   17f9c:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   17f9e:	4b12      	ldr	r3, [pc, #72]	; (17fe8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   17fa0:	681b      	ldr	r3, [r3, #0]
   17fa2:	1d1a      	adds	r2, r3, #4
   17fa4:	687b      	ldr	r3, [r7, #4]
   17fa6:	685b      	ldr	r3, [r3, #4]
   17fa8:	4619      	mov	r1, r3
   17faa:	4610      	mov	r0, r2
   17fac:	4b0f      	ldr	r3, [pc, #60]	; (17fec <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   17fae:	4798      	blx	r3
   17fb0:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   17fb2:	687b      	ldr	r3, [r7, #4]
   17fb4:	7f5b      	ldrb	r3, [r3, #29]
   17fb6:	2b00      	cmp	r3, #0
   17fb8:	d010      	beq.n	17fdc <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   17fba:	687b      	ldr	r3, [r7, #4]
   17fbc:	7f1b      	ldrb	r3, [r3, #28]
   17fbe:	2b00      	cmp	r3, #0
   17fc0:	d00c      	beq.n	17fdc <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
   17fc2:	4b09      	ldr	r3, [pc, #36]	; (17fe8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   17fc4:	681b      	ldr	r3, [r3, #0]
   17fc6:	1d18      	adds	r0, r3, #4
   17fc8:	687b      	ldr	r3, [r7, #4]
   17fca:	6859      	ldr	r1, [r3, #4]
   17fcc:	693b      	ldr	r3, [r7, #16]
   17fce:	781b      	ldrb	r3, [r3, #0]
   17fd0:	461a      	mov	r2, r3
   17fd2:	68fb      	ldr	r3, [r7, #12]
   17fd4:	4413      	add	r3, r2
   17fd6:	461a      	mov	r2, r3
   17fd8:	4b05      	ldr	r3, [pc, #20]	; (17ff0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   17fda:	4798      	blx	r3
    }

    return ret;
   17fdc:	697b      	ldr	r3, [r7, #20]
}
   17fde:	4618      	mov	r0, r3
   17fe0:	3718      	adds	r7, #24
   17fe2:	46bd      	mov	sp, r7
   17fe4:	bd80      	pop	{r7, pc}
   17fe6:	bf00      	nop
   17fe8:	2000da88 	.word	0x2000da88
   17fec:	00017d45 	.word	0x00017d45
   17ff0:	00017d79 	.word	0x00017d79

00017ff4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17ff4:	b5b0      	push	{r4, r5, r7, lr}
   17ff6:	b08a      	sub	sp, #40	; 0x28
   17ff8:	af04      	add	r7, sp, #16
   17ffa:	60f8      	str	r0, [r7, #12]
   17ffc:	60b9      	str	r1, [r7, #8]
   17ffe:	607a      	str	r2, [r7, #4]
   18000:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   18002:	68bb      	ldr	r3, [r7, #8]
   18004:	2b00      	cmp	r3, #0
   18006:	d005      	beq.n	18014 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   18008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1800a:	2b00      	cmp	r3, #0
   1800c:	d002      	beq.n	18014 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   1800e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18010:	2b00      	cmp	r3, #0
   18012:	d102      	bne.n	1801a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   18014:	f04f 33ff 	mov.w	r3, #4294967295
   18018:	e0ac      	b.n	18174 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   1801a:	4a58      	ldr	r2, [pc, #352]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1801c:	68bb      	ldr	r3, [r7, #8]
   1801e:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   18020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18022:	2b00      	cmp	r3, #0
   18024:	d13b      	bne.n	1809e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   18026:	4b55      	ldr	r3, [pc, #340]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18028:	681b      	ldr	r3, [r3, #0]
   1802a:	2201      	movs	r2, #1
   1802c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   18030:	4b52      	ldr	r3, [pc, #328]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18032:	681b      	ldr	r3, [r3, #0]
   18034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18036:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   18038:	4b50      	ldr	r3, [pc, #320]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1803a:	681b      	ldr	r3, [r3, #0]
   1803c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1803e:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   18040:	4b4e      	ldr	r3, [pc, #312]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18042:	681b      	ldr	r3, [r3, #0]
   18044:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18046:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   18048:	2300      	movs	r3, #0
   1804a:	617b      	str	r3, [r7, #20]
   1804c:	697a      	ldr	r2, [r7, #20]
   1804e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18050:	429a      	cmp	r2, r3
   18052:	d238      	bcs.n	180c6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   18054:	4b49      	ldr	r3, [pc, #292]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18056:	681b      	ldr	r3, [r3, #0]
   18058:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1805a:	697a      	ldr	r2, [r7, #20]
   1805c:	4613      	mov	r3, r2
   1805e:	005b      	lsls	r3, r3, #1
   18060:	4413      	add	r3, r2
   18062:	009b      	lsls	r3, r3, #2
   18064:	440b      	add	r3, r1
   18066:	2200      	movs	r2, #0
   18068:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   1806a:	4b44      	ldr	r3, [pc, #272]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1806c:	681b      	ldr	r3, [r3, #0]
   1806e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   18070:	697a      	ldr	r2, [r7, #20]
   18072:	4613      	mov	r3, r2
   18074:	005b      	lsls	r3, r3, #1
   18076:	4413      	add	r3, r2
   18078:	009b      	lsls	r3, r3, #2
   1807a:	440b      	add	r3, r1
   1807c:	2200      	movs	r2, #0
   1807e:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   18080:	4b3e      	ldr	r3, [pc, #248]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18082:	681b      	ldr	r3, [r3, #0]
   18084:	6b59      	ldr	r1, [r3, #52]	; 0x34
   18086:	697a      	ldr	r2, [r7, #20]
   18088:	4613      	mov	r3, r2
   1808a:	005b      	lsls	r3, r3, #1
   1808c:	4413      	add	r3, r2
   1808e:	009b      	lsls	r3, r3, #2
   18090:	440b      	add	r3, r1
   18092:	2200      	movs	r2, #0
   18094:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   18096:	697b      	ldr	r3, [r7, #20]
   18098:	3301      	adds	r3, #1
   1809a:	617b      	str	r3, [r7, #20]
   1809c:	e7d6      	b.n	1804c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   1809e:	4b37      	ldr	r3, [pc, #220]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180a0:	681b      	ldr	r3, [r3, #0]
   180a2:	2200      	movs	r2, #0
   180a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   180a8:	4b34      	ldr	r3, [pc, #208]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180aa:	681b      	ldr	r3, [r3, #0]
   180ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   180ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   180b0:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   180b2:	4b32      	ldr	r3, [pc, #200]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180b4:	681b      	ldr	r3, [r3, #0]
   180b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   180b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   180ba:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   180bc:	4b2f      	ldr	r3, [pc, #188]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180be:	681b      	ldr	r3, [r3, #0]
   180c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   180c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
   180c4:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   180c6:	4b2d      	ldr	r3, [pc, #180]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180c8:	681b      	ldr	r3, [r3, #0]
   180ca:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   180ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   180d2:	4b2a      	ldr	r3, [pc, #168]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180d4:	681b      	ldr	r3, [r3, #0]
   180d6:	2200      	movs	r2, #0
   180d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   180dc:	4b27      	ldr	r3, [pc, #156]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180de:	681b      	ldr	r3, [r3, #0]
   180e0:	2200      	movs	r2, #0
   180e2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   180e6:	4b25      	ldr	r3, [pc, #148]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180e8:	681b      	ldr	r3, [r3, #0]
   180ea:	2200      	movs	r2, #0
   180ec:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   180ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   180f0:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   180f4:	d10f      	bne.n	18116 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   180f6:	4b22      	ldr	r3, [pc, #136]	; (18180 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   180f8:	681b      	ldr	r3, [r3, #0]
   180fa:	1d18      	adds	r0, r3, #4
   180fc:	4b1f      	ldr	r3, [pc, #124]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   180fe:	681b      	ldr	r3, [r3, #0]
   18100:	f103 0268 	add.w	r2, r3, #104	; 0x68
   18104:	2300      	movs	r3, #0
   18106:	9301      	str	r3, [sp, #4]
   18108:	2300      	movs	r3, #0
   1810a:	9300      	str	r3, [sp, #0]
   1810c:	4613      	mov	r3, r2
   1810e:	4a1d      	ldr	r2, [pc, #116]	; (18184 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   18110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   18112:	4c1d      	ldr	r4, [pc, #116]	; (18188 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   18114:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   18116:	687b      	ldr	r3, [r7, #4]
   18118:	2b00      	cmp	r3, #0
   1811a:	db02      	blt.n	18122 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   1811c:	683b      	ldr	r3, [r7, #0]
   1811e:	2b00      	cmp	r3, #0
   18120:	da03      	bge.n	1812a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   18122:	2300      	movs	r3, #0
   18124:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   18126:	2300      	movs	r3, #0
   18128:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
   1812a:	4b15      	ldr	r3, [pc, #84]	; (18180 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   1812c:	6818      	ldr	r0, [r3, #0]
   1812e:	4b13      	ldr	r3, [pc, #76]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18130:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
   18132:	4a16      	ldr	r2, [pc, #88]	; (1818c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   18134:	9202      	str	r2, [sp, #8]
   18136:	9301      	str	r3, [sp, #4]
   18138:	2300      	movs	r3, #0
   1813a:	9300      	str	r3, [sp, #0]
   1813c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   18140:	687a      	ldr	r2, [r7, #4]
   18142:	6c79      	ldr	r1, [r7, #68]	; 0x44
   18144:	4c12      	ldr	r4, [pc, #72]	; (18190 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   18146:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   18148:	4b0c      	ldr	r3, [pc, #48]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1814a:	681b      	ldr	r3, [r3, #0]
   1814c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1814e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   18152:	4b0a      	ldr	r3, [pc, #40]	; (1817c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   18154:	681c      	ldr	r4, [r3, #0]
   18156:	4b0a      	ldr	r3, [pc, #40]	; (18180 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   18158:	6818      	ldr	r0, [r3, #0]
   1815a:	2300      	movs	r3, #0
   1815c:	9301      	str	r3, [sp, #4]
   1815e:	2308      	movs	r3, #8
   18160:	9300      	str	r3, [sp, #0]
   18162:	2300      	movs	r3, #0
   18164:	683a      	ldr	r2, [r7, #0]
   18166:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   18168:	4d0a      	ldr	r5, [pc, #40]	; (18194 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
   1816a:	47a8      	blx	r5
   1816c:	4603      	mov	r3, r0
   1816e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   18172:	2300      	movs	r3, #0
}
   18174:	4618      	mov	r0, r3
   18176:	3718      	adds	r7, #24
   18178:	46bd      	mov	sp, r7
   1817a:	bdb0      	pop	{r4, r5, r7, pc}
   1817c:	2000dadc 	.word	0x2000dadc
   18180:	2000da88 	.word	0x2000da88
   18184:	00017f8d 	.word	0x00017f8d
   18188:	00018199 	.word	0x00018199
   1818c:	00017e25 	.word	0x00017e25
   18190:	00016101 	.word	0x00016101
   18194:	00016201 	.word	0x00016201

00018198 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   18198:	b580      	push	{r7, lr}
   1819a:	b088      	sub	sp, #32
   1819c:	af00      	add	r7, sp, #0
   1819e:	60f8      	str	r0, [r7, #12]
   181a0:	60b9      	str	r1, [r7, #8]
   181a2:	607a      	str	r2, [r7, #4]
   181a4:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
   181a6:	4b28      	ldr	r3, [pc, #160]	; (18248 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   181a8:	681b      	ldr	r3, [r3, #0]
   181aa:	3304      	adds	r3, #4
   181ac:	68b9      	ldr	r1, [r7, #8]
   181ae:	4618      	mov	r0, r3
   181b0:	4b26      	ldr	r3, [pc, #152]	; (1824c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   181b2:	4798      	blx	r3
   181b4:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   181b6:	69bb      	ldr	r3, [r7, #24]
   181b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   181bc:	4293      	cmp	r3, r2
   181be:	d83e      	bhi.n	1823e <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   181c0:	4b23      	ldr	r3, [pc, #140]	; (18250 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   181c2:	681b      	ldr	r3, [r3, #0]
   181c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   181c6:	69ba      	ldr	r2, [r7, #24]
   181c8:	4613      	mov	r3, r2
   181ca:	005b      	lsls	r3, r3, #1
   181cc:	4413      	add	r3, r2
   181ce:	009b      	lsls	r3, r3, #2
   181d0:	440b      	add	r3, r1
   181d2:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   181d4:	4b1e      	ldr	r3, [pc, #120]	; (18250 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   181d6:	681b      	ldr	r3, [r3, #0]
   181d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   181da:	69ba      	ldr	r2, [r7, #24]
   181dc:	4613      	mov	r3, r2
   181de:	009b      	lsls	r3, r3, #2
   181e0:	4413      	add	r3, r2
   181e2:	009b      	lsls	r3, r3, #2
   181e4:	440b      	add	r3, r1
   181e6:	791b      	ldrb	r3, [r3, #4]
   181e8:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   181ea:	697b      	ldr	r3, [r7, #20]
   181ec:	687a      	ldr	r2, [r7, #4]
   181ee:	601a      	str	r2, [r3, #0]
        ext->object = object;
   181f0:	697b      	ldr	r3, [r7, #20]
   181f2:	683a      	ldr	r2, [r7, #0]
   181f4:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   181f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   181f8:	2b00      	cmp	r3, #0
   181fa:	d01b      	beq.n	18234 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   181fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   18200:	2b00      	cmp	r3, #0
   18202:	d017      	beq.n	18234 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   18204:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   18208:	7cfb      	ldrb	r3, [r7, #19]
   1820a:	429a      	cmp	r2, r3
   1820c:	d112      	bne.n	18234 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   1820e:	697b      	ldr	r3, [r7, #20]
   18210:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18212:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   18214:	2300      	movs	r3, #0
   18216:	61fb      	str	r3, [r7, #28]
   18218:	7cfa      	ldrb	r2, [r7, #19]
   1821a:	69fb      	ldr	r3, [r7, #28]
   1821c:	429a      	cmp	r2, r3
   1821e:	d30d      	bcc.n	1823c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   18220:	697b      	ldr	r3, [r7, #20]
   18222:	689a      	ldr	r2, [r3, #8]
   18224:	69fb      	ldr	r3, [r7, #28]
   18226:	4413      	add	r3, r2
   18228:	2200      	movs	r2, #0
   1822a:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   1822c:	69fb      	ldr	r3, [r7, #28]
   1822e:	3301      	adds	r3, #1
   18230:	61fb      	str	r3, [r7, #28]
   18232:	e7f1      	b.n	18218 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   18234:	697b      	ldr	r3, [r7, #20]
   18236:	2200      	movs	r2, #0
   18238:	609a      	str	r2, [r3, #8]
        }
    }
}
   1823a:	e000      	b.n	1823e <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   1823c:	bf00      	nop
}
   1823e:	bf00      	nop
   18240:	3720      	adds	r7, #32
   18242:	46bd      	mov	sp, r7
   18244:	bd80      	pop	{r7, pc}
   18246:	bf00      	nop
   18248:	2000da88 	.word	0x2000da88
   1824c:	00018255 	.word	0x00018255
   18250:	2000dadc 	.word	0x2000dadc

00018254 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   18254:	b480      	push	{r7}
   18256:	b087      	sub	sp, #28
   18258:	af00      	add	r7, sp, #0
   1825a:	6078      	str	r0, [r7, #4]
   1825c:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   1825e:	2300      	movs	r3, #0
   18260:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   18262:	4b26      	ldr	r3, [pc, #152]	; (182fc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   18264:	681b      	ldr	r3, [r3, #0]
   18266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18268:	3b01      	subs	r3, #1
   1826a:	613b      	str	r3, [r7, #16]
    while(min < max){
   1826c:	697a      	ldr	r2, [r7, #20]
   1826e:	693b      	ldr	r3, [r7, #16]
   18270:	429a      	cmp	r2, r3
   18272:	d227      	bcs.n	182c4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   18274:	697a      	ldr	r2, [r7, #20]
   18276:	693b      	ldr	r3, [r7, #16]
   18278:	4413      	add	r3, r2
   1827a:	085b      	lsrs	r3, r3, #1
   1827c:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   1827e:	4b1f      	ldr	r3, [pc, #124]	; (182fc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   18280:	681b      	ldr	r3, [r3, #0]
   18282:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18284:	68fa      	ldr	r2, [r7, #12]
   18286:	4613      	mov	r3, r2
   18288:	009b      	lsls	r3, r3, #2
   1828a:	4413      	add	r3, r2
   1828c:	009b      	lsls	r3, r3, #2
   1828e:	440b      	add	r3, r1
   18290:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   18292:	68bb      	ldr	r3, [r7, #8]
   18294:	681a      	ldr	r2, [r3, #0]
   18296:	683b      	ldr	r3, [r7, #0]
   18298:	429a      	cmp	r2, r3
   1829a:	d101      	bne.n	182a0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   1829c:	68fb      	ldr	r3, [r7, #12]
   1829e:	e028      	b.n	182f2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   182a0:	68bb      	ldr	r3, [r7, #8]
   182a2:	681a      	ldr	r2, [r3, #0]
   182a4:	683b      	ldr	r3, [r7, #0]
   182a6:	429a      	cmp	r2, r3
   182a8:	d908      	bls.n	182bc <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   182aa:	68fb      	ldr	r3, [r7, #12]
   182ac:	613b      	str	r3, [r7, #16]
            if(max) max--;
   182ae:	693b      	ldr	r3, [r7, #16]
   182b0:	2b00      	cmp	r3, #0
   182b2:	d0db      	beq.n	1826c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   182b4:	693b      	ldr	r3, [r7, #16]
   182b6:	3b01      	subs	r3, #1
   182b8:	613b      	str	r3, [r7, #16]
   182ba:	e7d7      	b.n	1826c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   182bc:	68fb      	ldr	r3, [r7, #12]
   182be:	3301      	adds	r3, #1
   182c0:	617b      	str	r3, [r7, #20]
    while(min < max){
   182c2:	e7d3      	b.n	1826c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   182c4:	697a      	ldr	r2, [r7, #20]
   182c6:	693b      	ldr	r3, [r7, #16]
   182c8:	429a      	cmp	r2, r3
   182ca:	d110      	bne.n	182ee <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   182cc:	4b0b      	ldr	r3, [pc, #44]	; (182fc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   182ce:	681b      	ldr	r3, [r3, #0]
   182d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   182d2:	697a      	ldr	r2, [r7, #20]
   182d4:	4613      	mov	r3, r2
   182d6:	009b      	lsls	r3, r3, #2
   182d8:	4413      	add	r3, r2
   182da:	009b      	lsls	r3, r3, #2
   182dc:	440b      	add	r3, r1
   182de:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   182e0:	68bb      	ldr	r3, [r7, #8]
   182e2:	681a      	ldr	r2, [r3, #0]
   182e4:	683b      	ldr	r3, [r7, #0]
   182e6:	429a      	cmp	r2, r3
   182e8:	d101      	bne.n	182ee <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   182ea:	697b      	ldr	r3, [r7, #20]
   182ec:	e001      	b.n	182f2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   182ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   182f2:	4618      	mov	r0, r3
   182f4:	371c      	adds	r7, #28
   182f6:	46bd      	mov	sp, r7
   182f8:	bc80      	pop	{r7}
   182fa:	4770      	bx	lr
   182fc:	2000dadc 	.word	0x2000dadc

00018300 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   18300:	b480      	push	{r7}
   18302:	b087      	sub	sp, #28
   18304:	af00      	add	r7, sp, #0
   18306:	60f8      	str	r0, [r7, #12]
   18308:	60b9      	str	r1, [r7, #8]
   1830a:	4613      	mov	r3, r2
   1830c:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   1830e:	4b25      	ldr	r3, [pc, #148]	; (183a4 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
   18310:	681b      	ldr	r3, [r3, #0]
   18312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18314:	68ba      	ldr	r2, [r7, #8]
   18316:	4613      	mov	r3, r2
   18318:	009b      	lsls	r3, r3, #2
   1831a:	4413      	add	r3, r2
   1831c:	009b      	lsls	r3, r3, #2
   1831e:	440b      	add	r3, r1
   18320:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   18322:	68bb      	ldr	r3, [r7, #8]
   18324:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18328:	4293      	cmp	r3, r2
   1832a:	d101      	bne.n	18330 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   1832c:	2300      	movs	r3, #0
   1832e:	e034      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   18330:	697b      	ldr	r3, [r7, #20]
   18332:	791b      	ldrb	r3, [r3, #4]
   18334:	2b00      	cmp	r3, #0
   18336:	d108      	bne.n	1834a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   18338:	697b      	ldr	r3, [r7, #20]
   1833a:	691b      	ldr	r3, [r3, #16]
   1833c:	2b00      	cmp	r3, #0
   1833e:	d101      	bne.n	18344 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   18340:	2320      	movs	r3, #32
   18342:	e02a      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   18344:	697b      	ldr	r3, [r7, #20]
   18346:	68db      	ldr	r3, [r3, #12]
   18348:	e027      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   1834a:	697b      	ldr	r3, [r7, #20]
   1834c:	689b      	ldr	r3, [r3, #8]
   1834e:	2b00      	cmp	r3, #0
   18350:	d00d      	beq.n	1836e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   18352:	79fb      	ldrb	r3, [r7, #7]
   18354:	2b00      	cmp	r3, #0
   18356:	d101      	bne.n	1835c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   18358:	2301      	movs	r3, #1
   1835a:	e01e      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   1835c:	697b      	ldr	r3, [r7, #20]
   1835e:	691b      	ldr	r3, [r3, #16]
   18360:	2b00      	cmp	r3, #0
   18362:	d101      	bne.n	18368 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   18364:	2320      	movs	r3, #32
   18366:	e018      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   18368:	697b      	ldr	r3, [r7, #20]
   1836a:	68db      	ldr	r3, [r3, #12]
   1836c:	e015      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   1836e:	697b      	ldr	r3, [r7, #20]
   18370:	6919      	ldr	r1, [r3, #16]
   18372:	79fa      	ldrb	r2, [r7, #7]
   18374:	4613      	mov	r3, r2
   18376:	005b      	lsls	r3, r3, #1
   18378:	4413      	add	r3, r2
   1837a:	009b      	lsls	r3, r3, #2
   1837c:	440b      	add	r3, r1
   1837e:	681b      	ldr	r3, [r3, #0]
   18380:	2b00      	cmp	r3, #0
   18382:	d101      	bne.n	18388 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   18384:	2320      	movs	r3, #32
   18386:	e008      	b.n	1839a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   18388:	697b      	ldr	r3, [r7, #20]
   1838a:	6919      	ldr	r1, [r3, #16]
   1838c:	79fa      	ldrb	r2, [r7, #7]
   1838e:	4613      	mov	r3, r2
   18390:	005b      	lsls	r3, r3, #1
   18392:	4413      	add	r3, r2
   18394:	009b      	lsls	r3, r3, #2
   18396:	440b      	add	r3, r1
   18398:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   1839a:	4618      	mov	r0, r3
   1839c:	371c      	adds	r7, #28
   1839e:	46bd      	mov	sp, r7
   183a0:	bc80      	pop	{r7}
   183a2:	4770      	bx	lr
   183a4:	2000dadc 	.word	0x2000dadc

000183a8 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   183a8:	b480      	push	{r7}
   183aa:	b089      	sub	sp, #36	; 0x24
   183ac:	af00      	add	r7, sp, #0
   183ae:	60f8      	str	r0, [r7, #12]
   183b0:	60b9      	str	r1, [r7, #8]
   183b2:	4613      	mov	r3, r2
   183b4:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   183b6:	4b27      	ldr	r3, [pc, #156]	; (18454 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
   183b8:	681b      	ldr	r3, [r3, #0]
   183ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   183bc:	68ba      	ldr	r2, [r7, #8]
   183be:	4613      	mov	r3, r2
   183c0:	009b      	lsls	r3, r3, #2
   183c2:	4413      	add	r3, r2
   183c4:	009b      	lsls	r3, r3, #2
   183c6:	440b      	add	r3, r1
   183c8:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   183ca:	68bb      	ldr	r3, [r7, #8]
   183cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   183d0:	4293      	cmp	r3, r2
   183d2:	d101      	bne.n	183d8 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   183d4:	2300      	movs	r3, #0
   183d6:	e037      	b.n	18448 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   183d8:	697b      	ldr	r3, [r7, #20]
   183da:	791b      	ldrb	r3, [r3, #4]
   183dc:	2b00      	cmp	r3, #0
   183de:	d102      	bne.n	183e6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   183e0:	697b      	ldr	r3, [r7, #20]
   183e2:	689b      	ldr	r3, [r3, #8]
   183e4:	e030      	b.n	18448 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   183e6:	697b      	ldr	r3, [r7, #20]
   183e8:	689b      	ldr	r3, [r3, #8]
   183ea:	2b00      	cmp	r3, #0
   183ec:	d023      	beq.n	18436 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   183ee:	2300      	movs	r3, #0
   183f0:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   183f2:	697b      	ldr	r3, [r7, #20]
   183f4:	689b      	ldr	r3, [r3, #8]
   183f6:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   183f8:	697b      	ldr	r3, [r7, #20]
   183fa:	681b      	ldr	r3, [r3, #0]
   183fc:	f241 0203 	movw	r2, #4099	; 0x1003
   18400:	4293      	cmp	r3, r2
   18402:	d108      	bne.n	18416 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   18404:	79fb      	ldrb	r3, [r7, #7]
   18406:	2b00      	cmp	r3, #0
   18408:	d105      	bne.n	18416 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   1840a:	2301      	movs	r3, #1
   1840c:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   1840e:	69bb      	ldr	r3, [r7, #24]
   18410:	f043 0308 	orr.w	r3, r3, #8
   18414:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   18416:	79fb      	ldrb	r3, [r7, #7]
   18418:	2b00      	cmp	r3, #0
   1841a:	d10a      	bne.n	18432 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   1841c:	7ffb      	ldrb	r3, [r7, #31]
   1841e:	2b00      	cmp	r3, #0
   18420:	d107      	bne.n	18432 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   18422:	69bb      	ldr	r3, [r7, #24]
   18424:	f023 0318 	bic.w	r3, r3, #24
   18428:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   1842a:	69bb      	ldr	r3, [r7, #24]
   1842c:	f043 0304 	orr.w	r3, r3, #4
   18430:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   18432:	69bb      	ldr	r3, [r7, #24]
   18434:	e008      	b.n	18448 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   18436:	697b      	ldr	r3, [r7, #20]
   18438:	6919      	ldr	r1, [r3, #16]
   1843a:	79fa      	ldrb	r2, [r7, #7]
   1843c:	4613      	mov	r3, r2
   1843e:	005b      	lsls	r3, r3, #1
   18440:	4413      	add	r3, r2
   18442:	009b      	lsls	r3, r3, #2
   18444:	440b      	add	r3, r1
   18446:	685b      	ldr	r3, [r3, #4]
    }
}
   18448:	4618      	mov	r0, r3
   1844a:	3724      	adds	r7, #36	; 0x24
   1844c:	46bd      	mov	sp, r7
   1844e:	bc80      	pop	{r7}
   18450:	4770      	bx	lr
   18452:	bf00      	nop
   18454:	2000dadc 	.word	0x2000dadc

00018458 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   18458:	b480      	push	{r7}
   1845a:	b087      	sub	sp, #28
   1845c:	af00      	add	r7, sp, #0
   1845e:	60f8      	str	r0, [r7, #12]
   18460:	60b9      	str	r1, [r7, #8]
   18462:	4613      	mov	r3, r2
   18464:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   18466:	4b20      	ldr	r3, [pc, #128]	; (184e8 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
   18468:	681b      	ldr	r3, [r3, #0]
   1846a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1846c:	68ba      	ldr	r2, [r7, #8]
   1846e:	4613      	mov	r3, r2
   18470:	009b      	lsls	r3, r3, #2
   18472:	4413      	add	r3, r2
   18474:	009b      	lsls	r3, r3, #2
   18476:	440b      	add	r3, r1
   18478:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   1847a:	68bb      	ldr	r3, [r7, #8]
   1847c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18480:	4293      	cmp	r3, r2
   18482:	d101      	bne.n	18488 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   18484:	2300      	movs	r3, #0
   18486:	e02a      	b.n	184de <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   18488:	697b      	ldr	r3, [r7, #20]
   1848a:	791b      	ldrb	r3, [r3, #4]
   1848c:	2b00      	cmp	r3, #0
   1848e:	d102      	bne.n	18496 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   18490:	697b      	ldr	r3, [r7, #20]
   18492:	691b      	ldr	r3, [r3, #16]
   18494:	e023      	b.n	184de <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   18496:	697b      	ldr	r3, [r7, #20]
   18498:	689b      	ldr	r3, [r3, #8]
   1849a:	2b00      	cmp	r3, #0
   1849c:	d016      	beq.n	184cc <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   1849e:	79fb      	ldrb	r3, [r7, #7]
   184a0:	2b00      	cmp	r3, #0
   184a2:	d102      	bne.n	184aa <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   184a4:	697b      	ldr	r3, [r7, #20]
   184a6:	3304      	adds	r3, #4
   184a8:	e019      	b.n	184de <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   184aa:	697b      	ldr	r3, [r7, #20]
   184ac:	691b      	ldr	r3, [r3, #16]
   184ae:	2b00      	cmp	r3, #0
   184b0:	d101      	bne.n	184b6 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   184b2:	2300      	movs	r3, #0
   184b4:	e013      	b.n	184de <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   184b6:	697b      	ldr	r3, [r7, #20]
   184b8:	691a      	ldr	r2, [r3, #16]
   184ba:	79fb      	ldrb	r3, [r7, #7]
   184bc:	3b01      	subs	r3, #1
   184be:	4619      	mov	r1, r3
   184c0:	697b      	ldr	r3, [r7, #20]
   184c2:	68db      	ldr	r3, [r3, #12]
   184c4:	fb03 f301 	mul.w	r3, r3, r1
   184c8:	4413      	add	r3, r2
   184ca:	e008      	b.n	184de <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   184cc:	697b      	ldr	r3, [r7, #20]
   184ce:	6919      	ldr	r1, [r3, #16]
   184d0:	79fa      	ldrb	r2, [r7, #7]
   184d2:	4613      	mov	r3, r2
   184d4:	005b      	lsls	r3, r3, #1
   184d6:	4413      	add	r3, r2
   184d8:	009b      	lsls	r3, r3, #2
   184da:	440b      	add	r3, r1
   184dc:	681b      	ldr	r3, [r3, #0]
    }
}
   184de:	4618      	mov	r0, r3
   184e0:	371c      	adds	r7, #28
   184e2:	46bd      	mov	sp, r7
   184e4:	bc80      	pop	{r7}
   184e6:	4770      	bx	lr
   184e8:	2000dadc 	.word	0x2000dadc

000184ec <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   184ec:	b480      	push	{r7}
   184ee:	b083      	sub	sp, #12
   184f0:	af00      	add	r7, sp, #0
   184f2:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   184f4:	687b      	ldr	r3, [r7, #4]
   184f6:	4618      	mov	r0, r3
   184f8:	370c      	adds	r7, #12
   184fa:	46bd      	mov	sp, r7
   184fc:	bc80      	pop	{r7}
   184fe:	4770      	bx	lr

00018500 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   18500:	b480      	push	{r7}
   18502:	b083      	sub	sp, #12
   18504:	af00      	add	r7, sp, #0
   18506:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   18508:	687b      	ldr	r3, [r7, #4]
   1850a:	4618      	mov	r0, r3
   1850c:	370c      	adds	r7, #12
   1850e:	46bd      	mov	sp, r7
   18510:	bc80      	pop	{r7}
   18512:	4770      	bx	lr

00018514 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   18514:	b480      	push	{r7}
   18516:	b085      	sub	sp, #20
   18518:	af00      	add	r7, sp, #0
   1851a:	6078      	str	r0, [r7, #4]
   1851c:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   1851e:	687b      	ldr	r3, [r7, #4]
   18520:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   18522:	68fb      	ldr	r3, [r7, #12]
   18524:	685b      	ldr	r3, [r3, #4]
   18526:	781b      	ldrb	r3, [r3, #0]
   18528:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   1852a:	7afb      	ldrb	r3, [r7, #11]
   1852c:	2b05      	cmp	r3, #5
   1852e:	d002      	beq.n	18536 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   18530:	7afb      	ldrb	r3, [r7, #11]
   18532:	2b7f      	cmp	r3, #127	; 0x7f
   18534:	d132      	bne.n	1859c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   18536:	68fb      	ldr	r3, [r7, #12]
   18538:	7e1b      	ldrb	r3, [r3, #24]
   1853a:	2b00      	cmp	r3, #0
   1853c:	d10e      	bne.n	1855c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   1853e:	683b      	ldr	r3, [r7, #0]
   18540:	7d1b      	ldrb	r3, [r3, #20]
   18542:	2b00      	cmp	r3, #0
   18544:	d103      	bne.n	1854e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   18546:	68fb      	ldr	r3, [r7, #12]
   18548:	2201      	movs	r2, #1
   1854a:	769a      	strb	r2, [r3, #26]
   1854c:	e018      	b.n	18580 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   1854e:	683b      	ldr	r3, [r7, #0]
   18550:	7d1b      	ldrb	r3, [r3, #20]
   18552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   18556:	68fb      	ldr	r3, [r7, #12]
   18558:	625a      	str	r2, [r3, #36]	; 0x24
   1855a:	e011      	b.n	18580 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   1855c:	683b      	ldr	r3, [r7, #0]
   1855e:	7d1b      	ldrb	r3, [r3, #20]
   18560:	2b01      	cmp	r3, #1
   18562:	d107      	bne.n	18574 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   18564:	683b      	ldr	r3, [r7, #0]
   18566:	7d5a      	ldrb	r2, [r3, #21]
   18568:	68fb      	ldr	r3, [r7, #12]
   1856a:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   1856c:	68fb      	ldr	r3, [r7, #12]
   1856e:	2201      	movs	r2, #1
   18570:	769a      	strb	r2, [r3, #26]
   18572:	e005      	b.n	18580 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   18574:	683b      	ldr	r3, [r7, #0]
   18576:	7d1b      	ldrb	r3, [r3, #20]
   18578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   1857c:	68fb      	ldr	r3, [r7, #12]
   1857e:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   18580:	68fb      	ldr	r3, [r7, #12]
   18582:	7e9b      	ldrb	r3, [r3, #26]
   18584:	2b00      	cmp	r3, #0
   18586:	d009      	beq.n	1859c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   18588:	68fb      	ldr	r3, [r7, #12]
   1858a:	7edb      	ldrb	r3, [r3, #27]
   1858c:	2b00      	cmp	r3, #0
   1858e:	bf0c      	ite	eq
   18590:	2301      	moveq	r3, #1
   18592:	2300      	movne	r3, #0
   18594:	b2db      	uxtb	r3, r3
   18596:	461a      	mov	r2, r3
   18598:	68fb      	ldr	r3, [r7, #12]
   1859a:	76da      	strb	r2, [r3, #27]
        }
    }
}
   1859c:	bf00      	nop
   1859e:	3714      	adds	r7, #20
   185a0:	46bd      	mov	sp, r7
   185a2:	bc80      	pop	{r7}
   185a4:	4770      	bx	lr
	...

000185a8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   185a8:	b590      	push	{r4, r7, lr}
   185aa:	b08b      	sub	sp, #44	; 0x2c
   185ac:	af04      	add	r7, sp, #16
   185ae:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   185b0:	2300      	movs	r3, #0
   185b2:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   185b4:	687b      	ldr	r3, [r7, #4]
   185b6:	681b      	ldr	r3, [r3, #0]
   185b8:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
   185ba:	4b35      	ldr	r3, [pc, #212]	; (18690 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   185bc:	681b      	ldr	r3, [r3, #0]
   185be:	1d1a      	adds	r2, r3, #4
   185c0:	687b      	ldr	r3, [r7, #4]
   185c2:	685b      	ldr	r3, [r3, #4]
   185c4:	4619      	mov	r1, r3
   185c6:	4610      	mov	r0, r2
   185c8:	4b32      	ldr	r3, [pc, #200]	; (18694 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   185ca:	4798      	blx	r3
   185cc:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   185ce:	687b      	ldr	r3, [r7, #4]
   185d0:	7f5b      	ldrb	r3, [r3, #29]
   185d2:	2b00      	cmp	r3, #0
   185d4:	d157      	bne.n	18686 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   185d6:	2300      	movs	r3, #0
   185d8:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   185da:	68bb      	ldr	r3, [r7, #8]
   185dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   185e0:	2b00      	cmp	r3, #0
   185e2:	d002      	beq.n	185ea <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   185e4:	4b2c      	ldr	r3, [pc, #176]	; (18698 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   185e6:	617b      	str	r3, [r7, #20]
   185e8:	e00d      	b.n	18606 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   185ea:	68bb      	ldr	r3, [r7, #8]
   185ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   185f0:	2b00      	cmp	r3, #0
   185f2:	d008      	beq.n	18606 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   185f4:	68fb      	ldr	r3, [r7, #12]
   185f6:	7a1b      	ldrb	r3, [r3, #8]
   185f8:	2b00      	cmp	r3, #0
   185fa:	d002      	beq.n	18602 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   185fc:	4b27      	ldr	r3, [pc, #156]	; (1869c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   185fe:	617b      	str	r3, [r7, #20]
   18600:	e001      	b.n	18606 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   18602:	2301      	movs	r3, #1
   18604:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   18606:	697b      	ldr	r3, [r7, #20]
   18608:	2b00      	cmp	r3, #0
   1860a:	d13c      	bne.n	18686 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   1860c:	68bb      	ldr	r3, [r7, #8]
   1860e:	f3c3 020a 	ubfx	r2, r3, #0, #11
   18612:	68fb      	ldr	r3, [r7, #12]
   18614:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   18616:	7cfb      	ldrb	r3, [r7, #19]
   18618:	2b00      	cmp	r3, #0
   1861a:	d021      	beq.n	18660 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   1861c:	2300      	movs	r3, #0
   1861e:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   18620:	68fb      	ldr	r3, [r7, #12]
   18622:	7e1b      	ldrb	r3, [r3, #24]
   18624:	2b00      	cmp	r3, #0
   18626:	d007      	beq.n	18638 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   18628:	2301      	movs	r3, #1
   1862a:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   1862c:	68fb      	ldr	r3, [r7, #12]
   1862e:	2200      	movs	r2, #0
   18630:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   18632:	68fb      	ldr	r3, [r7, #12]
   18634:	2200      	movs	r2, #0
   18636:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   18638:	4b15      	ldr	r3, [pc, #84]	; (18690 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   1863a:	6818      	ldr	r0, [r3, #0]
   1863c:	68fb      	ldr	r3, [r7, #12]
   1863e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   18640:	68fb      	ldr	r3, [r7, #12]
   18642:	68da      	ldr	r2, [r3, #12]
   18644:	2300      	movs	r3, #0
   18646:	9301      	str	r3, [sp, #4]
   18648:	7cbb      	ldrb	r3, [r7, #18]
   1864a:	9300      	str	r3, [sp, #0]
   1864c:	2300      	movs	r3, #0
   1864e:	4c14      	ldr	r4, [pc, #80]	; (186a0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   18650:	47a0      	blx	r4
   18652:	4602      	mov	r2, r0
   18654:	68fb      	ldr	r3, [r7, #12]
   18656:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   18658:	68fb      	ldr	r3, [r7, #12]
   1865a:	2201      	movs	r2, #1
   1865c:	721a      	strb	r2, [r3, #8]
   1865e:	e002      	b.n	18666 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   18660:	68fb      	ldr	r3, [r7, #12]
   18662:	2200      	movs	r2, #0
   18664:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
   18666:	4b0a      	ldr	r3, [pc, #40]	; (18690 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   18668:	6818      	ldr	r0, [r3, #0]
   1866a:	68fb      	ldr	r3, [r7, #12]
   1866c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1866e:	68fb      	ldr	r3, [r7, #12]
   18670:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   18672:	4b0c      	ldr	r3, [pc, #48]	; (186a4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   18674:	9302      	str	r3, [sp, #8]
   18676:	68fb      	ldr	r3, [r7, #12]
   18678:	9301      	str	r3, [sp, #4]
   1867a:	2300      	movs	r3, #0
   1867c:	9300      	str	r3, [sp, #0]
   1867e:	f240 73ff 	movw	r3, #2047	; 0x7ff
   18682:	4c09      	ldr	r4, [pc, #36]	; (186a8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   18684:	47a0      	blx	r4
        }
    }

    return ret;
   18686:	697b      	ldr	r3, [r7, #20]
}
   18688:	4618      	mov	r0, r3
   1868a:	371c      	adds	r7, #28
   1868c:	46bd      	mov	sp, r7
   1868e:	bd90      	pop	{r4, r7, pc}
   18690:	2000da88 	.word	0x2000da88
   18694:	00017d45 	.word	0x00017d45
   18698:	06090030 	.word	0x06090030
   1869c:	08000022 	.word	0x08000022
   186a0:	00016201 	.word	0x00016201
   186a4:	00018515 	.word	0x00018515
   186a8:	00016101 	.word	0x00016101

000186ac <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   186ac:	b580      	push	{r7, lr}
   186ae:	b086      	sub	sp, #24
   186b0:	af00      	add	r7, sp, #0
   186b2:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   186b4:	2300      	movs	r3, #0
   186b6:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   186b8:	687b      	ldr	r3, [r7, #4]
   186ba:	681b      	ldr	r3, [r3, #0]
   186bc:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   186be:	4b19      	ldr	r3, [pc, #100]	; (18724 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   186c0:	681b      	ldr	r3, [r3, #0]
   186c2:	1d1a      	adds	r2, r3, #4
   186c4:	687b      	ldr	r3, [r7, #4]
   186c6:	685b      	ldr	r3, [r3, #4]
   186c8:	4619      	mov	r1, r3
   186ca:	4610      	mov	r0, r2
   186cc:	4b16      	ldr	r3, [pc, #88]	; (18728 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   186ce:	4798      	blx	r3
   186d0:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   186d2:	687b      	ldr	r3, [r7, #4]
   186d4:	7f5b      	ldrb	r3, [r3, #29]
   186d6:	2b00      	cmp	r3, #0
   186d8:	d11f      	bne.n	1871a <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   186da:	693b      	ldr	r3, [r7, #16]
   186dc:	691b      	ldr	r3, [r3, #16]
   186de:	2b00      	cmp	r3, #0
   186e0:	d105      	bne.n	186ee <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   186e2:	68fb      	ldr	r3, [r7, #12]
   186e4:	2b00      	cmp	r3, #0
   186e6:	d002      	beq.n	186ee <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   186e8:	693b      	ldr	r3, [r7, #16]
   186ea:	2200      	movs	r2, #0
   186ec:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   186ee:	693b      	ldr	r3, [r7, #16]
   186f0:	68fa      	ldr	r2, [r7, #12]
   186f2:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   186f4:	68fb      	ldr	r3, [r7, #12]
   186f6:	085a      	lsrs	r2, r3, #1
   186f8:	4613      	mov	r3, r2
   186fa:	005b      	lsls	r3, r3, #1
   186fc:	441a      	add	r2, r3
   186fe:	693b      	ldr	r3, [r7, #16]
   18700:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   18702:	693b      	ldr	r3, [r7, #16]
   18704:	695a      	ldr	r2, [r3, #20]
   18706:	68fb      	ldr	r3, [r7, #12]
   18708:	429a      	cmp	r2, r3
   1870a:	d203      	bcs.n	18714 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   1870c:	693b      	ldr	r3, [r7, #16]
   1870e:	f04f 32ff 	mov.w	r2, #4294967295
   18712:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   18714:	693b      	ldr	r3, [r7, #16]
   18716:	2200      	movs	r2, #0
   18718:	621a      	str	r2, [r3, #32]
    }

    return ret;
   1871a:	697b      	ldr	r3, [r7, #20]
}
   1871c:	4618      	mov	r0, r3
   1871e:	3718      	adds	r7, #24
   18720:	46bd      	mov	sp, r7
   18722:	bd80      	pop	{r7, pc}
   18724:	2000da88 	.word	0x2000da88
   18728:	00017d45 	.word	0x00017d45

0001872c <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   1872c:	b590      	push	{r4, r7, lr}
   1872e:	b089      	sub	sp, #36	; 0x24
   18730:	af02      	add	r7, sp, #8
   18732:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   18734:	2300      	movs	r3, #0
   18736:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   18738:	687b      	ldr	r3, [r7, #4]
   1873a:	681b      	ldr	r3, [r3, #0]
   1873c:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   1873e:	687b      	ldr	r3, [r7, #4]
   18740:	685b      	ldr	r3, [r3, #4]
   18742:	781b      	ldrb	r3, [r3, #0]
   18744:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   18746:	687b      	ldr	r3, [r7, #4]
   18748:	7f5b      	ldrb	r3, [r3, #29]
   1874a:	2b00      	cmp	r3, #0
   1874c:	d12c      	bne.n	187a8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   1874e:	2300      	movs	r3, #0
   18750:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   18752:	68fb      	ldr	r3, [r7, #12]
   18754:	691b      	ldr	r3, [r3, #16]
   18756:	2b00      	cmp	r3, #0
   18758:	d002      	beq.n	18760 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   1875a:	4b16      	ldr	r3, [pc, #88]	; (187b4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   1875c:	617b      	str	r3, [r7, #20]
   1875e:	e023      	b.n	187a8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   18760:	7afb      	ldrb	r3, [r7, #11]
   18762:	2b01      	cmp	r3, #1
   18764:	d005      	beq.n	18772 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   18766:	7afb      	ldrb	r3, [r7, #11]
   18768:	2bf0      	cmp	r3, #240	; 0xf0
   1876a:	dd05      	ble.n	18778 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   1876c:	7afb      	ldrb	r3, [r7, #11]
   1876e:	2bff      	cmp	r3, #255	; 0xff
   18770:	dc02      	bgt.n	18778 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   18772:	4b11      	ldr	r3, [pc, #68]	; (187b8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   18774:	617b      	str	r3, [r7, #20]
   18776:	e017      	b.n	187a8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   18778:	68fb      	ldr	r3, [r7, #12]
   1877a:	7afa      	ldrb	r2, [r7, #11]
   1877c:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   1877e:	7afb      	ldrb	r3, [r7, #11]
   18780:	2b00      	cmp	r3, #0
   18782:	d001      	beq.n	18788 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   18784:	2301      	movs	r3, #1
   18786:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   18788:	4b0c      	ldr	r3, [pc, #48]	; (187bc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   1878a:	6818      	ldr	r0, [r3, #0]
   1878c:	68fb      	ldr	r3, [r7, #12]
   1878e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   18790:	68fb      	ldr	r3, [r7, #12]
   18792:	68da      	ldr	r2, [r3, #12]
   18794:	2300      	movs	r3, #0
   18796:	9301      	str	r3, [sp, #4]
   18798:	7cfb      	ldrb	r3, [r7, #19]
   1879a:	9300      	str	r3, [sp, #0]
   1879c:	2300      	movs	r3, #0
   1879e:	4c08      	ldr	r4, [pc, #32]	; (187c0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   187a0:	47a0      	blx	r4
   187a2:	4602      	mov	r2, r0
   187a4:	68fb      	ldr	r3, [r7, #12]
   187a6:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   187a8:	697b      	ldr	r3, [r7, #20]
}
   187aa:	4618      	mov	r0, r3
   187ac:	371c      	adds	r7, #28
   187ae:	46bd      	mov	sp, r7
   187b0:	bd90      	pop	{r4, r7, pc}
   187b2:	bf00      	nop
   187b4:	08000022 	.word	0x08000022
   187b8:	06090030 	.word	0x06090030
   187bc:	2000da88 	.word	0x2000da88
   187c0:	00016201 	.word	0x00016201

000187c4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   187c4:	b590      	push	{r4, r7, lr}
   187c6:	b08b      	sub	sp, #44	; 0x2c
   187c8:	af04      	add	r7, sp, #16
   187ca:	60f8      	str	r0, [r7, #12]
   187cc:	60b9      	str	r1, [r7, #8]
   187ce:	607a      	str	r2, [r7, #4]
   187d0:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   187d2:	2300      	movs	r3, #0
   187d4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   187d6:	68bb      	ldr	r3, [r7, #8]
   187d8:	2b00      	cmp	r3, #0
   187da:	d00e      	beq.n	187fa <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   187dc:	687b      	ldr	r3, [r7, #4]
   187de:	2b00      	cmp	r3, #0
   187e0:	d00b      	beq.n	187fa <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   187e2:	683b      	ldr	r3, [r7, #0]
   187e4:	2b00      	cmp	r3, #0
   187e6:	d008      	beq.n	187fa <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187ea:	2b00      	cmp	r3, #0
   187ec:	d005      	beq.n	187fa <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   187ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   187f0:	2b00      	cmp	r3, #0
   187f2:	d002      	beq.n	187fa <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   187f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   187f6:	2b00      	cmp	r3, #0
   187f8:	d102      	bne.n	18800 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   187fa:	f04f 33ff 	mov.w	r3, #4294967295
   187fe:	e097      	b.n	18930 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
   18800:	68bb      	ldr	r3, [r7, #8]
   18802:	2200      	movs	r2, #0
   18804:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   18806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18808:	f3c3 020a 	ubfx	r2, r3, #0, #11
   1880c:	68bb      	ldr	r3, [r7, #8]
   1880e:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   18810:	68bb      	ldr	r3, [r7, #8]
   18812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18814:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
   18816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18818:	4613      	mov	r3, r2
   1881a:	005b      	lsls	r3, r3, #1
   1881c:	441a      	add	r2, r3
   1881e:	68bb      	ldr	r3, [r7, #8]
   18820:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   18822:	68bb      	ldr	r3, [r7, #8]
   18824:	695a      	ldr	r2, [r3, #20]
   18826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18828:	429a      	cmp	r2, r3
   1882a:	d203      	bcs.n	18834 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
   1882c:	68bb      	ldr	r3, [r7, #8]
   1882e:	f04f 32ff 	mov.w	r2, #4294967295
   18832:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   18834:	68bb      	ldr	r3, [r7, #8]
   18836:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   1883a:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   1883c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   18840:	2b00      	cmp	r3, #0
   18842:	d001      	beq.n	18848 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
   18844:	2301      	movs	r3, #1
   18846:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   18848:	68bb      	ldr	r3, [r7, #8]
   1884a:	2201      	movs	r2, #1
   1884c:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   1884e:	68bb      	ldr	r3, [r7, #8]
   18850:	2200      	movs	r2, #0
   18852:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   18854:	68bb      	ldr	r3, [r7, #8]
   18856:	2200      	movs	r2, #0
   18858:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   1885a:	68bb      	ldr	r3, [r7, #8]
   1885c:	2200      	movs	r2, #0
   1885e:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   18860:	68bb      	ldr	r3, [r7, #8]
   18862:	2200      	movs	r2, #0
   18864:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   18866:	68bb      	ldr	r3, [r7, #8]
   18868:	2200      	movs	r2, #0
   1886a:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   1886c:	68bb      	ldr	r3, [r7, #8]
   1886e:	687a      	ldr	r2, [r7, #4]
   18870:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   18872:	68bb      	ldr	r3, [r7, #8]
   18874:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18876:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   18878:	68bb      	ldr	r3, [r7, #8]
   1887a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1887c:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   1887e:	68bb      	ldr	r3, [r7, #8]
   18880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18882:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   18884:	4b2c      	ldr	r3, [pc, #176]	; (18938 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   18886:	681b      	ldr	r3, [r3, #0]
   18888:	1d18      	adds	r0, r3, #4
   1888a:	2300      	movs	r3, #0
   1888c:	9301      	str	r3, [sp, #4]
   1888e:	2300      	movs	r3, #0
   18890:	9300      	str	r3, [sp, #0]
   18892:	68bb      	ldr	r3, [r7, #8]
   18894:	4a29      	ldr	r2, [pc, #164]	; (1893c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   18896:	f241 0105 	movw	r1, #4101	; 0x1005
   1889a:	4c29      	ldr	r4, [pc, #164]	; (18940 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   1889c:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   1889e:	4b26      	ldr	r3, [pc, #152]	; (18938 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   188a0:	681b      	ldr	r3, [r3, #0]
   188a2:	1d18      	adds	r0, r3, #4
   188a4:	2300      	movs	r3, #0
   188a6:	9301      	str	r3, [sp, #4]
   188a8:	2300      	movs	r3, #0
   188aa:	9300      	str	r3, [sp, #0]
   188ac:	68bb      	ldr	r3, [r7, #8]
   188ae:	4a25      	ldr	r2, [pc, #148]	; (18944 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   188b0:	f241 0106 	movw	r1, #4102	; 0x1006
   188b4:	4c22      	ldr	r4, [pc, #136]	; (18940 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   188b6:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   188b8:	4b1f      	ldr	r3, [pc, #124]	; (18938 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   188ba:	681b      	ldr	r3, [r3, #0]
   188bc:	1d18      	adds	r0, r3, #4
   188be:	2300      	movs	r3, #0
   188c0:	9301      	str	r3, [sp, #4]
   188c2:	2300      	movs	r3, #0
   188c4:	9300      	str	r3, [sp, #0]
   188c6:	68bb      	ldr	r3, [r7, #8]
   188c8:	4a1f      	ldr	r2, [pc, #124]	; (18948 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   188ca:	f241 0119 	movw	r1, #4121	; 0x1019
   188ce:	4c1c      	ldr	r4, [pc, #112]	; (18940 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   188d0:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
   188d2:	4b19      	ldr	r3, [pc, #100]	; (18938 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   188d4:	6818      	ldr	r0, [r3, #0]
   188d6:	68bb      	ldr	r3, [r7, #8]
   188d8:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   188da:	4b1c      	ldr	r3, [pc, #112]	; (1894c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   188dc:	9302      	str	r3, [sp, #8]
   188de:	68bb      	ldr	r3, [r7, #8]
   188e0:	9301      	str	r3, [sp, #4]
   188e2:	2300      	movs	r3, #0
   188e4:	9300      	str	r3, [sp, #0]
   188e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
   188ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   188ec:	4c18      	ldr	r4, [pc, #96]	; (18950 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   188ee:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   188f0:	68bb      	ldr	r3, [r7, #8]
   188f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   188f4:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   188f6:	68bb      	ldr	r3, [r7, #8]
   188f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   188fa:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
   188fc:	4b0e      	ldr	r3, [pc, #56]	; (18938 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   188fe:	6818      	ldr	r0, [r3, #0]
   18900:	68bb      	ldr	r3, [r7, #8]
   18902:	68da      	ldr	r2, [r3, #12]
   18904:	2300      	movs	r3, #0
   18906:	9301      	str	r3, [sp, #4]
   18908:	7dfb      	ldrb	r3, [r7, #23]
   1890a:	9300      	str	r3, [sp, #0]
   1890c:	2300      	movs	r3, #0
   1890e:	6c79      	ldr	r1, [r7, #68]	; 0x44
   18910:	4c10      	ldr	r4, [pc, #64]	; (18954 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   18912:	47a0      	blx	r4
   18914:	4602      	mov	r2, r0
   18916:	68bb      	ldr	r3, [r7, #8]
   18918:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
   1891a:	68bb      	ldr	r3, [r7, #8]
   1891c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1891e:	2210      	movs	r2, #16
   18920:	4619      	mov	r1, r3
   18922:	480d      	ldr	r0, [pc, #52]	; (18958 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   18924:	4b0d      	ldr	r3, [pc, #52]	; (1895c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
   18926:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
   18928:	68fb      	ldr	r3, [r7, #12]
   1892a:	4a0b      	ldr	r2, [pc, #44]	; (18958 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   1892c:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   1892e:	2300      	movs	r3, #0
}
   18930:	4618      	mov	r0, r3
   18932:	371c      	adds	r7, #28
   18934:	46bd      	mov	sp, r7
   18936:	bd90      	pop	{r4, r7, pc}
   18938:	2000da88 	.word	0x2000da88
   1893c:	000185a9 	.word	0x000185a9
   18940:	00018199 	.word	0x00018199
   18944:	000186ad 	.word	0x000186ad
   18948:	0001872d 	.word	0x0001872d
   1894c:	00018515 	.word	0x00018515
   18950:	00016101 	.word	0x00016101
   18954:	00016201 	.word	0x00016201
   18958:	2000dae0 	.word	0x2000dae0
   1895c:	0001b0e1 	.word	0x0001b0e1

00018960 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv>:
    }

    return ret;
}

uint8_t CO_SYNC_Class::Send_SYNC_Signal(void){
   18960:	b580      	push	{r7, lr}
   18962:	b082      	sub	sp, #8
   18964:	af00      	add	r7, sp, #0
   18966:	6078      	str	r0, [r7, #4]
	return 	(uint8_t)canopen_driver->CAN_Send(tx_buffer);
   18968:	4b06      	ldr	r3, [pc, #24]	; (18984 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x24>)
   1896a:	681a      	ldr	r2, [r3, #0]
   1896c:	687b      	ldr	r3, [r7, #4]
   1896e:	681b      	ldr	r3, [r3, #0]
   18970:	4619      	mov	r1, r3
   18972:	4610      	mov	r0, r2
   18974:	4b04      	ldr	r3, [pc, #16]	; (18988 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x28>)
   18976:	4798      	blx	r3
   18978:	4603      	mov	r3, r0
   1897a:	b2db      	uxtb	r3, r3
}
   1897c:	4618      	mov	r0, r3
   1897e:	3708      	adds	r7, #8
   18980:	46bd      	mov	sp, r7
   18982:	bd80      	pop	{r7, pc}
   18984:	2000da88 	.word	0x2000da88
   18988:	000162ad 	.word	0x000162ad

0001898c <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   1898c:	b480      	push	{r7}
   1898e:	b083      	sub	sp, #12
   18990:	af00      	add	r7, sp, #0
   18992:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	4618      	mov	r0, r3
   18998:	370c      	adds	r7, #12
   1899a:	46bd      	mov	sp, r7
   1899c:	bc80      	pop	{r7}
   1899e:	4770      	bx	lr

000189a0 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   189a0:	b480      	push	{r7}
   189a2:	b083      	sub	sp, #12
   189a4:	af00      	add	r7, sp, #0
   189a6:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   189a8:	687b      	ldr	r3, [r7, #4]
   189aa:	4618      	mov	r0, r3
   189ac:	370c      	adds	r7, #12
   189ae:	46bd      	mov	sp, r7
   189b0:	bc80      	pop	{r7}
   189b2:	4770      	bx	lr

000189b4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   189b4:	b580      	push	{r7, lr}
   189b6:	b084      	sub	sp, #16
   189b8:	af00      	add	r7, sp, #0
   189ba:	60f8      	str	r0, [r7, #12]
   189bc:	60b9      	str	r1, [r7, #8]
   189be:	4613      	mov	r3, r2
   189c0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   189c2:	68fb      	ldr	r3, [r7, #12]
   189c4:	2b00      	cmp	r3, #0
   189c6:	d004      	beq.n	189d2 <io_write+0x1e>
   189c8:	68bb      	ldr	r3, [r7, #8]
   189ca:	2b00      	cmp	r3, #0
   189cc:	d001      	beq.n	189d2 <io_write+0x1e>
   189ce:	2301      	movs	r3, #1
   189d0:	e000      	b.n	189d4 <io_write+0x20>
   189d2:	2300      	movs	r3, #0
   189d4:	f003 0301 	and.w	r3, r3, #1
   189d8:	b2db      	uxtb	r3, r3
   189da:	2234      	movs	r2, #52	; 0x34
   189dc:	4907      	ldr	r1, [pc, #28]	; (189fc <io_write+0x48>)
   189de:	4618      	mov	r0, r3
   189e0:	4b07      	ldr	r3, [pc, #28]	; (18a00 <io_write+0x4c>)
   189e2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   189e4:	68fb      	ldr	r3, [r7, #12]
   189e6:	681b      	ldr	r3, [r3, #0]
   189e8:	88fa      	ldrh	r2, [r7, #6]
   189ea:	68b9      	ldr	r1, [r7, #8]
   189ec:	68f8      	ldr	r0, [r7, #12]
   189ee:	4798      	blx	r3
   189f0:	4603      	mov	r3, r0
}
   189f2:	4618      	mov	r0, r3
   189f4:	3710      	adds	r7, #16
   189f6:	46bd      	mov	sp, r7
   189f8:	bd80      	pop	{r7, pc}
   189fa:	bf00      	nop
   189fc:	0001c718 	.word	0x0001c718
   18a00:	00004d25 	.word	0x00004d25

00018a04 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   18a04:	b580      	push	{r7, lr}
   18a06:	b084      	sub	sp, #16
   18a08:	af00      	add	r7, sp, #0
   18a0a:	60f8      	str	r0, [r7, #12]
   18a0c:	60b9      	str	r1, [r7, #8]
   18a0e:	4613      	mov	r3, r2
   18a10:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   18a12:	68fb      	ldr	r3, [r7, #12]
   18a14:	2b00      	cmp	r3, #0
   18a16:	d004      	beq.n	18a22 <io_read+0x1e>
   18a18:	68bb      	ldr	r3, [r7, #8]
   18a1a:	2b00      	cmp	r3, #0
   18a1c:	d001      	beq.n	18a22 <io_read+0x1e>
   18a1e:	2301      	movs	r3, #1
   18a20:	e000      	b.n	18a24 <io_read+0x20>
   18a22:	2300      	movs	r3, #0
   18a24:	f003 0301 	and.w	r3, r3, #1
   18a28:	b2db      	uxtb	r3, r3
   18a2a:	223d      	movs	r2, #61	; 0x3d
   18a2c:	4907      	ldr	r1, [pc, #28]	; (18a4c <io_read+0x48>)
   18a2e:	4618      	mov	r0, r3
   18a30:	4b07      	ldr	r3, [pc, #28]	; (18a50 <io_read+0x4c>)
   18a32:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   18a34:	68fb      	ldr	r3, [r7, #12]
   18a36:	685b      	ldr	r3, [r3, #4]
   18a38:	88fa      	ldrh	r2, [r7, #6]
   18a3a:	68b9      	ldr	r1, [r7, #8]
   18a3c:	68f8      	ldr	r0, [r7, #12]
   18a3e:	4798      	blx	r3
   18a40:	4603      	mov	r3, r0
}
   18a42:	4618      	mov	r0, r3
   18a44:	3710      	adds	r7, #16
   18a46:	46bd      	mov	sp, r7
   18a48:	bd80      	pop	{r7, pc}
   18a4a:	bf00      	nop
   18a4c:	0001c718 	.word	0x0001c718
   18a50:	00004d25 	.word	0x00004d25

00018a54 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
   18a54:	b580      	push	{r7, lr}
   18a56:	b084      	sub	sp, #16
   18a58:	af00      	add	r7, sp, #0
   18a5a:	60f8      	str	r0, [r7, #12]
   18a5c:	60b9      	str	r1, [r7, #8]
   18a5e:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
   18a60:	687a      	ldr	r2, [r7, #4]
   18a62:	68b9      	ldr	r1, [r7, #8]
   18a64:	68f8      	ldr	r0, [r7, #12]
   18a66:	4b03      	ldr	r3, [pc, #12]	; (18a74 <itoa+0x20>)
   18a68:	4798      	blx	r3
   18a6a:	4603      	mov	r3, r0
        }
   18a6c:	4618      	mov	r0, r3
   18a6e:	3710      	adds	r7, #16
   18a70:	46bd      	mov	sp, r7
   18a72:	bd80      	pop	{r7, pc}
   18a74:	00018a79 	.word	0x00018a79

00018a78 <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
   18a78:	b480      	push	{r7}
   18a7a:	b093      	sub	sp, #76	; 0x4c
   18a7c:	af00      	add	r7, sp, #0
   18a7e:	60f8      	str	r0, [r7, #12]
   18a80:	60b9      	str	r1, [r7, #8]
   18a82:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
   18a84:	f107 0310 	add.w	r3, r7, #16
   18a88:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
   18a8a:	68bb      	ldr	r3, [r7, #8]
   18a8c:	2b00      	cmp	r3, #0
   18a8e:	d101      	bne.n	18a94 <ltoa+0x1c>
            {
                return 0;
   18a90:	2300      	movs	r3, #0
   18a92:	e061      	b.n	18b58 <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
   18a94:	687b      	ldr	r3, [r7, #4]
   18a96:	2b24      	cmp	r3, #36	; 0x24
   18a98:	dc02      	bgt.n	18aa0 <ltoa+0x28>
   18a9a:	687b      	ldr	r3, [r7, #4]
   18a9c:	2b01      	cmp	r3, #1
   18a9e:	dc01      	bgt.n	18aa4 <ltoa+0x2c>
            {
                return 0;
   18aa0:	2300      	movs	r3, #0
   18aa2:	e059      	b.n	18b58 <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
   18aa4:	687b      	ldr	r3, [r7, #4]
   18aa6:	2b0a      	cmp	r3, #10
   18aa8:	d104      	bne.n	18ab4 <ltoa+0x3c>
   18aaa:	68fb      	ldr	r3, [r7, #12]
   18aac:	2b00      	cmp	r3, #0
   18aae:	da01      	bge.n	18ab4 <ltoa+0x3c>
   18ab0:	2301      	movs	r3, #1
   18ab2:	e000      	b.n	18ab6 <ltoa+0x3e>
   18ab4:	2300      	movs	r3, #0
   18ab6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
   18ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18aba:	2b00      	cmp	r3, #0
   18abc:	d003      	beq.n	18ac6 <ltoa+0x4e>
            {
                v = -value;
   18abe:	68fb      	ldr	r3, [r7, #12]
   18ac0:	425b      	negs	r3, r3
   18ac2:	643b      	str	r3, [r7, #64]	; 0x40
   18ac4:	e023      	b.n	18b0e <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
   18ac6:	68fb      	ldr	r3, [r7, #12]
   18ac8:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
   18aca:	e020      	b.n	18b0e <ltoa+0x96>
            {
                i = v % radix;
   18acc:	687a      	ldr	r2, [r7, #4]
   18ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18ad0:	fbb3 f1f2 	udiv	r1, r3, r2
   18ad4:	fb02 f201 	mul.w	r2, r2, r1
   18ad8:	1a9b      	subs	r3, r3, r2
   18ada:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
   18adc:	687b      	ldr	r3, [r7, #4]
   18ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18ae0:	fbb2 f3f3 	udiv	r3, r2, r3
   18ae4:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
   18ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18ae8:	2b09      	cmp	r3, #9
   18aea:	dc08      	bgt.n	18afe <ltoa+0x86>
                    *tp++ = i + '0';
   18aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18aee:	1c5a      	adds	r2, r3, #1
   18af0:	647a      	str	r2, [r7, #68]	; 0x44
   18af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18af4:	b2d2      	uxtb	r2, r2
   18af6:	3230      	adds	r2, #48	; 0x30
   18af8:	b2d2      	uxtb	r2, r2
   18afa:	701a      	strb	r2, [r3, #0]
   18afc:	e007      	b.n	18b0e <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
   18afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18b00:	1c5a      	adds	r2, r3, #1
   18b02:	647a      	str	r2, [r7, #68]	; 0x44
   18b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18b06:	b2d2      	uxtb	r2, r2
   18b08:	3257      	adds	r2, #87	; 0x57
   18b0a:	b2d2      	uxtb	r2, r2
   18b0c:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
   18b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18b10:	2b00      	cmp	r3, #0
   18b12:	d1db      	bne.n	18acc <ltoa+0x54>
   18b14:	f107 0310 	add.w	r3, r7, #16
   18b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18b1a:	429a      	cmp	r2, r3
   18b1c:	d0d6      	beq.n	18acc <ltoa+0x54>
            }

            sp = string;
   18b1e:	68bb      	ldr	r3, [r7, #8]
   18b20:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
   18b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18b24:	2b00      	cmp	r3, #0
   18b26:	d00e      	beq.n	18b46 <ltoa+0xce>
                *sp++ = '-';
   18b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18b2a:	1c5a      	adds	r2, r3, #1
   18b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   18b2e:	222d      	movs	r2, #45	; 0x2d
   18b30:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   18b32:	e008      	b.n	18b46 <ltoa+0xce>
                *sp++ = *--tp;
   18b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18b36:	1c5a      	adds	r2, r3, #1
   18b38:	63fa      	str	r2, [r7, #60]	; 0x3c
   18b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18b3c:	3a01      	subs	r2, #1
   18b3e:	647a      	str	r2, [r7, #68]	; 0x44
   18b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18b42:	7812      	ldrb	r2, [r2, #0]
   18b44:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   18b46:	f107 0310 	add.w	r3, r7, #16
   18b4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18b4c:	429a      	cmp	r2, r3
   18b4e:	d8f1      	bhi.n	18b34 <ltoa+0xbc>
            *sp = 0;
   18b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18b52:	2200      	movs	r2, #0
   18b54:	701a      	strb	r2, [r3, #0]

            return string;
   18b56:	68bb      	ldr	r3, [r7, #8]
        }
   18b58:	4618      	mov	r0, r3
   18b5a:	374c      	adds	r7, #76	; 0x4c
   18b5c:	46bd      	mov	sp, r7
   18b5e:	bc80      	pop	{r7}
   18b60:	4770      	bx	lr
	...

00018b64 <utoa>:

        extern char* utoa(unsigned value, char*string, int radix)
        {
   18b64:	b580      	push	{r7, lr}
   18b66:	b084      	sub	sp, #16
   18b68:	af00      	add	r7, sp, #0
   18b6a:	60f8      	str	r0, [r7, #12]
   18b6c:	60b9      	str	r1, [r7, #8]
   18b6e:	607a      	str	r2, [r7, #4]
            return ultoa(value, string, radix);
   18b70:	687a      	ldr	r2, [r7, #4]
   18b72:	68b9      	ldr	r1, [r7, #8]
   18b74:	68f8      	ldr	r0, [r7, #12]
   18b76:	4b03      	ldr	r3, [pc, #12]	; (18b84 <utoa+0x20>)
   18b78:	4798      	blx	r3
   18b7a:	4603      	mov	r3, r0
        }
   18b7c:	4618      	mov	r0, r3
   18b7e:	3710      	adds	r7, #16
   18b80:	46bd      	mov	sp, r7
   18b82:	bd80      	pop	{r7, pc}
   18b84:	00018b89 	.word	0x00018b89

00018b88 <ultoa>:

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
   18b88:	b480      	push	{r7}
   18b8a:	b093      	sub	sp, #76	; 0x4c
   18b8c:	af00      	add	r7, sp, #0
   18b8e:	60f8      	str	r0, [r7, #12]
   18b90:	60b9      	str	r1, [r7, #8]
   18b92:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
   18b94:	f107 0314 	add.w	r3, r7, #20
   18b98:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v = value;
   18b9a:	68fb      	ldr	r3, [r7, #12]
   18b9c:	643b      	str	r3, [r7, #64]	; 0x40
            char* sp;

            if (string == NULL)
   18b9e:	68bb      	ldr	r3, [r7, #8]
   18ba0:	2b00      	cmp	r3, #0
   18ba2:	d101      	bne.n	18ba8 <ultoa+0x20>
            {
                return 0;
   18ba4:	2300      	movs	r3, #0
   18ba6:	e046      	b.n	18c36 <ultoa+0xae>
            }

            if (radix > 36 || radix <= 1)
   18ba8:	687b      	ldr	r3, [r7, #4]
   18baa:	2b24      	cmp	r3, #36	; 0x24
   18bac:	dc02      	bgt.n	18bb4 <ultoa+0x2c>
   18bae:	687b      	ldr	r3, [r7, #4]
   18bb0:	2b01      	cmp	r3, #1
   18bb2:	dc22      	bgt.n	18bfa <ultoa+0x72>
            {
                return 0;
   18bb4:	2300      	movs	r3, #0
   18bb6:	e03e      	b.n	18c36 <ultoa+0xae>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
   18bb8:	687a      	ldr	r2, [r7, #4]
   18bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18bbc:	fbb3 f1f2 	udiv	r1, r3, r2
   18bc0:	fb02 f201 	mul.w	r2, r2, r1
   18bc4:	1a9b      	subs	r3, r3, r2
   18bc6:	63bb      	str	r3, [r7, #56]	; 0x38
                v = v / radix;
   18bc8:	687b      	ldr	r3, [r7, #4]
   18bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18bcc:	fbb2 f3f3 	udiv	r3, r2, r3
   18bd0:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
   18bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18bd4:	2b09      	cmp	r3, #9
   18bd6:	dc08      	bgt.n	18bea <ultoa+0x62>
                    *tp++ = i + '0';
   18bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18bda:	1c5a      	adds	r2, r3, #1
   18bdc:	647a      	str	r2, [r7, #68]	; 0x44
   18bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18be0:	b2d2      	uxtb	r2, r2
   18be2:	3230      	adds	r2, #48	; 0x30
   18be4:	b2d2      	uxtb	r2, r2
   18be6:	701a      	strb	r2, [r3, #0]
   18be8:	e007      	b.n	18bfa <ultoa+0x72>
                else
                    *tp++ = i + 'a' - 10;
   18bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18bec:	1c5a      	adds	r2, r3, #1
   18bee:	647a      	str	r2, [r7, #68]	; 0x44
   18bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18bf2:	b2d2      	uxtb	r2, r2
   18bf4:	3257      	adds	r2, #87	; 0x57
   18bf6:	b2d2      	uxtb	r2, r2
   18bf8:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
   18bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18bfc:	2b00      	cmp	r3, #0
   18bfe:	d1db      	bne.n	18bb8 <ultoa+0x30>
   18c00:	f107 0314 	add.w	r3, r7, #20
   18c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18c06:	429a      	cmp	r2, r3
   18c08:	d0d6      	beq.n	18bb8 <ultoa+0x30>
            }

            sp = string;
   18c0a:	68bb      	ldr	r3, [r7, #8]
   18c0c:	63fb      	str	r3, [r7, #60]	; 0x3c


            while (tp > &tmp[0]){
   18c0e:	e009      	b.n	18c24 <ultoa+0x9c>
                *sp++ = *--tp;
   18c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18c12:	1c5a      	adds	r2, r3, #1
   18c14:	63fa      	str	r2, [r7, #60]	; 0x3c
   18c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18c18:	3a01      	subs	r2, #1
   18c1a:	647a      	str	r2, [r7, #68]	; 0x44
   18c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18c1e:	7812      	ldrb	r2, [r2, #0]
   18c20:	701a      	strb	r2, [r3, #0]
				asm("nop");
   18c22:	bf00      	nop
            while (tp > &tmp[0]){
   18c24:	f107 0314 	add.w	r3, r7, #20
   18c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18c2a:	429a      	cmp	r2, r3
   18c2c:	d8f0      	bhi.n	18c10 <ultoa+0x88>
			}
            *sp = 0;
   18c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18c30:	2200      	movs	r2, #0
   18c32:	701a      	strb	r2, [r3, #0]

            return string;
   18c34:	68bb      	ldr	r3, [r7, #8]
        }
   18c36:	4618      	mov	r0, r3
   18c38:	374c      	adds	r7, #76	; 0x4c
   18c3a:	46bd      	mov	sp, r7
   18c3c:	bc80      	pop	{r7}
   18c3e:	4770      	bx	lr

00018c40 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   18c40:	b480      	push	{r7}
   18c42:	b083      	sub	sp, #12
   18c44:	af00      	add	r7, sp, #0
   18c46:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   18c48:	687b      	ldr	r3, [r7, #4]
   18c4a:	4618      	mov	r0, r3
   18c4c:	370c      	adds	r7, #12
   18c4e:	46bd      	mov	sp, r7
   18c50:	bc80      	pop	{r7}
   18c52:	4770      	bx	lr

00018c54 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   18c54:	b480      	push	{r7}
   18c56:	b083      	sub	sp, #12
   18c58:	af00      	add	r7, sp, #0
   18c5a:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   18c5c:	687b      	ldr	r3, [r7, #4]
   18c5e:	4618      	mov	r0, r3
   18c60:	370c      	adds	r7, #12
   18c62:	46bd      	mov	sp, r7
   18c64:	bc80      	pop	{r7}
   18c66:	4770      	bx	lr

00018c68 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   18c68:	b480      	push	{r7}
   18c6a:	b085      	sub	sp, #20
   18c6c:	af00      	add	r7, sp, #0
   18c6e:	6078      	str	r0, [r7, #4]
   18c70:	460b      	mov	r3, r1
   18c72:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   18c74:	2300      	movs	r3, #0
   18c76:	73fb      	strb	r3, [r7, #15]
   18c78:	7bfb      	ldrb	r3, [r7, #15]
   18c7a:	2b01      	cmp	r3, #1
   18c7c:	dc13      	bgt.n	18ca6 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   18c7e:	7bfb      	ldrb	r3, [r7, #15]
   18c80:	78f9      	ldrb	r1, [r7, #3]
   18c82:	7bfa      	ldrb	r2, [r7, #15]
   18c84:	2080      	movs	r0, #128	; 0x80
   18c86:	fa40 f202 	asr.w	r2, r0, r2
   18c8a:	400a      	ands	r2, r1
   18c8c:	2a00      	cmp	r2, #0
   18c8e:	bfcc      	ite	gt
   18c90:	2201      	movgt	r2, #1
   18c92:	2200      	movle	r2, #0
   18c94:	b2d1      	uxtb	r1, r2
   18c96:	687a      	ldr	r2, [r7, #4]
   18c98:	4413      	add	r3, r2
   18c9a:	460a      	mov	r2, r1
   18c9c:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 2; ii++)
   18c9e:	7bfb      	ldrb	r3, [r7, #15]
   18ca0:	3301      	adds	r3, #1
   18ca2:	73fb      	strb	r3, [r7, #15]
   18ca4:	e7e8      	b.n	18c78 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   18ca6:	bf00      	nop
   18ca8:	3714      	adds	r7, #20
   18caa:	46bd      	mov	sp, r7
   18cac:	bc80      	pop	{r7}
   18cae:	4770      	bx	lr

00018cb0 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   18cb0:	b480      	push	{r7}
   18cb2:	b085      	sub	sp, #20
   18cb4:	af00      	add	r7, sp, #0
   18cb6:	6078      	str	r0, [r7, #4]
   18cb8:	460b      	mov	r3, r1
   18cba:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   18cbc:	2300      	movs	r3, #0
   18cbe:	73fb      	strb	r3, [r7, #15]
   18cc0:	7bfb      	ldrb	r3, [r7, #15]
   18cc2:	2b02      	cmp	r3, #2
   18cc4:	dc15      	bgt.n	18cf2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   18cc6:	7bfb      	ldrb	r3, [r7, #15]
   18cc8:	f1c3 0302 	rsb	r3, r3, #2
   18ccc:	78f9      	ldrb	r1, [r7, #3]
   18cce:	7bfa      	ldrb	r2, [r7, #15]
   18cd0:	2020      	movs	r0, #32
   18cd2:	fa40 f202 	asr.w	r2, r0, r2
   18cd6:	400a      	ands	r2, r1
   18cd8:	2a00      	cmp	r2, #0
   18cda:	bfcc      	ite	gt
   18cdc:	2201      	movgt	r2, #1
   18cde:	2200      	movle	r2, #0
   18ce0:	b2d1      	uxtb	r1, r2
   18ce2:	687a      	ldr	r2, [r7, #4]
   18ce4:	4413      	add	r3, r2
   18ce6:	460a      	mov	r2, r1
   18ce8:	765a      	strb	r2, [r3, #25]
	for (uint8_t ii = 0; ii < 3; ii++)
   18cea:	7bfb      	ldrb	r3, [r7, #15]
   18cec:	3301      	adds	r3, #1
   18cee:	73fb      	strb	r3, [r7, #15]
   18cf0:	e7e6      	b.n	18cc0 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   18cf2:	bf00      	nop
   18cf4:	3714      	adds	r7, #20
   18cf6:	46bd      	mov	sp, r7
   18cf8:	bc80      	pop	{r7}
   18cfa:	4770      	bx	lr

00018cfc <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   18cfc:	b580      	push	{r7, lr}
   18cfe:	b084      	sub	sp, #16
   18d00:	af00      	add	r7, sp, #0
   18d02:	60f8      	str	r0, [r7, #12]
   18d04:	60b9      	str	r1, [r7, #8]
   18d06:	4613      	mov	r3, r2
   18d08:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   18d0a:	79fb      	ldrb	r3, [r7, #7]
   18d0c:	4619      	mov	r1, r3
   18d0e:	68b8      	ldr	r0, [r7, #8]
   18d10:	4b0d      	ldr	r3, [pc, #52]	; (18d48 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   18d12:	4798      	blx	r3
	FillLimitSwitch(v);
   18d14:	79fb      	ldrb	r3, [r7, #7]
   18d16:	4619      	mov	r1, r3
   18d18:	68b8      	ldr	r0, [r7, #8]
   18d1a:	4b0c      	ldr	r3, [pc, #48]	; (18d4c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   18d1c:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   18d1e:	79fb      	ldrb	r3, [r7, #7]
   18d20:	f003 0301 	and.w	r3, r3, #1
   18d24:	2b00      	cmp	r3, #0
   18d26:	bfcc      	ite	gt
   18d28:	2301      	movgt	r3, #1
   18d2a:	2300      	movle	r3, #0
   18d2c:	b2da      	uxtb	r2, r3
   18d2e:	68bb      	ldr	r3, [r7, #8]
   18d30:	771a      	strb	r2, [r3, #28]
	return controlStatus;
   18d32:	68fa      	ldr	r2, [r7, #12]
   18d34:	68bb      	ldr	r3, [r7, #8]
   18d36:	3317      	adds	r3, #23
   18d38:	6819      	ldr	r1, [r3, #0]
   18d3a:	6011      	str	r1, [r2, #0]
   18d3c:	889b      	ldrh	r3, [r3, #4]
   18d3e:	8093      	strh	r3, [r2, #4]
}
   18d40:	68f8      	ldr	r0, [r7, #12]
   18d42:	3710      	adds	r7, #16
   18d44:	46bd      	mov	sp, r7
   18d46:	bd80      	pop	{r7, pc}
   18d48:	00018c69 	.word	0x00018c69
   18d4c:	00018cb1 	.word	0x00018cb1

00018d50 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   18d50:	b480      	push	{r7}
   18d52:	b085      	sub	sp, #20
   18d54:	af00      	add	r7, sp, #0
   18d56:	60f8      	str	r0, [r7, #12]
   18d58:	60b9      	str	r1, [r7, #8]
   18d5a:	4613      	mov	r3, r2
   18d5c:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   18d5e:	79fb      	ldrb	r3, [r7, #7]
   18d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
   18d64:	2b00      	cmp	r3, #0
   18d66:	bfcc      	ite	gt
   18d68:	2301      	movgt	r3, #1
   18d6a:	2300      	movle	r3, #0
   18d6c:	b2da      	uxtb	r2, r3
   18d6e:	68bb      	ldr	r3, [r7, #8]
   18d70:	775a      	strb	r2, [r3, #29]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   18d72:	79fb      	ldrb	r3, [r7, #7]
   18d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
   18d78:	2b00      	cmp	r3, #0
   18d7a:	bfcc      	ite	gt
   18d7c:	2301      	movgt	r3, #1
   18d7e:	2300      	movle	r3, #0
   18d80:	b2da      	uxtb	r2, r3
   18d82:	68bb      	ldr	r3, [r7, #8]
   18d84:	779a      	strb	r2, [r3, #30]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   18d86:	79fb      	ldrb	r3, [r7, #7]
   18d88:	f003 0320 	and.w	r3, r3, #32
   18d8c:	2b00      	cmp	r3, #0
   18d8e:	bfcc      	ite	gt
   18d90:	2301      	movgt	r3, #1
   18d92:	2300      	movle	r3, #0
   18d94:	b2da      	uxtb	r2, r3
   18d96:	68bb      	ldr	r3, [r7, #8]
   18d98:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   18d9c:	79fb      	ldrb	r3, [r7, #7]
   18d9e:	f003 0310 	and.w	r3, r3, #16
   18da2:	2b00      	cmp	r3, #0
   18da4:	bfcc      	ite	gt
   18da6:	2301      	movgt	r3, #1
   18da8:	2300      	movle	r3, #0
   18daa:	b2da      	uxtb	r2, r3
   18dac:	68bb      	ldr	r3, [r7, #8]
   18dae:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   18db0:	79fb      	ldrb	r3, [r7, #7]
   18db2:	f003 0308 	and.w	r3, r3, #8
   18db6:	2b00      	cmp	r3, #0
   18db8:	bfcc      	ite	gt
   18dba:	2301      	movgt	r3, #1
   18dbc:	2300      	movle	r3, #0
   18dbe:	b2da      	uxtb	r2, r3
   18dc0:	68bb      	ldr	r3, [r7, #8]
   18dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   18dc6:	79fb      	ldrb	r3, [r7, #7]
   18dc8:	f003 0304 	and.w	r3, r3, #4
   18dcc:	2b00      	cmp	r3, #0
   18dce:	bfcc      	ite	gt
   18dd0:	2301      	movgt	r3, #1
   18dd2:	2300      	movle	r3, #0
   18dd4:	b2da      	uxtb	r2, r3
   18dd6:	68bb      	ldr	r3, [r7, #8]
   18dd8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   18ddc:	79fb      	ldrb	r3, [r7, #7]
   18dde:	f003 0302 	and.w	r3, r3, #2
   18de2:	2b00      	cmp	r3, #0
   18de4:	bfcc      	ite	gt
   18de6:	2301      	movgt	r3, #1
   18de8:	2300      	movle	r3, #0
   18dea:	b2da      	uxtb	r2, r3
   18dec:	68bb      	ldr	r3, [r7, #8]
   18dee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   18df2:	79fb      	ldrb	r3, [r7, #7]
   18df4:	f003 0301 	and.w	r3, r3, #1
   18df8:	2b00      	cmp	r3, #0
   18dfa:	bfcc      	ite	gt
   18dfc:	2301      	movgt	r3, #1
   18dfe:	2300      	movle	r3, #0
   18e00:	b2da      	uxtb	r2, r3
   18e02:	68bb      	ldr	r3, [r7, #8]
   18e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return controlOutputs;
   18e08:	68fa      	ldr	r2, [r7, #12]
   18e0a:	68bb      	ldr	r3, [r7, #8]
   18e0c:	331d      	adds	r3, #29
   18e0e:	6819      	ldr	r1, [r3, #0]
   18e10:	685b      	ldr	r3, [r3, #4]
   18e12:	6011      	str	r1, [r2, #0]
   18e14:	6053      	str	r3, [r2, #4]
   18e16:	68f8      	ldr	r0, [r7, #12]
   18e18:	3714      	adds	r7, #20
   18e1a:	46bd      	mov	sp, r7
   18e1c:	bc80      	pop	{r7}
   18e1e:	4770      	bx	lr

00018e20 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   18e20:	b480      	push	{r7}
   18e22:	b083      	sub	sp, #12
   18e24:	af00      	add	r7, sp, #0
   18e26:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   18e28:	4b04      	ldr	r3, [pc, #16]	; (18e3c <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   18e2a:	681b      	ldr	r3, [r3, #0]
   18e2c:	2201      	movs	r2, #1
   18e2e:	709a      	strb	r2, [r3, #2]
	asm("nop");
   18e30:	bf00      	nop
}
   18e32:	bf00      	nop
   18e34:	370c      	adds	r7, #12
   18e36:	46bd      	mov	sp, r7
   18e38:	bc80      	pop	{r7}
   18e3a:	4770      	bx	lr
   18e3c:	2000dbf0 	.word	0x2000dbf0

00018e40 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   18e40:	b480      	push	{r7}
   18e42:	b083      	sub	sp, #12
   18e44:	af00      	add	r7, sp, #0
   18e46:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   18e48:	687b      	ldr	r3, [r7, #4]
   18e4a:	4618      	mov	r0, r3
   18e4c:	370c      	adds	r7, #12
   18e4e:	46bd      	mov	sp, r7
   18e50:	bc80      	pop	{r7}
   18e52:	4770      	bx	lr

00018e54 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   18e54:	b480      	push	{r7}
   18e56:	b083      	sub	sp, #12
   18e58:	af00      	add	r7, sp, #0
   18e5a:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   18e5c:	687b      	ldr	r3, [r7, #4]
   18e5e:	4618      	mov	r0, r3
   18e60:	370c      	adds	r7, #12
   18e62:	46bd      	mov	sp, r7
   18e64:	bc80      	pop	{r7}
   18e66:	4770      	bx	lr

00018e68 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   18e68:	b580      	push	{r7, lr}
   18e6a:	b084      	sub	sp, #16
   18e6c:	af00      	add	r7, sp, #0
   18e6e:	60f8      	str	r0, [r7, #12]
   18e70:	60b9      	str	r1, [r7, #8]
   18e72:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   18e74:	4a1c      	ldr	r2, [pc, #112]	; (18ee8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   18e76:	68fb      	ldr	r3, [r7, #12]
   18e78:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   18e7a:	68fb      	ldr	r3, [r7, #12]
   18e7c:	68ba      	ldr	r2, [r7, #8]
   18e7e:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   18e80:	68fb      	ldr	r3, [r7, #12]
   18e82:	687a      	ldr	r2, [r7, #4]
   18e84:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   18e86:	68fb      	ldr	r3, [r7, #12]
   18e88:	6a1b      	ldr	r3, [r3, #32]
   18e8a:	68da      	ldr	r2, [r3, #12]
   18e8c:	68fb      	ldr	r3, [r7, #12]
   18e8e:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   18e90:	68fb      	ldr	r3, [r7, #12]
   18e92:	6a1b      	ldr	r3, [r3, #32]
   18e94:	689a      	ldr	r2, [r3, #8]
   18e96:	68fb      	ldr	r3, [r7, #12]
   18e98:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   18e9a:	68fb      	ldr	r3, [r7, #12]
   18e9c:	4a13      	ldr	r2, [pc, #76]	; (18eec <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   18e9e:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   18ea0:	68fb      	ldr	r3, [r7, #12]
   18ea2:	2204      	movs	r2, #4
   18ea4:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   18ea6:	68fb      	ldr	r3, [r7, #12]
   18ea8:	2209      	movs	r2, #9
   18eaa:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   18eac:	68fb      	ldr	r3, [r7, #12]
   18eae:	220e      	movs	r2, #14
   18eb0:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   18eb2:	68fb      	ldr	r3, [r7, #12]
   18eb4:	2213      	movs	r2, #19
   18eb6:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   18eb8:	20c8      	movs	r0, #200	; 0xc8
   18eba:	4b0d      	ldr	r3, [pc, #52]	; (18ef0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   18ebc:	4798      	blx	r3
	temperatureTimer.Init();
   18ebe:	480d      	ldr	r0, [pc, #52]	; (18ef4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18ec0:	4b0d      	ldr	r3, [pc, #52]	; (18ef8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   18ec2:	4798      	blx	r3
	configure_channels();
   18ec4:	68f8      	ldr	r0, [r7, #12]
   18ec6:	4b0d      	ldr	r3, [pc, #52]	; (18efc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   18ec8:	4798      	blx	r3
	configure_global_parameters();
   18eca:	68f8      	ldr	r0, [r7, #12]
   18ecc:	4b0c      	ldr	r3, [pc, #48]	; (18f00 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   18ece:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   18ed0:	68fb      	ldr	r3, [r7, #12]
   18ed2:	2201      	movs	r2, #1
   18ed4:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   18ed6:	68f8      	ldr	r0, [r7, #12]
   18ed8:	4b0a      	ldr	r3, [pc, #40]	; (18f04 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   18eda:	4798      	blx	r3
   18edc:	4603      	mov	r3, r0
}
   18ede:	4618      	mov	r0, r3
   18ee0:	3710      	adds	r7, #16
   18ee2:	46bd      	mov	sp, r7
   18ee4:	bd80      	pop	{r7, pc}
   18ee6:	bf00      	nop
   18ee8:	2000dbf0 	.word	0x2000dbf0
   18eec:	2000db30 	.word	0x2000db30
   18ef0:	000036c9 	.word	0x000036c9
   18ef4:	2000daf0 	.word	0x2000daf0
   18ef8:	000105d1 	.word	0x000105d1
   18efc:	00019311 	.word	0x00019311
   18f00:	000193c9 	.word	0x000193c9
   18f04:	00019401 	.word	0x00019401

00018f08 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   18f08:	b590      	push	{r4, r7, lr}
   18f0a:	b089      	sub	sp, #36	; 0x24
   18f0c:	af02      	add	r7, sp, #8
   18f0e:	60f8      	str	r0, [r7, #12]
   18f10:	60b9      	str	r1, [r7, #8]
   18f12:	603b      	str	r3, [r7, #0]
   18f14:	4613      	mov	r3, r2
   18f16:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   18f18:	79fb      	ldrb	r3, [r7, #7]
   18f1a:	461a      	mov	r2, r3
   18f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
   18f20:	68f8      	ldr	r0, [r7, #12]
   18f22:	4b0b      	ldr	r3, [pc, #44]	; (18f50 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   18f24:	4798      	blx	r3
   18f26:	4603      	mov	r3, r0
   18f28:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   18f2a:	8afa      	ldrh	r2, [r7, #22]
   18f2c:	683b      	ldr	r3, [r7, #0]
   18f2e:	9300      	str	r3, [sp, #0]
   18f30:	4613      	mov	r3, r2
   18f32:	2202      	movs	r2, #2
   18f34:	68b9      	ldr	r1, [r7, #8]
   18f36:	68f8      	ldr	r0, [r7, #12]
   18f38:	4c06      	ldr	r4, [pc, #24]	; (18f54 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   18f3a:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   18f3c:	8afb      	ldrh	r3, [r7, #22]
   18f3e:	79fa      	ldrb	r2, [r7, #7]
   18f40:	68b9      	ldr	r1, [r7, #8]
   18f42:	68f8      	ldr	r0, [r7, #12]
   18f44:	4c04      	ldr	r4, [pc, #16]	; (18f58 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   18f46:	47a0      	blx	r4
}
   18f48:	bf00      	nop
   18f4a:	371c      	adds	r7, #28
   18f4c:	46bd      	mov	sp, r7
   18f4e:	bd90      	pop	{r4, r7, pc}
   18f50:	000192e5 	.word	0x000192e5
   18f54:	000191a5 	.word	0x000191a5
   18f58:	00018fa9 	.word	0x00018fa9

00018f5c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   18f5c:	b590      	push	{r4, r7, lr}
   18f5e:	b087      	sub	sp, #28
   18f60:	af02      	add	r7, sp, #8
   18f62:	6078      	str	r0, [r7, #4]
   18f64:	460b      	mov	r3, r1
   18f66:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   18f68:	78fb      	ldrb	r3, [r7, #3]
   18f6a:	687a      	ldr	r2, [r7, #4]
   18f6c:	4413      	add	r3, r2
   18f6e:	78db      	ldrb	r3, [r3, #3]
   18f70:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   18f72:	687b      	ldr	r3, [r7, #4]
   18f74:	2200      	movs	r2, #0
   18f76:	705a      	strb	r2, [r3, #1]
	ready=false;
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	2200      	movs	r2, #0
   18f7c:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   18f7e:	687b      	ldr	r3, [r7, #4]
   18f80:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18f82:	7bfb      	ldrb	r3, [r7, #15]
   18f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18f88:	b2db      	uxtb	r3, r3
   18f8a:	9300      	str	r3, [sp, #0]
   18f8c:	2300      	movs	r3, #0
   18f8e:	2202      	movs	r2, #2
   18f90:	6878      	ldr	r0, [r7, #4]
   18f92:	4c04      	ldr	r4, [pc, #16]	; (18fa4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   18f94:	47a0      	blx	r4
	channelOnProcess=channel_number;
   18f96:	687b      	ldr	r3, [r7, #4]
   18f98:	7bfa      	ldrb	r2, [r7, #15]
   18f9a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   18f9c:	bf00      	nop
   18f9e:	3714      	adds	r7, #20
   18fa0:	46bd      	mov	sp, r7
   18fa2:	bd90      	pop	{r4, r7, pc}
   18fa4:	00019275 	.word	0x00019275

00018fa8 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   18fa8:	b590      	push	{r4, r7, lr}
   18faa:	b089      	sub	sp, #36	; 0x24
   18fac:	af02      	add	r7, sp, #8
   18fae:	60f8      	str	r0, [r7, #12]
   18fb0:	60b9      	str	r1, [r7, #8]
   18fb2:	4611      	mov	r1, r2
   18fb4:	461a      	mov	r2, r3
   18fb6:	460b      	mov	r3, r1
   18fb8:	71fb      	strb	r3, [r7, #7]
   18fba:	4613      	mov	r3, r2
   18fbc:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   18fbe:	88ba      	ldrh	r2, [r7, #4]
   18fc0:	2300      	movs	r3, #0
   18fc2:	9300      	str	r3, [sp, #0]
   18fc4:	4613      	mov	r3, r2
   18fc6:	2203      	movs	r2, #3
   18fc8:	68b9      	ldr	r1, [r7, #8]
   18fca:	68f8      	ldr	r0, [r7, #12]
   18fcc:	4c03      	ldr	r4, [pc, #12]	; (18fdc <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   18fce:	47a0      	blx	r4
   18fd0:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   18fd2:	bf00      	nop
   18fd4:	371c      	adds	r7, #28
   18fd6:	46bd      	mov	sp, r7
   18fd8:	bd90      	pop	{r4, r7, pc}
   18fda:	bf00      	nop
   18fdc:	000191a5 	.word	0x000191a5

00018fe0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   18fe0:	b590      	push	{r4, r7, lr}
   18fe2:	b085      	sub	sp, #20
   18fe4:	af02      	add	r7, sp, #8
   18fe6:	6078      	str	r0, [r7, #4]
   18fe8:	460b      	mov	r3, r1
   18fea:	70fb      	strb	r3, [r7, #3]
   18fec:	4613      	mov	r3, r2
   18fee:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   18ff0:	78fb      	ldrb	r3, [r7, #3]
   18ff2:	461a      	mov	r2, r3
   18ff4:	2110      	movs	r1, #16
   18ff6:	6878      	ldr	r0, [r7, #4]
   18ff8:	4b17      	ldr	r3, [pc, #92]	; (19058 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   18ffa:	4798      	blx	r3
   18ffc:	4603      	mov	r3, r0
   18ffe:	461a      	mov	r2, r3
   19000:	687b      	ldr	r3, [r7, #4]
   19002:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   19006:	687b      	ldr	r3, [r7, #4]
   19008:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1900a:	687b      	ldr	r3, [r7, #4]
   1900c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   19010:	2300      	movs	r3, #0
   19012:	9300      	str	r3, [sp, #0]
   19014:	4613      	mov	r3, r2
   19016:	2203      	movs	r2, #3
   19018:	6878      	ldr	r0, [r7, #4]
   1901a:	4c10      	ldr	r4, [pc, #64]	; (1905c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   1901c:	47a0      	blx	r4
   1901e:	4602      	mov	r2, r0
   19020:	687b      	ldr	r3, [r7, #4]
   19022:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   19024:	687b      	ldr	r3, [r7, #4]
   19026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19028:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1902c:	687b      	ldr	r3, [r7, #4]
   1902e:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   19030:	687b      	ldr	r3, [r7, #4]
   19032:	6d19      	ldr	r1, [r3, #80]	; 0x50
   19034:	78bb      	ldrb	r3, [r7, #2]
   19036:	78fa      	ldrb	r2, [r7, #3]
   19038:	6878      	ldr	r0, [r7, #4]
   1903a:	4c09      	ldr	r4, [pc, #36]	; (19060 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   1903c:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   1903e:	687b      	ldr	r3, [r7, #4]
   19040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19042:	0e1b      	lsrs	r3, r3, #24
   19044:	b2da      	uxtb	r2, r3
   19046:	687b      	ldr	r3, [r7, #4]
   19048:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   1904a:	687b      	ldr	r3, [r7, #4]
   1904c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   1904e:	4618      	mov	r0, r3
   19050:	370c      	adds	r7, #12
   19052:	46bd      	mov	sp, r7
   19054:	bd90      	pop	{r4, r7, pc}
   19056:	bf00      	nop
   19058:	000192e5 	.word	0x000192e5
   1905c:	000191a5 	.word	0x000191a5
   19060:	000190b9 	.word	0x000190b9

00019064 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   19064:	b580      	push	{r7, lr}
   19066:	b082      	sub	sp, #8
   19068:	af00      	add	r7, sp, #0
   1906a:	6078      	str	r0, [r7, #4]
   1906c:	460b      	mov	r3, r1
   1906e:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   19070:	78fb      	ldrb	r3, [r7, #3]
   19072:	687a      	ldr	r2, [r7, #4]
   19074:	4413      	add	r3, r2
   19076:	78db      	ldrb	r3, [r3, #3]
   19078:	4619      	mov	r1, r3
   1907a:	6878      	ldr	r0, [r7, #4]
   1907c:	4b03      	ldr	r3, [pc, #12]	; (1908c <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   1907e:	4798      	blx	r3
   19080:	4603      	mov	r3, r0
}
   19082:	4618      	mov	r0, r3
   19084:	3708      	adds	r7, #8
   19086:	46bd      	mov	sp, r7
   19088:	bd80      	pop	{r7, pc}
   1908a:	bf00      	nop
   1908c:	00019091 	.word	0x00019091

00019090 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   19090:	b580      	push	{r7, lr}
   19092:	b082      	sub	sp, #8
   19094:	af00      	add	r7, sp, #0
   19096:	6078      	str	r0, [r7, #4]
   19098:	460b      	mov	r3, r1
   1909a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   1909c:	78fb      	ldrb	r3, [r7, #3]
   1909e:	2202      	movs	r2, #2
   190a0:	4619      	mov	r1, r3
   190a2:	6878      	ldr	r0, [r7, #4]
   190a4:	4b03      	ldr	r3, [pc, #12]	; (190b4 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   190a6:	4798      	blx	r3
   190a8:	4603      	mov	r3, r0
}
   190aa:	4618      	mov	r0, r3
   190ac:	3708      	adds	r7, #8
   190ae:	46bd      	mov	sp, r7
   190b0:	bd80      	pop	{r7, pc}
   190b2:	bf00      	nop
   190b4:	00018fe1 	.word	0x00018fe1

000190b8 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   190b8:	b580      	push	{r7, lr}
   190ba:	b084      	sub	sp, #16
   190bc:	af00      	add	r7, sp, #0
   190be:	60f8      	str	r0, [r7, #12]
   190c0:	60b9      	str	r1, [r7, #8]
   190c2:	4611      	mov	r1, r2
   190c4:	461a      	mov	r2, r3
   190c6:	460b      	mov	r3, r1
   190c8:	71fb      	strb	r3, [r7, #7]
   190ca:	4613      	mov	r3, r2
   190cc:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   190ce:	68ba      	ldr	r2, [r7, #8]
   190d0:	68fb      	ldr	r3, [r7, #12]
   190d2:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   190d4:	68fb      	ldr	r3, [r7, #12]
   190d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   190d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   190dc:	2b00      	cmp	r3, #0
   190de:	d006      	beq.n	190ee <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   190e0:	68fb      	ldr	r3, [r7, #12]
   190e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   190e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   190e8:	461a      	mov	r2, r3
   190ea:	68fb      	ldr	r3, [r7, #12]
   190ec:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   190ee:	79bb      	ldrb	r3, [r7, #6]
   190f0:	2b02      	cmp	r3, #2
   190f2:	d11d      	bne.n	19130 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   190f4:	68fb      	ldr	r3, [r7, #12]
   190f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   190f8:	4b18      	ldr	r3, [pc, #96]	; (1915c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   190fa:	4610      	mov	r0, r2
   190fc:	4798      	blx	r3
   190fe:	4602      	mov	r2, r0
   19100:	4b17      	ldr	r3, [pc, #92]	; (19160 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   19102:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   19106:	4610      	mov	r0, r2
   19108:	4798      	blx	r3
   1910a:	4603      	mov	r3, r0
   1910c:	461a      	mov	r2, r3
   1910e:	68fb      	ldr	r3, [r7, #12]
   19110:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   19112:	79fb      	ldrb	r3, [r7, #7]
   19114:	4619      	mov	r1, r3
   19116:	68f8      	ldr	r0, [r7, #12]
   19118:	4b12      	ldr	r3, [pc, #72]	; (19164 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   1911a:	4798      	blx	r3
   1911c:	4603      	mov	r3, r0
   1911e:	4618      	mov	r0, r3
   19120:	68fb      	ldr	r3, [r7, #12]
   19122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   19124:	68f9      	ldr	r1, [r7, #12]
   19126:	1c83      	adds	r3, r0, #2
   19128:	009b      	lsls	r3, r3, #2
   1912a:	440b      	add	r3, r1
   1912c:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   1912e:	e011      	b.n	19154 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   19130:	79bb      	ldrb	r3, [r7, #6]
   19132:	2b01      	cmp	r3, #1
   19134:	d10e      	bne.n	19154 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   19136:	68fb      	ldr	r3, [r7, #12]
   19138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1913a:	4b08      	ldr	r3, [pc, #32]	; (1915c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   1913c:	4610      	mov	r0, r2
   1913e:	4798      	blx	r3
   19140:	4602      	mov	r2, r0
   19142:	4b07      	ldr	r3, [pc, #28]	; (19160 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   19144:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   19148:	4610      	mov	r0, r2
   1914a:	4798      	blx	r3
   1914c:	4603      	mov	r3, r0
   1914e:	461a      	mov	r2, r3
   19150:	68fb      	ldr	r3, [r7, #12]
   19152:	65da      	str	r2, [r3, #92]	; 0x5c
}
   19154:	bf00      	nop
   19156:	3710      	adds	r7, #16
   19158:	46bd      	mov	sp, r7
   1915a:	bd80      	pop	{r7, pc}
   1915c:	0001ace1 	.word	0x0001ace1
   19160:	0001aef1 	.word	0x0001aef1
   19164:	00019169 	.word	0x00019169

00019168 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   19168:	b480      	push	{r7}
   1916a:	b085      	sub	sp, #20
   1916c:	af00      	add	r7, sp, #0
   1916e:	6078      	str	r0, [r7, #4]
   19170:	460b      	mov	r3, r1
   19172:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   19174:	2300      	movs	r3, #0
   19176:	73fb      	strb	r3, [r7, #15]
   19178:	7bfb      	ldrb	r3, [r7, #15]
   1917a:	2b03      	cmp	r3, #3
   1917c:	dc0c      	bgt.n	19198 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   1917e:	7bfb      	ldrb	r3, [r7, #15]
   19180:	687a      	ldr	r2, [r7, #4]
   19182:	4413      	add	r3, r2
   19184:	78db      	ldrb	r3, [r3, #3]
   19186:	78fa      	ldrb	r2, [r7, #3]
   19188:	429a      	cmp	r2, r3
   1918a:	d101      	bne.n	19190 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   1918c:	7bfb      	ldrb	r3, [r7, #15]
   1918e:	e004      	b.n	1919a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   19190:	7bfb      	ldrb	r3, [r7, #15]
   19192:	3301      	adds	r3, #1
   19194:	73fb      	strb	r3, [r7, #15]
   19196:	e7ef      	b.n	19178 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   19198:	2300      	movs	r3, #0
}
   1919a:	4618      	mov	r0, r3
   1919c:	3714      	adds	r7, #20
   1919e:	46bd      	mov	sp, r7
   191a0:	bc80      	pop	{r7}
   191a2:	4770      	bx	lr

000191a4 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   191a4:	b590      	push	{r4, r7, lr}
   191a6:	b089      	sub	sp, #36	; 0x24
   191a8:	af02      	add	r7, sp, #8
   191aa:	60f8      	str	r0, [r7, #12]
   191ac:	60b9      	str	r1, [r7, #8]
   191ae:	4611      	mov	r1, r2
   191b0:	461a      	mov	r2, r3
   191b2:	460b      	mov	r3, r1
   191b4:	71fb      	strb	r3, [r7, #7]
   191b6:	4613      	mov	r3, r2
   191b8:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   191ba:	2300      	movs	r3, #0
   191bc:	75fb      	strb	r3, [r7, #23]
   191be:	7dfb      	ldrb	r3, [r7, #23]
   191c0:	2b06      	cmp	r3, #6
   191c2:	dc09      	bgt.n	191d8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   191c4:	68fb      	ldr	r3, [r7, #12]
   191c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   191c8:	7dfb      	ldrb	r3, [r7, #23]
   191ca:	4413      	add	r3, r2
   191cc:	2200      	movs	r2, #0
   191ce:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   191d0:	7dfb      	ldrb	r3, [r7, #23]
   191d2:	3301      	adds	r3, #1
   191d4:	75fb      	strb	r3, [r7, #23]
   191d6:	e7f2      	b.n	191be <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   191d8:	68fb      	ldr	r3, [r7, #12]
   191da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   191dc:	79fa      	ldrb	r2, [r7, #7]
   191de:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   191e0:	68fb      	ldr	r3, [r7, #12]
   191e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   191e4:	3301      	adds	r3, #1
   191e6:	88ba      	ldrh	r2, [r7, #4]
   191e8:	1212      	asrs	r2, r2, #8
   191ea:	b2d2      	uxtb	r2, r2
   191ec:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   191ee:	68fb      	ldr	r3, [r7, #12]
   191f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   191f2:	3302      	adds	r3, #2
   191f4:	88ba      	ldrh	r2, [r7, #4]
   191f6:	b2d2      	uxtb	r2, r2
   191f8:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   191fa:	68fb      	ldr	r3, [r7, #12]
   191fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   191fe:	3303      	adds	r3, #3
   19200:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19202:	0e12      	lsrs	r2, r2, #24
   19204:	b2d2      	uxtb	r2, r2
   19206:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   19208:	68fb      	ldr	r3, [r7, #12]
   1920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1920c:	3304      	adds	r3, #4
   1920e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19210:	0c12      	lsrs	r2, r2, #16
   19212:	b2d2      	uxtb	r2, r2
   19214:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   19216:	68fb      	ldr	r3, [r7, #12]
   19218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1921a:	3305      	adds	r3, #5
   1921c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1921e:	0a12      	lsrs	r2, r2, #8
   19220:	b2d2      	uxtb	r2, r2
   19222:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   19224:	68fb      	ldr	r3, [r7, #12]
   19226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19228:	3306      	adds	r3, #6
   1922a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1922c:	b2d2      	uxtb	r2, r2
   1922e:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   19230:	68fb      	ldr	r3, [r7, #12]
   19232:	6a18      	ldr	r0, [r3, #32]
   19234:	68fb      	ldr	r3, [r7, #12]
   19236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19238:	f107 0110 	add.w	r1, r7, #16
   1923c:	2307      	movs	r3, #7
   1923e:	9300      	str	r3, [sp, #0]
   19240:	460b      	mov	r3, r1
   19242:	68b9      	ldr	r1, [r7, #8]
   19244:	4c0a      	ldr	r4, [pc, #40]	; (19270 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   19246:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   19248:	7c3b      	ldrb	r3, [r7, #16]
   1924a:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   1924c:	7c7b      	ldrb	r3, [r7, #17]
   1924e:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   19250:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   19252:	7cbb      	ldrb	r3, [r7, #18]
   19254:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   19256:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   19258:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   1925a:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   1925c:	68fb      	ldr	r3, [r7, #12]
   1925e:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   19260:	bf00      	nop
	return output_data;
   19262:	68fb      	ldr	r3, [r7, #12]
   19264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   19266:	4618      	mov	r0, r3
   19268:	371c      	adds	r7, #28
   1926a:	46bd      	mov	sp, r7
   1926c:	bd90      	pop	{r4, r7, pc}
   1926e:	bf00      	nop
   19270:	00019799 	.word	0x00019799

00019274 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   19274:	b590      	push	{r4, r7, lr}
   19276:	b087      	sub	sp, #28
   19278:	af02      	add	r7, sp, #8
   1927a:	60f8      	str	r0, [r7, #12]
   1927c:	60b9      	str	r1, [r7, #8]
   1927e:	4611      	mov	r1, r2
   19280:	461a      	mov	r2, r3
   19282:	460b      	mov	r3, r1
   19284:	71fb      	strb	r3, [r7, #7]
   19286:	4613      	mov	r3, r2
   19288:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   1928a:	68fb      	ldr	r3, [r7, #12]
   1928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1928e:	79fa      	ldrb	r2, [r7, #7]
   19290:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   19292:	68fb      	ldr	r3, [r7, #12]
   19294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19296:	3301      	adds	r3, #1
   19298:	88ba      	ldrh	r2, [r7, #4]
   1929a:	1212      	asrs	r2, r2, #8
   1929c:	b2d2      	uxtb	r2, r2
   1929e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   192a0:	68fb      	ldr	r3, [r7, #12]
   192a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   192a4:	3302      	adds	r3, #2
   192a6:	88ba      	ldrh	r2, [r7, #4]
   192a8:	b2d2      	uxtb	r2, r2
   192aa:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   192ac:	68fb      	ldr	r3, [r7, #12]
   192ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   192b0:	3303      	adds	r3, #3
   192b2:	f897 2020 	ldrb.w	r2, [r7, #32]
   192b6:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   192b8:	68fb      	ldr	r3, [r7, #12]
   192ba:	6a18      	ldr	r0, [r3, #32]
   192bc:	68fb      	ldr	r3, [r7, #12]
   192be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   192c0:	68fb      	ldr	r3, [r7, #12]
   192c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   192c4:	2304      	movs	r3, #4
   192c6:	9300      	str	r3, [sp, #0]
   192c8:	460b      	mov	r3, r1
   192ca:	68b9      	ldr	r1, [r7, #8]
   192cc:	4c04      	ldr	r4, [pc, #16]	; (192e0 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   192ce:	47a0      	blx	r4
	return rx[0];
   192d0:	68fb      	ldr	r3, [r7, #12]
   192d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   192d4:	781b      	ldrb	r3, [r3, #0]
}
   192d6:	4618      	mov	r0, r3
   192d8:	3714      	adds	r7, #20
   192da:	46bd      	mov	sp, r7
   192dc:	bd90      	pop	{r4, r7, pc}
   192de:	bf00      	nop
   192e0:	00019799 	.word	0x00019799

000192e4 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   192e4:	b480      	push	{r7}
   192e6:	b083      	sub	sp, #12
   192e8:	af00      	add	r7, sp, #0
   192ea:	6078      	str	r0, [r7, #4]
   192ec:	460b      	mov	r3, r1
   192ee:	807b      	strh	r3, [r7, #2]
   192f0:	4613      	mov	r3, r2
   192f2:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   192f4:	787b      	ldrb	r3, [r7, #1]
   192f6:	3b01      	subs	r3, #1
   192f8:	b29b      	uxth	r3, r3
   192fa:	009b      	lsls	r3, r3, #2
   192fc:	b29a      	uxth	r2, r3
   192fe:	887b      	ldrh	r3, [r7, #2]
   19300:	4413      	add	r3, r2
   19302:	b29b      	uxth	r3, r3
}
   19304:	4618      	mov	r0, r3
   19306:	370c      	adds	r7, #12
   19308:	46bd      	mov	sp, r7
   1930a:	bc80      	pop	{r7}
   1930c:	4770      	bx	lr
	...

00019310 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   19310:	b590      	push	{r4, r7, lr}
   19312:	b085      	sub	sp, #20
   19314:	af00      	add	r7, sp, #0
   19316:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   19318:	4b25      	ldr	r3, [pc, #148]	; (193b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1931a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   1931c:	687b      	ldr	r3, [r7, #4]
   1931e:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19320:	68fb      	ldr	r3, [r7, #12]
   19322:	2202      	movs	r2, #2
   19324:	6878      	ldr	r0, [r7, #4]
   19326:	4c23      	ldr	r4, [pc, #140]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19328:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   1932a:	4b23      	ldr	r3, [pc, #140]	; (193b8 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   1932c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   1932e:	687b      	ldr	r3, [r7, #4]
   19330:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19332:	68fb      	ldr	r3, [r7, #12]
   19334:	2204      	movs	r2, #4
   19336:	6878      	ldr	r0, [r7, #4]
   19338:	4c1e      	ldr	r4, [pc, #120]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1933a:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   1933c:	4b1c      	ldr	r3, [pc, #112]	; (193b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1933e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   19340:	687b      	ldr	r3, [r7, #4]
   19342:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19344:	68fb      	ldr	r3, [r7, #12]
   19346:	2207      	movs	r2, #7
   19348:	6878      	ldr	r0, [r7, #4]
   1934a:	4c1a      	ldr	r4, [pc, #104]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1934c:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   1934e:	4b1b      	ldr	r3, [pc, #108]	; (193bc <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   19350:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   19352:	687b      	ldr	r3, [r7, #4]
   19354:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19356:	68fb      	ldr	r3, [r7, #12]
   19358:	2209      	movs	r2, #9
   1935a:	6878      	ldr	r0, [r7, #4]
   1935c:	4c15      	ldr	r4, [pc, #84]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1935e:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   19360:	4b13      	ldr	r3, [pc, #76]	; (193b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   19362:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   19364:	687b      	ldr	r3, [r7, #4]
   19366:	6d99      	ldr	r1, [r3, #88]	; 0x58
   19368:	68fb      	ldr	r3, [r7, #12]
   1936a:	220c      	movs	r2, #12
   1936c:	6878      	ldr	r0, [r7, #4]
   1936e:	4c11      	ldr	r4, [pc, #68]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19370:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   19372:	4b13      	ldr	r3, [pc, #76]	; (193c0 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   19374:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   19376:	687b      	ldr	r3, [r7, #4]
   19378:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1937a:	68fb      	ldr	r3, [r7, #12]
   1937c:	220e      	movs	r2, #14
   1937e:	6878      	ldr	r0, [r7, #4]
   19380:	4c0c      	ldr	r4, [pc, #48]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19382:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   19384:	4b0a      	ldr	r3, [pc, #40]	; (193b0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   19386:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   19388:	687b      	ldr	r3, [r7, #4]
   1938a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	2211      	movs	r2, #17
   19390:	6878      	ldr	r0, [r7, #4]
   19392:	4c08      	ldr	r4, [pc, #32]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   19394:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   19396:	4b0b      	ldr	r3, [pc, #44]	; (193c4 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   19398:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   1939a:	687b      	ldr	r3, [r7, #4]
   1939c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1939e:	68fb      	ldr	r3, [r7, #12]
   193a0:	2213      	movs	r2, #19
   193a2:	6878      	ldr	r0, [r7, #4]
   193a4:	4c03      	ldr	r4, [pc, #12]	; (193b4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   193a6:	47a0      	blx	r4

}
   193a8:	bf00      	nop
   193aa:	3714      	adds	r7, #20
   193ac:	46bd      	mov	sp, r7
   193ae:	bd90      	pop	{r4, r7, pc}
   193b0:	e89c4000 	.word	0xe89c4000
   193b4:	00018f09 	.word	0x00018f09
   193b8:	60a91000 	.word	0x60a91000
   193bc:	61e91000 	.word	0x61e91000
   193c0:	63291000 	.word	0x63291000
   193c4:	64691000 	.word	0x64691000

000193c8 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   193c8:	b590      	push	{r4, r7, lr}
   193ca:	b085      	sub	sp, #20
   193cc:	af02      	add	r7, sp, #8
   193ce:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   193d0:	687b      	ldr	r3, [r7, #4]
   193d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   193d4:	2300      	movs	r3, #0
   193d6:	9300      	str	r3, [sp, #0]
   193d8:	23f0      	movs	r3, #240	; 0xf0
   193da:	2202      	movs	r2, #2
   193dc:	6878      	ldr	r0, [r7, #4]
   193de:	4c07      	ldr	r4, [pc, #28]	; (193fc <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   193e0:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   193e2:	687b      	ldr	r3, [r7, #4]
   193e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   193e6:	2300      	movs	r3, #0
   193e8:	9300      	str	r3, [sp, #0]
   193ea:	23ff      	movs	r3, #255	; 0xff
   193ec:	2202      	movs	r2, #2
   193ee:	6878      	ldr	r0, [r7, #4]
   193f0:	4c02      	ldr	r4, [pc, #8]	; (193fc <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   193f2:	47a0      	blx	r4
}
   193f4:	bf00      	nop
   193f6:	370c      	adds	r7, #12
   193f8:	46bd      	mov	sp, r7
   193fa:	bd90      	pop	{r4, r7, pc}
   193fc:	00019275 	.word	0x00019275

00019400 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   19400:	b580      	push	{r7, lr}
   19402:	b082      	sub	sp, #8
   19404:	af00      	add	r7, sp, #0
   19406:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   19408:	687b      	ldr	r3, [r7, #4]
   1940a:	2200      	movs	r2, #0
   1940c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   19410:	687b      	ldr	r3, [r7, #4]
   19412:	2200      	movs	r2, #0
   19414:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   19416:	4a31      	ldr	r2, [pc, #196]	; (194dc <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   19418:	687b      	ldr	r3, [r7, #4]
   1941a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   1941c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19420:	492f      	ldr	r1, [pc, #188]	; (194e0 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   19422:	4830      	ldr	r0, [pc, #192]	; (194e4 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19424:	4b30      	ldr	r3, [pc, #192]	; (194e8 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   19426:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   19428:	687b      	ldr	r3, [r7, #4]
   1942a:	79db      	ldrb	r3, [r3, #7]
   1942c:	2b01      	cmp	r3, #1
   1942e:	d009      	beq.n	19444 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   19430:	687b      	ldr	r3, [r7, #4]
   19432:	789b      	ldrb	r3, [r3, #2]
   19434:	b2db      	uxtb	r3, r3
   19436:	f083 0301 	eor.w	r3, r3, #1
   1943a:	b2db      	uxtb	r3, r3
   1943c:	2b00      	cmp	r3, #0
   1943e:	d001      	beq.n	19444 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   19440:	2301      	movs	r3, #1
   19442:	e000      	b.n	19446 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   19444:	2300      	movs	r3, #0
   19446:	2b00      	cmp	r3, #0
   19448:	d034      	beq.n	194b4 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   1944a:	2100      	movs	r1, #0
   1944c:	6878      	ldr	r0, [r7, #4]
   1944e:	4b27      	ldr	r3, [pc, #156]	; (194ec <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   19450:	4798      	blx	r3
		delay_ms(1);
   19452:	2001      	movs	r0, #1
   19454:	4b26      	ldr	r3, [pc, #152]	; (194f0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   19456:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   19458:	687b      	ldr	r3, [r7, #4]
   1945a:	781b      	ldrb	r3, [r3, #0]
   1945c:	b2db      	uxtb	r3, r3
   1945e:	f083 0301 	eor.w	r3, r3, #1
   19462:	b2db      	uxtb	r3, r3
   19464:	2b00      	cmp	r3, #0
   19466:	d009      	beq.n	1947c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   19468:	687b      	ldr	r3, [r7, #4]
   1946a:	789b      	ldrb	r3, [r3, #2]
   1946c:	b2db      	uxtb	r3, r3
   1946e:	f083 0301 	eor.w	r3, r3, #1
   19472:	b2db      	uxtb	r3, r3
   19474:	2b00      	cmp	r3, #0
   19476:	d001      	beq.n	1947c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   19478:	2301      	movs	r3, #1
   1947a:	e000      	b.n	1947e <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   1947c:	2300      	movs	r3, #0
   1947e:	2b00      	cmp	r3, #0
   19480:	d000      	beq.n	19484 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   19482:	e7e9      	b.n	19458 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   19484:	687b      	ldr	r3, [r7, #4]
   19486:	789b      	ldrb	r3, [r3, #2]
   19488:	b2db      	uxtb	r3, r3
   1948a:	f083 0301 	eor.w	r3, r3, #1
   1948e:	b2db      	uxtb	r3, r3
   19490:	2b00      	cmp	r3, #0
   19492:	d0c9      	beq.n	19428 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   19494:	687b      	ldr	r3, [r7, #4]
   19496:	781b      	ldrb	r3, [r3, #0]
   19498:	b2db      	uxtb	r3, r3
   1949a:	2b00      	cmp	r3, #0
   1949c:	d006      	beq.n	194ac <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   1949e:	687b      	ldr	r3, [r7, #4]
   194a0:	78db      	ldrb	r3, [r3, #3]
   194a2:	4619      	mov	r1, r3
   194a4:	6878      	ldr	r0, [r7, #4]
   194a6:	4b13      	ldr	r3, [pc, #76]	; (194f4 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   194a8:	4798      	blx	r3
   194aa:	e7bd      	b.n	19428 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   194ac:	2001      	movs	r0, #1
   194ae:	4b10      	ldr	r3, [pc, #64]	; (194f0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   194b0:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   194b2:	e7b9      	b.n	19428 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   194b4:	490a      	ldr	r1, [pc, #40]	; (194e0 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   194b6:	480b      	ldr	r0, [pc, #44]	; (194e4 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   194b8:	4b0f      	ldr	r3, [pc, #60]	; (194f8 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   194ba:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   194bc:	687b      	ldr	r3, [r7, #4]
   194be:	79db      	ldrb	r3, [r3, #7]
   194c0:	2b01      	cmp	r3, #1
   194c2:	bf0c      	ite	eq
   194c4:	2301      	moveq	r3, #1
   194c6:	2300      	movne	r3, #0
   194c8:	b2da      	uxtb	r2, r3
   194ca:	687b      	ldr	r3, [r7, #4]
   194cc:	771a      	strb	r2, [r3, #28]
	return	isOK;
   194ce:	687b      	ldr	r3, [r7, #4]
   194d0:	7f1b      	ldrb	r3, [r3, #28]
	}
   194d2:	4618      	mov	r0, r3
   194d4:	3708      	adds	r7, #8
   194d6:	46bd      	mov	sp, r7
   194d8:	bd80      	pop	{r7, pc}
   194da:	bf00      	nop
   194dc:	2000dbf0 	.word	0x2000dbf0
   194e0:	00018e21 	.word	0x00018e21
   194e4:	2000daf0 	.word	0x2000daf0
   194e8:	000107b9 	.word	0x000107b9
   194ec:	00018f5d 	.word	0x00018f5d
   194f0:	000036c9 	.word	0x000036c9
   194f4:	00019091 	.word	0x00019091
   194f8:	00010761 	.word	0x00010761

000194fc <_Z41__static_initialization_and_destruction_0ii>:
   194fc:	b580      	push	{r7, lr}
   194fe:	b082      	sub	sp, #8
   19500:	af00      	add	r7, sp, #0
   19502:	6078      	str	r0, [r7, #4]
   19504:	6039      	str	r1, [r7, #0]
   19506:	687b      	ldr	r3, [r7, #4]
   19508:	2b01      	cmp	r3, #1
   1950a:	d14c      	bne.n	195a6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   1950c:	683b      	ldr	r3, [r7, #0]
   1950e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19512:	4293      	cmp	r3, r2
   19514:	d147      	bne.n	195a6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   19516:	4926      	ldr	r1, [pc, #152]	; (195b0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   19518:	4826      	ldr	r0, [pc, #152]	; (195b4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1951a:	4b27      	ldr	r3, [pc, #156]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1951c:	4798      	blx	r3
   1951e:	4a27      	ldr	r2, [pc, #156]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19520:	4927      	ldr	r1, [pc, #156]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   19522:	4824      	ldr	r0, [pc, #144]	; (195b4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   19524:	4b27      	ldr	r3, [pc, #156]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19526:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   19528:	4927      	ldr	r1, [pc, #156]	; (195c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1952a:	4828      	ldr	r0, [pc, #160]	; (195cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1952c:	4b22      	ldr	r3, [pc, #136]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1952e:	4798      	blx	r3
   19530:	4a22      	ldr	r2, [pc, #136]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19532:	4923      	ldr	r1, [pc, #140]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   19534:	4825      	ldr	r0, [pc, #148]	; (195cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   19536:	4b23      	ldr	r3, [pc, #140]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19538:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1953a:	4925      	ldr	r1, [pc, #148]	; (195d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   1953c:	4825      	ldr	r0, [pc, #148]	; (195d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1953e:	4b1e      	ldr	r3, [pc, #120]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19540:	4798      	blx	r3
   19542:	4a1e      	ldr	r2, [pc, #120]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19544:	491e      	ldr	r1, [pc, #120]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   19546:	4823      	ldr	r0, [pc, #140]	; (195d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   19548:	4b1e      	ldr	r3, [pc, #120]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1954a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1954c:	4922      	ldr	r1, [pc, #136]	; (195d8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1954e:	4823      	ldr	r0, [pc, #140]	; (195dc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   19550:	4b19      	ldr	r3, [pc, #100]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19552:	4798      	blx	r3
   19554:	4a19      	ldr	r2, [pc, #100]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19556:	491a      	ldr	r1, [pc, #104]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   19558:	4820      	ldr	r0, [pc, #128]	; (195dc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1955a:	4b1a      	ldr	r3, [pc, #104]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1955c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1955e:	4920      	ldr	r1, [pc, #128]	; (195e0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   19560:	4820      	ldr	r0, [pc, #128]	; (195e4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   19562:	4b15      	ldr	r3, [pc, #84]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19564:	4798      	blx	r3
   19566:	4a15      	ldr	r2, [pc, #84]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19568:	4915      	ldr	r1, [pc, #84]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1956a:	481e      	ldr	r0, [pc, #120]	; (195e4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1956c:	4b15      	ldr	r3, [pc, #84]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1956e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   19570:	491d      	ldr	r1, [pc, #116]	; (195e8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   19572:	481e      	ldr	r0, [pc, #120]	; (195ec <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   19574:	4b10      	ldr	r3, [pc, #64]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19576:	4798      	blx	r3
   19578:	4a10      	ldr	r2, [pc, #64]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1957a:	4911      	ldr	r1, [pc, #68]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1957c:	481b      	ldr	r0, [pc, #108]	; (195ec <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1957e:	4b11      	ldr	r3, [pc, #68]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19580:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   19582:	491b      	ldr	r1, [pc, #108]	; (195f0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   19584:	481b      	ldr	r0, [pc, #108]	; (195f4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   19586:	4b0c      	ldr	r3, [pc, #48]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19588:	4798      	blx	r3
   1958a:	4a0c      	ldr	r2, [pc, #48]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1958c:	490c      	ldr	r1, [pc, #48]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1958e:	4819      	ldr	r0, [pc, #100]	; (195f4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   19590:	4b0c      	ldr	r3, [pc, #48]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19592:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   19594:	4918      	ldr	r1, [pc, #96]	; (195f8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   19596:	4819      	ldr	r0, [pc, #100]	; (195fc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   19598:	4b07      	ldr	r3, [pc, #28]	; (195b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1959a:	4798      	blx	r3
   1959c:	4a07      	ldr	r2, [pc, #28]	; (195bc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1959e:	4908      	ldr	r1, [pc, #32]	; (195c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   195a0:	4816      	ldr	r0, [pc, #88]	; (195fc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   195a2:	4b08      	ldr	r3, [pc, #32]	; (195c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   195a4:	4798      	blx	r3
   195a6:	bf00      	nop
   195a8:	3708      	adds	r7, #8
   195aa:	46bd      	mov	sp, r7
   195ac:	bd80      	pop	{r7, pc}
   195ae:	bf00      	nop
   195b0:	2000df58 	.word	0x2000df58
   195b4:	2000daf0 	.word	0x2000daf0
   195b8:	000104e5 	.word	0x000104e5
   195bc:	20000000 	.word	0x20000000
   195c0:	0001051d 	.word	0x0001051d
   195c4:	0001ab61 	.word	0x0001ab61
   195c8:	2000dfec 	.word	0x2000dfec
   195cc:	2000db10 	.word	0x2000db10
   195d0:	2000e110 	.word	0x2000e110
   195d4:	2000db30 	.word	0x2000db30
   195d8:	2000e00c 	.word	0x2000e00c
   195dc:	2000db50 	.word	0x2000db50
   195e0:	2000e0d0 	.word	0x2000e0d0
   195e4:	2000db70 	.word	0x2000db70
   195e8:	2000e0f0 	.word	0x2000e0f0
   195ec:	2000db90 	.word	0x2000db90
   195f0:	2000dfc8 	.word	0x2000dfc8
   195f4:	2000dbb0 	.word	0x2000dbb0
   195f8:	2000e068 	.word	0x2000e068
   195fc:	2000dbd0 	.word	0x2000dbd0

00019600 <_GLOBAL__sub_I_ptrLTCClass>:
   19600:	b580      	push	{r7, lr}
   19602:	af00      	add	r7, sp, #0
   19604:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19608:	2001      	movs	r0, #1
   1960a:	4b01      	ldr	r3, [pc, #4]	; (19610 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   1960c:	4798      	blx	r3
   1960e:	bd80      	pop	{r7, pc}
   19610:	000194fd 	.word	0x000194fd

00019614 <hri_port_set_OUT_reg>:
{
   19614:	b480      	push	{r7}
   19616:	b085      	sub	sp, #20
   19618:	af00      	add	r7, sp, #0
   1961a:	60f8      	str	r0, [r7, #12]
   1961c:	460b      	mov	r3, r1
   1961e:	607a      	str	r2, [r7, #4]
   19620:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19622:	7afb      	ldrb	r3, [r7, #11]
   19624:	68fa      	ldr	r2, [r7, #12]
   19626:	01db      	lsls	r3, r3, #7
   19628:	4413      	add	r3, r2
   1962a:	3318      	adds	r3, #24
   1962c:	687a      	ldr	r2, [r7, #4]
   1962e:	601a      	str	r2, [r3, #0]
}
   19630:	bf00      	nop
   19632:	3714      	adds	r7, #20
   19634:	46bd      	mov	sp, r7
   19636:	bc80      	pop	{r7}
   19638:	4770      	bx	lr

0001963a <hri_port_clear_OUT_reg>:
{
   1963a:	b480      	push	{r7}
   1963c:	b085      	sub	sp, #20
   1963e:	af00      	add	r7, sp, #0
   19640:	60f8      	str	r0, [r7, #12]
   19642:	460b      	mov	r3, r1
   19644:	607a      	str	r2, [r7, #4]
   19646:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   19648:	7afb      	ldrb	r3, [r7, #11]
   1964a:	68fa      	ldr	r2, [r7, #12]
   1964c:	01db      	lsls	r3, r3, #7
   1964e:	4413      	add	r3, r2
   19650:	3314      	adds	r3, #20
   19652:	687a      	ldr	r2, [r7, #4]
   19654:	601a      	str	r2, [r3, #0]
}
   19656:	bf00      	nop
   19658:	3714      	adds	r7, #20
   1965a:	46bd      	mov	sp, r7
   1965c:	bc80      	pop	{r7}
   1965e:	4770      	bx	lr

00019660 <_gpio_set_level>:
{
   19660:	b580      	push	{r7, lr}
   19662:	b082      	sub	sp, #8
   19664:	af00      	add	r7, sp, #0
   19666:	4603      	mov	r3, r0
   19668:	6039      	str	r1, [r7, #0]
   1966a:	71fb      	strb	r3, [r7, #7]
   1966c:	4613      	mov	r3, r2
   1966e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   19670:	79bb      	ldrb	r3, [r7, #6]
   19672:	2b00      	cmp	r3, #0
   19674:	d006      	beq.n	19684 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   19676:	79fb      	ldrb	r3, [r7, #7]
   19678:	683a      	ldr	r2, [r7, #0]
   1967a:	4619      	mov	r1, r3
   1967c:	4806      	ldr	r0, [pc, #24]	; (19698 <_gpio_set_level+0x38>)
   1967e:	4b07      	ldr	r3, [pc, #28]	; (1969c <_gpio_set_level+0x3c>)
   19680:	4798      	blx	r3
}
   19682:	e005      	b.n	19690 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   19684:	79fb      	ldrb	r3, [r7, #7]
   19686:	683a      	ldr	r2, [r7, #0]
   19688:	4619      	mov	r1, r3
   1968a:	4803      	ldr	r0, [pc, #12]	; (19698 <_gpio_set_level+0x38>)
   1968c:	4b04      	ldr	r3, [pc, #16]	; (196a0 <_gpio_set_level+0x40>)
   1968e:	4798      	blx	r3
}
   19690:	bf00      	nop
   19692:	3708      	adds	r7, #8
   19694:	46bd      	mov	sp, r7
   19696:	bd80      	pop	{r7, pc}
   19698:	41008000 	.word	0x41008000
   1969c:	00019615 	.word	0x00019615
   196a0:	0001963b 	.word	0x0001963b

000196a4 <gpio_set_pin_level>:
{
   196a4:	b580      	push	{r7, lr}
   196a6:	b082      	sub	sp, #8
   196a8:	af00      	add	r7, sp, #0
   196aa:	4603      	mov	r3, r0
   196ac:	460a      	mov	r2, r1
   196ae:	71fb      	strb	r3, [r7, #7]
   196b0:	4613      	mov	r3, r2
   196b2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   196b4:	79fb      	ldrb	r3, [r7, #7]
   196b6:	115b      	asrs	r3, r3, #5
   196b8:	b2d8      	uxtb	r0, r3
   196ba:	79fb      	ldrb	r3, [r7, #7]
   196bc:	f003 031f 	and.w	r3, r3, #31
   196c0:	2201      	movs	r2, #1
   196c2:	fa02 f303 	lsl.w	r3, r2, r3
   196c6:	79ba      	ldrb	r2, [r7, #6]
   196c8:	4619      	mov	r1, r3
   196ca:	4b03      	ldr	r3, [pc, #12]	; (196d8 <gpio_set_pin_level+0x34>)
   196cc:	4798      	blx	r3
}
   196ce:	bf00      	nop
   196d0:	3708      	adds	r7, #8
   196d2:	46bd      	mov	sp, r7
   196d4:	bd80      	pop	{r7, pc}
   196d6:	bf00      	nop
   196d8:	00019661 	.word	0x00019661

000196dc <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   196dc:	b480      	push	{r7}
   196de:	b083      	sub	sp, #12
   196e0:	af00      	add	r7, sp, #0
   196e2:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   196e4:	4a05      	ldr	r2, [pc, #20]	; (196fc <_ZN6LT_SPIC1Ev+0x20>)
   196e6:	687b      	ldr	r3, [r7, #4]
   196e8:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   196ea:	687b      	ldr	r3, [r7, #4]
   196ec:	4a04      	ldr	r2, [pc, #16]	; (19700 <_ZN6LT_SPIC1Ev+0x24>)
   196ee:	605a      	str	r2, [r3, #4]
} //LT_SPI
   196f0:	687b      	ldr	r3, [r7, #4]
   196f2:	4618      	mov	r0, r3
   196f4:	370c      	adds	r7, #12
   196f6:	46bd      	mov	sp, r7
   196f8:	bc80      	pop	{r7}
   196fa:	4770      	bx	lr
   196fc:	2000dbf4 	.word	0x2000dbf4
   19700:	2000dbf8 	.word	0x2000dbf8

00019704 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   19704:	b480      	push	{r7}
   19706:	b083      	sub	sp, #12
   19708:	af00      	add	r7, sp, #0
   1970a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   1970c:	687b      	ldr	r3, [r7, #4]
   1970e:	4618      	mov	r0, r3
   19710:	370c      	adds	r7, #12
   19712:	46bd      	mov	sp, r7
   19714:	bc80      	pop	{r7}
   19716:	4770      	bx	lr

00019718 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   19718:	b580      	push	{r7, lr}
   1971a:	b082      	sub	sp, #8
   1971c:	af00      	add	r7, sp, #0
   1971e:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   19720:	687b      	ldr	r3, [r7, #4]
   19722:	685a      	ldr	r2, [r3, #4]
   19724:	687b      	ldr	r3, [r7, #4]
   19726:	691b      	ldr	r3, [r3, #16]
   19728:	4619      	mov	r1, r3
   1972a:	4610      	mov	r0, r2
   1972c:	4b0e      	ldr	r3, [pc, #56]	; (19768 <_ZN6LT_SPI4initEv+0x50>)
   1972e:	4798      	blx	r3
	spiTemp->init();
   19730:	687b      	ldr	r3, [r7, #4]
   19732:	685b      	ldr	r3, [r3, #4]
   19734:	4618      	mov	r0, r3
   19736:	4b0d      	ldr	r3, [pc, #52]	; (1976c <_ZN6LT_SPI4initEv+0x54>)
   19738:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   1973a:	687b      	ldr	r3, [r7, #4]
   1973c:	685b      	ldr	r3, [r3, #4]
   1973e:	685a      	ldr	r2, [r3, #4]
   19740:	687b      	ldr	r3, [r7, #4]
   19742:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   19744:	687b      	ldr	r3, [r7, #4]
   19746:	685b      	ldr	r3, [r3, #4]
   19748:	689a      	ldr	r2, [r3, #8]
   1974a:	687b      	ldr	r3, [r7, #4]
   1974c:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   1974e:	687b      	ldr	r3, [r7, #4]
   19750:	685b      	ldr	r3, [r3, #4]
   19752:	4618      	mov	r0, r3
   19754:	4b06      	ldr	r3, [pc, #24]	; (19770 <_ZN6LT_SPI4initEv+0x58>)
   19756:	4798      	blx	r3
	ready=true;
   19758:	687b      	ldr	r3, [r7, #4]
   1975a:	2201      	movs	r2, #1
   1975c:	701a      	strb	r2, [r3, #0]
}
   1975e:	bf00      	nop
   19760:	3708      	adds	r7, #8
   19762:	46bd      	mov	sp, r7
   19764:	bd80      	pop	{r7, pc}
   19766:	bf00      	nop
   19768:	000199c1 	.word	0x000199c1
   1976c:	00019979 	.word	0x00019979
   19770:	000199e5 	.word	0x000199e5

00019774 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   19774:	b480      	push	{r7}
   19776:	b083      	sub	sp, #12
   19778:	af00      	add	r7, sp, #0
   1977a:	6078      	str	r0, [r7, #4]
   1977c:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   1977e:	687b      	ldr	r3, [r7, #4]
   19780:	683a      	ldr	r2, [r7, #0]
   19782:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   19784:	4a03      	ldr	r2, [pc, #12]	; (19794 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   19786:	687b      	ldr	r3, [r7, #4]
   19788:	6013      	str	r3, [r2, #0]
}
   1978a:	bf00      	nop
   1978c:	370c      	adds	r7, #12
   1978e:	46bd      	mov	sp, r7
   19790:	bc80      	pop	{r7}
   19792:	4770      	bx	lr
   19794:	2000dbf4 	.word	0x2000dbf4

00019798 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   19798:	b580      	push	{r7, lr}
   1979a:	b086      	sub	sp, #24
   1979c:	af00      	add	r7, sp, #0
   1979e:	60f8      	str	r0, [r7, #12]
   197a0:	60b9      	str	r1, [r7, #8]
   197a2:	607a      	str	r2, [r7, #4]
   197a4:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   197a6:	687b      	ldr	r3, [r7, #4]
   197a8:	781b      	ldrb	r3, [r3, #0]
   197aa:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   197ac:	68b9      	ldr	r1, [r7, #8]
   197ae:	68f8      	ldr	r0, [r7, #12]
   197b0:	4b25      	ldr	r3, [pc, #148]	; (19848 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   197b2:	4798      	blx	r3
	
	switch(rOrw){
   197b4:	7dfb      	ldrb	r3, [r7, #23]
   197b6:	2b02      	cmp	r3, #2
   197b8:	d002      	beq.n	197c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   197ba:	2b03      	cmp	r3, #3
   197bc:	d009      	beq.n	197d2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   197be:	e028      	b.n	19812 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   197c0:	68fb      	ldr	r3, [r7, #12]
   197c2:	685b      	ldr	r3, [r3, #4]
   197c4:	f897 2020 	ldrb.w	r2, [r7, #32]
   197c8:	6879      	ldr	r1, [r7, #4]
   197ca:	4618      	mov	r0, r3
   197cc:	4b1f      	ldr	r3, [pc, #124]	; (1984c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   197ce:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   197d0:	e031      	b.n	19836 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   197d2:	68fb      	ldr	r3, [r7, #12]
   197d4:	685b      	ldr	r3, [r3, #4]
   197d6:	2203      	movs	r2, #3
   197d8:	6879      	ldr	r1, [r7, #4]
   197da:	4618      	mov	r0, r3
   197dc:	4b1b      	ldr	r3, [pc, #108]	; (1984c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   197de:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   197e0:	f897 3020 	ldrb.w	r3, [r7, #32]
   197e4:	2b04      	cmp	r3, #4
   197e6:	dd0b      	ble.n	19800 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   197e8:	68fb      	ldr	r3, [r7, #12]
   197ea:	6858      	ldr	r0, [r3, #4]
   197ec:	f897 3020 	ldrb.w	r3, [r7, #32]
   197f0:	3b03      	subs	r3, #3
   197f2:	461a      	mov	r2, r3
   197f4:	6839      	ldr	r1, [r7, #0]
   197f6:	4b16      	ldr	r3, [pc, #88]	; (19850 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   197f8:	4798      	blx	r3
					asm("nop");
   197fa:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   197fc:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   197fe:	e01a      	b.n	19836 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   19800:	68fb      	ldr	r3, [r7, #12]
   19802:	685b      	ldr	r3, [r3, #4]
   19804:	2201      	movs	r2, #1
   19806:	6839      	ldr	r1, [r7, #0]
   19808:	4618      	mov	r0, r3
   1980a:	4b11      	ldr	r3, [pc, #68]	; (19850 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   1980c:	4798      	blx	r3
				asm("nop");
   1980e:	bf00      	nop
			break;
   19810:	e011      	b.n	19836 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   19812:	68fb      	ldr	r3, [r7, #12]
   19814:	685b      	ldr	r3, [r3, #4]
   19816:	f897 2020 	ldrb.w	r2, [r7, #32]
   1981a:	6879      	ldr	r1, [r7, #4]
   1981c:	4618      	mov	r0, r3
   1981e:	4b0b      	ldr	r3, [pc, #44]	; (1984c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19820:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   19822:	68fb      	ldr	r3, [r7, #12]
   19824:	6858      	ldr	r0, [r3, #4]
   19826:	f897 3020 	ldrb.w	r3, [r7, #32]
   1982a:	3b03      	subs	r3, #3
   1982c:	461a      	mov	r2, r3
   1982e:	6839      	ldr	r1, [r7, #0]
   19830:	4b07      	ldr	r3, [pc, #28]	; (19850 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19832:	4798      	blx	r3
			break;
   19834:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   19836:	68b9      	ldr	r1, [r7, #8]
   19838:	68f8      	ldr	r0, [r7, #12]
   1983a:	4b06      	ldr	r3, [pc, #24]	; (19854 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   1983c:	4798      	blx	r3
	asm("nop");
   1983e:	bf00      	nop
	
}
   19840:	bf00      	nop
   19842:	3718      	adds	r7, #24
   19844:	46bd      	mov	sp, r7
   19846:	bd80      	pop	{r7, pc}
   19848:	00019859 	.word	0x00019859
   1984c:	00019a21 	.word	0x00019a21
   19850:	00019a65 	.word	0x00019a65
   19854:	000198a1 	.word	0x000198a1

00019858 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   19858:	b580      	push	{r7, lr}
   1985a:	b082      	sub	sp, #8
   1985c:	af00      	add	r7, sp, #0
   1985e:	6078      	str	r0, [r7, #4]
   19860:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19862:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   19866:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   19868:	683b      	ldr	r3, [r7, #0]
   1986a:	b2db      	uxtb	r3, r3
   1986c:	2100      	movs	r1, #0
   1986e:	4618      	mov	r0, r3
   19870:	4b08      	ldr	r3, [pc, #32]	; (19894 <_ZN6LT_SPI4OpenEm+0x3c>)
   19872:	4798      	blx	r3
	 delay_us(10);
   19874:	200a      	movs	r0, #10
   19876:	4b08      	ldr	r3, [pc, #32]	; (19898 <_ZN6LT_SPI4OpenEm+0x40>)
   19878:	4798      	blx	r3
	spiTemp->Enable();
   1987a:	687b      	ldr	r3, [r7, #4]
   1987c:	685b      	ldr	r3, [r3, #4]
   1987e:	4618      	mov	r0, r3
   19880:	4b06      	ldr	r3, [pc, #24]	; (1989c <_ZN6LT_SPI4OpenEm+0x44>)
   19882:	4798      	blx	r3
	 delay_us(10);
   19884:	200a      	movs	r0, #10
   19886:	4b04      	ldr	r3, [pc, #16]	; (19898 <_ZN6LT_SPI4OpenEm+0x40>)
   19888:	4798      	blx	r3
 }
   1988a:	bf00      	nop
   1988c:	3708      	adds	r7, #8
   1988e:	46bd      	mov	sp, r7
   19890:	bd80      	pop	{r7, pc}
   19892:	bf00      	nop
   19894:	000196a5 	.word	0x000196a5
   19898:	00003695 	.word	0x00003695
   1989c:	000199e5 	.word	0x000199e5

000198a0 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   198a0:	b580      	push	{r7, lr}
   198a2:	b082      	sub	sp, #8
   198a4:	af00      	add	r7, sp, #0
   198a6:	6078      	str	r0, [r7, #4]
   198a8:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   198aa:	200a      	movs	r0, #10
   198ac:	4b0b      	ldr	r3, [pc, #44]	; (198dc <_ZN6LT_SPI5CloseEm+0x3c>)
   198ae:	4798      	blx	r3
	 spiTemp->Disable();
   198b0:	687b      	ldr	r3, [r7, #4]
   198b2:	685b      	ldr	r3, [r3, #4]
   198b4:	4618      	mov	r0, r3
   198b6:	4b0a      	ldr	r3, [pc, #40]	; (198e0 <_ZN6LT_SPI5CloseEm+0x40>)
   198b8:	4798      	blx	r3
	delay_us(10);
   198ba:	200a      	movs	r0, #10
   198bc:	4b07      	ldr	r3, [pc, #28]	; (198dc <_ZN6LT_SPI5CloseEm+0x3c>)
   198be:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   198c0:	683b      	ldr	r3, [r7, #0]
   198c2:	b2db      	uxtb	r3, r3
   198c4:	2101      	movs	r1, #1
   198c6:	4618      	mov	r0, r3
   198c8:	4b06      	ldr	r3, [pc, #24]	; (198e4 <_ZN6LT_SPI5CloseEm+0x44>)
   198ca:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   198cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   198d0:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   198d2:	bf00      	nop
   198d4:	3708      	adds	r7, #8
   198d6:	46bd      	mov	sp, r7
   198d8:	bd80      	pop	{r7, pc}
   198da:	bf00      	nop
   198dc:	00003695 	.word	0x00003695
   198e0:	00019aa9 	.word	0x00019aa9
   198e4:	000196a5 	.word	0x000196a5

000198e8 <_Z41__static_initialization_and_destruction_0ii>:
   198e8:	b580      	push	{r7, lr}
   198ea:	b082      	sub	sp, #8
   198ec:	af00      	add	r7, sp, #0
   198ee:	6078      	str	r0, [r7, #4]
   198f0:	6039      	str	r1, [r7, #0]
   198f2:	687b      	ldr	r3, [r7, #4]
   198f4:	2b01      	cmp	r3, #1
   198f6:	d10c      	bne.n	19912 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   198f8:	683b      	ldr	r3, [r7, #0]
   198fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   198fe:	4293      	cmp	r3, r2
   19900:	d107      	bne.n	19912 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   19902:	4806      	ldr	r0, [pc, #24]	; (1991c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19904:	4b06      	ldr	r3, [pc, #24]	; (19920 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19906:	4798      	blx	r3
   19908:	4a06      	ldr	r2, [pc, #24]	; (19924 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1990a:	4907      	ldr	r1, [pc, #28]	; (19928 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1990c:	4803      	ldr	r0, [pc, #12]	; (1991c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1990e:	4b07      	ldr	r3, [pc, #28]	; (1992c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19910:	4798      	blx	r3
   19912:	bf00      	nop
   19914:	3708      	adds	r7, #8
   19916:	46bd      	mov	sp, r7
   19918:	bd80      	pop	{r7, pc}
   1991a:	bf00      	nop
   1991c:	2000dbf8 	.word	0x2000dbf8
   19920:	00019945 	.word	0x00019945
   19924:	20000000 	.word	0x20000000
   19928:	00019965 	.word	0x00019965
   1992c:	0001ab61 	.word	0x0001ab61

00019930 <_GLOBAL__sub_I_ptrLTSPIClass>:
   19930:	b580      	push	{r7, lr}
   19932:	af00      	add	r7, sp, #0
   19934:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19938:	2001      	movs	r0, #1
   1993a:	4b01      	ldr	r3, [pc, #4]	; (19940 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   1993c:	4798      	blx	r3
   1993e:	bd80      	pop	{r7, pc}
   19940:	000198e9 	.word	0x000198e9

00019944 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   19944:	b480      	push	{r7}
   19946:	b083      	sub	sp, #12
   19948:	af00      	add	r7, sp, #0
   1994a:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   1994c:	4a04      	ldr	r2, [pc, #16]	; (19960 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   1994e:	687b      	ldr	r3, [r7, #4]
   19950:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   19952:	687b      	ldr	r3, [r7, #4]
   19954:	4618      	mov	r0, r3
   19956:	370c      	adds	r7, #12
   19958:	46bd      	mov	sp, r7
   1995a:	bc80      	pop	{r7}
   1995c:	4770      	bx	lr
   1995e:	bf00      	nop
   19960:	2000dc14 	.word	0x2000dc14

00019964 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   19964:	b480      	push	{r7}
   19966:	b083      	sub	sp, #12
   19968:	af00      	add	r7, sp, #0
   1996a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   1996c:	687b      	ldr	r3, [r7, #4]
   1996e:	4618      	mov	r0, r3
   19970:	370c      	adds	r7, #12
   19972:	46bd      	mov	sp, r7
   19974:	bc80      	pop	{r7}
   19976:	4770      	bx	lr

00019978 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   19978:	b580      	push	{r7, lr}
   1997a:	b082      	sub	sp, #8
   1997c:	af00      	add	r7, sp, #0
   1997e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   19980:	687b      	ldr	r3, [r7, #4]
   19982:	68da      	ldr	r2, [r3, #12]
   19984:	687b      	ldr	r3, [r7, #4]
   19986:	3310      	adds	r3, #16
   19988:	4619      	mov	r1, r3
   1998a:	4610      	mov	r0, r2
   1998c:	4b09      	ldr	r3, [pc, #36]	; (199b4 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   1998e:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   19990:	687b      	ldr	r3, [r7, #4]
   19992:	68db      	ldr	r3, [r3, #12]
   19994:	4618      	mov	r0, r3
   19996:	4b08      	ldr	r3, [pc, #32]	; (199b8 <_ZN13SPI_Syn_Class4initEv+0x40>)
   19998:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   1999a:	687b      	ldr	r3, [r7, #4]
   1999c:	4a07      	ldr	r2, [pc, #28]	; (199bc <_ZN13SPI_Syn_Class4initEv+0x44>)
   1999e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   199a0:	687b      	ldr	r3, [r7, #4]
   199a2:	4a06      	ldr	r2, [pc, #24]	; (199bc <_ZN13SPI_Syn_Class4initEv+0x44>)
   199a4:	609a      	str	r2, [r3, #8]
	ready=true;
   199a6:	687b      	ldr	r3, [r7, #4]
   199a8:	2201      	movs	r2, #1
   199aa:	701a      	strb	r2, [r3, #0]
	
}
   199ac:	bf00      	nop
   199ae:	3708      	adds	r7, #8
   199b0:	46bd      	mov	sp, r7
   199b2:	bd80      	pop	{r7, pc}
   199b4:	00003e9d 	.word	0x00003e9d
   199b8:	00003d11 	.word	0x00003d11
   199bc:	2000dc18 	.word	0x2000dc18

000199c0 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   199c0:	b480      	push	{r7}
   199c2:	b083      	sub	sp, #12
   199c4:	af00      	add	r7, sp, #0
   199c6:	6078      	str	r0, [r7, #4]
   199c8:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   199ca:	4a05      	ldr	r2, [pc, #20]	; (199e0 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   199cc:	687b      	ldr	r3, [r7, #4]
   199ce:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   199d0:	687b      	ldr	r3, [r7, #4]
   199d2:	683a      	ldr	r2, [r7, #0]
   199d4:	60da      	str	r2, [r3, #12]
}
   199d6:	bf00      	nop
   199d8:	370c      	adds	r7, #12
   199da:	46bd      	mov	sp, r7
   199dc:	bc80      	pop	{r7}
   199de:	4770      	bx	lr
   199e0:	2000dc14 	.word	0x2000dc14

000199e4 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   199e4:	b580      	push	{r7, lr}
   199e6:	b082      	sub	sp, #8
   199e8:	af00      	add	r7, sp, #0
   199ea:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   199ec:	687b      	ldr	r3, [r7, #4]
   199ee:	68da      	ldr	r2, [r3, #12]
   199f0:	687b      	ldr	r3, [r7, #4]
   199f2:	3310      	adds	r3, #16
   199f4:	4619      	mov	r1, r3
   199f6:	4610      	mov	r0, r2
   199f8:	4b07      	ldr	r3, [pc, #28]	; (19a18 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   199fa:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   199fc:	687b      	ldr	r3, [r7, #4]
   199fe:	68db      	ldr	r3, [r3, #12]
   19a00:	4618      	mov	r0, r3
   19a02:	4b06      	ldr	r3, [pc, #24]	; (19a1c <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   19a04:	4798      	blx	r3
	ready=true;
   19a06:	687b      	ldr	r3, [r7, #4]
   19a08:	2201      	movs	r2, #1
   19a0a:	701a      	strb	r2, [r3, #0]
	return 0;
   19a0c:	2300      	movs	r3, #0
}
   19a0e:	4618      	mov	r0, r3
   19a10:	3708      	adds	r7, #8
   19a12:	46bd      	mov	sp, r7
   19a14:	bd80      	pop	{r7, pc}
   19a16:	bf00      	nop
   19a18:	00003e9d 	.word	0x00003e9d
   19a1c:	00003d11 	.word	0x00003d11

00019a20 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   19a20:	b580      	push	{r7, lr}
   19a22:	b086      	sub	sp, #24
   19a24:	af00      	add	r7, sp, #0
   19a26:	60f8      	str	r0, [r7, #12]
   19a28:	60b9      	str	r1, [r7, #8]
   19a2a:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   19a2c:	68fb      	ldr	r3, [r7, #12]
   19a2e:	2201      	movs	r2, #1
   19a30:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   19a32:	68fb      	ldr	r3, [r7, #12]
   19a34:	691b      	ldr	r3, [r3, #16]
   19a36:	687a      	ldr	r2, [r7, #4]
   19a38:	b292      	uxth	r2, r2
   19a3a:	68b9      	ldr	r1, [r7, #8]
   19a3c:	4618      	mov	r0, r3
   19a3e:	4b08      	ldr	r3, [pc, #32]	; (19a60 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   19a40:	4798      	blx	r3
   19a42:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   19a44:	697b      	ldr	r3, [r7, #20]
   19a46:	2b00      	cmp	r3, #0
   19a48:	bf14      	ite	ne
   19a4a:	2301      	movne	r3, #1
   19a4c:	2300      	moveq	r3, #0
   19a4e:	b2da      	uxtb	r2, r3
   19a50:	68fb      	ldr	r3, [r7, #12]
   19a52:	761a      	strb	r2, [r3, #24]
	 return w;
   19a54:	697b      	ldr	r3, [r7, #20]
	
}
   19a56:	4618      	mov	r0, r3
   19a58:	3718      	adds	r7, #24
   19a5a:	46bd      	mov	sp, r7
   19a5c:	bd80      	pop	{r7, pc}
   19a5e:	bf00      	nop
   19a60:	000189b5 	.word	0x000189b5

00019a64 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   19a64:	b580      	push	{r7, lr}
   19a66:	b086      	sub	sp, #24
   19a68:	af00      	add	r7, sp, #0
   19a6a:	60f8      	str	r0, [r7, #12]
   19a6c:	60b9      	str	r1, [r7, #8]
   19a6e:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   19a70:	68fb      	ldr	r3, [r7, #12]
   19a72:	2201      	movs	r2, #1
   19a74:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   19a76:	68fb      	ldr	r3, [r7, #12]
   19a78:	691b      	ldr	r3, [r3, #16]
   19a7a:	687a      	ldr	r2, [r7, #4]
   19a7c:	b292      	uxth	r2, r2
   19a7e:	68b9      	ldr	r1, [r7, #8]
   19a80:	4618      	mov	r0, r3
   19a82:	4b08      	ldr	r3, [pc, #32]	; (19aa4 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   19a84:	4798      	blx	r3
   19a86:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   19a88:	697b      	ldr	r3, [r7, #20]
   19a8a:	2b00      	cmp	r3, #0
   19a8c:	bf14      	ite	ne
   19a8e:	2301      	movne	r3, #1
   19a90:	2300      	moveq	r3, #0
   19a92:	b2da      	uxtb	r2, r3
   19a94:	68fb      	ldr	r3, [r7, #12]
   19a96:	765a      	strb	r2, [r3, #25]
	return  r;
   19a98:	697b      	ldr	r3, [r7, #20]
}
   19a9a:	4618      	mov	r0, r3
   19a9c:	3718      	adds	r7, #24
   19a9e:	46bd      	mov	sp, r7
   19aa0:	bd80      	pop	{r7, pc}
   19aa2:	bf00      	nop
   19aa4:	00018a05 	.word	0x00018a05

00019aa8 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   19aa8:	b580      	push	{r7, lr}
   19aaa:	b082      	sub	sp, #8
   19aac:	af00      	add	r7, sp, #0
   19aae:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   19ab0:	687b      	ldr	r3, [r7, #4]
   19ab2:	68db      	ldr	r3, [r3, #12]
   19ab4:	4618      	mov	r0, r3
   19ab6:	4b03      	ldr	r3, [pc, #12]	; (19ac4 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   19ab8:	4798      	blx	r3
	
}
   19aba:	bf00      	nop
   19abc:	3708      	adds	r7, #8
   19abe:	46bd      	mov	sp, r7
   19ac0:	bd80      	pop	{r7, pc}
   19ac2:	bf00      	nop
   19ac4:	00003d4d 	.word	0x00003d4d

00019ac8 <hri_port_set_DIR_reg>:
{
   19ac8:	b480      	push	{r7}
   19aca:	b085      	sub	sp, #20
   19acc:	af00      	add	r7, sp, #0
   19ace:	60f8      	str	r0, [r7, #12]
   19ad0:	460b      	mov	r3, r1
   19ad2:	607a      	str	r2, [r7, #4]
   19ad4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   19ad6:	7afb      	ldrb	r3, [r7, #11]
   19ad8:	68fa      	ldr	r2, [r7, #12]
   19ada:	01db      	lsls	r3, r3, #7
   19adc:	4413      	add	r3, r2
   19ade:	3308      	adds	r3, #8
   19ae0:	687a      	ldr	r2, [r7, #4]
   19ae2:	601a      	str	r2, [r3, #0]
}
   19ae4:	bf00      	nop
   19ae6:	3714      	adds	r7, #20
   19ae8:	46bd      	mov	sp, r7
   19aea:	bc80      	pop	{r7}
   19aec:	4770      	bx	lr

00019aee <hri_port_clear_DIR_reg>:
{
   19aee:	b480      	push	{r7}
   19af0:	b085      	sub	sp, #20
   19af2:	af00      	add	r7, sp, #0
   19af4:	60f8      	str	r0, [r7, #12]
   19af6:	460b      	mov	r3, r1
   19af8:	607a      	str	r2, [r7, #4]
   19afa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   19afc:	7afb      	ldrb	r3, [r7, #11]
   19afe:	68fa      	ldr	r2, [r7, #12]
   19b00:	01db      	lsls	r3, r3, #7
   19b02:	4413      	add	r3, r2
   19b04:	3304      	adds	r3, #4
   19b06:	687a      	ldr	r2, [r7, #4]
   19b08:	601a      	str	r2, [r3, #0]
}
   19b0a:	bf00      	nop
   19b0c:	3714      	adds	r7, #20
   19b0e:	46bd      	mov	sp, r7
   19b10:	bc80      	pop	{r7}
   19b12:	4770      	bx	lr

00019b14 <hri_port_set_OUT_reg>:
{
   19b14:	b480      	push	{r7}
   19b16:	b085      	sub	sp, #20
   19b18:	af00      	add	r7, sp, #0
   19b1a:	60f8      	str	r0, [r7, #12]
   19b1c:	460b      	mov	r3, r1
   19b1e:	607a      	str	r2, [r7, #4]
   19b20:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19b22:	7afb      	ldrb	r3, [r7, #11]
   19b24:	68fa      	ldr	r2, [r7, #12]
   19b26:	01db      	lsls	r3, r3, #7
   19b28:	4413      	add	r3, r2
   19b2a:	3318      	adds	r3, #24
   19b2c:	687a      	ldr	r2, [r7, #4]
   19b2e:	601a      	str	r2, [r3, #0]
}
   19b30:	bf00      	nop
   19b32:	3714      	adds	r7, #20
   19b34:	46bd      	mov	sp, r7
   19b36:	bc80      	pop	{r7}
   19b38:	4770      	bx	lr

00019b3a <hri_port_clear_OUT_reg>:
{
   19b3a:	b480      	push	{r7}
   19b3c:	b085      	sub	sp, #20
   19b3e:	af00      	add	r7, sp, #0
   19b40:	60f8      	str	r0, [r7, #12]
   19b42:	460b      	mov	r3, r1
   19b44:	607a      	str	r2, [r7, #4]
   19b46:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   19b48:	7afb      	ldrb	r3, [r7, #11]
   19b4a:	68fa      	ldr	r2, [r7, #12]
   19b4c:	01db      	lsls	r3, r3, #7
   19b4e:	4413      	add	r3, r2
   19b50:	3314      	adds	r3, #20
   19b52:	687a      	ldr	r2, [r7, #4]
   19b54:	601a      	str	r2, [r3, #0]
}
   19b56:	bf00      	nop
   19b58:	3714      	adds	r7, #20
   19b5a:	46bd      	mov	sp, r7
   19b5c:	bc80      	pop	{r7}
   19b5e:	4770      	bx	lr

00019b60 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19b60:	b480      	push	{r7}
   19b62:	b085      	sub	sp, #20
   19b64:	af00      	add	r7, sp, #0
   19b66:	6078      	str	r0, [r7, #4]
   19b68:	4608      	mov	r0, r1
   19b6a:	4611      	mov	r1, r2
   19b6c:	461a      	mov	r2, r3
   19b6e:	4603      	mov	r3, r0
   19b70:	70fb      	strb	r3, [r7, #3]
   19b72:	460b      	mov	r3, r1
   19b74:	70bb      	strb	r3, [r7, #2]
   19b76:	4613      	mov	r3, r2
   19b78:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   19b7a:	78fa      	ldrb	r2, [r7, #3]
   19b7c:	78bb      	ldrb	r3, [r7, #2]
   19b7e:	6879      	ldr	r1, [r7, #4]
   19b80:	01d2      	lsls	r2, r2, #7
   19b82:	440a      	add	r2, r1
   19b84:	4413      	add	r3, r2
   19b86:	3330      	adds	r3, #48	; 0x30
   19b88:	781b      	ldrb	r3, [r3, #0]
   19b8a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   19b8c:	7bfb      	ldrb	r3, [r7, #15]
   19b8e:	f023 030f 	bic.w	r3, r3, #15
   19b92:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   19b94:	787b      	ldrb	r3, [r7, #1]
   19b96:	f003 030f 	and.w	r3, r3, #15
   19b9a:	b2da      	uxtb	r2, r3
   19b9c:	7bfb      	ldrb	r3, [r7, #15]
   19b9e:	4313      	orrs	r3, r2
   19ba0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19ba2:	78fa      	ldrb	r2, [r7, #3]
   19ba4:	78bb      	ldrb	r3, [r7, #2]
   19ba6:	6879      	ldr	r1, [r7, #4]
   19ba8:	01d2      	lsls	r2, r2, #7
   19baa:	440a      	add	r2, r1
   19bac:	4413      	add	r3, r2
   19bae:	3330      	adds	r3, #48	; 0x30
   19bb0:	7bfa      	ldrb	r2, [r7, #15]
   19bb2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19bb4:	bf00      	nop
   19bb6:	3714      	adds	r7, #20
   19bb8:	46bd      	mov	sp, r7
   19bba:	bc80      	pop	{r7}
   19bbc:	4770      	bx	lr

00019bbe <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19bbe:	b480      	push	{r7}
   19bc0:	b085      	sub	sp, #20
   19bc2:	af00      	add	r7, sp, #0
   19bc4:	6078      	str	r0, [r7, #4]
   19bc6:	4608      	mov	r0, r1
   19bc8:	4611      	mov	r1, r2
   19bca:	461a      	mov	r2, r3
   19bcc:	4603      	mov	r3, r0
   19bce:	70fb      	strb	r3, [r7, #3]
   19bd0:	460b      	mov	r3, r1
   19bd2:	70bb      	strb	r3, [r7, #2]
   19bd4:	4613      	mov	r3, r2
   19bd6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   19bd8:	78fa      	ldrb	r2, [r7, #3]
   19bda:	78bb      	ldrb	r3, [r7, #2]
   19bdc:	6879      	ldr	r1, [r7, #4]
   19bde:	01d2      	lsls	r2, r2, #7
   19be0:	440a      	add	r2, r1
   19be2:	4413      	add	r3, r2
   19be4:	3330      	adds	r3, #48	; 0x30
   19be6:	781b      	ldrb	r3, [r3, #0]
   19be8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   19bea:	7bfb      	ldrb	r3, [r7, #15]
   19bec:	f003 030f 	and.w	r3, r3, #15
   19bf0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   19bf2:	787b      	ldrb	r3, [r7, #1]
   19bf4:	011b      	lsls	r3, r3, #4
   19bf6:	b2da      	uxtb	r2, r3
   19bf8:	7bfb      	ldrb	r3, [r7, #15]
   19bfa:	4313      	orrs	r3, r2
   19bfc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19bfe:	78fa      	ldrb	r2, [r7, #3]
   19c00:	78bb      	ldrb	r3, [r7, #2]
   19c02:	6879      	ldr	r1, [r7, #4]
   19c04:	01d2      	lsls	r2, r2, #7
   19c06:	440a      	add	r2, r1
   19c08:	4413      	add	r3, r2
   19c0a:	3330      	adds	r3, #48	; 0x30
   19c0c:	7bfa      	ldrb	r2, [r7, #15]
   19c0e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19c10:	bf00      	nop
   19c12:	3714      	adds	r7, #20
   19c14:	46bd      	mov	sp, r7
   19c16:	bc80      	pop	{r7}
   19c18:	4770      	bx	lr

00019c1a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   19c1a:	b480      	push	{r7}
   19c1c:	b085      	sub	sp, #20
   19c1e:	af00      	add	r7, sp, #0
   19c20:	6078      	str	r0, [r7, #4]
   19c22:	4608      	mov	r0, r1
   19c24:	4611      	mov	r1, r2
   19c26:	461a      	mov	r2, r3
   19c28:	4603      	mov	r3, r0
   19c2a:	70fb      	strb	r3, [r7, #3]
   19c2c:	460b      	mov	r3, r1
   19c2e:	70bb      	strb	r3, [r7, #2]
   19c30:	4613      	mov	r3, r2
   19c32:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   19c34:	78fa      	ldrb	r2, [r7, #3]
   19c36:	78bb      	ldrb	r3, [r7, #2]
   19c38:	6879      	ldr	r1, [r7, #4]
   19c3a:	01d2      	lsls	r2, r2, #7
   19c3c:	440a      	add	r2, r1
   19c3e:	4413      	add	r3, r2
   19c40:	3340      	adds	r3, #64	; 0x40
   19c42:	781b      	ldrb	r3, [r3, #0]
   19c44:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   19c46:	7bfb      	ldrb	r3, [r7, #15]
   19c48:	f023 0301 	bic.w	r3, r3, #1
   19c4c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   19c4e:	787a      	ldrb	r2, [r7, #1]
   19c50:	7bfb      	ldrb	r3, [r7, #15]
   19c52:	4313      	orrs	r3, r2
   19c54:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   19c56:	78fa      	ldrb	r2, [r7, #3]
   19c58:	78bb      	ldrb	r3, [r7, #2]
   19c5a:	6879      	ldr	r1, [r7, #4]
   19c5c:	01d2      	lsls	r2, r2, #7
   19c5e:	440a      	add	r2, r1
   19c60:	4413      	add	r3, r2
   19c62:	3340      	adds	r3, #64	; 0x40
   19c64:	7bfa      	ldrb	r2, [r7, #15]
   19c66:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19c68:	bf00      	nop
   19c6a:	3714      	adds	r7, #20
   19c6c:	46bd      	mov	sp, r7
   19c6e:	bc80      	pop	{r7}
   19c70:	4770      	bx	lr

00019c72 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   19c72:	b480      	push	{r7}
   19c74:	b085      	sub	sp, #20
   19c76:	af00      	add	r7, sp, #0
   19c78:	60f8      	str	r0, [r7, #12]
   19c7a:	460b      	mov	r3, r1
   19c7c:	607a      	str	r2, [r7, #4]
   19c7e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   19c80:	7afb      	ldrb	r3, [r7, #11]
   19c82:	68fa      	ldr	r2, [r7, #12]
   19c84:	01db      	lsls	r3, r3, #7
   19c86:	4413      	add	r3, r2
   19c88:	3328      	adds	r3, #40	; 0x28
   19c8a:	687a      	ldr	r2, [r7, #4]
   19c8c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19c8e:	bf00      	nop
   19c90:	3714      	adds	r7, #20
   19c92:	46bd      	mov	sp, r7
   19c94:	bc80      	pop	{r7}
   19c96:	4770      	bx	lr

00019c98 <_gpio_set_direction>:
{
   19c98:	b580      	push	{r7, lr}
   19c9a:	b082      	sub	sp, #8
   19c9c:	af00      	add	r7, sp, #0
   19c9e:	4603      	mov	r3, r0
   19ca0:	6039      	str	r1, [r7, #0]
   19ca2:	71fb      	strb	r3, [r7, #7]
   19ca4:	4613      	mov	r3, r2
   19ca6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   19ca8:	79bb      	ldrb	r3, [r7, #6]
   19caa:	2b01      	cmp	r3, #1
   19cac:	d01c      	beq.n	19ce8 <_gpio_set_direction+0x50>
   19cae:	2b02      	cmp	r3, #2
   19cb0:	d037      	beq.n	19d22 <_gpio_set_direction+0x8a>
   19cb2:	2b00      	cmp	r3, #0
   19cb4:	d14e      	bne.n	19d54 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19cb6:	79fb      	ldrb	r3, [r7, #7]
   19cb8:	683a      	ldr	r2, [r7, #0]
   19cba:	4619      	mov	r1, r3
   19cbc:	482a      	ldr	r0, [pc, #168]	; (19d68 <_gpio_set_direction+0xd0>)
   19cbe:	4b2b      	ldr	r3, [pc, #172]	; (19d6c <_gpio_set_direction+0xd4>)
   19cc0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19cc2:	683b      	ldr	r3, [r7, #0]
   19cc4:	b29b      	uxth	r3, r3
   19cc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   19cca:	79fb      	ldrb	r3, [r7, #7]
   19ccc:	4619      	mov	r1, r3
   19cce:	4826      	ldr	r0, [pc, #152]	; (19d68 <_gpio_set_direction+0xd0>)
   19cd0:	4b27      	ldr	r3, [pc, #156]	; (19d70 <_gpio_set_direction+0xd8>)
   19cd2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19cd4:	683b      	ldr	r3, [r7, #0]
   19cd6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19cd8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19cdc:	79fb      	ldrb	r3, [r7, #7]
   19cde:	4619      	mov	r1, r3
   19ce0:	4821      	ldr	r0, [pc, #132]	; (19d68 <_gpio_set_direction+0xd0>)
   19ce2:	4b23      	ldr	r3, [pc, #140]	; (19d70 <_gpio_set_direction+0xd8>)
   19ce4:	4798      	blx	r3
		break;
   19ce6:	e03a      	b.n	19d5e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19ce8:	79fb      	ldrb	r3, [r7, #7]
   19cea:	683a      	ldr	r2, [r7, #0]
   19cec:	4619      	mov	r1, r3
   19cee:	481e      	ldr	r0, [pc, #120]	; (19d68 <_gpio_set_direction+0xd0>)
   19cf0:	4b1e      	ldr	r3, [pc, #120]	; (19d6c <_gpio_set_direction+0xd4>)
   19cf2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   19cf4:	683b      	ldr	r3, [r7, #0]
   19cf6:	b29b      	uxth	r3, r3
   19cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   19cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d00:	79f9      	ldrb	r1, [r7, #7]
   19d02:	461a      	mov	r2, r3
   19d04:	4818      	ldr	r0, [pc, #96]	; (19d68 <_gpio_set_direction+0xd0>)
   19d06:	4b1a      	ldr	r3, [pc, #104]	; (19d70 <_gpio_set_direction+0xd8>)
   19d08:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   19d0a:	683b      	ldr	r3, [r7, #0]
   19d0c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   19d0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   19d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   19d16:	79f9      	ldrb	r1, [r7, #7]
   19d18:	461a      	mov	r2, r3
   19d1a:	4813      	ldr	r0, [pc, #76]	; (19d68 <_gpio_set_direction+0xd0>)
   19d1c:	4b14      	ldr	r3, [pc, #80]	; (19d70 <_gpio_set_direction+0xd8>)
   19d1e:	4798      	blx	r3
		break;
   19d20:	e01d      	b.n	19d5e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   19d22:	79fb      	ldrb	r3, [r7, #7]
   19d24:	683a      	ldr	r2, [r7, #0]
   19d26:	4619      	mov	r1, r3
   19d28:	480f      	ldr	r0, [pc, #60]	; (19d68 <_gpio_set_direction+0xd0>)
   19d2a:	4b12      	ldr	r3, [pc, #72]	; (19d74 <_gpio_set_direction+0xdc>)
   19d2c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19d2e:	683b      	ldr	r3, [r7, #0]
   19d30:	b29b      	uxth	r3, r3
   19d32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   19d36:	79fb      	ldrb	r3, [r7, #7]
   19d38:	4619      	mov	r1, r3
   19d3a:	480b      	ldr	r0, [pc, #44]	; (19d68 <_gpio_set_direction+0xd0>)
   19d3c:	4b0c      	ldr	r3, [pc, #48]	; (19d70 <_gpio_set_direction+0xd8>)
   19d3e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19d40:	683b      	ldr	r3, [r7, #0]
   19d42:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19d44:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19d48:	79fb      	ldrb	r3, [r7, #7]
   19d4a:	4619      	mov	r1, r3
   19d4c:	4806      	ldr	r0, [pc, #24]	; (19d68 <_gpio_set_direction+0xd0>)
   19d4e:	4b08      	ldr	r3, [pc, #32]	; (19d70 <_gpio_set_direction+0xd8>)
   19d50:	4798      	blx	r3
		break;
   19d52:	e004      	b.n	19d5e <_gpio_set_direction+0xc6>
		ASSERT(false);
   19d54:	2246      	movs	r2, #70	; 0x46
   19d56:	4908      	ldr	r1, [pc, #32]	; (19d78 <_gpio_set_direction+0xe0>)
   19d58:	2000      	movs	r0, #0
   19d5a:	4b08      	ldr	r3, [pc, #32]	; (19d7c <_gpio_set_direction+0xe4>)
   19d5c:	4798      	blx	r3
}
   19d5e:	bf00      	nop
   19d60:	3708      	adds	r7, #8
   19d62:	46bd      	mov	sp, r7
   19d64:	bd80      	pop	{r7, pc}
   19d66:	bf00      	nop
   19d68:	41008000 	.word	0x41008000
   19d6c:	00019aef 	.word	0x00019aef
   19d70:	00019c73 	.word	0x00019c73
   19d74:	00019ac9 	.word	0x00019ac9
   19d78:	0001c72c 	.word	0x0001c72c
   19d7c:	00004d25 	.word	0x00004d25

00019d80 <_gpio_set_level>:
{
   19d80:	b580      	push	{r7, lr}
   19d82:	b082      	sub	sp, #8
   19d84:	af00      	add	r7, sp, #0
   19d86:	4603      	mov	r3, r0
   19d88:	6039      	str	r1, [r7, #0]
   19d8a:	71fb      	strb	r3, [r7, #7]
   19d8c:	4613      	mov	r3, r2
   19d8e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   19d90:	79bb      	ldrb	r3, [r7, #6]
   19d92:	2b00      	cmp	r3, #0
   19d94:	d006      	beq.n	19da4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   19d96:	79fb      	ldrb	r3, [r7, #7]
   19d98:	683a      	ldr	r2, [r7, #0]
   19d9a:	4619      	mov	r1, r3
   19d9c:	4806      	ldr	r0, [pc, #24]	; (19db8 <_gpio_set_level+0x38>)
   19d9e:	4b07      	ldr	r3, [pc, #28]	; (19dbc <_gpio_set_level+0x3c>)
   19da0:	4798      	blx	r3
}
   19da2:	e005      	b.n	19db0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   19da4:	79fb      	ldrb	r3, [r7, #7]
   19da6:	683a      	ldr	r2, [r7, #0]
   19da8:	4619      	mov	r1, r3
   19daa:	4803      	ldr	r0, [pc, #12]	; (19db8 <_gpio_set_level+0x38>)
   19dac:	4b04      	ldr	r3, [pc, #16]	; (19dc0 <_gpio_set_level+0x40>)
   19dae:	4798      	blx	r3
}
   19db0:	bf00      	nop
   19db2:	3708      	adds	r7, #8
   19db4:	46bd      	mov	sp, r7
   19db6:	bd80      	pop	{r7, pc}
   19db8:	41008000 	.word	0x41008000
   19dbc:	00019b15 	.word	0x00019b15
   19dc0:	00019b3b 	.word	0x00019b3b

00019dc4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   19dc4:	b590      	push	{r4, r7, lr}
   19dc6:	b085      	sub	sp, #20
   19dc8:	af00      	add	r7, sp, #0
   19dca:	6078      	str	r0, [r7, #4]
   19dcc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   19dce:	687b      	ldr	r3, [r7, #4]
   19dd0:	095b      	lsrs	r3, r3, #5
   19dd2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   19dd4:	687b      	ldr	r3, [r7, #4]
   19dd6:	b2db      	uxtb	r3, r3
   19dd8:	f003 031f 	and.w	r3, r3, #31
   19ddc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   19dde:	683b      	ldr	r3, [r7, #0]
   19de0:	f1b3 3fff 	cmp.w	r3, #4294967295
   19de4:	d106      	bne.n	19df4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   19de6:	7bba      	ldrb	r2, [r7, #14]
   19de8:	7bf9      	ldrb	r1, [r7, #15]
   19dea:	2300      	movs	r3, #0
   19dec:	4812      	ldr	r0, [pc, #72]	; (19e38 <_gpio_set_pin_function+0x74>)
   19dee:	4c13      	ldr	r4, [pc, #76]	; (19e3c <_gpio_set_pin_function+0x78>)
   19df0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   19df2:	e01d      	b.n	19e30 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   19df4:	7bba      	ldrb	r2, [r7, #14]
   19df6:	7bf9      	ldrb	r1, [r7, #15]
   19df8:	2301      	movs	r3, #1
   19dfa:	480f      	ldr	r0, [pc, #60]	; (19e38 <_gpio_set_pin_function+0x74>)
   19dfc:	4c0f      	ldr	r4, [pc, #60]	; (19e3c <_gpio_set_pin_function+0x78>)
   19dfe:	47a0      	blx	r4
		if (pin & 1) {
   19e00:	7bbb      	ldrb	r3, [r7, #14]
   19e02:	f003 0301 	and.w	r3, r3, #1
   19e06:	2b00      	cmp	r3, #0
   19e08:	d009      	beq.n	19e1e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   19e0a:	7bbb      	ldrb	r3, [r7, #14]
   19e0c:	105b      	asrs	r3, r3, #1
   19e0e:	b2da      	uxtb	r2, r3
   19e10:	683b      	ldr	r3, [r7, #0]
   19e12:	b2db      	uxtb	r3, r3
   19e14:	7bf9      	ldrb	r1, [r7, #15]
   19e16:	4808      	ldr	r0, [pc, #32]	; (19e38 <_gpio_set_pin_function+0x74>)
   19e18:	4c09      	ldr	r4, [pc, #36]	; (19e40 <_gpio_set_pin_function+0x7c>)
   19e1a:	47a0      	blx	r4
}
   19e1c:	e008      	b.n	19e30 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   19e1e:	7bbb      	ldrb	r3, [r7, #14]
   19e20:	105b      	asrs	r3, r3, #1
   19e22:	b2da      	uxtb	r2, r3
   19e24:	683b      	ldr	r3, [r7, #0]
   19e26:	b2db      	uxtb	r3, r3
   19e28:	7bf9      	ldrb	r1, [r7, #15]
   19e2a:	4803      	ldr	r0, [pc, #12]	; (19e38 <_gpio_set_pin_function+0x74>)
   19e2c:	4c05      	ldr	r4, [pc, #20]	; (19e44 <_gpio_set_pin_function+0x80>)
   19e2e:	47a0      	blx	r4
}
   19e30:	bf00      	nop
   19e32:	3714      	adds	r7, #20
   19e34:	46bd      	mov	sp, r7
   19e36:	bd90      	pop	{r4, r7, pc}
   19e38:	41008000 	.word	0x41008000
   19e3c:	00019c1b 	.word	0x00019c1b
   19e40:	00019bbf 	.word	0x00019bbf
   19e44:	00019b61 	.word	0x00019b61

00019e48 <gpio_set_pin_function>:
{
   19e48:	b580      	push	{r7, lr}
   19e4a:	b082      	sub	sp, #8
   19e4c:	af00      	add	r7, sp, #0
   19e4e:	6078      	str	r0, [r7, #4]
   19e50:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   19e52:	6839      	ldr	r1, [r7, #0]
   19e54:	6878      	ldr	r0, [r7, #4]
   19e56:	4b03      	ldr	r3, [pc, #12]	; (19e64 <gpio_set_pin_function+0x1c>)
   19e58:	4798      	blx	r3
}
   19e5a:	bf00      	nop
   19e5c:	3708      	adds	r7, #8
   19e5e:	46bd      	mov	sp, r7
   19e60:	bd80      	pop	{r7, pc}
   19e62:	bf00      	nop
   19e64:	00019dc5 	.word	0x00019dc5

00019e68 <gpio_set_pin_direction>:
{
   19e68:	b580      	push	{r7, lr}
   19e6a:	b082      	sub	sp, #8
   19e6c:	af00      	add	r7, sp, #0
   19e6e:	4603      	mov	r3, r0
   19e70:	460a      	mov	r2, r1
   19e72:	71fb      	strb	r3, [r7, #7]
   19e74:	4613      	mov	r3, r2
   19e76:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   19e78:	79fb      	ldrb	r3, [r7, #7]
   19e7a:	115b      	asrs	r3, r3, #5
   19e7c:	b2d8      	uxtb	r0, r3
   19e7e:	79fb      	ldrb	r3, [r7, #7]
   19e80:	f003 031f 	and.w	r3, r3, #31
   19e84:	2201      	movs	r2, #1
   19e86:	fa02 f303 	lsl.w	r3, r2, r3
   19e8a:	79ba      	ldrb	r2, [r7, #6]
   19e8c:	4619      	mov	r1, r3
   19e8e:	4b03      	ldr	r3, [pc, #12]	; (19e9c <gpio_set_pin_direction+0x34>)
   19e90:	4798      	blx	r3
}
   19e92:	bf00      	nop
   19e94:	3708      	adds	r7, #8
   19e96:	46bd      	mov	sp, r7
   19e98:	bd80      	pop	{r7, pc}
   19e9a:	bf00      	nop
   19e9c:	00019c99 	.word	0x00019c99

00019ea0 <gpio_set_pin_level>:
{
   19ea0:	b580      	push	{r7, lr}
   19ea2:	b082      	sub	sp, #8
   19ea4:	af00      	add	r7, sp, #0
   19ea6:	4603      	mov	r3, r0
   19ea8:	460a      	mov	r2, r1
   19eaa:	71fb      	strb	r3, [r7, #7]
   19eac:	4613      	mov	r3, r2
   19eae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19eb0:	79fb      	ldrb	r3, [r7, #7]
   19eb2:	115b      	asrs	r3, r3, #5
   19eb4:	b2d8      	uxtb	r0, r3
   19eb6:	79fb      	ldrb	r3, [r7, #7]
   19eb8:	f003 031f 	and.w	r3, r3, #31
   19ebc:	2201      	movs	r2, #1
   19ebe:	fa02 f303 	lsl.w	r3, r2, r3
   19ec2:	79ba      	ldrb	r2, [r7, #6]
   19ec4:	4619      	mov	r1, r3
   19ec6:	4b03      	ldr	r3, [pc, #12]	; (19ed4 <gpio_set_pin_level+0x34>)
   19ec8:	4798      	blx	r3
}
   19eca:	bf00      	nop
   19ecc:	3708      	adds	r7, #8
   19ece:	46bd      	mov	sp, r7
   19ed0:	bd80      	pop	{r7, pc}
   19ed2:	bf00      	nop
   19ed4:	00019d81 	.word	0x00019d81

00019ed8 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   19ed8:	b580      	push	{r7, lr}
   19eda:	b082      	sub	sp, #8
   19edc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   19ede:	2100      	movs	r1, #0
   19ee0:	2008      	movs	r0, #8
   19ee2:	4b24      	ldr	r3, [pc, #144]	; (19f74 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19ee4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   19ee6:	2100      	movs	r1, #0
   19ee8:	202b      	movs	r0, #43	; 0x2b
   19eea:	4b22      	ldr	r3, [pc, #136]	; (19f74 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19eec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   19eee:	2100      	movs	r1, #0
   19ef0:	202a      	movs	r0, #42	; 0x2a
   19ef2:	4b20      	ldr	r3, [pc, #128]	; (19f74 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19ef4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   19ef6:	2102      	movs	r1, #2
   19ef8:	2008      	movs	r0, #8
   19efa:	4b1f      	ldr	r3, [pc, #124]	; (19f78 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19efc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   19efe:	2102      	movs	r1, #2
   19f00:	202b      	movs	r0, #43	; 0x2b
   19f02:	4b1d      	ldr	r3, [pc, #116]	; (19f78 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19f04:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   19f06:	2102      	movs	r1, #2
   19f08:	202a      	movs	r0, #42	; 0x2a
   19f0a:	4b1b      	ldr	r3, [pc, #108]	; (19f78 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19f0c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   19f0e:	2101      	movs	r1, #1
   19f10:	2008      	movs	r0, #8
   19f12:	4b1a      	ldr	r3, [pc, #104]	; (19f7c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19f14:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   19f16:	2100      	movs	r1, #0
   19f18:	202b      	movs	r0, #43	; 0x2b
   19f1a:	4b18      	ldr	r3, [pc, #96]	; (19f7c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19f1c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   19f1e:	2100      	movs	r1, #0
   19f20:	202a      	movs	r0, #42	; 0x2a
   19f22:	4b16      	ldr	r3, [pc, #88]	; (19f7c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19f24:	4798      	blx	r3

	delay_us(1);
   19f26:	2001      	movs	r0, #1
   19f28:	4b15      	ldr	r3, [pc, #84]	; (19f80 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19f2a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   19f2c:	2300      	movs	r3, #0
   19f2e:	607b      	str	r3, [r7, #4]
   19f30:	687b      	ldr	r3, [r7, #4]
   19f32:	2b06      	cmp	r3, #6
   19f34:	dc11      	bgt.n	19f5a <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   19f36:	2101      	movs	r1, #1
   19f38:	202a      	movs	r0, #42	; 0x2a
   19f3a:	4b10      	ldr	r3, [pc, #64]	; (19f7c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19f3c:	4798      	blx	r3
		delay_us(1);
   19f3e:	2001      	movs	r0, #1
   19f40:	4b0f      	ldr	r3, [pc, #60]	; (19f80 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19f42:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   19f44:	2100      	movs	r1, #0
   19f46:	202a      	movs	r0, #42	; 0x2a
   19f48:	4b0c      	ldr	r3, [pc, #48]	; (19f7c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19f4a:	4798      	blx	r3
		delay_us(1);
   19f4c:	2001      	movs	r0, #1
   19f4e:	4b0c      	ldr	r3, [pc, #48]	; (19f80 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19f50:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   19f52:	687b      	ldr	r3, [r7, #4]
   19f54:	3301      	adds	r3, #1
   19f56:	607b      	str	r3, [r7, #4]
   19f58:	e7ea      	b.n	19f30 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   19f5a:	2101      	movs	r1, #1
   19f5c:	202b      	movs	r0, #43	; 0x2b
   19f5e:	4b07      	ldr	r3, [pc, #28]	; (19f7c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19f60:	4798      	blx	r3
	delay_us(1);
   19f62:	2001      	movs	r0, #1
   19f64:	4b06      	ldr	r3, [pc, #24]	; (19f80 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19f66:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   19f68:	4b06      	ldr	r3, [pc, #24]	; (19f84 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   19f6a:	4798      	blx	r3
}
   19f6c:	bf00      	nop
   19f6e:	3708      	adds	r7, #8
   19f70:	46bd      	mov	sp, r7
   19f72:	bd80      	pop	{r7, pc}
   19f74:	00019e49 	.word	0x00019e49
   19f78:	00019e69 	.word	0x00019e69
   19f7c:	00019ea1 	.word	0x00019ea1
   19f80:	00003695 	.word	0x00003695
   19f84:	00002359 	.word	0x00002359

00019f88 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   19f88:	b480      	push	{r7}
   19f8a:	b083      	sub	sp, #12
   19f8c:	af00      	add	r7, sp, #0
   19f8e:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   19f90:	687b      	ldr	r3, [r7, #4]
   19f92:	4618      	mov	r0, r3
   19f94:	370c      	adds	r7, #12
   19f96:	46bd      	mov	sp, r7
   19f98:	bc80      	pop	{r7}
   19f9a:	4770      	bx	lr

00019f9c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   19f9c:	b480      	push	{r7}
   19f9e:	b083      	sub	sp, #12
   19fa0:	af00      	add	r7, sp, #0
   19fa2:	6078      	str	r0, [r7, #4]
   19fa4:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   19fa6:	687b      	ldr	r3, [r7, #4]
   19fa8:	683a      	ldr	r2, [r7, #0]
   19faa:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   19fac:	687b      	ldr	r3, [r7, #4]
   19fae:	4a04      	ldr	r2, [pc, #16]	; (19fc0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   19fb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   19fb4:	687b      	ldr	r3, [r7, #4]
   19fb6:	4618      	mov	r0, r3
   19fb8:	370c      	adds	r7, #12
   19fba:	46bd      	mov	sp, r7
   19fbc:	bc80      	pop	{r7}
   19fbe:	4770      	bx	lr
   19fc0:	001fff00 	.word	0x001fff00

00019fc4 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   19fc4:	b480      	push	{r7}
   19fc6:	b083      	sub	sp, #12
   19fc8:	af00      	add	r7, sp, #0
   19fca:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   19fcc:	687b      	ldr	r3, [r7, #4]
   19fce:	4618      	mov	r0, r3
   19fd0:	370c      	adds	r7, #12
   19fd2:	46bd      	mov	sp, r7
   19fd4:	bc80      	pop	{r7}
   19fd6:	4770      	bx	lr

00019fd8 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   19fd8:	b580      	push	{r7, lr}
   19fda:	b082      	sub	sp, #8
   19fdc:	af00      	add	r7, sp, #0
   19fde:	6078      	str	r0, [r7, #4]
	xferDone=false;
   19fe0:	687b      	ldr	r3, [r7, #4]
   19fe2:	2200      	movs	r2, #0
   19fe4:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   19fe6:	6878      	ldr	r0, [r7, #4]
   19fe8:	4b04      	ldr	r3, [pc, #16]	; (19ffc <_ZN13N25Q256_Class4InitEv+0x24>)
   19fea:	4798      	blx	r3
	return SelfTest();
   19fec:	6878      	ldr	r0, [r7, #4]
   19fee:	4b04      	ldr	r3, [pc, #16]	; (1a000 <_ZN13N25Q256_Class4InitEv+0x28>)
   19ff0:	4798      	blx	r3
   19ff2:	4603      	mov	r3, r0
}
   19ff4:	4618      	mov	r0, r3
   19ff6:	3708      	adds	r7, #8
   19ff8:	46bd      	mov	sp, r7
   19ffa:	bd80      	pop	{r7, pc}
   19ffc:	0001a005 	.word	0x0001a005
   1a000:	0001a1a1 	.word	0x0001a1a1

0001a004 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   1a004:	b590      	push	{r4, r7, lr}
   1a006:	b083      	sub	sp, #12
   1a008:	af00      	add	r7, sp, #0
   1a00a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   1a00c:	687b      	ldr	r3, [r7, #4]
   1a00e:	685b      	ldr	r3, [r3, #4]
   1a010:	4618      	mov	r0, r3
   1a012:	4b08      	ldr	r3, [pc, #32]	; (1a034 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   1a014:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1a016:	687b      	ldr	r3, [r7, #4]
   1a018:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1a01a:	2300      	movs	r3, #0
   1a01c:	4a06      	ldr	r2, [pc, #24]	; (1a038 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   1a01e:	4807      	ldr	r0, [pc, #28]	; (1a03c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   1a020:	4c07      	ldr	r4, [pc, #28]	; (1a040 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1a022:	47a0      	blx	r4
   1a024:	4602      	mov	r2, r0
   1a026:	687b      	ldr	r3, [r7, #4]
   1a028:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   1a02c:	bf00      	nop
   1a02e:	370c      	adds	r7, #12
   1a030:	46bd      	mov	sp, r7
   1a032:	bd90      	pop	{r4, r7, pc}
   1a034:	00003bcd 	.word	0x00003bcd
   1a038:	00019ed9 	.word	0x00019ed9
   1a03c:	2000dc5c 	.word	0x2000dc5c
   1a040:	0000d55d 	.word	0x0000d55d

0001a044 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   1a044:	b580      	push	{r7, lr}
   1a046:	b084      	sub	sp, #16
   1a048:	af00      	add	r7, sp, #0
   1a04a:	6078      	str	r0, [r7, #4]
   1a04c:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   1a04e:	687b      	ldr	r3, [r7, #4]
   1a050:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1a054:	685b      	ldr	r3, [r3, #4]
   1a056:	689b      	ldr	r3, [r3, #8]
   1a058:	687a      	ldr	r2, [r7, #4]
   1a05a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   1a05e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a062:	6839      	ldr	r1, [r7, #0]
   1a064:	4798      	blx	r3
   1a066:	4603      	mov	r3, r0
   1a068:	60fb      	str	r3, [r7, #12]
	return	e;
   1a06a:	68fb      	ldr	r3, [r7, #12]
}
   1a06c:	4618      	mov	r0, r3
   1a06e:	3710      	adds	r7, #16
   1a070:	46bd      	mov	sp, r7
   1a072:	bd80      	pop	{r7, pc}

0001a074 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1a074:	b590      	push	{r4, r7, lr}
   1a076:	b087      	sub	sp, #28
   1a078:	af00      	add	r7, sp, #0
   1a07a:	60f8      	str	r0, [r7, #12]
   1a07c:	60b9      	str	r1, [r7, #8]
   1a07e:	607a      	str	r2, [r7, #4]
   1a080:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   1a082:	68fb      	ldr	r3, [r7, #12]
   1a084:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1a088:	685b      	ldr	r3, [r3, #4]
   1a08a:	685c      	ldr	r4, [r3, #4]
   1a08c:	68fb      	ldr	r3, [r7, #12]
   1a08e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1a092:	683b      	ldr	r3, [r7, #0]
   1a094:	687a      	ldr	r2, [r7, #4]
   1a096:	68b9      	ldr	r1, [r7, #8]
   1a098:	47a0      	blx	r4
   1a09a:	4603      	mov	r3, r0
   1a09c:	617b      	str	r3, [r7, #20]
	return	w;
   1a09e:	697b      	ldr	r3, [r7, #20]
}
   1a0a0:	4618      	mov	r0, r3
   1a0a2:	371c      	adds	r7, #28
   1a0a4:	46bd      	mov	sp, r7
   1a0a6:	bd90      	pop	{r4, r7, pc}

0001a0a8 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1a0a8:	b590      	push	{r4, r7, lr}
   1a0aa:	b087      	sub	sp, #28
   1a0ac:	af00      	add	r7, sp, #0
   1a0ae:	60f8      	str	r0, [r7, #12]
   1a0b0:	60b9      	str	r1, [r7, #8]
   1a0b2:	607a      	str	r2, [r7, #4]
   1a0b4:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1a0b6:	68fb      	ldr	r3, [r7, #12]
   1a0b8:	2200      	movs	r2, #0
   1a0ba:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   1a0bc:	68fb      	ldr	r3, [r7, #12]
   1a0be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1a0c2:	685b      	ldr	r3, [r3, #4]
   1a0c4:	681c      	ldr	r4, [r3, #0]
   1a0c6:	68fb      	ldr	r3, [r7, #12]
   1a0c8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1a0cc:	683b      	ldr	r3, [r7, #0]
   1a0ce:	687a      	ldr	r2, [r7, #4]
   1a0d0:	68b9      	ldr	r1, [r7, #8]
   1a0d2:	47a0      	blx	r4
   1a0d4:	4603      	mov	r3, r0
   1a0d6:	617b      	str	r3, [r7, #20]
	return	r;
   1a0d8:	697b      	ldr	r3, [r7, #20]
}
   1a0da:	4618      	mov	r0, r3
   1a0dc:	371c      	adds	r7, #28
   1a0de:	46bd      	mov	sp, r7
   1a0e0:	bd90      	pop	{r4, r7, pc}
	...

0001a0e4 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   1a0e4:	b580      	push	{r7, lr}
   1a0e6:	b082      	sub	sp, #8
   1a0e8:	af00      	add	r7, sp, #0
   1a0ea:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   1a0ec:	687a      	ldr	r2, [r7, #4]
   1a0ee:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1a0f2:	f043 0310 	orr.w	r3, r3, #16
   1a0f6:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1a0fa:	687a      	ldr	r2, [r7, #4]
   1a0fc:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1a100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a104:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   1a108:	687a      	ldr	r2, [r7, #4]
   1a10a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   1a10e:	f36f 1305 	bfc	r3, #4, #2
   1a112:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1a116:	687b      	ldr	r3, [r7, #4]
   1a118:	2205      	movs	r2, #5
   1a11a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   1a11e:	687b      	ldr	r3, [r7, #4]
   1a120:	2201      	movs	r2, #1
   1a122:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1a126:	687b      	ldr	r3, [r7, #4]
   1a128:	f203 2212 	addw	r2, r3, #530	; 0x212
   1a12c:	687b      	ldr	r3, [r7, #4]
   1a12e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1a132:	687b      	ldr	r3, [r7, #4]
   1a134:	685a      	ldr	r2, [r3, #4]
   1a136:	687b      	ldr	r3, [r7, #4]
   1a138:	f503 7305 	add.w	r3, r3, #532	; 0x214
   1a13c:	4619      	mov	r1, r3
   1a13e:	4610      	mov	r0, r2
   1a140:	4b04      	ldr	r3, [pc, #16]	; (1a154 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1a142:	4798      	blx	r3
		return status;
   1a144:	687b      	ldr	r3, [r7, #4]
   1a146:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1a14a:	4618      	mov	r0, r3
   1a14c:	3708      	adds	r7, #8
   1a14e:	46bd      	mov	sp, r7
   1a150:	bd80      	pop	{r7, pc}
   1a152:	bf00      	nop
   1a154:	00003c45 	.word	0x00003c45

0001a158 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1a158:	b580      	push	{r7, lr}
   1a15a:	b082      	sub	sp, #8
   1a15c:	af00      	add	r7, sp, #0
   1a15e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   1a160:	6878      	ldr	r0, [r7, #4]
   1a162:	4b0e      	ldr	r3, [pc, #56]	; (1a19c <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   1a164:	4798      	blx	r3
   1a166:	4603      	mov	r3, r0
   1a168:	461a      	mov	r2, r3
   1a16a:	687b      	ldr	r3, [r7, #4]
   1a16c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   1a170:	687b      	ldr	r3, [r7, #4]
   1a172:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1a176:	f003 0301 	and.w	r3, r3, #1
   1a17a:	2b00      	cmp	r3, #0
   1a17c:	d000      	beq.n	1a180 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1a17e:	e7ef      	b.n	1a160 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   1a180:	687b      	ldr	r3, [r7, #4]
   1a182:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1a186:	f003 0301 	and.w	r3, r3, #1
   1a18a:	2b00      	cmp	r3, #0
   1a18c:	bf0c      	ite	eq
   1a18e:	2301      	moveq	r3, #1
   1a190:	2300      	movne	r3, #0
   1a192:	b2db      	uxtb	r3, r3
}
   1a194:	4618      	mov	r0, r3
   1a196:	3708      	adds	r7, #8
   1a198:	46bd      	mov	sp, r7
   1a19a:	bd80      	pop	{r7, pc}
   1a19c:	0001a0e5 	.word	0x0001a0e5

0001a1a0 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   1a1a0:	b590      	push	{r4, r7, lr}
   1a1a2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   1a1a6:	b085      	sub	sp, #20
   1a1a8:	af00      	add	r7, sp, #0
   1a1aa:	f107 0310 	add.w	r3, r7, #16
   1a1ae:	3b0c      	subs	r3, #12
   1a1b0:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   1a1b2:	f107 0310 	add.w	r3, r7, #16
   1a1b6:	3b0c      	subs	r3, #12
   1a1b8:	681b      	ldr	r3, [r3, #0]
   1a1ba:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1a1be:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   1a1c2:	2300      	movs	r3, #0
   1a1c4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a1c8:	f102 020c 	add.w	r2, r2, #12
   1a1cc:	6013      	str	r3, [r2, #0]
   1a1ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a1d2:	f103 030c 	add.w	r3, r3, #12
   1a1d6:	681b      	ldr	r3, [r3, #0]
   1a1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a1dc:	d22f      	bcs.n	1a23e <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   1a1de:	4b60      	ldr	r3, [pc, #384]	; (1a360 <_ZN13N25Q256_Class8SelfTestEv+0x1c0>)
   1a1e0:	4798      	blx	r3
   1a1e2:	4603      	mov	r3, r0
   1a1e4:	b2d9      	uxtb	r1, r3
   1a1e6:	f107 0310 	add.w	r3, r7, #16
   1a1ea:	3b08      	subs	r3, #8
   1a1ec:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a1f0:	f102 020c 	add.w	r2, r2, #12
   1a1f4:	6812      	ldr	r2, [r2, #0]
   1a1f6:	4413      	add	r3, r2
   1a1f8:	460a      	mov	r2, r1
   1a1fa:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   1a1fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a200:	f103 030c 	add.w	r3, r3, #12
   1a204:	681b      	ldr	r3, [r3, #0]
   1a206:	b2db      	uxtb	r3, r3
   1a208:	425b      	negs	r3, r3
   1a20a:	b2d9      	uxtb	r1, r3
   1a20c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1a210:	f103 0310 	add.w	r3, r3, #16
   1a214:	3b08      	subs	r3, #8
   1a216:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a21a:	f102 020c 	add.w	r2, r2, #12
   1a21e:	6812      	ldr	r2, [r2, #0]
   1a220:	4413      	add	r3, r2
   1a222:	460a      	mov	r2, r1
   1a224:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   1a226:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a22a:	f103 030c 	add.w	r3, r3, #12
   1a22e:	681b      	ldr	r3, [r3, #0]
   1a230:	3301      	adds	r3, #1
   1a232:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a236:	f102 020c 	add.w	r2, r2, #12
   1a23a:	6013      	str	r3, [r2, #0]
   1a23c:	e7c7      	b.n	1a1ce <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   1a23e:	f107 0310 	add.w	r3, r7, #16
   1a242:	3b0c      	subs	r3, #12
   1a244:	681b      	ldr	r3, [r3, #0]
   1a246:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a24a:	f107 0310 	add.w	r3, r7, #16
   1a24e:	3b0c      	subs	r3, #12
   1a250:	4611      	mov	r1, r2
   1a252:	6818      	ldr	r0, [r3, #0]
   1a254:	4b43      	ldr	r3, [pc, #268]	; (1a364 <_ZN13N25Q256_Class8SelfTestEv+0x1c4>)
   1a256:	4798      	blx	r3
	WaitOnBusy();
   1a258:	f107 0310 	add.w	r3, r7, #16
   1a25c:	3b0c      	subs	r3, #12
   1a25e:	6818      	ldr	r0, [r3, #0]
   1a260:	4b41      	ldr	r3, [pc, #260]	; (1a368 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   1a262:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1a264:	f107 0310 	add.w	r3, r7, #16
   1a268:	3b0c      	subs	r3, #12
   1a26a:	681b      	ldr	r3, [r3, #0]
   1a26c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a270:	f107 0110 	add.w	r1, r7, #16
   1a274:	3908      	subs	r1, #8
   1a276:	f107 0010 	add.w	r0, r7, #16
   1a27a:	380c      	subs	r0, #12
   1a27c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a280:	6800      	ldr	r0, [r0, #0]
   1a282:	4c3a      	ldr	r4, [pc, #232]	; (1a36c <_ZN13N25Q256_Class8SelfTestEv+0x1cc>)
   1a284:	47a0      	blx	r4
	WaitOnBusy();
   1a286:	f107 0310 	add.w	r3, r7, #16
   1a28a:	3b0c      	subs	r3, #12
   1a28c:	6818      	ldr	r0, [r3, #0]
   1a28e:	4b36      	ldr	r3, [pc, #216]	; (1a368 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   1a290:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   1a292:	f107 0310 	add.w	r3, r7, #16
   1a296:	3b0c      	subs	r3, #12
   1a298:	681b      	ldr	r3, [r3, #0]
   1a29a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1a29e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   1a2a2:	f101 0110 	add.w	r1, r1, #16
   1a2a6:	3908      	subs	r1, #8
   1a2a8:	f107 0010 	add.w	r0, r7, #16
   1a2ac:	380c      	subs	r0, #12
   1a2ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a2b2:	6800      	ldr	r0, [r0, #0]
   1a2b4:	4c2e      	ldr	r4, [pc, #184]	; (1a370 <_ZN13N25Q256_Class8SelfTestEv+0x1d0>)
   1a2b6:	47a0      	blx	r4
	WaitOnBusy();
   1a2b8:	f107 0310 	add.w	r3, r7, #16
   1a2bc:	3b0c      	subs	r3, #12
   1a2be:	6818      	ldr	r0, [r3, #0]
   1a2c0:	4b29      	ldr	r3, [pc, #164]	; (1a368 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   1a2c2:	4798      	blx	r3
	isOK	 = true;
   1a2c4:	f107 0310 	add.w	r3, r7, #16
   1a2c8:	3b0c      	subs	r3, #12
   1a2ca:	681b      	ldr	r3, [r3, #0]
   1a2cc:	2201      	movs	r2, #1
   1a2ce:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a2d8:	f102 0208 	add.w	r2, r2, #8
   1a2dc:	6013      	str	r3, [r2, #0]
   1a2de:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a2e2:	f103 0308 	add.w	r3, r3, #8
   1a2e6:	681b      	ldr	r3, [r3, #0]
   1a2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a2ec:	da2b      	bge.n	1a346 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1a2ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1a2f2:	f103 0310 	add.w	r3, r3, #16
   1a2f6:	3b08      	subs	r3, #8
   1a2f8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a2fc:	f102 0208 	add.w	r2, r2, #8
   1a300:	6812      	ldr	r2, [r2, #0]
   1a302:	4413      	add	r3, r2
   1a304:	781a      	ldrb	r2, [r3, #0]
   1a306:	f107 0310 	add.w	r3, r7, #16
   1a30a:	3b08      	subs	r3, #8
   1a30c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   1a310:	f101 0108 	add.w	r1, r1, #8
   1a314:	6809      	ldr	r1, [r1, #0]
   1a316:	440b      	add	r3, r1
   1a318:	781b      	ldrb	r3, [r3, #0]
   1a31a:	429a      	cmp	r2, r3
   1a31c:	d007      	beq.n	1a32e <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   1a31e:	f107 0310 	add.w	r3, r7, #16
   1a322:	3b0c      	subs	r3, #12
   1a324:	681b      	ldr	r3, [r3, #0]
   1a326:	2200      	movs	r2, #0
   1a328:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1a32c:	e00b      	b.n	1a346 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1a32e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1a332:	f103 0308 	add.w	r3, r3, #8
   1a336:	681b      	ldr	r3, [r3, #0]
   1a338:	3301      	adds	r3, #1
   1a33a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1a33e:	f102 0208 	add.w	r2, r2, #8
   1a342:	6013      	str	r3, [r2, #0]
   1a344:	e7cb      	b.n	1a2de <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   1a346:	f107 0310 	add.w	r3, r7, #16
   1a34a:	3b0c      	subs	r3, #12
   1a34c:	681b      	ldr	r3, [r3, #0]
   1a34e:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   1a352:	4618      	mov	r0, r3
   1a354:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1a358:	3714      	adds	r7, #20
   1a35a:	46bd      	mov	sp, r7
   1a35c:	bd90      	pop	{r4, r7, pc}
   1a35e:	bf00      	nop
   1a360:	0001b2b1 	.word	0x0001b2b1
   1a364:	0001a045 	.word	0x0001a045
   1a368:	0001a159 	.word	0x0001a159
   1a36c:	0001a075 	.word	0x0001a075
   1a370:	0001a0a9 	.word	0x0001a0a9

0001a374 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   1a374:	b580      	push	{r7, lr}
   1a376:	b082      	sub	sp, #8
   1a378:	af00      	add	r7, sp, #0
   1a37a:	6078      	str	r0, [r7, #4]
   1a37c:	6039      	str	r1, [r7, #0]
   1a37e:	687b      	ldr	r3, [r7, #4]
   1a380:	2b01      	cmp	r3, #1
   1a382:	d10d      	bne.n	1a3a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a384:	683b      	ldr	r3, [r7, #0]
   1a386:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a38a:	4293      	cmp	r3, r2
   1a38c:	d108      	bne.n	1a3a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a38e:	4906      	ldr	r1, [pc, #24]	; (1a3a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1a390:	4806      	ldr	r0, [pc, #24]	; (1a3ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a392:	4b07      	ldr	r3, [pc, #28]	; (1a3b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1a394:	4798      	blx	r3
   1a396:	4a07      	ldr	r2, [pc, #28]	; (1a3b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1a398:	4907      	ldr	r1, [pc, #28]	; (1a3b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1a39a:	4804      	ldr	r0, [pc, #16]	; (1a3ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a39c:	4b07      	ldr	r3, [pc, #28]	; (1a3bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1a39e:	4798      	blx	r3
   1a3a0:	bf00      	nop
   1a3a2:	3708      	adds	r7, #8
   1a3a4:	46bd      	mov	sp, r7
   1a3a6:	bd80      	pop	{r7, pc}
   1a3a8:	2000dfe8 	.word	0x2000dfe8
   1a3ac:	2000dc6c 	.word	0x2000dc6c
   1a3b0:	00019f9d 	.word	0x00019f9d
   1a3b4:	20000000 	.word	0x20000000
   1a3b8:	00019fc5 	.word	0x00019fc5
   1a3bc:	0001ab61 	.word	0x0001ab61

0001a3c0 <_GLOBAL__sub_I_ptrN25Q256Class>:
   1a3c0:	b580      	push	{r7, lr}
   1a3c2:	af00      	add	r7, sp, #0
   1a3c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a3c8:	2001      	movs	r0, #1
   1a3ca:	4b01      	ldr	r3, [pc, #4]	; (1a3d0 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1a3cc:	4798      	blx	r3
   1a3ce:	bd80      	pop	{r7, pc}
   1a3d0:	0001a375 	.word	0x0001a375

0001a3d4 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   1a3d4:	b580      	push	{r7, lr}
   1a3d6:	b082      	sub	sp, #8
   1a3d8:	af00      	add	r7, sp, #0
   1a3da:	6078      	str	r0, [r7, #4]
   1a3dc:	687b      	ldr	r3, [r7, #4]
   1a3de:	4618      	mov	r0, r3
   1a3e0:	4b06      	ldr	r3, [pc, #24]	; (1a3fc <_ZN14Calendar_ClassC1Ev+0x28>)
   1a3e2:	4798      	blx	r3
   1a3e4:	4a06      	ldr	r2, [pc, #24]	; (1a400 <_ZN14Calendar_ClassC1Ev+0x2c>)
   1a3e6:	687b      	ldr	r3, [r7, #4]
   1a3e8:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   1a3ea:	4a06      	ldr	r2, [pc, #24]	; (1a404 <_ZN14Calendar_ClassC1Ev+0x30>)
   1a3ec:	687b      	ldr	r3, [r7, #4]
   1a3ee:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1a3f0:	687b      	ldr	r3, [r7, #4]
   1a3f2:	4618      	mov	r0, r3
   1a3f4:	3708      	adds	r7, #8
   1a3f6:	46bd      	mov	sp, r7
   1a3f8:	bd80      	pop	{r7, pc}
   1a3fa:	bf00      	nop
   1a3fc:	0001ab21 	.word	0x0001ab21
   1a400:	0001c778 	.word	0x0001c778
   1a404:	2000dea0 	.word	0x2000dea0

0001a408 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   1a408:	b580      	push	{r7, lr}
   1a40a:	b082      	sub	sp, #8
   1a40c:	af00      	add	r7, sp, #0
   1a40e:	6078      	str	r0, [r7, #4]
   1a410:	6039      	str	r1, [r7, #0]
   1a412:	687b      	ldr	r3, [r7, #4]
   1a414:	4618      	mov	r0, r3
   1a416:	4b08      	ldr	r3, [pc, #32]	; (1a438 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   1a418:	4798      	blx	r3
   1a41a:	4a08      	ldr	r2, [pc, #32]	; (1a43c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   1a41c:	687b      	ldr	r3, [r7, #4]
   1a41e:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   1a420:	687b      	ldr	r3, [r7, #4]
   1a422:	683a      	ldr	r2, [r7, #0]
   1a424:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   1a428:	4a05      	ldr	r2, [pc, #20]	; (1a440 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   1a42a:	687b      	ldr	r3, [r7, #4]
   1a42c:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1a42e:	687b      	ldr	r3, [r7, #4]
   1a430:	4618      	mov	r0, r3
   1a432:	3708      	adds	r7, #8
   1a434:	46bd      	mov	sp, r7
   1a436:	bd80      	pop	{r7, pc}
   1a438:	0001ab21 	.word	0x0001ab21
   1a43c:	0001c778 	.word	0x0001c778
   1a440:	2000dea0 	.word	0x2000dea0

0001a444 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   1a444:	b580      	push	{r7, lr}
   1a446:	b082      	sub	sp, #8
   1a448:	af00      	add	r7, sp, #0
   1a44a:	6078      	str	r0, [r7, #4]
   1a44c:	4a05      	ldr	r2, [pc, #20]	; (1a464 <_ZN14Calendar_ClassD1Ev+0x20>)
   1a44e:	687b      	ldr	r3, [r7, #4]
   1a450:	601a      	str	r2, [r3, #0]
   1a452:	687b      	ldr	r3, [r7, #4]
   1a454:	4618      	mov	r0, r3
   1a456:	4b04      	ldr	r3, [pc, #16]	; (1a468 <_ZN14Calendar_ClassD1Ev+0x24>)
   1a458:	4798      	blx	r3
{
} //~Calendar_Class
   1a45a:	687b      	ldr	r3, [r7, #4]
   1a45c:	4618      	mov	r0, r3
   1a45e:	3708      	adds	r7, #8
   1a460:	46bd      	mov	sp, r7
   1a462:	bd80      	pop	{r7, pc}
   1a464:	0001c778 	.word	0x0001c778
   1a468:	0001ab41 	.word	0x0001ab41

0001a46c <_ZN14Calendar_Class4InitE18calendar_date_time>:
	SaveCurrentDateTime();
	
}


bool	Calendar_Class::Init(calendar_date_time dt_memory){
   1a46c:	b580      	push	{r7, lr}
   1a46e:	b084      	sub	sp, #16
   1a470:	af00      	add	r7, sp, #0
   1a472:	60f8      	str	r0, [r7, #12]
   1a474:	1d3b      	adds	r3, r7, #4
   1a476:	e883 0006 	stmia.w	r3, {r1, r2}

	calendar_enable(ptrCalendar);
   1a47a:	68fb      	ldr	r3, [r7, #12]
   1a47c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a480:	4618      	mov	r0, r3
   1a482:	4b4c      	ldr	r3, [pc, #304]	; (1a5b4 <_ZN14Calendar_Class4InitE18calendar_date_time+0x148>)
   1a484:	4798      	blx	r3
	
	InitReferenceDates();
   1a486:	68f8      	ldr	r0, [r7, #12]
   1a488:	4b4b      	ldr	r3, [pc, #300]	; (1a5b8 <_ZN14Calendar_Class4InitE18calendar_date_time+0x14c>)
   1a48a:	4798      	blx	r3
	lastDateTime=dt_memory;
   1a48c:	68fb      	ldr	r3, [r7, #12]
   1a48e:	3360      	adds	r3, #96	; 0x60
   1a490:	1d3a      	adds	r2, r7, #4
   1a492:	e892 0003 	ldmia.w	r2, {r0, r1}
   1a496:	e883 0003 	stmia.w	r3, {r0, r1}
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   1a49a:	68fb      	ldr	r3, [r7, #12]
   1a49c:	681b      	ldr	r3, [r3, #0]
   1a49e:	3304      	adds	r3, #4
   1a4a0:	681b      	ldr	r3, [r3, #0]
   1a4a2:	68fa      	ldr	r2, [r7, #12]
   1a4a4:	3260      	adds	r2, #96	; 0x60
   1a4a6:	4611      	mov	r1, r2
   1a4a8:	68f8      	ldr	r0, [r7, #12]
   1a4aa:	4798      	blx	r3
   1a4ac:	4602      	mov	r2, r0
   1a4ae:	68fb      	ldr	r3, [r7, #12]
   1a4b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   1a4b4:	68fb      	ldr	r3, [r7, #12]
   1a4b6:	681b      	ldr	r3, [r3, #0]
   1a4b8:	3304      	adds	r3, #4
   1a4ba:	681b      	ldr	r3, [r3, #0]
   1a4bc:	68fa      	ldr	r2, [r7, #12]
   1a4be:	326c      	adds	r2, #108	; 0x6c
   1a4c0:	4611      	mov	r1, r2
   1a4c2:	68f8      	ldr	r0, [r7, #12]
   1a4c4:	4798      	blx	r3
   1a4c6:	4602      	mov	r2, r0
   1a4c8:	68fb      	ldr	r3, [r7, #12]
   1a4ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   1a4ce:	68fb      	ldr	r3, [r7, #12]
   1a4d0:	681b      	ldr	r3, [r3, #0]
   1a4d2:	3304      	adds	r3, #4
   1a4d4:	681b      	ldr	r3, [r3, #0]
   1a4d6:	68fa      	ldr	r2, [r7, #12]
   1a4d8:	327c      	adds	r2, #124	; 0x7c
   1a4da:	4611      	mov	r1, r2
   1a4dc:	68f8      	ldr	r0, [r7, #12]
   1a4de:	4798      	blx	r3
   1a4e0:	4602      	mov	r2, r0
   1a4e2:	68fb      	ldr	r3, [r7, #12]
   1a4e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   1a4e8:	68fb      	ldr	r3, [r7, #12]
   1a4ea:	681b      	ldr	r3, [r3, #0]
   1a4ec:	3304      	adds	r3, #4
   1a4ee:	681b      	ldr	r3, [r3, #0]
   1a4f0:	68fa      	ldr	r2, [r7, #12]
   1a4f2:	3284      	adds	r2, #132	; 0x84
   1a4f4:	4611      	mov	r1, r2
   1a4f6:	68f8      	ldr	r0, [r7, #12]
   1a4f8:	4798      	blx	r3
   1a4fa:	4602      	mov	r2, r0
   1a4fc:	68fb      	ldr	r3, [r7, #12]
   1a4fe:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   1a500:	68f8      	ldr	r0, [r7, #12]
   1a502:	4b2e      	ldr	r3, [pc, #184]	; (1a5bc <_ZN14Calendar_Class4InitE18calendar_date_time+0x150>)
   1a504:	4798      	blx	r3
	compilationTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   1a506:	68fb      	ldr	r3, [r7, #12]
   1a508:	681b      	ldr	r3, [r3, #0]
   1a50a:	3304      	adds	r3, #4
   1a50c:	681b      	ldr	r3, [r3, #0]
   1a50e:	68fa      	ldr	r2, [r7, #12]
   1a510:	3274      	adds	r2, #116	; 0x74
   1a512:	4611      	mov	r1, r2
   1a514:	68f8      	ldr	r0, [r7, #12]
   1a516:	4798      	blx	r3
   1a518:	4602      	mov	r2, r0
   1a51a:	68fb      	ldr	r3, [r7, #12]
   1a51c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   1a520:	68fb      	ldr	r3, [r7, #12]
   1a522:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a526:	68fb      	ldr	r3, [r7, #12]
   1a528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   1a52c:	429a      	cmp	r2, r3
   1a52e:	d80e      	bhi.n	1a54e <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   1a530:	68fb      	ldr	r3, [r7, #12]
   1a532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a536:	68fb      	ldr	r3, [r7, #12]
   1a538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1a53c:	429a      	cmp	r2, r3
   1a53e:	d006      	beq.n	1a54e <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   1a540:	68fb      	ldr	r3, [r7, #12]
   1a542:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a546:	68fb      	ldr	r3, [r7, #12]
   1a548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1a54a:	429a      	cmp	r2, r3
   1a54c:	d106      	bne.n	1a55c <_ZN14Calendar_Class4InitE18calendar_date_time+0xf0>
	{
		SetDateTime(&compilationDateTime);
   1a54e:	68fb      	ldr	r3, [r7, #12]
   1a550:	3374      	adds	r3, #116	; 0x74
   1a552:	4619      	mov	r1, r3
   1a554:	68f8      	ldr	r0, [r7, #12]
   1a556:	4b1a      	ldr	r3, [pc, #104]	; (1a5c0 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a558:	4798      	blx	r3
   1a55a:	e022      	b.n	1a5a2 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
	}
	else
	{
		if (lastTimestamp<compilationTimestamp)
   1a55c:	68fb      	ldr	r3, [r7, #12]
   1a55e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a562:	68fb      	ldr	r3, [r7, #12]
   1a564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1a568:	429a      	cmp	r2, r3
   1a56a:	d206      	bcs.n	1a57a <_ZN14Calendar_Class4InitE18calendar_date_time+0x10e>
		{
			SetDateTime(&compilationDateTime);
   1a56c:	68fb      	ldr	r3, [r7, #12]
   1a56e:	3374      	adds	r3, #116	; 0x74
   1a570:	4619      	mov	r1, r3
   1a572:	68f8      	ldr	r0, [r7, #12]
   1a574:	4b12      	ldr	r3, [pc, #72]	; (1a5c0 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a576:	4798      	blx	r3
   1a578:	e013      	b.n	1a5a2 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   1a57a:	68fb      	ldr	r3, [r7, #12]
   1a57c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a580:	68fb      	ldr	r3, [r7, #12]
   1a582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1a584:	429a      	cmp	r2, r3
   1a586:	d106      	bne.n	1a596 <_ZN14Calendar_Class4InitE18calendar_date_time+0x12a>
			{
				SetDateTime(&compilationDateTime);
   1a588:	68fb      	ldr	r3, [r7, #12]
   1a58a:	3374      	adds	r3, #116	; 0x74
   1a58c:	4619      	mov	r1, r3
   1a58e:	68f8      	ldr	r0, [r7, #12]
   1a590:	4b0b      	ldr	r3, [pc, #44]	; (1a5c0 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a592:	4798      	blx	r3
   1a594:	e005      	b.n	1a5a2 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
			}
			else
			{
				SetDateTime(&lastDateTime);
   1a596:	68fb      	ldr	r3, [r7, #12]
   1a598:	3360      	adds	r3, #96	; 0x60
   1a59a:	4619      	mov	r1, r3
   1a59c:	68f8      	ldr	r0, [r7, #12]
   1a59e:	4b08      	ldr	r3, [pc, #32]	; (1a5c0 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a5a0:	4798      	blx	r3
			}
			
		}
	}
	enlapsedTime=false;
   1a5a2:	68fb      	ldr	r3, [r7, #12]
   1a5a4:	2200      	movs	r2, #0
   1a5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	return true;
   1a5aa:	2301      	movs	r3, #1
}
   1a5ac:	4618      	mov	r0, r3
   1a5ae:	3710      	adds	r7, #16
   1a5b0:	46bd      	mov	sp, r7
   1a5b2:	bd80      	pop	{r7, pc}
   1a5b4:	00003221 	.word	0x00003221
   1a5b8:	0001a5c5 	.word	0x0001a5c5
   1a5bc:	0001a66d 	.word	0x0001a66d
   1a5c0:	0001a871 	.word	0x0001a871

0001a5c4 <_ZN14Calendar_Class18InitReferenceDatesEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitReferenceDates(void){
   1a5c4:	b480      	push	{r7}
   1a5c6:	b083      	sub	sp, #12
   1a5c8:	af00      	add	r7, sp, #0
   1a5ca:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   1a5cc:	687b      	ldr	r3, [r7, #4]
   1a5ce:	f640 0202 	movw	r2, #2050	; 0x802
   1a5d2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   1a5d6:	687b      	ldr	r3, [r7, #4]
   1a5d8:	220c      	movs	r2, #12
   1a5da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   1a5de:	687b      	ldr	r3, [r7, #4]
   1a5e0:	221f      	movs	r2, #31
   1a5e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   1a5e6:	687b      	ldr	r3, [r7, #4]
   1a5e8:	220c      	movs	r2, #12
   1a5ea:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   1a5ee:	687b      	ldr	r3, [r7, #4]
   1a5f0:	223b      	movs	r2, #59	; 0x3b
   1a5f2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   1a5f6:	687b      	ldr	r3, [r7, #4]
   1a5f8:	223b      	movs	r2, #59	; 0x3b
   1a5fa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   1a5fe:	687b      	ldr	r3, [r7, #4]
   1a600:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a604:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   1a608:	687b      	ldr	r3, [r7, #4]
   1a60a:	22ff      	movs	r2, #255	; 0xff
   1a60c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   1a610:	687b      	ldr	r3, [r7, #4]
   1a612:	22ff      	movs	r2, #255	; 0xff
   1a614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   1a618:	687b      	ldr	r3, [r7, #4]
   1a61a:	22ff      	movs	r2, #255	; 0xff
   1a61c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   1a620:	687b      	ldr	r3, [r7, #4]
   1a622:	22ff      	movs	r2, #255	; 0xff
   1a624:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   1a628:	687b      	ldr	r3, [r7, #4]
   1a62a:	22ff      	movs	r2, #255	; 0xff
   1a62c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   1a630:	687b      	ldr	r3, [r7, #4]
   1a632:	2200      	movs	r2, #0
   1a634:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   1a638:	687b      	ldr	r3, [r7, #4]
   1a63a:	2200      	movs	r2, #0
   1a63c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	2200      	movs	r2, #0
   1a644:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   1a648:	687b      	ldr	r3, [r7, #4]
   1a64a:	2200      	movs	r2, #0
   1a64c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   1a650:	687b      	ldr	r3, [r7, #4]
   1a652:	2200      	movs	r2, #0
   1a654:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   1a658:	687b      	ldr	r3, [r7, #4]
   1a65a:	2200      	movs	r2, #0
   1a65c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   1a660:	bf00      	nop
   1a662:	370c      	adds	r7, #12
   1a664:	46bd      	mov	sp, r7
   1a666:	bc80      	pop	{r7}
   1a668:	4770      	bx	lr
	...

0001a66c <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   1a66c:	b480      	push	{r7}
   1a66e:	b083      	sub	sp, #12
   1a670:	af00      	add	r7, sp, #0
   1a672:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   1a674:	2332      	movs	r3, #50	; 0x32
   1a676:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1a67a:	4613      	mov	r3, r2
   1a67c:	009b      	lsls	r3, r3, #2
   1a67e:	4413      	add	r3, r2
   1a680:	005b      	lsls	r3, r3, #1
   1a682:	461a      	mov	r2, r3
   1a684:	2330      	movs	r3, #48	; 0x30
   1a686:	3b30      	subs	r3, #48	; 0x30
   1a688:	441a      	add	r2, r3
   1a68a:	4613      	mov	r3, r2
   1a68c:	009b      	lsls	r3, r3, #2
   1a68e:	4413      	add	r3, r2
   1a690:	005b      	lsls	r3, r3, #1
   1a692:	461a      	mov	r2, r3
   1a694:	2332      	movs	r3, #50	; 0x32
   1a696:	3b30      	subs	r3, #48	; 0x30
   1a698:	4413      	add	r3, r2
   1a69a:	b29b      	uxth	r3, r3
   1a69c:	461a      	mov	r2, r3
   1a69e:	0092      	lsls	r2, r2, #2
   1a6a0:	4413      	add	r3, r2
   1a6a2:	005b      	lsls	r3, r3, #1
   1a6a4:	b29a      	uxth	r2, r3
   1a6a6:	2331      	movs	r3, #49	; 0x31
   1a6a8:	b29b      	uxth	r3, r3
   1a6aa:	4413      	add	r3, r2
   1a6ac:	b29b      	uxth	r3, r3
   1a6ae:	3b30      	subs	r3, #48	; 0x30
   1a6b0:	b29a      	uxth	r2, r3
   1a6b2:	687b      	ldr	r3, [r7, #4]
   1a6b4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1a6b8:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6ba:	2b6e      	cmp	r3, #110	; 0x6e
   1a6bc:	d106      	bne.n	1a6cc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1a6be:	2365      	movs	r3, #101	; 0x65
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6c0:	2b61      	cmp	r3, #97	; 0x61
   1a6c2:	d101      	bne.n	1a6c8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   1a6c4:	2301      	movs	r3, #1
   1a6c6:	e02f      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a6c8:	2306      	movs	r3, #6
   1a6ca:	e02d      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   1a6cc:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6ce:	2b62      	cmp	r3, #98	; 0x62
   1a6d0:	d029      	beq.n	1a726 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   1a6d2:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6d4:	2b72      	cmp	r3, #114	; 0x72
   1a6d6:	d106      	bne.n	1a6e6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   1a6d8:	2346      	movs	r3, #70	; 0x46
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6da:	2b4d      	cmp	r3, #77	; 0x4d
   1a6dc:	d101      	bne.n	1a6e2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   1a6de:	2303      	movs	r3, #3
   1a6e0:	e022      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a6e2:	2304      	movs	r3, #4
   1a6e4:	e020      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   1a6e6:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6e8:	2b79      	cmp	r3, #121	; 0x79
   1a6ea:	d01a      	beq.n	1a722 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   1a6ec:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6ee:	2b6c      	cmp	r3, #108	; 0x6c
   1a6f0:	d015      	beq.n	1a71e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   1a6f2:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6f4:	2b67      	cmp	r3, #103	; 0x67
   1a6f6:	d010      	beq.n	1a71a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   1a6f8:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a6fa:	2b70      	cmp	r3, #112	; 0x70
   1a6fc:	d00b      	beq.n	1a716 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   1a6fe:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a700:	2b74      	cmp	r3, #116	; 0x74
   1a702:	d006      	beq.n	1a712 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   1a704:	2362      	movs	r3, #98	; 0x62
   1a706:	2b76      	cmp	r3, #118	; 0x76
   1a708:	d101      	bne.n	1a70e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   1a70a:	230b      	movs	r3, #11
   1a70c:	e00c      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a70e:	230c      	movs	r3, #12
   1a710:	e00a      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a712:	230a      	movs	r3, #10
   1a714:	e008      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a716:	2309      	movs	r3, #9
   1a718:	e006      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a71a:	2308      	movs	r3, #8
   1a71c:	e004      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a71e:	2307      	movs	r3, #7
   1a720:	e002      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a722:	2305      	movs	r3, #5
   1a724:	e000      	b.n	1a728 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a726:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1a728:	687a      	ldr	r2, [r7, #4]
   1a72a:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   1a72e:	2331      	movs	r3, #49	; 0x31
   1a730:	2b20      	cmp	r3, #32
   1a732:	d008      	beq.n	1a746 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   1a734:	2331      	movs	r3, #49	; 0x31
   1a736:	3b30      	subs	r3, #48	; 0x30
   1a738:	b2db      	uxtb	r3, r3
   1a73a:	461a      	mov	r2, r3
   1a73c:	0092      	lsls	r2, r2, #2
   1a73e:	4413      	add	r3, r2
   1a740:	005b      	lsls	r3, r3, #1
   1a742:	b2db      	uxtb	r3, r3
   1a744:	e000      	b.n	1a748 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   1a746:	2300      	movs	r3, #0
   1a748:	2230      	movs	r2, #48	; 0x30
   1a74a:	4413      	add	r3, r2
   1a74c:	b2db      	uxtb	r3, r3
   1a74e:	3b30      	subs	r3, #48	; 0x30
   1a750:	b2da      	uxtb	r2, r3
   1a752:	687b      	ldr	r3, [r7, #4]
   1a754:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   1a758:	2332      	movs	r3, #50	; 0x32
   1a75a:	3b30      	subs	r3, #48	; 0x30
   1a75c:	b2db      	uxtb	r3, r3
   1a75e:	461a      	mov	r2, r3
   1a760:	0092      	lsls	r2, r2, #2
   1a762:	4413      	add	r3, r2
   1a764:	005b      	lsls	r3, r3, #1
   1a766:	b2db      	uxtb	r3, r3
   1a768:	2230      	movs	r2, #48	; 0x30
   1a76a:	4413      	add	r3, r2
   1a76c:	b2db      	uxtb	r3, r3
   1a76e:	3b30      	subs	r3, #48	; 0x30
   1a770:	b2da      	uxtb	r2, r3
   1a772:	687b      	ldr	r3, [r7, #4]
   1a774:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   1a778:	2331      	movs	r3, #49	; 0x31
   1a77a:	3b30      	subs	r3, #48	; 0x30
   1a77c:	b2db      	uxtb	r3, r3
   1a77e:	461a      	mov	r2, r3
   1a780:	0092      	lsls	r2, r2, #2
   1a782:	4413      	add	r3, r2
   1a784:	005b      	lsls	r3, r3, #1
   1a786:	b2db      	uxtb	r3, r3
   1a788:	2235      	movs	r2, #53	; 0x35
   1a78a:	4413      	add	r3, r2
   1a78c:	b2db      	uxtb	r3, r3
   1a78e:	3b30      	subs	r3, #48	; 0x30
   1a790:	b2da      	uxtb	r2, r3
   1a792:	687b      	ldr	r3, [r7, #4]
   1a794:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   1a798:	2333      	movs	r3, #51	; 0x33
   1a79a:	3b30      	subs	r3, #48	; 0x30
   1a79c:	b2db      	uxtb	r3, r3
   1a79e:	461a      	mov	r2, r3
   1a7a0:	0092      	lsls	r2, r2, #2
   1a7a2:	4413      	add	r3, r2
   1a7a4:	005b      	lsls	r3, r3, #1
   1a7a6:	b2db      	uxtb	r3, r3
   1a7a8:	2234      	movs	r2, #52	; 0x34
   1a7aa:	4413      	add	r3, r2
   1a7ac:	b2db      	uxtb	r3, r3
   1a7ae:	3b30      	subs	r3, #48	; 0x30
   1a7b0:	b2da      	uxtb	r2, r3
   1a7b2:	687b      	ldr	r3, [r7, #4]
   1a7b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		compiled_time=__TIME__;
   1a7b8:	687b      	ldr	r3, [r7, #4]
   1a7ba:	4a04      	ldr	r2, [pc, #16]	; (1a7cc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x160>)
   1a7bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
   1a7c0:	bf00      	nop
   1a7c2:	370c      	adds	r7, #12
   1a7c4:	46bd      	mov	sp, r7
   1a7c6:	bc80      	pop	{r7}
   1a7c8:	4770      	bx	lr
   1a7ca:	bf00      	nop
   1a7cc:	0001c764 	.word	0x0001c764

0001a7d0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1a7d0:	b580      	push	{r7, lr}
   1a7d2:	b082      	sub	sp, #8
   1a7d4:	af00      	add	r7, sp, #0
   1a7d6:	6078      	str	r0, [r7, #4]
   1a7d8:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a7e0:	6839      	ldr	r1, [r7, #0]
   1a7e2:	4618      	mov	r0, r3
   1a7e4:	4b03      	ldr	r3, [pc, #12]	; (1a7f4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   1a7e6:	4798      	blx	r3
   1a7e8:	4603      	mov	r3, r0
}
   1a7ea:	4618      	mov	r0, r3
   1a7ec:	3708      	adds	r7, #8
   1a7ee:	46bd      	mov	sp, r7
   1a7f0:	bd80      	pop	{r7, pc}
   1a7f2:	bf00      	nop
   1a7f4:	00003371 	.word	0x00003371

0001a7f8 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   1a7f8:	b480      	push	{r7}
   1a7fa:	b083      	sub	sp, #12
   1a7fc:	af00      	add	r7, sp, #0
   1a7fe:	6078      	str	r0, [r7, #4]
   1a800:	460b      	mov	r3, r1
   1a802:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   1a804:	887b      	ldrh	r3, [r7, #2]
   1a806:	f003 0303 	and.w	r3, r3, #3
   1a80a:	2b00      	cmp	r3, #0
   1a80c:	d001      	beq.n	1a812 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1a80e:	2300      	movs	r3, #0
   1a810:	e000      	b.n	1a814 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   1a812:	2301      	movs	r3, #1
	}
}
   1a814:	4618      	mov	r0, r3
   1a816:	370c      	adds	r7, #12
   1a818:	46bd      	mov	sp, r7
   1a81a:	bc80      	pop	{r7}
   1a81c:	4770      	bx	lr
	...

0001a820 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   1a820:	b580      	push	{r7, lr}
   1a822:	b082      	sub	sp, #8
   1a824:	af00      	add	r7, sp, #0
   1a826:	6078      	str	r0, [r7, #4]
   1a828:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   1a82a:	687b      	ldr	r3, [r7, #4]
   1a82c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a830:	6839      	ldr	r1, [r7, #0]
   1a832:	4618      	mov	r0, r3
   1a834:	4b03      	ldr	r3, [pc, #12]	; (1a844 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   1a836:	4798      	blx	r3
   1a838:	4603      	mov	r3, r0
}
   1a83a:	4618      	mov	r0, r3
   1a83c:	3708      	adds	r7, #8
   1a83e:	46bd      	mov	sp, r7
   1a840:	bd80      	pop	{r7, pc}
   1a842:	bf00      	nop
   1a844:	00003261 	.word	0x00003261

0001a848 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   1a848:	b580      	push	{r7, lr}
   1a84a:	b082      	sub	sp, #8
   1a84c:	af00      	add	r7, sp, #0
   1a84e:	6078      	str	r0, [r7, #4]
   1a850:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   1a852:	687b      	ldr	r3, [r7, #4]
   1a854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a858:	6839      	ldr	r1, [r7, #0]
   1a85a:	4618      	mov	r0, r3
   1a85c:	4b03      	ldr	r3, [pc, #12]	; (1a86c <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   1a85e:	4798      	blx	r3
   1a860:	4603      	mov	r3, r0
}
   1a862:	4618      	mov	r0, r3
   1a864:	3708      	adds	r7, #8
   1a866:	46bd      	mov	sp, r7
   1a868:	bd80      	pop	{r7, pc}
   1a86a:	bf00      	nop
   1a86c:	000032e9 	.word	0x000032e9

0001a870 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   1a870:	b580      	push	{r7, lr}
   1a872:	b084      	sub	sp, #16
   1a874:	af00      	add	r7, sp, #0
   1a876:	6078      	str	r0, [r7, #4]
   1a878:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   1a87a:	683a      	ldr	r2, [r7, #0]
   1a87c:	f107 030c 	add.w	r3, r7, #12
   1a880:	3204      	adds	r2, #4
   1a882:	6810      	ldr	r0, [r2, #0]
   1a884:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   1a886:	f107 030c 	add.w	r3, r7, #12
   1a88a:	4619      	mov	r1, r3
   1a88c:	6878      	ldr	r0, [r7, #4]
   1a88e:	4b0a      	ldr	r3, [pc, #40]	; (1a8b8 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   1a890:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   1a892:	683a      	ldr	r2, [r7, #0]
   1a894:	f107 0308 	add.w	r3, r7, #8
   1a898:	8811      	ldrh	r1, [r2, #0]
   1a89a:	7892      	ldrb	r2, [r2, #2]
   1a89c:	8019      	strh	r1, [r3, #0]
   1a89e:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   1a8a0:	f107 0308 	add.w	r3, r7, #8
   1a8a4:	4619      	mov	r1, r3
   1a8a6:	6878      	ldr	r0, [r7, #4]
   1a8a8:	4b04      	ldr	r3, [pc, #16]	; (1a8bc <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   1a8aa:	4798      	blx	r3
   1a8ac:	4603      	mov	r3, r0
			
}
   1a8ae:	4618      	mov	r0, r3
   1a8b0:	3710      	adds	r7, #16
   1a8b2:	46bd      	mov	sp, r7
   1a8b4:	bd80      	pop	{r7, pc}
   1a8b6:	bf00      	nop
   1a8b8:	0001a849 	.word	0x0001a849
   1a8bc:	0001a821 	.word	0x0001a821

0001a8c0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1a8c0:	b580      	push	{r7, lr}
   1a8c2:	b086      	sub	sp, #24
   1a8c4:	af00      	add	r7, sp, #0
   1a8c6:	6078      	str	r0, [r7, #4]
   1a8c8:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   1a8ca:	2300      	movs	r3, #0
   1a8cc:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1a8ce:	2300      	movs	r3, #0
   1a8d0:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1a8d2:	683b      	ldr	r3, [r7, #0]
   1a8d4:	88db      	ldrh	r3, [r3, #6]
   1a8d6:	b2da      	uxtb	r2, r3
   1a8d8:	687b      	ldr	r3, [r7, #4]
   1a8da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a8de:	699b      	ldr	r3, [r3, #24]
   1a8e0:	b2db      	uxtb	r3, r3
   1a8e2:	1ad3      	subs	r3, r2, r3
   1a8e4:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   1a8e6:	683b      	ldr	r3, [r7, #0]
   1a8e8:	795b      	ldrb	r3, [r3, #5]
   1a8ea:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   1a8ec:	683b      	ldr	r3, [r7, #0]
   1a8ee:	791b      	ldrb	r3, [r3, #4]
   1a8f0:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   1a8f2:	683b      	ldr	r3, [r7, #0]
   1a8f4:	789b      	ldrb	r3, [r3, #2]
   1a8f6:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   1a8f8:	683b      	ldr	r3, [r7, #0]
   1a8fa:	785b      	ldrb	r3, [r3, #1]
   1a8fc:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1a8fe:	683b      	ldr	r3, [r7, #0]
   1a900:	781b      	ldrb	r3, [r3, #0]
   1a902:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   1a904:	2300      	movs	r3, #0
   1a906:	613b      	str	r3, [r7, #16]
   1a908:	7bfa      	ldrb	r2, [r7, #15]
   1a90a:	693b      	ldr	r3, [r7, #16]
   1a90c:	429a      	cmp	r2, r3
   1a90e:	d91e      	bls.n	1a94e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   1a910:	687b      	ldr	r3, [r7, #4]
   1a912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a916:	699b      	ldr	r3, [r3, #24]
   1a918:	b29a      	uxth	r2, r3
   1a91a:	693b      	ldr	r3, [r7, #16]
   1a91c:	b29b      	uxth	r3, r3
   1a91e:	4413      	add	r3, r2
   1a920:	b29b      	uxth	r3, r3
   1a922:	4619      	mov	r1, r3
   1a924:	6878      	ldr	r0, [r7, #4]
   1a926:	4b27      	ldr	r3, [pc, #156]	; (1a9c4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   1a928:	4798      	blx	r3
   1a92a:	4603      	mov	r3, r0
   1a92c:	2b00      	cmp	r3, #0
   1a92e:	d006      	beq.n	1a93e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   1a930:	697b      	ldr	r3, [r7, #20]
   1a932:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   1a936:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   1a93a:	617b      	str	r3, [r7, #20]
   1a93c:	e003      	b.n	1a946 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   1a93e:	697a      	ldr	r2, [r7, #20]
   1a940:	4b21      	ldr	r3, [pc, #132]	; (1a9c8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   1a942:	4413      	add	r3, r2
   1a944:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   1a946:	693b      	ldr	r3, [r7, #16]
   1a948:	3301      	adds	r3, #1
   1a94a:	613b      	str	r3, [r7, #16]
   1a94c:	e7dc      	b.n	1a908 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   1a94e:	2301      	movs	r3, #1
   1a950:	613b      	str	r3, [r7, #16]
   1a952:	7bba      	ldrb	r2, [r7, #14]
   1a954:	693b      	ldr	r3, [r7, #16]
   1a956:	429a      	cmp	r2, r3
   1a958:	d910      	bls.n	1a97c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   1a95a:	683b      	ldr	r3, [r7, #0]
   1a95c:	88db      	ldrh	r3, [r3, #6]
   1a95e:	4619      	mov	r1, r3
   1a960:	693b      	ldr	r3, [r7, #16]
   1a962:	b2db      	uxtb	r3, r3
   1a964:	461a      	mov	r2, r3
   1a966:	6878      	ldr	r0, [r7, #4]
   1a968:	4b18      	ldr	r3, [pc, #96]	; (1a9cc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   1a96a:	4798      	blx	r3
   1a96c:	4602      	mov	r2, r0
   1a96e:	697b      	ldr	r3, [r7, #20]
   1a970:	4413      	add	r3, r2
   1a972:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   1a974:	693b      	ldr	r3, [r7, #16]
   1a976:	3301      	adds	r3, #1
   1a978:	613b      	str	r3, [r7, #16]
   1a97a:	e7ea      	b.n	1a952 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   1a97c:	7b7b      	ldrb	r3, [r7, #13]
   1a97e:	3b01      	subs	r3, #1
   1a980:	4a13      	ldr	r2, [pc, #76]	; (1a9d0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1a982:	fb02 f303 	mul.w	r3, r2, r3
   1a986:	461a      	mov	r2, r3
   1a988:	697b      	ldr	r3, [r7, #20]
   1a98a:	4413      	add	r3, r2
   1a98c:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1a98e:	7b3b      	ldrb	r3, [r7, #12]
   1a990:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1a994:	fb02 f303 	mul.w	r3, r2, r3
   1a998:	461a      	mov	r2, r3
   1a99a:	697b      	ldr	r3, [r7, #20]
   1a99c:	4413      	add	r3, r2
   1a99e:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1a9a0:	7afa      	ldrb	r2, [r7, #11]
   1a9a2:	4613      	mov	r3, r2
   1a9a4:	011b      	lsls	r3, r3, #4
   1a9a6:	1a9b      	subs	r3, r3, r2
   1a9a8:	009b      	lsls	r3, r3, #2
   1a9aa:	461a      	mov	r2, r3
   1a9ac:	697b      	ldr	r3, [r7, #20]
   1a9ae:	4413      	add	r3, r2
   1a9b0:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1a9b2:	7abb      	ldrb	r3, [r7, #10]
   1a9b4:	697a      	ldr	r2, [r7, #20]
   1a9b6:	4413      	add	r3, r2
   1a9b8:	617b      	str	r3, [r7, #20]

	return tmp;
   1a9ba:	697b      	ldr	r3, [r7, #20]
}
   1a9bc:	4618      	mov	r0, r3
   1a9be:	3718      	adds	r7, #24
   1a9c0:	46bd      	mov	sp, r7
   1a9c2:	bd80      	pop	{r7, pc}
   1a9c4:	0001a7f9 	.word	0x0001a7f9
   1a9c8:	01e13380 	.word	0x01e13380
   1a9cc:	0001a9d5 	.word	0x0001a9d5
   1a9d0:	00015180 	.word	0x00015180

0001a9d4 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   1a9d4:	b580      	push	{r7, lr}
   1a9d6:	b086      	sub	sp, #24
   1a9d8:	af00      	add	r7, sp, #0
   1a9da:	60f8      	str	r0, [r7, #12]
   1a9dc:	60b9      	str	r1, [r7, #8]
   1a9de:	4613      	mov	r3, r2
   1a9e0:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   1a9e2:	2300      	movs	r3, #0
   1a9e4:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   1a9e6:	68bb      	ldr	r3, [r7, #8]
   1a9e8:	b29b      	uxth	r3, r3
   1a9ea:	4619      	mov	r1, r3
   1a9ec:	68f8      	ldr	r0, [r7, #12]
   1a9ee:	4b2f      	ldr	r3, [pc, #188]	; (1aaac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   1a9f0:	4798      	blx	r3
   1a9f2:	4603      	mov	r3, r0
   1a9f4:	2b00      	cmp	r3, #0
   1a9f6:	d028      	beq.n	1aa4a <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   1a9f8:	79fb      	ldrb	r3, [r7, #7]
   1a9fa:	3b01      	subs	r3, #1
   1a9fc:	2b0b      	cmp	r3, #11
   1a9fe:	d84c      	bhi.n	1aa9a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   1aa00:	a201      	add	r2, pc, #4	; (adr r2, 1aa08 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   1aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aa06:	bf00      	nop
   1aa08:	0001aa39 	.word	0x0001aa39
   1aa0c:	0001aa3f 	.word	0x0001aa3f
   1aa10:	0001aa39 	.word	0x0001aa39
   1aa14:	0001aa45 	.word	0x0001aa45
   1aa18:	0001aa39 	.word	0x0001aa39
   1aa1c:	0001aa45 	.word	0x0001aa45
   1aa20:	0001aa39 	.word	0x0001aa39
   1aa24:	0001aa39 	.word	0x0001aa39
   1aa28:	0001aa45 	.word	0x0001aa45
   1aa2c:	0001aa39 	.word	0x0001aa39
   1aa30:	0001aa45 	.word	0x0001aa45
   1aa34:	0001aa39 	.word	0x0001aa39
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   1aa38:	4b1d      	ldr	r3, [pc, #116]	; (1aab0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1aa3a:	617b      	str	r3, [r7, #20]
			break;
   1aa3c:	e030      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   1aa3e:	4b1d      	ldr	r3, [pc, #116]	; (1aab4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   1aa40:	617b      	str	r3, [r7, #20]
			break;
   1aa42:	e02d      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1aa44:	4b1c      	ldr	r3, [pc, #112]	; (1aab8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1aa46:	617b      	str	r3, [r7, #20]
			break;
   1aa48:	e02a      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   1aa4a:	79fb      	ldrb	r3, [r7, #7]
   1aa4c:	3b01      	subs	r3, #1
   1aa4e:	2b0b      	cmp	r3, #11
   1aa50:	d825      	bhi.n	1aa9e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   1aa52:	a201      	add	r2, pc, #4	; (adr r2, 1aa58 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   1aa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aa58:	0001aa89 	.word	0x0001aa89
   1aa5c:	0001aa8f 	.word	0x0001aa8f
   1aa60:	0001aa89 	.word	0x0001aa89
   1aa64:	0001aa95 	.word	0x0001aa95
   1aa68:	0001aa89 	.word	0x0001aa89
   1aa6c:	0001aa95 	.word	0x0001aa95
   1aa70:	0001aa89 	.word	0x0001aa89
   1aa74:	0001aa89 	.word	0x0001aa89
   1aa78:	0001aa95 	.word	0x0001aa95
   1aa7c:	0001aa89 	.word	0x0001aa89
   1aa80:	0001aa95 	.word	0x0001aa95
   1aa84:	0001aa89 	.word	0x0001aa89
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   1aa88:	4b09      	ldr	r3, [pc, #36]	; (1aab0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1aa8a:	617b      	str	r3, [r7, #20]
			break;
   1aa8c:	e008      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1aa8e:	4b0b      	ldr	r3, [pc, #44]	; (1aabc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1aa90:	617b      	str	r3, [r7, #20]
			break;
   1aa92:	e005      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1aa94:	4b08      	ldr	r3, [pc, #32]	; (1aab8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1aa96:	617b      	str	r3, [r7, #20]
			break;
   1aa98:	e002      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   1aa9a:	bf00      	nop
   1aa9c:	e000      	b.n	1aaa0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1aa9e:	bf00      	nop
		}
	}

	return sec_in_month;
   1aaa0:	697b      	ldr	r3, [r7, #20]
}
   1aaa2:	4618      	mov	r0, r3
   1aaa4:	3718      	adds	r7, #24
   1aaa6:	46bd      	mov	sp, r7
   1aaa8:	bd80      	pop	{r7, pc}
   1aaaa:	bf00      	nop
   1aaac:	0001a7f9 	.word	0x0001a7f9
   1aab0:	0028de80 	.word	0x0028de80
   1aab4:	00263b80 	.word	0x00263b80
   1aab8:	00278d00 	.word	0x00278d00
   1aabc:	0024ea00 	.word	0x0024ea00

0001aac0 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1aac0:	b580      	push	{r7, lr}
   1aac2:	b082      	sub	sp, #8
   1aac4:	af00      	add	r7, sp, #0
   1aac6:	6078      	str	r0, [r7, #4]
   1aac8:	6039      	str	r1, [r7, #0]
   1aaca:	687b      	ldr	r3, [r7, #4]
   1aacc:	2b01      	cmp	r3, #1
   1aace:	d10d      	bne.n	1aaec <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1aad0:	683b      	ldr	r3, [r7, #0]
   1aad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aad6:	4293      	cmp	r3, r2
   1aad8:	d108      	bne.n	1aaec <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1aada:	4906      	ldr	r1, [pc, #24]	; (1aaf4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1aadc:	4806      	ldr	r0, [pc, #24]	; (1aaf8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1aade:	4b07      	ldr	r3, [pc, #28]	; (1aafc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1aae0:	4798      	blx	r3
   1aae2:	4a07      	ldr	r2, [pc, #28]	; (1ab00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1aae4:	4907      	ldr	r1, [pc, #28]	; (1ab04 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1aae6:	4804      	ldr	r0, [pc, #16]	; (1aaf8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1aae8:	4b07      	ldr	r3, [pc, #28]	; (1ab08 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1aaea:	4798      	blx	r3
   1aaec:	bf00      	nop
   1aaee:	3708      	adds	r7, #8
   1aaf0:	46bd      	mov	sp, r7
   1aaf2:	bd80      	pop	{r7, pc}
   1aaf4:	2000e130 	.word	0x2000e130
   1aaf8:	2000dea8 	.word	0x2000dea8
   1aafc:	0001a409 	.word	0x0001a409
   1ab00:	20000000 	.word	0x20000000
   1ab04:	0001a445 	.word	0x0001a445
   1ab08:	0001ab61 	.word	0x0001ab61

0001ab0c <_GLOBAL__sub_I_ptrCalendarClass>:
   1ab0c:	b580      	push	{r7, lr}
   1ab0e:	af00      	add	r7, sp, #0
   1ab10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ab14:	2001      	movs	r0, #1
   1ab16:	4b01      	ldr	r3, [pc, #4]	; (1ab1c <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   1ab18:	4798      	blx	r3
   1ab1a:	bd80      	pop	{r7, pc}
   1ab1c:	0001aac1 	.word	0x0001aac1

0001ab20 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   1ab20:	b480      	push	{r7}
   1ab22:	b083      	sub	sp, #12
   1ab24:	af00      	add	r7, sp, #0
   1ab26:	6078      	str	r0, [r7, #4]
   1ab28:	4a04      	ldr	r2, [pc, #16]	; (1ab3c <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   1ab2a:	687b      	ldr	r3, [r7, #4]
   1ab2c:	601a      	str	r2, [r3, #0]
{
} //~D
   1ab2e:	687b      	ldr	r3, [r7, #4]
   1ab30:	4618      	mov	r0, r3
   1ab32:	370c      	adds	r7, #12
   1ab34:	46bd      	mov	sp, r7
   1ab36:	bc80      	pop	{r7}
   1ab38:	4770      	bx	lr
   1ab3a:	bf00      	nop
   1ab3c:	0001c788 	.word	0x0001c788

0001ab40 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   1ab40:	b480      	push	{r7}
   1ab42:	b083      	sub	sp, #12
   1ab44:	af00      	add	r7, sp, #0
   1ab46:	6078      	str	r0, [r7, #4]
   1ab48:	4a04      	ldr	r2, [pc, #16]	; (1ab5c <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   1ab4a:	687b      	ldr	r3, [r7, #4]
   1ab4c:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1ab4e:	687b      	ldr	r3, [r7, #4]
   1ab50:	4618      	mov	r0, r3
   1ab52:	370c      	adds	r7, #12
   1ab54:	46bd      	mov	sp, r7
   1ab56:	bc80      	pop	{r7}
   1ab58:	4770      	bx	lr
   1ab5a:	bf00      	nop
   1ab5c:	0001c788 	.word	0x0001c788

0001ab60 <__aeabi_atexit>:
   1ab60:	460b      	mov	r3, r1
   1ab62:	4601      	mov	r1, r0
   1ab64:	4618      	mov	r0, r3
   1ab66:	f000 ba7f 	b.w	1b068 <__cxa_atexit>
   1ab6a:	bf00      	nop

0001ab6c <__aeabi_frsub>:
   1ab6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1ab70:	e002      	b.n	1ab78 <__addsf3>
   1ab72:	bf00      	nop

0001ab74 <__aeabi_fsub>:
   1ab74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001ab78 <__addsf3>:
   1ab78:	0042      	lsls	r2, r0, #1
   1ab7a:	bf1f      	itttt	ne
   1ab7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1ab80:	ea92 0f03 	teqne	r2, r3
   1ab84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1ab88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ab8c:	d06a      	beq.n	1ac64 <__addsf3+0xec>
   1ab8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ab92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1ab96:	bfc1      	itttt	gt
   1ab98:	18d2      	addgt	r2, r2, r3
   1ab9a:	4041      	eorgt	r1, r0
   1ab9c:	4048      	eorgt	r0, r1
   1ab9e:	4041      	eorgt	r1, r0
   1aba0:	bfb8      	it	lt
   1aba2:	425b      	neglt	r3, r3
   1aba4:	2b19      	cmp	r3, #25
   1aba6:	bf88      	it	hi
   1aba8:	4770      	bxhi	lr
   1abaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1abae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1abb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1abb6:	bf18      	it	ne
   1abb8:	4240      	negne	r0, r0
   1abba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1abbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1abc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1abc6:	bf18      	it	ne
   1abc8:	4249      	negne	r1, r1
   1abca:	ea92 0f03 	teq	r2, r3
   1abce:	d03f      	beq.n	1ac50 <__addsf3+0xd8>
   1abd0:	f1a2 0201 	sub.w	r2, r2, #1
   1abd4:	fa41 fc03 	asr.w	ip, r1, r3
   1abd8:	eb10 000c 	adds.w	r0, r0, ip
   1abdc:	f1c3 0320 	rsb	r3, r3, #32
   1abe0:	fa01 f103 	lsl.w	r1, r1, r3
   1abe4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1abe8:	d502      	bpl.n	1abf0 <__addsf3+0x78>
   1abea:	4249      	negs	r1, r1
   1abec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1abf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1abf4:	d313      	bcc.n	1ac1e <__addsf3+0xa6>
   1abf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1abfa:	d306      	bcc.n	1ac0a <__addsf3+0x92>
   1abfc:	0840      	lsrs	r0, r0, #1
   1abfe:	ea4f 0131 	mov.w	r1, r1, rrx
   1ac02:	f102 0201 	add.w	r2, r2, #1
   1ac06:	2afe      	cmp	r2, #254	; 0xfe
   1ac08:	d251      	bcs.n	1acae <__addsf3+0x136>
   1ac0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1ac0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1ac12:	bf08      	it	eq
   1ac14:	f020 0001 	biceq.w	r0, r0, #1
   1ac18:	ea40 0003 	orr.w	r0, r0, r3
   1ac1c:	4770      	bx	lr
   1ac1e:	0049      	lsls	r1, r1, #1
   1ac20:	eb40 0000 	adc.w	r0, r0, r0
   1ac24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1ac28:	f1a2 0201 	sub.w	r2, r2, #1
   1ac2c:	d1ed      	bne.n	1ac0a <__addsf3+0x92>
   1ac2e:	fab0 fc80 	clz	ip, r0
   1ac32:	f1ac 0c08 	sub.w	ip, ip, #8
   1ac36:	ebb2 020c 	subs.w	r2, r2, ip
   1ac3a:	fa00 f00c 	lsl.w	r0, r0, ip
   1ac3e:	bfaa      	itet	ge
   1ac40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1ac44:	4252      	neglt	r2, r2
   1ac46:	4318      	orrge	r0, r3
   1ac48:	bfbc      	itt	lt
   1ac4a:	40d0      	lsrlt	r0, r2
   1ac4c:	4318      	orrlt	r0, r3
   1ac4e:	4770      	bx	lr
   1ac50:	f092 0f00 	teq	r2, #0
   1ac54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1ac58:	bf06      	itte	eq
   1ac5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1ac5e:	3201      	addeq	r2, #1
   1ac60:	3b01      	subne	r3, #1
   1ac62:	e7b5      	b.n	1abd0 <__addsf3+0x58>
   1ac64:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1ac68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1ac6c:	bf18      	it	ne
   1ac6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ac72:	d021      	beq.n	1acb8 <__addsf3+0x140>
   1ac74:	ea92 0f03 	teq	r2, r3
   1ac78:	d004      	beq.n	1ac84 <__addsf3+0x10c>
   1ac7a:	f092 0f00 	teq	r2, #0
   1ac7e:	bf08      	it	eq
   1ac80:	4608      	moveq	r0, r1
   1ac82:	4770      	bx	lr
   1ac84:	ea90 0f01 	teq	r0, r1
   1ac88:	bf1c      	itt	ne
   1ac8a:	2000      	movne	r0, #0
   1ac8c:	4770      	bxne	lr
   1ac8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1ac92:	d104      	bne.n	1ac9e <__addsf3+0x126>
   1ac94:	0040      	lsls	r0, r0, #1
   1ac96:	bf28      	it	cs
   1ac98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1ac9c:	4770      	bx	lr
   1ac9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1aca2:	bf3c      	itt	cc
   1aca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1aca8:	4770      	bxcc	lr
   1acaa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1acae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1acb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1acb6:	4770      	bx	lr
   1acb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1acbc:	bf16      	itet	ne
   1acbe:	4608      	movne	r0, r1
   1acc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1acc4:	4601      	movne	r1, r0
   1acc6:	0242      	lsls	r2, r0, #9
   1acc8:	bf06      	itte	eq
   1acca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1acce:	ea90 0f01 	teqeq	r0, r1
   1acd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1acd6:	4770      	bx	lr

0001acd8 <__aeabi_ui2f>:
   1acd8:	f04f 0300 	mov.w	r3, #0
   1acdc:	e004      	b.n	1ace8 <__aeabi_i2f+0x8>
   1acde:	bf00      	nop

0001ace0 <__aeabi_i2f>:
   1ace0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1ace4:	bf48      	it	mi
   1ace6:	4240      	negmi	r0, r0
   1ace8:	ea5f 0c00 	movs.w	ip, r0
   1acec:	bf08      	it	eq
   1acee:	4770      	bxeq	lr
   1acf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1acf4:	4601      	mov	r1, r0
   1acf6:	f04f 0000 	mov.w	r0, #0
   1acfa:	e01c      	b.n	1ad36 <__aeabi_l2f+0x2a>

0001acfc <__aeabi_ul2f>:
   1acfc:	ea50 0201 	orrs.w	r2, r0, r1
   1ad00:	bf08      	it	eq
   1ad02:	4770      	bxeq	lr
   1ad04:	f04f 0300 	mov.w	r3, #0
   1ad08:	e00a      	b.n	1ad20 <__aeabi_l2f+0x14>
   1ad0a:	bf00      	nop

0001ad0c <__aeabi_l2f>:
   1ad0c:	ea50 0201 	orrs.w	r2, r0, r1
   1ad10:	bf08      	it	eq
   1ad12:	4770      	bxeq	lr
   1ad14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1ad18:	d502      	bpl.n	1ad20 <__aeabi_l2f+0x14>
   1ad1a:	4240      	negs	r0, r0
   1ad1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ad20:	ea5f 0c01 	movs.w	ip, r1
   1ad24:	bf02      	ittt	eq
   1ad26:	4684      	moveq	ip, r0
   1ad28:	4601      	moveq	r1, r0
   1ad2a:	2000      	moveq	r0, #0
   1ad2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1ad30:	bf08      	it	eq
   1ad32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1ad36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1ad3a:	fabc f28c 	clz	r2, ip
   1ad3e:	3a08      	subs	r2, #8
   1ad40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1ad44:	db10      	blt.n	1ad68 <__aeabi_l2f+0x5c>
   1ad46:	fa01 fc02 	lsl.w	ip, r1, r2
   1ad4a:	4463      	add	r3, ip
   1ad4c:	fa00 fc02 	lsl.w	ip, r0, r2
   1ad50:	f1c2 0220 	rsb	r2, r2, #32
   1ad54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ad58:	fa20 f202 	lsr.w	r2, r0, r2
   1ad5c:	eb43 0002 	adc.w	r0, r3, r2
   1ad60:	bf08      	it	eq
   1ad62:	f020 0001 	biceq.w	r0, r0, #1
   1ad66:	4770      	bx	lr
   1ad68:	f102 0220 	add.w	r2, r2, #32
   1ad6c:	fa01 fc02 	lsl.w	ip, r1, r2
   1ad70:	f1c2 0220 	rsb	r2, r2, #32
   1ad74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1ad78:	fa21 f202 	lsr.w	r2, r1, r2
   1ad7c:	eb43 0002 	adc.w	r0, r3, r2
   1ad80:	bf08      	it	eq
   1ad82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1ad86:	4770      	bx	lr

0001ad88 <__aeabi_fmul>:
   1ad88:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ad8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1ad90:	bf1e      	ittt	ne
   1ad92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1ad96:	ea92 0f0c 	teqne	r2, ip
   1ad9a:	ea93 0f0c 	teqne	r3, ip
   1ad9e:	d06f      	beq.n	1ae80 <__aeabi_fmul+0xf8>
   1ada0:	441a      	add	r2, r3
   1ada2:	ea80 0c01 	eor.w	ip, r0, r1
   1ada6:	0240      	lsls	r0, r0, #9
   1ada8:	bf18      	it	ne
   1adaa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1adae:	d01e      	beq.n	1adee <__aeabi_fmul+0x66>
   1adb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1adb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1adb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1adbc:	fba0 3101 	umull	r3, r1, r0, r1
   1adc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1adc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1adc8:	bf3e      	ittt	cc
   1adca:	0049      	lslcc	r1, r1, #1
   1adcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1add0:	005b      	lslcc	r3, r3, #1
   1add2:	ea40 0001 	orr.w	r0, r0, r1
   1add6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1adda:	2afd      	cmp	r2, #253	; 0xfd
   1addc:	d81d      	bhi.n	1ae1a <__aeabi_fmul+0x92>
   1adde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1ade2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1ade6:	bf08      	it	eq
   1ade8:	f020 0001 	biceq.w	r0, r0, #1
   1adec:	4770      	bx	lr
   1adee:	f090 0f00 	teq	r0, #0
   1adf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1adf6:	bf08      	it	eq
   1adf8:	0249      	lsleq	r1, r1, #9
   1adfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1adfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1ae02:	3a7f      	subs	r2, #127	; 0x7f
   1ae04:	bfc2      	ittt	gt
   1ae06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1ae0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1ae0e:	4770      	bxgt	lr
   1ae10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ae14:	f04f 0300 	mov.w	r3, #0
   1ae18:	3a01      	subs	r2, #1
   1ae1a:	dc5d      	bgt.n	1aed8 <__aeabi_fmul+0x150>
   1ae1c:	f112 0f19 	cmn.w	r2, #25
   1ae20:	bfdc      	itt	le
   1ae22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1ae26:	4770      	bxle	lr
   1ae28:	f1c2 0200 	rsb	r2, r2, #0
   1ae2c:	0041      	lsls	r1, r0, #1
   1ae2e:	fa21 f102 	lsr.w	r1, r1, r2
   1ae32:	f1c2 0220 	rsb	r2, r2, #32
   1ae36:	fa00 fc02 	lsl.w	ip, r0, r2
   1ae3a:	ea5f 0031 	movs.w	r0, r1, rrx
   1ae3e:	f140 0000 	adc.w	r0, r0, #0
   1ae42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1ae46:	bf08      	it	eq
   1ae48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1ae4c:	4770      	bx	lr
   1ae4e:	f092 0f00 	teq	r2, #0
   1ae52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1ae56:	bf02      	ittt	eq
   1ae58:	0040      	lsleq	r0, r0, #1
   1ae5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1ae5e:	3a01      	subeq	r2, #1
   1ae60:	d0f9      	beq.n	1ae56 <__aeabi_fmul+0xce>
   1ae62:	ea40 000c 	orr.w	r0, r0, ip
   1ae66:	f093 0f00 	teq	r3, #0
   1ae6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1ae6e:	bf02      	ittt	eq
   1ae70:	0049      	lsleq	r1, r1, #1
   1ae72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1ae76:	3b01      	subeq	r3, #1
   1ae78:	d0f9      	beq.n	1ae6e <__aeabi_fmul+0xe6>
   1ae7a:	ea41 010c 	orr.w	r1, r1, ip
   1ae7e:	e78f      	b.n	1ada0 <__aeabi_fmul+0x18>
   1ae80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1ae84:	ea92 0f0c 	teq	r2, ip
   1ae88:	bf18      	it	ne
   1ae8a:	ea93 0f0c 	teqne	r3, ip
   1ae8e:	d00a      	beq.n	1aea6 <__aeabi_fmul+0x11e>
   1ae90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1ae94:	bf18      	it	ne
   1ae96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1ae9a:	d1d8      	bne.n	1ae4e <__aeabi_fmul+0xc6>
   1ae9c:	ea80 0001 	eor.w	r0, r0, r1
   1aea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1aea4:	4770      	bx	lr
   1aea6:	f090 0f00 	teq	r0, #0
   1aeaa:	bf17      	itett	ne
   1aeac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1aeb0:	4608      	moveq	r0, r1
   1aeb2:	f091 0f00 	teqne	r1, #0
   1aeb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1aeba:	d014      	beq.n	1aee6 <__aeabi_fmul+0x15e>
   1aebc:	ea92 0f0c 	teq	r2, ip
   1aec0:	d101      	bne.n	1aec6 <__aeabi_fmul+0x13e>
   1aec2:	0242      	lsls	r2, r0, #9
   1aec4:	d10f      	bne.n	1aee6 <__aeabi_fmul+0x15e>
   1aec6:	ea93 0f0c 	teq	r3, ip
   1aeca:	d103      	bne.n	1aed4 <__aeabi_fmul+0x14c>
   1aecc:	024b      	lsls	r3, r1, #9
   1aece:	bf18      	it	ne
   1aed0:	4608      	movne	r0, r1
   1aed2:	d108      	bne.n	1aee6 <__aeabi_fmul+0x15e>
   1aed4:	ea80 0001 	eor.w	r0, r0, r1
   1aed8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1aedc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1aee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1aee4:	4770      	bx	lr
   1aee6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1aeea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1aeee:	4770      	bx	lr

0001aef0 <__aeabi_fdiv>:
   1aef0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1aef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1aef8:	bf1e      	ittt	ne
   1aefa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1aefe:	ea92 0f0c 	teqne	r2, ip
   1af02:	ea93 0f0c 	teqne	r3, ip
   1af06:	d069      	beq.n	1afdc <__aeabi_fdiv+0xec>
   1af08:	eba2 0203 	sub.w	r2, r2, r3
   1af0c:	ea80 0c01 	eor.w	ip, r0, r1
   1af10:	0249      	lsls	r1, r1, #9
   1af12:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1af16:	d037      	beq.n	1af88 <__aeabi_fdiv+0x98>
   1af18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1af1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1af20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1af24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1af28:	428b      	cmp	r3, r1
   1af2a:	bf38      	it	cc
   1af2c:	005b      	lslcc	r3, r3, #1
   1af2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1af32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1af36:	428b      	cmp	r3, r1
   1af38:	bf24      	itt	cs
   1af3a:	1a5b      	subcs	r3, r3, r1
   1af3c:	ea40 000c 	orrcs.w	r0, r0, ip
   1af40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1af44:	bf24      	itt	cs
   1af46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1af4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1af4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1af52:	bf24      	itt	cs
   1af54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1af58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1af5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1af60:	bf24      	itt	cs
   1af62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1af66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1af6a:	011b      	lsls	r3, r3, #4
   1af6c:	bf18      	it	ne
   1af6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1af72:	d1e0      	bne.n	1af36 <__aeabi_fdiv+0x46>
   1af74:	2afd      	cmp	r2, #253	; 0xfd
   1af76:	f63f af50 	bhi.w	1ae1a <__aeabi_fmul+0x92>
   1af7a:	428b      	cmp	r3, r1
   1af7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1af80:	bf08      	it	eq
   1af82:	f020 0001 	biceq.w	r0, r0, #1
   1af86:	4770      	bx	lr
   1af88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1af8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1af90:	327f      	adds	r2, #127	; 0x7f
   1af92:	bfc2      	ittt	gt
   1af94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1af98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1af9c:	4770      	bxgt	lr
   1af9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1afa2:	f04f 0300 	mov.w	r3, #0
   1afa6:	3a01      	subs	r2, #1
   1afa8:	e737      	b.n	1ae1a <__aeabi_fmul+0x92>
   1afaa:	f092 0f00 	teq	r2, #0
   1afae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1afb2:	bf02      	ittt	eq
   1afb4:	0040      	lsleq	r0, r0, #1
   1afb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1afba:	3a01      	subeq	r2, #1
   1afbc:	d0f9      	beq.n	1afb2 <__aeabi_fdiv+0xc2>
   1afbe:	ea40 000c 	orr.w	r0, r0, ip
   1afc2:	f093 0f00 	teq	r3, #0
   1afc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1afca:	bf02      	ittt	eq
   1afcc:	0049      	lsleq	r1, r1, #1
   1afce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1afd2:	3b01      	subeq	r3, #1
   1afd4:	d0f9      	beq.n	1afca <__aeabi_fdiv+0xda>
   1afd6:	ea41 010c 	orr.w	r1, r1, ip
   1afda:	e795      	b.n	1af08 <__aeabi_fdiv+0x18>
   1afdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1afe0:	ea92 0f0c 	teq	r2, ip
   1afe4:	d108      	bne.n	1aff8 <__aeabi_fdiv+0x108>
   1afe6:	0242      	lsls	r2, r0, #9
   1afe8:	f47f af7d 	bne.w	1aee6 <__aeabi_fmul+0x15e>
   1afec:	ea93 0f0c 	teq	r3, ip
   1aff0:	f47f af70 	bne.w	1aed4 <__aeabi_fmul+0x14c>
   1aff4:	4608      	mov	r0, r1
   1aff6:	e776      	b.n	1aee6 <__aeabi_fmul+0x15e>
   1aff8:	ea93 0f0c 	teq	r3, ip
   1affc:	d104      	bne.n	1b008 <__aeabi_fdiv+0x118>
   1affe:	024b      	lsls	r3, r1, #9
   1b000:	f43f af4c 	beq.w	1ae9c <__aeabi_fmul+0x114>
   1b004:	4608      	mov	r0, r1
   1b006:	e76e      	b.n	1aee6 <__aeabi_fmul+0x15e>
   1b008:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1b00c:	bf18      	it	ne
   1b00e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1b012:	d1ca      	bne.n	1afaa <__aeabi_fdiv+0xba>
   1b014:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1b018:	f47f af5c 	bne.w	1aed4 <__aeabi_fmul+0x14c>
   1b01c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1b020:	f47f af3c 	bne.w	1ae9c <__aeabi_fmul+0x114>
   1b024:	e75f      	b.n	1aee6 <__aeabi_fmul+0x15e>
   1b026:	bf00      	nop

0001b028 <__aeabi_f2uiz>:
   1b028:	0042      	lsls	r2, r0, #1
   1b02a:	d20e      	bcs.n	1b04a <__aeabi_f2uiz+0x22>
   1b02c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1b030:	d30b      	bcc.n	1b04a <__aeabi_f2uiz+0x22>
   1b032:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1b036:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1b03a:	d409      	bmi.n	1b050 <__aeabi_f2uiz+0x28>
   1b03c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1b040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b044:	fa23 f002 	lsr.w	r0, r3, r2
   1b048:	4770      	bx	lr
   1b04a:	f04f 0000 	mov.w	r0, #0
   1b04e:	4770      	bx	lr
   1b050:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1b054:	d101      	bne.n	1b05a <__aeabi_f2uiz+0x32>
   1b056:	0242      	lsls	r2, r0, #9
   1b058:	d102      	bne.n	1b060 <__aeabi_f2uiz+0x38>
   1b05a:	f04f 30ff 	mov.w	r0, #4294967295
   1b05e:	4770      	bx	lr
   1b060:	f04f 0000 	mov.w	r0, #0
   1b064:	4770      	bx	lr
   1b066:	bf00      	nop

0001b068 <__cxa_atexit>:
   1b068:	4613      	mov	r3, r2
   1b06a:	460a      	mov	r2, r1
   1b06c:	4601      	mov	r1, r0
   1b06e:	2002      	movs	r0, #2
   1b070:	f000 ba34 	b.w	1b4dc <__register_exitproc>

0001b074 <ffs>:
   1b074:	b140      	cbz	r0, 1b088 <ffs+0x14>
   1b076:	2300      	movs	r3, #0
   1b078:	fa40 f103 	asr.w	r1, r0, r3
   1b07c:	1c5a      	adds	r2, r3, #1
   1b07e:	07c9      	lsls	r1, r1, #31
   1b080:	4613      	mov	r3, r2
   1b082:	d5f9      	bpl.n	1b078 <ffs+0x4>
   1b084:	4610      	mov	r0, r2
   1b086:	4770      	bx	lr
   1b088:	4602      	mov	r2, r0
   1b08a:	4610      	mov	r0, r2
   1b08c:	4770      	bx	lr
   1b08e:	bf00      	nop

0001b090 <__libc_init_array>:
   1b090:	b570      	push	{r4, r5, r6, lr}
   1b092:	4e0f      	ldr	r6, [pc, #60]	; (1b0d0 <__libc_init_array+0x40>)
   1b094:	4d0f      	ldr	r5, [pc, #60]	; (1b0d4 <__libc_init_array+0x44>)
   1b096:	1b76      	subs	r6, r6, r5
   1b098:	10b6      	asrs	r6, r6, #2
   1b09a:	bf18      	it	ne
   1b09c:	2400      	movne	r4, #0
   1b09e:	d005      	beq.n	1b0ac <__libc_init_array+0x1c>
   1b0a0:	3401      	adds	r4, #1
   1b0a2:	f855 3b04 	ldr.w	r3, [r5], #4
   1b0a6:	4798      	blx	r3
   1b0a8:	42a6      	cmp	r6, r4
   1b0aa:	d1f9      	bne.n	1b0a0 <__libc_init_array+0x10>
   1b0ac:	4e0a      	ldr	r6, [pc, #40]	; (1b0d8 <__libc_init_array+0x48>)
   1b0ae:	4d0b      	ldr	r5, [pc, #44]	; (1b0dc <__libc_init_array+0x4c>)
   1b0b0:	1b76      	subs	r6, r6, r5
   1b0b2:	f001 fb6f 	bl	1c794 <_init>
   1b0b6:	10b6      	asrs	r6, r6, #2
   1b0b8:	bf18      	it	ne
   1b0ba:	2400      	movne	r4, #0
   1b0bc:	d006      	beq.n	1b0cc <__libc_init_array+0x3c>
   1b0be:	3401      	adds	r4, #1
   1b0c0:	f855 3b04 	ldr.w	r3, [r5], #4
   1b0c4:	4798      	blx	r3
   1b0c6:	42a6      	cmp	r6, r4
   1b0c8:	d1f9      	bne.n	1b0be <__libc_init_array+0x2e>
   1b0ca:	bd70      	pop	{r4, r5, r6, pc}
   1b0cc:	bd70      	pop	{r4, r5, r6, pc}
   1b0ce:	bf00      	nop
   1b0d0:	0001c7a0 	.word	0x0001c7a0
   1b0d4:	0001c7a0 	.word	0x0001c7a0
   1b0d8:	0001c814 	.word	0x0001c814
   1b0dc:	0001c7a0 	.word	0x0001c7a0

0001b0e0 <memcpy>:
   1b0e0:	4684      	mov	ip, r0
   1b0e2:	ea41 0300 	orr.w	r3, r1, r0
   1b0e6:	f013 0303 	ands.w	r3, r3, #3
   1b0ea:	d16d      	bne.n	1b1c8 <memcpy+0xe8>
   1b0ec:	3a40      	subs	r2, #64	; 0x40
   1b0ee:	d341      	bcc.n	1b174 <memcpy+0x94>
   1b0f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1b0f4:	f840 3b04 	str.w	r3, [r0], #4
   1b0f8:	f851 3b04 	ldr.w	r3, [r1], #4
   1b0fc:	f840 3b04 	str.w	r3, [r0], #4
   1b100:	f851 3b04 	ldr.w	r3, [r1], #4
   1b104:	f840 3b04 	str.w	r3, [r0], #4
   1b108:	f851 3b04 	ldr.w	r3, [r1], #4
   1b10c:	f840 3b04 	str.w	r3, [r0], #4
   1b110:	f851 3b04 	ldr.w	r3, [r1], #4
   1b114:	f840 3b04 	str.w	r3, [r0], #4
   1b118:	f851 3b04 	ldr.w	r3, [r1], #4
   1b11c:	f840 3b04 	str.w	r3, [r0], #4
   1b120:	f851 3b04 	ldr.w	r3, [r1], #4
   1b124:	f840 3b04 	str.w	r3, [r0], #4
   1b128:	f851 3b04 	ldr.w	r3, [r1], #4
   1b12c:	f840 3b04 	str.w	r3, [r0], #4
   1b130:	f851 3b04 	ldr.w	r3, [r1], #4
   1b134:	f840 3b04 	str.w	r3, [r0], #4
   1b138:	f851 3b04 	ldr.w	r3, [r1], #4
   1b13c:	f840 3b04 	str.w	r3, [r0], #4
   1b140:	f851 3b04 	ldr.w	r3, [r1], #4
   1b144:	f840 3b04 	str.w	r3, [r0], #4
   1b148:	f851 3b04 	ldr.w	r3, [r1], #4
   1b14c:	f840 3b04 	str.w	r3, [r0], #4
   1b150:	f851 3b04 	ldr.w	r3, [r1], #4
   1b154:	f840 3b04 	str.w	r3, [r0], #4
   1b158:	f851 3b04 	ldr.w	r3, [r1], #4
   1b15c:	f840 3b04 	str.w	r3, [r0], #4
   1b160:	f851 3b04 	ldr.w	r3, [r1], #4
   1b164:	f840 3b04 	str.w	r3, [r0], #4
   1b168:	f851 3b04 	ldr.w	r3, [r1], #4
   1b16c:	f840 3b04 	str.w	r3, [r0], #4
   1b170:	3a40      	subs	r2, #64	; 0x40
   1b172:	d2bd      	bcs.n	1b0f0 <memcpy+0x10>
   1b174:	3230      	adds	r2, #48	; 0x30
   1b176:	d311      	bcc.n	1b19c <memcpy+0xbc>
   1b178:	f851 3b04 	ldr.w	r3, [r1], #4
   1b17c:	f840 3b04 	str.w	r3, [r0], #4
   1b180:	f851 3b04 	ldr.w	r3, [r1], #4
   1b184:	f840 3b04 	str.w	r3, [r0], #4
   1b188:	f851 3b04 	ldr.w	r3, [r1], #4
   1b18c:	f840 3b04 	str.w	r3, [r0], #4
   1b190:	f851 3b04 	ldr.w	r3, [r1], #4
   1b194:	f840 3b04 	str.w	r3, [r0], #4
   1b198:	3a10      	subs	r2, #16
   1b19a:	d2ed      	bcs.n	1b178 <memcpy+0x98>
   1b19c:	320c      	adds	r2, #12
   1b19e:	d305      	bcc.n	1b1ac <memcpy+0xcc>
   1b1a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1b1a4:	f840 3b04 	str.w	r3, [r0], #4
   1b1a8:	3a04      	subs	r2, #4
   1b1aa:	d2f9      	bcs.n	1b1a0 <memcpy+0xc0>
   1b1ac:	3204      	adds	r2, #4
   1b1ae:	d008      	beq.n	1b1c2 <memcpy+0xe2>
   1b1b0:	07d2      	lsls	r2, r2, #31
   1b1b2:	bf1c      	itt	ne
   1b1b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1b1b8:	f800 3b01 	strbne.w	r3, [r0], #1
   1b1bc:	d301      	bcc.n	1b1c2 <memcpy+0xe2>
   1b1be:	880b      	ldrh	r3, [r1, #0]
   1b1c0:	8003      	strh	r3, [r0, #0]
   1b1c2:	4660      	mov	r0, ip
   1b1c4:	4770      	bx	lr
   1b1c6:	bf00      	nop
   1b1c8:	2a08      	cmp	r2, #8
   1b1ca:	d313      	bcc.n	1b1f4 <memcpy+0x114>
   1b1cc:	078b      	lsls	r3, r1, #30
   1b1ce:	d08d      	beq.n	1b0ec <memcpy+0xc>
   1b1d0:	f010 0303 	ands.w	r3, r0, #3
   1b1d4:	d08a      	beq.n	1b0ec <memcpy+0xc>
   1b1d6:	f1c3 0304 	rsb	r3, r3, #4
   1b1da:	1ad2      	subs	r2, r2, r3
   1b1dc:	07db      	lsls	r3, r3, #31
   1b1de:	bf1c      	itt	ne
   1b1e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1b1e4:	f800 3b01 	strbne.w	r3, [r0], #1
   1b1e8:	d380      	bcc.n	1b0ec <memcpy+0xc>
   1b1ea:	f831 3b02 	ldrh.w	r3, [r1], #2
   1b1ee:	f820 3b02 	strh.w	r3, [r0], #2
   1b1f2:	e77b      	b.n	1b0ec <memcpy+0xc>
   1b1f4:	3a04      	subs	r2, #4
   1b1f6:	d3d9      	bcc.n	1b1ac <memcpy+0xcc>
   1b1f8:	3a01      	subs	r2, #1
   1b1fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b1fe:	f800 3b01 	strb.w	r3, [r0], #1
   1b202:	d2f9      	bcs.n	1b1f8 <memcpy+0x118>
   1b204:	780b      	ldrb	r3, [r1, #0]
   1b206:	7003      	strb	r3, [r0, #0]
   1b208:	784b      	ldrb	r3, [r1, #1]
   1b20a:	7043      	strb	r3, [r0, #1]
   1b20c:	788b      	ldrb	r3, [r1, #2]
   1b20e:	7083      	strb	r3, [r0, #2]
   1b210:	4660      	mov	r0, ip
   1b212:	4770      	bx	lr

0001b214 <memset>:
   1b214:	b470      	push	{r4, r5, r6}
   1b216:	0786      	lsls	r6, r0, #30
   1b218:	d046      	beq.n	1b2a8 <memset+0x94>
   1b21a:	1e54      	subs	r4, r2, #1
   1b21c:	2a00      	cmp	r2, #0
   1b21e:	d041      	beq.n	1b2a4 <memset+0x90>
   1b220:	b2ca      	uxtb	r2, r1
   1b222:	4603      	mov	r3, r0
   1b224:	e002      	b.n	1b22c <memset+0x18>
   1b226:	f114 34ff 	adds.w	r4, r4, #4294967295
   1b22a:	d33b      	bcc.n	1b2a4 <memset+0x90>
   1b22c:	f803 2b01 	strb.w	r2, [r3], #1
   1b230:	079d      	lsls	r5, r3, #30
   1b232:	d1f8      	bne.n	1b226 <memset+0x12>
   1b234:	2c03      	cmp	r4, #3
   1b236:	d92e      	bls.n	1b296 <memset+0x82>
   1b238:	b2cd      	uxtb	r5, r1
   1b23a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1b23e:	2c0f      	cmp	r4, #15
   1b240:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1b244:	d919      	bls.n	1b27a <memset+0x66>
   1b246:	f103 0210 	add.w	r2, r3, #16
   1b24a:	4626      	mov	r6, r4
   1b24c:	3e10      	subs	r6, #16
   1b24e:	2e0f      	cmp	r6, #15
   1b250:	f842 5c10 	str.w	r5, [r2, #-16]
   1b254:	f842 5c0c 	str.w	r5, [r2, #-12]
   1b258:	f842 5c08 	str.w	r5, [r2, #-8]
   1b25c:	f842 5c04 	str.w	r5, [r2, #-4]
   1b260:	f102 0210 	add.w	r2, r2, #16
   1b264:	d8f2      	bhi.n	1b24c <memset+0x38>
   1b266:	f1a4 0210 	sub.w	r2, r4, #16
   1b26a:	f022 020f 	bic.w	r2, r2, #15
   1b26e:	f004 040f 	and.w	r4, r4, #15
   1b272:	3210      	adds	r2, #16
   1b274:	2c03      	cmp	r4, #3
   1b276:	4413      	add	r3, r2
   1b278:	d90d      	bls.n	1b296 <memset+0x82>
   1b27a:	461e      	mov	r6, r3
   1b27c:	4622      	mov	r2, r4
   1b27e:	3a04      	subs	r2, #4
   1b280:	2a03      	cmp	r2, #3
   1b282:	f846 5b04 	str.w	r5, [r6], #4
   1b286:	d8fa      	bhi.n	1b27e <memset+0x6a>
   1b288:	1f22      	subs	r2, r4, #4
   1b28a:	f022 0203 	bic.w	r2, r2, #3
   1b28e:	3204      	adds	r2, #4
   1b290:	4413      	add	r3, r2
   1b292:	f004 0403 	and.w	r4, r4, #3
   1b296:	b12c      	cbz	r4, 1b2a4 <memset+0x90>
   1b298:	b2c9      	uxtb	r1, r1
   1b29a:	441c      	add	r4, r3
   1b29c:	f803 1b01 	strb.w	r1, [r3], #1
   1b2a0:	429c      	cmp	r4, r3
   1b2a2:	d1fb      	bne.n	1b29c <memset+0x88>
   1b2a4:	bc70      	pop	{r4, r5, r6}
   1b2a6:	4770      	bx	lr
   1b2a8:	4614      	mov	r4, r2
   1b2aa:	4603      	mov	r3, r0
   1b2ac:	e7c2      	b.n	1b234 <memset+0x20>
   1b2ae:	bf00      	nop

0001b2b0 <rand>:
   1b2b0:	b410      	push	{r4}
   1b2b2:	4b0c      	ldr	r3, [pc, #48]	; (1b2e4 <rand+0x34>)
   1b2b4:	480c      	ldr	r0, [pc, #48]	; (1b2e8 <rand+0x38>)
   1b2b6:	6819      	ldr	r1, [r3, #0]
   1b2b8:	4c0c      	ldr	r4, [pc, #48]	; (1b2ec <rand+0x3c>)
   1b2ba:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1b2be:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1b2c2:	fb00 f002 	mul.w	r0, r0, r2
   1b2c6:	fb04 0003 	mla	r0, r4, r3, r0
   1b2ca:	fba2 2304 	umull	r2, r3, r2, r4
   1b2ce:	4403      	add	r3, r0
   1b2d0:	3201      	adds	r2, #1
   1b2d2:	f143 0300 	adc.w	r3, r3, #0
   1b2d6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1b2da:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b2de:	bc10      	pop	{r4}
   1b2e0:	4770      	bx	lr
   1b2e2:	bf00      	nop
   1b2e4:	20000614 	.word	0x20000614
   1b2e8:	5851f42d 	.word	0x5851f42d
   1b2ec:	4c957f2d 	.word	0x4c957f2d

0001b2f0 <strcat>:
   1b2f0:	0783      	lsls	r3, r0, #30
   1b2f2:	b510      	push	{r4, lr}
   1b2f4:	4604      	mov	r4, r0
   1b2f6:	d110      	bne.n	1b31a <strcat+0x2a>
   1b2f8:	6802      	ldr	r2, [r0, #0]
   1b2fa:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1b2fe:	ea23 0302 	bic.w	r3, r3, r2
   1b302:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1b306:	d108      	bne.n	1b31a <strcat+0x2a>
   1b308:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1b30c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1b310:	ea23 0302 	bic.w	r3, r3, r2
   1b314:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1b318:	d0f6      	beq.n	1b308 <strcat+0x18>
   1b31a:	7803      	ldrb	r3, [r0, #0]
   1b31c:	b11b      	cbz	r3, 1b326 <strcat+0x36>
   1b31e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1b322:	2b00      	cmp	r3, #0
   1b324:	d1fb      	bne.n	1b31e <strcat+0x2e>
   1b326:	f000 f803 	bl	1b330 <strcpy>
   1b32a:	4620      	mov	r0, r4
   1b32c:	bd10      	pop	{r4, pc}
   1b32e:	bf00      	nop

0001b330 <strcpy>:
   1b330:	ea80 0201 	eor.w	r2, r0, r1
   1b334:	4684      	mov	ip, r0
   1b336:	f012 0f03 	tst.w	r2, #3
   1b33a:	d14f      	bne.n	1b3dc <strcpy+0xac>
   1b33c:	f011 0f03 	tst.w	r1, #3
   1b340:	d132      	bne.n	1b3a8 <strcpy+0x78>
   1b342:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1b346:	f011 0f04 	tst.w	r1, #4
   1b34a:	f851 3b04 	ldr.w	r3, [r1], #4
   1b34e:	d00b      	beq.n	1b368 <strcpy+0x38>
   1b350:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1b354:	439a      	bics	r2, r3
   1b356:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1b35a:	bf04      	itt	eq
   1b35c:	f84c 3b04 	streq.w	r3, [ip], #4
   1b360:	f851 3b04 	ldreq.w	r3, [r1], #4
   1b364:	d116      	bne.n	1b394 <strcpy+0x64>
   1b366:	bf00      	nop
   1b368:	f851 4b04 	ldr.w	r4, [r1], #4
   1b36c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1b370:	439a      	bics	r2, r3
   1b372:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1b376:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1b37a:	d10b      	bne.n	1b394 <strcpy+0x64>
   1b37c:	f84c 3b04 	str.w	r3, [ip], #4
   1b380:	43a2      	bics	r2, r4
   1b382:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1b386:	bf04      	itt	eq
   1b388:	f851 3b04 	ldreq.w	r3, [r1], #4
   1b38c:	f84c 4b04 	streq.w	r4, [ip], #4
   1b390:	d0ea      	beq.n	1b368 <strcpy+0x38>
   1b392:	4623      	mov	r3, r4
   1b394:	f80c 3b01 	strb.w	r3, [ip], #1
   1b398:	f013 0fff 	tst.w	r3, #255	; 0xff
   1b39c:	ea4f 2333 	mov.w	r3, r3, ror #8
   1b3a0:	d1f8      	bne.n	1b394 <strcpy+0x64>
   1b3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b3a6:	4770      	bx	lr
   1b3a8:	f011 0f01 	tst.w	r1, #1
   1b3ac:	d006      	beq.n	1b3bc <strcpy+0x8c>
   1b3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b3b2:	f80c 2b01 	strb.w	r2, [ip], #1
   1b3b6:	2a00      	cmp	r2, #0
   1b3b8:	bf08      	it	eq
   1b3ba:	4770      	bxeq	lr
   1b3bc:	f011 0f02 	tst.w	r1, #2
   1b3c0:	d0bf      	beq.n	1b342 <strcpy+0x12>
   1b3c2:	f831 2b02 	ldrh.w	r2, [r1], #2
   1b3c6:	f012 0fff 	tst.w	r2, #255	; 0xff
   1b3ca:	bf16      	itet	ne
   1b3cc:	f82c 2b02 	strhne.w	r2, [ip], #2
   1b3d0:	f88c 2000 	strbeq.w	r2, [ip]
   1b3d4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1b3d8:	d1b3      	bne.n	1b342 <strcpy+0x12>
   1b3da:	4770      	bx	lr
   1b3dc:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b3e0:	f80c 2b01 	strb.w	r2, [ip], #1
   1b3e4:	2a00      	cmp	r2, #0
   1b3e6:	d1f9      	bne.n	1b3dc <strcpy+0xac>
   1b3e8:	4770      	bx	lr
   1b3ea:	bf00      	nop
	...

0001b400 <strlen>:
   1b400:	f890 f000 	pld	[r0]
   1b404:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1b408:	f020 0107 	bic.w	r1, r0, #7
   1b40c:	f06f 0c00 	mvn.w	ip, #0
   1b410:	f010 0407 	ands.w	r4, r0, #7
   1b414:	f891 f020 	pld	[r1, #32]
   1b418:	f040 8049 	bne.w	1b4ae <strlen+0xae>
   1b41c:	f04f 0400 	mov.w	r4, #0
   1b420:	f06f 0007 	mvn.w	r0, #7
   1b424:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b428:	f891 f040 	pld	[r1, #64]	; 0x40
   1b42c:	f100 0008 	add.w	r0, r0, #8
   1b430:	fa82 f24c 	uadd8	r2, r2, ip
   1b434:	faa4 f28c 	sel	r2, r4, ip
   1b438:	fa83 f34c 	uadd8	r3, r3, ip
   1b43c:	faa2 f38c 	sel	r3, r2, ip
   1b440:	bb4b      	cbnz	r3, 1b496 <strlen+0x96>
   1b442:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b446:	fa82 f24c 	uadd8	r2, r2, ip
   1b44a:	f100 0008 	add.w	r0, r0, #8
   1b44e:	faa4 f28c 	sel	r2, r4, ip
   1b452:	fa83 f34c 	uadd8	r3, r3, ip
   1b456:	faa2 f38c 	sel	r3, r2, ip
   1b45a:	b9e3      	cbnz	r3, 1b496 <strlen+0x96>
   1b45c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1b460:	fa82 f24c 	uadd8	r2, r2, ip
   1b464:	f100 0008 	add.w	r0, r0, #8
   1b468:	faa4 f28c 	sel	r2, r4, ip
   1b46c:	fa83 f34c 	uadd8	r3, r3, ip
   1b470:	faa2 f38c 	sel	r3, r2, ip
   1b474:	b97b      	cbnz	r3, 1b496 <strlen+0x96>
   1b476:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1b47a:	f101 0120 	add.w	r1, r1, #32
   1b47e:	fa82 f24c 	uadd8	r2, r2, ip
   1b482:	f100 0008 	add.w	r0, r0, #8
   1b486:	faa4 f28c 	sel	r2, r4, ip
   1b48a:	fa83 f34c 	uadd8	r3, r3, ip
   1b48e:	faa2 f38c 	sel	r3, r2, ip
   1b492:	2b00      	cmp	r3, #0
   1b494:	d0c6      	beq.n	1b424 <strlen+0x24>
   1b496:	2a00      	cmp	r2, #0
   1b498:	bf04      	itt	eq
   1b49a:	3004      	addeq	r0, #4
   1b49c:	461a      	moveq	r2, r3
   1b49e:	ba12      	rev	r2, r2
   1b4a0:	fab2 f282 	clz	r2, r2
   1b4a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1b4a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1b4ac:	4770      	bx	lr
   1b4ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b4b2:	f004 0503 	and.w	r5, r4, #3
   1b4b6:	f1c4 0000 	rsb	r0, r4, #0
   1b4ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1b4be:	f014 0f04 	tst.w	r4, #4
   1b4c2:	f891 f040 	pld	[r1, #64]	; 0x40
   1b4c6:	fa0c f505 	lsl.w	r5, ip, r5
   1b4ca:	ea62 0205 	orn	r2, r2, r5
   1b4ce:	bf1c      	itt	ne
   1b4d0:	ea63 0305 	ornne	r3, r3, r5
   1b4d4:	4662      	movne	r2, ip
   1b4d6:	f04f 0400 	mov.w	r4, #0
   1b4da:	e7a9      	b.n	1b430 <strlen+0x30>

0001b4dc <__register_exitproc>:
   1b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b4e0:	4d2c      	ldr	r5, [pc, #176]	; (1b594 <__register_exitproc+0xb8>)
   1b4e2:	4606      	mov	r6, r0
   1b4e4:	6828      	ldr	r0, [r5, #0]
   1b4e6:	4698      	mov	r8, r3
   1b4e8:	460f      	mov	r7, r1
   1b4ea:	4691      	mov	r9, r2
   1b4ec:	f000 f882 	bl	1b5f4 <__retarget_lock_acquire_recursive>
   1b4f0:	4b29      	ldr	r3, [pc, #164]	; (1b598 <__register_exitproc+0xbc>)
   1b4f2:	681c      	ldr	r4, [r3, #0]
   1b4f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1b4f8:	2b00      	cmp	r3, #0
   1b4fa:	d03e      	beq.n	1b57a <__register_exitproc+0x9e>
   1b4fc:	685a      	ldr	r2, [r3, #4]
   1b4fe:	2a1f      	cmp	r2, #31
   1b500:	dc1c      	bgt.n	1b53c <__register_exitproc+0x60>
   1b502:	f102 0e01 	add.w	lr, r2, #1
   1b506:	b176      	cbz	r6, 1b526 <__register_exitproc+0x4a>
   1b508:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1b50c:	2401      	movs	r4, #1
   1b50e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1b512:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1b516:	4094      	lsls	r4, r2
   1b518:	4320      	orrs	r0, r4
   1b51a:	2e02      	cmp	r6, #2
   1b51c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1b520:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1b524:	d023      	beq.n	1b56e <__register_exitproc+0x92>
   1b526:	3202      	adds	r2, #2
   1b528:	f8c3 e004 	str.w	lr, [r3, #4]
   1b52c:	6828      	ldr	r0, [r5, #0]
   1b52e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1b532:	f000 f861 	bl	1b5f8 <__retarget_lock_release_recursive>
   1b536:	2000      	movs	r0, #0
   1b538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b53c:	4b17      	ldr	r3, [pc, #92]	; (1b59c <__register_exitproc+0xc0>)
   1b53e:	b30b      	cbz	r3, 1b584 <__register_exitproc+0xa8>
   1b540:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1b544:	f7f5 ffce 	bl	114e4 <malloc>
   1b548:	4603      	mov	r3, r0
   1b54a:	b1d8      	cbz	r0, 1b584 <__register_exitproc+0xa8>
   1b54c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1b550:	6002      	str	r2, [r0, #0]
   1b552:	2100      	movs	r1, #0
   1b554:	6041      	str	r1, [r0, #4]
   1b556:	460a      	mov	r2, r1
   1b558:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1b55c:	f04f 0e01 	mov.w	lr, #1
   1b560:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1b564:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1b568:	2e00      	cmp	r6, #0
   1b56a:	d0dc      	beq.n	1b526 <__register_exitproc+0x4a>
   1b56c:	e7cc      	b.n	1b508 <__register_exitproc+0x2c>
   1b56e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1b572:	430c      	orrs	r4, r1
   1b574:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1b578:	e7d5      	b.n	1b526 <__register_exitproc+0x4a>
   1b57a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1b57e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1b582:	e7bb      	b.n	1b4fc <__register_exitproc+0x20>
   1b584:	6828      	ldr	r0, [r5, #0]
   1b586:	f000 f837 	bl	1b5f8 <__retarget_lock_release_recursive>
   1b58a:	f04f 30ff 	mov.w	r0, #4294967295
   1b58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b592:	bf00      	nop
   1b594:	20000a40 	.word	0x20000a40
   1b598:	0001c790 	.word	0x0001c790
   1b59c:	000114e5 	.word	0x000114e5

0001b5a0 <register_fini>:
   1b5a0:	4b02      	ldr	r3, [pc, #8]	; (1b5ac <register_fini+0xc>)
   1b5a2:	b113      	cbz	r3, 1b5aa <register_fini+0xa>
   1b5a4:	4802      	ldr	r0, [pc, #8]	; (1b5b0 <register_fini+0x10>)
   1b5a6:	f000 b805 	b.w	1b5b4 <atexit>
   1b5aa:	4770      	bx	lr
   1b5ac:	00000000 	.word	0x00000000
   1b5b0:	0001b5c1 	.word	0x0001b5c1

0001b5b4 <atexit>:
   1b5b4:	2300      	movs	r3, #0
   1b5b6:	4601      	mov	r1, r0
   1b5b8:	461a      	mov	r2, r3
   1b5ba:	4618      	mov	r0, r3
   1b5bc:	f7ff bf8e 	b.w	1b4dc <__register_exitproc>

0001b5c0 <__libc_fini_array>:
   1b5c0:	b538      	push	{r3, r4, r5, lr}
   1b5c2:	4c0a      	ldr	r4, [pc, #40]	; (1b5ec <__libc_fini_array+0x2c>)
   1b5c4:	4d0a      	ldr	r5, [pc, #40]	; (1b5f0 <__libc_fini_array+0x30>)
   1b5c6:	1b64      	subs	r4, r4, r5
   1b5c8:	10a4      	asrs	r4, r4, #2
   1b5ca:	d00a      	beq.n	1b5e2 <__libc_fini_array+0x22>
   1b5cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1b5d0:	3b01      	subs	r3, #1
   1b5d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b5d6:	3c01      	subs	r4, #1
   1b5d8:	f855 3904 	ldr.w	r3, [r5], #-4
   1b5dc:	4798      	blx	r3
   1b5de:	2c00      	cmp	r4, #0
   1b5e0:	d1f9      	bne.n	1b5d6 <__libc_fini_array+0x16>
   1b5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b5e6:	f001 b915 	b.w	1c814 <_fini>
   1b5ea:	bf00      	nop
   1b5ec:	0001c824 	.word	0x0001c824
   1b5f0:	0001c820 	.word	0x0001c820

0001b5f4 <__retarget_lock_acquire_recursive>:
   1b5f4:	4770      	bx	lr
   1b5f6:	bf00      	nop

0001b5f8 <__retarget_lock_release_recursive>:
   1b5f8:	4770      	bx	lr
   1b5fa:	bf00      	nop
   1b5fc:	6f666e49 	.word	0x6f666e49
   1b600:	6d654d3a 	.word	0x6d654d3a
   1b604:	2079726f 	.word	0x2079726f
   1b608:	72617453 	.word	0x72617453
   1b60c:	00646574 	.word	0x00646574
   1b610:	6e6e7552 	.word	0x6e6e7552
   1b614:	20676e69 	.word	0x20676e69
   1b618:	6b696c20 	.word	0x6b696c20
   1b61c:	72632065 	.word	0x72632065
   1b620:	21797a61 	.word	0x21797a61
   1b624:	203a2121 	.word	0x203a2121
   1b628:	00000000 	.word	0x00000000

0001b62c <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1b62c:	00000194 00000000 00000000              ............

0001b638 <_ZTT16Maintenance_Tool>:
   1b638:	0001b64c 0001b638                       L...8...

0001b640 <_ZTV16Maintenance_Tool>:
   1b640:	00000194 00000000 00000000 682f2e2e     ............../h
   1b650:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1b660:	7361625f 00682e65 682f2e2e 692f6c61     _base.h.../hal/i
   1b670:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
   1b680:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1b690:	635f6c61 6e656c61 2e726164 00000063     al_calendar.c...
   1b6a0:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1b6b0:	615f6e61 636e7973 0000632e 682f2e2e     an_async.c..../h
   1b6c0:	732f6c61 682f6372 635f6c61 735f6372     al/src/hal_crc_s
   1b6d0:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
   1b6e0:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
   1b6f0:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1b700:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
   1b710:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   1b720:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   1b730:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
   1b740:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1b750:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
   1b760:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
   1b770:	6c5f736c 2e747369 00000063 03020100     ls_list.c.......
   1b780:	07060504 14100c08 40302018              ......... 0@

0001b78c <_map>:
   1b78c:	00000000 00000040 00000001 00000021     ....@.......!...
   1b79c:	00000003 00000003 00000004 00000004     ................
   1b7ac:	00000005 00000005 00000006 00000056     ............V...
   1b7bc:	00000007 00000057 00000008 00000028     ....W.......(...
   1b7cc:	00000009 00000029 0000000a 0000004a     ....).......J...
   1b7dc:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   1b7ec:	632e6369 00000000                       ic.c....

0001b7f4 <user_mux_confs>:
   1b7f4:	00020100 00000000 00000000 00000000     ................
	...

0001b838 <channel_confs>:
   1b838:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001b878 <interrupt_cfg>:
	...
   1b8f8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   1b908:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   1b918:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   1b928:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1b938:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   1b948:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   1b958:	43000400 43000800 43000c00              ...C...C...C

0001b964 <sercomspi_regs>:
   1b964:	0020000c 00020000 00000000 01ff0001     .. .............
   1b974:	30000c04 02000000 00000000 ff001700     ...0............
   1b984:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1b994:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1b9a4:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1b9b4:	43001400 43001800                       ...C...C

0001b9bc <_usb_ep_cfgs>:
   1b9bc:	20002374 00000000 00000040 200023b4     t#. ....@....#. 
   1b9cc:	200023f4 00400040 20002434 20002474     .#. @.@.4$. t$. 
   1b9dc:	00400040 200024b4 200024f4 00400040     @.@..$. .$. @.@.
   1b9ec:	20002534 20002574 00400040 00000804     4%. t%. @.@.....
   1b9fc:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1ba0c:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1ba1c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1ba2c:	7361625f 00682e65                       _base.h.

0001ba34 <n25q256a_interface>:
   1ba34:	0000d5ad 0000d651 0000d761 0000d919     ....Q...a.......
   1ba44:	0000d9a9 752f2e2e 642f6273 63697665     ....../usb/devic
   1ba54:	73752f65 2e636462 00000063              e/usbdc.c...

0001ba60 <_ZTV20Compresor_Controller>:
	...
   1ba68:	000163f1                                .c..

0001ba6c <_ZTV28Compressor_CANOpen_Interface>:
	...
   1ba74:	000163f1 74616548 32207265 67202c20     .c..Heater 2 , g
   1ba84:	736f6970 00203d20 74616548 31207265     pios = .Heater 1
   1ba94:	67202c20 736f6970 20203d20 00000000      , gpios =  ....

0001baa4 <defaultParameters>:
   1baa4:	bfbfdfdf                                ....

0001baa8 <defaultPreferences>:
   1baa8:	000000fa 00000032                       ....2...

0001bab0 <_ZTV9CDC_Class>:
	...
   1bab8:	00010e35 00010f15 00010a89 00010dfd     5...............
   1bac8:	00010fad 00010dc1 00010ca5 00010cf5     ................
   1bad8:	00010e1d 00010e7d                       ....}...

0001bae0 <_ZTV6Stream>:
	...
   1bae8:	000114f9 00011119 00010a89 00010a9d     ................
   1baf8:	000114f9 000114f9 000114f9 2e257830     ............0x%.
   1bb08:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1bb18:	0066766f                                ovf.

0001bb1c <_ZTV5Print>:
	...
   1bb24:	000114f9 00011119 00010a89 00010a9d     ................
   1bb34:	70617645 7461726f 0020726f 646e6f43     Evaporator .Cond
   1bb44:	74617365 0020726f                       esator .

0001bb4c <_ZTV18Event_Logger_Class>:
	...
   1bb54:	0001a7d1 0001a8c1 74696e49 696c6169     ........Initiali
   1bb64:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   1bb74:	43555320 53534543 00000000 49414620      SUCCESS.... FAI
   1bb84:	44454c4c 00000000 4b4e5520 4e574f4e     LLED.... UNKNOWN
   1bb94:	00000000 616e4520 64656c62 00000000     .... Enabled....
   1bba4:	73694420 656c6261 00000064 32317830      Disabled...0x12
   1bbb4:	36353433 61393837 00000000 766c6156     3456789a....Valv
   1bbc4:	20322065 7067202c 20736f69 0000203d     e 2 , gpios = ..
   1bbd4:	766c6156 20312065 7067202c 20736f69     Valve 1 , gpios 
   1bbe4:	0000203d 70616c46 20726570 766c6156     = ..Flapper Valv
   1bbf4:	00002065 20433249 70616c46 20726570     e ..I2C Flapper 
   1bc04:	766c6156 00002065 74616548 00207265     Valve ..Heater .
   1bc14:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   1bc24:	73655466 41502074 44455353 00000000     fTest PASSED....
   1bc34:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   1bc44:	73655466 41462074 44454c49 00000000     fTest FAILED....
   1bc54:	75646f4d 0020656c 20495053 706d6554     Module .SPI Temp
   1bc64:	74617265 73657275 61745320 64657472     eratures Started
   1bc74:	00000000 20495053 706d6554 74617265     ....SPI Temperat
   1bc84:	73657275 69614620 0064656c              ures Failed.

0001bc90 <_ZTV13CANOpen_Class>:
	...
   1bc98:	000163f1                                .c..

0001bc9c <_ZTV8CO_Class>:
	...
   1bca4:	000163f1                                .c..

0001bca8 <_ZTV15CO_Driver_Class>:
	...
   1bcb0:	000163f1                                .c..

0001bcb4 <_ZL13OD_record1018>:
   1bcb4:	200003e0 00000005 00000001 200003e4     ... ........... 
   1bcc4:	00000085 00000004 200003e8 00000085     ........... ....
   1bcd4:	00000004 200003ec 00000085 00000004     ....... ........
   1bce4:	200003f0 00000085 00000004              ... ........

0001bcf0 <_ZL13OD_record1200>:
   1bcf0:	200003fc 00000005 00000001 20000400     ... ........... 
   1bd00:	00000085 00000004 20000404 00000085     ........... ....
   1bd10:	00000004                                ....

0001bd14 <_ZL13OD_record1400>:
   1bd14:	20000408 00000005 00000001 2000040c     ... ........... 
   1bd24:	0000008d 00000004 20000410 0000000d     ........... ....
   1bd34:	00000001                                ....

0001bd38 <_ZL13OD_record1401>:
   1bd38:	20000414 00000005 00000001 20000418     ... ........... 
   1bd48:	0000008d 00000004 2000041c 0000000d     ........... ....
   1bd58:	00000001                                ....

0001bd5c <_ZL13OD_record1402>:
   1bd5c:	20000420 00000005 00000001 20000424      .. ........$.. 
   1bd6c:	0000008d 00000004 20000428 0000000d     ........(.. ....
   1bd7c:	00000001                                ....

0001bd80 <_ZL13OD_record1403>:
   1bd80:	2000042c 00000005 00000001 20000430     ,.. ........0.. 
   1bd90:	0000008d 00000004 20000434 0000000d     ........4.. ....
   1bda0:	00000001                                ....

0001bda4 <_ZL13OD_record1600>:
   1bda4:	20000438 0000000d 00000001 2000043c     8.. ........<.. 
   1bdb4:	0000008d 00000004 20000440 0000008d     ........@.. ....
   1bdc4:	00000004 20000444 0000008d 00000004     ....D.. ........
   1bdd4:	20000448 0000008d 00000004 2000044c     H.. ........L.. 
   1bde4:	0000008d 00000004 20000450 0000008d     ........P.. ....
   1bdf4:	00000004 20000454 0000008d 00000004     ....T.. ........
   1be04:	20000458 0000008d 00000004              X.. ........

0001be10 <_ZL13OD_record1601>:
   1be10:	2000045c 0000000d 00000001 20000460     \.. ........`.. 
   1be20:	0000008d 00000004 20000464 0000008d     ........d.. ....
   1be30:	00000004 20000468 0000008d 00000004     ....h.. ........
   1be40:	2000046c 0000008d 00000004 20000470     l.. ........p.. 
   1be50:	0000008d 00000004 20000474 0000008d     ........t.. ....
   1be60:	00000004 20000478 0000008d 00000004     ....x.. ........
   1be70:	2000047c 0000008d 00000004              |.. ........

0001be7c <_ZL13OD_record1602>:
   1be7c:	20000480 0000000d 00000001 20000484     ... ........... 
   1be8c:	0000008d 00000004 20000488 0000008d     ........... ....
   1be9c:	00000004 2000048c 0000008d 00000004     ....... ........
   1beac:	20000490 0000008d 00000004 20000494     ... ........... 
   1bebc:	0000008d 00000004 20000498 0000008d     ........... ....
   1becc:	00000004 2000049c 0000008d 00000004     ....... ........
   1bedc:	200004a0 0000008d 00000004              ... ........

0001bee8 <_ZL13OD_record1603>:
   1bee8:	200004a4 0000000d 00000001 200004a8     ... ........... 
   1bef8:	0000008d 00000004 200004ac 0000008d     ........... ....
   1bf08:	00000004 200004b0 0000008d 00000004     ....... ........
   1bf18:	200004b4 0000008d 00000004 200004b8     ... ........... 
   1bf28:	0000008d 00000004 200004bc 0000008d     ........... ....
   1bf38:	00000004 200004c0 0000008d 00000004     ....... ........
   1bf48:	200004c4 0000008d 00000004              ... ........

0001bf54 <_ZL13OD_record1800>:
   1bf54:	200004c8 00000005 00000001 200004cc     ... ........... 
   1bf64:	0000008d 00000004 200004d0 0000000d     ........... ....
   1bf74:	00000001 200004d4 0000008d 00000002     ....... ........
   1bf84:	200004d8 0000000d 00000001 200004dc     ... ........... 
   1bf94:	0000008d 00000002 200004e0 0000000d     ........... ....
   1bfa4:	00000001                                ....

0001bfa8 <_ZL13OD_record1801>:
   1bfa8:	200004e4 00000005 00000001 200004e8     ... ........... 
   1bfb8:	0000008d 00000004 200004ec 0000000d     ........... ....
   1bfc8:	00000001 200004f0 0000008d 00000002     ....... ........
   1bfd8:	200004f4 0000000d 00000001 200004f8     ... ........... 
   1bfe8:	0000008d 00000002 200004fc 0000000d     ........... ....
   1bff8:	00000001                                ....

0001bffc <_ZL13OD_record1802>:
   1bffc:	20000500 00000005 00000001 20000504     ... ........... 
   1c00c:	0000008d 00000004 20000508 0000000d     ........... ....
   1c01c:	00000001 2000050c 0000008d 00000002     ....... ........
   1c02c:	20000510 0000000d 00000001 20000514     ... ........... 
   1c03c:	0000008d 00000002 20000518 0000000d     ........... ....
   1c04c:	00000001                                ....

0001c050 <_ZL13OD_record1803>:
   1c050:	2000051c 00000005 00000001 20000520     ... ........ .. 
   1c060:	0000008d 00000004 20000524 0000000d     ........$.. ....
   1c070:	00000001 20000528 0000008d 00000002     ....(.. ........
   1c080:	2000052c 0000000d 00000001 20000530     ,.. ........0.. 
   1c090:	0000008d 00000002 20000534 0000000d     ........4.. ....
   1c0a0:	00000001                                ....

0001c0a4 <_ZL13OD_record1A00>:
   1c0a4:	20000538 0000000d 00000001 2000053c     8.. ........<.. 
   1c0b4:	0000008d 00000004 20000540 0000008d     ........@.. ....
   1c0c4:	00000004 20000544 0000008d 00000004     ....D.. ........
   1c0d4:	20000548 0000008d 00000004 2000054c     H.. ........L.. 
   1c0e4:	0000008d 00000004 20000550 0000008d     ........P.. ....
   1c0f4:	00000004 20000554 0000008d 00000004     ....T.. ........
   1c104:	20000558 0000008d 00000004              X.. ........

0001c110 <_ZL13OD_record1A01>:
   1c110:	2000055c 0000000d 00000001 20000560     \.. ........`.. 
   1c120:	0000008d 00000004 20000564 0000008d     ........d.. ....
   1c130:	00000004 20000568 0000008d 00000004     ....h.. ........
   1c140:	2000056c 0000008d 00000004 20000570     l.. ........p.. 
   1c150:	0000008d 00000004 20000574 0000008d     ........t.. ....
   1c160:	00000004 20000578 0000008d 00000004     ....x.. ........
   1c170:	2000057c 0000008d 00000004              |.. ........

0001c17c <_ZL13OD_record1A02>:
   1c17c:	20000580 0000000d 00000001 20000584     ... ........... 
   1c18c:	0000008d 00000004 20000588 0000008d     ........... ....
   1c19c:	00000004 2000058c 0000008d 00000004     ....... ........
   1c1ac:	20000590 0000008d 00000004 20000594     ... ........... 
   1c1bc:	0000008d 00000004 20000598 0000008d     ........... ....
   1c1cc:	00000004 2000059c 0000008d 00000004     ....... ........
   1c1dc:	200005a0 0000008d 00000004              ... ........

0001c1e8 <_ZL13OD_record1A03>:
   1c1e8:	200005a4 0000000d 00000001 200005a8     ... ........... 
   1c1f8:	0000008d 00000004 200005ac 0000008d     ........... ....
   1c208:	00000004 200005b0 0000008d 00000004     ....... ........
   1c218:	200005b4 0000008d 00000004 200005b8     ... ........... 
   1c228:	0000008d 00000004 200005bc 0000008d     ........... ....
   1c238:	00000004 200005c0 0000008d 00000004     ....... ........
   1c248:	200005c4 0000008d 00000004              ... ........

0001c254 <_ZL13OD_record2120>:
   1c254:	200002b0 00000006 00000001 200002b8     ... ........... 
   1c264:	000000be 00000008 200002c0 000000be     ........... ....
   1c274:	00000008 200002c8 000000be 00000004     ....... ........
   1c284:	200002d0 000000be 00000008 00000000     ... ............
   1c294:	0000000e 00000000                       ........

0001c29c <_ZL13OD_record2130>:
   1c29c:	200002e0 00000006 00000001 200002e1     ... ........... 
   1c2ac:	00000006 0000001e 20000300 0000008e     ........... ....
   1c2bc:	00000008 20000308 000000be 00000004     ....... ........

0001c2cc <CO_ObjDict>:
   1c2cc:	00001000 00000000 00000085 00000004     ................
   1c2dc:	200003a0 00001001 00000000 00000036     ... ........6...
   1c2ec:	00000001 20000224 00001002 00000000     ....$.. ........
   1c2fc:	000000b6 00000004 20000228 00001003     ........(.. ....
   1c30c:	00000008 0000008e 00000004 2000022c     ............,.. 
   1c31c:	00001005 00000000 0000008d 00000004     ................
   1c32c:	200003a4 00001006 00000000 0000008d     ... ............
   1c33c:	00000004 200003a8 00001007 00000000     ....... ........
   1c34c:	0000008d 00000004 200003ac 00001008     ........... ....
   1c35c:	00000000 00000005 0000000b 200003b0     ............... 
   1c36c:	00001009 00000000 00000005 00000004     ................
   1c37c:	200003bb 0000100a 00000000 00000005     ... ............
   1c38c:	00000004 200003bf 00001010 00000001     ....... ........
   1c39c:	0000008e 00000004 2000024c 00001011     ........L.. ....
   1c3ac:	00000001 0000008e 00000004 20000250     ............P.. 
   1c3bc:	00001014 00000000 00000085 00000004     ................
   1c3cc:	200003c4 00001015 00000000 0000008d     ... ............
   1c3dc:	00000002 200003c8 00001016 00000004     ....... ........
   1c3ec:	0000008d 00000004 200003cc 00001017     ........... ....
   1c3fc:	00000000 0000008d 00000002 200003dc     ............... 
   1c40c:	00001018 00000004 00000000 00000000     ................
   1c41c:	0001bcb4 00001019 00000000 0000000d     ................
   1c42c:	00000001 200003f4 00001029 00000006     ....... ).......
   1c43c:	0000000d 00000001 200003f5 00001200     ........... ....
   1c44c:	00000002 00000000 00000000 0001bcf0     ................
   1c45c:	00001400 00000002 00000000 00000000     ................
   1c46c:	0001bd14 00001401 00000002 00000000     ................
   1c47c:	00000000 0001bd38 00001402 00000002     ....8...........
	...
   1c494:	0001bd5c 00001403 00000002 00000000     \...............
   1c4a4:	00000000 0001bd80 00001600 00000008     ................
	...
   1c4bc:	0001bda4 00001601 00000008 00000000     ................
   1c4cc:	00000000 0001be10 00001602 00000008     ................
	...
   1c4e4:	0001be7c 00001603 00000008 00000000     |...............
   1c4f4:	00000000 0001bee8 00001800 00000006     ................
	...
   1c50c:	0001bf54 00001801 00000006 00000000     T...............
   1c51c:	00000000 0001bfa8 00001802 00000006     ................
	...
   1c534:	0001bffc 00001803 00000006 00000000     ................
   1c544:	00000000 0001c050 00001a00 00000008     ....P...........
	...
   1c55c:	0001c0a4 00001a01 00000008 00000000     ................
   1c56c:	00000000 0001c110 00001a02 00000008     ................
	...
   1c584:	0001c17c 00001a03 00000008 00000000     |...............
   1c594:	00000000 0001c1e8 00001f80 00000000     ................
   1c5a4:	0000008d 00000004 200005c8 00002100     ........... .!..
   1c5b4:	00000000 00000036 0000000a 20000254     ....6.......T.. 
   1c5c4:	00002101 00000000 0000000d 00000001     .!..............
   1c5d4:	200005cc 00002102 00000000 0000008d     ... .!..........
   1c5e4:	00000002 200005ce 00002103 00000000     ....... .!......
   1c5f4:	0000008e 00000002 2000025e 00002104     ........^.. .!..
   1c604:	00000000 00000086 00000002 20000260     ............`.. 
   1c614:	00002106 00000000 00000087 00000004     .!..............
   1c624:	20000354 00002107 00000005 000000be     T.. .!..........
   1c634:	00000002 20000262 00002108 00000001     ....b.. .!......
   1c644:	000000fd 00000008 2000026c 00002109     ........l.. .!..
   1c654:	00000001 000000fd 00000008 2000026e     ............n.. 
   1c664:	00002110 00000010 000000fe 00000004     .!..............
   1c674:	20000270 00002111 00000010 000000fd     p.. .!..........
   1c684:	00000004 200005d0 00002112 00000010     ....... .!......
   1c694:	000000ff 00000004 20000358 00002120     ........X..  !..
   1c6a4:	00000005 0000007d 00000008 0001c254     ....}.......T...
   1c6b4:	00002130 00000003 00000000 00000000     0!..............
   1c6c4:	0001c29c 00006000 00000008 00000076     .....`......v...
   1c6d4:	00000001 20000310 00006200 00000008     ....... .b......
   1c6e4:	0000003e 00000001 20000318 00006401     >.......... .d..
   1c6f4:	0000000c 000000b6 00000002 20000320     ............ .. 
   1c704:	00006411 00000008 000000be 00000002     .d..............
   1c714:	20000338 682f2e2e 732f6c61 682f6372     8.. ../hal/src/h
   1c724:	695f6c61 00632e6f 2e2f2e2e 2e2e2f2e     al_io.c.../../..
   1c734:	554c412f 6972445f 2f726576 5f554c41     /ALU_Driver/ALU_
   1c744:	76697244 682f7265 702f6c70 2f74726f     Driver/hpl/port/
   1c754:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   1c764:	313a3032 34333a35 00000000              20:15:34....

0001c770 <_ZTV14Calendar_Class>:
	...
   1c778:	0001a7d1 0001a8c1                       ........

0001c780 <_ZTV17DateTimeLog_Class>:
	...
   1c788:	000114f9 000114f9                       ........

0001c790 <_global_impure_ptr>:
   1c790:	20000618                                ... 

0001c794 <_init>:
   1c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c796:	bf00      	nop
   1c798:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c79a:	bc08      	pop	{r3}
   1c79c:	469e      	mov	lr, r3
   1c79e:	4770      	bx	lr

0001c7a0 <__init_array_start>:
   1c7a0:	0001b5a1 	.word	0x0001b5a1

0001c7a4 <__frame_dummy_init_array_entry>:
   1c7a4:	00000289 000006f1 00000fe5 00001359     ............Y...
   1c7b4:	0000f3a9 0000f661 0000fab1 0000fc1d     ....a...........
   1c7c4:	0000fe5d 000104d1 00010a51 00011105     ].......Q.......
   1c7d4:	000114d1 0001163d 00011881 00011b29     ....=.......)...
   1c7e4:	00012041 00012441 00013d49 00014495     A ..A$..I=...D..
   1c7f4:	000148c1 00014b41 00014d7d 000150c1     .H..AK..}M...P..
   1c804:	00019601 00019931 0001a3c1 0001ab0d     ....1...........

0001c814 <_fini>:
   1c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c816:	bf00      	nop
   1c818:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c81a:	bc08      	pop	{r3}
   1c81c:	469e      	mov	lr, r3
   1c81e:	4770      	bx	lr

0001c820 <__fini_array_start>:
   1c820:	00000265 	.word	0x00000265
