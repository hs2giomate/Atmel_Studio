
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f270  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f270  0000f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000056c  20000000  0000f278  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002056c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002056c  2**0
                  CONTENTS
  5 .bss          00000b14  2000056c  0000f7e4  0002056c  2**2
                  ALLOC
  6 .stack        00010000  20001080  000102f8  0002056c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002059a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00064686  00000000  00000000  000205f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008a8c  00000000  00000000  00084c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001ad78  00000000  00000000  0008d705  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003008  00000000  00000000  000a847d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d00  00000000  00000000  000ab485  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bc49  00000000  00000000  000ae185  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003565d  00000000  00000000  000f9dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013b73b  00000000  00000000  0012f42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c7b4  00000000  00000000  0026ab68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 10 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	29 5c 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     )\..............
      7c:	d1 02 00 00 c5 4a 00 00 d5 4a 00 00 e5 4a 00 00     .....J...J...J..
      8c:	f5 4a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .J..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 b5 6e 00 00 d1 6e 00 00 ed 6e 00 00     .....n...n...n..
     144:	09 6f 00 00 25 6f 00 00 41 6f 00 00 5d 6f 00 00     .o..%o..Ao..]o..
     154:	79 6f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     yo..............
     164:	d1 02 00 00 95 6f 00 00 b1 6f 00 00 cd 6f 00 00     .....o...o...o..
     174:	e9 6f 00 00 d1 02 00 00 45 40 00 00 51 aa 00 00     .o......E@..Q...
     184:	61 aa 00 00 71 aa 00 00 81 aa 00 00 d1 02 00 00     a...q...........
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 1d 81 00 00 39 81 00 00     ............9...
     1f4:	55 81 00 00 71 81 00 00 8d 81 00 00 a9 81 00 00     U...q...........
     204:	d1 02 00 00 c5 81 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000056c 	.word	0x2000056c
     280:	00000000 	.word	0x00000000
     284:	0000f278 	.word	0x0000f278

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f278 	.word	0x0000f278
     2c4:	20000570 	.word	0x20000570
     2c8:	0000f278 	.word	0x0000f278
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f278 	.word	0x0000f278
     33c:	2000056c 	.word	0x2000056c
     340:	20001080 	.word	0x20001080
     344:	2000056c 	.word	0x2000056c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e949 	.word	0x0000e949
     354:	000003d1 	.word	0x000003d1

00000358 <_Z14StartLivePulsev>:
 */ 


#include "main.h"

uint8_t	StartLivePulse(void){
     358:	b508      	push	{r3, lr}
	//usb<<"**** Life Pulse Activated  ****"<<NEWLINE;
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     35a:	4802      	ldr	r0, [pc, #8]	; (364 <_Z14StartLivePulsev+0xc>)
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <_Z14StartLivePulsev+0x10>)
     35e:	4798      	blx	r3
	return p;
}
     360:	b2c0      	uxtb	r0, r0
     362:	bd08      	pop	{r3, pc}
     364:	20000e88 	.word	0x20000e88
     368:	0000233d 	.word	0x0000233d

0000036c <_Z24WriteUserParametersFlashv>:
bool	WriteUserParametersFlash(void){
     36c:	b530      	push	{r4, r5, lr}
     36e:	b083      	sub	sp, #12

	userParameters	p=defaultParameters;
     370:	4b10      	ldr	r3, [pc, #64]	; (3b4 <_Z24WriteUserParametersFlashv+0x48>)
     372:	781b      	ldrb	r3, [r3, #0]
     374:	ad02      	add	r5, sp, #8
     376:	f805 3d04 	strb.w	r3, [r5, #-4]!
	flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(userParameters));
     37a:	4b0f      	ldr	r3, [pc, #60]	; (3b8 <_Z24WriteUserParametersFlashv+0x4c>)
     37c:	6819      	ldr	r1, [r3, #0]
     37e:	4c0f      	ldr	r4, [pc, #60]	; (3bc <_Z24WriteUserParametersFlashv+0x50>)
     380:	2201      	movs	r2, #1
     382:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     386:	4620      	mov	r0, r4
     388:	4b0d      	ldr	r3, [pc, #52]	; (3c0 <_Z24WriteUserParametersFlashv+0x54>)
     38a:	4798      	blx	r3
	
	flash.flushConfigurationData(&p);
     38c:	4629      	mov	r1, r5
     38e:	4620      	mov	r0, r4
     390:	4b0c      	ldr	r3, [pc, #48]	; (3c4 <_Z24WriteUserParametersFlashv+0x58>)
     392:	4798      	blx	r3
	delay_ms(WRITE_DELAY);
     394:	2064      	movs	r0, #100	; 0x64
     396:	4b0c      	ldr	r3, [pc, #48]	; (3c8 <_Z24WriteUserParametersFlashv+0x5c>)
     398:	4798      	blx	r3
	userParameters	q;
	q=flash.readConfigurationData(q);
     39a:	4669      	mov	r1, sp
     39c:	4620      	mov	r0, r4
     39e:	4b0b      	ldr	r3, [pc, #44]	; (3cc <_Z24WriteUserParametersFlashv+0x60>)
     3a0:	4798      	blx	r3
	if (p.flapperValveOffset==q.flapperValveOffset)
     3a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
     3a6:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return false;
	}
}
     3a8:	4283      	cmp	r3, r0
     3aa:	bf14      	ite	ne
     3ac:	2000      	movne	r0, #0
     3ae:	2001      	moveq	r0, #1
     3b0:	b003      	add	sp, #12
     3b2:	bd30      	pop	{r4, r5, pc}
     3b4:	0000f194 	.word	0x0000f194
     3b8:	20000ba8 	.word	0x20000ba8
     3bc:	20000bac 	.word	0x20000bac
     3c0:	0000d4c5 	.word	0x0000d4c5
     3c4:	0000d1b5 	.word	0x0000d1b5
     3c8:	00001ff1 	.word	0x00001ff1
     3cc:	0000d1fd 	.word	0x0000d1fd

000003d0 <main>:
	}
}


int main(void)		
{
     3d0:	b500      	push	{lr}
     3d2:	b0c9      	sub	sp, #292	; 0x124
	atmel_start_init();
     3d4:	4b1a      	ldr	r3, [pc, #104]	; (440 <main+0x70>)
     3d6:	4798      	blx	r3
	usb.Init();
     3d8:	481a      	ldr	r0, [pc, #104]	; (444 <main+0x74>)
     3da:	4b1b      	ldr	r3, [pc, #108]	; (448 <main+0x78>)
     3dc:	4798      	blx	r3
	StartLivePulse();
     3de:	4b1b      	ldr	r3, [pc, #108]	; (44c <main+0x7c>)
     3e0:	4798      	blx	r3
	delay_ms(500);
     3e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     3e6:	4b1a      	ldr	r3, [pc, #104]	; (450 <main+0x80>)
     3e8:	4798      	blx	r3
	flash.Init();
     3ea:	481a      	ldr	r0, [pc, #104]	; (454 <main+0x84>)
     3ec:	4b1a      	ldr	r3, [pc, #104]	; (458 <main+0x88>)
     3ee:	4798      	blx	r3
	WriteUserParametersFlash();
     3f0:	4b1a      	ldr	r3, [pc, #104]	; (45c <main+0x8c>)
     3f2:	4798      	blx	r3
	Maintenance_Tool	toolApp;
     3f4:	4668      	mov	r0, sp
     3f6:	4b1a      	ldr	r3, [pc, #104]	; (460 <main+0x90>)
     3f8:	4798      	blx	r3
	toolApp.Init();
     3fa:	4668      	mov	r0, sp
     3fc:	4b19      	ldr	r3, [pc, #100]	; (464 <main+0x94>)
     3fe:	4798      	blx	r3
	while (1)
	{
		if (toolApp.IsAppConnected())
     400:	4c19      	ldr	r4, [pc, #100]	; (468 <main+0x98>)
			
			
		}
		else
		{
			toolApp.setConnected(false);
     402:	4e1a      	ldr	r6, [pc, #104]	; (46c <main+0x9c>)
			delay_ms(100);
     404:	4d12      	ldr	r5, [pc, #72]	; (450 <main+0x80>)
     406:	e009      	b.n	41c <main+0x4c>
				toolApp.NotifyConnectionAcknowledge();
     408:	4668      	mov	r0, sp
     40a:	4b19      	ldr	r3, [pc, #100]	; (470 <main+0xa0>)
     40c:	4798      	blx	r3
				toolApp.ClearLocalBuffer();
     40e:	4668      	mov	r0, sp
     410:	4b18      	ldr	r3, [pc, #96]	; (474 <main+0xa4>)
     412:	4798      	blx	r3
				while (!usb.txReady);
     414:	4a0b      	ldr	r2, [pc, #44]	; (444 <main+0x74>)
     416:	7d13      	ldrb	r3, [r2, #20]
     418:	2b00      	cmp	r3, #0
     41a:	d0fc      	beq.n	416 <main+0x46>
		if (toolApp.IsAppConnected())
     41c:	4668      	mov	r0, sp
     41e:	47a0      	blx	r4
     420:	b138      	cbz	r0, 432 <main+0x62>
			if (toolApp.localBuffer[sizeof(GAINMessageHeader)]==(uint8_t)'f')
     422:	f89d 3009 	ldrb.w	r3, [sp, #9]
     426:	2b66      	cmp	r3, #102	; 0x66
     428:	d0ee      	beq.n	408 <main+0x38>
				toolApp.handleCommunication();
     42a:	4668      	mov	r0, sp
     42c:	4b12      	ldr	r3, [pc, #72]	; (478 <main+0xa8>)
     42e:	4798      	blx	r3
     430:	e7f4      	b.n	41c <main+0x4c>
			toolApp.setConnected(false);
     432:	2100      	movs	r1, #0
     434:	4668      	mov	r0, sp
     436:	47b0      	blx	r6
			delay_ms(100);
     438:	2064      	movs	r0, #100	; 0x64
     43a:	47a8      	blx	r5
     43c:	e7ee      	b.n	41c <main+0x4c>
     43e:	bf00      	nop
     440:	000009ad 	.word	0x000009ad
     444:	20000c6c 	.word	0x20000c6c
     448:	0000dbd5 	.word	0x0000dbd5
     44c:	00000359 	.word	0x00000359
     450:	00001ff1 	.word	0x00001ff1
     454:	20000bac 	.word	0x20000bac
     458:	0000d151 	.word	0x0000d151
     45c:	0000036d 	.word	0x0000036d
     460:	0000049d 	.word	0x0000049d
     464:	000006ed 	.word	0x000006ed
     468:	000004e5 	.word	0x000004e5
     46c:	000004b5 	.word	0x000004b5
     470:	00000585 	.word	0x00000585
     474:	00000565 	.word	0x00000565
     478:	000008e5 	.word	0x000008e5

0000047c <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     47c:	4b02      	ldr	r3, [pc, #8]	; (488 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     47e:	681a      	ldr	r2, [r3, #0]
     480:	6813      	ldr	r3, [r2, #0]
     482:	3301      	adds	r3, #1
     484:	6013      	str	r3, [r2, #0]
     486:	4770      	bx	lr
     488:	20000588 	.word	0x20000588

0000048c <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     48c:	4b02      	ldr	r3, [pc, #8]	; (498 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	2200      	movs	r2, #0
     492:	711a      	strb	r2, [r3, #4]
     494:	4770      	bx	lr
     496:	bf00      	nop
     498:	20000588 	.word	0x20000588

0000049c <_ZN16Maintenance_ToolC1Ev>:


// default constructor
Maintenance_Tool::Maintenance_Tool()
{
	ptrMaintenanceTool=this;
     49c:	4a04      	ldr	r2, [pc, #16]	; (4b0 <_ZN16Maintenance_ToolC1Ev+0x14>)
     49e:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
     4a0:	2200      	movs	r2, #0
     4a2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
     4a6:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
     4a8:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
     4aa:	6002      	str	r2, [r0, #0]
	
} //Maintenance_Tool
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop
     4b0:	20000588 	.word	0x20000588

000004b4 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     4b4:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     4b6:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
     4ba:	b919      	cbnz	r1, 4c4 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     4bc:	4805      	ldr	r0, [pc, #20]	; (4d4 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     4be:	4b06      	ldr	r3, [pc, #24]	; (4d8 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     4c0:	4798      	blx	r3
     4c2:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     4c4:	f64e 2260 	movw	r2, #60000	; 0xea60
     4c8:	4904      	ldr	r1, [pc, #16]	; (4dc <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     4ca:	4802      	ldr	r0, [pc, #8]	; (4d4 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	20000d94 	.word	0x20000d94
     4d8:	0000e425 	.word	0x0000e425
     4dc:	0000048d 	.word	0x0000048d
     4e0:	0000e505 	.word	0x0000e505

000004e4 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     4e4:	b510      	push	{r4, lr}
     4e6:	4604      	mov	r4, r0
	result=false;
     4e8:	2300      	movs	r3, #0
     4ea:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
     4ee:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
     4f2:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
     4f6:	b12b      	cbz	r3, 504 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     4f8:	2301      	movs	r3, #1
     4fa:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
     4fe:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
     502:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     504:	4b13      	ldr	r3, [pc, #76]	; (554 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     506:	7d5b      	ldrb	r3, [r3, #21]
     508:	b18b      	cbz	r3, 52e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     50a:	1d43      	adds	r3, r0, #5
     50c:	3009      	adds	r0, #9
     50e:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     510:	f813 1b01 	ldrb.w	r1, [r3], #1
     514:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     518:	4283      	cmp	r3, r0
     51a:	d1f9      	bne.n	510 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     51c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     520:	4b0d      	ldr	r3, [pc, #52]	; (558 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     522:	ea82 0103 	eor.w	r1, r2, r3
     526:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
			if (xorResult==0)
     52a:	429a      	cmp	r2, r3
     52c:	d005      	beq.n	53a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     52e:	2240      	movs	r2, #64	; 0x40
     530:	1d61      	adds	r1, r4, #5
     532:	4808      	ldr	r0, [pc, #32]	; (554 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     534:	4b09      	ldr	r3, [pc, #36]	; (55c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     536:	4798      	blx	r3
     538:	e7e1      	b.n	4fe <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     53a:	2101      	movs	r1, #1
     53c:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
				result=true;
     540:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
				is_MTPC_Beaming=true;
     544:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     546:	4620      	mov	r0, r4
     548:	4b05      	ldr	r3, [pc, #20]	; (560 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     54a:	4798      	blx	r3
				return	result;
     54c:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     550:	bd10      	pop	{r4, pc}
     552:	bf00      	nop
     554:	20000c6c 	.word	0x20000c6c
     558:	61626364 	.word	0x61626364
     55c:	0000dcbd 	.word	0x0000dcbd
     560:	000004b5 	.word	0x000004b5

00000564 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     564:	b410      	push	{r4}
     566:	1d02      	adds	r2, r0, #4
     568:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     56a:	2400      	movs	r4, #0
     56c:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     570:	b2d9      	uxtb	r1, r3
     572:	3301      	adds	r3, #1
     574:	2b41      	cmp	r3, #65	; 0x41
     576:	d1f9      	bne.n	56c <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     578:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
	}
	return	i;
}
     57c:	4608      	mov	r0, r1
     57e:	bc10      	pop	{r4}
     580:	4770      	bx	lr
	...

00000584 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv>:
// 	io.writeData(&checksum, sizeof(checksum));

	return result;
	}
	
bool	Maintenance_Tool::NotifyConnectionAcknowledge(void){
     584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     586:	4604      	mov	r4, r0
	memcpy(&deviceID.cpuSerialNumber,cpuSerial,sizeof(cpuSerial));
     588:	f8d0 5102 	ldr.w	r5, [r0, #258]	; 0x102
     58c:	f8d0 0106 	ldr.w	r0, [r0, #262]	; 0x106
     590:	f8d4 110a 	ldr.w	r1, [r4, #266]	; 0x10a
     594:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
     598:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
     59c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
     5a0:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
     5a4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	//deviceID.cpuSerialNumber=cpuSerial;
	delay_us(100);
     5a8:	2064      	movs	r0, #100	; 0x64
     5aa:	4b12      	ldr	r3, [pc, #72]	; (5f4 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x70>)
     5ac:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     5ae:	4912      	ldr	r1, [pc, #72]	; (5f8 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x74>)
     5b0:	4812      	ldr	r0, [pc, #72]	; (5fc <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5b2:	4b13      	ldr	r3, [pc, #76]	; (600 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x7c>)
     5b4:	4798      	blx	r3
	usb<<"CPU Serial: ";
	for (i = 0; i < sizeof(cpuSerial); i++)
     5b6:	2300      	movs	r3, #0
     5b8:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	{
		usb.print(cpuSerial[i],HEX);
     5bc:	4f0f      	ldr	r7, [pc, #60]	; (5fc <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5be:	2610      	movs	r6, #16
     5c0:	4d10      	ldr	r5, [pc, #64]	; (604 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x80>)
     5c2:	4423      	add	r3, r4
     5c4:	4632      	mov	r2, r6
     5c6:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
     5ca:	4638      	mov	r0, r7
     5cc:	47a8      	blx	r5
	for (i = 0; i < sizeof(cpuSerial); i++)
     5ce:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
     5d2:	3301      	adds	r3, #1
     5d4:	b2db      	uxtb	r3, r3
     5d6:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
     5da:	2b0f      	cmp	r3, #15
     5dc:	d9f1      	bls.n	5c2 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x3e>
	}

	usb.println();
     5de:	4807      	ldr	r0, [pc, #28]	; (5fc <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x84>)
     5e2:	4798      	blx	r3
	result=(bool)(i>0);
     5e4:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
     5e8:	3000      	adds	r0, #0
     5ea:	bf18      	it	ne
     5ec:	2001      	movne	r0, #1
     5ee:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
	return result;
}
     5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5f4:	00001fbd 	.word	0x00001fbd
     5f8:	0000ed7c 	.word	0x0000ed7c
     5fc:	20000c6c 	.word	0x20000c6c
     600:	0000dfb1 	.word	0x0000dfb1
     604:	0000dfd1 	.word	0x0000dfd1
     608:	0000e03d 	.word	0x0000e03d

0000060c <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( GAINMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     60c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
     610:	b92b      	cbnz	r3, 61e <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     612:	6483      	str	r3, [r0, #72]	; 0x48
		maintenanceIsConnected = true;
     614:	2301      	movs	r3, #1
     616:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
		bSendNotifications = true;
     61a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     61e:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
     622:	4770      	bx	lr

00000624 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader>:
bool Maintenance_Tool::handleGAINCommandWriteParameters(GAINMessageHeader& header)	{

	uint32_t	w,r;
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     624:	780b      	ldrb	r3, [r1, #0]
     626:	2b47      	cmp	r3, #71	; 0x47
     628:	d001      	beq.n	62e <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     62a:	2000      	movs	r0, #0
     62c:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(GAINMessageHeader& header)	{
     62e:	b570      	push	{r4, r5, r6, lr}
     630:	4604      	mov	r4, r0
		int n=sizeof(GAINMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(userParameters));
     632:	4e0c      	ldr	r6, [pc, #48]	; (664 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x40>)
     634:	6831      	ldr	r1, [r6, #0]
     636:	4d0c      	ldr	r5, [pc, #48]	; (668 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x44>)
     638:	2201      	movs	r2, #1
     63a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     63e:	4628      	mov	r0, r5
     640:	4b0a      	ldr	r3, [pc, #40]	; (66c <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x48>)
     642:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(userParameters));
     644:	7ae3      	ldrb	r3, [r4, #11]
     646:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     64a:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     64c:	2301      	movs	r3, #1
     64e:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     652:	f504 7180 	add.w	r1, r4, #256	; 0x100
     656:	4628      	mov	r0, r5
     658:	4c05      	ldr	r4, [pc, #20]	; (670 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x4c>)
     65a:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
			result=(bool)(r==0);
     65c:	fab0 f080 	clz	r0, r0
     660:	0940      	lsrs	r0, r0, #5
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	20000ba8 	.word	0x20000ba8
     668:	20000bac 	.word	0x20000bac
     66c:	0000d4c5 	.word	0x0000d4c5
     670:	0000d769 	.word	0x0000d769

00000674 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     674:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     676:	0855      	lsrs	r5, r2, #1
     678:	d007      	beq.n	68a <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     67a:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     67c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     680:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     682:	3401      	adds	r4, #1
     684:	b2a4      	uxth	r4, r4
     686:	42ac      	cmp	r4, r5
     688:	dbf8      	blt.n	67c <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     68a:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     68e:	bf1d      	ittte	ne
     690:	189b      	addne	r3, r3, r2
     692:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     696:	4048      	eorne	r0, r1
     698:	4608      	moveq	r0, r1

	return checksum;
	}
     69a:	bc30      	pop	{r4, r5}
     69c:	4770      	bx	lr
	...

000006a0 <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader>:
	{
     6a0:	b538      	push	{r3, r4, r5, lr}
     6a2:	4604      	mov	r4, r0
	checksum=0;
     6a4:	2500      	movs	r5, #0
     6a6:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
	checksum = calculateChecksum(0, sizeof(header), &header);
     6aa:	460b      	mov	r3, r1
     6ac:	2204      	movs	r2, #4
     6ae:	4629      	mov	r1, r5
     6b0:	4d02      	ldr	r5, [pc, #8]	; (6bc <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader+0x1c>)
     6b2:	47a8      	blx	r5
     6b4:	f8a4 00fc 	strh.w	r0, [r4, #252]	; 0xfc
	}
     6b8:	bd38      	pop	{r3, r4, r5, pc}
     6ba:	bf00      	nop
     6bc:	00000675 	.word	0x00000675

000006c0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     6c0:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     6c2:	2200      	movs	r2, #0
     6c4:	f880 211c 	strb.w	r2, [r0, #284]	; 0x11c
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     6c8:	4c07      	ldr	r4, [pc, #28]	; (6e8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     6ca:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     6ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     6d2:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
     6d6:	3301      	adds	r3, #1
     6d8:	b2db      	uxtb	r3, r3
     6da:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
     6de:	461a      	mov	r2, r3
     6e0:	2b03      	cmp	r3, #3
     6e2:	ddf2      	ble.n	6ca <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

     6e4:	bc10      	pop	{r4}
     6e6:	4770      	bx	lr
     6e8:	41002018 	.word	0x41002018

000006ec <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ee:	4604      	mov	r4, r0
	ticks=0;
     6f0:	2600      	movs	r6, #0
     6f2:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     6f4:	4d12      	ldr	r5, [pc, #72]	; (740 <_ZN16Maintenance_Tool4InitEv+0x54>)
     6f6:	4628      	mov	r0, r5
     6f8:	4b12      	ldr	r3, [pc, #72]	; (744 <_ZN16Maintenance_Tool4InitEv+0x58>)
     6fa:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     6fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     700:	4911      	ldr	r1, [pc, #68]	; (748 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     702:	4628      	mov	r0, r5
     704:	4b11      	ldr	r3, [pc, #68]	; (74c <_ZN16Maintenance_Tool4InitEv+0x60>)
     706:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     708:	f504 7581 	add.w	r5, r4, #258	; 0x102
     70c:	4629      	mov	r1, r5
     70e:	4620      	mov	r0, r4
     710:	4b0f      	ldr	r3, [pc, #60]	; (750 <_ZN16Maintenance_Tool4InitEv+0x64>)
     712:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     714:	f8d4 7102 	ldr.w	r7, [r4, #258]	; 0x102
     718:	f8d4 0106 	ldr.w	r0, [r4, #262]	; 0x106
     71c:	f8d4 110a 	ldr.w	r1, [r4, #266]	; 0x10a
     720:	f8d4 210e 	ldr.w	r2, [r4, #270]	; 0x10e
     724:	f8c4 7005 	str.w	r7, [r4, #5]
     728:	f8c4 0009 	str.w	r0, [r4, #9]
     72c:	f8c4 100d 	str.w	r1, [r4, #13]
     730:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     734:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
}
     738:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     73e:	bf00      	nop
     740:	20000d94 	.word	0x20000d94
     744:	0000e3e7 	.word	0x0000e3e7
     748:	0000047d 	.word	0x0000047d
     74c:	0000e4b5 	.word	0x0000e4b5
     750:	000006c1 	.word	0x000006c1

00000754 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb>:
	{
     754:	b538      	push	{r3, r4, r5, lr}
     756:	4605      	mov	r5, r0
     758:	460c      	mov	r4, r1
	header.selector = header.command;
     75a:	780b      	ldrb	r3, [r1, #0]
     75c:	704b      	strb	r3, [r1, #1]
	header.command = kGAINNotifyCommandReceived;
     75e:	2165      	movs	r1, #101	; 0x65
     760:	7021      	strb	r1, [r4, #0]
	header.dataSize = 0;
     762:	2100      	movs	r1, #0
     764:	8061      	strh	r1, [r4, #2]
	if (!result)
     766:	b912      	cbnz	r2, 76e <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x1a>
		header.selector |= 0x80;
     768:	f063 037f 	orn	r3, r3, #127	; 0x7f
     76c:	7063      	strb	r3, [r4, #1]
	checksum = calculateChecksum(header);
     76e:	4621      	mov	r1, r4
     770:	4628      	mov	r0, r5
     772:	4b05      	ldr	r3, [pc, #20]	; (788 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x34>)
     774:	4798      	blx	r3
     776:	f8a5 00fc 	strh.w	r0, [r5, #252]	; 0xfc
	usb.writeData(&header, sizeof(header));
     77a:	2204      	movs	r2, #4
     77c:	4621      	mov	r1, r4
     77e:	4803      	ldr	r0, [pc, #12]	; (78c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x38>)
     780:	4b03      	ldr	r3, [pc, #12]	; (790 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x3c>)
     782:	4798      	blx	r3
     784:	bd38      	pop	{r3, r4, r5, pc}
     786:	bf00      	nop
     788:	000006a1 	.word	0x000006a1
     78c:	20000c6c 	.word	0x20000c6c
     790:	0000dd99 	.word	0x0000dd99

00000794 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(GAINMessageHeader& header){
     794:	b538      	push	{r3, r4, r5, lr}
		if (result){
     796:	780b      	ldrb	r3, [r1, #0]
     798:	2b48      	cmp	r3, #72	; 0x48
     79a:	d001      	beq.n	7a0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     79c:	2000      	movs	r0, #0
     79e:	bd38      	pop	{r3, r4, r5, pc}
     7a0:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     7a2:	4b0d      	ldr	r3, [pc, #52]	; (7d8 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x44>)
     7a4:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     7a6:	2301      	movs	r3, #1
     7a8:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     7ac:	f500 7180 	add.w	r1, r0, #256	; 0x100
     7b0:	480a      	ldr	r0, [pc, #40]	; (7dc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x48>)
     7b2:	4d0b      	ldr	r5, [pc, #44]	; (7e0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x4c>)
     7b4:	47a8      	blx	r5
			 if (r>0)
     7b6:	b908      	cbnz	r0, 7bc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     7b8:	2001      	movs	r0, #1
}
     7ba:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(userParameters));
     7bc:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     7c0:	72e3      	strb	r3, [r4, #11]
				delay_us(1);
     7c2:	2001      	movs	r0, #1
     7c4:	4b07      	ldr	r3, [pc, #28]	; (7e4 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x50>)
     7c6:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     7c8:	2240      	movs	r2, #64	; 0x40
     7ca:	1d61      	adds	r1, r4, #5
     7cc:	4806      	ldr	r0, [pc, #24]	; (7e8 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x54>)
     7ce:	4b07      	ldr	r3, [pc, #28]	; (7ec <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x58>)
     7d0:	4798      	blx	r3
				 result=w>0;
     7d2:	2000      	movs	r0, #0
     7d4:	bd38      	pop	{r3, r4, r5, pc}
     7d6:	bf00      	nop
     7d8:	20000ba8 	.word	0x20000ba8
     7dc:	20000bac 	.word	0x20000bac
     7e0:	0000d849 	.word	0x0000d849
     7e4:	00001fbd 	.word	0x00001fbd
     7e8:	20000c6c 	.word	0x20000c6c
     7ec:	0000de15 	.word	0x0000de15

000007f0 <_ZN16Maintenance_Tool17handleGAINCommandEv>:
bool Maintenance_Tool::handleGAINCommand(void){
     7f0:	b538      	push	{r3, r4, r5, lr}
     7f2:	4604      	mov	r4, r0
	if ((localBuffer[n]>=kGAINCommandConnect)
     7f4:	7a82      	ldrb	r2, [r0, #10]
	&& (localBuffer[n]<kGAINNumberOfCommands))
     7f6:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
	if ((localBuffer[n]>=kGAINCommandConnect)
     7fa:	b2db      	uxtb	r3, r3
     7fc:	2b0d      	cmp	r3, #13
     7fe:	d814      	bhi.n	82a <_ZN16Maintenance_Tool17handleGAINCommandEv+0x3a>
		gotTask=true;
     800:	2301      	movs	r3, #1
     802:	f880 30fb 	strb.w	r3, [r0, #251]	; 0xfb
		result=gotTask;
     806:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		header.command=localBuffer[n];
     80a:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
		switch (header.command)
     80e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     812:	3b41      	subs	r3, #65	; 0x41
     814:	2b0d      	cmp	r3, #13
     816:	d854      	bhi.n	8c2 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd2>
     818:	e8df f003 	tbb	[pc, r3]
     81c:	30272119 	.word	0x30272119
     820:	4b431616 	.word	0x4b431616
     824:	533a1616 	.word	0x533a1616
     828:	1653      	.short	0x1653
		gotTask=false;
     82a:	2300      	movs	r3, #0
     82c:	f880 30fb 	strb.w	r3, [r0, #251]	; 0xfb
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     830:	4d26      	ldr	r5, [pc, #152]	; (8cc <_ZN16Maintenance_Tool17handleGAINCommandEv+0xdc>)
     832:	2240      	movs	r2, #64	; 0x40
     834:	1d41      	adds	r1, r0, #5
     836:	4628      	mov	r0, r5
     838:	4b25      	ldr	r3, [pc, #148]	; (8d0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe0>)
     83a:	4798      	blx	r3
		result=usb.rxReady;
     83c:	7d6b      	ldrb	r3, [r5, #21]
     83e:	b2db      	uxtb	r3, r3
     840:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	if (result)
     844:	2b00      	cmp	r3, #0
     846:	d1e2      	bne.n	80e <_ZN16Maintenance_Tool17handleGAINCommandEv+0x1e>
	}
     848:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     84c:	bd38      	pop	{r3, r4, r5, pc}
				result = handleGAINCommandConnect( header);
     84e:	f104 0198 	add.w	r1, r4, #152	; 0x98
     852:	4620      	mov	r0, r4
     854:	4b1f      	ldr	r3, [pc, #124]	; (8d4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe4>)
     856:	4798      	blx	r3
     858:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
				break;
     85c:	e7f4      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	maintenanceIsConnected = false;
     85e:	2300      	movs	r3, #0
     860:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	bSendNotifications = false;
     864:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
				break;
     868:	e7ee      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	bSendNotifications = (header.selector == 1);
     86a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
     86e:	2b01      	cmp	r3, #1
     870:	bf14      	ite	ne
     872:	2300      	movne	r3, #0
     874:	2301      	moveq	r3, #1
     876:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
				break;
     87a:	e7e5      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				notifyGAINCommandReceived( header, result);
     87c:	2201      	movs	r2, #1
     87e:	f104 0198 	add.w	r1, r4, #152	; 0x98
     882:	4620      	mov	r0, r4
     884:	4b14      	ldr	r3, [pc, #80]	; (8d8 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe8>)
     886:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     888:	2301      	movs	r3, #1
     88a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     88e:	e7db      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	bool	result(header.dataSize == sizeof(GAINControllerPortState));
     890:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
     894:	2b1a      	cmp	r3, #26
     896:	bf14      	ite	ne
     898:	2300      	movne	r3, #0
     89a:	2301      	moveq	r3, #1
     89c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     8a0:	e7d2      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = handleGAINCommandWriteParameters( header);
     8a2:	f104 0198 	add.w	r1, r4, #152	; 0x98
     8a6:	4620      	mov	r0, r4
     8a8:	4b0c      	ldr	r3, [pc, #48]	; (8dc <_ZN16Maintenance_Tool17handleGAINCommandEv+0xec>)
     8aa:	4798      	blx	r3
     8ac:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			break;
     8b0:	e7ca      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = handleGAINCommandReadParameters( header);
     8b2:	f104 0198 	add.w	r1, r4, #152	; 0x98
     8b6:	4620      	mov	r0, r4
     8b8:	4b09      	ldr	r3, [pc, #36]	; (8e0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xf0>)
     8ba:	4798      	blx	r3
     8bc:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			break;
     8c0:	e7c2      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = false;
     8c2:	2300      	movs	r3, #0
     8c4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     8c8:	e7be      	b.n	848 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
     8ca:	bf00      	nop
     8cc:	20000c6c 	.word	0x20000c6c
     8d0:	0000dcbd 	.word	0x0000dcbd
     8d4:	0000060d 	.word	0x0000060d
     8d8:	00000755 	.word	0x00000755
     8dc:	00000625 	.word	0x00000625
     8e0:	00000795 	.word	0x00000795

000008e4 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8e6:	4604      	mov	r4, r0
	result=false;
     8e8:	2300      	movs	r3, #0
     8ea:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	if (gotAccess)
     8ee:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
     8f2:	2b00      	cmp	r3, #0
     8f4:	d044      	beq.n	980 <_ZN16Maintenance_Tool19handleCommunicationEv+0x9c>
		if (usb.rxReady)
     8f6:	4b24      	ldr	r3, [pc, #144]	; (988 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     8f8:	7d5b      	ldrb	r3, [r3, #21]
     8fa:	2b00      	cmp	r3, #0
     8fc:	d03c      	beq.n	978 <_ZN16Maintenance_Tool19handleCommunicationEv+0x94>
			switch (input){
     8fe:	7a43      	ldrb	r3, [r0, #9]
     900:	2b3d      	cmp	r3, #61	; 0x3d
     902:	d01e      	beq.n	942 <_ZN16Maintenance_Tool19handleCommunicationEv+0x5e>
     904:	2b3e      	cmp	r3, #62	; 0x3e
     906:	d017      	beq.n	938 <_ZN16Maintenance_Tool19handleCommunicationEv+0x54>
     908:	2b3c      	cmp	r3, #60	; 0x3c
     90a:	d003      	beq.n	914 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
					gotCommand=false;
     90c:	2300      	movs	r3, #0
     90e:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
				break;
     912:	e006      	b.n	922 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					gotCommand=true;
     914:	2301      	movs	r3, #1
     916:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
					result = handleGAINCommand();
     91a:	4b1c      	ldr	r3, [pc, #112]	; (98c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     91c:	4798      	blx	r3
     91e:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			ClearLocalBuffer();
     922:	4620      	mov	r0, r4
     924:	4b1a      	ldr	r3, [pc, #104]	; (990 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>)
     926:	4798      	blx	r3
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     928:	2240      	movs	r2, #64	; 0x40
     92a:	1d61      	adds	r1, r4, #5
     92c:	4816      	ldr	r0, [pc, #88]	; (988 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     92e:	4b19      	ldr	r3, [pc, #100]	; (994 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb0>)
     930:	4798      	blx	r3
	}
     932:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					result = handleGAINCommand();
     938:	4b14      	ldr	r3, [pc, #80]	; (98c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     93a:	4798      	blx	r3
     93c:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
				break;
     940:	e7ef      	b.n	922 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					is_MTPC_Beaming=true;
     942:	2501      	movs	r5, #1
     944:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     946:	4e14      	ldr	r6, [pc, #80]	; (998 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     948:	4630      	mov	r0, r6
     94a:	4b14      	ldr	r3, [pc, #80]	; (99c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     94c:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     94e:	4f14      	ldr	r7, [pc, #80]	; (9a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     950:	4639      	mov	r1, r7
     952:	4630      	mov	r0, r6
     954:	4b13      	ldr	r3, [pc, #76]	; (9a4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     956:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     958:	f242 7210 	movw	r2, #10000	; 0x2710
     95c:	4639      	mov	r1, r7
     95e:	4630      	mov	r0, r6
     960:	4b11      	ldr	r3, [pc, #68]	; (9a8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     962:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     964:	2300      	movs	r3, #0
     966:	64a3      	str	r3, [r4, #72]	; 0x48
					maintenanceIsConnected = true;
     968:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
					bSendNotifications = true;
     96c:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
					result=is_MTPC_Beaming;
     970:	7923      	ldrb	r3, [r4, #4]
     972:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     976:	e7d4      	b.n	922 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
			gotCommand=false;
     978:	2300      	movs	r3, #0
     97a:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
     97e:	e7d3      	b.n	928 <_ZN16Maintenance_Tool19handleCommunicationEv+0x44>
		gotCommand=false;
     980:	2300      	movs	r3, #0
     982:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
     986:	e7d4      	b.n	932 <_ZN16Maintenance_Tool19handleCommunicationEv+0x4e>
     988:	20000c6c 	.word	0x20000c6c
     98c:	000007f1 	.word	0x000007f1
     990:	00000565 	.word	0x00000565
     994:	0000dcbd 	.word	0x0000dcbd
     998:	20000d94 	.word	0x20000d94
     99c:	0000e425 	.word	0x0000e425
     9a0:	0000048d 	.word	0x0000048d
     9a4:	0000e53d 	.word	0x0000e53d
     9a8:	0000e505 	.word	0x0000e505

000009ac <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     9ac:	b580      	push	{r7, lr}
     9ae:	af00      	add	r7, sp, #0
	system_init();
     9b0:	4b03      	ldr	r3, [pc, #12]	; (9c0 <atmel_start_init+0x14>)
     9b2:	4798      	blx	r3
	usb_init();
     9b4:	4b03      	ldr	r3, [pc, #12]	; (9c4 <atmel_start_init+0x18>)
     9b6:	4798      	blx	r3
	spi_nor_flash_init();
     9b8:	4b03      	ldr	r3, [pc, #12]	; (9c8 <atmel_start_init+0x1c>)
     9ba:	4798      	blx	r3
}
     9bc:	bf00      	nop
     9be:	bd80      	pop	{r7, pc}
     9c0:	00001c51 	.word	0x00001c51
     9c4:	0000b155 	.word	0x0000b155
     9c8:	0000b0e9 	.word	0x0000b0e9

000009cc <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	60f8      	str	r0, [r7, #12]
     9d4:	460b      	mov	r3, r1
     9d6:	607a      	str	r2, [r7, #4]
     9d8:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9da:	7afa      	ldrb	r2, [r7, #11]
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	3220      	adds	r2, #32
     9e0:	6879      	ldr	r1, [r7, #4]
     9e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     9e6:	bf00      	nop
     9e8:	3714      	adds	r7, #20
     9ea:	46bd      	mov	sp, r7
     9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f0:	4770      	bx	lr

000009f2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     9f2:	b480      	push	{r7}
     9f4:	b083      	sub	sp, #12
     9f6:	af00      	add	r7, sp, #0
     9f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     9fa:	687b      	ldr	r3, [r7, #4]
     9fc:	691b      	ldr	r3, [r3, #16]
     9fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a06:	bf00      	nop
     a08:	370c      	adds	r7, #12
     a0a:	46bd      	mov	sp, r7
     a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a10:	4770      	bx	lr

00000a12 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     a12:	b480      	push	{r7}
     a14:	b083      	sub	sp, #12
     a16:	af00      	add	r7, sp, #0
     a18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	691b      	ldr	r3, [r3, #16]
     a1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a26:	bf00      	nop
     a28:	370c      	adds	r7, #12
     a2a:	46bd      	mov	sp, r7
     a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a30:	4770      	bx	lr

00000a32 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     a32:	b480      	push	{r7}
     a34:	b083      	sub	sp, #12
     a36:	af00      	add	r7, sp, #0
     a38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     a3a:	687b      	ldr	r3, [r7, #4]
     a3c:	691b      	ldr	r3, [r3, #16]
     a3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a46:	bf00      	nop
     a48:	370c      	adds	r7, #12
     a4a:	46bd      	mov	sp, r7
     a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a50:	4770      	bx	lr

00000a52 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     a52:	b480      	push	{r7}
     a54:	b083      	sub	sp, #12
     a56:	af00      	add	r7, sp, #0
     a58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	691b      	ldr	r3, [r3, #16]
     a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a66:	bf00      	nop
     a68:	370c      	adds	r7, #12
     a6a:	46bd      	mov	sp, r7
     a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a70:	4770      	bx	lr

00000a72 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     a72:	b480      	push	{r7}
     a74:	b083      	sub	sp, #12
     a76:	af00      	add	r7, sp, #0
     a78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	695b      	ldr	r3, [r3, #20]
     a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a86:	bf00      	nop
     a88:	370c      	adds	r7, #12
     a8a:	46bd      	mov	sp, r7
     a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a90:	4770      	bx	lr

00000a92 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     a92:	b480      	push	{r7}
     a94:	b083      	sub	sp, #12
     a96:	af00      	add	r7, sp, #0
     a98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	695b      	ldr	r3, [r3, #20]
     a9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aa6:	bf00      	nop
     aa8:	370c      	adds	r7, #12
     aaa:	46bd      	mov	sp, r7
     aac:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab0:	4770      	bx	lr

00000ab2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     ab2:	b480      	push	{r7}
     ab4:	b083      	sub	sp, #12
     ab6:	af00      	add	r7, sp, #0
     ab8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	695b      	ldr	r3, [r3, #20]
     abe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ac6:	bf00      	nop
     ac8:	370c      	adds	r7, #12
     aca:	46bd      	mov	sp, r7
     acc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad0:	4770      	bx	lr

00000ad2 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     ad2:	b480      	push	{r7}
     ad4:	b083      	sub	sp, #12
     ad6:	af00      	add	r7, sp, #0
     ad8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	695b      	ldr	r3, [r3, #20]
     ade:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ae6:	bf00      	nop
     ae8:	370c      	adds	r7, #12
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr

00000af2 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     af2:	b480      	push	{r7}
     af4:	b083      	sub	sp, #12
     af6:	af00      	add	r7, sp, #0
     af8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	695b      	ldr	r3, [r3, #20]
     afe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b06:	bf00      	nop
     b08:	370c      	adds	r7, #12
     b0a:	46bd      	mov	sp, r7
     b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b10:	4770      	bx	lr

00000b12 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     b12:	b480      	push	{r7}
     b14:	b083      	sub	sp, #12
     b16:	af00      	add	r7, sp, #0
     b18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	695b      	ldr	r3, [r3, #20]
     b1e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b26:	bf00      	nop
     b28:	370c      	adds	r7, #12
     b2a:	46bd      	mov	sp, r7
     b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b30:	4770      	bx	lr

00000b32 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     b32:	b480      	push	{r7}
     b34:	b083      	sub	sp, #12
     b36:	af00      	add	r7, sp, #0
     b38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     b3a:	687b      	ldr	r3, [r7, #4]
     b3c:	695b      	ldr	r3, [r3, #20]
     b3e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b46:	bf00      	nop
     b48:	370c      	adds	r7, #12
     b4a:	46bd      	mov	sp, r7
     b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b50:	4770      	bx	lr

00000b52 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     b52:	b480      	push	{r7}
     b54:	b083      	sub	sp, #12
     b56:	af00      	add	r7, sp, #0
     b58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	699b      	ldr	r3, [r3, #24]
     b5e:	f043 0201 	orr.w	r2, r3, #1
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b66:	bf00      	nop
     b68:	370c      	adds	r7, #12
     b6a:	46bd      	mov	sp, r7
     b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b70:	4770      	bx	lr

00000b72 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     b72:	b480      	push	{r7}
     b74:	b083      	sub	sp, #12
     b76:	af00      	add	r7, sp, #0
     b78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	699b      	ldr	r3, [r3, #24]
     b7e:	f043 0202 	orr.w	r2, r3, #2
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b86:	bf00      	nop
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr

00000b92 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     b92:	b480      	push	{r7}
     b94:	b083      	sub	sp, #12
     b96:	af00      	add	r7, sp, #0
     b98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	699b      	ldr	r3, [r3, #24]
     b9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ba6:	bf00      	nop
     ba8:	370c      	adds	r7, #12
     baa:	46bd      	mov	sp, r7
     bac:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb0:	4770      	bx	lr

00000bb2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     bb2:	b480      	push	{r7}
     bb4:	b083      	sub	sp, #12
     bb6:	af00      	add	r7, sp, #0
     bb8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	699b      	ldr	r3, [r3, #24]
     bbe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bc6:	bf00      	nop
     bc8:	370c      	adds	r7, #12
     bca:	46bd      	mov	sp, r7
     bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd0:	4770      	bx	lr

00000bd2 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     bd2:	b480      	push	{r7}
     bd4:	b083      	sub	sp, #12
     bd6:	af00      	add	r7, sp, #0
     bd8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     bda:	687b      	ldr	r3, [r7, #4]
     bdc:	699b      	ldr	r3, [r3, #24]
     bde:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     be2:	687b      	ldr	r3, [r7, #4]
     be4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     be6:	bf00      	nop
     be8:	370c      	adds	r7, #12
     bea:	46bd      	mov	sp, r7
     bec:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf0:	4770      	bx	lr

00000bf2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     bf2:	b480      	push	{r7}
     bf4:	b083      	sub	sp, #12
     bf6:	af00      	add	r7, sp, #0
     bf8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	69db      	ldr	r3, [r3, #28]
     bfe:	f043 0220 	orr.w	r2, r3, #32
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c06:	bf00      	nop
     c08:	370c      	adds	r7, #12
     c0a:	46bd      	mov	sp, r7
     c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c10:	4770      	bx	lr

00000c12 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     c12:	b480      	push	{r7}
     c14:	b083      	sub	sp, #12
     c16:	af00      	add	r7, sp, #0
     c18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	69db      	ldr	r3, [r3, #28]
     c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c26:	bf00      	nop
     c28:	370c      	adds	r7, #12
     c2a:	46bd      	mov	sp, r7
     c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c30:	4770      	bx	lr

00000c32 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     c32:	b480      	push	{r7}
     c34:	b083      	sub	sp, #12
     c36:	af00      	add	r7, sp, #0
     c38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	69db      	ldr	r3, [r3, #28]
     c3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c46:	bf00      	nop
     c48:	370c      	adds	r7, #12
     c4a:	46bd      	mov	sp, r7
     c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c50:	4770      	bx	lr

00000c52 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     c52:	b480      	push	{r7}
     c54:	b083      	sub	sp, #12
     c56:	af00      	add	r7, sp, #0
     c58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	6a1b      	ldr	r3, [r3, #32]
     c5e:	f043 0201 	orr.w	r2, r3, #1
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c66:	bf00      	nop
     c68:	370c      	adds	r7, #12
     c6a:	46bd      	mov	sp, r7
     c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c70:	4770      	bx	lr

00000c72 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     c72:	b480      	push	{r7}
     c74:	b083      	sub	sp, #12
     c76:	af00      	add	r7, sp, #0
     c78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	6a1b      	ldr	r3, [r3, #32]
     c7e:	f043 0202 	orr.w	r2, r3, #2
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c86:	bf00      	nop
     c88:	370c      	adds	r7, #12
     c8a:	46bd      	mov	sp, r7
     c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c90:	4770      	bx	lr

00000c92 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     c92:	b480      	push	{r7}
     c94:	b083      	sub	sp, #12
     c96:	af00      	add	r7, sp, #0
     c98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	6a1b      	ldr	r3, [r3, #32]
     c9e:	f043 0208 	orr.w	r2, r3, #8
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ca6:	bf00      	nop
     ca8:	370c      	adds	r7, #12
     caa:	46bd      	mov	sp, r7
     cac:	f85d 7b04 	ldr.w	r7, [sp], #4
     cb0:	4770      	bx	lr

00000cb2 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     cb2:	b480      	push	{r7}
     cb4:	b083      	sub	sp, #12
     cb6:	af00      	add	r7, sp, #0
     cb8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	6a1b      	ldr	r3, [r3, #32]
     cbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cc6:	bf00      	nop
     cc8:	370c      	adds	r7, #12
     cca:	46bd      	mov	sp, r7
     ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
     cd0:	4770      	bx	lr

00000cd2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     cd2:	b480      	push	{r7}
     cd4:	b085      	sub	sp, #20
     cd6:	af00      	add	r7, sp, #0
     cd8:	60f8      	str	r0, [r7, #12]
     cda:	460b      	mov	r3, r1
     cdc:	607a      	str	r2, [r7, #4]
     cde:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ce0:	7afb      	ldrb	r3, [r7, #11]
     ce2:	68fa      	ldr	r2, [r7, #12]
     ce4:	01db      	lsls	r3, r3, #7
     ce6:	4413      	add	r3, r2
     ce8:	3308      	adds	r3, #8
     cea:	687a      	ldr	r2, [r7, #4]
     cec:	601a      	str	r2, [r3, #0]
}
     cee:	bf00      	nop
     cf0:	3714      	adds	r7, #20
     cf2:	46bd      	mov	sp, r7
     cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf8:	4770      	bx	lr

00000cfa <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     cfa:	b480      	push	{r7}
     cfc:	b085      	sub	sp, #20
     cfe:	af00      	add	r7, sp, #0
     d00:	60f8      	str	r0, [r7, #12]
     d02:	460b      	mov	r3, r1
     d04:	607a      	str	r2, [r7, #4]
     d06:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d08:	7afb      	ldrb	r3, [r7, #11]
     d0a:	68fa      	ldr	r2, [r7, #12]
     d0c:	01db      	lsls	r3, r3, #7
     d0e:	4413      	add	r3, r2
     d10:	3304      	adds	r3, #4
     d12:	687a      	ldr	r2, [r7, #4]
     d14:	601a      	str	r2, [r3, #0]
}
     d16:	bf00      	nop
     d18:	3714      	adds	r7, #20
     d1a:	46bd      	mov	sp, r7
     d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d20:	4770      	bx	lr

00000d22 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d22:	b480      	push	{r7}
     d24:	b085      	sub	sp, #20
     d26:	af00      	add	r7, sp, #0
     d28:	60f8      	str	r0, [r7, #12]
     d2a:	460b      	mov	r3, r1
     d2c:	607a      	str	r2, [r7, #4]
     d2e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d30:	7afb      	ldrb	r3, [r7, #11]
     d32:	68fa      	ldr	r2, [r7, #12]
     d34:	01db      	lsls	r3, r3, #7
     d36:	4413      	add	r3, r2
     d38:	3318      	adds	r3, #24
     d3a:	687a      	ldr	r2, [r7, #4]
     d3c:	601a      	str	r2, [r3, #0]
}
     d3e:	bf00      	nop
     d40:	3714      	adds	r7, #20
     d42:	46bd      	mov	sp, r7
     d44:	f85d 7b04 	ldr.w	r7, [sp], #4
     d48:	4770      	bx	lr

00000d4a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d4a:	b480      	push	{r7}
     d4c:	b085      	sub	sp, #20
     d4e:	af00      	add	r7, sp, #0
     d50:	60f8      	str	r0, [r7, #12]
     d52:	460b      	mov	r3, r1
     d54:	607a      	str	r2, [r7, #4]
     d56:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d58:	7afb      	ldrb	r3, [r7, #11]
     d5a:	68fa      	ldr	r2, [r7, #12]
     d5c:	01db      	lsls	r3, r3, #7
     d5e:	4413      	add	r3, r2
     d60:	3314      	adds	r3, #20
     d62:	687a      	ldr	r2, [r7, #4]
     d64:	601a      	str	r2, [r3, #0]
}
     d66:	bf00      	nop
     d68:	3714      	adds	r7, #20
     d6a:	46bd      	mov	sp, r7
     d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d70:	4770      	bx	lr

00000d72 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     d72:	b480      	push	{r7}
     d74:	b085      	sub	sp, #20
     d76:	af00      	add	r7, sp, #0
     d78:	6078      	str	r0, [r7, #4]
     d7a:	4608      	mov	r0, r1
     d7c:	4611      	mov	r1, r2
     d7e:	461a      	mov	r2, r3
     d80:	4603      	mov	r3, r0
     d82:	70fb      	strb	r3, [r7, #3]
     d84:	460b      	mov	r3, r1
     d86:	70bb      	strb	r3, [r7, #2]
     d88:	4613      	mov	r3, r2
     d8a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d8c:	78fa      	ldrb	r2, [r7, #3]
     d8e:	78bb      	ldrb	r3, [r7, #2]
     d90:	6879      	ldr	r1, [r7, #4]
     d92:	01d2      	lsls	r2, r2, #7
     d94:	440a      	add	r2, r1
     d96:	4413      	add	r3, r2
     d98:	3330      	adds	r3, #48	; 0x30
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d9e:	7bfb      	ldrb	r3, [r7, #15]
     da0:	f023 030f 	bic.w	r3, r3, #15
     da4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     da6:	787b      	ldrb	r3, [r7, #1]
     da8:	f003 030f 	and.w	r3, r3, #15
     dac:	b2da      	uxtb	r2, r3
     dae:	7bfb      	ldrb	r3, [r7, #15]
     db0:	4313      	orrs	r3, r2
     db2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     db4:	78fa      	ldrb	r2, [r7, #3]
     db6:	78bb      	ldrb	r3, [r7, #2]
     db8:	6879      	ldr	r1, [r7, #4]
     dba:	01d2      	lsls	r2, r2, #7
     dbc:	440a      	add	r2, r1
     dbe:	4413      	add	r3, r2
     dc0:	3330      	adds	r3, #48	; 0x30
     dc2:	7bfa      	ldrb	r2, [r7, #15]
     dc4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     dc6:	bf00      	nop
     dc8:	3714      	adds	r7, #20
     dca:	46bd      	mov	sp, r7
     dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd0:	4770      	bx	lr

00000dd2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     dd2:	b480      	push	{r7}
     dd4:	b085      	sub	sp, #20
     dd6:	af00      	add	r7, sp, #0
     dd8:	6078      	str	r0, [r7, #4]
     dda:	4608      	mov	r0, r1
     ddc:	4611      	mov	r1, r2
     dde:	461a      	mov	r2, r3
     de0:	4603      	mov	r3, r0
     de2:	70fb      	strb	r3, [r7, #3]
     de4:	460b      	mov	r3, r1
     de6:	70bb      	strb	r3, [r7, #2]
     de8:	4613      	mov	r3, r2
     dea:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dec:	78fa      	ldrb	r2, [r7, #3]
     dee:	78bb      	ldrb	r3, [r7, #2]
     df0:	6879      	ldr	r1, [r7, #4]
     df2:	01d2      	lsls	r2, r2, #7
     df4:	440a      	add	r2, r1
     df6:	4413      	add	r3, r2
     df8:	3330      	adds	r3, #48	; 0x30
     dfa:	781b      	ldrb	r3, [r3, #0]
     dfc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dfe:	7bfb      	ldrb	r3, [r7, #15]
     e00:	f003 030f 	and.w	r3, r3, #15
     e04:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     e06:	787b      	ldrb	r3, [r7, #1]
     e08:	011b      	lsls	r3, r3, #4
     e0a:	b2da      	uxtb	r2, r3
     e0c:	7bfb      	ldrb	r3, [r7, #15]
     e0e:	4313      	orrs	r3, r2
     e10:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e12:	78fa      	ldrb	r2, [r7, #3]
     e14:	78bb      	ldrb	r3, [r7, #2]
     e16:	6879      	ldr	r1, [r7, #4]
     e18:	01d2      	lsls	r2, r2, #7
     e1a:	440a      	add	r2, r1
     e1c:	4413      	add	r3, r2
     e1e:	3330      	adds	r3, #48	; 0x30
     e20:	7bfa      	ldrb	r2, [r7, #15]
     e22:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e24:	bf00      	nop
     e26:	3714      	adds	r7, #20
     e28:	46bd      	mov	sp, r7
     e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e2e:	4770      	bx	lr

00000e30 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     e30:	b480      	push	{r7}
     e32:	b085      	sub	sp, #20
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	4608      	mov	r0, r1
     e3a:	4611      	mov	r1, r2
     e3c:	461a      	mov	r2, r3
     e3e:	4603      	mov	r3, r0
     e40:	70fb      	strb	r3, [r7, #3]
     e42:	460b      	mov	r3, r1
     e44:	70bb      	strb	r3, [r7, #2]
     e46:	4613      	mov	r3, r2
     e48:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4a:	78fa      	ldrb	r2, [r7, #3]
     e4c:	78bb      	ldrb	r3, [r7, #2]
     e4e:	6879      	ldr	r1, [r7, #4]
     e50:	01d2      	lsls	r2, r2, #7
     e52:	440a      	add	r2, r1
     e54:	4413      	add	r3, r2
     e56:	3340      	adds	r3, #64	; 0x40
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5c:	7bfb      	ldrb	r3, [r7, #15]
     e5e:	f023 0301 	bic.w	r3, r3, #1
     e62:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e64:	787a      	ldrb	r2, [r7, #1]
     e66:	7bfb      	ldrb	r3, [r7, #15]
     e68:	4313      	orrs	r3, r2
     e6a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6c:	78fa      	ldrb	r2, [r7, #3]
     e6e:	78bb      	ldrb	r3, [r7, #2]
     e70:	6879      	ldr	r1, [r7, #4]
     e72:	01d2      	lsls	r2, r2, #7
     e74:	440a      	add	r2, r1
     e76:	4413      	add	r3, r2
     e78:	3340      	adds	r3, #64	; 0x40
     e7a:	7bfa      	ldrb	r2, [r7, #15]
     e7c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e7e:	bf00      	nop
     e80:	3714      	adds	r7, #20
     e82:	46bd      	mov	sp, r7
     e84:	f85d 7b04 	ldr.w	r7, [sp], #4
     e88:	4770      	bx	lr

00000e8a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     e8a:	b490      	push	{r4, r7}
     e8c:	b082      	sub	sp, #8
     e8e:	af00      	add	r7, sp, #0
     e90:	6078      	str	r0, [r7, #4]
     e92:	460b      	mov	r3, r1
     e94:	70fb      	strb	r3, [r7, #3]
     e96:	4613      	mov	r3, r2
     e98:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e9a:	78fa      	ldrb	r2, [r7, #3]
     e9c:	78bb      	ldrb	r3, [r7, #2]
     e9e:	78f8      	ldrb	r0, [r7, #3]
     ea0:	78b9      	ldrb	r1, [r7, #2]
     ea2:	687c      	ldr	r4, [r7, #4]
     ea4:	01c0      	lsls	r0, r0, #7
     ea6:	4420      	add	r0, r4
     ea8:	4401      	add	r1, r0
     eaa:	3140      	adds	r1, #64	; 0x40
     eac:	7809      	ldrb	r1, [r1, #0]
     eae:	b2c9      	uxtb	r1, r1
     eb0:	f041 0104 	orr.w	r1, r1, #4
     eb4:	b2c8      	uxtb	r0, r1
     eb6:	6879      	ldr	r1, [r7, #4]
     eb8:	01d2      	lsls	r2, r2, #7
     eba:	440a      	add	r2, r1
     ebc:	4413      	add	r3, r2
     ebe:	3340      	adds	r3, #64	; 0x40
     ec0:	4602      	mov	r2, r0
     ec2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ec4:	bf00      	nop
     ec6:	3708      	adds	r7, #8
     ec8:	46bd      	mov	sp, r7
     eca:	bc90      	pop	{r4, r7}
     ecc:	4770      	bx	lr

00000ece <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     ece:	b490      	push	{r4, r7}
     ed0:	b082      	sub	sp, #8
     ed2:	af00      	add	r7, sp, #0
     ed4:	6078      	str	r0, [r7, #4]
     ed6:	460b      	mov	r3, r1
     ed8:	70fb      	strb	r3, [r7, #3]
     eda:	4613      	mov	r3, r2
     edc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ede:	78fa      	ldrb	r2, [r7, #3]
     ee0:	78bb      	ldrb	r3, [r7, #2]
     ee2:	78f8      	ldrb	r0, [r7, #3]
     ee4:	78b9      	ldrb	r1, [r7, #2]
     ee6:	687c      	ldr	r4, [r7, #4]
     ee8:	01c0      	lsls	r0, r0, #7
     eea:	4420      	add	r0, r4
     eec:	4401      	add	r1, r0
     eee:	3140      	adds	r1, #64	; 0x40
     ef0:	7809      	ldrb	r1, [r1, #0]
     ef2:	b2c9      	uxtb	r1, r1
     ef4:	f021 0104 	bic.w	r1, r1, #4
     ef8:	b2c8      	uxtb	r0, r1
     efa:	6879      	ldr	r1, [r7, #4]
     efc:	01d2      	lsls	r2, r2, #7
     efe:	440a      	add	r2, r1
     f00:	4413      	add	r3, r2
     f02:	3340      	adds	r3, #64	; 0x40
     f04:	4602      	mov	r2, r0
     f06:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f08:	bf00      	nop
     f0a:	3708      	adds	r7, #8
     f0c:	46bd      	mov	sp, r7
     f0e:	bc90      	pop	{r4, r7}
     f10:	4770      	bx	lr

00000f12 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     f12:	b480      	push	{r7}
     f14:	b085      	sub	sp, #20
     f16:	af00      	add	r7, sp, #0
     f18:	60f8      	str	r0, [r7, #12]
     f1a:	460b      	mov	r3, r1
     f1c:	607a      	str	r2, [r7, #4]
     f1e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f20:	7afb      	ldrb	r3, [r7, #11]
     f22:	68fa      	ldr	r2, [r7, #12]
     f24:	01db      	lsls	r3, r3, #7
     f26:	4413      	add	r3, r2
     f28:	3328      	adds	r3, #40	; 0x28
     f2a:	687a      	ldr	r2, [r7, #4]
     f2c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f2e:	bf00      	nop
     f30:	3714      	adds	r7, #20
     f32:	46bd      	mov	sp, r7
     f34:	f85d 7b04 	ldr.w	r7, [sp], #4
     f38:	4770      	bx	lr
	...

00000f3c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     f3c:	b580      	push	{r7, lr}
     f3e:	b082      	sub	sp, #8
     f40:	af00      	add	r7, sp, #0
     f42:	4603      	mov	r3, r0
     f44:	6039      	str	r1, [r7, #0]
     f46:	71fb      	strb	r3, [r7, #7]
     f48:	4613      	mov	r3, r2
     f4a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     f4c:	79bb      	ldrb	r3, [r7, #6]
     f4e:	2b01      	cmp	r3, #1
     f50:	d01c      	beq.n	f8c <_gpio_set_direction+0x50>
     f52:	2b02      	cmp	r3, #2
     f54:	d037      	beq.n	fc6 <_gpio_set_direction+0x8a>
     f56:	2b00      	cmp	r3, #0
     f58:	d14e      	bne.n	ff8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f5a:	79fb      	ldrb	r3, [r7, #7]
     f5c:	683a      	ldr	r2, [r7, #0]
     f5e:	4619      	mov	r1, r3
     f60:	482a      	ldr	r0, [pc, #168]	; (100c <_gpio_set_direction+0xd0>)
     f62:	4b2b      	ldr	r3, [pc, #172]	; (1010 <_gpio_set_direction+0xd4>)
     f64:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f66:	683b      	ldr	r3, [r7, #0]
     f68:	b29b      	uxth	r3, r3
     f6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f6e:	79fb      	ldrb	r3, [r7, #7]
     f70:	4619      	mov	r1, r3
     f72:	4826      	ldr	r0, [pc, #152]	; (100c <_gpio_set_direction+0xd0>)
     f74:	4b27      	ldr	r3, [pc, #156]	; (1014 <_gpio_set_direction+0xd8>)
     f76:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f78:	683b      	ldr	r3, [r7, #0]
     f7a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f7c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f80:	79fb      	ldrb	r3, [r7, #7]
     f82:	4619      	mov	r1, r3
     f84:	4821      	ldr	r0, [pc, #132]	; (100c <_gpio_set_direction+0xd0>)
     f86:	4b23      	ldr	r3, [pc, #140]	; (1014 <_gpio_set_direction+0xd8>)
     f88:	4798      	blx	r3
		break;
     f8a:	e03a      	b.n	1002 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f8c:	79fb      	ldrb	r3, [r7, #7]
     f8e:	683a      	ldr	r2, [r7, #0]
     f90:	4619      	mov	r1, r3
     f92:	481e      	ldr	r0, [pc, #120]	; (100c <_gpio_set_direction+0xd0>)
     f94:	4b1e      	ldr	r3, [pc, #120]	; (1010 <_gpio_set_direction+0xd4>)
     f96:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	b29b      	uxth	r3, r3
     f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     fa4:	79f9      	ldrb	r1, [r7, #7]
     fa6:	461a      	mov	r2, r3
     fa8:	4818      	ldr	r0, [pc, #96]	; (100c <_gpio_set_direction+0xd0>)
     faa:	4b1a      	ldr	r3, [pc, #104]	; (1014 <_gpio_set_direction+0xd8>)
     fac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     fae:	683b      	ldr	r3, [r7, #0]
     fb0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     fba:	79f9      	ldrb	r1, [r7, #7]
     fbc:	461a      	mov	r2, r3
     fbe:	4813      	ldr	r0, [pc, #76]	; (100c <_gpio_set_direction+0xd0>)
     fc0:	4b14      	ldr	r3, [pc, #80]	; (1014 <_gpio_set_direction+0xd8>)
     fc2:	4798      	blx	r3
		break;
     fc4:	e01d      	b.n	1002 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     fc6:	79fb      	ldrb	r3, [r7, #7]
     fc8:	683a      	ldr	r2, [r7, #0]
     fca:	4619      	mov	r1, r3
     fcc:	480f      	ldr	r0, [pc, #60]	; (100c <_gpio_set_direction+0xd0>)
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <_gpio_set_direction+0xdc>)
     fd0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	b29b      	uxth	r3, r3
     fd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     fda:	79fb      	ldrb	r3, [r7, #7]
     fdc:	4619      	mov	r1, r3
     fde:	480b      	ldr	r0, [pc, #44]	; (100c <_gpio_set_direction+0xd0>)
     fe0:	4b0c      	ldr	r3, [pc, #48]	; (1014 <_gpio_set_direction+0xd8>)
     fe2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     fe8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     fec:	79fb      	ldrb	r3, [r7, #7]
     fee:	4619      	mov	r1, r3
     ff0:	4806      	ldr	r0, [pc, #24]	; (100c <_gpio_set_direction+0xd0>)
     ff2:	4b08      	ldr	r3, [pc, #32]	; (1014 <_gpio_set_direction+0xd8>)
     ff4:	4798      	blx	r3
		break;
     ff6:	e004      	b.n	1002 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     ff8:	2246      	movs	r2, #70	; 0x46
     ffa:	4908      	ldr	r1, [pc, #32]	; (101c <_gpio_set_direction+0xe0>)
     ffc:	2000      	movs	r0, #0
     ffe:	4b08      	ldr	r3, [pc, #32]	; (1020 <_gpio_set_direction+0xe4>)
    1000:	4798      	blx	r3
	}
}
    1002:	bf00      	nop
    1004:	3708      	adds	r7, #8
    1006:	46bd      	mov	sp, r7
    1008:	bd80      	pop	{r7, pc}
    100a:	bf00      	nop
    100c:	41008000 	.word	0x41008000
    1010:	00000cfb 	.word	0x00000cfb
    1014:	00000f13 	.word	0x00000f13
    1018:	00000cd3 	.word	0x00000cd3
    101c:	0000ed8c 	.word	0x0000ed8c
    1020:	000038fd 	.word	0x000038fd

00001024 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1024:	b580      	push	{r7, lr}
    1026:	b082      	sub	sp, #8
    1028:	af00      	add	r7, sp, #0
    102a:	4603      	mov	r3, r0
    102c:	6039      	str	r1, [r7, #0]
    102e:	71fb      	strb	r3, [r7, #7]
    1030:	4613      	mov	r3, r2
    1032:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1034:	79bb      	ldrb	r3, [r7, #6]
    1036:	2b00      	cmp	r3, #0
    1038:	d006      	beq.n	1048 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    103a:	79fb      	ldrb	r3, [r7, #7]
    103c:	683a      	ldr	r2, [r7, #0]
    103e:	4619      	mov	r1, r3
    1040:	4806      	ldr	r0, [pc, #24]	; (105c <_gpio_set_level+0x38>)
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <_gpio_set_level+0x3c>)
    1044:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1046:	e005      	b.n	1054 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1048:	79fb      	ldrb	r3, [r7, #7]
    104a:	683a      	ldr	r2, [r7, #0]
    104c:	4619      	mov	r1, r3
    104e:	4803      	ldr	r0, [pc, #12]	; (105c <_gpio_set_level+0x38>)
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <_gpio_set_level+0x40>)
    1052:	4798      	blx	r3
}
    1054:	bf00      	nop
    1056:	3708      	adds	r7, #8
    1058:	46bd      	mov	sp, r7
    105a:	bd80      	pop	{r7, pc}
    105c:	41008000 	.word	0x41008000
    1060:	00000d23 	.word	0x00000d23
    1064:	00000d4b 	.word	0x00000d4b

00001068 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1068:	b580      	push	{r7, lr}
    106a:	b082      	sub	sp, #8
    106c:	af00      	add	r7, sp, #0
    106e:	4603      	mov	r3, r0
    1070:	71fb      	strb	r3, [r7, #7]
    1072:	460b      	mov	r3, r1
    1074:	71bb      	strb	r3, [r7, #6]
    1076:	4613      	mov	r3, r2
    1078:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    107a:	797b      	ldrb	r3, [r7, #5]
    107c:	2b01      	cmp	r3, #1
    107e:	d00a      	beq.n	1096 <_gpio_set_pin_pull_mode+0x2e>
    1080:	2b02      	cmp	r3, #2
    1082:	d01f      	beq.n	10c4 <_gpio_set_pin_pull_mode+0x5c>
    1084:	2b00      	cmp	r3, #0
    1086:	d134      	bne.n	10f2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1088:	79ba      	ldrb	r2, [r7, #6]
    108a:	79fb      	ldrb	r3, [r7, #7]
    108c:	4619      	mov	r1, r3
    108e:	481e      	ldr	r0, [pc, #120]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    1090:	4b1e      	ldr	r3, [pc, #120]	; (110c <_gpio_set_pin_pull_mode+0xa4>)
    1092:	4798      	blx	r3
		break;
    1094:	e033      	b.n	10fe <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1096:	79bb      	ldrb	r3, [r7, #6]
    1098:	2201      	movs	r2, #1
    109a:	409a      	lsls	r2, r3
    109c:	79fb      	ldrb	r3, [r7, #7]
    109e:	4619      	mov	r1, r3
    10a0:	4819      	ldr	r0, [pc, #100]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    10a2:	4b1b      	ldr	r3, [pc, #108]	; (1110 <_gpio_set_pin_pull_mode+0xa8>)
    10a4:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10a6:	79ba      	ldrb	r2, [r7, #6]
    10a8:	79fb      	ldrb	r3, [r7, #7]
    10aa:	4619      	mov	r1, r3
    10ac:	4816      	ldr	r0, [pc, #88]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    10ae:	4b19      	ldr	r3, [pc, #100]	; (1114 <_gpio_set_pin_pull_mode+0xac>)
    10b0:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    10b2:	79bb      	ldrb	r3, [r7, #6]
    10b4:	2201      	movs	r2, #1
    10b6:	409a      	lsls	r2, r3
    10b8:	79fb      	ldrb	r3, [r7, #7]
    10ba:	4619      	mov	r1, r3
    10bc:	4812      	ldr	r0, [pc, #72]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    10be:	4b16      	ldr	r3, [pc, #88]	; (1118 <_gpio_set_pin_pull_mode+0xb0>)
    10c0:	4798      	blx	r3
		break;
    10c2:	e01c      	b.n	10fe <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10c4:	79bb      	ldrb	r3, [r7, #6]
    10c6:	2201      	movs	r2, #1
    10c8:	409a      	lsls	r2, r3
    10ca:	79fb      	ldrb	r3, [r7, #7]
    10cc:	4619      	mov	r1, r3
    10ce:	480e      	ldr	r0, [pc, #56]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    10d0:	4b0f      	ldr	r3, [pc, #60]	; (1110 <_gpio_set_pin_pull_mode+0xa8>)
    10d2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10d4:	79ba      	ldrb	r2, [r7, #6]
    10d6:	79fb      	ldrb	r3, [r7, #7]
    10d8:	4619      	mov	r1, r3
    10da:	480b      	ldr	r0, [pc, #44]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    10dc:	4b0d      	ldr	r3, [pc, #52]	; (1114 <_gpio_set_pin_pull_mode+0xac>)
    10de:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    10e0:	79bb      	ldrb	r3, [r7, #6]
    10e2:	2201      	movs	r2, #1
    10e4:	409a      	lsls	r2, r3
    10e6:	79fb      	ldrb	r3, [r7, #7]
    10e8:	4619      	mov	r1, r3
    10ea:	4807      	ldr	r0, [pc, #28]	; (1108 <_gpio_set_pin_pull_mode+0xa0>)
    10ec:	4b0b      	ldr	r3, [pc, #44]	; (111c <_gpio_set_pin_pull_mode+0xb4>)
    10ee:	4798      	blx	r3
		break;
    10f0:	e005      	b.n	10fe <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    10f2:	2289      	movs	r2, #137	; 0x89
    10f4:	490a      	ldr	r1, [pc, #40]	; (1120 <_gpio_set_pin_pull_mode+0xb8>)
    10f6:	2000      	movs	r0, #0
    10f8:	4b0a      	ldr	r3, [pc, #40]	; (1124 <_gpio_set_pin_pull_mode+0xbc>)
    10fa:	4798      	blx	r3
		break;
    10fc:	bf00      	nop
	}
}
    10fe:	bf00      	nop
    1100:	3708      	adds	r7, #8
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	bf00      	nop
    1108:	41008000 	.word	0x41008000
    110c:	00000ecf 	.word	0x00000ecf
    1110:	00000cfb 	.word	0x00000cfb
    1114:	00000e8b 	.word	0x00000e8b
    1118:	00000d23 	.word	0x00000d23
    111c:	00000d4b 	.word	0x00000d4b
    1120:	0000ed8c 	.word	0x0000ed8c
    1124:	000038fd 	.word	0x000038fd

00001128 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1128:	b590      	push	{r4, r7, lr}
    112a:	b085      	sub	sp, #20
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
    1130:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	095b      	lsrs	r3, r3, #5
    1136:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	b2db      	uxtb	r3, r3
    113c:	f003 031f 	and.w	r3, r3, #31
    1140:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1142:	683b      	ldr	r3, [r7, #0]
    1144:	f1b3 3fff 	cmp.w	r3, #4294967295
    1148:	d106      	bne.n	1158 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    114a:	7bba      	ldrb	r2, [r7, #14]
    114c:	7bf9      	ldrb	r1, [r7, #15]
    114e:	2300      	movs	r3, #0
    1150:	4812      	ldr	r0, [pc, #72]	; (119c <_gpio_set_pin_function+0x74>)
    1152:	4c13      	ldr	r4, [pc, #76]	; (11a0 <_gpio_set_pin_function+0x78>)
    1154:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1156:	e01d      	b.n	1194 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1158:	7bba      	ldrb	r2, [r7, #14]
    115a:	7bf9      	ldrb	r1, [r7, #15]
    115c:	2301      	movs	r3, #1
    115e:	480f      	ldr	r0, [pc, #60]	; (119c <_gpio_set_pin_function+0x74>)
    1160:	4c0f      	ldr	r4, [pc, #60]	; (11a0 <_gpio_set_pin_function+0x78>)
    1162:	47a0      	blx	r4
		if (pin & 1) {
    1164:	7bbb      	ldrb	r3, [r7, #14]
    1166:	f003 0301 	and.w	r3, r3, #1
    116a:	2b00      	cmp	r3, #0
    116c:	d009      	beq.n	1182 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    116e:	7bbb      	ldrb	r3, [r7, #14]
    1170:	085b      	lsrs	r3, r3, #1
    1172:	b2da      	uxtb	r2, r3
    1174:	683b      	ldr	r3, [r7, #0]
    1176:	b2db      	uxtb	r3, r3
    1178:	7bf9      	ldrb	r1, [r7, #15]
    117a:	4808      	ldr	r0, [pc, #32]	; (119c <_gpio_set_pin_function+0x74>)
    117c:	4c09      	ldr	r4, [pc, #36]	; (11a4 <_gpio_set_pin_function+0x7c>)
    117e:	47a0      	blx	r4
}
    1180:	e008      	b.n	1194 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1182:	7bbb      	ldrb	r3, [r7, #14]
    1184:	085b      	lsrs	r3, r3, #1
    1186:	b2da      	uxtb	r2, r3
    1188:	683b      	ldr	r3, [r7, #0]
    118a:	b2db      	uxtb	r3, r3
    118c:	7bf9      	ldrb	r1, [r7, #15]
    118e:	4803      	ldr	r0, [pc, #12]	; (119c <_gpio_set_pin_function+0x74>)
    1190:	4c05      	ldr	r4, [pc, #20]	; (11a8 <_gpio_set_pin_function+0x80>)
    1192:	47a0      	blx	r4
}
    1194:	bf00      	nop
    1196:	3714      	adds	r7, #20
    1198:	46bd      	mov	sp, r7
    119a:	bd90      	pop	{r4, r7, pc}
    119c:	41008000 	.word	0x41008000
    11a0:	00000e31 	.word	0x00000e31
    11a4:	00000dd3 	.word	0x00000dd3
    11a8:	00000d73 	.word	0x00000d73

000011ac <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    11ac:	b580      	push	{r7, lr}
    11ae:	b082      	sub	sp, #8
    11b0:	af00      	add	r7, sp, #0
    11b2:	4603      	mov	r3, r0
    11b4:	460a      	mov	r2, r1
    11b6:	71fb      	strb	r3, [r7, #7]
    11b8:	4613      	mov	r3, r2
    11ba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    11bc:	79fb      	ldrb	r3, [r7, #7]
    11be:	095b      	lsrs	r3, r3, #5
    11c0:	b2d8      	uxtb	r0, r3
    11c2:	79fb      	ldrb	r3, [r7, #7]
    11c4:	f003 031f 	and.w	r3, r3, #31
    11c8:	b2db      	uxtb	r3, r3
    11ca:	79ba      	ldrb	r2, [r7, #6]
    11cc:	4619      	mov	r1, r3
    11ce:	4b03      	ldr	r3, [pc, #12]	; (11dc <gpio_set_pin_pull_mode+0x30>)
    11d0:	4798      	blx	r3
}
    11d2:	bf00      	nop
    11d4:	3708      	adds	r7, #8
    11d6:	46bd      	mov	sp, r7
    11d8:	bd80      	pop	{r7, pc}
    11da:	bf00      	nop
    11dc:	00001069 	.word	0x00001069

000011e0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b082      	sub	sp, #8
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
    11e8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    11ea:	6839      	ldr	r1, [r7, #0]
    11ec:	6878      	ldr	r0, [r7, #4]
    11ee:	4b03      	ldr	r3, [pc, #12]	; (11fc <gpio_set_pin_function+0x1c>)
    11f0:	4798      	blx	r3
}
    11f2:	bf00      	nop
    11f4:	3708      	adds	r7, #8
    11f6:	46bd      	mov	sp, r7
    11f8:	bd80      	pop	{r7, pc}
    11fa:	bf00      	nop
    11fc:	00001129 	.word	0x00001129

00001200 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1200:	b580      	push	{r7, lr}
    1202:	b082      	sub	sp, #8
    1204:	af00      	add	r7, sp, #0
    1206:	4603      	mov	r3, r0
    1208:	460a      	mov	r2, r1
    120a:	71fb      	strb	r3, [r7, #7]
    120c:	4613      	mov	r3, r2
    120e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1210:	79fb      	ldrb	r3, [r7, #7]
    1212:	095b      	lsrs	r3, r3, #5
    1214:	b2d8      	uxtb	r0, r3
    1216:	79fb      	ldrb	r3, [r7, #7]
    1218:	f003 031f 	and.w	r3, r3, #31
    121c:	2201      	movs	r2, #1
    121e:	fa02 f303 	lsl.w	r3, r2, r3
    1222:	79ba      	ldrb	r2, [r7, #6]
    1224:	4619      	mov	r1, r3
    1226:	4b03      	ldr	r3, [pc, #12]	; (1234 <gpio_set_pin_direction+0x34>)
    1228:	4798      	blx	r3
}
    122a:	bf00      	nop
    122c:	3708      	adds	r7, #8
    122e:	46bd      	mov	sp, r7
    1230:	bd80      	pop	{r7, pc}
    1232:	bf00      	nop
    1234:	00000f3d 	.word	0x00000f3d

00001238 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	4603      	mov	r3, r0
    1240:	460a      	mov	r2, r1
    1242:	71fb      	strb	r3, [r7, #7]
    1244:	4613      	mov	r3, r2
    1246:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1248:	79fb      	ldrb	r3, [r7, #7]
    124a:	095b      	lsrs	r3, r3, #5
    124c:	b2d8      	uxtb	r0, r3
    124e:	79fb      	ldrb	r3, [r7, #7]
    1250:	f003 031f 	and.w	r3, r3, #31
    1254:	2201      	movs	r2, #1
    1256:	fa02 f303 	lsl.w	r3, r2, r3
    125a:	79ba      	ldrb	r2, [r7, #6]
    125c:	4619      	mov	r1, r3
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <gpio_set_pin_level+0x34>)
    1260:	4798      	blx	r3
}
    1262:	bf00      	nop
    1264:	3708      	adds	r7, #8
    1266:	46bd      	mov	sp, r7
    1268:	bd80      	pop	{r7, pc}
    126a:	bf00      	nop
    126c:	00001025 	.word	0x00001025

00001270 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
	_init_chip();
    1274:	4b01      	ldr	r3, [pc, #4]	; (127c <init_mcu+0xc>)
    1276:	4798      	blx	r3
}
    1278:	bf00      	nop
    127a:	bd80      	pop	{r7, pc}
    127c:	00004509 	.word	0x00004509

00001280 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
    1288:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    128a:	687b      	ldr	r3, [r7, #4]
    128c:	2b00      	cmp	r3, #0
    128e:	d004      	beq.n	129a <wdt_init+0x1a>
    1290:	683b      	ldr	r3, [r7, #0]
    1292:	2b00      	cmp	r3, #0
    1294:	d001      	beq.n	129a <wdt_init+0x1a>
    1296:	2301      	movs	r3, #1
    1298:	e000      	b.n	129c <wdt_init+0x1c>
    129a:	2300      	movs	r3, #0
    129c:	f003 0301 	and.w	r3, r3, #1
    12a0:	b2db      	uxtb	r3, r3
    12a2:	2248      	movs	r2, #72	; 0x48
    12a4:	4907      	ldr	r1, [pc, #28]	; (12c4 <wdt_init+0x44>)
    12a6:	4618      	mov	r0, r3
    12a8:	4b07      	ldr	r3, [pc, #28]	; (12c8 <wdt_init+0x48>)
    12aa:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	683a      	ldr	r2, [r7, #0]
    12b0:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	4618      	mov	r0, r3
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <wdt_init+0x4c>)
    12b8:	4798      	blx	r3
    12ba:	4603      	mov	r3, r0
}
    12bc:	4618      	mov	r0, r3
    12be:	3708      	adds	r7, #8
    12c0:	46bd      	mov	sp, r7
    12c2:	bd80      	pop	{r7, pc}
    12c4:	0000eda8 	.word	0x0000eda8
    12c8:	000038fd 	.word	0x000038fd
    12cc:	0000ab8d 	.word	0x0000ab8d

000012d0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    12d0:	b580      	push	{r7, lr}
    12d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    12d4:	4804      	ldr	r0, [pc, #16]	; (12e8 <CRC_CALC_init+0x18>)
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <CRC_CALC_init+0x1c>)
    12d8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    12da:	4905      	ldr	r1, [pc, #20]	; (12f0 <CRC_CALC_init+0x20>)
    12dc:	4805      	ldr	r0, [pc, #20]	; (12f4 <CRC_CALC_init+0x24>)
    12de:	4b06      	ldr	r3, [pc, #24]	; (12f8 <CRC_CALC_init+0x28>)
    12e0:	4798      	blx	r3
}
    12e2:	bf00      	nop
    12e4:	bd80      	pop	{r7, pc}
    12e6:	bf00      	nop
    12e8:	40000800 	.word	0x40000800
    12ec:	00000b73 	.word	0x00000b73
    12f0:	41002000 	.word	0x41002000
    12f4:	20000fc4 	.word	0x20000fc4
    12f8:	00001f71 	.word	0x00001f71

000012fc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1300:	2244      	movs	r2, #68	; 0x44
    1302:	2104      	movs	r1, #4
    1304:	481e      	ldr	r0, [pc, #120]	; (1380 <EXTERNAL_IRQ_0_init+0x84>)
    1306:	4b1f      	ldr	r3, [pc, #124]	; (1384 <EXTERNAL_IRQ_0_init+0x88>)
    1308:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    130a:	481f      	ldr	r0, [pc, #124]	; (1388 <EXTERNAL_IRQ_0_init+0x8c>)
    130c:	4b1f      	ldr	r3, [pc, #124]	; (138c <EXTERNAL_IRQ_0_init+0x90>)
    130e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    1310:	2101      	movs	r1, #1
    1312:	2004      	movs	r0, #4
    1314:	4b1e      	ldr	r3, [pc, #120]	; (1390 <EXTERNAL_IRQ_0_init+0x94>)
    1316:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    1318:	2102      	movs	r1, #2
    131a:	2004      	movs	r0, #4
    131c:	4b1d      	ldr	r3, [pc, #116]	; (1394 <EXTERNAL_IRQ_0_init+0x98>)
    131e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    1320:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1324:	2004      	movs	r0, #4
    1326:	4b1c      	ldr	r3, [pc, #112]	; (1398 <EXTERNAL_IRQ_0_init+0x9c>)
    1328:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    132a:	2101      	movs	r1, #1
    132c:	2005      	movs	r0, #5
    132e:	4b18      	ldr	r3, [pc, #96]	; (1390 <EXTERNAL_IRQ_0_init+0x94>)
    1330:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    1332:	2102      	movs	r1, #2
    1334:	2005      	movs	r0, #5
    1336:	4b17      	ldr	r3, [pc, #92]	; (1394 <EXTERNAL_IRQ_0_init+0x98>)
    1338:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    133a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    133e:	2005      	movs	r0, #5
    1340:	4b15      	ldr	r3, [pc, #84]	; (1398 <EXTERNAL_IRQ_0_init+0x9c>)
    1342:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    1344:	2101      	movs	r1, #1
    1346:	2056      	movs	r0, #86	; 0x56
    1348:	4b11      	ldr	r3, [pc, #68]	; (1390 <EXTERNAL_IRQ_0_init+0x94>)
    134a:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    134c:	2102      	movs	r1, #2
    134e:	2056      	movs	r0, #86	; 0x56
    1350:	4b10      	ldr	r3, [pc, #64]	; (1394 <EXTERNAL_IRQ_0_init+0x98>)
    1352:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    1354:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1358:	2056      	movs	r0, #86	; 0x56
    135a:	4b0f      	ldr	r3, [pc, #60]	; (1398 <EXTERNAL_IRQ_0_init+0x9c>)
    135c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    135e:	2101      	movs	r1, #1
    1360:	2057      	movs	r0, #87	; 0x57
    1362:	4b0b      	ldr	r3, [pc, #44]	; (1390 <EXTERNAL_IRQ_0_init+0x94>)
    1364:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    1366:	2102      	movs	r1, #2
    1368:	2057      	movs	r0, #87	; 0x57
    136a:	4b0a      	ldr	r3, [pc, #40]	; (1394 <EXTERNAL_IRQ_0_init+0x98>)
    136c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    136e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1372:	2057      	movs	r0, #87	; 0x57
    1374:	4b08      	ldr	r3, [pc, #32]	; (1398 <EXTERNAL_IRQ_0_init+0x9c>)
    1376:	4798      	blx	r3

	ext_irq_init();
    1378:	4b08      	ldr	r3, [pc, #32]	; (139c <EXTERNAL_IRQ_0_init+0xa0>)
    137a:	4798      	blx	r3
}
    137c:	bf00      	nop
    137e:	bd80      	pop	{r7, pc}
    1380:	40001c00 	.word	0x40001c00
    1384:	000009cd 	.word	0x000009cd
    1388:	40000800 	.word	0x40000800
    138c:	00000ab3 	.word	0x00000ab3
    1390:	00001201 	.word	0x00001201
    1394:	000011ad 	.word	0x000011ad
    1398:	000011e1 	.word	0x000011e1
    139c:	00002039 	.word	0x00002039

000013a0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    13a0:	b580      	push	{r7, lr}
    13a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13a4:	2244      	movs	r2, #68	; 0x44
    13a6:	210b      	movs	r1, #11
    13a8:	4804      	ldr	r0, [pc, #16]	; (13bc <EVENT_SYSTEM_0_init+0x1c>)
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <EVENT_SYSTEM_0_init+0x20>)
    13ac:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    13ae:	4805      	ldr	r0, [pc, #20]	; (13c4 <EVENT_SYSTEM_0_init+0x24>)
    13b0:	4b05      	ldr	r3, [pc, #20]	; (13c8 <EVENT_SYSTEM_0_init+0x28>)
    13b2:	4798      	blx	r3

	event_system_init();
    13b4:	4b05      	ldr	r3, [pc, #20]	; (13cc <EVENT_SYSTEM_0_init+0x2c>)
    13b6:	4798      	blx	r3
}
    13b8:	bf00      	nop
    13ba:	bd80      	pop	{r7, pc}
    13bc:	40001c00 	.word	0x40001c00
    13c0:	000009cd 	.word	0x000009cd
    13c4:	40000800 	.word	0x40000800
    13c8:	00000b93 	.word	0x00000b93
    13cc:	00002025 	.word	0x00002025

000013d0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    13d4:	2101      	movs	r1, #1
    13d6:	202b      	movs	r0, #43	; 0x2b
    13d8:	4b2b      	ldr	r3, [pc, #172]	; (1488 <QSPI_N25Q256_PORT_init+0xb8>)
    13da:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    13dc:	2100      	movs	r1, #0
    13de:	202b      	movs	r0, #43	; 0x2b
    13e0:	4b2a      	ldr	r3, [pc, #168]	; (148c <QSPI_N25Q256_PORT_init+0xbc>)
    13e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    13e4:	492a      	ldr	r1, [pc, #168]	; (1490 <QSPI_N25Q256_PORT_init+0xc0>)
    13e6:	202b      	movs	r0, #43	; 0x2b
    13e8:	4b2a      	ldr	r3, [pc, #168]	; (1494 <QSPI_N25Q256_PORT_init+0xc4>)
    13ea:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    13ec:	2102      	movs	r1, #2
    13ee:	2008      	movs	r0, #8
    13f0:	4b25      	ldr	r3, [pc, #148]	; (1488 <QSPI_N25Q256_PORT_init+0xb8>)
    13f2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    13f4:	2100      	movs	r1, #0
    13f6:	2008      	movs	r0, #8
    13f8:	4b27      	ldr	r3, [pc, #156]	; (1498 <QSPI_N25Q256_PORT_init+0xc8>)
    13fa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    13fc:	2100      	movs	r1, #0
    13fe:	2008      	movs	r0, #8
    1400:	4b22      	ldr	r3, [pc, #136]	; (148c <QSPI_N25Q256_PORT_init+0xbc>)
    1402:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1404:	4925      	ldr	r1, [pc, #148]	; (149c <QSPI_N25Q256_PORT_init+0xcc>)
    1406:	2008      	movs	r0, #8
    1408:	4b22      	ldr	r3, [pc, #136]	; (1494 <QSPI_N25Q256_PORT_init+0xc4>)
    140a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    140c:	2102      	movs	r1, #2
    140e:	2009      	movs	r0, #9
    1410:	4b1d      	ldr	r3, [pc, #116]	; (1488 <QSPI_N25Q256_PORT_init+0xb8>)
    1412:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1414:	2100      	movs	r1, #0
    1416:	2009      	movs	r0, #9
    1418:	4b1f      	ldr	r3, [pc, #124]	; (1498 <QSPI_N25Q256_PORT_init+0xc8>)
    141a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    141c:	2100      	movs	r1, #0
    141e:	2009      	movs	r0, #9
    1420:	4b1a      	ldr	r3, [pc, #104]	; (148c <QSPI_N25Q256_PORT_init+0xbc>)
    1422:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1424:	491e      	ldr	r1, [pc, #120]	; (14a0 <QSPI_N25Q256_PORT_init+0xd0>)
    1426:	2009      	movs	r0, #9
    1428:	4b1a      	ldr	r3, [pc, #104]	; (1494 <QSPI_N25Q256_PORT_init+0xc4>)
    142a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    142c:	2102      	movs	r1, #2
    142e:	200a      	movs	r0, #10
    1430:	4b15      	ldr	r3, [pc, #84]	; (1488 <QSPI_N25Q256_PORT_init+0xb8>)
    1432:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1434:	2100      	movs	r1, #0
    1436:	200a      	movs	r0, #10
    1438:	4b17      	ldr	r3, [pc, #92]	; (1498 <QSPI_N25Q256_PORT_init+0xc8>)
    143a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    143c:	2100      	movs	r1, #0
    143e:	200a      	movs	r0, #10
    1440:	4b12      	ldr	r3, [pc, #72]	; (148c <QSPI_N25Q256_PORT_init+0xbc>)
    1442:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1444:	4917      	ldr	r1, [pc, #92]	; (14a4 <QSPI_N25Q256_PORT_init+0xd4>)
    1446:	200a      	movs	r0, #10
    1448:	4b12      	ldr	r3, [pc, #72]	; (1494 <QSPI_N25Q256_PORT_init+0xc4>)
    144a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    144c:	2102      	movs	r1, #2
    144e:	200b      	movs	r0, #11
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <QSPI_N25Q256_PORT_init+0xb8>)
    1452:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1454:	2100      	movs	r1, #0
    1456:	200b      	movs	r0, #11
    1458:	4b0f      	ldr	r3, [pc, #60]	; (1498 <QSPI_N25Q256_PORT_init+0xc8>)
    145a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    145c:	2100      	movs	r1, #0
    145e:	200b      	movs	r0, #11
    1460:	4b0a      	ldr	r3, [pc, #40]	; (148c <QSPI_N25Q256_PORT_init+0xbc>)
    1462:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1464:	4910      	ldr	r1, [pc, #64]	; (14a8 <QSPI_N25Q256_PORT_init+0xd8>)
    1466:	200b      	movs	r0, #11
    1468:	4b0a      	ldr	r3, [pc, #40]	; (1494 <QSPI_N25Q256_PORT_init+0xc4>)
    146a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    146c:	2101      	movs	r1, #1
    146e:	202a      	movs	r0, #42	; 0x2a
    1470:	4b05      	ldr	r3, [pc, #20]	; (1488 <QSPI_N25Q256_PORT_init+0xb8>)
    1472:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1474:	2100      	movs	r1, #0
    1476:	202a      	movs	r0, #42	; 0x2a
    1478:	4b04      	ldr	r3, [pc, #16]	; (148c <QSPI_N25Q256_PORT_init+0xbc>)
    147a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    147c:	490b      	ldr	r1, [pc, #44]	; (14ac <QSPI_N25Q256_PORT_init+0xdc>)
    147e:	202a      	movs	r0, #42	; 0x2a
    1480:	4b04      	ldr	r3, [pc, #16]	; (1494 <QSPI_N25Q256_PORT_init+0xc4>)
    1482:	4798      	blx	r3
}
    1484:	bf00      	nop
    1486:	bd80      	pop	{r7, pc}
    1488:	00001201 	.word	0x00001201
    148c:	000011ad 	.word	0x000011ad
    1490:	002b0007 	.word	0x002b0007
    1494:	000011e1 	.word	0x000011e1
    1498:	00001239 	.word	0x00001239
    149c:	00080007 	.word	0x00080007
    14a0:	00090007 	.word	0x00090007
    14a4:	000a0007 	.word	0x000a0007
    14a8:	000b0007 	.word	0x000b0007
    14ac:	002a0007 	.word	0x002a0007

000014b0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    14b4:	4805      	ldr	r0, [pc, #20]	; (14cc <QSPI_N25Q256_CLOCK_init+0x1c>)
    14b6:	4b06      	ldr	r3, [pc, #24]	; (14d0 <QSPI_N25Q256_CLOCK_init+0x20>)
    14b8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    14ba:	4804      	ldr	r0, [pc, #16]	; (14cc <QSPI_N25Q256_CLOCK_init+0x1c>)
    14bc:	4b05      	ldr	r3, [pc, #20]	; (14d4 <QSPI_N25Q256_CLOCK_init+0x24>)
    14be:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    14c0:	4802      	ldr	r0, [pc, #8]	; (14cc <QSPI_N25Q256_CLOCK_init+0x1c>)
    14c2:	4b05      	ldr	r3, [pc, #20]	; (14d8 <QSPI_N25Q256_CLOCK_init+0x28>)
    14c4:	4798      	blx	r3
}
    14c6:	bf00      	nop
    14c8:	bd80      	pop	{r7, pc}
    14ca:	bf00      	nop
    14cc:	40000800 	.word	0x40000800
    14d0:	00000a13 	.word	0x00000a13
    14d4:	00000a53 	.word	0x00000a53
    14d8:	00000c33 	.word	0x00000c33

000014dc <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    14dc:	b580      	push	{r7, lr}
    14de:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <QSPI_N25Q256_init+0x18>)
    14e2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    14e4:	4904      	ldr	r1, [pc, #16]	; (14f8 <QSPI_N25Q256_init+0x1c>)
    14e6:	4805      	ldr	r0, [pc, #20]	; (14fc <QSPI_N25Q256_init+0x20>)
    14e8:	4b05      	ldr	r3, [pc, #20]	; (1500 <QSPI_N25Q256_init+0x24>)
    14ea:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    14ec:	4b05      	ldr	r3, [pc, #20]	; (1504 <QSPI_N25Q256_init+0x28>)
    14ee:	4798      	blx	r3
}
    14f0:	bf00      	nop
    14f2:	bd80      	pop	{r7, pc}
    14f4:	000014b1 	.word	0x000014b1
    14f8:	42003400 	.word	0x42003400
    14fc:	20000e4c 	.word	0x20000e4c
    1500:	000023d9 	.word	0x000023d9
    1504:	000013d1 	.word	0x000013d1

00001508 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1508:	b580      	push	{r7, lr}
    150a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    150c:	4802      	ldr	r0, [pc, #8]	; (1518 <DATETIME_CLOCK_CLOCK_init+0x10>)
    150e:	4b03      	ldr	r3, [pc, #12]	; (151c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1510:	4798      	blx	r3
}
    1512:	bf00      	nop
    1514:	bd80      	pop	{r7, pc}
    1516:	bf00      	nop
    1518:	40000800 	.word	0x40000800
    151c:	00000a93 	.word	0x00000a93

00001520 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1520:	b580      	push	{r7, lr}
    1522:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1524:	4b03      	ldr	r3, [pc, #12]	; (1534 <DATETIME_CLOCK_init+0x14>)
    1526:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1528:	4903      	ldr	r1, [pc, #12]	; (1538 <DATETIME_CLOCK_init+0x18>)
    152a:	4804      	ldr	r0, [pc, #16]	; (153c <DATETIME_CLOCK_init+0x1c>)
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <DATETIME_CLOCK_init+0x20>)
    152e:	4798      	blx	r3
}
    1530:	bf00      	nop
    1532:	bd80      	pop	{r7, pc}
    1534:	00001509 	.word	0x00001509
    1538:	40002400 	.word	0x40002400
    153c:	20000fa0 	.word	0x20000fa0
    1540:	00001e15 	.word	0x00001e15

00001544 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1544:	b580      	push	{r7, lr}
    1546:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    1548:	2100      	movs	r1, #0
    154a:	2051      	movs	r0, #81	; 0x51
    154c:	4b11      	ldr	r3, [pc, #68]	; (1594 <SPI_HI3593_PORT_init+0x50>)
    154e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    1550:	2102      	movs	r1, #2
    1552:	2051      	movs	r0, #81	; 0x51
    1554:	4b10      	ldr	r3, [pc, #64]	; (1598 <SPI_HI3593_PORT_init+0x54>)
    1556:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    1558:	4910      	ldr	r1, [pc, #64]	; (159c <SPI_HI3593_PORT_init+0x58>)
    155a:	2051      	movs	r0, #81	; 0x51
    155c:	4b10      	ldr	r3, [pc, #64]	; (15a0 <SPI_HI3593_PORT_init+0x5c>)
    155e:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    1560:	2100      	movs	r1, #0
    1562:	2050      	movs	r0, #80	; 0x50
    1564:	4b0b      	ldr	r3, [pc, #44]	; (1594 <SPI_HI3593_PORT_init+0x50>)
    1566:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    1568:	2102      	movs	r1, #2
    156a:	2050      	movs	r0, #80	; 0x50
    156c:	4b0a      	ldr	r3, [pc, #40]	; (1598 <SPI_HI3593_PORT_init+0x54>)
    156e:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    1570:	490c      	ldr	r1, [pc, #48]	; (15a4 <SPI_HI3593_PORT_init+0x60>)
    1572:	2050      	movs	r0, #80	; 0x50
    1574:	4b0a      	ldr	r3, [pc, #40]	; (15a0 <SPI_HI3593_PORT_init+0x5c>)
    1576:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    1578:	2101      	movs	r1, #1
    157a:	2006      	movs	r0, #6
    157c:	4b06      	ldr	r3, [pc, #24]	; (1598 <SPI_HI3593_PORT_init+0x54>)
    157e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    1580:	2100      	movs	r1, #0
    1582:	2006      	movs	r0, #6
    1584:	4b08      	ldr	r3, [pc, #32]	; (15a8 <SPI_HI3593_PORT_init+0x64>)
    1586:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    1588:	4908      	ldr	r1, [pc, #32]	; (15ac <SPI_HI3593_PORT_init+0x68>)
    158a:	2006      	movs	r0, #6
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <SPI_HI3593_PORT_init+0x5c>)
    158e:	4798      	blx	r3
}
    1590:	bf00      	nop
    1592:	bd80      	pop	{r7, pc}
    1594:	00001239 	.word	0x00001239
    1598:	00001201 	.word	0x00001201
    159c:	00510003 	.word	0x00510003
    15a0:	000011e1 	.word	0x000011e1
    15a4:	00500003 	.word	0x00500003
    15a8:	000011ad 	.word	0x000011ad
    15ac:	00060003 	.word	0x00060003

000015b0 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    15b0:	b580      	push	{r7, lr}
    15b2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15b4:	2240      	movs	r2, #64	; 0x40
    15b6:	2107      	movs	r1, #7
    15b8:	4806      	ldr	r0, [pc, #24]	; (15d4 <SPI_HI3593_CLOCK_init+0x24>)
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <SPI_HI3593_CLOCK_init+0x28>)
    15bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15be:	2243      	movs	r2, #67	; 0x43
    15c0:	2103      	movs	r1, #3
    15c2:	4804      	ldr	r0, [pc, #16]	; (15d4 <SPI_HI3593_CLOCK_init+0x24>)
    15c4:	4b04      	ldr	r3, [pc, #16]	; (15d8 <SPI_HI3593_CLOCK_init+0x28>)
    15c6:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    15c8:	4804      	ldr	r0, [pc, #16]	; (15dc <SPI_HI3593_CLOCK_init+0x2c>)
    15ca:	4b05      	ldr	r3, [pc, #20]	; (15e0 <SPI_HI3593_CLOCK_init+0x30>)
    15cc:	4798      	blx	r3
}
    15ce:	bf00      	nop
    15d0:	bd80      	pop	{r7, pc}
    15d2:	bf00      	nop
    15d4:	40001c00 	.word	0x40001c00
    15d8:	000009cd 	.word	0x000009cd
    15dc:	40000800 	.word	0x40000800
    15e0:	00000ad3 	.word	0x00000ad3

000015e4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    15e8:	4b04      	ldr	r3, [pc, #16]	; (15fc <SPI_HI3593_init+0x18>)
    15ea:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    15ec:	4904      	ldr	r1, [pc, #16]	; (1600 <SPI_HI3593_init+0x1c>)
    15ee:	4805      	ldr	r0, [pc, #20]	; (1604 <SPI_HI3593_init+0x20>)
    15f0:	4b05      	ldr	r3, [pc, #20]	; (1608 <SPI_HI3593_init+0x24>)
    15f2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <SPI_HI3593_init+0x28>)
    15f6:	4798      	blx	r3
}
    15f8:	bf00      	nop
    15fa:	bd80      	pop	{r7, pc}
    15fc:	000015b1 	.word	0x000015b1
    1600:	40003000 	.word	0x40003000
    1604:	20000dd0 	.word	0x20000dd0
    1608:	000028b5 	.word	0x000028b5
    160c:	00001545 	.word	0x00001545

00001610 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    1610:	b580      	push	{r7, lr}
    1612:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    1614:	2100      	movs	r1, #0
    1616:	2010      	movs	r0, #16
    1618:	4b11      	ldr	r3, [pc, #68]	; (1660 <SPI_MEMORIES_PORT_init+0x50>)
    161a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    161c:	2102      	movs	r1, #2
    161e:	2010      	movs	r0, #16
    1620:	4b10      	ldr	r3, [pc, #64]	; (1664 <SPI_MEMORIES_PORT_init+0x54>)
    1622:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1624:	4910      	ldr	r1, [pc, #64]	; (1668 <SPI_MEMORIES_PORT_init+0x58>)
    1626:	2010      	movs	r0, #16
    1628:	4b10      	ldr	r3, [pc, #64]	; (166c <SPI_MEMORIES_PORT_init+0x5c>)
    162a:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    162c:	2100      	movs	r1, #0
    162e:	2011      	movs	r0, #17
    1630:	4b0b      	ldr	r3, [pc, #44]	; (1660 <SPI_MEMORIES_PORT_init+0x50>)
    1632:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    1634:	2102      	movs	r1, #2
    1636:	2011      	movs	r0, #17
    1638:	4b0a      	ldr	r3, [pc, #40]	; (1664 <SPI_MEMORIES_PORT_init+0x54>)
    163a:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    163c:	490c      	ldr	r1, [pc, #48]	; (1670 <SPI_MEMORIES_PORT_init+0x60>)
    163e:	2011      	movs	r0, #17
    1640:	4b0a      	ldr	r3, [pc, #40]	; (166c <SPI_MEMORIES_PORT_init+0x5c>)
    1642:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1644:	2101      	movs	r1, #1
    1646:	2012      	movs	r0, #18
    1648:	4b06      	ldr	r3, [pc, #24]	; (1664 <SPI_MEMORIES_PORT_init+0x54>)
    164a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    164c:	2100      	movs	r1, #0
    164e:	2012      	movs	r0, #18
    1650:	4b08      	ldr	r3, [pc, #32]	; (1674 <SPI_MEMORIES_PORT_init+0x64>)
    1652:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    1654:	4908      	ldr	r1, [pc, #32]	; (1678 <SPI_MEMORIES_PORT_init+0x68>)
    1656:	2012      	movs	r0, #18
    1658:	4b04      	ldr	r3, [pc, #16]	; (166c <SPI_MEMORIES_PORT_init+0x5c>)
    165a:	4798      	blx	r3
}
    165c:	bf00      	nop
    165e:	bd80      	pop	{r7, pc}
    1660:	00001239 	.word	0x00001239
    1664:	00001201 	.word	0x00001201
    1668:	00100002 	.word	0x00100002
    166c:	000011e1 	.word	0x000011e1
    1670:	00110002 	.word	0x00110002
    1674:	000011ad 	.word	0x000011ad
    1678:	00120002 	.word	0x00120002

0000167c <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    167c:	b580      	push	{r7, lr}
    167e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1680:	2240      	movs	r2, #64	; 0x40
    1682:	2108      	movs	r1, #8
    1684:	4806      	ldr	r0, [pc, #24]	; (16a0 <SPI_MEMORIES_CLOCK_init+0x24>)
    1686:	4b07      	ldr	r3, [pc, #28]	; (16a4 <SPI_MEMORIES_CLOCK_init+0x28>)
    1688:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    168a:	2243      	movs	r2, #67	; 0x43
    168c:	2103      	movs	r1, #3
    168e:	4804      	ldr	r0, [pc, #16]	; (16a0 <SPI_MEMORIES_CLOCK_init+0x24>)
    1690:	4b04      	ldr	r3, [pc, #16]	; (16a4 <SPI_MEMORIES_CLOCK_init+0x28>)
    1692:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1694:	4804      	ldr	r0, [pc, #16]	; (16a8 <SPI_MEMORIES_CLOCK_init+0x2c>)
    1696:	4b05      	ldr	r3, [pc, #20]	; (16ac <SPI_MEMORIES_CLOCK_init+0x30>)
    1698:	4798      	blx	r3
}
    169a:	bf00      	nop
    169c:	bd80      	pop	{r7, pc}
    169e:	bf00      	nop
    16a0:	40001c00 	.word	0x40001c00
    16a4:	000009cd 	.word	0x000009cd
    16a8:	40000800 	.word	0x40000800
    16ac:	00000af3 	.word	0x00000af3

000016b0 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <SPI_MEMORIES_init+0x18>)
    16b6:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    16b8:	4904      	ldr	r1, [pc, #16]	; (16cc <SPI_MEMORIES_init+0x1c>)
    16ba:	4805      	ldr	r0, [pc, #20]	; (16d0 <SPI_MEMORIES_init+0x20>)
    16bc:	4b05      	ldr	r3, [pc, #20]	; (16d4 <SPI_MEMORIES_init+0x24>)
    16be:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    16c0:	4b05      	ldr	r3, [pc, #20]	; (16d8 <SPI_MEMORIES_init+0x28>)
    16c2:	4798      	blx	r3
}
    16c4:	bf00      	nop
    16c6:	bd80      	pop	{r7, pc}
    16c8:	0000167d 	.word	0x0000167d
    16cc:	40003400 	.word	0x40003400
    16d0:	20000db8 	.word	0x20000db8
    16d4:	000028b5 	.word	0x000028b5
    16d8:	00001611 	.word	0x00001611

000016dc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    16dc:	b580      	push	{r7, lr}
    16de:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    16e0:	2100      	movs	r1, #0
    16e2:	203b      	movs	r0, #59	; 0x3b
    16e4:	4b11      	ldr	r3, [pc, #68]	; (172c <SPI_TEMP_PORT_init+0x50>)
    16e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    16e8:	2102      	movs	r1, #2
    16ea:	203b      	movs	r0, #59	; 0x3b
    16ec:	4b10      	ldr	r3, [pc, #64]	; (1730 <SPI_TEMP_PORT_init+0x54>)
    16ee:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    16f0:	4910      	ldr	r1, [pc, #64]	; (1734 <SPI_TEMP_PORT_init+0x58>)
    16f2:	203b      	movs	r0, #59	; 0x3b
    16f4:	4b10      	ldr	r3, [pc, #64]	; (1738 <SPI_TEMP_PORT_init+0x5c>)
    16f6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    16f8:	2100      	movs	r1, #0
    16fa:	203a      	movs	r0, #58	; 0x3a
    16fc:	4b0b      	ldr	r3, [pc, #44]	; (172c <SPI_TEMP_PORT_init+0x50>)
    16fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1700:	2102      	movs	r1, #2
    1702:	203a      	movs	r0, #58	; 0x3a
    1704:	4b0a      	ldr	r3, [pc, #40]	; (1730 <SPI_TEMP_PORT_init+0x54>)
    1706:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1708:	490c      	ldr	r1, [pc, #48]	; (173c <SPI_TEMP_PORT_init+0x60>)
    170a:	203a      	movs	r0, #58	; 0x3a
    170c:	4b0a      	ldr	r3, [pc, #40]	; (1738 <SPI_TEMP_PORT_init+0x5c>)
    170e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1710:	2101      	movs	r1, #1
    1712:	203c      	movs	r0, #60	; 0x3c
    1714:	4b06      	ldr	r3, [pc, #24]	; (1730 <SPI_TEMP_PORT_init+0x54>)
    1716:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1718:	2100      	movs	r1, #0
    171a:	203c      	movs	r0, #60	; 0x3c
    171c:	4b08      	ldr	r3, [pc, #32]	; (1740 <SPI_TEMP_PORT_init+0x64>)
    171e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1720:	4908      	ldr	r1, [pc, #32]	; (1744 <SPI_TEMP_PORT_init+0x68>)
    1722:	203c      	movs	r0, #60	; 0x3c
    1724:	4b04      	ldr	r3, [pc, #16]	; (1738 <SPI_TEMP_PORT_init+0x5c>)
    1726:	4798      	blx	r3
}
    1728:	bf00      	nop
    172a:	bd80      	pop	{r7, pc}
    172c:	00001239 	.word	0x00001239
    1730:	00001201 	.word	0x00001201
    1734:	003b0003 	.word	0x003b0003
    1738:	000011e1 	.word	0x000011e1
    173c:	003a0003 	.word	0x003a0003
    1740:	000011ad 	.word	0x000011ad
    1744:	003c0003 	.word	0x003c0003

00001748 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1748:	b580      	push	{r7, lr}
    174a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    174c:	2240      	movs	r2, #64	; 0x40
    174e:	2122      	movs	r1, #34	; 0x22
    1750:	4806      	ldr	r0, [pc, #24]	; (176c <SPI_TEMP_CLOCK_init+0x24>)
    1752:	4b07      	ldr	r3, [pc, #28]	; (1770 <SPI_TEMP_CLOCK_init+0x28>)
    1754:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1756:	2243      	movs	r2, #67	; 0x43
    1758:	2103      	movs	r1, #3
    175a:	4804      	ldr	r0, [pc, #16]	; (176c <SPI_TEMP_CLOCK_init+0x24>)
    175c:	4b04      	ldr	r3, [pc, #16]	; (1770 <SPI_TEMP_CLOCK_init+0x28>)
    175e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1760:	4804      	ldr	r0, [pc, #16]	; (1774 <SPI_TEMP_CLOCK_init+0x2c>)
    1762:	4b05      	ldr	r3, [pc, #20]	; (1778 <SPI_TEMP_CLOCK_init+0x30>)
    1764:	4798      	blx	r3
}
    1766:	bf00      	nop
    1768:	bd80      	pop	{r7, pc}
    176a:	bf00      	nop
    176c:	40001c00 	.word	0x40001c00
    1770:	000009cd 	.word	0x000009cd
    1774:	40000800 	.word	0x40000800
    1778:	00000c53 	.word	0x00000c53

0000177c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    177c:	b580      	push	{r7, lr}
    177e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1780:	4b05      	ldr	r3, [pc, #20]	; (1798 <SPI_TEMP_init+0x1c>)
    1782:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    1784:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1788:	4804      	ldr	r0, [pc, #16]	; (179c <SPI_TEMP_init+0x20>)
    178a:	4b05      	ldr	r3, [pc, #20]	; (17a0 <SPI_TEMP_init+0x24>)
    178c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    178e:	4b05      	ldr	r3, [pc, #20]	; (17a4 <SPI_TEMP_init+0x28>)
    1790:	4798      	blx	r3
}
    1792:	bf00      	nop
    1794:	bd80      	pop	{r7, pc}
    1796:	bf00      	nop
    1798:	00001749 	.word	0x00001749
    179c:	20000de8 	.word	0x20000de8
    17a0:	00002701 	.word	0x00002701
    17a4:	000016dd 	.word	0x000016dd

000017a8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    17a8:	b580      	push	{r7, lr}
    17aa:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    17ac:	2100      	movs	r1, #0
    17ae:	2017      	movs	r0, #23
    17b0:	4b07      	ldr	r3, [pc, #28]	; (17d0 <I2C_EXPANDER_PORT_init+0x28>)
    17b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    17b4:	4907      	ldr	r1, [pc, #28]	; (17d4 <I2C_EXPANDER_PORT_init+0x2c>)
    17b6:	2017      	movs	r0, #23
    17b8:	4b07      	ldr	r3, [pc, #28]	; (17d8 <I2C_EXPANDER_PORT_init+0x30>)
    17ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    17bc:	2100      	movs	r1, #0
    17be:	2016      	movs	r0, #22
    17c0:	4b03      	ldr	r3, [pc, #12]	; (17d0 <I2C_EXPANDER_PORT_init+0x28>)
    17c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    17c4:	4905      	ldr	r1, [pc, #20]	; (17dc <I2C_EXPANDER_PORT_init+0x34>)
    17c6:	2016      	movs	r0, #22
    17c8:	4b03      	ldr	r3, [pc, #12]	; (17d8 <I2C_EXPANDER_PORT_init+0x30>)
    17ca:	4798      	blx	r3
}
    17cc:	bf00      	nop
    17ce:	bd80      	pop	{r7, pc}
    17d0:	000011ad 	.word	0x000011ad
    17d4:	00170003 	.word	0x00170003
    17d8:	000011e1 	.word	0x000011e1
    17dc:	00160003 	.word	0x00160003

000017e0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17e4:	2242      	movs	r2, #66	; 0x42
    17e6:	2123      	movs	r1, #35	; 0x23
    17e8:	4806      	ldr	r0, [pc, #24]	; (1804 <I2C_EXPANDER_CLOCK_init+0x24>)
    17ea:	4b07      	ldr	r3, [pc, #28]	; (1808 <I2C_EXPANDER_CLOCK_init+0x28>)
    17ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ee:	2246      	movs	r2, #70	; 0x46
    17f0:	2103      	movs	r1, #3
    17f2:	4804      	ldr	r0, [pc, #16]	; (1804 <I2C_EXPANDER_CLOCK_init+0x24>)
    17f4:	4b04      	ldr	r3, [pc, #16]	; (1808 <I2C_EXPANDER_CLOCK_init+0x28>)
    17f6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    17f8:	4804      	ldr	r0, [pc, #16]	; (180c <I2C_EXPANDER_CLOCK_init+0x2c>)
    17fa:	4b05      	ldr	r3, [pc, #20]	; (1810 <I2C_EXPANDER_CLOCK_init+0x30>)
    17fc:	4798      	blx	r3
}
    17fe:	bf00      	nop
    1800:	bd80      	pop	{r7, pc}
    1802:	bf00      	nop
    1804:	40001c00 	.word	0x40001c00
    1808:	000009cd 	.word	0x000009cd
    180c:	40000800 	.word	0x40000800
    1810:	00000c73 	.word	0x00000c73

00001814 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1818:	4b04      	ldr	r3, [pc, #16]	; (182c <I2C_EXPANDER_init+0x18>)
    181a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    181c:	4904      	ldr	r1, [pc, #16]	; (1830 <I2C_EXPANDER_init+0x1c>)
    181e:	4805      	ldr	r0, [pc, #20]	; (1834 <I2C_EXPANDER_init+0x20>)
    1820:	4b05      	ldr	r3, [pc, #20]	; (1838 <I2C_EXPANDER_init+0x24>)
    1822:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1824:	4b05      	ldr	r3, [pc, #20]	; (183c <I2C_EXPANDER_init+0x28>)
    1826:	4798      	blx	r3
}
    1828:	bf00      	nop
    182a:	bd80      	pop	{r7, pc}
    182c:	000017e1 	.word	0x000017e1
    1830:	43000400 	.word	0x43000400
    1834:	20000f04 	.word	0x20000f04
    1838:	00002245 	.word	0x00002245
    183c:	000017a9 	.word	0x000017a9

00001840 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1840:	b580      	push	{r7, lr}
    1842:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1844:	2100      	movs	r1, #0
    1846:	2068      	movs	r0, #104	; 0x68
    1848:	4b07      	ldr	r3, [pc, #28]	; (1868 <I2C_EEPROM_PORT_init+0x28>)
    184a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    184c:	4907      	ldr	r1, [pc, #28]	; (186c <I2C_EEPROM_PORT_init+0x2c>)
    184e:	2068      	movs	r0, #104	; 0x68
    1850:	4b07      	ldr	r3, [pc, #28]	; (1870 <I2C_EEPROM_PORT_init+0x30>)
    1852:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1854:	2100      	movs	r1, #0
    1856:	2069      	movs	r0, #105	; 0x69
    1858:	4b03      	ldr	r3, [pc, #12]	; (1868 <I2C_EEPROM_PORT_init+0x28>)
    185a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    185c:	4905      	ldr	r1, [pc, #20]	; (1874 <I2C_EEPROM_PORT_init+0x34>)
    185e:	2069      	movs	r0, #105	; 0x69
    1860:	4b03      	ldr	r3, [pc, #12]	; (1870 <I2C_EEPROM_PORT_init+0x30>)
    1862:	4798      	blx	r3
}
    1864:	bf00      	nop
    1866:	bd80      	pop	{r7, pc}
    1868:	000011ad 	.word	0x000011ad
    186c:	00680002 	.word	0x00680002
    1870:	000011e1 	.word	0x000011e1
    1874:	00690002 	.word	0x00690002

00001878 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    187c:	2242      	movs	r2, #66	; 0x42
    187e:	2125      	movs	r1, #37	; 0x25
    1880:	4806      	ldr	r0, [pc, #24]	; (189c <I2C_EEPROM_CLOCK_init+0x24>)
    1882:	4b07      	ldr	r3, [pc, #28]	; (18a0 <I2C_EEPROM_CLOCK_init+0x28>)
    1884:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1886:	2243      	movs	r2, #67	; 0x43
    1888:	2103      	movs	r1, #3
    188a:	4804      	ldr	r0, [pc, #16]	; (189c <I2C_EEPROM_CLOCK_init+0x24>)
    188c:	4b04      	ldr	r3, [pc, #16]	; (18a0 <I2C_EEPROM_CLOCK_init+0x28>)
    188e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1890:	4804      	ldr	r0, [pc, #16]	; (18a4 <I2C_EEPROM_CLOCK_init+0x2c>)
    1892:	4b05      	ldr	r3, [pc, #20]	; (18a8 <I2C_EEPROM_CLOCK_init+0x30>)
    1894:	4798      	blx	r3
}
    1896:	bf00      	nop
    1898:	bd80      	pop	{r7, pc}
    189a:	bf00      	nop
    189c:	40001c00 	.word	0x40001c00
    18a0:	000009cd 	.word	0x000009cd
    18a4:	40000800 	.word	0x40000800
    18a8:	00000c93 	.word	0x00000c93

000018ac <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <I2C_EEPROM_init+0x18>)
    18b2:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    18b4:	4904      	ldr	r1, [pc, #16]	; (18c8 <I2C_EEPROM_init+0x1c>)
    18b6:	4805      	ldr	r0, [pc, #20]	; (18cc <I2C_EEPROM_init+0x20>)
    18b8:	4b05      	ldr	r3, [pc, #20]	; (18d0 <I2C_EEPROM_init+0x24>)
    18ba:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    18bc:	4b05      	ldr	r3, [pc, #20]	; (18d4 <I2C_EEPROM_init+0x28>)
    18be:	4798      	blx	r3
}
    18c0:	bf00      	nop
    18c2:	bd80      	pop	{r7, pc}
    18c4:	00001879 	.word	0x00001879
    18c8:	43000c00 	.word	0x43000c00
    18cc:	20000f60 	.word	0x20000f60
    18d0:	00002245 	.word	0x00002245
    18d4:	00001841 	.word	0x00001841

000018d8 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    18d8:	b580      	push	{r7, lr}
    18da:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    18dc:	4808      	ldr	r0, [pc, #32]	; (1900 <TIMER_USB_init+0x28>)
    18de:	4b09      	ldr	r3, [pc, #36]	; (1904 <TIMER_USB_init+0x2c>)
    18e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18e2:	2243      	movs	r2, #67	; 0x43
    18e4:	2109      	movs	r1, #9
    18e6:	4808      	ldr	r0, [pc, #32]	; (1908 <TIMER_USB_init+0x30>)
    18e8:	4b08      	ldr	r3, [pc, #32]	; (190c <TIMER_USB_init+0x34>)
    18ea:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    18ec:	4b08      	ldr	r3, [pc, #32]	; (1910 <TIMER_USB_init+0x38>)
    18ee:	4798      	blx	r3
    18f0:	4603      	mov	r3, r0
    18f2:	461a      	mov	r2, r3
    18f4:	4907      	ldr	r1, [pc, #28]	; (1914 <TIMER_USB_init+0x3c>)
    18f6:	4808      	ldr	r0, [pc, #32]	; (1918 <TIMER_USB_init+0x40>)
    18f8:	4b08      	ldr	r3, [pc, #32]	; (191c <TIMER_USB_init+0x44>)
    18fa:	4798      	blx	r3
}
    18fc:	bf00      	nop
    18fe:	bd80      	pop	{r7, pc}
    1900:	40000800 	.word	0x40000800
    1904:	00000b13 	.word	0x00000b13
    1908:	40001c00 	.word	0x40001c00
    190c:	000009cd 	.word	0x000009cd
    1910:	00007ff9 	.word	0x00007ff9
    1914:	40003800 	.word	0x40003800
    1918:	20000ee8 	.word	0x20000ee8
    191c:	00002b45 	.word	0x00002b45

00001920 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1920:	b580      	push	{r7, lr}
    1922:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1924:	4808      	ldr	r0, [pc, #32]	; (1948 <TIMER_EVENT_init+0x28>)
    1926:	4b09      	ldr	r3, [pc, #36]	; (194c <TIMER_EVENT_init+0x2c>)
    1928:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    192a:	2245      	movs	r2, #69	; 0x45
    192c:	2109      	movs	r1, #9
    192e:	4808      	ldr	r0, [pc, #32]	; (1950 <TIMER_EVENT_init+0x30>)
    1930:	4b08      	ldr	r3, [pc, #32]	; (1954 <TIMER_EVENT_init+0x34>)
    1932:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1934:	4b08      	ldr	r3, [pc, #32]	; (1958 <TIMER_EVENT_init+0x38>)
    1936:	4798      	blx	r3
    1938:	4603      	mov	r3, r0
    193a:	461a      	mov	r2, r3
    193c:	4907      	ldr	r1, [pc, #28]	; (195c <TIMER_EVENT_init+0x3c>)
    193e:	4808      	ldr	r0, [pc, #32]	; (1960 <TIMER_EVENT_init+0x40>)
    1940:	4b08      	ldr	r3, [pc, #32]	; (1964 <TIMER_EVENT_init+0x44>)
    1942:	4798      	blx	r3
}
    1944:	bf00      	nop
    1946:	bd80      	pop	{r7, pc}
    1948:	40000800 	.word	0x40000800
    194c:	00000b33 	.word	0x00000b33
    1950:	40001c00 	.word	0x40001c00
    1954:	000009cd 	.word	0x000009cd
    1958:	00007ff9 	.word	0x00007ff9
    195c:	40003c00 	.word	0x40003c00
    1960:	20000e50 	.word	0x20000e50
    1964:	00002b45 	.word	0x00002b45

00001968 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1968:	b580      	push	{r7, lr}
    196a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    196c:	4808      	ldr	r0, [pc, #32]	; (1990 <TIMER_ARINC_init+0x28>)
    196e:	4b09      	ldr	r3, [pc, #36]	; (1994 <TIMER_ARINC_init+0x2c>)
    1970:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1972:	2244      	movs	r2, #68	; 0x44
    1974:	211a      	movs	r1, #26
    1976:	4808      	ldr	r0, [pc, #32]	; (1998 <TIMER_ARINC_init+0x30>)
    1978:	4b08      	ldr	r3, [pc, #32]	; (199c <TIMER_ARINC_init+0x34>)
    197a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    197c:	4b08      	ldr	r3, [pc, #32]	; (19a0 <TIMER_ARINC_init+0x38>)
    197e:	4798      	blx	r3
    1980:	4603      	mov	r3, r0
    1982:	461a      	mov	r2, r3
    1984:	4907      	ldr	r1, [pc, #28]	; (19a4 <TIMER_ARINC_init+0x3c>)
    1986:	4808      	ldr	r0, [pc, #32]	; (19a8 <TIMER_ARINC_init+0x40>)
    1988:	4b08      	ldr	r3, [pc, #32]	; (19ac <TIMER_ARINC_init+0x44>)
    198a:	4798      	blx	r3
}
    198c:	bf00      	nop
    198e:	bd80      	pop	{r7, pc}
    1990:	40000800 	.word	0x40000800
    1994:	00000bb3 	.word	0x00000bb3
    1998:	40001c00 	.word	0x40001c00
    199c:	000009cd 	.word	0x000009cd
    19a0:	00007ff9 	.word	0x00007ff9
    19a4:	4101a000 	.word	0x4101a000
    19a8:	20000ecc 	.word	0x20000ecc
    19ac:	00002b45 	.word	0x00002b45

000019b0 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    19b4:	4808      	ldr	r0, [pc, #32]	; (19d8 <TIMER_HVAC_init+0x28>)
    19b6:	4b09      	ldr	r3, [pc, #36]	; (19dc <TIMER_HVAC_init+0x2c>)
    19b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ba:	2245      	movs	r2, #69	; 0x45
    19bc:	211a      	movs	r1, #26
    19be:	4808      	ldr	r0, [pc, #32]	; (19e0 <TIMER_HVAC_init+0x30>)
    19c0:	4b08      	ldr	r3, [pc, #32]	; (19e4 <TIMER_HVAC_init+0x34>)
    19c2:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    19c4:	4b08      	ldr	r3, [pc, #32]	; (19e8 <TIMER_HVAC_init+0x38>)
    19c6:	4798      	blx	r3
    19c8:	4603      	mov	r3, r0
    19ca:	461a      	mov	r2, r3
    19cc:	4907      	ldr	r1, [pc, #28]	; (19ec <TIMER_HVAC_init+0x3c>)
    19ce:	4808      	ldr	r0, [pc, #32]	; (19f0 <TIMER_HVAC_init+0x40>)
    19d0:	4b08      	ldr	r3, [pc, #32]	; (19f4 <TIMER_HVAC_init+0x44>)
    19d2:	4798      	blx	r3
}
    19d4:	bf00      	nop
    19d6:	bd80      	pop	{r7, pc}
    19d8:	40000800 	.word	0x40000800
    19dc:	00000bd3 	.word	0x00000bd3
    19e0:	40001c00 	.word	0x40001c00
    19e4:	000009cd 	.word	0x000009cd
    19e8:	00007ff9 	.word	0x00007ff9
    19ec:	4101c000 	.word	0x4101c000
    19f0:	20000f44 	.word	0x20000f44
    19f4:	00002b45 	.word	0x00002b45

000019f8 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    19fc:	4808      	ldr	r0, [pc, #32]	; (1a20 <TIMER_MAINTENANCE_init+0x28>)
    19fe:	4b09      	ldr	r3, [pc, #36]	; (1a24 <TIMER_MAINTENANCE_init+0x2c>)
    1a00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a02:	2246      	movs	r2, #70	; 0x46
    1a04:	211e      	movs	r1, #30
    1a06:	4808      	ldr	r0, [pc, #32]	; (1a28 <TIMER_MAINTENANCE_init+0x30>)
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <TIMER_MAINTENANCE_init+0x34>)
    1a0a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1a0c:	4b08      	ldr	r3, [pc, #32]	; (1a30 <TIMER_MAINTENANCE_init+0x38>)
    1a0e:	4798      	blx	r3
    1a10:	4603      	mov	r3, r0
    1a12:	461a      	mov	r2, r3
    1a14:	4907      	ldr	r1, [pc, #28]	; (1a34 <TIMER_MAINTENANCE_init+0x3c>)
    1a16:	4808      	ldr	r0, [pc, #32]	; (1a38 <TIMER_MAINTENANCE_init+0x40>)
    1a18:	4b08      	ldr	r3, [pc, #32]	; (1a3c <TIMER_MAINTENANCE_init+0x44>)
    1a1a:	4798      	blx	r3
}
    1a1c:	bf00      	nop
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	40000800 	.word	0x40000800
    1a24:	00000bf3 	.word	0x00000bf3
    1a28:	40001c00 	.word	0x40001c00
    1a2c:	000009cd 	.word	0x000009cd
    1a30:	00007ff9 	.word	0x00007ff9
    1a34:	42001400 	.word	0x42001400
    1a38:	20000e30 	.word	0x20000e30
    1a3c:	00002b45 	.word	0x00002b45

00001a40 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1a44:	4808      	ldr	r0, [pc, #32]	; (1a68 <TIMER_INTERFACE_init+0x28>)
    1a46:	4b09      	ldr	r3, [pc, #36]	; (1a6c <TIMER_INTERFACE_init+0x2c>)
    1a48:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a4a:	2246      	movs	r2, #70	; 0x46
    1a4c:	211e      	movs	r1, #30
    1a4e:	4808      	ldr	r0, [pc, #32]	; (1a70 <TIMER_INTERFACE_init+0x30>)
    1a50:	4b08      	ldr	r3, [pc, #32]	; (1a74 <TIMER_INTERFACE_init+0x34>)
    1a52:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1a54:	4b08      	ldr	r3, [pc, #32]	; (1a78 <TIMER_INTERFACE_init+0x38>)
    1a56:	4798      	blx	r3
    1a58:	4603      	mov	r3, r0
    1a5a:	461a      	mov	r2, r3
    1a5c:	4907      	ldr	r1, [pc, #28]	; (1a7c <TIMER_INTERFACE_init+0x3c>)
    1a5e:	4808      	ldr	r0, [pc, #32]	; (1a80 <TIMER_INTERFACE_init+0x40>)
    1a60:	4b08      	ldr	r3, [pc, #32]	; (1a84 <TIMER_INTERFACE_init+0x44>)
    1a62:	4798      	blx	r3
}
    1a64:	bf00      	nop
    1a66:	bd80      	pop	{r7, pc}
    1a68:	40000800 	.word	0x40000800
    1a6c:	00000c13 	.word	0x00000c13
    1a70:	40001c00 	.word	0x40001c00
    1a74:	000009cd 	.word	0x000009cd
    1a78:	00007ff9 	.word	0x00007ff9
    1a7c:	42001800 	.word	0x42001800
    1a80:	20000e6c 	.word	0x20000e6c
    1a84:	00002b45 	.word	0x00002b45

00001a88 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1a88:	b480      	push	{r7}
    1a8a:	af00      	add	r7, sp, #0
}
    1a8c:	bf00      	nop
    1a8e:	46bd      	mov	sp, r7
    1a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a94:	4770      	bx	lr
	...

00001a98 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1a98:	b580      	push	{r7, lr}
    1a9a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1a9c:	4804      	ldr	r0, [pc, #16]	; (1ab0 <LIVE_PULSE_CLOCK_init+0x18>)
    1a9e:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <LIVE_PULSE_CLOCK_init+0x1c>)
    1aa0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aa2:	224b      	movs	r2, #75	; 0x4b
    1aa4:	2127      	movs	r1, #39	; 0x27
    1aa6:	4804      	ldr	r0, [pc, #16]	; (1ab8 <LIVE_PULSE_CLOCK_init+0x20>)
    1aa8:	4b04      	ldr	r3, [pc, #16]	; (1abc <LIVE_PULSE_CLOCK_init+0x24>)
    1aaa:	4798      	blx	r3
}
    1aac:	bf00      	nop
    1aae:	bd80      	pop	{r7, pc}
    1ab0:	40000800 	.word	0x40000800
    1ab4:	00000cb3 	.word	0x00000cb3
    1ab8:	40001c00 	.word	0x40001c00
    1abc:	000009cd 	.word	0x000009cd

00001ac0 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1ac4:	4b06      	ldr	r3, [pc, #24]	; (1ae0 <LIVE_PULSE_init+0x20>)
    1ac6:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1ac8:	4b06      	ldr	r3, [pc, #24]	; (1ae4 <LIVE_PULSE_init+0x24>)
    1aca:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1acc:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <LIVE_PULSE_init+0x28>)
    1ace:	4798      	blx	r3
    1ad0:	4603      	mov	r3, r0
    1ad2:	461a      	mov	r2, r3
    1ad4:	4905      	ldr	r1, [pc, #20]	; (1aec <LIVE_PULSE_init+0x2c>)
    1ad6:	4806      	ldr	r0, [pc, #24]	; (1af0 <LIVE_PULSE_init+0x30>)
    1ad8:	4b06      	ldr	r3, [pc, #24]	; (1af4 <LIVE_PULSE_init+0x34>)
    1ada:	4798      	blx	r3
}
    1adc:	bf00      	nop
    1ade:	bd80      	pop	{r7, pc}
    1ae0:	00001a99 	.word	0x00001a99
    1ae4:	00001a89 	.word	0x00001a89
    1ae8:	00008009 	.word	0x00008009
    1aec:	43001800 	.word	0x43001800
    1af0:	20000e88 	.word	0x20000e88
    1af4:	000022d9 	.word	0x000022d9

00001af8 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1afc:	2102      	movs	r1, #2
    1afe:	2018      	movs	r0, #24
    1b00:	4b0f      	ldr	r3, [pc, #60]	; (1b40 <CDCUSB_PORT_init+0x48>)
    1b02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1b04:	2100      	movs	r1, #0
    1b06:	2018      	movs	r0, #24
    1b08:	4b0e      	ldr	r3, [pc, #56]	; (1b44 <CDCUSB_PORT_init+0x4c>)
    1b0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1b0c:	2100      	movs	r1, #0
    1b0e:	2018      	movs	r0, #24
    1b10:	4b0d      	ldr	r3, [pc, #52]	; (1b48 <CDCUSB_PORT_init+0x50>)
    1b12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1b14:	490d      	ldr	r1, [pc, #52]	; (1b4c <CDCUSB_PORT_init+0x54>)
    1b16:	2018      	movs	r0, #24
    1b18:	4b0d      	ldr	r3, [pc, #52]	; (1b50 <CDCUSB_PORT_init+0x58>)
    1b1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1b1c:	2102      	movs	r1, #2
    1b1e:	2019      	movs	r0, #25
    1b20:	4b07      	ldr	r3, [pc, #28]	; (1b40 <CDCUSB_PORT_init+0x48>)
    1b22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1b24:	2100      	movs	r1, #0
    1b26:	2019      	movs	r0, #25
    1b28:	4b06      	ldr	r3, [pc, #24]	; (1b44 <CDCUSB_PORT_init+0x4c>)
    1b2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1b2c:	2100      	movs	r1, #0
    1b2e:	2019      	movs	r0, #25
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <CDCUSB_PORT_init+0x50>)
    1b32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1b34:	4907      	ldr	r1, [pc, #28]	; (1b54 <CDCUSB_PORT_init+0x5c>)
    1b36:	2019      	movs	r0, #25
    1b38:	4b05      	ldr	r3, [pc, #20]	; (1b50 <CDCUSB_PORT_init+0x58>)
    1b3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1b3c:	bf00      	nop
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	00001201 	.word	0x00001201
    1b44:	00001239 	.word	0x00001239
    1b48:	000011ad 	.word	0x000011ad
    1b4c:	00180007 	.word	0x00180007
    1b50:	000011e1 	.word	0x000011e1
    1b54:	00190007 	.word	0x00190007

00001b58 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1b5c:	2242      	movs	r2, #66	; 0x42
    1b5e:	210a      	movs	r1, #10
    1b60:	4805      	ldr	r0, [pc, #20]	; (1b78 <CDCUSB_CLOCK_init+0x20>)
    1b62:	4b06      	ldr	r3, [pc, #24]	; (1b7c <CDCUSB_CLOCK_init+0x24>)
    1b64:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1b66:	4806      	ldr	r0, [pc, #24]	; (1b80 <CDCUSB_CLOCK_init+0x28>)
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <CDCUSB_CLOCK_init+0x2c>)
    1b6a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1b6c:	4804      	ldr	r0, [pc, #16]	; (1b80 <CDCUSB_CLOCK_init+0x28>)
    1b6e:	4b06      	ldr	r3, [pc, #24]	; (1b88 <CDCUSB_CLOCK_init+0x30>)
    1b70:	4798      	blx	r3
}
    1b72:	bf00      	nop
    1b74:	bd80      	pop	{r7, pc}
    1b76:	bf00      	nop
    1b78:	40001c00 	.word	0x40001c00
    1b7c:	000009cd 	.word	0x000009cd
    1b80:	40000800 	.word	0x40000800
    1b84:	000009f3 	.word	0x000009f3
    1b88:	00000b53 	.word	0x00000b53

00001b8c <CDCUSB_init>:

void CDCUSB_init(void)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1b90:	4b03      	ldr	r3, [pc, #12]	; (1ba0 <CDCUSB_init+0x14>)
    1b92:	4798      	blx	r3
	usb_d_init();
    1b94:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <CDCUSB_init+0x18>)
    1b96:	4798      	blx	r3
	CDCUSB_PORT_init();
    1b98:	4b03      	ldr	r3, [pc, #12]	; (1ba8 <CDCUSB_init+0x1c>)
    1b9a:	4798      	blx	r3
}
    1b9c:	bf00      	nop
    1b9e:	bd80      	pop	{r7, pc}
    1ba0:	00001b59 	.word	0x00001b59
    1ba4:	00003355 	.word	0x00003355
    1ba8:	00001af9 	.word	0x00001af9

00001bac <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1bb0:	4802      	ldr	r0, [pc, #8]	; (1bbc <WATCHDOG_CLOCK_init+0x10>)
    1bb2:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <WATCHDOG_CLOCK_init+0x14>)
    1bb4:	4798      	blx	r3
}
    1bb6:	bf00      	nop
    1bb8:	bd80      	pop	{r7, pc}
    1bba:	bf00      	nop
    1bbc:	40000800 	.word	0x40000800
    1bc0:	00000a73 	.word	0x00000a73

00001bc4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1bc8:	4b03      	ldr	r3, [pc, #12]	; (1bd8 <WATCHDOG_init+0x14>)
    1bca:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1bcc:	4903      	ldr	r1, [pc, #12]	; (1bdc <WATCHDOG_init+0x18>)
    1bce:	4804      	ldr	r0, [pc, #16]	; (1be0 <WATCHDOG_init+0x1c>)
    1bd0:	4b04      	ldr	r3, [pc, #16]	; (1be4 <WATCHDOG_init+0x20>)
    1bd2:	4798      	blx	r3
}
    1bd4:	bf00      	nop
    1bd6:	bd80      	pop	{r7, pc}
    1bd8:	00001bad 	.word	0x00001bad
    1bdc:	40002000 	.word	0x40002000
    1be0:	20000fc0 	.word	0x20000fc0
    1be4:	00001281 	.word	0x00001281

00001be8 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1bec:	4904      	ldr	r1, [pc, #16]	; (1c00 <CAN_CCU_PORT_init+0x18>)
    1bee:	202d      	movs	r0, #45	; 0x2d
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <CAN_CCU_PORT_init+0x1c>)
    1bf2:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1bf4:	4904      	ldr	r1, [pc, #16]	; (1c08 <CAN_CCU_PORT_init+0x20>)
    1bf6:	202c      	movs	r0, #44	; 0x2c
    1bf8:	4b02      	ldr	r3, [pc, #8]	; (1c04 <CAN_CCU_PORT_init+0x1c>)
    1bfa:	4798      	blx	r3
}
    1bfc:	bf00      	nop
    1bfe:	bd80      	pop	{r7, pc}
    1c00:	002d0007 	.word	0x002d0007
    1c04:	000011e1 	.word	0x000011e1
    1c08:	002c0007 	.word	0x002c0007

00001c0c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1c10:	4807      	ldr	r0, [pc, #28]	; (1c30 <CAN_CCU_init+0x24>)
    1c12:	4b08      	ldr	r3, [pc, #32]	; (1c34 <CAN_CCU_init+0x28>)
    1c14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c16:	2243      	movs	r2, #67	; 0x43
    1c18:	211c      	movs	r1, #28
    1c1a:	4807      	ldr	r0, [pc, #28]	; (1c38 <CAN_CCU_init+0x2c>)
    1c1c:	4b07      	ldr	r3, [pc, #28]	; (1c3c <CAN_CCU_init+0x30>)
    1c1e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1c20:	4907      	ldr	r1, [pc, #28]	; (1c40 <CAN_CCU_init+0x34>)
    1c22:	4808      	ldr	r0, [pc, #32]	; (1c44 <CAN_CCU_init+0x38>)
    1c24:	4b08      	ldr	r3, [pc, #32]	; (1c48 <CAN_CCU_init+0x3c>)
    1c26:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <CAN_CCU_init+0x40>)
    1c2a:	4798      	blx	r3
}
    1c2c:	bf00      	nop
    1c2e:	bd80      	pop	{r7, pc}
    1c30:	40000800 	.word	0x40000800
    1c34:	00000a33 	.word	0x00000a33
    1c38:	40001c00 	.word	0x40001c00
    1c3c:	000009cd 	.word	0x000009cd
    1c40:	42000400 	.word	0x42000400
    1c44:	20000ea4 	.word	0x20000ea4
    1c48:	00001e85 	.word	0x00001e85
    1c4c:	00001be9 	.word	0x00001be9

00001c50 <system_init>:

void system_init(void)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	af00      	add	r7, sp, #0
	init_mcu();
    1c54:	4b56      	ldr	r3, [pc, #344]	; (1db0 <system_init+0x160>)
    1c56:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1c58:	2101      	movs	r1, #1
    1c5a:	200f      	movs	r0, #15
    1c5c:	4b55      	ldr	r3, [pc, #340]	; (1db4 <system_init+0x164>)
    1c5e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1c60:	2102      	movs	r1, #2
    1c62:	200f      	movs	r0, #15
    1c64:	4b54      	ldr	r3, [pc, #336]	; (1db8 <system_init+0x168>)
    1c66:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1c68:	f04f 31ff 	mov.w	r1, #4294967295
    1c6c:	200f      	movs	r0, #15
    1c6e:	4b53      	ldr	r3, [pc, #332]	; (1dbc <system_init+0x16c>)
    1c70:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1c72:	2101      	movs	r1, #1
    1c74:	2013      	movs	r0, #19
    1c76:	4b4f      	ldr	r3, [pc, #316]	; (1db4 <system_init+0x164>)
    1c78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1c7a:	2102      	movs	r1, #2
    1c7c:	2013      	movs	r0, #19
    1c7e:	4b4e      	ldr	r3, [pc, #312]	; (1db8 <system_init+0x168>)
    1c80:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1c82:	f04f 31ff 	mov.w	r1, #4294967295
    1c86:	2013      	movs	r0, #19
    1c88:	4b4c      	ldr	r3, [pc, #304]	; (1dbc <system_init+0x16c>)
    1c8a:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1c8c:	2101      	movs	r1, #1
    1c8e:	2027      	movs	r0, #39	; 0x27
    1c90:	4b49      	ldr	r3, [pc, #292]	; (1db8 <system_init+0x168>)
    1c92:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1c94:	2102      	movs	r1, #2
    1c96:	2027      	movs	r0, #39	; 0x27
    1c98:	4b49      	ldr	r3, [pc, #292]	; (1dc0 <system_init+0x170>)
    1c9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1c9c:	f04f 31ff 	mov.w	r1, #4294967295
    1ca0:	2027      	movs	r0, #39	; 0x27
    1ca2:	4b46      	ldr	r3, [pc, #280]	; (1dbc <system_init+0x16c>)
    1ca4:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1ca6:	2101      	movs	r1, #1
    1ca8:	203d      	movs	r0, #61	; 0x3d
    1caa:	4b42      	ldr	r3, [pc, #264]	; (1db4 <system_init+0x164>)
    1cac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    1cae:	2102      	movs	r1, #2
    1cb0:	203d      	movs	r0, #61	; 0x3d
    1cb2:	4b41      	ldr	r3, [pc, #260]	; (1db8 <system_init+0x168>)
    1cb4:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1cb6:	f04f 31ff 	mov.w	r1, #4294967295
    1cba:	203d      	movs	r0, #61	; 0x3d
    1cbc:	4b3f      	ldr	r3, [pc, #252]	; (1dbc <system_init+0x16c>)
    1cbe:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1cc0:	2101      	movs	r1, #1
    1cc2:	203f      	movs	r0, #63	; 0x3f
    1cc4:	4b3c      	ldr	r3, [pc, #240]	; (1db8 <system_init+0x168>)
    1cc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1cc8:	2101      	movs	r1, #1
    1cca:	203f      	movs	r0, #63	; 0x3f
    1ccc:	4b3c      	ldr	r3, [pc, #240]	; (1dc0 <system_init+0x170>)
    1cce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1cd0:	f04f 31ff 	mov.w	r1, #4294967295
    1cd4:	203f      	movs	r0, #63	; 0x3f
    1cd6:	4b39      	ldr	r3, [pc, #228]	; (1dbc <system_init+0x16c>)
    1cd8:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1cda:	2101      	movs	r1, #1
    1cdc:	2040      	movs	r0, #64	; 0x40
    1cde:	4b36      	ldr	r3, [pc, #216]	; (1db8 <system_init+0x168>)
    1ce0:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1ce2:	2102      	movs	r1, #2
    1ce4:	2040      	movs	r0, #64	; 0x40
    1ce6:	4b36      	ldr	r3, [pc, #216]	; (1dc0 <system_init+0x170>)
    1ce8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1cea:	f04f 31ff 	mov.w	r1, #4294967295
    1cee:	2040      	movs	r0, #64	; 0x40
    1cf0:	4b32      	ldr	r3, [pc, #200]	; (1dbc <system_init+0x16c>)
    1cf2:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1cf4:	2100      	movs	r1, #0
    1cf6:	204d      	movs	r0, #77	; 0x4d
    1cf8:	4b2e      	ldr	r3, [pc, #184]	; (1db4 <system_init+0x164>)
    1cfa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1cfc:	2102      	movs	r1, #2
    1cfe:	204d      	movs	r0, #77	; 0x4d
    1d00:	4b2d      	ldr	r3, [pc, #180]	; (1db8 <system_init+0x168>)
    1d02:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1d04:	f04f 31ff 	mov.w	r1, #4294967295
    1d08:	204d      	movs	r0, #77	; 0x4d
    1d0a:	4b2c      	ldr	r3, [pc, #176]	; (1dbc <system_init+0x16c>)
    1d0c:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1d0e:	2101      	movs	r1, #1
    1d10:	204e      	movs	r0, #78	; 0x4e
    1d12:	4b28      	ldr	r3, [pc, #160]	; (1db4 <system_init+0x164>)
    1d14:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1d16:	2102      	movs	r1, #2
    1d18:	204e      	movs	r0, #78	; 0x4e
    1d1a:	4b27      	ldr	r3, [pc, #156]	; (1db8 <system_init+0x168>)
    1d1c:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1d1e:	f04f 31ff 	mov.w	r1, #4294967295
    1d22:	204e      	movs	r0, #78	; 0x4e
    1d24:	4b25      	ldr	r3, [pc, #148]	; (1dbc <system_init+0x16c>)
    1d26:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1d28:	2100      	movs	r1, #0
    1d2a:	204f      	movs	r0, #79	; 0x4f
    1d2c:	4b21      	ldr	r3, [pc, #132]	; (1db4 <system_init+0x164>)
    1d2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1d30:	2102      	movs	r1, #2
    1d32:	204f      	movs	r0, #79	; 0x4f
    1d34:	4b20      	ldr	r3, [pc, #128]	; (1db8 <system_init+0x168>)
    1d36:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1d38:	f04f 31ff 	mov.w	r1, #4294967295
    1d3c:	204f      	movs	r0, #79	; 0x4f
    1d3e:	4b1f      	ldr	r3, [pc, #124]	; (1dbc <system_init+0x16c>)
    1d40:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1d42:	2100      	movs	r1, #0
    1d44:	2052      	movs	r0, #82	; 0x52
    1d46:	4b1b      	ldr	r3, [pc, #108]	; (1db4 <system_init+0x164>)
    1d48:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1d4a:	2102      	movs	r1, #2
    1d4c:	2052      	movs	r0, #82	; 0x52
    1d4e:	4b1a      	ldr	r3, [pc, #104]	; (1db8 <system_init+0x168>)
    1d50:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1d52:	f04f 31ff 	mov.w	r1, #4294967295
    1d56:	2052      	movs	r0, #82	; 0x52
    1d58:	4b18      	ldr	r3, [pc, #96]	; (1dbc <system_init+0x16c>)
    1d5a:	4798      	blx	r3

	CRC_CALC_init();
    1d5c:	4b19      	ldr	r3, [pc, #100]	; (1dc4 <system_init+0x174>)
    1d5e:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1d60:	4b19      	ldr	r3, [pc, #100]	; (1dc8 <system_init+0x178>)
    1d62:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1d64:	4b19      	ldr	r3, [pc, #100]	; (1dcc <system_init+0x17c>)
    1d66:	4798      	blx	r3

	QSPI_N25Q256_init();
    1d68:	4b19      	ldr	r3, [pc, #100]	; (1dd0 <system_init+0x180>)
    1d6a:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1d6c:	4b19      	ldr	r3, [pc, #100]	; (1dd4 <system_init+0x184>)
    1d6e:	4798      	blx	r3

	SPI_HI3593_init();
    1d70:	4b19      	ldr	r3, [pc, #100]	; (1dd8 <system_init+0x188>)
    1d72:	4798      	blx	r3

	SPI_MEMORIES_init();
    1d74:	4b19      	ldr	r3, [pc, #100]	; (1ddc <system_init+0x18c>)
    1d76:	4798      	blx	r3

	SPI_TEMP_init();
    1d78:	4b19      	ldr	r3, [pc, #100]	; (1de0 <system_init+0x190>)
    1d7a:	4798      	blx	r3

	I2C_EXPANDER_init();
    1d7c:	4b19      	ldr	r3, [pc, #100]	; (1de4 <system_init+0x194>)
    1d7e:	4798      	blx	r3

	I2C_EEPROM_init();
    1d80:	4b19      	ldr	r3, [pc, #100]	; (1de8 <system_init+0x198>)
    1d82:	4798      	blx	r3

	TIMER_USB_init();
    1d84:	4b19      	ldr	r3, [pc, #100]	; (1dec <system_init+0x19c>)
    1d86:	4798      	blx	r3
	TIMER_EVENT_init();
    1d88:	4b19      	ldr	r3, [pc, #100]	; (1df0 <system_init+0x1a0>)
    1d8a:	4798      	blx	r3
	TIMER_ARINC_init();
    1d8c:	4b19      	ldr	r3, [pc, #100]	; (1df4 <system_init+0x1a4>)
    1d8e:	4798      	blx	r3
	TIMER_HVAC_init();
    1d90:	4b19      	ldr	r3, [pc, #100]	; (1df8 <system_init+0x1a8>)
    1d92:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1d94:	4b19      	ldr	r3, [pc, #100]	; (1dfc <system_init+0x1ac>)
    1d96:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1d98:	4b19      	ldr	r3, [pc, #100]	; (1e00 <system_init+0x1b0>)
    1d9a:	4798      	blx	r3
	LIVE_PULSE_init();
    1d9c:	4b19      	ldr	r3, [pc, #100]	; (1e04 <system_init+0x1b4>)
    1d9e:	4798      	blx	r3

	CDCUSB_init();
    1da0:	4b19      	ldr	r3, [pc, #100]	; (1e08 <system_init+0x1b8>)
    1da2:	4798      	blx	r3

	WATCHDOG_init();
    1da4:	4b19      	ldr	r3, [pc, #100]	; (1e0c <system_init+0x1bc>)
    1da6:	4798      	blx	r3
	CAN_CCU_init();
    1da8:	4b19      	ldr	r3, [pc, #100]	; (1e10 <system_init+0x1c0>)
    1daa:	4798      	blx	r3
}
    1dac:	bf00      	nop
    1dae:	bd80      	pop	{r7, pc}
    1db0:	00001271 	.word	0x00001271
    1db4:	00001239 	.word	0x00001239
    1db8:	00001201 	.word	0x00001201
    1dbc:	000011e1 	.word	0x000011e1
    1dc0:	000011ad 	.word	0x000011ad
    1dc4:	000012d1 	.word	0x000012d1
    1dc8:	000012fd 	.word	0x000012fd
    1dcc:	000013a1 	.word	0x000013a1
    1dd0:	000014dd 	.word	0x000014dd
    1dd4:	00001521 	.word	0x00001521
    1dd8:	000015e5 	.word	0x000015e5
    1ddc:	000016b1 	.word	0x000016b1
    1de0:	0000177d 	.word	0x0000177d
    1de4:	00001815 	.word	0x00001815
    1de8:	000018ad 	.word	0x000018ad
    1dec:	000018d9 	.word	0x000018d9
    1df0:	00001921 	.word	0x00001921
    1df4:	00001969 	.word	0x00001969
    1df8:	000019b1 	.word	0x000019b1
    1dfc:	000019f9 	.word	0x000019f9
    1e00:	00001a41 	.word	0x00001a41
    1e04:	00001ac1 	.word	0x00001ac1
    1e08:	00001b8d 	.word	0x00001b8d
    1e0c:	00001bc5 	.word	0x00001bc5
    1e10:	00001c0d 	.word	0x00001c0d

00001e14 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b084      	sub	sp, #16
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1e1e:	2300      	movs	r3, #0
    1e20:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	2b00      	cmp	r3, #0
    1e26:	bf14      	ite	ne
    1e28:	2301      	movne	r3, #1
    1e2a:	2300      	moveq	r3, #0
    1e2c:	b2db      	uxtb	r3, r3
    1e2e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1e32:	4911      	ldr	r1, [pc, #68]	; (1e78 <calendar_init+0x64>)
    1e34:	4618      	mov	r0, r3
    1e36:	4b11      	ldr	r3, [pc, #68]	; (1e7c <calendar_init+0x68>)
    1e38:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	681a      	ldr	r2, [r3, #0]
    1e3e:	683b      	ldr	r3, [r7, #0]
    1e40:	429a      	cmp	r2, r3
    1e42:	d101      	bne.n	1e48 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1e44:	2300      	movs	r3, #0
    1e46:	e013      	b.n	1e70 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	681b      	ldr	r3, [r3, #0]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d002      	beq.n	1e56 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1e50:	f06f 0311 	mvn.w	r3, #17
    1e54:	e00c      	b.n	1e70 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	683a      	ldr	r2, [r7, #0]
    1e5a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	4618      	mov	r0, r3
    1e60:	4b07      	ldr	r3, [pc, #28]	; (1e80 <calendar_init+0x6c>)
    1e62:	4798      	blx	r3
    1e64:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1e66:	687b      	ldr	r3, [r7, #4]
    1e68:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1e6c:	619a      	str	r2, [r3, #24]

	return ret;
    1e6e:	68fb      	ldr	r3, [r7, #12]
}
    1e70:	4618      	mov	r0, r3
    1e72:	3710      	adds	r7, #16
    1e74:	46bd      	mov	sp, r7
    1e76:	bd80      	pop	{r7, pc}
    1e78:	0000edc4 	.word	0x0000edc4
    1e7c:	000038fd 	.word	0x000038fd
    1e80:	00005aed 	.word	0x00005aed

00001e84 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b084      	sub	sp, #16
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	2b00      	cmp	r3, #0
    1e92:	d004      	beq.n	1e9e <can_async_init+0x1a>
    1e94:	683b      	ldr	r3, [r7, #0]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d001      	beq.n	1e9e <can_async_init+0x1a>
    1e9a:	2301      	movs	r3, #1
    1e9c:	e000      	b.n	1ea0 <can_async_init+0x1c>
    1e9e:	2300      	movs	r3, #0
    1ea0:	f003 0301 	and.w	r3, r3, #1
    1ea4:	b2db      	uxtb	r3, r3
    1ea6:	2241      	movs	r2, #65	; 0x41
    1ea8:	490e      	ldr	r1, [pc, #56]	; (1ee4 <can_async_init+0x60>)
    1eaa:	4618      	mov	r0, r3
    1eac:	4b0e      	ldr	r3, [pc, #56]	; (1ee8 <can_async_init+0x64>)
    1eae:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	6839      	ldr	r1, [r7, #0]
    1eb4:	4618      	mov	r0, r3
    1eb6:	4b0d      	ldr	r3, [pc, #52]	; (1eec <can_async_init+0x68>)
    1eb8:	4798      	blx	r3
    1eba:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1ebc:	68fb      	ldr	r3, [r7, #12]
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d001      	beq.n	1ec6 <can_async_init+0x42>
		return rc;
    1ec2:	68fb      	ldr	r3, [r7, #12]
    1ec4:	e009      	b.n	1eda <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	4a09      	ldr	r2, [pc, #36]	; (1ef0 <can_async_init+0x6c>)
    1eca:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	4a09      	ldr	r2, [pc, #36]	; (1ef4 <can_async_init+0x70>)
    1ed0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	4a08      	ldr	r2, [pc, #32]	; (1ef8 <can_async_init+0x74>)
    1ed6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1ed8:	2300      	movs	r3, #0
}
    1eda:	4618      	mov	r0, r3
    1edc:	3710      	adds	r7, #16
    1ede:	46bd      	mov	sp, r7
    1ee0:	bd80      	pop	{r7, pc}
    1ee2:	bf00      	nop
    1ee4:	0000ede0 	.word	0x0000ede0
    1ee8:	000038fd 	.word	0x000038fd
    1eec:	00003e59 	.word	0x00003e59
    1ef0:	00001efd 	.word	0x00001efd
    1ef4:	00001f21 	.word	0x00001f21
    1ef8:	00001f45 	.word	0x00001f45

00001efc <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b084      	sub	sp, #16
    1f00:	af00      	add	r7, sp, #0
    1f02:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	69db      	ldr	r3, [r3, #28]
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d003      	beq.n	1f18 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1f10:	68fb      	ldr	r3, [r7, #12]
    1f12:	69db      	ldr	r3, [r3, #28]
    1f14:	68f8      	ldr	r0, [r7, #12]
    1f16:	4798      	blx	r3
	}
}
    1f18:	bf00      	nop
    1f1a:	3710      	adds	r7, #16
    1f1c:	46bd      	mov	sp, r7
    1f1e:	bd80      	pop	{r7, pc}

00001f20 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1f20:	b580      	push	{r7, lr}
    1f22:	b084      	sub	sp, #16
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1f2c:	68fb      	ldr	r3, [r7, #12]
    1f2e:	6a1b      	ldr	r3, [r3, #32]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d003      	beq.n	1f3c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	6a1b      	ldr	r3, [r3, #32]
    1f38:	68f8      	ldr	r0, [r7, #12]
    1f3a:	4798      	blx	r3
	}
}
    1f3c:	bf00      	nop
    1f3e:	3710      	adds	r7, #16
    1f40:	46bd      	mov	sp, r7
    1f42:	bd80      	pop	{r7, pc}

00001f44 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b084      	sub	sp, #16
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
    1f4c:	460b      	mov	r3, r1
    1f4e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d005      	beq.n	1f68 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f60:	78fa      	ldrb	r2, [r7, #3]
    1f62:	4611      	mov	r1, r2
    1f64:	68f8      	ldr	r0, [r7, #12]
    1f66:	4798      	blx	r3
	}
}
    1f68:	bf00      	nop
    1f6a:	3710      	adds	r7, #16
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bd80      	pop	{r7, pc}

00001f70 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1f70:	b580      	push	{r7, lr}
    1f72:	b082      	sub	sp, #8
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
    1f78:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d004      	beq.n	1f8a <crc_sync_init+0x1a>
    1f80:	683b      	ldr	r3, [r7, #0]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d001      	beq.n	1f8a <crc_sync_init+0x1a>
    1f86:	2301      	movs	r3, #1
    1f88:	e000      	b.n	1f8c <crc_sync_init+0x1c>
    1f8a:	2300      	movs	r3, #0
    1f8c:	f003 0301 	and.w	r3, r3, #1
    1f90:	b2db      	uxtb	r3, r3
    1f92:	222b      	movs	r2, #43	; 0x2b
    1f94:	4906      	ldr	r1, [pc, #24]	; (1fb0 <crc_sync_init+0x40>)
    1f96:	4618      	mov	r0, r3
    1f98:	4b06      	ldr	r3, [pc, #24]	; (1fb4 <crc_sync_init+0x44>)
    1f9a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	6839      	ldr	r1, [r7, #0]
    1fa0:	4618      	mov	r0, r3
    1fa2:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <crc_sync_init+0x48>)
    1fa4:	4798      	blx	r3
    1fa6:	4603      	mov	r3, r0
}
    1fa8:	4618      	mov	r0, r3
    1faa:	3708      	adds	r7, #8
    1fac:	46bd      	mov	sp, r7
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	0000edfc 	.word	0x0000edfc
    1fb4:	000038fd 	.word	0x000038fd
    1fb8:	0000455d 	.word	0x0000455d

00001fbc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1fbc:	b590      	push	{r4, r7, lr}
    1fbe:	b083      	sub	sp, #12
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	4603      	mov	r3, r0
    1fc4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1fc6:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <delay_us+0x28>)
    1fc8:	681c      	ldr	r4, [r3, #0]
    1fca:	88fb      	ldrh	r3, [r7, #6]
    1fcc:	4618      	mov	r0, r3
    1fce:	4b06      	ldr	r3, [pc, #24]	; (1fe8 <delay_us+0x2c>)
    1fd0:	4798      	blx	r3
    1fd2:	4603      	mov	r3, r0
    1fd4:	4619      	mov	r1, r3
    1fd6:	4620      	mov	r0, r4
    1fd8:	4b04      	ldr	r3, [pc, #16]	; (1fec <delay_us+0x30>)
    1fda:	4798      	blx	r3
}
    1fdc:	bf00      	nop
    1fde:	370c      	adds	r7, #12
    1fe0:	46bd      	mov	sp, r7
    1fe2:	bd90      	pop	{r4, r7, pc}
    1fe4:	2000058c 	.word	0x2000058c
    1fe8:	000042b1 	.word	0x000042b1
    1fec:	00004449 	.word	0x00004449

00001ff0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1ff0:	b590      	push	{r4, r7, lr}
    1ff2:	b083      	sub	sp, #12
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	4603      	mov	r3, r0
    1ff8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1ffa:	4b07      	ldr	r3, [pc, #28]	; (2018 <delay_ms+0x28>)
    1ffc:	681c      	ldr	r4, [r3, #0]
    1ffe:	88fb      	ldrh	r3, [r7, #6]
    2000:	4618      	mov	r0, r3
    2002:	4b06      	ldr	r3, [pc, #24]	; (201c <delay_ms+0x2c>)
    2004:	4798      	blx	r3
    2006:	4603      	mov	r3, r0
    2008:	4619      	mov	r1, r3
    200a:	4620      	mov	r0, r4
    200c:	4b04      	ldr	r3, [pc, #16]	; (2020 <delay_ms+0x30>)
    200e:	4798      	blx	r3
}
    2010:	bf00      	nop
    2012:	370c      	adds	r7, #12
    2014:	46bd      	mov	sp, r7
    2016:	bd90      	pop	{r4, r7, pc}
    2018:	2000058c 	.word	0x2000058c
    201c:	0000441d 	.word	0x0000441d
    2020:	00004449 	.word	0x00004449

00002024 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2024:	b580      	push	{r7, lr}
    2026:	af00      	add	r7, sp, #0
	return _event_system_init();
    2028:	4b02      	ldr	r3, [pc, #8]	; (2034 <event_system_init+0x10>)
    202a:	4798      	blx	r3
    202c:	4603      	mov	r3, r0
}
    202e:	4618      	mov	r0, r3
    2030:	bd80      	pop	{r7, pc}
    2032:	bf00      	nop
    2034:	00004b91 	.word	0x00004b91

00002038 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2038:	b580      	push	{r7, lr}
    203a:	b082      	sub	sp, #8
    203c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    203e:	2300      	movs	r3, #0
    2040:	80fb      	strh	r3, [r7, #6]
    2042:	e00e      	b.n	2062 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2044:	88fb      	ldrh	r3, [r7, #6]
    2046:	4a0c      	ldr	r2, [pc, #48]	; (2078 <ext_irq_init+0x40>)
    2048:	00db      	lsls	r3, r3, #3
    204a:	4413      	add	r3, r2
    204c:	f04f 32ff 	mov.w	r2, #4294967295
    2050:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2052:	88fb      	ldrh	r3, [r7, #6]
    2054:	4a08      	ldr	r2, [pc, #32]	; (2078 <ext_irq_init+0x40>)
    2056:	2100      	movs	r1, #0
    2058:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    205c:	88fb      	ldrh	r3, [r7, #6]
    205e:	3301      	adds	r3, #1
    2060:	80fb      	strh	r3, [r7, #6]
    2062:	88fb      	ldrh	r3, [r7, #6]
    2064:	2b03      	cmp	r3, #3
    2066:	d9ed      	bls.n	2044 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2068:	4804      	ldr	r0, [pc, #16]	; (207c <ext_irq_init+0x44>)
    206a:	4b05      	ldr	r3, [pc, #20]	; (2080 <ext_irq_init+0x48>)
    206c:	4798      	blx	r3
    206e:	4603      	mov	r3, r0
}
    2070:	4618      	mov	r0, r3
    2072:	3708      	adds	r7, #8
    2074:	46bd      	mov	sp, r7
    2076:	bd80      	pop	{r7, pc}
    2078:	20000590 	.word	0x20000590
    207c:	00002085 	.word	0x00002085
    2080:	00004865 	.word	0x00004865

00002084 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2084:	b580      	push	{r7, lr}
    2086:	b084      	sub	sp, #16
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    208c:	2300      	movs	r3, #0
    208e:	73fb      	strb	r3, [r7, #15]
    2090:	2304      	movs	r3, #4
    2092:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2094:	e02a      	b.n	20ec <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2096:	7bba      	ldrb	r2, [r7, #14]
    2098:	7bfb      	ldrb	r3, [r7, #15]
    209a:	4413      	add	r3, r2
    209c:	105b      	asrs	r3, r3, #1
    209e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    20a0:	7b7b      	ldrb	r3, [r7, #13]
    20a2:	2b03      	cmp	r3, #3
    20a4:	d827      	bhi.n	20f6 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    20a6:	7b7b      	ldrb	r3, [r7, #13]
    20a8:	4a16      	ldr	r2, [pc, #88]	; (2104 <process_ext_irq+0x80>)
    20aa:	00db      	lsls	r3, r3, #3
    20ac:	4413      	add	r3, r2
    20ae:	685a      	ldr	r2, [r3, #4]
    20b0:	687b      	ldr	r3, [r7, #4]
    20b2:	429a      	cmp	r2, r3
    20b4:	d10b      	bne.n	20ce <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    20b6:	7b7b      	ldrb	r3, [r7, #13]
    20b8:	4a12      	ldr	r2, [pc, #72]	; (2104 <process_ext_irq+0x80>)
    20ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20be:	2b00      	cmp	r3, #0
    20c0:	d01b      	beq.n	20fa <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    20c2:	7b7b      	ldrb	r3, [r7, #13]
    20c4:	4a0f      	ldr	r2, [pc, #60]	; (2104 <process_ext_irq+0x80>)
    20c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20ca:	4798      	blx	r3
			}
			return;
    20cc:	e015      	b.n	20fa <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    20ce:	7b7b      	ldrb	r3, [r7, #13]
    20d0:	4a0c      	ldr	r2, [pc, #48]	; (2104 <process_ext_irq+0x80>)
    20d2:	00db      	lsls	r3, r3, #3
    20d4:	4413      	add	r3, r2
    20d6:	685a      	ldr	r2, [r3, #4]
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	429a      	cmp	r2, r3
    20dc:	d203      	bcs.n	20e6 <process_ext_irq+0x62>
			lower = middle + 1;
    20de:	7b7b      	ldrb	r3, [r7, #13]
    20e0:	3301      	adds	r3, #1
    20e2:	73fb      	strb	r3, [r7, #15]
    20e4:	e002      	b.n	20ec <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    20e6:	7b7b      	ldrb	r3, [r7, #13]
    20e8:	3b01      	subs	r3, #1
    20ea:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    20ec:	7bba      	ldrb	r2, [r7, #14]
    20ee:	7bfb      	ldrb	r3, [r7, #15]
    20f0:	429a      	cmp	r2, r3
    20f2:	d2d0      	bcs.n	2096 <process_ext_irq+0x12>
    20f4:	e002      	b.n	20fc <process_ext_irq+0x78>
			return;
    20f6:	bf00      	nop
    20f8:	e000      	b.n	20fc <process_ext_irq+0x78>
			return;
    20fa:	bf00      	nop
		}
	}
}
    20fc:	3710      	adds	r7, #16
    20fe:	46bd      	mov	sp, r7
    2100:	bd80      	pop	{r7, pc}
    2102:	bf00      	nop
    2104:	20000590 	.word	0x20000590

00002108 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2108:	b580      	push	{r7, lr}
    210a:	b084      	sub	sp, #16
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	885b      	ldrh	r3, [r3, #2]
    2118:	b29b      	uxth	r3, r3
    211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    211e:	2b00      	cmp	r3, #0
    2120:	d107      	bne.n	2132 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    2122:	68fb      	ldr	r3, [r7, #12]
    2124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2126:	2b00      	cmp	r3, #0
    2128:	d003      	beq.n	2132 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    212a:	68fb      	ldr	r3, [r7, #12]
    212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    212e:	68f8      	ldr	r0, [r7, #12]
    2130:	4798      	blx	r3
		}
	}
}
    2132:	bf00      	nop
    2134:	3710      	adds	r7, #16
    2136:	46bd      	mov	sp, r7
    2138:	bd80      	pop	{r7, pc}

0000213a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    213a:	b580      	push	{r7, lr}
    213c:	b084      	sub	sp, #16
    213e:	af00      	add	r7, sp, #0
    2140:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	885b      	ldrh	r3, [r3, #2]
    214a:	b29b      	uxth	r3, r3
    214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2150:	2b00      	cmp	r3, #0
    2152:	d107      	bne.n	2164 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    2154:	68fb      	ldr	r3, [r7, #12]
    2156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2158:	2b00      	cmp	r3, #0
    215a:	d003      	beq.n	2164 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    215c:	68fb      	ldr	r3, [r7, #12]
    215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2160:	68f8      	ldr	r0, [r7, #12]
    2162:	4798      	blx	r3
		}
	}
}
    2164:	bf00      	nop
    2166:	3710      	adds	r7, #16
    2168:	46bd      	mov	sp, r7
    216a:	bd80      	pop	{r7, pc}

0000216c <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    216c:	b580      	push	{r7, lr}
    216e:	b084      	sub	sp, #16
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
    2174:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	885b      	ldrh	r3, [r3, #2]
    217e:	b29b      	uxth	r3, r3
    2180:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2184:	2b00      	cmp	r3, #0
    2186:	d108      	bne.n	219a <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2188:	68fb      	ldr	r3, [r7, #12]
    218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    218c:	2b00      	cmp	r3, #0
    218e:	d004      	beq.n	219a <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2190:	68fb      	ldr	r3, [r7, #12]
    2192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2194:	6839      	ldr	r1, [r7, #0]
    2196:	68f8      	ldr	r0, [r7, #12]
    2198:	4798      	blx	r3
		}
	}
}
    219a:	bf00      	nop
    219c:	3710      	adds	r7, #16
    219e:	46bd      	mov	sp, r7
    21a0:	bd80      	pop	{r7, pc}
	...

000021a4 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b08a      	sub	sp, #40	; 0x28
    21a8:	af00      	add	r7, sp, #0
    21aa:	60f8      	str	r0, [r7, #12]
    21ac:	60b9      	str	r1, [r7, #8]
    21ae:	4613      	mov	r3, r2
    21b0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	3b28      	subs	r3, #40	; 0x28
    21b6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    21b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    21bc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    21be:	88fb      	ldrh	r3, [r7, #6]
    21c0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    21c2:	f248 0301 	movw	r3, #32769	; 0x8001
    21c6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    21c8:	68bb      	ldr	r3, [r7, #8]
    21ca:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    21cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21ce:	f107 0214 	add.w	r2, r7, #20
    21d2:	4611      	mov	r1, r2
    21d4:	4618      	mov	r0, r3
    21d6:	4b06      	ldr	r3, [pc, #24]	; (21f0 <i2c_m_async_read+0x4c>)
    21d8:	4798      	blx	r3
    21da:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    21dc:	6a3b      	ldr	r3, [r7, #32]
    21de:	2b00      	cmp	r3, #0
    21e0:	d001      	beq.n	21e6 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    21e2:	6a3b      	ldr	r3, [r7, #32]
    21e4:	e000      	b.n	21e8 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    21e6:	88fb      	ldrh	r3, [r7, #6]
}
    21e8:	4618      	mov	r0, r3
    21ea:	3728      	adds	r7, #40	; 0x28
    21ec:	46bd      	mov	sp, r7
    21ee:	bd80      	pop	{r7, pc}
    21f0:	000069b1 	.word	0x000069b1

000021f4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    21f4:	b580      	push	{r7, lr}
    21f6:	b08a      	sub	sp, #40	; 0x28
    21f8:	af00      	add	r7, sp, #0
    21fa:	60f8      	str	r0, [r7, #12]
    21fc:	60b9      	str	r1, [r7, #8]
    21fe:	4613      	mov	r3, r2
    2200:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2202:	68fb      	ldr	r3, [r7, #12]
    2204:	3b28      	subs	r3, #40	; 0x28
    2206:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    220a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    220c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    220e:	88fb      	ldrh	r3, [r7, #6]
    2210:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2216:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2218:	68bb      	ldr	r3, [r7, #8]
    221a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    221e:	f107 0214 	add.w	r2, r7, #20
    2222:	4611      	mov	r1, r2
    2224:	4618      	mov	r0, r3
    2226:	4b06      	ldr	r3, [pc, #24]	; (2240 <i2c_m_async_write+0x4c>)
    2228:	4798      	blx	r3
    222a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    222c:	6a3b      	ldr	r3, [r7, #32]
    222e:	2b00      	cmp	r3, #0
    2230:	d001      	beq.n	2236 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2232:	6a3b      	ldr	r3, [r7, #32]
    2234:	e000      	b.n	2238 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    2236:	88fb      	ldrh	r3, [r7, #6]
}
    2238:	4618      	mov	r0, r3
    223a:	3728      	adds	r7, #40	; 0x28
    223c:	46bd      	mov	sp, r7
    223e:	bd80      	pop	{r7, pc}
    2240:	000069b1 	.word	0x000069b1

00002244 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    2244:	b580      	push	{r7, lr}
    2246:	b084      	sub	sp, #16
    2248:	af00      	add	r7, sp, #0
    224a:	6078      	str	r0, [r7, #4]
    224c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	2b00      	cmp	r3, #0
    2252:	bf14      	ite	ne
    2254:	2301      	movne	r3, #1
    2256:	2300      	moveq	r3, #0
    2258:	b2db      	uxtb	r3, r3
    225a:	2289      	movs	r2, #137	; 0x89
    225c:	4915      	ldr	r1, [pc, #84]	; (22b4 <i2c_m_async_init+0x70>)
    225e:	4618      	mov	r0, r3
    2260:	4b15      	ldr	r3, [pc, #84]	; (22b8 <i2c_m_async_init+0x74>)
    2262:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	6839      	ldr	r1, [r7, #0]
    2268:	4618      	mov	r0, r3
    226a:	4b14      	ldr	r3, [pc, #80]	; (22bc <i2c_m_async_init+0x78>)
    226c:	4798      	blx	r3
    226e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2270:	68fb      	ldr	r3, [r7, #12]
    2272:	2b00      	cmp	r3, #0
    2274:	d001      	beq.n	227a <i2c_m_async_init+0x36>
		return init_status;
    2276:	68fb      	ldr	r3, [r7, #12]
    2278:	e018      	b.n	22ac <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	4a10      	ldr	r2, [pc, #64]	; (22c0 <i2c_m_async_init+0x7c>)
    227e:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	4a10      	ldr	r2, [pc, #64]	; (22c4 <i2c_m_async_init+0x80>)
    2284:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    2286:	687b      	ldr	r3, [r7, #4]
    2288:	4a0f      	ldr	r2, [pc, #60]	; (22c8 <i2c_m_async_init+0x84>)
    228a:	2101      	movs	r1, #1
    228c:	4618      	mov	r0, r3
    228e:	4b0f      	ldr	r3, [pc, #60]	; (22cc <i2c_m_async_init+0x88>)
    2290:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	4a0e      	ldr	r2, [pc, #56]	; (22d0 <i2c_m_async_init+0x8c>)
    2296:	2102      	movs	r1, #2
    2298:	4618      	mov	r0, r3
    229a:	4b0c      	ldr	r3, [pc, #48]	; (22cc <i2c_m_async_init+0x88>)
    229c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	4a0c      	ldr	r2, [pc, #48]	; (22d4 <i2c_m_async_init+0x90>)
    22a2:	2100      	movs	r1, #0
    22a4:	4618      	mov	r0, r3
    22a6:	4b09      	ldr	r3, [pc, #36]	; (22cc <i2c_m_async_init+0x88>)
    22a8:	4798      	blx	r3

	return ERR_NONE;
    22aa:	2300      	movs	r3, #0
}
    22ac:	4618      	mov	r0, r3
    22ae:	3710      	adds	r7, #16
    22b0:	46bd      	mov	sp, r7
    22b2:	bd80      	pop	{r7, pc}
    22b4:	0000ee18 	.word	0x0000ee18
    22b8:	000038fd 	.word	0x000038fd
    22bc:	00006801 	.word	0x00006801
    22c0:	000021a5 	.word	0x000021a5
    22c4:	000021f5 	.word	0x000021f5
    22c8:	00002109 	.word	0x00002109
    22cc:	00006a85 	.word	0x00006a85
    22d0:	0000213b 	.word	0x0000213b
    22d4:	0000216d 	.word	0x0000216d

000022d8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    22d8:	b580      	push	{r7, lr}
    22da:	b084      	sub	sp, #16
    22dc:	af00      	add	r7, sp, #0
    22de:	60f8      	str	r0, [r7, #12]
    22e0:	60b9      	str	r1, [r7, #8]
    22e2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d004      	beq.n	22f4 <pwm_init+0x1c>
    22ea:	68bb      	ldr	r3, [r7, #8]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d001      	beq.n	22f4 <pwm_init+0x1c>
    22f0:	2301      	movs	r3, #1
    22f2:	e000      	b.n	22f6 <pwm_init+0x1e>
    22f4:	2300      	movs	r3, #0
    22f6:	f003 0301 	and.w	r3, r3, #1
    22fa:	b2db      	uxtb	r3, r3
    22fc:	2233      	movs	r2, #51	; 0x33
    22fe:	490a      	ldr	r1, [pc, #40]	; (2328 <pwm_init+0x50>)
    2300:	4618      	mov	r0, r3
    2302:	4b0a      	ldr	r3, [pc, #40]	; (232c <pwm_init+0x54>)
    2304:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2306:	68fb      	ldr	r3, [r7, #12]
    2308:	68b9      	ldr	r1, [r7, #8]
    230a:	4618      	mov	r0, r3
    230c:	4b08      	ldr	r3, [pc, #32]	; (2330 <pwm_init+0x58>)
    230e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2310:	68fb      	ldr	r3, [r7, #12]
    2312:	4a08      	ldr	r2, [pc, #32]	; (2334 <pwm_init+0x5c>)
    2314:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2316:	68fb      	ldr	r3, [r7, #12]
    2318:	4a07      	ldr	r2, [pc, #28]	; (2338 <pwm_init+0x60>)
    231a:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    231c:	2300      	movs	r3, #0
}
    231e:	4618      	mov	r0, r3
    2320:	3710      	adds	r7, #16
    2322:	46bd      	mov	sp, r7
    2324:	bd80      	pop	{r7, pc}
    2326:	bf00      	nop
    2328:	0000ee38 	.word	0x0000ee38
    232c:	000038fd 	.word	0x000038fd
    2330:	00007d3d 	.word	0x00007d3d
    2334:	00002391 	.word	0x00002391
    2338:	000023b5 	.word	0x000023b5

0000233c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    233c:	b580      	push	{r7, lr}
    233e:	b082      	sub	sp, #8
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	2b00      	cmp	r3, #0
    2348:	bf14      	ite	ne
    234a:	2301      	movne	r3, #1
    234c:	2300      	moveq	r3, #0
    234e:	b2db      	uxtb	r3, r3
    2350:	224a      	movs	r2, #74	; 0x4a
    2352:	490b      	ldr	r1, [pc, #44]	; (2380 <pwm_enable+0x44>)
    2354:	4618      	mov	r0, r3
    2356:	4b0b      	ldr	r3, [pc, #44]	; (2384 <pwm_enable+0x48>)
    2358:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	4618      	mov	r0, r3
    235e:	4b0a      	ldr	r3, [pc, #40]	; (2388 <pwm_enable+0x4c>)
    2360:	4798      	blx	r3
    2362:	4603      	mov	r3, r0
    2364:	2b00      	cmp	r3, #0
    2366:	d002      	beq.n	236e <pwm_enable+0x32>
		return ERR_DENIED;
    2368:	f06f 0310 	mvn.w	r3, #16
    236c:	e004      	b.n	2378 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	4618      	mov	r0, r3
    2372:	4b06      	ldr	r3, [pc, #24]	; (238c <pwm_enable+0x50>)
    2374:	4798      	blx	r3

	return ERR_NONE;
    2376:	2300      	movs	r3, #0
}
    2378:	4618      	mov	r0, r3
    237a:	3708      	adds	r7, #8
    237c:	46bd      	mov	sp, r7
    237e:	bd80      	pop	{r7, pc}
    2380:	0000ee38 	.word	0x0000ee38
    2384:	000038fd 	.word	0x000038fd
    2388:	00007fd9 	.word	0x00007fd9
    238c:	00007f79 	.word	0x00007f79

00002390 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2390:	b580      	push	{r7, lr}
    2392:	b084      	sub	sp, #16
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    239c:	68fb      	ldr	r3, [r7, #12]
    239e:	695b      	ldr	r3, [r3, #20]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d003      	beq.n	23ac <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    23a4:	68fb      	ldr	r3, [r7, #12]
    23a6:	695b      	ldr	r3, [r3, #20]
    23a8:	68f8      	ldr	r0, [r7, #12]
    23aa:	4798      	blx	r3
	}
}
    23ac:	bf00      	nop
    23ae:	3710      	adds	r7, #16
    23b0:	46bd      	mov	sp, r7
    23b2:	bd80      	pop	{r7, pc}

000023b4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b084      	sub	sp, #16
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    23c0:	68fb      	ldr	r3, [r7, #12]
    23c2:	699b      	ldr	r3, [r3, #24]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d003      	beq.n	23d0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    23c8:	68fb      	ldr	r3, [r7, #12]
    23ca:	699b      	ldr	r3, [r3, #24]
    23cc:	68f8      	ldr	r0, [r7, #12]
    23ce:	4798      	blx	r3
	}
}
    23d0:	bf00      	nop
    23d2:	3710      	adds	r7, #16
    23d4:	46bd      	mov	sp, r7
    23d6:	bd80      	pop	{r7, pc}

000023d8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    23d8:	b580      	push	{r7, lr}
    23da:	b082      	sub	sp, #8
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
    23e0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d004      	beq.n	23f2 <qspi_sync_init+0x1a>
    23e8:	683b      	ldr	r3, [r7, #0]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d001      	beq.n	23f2 <qspi_sync_init+0x1a>
    23ee:	2301      	movs	r3, #1
    23f0:	e000      	b.n	23f4 <qspi_sync_init+0x1c>
    23f2:	2300      	movs	r3, #0
    23f4:	f003 0301 	and.w	r3, r3, #1
    23f8:	b2db      	uxtb	r3, r3
    23fa:	2231      	movs	r2, #49	; 0x31
    23fc:	4906      	ldr	r1, [pc, #24]	; (2418 <qspi_sync_init+0x40>)
    23fe:	4618      	mov	r0, r3
    2400:	4b06      	ldr	r3, [pc, #24]	; (241c <qspi_sync_init+0x44>)
    2402:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	6839      	ldr	r1, [r7, #0]
    2408:	4618      	mov	r0, r3
    240a:	4b05      	ldr	r3, [pc, #20]	; (2420 <qspi_sync_init+0x48>)
    240c:	4798      	blx	r3
    240e:	4603      	mov	r3, r0
}
    2410:	4618      	mov	r0, r3
    2412:	3708      	adds	r7, #8
    2414:	46bd      	mov	sp, r7
    2416:	bd80      	pop	{r7, pc}
    2418:	0000ee50 	.word	0x0000ee50
    241c:	000038fd 	.word	0x000038fd
    2420:	00005729 	.word	0x00005729

00002424 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2424:	b580      	push	{r7, lr}
    2426:	b082      	sub	sp, #8
    2428:	af00      	add	r7, sp, #0
    242a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	2b00      	cmp	r3, #0
    2430:	bf14      	ite	ne
    2432:	2301      	movne	r3, #1
    2434:	2300      	moveq	r3, #0
    2436:	b2db      	uxtb	r3, r3
    2438:	223f      	movs	r2, #63	; 0x3f
    243a:	4906      	ldr	r1, [pc, #24]	; (2454 <qspi_sync_enable+0x30>)
    243c:	4618      	mov	r0, r3
    243e:	4b06      	ldr	r3, [pc, #24]	; (2458 <qspi_sync_enable+0x34>)
    2440:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	4618      	mov	r0, r3
    2446:	4b05      	ldr	r3, [pc, #20]	; (245c <qspi_sync_enable+0x38>)
    2448:	4798      	blx	r3
    244a:	4603      	mov	r3, r0
}
    244c:	4618      	mov	r0, r3
    244e:	3708      	adds	r7, #8
    2450:	46bd      	mov	sp, r7
    2452:	bd80      	pop	{r7, pc}
    2454:	0000ee50 	.word	0x0000ee50
    2458:	000038fd 	.word	0x000038fd
    245c:	0000579d 	.word	0x0000579d

00002460 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2460:	b580      	push	{r7, lr}
    2462:	b082      	sub	sp, #8
    2464:	af00      	add	r7, sp, #0
    2466:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	2b00      	cmp	r3, #0
    246c:	bf14      	ite	ne
    246e:	2301      	movne	r3, #1
    2470:	2300      	moveq	r3, #0
    2472:	b2db      	uxtb	r3, r3
    2474:	2246      	movs	r2, #70	; 0x46
    2476:	4906      	ldr	r1, [pc, #24]	; (2490 <qspi_sync_disable+0x30>)
    2478:	4618      	mov	r0, r3
    247a:	4b06      	ldr	r3, [pc, #24]	; (2494 <qspi_sync_disable+0x34>)
    247c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	4618      	mov	r0, r3
    2482:	4b05      	ldr	r3, [pc, #20]	; (2498 <qspi_sync_disable+0x38>)
    2484:	4798      	blx	r3
    2486:	4603      	mov	r3, r0
}
    2488:	4618      	mov	r0, r3
    248a:	3708      	adds	r7, #8
    248c:	46bd      	mov	sp, r7
    248e:	bd80      	pop	{r7, pc}
    2490:	0000ee50 	.word	0x0000ee50
    2494:	000038fd 	.word	0x000038fd
    2498:	000057c1 	.word	0x000057c1

0000249c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    249c:	b580      	push	{r7, lr}
    249e:	b082      	sub	sp, #8
    24a0:	af00      	add	r7, sp, #0
    24a2:	6078      	str	r0, [r7, #4]
    24a4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d004      	beq.n	24b6 <qspi_sync_serial_run_command+0x1a>
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d001      	beq.n	24b6 <qspi_sync_serial_run_command+0x1a>
    24b2:	2301      	movs	r3, #1
    24b4:	e000      	b.n	24b8 <qspi_sync_serial_run_command+0x1c>
    24b6:	2300      	movs	r3, #0
    24b8:	f003 0301 	and.w	r3, r3, #1
    24bc:	b2db      	uxtb	r3, r3
    24be:	224d      	movs	r2, #77	; 0x4d
    24c0:	4906      	ldr	r1, [pc, #24]	; (24dc <qspi_sync_serial_run_command+0x40>)
    24c2:	4618      	mov	r0, r3
    24c4:	4b06      	ldr	r3, [pc, #24]	; (24e0 <qspi_sync_serial_run_command+0x44>)
    24c6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	6839      	ldr	r1, [r7, #0]
    24cc:	4618      	mov	r0, r3
    24ce:	4b05      	ldr	r3, [pc, #20]	; (24e4 <qspi_sync_serial_run_command+0x48>)
    24d0:	4798      	blx	r3
    24d2:	4603      	mov	r3, r0
}
    24d4:	4618      	mov	r0, r3
    24d6:	3708      	adds	r7, #8
    24d8:	46bd      	mov	sp, r7
    24da:	bd80      	pop	{r7, pc}
    24dc:	0000ee50 	.word	0x0000ee50
    24e0:	000038fd 	.word	0x000038fd
    24e4:	0000590d 	.word	0x0000590d

000024e8 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	b084      	sub	sp, #16
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	3b04      	subs	r3, #4
    24f4:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	791b      	ldrb	r3, [r3, #4]
    24fa:	2b01      	cmp	r3, #1
    24fc:	d80e      	bhi.n	251c <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    24fe:	68fb      	ldr	r3, [r7, #12]
    2500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2502:	68fb      	ldr	r3, [r7, #12]
    2504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2506:	1c58      	adds	r0, r3, #1
    2508:	68f9      	ldr	r1, [r7, #12]
    250a:	6448      	str	r0, [r1, #68]	; 0x44
    250c:	4413      	add	r3, r2
    250e:	781b      	ldrb	r3, [r3, #0]
    2510:	b29b      	uxth	r3, r3
    2512:	4619      	mov	r1, r3
    2514:	6878      	ldr	r0, [r7, #4]
    2516:	4b11      	ldr	r3, [pc, #68]	; (255c <_spi_dev_tx+0x74>)
    2518:	4798      	blx	r3
    251a:	e00d      	b.n	2538 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    251c:	68fb      	ldr	r3, [r7, #12]
    251e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2520:	68fb      	ldr	r3, [r7, #12]
    2522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2524:	1c58      	adds	r0, r3, #1
    2526:	68f9      	ldr	r1, [r7, #12]
    2528:	6448      	str	r0, [r1, #68]	; 0x44
    252a:	005b      	lsls	r3, r3, #1
    252c:	4413      	add	r3, r2
    252e:	881b      	ldrh	r3, [r3, #0]
    2530:	4619      	mov	r1, r3
    2532:	6878      	ldr	r0, [r7, #4]
    2534:	4b09      	ldr	r3, [pc, #36]	; (255c <_spi_dev_tx+0x74>)
    2536:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    2538:	68fb      	ldr	r3, [r7, #12]
    253a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    253c:	68fb      	ldr	r3, [r7, #12]
    253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2540:	429a      	cmp	r2, r3
    2542:	d107      	bne.n	2554 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    2544:	2100      	movs	r1, #0
    2546:	6878      	ldr	r0, [r7, #4]
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <_spi_dev_tx+0x78>)
    254a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    254c:	2101      	movs	r1, #1
    254e:	6878      	ldr	r0, [r7, #4]
    2550:	4b04      	ldr	r3, [pc, #16]	; (2564 <_spi_dev_tx+0x7c>)
    2552:	4798      	blx	r3
	}
}
    2554:	bf00      	nop
    2556:	3710      	adds	r7, #16
    2558:	46bd      	mov	sp, r7
    255a:	bd80      	pop	{r7, pc}
    255c:	000075ed 	.word	0x000075ed
    2560:	000074b1 	.word	0x000074b1
    2564:	00007585 	.word	0x00007585

00002568 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    2568:	b590      	push	{r4, r7, lr}
    256a:	b085      	sub	sp, #20
    256c:	af00      	add	r7, sp, #0
    256e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	3b04      	subs	r3, #4
    2574:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    2576:	68fb      	ldr	r3, [r7, #12]
    2578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    257a:	2b00      	cmp	r3, #0
    257c:	d021      	beq.n	25c2 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	791b      	ldrb	r3, [r3, #4]
    2582:	2b01      	cmp	r3, #1
    2584:	d80e      	bhi.n	25a4 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    2586:	68fb      	ldr	r3, [r7, #12]
    2588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    258a:	68fb      	ldr	r3, [r7, #12]
    258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    258e:	1c58      	adds	r0, r3, #1
    2590:	68f9      	ldr	r1, [r7, #12]
    2592:	6448      	str	r0, [r1, #68]	; 0x44
    2594:	18d4      	adds	r4, r2, r3
    2596:	6878      	ldr	r0, [r7, #4]
    2598:	4b2e      	ldr	r3, [pc, #184]	; (2654 <_spi_dev_rx+0xec>)
    259a:	4798      	blx	r3
    259c:	4603      	mov	r3, r0
    259e:	b2db      	uxtb	r3, r3
    25a0:	7023      	strb	r3, [r4, #0]
    25a2:	e016      	b.n	25d2 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    25a4:	68fb      	ldr	r3, [r7, #12]
    25a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    25a8:	68fb      	ldr	r3, [r7, #12]
    25aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25ac:	1c58      	adds	r0, r3, #1
    25ae:	68f9      	ldr	r1, [r7, #12]
    25b0:	6448      	str	r0, [r1, #68]	; 0x44
    25b2:	005b      	lsls	r3, r3, #1
    25b4:	18d4      	adds	r4, r2, r3
    25b6:	6878      	ldr	r0, [r7, #4]
    25b8:	4b26      	ldr	r3, [pc, #152]	; (2654 <_spi_dev_rx+0xec>)
    25ba:	4798      	blx	r3
    25bc:	4603      	mov	r3, r0
    25be:	8023      	strh	r3, [r4, #0]
    25c0:	e007      	b.n	25d2 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    25c2:	6878      	ldr	r0, [r7, #4]
    25c4:	4b23      	ldr	r3, [pc, #140]	; (2654 <_spi_dev_rx+0xec>)
    25c6:	4798      	blx	r3
		spi->xfercnt++;
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25cc:	1c5a      	adds	r2, r3, #1
    25ce:	68fb      	ldr	r3, [r7, #12]
    25d0:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    25d2:	68fb      	ldr	r3, [r7, #12]
    25d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    25d6:	68fb      	ldr	r3, [r7, #12]
    25d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25da:	429a      	cmp	r2, r3
    25dc:	d226      	bcs.n	262c <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    25e2:	2b00      	cmp	r3, #0
    25e4:	d01b      	beq.n	261e <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    25e6:	687b      	ldr	r3, [r7, #4]
    25e8:	791b      	ldrb	r3, [r3, #4]
    25ea:	2b01      	cmp	r3, #1
    25ec:	d80b      	bhi.n	2606 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    25ee:	68fb      	ldr	r3, [r7, #12]
    25f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    25f2:	68fb      	ldr	r3, [r7, #12]
    25f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25f6:	4413      	add	r3, r2
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	b29b      	uxth	r3, r3
    25fc:	4619      	mov	r1, r3
    25fe:	6878      	ldr	r0, [r7, #4]
    2600:	4b15      	ldr	r3, [pc, #84]	; (2658 <_spi_dev_rx+0xf0>)
    2602:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    2604:	e022      	b.n	264c <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    260a:	68fb      	ldr	r3, [r7, #12]
    260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    260e:	005b      	lsls	r3, r3, #1
    2610:	4413      	add	r3, r2
    2612:	881b      	ldrh	r3, [r3, #0]
    2614:	4619      	mov	r1, r3
    2616:	6878      	ldr	r0, [r7, #4]
    2618:	4b0f      	ldr	r3, [pc, #60]	; (2658 <_spi_dev_rx+0xf0>)
    261a:	4798      	blx	r3
}
    261c:	e016      	b.n	264c <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	88db      	ldrh	r3, [r3, #6]
    2622:	4619      	mov	r1, r3
    2624:	6878      	ldr	r0, [r7, #4]
    2626:	4b0c      	ldr	r3, [pc, #48]	; (2658 <_spi_dev_rx+0xf0>)
    2628:	4798      	blx	r3
}
    262a:	e00f      	b.n	264c <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    262c:	2100      	movs	r1, #0
    262e:	6878      	ldr	r0, [r7, #4]
    2630:	4b0a      	ldr	r3, [pc, #40]	; (265c <_spi_dev_rx+0xf4>)
    2632:	4798      	blx	r3
		spi->stat = 0;
    2634:	68fb      	ldr	r3, [r7, #12]
    2636:	2200      	movs	r2, #0
    2638:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    263c:	68fb      	ldr	r3, [r7, #12]
    263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2640:	2b00      	cmp	r3, #0
    2642:	d003      	beq.n	264c <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2648:	68f8      	ldr	r0, [r7, #12]
    264a:	4798      	blx	r3
}
    264c:	bf00      	nop
    264e:	3714      	adds	r7, #20
    2650:	46bd      	mov	sp, r7
    2652:	bd90      	pop	{r4, r7, pc}
    2654:	00007645 	.word	0x00007645
    2658:	000075ed 	.word	0x000075ed
    265c:	00007515 	.word	0x00007515

00002660 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2660:	b580      	push	{r7, lr}
    2662:	b084      	sub	sp, #16
    2664:	af00      	add	r7, sp, #0
    2666:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	3b04      	subs	r3, #4
    266c:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    266e:	68fb      	ldr	r3, [r7, #12]
    2670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2672:	68fb      	ldr	r3, [r7, #12]
    2674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2676:	429a      	cmp	r2, r3
    2678:	d30f      	bcc.n	269a <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    267a:	2100      	movs	r1, #0
    267c:	6878      	ldr	r0, [r7, #4]
    267e:	4b09      	ldr	r3, [pc, #36]	; (26a4 <_spi_dev_complete+0x44>)
    2680:	4798      	blx	r3
		spi->stat = 0;
    2682:	68fb      	ldr	r3, [r7, #12]
    2684:	2200      	movs	r2, #0
    2686:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    268a:	68fb      	ldr	r3, [r7, #12]
    268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    268e:	2b00      	cmp	r3, #0
    2690:	d003      	beq.n	269a <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2696:	68f8      	ldr	r0, [r7, #12]
    2698:	4798      	blx	r3
		}
	}
}
    269a:	bf00      	nop
    269c:	3710      	adds	r7, #16
    269e:	46bd      	mov	sp, r7
    26a0:	bd80      	pop	{r7, pc}
    26a2:	bf00      	nop
    26a4:	00007585 	.word	0x00007585

000026a8 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    26a8:	b580      	push	{r7, lr}
    26aa:	b084      	sub	sp, #16
    26ac:	af00      	add	r7, sp, #0
    26ae:	6078      	str	r0, [r7, #4]
    26b0:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	3b04      	subs	r3, #4
    26b6:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    26b8:	2100      	movs	r1, #0
    26ba:	6878      	ldr	r0, [r7, #4]
    26bc:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <_spi_dev_error+0x4c>)
    26be:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    26c0:	2100      	movs	r1, #0
    26c2:	6878      	ldr	r0, [r7, #4]
    26c4:	4b0c      	ldr	r3, [pc, #48]	; (26f8 <_spi_dev_error+0x50>)
    26c6:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    26c8:	2100      	movs	r1, #0
    26ca:	6878      	ldr	r0, [r7, #4]
    26cc:	4b0b      	ldr	r3, [pc, #44]	; (26fc <_spi_dev_error+0x54>)
    26ce:	4798      	blx	r3
	spi->stat = 0;
    26d0:	68fb      	ldr	r3, [r7, #12]
    26d2:	2200      	movs	r2, #0
    26d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    26d8:	68fb      	ldr	r3, [r7, #12]
    26da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26dc:	2b00      	cmp	r3, #0
    26de:	d004      	beq.n	26ea <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    26e0:	68fb      	ldr	r3, [r7, #12]
    26e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26e4:	6839      	ldr	r1, [r7, #0]
    26e6:	68f8      	ldr	r0, [r7, #12]
    26e8:	4798      	blx	r3
	}
}
    26ea:	bf00      	nop
    26ec:	3710      	adds	r7, #16
    26ee:	46bd      	mov	sp, r7
    26f0:	bd80      	pop	{r7, pc}
    26f2:	bf00      	nop
    26f4:	000074b1 	.word	0x000074b1
    26f8:	00007515 	.word	0x00007515
    26fc:	00007585 	.word	0x00007585

00002700 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    2700:	b580      	push	{r7, lr}
    2702:	b084      	sub	sp, #16
    2704:	af00      	add	r7, sp, #0
    2706:	6078      	str	r0, [r7, #4]
    2708:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    270a:	2300      	movs	r3, #0
    270c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2b00      	cmp	r3, #0
    2712:	d004      	beq.n	271e <spi_m_async_init+0x1e>
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	2b00      	cmp	r3, #0
    2718:	d001      	beq.n	271e <spi_m_async_init+0x1e>
    271a:	2301      	movs	r3, #1
    271c:	e000      	b.n	2720 <spi_m_async_init+0x20>
    271e:	2300      	movs	r3, #0
    2720:	f003 0301 	and.w	r3, r3, #1
    2724:	b2db      	uxtb	r3, r3
    2726:	22a5      	movs	r2, #165	; 0xa5
    2728:	491c      	ldr	r1, [pc, #112]	; (279c <spi_m_async_init+0x9c>)
    272a:	4618      	mov	r0, r3
    272c:	4b1c      	ldr	r3, [pc, #112]	; (27a0 <spi_m_async_init+0xa0>)
    272e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	683a      	ldr	r2, [r7, #0]
    2734:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	3304      	adds	r3, #4
    273a:	6839      	ldr	r1, [r7, #0]
    273c:	4618      	mov	r0, r3
    273e:	4b19      	ldr	r3, [pc, #100]	; (27a4 <spi_m_async_init+0xa4>)
    2740:	4798      	blx	r3
    2742:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    2744:	68fb      	ldr	r3, [r7, #12]
    2746:	2b00      	cmp	r3, #0
    2748:	db23      	blt.n	2792 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	3304      	adds	r3, #4
    274e:	4a16      	ldr	r2, [pc, #88]	; (27a8 <spi_m_async_init+0xa8>)
    2750:	2100      	movs	r1, #0
    2752:	4618      	mov	r0, r3
    2754:	4b15      	ldr	r3, [pc, #84]	; (27ac <spi_m_async_init+0xac>)
    2756:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	3304      	adds	r3, #4
    275c:	4a14      	ldr	r2, [pc, #80]	; (27b0 <spi_m_async_init+0xb0>)
    275e:	2101      	movs	r1, #1
    2760:	4618      	mov	r0, r3
    2762:	4b12      	ldr	r3, [pc, #72]	; (27ac <spi_m_async_init+0xac>)
    2764:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	3304      	adds	r3, #4
    276a:	4a12      	ldr	r2, [pc, #72]	; (27b4 <spi_m_async_init+0xb4>)
    276c:	2102      	movs	r1, #2
    276e:	4618      	mov	r0, r3
    2770:	4b0e      	ldr	r3, [pc, #56]	; (27ac <spi_m_async_init+0xac>)
    2772:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	3304      	adds	r3, #4
    2778:	4a0f      	ldr	r2, [pc, #60]	; (27b8 <spi_m_async_init+0xb8>)
    277a:	2103      	movs	r1, #3
    277c:	4618      	mov	r0, r3
    277e:	4b0b      	ldr	r3, [pc, #44]	; (27ac <spi_m_async_init+0xac>)
    2780:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	4a0d      	ldr	r2, [pc, #52]	; (27bc <spi_m_async_init+0xbc>)
    2786:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	4a0d      	ldr	r2, [pc, #52]	; (27c0 <spi_m_async_init+0xc0>)
    278c:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    278e:	2300      	movs	r3, #0
    2790:	e000      	b.n	2794 <spi_m_async_init+0x94>
		return rc;
    2792:	68fb      	ldr	r3, [r7, #12]
}
    2794:	4618      	mov	r0, r3
    2796:	3710      	adds	r7, #16
    2798:	46bd      	mov	sp, r7
    279a:	bd80      	pop	{r7, pc}
    279c:	0000ee6c 	.word	0x0000ee6c
    27a0:	000038fd 	.word	0x000038fd
    27a4:	00007111 	.word	0x00007111
    27a8:	000024e9 	.word	0x000024e9
    27ac:	00007695 	.word	0x00007695
    27b0:	00002569 	.word	0x00002569
    27b4:	00002661 	.word	0x00002661
    27b8:	000026a9 	.word	0x000026a9
    27bc:	000027c5 	.word	0x000027c5
    27c0:	00002845 	.word	0x00002845

000027c4 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    27c4:	b580      	push	{r7, lr}
    27c6:	b086      	sub	sp, #24
    27c8:	af00      	add	r7, sp, #0
    27ca:	60f8      	str	r0, [r7, #12]
    27cc:	60b9      	str	r1, [r7, #8]
    27ce:	4613      	mov	r3, r2
    27d0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    27d2:	68fb      	ldr	r3, [r7, #12]
    27d4:	2b00      	cmp	r3, #0
    27d6:	bf14      	ite	ne
    27d8:	2301      	movne	r3, #1
    27da:	2300      	moveq	r3, #0
    27dc:	b2db      	uxtb	r3, r3
    27de:	f240 1205 	movw	r2, #261	; 0x105
    27e2:	4914      	ldr	r1, [pc, #80]	; (2834 <_spi_m_async_io_read+0x70>)
    27e4:	4618      	mov	r0, r3
    27e6:	4b14      	ldr	r3, [pc, #80]	; (2838 <_spi_m_async_io_read+0x74>)
    27e8:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    27ea:	68fb      	ldr	r3, [r7, #12]
    27ec:	3b24      	subs	r3, #36	; 0x24
    27ee:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    27f0:	697b      	ldr	r3, [r7, #20]
    27f2:	68ba      	ldr	r2, [r7, #8]
    27f4:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    27f6:	697b      	ldr	r3, [r7, #20]
    27f8:	2200      	movs	r2, #0
    27fa:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    27fc:	88fa      	ldrh	r2, [r7, #6]
    27fe:	697b      	ldr	r3, [r7, #20]
    2800:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2802:	697b      	ldr	r3, [r7, #20]
    2804:	2200      	movs	r2, #0
    2806:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2808:	697b      	ldr	r3, [r7, #20]
    280a:	2210      	movs	r2, #16
    280c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2810:	697b      	ldr	r3, [r7, #20]
    2812:	3304      	adds	r3, #4
    2814:	2101      	movs	r1, #1
    2816:	4618      	mov	r0, r3
    2818:	4b08      	ldr	r3, [pc, #32]	; (283c <_spi_m_async_io_read+0x78>)
    281a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    281c:	697b      	ldr	r3, [r7, #20]
    281e:	3304      	adds	r3, #4
    2820:	f240 11ff 	movw	r1, #511	; 0x1ff
    2824:	4618      	mov	r0, r3
    2826:	4b06      	ldr	r3, [pc, #24]	; (2840 <_spi_m_async_io_read+0x7c>)
    2828:	4798      	blx	r3

	return ERR_NONE;
    282a:	2300      	movs	r3, #0
}
    282c:	4618      	mov	r0, r3
    282e:	3718      	adds	r7, #24
    2830:	46bd      	mov	sp, r7
    2832:	bd80      	pop	{r7, pc}
    2834:	0000ee6c 	.word	0x0000ee6c
    2838:	000038fd 	.word	0x000038fd
    283c:	00007515 	.word	0x00007515
    2840:	000075ed 	.word	0x000075ed

00002844 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2844:	b580      	push	{r7, lr}
    2846:	b086      	sub	sp, #24
    2848:	af00      	add	r7, sp, #0
    284a:	60f8      	str	r0, [r7, #12]
    284c:	60b9      	str	r1, [r7, #8]
    284e:	4613      	mov	r3, r2
    2850:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2852:	68fb      	ldr	r3, [r7, #12]
    2854:	2b00      	cmp	r3, #0
    2856:	bf14      	ite	ne
    2858:	2301      	movne	r3, #1
    285a:	2300      	moveq	r3, #0
    285c:	b2db      	uxtb	r3, r3
    285e:	f240 1227 	movw	r2, #295	; 0x127
    2862:	4911      	ldr	r1, [pc, #68]	; (28a8 <_spi_m_async_io_write+0x64>)
    2864:	4618      	mov	r0, r3
    2866:	4b11      	ldr	r3, [pc, #68]	; (28ac <_spi_m_async_io_write+0x68>)
    2868:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    286a:	68fb      	ldr	r3, [r7, #12]
    286c:	3b24      	subs	r3, #36	; 0x24
    286e:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2870:	697b      	ldr	r3, [r7, #20]
    2872:	2200      	movs	r2, #0
    2874:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    2876:	697b      	ldr	r3, [r7, #20]
    2878:	68ba      	ldr	r2, [r7, #8]
    287a:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    287c:	88fa      	ldrh	r2, [r7, #6]
    287e:	697b      	ldr	r3, [r7, #20]
    2880:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2882:	697b      	ldr	r3, [r7, #20]
    2884:	2200      	movs	r2, #0
    2886:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2888:	697b      	ldr	r3, [r7, #20]
    288a:	2210      	movs	r2, #16
    288c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2890:	697b      	ldr	r3, [r7, #20]
    2892:	3304      	adds	r3, #4
    2894:	2101      	movs	r1, #1
    2896:	4618      	mov	r0, r3
    2898:	4b05      	ldr	r3, [pc, #20]	; (28b0 <_spi_m_async_io_write+0x6c>)
    289a:	4798      	blx	r3

	return ERR_NONE;
    289c:	2300      	movs	r3, #0
}
    289e:	4618      	mov	r0, r3
    28a0:	3718      	adds	r7, #24
    28a2:	46bd      	mov	sp, r7
    28a4:	bd80      	pop	{r7, pc}
    28a6:	bf00      	nop
    28a8:	0000ee6c 	.word	0x0000ee6c
    28ac:	000038fd 	.word	0x000038fd
    28b0:	000074b1 	.word	0x000074b1

000028b4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
    28bc:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    28be:	2300      	movs	r3, #0
    28c0:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d004      	beq.n	28d2 <spi_m_sync_init+0x1e>
    28c8:	683b      	ldr	r3, [r7, #0]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d001      	beq.n	28d2 <spi_m_sync_init+0x1e>
    28ce:	2301      	movs	r3, #1
    28d0:	e000      	b.n	28d4 <spi_m_sync_init+0x20>
    28d2:	2300      	movs	r3, #0
    28d4:	f003 0301 	and.w	r3, r3, #1
    28d8:	b2db      	uxtb	r3, r3
    28da:	2240      	movs	r2, #64	; 0x40
    28dc:	4910      	ldr	r1, [pc, #64]	; (2920 <spi_m_sync_init+0x6c>)
    28de:	4618      	mov	r0, r3
    28e0:	4b10      	ldr	r3, [pc, #64]	; (2924 <spi_m_sync_init+0x70>)
    28e2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	683a      	ldr	r2, [r7, #0]
    28e8:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	3304      	adds	r3, #4
    28ee:	6839      	ldr	r1, [r7, #0]
    28f0:	4618      	mov	r0, r3
    28f2:	4b0d      	ldr	r3, [pc, #52]	; (2928 <spi_m_sync_init+0x74>)
    28f4:	4798      	blx	r3
    28f6:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    28f8:	68fb      	ldr	r3, [r7, #12]
    28fa:	2b00      	cmp	r3, #0
    28fc:	da01      	bge.n	2902 <spi_m_sync_init+0x4e>
		return rc;
    28fe:	68fb      	ldr	r3, [r7, #12]
    2900:	e00a      	b.n	2918 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2908:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	4a07      	ldr	r2, [pc, #28]	; (292c <spi_m_sync_init+0x78>)
    290e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	4a07      	ldr	r2, [pc, #28]	; (2930 <spi_m_sync_init+0x7c>)
    2914:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2916:	2300      	movs	r3, #0
}
    2918:	4618      	mov	r0, r3
    291a:	3710      	adds	r7, #16
    291c:	46bd      	mov	sp, r7
    291e:	bd80      	pop	{r7, pc}
    2920:	0000ee8c 	.word	0x0000ee8c
    2924:	000038fd 	.word	0x000038fd
    2928:	00007005 	.word	0x00007005
    292c:	000029ad 	.word	0x000029ad
    2930:	00002a05 	.word	0x00002a05

00002934 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2934:	b580      	push	{r7, lr}
    2936:	b082      	sub	sp, #8
    2938:	af00      	add	r7, sp, #0
    293a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	2b00      	cmp	r3, #0
    2940:	bf14      	ite	ne
    2942:	2301      	movne	r3, #1
    2944:	2300      	moveq	r3, #0
    2946:	b2db      	uxtb	r3, r3
    2948:	2257      	movs	r2, #87	; 0x57
    294a:	4906      	ldr	r1, [pc, #24]	; (2964 <spi_m_sync_enable+0x30>)
    294c:	4618      	mov	r0, r3
    294e:	4b06      	ldr	r3, [pc, #24]	; (2968 <spi_m_sync_enable+0x34>)
    2950:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	3304      	adds	r3, #4
    2956:	4618      	mov	r0, r3
    2958:	4b04      	ldr	r3, [pc, #16]	; (296c <spi_m_sync_enable+0x38>)
    295a:	4798      	blx	r3
}
    295c:	bf00      	nop
    295e:	3708      	adds	r7, #8
    2960:	46bd      	mov	sp, r7
    2962:	bd80      	pop	{r7, pc}
    2964:	0000ee8c 	.word	0x0000ee8c
    2968:	000038fd 	.word	0x000038fd
    296c:	000071a1 	.word	0x000071a1

00002970 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2970:	b580      	push	{r7, lr}
    2972:	b082      	sub	sp, #8
    2974:	af00      	add	r7, sp, #0
    2976:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	2b00      	cmp	r3, #0
    297c:	bf14      	ite	ne
    297e:	2301      	movne	r3, #1
    2980:	2300      	moveq	r3, #0
    2982:	b2db      	uxtb	r3, r3
    2984:	225d      	movs	r2, #93	; 0x5d
    2986:	4906      	ldr	r1, [pc, #24]	; (29a0 <spi_m_sync_disable+0x30>)
    2988:	4618      	mov	r0, r3
    298a:	4b06      	ldr	r3, [pc, #24]	; (29a4 <spi_m_sync_disable+0x34>)
    298c:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	3304      	adds	r3, #4
    2992:	4618      	mov	r0, r3
    2994:	4b04      	ldr	r3, [pc, #16]	; (29a8 <spi_m_sync_disable+0x38>)
    2996:	4798      	blx	r3
}
    2998:	bf00      	nop
    299a:	3708      	adds	r7, #8
    299c:	46bd      	mov	sp, r7
    299e:	bd80      	pop	{r7, pc}
    29a0:	0000ee8c 	.word	0x0000ee8c
    29a4:	000038fd 	.word	0x000038fd
    29a8:	000071f1 	.word	0x000071f1

000029ac <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    29ac:	b580      	push	{r7, lr}
    29ae:	b088      	sub	sp, #32
    29b0:	af00      	add	r7, sp, #0
    29b2:	60f8      	str	r0, [r7, #12]
    29b4:	60b9      	str	r1, [r7, #8]
    29b6:	4613      	mov	r3, r2
    29b8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    29ba:	68fb      	ldr	r3, [r7, #12]
    29bc:	2b00      	cmp	r3, #0
    29be:	bf14      	ite	ne
    29c0:	2301      	movne	r3, #1
    29c2:	2300      	moveq	r3, #0
    29c4:	b2db      	uxtb	r3, r3
    29c6:	2287      	movs	r2, #135	; 0x87
    29c8:	490b      	ldr	r1, [pc, #44]	; (29f8 <_spi_m_sync_io_read+0x4c>)
    29ca:	4618      	mov	r0, r3
    29cc:	4b0b      	ldr	r3, [pc, #44]	; (29fc <_spi_m_sync_io_read+0x50>)
    29ce:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	3b0c      	subs	r3, #12
    29d4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    29d6:	68bb      	ldr	r3, [r7, #8]
    29d8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    29da:	2300      	movs	r3, #0
    29dc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    29de:	88fb      	ldrh	r3, [r7, #6]
    29e0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    29e2:	f107 0310 	add.w	r3, r7, #16
    29e6:	4619      	mov	r1, r3
    29e8:	69f8      	ldr	r0, [r7, #28]
    29ea:	4b05      	ldr	r3, [pc, #20]	; (2a00 <_spi_m_sync_io_read+0x54>)
    29ec:	4798      	blx	r3
    29ee:	4603      	mov	r3, r0
}
    29f0:	4618      	mov	r0, r3
    29f2:	3720      	adds	r7, #32
    29f4:	46bd      	mov	sp, r7
    29f6:	bd80      	pop	{r7, pc}
    29f8:	0000ee8c 	.word	0x0000ee8c
    29fc:	000038fd 	.word	0x000038fd
    2a00:	00002a5d 	.word	0x00002a5d

00002a04 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2a04:	b580      	push	{r7, lr}
    2a06:	b088      	sub	sp, #32
    2a08:	af00      	add	r7, sp, #0
    2a0a:	60f8      	str	r0, [r7, #12]
    2a0c:	60b9      	str	r1, [r7, #8]
    2a0e:	4613      	mov	r3, r2
    2a10:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a12:	68fb      	ldr	r3, [r7, #12]
    2a14:	2b00      	cmp	r3, #0
    2a16:	bf14      	ite	ne
    2a18:	2301      	movne	r3, #1
    2a1a:	2300      	moveq	r3, #0
    2a1c:	b2db      	uxtb	r3, r3
    2a1e:	22a3      	movs	r2, #163	; 0xa3
    2a20:	490b      	ldr	r1, [pc, #44]	; (2a50 <_spi_m_sync_io_write+0x4c>)
    2a22:	4618      	mov	r0, r3
    2a24:	4b0b      	ldr	r3, [pc, #44]	; (2a54 <_spi_m_sync_io_write+0x50>)
    2a26:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2a28:	68fb      	ldr	r3, [r7, #12]
    2a2a:	3b0c      	subs	r3, #12
    2a2c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2a2e:	2300      	movs	r3, #0
    2a30:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2a32:	68bb      	ldr	r3, [r7, #8]
    2a34:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2a36:	88fb      	ldrh	r3, [r7, #6]
    2a38:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2a3a:	f107 0310 	add.w	r3, r7, #16
    2a3e:	4619      	mov	r1, r3
    2a40:	69f8      	ldr	r0, [r7, #28]
    2a42:	4b05      	ldr	r3, [pc, #20]	; (2a58 <_spi_m_sync_io_write+0x54>)
    2a44:	4798      	blx	r3
    2a46:	4603      	mov	r3, r0
}
    2a48:	4618      	mov	r0, r3
    2a4a:	3720      	adds	r7, #32
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bd80      	pop	{r7, pc}
    2a50:	0000ee8c 	.word	0x0000ee8c
    2a54:	000038fd 	.word	0x000038fd
    2a58:	00002a5d 	.word	0x00002a5d

00002a5c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b086      	sub	sp, #24
    2a60:	af00      	add	r7, sp, #0
    2a62:	6078      	str	r0, [r7, #4]
    2a64:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d004      	beq.n	2a76 <spi_m_sync_transfer+0x1a>
    2a6c:	683b      	ldr	r3, [r7, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d001      	beq.n	2a76 <spi_m_sync_transfer+0x1a>
    2a72:	2301      	movs	r3, #1
    2a74:	e000      	b.n	2a78 <spi_m_sync_transfer+0x1c>
    2a76:	2300      	movs	r3, #0
    2a78:	f003 0301 	and.w	r3, r3, #1
    2a7c:	b2db      	uxtb	r3, r3
    2a7e:	22b3      	movs	r2, #179	; 0xb3
    2a80:	490c      	ldr	r1, [pc, #48]	; (2ab4 <spi_m_sync_transfer+0x58>)
    2a82:	4618      	mov	r0, r3
    2a84:	4b0c      	ldr	r3, [pc, #48]	; (2ab8 <spi_m_sync_transfer+0x5c>)
    2a86:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2a88:	683b      	ldr	r3, [r7, #0]
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2a8e:	683b      	ldr	r3, [r7, #0]
    2a90:	685b      	ldr	r3, [r3, #4]
    2a92:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2a94:	683b      	ldr	r3, [r7, #0]
    2a96:	689b      	ldr	r3, [r3, #8]
    2a98:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	3304      	adds	r3, #4
    2a9e:	f107 020c 	add.w	r2, r7, #12
    2aa2:	4611      	mov	r1, r2
    2aa4:	4618      	mov	r0, r3
    2aa6:	4b05      	ldr	r3, [pc, #20]	; (2abc <spi_m_sync_transfer+0x60>)
    2aa8:	4798      	blx	r3
    2aaa:	4603      	mov	r3, r0
}
    2aac:	4618      	mov	r0, r3
    2aae:	3718      	adds	r7, #24
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bd80      	pop	{r7, pc}
    2ab4:	0000ee8c 	.word	0x0000ee8c
    2ab8:	000038fd 	.word	0x000038fd
    2abc:	00007395 	.word	0x00007395

00002ac0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b082      	sub	sp, #8
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    2ac8:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d004      	beq.n	2ada <spi_m_sync_get_io_descriptor+0x1a>
    2ad0:	683b      	ldr	r3, [r7, #0]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d001      	beq.n	2ada <spi_m_sync_get_io_descriptor+0x1a>
    2ad6:	2301      	movs	r3, #1
    2ad8:	e000      	b.n	2adc <spi_m_sync_get_io_descriptor+0x1c>
    2ada:	2300      	movs	r3, #0
    2adc:	f003 0301 	and.w	r3, r3, #1
    2ae0:	b2db      	uxtb	r3, r3
    2ae2:	22bd      	movs	r2, #189	; 0xbd
    2ae4:	4906      	ldr	r1, [pc, #24]	; (2b00 <spi_m_sync_get_io_descriptor+0x40>)
    2ae6:	4618      	mov	r0, r3
    2ae8:	4b06      	ldr	r3, [pc, #24]	; (2b04 <spi_m_sync_get_io_descriptor+0x44>)
    2aea:	4798      	blx	r3
	*io = &spi->io;
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	f103 020c 	add.w	r2, r3, #12
    2af2:	683b      	ldr	r3, [r7, #0]
    2af4:	601a      	str	r2, [r3, #0]
	return 0;
    2af6:	2300      	movs	r3, #0
}
    2af8:	4618      	mov	r0, r3
    2afa:	3708      	adds	r7, #8
    2afc:	46bd      	mov	sp, r7
    2afe:	bd80      	pop	{r7, pc}
    2b00:	0000ee8c 	.word	0x0000ee8c
    2b04:	000038fd 	.word	0x000038fd

00002b08 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2b08:	b480      	push	{r7}
    2b0a:	b083      	sub	sp, #12
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	681b      	ldr	r3, [r3, #0]
}
    2b14:	4618      	mov	r0, r3
    2b16:	370c      	adds	r7, #12
    2b18:	46bd      	mov	sp, r7
    2b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b1e:	4770      	bx	lr

00002b20 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2b20:	b480      	push	{r7}
    2b22:	b083      	sub	sp, #12
    2b24:	af00      	add	r7, sp, #0
    2b26:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d002      	beq.n	2b34 <list_get_next_element+0x14>
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	681b      	ldr	r3, [r3, #0]
    2b32:	e000      	b.n	2b36 <list_get_next_element+0x16>
    2b34:	2300      	movs	r3, #0
}
    2b36:	4618      	mov	r0, r3
    2b38:	370c      	adds	r7, #12
    2b3a:	46bd      	mov	sp, r7
    2b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b40:	4770      	bx	lr
	...

00002b44 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2b44:	b580      	push	{r7, lr}
    2b46:	b084      	sub	sp, #16
    2b48:	af00      	add	r7, sp, #0
    2b4a:	60f8      	str	r0, [r7, #12]
    2b4c:	60b9      	str	r1, [r7, #8]
    2b4e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d004      	beq.n	2b60 <timer_init+0x1c>
    2b56:	68bb      	ldr	r3, [r7, #8]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d001      	beq.n	2b60 <timer_init+0x1c>
    2b5c:	2301      	movs	r3, #1
    2b5e:	e000      	b.n	2b62 <timer_init+0x1e>
    2b60:	2300      	movs	r3, #0
    2b62:	f003 0301 	and.w	r3, r3, #1
    2b66:	b2db      	uxtb	r3, r3
    2b68:	223b      	movs	r2, #59	; 0x3b
    2b6a:	490a      	ldr	r1, [pc, #40]	; (2b94 <timer_init+0x50>)
    2b6c:	4618      	mov	r0, r3
    2b6e:	4b0a      	ldr	r3, [pc, #40]	; (2b98 <timer_init+0x54>)
    2b70:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	68b9      	ldr	r1, [r7, #8]
    2b76:	4618      	mov	r0, r3
    2b78:	4b08      	ldr	r3, [pc, #32]	; (2b9c <timer_init+0x58>)
    2b7a:	4798      	blx	r3
	descr->time                           = 0;
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	2200      	movs	r2, #0
    2b80:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2b82:	68fb      	ldr	r3, [r7, #12]
    2b84:	4a06      	ldr	r2, [pc, #24]	; (2ba0 <timer_init+0x5c>)
    2b86:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2b88:	2300      	movs	r3, #0
}
    2b8a:	4618      	mov	r0, r3
    2b8c:	3710      	adds	r7, #16
    2b8e:	46bd      	mov	sp, r7
    2b90:	bd80      	pop	{r7, pc}
    2b92:	bf00      	nop
    2b94:	0000eea8 	.word	0x0000eea8
    2b98:	000038fd 	.word	0x000038fd
    2b9c:	00007a8d 	.word	0x00007a8d
    2ba0:	00002eed 	.word	0x00002eed

00002ba4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b082      	sub	sp, #8
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	2b00      	cmp	r3, #0
    2bb0:	bf14      	ite	ne
    2bb2:	2301      	movne	r3, #1
    2bb4:	2300      	moveq	r3, #0
    2bb6:	b2db      	uxtb	r3, r3
    2bb8:	2253      	movs	r2, #83	; 0x53
    2bba:	490b      	ldr	r1, [pc, #44]	; (2be8 <timer_start+0x44>)
    2bbc:	4618      	mov	r0, r3
    2bbe:	4b0b      	ldr	r3, [pc, #44]	; (2bec <timer_start+0x48>)
    2bc0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	4618      	mov	r0, r3
    2bc6:	4b0a      	ldr	r3, [pc, #40]	; (2bf0 <timer_start+0x4c>)
    2bc8:	4798      	blx	r3
    2bca:	4603      	mov	r3, r0
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d002      	beq.n	2bd6 <timer_start+0x32>
		return ERR_DENIED;
    2bd0:	f06f 0310 	mvn.w	r3, #16
    2bd4:	e004      	b.n	2be0 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	4618      	mov	r0, r3
    2bda:	4b06      	ldr	r3, [pc, #24]	; (2bf4 <timer_start+0x50>)
    2bdc:	4798      	blx	r3

	return ERR_NONE;
    2bde:	2300      	movs	r3, #0
}
    2be0:	4618      	mov	r0, r3
    2be2:	3708      	adds	r7, #8
    2be4:	46bd      	mov	sp, r7
    2be6:	bd80      	pop	{r7, pc}
    2be8:	0000eea8 	.word	0x0000eea8
    2bec:	000038fd 	.word	0x000038fd
    2bf0:	00007fb9 	.word	0x00007fb9
    2bf4:	00007f59 	.word	0x00007f59

00002bf8 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2bf8:	b580      	push	{r7, lr}
    2bfa:	b082      	sub	sp, #8
    2bfc:	af00      	add	r7, sp, #0
    2bfe:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	2b00      	cmp	r3, #0
    2c04:	bf14      	ite	ne
    2c06:	2301      	movne	r3, #1
    2c08:	2300      	moveq	r3, #0
    2c0a:	b2db      	uxtb	r3, r3
    2c0c:	2261      	movs	r2, #97	; 0x61
    2c0e:	490d      	ldr	r1, [pc, #52]	; (2c44 <timer_stop+0x4c>)
    2c10:	4618      	mov	r0, r3
    2c12:	4b0d      	ldr	r3, [pc, #52]	; (2c48 <timer_stop+0x50>)
    2c14:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	4618      	mov	r0, r3
    2c1a:	4b0c      	ldr	r3, [pc, #48]	; (2c4c <timer_stop+0x54>)
    2c1c:	4798      	blx	r3
    2c1e:	4603      	mov	r3, r0
    2c20:	f083 0301 	eor.w	r3, r3, #1
    2c24:	b2db      	uxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	d002      	beq.n	2c30 <timer_stop+0x38>
		return ERR_DENIED;
    2c2a:	f06f 0310 	mvn.w	r3, #16
    2c2e:	e004      	b.n	2c3a <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	4618      	mov	r0, r3
    2c34:	4b06      	ldr	r3, [pc, #24]	; (2c50 <timer_stop+0x58>)
    2c36:	4798      	blx	r3

	return ERR_NONE;
    2c38:	2300      	movs	r3, #0
}
    2c3a:	4618      	mov	r0, r3
    2c3c:	3708      	adds	r7, #8
    2c3e:	46bd      	mov	sp, r7
    2c40:	bd80      	pop	{r7, pc}
    2c42:	bf00      	nop
    2c44:	0000eea8 	.word	0x0000eea8
    2c48:	000038fd 	.word	0x000038fd
    2c4c:	00007fb9 	.word	0x00007fb9
    2c50:	00007f99 	.word	0x00007f99

00002c54 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b084      	sub	sp, #16
    2c58:	af00      	add	r7, sp, #0
    2c5a:	6078      	str	r0, [r7, #4]
    2c5c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d004      	beq.n	2c6e <timer_add_task+0x1a>
    2c64:	683b      	ldr	r3, [r7, #0]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d001      	beq.n	2c6e <timer_add_task+0x1a>
    2c6a:	2301      	movs	r3, #1
    2c6c:	e000      	b.n	2c70 <timer_add_task+0x1c>
    2c6e:	2300      	movs	r3, #0
    2c70:	f003 0301 	and.w	r3, r3, #1
    2c74:	b2db      	uxtb	r3, r3
    2c76:	227a      	movs	r2, #122	; 0x7a
    2c78:	492d      	ldr	r1, [pc, #180]	; (2d30 <timer_add_task+0xdc>)
    2c7a:	4618      	mov	r0, r3
    2c7c:	4b2d      	ldr	r3, [pc, #180]	; (2d34 <timer_add_task+0xe0>)
    2c7e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	7e1b      	ldrb	r3, [r3, #24]
    2c84:	b2db      	uxtb	r3, r3
    2c86:	f043 0301 	orr.w	r3, r3, #1
    2c8a:	b2da      	uxtb	r2, r3
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	3314      	adds	r3, #20
    2c94:	6839      	ldr	r1, [r7, #0]
    2c96:	4618      	mov	r0, r3
    2c98:	4b27      	ldr	r3, [pc, #156]	; (2d38 <timer_add_task+0xe4>)
    2c9a:	4798      	blx	r3
    2c9c:	4603      	mov	r3, r0
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d00f      	beq.n	2cc2 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	7e1b      	ldrb	r3, [r3, #24]
    2ca6:	b2db      	uxtb	r3, r3
    2ca8:	f023 0301 	bic.w	r3, r3, #1
    2cac:	b2da      	uxtb	r2, r3
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    2cb2:	227f      	movs	r2, #127	; 0x7f
    2cb4:	491e      	ldr	r1, [pc, #120]	; (2d30 <timer_add_task+0xdc>)
    2cb6:	2000      	movs	r0, #0
    2cb8:	4b1e      	ldr	r3, [pc, #120]	; (2d34 <timer_add_task+0xe0>)
    2cba:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2cbc:	f06f 0311 	mvn.w	r3, #17
    2cc0:	e032      	b.n	2d28 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	691a      	ldr	r2, [r3, #16]
    2cc6:	683b      	ldr	r3, [r7, #0]
    2cc8:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	f103 0014 	add.w	r0, r3, #20
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	691b      	ldr	r3, [r3, #16]
    2cd4:	461a      	mov	r2, r3
    2cd6:	6839      	ldr	r1, [r7, #0]
    2cd8:	4b18      	ldr	r3, [pc, #96]	; (2d3c <timer_add_task+0xe8>)
    2cda:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	7e1b      	ldrb	r3, [r3, #24]
    2ce0:	b2db      	uxtb	r3, r3
    2ce2:	f023 0301 	bic.w	r3, r3, #1
    2ce6:	b2da      	uxtb	r2, r3
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	7e1b      	ldrb	r3, [r3, #24]
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	f003 0302 	and.w	r3, r3, #2
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d015      	beq.n	2d26 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    2cfa:	f107 030c 	add.w	r3, r7, #12
    2cfe:	4618      	mov	r0, r3
    2d00:	4b0f      	ldr	r3, [pc, #60]	; (2d40 <timer_add_task+0xec>)
    2d02:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	7e1b      	ldrb	r3, [r3, #24]
    2d08:	b2db      	uxtb	r3, r3
    2d0a:	f023 0302 	bic.w	r3, r3, #2
    2d0e:	b2da      	uxtb	r2, r3
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2d14:	687b      	ldr	r3, [r7, #4]
    2d16:	4618      	mov	r0, r3
    2d18:	4b0a      	ldr	r3, [pc, #40]	; (2d44 <timer_add_task+0xf0>)
    2d1a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d1c:	f107 030c 	add.w	r3, r7, #12
    2d20:	4618      	mov	r0, r3
    2d22:	4b09      	ldr	r3, [pc, #36]	; (2d48 <timer_add_task+0xf4>)
    2d24:	4798      	blx	r3
	}

	return ERR_NONE;
    2d26:	2300      	movs	r3, #0
}
    2d28:	4618      	mov	r0, r3
    2d2a:	3710      	adds	r7, #16
    2d2c:	46bd      	mov	sp, r7
    2d2e:	bd80      	pop	{r7, pc}
    2d30:	0000eea8 	.word	0x0000eea8
    2d34:	000038fd 	.word	0x000038fd
    2d38:	00003925 	.word	0x00003925
    2d3c:	00002e3d 	.word	0x00002e3d
    2d40:	0000b165 	.word	0x0000b165
    2d44:	00008019 	.word	0x00008019
    2d48:	0000b18b 	.word	0x0000b18b

00002d4c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b084      	sub	sp, #16
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
    2d54:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d004      	beq.n	2d66 <timer_remove_task+0x1a>
    2d5c:	683b      	ldr	r3, [r7, #0]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d001      	beq.n	2d66 <timer_remove_task+0x1a>
    2d62:	2301      	movs	r3, #1
    2d64:	e000      	b.n	2d68 <timer_remove_task+0x1c>
    2d66:	2300      	movs	r3, #0
    2d68:	f003 0301 	and.w	r3, r3, #1
    2d6c:	b2db      	uxtb	r3, r3
    2d6e:	2295      	movs	r2, #149	; 0x95
    2d70:	492b      	ldr	r1, [pc, #172]	; (2e20 <timer_remove_task+0xd4>)
    2d72:	4618      	mov	r0, r3
    2d74:	4b2b      	ldr	r3, [pc, #172]	; (2e24 <timer_remove_task+0xd8>)
    2d76:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	7e1b      	ldrb	r3, [r3, #24]
    2d7c:	b2db      	uxtb	r3, r3
    2d7e:	f043 0301 	orr.w	r3, r3, #1
    2d82:	b2da      	uxtb	r2, r3
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	3314      	adds	r3, #20
    2d8c:	6839      	ldr	r1, [r7, #0]
    2d8e:	4618      	mov	r0, r3
    2d90:	4b25      	ldr	r3, [pc, #148]	; (2e28 <timer_remove_task+0xdc>)
    2d92:	4798      	blx	r3
    2d94:	4603      	mov	r3, r0
    2d96:	f083 0301 	eor.w	r3, r3, #1
    2d9a:	b2db      	uxtb	r3, r3
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d00f      	beq.n	2dc0 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	7e1b      	ldrb	r3, [r3, #24]
    2da4:	b2db      	uxtb	r3, r3
    2da6:	f023 0301 	bic.w	r3, r3, #1
    2daa:	b2da      	uxtb	r2, r3
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    2db0:	229a      	movs	r2, #154	; 0x9a
    2db2:	491b      	ldr	r1, [pc, #108]	; (2e20 <timer_remove_task+0xd4>)
    2db4:	2000      	movs	r0, #0
    2db6:	4b1b      	ldr	r3, [pc, #108]	; (2e24 <timer_remove_task+0xd8>)
    2db8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2dba:	f06f 0309 	mvn.w	r3, #9
    2dbe:	e02b      	b.n	2e18 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    2dc0:	687b      	ldr	r3, [r7, #4]
    2dc2:	3314      	adds	r3, #20
    2dc4:	6839      	ldr	r1, [r7, #0]
    2dc6:	4618      	mov	r0, r3
    2dc8:	4b18      	ldr	r3, [pc, #96]	; (2e2c <timer_remove_task+0xe0>)
    2dca:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	7e1b      	ldrb	r3, [r3, #24]
    2dd0:	b2db      	uxtb	r3, r3
    2dd2:	f023 0301 	bic.w	r3, r3, #1
    2dd6:	b2da      	uxtb	r2, r3
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	7e1b      	ldrb	r3, [r3, #24]
    2de0:	b2db      	uxtb	r3, r3
    2de2:	f003 0302 	and.w	r3, r3, #2
    2de6:	2b00      	cmp	r3, #0
    2de8:	d015      	beq.n	2e16 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    2dea:	f107 030c 	add.w	r3, r7, #12
    2dee:	4618      	mov	r0, r3
    2df0:	4b0f      	ldr	r3, [pc, #60]	; (2e30 <timer_remove_task+0xe4>)
    2df2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	7e1b      	ldrb	r3, [r3, #24]
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	f023 0302 	bic.w	r3, r3, #2
    2dfe:	b2da      	uxtb	r2, r3
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	4618      	mov	r0, r3
    2e08:	4b0a      	ldr	r3, [pc, #40]	; (2e34 <timer_remove_task+0xe8>)
    2e0a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2e0c:	f107 030c 	add.w	r3, r7, #12
    2e10:	4618      	mov	r0, r3
    2e12:	4b09      	ldr	r3, [pc, #36]	; (2e38 <timer_remove_task+0xec>)
    2e14:	4798      	blx	r3
	}

	return ERR_NONE;
    2e16:	2300      	movs	r3, #0
}
    2e18:	4618      	mov	r0, r3
    2e1a:	3710      	adds	r7, #16
    2e1c:	46bd      	mov	sp, r7
    2e1e:	bd80      	pop	{r7, pc}
    2e20:	0000eea8 	.word	0x0000eea8
    2e24:	000038fd 	.word	0x000038fd
    2e28:	00003925 	.word	0x00003925
    2e2c:	00003a87 	.word	0x00003a87
    2e30:	0000b165 	.word	0x0000b165
    2e34:	00008019 	.word	0x00008019
    2e38:	0000b18b 	.word	0x0000b18b

00002e3c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b088      	sub	sp, #32
    2e40:	af00      	add	r7, sp, #0
    2e42:	60f8      	str	r0, [r7, #12]
    2e44:	60b9      	str	r1, [r7, #8]
    2e46:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2e48:	2300      	movs	r3, #0
    2e4a:	61bb      	str	r3, [r7, #24]
    2e4c:	68f8      	ldr	r0, [r7, #12]
    2e4e:	4b23      	ldr	r3, [pc, #140]	; (2edc <timer_add_timer_task+0xa0>)
    2e50:	4798      	blx	r3
    2e52:	6138      	str	r0, [r7, #16]

	if (!head) {
    2e54:	693b      	ldr	r3, [r7, #16]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d104      	bne.n	2e64 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2e5a:	68b9      	ldr	r1, [r7, #8]
    2e5c:	68f8      	ldr	r0, [r7, #12]
    2e5e:	4b20      	ldr	r3, [pc, #128]	; (2ee0 <timer_add_timer_task+0xa4>)
    2e60:	4798      	blx	r3
		return;
    2e62:	e037      	b.n	2ed4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e64:	693b      	ldr	r3, [r7, #16]
    2e66:	61fb      	str	r3, [r7, #28]
    2e68:	e022      	b.n	2eb0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2e6a:	69fb      	ldr	r3, [r7, #28]
    2e6c:	685a      	ldr	r2, [r3, #4]
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	429a      	cmp	r2, r3
    2e72:	d808      	bhi.n	2e86 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2e74:	69fb      	ldr	r3, [r7, #28]
    2e76:	689a      	ldr	r2, [r3, #8]
    2e78:	69fb      	ldr	r3, [r7, #28]
    2e7a:	6859      	ldr	r1, [r3, #4]
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	1acb      	subs	r3, r1, r3
    2e80:	4413      	add	r3, r2
    2e82:	617b      	str	r3, [r7, #20]
    2e84:	e009      	b.n	2e9a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2e86:	69fb      	ldr	r3, [r7, #28]
    2e88:	689a      	ldr	r2, [r3, #8]
    2e8a:	69fb      	ldr	r3, [r7, #28]
    2e8c:	685b      	ldr	r3, [r3, #4]
    2e8e:	441a      	add	r2, r3
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	425b      	negs	r3, r3
    2e94:	4413      	add	r3, r2
    2e96:	3301      	adds	r3, #1
    2e98:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2e9a:	68bb      	ldr	r3, [r7, #8]
    2e9c:	689a      	ldr	r2, [r3, #8]
    2e9e:	697b      	ldr	r3, [r7, #20]
    2ea0:	429a      	cmp	r2, r3
    2ea2:	d909      	bls.n	2eb8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2ea4:	69fb      	ldr	r3, [r7, #28]
    2ea6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2ea8:	69f8      	ldr	r0, [r7, #28]
    2eaa:	4b0e      	ldr	r3, [pc, #56]	; (2ee4 <timer_add_timer_task+0xa8>)
    2eac:	4798      	blx	r3
    2eae:	61f8      	str	r0, [r7, #28]
    2eb0:	69fb      	ldr	r3, [r7, #28]
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d1d9      	bne.n	2e6a <timer_add_timer_task+0x2e>
    2eb6:	e000      	b.n	2eba <timer_add_timer_task+0x7e>
			break;
    2eb8:	bf00      	nop
	}

	if (it == head) {
    2eba:	69fa      	ldr	r2, [r7, #28]
    2ebc:	693b      	ldr	r3, [r7, #16]
    2ebe:	429a      	cmp	r2, r3
    2ec0:	d104      	bne.n	2ecc <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ec2:	68b9      	ldr	r1, [r7, #8]
    2ec4:	68f8      	ldr	r0, [r7, #12]
    2ec6:	4b06      	ldr	r3, [pc, #24]	; (2ee0 <timer_add_timer_task+0xa4>)
    2ec8:	4798      	blx	r3
    2eca:	e003      	b.n	2ed4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2ecc:	68b9      	ldr	r1, [r7, #8]
    2ece:	69b8      	ldr	r0, [r7, #24]
    2ed0:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <timer_add_timer_task+0xac>)
    2ed2:	4798      	blx	r3
	}
}
    2ed4:	3720      	adds	r7, #32
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	bf00      	nop
    2edc:	00002b09 	.word	0x00002b09
    2ee0:	0000395d 	.word	0x0000395d
    2ee4:	00002b21 	.word	0x00002b21
    2ee8:	000039b5 	.word	0x000039b5

00002eec <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2eec:	b580      	push	{r7, lr}
    2eee:	b086      	sub	sp, #24
    2ef0:	af00      	add	r7, sp, #0
    2ef2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2ef8:	693b      	ldr	r3, [r7, #16]
    2efa:	3314      	adds	r3, #20
    2efc:	4618      	mov	r0, r3
    2efe:	4b27      	ldr	r3, [pc, #156]	; (2f9c <timer_process_counted+0xb0>)
    2f00:	4798      	blx	r3
    2f02:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2f04:	693b      	ldr	r3, [r7, #16]
    2f06:	691b      	ldr	r3, [r3, #16]
    2f08:	1c5a      	adds	r2, r3, #1
    2f0a:	693b      	ldr	r3, [r7, #16]
    2f0c:	611a      	str	r2, [r3, #16]
    2f0e:	693b      	ldr	r3, [r7, #16]
    2f10:	691b      	ldr	r3, [r3, #16]
    2f12:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2f14:	693b      	ldr	r3, [r7, #16]
    2f16:	7e1b      	ldrb	r3, [r3, #24]
    2f18:	b2db      	uxtb	r3, r3
    2f1a:	f003 0301 	and.w	r3, r3, #1
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d106      	bne.n	2f30 <timer_process_counted+0x44>
    2f22:	693b      	ldr	r3, [r7, #16]
    2f24:	7e1b      	ldrb	r3, [r3, #24]
    2f26:	b2db      	uxtb	r3, r3
    2f28:	f003 0302 	and.w	r3, r3, #2
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d027      	beq.n	2f80 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f30:	693b      	ldr	r3, [r7, #16]
    2f32:	7e1b      	ldrb	r3, [r3, #24]
    2f34:	b2db      	uxtb	r3, r3
    2f36:	f043 0302 	orr.w	r3, r3, #2
    2f3a:	b2da      	uxtb	r2, r3
    2f3c:	693b      	ldr	r3, [r7, #16]
    2f3e:	761a      	strb	r2, [r3, #24]
		return;
    2f40:	e029      	b.n	2f96 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2f42:	697b      	ldr	r3, [r7, #20]
    2f44:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2f46:	693b      	ldr	r3, [r7, #16]
    2f48:	3314      	adds	r3, #20
    2f4a:	4618      	mov	r0, r3
    2f4c:	4b14      	ldr	r3, [pc, #80]	; (2fa0 <timer_process_counted+0xb4>)
    2f4e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2f50:	68bb      	ldr	r3, [r7, #8]
    2f52:	7c1b      	ldrb	r3, [r3, #16]
    2f54:	2b01      	cmp	r3, #1
    2f56:	d109      	bne.n	2f6c <timer_process_counted+0x80>
			tmp->time_label = time;
    2f58:	68bb      	ldr	r3, [r7, #8]
    2f5a:	68fa      	ldr	r2, [r7, #12]
    2f5c:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2f5e:	693b      	ldr	r3, [r7, #16]
    2f60:	3314      	adds	r3, #20
    2f62:	68fa      	ldr	r2, [r7, #12]
    2f64:	68b9      	ldr	r1, [r7, #8]
    2f66:	4618      	mov	r0, r3
    2f68:	4b0e      	ldr	r3, [pc, #56]	; (2fa4 <timer_process_counted+0xb8>)
    2f6a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2f6c:	693b      	ldr	r3, [r7, #16]
    2f6e:	3314      	adds	r3, #20
    2f70:	4618      	mov	r0, r3
    2f72:	4b0a      	ldr	r3, [pc, #40]	; (2f9c <timer_process_counted+0xb0>)
    2f74:	4798      	blx	r3
    2f76:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2f78:	68bb      	ldr	r3, [r7, #8]
    2f7a:	68db      	ldr	r3, [r3, #12]
    2f7c:	68b8      	ldr	r0, [r7, #8]
    2f7e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2f80:	697b      	ldr	r3, [r7, #20]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d007      	beq.n	2f96 <timer_process_counted+0xaa>
    2f86:	697b      	ldr	r3, [r7, #20]
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	68fa      	ldr	r2, [r7, #12]
    2f8c:	1ad2      	subs	r2, r2, r3
    2f8e:	697b      	ldr	r3, [r7, #20]
    2f90:	689b      	ldr	r3, [r3, #8]
    2f92:	429a      	cmp	r2, r3
    2f94:	d2d5      	bcs.n	2f42 <timer_process_counted+0x56>
	}
}
    2f96:	3718      	adds	r7, #24
    2f98:	46bd      	mov	sp, r7
    2f9a:	bd80      	pop	{r7, pc}
    2f9c:	00002b09 	.word	0x00002b09
    2fa0:	00003a55 	.word	0x00003a55
    2fa4:	00002e3d 	.word	0x00002e3d

00002fa8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2fa8:	b480      	push	{r7}
    2faa:	b085      	sub	sp, #20
    2fac:	af00      	add	r7, sp, #0
    2fae:	4603      	mov	r3, r0
    2fb0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fb2:	2300      	movs	r3, #0
    2fb4:	73fb      	strb	r3, [r7, #15]
    2fb6:	e029      	b.n	300c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fbc:	4a19      	ldr	r2, [pc, #100]	; (3024 <_usb_d_find_ep+0x7c>)
    2fbe:	015b      	lsls	r3, r3, #5
    2fc0:	4413      	add	r3, r2
    2fc2:	3301      	adds	r3, #1
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	79fa      	ldrb	r2, [r7, #7]
    2fc8:	429a      	cmp	r2, r3
    2fca:	d102      	bne.n	2fd2 <_usb_d_find_ep+0x2a>
			return i;
    2fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fd0:	e022      	b.n	3018 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fd6:	4a13      	ldr	r2, [pc, #76]	; (3024 <_usb_d_find_ep+0x7c>)
    2fd8:	015b      	lsls	r3, r3, #5
    2fda:	4413      	add	r3, r2
    2fdc:	781b      	ldrb	r3, [r3, #0]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d10e      	bne.n	3000 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2fe2:	79fb      	ldrb	r3, [r7, #7]
    2fe4:	f003 030f 	and.w	r3, r3, #15
    2fe8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2fec:	490d      	ldr	r1, [pc, #52]	; (3024 <_usb_d_find_ep+0x7c>)
    2fee:	0152      	lsls	r2, r2, #5
    2ff0:	440a      	add	r2, r1
    2ff2:	3201      	adds	r2, #1
    2ff4:	7812      	ldrb	r2, [r2, #0]
    2ff6:	4293      	cmp	r3, r2
    2ff8:	d102      	bne.n	3000 <_usb_d_find_ep+0x58>
			return i;
    2ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ffe:	e00b      	b.n	3018 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3000:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3004:	b2db      	uxtb	r3, r3
    3006:	3301      	adds	r3, #1
    3008:	b2db      	uxtb	r3, r3
    300a:	73fb      	strb	r3, [r7, #15]
    300c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3010:	2b03      	cmp	r3, #3
    3012:	ddd1      	ble.n	2fb8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3014:	f04f 33ff 	mov.w	r3, #4294967295
}
    3018:	4618      	mov	r0, r3
    301a:	3714      	adds	r7, #20
    301c:	46bd      	mov	sp, r7
    301e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3022:	4770      	bx	lr
    3024:	200005b0 	.word	0x200005b0

00003028 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3028:	b580      	push	{r7, lr}
    302a:	b088      	sub	sp, #32
    302c:	af00      	add	r7, sp, #0
    302e:	60ba      	str	r2, [r7, #8]
    3030:	607b      	str	r3, [r7, #4]
    3032:	4603      	mov	r3, r0
    3034:	73fb      	strb	r3, [r7, #15]
    3036:	460b      	mov	r3, r1
    3038:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    303a:	68bb      	ldr	r3, [r7, #8]
    303c:	617b      	str	r3, [r7, #20]
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	61bb      	str	r3, [r7, #24]
    3042:	7bbb      	ldrb	r3, [r7, #14]
    3044:	2b00      	cmp	r3, #0
    3046:	d004      	beq.n	3052 <_usb_d_trans+0x2a>
    3048:	7bfb      	ldrb	r3, [r7, #15]
    304a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    304e:	b2db      	uxtb	r3, r3
    3050:	e003      	b.n	305a <_usb_d_trans+0x32>
    3052:	7bfb      	ldrb	r3, [r7, #15]
    3054:	f003 030f 	and.w	r3, r3, #15
    3058:	b2db      	uxtb	r3, r3
    305a:	773b      	strb	r3, [r7, #28]
    305c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3060:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3062:	f107 0314 	add.w	r3, r7, #20
    3066:	4618      	mov	r0, r3
    3068:	4b03      	ldr	r3, [pc, #12]	; (3078 <_usb_d_trans+0x50>)
    306a:	4798      	blx	r3
    306c:	4603      	mov	r3, r0
}
    306e:	4618      	mov	r0, r3
    3070:	3720      	adds	r7, #32
    3072:	46bd      	mov	sp, r7
    3074:	bd80      	pop	{r7, pc}
    3076:	bf00      	nop
    3078:	0000a799 	.word	0x0000a799

0000307c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    307c:	b480      	push	{r7}
    307e:	b085      	sub	sp, #20
    3080:	af00      	add	r7, sp, #0
    3082:	60f8      	str	r0, [r7, #12]
    3084:	60b9      	str	r1, [r7, #8]
    3086:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3088:	2300      	movs	r3, #0
}
    308a:	4618      	mov	r0, r3
    308c:	3714      	adds	r7, #20
    308e:	46bd      	mov	sp, r7
    3090:	f85d 7b04 	ldr.w	r7, [sp], #4
    3094:	4770      	bx	lr
	...

00003098 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	4603      	mov	r3, r0
    30a0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30a2:	79fb      	ldrb	r3, [r7, #7]
    30a4:	4618      	mov	r0, r3
    30a6:	4b2a      	ldr	r3, [pc, #168]	; (3150 <usb_d_cb_trans_setup+0xb8>)
    30a8:	4798      	blx	r3
    30aa:	4603      	mov	r3, r0
    30ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30b2:	015b      	lsls	r3, r3, #5
    30b4:	4a27      	ldr	r2, [pc, #156]	; (3154 <usb_d_cb_trans_setup+0xbc>)
    30b6:	4413      	add	r3, r2
    30b8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    30ba:	693b      	ldr	r3, [r7, #16]
    30bc:	330c      	adds	r3, #12
    30be:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    30c0:	79fb      	ldrb	r3, [r7, #7]
    30c2:	68f9      	ldr	r1, [r7, #12]
    30c4:	4618      	mov	r0, r3
    30c6:	4b24      	ldr	r3, [pc, #144]	; (3158 <usb_d_cb_trans_setup+0xc0>)
    30c8:	4798      	blx	r3
    30ca:	4603      	mov	r3, r0
    30cc:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    30ce:	7afb      	ldrb	r3, [r7, #11]
    30d0:	2b08      	cmp	r3, #8
    30d2:	d00d      	beq.n	30f0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    30d4:	79fb      	ldrb	r3, [r7, #7]
    30d6:	2101      	movs	r1, #1
    30d8:	4618      	mov	r0, r3
    30da:	4b20      	ldr	r3, [pc, #128]	; (315c <usb_d_cb_trans_setup+0xc4>)
    30dc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    30de:	79fb      	ldrb	r3, [r7, #7]
    30e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30e4:	b2db      	uxtb	r3, r3
    30e6:	2101      	movs	r1, #1
    30e8:	4618      	mov	r0, r3
    30ea:	4b1c      	ldr	r3, [pc, #112]	; (315c <usb_d_cb_trans_setup+0xc4>)
    30ec:	4798      	blx	r3
		return;
    30ee:	e02b      	b.n	3148 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    30f0:	79fb      	ldrb	r3, [r7, #7]
    30f2:	2100      	movs	r1, #0
    30f4:	4618      	mov	r0, r3
    30f6:	4b19      	ldr	r3, [pc, #100]	; (315c <usb_d_cb_trans_setup+0xc4>)
    30f8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    30fa:	79fb      	ldrb	r3, [r7, #7]
    30fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3100:	b2db      	uxtb	r3, r3
    3102:	2100      	movs	r1, #0
    3104:	4618      	mov	r0, r3
    3106:	4b15      	ldr	r3, [pc, #84]	; (315c <usb_d_cb_trans_setup+0xc4>)
    3108:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    310a:	693b      	ldr	r3, [r7, #16]
    310c:	2201      	movs	r2, #1
    310e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3110:	693b      	ldr	r3, [r7, #16]
    3112:	695b      	ldr	r3, [r3, #20]
    3114:	79fa      	ldrb	r2, [r7, #7]
    3116:	68f9      	ldr	r1, [r7, #12]
    3118:	4610      	mov	r0, r2
    311a:	4798      	blx	r3
    311c:	4603      	mov	r3, r0
    311e:	f083 0301 	eor.w	r3, r3, #1
    3122:	b2db      	uxtb	r3, r3
    3124:	2b00      	cmp	r3, #0
    3126:	d00f      	beq.n	3148 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3128:	693b      	ldr	r3, [r7, #16]
    312a:	2205      	movs	r2, #5
    312c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    312e:	79fb      	ldrb	r3, [r7, #7]
    3130:	2101      	movs	r1, #1
    3132:	4618      	mov	r0, r3
    3134:	4b09      	ldr	r3, [pc, #36]	; (315c <usb_d_cb_trans_setup+0xc4>)
    3136:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3138:	79fb      	ldrb	r3, [r7, #7]
    313a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    313e:	b2db      	uxtb	r3, r3
    3140:	2101      	movs	r1, #1
    3142:	4618      	mov	r0, r3
    3144:	4b05      	ldr	r3, [pc, #20]	; (315c <usb_d_cb_trans_setup+0xc4>)
    3146:	4798      	blx	r3
	}
}
    3148:	3718      	adds	r7, #24
    314a:	46bd      	mov	sp, r7
    314c:	bd80      	pop	{r7, pc}
    314e:	bf00      	nop
    3150:	00002fa9 	.word	0x00002fa9
    3154:	200005b0 	.word	0x200005b0
    3158:	0000a6f1 	.word	0x0000a6f1
    315c:	0000a569 	.word	0x0000a569

00003160 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3160:	b580      	push	{r7, lr}
    3162:	b084      	sub	sp, #16
    3164:	af00      	add	r7, sp, #0
    3166:	4603      	mov	r3, r0
    3168:	6039      	str	r1, [r7, #0]
    316a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    316c:	79fb      	ldrb	r3, [r7, #7]
    316e:	4618      	mov	r0, r3
    3170:	4b0d      	ldr	r3, [pc, #52]	; (31a8 <usb_d_cb_trans_more+0x48>)
    3172:	4798      	blx	r3
    3174:	4603      	mov	r3, r0
    3176:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3178:	f997 300f 	ldrsb.w	r3, [r7, #15]
    317c:	015b      	lsls	r3, r3, #5
    317e:	4a0b      	ldr	r2, [pc, #44]	; (31ac <usb_d_cb_trans_more+0x4c>)
    3180:	4413      	add	r3, r2
    3182:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3184:	68bb      	ldr	r3, [r7, #8]
    3186:	789b      	ldrb	r3, [r3, #2]
    3188:	2b03      	cmp	r3, #3
    318a:	d107      	bne.n	319c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    318c:	68bb      	ldr	r3, [r7, #8]
    318e:	699b      	ldr	r3, [r3, #24]
    3190:	79fa      	ldrb	r2, [r7, #7]
    3192:	6839      	ldr	r1, [r7, #0]
    3194:	4610      	mov	r0, r2
    3196:	4798      	blx	r3
    3198:	4603      	mov	r3, r0
    319a:	e000      	b.n	319e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    319c:	2300      	movs	r3, #0
}
    319e:	4618      	mov	r0, r3
    31a0:	3710      	adds	r7, #16
    31a2:	46bd      	mov	sp, r7
    31a4:	bd80      	pop	{r7, pc}
    31a6:	bf00      	nop
    31a8:	00002fa9 	.word	0x00002fa9
    31ac:	200005b0 	.word	0x200005b0

000031b0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    31b0:	b590      	push	{r4, r7, lr}
    31b2:	b087      	sub	sp, #28
    31b4:	af02      	add	r7, sp, #8
    31b6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	789b      	ldrb	r3, [r3, #2]
    31bc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	7b1b      	ldrb	r3, [r3, #12]
    31c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    31c6:	2b00      	cmp	r3, #0
    31c8:	bf14      	ite	ne
    31ca:	2301      	movne	r3, #1
    31cc:	2300      	moveq	r3, #0
    31ce:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    31d0:	7bfb      	ldrb	r3, [r7, #15]
    31d2:	2b03      	cmp	r3, #3
    31d4:	d13a      	bne.n	324c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	69db      	ldr	r3, [r3, #28]
    31da:	687a      	ldr	r2, [r7, #4]
    31dc:	7850      	ldrb	r0, [r2, #1]
    31de:	687a      	ldr	r2, [r7, #4]
    31e0:	320c      	adds	r2, #12
    31e2:	2101      	movs	r1, #1
    31e4:	4798      	blx	r3
    31e6:	4603      	mov	r3, r0
    31e8:	737b      	strb	r3, [r7, #13]
		if (err) {
    31ea:	7b7b      	ldrb	r3, [r7, #13]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d015      	beq.n	321c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	2205      	movs	r2, #5
    31f4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	2202      	movs	r2, #2
    31fa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    31fc:	7bbb      	ldrb	r3, [r7, #14]
    31fe:	2b00      	cmp	r3, #0
    3200:	d002      	beq.n	3208 <usb_d_ctrl_trans_done+0x58>
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	785b      	ldrb	r3, [r3, #1]
    3206:	e004      	b.n	3212 <usb_d_ctrl_trans_done+0x62>
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	785b      	ldrb	r3, [r3, #1]
    320c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3210:	b2db      	uxtb	r3, r3
    3212:	2101      	movs	r1, #1
    3214:	4618      	mov	r0, r3
    3216:	4b15      	ldr	r3, [pc, #84]	; (326c <usb_d_ctrl_trans_done+0xbc>)
    3218:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    321a:	e022      	b.n	3262 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	2204      	movs	r2, #4
    3220:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	7858      	ldrb	r0, [r3, #1]
    3226:	7bbb      	ldrb	r3, [r7, #14]
    3228:	2b00      	cmp	r3, #0
    322a:	bf14      	ite	ne
    322c:	2301      	movne	r3, #1
    322e:	2300      	moveq	r3, #0
    3230:	b2db      	uxtb	r3, r3
    3232:	f083 0301 	eor.w	r3, r3, #1
    3236:	b2db      	uxtb	r3, r3
    3238:	f003 0301 	and.w	r3, r3, #1
    323c:	b2d9      	uxtb	r1, r3
    323e:	2301      	movs	r3, #1
    3240:	9300      	str	r3, [sp, #0]
    3242:	2300      	movs	r3, #0
    3244:	2200      	movs	r2, #0
    3246:	4c0a      	ldr	r4, [pc, #40]	; (3270 <usb_d_ctrl_trans_done+0xc0>)
    3248:	47a0      	blx	r4
}
    324a:	e00a      	b.n	3262 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	69db      	ldr	r3, [r3, #28]
    3250:	687a      	ldr	r2, [r7, #4]
    3252:	7850      	ldrb	r0, [r2, #1]
    3254:	687a      	ldr	r2, [r7, #4]
    3256:	320c      	adds	r2, #12
    3258:	2100      	movs	r1, #0
    325a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	2202      	movs	r2, #2
    3260:	709a      	strb	r2, [r3, #2]
}
    3262:	bf00      	nop
    3264:	3714      	adds	r7, #20
    3266:	46bd      	mov	sp, r7
    3268:	bd90      	pop	{r4, r7, pc}
    326a:	bf00      	nop
    326c:	0000a569 	.word	0x0000a569
    3270:	00003029 	.word	0x00003029

00003274 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	4603      	mov	r3, r0
    327c:	60b9      	str	r1, [r7, #8]
    327e:	607a      	str	r2, [r7, #4]
    3280:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3282:	7bfb      	ldrb	r3, [r7, #15]
    3284:	4618      	mov	r0, r3
    3286:	4b2f      	ldr	r3, [pc, #188]	; (3344 <_usb_d_cb_trans_done+0xd0>)
    3288:	4798      	blx	r3
    328a:	4603      	mov	r3, r0
    328c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    328e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3292:	015b      	lsls	r3, r3, #5
    3294:	4a2c      	ldr	r2, [pc, #176]	; (3348 <_usb_d_cb_trans_done+0xd4>)
    3296:	4413      	add	r3, r2
    3298:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    329a:	68bb      	ldr	r3, [r7, #8]
    329c:	2b00      	cmp	r3, #0
    329e:	d10e      	bne.n	32be <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    32a0:	693b      	ldr	r3, [r7, #16]
    32a2:	2200      	movs	r2, #0
    32a4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32a6:	693b      	ldr	r3, [r7, #16]
    32a8:	781b      	ldrb	r3, [r3, #0]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d103      	bne.n	32b6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    32ae:	6938      	ldr	r0, [r7, #16]
    32b0:	4b26      	ldr	r3, [pc, #152]	; (334c <_usb_d_cb_trans_done+0xd8>)
    32b2:	4798      	blx	r3
			return;
    32b4:	e043      	b.n	333e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    32b6:	693b      	ldr	r3, [r7, #16]
    32b8:	2201      	movs	r2, #1
    32ba:	709a      	strb	r2, [r3, #2]
    32bc:	e038      	b.n	3330 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    32be:	68bb      	ldr	r3, [r7, #8]
    32c0:	2b01      	cmp	r3, #1
    32c2:	d113      	bne.n	32ec <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    32c4:	693b      	ldr	r3, [r7, #16]
    32c6:	2202      	movs	r2, #2
    32c8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32ca:	693b      	ldr	r3, [r7, #16]
    32cc:	781b      	ldrb	r3, [r3, #0]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d108      	bne.n	32e4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32d2:	693b      	ldr	r3, [r7, #16]
    32d4:	2202      	movs	r2, #2
    32d6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    32d8:	7bfb      	ldrb	r3, [r7, #15]
    32da:	2100      	movs	r1, #0
    32dc:	4618      	mov	r0, r3
    32de:	4b1c      	ldr	r3, [pc, #112]	; (3350 <_usb_d_cb_trans_done+0xdc>)
    32e0:	4798      	blx	r3
    32e2:	e025      	b.n	3330 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    32e4:	693b      	ldr	r3, [r7, #16]
    32e6:	2205      	movs	r2, #5
    32e8:	709a      	strb	r2, [r3, #2]
    32ea:	e021      	b.n	3330 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    32ec:	68bb      	ldr	r3, [r7, #8]
    32ee:	2b02      	cmp	r3, #2
    32f0:	d10e      	bne.n	3310 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    32f2:	693b      	ldr	r3, [r7, #16]
    32f4:	2204      	movs	r2, #4
    32f6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32f8:	693b      	ldr	r3, [r7, #16]
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	2b00      	cmp	r3, #0
    32fe:	d103      	bne.n	3308 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3300:	693b      	ldr	r3, [r7, #16]
    3302:	2202      	movs	r2, #2
    3304:	709a      	strb	r2, [r3, #2]
			return;
    3306:	e01a      	b.n	333e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3308:	693b      	ldr	r3, [r7, #16]
    330a:	2201      	movs	r2, #1
    330c:	709a      	strb	r2, [r3, #2]
    330e:	e00f      	b.n	3330 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3310:	68bb      	ldr	r3, [r7, #8]
    3312:	2b03      	cmp	r3, #3
    3314:	d106      	bne.n	3324 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3316:	693b      	ldr	r3, [r7, #16]
    3318:	2200      	movs	r2, #0
    331a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    331c:	693b      	ldr	r3, [r7, #16]
    331e:	2205      	movs	r2, #5
    3320:	70da      	strb	r2, [r3, #3]
    3322:	e005      	b.n	3330 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3324:	693b      	ldr	r3, [r7, #16]
    3326:	2206      	movs	r2, #6
    3328:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    332a:	693b      	ldr	r3, [r7, #16]
    332c:	2206      	movs	r2, #6
    332e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3330:	693b      	ldr	r3, [r7, #16]
    3332:	69db      	ldr	r3, [r3, #28]
    3334:	693a      	ldr	r2, [r7, #16]
    3336:	78d1      	ldrb	r1, [r2, #3]
    3338:	687a      	ldr	r2, [r7, #4]
    333a:	7bf8      	ldrb	r0, [r7, #15]
    333c:	4798      	blx	r3
}
    333e:	3718      	adds	r7, #24
    3340:	46bd      	mov	sp, r7
    3342:	bd80      	pop	{r7, pc}
    3344:	00002fa9 	.word	0x00002fa9
    3348:	200005b0 	.word	0x200005b0
    334c:	000031b1 	.word	0x000031b1
    3350:	0000a569 	.word	0x0000a569

00003354 <usb_d_init>:

int32_t usb_d_init(void)
{
    3354:	b580      	push	{r7, lr}
    3356:	b082      	sub	sp, #8
    3358:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    335a:	4b21      	ldr	r3, [pc, #132]	; (33e0 <usb_d_init+0x8c>)
    335c:	4798      	blx	r3
    335e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3360:	683b      	ldr	r3, [r7, #0]
    3362:	2b00      	cmp	r3, #0
    3364:	da01      	bge.n	336a <usb_d_init+0x16>
		return rc;
    3366:	683b      	ldr	r3, [r7, #0]
    3368:	e036      	b.n	33d8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    336a:	2280      	movs	r2, #128	; 0x80
    336c:	2100      	movs	r1, #0
    336e:	481d      	ldr	r0, [pc, #116]	; (33e4 <usb_d_init+0x90>)
    3370:	4b1d      	ldr	r3, [pc, #116]	; (33e8 <usb_d_init+0x94>)
    3372:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3374:	2300      	movs	r3, #0
    3376:	71fb      	strb	r3, [r7, #7]
    3378:	e01e      	b.n	33b8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    337a:	79fb      	ldrb	r3, [r7, #7]
    337c:	4a19      	ldr	r2, [pc, #100]	; (33e4 <usb_d_init+0x90>)
    337e:	015b      	lsls	r3, r3, #5
    3380:	4413      	add	r3, r2
    3382:	3301      	adds	r3, #1
    3384:	22ff      	movs	r2, #255	; 0xff
    3386:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3388:	79fb      	ldrb	r3, [r7, #7]
    338a:	4a16      	ldr	r2, [pc, #88]	; (33e4 <usb_d_init+0x90>)
    338c:	015b      	lsls	r3, r3, #5
    338e:	4413      	add	r3, r2
    3390:	3314      	adds	r3, #20
    3392:	4a16      	ldr	r2, [pc, #88]	; (33ec <usb_d_init+0x98>)
    3394:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3396:	79fb      	ldrb	r3, [r7, #7]
    3398:	4a12      	ldr	r2, [pc, #72]	; (33e4 <usb_d_init+0x90>)
    339a:	015b      	lsls	r3, r3, #5
    339c:	4413      	add	r3, r2
    339e:	3318      	adds	r3, #24
    33a0:	4a12      	ldr	r2, [pc, #72]	; (33ec <usb_d_init+0x98>)
    33a2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    33a4:	79fb      	ldrb	r3, [r7, #7]
    33a6:	4a0f      	ldr	r2, [pc, #60]	; (33e4 <usb_d_init+0x90>)
    33a8:	015b      	lsls	r3, r3, #5
    33aa:	4413      	add	r3, r2
    33ac:	331c      	adds	r3, #28
    33ae:	4a0f      	ldr	r2, [pc, #60]	; (33ec <usb_d_init+0x98>)
    33b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33b2:	79fb      	ldrb	r3, [r7, #7]
    33b4:	3301      	adds	r3, #1
    33b6:	71fb      	strb	r3, [r7, #7]
    33b8:	79fb      	ldrb	r3, [r7, #7]
    33ba:	2b03      	cmp	r3, #3
    33bc:	d9dd      	bls.n	337a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    33be:	490c      	ldr	r1, [pc, #48]	; (33f0 <usb_d_init+0x9c>)
    33c0:	2000      	movs	r0, #0
    33c2:	4b0c      	ldr	r3, [pc, #48]	; (33f4 <usb_d_init+0xa0>)
    33c4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    33c6:	490c      	ldr	r1, [pc, #48]	; (33f8 <usb_d_init+0xa4>)
    33c8:	2001      	movs	r0, #1
    33ca:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <usb_d_init+0xa0>)
    33cc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    33ce:	490b      	ldr	r1, [pc, #44]	; (33fc <usb_d_init+0xa8>)
    33d0:	2002      	movs	r0, #2
    33d2:	4b08      	ldr	r3, [pc, #32]	; (33f4 <usb_d_init+0xa0>)
    33d4:	4798      	blx	r3
	return ERR_NONE;
    33d6:	2300      	movs	r3, #0
}
    33d8:	4618      	mov	r0, r3
    33da:	3708      	adds	r7, #8
    33dc:	46bd      	mov	sp, r7
    33de:	bd80      	pop	{r7, pc}
    33e0:	00009db1 	.word	0x00009db1
    33e4:	200005b0 	.word	0x200005b0
    33e8:	0000eacd 	.word	0x0000eacd
    33ec:	0000307d 	.word	0x0000307d
    33f0:	00003099 	.word	0x00003099
    33f4:	0000a9f9 	.word	0x0000a9f9
    33f8:	00003161 	.word	0x00003161
    33fc:	00003275 	.word	0x00003275

00003400 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	4603      	mov	r3, r0
    3408:	6039      	str	r1, [r7, #0]
    340a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    340c:	79fb      	ldrb	r3, [r7, #7]
    340e:	6839      	ldr	r1, [r7, #0]
    3410:	4618      	mov	r0, r3
    3412:	4b03      	ldr	r3, [pc, #12]	; (3420 <usb_d_register_callback+0x20>)
    3414:	4798      	blx	r3
}
    3416:	bf00      	nop
    3418:	3708      	adds	r7, #8
    341a:	46bd      	mov	sp, r7
    341c:	bd80      	pop	{r7, pc}
    341e:	bf00      	nop
    3420:	0000a9b1 	.word	0x0000a9b1

00003424 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3424:	b580      	push	{r7, lr}
    3426:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3428:	4b02      	ldr	r3, [pc, #8]	; (3434 <usb_d_enable+0x10>)
    342a:	4798      	blx	r3
    342c:	4603      	mov	r3, r0
}
    342e:	4618      	mov	r0, r3
    3430:	bd80      	pop	{r7, pc}
    3432:	bf00      	nop
    3434:	00009ea1 	.word	0x00009ea1

00003438 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3438:	b580      	push	{r7, lr}
    343a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    343c:	4b01      	ldr	r3, [pc, #4]	; (3444 <usb_d_attach+0xc>)
    343e:	4798      	blx	r3
}
    3440:	bf00      	nop
    3442:	bd80      	pop	{r7, pc}
    3444:	00009f25 	.word	0x00009f25

00003448 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3448:	b580      	push	{r7, lr}
    344a:	b082      	sub	sp, #8
    344c:	af00      	add	r7, sp, #0
    344e:	4603      	mov	r3, r0
    3450:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3452:	79fb      	ldrb	r3, [r7, #7]
    3454:	4618      	mov	r0, r3
    3456:	4b03      	ldr	r3, [pc, #12]	; (3464 <usb_d_set_address+0x1c>)
    3458:	4798      	blx	r3
}
    345a:	bf00      	nop
    345c:	3708      	adds	r7, #8
    345e:	46bd      	mov	sp, r7
    3460:	bd80      	pop	{r7, pc}
    3462:	bf00      	nop
    3464:	00009f39 	.word	0x00009f39

00003468 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3468:	b580      	push	{r7, lr}
    346a:	b082      	sub	sp, #8
    346c:	af00      	add	r7, sp, #0
    346e:	4603      	mov	r3, r0
    3470:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3472:	79fb      	ldrb	r3, [r7, #7]
    3474:	b29b      	uxth	r3, r3
    3476:	461a      	mov	r2, r3
    3478:	2100      	movs	r1, #0
    347a:	2000      	movs	r0, #0
    347c:	4b03      	ldr	r3, [pc, #12]	; (348c <usb_d_ep0_init+0x24>)
    347e:	4798      	blx	r3
    3480:	4603      	mov	r3, r0
}
    3482:	4618      	mov	r0, r3
    3484:	3708      	adds	r7, #8
    3486:	46bd      	mov	sp, r7
    3488:	bd80      	pop	{r7, pc}
    348a:	bf00      	nop
    348c:	00003491 	.word	0x00003491

00003490 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3490:	b580      	push	{r7, lr}
    3492:	b086      	sub	sp, #24
    3494:	af00      	add	r7, sp, #0
    3496:	4603      	mov	r3, r0
    3498:	71fb      	strb	r3, [r7, #7]
    349a:	460b      	mov	r3, r1
    349c:	71bb      	strb	r3, [r7, #6]
    349e:	4613      	mov	r3, r2
    34a0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    34a2:	79fb      	ldrb	r3, [r7, #7]
    34a4:	4618      	mov	r0, r3
    34a6:	4b1e      	ldr	r3, [pc, #120]	; (3520 <usb_d_ep_init+0x90>)
    34a8:	4798      	blx	r3
    34aa:	4603      	mov	r3, r0
    34ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34b2:	015b      	lsls	r3, r3, #5
    34b4:	4a1b      	ldr	r2, [pc, #108]	; (3524 <usb_d_ep_init+0x94>)
    34b6:	4413      	add	r3, r2
    34b8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    34ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34be:	2b00      	cmp	r3, #0
    34c0:	db02      	blt.n	34c8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    34c2:	f06f 0313 	mvn.w	r3, #19
    34c6:	e027      	b.n	3518 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    34c8:	20ff      	movs	r0, #255	; 0xff
    34ca:	4b15      	ldr	r3, [pc, #84]	; (3520 <usb_d_ep_init+0x90>)
    34cc:	4798      	blx	r3
    34ce:	4603      	mov	r3, r0
    34d0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    34d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34d6:	2b00      	cmp	r3, #0
    34d8:	da02      	bge.n	34e0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    34da:	f06f 0314 	mvn.w	r3, #20
    34de:	e01b      	b.n	3518 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    34e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34e4:	015b      	lsls	r3, r3, #5
    34e6:	4a0f      	ldr	r2, [pc, #60]	; (3524 <usb_d_ep_init+0x94>)
    34e8:	4413      	add	r3, r2
    34ea:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    34ec:	88ba      	ldrh	r2, [r7, #4]
    34ee:	79b9      	ldrb	r1, [r7, #6]
    34f0:	79fb      	ldrb	r3, [r7, #7]
    34f2:	4618      	mov	r0, r3
    34f4:	4b0c      	ldr	r3, [pc, #48]	; (3528 <usb_d_ep_init+0x98>)
    34f6:	4798      	blx	r3
    34f8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    34fa:	68fb      	ldr	r3, [r7, #12]
    34fc:	2b00      	cmp	r3, #0
    34fe:	da01      	bge.n	3504 <usb_d_ep_init+0x74>
		return rc;
    3500:	68fb      	ldr	r3, [r7, #12]
    3502:	e009      	b.n	3518 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3504:	693b      	ldr	r3, [r7, #16]
    3506:	79fa      	ldrb	r2, [r7, #7]
    3508:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    350a:	79bb      	ldrb	r3, [r7, #6]
    350c:	f003 0303 	and.w	r3, r3, #3
    3510:	b2da      	uxtb	r2, r3
    3512:	693b      	ldr	r3, [r7, #16]
    3514:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3516:	2300      	movs	r3, #0
}
    3518:	4618      	mov	r0, r3
    351a:	3718      	adds	r7, #24
    351c:	46bd      	mov	sp, r7
    351e:	bd80      	pop	{r7, pc}
    3520:	00002fa9 	.word	0x00002fa9
    3524:	200005b0 	.word	0x200005b0
    3528:	00009fd9 	.word	0x00009fd9

0000352c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    352c:	b580      	push	{r7, lr}
    352e:	b084      	sub	sp, #16
    3530:	af00      	add	r7, sp, #0
    3532:	4603      	mov	r3, r0
    3534:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3536:	79fb      	ldrb	r3, [r7, #7]
    3538:	4618      	mov	r0, r3
    353a:	4b0d      	ldr	r3, [pc, #52]	; (3570 <usb_d_ep_deinit+0x44>)
    353c:	4798      	blx	r3
    353e:	4603      	mov	r3, r0
    3540:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3542:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3546:	015b      	lsls	r3, r3, #5
    3548:	4a0a      	ldr	r2, [pc, #40]	; (3574 <usb_d_ep_deinit+0x48>)
    354a:	4413      	add	r3, r2
    354c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3552:	2b00      	cmp	r3, #0
    3554:	db07      	blt.n	3566 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3556:	79fb      	ldrb	r3, [r7, #7]
    3558:	4618      	mov	r0, r3
    355a:	4b07      	ldr	r3, [pc, #28]	; (3578 <usb_d_ep_deinit+0x4c>)
    355c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    355e:	68bb      	ldr	r3, [r7, #8]
    3560:	22ff      	movs	r2, #255	; 0xff
    3562:	705a      	strb	r2, [r3, #1]
    3564:	e000      	b.n	3568 <usb_d_ep_deinit+0x3c>
		return;
    3566:	bf00      	nop
}
    3568:	3710      	adds	r7, #16
    356a:	46bd      	mov	sp, r7
    356c:	bd80      	pop	{r7, pc}
    356e:	bf00      	nop
    3570:	00002fa9 	.word	0x00002fa9
    3574:	200005b0 	.word	0x200005b0
    3578:	0000a10d 	.word	0x0000a10d

0000357c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    357c:	b580      	push	{r7, lr}
    357e:	b086      	sub	sp, #24
    3580:	af00      	add	r7, sp, #0
    3582:	4603      	mov	r3, r0
    3584:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3586:	79fb      	ldrb	r3, [r7, #7]
    3588:	4618      	mov	r0, r3
    358a:	4b15      	ldr	r3, [pc, #84]	; (35e0 <usb_d_ep_enable+0x64>)
    358c:	4798      	blx	r3
    358e:	4603      	mov	r3, r0
    3590:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3592:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3596:	015b      	lsls	r3, r3, #5
    3598:	4a12      	ldr	r2, [pc, #72]	; (35e4 <usb_d_ep_enable+0x68>)
    359a:	4413      	add	r3, r2
    359c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    359e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35a2:	2b00      	cmp	r3, #0
    35a4:	da02      	bge.n	35ac <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    35a6:	f06f 0311 	mvn.w	r3, #17
    35aa:	e014      	b.n	35d6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    35ac:	693b      	ldr	r3, [r7, #16]
    35ae:	781b      	ldrb	r3, [r3, #0]
    35b0:	2b00      	cmp	r3, #0
    35b2:	d101      	bne.n	35b8 <usb_d_ep_enable+0x3c>
    35b4:	2202      	movs	r2, #2
    35b6:	e000      	b.n	35ba <usb_d_ep_enable+0x3e>
    35b8:	2201      	movs	r2, #1
    35ba:	693b      	ldr	r3, [r7, #16]
    35bc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    35be:	79fb      	ldrb	r3, [r7, #7]
    35c0:	4618      	mov	r0, r3
    35c2:	4b09      	ldr	r3, [pc, #36]	; (35e8 <usb_d_ep_enable+0x6c>)
    35c4:	4798      	blx	r3
    35c6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	2b00      	cmp	r3, #0
    35cc:	da02      	bge.n	35d4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    35ce:	693b      	ldr	r3, [r7, #16]
    35d0:	2200      	movs	r2, #0
    35d2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    35d4:	68fb      	ldr	r3, [r7, #12]
}
    35d6:	4618      	mov	r0, r3
    35d8:	3718      	adds	r7, #24
    35da:	46bd      	mov	sp, r7
    35dc:	bd80      	pop	{r7, pc}
    35de:	bf00      	nop
    35e0:	00002fa9 	.word	0x00002fa9
    35e4:	200005b0 	.word	0x200005b0
    35e8:	0000a1f1 	.word	0x0000a1f1

000035ec <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    35ec:	b590      	push	{r4, r7, lr}
    35ee:	b08d      	sub	sp, #52	; 0x34
    35f0:	af02      	add	r7, sp, #8
    35f2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	7a1b      	ldrb	r3, [r3, #8]
    35f8:	4618      	mov	r0, r3
    35fa:	4b51      	ldr	r3, [pc, #324]	; (3740 <usb_d_ep_transfer+0x154>)
    35fc:	4798      	blx	r3
    35fe:	4603      	mov	r3, r0
    3600:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3602:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3606:	015b      	lsls	r3, r3, #5
    3608:	4a4e      	ldr	r2, [pc, #312]	; (3744 <usb_d_ep_transfer+0x158>)
    360a:	4413      	add	r3, r2
    360c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	7a1b      	ldrb	r3, [r3, #8]
    3612:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3616:	2b00      	cmp	r3, #0
    3618:	bf14      	ite	ne
    361a:	2301      	movne	r3, #1
    361c:	2300      	moveq	r3, #0
    361e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	7a5b      	ldrb	r3, [r3, #9]
    3626:	2b00      	cmp	r3, #0
    3628:	bf14      	ite	ne
    362a:	2301      	movne	r3, #1
    362c:	2300      	moveq	r3, #0
    362e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	685b      	ldr	r3, [r3, #4]
    3636:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3638:	f997 301f 	ldrsb.w	r3, [r7, #31]
    363c:	2b00      	cmp	r3, #0
    363e:	da02      	bge.n	3646 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3640:	f06f 0311 	mvn.w	r3, #17
    3644:	e077      	b.n	3736 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3646:	f107 0308 	add.w	r3, r7, #8
    364a:	4618      	mov	r0, r3
    364c:	4b3e      	ldr	r3, [pc, #248]	; (3748 <usb_d_ep_transfer+0x15c>)
    364e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3650:	69bb      	ldr	r3, [r7, #24]
    3652:	789b      	ldrb	r3, [r3, #2]
    3654:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3656:	7bfb      	ldrb	r3, [r7, #15]
    3658:	b2db      	uxtb	r3, r3
    365a:	2b01      	cmp	r3, #1
    365c:	d10c      	bne.n	3678 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    365e:	69bb      	ldr	r3, [r7, #24]
    3660:	2203      	movs	r2, #3
    3662:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3664:	f107 0308 	add.w	r3, r7, #8
    3668:	4618      	mov	r0, r3
    366a:	4b38      	ldr	r3, [pc, #224]	; (374c <usb_d_ep_transfer+0x160>)
    366c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    366e:	69bb      	ldr	r3, [r7, #24]
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	2b00      	cmp	r3, #0
    3674:	d151      	bne.n	371a <usb_d_ep_transfer+0x12e>
    3676:	e017      	b.n	36a8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3678:	f107 0308 	add.w	r3, r7, #8
    367c:	4618      	mov	r0, r3
    367e:	4b33      	ldr	r3, [pc, #204]	; (374c <usb_d_ep_transfer+0x160>)
    3680:	4798      	blx	r3
		switch (state) {
    3682:	7bfb      	ldrb	r3, [r7, #15]
    3684:	b2db      	uxtb	r3, r3
    3686:	2b05      	cmp	r3, #5
    3688:	d004      	beq.n	3694 <usb_d_ep_transfer+0xa8>
    368a:	2b06      	cmp	r3, #6
    368c:	d004      	beq.n	3698 <usb_d_ep_transfer+0xac>
    368e:	2b00      	cmp	r3, #0
    3690:	d005      	beq.n	369e <usb_d_ep_transfer+0xb2>
    3692:	e007      	b.n	36a4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3694:	2302      	movs	r3, #2
    3696:	e04e      	b.n	3736 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3698:	f06f 030f 	mvn.w	r3, #15
    369c:	e04b      	b.n	3736 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    369e:	f06f 0312 	mvn.w	r3, #18
    36a2:	e048      	b.n	3736 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    36a4:	2301      	movs	r3, #1
    36a6:	e046      	b.n	3736 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    36a8:	69bb      	ldr	r3, [r7, #24]
    36aa:	7c9b      	ldrb	r3, [r3, #18]
    36ac:	b29a      	uxth	r2, r3
    36ae:	69bb      	ldr	r3, [r7, #24]
    36b0:	7cdb      	ldrb	r3, [r3, #19]
    36b2:	b29b      	uxth	r3, r3
    36b4:	021b      	lsls	r3, r3, #8
    36b6:	b29b      	uxth	r3, r3
    36b8:	4413      	add	r3, r2
    36ba:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    36bc:	8afb      	ldrh	r3, [r7, #22]
    36be:	2b00      	cmp	r3, #0
    36c0:	d10b      	bne.n	36da <usb_d_ep_transfer+0xee>
			dir                 = true;
    36c2:	2301      	movs	r3, #1
    36c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    36c8:	2300      	movs	r3, #0
    36ca:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    36cc:	2301      	movs	r3, #1
    36ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    36d2:	69bb      	ldr	r3, [r7, #24]
    36d4:	2204      	movs	r2, #4
    36d6:	709a      	strb	r2, [r3, #2]
    36d8:	e01f      	b.n	371a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    36da:	69bb      	ldr	r3, [r7, #24]
    36dc:	7b1b      	ldrb	r3, [r3, #12]
    36de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    36e2:	2b00      	cmp	r3, #0
    36e4:	bf14      	ite	ne
    36e6:	2301      	movne	r3, #1
    36e8:	2300      	moveq	r3, #0
    36ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    36ee:	8afa      	ldrh	r2, [r7, #22]
    36f0:	6a3b      	ldr	r3, [r7, #32]
    36f2:	429a      	cmp	r2, r3
    36f4:	d201      	bcs.n	36fa <usb_d_ep_transfer+0x10e>
				len = req_len;
    36f6:	8afb      	ldrh	r3, [r7, #22]
    36f8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    36fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    36fe:	2b00      	cmp	r3, #0
    3700:	d008      	beq.n	3714 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3702:	8afa      	ldrh	r2, [r7, #22]
    3704:	6a3b      	ldr	r3, [r7, #32]
    3706:	429a      	cmp	r2, r3
    3708:	bf8c      	ite	hi
    370a:	2301      	movhi	r3, #1
    370c:	2300      	movls	r3, #0
    370e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3712:	e002      	b.n	371a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3714:	2300      	movs	r3, #0
    3716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	7a18      	ldrb	r0, [r3, #8]
    371e:	687b      	ldr	r3, [r7, #4]
    3720:	681a      	ldr	r2, [r3, #0]
    3722:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3726:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    372a:	9300      	str	r3, [sp, #0]
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	4c08      	ldr	r4, [pc, #32]	; (3750 <usb_d_ep_transfer+0x164>)
    3730:	47a0      	blx	r4
    3732:	6138      	str	r0, [r7, #16]
	return rc;
    3734:	693b      	ldr	r3, [r7, #16]
}
    3736:	4618      	mov	r0, r3
    3738:	372c      	adds	r7, #44	; 0x2c
    373a:	46bd      	mov	sp, r7
    373c:	bd90      	pop	{r4, r7, pc}
    373e:	bf00      	nop
    3740:	00002fa9 	.word	0x00002fa9
    3744:	200005b0 	.word	0x200005b0
    3748:	0000b165 	.word	0x0000b165
    374c:	0000b18b 	.word	0x0000b18b
    3750:	00003029 	.word	0x00003029

00003754 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3754:	b580      	push	{r7, lr}
    3756:	b084      	sub	sp, #16
    3758:	af00      	add	r7, sp, #0
    375a:	4603      	mov	r3, r0
    375c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    375e:	79fb      	ldrb	r3, [r7, #7]
    3760:	4618      	mov	r0, r3
    3762:	4b0e      	ldr	r3, [pc, #56]	; (379c <usb_d_ep_abort+0x48>)
    3764:	4798      	blx	r3
    3766:	4603      	mov	r3, r0
    3768:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    376e:	015b      	lsls	r3, r3, #5
    3770:	4a0b      	ldr	r2, [pc, #44]	; (37a0 <usb_d_ep_abort+0x4c>)
    3772:	4413      	add	r3, r2
    3774:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3776:	f997 300f 	ldrsb.w	r3, [r7, #15]
    377a:	2b00      	cmp	r3, #0
    377c:	db0a      	blt.n	3794 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    377e:	79fb      	ldrb	r3, [r7, #7]
    3780:	4618      	mov	r0, r3
    3782:	4b08      	ldr	r3, [pc, #32]	; (37a4 <usb_d_ep_abort+0x50>)
    3784:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3786:	68bb      	ldr	r3, [r7, #8]
    3788:	2201      	movs	r2, #1
    378a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    378c:	68bb      	ldr	r3, [r7, #8]
    378e:	2204      	movs	r2, #4
    3790:	70da      	strb	r2, [r3, #3]
    3792:	e000      	b.n	3796 <usb_d_ep_abort+0x42>
		return;
    3794:	bf00      	nop
}
    3796:	3710      	adds	r7, #16
    3798:	46bd      	mov	sp, r7
    379a:	bd80      	pop	{r7, pc}
    379c:	00002fa9 	.word	0x00002fa9
    37a0:	200005b0 	.word	0x200005b0
    37a4:	0000a95d 	.word	0x0000a95d

000037a8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b086      	sub	sp, #24
    37ac:	af00      	add	r7, sp, #0
    37ae:	4603      	mov	r3, r0
    37b0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37b2:	79fb      	ldrb	r3, [r7, #7]
    37b4:	4618      	mov	r0, r3
    37b6:	4b1a      	ldr	r3, [pc, #104]	; (3820 <_usb_d_ep_halt_clr+0x78>)
    37b8:	4798      	blx	r3
    37ba:	4603      	mov	r3, r0
    37bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37c2:	015b      	lsls	r3, r3, #5
    37c4:	4a17      	ldr	r2, [pc, #92]	; (3824 <_usb_d_ep_halt_clr+0x7c>)
    37c6:	4413      	add	r3, r2
    37c8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    37ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37ce:	2b00      	cmp	r3, #0
    37d0:	da02      	bge.n	37d8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    37d2:	f06f 0311 	mvn.w	r3, #17
    37d6:	e01f      	b.n	3818 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    37d8:	79fb      	ldrb	r3, [r7, #7]
    37da:	2102      	movs	r1, #2
    37dc:	4618      	mov	r0, r3
    37de:	4b12      	ldr	r3, [pc, #72]	; (3828 <_usb_d_ep_halt_clr+0x80>)
    37e0:	4798      	blx	r3
    37e2:	4603      	mov	r3, r0
    37e4:	2b00      	cmp	r3, #0
    37e6:	d016      	beq.n	3816 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37e8:	79fb      	ldrb	r3, [r7, #7]
    37ea:	2100      	movs	r1, #0
    37ec:	4618      	mov	r0, r3
    37ee:	4b0e      	ldr	r3, [pc, #56]	; (3828 <_usb_d_ep_halt_clr+0x80>)
    37f0:	4798      	blx	r3
    37f2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    37f4:	68fb      	ldr	r3, [r7, #12]
    37f6:	2b00      	cmp	r3, #0
    37f8:	da01      	bge.n	37fe <_usb_d_ep_halt_clr+0x56>
			return rc;
    37fa:	68fb      	ldr	r3, [r7, #12]
    37fc:	e00c      	b.n	3818 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    37fe:	693b      	ldr	r3, [r7, #16]
    3800:	2201      	movs	r2, #1
    3802:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3804:	693b      	ldr	r3, [r7, #16]
    3806:	2203      	movs	r2, #3
    3808:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    380a:	693b      	ldr	r3, [r7, #16]
    380c:	69db      	ldr	r3, [r3, #28]
    380e:	79f8      	ldrb	r0, [r7, #7]
    3810:	2200      	movs	r2, #0
    3812:	2103      	movs	r1, #3
    3814:	4798      	blx	r3
	}
	return ERR_NONE;
    3816:	2300      	movs	r3, #0
}
    3818:	4618      	mov	r0, r3
    381a:	3718      	adds	r7, #24
    381c:	46bd      	mov	sp, r7
    381e:	bd80      	pop	{r7, pc}
    3820:	00002fa9 	.word	0x00002fa9
    3824:	200005b0 	.word	0x200005b0
    3828:	0000a569 	.word	0x0000a569

0000382c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    382c:	b580      	push	{r7, lr}
    382e:	b082      	sub	sp, #8
    3830:	af00      	add	r7, sp, #0
    3832:	4603      	mov	r3, r0
    3834:	460a      	mov	r2, r1
    3836:	71fb      	strb	r3, [r7, #7]
    3838:	4613      	mov	r3, r2
    383a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    383c:	79bb      	ldrb	r3, [r7, #6]
    383e:	2b00      	cmp	r3, #0
    3840:	d105      	bne.n	384e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3842:	79fb      	ldrb	r3, [r7, #7]
    3844:	4618      	mov	r0, r3
    3846:	4b0c      	ldr	r3, [pc, #48]	; (3878 <usb_d_ep_halt+0x4c>)
    3848:	4798      	blx	r3
    384a:	4603      	mov	r3, r0
    384c:	e00f      	b.n	386e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    384e:	79bb      	ldrb	r3, [r7, #6]
    3850:	2b01      	cmp	r3, #1
    3852:	d106      	bne.n	3862 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3854:	79fb      	ldrb	r3, [r7, #7]
    3856:	2101      	movs	r1, #1
    3858:	4618      	mov	r0, r3
    385a:	4b08      	ldr	r3, [pc, #32]	; (387c <usb_d_ep_halt+0x50>)
    385c:	4798      	blx	r3
    385e:	4603      	mov	r3, r0
    3860:	e005      	b.n	386e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3862:	79fb      	ldrb	r3, [r7, #7]
    3864:	2102      	movs	r1, #2
    3866:	4618      	mov	r0, r3
    3868:	4b04      	ldr	r3, [pc, #16]	; (387c <usb_d_ep_halt+0x50>)
    386a:	4798      	blx	r3
    386c:	4603      	mov	r3, r0
	}
}
    386e:	4618      	mov	r0, r3
    3870:	3708      	adds	r7, #8
    3872:	46bd      	mov	sp, r7
    3874:	bd80      	pop	{r7, pc}
    3876:	bf00      	nop
    3878:	000037a9 	.word	0x000037a9
    387c:	0000a569 	.word	0x0000a569

00003880 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3880:	b580      	push	{r7, lr}
    3882:	b086      	sub	sp, #24
    3884:	af00      	add	r7, sp, #0
    3886:	4603      	mov	r3, r0
    3888:	603a      	str	r2, [r7, #0]
    388a:	71fb      	strb	r3, [r7, #7]
    388c:	460b      	mov	r3, r1
    388e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3890:	79fb      	ldrb	r3, [r7, #7]
    3892:	4618      	mov	r0, r3
    3894:	4b16      	ldr	r3, [pc, #88]	; (38f0 <usb_d_ep_register_callback+0x70>)
    3896:	4798      	blx	r3
    3898:	4603      	mov	r3, r0
    389a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    389c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38a0:	015b      	lsls	r3, r3, #5
    38a2:	4a14      	ldr	r2, [pc, #80]	; (38f4 <usb_d_ep_register_callback+0x74>)
    38a4:	4413      	add	r3, r2
    38a6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    38a8:	683b      	ldr	r3, [r7, #0]
    38aa:	2b00      	cmp	r3, #0
    38ac:	d001      	beq.n	38b2 <usb_d_ep_register_callback+0x32>
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	e000      	b.n	38b4 <usb_d_ep_register_callback+0x34>
    38b2:	4b11      	ldr	r3, [pc, #68]	; (38f8 <usb_d_ep_register_callback+0x78>)
    38b4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    38b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38ba:	2b00      	cmp	r3, #0
    38bc:	db13      	blt.n	38e6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    38be:	79bb      	ldrb	r3, [r7, #6]
    38c0:	2b01      	cmp	r3, #1
    38c2:	d008      	beq.n	38d6 <usb_d_ep_register_callback+0x56>
    38c4:	2b02      	cmp	r3, #2
    38c6:	d00a      	beq.n	38de <usb_d_ep_register_callback+0x5e>
    38c8:	2b00      	cmp	r3, #0
    38ca:	d000      	beq.n	38ce <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    38cc:	e00c      	b.n	38e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    38ce:	693b      	ldr	r3, [r7, #16]
    38d0:	68fa      	ldr	r2, [r7, #12]
    38d2:	615a      	str	r2, [r3, #20]
		break;
    38d4:	e008      	b.n	38e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    38d6:	693b      	ldr	r3, [r7, #16]
    38d8:	68fa      	ldr	r2, [r7, #12]
    38da:	619a      	str	r2, [r3, #24]
		break;
    38dc:	e004      	b.n	38e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    38de:	693b      	ldr	r3, [r7, #16]
    38e0:	68fa      	ldr	r2, [r7, #12]
    38e2:	61da      	str	r2, [r3, #28]
		break;
    38e4:	e000      	b.n	38e8 <usb_d_ep_register_callback+0x68>
		return;
    38e6:	bf00      	nop
	}
}
    38e8:	3718      	adds	r7, #24
    38ea:	46bd      	mov	sp, r7
    38ec:	bd80      	pop	{r7, pc}
    38ee:	bf00      	nop
    38f0:	00002fa9 	.word	0x00002fa9
    38f4:	200005b0 	.word	0x200005b0
    38f8:	0000307d 	.word	0x0000307d

000038fc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    38fc:	b480      	push	{r7}
    38fe:	b085      	sub	sp, #20
    3900:	af00      	add	r7, sp, #0
    3902:	4603      	mov	r3, r0
    3904:	60b9      	str	r1, [r7, #8]
    3906:	607a      	str	r2, [r7, #4]
    3908:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    390a:	7bfb      	ldrb	r3, [r7, #15]
    390c:	f083 0301 	eor.w	r3, r3, #1
    3910:	b2db      	uxtb	r3, r3
    3912:	2b00      	cmp	r3, #0
    3914:	d000      	beq.n	3918 <assert+0x1c>
		__asm("BKPT #0");
    3916:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3918:	bf00      	nop
    391a:	3714      	adds	r7, #20
    391c:	46bd      	mov	sp, r7
    391e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3922:	4770      	bx	lr

00003924 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3924:	b480      	push	{r7}
    3926:	b085      	sub	sp, #20
    3928:	af00      	add	r7, sp, #0
    392a:	6078      	str	r0, [r7, #4]
    392c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    392e:	687b      	ldr	r3, [r7, #4]
    3930:	681b      	ldr	r3, [r3, #0]
    3932:	60fb      	str	r3, [r7, #12]
    3934:	e008      	b.n	3948 <is_list_element+0x24>
		if (it == element) {
    3936:	68fa      	ldr	r2, [r7, #12]
    3938:	683b      	ldr	r3, [r7, #0]
    393a:	429a      	cmp	r2, r3
    393c:	d101      	bne.n	3942 <is_list_element+0x1e>
			return true;
    393e:	2301      	movs	r3, #1
    3940:	e006      	b.n	3950 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	60fb      	str	r3, [r7, #12]
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	2b00      	cmp	r3, #0
    394c:	d1f3      	bne.n	3936 <is_list_element+0x12>
		}
	}

	return false;
    394e:	2300      	movs	r3, #0
}
    3950:	4618      	mov	r0, r3
    3952:	3714      	adds	r7, #20
    3954:	46bd      	mov	sp, r7
    3956:	f85d 7b04 	ldr.w	r7, [sp], #4
    395a:	4770      	bx	lr

0000395c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    395c:	b580      	push	{r7, lr}
    395e:	b082      	sub	sp, #8
    3960:	af00      	add	r7, sp, #0
    3962:	6078      	str	r0, [r7, #4]
    3964:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3966:	6839      	ldr	r1, [r7, #0]
    3968:	6878      	ldr	r0, [r7, #4]
    396a:	4b0f      	ldr	r3, [pc, #60]	; (39a8 <list_insert_as_head+0x4c>)
    396c:	4798      	blx	r3
    396e:	4603      	mov	r3, r0
    3970:	2b00      	cmp	r3, #0
    3972:	bf14      	ite	ne
    3974:	2301      	movne	r3, #1
    3976:	2300      	moveq	r3, #0
    3978:	b2db      	uxtb	r3, r3
    397a:	f083 0301 	eor.w	r3, r3, #1
    397e:	b2db      	uxtb	r3, r3
    3980:	f003 0301 	and.w	r3, r3, #1
    3984:	b2db      	uxtb	r3, r3
    3986:	2239      	movs	r2, #57	; 0x39
    3988:	4908      	ldr	r1, [pc, #32]	; (39ac <list_insert_as_head+0x50>)
    398a:	4618      	mov	r0, r3
    398c:	4b08      	ldr	r3, [pc, #32]	; (39b0 <list_insert_as_head+0x54>)
    398e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3990:	687b      	ldr	r3, [r7, #4]
    3992:	681a      	ldr	r2, [r3, #0]
    3994:	683b      	ldr	r3, [r7, #0]
    3996:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	683a      	ldr	r2, [r7, #0]
    399c:	601a      	str	r2, [r3, #0]
}
    399e:	bf00      	nop
    39a0:	3708      	adds	r7, #8
    39a2:	46bd      	mov	sp, r7
    39a4:	bd80      	pop	{r7, pc}
    39a6:	bf00      	nop
    39a8:	00003925 	.word	0x00003925
    39ac:	0000eec0 	.word	0x0000eec0
    39b0:	000038fd 	.word	0x000038fd

000039b4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    39b4:	b480      	push	{r7}
    39b6:	b083      	sub	sp, #12
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
    39bc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	681a      	ldr	r2, [r3, #0]
    39c2:	683b      	ldr	r3, [r7, #0]
    39c4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	683a      	ldr	r2, [r7, #0]
    39ca:	601a      	str	r2, [r3, #0]
}
    39cc:	bf00      	nop
    39ce:	370c      	adds	r7, #12
    39d0:	46bd      	mov	sp, r7
    39d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    39d6:	4770      	bx	lr

000039d8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    39d8:	b580      	push	{r7, lr}
    39da:	b084      	sub	sp, #16
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
    39e0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    39e8:	6839      	ldr	r1, [r7, #0]
    39ea:	6878      	ldr	r0, [r7, #4]
    39ec:	4b16      	ldr	r3, [pc, #88]	; (3a48 <list_insert_at_end+0x70>)
    39ee:	4798      	blx	r3
    39f0:	4603      	mov	r3, r0
    39f2:	2b00      	cmp	r3, #0
    39f4:	bf14      	ite	ne
    39f6:	2301      	movne	r3, #1
    39f8:	2300      	moveq	r3, #0
    39fa:	b2db      	uxtb	r3, r3
    39fc:	f083 0301 	eor.w	r3, r3, #1
    3a00:	b2db      	uxtb	r3, r3
    3a02:	f003 0301 	and.w	r3, r3, #1
    3a06:	b2db      	uxtb	r3, r3
    3a08:	224f      	movs	r2, #79	; 0x4f
    3a0a:	4910      	ldr	r1, [pc, #64]	; (3a4c <list_insert_at_end+0x74>)
    3a0c:	4618      	mov	r0, r3
    3a0e:	4b10      	ldr	r3, [pc, #64]	; (3a50 <list_insert_at_end+0x78>)
    3a10:	4798      	blx	r3

	if (!list->head) {
    3a12:	687b      	ldr	r3, [r7, #4]
    3a14:	681b      	ldr	r3, [r3, #0]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d109      	bne.n	3a2e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	683a      	ldr	r2, [r7, #0]
    3a1e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3a20:	683b      	ldr	r3, [r7, #0]
    3a22:	2200      	movs	r2, #0
    3a24:	601a      	str	r2, [r3, #0]
		return;
    3a26:	e00c      	b.n	3a42 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	681b      	ldr	r3, [r3, #0]
    3a2c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3a2e:	68fb      	ldr	r3, [r7, #12]
    3a30:	681b      	ldr	r3, [r3, #0]
    3a32:	2b00      	cmp	r3, #0
    3a34:	d1f8      	bne.n	3a28 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3a36:	68fb      	ldr	r3, [r7, #12]
    3a38:	683a      	ldr	r2, [r7, #0]
    3a3a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3a3c:	683b      	ldr	r3, [r7, #0]
    3a3e:	2200      	movs	r2, #0
    3a40:	601a      	str	r2, [r3, #0]
}
    3a42:	3710      	adds	r7, #16
    3a44:	46bd      	mov	sp, r7
    3a46:	bd80      	pop	{r7, pc}
    3a48:	00003925 	.word	0x00003925
    3a4c:	0000eec0 	.word	0x0000eec0
    3a50:	000038fd 	.word	0x000038fd

00003a54 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3a54:	b480      	push	{r7}
    3a56:	b085      	sub	sp, #20
    3a58:	af00      	add	r7, sp, #0
    3a5a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	2b00      	cmp	r3, #0
    3a62:	d009      	beq.n	3a78 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	681b      	ldr	r3, [r3, #0]
    3a68:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3a6a:	687b      	ldr	r3, [r7, #4]
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	681a      	ldr	r2, [r3, #0]
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3a74:	68fb      	ldr	r3, [r7, #12]
    3a76:	e000      	b.n	3a7a <list_remove_head+0x26>
	}

	return NULL;
    3a78:	2300      	movs	r3, #0
}
    3a7a:	4618      	mov	r0, r3
    3a7c:	3714      	adds	r7, #20
    3a7e:	46bd      	mov	sp, r7
    3a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a84:	4770      	bx	lr

00003a86 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3a86:	b480      	push	{r7}
    3a88:	b085      	sub	sp, #20
    3a8a:	af00      	add	r7, sp, #0
    3a8c:	6078      	str	r0, [r7, #4]
    3a8e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3a90:	683b      	ldr	r3, [r7, #0]
    3a92:	2b00      	cmp	r3, #0
    3a94:	d101      	bne.n	3a9a <list_delete_element+0x14>
		return false;
    3a96:	2300      	movs	r3, #0
    3a98:	e024      	b.n	3ae4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	681a      	ldr	r2, [r3, #0]
    3a9e:	683b      	ldr	r3, [r7, #0]
    3aa0:	429a      	cmp	r2, r3
    3aa2:	d106      	bne.n	3ab2 <list_delete_element+0x2c>
		list->head = list->head->next;
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	681b      	ldr	r3, [r3, #0]
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	601a      	str	r2, [r3, #0]
		return true;
    3aae:	2301      	movs	r3, #1
    3ab0:	e018      	b.n	3ae4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3ab8:	e002      	b.n	3ac0 <list_delete_element+0x3a>
			it = it->next;
    3aba:	68fb      	ldr	r3, [r7, #12]
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3ac0:	68fb      	ldr	r3, [r7, #12]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d004      	beq.n	3ad0 <list_delete_element+0x4a>
    3ac6:	68fb      	ldr	r3, [r7, #12]
    3ac8:	681a      	ldr	r2, [r3, #0]
    3aca:	683b      	ldr	r3, [r7, #0]
    3acc:	429a      	cmp	r2, r3
    3ace:	d1f4      	bne.n	3aba <list_delete_element+0x34>
		}
		if (it) {
    3ad0:	68fb      	ldr	r3, [r7, #12]
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	d005      	beq.n	3ae2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3ad6:	683b      	ldr	r3, [r7, #0]
    3ad8:	681a      	ldr	r2, [r3, #0]
    3ada:	68fb      	ldr	r3, [r7, #12]
    3adc:	601a      	str	r2, [r3, #0]
			return true;
    3ade:	2301      	movs	r3, #1
    3ae0:	e000      	b.n	3ae4 <list_delete_element+0x5e>
		}
	}

	return false;
    3ae2:	2300      	movs	r3, #0
}
    3ae4:	4618      	mov	r0, r3
    3ae6:	3714      	adds	r7, #20
    3ae8:	46bd      	mov	sp, r7
    3aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aee:	4770      	bx	lr

00003af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3af0:	b480      	push	{r7}
    3af2:	b083      	sub	sp, #12
    3af4:	af00      	add	r7, sp, #0
    3af6:	4603      	mov	r3, r0
    3af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3afe:	2b00      	cmp	r3, #0
    3b00:	db0b      	blt.n	3b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b02:	4909      	ldr	r1, [pc, #36]	; (3b28 <__NVIC_EnableIRQ+0x38>)
    3b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b08:	095b      	lsrs	r3, r3, #5
    3b0a:	88fa      	ldrh	r2, [r7, #6]
    3b0c:	f002 021f 	and.w	r2, r2, #31
    3b10:	2001      	movs	r0, #1
    3b12:	fa00 f202 	lsl.w	r2, r0, r2
    3b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b1a:	bf00      	nop
    3b1c:	370c      	adds	r7, #12
    3b1e:	46bd      	mov	sp, r7
    3b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop
    3b28:	e000e100 	.word	0xe000e100

00003b2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3b2c:	b480      	push	{r7}
    3b2e:	b083      	sub	sp, #12
    3b30:	af00      	add	r7, sp, #0
    3b32:	4603      	mov	r3, r0
    3b34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	db10      	blt.n	3b60 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b3e:	490b      	ldr	r1, [pc, #44]	; (3b6c <__NVIC_DisableIRQ+0x40>)
    3b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b44:	095b      	lsrs	r3, r3, #5
    3b46:	88fa      	ldrh	r2, [r7, #6]
    3b48:	f002 021f 	and.w	r2, r2, #31
    3b4c:	2001      	movs	r0, #1
    3b4e:	fa00 f202 	lsl.w	r2, r0, r2
    3b52:	3320      	adds	r3, #32
    3b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3b58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b5c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3b60:	bf00      	nop
    3b62:	370c      	adds	r7, #12
    3b64:	46bd      	mov	sp, r7
    3b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b6a:	4770      	bx	lr
    3b6c:	e000e100 	.word	0xe000e100

00003b70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3b70:	b480      	push	{r7}
    3b72:	b083      	sub	sp, #12
    3b74:	af00      	add	r7, sp, #0
    3b76:	4603      	mov	r3, r0
    3b78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	db0c      	blt.n	3b9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b82:	4909      	ldr	r1, [pc, #36]	; (3ba8 <__NVIC_ClearPendingIRQ+0x38>)
    3b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b88:	095b      	lsrs	r3, r3, #5
    3b8a:	88fa      	ldrh	r2, [r7, #6]
    3b8c:	f002 021f 	and.w	r2, r2, #31
    3b90:	2001      	movs	r0, #1
    3b92:	fa00 f202 	lsl.w	r2, r0, r2
    3b96:	3360      	adds	r3, #96	; 0x60
    3b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b9c:	bf00      	nop
    3b9e:	370c      	adds	r7, #12
    3ba0:	46bd      	mov	sp, r7
    3ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba6:	4770      	bx	lr
    3ba8:	e000e100 	.word	0xe000e100

00003bac <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3bac:	b480      	push	{r7}
    3bae:	b083      	sub	sp, #12
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3bb4:	687b      	ldr	r3, [r7, #4]
    3bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3bb8:	095b      	lsrs	r3, r3, #5
    3bba:	f003 0301 	and.w	r3, r3, #1
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	bf14      	ite	ne
    3bc2:	2301      	movne	r3, #1
    3bc4:	2300      	moveq	r3, #0
    3bc6:	b2db      	uxtb	r3, r3
}
    3bc8:	4618      	mov	r0, r3
    3bca:	370c      	adds	r7, #12
    3bcc:	46bd      	mov	sp, r7
    3bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd2:	4770      	bx	lr

00003bd4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3bd4:	b480      	push	{r7}
    3bd6:	b083      	sub	sp, #12
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
    3bdc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	683a      	ldr	r2, [r7, #0]
    3be2:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3be4:	bf00      	nop
    3be6:	370c      	adds	r7, #12
    3be8:	46bd      	mov	sp, r7
    3bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bee:	4770      	bx	lr

00003bf0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3bf0:	b480      	push	{r7}
    3bf2:	b083      	sub	sp, #12
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	6078      	str	r0, [r7, #4]
    3bf8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3bfa:	687b      	ldr	r3, [r7, #4]
    3bfc:	683a      	ldr	r2, [r7, #0]
    3bfe:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c00:	bf00      	nop
    3c02:	370c      	adds	r7, #12
    3c04:	46bd      	mov	sp, r7
    3c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c0a:	4770      	bx	lr

00003c0c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3c0c:	b480      	push	{r7}
    3c0e:	b083      	sub	sp, #12
    3c10:	af00      	add	r7, sp, #0
    3c12:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	699b      	ldr	r3, [r3, #24]
    3c18:	f043 0201 	orr.w	r2, r3, #1
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c20:	bf00      	nop
    3c22:	370c      	adds	r7, #12
    3c24:	46bd      	mov	sp, r7
    3c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c2a:	4770      	bx	lr

00003c2c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3c2c:	b480      	push	{r7}
    3c2e:	b085      	sub	sp, #20
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	699b      	ldr	r3, [r3, #24]
    3c38:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3c3a:	68fb      	ldr	r3, [r7, #12]
    3c3c:	f003 0301 	and.w	r3, r3, #1
    3c40:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3c42:	68fb      	ldr	r3, [r7, #12]
    3c44:	2b00      	cmp	r3, #0
    3c46:	bf14      	ite	ne
    3c48:	2301      	movne	r3, #1
    3c4a:	2300      	moveq	r3, #0
    3c4c:	b2db      	uxtb	r3, r3
}
    3c4e:	4618      	mov	r0, r3
    3c50:	3714      	adds	r7, #20
    3c52:	46bd      	mov	sp, r7
    3c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c58:	4770      	bx	lr

00003c5a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3c5a:	b480      	push	{r7}
    3c5c:	b083      	sub	sp, #12
    3c5e:	af00      	add	r7, sp, #0
    3c60:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	699b      	ldr	r3, [r3, #24]
    3c66:	f023 0201 	bic.w	r2, r3, #1
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c6e:	bf00      	nop
    3c70:	370c      	adds	r7, #12
    3c72:	46bd      	mov	sp, r7
    3c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c78:	4770      	bx	lr

00003c7a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3c7a:	b480      	push	{r7}
    3c7c:	b083      	sub	sp, #12
    3c7e:	af00      	add	r7, sp, #0
    3c80:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	699b      	ldr	r3, [r3, #24]
    3c86:	f043 0202 	orr.w	r2, r3, #2
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c8e:	bf00      	nop
    3c90:	370c      	adds	r7, #12
    3c92:	46bd      	mov	sp, r7
    3c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c98:	4770      	bx	lr

00003c9a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3c9a:	b480      	push	{r7}
    3c9c:	b083      	sub	sp, #12
    3c9e:	af00      	add	r7, sp, #0
    3ca0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	699b      	ldr	r3, [r3, #24]
    3ca6:	f023 0202 	bic.w	r2, r3, #2
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cae:	bf00      	nop
    3cb0:	370c      	adds	r7, #12
    3cb2:	46bd      	mov	sp, r7
    3cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cb8:	4770      	bx	lr

00003cba <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3cba:	b480      	push	{r7}
    3cbc:	b083      	sub	sp, #12
    3cbe:	af00      	add	r7, sp, #0
    3cc0:	6078      	str	r0, [r7, #4]
    3cc2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	699a      	ldr	r2, [r3, #24]
    3cc8:	683b      	ldr	r3, [r7, #0]
    3cca:	431a      	orrs	r2, r3
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cd0:	bf00      	nop
    3cd2:	370c      	adds	r7, #12
    3cd4:	46bd      	mov	sp, r7
    3cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cda:	4770      	bx	lr

00003cdc <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3cdc:	b480      	push	{r7}
    3cde:	b083      	sub	sp, #12
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	6078      	str	r0, [r7, #4]
    3ce4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	683a      	ldr	r2, [r7, #0]
    3cea:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cec:	bf00      	nop
    3cee:	370c      	adds	r7, #12
    3cf0:	46bd      	mov	sp, r7
    3cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf6:	4770      	bx	lr

00003cf8 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3cf8:	b480      	push	{r7}
    3cfa:	b083      	sub	sp, #12
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	683a      	ldr	r2, [r7, #0]
    3d06:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d08:	bf00      	nop
    3d0a:	370c      	adds	r7, #12
    3d0c:	46bd      	mov	sp, r7
    3d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d12:	4770      	bx	lr

00003d14 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3d14:	b480      	push	{r7}
    3d16:	b083      	sub	sp, #12
    3d18:	af00      	add	r7, sp, #0
    3d1a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3d1c:	687b      	ldr	r3, [r7, #4]
    3d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3d20:	4618      	mov	r0, r3
    3d22:	370c      	adds	r7, #12
    3d24:	46bd      	mov	sp, r7
    3d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2a:	4770      	bx	lr

00003d2c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3d2c:	b480      	push	{r7}
    3d2e:	b083      	sub	sp, #12
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	683a      	ldr	r2, [r7, #0]
    3d3a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d3c:	bf00      	nop
    3d3e:	370c      	adds	r7, #12
    3d40:	46bd      	mov	sp, r7
    3d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d46:	4770      	bx	lr

00003d48 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3d48:	b480      	push	{r7}
    3d4a:	b083      	sub	sp, #12
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	6078      	str	r0, [r7, #4]
    3d50:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	683a      	ldr	r2, [r7, #0]
    3d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d5a:	bf00      	nop
    3d5c:	370c      	adds	r7, #12
    3d5e:	46bd      	mov	sp, r7
    3d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d64:	4770      	bx	lr

00003d66 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3d66:	b480      	push	{r7}
    3d68:	b083      	sub	sp, #12
    3d6a:	af00      	add	r7, sp, #0
    3d6c:	6078      	str	r0, [r7, #4]
    3d6e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	683a      	ldr	r2, [r7, #0]
    3d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d78:	bf00      	nop
    3d7a:	370c      	adds	r7, #12
    3d7c:	46bd      	mov	sp, r7
    3d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d82:	4770      	bx	lr

00003d84 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3d84:	b480      	push	{r7}
    3d86:	b083      	sub	sp, #12
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
    3d8c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	683a      	ldr	r2, [r7, #0]
    3d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d96:	bf00      	nop
    3d98:	370c      	adds	r7, #12
    3d9a:	46bd      	mov	sp, r7
    3d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3da0:	4770      	bx	lr

00003da2 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3da2:	b480      	push	{r7}
    3da4:	b083      	sub	sp, #12
    3da6:	af00      	add	r7, sp, #0
    3da8:	6078      	str	r0, [r7, #4]
    3daa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3dac:	687b      	ldr	r3, [r7, #4]
    3dae:	683a      	ldr	r2, [r7, #0]
    3db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3db4:	bf00      	nop
    3db6:	370c      	adds	r7, #12
    3db8:	46bd      	mov	sp, r7
    3dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dbe:	4770      	bx	lr

00003dc0 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3dc0:	b480      	push	{r7}
    3dc2:	b083      	sub	sp, #12
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    3dc8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	683a      	ldr	r2, [r7, #0]
    3dce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dd2:	bf00      	nop
    3dd4:	370c      	adds	r7, #12
    3dd6:	46bd      	mov	sp, r7
    3dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ddc:	4770      	bx	lr

00003dde <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3dde:	b480      	push	{r7}
    3de0:	b083      	sub	sp, #12
    3de2:	af00      	add	r7, sp, #0
    3de4:	6078      	str	r0, [r7, #4]
    3de6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	683a      	ldr	r2, [r7, #0]
    3dec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3df0:	bf00      	nop
    3df2:	370c      	adds	r7, #12
    3df4:	46bd      	mov	sp, r7
    3df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfa:	4770      	bx	lr

00003dfc <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b083      	sub	sp, #12
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
    3e04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	683a      	ldr	r2, [r7, #0]
    3e0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e0e:	bf00      	nop
    3e10:	370c      	adds	r7, #12
    3e12:	46bd      	mov	sp, r7
    3e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e18:	4770      	bx	lr

00003e1a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3e1a:	b480      	push	{r7}
    3e1c:	b083      	sub	sp, #12
    3e1e:	af00      	add	r7, sp, #0
    3e20:	6078      	str	r0, [r7, #4]
    3e22:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	683a      	ldr	r2, [r7, #0]
    3e28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e2c:	bf00      	nop
    3e2e:	370c      	adds	r7, #12
    3e30:	46bd      	mov	sp, r7
    3e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e36:	4770      	bx	lr

00003e38 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3e38:	b480      	push	{r7}
    3e3a:	b083      	sub	sp, #12
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
    3e40:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	683a      	ldr	r2, [r7, #0]
    3e46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e4a:	bf00      	nop
    3e4c:	370c      	adds	r7, #12
    3e4e:	46bd      	mov	sp, r7
    3e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e54:	4770      	bx	lr
	...

00003e58 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b082      	sub	sp, #8
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
    3e60:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	683a      	ldr	r2, [r7, #0]
    3e66:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3e68:	687b      	ldr	r3, [r7, #4]
    3e6a:	681b      	ldr	r3, [r3, #0]
    3e6c:	4618      	mov	r0, r3
    3e6e:	4b55      	ldr	r3, [pc, #340]	; (3fc4 <_can_async_init+0x16c>)
    3e70:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3e72:	bf00      	nop
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	4618      	mov	r0, r3
    3e7a:	4b53      	ldr	r3, [pc, #332]	; (3fc8 <_can_async_init+0x170>)
    3e7c:	4798      	blx	r3
    3e7e:	4603      	mov	r3, r0
    3e80:	f083 0301 	eor.w	r3, r3, #1
    3e84:	b2db      	uxtb	r3, r3
    3e86:	2b00      	cmp	r3, #0
    3e88:	d1f4      	bne.n	3e74 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	4618      	mov	r0, r3
    3e90:	4b4e      	ldr	r3, [pc, #312]	; (3fcc <_can_async_init+0x174>)
    3e92:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3e94:	683b      	ldr	r3, [r7, #0]
    3e96:	4a4e      	ldr	r2, [pc, #312]	; (3fd0 <_can_async_init+0x178>)
    3e98:	4293      	cmp	r3, r2
    3e9a:	d17a      	bne.n	3f92 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3e9c:	4a4d      	ldr	r2, [pc, #308]	; (3fd4 <_can_async_init+0x17c>)
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	4a4c      	ldr	r2, [pc, #304]	; (3fd8 <_can_async_init+0x180>)
    3ea6:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	f44f 7140 	mov.w	r1, #768	; 0x300
    3eb0:	4618      	mov	r0, r3
    3eb2:	4b4a      	ldr	r3, [pc, #296]	; (3fdc <_can_async_init+0x184>)
    3eb4:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	2102      	movs	r1, #2
    3ebc:	4618      	mov	r0, r3
    3ebe:	4b48      	ldr	r3, [pc, #288]	; (3fe0 <_can_async_init+0x188>)
    3ec0:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	681b      	ldr	r3, [r3, #0]
    3ec6:	4947      	ldr	r1, [pc, #284]	; (3fe4 <_can_async_init+0x18c>)
    3ec8:	4618      	mov	r0, r3
    3eca:	4b47      	ldr	r3, [pc, #284]	; (3fe8 <_can_async_init+0x190>)
    3ecc:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	681b      	ldr	r3, [r3, #0]
    3ed2:	4946      	ldr	r1, [pc, #280]	; (3fec <_can_async_init+0x194>)
    3ed4:	4618      	mov	r0, r3
    3ed6:	4b46      	ldr	r3, [pc, #280]	; (3ff0 <_can_async_init+0x198>)
    3ed8:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	681a      	ldr	r2, [r3, #0]
    3ede:	4b45      	ldr	r3, [pc, #276]	; (3ff4 <_can_async_init+0x19c>)
    3ee0:	b29b      	uxth	r3, r3
    3ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3eea:	4619      	mov	r1, r3
    3eec:	4610      	mov	r0, r2
    3eee:	4b42      	ldr	r3, [pc, #264]	; (3ff8 <_can_async_init+0x1a0>)
    3ef0:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	2107      	movs	r1, #7
    3ef8:	4618      	mov	r0, r3
    3efa:	4b40      	ldr	r3, [pc, #256]	; (3ffc <_can_async_init+0x1a4>)
    3efc:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	681b      	ldr	r3, [r3, #0]
    3f02:	2107      	movs	r1, #7
    3f04:	4618      	mov	r0, r3
    3f06:	4b3e      	ldr	r3, [pc, #248]	; (4000 <_can_async_init+0x1a8>)
    3f08:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	681a      	ldr	r2, [r3, #0]
    3f0e:	4b3d      	ldr	r3, [pc, #244]	; (4004 <_can_async_init+0x1ac>)
    3f10:	b29b      	uxth	r3, r3
    3f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f16:	4619      	mov	r1, r3
    3f18:	4610      	mov	r0, r2
    3f1a:	4b3b      	ldr	r3, [pc, #236]	; (4008 <_can_async_init+0x1b0>)
    3f1c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	681a      	ldr	r2, [r3, #0]
    3f22:	4b3a      	ldr	r3, [pc, #232]	; (400c <_can_async_init+0x1b4>)
    3f24:	b29b      	uxth	r3, r3
    3f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f2a:	4619      	mov	r1, r3
    3f2c:	4610      	mov	r0, r2
    3f2e:	4b38      	ldr	r3, [pc, #224]	; (4010 <_can_async_init+0x1b8>)
    3f30:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	2108      	movs	r1, #8
    3f38:	4618      	mov	r0, r3
    3f3a:	4b36      	ldr	r3, [pc, #216]	; (4014 <_can_async_init+0x1bc>)
    3f3c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	681a      	ldr	r2, [r3, #0]
    3f42:	4b35      	ldr	r3, [pc, #212]	; (4018 <_can_async_init+0x1c0>)
    3f44:	b29b      	uxth	r3, r3
    3f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3f4a:	4619      	mov	r1, r3
    3f4c:	4610      	mov	r0, r2
    3f4e:	4b33      	ldr	r3, [pc, #204]	; (401c <_can_async_init+0x1c4>)
    3f50:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	681a      	ldr	r2, [r3, #0]
    3f56:	4b32      	ldr	r3, [pc, #200]	; (4020 <_can_async_init+0x1c8>)
    3f58:	b29b      	uxth	r3, r3
    3f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f5e:	4619      	mov	r1, r3
    3f60:	4610      	mov	r0, r2
    3f62:	4b30      	ldr	r3, [pc, #192]	; (4024 <_can_async_init+0x1cc>)
    3f64:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3f6e:	4618      	mov	r0, r3
    3f70:	4b2d      	ldr	r3, [pc, #180]	; (4028 <_can_async_init+0x1d0>)
    3f72:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3f74:	204f      	movs	r0, #79	; 0x4f
    3f76:	4b2d      	ldr	r3, [pc, #180]	; (402c <_can_async_init+0x1d4>)
    3f78:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3f7a:	204f      	movs	r0, #79	; 0x4f
    3f7c:	4b2c      	ldr	r3, [pc, #176]	; (4030 <_can_async_init+0x1d8>)
    3f7e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3f80:	204f      	movs	r0, #79	; 0x4f
    3f82:	4b2c      	ldr	r3, [pc, #176]	; (4034 <_can_async_init+0x1dc>)
    3f84:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	2101      	movs	r1, #1
    3f8c:	4618      	mov	r0, r3
    3f8e:	4b2a      	ldr	r3, [pc, #168]	; (4038 <_can_async_init+0x1e0>)
    3f90:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	4618      	mov	r0, r3
    3f98:	4b28      	ldr	r3, [pc, #160]	; (403c <_can_async_init+0x1e4>)
    3f9a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	4618      	mov	r0, r3
    3fa2:	4b27      	ldr	r3, [pc, #156]	; (4040 <_can_async_init+0x1e8>)
    3fa4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3fa6:	bf00      	nop
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	4618      	mov	r0, r3
    3fae:	4b06      	ldr	r3, [pc, #24]	; (3fc8 <_can_async_init+0x170>)
    3fb0:	4798      	blx	r3
    3fb2:	4603      	mov	r3, r0
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d1f7      	bne.n	3fa8 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3fb8:	2300      	movs	r3, #0
}
    3fba:	4618      	mov	r0, r3
    3fbc:	3708      	adds	r7, #8
    3fbe:	46bd      	mov	sp, r7
    3fc0:	bd80      	pop	{r7, pc}
    3fc2:	bf00      	nop
    3fc4:	00003c0d 	.word	0x00003c0d
    3fc8:	00003c2d 	.word	0x00003c2d
    3fcc:	00003c7b 	.word	0x00003c7b
    3fd0:	42000400 	.word	0x42000400
    3fd4:	200006d0 	.word	0x200006d0
    3fd8:	20000004 	.word	0x20000004
    3fdc:	00003cbb 	.word	0x00003cbb
    3fe0:	00003bd5 	.word	0x00003bd5
    3fe4:	00010c01 	.word	0x00010c01
    3fe8:	00003cdd 	.word	0x00003cdd
    3fec:	00010c10 	.word	0x00010c10
    3ff0:	00003bf1 	.word	0x00003bf1
    3ff4:	20001010 	.word	0x20001010
    3ff8:	00003dc1 	.word	0x00003dc1
    3ffc:	00003ddf 	.word	0x00003ddf
    4000:	00003e1b 	.word	0x00003e1b
    4004:	20000fc8 	.word	0x20000fc8
    4008:	00003dfd 	.word	0x00003dfd
    400c:	20000630 	.word	0x20000630
    4010:	00003e39 	.word	0x00003e39
    4014:	00003d49 	.word	0x00003d49
    4018:	20000640 	.word	0x20000640
    401c:	00003d67 	.word	0x00003d67
    4020:	200006c0 	.word	0x200006c0
    4024:	00003d85 	.word	0x00003d85
    4028:	00003da3 	.word	0x00003da3
    402c:	00003b2d 	.word	0x00003b2d
    4030:	00003b71 	.word	0x00003b71
    4034:	00003af1 	.word	0x00003af1
    4038:	00003d2d 	.word	0x00003d2d
    403c:	00003c9b 	.word	0x00003c9b
    4040:	00003c5b 	.word	0x00003c5b

00004044 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4044:	b590      	push	{r4, r7, lr}
    4046:	b083      	sub	sp, #12
    4048:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    404a:	4b2c      	ldr	r3, [pc, #176]	; (40fc <CAN1_Handler+0xb8>)
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	4618      	mov	r0, r3
    4056:	4b2a      	ldr	r3, [pc, #168]	; (4100 <CAN1_Handler+0xbc>)
    4058:	4798      	blx	r3
    405a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    405c:	683b      	ldr	r3, [r7, #0]
    405e:	f003 0301 	and.w	r3, r3, #1
    4062:	2b00      	cmp	r3, #0
    4064:	d003      	beq.n	406e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	689b      	ldr	r3, [r3, #8]
    406a:	6878      	ldr	r0, [r7, #4]
    406c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    406e:	683b      	ldr	r3, [r7, #0]
    4070:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4074:	2b00      	cmp	r3, #0
    4076:	d003      	beq.n	4080 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	685b      	ldr	r3, [r3, #4]
    407c:	6878      	ldr	r0, [r7, #4]
    407e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4080:	683b      	ldr	r3, [r7, #0]
    4082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4086:	2b00      	cmp	r3, #0
    4088:	d004      	beq.n	4094 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	68db      	ldr	r3, [r3, #12]
    408e:	2103      	movs	r1, #3
    4090:	6878      	ldr	r0, [r7, #4]
    4092:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4094:	683b      	ldr	r3, [r7, #0]
    4096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    409a:	2b00      	cmp	r3, #0
    409c:	d004      	beq.n	40a8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	68db      	ldr	r3, [r3, #12]
    40a2:	2100      	movs	r1, #0
    40a4:	6878      	ldr	r0, [r7, #4]
    40a6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    40a8:	683b      	ldr	r3, [r7, #0]
    40aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    40ae:	2b00      	cmp	r3, #0
    40b0:	d00f      	beq.n	40d2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	68dc      	ldr	r4, [r3, #12]
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	4618      	mov	r0, r3
    40bc:	4b11      	ldr	r3, [pc, #68]	; (4104 <CAN1_Handler+0xc0>)
    40be:	4798      	blx	r3
    40c0:	4603      	mov	r3, r0
    40c2:	2b00      	cmp	r3, #0
    40c4:	d001      	beq.n	40ca <CAN1_Handler+0x86>
    40c6:	2302      	movs	r3, #2
    40c8:	e000      	b.n	40cc <CAN1_Handler+0x88>
    40ca:	2301      	movs	r3, #1
    40cc:	4619      	mov	r1, r3
    40ce:	6878      	ldr	r0, [r7, #4]
    40d0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    40d2:	683b      	ldr	r3, [r7, #0]
    40d4:	f003 0308 	and.w	r3, r3, #8
    40d8:	2b00      	cmp	r3, #0
    40da:	d004      	beq.n	40e6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    40dc:	687b      	ldr	r3, [r7, #4]
    40de:	68db      	ldr	r3, [r3, #12]
    40e0:	2104      	movs	r1, #4
    40e2:	6878      	ldr	r0, [r7, #4]
    40e4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	681b      	ldr	r3, [r3, #0]
    40ea:	6839      	ldr	r1, [r7, #0]
    40ec:	4618      	mov	r0, r3
    40ee:	4b06      	ldr	r3, [pc, #24]	; (4108 <CAN1_Handler+0xc4>)
    40f0:	4798      	blx	r3
}
    40f2:	bf00      	nop
    40f4:	370c      	adds	r7, #12
    40f6:	46bd      	mov	sp, r7
    40f8:	bd90      	pop	{r4, r7, pc}
    40fa:	bf00      	nop
    40fc:	200006d0 	.word	0x200006d0
    4100:	00003d15 	.word	0x00003d15
    4104:	00003bad 	.word	0x00003bad
    4108:	00003cf9 	.word	0x00003cf9

0000410c <__NVIC_SetPendingIRQ>:
{
    410c:	b480      	push	{r7}
    410e:	b083      	sub	sp, #12
    4110:	af00      	add	r7, sp, #0
    4112:	4603      	mov	r3, r0
    4114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    411a:	2b00      	cmp	r3, #0
    411c:	db0c      	blt.n	4138 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    411e:	4909      	ldr	r1, [pc, #36]	; (4144 <__NVIC_SetPendingIRQ+0x38>)
    4120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4124:	095b      	lsrs	r3, r3, #5
    4126:	88fa      	ldrh	r2, [r7, #6]
    4128:	f002 021f 	and.w	r2, r2, #31
    412c:	2001      	movs	r0, #1
    412e:	fa00 f202 	lsl.w	r2, r0, r2
    4132:	3340      	adds	r3, #64	; 0x40
    4134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4138:	bf00      	nop
    413a:	370c      	adds	r7, #12
    413c:	46bd      	mov	sp, r7
    413e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4142:	4770      	bx	lr
    4144:	e000e100 	.word	0xe000e100

00004148 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4148:	b580      	push	{r7, lr}
    414a:	b082      	sub	sp, #8
    414c:	af00      	add	r7, sp, #0
    414e:	4603      	mov	r3, r0
    4150:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4152:	79fb      	ldrb	r3, [r7, #7]
    4154:	b21b      	sxth	r3, r3
    4156:	4618      	mov	r0, r3
    4158:	4b02      	ldr	r3, [pc, #8]	; (4164 <_irq_set+0x1c>)
    415a:	4798      	blx	r3
}
    415c:	bf00      	nop
    415e:	3708      	adds	r7, #8
    4160:	46bd      	mov	sp, r7
    4162:	bd80      	pop	{r7, pc}
    4164:	0000410d 	.word	0x0000410d

00004168 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4168:	b480      	push	{r7}
    416a:	b083      	sub	sp, #12
    416c:	af00      	add	r7, sp, #0
    416e:	4603      	mov	r3, r0
    4170:	6039      	str	r1, [r7, #0]
    4172:	80fb      	strh	r3, [r7, #6]
    4174:	4613      	mov	r3, r2
    4176:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4178:	797b      	ldrb	r3, [r7, #5]
    417a:	3b04      	subs	r3, #4
    417c:	2b05      	cmp	r3, #5
    417e:	d86b      	bhi.n	4258 <_get_cycles_for_us_internal+0xf0>
    4180:	a201      	add	r2, pc, #4	; (adr r2, 4188 <_get_cycles_for_us_internal+0x20>)
    4182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4186:	bf00      	nop
    4188:	00004237 	.word	0x00004237
    418c:	00004217 	.word	0x00004217
    4190:	000041f9 	.word	0x000041f9
    4194:	000041db 	.word	0x000041db
    4198:	000041bd 	.word	0x000041bd
    419c:	000041a1 	.word	0x000041a1
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    41a0:	88fb      	ldrh	r3, [r7, #6]
    41a2:	683a      	ldr	r2, [r7, #0]
    41a4:	4935      	ldr	r1, [pc, #212]	; (427c <_get_cycles_for_us_internal+0x114>)
    41a6:	fba1 1202 	umull	r1, r2, r1, r2
    41aa:	0c92      	lsrs	r2, r2, #18
    41ac:	fb02 f303 	mul.w	r3, r2, r3
    41b0:	3302      	adds	r3, #2
    41b2:	4a33      	ldr	r2, [pc, #204]	; (4280 <_get_cycles_for_us_internal+0x118>)
    41b4:	fba2 2303 	umull	r2, r3, r2, r3
    41b8:	085b      	lsrs	r3, r3, #1
    41ba:	e059      	b.n	4270 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    41bc:	88fb      	ldrh	r3, [r7, #6]
    41be:	683a      	ldr	r2, [r7, #0]
    41c0:	0952      	lsrs	r2, r2, #5
    41c2:	4930      	ldr	r1, [pc, #192]	; (4284 <_get_cycles_for_us_internal+0x11c>)
    41c4:	fba1 1202 	umull	r1, r2, r1, r2
    41c8:	09d2      	lsrs	r2, r2, #7
    41ca:	fb02 f303 	mul.w	r3, r2, r3
    41ce:	331d      	adds	r3, #29
    41d0:	4a2d      	ldr	r2, [pc, #180]	; (4288 <_get_cycles_for_us_internal+0x120>)
    41d2:	fba2 2303 	umull	r2, r3, r2, r3
    41d6:	091b      	lsrs	r3, r3, #4
    41d8:	e04a      	b.n	4270 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    41da:	88fb      	ldrh	r3, [r7, #6]
    41dc:	683a      	ldr	r2, [r7, #0]
    41de:	492b      	ldr	r1, [pc, #172]	; (428c <_get_cycles_for_us_internal+0x124>)
    41e0:	fba1 1202 	umull	r1, r2, r1, r2
    41e4:	0b52      	lsrs	r2, r2, #13
    41e6:	fb02 f303 	mul.w	r3, r2, r3
    41ea:	f203 132b 	addw	r3, r3, #299	; 0x12b
    41ee:	4a28      	ldr	r2, [pc, #160]	; (4290 <_get_cycles_for_us_internal+0x128>)
    41f0:	fba2 2303 	umull	r2, r3, r2, r3
    41f4:	095b      	lsrs	r3, r3, #5
    41f6:	e03b      	b.n	4270 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    41f8:	88fb      	ldrh	r3, [r7, #6]
    41fa:	683a      	ldr	r2, [r7, #0]
    41fc:	4925      	ldr	r1, [pc, #148]	; (4294 <_get_cycles_for_us_internal+0x12c>)
    41fe:	fba1 1202 	umull	r1, r2, r1, r2
    4202:	0992      	lsrs	r2, r2, #6
    4204:	fb02 f303 	mul.w	r3, r2, r3
    4208:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    420c:	4a22      	ldr	r2, [pc, #136]	; (4298 <_get_cycles_for_us_internal+0x130>)
    420e:	fba2 2303 	umull	r2, r3, r2, r3
    4212:	099b      	lsrs	r3, r3, #6
    4214:	e02c      	b.n	4270 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4216:	88fb      	ldrh	r3, [r7, #6]
    4218:	683a      	ldr	r2, [r7, #0]
    421a:	4920      	ldr	r1, [pc, #128]	; (429c <_get_cycles_for_us_internal+0x134>)
    421c:	fba1 1202 	umull	r1, r2, r1, r2
    4220:	0952      	lsrs	r2, r2, #5
    4222:	fb02 f303 	mul.w	r3, r2, r3
    4226:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    422a:	332f      	adds	r3, #47	; 0x2f
    422c:	4a1c      	ldr	r2, [pc, #112]	; (42a0 <_get_cycles_for_us_internal+0x138>)
    422e:	fba2 2303 	umull	r2, r3, r2, r3
    4232:	0b5b      	lsrs	r3, r3, #13
    4234:	e01c      	b.n	4270 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4236:	88fb      	ldrh	r3, [r7, #6]
    4238:	683a      	ldr	r2, [r7, #0]
    423a:	491a      	ldr	r1, [pc, #104]	; (42a4 <_get_cycles_for_us_internal+0x13c>)
    423c:	fba1 1202 	umull	r1, r2, r1, r2
    4240:	08d2      	lsrs	r2, r2, #3
    4242:	fb02 f303 	mul.w	r3, r2, r3
    4246:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    424a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    424e:	4a16      	ldr	r2, [pc, #88]	; (42a8 <_get_cycles_for_us_internal+0x140>)
    4250:	fba2 2303 	umull	r2, r3, r2, r3
    4254:	0c5b      	lsrs	r3, r3, #17
    4256:	e00b      	b.n	4270 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4258:	88fb      	ldrh	r3, [r7, #6]
    425a:	683a      	ldr	r2, [r7, #0]
    425c:	fb02 f303 	mul.w	r3, r2, r3
    4260:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4264:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4268:	4a10      	ldr	r2, [pc, #64]	; (42ac <_get_cycles_for_us_internal+0x144>)
    426a:	fba2 2303 	umull	r2, r3, r2, r3
    426e:	0c9b      	lsrs	r3, r3, #18
	}
}
    4270:	4618      	mov	r0, r3
    4272:	370c      	adds	r7, #12
    4274:	46bd      	mov	sp, r7
    4276:	f85d 7b04 	ldr.w	r7, [sp], #4
    427a:	4770      	bx	lr
    427c:	431bde83 	.word	0x431bde83
    4280:	aaaaaaab 	.word	0xaaaaaaab
    4284:	0a7c5ac5 	.word	0x0a7c5ac5
    4288:	88888889 	.word	0x88888889
    428c:	d1b71759 	.word	0xd1b71759
    4290:	1b4e81b5 	.word	0x1b4e81b5
    4294:	10624dd3 	.word	0x10624dd3
    4298:	057619f1 	.word	0x057619f1
    429c:	51eb851f 	.word	0x51eb851f
    42a0:	45e7b273 	.word	0x45e7b273
    42a4:	cccccccd 	.word	0xcccccccd
    42a8:	6fd91d85 	.word	0x6fd91d85
    42ac:	165e9f81 	.word	0x165e9f81

000042b0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    42b0:	b580      	push	{r7, lr}
    42b2:	b082      	sub	sp, #8
    42b4:	af00      	add	r7, sp, #0
    42b6:	4603      	mov	r3, r0
    42b8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    42ba:	88fb      	ldrh	r3, [r7, #6]
    42bc:	2209      	movs	r2, #9
    42be:	4904      	ldr	r1, [pc, #16]	; (42d0 <_get_cycles_for_us+0x20>)
    42c0:	4618      	mov	r0, r3
    42c2:	4b04      	ldr	r3, [pc, #16]	; (42d4 <_get_cycles_for_us+0x24>)
    42c4:	4798      	blx	r3
    42c6:	4603      	mov	r3, r0
}
    42c8:	4618      	mov	r0, r3
    42ca:	3708      	adds	r7, #8
    42cc:	46bd      	mov	sp, r7
    42ce:	bd80      	pop	{r7, pc}
    42d0:	07270e00 	.word	0x07270e00
    42d4:	00004169 	.word	0x00004169

000042d8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    42d8:	b480      	push	{r7}
    42da:	b083      	sub	sp, #12
    42dc:	af00      	add	r7, sp, #0
    42de:	4603      	mov	r3, r0
    42e0:	6039      	str	r1, [r7, #0]
    42e2:	80fb      	strh	r3, [r7, #6]
    42e4:	4613      	mov	r3, r2
    42e6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    42e8:	797b      	ldrb	r3, [r7, #5]
    42ea:	3b04      	subs	r3, #4
    42ec:	2b05      	cmp	r3, #5
    42ee:	d870      	bhi.n	43d2 <_get_cycles_for_ms_internal+0xfa>
    42f0:	a201      	add	r2, pc, #4	; (adr r2, 42f8 <_get_cycles_for_ms_internal+0x20>)
    42f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    42f6:	bf00      	nop
    42f8:	000043b5 	.word	0x000043b5
    42fc:	00004399 	.word	0x00004399
    4300:	0000437d 	.word	0x0000437d
    4304:	00004359 	.word	0x00004359
    4308:	00004335 	.word	0x00004335
    430c:	00004311 	.word	0x00004311
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4310:	88fb      	ldrh	r3, [r7, #6]
    4312:	683a      	ldr	r2, [r7, #0]
    4314:	4937      	ldr	r1, [pc, #220]	; (43f4 <_get_cycles_for_ms_internal+0x11c>)
    4316:	fba1 1202 	umull	r1, r2, r1, r2
    431a:	0c92      	lsrs	r2, r2, #18
    431c:	fb02 f303 	mul.w	r3, r2, r3
    4320:	3302      	adds	r3, #2
    4322:	4a35      	ldr	r2, [pc, #212]	; (43f8 <_get_cycles_for_ms_internal+0x120>)
    4324:	fba2 2303 	umull	r2, r3, r2, r3
    4328:	085b      	lsrs	r3, r3, #1
    432a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    432e:	fb02 f303 	mul.w	r3, r2, r3
    4332:	e058      	b.n	43e6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4334:	88fb      	ldrh	r3, [r7, #6]
    4336:	683a      	ldr	r2, [r7, #0]
    4338:	0952      	lsrs	r2, r2, #5
    433a:	4930      	ldr	r1, [pc, #192]	; (43fc <_get_cycles_for_ms_internal+0x124>)
    433c:	fba1 1202 	umull	r1, r2, r1, r2
    4340:	09d2      	lsrs	r2, r2, #7
    4342:	fb02 f303 	mul.w	r3, r2, r3
    4346:	3302      	adds	r3, #2
    4348:	4a2b      	ldr	r2, [pc, #172]	; (43f8 <_get_cycles_for_ms_internal+0x120>)
    434a:	fba2 2303 	umull	r2, r3, r2, r3
    434e:	085b      	lsrs	r3, r3, #1
    4350:	2264      	movs	r2, #100	; 0x64
    4352:	fb02 f303 	mul.w	r3, r2, r3
    4356:	e046      	b.n	43e6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4358:	88fb      	ldrh	r3, [r7, #6]
    435a:	683a      	ldr	r2, [r7, #0]
    435c:	4928      	ldr	r1, [pc, #160]	; (4400 <_get_cycles_for_ms_internal+0x128>)
    435e:	fba1 1202 	umull	r1, r2, r1, r2
    4362:	0b52      	lsrs	r2, r2, #13
    4364:	fb02 f303 	mul.w	r3, r2, r3
    4368:	3302      	adds	r3, #2
    436a:	4a23      	ldr	r2, [pc, #140]	; (43f8 <_get_cycles_for_ms_internal+0x120>)
    436c:	fba2 2303 	umull	r2, r3, r2, r3
    4370:	085a      	lsrs	r2, r3, #1
    4372:	4613      	mov	r3, r2
    4374:	009b      	lsls	r3, r3, #2
    4376:	4413      	add	r3, r2
    4378:	005b      	lsls	r3, r3, #1
    437a:	e034      	b.n	43e6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    437c:	88fb      	ldrh	r3, [r7, #6]
    437e:	683a      	ldr	r2, [r7, #0]
    4380:	4920      	ldr	r1, [pc, #128]	; (4404 <_get_cycles_for_ms_internal+0x12c>)
    4382:	fba1 1202 	umull	r1, r2, r1, r2
    4386:	0992      	lsrs	r2, r2, #6
    4388:	fb02 f303 	mul.w	r3, r2, r3
    438c:	3302      	adds	r3, #2
    438e:	4a1a      	ldr	r2, [pc, #104]	; (43f8 <_get_cycles_for_ms_internal+0x120>)
    4390:	fba2 2303 	umull	r2, r3, r2, r3
    4394:	085b      	lsrs	r3, r3, #1
    4396:	e026      	b.n	43e6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4398:	88fb      	ldrh	r3, [r7, #6]
    439a:	683a      	ldr	r2, [r7, #0]
    439c:	491a      	ldr	r1, [pc, #104]	; (4408 <_get_cycles_for_ms_internal+0x130>)
    439e:	fba1 1202 	umull	r1, r2, r1, r2
    43a2:	0952      	lsrs	r2, r2, #5
    43a4:	fb02 f303 	mul.w	r3, r2, r3
    43a8:	331d      	adds	r3, #29
    43aa:	4a18      	ldr	r2, [pc, #96]	; (440c <_get_cycles_for_ms_internal+0x134>)
    43ac:	fba2 2303 	umull	r2, r3, r2, r3
    43b0:	091b      	lsrs	r3, r3, #4
    43b2:	e018      	b.n	43e6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    43b4:	88fb      	ldrh	r3, [r7, #6]
    43b6:	683a      	ldr	r2, [r7, #0]
    43b8:	4915      	ldr	r1, [pc, #84]	; (4410 <_get_cycles_for_ms_internal+0x138>)
    43ba:	fba1 1202 	umull	r1, r2, r1, r2
    43be:	08d2      	lsrs	r2, r2, #3
    43c0:	fb02 f303 	mul.w	r3, r2, r3
    43c4:	f203 132b 	addw	r3, r3, #299	; 0x12b
    43c8:	4a12      	ldr	r2, [pc, #72]	; (4414 <_get_cycles_for_ms_internal+0x13c>)
    43ca:	fba2 2303 	umull	r2, r3, r2, r3
    43ce:	095b      	lsrs	r3, r3, #5
    43d0:	e009      	b.n	43e6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    43d2:	88fb      	ldrh	r3, [r7, #6]
    43d4:	683a      	ldr	r2, [r7, #0]
    43d6:	fb02 f303 	mul.w	r3, r2, r3
    43da:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    43de:	4a0e      	ldr	r2, [pc, #56]	; (4418 <_get_cycles_for_ms_internal+0x140>)
    43e0:	fba2 2303 	umull	r2, r3, r2, r3
    43e4:	099b      	lsrs	r3, r3, #6
	}
}
    43e6:	4618      	mov	r0, r3
    43e8:	370c      	adds	r7, #12
    43ea:	46bd      	mov	sp, r7
    43ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    43f0:	4770      	bx	lr
    43f2:	bf00      	nop
    43f4:	431bde83 	.word	0x431bde83
    43f8:	aaaaaaab 	.word	0xaaaaaaab
    43fc:	0a7c5ac5 	.word	0x0a7c5ac5
    4400:	d1b71759 	.word	0xd1b71759
    4404:	10624dd3 	.word	0x10624dd3
    4408:	51eb851f 	.word	0x51eb851f
    440c:	88888889 	.word	0x88888889
    4410:	cccccccd 	.word	0xcccccccd
    4414:	1b4e81b5 	.word	0x1b4e81b5
    4418:	057619f1 	.word	0x057619f1

0000441c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    441c:	b580      	push	{r7, lr}
    441e:	b082      	sub	sp, #8
    4420:	af00      	add	r7, sp, #0
    4422:	4603      	mov	r3, r0
    4424:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4426:	88fb      	ldrh	r3, [r7, #6]
    4428:	2209      	movs	r2, #9
    442a:	4904      	ldr	r1, [pc, #16]	; (443c <_get_cycles_for_ms+0x20>)
    442c:	4618      	mov	r0, r3
    442e:	4b04      	ldr	r3, [pc, #16]	; (4440 <_get_cycles_for_ms+0x24>)
    4430:	4798      	blx	r3
    4432:	4603      	mov	r3, r0
}
    4434:	4618      	mov	r0, r3
    4436:	3708      	adds	r7, #8
    4438:	46bd      	mov	sp, r7
    443a:	bd80      	pop	{r7, pc}
    443c:	07270e00 	.word	0x07270e00
    4440:	000042d9 	.word	0x000042d9
    4444:	00000000 	.word	0x00000000

00004448 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4448:	b480      	push	{r7}
    444a:	b083      	sub	sp, #12
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
    4450:	6039      	str	r1, [r7, #0]
    4452:	bf00      	nop
    4454:	f3af 8000 	nop.w

00004458 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4458:	3901      	subs	r1, #1
    445a:	d8fd      	bhi.n	4458 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    445c:	bf00      	nop
    445e:	370c      	adds	r7, #12
    4460:	46bd      	mov	sp, r7
    4462:	f85d 7b04 	ldr.w	r7, [sp], #4
    4466:	4770      	bx	lr

00004468 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4468:	b480      	push	{r7}
    446a:	b083      	sub	sp, #12
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
    4470:	460b      	mov	r3, r1
    4472:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	881b      	ldrh	r3, [r3, #0]
    4478:	b29a      	uxth	r2, r3
    447a:	887b      	ldrh	r3, [r7, #2]
    447c:	021b      	lsls	r3, r3, #8
    447e:	b29b      	uxth	r3, r3
    4480:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4484:	b29b      	uxth	r3, r3
    4486:	4313      	orrs	r3, r2
    4488:	b29a      	uxth	r2, r3
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    448e:	bf00      	nop
    4490:	370c      	adds	r7, #12
    4492:	46bd      	mov	sp, r7
    4494:	f85d 7b04 	ldr.w	r7, [sp], #4
    4498:	4770      	bx	lr

0000449a <hri_port_set_EVCTRL_reg>:
{
    449a:	b480      	push	{r7}
    449c:	b085      	sub	sp, #20
    449e:	af00      	add	r7, sp, #0
    44a0:	60f8      	str	r0, [r7, #12]
    44a2:	460b      	mov	r3, r1
    44a4:	607a      	str	r2, [r7, #4]
    44a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    44a8:	7afb      	ldrb	r3, [r7, #11]
    44aa:	7afa      	ldrb	r2, [r7, #11]
    44ac:	68f9      	ldr	r1, [r7, #12]
    44ae:	01d2      	lsls	r2, r2, #7
    44b0:	440a      	add	r2, r1
    44b2:	322c      	adds	r2, #44	; 0x2c
    44b4:	6811      	ldr	r1, [r2, #0]
    44b6:	687a      	ldr	r2, [r7, #4]
    44b8:	430a      	orrs	r2, r1
    44ba:	68f9      	ldr	r1, [r7, #12]
    44bc:	01db      	lsls	r3, r3, #7
    44be:	440b      	add	r3, r1
    44c0:	332c      	adds	r3, #44	; 0x2c
    44c2:	601a      	str	r2, [r3, #0]
}
    44c4:	bf00      	nop
    44c6:	3714      	adds	r7, #20
    44c8:	46bd      	mov	sp, r7
    44ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ce:	4770      	bx	lr

000044d0 <_port_event_init>:

static inline void _port_event_init()
{
    44d0:	b580      	push	{r7, lr}
    44d2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    44d4:	2200      	movs	r2, #0
    44d6:	2100      	movs	r1, #0
    44d8:	4809      	ldr	r0, [pc, #36]	; (4500 <_port_event_init+0x30>)
    44da:	4b0a      	ldr	r3, [pc, #40]	; (4504 <_port_event_init+0x34>)
    44dc:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    44de:	2200      	movs	r2, #0
    44e0:	2101      	movs	r1, #1
    44e2:	4807      	ldr	r0, [pc, #28]	; (4500 <_port_event_init+0x30>)
    44e4:	4b07      	ldr	r3, [pc, #28]	; (4504 <_port_event_init+0x34>)
    44e6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    44e8:	22ef      	movs	r2, #239	; 0xef
    44ea:	2102      	movs	r1, #2
    44ec:	4804      	ldr	r0, [pc, #16]	; (4500 <_port_event_init+0x30>)
    44ee:	4b05      	ldr	r3, [pc, #20]	; (4504 <_port_event_init+0x34>)
    44f0:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    44f2:	2200      	movs	r2, #0
    44f4:	2103      	movs	r1, #3
    44f6:	4802      	ldr	r0, [pc, #8]	; (4500 <_port_event_init+0x30>)
    44f8:	4b02      	ldr	r3, [pc, #8]	; (4504 <_port_event_init+0x34>)
    44fa:	4798      	blx	r3
}
    44fc:	bf00      	nop
    44fe:	bd80      	pop	{r7, pc}
    4500:	41008000 	.word	0x41008000
    4504:	0000449b 	.word	0x0000449b

00004508 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4508:	b580      	push	{r7, lr}
    450a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    450c:	2104      	movs	r1, #4
    450e:	480b      	ldr	r0, [pc, #44]	; (453c <_init_chip+0x34>)
    4510:	4b0b      	ldr	r3, [pc, #44]	; (4540 <_init_chip+0x38>)
    4512:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4514:	4b0b      	ldr	r3, [pc, #44]	; (4544 <_init_chip+0x3c>)
    4516:	4798      	blx	r3
	_oscctrl_init_sources();
    4518:	4b0b      	ldr	r3, [pc, #44]	; (4548 <_init_chip+0x40>)
    451a:	4798      	blx	r3
	_mclk_init();
    451c:	4b0b      	ldr	r3, [pc, #44]	; (454c <_init_chip+0x44>)
    451e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4520:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4524:	4b0a      	ldr	r3, [pc, #40]	; (4550 <_init_chip+0x48>)
    4526:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4528:	4b0a      	ldr	r3, [pc, #40]	; (4554 <_init_chip+0x4c>)
    452a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    452c:	f640 30df 	movw	r0, #3039	; 0xbdf
    4530:	4b07      	ldr	r3, [pc, #28]	; (4550 <_init_chip+0x48>)
    4532:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4534:	4b08      	ldr	r3, [pc, #32]	; (4558 <_init_chip+0x50>)
    4536:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4538:	bf00      	nop
    453a:	bd80      	pop	{r7, pc}
    453c:	41004000 	.word	0x41004000
    4540:	00004469 	.word	0x00004469
    4544:	00004e61 	.word	0x00004e61
    4548:	00005329 	.word	0x00005329
    454c:	00004d81 	.word	0x00004d81
    4550:	00004c71 	.word	0x00004c71
    4554:	00005369 	.word	0x00005369
    4558:	000044d1 	.word	0x000044d1

0000455c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    455c:	b480      	push	{r7}
    455e:	b083      	sub	sp, #12
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
    4564:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	683a      	ldr	r2, [r7, #0]
    456a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    456c:	2300      	movs	r3, #0
}
    456e:	4618      	mov	r0, r3
    4570:	370c      	adds	r7, #12
    4572:	46bd      	mov	sp, r7
    4574:	f85d 7b04 	ldr.w	r7, [sp], #4
    4578:	4770      	bx	lr
	...

0000457c <__NVIC_EnableIRQ>:
{
    457c:	b480      	push	{r7}
    457e:	b083      	sub	sp, #12
    4580:	af00      	add	r7, sp, #0
    4582:	4603      	mov	r3, r0
    4584:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    458a:	2b00      	cmp	r3, #0
    458c:	db0b      	blt.n	45a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    458e:	4909      	ldr	r1, [pc, #36]	; (45b4 <__NVIC_EnableIRQ+0x38>)
    4590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4594:	095b      	lsrs	r3, r3, #5
    4596:	88fa      	ldrh	r2, [r7, #6]
    4598:	f002 021f 	and.w	r2, r2, #31
    459c:	2001      	movs	r0, #1
    459e:	fa00 f202 	lsl.w	r2, r0, r2
    45a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    45a6:	bf00      	nop
    45a8:	370c      	adds	r7, #12
    45aa:	46bd      	mov	sp, r7
    45ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b0:	4770      	bx	lr
    45b2:	bf00      	nop
    45b4:	e000e100 	.word	0xe000e100

000045b8 <__NVIC_DisableIRQ>:
{
    45b8:	b480      	push	{r7}
    45ba:	b083      	sub	sp, #12
    45bc:	af00      	add	r7, sp, #0
    45be:	4603      	mov	r3, r0
    45c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45c6:	2b00      	cmp	r3, #0
    45c8:	db10      	blt.n	45ec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45ca:	490b      	ldr	r1, [pc, #44]	; (45f8 <__NVIC_DisableIRQ+0x40>)
    45cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45d0:	095b      	lsrs	r3, r3, #5
    45d2:	88fa      	ldrh	r2, [r7, #6]
    45d4:	f002 021f 	and.w	r2, r2, #31
    45d8:	2001      	movs	r0, #1
    45da:	fa00 f202 	lsl.w	r2, r0, r2
    45de:	3320      	adds	r3, #32
    45e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    45e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45e8:	f3bf 8f6f 	isb	sy
}
    45ec:	bf00      	nop
    45ee:	370c      	adds	r7, #12
    45f0:	46bd      	mov	sp, r7
    45f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f6:	4770      	bx	lr
    45f8:	e000e100 	.word	0xe000e100

000045fc <__NVIC_ClearPendingIRQ>:
{
    45fc:	b480      	push	{r7}
    45fe:	b083      	sub	sp, #12
    4600:	af00      	add	r7, sp, #0
    4602:	4603      	mov	r3, r0
    4604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    460a:	2b00      	cmp	r3, #0
    460c:	db0c      	blt.n	4628 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    460e:	4909      	ldr	r1, [pc, #36]	; (4634 <__NVIC_ClearPendingIRQ+0x38>)
    4610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4614:	095b      	lsrs	r3, r3, #5
    4616:	88fa      	ldrh	r2, [r7, #6]
    4618:	f002 021f 	and.w	r2, r2, #31
    461c:	2001      	movs	r0, #1
    461e:	fa00 f202 	lsl.w	r2, r0, r2
    4622:	3360      	adds	r3, #96	; 0x60
    4624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4628:	bf00      	nop
    462a:	370c      	adds	r7, #12
    462c:	46bd      	mov	sp, r7
    462e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4632:	4770      	bx	lr
    4634:	e000e100 	.word	0xe000e100

00004638 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4638:	b480      	push	{r7}
    463a:	b083      	sub	sp, #12
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
    4640:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4642:	bf00      	nop
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	685a      	ldr	r2, [r3, #4]
    4648:	683b      	ldr	r3, [r7, #0]
    464a:	4013      	ands	r3, r2
    464c:	2b00      	cmp	r3, #0
    464e:	d1f9      	bne.n	4644 <hri_eic_wait_for_sync+0xc>
	};
}
    4650:	bf00      	nop
    4652:	370c      	adds	r7, #12
    4654:	46bd      	mov	sp, r7
    4656:	f85d 7b04 	ldr.w	r7, [sp], #4
    465a:	4770      	bx	lr

0000465c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    465c:	b480      	push	{r7}
    465e:	b083      	sub	sp, #12
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
    4664:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	685a      	ldr	r2, [r3, #4]
    466a:	683b      	ldr	r3, [r7, #0]
    466c:	4013      	ands	r3, r2
    466e:	2b00      	cmp	r3, #0
    4670:	bf14      	ite	ne
    4672:	2301      	movne	r3, #1
    4674:	2300      	moveq	r3, #0
    4676:	b2db      	uxtb	r3, r3
}
    4678:	4618      	mov	r0, r3
    467a:	370c      	adds	r7, #12
    467c:	46bd      	mov	sp, r7
    467e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4682:	4770      	bx	lr

00004684 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4684:	b480      	push	{r7}
    4686:	b083      	sub	sp, #12
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	695b      	ldr	r3, [r3, #20]
}
    4690:	4618      	mov	r0, r3
    4692:	370c      	adds	r7, #12
    4694:	46bd      	mov	sp, r7
    4696:	f85d 7b04 	ldr.w	r7, [sp], #4
    469a:	4770      	bx	lr

0000469c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    469c:	b480      	push	{r7}
    469e:	b083      	sub	sp, #12
    46a0:	af00      	add	r7, sp, #0
    46a2:	6078      	str	r0, [r7, #4]
    46a4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	683a      	ldr	r2, [r7, #0]
    46aa:	615a      	str	r2, [r3, #20]
}
    46ac:	bf00      	nop
    46ae:	370c      	adds	r7, #12
    46b0:	46bd      	mov	sp, r7
    46b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b6:	4770      	bx	lr

000046b8 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b082      	sub	sp, #8
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	781b      	ldrb	r3, [r3, #0]
    46c4:	b2db      	uxtb	r3, r3
    46c6:	f043 0302 	orr.w	r3, r3, #2
    46ca:	b2da      	uxtb	r2, r3
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46d0:	2103      	movs	r1, #3
    46d2:	6878      	ldr	r0, [r7, #4]
    46d4:	4b02      	ldr	r3, [pc, #8]	; (46e0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    46d6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46d8:	bf00      	nop
    46da:	3708      	adds	r7, #8
    46dc:	46bd      	mov	sp, r7
    46de:	bd80      	pop	{r7, pc}
    46e0:	00004639 	.word	0x00004639

000046e4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	b082      	sub	sp, #8
    46e8:	af00      	add	r7, sp, #0
    46ea:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    46ec:	687b      	ldr	r3, [r7, #4]
    46ee:	781b      	ldrb	r3, [r3, #0]
    46f0:	b2db      	uxtb	r3, r3
    46f2:	f023 0302 	bic.w	r3, r3, #2
    46f6:	b2da      	uxtb	r2, r3
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46fc:	2103      	movs	r1, #3
    46fe:	6878      	ldr	r0, [r7, #4]
    4700:	4b02      	ldr	r3, [pc, #8]	; (470c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4702:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4704:	bf00      	nop
    4706:	3708      	adds	r7, #8
    4708:	46bd      	mov	sp, r7
    470a:	bd80      	pop	{r7, pc}
    470c:	00004639 	.word	0x00004639

00004710 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4710:	b580      	push	{r7, lr}
    4712:	b084      	sub	sp, #16
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	460b      	mov	r3, r1
    471a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	781b      	ldrb	r3, [r3, #0]
    4720:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4722:	7bfb      	ldrb	r3, [r7, #15]
    4724:	f023 0310 	bic.w	r3, r3, #16
    4728:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    472a:	78fb      	ldrb	r3, [r7, #3]
    472c:	011b      	lsls	r3, r3, #4
    472e:	b25a      	sxtb	r2, r3
    4730:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4734:	4313      	orrs	r3, r2
    4736:	b25b      	sxtb	r3, r3
    4738:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	7bfa      	ldrb	r2, [r7, #15]
    473e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4740:	2103      	movs	r1, #3
    4742:	6878      	ldr	r0, [r7, #4]
    4744:	4b02      	ldr	r3, [pc, #8]	; (4750 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4746:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4748:	bf00      	nop
    474a:	3710      	adds	r7, #16
    474c:	46bd      	mov	sp, r7
    474e:	bd80      	pop	{r7, pc}
    4750:	00004639 	.word	0x00004639

00004754 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4754:	b580      	push	{r7, lr}
    4756:	b084      	sub	sp, #16
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]
    475c:	460b      	mov	r3, r1
    475e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4760:	2103      	movs	r1, #3
    4762:	6878      	ldr	r0, [r7, #4]
    4764:	4b06      	ldr	r3, [pc, #24]	; (4780 <hri_eic_get_CTRLA_reg+0x2c>)
    4766:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    476e:	7bfa      	ldrb	r2, [r7, #15]
    4770:	78fb      	ldrb	r3, [r7, #3]
    4772:	4013      	ands	r3, r2
    4774:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4776:	7bfb      	ldrb	r3, [r7, #15]
}
    4778:	4618      	mov	r0, r3
    477a:	3710      	adds	r7, #16
    477c:	46bd      	mov	sp, r7
    477e:	bd80      	pop	{r7, pc}
    4780:	00004639 	.word	0x00004639

00004784 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4784:	b580      	push	{r7, lr}
    4786:	b082      	sub	sp, #8
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
    478c:	460b      	mov	r3, r1
    478e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	78fa      	ldrb	r2, [r7, #3]
    4794:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4796:	2103      	movs	r1, #3
    4798:	6878      	ldr	r0, [r7, #4]
    479a:	4b03      	ldr	r3, [pc, #12]	; (47a8 <hri_eic_write_CTRLA_reg+0x24>)
    479c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    479e:	bf00      	nop
    47a0:	3708      	adds	r7, #8
    47a2:	46bd      	mov	sp, r7
    47a4:	bd80      	pop	{r7, pc}
    47a6:	bf00      	nop
    47a8:	00004639 	.word	0x00004639

000047ac <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    47ac:	b480      	push	{r7}
    47ae:	b083      	sub	sp, #12
    47b0:	af00      	add	r7, sp, #0
    47b2:	6078      	str	r0, [r7, #4]
    47b4:	460b      	mov	r3, r1
    47b6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    47b8:	687b      	ldr	r3, [r7, #4]
    47ba:	78fa      	ldrb	r2, [r7, #3]
    47bc:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47be:	bf00      	nop
    47c0:	370c      	adds	r7, #12
    47c2:	46bd      	mov	sp, r7
    47c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c8:	4770      	bx	lr

000047ca <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    47ca:	b480      	push	{r7}
    47cc:	b083      	sub	sp, #12
    47ce:	af00      	add	r7, sp, #0
    47d0:	6078      	str	r0, [r7, #4]
    47d2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	683a      	ldr	r2, [r7, #0]
    47d8:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47da:	bf00      	nop
    47dc:	370c      	adds	r7, #12
    47de:	46bd      	mov	sp, r7
    47e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47e4:	4770      	bx	lr

000047e6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    47e6:	b480      	push	{r7}
    47e8:	b083      	sub	sp, #12
    47ea:	af00      	add	r7, sp, #0
    47ec:	6078      	str	r0, [r7, #4]
    47ee:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    47f0:	687b      	ldr	r3, [r7, #4]
    47f2:	683a      	ldr	r2, [r7, #0]
    47f4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47f6:	bf00      	nop
    47f8:	370c      	adds	r7, #12
    47fa:	46bd      	mov	sp, r7
    47fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4800:	4770      	bx	lr

00004802 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4802:	b480      	push	{r7}
    4804:	b085      	sub	sp, #20
    4806:	af00      	add	r7, sp, #0
    4808:	60f8      	str	r0, [r7, #12]
    480a:	460b      	mov	r3, r1
    480c:	607a      	str	r2, [r7, #4]
    480e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4810:	7afb      	ldrb	r3, [r7, #11]
    4812:	68fa      	ldr	r2, [r7, #12]
    4814:	3306      	adds	r3, #6
    4816:	009b      	lsls	r3, r3, #2
    4818:	4413      	add	r3, r2
    481a:	687a      	ldr	r2, [r7, #4]
    481c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    481e:	bf00      	nop
    4820:	3714      	adds	r7, #20
    4822:	46bd      	mov	sp, r7
    4824:	f85d 7b04 	ldr.w	r7, [sp], #4
    4828:	4770      	bx	lr

0000482a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    482a:	b480      	push	{r7}
    482c:	b083      	sub	sp, #12
    482e:	af00      	add	r7, sp, #0
    4830:	6078      	str	r0, [r7, #4]
    4832:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4834:	687b      	ldr	r3, [r7, #4]
    4836:	683a      	ldr	r2, [r7, #0]
    4838:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    483a:	bf00      	nop
    483c:	370c      	adds	r7, #12
    483e:	46bd      	mov	sp, r7
    4840:	f85d 7b04 	ldr.w	r7, [sp], #4
    4844:	4770      	bx	lr

00004846 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4846:	b480      	push	{r7}
    4848:	b083      	sub	sp, #12
    484a:	af00      	add	r7, sp, #0
    484c:	6078      	str	r0, [r7, #4]
    484e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	683a      	ldr	r2, [r7, #0]
    4854:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4856:	bf00      	nop
    4858:	370c      	adds	r7, #12
    485a:	46bd      	mov	sp, r7
    485c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4860:	4770      	bx	lr
	...

00004864 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4864:	b580      	push	{r7, lr}
    4866:	b082      	sub	sp, #8
    4868:	af00      	add	r7, sp, #0
    486a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    486c:	2101      	movs	r1, #1
    486e:	4838      	ldr	r0, [pc, #224]	; (4950 <_ext_irq_init+0xec>)
    4870:	4b38      	ldr	r3, [pc, #224]	; (4954 <_ext_irq_init+0xf0>)
    4872:	4798      	blx	r3
    4874:	4603      	mov	r3, r0
    4876:	f083 0301 	eor.w	r3, r3, #1
    487a:	b2db      	uxtb	r3, r3
    487c:	2b00      	cmp	r3, #0
    487e:	d011      	beq.n	48a4 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4880:	2102      	movs	r1, #2
    4882:	4833      	ldr	r0, [pc, #204]	; (4950 <_ext_irq_init+0xec>)
    4884:	4b34      	ldr	r3, [pc, #208]	; (4958 <_ext_irq_init+0xf4>)
    4886:	4798      	blx	r3
    4888:	4603      	mov	r3, r0
    488a:	2b00      	cmp	r3, #0
    488c:	d006      	beq.n	489c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    488e:	4830      	ldr	r0, [pc, #192]	; (4950 <_ext_irq_init+0xec>)
    4890:	4b32      	ldr	r3, [pc, #200]	; (495c <_ext_irq_init+0xf8>)
    4892:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4894:	2102      	movs	r1, #2
    4896:	482e      	ldr	r0, [pc, #184]	; (4950 <_ext_irq_init+0xec>)
    4898:	4b31      	ldr	r3, [pc, #196]	; (4960 <_ext_irq_init+0xfc>)
    489a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    489c:	2101      	movs	r1, #1
    489e:	482c      	ldr	r0, [pc, #176]	; (4950 <_ext_irq_init+0xec>)
    48a0:	4b30      	ldr	r3, [pc, #192]	; (4964 <_ext_irq_init+0x100>)
    48a2:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    48a4:	2101      	movs	r1, #1
    48a6:	482a      	ldr	r0, [pc, #168]	; (4950 <_ext_irq_init+0xec>)
    48a8:	4b2d      	ldr	r3, [pc, #180]	; (4960 <_ext_irq_init+0xfc>)
    48aa:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    48ac:	2100      	movs	r1, #0
    48ae:	4828      	ldr	r0, [pc, #160]	; (4950 <_ext_irq_init+0xec>)
    48b0:	4b2d      	ldr	r3, [pc, #180]	; (4968 <_ext_irq_init+0x104>)
    48b2:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    48b4:	2100      	movs	r1, #0
    48b6:	4826      	ldr	r0, [pc, #152]	; (4950 <_ext_irq_init+0xec>)
    48b8:	4b2c      	ldr	r3, [pc, #176]	; (496c <_ext_irq_init+0x108>)
    48ba:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    48bc:	2100      	movs	r1, #0
    48be:	4824      	ldr	r0, [pc, #144]	; (4950 <_ext_irq_init+0xec>)
    48c0:	4b2b      	ldr	r3, [pc, #172]	; (4970 <_ext_irq_init+0x10c>)
    48c2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    48c4:	2130      	movs	r1, #48	; 0x30
    48c6:	4822      	ldr	r0, [pc, #136]	; (4950 <_ext_irq_init+0xec>)
    48c8:	4b2a      	ldr	r3, [pc, #168]	; (4974 <_ext_irq_init+0x110>)
    48ca:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    48cc:	2130      	movs	r1, #48	; 0x30
    48ce:	4820      	ldr	r0, [pc, #128]	; (4950 <_ext_irq_init+0xec>)
    48d0:	4b29      	ldr	r3, [pc, #164]	; (4978 <_ext_irq_init+0x114>)
    48d2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    48d4:	2100      	movs	r1, #0
    48d6:	481e      	ldr	r0, [pc, #120]	; (4950 <_ext_irq_init+0xec>)
    48d8:	4b28      	ldr	r3, [pc, #160]	; (497c <_ext_irq_init+0x118>)
    48da:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48dc:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    48e0:	2100      	movs	r1, #0
    48e2:	481b      	ldr	r0, [pc, #108]	; (4950 <_ext_irq_init+0xec>)
    48e4:	4b26      	ldr	r3, [pc, #152]	; (4980 <_ext_irq_init+0x11c>)
    48e6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48e8:	2200      	movs	r2, #0
    48ea:	2101      	movs	r1, #1
    48ec:	4818      	ldr	r0, [pc, #96]	; (4950 <_ext_irq_init+0xec>)
    48ee:	4b24      	ldr	r3, [pc, #144]	; (4980 <_ext_irq_init+0x11c>)
    48f0:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    48f2:	4817      	ldr	r0, [pc, #92]	; (4950 <_ext_irq_init+0xec>)
    48f4:	4b23      	ldr	r3, [pc, #140]	; (4984 <_ext_irq_init+0x120>)
    48f6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    48f8:	2010      	movs	r0, #16
    48fa:	4b23      	ldr	r3, [pc, #140]	; (4988 <_ext_irq_init+0x124>)
    48fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    48fe:	2010      	movs	r0, #16
    4900:	4b22      	ldr	r3, [pc, #136]	; (498c <_ext_irq_init+0x128>)
    4902:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4904:	2010      	movs	r0, #16
    4906:	4b22      	ldr	r3, [pc, #136]	; (4990 <_ext_irq_init+0x12c>)
    4908:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    490a:	2011      	movs	r0, #17
    490c:	4b1e      	ldr	r3, [pc, #120]	; (4988 <_ext_irq_init+0x124>)
    490e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4910:	2011      	movs	r0, #17
    4912:	4b1e      	ldr	r3, [pc, #120]	; (498c <_ext_irq_init+0x128>)
    4914:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4916:	2011      	movs	r0, #17
    4918:	4b1d      	ldr	r3, [pc, #116]	; (4990 <_ext_irq_init+0x12c>)
    491a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    491c:	2012      	movs	r0, #18
    491e:	4b1a      	ldr	r3, [pc, #104]	; (4988 <_ext_irq_init+0x124>)
    4920:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4922:	2012      	movs	r0, #18
    4924:	4b19      	ldr	r3, [pc, #100]	; (498c <_ext_irq_init+0x128>)
    4926:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4928:	2012      	movs	r0, #18
    492a:	4b19      	ldr	r3, [pc, #100]	; (4990 <_ext_irq_init+0x12c>)
    492c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    492e:	2013      	movs	r0, #19
    4930:	4b15      	ldr	r3, [pc, #84]	; (4988 <_ext_irq_init+0x124>)
    4932:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4934:	2013      	movs	r0, #19
    4936:	4b15      	ldr	r3, [pc, #84]	; (498c <_ext_irq_init+0x128>)
    4938:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    493a:	2013      	movs	r0, #19
    493c:	4b14      	ldr	r3, [pc, #80]	; (4990 <_ext_irq_init+0x12c>)
    493e:	4798      	blx	r3

	callback = cb;
    4940:	4a14      	ldr	r2, [pc, #80]	; (4994 <_ext_irq_init+0x130>)
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4946:	2300      	movs	r3, #0
}
    4948:	4618      	mov	r0, r3
    494a:	3708      	adds	r7, #8
    494c:	46bd      	mov	sp, r7
    494e:	bd80      	pop	{r7, pc}
    4950:	40002800 	.word	0x40002800
    4954:	0000465d 	.word	0x0000465d
    4958:	00004755 	.word	0x00004755
    495c:	000046e5 	.word	0x000046e5
    4960:	00004639 	.word	0x00004639
    4964:	00004785 	.word	0x00004785
    4968:	00004711 	.word	0x00004711
    496c:	000047ad 	.word	0x000047ad
    4970:	000047cb 	.word	0x000047cb
    4974:	000047e7 	.word	0x000047e7
    4978:	0000482b 	.word	0x0000482b
    497c:	00004847 	.word	0x00004847
    4980:	00004803 	.word	0x00004803
    4984:	000046b9 	.word	0x000046b9
    4988:	000045b9 	.word	0x000045b9
    498c:	000045fd 	.word	0x000045fd
    4990:	0000457d 	.word	0x0000457d
    4994:	200006d4 	.word	0x200006d4

00004998 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4998:	b580      	push	{r7, lr}
    499a:	b084      	sub	sp, #16
    499c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    499e:	4841      	ldr	r0, [pc, #260]	; (4aa4 <_ext_irq_handler+0x10c>)
    49a0:	4b41      	ldr	r3, [pc, #260]	; (4aa8 <_ext_irq_handler+0x110>)
    49a2:	4798      	blx	r3
    49a4:	4603      	mov	r3, r0
    49a6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    49a8:	f04f 33ff 	mov.w	r3, #4294967295
    49ac:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    49ae:	683b      	ldr	r3, [r7, #0]
    49b0:	4619      	mov	r1, r3
    49b2:	483c      	ldr	r0, [pc, #240]	; (4aa4 <_ext_irq_handler+0x10c>)
    49b4:	4b3d      	ldr	r3, [pc, #244]	; (4aac <_ext_irq_handler+0x114>)
    49b6:	4798      	blx	r3

	ASSERT(callback);
    49b8:	4b3d      	ldr	r3, [pc, #244]	; (4ab0 <_ext_irq_handler+0x118>)
    49ba:	681b      	ldr	r3, [r3, #0]
    49bc:	2b00      	cmp	r3, #0
    49be:	bf14      	ite	ne
    49c0:	2301      	movne	r3, #1
    49c2:	2300      	moveq	r3, #0
    49c4:	b2db      	uxtb	r3, r3
    49c6:	22f4      	movs	r2, #244	; 0xf4
    49c8:	493a      	ldr	r1, [pc, #232]	; (4ab4 <_ext_irq_handler+0x11c>)
    49ca:	4618      	mov	r0, r3
    49cc:	4b3a      	ldr	r3, [pc, #232]	; (4ab8 <_ext_irq_handler+0x120>)
    49ce:	4798      	blx	r3

	while (flags) {
    49d0:	e060      	b.n	4a94 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    49d2:	683b      	ldr	r3, [r7, #0]
    49d4:	4618      	mov	r0, r3
    49d6:	4b39      	ldr	r3, [pc, #228]	; (4abc <_ext_irq_handler+0x124>)
    49d8:	4798      	blx	r3
    49da:	4603      	mov	r3, r0
    49dc:	b2db      	uxtb	r3, r3
    49de:	3b01      	subs	r3, #1
    49e0:	b2db      	uxtb	r3, r3
    49e2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    49e4:	e047      	b.n	4a76 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    49e6:	2300      	movs	r3, #0
    49e8:	71fb      	strb	r3, [r7, #7]
    49ea:	2304      	movs	r3, #4
    49ec:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    49ee:	e024      	b.n	4a3a <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    49f0:	79ba      	ldrb	r2, [r7, #6]
    49f2:	79fb      	ldrb	r3, [r7, #7]
    49f4:	4413      	add	r3, r2
    49f6:	105b      	asrs	r3, r3, #1
    49f8:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    49fa:	797b      	ldrb	r3, [r7, #5]
    49fc:	4a30      	ldr	r2, [pc, #192]	; (4ac0 <_ext_irq_handler+0x128>)
    49fe:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a02:	461a      	mov	r2, r3
    4a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a08:	429a      	cmp	r2, r3
    4a0a:	d106      	bne.n	4a1a <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    4a0c:	797b      	ldrb	r3, [r7, #5]
    4a0e:	4a2c      	ldr	r2, [pc, #176]	; (4ac0 <_ext_irq_handler+0x128>)
    4a10:	00db      	lsls	r3, r3, #3
    4a12:	4413      	add	r3, r2
    4a14:	685b      	ldr	r3, [r3, #4]
    4a16:	60bb      	str	r3, [r7, #8]
					break;
    4a18:	e013      	b.n	4a42 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    4a1a:	797b      	ldrb	r3, [r7, #5]
    4a1c:	4a28      	ldr	r2, [pc, #160]	; (4ac0 <_ext_irq_handler+0x128>)
    4a1e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a22:	461a      	mov	r2, r3
    4a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a28:	429a      	cmp	r2, r3
    4a2a:	da03      	bge.n	4a34 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    4a2c:	797b      	ldrb	r3, [r7, #5]
    4a2e:	3301      	adds	r3, #1
    4a30:	71fb      	strb	r3, [r7, #7]
    4a32:	e002      	b.n	4a3a <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    4a34:	797b      	ldrb	r3, [r7, #5]
    4a36:	3b01      	subs	r3, #1
    4a38:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4a3a:	79ba      	ldrb	r2, [r7, #6]
    4a3c:	79fb      	ldrb	r3, [r7, #7]
    4a3e:	429a      	cmp	r2, r3
    4a40:	d2d6      	bcs.n	49f0 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4a42:	68bb      	ldr	r3, [r7, #8]
    4a44:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a48:	d003      	beq.n	4a52 <_ext_irq_handler+0xba>
				callback(pin);
    4a4a:	4b19      	ldr	r3, [pc, #100]	; (4ab0 <_ext_irq_handler+0x118>)
    4a4c:	681b      	ldr	r3, [r3, #0]
    4a4e:	68b8      	ldr	r0, [r7, #8]
    4a50:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a56:	2201      	movs	r2, #1
    4a58:	fa02 f303 	lsl.w	r3, r2, r3
    4a5c:	43da      	mvns	r2, r3
    4a5e:	683b      	ldr	r3, [r7, #0]
    4a60:	4013      	ands	r3, r2
    4a62:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4a64:	683b      	ldr	r3, [r7, #0]
    4a66:	4618      	mov	r0, r3
    4a68:	4b14      	ldr	r3, [pc, #80]	; (4abc <_ext_irq_handler+0x124>)
    4a6a:	4798      	blx	r3
    4a6c:	4603      	mov	r3, r0
    4a6e:	b2db      	uxtb	r3, r3
    4a70:	3b01      	subs	r3, #1
    4a72:	b2db      	uxtb	r3, r3
    4a74:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a7e:	d1b2      	bne.n	49e6 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4a80:	4808      	ldr	r0, [pc, #32]	; (4aa4 <_ext_irq_handler+0x10c>)
    4a82:	4b09      	ldr	r3, [pc, #36]	; (4aa8 <_ext_irq_handler+0x110>)
    4a84:	4798      	blx	r3
    4a86:	4603      	mov	r3, r0
    4a88:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4a8a:	683b      	ldr	r3, [r7, #0]
    4a8c:	4619      	mov	r1, r3
    4a8e:	4805      	ldr	r0, [pc, #20]	; (4aa4 <_ext_irq_handler+0x10c>)
    4a90:	4b06      	ldr	r3, [pc, #24]	; (4aac <_ext_irq_handler+0x114>)
    4a92:	4798      	blx	r3
	while (flags) {
    4a94:	683b      	ldr	r3, [r7, #0]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d19b      	bne.n	49d2 <_ext_irq_handler+0x3a>
	}
}
    4a9a:	bf00      	nop
    4a9c:	3710      	adds	r7, #16
    4a9e:	46bd      	mov	sp, r7
    4aa0:	bd80      	pop	{r7, pc}
    4aa2:	bf00      	nop
    4aa4:	40002800 	.word	0x40002800
    4aa8:	00004685 	.word	0x00004685
    4aac:	0000469d 	.word	0x0000469d
    4ab0:	200006d4 	.word	0x200006d4
    4ab4:	0000ef00 	.word	0x0000ef00
    4ab8:	000038fd 	.word	0x000038fd
    4abc:	0000e92d 	.word	0x0000e92d
    4ac0:	0000eee0 	.word	0x0000eee0

00004ac4 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4ac4:	b580      	push	{r7, lr}
    4ac6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ac8:	4b01      	ldr	r3, [pc, #4]	; (4ad0 <EIC_4_Handler+0xc>)
    4aca:	4798      	blx	r3
} /**
    4acc:	bf00      	nop
    4ace:	bd80      	pop	{r7, pc}
    4ad0:	00004999 	.word	0x00004999

00004ad4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ad8:	4b01      	ldr	r3, [pc, #4]	; (4ae0 <EIC_5_Handler+0xc>)
    4ada:	4798      	blx	r3
} /**
    4adc:	bf00      	nop
    4ade:	bd80      	pop	{r7, pc}
    4ae0:	00004999 	.word	0x00004999

00004ae4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ae8:	4b01      	ldr	r3, [pc, #4]	; (4af0 <EIC_6_Handler+0xc>)
    4aea:	4798      	blx	r3
} /**
    4aec:	bf00      	nop
    4aee:	bd80      	pop	{r7, pc}
    4af0:	00004999 	.word	0x00004999

00004af4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4af8:	4b01      	ldr	r3, [pc, #4]	; (4b00 <EIC_7_Handler+0xc>)
    4afa:	4798      	blx	r3
}
    4afc:	bf00      	nop
    4afe:	bd80      	pop	{r7, pc}
    4b00:	00004999 	.word	0x00004999

00004b04 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4b04:	b480      	push	{r7}
    4b06:	b085      	sub	sp, #20
    4b08:	af00      	add	r7, sp, #0
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	460b      	mov	r3, r1
    4b0e:	607a      	str	r2, [r7, #4]
    4b10:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4b12:	7afa      	ldrb	r2, [r7, #11]
    4b14:	68fb      	ldr	r3, [r7, #12]
    4b16:	3248      	adds	r2, #72	; 0x48
    4b18:	6879      	ldr	r1, [r7, #4]
    4b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b1e:	bf00      	nop
    4b20:	3714      	adds	r7, #20
    4b22:	46bd      	mov	sp, r7
    4b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b28:	4770      	bx	lr

00004b2a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4b2a:	b480      	push	{r7}
    4b2c:	b083      	sub	sp, #12
    4b2e:	af00      	add	r7, sp, #0
    4b30:	6078      	str	r0, [r7, #4]
    4b32:	460b      	mov	r3, r1
    4b34:	70fb      	strb	r3, [r7, #3]
    4b36:	4613      	mov	r3, r2
    4b38:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4b3a:	78fb      	ldrb	r3, [r7, #3]
    4b3c:	687a      	ldr	r2, [r7, #4]
    4b3e:	3304      	adds	r3, #4
    4b40:	00db      	lsls	r3, r3, #3
    4b42:	4413      	add	r3, r2
    4b44:	78ba      	ldrb	r2, [r7, #2]
    4b46:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4b48:	78fb      	ldrb	r3, [r7, #3]
    4b4a:	78ba      	ldrb	r2, [r7, #2]
    4b4c:	43d2      	mvns	r2, r2
    4b4e:	b2d1      	uxtb	r1, r2
    4b50:	687a      	ldr	r2, [r7, #4]
    4b52:	3304      	adds	r3, #4
    4b54:	00db      	lsls	r3, r3, #3
    4b56:	4413      	add	r3, r2
    4b58:	460a      	mov	r2, r1
    4b5a:	711a      	strb	r2, [r3, #4]
}
    4b5c:	bf00      	nop
    4b5e:	370c      	adds	r7, #12
    4b60:	46bd      	mov	sp, r7
    4b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b66:	4770      	bx	lr

00004b68 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4b68:	b480      	push	{r7}
    4b6a:	b085      	sub	sp, #20
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	60f8      	str	r0, [r7, #12]
    4b70:	460b      	mov	r3, r1
    4b72:	607a      	str	r2, [r7, #4]
    4b74:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4b76:	7afa      	ldrb	r2, [r7, #11]
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	3204      	adds	r2, #4
    4b7c:	6879      	ldr	r1, [r7, #4]
    4b7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b82:	bf00      	nop
    4b84:	3714      	adds	r7, #20
    4b86:	46bd      	mov	sp, r7
    4b88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8c:	4770      	bx	lr
	...

00004b90 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4b90:	b580      	push	{r7, lr}
    4b92:	b082      	sub	sp, #8
    4b94:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4b96:	2300      	movs	r3, #0
    4b98:	71fb      	strb	r3, [r7, #7]
    4b9a:	e00b      	b.n	4bb4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4b9c:	79fb      	ldrb	r3, [r7, #7]
    4b9e:	4a18      	ldr	r2, [pc, #96]	; (4c00 <_event_system_init+0x70>)
    4ba0:	5cd3      	ldrb	r3, [r2, r3]
    4ba2:	461a      	mov	r2, r3
    4ba4:	79fb      	ldrb	r3, [r7, #7]
    4ba6:	4619      	mov	r1, r3
    4ba8:	4816      	ldr	r0, [pc, #88]	; (4c04 <_event_system_init+0x74>)
    4baa:	4b17      	ldr	r3, [pc, #92]	; (4c08 <_event_system_init+0x78>)
    4bac:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4bae:	79fb      	ldrb	r3, [r7, #7]
    4bb0:	3301      	adds	r3, #1
    4bb2:	71fb      	strb	r3, [r7, #7]
    4bb4:	79fb      	ldrb	r3, [r7, #7]
    4bb6:	2b42      	cmp	r3, #66	; 0x42
    4bb8:	d9f0      	bls.n	4b9c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4bba:	2300      	movs	r3, #0
    4bbc:	71fb      	strb	r3, [r7, #7]
    4bbe:	e016      	b.n	4bee <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4bc0:	79fb      	ldrb	r3, [r7, #7]
    4bc2:	4a12      	ldr	r2, [pc, #72]	; (4c0c <_event_system_init+0x7c>)
    4bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4bc8:	461a      	mov	r2, r3
    4bca:	79fb      	ldrb	r3, [r7, #7]
    4bcc:	4619      	mov	r1, r3
    4bce:	480d      	ldr	r0, [pc, #52]	; (4c04 <_event_system_init+0x74>)
    4bd0:	4b0f      	ldr	r3, [pc, #60]	; (4c10 <_event_system_init+0x80>)
    4bd2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4bd4:	79fb      	ldrb	r3, [r7, #7]
    4bd6:	4a0f      	ldr	r2, [pc, #60]	; (4c14 <_event_system_init+0x84>)
    4bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4bdc:	b2da      	uxtb	r2, r3
    4bde:	79fb      	ldrb	r3, [r7, #7]
    4be0:	4619      	mov	r1, r3
    4be2:	4808      	ldr	r0, [pc, #32]	; (4c04 <_event_system_init+0x74>)
    4be4:	4b0c      	ldr	r3, [pc, #48]	; (4c18 <_event_system_init+0x88>)
    4be6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4be8:	79fb      	ldrb	r3, [r7, #7]
    4bea:	3301      	adds	r3, #1
    4bec:	71fb      	strb	r3, [r7, #7]
    4bee:	79fb      	ldrb	r3, [r7, #7]
    4bf0:	2b1f      	cmp	r3, #31
    4bf2:	d9e5      	bls.n	4bc0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4bf4:	2300      	movs	r3, #0
}
    4bf6:	4618      	mov	r0, r3
    4bf8:	3708      	adds	r7, #8
    4bfa:	46bd      	mov	sp, r7
    4bfc:	bd80      	pop	{r7, pc}
    4bfe:	bf00      	nop
    4c00:	0000ef18 	.word	0x0000ef18
    4c04:	4100e000 	.word	0x4100e000
    4c08:	00004b05 	.word	0x00004b05
    4c0c:	0000ef5c 	.word	0x0000ef5c
    4c10:	00004b69 	.word	0x00004b69
    4c14:	0000ef9c 	.word	0x0000ef9c
    4c18:	00004b2b 	.word	0x00004b2b

00004c1c <hri_gclk_wait_for_sync>:
{
    4c1c:	b480      	push	{r7}
    4c1e:	b083      	sub	sp, #12
    4c20:	af00      	add	r7, sp, #0
    4c22:	6078      	str	r0, [r7, #4]
    4c24:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4c26:	bf00      	nop
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	685a      	ldr	r2, [r3, #4]
    4c2c:	683b      	ldr	r3, [r7, #0]
    4c2e:	4013      	ands	r3, r2
    4c30:	2b00      	cmp	r3, #0
    4c32:	d1f9      	bne.n	4c28 <hri_gclk_wait_for_sync+0xc>
}
    4c34:	bf00      	nop
    4c36:	370c      	adds	r7, #12
    4c38:	46bd      	mov	sp, r7
    4c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c3e:	4770      	bx	lr

00004c40 <hri_gclk_write_GENCTRL_reg>:
{
    4c40:	b580      	push	{r7, lr}
    4c42:	b084      	sub	sp, #16
    4c44:	af00      	add	r7, sp, #0
    4c46:	60f8      	str	r0, [r7, #12]
    4c48:	460b      	mov	r3, r1
    4c4a:	607a      	str	r2, [r7, #4]
    4c4c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4c4e:	7afa      	ldrb	r2, [r7, #11]
    4c50:	68fb      	ldr	r3, [r7, #12]
    4c52:	3208      	adds	r2, #8
    4c54:	6879      	ldr	r1, [r7, #4]
    4c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4c5a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4c5e:	68f8      	ldr	r0, [r7, #12]
    4c60:	4b02      	ldr	r3, [pc, #8]	; (4c6c <hri_gclk_write_GENCTRL_reg+0x2c>)
    4c62:	4798      	blx	r3
}
    4c64:	bf00      	nop
    4c66:	3710      	adds	r7, #16
    4c68:	46bd      	mov	sp, r7
    4c6a:	bd80      	pop	{r7, pc}
    4c6c:	00004c1d 	.word	0x00004c1d

00004c70 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b082      	sub	sp, #8
    4c74:	af00      	add	r7, sp, #0
    4c76:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4c78:	687b      	ldr	r3, [r7, #4]
    4c7a:	f003 0301 	and.w	r3, r3, #1
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d004      	beq.n	4c8c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4c82:	4a2c      	ldr	r2, [pc, #176]	; (4d34 <_gclk_init_generators_by_fref+0xc4>)
    4c84:	2100      	movs	r1, #0
    4c86:	482c      	ldr	r0, [pc, #176]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4c88:	4b2c      	ldr	r3, [pc, #176]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4c8a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	f003 0302 	and.w	r3, r3, #2
    4c92:	2b00      	cmp	r3, #0
    4c94:	d004      	beq.n	4ca0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4c96:	4a2a      	ldr	r2, [pc, #168]	; (4d40 <_gclk_init_generators_by_fref+0xd0>)
    4c98:	2101      	movs	r1, #1
    4c9a:	4827      	ldr	r0, [pc, #156]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4c9c:	4b27      	ldr	r3, [pc, #156]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4c9e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	f003 0304 	and.w	r3, r3, #4
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d004      	beq.n	4cb4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4caa:	4a26      	ldr	r2, [pc, #152]	; (4d44 <_gclk_init_generators_by_fref+0xd4>)
    4cac:	2102      	movs	r1, #2
    4cae:	4822      	ldr	r0, [pc, #136]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4cb0:	4b22      	ldr	r3, [pc, #136]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4cb2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	f003 0308 	and.w	r3, r3, #8
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d004      	beq.n	4cc8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4cbe:	4a22      	ldr	r2, [pc, #136]	; (4d48 <_gclk_init_generators_by_fref+0xd8>)
    4cc0:	2103      	movs	r1, #3
    4cc2:	481d      	ldr	r0, [pc, #116]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4cc4:	4b1d      	ldr	r3, [pc, #116]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4cc6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	f003 0310 	and.w	r3, r3, #16
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d004      	beq.n	4cdc <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4cd2:	4a1e      	ldr	r2, [pc, #120]	; (4d4c <_gclk_init_generators_by_fref+0xdc>)
    4cd4:	2104      	movs	r1, #4
    4cd6:	4818      	ldr	r0, [pc, #96]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4cd8:	4b18      	ldr	r3, [pc, #96]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4cda:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	f003 0320 	and.w	r3, r3, #32
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d004      	beq.n	4cf0 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4ce6:	4a1a      	ldr	r2, [pc, #104]	; (4d50 <_gclk_init_generators_by_fref+0xe0>)
    4ce8:	2105      	movs	r1, #5
    4cea:	4813      	ldr	r0, [pc, #76]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4cec:	4b13      	ldr	r3, [pc, #76]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4cee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d004      	beq.n	4d04 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4cfa:	4a16      	ldr	r2, [pc, #88]	; (4d54 <_gclk_init_generators_by_fref+0xe4>)
    4cfc:	2106      	movs	r1, #6
    4cfe:	480e      	ldr	r0, [pc, #56]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4d00:	4b0e      	ldr	r3, [pc, #56]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4d02:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d004      	beq.n	4d18 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4d0e:	4a12      	ldr	r2, [pc, #72]	; (4d58 <_gclk_init_generators_by_fref+0xe8>)
    4d10:	210a      	movs	r1, #10
    4d12:	4809      	ldr	r0, [pc, #36]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4d14:	4b09      	ldr	r3, [pc, #36]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4d16:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d004      	beq.n	4d2c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4d22:	4a0e      	ldr	r2, [pc, #56]	; (4d5c <_gclk_init_generators_by_fref+0xec>)
    4d24:	210b      	movs	r1, #11
    4d26:	4804      	ldr	r0, [pc, #16]	; (4d38 <_gclk_init_generators_by_fref+0xc8>)
    4d28:	4b04      	ldr	r3, [pc, #16]	; (4d3c <_gclk_init_generators_by_fref+0xcc>)
    4d2a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4d2c:	bf00      	nop
    4d2e:	3708      	adds	r7, #8
    4d30:	46bd      	mov	sp, r7
    4d32:	bd80      	pop	{r7, pc}
    4d34:	00010107 	.word	0x00010107
    4d38:	40001c00 	.word	0x40001c00
    4d3c:	00004c41 	.word	0x00004c41
    4d40:	00010907 	.word	0x00010907
    4d44:	00010906 	.word	0x00010906
    4d48:	00020908 	.word	0x00020908
    4d4c:	00010901 	.word	0x00010901
    4d50:	00062901 	.word	0x00062901
    4d54:	000c2901 	.word	0x000c2901
    4d58:	00010905 	.word	0x00010905
    4d5c:	00041905 	.word	0x00041905

00004d60 <hri_mclk_write_CPUDIV_reg>:
{
    4d60:	b480      	push	{r7}
    4d62:	b083      	sub	sp, #12
    4d64:	af00      	add	r7, sp, #0
    4d66:	6078      	str	r0, [r7, #4]
    4d68:	460b      	mov	r3, r1
    4d6a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4d6c:	687b      	ldr	r3, [r7, #4]
    4d6e:	78fa      	ldrb	r2, [r7, #3]
    4d70:	715a      	strb	r2, [r3, #5]
}
    4d72:	bf00      	nop
    4d74:	370c      	adds	r7, #12
    4d76:	46bd      	mov	sp, r7
    4d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d7c:	4770      	bx	lr
	...

00004d80 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4d80:	b580      	push	{r7, lr}
    4d82:	b082      	sub	sp, #8
    4d84:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4d86:	4b05      	ldr	r3, [pc, #20]	; (4d9c <_mclk_init+0x1c>)
    4d88:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4d8a:	2101      	movs	r1, #1
    4d8c:	6878      	ldr	r0, [r7, #4]
    4d8e:	4b04      	ldr	r3, [pc, #16]	; (4da0 <_mclk_init+0x20>)
    4d90:	4798      	blx	r3
}
    4d92:	bf00      	nop
    4d94:	3708      	adds	r7, #8
    4d96:	46bd      	mov	sp, r7
    4d98:	bd80      	pop	{r7, pc}
    4d9a:	bf00      	nop
    4d9c:	40000800 	.word	0x40000800
    4da0:	00004d61 	.word	0x00004d61

00004da4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4da4:	b480      	push	{r7}
    4da6:	b083      	sub	sp, #12
    4da8:	af00      	add	r7, sp, #0
    4daa:	6078      	str	r0, [r7, #4]
    4dac:	460b      	mov	r3, r1
    4dae:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	78fa      	ldrb	r2, [r7, #3]
    4db4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4db6:	bf00      	nop
    4db8:	370c      	adds	r7, #12
    4dba:	46bd      	mov	sp, r7
    4dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc0:	4770      	bx	lr

00004dc2 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4dc2:	b480      	push	{r7}
    4dc4:	b083      	sub	sp, #12
    4dc6:	af00      	add	r7, sp, #0
    4dc8:	6078      	str	r0, [r7, #4]
    4dca:	460b      	mov	r3, r1
    4dcc:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	887a      	ldrh	r2, [r7, #2]
    4dd2:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4dd4:	bf00      	nop
    4dd6:	370c      	adds	r7, #12
    4dd8:	46bd      	mov	sp, r7
    4dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dde:	4770      	bx	lr

00004de0 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4de0:	b480      	push	{r7}
    4de2:	b083      	sub	sp, #12
    4de4:	af00      	add	r7, sp, #0
    4de6:	6078      	str	r0, [r7, #4]
    4de8:	460b      	mov	r3, r1
    4dea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	78fa      	ldrb	r2, [r7, #3]
    4df0:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4df2:	bf00      	nop
    4df4:	370c      	adds	r7, #12
    4df6:	46bd      	mov	sp, r7
    4df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfc:	4770      	bx	lr

00004dfe <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4dfe:	b480      	push	{r7}
    4e00:	b083      	sub	sp, #12
    4e02:	af00      	add	r7, sp, #0
    4e04:	6078      	str	r0, [r7, #4]
    4e06:	460b      	mov	r3, r1
    4e08:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	78fa      	ldrb	r2, [r7, #3]
    4e0e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e10:	bf00      	nop
    4e12:	370c      	adds	r7, #12
    4e14:	46bd      	mov	sp, r7
    4e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e1a:	4770      	bx	lr

00004e1c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4e1c:	b480      	push	{r7}
    4e1e:	b085      	sub	sp, #20
    4e20:	af00      	add	r7, sp, #0
    4e22:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	69db      	ldr	r3, [r3, #28]
    4e28:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4e2a:	68fb      	ldr	r3, [r7, #12]
    4e2c:	0a1b      	lsrs	r3, r3, #8
    4e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e32:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e34:	68fb      	ldr	r3, [r7, #12]
}
    4e36:	4618      	mov	r0, r3
    4e38:	3714      	adds	r7, #20
    4e3a:	46bd      	mov	sp, r7
    4e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e40:	4770      	bx	lr

00004e42 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4e42:	b480      	push	{r7}
    4e44:	b083      	sub	sp, #12
    4e46:	af00      	add	r7, sp, #0
    4e48:	6078      	str	r0, [r7, #4]
    4e4a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	683a      	ldr	r2, [r7, #0]
    4e50:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e52:	bf00      	nop
    4e54:	370c      	adds	r7, #12
    4e56:	46bd      	mov	sp, r7
    4e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5c:	4770      	bx	lr
	...

00004e60 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4e60:	b580      	push	{r7, lr}
    4e62:	b082      	sub	sp, #8
    4e64:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4e66:	4b13      	ldr	r3, [pc, #76]	; (4eb4 <_osc32kctrl_init_sources+0x54>)
    4e68:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4e6a:	2300      	movs	r3, #0
    4e6c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4e6e:	f242 018e 	movw	r1, #8334	; 0x208e
    4e72:	6878      	ldr	r0, [r7, #4]
    4e74:	4b10      	ldr	r3, [pc, #64]	; (4eb8 <_osc32kctrl_init_sources+0x58>)
    4e76:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4e78:	2100      	movs	r1, #0
    4e7a:	6878      	ldr	r0, [r7, #4]
    4e7c:	4b0f      	ldr	r3, [pc, #60]	; (4ebc <_osc32kctrl_init_sources+0x5c>)
    4e7e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4e80:	2100      	movs	r1, #0
    4e82:	6878      	ldr	r0, [r7, #4]
    4e84:	4b0e      	ldr	r3, [pc, #56]	; (4ec0 <_osc32kctrl_init_sources+0x60>)
    4e86:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4e88:	6878      	ldr	r0, [r7, #4]
    4e8a:	4b0e      	ldr	r3, [pc, #56]	; (4ec4 <_osc32kctrl_init_sources+0x64>)
    4e8c:	4798      	blx	r3
    4e8e:	4603      	mov	r3, r0
    4e90:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4e92:	887b      	ldrh	r3, [r7, #2]
    4e94:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4e96:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4e9a:	4619      	mov	r1, r3
    4e9c:	6878      	ldr	r0, [r7, #4]
    4e9e:	4b0a      	ldr	r3, [pc, #40]	; (4ec8 <_osc32kctrl_init_sources+0x68>)
    4ea0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4ea2:	2100      	movs	r1, #0
    4ea4:	6878      	ldr	r0, [r7, #4]
    4ea6:	4b09      	ldr	r3, [pc, #36]	; (4ecc <_osc32kctrl_init_sources+0x6c>)
    4ea8:	4798      	blx	r3
	(void)calib;
}
    4eaa:	bf00      	nop
    4eac:	3708      	adds	r7, #8
    4eae:	46bd      	mov	sp, r7
    4eb0:	bd80      	pop	{r7, pc}
    4eb2:	bf00      	nop
    4eb4:	40001400 	.word	0x40001400
    4eb8:	00004dc3 	.word	0x00004dc3
    4ebc:	00004de1 	.word	0x00004de1
    4ec0:	00004dff 	.word	0x00004dff
    4ec4:	00004e1d 	.word	0x00004e1d
    4ec8:	00004e43 	.word	0x00004e43
    4ecc:	00004da5 	.word	0x00004da5

00004ed0 <hri_gclk_wait_for_sync>:
{
    4ed0:	b480      	push	{r7}
    4ed2:	b083      	sub	sp, #12
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	6078      	str	r0, [r7, #4]
    4ed8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4eda:	bf00      	nop
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	685a      	ldr	r2, [r3, #4]
    4ee0:	683b      	ldr	r3, [r7, #0]
    4ee2:	4013      	ands	r3, r2
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d1f9      	bne.n	4edc <hri_gclk_wait_for_sync+0xc>
}
    4ee8:	bf00      	nop
    4eea:	370c      	adds	r7, #12
    4eec:	46bd      	mov	sp, r7
    4eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef2:	4770      	bx	lr

00004ef4 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4ef4:	b480      	push	{r7}
    4ef6:	b083      	sub	sp, #12
    4ef8:	af00      	add	r7, sp, #0
    4efa:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	685b      	ldr	r3, [r3, #4]
    4f00:	089b      	lsrs	r3, r3, #2
    4f02:	f003 0301 	and.w	r3, r3, #1
    4f06:	2b00      	cmp	r3, #0
    4f08:	bf14      	ite	ne
    4f0a:	2301      	movne	r3, #1
    4f0c:	2300      	moveq	r3, #0
    4f0e:	b2db      	uxtb	r3, r3
}
    4f10:	4618      	mov	r0, r3
    4f12:	370c      	adds	r7, #12
    4f14:	46bd      	mov	sp, r7
    4f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1a:	4770      	bx	lr

00004f1c <hri_gclk_read_SYNCBUSY_reg>:
{
    4f1c:	b480      	push	{r7}
    4f1e:	b083      	sub	sp, #12
    4f20:	af00      	add	r7, sp, #0
    4f22:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	685b      	ldr	r3, [r3, #4]
}
    4f28:	4618      	mov	r0, r3
    4f2a:	370c      	adds	r7, #12
    4f2c:	46bd      	mov	sp, r7
    4f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f32:	4770      	bx	lr

00004f34 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4f34:	b580      	push	{r7, lr}
    4f36:	b086      	sub	sp, #24
    4f38:	af00      	add	r7, sp, #0
    4f3a:	60f8      	str	r0, [r7, #12]
    4f3c:	460b      	mov	r3, r1
    4f3e:	607a      	str	r2, [r7, #4]
    4f40:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4f42:	7afa      	ldrb	r2, [r7, #11]
    4f44:	68fb      	ldr	r3, [r7, #12]
    4f46:	3208      	adds	r2, #8
    4f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f4c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	f023 030f 	bic.w	r3, r3, #15
    4f54:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4f56:	687b      	ldr	r3, [r7, #4]
    4f58:	f003 030f 	and.w	r3, r3, #15
    4f5c:	697a      	ldr	r2, [r7, #20]
    4f5e:	4313      	orrs	r3, r2
    4f60:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4f62:	7afa      	ldrb	r2, [r7, #11]
    4f64:	68fb      	ldr	r3, [r7, #12]
    4f66:	3208      	adds	r2, #8
    4f68:	6979      	ldr	r1, [r7, #20]
    4f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4f6e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4f72:	68f8      	ldr	r0, [r7, #12]
    4f74:	4b02      	ldr	r3, [pc, #8]	; (4f80 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4f76:	4798      	blx	r3
}
    4f78:	bf00      	nop
    4f7a:	3718      	adds	r7, #24
    4f7c:	46bd      	mov	sp, r7
    4f7e:	bd80      	pop	{r7, pc}
    4f80:	00004ed1 	.word	0x00004ed1

00004f84 <hri_gclk_write_PCHCTRL_reg>:
{
    4f84:	b480      	push	{r7}
    4f86:	b085      	sub	sp, #20
    4f88:	af00      	add	r7, sp, #0
    4f8a:	60f8      	str	r0, [r7, #12]
    4f8c:	460b      	mov	r3, r1
    4f8e:	607a      	str	r2, [r7, #4]
    4f90:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4f92:	7afa      	ldrb	r2, [r7, #11]
    4f94:	68fb      	ldr	r3, [r7, #12]
    4f96:	3220      	adds	r2, #32
    4f98:	6879      	ldr	r1, [r7, #4]
    4f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4f9e:	bf00      	nop
    4fa0:	3714      	adds	r7, #20
    4fa2:	46bd      	mov	sp, r7
    4fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa8:	4770      	bx	lr

00004faa <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4faa:	b480      	push	{r7}
    4fac:	b085      	sub	sp, #20
    4fae:	af00      	add	r7, sp, #0
    4fb0:	60f8      	str	r0, [r7, #12]
    4fb2:	460b      	mov	r3, r1
    4fb4:	607a      	str	r2, [r7, #4]
    4fb6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4fb8:	bf00      	nop
    4fba:	7afa      	ldrb	r2, [r7, #11]
    4fbc:	68f9      	ldr	r1, [r7, #12]
    4fbe:	4613      	mov	r3, r2
    4fc0:	009b      	lsls	r3, r3, #2
    4fc2:	4413      	add	r3, r2
    4fc4:	009b      	lsls	r3, r3, #2
    4fc6:	440b      	add	r3, r1
    4fc8:	333c      	adds	r3, #60	; 0x3c
    4fca:	681a      	ldr	r2, [r3, #0]
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	4013      	ands	r3, r2
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d1f2      	bne.n	4fba <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4fd4:	bf00      	nop
    4fd6:	3714      	adds	r7, #20
    4fd8:	46bd      	mov	sp, r7
    4fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fde:	4770      	bx	lr

00004fe0 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4fe0:	b480      	push	{r7}
    4fe2:	b083      	sub	sp, #12
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
    4fe8:	460b      	mov	r3, r1
    4fea:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4fec:	78fa      	ldrb	r2, [r7, #3]
    4fee:	6879      	ldr	r1, [r7, #4]
    4ff0:	4613      	mov	r3, r2
    4ff2:	009b      	lsls	r3, r3, #2
    4ff4:	4413      	add	r3, r2
    4ff6:	009b      	lsls	r3, r3, #2
    4ff8:	440b      	add	r3, r1
    4ffa:	3340      	adds	r3, #64	; 0x40
    4ffc:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4ffe:	f003 0301 	and.w	r3, r3, #1
    5002:	2b00      	cmp	r3, #0
    5004:	bf14      	ite	ne
    5006:	2301      	movne	r3, #1
    5008:	2300      	moveq	r3, #0
    500a:	b2db      	uxtb	r3, r3
}
    500c:	4618      	mov	r0, r3
    500e:	370c      	adds	r7, #12
    5010:	46bd      	mov	sp, r7
    5012:	f85d 7b04 	ldr.w	r7, [sp], #4
    5016:	4770      	bx	lr

00005018 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5018:	b480      	push	{r7}
    501a:	b083      	sub	sp, #12
    501c:	af00      	add	r7, sp, #0
    501e:	6078      	str	r0, [r7, #4]
    5020:	460b      	mov	r3, r1
    5022:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5024:	78fa      	ldrb	r2, [r7, #3]
    5026:	6879      	ldr	r1, [r7, #4]
    5028:	4613      	mov	r3, r2
    502a:	009b      	lsls	r3, r3, #2
    502c:	4413      	add	r3, r2
    502e:	009b      	lsls	r3, r3, #2
    5030:	440b      	add	r3, r1
    5032:	3340      	adds	r3, #64	; 0x40
    5034:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5036:	085b      	lsrs	r3, r3, #1
    5038:	f003 0301 	and.w	r3, r3, #1
    503c:	2b00      	cmp	r3, #0
    503e:	bf14      	ite	ne
    5040:	2301      	movne	r3, #1
    5042:	2300      	moveq	r3, #0
    5044:	b2db      	uxtb	r3, r3
}
    5046:	4618      	mov	r0, r3
    5048:	370c      	adds	r7, #12
    504a:	46bd      	mov	sp, r7
    504c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5050:	4770      	bx	lr
	...

00005054 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5054:	b580      	push	{r7, lr}
    5056:	b082      	sub	sp, #8
    5058:	af00      	add	r7, sp, #0
    505a:	6078      	str	r0, [r7, #4]
    505c:	460b      	mov	r3, r1
    505e:	70fb      	strb	r3, [r7, #3]
    5060:	4613      	mov	r3, r2
    5062:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5064:	78fa      	ldrb	r2, [r7, #3]
    5066:	6879      	ldr	r1, [r7, #4]
    5068:	4613      	mov	r3, r2
    506a:	009b      	lsls	r3, r3, #2
    506c:	4413      	add	r3, r2
    506e:	009b      	lsls	r3, r3, #2
    5070:	440b      	add	r3, r1
    5072:	3330      	adds	r3, #48	; 0x30
    5074:	78ba      	ldrb	r2, [r7, #2]
    5076:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5078:	78fb      	ldrb	r3, [r7, #3]
    507a:	2202      	movs	r2, #2
    507c:	4619      	mov	r1, r3
    507e:	6878      	ldr	r0, [r7, #4]
    5080:	4b02      	ldr	r3, [pc, #8]	; (508c <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5082:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5084:	bf00      	nop
    5086:	3708      	adds	r7, #8
    5088:	46bd      	mov	sp, r7
    508a:	bd80      	pop	{r7, pc}
    508c:	00004fab 	.word	0x00004fab

00005090 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5090:	b580      	push	{r7, lr}
    5092:	b084      	sub	sp, #16
    5094:	af00      	add	r7, sp, #0
    5096:	60f8      	str	r0, [r7, #12]
    5098:	460b      	mov	r3, r1
    509a:	607a      	str	r2, [r7, #4]
    509c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    509e:	7afa      	ldrb	r2, [r7, #11]
    50a0:	68f9      	ldr	r1, [r7, #12]
    50a2:	4613      	mov	r3, r2
    50a4:	009b      	lsls	r3, r3, #2
    50a6:	4413      	add	r3, r2
    50a8:	009b      	lsls	r3, r3, #2
    50aa:	440b      	add	r3, r1
    50ac:	3334      	adds	r3, #52	; 0x34
    50ae:	687a      	ldr	r2, [r7, #4]
    50b0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    50b2:	7afb      	ldrb	r3, [r7, #11]
    50b4:	2206      	movs	r2, #6
    50b6:	4619      	mov	r1, r3
    50b8:	68f8      	ldr	r0, [r7, #12]
    50ba:	4b03      	ldr	r3, [pc, #12]	; (50c8 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    50bc:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50be:	bf00      	nop
    50c0:	3710      	adds	r7, #16
    50c2:	46bd      	mov	sp, r7
    50c4:	bd80      	pop	{r7, pc}
    50c6:	bf00      	nop
    50c8:	00004fab 	.word	0x00004fab

000050cc <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    50cc:	b480      	push	{r7}
    50ce:	b085      	sub	sp, #20
    50d0:	af00      	add	r7, sp, #0
    50d2:	60f8      	str	r0, [r7, #12]
    50d4:	460b      	mov	r3, r1
    50d6:	607a      	str	r2, [r7, #4]
    50d8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    50da:	7afa      	ldrb	r2, [r7, #11]
    50dc:	68f9      	ldr	r1, [r7, #12]
    50de:	4613      	mov	r3, r2
    50e0:	009b      	lsls	r3, r3, #2
    50e2:	4413      	add	r3, r2
    50e4:	009b      	lsls	r3, r3, #2
    50e6:	440b      	add	r3, r1
    50e8:	3338      	adds	r3, #56	; 0x38
    50ea:	687a      	ldr	r2, [r7, #4]
    50ec:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50ee:	bf00      	nop
    50f0:	3714      	adds	r7, #20
    50f2:	46bd      	mov	sp, r7
    50f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f8:	4770      	bx	lr

000050fa <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    50fa:	b480      	push	{r7}
    50fc:	b083      	sub	sp, #12
    50fe:	af00      	add	r7, sp, #0
    5100:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5102:	687b      	ldr	r3, [r7, #4]
    5104:	691b      	ldr	r3, [r3, #16]
    5106:	085b      	lsrs	r3, r3, #1
    5108:	f003 0301 	and.w	r3, r3, #1
    510c:	2b00      	cmp	r3, #0
    510e:	bf14      	ite	ne
    5110:	2301      	movne	r3, #1
    5112:	2300      	moveq	r3, #0
    5114:	b2db      	uxtb	r3, r3
}
    5116:	4618      	mov	r0, r3
    5118:	370c      	adds	r7, #12
    511a:	46bd      	mov	sp, r7
    511c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5120:	4770      	bx	lr

00005122 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5122:	b480      	push	{r7}
    5124:	b083      	sub	sp, #12
    5126:	af00      	add	r7, sp, #0
    5128:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	691b      	ldr	r3, [r3, #16]
    512e:	0a1b      	lsrs	r3, r3, #8
    5130:	f003 0301 	and.w	r3, r3, #1
    5134:	2b00      	cmp	r3, #0
    5136:	bf14      	ite	ne
    5138:	2301      	movne	r3, #1
    513a:	2300      	moveq	r3, #0
    513c:	b2db      	uxtb	r3, r3
}
    513e:	4618      	mov	r0, r3
    5140:	370c      	adds	r7, #12
    5142:	46bd      	mov	sp, r7
    5144:	f85d 7b04 	ldr.w	r7, [sp], #4
    5148:	4770      	bx	lr

0000514a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    514a:	b480      	push	{r7}
    514c:	b085      	sub	sp, #20
    514e:	af00      	add	r7, sp, #0
    5150:	6078      	str	r0, [r7, #4]
    5152:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	691b      	ldr	r3, [r3, #16]
    5158:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    515a:	68fa      	ldr	r2, [r7, #12]
    515c:	683b      	ldr	r3, [r7, #0]
    515e:	4013      	ands	r3, r2
    5160:	60fb      	str	r3, [r7, #12]
	return tmp;
    5162:	68fb      	ldr	r3, [r7, #12]
}
    5164:	4618      	mov	r0, r3
    5166:	3714      	adds	r7, #20
    5168:	46bd      	mov	sp, r7
    516a:	f85d 7b04 	ldr.w	r7, [sp], #4
    516e:	4770      	bx	lr

00005170 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5170:	b480      	push	{r7}
    5172:	b085      	sub	sp, #20
    5174:	af00      	add	r7, sp, #0
    5176:	60f8      	str	r0, [r7, #12]
    5178:	460b      	mov	r3, r1
    517a:	607a      	str	r2, [r7, #4]
    517c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    517e:	7afb      	ldrb	r3, [r7, #11]
    5180:	68fa      	ldr	r2, [r7, #12]
    5182:	3304      	adds	r3, #4
    5184:	009b      	lsls	r3, r3, #2
    5186:	4413      	add	r3, r2
    5188:	687a      	ldr	r2, [r7, #4]
    518a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    518c:	bf00      	nop
    518e:	3714      	adds	r7, #20
    5190:	46bd      	mov	sp, r7
    5192:	f85d 7b04 	ldr.w	r7, [sp], #4
    5196:	4770      	bx	lr

00005198 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5198:	b480      	push	{r7}
    519a:	b083      	sub	sp, #12
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
    51a0:	460b      	mov	r3, r1
    51a2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    51a4:	687b      	ldr	r3, [r7, #4]
    51a6:	78fa      	ldrb	r2, [r7, #3]
    51a8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51aa:	bf00      	nop
    51ac:	370c      	adds	r7, #12
    51ae:	46bd      	mov	sp, r7
    51b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b4:	4770      	bx	lr

000051b6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    51b6:	b480      	push	{r7}
    51b8:	b085      	sub	sp, #20
    51ba:	af00      	add	r7, sp, #0
    51bc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    51be:	687b      	ldr	r3, [r7, #4]
    51c0:	f893 3020 	ldrb.w	r3, [r3, #32]
    51c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    51c6:	7bfb      	ldrb	r3, [r7, #15]
    51c8:	f003 0301 	and.w	r3, r3, #1
    51cc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    51ce:	7bfb      	ldrb	r3, [r7, #15]
    51d0:	2b00      	cmp	r3, #0
    51d2:	bf14      	ite	ne
    51d4:	2301      	movne	r3, #1
    51d6:	2300      	moveq	r3, #0
    51d8:	b2db      	uxtb	r3, r3
}
    51da:	4618      	mov	r0, r3
    51dc:	3714      	adds	r7, #20
    51de:	46bd      	mov	sp, r7
    51e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e4:	4770      	bx	lr

000051e6 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    51e6:	b480      	push	{r7}
    51e8:	b083      	sub	sp, #12
    51ea:	af00      	add	r7, sp, #0
    51ec:	6078      	str	r0, [r7, #4]
    51ee:	460b      	mov	r3, r1
    51f0:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	78fa      	ldrb	r2, [r7, #3]
    51f6:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51fa:	bf00      	nop
    51fc:	370c      	adds	r7, #12
    51fe:	46bd      	mov	sp, r7
    5200:	f85d 7b04 	ldr.w	r7, [sp], #4
    5204:	4770      	bx	lr

00005206 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5206:	b480      	push	{r7}
    5208:	b083      	sub	sp, #12
    520a:	af00      	add	r7, sp, #0
    520c:	6078      	str	r0, [r7, #4]
    520e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	683a      	ldr	r2, [r7, #0]
    5214:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5216:	bf00      	nop
    5218:	370c      	adds	r7, #12
    521a:	46bd      	mov	sp, r7
    521c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5220:	4770      	bx	lr

00005222 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5222:	b480      	push	{r7}
    5224:	b083      	sub	sp, #12
    5226:	af00      	add	r7, sp, #0
    5228:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    522a:	687b      	ldr	r3, [r7, #4]
    522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    522e:	4618      	mov	r0, r3
    5230:	370c      	adds	r7, #12
    5232:	46bd      	mov	sp, r7
    5234:	f85d 7b04 	ldr.w	r7, [sp], #4
    5238:	4770      	bx	lr

0000523a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    523a:	b480      	push	{r7}
    523c:	b083      	sub	sp, #12
    523e:	af00      	add	r7, sp, #0
    5240:	6078      	str	r0, [r7, #4]
    5242:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	683a      	ldr	r2, [r7, #0]
    5248:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    524a:	bf00      	nop
    524c:	370c      	adds	r7, #12
    524e:	46bd      	mov	sp, r7
    5250:	f85d 7b04 	ldr.w	r7, [sp], #4
    5254:	4770      	bx	lr

00005256 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5256:	b480      	push	{r7}
    5258:	b085      	sub	sp, #20
    525a:	af00      	add	r7, sp, #0
    525c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    525e:	687b      	ldr	r3, [r7, #4]
    5260:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5264:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5266:	7bfb      	ldrb	r3, [r7, #15]
    5268:	085b      	lsrs	r3, r3, #1
    526a:	b2db      	uxtb	r3, r3
    526c:	f003 0301 	and.w	r3, r3, #1
    5270:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5272:	7bfb      	ldrb	r3, [r7, #15]
    5274:	2b00      	cmp	r3, #0
    5276:	bf14      	ite	ne
    5278:	2301      	movne	r3, #1
    527a:	2300      	moveq	r3, #0
    527c:	b2db      	uxtb	r3, r3
}
    527e:	4618      	mov	r0, r3
    5280:	3714      	adds	r7, #20
    5282:	46bd      	mov	sp, r7
    5284:	f85d 7b04 	ldr.w	r7, [sp], #4
    5288:	4770      	bx	lr

0000528a <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    528a:	b480      	push	{r7}
    528c:	b085      	sub	sp, #20
    528e:	af00      	add	r7, sp, #0
    5290:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5292:	687b      	ldr	r3, [r7, #4]
    5294:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5298:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    529a:	7bfb      	ldrb	r3, [r7, #15]
    529c:	089b      	lsrs	r3, r3, #2
    529e:	b2db      	uxtb	r3, r3
    52a0:	f003 0301 	and.w	r3, r3, #1
    52a4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52a6:	7bfb      	ldrb	r3, [r7, #15]
    52a8:	2b00      	cmp	r3, #0
    52aa:	bf14      	ite	ne
    52ac:	2301      	movne	r3, #1
    52ae:	2300      	moveq	r3, #0
    52b0:	b2db      	uxtb	r3, r3
}
    52b2:	4618      	mov	r0, r3
    52b4:	3714      	adds	r7, #20
    52b6:	46bd      	mov	sp, r7
    52b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52bc:	4770      	bx	lr

000052be <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    52be:	b480      	push	{r7}
    52c0:	b085      	sub	sp, #20
    52c2:	af00      	add	r7, sp, #0
    52c4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    52ce:	7bfb      	ldrb	r3, [r7, #15]
    52d0:	08db      	lsrs	r3, r3, #3
    52d2:	b2db      	uxtb	r3, r3
    52d4:	f003 0301 	and.w	r3, r3, #1
    52d8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52da:	7bfb      	ldrb	r3, [r7, #15]
    52dc:	2b00      	cmp	r3, #0
    52de:	bf14      	ite	ne
    52e0:	2301      	movne	r3, #1
    52e2:	2300      	moveq	r3, #0
    52e4:	b2db      	uxtb	r3, r3
}
    52e6:	4618      	mov	r0, r3
    52e8:	3714      	adds	r7, #20
    52ea:	46bd      	mov	sp, r7
    52ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f0:	4770      	bx	lr

000052f2 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    52f2:	b480      	push	{r7}
    52f4:	b085      	sub	sp, #20
    52f6:	af00      	add	r7, sp, #0
    52f8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5300:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5302:	7bfb      	ldrb	r3, [r7, #15]
    5304:	091b      	lsrs	r3, r3, #4
    5306:	b2db      	uxtb	r3, r3
    5308:	f003 0301 	and.w	r3, r3, #1
    530c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    530e:	7bfb      	ldrb	r3, [r7, #15]
    5310:	2b00      	cmp	r3, #0
    5312:	bf14      	ite	ne
    5314:	2301      	movne	r3, #1
    5316:	2300      	moveq	r3, #0
    5318:	b2db      	uxtb	r3, r3
}
    531a:	4618      	mov	r0, r3
    531c:	3714      	adds	r7, #20
    531e:	46bd      	mov	sp, r7
    5320:	f85d 7b04 	ldr.w	r7, [sp], #4
    5324:	4770      	bx	lr
	...

00005328 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5328:	b580      	push	{r7, lr}
    532a:	b082      	sub	sp, #8
    532c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    532e:	4b0a      	ldr	r3, [pc, #40]	; (5358 <_oscctrl_init_sources+0x30>)
    5330:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5332:	4a0a      	ldr	r2, [pc, #40]	; (535c <_oscctrl_init_sources+0x34>)
    5334:	2101      	movs	r1, #1
    5336:	6878      	ldr	r0, [r7, #4]
    5338:	4b09      	ldr	r3, [pc, #36]	; (5360 <_oscctrl_init_sources+0x38>)
    533a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    533c:	bf00      	nop
    533e:	6878      	ldr	r0, [r7, #4]
    5340:	4b08      	ldr	r3, [pc, #32]	; (5364 <_oscctrl_init_sources+0x3c>)
    5342:	4798      	blx	r3
    5344:	4603      	mov	r3, r0
    5346:	f083 0301 	eor.w	r3, r3, #1
    534a:	b2db      	uxtb	r3, r3
    534c:	2b00      	cmp	r3, #0
    534e:	d1f6      	bne.n	533e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5350:	bf00      	nop
    5352:	3708      	adds	r7, #8
    5354:	46bd      	mov	sp, r7
    5356:	bd80      	pop	{r7, pc}
    5358:	40001000 	.word	0x40001000
    535c:	03002606 	.word	0x03002606
    5360:	00005171 	.word	0x00005171
    5364:	000050fb 	.word	0x000050fb

00005368 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5368:	b580      	push	{r7, lr}
    536a:	b084      	sub	sp, #16
    536c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    536e:	4b6b      	ldr	r3, [pc, #428]	; (551c <_oscctrl_init_referenced_generators+0x1b4>)
    5370:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5372:	2204      	movs	r2, #4
    5374:	2100      	movs	r1, #0
    5376:	486a      	ldr	r0, [pc, #424]	; (5520 <_oscctrl_init_referenced_generators+0x1b8>)
    5378:	4b6a      	ldr	r3, [pc, #424]	; (5524 <_oscctrl_init_referenced_generators+0x1bc>)
    537a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    537c:	bf00      	nop
    537e:	4868      	ldr	r0, [pc, #416]	; (5520 <_oscctrl_init_referenced_generators+0x1b8>)
    5380:	4b69      	ldr	r3, [pc, #420]	; (5528 <_oscctrl_init_referenced_generators+0x1c0>)
    5382:	4798      	blx	r3
    5384:	4603      	mov	r3, r0
    5386:	2b00      	cmp	r3, #0
    5388:	d1f9      	bne.n	537e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    538a:	2100      	movs	r1, #0
    538c:	68f8      	ldr	r0, [r7, #12]
    538e:	4b67      	ldr	r3, [pc, #412]	; (552c <_oscctrl_init_referenced_generators+0x1c4>)
    5390:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5392:	4967      	ldr	r1, [pc, #412]	; (5530 <_oscctrl_init_referenced_generators+0x1c8>)
    5394:	68f8      	ldr	r0, [r7, #12]
    5396:	4b67      	ldr	r3, [pc, #412]	; (5534 <_oscctrl_init_referenced_generators+0x1cc>)
    5398:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    539a:	bf00      	nop
    539c:	68f8      	ldr	r0, [r7, #12]
    539e:	4b66      	ldr	r3, [pc, #408]	; (5538 <_oscctrl_init_referenced_generators+0x1d0>)
    53a0:	4798      	blx	r3
    53a2:	4603      	mov	r3, r0
    53a4:	2b00      	cmp	r3, #0
    53a6:	d1f9      	bne.n	539c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    53a8:	2100      	movs	r1, #0
    53aa:	68f8      	ldr	r0, [r7, #12]
    53ac:	4b63      	ldr	r3, [pc, #396]	; (553c <_oscctrl_init_referenced_generators+0x1d4>)
    53ae:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    53b0:	bf00      	nop
    53b2:	68f8      	ldr	r0, [r7, #12]
    53b4:	4b62      	ldr	r3, [pc, #392]	; (5540 <_oscctrl_init_referenced_generators+0x1d8>)
    53b6:	4798      	blx	r3
    53b8:	4603      	mov	r3, r0
    53ba:	2b00      	cmp	r3, #0
    53bc:	d1f9      	bne.n	53b2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    53be:	2302      	movs	r3, #2
    53c0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    53c2:	7afb      	ldrb	r3, [r7, #11]
    53c4:	4619      	mov	r1, r3
    53c6:	68f8      	ldr	r0, [r7, #12]
    53c8:	4b58      	ldr	r3, [pc, #352]	; (552c <_oscctrl_init_referenced_generators+0x1c4>)
    53ca:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    53cc:	bf00      	nop
    53ce:	68f8      	ldr	r0, [r7, #12]
    53d0:	4b5c      	ldr	r3, [pc, #368]	; (5544 <_oscctrl_init_referenced_generators+0x1dc>)
    53d2:	4798      	blx	r3
    53d4:	4603      	mov	r3, r0
    53d6:	2b00      	cmp	r3, #0
    53d8:	d1f9      	bne.n	53ce <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    53da:	68f8      	ldr	r0, [r7, #12]
    53dc:	4b5a      	ldr	r3, [pc, #360]	; (5548 <_oscctrl_init_referenced_generators+0x1e0>)
    53de:	4798      	blx	r3
    53e0:	4603      	mov	r3, r0
    53e2:	4619      	mov	r1, r3
    53e4:	68f8      	ldr	r0, [r7, #12]
    53e6:	4b59      	ldr	r3, [pc, #356]	; (554c <_oscctrl_init_referenced_generators+0x1e4>)
    53e8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    53ea:	bf00      	nop
    53ec:	68f8      	ldr	r0, [r7, #12]
    53ee:	4b58      	ldr	r3, [pc, #352]	; (5550 <_oscctrl_init_referenced_generators+0x1e8>)
    53f0:	4798      	blx	r3
    53f2:	4603      	mov	r3, r0
    53f4:	2b00      	cmp	r3, #0
    53f6:	d1f9      	bne.n	53ec <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    53f8:	2319      	movs	r3, #25
    53fa:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    53fc:	7afb      	ldrb	r3, [r7, #11]
    53fe:	4619      	mov	r1, r3
    5400:	68f8      	ldr	r0, [r7, #12]
    5402:	4b4e      	ldr	r3, [pc, #312]	; (553c <_oscctrl_init_referenced_generators+0x1d4>)
    5404:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5406:	bf00      	nop
    5408:	68f8      	ldr	r0, [r7, #12]
    540a:	4b4d      	ldr	r3, [pc, #308]	; (5540 <_oscctrl_init_referenced_generators+0x1d8>)
    540c:	4798      	blx	r3
    540e:	4603      	mov	r3, r0
    5410:	2b00      	cmp	r3, #0
    5412:	d1f9      	bne.n	5408 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5414:	2245      	movs	r2, #69	; 0x45
    5416:	2101      	movs	r1, #1
    5418:	4841      	ldr	r0, [pc, #260]	; (5520 <_oscctrl_init_referenced_generators+0x1b8>)
    541a:	4b4e      	ldr	r3, [pc, #312]	; (5554 <_oscctrl_init_referenced_generators+0x1ec>)
    541c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    541e:	223b      	movs	r2, #59	; 0x3b
    5420:	2100      	movs	r1, #0
    5422:	68f8      	ldr	r0, [r7, #12]
    5424:	4b4c      	ldr	r3, [pc, #304]	; (5558 <_oscctrl_init_referenced_generators+0x1f0>)
    5426:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5428:	f44f 6201 	mov.w	r2, #2064	; 0x810
    542c:	2100      	movs	r1, #0
    542e:	68f8      	ldr	r0, [r7, #12]
    5430:	4b4a      	ldr	r3, [pc, #296]	; (555c <_oscctrl_init_referenced_generators+0x1f4>)
    5432:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5434:	2242      	movs	r2, #66	; 0x42
    5436:	2100      	movs	r1, #0
    5438:	68f8      	ldr	r0, [r7, #12]
    543a:	4b49      	ldr	r3, [pc, #292]	; (5560 <_oscctrl_init_referenced_generators+0x1f8>)
    543c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    543e:	4a49      	ldr	r2, [pc, #292]	; (5564 <_oscctrl_init_referenced_generators+0x1fc>)
    5440:	2101      	movs	r1, #1
    5442:	68f8      	ldr	r0, [r7, #12]
    5444:	4b44      	ldr	r3, [pc, #272]	; (5558 <_oscctrl_init_referenced_generators+0x1f0>)
    5446:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5448:	f44f 6203 	mov.w	r2, #2096	; 0x830
    544c:	2101      	movs	r1, #1
    544e:	68f8      	ldr	r0, [r7, #12]
    5450:	4b42      	ldr	r3, [pc, #264]	; (555c <_oscctrl_init_referenced_generators+0x1f4>)
    5452:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5454:	2202      	movs	r2, #2
    5456:	2101      	movs	r1, #1
    5458:	68f8      	ldr	r0, [r7, #12]
    545a:	4b41      	ldr	r3, [pc, #260]	; (5560 <_oscctrl_init_referenced_generators+0x1f8>)
    545c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    545e:	68f8      	ldr	r0, [r7, #12]
    5460:	4b41      	ldr	r3, [pc, #260]	; (5568 <_oscctrl_init_referenced_generators+0x200>)
    5462:	4798      	blx	r3
    5464:	4603      	mov	r3, r0
    5466:	2b00      	cmp	r3, #0
    5468:	d00c      	beq.n	5484 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    546a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    546e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5470:	bf00      	nop
    5472:	6879      	ldr	r1, [r7, #4]
    5474:	68f8      	ldr	r0, [r7, #12]
    5476:	4b3d      	ldr	r3, [pc, #244]	; (556c <_oscctrl_init_referenced_generators+0x204>)
    5478:	4798      	blx	r3
    547a:	4602      	mov	r2, r0
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	429a      	cmp	r2, r3
    5480:	d1f7      	bne.n	5472 <_oscctrl_init_referenced_generators+0x10a>
    5482:	e009      	b.n	5498 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5484:	bf00      	nop
    5486:	68f8      	ldr	r0, [r7, #12]
    5488:	4b39      	ldr	r3, [pc, #228]	; (5570 <_oscctrl_init_referenced_generators+0x208>)
    548a:	4798      	blx	r3
    548c:	4603      	mov	r3, r0
    548e:	f083 0301 	eor.w	r3, r3, #1
    5492:	b2db      	uxtb	r3, r3
    5494:	2b00      	cmp	r3, #0
    5496:	d1f6      	bne.n	5486 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5498:	bf00      	nop
    549a:	2100      	movs	r1, #0
    549c:	68f8      	ldr	r0, [r7, #12]
    549e:	4b35      	ldr	r3, [pc, #212]	; (5574 <_oscctrl_init_referenced_generators+0x20c>)
    54a0:	4798      	blx	r3
    54a2:	4603      	mov	r3, r0
    54a4:	f083 0301 	eor.w	r3, r3, #1
    54a8:	b2db      	uxtb	r3, r3
    54aa:	2b00      	cmp	r3, #0
    54ac:	d009      	beq.n	54c2 <_oscctrl_init_referenced_generators+0x15a>
    54ae:	2100      	movs	r1, #0
    54b0:	68f8      	ldr	r0, [r7, #12]
    54b2:	4b31      	ldr	r3, [pc, #196]	; (5578 <_oscctrl_init_referenced_generators+0x210>)
    54b4:	4798      	blx	r3
    54b6:	4603      	mov	r3, r0
    54b8:	f083 0301 	eor.w	r3, r3, #1
    54bc:	b2db      	uxtb	r3, r3
    54be:	2b00      	cmp	r3, #0
    54c0:	d1eb      	bne.n	549a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    54c2:	bf00      	nop
    54c4:	2101      	movs	r1, #1
    54c6:	68f8      	ldr	r0, [r7, #12]
    54c8:	4b2a      	ldr	r3, [pc, #168]	; (5574 <_oscctrl_init_referenced_generators+0x20c>)
    54ca:	4798      	blx	r3
    54cc:	4603      	mov	r3, r0
    54ce:	f083 0301 	eor.w	r3, r3, #1
    54d2:	b2db      	uxtb	r3, r3
    54d4:	2b00      	cmp	r3, #0
    54d6:	d009      	beq.n	54ec <_oscctrl_init_referenced_generators+0x184>
    54d8:	2101      	movs	r1, #1
    54da:	68f8      	ldr	r0, [r7, #12]
    54dc:	4b26      	ldr	r3, [pc, #152]	; (5578 <_oscctrl_init_referenced_generators+0x210>)
    54de:	4798      	blx	r3
    54e0:	4603      	mov	r3, r0
    54e2:	f083 0301 	eor.w	r3, r3, #1
    54e6:	b2db      	uxtb	r3, r3
    54e8:	2b00      	cmp	r3, #0
    54ea:	d1eb      	bne.n	54c4 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    54ec:	bf00      	nop
    54ee:	480c      	ldr	r0, [pc, #48]	; (5520 <_oscctrl_init_referenced_generators+0x1b8>)
    54f0:	4b22      	ldr	r3, [pc, #136]	; (557c <_oscctrl_init_referenced_generators+0x214>)
    54f2:	4798      	blx	r3
    54f4:	4603      	mov	r3, r0
    54f6:	2b00      	cmp	r3, #0
    54f8:	d1f9      	bne.n	54ee <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    54fa:	2207      	movs	r2, #7
    54fc:	2100      	movs	r1, #0
    54fe:	4808      	ldr	r0, [pc, #32]	; (5520 <_oscctrl_init_referenced_generators+0x1b8>)
    5500:	4b08      	ldr	r3, [pc, #32]	; (5524 <_oscctrl_init_referenced_generators+0x1bc>)
    5502:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5504:	bf00      	nop
    5506:	4806      	ldr	r0, [pc, #24]	; (5520 <_oscctrl_init_referenced_generators+0x1b8>)
    5508:	4b07      	ldr	r3, [pc, #28]	; (5528 <_oscctrl_init_referenced_generators+0x1c0>)
    550a:	4798      	blx	r3
    550c:	4603      	mov	r3, r0
    550e:	2b00      	cmp	r3, #0
    5510:	d1f9      	bne.n	5506 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5512:	bf00      	nop
    5514:	3710      	adds	r7, #16
    5516:	46bd      	mov	sp, r7
    5518:	bd80      	pop	{r7, pc}
    551a:	bf00      	nop
    551c:	40001000 	.word	0x40001000
    5520:	40001c00 	.word	0x40001c00
    5524:	00004f35 	.word	0x00004f35
    5528:	00004ef5 	.word	0x00004ef5
    552c:	00005199 	.word	0x00005199
    5530:	0401bb80 	.word	0x0401bb80
    5534:	0000523b 	.word	0x0000523b
    5538:	000052f3 	.word	0x000052f3
    553c:	000051e7 	.word	0x000051e7
    5540:	0000528b 	.word	0x0000528b
    5544:	00005257 	.word	0x00005257
    5548:	00005223 	.word	0x00005223
    554c:	00005207 	.word	0x00005207
    5550:	000052bf 	.word	0x000052bf
    5554:	00004f85 	.word	0x00004f85
    5558:	00005091 	.word	0x00005091
    555c:	000050cd 	.word	0x000050cd
    5560:	00005055 	.word	0x00005055
    5564:	000407a0 	.word	0x000407a0
    5568:	000051b7 	.word	0x000051b7
    556c:	0000514b 	.word	0x0000514b
    5570:	00005123 	.word	0x00005123
    5574:	00004fe1 	.word	0x00004fe1
    5578:	00005019 	.word	0x00005019
    557c:	00004f1d 	.word	0x00004f1d

00005580 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5580:	b480      	push	{r7}
    5582:	b083      	sub	sp, #12
    5584:	af00      	add	r7, sp, #0
    5586:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	69db      	ldr	r3, [r3, #28]
    558c:	0a9b      	lsrs	r3, r3, #10
    558e:	f003 0301 	and.w	r3, r3, #1
    5592:	2b00      	cmp	r3, #0
    5594:	bf14      	ite	ne
    5596:	2301      	movne	r3, #1
    5598:	2300      	moveq	r3, #0
    559a:	b2db      	uxtb	r3, r3
}
    559c:	4618      	mov	r0, r3
    559e:	370c      	adds	r7, #12
    55a0:	46bd      	mov	sp, r7
    55a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a6:	4770      	bx	lr

000055a8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    55a8:	b480      	push	{r7}
    55aa:	b083      	sub	sp, #12
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    55b6:	61da      	str	r2, [r3, #28]
}
    55b8:	bf00      	nop
    55ba:	370c      	adds	r7, #12
    55bc:	46bd      	mov	sp, r7
    55be:	f85d 7b04 	ldr.w	r7, [sp], #4
    55c2:	4770      	bx	lr

000055c4 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    55c4:	b480      	push	{r7}
    55c6:	b083      	sub	sp, #12
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
    55cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    55ce:	687b      	ldr	r3, [r7, #4]
    55d0:	683a      	ldr	r2, [r7, #0]
    55d2:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55d4:	bf00      	nop
    55d6:	370c      	adds	r7, #12
    55d8:	46bd      	mov	sp, r7
    55da:	f85d 7b04 	ldr.w	r7, [sp], #4
    55de:	4770      	bx	lr

000055e0 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
    55e8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    55ea:	687b      	ldr	r3, [r7, #4]
    55ec:	683a      	ldr	r2, [r7, #0]
    55ee:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55f0:	bf00      	nop
    55f2:	370c      	adds	r7, #12
    55f4:	46bd      	mov	sp, r7
    55f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fa:	4770      	bx	lr

000055fc <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    55fc:	b480      	push	{r7}
    55fe:	b083      	sub	sp, #12
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
    5604:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	683a      	ldr	r2, [r7, #0]
    560a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    560c:	bf00      	nop
    560e:	370c      	adds	r7, #12
    5610:	46bd      	mov	sp, r7
    5612:	f85d 7b04 	ldr.w	r7, [sp], #4
    5616:	4770      	bx	lr

00005618 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5618:	b480      	push	{r7}
    561a:	b083      	sub	sp, #12
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
    5620:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	683a      	ldr	r2, [r7, #0]
    5626:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5628:	bf00      	nop
    562a:	370c      	adds	r7, #12
    562c:	46bd      	mov	sp, r7
    562e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5632:	4770      	bx	lr

00005634 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5634:	b480      	push	{r7}
    5636:	b085      	sub	sp, #20
    5638:	af00      	add	r7, sp, #0
    563a:	6078      	str	r0, [r7, #4]
    563c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    563e:	687b      	ldr	r3, [r7, #4]
    5640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5642:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5644:	68fb      	ldr	r3, [r7, #12]
    5646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    564a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    564c:	683b      	ldr	r3, [r7, #0]
    564e:	b2db      	uxtb	r3, r3
    5650:	68fa      	ldr	r2, [r7, #12]
    5652:	4313      	orrs	r3, r2
    5654:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5656:	687b      	ldr	r3, [r7, #4]
    5658:	68fa      	ldr	r2, [r7, #12]
    565a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    565c:	bf00      	nop
    565e:	3714      	adds	r7, #20
    5660:	46bd      	mov	sp, r7
    5662:	f85d 7b04 	ldr.w	r7, [sp], #4
    5666:	4770      	bx	lr

00005668 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5668:	b480      	push	{r7}
    566a:	b085      	sub	sp, #20
    566c:	af00      	add	r7, sp, #0
    566e:	6078      	str	r0, [r7, #4]
    5670:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5676:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5678:	68fb      	ldr	r3, [r7, #12]
    567a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    567e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5680:	683b      	ldr	r3, [r7, #0]
    5682:	041b      	lsls	r3, r3, #16
    5684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5688:	68fa      	ldr	r2, [r7, #12]
    568a:	4313      	orrs	r3, r2
    568c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	68fa      	ldr	r2, [r7, #12]
    5692:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5694:	bf00      	nop
    5696:	3714      	adds	r7, #20
    5698:	46bd      	mov	sp, r7
    569a:	f85d 7b04 	ldr.w	r7, [sp], #4
    569e:	4770      	bx	lr

000056a0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    56a0:	b480      	push	{r7}
    56a2:	b083      	sub	sp, #12
    56a4:	af00      	add	r7, sp, #0
    56a6:	6078      	str	r0, [r7, #4]
    56a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	683a      	ldr	r2, [r7, #0]
    56ae:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56b0:	bf00      	nop
    56b2:	370c      	adds	r7, #12
    56b4:	46bd      	mov	sp, r7
    56b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ba:	4770      	bx	lr

000056bc <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    56bc:	b480      	push	{r7}
    56be:	b083      	sub	sp, #12
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    56c8:	4618      	mov	r0, r3
    56ca:	370c      	adds	r7, #12
    56cc:	46bd      	mov	sp, r7
    56ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d2:	4770      	bx	lr

000056d4 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    56d4:	b480      	push	{r7}
    56d6:	b085      	sub	sp, #20
    56d8:	af00      	add	r7, sp, #0
    56da:	60f8      	str	r0, [r7, #12]
    56dc:	60b9      	str	r1, [r7, #8]
    56de:	607a      	str	r2, [r7, #4]
	while (count--) {
    56e0:	e007      	b.n	56f2 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    56e2:	68fb      	ldr	r3, [r7, #12]
    56e4:	1c5a      	adds	r2, r3, #1
    56e6:	60fa      	str	r2, [r7, #12]
    56e8:	68ba      	ldr	r2, [r7, #8]
    56ea:	1c51      	adds	r1, r2, #1
    56ec:	60b9      	str	r1, [r7, #8]
    56ee:	7812      	ldrb	r2, [r2, #0]
    56f0:	701a      	strb	r2, [r3, #0]
	while (count--) {
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	1e5a      	subs	r2, r3, #1
    56f6:	607a      	str	r2, [r7, #4]
    56f8:	2b00      	cmp	r3, #0
    56fa:	d1f2      	bne.n	56e2 <_qspi_memcpy+0xe>
	}
}
    56fc:	bf00      	nop
    56fe:	3714      	adds	r7, #20
    5700:	46bd      	mov	sp, r7
    5702:	f85d 7b04 	ldr.w	r7, [sp], #4
    5706:	4770      	bx	lr

00005708 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5708:	b580      	push	{r7, lr}
    570a:	b082      	sub	sp, #8
    570c:	af00      	add	r7, sp, #0
    570e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5710:	4903      	ldr	r1, [pc, #12]	; (5720 <_qspi_end_transfer+0x18>)
    5712:	6878      	ldr	r0, [r7, #4]
    5714:	4b03      	ldr	r3, [pc, #12]	; (5724 <_qspi_end_transfer+0x1c>)
    5716:	4798      	blx	r3
}
    5718:	bf00      	nop
    571a:	3708      	adds	r7, #8
    571c:	46bd      	mov	sp, r7
    571e:	bd80      	pop	{r7, pc}
    5720:	01000002 	.word	0x01000002
    5724:	000055c5 	.word	0x000055c5

00005728 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5728:	b580      	push	{r7, lr}
    572a:	b082      	sub	sp, #8
    572c:	af00      	add	r7, sp, #0
    572e:	6078      	str	r0, [r7, #4]
    5730:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5732:	687b      	ldr	r3, [r7, #4]
    5734:	2b00      	cmp	r3, #0
    5736:	d004      	beq.n	5742 <_qspi_sync_init+0x1a>
    5738:	683b      	ldr	r3, [r7, #0]
    573a:	2b00      	cmp	r3, #0
    573c:	d001      	beq.n	5742 <_qspi_sync_init+0x1a>
    573e:	2301      	movs	r3, #1
    5740:	e000      	b.n	5744 <_qspi_sync_init+0x1c>
    5742:	2300      	movs	r3, #0
    5744:	f003 0301 	and.w	r3, r3, #1
    5748:	b2db      	uxtb	r3, r3
    574a:	2240      	movs	r2, #64	; 0x40
    574c:	490c      	ldr	r1, [pc, #48]	; (5780 <_qspi_sync_init+0x58>)
    574e:	4618      	mov	r0, r3
    5750:	4b0c      	ldr	r3, [pc, #48]	; (5784 <_qspi_sync_init+0x5c>)
    5752:	4798      	blx	r3
	dev->prvt = hw;
    5754:	687b      	ldr	r3, [r7, #4]
    5756:	683a      	ldr	r2, [r7, #0]
    5758:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	2101      	movs	r1, #1
    5760:	4618      	mov	r0, r3
    5762:	4b09      	ldr	r3, [pc, #36]	; (5788 <_qspi_sync_init+0x60>)
    5764:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5766:	4909      	ldr	r1, [pc, #36]	; (578c <_qspi_sync_init+0x64>)
    5768:	6838      	ldr	r0, [r7, #0]
    576a:	4b09      	ldr	r3, [pc, #36]	; (5790 <_qspi_sync_init+0x68>)
    576c:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    576e:	4909      	ldr	r1, [pc, #36]	; (5794 <_qspi_sync_init+0x6c>)
    5770:	6838      	ldr	r0, [r7, #0]
    5772:	4b09      	ldr	r3, [pc, #36]	; (5798 <_qspi_sync_init+0x70>)
    5774:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5776:	2300      	movs	r3, #0
}
    5778:	4618      	mov	r0, r3
    577a:	3708      	adds	r7, #8
    577c:	46bd      	mov	sp, r7
    577e:	bd80      	pop	{r7, pc}
    5780:	0000f01c 	.word	0x0000f01c
    5784:	000038fd 	.word	0x000038fd
    5788:	000055c5 	.word	0x000055c5
    578c:	06000011 	.word	0x06000011
    5790:	000055e1 	.word	0x000055e1
    5794:	00241300 	.word	0x00241300
    5798:	000055fd 	.word	0x000055fd

0000579c <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    579c:	b580      	push	{r7, lr}
    579e:	b082      	sub	sp, #8
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    57a4:	687b      	ldr	r3, [r7, #4]
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	2102      	movs	r1, #2
    57aa:	4618      	mov	r0, r3
    57ac:	4b03      	ldr	r3, [pc, #12]	; (57bc <_qspi_sync_enable+0x20>)
    57ae:	4798      	blx	r3
	return ERR_NONE;
    57b0:	2300      	movs	r3, #0
}
    57b2:	4618      	mov	r0, r3
    57b4:	3708      	adds	r7, #8
    57b6:	46bd      	mov	sp, r7
    57b8:	bd80      	pop	{r7, pc}
    57ba:	bf00      	nop
    57bc:	000055c5 	.word	0x000055c5

000057c0 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    57c0:	b580      	push	{r7, lr}
    57c2:	b082      	sub	sp, #8
    57c4:	af00      	add	r7, sp, #0
    57c6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	2100      	movs	r1, #0
    57ce:	4618      	mov	r0, r3
    57d0:	4b03      	ldr	r3, [pc, #12]	; (57e0 <_qspi_sync_disable+0x20>)
    57d2:	4798      	blx	r3
	return ERR_NONE;
    57d4:	2300      	movs	r3, #0
}
    57d6:	4618      	mov	r0, r3
    57d8:	3708      	adds	r7, #8
    57da:	46bd      	mov	sp, r7
    57dc:	bd80      	pop	{r7, pc}
    57de:	bf00      	nop
    57e0:	000055c5 	.word	0x000055c5

000057e4 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b084      	sub	sp, #16
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
    57ec:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    57ee:	687b      	ldr	r3, [r7, #4]
    57f0:	681b      	ldr	r3, [r3, #0]
    57f2:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    57f4:	683b      	ldr	r3, [r7, #0]
    57f6:	781b      	ldrb	r3, [r3, #0]
    57f8:	f003 0320 	and.w	r3, r3, #32
    57fc:	b2db      	uxtb	r3, r3
    57fe:	2b00      	cmp	r3, #0
    5800:	d005      	beq.n	580e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5802:	683b      	ldr	r3, [r7, #0]
    5804:	689b      	ldr	r3, [r3, #8]
    5806:	4619      	mov	r1, r3
    5808:	68f8      	ldr	r0, [r7, #12]
    580a:	4b13      	ldr	r3, [pc, #76]	; (5858 <_qspi_sync_command_set_ifr+0x74>)
    580c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    580e:	683b      	ldr	r3, [r7, #0]
    5810:	781b      	ldrb	r3, [r3, #0]
    5812:	f003 0310 	and.w	r3, r3, #16
    5816:	b2db      	uxtb	r3, r3
    5818:	2b00      	cmp	r3, #0
    581a:	d005      	beq.n	5828 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    581c:	683b      	ldr	r3, [r7, #0]
    581e:	791b      	ldrb	r3, [r3, #4]
    5820:	4619      	mov	r1, r3
    5822:	68f8      	ldr	r0, [r7, #12]
    5824:	4b0d      	ldr	r3, [pc, #52]	; (585c <_qspi_sync_command_set_ifr+0x78>)
    5826:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5828:	683b      	ldr	r3, [r7, #0]
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5830:	b2db      	uxtb	r3, r3
    5832:	2b00      	cmp	r3, #0
    5834:	d005      	beq.n	5842 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5836:	683b      	ldr	r3, [r7, #0]
    5838:	795b      	ldrb	r3, [r3, #5]
    583a:	4619      	mov	r1, r3
    583c:	68f8      	ldr	r0, [r7, #12]
    583e:	4b08      	ldr	r3, [pc, #32]	; (5860 <_qspi_sync_command_set_ifr+0x7c>)
    5840:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5842:	683b      	ldr	r3, [r7, #0]
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	4619      	mov	r1, r3
    5848:	68f8      	ldr	r0, [r7, #12]
    584a:	4b06      	ldr	r3, [pc, #24]	; (5864 <_qspi_sync_command_set_ifr+0x80>)
    584c:	4798      	blx	r3
}
    584e:	bf00      	nop
    5850:	3710      	adds	r7, #16
    5852:	46bd      	mov	sp, r7
    5854:	bd80      	pop	{r7, pc}
    5856:	bf00      	nop
    5858:	00005619 	.word	0x00005619
    585c:	00005635 	.word	0x00005635
    5860:	00005669 	.word	0x00005669
    5864:	000056a1 	.word	0x000056a1

00005868 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5868:	b580      	push	{r7, lr}
    586a:	b084      	sub	sp, #16
    586c:	af00      	add	r7, sp, #0
    586e:	6078      	str	r0, [r7, #4]
    5870:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5872:	687b      	ldr	r3, [r7, #4]
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5878:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    587c:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    587e:	683b      	ldr	r3, [r7, #0]
    5880:	781b      	ldrb	r3, [r3, #0]
    5882:	f003 0320 	and.w	r3, r3, #32
    5886:	b2db      	uxtb	r3, r3
    5888:	2b00      	cmp	r3, #0
    588a:	d004      	beq.n	5896 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    588c:	683b      	ldr	r3, [r7, #0]
    588e:	689b      	ldr	r3, [r3, #8]
    5890:	68fa      	ldr	r2, [r7, #12]
    5892:	4413      	add	r3, r2
    5894:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5896:	68b8      	ldr	r0, [r7, #8]
    5898:	4b18      	ldr	r3, [pc, #96]	; (58fc <_qspi_sync_run_transfer+0x94>)
    589a:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    589c:	683b      	ldr	r3, [r7, #0]
    589e:	691b      	ldr	r3, [r3, #16]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d103      	bne.n	58ac <_qspi_sync_run_transfer+0x44>
    58a4:	683b      	ldr	r3, [r7, #0]
    58a6:	695b      	ldr	r3, [r3, #20]
    58a8:	2b00      	cmp	r3, #0
    58aa:	d001      	beq.n	58b0 <_qspi_sync_run_transfer+0x48>
    58ac:	2301      	movs	r3, #1
    58ae:	e000      	b.n	58b2 <_qspi_sync_run_transfer+0x4a>
    58b0:	2300      	movs	r3, #0
    58b2:	f003 0301 	and.w	r3, r3, #1
    58b6:	b2db      	uxtb	r3, r3
    58b8:	2282      	movs	r2, #130	; 0x82
    58ba:	4911      	ldr	r1, [pc, #68]	; (5900 <_qspi_sync_run_transfer+0x98>)
    58bc:	4618      	mov	r0, r3
    58be:	4b11      	ldr	r3, [pc, #68]	; (5904 <_qspi_sync_run_transfer+0x9c>)
    58c0:	4798      	blx	r3

	if (cmd->tx_buf) {
    58c2:	683b      	ldr	r3, [r7, #0]
    58c4:	691b      	ldr	r3, [r3, #16]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d008      	beq.n	58dc <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    58ca:	683b      	ldr	r3, [r7, #0]
    58cc:	6919      	ldr	r1, [r3, #16]
    58ce:	683b      	ldr	r3, [r7, #0]
    58d0:	68db      	ldr	r3, [r3, #12]
    58d2:	461a      	mov	r2, r3
    58d4:	68f8      	ldr	r0, [r7, #12]
    58d6:	4b0c      	ldr	r3, [pc, #48]	; (5908 <_qspi_sync_run_transfer+0xa0>)
    58d8:	4798      	blx	r3
    58da:	e007      	b.n	58ec <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    58dc:	683b      	ldr	r3, [r7, #0]
    58de:	6958      	ldr	r0, [r3, #20]
    58e0:	683b      	ldr	r3, [r7, #0]
    58e2:	68db      	ldr	r3, [r3, #12]
    58e4:	461a      	mov	r2, r3
    58e6:	68f9      	ldr	r1, [r7, #12]
    58e8:	4b07      	ldr	r3, [pc, #28]	; (5908 <_qspi_sync_run_transfer+0xa0>)
    58ea:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    58ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    58f0:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    58f4:	bf00      	nop
    58f6:	3710      	adds	r7, #16
    58f8:	46bd      	mov	sp, r7
    58fa:	bd80      	pop	{r7, pc}
    58fc:	000056bd 	.word	0x000056bd
    5900:	0000f01c 	.word	0x0000f01c
    5904:	000038fd 	.word	0x000038fd
    5908:	000056d5 	.word	0x000056d5

0000590c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    590c:	b580      	push	{r7, lr}
    590e:	b082      	sub	sp, #8
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
    5914:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5916:	6839      	ldr	r1, [r7, #0]
    5918:	6878      	ldr	r0, [r7, #4]
    591a:	4b14      	ldr	r3, [pc, #80]	; (596c <_qspi_sync_serial_run_command+0x60>)
    591c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    591e:	683b      	ldr	r3, [r7, #0]
    5920:	781b      	ldrb	r3, [r3, #0]
    5922:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5926:	b2db      	uxtb	r3, r3
    5928:	2b00      	cmp	r3, #0
    592a:	d003      	beq.n	5934 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    592c:	6839      	ldr	r1, [r7, #0]
    592e:	6878      	ldr	r0, [r7, #4]
    5930:	4b0f      	ldr	r3, [pc, #60]	; (5970 <_qspi_sync_serial_run_command+0x64>)
    5932:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	4618      	mov	r0, r3
    593a:	4b0e      	ldr	r3, [pc, #56]	; (5974 <_qspi_sync_serial_run_command+0x68>)
    593c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    593e:	bf00      	nop
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	4618      	mov	r0, r3
    5946:	4b0c      	ldr	r3, [pc, #48]	; (5978 <_qspi_sync_serial_run_command+0x6c>)
    5948:	4798      	blx	r3
    594a:	4603      	mov	r3, r0
    594c:	f083 0301 	eor.w	r3, r3, #1
    5950:	b2db      	uxtb	r3, r3
    5952:	2b00      	cmp	r3, #0
    5954:	d1f4      	bne.n	5940 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	4618      	mov	r0, r3
    595c:	4b07      	ldr	r3, [pc, #28]	; (597c <_qspi_sync_serial_run_command+0x70>)
    595e:	4798      	blx	r3
	return ERR_NONE;
    5960:	2300      	movs	r3, #0
}
    5962:	4618      	mov	r0, r3
    5964:	3708      	adds	r7, #8
    5966:	46bd      	mov	sp, r7
    5968:	bd80      	pop	{r7, pc}
    596a:	bf00      	nop
    596c:	000057e5 	.word	0x000057e5
    5970:	00005869 	.word	0x00005869
    5974:	00005709 	.word	0x00005709
    5978:	00005581 	.word	0x00005581
    597c:	000055a9 	.word	0x000055a9

00005980 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5980:	b480      	push	{r7}
    5982:	b083      	sub	sp, #12
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
    5988:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    598a:	bf00      	nop
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	691a      	ldr	r2, [r3, #16]
    5990:	683b      	ldr	r3, [r7, #0]
    5992:	4013      	ands	r3, r2
    5994:	2b00      	cmp	r3, #0
    5996:	d1f9      	bne.n	598c <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5998:	bf00      	nop
    599a:	370c      	adds	r7, #12
    599c:	46bd      	mov	sp, r7
    599e:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a2:	4770      	bx	lr

000059a4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    59a4:	b480      	push	{r7}
    59a6:	b083      	sub	sp, #12
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    59b2:	819a      	strh	r2, [r3, #12]
}
    59b4:	bf00      	nop
    59b6:	370c      	adds	r7, #12
    59b8:	46bd      	mov	sp, r7
    59ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    59be:	4770      	bx	lr

000059c0 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    59c0:	b480      	push	{r7}
    59c2:	b083      	sub	sp, #12
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    59ce:	819a      	strh	r2, [r3, #12]
}
    59d0:	bf00      	nop
    59d2:	370c      	adds	r7, #12
    59d4:	46bd      	mov	sp, r7
    59d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59da:	4770      	bx	lr

000059dc <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    59dc:	b480      	push	{r7}
    59de:	b083      	sub	sp, #12
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    59e4:	687b      	ldr	r3, [r7, #4]
    59e6:	899b      	ldrh	r3, [r3, #12]
    59e8:	b29b      	uxth	r3, r3
}
    59ea:	4618      	mov	r0, r3
    59ec:	370c      	adds	r7, #12
    59ee:	46bd      	mov	sp, r7
    59f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f4:	4770      	bx	lr

000059f6 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    59f6:	b480      	push	{r7}
    59f8:	b083      	sub	sp, #12
    59fa:	af00      	add	r7, sp, #0
    59fc:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	895b      	ldrh	r3, [r3, #10]
    5a02:	b29b      	uxth	r3, r3
}
    5a04:	4618      	mov	r0, r3
    5a06:	370c      	adds	r7, #12
    5a08:	46bd      	mov	sp, r7
    5a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a0e:	4770      	bx	lr

00005a10 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5a10:	b580      	push	{r7, lr}
    5a12:	b082      	sub	sp, #8
    5a14:	af00      	add	r7, sp, #0
    5a16:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5a18:	687b      	ldr	r3, [r7, #4]
    5a1a:	881b      	ldrh	r3, [r3, #0]
    5a1c:	b29b      	uxth	r3, r3
    5a1e:	f043 0301 	orr.w	r3, r3, #1
    5a22:	b29a      	uxth	r2, r3
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5a28:	2101      	movs	r1, #1
    5a2a:	6878      	ldr	r0, [r7, #4]
    5a2c:	4b02      	ldr	r3, [pc, #8]	; (5a38 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5a2e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a30:	bf00      	nop
    5a32:	3708      	adds	r7, #8
    5a34:	46bd      	mov	sp, r7
    5a36:	bd80      	pop	{r7, pc}
    5a38:	00005981 	.word	0x00005981

00005a3c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5a3c:	b580      	push	{r7, lr}
    5a3e:	b084      	sub	sp, #16
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a44:	f248 0103 	movw	r1, #32771	; 0x8003
    5a48:	6878      	ldr	r0, [r7, #4]
    5a4a:	4b0a      	ldr	r3, [pc, #40]	; (5a74 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5a4c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	881b      	ldrh	r3, [r3, #0]
    5a52:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5a54:	89fb      	ldrh	r3, [r7, #14]
    5a56:	085b      	lsrs	r3, r3, #1
    5a58:	b29b      	uxth	r3, r3
    5a5a:	f003 0301 	and.w	r3, r3, #1
    5a5e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5a60:	89fb      	ldrh	r3, [r7, #14]
    5a62:	2b00      	cmp	r3, #0
    5a64:	bf14      	ite	ne
    5a66:	2301      	movne	r3, #1
    5a68:	2300      	moveq	r3, #0
    5a6a:	b2db      	uxtb	r3, r3
}
    5a6c:	4618      	mov	r0, r3
    5a6e:	3710      	adds	r7, #16
    5a70:	46bd      	mov	sp, r7
    5a72:	bd80      	pop	{r7, pc}
    5a74:	00005981 	.word	0x00005981

00005a78 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b082      	sub	sp, #8
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	881b      	ldrh	r3, [r3, #0]
    5a84:	b29b      	uxth	r3, r3
    5a86:	f023 0302 	bic.w	r3, r3, #2
    5a8a:	b29a      	uxth	r2, r3
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a90:	f248 0103 	movw	r1, #32771	; 0x8003
    5a94:	6878      	ldr	r0, [r7, #4]
    5a96:	4b03      	ldr	r3, [pc, #12]	; (5aa4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5a98:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a9a:	bf00      	nop
    5a9c:	3708      	adds	r7, #8
    5a9e:	46bd      	mov	sp, r7
    5aa0:	bd80      	pop	{r7, pc}
    5aa2:	bf00      	nop
    5aa4:	00005981 	.word	0x00005981

00005aa8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5aa8:	b580      	push	{r7, lr}
    5aaa:	b082      	sub	sp, #8
    5aac:	af00      	add	r7, sp, #0
    5aae:	6078      	str	r0, [r7, #4]
    5ab0:	460b      	mov	r3, r1
    5ab2:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	887a      	ldrh	r2, [r7, #2]
    5ab8:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5aba:	f248 0103 	movw	r1, #32771	; 0x8003
    5abe:	6878      	ldr	r0, [r7, #4]
    5ac0:	4b02      	ldr	r3, [pc, #8]	; (5acc <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5ac2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ac4:	bf00      	nop
    5ac6:	3708      	adds	r7, #8
    5ac8:	46bd      	mov	sp, r7
    5aca:	bd80      	pop	{r7, pc}
    5acc:	00005981 	.word	0x00005981

00005ad0 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5ad0:	b480      	push	{r7}
    5ad2:	b083      	sub	sp, #12
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
    5ad8:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	683a      	ldr	r2, [r7, #0]
    5ade:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ae0:	bf00      	nop
    5ae2:	370c      	adds	r7, #12
    5ae4:	46bd      	mov	sp, r7
    5ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aea:	4770      	bx	lr

00005aec <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5aec:	b580      	push	{r7, lr}
    5aee:	b082      	sub	sp, #8
    5af0:	af00      	add	r7, sp, #0
    5af2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5af4:	687b      	ldr	r3, [r7, #4]
    5af6:	2b00      	cmp	r3, #0
    5af8:	d005      	beq.n	5b06 <_calendar_init+0x1a>
    5afa:	687b      	ldr	r3, [r7, #4]
    5afc:	681b      	ldr	r3, [r3, #0]
    5afe:	2b00      	cmp	r3, #0
    5b00:	d001      	beq.n	5b06 <_calendar_init+0x1a>
    5b02:	2301      	movs	r3, #1
    5b04:	e000      	b.n	5b08 <_calendar_init+0x1c>
    5b06:	2300      	movs	r3, #0
    5b08:	f003 0301 	and.w	r3, r3, #1
    5b0c:	b2db      	uxtb	r3, r3
    5b0e:	222f      	movs	r2, #47	; 0x2f
    5b10:	491b      	ldr	r1, [pc, #108]	; (5b80 <_calendar_init+0x94>)
    5b12:	4618      	mov	r0, r3
    5b14:	4b1b      	ldr	r3, [pc, #108]	; (5b84 <_calendar_init+0x98>)
    5b16:	4798      	blx	r3

	_rtc_dev = dev;
    5b18:	4a1b      	ldr	r2, [pc, #108]	; (5b88 <_calendar_init+0x9c>)
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	4618      	mov	r0, r3
    5b24:	4b19      	ldr	r3, [pc, #100]	; (5b8c <_calendar_init+0xa0>)
    5b26:	4798      	blx	r3
    5b28:	4603      	mov	r3, r0
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d00a      	beq.n	5b44 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	681b      	ldr	r3, [r3, #0]
    5b32:	4618      	mov	r0, r3
    5b34:	4b16      	ldr	r3, [pc, #88]	; (5b90 <_calendar_init+0xa4>)
    5b36:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	681b      	ldr	r3, [r3, #0]
    5b3c:	2102      	movs	r1, #2
    5b3e:	4618      	mov	r0, r3
    5b40:	4b14      	ldr	r3, [pc, #80]	; (5b94 <_calendar_init+0xa8>)
    5b42:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	4618      	mov	r0, r3
    5b4a:	4b13      	ldr	r3, [pc, #76]	; (5b98 <_calendar_init+0xac>)
    5b4c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5b4e:	687b      	ldr	r3, [r7, #4]
    5b50:	681b      	ldr	r3, [r3, #0]
    5b52:	2101      	movs	r1, #1
    5b54:	4618      	mov	r0, r3
    5b56:	4b0f      	ldr	r3, [pc, #60]	; (5b94 <_calendar_init+0xa8>)
    5b58:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5b62:	4618      	mov	r0, r3
    5b64:	4b0d      	ldr	r3, [pc, #52]	; (5b9c <_calendar_init+0xb0>)
    5b66:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5b6c:	2100      	movs	r1, #0
    5b6e:	4618      	mov	r0, r3
    5b70:	4b0b      	ldr	r3, [pc, #44]	; (5ba0 <_calendar_init+0xb4>)
    5b72:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5b74:	2300      	movs	r3, #0
}
    5b76:	4618      	mov	r0, r3
    5b78:	3708      	adds	r7, #8
    5b7a:	46bd      	mov	sp, r7
    5b7c:	bd80      	pop	{r7, pc}
    5b7e:	bf00      	nop
    5b80:	0000f034 	.word	0x0000f034
    5b84:	000038fd 	.word	0x000038fd
    5b88:	200006d8 	.word	0x200006d8
    5b8c:	00005a3d 	.word	0x00005a3d
    5b90:	00005a79 	.word	0x00005a79
    5b94:	00005981 	.word	0x00005981
    5b98:	00005a11 	.word	0x00005a11
    5b9c:	00005aa9 	.word	0x00005aa9
    5ba0:	00005ad1 	.word	0x00005ad1

00005ba4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5ba4:	b580      	push	{r7, lr}
    5ba6:	b084      	sub	sp, #16
    5ba8:	af00      	add	r7, sp, #0
    5baa:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5bac:	687b      	ldr	r3, [r7, #4]
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	4618      	mov	r0, r3
    5bb2:	4b19      	ldr	r3, [pc, #100]	; (5c18 <_rtc_interrupt_handler+0x74>)
    5bb4:	4798      	blx	r3
    5bb6:	4603      	mov	r3, r0
    5bb8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	681b      	ldr	r3, [r3, #0]
    5bbe:	4618      	mov	r0, r3
    5bc0:	4b16      	ldr	r3, [pc, #88]	; (5c1c <_rtc_interrupt_handler+0x78>)
    5bc2:	4798      	blx	r3
    5bc4:	4603      	mov	r3, r0
    5bc6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5bc8:	89fa      	ldrh	r2, [r7, #14]
    5bca:	89bb      	ldrh	r3, [r7, #12]
    5bcc:	4013      	ands	r3, r2
    5bce:	b29b      	uxth	r3, r3
    5bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d009      	beq.n	5bec <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	685b      	ldr	r3, [r3, #4]
    5bdc:	6878      	ldr	r0, [r7, #4]
    5bde:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	4618      	mov	r0, r3
    5be6:	4b0e      	ldr	r3, [pc, #56]	; (5c20 <_rtc_interrupt_handler+0x7c>)
    5be8:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5bea:	e010      	b.n	5c0e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5bec:	89fa      	ldrh	r2, [r7, #14]
    5bee:	89bb      	ldrh	r3, [r7, #12]
    5bf0:	4013      	ands	r3, r2
    5bf2:	b29b      	uxth	r3, r3
    5bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5bf8:	2b00      	cmp	r3, #0
    5bfa:	d008      	beq.n	5c0e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	689b      	ldr	r3, [r3, #8]
    5c00:	6878      	ldr	r0, [r7, #4]
    5c02:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	4618      	mov	r0, r3
    5c0a:	4b06      	ldr	r3, [pc, #24]	; (5c24 <_rtc_interrupt_handler+0x80>)
    5c0c:	4798      	blx	r3
}
    5c0e:	bf00      	nop
    5c10:	3710      	adds	r7, #16
    5c12:	46bd      	mov	sp, r7
    5c14:	bd80      	pop	{r7, pc}
    5c16:	bf00      	nop
    5c18:	000059dd 	.word	0x000059dd
    5c1c:	000059f7 	.word	0x000059f7
    5c20:	000059a5 	.word	0x000059a5
    5c24:	000059c1 	.word	0x000059c1

00005c28 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5c2c:	4b03      	ldr	r3, [pc, #12]	; (5c3c <RTC_Handler+0x14>)
    5c2e:	681b      	ldr	r3, [r3, #0]
    5c30:	4618      	mov	r0, r3
    5c32:	4b03      	ldr	r3, [pc, #12]	; (5c40 <RTC_Handler+0x18>)
    5c34:	4798      	blx	r3
}
    5c36:	bf00      	nop
    5c38:	bd80      	pop	{r7, pc}
    5c3a:	bf00      	nop
    5c3c:	200006d8 	.word	0x200006d8
    5c40:	00005ba5 	.word	0x00005ba5

00005c44 <__NVIC_EnableIRQ>:
{
    5c44:	b480      	push	{r7}
    5c46:	b083      	sub	sp, #12
    5c48:	af00      	add	r7, sp, #0
    5c4a:	4603      	mov	r3, r0
    5c4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5c52:	2b00      	cmp	r3, #0
    5c54:	db0b      	blt.n	5c6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c56:	4909      	ldr	r1, [pc, #36]	; (5c7c <__NVIC_EnableIRQ+0x38>)
    5c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5c5c:	095b      	lsrs	r3, r3, #5
    5c5e:	88fa      	ldrh	r2, [r7, #6]
    5c60:	f002 021f 	and.w	r2, r2, #31
    5c64:	2001      	movs	r0, #1
    5c66:	fa00 f202 	lsl.w	r2, r0, r2
    5c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5c6e:	bf00      	nop
    5c70:	370c      	adds	r7, #12
    5c72:	46bd      	mov	sp, r7
    5c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop
    5c7c:	e000e100 	.word	0xe000e100

00005c80 <__NVIC_DisableIRQ>:
{
    5c80:	b480      	push	{r7}
    5c82:	b083      	sub	sp, #12
    5c84:	af00      	add	r7, sp, #0
    5c86:	4603      	mov	r3, r0
    5c88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	db10      	blt.n	5cb4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c92:	490b      	ldr	r1, [pc, #44]	; (5cc0 <__NVIC_DisableIRQ+0x40>)
    5c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5c98:	095b      	lsrs	r3, r3, #5
    5c9a:	88fa      	ldrh	r2, [r7, #6]
    5c9c:	f002 021f 	and.w	r2, r2, #31
    5ca0:	2001      	movs	r0, #1
    5ca2:	fa00 f202 	lsl.w	r2, r0, r2
    5ca6:	3320      	adds	r3, #32
    5ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5cb0:	f3bf 8f6f 	isb	sy
}
    5cb4:	bf00      	nop
    5cb6:	370c      	adds	r7, #12
    5cb8:	46bd      	mov	sp, r7
    5cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cbe:	4770      	bx	lr
    5cc0:	e000e100 	.word	0xe000e100

00005cc4 <__NVIC_ClearPendingIRQ>:
{
    5cc4:	b480      	push	{r7}
    5cc6:	b083      	sub	sp, #12
    5cc8:	af00      	add	r7, sp, #0
    5cca:	4603      	mov	r3, r0
    5ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	db0c      	blt.n	5cf0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cd6:	4909      	ldr	r1, [pc, #36]	; (5cfc <__NVIC_ClearPendingIRQ+0x38>)
    5cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cdc:	095b      	lsrs	r3, r3, #5
    5cde:	88fa      	ldrh	r2, [r7, #6]
    5ce0:	f002 021f 	and.w	r2, r2, #31
    5ce4:	2001      	movs	r0, #1
    5ce6:	fa00 f202 	lsl.w	r2, r0, r2
    5cea:	3360      	adds	r3, #96	; 0x60
    5cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5cf0:	bf00      	nop
    5cf2:	370c      	adds	r7, #12
    5cf4:	46bd      	mov	sp, r7
    5cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cfa:	4770      	bx	lr
    5cfc:	e000e100 	.word	0xe000e100

00005d00 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d00:	b480      	push	{r7}
    5d02:	b083      	sub	sp, #12
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
    5d08:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5d0a:	bf00      	nop
    5d0c:	687b      	ldr	r3, [r7, #4]
    5d0e:	69da      	ldr	r2, [r3, #28]
    5d10:	683b      	ldr	r3, [r7, #0]
    5d12:	4013      	ands	r3, r2
    5d14:	2b00      	cmp	r3, #0
    5d16:	d1f9      	bne.n	5d0c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5d18:	bf00      	nop
    5d1a:	370c      	adds	r7, #12
    5d1c:	46bd      	mov	sp, r7
    5d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d22:	4770      	bx	lr

00005d24 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d24:	b480      	push	{r7}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	69da      	ldr	r2, [r3, #28]
    5d32:	683b      	ldr	r3, [r7, #0]
    5d34:	4013      	ands	r3, r2
    5d36:	2b00      	cmp	r3, #0
    5d38:	bf14      	ite	ne
    5d3a:	2301      	movne	r3, #1
    5d3c:	2300      	moveq	r3, #0
    5d3e:	b2db      	uxtb	r3, r3
}
    5d40:	4618      	mov	r0, r3
    5d42:	370c      	adds	r7, #12
    5d44:	46bd      	mov	sp, r7
    5d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d4a:	4770      	bx	lr

00005d4c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5d4c:	b480      	push	{r7}
    5d4e:	b083      	sub	sp, #12
    5d50:	af00      	add	r7, sp, #0
    5d52:	6078      	str	r0, [r7, #4]
    5d54:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5d56:	bf00      	nop
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	69da      	ldr	r2, [r3, #28]
    5d5c:	683b      	ldr	r3, [r7, #0]
    5d5e:	4013      	ands	r3, r2
    5d60:	2b00      	cmp	r3, #0
    5d62:	d1f9      	bne.n	5d58 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5d64:	bf00      	nop
    5d66:	370c      	adds	r7, #12
    5d68:	46bd      	mov	sp, r7
    5d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6e:	4770      	bx	lr

00005d70 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5d70:	b480      	push	{r7}
    5d72:	b083      	sub	sp, #12
    5d74:	af00      	add	r7, sp, #0
    5d76:	6078      	str	r0, [r7, #4]
    5d78:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	69da      	ldr	r2, [r3, #28]
    5d7e:	683b      	ldr	r3, [r7, #0]
    5d80:	4013      	ands	r3, r2
    5d82:	2b00      	cmp	r3, #0
    5d84:	bf14      	ite	ne
    5d86:	2301      	movne	r3, #1
    5d88:	2300      	moveq	r3, #0
    5d8a:	b2db      	uxtb	r3, r3
}
    5d8c:	4618      	mov	r0, r3
    5d8e:	370c      	adds	r7, #12
    5d90:	46bd      	mov	sp, r7
    5d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d96:	4770      	bx	lr

00005d98 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5d98:	b480      	push	{r7}
    5d9a:	b083      	sub	sp, #12
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	2201      	movs	r2, #1
    5da4:	761a      	strb	r2, [r3, #24]
}
    5da6:	bf00      	nop
    5da8:	370c      	adds	r7, #12
    5daa:	46bd      	mov	sp, r7
    5dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5db0:	4770      	bx	lr

00005db2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5db2:	b480      	push	{r7}
    5db4:	b083      	sub	sp, #12
    5db6:	af00      	add	r7, sp, #0
    5db8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	2202      	movs	r2, #2
    5dbe:	761a      	strb	r2, [r3, #24]
}
    5dc0:	bf00      	nop
    5dc2:	370c      	adds	r7, #12
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5dcc:	b480      	push	{r7}
    5dce:	b083      	sub	sp, #12
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	7e1b      	ldrb	r3, [r3, #24]
    5dd8:	b2db      	uxtb	r3, r3
}
    5dda:	4618      	mov	r0, r3
    5ddc:	370c      	adds	r7, #12
    5dde:	46bd      	mov	sp, r7
    5de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5de4:	4770      	bx	lr

00005de6 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5de6:	b480      	push	{r7}
    5de8:	b083      	sub	sp, #12
    5dea:	af00      	add	r7, sp, #0
    5dec:	6078      	str	r0, [r7, #4]
    5dee:	460b      	mov	r3, r1
    5df0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	78fa      	ldrb	r2, [r7, #3]
    5df6:	761a      	strb	r2, [r3, #24]
}
    5df8:	bf00      	nop
    5dfa:	370c      	adds	r7, #12
    5dfc:	46bd      	mov	sp, r7
    5dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e02:	4770      	bx	lr

00005e04 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5e04:	b480      	push	{r7}
    5e06:	b085      	sub	sp, #20
    5e08:	af00      	add	r7, sp, #0
    5e0a:	6078      	str	r0, [r7, #4]
    5e0c:	460b      	mov	r3, r1
    5e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e10:	687b      	ldr	r3, [r7, #4]
    5e12:	7e1b      	ldrb	r3, [r3, #24]
    5e14:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5e16:	7bfa      	ldrb	r2, [r7, #15]
    5e18:	78fb      	ldrb	r3, [r7, #3]
    5e1a:	4013      	ands	r3, r2
    5e1c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5e1e:	7bfb      	ldrb	r3, [r7, #15]
}
    5e20:	4618      	mov	r0, r3
    5e22:	3714      	adds	r7, #20
    5e24:	46bd      	mov	sp, r7
    5e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e2a:	4770      	bx	lr

00005e2c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5e2c:	b480      	push	{r7}
    5e2e:	b083      	sub	sp, #12
    5e30:	af00      	add	r7, sp, #0
    5e32:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	7e1b      	ldrb	r3, [r3, #24]
    5e38:	b2db      	uxtb	r3, r3
}
    5e3a:	4618      	mov	r0, r3
    5e3c:	370c      	adds	r7, #12
    5e3e:	46bd      	mov	sp, r7
    5e40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e44:	4770      	bx	lr

00005e46 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5e46:	b480      	push	{r7}
    5e48:	b083      	sub	sp, #12
    5e4a:	af00      	add	r7, sp, #0
    5e4c:	6078      	str	r0, [r7, #4]
    5e4e:	460b      	mov	r3, r1
    5e50:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	78fa      	ldrb	r2, [r7, #3]
    5e56:	761a      	strb	r2, [r3, #24]
}
    5e58:	bf00      	nop
    5e5a:	370c      	adds	r7, #12
    5e5c:	46bd      	mov	sp, r7
    5e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e62:	4770      	bx	lr

00005e64 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    5e64:	b480      	push	{r7}
    5e66:	b083      	sub	sp, #12
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	2201      	movs	r2, #1
    5e70:	759a      	strb	r2, [r3, #22]
}
    5e72:	bf00      	nop
    5e74:	370c      	adds	r7, #12
    5e76:	46bd      	mov	sp, r7
    5e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e7c:	4770      	bx	lr

00005e7e <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    5e7e:	b480      	push	{r7}
    5e80:	b083      	sub	sp, #12
    5e82:	af00      	add	r7, sp, #0
    5e84:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    5e86:	687b      	ldr	r3, [r7, #4]
    5e88:	2201      	movs	r2, #1
    5e8a:	751a      	strb	r2, [r3, #20]
}
    5e8c:	bf00      	nop
    5e8e:	370c      	adds	r7, #12
    5e90:	46bd      	mov	sp, r7
    5e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e96:	4770      	bx	lr

00005e98 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    5e98:	b480      	push	{r7}
    5e9a:	b083      	sub	sp, #12
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	2202      	movs	r2, #2
    5ea4:	759a      	strb	r2, [r3, #22]
}
    5ea6:	bf00      	nop
    5ea8:	370c      	adds	r7, #12
    5eaa:	46bd      	mov	sp, r7
    5eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb0:	4770      	bx	lr

00005eb2 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5eb2:	b480      	push	{r7}
    5eb4:	b083      	sub	sp, #12
    5eb6:	af00      	add	r7, sp, #0
    5eb8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	2202      	movs	r2, #2
    5ebe:	751a      	strb	r2, [r3, #20]
}
    5ec0:	bf00      	nop
    5ec2:	370c      	adds	r7, #12
    5ec4:	46bd      	mov	sp, r7
    5ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eca:	4770      	bx	lr

00005ecc <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5ecc:	b480      	push	{r7}
    5ece:	b083      	sub	sp, #12
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	2204      	movs	r2, #4
    5ed8:	759a      	strb	r2, [r3, #22]
}
    5eda:	bf00      	nop
    5edc:	370c      	adds	r7, #12
    5ede:	46bd      	mov	sp, r7
    5ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee4:	4770      	bx	lr

00005ee6 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5ee6:	b480      	push	{r7}
    5ee8:	b083      	sub	sp, #12
    5eea:	af00      	add	r7, sp, #0
    5eec:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	2204      	movs	r2, #4
    5ef2:	751a      	strb	r2, [r3, #20]
}
    5ef4:	bf00      	nop
    5ef6:	370c      	adds	r7, #12
    5ef8:	46bd      	mov	sp, r7
    5efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efe:	4770      	bx	lr

00005f00 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5f00:	b480      	push	{r7}
    5f02:	b083      	sub	sp, #12
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	7d9b      	ldrb	r3, [r3, #22]
    5f0c:	b2db      	uxtb	r3, r3
}
    5f0e:	4618      	mov	r0, r3
    5f10:	370c      	adds	r7, #12
    5f12:	46bd      	mov	sp, r7
    5f14:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f18:	4770      	bx	lr
	...

00005f1c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b082      	sub	sp, #8
    5f20:	af00      	add	r7, sp, #0
    5f22:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	681b      	ldr	r3, [r3, #0]
    5f28:	f023 0202 	bic.w	r2, r3, #2
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f30:	2103      	movs	r1, #3
    5f32:	6878      	ldr	r0, [r7, #4]
    5f34:	4b02      	ldr	r3, [pc, #8]	; (5f40 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5f36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f38:	bf00      	nop
    5f3a:	3708      	adds	r7, #8
    5f3c:	46bd      	mov	sp, r7
    5f3e:	bd80      	pop	{r7, pc}
    5f40:	00005d01 	.word	0x00005d01

00005f44 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5f44:	b480      	push	{r7}
    5f46:	b085      	sub	sp, #20
    5f48:	af00      	add	r7, sp, #0
    5f4a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	681b      	ldr	r3, [r3, #0]
    5f50:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5f52:	68fb      	ldr	r3, [r7, #12]
    5f54:	0edb      	lsrs	r3, r3, #27
    5f56:	f003 0301 	and.w	r3, r3, #1
    5f5a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5f5c:	68fb      	ldr	r3, [r7, #12]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	bf14      	ite	ne
    5f62:	2301      	movne	r3, #1
    5f64:	2300      	moveq	r3, #0
    5f66:	b2db      	uxtb	r3, r3
}
    5f68:	4618      	mov	r0, r3
    5f6a:	3714      	adds	r7, #20
    5f6c:	46bd      	mov	sp, r7
    5f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f72:	4770      	bx	lr

00005f74 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5f74:	b580      	push	{r7, lr}
    5f76:	b084      	sub	sp, #16
    5f78:	af00      	add	r7, sp, #0
    5f7a:	6078      	str	r0, [r7, #4]
    5f7c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f7e:	2103      	movs	r1, #3
    5f80:	6878      	ldr	r0, [r7, #4]
    5f82:	4b07      	ldr	r3, [pc, #28]	; (5fa0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5f84:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5f8c:	68fa      	ldr	r2, [r7, #12]
    5f8e:	683b      	ldr	r3, [r7, #0]
    5f90:	4013      	ands	r3, r2
    5f92:	60fb      	str	r3, [r7, #12]
	return tmp;
    5f94:	68fb      	ldr	r3, [r7, #12]
}
    5f96:	4618      	mov	r0, r3
    5f98:	3710      	adds	r7, #16
    5f9a:	46bd      	mov	sp, r7
    5f9c:	bd80      	pop	{r7, pc}
    5f9e:	bf00      	nop
    5fa0:	00005d01 	.word	0x00005d01

00005fa4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b082      	sub	sp, #8
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
    5fac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	683a      	ldr	r2, [r7, #0]
    5fb2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fb4:	2103      	movs	r1, #3
    5fb6:	6878      	ldr	r0, [r7, #4]
    5fb8:	4b02      	ldr	r3, [pc, #8]	; (5fc4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5fba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fbc:	bf00      	nop
    5fbe:	3708      	adds	r7, #8
    5fc0:	46bd      	mov	sp, r7
    5fc2:	bd80      	pop	{r7, pc}
    5fc4:	00005d01 	.word	0x00005d01

00005fc8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	f043 0202 	orr.w	r2, r3, #2
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5fdc:	2103      	movs	r1, #3
    5fde:	6878      	ldr	r0, [r7, #4]
    5fe0:	4b02      	ldr	r3, [pc, #8]	; (5fec <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    5fe2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe4:	bf00      	nop
    5fe6:	3708      	adds	r7, #8
    5fe8:	46bd      	mov	sp, r7
    5fea:	bd80      	pop	{r7, pc}
    5fec:	00005d4d 	.word	0x00005d4d

00005ff0 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5ff0:	b580      	push	{r7, lr}
    5ff2:	b084      	sub	sp, #16
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ff8:	2103      	movs	r1, #3
    5ffa:	6878      	ldr	r0, [r7, #4]
    5ffc:	4b09      	ldr	r3, [pc, #36]	; (6024 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5ffe:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	681b      	ldr	r3, [r3, #0]
    6004:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6006:	68fb      	ldr	r3, [r7, #12]
    6008:	085b      	lsrs	r3, r3, #1
    600a:	f003 0301 	and.w	r3, r3, #1
    600e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6010:	68fb      	ldr	r3, [r7, #12]
    6012:	2b00      	cmp	r3, #0
    6014:	bf14      	ite	ne
    6016:	2301      	movne	r3, #1
    6018:	2300      	moveq	r3, #0
    601a:	b2db      	uxtb	r3, r3
}
    601c:	4618      	mov	r0, r3
    601e:	3710      	adds	r7, #16
    6020:	46bd      	mov	sp, r7
    6022:	bd80      	pop	{r7, pc}
    6024:	00005d4d 	.word	0x00005d4d

00006028 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6028:	b580      	push	{r7, lr}
    602a:	b082      	sub	sp, #8
    602c:	af00      	add	r7, sp, #0
    602e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	681b      	ldr	r3, [r3, #0]
    6034:	f023 0202 	bic.w	r2, r3, #2
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    603c:	2103      	movs	r1, #3
    603e:	6878      	ldr	r0, [r7, #4]
    6040:	4b02      	ldr	r3, [pc, #8]	; (604c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6042:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6044:	bf00      	nop
    6046:	3708      	adds	r7, #8
    6048:	46bd      	mov	sp, r7
    604a:	bd80      	pop	{r7, pc}
    604c:	00005d4d 	.word	0x00005d4d

00006050 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6050:	b580      	push	{r7, lr}
    6052:	b084      	sub	sp, #16
    6054:	af00      	add	r7, sp, #0
    6056:	6078      	str	r0, [r7, #4]
    6058:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    605a:	2103      	movs	r1, #3
    605c:	6878      	ldr	r0, [r7, #4]
    605e:	4b07      	ldr	r3, [pc, #28]	; (607c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6060:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	681b      	ldr	r3, [r3, #0]
    6066:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6068:	68fa      	ldr	r2, [r7, #12]
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	4013      	ands	r3, r2
    606e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6070:	68fb      	ldr	r3, [r7, #12]
}
    6072:	4618      	mov	r0, r3
    6074:	3710      	adds	r7, #16
    6076:	46bd      	mov	sp, r7
    6078:	bd80      	pop	{r7, pc}
    607a:	bf00      	nop
    607c:	00005d4d 	.word	0x00005d4d

00006080 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6080:	b580      	push	{r7, lr}
    6082:	b082      	sub	sp, #8
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
    6088:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    608a:	687b      	ldr	r3, [r7, #4]
    608c:	683a      	ldr	r2, [r7, #0]
    608e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6090:	2103      	movs	r1, #3
    6092:	6878      	ldr	r0, [r7, #4]
    6094:	4b02      	ldr	r3, [pc, #8]	; (60a0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    6096:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6098:	bf00      	nop
    609a:	3708      	adds	r7, #8
    609c:	46bd      	mov	sp, r7
    609e:	bd80      	pop	{r7, pc}
    60a0:	00005d4d 	.word	0x00005d4d

000060a4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    60a4:	b580      	push	{r7, lr}
    60a6:	b082      	sub	sp, #8
    60a8:	af00      	add	r7, sp, #0
    60aa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	685b      	ldr	r3, [r3, #4]
    60b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60b8:	2104      	movs	r1, #4
    60ba:	6878      	ldr	r0, [r7, #4]
    60bc:	4b02      	ldr	r3, [pc, #8]	; (60c8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    60be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60c0:	bf00      	nop
    60c2:	3708      	adds	r7, #8
    60c4:	46bd      	mov	sp, r7
    60c6:	bd80      	pop	{r7, pc}
    60c8:	00005d01 	.word	0x00005d01

000060cc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    60cc:	b580      	push	{r7, lr}
    60ce:	b082      	sub	sp, #8
    60d0:	af00      	add	r7, sp, #0
    60d2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    60d4:	687b      	ldr	r3, [r7, #4]
    60d6:	685b      	ldr	r3, [r3, #4]
    60d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60e0:	2104      	movs	r1, #4
    60e2:	6878      	ldr	r0, [r7, #4]
    60e4:	4b02      	ldr	r3, [pc, #8]	; (60f0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    60e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60e8:	bf00      	nop
    60ea:	3708      	adds	r7, #8
    60ec:	46bd      	mov	sp, r7
    60ee:	bd80      	pop	{r7, pc}
    60f0:	00005d01 	.word	0x00005d01

000060f4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    60f4:	b580      	push	{r7, lr}
    60f6:	b082      	sub	sp, #8
    60f8:	af00      	add	r7, sp, #0
    60fa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	685b      	ldr	r3, [r3, #4]
    6100:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6108:	2104      	movs	r1, #4
    610a:	6878      	ldr	r0, [r7, #4]
    610c:	4b02      	ldr	r3, [pc, #8]	; (6118 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    610e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6110:	bf00      	nop
    6112:	3708      	adds	r7, #8
    6114:	46bd      	mov	sp, r7
    6116:	bd80      	pop	{r7, pc}
    6118:	00005d01 	.word	0x00005d01

0000611c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    611c:	b580      	push	{r7, lr}
    611e:	b082      	sub	sp, #8
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	685b      	ldr	r3, [r3, #4]
    6128:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6130:	2104      	movs	r1, #4
    6132:	6878      	ldr	r0, [r7, #4]
    6134:	4b02      	ldr	r3, [pc, #8]	; (6140 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6136:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6138:	bf00      	nop
    613a:	3708      	adds	r7, #8
    613c:	46bd      	mov	sp, r7
    613e:	bd80      	pop	{r7, pc}
    6140:	00005d01 	.word	0x00005d01

00006144 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6144:	b580      	push	{r7, lr}
    6146:	b082      	sub	sp, #8
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
    614c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	685a      	ldr	r2, [r3, #4]
    6152:	683b      	ldr	r3, [r7, #0]
    6154:	041b      	lsls	r3, r3, #16
    6156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    615a:	431a      	orrs	r2, r3
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6160:	2104      	movs	r1, #4
    6162:	6878      	ldr	r0, [r7, #4]
    6164:	4b02      	ldr	r3, [pc, #8]	; (6170 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6166:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6168:	bf00      	nop
    616a:	3708      	adds	r7, #8
    616c:	46bd      	mov	sp, r7
    616e:	bd80      	pop	{r7, pc}
    6170:	00005d01 	.word	0x00005d01

00006174 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6174:	b580      	push	{r7, lr}
    6176:	b082      	sub	sp, #8
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
    617c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	683a      	ldr	r2, [r7, #0]
    6182:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6184:	2104      	movs	r1, #4
    6186:	6878      	ldr	r0, [r7, #4]
    6188:	4b02      	ldr	r3, [pc, #8]	; (6194 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    618a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    618c:	bf00      	nop
    618e:	3708      	adds	r7, #8
    6190:	46bd      	mov	sp, r7
    6192:	bd80      	pop	{r7, pc}
    6194:	00005d01 	.word	0x00005d01

00006198 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6198:	b580      	push	{r7, lr}
    619a:	b082      	sub	sp, #8
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
    61a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	683a      	ldr	r2, [r7, #0]
    61a6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    61a8:	2117      	movs	r1, #23
    61aa:	6878      	ldr	r0, [r7, #4]
    61ac:	4b02      	ldr	r3, [pc, #8]	; (61b8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    61ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61b0:	bf00      	nop
    61b2:	3708      	adds	r7, #8
    61b4:	46bd      	mov	sp, r7
    61b6:	bd80      	pop	{r7, pc}
    61b8:	00005d4d 	.word	0x00005d4d

000061bc <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    61bc:	b480      	push	{r7}
    61be:	b083      	sub	sp, #12
    61c0:	af00      	add	r7, sp, #0
    61c2:	6078      	str	r0, [r7, #4]
    61c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    61c6:	687b      	ldr	r3, [r7, #4]
    61c8:	683a      	ldr	r2, [r7, #0]
    61ca:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61cc:	bf00      	nop
    61ce:	370c      	adds	r7, #12
    61d0:	46bd      	mov	sp, r7
    61d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    61d6:	4770      	bx	lr

000061d8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    61d8:	b480      	push	{r7}
    61da:	b083      	sub	sp, #12
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
    61e0:	460b      	mov	r3, r1
    61e2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	78fa      	ldrb	r2, [r7, #3]
    61e8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61ea:	bf00      	nop
    61ec:	370c      	adds	r7, #12
    61ee:	46bd      	mov	sp, r7
    61f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    61f4:	4770      	bx	lr
	...

000061f8 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b084      	sub	sp, #16
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
    6200:	460b      	mov	r3, r1
    6202:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6208:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    620a:	68fb      	ldr	r3, [r7, #12]
    620c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6210:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6212:	78fb      	ldrb	r3, [r7, #3]
    6214:	039b      	lsls	r3, r3, #14
    6216:	461a      	mov	r2, r3
    6218:	68fb      	ldr	r3, [r7, #12]
    621a:	4313      	orrs	r3, r2
    621c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	68fa      	ldr	r2, [r7, #12]
    6222:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6224:	2104      	movs	r1, #4
    6226:	6878      	ldr	r0, [r7, #4]
    6228:	4b02      	ldr	r3, [pc, #8]	; (6234 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    622a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    622c:	bf00      	nop
    622e:	3710      	adds	r7, #16
    6230:	46bd      	mov	sp, r7
    6232:	bd80      	pop	{r7, pc}
    6234:	00005d01 	.word	0x00005d01

00006238 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6238:	b580      	push	{r7, lr}
    623a:	b082      	sub	sp, #8
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	683a      	ldr	r2, [r7, #0]
    6246:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6248:	2104      	movs	r1, #4
    624a:	6878      	ldr	r0, [r7, #4]
    624c:	4b02      	ldr	r3, [pc, #8]	; (6258 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    624e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6250:	bf00      	nop
    6252:	3708      	adds	r7, #8
    6254:	46bd      	mov	sp, r7
    6256:	bd80      	pop	{r7, pc}
    6258:	00005d01 	.word	0x00005d01

0000625c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    625c:	b580      	push	{r7, lr}
    625e:	b082      	sub	sp, #8
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6264:	2104      	movs	r1, #4
    6266:	6878      	ldr	r0, [r7, #4]
    6268:	4b03      	ldr	r3, [pc, #12]	; (6278 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    626a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6270:	4618      	mov	r0, r3
    6272:	3708      	adds	r7, #8
    6274:	46bd      	mov	sp, r7
    6276:	bd80      	pop	{r7, pc}
    6278:	00005d01 	.word	0x00005d01

0000627c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    627c:	b480      	push	{r7}
    627e:	b083      	sub	sp, #12
    6280:	af00      	add	r7, sp, #0
    6282:	6078      	str	r0, [r7, #4]
    6284:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	683a      	ldr	r2, [r7, #0]
    628a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    628c:	bf00      	nop
    628e:	370c      	adds	r7, #12
    6290:	46bd      	mov	sp, r7
    6292:	f85d 7b04 	ldr.w	r7, [sp], #4
    6296:	4770      	bx	lr

00006298 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6298:	b580      	push	{r7, lr}
    629a:	b082      	sub	sp, #8
    629c:	af00      	add	r7, sp, #0
    629e:	6078      	str	r0, [r7, #4]
    62a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    62a2:	687b      	ldr	r3, [r7, #4]
    62a4:	683a      	ldr	r2, [r7, #0]
    62a6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62a8:	2104      	movs	r1, #4
    62aa:	6878      	ldr	r0, [r7, #4]
    62ac:	4b02      	ldr	r3, [pc, #8]	; (62b8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    62ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62b0:	bf00      	nop
    62b2:	3708      	adds	r7, #8
    62b4:	46bd      	mov	sp, r7
    62b6:	bd80      	pop	{r7, pc}
    62b8:	00005d01 	.word	0x00005d01

000062bc <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b082      	sub	sp, #8
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62c4:	2104      	movs	r1, #4
    62c6:	6878      	ldr	r0, [r7, #4]
    62c8:	4b03      	ldr	r3, [pc, #12]	; (62d8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    62ca:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    62d0:	4618      	mov	r0, r3
    62d2:	3708      	adds	r7, #8
    62d4:	46bd      	mov	sp, r7
    62d6:	bd80      	pop	{r7, pc}
    62d8:	00005d01 	.word	0x00005d01

000062dc <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    62dc:	b480      	push	{r7}
    62de:	b083      	sub	sp, #12
    62e0:	af00      	add	r7, sp, #0
    62e2:	6078      	str	r0, [r7, #4]
    62e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	683a      	ldr	r2, [r7, #0]
    62ea:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62ec:	bf00      	nop
    62ee:	370c      	adds	r7, #12
    62f0:	46bd      	mov	sp, r7
    62f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62f6:	4770      	bx	lr

000062f8 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    62f8:	b480      	push	{r7}
    62fa:	b083      	sub	sp, #12
    62fc:	af00      	add	r7, sp, #0
    62fe:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6300:	687b      	ldr	r3, [r7, #4]
    6302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6304:	4618      	mov	r0, r3
    6306:	370c      	adds	r7, #12
    6308:	46bd      	mov	sp, r7
    630a:	f85d 7b04 	ldr.w	r7, [sp], #4
    630e:	4770      	bx	lr

00006310 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6310:	b480      	push	{r7}
    6312:	b083      	sub	sp, #12
    6314:	af00      	add	r7, sp, #0
    6316:	6078      	str	r0, [r7, #4]
    6318:	460b      	mov	r3, r1
    631a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    631c:	687b      	ldr	r3, [r7, #4]
    631e:	78fa      	ldrb	r2, [r7, #3]
    6320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6324:	bf00      	nop
    6326:	370c      	adds	r7, #12
    6328:	46bd      	mov	sp, r7
    632a:	f85d 7b04 	ldr.w	r7, [sp], #4
    632e:	4770      	bx	lr

00006330 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6330:	b480      	push	{r7}
    6332:	b083      	sub	sp, #12
    6334:	af00      	add	r7, sp, #0
    6336:	6078      	str	r0, [r7, #4]
    6338:	460b      	mov	r3, r1
    633a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	887a      	ldrh	r2, [r7, #2]
    6340:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6342:	bf00      	nop
    6344:	370c      	adds	r7, #12
    6346:	46bd      	mov	sp, r7
    6348:	f85d 7b04 	ldr.w	r7, [sp], #4
    634c:	4770      	bx	lr
	...

00006350 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6350:	b580      	push	{r7, lr}
    6352:	b082      	sub	sp, #8
    6354:	af00      	add	r7, sp, #0
    6356:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6358:	2104      	movs	r1, #4
    635a:	6878      	ldr	r0, [r7, #4]
    635c:	4b04      	ldr	r3, [pc, #16]	; (6370 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    635e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	8b5b      	ldrh	r3, [r3, #26]
    6364:	b29b      	uxth	r3, r3
}
    6366:	4618      	mov	r0, r3
    6368:	3708      	adds	r7, #8
    636a:	46bd      	mov	sp, r7
    636c:	bd80      	pop	{r7, pc}
    636e:	bf00      	nop
    6370:	00005d01 	.word	0x00005d01

00006374 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6374:	b4b0      	push	{r4, r5, r7}
    6376:	b08d      	sub	sp, #52	; 0x34
    6378:	af00      	add	r7, sp, #0
    637a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    637c:	4b13      	ldr	r3, [pc, #76]	; (63cc <_sercom_get_hardware_index+0x58>)
    637e:	f107 040c 	add.w	r4, r7, #12
    6382:	461d      	mov	r5, r3
    6384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6388:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    638c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6390:	2300      	movs	r3, #0
    6392:	62fb      	str	r3, [r7, #44]	; 0x2c
    6394:	e010      	b.n	63b8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6398:	009b      	lsls	r3, r3, #2
    639a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    639e:	4413      	add	r3, r2
    63a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    63a4:	461a      	mov	r2, r3
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	429a      	cmp	r2, r3
    63aa:	d102      	bne.n	63b2 <_sercom_get_hardware_index+0x3e>
			return i;
    63ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63ae:	b2db      	uxtb	r3, r3
    63b0:	e006      	b.n	63c0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    63b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63b4:	3301      	adds	r3, #1
    63b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    63b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63ba:	2b07      	cmp	r3, #7
    63bc:	d9eb      	bls.n	6396 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    63be:	2300      	movs	r3, #0
}
    63c0:	4618      	mov	r0, r3
    63c2:	3734      	adds	r7, #52	; 0x34
    63c4:	46bd      	mov	sp, r7
    63c6:	bcb0      	pop	{r4, r5, r7}
    63c8:	4770      	bx	lr
    63ca:	bf00      	nop
    63cc:	0000f068 	.word	0x0000f068

000063d0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    63d0:	b480      	push	{r7}
    63d2:	b083      	sub	sp, #12
    63d4:	af00      	add	r7, sp, #0
    63d6:	6078      	str	r0, [r7, #4]
    63d8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    63e0:	d102      	bne.n	63e8 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    63e2:	4a0b      	ldr	r2, [pc, #44]	; (6410 <_sercom_init_irq_param+0x40>)
    63e4:	683b      	ldr	r3, [r7, #0]
    63e6:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	4a0a      	ldr	r2, [pc, #40]	; (6414 <_sercom_init_irq_param+0x44>)
    63ec:	4293      	cmp	r3, r2
    63ee:	d102      	bne.n	63f6 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    63f0:	4a09      	ldr	r2, [pc, #36]	; (6418 <_sercom_init_irq_param+0x48>)
    63f2:	683b      	ldr	r3, [r7, #0]
    63f4:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	4a08      	ldr	r2, [pc, #32]	; (641c <_sercom_init_irq_param+0x4c>)
    63fa:	4293      	cmp	r3, r2
    63fc:	d102      	bne.n	6404 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    63fe:	4a08      	ldr	r2, [pc, #32]	; (6420 <_sercom_init_irq_param+0x50>)
    6400:	683b      	ldr	r3, [r7, #0]
    6402:	6013      	str	r3, [r2, #0]
	}
}
    6404:	bf00      	nop
    6406:	370c      	adds	r7, #12
    6408:	46bd      	mov	sp, r7
    640a:	f85d 7b04 	ldr.w	r7, [sp], #4
    640e:	4770      	bx	lr
    6410:	200006f4 	.word	0x200006f4
    6414:	43000400 	.word	0x43000400
    6418:	200006f8 	.word	0x200006f8
    641c:	43000c00 	.word	0x43000c00
    6420:	200006fc 	.word	0x200006fc

00006424 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6424:	b580      	push	{r7, lr}
    6426:	b084      	sub	sp, #16
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    642c:	6878      	ldr	r0, [r7, #4]
    642e:	4b13      	ldr	r3, [pc, #76]	; (647c <_get_i2cm_index+0x58>)
    6430:	4798      	blx	r3
    6432:	4603      	mov	r3, r0
    6434:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6436:	2300      	movs	r3, #0
    6438:	73fb      	strb	r3, [r7, #15]
    643a:	e010      	b.n	645e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    643c:	7bfa      	ldrb	r2, [r7, #15]
    643e:	4910      	ldr	r1, [pc, #64]	; (6480 <_get_i2cm_index+0x5c>)
    6440:	4613      	mov	r3, r2
    6442:	005b      	lsls	r3, r3, #1
    6444:	4413      	add	r3, r2
    6446:	00db      	lsls	r3, r3, #3
    6448:	440b      	add	r3, r1
    644a:	781b      	ldrb	r3, [r3, #0]
    644c:	7bba      	ldrb	r2, [r7, #14]
    644e:	429a      	cmp	r2, r3
    6450:	d102      	bne.n	6458 <_get_i2cm_index+0x34>
			return i;
    6452:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6456:	e00d      	b.n	6474 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6458:	7bfb      	ldrb	r3, [r7, #15]
    645a:	3301      	adds	r3, #1
    645c:	73fb      	strb	r3, [r7, #15]
    645e:	7bfb      	ldrb	r3, [r7, #15]
    6460:	2b01      	cmp	r3, #1
    6462:	d9eb      	bls.n	643c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6464:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    6468:	4906      	ldr	r1, [pc, #24]	; (6484 <_get_i2cm_index+0x60>)
    646a:	2000      	movs	r0, #0
    646c:	4b06      	ldr	r3, [pc, #24]	; (6488 <_get_i2cm_index+0x64>)
    646e:	4798      	blx	r3
	return -1;
    6470:	f04f 33ff 	mov.w	r3, #4294967295
}
    6474:	4618      	mov	r0, r3
    6476:	3710      	adds	r7, #16
    6478:	46bd      	mov	sp, r7
    647a:	bd80      	pop	{r7, pc}
    647c:	00006375 	.word	0x00006375
    6480:	20000018 	.word	0x20000018
    6484:	0000f04c 	.word	0x0000f04c
    6488:	000038fd 	.word	0x000038fd

0000648c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    648c:	b580      	push	{r7, lr}
    648e:	b082      	sub	sp, #8
    6490:	af00      	add	r7, sp, #0
    6492:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6494:	2103      	movs	r1, #3
    6496:	6878      	ldr	r0, [r7, #4]
    6498:	4b02      	ldr	r3, [pc, #8]	; (64a4 <_sercom_i2c_send_stop+0x18>)
    649a:	4798      	blx	r3
}
    649c:	bf00      	nop
    649e:	3708      	adds	r7, #8
    64a0:	46bd      	mov	sp, r7
    64a2:	bd80      	pop	{r7, pc}
    64a4:	00006145 	.word	0x00006145

000064a8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    64a8:	b590      	push	{r4, r7, lr}
    64aa:	b087      	sub	sp, #28
    64ac:	af00      	add	r7, sp, #0
    64ae:	60f8      	str	r0, [r7, #12]
    64b0:	60b9      	str	r1, [r7, #8]
    64b2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    64b4:	68f8      	ldr	r0, [r7, #12]
    64b6:	4b7d      	ldr	r3, [pc, #500]	; (66ac <_sercom_i2c_sync_analyse_flags+0x204>)
    64b8:	4798      	blx	r3
    64ba:	4603      	mov	r3, r0
    64bc:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    64be:	68f8      	ldr	r0, [r7, #12]
    64c0:	4b7b      	ldr	r3, [pc, #492]	; (66b0 <_sercom_i2c_sync_analyse_flags+0x208>)
    64c2:	4798      	blx	r3
    64c4:	4603      	mov	r3, r0
    64c6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    64c8:	68bb      	ldr	r3, [r7, #8]
    64ca:	f003 0301 	and.w	r3, r3, #1
    64ce:	2b00      	cmp	r3, #0
    64d0:	f000 8095 	beq.w	65fe <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    64d4:	8a7b      	ldrh	r3, [r7, #18]
    64d6:	f003 0302 	and.w	r3, r3, #2
    64da:	2b00      	cmp	r3, #0
    64dc:	d01d      	beq.n	651a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    64de:	68f8      	ldr	r0, [r7, #12]
    64e0:	4b74      	ldr	r3, [pc, #464]	; (66b4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    64e2:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	885b      	ldrh	r3, [r3, #2]
    64e8:	b29b      	uxth	r3, r3
    64ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    64ee:	b29a      	uxth	r2, r3
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	885b      	ldrh	r3, [r3, #2]
    64f8:	b29b      	uxth	r3, r3
    64fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64fe:	b29a      	uxth	r2, r3
    6500:	687b      	ldr	r3, [r7, #4]
    6502:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6504:	8a7b      	ldrh	r3, [r7, #18]
    6506:	f003 0301 	and.w	r3, r3, #1
    650a:	2b00      	cmp	r3, #0
    650c:	d002      	beq.n	6514 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    650e:	f06f 0304 	mvn.w	r3, #4
    6512:	e0c6      	b.n	66a2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6514:	f06f 0303 	mvn.w	r3, #3
    6518:	e0c3      	b.n	66a2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    651a:	8a7b      	ldrh	r3, [r7, #18]
    651c:	f003 0304 	and.w	r3, r3, #4
    6520:	2b00      	cmp	r3, #0
    6522:	d01f      	beq.n	6564 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6524:	687b      	ldr	r3, [r7, #4]
    6526:	685b      	ldr	r3, [r3, #4]
    6528:	2b00      	cmp	r3, #0
    652a:	dd07      	ble.n	653c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	885b      	ldrh	r3, [r3, #2]
    6530:	b29b      	uxth	r3, r3
    6532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6536:	b29a      	uxth	r2, r3
    6538:	687b      	ldr	r3, [r7, #4]
    653a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	885b      	ldrh	r3, [r3, #2]
    6540:	b29b      	uxth	r3, r3
    6542:	b21b      	sxth	r3, r3
    6544:	2b00      	cmp	r3, #0
    6546:	da02      	bge.n	654e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6548:	68f8      	ldr	r0, [r7, #12]
    654a:	4b5b      	ldr	r3, [pc, #364]	; (66b8 <_sercom_i2c_sync_analyse_flags+0x210>)
    654c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	885b      	ldrh	r3, [r3, #2]
    6552:	b29b      	uxth	r3, r3
    6554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6558:	b29a      	uxth	r2, r3
    655a:	687b      	ldr	r3, [r7, #4]
    655c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    655e:	f06f 0301 	mvn.w	r3, #1
    6562:	e09e      	b.n	66a2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	885b      	ldrh	r3, [r3, #2]
    6568:	b29b      	uxth	r3, r3
    656a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    656e:	2b00      	cmp	r3, #0
    6570:	d01c      	beq.n	65ac <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	881b      	ldrh	r3, [r3, #0]
    6576:	121b      	asrs	r3, r3, #8
    6578:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    657a:	f003 0406 	and.w	r4, r3, #6
    657e:	68f8      	ldr	r0, [r7, #12]
    6580:	4b4e      	ldr	r3, [pc, #312]	; (66bc <_sercom_i2c_sync_analyse_flags+0x214>)
    6582:	4798      	blx	r3
    6584:	4603      	mov	r3, r0
    6586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    658a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    658c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6590:	4619      	mov	r1, r3
    6592:	68f8      	ldr	r0, [r7, #12]
    6594:	4b4a      	ldr	r3, [pc, #296]	; (66c0 <_sercom_i2c_sync_analyse_flags+0x218>)
    6596:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6598:	687b      	ldr	r3, [r7, #4]
    659a:	885b      	ldrh	r3, [r3, #2]
    659c:	b29b      	uxth	r3, r3
    659e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    65a2:	b29a      	uxth	r2, r3
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    65a8:	2300      	movs	r3, #0
    65aa:	e07a      	b.n	66a2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	685b      	ldr	r3, [r3, #4]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d111      	bne.n	65d8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    65b4:	687b      	ldr	r3, [r7, #4]
    65b6:	885b      	ldrh	r3, [r3, #2]
    65b8:	b29b      	uxth	r3, r3
    65ba:	b21b      	sxth	r3, r3
    65bc:	2b00      	cmp	r3, #0
    65be:	da02      	bge.n	65c6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    65c0:	68f8      	ldr	r0, [r7, #12]
    65c2:	4b3d      	ldr	r3, [pc, #244]	; (66b8 <_sercom_i2c_sync_analyse_flags+0x210>)
    65c4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    65c6:	687b      	ldr	r3, [r7, #4]
    65c8:	885b      	ldrh	r3, [r3, #2]
    65ca:	b29b      	uxth	r3, r3
    65cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65d0:	b29a      	uxth	r2, r3
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	805a      	strh	r2, [r3, #2]
    65d6:	e010      	b.n	65fa <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	689b      	ldr	r3, [r3, #8]
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	4619      	mov	r1, r3
    65e0:	68f8      	ldr	r0, [r7, #12]
    65e2:	4b38      	ldr	r3, [pc, #224]	; (66c4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    65e4:	4798      	blx	r3
				msg->buffer++;
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	689b      	ldr	r3, [r3, #8]
    65ea:	1c5a      	adds	r2, r3, #1
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	609a      	str	r2, [r3, #8]
				msg->len--;
    65f0:	687b      	ldr	r3, [r7, #4]
    65f2:	685b      	ldr	r3, [r3, #4]
    65f4:	1e5a      	subs	r2, r3, #1
    65f6:	687b      	ldr	r3, [r7, #4]
    65f8:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    65fa:	2300      	movs	r3, #0
    65fc:	e051      	b.n	66a2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    65fe:	68bb      	ldr	r3, [r7, #8]
    6600:	f003 0302 	and.w	r3, r3, #2
    6604:	2b00      	cmp	r3, #0
    6606:	d04b      	beq.n	66a0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	685b      	ldr	r3, [r3, #4]
    660c:	2b00      	cmp	r3, #0
    660e:	d041      	beq.n	6694 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6610:	8a7b      	ldrh	r3, [r7, #18]
    6612:	f003 0304 	and.w	r3, r3, #4
    6616:	2b00      	cmp	r3, #0
    6618:	d13c      	bne.n	6694 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    661a:	687b      	ldr	r3, [r7, #4]
    661c:	685b      	ldr	r3, [r3, #4]
    661e:	1e5a      	subs	r2, r3, #1
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6624:	687b      	ldr	r3, [r7, #4]
    6626:	685b      	ldr	r3, [r3, #4]
    6628:	2b00      	cmp	r3, #0
    662a:	d102      	bne.n	6632 <_sercom_i2c_sync_analyse_flags+0x18a>
    662c:	697b      	ldr	r3, [r7, #20]
    662e:	2b00      	cmp	r3, #0
    6630:	d006      	beq.n	6640 <_sercom_i2c_sync_analyse_flags+0x198>
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	685b      	ldr	r3, [r3, #4]
    6636:	2b01      	cmp	r3, #1
    6638:	d105      	bne.n	6646 <_sercom_i2c_sync_analyse_flags+0x19e>
    663a:	697b      	ldr	r3, [r7, #20]
    663c:	2b00      	cmp	r3, #0
    663e:	d002      	beq.n	6646 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6640:	68f8      	ldr	r0, [r7, #12]
    6642:	4b21      	ldr	r3, [pc, #132]	; (66c8 <_sercom_i2c_sync_analyse_flags+0x220>)
    6644:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6646:	687b      	ldr	r3, [r7, #4]
    6648:	685b      	ldr	r3, [r3, #4]
    664a:	2b00      	cmp	r3, #0
    664c:	d113      	bne.n	6676 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	885b      	ldrh	r3, [r3, #2]
    6652:	b29b      	uxth	r3, r3
    6654:	b21b      	sxth	r3, r3
    6656:	2b00      	cmp	r3, #0
    6658:	da05      	bge.n	6666 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    665a:	68f8      	ldr	r0, [r7, #12]
    665c:	4b1b      	ldr	r3, [pc, #108]	; (66cc <_sercom_i2c_sync_analyse_flags+0x224>)
    665e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6660:	68f8      	ldr	r0, [r7, #12]
    6662:	4b15      	ldr	r3, [pc, #84]	; (66b8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6664:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6666:	687b      	ldr	r3, [r7, #4]
    6668:	885b      	ldrh	r3, [r3, #2]
    666a:	b29b      	uxth	r3, r3
    666c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6670:	b29a      	uxth	r2, r3
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6676:	687b      	ldr	r3, [r7, #4]
    6678:	689c      	ldr	r4, [r3, #8]
    667a:	1c62      	adds	r2, r4, #1
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	609a      	str	r2, [r3, #8]
    6680:	68f8      	ldr	r0, [r7, #12]
    6682:	4b13      	ldr	r3, [pc, #76]	; (66d0 <_sercom_i2c_sync_analyse_flags+0x228>)
    6684:	4798      	blx	r3
    6686:	4603      	mov	r3, r0
    6688:	b2db      	uxtb	r3, r3
    668a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    668c:	68f8      	ldr	r0, [r7, #12]
    668e:	4b11      	ldr	r3, [pc, #68]	; (66d4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6690:	4798      	blx	r3
    6692:	e005      	b.n	66a0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6694:	68f8      	ldr	r0, [r7, #12]
    6696:	4b0f      	ldr	r3, [pc, #60]	; (66d4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6698:	4798      	blx	r3
			return I2C_NACK;
    669a:	f06f 0301 	mvn.w	r3, #1
    669e:	e000      	b.n	66a2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    66a0:	2300      	movs	r3, #0
}
    66a2:	4618      	mov	r0, r3
    66a4:	371c      	adds	r7, #28
    66a6:	46bd      	mov	sp, r7
    66a8:	bd90      	pop	{r4, r7, pc}
    66aa:	bf00      	nop
    66ac:	00005f45 	.word	0x00005f45
    66b0:	00006351 	.word	0x00006351
    66b4:	00005d99 	.word	0x00005d99
    66b8:	0000648d 	.word	0x0000648d
    66bc:	0000625d 	.word	0x0000625d
    66c0:	00006239 	.word	0x00006239
    66c4:	00006299 	.word	0x00006299
    66c8:	000060f5 	.word	0x000060f5
    66cc:	000060cd 	.word	0x000060cd
    66d0:	000062bd 	.word	0x000062bd
    66d4:	00005db3 	.word	0x00005db3

000066d8 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b086      	sub	sp, #24
    66dc:	af00      	add	r7, sp, #0
    66de:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	691b      	ldr	r3, [r3, #16]
    66e4:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    66e6:	6938      	ldr	r0, [r7, #16]
    66e8:	4b37      	ldr	r3, [pc, #220]	; (67c8 <_sercom_i2c_m_irq_handler+0xf0>)
    66ea:	4798      	blx	r3
    66ec:	4603      	mov	r3, r0
    66ee:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    66f0:	2300      	movs	r3, #0
    66f2:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	2b00      	cmp	r3, #0
    66f8:	bf14      	ite	ne
    66fa:	2301      	movne	r3, #1
    66fc:	2300      	moveq	r3, #0
    66fe:	b2db      	uxtb	r3, r3
    6700:	f240 422a 	movw	r2, #1066	; 0x42a
    6704:	4931      	ldr	r1, [pc, #196]	; (67cc <_sercom_i2c_m_irq_handler+0xf4>)
    6706:	4618      	mov	r0, r3
    6708:	4b31      	ldr	r3, [pc, #196]	; (67d0 <_sercom_i2c_m_irq_handler+0xf8>)
    670a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	691b      	ldr	r3, [r3, #16]
    6710:	2b00      	cmp	r3, #0
    6712:	bf14      	ite	ne
    6714:	2301      	movne	r3, #1
    6716:	2300      	moveq	r3, #0
    6718:	b2db      	uxtb	r3, r3
    671a:	f240 422b 	movw	r2, #1067	; 0x42b
    671e:	492b      	ldr	r1, [pc, #172]	; (67cc <_sercom_i2c_m_irq_handler+0xf4>)
    6720:	4618      	mov	r0, r3
    6722:	4b2b      	ldr	r3, [pc, #172]	; (67d0 <_sercom_i2c_m_irq_handler+0xf8>)
    6724:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6726:	bf00      	nop
    6728:	68fb      	ldr	r3, [r7, #12]
    672a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    672e:	2b00      	cmp	r3, #0
    6730:	d126      	bne.n	6780 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	461a      	mov	r2, r3
    6736:	68f9      	ldr	r1, [r7, #12]
    6738:	6938      	ldr	r0, [r7, #16]
    673a:	4b26      	ldr	r3, [pc, #152]	; (67d4 <_sercom_i2c_m_irq_handler+0xfc>)
    673c:	4798      	blx	r3
    673e:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6740:	697b      	ldr	r3, [r7, #20]
    6742:	2b00      	cmp	r3, #0
    6744:	d11b      	bne.n	677e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6746:	68fb      	ldr	r3, [r7, #12]
    6748:	f003 0301 	and.w	r3, r3, #1
    674c:	2b00      	cmp	r3, #0
    674e:	d008      	beq.n	6762 <_sercom_i2c_m_irq_handler+0x8a>
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	699b      	ldr	r3, [r3, #24]
    6754:	2b00      	cmp	r3, #0
    6756:	d004      	beq.n	6762 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	699b      	ldr	r3, [r3, #24]
    675c:	6878      	ldr	r0, [r7, #4]
    675e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6760:	e02e      	b.n	67c0 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6762:	68fb      	ldr	r3, [r7, #12]
    6764:	f003 0302 	and.w	r3, r3, #2
    6768:	2b00      	cmp	r3, #0
    676a:	d029      	beq.n	67c0 <_sercom_i2c_m_irq_handler+0xe8>
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	69db      	ldr	r3, [r3, #28]
    6770:	2b00      	cmp	r3, #0
    6772:	d025      	beq.n	67c0 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	69db      	ldr	r3, [r3, #28]
    6778:	6878      	ldr	r0, [r7, #4]
    677a:	4798      	blx	r3
		return;
    677c:	e020      	b.n	67c0 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    677e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	885b      	ldrh	r3, [r3, #2]
    6784:	b29b      	uxth	r3, r3
    6786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    678a:	b29a      	uxth	r2, r3
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	695b      	ldr	r3, [r3, #20]
    6794:	2b00      	cmp	r3, #0
    6796:	d014      	beq.n	67c2 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6798:	697b      	ldr	r3, [r7, #20]
    679a:	2b00      	cmp	r3, #0
    679c:	d005      	beq.n	67aa <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	695b      	ldr	r3, [r3, #20]
    67a2:	6979      	ldr	r1, [r7, #20]
    67a4:	6878      	ldr	r0, [r7, #4]
    67a6:	4798      	blx	r3
    67a8:	e005      	b.n	67b6 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	695b      	ldr	r3, [r3, #20]
    67ae:	f06f 0104 	mvn.w	r1, #4
    67b2:	6878      	ldr	r0, [r7, #4]
    67b4:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    67b6:	2180      	movs	r1, #128	; 0x80
    67b8:	6938      	ldr	r0, [r7, #16]
    67ba:	4b07      	ldr	r3, [pc, #28]	; (67d8 <_sercom_i2c_m_irq_handler+0x100>)
    67bc:	4798      	blx	r3
    67be:	e000      	b.n	67c2 <_sercom_i2c_m_irq_handler+0xea>
		return;
    67c0:	bf00      	nop
	}
}
    67c2:	3718      	adds	r7, #24
    67c4:	46bd      	mov	sp, r7
    67c6:	bd80      	pop	{r7, pc}
    67c8:	00005dcd 	.word	0x00005dcd
    67cc:	0000f04c 	.word	0x0000f04c
    67d0:	000038fd 	.word	0x000038fd
    67d4:	000064a9 	.word	0x000064a9
    67d8:	00005de7 	.word	0x00005de7

000067dc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    67e4:	6878      	ldr	r0, [r7, #4]
    67e6:	4b05      	ldr	r3, [pc, #20]	; (67fc <_sercom_get_irq_num+0x20>)
    67e8:	4798      	blx	r3
    67ea:	4603      	mov	r3, r0
    67ec:	009b      	lsls	r3, r3, #2
    67ee:	b2db      	uxtb	r3, r3
    67f0:	332e      	adds	r3, #46	; 0x2e
    67f2:	b2db      	uxtb	r3, r3
}
    67f4:	4618      	mov	r0, r3
    67f6:	3708      	adds	r7, #8
    67f8:	46bd      	mov	sp, r7
    67fa:	bd80      	pop	{r7, pc}
    67fc:	00006375 	.word	0x00006375

00006800 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6800:	b580      	push	{r7, lr}
    6802:	b086      	sub	sp, #24
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
    6808:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	2b00      	cmp	r3, #0
    680e:	bf14      	ite	ne
    6810:	2301      	movne	r3, #1
    6812:	2300      	moveq	r3, #0
    6814:	b2db      	uxtb	r3, r3
    6816:	f240 429e 	movw	r2, #1182	; 0x49e
    681a:	491d      	ldr	r1, [pc, #116]	; (6890 <_i2c_m_async_init+0x90>)
    681c:	4618      	mov	r0, r3
    681e:	4b1d      	ldr	r3, [pc, #116]	; (6894 <_i2c_m_async_init+0x94>)
    6820:	4798      	blx	r3

	i2c_dev->hw = hw;
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	683a      	ldr	r2, [r7, #0]
    6826:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	6839      	ldr	r1, [r7, #0]
    682c:	4618      	mov	r0, r3
    682e:	4b1a      	ldr	r3, [pc, #104]	; (6898 <_i2c_m_async_init+0x98>)
    6830:	4798      	blx	r3
    6832:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6834:	68fb      	ldr	r3, [r7, #12]
    6836:	2b00      	cmp	r3, #0
    6838:	d001      	beq.n	683e <_i2c_m_async_init+0x3e>
		return init_status;
    683a:	68fb      	ldr	r3, [r7, #12]
    683c:	e024      	b.n	6888 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    683e:	6879      	ldr	r1, [r7, #4]
    6840:	6838      	ldr	r0, [r7, #0]
    6842:	4b16      	ldr	r3, [pc, #88]	; (689c <_i2c_m_async_init+0x9c>)
    6844:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6846:	6838      	ldr	r0, [r7, #0]
    6848:	4b15      	ldr	r3, [pc, #84]	; (68a0 <_i2c_m_async_init+0xa0>)
    684a:	4798      	blx	r3
    684c:	4603      	mov	r3, r0
    684e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6850:	2300      	movs	r3, #0
    6852:	613b      	str	r3, [r7, #16]
    6854:	e014      	b.n	6880 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6856:	7dfb      	ldrb	r3, [r7, #23]
    6858:	b21b      	sxth	r3, r3
    685a:	4618      	mov	r0, r3
    685c:	4b11      	ldr	r3, [pc, #68]	; (68a4 <_i2c_m_async_init+0xa4>)
    685e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6860:	7dfb      	ldrb	r3, [r7, #23]
    6862:	b21b      	sxth	r3, r3
    6864:	4618      	mov	r0, r3
    6866:	4b10      	ldr	r3, [pc, #64]	; (68a8 <_i2c_m_async_init+0xa8>)
    6868:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    686a:	7dfb      	ldrb	r3, [r7, #23]
    686c:	b21b      	sxth	r3, r3
    686e:	4618      	mov	r0, r3
    6870:	4b0e      	ldr	r3, [pc, #56]	; (68ac <_i2c_m_async_init+0xac>)
    6872:	4798      	blx	r3
		irq++;
    6874:	7dfb      	ldrb	r3, [r7, #23]
    6876:	3301      	adds	r3, #1
    6878:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    687a:	693b      	ldr	r3, [r7, #16]
    687c:	3301      	adds	r3, #1
    687e:	613b      	str	r3, [r7, #16]
    6880:	693b      	ldr	r3, [r7, #16]
    6882:	2b03      	cmp	r3, #3
    6884:	d9e7      	bls.n	6856 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6886:	2300      	movs	r3, #0
}
    6888:	4618      	mov	r0, r3
    688a:	3718      	adds	r7, #24
    688c:	46bd      	mov	sp, r7
    688e:	bd80      	pop	{r7, pc}
    6890:	0000f04c 	.word	0x0000f04c
    6894:	000038fd 	.word	0x000038fd
    6898:	00006ac9 	.word	0x00006ac9
    689c:	000063d1 	.word	0x000063d1
    68a0:	000067dd 	.word	0x000067dd
    68a4:	00005c81 	.word	0x00005c81
    68a8:	00005cc5 	.word	0x00005cc5
    68ac:	00005c45 	.word	0x00005c45

000068b0 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    68b0:	b590      	push	{r4, r7, lr}
    68b2:	b087      	sub	sp, #28
    68b4:	af00      	add	r7, sp, #0
    68b6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    68b8:	687b      	ldr	r3, [r7, #4]
    68ba:	691b      	ldr	r3, [r3, #16]
    68bc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    68c2:	6978      	ldr	r0, [r7, #20]
    68c4:	4b33      	ldr	r3, [pc, #204]	; (6994 <_sercom_i2c_send_address+0xe4>)
    68c6:	4798      	blx	r3
    68c8:	4603      	mov	r3, r0
    68ca:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	2b00      	cmp	r3, #0
    68d0:	bf14      	ite	ne
    68d2:	2301      	movne	r3, #1
    68d4:	2300      	moveq	r3, #0
    68d6:	b2db      	uxtb	r3, r3
    68d8:	f240 42cc 	movw	r2, #1228	; 0x4cc
    68dc:	492e      	ldr	r1, [pc, #184]	; (6998 <_sercom_i2c_send_address+0xe8>)
    68de:	4618      	mov	r0, r3
    68e0:	4b2e      	ldr	r3, [pc, #184]	; (699c <_sercom_i2c_send_address+0xec>)
    68e2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    68e4:	693b      	ldr	r3, [r7, #16]
    68e6:	685b      	ldr	r3, [r3, #4]
    68e8:	2b01      	cmp	r3, #1
    68ea:	d106      	bne.n	68fa <_sercom_i2c_send_address+0x4a>
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	2b00      	cmp	r3, #0
    68f0:	d003      	beq.n	68fa <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    68f2:	6978      	ldr	r0, [r7, #20]
    68f4:	4b2a      	ldr	r3, [pc, #168]	; (69a0 <_sercom_i2c_send_address+0xf0>)
    68f6:	4798      	blx	r3
    68f8:	e002      	b.n	6900 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    68fa:	6978      	ldr	r0, [r7, #20]
    68fc:	4b29      	ldr	r3, [pc, #164]	; (69a4 <_sercom_i2c_send_address+0xf4>)
    68fe:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6900:	693b      	ldr	r3, [r7, #16]
    6902:	881b      	ldrh	r3, [r3, #0]
    6904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6908:	2b00      	cmp	r3, #0
    690a:	d022      	beq.n	6952 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    690c:	693b      	ldr	r3, [r7, #16]
    690e:	885b      	ldrh	r3, [r3, #2]
    6910:	b29b      	uxth	r3, r3
    6912:	f003 0301 	and.w	r3, r3, #1
    6916:	2b00      	cmp	r3, #0
    6918:	d007      	beq.n	692a <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    691a:	693b      	ldr	r3, [r7, #16]
    691c:	885b      	ldrh	r3, [r3, #2]
    691e:	b29b      	uxth	r3, r3
    6920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6924:	b29a      	uxth	r2, r3
    6926:	693b      	ldr	r3, [r7, #16]
    6928:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    692a:	693b      	ldr	r3, [r7, #16]
    692c:	881b      	ldrh	r3, [r3, #0]
    692e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6930:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6934:	401c      	ands	r4, r3
    6936:	6978      	ldr	r0, [r7, #20]
    6938:	4b1b      	ldr	r3, [pc, #108]	; (69a8 <_sercom_i2c_send_address+0xf8>)
    693a:	4798      	blx	r3
    693c:	4603      	mov	r3, r0
    693e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6942:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6948:	4619      	mov	r1, r3
    694a:	6978      	ldr	r0, [r7, #20]
    694c:	4b17      	ldr	r3, [pc, #92]	; (69ac <_sercom_i2c_send_address+0xfc>)
    694e:	4798      	blx	r3
    6950:	e01a      	b.n	6988 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6952:	693b      	ldr	r3, [r7, #16]
    6954:	881b      	ldrh	r3, [r3, #0]
    6956:	005b      	lsls	r3, r3, #1
    6958:	b2db      	uxtb	r3, r3
    695a:	693a      	ldr	r2, [r7, #16]
    695c:	8852      	ldrh	r2, [r2, #2]
    695e:	b292      	uxth	r2, r2
    6960:	f002 0201 	and.w	r2, r2, #1
    6964:	2a00      	cmp	r2, #0
    6966:	bf14      	ite	ne
    6968:	2201      	movne	r2, #1
    696a:	2200      	moveq	r2, #0
    696c:	b2d2      	uxtb	r2, r2
    696e:	4313      	orrs	r3, r2
    6970:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6972:	6978      	ldr	r0, [r7, #20]
    6974:	4b0c      	ldr	r3, [pc, #48]	; (69a8 <_sercom_i2c_send_address+0xf8>)
    6976:	4798      	blx	r3
    6978:	4603      	mov	r3, r0
    697a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    697e:	4323      	orrs	r3, r4
    6980:	4619      	mov	r1, r3
    6982:	6978      	ldr	r0, [r7, #20]
    6984:	4b09      	ldr	r3, [pc, #36]	; (69ac <_sercom_i2c_send_address+0xfc>)
    6986:	4798      	blx	r3
	}

	return ERR_NONE;
    6988:	2300      	movs	r3, #0
}
    698a:	4618      	mov	r0, r3
    698c:	371c      	adds	r7, #28
    698e:	46bd      	mov	sp, r7
    6990:	bd90      	pop	{r4, r7, pc}
    6992:	bf00      	nop
    6994:	00005f45 	.word	0x00005f45
    6998:	0000f04c 	.word	0x0000f04c
    699c:	000038fd 	.word	0x000038fd
    69a0:	000060f5 	.word	0x000060f5
    69a4:	0000611d 	.word	0x0000611d
    69a8:	0000625d 	.word	0x0000625d
    69ac:	00006239 	.word	0x00006239

000069b0 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    69b0:	b580      	push	{r7, lr}
    69b2:	b084      	sub	sp, #16
    69b4:	af00      	add	r7, sp, #0
    69b6:	6078      	str	r0, [r7, #4]
    69b8:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    69ba:	687b      	ldr	r3, [r7, #4]
    69bc:	2b00      	cmp	r3, #0
    69be:	bf14      	ite	ne
    69c0:	2301      	movne	r3, #1
    69c2:	2300      	moveq	r3, #0
    69c4:	b2db      	uxtb	r3, r3
    69c6:	f240 42f4 	movw	r2, #1268	; 0x4f4
    69ca:	492a      	ldr	r1, [pc, #168]	; (6a74 <_i2c_m_async_transfer+0xc4>)
    69cc:	4618      	mov	r0, r3
    69ce:	4b2a      	ldr	r3, [pc, #168]	; (6a78 <_i2c_m_async_transfer+0xc8>)
    69d0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	691b      	ldr	r3, [r3, #16]
    69d6:	2b00      	cmp	r3, #0
    69d8:	bf14      	ite	ne
    69da:	2301      	movne	r3, #1
    69dc:	2300      	moveq	r3, #0
    69de:	b2db      	uxtb	r3, r3
    69e0:	f240 42f5 	movw	r2, #1269	; 0x4f5
    69e4:	4923      	ldr	r1, [pc, #140]	; (6a74 <_i2c_m_async_transfer+0xc4>)
    69e6:	4618      	mov	r0, r3
    69e8:	4b23      	ldr	r3, [pc, #140]	; (6a78 <_i2c_m_async_transfer+0xc8>)
    69ea:	4798      	blx	r3
	ASSERT(msg);
    69ec:	683b      	ldr	r3, [r7, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	bf14      	ite	ne
    69f2:	2301      	movne	r3, #1
    69f4:	2300      	moveq	r3, #0
    69f6:	b2db      	uxtb	r3, r3
    69f8:	f240 42f6 	movw	r2, #1270	; 0x4f6
    69fc:	491d      	ldr	r1, [pc, #116]	; (6a74 <_i2c_m_async_transfer+0xc4>)
    69fe:	4618      	mov	r0, r3
    6a00:	4b1d      	ldr	r3, [pc, #116]	; (6a78 <_i2c_m_async_transfer+0xc8>)
    6a02:	4798      	blx	r3

	if (msg->len == 0) {
    6a04:	683b      	ldr	r3, [r7, #0]
    6a06:	685b      	ldr	r3, [r3, #4]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d101      	bne.n	6a10 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6a0c:	2300      	movs	r3, #0
    6a0e:	e02d      	b.n	6a6c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	885b      	ldrh	r3, [r3, #2]
    6a14:	b29b      	uxth	r3, r3
    6a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d002      	beq.n	6a24 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6a1e:	f06f 0303 	mvn.w	r3, #3
    6a22:	e023      	b.n	6a6c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6a24:	683b      	ldr	r3, [r7, #0]
    6a26:	885b      	ldrh	r3, [r3, #2]
    6a28:	b29b      	uxth	r3, r3
    6a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6a2e:	b29a      	uxth	r2, r3
    6a30:	683b      	ldr	r3, [r7, #0]
    6a32:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6a34:	687b      	ldr	r3, [r7, #4]
    6a36:	683a      	ldr	r2, [r7, #0]
    6a38:	ca07      	ldmia	r2, {r0, r1, r2}
    6a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	691b      	ldr	r3, [r3, #16]
    6a42:	4618      	mov	r0, r3
    6a44:	4b0d      	ldr	r3, [pc, #52]	; (6a7c <_i2c_m_async_transfer+0xcc>)
    6a46:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6a48:	6878      	ldr	r0, [r7, #4]
    6a4a:	4b0d      	ldr	r3, [pc, #52]	; (6a80 <_i2c_m_async_transfer+0xd0>)
    6a4c:	4798      	blx	r3
    6a4e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6a50:	68fb      	ldr	r3, [r7, #12]
    6a52:	2b00      	cmp	r3, #0
    6a54:	d009      	beq.n	6a6a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	885b      	ldrh	r3, [r3, #2]
    6a5a:	b29b      	uxth	r3, r3
    6a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a60:	b29a      	uxth	r2, r3
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	805a      	strh	r2, [r3, #2]

		return ret;
    6a66:	68fb      	ldr	r3, [r7, #12]
    6a68:	e000      	b.n	6a6c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6a6a:	2300      	movs	r3, #0
}
    6a6c:	4618      	mov	r0, r3
    6a6e:	3710      	adds	r7, #16
    6a70:	46bd      	mov	sp, r7
    6a72:	bd80      	pop	{r7, pc}
    6a74:	0000f04c 	.word	0x0000f04c
    6a78:	000038fd 	.word	0x000038fd
    6a7c:	000060a5 	.word	0x000060a5
    6a80:	000068b1 	.word	0x000068b1

00006a84 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6a84:	b480      	push	{r7}
    6a86:	b085      	sub	sp, #20
    6a88:	af00      	add	r7, sp, #0
    6a8a:	60f8      	str	r0, [r7, #12]
    6a8c:	460b      	mov	r3, r1
    6a8e:	607a      	str	r2, [r7, #4]
    6a90:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6a92:	7afb      	ldrb	r3, [r7, #11]
    6a94:	2b01      	cmp	r3, #1
    6a96:	d008      	beq.n	6aaa <_i2c_m_async_register_callback+0x26>
    6a98:	2b02      	cmp	r3, #2
    6a9a:	d00a      	beq.n	6ab2 <_i2c_m_async_register_callback+0x2e>
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d000      	beq.n	6aa2 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6aa0:	e00b      	b.n	6aba <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6aa2:	68fb      	ldr	r3, [r7, #12]
    6aa4:	687a      	ldr	r2, [r7, #4]
    6aa6:	615a      	str	r2, [r3, #20]
		break;
    6aa8:	e007      	b.n	6aba <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6aaa:	68fb      	ldr	r3, [r7, #12]
    6aac:	687a      	ldr	r2, [r7, #4]
    6aae:	619a      	str	r2, [r3, #24]
		break;
    6ab0:	e003      	b.n	6aba <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6ab2:	68fb      	ldr	r3, [r7, #12]
    6ab4:	687a      	ldr	r2, [r7, #4]
    6ab6:	61da      	str	r2, [r3, #28]
		break;
    6ab8:	bf00      	nop
	}

	return ERR_NONE;
    6aba:	2300      	movs	r3, #0
}
    6abc:	4618      	mov	r0, r3
    6abe:	3714      	adds	r7, #20
    6ac0:	46bd      	mov	sp, r7
    6ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ac6:	4770      	bx	lr

00006ac8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6ac8:	b580      	push	{r7, lr}
    6aca:	b084      	sub	sp, #16
    6acc:	af00      	add	r7, sp, #0
    6ace:	6078      	str	r0, [r7, #4]
    6ad0:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6ad2:	6838      	ldr	r0, [r7, #0]
    6ad4:	4b42      	ldr	r3, [pc, #264]	; (6be0 <_i2c_m_sync_init_impl+0x118>)
    6ad6:	4798      	blx	r3
    6ad8:	4603      	mov	r3, r0
    6ada:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6adc:	2101      	movs	r1, #1
    6ade:	6838      	ldr	r0, [r7, #0]
    6ae0:	4b40      	ldr	r3, [pc, #256]	; (6be4 <_i2c_m_sync_init_impl+0x11c>)
    6ae2:	4798      	blx	r3
    6ae4:	4603      	mov	r3, r0
    6ae6:	f083 0301 	eor.w	r3, r3, #1
    6aea:	b2db      	uxtb	r3, r3
    6aec:	2b00      	cmp	r3, #0
    6aee:	d020      	beq.n	6b32 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6af0:	7bfa      	ldrb	r2, [r7, #15]
    6af2:	493d      	ldr	r1, [pc, #244]	; (6be8 <_i2c_m_sync_init_impl+0x120>)
    6af4:	4613      	mov	r3, r2
    6af6:	005b      	lsls	r3, r3, #1
    6af8:	4413      	add	r3, r2
    6afa:	00db      	lsls	r3, r3, #3
    6afc:	440b      	add	r3, r1
    6afe:	3304      	adds	r3, #4
    6b00:	681b      	ldr	r3, [r3, #0]
    6b02:	f003 031c 	and.w	r3, r3, #28
    6b06:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6b08:	2102      	movs	r1, #2
    6b0a:	6838      	ldr	r0, [r7, #0]
    6b0c:	4b37      	ldr	r3, [pc, #220]	; (6bec <_i2c_m_sync_init_impl+0x124>)
    6b0e:	4798      	blx	r3
    6b10:	4603      	mov	r3, r0
    6b12:	2b00      	cmp	r3, #0
    6b14:	d006      	beq.n	6b24 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6b16:	6838      	ldr	r0, [r7, #0]
    6b18:	4b35      	ldr	r3, [pc, #212]	; (6bf0 <_i2c_m_sync_init_impl+0x128>)
    6b1a:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b1c:	2102      	movs	r1, #2
    6b1e:	6838      	ldr	r0, [r7, #0]
    6b20:	4b34      	ldr	r3, [pc, #208]	; (6bf4 <_i2c_m_sync_init_impl+0x12c>)
    6b22:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6b24:	68bb      	ldr	r3, [r7, #8]
    6b26:	f043 0301 	orr.w	r3, r3, #1
    6b2a:	4619      	mov	r1, r3
    6b2c:	6838      	ldr	r0, [r7, #0]
    6b2e:	4b32      	ldr	r3, [pc, #200]	; (6bf8 <_i2c_m_sync_init_impl+0x130>)
    6b30:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6b32:	2101      	movs	r1, #1
    6b34:	6838      	ldr	r0, [r7, #0]
    6b36:	4b2f      	ldr	r3, [pc, #188]	; (6bf4 <_i2c_m_sync_init_impl+0x12c>)
    6b38:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6b3a:	7bfa      	ldrb	r2, [r7, #15]
    6b3c:	492a      	ldr	r1, [pc, #168]	; (6be8 <_i2c_m_sync_init_impl+0x120>)
    6b3e:	4613      	mov	r3, r2
    6b40:	005b      	lsls	r3, r3, #1
    6b42:	4413      	add	r3, r2
    6b44:	00db      	lsls	r3, r3, #3
    6b46:	440b      	add	r3, r1
    6b48:	3304      	adds	r3, #4
    6b4a:	681b      	ldr	r3, [r3, #0]
    6b4c:	4619      	mov	r1, r3
    6b4e:	6838      	ldr	r0, [r7, #0]
    6b50:	4b29      	ldr	r3, [pc, #164]	; (6bf8 <_i2c_m_sync_init_impl+0x130>)
    6b52:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6b54:	7bfa      	ldrb	r2, [r7, #15]
    6b56:	4924      	ldr	r1, [pc, #144]	; (6be8 <_i2c_m_sync_init_impl+0x120>)
    6b58:	4613      	mov	r3, r2
    6b5a:	005b      	lsls	r3, r3, #1
    6b5c:	4413      	add	r3, r2
    6b5e:	00db      	lsls	r3, r3, #3
    6b60:	440b      	add	r3, r1
    6b62:	3308      	adds	r3, #8
    6b64:	681b      	ldr	r3, [r3, #0]
    6b66:	4619      	mov	r1, r3
    6b68:	6838      	ldr	r0, [r7, #0]
    6b6a:	4b24      	ldr	r3, [pc, #144]	; (6bfc <_i2c_m_sync_init_impl+0x134>)
    6b6c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6b6e:	7bfa      	ldrb	r2, [r7, #15]
    6b70:	491d      	ldr	r1, [pc, #116]	; (6be8 <_i2c_m_sync_init_impl+0x120>)
    6b72:	4613      	mov	r3, r2
    6b74:	005b      	lsls	r3, r3, #1
    6b76:	4413      	add	r3, r2
    6b78:	00db      	lsls	r3, r3, #3
    6b7a:	440b      	add	r3, r1
    6b7c:	330c      	adds	r3, #12
    6b7e:	681b      	ldr	r3, [r3, #0]
    6b80:	4619      	mov	r1, r3
    6b82:	6838      	ldr	r0, [r7, #0]
    6b84:	4b1e      	ldr	r3, [pc, #120]	; (6c00 <_i2c_m_sync_init_impl+0x138>)
    6b86:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6b88:	7bfa      	ldrb	r2, [r7, #15]
    6b8a:	4917      	ldr	r1, [pc, #92]	; (6be8 <_i2c_m_sync_init_impl+0x120>)
    6b8c:	4613      	mov	r3, r2
    6b8e:	005b      	lsls	r3, r3, #1
    6b90:	4413      	add	r3, r2
    6b92:	00db      	lsls	r3, r3, #3
    6b94:	440b      	add	r3, r1
    6b96:	3304      	adds	r3, #4
    6b98:	681b      	ldr	r3, [r3, #0]
    6b9a:	0e1b      	lsrs	r3, r3, #24
    6b9c:	b29b      	uxth	r3, r3
    6b9e:	f003 0303 	and.w	r3, r3, #3
    6ba2:	b29a      	uxth	r2, r3
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	899b      	ldrh	r3, [r3, #12]
    6bac:	2b01      	cmp	r3, #1
    6bae:	bf8c      	ite	hi
    6bb0:	2301      	movhi	r3, #1
    6bb2:	2300      	movls	r3, #0
    6bb4:	b2db      	uxtb	r3, r3
    6bb6:	4619      	mov	r1, r3
    6bb8:	6838      	ldr	r0, [r7, #0]
    6bba:	4b12      	ldr	r3, [pc, #72]	; (6c04 <_i2c_m_sync_init_impl+0x13c>)
    6bbc:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6bbe:	7bfa      	ldrb	r2, [r7, #15]
    6bc0:	4909      	ldr	r1, [pc, #36]	; (6be8 <_i2c_m_sync_init_impl+0x120>)
    6bc2:	4613      	mov	r3, r2
    6bc4:	005b      	lsls	r3, r3, #1
    6bc6:	4413      	add	r3, r2
    6bc8:	00db      	lsls	r3, r3, #3
    6bca:	440b      	add	r3, r1
    6bcc:	3312      	adds	r3, #18
    6bce:	881a      	ldrh	r2, [r3, #0]
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6bd4:	2300      	movs	r3, #0
}
    6bd6:	4618      	mov	r0, r3
    6bd8:	3710      	adds	r7, #16
    6bda:	46bd      	mov	sp, r7
    6bdc:	bd80      	pop	{r7, pc}
    6bde:	bf00      	nop
    6be0:	00006425 	.word	0x00006425
    6be4:	00005d25 	.word	0x00005d25
    6be8:	20000018 	.word	0x20000018
    6bec:	00005f75 	.word	0x00005f75
    6bf0:	00005f1d 	.word	0x00005f1d
    6bf4:	00005d01 	.word	0x00005d01
    6bf8:	00005fa5 	.word	0x00005fa5
    6bfc:	00006175 	.word	0x00006175
    6c00:	000061bd 	.word	0x000061bd
    6c04:	000061f9 	.word	0x000061f9

00006c08 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	b082      	sub	sp, #8
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c10:	2101      	movs	r1, #1
    6c12:	6878      	ldr	r0, [r7, #4]
    6c14:	4b07      	ldr	r3, [pc, #28]	; (6c34 <_spi_sync_enable+0x2c>)
    6c16:	4798      	blx	r3
    6c18:	4603      	mov	r3, r0
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d002      	beq.n	6c24 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    6c1e:	f06f 0303 	mvn.w	r3, #3
    6c22:	e003      	b.n	6c2c <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    6c24:	6878      	ldr	r0, [r7, #4]
    6c26:	4b04      	ldr	r3, [pc, #16]	; (6c38 <_spi_sync_enable+0x30>)
    6c28:	4798      	blx	r3

	return ERR_NONE;
    6c2a:	2300      	movs	r3, #0
}
    6c2c:	4618      	mov	r0, r3
    6c2e:	3708      	adds	r7, #8
    6c30:	46bd      	mov	sp, r7
    6c32:	bd80      	pop	{r7, pc}
    6c34:	00005d71 	.word	0x00005d71
    6c38:	00005fc9 	.word	0x00005fc9

00006c3c <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	b082      	sub	sp, #8
    6c40:	af00      	add	r7, sp, #0
    6c42:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c44:	2101      	movs	r1, #1
    6c46:	6878      	ldr	r0, [r7, #4]
    6c48:	4b07      	ldr	r3, [pc, #28]	; (6c68 <_spi_sync_disable+0x2c>)
    6c4a:	4798      	blx	r3
    6c4c:	4603      	mov	r3, r0
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d002      	beq.n	6c58 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    6c52:	f06f 0303 	mvn.w	r3, #3
    6c56:	e003      	b.n	6c60 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6c58:	6878      	ldr	r0, [r7, #4]
    6c5a:	4b04      	ldr	r3, [pc, #16]	; (6c6c <_spi_sync_disable+0x30>)
    6c5c:	4798      	blx	r3

	return ERR_NONE;
    6c5e:	2300      	movs	r3, #0
}
    6c60:	4618      	mov	r0, r3
    6c62:	3708      	adds	r7, #8
    6c64:	46bd      	mov	sp, r7
    6c66:	bd80      	pop	{r7, pc}
    6c68:	00005d71 	.word	0x00005d71
    6c6c:	00006029 	.word	0x00006029

00006c70 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b082      	sub	sp, #8
    6c74:	af00      	add	r7, sp, #0
    6c76:	6078      	str	r0, [r7, #4]
    6c78:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d004      	beq.n	6c8a <_spi_load_regs_master+0x1a>
    6c80:	683b      	ldr	r3, [r7, #0]
    6c82:	2b00      	cmp	r3, #0
    6c84:	d001      	beq.n	6c8a <_spi_load_regs_master+0x1a>
    6c86:	2301      	movs	r3, #1
    6c88:	e000      	b.n	6c8c <_spi_load_regs_master+0x1c>
    6c8a:	2300      	movs	r3, #0
    6c8c:	f003 0301 	and.w	r3, r3, #1
    6c90:	b2db      	uxtb	r3, r3
    6c92:	f640 1245 	movw	r2, #2373	; 0x945
    6c96:	4915      	ldr	r1, [pc, #84]	; (6cec <_spi_load_regs_master+0x7c>)
    6c98:	4618      	mov	r0, r3
    6c9a:	4b15      	ldr	r3, [pc, #84]	; (6cf0 <_spi_load_regs_master+0x80>)
    6c9c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6c9e:	683b      	ldr	r3, [r7, #0]
    6ca0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6ca2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6ca6:	f023 0301 	bic.w	r3, r3, #1
    6caa:	4619      	mov	r1, r3
    6cac:	6878      	ldr	r0, [r7, #4]
    6cae:	4b11      	ldr	r3, [pc, #68]	; (6cf4 <_spi_load_regs_master+0x84>)
    6cb0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6cb2:	683b      	ldr	r3, [r7, #0]
    6cb4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6cb6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6cba:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6cc2:	4619      	mov	r1, r3
    6cc4:	6878      	ldr	r0, [r7, #4]
    6cc6:	4b0c      	ldr	r3, [pc, #48]	; (6cf8 <_spi_load_regs_master+0x88>)
    6cc8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6cca:	683b      	ldr	r3, [r7, #0]
    6ccc:	7b1b      	ldrb	r3, [r3, #12]
    6cce:	4619      	mov	r1, r3
    6cd0:	6878      	ldr	r0, [r7, #4]
    6cd2:	4b0a      	ldr	r3, [pc, #40]	; (6cfc <_spi_load_regs_master+0x8c>)
    6cd4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6cd6:	683b      	ldr	r3, [r7, #0]
    6cd8:	7b5b      	ldrb	r3, [r3, #13]
    6cda:	4619      	mov	r1, r3
    6cdc:	6878      	ldr	r0, [r7, #4]
    6cde:	4b08      	ldr	r3, [pc, #32]	; (6d00 <_spi_load_regs_master+0x90>)
    6ce0:	4798      	blx	r3
}
    6ce2:	bf00      	nop
    6ce4:	3708      	adds	r7, #8
    6ce6:	46bd      	mov	sp, r7
    6ce8:	bd80      	pop	{r7, pc}
    6cea:	bf00      	nop
    6cec:	0000f04c 	.word	0x0000f04c
    6cf0:	000038fd 	.word	0x000038fd
    6cf4:	00006081 	.word	0x00006081
    6cf8:	00006199 	.word	0x00006199
    6cfc:	000061d9 	.word	0x000061d9
    6d00:	00006311 	.word	0x00006311

00006d04 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6d04:	b580      	push	{r7, lr}
    6d06:	b082      	sub	sp, #8
    6d08:	af00      	add	r7, sp, #0
    6d0a:	6078      	str	r0, [r7, #4]
    6d0c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6d0e:	687b      	ldr	r3, [r7, #4]
    6d10:	2b00      	cmp	r3, #0
    6d12:	d004      	beq.n	6d1e <_spi_load_regs_slave+0x1a>
    6d14:	683b      	ldr	r3, [r7, #0]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d001      	beq.n	6d1e <_spi_load_regs_slave+0x1a>
    6d1a:	2301      	movs	r3, #1
    6d1c:	e000      	b.n	6d20 <_spi_load_regs_slave+0x1c>
    6d1e:	2300      	movs	r3, #0
    6d20:	f003 0301 	and.w	r3, r3, #1
    6d24:	b2db      	uxtb	r3, r3
    6d26:	f640 1259 	movw	r2, #2393	; 0x959
    6d2a:	491a      	ldr	r1, [pc, #104]	; (6d94 <_spi_load_regs_slave+0x90>)
    6d2c:	4618      	mov	r0, r3
    6d2e:	4b1a      	ldr	r3, [pc, #104]	; (6d98 <_spi_load_regs_slave+0x94>)
    6d30:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d32:	683b      	ldr	r3, [r7, #0]
    6d34:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d36:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d3a:	f023 0301 	bic.w	r3, r3, #1
    6d3e:	4619      	mov	r1, r3
    6d40:	6878      	ldr	r0, [r7, #4]
    6d42:	4b16      	ldr	r3, [pc, #88]	; (6d9c <_spi_load_regs_slave+0x98>)
    6d44:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6d46:	683b      	ldr	r3, [r7, #0]
    6d48:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6d4a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d4e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d56:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6d5a:	4619      	mov	r1, r3
    6d5c:	6878      	ldr	r0, [r7, #4]
    6d5e:	4b10      	ldr	r3, [pc, #64]	; (6da0 <_spi_load_regs_slave+0x9c>)
    6d60:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6d62:	683b      	ldr	r3, [r7, #0]
    6d64:	689b      	ldr	r3, [r3, #8]
    6d66:	4619      	mov	r1, r3
    6d68:	6878      	ldr	r0, [r7, #4]
    6d6a:	4b0e      	ldr	r3, [pc, #56]	; (6da4 <_spi_load_regs_slave+0xa0>)
    6d6c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d6e:	683b      	ldr	r3, [r7, #0]
    6d70:	7b5b      	ldrb	r3, [r3, #13]
    6d72:	4619      	mov	r1, r3
    6d74:	6878      	ldr	r0, [r7, #4]
    6d76:	4b0c      	ldr	r3, [pc, #48]	; (6da8 <_spi_load_regs_slave+0xa4>)
    6d78:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6d7a:	bf00      	nop
    6d7c:	f04f 31ff 	mov.w	r1, #4294967295
    6d80:	6878      	ldr	r0, [r7, #4]
    6d82:	4b0a      	ldr	r3, [pc, #40]	; (6dac <_spi_load_regs_slave+0xa8>)
    6d84:	4798      	blx	r3
    6d86:	4603      	mov	r3, r0
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d1f7      	bne.n	6d7c <_spi_load_regs_slave+0x78>
		;
}
    6d8c:	bf00      	nop
    6d8e:	3708      	adds	r7, #8
    6d90:	46bd      	mov	sp, r7
    6d92:	bd80      	pop	{r7, pc}
    6d94:	0000f04c 	.word	0x0000f04c
    6d98:	000038fd 	.word	0x000038fd
    6d9c:	00006081 	.word	0x00006081
    6da0:	00006199 	.word	0x00006199
    6da4:	0000627d 	.word	0x0000627d
    6da8:	00006311 	.word	0x00006311
    6dac:	00005d71 	.word	0x00005d71

00006db0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6db0:	b580      	push	{r7, lr}
    6db2:	b084      	sub	sp, #16
    6db4:	af00      	add	r7, sp, #0
    6db6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	4618      	mov	r0, r3
    6dbc:	4b11      	ldr	r3, [pc, #68]	; (6e04 <_spi_get_regs+0x54>)
    6dbe:	4798      	blx	r3
    6dc0:	4603      	mov	r3, r0
    6dc2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6dc4:	2300      	movs	r3, #0
    6dc6:	73fb      	strb	r3, [r7, #15]
    6dc8:	e014      	b.n	6df4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6dca:	7bfa      	ldrb	r2, [r7, #15]
    6dcc:	490e      	ldr	r1, [pc, #56]	; (6e08 <_spi_get_regs+0x58>)
    6dce:	4613      	mov	r3, r2
    6dd0:	011b      	lsls	r3, r3, #4
    6dd2:	4413      	add	r3, r2
    6dd4:	440b      	add	r3, r1
    6dd6:	3310      	adds	r3, #16
    6dd8:	781b      	ldrb	r3, [r3, #0]
    6dda:	7bba      	ldrb	r2, [r7, #14]
    6ddc:	429a      	cmp	r2, r3
    6dde:	d106      	bne.n	6dee <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6de0:	7bfa      	ldrb	r2, [r7, #15]
    6de2:	4613      	mov	r3, r2
    6de4:	011b      	lsls	r3, r3, #4
    6de6:	4413      	add	r3, r2
    6de8:	4a07      	ldr	r2, [pc, #28]	; (6e08 <_spi_get_regs+0x58>)
    6dea:	4413      	add	r3, r2
    6dec:	e006      	b.n	6dfc <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6dee:	7bfb      	ldrb	r3, [r7, #15]
    6df0:	3301      	adds	r3, #1
    6df2:	73fb      	strb	r3, [r7, #15]
    6df4:	7bfb      	ldrb	r3, [r7, #15]
    6df6:	2b02      	cmp	r3, #2
    6df8:	d9e7      	bls.n	6dca <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6dfa:	2300      	movs	r3, #0
}
    6dfc:	4618      	mov	r0, r3
    6dfe:	3710      	adds	r7, #16
    6e00:	46bd      	mov	sp, r7
    6e02:	bd80      	pop	{r7, pc}
    6e04:	00006375 	.word	0x00006375
    6e08:	0000f088 	.word	0x0000f088

00006e0c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6e0c:	b580      	push	{r7, lr}
    6e0e:	b084      	sub	sp, #16
    6e10:	af00      	add	r7, sp, #0
    6e12:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	681b      	ldr	r3, [r3, #0]
    6e18:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    6e1a:	68f8      	ldr	r0, [r7, #12]
    6e1c:	4b21      	ldr	r3, [pc, #132]	; (6ea4 <_spi_handler+0x98>)
    6e1e:	4798      	blx	r3
    6e20:	4603      	mov	r3, r0
    6e22:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6e24:	68f8      	ldr	r0, [r7, #12]
    6e26:	4b20      	ldr	r3, [pc, #128]	; (6ea8 <_spi_handler+0x9c>)
    6e28:	4798      	blx	r3
    6e2a:	4603      	mov	r3, r0
    6e2c:	461a      	mov	r2, r3
    6e2e:	7afb      	ldrb	r3, [r7, #11]
    6e30:	4013      	ands	r3, r2
    6e32:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6e34:	7afb      	ldrb	r3, [r7, #11]
    6e36:	f003 0301 	and.w	r3, r3, #1
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d004      	beq.n	6e48 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    6e3e:	687b      	ldr	r3, [r7, #4]
    6e40:	689b      	ldr	r3, [r3, #8]
    6e42:	6878      	ldr	r0, [r7, #4]
    6e44:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6e46:	e029      	b.n	6e9c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6e48:	7afb      	ldrb	r3, [r7, #11]
    6e4a:	f003 0304 	and.w	r3, r3, #4
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d004      	beq.n	6e5c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	68db      	ldr	r3, [r3, #12]
    6e56:	6878      	ldr	r0, [r7, #4]
    6e58:	4798      	blx	r3
}
    6e5a:	e01f      	b.n	6e9c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6e5c:	7afb      	ldrb	r3, [r7, #11]
    6e5e:	f003 0302 	and.w	r3, r3, #2
    6e62:	2b00      	cmp	r3, #0
    6e64:	d008      	beq.n	6e78 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    6e66:	2102      	movs	r1, #2
    6e68:	68f8      	ldr	r0, [r7, #12]
    6e6a:	4b10      	ldr	r3, [pc, #64]	; (6eac <_spi_handler+0xa0>)
    6e6c:	4798      	blx	r3
		dev->callbacks.complete(dev);
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	691b      	ldr	r3, [r3, #16]
    6e72:	6878      	ldr	r0, [r7, #4]
    6e74:	4798      	blx	r3
}
    6e76:	e011      	b.n	6e9c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6e78:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	da0d      	bge.n	6e9c <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    6e80:	2104      	movs	r1, #4
    6e82:	68f8      	ldr	r0, [r7, #12]
    6e84:	4b0a      	ldr	r3, [pc, #40]	; (6eb0 <_spi_handler+0xa4>)
    6e86:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6e88:	2180      	movs	r1, #128	; 0x80
    6e8a:	68f8      	ldr	r0, [r7, #12]
    6e8c:	4b07      	ldr	r3, [pc, #28]	; (6eac <_spi_handler+0xa0>)
    6e8e:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6e90:	687b      	ldr	r3, [r7, #4]
    6e92:	695b      	ldr	r3, [r3, #20]
    6e94:	f06f 0112 	mvn.w	r1, #18
    6e98:	6878      	ldr	r0, [r7, #4]
    6e9a:	4798      	blx	r3
}
    6e9c:	bf00      	nop
    6e9e:	3710      	adds	r7, #16
    6ea0:	46bd      	mov	sp, r7
    6ea2:	bd80      	pop	{r7, pc}
    6ea4:	00005e2d 	.word	0x00005e2d
    6ea8:	00005f01 	.word	0x00005f01
    6eac:	00005e47 	.word	0x00005e47
    6eb0:	00006331 	.word	0x00006331

00006eb4 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    6eb4:	b580      	push	{r7, lr}
    6eb6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6eb8:	4b03      	ldr	r3, [pc, #12]	; (6ec8 <SERCOM4_0_Handler+0x14>)
    6eba:	681b      	ldr	r3, [r3, #0]
    6ebc:	4618      	mov	r0, r3
    6ebe:	4b03      	ldr	r3, [pc, #12]	; (6ecc <SERCOM4_0_Handler+0x18>)
    6ec0:	4798      	blx	r3
}
    6ec2:	bf00      	nop
    6ec4:	bd80      	pop	{r7, pc}
    6ec6:	bf00      	nop
    6ec8:	200006f4 	.word	0x200006f4
    6ecc:	00006e0d 	.word	0x00006e0d

00006ed0 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    6ed0:	b580      	push	{r7, lr}
    6ed2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6ed4:	4b03      	ldr	r3, [pc, #12]	; (6ee4 <SERCOM4_1_Handler+0x14>)
    6ed6:	681b      	ldr	r3, [r3, #0]
    6ed8:	4618      	mov	r0, r3
    6eda:	4b03      	ldr	r3, [pc, #12]	; (6ee8 <SERCOM4_1_Handler+0x18>)
    6edc:	4798      	blx	r3
}
    6ede:	bf00      	nop
    6ee0:	bd80      	pop	{r7, pc}
    6ee2:	bf00      	nop
    6ee4:	200006f4 	.word	0x200006f4
    6ee8:	00006e0d 	.word	0x00006e0d

00006eec <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    6eec:	b580      	push	{r7, lr}
    6eee:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6ef0:	4b03      	ldr	r3, [pc, #12]	; (6f00 <SERCOM4_2_Handler+0x14>)
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	4618      	mov	r0, r3
    6ef6:	4b03      	ldr	r3, [pc, #12]	; (6f04 <SERCOM4_2_Handler+0x18>)
    6ef8:	4798      	blx	r3
}
    6efa:	bf00      	nop
    6efc:	bd80      	pop	{r7, pc}
    6efe:	bf00      	nop
    6f00:	200006f4 	.word	0x200006f4
    6f04:	00006e0d 	.word	0x00006e0d

00006f08 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6f0c:	4b03      	ldr	r3, [pc, #12]	; (6f1c <SERCOM4_3_Handler+0x14>)
    6f0e:	681b      	ldr	r3, [r3, #0]
    6f10:	4618      	mov	r0, r3
    6f12:	4b03      	ldr	r3, [pc, #12]	; (6f20 <SERCOM4_3_Handler+0x18>)
    6f14:	4798      	blx	r3
}
    6f16:	bf00      	nop
    6f18:	bd80      	pop	{r7, pc}
    6f1a:	bf00      	nop
    6f1c:	200006f4 	.word	0x200006f4
    6f20:	00006e0d 	.word	0x00006e0d

00006f24 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6f28:	4b03      	ldr	r3, [pc, #12]	; (6f38 <SERCOM5_0_Handler+0x14>)
    6f2a:	681b      	ldr	r3, [r3, #0]
    6f2c:	4618      	mov	r0, r3
    6f2e:	4b03      	ldr	r3, [pc, #12]	; (6f3c <SERCOM5_0_Handler+0x18>)
    6f30:	4798      	blx	r3
}
    6f32:	bf00      	nop
    6f34:	bd80      	pop	{r7, pc}
    6f36:	bf00      	nop
    6f38:	200006f8 	.word	0x200006f8
    6f3c:	000066d9 	.word	0x000066d9

00006f40 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6f44:	4b03      	ldr	r3, [pc, #12]	; (6f54 <SERCOM5_1_Handler+0x14>)
    6f46:	681b      	ldr	r3, [r3, #0]
    6f48:	4618      	mov	r0, r3
    6f4a:	4b03      	ldr	r3, [pc, #12]	; (6f58 <SERCOM5_1_Handler+0x18>)
    6f4c:	4798      	blx	r3
}
    6f4e:	bf00      	nop
    6f50:	bd80      	pop	{r7, pc}
    6f52:	bf00      	nop
    6f54:	200006f8 	.word	0x200006f8
    6f58:	000066d9 	.word	0x000066d9

00006f5c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6f5c:	b580      	push	{r7, lr}
    6f5e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6f60:	4b03      	ldr	r3, [pc, #12]	; (6f70 <SERCOM5_2_Handler+0x14>)
    6f62:	681b      	ldr	r3, [r3, #0]
    6f64:	4618      	mov	r0, r3
    6f66:	4b03      	ldr	r3, [pc, #12]	; (6f74 <SERCOM5_2_Handler+0x18>)
    6f68:	4798      	blx	r3
}
    6f6a:	bf00      	nop
    6f6c:	bd80      	pop	{r7, pc}
    6f6e:	bf00      	nop
    6f70:	200006f8 	.word	0x200006f8
    6f74:	000066d9 	.word	0x000066d9

00006f78 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6f78:	b580      	push	{r7, lr}
    6f7a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6f7c:	4b03      	ldr	r3, [pc, #12]	; (6f8c <SERCOM5_3_Handler+0x14>)
    6f7e:	681b      	ldr	r3, [r3, #0]
    6f80:	4618      	mov	r0, r3
    6f82:	4b03      	ldr	r3, [pc, #12]	; (6f90 <SERCOM5_3_Handler+0x18>)
    6f84:	4798      	blx	r3
}
    6f86:	bf00      	nop
    6f88:	bd80      	pop	{r7, pc}
    6f8a:	bf00      	nop
    6f8c:	200006f8 	.word	0x200006f8
    6f90:	000066d9 	.word	0x000066d9

00006f94 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6f94:	b580      	push	{r7, lr}
    6f96:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6f98:	4b03      	ldr	r3, [pc, #12]	; (6fa8 <SERCOM7_0_Handler+0x14>)
    6f9a:	681b      	ldr	r3, [r3, #0]
    6f9c:	4618      	mov	r0, r3
    6f9e:	4b03      	ldr	r3, [pc, #12]	; (6fac <SERCOM7_0_Handler+0x18>)
    6fa0:	4798      	blx	r3
}
    6fa2:	bf00      	nop
    6fa4:	bd80      	pop	{r7, pc}
    6fa6:	bf00      	nop
    6fa8:	200006fc 	.word	0x200006fc
    6fac:	000066d9 	.word	0x000066d9

00006fb0 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6fb4:	4b03      	ldr	r3, [pc, #12]	; (6fc4 <SERCOM7_1_Handler+0x14>)
    6fb6:	681b      	ldr	r3, [r3, #0]
    6fb8:	4618      	mov	r0, r3
    6fba:	4b03      	ldr	r3, [pc, #12]	; (6fc8 <SERCOM7_1_Handler+0x18>)
    6fbc:	4798      	blx	r3
}
    6fbe:	bf00      	nop
    6fc0:	bd80      	pop	{r7, pc}
    6fc2:	bf00      	nop
    6fc4:	200006fc 	.word	0x200006fc
    6fc8:	000066d9 	.word	0x000066d9

00006fcc <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    6fcc:	b580      	push	{r7, lr}
    6fce:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6fd0:	4b03      	ldr	r3, [pc, #12]	; (6fe0 <SERCOM7_2_Handler+0x14>)
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	4618      	mov	r0, r3
    6fd6:	4b03      	ldr	r3, [pc, #12]	; (6fe4 <SERCOM7_2_Handler+0x18>)
    6fd8:	4798      	blx	r3
}
    6fda:	bf00      	nop
    6fdc:	bd80      	pop	{r7, pc}
    6fde:	bf00      	nop
    6fe0:	200006fc 	.word	0x200006fc
    6fe4:	000066d9 	.word	0x000066d9

00006fe8 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6fe8:	b580      	push	{r7, lr}
    6fea:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6fec:	4b03      	ldr	r3, [pc, #12]	; (6ffc <SERCOM7_3_Handler+0x14>)
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	4618      	mov	r0, r3
    6ff2:	4b03      	ldr	r3, [pc, #12]	; (7000 <SERCOM7_3_Handler+0x18>)
    6ff4:	4798      	blx	r3
}
    6ff6:	bf00      	nop
    6ff8:	bd80      	pop	{r7, pc}
    6ffa:	bf00      	nop
    6ffc:	200006fc 	.word	0x200006fc
    7000:	000066d9 	.word	0x000066d9

00007004 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7004:	b580      	push	{r7, lr}
    7006:	b084      	sub	sp, #16
    7008:	af00      	add	r7, sp, #0
    700a:	6078      	str	r0, [r7, #4]
    700c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    700e:	683b      	ldr	r3, [r7, #0]
    7010:	4618      	mov	r0, r3
    7012:	4b35      	ldr	r3, [pc, #212]	; (70e8 <_spi_m_sync_init+0xe4>)
    7014:	4798      	blx	r3
    7016:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	2b00      	cmp	r3, #0
    701c:	d004      	beq.n	7028 <_spi_m_sync_init+0x24>
    701e:	683b      	ldr	r3, [r7, #0]
    7020:	2b00      	cmp	r3, #0
    7022:	d001      	beq.n	7028 <_spi_m_sync_init+0x24>
    7024:	2301      	movs	r3, #1
    7026:	e000      	b.n	702a <_spi_m_sync_init+0x26>
    7028:	2300      	movs	r3, #0
    702a:	f003 0301 	and.w	r3, r3, #1
    702e:	b2db      	uxtb	r3, r3
    7030:	f640 12ec 	movw	r2, #2540	; 0x9ec
    7034:	492d      	ldr	r1, [pc, #180]	; (70ec <_spi_m_sync_init+0xe8>)
    7036:	4618      	mov	r0, r3
    7038:	4b2d      	ldr	r3, [pc, #180]	; (70f0 <_spi_m_sync_init+0xec>)
    703a:	4798      	blx	r3

	if (regs == NULL) {
    703c:	68fb      	ldr	r3, [r7, #12]
    703e:	2b00      	cmp	r3, #0
    7040:	d102      	bne.n	7048 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7042:	f06f 030c 	mvn.w	r3, #12
    7046:	e04a      	b.n	70de <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7048:	2101      	movs	r1, #1
    704a:	6838      	ldr	r0, [r7, #0]
    704c:	4b29      	ldr	r3, [pc, #164]	; (70f4 <_spi_m_sync_init+0xf0>)
    704e:	4798      	blx	r3
    7050:	4603      	mov	r3, r0
    7052:	f083 0301 	eor.w	r3, r3, #1
    7056:	b2db      	uxtb	r3, r3
    7058:	2b00      	cmp	r3, #0
    705a:	d019      	beq.n	7090 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    705c:	68fb      	ldr	r3, [r7, #12]
    705e:	681b      	ldr	r3, [r3, #0]
    7060:	f003 031c 	and.w	r3, r3, #28
    7064:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7066:	2102      	movs	r1, #2
    7068:	6838      	ldr	r0, [r7, #0]
    706a:	4b23      	ldr	r3, [pc, #140]	; (70f8 <_spi_m_sync_init+0xf4>)
    706c:	4798      	blx	r3
    706e:	4603      	mov	r3, r0
    7070:	2b00      	cmp	r3, #0
    7072:	d006      	beq.n	7082 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7074:	6838      	ldr	r0, [r7, #0]
    7076:	4b21      	ldr	r3, [pc, #132]	; (70fc <_spi_m_sync_init+0xf8>)
    7078:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    707a:	2102      	movs	r1, #2
    707c:	6838      	ldr	r0, [r7, #0]
    707e:	4b20      	ldr	r3, [pc, #128]	; (7100 <_spi_m_sync_init+0xfc>)
    7080:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7082:	68bb      	ldr	r3, [r7, #8]
    7084:	f043 0301 	orr.w	r3, r3, #1
    7088:	4619      	mov	r1, r3
    708a:	6838      	ldr	r0, [r7, #0]
    708c:	4b1d      	ldr	r3, [pc, #116]	; (7104 <_spi_m_sync_init+0x100>)
    708e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7090:	2101      	movs	r1, #1
    7092:	6838      	ldr	r0, [r7, #0]
    7094:	4b1a      	ldr	r3, [pc, #104]	; (7100 <_spi_m_sync_init+0xfc>)
    7096:	4798      	blx	r3

	dev->prvt = hw;
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	683a      	ldr	r2, [r7, #0]
    709c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    709e:	68fb      	ldr	r3, [r7, #12]
    70a0:	681b      	ldr	r3, [r3, #0]
    70a2:	f003 031c 	and.w	r3, r3, #28
    70a6:	2b08      	cmp	r3, #8
    70a8:	d104      	bne.n	70b4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    70aa:	68f9      	ldr	r1, [r7, #12]
    70ac:	6838      	ldr	r0, [r7, #0]
    70ae:	4b16      	ldr	r3, [pc, #88]	; (7108 <_spi_m_sync_init+0x104>)
    70b0:	4798      	blx	r3
    70b2:	e003      	b.n	70bc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    70b4:	68f9      	ldr	r1, [r7, #12]
    70b6:	6838      	ldr	r0, [r7, #0]
    70b8:	4b14      	ldr	r3, [pc, #80]	; (710c <_spi_m_sync_init+0x108>)
    70ba:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    70bc:	68fb      	ldr	r3, [r7, #12]
    70be:	685b      	ldr	r3, [r3, #4]
    70c0:	f003 0307 	and.w	r3, r3, #7
    70c4:	2b00      	cmp	r3, #0
    70c6:	d101      	bne.n	70cc <_spi_m_sync_init+0xc8>
    70c8:	2201      	movs	r2, #1
    70ca:	e000      	b.n	70ce <_spi_m_sync_init+0xca>
    70cc:	2202      	movs	r2, #2
    70ce:	687b      	ldr	r3, [r7, #4]
    70d0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    70d2:	68fb      	ldr	r3, [r7, #12]
    70d4:	89db      	ldrh	r3, [r3, #14]
    70d6:	b29a      	uxth	r2, r3
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    70dc:	2300      	movs	r3, #0
}
    70de:	4618      	mov	r0, r3
    70e0:	3710      	adds	r7, #16
    70e2:	46bd      	mov	sp, r7
    70e4:	bd80      	pop	{r7, pc}
    70e6:	bf00      	nop
    70e8:	00006db1 	.word	0x00006db1
    70ec:	0000f04c 	.word	0x0000f04c
    70f0:	000038fd 	.word	0x000038fd
    70f4:	00005d71 	.word	0x00005d71
    70f8:	00006051 	.word	0x00006051
    70fc:	00006029 	.word	0x00006029
    7100:	00005d4d 	.word	0x00005d4d
    7104:	00006081 	.word	0x00006081
    7108:	00006d05 	.word	0x00006d05
    710c:	00006c71 	.word	0x00006c71

00007110 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    7110:	b580      	push	{r7, lr}
    7112:	b086      	sub	sp, #24
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
    7118:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    711a:	687b      	ldr	r3, [r7, #4]
    711c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    711e:	6839      	ldr	r1, [r7, #0]
    7120:	6878      	ldr	r0, [r7, #4]
    7122:	4b1a      	ldr	r3, [pc, #104]	; (718c <_spi_m_async_init+0x7c>)
    7124:	4798      	blx	r3
    7126:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    7128:	68bb      	ldr	r3, [r7, #8]
    712a:	2b00      	cmp	r3, #0
    712c:	da01      	bge.n	7132 <_spi_m_async_init+0x22>
		return rc;
    712e:	68bb      	ldr	r3, [r7, #8]
    7130:	e028      	b.n	7184 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    7132:	6879      	ldr	r1, [r7, #4]
    7134:	6838      	ldr	r0, [r7, #0]
    7136:	4b16      	ldr	r3, [pc, #88]	; (7190 <_spi_m_async_init+0x80>)
    7138:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    713a:	68fb      	ldr	r3, [r7, #12]
    713c:	2200      	movs	r2, #0
    713e:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    7140:	68fb      	ldr	r3, [r7, #12]
    7142:	2200      	movs	r2, #0
    7144:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    7146:	68fb      	ldr	r3, [r7, #12]
    7148:	2200      	movs	r2, #0
    714a:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    714c:	6838      	ldr	r0, [r7, #0]
    714e:	4b11      	ldr	r3, [pc, #68]	; (7194 <_spi_m_async_init+0x84>)
    7150:	4798      	blx	r3
    7152:	4603      	mov	r3, r0
    7154:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7156:	2300      	movs	r3, #0
    7158:	613b      	str	r3, [r7, #16]
    715a:	e00f      	b.n	717c <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    715c:	7dfb      	ldrb	r3, [r7, #23]
    715e:	b21b      	sxth	r3, r3
    7160:	4618      	mov	r0, r3
    7162:	4b0d      	ldr	r3, [pc, #52]	; (7198 <_spi_m_async_init+0x88>)
    7164:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    7166:	7dfb      	ldrb	r3, [r7, #23]
    7168:	b21b      	sxth	r3, r3
    716a:	4618      	mov	r0, r3
    716c:	4b0b      	ldr	r3, [pc, #44]	; (719c <_spi_m_async_init+0x8c>)
    716e:	4798      	blx	r3
		irq++;
    7170:	7dfb      	ldrb	r3, [r7, #23]
    7172:	3301      	adds	r3, #1
    7174:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7176:	693b      	ldr	r3, [r7, #16]
    7178:	3301      	adds	r3, #1
    717a:	613b      	str	r3, [r7, #16]
    717c:	693b      	ldr	r3, [r7, #16]
    717e:	2b03      	cmp	r3, #3
    7180:	d9ec      	bls.n	715c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    7182:	2300      	movs	r3, #0
}
    7184:	4618      	mov	r0, r3
    7186:	3718      	adds	r7, #24
    7188:	46bd      	mov	sp, r7
    718a:	bd80      	pop	{r7, pc}
    718c:	00007005 	.word	0x00007005
    7190:	000063d1 	.word	0x000063d1
    7194:	000067dd 	.word	0x000067dd
    7198:	00005c81 	.word	0x00005c81
    719c:	00005cc5 	.word	0x00005cc5

000071a0 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b082      	sub	sp, #8
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d005      	beq.n	71ba <_spi_m_sync_enable+0x1a>
    71ae:	687b      	ldr	r3, [r7, #4]
    71b0:	681b      	ldr	r3, [r3, #0]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d001      	beq.n	71ba <_spi_m_sync_enable+0x1a>
    71b6:	2301      	movs	r3, #1
    71b8:	e000      	b.n	71bc <_spi_m_sync_enable+0x1c>
    71ba:	2300      	movs	r3, #0
    71bc:	f003 0301 	and.w	r3, r3, #1
    71c0:	b2db      	uxtb	r3, r3
    71c2:	f640 224b 	movw	r2, #2635	; 0xa4b
    71c6:	4907      	ldr	r1, [pc, #28]	; (71e4 <_spi_m_sync_enable+0x44>)
    71c8:	4618      	mov	r0, r3
    71ca:	4b07      	ldr	r3, [pc, #28]	; (71e8 <_spi_m_sync_enable+0x48>)
    71cc:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	681b      	ldr	r3, [r3, #0]
    71d2:	4618      	mov	r0, r3
    71d4:	4b05      	ldr	r3, [pc, #20]	; (71ec <_spi_m_sync_enable+0x4c>)
    71d6:	4798      	blx	r3
    71d8:	4603      	mov	r3, r0
}
    71da:	4618      	mov	r0, r3
    71dc:	3708      	adds	r7, #8
    71de:	46bd      	mov	sp, r7
    71e0:	bd80      	pop	{r7, pc}
    71e2:	bf00      	nop
    71e4:	0000f04c 	.word	0x0000f04c
    71e8:	000038fd 	.word	0x000038fd
    71ec:	00006c09 	.word	0x00006c09

000071f0 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    71f0:	b580      	push	{r7, lr}
    71f2:	b082      	sub	sp, #8
    71f4:	af00      	add	r7, sp, #0
    71f6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	2b00      	cmp	r3, #0
    71fc:	d005      	beq.n	720a <_spi_m_sync_disable+0x1a>
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	681b      	ldr	r3, [r3, #0]
    7202:	2b00      	cmp	r3, #0
    7204:	d001      	beq.n	720a <_spi_m_sync_disable+0x1a>
    7206:	2301      	movs	r3, #1
    7208:	e000      	b.n	720c <_spi_m_sync_disable+0x1c>
    720a:	2300      	movs	r3, #0
    720c:	f003 0301 	and.w	r3, r3, #1
    7210:	b2db      	uxtb	r3, r3
    7212:	f640 2267 	movw	r2, #2663	; 0xa67
    7216:	4907      	ldr	r1, [pc, #28]	; (7234 <_spi_m_sync_disable+0x44>)
    7218:	4618      	mov	r0, r3
    721a:	4b07      	ldr	r3, [pc, #28]	; (7238 <_spi_m_sync_disable+0x48>)
    721c:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	681b      	ldr	r3, [r3, #0]
    7222:	4618      	mov	r0, r3
    7224:	4b05      	ldr	r3, [pc, #20]	; (723c <_spi_m_sync_disable+0x4c>)
    7226:	4798      	blx	r3
    7228:	4603      	mov	r3, r0
}
    722a:	4618      	mov	r0, r3
    722c:	3708      	adds	r7, #8
    722e:	46bd      	mov	sp, r7
    7230:	bd80      	pop	{r7, pc}
    7232:	bf00      	nop
    7234:	0000f04c 	.word	0x0000f04c
    7238:	000038fd 	.word	0x000038fd
    723c:	00006c3d 	.word	0x00006c3d

00007240 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7240:	b580      	push	{r7, lr}
    7242:	b082      	sub	sp, #8
    7244:	af00      	add	r7, sp, #0
    7246:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7248:	bf00      	nop
    724a:	2103      	movs	r1, #3
    724c:	6878      	ldr	r0, [r7, #4]
    724e:	4b06      	ldr	r3, [pc, #24]	; (7268 <_spi_wait_bus_idle+0x28>)
    7250:	4798      	blx	r3
    7252:	4603      	mov	r3, r0
    7254:	2b00      	cmp	r3, #0
    7256:	d0f8      	beq.n	724a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7258:	2103      	movs	r1, #3
    725a:	6878      	ldr	r0, [r7, #4]
    725c:	4b03      	ldr	r3, [pc, #12]	; (726c <_spi_wait_bus_idle+0x2c>)
    725e:	4798      	blx	r3
}
    7260:	bf00      	nop
    7262:	3708      	adds	r7, #8
    7264:	46bd      	mov	sp, r7
    7266:	bd80      	pop	{r7, pc}
    7268:	00005e05 	.word	0x00005e05
    726c:	00005e47 	.word	0x00005e47

00007270 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7270:	b580      	push	{r7, lr}
    7272:	b086      	sub	sp, #24
    7274:	af00      	add	r7, sp, #0
    7276:	60f8      	str	r0, [r7, #12]
    7278:	60b9      	str	r1, [r7, #8]
    727a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    727c:	68bb      	ldr	r3, [r7, #8]
    727e:	f003 0304 	and.w	r3, r3, #4
    7282:	2b00      	cmp	r3, #0
    7284:	d101      	bne.n	728a <_spi_rx_check_and_receive+0x1a>
		return false;
    7286:	2300      	movs	r3, #0
    7288:	e022      	b.n	72d0 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    728a:	68f8      	ldr	r0, [r7, #12]
    728c:	4b12      	ldr	r3, [pc, #72]	; (72d8 <_spi_rx_check_and_receive+0x68>)
    728e:	4798      	blx	r3
    7290:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	685b      	ldr	r3, [r3, #4]
    7296:	2b00      	cmp	r3, #0
    7298:	d014      	beq.n	72c4 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    729a:	687b      	ldr	r3, [r7, #4]
    729c:	685b      	ldr	r3, [r3, #4]
    729e:	1c59      	adds	r1, r3, #1
    72a0:	687a      	ldr	r2, [r7, #4]
    72a2:	6051      	str	r1, [r2, #4]
    72a4:	697a      	ldr	r2, [r7, #20]
    72a6:	b2d2      	uxtb	r2, r2
    72a8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    72aa:	687b      	ldr	r3, [r7, #4]
    72ac:	7c1b      	ldrb	r3, [r3, #16]
    72ae:	2b01      	cmp	r3, #1
    72b0:	d908      	bls.n	72c4 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    72b2:	687b      	ldr	r3, [r7, #4]
    72b4:	685b      	ldr	r3, [r3, #4]
    72b6:	1c59      	adds	r1, r3, #1
    72b8:	687a      	ldr	r2, [r7, #4]
    72ba:	6051      	str	r1, [r2, #4]
    72bc:	697a      	ldr	r2, [r7, #20]
    72be:	0a12      	lsrs	r2, r2, #8
    72c0:	b2d2      	uxtb	r2, r2
    72c2:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	68db      	ldr	r3, [r3, #12]
    72c8:	1c5a      	adds	r2, r3, #1
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	60da      	str	r2, [r3, #12]

	return true;
    72ce:	2301      	movs	r3, #1
}
    72d0:	4618      	mov	r0, r3
    72d2:	3718      	adds	r7, #24
    72d4:	46bd      	mov	sp, r7
    72d6:	bd80      	pop	{r7, pc}
    72d8:	000062f9 	.word	0x000062f9

000072dc <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    72dc:	b580      	push	{r7, lr}
    72de:	b086      	sub	sp, #24
    72e0:	af00      	add	r7, sp, #0
    72e2:	60f8      	str	r0, [r7, #12]
    72e4:	60b9      	str	r1, [r7, #8]
    72e6:	607a      	str	r2, [r7, #4]
    72e8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    72ea:	68bb      	ldr	r3, [r7, #8]
    72ec:	f003 0301 	and.w	r3, r3, #1
    72f0:	2b00      	cmp	r3, #0
    72f2:	d028      	beq.n	7346 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	681b      	ldr	r3, [r3, #0]
    72f8:	2b00      	cmp	r3, #0
    72fa:	d018      	beq.n	732e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    72fc:	687b      	ldr	r3, [r7, #4]
    72fe:	681b      	ldr	r3, [r3, #0]
    7300:	1c59      	adds	r1, r3, #1
    7302:	687a      	ldr	r2, [r7, #4]
    7304:	6011      	str	r1, [r2, #0]
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    730a:	687b      	ldr	r3, [r7, #4]
    730c:	7c1b      	ldrb	r3, [r3, #16]
    730e:	2b01      	cmp	r3, #1
    7310:	d90f      	bls.n	7332 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	681b      	ldr	r3, [r3, #0]
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	021b      	lsls	r3, r3, #8
    731a:	461a      	mov	r2, r3
    731c:	697b      	ldr	r3, [r7, #20]
    731e:	4313      	orrs	r3, r2
    7320:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7322:	687b      	ldr	r3, [r7, #4]
    7324:	681b      	ldr	r3, [r3, #0]
    7326:	1c5a      	adds	r2, r3, #1
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	601a      	str	r2, [r3, #0]
    732c:	e001      	b.n	7332 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    732e:	887b      	ldrh	r3, [r7, #2]
    7330:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	689b      	ldr	r3, [r3, #8]
    7336:	1c5a      	adds	r2, r3, #1
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    733c:	6979      	ldr	r1, [r7, #20]
    733e:	68f8      	ldr	r0, [r7, #12]
    7340:	4b03      	ldr	r3, [pc, #12]	; (7350 <_spi_tx_check_and_send+0x74>)
    7342:	4798      	blx	r3
    7344:	e000      	b.n	7348 <_spi_tx_check_and_send+0x6c>
		return;
    7346:	bf00      	nop
}
    7348:	3718      	adds	r7, #24
    734a:	46bd      	mov	sp, r7
    734c:	bd80      	pop	{r7, pc}
    734e:	bf00      	nop
    7350:	000062dd 	.word	0x000062dd

00007354 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7354:	b580      	push	{r7, lr}
    7356:	b082      	sub	sp, #8
    7358:	af00      	add	r7, sp, #0
    735a:	6078      	str	r0, [r7, #4]
    735c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    735e:	687b      	ldr	r3, [r7, #4]
    7360:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7364:	2b00      	cmp	r3, #0
    7366:	d00b      	beq.n	7380 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7368:	f64f 71ff 	movw	r1, #65535	; 0xffff
    736c:	6838      	ldr	r0, [r7, #0]
    736e:	4b07      	ldr	r3, [pc, #28]	; (738c <_spi_err_check+0x38>)
    7370:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7372:	2180      	movs	r1, #128	; 0x80
    7374:	6838      	ldr	r0, [r7, #0]
    7376:	4b06      	ldr	r3, [pc, #24]	; (7390 <_spi_err_check+0x3c>)
    7378:	4798      	blx	r3
		return ERR_OVERFLOW;
    737a:	f06f 0312 	mvn.w	r3, #18
    737e:	e000      	b.n	7382 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7380:	2300      	movs	r3, #0
}
    7382:	4618      	mov	r0, r3
    7384:	3708      	adds	r7, #8
    7386:	46bd      	mov	sp, r7
    7388:	bd80      	pop	{r7, pc}
    738a:	bf00      	nop
    738c:	00006331 	.word	0x00006331
    7390:	00005e47 	.word	0x00005e47

00007394 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7394:	b590      	push	{r4, r7, lr}
    7396:	b08b      	sub	sp, #44	; 0x2c
    7398:	af00      	add	r7, sp, #0
    739a:	6078      	str	r0, [r7, #4]
    739c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    739e:	687b      	ldr	r3, [r7, #4]
    73a0:	681b      	ldr	r3, [r3, #0]
    73a2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    73a4:	2300      	movs	r3, #0
    73a6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    73a8:	683b      	ldr	r3, [r7, #0]
    73aa:	681b      	ldr	r3, [r3, #0]
    73ac:	60bb      	str	r3, [r7, #8]
    73ae:	683b      	ldr	r3, [r7, #0]
    73b0:	685b      	ldr	r3, [r3, #4]
    73b2:	60fb      	str	r3, [r7, #12]
    73b4:	2300      	movs	r3, #0
    73b6:	613b      	str	r3, [r7, #16]
    73b8:	2300      	movs	r3, #0
    73ba:	617b      	str	r3, [r7, #20]
    73bc:	687b      	ldr	r3, [r7, #4]
    73be:	791b      	ldrb	r3, [r3, #4]
    73c0:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    73c2:	687b      	ldr	r3, [r7, #4]
    73c4:	2b00      	cmp	r3, #0
    73c6:	d004      	beq.n	73d2 <_spi_m_sync_trans+0x3e>
    73c8:	6a3b      	ldr	r3, [r7, #32]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d001      	beq.n	73d2 <_spi_m_sync_trans+0x3e>
    73ce:	2301      	movs	r3, #1
    73d0:	e000      	b.n	73d4 <_spi_m_sync_trans+0x40>
    73d2:	2300      	movs	r3, #0
    73d4:	f003 0301 	and.w	r3, r3, #1
    73d8:	b2db      	uxtb	r3, r3
    73da:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    73de:	492b      	ldr	r1, [pc, #172]	; (748c <_spi_m_sync_trans+0xf8>)
    73e0:	4618      	mov	r0, r3
    73e2:	4b2b      	ldr	r3, [pc, #172]	; (7490 <_spi_m_sync_trans+0xfc>)
    73e4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    73e6:	2107      	movs	r1, #7
    73e8:	6a38      	ldr	r0, [r7, #32]
    73ea:	4b2a      	ldr	r3, [pc, #168]	; (7494 <_spi_m_sync_trans+0x100>)
    73ec:	4798      	blx	r3
    73ee:	4603      	mov	r3, r0
    73f0:	2b00      	cmp	r3, #0
    73f2:	d002      	beq.n	73fa <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    73f4:	f06f 0303 	mvn.w	r3, #3
    73f8:	e043      	b.n	7482 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    73fa:	6a38      	ldr	r0, [r7, #32]
    73fc:	4b26      	ldr	r3, [pc, #152]	; (7498 <_spi_m_sync_trans+0x104>)
    73fe:	4798      	blx	r3
    7400:	4603      	mov	r3, r0
    7402:	f083 0301 	eor.w	r3, r3, #1
    7406:	b2db      	uxtb	r3, r3
    7408:	2b00      	cmp	r3, #0
    740a:	d002      	beq.n	7412 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    740c:	f06f 0313 	mvn.w	r3, #19
    7410:	e037      	b.n	7482 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7412:	6a38      	ldr	r0, [r7, #32]
    7414:	4b21      	ldr	r3, [pc, #132]	; (749c <_spi_m_sync_trans+0x108>)
    7416:	4798      	blx	r3
    7418:	4603      	mov	r3, r0
    741a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    741c:	f107 0308 	add.w	r3, r7, #8
    7420:	461a      	mov	r2, r3
    7422:	69f9      	ldr	r1, [r7, #28]
    7424:	6a38      	ldr	r0, [r7, #32]
    7426:	4b1e      	ldr	r3, [pc, #120]	; (74a0 <_spi_m_sync_trans+0x10c>)
    7428:	4798      	blx	r3
    742a:	4603      	mov	r3, r0
    742c:	f083 0301 	eor.w	r3, r3, #1
    7430:	b2db      	uxtb	r3, r3
    7432:	2b00      	cmp	r3, #0
    7434:	d00b      	beq.n	744e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7436:	697a      	ldr	r2, [r7, #20]
    7438:	693b      	ldr	r3, [r7, #16]
    743a:	429a      	cmp	r2, r3
    743c:	d307      	bcc.n	744e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	88db      	ldrh	r3, [r3, #6]
    7442:	f107 0208 	add.w	r2, r7, #8
    7446:	69f9      	ldr	r1, [r7, #28]
    7448:	6a38      	ldr	r0, [r7, #32]
    744a:	4c16      	ldr	r4, [pc, #88]	; (74a4 <_spi_m_sync_trans+0x110>)
    744c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    744e:	6a39      	ldr	r1, [r7, #32]
    7450:	69f8      	ldr	r0, [r7, #28]
    7452:	4b15      	ldr	r3, [pc, #84]	; (74a8 <_spi_m_sync_trans+0x114>)
    7454:	4798      	blx	r3
    7456:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    745a:	2b00      	cmp	r3, #0
    745c:	db0c      	blt.n	7478 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    745e:	693a      	ldr	r2, [r7, #16]
    7460:	683b      	ldr	r3, [r7, #0]
    7462:	689b      	ldr	r3, [r3, #8]
    7464:	429a      	cmp	r2, r3
    7466:	d3d4      	bcc.n	7412 <_spi_m_sync_trans+0x7e>
    7468:	697a      	ldr	r2, [r7, #20]
    746a:	683b      	ldr	r3, [r7, #0]
    746c:	689b      	ldr	r3, [r3, #8]
    746e:	429a      	cmp	r2, r3
    7470:	d3cf      	bcc.n	7412 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7472:	693b      	ldr	r3, [r7, #16]
    7474:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7476:	e000      	b.n	747a <_spi_m_sync_trans+0xe6>
			break;
    7478:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    747a:	6a38      	ldr	r0, [r7, #32]
    747c:	4b0b      	ldr	r3, [pc, #44]	; (74ac <_spi_m_sync_trans+0x118>)
    747e:	4798      	blx	r3

	return rc;
    7480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7482:	4618      	mov	r0, r3
    7484:	372c      	adds	r7, #44	; 0x2c
    7486:	46bd      	mov	sp, r7
    7488:	bd90      	pop	{r4, r7, pc}
    748a:	bf00      	nop
    748c:	0000f04c 	.word	0x0000f04c
    7490:	000038fd 	.word	0x000038fd
    7494:	00005d71 	.word	0x00005d71
    7498:	00005ff1 	.word	0x00005ff1
    749c:	00005e2d 	.word	0x00005e2d
    74a0:	00007271 	.word	0x00007271
    74a4:	000072dd 	.word	0x000072dd
    74a8:	00007355 	.word	0x00007355
    74ac:	00007241 	.word	0x00007241

000074b0 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    74b0:	b580      	push	{r7, lr}
    74b2:	b084      	sub	sp, #16
    74b4:	af00      	add	r7, sp, #0
    74b6:	6078      	str	r0, [r7, #4]
    74b8:	460b      	mov	r3, r1
    74ba:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    74bc:	687b      	ldr	r3, [r7, #4]
    74be:	681b      	ldr	r3, [r3, #0]
    74c0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    74c2:	687b      	ldr	r3, [r7, #4]
    74c4:	2b00      	cmp	r3, #0
    74c6:	d004      	beq.n	74d2 <_spi_m_async_enable_tx+0x22>
    74c8:	68fb      	ldr	r3, [r7, #12]
    74ca:	2b00      	cmp	r3, #0
    74cc:	d001      	beq.n	74d2 <_spi_m_async_enable_tx+0x22>
    74ce:	2301      	movs	r3, #1
    74d0:	e000      	b.n	74d4 <_spi_m_async_enable_tx+0x24>
    74d2:	2300      	movs	r3, #0
    74d4:	f003 0301 	and.w	r3, r3, #1
    74d8:	b2db      	uxtb	r3, r3
    74da:	f640 327c 	movw	r2, #2940	; 0xb7c
    74de:	4909      	ldr	r1, [pc, #36]	; (7504 <_spi_m_async_enable_tx+0x54>)
    74e0:	4618      	mov	r0, r3
    74e2:	4b09      	ldr	r3, [pc, #36]	; (7508 <_spi_m_async_enable_tx+0x58>)
    74e4:	4798      	blx	r3

	if (state) {
    74e6:	78fb      	ldrb	r3, [r7, #3]
    74e8:	2b00      	cmp	r3, #0
    74ea:	d003      	beq.n	74f4 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    74ec:	68f8      	ldr	r0, [r7, #12]
    74ee:	4b07      	ldr	r3, [pc, #28]	; (750c <_spi_m_async_enable_tx+0x5c>)
    74f0:	4798      	blx	r3
    74f2:	e002      	b.n	74fa <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    74f4:	68f8      	ldr	r0, [r7, #12]
    74f6:	4b06      	ldr	r3, [pc, #24]	; (7510 <_spi_m_async_enable_tx+0x60>)
    74f8:	4798      	blx	r3
	}

	return ERR_NONE;
    74fa:	2300      	movs	r3, #0
}
    74fc:	4618      	mov	r0, r3
    74fe:	3710      	adds	r7, #16
    7500:	46bd      	mov	sp, r7
    7502:	bd80      	pop	{r7, pc}
    7504:	0000f04c 	.word	0x0000f04c
    7508:	000038fd 	.word	0x000038fd
    750c:	00005e65 	.word	0x00005e65
    7510:	00005e7f 	.word	0x00005e7f

00007514 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    7514:	b580      	push	{r7, lr}
    7516:	b084      	sub	sp, #16
    7518:	af00      	add	r7, sp, #0
    751a:	6078      	str	r0, [r7, #4]
    751c:	460b      	mov	r3, r1
    751e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	681b      	ldr	r3, [r3, #0]
    7524:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    7526:	687b      	ldr	r3, [r7, #4]
    7528:	2b00      	cmp	r3, #0
    752a:	bf14      	ite	ne
    752c:	2301      	movne	r3, #1
    752e:	2300      	moveq	r3, #0
    7530:	b2db      	uxtb	r3, r3
    7532:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    7536:	490f      	ldr	r1, [pc, #60]	; (7574 <_spi_m_async_enable_rx+0x60>)
    7538:	4618      	mov	r0, r3
    753a:	4b0f      	ldr	r3, [pc, #60]	; (7578 <_spi_m_async_enable_rx+0x64>)
    753c:	4798      	blx	r3
	ASSERT(hw);
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	2b00      	cmp	r3, #0
    7542:	bf14      	ite	ne
    7544:	2301      	movne	r3, #1
    7546:	2300      	moveq	r3, #0
    7548:	b2db      	uxtb	r3, r3
    754a:	f640 3291 	movw	r2, #2961	; 0xb91
    754e:	4909      	ldr	r1, [pc, #36]	; (7574 <_spi_m_async_enable_rx+0x60>)
    7550:	4618      	mov	r0, r3
    7552:	4b09      	ldr	r3, [pc, #36]	; (7578 <_spi_m_async_enable_rx+0x64>)
    7554:	4798      	blx	r3

	if (state) {
    7556:	78fb      	ldrb	r3, [r7, #3]
    7558:	2b00      	cmp	r3, #0
    755a:	d003      	beq.n	7564 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    755c:	68f8      	ldr	r0, [r7, #12]
    755e:	4b07      	ldr	r3, [pc, #28]	; (757c <_spi_m_async_enable_rx+0x68>)
    7560:	4798      	blx	r3
    7562:	e002      	b.n	756a <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    7564:	68f8      	ldr	r0, [r7, #12]
    7566:	4b06      	ldr	r3, [pc, #24]	; (7580 <_spi_m_async_enable_rx+0x6c>)
    7568:	4798      	blx	r3
	}

	return ERR_NONE;
    756a:	2300      	movs	r3, #0
}
    756c:	4618      	mov	r0, r3
    756e:	3710      	adds	r7, #16
    7570:	46bd      	mov	sp, r7
    7572:	bd80      	pop	{r7, pc}
    7574:	0000f04c 	.word	0x0000f04c
    7578:	000038fd 	.word	0x000038fd
    757c:	00005ecd 	.word	0x00005ecd
    7580:	00005ee7 	.word	0x00005ee7

00007584 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    7584:	b580      	push	{r7, lr}
    7586:	b082      	sub	sp, #8
    7588:	af00      	add	r7, sp, #0
    758a:	6078      	str	r0, [r7, #4]
    758c:	460b      	mov	r3, r1
    758e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	2b00      	cmp	r3, #0
    7594:	d005      	beq.n	75a2 <_spi_m_async_enable_tx_complete+0x1e>
    7596:	687b      	ldr	r3, [r7, #4]
    7598:	681b      	ldr	r3, [r3, #0]
    759a:	2b00      	cmp	r3, #0
    759c:	d001      	beq.n	75a2 <_spi_m_async_enable_tx_complete+0x1e>
    759e:	2301      	movs	r3, #1
    75a0:	e000      	b.n	75a4 <_spi_m_async_enable_tx_complete+0x20>
    75a2:	2300      	movs	r3, #0
    75a4:	f003 0301 	and.w	r3, r3, #1
    75a8:	b2db      	uxtb	r3, r3
    75aa:	f640 32a3 	movw	r2, #2979	; 0xba3
    75ae:	490b      	ldr	r1, [pc, #44]	; (75dc <_spi_m_async_enable_tx_complete+0x58>)
    75b0:	4618      	mov	r0, r3
    75b2:	4b0b      	ldr	r3, [pc, #44]	; (75e0 <_spi_m_async_enable_tx_complete+0x5c>)
    75b4:	4798      	blx	r3

	if (state) {
    75b6:	78fb      	ldrb	r3, [r7, #3]
    75b8:	2b00      	cmp	r3, #0
    75ba:	d005      	beq.n	75c8 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	681b      	ldr	r3, [r3, #0]
    75c0:	4618      	mov	r0, r3
    75c2:	4b08      	ldr	r3, [pc, #32]	; (75e4 <_spi_m_async_enable_tx_complete+0x60>)
    75c4:	4798      	blx	r3
    75c6:	e004      	b.n	75d2 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	681b      	ldr	r3, [r3, #0]
    75cc:	4618      	mov	r0, r3
    75ce:	4b06      	ldr	r3, [pc, #24]	; (75e8 <_spi_m_async_enable_tx_complete+0x64>)
    75d0:	4798      	blx	r3
	}

	return ERR_NONE;
    75d2:	2300      	movs	r3, #0
}
    75d4:	4618      	mov	r0, r3
    75d6:	3708      	adds	r7, #8
    75d8:	46bd      	mov	sp, r7
    75da:	bd80      	pop	{r7, pc}
    75dc:	0000f04c 	.word	0x0000f04c
    75e0:	000038fd 	.word	0x000038fd
    75e4:	00005e99 	.word	0x00005e99
    75e8:	00005eb3 	.word	0x00005eb3

000075ec <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    75ec:	b580      	push	{r7, lr}
    75ee:	b082      	sub	sp, #8
    75f0:	af00      	add	r7, sp, #0
    75f2:	6078      	str	r0, [r7, #4]
    75f4:	460b      	mov	r3, r1
    75f6:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    75f8:	687b      	ldr	r3, [r7, #4]
    75fa:	2b00      	cmp	r3, #0
    75fc:	d005      	beq.n	760a <_spi_m_async_write_one+0x1e>
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	681b      	ldr	r3, [r3, #0]
    7602:	2b00      	cmp	r3, #0
    7604:	d001      	beq.n	760a <_spi_m_async_write_one+0x1e>
    7606:	2301      	movs	r3, #1
    7608:	e000      	b.n	760c <_spi_m_async_write_one+0x20>
    760a:	2300      	movs	r3, #0
    760c:	f003 0301 	and.w	r3, r3, #1
    7610:	b2db      	uxtb	r3, r3
    7612:	f640 32b5 	movw	r2, #2997	; 0xbb5
    7616:	4908      	ldr	r1, [pc, #32]	; (7638 <_spi_m_async_write_one+0x4c>)
    7618:	4618      	mov	r0, r3
    761a:	4b08      	ldr	r3, [pc, #32]	; (763c <_spi_m_async_write_one+0x50>)
    761c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	681b      	ldr	r3, [r3, #0]
    7622:	887a      	ldrh	r2, [r7, #2]
    7624:	4611      	mov	r1, r2
    7626:	4618      	mov	r0, r3
    7628:	4b05      	ldr	r3, [pc, #20]	; (7640 <_spi_m_async_write_one+0x54>)
    762a:	4798      	blx	r3

	return ERR_NONE;
    762c:	2300      	movs	r3, #0
}
    762e:	4618      	mov	r0, r3
    7630:	3708      	adds	r7, #8
    7632:	46bd      	mov	sp, r7
    7634:	bd80      	pop	{r7, pc}
    7636:	bf00      	nop
    7638:	0000f04c 	.word	0x0000f04c
    763c:	000038fd 	.word	0x000038fd
    7640:	000062dd 	.word	0x000062dd

00007644 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7644:	b580      	push	{r7, lr}
    7646:	b082      	sub	sp, #8
    7648:	af00      	add	r7, sp, #0
    764a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	2b00      	cmp	r3, #0
    7650:	d005      	beq.n	765e <_spi_m_async_read_one+0x1a>
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	681b      	ldr	r3, [r3, #0]
    7656:	2b00      	cmp	r3, #0
    7658:	d001      	beq.n	765e <_spi_m_async_read_one+0x1a>
    765a:	2301      	movs	r3, #1
    765c:	e000      	b.n	7660 <_spi_m_async_read_one+0x1c>
    765e:	2300      	movs	r3, #0
    7660:	f003 0301 	and.w	r3, r3, #1
    7664:	b2db      	uxtb	r3, r3
    7666:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    766a:	4907      	ldr	r1, [pc, #28]	; (7688 <_spi_m_async_read_one+0x44>)
    766c:	4618      	mov	r0, r3
    766e:	4b07      	ldr	r3, [pc, #28]	; (768c <_spi_m_async_read_one+0x48>)
    7670:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7672:	687b      	ldr	r3, [r7, #4]
    7674:	681b      	ldr	r3, [r3, #0]
    7676:	4618      	mov	r0, r3
    7678:	4b05      	ldr	r3, [pc, #20]	; (7690 <_spi_m_async_read_one+0x4c>)
    767a:	4798      	blx	r3
    767c:	4603      	mov	r3, r0
    767e:	b29b      	uxth	r3, r3
}
    7680:	4618      	mov	r0, r3
    7682:	3708      	adds	r7, #8
    7684:	46bd      	mov	sp, r7
    7686:	bd80      	pop	{r7, pc}
    7688:	0000f04c 	.word	0x0000f04c
    768c:	000038fd 	.word	0x000038fd
    7690:	000062f9 	.word	0x000062f9

00007694 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    7694:	b580      	push	{r7, lr}
    7696:	b086      	sub	sp, #24
    7698:	af00      	add	r7, sp, #0
    769a:	60f8      	str	r0, [r7, #12]
    769c:	460b      	mov	r3, r1
    769e:	607a      	str	r2, [r7, #4]
    76a0:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    76a2:	68fb      	ldr	r3, [r7, #12]
    76a4:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    76a6:	68fb      	ldr	r3, [r7, #12]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d004      	beq.n	76b6 <_spi_m_async_register_callback+0x22>
    76ac:	7afb      	ldrb	r3, [r7, #11]
    76ae:	2b03      	cmp	r3, #3
    76b0:	d801      	bhi.n	76b6 <_spi_m_async_register_callback+0x22>
    76b2:	2301      	movs	r3, #1
    76b4:	e000      	b.n	76b8 <_spi_m_async_register_callback+0x24>
    76b6:	2300      	movs	r3, #0
    76b8:	f003 0301 	and.w	r3, r3, #1
    76bc:	b2db      	uxtb	r3, r3
    76be:	f640 32e9 	movw	r2, #3049	; 0xbe9
    76c2:	4909      	ldr	r1, [pc, #36]	; (76e8 <_spi_m_async_register_callback+0x54>)
    76c4:	4618      	mov	r0, r3
    76c6:	4b09      	ldr	r3, [pc, #36]	; (76ec <_spi_m_async_register_callback+0x58>)
    76c8:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    76ca:	697b      	ldr	r3, [r7, #20]
    76cc:	3308      	adds	r3, #8
    76ce:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    76d0:	7afb      	ldrb	r3, [r7, #11]
    76d2:	009b      	lsls	r3, r3, #2
    76d4:	693a      	ldr	r2, [r7, #16]
    76d6:	4413      	add	r3, r2
    76d8:	687a      	ldr	r2, [r7, #4]
    76da:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    76dc:	2300      	movs	r3, #0
}
    76de:	4618      	mov	r0, r3
    76e0:	3718      	adds	r7, #24
    76e2:	46bd      	mov	sp, r7
    76e4:	bd80      	pop	{r7, pc}
    76e6:	bf00      	nop
    76e8:	0000f04c 	.word	0x0000f04c
    76ec:	000038fd 	.word	0x000038fd

000076f0 <__NVIC_EnableIRQ>:
{
    76f0:	b480      	push	{r7}
    76f2:	b083      	sub	sp, #12
    76f4:	af00      	add	r7, sp, #0
    76f6:	4603      	mov	r3, r0
    76f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    76fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    76fe:	2b00      	cmp	r3, #0
    7700:	db0b      	blt.n	771a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7702:	4909      	ldr	r1, [pc, #36]	; (7728 <__NVIC_EnableIRQ+0x38>)
    7704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7708:	095b      	lsrs	r3, r3, #5
    770a:	88fa      	ldrh	r2, [r7, #6]
    770c:	f002 021f 	and.w	r2, r2, #31
    7710:	2001      	movs	r0, #1
    7712:	fa00 f202 	lsl.w	r2, r0, r2
    7716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    771a:	bf00      	nop
    771c:	370c      	adds	r7, #12
    771e:	46bd      	mov	sp, r7
    7720:	f85d 7b04 	ldr.w	r7, [sp], #4
    7724:	4770      	bx	lr
    7726:	bf00      	nop
    7728:	e000e100 	.word	0xe000e100

0000772c <__NVIC_DisableIRQ>:
{
    772c:	b480      	push	{r7}
    772e:	b083      	sub	sp, #12
    7730:	af00      	add	r7, sp, #0
    7732:	4603      	mov	r3, r0
    7734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    773a:	2b00      	cmp	r3, #0
    773c:	db10      	blt.n	7760 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    773e:	490b      	ldr	r1, [pc, #44]	; (776c <__NVIC_DisableIRQ+0x40>)
    7740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7744:	095b      	lsrs	r3, r3, #5
    7746:	88fa      	ldrh	r2, [r7, #6]
    7748:	f002 021f 	and.w	r2, r2, #31
    774c:	2001      	movs	r0, #1
    774e:	fa00 f202 	lsl.w	r2, r0, r2
    7752:	3320      	adds	r3, #32
    7754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7758:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    775c:	f3bf 8f6f 	isb	sy
}
    7760:	bf00      	nop
    7762:	370c      	adds	r7, #12
    7764:	46bd      	mov	sp, r7
    7766:	f85d 7b04 	ldr.w	r7, [sp], #4
    776a:	4770      	bx	lr
    776c:	e000e100 	.word	0xe000e100

00007770 <__NVIC_ClearPendingIRQ>:
{
    7770:	b480      	push	{r7}
    7772:	b083      	sub	sp, #12
    7774:	af00      	add	r7, sp, #0
    7776:	4603      	mov	r3, r0
    7778:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    777a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    777e:	2b00      	cmp	r3, #0
    7780:	db0c      	blt.n	779c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7782:	4909      	ldr	r1, [pc, #36]	; (77a8 <__NVIC_ClearPendingIRQ+0x38>)
    7784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7788:	095b      	lsrs	r3, r3, #5
    778a:	88fa      	ldrh	r2, [r7, #6]
    778c:	f002 021f 	and.w	r2, r2, #31
    7790:	2001      	movs	r0, #1
    7792:	fa00 f202 	lsl.w	r2, r0, r2
    7796:	3360      	adds	r3, #96	; 0x60
    7798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    779c:	bf00      	nop
    779e:	370c      	adds	r7, #12
    77a0:	46bd      	mov	sp, r7
    77a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77a6:	4770      	bx	lr
    77a8:	e000e100 	.word	0xe000e100

000077ac <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    77ac:	b480      	push	{r7}
    77ae:	b083      	sub	sp, #12
    77b0:	af00      	add	r7, sp, #0
    77b2:	6078      	str	r0, [r7, #4]
    77b4:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    77b6:	bf00      	nop
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	691a      	ldr	r2, [r3, #16]
    77bc:	683b      	ldr	r3, [r7, #0]
    77be:	4013      	ands	r3, r2
    77c0:	2b00      	cmp	r3, #0
    77c2:	d1f9      	bne.n	77b8 <hri_tc_wait_for_sync+0xc>
	};
}
    77c4:	bf00      	nop
    77c6:	370c      	adds	r7, #12
    77c8:	46bd      	mov	sp, r7
    77ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ce:	4770      	bx	lr

000077d0 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    77d0:	b480      	push	{r7}
    77d2:	b083      	sub	sp, #12
    77d4:	af00      	add	r7, sp, #0
    77d6:	6078      	str	r0, [r7, #4]
    77d8:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    77da:	687b      	ldr	r3, [r7, #4]
    77dc:	691a      	ldr	r2, [r3, #16]
    77de:	683b      	ldr	r3, [r7, #0]
    77e0:	4013      	ands	r3, r2
    77e2:	2b00      	cmp	r3, #0
    77e4:	bf14      	ite	ne
    77e6:	2301      	movne	r3, #1
    77e8:	2300      	moveq	r3, #0
    77ea:	b2db      	uxtb	r3, r3
}
    77ec:	4618      	mov	r0, r3
    77ee:	370c      	adds	r7, #12
    77f0:	46bd      	mov	sp, r7
    77f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f6:	4770      	bx	lr

000077f8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    77f8:	b480      	push	{r7}
    77fa:	b083      	sub	sp, #12
    77fc:	af00      	add	r7, sp, #0
    77fe:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7800:	687b      	ldr	r3, [r7, #4]
    7802:	7a9b      	ldrb	r3, [r3, #10]
    7804:	b2db      	uxtb	r3, r3
    7806:	f003 0301 	and.w	r3, r3, #1
    780a:	2b00      	cmp	r3, #0
    780c:	bf14      	ite	ne
    780e:	2301      	movne	r3, #1
    7810:	2300      	moveq	r3, #0
    7812:	b2db      	uxtb	r3, r3
}
    7814:	4618      	mov	r0, r3
    7816:	370c      	adds	r7, #12
    7818:	46bd      	mov	sp, r7
    781a:	f85d 7b04 	ldr.w	r7, [sp], #4
    781e:	4770      	bx	lr

00007820 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7820:	b480      	push	{r7}
    7822:	b083      	sub	sp, #12
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	2201      	movs	r2, #1
    782c:	729a      	strb	r2, [r3, #10]
}
    782e:	bf00      	nop
    7830:	370c      	adds	r7, #12
    7832:	46bd      	mov	sp, r7
    7834:	f85d 7b04 	ldr.w	r7, [sp], #4
    7838:	4770      	bx	lr

0000783a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    783a:	b480      	push	{r7}
    783c:	b083      	sub	sp, #12
    783e:	af00      	add	r7, sp, #0
    7840:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	2202      	movs	r2, #2
    7846:	729a      	strb	r2, [r3, #10]
}
    7848:	bf00      	nop
    784a:	370c      	adds	r7, #12
    784c:	46bd      	mov	sp, r7
    784e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7852:	4770      	bx	lr

00007854 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7854:	b480      	push	{r7}
    7856:	b083      	sub	sp, #12
    7858:	af00      	add	r7, sp, #0
    785a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	2201      	movs	r2, #1
    7860:	725a      	strb	r2, [r3, #9]
}
    7862:	bf00      	nop
    7864:	370c      	adds	r7, #12
    7866:	46bd      	mov	sp, r7
    7868:	f85d 7b04 	ldr.w	r7, [sp], #4
    786c:	4770      	bx	lr

0000786e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    786e:	b480      	push	{r7}
    7870:	b083      	sub	sp, #12
    7872:	af00      	add	r7, sp, #0
    7874:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	7a5b      	ldrb	r3, [r3, #9]
    787a:	b2db      	uxtb	r3, r3
    787c:	085b      	lsrs	r3, r3, #1
    787e:	f003 0301 	and.w	r3, r3, #1
    7882:	2b00      	cmp	r3, #0
    7884:	bf14      	ite	ne
    7886:	2301      	movne	r3, #1
    7888:	2300      	moveq	r3, #0
    788a:	b2db      	uxtb	r3, r3
}
    788c:	4618      	mov	r0, r3
    788e:	370c      	adds	r7, #12
    7890:	46bd      	mov	sp, r7
    7892:	f85d 7b04 	ldr.w	r7, [sp], #4
    7896:	4770      	bx	lr

00007898 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7898:	b580      	push	{r7, lr}
    789a:	b082      	sub	sp, #8
    789c:	af00      	add	r7, sp, #0
    789e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    78a0:	687b      	ldr	r3, [r7, #4]
    78a2:	681b      	ldr	r3, [r3, #0]
    78a4:	f043 0202 	orr.w	r2, r3, #2
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    78ac:	2103      	movs	r1, #3
    78ae:	6878      	ldr	r0, [r7, #4]
    78b0:	4b02      	ldr	r3, [pc, #8]	; (78bc <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    78b2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78b4:	bf00      	nop
    78b6:	3708      	adds	r7, #8
    78b8:	46bd      	mov	sp, r7
    78ba:	bd80      	pop	{r7, pc}
    78bc:	000077ad 	.word	0x000077ad

000078c0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    78c0:	b580      	push	{r7, lr}
    78c2:	b084      	sub	sp, #16
    78c4:	af00      	add	r7, sp, #0
    78c6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    78c8:	2103      	movs	r1, #3
    78ca:	6878      	ldr	r0, [r7, #4]
    78cc:	4b09      	ldr	r3, [pc, #36]	; (78f4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    78ce:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    78d0:	687b      	ldr	r3, [r7, #4]
    78d2:	681b      	ldr	r3, [r3, #0]
    78d4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    78d6:	68fb      	ldr	r3, [r7, #12]
    78d8:	085b      	lsrs	r3, r3, #1
    78da:	f003 0301 	and.w	r3, r3, #1
    78de:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    78e0:	68fb      	ldr	r3, [r7, #12]
    78e2:	2b00      	cmp	r3, #0
    78e4:	bf14      	ite	ne
    78e6:	2301      	movne	r3, #1
    78e8:	2300      	moveq	r3, #0
    78ea:	b2db      	uxtb	r3, r3
}
    78ec:	4618      	mov	r0, r3
    78ee:	3710      	adds	r7, #16
    78f0:	46bd      	mov	sp, r7
    78f2:	bd80      	pop	{r7, pc}
    78f4:	000077ad 	.word	0x000077ad

000078f8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b082      	sub	sp, #8
    78fc:	af00      	add	r7, sp, #0
    78fe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	681b      	ldr	r3, [r3, #0]
    7904:	f023 0202 	bic.w	r2, r3, #2
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    790c:	2103      	movs	r1, #3
    790e:	6878      	ldr	r0, [r7, #4]
    7910:	4b02      	ldr	r3, [pc, #8]	; (791c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7912:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7914:	bf00      	nop
    7916:	3708      	adds	r7, #8
    7918:	46bd      	mov	sp, r7
    791a:	bd80      	pop	{r7, pc}
    791c:	000077ad 	.word	0x000077ad

00007920 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7920:	b580      	push	{r7, lr}
    7922:	b084      	sub	sp, #16
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
    7928:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    792a:	2103      	movs	r1, #3
    792c:	6878      	ldr	r0, [r7, #4]
    792e:	4b07      	ldr	r3, [pc, #28]	; (794c <hri_tc_get_CTRLA_reg+0x2c>)
    7930:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7932:	687b      	ldr	r3, [r7, #4]
    7934:	681b      	ldr	r3, [r3, #0]
    7936:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7938:	68fa      	ldr	r2, [r7, #12]
    793a:	683b      	ldr	r3, [r7, #0]
    793c:	4013      	ands	r3, r2
    793e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7940:	68fb      	ldr	r3, [r7, #12]
}
    7942:	4618      	mov	r0, r3
    7944:	3710      	adds	r7, #16
    7946:	46bd      	mov	sp, r7
    7948:	bd80      	pop	{r7, pc}
    794a:	bf00      	nop
    794c:	000077ad 	.word	0x000077ad

00007950 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7950:	b580      	push	{r7, lr}
    7952:	b082      	sub	sp, #8
    7954:	af00      	add	r7, sp, #0
    7956:	6078      	str	r0, [r7, #4]
    7958:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	683a      	ldr	r2, [r7, #0]
    795e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7960:	2103      	movs	r1, #3
    7962:	6878      	ldr	r0, [r7, #4]
    7964:	4b02      	ldr	r3, [pc, #8]	; (7970 <hri_tc_write_CTRLA_reg+0x20>)
    7966:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7968:	bf00      	nop
    796a:	3708      	adds	r7, #8
    796c:	46bd      	mov	sp, r7
    796e:	bd80      	pop	{r7, pc}
    7970:	000077ad 	.word	0x000077ad

00007974 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7974:	b480      	push	{r7}
    7976:	b083      	sub	sp, #12
    7978:	af00      	add	r7, sp, #0
    797a:	6078      	str	r0, [r7, #4]
    797c:	460b      	mov	r3, r1
    797e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	887a      	ldrh	r2, [r7, #2]
    7984:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7986:	bf00      	nop
    7988:	370c      	adds	r7, #12
    798a:	46bd      	mov	sp, r7
    798c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7990:	4770      	bx	lr

00007992 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7992:	b480      	push	{r7}
    7994:	b083      	sub	sp, #12
    7996:	af00      	add	r7, sp, #0
    7998:	6078      	str	r0, [r7, #4]
    799a:	460b      	mov	r3, r1
    799c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	78fa      	ldrb	r2, [r7, #3]
    79a2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    79a4:	bf00      	nop
    79a6:	370c      	adds	r7, #12
    79a8:	46bd      	mov	sp, r7
    79aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ae:	4770      	bx	lr

000079b0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    79b0:	b480      	push	{r7}
    79b2:	b083      	sub	sp, #12
    79b4:	af00      	add	r7, sp, #0
    79b6:	6078      	str	r0, [r7, #4]
    79b8:	460b      	mov	r3, r1
    79ba:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	78fa      	ldrb	r2, [r7, #3]
    79c0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    79c2:	bf00      	nop
    79c4:	370c      	adds	r7, #12
    79c6:	46bd      	mov	sp, r7
    79c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79cc:	4770      	bx	lr
	...

000079d0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    79d0:	b580      	push	{r7, lr}
    79d2:	b082      	sub	sp, #8
    79d4:	af00      	add	r7, sp, #0
    79d6:	6078      	str	r0, [r7, #4]
    79d8:	460b      	mov	r3, r1
    79da:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	78fa      	ldrb	r2, [r7, #3]
    79e0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    79e2:	2120      	movs	r1, #32
    79e4:	6878      	ldr	r0, [r7, #4]
    79e6:	4b03      	ldr	r3, [pc, #12]	; (79f4 <hri_tccount8_write_PER_reg+0x24>)
    79e8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79ea:	bf00      	nop
    79ec:	3708      	adds	r7, #8
    79ee:	46bd      	mov	sp, r7
    79f0:	bd80      	pop	{r7, pc}
    79f2:	bf00      	nop
    79f4:	000077ad 	.word	0x000077ad

000079f8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    79f8:	b580      	push	{r7, lr}
    79fa:	b082      	sub	sp, #8
    79fc:	af00      	add	r7, sp, #0
    79fe:	6078      	str	r0, [r7, #4]
    7a00:	460b      	mov	r3, r1
    7a02:	70fb      	strb	r3, [r7, #3]
    7a04:	4613      	mov	r3, r2
    7a06:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7a08:	78fb      	ldrb	r3, [r7, #3]
    7a0a:	687a      	ldr	r2, [r7, #4]
    7a0c:	4413      	add	r3, r2
    7a0e:	78ba      	ldrb	r2, [r7, #2]
    7a10:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a12:	21c0      	movs	r1, #192	; 0xc0
    7a14:	6878      	ldr	r0, [r7, #4]
    7a16:	4b03      	ldr	r3, [pc, #12]	; (7a24 <hri_tccount8_write_CC_reg+0x2c>)
    7a18:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a1a:	bf00      	nop
    7a1c:	3708      	adds	r7, #8
    7a1e:	46bd      	mov	sp, r7
    7a20:	bd80      	pop	{r7, pc}
    7a22:	bf00      	nop
    7a24:	000077ad 	.word	0x000077ad

00007a28 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7a28:	b580      	push	{r7, lr}
    7a2a:	b082      	sub	sp, #8
    7a2c:	af00      	add	r7, sp, #0
    7a2e:	6078      	str	r0, [r7, #4]
    7a30:	460b      	mov	r3, r1
    7a32:	70fb      	strb	r3, [r7, #3]
    7a34:	4613      	mov	r3, r2
    7a36:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7a38:	78fb      	ldrb	r3, [r7, #3]
    7a3a:	687a      	ldr	r2, [r7, #4]
    7a3c:	330c      	adds	r3, #12
    7a3e:	005b      	lsls	r3, r3, #1
    7a40:	4413      	add	r3, r2
    7a42:	883a      	ldrh	r2, [r7, #0]
    7a44:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a46:	21c0      	movs	r1, #192	; 0xc0
    7a48:	6878      	ldr	r0, [r7, #4]
    7a4a:	4b03      	ldr	r3, [pc, #12]	; (7a58 <hri_tccount16_write_CC_reg+0x30>)
    7a4c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a4e:	bf00      	nop
    7a50:	3708      	adds	r7, #8
    7a52:	46bd      	mov	sp, r7
    7a54:	bd80      	pop	{r7, pc}
    7a56:	bf00      	nop
    7a58:	000077ad 	.word	0x000077ad

00007a5c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7a5c:	b580      	push	{r7, lr}
    7a5e:	b084      	sub	sp, #16
    7a60:	af00      	add	r7, sp, #0
    7a62:	60f8      	str	r0, [r7, #12]
    7a64:	460b      	mov	r3, r1
    7a66:	607a      	str	r2, [r7, #4]
    7a68:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7a6a:	7afb      	ldrb	r3, [r7, #11]
    7a6c:	68fa      	ldr	r2, [r7, #12]
    7a6e:	3306      	adds	r3, #6
    7a70:	009b      	lsls	r3, r3, #2
    7a72:	4413      	add	r3, r2
    7a74:	687a      	ldr	r2, [r7, #4]
    7a76:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a78:	21c0      	movs	r1, #192	; 0xc0
    7a7a:	68f8      	ldr	r0, [r7, #12]
    7a7c:	4b02      	ldr	r3, [pc, #8]	; (7a88 <hri_tccount32_write_CC_reg+0x2c>)
    7a7e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a80:	bf00      	nop
    7a82:	3710      	adds	r7, #16
    7a84:	46bd      	mov	sp, r7
    7a86:	bd80      	pop	{r7, pc}
    7a88:	000077ad 	.word	0x000077ad

00007a8c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7a8c:	b580      	push	{r7, lr}
    7a8e:	b084      	sub	sp, #16
    7a90:	af00      	add	r7, sp, #0
    7a92:	6078      	str	r0, [r7, #4]
    7a94:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7a96:	6838      	ldr	r0, [r7, #0]
    7a98:	4b93      	ldr	r3, [pc, #588]	; (7ce8 <_timer_init+0x25c>)
    7a9a:	4798      	blx	r3
    7a9c:	4603      	mov	r3, r0
    7a9e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	683a      	ldr	r2, [r7, #0]
    7aa4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7aa6:	2299      	movs	r2, #153	; 0x99
    7aa8:	4990      	ldr	r1, [pc, #576]	; (7cec <_timer_init+0x260>)
    7aaa:	2001      	movs	r0, #1
    7aac:	4b90      	ldr	r3, [pc, #576]	; (7cf0 <_timer_init+0x264>)
    7aae:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7ab0:	2101      	movs	r1, #1
    7ab2:	6838      	ldr	r0, [r7, #0]
    7ab4:	4b8f      	ldr	r3, [pc, #572]	; (7cf4 <_timer_init+0x268>)
    7ab6:	4798      	blx	r3
    7ab8:	4603      	mov	r3, r0
    7aba:	f083 0301 	eor.w	r3, r3, #1
    7abe:	b2db      	uxtb	r3, r3
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d011      	beq.n	7ae8 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7ac4:	2102      	movs	r1, #2
    7ac6:	6838      	ldr	r0, [r7, #0]
    7ac8:	4b8b      	ldr	r3, [pc, #556]	; (7cf8 <_timer_init+0x26c>)
    7aca:	4798      	blx	r3
    7acc:	4603      	mov	r3, r0
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d006      	beq.n	7ae0 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7ad2:	6838      	ldr	r0, [r7, #0]
    7ad4:	4b89      	ldr	r3, [pc, #548]	; (7cfc <_timer_init+0x270>)
    7ad6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7ad8:	2102      	movs	r1, #2
    7ada:	6838      	ldr	r0, [r7, #0]
    7adc:	4b88      	ldr	r3, [pc, #544]	; (7d00 <_timer_init+0x274>)
    7ade:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7ae0:	2101      	movs	r1, #1
    7ae2:	6838      	ldr	r0, [r7, #0]
    7ae4:	4b87      	ldr	r3, [pc, #540]	; (7d04 <_timer_init+0x278>)
    7ae6:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7ae8:	2101      	movs	r1, #1
    7aea:	6838      	ldr	r0, [r7, #0]
    7aec:	4b84      	ldr	r3, [pc, #528]	; (7d00 <_timer_init+0x274>)
    7aee:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7af0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7af4:	4984      	ldr	r1, [pc, #528]	; (7d08 <_timer_init+0x27c>)
    7af6:	4613      	mov	r3, r2
    7af8:	009b      	lsls	r3, r3, #2
    7afa:	4413      	add	r3, r2
    7afc:	009b      	lsls	r3, r3, #2
    7afe:	440b      	add	r3, r1
    7b00:	3304      	adds	r3, #4
    7b02:	681b      	ldr	r3, [r3, #0]
    7b04:	4619      	mov	r1, r3
    7b06:	6838      	ldr	r0, [r7, #0]
    7b08:	4b7e      	ldr	r3, [pc, #504]	; (7d04 <_timer_init+0x278>)
    7b0a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7b0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b10:	497d      	ldr	r1, [pc, #500]	; (7d08 <_timer_init+0x27c>)
    7b12:	4613      	mov	r3, r2
    7b14:	009b      	lsls	r3, r3, #2
    7b16:	4413      	add	r3, r2
    7b18:	009b      	lsls	r3, r3, #2
    7b1a:	440b      	add	r3, r1
    7b1c:	330a      	adds	r3, #10
    7b1e:	781b      	ldrb	r3, [r3, #0]
    7b20:	4619      	mov	r1, r3
    7b22:	6838      	ldr	r0, [r7, #0]
    7b24:	4b79      	ldr	r3, [pc, #484]	; (7d0c <_timer_init+0x280>)
    7b26:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7b28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b2c:	4976      	ldr	r1, [pc, #472]	; (7d08 <_timer_init+0x27c>)
    7b2e:	4613      	mov	r3, r2
    7b30:	009b      	lsls	r3, r3, #2
    7b32:	4413      	add	r3, r2
    7b34:	009b      	lsls	r3, r3, #2
    7b36:	440b      	add	r3, r1
    7b38:	3308      	adds	r3, #8
    7b3a:	881b      	ldrh	r3, [r3, #0]
    7b3c:	4619      	mov	r1, r3
    7b3e:	6838      	ldr	r0, [r7, #0]
    7b40:	4b73      	ldr	r3, [pc, #460]	; (7d10 <_timer_init+0x284>)
    7b42:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7b44:	2101      	movs	r1, #1
    7b46:	6838      	ldr	r0, [r7, #0]
    7b48:	4b72      	ldr	r3, [pc, #456]	; (7d14 <_timer_init+0x288>)
    7b4a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7b4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b50:	496d      	ldr	r1, [pc, #436]	; (7d08 <_timer_init+0x27c>)
    7b52:	4613      	mov	r3, r2
    7b54:	009b      	lsls	r3, r3, #2
    7b56:	4413      	add	r3, r2
    7b58:	009b      	lsls	r3, r3, #2
    7b5a:	440b      	add	r3, r1
    7b5c:	3304      	adds	r3, #4
    7b5e:	681b      	ldr	r3, [r3, #0]
    7b60:	f003 030c 	and.w	r3, r3, #12
    7b64:	2b08      	cmp	r3, #8
    7b66:	d11e      	bne.n	7ba6 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7b68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b6c:	4966      	ldr	r1, [pc, #408]	; (7d08 <_timer_init+0x27c>)
    7b6e:	4613      	mov	r3, r2
    7b70:	009b      	lsls	r3, r3, #2
    7b72:	4413      	add	r3, r2
    7b74:	009b      	lsls	r3, r3, #2
    7b76:	440b      	add	r3, r1
    7b78:	330c      	adds	r3, #12
    7b7a:	681b      	ldr	r3, [r3, #0]
    7b7c:	461a      	mov	r2, r3
    7b7e:	2100      	movs	r1, #0
    7b80:	6838      	ldr	r0, [r7, #0]
    7b82:	4b65      	ldr	r3, [pc, #404]	; (7d18 <_timer_init+0x28c>)
    7b84:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7b86:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b8a:	495f      	ldr	r1, [pc, #380]	; (7d08 <_timer_init+0x27c>)
    7b8c:	4613      	mov	r3, r2
    7b8e:	009b      	lsls	r3, r3, #2
    7b90:	4413      	add	r3, r2
    7b92:	009b      	lsls	r3, r3, #2
    7b94:	440b      	add	r3, r1
    7b96:	3310      	adds	r3, #16
    7b98:	681b      	ldr	r3, [r3, #0]
    7b9a:	461a      	mov	r2, r3
    7b9c:	2101      	movs	r1, #1
    7b9e:	6838      	ldr	r0, [r7, #0]
    7ba0:	4b5d      	ldr	r3, [pc, #372]	; (7d18 <_timer_init+0x28c>)
    7ba2:	4798      	blx	r3
    7ba4:	e06a      	b.n	7c7c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7ba6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7baa:	4957      	ldr	r1, [pc, #348]	; (7d08 <_timer_init+0x27c>)
    7bac:	4613      	mov	r3, r2
    7bae:	009b      	lsls	r3, r3, #2
    7bb0:	4413      	add	r3, r2
    7bb2:	009b      	lsls	r3, r3, #2
    7bb4:	440b      	add	r3, r1
    7bb6:	3304      	adds	r3, #4
    7bb8:	681b      	ldr	r3, [r3, #0]
    7bba:	f003 030c 	and.w	r3, r3, #12
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d120      	bne.n	7c04 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7bc2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bc6:	4950      	ldr	r1, [pc, #320]	; (7d08 <_timer_init+0x27c>)
    7bc8:	4613      	mov	r3, r2
    7bca:	009b      	lsls	r3, r3, #2
    7bcc:	4413      	add	r3, r2
    7bce:	009b      	lsls	r3, r3, #2
    7bd0:	440b      	add	r3, r1
    7bd2:	330c      	adds	r3, #12
    7bd4:	681b      	ldr	r3, [r3, #0]
    7bd6:	b29b      	uxth	r3, r3
    7bd8:	461a      	mov	r2, r3
    7bda:	2100      	movs	r1, #0
    7bdc:	6838      	ldr	r0, [r7, #0]
    7bde:	4b4f      	ldr	r3, [pc, #316]	; (7d1c <_timer_init+0x290>)
    7be0:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7be2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7be6:	4948      	ldr	r1, [pc, #288]	; (7d08 <_timer_init+0x27c>)
    7be8:	4613      	mov	r3, r2
    7bea:	009b      	lsls	r3, r3, #2
    7bec:	4413      	add	r3, r2
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	440b      	add	r3, r1
    7bf2:	3310      	adds	r3, #16
    7bf4:	681b      	ldr	r3, [r3, #0]
    7bf6:	b29b      	uxth	r3, r3
    7bf8:	461a      	mov	r2, r3
    7bfa:	2101      	movs	r1, #1
    7bfc:	6838      	ldr	r0, [r7, #0]
    7bfe:	4b47      	ldr	r3, [pc, #284]	; (7d1c <_timer_init+0x290>)
    7c00:	4798      	blx	r3
    7c02:	e03b      	b.n	7c7c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7c04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c08:	493f      	ldr	r1, [pc, #252]	; (7d08 <_timer_init+0x27c>)
    7c0a:	4613      	mov	r3, r2
    7c0c:	009b      	lsls	r3, r3, #2
    7c0e:	4413      	add	r3, r2
    7c10:	009b      	lsls	r3, r3, #2
    7c12:	440b      	add	r3, r1
    7c14:	3304      	adds	r3, #4
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	f003 030c 	and.w	r3, r3, #12
    7c1c:	2b04      	cmp	r3, #4
    7c1e:	d12d      	bne.n	7c7c <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7c20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c24:	4938      	ldr	r1, [pc, #224]	; (7d08 <_timer_init+0x27c>)
    7c26:	4613      	mov	r3, r2
    7c28:	009b      	lsls	r3, r3, #2
    7c2a:	4413      	add	r3, r2
    7c2c:	009b      	lsls	r3, r3, #2
    7c2e:	440b      	add	r3, r1
    7c30:	330c      	adds	r3, #12
    7c32:	681b      	ldr	r3, [r3, #0]
    7c34:	b2db      	uxtb	r3, r3
    7c36:	461a      	mov	r2, r3
    7c38:	2100      	movs	r1, #0
    7c3a:	6838      	ldr	r0, [r7, #0]
    7c3c:	4b38      	ldr	r3, [pc, #224]	; (7d20 <_timer_init+0x294>)
    7c3e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7c40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c44:	4930      	ldr	r1, [pc, #192]	; (7d08 <_timer_init+0x27c>)
    7c46:	4613      	mov	r3, r2
    7c48:	009b      	lsls	r3, r3, #2
    7c4a:	4413      	add	r3, r2
    7c4c:	009b      	lsls	r3, r3, #2
    7c4e:	440b      	add	r3, r1
    7c50:	3310      	adds	r3, #16
    7c52:	681b      	ldr	r3, [r3, #0]
    7c54:	b2db      	uxtb	r3, r3
    7c56:	461a      	mov	r2, r3
    7c58:	2101      	movs	r1, #1
    7c5a:	6838      	ldr	r0, [r7, #0]
    7c5c:	4b30      	ldr	r3, [pc, #192]	; (7d20 <_timer_init+0x294>)
    7c5e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7c60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c64:	4928      	ldr	r1, [pc, #160]	; (7d08 <_timer_init+0x27c>)
    7c66:	4613      	mov	r3, r2
    7c68:	009b      	lsls	r3, r3, #2
    7c6a:	4413      	add	r3, r2
    7c6c:	009b      	lsls	r3, r3, #2
    7c6e:	440b      	add	r3, r1
    7c70:	330b      	adds	r3, #11
    7c72:	781b      	ldrb	r3, [r3, #0]
    7c74:	4619      	mov	r1, r3
    7c76:	6838      	ldr	r0, [r7, #0]
    7c78:	4b2a      	ldr	r3, [pc, #168]	; (7d24 <_timer_init+0x298>)
    7c7a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7c7c:	6838      	ldr	r0, [r7, #0]
    7c7e:	4b2a      	ldr	r3, [pc, #168]	; (7d28 <_timer_init+0x29c>)
    7c80:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7c82:	6879      	ldr	r1, [r7, #4]
    7c84:	6838      	ldr	r0, [r7, #0]
    7c86:	4b29      	ldr	r3, [pc, #164]	; (7d2c <_timer_init+0x2a0>)
    7c88:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c8e:	491e      	ldr	r1, [pc, #120]	; (7d08 <_timer_init+0x27c>)
    7c90:	4613      	mov	r3, r2
    7c92:	009b      	lsls	r3, r3, #2
    7c94:	4413      	add	r3, r2
    7c96:	009b      	lsls	r3, r3, #2
    7c98:	440b      	add	r3, r1
    7c9a:	3302      	adds	r3, #2
    7c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ca0:	4618      	mov	r0, r3
    7ca2:	4b23      	ldr	r3, [pc, #140]	; (7d30 <_timer_init+0x2a4>)
    7ca4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7ca6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7caa:	4917      	ldr	r1, [pc, #92]	; (7d08 <_timer_init+0x27c>)
    7cac:	4613      	mov	r3, r2
    7cae:	009b      	lsls	r3, r3, #2
    7cb0:	4413      	add	r3, r2
    7cb2:	009b      	lsls	r3, r3, #2
    7cb4:	440b      	add	r3, r1
    7cb6:	3302      	adds	r3, #2
    7cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
    7cbc:	4618      	mov	r0, r3
    7cbe:	4b1d      	ldr	r3, [pc, #116]	; (7d34 <_timer_init+0x2a8>)
    7cc0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7cc2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cc6:	4910      	ldr	r1, [pc, #64]	; (7d08 <_timer_init+0x27c>)
    7cc8:	4613      	mov	r3, r2
    7cca:	009b      	lsls	r3, r3, #2
    7ccc:	4413      	add	r3, r2
    7cce:	009b      	lsls	r3, r3, #2
    7cd0:	440b      	add	r3, r1
    7cd2:	3302      	adds	r3, #2
    7cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
    7cd8:	4618      	mov	r0, r3
    7cda:	4b17      	ldr	r3, [pc, #92]	; (7d38 <_timer_init+0x2ac>)
    7cdc:	4798      	blx	r3

	return ERR_NONE;
    7cde:	2300      	movs	r3, #0
}
    7ce0:	4618      	mov	r0, r3
    7ce2:	3710      	adds	r7, #16
    7ce4:	46bd      	mov	sp, r7
    7ce6:	bd80      	pop	{r7, pc}
    7ce8:	000081e1 	.word	0x000081e1
    7cec:	0000f0bc 	.word	0x0000f0bc
    7cf0:	000038fd 	.word	0x000038fd
    7cf4:	000077d1 	.word	0x000077d1
    7cf8:	00007921 	.word	0x00007921
    7cfc:	000078f9 	.word	0x000078f9
    7d00:	000077ad 	.word	0x000077ad
    7d04:	00007951 	.word	0x00007951
    7d08:	20000048 	.word	0x20000048
    7d0c:	000079b1 	.word	0x000079b1
    7d10:	00007975 	.word	0x00007975
    7d14:	00007993 	.word	0x00007993
    7d18:	00007a5d 	.word	0x00007a5d
    7d1c:	00007a29 	.word	0x00007a29
    7d20:	000079f9 	.word	0x000079f9
    7d24:	000079d1 	.word	0x000079d1
    7d28:	00007855 	.word	0x00007855
    7d2c:	00008249 	.word	0x00008249
    7d30:	0000772d 	.word	0x0000772d
    7d34:	00007771 	.word	0x00007771
    7d38:	000076f1 	.word	0x000076f1

00007d3c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7d3c:	b580      	push	{r7, lr}
    7d3e:	b084      	sub	sp, #16
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
    7d44:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7d46:	6838      	ldr	r0, [r7, #0]
    7d48:	4b73      	ldr	r3, [pc, #460]	; (7f18 <_pwm_init+0x1dc>)
    7d4a:	4798      	blx	r3
    7d4c:	4603      	mov	r3, r0
    7d4e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7d50:	687b      	ldr	r3, [r7, #4]
    7d52:	683a      	ldr	r2, [r7, #0]
    7d54:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d56:	2101      	movs	r1, #1
    7d58:	6838      	ldr	r0, [r7, #0]
    7d5a:	4b70      	ldr	r3, [pc, #448]	; (7f1c <_pwm_init+0x1e0>)
    7d5c:	4798      	blx	r3
    7d5e:	4603      	mov	r3, r0
    7d60:	f083 0301 	eor.w	r3, r3, #1
    7d64:	b2db      	uxtb	r3, r3
    7d66:	2b00      	cmp	r3, #0
    7d68:	d011      	beq.n	7d8e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d6a:	2102      	movs	r1, #2
    7d6c:	6838      	ldr	r0, [r7, #0]
    7d6e:	4b6c      	ldr	r3, [pc, #432]	; (7f20 <_pwm_init+0x1e4>)
    7d70:	4798      	blx	r3
    7d72:	4603      	mov	r3, r0
    7d74:	2b00      	cmp	r3, #0
    7d76:	d006      	beq.n	7d86 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d78:	6838      	ldr	r0, [r7, #0]
    7d7a:	4b6a      	ldr	r3, [pc, #424]	; (7f24 <_pwm_init+0x1e8>)
    7d7c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d7e:	2102      	movs	r1, #2
    7d80:	6838      	ldr	r0, [r7, #0]
    7d82:	4b69      	ldr	r3, [pc, #420]	; (7f28 <_pwm_init+0x1ec>)
    7d84:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d86:	2101      	movs	r1, #1
    7d88:	6838      	ldr	r0, [r7, #0]
    7d8a:	4b68      	ldr	r3, [pc, #416]	; (7f2c <_pwm_init+0x1f0>)
    7d8c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d8e:	2101      	movs	r1, #1
    7d90:	6838      	ldr	r0, [r7, #0]
    7d92:	4b65      	ldr	r3, [pc, #404]	; (7f28 <_pwm_init+0x1ec>)
    7d94:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d96:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d9a:	4965      	ldr	r1, [pc, #404]	; (7f30 <_pwm_init+0x1f4>)
    7d9c:	4613      	mov	r3, r2
    7d9e:	009b      	lsls	r3, r3, #2
    7da0:	4413      	add	r3, r2
    7da2:	009b      	lsls	r3, r3, #2
    7da4:	440b      	add	r3, r1
    7da6:	3304      	adds	r3, #4
    7da8:	681b      	ldr	r3, [r3, #0]
    7daa:	4619      	mov	r1, r3
    7dac:	6838      	ldr	r0, [r7, #0]
    7dae:	4b5f      	ldr	r3, [pc, #380]	; (7f2c <_pwm_init+0x1f0>)
    7db0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7db2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7db6:	495e      	ldr	r1, [pc, #376]	; (7f30 <_pwm_init+0x1f4>)
    7db8:	4613      	mov	r3, r2
    7dba:	009b      	lsls	r3, r3, #2
    7dbc:	4413      	add	r3, r2
    7dbe:	009b      	lsls	r3, r3, #2
    7dc0:	440b      	add	r3, r1
    7dc2:	330a      	adds	r3, #10
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	4619      	mov	r1, r3
    7dc8:	6838      	ldr	r0, [r7, #0]
    7dca:	4b5a      	ldr	r3, [pc, #360]	; (7f34 <_pwm_init+0x1f8>)
    7dcc:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7dce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dd2:	4957      	ldr	r1, [pc, #348]	; (7f30 <_pwm_init+0x1f4>)
    7dd4:	4613      	mov	r3, r2
    7dd6:	009b      	lsls	r3, r3, #2
    7dd8:	4413      	add	r3, r2
    7dda:	009b      	lsls	r3, r3, #2
    7ddc:	440b      	add	r3, r1
    7dde:	3308      	adds	r3, #8
    7de0:	881b      	ldrh	r3, [r3, #0]
    7de2:	4619      	mov	r1, r3
    7de4:	6838      	ldr	r0, [r7, #0]
    7de6:	4b54      	ldr	r3, [pc, #336]	; (7f38 <_pwm_init+0x1fc>)
    7de8:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7dea:	2103      	movs	r1, #3
    7dec:	6838      	ldr	r0, [r7, #0]
    7dee:	4b53      	ldr	r3, [pc, #332]	; (7f3c <_pwm_init+0x200>)
    7df0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7df2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7df6:	494e      	ldr	r1, [pc, #312]	; (7f30 <_pwm_init+0x1f4>)
    7df8:	4613      	mov	r3, r2
    7dfa:	009b      	lsls	r3, r3, #2
    7dfc:	4413      	add	r3, r2
    7dfe:	009b      	lsls	r3, r3, #2
    7e00:	440b      	add	r3, r1
    7e02:	3304      	adds	r3, #4
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	f003 030c 	and.w	r3, r3, #12
    7e0a:	2b08      	cmp	r3, #8
    7e0c:	d11e      	bne.n	7e4c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7e0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e12:	4947      	ldr	r1, [pc, #284]	; (7f30 <_pwm_init+0x1f4>)
    7e14:	4613      	mov	r3, r2
    7e16:	009b      	lsls	r3, r3, #2
    7e18:	4413      	add	r3, r2
    7e1a:	009b      	lsls	r3, r3, #2
    7e1c:	440b      	add	r3, r1
    7e1e:	330c      	adds	r3, #12
    7e20:	681b      	ldr	r3, [r3, #0]
    7e22:	461a      	mov	r2, r3
    7e24:	2100      	movs	r1, #0
    7e26:	6838      	ldr	r0, [r7, #0]
    7e28:	4b45      	ldr	r3, [pc, #276]	; (7f40 <_pwm_init+0x204>)
    7e2a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7e2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e30:	493f      	ldr	r1, [pc, #252]	; (7f30 <_pwm_init+0x1f4>)
    7e32:	4613      	mov	r3, r2
    7e34:	009b      	lsls	r3, r3, #2
    7e36:	4413      	add	r3, r2
    7e38:	009b      	lsls	r3, r3, #2
    7e3a:	440b      	add	r3, r1
    7e3c:	3310      	adds	r3, #16
    7e3e:	681b      	ldr	r3, [r3, #0]
    7e40:	461a      	mov	r2, r3
    7e42:	2101      	movs	r1, #1
    7e44:	6838      	ldr	r0, [r7, #0]
    7e46:	4b3e      	ldr	r3, [pc, #248]	; (7f40 <_pwm_init+0x204>)
    7e48:	4798      	blx	r3
    7e4a:	e031      	b.n	7eb0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7e4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e50:	4937      	ldr	r1, [pc, #220]	; (7f30 <_pwm_init+0x1f4>)
    7e52:	4613      	mov	r3, r2
    7e54:	009b      	lsls	r3, r3, #2
    7e56:	4413      	add	r3, r2
    7e58:	009b      	lsls	r3, r3, #2
    7e5a:	440b      	add	r3, r1
    7e5c:	3304      	adds	r3, #4
    7e5e:	681b      	ldr	r3, [r3, #0]
    7e60:	f003 030c 	and.w	r3, r3, #12
    7e64:	2b00      	cmp	r3, #0
    7e66:	d120      	bne.n	7eaa <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7e68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e6c:	4930      	ldr	r1, [pc, #192]	; (7f30 <_pwm_init+0x1f4>)
    7e6e:	4613      	mov	r3, r2
    7e70:	009b      	lsls	r3, r3, #2
    7e72:	4413      	add	r3, r2
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	440b      	add	r3, r1
    7e78:	330c      	adds	r3, #12
    7e7a:	681b      	ldr	r3, [r3, #0]
    7e7c:	b29b      	uxth	r3, r3
    7e7e:	461a      	mov	r2, r3
    7e80:	2100      	movs	r1, #0
    7e82:	6838      	ldr	r0, [r7, #0]
    7e84:	4b2f      	ldr	r3, [pc, #188]	; (7f44 <_pwm_init+0x208>)
    7e86:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e8c:	4928      	ldr	r1, [pc, #160]	; (7f30 <_pwm_init+0x1f4>)
    7e8e:	4613      	mov	r3, r2
    7e90:	009b      	lsls	r3, r3, #2
    7e92:	4413      	add	r3, r2
    7e94:	009b      	lsls	r3, r3, #2
    7e96:	440b      	add	r3, r1
    7e98:	3310      	adds	r3, #16
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	b29b      	uxth	r3, r3
    7e9e:	461a      	mov	r2, r3
    7ea0:	2101      	movs	r1, #1
    7ea2:	6838      	ldr	r0, [r7, #0]
    7ea4:	4b27      	ldr	r3, [pc, #156]	; (7f44 <_pwm_init+0x208>)
    7ea6:	4798      	blx	r3
    7ea8:	e002      	b.n	7eb0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7eaa:	f04f 33ff 	mov.w	r3, #4294967295
    7eae:	e02e      	b.n	7f0e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7eb0:	6879      	ldr	r1, [r7, #4]
    7eb2:	6838      	ldr	r0, [r7, #0]
    7eb4:	4b24      	ldr	r3, [pc, #144]	; (7f48 <_pwm_init+0x20c>)
    7eb6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7eb8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ebc:	491c      	ldr	r1, [pc, #112]	; (7f30 <_pwm_init+0x1f4>)
    7ebe:	4613      	mov	r3, r2
    7ec0:	009b      	lsls	r3, r3, #2
    7ec2:	4413      	add	r3, r2
    7ec4:	009b      	lsls	r3, r3, #2
    7ec6:	440b      	add	r3, r1
    7ec8:	3302      	adds	r3, #2
    7eca:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ece:	4618      	mov	r0, r3
    7ed0:	4b1e      	ldr	r3, [pc, #120]	; (7f4c <_pwm_init+0x210>)
    7ed2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7ed4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ed8:	4915      	ldr	r1, [pc, #84]	; (7f30 <_pwm_init+0x1f4>)
    7eda:	4613      	mov	r3, r2
    7edc:	009b      	lsls	r3, r3, #2
    7ede:	4413      	add	r3, r2
    7ee0:	009b      	lsls	r3, r3, #2
    7ee2:	440b      	add	r3, r1
    7ee4:	3302      	adds	r3, #2
    7ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
    7eea:	4618      	mov	r0, r3
    7eec:	4b18      	ldr	r3, [pc, #96]	; (7f50 <_pwm_init+0x214>)
    7eee:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7ef0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ef4:	490e      	ldr	r1, [pc, #56]	; (7f30 <_pwm_init+0x1f4>)
    7ef6:	4613      	mov	r3, r2
    7ef8:	009b      	lsls	r3, r3, #2
    7efa:	4413      	add	r3, r2
    7efc:	009b      	lsls	r3, r3, #2
    7efe:	440b      	add	r3, r1
    7f00:	3302      	adds	r3, #2
    7f02:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f06:	4618      	mov	r0, r3
    7f08:	4b12      	ldr	r3, [pc, #72]	; (7f54 <_pwm_init+0x218>)
    7f0a:	4798      	blx	r3

	return 0;
    7f0c:	2300      	movs	r3, #0
}
    7f0e:	4618      	mov	r0, r3
    7f10:	3710      	adds	r7, #16
    7f12:	46bd      	mov	sp, r7
    7f14:	bd80      	pop	{r7, pc}
    7f16:	bf00      	nop
    7f18:	000081e1 	.word	0x000081e1
    7f1c:	000077d1 	.word	0x000077d1
    7f20:	00007921 	.word	0x00007921
    7f24:	000078f9 	.word	0x000078f9
    7f28:	000077ad 	.word	0x000077ad
    7f2c:	00007951 	.word	0x00007951
    7f30:	20000048 	.word	0x20000048
    7f34:	000079b1 	.word	0x000079b1
    7f38:	00007975 	.word	0x00007975
    7f3c:	00007993 	.word	0x00007993
    7f40:	00007a5d 	.word	0x00007a5d
    7f44:	00007a29 	.word	0x00007a29
    7f48:	00008249 	.word	0x00008249
    7f4c:	0000772d 	.word	0x0000772d
    7f50:	00007771 	.word	0x00007771
    7f54:	000076f1 	.word	0x000076f1

00007f58 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    7f58:	b580      	push	{r7, lr}
    7f5a:	b082      	sub	sp, #8
    7f5c:	af00      	add	r7, sp, #0
    7f5e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	68db      	ldr	r3, [r3, #12]
    7f64:	4618      	mov	r0, r3
    7f66:	4b03      	ldr	r3, [pc, #12]	; (7f74 <_timer_start+0x1c>)
    7f68:	4798      	blx	r3
}
    7f6a:	bf00      	nop
    7f6c:	3708      	adds	r7, #8
    7f6e:	46bd      	mov	sp, r7
    7f70:	bd80      	pop	{r7, pc}
    7f72:	bf00      	nop
    7f74:	00007899 	.word	0x00007899

00007f78 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	691b      	ldr	r3, [r3, #16]
    7f84:	4618      	mov	r0, r3
    7f86:	4b03      	ldr	r3, [pc, #12]	; (7f94 <_pwm_enable+0x1c>)
    7f88:	4798      	blx	r3
}
    7f8a:	bf00      	nop
    7f8c:	3708      	adds	r7, #8
    7f8e:	46bd      	mov	sp, r7
    7f90:	bd80      	pop	{r7, pc}
    7f92:	bf00      	nop
    7f94:	00007899 	.word	0x00007899

00007f98 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    7f98:	b580      	push	{r7, lr}
    7f9a:	b082      	sub	sp, #8
    7f9c:	af00      	add	r7, sp, #0
    7f9e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	68db      	ldr	r3, [r3, #12]
    7fa4:	4618      	mov	r0, r3
    7fa6:	4b03      	ldr	r3, [pc, #12]	; (7fb4 <_timer_stop+0x1c>)
    7fa8:	4798      	blx	r3
}
    7faa:	bf00      	nop
    7fac:	3708      	adds	r7, #8
    7fae:	46bd      	mov	sp, r7
    7fb0:	bd80      	pop	{r7, pc}
    7fb2:	bf00      	nop
    7fb4:	000078f9 	.word	0x000078f9

00007fb8 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b082      	sub	sp, #8
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	68db      	ldr	r3, [r3, #12]
    7fc4:	4618      	mov	r0, r3
    7fc6:	4b03      	ldr	r3, [pc, #12]	; (7fd4 <_timer_is_started+0x1c>)
    7fc8:	4798      	blx	r3
    7fca:	4603      	mov	r3, r0
}
    7fcc:	4618      	mov	r0, r3
    7fce:	3708      	adds	r7, #8
    7fd0:	46bd      	mov	sp, r7
    7fd2:	bd80      	pop	{r7, pc}
    7fd4:	000078c1 	.word	0x000078c1

00007fd8 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	691b      	ldr	r3, [r3, #16]
    7fe4:	4618      	mov	r0, r3
    7fe6:	4b03      	ldr	r3, [pc, #12]	; (7ff4 <_pwm_is_enabled+0x1c>)
    7fe8:	4798      	blx	r3
    7fea:	4603      	mov	r3, r0
}
    7fec:	4618      	mov	r0, r3
    7fee:	3708      	adds	r7, #8
    7ff0:	46bd      	mov	sp, r7
    7ff2:	bd80      	pop	{r7, pc}
    7ff4:	000078c1 	.word	0x000078c1

00007ff8 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7ff8:	b480      	push	{r7}
    7ffa:	af00      	add	r7, sp, #0
	return NULL;
    7ffc:	2300      	movs	r3, #0
}
    7ffe:	4618      	mov	r0, r3
    8000:	46bd      	mov	sp, r7
    8002:	f85d 7b04 	ldr.w	r7, [sp], #4
    8006:	4770      	bx	lr

00008008 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8008:	b480      	push	{r7}
    800a:	af00      	add	r7, sp, #0
	return NULL;
    800c:	2300      	movs	r3, #0
}
    800e:	4618      	mov	r0, r3
    8010:	46bd      	mov	sp, r7
    8012:	f85d 7b04 	ldr.w	r7, [sp], #4
    8016:	4770      	bx	lr

00008018 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    8018:	b580      	push	{r7, lr}
    801a:	b084      	sub	sp, #16
    801c:	af00      	add	r7, sp, #0
    801e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8020:	687b      	ldr	r3, [r7, #4]
    8022:	68db      	ldr	r3, [r3, #12]
    8024:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8026:	68f8      	ldr	r0, [r7, #12]
    8028:	4b0e      	ldr	r3, [pc, #56]	; (8064 <_timer_set_irq+0x4c>)
    802a:	4798      	blx	r3
    802c:	4603      	mov	r3, r0
    802e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8030:	f240 12a7 	movw	r2, #423	; 0x1a7
    8034:	490c      	ldr	r1, [pc, #48]	; (8068 <_timer_set_irq+0x50>)
    8036:	2001      	movs	r0, #1
    8038:	4b0c      	ldr	r3, [pc, #48]	; (806c <_timer_set_irq+0x54>)
    803a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    803c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8040:	490b      	ldr	r1, [pc, #44]	; (8070 <_timer_set_irq+0x58>)
    8042:	4613      	mov	r3, r2
    8044:	009b      	lsls	r3, r3, #2
    8046:	4413      	add	r3, r2
    8048:	009b      	lsls	r3, r3, #2
    804a:	440b      	add	r3, r1
    804c:	3302      	adds	r3, #2
    804e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8052:	b2db      	uxtb	r3, r3
    8054:	4618      	mov	r0, r3
    8056:	4b07      	ldr	r3, [pc, #28]	; (8074 <_timer_set_irq+0x5c>)
    8058:	4798      	blx	r3
}
    805a:	bf00      	nop
    805c:	3710      	adds	r7, #16
    805e:	46bd      	mov	sp, r7
    8060:	bd80      	pop	{r7, pc}
    8062:	bf00      	nop
    8064:	000081e1 	.word	0x000081e1
    8068:	0000f0bc 	.word	0x0000f0bc
    806c:	000038fd 	.word	0x000038fd
    8070:	20000048 	.word	0x20000048
    8074:	00004149 	.word	0x00004149

00008078 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8078:	b580      	push	{r7, lr}
    807a:	b084      	sub	sp, #16
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8080:	687b      	ldr	r3, [r7, #4]
    8082:	68db      	ldr	r3, [r3, #12]
    8084:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8086:	68f8      	ldr	r0, [r7, #12]
    8088:	4b07      	ldr	r3, [pc, #28]	; (80a8 <tc_interrupt_handler+0x30>)
    808a:	4798      	blx	r3
    808c:	4603      	mov	r3, r0
    808e:	2b00      	cmp	r3, #0
    8090:	d006      	beq.n	80a0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8092:	68f8      	ldr	r0, [r7, #12]
    8094:	4b05      	ldr	r3, [pc, #20]	; (80ac <tc_interrupt_handler+0x34>)
    8096:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8098:	687b      	ldr	r3, [r7, #4]
    809a:	681b      	ldr	r3, [r3, #0]
    809c:	6878      	ldr	r0, [r7, #4]
    809e:	4798      	blx	r3
	}
}
    80a0:	bf00      	nop
    80a2:	3710      	adds	r7, #16
    80a4:	46bd      	mov	sp, r7
    80a6:	bd80      	pop	{r7, pc}
    80a8:	000077f9 	.word	0x000077f9
    80ac:	00007821 	.word	0x00007821

000080b0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    80b0:	b580      	push	{r7, lr}
    80b2:	b084      	sub	sp, #16
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    80b8:	687b      	ldr	r3, [r7, #4]
    80ba:	691b      	ldr	r3, [r3, #16]
    80bc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    80be:	68f8      	ldr	r0, [r7, #12]
    80c0:	4b12      	ldr	r3, [pc, #72]	; (810c <tc_pwm_interrupt_handler+0x5c>)
    80c2:	4798      	blx	r3
    80c4:	4603      	mov	r3, r0
    80c6:	2b00      	cmp	r3, #0
    80c8:	d00a      	beq.n	80e0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    80ca:	68f8      	ldr	r0, [r7, #12]
    80cc:	4b10      	ldr	r3, [pc, #64]	; (8110 <tc_pwm_interrupt_handler+0x60>)
    80ce:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    80d0:	687b      	ldr	r3, [r7, #4]
    80d2:	681b      	ldr	r3, [r3, #0]
    80d4:	2b00      	cmp	r3, #0
    80d6:	d003      	beq.n	80e0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	681b      	ldr	r3, [r3, #0]
    80dc:	6878      	ldr	r0, [r7, #4]
    80de:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    80e0:	68f8      	ldr	r0, [r7, #12]
    80e2:	4b0c      	ldr	r3, [pc, #48]	; (8114 <tc_pwm_interrupt_handler+0x64>)
    80e4:	4798      	blx	r3
    80e6:	4603      	mov	r3, r0
    80e8:	2b00      	cmp	r3, #0
    80ea:	d00a      	beq.n	8102 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    80ec:	68f8      	ldr	r0, [r7, #12]
    80ee:	4b0a      	ldr	r3, [pc, #40]	; (8118 <tc_pwm_interrupt_handler+0x68>)
    80f0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	685b      	ldr	r3, [r3, #4]
    80f6:	2b00      	cmp	r3, #0
    80f8:	d003      	beq.n	8102 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    80fa:	687b      	ldr	r3, [r7, #4]
    80fc:	685b      	ldr	r3, [r3, #4]
    80fe:	6878      	ldr	r0, [r7, #4]
    8100:	4798      	blx	r3
		}
	}
}
    8102:	bf00      	nop
    8104:	3710      	adds	r7, #16
    8106:	46bd      	mov	sp, r7
    8108:	bd80      	pop	{r7, pc}
    810a:	bf00      	nop
    810c:	000077f9 	.word	0x000077f9
    8110:	00007821 	.word	0x00007821
    8114:	0000786f 	.word	0x0000786f
    8118:	0000783b 	.word	0x0000783b

0000811c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    811c:	b580      	push	{r7, lr}
    811e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8120:	4b03      	ldr	r3, [pc, #12]	; (8130 <TC0_Handler+0x14>)
    8122:	681b      	ldr	r3, [r3, #0]
    8124:	4618      	mov	r0, r3
    8126:	4b03      	ldr	r3, [pc, #12]	; (8134 <TC0_Handler+0x18>)
    8128:	4798      	blx	r3
}
    812a:	bf00      	nop
    812c:	bd80      	pop	{r7, pc}
    812e:	bf00      	nop
    8130:	20000710 	.word	0x20000710
    8134:	00008079 	.word	0x00008079

00008138 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    8138:	b580      	push	{r7, lr}
    813a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    813c:	4b03      	ldr	r3, [pc, #12]	; (814c <TC1_Handler+0x14>)
    813e:	681b      	ldr	r3, [r3, #0]
    8140:	4618      	mov	r0, r3
    8142:	4b03      	ldr	r3, [pc, #12]	; (8150 <TC1_Handler+0x18>)
    8144:	4798      	blx	r3
}
    8146:	bf00      	nop
    8148:	bd80      	pop	{r7, pc}
    814a:	bf00      	nop
    814c:	20000714 	.word	0x20000714
    8150:	00008079 	.word	0x00008079

00008154 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8154:	b580      	push	{r7, lr}
    8156:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8158:	4b03      	ldr	r3, [pc, #12]	; (8168 <TC2_Handler+0x14>)
    815a:	681b      	ldr	r3, [r3, #0]
    815c:	4618      	mov	r0, r3
    815e:	4b03      	ldr	r3, [pc, #12]	; (816c <TC2_Handler+0x18>)
    8160:	4798      	blx	r3
}
    8162:	bf00      	nop
    8164:	bd80      	pop	{r7, pc}
    8166:	bf00      	nop
    8168:	20000718 	.word	0x20000718
    816c:	00008079 	.word	0x00008079

00008170 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    8170:	b580      	push	{r7, lr}
    8172:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    8174:	4b03      	ldr	r3, [pc, #12]	; (8184 <TC3_Handler+0x14>)
    8176:	681b      	ldr	r3, [r3, #0]
    8178:	4618      	mov	r0, r3
    817a:	4b03      	ldr	r3, [pc, #12]	; (8188 <TC3_Handler+0x18>)
    817c:	4798      	blx	r3
}
    817e:	bf00      	nop
    8180:	bd80      	pop	{r7, pc}
    8182:	bf00      	nop
    8184:	2000071c 	.word	0x2000071c
    8188:	00008079 	.word	0x00008079

0000818c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    818c:	b580      	push	{r7, lr}
    818e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8190:	4b03      	ldr	r3, [pc, #12]	; (81a0 <TC4_Handler+0x14>)
    8192:	681b      	ldr	r3, [r3, #0]
    8194:	4618      	mov	r0, r3
    8196:	4b03      	ldr	r3, [pc, #12]	; (81a4 <TC4_Handler+0x18>)
    8198:	4798      	blx	r3
}
    819a:	bf00      	nop
    819c:	bd80      	pop	{r7, pc}
    819e:	bf00      	nop
    81a0:	20000720 	.word	0x20000720
    81a4:	00008079 	.word	0x00008079

000081a8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    81a8:	b580      	push	{r7, lr}
    81aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    81ac:	4b03      	ldr	r3, [pc, #12]	; (81bc <TC5_Handler+0x14>)
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	4618      	mov	r0, r3
    81b2:	4b03      	ldr	r3, [pc, #12]	; (81c0 <TC5_Handler+0x18>)
    81b4:	4798      	blx	r3
}
    81b6:	bf00      	nop
    81b8:	bd80      	pop	{r7, pc}
    81ba:	bf00      	nop
    81bc:	20000724 	.word	0x20000724
    81c0:	00008079 	.word	0x00008079

000081c4 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    81c4:	b580      	push	{r7, lr}
    81c6:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    81c8:	4b03      	ldr	r3, [pc, #12]	; (81d8 <TC7_Handler+0x14>)
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	4618      	mov	r0, r3
    81ce:	4b03      	ldr	r3, [pc, #12]	; (81dc <TC7_Handler+0x18>)
    81d0:	4798      	blx	r3
}
    81d2:	bf00      	nop
    81d4:	bd80      	pop	{r7, pc}
    81d6:	bf00      	nop
    81d8:	20000728 	.word	0x20000728
    81dc:	000080b1 	.word	0x000080b1

000081e0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	b084      	sub	sp, #16
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    81e8:	6878      	ldr	r0, [r7, #4]
    81ea:	4b13      	ldr	r3, [pc, #76]	; (8238 <get_tc_index+0x58>)
    81ec:	4798      	blx	r3
    81ee:	4603      	mov	r3, r0
    81f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    81f2:	2300      	movs	r3, #0
    81f4:	73fb      	strb	r3, [r7, #15]
    81f6:	e010      	b.n	821a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    81f8:	7bfa      	ldrb	r2, [r7, #15]
    81fa:	4910      	ldr	r1, [pc, #64]	; (823c <get_tc_index+0x5c>)
    81fc:	4613      	mov	r3, r2
    81fe:	009b      	lsls	r3, r3, #2
    8200:	4413      	add	r3, r2
    8202:	009b      	lsls	r3, r3, #2
    8204:	440b      	add	r3, r1
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	7bba      	ldrb	r2, [r7, #14]
    820a:	429a      	cmp	r2, r3
    820c:	d102      	bne.n	8214 <get_tc_index+0x34>
			return i;
    820e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8212:	e00d      	b.n	8230 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8214:	7bfb      	ldrb	r3, [r7, #15]
    8216:	3301      	adds	r3, #1
    8218:	73fb      	strb	r3, [r7, #15]
    821a:	7bfb      	ldrb	r3, [r7, #15]
    821c:	2b06      	cmp	r3, #6
    821e:	d9eb      	bls.n	81f8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8220:	f240 221a 	movw	r2, #538	; 0x21a
    8224:	4906      	ldr	r1, [pc, #24]	; (8240 <get_tc_index+0x60>)
    8226:	2000      	movs	r0, #0
    8228:	4b06      	ldr	r3, [pc, #24]	; (8244 <get_tc_index+0x64>)
    822a:	4798      	blx	r3
	return -1;
    822c:	f04f 33ff 	mov.w	r3, #4294967295
}
    8230:	4618      	mov	r0, r3
    8232:	3710      	adds	r7, #16
    8234:	46bd      	mov	sp, r7
    8236:	bd80      	pop	{r7, pc}
    8238:	000082f9 	.word	0x000082f9
    823c:	20000048 	.word	0x20000048
    8240:	0000f0bc 	.word	0x0000f0bc
    8244:	000038fd 	.word	0x000038fd

00008248 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8248:	b480      	push	{r7}
    824a:	b083      	sub	sp, #12
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
    8250:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	4a1a      	ldr	r2, [pc, #104]	; (82c0 <_tc_init_irq_param+0x78>)
    8256:	4293      	cmp	r3, r2
    8258:	d102      	bne.n	8260 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    825a:	4a1a      	ldr	r2, [pc, #104]	; (82c4 <_tc_init_irq_param+0x7c>)
    825c:	683b      	ldr	r3, [r7, #0]
    825e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	4a19      	ldr	r2, [pc, #100]	; (82c8 <_tc_init_irq_param+0x80>)
    8264:	4293      	cmp	r3, r2
    8266:	d102      	bne.n	826e <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    8268:	4a18      	ldr	r2, [pc, #96]	; (82cc <_tc_init_irq_param+0x84>)
    826a:	683b      	ldr	r3, [r7, #0]
    826c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	4a17      	ldr	r2, [pc, #92]	; (82d0 <_tc_init_irq_param+0x88>)
    8272:	4293      	cmp	r3, r2
    8274:	d102      	bne.n	827c <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    8276:	4a17      	ldr	r2, [pc, #92]	; (82d4 <_tc_init_irq_param+0x8c>)
    8278:	683b      	ldr	r3, [r7, #0]
    827a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	4a16      	ldr	r2, [pc, #88]	; (82d8 <_tc_init_irq_param+0x90>)
    8280:	4293      	cmp	r3, r2
    8282:	d102      	bne.n	828a <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    8284:	4a15      	ldr	r2, [pc, #84]	; (82dc <_tc_init_irq_param+0x94>)
    8286:	683b      	ldr	r3, [r7, #0]
    8288:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    828a:	687b      	ldr	r3, [r7, #4]
    828c:	4a14      	ldr	r2, [pc, #80]	; (82e0 <_tc_init_irq_param+0x98>)
    828e:	4293      	cmp	r3, r2
    8290:	d102      	bne.n	8298 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    8292:	4a14      	ldr	r2, [pc, #80]	; (82e4 <_tc_init_irq_param+0x9c>)
    8294:	683b      	ldr	r3, [r7, #0]
    8296:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	4a13      	ldr	r2, [pc, #76]	; (82e8 <_tc_init_irq_param+0xa0>)
    829c:	4293      	cmp	r3, r2
    829e:	d102      	bne.n	82a6 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    82a0:	4a12      	ldr	r2, [pc, #72]	; (82ec <_tc_init_irq_param+0xa4>)
    82a2:	683b      	ldr	r3, [r7, #0]
    82a4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	4a11      	ldr	r2, [pc, #68]	; (82f0 <_tc_init_irq_param+0xa8>)
    82aa:	4293      	cmp	r3, r2
    82ac:	d102      	bne.n	82b4 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    82ae:	4a11      	ldr	r2, [pc, #68]	; (82f4 <_tc_init_irq_param+0xac>)
    82b0:	683b      	ldr	r3, [r7, #0]
    82b2:	6013      	str	r3, [r2, #0]
	}
}
    82b4:	bf00      	nop
    82b6:	370c      	adds	r7, #12
    82b8:	46bd      	mov	sp, r7
    82ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    82be:	4770      	bx	lr
    82c0:	40003800 	.word	0x40003800
    82c4:	20000710 	.word	0x20000710
    82c8:	40003c00 	.word	0x40003c00
    82cc:	20000714 	.word	0x20000714
    82d0:	4101a000 	.word	0x4101a000
    82d4:	20000718 	.word	0x20000718
    82d8:	4101c000 	.word	0x4101c000
    82dc:	2000071c 	.word	0x2000071c
    82e0:	42001400 	.word	0x42001400
    82e4:	20000720 	.word	0x20000720
    82e8:	42001800 	.word	0x42001800
    82ec:	20000724 	.word	0x20000724
    82f0:	43001800 	.word	0x43001800
    82f4:	20000728 	.word	0x20000728

000082f8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    82f8:	b4b0      	push	{r4, r5, r7}
    82fa:	b08d      	sub	sp, #52	; 0x34
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8300:	4b13      	ldr	r3, [pc, #76]	; (8350 <_get_hardware_offset+0x58>)
    8302:	f107 040c 	add.w	r4, r7, #12
    8306:	461d      	mov	r5, r3
    8308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    830a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    830c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8314:	2300      	movs	r3, #0
    8316:	62fb      	str	r3, [r7, #44]	; 0x2c
    8318:	e010      	b.n	833c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    831c:	009b      	lsls	r3, r3, #2
    831e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8322:	4413      	add	r3, r2
    8324:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8328:	461a      	mov	r2, r3
    832a:	687b      	ldr	r3, [r7, #4]
    832c:	429a      	cmp	r2, r3
    832e:	d102      	bne.n	8336 <_get_hardware_offset+0x3e>
			return i;
    8330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8332:	b2db      	uxtb	r3, r3
    8334:	e006      	b.n	8344 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8338:	3301      	adds	r3, #1
    833a:	62fb      	str	r3, [r7, #44]	; 0x2c
    833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    833e:	2b07      	cmp	r3, #7
    8340:	d9eb      	bls.n	831a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8342:	2300      	movs	r3, #0
}
    8344:	4618      	mov	r0, r3
    8346:	3734      	adds	r7, #52	; 0x34
    8348:	46bd      	mov	sp, r7
    834a:	bcb0      	pop	{r4, r5, r7}
    834c:	4770      	bx	lr
    834e:	bf00      	nop
    8350:	0000f0d0 	.word	0x0000f0d0

00008354 <__NVIC_EnableIRQ>:
{
    8354:	b480      	push	{r7}
    8356:	b083      	sub	sp, #12
    8358:	af00      	add	r7, sp, #0
    835a:	4603      	mov	r3, r0
    835c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    835e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8362:	2b00      	cmp	r3, #0
    8364:	db0b      	blt.n	837e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8366:	4909      	ldr	r1, [pc, #36]	; (838c <__NVIC_EnableIRQ+0x38>)
    8368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    836c:	095b      	lsrs	r3, r3, #5
    836e:	88fa      	ldrh	r2, [r7, #6]
    8370:	f002 021f 	and.w	r2, r2, #31
    8374:	2001      	movs	r0, #1
    8376:	fa00 f202 	lsl.w	r2, r0, r2
    837a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    837e:	bf00      	nop
    8380:	370c      	adds	r7, #12
    8382:	46bd      	mov	sp, r7
    8384:	f85d 7b04 	ldr.w	r7, [sp], #4
    8388:	4770      	bx	lr
    838a:	bf00      	nop
    838c:	e000e100 	.word	0xe000e100

00008390 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8390:	b480      	push	{r7}
    8392:	b087      	sub	sp, #28
    8394:	af00      	add	r7, sp, #0
    8396:	60f8      	str	r0, [r7, #12]
    8398:	460b      	mov	r3, r1
    839a:	607a      	str	r2, [r7, #4]
    839c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    839e:	7afa      	ldrb	r2, [r7, #11]
    83a0:	68f9      	ldr	r1, [r7, #12]
    83a2:	4613      	mov	r3, r2
    83a4:	009b      	lsls	r3, r3, #2
    83a6:	4413      	add	r3, r2
    83a8:	009b      	lsls	r3, r3, #2
    83aa:	440b      	add	r3, r1
    83ac:	3340      	adds	r3, #64	; 0x40
    83ae:	681b      	ldr	r3, [r3, #0]
    83b0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    83b2:	697a      	ldr	r2, [r7, #20]
    83b4:	687b      	ldr	r3, [r7, #4]
    83b6:	4013      	ands	r3, r2
    83b8:	617b      	str	r3, [r7, #20]
	return tmp;
    83ba:	697b      	ldr	r3, [r7, #20]
}
    83bc:	4618      	mov	r0, r3
    83be:	371c      	adds	r7, #28
    83c0:	46bd      	mov	sp, r7
    83c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c6:	4770      	bx	lr

000083c8 <hri_oscctrl_get_STATUS_reg>:
{
    83c8:	b480      	push	{r7}
    83ca:	b085      	sub	sp, #20
    83cc:	af00      	add	r7, sp, #0
    83ce:	6078      	str	r0, [r7, #4]
    83d0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    83d2:	687b      	ldr	r3, [r7, #4]
    83d4:	691b      	ldr	r3, [r3, #16]
    83d6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    83d8:	68fa      	ldr	r2, [r7, #12]
    83da:	683b      	ldr	r3, [r7, #0]
    83dc:	4013      	ands	r3, r2
    83de:	60fb      	str	r3, [r7, #12]
	return tmp;
    83e0:	68fb      	ldr	r3, [r7, #12]
}
    83e2:	4618      	mov	r0, r3
    83e4:	3714      	adds	r7, #20
    83e6:	46bd      	mov	sp, r7
    83e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ec:	4770      	bx	lr

000083ee <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    83ee:	b480      	push	{r7}
    83f0:	b085      	sub	sp, #20
    83f2:	af00      	add	r7, sp, #0
    83f4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    83f6:	687b      	ldr	r3, [r7, #4]
    83f8:	f893 3020 	ldrb.w	r3, [r3, #32]
    83fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    83fe:	7bfb      	ldrb	r3, [r7, #15]
    8400:	f003 0301 	and.w	r3, r3, #1
    8404:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8406:	7bfb      	ldrb	r3, [r7, #15]
    8408:	2b00      	cmp	r3, #0
    840a:	bf14      	ite	ne
    840c:	2301      	movne	r3, #1
    840e:	2300      	moveq	r3, #0
    8410:	b2db      	uxtb	r3, r3
}
    8412:	4618      	mov	r0, r3
    8414:	3714      	adds	r7, #20
    8416:	46bd      	mov	sp, r7
    8418:	f85d 7b04 	ldr.w	r7, [sp], #4
    841c:	4770      	bx	lr

0000841e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    841e:	b480      	push	{r7}
    8420:	b083      	sub	sp, #12
    8422:	af00      	add	r7, sp, #0
    8424:	6078      	str	r0, [r7, #4]
    8426:	460b      	mov	r3, r1
    8428:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    842a:	bf00      	nop
    842c:	687b      	ldr	r3, [r7, #4]
    842e:	789b      	ldrb	r3, [r3, #2]
    8430:	b2da      	uxtb	r2, r3
    8432:	78fb      	ldrb	r3, [r7, #3]
    8434:	4013      	ands	r3, r2
    8436:	b2db      	uxtb	r3, r3
    8438:	2b00      	cmp	r3, #0
    843a:	d1f7      	bne.n	842c <hri_usb_wait_for_sync+0xe>
	};
}
    843c:	bf00      	nop
    843e:	370c      	adds	r7, #12
    8440:	46bd      	mov	sp, r7
    8442:	f85d 7b04 	ldr.w	r7, [sp], #4
    8446:	4770      	bx	lr

00008448 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8448:	b480      	push	{r7}
    844a:	b083      	sub	sp, #12
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
    8450:	460b      	mov	r3, r1
    8452:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8454:	687b      	ldr	r3, [r7, #4]
    8456:	789b      	ldrb	r3, [r3, #2]
    8458:	b2da      	uxtb	r2, r3
    845a:	78fb      	ldrb	r3, [r7, #3]
    845c:	4013      	ands	r3, r2
    845e:	b2db      	uxtb	r3, r3
    8460:	2b00      	cmp	r3, #0
    8462:	bf14      	ite	ne
    8464:	2301      	movne	r3, #1
    8466:	2300      	moveq	r3, #0
    8468:	b2db      	uxtb	r3, r3
}
    846a:	4618      	mov	r0, r3
    846c:	370c      	adds	r7, #12
    846e:	46bd      	mov	sp, r7
    8470:	f85d 7b04 	ldr.w	r7, [sp], #4
    8474:	4770      	bx	lr

00008476 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8476:	b480      	push	{r7}
    8478:	b085      	sub	sp, #20
    847a:	af00      	add	r7, sp, #0
    847c:	6078      	str	r0, [r7, #4]
    847e:	460b      	mov	r3, r1
    8480:	70fb      	strb	r3, [r7, #3]
    8482:	4613      	mov	r3, r2
    8484:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8486:	78fb      	ldrb	r3, [r7, #3]
    8488:	687a      	ldr	r2, [r7, #4]
    848a:	3308      	adds	r3, #8
    848c:	015b      	lsls	r3, r3, #5
    848e:	4413      	add	r3, r2
    8490:	3307      	adds	r3, #7
    8492:	781b      	ldrb	r3, [r3, #0]
    8494:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8496:	7bfa      	ldrb	r2, [r7, #15]
    8498:	78bb      	ldrb	r3, [r7, #2]
    849a:	4013      	ands	r3, r2
    849c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    849e:	7bfb      	ldrb	r3, [r7, #15]
}
    84a0:	4618      	mov	r0, r3
    84a2:	3714      	adds	r7, #20
    84a4:	46bd      	mov	sp, r7
    84a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84aa:	4770      	bx	lr

000084ac <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    84ac:	b480      	push	{r7}
    84ae:	b083      	sub	sp, #12
    84b0:	af00      	add	r7, sp, #0
    84b2:	6078      	str	r0, [r7, #4]
    84b4:	460b      	mov	r3, r1
    84b6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    84b8:	78fb      	ldrb	r3, [r7, #3]
    84ba:	687a      	ldr	r2, [r7, #4]
    84bc:	3308      	adds	r3, #8
    84be:	015b      	lsls	r3, r3, #5
    84c0:	4413      	add	r3, r2
    84c2:	3307      	adds	r3, #7
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	b2db      	uxtb	r3, r3
}
    84c8:	4618      	mov	r0, r3
    84ca:	370c      	adds	r7, #12
    84cc:	46bd      	mov	sp, r7
    84ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    84d2:	4770      	bx	lr

000084d4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    84d4:	b480      	push	{r7}
    84d6:	b083      	sub	sp, #12
    84d8:	af00      	add	r7, sp, #0
    84da:	6078      	str	r0, [r7, #4]
    84dc:	460b      	mov	r3, r1
    84de:	70fb      	strb	r3, [r7, #3]
    84e0:	4613      	mov	r3, r2
    84e2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    84e4:	78fb      	ldrb	r3, [r7, #3]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	3308      	adds	r3, #8
    84ea:	015b      	lsls	r3, r3, #5
    84ec:	4413      	add	r3, r2
    84ee:	3307      	adds	r3, #7
    84f0:	78ba      	ldrb	r2, [r7, #2]
    84f2:	701a      	strb	r2, [r3, #0]
}
    84f4:	bf00      	nop
    84f6:	370c      	adds	r7, #12
    84f8:	46bd      	mov	sp, r7
    84fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84fe:	4770      	bx	lr

00008500 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8500:	b480      	push	{r7}
    8502:	b083      	sub	sp, #12
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
    8508:	460b      	mov	r3, r1
    850a:	70fb      	strb	r3, [r7, #3]
    850c:	4613      	mov	r3, r2
    850e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8510:	78fb      	ldrb	r3, [r7, #3]
    8512:	687a      	ldr	r2, [r7, #4]
    8514:	3308      	adds	r3, #8
    8516:	015b      	lsls	r3, r3, #5
    8518:	4413      	add	r3, r2
    851a:	3305      	adds	r3, #5
    851c:	78ba      	ldrb	r2, [r7, #2]
    851e:	701a      	strb	r2, [r3, #0]
}
    8520:	bf00      	nop
    8522:	370c      	adds	r7, #12
    8524:	46bd      	mov	sp, r7
    8526:	f85d 7b04 	ldr.w	r7, [sp], #4
    852a:	4770      	bx	lr

0000852c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    852c:	b480      	push	{r7}
    852e:	b083      	sub	sp, #12
    8530:	af00      	add	r7, sp, #0
    8532:	6078      	str	r0, [r7, #4]
    8534:	460b      	mov	r3, r1
    8536:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8538:	78fb      	ldrb	r3, [r7, #3]
    853a:	687a      	ldr	r2, [r7, #4]
    853c:	3308      	adds	r3, #8
    853e:	015b      	lsls	r3, r3, #5
    8540:	4413      	add	r3, r2
    8542:	3306      	adds	r3, #6
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	b2db      	uxtb	r3, r3
}
    8548:	4618      	mov	r0, r3
    854a:	370c      	adds	r7, #12
    854c:	46bd      	mov	sp, r7
    854e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8552:	4770      	bx	lr

00008554 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8554:	b480      	push	{r7}
    8556:	b083      	sub	sp, #12
    8558:	af00      	add	r7, sp, #0
    855a:	6078      	str	r0, [r7, #4]
    855c:	460b      	mov	r3, r1
    855e:	70fb      	strb	r3, [r7, #3]
    8560:	4613      	mov	r3, r2
    8562:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8564:	78fb      	ldrb	r3, [r7, #3]
    8566:	687a      	ldr	r2, [r7, #4]
    8568:	3308      	adds	r3, #8
    856a:	015b      	lsls	r3, r3, #5
    856c:	4413      	add	r3, r2
    856e:	3304      	adds	r3, #4
    8570:	78ba      	ldrb	r2, [r7, #2]
    8572:	701a      	strb	r2, [r3, #0]
}
    8574:	bf00      	nop
    8576:	370c      	adds	r7, #12
    8578:	46bd      	mov	sp, r7
    857a:	f85d 7b04 	ldr.w	r7, [sp], #4
    857e:	4770      	bx	lr

00008580 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8580:	b480      	push	{r7}
    8582:	b083      	sub	sp, #12
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
    8588:	460b      	mov	r3, r1
    858a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    858c:	78fb      	ldrb	r3, [r7, #3]
    858e:	687a      	ldr	r2, [r7, #4]
    8590:	015b      	lsls	r3, r3, #5
    8592:	4413      	add	r3, r2
    8594:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8598:	2210      	movs	r2, #16
    859a:	701a      	strb	r2, [r3, #0]
}
    859c:	bf00      	nop
    859e:	370c      	adds	r7, #12
    85a0:	46bd      	mov	sp, r7
    85a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85a6:	4770      	bx	lr

000085a8 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    85a8:	b480      	push	{r7}
    85aa:	b083      	sub	sp, #12
    85ac:	af00      	add	r7, sp, #0
    85ae:	6078      	str	r0, [r7, #4]
    85b0:	460b      	mov	r3, r1
    85b2:	70fb      	strb	r3, [r7, #3]
    85b4:	4613      	mov	r3, r2
    85b6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    85b8:	78fb      	ldrb	r3, [r7, #3]
    85ba:	687a      	ldr	r2, [r7, #4]
    85bc:	015b      	lsls	r3, r3, #5
    85be:	4413      	add	r3, r2
    85c0:	f203 1309 	addw	r3, r3, #265	; 0x109
    85c4:	78ba      	ldrb	r2, [r7, #2]
    85c6:	701a      	strb	r2, [r3, #0]
}
    85c8:	bf00      	nop
    85ca:	370c      	adds	r7, #12
    85cc:	46bd      	mov	sp, r7
    85ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d2:	4770      	bx	lr

000085d4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    85d4:	b480      	push	{r7}
    85d6:	b083      	sub	sp, #12
    85d8:	af00      	add	r7, sp, #0
    85da:	6078      	str	r0, [r7, #4]
    85dc:	460b      	mov	r3, r1
    85de:	70fb      	strb	r3, [r7, #3]
    85e0:	4613      	mov	r3, r2
    85e2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    85e4:	78fb      	ldrb	r3, [r7, #3]
    85e6:	687a      	ldr	r2, [r7, #4]
    85e8:	015b      	lsls	r3, r3, #5
    85ea:	4413      	add	r3, r2
    85ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
    85f0:	78ba      	ldrb	r2, [r7, #2]
    85f2:	701a      	strb	r2, [r3, #0]
}
    85f4:	bf00      	nop
    85f6:	370c      	adds	r7, #12
    85f8:	46bd      	mov	sp, r7
    85fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    85fe:	4770      	bx	lr

00008600 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8600:	b480      	push	{r7}
    8602:	b085      	sub	sp, #20
    8604:	af00      	add	r7, sp, #0
    8606:	6078      	str	r0, [r7, #4]
    8608:	460b      	mov	r3, r1
    860a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    860c:	78fb      	ldrb	r3, [r7, #3]
    860e:	687a      	ldr	r2, [r7, #4]
    8610:	3308      	adds	r3, #8
    8612:	015b      	lsls	r3, r3, #5
    8614:	4413      	add	r3, r2
    8616:	781b      	ldrb	r3, [r3, #0]
    8618:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    861a:	7bfb      	ldrb	r3, [r7, #15]
    861c:	f003 0307 	and.w	r3, r3, #7
    8620:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8622:	7bfb      	ldrb	r3, [r7, #15]
}
    8624:	4618      	mov	r0, r3
    8626:	3714      	adds	r7, #20
    8628:	46bd      	mov	sp, r7
    862a:	f85d 7b04 	ldr.w	r7, [sp], #4
    862e:	4770      	bx	lr

00008630 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8630:	b480      	push	{r7}
    8632:	b085      	sub	sp, #20
    8634:	af00      	add	r7, sp, #0
    8636:	6078      	str	r0, [r7, #4]
    8638:	460b      	mov	r3, r1
    863a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    863c:	78fb      	ldrb	r3, [r7, #3]
    863e:	687a      	ldr	r2, [r7, #4]
    8640:	3308      	adds	r3, #8
    8642:	015b      	lsls	r3, r3, #5
    8644:	4413      	add	r3, r2
    8646:	781b      	ldrb	r3, [r3, #0]
    8648:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    864a:	7bfb      	ldrb	r3, [r7, #15]
    864c:	091b      	lsrs	r3, r3, #4
    864e:	b2db      	uxtb	r3, r3
    8650:	f003 0307 	and.w	r3, r3, #7
    8654:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8656:	7bfb      	ldrb	r3, [r7, #15]
}
    8658:	4618      	mov	r0, r3
    865a:	3714      	adds	r7, #20
    865c:	46bd      	mov	sp, r7
    865e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8662:	4770      	bx	lr

00008664 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8664:	b480      	push	{r7}
    8666:	b083      	sub	sp, #12
    8668:	af00      	add	r7, sp, #0
    866a:	6078      	str	r0, [r7, #4]
    866c:	460b      	mov	r3, r1
    866e:	70fb      	strb	r3, [r7, #3]
    8670:	4613      	mov	r3, r2
    8672:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8674:	78fb      	ldrb	r3, [r7, #3]
    8676:	687a      	ldr	r2, [r7, #4]
    8678:	3308      	adds	r3, #8
    867a:	015b      	lsls	r3, r3, #5
    867c:	4413      	add	r3, r2
    867e:	78ba      	ldrb	r2, [r7, #2]
    8680:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8682:	bf00      	nop
    8684:	370c      	adds	r7, #12
    8686:	46bd      	mov	sp, r7
    8688:	f85d 7b04 	ldr.w	r7, [sp], #4
    868c:	4770      	bx	lr

0000868e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    868e:	b480      	push	{r7}
    8690:	b083      	sub	sp, #12
    8692:	af00      	add	r7, sp, #0
    8694:	6078      	str	r0, [r7, #4]
    8696:	460b      	mov	r3, r1
    8698:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    869a:	78fb      	ldrb	r3, [r7, #3]
    869c:	687a      	ldr	r2, [r7, #4]
    869e:	3308      	adds	r3, #8
    86a0:	015b      	lsls	r3, r3, #5
    86a2:	4413      	add	r3, r2
    86a4:	781b      	ldrb	r3, [r3, #0]
    86a6:	b2db      	uxtb	r3, r3
}
    86a8:	4618      	mov	r0, r3
    86aa:	370c      	adds	r7, #12
    86ac:	46bd      	mov	sp, r7
    86ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    86b2:	4770      	bx	lr

000086b4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    86b4:	b480      	push	{r7}
    86b6:	b083      	sub	sp, #12
    86b8:	af00      	add	r7, sp, #0
    86ba:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    86bc:	687b      	ldr	r3, [r7, #4]
    86be:	8b9b      	ldrh	r3, [r3, #28]
    86c0:	b29b      	uxth	r3, r3
}
    86c2:	4618      	mov	r0, r3
    86c4:	370c      	adds	r7, #12
    86c6:	46bd      	mov	sp, r7
    86c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    86cc:	4770      	bx	lr

000086ce <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    86ce:	b480      	push	{r7}
    86d0:	b083      	sub	sp, #12
    86d2:	af00      	add	r7, sp, #0
    86d4:	6078      	str	r0, [r7, #4]
    86d6:	460b      	mov	r3, r1
    86d8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    86da:	687b      	ldr	r3, [r7, #4]
    86dc:	887a      	ldrh	r2, [r7, #2]
    86de:	839a      	strh	r2, [r3, #28]
}
    86e0:	bf00      	nop
    86e2:	370c      	adds	r7, #12
    86e4:	46bd      	mov	sp, r7
    86e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ea:	4770      	bx	lr

000086ec <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    86ec:	b480      	push	{r7}
    86ee:	b083      	sub	sp, #12
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
    86f4:	460b      	mov	r3, r1
    86f6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    86f8:	687b      	ldr	r3, [r7, #4]
    86fa:	887a      	ldrh	r2, [r7, #2]
    86fc:	831a      	strh	r2, [r3, #24]
}
    86fe:	bf00      	nop
    8700:	370c      	adds	r7, #12
    8702:	46bd      	mov	sp, r7
    8704:	f85d 7b04 	ldr.w	r7, [sp], #4
    8708:	4770      	bx	lr

0000870a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    870a:	b480      	push	{r7}
    870c:	b083      	sub	sp, #12
    870e:	af00      	add	r7, sp, #0
    8710:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8712:	687b      	ldr	r3, [r7, #4]
    8714:	8b1b      	ldrh	r3, [r3, #24]
    8716:	b29b      	uxth	r3, r3
}
    8718:	4618      	mov	r0, r3
    871a:	370c      	adds	r7, #12
    871c:	46bd      	mov	sp, r7
    871e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8722:	4770      	bx	lr

00008724 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8724:	b480      	push	{r7}
    8726:	b083      	sub	sp, #12
    8728:	af00      	add	r7, sp, #0
    872a:	6078      	str	r0, [r7, #4]
    872c:	460b      	mov	r3, r1
    872e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	887a      	ldrh	r2, [r7, #2]
    8734:	829a      	strh	r2, [r3, #20]
}
    8736:	bf00      	nop
    8738:	370c      	adds	r7, #12
    873a:	46bd      	mov	sp, r7
    873c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8740:	4770      	bx	lr

00008742 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8742:	b480      	push	{r7}
    8744:	b085      	sub	sp, #20
    8746:	af00      	add	r7, sp, #0
    8748:	6078      	str	r0, [r7, #4]
    874a:	460b      	mov	r3, r1
    874c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    874e:	687b      	ldr	r3, [r7, #4]
    8750:	789b      	ldrb	r3, [r3, #2]
    8752:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8754:	7bfa      	ldrb	r2, [r7, #15]
    8756:	78fb      	ldrb	r3, [r7, #3]
    8758:	4013      	ands	r3, r2
    875a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    875c:	7bfb      	ldrb	r3, [r7, #15]
}
    875e:	4618      	mov	r0, r3
    8760:	3714      	adds	r7, #20
    8762:	46bd      	mov	sp, r7
    8764:	f85d 7b04 	ldr.w	r7, [sp], #4
    8768:	4770      	bx	lr
	...

0000876c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    876c:	b580      	push	{r7, lr}
    876e:	b082      	sub	sp, #8
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	781b      	ldrb	r3, [r3, #0]
    8778:	b2db      	uxtb	r3, r3
    877a:	f023 0302 	bic.w	r3, r3, #2
    877e:	b2da      	uxtb	r2, r3
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8784:	2103      	movs	r1, #3
    8786:	6878      	ldr	r0, [r7, #4]
    8788:	4b02      	ldr	r3, [pc, #8]	; (8794 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    878a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    878c:	bf00      	nop
    878e:	3708      	adds	r7, #8
    8790:	46bd      	mov	sp, r7
    8792:	bd80      	pop	{r7, pc}
    8794:	0000841f 	.word	0x0000841f

00008798 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8798:	b580      	push	{r7, lr}
    879a:	b084      	sub	sp, #16
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
    87a0:	460b      	mov	r3, r1
    87a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    87a4:	2103      	movs	r1, #3
    87a6:	6878      	ldr	r0, [r7, #4]
    87a8:	4b06      	ldr	r3, [pc, #24]	; (87c4 <hri_usb_get_CTRLA_reg+0x2c>)
    87aa:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    87ac:	687b      	ldr	r3, [r7, #4]
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    87b2:	7bfa      	ldrb	r2, [r7, #15]
    87b4:	78fb      	ldrb	r3, [r7, #3]
    87b6:	4013      	ands	r3, r2
    87b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    87ba:	7bfb      	ldrb	r3, [r7, #15]
}
    87bc:	4618      	mov	r0, r3
    87be:	3710      	adds	r7, #16
    87c0:	46bd      	mov	sp, r7
    87c2:	bd80      	pop	{r7, pc}
    87c4:	0000841f 	.word	0x0000841f

000087c8 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	b082      	sub	sp, #8
    87cc:	af00      	add	r7, sp, #0
    87ce:	6078      	str	r0, [r7, #4]
    87d0:	460b      	mov	r3, r1
    87d2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	78fa      	ldrb	r2, [r7, #3]
    87d8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    87da:	2103      	movs	r1, #3
    87dc:	6878      	ldr	r0, [r7, #4]
    87de:	4b03      	ldr	r3, [pc, #12]	; (87ec <hri_usb_write_CTRLA_reg+0x24>)
    87e0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    87e2:	bf00      	nop
    87e4:	3708      	adds	r7, #8
    87e6:	46bd      	mov	sp, r7
    87e8:	bd80      	pop	{r7, pc}
    87ea:	bf00      	nop
    87ec:	0000841f 	.word	0x0000841f

000087f0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	b082      	sub	sp, #8
    87f4:	af00      	add	r7, sp, #0
    87f6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    87f8:	2103      	movs	r1, #3
    87fa:	6878      	ldr	r0, [r7, #4]
    87fc:	4b04      	ldr	r3, [pc, #16]	; (8810 <hri_usb_read_CTRLA_reg+0x20>)
    87fe:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	781b      	ldrb	r3, [r3, #0]
    8804:	b2db      	uxtb	r3, r3
}
    8806:	4618      	mov	r0, r3
    8808:	3708      	adds	r7, #8
    880a:	46bd      	mov	sp, r7
    880c:	bd80      	pop	{r7, pc}
    880e:	bf00      	nop
    8810:	0000841f 	.word	0x0000841f

00008814 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8814:	b480      	push	{r7}
    8816:	b083      	sub	sp, #12
    8818:	af00      	add	r7, sp, #0
    881a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    881c:	687b      	ldr	r3, [r7, #4]
    881e:	891b      	ldrh	r3, [r3, #8]
    8820:	b29b      	uxth	r3, r3
    8822:	f023 0301 	bic.w	r3, r3, #1
    8826:	b29a      	uxth	r2, r3
    8828:	687b      	ldr	r3, [r7, #4]
    882a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    882c:	bf00      	nop
    882e:	370c      	adds	r7, #12
    8830:	46bd      	mov	sp, r7
    8832:	f85d 7b04 	ldr.w	r7, [sp], #4
    8836:	4770      	bx	lr

00008838 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8838:	b480      	push	{r7}
    883a:	b083      	sub	sp, #12
    883c:	af00      	add	r7, sp, #0
    883e:	6078      	str	r0, [r7, #4]
    8840:	460b      	mov	r3, r1
    8842:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8844:	687b      	ldr	r3, [r7, #4]
    8846:	887a      	ldrh	r2, [r7, #2]
    8848:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    884a:	bf00      	nop
    884c:	370c      	adds	r7, #12
    884e:	46bd      	mov	sp, r7
    8850:	f85d 7b04 	ldr.w	r7, [sp], #4
    8854:	4770      	bx	lr

00008856 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8856:	b480      	push	{r7}
    8858:	b083      	sub	sp, #12
    885a:	af00      	add	r7, sp, #0
    885c:	6078      	str	r0, [r7, #4]
    885e:	460b      	mov	r3, r1
    8860:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8862:	687b      	ldr	r3, [r7, #4]
    8864:	78fa      	ldrb	r2, [r7, #3]
    8866:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8868:	bf00      	nop
    886a:	370c      	adds	r7, #12
    886c:	46bd      	mov	sp, r7
    886e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8872:	4770      	bx	lr

00008874 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8874:	b480      	push	{r7}
    8876:	b083      	sub	sp, #12
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
    887c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    887e:	687b      	ldr	r3, [r7, #4]
    8880:	683a      	ldr	r2, [r7, #0]
    8882:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8884:	bf00      	nop
    8886:	370c      	adds	r7, #12
    8888:	46bd      	mov	sp, r7
    888a:	f85d 7b04 	ldr.w	r7, [sp], #4
    888e:	4770      	bx	lr

00008890 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8890:	b480      	push	{r7}
    8892:	b083      	sub	sp, #12
    8894:	af00      	add	r7, sp, #0
    8896:	6078      	str	r0, [r7, #4]
    8898:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    889a:	2300      	movs	r3, #0
}
    889c:	4618      	mov	r0, r3
    889e:	370c      	adds	r7, #12
    88a0:	46bd      	mov	sp, r7
    88a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88a6:	4770      	bx	lr

000088a8 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    88a8:	b480      	push	{r7}
    88aa:	b085      	sub	sp, #20
    88ac:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    88ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88b2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    88b4:	4b28      	ldr	r3, [pc, #160]	; (8958 <_usb_load_calib+0xb0>)
    88b6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    88b8:	f003 031f 	and.w	r3, r3, #31
    88bc:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    88be:	4b26      	ldr	r3, [pc, #152]	; (8958 <_usb_load_calib+0xb0>)
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    88c4:	f003 031f 	and.w	r3, r3, #31
    88c8:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    88ca:	4b23      	ldr	r3, [pc, #140]	; (8958 <_usb_load_calib+0xb0>)
    88cc:	681b      	ldr	r3, [r3, #0]
    88ce:	0a9b      	lsrs	r3, r3, #10
    88d0:	f003 0307 	and.w	r3, r3, #7
    88d4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    88d6:	68fb      	ldr	r3, [r7, #12]
    88d8:	2b00      	cmp	r3, #0
    88da:	d002      	beq.n	88e2 <_usb_load_calib+0x3a>
    88dc:	68fb      	ldr	r3, [r7, #12]
    88de:	2b1f      	cmp	r3, #31
    88e0:	d101      	bne.n	88e6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    88e2:	2309      	movs	r3, #9
    88e4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    88e6:	68bb      	ldr	r3, [r7, #8]
    88e8:	2b00      	cmp	r3, #0
    88ea:	d002      	beq.n	88f2 <_usb_load_calib+0x4a>
    88ec:	68bb      	ldr	r3, [r7, #8]
    88ee:	2b1f      	cmp	r3, #31
    88f0:	d101      	bne.n	88f6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    88f2:	2319      	movs	r3, #25
    88f4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    88f6:	687b      	ldr	r3, [r7, #4]
    88f8:	2b00      	cmp	r3, #0
    88fa:	d002      	beq.n	8902 <_usb_load_calib+0x5a>
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	2b07      	cmp	r3, #7
    8900:	d101      	bne.n	8906 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8902:	2306      	movs	r3, #6
    8904:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8906:	68fb      	ldr	r3, [r7, #12]
    8908:	b29b      	uxth	r3, r3
    890a:	019b      	lsls	r3, r3, #6
    890c:	b29b      	uxth	r3, r3
    890e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8912:	b29a      	uxth	r2, r3
    8914:	68bb      	ldr	r3, [r7, #8]
    8916:	b29b      	uxth	r3, r3
    8918:	f003 031f 	and.w	r3, r3, #31
    891c:	b29b      	uxth	r3, r3
    891e:	4313      	orrs	r3, r2
    8920:	b29a      	uxth	r2, r3
    8922:	687b      	ldr	r3, [r7, #4]
    8924:	b29b      	uxth	r3, r3
    8926:	031b      	lsls	r3, r3, #12
    8928:	b29b      	uxth	r3, r3
    892a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    892e:	b29b      	uxth	r3, r3
    8930:	4313      	orrs	r3, r2
    8932:	b29a      	uxth	r2, r3
    8934:	683b      	ldr	r3, [r7, #0]
    8936:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8938:	683a      	ldr	r2, [r7, #0]
    893a:	78d3      	ldrb	r3, [r2, #3]
    893c:	f043 0303 	orr.w	r3, r3, #3
    8940:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8942:	683a      	ldr	r2, [r7, #0]
    8944:	78d3      	ldrb	r3, [r2, #3]
    8946:	f043 030c 	orr.w	r3, r3, #12
    894a:	70d3      	strb	r3, [r2, #3]
}
    894c:	bf00      	nop
    894e:	3714      	adds	r7, #20
    8950:	46bd      	mov	sp, r7
    8952:	f85d 7b04 	ldr.w	r7, [sp], #4
    8956:	4770      	bx	lr
    8958:	00800084 	.word	0x00800084

0000895c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    895c:	b580      	push	{r7, lr}
    895e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8960:	bf00      	nop
    8962:	2203      	movs	r2, #3
    8964:	2100      	movs	r1, #0
    8966:	4804      	ldr	r0, [pc, #16]	; (8978 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8968:	4b04      	ldr	r3, [pc, #16]	; (897c <_usb_d_dev_wait_dpll_rdy+0x20>)
    896a:	4798      	blx	r3
    896c:	4603      	mov	r3, r0
    896e:	2b03      	cmp	r3, #3
    8970:	d1f7      	bne.n	8962 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8972:	bf00      	nop
    8974:	bd80      	pop	{r7, pc}
    8976:	bf00      	nop
    8978:	40001000 	.word	0x40001000
    897c:	00008391 	.word	0x00008391

00008980 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8980:	b580      	push	{r7, lr}
    8982:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8984:	480e      	ldr	r0, [pc, #56]	; (89c0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8986:	4b0f      	ldr	r3, [pc, #60]	; (89c4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8988:	4798      	blx	r3
    898a:	4603      	mov	r3, r0
    898c:	2b00      	cmp	r3, #0
    898e:	d00a      	beq.n	89a6 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8990:	bf00      	nop
    8992:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8996:	480a      	ldr	r0, [pc, #40]	; (89c0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8998:	4b0b      	ldr	r3, [pc, #44]	; (89c8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    899a:	4798      	blx	r3
    899c:	4603      	mov	r3, r0
    899e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    89a2:	d1f6      	bne.n	8992 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    89a4:	e009      	b.n	89ba <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    89a6:	bf00      	nop
    89a8:	f44f 7180 	mov.w	r1, #256	; 0x100
    89ac:	4804      	ldr	r0, [pc, #16]	; (89c0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    89ae:	4b06      	ldr	r3, [pc, #24]	; (89c8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    89b0:	4798      	blx	r3
    89b2:	4603      	mov	r3, r0
    89b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    89b8:	d1f6      	bne.n	89a8 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    89ba:	bf00      	nop
    89bc:	bd80      	pop	{r7, pc}
    89be:	bf00      	nop
    89c0:	40001000 	.word	0x40001000
    89c4:	000083ef 	.word	0x000083ef
    89c8:	000083c9 	.word	0x000083c9

000089cc <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
    89d2:	4603      	mov	r3, r0
    89d4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    89d6:	79fb      	ldrb	r3, [r7, #7]
    89d8:	2b00      	cmp	r3, #0
    89da:	d102      	bne.n	89e2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    89dc:	4b05      	ldr	r3, [pc, #20]	; (89f4 <_usb_d_dev_wait_clk_rdy+0x28>)
    89de:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    89e0:	e004      	b.n	89ec <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    89e2:	79fb      	ldrb	r3, [r7, #7]
    89e4:	2b01      	cmp	r3, #1
    89e6:	d101      	bne.n	89ec <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    89e8:	4b03      	ldr	r3, [pc, #12]	; (89f8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    89ea:	4798      	blx	r3
}
    89ec:	bf00      	nop
    89ee:	3708      	adds	r7, #8
    89f0:	46bd      	mov	sp, r7
    89f2:	bd80      	pop	{r7, pc}
    89f4:	00008981 	.word	0x00008981
    89f8:	0000895d 	.word	0x0000895d

000089fc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
    8a02:	4603      	mov	r3, r0
    8a04:	6039      	str	r1, [r7, #0]
    8a06:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8a08:	683b      	ldr	r3, [r7, #0]
    8a0a:	b2da      	uxtb	r2, r3
    8a0c:	79fb      	ldrb	r3, [r7, #7]
    8a0e:	4619      	mov	r1, r3
    8a10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a14:	4b02      	ldr	r3, [pc, #8]	; (8a20 <_usbd_ep_int_ack+0x24>)
    8a16:	4798      	blx	r3
}
    8a18:	bf00      	nop
    8a1a:	3708      	adds	r7, #8
    8a1c:	46bd      	mov	sp, r7
    8a1e:	bd80      	pop	{r7, pc}
    8a20:	000084d5 	.word	0x000084d5

00008a24 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8a24:	b580      	push	{r7, lr}
    8a26:	b082      	sub	sp, #8
    8a28:	af00      	add	r7, sp, #0
    8a2a:	4603      	mov	r3, r0
    8a2c:	6039      	str	r1, [r7, #0]
    8a2e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8a30:	683b      	ldr	r3, [r7, #0]
    8a32:	b2da      	uxtb	r2, r3
    8a34:	79fb      	ldrb	r3, [r7, #7]
    8a36:	4619      	mov	r1, r3
    8a38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a3c:	4b02      	ldr	r3, [pc, #8]	; (8a48 <_usbd_ep_int_en+0x24>)
    8a3e:	4798      	blx	r3
}
    8a40:	bf00      	nop
    8a42:	3708      	adds	r7, #8
    8a44:	46bd      	mov	sp, r7
    8a46:	bd80      	pop	{r7, pc}
    8a48:	000085a9 	.word	0x000085a9

00008a4c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8a4c:	b580      	push	{r7, lr}
    8a4e:	b082      	sub	sp, #8
    8a50:	af00      	add	r7, sp, #0
    8a52:	4603      	mov	r3, r0
    8a54:	6039      	str	r1, [r7, #0]
    8a56:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8a58:	683b      	ldr	r3, [r7, #0]
    8a5a:	b2da      	uxtb	r2, r3
    8a5c:	79fb      	ldrb	r3, [r7, #7]
    8a5e:	4619      	mov	r1, r3
    8a60:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a64:	4b02      	ldr	r3, [pc, #8]	; (8a70 <_usbd_ep_int_dis+0x24>)
    8a66:	4798      	blx	r3
}
    8a68:	bf00      	nop
    8a6a:	3708      	adds	r7, #8
    8a6c:	46bd      	mov	sp, r7
    8a6e:	bd80      	pop	{r7, pc}
    8a70:	000085d5 	.word	0x000085d5

00008a74 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8a74:	b580      	push	{r7, lr}
    8a76:	b082      	sub	sp, #8
    8a78:	af00      	add	r7, sp, #0
    8a7a:	4603      	mov	r3, r0
    8a7c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8a7e:	79fb      	ldrb	r3, [r7, #7]
    8a80:	4619      	mov	r1, r3
    8a82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a86:	4b06      	ldr	r3, [pc, #24]	; (8aa0 <_usbd_ep_is_ctrl+0x2c>)
    8a88:	4798      	blx	r3
    8a8a:	4603      	mov	r3, r0
    8a8c:	2b11      	cmp	r3, #17
    8a8e:	bf0c      	ite	eq
    8a90:	2301      	moveq	r3, #1
    8a92:	2300      	movne	r3, #0
    8a94:	b2db      	uxtb	r3, r3
}
    8a96:	4618      	mov	r0, r3
    8a98:	3708      	adds	r7, #8
    8a9a:	46bd      	mov	sp, r7
    8a9c:	bd80      	pop	{r7, pc}
    8a9e:	bf00      	nop
    8aa0:	0000868f 	.word	0x0000868f

00008aa4 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8aa4:	b580      	push	{r7, lr}
    8aa6:	b082      	sub	sp, #8
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	4603      	mov	r3, r0
    8aac:	71fb      	strb	r3, [r7, #7]
    8aae:	460b      	mov	r3, r1
    8ab0:	71bb      	strb	r3, [r7, #6]
    8ab2:	4613      	mov	r3, r2
    8ab4:	717b      	strb	r3, [r7, #5]
	if (st) {
    8ab6:	797b      	ldrb	r3, [r7, #5]
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d00b      	beq.n	8ad4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8abc:	79bb      	ldrb	r3, [r7, #6]
    8abe:	2210      	movs	r2, #16
    8ac0:	fa02 f303 	lsl.w	r3, r2, r3
    8ac4:	b2da      	uxtb	r2, r3
    8ac6:	79fb      	ldrb	r3, [r7, #7]
    8ac8:	4619      	mov	r1, r3
    8aca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ace:	4b09      	ldr	r3, [pc, #36]	; (8af4 <_usbd_ep_set_stall+0x50>)
    8ad0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8ad2:	e00a      	b.n	8aea <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8ad4:	79bb      	ldrb	r3, [r7, #6]
    8ad6:	2210      	movs	r2, #16
    8ad8:	fa02 f303 	lsl.w	r3, r2, r3
    8adc:	b2da      	uxtb	r2, r3
    8ade:	79fb      	ldrb	r3, [r7, #7]
    8ae0:	4619      	mov	r1, r3
    8ae2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ae6:	4b04      	ldr	r3, [pc, #16]	; (8af8 <_usbd_ep_set_stall+0x54>)
    8ae8:	4798      	blx	r3
}
    8aea:	bf00      	nop
    8aec:	3708      	adds	r7, #8
    8aee:	46bd      	mov	sp, r7
    8af0:	bd80      	pop	{r7, pc}
    8af2:	bf00      	nop
    8af4:	00008501 	.word	0x00008501
    8af8:	00008555 	.word	0x00008555

00008afc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8afc:	b580      	push	{r7, lr}
    8afe:	b084      	sub	sp, #16
    8b00:	af00      	add	r7, sp, #0
    8b02:	4603      	mov	r3, r0
    8b04:	460a      	mov	r2, r1
    8b06:	71fb      	strb	r3, [r7, #7]
    8b08:	4613      	mov	r3, r2
    8b0a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8b0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b10:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b12:	79fb      	ldrb	r3, [r7, #7]
    8b14:	4619      	mov	r1, r3
    8b16:	68f8      	ldr	r0, [r7, #12]
    8b18:	4b08      	ldr	r3, [pc, #32]	; (8b3c <_usbd_ep_is_stalled+0x40>)
    8b1a:	4798      	blx	r3
    8b1c:	4603      	mov	r3, r0
    8b1e:	4619      	mov	r1, r3
    8b20:	79bb      	ldrb	r3, [r7, #6]
    8b22:	2210      	movs	r2, #16
    8b24:	fa02 f303 	lsl.w	r3, r2, r3
    8b28:	400b      	ands	r3, r1
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	bf14      	ite	ne
    8b2e:	2301      	movne	r3, #1
    8b30:	2300      	moveq	r3, #0
    8b32:	b2db      	uxtb	r3, r3
}
    8b34:	4618      	mov	r0, r3
    8b36:	3710      	adds	r7, #16
    8b38:	46bd      	mov	sp, r7
    8b3a:	bd80      	pop	{r7, pc}
    8b3c:	0000852d 	.word	0x0000852d

00008b40 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8b40:	b580      	push	{r7, lr}
    8b42:	b084      	sub	sp, #16
    8b44:	af00      	add	r7, sp, #0
    8b46:	4603      	mov	r3, r0
    8b48:	460a      	mov	r2, r1
    8b4a:	71fb      	strb	r3, [r7, #7]
    8b4c:	4613      	mov	r3, r2
    8b4e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8b50:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b54:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8b56:	79fb      	ldrb	r3, [r7, #7]
    8b58:	4619      	mov	r1, r3
    8b5a:	68f8      	ldr	r0, [r7, #12]
    8b5c:	4b08      	ldr	r3, [pc, #32]	; (8b80 <_usbd_ep_is_stall_sent+0x40>)
    8b5e:	4798      	blx	r3
    8b60:	4603      	mov	r3, r0
    8b62:	4619      	mov	r1, r3
    8b64:	79bb      	ldrb	r3, [r7, #6]
    8b66:	2220      	movs	r2, #32
    8b68:	fa02 f303 	lsl.w	r3, r2, r3
    8b6c:	400b      	ands	r3, r1
    8b6e:	2b00      	cmp	r3, #0
    8b70:	bf14      	ite	ne
    8b72:	2301      	movne	r3, #1
    8b74:	2300      	moveq	r3, #0
    8b76:	b2db      	uxtb	r3, r3
}
    8b78:	4618      	mov	r0, r3
    8b7a:	3710      	adds	r7, #16
    8b7c:	46bd      	mov	sp, r7
    8b7e:	bd80      	pop	{r7, pc}
    8b80:	000084ad 	.word	0x000084ad

00008b84 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8b84:	b580      	push	{r7, lr}
    8b86:	b082      	sub	sp, #8
    8b88:	af00      	add	r7, sp, #0
    8b8a:	4603      	mov	r3, r0
    8b8c:	460a      	mov	r2, r1
    8b8e:	71fb      	strb	r3, [r7, #7]
    8b90:	4613      	mov	r3, r2
    8b92:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8b94:	79bb      	ldrb	r3, [r7, #6]
    8b96:	2220      	movs	r2, #32
    8b98:	409a      	lsls	r2, r3
    8b9a:	79fb      	ldrb	r3, [r7, #7]
    8b9c:	4611      	mov	r1, r2
    8b9e:	4618      	mov	r0, r3
    8ba0:	4b02      	ldr	r3, [pc, #8]	; (8bac <_usbd_ep_ack_stall+0x28>)
    8ba2:	4798      	blx	r3
}
    8ba4:	bf00      	nop
    8ba6:	3708      	adds	r7, #8
    8ba8:	46bd      	mov	sp, r7
    8baa:	bd80      	pop	{r7, pc}
    8bac:	000089fd 	.word	0x000089fd

00008bb0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b082      	sub	sp, #8
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	4603      	mov	r3, r0
    8bb8:	71fb      	strb	r3, [r7, #7]
    8bba:	460b      	mov	r3, r1
    8bbc:	71bb      	strb	r3, [r7, #6]
    8bbe:	4613      	mov	r3, r2
    8bc0:	717b      	strb	r3, [r7, #5]
	if (en) {
    8bc2:	797b      	ldrb	r3, [r7, #5]
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	d008      	beq.n	8bda <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8bc8:	79bb      	ldrb	r3, [r7, #6]
    8bca:	2220      	movs	r2, #32
    8bcc:	409a      	lsls	r2, r3
    8bce:	79fb      	ldrb	r3, [r7, #7]
    8bd0:	4611      	mov	r1, r2
    8bd2:	4618      	mov	r0, r3
    8bd4:	4b07      	ldr	r3, [pc, #28]	; (8bf4 <_usbd_ep_int_stall_en+0x44>)
    8bd6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8bd8:	e007      	b.n	8bea <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8bda:	79bb      	ldrb	r3, [r7, #6]
    8bdc:	2220      	movs	r2, #32
    8bde:	409a      	lsls	r2, r3
    8be0:	79fb      	ldrb	r3, [r7, #7]
    8be2:	4611      	mov	r1, r2
    8be4:	4618      	mov	r0, r3
    8be6:	4b04      	ldr	r3, [pc, #16]	; (8bf8 <_usbd_ep_int_stall_en+0x48>)
    8be8:	4798      	blx	r3
}
    8bea:	bf00      	nop
    8bec:	3708      	adds	r7, #8
    8bee:	46bd      	mov	sp, r7
    8bf0:	bd80      	pop	{r7, pc}
    8bf2:	bf00      	nop
    8bf4:	00008a25 	.word	0x00008a25
    8bf8:	00008a4d 	.word	0x00008a4d

00008bfc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8bfc:	b580      	push	{r7, lr}
    8bfe:	b082      	sub	sp, #8
    8c00:	af00      	add	r7, sp, #0
    8c02:	4603      	mov	r3, r0
    8c04:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8c06:	79fb      	ldrb	r3, [r7, #7]
    8c08:	4619      	mov	r1, r3
    8c0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c0e:	4b03      	ldr	r3, [pc, #12]	; (8c1c <_usbd_ep_stop_setup+0x20>)
    8c10:	4798      	blx	r3
}
    8c12:	bf00      	nop
    8c14:	3708      	adds	r7, #8
    8c16:	46bd      	mov	sp, r7
    8c18:	bd80      	pop	{r7, pc}
    8c1a:	bf00      	nop
    8c1c:	00008581 	.word	0x00008581

00008c20 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8c20:	b580      	push	{r7, lr}
    8c22:	b082      	sub	sp, #8
    8c24:	af00      	add	r7, sp, #0
    8c26:	4603      	mov	r3, r0
    8c28:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8c2a:	79fb      	ldrb	r3, [r7, #7]
    8c2c:	2210      	movs	r2, #16
    8c2e:	4619      	mov	r1, r3
    8c30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c34:	4b05      	ldr	r3, [pc, #20]	; (8c4c <_usbd_ep_is_setup+0x2c>)
    8c36:	4798      	blx	r3
    8c38:	4603      	mov	r3, r0
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	bf14      	ite	ne
    8c3e:	2301      	movne	r3, #1
    8c40:	2300      	moveq	r3, #0
    8c42:	b2db      	uxtb	r3, r3
}
    8c44:	4618      	mov	r0, r3
    8c46:	3708      	adds	r7, #8
    8c48:	46bd      	mov	sp, r7
    8c4a:	bd80      	pop	{r7, pc}
    8c4c:	00008477 	.word	0x00008477

00008c50 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	af00      	add	r7, sp, #0
    8c56:	4603      	mov	r3, r0
    8c58:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8c5a:	79fb      	ldrb	r3, [r7, #7]
    8c5c:	2110      	movs	r1, #16
    8c5e:	4618      	mov	r0, r3
    8c60:	4b02      	ldr	r3, [pc, #8]	; (8c6c <_usbd_ep_ack_setup+0x1c>)
    8c62:	4798      	blx	r3
}
    8c64:	bf00      	nop
    8c66:	3708      	adds	r7, #8
    8c68:	46bd      	mov	sp, r7
    8c6a:	bd80      	pop	{r7, pc}
    8c6c:	000089fd 	.word	0x000089fd

00008c70 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8c70:	b580      	push	{r7, lr}
    8c72:	b082      	sub	sp, #8
    8c74:	af00      	add	r7, sp, #0
    8c76:	4603      	mov	r3, r0
    8c78:	71fb      	strb	r3, [r7, #7]
    8c7a:	460b      	mov	r3, r1
    8c7c:	71bb      	strb	r3, [r7, #6]
    8c7e:	4613      	mov	r3, r2
    8c80:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8c82:	797b      	ldrb	r3, [r7, #5]
    8c84:	2b00      	cmp	r3, #0
    8c86:	d00b      	beq.n	8ca0 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8c88:	79bb      	ldrb	r3, [r7, #6]
    8c8a:	2201      	movs	r2, #1
    8c8c:	fa02 f303 	lsl.w	r3, r2, r3
    8c90:	b2da      	uxtb	r2, r3
    8c92:	79fb      	ldrb	r3, [r7, #7]
    8c94:	4619      	mov	r1, r3
    8c96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c9a:	4b09      	ldr	r3, [pc, #36]	; (8cc0 <_usbd_ep_set_toggle+0x50>)
    8c9c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8c9e:	e00a      	b.n	8cb6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8ca0:	79bb      	ldrb	r3, [r7, #6]
    8ca2:	2201      	movs	r2, #1
    8ca4:	fa02 f303 	lsl.w	r3, r2, r3
    8ca8:	b2da      	uxtb	r2, r3
    8caa:	79fb      	ldrb	r3, [r7, #7]
    8cac:	4619      	mov	r1, r3
    8cae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cb2:	4b04      	ldr	r3, [pc, #16]	; (8cc4 <_usbd_ep_set_toggle+0x54>)
    8cb4:	4798      	blx	r3
}
    8cb6:	bf00      	nop
    8cb8:	3708      	adds	r7, #8
    8cba:	46bd      	mov	sp, r7
    8cbc:	bd80      	pop	{r7, pc}
    8cbe:	bf00      	nop
    8cc0:	00008501 	.word	0x00008501
    8cc4:	00008555 	.word	0x00008555

00008cc8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8cc8:	b580      	push	{r7, lr}
    8cca:	b082      	sub	sp, #8
    8ccc:	af00      	add	r7, sp, #0
    8cce:	4603      	mov	r3, r0
    8cd0:	460a      	mov	r2, r1
    8cd2:	71fb      	strb	r3, [r7, #7]
    8cd4:	4613      	mov	r3, r2
    8cd6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8cd8:	79bb      	ldrb	r3, [r7, #6]
    8cda:	2201      	movs	r2, #1
    8cdc:	409a      	lsls	r2, r3
    8cde:	79fb      	ldrb	r3, [r7, #7]
    8ce0:	4611      	mov	r1, r2
    8ce2:	4618      	mov	r0, r3
    8ce4:	4b02      	ldr	r3, [pc, #8]	; (8cf0 <_usbd_ep_ack_io_cpt+0x28>)
    8ce6:	4798      	blx	r3
}
    8ce8:	bf00      	nop
    8cea:	3708      	adds	r7, #8
    8cec:	46bd      	mov	sp, r7
    8cee:	bd80      	pop	{r7, pc}
    8cf0:	000089fd 	.word	0x000089fd

00008cf4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8cf4:	b480      	push	{r7}
    8cf6:	b085      	sub	sp, #20
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	4603      	mov	r3, r0
    8cfc:	603a      	str	r2, [r7, #0]
    8cfe:	71fb      	strb	r3, [r7, #7]
    8d00:	460b      	mov	r3, r1
    8d02:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d04:	79fa      	ldrb	r2, [r7, #7]
    8d06:	79bb      	ldrb	r3, [r7, #6]
    8d08:	0052      	lsls	r2, r2, #1
    8d0a:	4413      	add	r3, r2
    8d0c:	011b      	lsls	r3, r3, #4
    8d0e:	4a06      	ldr	r2, [pc, #24]	; (8d28 <_usbd_ep_set_buf+0x34>)
    8d10:	4413      	add	r3, r2
    8d12:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8d14:	68fb      	ldr	r3, [r7, #12]
    8d16:	683a      	ldr	r2, [r7, #0]
    8d18:	601a      	str	r2, [r3, #0]
}
    8d1a:	bf00      	nop
    8d1c:	3714      	adds	r7, #20
    8d1e:	46bd      	mov	sp, r7
    8d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d24:	4770      	bx	lr
    8d26:	bf00      	nop
    8d28:	20000a34 	.word	0x20000a34

00008d2c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8d2c:	b480      	push	{r7}
    8d2e:	b085      	sub	sp, #20
    8d30:	af00      	add	r7, sp, #0
    8d32:	4603      	mov	r3, r0
    8d34:	71fb      	strb	r3, [r7, #7]
    8d36:	460b      	mov	r3, r1
    8d38:	71bb      	strb	r3, [r7, #6]
    8d3a:	4613      	mov	r3, r2
    8d3c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d3e:	79fa      	ldrb	r2, [r7, #7]
    8d40:	79bb      	ldrb	r3, [r7, #6]
    8d42:	0052      	lsls	r2, r2, #1
    8d44:	4413      	add	r3, r2
    8d46:	011b      	lsls	r3, r3, #4
    8d48:	4a08      	ldr	r2, [pc, #32]	; (8d6c <_usbd_ep_set_in_count+0x40>)
    8d4a:	4413      	add	r3, r2
    8d4c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8d4e:	88bb      	ldrh	r3, [r7, #4]
    8d50:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d54:	b299      	uxth	r1, r3
    8d56:	68fa      	ldr	r2, [r7, #12]
    8d58:	6853      	ldr	r3, [r2, #4]
    8d5a:	f361 339b 	bfi	r3, r1, #14, #14
    8d5e:	6053      	str	r3, [r2, #4]
}
    8d60:	bf00      	nop
    8d62:	3714      	adds	r7, #20
    8d64:	46bd      	mov	sp, r7
    8d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d6a:	4770      	bx	lr
    8d6c:	20000a34 	.word	0x20000a34

00008d70 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8d70:	b480      	push	{r7}
    8d72:	b085      	sub	sp, #20
    8d74:	af00      	add	r7, sp, #0
    8d76:	4603      	mov	r3, r0
    8d78:	71fb      	strb	r3, [r7, #7]
    8d7a:	460b      	mov	r3, r1
    8d7c:	71bb      	strb	r3, [r7, #6]
    8d7e:	4613      	mov	r3, r2
    8d80:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d82:	79fa      	ldrb	r2, [r7, #7]
    8d84:	79bb      	ldrb	r3, [r7, #6]
    8d86:	0052      	lsls	r2, r2, #1
    8d88:	4413      	add	r3, r2
    8d8a:	011b      	lsls	r3, r3, #4
    8d8c:	4a08      	ldr	r2, [pc, #32]	; (8db0 <_usbd_ep_set_in_size+0x40>)
    8d8e:	4413      	add	r3, r2
    8d90:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8d92:	88bb      	ldrh	r3, [r7, #4]
    8d94:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d98:	b299      	uxth	r1, r3
    8d9a:	68fa      	ldr	r2, [r7, #12]
    8d9c:	6853      	ldr	r3, [r2, #4]
    8d9e:	f361 030d 	bfi	r3, r1, #0, #14
    8da2:	6053      	str	r3, [r2, #4]
}
    8da4:	bf00      	nop
    8da6:	3714      	adds	r7, #20
    8da8:	46bd      	mov	sp, r7
    8daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dae:	4770      	bx	lr
    8db0:	20000a34 	.word	0x20000a34

00008db4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8db4:	b480      	push	{r7}
    8db6:	b085      	sub	sp, #20
    8db8:	af00      	add	r7, sp, #0
    8dba:	4603      	mov	r3, r0
    8dbc:	71fb      	strb	r3, [r7, #7]
    8dbe:	460b      	mov	r3, r1
    8dc0:	71bb      	strb	r3, [r7, #6]
    8dc2:	4613      	mov	r3, r2
    8dc4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8dc6:	79fa      	ldrb	r2, [r7, #7]
    8dc8:	79bb      	ldrb	r3, [r7, #6]
    8dca:	0052      	lsls	r2, r2, #1
    8dcc:	4413      	add	r3, r2
    8dce:	011b      	lsls	r3, r3, #4
    8dd0:	4a08      	ldr	r2, [pc, #32]	; (8df4 <_usbd_ep_set_out_count+0x40>)
    8dd2:	4413      	add	r3, r2
    8dd4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8dd6:	88bb      	ldrh	r3, [r7, #4]
    8dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8ddc:	b299      	uxth	r1, r3
    8dde:	68fa      	ldr	r2, [r7, #12]
    8de0:	6853      	ldr	r3, [r2, #4]
    8de2:	f361 030d 	bfi	r3, r1, #0, #14
    8de6:	6053      	str	r3, [r2, #4]
}
    8de8:	bf00      	nop
    8dea:	3714      	adds	r7, #20
    8dec:	46bd      	mov	sp, r7
    8dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df2:	4770      	bx	lr
    8df4:	20000a34 	.word	0x20000a34

00008df8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8df8:	b480      	push	{r7}
    8dfa:	b085      	sub	sp, #20
    8dfc:	af00      	add	r7, sp, #0
    8dfe:	4603      	mov	r3, r0
    8e00:	71fb      	strb	r3, [r7, #7]
    8e02:	460b      	mov	r3, r1
    8e04:	71bb      	strb	r3, [r7, #6]
    8e06:	4613      	mov	r3, r2
    8e08:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e0a:	79fa      	ldrb	r2, [r7, #7]
    8e0c:	79bb      	ldrb	r3, [r7, #6]
    8e0e:	0052      	lsls	r2, r2, #1
    8e10:	4413      	add	r3, r2
    8e12:	011b      	lsls	r3, r3, #4
    8e14:	4a08      	ldr	r2, [pc, #32]	; (8e38 <_usbd_ep_set_out_size+0x40>)
    8e16:	4413      	add	r3, r2
    8e18:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8e1a:	88bb      	ldrh	r3, [r7, #4]
    8e1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e20:	b299      	uxth	r1, r3
    8e22:	68fa      	ldr	r2, [r7, #12]
    8e24:	6853      	ldr	r3, [r2, #4]
    8e26:	f361 339b 	bfi	r3, r1, #14, #14
    8e2a:	6053      	str	r3, [r2, #4]
}
    8e2c:	bf00      	nop
    8e2e:	3714      	adds	r7, #20
    8e30:	46bd      	mov	sp, r7
    8e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e36:	4770      	bx	lr
    8e38:	20000a34 	.word	0x20000a34

00008e3c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b084      	sub	sp, #16
    8e40:	af00      	add	r7, sp, #0
    8e42:	60ba      	str	r2, [r7, #8]
    8e44:	607b      	str	r3, [r7, #4]
    8e46:	4603      	mov	r3, r0
    8e48:	73fb      	strb	r3, [r7, #15]
    8e4a:	460b      	mov	r3, r1
    8e4c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8e4e:	68bb      	ldr	r3, [r7, #8]
    8e50:	b29a      	uxth	r2, r3
    8e52:	7bb9      	ldrb	r1, [r7, #14]
    8e54:	7bfb      	ldrb	r3, [r7, #15]
    8e56:	4618      	mov	r0, r3
    8e58:	4b06      	ldr	r3, [pc, #24]	; (8e74 <_usbd_ep_set_in_trans+0x38>)
    8e5a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	b29a      	uxth	r2, r3
    8e60:	7bb9      	ldrb	r1, [r7, #14]
    8e62:	7bfb      	ldrb	r3, [r7, #15]
    8e64:	4618      	mov	r0, r3
    8e66:	4b04      	ldr	r3, [pc, #16]	; (8e78 <_usbd_ep_set_in_trans+0x3c>)
    8e68:	4798      	blx	r3
}
    8e6a:	bf00      	nop
    8e6c:	3710      	adds	r7, #16
    8e6e:	46bd      	mov	sp, r7
    8e70:	bd80      	pop	{r7, pc}
    8e72:	bf00      	nop
    8e74:	00008d71 	.word	0x00008d71
    8e78:	00008d2d 	.word	0x00008d2d

00008e7c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	b084      	sub	sp, #16
    8e80:	af00      	add	r7, sp, #0
    8e82:	60ba      	str	r2, [r7, #8]
    8e84:	607b      	str	r3, [r7, #4]
    8e86:	4603      	mov	r3, r0
    8e88:	73fb      	strb	r3, [r7, #15]
    8e8a:	460b      	mov	r3, r1
    8e8c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8e8e:	68bb      	ldr	r3, [r7, #8]
    8e90:	b29a      	uxth	r2, r3
    8e92:	7bb9      	ldrb	r1, [r7, #14]
    8e94:	7bfb      	ldrb	r3, [r7, #15]
    8e96:	4618      	mov	r0, r3
    8e98:	4b06      	ldr	r3, [pc, #24]	; (8eb4 <_usbd_ep_set_out_trans+0x38>)
    8e9a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	b29a      	uxth	r2, r3
    8ea0:	7bb9      	ldrb	r1, [r7, #14]
    8ea2:	7bfb      	ldrb	r3, [r7, #15]
    8ea4:	4618      	mov	r0, r3
    8ea6:	4b04      	ldr	r3, [pc, #16]	; (8eb8 <_usbd_ep_set_out_trans+0x3c>)
    8ea8:	4798      	blx	r3
}
    8eaa:	bf00      	nop
    8eac:	3710      	adds	r7, #16
    8eae:	46bd      	mov	sp, r7
    8eb0:	bd80      	pop	{r7, pc}
    8eb2:	bf00      	nop
    8eb4:	00008df9 	.word	0x00008df9
    8eb8:	00008db5 	.word	0x00008db5

00008ebc <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8ebc:	b480      	push	{r7}
    8ebe:	b085      	sub	sp, #20
    8ec0:	af00      	add	r7, sp, #0
    8ec2:	4603      	mov	r3, r0
    8ec4:	460a      	mov	r2, r1
    8ec6:	71fb      	strb	r3, [r7, #7]
    8ec8:	4613      	mov	r3, r2
    8eca:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ecc:	79fa      	ldrb	r2, [r7, #7]
    8ece:	79bb      	ldrb	r3, [r7, #6]
    8ed0:	0052      	lsls	r2, r2, #1
    8ed2:	4413      	add	r3, r2
    8ed4:	011b      	lsls	r3, r3, #4
    8ed6:	4a06      	ldr	r2, [pc, #24]	; (8ef0 <_usbd_ep_clear_bank_status+0x34>)
    8ed8:	4413      	add	r3, r2
    8eda:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8edc:	68fb      	ldr	r3, [r7, #12]
    8ede:	2200      	movs	r2, #0
    8ee0:	729a      	strb	r2, [r3, #10]
}
    8ee2:	bf00      	nop
    8ee4:	3714      	adds	r7, #20
    8ee6:	46bd      	mov	sp, r7
    8ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eec:	4770      	bx	lr
    8eee:	bf00      	nop
    8ef0:	20000a34 	.word	0x20000a34

00008ef4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8ef4:	b580      	push	{r7, lr}
    8ef6:	b082      	sub	sp, #8
    8ef8:	af00      	add	r7, sp, #0
    8efa:	4603      	mov	r3, r0
    8efc:	71fb      	strb	r3, [r7, #7]
    8efe:	460b      	mov	r3, r1
    8f00:	71bb      	strb	r3, [r7, #6]
    8f02:	4613      	mov	r3, r2
    8f04:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8f06:	797b      	ldrb	r3, [r7, #5]
    8f08:	2b00      	cmp	r3, #0
    8f0a:	d00b      	beq.n	8f24 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f0c:	79bb      	ldrb	r3, [r7, #6]
    8f0e:	2240      	movs	r2, #64	; 0x40
    8f10:	fa02 f303 	lsl.w	r3, r2, r3
    8f14:	b2da      	uxtb	r2, r3
    8f16:	79fb      	ldrb	r3, [r7, #7]
    8f18:	4619      	mov	r1, r3
    8f1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f1e:	4b09      	ldr	r3, [pc, #36]	; (8f44 <_usbd_ep_set_in_rdy+0x50>)
    8f20:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8f22:	e00a      	b.n	8f3a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f24:	79bb      	ldrb	r3, [r7, #6]
    8f26:	2240      	movs	r2, #64	; 0x40
    8f28:	fa02 f303 	lsl.w	r3, r2, r3
    8f2c:	b2da      	uxtb	r2, r3
    8f2e:	79fb      	ldrb	r3, [r7, #7]
    8f30:	4619      	mov	r1, r3
    8f32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f36:	4b04      	ldr	r3, [pc, #16]	; (8f48 <_usbd_ep_set_in_rdy+0x54>)
    8f38:	4798      	blx	r3
}
    8f3a:	bf00      	nop
    8f3c:	3708      	adds	r7, #8
    8f3e:	46bd      	mov	sp, r7
    8f40:	bd80      	pop	{r7, pc}
    8f42:	bf00      	nop
    8f44:	00008501 	.word	0x00008501
    8f48:	00008555 	.word	0x00008555

00008f4c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8f4c:	b580      	push	{r7, lr}
    8f4e:	b082      	sub	sp, #8
    8f50:	af00      	add	r7, sp, #0
    8f52:	4603      	mov	r3, r0
    8f54:	71fb      	strb	r3, [r7, #7]
    8f56:	460b      	mov	r3, r1
    8f58:	71bb      	strb	r3, [r7, #6]
    8f5a:	4613      	mov	r3, r2
    8f5c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8f5e:	797b      	ldrb	r3, [r7, #5]
    8f60:	2b00      	cmp	r3, #0
    8f62:	d00b      	beq.n	8f7c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f64:	79bb      	ldrb	r3, [r7, #6]
    8f66:	2240      	movs	r2, #64	; 0x40
    8f68:	fa02 f303 	lsl.w	r3, r2, r3
    8f6c:	b2da      	uxtb	r2, r3
    8f6e:	79fb      	ldrb	r3, [r7, #7]
    8f70:	4619      	mov	r1, r3
    8f72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f76:	4b09      	ldr	r3, [pc, #36]	; (8f9c <_usbd_ep_set_out_rdy+0x50>)
    8f78:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8f7a:	e00a      	b.n	8f92 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f7c:	79bb      	ldrb	r3, [r7, #6]
    8f7e:	2240      	movs	r2, #64	; 0x40
    8f80:	fa02 f303 	lsl.w	r3, r2, r3
    8f84:	b2da      	uxtb	r2, r3
    8f86:	79fb      	ldrb	r3, [r7, #7]
    8f88:	4619      	mov	r1, r3
    8f8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f8e:	4b04      	ldr	r3, [pc, #16]	; (8fa0 <_usbd_ep_set_out_rdy+0x54>)
    8f90:	4798      	blx	r3
}
    8f92:	bf00      	nop
    8f94:	3708      	adds	r7, #8
    8f96:	46bd      	mov	sp, r7
    8f98:	bd80      	pop	{r7, pc}
    8f9a:	bf00      	nop
    8f9c:	00008555 	.word	0x00008555
    8fa0:	00008501 	.word	0x00008501

00008fa4 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8fa4:	b480      	push	{r7}
    8fa6:	b083      	sub	sp, #12
    8fa8:	af00      	add	r7, sp, #0
    8faa:	4603      	mov	r3, r0
    8fac:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fae:	88fb      	ldrh	r3, [r7, #6]
    8fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8fb4:	d820      	bhi.n	8ff8 <_usbd_ep_pcksize_size+0x54>
    8fb6:	88fb      	ldrh	r3, [r7, #6]
    8fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8fbc:	d81a      	bhi.n	8ff4 <_usbd_ep_pcksize_size+0x50>
    8fbe:	88fb      	ldrh	r3, [r7, #6]
    8fc0:	2b80      	cmp	r3, #128	; 0x80
    8fc2:	d815      	bhi.n	8ff0 <_usbd_ep_pcksize_size+0x4c>
    8fc4:	88fb      	ldrh	r3, [r7, #6]
    8fc6:	2b40      	cmp	r3, #64	; 0x40
    8fc8:	d810      	bhi.n	8fec <_usbd_ep_pcksize_size+0x48>
    8fca:	88fb      	ldrh	r3, [r7, #6]
    8fcc:	2b20      	cmp	r3, #32
    8fce:	d80b      	bhi.n	8fe8 <_usbd_ep_pcksize_size+0x44>
    8fd0:	88fb      	ldrh	r3, [r7, #6]
    8fd2:	2b10      	cmp	r3, #16
    8fd4:	d806      	bhi.n	8fe4 <_usbd_ep_pcksize_size+0x40>
    8fd6:	88fb      	ldrh	r3, [r7, #6]
    8fd8:	2b08      	cmp	r3, #8
    8fda:	bf8c      	ite	hi
    8fdc:	2301      	movhi	r3, #1
    8fde:	2300      	movls	r3, #0
    8fe0:	b2db      	uxtb	r3, r3
    8fe2:	e00a      	b.n	8ffa <_usbd_ep_pcksize_size+0x56>
    8fe4:	2302      	movs	r3, #2
    8fe6:	e008      	b.n	8ffa <_usbd_ep_pcksize_size+0x56>
    8fe8:	2303      	movs	r3, #3
    8fea:	e006      	b.n	8ffa <_usbd_ep_pcksize_size+0x56>
    8fec:	2304      	movs	r3, #4
    8fee:	e004      	b.n	8ffa <_usbd_ep_pcksize_size+0x56>
    8ff0:	2305      	movs	r3, #5
    8ff2:	e002      	b.n	8ffa <_usbd_ep_pcksize_size+0x56>
    8ff4:	2306      	movs	r3, #6
    8ff6:	e000      	b.n	8ffa <_usbd_ep_pcksize_size+0x56>
    8ff8:	2307      	movs	r3, #7
}
    8ffa:	4618      	mov	r0, r3
    8ffc:	370c      	adds	r7, #12
    8ffe:	46bd      	mov	sp, r7
    9000:	f85d 7b04 	ldr.w	r7, [sp], #4
    9004:	4770      	bx	lr
	...

00009008 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9008:	b480      	push	{r7}
    900a:	b085      	sub	sp, #20
    900c:	af00      	add	r7, sp, #0
    900e:	4603      	mov	r3, r0
    9010:	460a      	mov	r2, r1
    9012:	71fb      	strb	r3, [r7, #7]
    9014:	4613      	mov	r3, r2
    9016:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9018:	79fb      	ldrb	r3, [r7, #7]
    901a:	2b00      	cmp	r3, #0
    901c:	d008      	beq.n	9030 <_usb_d_dev_ept+0x28>
    901e:	79bb      	ldrb	r3, [r7, #6]
    9020:	2b00      	cmp	r3, #0
    9022:	d003      	beq.n	902c <_usb_d_dev_ept+0x24>
    9024:	79fb      	ldrb	r3, [r7, #7]
    9026:	3304      	adds	r3, #4
    9028:	b2db      	uxtb	r3, r3
    902a:	e002      	b.n	9032 <_usb_d_dev_ept+0x2a>
    902c:	79fb      	ldrb	r3, [r7, #7]
    902e:	e000      	b.n	9032 <_usb_d_dev_ept+0x2a>
    9030:	2300      	movs	r3, #0
    9032:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9034:	7bfa      	ldrb	r2, [r7, #15]
    9036:	4613      	mov	r3, r2
    9038:	009b      	lsls	r3, r3, #2
    903a:	4413      	add	r3, r2
    903c:	009b      	lsls	r3, r3, #2
    903e:	3310      	adds	r3, #16
    9040:	4a04      	ldr	r2, [pc, #16]	; (9054 <_usb_d_dev_ept+0x4c>)
    9042:	4413      	add	r3, r2
    9044:	3304      	adds	r3, #4
}
    9046:	4618      	mov	r0, r3
    9048:	3714      	adds	r7, #20
    904a:	46bd      	mov	sp, r7
    904c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9050:	4770      	bx	lr
    9052:	bf00      	nop
    9054:	2000096c 	.word	0x2000096c

00009058 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9058:	b580      	push	{r7, lr}
    905a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    905c:	2104      	movs	r1, #4
    905e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9062:	4b03      	ldr	r3, [pc, #12]	; (9070 <_usb_d_dev_sof+0x18>)
    9064:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9066:	4b03      	ldr	r3, [pc, #12]	; (9074 <_usb_d_dev_sof+0x1c>)
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	4798      	blx	r3
}
    906c:	bf00      	nop
    906e:	bd80      	pop	{r7, pc}
    9070:	000086cf 	.word	0x000086cf
    9074:	2000096c 	.word	0x2000096c

00009078 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9078:	b580      	push	{r7, lr}
    907a:	b084      	sub	sp, #16
    907c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    907e:	2300      	movs	r3, #0
    9080:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9082:	f240 2101 	movw	r1, #513	; 0x201
    9086:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    908a:	4b1a      	ldr	r3, [pc, #104]	; (90f4 <_usb_d_dev_lpmsusp+0x7c>)
    908c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    908e:	f240 2101 	movw	r1, #513	; 0x201
    9092:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9096:	4b18      	ldr	r3, [pc, #96]	; (90f8 <_usb_d_dev_lpmsusp+0x80>)
    9098:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    909a:	2170      	movs	r1, #112	; 0x70
    909c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90a0:	4b16      	ldr	r3, [pc, #88]	; (90fc <_usb_d_dev_lpmsusp+0x84>)
    90a2:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    90a4:	2300      	movs	r3, #0
    90a6:	73fb      	strb	r3, [r7, #15]
    90a8:	e018      	b.n	90dc <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    90aa:	7bfb      	ldrb	r3, [r7, #15]
    90ac:	015b      	lsls	r3, r3, #5
    90ae:	4a14      	ldr	r2, [pc, #80]	; (9100 <_usb_d_dev_lpmsusp+0x88>)
    90b0:	4413      	add	r3, r2
    90b2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	891b      	ldrh	r3, [r3, #8]
    90b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    90bc:	b2db      	uxtb	r3, r3
    90be:	2b03      	cmp	r3, #3
    90c0:	d109      	bne.n	90d6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    90c2:	687b      	ldr	r3, [r7, #4]
    90c4:	891b      	ldrh	r3, [r3, #8]
    90c6:	f3c3 130a 	ubfx	r3, r3, #4, #11
    90ca:	b29b      	uxth	r3, r3
    90cc:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	2200      	movs	r2, #0
    90d2:	811a      	strh	r2, [r3, #8]
			break;
    90d4:	e005      	b.n	90e2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    90d6:	7bfb      	ldrb	r3, [r7, #15]
    90d8:	3301      	adds	r3, #1
    90da:	73fb      	strb	r3, [r7, #15]
    90dc:	7bfb      	ldrb	r3, [r7, #15]
    90de:	2b03      	cmp	r3, #3
    90e0:	d9e3      	bls.n	90aa <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    90e2:	4b08      	ldr	r3, [pc, #32]	; (9104 <_usb_d_dev_lpmsusp+0x8c>)
    90e4:	685b      	ldr	r3, [r3, #4]
    90e6:	68b9      	ldr	r1, [r7, #8]
    90e8:	2003      	movs	r0, #3
    90ea:	4798      	blx	r3
}
    90ec:	bf00      	nop
    90ee:	3710      	adds	r7, #16
    90f0:	46bd      	mov	sp, r7
    90f2:	bd80      	pop	{r7, pc}
    90f4:	000086cf 	.word	0x000086cf
    90f8:	00008725 	.word	0x00008725
    90fc:	000086ed 	.word	0x000086ed
    9100:	20000a34 	.word	0x20000a34
    9104:	2000096c 	.word	0x2000096c

00009108 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9108:	b580      	push	{r7, lr}
    910a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    910c:	2180      	movs	r1, #128	; 0x80
    910e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9112:	4b04      	ldr	r3, [pc, #16]	; (9124 <_usb_d_dev_ramerr+0x1c>)
    9114:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9116:	4b04      	ldr	r3, [pc, #16]	; (9128 <_usb_d_dev_ramerr+0x20>)
    9118:	685b      	ldr	r3, [r3, #4]
    911a:	2100      	movs	r1, #0
    911c:	2005      	movs	r0, #5
    911e:	4798      	blx	r3
}
    9120:	bf00      	nop
    9122:	bd80      	pop	{r7, pc}
    9124:	000086cf 	.word	0x000086cf
    9128:	2000096c 	.word	0x2000096c

0000912c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    912c:	b580      	push	{r7, lr}
    912e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9130:	2170      	movs	r1, #112	; 0x70
    9132:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9136:	4b0b      	ldr	r3, [pc, #44]	; (9164 <_usb_d_dev_wakeup+0x38>)
    9138:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    913a:	2170      	movs	r1, #112	; 0x70
    913c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9140:	4b09      	ldr	r3, [pc, #36]	; (9168 <_usb_d_dev_wakeup+0x3c>)
    9142:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9144:	f240 2101 	movw	r1, #513	; 0x201
    9148:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    914c:	4b07      	ldr	r3, [pc, #28]	; (916c <_usb_d_dev_wakeup+0x40>)
    914e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9150:	2000      	movs	r0, #0
    9152:	4b07      	ldr	r3, [pc, #28]	; (9170 <_usb_d_dev_wakeup+0x44>)
    9154:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9156:	4b07      	ldr	r3, [pc, #28]	; (9174 <_usb_d_dev_wakeup+0x48>)
    9158:	685b      	ldr	r3, [r3, #4]
    915a:	2100      	movs	r1, #0
    915c:	2002      	movs	r0, #2
    915e:	4798      	blx	r3
}
    9160:	bf00      	nop
    9162:	bd80      	pop	{r7, pc}
    9164:	000086cf 	.word	0x000086cf
    9168:	00008725 	.word	0x00008725
    916c:	000086ed 	.word	0x000086ed
    9170:	000089cd 	.word	0x000089cd
    9174:	2000096c 	.word	0x2000096c

00009178 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9178:	b580      	push	{r7, lr}
    917a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    917c:	2200      	movs	r2, #0
    917e:	2100      	movs	r1, #0
    9180:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9184:	4b0d      	ldr	r3, [pc, #52]	; (91bc <_usb_d_dev_reset+0x44>)
    9186:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9188:	2108      	movs	r1, #8
    918a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    918e:	4b0c      	ldr	r3, [pc, #48]	; (91c0 <_usb_d_dev_reset+0x48>)
    9190:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9192:	2170      	movs	r1, #112	; 0x70
    9194:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9198:	4b0a      	ldr	r3, [pc, #40]	; (91c4 <_usb_d_dev_reset+0x4c>)
    919a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    919c:	f240 2101 	movw	r1, #513	; 0x201
    91a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91a4:	4b08      	ldr	r3, [pc, #32]	; (91c8 <_usb_d_dev_reset+0x50>)
    91a6:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    91a8:	4b08      	ldr	r3, [pc, #32]	; (91cc <_usb_d_dev_reset+0x54>)
    91aa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    91ac:	4b08      	ldr	r3, [pc, #32]	; (91d0 <_usb_d_dev_reset+0x58>)
    91ae:	685b      	ldr	r3, [r3, #4]
    91b0:	2100      	movs	r1, #0
    91b2:	2001      	movs	r0, #1
    91b4:	4798      	blx	r3
}
    91b6:	bf00      	nop
    91b8:	bd80      	pop	{r7, pc}
    91ba:	bf00      	nop
    91bc:	00008665 	.word	0x00008665
    91c0:	000086cf 	.word	0x000086cf
    91c4:	00008725 	.word	0x00008725
    91c8:	000086ed 	.word	0x000086ed
    91cc:	00009d35 	.word	0x00009d35
    91d0:	2000096c 	.word	0x2000096c

000091d4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    91d4:	b580      	push	{r7, lr}
    91d6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91d8:	f240 2101 	movw	r1, #513	; 0x201
    91dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91e0:	4b09      	ldr	r3, [pc, #36]	; (9208 <_usb_d_dev_suspend+0x34>)
    91e2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91e4:	f240 2101 	movw	r1, #513	; 0x201
    91e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91ec:	4b07      	ldr	r3, [pc, #28]	; (920c <_usb_d_dev_suspend+0x38>)
    91ee:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    91f0:	2170      	movs	r1, #112	; 0x70
    91f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91f6:	4b06      	ldr	r3, [pc, #24]	; (9210 <_usb_d_dev_suspend+0x3c>)
    91f8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    91fa:	4b06      	ldr	r3, [pc, #24]	; (9214 <_usb_d_dev_suspend+0x40>)
    91fc:	685b      	ldr	r3, [r3, #4]
    91fe:	2100      	movs	r1, #0
    9200:	2004      	movs	r0, #4
    9202:	4798      	blx	r3
}
    9204:	bf00      	nop
    9206:	bd80      	pop	{r7, pc}
    9208:	000086cf 	.word	0x000086cf
    920c:	00008725 	.word	0x00008725
    9210:	000086ed 	.word	0x000086ed
    9214:	2000096c 	.word	0x2000096c

00009218 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9218:	b580      	push	{r7, lr}
    921a:	b082      	sub	sp, #8
    921c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    921e:	2301      	movs	r3, #1
    9220:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9222:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9226:	4b22      	ldr	r3, [pc, #136]	; (92b0 <_usb_d_dev_handle_nep+0x98>)
    9228:	4798      	blx	r3
    922a:	4603      	mov	r3, r0
    922c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    922e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9232:	4b20      	ldr	r3, [pc, #128]	; (92b4 <_usb_d_dev_handle_nep+0x9c>)
    9234:	4798      	blx	r3
    9236:	4603      	mov	r3, r0
    9238:	461a      	mov	r2, r3
    923a:	88bb      	ldrh	r3, [r7, #4]
    923c:	4013      	ands	r3, r2
    923e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9240:	88bb      	ldrh	r3, [r7, #4]
    9242:	f003 0304 	and.w	r3, r3, #4
    9246:	2b00      	cmp	r3, #0
    9248:	d003      	beq.n	9252 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    924a:	4b1b      	ldr	r3, [pc, #108]	; (92b8 <_usb_d_dev_handle_nep+0xa0>)
    924c:	4798      	blx	r3
		return true;
    924e:	2301      	movs	r3, #1
    9250:	e02a      	b.n	92a8 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9252:	88bb      	ldrh	r3, [r7, #4]
    9254:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9258:	2b00      	cmp	r3, #0
    925a:	d002      	beq.n	9262 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    925c:	4b17      	ldr	r3, [pc, #92]	; (92bc <_usb_d_dev_handle_nep+0xa4>)
    925e:	4798      	blx	r3
    9260:	e021      	b.n	92a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9262:	88bb      	ldrh	r3, [r7, #4]
    9264:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9268:	2b00      	cmp	r3, #0
    926a:	d002      	beq.n	9272 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    926c:	4b14      	ldr	r3, [pc, #80]	; (92c0 <_usb_d_dev_handle_nep+0xa8>)
    926e:	4798      	blx	r3
    9270:	e019      	b.n	92a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9272:	88bb      	ldrh	r3, [r7, #4]
    9274:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9278:	2b00      	cmp	r3, #0
    927a:	d002      	beq.n	9282 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    927c:	4b11      	ldr	r3, [pc, #68]	; (92c4 <_usb_d_dev_handle_nep+0xac>)
    927e:	4798      	blx	r3
    9280:	e011      	b.n	92a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9282:	88bb      	ldrh	r3, [r7, #4]
    9284:	f003 0308 	and.w	r3, r3, #8
    9288:	2b00      	cmp	r3, #0
    928a:	d002      	beq.n	9292 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    928c:	4b0e      	ldr	r3, [pc, #56]	; (92c8 <_usb_d_dev_handle_nep+0xb0>)
    928e:	4798      	blx	r3
    9290:	e009      	b.n	92a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9292:	88bb      	ldrh	r3, [r7, #4]
    9294:	f003 0301 	and.w	r3, r3, #1
    9298:	2b00      	cmp	r3, #0
    929a:	d002      	beq.n	92a2 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    929c:	4b0b      	ldr	r3, [pc, #44]	; (92cc <_usb_d_dev_handle_nep+0xb4>)
    929e:	4798      	blx	r3
    92a0:	e001      	b.n	92a6 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    92a2:	2300      	movs	r3, #0
    92a4:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    92a6:	79fb      	ldrb	r3, [r7, #7]
}
    92a8:	4618      	mov	r0, r3
    92aa:	3708      	adds	r7, #8
    92ac:	46bd      	mov	sp, r7
    92ae:	bd80      	pop	{r7, pc}
    92b0:	000086b5 	.word	0x000086b5
    92b4:	0000870b 	.word	0x0000870b
    92b8:	00009059 	.word	0x00009059
    92bc:	00009079 	.word	0x00009079
    92c0:	00009109 	.word	0x00009109
    92c4:	0000912d 	.word	0x0000912d
    92c8:	00009179 	.word	0x00009179
    92cc:	000091d5 	.word	0x000091d5

000092d0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    92d0:	b590      	push	{r4, r7, lr}
    92d2:	b089      	sub	sp, #36	; 0x24
    92d4:	af00      	add	r7, sp, #0
    92d6:	6078      	str	r0, [r7, #4]
    92d8:	460b      	mov	r3, r1
    92da:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    92dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    92e0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	7c9b      	ldrb	r3, [r3, #18]
    92e6:	f003 030f 	and.w	r3, r3, #15
    92ea:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    92ec:	7dfb      	ldrb	r3, [r7, #23]
    92ee:	015b      	lsls	r3, r3, #5
    92f0:	4a73      	ldr	r2, [pc, #460]	; (94c0 <_usb_d_dev_in_next+0x1f0>)
    92f2:	4413      	add	r3, r2
    92f4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    92f6:	78fb      	ldrb	r3, [r7, #3]
    92f8:	2b00      	cmp	r3, #0
    92fa:	d006      	beq.n	930a <_usb_d_dev_in_next+0x3a>
    92fc:	693b      	ldr	r3, [r7, #16]
    92fe:	3310      	adds	r3, #16
    9300:	685b      	ldr	r3, [r3, #4]
    9302:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9306:	b29b      	uxth	r3, r3
    9308:	e000      	b.n	930c <_usb_d_dev_in_next+0x3c>
    930a:	2300      	movs	r3, #0
    930c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    930e:	687b      	ldr	r3, [r7, #4]
    9310:	8a1b      	ldrh	r3, [r3, #16]
    9312:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9316:	4293      	cmp	r3, r2
    9318:	d103      	bne.n	9322 <_usb_d_dev_in_next+0x52>
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	8a1b      	ldrh	r3, [r3, #16]
    931e:	b21b      	sxth	r3, r3
    9320:	e004      	b.n	932c <_usb_d_dev_in_next+0x5c>
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	8a1b      	ldrh	r3, [r3, #16]
    9326:	3b01      	subs	r3, #1
    9328:	b29b      	uxth	r3, r3
    932a:	b21b      	sxth	r3, r3
    932c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9330:	4013      	ands	r3, r2
    9332:	b21b      	sxth	r3, r3
    9334:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9336:	2300      	movs	r3, #0
    9338:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	7cdb      	ldrb	r3, [r3, #19]
    933e:	f003 0307 	and.w	r3, r3, #7
    9342:	b2db      	uxtb	r3, r3
    9344:	2b01      	cmp	r3, #1
    9346:	bf0c      	ite	eq
    9348:	2301      	moveq	r3, #1
    934a:	2300      	movne	r3, #0
    934c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    934e:	78fb      	ldrb	r3, [r7, #3]
    9350:	2b00      	cmp	r3, #0
    9352:	d004      	beq.n	935e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9354:	7dfb      	ldrb	r3, [r7, #23]
    9356:	2101      	movs	r1, #1
    9358:	4618      	mov	r0, r3
    935a:	4b5a      	ldr	r3, [pc, #360]	; (94c4 <_usb_d_dev_in_next+0x1f4>)
    935c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	689a      	ldr	r2, [r3, #8]
    9362:	89fb      	ldrh	r3, [r7, #14]
    9364:	441a      	add	r2, r3
    9366:	687b      	ldr	r3, [r7, #4]
    9368:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	689a      	ldr	r2, [r3, #8]
    936e:	687b      	ldr	r3, [r7, #4]
    9370:	685b      	ldr	r3, [r3, #4]
    9372:	429a      	cmp	r2, r3
    9374:	d243      	bcs.n	93fe <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9376:	687b      	ldr	r3, [r7, #4]
    9378:	685b      	ldr	r3, [r3, #4]
    937a:	b29a      	uxth	r2, r3
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	689b      	ldr	r3, [r3, #8]
    9380:	b29b      	uxth	r3, r3
    9382:	1ad3      	subs	r3, r2, r3
    9384:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9386:	687b      	ldr	r3, [r7, #4]
    9388:	7cdb      	ldrb	r3, [r3, #19]
    938a:	f003 0320 	and.w	r3, r3, #32
    938e:	b2db      	uxtb	r3, r3
    9390:	2b00      	cmp	r3, #0
    9392:	d01b      	beq.n	93cc <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9394:	687b      	ldr	r3, [r7, #4]
    9396:	8a1b      	ldrh	r3, [r3, #16]
    9398:	8bfa      	ldrh	r2, [r7, #30]
    939a:	429a      	cmp	r2, r3
    939c:	d902      	bls.n	93a4 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	8a1b      	ldrh	r3, [r3, #16]
    93a2:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	68d8      	ldr	r0, [r3, #12]
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	681a      	ldr	r2, [r3, #0]
    93ac:	687b      	ldr	r3, [r7, #4]
    93ae:	689b      	ldr	r3, [r3, #8]
    93b0:	4413      	add	r3, r2
    93b2:	8bfa      	ldrh	r2, [r7, #30]
    93b4:	4619      	mov	r1, r3
    93b6:	4b44      	ldr	r3, [pc, #272]	; (94c8 <_usb_d_dev_in_next+0x1f8>)
    93b8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	68db      	ldr	r3, [r3, #12]
    93be:	461a      	mov	r2, r3
    93c0:	7dfb      	ldrb	r3, [r7, #23]
    93c2:	2101      	movs	r1, #1
    93c4:	4618      	mov	r0, r3
    93c6:	4b41      	ldr	r3, [pc, #260]	; (94cc <_usb_d_dev_in_next+0x1fc>)
    93c8:	4798      	blx	r3
    93ca:	e011      	b.n	93f0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    93cc:	8bfb      	ldrh	r3, [r7, #30]
    93ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    93d2:	d902      	bls.n	93da <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    93d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    93d8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    93da:	687b      	ldr	r3, [r7, #4]
    93dc:	681a      	ldr	r2, [r3, #0]
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	689b      	ldr	r3, [r3, #8]
    93e2:	4413      	add	r3, r2
    93e4:	461a      	mov	r2, r3
    93e6:	7dfb      	ldrb	r3, [r7, #23]
    93e8:	2101      	movs	r1, #1
    93ea:	4618      	mov	r0, r3
    93ec:	4b37      	ldr	r3, [pc, #220]	; (94cc <_usb_d_dev_in_next+0x1fc>)
    93ee:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    93f0:	8bfa      	ldrh	r2, [r7, #30]
    93f2:	7df8      	ldrb	r0, [r7, #23]
    93f4:	2300      	movs	r3, #0
    93f6:	2101      	movs	r1, #1
    93f8:	4c35      	ldr	r4, [pc, #212]	; (94d0 <_usb_d_dev_in_next+0x200>)
    93fa:	47a0      	blx	r4
		goto _in_tx_exec;
    93fc:	e041      	b.n	9482 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    93fe:	687b      	ldr	r3, [r7, #4]
    9400:	7cdb      	ldrb	r3, [r3, #19]
    9402:	f003 0310 	and.w	r3, r3, #16
    9406:	b2db      	uxtb	r3, r3
    9408:	2b00      	cmp	r3, #0
    940a:	d00b      	beq.n	9424 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    940c:	687a      	ldr	r2, [r7, #4]
    940e:	7cd3      	ldrb	r3, [r2, #19]
    9410:	f36f 1304 	bfc	r3, #4, #1
    9414:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9416:	7df8      	ldrb	r0, [r7, #23]
    9418:	2300      	movs	r3, #0
    941a:	2200      	movs	r2, #0
    941c:	2101      	movs	r1, #1
    941e:	4c2c      	ldr	r4, [pc, #176]	; (94d0 <_usb_d_dev_in_next+0x200>)
    9420:	47a0      	blx	r4
		goto _in_tx_exec;
    9422:	e02e      	b.n	9482 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9424:	7afb      	ldrb	r3, [r7, #11]
    9426:	2b00      	cmp	r3, #0
    9428:	d006      	beq.n	9438 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    942a:	7dfb      	ldrb	r3, [r7, #23]
    942c:	224b      	movs	r2, #75	; 0x4b
    942e:	4619      	mov	r1, r3
    9430:	69b8      	ldr	r0, [r7, #24]
    9432:	4b28      	ldr	r3, [pc, #160]	; (94d4 <_usb_d_dev_in_next+0x204>)
    9434:	4798      	blx	r3
    9436:	e005      	b.n	9444 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9438:	7dfb      	ldrb	r3, [r7, #23]
    943a:	224a      	movs	r2, #74	; 0x4a
    943c:	4619      	mov	r1, r3
    943e:	69b8      	ldr	r0, [r7, #24]
    9440:	4b24      	ldr	r3, [pc, #144]	; (94d4 <_usb_d_dev_in_next+0x204>)
    9442:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	8a1b      	ldrh	r3, [r3, #16]
    9448:	89ba      	ldrh	r2, [r7, #12]
    944a:	429a      	cmp	r2, r3
    944c:	d114      	bne.n	9478 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    944e:	687a      	ldr	r2, [r7, #4]
    9450:	7cd3      	ldrb	r3, [r2, #19]
    9452:	f36f 1386 	bfc	r3, #6, #1
    9456:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9458:	4b1f      	ldr	r3, [pc, #124]	; (94d8 <_usb_d_dev_in_next+0x208>)
    945a:	68db      	ldr	r3, [r3, #12]
    945c:	687a      	ldr	r2, [r7, #4]
    945e:	7c90      	ldrb	r0, [r2, #18]
    9460:	687a      	ldr	r2, [r7, #4]
    9462:	6892      	ldr	r2, [r2, #8]
    9464:	4611      	mov	r1, r2
    9466:	4798      	blx	r3
    9468:	4603      	mov	r3, r0
    946a:	2b00      	cmp	r3, #0
    946c:	d124      	bne.n	94b8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    946e:	687a      	ldr	r2, [r7, #4]
    9470:	7cd3      	ldrb	r3, [r2, #19]
    9472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9476:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9478:	2100      	movs	r1, #0
    947a:	6878      	ldr	r0, [r7, #4]
    947c:	4b17      	ldr	r3, [pc, #92]	; (94dc <_usb_d_dev_in_next+0x20c>)
    947e:	4798      	blx	r3
	return;
    9480:	e01b      	b.n	94ba <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9482:	78fb      	ldrb	r3, [r7, #3]
    9484:	f083 0301 	eor.w	r3, r3, #1
    9488:	b2db      	uxtb	r3, r3
    948a:	2b00      	cmp	r3, #0
    948c:	d00d      	beq.n	94aa <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    948e:	7afb      	ldrb	r3, [r7, #11]
    9490:	2b00      	cmp	r3, #0
    9492:	d002      	beq.n	949a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9494:	234e      	movs	r3, #78	; 0x4e
    9496:	777b      	strb	r3, [r7, #29]
    9498:	e001      	b.n	949e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    949a:	234a      	movs	r3, #74	; 0x4a
    949c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    949e:	7f7a      	ldrb	r2, [r7, #29]
    94a0:	7dfb      	ldrb	r3, [r7, #23]
    94a2:	4619      	mov	r1, r3
    94a4:	69b8      	ldr	r0, [r7, #24]
    94a6:	4b0e      	ldr	r3, [pc, #56]	; (94e0 <_usb_d_dev_in_next+0x210>)
    94a8:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    94aa:	7dfb      	ldrb	r3, [r7, #23]
    94ac:	2201      	movs	r2, #1
    94ae:	2101      	movs	r1, #1
    94b0:	4618      	mov	r0, r3
    94b2:	4b0c      	ldr	r3, [pc, #48]	; (94e4 <_usb_d_dev_in_next+0x214>)
    94b4:	4798      	blx	r3
    94b6:	e000      	b.n	94ba <_usb_d_dev_in_next+0x1ea>
			return;
    94b8:	bf00      	nop
}
    94ba:	3724      	adds	r7, #36	; 0x24
    94bc:	46bd      	mov	sp, r7
    94be:	bd90      	pop	{r4, r7, pc}
    94c0:	20000a34 	.word	0x20000a34
    94c4:	00008cc9 	.word	0x00008cc9
    94c8:	0000e999 	.word	0x0000e999
    94cc:	00008cf5 	.word	0x00008cf5
    94d0:	00008e3d 	.word	0x00008e3d
    94d4:	000085d5 	.word	0x000085d5
    94d8:	2000096c 	.word	0x2000096c
    94dc:	0000a5f9 	.word	0x0000a5f9
    94e0:	000085a9 	.word	0x000085a9
    94e4:	00008ef5 	.word	0x00008ef5

000094e8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    94e8:	b590      	push	{r4, r7, lr}
    94ea:	b08b      	sub	sp, #44	; 0x2c
    94ec:	af00      	add	r7, sp, #0
    94ee:	6078      	str	r0, [r7, #4]
    94f0:	460b      	mov	r3, r1
    94f2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    94f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94f8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    94fa:	687b      	ldr	r3, [r7, #4]
    94fc:	7c9b      	ldrb	r3, [r3, #18]
    94fe:	f003 030f 	and.w	r3, r3, #15
    9502:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9504:	7ffb      	ldrb	r3, [r7, #31]
    9506:	015b      	lsls	r3, r3, #5
    9508:	4a94      	ldr	r2, [pc, #592]	; (975c <_usb_d_dev_out_next+0x274>)
    950a:	4413      	add	r3, r2
    950c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    950e:	78fb      	ldrb	r3, [r7, #3]
    9510:	2b00      	cmp	r3, #0
    9512:	d005      	beq.n	9520 <_usb_d_dev_out_next+0x38>
    9514:	69bb      	ldr	r3, [r7, #24]
    9516:	685b      	ldr	r3, [r3, #4]
    9518:	f3c3 338d 	ubfx	r3, r3, #14, #14
    951c:	b29b      	uxth	r3, r3
    951e:	e000      	b.n	9522 <_usb_d_dev_out_next+0x3a>
    9520:	2300      	movs	r3, #0
    9522:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9524:	78fb      	ldrb	r3, [r7, #3]
    9526:	2b00      	cmp	r3, #0
    9528:	d005      	beq.n	9536 <_usb_d_dev_out_next+0x4e>
    952a:	69bb      	ldr	r3, [r7, #24]
    952c:	685b      	ldr	r3, [r3, #4]
    952e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9532:	b29b      	uxth	r3, r3
    9534:	e000      	b.n	9538 <_usb_d_dev_out_next+0x50>
    9536:	2300      	movs	r3, #0
    9538:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	8a1b      	ldrh	r3, [r3, #16]
    953e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9542:	4293      	cmp	r3, r2
    9544:	d004      	beq.n	9550 <_usb_d_dev_out_next+0x68>
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	8a1b      	ldrh	r3, [r3, #16]
    954a:	3b01      	subs	r3, #1
    954c:	b29b      	uxth	r3, r3
    954e:	e001      	b.n	9554 <_usb_d_dev_out_next+0x6c>
    9550:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9554:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9556:	8aba      	ldrh	r2, [r7, #20]
    9558:	8a7b      	ldrh	r3, [r7, #18]
    955a:	4013      	ands	r3, r2
    955c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    955e:	687b      	ldr	r3, [r7, #4]
    9560:	7cdb      	ldrb	r3, [r3, #19]
    9562:	f003 0307 	and.w	r3, r3, #7
    9566:	b2db      	uxtb	r3, r3
    9568:	2b01      	cmp	r3, #1
    956a:	bf0c      	ite	eq
    956c:	2301      	moveq	r3, #1
    956e:	2300      	movne	r3, #0
    9570:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9572:	78fb      	ldrb	r3, [r7, #3]
    9574:	2b00      	cmp	r3, #0
    9576:	d004      	beq.n	9582 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9578:	7ffb      	ldrb	r3, [r7, #31]
    957a:	2100      	movs	r1, #0
    957c:	4618      	mov	r0, r3
    957e:	4b78      	ldr	r3, [pc, #480]	; (9760 <_usb_d_dev_out_next+0x278>)
    9580:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9582:	687b      	ldr	r3, [r7, #4]
    9584:	7cdb      	ldrb	r3, [r3, #19]
    9586:	f003 0320 	and.w	r3, r3, #32
    958a:	b2db      	uxtb	r3, r3
    958c:	2b00      	cmp	r3, #0
    958e:	d01c      	beq.n	95ca <_usb_d_dev_out_next+0xe2>
    9590:	687b      	ldr	r3, [r7, #4]
    9592:	685b      	ldr	r3, [r3, #4]
    9594:	2b00      	cmp	r3, #0
    9596:	d018      	beq.n	95ca <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9598:	687b      	ldr	r3, [r7, #4]
    959a:	685b      	ldr	r3, [r3, #4]
    959c:	b29a      	uxth	r2, r3
    959e:	687b      	ldr	r3, [r7, #4]
    95a0:	689b      	ldr	r3, [r3, #8]
    95a2:	b29b      	uxth	r3, r3
    95a4:	1ad3      	subs	r3, r2, r3
    95a6:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    95a8:	687b      	ldr	r3, [r7, #4]
    95aa:	681a      	ldr	r2, [r3, #0]
    95ac:	687b      	ldr	r3, [r7, #4]
    95ae:	689b      	ldr	r3, [r3, #8]
    95b0:	18d0      	adds	r0, r2, r3
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	68d9      	ldr	r1, [r3, #12]
    95b6:	89ba      	ldrh	r2, [r7, #12]
    95b8:	8a3b      	ldrh	r3, [r7, #16]
    95ba:	429a      	cmp	r2, r3
    95bc:	d901      	bls.n	95c2 <_usb_d_dev_out_next+0xda>
    95be:	8a3b      	ldrh	r3, [r7, #16]
    95c0:	e000      	b.n	95c4 <_usb_d_dev_out_next+0xdc>
    95c2:	89bb      	ldrh	r3, [r7, #12]
    95c4:	461a      	mov	r2, r3
    95c6:	4b67      	ldr	r3, [pc, #412]	; (9764 <_usb_d_dev_out_next+0x27c>)
    95c8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	685b      	ldr	r3, [r3, #4]
    95ce:	2b00      	cmp	r3, #0
    95d0:	d121      	bne.n	9616 <_usb_d_dev_out_next+0x12e>
    95d2:	687b      	ldr	r3, [r7, #4]
    95d4:	7cdb      	ldrb	r3, [r3, #19]
    95d6:	f003 0310 	and.w	r3, r3, #16
    95da:	b2db      	uxtb	r3, r3
    95dc:	2b00      	cmp	r3, #0
    95de:	d01a      	beq.n	9616 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    95e0:	687a      	ldr	r2, [r7, #4]
    95e2:	7cd3      	ldrb	r3, [r2, #19]
    95e4:	f36f 1304 	bfc	r3, #4, #1
    95e8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    95ea:	687a      	ldr	r2, [r7, #4]
    95ec:	7cd3      	ldrb	r3, [r2, #19]
    95ee:	f043 0320 	orr.w	r3, r3, #32
    95f2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    95f4:	687b      	ldr	r3, [r7, #4]
    95f6:	68db      	ldr	r3, [r3, #12]
    95f8:	461a      	mov	r2, r3
    95fa:	7ffb      	ldrb	r3, [r7, #31]
    95fc:	2100      	movs	r1, #0
    95fe:	4618      	mov	r0, r3
    9600:	4b59      	ldr	r3, [pc, #356]	; (9768 <_usb_d_dev_out_next+0x280>)
    9602:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9604:	687b      	ldr	r3, [r7, #4]
    9606:	8a1b      	ldrh	r3, [r3, #16]
    9608:	461a      	mov	r2, r3
    960a:	7ff8      	ldrb	r0, [r7, #31]
    960c:	2300      	movs	r3, #0
    960e:	2100      	movs	r1, #0
    9610:	4c56      	ldr	r4, [pc, #344]	; (976c <_usb_d_dev_out_next+0x284>)
    9612:	47a0      	blx	r4
		goto _out_rx_exec;
    9614:	e090      	b.n	9738 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9616:	78fb      	ldrb	r3, [r7, #3]
    9618:	2b00      	cmp	r3, #0
    961a:	d010      	beq.n	963e <_usb_d_dev_out_next+0x156>
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	8a1b      	ldrh	r3, [r3, #16]
    9620:	8a3a      	ldrh	r2, [r7, #16]
    9622:	429a      	cmp	r2, r3
    9624:	d20b      	bcs.n	963e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9626:	687a      	ldr	r2, [r7, #4]
    9628:	7cd3      	ldrb	r3, [r2, #19]
    962a:	f36f 1304 	bfc	r3, #4, #1
    962e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	689a      	ldr	r2, [r3, #8]
    9634:	8abb      	ldrh	r3, [r7, #20]
    9636:	441a      	add	r2, r3
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	609a      	str	r2, [r3, #8]
    963c:	e05c      	b.n	96f8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    963e:	687b      	ldr	r3, [r7, #4]
    9640:	689a      	ldr	r2, [r3, #8]
    9642:	8afb      	ldrh	r3, [r7, #22]
    9644:	441a      	add	r2, r3
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	689a      	ldr	r2, [r3, #8]
    964e:	687b      	ldr	r3, [r7, #4]
    9650:	685b      	ldr	r3, [r3, #4]
    9652:	429a      	cmp	r2, r3
    9654:	d250      	bcs.n	96f8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9656:	687b      	ldr	r3, [r7, #4]
    9658:	685b      	ldr	r3, [r3, #4]
    965a:	b29a      	uxth	r2, r3
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	689b      	ldr	r3, [r3, #8]
    9660:	b29b      	uxth	r3, r3
    9662:	1ad3      	subs	r3, r2, r3
    9664:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	7cdb      	ldrb	r3, [r3, #19]
    966a:	f003 0320 	and.w	r3, r3, #32
    966e:	b2db      	uxtb	r3, r3
    9670:	2b00      	cmp	r3, #0
    9672:	d010      	beq.n	9696 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9674:	687b      	ldr	r3, [r7, #4]
    9676:	8a1b      	ldrh	r3, [r3, #16]
    9678:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    967a:	429a      	cmp	r2, r3
    967c:	d902      	bls.n	9684 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    967e:	687b      	ldr	r3, [r7, #4]
    9680:	8a1b      	ldrh	r3, [r3, #16]
    9682:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	68db      	ldr	r3, [r3, #12]
    9688:	461a      	mov	r2, r3
    968a:	7ffb      	ldrb	r3, [r7, #31]
    968c:	2100      	movs	r1, #0
    968e:	4618      	mov	r0, r3
    9690:	4b35      	ldr	r3, [pc, #212]	; (9768 <_usb_d_dev_out_next+0x280>)
    9692:	4798      	blx	r3
    9694:	e029      	b.n	96ea <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	8a1b      	ldrh	r3, [r3, #16]
    969a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    969c:	429a      	cmp	r2, r3
    969e:	d90f      	bls.n	96c0 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    96a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    96a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    96a6:	d903      	bls.n	96b0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    96a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    96ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    96ae:	e011      	b.n	96d4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    96b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96b2:	8a7b      	ldrh	r3, [r7, #18]
    96b4:	4013      	ands	r3, r2
    96b6:	b29b      	uxth	r3, r3
    96b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96ba:	1ad3      	subs	r3, r2, r3
    96bc:	84fb      	strh	r3, [r7, #38]	; 0x26
    96be:	e009      	b.n	96d4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    96c0:	687b      	ldr	r3, [r7, #4]
    96c2:	8a1b      	ldrh	r3, [r3, #16]
    96c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96c6:	429a      	cmp	r2, r3
    96c8:	d204      	bcs.n	96d4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    96ca:	687a      	ldr	r2, [r7, #4]
    96cc:	7cd3      	ldrb	r3, [r2, #19]
    96ce:	f043 0320 	orr.w	r3, r3, #32
    96d2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    96d4:	687b      	ldr	r3, [r7, #4]
    96d6:	681a      	ldr	r2, [r3, #0]
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	689b      	ldr	r3, [r3, #8]
    96dc:	4413      	add	r3, r2
    96de:	461a      	mov	r2, r3
    96e0:	7ffb      	ldrb	r3, [r7, #31]
    96e2:	2100      	movs	r1, #0
    96e4:	4618      	mov	r0, r3
    96e6:	4b20      	ldr	r3, [pc, #128]	; (9768 <_usb_d_dev_out_next+0x280>)
    96e8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    96ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96ec:	7ff8      	ldrb	r0, [r7, #31]
    96ee:	2300      	movs	r3, #0
    96f0:	2100      	movs	r1, #0
    96f2:	4c1e      	ldr	r4, [pc, #120]	; (976c <_usb_d_dev_out_next+0x284>)
    96f4:	47a0      	blx	r4
			goto _out_rx_exec;
    96f6:	e01f      	b.n	9738 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    96f8:	7bfb      	ldrb	r3, [r7, #15]
    96fa:	2b00      	cmp	r3, #0
    96fc:	d006      	beq.n	970c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    96fe:	7ffb      	ldrb	r3, [r7, #31]
    9700:	222d      	movs	r2, #45	; 0x2d
    9702:	4619      	mov	r1, r3
    9704:	6a38      	ldr	r0, [r7, #32]
    9706:	4b1a      	ldr	r3, [pc, #104]	; (9770 <_usb_d_dev_out_next+0x288>)
    9708:	4798      	blx	r3
    970a:	e005      	b.n	9718 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    970c:	7ffb      	ldrb	r3, [r7, #31]
    970e:	2225      	movs	r2, #37	; 0x25
    9710:	4619      	mov	r1, r3
    9712:	6a38      	ldr	r0, [r7, #32]
    9714:	4b16      	ldr	r3, [pc, #88]	; (9770 <_usb_d_dev_out_next+0x288>)
    9716:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9718:	7ffb      	ldrb	r3, [r7, #31]
    971a:	2b00      	cmp	r3, #0
    971c:	d107      	bne.n	972e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    971e:	687b      	ldr	r3, [r7, #4]
    9720:	68db      	ldr	r3, [r3, #12]
    9722:	461a      	mov	r2, r3
    9724:	7ffb      	ldrb	r3, [r7, #31]
    9726:	2100      	movs	r1, #0
    9728:	4618      	mov	r0, r3
    972a:	4b0f      	ldr	r3, [pc, #60]	; (9768 <_usb_d_dev_out_next+0x280>)
    972c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    972e:	2100      	movs	r1, #0
    9730:	6878      	ldr	r0, [r7, #4]
    9732:	4b10      	ldr	r3, [pc, #64]	; (9774 <_usb_d_dev_out_next+0x28c>)
    9734:	4798      	blx	r3
	return;
    9736:	e031      	b.n	979c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9738:	78fb      	ldrb	r3, [r7, #3]
    973a:	f083 0301 	eor.w	r3, r3, #1
    973e:	b2db      	uxtb	r3, r3
    9740:	2b00      	cmp	r3, #0
    9742:	d025      	beq.n	9790 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9744:	7bfb      	ldrb	r3, [r7, #15]
    9746:	2b00      	cmp	r3, #0
    9748:	d018      	beq.n	977c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    974a:	7ffb      	ldrb	r3, [r7, #31]
    974c:	2101      	movs	r1, #1
    974e:	4618      	mov	r0, r3
    9750:	4b09      	ldr	r3, [pc, #36]	; (9778 <_usb_d_dev_out_next+0x290>)
    9752:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9754:	232d      	movs	r3, #45	; 0x2d
    9756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    975a:	e012      	b.n	9782 <_usb_d_dev_out_next+0x29a>
    975c:	20000a34 	.word	0x20000a34
    9760:	00008cc9 	.word	0x00008cc9
    9764:	0000e999 	.word	0x0000e999
    9768:	00008cf5 	.word	0x00008cf5
    976c:	00008e7d 	.word	0x00008e7d
    9770:	000085d5 	.word	0x000085d5
    9774:	0000a5f9 	.word	0x0000a5f9
    9778:	00008ebd 	.word	0x00008ebd
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    977c:	2325      	movs	r3, #37	; 0x25
    977e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9782:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9786:	7ffb      	ldrb	r3, [r7, #31]
    9788:	4619      	mov	r1, r3
    978a:	6a38      	ldr	r0, [r7, #32]
    978c:	4b05      	ldr	r3, [pc, #20]	; (97a4 <_usb_d_dev_out_next+0x2bc>)
    978e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9790:	7ffb      	ldrb	r3, [r7, #31]
    9792:	2201      	movs	r2, #1
    9794:	2100      	movs	r1, #0
    9796:	4618      	mov	r0, r3
    9798:	4b03      	ldr	r3, [pc, #12]	; (97a8 <_usb_d_dev_out_next+0x2c0>)
    979a:	4798      	blx	r3
}
    979c:	372c      	adds	r7, #44	; 0x2c
    979e:	46bd      	mov	sp, r7
    97a0:	bd90      	pop	{r4, r7, pc}
    97a2:	bf00      	nop
    97a4:	000085a9 	.word	0x000085a9
    97a8:	00008f4d 	.word	0x00008f4d

000097ac <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    97ac:	b580      	push	{r7, lr}
    97ae:	b084      	sub	sp, #16
    97b0:	af00      	add	r7, sp, #0
    97b2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    97b4:	687b      	ldr	r3, [r7, #4]
    97b6:	7c9b      	ldrb	r3, [r3, #18]
    97b8:	f003 030f 	and.w	r3, r3, #15
    97bc:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	7cdb      	ldrb	r3, [r3, #19]
    97c2:	f003 0307 	and.w	r3, r3, #7
    97c6:	b2db      	uxtb	r3, r3
    97c8:	2b01      	cmp	r3, #1
    97ca:	bf0c      	ite	eq
    97cc:	2301      	moveq	r3, #1
    97ce:	2300      	movne	r3, #0
    97d0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    97d2:	7bbb      	ldrb	r3, [r7, #14]
    97d4:	f083 0301 	eor.w	r3, r3, #1
    97d8:	b2db      	uxtb	r3, r3
    97da:	2b00      	cmp	r3, #0
    97dc:	d008      	beq.n	97f0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    97de:	7bfb      	ldrb	r3, [r7, #15]
    97e0:	4618      	mov	r0, r3
    97e2:	4b20      	ldr	r3, [pc, #128]	; (9864 <_usb_d_dev_handle_setup+0xb8>)
    97e4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    97e6:	7bfb      	ldrb	r3, [r7, #15]
    97e8:	4618      	mov	r0, r3
    97ea:	4b1f      	ldr	r3, [pc, #124]	; (9868 <_usb_d_dev_handle_setup+0xbc>)
    97ec:	4798      	blx	r3
		return;
    97ee:	e036      	b.n	985e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    97f0:	687b      	ldr	r3, [r7, #4]
    97f2:	7cdb      	ldrb	r3, [r3, #19]
    97f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    97f8:	b2db      	uxtb	r3, r3
    97fa:	2b00      	cmp	r3, #0
    97fc:	d010      	beq.n	9820 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    97fe:	687a      	ldr	r2, [r7, #4]
    9800:	7cd3      	ldrb	r3, [r2, #19]
    9802:	f36f 1386 	bfc	r3, #6, #1
    9806:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9808:	7bfb      	ldrb	r3, [r7, #15]
    980a:	2200      	movs	r2, #0
    980c:	2101      	movs	r1, #1
    980e:	4618      	mov	r0, r3
    9810:	4b16      	ldr	r3, [pc, #88]	; (986c <_usb_d_dev_handle_setup+0xc0>)
    9812:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9814:	7bfb      	ldrb	r3, [r7, #15]
    9816:	2200      	movs	r2, #0
    9818:	2100      	movs	r1, #0
    981a:	4618      	mov	r0, r3
    981c:	4b14      	ldr	r3, [pc, #80]	; (9870 <_usb_d_dev_handle_setup+0xc4>)
    981e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9820:	687a      	ldr	r2, [r7, #4]
    9822:	7cd3      	ldrb	r3, [r2, #19]
    9824:	f36f 03c3 	bfc	r3, #3, #1
    9828:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    982a:	7bfb      	ldrb	r3, [r7, #15]
    982c:	2100      	movs	r1, #0
    982e:	4618      	mov	r0, r3
    9830:	4b10      	ldr	r3, [pc, #64]	; (9874 <_usb_d_dev_handle_setup+0xc8>)
    9832:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9834:	7bfb      	ldrb	r3, [r7, #15]
    9836:	2101      	movs	r1, #1
    9838:	4618      	mov	r0, r3
    983a:	4b0e      	ldr	r3, [pc, #56]	; (9874 <_usb_d_dev_handle_setup+0xc8>)
    983c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    983e:	7bfb      	ldrb	r3, [r7, #15]
    9840:	216f      	movs	r1, #111	; 0x6f
    9842:	4618      	mov	r0, r3
    9844:	4b0c      	ldr	r3, [pc, #48]	; (9878 <_usb_d_dev_handle_setup+0xcc>)
    9846:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9848:	7bfb      	ldrb	r3, [r7, #15]
    984a:	216f      	movs	r1, #111	; 0x6f
    984c:	4618      	mov	r0, r3
    984e:	4b0b      	ldr	r3, [pc, #44]	; (987c <_usb_d_dev_handle_setup+0xd0>)
    9850:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9852:	4b0b      	ldr	r3, [pc, #44]	; (9880 <_usb_d_dev_handle_setup+0xd4>)
    9854:	689b      	ldr	r3, [r3, #8]
    9856:	687a      	ldr	r2, [r7, #4]
    9858:	7c92      	ldrb	r2, [r2, #18]
    985a:	4610      	mov	r0, r2
    985c:	4798      	blx	r3
}
    985e:	3710      	adds	r7, #16
    9860:	46bd      	mov	sp, r7
    9862:	bd80      	pop	{r7, pc}
    9864:	00008c51 	.word	0x00008c51
    9868:	00008bfd 	.word	0x00008bfd
    986c:	00008ef5 	.word	0x00008ef5
    9870:	00008f4d 	.word	0x00008f4d
    9874:	00008ebd 	.word	0x00008ebd
    9878:	000089fd 	.word	0x000089fd
    987c:	00008a4d 	.word	0x00008a4d
    9880:	2000096c 	.word	0x2000096c

00009884 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9884:	b580      	push	{r7, lr}
    9886:	b084      	sub	sp, #16
    9888:	af00      	add	r7, sp, #0
    988a:	6078      	str	r0, [r7, #4]
    988c:	460b      	mov	r3, r1
    988e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9890:	687b      	ldr	r3, [r7, #4]
    9892:	7c9b      	ldrb	r3, [r3, #18]
    9894:	f003 030f 	and.w	r3, r3, #15
    9898:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    989a:	78f9      	ldrb	r1, [r7, #3]
    989c:	7bfb      	ldrb	r3, [r7, #15]
    989e:	2200      	movs	r2, #0
    98a0:	4618      	mov	r0, r3
    98a2:	4b07      	ldr	r3, [pc, #28]	; (98c0 <_usb_d_dev_handle_stall+0x3c>)
    98a4:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    98a6:	4b07      	ldr	r3, [pc, #28]	; (98c4 <_usb_d_dev_handle_stall+0x40>)
    98a8:	691b      	ldr	r3, [r3, #16]
    98aa:	687a      	ldr	r2, [r7, #4]
    98ac:	7c90      	ldrb	r0, [r2, #18]
    98ae:	687a      	ldr	r2, [r7, #4]
    98b0:	6892      	ldr	r2, [r2, #8]
    98b2:	2101      	movs	r1, #1
    98b4:	4798      	blx	r3
}
    98b6:	bf00      	nop
    98b8:	3710      	adds	r7, #16
    98ba:	46bd      	mov	sp, r7
    98bc:	bd80      	pop	{r7, pc}
    98be:	bf00      	nop
    98c0:	00008bb1 	.word	0x00008bb1
    98c4:	2000096c 	.word	0x2000096c

000098c8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    98c8:	b580      	push	{r7, lr}
    98ca:	b088      	sub	sp, #32
    98cc:	af00      	add	r7, sp, #0
    98ce:	6078      	str	r0, [r7, #4]
    98d0:	460b      	mov	r3, r1
    98d2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    98d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    98d8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    98da:	687b      	ldr	r3, [r7, #4]
    98dc:	7c9b      	ldrb	r3, [r3, #18]
    98de:	f003 030f 	and.w	r3, r3, #15
    98e2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    98e4:	4b61      	ldr	r3, [pc, #388]	; (9a6c <_usb_d_dev_handle_trfail+0x1a4>)
    98e6:	881b      	ldrh	r3, [r3, #0]
    98e8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    98ea:	7efb      	ldrb	r3, [r7, #27]
    98ec:	015b      	lsls	r3, r3, #5
    98ee:	4a60      	ldr	r2, [pc, #384]	; (9a70 <_usb_d_dev_handle_trfail+0x1a8>)
    98f0:	4413      	add	r3, r2
    98f2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    98f4:	78fb      	ldrb	r3, [r7, #3]
    98f6:	2b00      	cmp	r3, #0
    98f8:	d006      	beq.n	9908 <_usb_d_dev_handle_trfail+0x40>
    98fa:	7efb      	ldrb	r3, [r7, #27]
    98fc:	4619      	mov	r1, r3
    98fe:	69f8      	ldr	r0, [r7, #28]
    9900:	4b5c      	ldr	r3, [pc, #368]	; (9a74 <_usb_d_dev_handle_trfail+0x1ac>)
    9902:	4798      	blx	r3
    9904:	4603      	mov	r3, r0
    9906:	e005      	b.n	9914 <_usb_d_dev_handle_trfail+0x4c>
    9908:	7efb      	ldrb	r3, [r7, #27]
    990a:	4619      	mov	r1, r3
    990c:	69f8      	ldr	r0, [r7, #28]
    990e:	4b5a      	ldr	r3, [pc, #360]	; (9a78 <_usb_d_dev_handle_trfail+0x1b0>)
    9910:	4798      	blx	r3
    9912:	4603      	mov	r3, r0
    9914:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9916:	687b      	ldr	r3, [r7, #4]
    9918:	7cdb      	ldrb	r3, [r3, #19]
    991a:	f003 0307 	and.w	r3, r3, #7
    991e:	b2db      	uxtb	r3, r3
    9920:	2b01      	cmp	r3, #1
    9922:	bf0c      	ite	eq
    9924:	2301      	moveq	r3, #1
    9926:	2300      	movne	r3, #0
    9928:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    992a:	78fb      	ldrb	r3, [r7, #3]
    992c:	011b      	lsls	r3, r3, #4
    992e:	697a      	ldr	r2, [r7, #20]
    9930:	4413      	add	r3, r2
    9932:	7a9b      	ldrb	r3, [r3, #10]
    9934:	b2db      	uxtb	r3, r3
    9936:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9938:	7cfb      	ldrb	r3, [r7, #19]
    993a:	2b02      	cmp	r3, #2
    993c:	d12f      	bne.n	999e <_usb_d_dev_handle_trfail+0xd6>
    993e:	7b3b      	ldrb	r3, [r7, #12]
    9940:	f003 0301 	and.w	r3, r3, #1
    9944:	b2db      	uxtb	r3, r3
    9946:	2b00      	cmp	r3, #0
    9948:	d029      	beq.n	999e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    994a:	78fb      	ldrb	r3, [r7, #3]
    994c:	011b      	lsls	r3, r3, #4
    994e:	697a      	ldr	r2, [r7, #20]
    9950:	441a      	add	r2, r3
    9952:	7a93      	ldrb	r3, [r2, #10]
    9954:	f36f 0300 	bfc	r3, #0, #1
    9958:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    995a:	78fb      	ldrb	r3, [r7, #3]
    995c:	f107 0220 	add.w	r2, r7, #32
    9960:	4413      	add	r3, r2
    9962:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9966:	7efb      	ldrb	r3, [r7, #27]
    9968:	4619      	mov	r1, r3
    996a:	69f8      	ldr	r0, [r7, #28]
    996c:	4b43      	ldr	r3, [pc, #268]	; (9a7c <_usb_d_dev_handle_trfail+0x1b4>)
    996e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9970:	78fb      	ldrb	r3, [r7, #3]
    9972:	f107 0220 	add.w	r2, r7, #32
    9976:	4413      	add	r3, r2
    9978:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    997c:	7efb      	ldrb	r3, [r7, #27]
    997e:	4619      	mov	r1, r3
    9980:	69f8      	ldr	r0, [r7, #28]
    9982:	4b3f      	ldr	r3, [pc, #252]	; (9a80 <_usb_d_dev_handle_trfail+0x1b8>)
    9984:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9986:	78fb      	ldrb	r3, [r7, #3]
    9988:	2b00      	cmp	r3, #0
    998a:	bf14      	ite	ne
    998c:	2301      	movne	r3, #1
    998e:	2300      	moveq	r3, #0
    9990:	b2db      	uxtb	r3, r3
    9992:	2204      	movs	r2, #4
    9994:	4619      	mov	r1, r3
    9996:	6878      	ldr	r0, [r7, #4]
    9998:	4b3a      	ldr	r3, [pc, #232]	; (9a84 <_usb_d_dev_handle_trfail+0x1bc>)
    999a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    999c:	e062      	b.n	9a64 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    999e:	7b3b      	ldrb	r3, [r7, #12]
    99a0:	f003 0302 	and.w	r3, r3, #2
    99a4:	b2db      	uxtb	r3, r3
    99a6:	2b00      	cmp	r3, #0
    99a8:	d040      	beq.n	9a2c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    99aa:	78fb      	ldrb	r3, [r7, #3]
    99ac:	011b      	lsls	r3, r3, #4
    99ae:	697a      	ldr	r2, [r7, #20]
    99b0:	441a      	add	r2, r3
    99b2:	7a93      	ldrb	r3, [r2, #10]
    99b4:	f36f 0341 	bfc	r3, #1, #1
    99b8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    99ba:	78fb      	ldrb	r3, [r7, #3]
    99bc:	f107 0220 	add.w	r2, r7, #32
    99c0:	4413      	add	r3, r2
    99c2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99c6:	7efb      	ldrb	r3, [r7, #27]
    99c8:	4619      	mov	r1, r3
    99ca:	69f8      	ldr	r0, [r7, #28]
    99cc:	4b2b      	ldr	r3, [pc, #172]	; (9a7c <_usb_d_dev_handle_trfail+0x1b4>)
    99ce:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    99d0:	78fb      	ldrb	r3, [r7, #3]
    99d2:	f107 0220 	add.w	r2, r7, #32
    99d6:	4413      	add	r3, r2
    99d8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99dc:	7efb      	ldrb	r3, [r7, #27]
    99de:	4619      	mov	r1, r3
    99e0:	69f8      	ldr	r0, [r7, #28]
    99e2:	4b27      	ldr	r3, [pc, #156]	; (9a80 <_usb_d_dev_handle_trfail+0x1b8>)
    99e4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    99e6:	7cbb      	ldrb	r3, [r7, #18]
    99e8:	2b00      	cmp	r3, #0
    99ea:	d03b      	beq.n	9a64 <_usb_d_dev_handle_trfail+0x19c>
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	7cdb      	ldrb	r3, [r3, #19]
    99f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    99f4:	b2db      	uxtb	r3, r3
    99f6:	2b00      	cmp	r3, #0
    99f8:	d034      	beq.n	9a64 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	7cdb      	ldrb	r3, [r3, #19]
    99fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9a02:	b2db      	uxtb	r3, r3
    9a04:	461a      	mov	r2, r3
    9a06:	78fb      	ldrb	r3, [r7, #3]
    9a08:	4293      	cmp	r3, r2
    9a0a:	d02b      	beq.n	9a64 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9a0c:	687b      	ldr	r3, [r7, #4]
    9a0e:	7cdb      	ldrb	r3, [r3, #19]
    9a10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9a14:	b2db      	uxtb	r3, r3
    9a16:	2b00      	cmp	r3, #0
    9a18:	bf14      	ite	ne
    9a1a:	2301      	movne	r3, #1
    9a1c:	2300      	moveq	r3, #0
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	2200      	movs	r2, #0
    9a22:	4619      	mov	r1, r3
    9a24:	6878      	ldr	r0, [r7, #4]
    9a26:	4b17      	ldr	r3, [pc, #92]	; (9a84 <_usb_d_dev_handle_trfail+0x1bc>)
    9a28:	4798      	blx	r3
}
    9a2a:	e01b      	b.n	9a64 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9a2c:	78fa      	ldrb	r2, [r7, #3]
    9a2e:	7efb      	ldrb	r3, [r7, #27]
    9a30:	4611      	mov	r1, r2
    9a32:	4618      	mov	r0, r3
    9a34:	4b14      	ldr	r3, [pc, #80]	; (9a88 <_usb_d_dev_handle_trfail+0x1c0>)
    9a36:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a38:	78fb      	ldrb	r3, [r7, #3]
    9a3a:	f107 0220 	add.w	r2, r7, #32
    9a3e:	4413      	add	r3, r2
    9a40:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a44:	7efb      	ldrb	r3, [r7, #27]
    9a46:	4619      	mov	r1, r3
    9a48:	69f8      	ldr	r0, [r7, #28]
    9a4a:	4b0c      	ldr	r3, [pc, #48]	; (9a7c <_usb_d_dev_handle_trfail+0x1b4>)
    9a4c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a4e:	78fb      	ldrb	r3, [r7, #3]
    9a50:	f107 0220 	add.w	r2, r7, #32
    9a54:	4413      	add	r3, r2
    9a56:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a5a:	7efb      	ldrb	r3, [r7, #27]
    9a5c:	4619      	mov	r1, r3
    9a5e:	69f8      	ldr	r0, [r7, #28]
    9a60:	4b07      	ldr	r3, [pc, #28]	; (9a80 <_usb_d_dev_handle_trfail+0x1b8>)
    9a62:	4798      	blx	r3
}
    9a64:	bf00      	nop
    9a66:	3720      	adds	r7, #32
    9a68:	46bd      	mov	sp, r7
    9a6a:	bd80      	pop	{r7, pc}
    9a6c:	0000f12c 	.word	0x0000f12c
    9a70:	20000a34 	.word	0x20000a34
    9a74:	00008631 	.word	0x00008631
    9a78:	00008601 	.word	0x00008601
    9a7c:	000084d5 	.word	0x000084d5
    9a80:	000085d5 	.word	0x000085d5
    9a84:	0000a641 	.word	0x0000a641
    9a88:	00008ebd 	.word	0x00008ebd

00009a8c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9a8c:	b580      	push	{r7, lr}
    9a8e:	b082      	sub	sp, #8
    9a90:	af00      	add	r7, sp, #0
    9a92:	6078      	str	r0, [r7, #4]
    9a94:	460b      	mov	r3, r1
    9a96:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9a98:	78fb      	ldrb	r3, [r7, #3]
    9a9a:	f003 0310 	and.w	r3, r3, #16
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	d003      	beq.n	9aaa <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9aa2:	6878      	ldr	r0, [r7, #4]
    9aa4:	4b0c      	ldr	r3, [pc, #48]	; (9ad8 <_usb_d_dev_trans_setup_isr+0x4c>)
    9aa6:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9aa8:	e012      	b.n	9ad0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9aaa:	78fb      	ldrb	r3, [r7, #3]
    9aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ab0:	2b00      	cmp	r3, #0
    9ab2:	d004      	beq.n	9abe <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9ab4:	2101      	movs	r1, #1
    9ab6:	6878      	ldr	r0, [r7, #4]
    9ab8:	4b08      	ldr	r3, [pc, #32]	; (9adc <_usb_d_dev_trans_setup_isr+0x50>)
    9aba:	4798      	blx	r3
}
    9abc:	e008      	b.n	9ad0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9abe:	78fb      	ldrb	r3, [r7, #3]
    9ac0:	f003 0320 	and.w	r3, r3, #32
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d003      	beq.n	9ad0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9ac8:	2100      	movs	r1, #0
    9aca:	6878      	ldr	r0, [r7, #4]
    9acc:	4b03      	ldr	r3, [pc, #12]	; (9adc <_usb_d_dev_trans_setup_isr+0x50>)
    9ace:	4798      	blx	r3
}
    9ad0:	bf00      	nop
    9ad2:	3708      	adds	r7, #8
    9ad4:	46bd      	mov	sp, r7
    9ad6:	bd80      	pop	{r7, pc}
    9ad8:	000097ad 	.word	0x000097ad
    9adc:	00009885 	.word	0x00009885

00009ae0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9ae0:	b580      	push	{r7, lr}
    9ae2:	b082      	sub	sp, #8
    9ae4:	af00      	add	r7, sp, #0
    9ae6:	6078      	str	r0, [r7, #4]
    9ae8:	460b      	mov	r3, r1
    9aea:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9aec:	78fb      	ldrb	r3, [r7, #3]
    9aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9af2:	2b00      	cmp	r3, #0
    9af4:	d004      	beq.n	9b00 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9af6:	2101      	movs	r1, #1
    9af8:	6878      	ldr	r0, [r7, #4]
    9afa:	4b1a      	ldr	r3, [pc, #104]	; (9b64 <_usb_d_dev_trans_in_isr+0x84>)
    9afc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9afe:	e02c      	b.n	9b5a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9b00:	78fb      	ldrb	r3, [r7, #3]
    9b02:	f003 0308 	and.w	r3, r3, #8
    9b06:	2b00      	cmp	r3, #0
    9b08:	d004      	beq.n	9b14 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9b0a:	2101      	movs	r1, #1
    9b0c:	6878      	ldr	r0, [r7, #4]
    9b0e:	4b16      	ldr	r3, [pc, #88]	; (9b68 <_usb_d_dev_trans_in_isr+0x88>)
    9b10:	4798      	blx	r3
}
    9b12:	e022      	b.n	9b5a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9b14:	78fb      	ldrb	r3, [r7, #3]
    9b16:	f003 0302 	and.w	r3, r3, #2
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d004      	beq.n	9b28 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9b1e:	2101      	movs	r1, #1
    9b20:	6878      	ldr	r0, [r7, #4]
    9b22:	4b12      	ldr	r3, [pc, #72]	; (9b6c <_usb_d_dev_trans_in_isr+0x8c>)
    9b24:	4798      	blx	r3
}
    9b26:	e018      	b.n	9b5a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	7cdb      	ldrb	r3, [r3, #19]
    9b2c:	f003 0307 	and.w	r3, r3, #7
    9b30:	b2db      	uxtb	r3, r3
    9b32:	2b01      	cmp	r3, #1
    9b34:	d111      	bne.n	9b5a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9b36:	78fb      	ldrb	r3, [r7, #3]
    9b38:	f003 0304 	and.w	r3, r3, #4
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	d004      	beq.n	9b4a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9b40:	2100      	movs	r1, #0
    9b42:	6878      	ldr	r0, [r7, #4]
    9b44:	4b08      	ldr	r3, [pc, #32]	; (9b68 <_usb_d_dev_trans_in_isr+0x88>)
    9b46:	4798      	blx	r3
}
    9b48:	e007      	b.n	9b5a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b4a:	78fb      	ldrb	r3, [r7, #3]
    9b4c:	f003 0310 	and.w	r3, r3, #16
    9b50:	2b00      	cmp	r3, #0
    9b52:	d002      	beq.n	9b5a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9b54:	6878      	ldr	r0, [r7, #4]
    9b56:	4b06      	ldr	r3, [pc, #24]	; (9b70 <_usb_d_dev_trans_in_isr+0x90>)
    9b58:	4798      	blx	r3
}
    9b5a:	bf00      	nop
    9b5c:	3708      	adds	r7, #8
    9b5e:	46bd      	mov	sp, r7
    9b60:	bd80      	pop	{r7, pc}
    9b62:	bf00      	nop
    9b64:	00009885 	.word	0x00009885
    9b68:	000098c9 	.word	0x000098c9
    9b6c:	000092d1 	.word	0x000092d1
    9b70:	000097ad 	.word	0x000097ad

00009b74 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9b74:	b580      	push	{r7, lr}
    9b76:	b082      	sub	sp, #8
    9b78:	af00      	add	r7, sp, #0
    9b7a:	6078      	str	r0, [r7, #4]
    9b7c:	460b      	mov	r3, r1
    9b7e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9b80:	78fb      	ldrb	r3, [r7, #3]
    9b82:	f003 0320 	and.w	r3, r3, #32
    9b86:	2b00      	cmp	r3, #0
    9b88:	d004      	beq.n	9b94 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9b8a:	2100      	movs	r1, #0
    9b8c:	6878      	ldr	r0, [r7, #4]
    9b8e:	4b1a      	ldr	r3, [pc, #104]	; (9bf8 <_usb_d_dev_trans_out_isr+0x84>)
    9b90:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9b92:	e02c      	b.n	9bee <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9b94:	78fb      	ldrb	r3, [r7, #3]
    9b96:	f003 0304 	and.w	r3, r3, #4
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d004      	beq.n	9ba8 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9b9e:	2100      	movs	r1, #0
    9ba0:	6878      	ldr	r0, [r7, #4]
    9ba2:	4b16      	ldr	r3, [pc, #88]	; (9bfc <_usb_d_dev_trans_out_isr+0x88>)
    9ba4:	4798      	blx	r3
}
    9ba6:	e022      	b.n	9bee <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9ba8:	78fb      	ldrb	r3, [r7, #3]
    9baa:	f003 0301 	and.w	r3, r3, #1
    9bae:	2b00      	cmp	r3, #0
    9bb0:	d004      	beq.n	9bbc <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9bb2:	2101      	movs	r1, #1
    9bb4:	6878      	ldr	r0, [r7, #4]
    9bb6:	4b12      	ldr	r3, [pc, #72]	; (9c00 <_usb_d_dev_trans_out_isr+0x8c>)
    9bb8:	4798      	blx	r3
}
    9bba:	e018      	b.n	9bee <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9bbc:	687b      	ldr	r3, [r7, #4]
    9bbe:	7cdb      	ldrb	r3, [r3, #19]
    9bc0:	f003 0307 	and.w	r3, r3, #7
    9bc4:	b2db      	uxtb	r3, r3
    9bc6:	2b01      	cmp	r3, #1
    9bc8:	d111      	bne.n	9bee <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9bca:	78fb      	ldrb	r3, [r7, #3]
    9bcc:	f003 0308 	and.w	r3, r3, #8
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d004      	beq.n	9bde <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9bd4:	2101      	movs	r1, #1
    9bd6:	6878      	ldr	r0, [r7, #4]
    9bd8:	4b08      	ldr	r3, [pc, #32]	; (9bfc <_usb_d_dev_trans_out_isr+0x88>)
    9bda:	4798      	blx	r3
}
    9bdc:	e007      	b.n	9bee <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9bde:	78fb      	ldrb	r3, [r7, #3]
    9be0:	f003 0310 	and.w	r3, r3, #16
    9be4:	2b00      	cmp	r3, #0
    9be6:	d002      	beq.n	9bee <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9be8:	6878      	ldr	r0, [r7, #4]
    9bea:	4b06      	ldr	r3, [pc, #24]	; (9c04 <_usb_d_dev_trans_out_isr+0x90>)
    9bec:	4798      	blx	r3
}
    9bee:	bf00      	nop
    9bf0:	3708      	adds	r7, #8
    9bf2:	46bd      	mov	sp, r7
    9bf4:	bd80      	pop	{r7, pc}
    9bf6:	bf00      	nop
    9bf8:	00009885 	.word	0x00009885
    9bfc:	000098c9 	.word	0x000098c9
    9c00:	000094e9 	.word	0x000094e9
    9c04:	000097ad 	.word	0x000097ad

00009c08 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9c08:	b580      	push	{r7, lr}
    9c0a:	b084      	sub	sp, #16
    9c0c:	af00      	add	r7, sp, #0
    9c0e:	6078      	str	r0, [r7, #4]
    9c10:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9c12:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c16:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c18:	683b      	ldr	r3, [r7, #0]
    9c1a:	7c9b      	ldrb	r3, [r3, #18]
    9c1c:	f003 030f 	and.w	r3, r3, #15
    9c20:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9c22:	7afb      	ldrb	r3, [r7, #11]
    9c24:	2201      	movs	r2, #1
    9c26:	409a      	lsls	r2, r3
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	4013      	ands	r3, r2
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d03d      	beq.n	9cac <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9c30:	7afb      	ldrb	r3, [r7, #11]
    9c32:	68fa      	ldr	r2, [r7, #12]
    9c34:	3308      	adds	r3, #8
    9c36:	015b      	lsls	r3, r3, #5
    9c38:	4413      	add	r3, r2
    9c3a:	3307      	adds	r3, #7
    9c3c:	781b      	ldrb	r3, [r3, #0]
    9c3e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9c40:	7afb      	ldrb	r3, [r7, #11]
    9c42:	68fa      	ldr	r2, [r7, #12]
    9c44:	015b      	lsls	r3, r3, #5
    9c46:	4413      	add	r3, r2
    9c48:	f203 1309 	addw	r3, r3, #265	; 0x109
    9c4c:	781b      	ldrb	r3, [r3, #0]
    9c4e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9c50:	7aba      	ldrb	r2, [r7, #10]
    9c52:	7a7b      	ldrb	r3, [r7, #9]
    9c54:	4013      	ands	r3, r2
    9c56:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9c58:	7abb      	ldrb	r3, [r7, #10]
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d027      	beq.n	9cae <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9c5e:	683b      	ldr	r3, [r7, #0]
    9c60:	7cdb      	ldrb	r3, [r3, #19]
    9c62:	f003 0307 	and.w	r3, r3, #7
    9c66:	b2db      	uxtb	r3, r3
    9c68:	2b01      	cmp	r3, #1
    9c6a:	d10c      	bne.n	9c86 <_usb_d_dev_handle_eps+0x7e>
    9c6c:	683b      	ldr	r3, [r7, #0]
    9c6e:	7cdb      	ldrb	r3, [r3, #19]
    9c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c74:	b2db      	uxtb	r3, r3
    9c76:	2b00      	cmp	r3, #0
    9c78:	d105      	bne.n	9c86 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9c7a:	7abb      	ldrb	r3, [r7, #10]
    9c7c:	4619      	mov	r1, r3
    9c7e:	6838      	ldr	r0, [r7, #0]
    9c80:	4b0c      	ldr	r3, [pc, #48]	; (9cb4 <_usb_d_dev_handle_eps+0xac>)
    9c82:	4798      	blx	r3
    9c84:	e013      	b.n	9cae <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9c86:	683b      	ldr	r3, [r7, #0]
    9c88:	7cdb      	ldrb	r3, [r3, #19]
    9c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	2b00      	cmp	r3, #0
    9c92:	d005      	beq.n	9ca0 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9c94:	7abb      	ldrb	r3, [r7, #10]
    9c96:	4619      	mov	r1, r3
    9c98:	6838      	ldr	r0, [r7, #0]
    9c9a:	4b07      	ldr	r3, [pc, #28]	; (9cb8 <_usb_d_dev_handle_eps+0xb0>)
    9c9c:	4798      	blx	r3
    9c9e:	e006      	b.n	9cae <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9ca0:	7abb      	ldrb	r3, [r7, #10]
    9ca2:	4619      	mov	r1, r3
    9ca4:	6838      	ldr	r0, [r7, #0]
    9ca6:	4b05      	ldr	r3, [pc, #20]	; (9cbc <_usb_d_dev_handle_eps+0xb4>)
    9ca8:	4798      	blx	r3
    9caa:	e000      	b.n	9cae <_usb_d_dev_handle_eps+0xa6>
		return;
    9cac:	bf00      	nop
		}
	}
}
    9cae:	3710      	adds	r7, #16
    9cb0:	46bd      	mov	sp, r7
    9cb2:	bd80      	pop	{r7, pc}
    9cb4:	00009a8d 	.word	0x00009a8d
    9cb8:	00009ae1 	.word	0x00009ae1
    9cbc:	00009b75 	.word	0x00009b75

00009cc0 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9cc0:	b580      	push	{r7, lr}
    9cc2:	b084      	sub	sp, #16
    9cc4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9cc6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9cca:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9ccc:	68bb      	ldr	r3, [r7, #8]
    9cce:	8c1b      	ldrh	r3, [r3, #32]
    9cd0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9cd2:	88fb      	ldrh	r3, [r7, #6]
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	d104      	bne.n	9ce2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9cd8:	4b13      	ldr	r3, [pc, #76]	; (9d28 <_usb_d_dev_handler+0x68>)
    9cda:	4798      	blx	r3
    9cdc:	4603      	mov	r3, r0
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d11e      	bne.n	9d20 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9ce2:	2300      	movs	r3, #0
    9ce4:	73fb      	strb	r3, [r7, #15]
    9ce6:	e017      	b.n	9d18 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9ce8:	7bfa      	ldrb	r2, [r7, #15]
    9cea:	4613      	mov	r3, r2
    9cec:	009b      	lsls	r3, r3, #2
    9cee:	4413      	add	r3, r2
    9cf0:	009b      	lsls	r3, r3, #2
    9cf2:	3310      	adds	r3, #16
    9cf4:	4a0d      	ldr	r2, [pc, #52]	; (9d2c <_usb_d_dev_handler+0x6c>)
    9cf6:	4413      	add	r3, r2
    9cf8:	3304      	adds	r3, #4
    9cfa:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9cfc:	683b      	ldr	r3, [r7, #0]
    9cfe:	7c9b      	ldrb	r3, [r3, #18]
    9d00:	2bff      	cmp	r3, #255	; 0xff
    9d02:	d005      	beq.n	9d10 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9d04:	88fb      	ldrh	r3, [r7, #6]
    9d06:	6839      	ldr	r1, [r7, #0]
    9d08:	4618      	mov	r0, r3
    9d0a:	4b09      	ldr	r3, [pc, #36]	; (9d30 <_usb_d_dev_handler+0x70>)
    9d0c:	4798      	blx	r3
    9d0e:	e000      	b.n	9d12 <_usb_d_dev_handler+0x52>
			continue;
    9d10:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9d12:	7bfb      	ldrb	r3, [r7, #15]
    9d14:	3301      	adds	r3, #1
    9d16:	73fb      	strb	r3, [r7, #15]
    9d18:	7bfb      	ldrb	r3, [r7, #15]
    9d1a:	2b08      	cmp	r3, #8
    9d1c:	d9e4      	bls.n	9ce8 <_usb_d_dev_handler+0x28>
    9d1e:	e000      	b.n	9d22 <_usb_d_dev_handler+0x62>
			return;
    9d20:	bf00      	nop
	}
}
    9d22:	3710      	adds	r7, #16
    9d24:	46bd      	mov	sp, r7
    9d26:	bd80      	pop	{r7, pc}
    9d28:	00009219 	.word	0x00009219
    9d2c:	2000096c 	.word	0x2000096c
    9d30:	00009c09 	.word	0x00009c09

00009d34 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9d34:	b580      	push	{r7, lr}
    9d36:	b082      	sub	sp, #8
    9d38:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9d3a:	2300      	movs	r3, #0
    9d3c:	71fb      	strb	r3, [r7, #7]
    9d3e:	e023      	b.n	9d88 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9d40:	79fa      	ldrb	r2, [r7, #7]
    9d42:	4613      	mov	r3, r2
    9d44:	009b      	lsls	r3, r3, #2
    9d46:	4413      	add	r3, r2
    9d48:	009b      	lsls	r3, r3, #2
    9d4a:	3310      	adds	r3, #16
    9d4c:	4a14      	ldr	r2, [pc, #80]	; (9da0 <_usb_d_dev_reset_epts+0x6c>)
    9d4e:	4413      	add	r3, r2
    9d50:	3304      	adds	r3, #4
    9d52:	2103      	movs	r1, #3
    9d54:	4618      	mov	r0, r3
    9d56:	4b13      	ldr	r3, [pc, #76]	; (9da4 <_usb_d_dev_reset_epts+0x70>)
    9d58:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9d5a:	79fa      	ldrb	r2, [r7, #7]
    9d5c:	4910      	ldr	r1, [pc, #64]	; (9da0 <_usb_d_dev_reset_epts+0x6c>)
    9d5e:	4613      	mov	r3, r2
    9d60:	009b      	lsls	r3, r3, #2
    9d62:	4413      	add	r3, r2
    9d64:	009b      	lsls	r3, r3, #2
    9d66:	440b      	add	r3, r1
    9d68:	3326      	adds	r3, #38	; 0x26
    9d6a:	22ff      	movs	r2, #255	; 0xff
    9d6c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9d6e:	79fa      	ldrb	r2, [r7, #7]
    9d70:	490b      	ldr	r1, [pc, #44]	; (9da0 <_usb_d_dev_reset_epts+0x6c>)
    9d72:	4613      	mov	r3, r2
    9d74:	009b      	lsls	r3, r3, #2
    9d76:	4413      	add	r3, r2
    9d78:	009b      	lsls	r3, r3, #2
    9d7a:	440b      	add	r3, r1
    9d7c:	3327      	adds	r3, #39	; 0x27
    9d7e:	2200      	movs	r2, #0
    9d80:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9d82:	79fb      	ldrb	r3, [r7, #7]
    9d84:	3301      	adds	r3, #1
    9d86:	71fb      	strb	r3, [r7, #7]
    9d88:	79fb      	ldrb	r3, [r7, #7]
    9d8a:	2b08      	cmp	r3, #8
    9d8c:	d9d8      	bls.n	9d40 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9d8e:	22a0      	movs	r2, #160	; 0xa0
    9d90:	2100      	movs	r1, #0
    9d92:	4805      	ldr	r0, [pc, #20]	; (9da8 <_usb_d_dev_reset_epts+0x74>)
    9d94:	4b05      	ldr	r3, [pc, #20]	; (9dac <_usb_d_dev_reset_epts+0x78>)
    9d96:	4798      	blx	r3
}
    9d98:	bf00      	nop
    9d9a:	3708      	adds	r7, #8
    9d9c:	46bd      	mov	sp, r7
    9d9e:	bd80      	pop	{r7, pc}
    9da0:	2000096c 	.word	0x2000096c
    9da4:	0000a5f9 	.word	0x0000a5f9
    9da8:	20000a34 	.word	0x20000a34
    9dac:	0000eacd 	.word	0x0000eacd

00009db0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9db0:	b580      	push	{r7, lr}
    9db2:	b084      	sub	sp, #16
    9db4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9db6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9dba:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9dbc:	2301      	movs	r3, #1
    9dbe:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9dc0:	2304      	movs	r3, #4
    9dc2:	713b      	strb	r3, [r7, #4]
    9dc4:	2300      	movs	r3, #0
    9dc6:	717b      	strb	r3, [r7, #5]
    9dc8:	2300      	movs	r3, #0
    9dca:	71bb      	strb	r3, [r7, #6]
    9dcc:	2300      	movs	r3, #0
    9dce:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9dd0:	2101      	movs	r1, #1
    9dd2:	68f8      	ldr	r0, [r7, #12]
    9dd4:	4b26      	ldr	r3, [pc, #152]	; (9e70 <_usb_d_dev_init+0xc0>)
    9dd6:	4798      	blx	r3
    9dd8:	4603      	mov	r3, r0
    9dda:	f083 0301 	eor.w	r3, r3, #1
    9dde:	b2db      	uxtb	r3, r3
    9de0:	2b00      	cmp	r3, #0
    9de2:	d011      	beq.n	9e08 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9de4:	2102      	movs	r1, #2
    9de6:	68f8      	ldr	r0, [r7, #12]
    9de8:	4b22      	ldr	r3, [pc, #136]	; (9e74 <_usb_d_dev_init+0xc4>)
    9dea:	4798      	blx	r3
    9dec:	4603      	mov	r3, r0
    9dee:	2b00      	cmp	r3, #0
    9df0:	d006      	beq.n	9e00 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9df2:	68f8      	ldr	r0, [r7, #12]
    9df4:	4b20      	ldr	r3, [pc, #128]	; (9e78 <_usb_d_dev_init+0xc8>)
    9df6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9df8:	2102      	movs	r1, #2
    9dfa:	68f8      	ldr	r0, [r7, #12]
    9dfc:	4b1f      	ldr	r3, [pc, #124]	; (9e7c <_usb_d_dev_init+0xcc>)
    9dfe:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9e00:	2101      	movs	r1, #1
    9e02:	68f8      	ldr	r0, [r7, #12]
    9e04:	4b1e      	ldr	r3, [pc, #120]	; (9e80 <_usb_d_dev_init+0xd0>)
    9e06:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9e08:	2101      	movs	r1, #1
    9e0a:	68f8      	ldr	r0, [r7, #12]
    9e0c:	4b1b      	ldr	r3, [pc, #108]	; (9e7c <_usb_d_dev_init+0xcc>)
    9e0e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9e10:	4b1c      	ldr	r3, [pc, #112]	; (9e84 <_usb_d_dev_init+0xd4>)
    9e12:	4a1d      	ldr	r2, [pc, #116]	; (9e88 <_usb_d_dev_init+0xd8>)
    9e14:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9e16:	4b1b      	ldr	r3, [pc, #108]	; (9e84 <_usb_d_dev_init+0xd4>)
    9e18:	4a1b      	ldr	r2, [pc, #108]	; (9e88 <_usb_d_dev_init+0xd8>)
    9e1a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9e1c:	4b19      	ldr	r3, [pc, #100]	; (9e84 <_usb_d_dev_init+0xd4>)
    9e1e:	4a1a      	ldr	r2, [pc, #104]	; (9e88 <_usb_d_dev_init+0xd8>)
    9e20:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9e22:	4b18      	ldr	r3, [pc, #96]	; (9e84 <_usb_d_dev_init+0xd4>)
    9e24:	4a18      	ldr	r2, [pc, #96]	; (9e88 <_usb_d_dev_init+0xd8>)
    9e26:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9e28:	4b16      	ldr	r3, [pc, #88]	; (9e84 <_usb_d_dev_init+0xd4>)
    9e2a:	4a17      	ldr	r2, [pc, #92]	; (9e88 <_usb_d_dev_init+0xd8>)
    9e2c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9e2e:	4b17      	ldr	r3, [pc, #92]	; (9e8c <_usb_d_dev_init+0xdc>)
    9e30:	4798      	blx	r3

	_usb_load_calib();
    9e32:	4b17      	ldr	r3, [pc, #92]	; (9e90 <_usb_d_dev_init+0xe0>)
    9e34:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9e36:	2104      	movs	r1, #4
    9e38:	68f8      	ldr	r0, [r7, #12]
    9e3a:	4b11      	ldr	r3, [pc, #68]	; (9e80 <_usb_d_dev_init+0xd0>)
    9e3c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9e3e:	4b15      	ldr	r3, [pc, #84]	; (9e94 <_usb_d_dev_init+0xe4>)
    9e40:	4619      	mov	r1, r3
    9e42:	68f8      	ldr	r0, [r7, #12]
    9e44:	4b14      	ldr	r3, [pc, #80]	; (9e98 <_usb_d_dev_init+0xe8>)
    9e46:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9e48:	7afb      	ldrb	r3, [r7, #11]
    9e4a:	f107 0210 	add.w	r2, r7, #16
    9e4e:	4413      	add	r3, r2
    9e50:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9e54:	f043 0301 	orr.w	r3, r3, #1
    9e58:	b2db      	uxtb	r3, r3
    9e5a:	b29b      	uxth	r3, r3
    9e5c:	4619      	mov	r1, r3
    9e5e:	68f8      	ldr	r0, [r7, #12]
    9e60:	4b0e      	ldr	r3, [pc, #56]	; (9e9c <_usb_d_dev_init+0xec>)
    9e62:	4798      	blx	r3

	return ERR_NONE;
    9e64:	2300      	movs	r3, #0
}
    9e66:	4618      	mov	r0, r3
    9e68:	3710      	adds	r7, #16
    9e6a:	46bd      	mov	sp, r7
    9e6c:	bd80      	pop	{r7, pc}
    9e6e:	bf00      	nop
    9e70:	00008449 	.word	0x00008449
    9e74:	00008799 	.word	0x00008799
    9e78:	0000876d 	.word	0x0000876d
    9e7c:	0000841f 	.word	0x0000841f
    9e80:	000087c9 	.word	0x000087c9
    9e84:	2000096c 	.word	0x2000096c
    9e88:	00008891 	.word	0x00008891
    9e8c:	00009d35 	.word	0x00009d35
    9e90:	000088a9 	.word	0x000088a9
    9e94:	20000a34 	.word	0x20000a34
    9e98:	00008875 	.word	0x00008875
    9e9c:	00008839 	.word	0x00008839

00009ea0 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9ea0:	b580      	push	{r7, lr}
    9ea2:	b082      	sub	sp, #8
    9ea4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9ea6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9eaa:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9eac:	2103      	movs	r1, #3
    9eae:	6878      	ldr	r0, [r7, #4]
    9eb0:	4b17      	ldr	r3, [pc, #92]	; (9f10 <_usb_d_dev_enable+0x70>)
    9eb2:	4798      	blx	r3
    9eb4:	4603      	mov	r3, r0
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	d002      	beq.n	9ec0 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9eba:	f06f 0310 	mvn.w	r3, #16
    9ebe:	e023      	b.n	9f08 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9ec0:	6878      	ldr	r0, [r7, #4]
    9ec2:	4b14      	ldr	r3, [pc, #80]	; (9f14 <_usb_d_dev_enable+0x74>)
    9ec4:	4798      	blx	r3
    9ec6:	4603      	mov	r3, r0
    9ec8:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9eca:	78fb      	ldrb	r3, [r7, #3]
    9ecc:	f003 0302 	and.w	r3, r3, #2
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	d107      	bne.n	9ee4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9ed4:	78fb      	ldrb	r3, [r7, #3]
    9ed6:	f043 0302 	orr.w	r3, r3, #2
    9eda:	b2db      	uxtb	r3, r3
    9edc:	4619      	mov	r1, r3
    9ede:	6878      	ldr	r0, [r7, #4]
    9ee0:	4b0d      	ldr	r3, [pc, #52]	; (9f18 <_usb_d_dev_enable+0x78>)
    9ee2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9ee4:	2050      	movs	r0, #80	; 0x50
    9ee6:	4b0d      	ldr	r3, [pc, #52]	; (9f1c <_usb_d_dev_enable+0x7c>)
    9ee8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9eea:	2051      	movs	r0, #81	; 0x51
    9eec:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <_usb_d_dev_enable+0x7c>)
    9eee:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9ef0:	2052      	movs	r0, #82	; 0x52
    9ef2:	4b0a      	ldr	r3, [pc, #40]	; (9f1c <_usb_d_dev_enable+0x7c>)
    9ef4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9ef6:	2053      	movs	r0, #83	; 0x53
    9ef8:	4b08      	ldr	r3, [pc, #32]	; (9f1c <_usb_d_dev_enable+0x7c>)
    9efa:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9efc:	f240 218d 	movw	r1, #653	; 0x28d
    9f00:	6878      	ldr	r0, [r7, #4]
    9f02:	4b07      	ldr	r3, [pc, #28]	; (9f20 <_usb_d_dev_enable+0x80>)
    9f04:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9f06:	2300      	movs	r3, #0
}
    9f08:	4618      	mov	r0, r3
    9f0a:	3708      	adds	r7, #8
    9f0c:	46bd      	mov	sp, r7
    9f0e:	bd80      	pop	{r7, pc}
    9f10:	00008743 	.word	0x00008743
    9f14:	000087f1 	.word	0x000087f1
    9f18:	000087c9 	.word	0x000087c9
    9f1c:	00008355 	.word	0x00008355
    9f20:	000086ed 	.word	0x000086ed

00009f24 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9f28:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f2c:	4b01      	ldr	r3, [pc, #4]	; (9f34 <_usb_d_dev_attach+0x10>)
    9f2e:	4798      	blx	r3
}
    9f30:	bf00      	nop
    9f32:	bd80      	pop	{r7, pc}
    9f34:	00008815 	.word	0x00008815

00009f38 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9f38:	b580      	push	{r7, lr}
    9f3a:	b082      	sub	sp, #8
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	4603      	mov	r3, r0
    9f40:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9f42:	79fb      	ldrb	r3, [r7, #7]
    9f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9f48:	b2db      	uxtb	r3, r3
    9f4a:	4619      	mov	r1, r3
    9f4c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f50:	4b02      	ldr	r3, [pc, #8]	; (9f5c <_usb_d_dev_set_address+0x24>)
    9f52:	4798      	blx	r3
}
    9f54:	bf00      	nop
    9f56:	3708      	adds	r7, #8
    9f58:	46bd      	mov	sp, r7
    9f5a:	bd80      	pop	{r7, pc}
    9f5c:	00008857 	.word	0x00008857

00009f60 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9f60:	b590      	push	{r4, r7, lr}
    9f62:	b085      	sub	sp, #20
    9f64:	af00      	add	r7, sp, #0
    9f66:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9f68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f6c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9f6e:	687b      	ldr	r3, [r7, #4]
    9f70:	7c9b      	ldrb	r3, [r3, #18]
    9f72:	f003 030f 	and.w	r3, r3, #15
    9f76:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9f78:	687b      	ldr	r3, [r7, #4]
    9f7a:	68db      	ldr	r3, [r3, #12]
    9f7c:	461a      	mov	r2, r3
    9f7e:	7afb      	ldrb	r3, [r7, #11]
    9f80:	2100      	movs	r1, #0
    9f82:	4618      	mov	r0, r3
    9f84:	4b0f      	ldr	r3, [pc, #60]	; (9fc4 <_usb_d_dev_trans_setup+0x64>)
    9f86:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9f88:	687b      	ldr	r3, [r7, #4]
    9f8a:	8a1b      	ldrh	r3, [r3, #16]
    9f8c:	461a      	mov	r2, r3
    9f8e:	7af8      	ldrb	r0, [r7, #11]
    9f90:	2300      	movs	r3, #0
    9f92:	2100      	movs	r1, #0
    9f94:	4c0c      	ldr	r4, [pc, #48]	; (9fc8 <_usb_d_dev_trans_setup+0x68>)
    9f96:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9f98:	7afb      	ldrb	r3, [r7, #11]
    9f9a:	22b0      	movs	r2, #176	; 0xb0
    9f9c:	4619      	mov	r1, r3
    9f9e:	68f8      	ldr	r0, [r7, #12]
    9fa0:	4b0a      	ldr	r3, [pc, #40]	; (9fcc <_usb_d_dev_trans_setup+0x6c>)
    9fa2:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9fa4:	7afb      	ldrb	r3, [r7, #11]
    9fa6:	2200      	movs	r2, #0
    9fa8:	2100      	movs	r1, #0
    9faa:	4618      	mov	r0, r3
    9fac:	4b08      	ldr	r3, [pc, #32]	; (9fd0 <_usb_d_dev_trans_setup+0x70>)
    9fae:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9fb0:	7afb      	ldrb	r3, [r7, #11]
    9fb2:	2210      	movs	r2, #16
    9fb4:	4619      	mov	r1, r3
    9fb6:	68f8      	ldr	r0, [r7, #12]
    9fb8:	4b06      	ldr	r3, [pc, #24]	; (9fd4 <_usb_d_dev_trans_setup+0x74>)
    9fba:	4798      	blx	r3
}
    9fbc:	bf00      	nop
    9fbe:	3714      	adds	r7, #20
    9fc0:	46bd      	mov	sp, r7
    9fc2:	bd90      	pop	{r4, r7, pc}
    9fc4:	00008cf5 	.word	0x00008cf5
    9fc8:	00008e7d 	.word	0x00008e7d
    9fcc:	00008555 	.word	0x00008555
    9fd0:	00008f4d 	.word	0x00008f4d
    9fd4:	000085a9 	.word	0x000085a9

00009fd8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9fd8:	b580      	push	{r7, lr}
    9fda:	b088      	sub	sp, #32
    9fdc:	af00      	add	r7, sp, #0
    9fde:	4603      	mov	r3, r0
    9fe0:	71fb      	strb	r3, [r7, #7]
    9fe2:	460b      	mov	r3, r1
    9fe4:	71bb      	strb	r3, [r7, #6]
    9fe6:	4613      	mov	r3, r2
    9fe8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9fea:	79fb      	ldrb	r3, [r7, #7]
    9fec:	f003 030f 	and.w	r3, r3, #15
    9ff0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9ff2:	79fb      	ldrb	r3, [r7, #7]
    9ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9ff8:	2b00      	cmp	r3, #0
    9ffa:	bf14      	ite	ne
    9ffc:	2301      	movne	r3, #1
    9ffe:	2300      	moveq	r3, #0
    a000:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a002:	7fba      	ldrb	r2, [r7, #30]
    a004:	7ffb      	ldrb	r3, [r7, #31]
    a006:	4611      	mov	r1, r2
    a008:	4618      	mov	r0, r3
    a00a:	4b3e      	ldr	r3, [pc, #248]	; (a104 <_usb_d_dev_ep_init+0x12c>)
    a00c:	4798      	blx	r3
    a00e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a010:	79bb      	ldrb	r3, [r7, #6]
    a012:	f003 0303 	and.w	r3, r3, #3
    a016:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a018:	7ffa      	ldrb	r2, [r7, #31]
    a01a:	4613      	mov	r3, r2
    a01c:	005b      	lsls	r3, r3, #1
    a01e:	4413      	add	r3, r2
    a020:	009b      	lsls	r3, r3, #2
    a022:	4a39      	ldr	r2, [pc, #228]	; (a108 <_usb_d_dev_ep_init+0x130>)
    a024:	4413      	add	r3, r2
    a026:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a028:	7ffb      	ldrb	r3, [r7, #31]
    a02a:	2b04      	cmp	r3, #4
    a02c:	d902      	bls.n	a034 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a02e:	f06f 0311 	mvn.w	r3, #17
    a032:	e063      	b.n	a0fc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a034:	69bb      	ldr	r3, [r7, #24]
    a036:	7c9b      	ldrb	r3, [r3, #18]
    a038:	2bff      	cmp	r3, #255	; 0xff
    a03a:	d002      	beq.n	a042 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a03c:	f06f 0313 	mvn.w	r3, #19
    a040:	e05c      	b.n	a0fc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a042:	7dfb      	ldrb	r3, [r7, #23]
    a044:	2b00      	cmp	r3, #0
    a046:	d11f      	bne.n	a088 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a048:	7fbb      	ldrb	r3, [r7, #30]
    a04a:	2b00      	cmp	r3, #0
    a04c:	bf14      	ite	ne
    a04e:	2301      	movne	r3, #1
    a050:	2300      	moveq	r3, #0
    a052:	b2db      	uxtb	r3, r3
    a054:	f083 0301 	eor.w	r3, r3, #1
    a058:	b2db      	uxtb	r3, r3
    a05a:	f003 0301 	and.w	r3, r3, #1
    a05e:	b2da      	uxtb	r2, r3
    a060:	7ffb      	ldrb	r3, [r7, #31]
    a062:	4611      	mov	r1, r2
    a064:	4618      	mov	r0, r3
    a066:	4b27      	ldr	r3, [pc, #156]	; (a104 <_usb_d_dev_ep_init+0x12c>)
    a068:	4798      	blx	r3
    a06a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a06c:	68fb      	ldr	r3, [r7, #12]
    a06e:	7c9b      	ldrb	r3, [r3, #18]
    a070:	2bff      	cmp	r3, #255	; 0xff
    a072:	d002      	beq.n	a07a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a074:	f06f 0313 	mvn.w	r3, #19
    a078:	e040      	b.n	a0fc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a07a:	693b      	ldr	r3, [r7, #16]
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	2b00      	cmp	r3, #0
    a080:	d102      	bne.n	a088 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a082:	f06f 0312 	mvn.w	r3, #18
    a086:	e039      	b.n	a0fc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a088:	7fbb      	ldrb	r3, [r7, #30]
    a08a:	2b00      	cmp	r3, #0
    a08c:	d007      	beq.n	a09e <_usb_d_dev_ep_init+0xc6>
    a08e:	693b      	ldr	r3, [r7, #16]
    a090:	685b      	ldr	r3, [r3, #4]
    a092:	2b00      	cmp	r3, #0
    a094:	bf14      	ite	ne
    a096:	2301      	movne	r3, #1
    a098:	2300      	moveq	r3, #0
    a09a:	b2db      	uxtb	r3, r3
    a09c:	e006      	b.n	a0ac <_usb_d_dev_ep_init+0xd4>
    a09e:	693b      	ldr	r3, [r7, #16]
    a0a0:	681b      	ldr	r3, [r3, #0]
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	bf14      	ite	ne
    a0a6:	2301      	movne	r3, #1
    a0a8:	2300      	moveq	r3, #0
    a0aa:	b2db      	uxtb	r3, r3
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	d00f      	beq.n	a0d0 <_usb_d_dev_ep_init+0xf8>
    a0b0:	7fbb      	ldrb	r3, [r7, #30]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d003      	beq.n	a0be <_usb_d_dev_ep_init+0xe6>
    a0b6:	693b      	ldr	r3, [r7, #16]
    a0b8:	895b      	ldrh	r3, [r3, #10]
    a0ba:	461a      	mov	r2, r3
    a0bc:	e002      	b.n	a0c4 <_usb_d_dev_ep_init+0xec>
    a0be:	693b      	ldr	r3, [r7, #16]
    a0c0:	891b      	ldrh	r3, [r3, #8]
    a0c2:	461a      	mov	r2, r3
    a0c4:	88bb      	ldrh	r3, [r7, #4]
    a0c6:	429a      	cmp	r2, r3
    a0c8:	da02      	bge.n	a0d0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a0ca:	f06f 0312 	mvn.w	r3, #18
    a0ce:	e015      	b.n	a0fc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a0d0:	7fbb      	ldrb	r3, [r7, #30]
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	d002      	beq.n	a0dc <_usb_d_dev_ep_init+0x104>
    a0d6:	693b      	ldr	r3, [r7, #16]
    a0d8:	685b      	ldr	r3, [r3, #4]
    a0da:	e001      	b.n	a0e0 <_usb_d_dev_ep_init+0x108>
    a0dc:	693b      	ldr	r3, [r7, #16]
    a0de:	681b      	ldr	r3, [r3, #0]
    a0e0:	69ba      	ldr	r2, [r7, #24]
    a0e2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a0e4:	69bb      	ldr	r3, [r7, #24]
    a0e6:	88ba      	ldrh	r2, [r7, #4]
    a0e8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a0ea:	7dfb      	ldrb	r3, [r7, #23]
    a0ec:	3301      	adds	r3, #1
    a0ee:	b2da      	uxtb	r2, r3
    a0f0:	69bb      	ldr	r3, [r7, #24]
    a0f2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a0f4:	69bb      	ldr	r3, [r7, #24]
    a0f6:	79fa      	ldrb	r2, [r7, #7]
    a0f8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a0fa:	2300      	movs	r3, #0
}
    a0fc:	4618      	mov	r0, r3
    a0fe:	3720      	adds	r7, #32
    a100:	46bd      	mov	sp, r7
    a102:	bd80      	pop	{r7, pc}
    a104:	00009009 	.word	0x00009009
    a108:	0000f0f0 	.word	0x0000f0f0

0000a10c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	b086      	sub	sp, #24
    a110:	af00      	add	r7, sp, #0
    a112:	4603      	mov	r3, r0
    a114:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a116:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a11a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a11c:	79fb      	ldrb	r3, [r7, #7]
    a11e:	f003 030f 	and.w	r3, r3, #15
    a122:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a124:	79fb      	ldrb	r3, [r7, #7]
    a126:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a12a:	2b00      	cmp	r3, #0
    a12c:	bf14      	ite	ne
    a12e:	2301      	movne	r3, #1
    a130:	2300      	moveq	r3, #0
    a132:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a134:	7cba      	ldrb	r2, [r7, #18]
    a136:	7cfb      	ldrb	r3, [r7, #19]
    a138:	4611      	mov	r1, r2
    a13a:	4618      	mov	r0, r3
    a13c:	4b2a      	ldr	r3, [pc, #168]	; (a1e8 <_usb_d_dev_ep_deinit+0xdc>)
    a13e:	4798      	blx	r3
    a140:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a142:	7cfb      	ldrb	r3, [r7, #19]
    a144:	2b04      	cmp	r3, #4
    a146:	d84a      	bhi.n	a1de <_usb_d_dev_ep_deinit+0xd2>
    a148:	68fb      	ldr	r3, [r7, #12]
    a14a:	7c9b      	ldrb	r3, [r3, #18]
    a14c:	2bff      	cmp	r3, #255	; 0xff
    a14e:	d046      	beq.n	a1de <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a150:	7cbb      	ldrb	r3, [r7, #18]
    a152:	2203      	movs	r2, #3
    a154:	4619      	mov	r1, r3
    a156:	68f8      	ldr	r0, [r7, #12]
    a158:	4b24      	ldr	r3, [pc, #144]	; (a1ec <_usb_d_dev_ep_deinit+0xe0>)
    a15a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a15c:	68fb      	ldr	r3, [r7, #12]
    a15e:	7cdb      	ldrb	r3, [r3, #19]
    a160:	f003 0307 	and.w	r3, r3, #7
    a164:	b2db      	uxtb	r3, r3
    a166:	2b01      	cmp	r3, #1
    a168:	d107      	bne.n	a17a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a16a:	79fb      	ldrb	r3, [r7, #7]
    a16c:	697a      	ldr	r2, [r7, #20]
    a16e:	3308      	adds	r3, #8
    a170:	015b      	lsls	r3, r3, #5
    a172:	4413      	add	r3, r2
    a174:	2200      	movs	r2, #0
    a176:	701a      	strb	r2, [r3, #0]
    a178:	e02a      	b.n	a1d0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a17e:	2b00      	cmp	r3, #0
    a180:	da15      	bge.n	a1ae <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a182:	79fb      	ldrb	r3, [r7, #7]
    a184:	f003 030f 	and.w	r3, r3, #15
    a188:	79fa      	ldrb	r2, [r7, #7]
    a18a:	f002 020f 	and.w	r2, r2, #15
    a18e:	6979      	ldr	r1, [r7, #20]
    a190:	3208      	adds	r2, #8
    a192:	0152      	lsls	r2, r2, #5
    a194:	440a      	add	r2, r1
    a196:	7812      	ldrb	r2, [r2, #0]
    a198:	b2d2      	uxtb	r2, r2
    a19a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a19e:	b2d1      	uxtb	r1, r2
    a1a0:	697a      	ldr	r2, [r7, #20]
    a1a2:	3308      	adds	r3, #8
    a1a4:	015b      	lsls	r3, r3, #5
    a1a6:	4413      	add	r3, r2
    a1a8:	460a      	mov	r2, r1
    a1aa:	701a      	strb	r2, [r3, #0]
    a1ac:	e010      	b.n	a1d0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a1ae:	79fb      	ldrb	r3, [r7, #7]
    a1b0:	79fa      	ldrb	r2, [r7, #7]
    a1b2:	6979      	ldr	r1, [r7, #20]
    a1b4:	3208      	adds	r2, #8
    a1b6:	0152      	lsls	r2, r2, #5
    a1b8:	440a      	add	r2, r1
    a1ba:	7812      	ldrb	r2, [r2, #0]
    a1bc:	b2d2      	uxtb	r2, r2
    a1be:	f022 0207 	bic.w	r2, r2, #7
    a1c2:	b2d1      	uxtb	r1, r2
    a1c4:	697a      	ldr	r2, [r7, #20]
    a1c6:	3308      	adds	r3, #8
    a1c8:	015b      	lsls	r3, r3, #5
    a1ca:	4413      	add	r3, r2
    a1cc:	460a      	mov	r2, r1
    a1ce:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a1d0:	68fb      	ldr	r3, [r7, #12]
    a1d2:	2200      	movs	r2, #0
    a1d4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a1d6:	68fb      	ldr	r3, [r7, #12]
    a1d8:	22ff      	movs	r2, #255	; 0xff
    a1da:	749a      	strb	r2, [r3, #18]
    a1dc:	e000      	b.n	a1e0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a1de:	bf00      	nop
}
    a1e0:	3718      	adds	r7, #24
    a1e2:	46bd      	mov	sp, r7
    a1e4:	bd80      	pop	{r7, pc}
    a1e6:	bf00      	nop
    a1e8:	00009009 	.word	0x00009009
    a1ec:	0000a641 	.word	0x0000a641

0000a1f0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a1f0:	b5b0      	push	{r4, r5, r7, lr}
    a1f2:	b088      	sub	sp, #32
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	4603      	mov	r3, r0
    a1f8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a1fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a1fe:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a200:	79fb      	ldrb	r3, [r7, #7]
    a202:	f003 030f 	and.w	r3, r3, #15
    a206:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a208:	79fb      	ldrb	r3, [r7, #7]
    a20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a20e:	2b00      	cmp	r3, #0
    a210:	bf14      	ite	ne
    a212:	2301      	movne	r3, #1
    a214:	2300      	moveq	r3, #0
    a216:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a218:	7eba      	ldrb	r2, [r7, #26]
    a21a:	7efb      	ldrb	r3, [r7, #27]
    a21c:	4611      	mov	r1, r2
    a21e:	4618      	mov	r0, r3
    a220:	4b70      	ldr	r3, [pc, #448]	; (a3e4 <_usb_d_dev_ep_enable+0x1f4>)
    a222:	4798      	blx	r3
    a224:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a226:	7efb      	ldrb	r3, [r7, #27]
    a228:	4619      	mov	r1, r3
    a22a:	69f8      	ldr	r0, [r7, #28]
    a22c:	4b6e      	ldr	r3, [pc, #440]	; (a3e8 <_usb_d_dev_ep_enable+0x1f8>)
    a22e:	4798      	blx	r3
    a230:	4603      	mov	r3, r0
    a232:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a234:	7efb      	ldrb	r3, [r7, #27]
    a236:	2b04      	cmp	r3, #4
    a238:	d803      	bhi.n	a242 <_usb_d_dev_ep_enable+0x52>
    a23a:	697b      	ldr	r3, [r7, #20]
    a23c:	7c9b      	ldrb	r3, [r3, #18]
    a23e:	2bff      	cmp	r3, #255	; 0xff
    a240:	d102      	bne.n	a248 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a242:	f06f 0311 	mvn.w	r3, #17
    a246:	e0c8      	b.n	a3da <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a248:	7efb      	ldrb	r3, [r7, #27]
    a24a:	015b      	lsls	r3, r3, #5
    a24c:	4a67      	ldr	r2, [pc, #412]	; (a3ec <_usb_d_dev_ep_enable+0x1fc>)
    a24e:	4413      	add	r3, r2
    a250:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a252:	697b      	ldr	r3, [r7, #20]
    a254:	7cdb      	ldrb	r3, [r3, #19]
    a256:	f003 0307 	and.w	r3, r3, #7
    a25a:	b2db      	uxtb	r3, r3
    a25c:	2b01      	cmp	r3, #1
    a25e:	d14b      	bne.n	a2f8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a260:	7cfb      	ldrb	r3, [r7, #19]
    a262:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a266:	2b00      	cmp	r3, #0
    a268:	d002      	beq.n	a270 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a26a:	f06f 0313 	mvn.w	r3, #19
    a26e:	e0b4      	b.n	a3da <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a270:	7efb      	ldrb	r3, [r7, #27]
    a272:	2211      	movs	r2, #17
    a274:	4619      	mov	r1, r3
    a276:	69f8      	ldr	r0, [r7, #28]
    a278:	4b5d      	ldr	r3, [pc, #372]	; (a3f0 <_usb_d_dev_ep_enable+0x200>)
    a27a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a27c:	697b      	ldr	r3, [r7, #20]
    a27e:	8a1b      	ldrh	r3, [r3, #16]
    a280:	039b      	lsls	r3, r3, #14
    a282:	4c5c      	ldr	r4, [pc, #368]	; (a3f4 <_usb_d_dev_ep_enable+0x204>)
    a284:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a286:	697b      	ldr	r3, [r7, #20]
    a288:	8a1b      	ldrh	r3, [r3, #16]
    a28a:	4618      	mov	r0, r3
    a28c:	4b5a      	ldr	r3, [pc, #360]	; (a3f8 <_usb_d_dev_ep_enable+0x208>)
    a28e:	4798      	blx	r3
    a290:	4603      	mov	r3, r0
    a292:	071b      	lsls	r3, r3, #28
    a294:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a298:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a29c:	68fb      	ldr	r3, [r7, #12]
    a29e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a2a0:	68fb      	ldr	r3, [r7, #12]
    a2a2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a2a6:	697b      	ldr	r3, [r7, #20]
    a2a8:	8a1b      	ldrh	r3, [r3, #16]
    a2aa:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a2ae:	697b      	ldr	r3, [r7, #20]
    a2b0:	8a1b      	ldrh	r3, [r3, #16]
    a2b2:	4618      	mov	r0, r3
    a2b4:	4b50      	ldr	r3, [pc, #320]	; (a3f8 <_usb_d_dev_ep_enable+0x208>)
    a2b6:	4798      	blx	r3
    a2b8:	4603      	mov	r3, r0
    a2ba:	071b      	lsls	r3, r3, #28
    a2bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a2c0:	432b      	orrs	r3, r5
    a2c2:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a2c4:	7efb      	ldrb	r3, [r7, #27]
    a2c6:	2200      	movs	r2, #0
    a2c8:	2100      	movs	r1, #0
    a2ca:	4618      	mov	r0, r3
    a2cc:	4b4b      	ldr	r3, [pc, #300]	; (a3fc <_usb_d_dev_ep_enable+0x20c>)
    a2ce:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a2d0:	7efb      	ldrb	r3, [r7, #27]
    a2d2:	2200      	movs	r2, #0
    a2d4:	2101      	movs	r1, #1
    a2d6:	4618      	mov	r0, r3
    a2d8:	4b49      	ldr	r3, [pc, #292]	; (a400 <_usb_d_dev_ep_enable+0x210>)
    a2da:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a2dc:	7efb      	ldrb	r3, [r7, #27]
    a2de:	2100      	movs	r1, #0
    a2e0:	4618      	mov	r0, r3
    a2e2:	4b48      	ldr	r3, [pc, #288]	; (a404 <_usb_d_dev_ep_enable+0x214>)
    a2e4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a2e6:	7efb      	ldrb	r3, [r7, #27]
    a2e8:	2101      	movs	r1, #1
    a2ea:	4618      	mov	r0, r3
    a2ec:	4b45      	ldr	r3, [pc, #276]	; (a404 <_usb_d_dev_ep_enable+0x214>)
    a2ee:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a2f0:	6978      	ldr	r0, [r7, #20]
    a2f2:	4b45      	ldr	r3, [pc, #276]	; (a408 <_usb_d_dev_ep_enable+0x218>)
    a2f4:	4798      	blx	r3
    a2f6:	e06f      	b.n	a3d8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a2f8:	7ebb      	ldrb	r3, [r7, #26]
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d038      	beq.n	a370 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a2fe:	7cfb      	ldrb	r3, [r7, #19]
    a300:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a304:	2b00      	cmp	r3, #0
    a306:	d002      	beq.n	a30e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a308:	f06f 0313 	mvn.w	r3, #19
    a30c:	e065      	b.n	a3da <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a30e:	697b      	ldr	r3, [r7, #20]
    a310:	7cdb      	ldrb	r3, [r3, #19]
    a312:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a316:	b2db      	uxtb	r3, r3
    a318:	011b      	lsls	r3, r3, #4
    a31a:	b2db      	uxtb	r3, r3
    a31c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a320:	b2da      	uxtb	r2, r3
    a322:	7cfb      	ldrb	r3, [r7, #19]
    a324:	4313      	orrs	r3, r2
    a326:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a328:	7cfa      	ldrb	r2, [r7, #19]
    a32a:	7efb      	ldrb	r3, [r7, #27]
    a32c:	4619      	mov	r1, r3
    a32e:	69f8      	ldr	r0, [r7, #28]
    a330:	4b2f      	ldr	r3, [pc, #188]	; (a3f0 <_usb_d_dev_ep_enable+0x200>)
    a332:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a334:	68fb      	ldr	r3, [r7, #12]
    a336:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a33a:	697b      	ldr	r3, [r7, #20]
    a33c:	8a1b      	ldrh	r3, [r3, #16]
    a33e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a342:	697b      	ldr	r3, [r7, #20]
    a344:	8a1b      	ldrh	r3, [r3, #16]
    a346:	4618      	mov	r0, r3
    a348:	4b2b      	ldr	r3, [pc, #172]	; (a3f8 <_usb_d_dev_ep_enable+0x208>)
    a34a:	4798      	blx	r3
    a34c:	4603      	mov	r3, r0
    a34e:	071b      	lsls	r3, r3, #28
    a350:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a354:	432b      	orrs	r3, r5
    a356:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a358:	7efb      	ldrb	r3, [r7, #27]
    a35a:	2200      	movs	r2, #0
    a35c:	2101      	movs	r1, #1
    a35e:	4618      	mov	r0, r3
    a360:	4b27      	ldr	r3, [pc, #156]	; (a400 <_usb_d_dev_ep_enable+0x210>)
    a362:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a364:	7efb      	ldrb	r3, [r7, #27]
    a366:	2101      	movs	r1, #1
    a368:	4618      	mov	r0, r3
    a36a:	4b26      	ldr	r3, [pc, #152]	; (a404 <_usb_d_dev_ep_enable+0x214>)
    a36c:	4798      	blx	r3
    a36e:	e033      	b.n	a3d8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a370:	7cfb      	ldrb	r3, [r7, #19]
    a372:	f003 0307 	and.w	r3, r3, #7
    a376:	2b00      	cmp	r3, #0
    a378:	d002      	beq.n	a380 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a37a:	f06f 0313 	mvn.w	r3, #19
    a37e:	e02c      	b.n	a3da <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a380:	697b      	ldr	r3, [r7, #20]
    a382:	7cdb      	ldrb	r3, [r3, #19]
    a384:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a388:	b2db      	uxtb	r3, r3
    a38a:	461a      	mov	r2, r3
    a38c:	7cfb      	ldrb	r3, [r7, #19]
    a38e:	4313      	orrs	r3, r2
    a390:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a392:	7cfa      	ldrb	r2, [r7, #19]
    a394:	7efb      	ldrb	r3, [r7, #27]
    a396:	4619      	mov	r1, r3
    a398:	69f8      	ldr	r0, [r7, #28]
    a39a:	4b15      	ldr	r3, [pc, #84]	; (a3f0 <_usb_d_dev_ep_enable+0x200>)
    a39c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a39e:	697b      	ldr	r3, [r7, #20]
    a3a0:	8a1b      	ldrh	r3, [r3, #16]
    a3a2:	039b      	lsls	r3, r3, #14
    a3a4:	4c13      	ldr	r4, [pc, #76]	; (a3f4 <_usb_d_dev_ep_enable+0x204>)
    a3a6:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a3a8:	697b      	ldr	r3, [r7, #20]
    a3aa:	8a1b      	ldrh	r3, [r3, #16]
    a3ac:	4618      	mov	r0, r3
    a3ae:	4b12      	ldr	r3, [pc, #72]	; (a3f8 <_usb_d_dev_ep_enable+0x208>)
    a3b0:	4798      	blx	r3
    a3b2:	4603      	mov	r3, r0
    a3b4:	071b      	lsls	r3, r3, #28
    a3b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a3ba:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a3be:	68fb      	ldr	r3, [r7, #12]
    a3c0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a3c2:	7efb      	ldrb	r3, [r7, #27]
    a3c4:	2200      	movs	r2, #0
    a3c6:	2100      	movs	r1, #0
    a3c8:	4618      	mov	r0, r3
    a3ca:	4b0c      	ldr	r3, [pc, #48]	; (a3fc <_usb_d_dev_ep_enable+0x20c>)
    a3cc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a3ce:	7efb      	ldrb	r3, [r7, #27]
    a3d0:	2100      	movs	r1, #0
    a3d2:	4618      	mov	r0, r3
    a3d4:	4b0b      	ldr	r3, [pc, #44]	; (a404 <_usb_d_dev_ep_enable+0x214>)
    a3d6:	4798      	blx	r3
	}

	return USB_OK;
    a3d8:	2300      	movs	r3, #0
}
    a3da:	4618      	mov	r0, r3
    a3dc:	3720      	adds	r7, #32
    a3de:	46bd      	mov	sp, r7
    a3e0:	bdb0      	pop	{r4, r5, r7, pc}
    a3e2:	bf00      	nop
    a3e4:	00009009 	.word	0x00009009
    a3e8:	0000868f 	.word	0x0000868f
    a3ec:	20000a34 	.word	0x20000a34
    a3f0:	00008665 	.word	0x00008665
    a3f4:	0fffc000 	.word	0x0fffc000
    a3f8:	00008fa5 	.word	0x00008fa5
    a3fc:	00008f4d 	.word	0x00008f4d
    a400:	00008ef5 	.word	0x00008ef5
    a404:	00008ebd 	.word	0x00008ebd
    a408:	00009f61 	.word	0x00009f61

0000a40c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b084      	sub	sp, #16
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]
    a414:	460b      	mov	r3, r1
    a416:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	7c9b      	ldrb	r3, [r3, #18]
    a41c:	f003 030f 	and.w	r3, r3, #15
    a420:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a422:	78fa      	ldrb	r2, [r7, #3]
    a424:	7bfb      	ldrb	r3, [r7, #15]
    a426:	4611      	mov	r1, r2
    a428:	4618      	mov	r0, r3
    a42a:	4b03      	ldr	r3, [pc, #12]	; (a438 <_usb_d_dev_ep_stall_get+0x2c>)
    a42c:	4798      	blx	r3
    a42e:	4603      	mov	r3, r0
}
    a430:	4618      	mov	r0, r3
    a432:	3710      	adds	r7, #16
    a434:	46bd      	mov	sp, r7
    a436:	bd80      	pop	{r7, pc}
    a438:	00008afd 	.word	0x00008afd

0000a43c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a43c:	b580      	push	{r7, lr}
    a43e:	b084      	sub	sp, #16
    a440:	af00      	add	r7, sp, #0
    a442:	6078      	str	r0, [r7, #4]
    a444:	460b      	mov	r3, r1
    a446:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a448:	687b      	ldr	r3, [r7, #4]
    a44a:	7c9b      	ldrb	r3, [r3, #18]
    a44c:	f003 030f 	and.w	r3, r3, #15
    a450:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a452:	78f9      	ldrb	r1, [r7, #3]
    a454:	7bfb      	ldrb	r3, [r7, #15]
    a456:	2201      	movs	r2, #1
    a458:	4618      	mov	r0, r3
    a45a:	4b0a      	ldr	r3, [pc, #40]	; (a484 <_usb_d_dev_ep_stall_set+0x48>)
    a45c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a45e:	78fb      	ldrb	r3, [r7, #3]
    a460:	2220      	movs	r2, #32
    a462:	409a      	lsls	r2, r3
    a464:	7bfb      	ldrb	r3, [r7, #15]
    a466:	4611      	mov	r1, r2
    a468:	4618      	mov	r0, r3
    a46a:	4b07      	ldr	r3, [pc, #28]	; (a488 <_usb_d_dev_ep_stall_set+0x4c>)
    a46c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a46e:	687a      	ldr	r2, [r7, #4]
    a470:	7cd3      	ldrb	r3, [r2, #19]
    a472:	f043 0308 	orr.w	r3, r3, #8
    a476:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a478:	2300      	movs	r3, #0
}
    a47a:	4618      	mov	r0, r3
    a47c:	3710      	adds	r7, #16
    a47e:	46bd      	mov	sp, r7
    a480:	bd80      	pop	{r7, pc}
    a482:	bf00      	nop
    a484:	00008aa5 	.word	0x00008aa5
    a488:	00008a25 	.word	0x00008a25

0000a48c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a48c:	b580      	push	{r7, lr}
    a48e:	b084      	sub	sp, #16
    a490:	af00      	add	r7, sp, #0
    a492:	6078      	str	r0, [r7, #4]
    a494:	460b      	mov	r3, r1
    a496:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a498:	687b      	ldr	r3, [r7, #4]
    a49a:	7c9b      	ldrb	r3, [r3, #18]
    a49c:	f003 030f 	and.w	r3, r3, #15
    a4a0:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a4a2:	78fa      	ldrb	r2, [r7, #3]
    a4a4:	7bfb      	ldrb	r3, [r7, #15]
    a4a6:	4611      	mov	r1, r2
    a4a8:	4618      	mov	r0, r3
    a4aa:	4b28      	ldr	r3, [pc, #160]	; (a54c <_usb_d_dev_ep_stall_clr+0xc0>)
    a4ac:	4798      	blx	r3
    a4ae:	4603      	mov	r3, r0
    a4b0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a4b2:	7bbb      	ldrb	r3, [r7, #14]
    a4b4:	f083 0301 	eor.w	r3, r3, #1
    a4b8:	b2db      	uxtb	r3, r3
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d001      	beq.n	a4c2 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a4be:	2300      	movs	r3, #0
    a4c0:	e040      	b.n	a544 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a4c2:	78f9      	ldrb	r1, [r7, #3]
    a4c4:	7bfb      	ldrb	r3, [r7, #15]
    a4c6:	2200      	movs	r2, #0
    a4c8:	4618      	mov	r0, r3
    a4ca:	4b21      	ldr	r3, [pc, #132]	; (a550 <_usb_d_dev_ep_stall_clr+0xc4>)
    a4cc:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a4ce:	78fb      	ldrb	r3, [r7, #3]
    a4d0:	2220      	movs	r2, #32
    a4d2:	409a      	lsls	r2, r3
    a4d4:	7bfb      	ldrb	r3, [r7, #15]
    a4d6:	4611      	mov	r1, r2
    a4d8:	4618      	mov	r0, r3
    a4da:	4b1e      	ldr	r3, [pc, #120]	; (a554 <_usb_d_dev_ep_stall_clr+0xc8>)
    a4dc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a4de:	78fa      	ldrb	r2, [r7, #3]
    a4e0:	7bfb      	ldrb	r3, [r7, #15]
    a4e2:	4611      	mov	r1, r2
    a4e4:	4618      	mov	r0, r3
    a4e6:	4b1c      	ldr	r3, [pc, #112]	; (a558 <_usb_d_dev_ep_stall_clr+0xcc>)
    a4e8:	4798      	blx	r3
    a4ea:	4603      	mov	r3, r0
    a4ec:	2b00      	cmp	r3, #0
    a4ee:	d00b      	beq.n	a508 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a4f0:	78fa      	ldrb	r2, [r7, #3]
    a4f2:	7bfb      	ldrb	r3, [r7, #15]
    a4f4:	4611      	mov	r1, r2
    a4f6:	4618      	mov	r0, r3
    a4f8:	4b18      	ldr	r3, [pc, #96]	; (a55c <_usb_d_dev_ep_stall_clr+0xd0>)
    a4fa:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a4fc:	78f9      	ldrb	r1, [r7, #3]
    a4fe:	7bfb      	ldrb	r3, [r7, #15]
    a500:	2200      	movs	r2, #0
    a502:	4618      	mov	r0, r3
    a504:	4b16      	ldr	r3, [pc, #88]	; (a560 <_usb_d_dev_ep_stall_clr+0xd4>)
    a506:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a508:	687b      	ldr	r3, [r7, #4]
    a50a:	7cdb      	ldrb	r3, [r3, #19]
    a50c:	f003 0307 	and.w	r3, r3, #7
    a510:	b2db      	uxtb	r3, r3
    a512:	2b01      	cmp	r3, #1
    a514:	d110      	bne.n	a538 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a516:	7bfb      	ldrb	r3, [r7, #15]
    a518:	4619      	mov	r1, r3
    a51a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a51e:	4b11      	ldr	r3, [pc, #68]	; (a564 <_usb_d_dev_ep_stall_clr+0xd8>)
    a520:	4798      	blx	r3
    a522:	4603      	mov	r3, r0
    a524:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a528:	2b00      	cmp	r3, #0
    a52a:	d10a      	bne.n	a542 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a52c:	687a      	ldr	r2, [r7, #4]
    a52e:	7cd3      	ldrb	r3, [r2, #19]
    a530:	f36f 03c3 	bfc	r3, #3, #1
    a534:	74d3      	strb	r3, [r2, #19]
    a536:	e004      	b.n	a542 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a538:	687a      	ldr	r2, [r7, #4]
    a53a:	7cd3      	ldrb	r3, [r2, #19]
    a53c:	f36f 03c3 	bfc	r3, #3, #1
    a540:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a542:	2300      	movs	r3, #0
}
    a544:	4618      	mov	r0, r3
    a546:	3710      	adds	r7, #16
    a548:	46bd      	mov	sp, r7
    a54a:	bd80      	pop	{r7, pc}
    a54c:	00008afd 	.word	0x00008afd
    a550:	00008aa5 	.word	0x00008aa5
    a554:	00008a4d 	.word	0x00008a4d
    a558:	00008b41 	.word	0x00008b41
    a55c:	00008b85 	.word	0x00008b85
    a560:	00008c71 	.word	0x00008c71
    a564:	0000852d 	.word	0x0000852d

0000a568 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a568:	b580      	push	{r7, lr}
    a56a:	b086      	sub	sp, #24
    a56c:	af00      	add	r7, sp, #0
    a56e:	4603      	mov	r3, r0
    a570:	460a      	mov	r2, r1
    a572:	71fb      	strb	r3, [r7, #7]
    a574:	4613      	mov	r3, r2
    a576:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a578:	79fb      	ldrb	r3, [r7, #7]
    a57a:	f003 030f 	and.w	r3, r3, #15
    a57e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a580:	79fb      	ldrb	r3, [r7, #7]
    a582:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a586:	2b00      	cmp	r3, #0
    a588:	bf14      	ite	ne
    a58a:	2301      	movne	r3, #1
    a58c:	2300      	moveq	r3, #0
    a58e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a590:	7cba      	ldrb	r2, [r7, #18]
    a592:	7cfb      	ldrb	r3, [r7, #19]
    a594:	4611      	mov	r1, r2
    a596:	4618      	mov	r0, r3
    a598:	4b13      	ldr	r3, [pc, #76]	; (a5e8 <_usb_d_dev_ep_stall+0x80>)
    a59a:	4798      	blx	r3
    a59c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a59e:	7cfb      	ldrb	r3, [r7, #19]
    a5a0:	2b04      	cmp	r3, #4
    a5a2:	d902      	bls.n	a5aa <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a5a4:	f06f 0311 	mvn.w	r3, #17
    a5a8:	e01a      	b.n	a5e0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a5aa:	79bb      	ldrb	r3, [r7, #6]
    a5ac:	2b01      	cmp	r3, #1
    a5ae:	d106      	bne.n	a5be <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a5b0:	7cbb      	ldrb	r3, [r7, #18]
    a5b2:	4619      	mov	r1, r3
    a5b4:	68f8      	ldr	r0, [r7, #12]
    a5b6:	4b0d      	ldr	r3, [pc, #52]	; (a5ec <_usb_d_dev_ep_stall+0x84>)
    a5b8:	4798      	blx	r3
    a5ba:	6178      	str	r0, [r7, #20]
    a5bc:	e00f      	b.n	a5de <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a5be:	79bb      	ldrb	r3, [r7, #6]
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d106      	bne.n	a5d2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a5c4:	7cbb      	ldrb	r3, [r7, #18]
    a5c6:	4619      	mov	r1, r3
    a5c8:	68f8      	ldr	r0, [r7, #12]
    a5ca:	4b09      	ldr	r3, [pc, #36]	; (a5f0 <_usb_d_dev_ep_stall+0x88>)
    a5cc:	4798      	blx	r3
    a5ce:	6178      	str	r0, [r7, #20]
    a5d0:	e005      	b.n	a5de <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a5d2:	7cbb      	ldrb	r3, [r7, #18]
    a5d4:	4619      	mov	r1, r3
    a5d6:	68f8      	ldr	r0, [r7, #12]
    a5d8:	4b06      	ldr	r3, [pc, #24]	; (a5f4 <_usb_d_dev_ep_stall+0x8c>)
    a5da:	4798      	blx	r3
    a5dc:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a5de:	697b      	ldr	r3, [r7, #20]
}
    a5e0:	4618      	mov	r0, r3
    a5e2:	3718      	adds	r7, #24
    a5e4:	46bd      	mov	sp, r7
    a5e6:	bd80      	pop	{r7, pc}
    a5e8:	00009009 	.word	0x00009009
    a5ec:	0000a43d 	.word	0x0000a43d
    a5f0:	0000a48d 	.word	0x0000a48d
    a5f4:	0000a40d 	.word	0x0000a40d

0000a5f8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a5f8:	b580      	push	{r7, lr}
    a5fa:	b082      	sub	sp, #8
    a5fc:	af00      	add	r7, sp, #0
    a5fe:	6078      	str	r0, [r7, #4]
    a600:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a602:	687b      	ldr	r3, [r7, #4]
    a604:	7c9b      	ldrb	r3, [r3, #18]
    a606:	2bff      	cmp	r3, #255	; 0xff
    a608:	d014      	beq.n	a634 <_usb_d_dev_trans_done+0x3c>
    a60a:	687b      	ldr	r3, [r7, #4]
    a60c:	7cdb      	ldrb	r3, [r3, #19]
    a60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a612:	b2db      	uxtb	r3, r3
    a614:	2b00      	cmp	r3, #0
    a616:	d00d      	beq.n	a634 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a618:	687a      	ldr	r2, [r7, #4]
    a61a:	7cd3      	ldrb	r3, [r2, #19]
    a61c:	f36f 1386 	bfc	r3, #6, #1
    a620:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a622:	4b06      	ldr	r3, [pc, #24]	; (a63c <_usb_d_dev_trans_done+0x44>)
    a624:	691b      	ldr	r3, [r3, #16]
    a626:	687a      	ldr	r2, [r7, #4]
    a628:	7c90      	ldrb	r0, [r2, #18]
    a62a:	687a      	ldr	r2, [r7, #4]
    a62c:	6892      	ldr	r2, [r2, #8]
    a62e:	6839      	ldr	r1, [r7, #0]
    a630:	4798      	blx	r3
    a632:	e000      	b.n	a636 <_usb_d_dev_trans_done+0x3e>
		return;
    a634:	bf00      	nop
}
    a636:	3708      	adds	r7, #8
    a638:	46bd      	mov	sp, r7
    a63a:	bd80      	pop	{r7, pc}
    a63c:	2000096c 	.word	0x2000096c

0000a640 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a640:	b580      	push	{r7, lr}
    a642:	b086      	sub	sp, #24
    a644:	af00      	add	r7, sp, #0
    a646:	60f8      	str	r0, [r7, #12]
    a648:	460b      	mov	r3, r1
    a64a:	607a      	str	r2, [r7, #4]
    a64c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a64e:	68fb      	ldr	r3, [r7, #12]
    a650:	7c9b      	ldrb	r3, [r3, #18]
    a652:	f003 030f 	and.w	r3, r3, #15
    a656:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a658:	4b1f      	ldr	r3, [pc, #124]	; (a6d8 <_usb_d_dev_trans_stop+0x98>)
    a65a:	881b      	ldrh	r3, [r3, #0]
    a65c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	7c9b      	ldrb	r3, [r3, #18]
    a662:	2bff      	cmp	r3, #255	; 0xff
    a664:	d033      	beq.n	a6ce <_usb_d_dev_trans_stop+0x8e>
    a666:	68fb      	ldr	r3, [r7, #12]
    a668:	7cdb      	ldrb	r3, [r3, #19]
    a66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a66e:	b2db      	uxtb	r3, r3
    a670:	2b00      	cmp	r3, #0
    a672:	d02c      	beq.n	a6ce <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a674:	7afb      	ldrb	r3, [r7, #11]
    a676:	2b00      	cmp	r3, #0
    a678:	d006      	beq.n	a688 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a67a:	7dfb      	ldrb	r3, [r7, #23]
    a67c:	2200      	movs	r2, #0
    a67e:	2101      	movs	r1, #1
    a680:	4618      	mov	r0, r3
    a682:	4b16      	ldr	r3, [pc, #88]	; (a6dc <_usb_d_dev_trans_stop+0x9c>)
    a684:	4798      	blx	r3
    a686:	e005      	b.n	a694 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a688:	7dfb      	ldrb	r3, [r7, #23]
    a68a:	2200      	movs	r2, #0
    a68c:	2100      	movs	r1, #0
    a68e:	4618      	mov	r0, r3
    a690:	4b13      	ldr	r3, [pc, #76]	; (a6e0 <_usb_d_dev_trans_stop+0xa0>)
    a692:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a694:	7afb      	ldrb	r3, [r7, #11]
    a696:	f107 0218 	add.w	r2, r7, #24
    a69a:	4413      	add	r3, r2
    a69c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a6a0:	461a      	mov	r2, r3
    a6a2:	7dfb      	ldrb	r3, [r7, #23]
    a6a4:	4611      	mov	r1, r2
    a6a6:	4618      	mov	r0, r3
    a6a8:	4b0e      	ldr	r3, [pc, #56]	; (a6e4 <_usb_d_dev_trans_stop+0xa4>)
    a6aa:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a6ac:	7afb      	ldrb	r3, [r7, #11]
    a6ae:	f107 0218 	add.w	r2, r7, #24
    a6b2:	4413      	add	r3, r2
    a6b4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a6b8:	461a      	mov	r2, r3
    a6ba:	7dfb      	ldrb	r3, [r7, #23]
    a6bc:	4611      	mov	r1, r2
    a6be:	4618      	mov	r0, r3
    a6c0:	4b09      	ldr	r3, [pc, #36]	; (a6e8 <_usb_d_dev_trans_stop+0xa8>)
    a6c2:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a6c4:	6879      	ldr	r1, [r7, #4]
    a6c6:	68f8      	ldr	r0, [r7, #12]
    a6c8:	4b08      	ldr	r3, [pc, #32]	; (a6ec <_usb_d_dev_trans_stop+0xac>)
    a6ca:	4798      	blx	r3
    a6cc:	e000      	b.n	a6d0 <_usb_d_dev_trans_stop+0x90>
		return;
    a6ce:	bf00      	nop
}
    a6d0:	3718      	adds	r7, #24
    a6d2:	46bd      	mov	sp, r7
    a6d4:	bd80      	pop	{r7, pc}
    a6d6:	bf00      	nop
    a6d8:	0000f130 	.word	0x0000f130
    a6dc:	00008ef5 	.word	0x00008ef5
    a6e0:	00008f4d 	.word	0x00008f4d
    a6e4:	000089fd 	.word	0x000089fd
    a6e8:	00008a4d 	.word	0x00008a4d
    a6ec:	0000a5f9 	.word	0x0000a5f9

0000a6f0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a6f0:	b580      	push	{r7, lr}
    a6f2:	b086      	sub	sp, #24
    a6f4:	af00      	add	r7, sp, #0
    a6f6:	4603      	mov	r3, r0
    a6f8:	6039      	str	r1, [r7, #0]
    a6fa:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a6fc:	79fb      	ldrb	r3, [r7, #7]
    a6fe:	f003 030f 	and.w	r3, r3, #15
    a702:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a704:	7dfb      	ldrb	r3, [r7, #23]
    a706:	015b      	lsls	r3, r3, #5
    a708:	4a1e      	ldr	r2, [pc, #120]	; (a784 <_usb_d_dev_ep_read_req+0x94>)
    a70a:	4413      	add	r3, r2
    a70c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a70e:	693b      	ldr	r3, [r7, #16]
    a710:	681b      	ldr	r3, [r3, #0]
    a712:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a714:	693b      	ldr	r3, [r7, #16]
    a716:	685b      	ldr	r3, [r3, #4]
    a718:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a71c:	b29b      	uxth	r3, r3
    a71e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a720:	7dfb      	ldrb	r3, [r7, #23]
    a722:	2b04      	cmp	r3, #4
    a724:	d802      	bhi.n	a72c <_usb_d_dev_ep_read_req+0x3c>
    a726:	683b      	ldr	r3, [r7, #0]
    a728:	2b00      	cmp	r3, #0
    a72a:	d102      	bne.n	a732 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a72c:	f06f 0311 	mvn.w	r3, #17
    a730:	e023      	b.n	a77a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a732:	7dfb      	ldrb	r3, [r7, #23]
    a734:	4618      	mov	r0, r3
    a736:	4b14      	ldr	r3, [pc, #80]	; (a788 <_usb_d_dev_ep_read_req+0x98>)
    a738:	4798      	blx	r3
    a73a:	4603      	mov	r3, r0
    a73c:	f083 0301 	eor.w	r3, r3, #1
    a740:	b2db      	uxtb	r3, r3
    a742:	2b00      	cmp	r3, #0
    a744:	d002      	beq.n	a74c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a746:	f06f 0312 	mvn.w	r3, #18
    a74a:	e016      	b.n	a77a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a74c:	7dfb      	ldrb	r3, [r7, #23]
    a74e:	4618      	mov	r0, r3
    a750:	4b0e      	ldr	r3, [pc, #56]	; (a78c <_usb_d_dev_ep_read_req+0x9c>)
    a752:	4798      	blx	r3
    a754:	4603      	mov	r3, r0
    a756:	f083 0301 	eor.w	r3, r3, #1
    a75a:	b2db      	uxtb	r3, r3
    a75c:	2b00      	cmp	r3, #0
    a75e:	d001      	beq.n	a764 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a760:	2300      	movs	r3, #0
    a762:	e00a      	b.n	a77a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a764:	68fb      	ldr	r3, [r7, #12]
    a766:	2208      	movs	r2, #8
    a768:	4619      	mov	r1, r3
    a76a:	6838      	ldr	r0, [r7, #0]
    a76c:	4b08      	ldr	r3, [pc, #32]	; (a790 <_usb_d_dev_ep_read_req+0xa0>)
    a76e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a770:	7dfb      	ldrb	r3, [r7, #23]
    a772:	4618      	mov	r0, r3
    a774:	4b07      	ldr	r3, [pc, #28]	; (a794 <_usb_d_dev_ep_read_req+0xa4>)
    a776:	4798      	blx	r3

	return bytes;
    a778:	897b      	ldrh	r3, [r7, #10]
}
    a77a:	4618      	mov	r0, r3
    a77c:	3718      	adds	r7, #24
    a77e:	46bd      	mov	sp, r7
    a780:	bd80      	pop	{r7, pc}
    a782:	bf00      	nop
    a784:	20000a34 	.word	0x20000a34
    a788:	00008a75 	.word	0x00008a75
    a78c:	00008c21 	.word	0x00008c21
    a790:	0000e999 	.word	0x0000e999
    a794:	00008c51 	.word	0x00008c51

0000a798 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a798:	b580      	push	{r7, lr}
    a79a:	b086      	sub	sp, #24
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	7a1b      	ldrb	r3, [r3, #8]
    a7a4:	f003 030f 	and.w	r3, r3, #15
    a7a8:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a7aa:	687b      	ldr	r3, [r7, #4]
    a7ac:	7a1b      	ldrb	r3, [r3, #8]
    a7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	bf14      	ite	ne
    a7b6:	2301      	movne	r3, #1
    a7b8:	2300      	moveq	r3, #0
    a7ba:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a7bc:	7d7a      	ldrb	r2, [r7, #21]
    a7be:	7dbb      	ldrb	r3, [r7, #22]
    a7c0:	4611      	mov	r1, r2
    a7c2:	4618      	mov	r0, r3
    a7c4:	4b5f      	ldr	r3, [pc, #380]	; (a944 <_usb_d_dev_ep_trans+0x1ac>)
    a7c6:	4798      	blx	r3
    a7c8:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a7ca:	693b      	ldr	r3, [r7, #16]
    a7cc:	8a1b      	ldrh	r3, [r3, #16]
    a7ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a7d2:	4293      	cmp	r3, r2
    a7d4:	d004      	beq.n	a7e0 <_usb_d_dev_ep_trans+0x48>
    a7d6:	693b      	ldr	r3, [r7, #16]
    a7d8:	8a1b      	ldrh	r3, [r3, #16]
    a7da:	3b01      	subs	r3, #1
    a7dc:	b29b      	uxth	r3, r3
    a7de:	e001      	b.n	a7e4 <_usb_d_dev_ep_trans+0x4c>
    a7e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a7e4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	685a      	ldr	r2, [r3, #4]
    a7ea:	89fb      	ldrh	r3, [r7, #14]
    a7ec:	4013      	ands	r3, r2
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	bf14      	ite	ne
    a7f2:	2301      	movne	r3, #1
    a7f4:	2300      	moveq	r3, #0
    a7f6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a7f8:	2300      	movs	r3, #0
    a7fa:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a7fc:	7dbb      	ldrb	r3, [r7, #22]
    a7fe:	2b04      	cmp	r3, #4
    a800:	d902      	bls.n	a808 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a802:	f06f 0311 	mvn.w	r3, #17
    a806:	e098      	b.n	a93a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a808:	687b      	ldr	r3, [r7, #4]
    a80a:	681b      	ldr	r3, [r3, #0]
    a80c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a810:	d31a      	bcc.n	a848 <_usb_d_dev_ep_trans+0xb0>
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	681b      	ldr	r3, [r3, #0]
    a816:	461a      	mov	r2, r3
    a818:	687b      	ldr	r3, [r7, #4]
    a81a:	685b      	ldr	r3, [r3, #4]
    a81c:	4413      	add	r3, r2
    a81e:	4a4a      	ldr	r2, [pc, #296]	; (a948 <_usb_d_dev_ep_trans+0x1b0>)
    a820:	4293      	cmp	r3, r2
    a822:	d811      	bhi.n	a848 <_usb_d_dev_ep_trans+0xb0>
    a824:	687b      	ldr	r3, [r7, #4]
    a826:	681b      	ldr	r3, [r3, #0]
    a828:	f003 0303 	and.w	r3, r3, #3
    a82c:	2b00      	cmp	r3, #0
    a82e:	d10b      	bne.n	a848 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a830:	7d7b      	ldrb	r3, [r7, #21]
    a832:	f083 0301 	eor.w	r3, r3, #1
    a836:	b2db      	uxtb	r3, r3
    a838:	2b00      	cmp	r3, #0
    a83a:	d00e      	beq.n	a85a <_usb_d_dev_ep_trans+0xc2>
    a83c:	687b      	ldr	r3, [r7, #4]
    a83e:	685b      	ldr	r3, [r3, #4]
    a840:	693a      	ldr	r2, [r7, #16]
    a842:	8a12      	ldrh	r2, [r2, #16]
    a844:	4293      	cmp	r3, r2
    a846:	d208      	bcs.n	a85a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a848:	693b      	ldr	r3, [r7, #16]
    a84a:	68db      	ldr	r3, [r3, #12]
    a84c:	2b00      	cmp	r3, #0
    a84e:	d102      	bne.n	a856 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a850:	f06f 0312 	mvn.w	r3, #18
    a854:	e071      	b.n	a93a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a856:	2301      	movs	r3, #1
    a858:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a85a:	7d7b      	ldrb	r3, [r7, #21]
    a85c:	f083 0301 	eor.w	r3, r3, #1
    a860:	b2db      	uxtb	r3, r3
    a862:	2b00      	cmp	r3, #0
    a864:	d009      	beq.n	a87a <_usb_d_dev_ep_trans+0xe2>
    a866:	7b7b      	ldrb	r3, [r7, #13]
    a868:	2b00      	cmp	r3, #0
    a86a:	d006      	beq.n	a87a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a86c:	693b      	ldr	r3, [r7, #16]
    a86e:	68db      	ldr	r3, [r3, #12]
    a870:	2b00      	cmp	r3, #0
    a872:	d102      	bne.n	a87a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a874:	f06f 0311 	mvn.w	r3, #17
    a878:	e05f      	b.n	a93a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a87a:	693b      	ldr	r3, [r7, #16]
    a87c:	7cdb      	ldrb	r3, [r3, #19]
    a87e:	f003 0308 	and.w	r3, r3, #8
    a882:	b2db      	uxtb	r3, r3
    a884:	2b00      	cmp	r3, #0
    a886:	d001      	beq.n	a88c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a888:	2302      	movs	r3, #2
    a88a:	e056      	b.n	a93a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a88c:	f107 0308 	add.w	r3, r7, #8
    a890:	4618      	mov	r0, r3
    a892:	4b2e      	ldr	r3, [pc, #184]	; (a94c <_usb_d_dev_ep_trans+0x1b4>)
    a894:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a896:	693b      	ldr	r3, [r7, #16]
    a898:	7cdb      	ldrb	r3, [r3, #19]
    a89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a89e:	b2db      	uxtb	r3, r3
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d006      	beq.n	a8b2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a8a4:	f107 0308 	add.w	r3, r7, #8
    a8a8:	4618      	mov	r0, r3
    a8aa:	4b29      	ldr	r3, [pc, #164]	; (a950 <_usb_d_dev_ep_trans+0x1b8>)
    a8ac:	4798      	blx	r3
		return USB_BUSY;
    a8ae:	2301      	movs	r3, #1
    a8b0:	e043      	b.n	a93a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a8b2:	693a      	ldr	r2, [r7, #16]
    a8b4:	7cd3      	ldrb	r3, [r2, #19]
    a8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a8ba:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a8bc:	f107 0308 	add.w	r3, r7, #8
    a8c0:	4618      	mov	r0, r3
    a8c2:	4b23      	ldr	r3, [pc, #140]	; (a950 <_usb_d_dev_ep_trans+0x1b8>)
    a8c4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a8c6:	687b      	ldr	r3, [r7, #4]
    a8c8:	681a      	ldr	r2, [r3, #0]
    a8ca:	693b      	ldr	r3, [r7, #16]
    a8cc:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a8ce:	687b      	ldr	r3, [r7, #4]
    a8d0:	685a      	ldr	r2, [r3, #4]
    a8d2:	693b      	ldr	r3, [r7, #16]
    a8d4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a8d6:	693b      	ldr	r3, [r7, #16]
    a8d8:	2200      	movs	r2, #0
    a8da:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a8dc:	693a      	ldr	r2, [r7, #16]
    a8de:	7cd3      	ldrb	r3, [r2, #19]
    a8e0:	7d79      	ldrb	r1, [r7, #21]
    a8e2:	f361 13c7 	bfi	r3, r1, #7, #1
    a8e6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a8e8:	693a      	ldr	r2, [r7, #16]
    a8ea:	7cd3      	ldrb	r3, [r2, #19]
    a8ec:	7df9      	ldrb	r1, [r7, #23]
    a8ee:	f361 1345 	bfi	r3, r1, #5, #1
    a8f2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	7a5b      	ldrb	r3, [r3, #9]
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d007      	beq.n	a90c <_usb_d_dev_ep_trans+0x174>
    a8fc:	7b7b      	ldrb	r3, [r7, #13]
    a8fe:	f083 0301 	eor.w	r3, r3, #1
    a902:	b2db      	uxtb	r3, r3
    a904:	2b00      	cmp	r3, #0
    a906:	d001      	beq.n	a90c <_usb_d_dev_ep_trans+0x174>
    a908:	2301      	movs	r3, #1
    a90a:	e000      	b.n	a90e <_usb_d_dev_ep_trans+0x176>
    a90c:	2300      	movs	r3, #0
    a90e:	b2db      	uxtb	r3, r3
    a910:	f003 0301 	and.w	r3, r3, #1
    a914:	b2d9      	uxtb	r1, r3
    a916:	693a      	ldr	r2, [r7, #16]
    a918:	7cd3      	ldrb	r3, [r2, #19]
    a91a:	f361 1304 	bfi	r3, r1, #4, #1
    a91e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a920:	7d7b      	ldrb	r3, [r7, #21]
    a922:	2b00      	cmp	r3, #0
    a924:	d004      	beq.n	a930 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a926:	2100      	movs	r1, #0
    a928:	6938      	ldr	r0, [r7, #16]
    a92a:	4b0a      	ldr	r3, [pc, #40]	; (a954 <_usb_d_dev_ep_trans+0x1bc>)
    a92c:	4798      	blx	r3
    a92e:	e003      	b.n	a938 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a930:	2100      	movs	r1, #0
    a932:	6938      	ldr	r0, [r7, #16]
    a934:	4b08      	ldr	r3, [pc, #32]	; (a958 <_usb_d_dev_ep_trans+0x1c0>)
    a936:	4798      	blx	r3
	}

	return ERR_NONE;
    a938:	2300      	movs	r3, #0
}
    a93a:	4618      	mov	r0, r3
    a93c:	3718      	adds	r7, #24
    a93e:	46bd      	mov	sp, r7
    a940:	bd80      	pop	{r7, pc}
    a942:	bf00      	nop
    a944:	00009009 	.word	0x00009009
    a948:	20041fff 	.word	0x20041fff
    a94c:	0000b165 	.word	0x0000b165
    a950:	0000b18b 	.word	0x0000b18b
    a954:	000092d1 	.word	0x000092d1
    a958:	000094e9 	.word	0x000094e9

0000a95c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a95c:	b580      	push	{r7, lr}
    a95e:	b084      	sub	sp, #16
    a960:	af00      	add	r7, sp, #0
    a962:	4603      	mov	r3, r0
    a964:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a966:	79fb      	ldrb	r3, [r7, #7]
    a968:	f003 030f 	and.w	r3, r3, #15
    a96c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a96e:	79fb      	ldrb	r3, [r7, #7]
    a970:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a974:	2b00      	cmp	r3, #0
    a976:	bf14      	ite	ne
    a978:	2301      	movne	r3, #1
    a97a:	2300      	moveq	r3, #0
    a97c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a97e:	7bba      	ldrb	r2, [r7, #14]
    a980:	7bfb      	ldrb	r3, [r7, #15]
    a982:	4611      	mov	r1, r2
    a984:	4618      	mov	r0, r3
    a986:	4b08      	ldr	r3, [pc, #32]	; (a9a8 <_usb_d_dev_ep_abort+0x4c>)
    a988:	4798      	blx	r3
    a98a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a98c:	7bfb      	ldrb	r3, [r7, #15]
    a98e:	2b04      	cmp	r3, #4
    a990:	d806      	bhi.n	a9a0 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a992:	7bbb      	ldrb	r3, [r7, #14]
    a994:	2202      	movs	r2, #2
    a996:	4619      	mov	r1, r3
    a998:	68b8      	ldr	r0, [r7, #8]
    a99a:	4b04      	ldr	r3, [pc, #16]	; (a9ac <_usb_d_dev_ep_abort+0x50>)
    a99c:	4798      	blx	r3
    a99e:	e000      	b.n	a9a2 <_usb_d_dev_ep_abort+0x46>
		return;
    a9a0:	bf00      	nop
}
    a9a2:	3710      	adds	r7, #16
    a9a4:	46bd      	mov	sp, r7
    a9a6:	bd80      	pop	{r7, pc}
    a9a8:	00009009 	.word	0x00009009
    a9ac:	0000a641 	.word	0x0000a641

0000a9b0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a9b0:	b480      	push	{r7}
    a9b2:	b085      	sub	sp, #20
    a9b4:	af00      	add	r7, sp, #0
    a9b6:	4603      	mov	r3, r0
    a9b8:	6039      	str	r1, [r7, #0]
    a9ba:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a9bc:	683b      	ldr	r3, [r7, #0]
    a9be:	2b00      	cmp	r3, #0
    a9c0:	d001      	beq.n	a9c6 <_usb_d_dev_register_callback+0x16>
    a9c2:	683b      	ldr	r3, [r7, #0]
    a9c4:	e000      	b.n	a9c8 <_usb_d_dev_register_callback+0x18>
    a9c6:	4b0a      	ldr	r3, [pc, #40]	; (a9f0 <_usb_d_dev_register_callback+0x40>)
    a9c8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a9ca:	79fb      	ldrb	r3, [r7, #7]
    a9cc:	2b01      	cmp	r3, #1
    a9ce:	d103      	bne.n	a9d8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a9d0:	4a08      	ldr	r2, [pc, #32]	; (a9f4 <_usb_d_dev_register_callback+0x44>)
    a9d2:	68fb      	ldr	r3, [r7, #12]
    a9d4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a9d6:	e005      	b.n	a9e4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a9d8:	79fb      	ldrb	r3, [r7, #7]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	d102      	bne.n	a9e4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a9de:	4a05      	ldr	r2, [pc, #20]	; (a9f4 <_usb_d_dev_register_callback+0x44>)
    a9e0:	68fb      	ldr	r3, [r7, #12]
    a9e2:	6013      	str	r3, [r2, #0]
}
    a9e4:	bf00      	nop
    a9e6:	3714      	adds	r7, #20
    a9e8:	46bd      	mov	sp, r7
    a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ee:	4770      	bx	lr
    a9f0:	00008891 	.word	0x00008891
    a9f4:	2000096c 	.word	0x2000096c

0000a9f8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a9f8:	b480      	push	{r7}
    a9fa:	b085      	sub	sp, #20
    a9fc:	af00      	add	r7, sp, #0
    a9fe:	4603      	mov	r3, r0
    aa00:	6039      	str	r1, [r7, #0]
    aa02:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aa04:	683b      	ldr	r3, [r7, #0]
    aa06:	2b00      	cmp	r3, #0
    aa08:	d001      	beq.n	aa0e <_usb_d_dev_register_ep_callback+0x16>
    aa0a:	683b      	ldr	r3, [r7, #0]
    aa0c:	e000      	b.n	aa10 <_usb_d_dev_register_ep_callback+0x18>
    aa0e:	4b0e      	ldr	r3, [pc, #56]	; (aa48 <_usb_d_dev_register_ep_callback+0x50>)
    aa10:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    aa12:	79fb      	ldrb	r3, [r7, #7]
    aa14:	2b00      	cmp	r3, #0
    aa16:	d103      	bne.n	aa20 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    aa18:	4a0c      	ldr	r2, [pc, #48]	; (aa4c <_usb_d_dev_register_ep_callback+0x54>)
    aa1a:	68fb      	ldr	r3, [r7, #12]
    aa1c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    aa1e:	e00c      	b.n	aa3a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    aa20:	79fb      	ldrb	r3, [r7, #7]
    aa22:	2b01      	cmp	r3, #1
    aa24:	d103      	bne.n	aa2e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    aa26:	4a09      	ldr	r2, [pc, #36]	; (aa4c <_usb_d_dev_register_ep_callback+0x54>)
    aa28:	68fb      	ldr	r3, [r7, #12]
    aa2a:	60d3      	str	r3, [r2, #12]
}
    aa2c:	e005      	b.n	aa3a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    aa2e:	79fb      	ldrb	r3, [r7, #7]
    aa30:	2b02      	cmp	r3, #2
    aa32:	d102      	bne.n	aa3a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    aa34:	4a05      	ldr	r2, [pc, #20]	; (aa4c <_usb_d_dev_register_ep_callback+0x54>)
    aa36:	68fb      	ldr	r3, [r7, #12]
    aa38:	6113      	str	r3, [r2, #16]
}
    aa3a:	bf00      	nop
    aa3c:	3714      	adds	r7, #20
    aa3e:	46bd      	mov	sp, r7
    aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa44:	4770      	bx	lr
    aa46:	bf00      	nop
    aa48:	00008891 	.word	0x00008891
    aa4c:	2000096c 	.word	0x2000096c

0000aa50 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    aa50:	b580      	push	{r7, lr}
    aa52:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aa54:	4b01      	ldr	r3, [pc, #4]	; (aa5c <USB_0_Handler+0xc>)
    aa56:	4798      	blx	r3
}
    aa58:	bf00      	nop
    aa5a:	bd80      	pop	{r7, pc}
    aa5c:	00009cc1 	.word	0x00009cc1

0000aa60 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    aa60:	b580      	push	{r7, lr}
    aa62:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aa64:	4b01      	ldr	r3, [pc, #4]	; (aa6c <USB_1_Handler+0xc>)
    aa66:	4798      	blx	r3
}
    aa68:	bf00      	nop
    aa6a:	bd80      	pop	{r7, pc}
    aa6c:	00009cc1 	.word	0x00009cc1

0000aa70 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    aa70:	b580      	push	{r7, lr}
    aa72:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aa74:	4b01      	ldr	r3, [pc, #4]	; (aa7c <USB_2_Handler+0xc>)
    aa76:	4798      	blx	r3
}
    aa78:	bf00      	nop
    aa7a:	bd80      	pop	{r7, pc}
    aa7c:	00009cc1 	.word	0x00009cc1

0000aa80 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aa84:	4b01      	ldr	r3, [pc, #4]	; (aa8c <USB_3_Handler+0xc>)
    aa86:	4798      	blx	r3
}
    aa88:	bf00      	nop
    aa8a:	bd80      	pop	{r7, pc}
    aa8c:	00009cc1 	.word	0x00009cc1

0000aa90 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    aa90:	b480      	push	{r7}
    aa92:	b083      	sub	sp, #12
    aa94:	af00      	add	r7, sp, #0
    aa96:	6078      	str	r0, [r7, #4]
    aa98:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    aa9a:	bf00      	nop
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	689a      	ldr	r2, [r3, #8]
    aaa0:	683b      	ldr	r3, [r7, #0]
    aaa2:	4013      	ands	r3, r2
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d1f9      	bne.n	aa9c <hri_wdt_wait_for_sync+0xc>
	};
}
    aaa8:	bf00      	nop
    aaaa:	370c      	adds	r7, #12
    aaac:	46bd      	mov	sp, r7
    aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
    aab2:	4770      	bx	lr

0000aab4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    aab4:	b580      	push	{r7, lr}
    aab6:	b084      	sub	sp, #16
    aab8:	af00      	add	r7, sp, #0
    aaba:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aabc:	210e      	movs	r1, #14
    aabe:	6878      	ldr	r0, [r7, #4]
    aac0:	4b0a      	ldr	r3, [pc, #40]	; (aaec <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    aac2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    aaca:	7bfb      	ldrb	r3, [r7, #15]
    aacc:	085b      	lsrs	r3, r3, #1
    aace:	b2db      	uxtb	r3, r3
    aad0:	f003 0301 	and.w	r3, r3, #1
    aad4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aad6:	7bfb      	ldrb	r3, [r7, #15]
    aad8:	2b00      	cmp	r3, #0
    aada:	bf14      	ite	ne
    aadc:	2301      	movne	r3, #1
    aade:	2300      	moveq	r3, #0
    aae0:	b2db      	uxtb	r3, r3
}
    aae2:	4618      	mov	r0, r3
    aae4:	3710      	adds	r7, #16
    aae6:	46bd      	mov	sp, r7
    aae8:	bd80      	pop	{r7, pc}
    aaea:	bf00      	nop
    aaec:	0000aa91 	.word	0x0000aa91

0000aaf0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    aaf0:	b580      	push	{r7, lr}
    aaf2:	b082      	sub	sp, #8
    aaf4:	af00      	add	r7, sp, #0
    aaf6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    aaf8:	687b      	ldr	r3, [r7, #4]
    aafa:	781b      	ldrb	r3, [r3, #0]
    aafc:	b2db      	uxtb	r3, r3
    aafe:	f023 0304 	bic.w	r3, r3, #4
    ab02:	b2da      	uxtb	r2, r3
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab08:	210e      	movs	r1, #14
    ab0a:	6878      	ldr	r0, [r7, #4]
    ab0c:	4b02      	ldr	r3, [pc, #8]	; (ab18 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ab0e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ab10:	bf00      	nop
    ab12:	3708      	adds	r7, #8
    ab14:	46bd      	mov	sp, r7
    ab16:	bd80      	pop	{r7, pc}
    ab18:	0000aa91 	.word	0x0000aa91

0000ab1c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ab1c:	b580      	push	{r7, lr}
    ab1e:	b084      	sub	sp, #16
    ab20:	af00      	add	r7, sp, #0
    ab22:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab24:	210e      	movs	r1, #14
    ab26:	6878      	ldr	r0, [r7, #4]
    ab28:	4b08      	ldr	r3, [pc, #32]	; (ab4c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ab2a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab2c:	687b      	ldr	r3, [r7, #4]
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ab32:	7bfb      	ldrb	r3, [r7, #15]
    ab34:	09db      	lsrs	r3, r3, #7
    ab36:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ab38:	7bfb      	ldrb	r3, [r7, #15]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	bf14      	ite	ne
    ab3e:	2301      	movne	r3, #1
    ab40:	2300      	moveq	r3, #0
    ab42:	b2db      	uxtb	r3, r3
}
    ab44:	4618      	mov	r0, r3
    ab46:	3710      	adds	r7, #16
    ab48:	46bd      	mov	sp, r7
    ab4a:	bd80      	pop	{r7, pc}
    ab4c:	0000aa91 	.word	0x0000aa91

0000ab50 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ab50:	b480      	push	{r7}
    ab52:	b085      	sub	sp, #20
    ab54:	af00      	add	r7, sp, #0
    ab56:	6078      	str	r0, [r7, #4]
    ab58:	460b      	mov	r3, r1
    ab5a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ab5c:	687b      	ldr	r3, [r7, #4]
    ab5e:	785b      	ldrb	r3, [r3, #1]
    ab60:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ab62:	7bfb      	ldrb	r3, [r7, #15]
    ab64:	f023 030f 	bic.w	r3, r3, #15
    ab68:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ab6a:	78fb      	ldrb	r3, [r7, #3]
    ab6c:	f003 030f 	and.w	r3, r3, #15
    ab70:	b2da      	uxtb	r2, r3
    ab72:	7bfb      	ldrb	r3, [r7, #15]
    ab74:	4313      	orrs	r3, r2
    ab76:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	7bfa      	ldrb	r2, [r7, #15]
    ab7c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ab7e:	bf00      	nop
    ab80:	3714      	adds	r7, #20
    ab82:	46bd      	mov	sp, r7
    ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab88:	4770      	bx	lr
	...

0000ab8c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b082      	sub	sp, #8
    ab90:	af00      	add	r7, sp, #0
    ab92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	2b00      	cmp	r3, #0
    ab98:	d005      	beq.n	aba6 <_wdt_init+0x1a>
    ab9a:	687b      	ldr	r3, [r7, #4]
    ab9c:	681b      	ldr	r3, [r3, #0]
    ab9e:	2b00      	cmp	r3, #0
    aba0:	d001      	beq.n	aba6 <_wdt_init+0x1a>
    aba2:	2301      	movs	r3, #1
    aba4:	e000      	b.n	aba8 <_wdt_init+0x1c>
    aba6:	2300      	movs	r3, #0
    aba8:	f003 0301 	and.w	r3, r3, #1
    abac:	b2db      	uxtb	r3, r3
    abae:	2250      	movs	r2, #80	; 0x50
    abb0:	4913      	ldr	r1, [pc, #76]	; (ac00 <_wdt_init+0x74>)
    abb2:	4618      	mov	r0, r3
    abb4:	4b13      	ldr	r3, [pc, #76]	; (ac04 <_wdt_init+0x78>)
    abb6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    abb8:	687b      	ldr	r3, [r7, #4]
    abba:	681b      	ldr	r3, [r3, #0]
    abbc:	4618      	mov	r0, r3
    abbe:	4b12      	ldr	r3, [pc, #72]	; (ac08 <_wdt_init+0x7c>)
    abc0:	4798      	blx	r3
    abc2:	4603      	mov	r3, r0
    abc4:	2b00      	cmp	r3, #0
    abc6:	d107      	bne.n	abd8 <_wdt_init+0x4c>
    abc8:	687b      	ldr	r3, [r7, #4]
    abca:	681b      	ldr	r3, [r3, #0]
    abcc:	4618      	mov	r0, r3
    abce:	4b0f      	ldr	r3, [pc, #60]	; (ac0c <_wdt_init+0x80>)
    abd0:	4798      	blx	r3
    abd2:	4603      	mov	r3, r0
    abd4:	2b00      	cmp	r3, #0
    abd6:	d002      	beq.n	abde <_wdt_init+0x52>
		return ERR_DENIED;
    abd8:	f06f 0310 	mvn.w	r3, #16
    abdc:	e00b      	b.n	abf6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    abde:	687b      	ldr	r3, [r7, #4]
    abe0:	681b      	ldr	r3, [r3, #0]
    abe2:	4618      	mov	r0, r3
    abe4:	4b0a      	ldr	r3, [pc, #40]	; (ac10 <_wdt_init+0x84>)
    abe6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	210b      	movs	r1, #11
    abee:	4618      	mov	r0, r3
    abf0:	4b08      	ldr	r3, [pc, #32]	; (ac14 <_wdt_init+0x88>)
    abf2:	4798      	blx	r3
	}

	return ERR_NONE;
    abf4:	2300      	movs	r3, #0
}
    abf6:	4618      	mov	r0, r3
    abf8:	3708      	adds	r7, #8
    abfa:	46bd      	mov	sp, r7
    abfc:	bd80      	pop	{r7, pc}
    abfe:	bf00      	nop
    ac00:	0000f134 	.word	0x0000f134
    ac04:	000038fd 	.word	0x000038fd
    ac08:	0000ab1d 	.word	0x0000ab1d
    ac0c:	0000aab5 	.word	0x0000aab5
    ac10:	0000aaf1 	.word	0x0000aaf1
    ac14:	0000ab51 	.word	0x0000ab51

0000ac18 <hri_port_set_DIR_reg>:
{
    ac18:	b480      	push	{r7}
    ac1a:	b085      	sub	sp, #20
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	60f8      	str	r0, [r7, #12]
    ac20:	460b      	mov	r3, r1
    ac22:	607a      	str	r2, [r7, #4]
    ac24:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ac26:	7afb      	ldrb	r3, [r7, #11]
    ac28:	68fa      	ldr	r2, [r7, #12]
    ac2a:	01db      	lsls	r3, r3, #7
    ac2c:	4413      	add	r3, r2
    ac2e:	3308      	adds	r3, #8
    ac30:	687a      	ldr	r2, [r7, #4]
    ac32:	601a      	str	r2, [r3, #0]
}
    ac34:	bf00      	nop
    ac36:	3714      	adds	r7, #20
    ac38:	46bd      	mov	sp, r7
    ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac3e:	4770      	bx	lr

0000ac40 <hri_port_clear_DIR_reg>:
{
    ac40:	b480      	push	{r7}
    ac42:	b085      	sub	sp, #20
    ac44:	af00      	add	r7, sp, #0
    ac46:	60f8      	str	r0, [r7, #12]
    ac48:	460b      	mov	r3, r1
    ac4a:	607a      	str	r2, [r7, #4]
    ac4c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ac4e:	7afb      	ldrb	r3, [r7, #11]
    ac50:	68fa      	ldr	r2, [r7, #12]
    ac52:	01db      	lsls	r3, r3, #7
    ac54:	4413      	add	r3, r2
    ac56:	3304      	adds	r3, #4
    ac58:	687a      	ldr	r2, [r7, #4]
    ac5a:	601a      	str	r2, [r3, #0]
}
    ac5c:	bf00      	nop
    ac5e:	3714      	adds	r7, #20
    ac60:	46bd      	mov	sp, r7
    ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac66:	4770      	bx	lr

0000ac68 <hri_port_set_OUT_reg>:
{
    ac68:	b480      	push	{r7}
    ac6a:	b085      	sub	sp, #20
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	60f8      	str	r0, [r7, #12]
    ac70:	460b      	mov	r3, r1
    ac72:	607a      	str	r2, [r7, #4]
    ac74:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ac76:	7afb      	ldrb	r3, [r7, #11]
    ac78:	68fa      	ldr	r2, [r7, #12]
    ac7a:	01db      	lsls	r3, r3, #7
    ac7c:	4413      	add	r3, r2
    ac7e:	3318      	adds	r3, #24
    ac80:	687a      	ldr	r2, [r7, #4]
    ac82:	601a      	str	r2, [r3, #0]
}
    ac84:	bf00      	nop
    ac86:	3714      	adds	r7, #20
    ac88:	46bd      	mov	sp, r7
    ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac8e:	4770      	bx	lr

0000ac90 <hri_port_clear_OUT_reg>:
{
    ac90:	b480      	push	{r7}
    ac92:	b085      	sub	sp, #20
    ac94:	af00      	add	r7, sp, #0
    ac96:	60f8      	str	r0, [r7, #12]
    ac98:	460b      	mov	r3, r1
    ac9a:	607a      	str	r2, [r7, #4]
    ac9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ac9e:	7afb      	ldrb	r3, [r7, #11]
    aca0:	68fa      	ldr	r2, [r7, #12]
    aca2:	01db      	lsls	r3, r3, #7
    aca4:	4413      	add	r3, r2
    aca6:	3314      	adds	r3, #20
    aca8:	687a      	ldr	r2, [r7, #4]
    acaa:	601a      	str	r2, [r3, #0]
}
    acac:	bf00      	nop
    acae:	3714      	adds	r7, #20
    acb0:	46bd      	mov	sp, r7
    acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    acb6:	4770      	bx	lr

0000acb8 <hri_port_write_PMUX_PMUXE_bf>:
{
    acb8:	b480      	push	{r7}
    acba:	b085      	sub	sp, #20
    acbc:	af00      	add	r7, sp, #0
    acbe:	6078      	str	r0, [r7, #4]
    acc0:	4608      	mov	r0, r1
    acc2:	4611      	mov	r1, r2
    acc4:	461a      	mov	r2, r3
    acc6:	4603      	mov	r3, r0
    acc8:	70fb      	strb	r3, [r7, #3]
    acca:	460b      	mov	r3, r1
    accc:	70bb      	strb	r3, [r7, #2]
    acce:	4613      	mov	r3, r2
    acd0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    acd2:	78fa      	ldrb	r2, [r7, #3]
    acd4:	78bb      	ldrb	r3, [r7, #2]
    acd6:	6879      	ldr	r1, [r7, #4]
    acd8:	01d2      	lsls	r2, r2, #7
    acda:	440a      	add	r2, r1
    acdc:	4413      	add	r3, r2
    acde:	3330      	adds	r3, #48	; 0x30
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ace4:	7bfb      	ldrb	r3, [r7, #15]
    ace6:	f023 030f 	bic.w	r3, r3, #15
    acea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    acec:	787b      	ldrb	r3, [r7, #1]
    acee:	f003 030f 	and.w	r3, r3, #15
    acf2:	b2da      	uxtb	r2, r3
    acf4:	7bfb      	ldrb	r3, [r7, #15]
    acf6:	4313      	orrs	r3, r2
    acf8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    acfa:	78fa      	ldrb	r2, [r7, #3]
    acfc:	78bb      	ldrb	r3, [r7, #2]
    acfe:	6879      	ldr	r1, [r7, #4]
    ad00:	01d2      	lsls	r2, r2, #7
    ad02:	440a      	add	r2, r1
    ad04:	4413      	add	r3, r2
    ad06:	3330      	adds	r3, #48	; 0x30
    ad08:	7bfa      	ldrb	r2, [r7, #15]
    ad0a:	701a      	strb	r2, [r3, #0]
}
    ad0c:	bf00      	nop
    ad0e:	3714      	adds	r7, #20
    ad10:	46bd      	mov	sp, r7
    ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad16:	4770      	bx	lr

0000ad18 <hri_port_write_PMUX_PMUXO_bf>:
{
    ad18:	b480      	push	{r7}
    ad1a:	b085      	sub	sp, #20
    ad1c:	af00      	add	r7, sp, #0
    ad1e:	6078      	str	r0, [r7, #4]
    ad20:	4608      	mov	r0, r1
    ad22:	4611      	mov	r1, r2
    ad24:	461a      	mov	r2, r3
    ad26:	4603      	mov	r3, r0
    ad28:	70fb      	strb	r3, [r7, #3]
    ad2a:	460b      	mov	r3, r1
    ad2c:	70bb      	strb	r3, [r7, #2]
    ad2e:	4613      	mov	r3, r2
    ad30:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ad32:	78fa      	ldrb	r2, [r7, #3]
    ad34:	78bb      	ldrb	r3, [r7, #2]
    ad36:	6879      	ldr	r1, [r7, #4]
    ad38:	01d2      	lsls	r2, r2, #7
    ad3a:	440a      	add	r2, r1
    ad3c:	4413      	add	r3, r2
    ad3e:	3330      	adds	r3, #48	; 0x30
    ad40:	781b      	ldrb	r3, [r3, #0]
    ad42:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ad44:	7bfb      	ldrb	r3, [r7, #15]
    ad46:	f003 030f 	and.w	r3, r3, #15
    ad4a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ad4c:	787b      	ldrb	r3, [r7, #1]
    ad4e:	011b      	lsls	r3, r3, #4
    ad50:	b2da      	uxtb	r2, r3
    ad52:	7bfb      	ldrb	r3, [r7, #15]
    ad54:	4313      	orrs	r3, r2
    ad56:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ad58:	78fa      	ldrb	r2, [r7, #3]
    ad5a:	78bb      	ldrb	r3, [r7, #2]
    ad5c:	6879      	ldr	r1, [r7, #4]
    ad5e:	01d2      	lsls	r2, r2, #7
    ad60:	440a      	add	r2, r1
    ad62:	4413      	add	r3, r2
    ad64:	3330      	adds	r3, #48	; 0x30
    ad66:	7bfa      	ldrb	r2, [r7, #15]
    ad68:	701a      	strb	r2, [r3, #0]
}
    ad6a:	bf00      	nop
    ad6c:	3714      	adds	r7, #20
    ad6e:	46bd      	mov	sp, r7
    ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad74:	4770      	bx	lr

0000ad76 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ad76:	b480      	push	{r7}
    ad78:	b085      	sub	sp, #20
    ad7a:	af00      	add	r7, sp, #0
    ad7c:	6078      	str	r0, [r7, #4]
    ad7e:	4608      	mov	r0, r1
    ad80:	4611      	mov	r1, r2
    ad82:	461a      	mov	r2, r3
    ad84:	4603      	mov	r3, r0
    ad86:	70fb      	strb	r3, [r7, #3]
    ad88:	460b      	mov	r3, r1
    ad8a:	70bb      	strb	r3, [r7, #2]
    ad8c:	4613      	mov	r3, r2
    ad8e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ad90:	78fa      	ldrb	r2, [r7, #3]
    ad92:	78bb      	ldrb	r3, [r7, #2]
    ad94:	6879      	ldr	r1, [r7, #4]
    ad96:	01d2      	lsls	r2, r2, #7
    ad98:	440a      	add	r2, r1
    ad9a:	4413      	add	r3, r2
    ad9c:	3340      	adds	r3, #64	; 0x40
    ad9e:	781b      	ldrb	r3, [r3, #0]
    ada0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ada2:	7bfb      	ldrb	r3, [r7, #15]
    ada4:	f023 0301 	bic.w	r3, r3, #1
    ada8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    adaa:	787a      	ldrb	r2, [r7, #1]
    adac:	7bfb      	ldrb	r3, [r7, #15]
    adae:	4313      	orrs	r3, r2
    adb0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    adb2:	78fa      	ldrb	r2, [r7, #3]
    adb4:	78bb      	ldrb	r3, [r7, #2]
    adb6:	6879      	ldr	r1, [r7, #4]
    adb8:	01d2      	lsls	r2, r2, #7
    adba:	440a      	add	r2, r1
    adbc:	4413      	add	r3, r2
    adbe:	3340      	adds	r3, #64	; 0x40
    adc0:	7bfa      	ldrb	r2, [r7, #15]
    adc2:	701a      	strb	r2, [r3, #0]
}
    adc4:	bf00      	nop
    adc6:	3714      	adds	r7, #20
    adc8:	46bd      	mov	sp, r7
    adca:	f85d 7b04 	ldr.w	r7, [sp], #4
    adce:	4770      	bx	lr

0000add0 <hri_port_write_WRCONFIG_reg>:
{
    add0:	b480      	push	{r7}
    add2:	b085      	sub	sp, #20
    add4:	af00      	add	r7, sp, #0
    add6:	60f8      	str	r0, [r7, #12]
    add8:	460b      	mov	r3, r1
    adda:	607a      	str	r2, [r7, #4]
    addc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    adde:	7afb      	ldrb	r3, [r7, #11]
    ade0:	68fa      	ldr	r2, [r7, #12]
    ade2:	01db      	lsls	r3, r3, #7
    ade4:	4413      	add	r3, r2
    ade6:	3328      	adds	r3, #40	; 0x28
    ade8:	687a      	ldr	r2, [r7, #4]
    adea:	601a      	str	r2, [r3, #0]
}
    adec:	bf00      	nop
    adee:	3714      	adds	r7, #20
    adf0:	46bd      	mov	sp, r7
    adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    adf6:	4770      	bx	lr

0000adf8 <_gpio_set_direction>:
{
    adf8:	b580      	push	{r7, lr}
    adfa:	b082      	sub	sp, #8
    adfc:	af00      	add	r7, sp, #0
    adfe:	4603      	mov	r3, r0
    ae00:	6039      	str	r1, [r7, #0]
    ae02:	71fb      	strb	r3, [r7, #7]
    ae04:	4613      	mov	r3, r2
    ae06:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ae08:	79bb      	ldrb	r3, [r7, #6]
    ae0a:	2b01      	cmp	r3, #1
    ae0c:	d01c      	beq.n	ae48 <_gpio_set_direction+0x50>
    ae0e:	2b02      	cmp	r3, #2
    ae10:	d037      	beq.n	ae82 <_gpio_set_direction+0x8a>
    ae12:	2b00      	cmp	r3, #0
    ae14:	d14e      	bne.n	aeb4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ae16:	79fb      	ldrb	r3, [r7, #7]
    ae18:	683a      	ldr	r2, [r7, #0]
    ae1a:	4619      	mov	r1, r3
    ae1c:	482a      	ldr	r0, [pc, #168]	; (aec8 <_gpio_set_direction+0xd0>)
    ae1e:	4b2b      	ldr	r3, [pc, #172]	; (aecc <_gpio_set_direction+0xd4>)
    ae20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ae22:	683b      	ldr	r3, [r7, #0]
    ae24:	b29b      	uxth	r3, r3
    ae26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ae2a:	79fb      	ldrb	r3, [r7, #7]
    ae2c:	4619      	mov	r1, r3
    ae2e:	4826      	ldr	r0, [pc, #152]	; (aec8 <_gpio_set_direction+0xd0>)
    ae30:	4b27      	ldr	r3, [pc, #156]	; (aed0 <_gpio_set_direction+0xd8>)
    ae32:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ae34:	683b      	ldr	r3, [r7, #0]
    ae36:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ae38:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ae3c:	79fb      	ldrb	r3, [r7, #7]
    ae3e:	4619      	mov	r1, r3
    ae40:	4821      	ldr	r0, [pc, #132]	; (aec8 <_gpio_set_direction+0xd0>)
    ae42:	4b23      	ldr	r3, [pc, #140]	; (aed0 <_gpio_set_direction+0xd8>)
    ae44:	4798      	blx	r3
		break;
    ae46:	e03a      	b.n	aebe <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ae48:	79fb      	ldrb	r3, [r7, #7]
    ae4a:	683a      	ldr	r2, [r7, #0]
    ae4c:	4619      	mov	r1, r3
    ae4e:	481e      	ldr	r0, [pc, #120]	; (aec8 <_gpio_set_direction+0xd0>)
    ae50:	4b1e      	ldr	r3, [pc, #120]	; (aecc <_gpio_set_direction+0xd4>)
    ae52:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ae54:	683b      	ldr	r3, [r7, #0]
    ae56:	b29b      	uxth	r3, r3
    ae58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ae5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ae60:	79f9      	ldrb	r1, [r7, #7]
    ae62:	461a      	mov	r2, r3
    ae64:	4818      	ldr	r0, [pc, #96]	; (aec8 <_gpio_set_direction+0xd0>)
    ae66:	4b1a      	ldr	r3, [pc, #104]	; (aed0 <_gpio_set_direction+0xd8>)
    ae68:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ae6a:	683b      	ldr	r3, [r7, #0]
    ae6c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ae6e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ae72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ae76:	79f9      	ldrb	r1, [r7, #7]
    ae78:	461a      	mov	r2, r3
    ae7a:	4813      	ldr	r0, [pc, #76]	; (aec8 <_gpio_set_direction+0xd0>)
    ae7c:	4b14      	ldr	r3, [pc, #80]	; (aed0 <_gpio_set_direction+0xd8>)
    ae7e:	4798      	blx	r3
		break;
    ae80:	e01d      	b.n	aebe <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ae82:	79fb      	ldrb	r3, [r7, #7]
    ae84:	683a      	ldr	r2, [r7, #0]
    ae86:	4619      	mov	r1, r3
    ae88:	480f      	ldr	r0, [pc, #60]	; (aec8 <_gpio_set_direction+0xd0>)
    ae8a:	4b12      	ldr	r3, [pc, #72]	; (aed4 <_gpio_set_direction+0xdc>)
    ae8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ae8e:	683b      	ldr	r3, [r7, #0]
    ae90:	b29b      	uxth	r3, r3
    ae92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ae96:	79fb      	ldrb	r3, [r7, #7]
    ae98:	4619      	mov	r1, r3
    ae9a:	480b      	ldr	r0, [pc, #44]	; (aec8 <_gpio_set_direction+0xd0>)
    ae9c:	4b0c      	ldr	r3, [pc, #48]	; (aed0 <_gpio_set_direction+0xd8>)
    ae9e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    aea0:	683b      	ldr	r3, [r7, #0]
    aea2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    aea4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    aea8:	79fb      	ldrb	r3, [r7, #7]
    aeaa:	4619      	mov	r1, r3
    aeac:	4806      	ldr	r0, [pc, #24]	; (aec8 <_gpio_set_direction+0xd0>)
    aeae:	4b08      	ldr	r3, [pc, #32]	; (aed0 <_gpio_set_direction+0xd8>)
    aeb0:	4798      	blx	r3
		break;
    aeb2:	e004      	b.n	aebe <_gpio_set_direction+0xc6>
		ASSERT(false);
    aeb4:	2246      	movs	r2, #70	; 0x46
    aeb6:	4908      	ldr	r1, [pc, #32]	; (aed8 <_gpio_set_direction+0xe0>)
    aeb8:	2000      	movs	r0, #0
    aeba:	4b08      	ldr	r3, [pc, #32]	; (aedc <_gpio_set_direction+0xe4>)
    aebc:	4798      	blx	r3
}
    aebe:	bf00      	nop
    aec0:	3708      	adds	r7, #8
    aec2:	46bd      	mov	sp, r7
    aec4:	bd80      	pop	{r7, pc}
    aec6:	bf00      	nop
    aec8:	41008000 	.word	0x41008000
    aecc:	0000ac41 	.word	0x0000ac41
    aed0:	0000add1 	.word	0x0000add1
    aed4:	0000ac19 	.word	0x0000ac19
    aed8:	0000f14c 	.word	0x0000f14c
    aedc:	000038fd 	.word	0x000038fd

0000aee0 <_gpio_set_level>:
{
    aee0:	b580      	push	{r7, lr}
    aee2:	b082      	sub	sp, #8
    aee4:	af00      	add	r7, sp, #0
    aee6:	4603      	mov	r3, r0
    aee8:	6039      	str	r1, [r7, #0]
    aeea:	71fb      	strb	r3, [r7, #7]
    aeec:	4613      	mov	r3, r2
    aeee:	71bb      	strb	r3, [r7, #6]
	if (level) {
    aef0:	79bb      	ldrb	r3, [r7, #6]
    aef2:	2b00      	cmp	r3, #0
    aef4:	d006      	beq.n	af04 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    aef6:	79fb      	ldrb	r3, [r7, #7]
    aef8:	683a      	ldr	r2, [r7, #0]
    aefa:	4619      	mov	r1, r3
    aefc:	4806      	ldr	r0, [pc, #24]	; (af18 <_gpio_set_level+0x38>)
    aefe:	4b07      	ldr	r3, [pc, #28]	; (af1c <_gpio_set_level+0x3c>)
    af00:	4798      	blx	r3
}
    af02:	e005      	b.n	af10 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    af04:	79fb      	ldrb	r3, [r7, #7]
    af06:	683a      	ldr	r2, [r7, #0]
    af08:	4619      	mov	r1, r3
    af0a:	4803      	ldr	r0, [pc, #12]	; (af18 <_gpio_set_level+0x38>)
    af0c:	4b04      	ldr	r3, [pc, #16]	; (af20 <_gpio_set_level+0x40>)
    af0e:	4798      	blx	r3
}
    af10:	bf00      	nop
    af12:	3708      	adds	r7, #8
    af14:	46bd      	mov	sp, r7
    af16:	bd80      	pop	{r7, pc}
    af18:	41008000 	.word	0x41008000
    af1c:	0000ac69 	.word	0x0000ac69
    af20:	0000ac91 	.word	0x0000ac91

0000af24 <_gpio_set_pin_function>:
{
    af24:	b590      	push	{r4, r7, lr}
    af26:	b085      	sub	sp, #20
    af28:	af00      	add	r7, sp, #0
    af2a:	6078      	str	r0, [r7, #4]
    af2c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    af2e:	687b      	ldr	r3, [r7, #4]
    af30:	095b      	lsrs	r3, r3, #5
    af32:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	b2db      	uxtb	r3, r3
    af38:	f003 031f 	and.w	r3, r3, #31
    af3c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    af3e:	683b      	ldr	r3, [r7, #0]
    af40:	f1b3 3fff 	cmp.w	r3, #4294967295
    af44:	d106      	bne.n	af54 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    af46:	7bba      	ldrb	r2, [r7, #14]
    af48:	7bf9      	ldrb	r1, [r7, #15]
    af4a:	2300      	movs	r3, #0
    af4c:	4812      	ldr	r0, [pc, #72]	; (af98 <_gpio_set_pin_function+0x74>)
    af4e:	4c13      	ldr	r4, [pc, #76]	; (af9c <_gpio_set_pin_function+0x78>)
    af50:	47a0      	blx	r4
}
    af52:	e01d      	b.n	af90 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    af54:	7bba      	ldrb	r2, [r7, #14]
    af56:	7bf9      	ldrb	r1, [r7, #15]
    af58:	2301      	movs	r3, #1
    af5a:	480f      	ldr	r0, [pc, #60]	; (af98 <_gpio_set_pin_function+0x74>)
    af5c:	4c0f      	ldr	r4, [pc, #60]	; (af9c <_gpio_set_pin_function+0x78>)
    af5e:	47a0      	blx	r4
		if (pin & 1) {
    af60:	7bbb      	ldrb	r3, [r7, #14]
    af62:	f003 0301 	and.w	r3, r3, #1
    af66:	2b00      	cmp	r3, #0
    af68:	d009      	beq.n	af7e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    af6a:	7bbb      	ldrb	r3, [r7, #14]
    af6c:	085b      	lsrs	r3, r3, #1
    af6e:	b2da      	uxtb	r2, r3
    af70:	683b      	ldr	r3, [r7, #0]
    af72:	b2db      	uxtb	r3, r3
    af74:	7bf9      	ldrb	r1, [r7, #15]
    af76:	4808      	ldr	r0, [pc, #32]	; (af98 <_gpio_set_pin_function+0x74>)
    af78:	4c09      	ldr	r4, [pc, #36]	; (afa0 <_gpio_set_pin_function+0x7c>)
    af7a:	47a0      	blx	r4
}
    af7c:	e008      	b.n	af90 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    af7e:	7bbb      	ldrb	r3, [r7, #14]
    af80:	085b      	lsrs	r3, r3, #1
    af82:	b2da      	uxtb	r2, r3
    af84:	683b      	ldr	r3, [r7, #0]
    af86:	b2db      	uxtb	r3, r3
    af88:	7bf9      	ldrb	r1, [r7, #15]
    af8a:	4803      	ldr	r0, [pc, #12]	; (af98 <_gpio_set_pin_function+0x74>)
    af8c:	4c05      	ldr	r4, [pc, #20]	; (afa4 <_gpio_set_pin_function+0x80>)
    af8e:	47a0      	blx	r4
}
    af90:	bf00      	nop
    af92:	3714      	adds	r7, #20
    af94:	46bd      	mov	sp, r7
    af96:	bd90      	pop	{r4, r7, pc}
    af98:	41008000 	.word	0x41008000
    af9c:	0000ad77 	.word	0x0000ad77
    afa0:	0000ad19 	.word	0x0000ad19
    afa4:	0000acb9 	.word	0x0000acb9

0000afa8 <gpio_set_pin_function>:
{
    afa8:	b580      	push	{r7, lr}
    afaa:	b082      	sub	sp, #8
    afac:	af00      	add	r7, sp, #0
    afae:	6078      	str	r0, [r7, #4]
    afb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    afb2:	6839      	ldr	r1, [r7, #0]
    afb4:	6878      	ldr	r0, [r7, #4]
    afb6:	4b03      	ldr	r3, [pc, #12]	; (afc4 <gpio_set_pin_function+0x1c>)
    afb8:	4798      	blx	r3
}
    afba:	bf00      	nop
    afbc:	3708      	adds	r7, #8
    afbe:	46bd      	mov	sp, r7
    afc0:	bd80      	pop	{r7, pc}
    afc2:	bf00      	nop
    afc4:	0000af25 	.word	0x0000af25

0000afc8 <gpio_set_pin_direction>:
{
    afc8:	b580      	push	{r7, lr}
    afca:	b082      	sub	sp, #8
    afcc:	af00      	add	r7, sp, #0
    afce:	4603      	mov	r3, r0
    afd0:	460a      	mov	r2, r1
    afd2:	71fb      	strb	r3, [r7, #7]
    afd4:	4613      	mov	r3, r2
    afd6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    afd8:	79fb      	ldrb	r3, [r7, #7]
    afda:	095b      	lsrs	r3, r3, #5
    afdc:	b2d8      	uxtb	r0, r3
    afde:	79fb      	ldrb	r3, [r7, #7]
    afe0:	f003 031f 	and.w	r3, r3, #31
    afe4:	2201      	movs	r2, #1
    afe6:	fa02 f303 	lsl.w	r3, r2, r3
    afea:	79ba      	ldrb	r2, [r7, #6]
    afec:	4619      	mov	r1, r3
    afee:	4b03      	ldr	r3, [pc, #12]	; (affc <gpio_set_pin_direction+0x34>)
    aff0:	4798      	blx	r3
}
    aff2:	bf00      	nop
    aff4:	3708      	adds	r7, #8
    aff6:	46bd      	mov	sp, r7
    aff8:	bd80      	pop	{r7, pc}
    affa:	bf00      	nop
    affc:	0000adf9 	.word	0x0000adf9

0000b000 <gpio_set_pin_level>:
{
    b000:	b580      	push	{r7, lr}
    b002:	b082      	sub	sp, #8
    b004:	af00      	add	r7, sp, #0
    b006:	4603      	mov	r3, r0
    b008:	460a      	mov	r2, r1
    b00a:	71fb      	strb	r3, [r7, #7]
    b00c:	4613      	mov	r3, r2
    b00e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b010:	79fb      	ldrb	r3, [r7, #7]
    b012:	095b      	lsrs	r3, r3, #5
    b014:	b2d8      	uxtb	r0, r3
    b016:	79fb      	ldrb	r3, [r7, #7]
    b018:	f003 031f 	and.w	r3, r3, #31
    b01c:	2201      	movs	r2, #1
    b01e:	fa02 f303 	lsl.w	r3, r2, r3
    b022:	79ba      	ldrb	r2, [r7, #6]
    b024:	4619      	mov	r1, r3
    b026:	4b03      	ldr	r3, [pc, #12]	; (b034 <gpio_set_pin_level+0x34>)
    b028:	4798      	blx	r3
}
    b02a:	bf00      	nop
    b02c:	3708      	adds	r7, #8
    b02e:	46bd      	mov	sp, r7
    b030:	bd80      	pop	{r7, pc}
    b032:	bf00      	nop
    b034:	0000aee1 	.word	0x0000aee1

0000b038 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b038:	b580      	push	{r7, lr}
    b03a:	b082      	sub	sp, #8
    b03c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b03e:	2100      	movs	r1, #0
    b040:	2008      	movs	r0, #8
    b042:	4b24      	ldr	r3, [pc, #144]	; (b0d4 <QSPI_N25Q256_exit_xip+0x9c>)
    b044:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b046:	2100      	movs	r1, #0
    b048:	202b      	movs	r0, #43	; 0x2b
    b04a:	4b22      	ldr	r3, [pc, #136]	; (b0d4 <QSPI_N25Q256_exit_xip+0x9c>)
    b04c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b04e:	2100      	movs	r1, #0
    b050:	202a      	movs	r0, #42	; 0x2a
    b052:	4b20      	ldr	r3, [pc, #128]	; (b0d4 <QSPI_N25Q256_exit_xip+0x9c>)
    b054:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b056:	2102      	movs	r1, #2
    b058:	2008      	movs	r0, #8
    b05a:	4b1f      	ldr	r3, [pc, #124]	; (b0d8 <QSPI_N25Q256_exit_xip+0xa0>)
    b05c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b05e:	2102      	movs	r1, #2
    b060:	202b      	movs	r0, #43	; 0x2b
    b062:	4b1d      	ldr	r3, [pc, #116]	; (b0d8 <QSPI_N25Q256_exit_xip+0xa0>)
    b064:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b066:	2102      	movs	r1, #2
    b068:	202a      	movs	r0, #42	; 0x2a
    b06a:	4b1b      	ldr	r3, [pc, #108]	; (b0d8 <QSPI_N25Q256_exit_xip+0xa0>)
    b06c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b06e:	2101      	movs	r1, #1
    b070:	2008      	movs	r0, #8
    b072:	4b1a      	ldr	r3, [pc, #104]	; (b0dc <QSPI_N25Q256_exit_xip+0xa4>)
    b074:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b076:	2100      	movs	r1, #0
    b078:	202b      	movs	r0, #43	; 0x2b
    b07a:	4b18      	ldr	r3, [pc, #96]	; (b0dc <QSPI_N25Q256_exit_xip+0xa4>)
    b07c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b07e:	2100      	movs	r1, #0
    b080:	202a      	movs	r0, #42	; 0x2a
    b082:	4b16      	ldr	r3, [pc, #88]	; (b0dc <QSPI_N25Q256_exit_xip+0xa4>)
    b084:	4798      	blx	r3

	delay_us(1);
    b086:	2001      	movs	r0, #1
    b088:	4b15      	ldr	r3, [pc, #84]	; (b0e0 <QSPI_N25Q256_exit_xip+0xa8>)
    b08a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b08c:	2300      	movs	r3, #0
    b08e:	607b      	str	r3, [r7, #4]
    b090:	e010      	b.n	b0b4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b092:	2101      	movs	r1, #1
    b094:	202a      	movs	r0, #42	; 0x2a
    b096:	4b11      	ldr	r3, [pc, #68]	; (b0dc <QSPI_N25Q256_exit_xip+0xa4>)
    b098:	4798      	blx	r3
		delay_us(1);
    b09a:	2001      	movs	r0, #1
    b09c:	4b10      	ldr	r3, [pc, #64]	; (b0e0 <QSPI_N25Q256_exit_xip+0xa8>)
    b09e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b0a0:	2100      	movs	r1, #0
    b0a2:	202a      	movs	r0, #42	; 0x2a
    b0a4:	4b0d      	ldr	r3, [pc, #52]	; (b0dc <QSPI_N25Q256_exit_xip+0xa4>)
    b0a6:	4798      	blx	r3
		delay_us(1);
    b0a8:	2001      	movs	r0, #1
    b0aa:	4b0d      	ldr	r3, [pc, #52]	; (b0e0 <QSPI_N25Q256_exit_xip+0xa8>)
    b0ac:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b0ae:	687b      	ldr	r3, [r7, #4]
    b0b0:	3301      	adds	r3, #1
    b0b2:	607b      	str	r3, [r7, #4]
    b0b4:	687b      	ldr	r3, [r7, #4]
    b0b6:	2b06      	cmp	r3, #6
    b0b8:	ddeb      	ble.n	b092 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b0ba:	2101      	movs	r1, #1
    b0bc:	202b      	movs	r0, #43	; 0x2b
    b0be:	4b07      	ldr	r3, [pc, #28]	; (b0dc <QSPI_N25Q256_exit_xip+0xa4>)
    b0c0:	4798      	blx	r3
	delay_us(1);
    b0c2:	2001      	movs	r0, #1
    b0c4:	4b06      	ldr	r3, [pc, #24]	; (b0e0 <QSPI_N25Q256_exit_xip+0xa8>)
    b0c6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b0c8:	4b06      	ldr	r3, [pc, #24]	; (b0e4 <QSPI_N25Q256_exit_xip+0xac>)
    b0ca:	4798      	blx	r3
}
    b0cc:	bf00      	nop
    b0ce:	3708      	adds	r7, #8
    b0d0:	46bd      	mov	sp, r7
    b0d2:	bd80      	pop	{r7, pc}
    b0d4:	0000afa9 	.word	0x0000afa9
    b0d8:	0000afc9 	.word	0x0000afc9
    b0dc:	0000b001 	.word	0x0000b001
    b0e0:	00001fbd 	.word	0x00001fbd
    b0e4:	000013d1 	.word	0x000013d1

0000b0e8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b0e8:	b598      	push	{r3, r4, r7, lr}
    b0ea:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b0ec:	4806      	ldr	r0, [pc, #24]	; (b108 <spi_nor_flash_init+0x20>)
    b0ee:	4b07      	ldr	r3, [pc, #28]	; (b10c <spi_nor_flash_init+0x24>)
    b0f0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b0f2:	2300      	movs	r3, #0
    b0f4:	4a06      	ldr	r2, [pc, #24]	; (b110 <spi_nor_flash_init+0x28>)
    b0f6:	4904      	ldr	r1, [pc, #16]	; (b108 <spi_nor_flash_init+0x20>)
    b0f8:	4806      	ldr	r0, [pc, #24]	; (b114 <spi_nor_flash_init+0x2c>)
    b0fa:	4c07      	ldr	r4, [pc, #28]	; (b118 <spi_nor_flash_init+0x30>)
    b0fc:	47a0      	blx	r4
    b0fe:	4602      	mov	r2, r0
    b100:	4b06      	ldr	r3, [pc, #24]	; (b11c <spi_nor_flash_init+0x34>)
    b102:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b104:	bf00      	nop
    b106:	bd98      	pop	{r3, r4, r7, pc}
    b108:	20000e4c 	.word	0x20000e4c
    b10c:	00002425 	.word	0x00002425
    b110:	0000b039 	.word	0x0000b039
    b114:	20000ad4 	.word	0x20000ad4
    b118:	0000b555 	.word	0x0000b555
    b11c:	20001058 	.word	0x20001058

0000b120 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b120:	b580      	push	{r7, lr}
    b122:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b124:	4805      	ldr	r0, [pc, #20]	; (b13c <cdc_device_acm_init+0x1c>)
    b126:	4b06      	ldr	r3, [pc, #24]	; (b140 <cdc_device_acm_init+0x20>)
    b128:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b12a:	4b06      	ldr	r3, [pc, #24]	; (b144 <cdc_device_acm_init+0x24>)
    b12c:	4798      	blx	r3

	usbdc_start(single_desc);
    b12e:	4806      	ldr	r0, [pc, #24]	; (b148 <cdc_device_acm_init+0x28>)
    b130:	4b06      	ldr	r3, [pc, #24]	; (b14c <cdc_device_acm_init+0x2c>)
    b132:	4798      	blx	r3
	usbdc_attach();
    b134:	4b06      	ldr	r3, [pc, #24]	; (b150 <cdc_device_acm_init+0x30>)
    b136:	4798      	blx	r3
}
    b138:	bf00      	nop
    b13a:	bd80      	pop	{r7, pc}
    b13c:	20000b24 	.word	0x20000b24
    b140:	0000cc7d 	.word	0x0000cc7d
    b144:	0000bef5 	.word	0x0000bef5
    b148:	2000012c 	.word	0x2000012c
    b14c:	0000cd19 	.word	0x0000cd19
    b150:	0000cd69 	.word	0x0000cd69

0000b154 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b154:	b580      	push	{r7, lr}
    b156:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b158:	4b01      	ldr	r3, [pc, #4]	; (b160 <usb_init+0xc>)
    b15a:	4798      	blx	r3
}
    b15c:	bf00      	nop
    b15e:	bd80      	pop	{r7, pc}
    b160:	0000b121 	.word	0x0000b121

0000b164 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b164:	b480      	push	{r7}
    b166:	b085      	sub	sp, #20
    b168:	af00      	add	r7, sp, #0
    b16a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b16c:	f3ef 8310 	mrs	r3, PRIMASK
    b170:	60fb      	str	r3, [r7, #12]
  return(result);
    b172:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b178:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b17a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b17e:	bf00      	nop
    b180:	3714      	adds	r7, #20
    b182:	46bd      	mov	sp, r7
    b184:	f85d 7b04 	ldr.w	r7, [sp], #4
    b188:	4770      	bx	lr

0000b18a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b18a:	b480      	push	{r7}
    b18c:	b085      	sub	sp, #20
    b18e:	af00      	add	r7, sp, #0
    b190:	6078      	str	r0, [r7, #4]
    b192:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b196:	687b      	ldr	r3, [r7, #4]
    b198:	681b      	ldr	r3, [r3, #0]
    b19a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b19c:	68fb      	ldr	r3, [r7, #12]
    b19e:	f383 8810 	msr	PRIMASK, r3
}
    b1a2:	bf00      	nop
    b1a4:	3714      	adds	r7, #20
    b1a6:	46bd      	mov	sp, r7
    b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ac:	4770      	bx	lr
	...

0000b1b0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b1b0:	b580      	push	{r7, lr}
    b1b2:	b08c      	sub	sp, #48	; 0x30
    b1b4:	af00      	add	r7, sp, #0
    b1b6:	6078      	str	r0, [r7, #4]
    b1b8:	460b      	mov	r3, r1
    b1ba:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b1bc:	687b      	ldr	r3, [r7, #4]
    b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b1c0:	687b      	ldr	r3, [r7, #4]
    b1c2:	681b      	ldr	r3, [r3, #0]
    b1c4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b1c6:	f107 030c 	add.w	r3, r7, #12
    b1ca:	2200      	movs	r2, #0
    b1cc:	601a      	str	r2, [r3, #0]
    b1ce:	605a      	str	r2, [r3, #4]
    b1d0:	609a      	str	r2, [r3, #8]
    b1d2:	60da      	str	r2, [r3, #12]
    b1d4:	611a      	str	r2, [r3, #16]
    b1d6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1da:	7b1b      	ldrb	r3, [r3, #12]
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d001      	beq.n	b1e4 <n25q256a_xip_confirm+0x34>
    b1e0:	2206      	movs	r2, #6
    b1e2:	e000      	b.n	b1e6 <n25q256a_xip_confirm+0x36>
    b1e4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b1e6:	7b3b      	ldrb	r3, [r7, #12]
    b1e8:	f362 0302 	bfi	r3, r2, #0, #3
    b1ec:	733b      	strb	r3, [r7, #12]
    b1ee:	7b3b      	ldrb	r3, [r7, #12]
    b1f0:	f043 0310 	orr.w	r3, r3, #16
    b1f4:	733b      	strb	r3, [r7, #12]
    b1f6:	7b3b      	ldrb	r3, [r7, #12]
    b1f8:	f043 0320 	orr.w	r3, r3, #32
    b1fc:	733b      	strb	r3, [r7, #12]
    b1fe:	7b3b      	ldrb	r3, [r7, #12]
    b200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b204:	733b      	strb	r3, [r7, #12]
    b206:	7b3b      	ldrb	r3, [r7, #12]
    b208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b20c:	733b      	strb	r3, [r7, #12]
    b20e:	7b7b      	ldrb	r3, [r7, #13]
    b210:	f043 0303 	orr.w	r3, r3, #3
    b214:	737b      	strb	r3, [r7, #13]
    b216:	7b7b      	ldrb	r3, [r7, #13]
    b218:	2201      	movs	r2, #1
    b21a:	f362 1305 	bfi	r3, r2, #4, #2
    b21e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b222:	7b1b      	ldrb	r3, [r3, #12]
    b224:	2b00      	cmp	r3, #0
    b226:	d001      	beq.n	b22c <n25q256a_xip_confirm+0x7c>
    b228:	2208      	movs	r2, #8
    b22a:	e000      	b.n	b22e <n25q256a_xip_confirm+0x7e>
    b22c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b22e:	7bbb      	ldrb	r3, [r7, #14]
    b230:	f362 0304 	bfi	r3, r2, #0, #5
    b234:	73bb      	strb	r3, [r7, #14]
    b236:	230b      	movs	r3, #11
    b238:	743b      	strb	r3, [r7, #16]
    b23a:	78fb      	ldrb	r3, [r7, #3]
    b23c:	2b00      	cmp	r3, #0
    b23e:	d001      	beq.n	b244 <n25q256a_xip_confirm+0x94>
    b240:	2300      	movs	r3, #0
    b242:	e000      	b.n	b246 <n25q256a_xip_confirm+0x96>
    b244:	23ff      	movs	r3, #255	; 0xff
    b246:	747b      	strb	r3, [r7, #17]
    b248:	2301      	movs	r3, #1
    b24a:	61bb      	str	r3, [r7, #24]
    b24c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b250:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b252:	f107 030c 	add.w	r3, r7, #12
    b256:	4619      	mov	r1, r3
    b258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b25a:	4b07      	ldr	r3, [pc, #28]	; (b278 <n25q256a_xip_confirm+0xc8>)
    b25c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b25e:	78fb      	ldrb	r3, [r7, #3]
    b260:	2b00      	cmp	r3, #0
    b262:	d001      	beq.n	b268 <n25q256a_xip_confirm+0xb8>
    b264:	2202      	movs	r2, #2
    b266:	e000      	b.n	b26a <n25q256a_xip_confirm+0xba>
    b268:	2201      	movs	r2, #1
    b26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b26c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b26e:	2300      	movs	r3, #0
}
    b270:	4618      	mov	r0, r3
    b272:	3730      	adds	r7, #48	; 0x30
    b274:	46bd      	mov	sp, r7
    b276:	bd80      	pop	{r7, pc}
    b278:	0000249d 	.word	0x0000249d

0000b27c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b08c      	sub	sp, #48	; 0x30
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
    b284:	460b      	mov	r3, r1
    b286:	70fb      	strb	r3, [r7, #3]
    b288:	4613      	mov	r3, r2
    b28a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b28c:	2300      	movs	r3, #0
    b28e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	681b      	ldr	r3, [r3, #0]
    b298:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b29a:	f107 030c 	add.w	r3, r7, #12
    b29e:	2200      	movs	r2, #0
    b2a0:	601a      	str	r2, [r3, #0]
    b2a2:	605a      	str	r2, [r3, #4]
    b2a4:	609a      	str	r2, [r3, #8]
    b2a6:	60da      	str	r2, [r3, #12]
    b2a8:	611a      	str	r2, [r3, #16]
    b2aa:	615a      	str	r2, [r3, #20]
    b2ac:	78fb      	ldrb	r3, [r7, #3]
    b2ae:	f003 0307 	and.w	r3, r3, #7
    b2b2:	b2da      	uxtb	r2, r3
    b2b4:	7b3b      	ldrb	r3, [r7, #12]
    b2b6:	f362 0302 	bfi	r3, r2, #0, #3
    b2ba:	733b      	strb	r3, [r7, #12]
    b2bc:	7b3b      	ldrb	r3, [r7, #12]
    b2be:	f043 0310 	orr.w	r3, r3, #16
    b2c2:	733b      	strb	r3, [r7, #12]
    b2c4:	7b3b      	ldrb	r3, [r7, #12]
    b2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2ca:	733b      	strb	r3, [r7, #12]
    b2cc:	78bb      	ldrb	r3, [r7, #2]
    b2ce:	743b      	strb	r3, [r7, #16]
    b2d0:	2301      	movs	r3, #1
    b2d2:	61bb      	str	r3, [r7, #24]
    b2d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b2d8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2dc:	7b5b      	ldrb	r3, [r3, #13]
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d003      	beq.n	b2ea <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b2e2:	2100      	movs	r1, #0
    b2e4:	6878      	ldr	r0, [r7, #4]
    b2e6:	4b0a      	ldr	r3, [pc, #40]	; (b310 <n25q256a_read_reg+0x94>)
    b2e8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b2ea:	f107 030c 	add.w	r3, r7, #12
    b2ee:	4619      	mov	r1, r3
    b2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b2f2:	4b08      	ldr	r3, [pc, #32]	; (b314 <n25q256a_read_reg+0x98>)
    b2f4:	4798      	blx	r3
	if (n25q->xip_mode) {
    b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2f8:	7b5b      	ldrb	r3, [r3, #13]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d003      	beq.n	b306 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b2fe:	2101      	movs	r1, #1
    b300:	6878      	ldr	r0, [r7, #4]
    b302:	4b03      	ldr	r3, [pc, #12]	; (b310 <n25q256a_read_reg+0x94>)
    b304:	4798      	blx	r3
	}
	return status;
    b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b308:	4618      	mov	r0, r3
    b30a:	3730      	adds	r7, #48	; 0x30
    b30c:	46bd      	mov	sp, r7
    b30e:	bd80      	pop	{r7, pc}
    b310:	0000b1b1 	.word	0x0000b1b1
    b314:	0000249d 	.word	0x0000249d

0000b318 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b318:	b580      	push	{r7, lr}
    b31a:	b08c      	sub	sp, #48	; 0x30
    b31c:	af00      	add	r7, sp, #0
    b31e:	60f8      	str	r0, [r7, #12]
    b320:	607b      	str	r3, [r7, #4]
    b322:	460b      	mov	r3, r1
    b324:	72fb      	strb	r3, [r7, #11]
    b326:	4613      	mov	r3, r2
    b328:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b32a:	68fb      	ldr	r3, [r7, #12]
    b32c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b32e:	68fb      	ldr	r3, [r7, #12]
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b334:	f107 0310 	add.w	r3, r7, #16
    b338:	2200      	movs	r2, #0
    b33a:	601a      	str	r2, [r3, #0]
    b33c:	605a      	str	r2, [r3, #4]
    b33e:	609a      	str	r2, [r3, #8]
    b340:	60da      	str	r2, [r3, #12]
    b342:	611a      	str	r2, [r3, #16]
    b344:	615a      	str	r2, [r3, #20]
    b346:	7afb      	ldrb	r3, [r7, #11]
    b348:	f003 0307 	and.w	r3, r3, #7
    b34c:	b2da      	uxtb	r2, r3
    b34e:	7c3b      	ldrb	r3, [r7, #16]
    b350:	f362 0302 	bfi	r3, r2, #0, #3
    b354:	743b      	strb	r3, [r7, #16]
    b356:	7c3b      	ldrb	r3, [r7, #16]
    b358:	f043 0310 	orr.w	r3, r3, #16
    b35c:	743b      	strb	r3, [r7, #16]
    b35e:	7c3b      	ldrb	r3, [r7, #16]
    b360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b364:	743b      	strb	r3, [r7, #16]
    b366:	7c7b      	ldrb	r3, [r7, #17]
    b368:	2202      	movs	r2, #2
    b36a:	f362 1305 	bfi	r3, r2, #4, #2
    b36e:	747b      	strb	r3, [r7, #17]
    b370:	7abb      	ldrb	r3, [r7, #10]
    b372:	753b      	strb	r3, [r7, #20]
    b374:	2301      	movs	r3, #1
    b376:	61fb      	str	r3, [r7, #28]
    b378:	1d3b      	adds	r3, r7, #4
    b37a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b37e:	7b5b      	ldrb	r3, [r3, #13]
    b380:	2b00      	cmp	r3, #0
    b382:	d003      	beq.n	b38c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b384:	2100      	movs	r1, #0
    b386:	68f8      	ldr	r0, [r7, #12]
    b388:	4b09      	ldr	r3, [pc, #36]	; (b3b0 <n25q256a_write_reg+0x98>)
    b38a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b38c:	f107 0310 	add.w	r3, r7, #16
    b390:	4619      	mov	r1, r3
    b392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b394:	4b07      	ldr	r3, [pc, #28]	; (b3b4 <n25q256a_write_reg+0x9c>)
    b396:	4798      	blx	r3
	if (n25q->xip_mode) {
    b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b39a:	7b5b      	ldrb	r3, [r3, #13]
    b39c:	2b00      	cmp	r3, #0
    b39e:	d003      	beq.n	b3a8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b3a0:	2101      	movs	r1, #1
    b3a2:	68f8      	ldr	r0, [r7, #12]
    b3a4:	4b02      	ldr	r3, [pc, #8]	; (b3b0 <n25q256a_write_reg+0x98>)
    b3a6:	4798      	blx	r3
	}
}
    b3a8:	bf00      	nop
    b3aa:	3730      	adds	r7, #48	; 0x30
    b3ac:	46bd      	mov	sp, r7
    b3ae:	bd80      	pop	{r7, pc}
    b3b0:	0000b1b1 	.word	0x0000b1b1
    b3b4:	0000249d 	.word	0x0000249d

0000b3b8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b3b8:	b580      	push	{r7, lr}
    b3ba:	b090      	sub	sp, #64	; 0x40
    b3bc:	af00      	add	r7, sp, #0
    b3be:	6078      	str	r0, [r7, #4]
    b3c0:	460b      	mov	r3, r1
    b3c2:	70fb      	strb	r3, [r7, #3]
    b3c4:	4613      	mov	r3, r2
    b3c6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	681b      	ldr	r3, [r3, #0]
    b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b3ce:	78bb      	ldrb	r3, [r7, #2]
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d001      	beq.n	b3d8 <n25q256a_write_enable+0x20>
    b3d4:	2306      	movs	r3, #6
    b3d6:	e000      	b.n	b3da <n25q256a_write_enable+0x22>
    b3d8:	2304      	movs	r3, #4
    b3da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b3de:	f107 0320 	add.w	r3, r7, #32
    b3e2:	2200      	movs	r2, #0
    b3e4:	601a      	str	r2, [r3, #0]
    b3e6:	605a      	str	r2, [r3, #4]
    b3e8:	609a      	str	r2, [r3, #8]
    b3ea:	60da      	str	r2, [r3, #12]
    b3ec:	611a      	str	r2, [r3, #16]
    b3ee:	615a      	str	r2, [r3, #20]
    b3f0:	78fb      	ldrb	r3, [r7, #3]
    b3f2:	f003 0307 	and.w	r3, r3, #7
    b3f6:	b2da      	uxtb	r2, r3
    b3f8:	f897 3020 	ldrb.w	r3, [r7, #32]
    b3fc:	f362 0302 	bfi	r3, r2, #0, #3
    b400:	f887 3020 	strb.w	r3, [r7, #32]
    b404:	f897 3020 	ldrb.w	r3, [r7, #32]
    b408:	f043 0310 	orr.w	r3, r3, #16
    b40c:	f887 3020 	strb.w	r3, [r7, #32]
    b410:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b414:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b418:	f107 0308 	add.w	r3, r7, #8
    b41c:	2200      	movs	r2, #0
    b41e:	601a      	str	r2, [r3, #0]
    b420:	605a      	str	r2, [r3, #4]
    b422:	609a      	str	r2, [r3, #8]
    b424:	60da      	str	r2, [r3, #12]
    b426:	611a      	str	r2, [r3, #16]
    b428:	615a      	str	r2, [r3, #20]
    b42a:	78fb      	ldrb	r3, [r7, #3]
    b42c:	f003 0307 	and.w	r3, r3, #7
    b430:	b2da      	uxtb	r2, r3
    b432:	7a3b      	ldrb	r3, [r7, #8]
    b434:	f362 0302 	bfi	r3, r2, #0, #3
    b438:	723b      	strb	r3, [r7, #8]
    b43a:	7a3b      	ldrb	r3, [r7, #8]
    b43c:	f043 0310 	orr.w	r3, r3, #16
    b440:	723b      	strb	r3, [r7, #8]
    b442:	7a3b      	ldrb	r3, [r7, #8]
    b444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b448:	723b      	strb	r3, [r7, #8]
    b44a:	2305      	movs	r3, #5
    b44c:	733b      	strb	r3, [r7, #12]
    b44e:	2301      	movs	r3, #1
    b450:	617b      	str	r3, [r7, #20]
    b452:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b456:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b458:	f107 0320 	add.w	r3, r7, #32
    b45c:	4619      	mov	r1, r3
    b45e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b460:	4b08      	ldr	r3, [pc, #32]	; (b484 <n25q256a_write_enable+0xcc>)
    b462:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b464:	f107 0308 	add.w	r3, r7, #8
    b468:	4619      	mov	r1, r3
    b46a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b46c:	4b05      	ldr	r3, [pc, #20]	; (b484 <n25q256a_write_enable+0xcc>)
    b46e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b470:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b474:	f003 0302 	and.w	r3, r3, #2
    b478:	2b00      	cmp	r3, #0
    b47a:	d0ed      	beq.n	b458 <n25q256a_write_enable+0xa0>
}
    b47c:	bf00      	nop
    b47e:	3740      	adds	r7, #64	; 0x40
    b480:	46bd      	mov	sp, r7
    b482:	bd80      	pop	{r7, pc}
    b484:	0000249d 	.word	0x0000249d

0000b488 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b488:	b590      	push	{r4, r7, lr}
    b48a:	b087      	sub	sp, #28
    b48c:	af00      	add	r7, sp, #0
    b48e:	6078      	str	r0, [r7, #4]
    b490:	460b      	mov	r3, r1
    b492:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b494:	687b      	ldr	r3, [r7, #4]
    b496:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b498:	68fb      	ldr	r3, [r7, #12]
    b49a:	7b1b      	ldrb	r3, [r3, #12]
    b49c:	2b00      	cmp	r3, #0
    b49e:	d001      	beq.n	b4a4 <n25q256a_switch_mode+0x1c>
    b4a0:	2306      	movs	r3, #6
    b4a2:	e000      	b.n	b4a6 <n25q256a_switch_mode+0x1e>
    b4a4:	2300      	movs	r3, #0
    b4a6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b4a8:	7afb      	ldrb	r3, [r7, #11]
    b4aa:	2265      	movs	r2, #101	; 0x65
    b4ac:	4619      	mov	r1, r3
    b4ae:	6878      	ldr	r0, [r7, #4]
    b4b0:	4b25      	ldr	r3, [pc, #148]	; (b548 <n25q256a_switch_mode+0xc0>)
    b4b2:	4798      	blx	r3
    b4b4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b4b6:	2300      	movs	r3, #0
    b4b8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b4ba:	68fb      	ldr	r3, [r7, #12]
    b4bc:	7b1b      	ldrb	r3, [r3, #12]
    b4be:	78fa      	ldrb	r2, [r7, #3]
    b4c0:	429a      	cmp	r2, r3
    b4c2:	d03d      	beq.n	b540 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b4c4:	78fb      	ldrb	r3, [r7, #3]
    b4c6:	2b00      	cmp	r3, #0
    b4c8:	d00b      	beq.n	b4e2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b4ca:	697b      	ldr	r3, [r7, #20]
    b4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d011      	beq.n	b4f8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b4d4:	697b      	ldr	r3, [r7, #20]
    b4d6:	f003 031f 	and.w	r3, r3, #31
    b4da:	617b      	str	r3, [r7, #20]
			modify = 1;
    b4dc:	2301      	movs	r3, #1
    b4de:	74fb      	strb	r3, [r7, #19]
    b4e0:	e00a      	b.n	b4f8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b4e2:	697b      	ldr	r3, [r7, #20]
    b4e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	d105      	bne.n	b4f8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b4ec:	697b      	ldr	r3, [r7, #20]
    b4ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b4f2:	617b      	str	r3, [r7, #20]
			modify = 1;
    b4f4:	2301      	movs	r3, #1
    b4f6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b4f8:	7cfb      	ldrb	r3, [r7, #19]
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	d021      	beq.n	b542 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b4fe:	68fb      	ldr	r3, [r7, #12]
    b500:	78fa      	ldrb	r2, [r7, #3]
    b502:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b504:	7afb      	ldrb	r3, [r7, #11]
    b506:	2201      	movs	r2, #1
    b508:	4619      	mov	r1, r3
    b50a:	6878      	ldr	r0, [r7, #4]
    b50c:	4b0f      	ldr	r3, [pc, #60]	; (b54c <n25q256a_switch_mode+0xc4>)
    b50e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b510:	7af9      	ldrb	r1, [r7, #11]
    b512:	697b      	ldr	r3, [r7, #20]
    b514:	2261      	movs	r2, #97	; 0x61
    b516:	6878      	ldr	r0, [r7, #4]
    b518:	4c0d      	ldr	r4, [pc, #52]	; (b550 <n25q256a_switch_mode+0xc8>)
    b51a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b51c:	78fb      	ldrb	r3, [r7, #3]
    b51e:	2b00      	cmp	r3, #0
    b520:	d001      	beq.n	b526 <n25q256a_switch_mode+0x9e>
    b522:	2306      	movs	r3, #6
    b524:	e000      	b.n	b528 <n25q256a_switch_mode+0xa0>
    b526:	2300      	movs	r3, #0
    b528:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b52a:	7afb      	ldrb	r3, [r7, #11]
    b52c:	2265      	movs	r2, #101	; 0x65
    b52e:	4619      	mov	r1, r3
    b530:	6878      	ldr	r0, [r7, #4]
    b532:	4b05      	ldr	r3, [pc, #20]	; (b548 <n25q256a_switch_mode+0xc0>)
    b534:	4798      	blx	r3
    b536:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b538:	68fb      	ldr	r3, [r7, #12]
    b53a:	78fa      	ldrb	r2, [r7, #3]
    b53c:	731a      	strb	r2, [r3, #12]
    b53e:	e000      	b.n	b542 <n25q256a_switch_mode+0xba>
		return;
    b540:	bf00      	nop
	}
}
    b542:	371c      	adds	r7, #28
    b544:	46bd      	mov	sp, r7
    b546:	bd90      	pop	{r4, r7, pc}
    b548:	0000b27d 	.word	0x0000b27d
    b54c:	0000b3b9 	.word	0x0000b3b9
    b550:	0000b319 	.word	0x0000b319

0000b554 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b554:	b580      	push	{r7, lr}
    b556:	b086      	sub	sp, #24
    b558:	af00      	add	r7, sp, #0
    b55a:	60f8      	str	r0, [r7, #12]
    b55c:	60b9      	str	r1, [r7, #8]
    b55e:	607a      	str	r2, [r7, #4]
    b560:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b562:	68fb      	ldr	r3, [r7, #12]
    b564:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b566:	4a0c      	ldr	r2, [pc, #48]	; (b598 <n25q256a_construct+0x44>)
    b568:	68b9      	ldr	r1, [r7, #8]
    b56a:	68f8      	ldr	r0, [r7, #12]
    b56c:	4b0b      	ldr	r3, [pc, #44]	; (b59c <n25q256a_construct+0x48>)
    b56e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b570:	697b      	ldr	r3, [r7, #20]
    b572:	2200      	movs	r2, #0
    b574:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b576:	697b      	ldr	r3, [r7, #20]
    b578:	2200      	movs	r2, #0
    b57a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b57c:	697b      	ldr	r3, [r7, #20]
    b57e:	687a      	ldr	r2, [r7, #4]
    b580:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b582:	78fb      	ldrb	r3, [r7, #3]
    b584:	4619      	mov	r1, r3
    b586:	68f8      	ldr	r0, [r7, #12]
    b588:	4b05      	ldr	r3, [pc, #20]	; (b5a0 <n25q256a_construct+0x4c>)
    b58a:	4798      	blx	r3
	return me;
    b58c:	68fb      	ldr	r3, [r7, #12]
}
    b58e:	4618      	mov	r0, r3
    b590:	3718      	adds	r7, #24
    b592:	46bd      	mov	sp, r7
    b594:	bd80      	pop	{r7, pc}
    b596:	bf00      	nop
    b598:	0000f168 	.word	0x0000f168
    b59c:	0000ba31 	.word	0x0000ba31
    b5a0:	0000b489 	.word	0x0000b489

0000b5a4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b08c      	sub	sp, #48	; 0x30
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	60f8      	str	r0, [r7, #12]
    b5ac:	60b9      	str	r1, [r7, #8]
    b5ae:	607a      	str	r2, [r7, #4]
    b5b0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b5b2:	68fb      	ldr	r3, [r7, #12]
    b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b5b6:	68fb      	ldr	r3, [r7, #12]
    b5b8:	681b      	ldr	r3, [r3, #0]
    b5ba:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b5bc:	f107 0310 	add.w	r3, r7, #16
    b5c0:	2200      	movs	r2, #0
    b5c2:	601a      	str	r2, [r3, #0]
    b5c4:	605a      	str	r2, [r3, #4]
    b5c6:	609a      	str	r2, [r3, #8]
    b5c8:	60da      	str	r2, [r3, #12]
    b5ca:	611a      	str	r2, [r3, #16]
    b5cc:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5d0:	7b1b      	ldrb	r3, [r3, #12]
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d001      	beq.n	b5da <n25q256a_read+0x36>
    b5d6:	2206      	movs	r2, #6
    b5d8:	e000      	b.n	b5dc <n25q256a_read+0x38>
    b5da:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b5dc:	7c3b      	ldrb	r3, [r7, #16]
    b5de:	f362 0302 	bfi	r3, r2, #0, #3
    b5e2:	743b      	strb	r3, [r7, #16]
    b5e4:	7c3b      	ldrb	r3, [r7, #16]
    b5e6:	f043 0310 	orr.w	r3, r3, #16
    b5ea:	743b      	strb	r3, [r7, #16]
    b5ec:	7c3b      	ldrb	r3, [r7, #16]
    b5ee:	f043 0320 	orr.w	r3, r3, #32
    b5f2:	743b      	strb	r3, [r7, #16]
    b5f4:	7c3b      	ldrb	r3, [r7, #16]
    b5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5fa:	743b      	strb	r3, [r7, #16]
    b5fc:	7c7b      	ldrb	r3, [r7, #17]
    b5fe:	2201      	movs	r2, #1
    b600:	f362 1305 	bfi	r3, r2, #4, #2
    b604:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b608:	7b1b      	ldrb	r3, [r3, #12]
    b60a:	2b00      	cmp	r3, #0
    b60c:	d001      	beq.n	b612 <n25q256a_read+0x6e>
    b60e:	220a      	movs	r2, #10
    b610:	e000      	b.n	b614 <n25q256a_read+0x70>
    b612:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b614:	7cbb      	ldrb	r3, [r7, #18]
    b616:	f362 0304 	bfi	r3, r2, #0, #5
    b61a:	74bb      	strb	r3, [r7, #18]
    b61c:	230b      	movs	r3, #11
    b61e:	753b      	strb	r3, [r7, #20]
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	61bb      	str	r3, [r7, #24]
    b624:	683b      	ldr	r3, [r7, #0]
    b626:	61fb      	str	r3, [r7, #28]
    b628:	68bb      	ldr	r3, [r7, #8]
    b62a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b62c:	f107 0310 	add.w	r3, r7, #16
    b630:	4619      	mov	r1, r3
    b632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b634:	4b03      	ldr	r3, [pc, #12]	; (b644 <n25q256a_read+0xa0>)
    b636:	4798      	blx	r3
	return ERR_NONE;
    b638:	2300      	movs	r3, #0
}
    b63a:	4618      	mov	r0, r3
    b63c:	3730      	adds	r7, #48	; 0x30
    b63e:	46bd      	mov	sp, r7
    b640:	bd80      	pop	{r7, pc}
    b642:	bf00      	nop
    b644:	0000249d 	.word	0x0000249d

0000b648 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b648:	b580      	push	{r7, lr}
    b64a:	b08c      	sub	sp, #48	; 0x30
    b64c:	af00      	add	r7, sp, #0
    b64e:	60f8      	str	r0, [r7, #12]
    b650:	60b9      	str	r1, [r7, #8]
    b652:	607a      	str	r2, [r7, #4]
    b654:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b656:	68fb      	ldr	r3, [r7, #12]
    b658:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b65a:	68fb      	ldr	r3, [r7, #12]
    b65c:	681b      	ldr	r3, [r3, #0]
    b65e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b660:	f107 0310 	add.w	r3, r7, #16
    b664:	2200      	movs	r2, #0
    b666:	601a      	str	r2, [r3, #0]
    b668:	605a      	str	r2, [r3, #4]
    b66a:	609a      	str	r2, [r3, #8]
    b66c:	60da      	str	r2, [r3, #12]
    b66e:	611a      	str	r2, [r3, #16]
    b670:	615a      	str	r2, [r3, #20]
    b672:	7c3b      	ldrb	r3, [r7, #16]
    b674:	f043 0310 	orr.w	r3, r3, #16
    b678:	743b      	strb	r3, [r7, #16]
    b67a:	7c3b      	ldrb	r3, [r7, #16]
    b67c:	f043 0320 	orr.w	r3, r3, #32
    b680:	743b      	strb	r3, [r7, #16]
    b682:	7c3b      	ldrb	r3, [r7, #16]
    b684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b688:	743b      	strb	r3, [r7, #16]
    b68a:	7c7b      	ldrb	r3, [r7, #17]
    b68c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b690:	747b      	strb	r3, [r7, #17]
    b692:	2302      	movs	r3, #2
    b694:	753b      	strb	r3, [r7, #20]
    b696:	687b      	ldr	r3, [r7, #4]
    b698:	61bb      	str	r3, [r7, #24]
    b69a:	683b      	ldr	r3, [r7, #0]
    b69c:	61fb      	str	r3, [r7, #28]
    b69e:	68bb      	ldr	r3, [r7, #8]
    b6a0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6a4:	7b1b      	ldrb	r3, [r3, #12]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d001      	beq.n	b6ae <n25q256a_write+0x66>
    b6aa:	2206      	movs	r2, #6
    b6ac:	e000      	b.n	b6b0 <n25q256a_write+0x68>
    b6ae:	2200      	movs	r2, #0
    b6b0:	7c3b      	ldrb	r3, [r7, #16]
    b6b2:	f362 0302 	bfi	r3, r2, #0, #3
    b6b6:	743b      	strb	r3, [r7, #16]
	while (length) {
    b6b8:	e035      	b.n	b726 <n25q256a_write+0xde>
		cmd.address = address;
    b6ba:	687b      	ldr	r3, [r7, #4]
    b6bc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b6be:	683b      	ldr	r3, [r7, #0]
    b6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b6c4:	d802      	bhi.n	b6cc <n25q256a_write+0x84>
			cmd.buf_len = length;
    b6c6:	683b      	ldr	r3, [r7, #0]
    b6c8:	61fb      	str	r3, [r7, #28]
    b6ca:	e002      	b.n	b6d2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    b6d0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b6d2:	7c3b      	ldrb	r3, [r7, #16]
    b6d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b6d8:	b2db      	uxtb	r3, r3
    b6da:	2201      	movs	r2, #1
    b6dc:	4619      	mov	r1, r3
    b6de:	68f8      	ldr	r0, [r7, #12]
    b6e0:	4b19      	ldr	r3, [pc, #100]	; (b748 <n25q256a_write+0x100>)
    b6e2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b6e4:	f107 0310 	add.w	r3, r7, #16
    b6e8:	4619      	mov	r1, r3
    b6ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b6ec:	4b17      	ldr	r3, [pc, #92]	; (b74c <n25q256a_write+0x104>)
    b6ee:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b6f0:	bf00      	nop
    b6f2:	7c3b      	ldrb	r3, [r7, #16]
    b6f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b6f8:	b2db      	uxtb	r3, r3
    b6fa:	2270      	movs	r2, #112	; 0x70
    b6fc:	4619      	mov	r1, r3
    b6fe:	68f8      	ldr	r0, [r7, #12]
    b700:	4b13      	ldr	r3, [pc, #76]	; (b750 <n25q256a_write+0x108>)
    b702:	4798      	blx	r3
    b704:	4603      	mov	r3, r0
    b706:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b70a:	2b00      	cmp	r3, #0
    b70c:	d0f1      	beq.n	b6f2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b70e:	6a3a      	ldr	r2, [r7, #32]
    b710:	69fb      	ldr	r3, [r7, #28]
    b712:	4413      	add	r3, r2
    b714:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b716:	69fb      	ldr	r3, [r7, #28]
    b718:	683a      	ldr	r2, [r7, #0]
    b71a:	1ad3      	subs	r3, r2, r3
    b71c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b71e:	69fb      	ldr	r3, [r7, #28]
    b720:	687a      	ldr	r2, [r7, #4]
    b722:	4413      	add	r3, r2
    b724:	607b      	str	r3, [r7, #4]
	while (length) {
    b726:	683b      	ldr	r3, [r7, #0]
    b728:	2b00      	cmp	r3, #0
    b72a:	d1c6      	bne.n	b6ba <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b72e:	7b5b      	ldrb	r3, [r3, #13]
    b730:	2b00      	cmp	r3, #0
    b732:	d003      	beq.n	b73c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b734:	2101      	movs	r1, #1
    b736:	68f8      	ldr	r0, [r7, #12]
    b738:	4b06      	ldr	r3, [pc, #24]	; (b754 <n25q256a_write+0x10c>)
    b73a:	4798      	blx	r3
	}
	return ERR_NONE;
    b73c:	2300      	movs	r3, #0
}
    b73e:	4618      	mov	r0, r3
    b740:	3730      	adds	r7, #48	; 0x30
    b742:	46bd      	mov	sp, r7
    b744:	bd80      	pop	{r7, pc}
    b746:	bf00      	nop
    b748:	0000b3b9 	.word	0x0000b3b9
    b74c:	0000249d 	.word	0x0000249d
    b750:	0000b27d 	.word	0x0000b27d
    b754:	0000b1b1 	.word	0x0000b1b1

0000b758 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b758:	b580      	push	{r7, lr}
    b75a:	b090      	sub	sp, #64	; 0x40
    b75c:	af00      	add	r7, sp, #0
    b75e:	60f8      	str	r0, [r7, #12]
    b760:	60b9      	str	r1, [r7, #8]
    b762:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b764:	68fb      	ldr	r3, [r7, #12]
    b766:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b768:	68fb      	ldr	r3, [r7, #12]
    b76a:	681b      	ldr	r3, [r3, #0]
    b76c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b76e:	f107 0314 	add.w	r3, r7, #20
    b772:	2200      	movs	r2, #0
    b774:	601a      	str	r2, [r3, #0]
    b776:	605a      	str	r2, [r3, #4]
    b778:	609a      	str	r2, [r3, #8]
    b77a:	60da      	str	r2, [r3, #12]
    b77c:	611a      	str	r2, [r3, #16]
    b77e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b782:	7b1b      	ldrb	r3, [r3, #12]
    b784:	2b00      	cmp	r3, #0
    b786:	d001      	beq.n	b78c <n25q256a_erase+0x34>
    b788:	2206      	movs	r2, #6
    b78a:	e000      	b.n	b78e <n25q256a_erase+0x36>
    b78c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b78e:	7d3b      	ldrb	r3, [r7, #20]
    b790:	f362 0302 	bfi	r3, r2, #0, #3
    b794:	753b      	strb	r3, [r7, #20]
    b796:	7d3b      	ldrb	r3, [r7, #20]
    b798:	f043 0310 	orr.w	r3, r3, #16
    b79c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b79e:	687b      	ldr	r3, [r7, #4]
    b7a0:	4a56      	ldr	r2, [pc, #344]	; (b8fc <n25q256a_erase+0x1a4>)
    b7a2:	4293      	cmp	r3, r2
    b7a4:	bf94      	ite	ls
    b7a6:	2301      	movls	r3, #1
    b7a8:	2300      	movhi	r3, #0
    b7aa:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b7ac:	7d3b      	ldrb	r3, [r7, #20]
    b7ae:	f362 1345 	bfi	r3, r2, #5, #1
    b7b2:	753b      	strb	r3, [r7, #20]
    b7b4:	7d7b      	ldrb	r3, [r7, #21]
    b7b6:	2202      	movs	r2, #2
    b7b8:	f362 1305 	bfi	r3, r2, #4, #2
    b7bc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b7be:	68bb      	ldr	r3, [r7, #8]
    b7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b7c2:	687b      	ldr	r3, [r7, #4]
    b7c4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b7c6:	2300      	movs	r3, #0
    b7c8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b7ca:	687b      	ldr	r3, [r7, #4]
    b7cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d104      	bne.n	b7de <n25q256a_erase+0x86>
    b7d4:	68bb      	ldr	r3, [r7, #8]
    b7d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b7da:	2b00      	cmp	r3, #0
    b7dc:	d002      	beq.n	b7e4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b7de:	f06f 030c 	mvn.w	r3, #12
    b7e2:	e087      	b.n	b8f4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b7e4:	687b      	ldr	r3, [r7, #4]
    b7e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b7ea:	d368      	bcc.n	b8be <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b7ec:	23c7      	movs	r3, #199	; 0xc7
    b7ee:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b7f0:	7d3b      	ldrb	r3, [r7, #20]
    b7f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7f6:	b2db      	uxtb	r3, r3
    b7f8:	2201      	movs	r2, #1
    b7fa:	4619      	mov	r1, r3
    b7fc:	68f8      	ldr	r0, [r7, #12]
    b7fe:	4b40      	ldr	r3, [pc, #256]	; (b900 <n25q256a_erase+0x1a8>)
    b800:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b802:	f107 0314 	add.w	r3, r7, #20
    b806:	4619      	mov	r1, r3
    b808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b80a:	4b3e      	ldr	r3, [pc, #248]	; (b904 <n25q256a_erase+0x1ac>)
    b80c:	4798      	blx	r3
    b80e:	e059      	b.n	b8c4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b812:	b29b      	uxth	r3, r3
    b814:	2b00      	cmp	r3, #0
    b816:	d11f      	bne.n	b858 <n25q256a_erase+0x100>
    b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b81e:	d31b      	bcc.n	b858 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b822:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b824:	23d8      	movs	r3, #216	; 0xd8
    b826:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b828:	7d3b      	ldrb	r3, [r7, #20]
    b82a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b82e:	b2db      	uxtb	r3, r3
    b830:	2201      	movs	r2, #1
    b832:	4619      	mov	r1, r3
    b834:	68f8      	ldr	r0, [r7, #12]
    b836:	4b32      	ldr	r3, [pc, #200]	; (b900 <n25q256a_erase+0x1a8>)
    b838:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b83a:	f107 0314 	add.w	r3, r7, #20
    b83e:	4619      	mov	r1, r3
    b840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b842:	4b30      	ldr	r3, [pc, #192]	; (b904 <n25q256a_erase+0x1ac>)
    b844:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b848:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b850:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b854:	63bb      	str	r3, [r7, #56]	; 0x38
    b856:	e023      	b.n	b8a0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b85e:	d31b      	bcc.n	b898 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b862:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b864:	2320      	movs	r3, #32
    b866:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b868:	7d3b      	ldrb	r3, [r7, #20]
    b86a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b86e:	b2db      	uxtb	r3, r3
    b870:	2201      	movs	r2, #1
    b872:	4619      	mov	r1, r3
    b874:	68f8      	ldr	r0, [r7, #12]
    b876:	4b22      	ldr	r3, [pc, #136]	; (b900 <n25q256a_erase+0x1a8>)
    b878:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b87a:	f107 0314 	add.w	r3, r7, #20
    b87e:	4619      	mov	r1, r3
    b880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b882:	4b20      	ldr	r3, [pc, #128]	; (b904 <n25q256a_erase+0x1ac>)
    b884:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b890:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b894:	63bb      	str	r3, [r7, #56]	; 0x38
    b896:	e003      	b.n	b8a0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b898:	f06f 030c 	mvn.w	r3, #12
    b89c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b89e:	e011      	b.n	b8c4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b8a0:	bf00      	nop
    b8a2:	7d3b      	ldrb	r3, [r7, #20]
    b8a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8a8:	b2db      	uxtb	r3, r3
    b8aa:	2270      	movs	r2, #112	; 0x70
    b8ac:	4619      	mov	r1, r3
    b8ae:	68f8      	ldr	r0, [r7, #12]
    b8b0:	4b15      	ldr	r3, [pc, #84]	; (b908 <n25q256a_erase+0x1b0>)
    b8b2:	4798      	blx	r3
    b8b4:	4603      	mov	r3, r0
    b8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d0f1      	beq.n	b8a2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d1a5      	bne.n	b810 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b8c4:	bf00      	nop
    b8c6:	7d3b      	ldrb	r3, [r7, #20]
    b8c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8cc:	b2db      	uxtb	r3, r3
    b8ce:	2270      	movs	r2, #112	; 0x70
    b8d0:	4619      	mov	r1, r3
    b8d2:	68f8      	ldr	r0, [r7, #12]
    b8d4:	4b0c      	ldr	r3, [pc, #48]	; (b908 <n25q256a_erase+0x1b0>)
    b8d6:	4798      	blx	r3
    b8d8:	4603      	mov	r3, r0
    b8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8de:	2b00      	cmp	r3, #0
    b8e0:	d0f1      	beq.n	b8c6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b8e4:	7b5b      	ldrb	r3, [r3, #13]
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	d003      	beq.n	b8f2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b8ea:	2101      	movs	r1, #1
    b8ec:	68f8      	ldr	r0, [r7, #12]
    b8ee:	4b07      	ldr	r3, [pc, #28]	; (b90c <n25q256a_erase+0x1b4>)
    b8f0:	4798      	blx	r3
	}
	return rc;
    b8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b8f4:	4618      	mov	r0, r3
    b8f6:	3740      	adds	r7, #64	; 0x40
    b8f8:	46bd      	mov	sp, r7
    b8fa:	bd80      	pop	{r7, pc}
    b8fc:	001fffff 	.word	0x001fffff
    b900:	0000b3b9 	.word	0x0000b3b9
    b904:	0000249d 	.word	0x0000249d
    b908:	0000b27d 	.word	0x0000b27d
    b90c:	0000b1b1 	.word	0x0000b1b1

0000b910 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b910:	b590      	push	{r4, r7, lr}
    b912:	b085      	sub	sp, #20
    b914:	af00      	add	r7, sp, #0
    b916:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b918:	687b      	ldr	r3, [r7, #4]
    b91a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b91c:	68fb      	ldr	r3, [r7, #12]
    b91e:	7b1b      	ldrb	r3, [r3, #12]
    b920:	2b00      	cmp	r3, #0
    b922:	d001      	beq.n	b928 <n25q256a_enable_xip+0x18>
    b924:	2306      	movs	r3, #6
    b926:	e000      	b.n	b92a <n25q256a_enable_xip+0x1a>
    b928:	2300      	movs	r3, #0
    b92a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b92c:	68fb      	ldr	r3, [r7, #12]
    b92e:	7b5b      	ldrb	r3, [r3, #13]
    b930:	2b00      	cmp	r3, #0
    b932:	d129      	bne.n	b988 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b934:	7afb      	ldrb	r3, [r7, #11]
    b936:	2285      	movs	r2, #133	; 0x85
    b938:	4619      	mov	r1, r3
    b93a:	6878      	ldr	r0, [r7, #4]
    b93c:	4b15      	ldr	r3, [pc, #84]	; (b994 <n25q256a_enable_xip+0x84>)
    b93e:	4798      	blx	r3
    b940:	4603      	mov	r3, r0
    b942:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b944:	7abb      	ldrb	r3, [r7, #10]
    b946:	f003 0308 	and.w	r3, r3, #8
    b94a:	2b00      	cmp	r3, #0
    b94c:	d015      	beq.n	b97a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b94e:	7abb      	ldrb	r3, [r7, #10]
    b950:	f023 0308 	bic.w	r3, r3, #8
    b954:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b956:	7abb      	ldrb	r3, [r7, #10]
    b958:	7af9      	ldrb	r1, [r7, #11]
    b95a:	2281      	movs	r2, #129	; 0x81
    b95c:	6878      	ldr	r0, [r7, #4]
    b95e:	4c0e      	ldr	r4, [pc, #56]	; (b998 <n25q256a_enable_xip+0x88>)
    b960:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b962:	bf00      	nop
    b964:	7afb      	ldrb	r3, [r7, #11]
    b966:	2270      	movs	r2, #112	; 0x70
    b968:	4619      	mov	r1, r3
    b96a:	6878      	ldr	r0, [r7, #4]
    b96c:	4b09      	ldr	r3, [pc, #36]	; (b994 <n25q256a_enable_xip+0x84>)
    b96e:	4798      	blx	r3
    b970:	4603      	mov	r3, r0
    b972:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b976:	2b00      	cmp	r3, #0
    b978:	d0f4      	beq.n	b964 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b97a:	68fb      	ldr	r3, [r7, #12]
    b97c:	2201      	movs	r2, #1
    b97e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b980:	2101      	movs	r1, #1
    b982:	6878      	ldr	r0, [r7, #4]
    b984:	4b05      	ldr	r3, [pc, #20]	; (b99c <n25q256a_enable_xip+0x8c>)
    b986:	4798      	blx	r3
	}
	return ERR_NONE;
    b988:	2300      	movs	r3, #0
}
    b98a:	4618      	mov	r0, r3
    b98c:	3714      	adds	r7, #20
    b98e:	46bd      	mov	sp, r7
    b990:	bd90      	pop	{r4, r7, pc}
    b992:	bf00      	nop
    b994:	0000b27d 	.word	0x0000b27d
    b998:	0000b319 	.word	0x0000b319
    b99c:	0000b1b1 	.word	0x0000b1b1

0000b9a0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b9a0:	b580      	push	{r7, lr}
    b9a2:	b086      	sub	sp, #24
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9a8:	687b      	ldr	r3, [r7, #4]
    b9aa:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9ac:	687b      	ldr	r3, [r7, #4]
    b9ae:	681b      	ldr	r3, [r3, #0]
    b9b0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b9b2:	697b      	ldr	r3, [r7, #20]
    b9b4:	7b1b      	ldrb	r3, [r3, #12]
    b9b6:	2b00      	cmp	r3, #0
    b9b8:	d001      	beq.n	b9be <n25q256a_disable_xip+0x1e>
    b9ba:	2306      	movs	r3, #6
    b9bc:	e000      	b.n	b9c0 <n25q256a_disable_xip+0x20>
    b9be:	2300      	movs	r3, #0
    b9c0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b9c2:	2100      	movs	r1, #0
    b9c4:	6878      	ldr	r0, [r7, #4]
    b9c6:	4b15      	ldr	r3, [pc, #84]	; (ba1c <n25q256a_disable_xip+0x7c>)
    b9c8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b9ca:	7bfb      	ldrb	r3, [r7, #15]
    b9cc:	2285      	movs	r2, #133	; 0x85
    b9ce:	4619      	mov	r1, r3
    b9d0:	6878      	ldr	r0, [r7, #4]
    b9d2:	4b13      	ldr	r3, [pc, #76]	; (ba20 <n25q256a_disable_xip+0x80>)
    b9d4:	4798      	blx	r3
    b9d6:	4603      	mov	r3, r0
    b9d8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b9da:	7bbb      	ldrb	r3, [r7, #14]
    b9dc:	f003 0308 	and.w	r3, r3, #8
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d113      	bne.n	ba0c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b9e4:	697b      	ldr	r3, [r7, #20]
    b9e6:	689b      	ldr	r3, [r3, #8]
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d00f      	beq.n	ba0c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b9ec:	693b      	ldr	r3, [r7, #16]
    b9ee:	681b      	ldr	r3, [r3, #0]
    b9f0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b9f2:	6938      	ldr	r0, [r7, #16]
    b9f4:	4b0b      	ldr	r3, [pc, #44]	; (ba24 <n25q256a_disable_xip+0x84>)
    b9f6:	4798      	blx	r3
			n25q->pin_exit_xip();
    b9f8:	697b      	ldr	r3, [r7, #20]
    b9fa:	689b      	ldr	r3, [r3, #8]
    b9fc:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b9fe:	68b9      	ldr	r1, [r7, #8]
    ba00:	6938      	ldr	r0, [r7, #16]
    ba02:	4b09      	ldr	r3, [pc, #36]	; (ba28 <n25q256a_disable_xip+0x88>)
    ba04:	4798      	blx	r3
			qspi_sync_enable(descr);
    ba06:	6938      	ldr	r0, [r7, #16]
    ba08:	4b08      	ldr	r3, [pc, #32]	; (ba2c <n25q256a_disable_xip+0x8c>)
    ba0a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    ba0c:	697b      	ldr	r3, [r7, #20]
    ba0e:	2200      	movs	r2, #0
    ba10:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ba12:	2300      	movs	r3, #0
}
    ba14:	4618      	mov	r0, r3
    ba16:	3718      	adds	r7, #24
    ba18:	46bd      	mov	sp, r7
    ba1a:	bd80      	pop	{r7, pc}
    ba1c:	0000b1b1 	.word	0x0000b1b1
    ba20:	0000b27d 	.word	0x0000b27d
    ba24:	00002461 	.word	0x00002461
    ba28:	000023d9 	.word	0x000023d9
    ba2c:	00002425 	.word	0x00002425

0000ba30 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ba30:	b480      	push	{r7}
    ba32:	b085      	sub	sp, #20
    ba34:	af00      	add	r7, sp, #0
    ba36:	60f8      	str	r0, [r7, #12]
    ba38:	60b9      	str	r1, [r7, #8]
    ba3a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ba3c:	68fb      	ldr	r3, [r7, #12]
    ba3e:	68ba      	ldr	r2, [r7, #8]
    ba40:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ba42:	68fb      	ldr	r3, [r7, #12]
    ba44:	687a      	ldr	r2, [r7, #4]
    ba46:	605a      	str	r2, [r3, #4]

	return me;
    ba48:	68fb      	ldr	r3, [r7, #12]
}
    ba4a:	4618      	mov	r0, r3
    ba4c:	3714      	adds	r7, #20
    ba4e:	46bd      	mov	sp, r7
    ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba54:	4770      	bx	lr

0000ba56 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ba56:	b480      	push	{r7}
    ba58:	b083      	sub	sp, #12
    ba5a:	af00      	add	r7, sp, #0
    ba5c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ba5e:	687b      	ldr	r3, [r7, #4]
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	b29a      	uxth	r2, r3
    ba64:	687b      	ldr	r3, [r7, #4]
    ba66:	3301      	adds	r3, #1
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	b29b      	uxth	r3, r3
    ba6c:	021b      	lsls	r3, r3, #8
    ba6e:	b29b      	uxth	r3, r3
    ba70:	4413      	add	r3, r2
    ba72:	b29b      	uxth	r3, r3
}
    ba74:	4618      	mov	r0, r3
    ba76:	370c      	adds	r7, #12
    ba78:	46bd      	mov	sp, r7
    ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba7e:	4770      	bx	lr

0000ba80 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    ba80:	b480      	push	{r7}
    ba82:	b083      	sub	sp, #12
    ba84:	af00      	add	r7, sp, #0
    ba86:	6078      	str	r0, [r7, #4]
	return desc[0];
    ba88:	687b      	ldr	r3, [r7, #4]
    ba8a:	781b      	ldrb	r3, [r3, #0]
}
    ba8c:	4618      	mov	r0, r3
    ba8e:	370c      	adds	r7, #12
    ba90:	46bd      	mov	sp, r7
    ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba96:	4770      	bx	lr

0000ba98 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    ba98:	b580      	push	{r7, lr}
    ba9a:	b082      	sub	sp, #8
    ba9c:	af00      	add	r7, sp, #0
    ba9e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    baa0:	6878      	ldr	r0, [r7, #4]
    baa2:	4b05      	ldr	r3, [pc, #20]	; (bab8 <usb_desc_next+0x20>)
    baa4:	4798      	blx	r3
    baa6:	4603      	mov	r3, r0
    baa8:	461a      	mov	r2, r3
    baaa:	687b      	ldr	r3, [r7, #4]
    baac:	4413      	add	r3, r2
}
    baae:	4618      	mov	r0, r3
    bab0:	3708      	adds	r7, #8
    bab2:	46bd      	mov	sp, r7
    bab4:	bd80      	pop	{r7, pc}
    bab6:	bf00      	nop
    bab8:	0000ba81 	.word	0x0000ba81

0000babc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    babc:	b580      	push	{r7, lr}
    babe:	b08c      	sub	sp, #48	; 0x30
    bac0:	af00      	add	r7, sp, #0
    bac2:	6078      	str	r0, [r7, #4]
    bac4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bac6:	687b      	ldr	r3, [r7, #4]
    bac8:	689b      	ldr	r3, [r3, #8]
    baca:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bacc:	683b      	ldr	r3, [r7, #0]
    bace:	681b      	ldr	r3, [r3, #0]
    bad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bad2:	2300      	movs	r3, #0
    bad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bad8:	e08f      	b.n	bbfa <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    badc:	2b00      	cmp	r3, #0
    bade:	d102      	bne.n	bae6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bae0:	f06f 0309 	mvn.w	r3, #9
    bae4:	e092      	b.n	bc0c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bae8:	789b      	ldrb	r3, [r3, #2]
    baea:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    baee:	795b      	ldrb	r3, [r3, #5]
    baf0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    baf2:	7c7b      	ldrb	r3, [r7, #17]
    baf4:	2b02      	cmp	r3, #2
    baf6:	d002      	beq.n	bafe <cdcdf_acm_enable+0x42>
    baf8:	7c7b      	ldrb	r3, [r7, #17]
    bafa:	2b0a      	cmp	r3, #10
    bafc:	d121      	bne.n	bb42 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bafe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb02:	6a3a      	ldr	r2, [r7, #32]
    bb04:	5cd2      	ldrb	r2, [r2, r3]
    bb06:	7bbb      	ldrb	r3, [r7, #14]
    bb08:	429a      	cmp	r2, r3
    bb0a:	d102      	bne.n	bb12 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bb0c:	f06f 0311 	mvn.w	r3, #17
    bb10:	e07c      	b.n	bc0c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bb12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb16:	6a3a      	ldr	r2, [r7, #32]
    bb18:	5cd3      	ldrb	r3, [r2, r3]
    bb1a:	2bff      	cmp	r3, #255	; 0xff
    bb1c:	d002      	beq.n	bb24 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bb1e:	f06f 031b 	mvn.w	r3, #27
    bb22:	e073      	b.n	bc0c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb28:	7bb9      	ldrb	r1, [r7, #14]
    bb2a:	6a3a      	ldr	r2, [r7, #32]
    bb2c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bb2e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bb30:	683b      	ldr	r3, [r7, #0]
    bb32:	685b      	ldr	r3, [r3, #4]
    bb34:	2205      	movs	r2, #5
    bb36:	4619      	mov	r1, r3
    bb38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb3a:	4b36      	ldr	r3, [pc, #216]	; (bc14 <cdcdf_acm_enable+0x158>)
    bb3c:	4798      	blx	r3
    bb3e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bb40:	e047      	b.n	bbd2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bb42:	f06f 0309 	mvn.w	r3, #9
    bb46:	e061      	b.n	bc0c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb4a:	789b      	ldrb	r3, [r3, #2]
    bb4c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb50:	78db      	ldrb	r3, [r3, #3]
    bb52:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb56:	3304      	adds	r3, #4
    bb58:	4618      	mov	r0, r3
    bb5a:	4b2f      	ldr	r3, [pc, #188]	; (bc18 <cdcdf_acm_enable+0x15c>)
    bb5c:	4798      	blx	r3
    bb5e:	4603      	mov	r3, r0
    bb60:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bb62:	7ebb      	ldrb	r3, [r7, #26]
    bb64:	7ef9      	ldrb	r1, [r7, #27]
    bb66:	8bba      	ldrh	r2, [r7, #28]
    bb68:	4618      	mov	r0, r3
    bb6a:	4b2c      	ldr	r3, [pc, #176]	; (bc1c <cdcdf_acm_enable+0x160>)
    bb6c:	4798      	blx	r3
    bb6e:	4603      	mov	r3, r0
    bb70:	2b00      	cmp	r3, #0
    bb72:	d002      	beq.n	bb7a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bb74:	f06f 0313 	mvn.w	r3, #19
    bb78:	e048      	b.n	bc0c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bb7a:	7ebb      	ldrb	r3, [r7, #26]
    bb7c:	b25b      	sxtb	r3, r3
    bb7e:	2b00      	cmp	r3, #0
    bb80:	da0f      	bge.n	bba2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb86:	7eb9      	ldrb	r1, [r7, #26]
    bb88:	6a3a      	ldr	r2, [r7, #32]
    bb8a:	4413      	add	r3, r2
    bb8c:	460a      	mov	r2, r1
    bb8e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bb90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb94:	6a3a      	ldr	r2, [r7, #32]
    bb96:	4413      	add	r3, r2
    bb98:	789b      	ldrb	r3, [r3, #2]
    bb9a:	4618      	mov	r0, r3
    bb9c:	4b20      	ldr	r3, [pc, #128]	; (bc20 <cdcdf_acm_enable+0x164>)
    bb9e:	4798      	blx	r3
    bba0:	e007      	b.n	bbb2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bba2:	7eba      	ldrb	r2, [r7, #26]
    bba4:	6a3b      	ldr	r3, [r7, #32]
    bba6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bba8:	6a3b      	ldr	r3, [r7, #32]
    bbaa:	791b      	ldrb	r3, [r3, #4]
    bbac:	4618      	mov	r0, r3
    bbae:	4b1c      	ldr	r3, [pc, #112]	; (bc20 <cdcdf_acm_enable+0x164>)
    bbb0:	4798      	blx	r3
			}
			desc->sod = ep;
    bbb2:	683b      	ldr	r3, [r7, #0]
    bbb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bbb6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bbb8:	683b      	ldr	r3, [r7, #0]
    bbba:	681b      	ldr	r3, [r3, #0]
    bbbc:	4618      	mov	r0, r3
    bbbe:	4b19      	ldr	r3, [pc, #100]	; (bc24 <cdcdf_acm_enable+0x168>)
    bbc0:	4798      	blx	r3
    bbc2:	4602      	mov	r2, r0
    bbc4:	683b      	ldr	r3, [r7, #0]
    bbc6:	685b      	ldr	r3, [r3, #4]
    bbc8:	4619      	mov	r1, r3
    bbca:	4610      	mov	r0, r2
    bbcc:	4b16      	ldr	r3, [pc, #88]	; (bc28 <cdcdf_acm_enable+0x16c>)
    bbce:	4798      	blx	r3
    bbd0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d1b7      	bne.n	bb48 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bbd8:	683b      	ldr	r3, [r7, #0]
    bbda:	681b      	ldr	r3, [r3, #0]
    bbdc:	4618      	mov	r0, r3
    bbde:	4b11      	ldr	r3, [pc, #68]	; (bc24 <cdcdf_acm_enable+0x168>)
    bbe0:	4798      	blx	r3
    bbe2:	683b      	ldr	r3, [r7, #0]
    bbe4:	685b      	ldr	r3, [r3, #4]
    bbe6:	2204      	movs	r2, #4
    bbe8:	4619      	mov	r1, r3
    bbea:	4b0a      	ldr	r3, [pc, #40]	; (bc14 <cdcdf_acm_enable+0x158>)
    bbec:	4798      	blx	r3
    bbee:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbf4:	3301      	adds	r3, #1
    bbf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bbfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbfe:	2b01      	cmp	r3, #1
    bc00:	f67f af6b 	bls.w	bada <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bc04:	4b09      	ldr	r3, [pc, #36]	; (bc2c <cdcdf_acm_enable+0x170>)
    bc06:	2201      	movs	r2, #1
    bc08:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bc0a:	2300      	movs	r3, #0
}
    bc0c:	4618      	mov	r0, r3
    bc0e:	3730      	adds	r7, #48	; 0x30
    bc10:	46bd      	mov	sp, r7
    bc12:	bd80      	pop	{r7, pc}
    bc14:	0000ce7d 	.word	0x0000ce7d
    bc18:	0000ba57 	.word	0x0000ba57
    bc1c:	00003491 	.word	0x00003491
    bc20:	0000357d 	.word	0x0000357d
    bc24:	0000ba99 	.word	0x0000ba99
    bc28:	0000ced9 	.word	0x0000ced9
    bc2c:	20000b70 	.word	0x20000b70

0000bc30 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bc30:	b580      	push	{r7, lr}
    bc32:	b088      	sub	sp, #32
    bc34:	af00      	add	r7, sp, #0
    bc36:	6078      	str	r0, [r7, #4]
    bc38:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bc3a:	687b      	ldr	r3, [r7, #4]
    bc3c:	689b      	ldr	r3, [r3, #8]
    bc3e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bc40:	683b      	ldr	r3, [r7, #0]
    bc42:	2b00      	cmp	r3, #0
    bc44:	d00c      	beq.n	bc60 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bc46:	683b      	ldr	r3, [r7, #0]
    bc48:	681b      	ldr	r3, [r3, #0]
    bc4a:	795b      	ldrb	r3, [r3, #5]
    bc4c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bc4e:	7c7b      	ldrb	r3, [r7, #17]
    bc50:	2b02      	cmp	r3, #2
    bc52:	d005      	beq.n	bc60 <cdcdf_acm_disable+0x30>
    bc54:	7c7b      	ldrb	r3, [r7, #17]
    bc56:	2b0a      	cmp	r3, #10
    bc58:	d002      	beq.n	bc60 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bc5a:	f06f 0309 	mvn.w	r3, #9
    bc5e:	e035      	b.n	bccc <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bc60:	2300      	movs	r3, #0
    bc62:	77fb      	strb	r3, [r7, #31]
    bc64:	e01f      	b.n	bca6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bc66:	7ffb      	ldrb	r3, [r7, #31]
    bc68:	69ba      	ldr	r2, [r7, #24]
    bc6a:	5cd3      	ldrb	r3, [r2, r3]
    bc6c:	2bff      	cmp	r3, #255	; 0xff
    bc6e:	d016      	beq.n	bc9e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bc70:	7ffb      	ldrb	r3, [r7, #31]
    bc72:	69ba      	ldr	r2, [r7, #24]
    bc74:	21ff      	movs	r1, #255	; 0xff
    bc76:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bc78:	7ffb      	ldrb	r3, [r7, #31]
    bc7a:	69ba      	ldr	r2, [r7, #24]
    bc7c:	4413      	add	r3, r2
    bc7e:	789b      	ldrb	r3, [r3, #2]
    bc80:	2bff      	cmp	r3, #255	; 0xff
    bc82:	d00d      	beq.n	bca0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bc84:	7ffb      	ldrb	r3, [r7, #31]
    bc86:	69ba      	ldr	r2, [r7, #24]
    bc88:	4413      	add	r3, r2
    bc8a:	789b      	ldrb	r3, [r3, #2]
    bc8c:	4618      	mov	r0, r3
    bc8e:	4b11      	ldr	r3, [pc, #68]	; (bcd4 <cdcdf_acm_disable+0xa4>)
    bc90:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bc92:	7ffb      	ldrb	r3, [r7, #31]
    bc94:	69ba      	ldr	r2, [r7, #24]
    bc96:	4413      	add	r3, r2
    bc98:	22ff      	movs	r2, #255	; 0xff
    bc9a:	709a      	strb	r2, [r3, #2]
    bc9c:	e000      	b.n	bca0 <cdcdf_acm_disable+0x70>
			continue;
    bc9e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bca0:	7ffb      	ldrb	r3, [r7, #31]
    bca2:	3301      	adds	r3, #1
    bca4:	77fb      	strb	r3, [r7, #31]
    bca6:	7ffb      	ldrb	r3, [r7, #31]
    bca8:	2b01      	cmp	r3, #1
    bcaa:	d9dc      	bls.n	bc66 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bcac:	69bb      	ldr	r3, [r7, #24]
    bcae:	791b      	ldrb	r3, [r3, #4]
    bcb0:	2bff      	cmp	r3, #255	; 0xff
    bcb2:	d007      	beq.n	bcc4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bcb4:	69bb      	ldr	r3, [r7, #24]
    bcb6:	791b      	ldrb	r3, [r3, #4]
    bcb8:	4618      	mov	r0, r3
    bcba:	4b06      	ldr	r3, [pc, #24]	; (bcd4 <cdcdf_acm_disable+0xa4>)
    bcbc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bcbe:	69bb      	ldr	r3, [r7, #24]
    bcc0:	22ff      	movs	r2, #255	; 0xff
    bcc2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bcc4:	4b04      	ldr	r3, [pc, #16]	; (bcd8 <cdcdf_acm_disable+0xa8>)
    bcc6:	2200      	movs	r2, #0
    bcc8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bcca:	2300      	movs	r3, #0
}
    bccc:	4618      	mov	r0, r3
    bcce:	3720      	adds	r7, #32
    bcd0:	46bd      	mov	sp, r7
    bcd2:	bd80      	pop	{r7, pc}
    bcd4:	0000352d 	.word	0x0000352d
    bcd8:	20000b70 	.word	0x20000b70

0000bcdc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bcdc:	b580      	push	{r7, lr}
    bcde:	b084      	sub	sp, #16
    bce0:	af00      	add	r7, sp, #0
    bce2:	60f8      	str	r0, [r7, #12]
    bce4:	460b      	mov	r3, r1
    bce6:	607a      	str	r2, [r7, #4]
    bce8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bcea:	7afb      	ldrb	r3, [r7, #11]
    bcec:	2b01      	cmp	r3, #1
    bcee:	d009      	beq.n	bd04 <cdcdf_acm_ctrl+0x28>
    bcf0:	2b02      	cmp	r3, #2
    bcf2:	d00d      	beq.n	bd10 <cdcdf_acm_ctrl+0x34>
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	d10e      	bne.n	bd16 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bcf8:	6879      	ldr	r1, [r7, #4]
    bcfa:	68f8      	ldr	r0, [r7, #12]
    bcfc:	4b09      	ldr	r3, [pc, #36]	; (bd24 <cdcdf_acm_ctrl+0x48>)
    bcfe:	4798      	blx	r3
    bd00:	4603      	mov	r3, r0
    bd02:	e00a      	b.n	bd1a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bd04:	6879      	ldr	r1, [r7, #4]
    bd06:	68f8      	ldr	r0, [r7, #12]
    bd08:	4b07      	ldr	r3, [pc, #28]	; (bd28 <cdcdf_acm_ctrl+0x4c>)
    bd0a:	4798      	blx	r3
    bd0c:	4603      	mov	r3, r0
    bd0e:	e004      	b.n	bd1a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bd10:	f06f 031a 	mvn.w	r3, #26
    bd14:	e001      	b.n	bd1a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bd16:	f06f 030c 	mvn.w	r3, #12
	}
}
    bd1a:	4618      	mov	r0, r3
    bd1c:	3710      	adds	r7, #16
    bd1e:	46bd      	mov	sp, r7
    bd20:	bd80      	pop	{r7, pc}
    bd22:	bf00      	nop
    bd24:	0000babd 	.word	0x0000babd
    bd28:	0000bc31 	.word	0x0000bc31

0000bd2c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bd2c:	b590      	push	{r4, r7, lr}
    bd2e:	b087      	sub	sp, #28
    bd30:	af00      	add	r7, sp, #0
    bd32:	4603      	mov	r3, r0
    bd34:	6039      	str	r1, [r7, #0]
    bd36:	71fb      	strb	r3, [r7, #7]
    bd38:	4613      	mov	r3, r2
    bd3a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bd3c:	683b      	ldr	r3, [r7, #0]
    bd3e:	799a      	ldrb	r2, [r3, #6]
    bd40:	79db      	ldrb	r3, [r3, #7]
    bd42:	021b      	lsls	r3, r3, #8
    bd44:	4313      	orrs	r3, r2
    bd46:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bd48:	4b2b      	ldr	r3, [pc, #172]	; (bdf8 <cdcdf_acm_set_req+0xcc>)
    bd4a:	4798      	blx	r3
    bd4c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bd4e:	683b      	ldr	r3, [r7, #0]
    bd50:	785b      	ldrb	r3, [r3, #1]
    bd52:	2b20      	cmp	r3, #32
    bd54:	d002      	beq.n	bd5c <cdcdf_acm_set_req+0x30>
    bd56:	2b22      	cmp	r3, #34	; 0x22
    bd58:	d034      	beq.n	bdc4 <cdcdf_acm_set_req+0x98>
    bd5a:	e046      	b.n	bdea <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bd5c:	8afb      	ldrh	r3, [r7, #22]
    bd5e:	2b07      	cmp	r3, #7
    bd60:	d002      	beq.n	bd68 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bd62:	f04f 33ff 	mov.w	r3, #4294967295
    bd66:	e042      	b.n	bdee <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bd68:	79bb      	ldrb	r3, [r7, #6]
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d107      	bne.n	bd7e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bd6e:	8afa      	ldrh	r2, [r7, #22]
    bd70:	79f8      	ldrb	r0, [r7, #7]
    bd72:	2300      	movs	r3, #0
    bd74:	6939      	ldr	r1, [r7, #16]
    bd76:	4c21      	ldr	r4, [pc, #132]	; (bdfc <cdcdf_acm_set_req+0xd0>)
    bd78:	47a0      	blx	r4
    bd7a:	4603      	mov	r3, r0
    bd7c:	e037      	b.n	bdee <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bd7e:	693a      	ldr	r2, [r7, #16]
    bd80:	f107 0308 	add.w	r3, r7, #8
    bd84:	6810      	ldr	r0, [r2, #0]
    bd86:	6018      	str	r0, [r3, #0]
    bd88:	8891      	ldrh	r1, [r2, #4]
    bd8a:	7992      	ldrb	r2, [r2, #6]
    bd8c:	8099      	strh	r1, [r3, #4]
    bd8e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bd90:	4b1b      	ldr	r3, [pc, #108]	; (be00 <cdcdf_acm_set_req+0xd4>)
    bd92:	681b      	ldr	r3, [r3, #0]
    bd94:	2b00      	cmp	r3, #0
    bd96:	d008      	beq.n	bdaa <cdcdf_acm_set_req+0x7e>
    bd98:	4b19      	ldr	r3, [pc, #100]	; (be00 <cdcdf_acm_set_req+0xd4>)
    bd9a:	681b      	ldr	r3, [r3, #0]
    bd9c:	f107 0208 	add.w	r2, r7, #8
    bda0:	4610      	mov	r0, r2
    bda2:	4798      	blx	r3
    bda4:	4603      	mov	r3, r0
    bda6:	2b00      	cmp	r3, #0
    bda8:	d00a      	beq.n	bdc0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bdaa:	4b16      	ldr	r3, [pc, #88]	; (be04 <cdcdf_acm_set_req+0xd8>)
    bdac:	f107 0208 	add.w	r2, r7, #8
    bdb0:	e892 0003 	ldmia.w	r2, {r0, r1}
    bdb4:	6018      	str	r0, [r3, #0]
    bdb6:	3304      	adds	r3, #4
    bdb8:	8019      	strh	r1, [r3, #0]
    bdba:	3302      	adds	r3, #2
    bdbc:	0c0a      	lsrs	r2, r1, #16
    bdbe:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    bdc0:	2300      	movs	r3, #0
    bdc2:	e014      	b.n	bdee <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    bdc4:	2300      	movs	r3, #0
    bdc6:	2200      	movs	r2, #0
    bdc8:	2100      	movs	r1, #0
    bdca:	2000      	movs	r0, #0
    bdcc:	4c0b      	ldr	r4, [pc, #44]	; (bdfc <cdcdf_acm_set_req+0xd0>)
    bdce:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bdd0:	4b0d      	ldr	r3, [pc, #52]	; (be08 <cdcdf_acm_set_req+0xdc>)
    bdd2:	681b      	ldr	r3, [r3, #0]
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d006      	beq.n	bde6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    bdd8:	4b0b      	ldr	r3, [pc, #44]	; (be08 <cdcdf_acm_set_req+0xdc>)
    bdda:	681b      	ldr	r3, [r3, #0]
    bddc:	683a      	ldr	r2, [r7, #0]
    bdde:	8852      	ldrh	r2, [r2, #2]
    bde0:	b292      	uxth	r2, r2
    bde2:	4610      	mov	r0, r2
    bde4:	4798      	blx	r3
		}
		return ERR_NONE;
    bde6:	2300      	movs	r3, #0
    bde8:	e001      	b.n	bdee <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    bdea:	f06f 030c 	mvn.w	r3, #12
	}
}
    bdee:	4618      	mov	r0, r3
    bdf0:	371c      	adds	r7, #28
    bdf2:	46bd      	mov	sp, r7
    bdf4:	bd90      	pop	{r4, r7, pc}
    bdf6:	bf00      	nop
    bdf8:	0000cd79 	.word	0x0000cd79
    bdfc:	0000cbed 	.word	0x0000cbed
    be00:	20000b84 	.word	0x20000b84
    be04:	20000b78 	.word	0x20000b78
    be08:	20000b80 	.word	0x20000b80

0000be0c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be0c:	b590      	push	{r4, r7, lr}
    be0e:	b085      	sub	sp, #20
    be10:	af00      	add	r7, sp, #0
    be12:	4603      	mov	r3, r0
    be14:	6039      	str	r1, [r7, #0]
    be16:	71fb      	strb	r3, [r7, #7]
    be18:	4613      	mov	r3, r2
    be1a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    be1c:	683b      	ldr	r3, [r7, #0]
    be1e:	799a      	ldrb	r2, [r3, #6]
    be20:	79db      	ldrb	r3, [r3, #7]
    be22:	021b      	lsls	r3, r3, #8
    be24:	4313      	orrs	r3, r2
    be26:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    be28:	79bb      	ldrb	r3, [r7, #6]
    be2a:	2b01      	cmp	r3, #1
    be2c:	d101      	bne.n	be32 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    be2e:	2300      	movs	r3, #0
    be30:	e013      	b.n	be5a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    be32:	683b      	ldr	r3, [r7, #0]
    be34:	785b      	ldrb	r3, [r3, #1]
    be36:	2b21      	cmp	r3, #33	; 0x21
    be38:	d10d      	bne.n	be56 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    be3a:	89fb      	ldrh	r3, [r7, #14]
    be3c:	2b07      	cmp	r3, #7
    be3e:	d002      	beq.n	be46 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    be40:	f04f 33ff 	mov.w	r3, #4294967295
    be44:	e009      	b.n	be5a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    be46:	89fa      	ldrh	r2, [r7, #14]
    be48:	79f8      	ldrb	r0, [r7, #7]
    be4a:	2300      	movs	r3, #0
    be4c:	4905      	ldr	r1, [pc, #20]	; (be64 <cdcdf_acm_get_req+0x58>)
    be4e:	4c06      	ldr	r4, [pc, #24]	; (be68 <cdcdf_acm_get_req+0x5c>)
    be50:	47a0      	blx	r4
    be52:	4603      	mov	r3, r0
    be54:	e001      	b.n	be5a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    be56:	f06f 030c 	mvn.w	r3, #12
	}
}
    be5a:	4618      	mov	r0, r3
    be5c:	3714      	adds	r7, #20
    be5e:	46bd      	mov	sp, r7
    be60:	bd90      	pop	{r4, r7, pc}
    be62:	bf00      	nop
    be64:	20000b78 	.word	0x20000b78
    be68:	0000cbed 	.word	0x0000cbed

0000be6c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be6c:	b580      	push	{r7, lr}
    be6e:	b082      	sub	sp, #8
    be70:	af00      	add	r7, sp, #0
    be72:	4603      	mov	r3, r0
    be74:	6039      	str	r1, [r7, #0]
    be76:	71fb      	strb	r3, [r7, #7]
    be78:	4613      	mov	r3, r2
    be7a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    be7c:	683b      	ldr	r3, [r7, #0]
    be7e:	781b      	ldrb	r3, [r3, #0]
    be80:	095b      	lsrs	r3, r3, #5
    be82:	b2db      	uxtb	r3, r3
    be84:	f003 0303 	and.w	r3, r3, #3
    be88:	2b01      	cmp	r3, #1
    be8a:	d002      	beq.n	be92 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    be8c:	f06f 0309 	mvn.w	r3, #9
    be90:	e026      	b.n	bee0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    be92:	683b      	ldr	r3, [r7, #0]
    be94:	889b      	ldrh	r3, [r3, #4]
    be96:	b29a      	uxth	r2, r3
    be98:	4b13      	ldr	r3, [pc, #76]	; (bee8 <cdcdf_acm_req+0x7c>)
    be9a:	781b      	ldrb	r3, [r3, #0]
    be9c:	b29b      	uxth	r3, r3
    be9e:	429a      	cmp	r2, r3
    bea0:	d007      	beq.n	beb2 <cdcdf_acm_req+0x46>
    bea2:	683b      	ldr	r3, [r7, #0]
    bea4:	889b      	ldrh	r3, [r3, #4]
    bea6:	b29a      	uxth	r2, r3
    bea8:	4b0f      	ldr	r3, [pc, #60]	; (bee8 <cdcdf_acm_req+0x7c>)
    beaa:	785b      	ldrb	r3, [r3, #1]
    beac:	b29b      	uxth	r3, r3
    beae:	429a      	cmp	r2, r3
    beb0:	d114      	bne.n	bedc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    beb2:	683b      	ldr	r3, [r7, #0]
    beb4:	781b      	ldrb	r3, [r3, #0]
    beb6:	b25b      	sxtb	r3, r3
    beb8:	2b00      	cmp	r3, #0
    beba:	da07      	bge.n	becc <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bebc:	79ba      	ldrb	r2, [r7, #6]
    bebe:	79fb      	ldrb	r3, [r7, #7]
    bec0:	6839      	ldr	r1, [r7, #0]
    bec2:	4618      	mov	r0, r3
    bec4:	4b09      	ldr	r3, [pc, #36]	; (beec <cdcdf_acm_req+0x80>)
    bec6:	4798      	blx	r3
    bec8:	4603      	mov	r3, r0
    beca:	e009      	b.n	bee0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    becc:	79ba      	ldrb	r2, [r7, #6]
    bece:	79fb      	ldrb	r3, [r7, #7]
    bed0:	6839      	ldr	r1, [r7, #0]
    bed2:	4618      	mov	r0, r3
    bed4:	4b06      	ldr	r3, [pc, #24]	; (bef0 <cdcdf_acm_req+0x84>)
    bed6:	4798      	blx	r3
    bed8:	4603      	mov	r3, r0
    beda:	e001      	b.n	bee0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bedc:	f06f 0309 	mvn.w	r3, #9
	}
}
    bee0:	4618      	mov	r0, r3
    bee2:	3708      	adds	r7, #8
    bee4:	46bd      	mov	sp, r7
    bee6:	bd80      	pop	{r7, pc}
    bee8:	20000b70 	.word	0x20000b70
    beec:	0000be0d 	.word	0x0000be0d
    bef0:	0000bd2d 	.word	0x0000bd2d

0000bef4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bef4:	b580      	push	{r7, lr}
    bef6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bef8:	4b0b      	ldr	r3, [pc, #44]	; (bf28 <cdcdf_acm_init+0x34>)
    befa:	4798      	blx	r3
    befc:	4603      	mov	r3, r0
    befe:	2b01      	cmp	r3, #1
    bf00:	d902      	bls.n	bf08 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bf02:	f06f 0310 	mvn.w	r3, #16
    bf06:	e00d      	b.n	bf24 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bf08:	4b08      	ldr	r3, [pc, #32]	; (bf2c <cdcdf_acm_init+0x38>)
    bf0a:	4a09      	ldr	r2, [pc, #36]	; (bf30 <cdcdf_acm_init+0x3c>)
    bf0c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bf0e:	4b07      	ldr	r3, [pc, #28]	; (bf2c <cdcdf_acm_init+0x38>)
    bf10:	4a08      	ldr	r2, [pc, #32]	; (bf34 <cdcdf_acm_init+0x40>)
    bf12:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bf14:	4805      	ldr	r0, [pc, #20]	; (bf2c <cdcdf_acm_init+0x38>)
    bf16:	4b08      	ldr	r3, [pc, #32]	; (bf38 <cdcdf_acm_init+0x44>)
    bf18:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bf1a:	4908      	ldr	r1, [pc, #32]	; (bf3c <cdcdf_acm_init+0x48>)
    bf1c:	2001      	movs	r0, #1
    bf1e:	4b08      	ldr	r3, [pc, #32]	; (bf40 <cdcdf_acm_init+0x4c>)
    bf20:	4798      	blx	r3
	return ERR_NONE;
    bf22:	2300      	movs	r3, #0
}
    bf24:	4618      	mov	r0, r3
    bf26:	bd80      	pop	{r7, pc}
    bf28:	0000cd91 	.word	0x0000cd91
    bf2c:	20000b64 	.word	0x20000b64
    bf30:	0000bcdd 	.word	0x0000bcdd
    bf34:	20000b70 	.word	0x20000b70
    bf38:	0000ccf9 	.word	0x0000ccf9
    bf3c:	20000134 	.word	0x20000134
    bf40:	0000cc29 	.word	0x0000cc29

0000bf44 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bf44:	b590      	push	{r4, r7, lr}
    bf46:	b083      	sub	sp, #12
    bf48:	af00      	add	r7, sp, #0
    bf4a:	6078      	str	r0, [r7, #4]
    bf4c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bf4e:	4b0b      	ldr	r3, [pc, #44]	; (bf7c <cdcdf_acm_read+0x38>)
    bf50:	4798      	blx	r3
    bf52:	4603      	mov	r3, r0
    bf54:	f083 0301 	eor.w	r3, r3, #1
    bf58:	b2db      	uxtb	r3, r3
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d002      	beq.n	bf64 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bf5e:	f06f 0310 	mvn.w	r3, #16
    bf62:	e007      	b.n	bf74 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bf64:	4b06      	ldr	r3, [pc, #24]	; (bf80 <cdcdf_acm_read+0x3c>)
    bf66:	7918      	ldrb	r0, [r3, #4]
    bf68:	2300      	movs	r3, #0
    bf6a:	683a      	ldr	r2, [r7, #0]
    bf6c:	6879      	ldr	r1, [r7, #4]
    bf6e:	4c05      	ldr	r4, [pc, #20]	; (bf84 <cdcdf_acm_read+0x40>)
    bf70:	47a0      	blx	r4
    bf72:	4603      	mov	r3, r0
}
    bf74:	4618      	mov	r0, r3
    bf76:	370c      	adds	r7, #12
    bf78:	46bd      	mov	sp, r7
    bf7a:	bd90      	pop	{r4, r7, pc}
    bf7c:	0000c069 	.word	0x0000c069
    bf80:	20000b70 	.word	0x20000b70
    bf84:	0000cbed 	.word	0x0000cbed

0000bf88 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bf88:	b590      	push	{r4, r7, lr}
    bf8a:	b083      	sub	sp, #12
    bf8c:	af00      	add	r7, sp, #0
    bf8e:	6078      	str	r0, [r7, #4]
    bf90:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bf92:	4b0b      	ldr	r3, [pc, #44]	; (bfc0 <cdcdf_acm_write+0x38>)
    bf94:	4798      	blx	r3
    bf96:	4603      	mov	r3, r0
    bf98:	f083 0301 	eor.w	r3, r3, #1
    bf9c:	b2db      	uxtb	r3, r3
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d002      	beq.n	bfa8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    bfa2:	f06f 0310 	mvn.w	r3, #16
    bfa6:	e007      	b.n	bfb8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bfa8:	4b06      	ldr	r3, [pc, #24]	; (bfc4 <cdcdf_acm_write+0x3c>)
    bfaa:	78d8      	ldrb	r0, [r3, #3]
    bfac:	2301      	movs	r3, #1
    bfae:	683a      	ldr	r2, [r7, #0]
    bfb0:	6879      	ldr	r1, [r7, #4]
    bfb2:	4c05      	ldr	r4, [pc, #20]	; (bfc8 <cdcdf_acm_write+0x40>)
    bfb4:	47a0      	blx	r4
    bfb6:	4603      	mov	r3, r0
}
    bfb8:	4618      	mov	r0, r3
    bfba:	370c      	adds	r7, #12
    bfbc:	46bd      	mov	sp, r7
    bfbe:	bd90      	pop	{r4, r7, pc}
    bfc0:	0000c069 	.word	0x0000c069
    bfc4:	20000b70 	.word	0x20000b70
    bfc8:	0000cbed 	.word	0x0000cbed

0000bfcc <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    bfcc:	b580      	push	{r7, lr}
    bfce:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bfd0:	4b05      	ldr	r3, [pc, #20]	; (bfe8 <cdcdf_acm_stop_xfer+0x1c>)
    bfd2:	78db      	ldrb	r3, [r3, #3]
    bfd4:	4618      	mov	r0, r3
    bfd6:	4b05      	ldr	r3, [pc, #20]	; (bfec <cdcdf_acm_stop_xfer+0x20>)
    bfd8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bfda:	4b03      	ldr	r3, [pc, #12]	; (bfe8 <cdcdf_acm_stop_xfer+0x1c>)
    bfdc:	791b      	ldrb	r3, [r3, #4]
    bfde:	4618      	mov	r0, r3
    bfe0:	4b02      	ldr	r3, [pc, #8]	; (bfec <cdcdf_acm_stop_xfer+0x20>)
    bfe2:	4798      	blx	r3
}
    bfe4:	bf00      	nop
    bfe6:	bd80      	pop	{r7, pc}
    bfe8:	20000b70 	.word	0x20000b70
    bfec:	00003755 	.word	0x00003755

0000bff0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    bff0:	b580      	push	{r7, lr}
    bff2:	b082      	sub	sp, #8
    bff4:	af00      	add	r7, sp, #0
    bff6:	4603      	mov	r3, r0
    bff8:	6039      	str	r1, [r7, #0]
    bffa:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    bffc:	79fb      	ldrb	r3, [r7, #7]
    bffe:	2b03      	cmp	r3, #3
    c000:	d822      	bhi.n	c048 <cdcdf_acm_register_callback+0x58>
    c002:	a201      	add	r2, pc, #4	; (adr r2, c008 <cdcdf_acm_register_callback+0x18>)
    c004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c008:	0000c019 	.word	0x0000c019
    c00c:	0000c029 	.word	0x0000c029
    c010:	0000c039 	.word	0x0000c039
    c014:	0000c041 	.word	0x0000c041
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c018:	4b0f      	ldr	r3, [pc, #60]	; (c058 <cdcdf_acm_register_callback+0x68>)
    c01a:	791b      	ldrb	r3, [r3, #4]
    c01c:	683a      	ldr	r2, [r7, #0]
    c01e:	2102      	movs	r1, #2
    c020:	4618      	mov	r0, r3
    c022:	4b0e      	ldr	r3, [pc, #56]	; (c05c <cdcdf_acm_register_callback+0x6c>)
    c024:	4798      	blx	r3
		break;
    c026:	e012      	b.n	c04e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c028:	4b0b      	ldr	r3, [pc, #44]	; (c058 <cdcdf_acm_register_callback+0x68>)
    c02a:	78db      	ldrb	r3, [r3, #3]
    c02c:	683a      	ldr	r2, [r7, #0]
    c02e:	2102      	movs	r1, #2
    c030:	4618      	mov	r0, r3
    c032:	4b0a      	ldr	r3, [pc, #40]	; (c05c <cdcdf_acm_register_callback+0x6c>)
    c034:	4798      	blx	r3
		break;
    c036:	e00a      	b.n	c04e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c038:	4a09      	ldr	r2, [pc, #36]	; (c060 <cdcdf_acm_register_callback+0x70>)
    c03a:	683b      	ldr	r3, [r7, #0]
    c03c:	6013      	str	r3, [r2, #0]
		break;
    c03e:	e006      	b.n	c04e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c040:	4a08      	ldr	r2, [pc, #32]	; (c064 <cdcdf_acm_register_callback+0x74>)
    c042:	683b      	ldr	r3, [r7, #0]
    c044:	6013      	str	r3, [r2, #0]
		break;
    c046:	e002      	b.n	c04e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c048:	f06f 030c 	mvn.w	r3, #12
    c04c:	e000      	b.n	c050 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c04e:	2300      	movs	r3, #0
}
    c050:	4618      	mov	r0, r3
    c052:	3708      	adds	r7, #8
    c054:	46bd      	mov	sp, r7
    c056:	bd80      	pop	{r7, pc}
    c058:	20000b70 	.word	0x20000b70
    c05c:	00003881 	.word	0x00003881
    c060:	20000b84 	.word	0x20000b84
    c064:	20000b80 	.word	0x20000b80

0000c068 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c068:	b480      	push	{r7}
    c06a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c06c:	4b03      	ldr	r3, [pc, #12]	; (c07c <cdcdf_acm_is_enabled+0x14>)
    c06e:	795b      	ldrb	r3, [r3, #5]
}
    c070:	4618      	mov	r0, r3
    c072:	46bd      	mov	sp, r7
    c074:	f85d 7b04 	ldr.w	r7, [sp], #4
    c078:	4770      	bx	lr
    c07a:	bf00      	nop
    c07c:	20000b70 	.word	0x20000b70

0000c080 <usb_get_u16>:
{
    c080:	b480      	push	{r7}
    c082:	b083      	sub	sp, #12
    c084:	af00      	add	r7, sp, #0
    c086:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c088:	687b      	ldr	r3, [r7, #4]
    c08a:	781b      	ldrb	r3, [r3, #0]
    c08c:	b29a      	uxth	r2, r3
    c08e:	687b      	ldr	r3, [r7, #4]
    c090:	3301      	adds	r3, #1
    c092:	781b      	ldrb	r3, [r3, #0]
    c094:	b29b      	uxth	r3, r3
    c096:	021b      	lsls	r3, r3, #8
    c098:	b29b      	uxth	r3, r3
    c09a:	4413      	add	r3, r2
    c09c:	b29b      	uxth	r3, r3
}
    c09e:	4618      	mov	r0, r3
    c0a0:	370c      	adds	r7, #12
    c0a2:	46bd      	mov	sp, r7
    c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0a8:	4770      	bx	lr

0000c0aa <usb_desc_len>:
{
    c0aa:	b480      	push	{r7}
    c0ac:	b083      	sub	sp, #12
    c0ae:	af00      	add	r7, sp, #0
    c0b0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c0b2:	687b      	ldr	r3, [r7, #4]
    c0b4:	781b      	ldrb	r3, [r3, #0]
}
    c0b6:	4618      	mov	r0, r3
    c0b8:	370c      	adds	r7, #12
    c0ba:	46bd      	mov	sp, r7
    c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0c0:	4770      	bx	lr
	...

0000c0c4 <usb_desc_next>:
{
    c0c4:	b580      	push	{r7, lr}
    c0c6:	b082      	sub	sp, #8
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c0cc:	6878      	ldr	r0, [r7, #4]
    c0ce:	4b05      	ldr	r3, [pc, #20]	; (c0e4 <usb_desc_next+0x20>)
    c0d0:	4798      	blx	r3
    c0d2:	4603      	mov	r3, r0
    c0d4:	461a      	mov	r2, r3
    c0d6:	687b      	ldr	r3, [r7, #4]
    c0d8:	4413      	add	r3, r2
}
    c0da:	4618      	mov	r0, r3
    c0dc:	3708      	adds	r7, #8
    c0de:	46bd      	mov	sp, r7
    c0e0:	bd80      	pop	{r7, pc}
    c0e2:	bf00      	nop
    c0e4:	0000c0ab 	.word	0x0000c0ab

0000c0e8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c0e8:	b580      	push	{r7, lr}
    c0ea:	b082      	sub	sp, #8
    c0ec:	af00      	add	r7, sp, #0
    c0ee:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	3302      	adds	r3, #2
    c0f4:	4618      	mov	r0, r3
    c0f6:	4b03      	ldr	r3, [pc, #12]	; (c104 <usb_cfg_desc_total_len+0x1c>)
    c0f8:	4798      	blx	r3
    c0fa:	4603      	mov	r3, r0
}
    c0fc:	4618      	mov	r0, r3
    c0fe:	3708      	adds	r7, #8
    c100:	46bd      	mov	sp, r7
    c102:	bd80      	pop	{r7, pc}
    c104:	0000c081 	.word	0x0000c081

0000c108 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c108:	b590      	push	{r4, r7, lr}
    c10a:	b085      	sub	sp, #20
    c10c:	af00      	add	r7, sp, #0
    c10e:	4603      	mov	r3, r0
    c110:	6039      	str	r1, [r7, #0]
    c112:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c114:	2300      	movs	r3, #0
    c116:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c118:	683b      	ldr	r3, [r7, #0]
    c11a:	799a      	ldrb	r2, [r3, #6]
    c11c:	79db      	ldrb	r3, [r3, #7]
    c11e:	021b      	lsls	r3, r3, #8
    c120:	4313      	orrs	r3, r2
    c122:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c124:	897b      	ldrh	r3, [r7, #10]
    c126:	2b12      	cmp	r3, #18
    c128:	d901      	bls.n	c12e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c12a:	2312      	movs	r3, #18
    c12c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c12e:	68fb      	ldr	r3, [r7, #12]
    c130:	2b00      	cmp	r3, #0
    c132:	d10a      	bne.n	c14a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c134:	4b0f      	ldr	r3, [pc, #60]	; (c174 <usbdc_get_dev_desc+0x6c>)
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	6818      	ldr	r0, [r3, #0]
    c13a:	4b0e      	ldr	r3, [pc, #56]	; (c174 <usbdc_get_dev_desc+0x6c>)
    c13c:	681b      	ldr	r3, [r3, #0]
    c13e:	685b      	ldr	r3, [r3, #4]
    c140:	2201      	movs	r2, #1
    c142:	4619      	mov	r1, r3
    c144:	4b0c      	ldr	r3, [pc, #48]	; (c178 <usbdc_get_dev_desc+0x70>)
    c146:	4798      	blx	r3
    c148:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c14a:	68fb      	ldr	r3, [r7, #12]
    c14c:	2b00      	cmp	r3, #0
    c14e:	d101      	bne.n	c154 <usbdc_get_dev_desc+0x4c>
		return false;
    c150:	2300      	movs	r3, #0
    c152:	e00b      	b.n	c16c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c154:	897a      	ldrh	r2, [r7, #10]
    c156:	79f8      	ldrb	r0, [r7, #7]
    c158:	2300      	movs	r3, #0
    c15a:	68f9      	ldr	r1, [r7, #12]
    c15c:	4c07      	ldr	r4, [pc, #28]	; (c17c <usbdc_get_dev_desc+0x74>)
    c15e:	47a0      	blx	r4
    c160:	4603      	mov	r3, r0
    c162:	2b00      	cmp	r3, #0
    c164:	d001      	beq.n	c16a <usbdc_get_dev_desc+0x62>
		return false;
    c166:	2300      	movs	r3, #0
    c168:	e000      	b.n	c16c <usbdc_get_dev_desc+0x64>
	}
	return true;
    c16a:	2301      	movs	r3, #1
}
    c16c:	4618      	mov	r0, r3
    c16e:	3714      	adds	r7, #20
    c170:	46bd      	mov	sp, r7
    c172:	bd90      	pop	{r4, r7, pc}
    c174:	20000b88 	.word	0x20000b88
    c178:	0000ce7d 	.word	0x0000ce7d
    c17c:	0000cbed 	.word	0x0000cbed

0000c180 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c180:	b590      	push	{r4, r7, lr}
    c182:	b087      	sub	sp, #28
    c184:	af00      	add	r7, sp, #0
    c186:	4603      	mov	r3, r0
    c188:	6039      	str	r1, [r7, #0]
    c18a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c18c:	2300      	movs	r3, #0
    c18e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c190:	683b      	ldr	r3, [r7, #0]
    c192:	799a      	ldrb	r2, [r3, #6]
    c194:	79db      	ldrb	r3, [r3, #7]
    c196:	021b      	lsls	r3, r3, #8
    c198:	4313      	orrs	r3, r2
    c19a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c19c:	683b      	ldr	r3, [r7, #0]
    c19e:	885b      	ldrh	r3, [r3, #2]
    c1a0:	b29b      	uxth	r3, r3
    c1a2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c1a4:	8a7a      	ldrh	r2, [r7, #18]
    c1a6:	4b1e      	ldr	r3, [pc, #120]	; (c220 <usbdc_get_cfg_desc+0xa0>)
    c1a8:	7f1b      	ldrb	r3, [r3, #28]
    c1aa:	3b01      	subs	r3, #1
    c1ac:	4013      	ands	r3, r2
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	bf0c      	ite	eq
    c1b2:	2301      	moveq	r3, #1
    c1b4:	2300      	movne	r3, #0
    c1b6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c1b8:	697b      	ldr	r3, [r7, #20]
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d10c      	bne.n	c1d8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c1be:	4b18      	ldr	r3, [pc, #96]	; (c220 <usbdc_get_cfg_desc+0xa0>)
    c1c0:	681b      	ldr	r3, [r3, #0]
    c1c2:	6818      	ldr	r0, [r3, #0]
    c1c4:	4b16      	ldr	r3, [pc, #88]	; (c220 <usbdc_get_cfg_desc+0xa0>)
    c1c6:	681b      	ldr	r3, [r3, #0]
    c1c8:	6859      	ldr	r1, [r3, #4]
    c1ca:	7c3b      	ldrb	r3, [r7, #16]
    c1cc:	3301      	adds	r3, #1
    c1ce:	b2db      	uxtb	r3, r3
    c1d0:	461a      	mov	r2, r3
    c1d2:	4b14      	ldr	r3, [pc, #80]	; (c224 <usbdc_get_cfg_desc+0xa4>)
    c1d4:	4798      	blx	r3
    c1d6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c1d8:	697b      	ldr	r3, [r7, #20]
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d101      	bne.n	c1e2 <usbdc_get_cfg_desc+0x62>
		return false;
    c1de:	2300      	movs	r3, #0
    c1e0:	e019      	b.n	c216 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c1e2:	6978      	ldr	r0, [r7, #20]
    c1e4:	4b10      	ldr	r3, [pc, #64]	; (c228 <usbdc_get_cfg_desc+0xa8>)
    c1e6:	4798      	blx	r3
    c1e8:	4603      	mov	r3, r0
    c1ea:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c1ec:	8a7a      	ldrh	r2, [r7, #18]
    c1ee:	89fb      	ldrh	r3, [r7, #14]
    c1f0:	429a      	cmp	r2, r3
    c1f2:	d802      	bhi.n	c1fa <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c1f4:	2300      	movs	r3, #0
    c1f6:	747b      	strb	r3, [r7, #17]
    c1f8:	e001      	b.n	c1fe <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c1fa:	89fb      	ldrh	r3, [r7, #14]
    c1fc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c1fe:	8a7a      	ldrh	r2, [r7, #18]
    c200:	7c7b      	ldrb	r3, [r7, #17]
    c202:	79f8      	ldrb	r0, [r7, #7]
    c204:	6979      	ldr	r1, [r7, #20]
    c206:	4c09      	ldr	r4, [pc, #36]	; (c22c <usbdc_get_cfg_desc+0xac>)
    c208:	47a0      	blx	r4
    c20a:	4603      	mov	r3, r0
    c20c:	2b00      	cmp	r3, #0
    c20e:	d001      	beq.n	c214 <usbdc_get_cfg_desc+0x94>
		return false;
    c210:	2300      	movs	r3, #0
    c212:	e000      	b.n	c216 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c214:	2301      	movs	r3, #1
}
    c216:	4618      	mov	r0, r3
    c218:	371c      	adds	r7, #28
    c21a:	46bd      	mov	sp, r7
    c21c:	bd90      	pop	{r4, r7, pc}
    c21e:	bf00      	nop
    c220:	20000b88 	.word	0x20000b88
    c224:	0000cf3d 	.word	0x0000cf3d
    c228:	0000c0e9 	.word	0x0000c0e9
    c22c:	0000cbed 	.word	0x0000cbed

0000c230 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c230:	b590      	push	{r4, r7, lr}
    c232:	b085      	sub	sp, #20
    c234:	af00      	add	r7, sp, #0
    c236:	4603      	mov	r3, r0
    c238:	6039      	str	r1, [r7, #0]
    c23a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c23c:	683b      	ldr	r3, [r7, #0]
    c23e:	799a      	ldrb	r2, [r3, #6]
    c240:	79db      	ldrb	r3, [r3, #7]
    c242:	021b      	lsls	r3, r3, #8
    c244:	4313      	orrs	r3, r2
    c246:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c248:	683b      	ldr	r3, [r7, #0]
    c24a:	885b      	ldrh	r3, [r3, #2]
    c24c:	b29b      	uxth	r3, r3
    c24e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c250:	89fa      	ldrh	r2, [r7, #14]
    c252:	4b1a      	ldr	r3, [pc, #104]	; (c2bc <usbdc_get_str_desc+0x8c>)
    c254:	7f1b      	ldrb	r3, [r3, #28]
    c256:	3b01      	subs	r3, #1
    c258:	4013      	ands	r3, r2
    c25a:	2b00      	cmp	r3, #0
    c25c:	bf0c      	ite	eq
    c25e:	2301      	moveq	r3, #1
    c260:	2300      	movne	r3, #0
    c262:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c264:	4b15      	ldr	r3, [pc, #84]	; (c2bc <usbdc_get_str_desc+0x8c>)
    c266:	681b      	ldr	r3, [r3, #0]
    c268:	6818      	ldr	r0, [r3, #0]
    c26a:	4b14      	ldr	r3, [pc, #80]	; (c2bc <usbdc_get_str_desc+0x8c>)
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	685b      	ldr	r3, [r3, #4]
    c270:	7b3a      	ldrb	r2, [r7, #12]
    c272:	4619      	mov	r1, r3
    c274:	4b12      	ldr	r3, [pc, #72]	; (c2c0 <usbdc_get_str_desc+0x90>)
    c276:	4798      	blx	r3
    c278:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c27a:	68bb      	ldr	r3, [r7, #8]
    c27c:	2b00      	cmp	r3, #0
    c27e:	d101      	bne.n	c284 <usbdc_get_str_desc+0x54>
		return false;
    c280:	2300      	movs	r3, #0
    c282:	e017      	b.n	c2b4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c284:	68bb      	ldr	r3, [r7, #8]
    c286:	781b      	ldrb	r3, [r3, #0]
    c288:	b29b      	uxth	r3, r3
    c28a:	89fa      	ldrh	r2, [r7, #14]
    c28c:	429a      	cmp	r2, r3
    c28e:	d802      	bhi.n	c296 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c290:	2300      	movs	r3, #0
    c292:	737b      	strb	r3, [r7, #13]
    c294:	e002      	b.n	c29c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c296:	68bb      	ldr	r3, [r7, #8]
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c29c:	89fa      	ldrh	r2, [r7, #14]
    c29e:	7b7b      	ldrb	r3, [r7, #13]
    c2a0:	79f8      	ldrb	r0, [r7, #7]
    c2a2:	68b9      	ldr	r1, [r7, #8]
    c2a4:	4c07      	ldr	r4, [pc, #28]	; (c2c4 <usbdc_get_str_desc+0x94>)
    c2a6:	47a0      	blx	r4
    c2a8:	4603      	mov	r3, r0
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	d001      	beq.n	c2b2 <usbdc_get_str_desc+0x82>
		return false;
    c2ae:	2300      	movs	r3, #0
    c2b0:	e000      	b.n	c2b4 <usbdc_get_str_desc+0x84>
	}
	return true;
    c2b2:	2301      	movs	r3, #1
}
    c2b4:	4618      	mov	r0, r3
    c2b6:	3714      	adds	r7, #20
    c2b8:	46bd      	mov	sp, r7
    c2ba:	bd90      	pop	{r4, r7, pc}
    c2bc:	20000b88 	.word	0x20000b88
    c2c0:	0000cfb5 	.word	0x0000cfb5
    c2c4:	0000cbed 	.word	0x0000cbed

0000c2c8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c2c8:	b580      	push	{r7, lr}
    c2ca:	b084      	sub	sp, #16
    c2cc:	af00      	add	r7, sp, #0
    c2ce:	4603      	mov	r3, r0
    c2d0:	6039      	str	r1, [r7, #0]
    c2d2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c2d4:	683b      	ldr	r3, [r7, #0]
    c2d6:	885b      	ldrh	r3, [r3, #2]
    c2d8:	b29b      	uxth	r3, r3
    c2da:	0a1b      	lsrs	r3, r3, #8
    c2dc:	b29b      	uxth	r3, r3
    c2de:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c2e0:	7bfb      	ldrb	r3, [r7, #15]
    c2e2:	2b02      	cmp	r3, #2
    c2e4:	d00d      	beq.n	c302 <usbdc_get_desc_req+0x3a>
    c2e6:	2b03      	cmp	r3, #3
    c2e8:	d012      	beq.n	c310 <usbdc_get_desc_req+0x48>
    c2ea:	2b01      	cmp	r3, #1
    c2ec:	d002      	beq.n	c2f4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c2ee:	bf00      	nop
	}
	return false;
    c2f0:	2300      	movs	r3, #0
    c2f2:	e013      	b.n	c31c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c2f4:	79fb      	ldrb	r3, [r7, #7]
    c2f6:	6839      	ldr	r1, [r7, #0]
    c2f8:	4618      	mov	r0, r3
    c2fa:	4b0a      	ldr	r3, [pc, #40]	; (c324 <usbdc_get_desc_req+0x5c>)
    c2fc:	4798      	blx	r3
    c2fe:	4603      	mov	r3, r0
    c300:	e00c      	b.n	c31c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c302:	79fb      	ldrb	r3, [r7, #7]
    c304:	6839      	ldr	r1, [r7, #0]
    c306:	4618      	mov	r0, r3
    c308:	4b07      	ldr	r3, [pc, #28]	; (c328 <usbdc_get_desc_req+0x60>)
    c30a:	4798      	blx	r3
    c30c:	4603      	mov	r3, r0
    c30e:	e005      	b.n	c31c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c310:	79fb      	ldrb	r3, [r7, #7]
    c312:	6839      	ldr	r1, [r7, #0]
    c314:	4618      	mov	r0, r3
    c316:	4b05      	ldr	r3, [pc, #20]	; (c32c <usbdc_get_desc_req+0x64>)
    c318:	4798      	blx	r3
    c31a:	4603      	mov	r3, r0
}
    c31c:	4618      	mov	r0, r3
    c31e:	3710      	adds	r7, #16
    c320:	46bd      	mov	sp, r7
    c322:	bd80      	pop	{r7, pc}
    c324:	0000c109 	.word	0x0000c109
    c328:	0000c181 	.word	0x0000c181
    c32c:	0000c231 	.word	0x0000c231

0000c330 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c330:	b590      	push	{r4, r7, lr}
    c332:	b085      	sub	sp, #20
    c334:	af00      	add	r7, sp, #0
    c336:	4603      	mov	r3, r0
    c338:	6039      	str	r1, [r7, #0]
    c33a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c33c:	683b      	ldr	r3, [r7, #0]
    c33e:	781b      	ldrb	r3, [r3, #0]
    c340:	f003 031f 	and.w	r3, r3, #31
    c344:	2b00      	cmp	r3, #0
    c346:	db1b      	blt.n	c380 <usbdc_get_status_req+0x50>
    c348:	2b01      	cmp	r3, #1
    c34a:	dd02      	ble.n	c352 <usbdc_get_status_req+0x22>
    c34c:	2b02      	cmp	r3, #2
    c34e:	d003      	beq.n	c358 <usbdc_get_status_req+0x28>
    c350:	e016      	b.n	c380 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c352:	2300      	movs	r3, #0
    c354:	60fb      	str	r3, [r7, #12]
		break;
    c356:	e015      	b.n	c384 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c358:	683b      	ldr	r3, [r7, #0]
    c35a:	889b      	ldrh	r3, [r3, #4]
    c35c:	b29b      	uxth	r3, r3
    c35e:	b2db      	uxtb	r3, r3
    c360:	2102      	movs	r1, #2
    c362:	4618      	mov	r0, r3
    c364:	4b0f      	ldr	r3, [pc, #60]	; (c3a4 <usbdc_get_status_req+0x74>)
    c366:	4798      	blx	r3
    c368:	4603      	mov	r3, r0
    c36a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c36c:	68fb      	ldr	r3, [r7, #12]
    c36e:	2b00      	cmp	r3, #0
    c370:	da01      	bge.n	c376 <usbdc_get_status_req+0x46>
			return false;
    c372:	2300      	movs	r3, #0
    c374:	e012      	b.n	c39c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c376:	68fb      	ldr	r3, [r7, #12]
    c378:	f003 0301 	and.w	r3, r3, #1
    c37c:	60fb      	str	r3, [r7, #12]
		break;
    c37e:	e001      	b.n	c384 <usbdc_get_status_req+0x54>
	default:
		return false;
    c380:	2300      	movs	r3, #0
    c382:	e00b      	b.n	c39c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c384:	4b08      	ldr	r3, [pc, #32]	; (c3a8 <usbdc_get_status_req+0x78>)
    c386:	695b      	ldr	r3, [r3, #20]
    c388:	89ba      	ldrh	r2, [r7, #12]
    c38a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c38c:	4b06      	ldr	r3, [pc, #24]	; (c3a8 <usbdc_get_status_req+0x78>)
    c38e:	6959      	ldr	r1, [r3, #20]
    c390:	79f8      	ldrb	r0, [r7, #7]
    c392:	2300      	movs	r3, #0
    c394:	2202      	movs	r2, #2
    c396:	4c05      	ldr	r4, [pc, #20]	; (c3ac <usbdc_get_status_req+0x7c>)
    c398:	47a0      	blx	r4
	return true;
    c39a:	2301      	movs	r3, #1
}
    c39c:	4618      	mov	r0, r3
    c39e:	3714      	adds	r7, #20
    c3a0:	46bd      	mov	sp, r7
    c3a2:	bd90      	pop	{r4, r7, pc}
    c3a4:	0000382d 	.word	0x0000382d
    c3a8:	20000b88 	.word	0x20000b88
    c3ac:	0000cbed 	.word	0x0000cbed

0000c3b0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c3b0:	b590      	push	{r4, r7, lr}
    c3b2:	b085      	sub	sp, #20
    c3b4:	af00      	add	r7, sp, #0
    c3b6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c3b8:	4b1f      	ldr	r3, [pc, #124]	; (c438 <usbdc_get_interface+0x88>)
    c3ba:	691b      	ldr	r3, [r3, #16]
    c3bc:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c3be:	4b1e      	ldr	r3, [pc, #120]	; (c438 <usbdc_get_interface+0x88>)
    c3c0:	7f5b      	ldrb	r3, [r3, #29]
    c3c2:	461a      	mov	r2, r3
    c3c4:	687b      	ldr	r3, [r7, #4]
    c3c6:	889b      	ldrh	r3, [r3, #4]
    c3c8:	b29b      	uxth	r3, r3
    c3ca:	fa42 f303 	asr.w	r3, r2, r3
    c3ce:	f003 0301 	and.w	r3, r3, #1
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d128      	bne.n	c428 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c3d6:	4b18      	ldr	r3, [pc, #96]	; (c438 <usbdc_get_interface+0x88>)
    c3d8:	695b      	ldr	r3, [r3, #20]
    c3da:	2200      	movs	r2, #0
    c3dc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c3de:	4b16      	ldr	r3, [pc, #88]	; (c438 <usbdc_get_interface+0x88>)
    c3e0:	6959      	ldr	r1, [r3, #20]
    c3e2:	2300      	movs	r3, #0
    c3e4:	2201      	movs	r2, #1
    c3e6:	2000      	movs	r0, #0
    c3e8:	4c14      	ldr	r4, [pc, #80]	; (c43c <usbdc_get_interface+0x8c>)
    c3ea:	47a0      	blx	r4
		return true;
    c3ec:	2301      	movs	r3, #1
    c3ee:	e01f      	b.n	c430 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c3f0:	68fb      	ldr	r3, [r7, #12]
    c3f2:	685b      	ldr	r3, [r3, #4]
    c3f4:	687a      	ldr	r2, [r7, #4]
    c3f6:	2102      	movs	r1, #2
    c3f8:	68f8      	ldr	r0, [r7, #12]
    c3fa:	4798      	blx	r3
    c3fc:	60b8      	str	r0, [r7, #8]
    c3fe:	68bb      	ldr	r3, [r7, #8]
    c400:	2b00      	cmp	r3, #0
    c402:	da03      	bge.n	c40c <usbdc_get_interface+0x5c>
			func = func->next;
    c404:	68fb      	ldr	r3, [r7, #12]
    c406:	681b      	ldr	r3, [r3, #0]
    c408:	60fb      	str	r3, [r7, #12]
    c40a:	e00d      	b.n	c428 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c40c:	4b0a      	ldr	r3, [pc, #40]	; (c438 <usbdc_get_interface+0x88>)
    c40e:	695b      	ldr	r3, [r3, #20]
    c410:	68ba      	ldr	r2, [r7, #8]
    c412:	b2d2      	uxtb	r2, r2
    c414:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c416:	4b08      	ldr	r3, [pc, #32]	; (c438 <usbdc_get_interface+0x88>)
    c418:	6959      	ldr	r1, [r3, #20]
    c41a:	2300      	movs	r3, #0
    c41c:	2201      	movs	r2, #1
    c41e:	2000      	movs	r0, #0
    c420:	4c06      	ldr	r4, [pc, #24]	; (c43c <usbdc_get_interface+0x8c>)
    c422:	47a0      	blx	r4
			return true;
    c424:	2301      	movs	r3, #1
    c426:	e003      	b.n	c430 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c428:	68fb      	ldr	r3, [r7, #12]
    c42a:	2b00      	cmp	r3, #0
    c42c:	d1e0      	bne.n	c3f0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c42e:	2300      	movs	r3, #0
}
    c430:	4618      	mov	r0, r3
    c432:	3714      	adds	r7, #20
    c434:	46bd      	mov	sp, r7
    c436:	bd90      	pop	{r4, r7, pc}
    c438:	20000b88 	.word	0x20000b88
    c43c:	0000cbed 	.word	0x0000cbed

0000c440 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c440:	b590      	push	{r4, r7, lr}
    c442:	b083      	sub	sp, #12
    c444:	af00      	add	r7, sp, #0
    c446:	4603      	mov	r3, r0
    c448:	6039      	str	r1, [r7, #0]
    c44a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c44c:	683b      	ldr	r3, [r7, #0]
    c44e:	785b      	ldrb	r3, [r3, #1]
    c450:	2b0a      	cmp	r3, #10
    c452:	d83a      	bhi.n	c4ca <usbdc_get_req+0x8a>
    c454:	a201      	add	r2, pc, #4	; (adr r2, c45c <usbdc_get_req+0x1c>)
    c456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c45a:	bf00      	nop
    c45c:	0000c4b3 	.word	0x0000c4b3
    c460:	0000c4cb 	.word	0x0000c4cb
    c464:	0000c4cb 	.word	0x0000c4cb
    c468:	0000c4cb 	.word	0x0000c4cb
    c46c:	0000c4cb 	.word	0x0000c4cb
    c470:	0000c4cb 	.word	0x0000c4cb
    c474:	0000c489 	.word	0x0000c489
    c478:	0000c4cb 	.word	0x0000c4cb
    c47c:	0000c497 	.word	0x0000c497
    c480:	0000c4cb 	.word	0x0000c4cb
    c484:	0000c4c1 	.word	0x0000c4c1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c488:	79fb      	ldrb	r3, [r7, #7]
    c48a:	6839      	ldr	r1, [r7, #0]
    c48c:	4618      	mov	r0, r3
    c48e:	4b11      	ldr	r3, [pc, #68]	; (c4d4 <usbdc_get_req+0x94>)
    c490:	4798      	blx	r3
    c492:	4603      	mov	r3, r0
    c494:	e01a      	b.n	c4cc <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c496:	4b10      	ldr	r3, [pc, #64]	; (c4d8 <usbdc_get_req+0x98>)
    c498:	695b      	ldr	r3, [r3, #20]
    c49a:	4a0f      	ldr	r2, [pc, #60]	; (c4d8 <usbdc_get_req+0x98>)
    c49c:	7ed2      	ldrb	r2, [r2, #27]
    c49e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c4a0:	4b0d      	ldr	r3, [pc, #52]	; (c4d8 <usbdc_get_req+0x98>)
    c4a2:	6959      	ldr	r1, [r3, #20]
    c4a4:	79f8      	ldrb	r0, [r7, #7]
    c4a6:	2300      	movs	r3, #0
    c4a8:	2201      	movs	r2, #1
    c4aa:	4c0c      	ldr	r4, [pc, #48]	; (c4dc <usbdc_get_req+0x9c>)
    c4ac:	47a0      	blx	r4
		return true;
    c4ae:	2301      	movs	r3, #1
    c4b0:	e00c      	b.n	c4cc <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c4b2:	79fb      	ldrb	r3, [r7, #7]
    c4b4:	6839      	ldr	r1, [r7, #0]
    c4b6:	4618      	mov	r0, r3
    c4b8:	4b09      	ldr	r3, [pc, #36]	; (c4e0 <usbdc_get_req+0xa0>)
    c4ba:	4798      	blx	r3
    c4bc:	4603      	mov	r3, r0
    c4be:	e005      	b.n	c4cc <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c4c0:	6838      	ldr	r0, [r7, #0]
    c4c2:	4b08      	ldr	r3, [pc, #32]	; (c4e4 <usbdc_get_req+0xa4>)
    c4c4:	4798      	blx	r3
    c4c6:	4603      	mov	r3, r0
    c4c8:	e000      	b.n	c4cc <usbdc_get_req+0x8c>
	default:
		return false;
    c4ca:	2300      	movs	r3, #0
	}
}
    c4cc:	4618      	mov	r0, r3
    c4ce:	370c      	adds	r7, #12
    c4d0:	46bd      	mov	sp, r7
    c4d2:	bd90      	pop	{r4, r7, pc}
    c4d4:	0000c2c9 	.word	0x0000c2c9
    c4d8:	20000b88 	.word	0x20000b88
    c4dc:	0000cbed 	.word	0x0000cbed
    c4e0:	0000c331 	.word	0x0000c331
    c4e4:	0000c3b1 	.word	0x0000c3b1

0000c4e8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c4e8:	b590      	push	{r4, r7, lr}
    c4ea:	b083      	sub	sp, #12
    c4ec:	af00      	add	r7, sp, #0
    c4ee:	4603      	mov	r3, r0
    c4f0:	6039      	str	r1, [r7, #0]
    c4f2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c4f4:	683b      	ldr	r3, [r7, #0]
    c4f6:	781b      	ldrb	r3, [r3, #0]
    c4f8:	f003 031f 	and.w	r3, r3, #31
    c4fc:	2b02      	cmp	r3, #2
    c4fe:	d116      	bne.n	c52e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c500:	683b      	ldr	r3, [r7, #0]
    c502:	88db      	ldrh	r3, [r3, #6]
    c504:	b29b      	uxth	r3, r3
    c506:	2b00      	cmp	r3, #0
    c508:	d001      	beq.n	c50e <usbdc_clear_ftr_req+0x26>
			return false;
    c50a:	2300      	movs	r3, #0
    c50c:	e010      	b.n	c530 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c50e:	683b      	ldr	r3, [r7, #0]
    c510:	889b      	ldrh	r3, [r3, #4]
    c512:	b29b      	uxth	r3, r3
    c514:	b2db      	uxtb	r3, r3
    c516:	2100      	movs	r1, #0
    c518:	4618      	mov	r0, r3
    c51a:	4b07      	ldr	r3, [pc, #28]	; (c538 <usbdc_clear_ftr_req+0x50>)
    c51c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c51e:	79f8      	ldrb	r0, [r7, #7]
    c520:	2301      	movs	r3, #1
    c522:	2200      	movs	r2, #0
    c524:	2100      	movs	r1, #0
    c526:	4c05      	ldr	r4, [pc, #20]	; (c53c <usbdc_clear_ftr_req+0x54>)
    c528:	47a0      	blx	r4
		return true;
    c52a:	2301      	movs	r3, #1
    c52c:	e000      	b.n	c530 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c52e:	2300      	movs	r3, #0
	}
}
    c530:	4618      	mov	r0, r3
    c532:	370c      	adds	r7, #12
    c534:	46bd      	mov	sp, r7
    c536:	bd90      	pop	{r4, r7, pc}
    c538:	0000382d 	.word	0x0000382d
    c53c:	0000cbed 	.word	0x0000cbed

0000c540 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c540:	b590      	push	{r4, r7, lr}
    c542:	b083      	sub	sp, #12
    c544:	af00      	add	r7, sp, #0
    c546:	4603      	mov	r3, r0
    c548:	6039      	str	r1, [r7, #0]
    c54a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c54c:	683b      	ldr	r3, [r7, #0]
    c54e:	781b      	ldrb	r3, [r3, #0]
    c550:	f003 031f 	and.w	r3, r3, #31
    c554:	2b02      	cmp	r3, #2
    c556:	d116      	bne.n	c586 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c558:	683b      	ldr	r3, [r7, #0]
    c55a:	88db      	ldrh	r3, [r3, #6]
    c55c:	b29b      	uxth	r3, r3
    c55e:	2b00      	cmp	r3, #0
    c560:	d001      	beq.n	c566 <usbdc_set_ftr_req+0x26>
			return false;
    c562:	2300      	movs	r3, #0
    c564:	e010      	b.n	c588 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c566:	683b      	ldr	r3, [r7, #0]
    c568:	889b      	ldrh	r3, [r3, #4]
    c56a:	b29b      	uxth	r3, r3
    c56c:	b2db      	uxtb	r3, r3
    c56e:	2101      	movs	r1, #1
    c570:	4618      	mov	r0, r3
    c572:	4b07      	ldr	r3, [pc, #28]	; (c590 <usbdc_set_ftr_req+0x50>)
    c574:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c576:	79f8      	ldrb	r0, [r7, #7]
    c578:	2301      	movs	r3, #1
    c57a:	2200      	movs	r2, #0
    c57c:	2100      	movs	r1, #0
    c57e:	4c05      	ldr	r4, [pc, #20]	; (c594 <usbdc_set_ftr_req+0x54>)
    c580:	47a0      	blx	r4
		return true;
    c582:	2301      	movs	r3, #1
    c584:	e000      	b.n	c588 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c586:	2300      	movs	r3, #0
	}
}
    c588:	4618      	mov	r0, r3
    c58a:	370c      	adds	r7, #12
    c58c:	46bd      	mov	sp, r7
    c58e:	bd90      	pop	{r4, r7, pc}
    c590:	0000382d 	.word	0x0000382d
    c594:	0000cbed 	.word	0x0000cbed

0000c598 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c598:	b580      	push	{r7, lr}
    c59a:	b082      	sub	sp, #8
    c59c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c59e:	4b0a      	ldr	r3, [pc, #40]	; (c5c8 <usbdc_unconfig+0x30>)
    c5a0:	691b      	ldr	r3, [r3, #16]
    c5a2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c5a4:	e008      	b.n	c5b8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c5a6:	687b      	ldr	r3, [r7, #4]
    c5a8:	685b      	ldr	r3, [r3, #4]
    c5aa:	2200      	movs	r2, #0
    c5ac:	2101      	movs	r1, #1
    c5ae:	6878      	ldr	r0, [r7, #4]
    c5b0:	4798      	blx	r3
		func = func->next;
    c5b2:	687b      	ldr	r3, [r7, #4]
    c5b4:	681b      	ldr	r3, [r3, #0]
    c5b6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c5b8:	687b      	ldr	r3, [r7, #4]
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d1f3      	bne.n	c5a6 <usbdc_unconfig+0xe>
	}
}
    c5be:	bf00      	nop
    c5c0:	3708      	adds	r7, #8
    c5c2:	46bd      	mov	sp, r7
    c5c4:	bd80      	pop	{r7, pc}
    c5c6:	bf00      	nop
    c5c8:	20000b88 	.word	0x20000b88

0000c5cc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c5cc:	b580      	push	{r7, lr}
    c5ce:	b088      	sub	sp, #32
    c5d0:	af00      	add	r7, sp, #0
    c5d2:	4603      	mov	r3, r0
    c5d4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c5d6:	2300      	movs	r3, #0
    c5d8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c5da:	23ff      	movs	r3, #255	; 0xff
    c5dc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c5de:	79fb      	ldrb	r3, [r7, #7]
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	d103      	bne.n	c5ec <usbdc_set_config+0x20>
		usbdc_unconfig();
    c5e4:	4b2e      	ldr	r3, [pc, #184]	; (c6a0 <usbdc_set_config+0xd4>)
    c5e6:	4798      	blx	r3
		return true;
    c5e8:	2301      	movs	r3, #1
    c5ea:	e055      	b.n	c698 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c5ec:	69bb      	ldr	r3, [r7, #24]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d10a      	bne.n	c608 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c5f2:	4b2c      	ldr	r3, [pc, #176]	; (c6a4 <usbdc_set_config+0xd8>)
    c5f4:	681b      	ldr	r3, [r3, #0]
    c5f6:	6818      	ldr	r0, [r3, #0]
    c5f8:	4b2a      	ldr	r3, [pc, #168]	; (c6a4 <usbdc_set_config+0xd8>)
    c5fa:	681b      	ldr	r3, [r3, #0]
    c5fc:	685b      	ldr	r3, [r3, #4]
    c5fe:	79fa      	ldrb	r2, [r7, #7]
    c600:	4619      	mov	r1, r3
    c602:	4b29      	ldr	r3, [pc, #164]	; (c6a8 <usbdc_set_config+0xdc>)
    c604:	4798      	blx	r3
    c606:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c608:	69bb      	ldr	r3, [r7, #24]
    c60a:	2b00      	cmp	r3, #0
    c60c:	d101      	bne.n	c612 <usbdc_set_config+0x46>
		return false;
    c60e:	2300      	movs	r3, #0
    c610:	e042      	b.n	c698 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c612:	69b8      	ldr	r0, [r7, #24]
    c614:	4b25      	ldr	r3, [pc, #148]	; (c6ac <usbdc_set_config+0xe0>)
    c616:	4798      	blx	r3
    c618:	4603      	mov	r3, r0
    c61a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c61c:	8abb      	ldrh	r3, [r7, #20]
    c61e:	69ba      	ldr	r2, [r7, #24]
    c620:	4413      	add	r3, r2
    c622:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c624:	693b      	ldr	r3, [r7, #16]
    c626:	2204      	movs	r2, #4
    c628:	4619      	mov	r1, r3
    c62a:	69b8      	ldr	r0, [r7, #24]
    c62c:	4b20      	ldr	r3, [pc, #128]	; (c6b0 <usbdc_set_config+0xe4>)
    c62e:	4798      	blx	r3
    c630:	4603      	mov	r3, r0
    c632:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c634:	e02c      	b.n	c690 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c636:	68fb      	ldr	r3, [r7, #12]
    c638:	3302      	adds	r3, #2
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	7dfa      	ldrb	r2, [r7, #23]
    c63e:	429a      	cmp	r2, r3
    c640:	d018      	beq.n	c674 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c642:	68fb      	ldr	r3, [r7, #12]
    c644:	789b      	ldrb	r3, [r3, #2]
    c646:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c648:	4b16      	ldr	r3, [pc, #88]	; (c6a4 <usbdc_set_config+0xd8>)
    c64a:	691b      	ldr	r3, [r3, #16]
    c64c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c64e:	e00c      	b.n	c66a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c650:	69fb      	ldr	r3, [r7, #28]
    c652:	685b      	ldr	r3, [r3, #4]
    c654:	f107 020c 	add.w	r2, r7, #12
    c658:	2100      	movs	r1, #0
    c65a:	69f8      	ldr	r0, [r7, #28]
    c65c:	4798      	blx	r3
    c65e:	4603      	mov	r3, r0
    c660:	2b00      	cmp	r3, #0
    c662:	d006      	beq.n	c672 <usbdc_set_config+0xa6>
					func = func->next;
    c664:	69fb      	ldr	r3, [r7, #28]
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c66a:	69fb      	ldr	r3, [r7, #28]
    c66c:	2b00      	cmp	r3, #0
    c66e:	d1ef      	bne.n	c650 <usbdc_set_config+0x84>
    c670:	e000      	b.n	c674 <usbdc_set_config+0xa8>
				} else {
					break;
    c672:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c674:	68fb      	ldr	r3, [r7, #12]
    c676:	4618      	mov	r0, r3
    c678:	4b0e      	ldr	r3, [pc, #56]	; (c6b4 <usbdc_set_config+0xe8>)
    c67a:	4798      	blx	r3
    c67c:	4603      	mov	r3, r0
    c67e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c680:	68fb      	ldr	r3, [r7, #12]
    c682:	6939      	ldr	r1, [r7, #16]
    c684:	2204      	movs	r2, #4
    c686:	4618      	mov	r0, r3
    c688:	4b09      	ldr	r3, [pc, #36]	; (c6b0 <usbdc_set_config+0xe4>)
    c68a:	4798      	blx	r3
    c68c:	4603      	mov	r3, r0
    c68e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c690:	68fb      	ldr	r3, [r7, #12]
    c692:	2b00      	cmp	r3, #0
    c694:	d1cf      	bne.n	c636 <usbdc_set_config+0x6a>
	}
	return true;
    c696:	2301      	movs	r3, #1
}
    c698:	4618      	mov	r0, r3
    c69a:	3720      	adds	r7, #32
    c69c:	46bd      	mov	sp, r7
    c69e:	bd80      	pop	{r7, pc}
    c6a0:	0000c599 	.word	0x0000c599
    c6a4:	20000b88 	.word	0x20000b88
    c6a8:	0000cf3d 	.word	0x0000cf3d
    c6ac:	0000c0e9 	.word	0x0000c0e9
    c6b0:	0000ce7d 	.word	0x0000ce7d
    c6b4:	0000c0c5 	.word	0x0000c0c5

0000c6b8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c6b8:	b580      	push	{r7, lr}
    c6ba:	b082      	sub	sp, #8
    c6bc:	af00      	add	r7, sp, #0
    c6be:	4603      	mov	r3, r0
    c6c0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c6c2:	79fb      	ldrb	r3, [r7, #7]
    c6c4:	4618      	mov	r0, r3
    c6c6:	4b03      	ldr	r3, [pc, #12]	; (c6d4 <usbdc_set_address+0x1c>)
    c6c8:	4798      	blx	r3
}
    c6ca:	bf00      	nop
    c6cc:	3708      	adds	r7, #8
    c6ce:	46bd      	mov	sp, r7
    c6d0:	bd80      	pop	{r7, pc}
    c6d2:	bf00      	nop
    c6d4:	00003449 	.word	0x00003449

0000c6d8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c6d8:	b590      	push	{r4, r7, lr}
    c6da:	b087      	sub	sp, #28
    c6dc:	af00      	add	r7, sp, #0
    c6de:	4603      	mov	r3, r0
    c6e0:	460a      	mov	r2, r1
    c6e2:	80fb      	strh	r3, [r7, #6]
    c6e4:	4613      	mov	r3, r2
    c6e6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c6e8:	2300      	movs	r3, #0
    c6ea:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c6ec:	693b      	ldr	r3, [r7, #16]
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d10b      	bne.n	c70a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c6f2:	4b43      	ldr	r3, [pc, #268]	; (c800 <usbdc_set_interface+0x128>)
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	6818      	ldr	r0, [r3, #0]
    c6f8:	4b41      	ldr	r3, [pc, #260]	; (c800 <usbdc_set_interface+0x128>)
    c6fa:	681b      	ldr	r3, [r3, #0]
    c6fc:	6859      	ldr	r1, [r3, #4]
    c6fe:	4b40      	ldr	r3, [pc, #256]	; (c800 <usbdc_set_interface+0x128>)
    c700:	7edb      	ldrb	r3, [r3, #27]
    c702:	461a      	mov	r2, r3
    c704:	4b3f      	ldr	r3, [pc, #252]	; (c804 <usbdc_set_interface+0x12c>)
    c706:	4798      	blx	r3
    c708:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c70a:	693b      	ldr	r3, [r7, #16]
    c70c:	2b00      	cmp	r3, #0
    c70e:	d101      	bne.n	c714 <usbdc_set_interface+0x3c>
		return false;
    c710:	2300      	movs	r3, #0
    c712:	e071      	b.n	c7f8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c714:	693b      	ldr	r3, [r7, #16]
    c716:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c718:	6938      	ldr	r0, [r7, #16]
    c71a:	4b3b      	ldr	r3, [pc, #236]	; (c808 <usbdc_set_interface+0x130>)
    c71c:	4798      	blx	r3
    c71e:	4603      	mov	r3, r0
    c720:	461a      	mov	r2, r3
    c722:	693b      	ldr	r3, [r7, #16]
    c724:	4413      	add	r3, r2
    c726:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c728:	68bb      	ldr	r3, [r7, #8]
    c72a:	68f9      	ldr	r1, [r7, #12]
    c72c:	2204      	movs	r2, #4
    c72e:	4618      	mov	r0, r3
    c730:	4b36      	ldr	r3, [pc, #216]	; (c80c <usbdc_set_interface+0x134>)
    c732:	4798      	blx	r3
    c734:	6138      	str	r0, [r7, #16]
    c736:	693b      	ldr	r3, [r7, #16]
    c738:	2b00      	cmp	r3, #0
    c73a:	d113      	bne.n	c764 <usbdc_set_interface+0x8c>
		return false;
    c73c:	2300      	movs	r3, #0
    c73e:	e05b      	b.n	c7f8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c740:	68bb      	ldr	r3, [r7, #8]
    c742:	4618      	mov	r0, r3
    c744:	4b32      	ldr	r3, [pc, #200]	; (c810 <usbdc_set_interface+0x138>)
    c746:	4798      	blx	r3
    c748:	4603      	mov	r3, r0
    c74a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c74c:	68bb      	ldr	r3, [r7, #8]
    c74e:	68f9      	ldr	r1, [r7, #12]
    c750:	2204      	movs	r2, #4
    c752:	4618      	mov	r0, r3
    c754:	4b2d      	ldr	r3, [pc, #180]	; (c80c <usbdc_set_interface+0x134>)
    c756:	4798      	blx	r3
    c758:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c75a:	693b      	ldr	r3, [r7, #16]
    c75c:	2b00      	cmp	r3, #0
    c75e:	d101      	bne.n	c764 <usbdc_set_interface+0x8c>
			return false;
    c760:	2300      	movs	r3, #0
    c762:	e049      	b.n	c7f8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c764:	693b      	ldr	r3, [r7, #16]
    c766:	3302      	adds	r3, #2
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	b29b      	uxth	r3, r3
    c76c:	88ba      	ldrh	r2, [r7, #4]
    c76e:	429a      	cmp	r2, r3
    c770:	d1e6      	bne.n	c740 <usbdc_set_interface+0x68>
    c772:	693b      	ldr	r3, [r7, #16]
    c774:	3303      	adds	r3, #3
    c776:	781b      	ldrb	r3, [r3, #0]
    c778:	b29b      	uxth	r3, r3
    c77a:	88fa      	ldrh	r2, [r7, #6]
    c77c:	429a      	cmp	r2, r3
    c77e:	d1df      	bne.n	c740 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c780:	693b      	ldr	r3, [r7, #16]
    c782:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c784:	4b1e      	ldr	r3, [pc, #120]	; (c800 <usbdc_set_interface+0x128>)
    c786:	691b      	ldr	r3, [r3, #16]
    c788:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c78a:	e031      	b.n	c7f0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c78c:	697b      	ldr	r3, [r7, #20]
    c78e:	685b      	ldr	r3, [r3, #4]
    c790:	f107 0208 	add.w	r2, r7, #8
    c794:	2101      	movs	r1, #1
    c796:	6978      	ldr	r0, [r7, #20]
    c798:	4798      	blx	r3
    c79a:	4603      	mov	r3, r0
    c79c:	2b00      	cmp	r3, #0
    c79e:	d003      	beq.n	c7a8 <usbdc_set_interface+0xd0>
			func = func->next;
    c7a0:	697b      	ldr	r3, [r7, #20]
    c7a2:	681b      	ldr	r3, [r3, #0]
    c7a4:	617b      	str	r3, [r7, #20]
    c7a6:	e023      	b.n	c7f0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c7a8:	697b      	ldr	r3, [r7, #20]
    c7aa:	685b      	ldr	r3, [r3, #4]
    c7ac:	f107 0208 	add.w	r2, r7, #8
    c7b0:	2100      	movs	r1, #0
    c7b2:	6978      	ldr	r0, [r7, #20]
    c7b4:	4798      	blx	r3
    c7b6:	4603      	mov	r3, r0
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d117      	bne.n	c7ec <usbdc_set_interface+0x114>
			if (alt_set) {
    c7bc:	88fb      	ldrh	r3, [r7, #6]
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d00c      	beq.n	c7dc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c7c2:	4b0f      	ldr	r3, [pc, #60]	; (c800 <usbdc_set_interface+0x128>)
    c7c4:	7f5b      	ldrb	r3, [r3, #29]
    c7c6:	b25a      	sxtb	r2, r3
    c7c8:	88bb      	ldrh	r3, [r7, #4]
    c7ca:	2101      	movs	r1, #1
    c7cc:	fa01 f303 	lsl.w	r3, r1, r3
    c7d0:	b25b      	sxtb	r3, r3
    c7d2:	4313      	orrs	r3, r2
    c7d4:	b25b      	sxtb	r3, r3
    c7d6:	b2da      	uxtb	r2, r3
    c7d8:	4b09      	ldr	r3, [pc, #36]	; (c800 <usbdc_set_interface+0x128>)
    c7da:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c7dc:	2300      	movs	r3, #0
    c7de:	2200      	movs	r2, #0
    c7e0:	2100      	movs	r1, #0
    c7e2:	2000      	movs	r0, #0
    c7e4:	4c0b      	ldr	r4, [pc, #44]	; (c814 <usbdc_set_interface+0x13c>)
    c7e6:	47a0      	blx	r4
			return true;
    c7e8:	2301      	movs	r3, #1
    c7ea:	e005      	b.n	c7f8 <usbdc_set_interface+0x120>
		} else {
			return false;
    c7ec:	2300      	movs	r3, #0
    c7ee:	e003      	b.n	c7f8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c7f0:	697b      	ldr	r3, [r7, #20]
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d1ca      	bne.n	c78c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c7f6:	2300      	movs	r3, #0
}
    c7f8:	4618      	mov	r0, r3
    c7fa:	371c      	adds	r7, #28
    c7fc:	46bd      	mov	sp, r7
    c7fe:	bd90      	pop	{r4, r7, pc}
    c800:	20000b88 	.word	0x20000b88
    c804:	0000cf3d 	.word	0x0000cf3d
    c808:	0000c0e9 	.word	0x0000c0e9
    c80c:	0000ce7d 	.word	0x0000ce7d
    c810:	0000c0c5 	.word	0x0000c0c5
    c814:	0000cbed 	.word	0x0000cbed

0000c818 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c818:	b590      	push	{r4, r7, lr}
    c81a:	b083      	sub	sp, #12
    c81c:	af00      	add	r7, sp, #0
    c81e:	4603      	mov	r3, r0
    c820:	6039      	str	r1, [r7, #0]
    c822:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c824:	683b      	ldr	r3, [r7, #0]
    c826:	785b      	ldrb	r3, [r3, #1]
    c828:	3b01      	subs	r3, #1
    c82a:	2b0a      	cmp	r3, #10
    c82c:	d85b      	bhi.n	c8e6 <usbdc_set_req+0xce>
    c82e:	a201      	add	r2, pc, #4	; (adr r2, c834 <usbdc_set_req+0x1c>)
    c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c834:	0000c8b3 	.word	0x0000c8b3
    c838:	0000c8e7 	.word	0x0000c8e7
    c83c:	0000c8c1 	.word	0x0000c8c1
    c840:	0000c8e7 	.word	0x0000c8e7
    c844:	0000c861 	.word	0x0000c861
    c848:	0000c8e7 	.word	0x0000c8e7
    c84c:	0000c8e7 	.word	0x0000c8e7
    c850:	0000c8e7 	.word	0x0000c8e7
    c854:	0000c87b 	.word	0x0000c87b
    c858:	0000c8e7 	.word	0x0000c8e7
    c85c:	0000c8cf 	.word	0x0000c8cf
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c860:	79f8      	ldrb	r0, [r7, #7]
    c862:	2301      	movs	r3, #1
    c864:	2200      	movs	r2, #0
    c866:	2100      	movs	r1, #0
    c868:	4c21      	ldr	r4, [pc, #132]	; (c8f0 <usbdc_set_req+0xd8>)
    c86a:	47a0      	blx	r4
    c86c:	4603      	mov	r3, r0
    c86e:	2b00      	cmp	r3, #0
    c870:	bf0c      	ite	eq
    c872:	2301      	moveq	r3, #1
    c874:	2300      	movne	r3, #0
    c876:	b2db      	uxtb	r3, r3
    c878:	e036      	b.n	c8e8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c87a:	683b      	ldr	r3, [r7, #0]
    c87c:	885b      	ldrh	r3, [r3, #2]
    c87e:	b29b      	uxth	r3, r3
    c880:	b2db      	uxtb	r3, r3
    c882:	4618      	mov	r0, r3
    c884:	4b1b      	ldr	r3, [pc, #108]	; (c8f4 <usbdc_set_req+0xdc>)
    c886:	4798      	blx	r3
    c888:	4603      	mov	r3, r0
    c88a:	f083 0301 	eor.w	r3, r3, #1
    c88e:	b2db      	uxtb	r3, r3
    c890:	2b00      	cmp	r3, #0
    c892:	d001      	beq.n	c898 <usbdc_set_req+0x80>
			return false;
    c894:	2300      	movs	r3, #0
    c896:	e027      	b.n	c8e8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c898:	79f8      	ldrb	r0, [r7, #7]
    c89a:	2301      	movs	r3, #1
    c89c:	2200      	movs	r2, #0
    c89e:	2100      	movs	r1, #0
    c8a0:	4c13      	ldr	r4, [pc, #76]	; (c8f0 <usbdc_set_req+0xd8>)
    c8a2:	47a0      	blx	r4
    c8a4:	4603      	mov	r3, r0
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	bf0c      	ite	eq
    c8aa:	2301      	moveq	r3, #1
    c8ac:	2300      	movne	r3, #0
    c8ae:	b2db      	uxtb	r3, r3
    c8b0:	e01a      	b.n	c8e8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c8b2:	79fb      	ldrb	r3, [r7, #7]
    c8b4:	6839      	ldr	r1, [r7, #0]
    c8b6:	4618      	mov	r0, r3
    c8b8:	4b0f      	ldr	r3, [pc, #60]	; (c8f8 <usbdc_set_req+0xe0>)
    c8ba:	4798      	blx	r3
    c8bc:	4603      	mov	r3, r0
    c8be:	e013      	b.n	c8e8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c8c0:	79fb      	ldrb	r3, [r7, #7]
    c8c2:	6839      	ldr	r1, [r7, #0]
    c8c4:	4618      	mov	r0, r3
    c8c6:	4b0d      	ldr	r3, [pc, #52]	; (c8fc <usbdc_set_req+0xe4>)
    c8c8:	4798      	blx	r3
    c8ca:	4603      	mov	r3, r0
    c8cc:	e00c      	b.n	c8e8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c8ce:	683b      	ldr	r3, [r7, #0]
    c8d0:	885b      	ldrh	r3, [r3, #2]
    c8d2:	b29a      	uxth	r2, r3
    c8d4:	683b      	ldr	r3, [r7, #0]
    c8d6:	889b      	ldrh	r3, [r3, #4]
    c8d8:	b29b      	uxth	r3, r3
    c8da:	4619      	mov	r1, r3
    c8dc:	4610      	mov	r0, r2
    c8de:	4b08      	ldr	r3, [pc, #32]	; (c900 <usbdc_set_req+0xe8>)
    c8e0:	4798      	blx	r3
    c8e2:	4603      	mov	r3, r0
    c8e4:	e000      	b.n	c8e8 <usbdc_set_req+0xd0>
	default:
		return false;
    c8e6:	2300      	movs	r3, #0
	}
}
    c8e8:	4618      	mov	r0, r3
    c8ea:	370c      	adds	r7, #12
    c8ec:	46bd      	mov	sp, r7
    c8ee:	bd90      	pop	{r4, r7, pc}
    c8f0:	0000cbed 	.word	0x0000cbed
    c8f4:	0000c5cd 	.word	0x0000c5cd
    c8f8:	0000c4e9 	.word	0x0000c4e9
    c8fc:	0000c541 	.word	0x0000c541
    c900:	0000c6d9 	.word	0x0000c6d9

0000c904 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c904:	b580      	push	{r7, lr}
    c906:	b082      	sub	sp, #8
    c908:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c90a:	4b0a      	ldr	r3, [pc, #40]	; (c934 <usbdc_sof_notify+0x30>)
    c90c:	685b      	ldr	r3, [r3, #4]
    c90e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c910:	e009      	b.n	c926 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c912:	687b      	ldr	r3, [r7, #4]
    c914:	685b      	ldr	r3, [r3, #4]
    c916:	2b00      	cmp	r3, #0
    c918:	d002      	beq.n	c920 <usbdc_sof_notify+0x1c>
			sof->cb();
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	685b      	ldr	r3, [r3, #4]
    c91e:	4798      	blx	r3
		}
		sof = sof->next;
    c920:	687b      	ldr	r3, [r7, #4]
    c922:	681b      	ldr	r3, [r3, #0]
    c924:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c926:	687b      	ldr	r3, [r7, #4]
    c928:	2b00      	cmp	r3, #0
    c92a:	d1f2      	bne.n	c912 <usbdc_sof_notify+0xe>
	}
}
    c92c:	bf00      	nop
    c92e:	3708      	adds	r7, #8
    c930:	46bd      	mov	sp, r7
    c932:	bd80      	pop	{r7, pc}
    c934:	20000b88 	.word	0x20000b88

0000c938 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c938:	b580      	push	{r7, lr}
    c93a:	b084      	sub	sp, #16
    c93c:	af00      	add	r7, sp, #0
    c93e:	4603      	mov	r3, r0
    c940:	6039      	str	r1, [r7, #0]
    c942:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c944:	4b0b      	ldr	r3, [pc, #44]	; (c974 <usbdc_change_notify+0x3c>)
    c946:	68db      	ldr	r3, [r3, #12]
    c948:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c94a:	e00c      	b.n	c966 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c94c:	68fb      	ldr	r3, [r7, #12]
    c94e:	685b      	ldr	r3, [r3, #4]
    c950:	2b00      	cmp	r3, #0
    c952:	d005      	beq.n	c960 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c954:	68fb      	ldr	r3, [r7, #12]
    c956:	685b      	ldr	r3, [r3, #4]
    c958:	79fa      	ldrb	r2, [r7, #7]
    c95a:	6839      	ldr	r1, [r7, #0]
    c95c:	4610      	mov	r0, r2
    c95e:	4798      	blx	r3
		}
		cg = cg->next;
    c960:	68fb      	ldr	r3, [r7, #12]
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c966:	68fb      	ldr	r3, [r7, #12]
    c968:	2b00      	cmp	r3, #0
    c96a:	d1ef      	bne.n	c94c <usbdc_change_notify+0x14>
	}
}
    c96c:	bf00      	nop
    c96e:	3710      	adds	r7, #16
    c970:	46bd      	mov	sp, r7
    c972:	bd80      	pop	{r7, pc}
    c974:	20000b88 	.word	0x20000b88

0000c978 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c978:	b580      	push	{r7, lr}
    c97a:	b084      	sub	sp, #16
    c97c:	af00      	add	r7, sp, #0
    c97e:	4603      	mov	r3, r0
    c980:	6039      	str	r1, [r7, #0]
    c982:	71fb      	strb	r3, [r7, #7]
    c984:	4613      	mov	r3, r2
    c986:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c988:	4b12      	ldr	r3, [pc, #72]	; (c9d4 <usbdc_request_handler+0x5c>)
    c98a:	689b      	ldr	r3, [r3, #8]
    c98c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c98e:	e019      	b.n	c9c4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c990:	68fb      	ldr	r3, [r7, #12]
    c992:	685b      	ldr	r3, [r3, #4]
    c994:	2b00      	cmp	r3, #0
    c996:	d012      	beq.n	c9be <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c998:	68fb      	ldr	r3, [r7, #12]
    c99a:	685b      	ldr	r3, [r3, #4]
    c99c:	79ba      	ldrb	r2, [r7, #6]
    c99e:	79f8      	ldrb	r0, [r7, #7]
    c9a0:	6839      	ldr	r1, [r7, #0]
    c9a2:	4798      	blx	r3
    c9a4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c9a6:	68bb      	ldr	r3, [r7, #8]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d101      	bne.n	c9b0 <usbdc_request_handler+0x38>
				return true;
    c9ac:	2301      	movs	r3, #1
    c9ae:	e00d      	b.n	c9cc <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c9b0:	68bb      	ldr	r3, [r7, #8]
    c9b2:	f113 0f0a 	cmn.w	r3, #10
    c9b6:	d002      	beq.n	c9be <usbdc_request_handler+0x46>
				return -1;
    c9b8:	f04f 33ff 	mov.w	r3, #4294967295
    c9bc:	e006      	b.n	c9cc <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c9be:	68fb      	ldr	r3, [r7, #12]
    c9c0:	681b      	ldr	r3, [r3, #0]
    c9c2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c9c4:	68fb      	ldr	r3, [r7, #12]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d1e2      	bne.n	c990 <usbdc_request_handler+0x18>
	}
	return false;
    c9ca:	2300      	movs	r3, #0
}
    c9cc:	4618      	mov	r0, r3
    c9ce:	3710      	adds	r7, #16
    c9d0:	46bd      	mov	sp, r7
    c9d2:	bd80      	pop	{r7, pc}
    c9d4:	20000b88 	.word	0x20000b88

0000c9d8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c9d8:	b580      	push	{r7, lr}
    c9da:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c9dc:	4b01      	ldr	r3, [pc, #4]	; (c9e4 <usbd_sof_cb+0xc>)
    c9de:	4798      	blx	r3
}
    c9e0:	bf00      	nop
    c9e2:	bd80      	pop	{r7, pc}
    c9e4:	0000c905 	.word	0x0000c905

0000c9e8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c9e8:	b580      	push	{r7, lr}
    c9ea:	b082      	sub	sp, #8
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	4603      	mov	r3, r0
    c9f0:	6039      	str	r1, [r7, #0]
    c9f2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c9f4:	79fb      	ldrb	r3, [r7, #7]
    c9f6:	2200      	movs	r2, #0
    c9f8:	6839      	ldr	r1, [r7, #0]
    c9fa:	4618      	mov	r0, r3
    c9fc:	4b14      	ldr	r3, [pc, #80]	; (ca50 <usbdc_cb_ctl_req+0x68>)
    c9fe:	4798      	blx	r3
    ca00:	4603      	mov	r3, r0
    ca02:	f1b3 3fff 	cmp.w	r3, #4294967295
    ca06:	d00b      	beq.n	ca20 <usbdc_cb_ctl_req+0x38>
    ca08:	2b01      	cmp	r3, #1
    ca0a:	d007      	beq.n	ca1c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ca0c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ca0e:	683b      	ldr	r3, [r7, #0]
    ca10:	781b      	ldrb	r3, [r3, #0]
    ca12:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ca16:	2b00      	cmp	r3, #0
    ca18:	d007      	beq.n	ca2a <usbdc_cb_ctl_req+0x42>
    ca1a:	e003      	b.n	ca24 <usbdc_cb_ctl_req+0x3c>
		return true;
    ca1c:	2301      	movs	r3, #1
    ca1e:	e013      	b.n	ca48 <usbdc_cb_ctl_req+0x60>
		return false;
    ca20:	2300      	movs	r3, #0
    ca22:	e011      	b.n	ca48 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ca24:	2b80      	cmp	r3, #128	; 0x80
    ca26:	d007      	beq.n	ca38 <usbdc_cb_ctl_req+0x50>
    ca28:	e00d      	b.n	ca46 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ca2a:	79fb      	ldrb	r3, [r7, #7]
    ca2c:	6839      	ldr	r1, [r7, #0]
    ca2e:	4618      	mov	r0, r3
    ca30:	4b08      	ldr	r3, [pc, #32]	; (ca54 <usbdc_cb_ctl_req+0x6c>)
    ca32:	4798      	blx	r3
    ca34:	4603      	mov	r3, r0
    ca36:	e007      	b.n	ca48 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    ca38:	79fb      	ldrb	r3, [r7, #7]
    ca3a:	6839      	ldr	r1, [r7, #0]
    ca3c:	4618      	mov	r0, r3
    ca3e:	4b06      	ldr	r3, [pc, #24]	; (ca58 <usbdc_cb_ctl_req+0x70>)
    ca40:	4798      	blx	r3
    ca42:	4603      	mov	r3, r0
    ca44:	e000      	b.n	ca48 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ca46:	2300      	movs	r3, #0
	}
}
    ca48:	4618      	mov	r0, r3
    ca4a:	3708      	adds	r7, #8
    ca4c:	46bd      	mov	sp, r7
    ca4e:	bd80      	pop	{r7, pc}
    ca50:	0000c979 	.word	0x0000c979
    ca54:	0000c819 	.word	0x0000c819
    ca58:	0000c441 	.word	0x0000c441

0000ca5c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	b082      	sub	sp, #8
    ca60:	af00      	add	r7, sp, #0
    ca62:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    ca64:	687b      	ldr	r3, [r7, #4]
    ca66:	781b      	ldrb	r3, [r3, #0]
    ca68:	2b00      	cmp	r3, #0
    ca6a:	d135      	bne.n	cad8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	785b      	ldrb	r3, [r3, #1]
    ca70:	2b05      	cmp	r3, #5
    ca72:	d019      	beq.n	caa8 <usbdc_ctrl_status_end+0x4c>
    ca74:	2b09      	cmp	r3, #9
    ca76:	d000      	beq.n	ca7a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    ca78:	e02f      	b.n	cada <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    ca7a:	687b      	ldr	r3, [r7, #4]
    ca7c:	885b      	ldrh	r3, [r3, #2]
    ca7e:	b29b      	uxth	r3, r3
    ca80:	b2da      	uxtb	r2, r3
    ca82:	4b17      	ldr	r3, [pc, #92]	; (cae0 <usbdc_ctrl_status_end+0x84>)
    ca84:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	885b      	ldrh	r3, [r3, #2]
    ca8a:	b29b      	uxth	r3, r3
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d001      	beq.n	ca94 <usbdc_ctrl_status_end+0x38>
    ca90:	2204      	movs	r2, #4
    ca92:	e000      	b.n	ca96 <usbdc_ctrl_status_end+0x3a>
    ca94:	2203      	movs	r2, #3
    ca96:	4b12      	ldr	r3, [pc, #72]	; (cae0 <usbdc_ctrl_status_end+0x84>)
    ca98:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ca9a:	4b11      	ldr	r3, [pc, #68]	; (cae0 <usbdc_ctrl_status_end+0x84>)
    ca9c:	7e9b      	ldrb	r3, [r3, #26]
    ca9e:	4619      	mov	r1, r3
    caa0:	2001      	movs	r0, #1
    caa2:	4b10      	ldr	r3, [pc, #64]	; (cae4 <usbdc_ctrl_status_end+0x88>)
    caa4:	4798      	blx	r3
		break;
    caa6:	e018      	b.n	cada <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    caa8:	687b      	ldr	r3, [r7, #4]
    caaa:	885b      	ldrh	r3, [r3, #2]
    caac:	b29b      	uxth	r3, r3
    caae:	b2db      	uxtb	r3, r3
    cab0:	4618      	mov	r0, r3
    cab2:	4b0d      	ldr	r3, [pc, #52]	; (cae8 <usbdc_ctrl_status_end+0x8c>)
    cab4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	885b      	ldrh	r3, [r3, #2]
    caba:	b29b      	uxth	r3, r3
    cabc:	2b00      	cmp	r3, #0
    cabe:	d001      	beq.n	cac4 <usbdc_ctrl_status_end+0x68>
    cac0:	2203      	movs	r2, #3
    cac2:	e000      	b.n	cac6 <usbdc_ctrl_status_end+0x6a>
    cac4:	2202      	movs	r2, #2
    cac6:	4b06      	ldr	r3, [pc, #24]	; (cae0 <usbdc_ctrl_status_end+0x84>)
    cac8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    caca:	4b05      	ldr	r3, [pc, #20]	; (cae0 <usbdc_ctrl_status_end+0x84>)
    cacc:	7e9b      	ldrb	r3, [r3, #26]
    cace:	4619      	mov	r1, r3
    cad0:	2001      	movs	r0, #1
    cad2:	4b04      	ldr	r3, [pc, #16]	; (cae4 <usbdc_ctrl_status_end+0x88>)
    cad4:	4798      	blx	r3
		break;
    cad6:	e000      	b.n	cada <usbdc_ctrl_status_end+0x7e>
		return;
    cad8:	bf00      	nop
	}
}
    cada:	3708      	adds	r7, #8
    cadc:	46bd      	mov	sp, r7
    cade:	bd80      	pop	{r7, pc}
    cae0:	20000b88 	.word	0x20000b88
    cae4:	0000c939 	.word	0x0000c939
    cae8:	0000c6b9 	.word	0x0000c6b9

0000caec <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    caec:	b580      	push	{r7, lr}
    caee:	b082      	sub	sp, #8
    caf0:	af00      	add	r7, sp, #0
    caf2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    caf4:	2201      	movs	r2, #1
    caf6:	6879      	ldr	r1, [r7, #4]
    caf8:	2000      	movs	r0, #0
    cafa:	4b03      	ldr	r3, [pc, #12]	; (cb08 <usbdc_ctrl_data_end+0x1c>)
    cafc:	4798      	blx	r3
	return false;
    cafe:	2300      	movs	r3, #0
}
    cb00:	4618      	mov	r0, r3
    cb02:	3708      	adds	r7, #8
    cb04:	46bd      	mov	sp, r7
    cb06:	bd80      	pop	{r7, pc}
    cb08:	0000c979 	.word	0x0000c979

0000cb0c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cb0c:	b580      	push	{r7, lr}
    cb0e:	b082      	sub	sp, #8
    cb10:	af00      	add	r7, sp, #0
    cb12:	4603      	mov	r3, r0
    cb14:	603a      	str	r2, [r7, #0]
    cb16:	71fb      	strb	r3, [r7, #7]
    cb18:	460b      	mov	r3, r1
    cb1a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cb1c:	79bb      	ldrb	r3, [r7, #6]
    cb1e:	2b00      	cmp	r3, #0
    cb20:	d002      	beq.n	cb28 <usbdc_cb_ctl_done+0x1c>
    cb22:	2b01      	cmp	r3, #1
    cb24:	d004      	beq.n	cb30 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cb26:	e008      	b.n	cb3a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cb28:	6838      	ldr	r0, [r7, #0]
    cb2a:	4b06      	ldr	r3, [pc, #24]	; (cb44 <usbdc_cb_ctl_done+0x38>)
    cb2c:	4798      	blx	r3
		break;
    cb2e:	e004      	b.n	cb3a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cb30:	6838      	ldr	r0, [r7, #0]
    cb32:	4b05      	ldr	r3, [pc, #20]	; (cb48 <usbdc_cb_ctl_done+0x3c>)
    cb34:	4798      	blx	r3
    cb36:	4603      	mov	r3, r0
    cb38:	e000      	b.n	cb3c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cb3a:	2300      	movs	r3, #0
}
    cb3c:	4618      	mov	r0, r3
    cb3e:	3708      	adds	r7, #8
    cb40:	46bd      	mov	sp, r7
    cb42:	bd80      	pop	{r7, pc}
    cb44:	0000ca5d 	.word	0x0000ca5d
    cb48:	0000caed 	.word	0x0000caed

0000cb4c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cb4c:	b580      	push	{r7, lr}
    cb4e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cb50:	4b10      	ldr	r3, [pc, #64]	; (cb94 <usbdc_reset+0x48>)
    cb52:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cb54:	4b10      	ldr	r3, [pc, #64]	; (cb98 <usbdc_reset+0x4c>)
    cb56:	2202      	movs	r2, #2
    cb58:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cb5a:	4b0f      	ldr	r3, [pc, #60]	; (cb98 <usbdc_reset+0x4c>)
    cb5c:	2200      	movs	r2, #0
    cb5e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cb60:	4b0d      	ldr	r3, [pc, #52]	; (cb98 <usbdc_reset+0x4c>)
    cb62:	2200      	movs	r2, #0
    cb64:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cb66:	2000      	movs	r0, #0
    cb68:	4b0c      	ldr	r3, [pc, #48]	; (cb9c <usbdc_reset+0x50>)
    cb6a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cb6c:	4b0a      	ldr	r3, [pc, #40]	; (cb98 <usbdc_reset+0x4c>)
    cb6e:	7f1b      	ldrb	r3, [r3, #28]
    cb70:	4618      	mov	r0, r3
    cb72:	4b0b      	ldr	r3, [pc, #44]	; (cba0 <usbdc_reset+0x54>)
    cb74:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cb76:	4a0b      	ldr	r2, [pc, #44]	; (cba4 <usbdc_reset+0x58>)
    cb78:	2100      	movs	r1, #0
    cb7a:	2000      	movs	r0, #0
    cb7c:	4b0a      	ldr	r3, [pc, #40]	; (cba8 <usbdc_reset+0x5c>)
    cb7e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cb80:	4a0a      	ldr	r2, [pc, #40]	; (cbac <usbdc_reset+0x60>)
    cb82:	2102      	movs	r1, #2
    cb84:	2000      	movs	r0, #0
    cb86:	4b08      	ldr	r3, [pc, #32]	; (cba8 <usbdc_reset+0x5c>)
    cb88:	4798      	blx	r3
	usb_d_ep_enable(0);
    cb8a:	2000      	movs	r0, #0
    cb8c:	4b08      	ldr	r3, [pc, #32]	; (cbb0 <usbdc_reset+0x64>)
    cb8e:	4798      	blx	r3
}
    cb90:	bf00      	nop
    cb92:	bd80      	pop	{r7, pc}
    cb94:	0000c599 	.word	0x0000c599
    cb98:	20000b88 	.word	0x20000b88
    cb9c:	0000352d 	.word	0x0000352d
    cba0:	00003469 	.word	0x00003469
    cba4:	0000c9e9 	.word	0x0000c9e9
    cba8:	00003881 	.word	0x00003881
    cbac:	0000cb0d 	.word	0x0000cb0d
    cbb0:	0000357d 	.word	0x0000357d

0000cbb4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b082      	sub	sp, #8
    cbb8:	af00      	add	r7, sp, #0
    cbba:	4603      	mov	r3, r0
    cbbc:	6039      	str	r1, [r7, #0]
    cbbe:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cbc0:	79fb      	ldrb	r3, [r7, #7]
    cbc2:	2b00      	cmp	r3, #0
    cbc4:	d002      	beq.n	cbcc <usbd_event_cb+0x18>
    cbc6:	2b01      	cmp	r3, #1
    cbc8:	d005      	beq.n	cbd6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cbca:	e007      	b.n	cbdc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cbcc:	6839      	ldr	r1, [r7, #0]
    cbce:	2000      	movs	r0, #0
    cbd0:	4b04      	ldr	r3, [pc, #16]	; (cbe4 <usbd_event_cb+0x30>)
    cbd2:	4798      	blx	r3
		break;
    cbd4:	e002      	b.n	cbdc <usbd_event_cb+0x28>
		usbdc_reset();
    cbd6:	4b04      	ldr	r3, [pc, #16]	; (cbe8 <usbd_event_cb+0x34>)
    cbd8:	4798      	blx	r3
		break;
    cbda:	bf00      	nop
	}
}
    cbdc:	bf00      	nop
    cbde:	3708      	adds	r7, #8
    cbe0:	46bd      	mov	sp, r7
    cbe2:	bd80      	pop	{r7, pc}
    cbe4:	0000c939 	.word	0x0000c939
    cbe8:	0000cb4d 	.word	0x0000cb4d

0000cbec <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cbec:	b580      	push	{r7, lr}
    cbee:	b088      	sub	sp, #32
    cbf0:	af00      	add	r7, sp, #0
    cbf2:	60b9      	str	r1, [r7, #8]
    cbf4:	607a      	str	r2, [r7, #4]
    cbf6:	461a      	mov	r2, r3
    cbf8:	4603      	mov	r3, r0
    cbfa:	73fb      	strb	r3, [r7, #15]
    cbfc:	4613      	mov	r3, r2
    cbfe:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cc00:	68bb      	ldr	r3, [r7, #8]
    cc02:	617b      	str	r3, [r7, #20]
    cc04:	687b      	ldr	r3, [r7, #4]
    cc06:	61bb      	str	r3, [r7, #24]
    cc08:	7bfb      	ldrb	r3, [r7, #15]
    cc0a:	773b      	strb	r3, [r7, #28]
    cc0c:	7bbb      	ldrb	r3, [r7, #14]
    cc0e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cc10:	f107 0314 	add.w	r3, r7, #20
    cc14:	4618      	mov	r0, r3
    cc16:	4b03      	ldr	r3, [pc, #12]	; (cc24 <usbdc_xfer+0x38>)
    cc18:	4798      	blx	r3
    cc1a:	4603      	mov	r3, r0
}
    cc1c:	4618      	mov	r0, r3
    cc1e:	3720      	adds	r7, #32
    cc20:	46bd      	mov	sp, r7
    cc22:	bd80      	pop	{r7, pc}
    cc24:	000035ed 	.word	0x000035ed

0000cc28 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cc28:	b580      	push	{r7, lr}
    cc2a:	b082      	sub	sp, #8
    cc2c:	af00      	add	r7, sp, #0
    cc2e:	4603      	mov	r3, r0
    cc30:	6039      	str	r1, [r7, #0]
    cc32:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cc34:	79fb      	ldrb	r3, [r7, #7]
    cc36:	2b01      	cmp	r3, #1
    cc38:	d009      	beq.n	cc4e <usbdc_register_handler+0x26>
    cc3a:	2b02      	cmp	r3, #2
    cc3c:	d00c      	beq.n	cc58 <usbdc_register_handler+0x30>
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d000      	beq.n	cc44 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cc42:	e00e      	b.n	cc62 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cc44:	6839      	ldr	r1, [r7, #0]
    cc46:	4809      	ldr	r0, [pc, #36]	; (cc6c <usbdc_register_handler+0x44>)
    cc48:	4b09      	ldr	r3, [pc, #36]	; (cc70 <usbdc_register_handler+0x48>)
    cc4a:	4798      	blx	r3
		break;
    cc4c:	e009      	b.n	cc62 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cc4e:	6839      	ldr	r1, [r7, #0]
    cc50:	4808      	ldr	r0, [pc, #32]	; (cc74 <usbdc_register_handler+0x4c>)
    cc52:	4b07      	ldr	r3, [pc, #28]	; (cc70 <usbdc_register_handler+0x48>)
    cc54:	4798      	blx	r3
		break;
    cc56:	e004      	b.n	cc62 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cc58:	6839      	ldr	r1, [r7, #0]
    cc5a:	4807      	ldr	r0, [pc, #28]	; (cc78 <usbdc_register_handler+0x50>)
    cc5c:	4b04      	ldr	r3, [pc, #16]	; (cc70 <usbdc_register_handler+0x48>)
    cc5e:	4798      	blx	r3
		break;
    cc60:	bf00      	nop
	}
}
    cc62:	bf00      	nop
    cc64:	3708      	adds	r7, #8
    cc66:	46bd      	mov	sp, r7
    cc68:	bd80      	pop	{r7, pc}
    cc6a:	bf00      	nop
    cc6c:	20000b8c 	.word	0x20000b8c
    cc70:	000039d9 	.word	0x000039d9
    cc74:	20000b90 	.word	0x20000b90
    cc78:	20000b94 	.word	0x20000b94

0000cc7c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cc7c:	b580      	push	{r7, lr}
    cc7e:	b084      	sub	sp, #16
    cc80:	af00      	add	r7, sp, #0
    cc82:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	2b00      	cmp	r3, #0
    cc88:	bf14      	ite	ne
    cc8a:	2301      	movne	r3, #1
    cc8c:	2300      	moveq	r3, #0
    cc8e:	b2db      	uxtb	r3, r3
    cc90:	f240 3255 	movw	r2, #853	; 0x355
    cc94:	4910      	ldr	r1, [pc, #64]	; (ccd8 <usbdc_init+0x5c>)
    cc96:	4618      	mov	r0, r3
    cc98:	4b10      	ldr	r3, [pc, #64]	; (ccdc <usbdc_init+0x60>)
    cc9a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cc9c:	4b10      	ldr	r3, [pc, #64]	; (cce0 <usbdc_init+0x64>)
    cc9e:	4798      	blx	r3
    cca0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cca2:	68fb      	ldr	r3, [r7, #12]
    cca4:	2b00      	cmp	r3, #0
    cca6:	da01      	bge.n	ccac <usbdc_init+0x30>
		return rc;
    cca8:	68fb      	ldr	r3, [r7, #12]
    ccaa:	e010      	b.n	ccce <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ccac:	2220      	movs	r2, #32
    ccae:	2100      	movs	r1, #0
    ccb0:	480c      	ldr	r0, [pc, #48]	; (cce4 <usbdc_init+0x68>)
    ccb2:	4b0d      	ldr	r3, [pc, #52]	; (cce8 <usbdc_init+0x6c>)
    ccb4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ccb6:	4a0b      	ldr	r2, [pc, #44]	; (cce4 <usbdc_init+0x68>)
    ccb8:	687b      	ldr	r3, [r7, #4]
    ccba:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ccbc:	490b      	ldr	r1, [pc, #44]	; (ccec <usbdc_init+0x70>)
    ccbe:	2000      	movs	r0, #0
    ccc0:	4b0b      	ldr	r3, [pc, #44]	; (ccf0 <usbdc_init+0x74>)
    ccc2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    ccc4:	490b      	ldr	r1, [pc, #44]	; (ccf4 <usbdc_init+0x78>)
    ccc6:	2001      	movs	r0, #1
    ccc8:	4b09      	ldr	r3, [pc, #36]	; (ccf0 <usbdc_init+0x74>)
    ccca:	4798      	blx	r3

	return 0;
    cccc:	2300      	movs	r3, #0
}
    ccce:	4618      	mov	r0, r3
    ccd0:	3710      	adds	r7, #16
    ccd2:	46bd      	mov	sp, r7
    ccd4:	bd80      	pop	{r7, pc}
    ccd6:	bf00      	nop
    ccd8:	0000f17c 	.word	0x0000f17c
    ccdc:	000038fd 	.word	0x000038fd
    cce0:	00003355 	.word	0x00003355
    cce4:	20000b88 	.word	0x20000b88
    cce8:	0000eacd 	.word	0x0000eacd
    ccec:	0000c9d9 	.word	0x0000c9d9
    ccf0:	00003401 	.word	0x00003401
    ccf4:	0000cbb5 	.word	0x0000cbb5

0000ccf8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ccf8:	b580      	push	{r7, lr}
    ccfa:	b082      	sub	sp, #8
    ccfc:	af00      	add	r7, sp, #0
    ccfe:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cd00:	6879      	ldr	r1, [r7, #4]
    cd02:	4803      	ldr	r0, [pc, #12]	; (cd10 <usbdc_register_function+0x18>)
    cd04:	4b03      	ldr	r3, [pc, #12]	; (cd14 <usbdc_register_function+0x1c>)
    cd06:	4798      	blx	r3
}
    cd08:	bf00      	nop
    cd0a:	3708      	adds	r7, #8
    cd0c:	46bd      	mov	sp, r7
    cd0e:	bd80      	pop	{r7, pc}
    cd10:	20000b98 	.word	0x20000b98
    cd14:	000039d9 	.word	0x000039d9

0000cd18 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	b082      	sub	sp, #8
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cd20:	4b0f      	ldr	r3, [pc, #60]	; (cd60 <usbdc_start+0x48>)
    cd22:	7e9b      	ldrb	r3, [r3, #26]
    cd24:	2b00      	cmp	r3, #0
    cd26:	d002      	beq.n	cd2e <usbdc_start+0x16>
		return ERR_BUSY;
    cd28:	f06f 0303 	mvn.w	r3, #3
    cd2c:	e013      	b.n	cd56 <usbdc_start+0x3e>
	}

	if (desces) {
    cd2e:	687b      	ldr	r3, [r7, #4]
    cd30:	2b00      	cmp	r3, #0
    cd32:	d00e      	beq.n	cd52 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cd34:	4a0a      	ldr	r2, [pc, #40]	; (cd60 <usbdc_start+0x48>)
    cd36:	687b      	ldr	r3, [r7, #4]
    cd38:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cd3a:	687b      	ldr	r3, [r7, #4]
    cd3c:	681b      	ldr	r3, [r3, #0]
    cd3e:	79da      	ldrb	r2, [r3, #7]
    cd40:	4b07      	ldr	r3, [pc, #28]	; (cd60 <usbdc_start+0x48>)
    cd42:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cd44:	4b06      	ldr	r3, [pc, #24]	; (cd60 <usbdc_start+0x48>)
    cd46:	2201      	movs	r2, #1
    cd48:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cd4a:	4b06      	ldr	r3, [pc, #24]	; (cd64 <usbdc_start+0x4c>)
    cd4c:	4798      	blx	r3
	return ERR_NONE;
    cd4e:	2300      	movs	r3, #0
    cd50:	e001      	b.n	cd56 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cd52:	f06f 0308 	mvn.w	r3, #8
}
    cd56:	4618      	mov	r0, r3
    cd58:	3708      	adds	r7, #8
    cd5a:	46bd      	mov	sp, r7
    cd5c:	bd80      	pop	{r7, pc}
    cd5e:	bf00      	nop
    cd60:	20000b88 	.word	0x20000b88
    cd64:	00003425 	.word	0x00003425

0000cd68 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cd68:	b580      	push	{r7, lr}
    cd6a:	af00      	add	r7, sp, #0
	usb_d_attach();
    cd6c:	4b01      	ldr	r3, [pc, #4]	; (cd74 <usbdc_attach+0xc>)
    cd6e:	4798      	blx	r3
}
    cd70:	bf00      	nop
    cd72:	bd80      	pop	{r7, pc}
    cd74:	00003439 	.word	0x00003439

0000cd78 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cd78:	b480      	push	{r7}
    cd7a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cd7c:	4b03      	ldr	r3, [pc, #12]	; (cd8c <usbdc_get_ctrl_buffer+0x14>)
    cd7e:	695b      	ldr	r3, [r3, #20]
}
    cd80:	4618      	mov	r0, r3
    cd82:	46bd      	mov	sp, r7
    cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd88:	4770      	bx	lr
    cd8a:	bf00      	nop
    cd8c:	20000b88 	.word	0x20000b88

0000cd90 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cd90:	b480      	push	{r7}
    cd92:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cd94:	4b07      	ldr	r3, [pc, #28]	; (cdb4 <usbdc_get_state+0x24>)
    cd96:	7e9b      	ldrb	r3, [r3, #26]
    cd98:	f003 0310 	and.w	r3, r3, #16
    cd9c:	2b00      	cmp	r3, #0
    cd9e:	d001      	beq.n	cda4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cda0:	2310      	movs	r3, #16
    cda2:	e001      	b.n	cda8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cda4:	4b03      	ldr	r3, [pc, #12]	; (cdb4 <usbdc_get_state+0x24>)
    cda6:	7e9b      	ldrb	r3, [r3, #26]
}
    cda8:	4618      	mov	r0, r3
    cdaa:	46bd      	mov	sp, r7
    cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdb0:	4770      	bx	lr
    cdb2:	bf00      	nop
    cdb4:	20000b88 	.word	0x20000b88

0000cdb8 <usb_get_u16>:
{
    cdb8:	b480      	push	{r7}
    cdba:	b083      	sub	sp, #12
    cdbc:	af00      	add	r7, sp, #0
    cdbe:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cdc0:	687b      	ldr	r3, [r7, #4]
    cdc2:	781b      	ldrb	r3, [r3, #0]
    cdc4:	b29a      	uxth	r2, r3
    cdc6:	687b      	ldr	r3, [r7, #4]
    cdc8:	3301      	adds	r3, #1
    cdca:	781b      	ldrb	r3, [r3, #0]
    cdcc:	b29b      	uxth	r3, r3
    cdce:	021b      	lsls	r3, r3, #8
    cdd0:	b29b      	uxth	r3, r3
    cdd2:	4413      	add	r3, r2
    cdd4:	b29b      	uxth	r3, r3
}
    cdd6:	4618      	mov	r0, r3
    cdd8:	370c      	adds	r7, #12
    cdda:	46bd      	mov	sp, r7
    cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cde0:	4770      	bx	lr

0000cde2 <usb_desc_len>:
{
    cde2:	b480      	push	{r7}
    cde4:	b083      	sub	sp, #12
    cde6:	af00      	add	r7, sp, #0
    cde8:	6078      	str	r0, [r7, #4]
	return desc[0];
    cdea:	687b      	ldr	r3, [r7, #4]
    cdec:	781b      	ldrb	r3, [r3, #0]
}
    cdee:	4618      	mov	r0, r3
    cdf0:	370c      	adds	r7, #12
    cdf2:	46bd      	mov	sp, r7
    cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdf8:	4770      	bx	lr

0000cdfa <usb_desc_type>:
{
    cdfa:	b480      	push	{r7}
    cdfc:	b083      	sub	sp, #12
    cdfe:	af00      	add	r7, sp, #0
    ce00:	6078      	str	r0, [r7, #4]
	return desc[1];
    ce02:	687b      	ldr	r3, [r7, #4]
    ce04:	3301      	adds	r3, #1
    ce06:	781b      	ldrb	r3, [r3, #0]
}
    ce08:	4618      	mov	r0, r3
    ce0a:	370c      	adds	r7, #12
    ce0c:	46bd      	mov	sp, r7
    ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce12:	4770      	bx	lr

0000ce14 <usb_desc_next>:
{
    ce14:	b580      	push	{r7, lr}
    ce16:	b082      	sub	sp, #8
    ce18:	af00      	add	r7, sp, #0
    ce1a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ce1c:	6878      	ldr	r0, [r7, #4]
    ce1e:	4b05      	ldr	r3, [pc, #20]	; (ce34 <usb_desc_next+0x20>)
    ce20:	4798      	blx	r3
    ce22:	4603      	mov	r3, r0
    ce24:	461a      	mov	r2, r3
    ce26:	687b      	ldr	r3, [r7, #4]
    ce28:	4413      	add	r3, r2
}
    ce2a:	4618      	mov	r0, r3
    ce2c:	3708      	adds	r7, #8
    ce2e:	46bd      	mov	sp, r7
    ce30:	bd80      	pop	{r7, pc}
    ce32:	bf00      	nop
    ce34:	0000cde3 	.word	0x0000cde3

0000ce38 <usb_cfg_desc_total_len>:
{
    ce38:	b580      	push	{r7, lr}
    ce3a:	b082      	sub	sp, #8
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ce40:	687b      	ldr	r3, [r7, #4]
    ce42:	3302      	adds	r3, #2
    ce44:	4618      	mov	r0, r3
    ce46:	4b03      	ldr	r3, [pc, #12]	; (ce54 <usb_cfg_desc_total_len+0x1c>)
    ce48:	4798      	blx	r3
    ce4a:	4603      	mov	r3, r0
}
    ce4c:	4618      	mov	r0, r3
    ce4e:	3708      	adds	r7, #8
    ce50:	46bd      	mov	sp, r7
    ce52:	bd80      	pop	{r7, pc}
    ce54:	0000cdb9 	.word	0x0000cdb9

0000ce58 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    ce58:	b580      	push	{r7, lr}
    ce5a:	b082      	sub	sp, #8
    ce5c:	af00      	add	r7, sp, #0
    ce5e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ce60:	6878      	ldr	r0, [r7, #4]
    ce62:	4b05      	ldr	r3, [pc, #20]	; (ce78 <usb_cfg_desc_next+0x20>)
    ce64:	4798      	blx	r3
    ce66:	4603      	mov	r3, r0
    ce68:	461a      	mov	r2, r3
    ce6a:	687b      	ldr	r3, [r7, #4]
    ce6c:	4413      	add	r3, r2
}
    ce6e:	4618      	mov	r0, r3
    ce70:	3708      	adds	r7, #8
    ce72:	46bd      	mov	sp, r7
    ce74:	bd80      	pop	{r7, pc}
    ce76:	bf00      	nop
    ce78:	0000ce39 	.word	0x0000ce39

0000ce7c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b084      	sub	sp, #16
    ce80:	af00      	add	r7, sp, #0
    ce82:	60f8      	str	r0, [r7, #12]
    ce84:	60b9      	str	r1, [r7, #8]
    ce86:	4613      	mov	r3, r2
    ce88:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ce8a:	e015      	b.n	ceb8 <usb_find_desc+0x3c>
		_desc_len_check();
    ce8c:	68f8      	ldr	r0, [r7, #12]
    ce8e:	4b0f      	ldr	r3, [pc, #60]	; (cecc <usb_find_desc+0x50>)
    ce90:	4798      	blx	r3
    ce92:	4603      	mov	r3, r0
    ce94:	2b01      	cmp	r3, #1
    ce96:	d801      	bhi.n	ce9c <usb_find_desc+0x20>
    ce98:	2300      	movs	r3, #0
    ce9a:	e012      	b.n	cec2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    ce9c:	68f8      	ldr	r0, [r7, #12]
    ce9e:	4b0c      	ldr	r3, [pc, #48]	; (ced0 <usb_find_desc+0x54>)
    cea0:	4798      	blx	r3
    cea2:	4603      	mov	r3, r0
    cea4:	461a      	mov	r2, r3
    cea6:	79fb      	ldrb	r3, [r7, #7]
    cea8:	4293      	cmp	r3, r2
    ceaa:	d101      	bne.n	ceb0 <usb_find_desc+0x34>
			return desc;
    ceac:	68fb      	ldr	r3, [r7, #12]
    ceae:	e008      	b.n	cec2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    ceb0:	68f8      	ldr	r0, [r7, #12]
    ceb2:	4b08      	ldr	r3, [pc, #32]	; (ced4 <usb_find_desc+0x58>)
    ceb4:	4798      	blx	r3
    ceb6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ceb8:	68fa      	ldr	r2, [r7, #12]
    ceba:	68bb      	ldr	r3, [r7, #8]
    cebc:	429a      	cmp	r2, r3
    cebe:	d3e5      	bcc.n	ce8c <usb_find_desc+0x10>
	}
	return NULL;
    cec0:	2300      	movs	r3, #0
}
    cec2:	4618      	mov	r0, r3
    cec4:	3710      	adds	r7, #16
    cec6:	46bd      	mov	sp, r7
    cec8:	bd80      	pop	{r7, pc}
    ceca:	bf00      	nop
    cecc:	0000cde3 	.word	0x0000cde3
    ced0:	0000cdfb 	.word	0x0000cdfb
    ced4:	0000ce15 	.word	0x0000ce15

0000ced8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    ced8:	b580      	push	{r7, lr}
    ceda:	b082      	sub	sp, #8
    cedc:	af00      	add	r7, sp, #0
    cede:	6078      	str	r0, [r7, #4]
    cee0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cee2:	e019      	b.n	cf18 <usb_find_ep_desc+0x40>
		_desc_len_check();
    cee4:	6878      	ldr	r0, [r7, #4]
    cee6:	4b12      	ldr	r3, [pc, #72]	; (cf30 <usb_find_ep_desc+0x58>)
    cee8:	4798      	blx	r3
    ceea:	4603      	mov	r3, r0
    ceec:	2b01      	cmp	r3, #1
    ceee:	d801      	bhi.n	cef4 <usb_find_ep_desc+0x1c>
    cef0:	2300      	movs	r3, #0
    cef2:	e018      	b.n	cf26 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cef4:	6878      	ldr	r0, [r7, #4]
    cef6:	4b0f      	ldr	r3, [pc, #60]	; (cf34 <usb_find_ep_desc+0x5c>)
    cef8:	4798      	blx	r3
    cefa:	4603      	mov	r3, r0
    cefc:	2b04      	cmp	r3, #4
    cefe:	d010      	beq.n	cf22 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cf00:	6878      	ldr	r0, [r7, #4]
    cf02:	4b0c      	ldr	r3, [pc, #48]	; (cf34 <usb_find_ep_desc+0x5c>)
    cf04:	4798      	blx	r3
    cf06:	4603      	mov	r3, r0
    cf08:	2b05      	cmp	r3, #5
    cf0a:	d101      	bne.n	cf10 <usb_find_ep_desc+0x38>
			return desc;
    cf0c:	687b      	ldr	r3, [r7, #4]
    cf0e:	e00a      	b.n	cf26 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cf10:	6878      	ldr	r0, [r7, #4]
    cf12:	4b09      	ldr	r3, [pc, #36]	; (cf38 <usb_find_ep_desc+0x60>)
    cf14:	4798      	blx	r3
    cf16:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cf18:	687a      	ldr	r2, [r7, #4]
    cf1a:	683b      	ldr	r3, [r7, #0]
    cf1c:	429a      	cmp	r2, r3
    cf1e:	d3e1      	bcc.n	cee4 <usb_find_ep_desc+0xc>
    cf20:	e000      	b.n	cf24 <usb_find_ep_desc+0x4c>
			break;
    cf22:	bf00      	nop
	}
	return NULL;
    cf24:	2300      	movs	r3, #0
}
    cf26:	4618      	mov	r0, r3
    cf28:	3708      	adds	r7, #8
    cf2a:	46bd      	mov	sp, r7
    cf2c:	bd80      	pop	{r7, pc}
    cf2e:	bf00      	nop
    cf30:	0000cde3 	.word	0x0000cde3
    cf34:	0000cdfb 	.word	0x0000cdfb
    cf38:	0000ce15 	.word	0x0000ce15

0000cf3c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cf3c:	b580      	push	{r7, lr}
    cf3e:	b084      	sub	sp, #16
    cf40:	af00      	add	r7, sp, #0
    cf42:	60f8      	str	r0, [r7, #12]
    cf44:	60b9      	str	r1, [r7, #8]
    cf46:	4613      	mov	r3, r2
    cf48:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cf4a:	2202      	movs	r2, #2
    cf4c:	68b9      	ldr	r1, [r7, #8]
    cf4e:	68f8      	ldr	r0, [r7, #12]
    cf50:	4b15      	ldr	r3, [pc, #84]	; (cfa8 <usb_find_cfg_desc+0x6c>)
    cf52:	4798      	blx	r3
    cf54:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    cf56:	68fb      	ldr	r3, [r7, #12]
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d11a      	bne.n	cf92 <usb_find_cfg_desc+0x56>
		return NULL;
    cf5c:	2300      	movs	r3, #0
    cf5e:	e01f      	b.n	cfa0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cf60:	68f8      	ldr	r0, [r7, #12]
    cf62:	4b12      	ldr	r3, [pc, #72]	; (cfac <usb_find_cfg_desc+0x70>)
    cf64:	4798      	blx	r3
    cf66:	4603      	mov	r3, r0
    cf68:	2b01      	cmp	r3, #1
    cf6a:	d801      	bhi.n	cf70 <usb_find_cfg_desc+0x34>
    cf6c:	2300      	movs	r3, #0
    cf6e:	e017      	b.n	cfa0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cf70:	68fb      	ldr	r3, [r7, #12]
    cf72:	3301      	adds	r3, #1
    cf74:	781b      	ldrb	r3, [r3, #0]
    cf76:	2b02      	cmp	r3, #2
    cf78:	d110      	bne.n	cf9c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	3305      	adds	r3, #5
    cf7e:	781b      	ldrb	r3, [r3, #0]
    cf80:	79fa      	ldrb	r2, [r7, #7]
    cf82:	429a      	cmp	r2, r3
    cf84:	d101      	bne.n	cf8a <usb_find_cfg_desc+0x4e>
			return desc;
    cf86:	68fb      	ldr	r3, [r7, #12]
    cf88:	e00a      	b.n	cfa0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    cf8a:	68f8      	ldr	r0, [r7, #12]
    cf8c:	4b08      	ldr	r3, [pc, #32]	; (cfb0 <usb_find_cfg_desc+0x74>)
    cf8e:	4798      	blx	r3
    cf90:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cf92:	68fa      	ldr	r2, [r7, #12]
    cf94:	68bb      	ldr	r3, [r7, #8]
    cf96:	429a      	cmp	r2, r3
    cf98:	d3e2      	bcc.n	cf60 <usb_find_cfg_desc+0x24>
    cf9a:	e000      	b.n	cf9e <usb_find_cfg_desc+0x62>
			break;
    cf9c:	bf00      	nop
	}
	return NULL;
    cf9e:	2300      	movs	r3, #0
}
    cfa0:	4618      	mov	r0, r3
    cfa2:	3710      	adds	r7, #16
    cfa4:	46bd      	mov	sp, r7
    cfa6:	bd80      	pop	{r7, pc}
    cfa8:	0000ce7d 	.word	0x0000ce7d
    cfac:	0000cde3 	.word	0x0000cde3
    cfb0:	0000ce59 	.word	0x0000ce59

0000cfb4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    cfb4:	b580      	push	{r7, lr}
    cfb6:	b086      	sub	sp, #24
    cfb8:	af00      	add	r7, sp, #0
    cfba:	60f8      	str	r0, [r7, #12]
    cfbc:	60b9      	str	r1, [r7, #8]
    cfbe:	4613      	mov	r3, r2
    cfc0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    cfc2:	2300      	movs	r3, #0
    cfc4:	75fb      	strb	r3, [r7, #23]
    cfc6:	e020      	b.n	d00a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    cfc8:	2203      	movs	r2, #3
    cfca:	68b9      	ldr	r1, [r7, #8]
    cfcc:	68f8      	ldr	r0, [r7, #12]
    cfce:	4b13      	ldr	r3, [pc, #76]	; (d01c <usb_find_str_desc+0x68>)
    cfd0:	4798      	blx	r3
    cfd2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    cfd4:	68fb      	ldr	r3, [r7, #12]
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d015      	beq.n	d006 <usb_find_str_desc+0x52>
			_desc_len_check();
    cfda:	68f8      	ldr	r0, [r7, #12]
    cfdc:	4b10      	ldr	r3, [pc, #64]	; (d020 <usb_find_str_desc+0x6c>)
    cfde:	4798      	blx	r3
    cfe0:	4603      	mov	r3, r0
    cfe2:	2b01      	cmp	r3, #1
    cfe4:	d801      	bhi.n	cfea <usb_find_str_desc+0x36>
    cfe6:	2300      	movs	r3, #0
    cfe8:	e014      	b.n	d014 <usb_find_str_desc+0x60>
			if (i == str_index) {
    cfea:	7dfa      	ldrb	r2, [r7, #23]
    cfec:	79fb      	ldrb	r3, [r7, #7]
    cfee:	429a      	cmp	r2, r3
    cff0:	d101      	bne.n	cff6 <usb_find_str_desc+0x42>
				return desc;
    cff2:	68fb      	ldr	r3, [r7, #12]
    cff4:	e00e      	b.n	d014 <usb_find_str_desc+0x60>
			}
			i++;
    cff6:	7dfb      	ldrb	r3, [r7, #23]
    cff8:	3301      	adds	r3, #1
    cffa:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    cffc:	68f8      	ldr	r0, [r7, #12]
    cffe:	4b09      	ldr	r3, [pc, #36]	; (d024 <usb_find_str_desc+0x70>)
    d000:	4798      	blx	r3
    d002:	60f8      	str	r0, [r7, #12]
    d004:	e001      	b.n	d00a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d006:	2300      	movs	r3, #0
    d008:	e004      	b.n	d014 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d00a:	68fa      	ldr	r2, [r7, #12]
    d00c:	68bb      	ldr	r3, [r7, #8]
    d00e:	429a      	cmp	r2, r3
    d010:	d3da      	bcc.n	cfc8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d012:	2300      	movs	r3, #0
}
    d014:	4618      	mov	r0, r3
    d016:	3718      	adds	r7, #24
    d018:	46bd      	mov	sp, r7
    d01a:	bd80      	pop	{r7, pc}
    d01c:	0000ce7d 	.word	0x0000ce7d
    d020:	0000cde3 	.word	0x0000cde3
    d024:	0000ce15 	.word	0x0000ce15

0000d028 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d028:	b480      	push	{r7}
    d02a:	b085      	sub	sp, #20
    d02c:	af00      	add	r7, sp, #0
    d02e:	60f8      	str	r0, [r7, #12]
    d030:	460b      	mov	r3, r1
    d032:	607a      	str	r2, [r7, #4]
    d034:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d036:	7afb      	ldrb	r3, [r7, #11]
    d038:	68fa      	ldr	r2, [r7, #12]
    d03a:	01db      	lsls	r3, r3, #7
    d03c:	4413      	add	r3, r2
    d03e:	3318      	adds	r3, #24
    d040:	687a      	ldr	r2, [r7, #4]
    d042:	601a      	str	r2, [r3, #0]
}
    d044:	bf00      	nop
    d046:	3714      	adds	r7, #20
    d048:	46bd      	mov	sp, r7
    d04a:	bc80      	pop	{r7}
    d04c:	4770      	bx	lr

0000d04e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d04e:	b480      	push	{r7}
    d050:	b085      	sub	sp, #20
    d052:	af00      	add	r7, sp, #0
    d054:	60f8      	str	r0, [r7, #12]
    d056:	460b      	mov	r3, r1
    d058:	607a      	str	r2, [r7, #4]
    d05a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d05c:	7afb      	ldrb	r3, [r7, #11]
    d05e:	68fa      	ldr	r2, [r7, #12]
    d060:	01db      	lsls	r3, r3, #7
    d062:	4413      	add	r3, r2
    d064:	3314      	adds	r3, #20
    d066:	687a      	ldr	r2, [r7, #4]
    d068:	601a      	str	r2, [r3, #0]
}
    d06a:	bf00      	nop
    d06c:	3714      	adds	r7, #20
    d06e:	46bd      	mov	sp, r7
    d070:	bc80      	pop	{r7}
    d072:	4770      	bx	lr

0000d074 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    d074:	b580      	push	{r7, lr}
    d076:	b082      	sub	sp, #8
    d078:	af00      	add	r7, sp, #0
    d07a:	4603      	mov	r3, r0
    d07c:	6039      	str	r1, [r7, #0]
    d07e:	71fb      	strb	r3, [r7, #7]
    d080:	4613      	mov	r3, r2
    d082:	71bb      	strb	r3, [r7, #6]
	if (level) {
    d084:	79bb      	ldrb	r3, [r7, #6]
    d086:	2b00      	cmp	r3, #0
    d088:	d006      	beq.n	d098 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    d08a:	79fb      	ldrb	r3, [r7, #7]
    d08c:	683a      	ldr	r2, [r7, #0]
    d08e:	4619      	mov	r1, r3
    d090:	4806      	ldr	r0, [pc, #24]	; (d0ac <_gpio_set_level+0x38>)
    d092:	4b07      	ldr	r3, [pc, #28]	; (d0b0 <_gpio_set_level+0x3c>)
    d094:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    d096:	e005      	b.n	d0a4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    d098:	79fb      	ldrb	r3, [r7, #7]
    d09a:	683a      	ldr	r2, [r7, #0]
    d09c:	4619      	mov	r1, r3
    d09e:	4803      	ldr	r0, [pc, #12]	; (d0ac <_gpio_set_level+0x38>)
    d0a0:	4b04      	ldr	r3, [pc, #16]	; (d0b4 <_gpio_set_level+0x40>)
    d0a2:	4798      	blx	r3
}
    d0a4:	bf00      	nop
    d0a6:	3708      	adds	r7, #8
    d0a8:	46bd      	mov	sp, r7
    d0aa:	bd80      	pop	{r7, pc}
    d0ac:	41008000 	.word	0x41008000
    d0b0:	0000d029 	.word	0x0000d029
    d0b4:	0000d04f 	.word	0x0000d04f

0000d0b8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    d0b8:	b580      	push	{r7, lr}
    d0ba:	b082      	sub	sp, #8
    d0bc:	af00      	add	r7, sp, #0
    d0be:	4603      	mov	r3, r0
    d0c0:	460a      	mov	r2, r1
    d0c2:	71fb      	strb	r3, [r7, #7]
    d0c4:	4613      	mov	r3, r2
    d0c6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d0c8:	79fb      	ldrb	r3, [r7, #7]
    d0ca:	115b      	asrs	r3, r3, #5
    d0cc:	b2d8      	uxtb	r0, r3
    d0ce:	79fb      	ldrb	r3, [r7, #7]
    d0d0:	f003 031f 	and.w	r3, r3, #31
    d0d4:	2201      	movs	r2, #1
    d0d6:	fa02 f303 	lsl.w	r3, r2, r3
    d0da:	79ba      	ldrb	r2, [r7, #6]
    d0dc:	4619      	mov	r1, r3
    d0de:	4b03      	ldr	r3, [pc, #12]	; (d0ec <gpio_set_pin_level+0x34>)
    d0e0:	4798      	blx	r3
}
    d0e2:	bf00      	nop
    d0e4:	3708      	adds	r7, #8
    d0e6:	46bd      	mov	sp, r7
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	bf00      	nop
    d0ec:	0000d075 	.word	0x0000d075

0000d0f0 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	6078      	str	r0, [r7, #4]
    d0f8:	6039      	str	r1, [r7, #0]
    d0fa:	687b      	ldr	r3, [r7, #4]
    d0fc:	3318      	adds	r3, #24
    d0fe:	4618      	mov	r0, r3
    d100:	4b08      	ldr	r3, [pc, #32]	; (d124 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    d102:	4798      	blx	r3
{
	appParameters=defaultParameters;
    d104:	687b      	ldr	r3, [r7, #4]
    d106:	4a08      	ldr	r2, [pc, #32]	; (d128 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    d108:	7812      	ldrb	r2, [r2, #0]
    d10a:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	683a      	ldr	r2, [r7, #0]
    d110:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    d112:	4b06      	ldr	r3, [pc, #24]	; (d12c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    d114:	681a      	ldr	r2, [r3, #0]
    d116:	687b      	ldr	r3, [r7, #4]
    d118:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    d11a:	687b      	ldr	r3, [r7, #4]
    d11c:	4618      	mov	r0, r3
    d11e:	3708      	adds	r7, #8
    d120:	46bd      	mov	sp, r7
    d122:	bd80      	pop	{r7, pc}
    d124:	0000e701 	.word	0x0000e701
    d128:	0000f194 	.word	0x0000f194
    d12c:	20000ba8 	.word	0x20000ba8

0000d130 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
    d138:	687b      	ldr	r3, [r7, #4]
    d13a:	3318      	adds	r3, #24
    d13c:	4618      	mov	r0, r3
    d13e:	4b03      	ldr	r3, [pc, #12]	; (d14c <_ZN16FlashMemoryClassD1Ev+0x1c>)
    d140:	4798      	blx	r3
{
} //~FlashMemoryClass
    d142:	687b      	ldr	r3, [r7, #4]
    d144:	4618      	mov	r0, r3
    d146:	3708      	adds	r7, #8
    d148:	46bd      	mov	sp, r7
    d14a:	bd80      	pop	{r7, pc}
    d14c:	0000e721 	.word	0x0000e721

0000d150 <_ZN16FlashMemoryClass4InitEv>:
	flashOpen();
	//WriteStatusRegister(kFlashInitialStatus);
	flashClose();
	
}
void	FlashMemoryClass::Init(void){
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
    d156:	6078      	str	r0, [r7, #4]
	spi.SetDescriptor(spi_descriptor);
    d158:	687b      	ldr	r3, [r7, #4]
    d15a:	f103 0218 	add.w	r2, r3, #24
    d15e:	687b      	ldr	r3, [r7, #4]
    d160:	695b      	ldr	r3, [r3, #20]
    d162:	4619      	mov	r1, r3
    d164:	4610      	mov	r0, r2
    d166:	4b0e      	ldr	r3, [pc, #56]	; (d1a0 <_ZN16FlashMemoryClass4InitEv+0x50>)
    d168:	4798      	blx	r3
	spi.init();
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	3318      	adds	r3, #24
    d16e:	4618      	mov	r0, r3
    d170:	4b0c      	ldr	r3, [pc, #48]	; (d1a4 <_ZN16FlashMemoryClass4InitEv+0x54>)
    d172:	4798      	blx	r3


	memoryMap=0x00;
    d174:	687b      	ldr	r3, [r7, #4]
    d176:	2200      	movs	r2, #0
    d178:	601a      	str	r2, [r3, #0]
	
	flashOpen();
    d17a:	6878      	ldr	r0, [r7, #4]
    d17c:	4b0a      	ldr	r3, [pc, #40]	; (d1a8 <_ZN16FlashMemoryClass4InitEv+0x58>)
    d17e:	4798      	blx	r3
//	WriteStatusRegister(0x02);
//	SoftwareReset();
//	ChipErase();
	status=ReadStatusRegister();
    d180:	6878      	ldr	r0, [r7, #4]
    d182:	4b0a      	ldr	r3, [pc, #40]	; (d1ac <_ZN16FlashMemoryClass4InitEv+0x5c>)
    d184:	4798      	blx	r3
    d186:	4603      	mov	r3, r0
    d188:	461a      	mov	r2, r3
    d18a:	687b      	ldr	r3, [r7, #4]
    d18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
//	functionsRegister=ReadFunctionRegister();
	
	flashClose();
    d190:	6878      	ldr	r0, [r7, #4]
    d192:	4b07      	ldr	r3, [pc, #28]	; (d1b0 <_ZN16FlashMemoryClass4InitEv+0x60>)
    d194:	4798      	blx	r3
	
}
    d196:	bf00      	nop
    d198:	3708      	adds	r7, #8
    d19a:	46bd      	mov	sp, r7
    d19c:	bd80      	pop	{r7, pc}
    d19e:	bf00      	nop
    d1a0:	0000e76d 	.word	0x0000e76d
    d1a4:	0000e735 	.word	0x0000e735
    d1a8:	0000d241 	.word	0x0000d241
    d1ac:	0000d671 	.word	0x0000d671
    d1b0:	0000d6e9 	.word	0x0000d6e9

0000d1b4 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters>:

void FlashMemoryClass::flushConfigurationData(userParameters *data)
{
    d1b4:	b590      	push	{r4, r7, lr}
    d1b6:	b085      	sub	sp, #20
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	6078      	str	r0, [r7, #4]
    d1bc:	6039      	str	r1, [r7, #0]

	userParameters	appData;
	appData=*data;
    d1be:	683b      	ldr	r3, [r7, #0]
    d1c0:	781b      	ldrb	r3, [r3, #0]
    d1c2:	733b      	strb	r3, [r7, #12]
	flashOpen();
    d1c4:	6878      	ldr	r0, [r7, #4]
    d1c6:	4b0a      	ldr	r3, [pc, #40]	; (d1f0 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x3c>)
    d1c8:	4798      	blx	r3
	

	//eraseFlash((uint32_t)&memory->parameters, sizeof(userParameters));
	writeFlash((uint32_t)&memoryMap->parameters, &appData, sizeof(userParameters));
    d1ca:	687b      	ldr	r3, [r7, #4]
    d1cc:	681b      	ldr	r3, [r3, #0]
    d1ce:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    d1d2:	4619      	mov	r1, r3
    d1d4:	f107 020c 	add.w	r2, r7, #12
    d1d8:	2301      	movs	r3, #1
    d1da:	6878      	ldr	r0, [r7, #4]
    d1dc:	4c05      	ldr	r4, [pc, #20]	; (d1f4 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x40>)
    d1de:	47a0      	blx	r4
	flashClose();
    d1e0:	6878      	ldr	r0, [r7, #4]
    d1e2:	4b05      	ldr	r3, [pc, #20]	; (d1f8 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x44>)
    d1e4:	4798      	blx	r3

}
    d1e6:	bf00      	nop
    d1e8:	3714      	adds	r7, #20
    d1ea:	46bd      	mov	sp, r7
    d1ec:	bd90      	pop	{r4, r7, pc}
    d1ee:	bf00      	nop
    d1f0:	0000d241 	.word	0x0000d241
    d1f4:	0000d409 	.word	0x0000d409
    d1f8:	0000d6e9 	.word	0x0000d6e9

0000d1fc <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters>:
		
	}
}

userParameters FlashMemoryClass::readConfigurationData(userParameters& p)
{
    d1fc:	b590      	push	{r4, r7, lr}
    d1fe:	b083      	sub	sp, #12
    d200:	af00      	add	r7, sp, #0
    d202:	6078      	str	r0, [r7, #4]
    d204:	6039      	str	r1, [r7, #0]
	
	flashOpen();
    d206:	6878      	ldr	r0, [r7, #4]
    d208:	4b0a      	ldr	r3, [pc, #40]	; (d234 <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x38>)
    d20a:	4798      	blx	r3
	readFlash((void*)&p, (uint32_t)&memoryMap->parameters, sizeof(userParameters));
    d20c:	687b      	ldr	r3, [r7, #4]
    d20e:	681b      	ldr	r3, [r3, #0]
    d210:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    d214:	461a      	mov	r2, r3
    d216:	2301      	movs	r3, #1
    d218:	6839      	ldr	r1, [r7, #0]
    d21a:	6878      	ldr	r0, [r7, #4]
    d21c:	4c06      	ldr	r4, [pc, #24]	; (d238 <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x3c>)
    d21e:	47a0      	blx	r4
	flashClose();
    d220:	6878      	ldr	r0, [r7, #4]
    d222:	4b06      	ldr	r3, [pc, #24]	; (d23c <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x40>)
    d224:	4798      	blx	r3
	return	p;
    d226:	683b      	ldr	r3, [r7, #0]
    d228:	781b      	ldrb	r3, [r3, #0]

}
    d22a:	4618      	mov	r0, r3
    d22c:	370c      	adds	r7, #12
    d22e:	46bd      	mov	sp, r7
    d230:	bd90      	pop	{r4, r7, pc}
    d232:	bf00      	nop
    d234:	0000d241 	.word	0x0000d241
    d238:	0000d269 	.word	0x0000d269
    d23c:	0000d6e9 	.word	0x0000d6e9

0000d240 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    d240:	b580      	push	{r7, lr}
    d242:	b082      	sub	sp, #8
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
	garbage=spi.enable();
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	3318      	adds	r3, #24
    d24c:	4618      	mov	r0, r3
    d24e:	4b05      	ldr	r3, [pc, #20]	; (d264 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    d250:	4798      	blx	r3
    d252:	4603      	mov	r3, r0
    d254:	461a      	mov	r2, r3
    d256:	687b      	ldr	r3, [r7, #4]
    d258:	609a      	str	r2, [r3, #8]
	
	
}
    d25a:	bf00      	nop
    d25c:	3708      	adds	r7, #8
    d25e:	46bd      	mov	sp, r7
    d260:	bd80      	pop	{r7, pc}
    d262:	bf00      	nop
    d264:	0000e791 	.word	0x0000e791

0000d268 <_ZN16FlashMemoryClass9readFlashEPvmm>:
uint8_t FlashMemoryClass::readFlash(void* dest, uint32_t src, uint32_t size)
{
    d268:	b580      	push	{r7, lr}
    d26a:	b084      	sub	sp, #16
    d26c:	af00      	add	r7, sp, #0
    d26e:	60f8      	str	r0, [r7, #12]
    d270:	60b9      	str	r1, [r7, #8]
    d272:	607a      	str	r2, [r7, #4]
    d274:	603b      	str	r3, [r7, #0]
	CE_Low_Flash();
    d276:	68f8      	ldr	r0, [r7, #12]
    d278:	4b15      	ldr	r3, [pc, #84]	; (d2d0 <_ZN16FlashMemoryClass9readFlashEPvmm+0x68>)
    d27a:	4798      	blx	r3
	Send_Byte(kFlashRead);
    d27c:	2103      	movs	r1, #3
    d27e:	68f8      	ldr	r0, [r7, #12]
    d280:	4b14      	ldr	r3, [pc, #80]	; (d2d4 <_ZN16FlashMemoryClass9readFlashEPvmm+0x6c>)
    d282:	4798      	blx	r3
	//	send 3 address bytes
	Send_Byte(((src & 0xFFFFFF) >> 16));
    d284:	687b      	ldr	r3, [r7, #4]
    d286:	0c1b      	lsrs	r3, r3, #16
    d288:	b2db      	uxtb	r3, r3
    d28a:	4619      	mov	r1, r3
    d28c:	68f8      	ldr	r0, [r7, #12]
    d28e:	4b11      	ldr	r3, [pc, #68]	; (d2d4 <_ZN16FlashMemoryClass9readFlashEPvmm+0x6c>)
    d290:	4798      	blx	r3
	Send_Byte(((src & 0xFFFF) >> 8));
    d292:	687b      	ldr	r3, [r7, #4]
    d294:	0a1b      	lsrs	r3, r3, #8
    d296:	b2db      	uxtb	r3, r3
    d298:	4619      	mov	r1, r3
    d29a:	68f8      	ldr	r0, [r7, #12]
    d29c:	4b0d      	ldr	r3, [pc, #52]	; (d2d4 <_ZN16FlashMemoryClass9readFlashEPvmm+0x6c>)
    d29e:	4798      	blx	r3
	Send_Byte(src & 0xFF);
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	b2db      	uxtb	r3, r3
    d2a4:	4619      	mov	r1, r3
    d2a6:	68f8      	ldr	r0, [r7, #12]
    d2a8:	4b0a      	ldr	r3, [pc, #40]	; (d2d4 <_ZN16FlashMemoryClass9readFlashEPvmm+0x6c>)
    d2aa:	4798      	blx	r3
	spi.read((uint8_t *)dest, (uint16_t)size);
    d2ac:	68fb      	ldr	r3, [r7, #12]
    d2ae:	3318      	adds	r3, #24
    d2b0:	683a      	ldr	r2, [r7, #0]
    d2b2:	b292      	uxth	r2, r2
    d2b4:	68b9      	ldr	r1, [r7, #8]
    d2b6:	4618      	mov	r0, r3
    d2b8:	4b07      	ldr	r3, [pc, #28]	; (d2d8 <_ZN16FlashMemoryClass9readFlashEPvmm+0x70>)
    d2ba:	4798      	blx	r3
	CE_High_Flash();
    d2bc:	68f8      	ldr	r0, [r7, #12]
    d2be:	4b07      	ldr	r3, [pc, #28]	; (d2dc <_ZN16FlashMemoryClass9readFlashEPvmm+0x74>)
    d2c0:	4798      	blx	r3
	return (uint8_t)src;
    d2c2:	687b      	ldr	r3, [r7, #4]
    d2c4:	b2db      	uxtb	r3, r3
}
    d2c6:	4618      	mov	r0, r3
    d2c8:	3710      	adds	r7, #16
    d2ca:	46bd      	mov	sp, r7
    d2cc:	bd80      	pop	{r7, pc}
    d2ce:	bf00      	nop
    d2d0:	0000d2e1 	.word	0x0000d2e1
    d2d4:	0000d339 	.word	0x0000d339
    d2d8:	0000e811 	.word	0x0000e811
    d2dc:	0000d30d 	.word	0x0000d30d

0000d2e0 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
void FlashMemoryClass::CE_Low_Flash(void)
{
    d2e0:	b580      	push	{r7, lr}
    d2e2:	b082      	sub	sp, #8
    d2e4:	af00      	add	r7, sp, #0
    d2e6:	6078      	str	r0, [r7, #4]
	garbage=0;
    d2e8:	687b      	ldr	r3, [r7, #4]
    d2ea:	2200      	movs	r2, #0
    d2ec:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    d2ee:	2100      	movs	r1, #0
    d2f0:	200f      	movs	r0, #15
    d2f2:	4b05      	ldr	r3, [pc, #20]	; (d308 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    d2f4:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    d2f6:	2101      	movs	r1, #1
    d2f8:	2013      	movs	r0, #19
    d2fa:	4b03      	ldr	r3, [pc, #12]	; (d308 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    d2fc:	4798      	blx	r3
}
    d2fe:	bf00      	nop
    d300:	3708      	adds	r7, #8
    d302:	46bd      	mov	sp, r7
    d304:	bd80      	pop	{r7, pc}
    d306:	bf00      	nop
    d308:	0000d0b9 	.word	0x0000d0b9

0000d30c <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    d30c:	b580      	push	{r7, lr}
    d30e:	b082      	sub	sp, #8
    d310:	af00      	add	r7, sp, #0
    d312:	6078      	str	r0, [r7, #4]
	garbage=0;
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	2200      	movs	r2, #0
    d318:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    d31a:	2101      	movs	r1, #1
    d31c:	200f      	movs	r0, #15
    d31e:	4b05      	ldr	r3, [pc, #20]	; (d334 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    d320:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    d322:	2101      	movs	r1, #1
    d324:	2013      	movs	r0, #19
    d326:	4b03      	ldr	r3, [pc, #12]	; (d334 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    d328:	4798      	blx	r3
}
    d32a:	bf00      	nop
    d32c:	3708      	adds	r7, #8
    d32e:	46bd      	mov	sp, r7
    d330:	bd80      	pop	{r7, pc}
    d332:	bf00      	nop
    d334:	0000d0b9 	.word	0x0000d0b9

0000d338 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    d338:	b580      	push	{r7, lr}
    d33a:	b082      	sub	sp, #8
    d33c:	af00      	add	r7, sp, #0
    d33e:	6078      	str	r0, [r7, #4]
    d340:	460b      	mov	r3, r1
    d342:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.write(&byte,1);
    d344:	687b      	ldr	r3, [r7, #4]
    d346:	3318      	adds	r3, #24
    d348:	1cf9      	adds	r1, r7, #3
    d34a:	2201      	movs	r2, #1
    d34c:	4618      	mov	r0, r3
    d34e:	4b03      	ldr	r3, [pc, #12]	; (d35c <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    d350:	4798      	blx	r3
	return byte;
    d352:	78fb      	ldrb	r3, [r7, #3]
}
    d354:	4618      	mov	r0, r3
    d356:	3708      	adds	r7, #8
    d358:	46bd      	mov	sp, r7
    d35a:	bd80      	pop	{r7, pc}
    d35c:	0000e7cd 	.word	0x0000e7cd

0000d360 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    d360:	b580      	push	{r7, lr}
    d362:	b084      	sub	sp, #16
    d364:	af00      	add	r7, sp, #0
    d366:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
    d368:	687b      	ldr	r3, [r7, #4]
    d36a:	3318      	adds	r3, #24
    d36c:	f107 010f 	add.w	r1, r7, #15
    d370:	2201      	movs	r2, #1
    d372:	4618      	mov	r0, r3
    d374:	4b03      	ldr	r3, [pc, #12]	; (d384 <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    d376:	4798      	blx	r3
	
	return byte;
    d378:	7bfb      	ldrb	r3, [r7, #15]
}
    d37a:	4618      	mov	r0, r3
    d37c:	3710      	adds	r7, #16
    d37e:	46bd      	mov	sp, r7
    d380:	bd80      	pop	{r7, pc}
    d382:	bf00      	nop
    d384:	0000e811 	.word	0x0000e811

0000d388 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    d388:	b580      	push	{r7, lr}
    d38a:	b082      	sub	sp, #8
    d38c:	af00      	add	r7, sp, #0
    d38e:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    d390:	6878      	ldr	r0, [r7, #4]
    d392:	4b0d      	ldr	r3, [pc, #52]	; (d3c8 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    d394:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    d396:	2106      	movs	r1, #6
    d398:	6878      	ldr	r0, [r7, #4]
    d39a:	4b0c      	ldr	r3, [pc, #48]	; (d3cc <_ZN16FlashMemoryClass4WRENEv+0x44>)
    d39c:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    d39e:	6878      	ldr	r0, [r7, #4]
    d3a0:	4b0b      	ldr	r3, [pc, #44]	; (d3d0 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    d3a2:	4798      	blx	r3
		status=ReadStatusRegister();
    d3a4:	6878      	ldr	r0, [r7, #4]
    d3a6:	4b0b      	ldr	r3, [pc, #44]	; (d3d4 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    d3a8:	4798      	blx	r3
    d3aa:	4603      	mov	r3, r0
    d3ac:	461a      	mov	r2, r3
    d3ae:	687b      	ldr	r3, [r7, #4]
    d3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	} while ((status&&(0x02))==0);
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d100      	bne.n	d3c0 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    d3be:	e7e7      	b.n	d390 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    d3c0:	bf00      	nop
    d3c2:	3708      	adds	r7, #8
    d3c4:	46bd      	mov	sp, r7
    d3c6:	bd80      	pop	{r7, pc}
    d3c8:	0000d2e1 	.word	0x0000d2e1
    d3cc:	0000d339 	.word	0x0000d339
    d3d0:	0000d30d 	.word	0x0000d30d
    d3d4:	0000d671 	.word	0x0000d671

0000d3d8 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    d3d8:	b580      	push	{r7, lr}
    d3da:	b082      	sub	sp, #8
    d3dc:	af00      	add	r7, sp, #0
    d3de:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    d3e0:	6878      	ldr	r0, [r7, #4]
    d3e2:	4b06      	ldr	r3, [pc, #24]	; (d3fc <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    d3e4:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    d3e6:	2104      	movs	r1, #4
    d3e8:	6878      	ldr	r0, [r7, #4]
    d3ea:	4b05      	ldr	r3, [pc, #20]	; (d400 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    d3ec:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    d3ee:	6878      	ldr	r0, [r7, #4]
    d3f0:	4b04      	ldr	r3, [pc, #16]	; (d404 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    d3f2:	4798      	blx	r3
	
}
    d3f4:	bf00      	nop
    d3f6:	3708      	adds	r7, #8
    d3f8:	46bd      	mov	sp, r7
    d3fa:	bd80      	pop	{r7, pc}
    d3fc:	0000d2e1 	.word	0x0000d2e1
    d400:	0000d339 	.word	0x0000d339
    d404:	0000d30d 	.word	0x0000d30d

0000d408 <_ZN16FlashMemoryClass10writeFlashEmPKvm>:
	//	WaitBusy();
	CE_High_Flash();			// disable device
	delay_ms(100);
	flashClose();
}
uint8_t FlashMemoryClass::writeFlash(uint32_t dest, const void* src, uint32_t size){
    d408:	b580      	push	{r7, lr}
    d40a:	b086      	sub	sp, #24
    d40c:	af00      	add	r7, sp, #0
    d40e:	60f8      	str	r0, [r7, #12]
    d410:	60b9      	str	r1, [r7, #8]
    d412:	607a      	str	r2, [r7, #4]
    d414:	603b      	str	r3, [r7, #0]
	const uint8_t*	srcPtr = (const uint8_t*)src;
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	617b      	str	r3, [r7, #20]
		
	while (size > 0){
    d41a:	683b      	ldr	r3, [r7, #0]
    d41c:	2b00      	cmp	r3, #0
    d41e:	d041      	beq.n	d4a4 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x9c>
		uint16_t	i;
		
		WREN();
    d420:	68f8      	ldr	r0, [r7, #12]
    d422:	4b23      	ldr	r3, [pc, #140]	; (d4b0 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xa8>)
    d424:	4798      	blx	r3
		CE_Low_Flash();
    d426:	68f8      	ldr	r0, [r7, #12]
    d428:	4b22      	ldr	r3, [pc, #136]	; (d4b4 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xac>)
    d42a:	4798      	blx	r3
		Send_Byte(0x02);
    d42c:	2102      	movs	r1, #2
    d42e:	68f8      	ldr	r0, [r7, #12]
    d430:	4b21      	ldr	r3, [pc, #132]	; (d4b8 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb0>)
    d432:	4798      	blx	r3
		Send_Byte(((dest & 0xFFFFFF) >> 16));
    d434:	68bb      	ldr	r3, [r7, #8]
    d436:	0c1b      	lsrs	r3, r3, #16
    d438:	b2db      	uxtb	r3, r3
    d43a:	4619      	mov	r1, r3
    d43c:	68f8      	ldr	r0, [r7, #12]
    d43e:	4b1e      	ldr	r3, [pc, #120]	; (d4b8 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb0>)
    d440:	4798      	blx	r3
		Send_Byte(((dest & 0xFFFF) >> 8));
    d442:	68bb      	ldr	r3, [r7, #8]
    d444:	0a1b      	lsrs	r3, r3, #8
    d446:	b2db      	uxtb	r3, r3
    d448:	4619      	mov	r1, r3
    d44a:	68f8      	ldr	r0, [r7, #12]
    d44c:	4b1a      	ldr	r3, [pc, #104]	; (d4b8 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb0>)
    d44e:	4798      	blx	r3
		Send_Byte(dest & 0xFF);
    d450:	68bb      	ldr	r3, [r7, #8]
    d452:	b2db      	uxtb	r3, r3
    d454:	4619      	mov	r1, r3
    d456:	68f8      	ldr	r0, [r7, #12]
    d458:	4b17      	ldr	r3, [pc, #92]	; (d4b8 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb0>)
    d45a:	4798      	blx	r3
	
		for (i=0; (i < 256) && (i<size); i++){
    d45c:	2300      	movs	r3, #0
    d45e:	827b      	strh	r3, [r7, #18]
    d460:	8a7b      	ldrh	r3, [r7, #18]
    d462:	2bff      	cmp	r3, #255	; 0xff
    d464:	dc0f      	bgt.n	d486 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x7e>
    d466:	8a7a      	ldrh	r2, [r7, #18]
    d468:	683b      	ldr	r3, [r7, #0]
    d46a:	429a      	cmp	r2, r3
    d46c:	d20b      	bcs.n	d486 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x7e>
			Send_Byte(*srcPtr++);
    d46e:	697b      	ldr	r3, [r7, #20]
    d470:	1c5a      	adds	r2, r3, #1
    d472:	617a      	str	r2, [r7, #20]
    d474:	781b      	ldrb	r3, [r3, #0]
    d476:	4619      	mov	r1, r3
    d478:	68f8      	ldr	r0, [r7, #12]
    d47a:	4b0f      	ldr	r3, [pc, #60]	; (d4b8 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb0>)
    d47c:	4798      	blx	r3
		for (i=0; (i < 256) && (i<size); i++){
    d47e:	8a7b      	ldrh	r3, [r7, #18]
    d480:	3301      	adds	r3, #1
    d482:	827b      	strh	r3, [r7, #18]
    d484:	e7ec      	b.n	d460 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x58>
		}
		CE_High_Flash();
    d486:	68f8      	ldr	r0, [r7, #12]
    d488:	4b0c      	ldr	r3, [pc, #48]	; (d4bc <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb4>)
    d48a:	4798      	blx	r3
		WRDI();
    d48c:	68f8      	ldr	r0, [r7, #12]
    d48e:	4b0c      	ldr	r3, [pc, #48]	; (d4c0 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xb8>)
    d490:	4798      	blx	r3
		size -= i;
    d492:	8a7b      	ldrh	r3, [r7, #18]
    d494:	683a      	ldr	r2, [r7, #0]
    d496:	1ad3      	subs	r3, r2, r3
    d498:	603b      	str	r3, [r7, #0]
		dest += i;
    d49a:	8a7b      	ldrh	r3, [r7, #18]
    d49c:	68ba      	ldr	r2, [r7, #8]
    d49e:	4413      	add	r3, r2
    d4a0:	60bb      	str	r3, [r7, #8]
	while (size > 0){
    d4a2:	e7ba      	b.n	d41a <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x12>
		}
		return *srcPtr;
    d4a4:	697b      	ldr	r3, [r7, #20]
    d4a6:	781b      	ldrb	r3, [r3, #0]

	}
    d4a8:	4618      	mov	r0, r3
    d4aa:	3718      	adds	r7, #24
    d4ac:	46bd      	mov	sp, r7
    d4ae:	bd80      	pop	{r7, pc}
    d4b0:	0000d389 	.word	0x0000d389
    d4b4:	0000d2e1 	.word	0x0000d2e1
    d4b8:	0000d339 	.word	0x0000d339
    d4bc:	0000d30d 	.word	0x0000d30d
    d4c0:	0000d3d9 	.word	0x0000d3d9

0000d4c4 <_ZN16FlashMemoryClass10eraseFlashEmm>:
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    d4c4:	b580      	push	{r7, lr}
    d4c6:	b086      	sub	sp, #24
    d4c8:	af00      	add	r7, sp, #0
    d4ca:	60f8      	str	r0, [r7, #12]
    d4cc:	60b9      	str	r1, [r7, #8]
    d4ce:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    d4d4:	68bb      	ldr	r3, [r7, #8]
    d4d6:	613b      	str	r3, [r7, #16]
	flashOpen();
    d4d8:	68f8      	ldr	r0, [r7, #12]
    d4da:	4b21      	ldr	r3, [pc, #132]	; (d560 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    d4dc:	4798      	blx	r3
	while (eraseRemaining > 0)
    d4de:	697b      	ldr	r3, [r7, #20]
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d035      	beq.n	d550 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    d4e4:	68f8      	ldr	r0, [r7, #12]
    d4e6:	4b1f      	ldr	r3, [pc, #124]	; (d564 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    d4e8:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    d4ea:	697b      	ldr	r3, [r7, #20]
    d4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d4f0:	d806      	bhi.n	d500 <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    d4f2:	6939      	ldr	r1, [r7, #16]
    d4f4:	68f8      	ldr	r0, [r7, #12]
    d4f6:	4b1c      	ldr	r3, [pc, #112]	; (d568 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    d4f8:	4798      	blx	r3
		eraseRemaining = 0;
    d4fa:	2300      	movs	r3, #0
    d4fc:	617b      	str	r3, [r7, #20]
    d4fe:	e020      	b.n	d542 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    d500:	697b      	ldr	r3, [r7, #20]
    d502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d506:	d20c      	bcs.n	d522 <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    d508:	6939      	ldr	r1, [r7, #16]
    d50a:	68f8      	ldr	r0, [r7, #12]
    d50c:	4b16      	ldr	r3, [pc, #88]	; (d568 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    d50e:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    d510:	693b      	ldr	r3, [r7, #16]
    d512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d516:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    d518:	697b      	ldr	r3, [r7, #20]
    d51a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d51e:	617b      	str	r3, [r7, #20]
    d520:	e00f      	b.n	d542 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    d522:	697b      	ldr	r3, [r7, #20]
    d524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d528:	d30b      	bcc.n	d542 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    d52a:	6939      	ldr	r1, [r7, #16]
    d52c:	68f8      	ldr	r0, [r7, #12]
    d52e:	4b0f      	ldr	r3, [pc, #60]	; (d56c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    d530:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    d532:	693b      	ldr	r3, [r7, #16]
    d534:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d538:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    d53a:	697b      	ldr	r3, [r7, #20]
    d53c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d540:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    d542:	68f8      	ldr	r0, [r7, #12]
    d544:	4b0a      	ldr	r3, [pc, #40]	; (d570 <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    d546:	4798      	blx	r3
	WRDI();
    d548:	68f8      	ldr	r0, [r7, #12]
    d54a:	4b0a      	ldr	r3, [pc, #40]	; (d574 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    d54c:	4798      	blx	r3
	while (eraseRemaining > 0)
    d54e:	e7c6      	b.n	d4de <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    d550:	68f8      	ldr	r0, [r7, #12]
    d552:	4b09      	ldr	r3, [pc, #36]	; (d578 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    d554:	4798      	blx	r3
}
    d556:	bf00      	nop
    d558:	3718      	adds	r7, #24
    d55a:	46bd      	mov	sp, r7
    d55c:	bd80      	pop	{r7, pc}
    d55e:	bf00      	nop
    d560:	0000d241 	.word	0x0000d241
    d564:	0000d389 	.word	0x0000d389
    d568:	0000d70d 	.word	0x0000d70d
    d56c:	0000d57d 	.word	0x0000d57d
    d570:	0000d5d9 	.word	0x0000d5d9
    d574:	0000d3d9 	.word	0x0000d3d9
    d578:	0000d6e9 	.word	0x0000d6e9

0000d57c <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    d57c:	b580      	push	{r7, lr}
    d57e:	b082      	sub	sp, #8
    d580:	af00      	add	r7, sp, #0
    d582:	6078      	str	r0, [r7, #4]
    d584:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    d586:	6878      	ldr	r0, [r7, #4]
    d588:	4b10      	ldr	r3, [pc, #64]	; (d5cc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    d58a:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    d58c:	21d8      	movs	r1, #216	; 0xd8
    d58e:	6878      	ldr	r0, [r7, #4]
    d590:	4b0f      	ldr	r3, [pc, #60]	; (d5d0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d592:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    d594:	683b      	ldr	r3, [r7, #0]
    d596:	0c1b      	lsrs	r3, r3, #16
    d598:	b2db      	uxtb	r3, r3
    d59a:	4619      	mov	r1, r3
    d59c:	6878      	ldr	r0, [r7, #4]
    d59e:	4b0c      	ldr	r3, [pc, #48]	; (d5d0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d5a0:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    d5a2:	683b      	ldr	r3, [r7, #0]
    d5a4:	0a1b      	lsrs	r3, r3, #8
    d5a6:	b2db      	uxtb	r3, r3
    d5a8:	4619      	mov	r1, r3
    d5aa:	6878      	ldr	r0, [r7, #4]
    d5ac:	4b08      	ldr	r3, [pc, #32]	; (d5d0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d5ae:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    d5b0:	683b      	ldr	r3, [r7, #0]
    d5b2:	b2db      	uxtb	r3, r3
    d5b4:	4619      	mov	r1, r3
    d5b6:	6878      	ldr	r0, [r7, #4]
    d5b8:	4b05      	ldr	r3, [pc, #20]	; (d5d0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d5ba:	4798      	blx	r3
		CE_High_Flash();				// disable device
    d5bc:	6878      	ldr	r0, [r7, #4]
    d5be:	4b05      	ldr	r3, [pc, #20]	; (d5d4 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    d5c0:	4798      	blx	r3
		
}
    d5c2:	bf00      	nop
    d5c4:	3708      	adds	r7, #8
    d5c6:	46bd      	mov	sp, r7
    d5c8:	bd80      	pop	{r7, pc}
    d5ca:	bf00      	nop
    d5cc:	0000d2e1 	.word	0x0000d2e1
    d5d0:	0000d339 	.word	0x0000d339
    d5d4:	0000d30d 	.word	0x0000d30d

0000d5d8 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    d5d8:	b580      	push	{r7, lr}
    d5da:	b082      	sub	sp, #8
    d5dc:	af00      	add	r7, sp, #0
    d5de:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    d5e0:	6878      	ldr	r0, [r7, #4]
    d5e2:	4b0f      	ldr	r3, [pc, #60]	; (d620 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    d5e4:	4798      	blx	r3
    d5e6:	4603      	mov	r3, r0
    d5e8:	461a      	mov	r2, r3
    d5ea:	687b      	ldr	r3, [r7, #4]
    d5ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    d5f0:	687b      	ldr	r3, [r7, #4]
    d5f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d5f6:	f003 0301 	and.w	r3, r3, #1
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	d008      	beq.n	d610 <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    d5fe:	6878      	ldr	r0, [r7, #4]
    d600:	4b07      	ldr	r3, [pc, #28]	; (d620 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    d602:	4798      	blx	r3
    d604:	4603      	mov	r3, r0
    d606:	461a      	mov	r2, r3
    d608:	687b      	ldr	r3, [r7, #4]
    d60a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    d60e:	e7ef      	b.n	d5f0 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    d610:	687b      	ldr	r3, [r7, #4]
    d612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
	}
    d616:	4618      	mov	r0, r3
    d618:	3708      	adds	r7, #8
    d61a:	46bd      	mov	sp, r7
    d61c:	bd80      	pop	{r7, pc}
    d61e:	bf00      	nop
    d620:	0000d671 	.word	0x0000d671

0000d624 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    d624:	b580      	push	{r7, lr}
    d626:	b082      	sub	sp, #8
    d628:	af00      	add	r7, sp, #0
    d62a:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    d62c:	6878      	ldr	r0, [r7, #4]
    d62e:	4b0d      	ldr	r3, [pc, #52]	; (d664 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    d630:	4798      	blx	r3
	status = ReadStatusRegister();
    d632:	6878      	ldr	r0, [r7, #4]
    d634:	4b0c      	ldr	r3, [pc, #48]	; (d668 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    d636:	4798      	blx	r3
    d638:	4603      	mov	r3, r0
    d63a:	461a      	mov	r2, r3
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	flashClose();
    d642:	6878      	ldr	r0, [r7, #4]
    d644:	4b09      	ldr	r3, [pc, #36]	; (d66c <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    d646:	4798      	blx	r3
	return	(status&0x01)==0;
    d648:	687b      	ldr	r3, [r7, #4]
    d64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d64e:	f003 0301 	and.w	r3, r3, #1
    d652:	2b00      	cmp	r3, #0
    d654:	bf0c      	ite	eq
    d656:	2301      	moveq	r3, #1
    d658:	2300      	movne	r3, #0
    d65a:	b2db      	uxtb	r3, r3
}
    d65c:	4618      	mov	r0, r3
    d65e:	3708      	adds	r7, #8
    d660:	46bd      	mov	sp, r7
    d662:	bd80      	pop	{r7, pc}
    d664:	0000d241 	.word	0x0000d241
    d668:	0000d671 	.word	0x0000d671
    d66c:	0000d6e9 	.word	0x0000d6e9

0000d670 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    d670:	b580      	push	{r7, lr}
    d672:	b082      	sub	sp, #8
    d674:	af00      	add	r7, sp, #0
    d676:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    d678:	2105      	movs	r1, #5
    d67a:	6878      	ldr	r0, [r7, #4]
    d67c:	4b06      	ldr	r3, [pc, #24]	; (d698 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    d67e:	4798      	blx	r3
    d680:	4603      	mov	r3, r0
    d682:	461a      	mov	r2, r3
    d684:	687b      	ldr	r3, [r7, #4]
    d686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		return status;
    d68a:	687b      	ldr	r3, [r7, #4]
    d68c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
	}
    d690:	4618      	mov	r0, r3
    d692:	3708      	adds	r7, #8
    d694:	46bd      	mov	sp, r7
    d696:	bd80      	pop	{r7, pc}
    d698:	0000d69d 	.word	0x0000d69d

0000d69c <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    d69c:	b580      	push	{r7, lr}
    d69e:	b084      	sub	sp, #16
    d6a0:	af00      	add	r7, sp, #0
    d6a2:	6078      	str	r0, [r7, #4]
    d6a4:	460b      	mov	r3, r1
    d6a6:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    d6a8:	2300      	movs	r3, #0
    d6aa:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    d6ac:	6878      	ldr	r0, [r7, #4]
    d6ae:	4b0a      	ldr	r3, [pc, #40]	; (d6d8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    d6b0:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    d6b2:	78fb      	ldrb	r3, [r7, #3]
    d6b4:	4619      	mov	r1, r3
    d6b6:	6878      	ldr	r0, [r7, #4]
    d6b8:	4b08      	ldr	r3, [pc, #32]	; (d6dc <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    d6ba:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    d6bc:	6878      	ldr	r0, [r7, #4]
    d6be:	4b08      	ldr	r3, [pc, #32]	; (d6e0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    d6c0:	4798      	blx	r3
    d6c2:	4603      	mov	r3, r0
    d6c4:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    d6c6:	6878      	ldr	r0, [r7, #4]
    d6c8:	4b06      	ldr	r3, [pc, #24]	; (d6e4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    d6ca:	4798      	blx	r3
	return b;
    d6cc:	7bfb      	ldrb	r3, [r7, #15]
}
    d6ce:	4618      	mov	r0, r3
    d6d0:	3710      	adds	r7, #16
    d6d2:	46bd      	mov	sp, r7
    d6d4:	bd80      	pop	{r7, pc}
    d6d6:	bf00      	nop
    d6d8:	0000d2e1 	.word	0x0000d2e1
    d6dc:	0000d339 	.word	0x0000d339
    d6e0:	0000d361 	.word	0x0000d361
    d6e4:	0000d30d 	.word	0x0000d30d

0000d6e8 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    d6e8:	b580      	push	{r7, lr}
    d6ea:	b082      	sub	sp, #8
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	6078      	str	r0, [r7, #4]
	garbage=0;
    d6f0:	687b      	ldr	r3, [r7, #4]
    d6f2:	2200      	movs	r2, #0
    d6f4:	609a      	str	r2, [r3, #8]
		spi.disable();
    d6f6:	687b      	ldr	r3, [r7, #4]
    d6f8:	3318      	adds	r3, #24
    d6fa:	4618      	mov	r0, r3
    d6fc:	4b02      	ldr	r3, [pc, #8]	; (d708 <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    d6fe:	4798      	blx	r3
	}
    d700:	bf00      	nop
    d702:	3708      	adds	r7, #8
    d704:	46bd      	mov	sp, r7
    d706:	bd80      	pop	{r7, pc}
    d708:	0000e855 	.word	0x0000e855

0000d70c <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    d70c:	b580      	push	{r7, lr}
    d70e:	b082      	sub	sp, #8
    d710:	af00      	add	r7, sp, #0
    d712:	6078      	str	r0, [r7, #4]
    d714:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    d716:	6878      	ldr	r0, [r7, #4]
    d718:	4b10      	ldr	r3, [pc, #64]	; (d75c <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    d71a:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    d71c:	2120      	movs	r1, #32
    d71e:	6878      	ldr	r0, [r7, #4]
    d720:	4b0f      	ldr	r3, [pc, #60]	; (d760 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d722:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    d724:	683b      	ldr	r3, [r7, #0]
    d726:	0c1b      	lsrs	r3, r3, #16
    d728:	b2db      	uxtb	r3, r3
    d72a:	4619      	mov	r1, r3
    d72c:	6878      	ldr	r0, [r7, #4]
    d72e:	4b0c      	ldr	r3, [pc, #48]	; (d760 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d730:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    d732:	683b      	ldr	r3, [r7, #0]
    d734:	0a1b      	lsrs	r3, r3, #8
    d736:	b2db      	uxtb	r3, r3
    d738:	4619      	mov	r1, r3
    d73a:	6878      	ldr	r0, [r7, #4]
    d73c:	4b08      	ldr	r3, [pc, #32]	; (d760 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d73e:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    d740:	683b      	ldr	r3, [r7, #0]
    d742:	b2db      	uxtb	r3, r3
    d744:	4619      	mov	r1, r3
    d746:	6878      	ldr	r0, [r7, #4]
    d748:	4b05      	ldr	r3, [pc, #20]	; (d760 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d74a:	4798      	blx	r3
	CE_High_Flash();				// disable device
    d74c:	6878      	ldr	r0, [r7, #4]
    d74e:	4b05      	ldr	r3, [pc, #20]	; (d764 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    d750:	4798      	blx	r3
}
    d752:	bf00      	nop
    d754:	3708      	adds	r7, #8
    d756:	46bd      	mov	sp, r7
    d758:	bd80      	pop	{r7, pc}
    d75a:	bf00      	nop
    d75c:	0000d2e1 	.word	0x0000d2e1
    d760:	0000d339 	.word	0x0000d339
    d764:	0000d30d 	.word	0x0000d30d

0000d768 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    d768:	b580      	push	{r7, lr}
    d76a:	b086      	sub	sp, #24
    d76c:	af00      	add	r7, sp, #0
    d76e:	60f8      	str	r0, [r7, #12]
    d770:	60b9      	str	r1, [r7, #8]
    d772:	607a      	str	r2, [r7, #4]
    d774:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    d776:	68f8      	ldr	r0, [r7, #12]
    d778:	4b2b      	ldr	r3, [pc, #172]	; (d828 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    d77a:	4798      	blx	r3
    d77c:	4603      	mov	r3, r0
    d77e:	f083 0301 	eor.w	r3, r3, #1
    d782:	b2db      	uxtb	r3, r3
    d784:	2b00      	cmp	r3, #0
    d786:	d000      	beq.n	d78a <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    d788:	e7f5      	b.n	d776 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    d78a:	68f8      	ldr	r0, [r7, #12]
    d78c:	4b27      	ldr	r3, [pc, #156]	; (d82c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    d78e:	4798      	blx	r3
	WREN();
    d790:	68f8      	ldr	r0, [r7, #12]
    d792:	4b27      	ldr	r3, [pc, #156]	; (d830 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    d794:	4798      	blx	r3
	CE_Low_Flash();
    d796:	68f8      	ldr	r0, [r7, #12]
    d798:	4b26      	ldr	r3, [pc, #152]	; (d834 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    d79a:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    d79c:	68fb      	ldr	r3, [r7, #12]
    d79e:	2202      	movs	r2, #2
    d7a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    d7a4:	687b      	ldr	r3, [r7, #4]
    d7a6:	0c1b      	lsrs	r3, r3, #16
    d7a8:	b2da      	uxtb	r2, r3
    d7aa:	68fb      	ldr	r3, [r7, #12]
    d7ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    d7b0:	687b      	ldr	r3, [r7, #4]
    d7b2:	0a1b      	lsrs	r3, r3, #8
    d7b4:	b2da      	uxtb	r2, r3
    d7b6:	68fb      	ldr	r3, [r7, #12]
    d7b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	localBuffer[3]=(uint8_t)(addr&0xFF);
    d7bc:	687b      	ldr	r3, [r7, #4]
    d7be:	b2da      	uxtb	r2, r3
    d7c0:	68fb      	ldr	r3, [r7, #12]
    d7c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (uint32_t i = 4; i <(size)+4; i++)
    d7c6:	2304      	movs	r3, #4
    d7c8:	617b      	str	r3, [r7, #20]
    d7ca:	683b      	ldr	r3, [r7, #0]
    d7cc:	1d1a      	adds	r2, r3, #4
    d7ce:	697b      	ldr	r3, [r7, #20]
    d7d0:	429a      	cmp	r2, r3
    d7d2:	d90e      	bls.n	d7f2 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    d7d4:	68bb      	ldr	r3, [r7, #8]
    d7d6:	7819      	ldrb	r1, [r3, #0]
    d7d8:	68fa      	ldr	r2, [r7, #12]
    d7da:	697b      	ldr	r3, [r7, #20]
    d7dc:	4413      	add	r3, r2
    d7de:	332c      	adds	r3, #44	; 0x2c
    d7e0:	460a      	mov	r2, r1
    d7e2:	701a      	strb	r2, [r3, #0]
		p++;
    d7e4:	68bb      	ldr	r3, [r7, #8]
    d7e6:	3301      	adds	r3, #1
    d7e8:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    d7ea:	697b      	ldr	r3, [r7, #20]
    d7ec:	3301      	adds	r3, #1
    d7ee:	617b      	str	r3, [r7, #20]
    d7f0:	e7eb      	b.n	d7ca <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.write(&localBuffer[0],size+4);
    d7f2:	68fb      	ldr	r3, [r7, #12]
    d7f4:	f103 0018 	add.w	r0, r3, #24
    d7f8:	68fb      	ldr	r3, [r7, #12]
    d7fa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    d7fe:	683b      	ldr	r3, [r7, #0]
    d800:	3304      	adds	r3, #4
    d802:	461a      	mov	r2, r3
    d804:	4b0c      	ldr	r3, [pc, #48]	; (d838 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    d806:	4798      	blx	r3
    d808:	4603      	mov	r3, r0
    d80a:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    d80c:	68f8      	ldr	r0, [r7, #12]
    d80e:	4b0b      	ldr	r3, [pc, #44]	; (d83c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    d810:	4798      	blx	r3
	WRDI();
    d812:	68f8      	ldr	r0, [r7, #12]
    d814:	4b0a      	ldr	r3, [pc, #40]	; (d840 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    d816:	4798      	blx	r3
	flashClose();
    d818:	68f8      	ldr	r0, [r7, #12]
    d81a:	4b0a      	ldr	r3, [pc, #40]	; (d844 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    d81c:	4798      	blx	r3
	return	w;
    d81e:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    d820:	4618      	mov	r0, r3
    d822:	3718      	adds	r7, #24
    d824:	46bd      	mov	sp, r7
    d826:	bd80      	pop	{r7, pc}
    d828:	0000d625 	.word	0x0000d625
    d82c:	0000d241 	.word	0x0000d241
    d830:	0000d389 	.word	0x0000d389
    d834:	0000d2e1 	.word	0x0000d2e1
    d838:	0000e7cd 	.word	0x0000e7cd
    d83c:	0000d30d 	.word	0x0000d30d
    d840:	0000d3d9 	.word	0x0000d3d9
    d844:	0000d6e9 	.word	0x0000d6e9

0000d848 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    d848:	b580      	push	{r7, lr}
    d84a:	b086      	sub	sp, #24
    d84c:	af00      	add	r7, sp, #0
    d84e:	60f8      	str	r0, [r7, #12]
    d850:	60b9      	str	r1, [r7, #8]
    d852:	607a      	str	r2, [r7, #4]
    d854:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    d856:	68f8      	ldr	r0, [r7, #12]
    d858:	4b21      	ldr	r3, [pc, #132]	; (d8e0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    d85a:	4798      	blx	r3
    d85c:	4603      	mov	r3, r0
    d85e:	f083 0301 	eor.w	r3, r3, #1
    d862:	b2db      	uxtb	r3, r3
    d864:	2b00      	cmp	r3, #0
    d866:	d000      	beq.n	d86a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    d868:	e7f5      	b.n	d856 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    d86a:	68f8      	ldr	r0, [r7, #12]
    d86c:	4b1d      	ldr	r3, [pc, #116]	; (d8e4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    d86e:	4798      	blx	r3
	CE_Low_Flash();
    d870:	68f8      	ldr	r0, [r7, #12]
    d872:	4b1d      	ldr	r3, [pc, #116]	; (d8e8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    d874:	4798      	blx	r3
	instruction[0]=kFlashRead;
    d876:	68fb      	ldr	r3, [r7, #12]
    d878:	2203      	movs	r2, #3
    d87a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    d87e:	687b      	ldr	r3, [r7, #4]
    d880:	0c1b      	lsrs	r3, r3, #16
    d882:	b2da      	uxtb	r2, r3
    d884:	68fb      	ldr	r3, [r7, #12]
    d886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    d88a:	687b      	ldr	r3, [r7, #4]
    d88c:	0a1b      	lsrs	r3, r3, #8
    d88e:	b2da      	uxtb	r2, r3
    d890:	68fb      	ldr	r3, [r7, #12]
    d892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	instruction[3]=(uint8_t)(addr&0xFF);
    d896:	687b      	ldr	r3, [r7, #4]
    d898:	b2da      	uxtb	r2, r3
    d89a:	68fb      	ldr	r3, [r7, #12]
    d89c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		
	uint32_t	r=spi.write(instruction,4);
    d8a0:	68fb      	ldr	r3, [r7, #12]
    d8a2:	f103 0018 	add.w	r0, r3, #24
    d8a6:	68fb      	ldr	r3, [r7, #12]
    d8a8:	3340      	adds	r3, #64	; 0x40
    d8aa:	2204      	movs	r2, #4
    d8ac:	4619      	mov	r1, r3
    d8ae:	4b0f      	ldr	r3, [pc, #60]	; (d8ec <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    d8b0:	4798      	blx	r3
    d8b2:	4603      	mov	r3, r0
    d8b4:	617b      	str	r3, [r7, #20]
	r=spi.read(p,size);
    d8b6:	68fb      	ldr	r3, [r7, #12]
    d8b8:	3318      	adds	r3, #24
    d8ba:	683a      	ldr	r2, [r7, #0]
    d8bc:	68b9      	ldr	r1, [r7, #8]
    d8be:	4618      	mov	r0, r3
    d8c0:	4b0b      	ldr	r3, [pc, #44]	; (d8f0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    d8c2:	4798      	blx	r3
    d8c4:	4603      	mov	r3, r0
    d8c6:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    d8c8:	68f8      	ldr	r0, [r7, #12]
    d8ca:	4b0a      	ldr	r3, [pc, #40]	; (d8f4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    d8cc:	4798      	blx	r3
	flashClose();
    d8ce:	68f8      	ldr	r0, [r7, #12]
    d8d0:	4b09      	ldr	r3, [pc, #36]	; (d8f8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    d8d2:	4798      	blx	r3
	
	return	r;
    d8d4:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    d8d6:	4618      	mov	r0, r3
    d8d8:	3718      	adds	r7, #24
    d8da:	46bd      	mov	sp, r7
    d8dc:	bd80      	pop	{r7, pc}
    d8de:	bf00      	nop
    d8e0:	0000d625 	.word	0x0000d625
    d8e4:	0000d241 	.word	0x0000d241
    d8e8:	0000d2e1 	.word	0x0000d2e1
    d8ec:	0000e7cd 	.word	0x0000e7cd
    d8f0:	0000e811 	.word	0x0000e811
    d8f4:	0000d30d 	.word	0x0000d30d
    d8f8:	0000d6e9 	.word	0x0000d6e9

0000d8fc <_Z41__static_initialization_and_destruction_0ii>:
    d8fc:	b580      	push	{r7, lr}
    d8fe:	b082      	sub	sp, #8
    d900:	af00      	add	r7, sp, #0
    d902:	6078      	str	r0, [r7, #4]
    d904:	6039      	str	r1, [r7, #0]
    d906:	687b      	ldr	r3, [r7, #4]
    d908:	2b01      	cmp	r3, #1
    d90a:	d10d      	bne.n	d928 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d90c:	683b      	ldr	r3, [r7, #0]
    d90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d912:	4293      	cmp	r3, r2
    d914:	d108      	bne.n	d928 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d916:	4906      	ldr	r1, [pc, #24]	; (d930 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d918:	4806      	ldr	r0, [pc, #24]	; (d934 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d91a:	4b07      	ldr	r3, [pc, #28]	; (d938 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d91c:	4798      	blx	r3
    d91e:	4a07      	ldr	r2, [pc, #28]	; (d93c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d920:	4907      	ldr	r1, [pc, #28]	; (d940 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d922:	4804      	ldr	r0, [pc, #16]	; (d934 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d924:	4b07      	ldr	r3, [pc, #28]	; (d944 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d926:	4798      	blx	r3
    d928:	bf00      	nop
    d92a:	3708      	adds	r7, #8
    d92c:	46bd      	mov	sp, r7
    d92e:	bd80      	pop	{r7, pc}
    d930:	20000db8 	.word	0x20000db8
    d934:	20000bac 	.word	0x20000bac
    d938:	0000d0f1 	.word	0x0000d0f1
    d93c:	20000000 	.word	0x20000000
    d940:	0000d131 	.word	0x0000d131
    d944:	0000e915 	.word	0x0000e915

0000d948 <_GLOBAL__sub_I_flashLayout>:
    d948:	b580      	push	{r7, lr}
    d94a:	af00      	add	r7, sp, #0
    d94c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d950:	2001      	movs	r0, #1
    d952:	4b01      	ldr	r3, [pc, #4]	; (d958 <_GLOBAL__sub_I_flashLayout+0x10>)
    d954:	4798      	blx	r3
    d956:	bd80      	pop	{r7, pc}
    d958:	0000d8fd 	.word	0x0000d8fd

0000d95c <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    d95c:	b580      	push	{r7, lr}
    d95e:	b082      	sub	sp, #8
    d960:	af00      	add	r7, sp, #0
    d962:	6078      	str	r0, [r7, #4]
    d964:	687b      	ldr	r3, [r7, #4]
    d966:	3318      	adds	r3, #24
    d968:	4618      	mov	r0, r3
    d96a:	4b03      	ldr	r3, [pc, #12]	; (d978 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    d96c:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    d96e:	687b      	ldr	r3, [r7, #4]
    d970:	4618      	mov	r0, r3
    d972:	3708      	adds	r7, #8
    d974:	46bd      	mov	sp, r7
    d976:	bd80      	pop	{r7, pc}
    d978:	0000e721 	.word	0x0000e721

0000d97c <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    d97c:	b580      	push	{r7, lr}
    d97e:	b082      	sub	sp, #8
    d980:	af00      	add	r7, sp, #0
    d982:	6078      	str	r0, [r7, #4]
    d984:	6039      	str	r1, [r7, #0]
    d986:	687b      	ldr	r3, [r7, #4]
    d988:	3318      	adds	r3, #24
    d98a:	4618      	mov	r0, r3
    d98c:	4b08      	ldr	r3, [pc, #32]	; (d9b0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x34>)
    d98e:	4798      	blx	r3
{
	appParameters=defaultParameters;
    d990:	687b      	ldr	r3, [r7, #4]
    d992:	4a08      	ldr	r2, [pc, #32]	; (d9b4 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    d994:	7812      	ldrb	r2, [r2, #0]
    d996:	741a      	strb	r2, [r3, #16]
	spi_descriptor=spi_des;
    d998:	687b      	ldr	r3, [r7, #4]
    d99a:	683a      	ldr	r2, [r7, #0]
    d99c:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    d99e:	4b06      	ldr	r3, [pc, #24]	; (d9b8 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    d9a0:	681a      	ldr	r2, [r3, #0]
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    d9a6:	687b      	ldr	r3, [r7, #4]
    d9a8:	4618      	mov	r0, r3
    d9aa:	3708      	adds	r7, #8
    d9ac:	46bd      	mov	sp, r7
    d9ae:	bd80      	pop	{r7, pc}
    d9b0:	0000e701 	.word	0x0000e701
    d9b4:	0000f194 	.word	0x0000f194
    d9b8:	20000bf4 	.word	0x20000bf4

0000d9bc <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    d9bc:	b580      	push	{r7, lr}
    d9be:	b082      	sub	sp, #8
    d9c0:	af00      	add	r7, sp, #0
    d9c2:	6078      	str	r0, [r7, #4]
    d9c4:	6039      	str	r1, [r7, #0]
    d9c6:	687b      	ldr	r3, [r7, #4]
    d9c8:	2b01      	cmp	r3, #1
    d9ca:	d10d      	bne.n	d9e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d9cc:	683b      	ldr	r3, [r7, #0]
    d9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d9d2:	4293      	cmp	r3, r2
    d9d4:	d108      	bne.n	d9e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d9d6:	4906      	ldr	r1, [pc, #24]	; (d9f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d9d8:	4806      	ldr	r0, [pc, #24]	; (d9f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d9da:	4b07      	ldr	r3, [pc, #28]	; (d9f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d9dc:	4798      	blx	r3
    d9de:	4a07      	ldr	r2, [pc, #28]	; (d9fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d9e0:	4907      	ldr	r1, [pc, #28]	; (da00 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d9e2:	4804      	ldr	r0, [pc, #16]	; (d9f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d9e4:	4b07      	ldr	r3, [pc, #28]	; (da04 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d9e6:	4798      	blx	r3
    d9e8:	bf00      	nop
    d9ea:	3708      	adds	r7, #8
    d9ec:	46bd      	mov	sp, r7
    d9ee:	bd80      	pop	{r7, pc}
    d9f0:	20000db8 	.word	0x20000db8
    d9f4:	20000bf8 	.word	0x20000bf8
    d9f8:	0000d97d 	.word	0x0000d97d
    d9fc:	20000000 	.word	0x20000000
    da00:	0000d95d 	.word	0x0000d95d
    da04:	0000e915 	.word	0x0000e915

0000da08 <_GLOBAL__sub_I_framMemory>:
    da08:	b580      	push	{r7, lr}
    da0a:	af00      	add	r7, sp, #0
    da0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da10:	2001      	movs	r0, #1
    da12:	4b01      	ldr	r3, [pc, #4]	; (da18 <_GLOBAL__sub_I_framMemory+0x10>)
    da14:	4798      	blx	r3
    da16:	bd80      	pop	{r7, pc}
    da18:	0000d9bd 	.word	0x0000d9bd

0000da1c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    da1c:	b480      	push	{r7}
    da1e:	b083      	sub	sp, #12
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
    da24:	4a05      	ldr	r2, [pc, #20]	; (da3c <_ZN5PrintC1Ev+0x20>)
    da26:	687b      	ldr	r3, [r7, #4]
    da28:	601a      	str	r2, [r3, #0]
    da2a:	687b      	ldr	r3, [r7, #4]
    da2c:	2200      	movs	r2, #0
    da2e:	605a      	str	r2, [r3, #4]
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	4618      	mov	r0, r3
    da34:	370c      	adds	r7, #12
    da36:	46bd      	mov	sp, r7
    da38:	bc80      	pop	{r7}
    da3a:	4770      	bx	lr
    da3c:	0000f214 	.word	0x0000f214

0000da40 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    da40:	b480      	push	{r7}
    da42:	b083      	sub	sp, #12
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
    da48:	2300      	movs	r3, #0
    da4a:	4618      	mov	r0, r3
    da4c:	370c      	adds	r7, #12
    da4e:	46bd      	mov	sp, r7
    da50:	bc80      	pop	{r7}
    da52:	4770      	bx	lr

0000da54 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    da54:	b480      	push	{r7}
    da56:	b083      	sub	sp, #12
    da58:	af00      	add	r7, sp, #0
    da5a:	6078      	str	r0, [r7, #4]
    da5c:	bf00      	nop
    da5e:	370c      	adds	r7, #12
    da60:	46bd      	mov	sp, r7
    da62:	bc80      	pop	{r7}
    da64:	4770      	bx	lr
	...

0000da68 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    da68:	b580      	push	{r7, lr}
    da6a:	b082      	sub	sp, #8
    da6c:	af00      	add	r7, sp, #0
    da6e:	6078      	str	r0, [r7, #4]
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	4618      	mov	r0, r3
    da74:	4b06      	ldr	r3, [pc, #24]	; (da90 <_ZN6StreamC1Ev+0x28>)
    da76:	4798      	blx	r3
    da78:	4a06      	ldr	r2, [pc, #24]	; (da94 <_ZN6StreamC1Ev+0x2c>)
    da7a:	687b      	ldr	r3, [r7, #4]
    da7c:	601a      	str	r2, [r3, #0]
    da7e:	687b      	ldr	r3, [r7, #4]
    da80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    da84:	609a      	str	r2, [r3, #8]
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	4618      	mov	r0, r3
    da8a:	3708      	adds	r7, #8
    da8c:	46bd      	mov	sp, r7
    da8e:	bd80      	pop	{r7, pc}
    da90:	0000da1d 	.word	0x0000da1d
    da94:	0000f1d8 	.word	0x0000f1d8

0000da98 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    da98:	b480      	push	{r7}
    da9a:	b083      	sub	sp, #12
    da9c:	af00      	add	r7, sp, #0
    da9e:	4603      	mov	r3, r0
    daa0:	603a      	str	r2, [r7, #0]
    daa2:	71fb      	strb	r3, [r7, #7]
    daa4:	460b      	mov	r3, r1
    daa6:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    daa8:	4b08      	ldr	r3, [pc, #32]	; (dacc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    daaa:	681b      	ldr	r3, [r3, #0]
    daac:	2201      	movs	r2, #1
    daae:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    dab0:	4b06      	ldr	r3, [pc, #24]	; (dacc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dab2:	681b      	ldr	r3, [r3, #0]
    dab4:	2201      	movs	r2, #1
    dab6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    dab8:	4b04      	ldr	r3, [pc, #16]	; (dacc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    daba:	681b      	ldr	r3, [r3, #0]
    dabc:	2201      	movs	r2, #1
    dabe:	741a      	strb	r2, [r3, #16]


	return false;
    dac0:	2300      	movs	r3, #0
}
    dac2:	4618      	mov	r0, r3
    dac4:	370c      	adds	r7, #12
    dac6:	46bd      	mov	sp, r7
    dac8:	bc80      	pop	{r7}
    daca:	4770      	bx	lr
    dacc:	20000c68 	.word	0x20000c68

0000dad0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dad0:	b480      	push	{r7}
    dad2:	b083      	sub	sp, #12
    dad4:	af00      	add	r7, sp, #0
    dad6:	4603      	mov	r3, r0
    dad8:	603a      	str	r2, [r7, #0]
    dada:	71fb      	strb	r3, [r7, #7]
    dadc:	460b      	mov	r3, r1
    dade:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    dae0:	4b08      	ldr	r3, [pc, #32]	; (db04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dae2:	681b      	ldr	r3, [r3, #0]
    dae4:	2201      	movs	r2, #1
    dae6:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    dae8:	4b06      	ldr	r3, [pc, #24]	; (db04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    daea:	681b      	ldr	r3, [r3, #0]
    daec:	2201      	movs	r2, #1
    daee:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    daf0:	4b04      	ldr	r3, [pc, #16]	; (db04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    daf2:	681b      	ldr	r3, [r3, #0]
    daf4:	2201      	movs	r2, #1
    daf6:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    daf8:	2300      	movs	r3, #0
}
    dafa:	4618      	mov	r0, r3
    dafc:	370c      	adds	r7, #12
    dafe:	46bd      	mov	sp, r7
    db00:	bc80      	pop	{r7}
    db02:	4770      	bx	lr
    db04:	20000c68 	.word	0x20000c68

0000db08 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    db08:	b580      	push	{r7, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	af00      	add	r7, sp, #0
    db0e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    db10:	793b      	ldrb	r3, [r7, #4]
    db12:	f003 0301 	and.w	r3, r3, #1
    db16:	b2db      	uxtb	r3, r3
    db18:	2b00      	cmp	r3, #0
    db1a:	d013      	beq.n	db44 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    db1c:	490c      	ldr	r1, [pc, #48]	; (db50 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    db1e:	2000      	movs	r0, #0
    db20:	4b0c      	ldr	r3, [pc, #48]	; (db54 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    db22:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    db24:	490c      	ldr	r1, [pc, #48]	; (db58 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    db26:	2001      	movs	r0, #1
    db28:	4b0a      	ldr	r3, [pc, #40]	; (db54 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    db2a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    db2c:	4b0b      	ldr	r3, [pc, #44]	; (db5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    db2e:	681b      	ldr	r3, [r3, #0]
    db30:	2201      	movs	r2, #1
    db32:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    db34:	4b09      	ldr	r3, [pc, #36]	; (db5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    db36:	681b      	ldr	r3, [r3, #0]
    db38:	2201      	movs	r2, #1
    db3a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    db3c:	4b07      	ldr	r3, [pc, #28]	; (db5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    db3e:	681b      	ldr	r3, [r3, #0]
    db40:	2201      	movs	r2, #1
    db42:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    db44:	2300      	movs	r3, #0
}
    db46:	4618      	mov	r0, r3
    db48:	3708      	adds	r7, #8
    db4a:	46bd      	mov	sp, r7
    db4c:	bd80      	pop	{r7, pc}
    db4e:	bf00      	nop
    db50:	0000da99 	.word	0x0000da99
    db54:	0000bff1 	.word	0x0000bff1
    db58:	0000dad1 	.word	0x0000dad1
    db5c:	20000c68 	.word	0x20000c68

0000db60 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    db60:	b580      	push	{r7, lr}
    db62:	b082      	sub	sp, #8
    db64:	af00      	add	r7, sp, #0
    db66:	6078      	str	r0, [r7, #4]
    db68:	687b      	ldr	r3, [r7, #4]
    db6a:	4618      	mov	r0, r3
    db6c:	4b0a      	ldr	r3, [pc, #40]	; (db98 <_ZN9CDC_ClassC1Ev+0x38>)
    db6e:	4798      	blx	r3
    db70:	687b      	ldr	r3, [r7, #4]
    db72:	3310      	adds	r3, #16
    db74:	4618      	mov	r0, r3
    db76:	4b09      	ldr	r3, [pc, #36]	; (db9c <_ZN9CDC_ClassC1Ev+0x3c>)
    db78:	4798      	blx	r3
    db7a:	4a09      	ldr	r2, [pc, #36]	; (dba0 <_ZN9CDC_ClassC1Ev+0x40>)
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    db80:	687b      	ldr	r3, [r7, #4]
    db82:	f04f 32ff 	mov.w	r2, #4294967295
    db86:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    db88:	4a06      	ldr	r2, [pc, #24]	; (dba4 <_ZN9CDC_ClassC1Ev+0x44>)
    db8a:	687b      	ldr	r3, [r7, #4]
    db8c:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	4618      	mov	r0, r3
    db92:	3708      	adds	r7, #8
    db94:	46bd      	mov	sp, r7
    db96:	bd80      	pop	{r7, pc}
    db98:	0000da69 	.word	0x0000da69
    db9c:	0000e225 	.word	0x0000e225
    dba0:	0000f1a8 	.word	0x0000f1a8
    dba4:	20000c68 	.word	0x20000c68

0000dba8 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dba8:	b580      	push	{r7, lr}
    dbaa:	b082      	sub	sp, #8
    dbac:	af00      	add	r7, sp, #0
    dbae:	6078      	str	r0, [r7, #4]
    dbb0:	4a06      	ldr	r2, [pc, #24]	; (dbcc <_ZN9CDC_ClassD1Ev+0x24>)
    dbb2:	687b      	ldr	r3, [r7, #4]
    dbb4:	601a      	str	r2, [r3, #0]
    dbb6:	687b      	ldr	r3, [r7, #4]
    dbb8:	3310      	adds	r3, #16
    dbba:	4618      	mov	r0, r3
    dbbc:	4b04      	ldr	r3, [pc, #16]	; (dbd0 <_ZN9CDC_ClassD1Ev+0x28>)
    dbbe:	4798      	blx	r3
{
} //~CDC_Class
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	4618      	mov	r0, r3
    dbc4:	3708      	adds	r7, #8
    dbc6:	46bd      	mov	sp, r7
    dbc8:	bd80      	pop	{r7, pc}
    dbca:	bf00      	nop
    dbcc:	0000f1a8 	.word	0x0000f1a8
    dbd0:	0000e245 	.word	0x0000e245

0000dbd4 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    dbd4:	b580      	push	{r7, lr}
    dbd6:	b082      	sub	sp, #8
    dbd8:	af00      	add	r7, sp, #0
    dbda:	6078      	str	r0, [r7, #4]
	
	OnInit();
    dbdc:	687b      	ldr	r3, [r7, #4]
    dbde:	3310      	adds	r3, #16
    dbe0:	4618      	mov	r0, r3
    dbe2:	4b07      	ldr	r3, [pc, #28]	; (dc00 <_ZN9CDC_Class4InitEv+0x2c>)
    dbe4:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    dbe6:	4907      	ldr	r1, [pc, #28]	; (dc04 <_ZN9CDC_Class4InitEv+0x30>)
    dbe8:	2003      	movs	r0, #3
    dbea:	4b07      	ldr	r3, [pc, #28]	; (dc08 <_ZN9CDC_Class4InitEv+0x34>)
    dbec:	4798      	blx	r3
	
		
	if (plugged)
    dbee:	687b      	ldr	r3, [r7, #4]
    dbf0:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    dbf2:	20c8      	movs	r0, #200	; 0xc8
    dbf4:	4b05      	ldr	r3, [pc, #20]	; (dc0c <_ZN9CDC_Class4InitEv+0x38>)
    dbf6:	4798      	blx	r3

}
    dbf8:	bf00      	nop
    dbfa:	3708      	adds	r7, #8
    dbfc:	46bd      	mov	sp, r7
    dbfe:	bd80      	pop	{r7, pc}
    dc00:	0000e259 	.word	0x0000e259
    dc04:	0000db09 	.word	0x0000db09
    dc08:	0000bff1 	.word	0x0000bff1
    dc0c:	00001ff1 	.word	0x00001ff1

0000dc10 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    dc10:	b580      	push	{r7, lr}
    dc12:	b082      	sub	sp, #8
    dc14:	af00      	add	r7, sp, #0
    dc16:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    dc18:	4b03      	ldr	r3, [pc, #12]	; (dc28 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    dc1a:	4798      	blx	r3
    dc1c:	4603      	mov	r3, r0
	
}
    dc1e:	4618      	mov	r0, r3
    dc20:	3708      	adds	r7, #8
    dc22:	46bd      	mov	sp, r7
    dc24:	bd80      	pop	{r7, pc}
    dc26:	bf00      	nop
    dc28:	0000c069 	.word	0x0000c069

0000dc2c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b084      	sub	sp, #16
    dc30:	af00      	add	r7, sp, #0
    dc32:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	699b      	ldr	r3, [r3, #24]
    dc38:	f1b3 3fff 	cmp.w	r3, #4294967295
    dc3c:	bf14      	ite	ne
    dc3e:	2301      	movne	r3, #1
    dc40:	2300      	moveq	r3, #0
    dc42:	b2db      	uxtb	r3, r3
    dc44:	2b00      	cmp	r3, #0
    dc46:	d002      	beq.n	dc4e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    dc48:	687b      	ldr	r3, [r7, #4]
    dc4a:	699b      	ldr	r3, [r3, #24]
    dc4c:	e011      	b.n	dc72 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    dc4e:	687b      	ldr	r3, [r7, #4]
    dc50:	681b      	ldr	r3, [r3, #0]
    dc52:	331c      	adds	r3, #28
    dc54:	681b      	ldr	r3, [r3, #0]
    dc56:	f107 010f 	add.w	r1, r7, #15
    dc5a:	2201      	movs	r2, #1
    dc5c:	6878      	ldr	r0, [r7, #4]
    dc5e:	4798      	blx	r3
    dc60:	4602      	mov	r2, r0
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    dc66:	7bfb      	ldrb	r3, [r7, #15]
    dc68:	461a      	mov	r2, r3
    dc6a:	687b      	ldr	r3, [r7, #4]
    dc6c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	699b      	ldr	r3, [r3, #24]
}
    dc72:	4618      	mov	r0, r3
    dc74:	3710      	adds	r7, #16
    dc76:	46bd      	mov	sp, r7
    dc78:	bd80      	pop	{r7, pc}
	...

0000dc7c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    dc7c:	b580      	push	{r7, lr}
    dc7e:	b086      	sub	sp, #24
    dc80:	af00      	add	r7, sp, #0
    dc82:	60f8      	str	r0, [r7, #12]
    dc84:	60b9      	str	r1, [r7, #8]
    dc86:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    dc88:	68fb      	ldr	r3, [r7, #12]
    dc8a:	2200      	movs	r2, #0
    dc8c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    dc8e:	687b      	ldr	r3, [r7, #4]
    dc90:	4619      	mov	r1, r3
    dc92:	68b8      	ldr	r0, [r7, #8]
    dc94:	4b08      	ldr	r3, [pc, #32]	; (dcb8 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    dc96:	4798      	blx	r3
    dc98:	4603      	mov	r3, r0
    dc9a:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    dc9c:	68fb      	ldr	r3, [r7, #12]
    dc9e:	7d5b      	ldrb	r3, [r3, #21]
    dca0:	b2db      	uxtb	r3, r3
    dca2:	f083 0301 	eor.w	r3, r3, #1
    dca6:	b2db      	uxtb	r3, r3
    dca8:	2b00      	cmp	r3, #0
    dcaa:	d000      	beq.n	dcae <_ZN9CDC_Class8readDataEPvl+0x32>
    dcac:	e7f6      	b.n	dc9c <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    dcae:	7dfb      	ldrb	r3, [r7, #23]
}
    dcb0:	4618      	mov	r0, r3
    dcb2:	3718      	adds	r7, #24
    dcb4:	46bd      	mov	sp, r7
    dcb6:	bd80      	pop	{r7, pc}
    dcb8:	0000bf45 	.word	0x0000bf45

0000dcbc <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    dcbc:	b580      	push	{r7, lr}
    dcbe:	b086      	sub	sp, #24
    dcc0:	af00      	add	r7, sp, #0
    dcc2:	60f8      	str	r0, [r7, #12]
    dcc4:	60b9      	str	r1, [r7, #8]
    dcc6:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    dcc8:	68fb      	ldr	r3, [r7, #12]
    dcca:	2200      	movs	r2, #0
    dccc:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    dcce:	687b      	ldr	r3, [r7, #4]
    dcd0:	4619      	mov	r1, r3
    dcd2:	68b8      	ldr	r0, [r7, #8]
    dcd4:	4b04      	ldr	r3, [pc, #16]	; (dce8 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    dcd6:	4798      	blx	r3
    dcd8:	4603      	mov	r3, r0
    dcda:	617b      	str	r3, [r7, #20]
	return r;
    dcdc:	697b      	ldr	r3, [r7, #20]
}
    dcde:	4618      	mov	r0, r3
    dce0:	3718      	adds	r7, #24
    dce2:	46bd      	mov	sp, r7
    dce4:	bd80      	pop	{r7, pc}
    dce6:	bf00      	nop
    dce8:	0000bf45 	.word	0x0000bf45

0000dcec <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    dcec:	b580      	push	{r7, lr}
    dcee:	b084      	sub	sp, #16
    dcf0:	af00      	add	r7, sp, #0
    dcf2:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dcf4:	687b      	ldr	r3, [r7, #4]
    dcf6:	2200      	movs	r2, #0
    dcf8:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dcfa:	f107 030f 	add.w	r3, r7, #15
    dcfe:	2101      	movs	r1, #1
    dd00:	4618      	mov	r0, r3
    dd02:	4b08      	ldr	r3, [pc, #32]	; (dd24 <_ZN9CDC_Class4readEv+0x38>)
    dd04:	4798      	blx	r3
	while(!rxReady);
    dd06:	687b      	ldr	r3, [r7, #4]
    dd08:	7d5b      	ldrb	r3, [r3, #21]
    dd0a:	b2db      	uxtb	r3, r3
    dd0c:	f083 0301 	eor.w	r3, r3, #1
    dd10:	b2db      	uxtb	r3, r3
    dd12:	2b00      	cmp	r3, #0
    dd14:	d000      	beq.n	dd18 <_ZN9CDC_Class4readEv+0x2c>
    dd16:	e7f6      	b.n	dd06 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    dd18:	7bfb      	ldrb	r3, [r7, #15]
}
    dd1a:	4618      	mov	r0, r3
    dd1c:	3710      	adds	r7, #16
    dd1e:	46bd      	mov	sp, r7
    dd20:	bd80      	pop	{r7, pc}
    dd22:	bf00      	nop
    dd24:	0000bf45 	.word	0x0000bf45

0000dd28 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    dd28:	b580      	push	{r7, lr}
    dd2a:	b082      	sub	sp, #8
    dd2c:	af00      	add	r7, sp, #0
    dd2e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    dd30:	687b      	ldr	r3, [r7, #4]
    dd32:	331c      	adds	r3, #28
    dd34:	2140      	movs	r1, #64	; 0x40
    dd36:	4618      	mov	r0, r3
    dd38:	4b02      	ldr	r3, [pc, #8]	; (dd44 <_ZN9CDC_Class5flushEv+0x1c>)
    dd3a:	4798      	blx	r3
}
    dd3c:	bf00      	nop
    dd3e:	3708      	adds	r7, #8
    dd40:	46bd      	mov	sp, r7
    dd42:	bd80      	pop	{r7, pc}
    dd44:	0000bf89 	.word	0x0000bf89

0000dd48 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dd48:	b580      	push	{r7, lr}
    dd4a:	b082      	sub	sp, #8
    dd4c:	af00      	add	r7, sp, #0
    dd4e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    dd50:	4b02      	ldr	r3, [pc, #8]	; (dd5c <_ZN9CDC_Class5clearEv+0x14>)
    dd52:	4798      	blx	r3
}
    dd54:	bf00      	nop
    dd56:	3708      	adds	r7, #8
    dd58:	46bd      	mov	sp, r7
    dd5a:	bd80      	pop	{r7, pc}
    dd5c:	0000bfcd 	.word	0x0000bfcd

0000dd60 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    dd60:	b580      	push	{r7, lr}
    dd62:	b082      	sub	sp, #8
    dd64:	af00      	add	r7, sp, #0
    dd66:	6078      	str	r0, [r7, #4]
    dd68:	460b      	mov	r3, r1
    dd6a:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	7d1b      	ldrb	r3, [r3, #20]
    dd70:	b2db      	uxtb	r3, r3
    dd72:	f083 0301 	eor.w	r3, r3, #1
    dd76:	b2db      	uxtb	r3, r3
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d000      	beq.n	dd7e <_ZN9CDC_Class5writeEh+0x1e>
    dd7c:	e7f6      	b.n	dd6c <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    dd7e:	687b      	ldr	r3, [r7, #4]
    dd80:	681b      	ldr	r3, [r3, #0]
    dd82:	3324      	adds	r3, #36	; 0x24
    dd84:	681b      	ldr	r3, [r3, #0]
    dd86:	1cf9      	adds	r1, r7, #3
    dd88:	2201      	movs	r2, #1
    dd8a:	6878      	ldr	r0, [r7, #4]
    dd8c:	4798      	blx	r3
    dd8e:	4603      	mov	r3, r0
}
    dd90:	4618      	mov	r0, r3
    dd92:	3708      	adds	r7, #8
    dd94:	46bd      	mov	sp, r7
    dd96:	bd80      	pop	{r7, pc}

0000dd98 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    dd98:	b580      	push	{r7, lr}
    dd9a:	b086      	sub	sp, #24
    dd9c:	af00      	add	r7, sp, #0
    dd9e:	60f8      	str	r0, [r7, #12]
    dda0:	60b9      	str	r1, [r7, #8]
    dda2:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    dda4:	68fb      	ldr	r3, [r7, #12]
    dda6:	2200      	movs	r2, #0
    dda8:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    ddaa:	68fb      	ldr	r3, [r7, #12]
    ddac:	3310      	adds	r3, #16
    ddae:	4618      	mov	r0, r3
    ddb0:	4b14      	ldr	r3, [pc, #80]	; (de04 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    ddb2:	4798      	blx	r3
    ddb4:	4603      	mov	r3, r0
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d01e      	beq.n	ddf8 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ddba:	687b      	ldr	r3, [r7, #4]
    ddbc:	4619      	mov	r1, r3
    ddbe:	68b8      	ldr	r0, [r7, #8]
    ddc0:	4b11      	ldr	r3, [pc, #68]	; (de08 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    ddc2:	4798      	blx	r3
    ddc4:	4603      	mov	r3, r0
    ddc6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    ddc8:	68fb      	ldr	r3, [r7, #12]
    ddca:	7d1b      	ldrb	r3, [r3, #20]
    ddcc:	b2db      	uxtb	r3, r3
    ddce:	f083 0301 	eor.w	r3, r3, #1
    ddd2:	b2db      	uxtb	r3, r3
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d006      	beq.n	dde6 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    ddd8:	68fb      	ldr	r3, [r7, #12]
    ddda:	7c5b      	ldrb	r3, [r3, #17]
    dddc:	b2db      	uxtb	r3, r3
    ddde:	2b00      	cmp	r3, #0
    dde0:	d001      	beq.n	dde6 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    dde2:	2301      	movs	r3, #1
    dde4:	e000      	b.n	dde8 <_ZN9CDC_Class9writeDataEPKvl+0x50>
    dde6:	2300      	movs	r3, #0
    dde8:	2b00      	cmp	r3, #0
    ddea:	d000      	beq.n	ddee <_ZN9CDC_Class9writeDataEPKvl+0x56>
    ddec:	e7ec      	b.n	ddc8 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTerminalTimer.Stop();
    ddee:	4807      	ldr	r0, [pc, #28]	; (de0c <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    ddf0:	4b07      	ldr	r3, [pc, #28]	; (de10 <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    ddf2:	4798      	blx	r3
		return r;
    ddf4:	697b      	ldr	r3, [r7, #20]
    ddf6:	e000      	b.n	ddfa <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    ddf8:	2300      	movs	r3, #0
	}
	

}
    ddfa:	4618      	mov	r0, r3
    ddfc:	3718      	adds	r7, #24
    ddfe:	46bd      	mov	sp, r7
    de00:	bd80      	pop	{r7, pc}
    de02:	bf00      	nop
    de04:	0000e2f5 	.word	0x0000e2f5
    de08:	0000bf89 	.word	0x0000bf89
    de0c:	20000d74 	.word	0x20000d74
    de10:	0000e425 	.word	0x0000e425

0000de14 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    de14:	b580      	push	{r7, lr}
    de16:	b086      	sub	sp, #24
    de18:	af00      	add	r7, sp, #0
    de1a:	60f8      	str	r0, [r7, #12]
    de1c:	60b9      	str	r1, [r7, #8]
    de1e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    de20:	68fb      	ldr	r3, [r7, #12]
    de22:	2200      	movs	r2, #0
    de24:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (plugged){
    de26:	68fb      	ldr	r3, [r7, #12]
    de28:	7c1b      	ldrb	r3, [r3, #16]
    de2a:	b2db      	uxtb	r3, r3
    de2c:	2b00      	cmp	r3, #0
    de2e:	d01c      	beq.n	de6a <_ZN9CDC_Class5writeEPKhj+0x56>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    de30:	6879      	ldr	r1, [r7, #4]
    de32:	68b8      	ldr	r0, [r7, #8]
    de34:	4b10      	ldr	r3, [pc, #64]	; (de78 <_ZN9CDC_Class5writeEPKhj+0x64>)
    de36:	4798      	blx	r3
    de38:	4603      	mov	r3, r0
    de3a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    de3c:	68fb      	ldr	r3, [r7, #12]
    de3e:	7d1b      	ldrb	r3, [r3, #20]
    de40:	b2db      	uxtb	r3, r3
    de42:	f083 0301 	eor.w	r3, r3, #1
    de46:	b2db      	uxtb	r3, r3
    de48:	2b00      	cmp	r3, #0
    de4a:	d006      	beq.n	de5a <_ZN9CDC_Class5writeEPKhj+0x46>
    de4c:	68fb      	ldr	r3, [r7, #12]
    de4e:	7c5b      	ldrb	r3, [r3, #17]
    de50:	b2db      	uxtb	r3, r3
    de52:	2b00      	cmp	r3, #0
    de54:	d001      	beq.n	de5a <_ZN9CDC_Class5writeEPKhj+0x46>
    de56:	2301      	movs	r3, #1
    de58:	e000      	b.n	de5c <_ZN9CDC_Class5writeEPKhj+0x48>
    de5a:	2300      	movs	r3, #0
    de5c:	2b00      	cmp	r3, #0
    de5e:	d000      	beq.n	de62 <_ZN9CDC_Class5writeEPKhj+0x4e>
    de60:	e7ec      	b.n	de3c <_ZN9CDC_Class5writeEPKhj+0x28>
		//while((!txReady));
		usbTerminalTimer.Stop();
    de62:	4806      	ldr	r0, [pc, #24]	; (de7c <_ZN9CDC_Class5writeEPKhj+0x68>)
    de64:	4b06      	ldr	r3, [pc, #24]	; (de80 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    de66:	4798      	blx	r3
    de68:	e001      	b.n	de6e <_ZN9CDC_Class5writeEPKhj+0x5a>
	}else{
 		r=0;
    de6a:	2300      	movs	r3, #0
    de6c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    de6e:	697b      	ldr	r3, [r7, #20]
}
    de70:	4618      	mov	r0, r3
    de72:	3718      	adds	r7, #24
    de74:	46bd      	mov	sp, r7
    de76:	bd80      	pop	{r7, pc}
    de78:	0000bf89 	.word	0x0000bf89
    de7c:	20000d74 	.word	0x20000d74
    de80:	0000e425 	.word	0x0000e425

0000de84 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    de84:	b480      	push	{r7}
    de86:	b083      	sub	sp, #12
    de88:	af00      	add	r7, sp, #0
    de8a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	7d5b      	ldrb	r3, [r3, #21]
    de90:	b2db      	uxtb	r3, r3
    de92:	2b00      	cmp	r3, #0
    de94:	d006      	beq.n	dea4 <_ZN9CDC_Class9availableEv+0x20>
    de96:	687b      	ldr	r3, [r7, #4]
    de98:	7d1b      	ldrb	r3, [r3, #20]
    de9a:	b2db      	uxtb	r3, r3
    de9c:	2b00      	cmp	r3, #0
    de9e:	d001      	beq.n	dea4 <_ZN9CDC_Class9availableEv+0x20>
    dea0:	2301      	movs	r3, #1
    dea2:	e000      	b.n	dea6 <_ZN9CDC_Class9availableEv+0x22>
    dea4:	2300      	movs	r3, #0
    dea6:	2b00      	cmp	r3, #0
    dea8:	d001      	beq.n	deae <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    deaa:	2301      	movs	r3, #1
    deac:	e000      	b.n	deb0 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    deae:	2300      	movs	r3, #0
	}
	
}
    deb0:	4618      	mov	r0, r3
    deb2:	370c      	adds	r7, #12
    deb4:	46bd      	mov	sp, r7
    deb6:	bc80      	pop	{r7}
    deb8:	4770      	bx	lr
	...

0000debc <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    debc:	b580      	push	{r7, lr}
    debe:	b082      	sub	sp, #8
    dec0:	af00      	add	r7, sp, #0
    dec2:	6078      	str	r0, [r7, #4]
    dec4:	6039      	str	r1, [r7, #0]
    dec6:	687b      	ldr	r3, [r7, #4]
    dec8:	2b01      	cmp	r3, #1
    deca:	d10c      	bne.n	dee6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    decc:	683b      	ldr	r3, [r7, #0]
    dece:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ded2:	4293      	cmp	r3, r2
    ded4:	d107      	bne.n	dee6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ded6:	4806      	ldr	r0, [pc, #24]	; (def0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ded8:	4b06      	ldr	r3, [pc, #24]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    deda:	4798      	blx	r3
    dedc:	4a06      	ldr	r2, [pc, #24]	; (def8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dede:	4907      	ldr	r1, [pc, #28]	; (defc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dee0:	4803      	ldr	r0, [pc, #12]	; (def0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dee2:	4b07      	ldr	r3, [pc, #28]	; (df00 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dee4:	4798      	blx	r3
    dee6:	bf00      	nop
    dee8:	3708      	adds	r7, #8
    deea:	46bd      	mov	sp, r7
    deec:	bd80      	pop	{r7, pc}
    deee:	bf00      	nop
    def0:	20000c6c 	.word	0x20000c6c
    def4:	0000db61 	.word	0x0000db61
    def8:	20000000 	.word	0x20000000
    defc:	0000dba9 	.word	0x0000dba9
    df00:	0000e915 	.word	0x0000e915

0000df04 <_GLOBAL__sub_I_ptrCDCClass>:
    df04:	b580      	push	{r7, lr}
    df06:	af00      	add	r7, sp, #0
    df08:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df0c:	2001      	movs	r0, #1
    df0e:	4b01      	ldr	r3, [pc, #4]	; (df14 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    df10:	4798      	blx	r3
    df12:	bd80      	pop	{r7, pc}
    df14:	0000debd 	.word	0x0000debd

0000df18 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    df18:	b590      	push	{r4, r7, lr}
    df1a:	b083      	sub	sp, #12
    df1c:	af00      	add	r7, sp, #0
    df1e:	6078      	str	r0, [r7, #4]
    df20:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    df22:	683b      	ldr	r3, [r7, #0]
    df24:	2b00      	cmp	r3, #0
    df26:	d101      	bne.n	df2c <_ZN5Print5writeEPKc+0x14>
    df28:	2300      	movs	r3, #0
    df2a:	e00c      	b.n	df46 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    df2c:	687b      	ldr	r3, [r7, #4]
    df2e:	681b      	ldr	r3, [r3, #0]
    df30:	3304      	adds	r3, #4
    df32:	681c      	ldr	r4, [r3, #0]
    df34:	6838      	ldr	r0, [r7, #0]
    df36:	4b06      	ldr	r3, [pc, #24]	; (df50 <_ZN5Print5writeEPKc+0x38>)
    df38:	4798      	blx	r3
    df3a:	4603      	mov	r3, r0
    df3c:	461a      	mov	r2, r3
    df3e:	6839      	ldr	r1, [r7, #0]
    df40:	6878      	ldr	r0, [r7, #4]
    df42:	47a0      	blx	r4
    df44:	4603      	mov	r3, r0
    }
    df46:	4618      	mov	r0, r3
    df48:	370c      	adds	r7, #12
    df4a:	46bd      	mov	sp, r7
    df4c:	bd90      	pop	{r4, r7, pc}
    df4e:	bf00      	nop
    df50:	0000eb81 	.word	0x0000eb81

0000df54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    df54:	b580      	push	{r7, lr}
    df56:	b086      	sub	sp, #24
    df58:	af00      	add	r7, sp, #0
    df5a:	60f8      	str	r0, [r7, #12]
    df5c:	60b9      	str	r1, [r7, #8]
    df5e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    df60:	2300      	movs	r3, #0
    df62:	617b      	str	r3, [r7, #20]
  while (size--) {
    df64:	687b      	ldr	r3, [r7, #4]
    df66:	1e5a      	subs	r2, r3, #1
    df68:	607a      	str	r2, [r7, #4]
    df6a:	2b00      	cmp	r3, #0
    df6c:	bf14      	ite	ne
    df6e:	2301      	movne	r3, #1
    df70:	2300      	moveq	r3, #0
    df72:	b2db      	uxtb	r3, r3
    df74:	2b00      	cmp	r3, #0
    df76:	d016      	beq.n	dfa6 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    df78:	68fb      	ldr	r3, [r7, #12]
    df7a:	681b      	ldr	r3, [r3, #0]
    df7c:	681a      	ldr	r2, [r3, #0]
    df7e:	68bb      	ldr	r3, [r7, #8]
    df80:	1c59      	adds	r1, r3, #1
    df82:	60b9      	str	r1, [r7, #8]
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	4619      	mov	r1, r3
    df88:	68f8      	ldr	r0, [r7, #12]
    df8a:	4790      	blx	r2
    df8c:	4603      	mov	r3, r0
    df8e:	2b00      	cmp	r3, #0
    df90:	bf14      	ite	ne
    df92:	2301      	movne	r3, #1
    df94:	2300      	moveq	r3, #0
    df96:	b2db      	uxtb	r3, r3
    df98:	2b00      	cmp	r3, #0
    df9a:	d003      	beq.n	dfa4 <_ZN5Print5writeEPKhj+0x50>
    df9c:	697b      	ldr	r3, [r7, #20]
    df9e:	3301      	adds	r3, #1
    dfa0:	617b      	str	r3, [r7, #20]
  while (size--) {
    dfa2:	e7df      	b.n	df64 <_ZN5Print5writeEPKhj+0x10>
    else break;
    dfa4:	bf00      	nop
  }
  return n;
    dfa6:	697b      	ldr	r3, [r7, #20]
}
    dfa8:	4618      	mov	r0, r3
    dfaa:	3718      	adds	r7, #24
    dfac:	46bd      	mov	sp, r7
    dfae:	bd80      	pop	{r7, pc}

0000dfb0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    dfb0:	b580      	push	{r7, lr}
    dfb2:	b082      	sub	sp, #8
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	6078      	str	r0, [r7, #4]
    dfb8:	6039      	str	r1, [r7, #0]
  return write(str);
    dfba:	6839      	ldr	r1, [r7, #0]
    dfbc:	6878      	ldr	r0, [r7, #4]
    dfbe:	4b03      	ldr	r3, [pc, #12]	; (dfcc <_ZN5Print5printEPKc+0x1c>)
    dfc0:	4798      	blx	r3
    dfc2:	4603      	mov	r3, r0
}
    dfc4:	4618      	mov	r0, r3
    dfc6:	3708      	adds	r7, #8
    dfc8:	46bd      	mov	sp, r7
    dfca:	bd80      	pop	{r7, pc}
    dfcc:	0000df19 	.word	0x0000df19

0000dfd0 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    dfd0:	b580      	push	{r7, lr}
    dfd2:	b084      	sub	sp, #16
    dfd4:	af00      	add	r7, sp, #0
    dfd6:	60f8      	str	r0, [r7, #12]
    dfd8:	460b      	mov	r3, r1
    dfda:	607a      	str	r2, [r7, #4]
    dfdc:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    dfde:	7afb      	ldrb	r3, [r7, #11]
    dfe0:	687a      	ldr	r2, [r7, #4]
    dfe2:	4619      	mov	r1, r3
    dfe4:	68f8      	ldr	r0, [r7, #12]
    dfe6:	4b03      	ldr	r3, [pc, #12]	; (dff4 <_ZN5Print5printEhi+0x24>)
    dfe8:	4798      	blx	r3
    dfea:	4603      	mov	r3, r0
}
    dfec:	4618      	mov	r0, r3
    dfee:	3710      	adds	r7, #16
    dff0:	46bd      	mov	sp, r7
    dff2:	bd80      	pop	{r7, pc}
    dff4:	0000dff9 	.word	0x0000dff9

0000dff8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    dff8:	b580      	push	{r7, lr}
    dffa:	b084      	sub	sp, #16
    dffc:	af00      	add	r7, sp, #0
    dffe:	60f8      	str	r0, [r7, #12]
    e000:	60b9      	str	r1, [r7, #8]
    e002:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e004:	687b      	ldr	r3, [r7, #4]
    e006:	2b00      	cmp	r3, #0
    e008:	d109      	bne.n	e01e <_ZN5Print5printEmi+0x26>
    e00a:	68fb      	ldr	r3, [r7, #12]
    e00c:	681b      	ldr	r3, [r3, #0]
    e00e:	681b      	ldr	r3, [r3, #0]
    e010:	68ba      	ldr	r2, [r7, #8]
    e012:	b2d2      	uxtb	r2, r2
    e014:	4611      	mov	r1, r2
    e016:	68f8      	ldr	r0, [r7, #12]
    e018:	4798      	blx	r3
    e01a:	4603      	mov	r3, r0
    e01c:	e007      	b.n	e02e <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e01e:	687b      	ldr	r3, [r7, #4]
    e020:	b2db      	uxtb	r3, r3
    e022:	461a      	mov	r2, r3
    e024:	68b9      	ldr	r1, [r7, #8]
    e026:	68f8      	ldr	r0, [r7, #12]
    e028:	4b03      	ldr	r3, [pc, #12]	; (e038 <_ZN5Print5printEmi+0x40>)
    e02a:	4798      	blx	r3
    e02c:	4603      	mov	r3, r0
}
    e02e:	4618      	mov	r0, r3
    e030:	3710      	adds	r7, #16
    e032:	46bd      	mov	sp, r7
    e034:	bd80      	pop	{r7, pc}
    e036:	bf00      	nop
    e038:	0000e061 	.word	0x0000e061

0000e03c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    e03c:	b580      	push	{r7, lr}
    e03e:	b082      	sub	sp, #8
    e040:	af00      	add	r7, sp, #0
    e042:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    e044:	4904      	ldr	r1, [pc, #16]	; (e058 <_ZN5Print7printlnEv+0x1c>)
    e046:	6878      	ldr	r0, [r7, #4]
    e048:	4b04      	ldr	r3, [pc, #16]	; (e05c <_ZN5Print7printlnEv+0x20>)
    e04a:	4798      	blx	r3
    e04c:	4603      	mov	r3, r0
}
    e04e:	4618      	mov	r0, r3
    e050:	3708      	adds	r7, #8
    e052:	46bd      	mov	sp, r7
    e054:	bd80      	pop	{r7, pc}
    e056:	bf00      	nop
    e058:	0000f1fc 	.word	0x0000f1fc
    e05c:	0000df19 	.word	0x0000df19

0000e060 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e060:	b580      	push	{r7, lr}
    e062:	b08e      	sub	sp, #56	; 0x38
    e064:	af00      	add	r7, sp, #0
    e066:	60f8      	str	r0, [r7, #12]
    e068:	60b9      	str	r1, [r7, #8]
    e06a:	4613      	mov	r3, r2
    e06c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e06e:	f107 0310 	add.w	r3, r7, #16
    e072:	3320      	adds	r3, #32
    e074:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e078:	2200      	movs	r2, #0
    e07a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e07c:	79fb      	ldrb	r3, [r7, #7]
    e07e:	2b01      	cmp	r3, #1
    e080:	dc01      	bgt.n	e086 <_ZN5Print11printNumberEmh+0x26>
    e082:	230a      	movs	r3, #10
    e084:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e086:	79fa      	ldrb	r2, [r7, #7]
    e088:	68bb      	ldr	r3, [r7, #8]
    e08a:	fbb3 f1f2 	udiv	r1, r3, r2
    e08e:	fb02 f201 	mul.w	r2, r2, r1
    e092:	1a9b      	subs	r3, r3, r2
    e094:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e098:	79fb      	ldrb	r3, [r7, #7]
    e09a:	68ba      	ldr	r2, [r7, #8]
    e09c:	fbb2 f3f3 	udiv	r3, r2, r3
    e0a0:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e0a4:	3b01      	subs	r3, #1
    e0a6:	637b      	str	r3, [r7, #52]	; 0x34
    e0a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e0ac:	2b09      	cmp	r3, #9
    e0ae:	dc04      	bgt.n	e0ba <_ZN5Print11printNumberEmh+0x5a>
    e0b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e0b4:	3330      	adds	r3, #48	; 0x30
    e0b6:	b2db      	uxtb	r3, r3
    e0b8:	e003      	b.n	e0c2 <_ZN5Print11printNumberEmh+0x62>
    e0ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e0be:	3337      	adds	r3, #55	; 0x37
    e0c0:	b2db      	uxtb	r3, r3
    e0c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e0c4:	7013      	strb	r3, [r2, #0]
  } while(n);
    e0c6:	68bb      	ldr	r3, [r7, #8]
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d000      	beq.n	e0ce <_ZN5Print11printNumberEmh+0x6e>
  do {
    e0cc:	e7db      	b.n	e086 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e0ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e0d0:	68f8      	ldr	r0, [r7, #12]
    e0d2:	4b03      	ldr	r3, [pc, #12]	; (e0e0 <_ZN5Print11printNumberEmh+0x80>)
    e0d4:	4798      	blx	r3
    e0d6:	4603      	mov	r3, r0
}
    e0d8:	4618      	mov	r0, r3
    e0da:	3738      	adds	r7, #56	; 0x38
    e0dc:	46bd      	mov	sp, r7
    e0de:	bd80      	pop	{r7, pc}
    e0e0:	0000df19 	.word	0x0000df19

0000e0e4 <hri_port_read_DIR_reg>:
{
    e0e4:	b480      	push	{r7}
    e0e6:	b083      	sub	sp, #12
    e0e8:	af00      	add	r7, sp, #0
    e0ea:	6078      	str	r0, [r7, #4]
    e0ec:	460b      	mov	r3, r1
    e0ee:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e0f0:	78fb      	ldrb	r3, [r7, #3]
    e0f2:	687a      	ldr	r2, [r7, #4]
    e0f4:	01db      	lsls	r3, r3, #7
    e0f6:	4413      	add	r3, r2
    e0f8:	681b      	ldr	r3, [r3, #0]
}
    e0fa:	4618      	mov	r0, r3
    e0fc:	370c      	adds	r7, #12
    e0fe:	46bd      	mov	sp, r7
    e100:	bc80      	pop	{r7}
    e102:	4770      	bx	lr

0000e104 <hri_port_read_OUT_reg>:
{
    e104:	b480      	push	{r7}
    e106:	b083      	sub	sp, #12
    e108:	af00      	add	r7, sp, #0
    e10a:	6078      	str	r0, [r7, #4]
    e10c:	460b      	mov	r3, r1
    e10e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e110:	78fb      	ldrb	r3, [r7, #3]
    e112:	687a      	ldr	r2, [r7, #4]
    e114:	01db      	lsls	r3, r3, #7
    e116:	4413      	add	r3, r2
    e118:	3310      	adds	r3, #16
    e11a:	681b      	ldr	r3, [r3, #0]
}
    e11c:	4618      	mov	r0, r3
    e11e:	370c      	adds	r7, #12
    e120:	46bd      	mov	sp, r7
    e122:	bc80      	pop	{r7}
    e124:	4770      	bx	lr

0000e126 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e126:	b480      	push	{r7}
    e128:	b083      	sub	sp, #12
    e12a:	af00      	add	r7, sp, #0
    e12c:	6078      	str	r0, [r7, #4]
    e12e:	460b      	mov	r3, r1
    e130:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e132:	78fb      	ldrb	r3, [r7, #3]
    e134:	687a      	ldr	r2, [r7, #4]
    e136:	01db      	lsls	r3, r3, #7
    e138:	4413      	add	r3, r2
    e13a:	3320      	adds	r3, #32
    e13c:	681b      	ldr	r3, [r3, #0]
}
    e13e:	4618      	mov	r0, r3
    e140:	370c      	adds	r7, #12
    e142:	46bd      	mov	sp, r7
    e144:	bc80      	pop	{r7}
    e146:	4770      	bx	lr

0000e148 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e148:	b580      	push	{r7, lr}
    e14a:	b086      	sub	sp, #24
    e14c:	af00      	add	r7, sp, #0
    e14e:	4603      	mov	r3, r0
    e150:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e152:	f107 030c 	add.w	r3, r7, #12
    e156:	4618      	mov	r0, r3
    e158:	4b13      	ldr	r3, [pc, #76]	; (e1a8 <_gpio_get_level+0x60>)
    e15a:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e15c:	79fb      	ldrb	r3, [r7, #7]
    e15e:	4619      	mov	r1, r3
    e160:	4812      	ldr	r0, [pc, #72]	; (e1ac <_gpio_get_level+0x64>)
    e162:	4b13      	ldr	r3, [pc, #76]	; (e1b0 <_gpio_get_level+0x68>)
    e164:	4798      	blx	r3
    e166:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e168:	79fb      	ldrb	r3, [r7, #7]
    e16a:	4619      	mov	r1, r3
    e16c:	480f      	ldr	r0, [pc, #60]	; (e1ac <_gpio_get_level+0x64>)
    e16e:	4b11      	ldr	r3, [pc, #68]	; (e1b4 <_gpio_get_level+0x6c>)
    e170:	4798      	blx	r3
    e172:	4602      	mov	r2, r0
    e174:	697b      	ldr	r3, [r7, #20]
    e176:	43db      	mvns	r3, r3
    e178:	4013      	ands	r3, r2
    e17a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e17c:	79fb      	ldrb	r3, [r7, #7]
    e17e:	4619      	mov	r1, r3
    e180:	480a      	ldr	r0, [pc, #40]	; (e1ac <_gpio_get_level+0x64>)
    e182:	4b0d      	ldr	r3, [pc, #52]	; (e1b8 <_gpio_get_level+0x70>)
    e184:	4798      	blx	r3
    e186:	4602      	mov	r2, r0
    e188:	697b      	ldr	r3, [r7, #20]
    e18a:	4013      	ands	r3, r2
    e18c:	693a      	ldr	r2, [r7, #16]
    e18e:	4313      	orrs	r3, r2
    e190:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e192:	f107 030c 	add.w	r3, r7, #12
    e196:	4618      	mov	r0, r3
    e198:	4b08      	ldr	r3, [pc, #32]	; (e1bc <_gpio_get_level+0x74>)
    e19a:	4798      	blx	r3

	return tmp;
    e19c:	693b      	ldr	r3, [r7, #16]
}
    e19e:	4618      	mov	r0, r3
    e1a0:	3718      	adds	r7, #24
    e1a2:	46bd      	mov	sp, r7
    e1a4:	bd80      	pop	{r7, pc}
    e1a6:	bf00      	nop
    e1a8:	0000b165 	.word	0x0000b165
    e1ac:	41008000 	.word	0x41008000
    e1b0:	0000e0e5 	.word	0x0000e0e5
    e1b4:	0000e127 	.word	0x0000e127
    e1b8:	0000e105 	.word	0x0000e105
    e1bc:	0000b18b 	.word	0x0000b18b

0000e1c0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e1c0:	b580      	push	{r7, lr}
    e1c2:	b082      	sub	sp, #8
    e1c4:	af00      	add	r7, sp, #0
    e1c6:	4603      	mov	r3, r0
    e1c8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e1ca:	79fb      	ldrb	r3, [r7, #7]
    e1cc:	115b      	asrs	r3, r3, #5
    e1ce:	b2db      	uxtb	r3, r3
    e1d0:	4618      	mov	r0, r3
    e1d2:	4b09      	ldr	r3, [pc, #36]	; (e1f8 <gpio_get_pin_level+0x38>)
    e1d4:	4798      	blx	r3
    e1d6:	4601      	mov	r1, r0
    e1d8:	79fb      	ldrb	r3, [r7, #7]
    e1da:	f003 031f 	and.w	r3, r3, #31
    e1de:	2201      	movs	r2, #1
    e1e0:	fa02 f303 	lsl.w	r3, r2, r3
    e1e4:	400b      	ands	r3, r1
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	bf14      	ite	ne
    e1ea:	2301      	movne	r3, #1
    e1ec:	2300      	moveq	r3, #0
    e1ee:	b2db      	uxtb	r3, r3
}
    e1f0:	4618      	mov	r0, r3
    e1f2:	3708      	adds	r7, #8
    e1f4:	46bd      	mov	sp, r7
    e1f6:	bd80      	pop	{r7, pc}
    e1f8:	0000e149 	.word	0x0000e149

0000e1fc <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e1fc:	b480      	push	{r7}
    e1fe:	b083      	sub	sp, #12
    e200:	af00      	add	r7, sp, #0
    e202:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e204:	4b06      	ldr	r3, [pc, #24]	; (e220 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e206:	681b      	ldr	r3, [r3, #0]
    e208:	2201      	movs	r2, #1
    e20a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    e20c:	4b04      	ldr	r3, [pc, #16]	; (e220 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e20e:	681b      	ldr	r3, [r3, #0]
    e210:	2200      	movs	r2, #0
    e212:	705a      	strb	r2, [r3, #1]
}
    e214:	bf00      	nop
    e216:	370c      	adds	r7, #12
    e218:	46bd      	mov	sp, r7
    e21a:	bc80      	pop	{r7}
    e21c:	4770      	bx	lr
    e21e:	bf00      	nop
    e220:	20000ccc 	.word	0x20000ccc

0000e224 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e224:	b480      	push	{r7}
    e226:	b083      	sub	sp, #12
    e228:	af00      	add	r7, sp, #0
    e22a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e22c:	4a04      	ldr	r2, [pc, #16]	; (e240 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e22e:	687b      	ldr	r3, [r7, #4]
    e230:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    e232:	687b      	ldr	r3, [r7, #4]
    e234:	4618      	mov	r0, r3
    e236:	370c      	adds	r7, #12
    e238:	46bd      	mov	sp, r7
    e23a:	bc80      	pop	{r7}
    e23c:	4770      	bx	lr
    e23e:	bf00      	nop
    e240:	20000ccc 	.word	0x20000ccc

0000e244 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e244:	b480      	push	{r7}
    e246:	b083      	sub	sp, #12
    e248:	af00      	add	r7, sp, #0
    e24a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e24c:	687b      	ldr	r3, [r7, #4]
    e24e:	4618      	mov	r0, r3
    e250:	370c      	adds	r7, #12
    e252:	46bd      	mov	sp, r7
    e254:	bc80      	pop	{r7}
    e256:	4770      	bx	lr

0000e258 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e258:	b580      	push	{r7, lr}
    e25a:	b082      	sub	sp, #8
    e25c:	af00      	add	r7, sp, #0
    e25e:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e260:	2040      	movs	r0, #64	; 0x40
    e262:	4b1c      	ldr	r3, [pc, #112]	; (e2d4 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    e264:	4798      	blx	r3
    e266:	4603      	mov	r3, r0
    e268:	461a      	mov	r2, r3
    e26a:	687b      	ldr	r3, [r7, #4]
    e26c:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e26e:	687b      	ldr	r3, [r7, #4]
    e270:	78db      	ldrb	r3, [r3, #3]
    e272:	2b00      	cmp	r3, #0
    e274:	d024      	beq.n	e2c0 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    e276:	687b      	ldr	r3, [r7, #4]
    e278:	2200      	movs	r2, #0
    e27a:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    e27c:	687b      	ldr	r3, [r7, #4]
    e27e:	2201      	movs	r2, #1
    e280:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e282:	f44f 7216 	mov.w	r2, #600	; 0x258
    e286:	4914      	ldr	r1, [pc, #80]	; (e2d8 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    e288:	4814      	ldr	r0, [pc, #80]	; (e2dc <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e28a:	4b15      	ldr	r3, [pc, #84]	; (e2e0 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e28c:	4798      	blx	r3
			usbTerminalTimer.Start();
    e28e:	4813      	ldr	r0, [pc, #76]	; (e2dc <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e290:	4b14      	ldr	r3, [pc, #80]	; (e2e4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e292:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e294:	4814      	ldr	r0, [pc, #80]	; (e2e8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e296:	4b15      	ldr	r3, [pc, #84]	; (e2ec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e298:	4798      	blx	r3
    e29a:	4603      	mov	r3, r0
    e29c:	f083 0301 	eor.w	r3, r3, #1
    e2a0:	b2db      	uxtb	r3, r3
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d008      	beq.n	e2b8 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    e2a6:	687b      	ldr	r3, [r7, #4]
    e2a8:	789b      	ldrb	r3, [r3, #2]
    e2aa:	b2db      	uxtb	r3, r3
    e2ac:	2b00      	cmp	r3, #0
    e2ae:	d0f1      	beq.n	e294 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    e2b0:	687b      	ldr	r3, [r7, #4]
    e2b2:	2200      	movs	r2, #0
    e2b4:	701a      	strb	r2, [r3, #0]
					return;
    e2b6:	e009      	b.n	e2cc <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e2b8:	4808      	ldr	r0, [pc, #32]	; (e2dc <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e2ba:	4b0d      	ldr	r3, [pc, #52]	; (e2f0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e2bc:	4798      	blx	r3
    e2be:	e005      	b.n	e2cc <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    e2c0:	687b      	ldr	r3, [r7, #4]
    e2c2:	2200      	movs	r2, #0
    e2c4:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    e2c6:	687b      	ldr	r3, [r7, #4]
    e2c8:	2200      	movs	r2, #0
    e2ca:	705a      	strb	r2, [r3, #1]
		}
		
}
    e2cc:	3708      	adds	r7, #8
    e2ce:	46bd      	mov	sp, r7
    e2d0:	bd80      	pop	{r7, pc}
    e2d2:	bf00      	nop
    e2d4:	0000e1c1 	.word	0x0000e1c1
    e2d8:	0000e1fd 	.word	0x0000e1fd
    e2dc:	20000d74 	.word	0x20000d74
    e2e0:	0000e4dd 	.word	0x0000e4dd
    e2e4:	0000e401 	.word	0x0000e401
    e2e8:	20000c6c 	.word	0x20000c6c
    e2ec:	0000dc11 	.word	0x0000dc11
    e2f0:	0000e425 	.word	0x0000e425

0000e2f4 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTerminalTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    e2f4:	b580      	push	{r7, lr}
    e2f6:	b082      	sub	sp, #8
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    e2fc:	687b      	ldr	r3, [r7, #4]
    e2fe:	785b      	ldrb	r3, [r3, #1]
    e300:	b2db      	uxtb	r3, r3
    e302:	2b00      	cmp	r3, #0
    e304:	d01f      	beq.n	e346 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    e306:	687b      	ldr	r3, [r7, #4]
    e308:	781b      	ldrb	r3, [r3, #0]
    e30a:	b2db      	uxtb	r3, r3
    e30c:	2b00      	cmp	r3, #0
    e30e:	d105      	bne.n	e31c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    e310:	4812      	ldr	r0, [pc, #72]	; (e35c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    e312:	4b13      	ldr	r3, [pc, #76]	; (e360 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    e314:	4798      	blx	r3
    e316:	4603      	mov	r3, r0
    e318:	2b00      	cmp	r3, #0
    e31a:	d001      	beq.n	e320 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    e31c:	2301      	movs	r3, #1
    e31e:	e000      	b.n	e322 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    e320:	2300      	movs	r3, #0
    e322:	2b00      	cmp	r3, #0
    e324:	d00b      	beq.n	e33e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTerminalTimer.Start()==0;
    e326:	480f      	ldr	r0, [pc, #60]	; (e364 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    e328:	4b0f      	ldr	r3, [pc, #60]	; (e368 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    e32a:	4798      	blx	r3
    e32c:	4603      	mov	r3, r0
    e32e:	2b00      	cmp	r3, #0
    e330:	bf0c      	ite	eq
    e332:	2301      	moveq	r3, #1
    e334:	2300      	movne	r3, #0
    e336:	b2da      	uxtb	r2, r3
    e338:	687b      	ldr	r3, [r7, #4]
    e33a:	705a      	strb	r2, [r3, #1]
    e33c:	e007      	b.n	e34e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    e33e:	687b      	ldr	r3, [r7, #4]
    e340:	2200      	movs	r2, #0
    e342:	705a      	strb	r2, [r3, #1]
    e344:	e003      	b.n	e34e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    e346:	687b      	ldr	r3, [r7, #4]
    e348:	785b      	ldrb	r3, [r3, #1]
    e34a:	b2db      	uxtb	r3, r3
    e34c:	e002      	b.n	e354 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    e34e:	687b      	ldr	r3, [r7, #4]
    e350:	785b      	ldrb	r3, [r3, #1]
    e352:	b2db      	uxtb	r3, r3
}
    e354:	4618      	mov	r0, r3
    e356:	3708      	adds	r7, #8
    e358:	46bd      	mov	sp, r7
    e35a:	bd80      	pop	{r7, pc}
    e35c:	20000c6c 	.word	0x20000c6c
    e360:	0000dc11 	.word	0x0000dc11
    e364:	20000d74 	.word	0x20000d74
    e368:	0000e401 	.word	0x0000e401

0000e36c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e36c:	b580      	push	{r7, lr}
    e36e:	b082      	sub	sp, #8
    e370:	af00      	add	r7, sp, #0
    e372:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e374:	4b04      	ldr	r3, [pc, #16]	; (e388 <_ZL7task_cbPK10timer_task+0x1c>)
    e376:	681b      	ldr	r3, [r3, #0]
    e378:	4618      	mov	r0, r3
    e37a:	4b04      	ldr	r3, [pc, #16]	; (e38c <_ZL7task_cbPK10timer_task+0x20>)
    e37c:	4798      	blx	r3
}
    e37e:	bf00      	nop
    e380:	3708      	adds	r7, #8
    e382:	46bd      	mov	sp, r7
    e384:	bd80      	pop	{r7, pc}
    e386:	bf00      	nop
    e388:	20000cd0 	.word	0x20000cd0
    e38c:	0000e44d 	.word	0x0000e44d

0000e390 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e390:	b480      	push	{r7}
    e392:	b083      	sub	sp, #12
    e394:	af00      	add	r7, sp, #0
    e396:	6078      	str	r0, [r7, #4]
    e398:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e39a:	687b      	ldr	r3, [r7, #4]
    e39c:	683a      	ldr	r2, [r7, #0]
    e39e:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
    e3a0:	4a08      	ldr	r2, [pc, #32]	; (e3c4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e3a2:	687b      	ldr	r3, [r7, #4]
    e3a4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e3a6:	687b      	ldr	r3, [r7, #4]
    e3a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e3ac:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
    e3ae:	687b      	ldr	r3, [r7, #4]
    e3b0:	689b      	ldr	r3, [r3, #8]
    e3b2:	4a05      	ldr	r2, [pc, #20]	; (e3c8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e3b4:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e3b6:	687b      	ldr	r3, [r7, #4]
    e3b8:	4618      	mov	r0, r3
    e3ba:	370c      	adds	r7, #12
    e3bc:	46bd      	mov	sp, r7
    e3be:	bc80      	pop	{r7}
    e3c0:	4770      	bx	lr
    e3c2:	bf00      	nop
    e3c4:	20000cd0 	.word	0x20000cd0
    e3c8:	0000e36d 	.word	0x0000e36d

0000e3cc <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e3cc:	b480      	push	{r7}
    e3ce:	b083      	sub	sp, #12
    e3d0:	af00      	add	r7, sp, #0
    e3d2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e3d4:	687b      	ldr	r3, [r7, #4]
    e3d6:	2200      	movs	r2, #0
    e3d8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e3da:	687b      	ldr	r3, [r7, #4]
    e3dc:	4618      	mov	r0, r3
    e3de:	370c      	adds	r7, #12
    e3e0:	46bd      	mov	sp, r7
    e3e2:	bc80      	pop	{r7}
    e3e4:	4770      	bx	lr

0000e3e6 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void TimerSerial_Class::Init(void){
    e3e6:	b480      	push	{r7}
    e3e8:	b083      	sub	sp, #12
    e3ea:	af00      	add	r7, sp, #0
    e3ec:	6078      	str	r0, [r7, #4]
	ticks=0;
    e3ee:	687b      	ldr	r3, [r7, #4]
    e3f0:	2200      	movs	r2, #0
    e3f2:	619a      	str	r2, [r3, #24]
}
    e3f4:	bf00      	nop
    e3f6:	370c      	adds	r7, #12
    e3f8:	46bd      	mov	sp, r7
    e3fa:	bc80      	pop	{r7}
    e3fc:	4770      	bx	lr
	...

0000e400 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e400:	b580      	push	{r7, lr}
    e402:	b084      	sub	sp, #16
    e404:	af00      	add	r7, sp, #0
    e406:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e408:	687b      	ldr	r3, [r7, #4]
    e40a:	68db      	ldr	r3, [r3, #12]
    e40c:	4618      	mov	r0, r3
    e40e:	4b04      	ldr	r3, [pc, #16]	; (e420 <_ZN17TimerSerial_Class5StartEv+0x20>)
    e410:	4798      	blx	r3
    e412:	60f8      	str	r0, [r7, #12]
	return status;
    e414:	68fb      	ldr	r3, [r7, #12]
	
}
    e416:	4618      	mov	r0, r3
    e418:	3710      	adds	r7, #16
    e41a:	46bd      	mov	sp, r7
    e41c:	bd80      	pop	{r7, pc}
    e41e:	bf00      	nop
    e420:	00002ba5 	.word	0x00002ba5

0000e424 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e424:	b580      	push	{r7, lr}
    e426:	b084      	sub	sp, #16
    e428:	af00      	add	r7, sp, #0
    e42a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	68db      	ldr	r3, [r3, #12]
    e430:	4618      	mov	r0, r3
    e432:	4b05      	ldr	r3, [pc, #20]	; (e448 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e434:	4798      	blx	r3
    e436:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e438:	687b      	ldr	r3, [r7, #4]
    e43a:	2200      	movs	r2, #0
    e43c:	705a      	strb	r2, [r3, #1]
	return status;
    e43e:	68fb      	ldr	r3, [r7, #12]
}
    e440:	4618      	mov	r0, r3
    e442:	3710      	adds	r7, #16
    e444:	46bd      	mov	sp, r7
    e446:	bd80      	pop	{r7, pc}
    e448:	00002bf9 	.word	0x00002bf9

0000e44c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e44c:	b480      	push	{r7}
    e44e:	b083      	sub	sp, #12
    e450:	af00      	add	r7, sp, #0
    e452:	6078      	str	r0, [r7, #4]
	timeout=1;
    e454:	687b      	ldr	r3, [r7, #4]
    e456:	2201      	movs	r2, #1
    e458:	705a      	strb	r2, [r3, #1]
}
    e45a:	bf00      	nop
    e45c:	370c      	adds	r7, #12
    e45e:	46bd      	mov	sp, r7
    e460:	bc80      	pop	{r7}
    e462:	4770      	bx	lr

0000e464 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e464:	b580      	push	{r7, lr}
    e466:	b086      	sub	sp, #24
    e468:	af00      	add	r7, sp, #0
    e46a:	60f8      	str	r0, [r7, #12]
    e46c:	60b9      	str	r1, [r7, #8]
    e46e:	607a      	str	r2, [r7, #4]
    e470:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e472:	68f8      	ldr	r0, [r7, #12]
    e474:	4b0d      	ldr	r3, [pc, #52]	; (e4ac <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e476:	4798      	blx	r3
	task->interval = interval;
    e478:	68fb      	ldr	r3, [r7, #12]
    e47a:	689b      	ldr	r3, [r3, #8]
    e47c:	687a      	ldr	r2, [r7, #4]
    e47e:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e480:	68fb      	ldr	r3, [r7, #12]
    e482:	689b      	ldr	r3, [r3, #8]
    e484:	68ba      	ldr	r2, [r7, #8]
    e486:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e488:	68fb      	ldr	r3, [r7, #12]
    e48a:	689b      	ldr	r3, [r3, #8]
    e48c:	78fa      	ldrb	r2, [r7, #3]
    e48e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e490:	68fb      	ldr	r3, [r7, #12]
    e492:	68da      	ldr	r2, [r3, #12]
    e494:	68fb      	ldr	r3, [r7, #12]
    e496:	689b      	ldr	r3, [r3, #8]
    e498:	4619      	mov	r1, r3
    e49a:	4610      	mov	r0, r2
    e49c:	4b04      	ldr	r3, [pc, #16]	; (e4b0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e49e:	4798      	blx	r3
    e4a0:	6178      	str	r0, [r7, #20]
	
	return status;
    e4a2:	697b      	ldr	r3, [r7, #20]
}
    e4a4:	4618      	mov	r0, r3
    e4a6:	3718      	adds	r7, #24
    e4a8:	46bd      	mov	sp, r7
    e4aa:	bd80      	pop	{r7, pc}
    e4ac:	0000e595 	.word	0x0000e595
    e4b0:	00002c55 	.word	0x00002c55

0000e4b4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e4b4:	b590      	push	{r4, r7, lr}
    e4b6:	b087      	sub	sp, #28
    e4b8:	af00      	add	r7, sp, #0
    e4ba:	60f8      	str	r0, [r7, #12]
    e4bc:	60b9      	str	r1, [r7, #8]
    e4be:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e4c0:	2301      	movs	r3, #1
    e4c2:	687a      	ldr	r2, [r7, #4]
    e4c4:	68b9      	ldr	r1, [r7, #8]
    e4c6:	68f8      	ldr	r0, [r7, #12]
    e4c8:	4c03      	ldr	r4, [pc, #12]	; (e4d8 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    e4ca:	47a0      	blx	r4
    e4cc:	6178      	str	r0, [r7, #20]
		return status;
    e4ce:	697b      	ldr	r3, [r7, #20]
}
    e4d0:	4618      	mov	r0, r3
    e4d2:	371c      	adds	r7, #28
    e4d4:	46bd      	mov	sp, r7
    e4d6:	bd90      	pop	{r4, r7, pc}
    e4d8:	0000e465 	.word	0x0000e465

0000e4dc <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e4dc:	b590      	push	{r4, r7, lr}
    e4de:	b087      	sub	sp, #28
    e4e0:	af00      	add	r7, sp, #0
    e4e2:	60f8      	str	r0, [r7, #12]
    e4e4:	60b9      	str	r1, [r7, #8]
    e4e6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e4e8:	2300      	movs	r3, #0
    e4ea:	687a      	ldr	r2, [r7, #4]
    e4ec:	68b9      	ldr	r1, [r7, #8]
    e4ee:	68f8      	ldr	r0, [r7, #12]
    e4f0:	4c03      	ldr	r4, [pc, #12]	; (e500 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e4f2:	47a0      	blx	r4
    e4f4:	6178      	str	r0, [r7, #20]
	return status;
    e4f6:	697b      	ldr	r3, [r7, #20]
}
    e4f8:	4618      	mov	r0, r3
    e4fa:	371c      	adds	r7, #28
    e4fc:	46bd      	mov	sp, r7
    e4fe:	bd90      	pop	{r4, r7, pc}
    e500:	0000e465 	.word	0x0000e465

0000e504 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e504:	b590      	push	{r4, r7, lr}
    e506:	b087      	sub	sp, #28
    e508:	af00      	add	r7, sp, #0
    e50a:	60f8      	str	r0, [r7, #12]
    e50c:	60b9      	str	r1, [r7, #8]
    e50e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e510:	2300      	movs	r3, #0
    e512:	687a      	ldr	r2, [r7, #4]
    e514:	68b9      	ldr	r1, [r7, #8]
    e516:	68f8      	ldr	r0, [r7, #12]
    e518:	4c06      	ldr	r4, [pc, #24]	; (e534 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e51a:	47a0      	blx	r4
    e51c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e51e:	68fb      	ldr	r3, [r7, #12]
    e520:	68db      	ldr	r3, [r3, #12]
    e522:	4618      	mov	r0, r3
    e524:	4b04      	ldr	r3, [pc, #16]	; (e538 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e526:	4798      	blx	r3
    e528:	6178      	str	r0, [r7, #20]
	return status;
    e52a:	697b      	ldr	r3, [r7, #20]
}
    e52c:	4618      	mov	r0, r3
    e52e:	371c      	adds	r7, #28
    e530:	46bd      	mov	sp, r7
    e532:	bd90      	pop	{r4, r7, pc}
    e534:	0000e465 	.word	0x0000e465
    e538:	00002ba5 	.word	0x00002ba5

0000e53c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e53c:	b580      	push	{r7, lr}
    e53e:	b082      	sub	sp, #8
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
    e544:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e546:	6839      	ldr	r1, [r7, #0]
    e548:	6878      	ldr	r0, [r7, #4]
    e54a:	4b0f      	ldr	r3, [pc, #60]	; (e588 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e54c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	68db      	ldr	r3, [r3, #12]
    e552:	f103 0214 	add.w	r2, r3, #20
    e556:	687b      	ldr	r3, [r7, #4]
    e558:	689b      	ldr	r3, [r3, #8]
    e55a:	4619      	mov	r1, r3
    e55c:	4610      	mov	r0, r2
    e55e:	4b0b      	ldr	r3, [pc, #44]	; (e58c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e560:	4798      	blx	r3
    e562:	4603      	mov	r3, r0
    e564:	2b00      	cmp	r3, #0
    e566:	d007      	beq.n	e578 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	68da      	ldr	r2, [r3, #12]
    e56c:	687b      	ldr	r3, [r7, #4]
    e56e:	689b      	ldr	r3, [r3, #8]
    e570:	4619      	mov	r1, r3
    e572:	4610      	mov	r0, r2
    e574:	4b06      	ldr	r3, [pc, #24]	; (e590 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e576:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e578:	687b      	ldr	r3, [r7, #4]
    e57a:	689b      	ldr	r3, [r3, #8]
    e57c:	2200      	movs	r2, #0
    e57e:	60da      	str	r2, [r3, #12]
}
    e580:	bf00      	nop
    e582:	3708      	adds	r7, #8
    e584:	46bd      	mov	sp, r7
    e586:	bd80      	pop	{r7, pc}
    e588:	0000e5fd 	.word	0x0000e5fd
    e58c:	00003925 	.word	0x00003925
    e590:	00002d4d 	.word	0x00002d4d

0000e594 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e594:	b480      	push	{r7}
    e596:	b083      	sub	sp, #12
    e598:	af00      	add	r7, sp, #0
    e59a:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    e59c:	687b      	ldr	r3, [r7, #4]
    e59e:	2200      	movs	r2, #0
    e5a0:	771a      	strb	r2, [r3, #28]
    e5a2:	687b      	ldr	r3, [r7, #4]
    e5a4:	7f1b      	ldrb	r3, [r3, #28]
    e5a6:	2b07      	cmp	r3, #7
    e5a8:	dc1f      	bgt.n	e5ea <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    e5aa:	687b      	ldr	r3, [r7, #4]
    e5ac:	7f1b      	ldrb	r3, [r3, #28]
    e5ae:	4619      	mov	r1, r3
    e5b0:	4a11      	ldr	r2, [pc, #68]	; (e5f8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e5b2:	460b      	mov	r3, r1
    e5b4:	009b      	lsls	r3, r3, #2
    e5b6:	440b      	add	r3, r1
    e5b8:	009b      	lsls	r3, r3, #2
    e5ba:	4413      	add	r3, r2
    e5bc:	330c      	adds	r3, #12
    e5be:	681b      	ldr	r3, [r3, #0]
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	d10b      	bne.n	e5dc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    e5c4:	687b      	ldr	r3, [r7, #4]
    e5c6:	7f1b      	ldrb	r3, [r3, #28]
    e5c8:	461a      	mov	r2, r3
    e5ca:	4613      	mov	r3, r2
    e5cc:	009b      	lsls	r3, r3, #2
    e5ce:	4413      	add	r3, r2
    e5d0:	009b      	lsls	r3, r3, #2
    e5d2:	4a09      	ldr	r2, [pc, #36]	; (e5f8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e5d4:	441a      	add	r2, r3
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	609a      	str	r2, [r3, #8]
			return;
    e5da:	e009      	b.n	e5f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	7f1b      	ldrb	r3, [r3, #28]
    e5e0:	3301      	adds	r3, #1
    e5e2:	b2da      	uxtb	r2, r3
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	771a      	strb	r2, [r3, #28]
    e5e8:	e7db      	b.n	e5a2 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	4a02      	ldr	r2, [pc, #8]	; (e5f8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e5ee:	609a      	str	r2, [r3, #8]

}
    e5f0:	370c      	adds	r7, #12
    e5f2:	46bd      	mov	sp, r7
    e5f4:	bc80      	pop	{r7}
    e5f6:	4770      	bx	lr
    e5f8:	20000cd4 	.word	0x20000cd4

0000e5fc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e5fc:	b480      	push	{r7}
    e5fe:	b083      	sub	sp, #12
    e600:	af00      	add	r7, sp, #0
    e602:	6078      	str	r0, [r7, #4]
    e604:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
    e606:	687b      	ldr	r3, [r7, #4]
    e608:	2200      	movs	r2, #0
    e60a:	771a      	strb	r2, [r3, #28]
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	7f1b      	ldrb	r3, [r3, #28]
    e610:	2b07      	cmp	r3, #7
    e612:	dc20      	bgt.n	e656 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    e614:	687b      	ldr	r3, [r7, #4]
    e616:	7f1b      	ldrb	r3, [r3, #28]
    e618:	4619      	mov	r1, r3
    e61a:	4a11      	ldr	r2, [pc, #68]	; (e660 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    e61c:	460b      	mov	r3, r1
    e61e:	009b      	lsls	r3, r3, #2
    e620:	440b      	add	r3, r1
    e622:	009b      	lsls	r3, r3, #2
    e624:	4413      	add	r3, r2
    e626:	330c      	adds	r3, #12
    e628:	681a      	ldr	r2, [r3, #0]
    e62a:	683b      	ldr	r3, [r7, #0]
    e62c:	429a      	cmp	r2, r3
    e62e:	d10b      	bne.n	e648 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    e630:	687b      	ldr	r3, [r7, #4]
    e632:	7f1b      	ldrb	r3, [r3, #28]
    e634:	461a      	mov	r2, r3
    e636:	4613      	mov	r3, r2
    e638:	009b      	lsls	r3, r3, #2
    e63a:	4413      	add	r3, r2
    e63c:	009b      	lsls	r3, r3, #2
    e63e:	4a08      	ldr	r2, [pc, #32]	; (e660 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    e640:	441a      	add	r2, r3
    e642:	687b      	ldr	r3, [r7, #4]
    e644:	609a      	str	r2, [r3, #8]
			return;
    e646:	e006      	b.n	e656 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	7f1b      	ldrb	r3, [r3, #28]
    e64c:	3301      	adds	r3, #1
    e64e:	b2da      	uxtb	r2, r3
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	771a      	strb	r2, [r3, #28]
    e654:	e7da      	b.n	e60c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    e656:	370c      	adds	r7, #12
    e658:	46bd      	mov	sp, r7
    e65a:	bc80      	pop	{r7}
    e65c:	4770      	bx	lr
    e65e:	bf00      	nop
    e660:	20000cd4 	.word	0x20000cd4

0000e664 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e664:	b580      	push	{r7, lr}
    e666:	b082      	sub	sp, #8
    e668:	af00      	add	r7, sp, #0
    e66a:	6078      	str	r0, [r7, #4]
    e66c:	6039      	str	r1, [r7, #0]
    e66e:	687b      	ldr	r3, [r7, #4]
    e670:	2b01      	cmp	r3, #1
    e672:	d116      	bne.n	e6a2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e674:	683b      	ldr	r3, [r7, #0]
    e676:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e67a:	4293      	cmp	r3, r2
    e67c:	d111      	bne.n	e6a2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e67e:	490b      	ldr	r1, [pc, #44]	; (e6ac <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e680:	480b      	ldr	r0, [pc, #44]	; (e6b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e682:	4b0c      	ldr	r3, [pc, #48]	; (e6b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e684:	4798      	blx	r3
    e686:	4a0c      	ldr	r2, [pc, #48]	; (e6b8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e688:	490c      	ldr	r1, [pc, #48]	; (e6bc <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e68a:	4809      	ldr	r0, [pc, #36]	; (e6b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e68c:	4b0c      	ldr	r3, [pc, #48]	; (e6c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e68e:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e690:	490c      	ldr	r1, [pc, #48]	; (e6c4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e692:	480d      	ldr	r0, [pc, #52]	; (e6c8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e694:	4b07      	ldr	r3, [pc, #28]	; (e6b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e696:	4798      	blx	r3
    e698:	4a07      	ldr	r2, [pc, #28]	; (e6b8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e69a:	4908      	ldr	r1, [pc, #32]	; (e6bc <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e69c:	480a      	ldr	r0, [pc, #40]	; (e6c8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e69e:	4b08      	ldr	r3, [pc, #32]	; (e6c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e6a0:	4798      	blx	r3
    e6a2:	bf00      	nop
    e6a4:	3708      	adds	r7, #8
    e6a6:	46bd      	mov	sp, r7
    e6a8:	bd80      	pop	{r7, pc}
    e6aa:	bf00      	nop
    e6ac:	20000ee8 	.word	0x20000ee8
    e6b0:	20000d74 	.word	0x20000d74
    e6b4:	0000e391 	.word	0x0000e391
    e6b8:	20000000 	.word	0x20000000
    e6bc:	0000e3cd 	.word	0x0000e3cd
    e6c0:	0000e915 	.word	0x0000e915
    e6c4:	20000e30 	.word	0x20000e30
    e6c8:	20000d94 	.word	0x20000d94

0000e6cc <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e6cc:	b580      	push	{r7, lr}
    e6ce:	af00      	add	r7, sp, #0
    e6d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e6d4:	2001      	movs	r0, #1
    e6d6:	4b01      	ldr	r3, [pc, #4]	; (e6dc <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e6d8:	4798      	blx	r3
    e6da:	bd80      	pop	{r7, pc}
    e6dc:	0000e665 	.word	0x0000e665

0000e6e0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e6e0:	b480      	push	{r7}
    e6e2:	b083      	sub	sp, #12
    e6e4:	af00      	add	r7, sp, #0
    e6e6:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e6e8:	2300      	movs	r3, #0
	}
    e6ea:	4618      	mov	r0, r3
    e6ec:	370c      	adds	r7, #12
    e6ee:	46bd      	mov	sp, r7
    e6f0:	bc80      	pop	{r7}
    e6f2:	4770      	bx	lr

0000e6f4 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e6f4:	b480      	push	{r7}
    e6f6:	af00      	add	r7, sp, #0
		}
    e6f8:	bf00      	nop
    e6fa:	46bd      	mov	sp, r7
    e6fc:	bc80      	pop	{r7}
    e6fe:	4770      	bx	lr

0000e700 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    e700:	b480      	push	{r7}
    e702:	b083      	sub	sp, #12
    e704:	af00      	add	r7, sp, #0
    e706:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    e708:	4a04      	ldr	r2, [pc, #16]	; (e71c <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    e70a:	687b      	ldr	r3, [r7, #4]
    e70c:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    e70e:	687b      	ldr	r3, [r7, #4]
    e710:	4618      	mov	r0, r3
    e712:	370c      	adds	r7, #12
    e714:	46bd      	mov	sp, r7
    e716:	bc80      	pop	{r7}
    e718:	4770      	bx	lr
    e71a:	bf00      	nop
    e71c:	20000db4 	.word	0x20000db4

0000e720 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    e720:	b480      	push	{r7}
    e722:	b083      	sub	sp, #12
    e724:	af00      	add	r7, sp, #0
    e726:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    e728:	687b      	ldr	r3, [r7, #4]
    e72a:	4618      	mov	r0, r3
    e72c:	370c      	adds	r7, #12
    e72e:	46bd      	mov	sp, r7
    e730:	bc80      	pop	{r7}
    e732:	4770      	bx	lr

0000e734 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    e734:	b580      	push	{r7, lr}
    e736:	b082      	sub	sp, #8
    e738:	af00      	add	r7, sp, #0
    e73a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	685a      	ldr	r2, [r3, #4]
    e740:	687b      	ldr	r3, [r7, #4]
    e742:	3308      	adds	r3, #8
    e744:	4619      	mov	r1, r3
    e746:	4610      	mov	r0, r2
    e748:	4b06      	ldr	r3, [pc, #24]	; (e764 <_ZN13SPI_Syn_Class4initEv+0x30>)
    e74a:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    e74c:	687b      	ldr	r3, [r7, #4]
    e74e:	685b      	ldr	r3, [r3, #4]
    e750:	4618      	mov	r0, r3
    e752:	4b05      	ldr	r3, [pc, #20]	; (e768 <_ZN13SPI_Syn_Class4initEv+0x34>)
    e754:	4798      	blx	r3
	
	ready=true;
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	2201      	movs	r2, #1
    e75a:	701a      	strb	r2, [r3, #0]
	
}
    e75c:	bf00      	nop
    e75e:	3708      	adds	r7, #8
    e760:	46bd      	mov	sp, r7
    e762:	bd80      	pop	{r7, pc}
    e764:	00002ac1 	.word	0x00002ac1
    e768:	00002935 	.word	0x00002935

0000e76c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    e76c:	b480      	push	{r7}
    e76e:	b083      	sub	sp, #12
    e770:	af00      	add	r7, sp, #0
    e772:	6078      	str	r0, [r7, #4]
    e774:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    e776:	4a05      	ldr	r2, [pc, #20]	; (e78c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    e778:	687b      	ldr	r3, [r7, #4]
    e77a:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    e77c:	687b      	ldr	r3, [r7, #4]
    e77e:	683a      	ldr	r2, [r7, #0]
    e780:	605a      	str	r2, [r3, #4]
}
    e782:	bf00      	nop
    e784:	370c      	adds	r7, #12
    e786:	46bd      	mov	sp, r7
    e788:	bc80      	pop	{r7}
    e78a:	4770      	bx	lr
    e78c:	20000db4 	.word	0x20000db4

0000e790 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    e790:	b580      	push	{r7, lr}
    e792:	b082      	sub	sp, #8
    e794:	af00      	add	r7, sp, #0
    e796:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	685a      	ldr	r2, [r3, #4]
    e79c:	687b      	ldr	r3, [r7, #4]
    e79e:	3308      	adds	r3, #8
    e7a0:	4619      	mov	r1, r3
    e7a2:	4610      	mov	r0, r2
    e7a4:	4b07      	ldr	r3, [pc, #28]	; (e7c4 <_ZN13SPI_Syn_Class6enableEv+0x34>)
    e7a6:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    e7a8:	687b      	ldr	r3, [r7, #4]
    e7aa:	685b      	ldr	r3, [r3, #4]
    e7ac:	4618      	mov	r0, r3
    e7ae:	4b06      	ldr	r3, [pc, #24]	; (e7c8 <_ZN13SPI_Syn_Class6enableEv+0x38>)
    e7b0:	4798      	blx	r3
	ready=true;
    e7b2:	687b      	ldr	r3, [r7, #4]
    e7b4:	2201      	movs	r2, #1
    e7b6:	701a      	strb	r2, [r3, #0]
	return 0;
    e7b8:	2300      	movs	r3, #0
}
    e7ba:	4618      	mov	r0, r3
    e7bc:	3708      	adds	r7, #8
    e7be:	46bd      	mov	sp, r7
    e7c0:	bd80      	pop	{r7, pc}
    e7c2:	bf00      	nop
    e7c4:	00002ac1 	.word	0x00002ac1
    e7c8:	00002935 	.word	0x00002935

0000e7cc <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    e7cc:	b580      	push	{r7, lr}
    e7ce:	b086      	sub	sp, #24
    e7d0:	af00      	add	r7, sp, #0
    e7d2:	60f8      	str	r0, [r7, #12]
    e7d4:	60b9      	str	r1, [r7, #8]
    e7d6:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    e7d8:	68fb      	ldr	r3, [r7, #12]
    e7da:	2201      	movs	r2, #1
    e7dc:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
    e7de:	68fb      	ldr	r3, [r7, #12]
    e7e0:	689b      	ldr	r3, [r3, #8]
    e7e2:	687a      	ldr	r2, [r7, #4]
    e7e4:	b292      	uxth	r2, r2
    e7e6:	68b9      	ldr	r1, [r7, #8]
    e7e8:	4618      	mov	r0, r3
    e7ea:	4b08      	ldr	r3, [pc, #32]	; (e80c <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
    e7ec:	4798      	blx	r3
    e7ee:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    e7f0:	697b      	ldr	r3, [r7, #20]
    e7f2:	2b00      	cmp	r3, #0
    e7f4:	bf14      	ite	ne
    e7f6:	2301      	movne	r3, #1
    e7f8:	2300      	moveq	r3, #0
    e7fa:	b2da      	uxtb	r2, r3
    e7fc:	68fb      	ldr	r3, [r7, #12]
    e7fe:	741a      	strb	r2, [r3, #16]
	 return w;
    e800:	697b      	ldr	r3, [r7, #20]
	
}
    e802:	4618      	mov	r0, r3
    e804:	3718      	adds	r7, #24
    e806:	46bd      	mov	sp, r7
    e808:	bd80      	pop	{r7, pc}
    e80a:	bf00      	nop
    e80c:	0000e875 	.word	0x0000e875

0000e810 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    e810:	b580      	push	{r7, lr}
    e812:	b086      	sub	sp, #24
    e814:	af00      	add	r7, sp, #0
    e816:	60f8      	str	r0, [r7, #12]
    e818:	60b9      	str	r1, [r7, #8]
    e81a:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    e81c:	68fb      	ldr	r3, [r7, #12]
    e81e:	2201      	movs	r2, #1
    e820:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
    e822:	68fb      	ldr	r3, [r7, #12]
    e824:	689b      	ldr	r3, [r3, #8]
    e826:	687a      	ldr	r2, [r7, #4]
    e828:	b292      	uxth	r2, r2
    e82a:	68b9      	ldr	r1, [r7, #8]
    e82c:	4618      	mov	r0, r3
    e82e:	4b08      	ldr	r3, [pc, #32]	; (e850 <_ZN13SPI_Syn_Class4readEPhl+0x40>)
    e830:	4798      	blx	r3
    e832:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    e834:	697b      	ldr	r3, [r7, #20]
    e836:	2b00      	cmp	r3, #0
    e838:	bf14      	ite	ne
    e83a:	2301      	movne	r3, #1
    e83c:	2300      	moveq	r3, #0
    e83e:	b2da      	uxtb	r2, r3
    e840:	68fb      	ldr	r3, [r7, #12]
    e842:	745a      	strb	r2, [r3, #17]
	return  r;
    e844:	697b      	ldr	r3, [r7, #20]
}
    e846:	4618      	mov	r0, r3
    e848:	3718      	adds	r7, #24
    e84a:	46bd      	mov	sp, r7
    e84c:	bd80      	pop	{r7, pc}
    e84e:	bf00      	nop
    e850:	0000e8c5 	.word	0x0000e8c5

0000e854 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    e854:	b580      	push	{r7, lr}
    e856:	b082      	sub	sp, #8
    e858:	af00      	add	r7, sp, #0
    e85a:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	685b      	ldr	r3, [r3, #4]
    e860:	4618      	mov	r0, r3
    e862:	4b03      	ldr	r3, [pc, #12]	; (e870 <_ZN13SPI_Syn_Class7disableEv+0x1c>)
    e864:	4798      	blx	r3
	
}
    e866:	bf00      	nop
    e868:	3708      	adds	r7, #8
    e86a:	46bd      	mov	sp, r7
    e86c:	bd80      	pop	{r7, pc}
    e86e:	bf00      	nop
    e870:	00002971 	.word	0x00002971

0000e874 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e874:	b580      	push	{r7, lr}
    e876:	b084      	sub	sp, #16
    e878:	af00      	add	r7, sp, #0
    e87a:	60f8      	str	r0, [r7, #12]
    e87c:	60b9      	str	r1, [r7, #8]
    e87e:	4613      	mov	r3, r2
    e880:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e882:	68fb      	ldr	r3, [r7, #12]
    e884:	2b00      	cmp	r3, #0
    e886:	d004      	beq.n	e892 <io_write+0x1e>
    e888:	68bb      	ldr	r3, [r7, #8]
    e88a:	2b00      	cmp	r3, #0
    e88c:	d001      	beq.n	e892 <io_write+0x1e>
    e88e:	2301      	movs	r3, #1
    e890:	e000      	b.n	e894 <io_write+0x20>
    e892:	2300      	movs	r3, #0
    e894:	f003 0301 	and.w	r3, r3, #1
    e898:	b2db      	uxtb	r3, r3
    e89a:	2234      	movs	r2, #52	; 0x34
    e89c:	4907      	ldr	r1, [pc, #28]	; (e8bc <io_write+0x48>)
    e89e:	4618      	mov	r0, r3
    e8a0:	4b07      	ldr	r3, [pc, #28]	; (e8c0 <io_write+0x4c>)
    e8a2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e8a4:	68fb      	ldr	r3, [r7, #12]
    e8a6:	681b      	ldr	r3, [r3, #0]
    e8a8:	88fa      	ldrh	r2, [r7, #6]
    e8aa:	68b9      	ldr	r1, [r7, #8]
    e8ac:	68f8      	ldr	r0, [r7, #12]
    e8ae:	4798      	blx	r3
    e8b0:	4603      	mov	r3, r0
}
    e8b2:	4618      	mov	r0, r3
    e8b4:	3710      	adds	r7, #16
    e8b6:	46bd      	mov	sp, r7
    e8b8:	bd80      	pop	{r7, pc}
    e8ba:	bf00      	nop
    e8bc:	0000f224 	.word	0x0000f224
    e8c0:	000038fd 	.word	0x000038fd

0000e8c4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e8c4:	b580      	push	{r7, lr}
    e8c6:	b084      	sub	sp, #16
    e8c8:	af00      	add	r7, sp, #0
    e8ca:	60f8      	str	r0, [r7, #12]
    e8cc:	60b9      	str	r1, [r7, #8]
    e8ce:	4613      	mov	r3, r2
    e8d0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e8d2:	68fb      	ldr	r3, [r7, #12]
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d004      	beq.n	e8e2 <io_read+0x1e>
    e8d8:	68bb      	ldr	r3, [r7, #8]
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d001      	beq.n	e8e2 <io_read+0x1e>
    e8de:	2301      	movs	r3, #1
    e8e0:	e000      	b.n	e8e4 <io_read+0x20>
    e8e2:	2300      	movs	r3, #0
    e8e4:	f003 0301 	and.w	r3, r3, #1
    e8e8:	b2db      	uxtb	r3, r3
    e8ea:	223d      	movs	r2, #61	; 0x3d
    e8ec:	4907      	ldr	r1, [pc, #28]	; (e90c <io_read+0x48>)
    e8ee:	4618      	mov	r0, r3
    e8f0:	4b07      	ldr	r3, [pc, #28]	; (e910 <io_read+0x4c>)
    e8f2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e8f4:	68fb      	ldr	r3, [r7, #12]
    e8f6:	685b      	ldr	r3, [r3, #4]
    e8f8:	88fa      	ldrh	r2, [r7, #6]
    e8fa:	68b9      	ldr	r1, [r7, #8]
    e8fc:	68f8      	ldr	r0, [r7, #12]
    e8fe:	4798      	blx	r3
    e900:	4603      	mov	r3, r0
}
    e902:	4618      	mov	r0, r3
    e904:	3710      	adds	r7, #16
    e906:	46bd      	mov	sp, r7
    e908:	bd80      	pop	{r7, pc}
    e90a:	bf00      	nop
    e90c:	0000f224 	.word	0x0000f224
    e910:	000038fd 	.word	0x000038fd

0000e914 <__aeabi_atexit>:
    e914:	460b      	mov	r3, r1
    e916:	4601      	mov	r1, r0
    e918:	4618      	mov	r0, r3
    e91a:	f000 b801 	b.w	e920 <__cxa_atexit>
    e91e:	bf00      	nop

0000e920 <__cxa_atexit>:
    e920:	4613      	mov	r3, r2
    e922:	460a      	mov	r2, r1
    e924:	4601      	mov	r1, r0
    e926:	2002      	movs	r0, #2
    e928:	f000 b998 	b.w	ec5c <__register_exitproc>

0000e92c <ffs>:
    e92c:	b140      	cbz	r0, e940 <ffs+0x14>
    e92e:	2300      	movs	r3, #0
    e930:	fa40 f103 	asr.w	r1, r0, r3
    e934:	1c5a      	adds	r2, r3, #1
    e936:	07c9      	lsls	r1, r1, #31
    e938:	4613      	mov	r3, r2
    e93a:	d5f9      	bpl.n	e930 <ffs+0x4>
    e93c:	4610      	mov	r0, r2
    e93e:	4770      	bx	lr
    e940:	4602      	mov	r2, r0
    e942:	4610      	mov	r0, r2
    e944:	4770      	bx	lr
    e946:	bf00      	nop

0000e948 <__libc_init_array>:
    e948:	b570      	push	{r4, r5, r6, lr}
    e94a:	4e0f      	ldr	r6, [pc, #60]	; (e988 <__libc_init_array+0x40>)
    e94c:	4d0f      	ldr	r5, [pc, #60]	; (e98c <__libc_init_array+0x44>)
    e94e:	1b76      	subs	r6, r6, r5
    e950:	10b6      	asrs	r6, r6, #2
    e952:	bf18      	it	ne
    e954:	2400      	movne	r4, #0
    e956:	d005      	beq.n	e964 <__libc_init_array+0x1c>
    e958:	3401      	adds	r4, #1
    e95a:	f855 3b04 	ldr.w	r3, [r5], #4
    e95e:	4798      	blx	r3
    e960:	42a6      	cmp	r6, r4
    e962:	d1f9      	bne.n	e958 <__libc_init_array+0x10>
    e964:	4e0a      	ldr	r6, [pc, #40]	; (e990 <__libc_init_array+0x48>)
    e966:	4d0b      	ldr	r5, [pc, #44]	; (e994 <__libc_init_array+0x4c>)
    e968:	1b76      	subs	r6, r6, r5
    e96a:	f000 fc67 	bl	f23c <_init>
    e96e:	10b6      	asrs	r6, r6, #2
    e970:	bf18      	it	ne
    e972:	2400      	movne	r4, #0
    e974:	d006      	beq.n	e984 <__libc_init_array+0x3c>
    e976:	3401      	adds	r4, #1
    e978:	f855 3b04 	ldr.w	r3, [r5], #4
    e97c:	4798      	blx	r3
    e97e:	42a6      	cmp	r6, r4
    e980:	d1f9      	bne.n	e976 <__libc_init_array+0x2e>
    e982:	bd70      	pop	{r4, r5, r6, pc}
    e984:	bd70      	pop	{r4, r5, r6, pc}
    e986:	bf00      	nop
    e988:	0000f248 	.word	0x0000f248
    e98c:	0000f248 	.word	0x0000f248
    e990:	0000f260 	.word	0x0000f260
    e994:	0000f248 	.word	0x0000f248

0000e998 <memcpy>:
    e998:	4684      	mov	ip, r0
    e99a:	ea41 0300 	orr.w	r3, r1, r0
    e99e:	f013 0303 	ands.w	r3, r3, #3
    e9a2:	d16d      	bne.n	ea80 <memcpy+0xe8>
    e9a4:	3a40      	subs	r2, #64	; 0x40
    e9a6:	d341      	bcc.n	ea2c <memcpy+0x94>
    e9a8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9ac:	f840 3b04 	str.w	r3, [r0], #4
    e9b0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9b4:	f840 3b04 	str.w	r3, [r0], #4
    e9b8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9bc:	f840 3b04 	str.w	r3, [r0], #4
    e9c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9c4:	f840 3b04 	str.w	r3, [r0], #4
    e9c8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9cc:	f840 3b04 	str.w	r3, [r0], #4
    e9d0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9d4:	f840 3b04 	str.w	r3, [r0], #4
    e9d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9dc:	f840 3b04 	str.w	r3, [r0], #4
    e9e0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9e4:	f840 3b04 	str.w	r3, [r0], #4
    e9e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9ec:	f840 3b04 	str.w	r3, [r0], #4
    e9f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9f4:	f840 3b04 	str.w	r3, [r0], #4
    e9f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9fc:	f840 3b04 	str.w	r3, [r0], #4
    ea00:	f851 3b04 	ldr.w	r3, [r1], #4
    ea04:	f840 3b04 	str.w	r3, [r0], #4
    ea08:	f851 3b04 	ldr.w	r3, [r1], #4
    ea0c:	f840 3b04 	str.w	r3, [r0], #4
    ea10:	f851 3b04 	ldr.w	r3, [r1], #4
    ea14:	f840 3b04 	str.w	r3, [r0], #4
    ea18:	f851 3b04 	ldr.w	r3, [r1], #4
    ea1c:	f840 3b04 	str.w	r3, [r0], #4
    ea20:	f851 3b04 	ldr.w	r3, [r1], #4
    ea24:	f840 3b04 	str.w	r3, [r0], #4
    ea28:	3a40      	subs	r2, #64	; 0x40
    ea2a:	d2bd      	bcs.n	e9a8 <memcpy+0x10>
    ea2c:	3230      	adds	r2, #48	; 0x30
    ea2e:	d311      	bcc.n	ea54 <memcpy+0xbc>
    ea30:	f851 3b04 	ldr.w	r3, [r1], #4
    ea34:	f840 3b04 	str.w	r3, [r0], #4
    ea38:	f851 3b04 	ldr.w	r3, [r1], #4
    ea3c:	f840 3b04 	str.w	r3, [r0], #4
    ea40:	f851 3b04 	ldr.w	r3, [r1], #4
    ea44:	f840 3b04 	str.w	r3, [r0], #4
    ea48:	f851 3b04 	ldr.w	r3, [r1], #4
    ea4c:	f840 3b04 	str.w	r3, [r0], #4
    ea50:	3a10      	subs	r2, #16
    ea52:	d2ed      	bcs.n	ea30 <memcpy+0x98>
    ea54:	320c      	adds	r2, #12
    ea56:	d305      	bcc.n	ea64 <memcpy+0xcc>
    ea58:	f851 3b04 	ldr.w	r3, [r1], #4
    ea5c:	f840 3b04 	str.w	r3, [r0], #4
    ea60:	3a04      	subs	r2, #4
    ea62:	d2f9      	bcs.n	ea58 <memcpy+0xc0>
    ea64:	3204      	adds	r2, #4
    ea66:	d008      	beq.n	ea7a <memcpy+0xe2>
    ea68:	07d2      	lsls	r2, r2, #31
    ea6a:	bf1c      	itt	ne
    ea6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ea70:	f800 3b01 	strbne.w	r3, [r0], #1
    ea74:	d301      	bcc.n	ea7a <memcpy+0xe2>
    ea76:	880b      	ldrh	r3, [r1, #0]
    ea78:	8003      	strh	r3, [r0, #0]
    ea7a:	4660      	mov	r0, ip
    ea7c:	4770      	bx	lr
    ea7e:	bf00      	nop
    ea80:	2a08      	cmp	r2, #8
    ea82:	d313      	bcc.n	eaac <memcpy+0x114>
    ea84:	078b      	lsls	r3, r1, #30
    ea86:	d08d      	beq.n	e9a4 <memcpy+0xc>
    ea88:	f010 0303 	ands.w	r3, r0, #3
    ea8c:	d08a      	beq.n	e9a4 <memcpy+0xc>
    ea8e:	f1c3 0304 	rsb	r3, r3, #4
    ea92:	1ad2      	subs	r2, r2, r3
    ea94:	07db      	lsls	r3, r3, #31
    ea96:	bf1c      	itt	ne
    ea98:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ea9c:	f800 3b01 	strbne.w	r3, [r0], #1
    eaa0:	d380      	bcc.n	e9a4 <memcpy+0xc>
    eaa2:	f831 3b02 	ldrh.w	r3, [r1], #2
    eaa6:	f820 3b02 	strh.w	r3, [r0], #2
    eaaa:	e77b      	b.n	e9a4 <memcpy+0xc>
    eaac:	3a04      	subs	r2, #4
    eaae:	d3d9      	bcc.n	ea64 <memcpy+0xcc>
    eab0:	3a01      	subs	r2, #1
    eab2:	f811 3b01 	ldrb.w	r3, [r1], #1
    eab6:	f800 3b01 	strb.w	r3, [r0], #1
    eaba:	d2f9      	bcs.n	eab0 <memcpy+0x118>
    eabc:	780b      	ldrb	r3, [r1, #0]
    eabe:	7003      	strb	r3, [r0, #0]
    eac0:	784b      	ldrb	r3, [r1, #1]
    eac2:	7043      	strb	r3, [r0, #1]
    eac4:	788b      	ldrb	r3, [r1, #2]
    eac6:	7083      	strb	r3, [r0, #2]
    eac8:	4660      	mov	r0, ip
    eaca:	4770      	bx	lr

0000eacc <memset>:
    eacc:	b470      	push	{r4, r5, r6}
    eace:	0786      	lsls	r6, r0, #30
    ead0:	d046      	beq.n	eb60 <memset+0x94>
    ead2:	1e54      	subs	r4, r2, #1
    ead4:	2a00      	cmp	r2, #0
    ead6:	d041      	beq.n	eb5c <memset+0x90>
    ead8:	b2ca      	uxtb	r2, r1
    eada:	4603      	mov	r3, r0
    eadc:	e002      	b.n	eae4 <memset+0x18>
    eade:	f114 34ff 	adds.w	r4, r4, #4294967295
    eae2:	d33b      	bcc.n	eb5c <memset+0x90>
    eae4:	f803 2b01 	strb.w	r2, [r3], #1
    eae8:	079d      	lsls	r5, r3, #30
    eaea:	d1f8      	bne.n	eade <memset+0x12>
    eaec:	2c03      	cmp	r4, #3
    eaee:	d92e      	bls.n	eb4e <memset+0x82>
    eaf0:	b2cd      	uxtb	r5, r1
    eaf2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    eaf6:	2c0f      	cmp	r4, #15
    eaf8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    eafc:	d919      	bls.n	eb32 <memset+0x66>
    eafe:	f103 0210 	add.w	r2, r3, #16
    eb02:	4626      	mov	r6, r4
    eb04:	3e10      	subs	r6, #16
    eb06:	2e0f      	cmp	r6, #15
    eb08:	f842 5c10 	str.w	r5, [r2, #-16]
    eb0c:	f842 5c0c 	str.w	r5, [r2, #-12]
    eb10:	f842 5c08 	str.w	r5, [r2, #-8]
    eb14:	f842 5c04 	str.w	r5, [r2, #-4]
    eb18:	f102 0210 	add.w	r2, r2, #16
    eb1c:	d8f2      	bhi.n	eb04 <memset+0x38>
    eb1e:	f1a4 0210 	sub.w	r2, r4, #16
    eb22:	f022 020f 	bic.w	r2, r2, #15
    eb26:	f004 040f 	and.w	r4, r4, #15
    eb2a:	3210      	adds	r2, #16
    eb2c:	2c03      	cmp	r4, #3
    eb2e:	4413      	add	r3, r2
    eb30:	d90d      	bls.n	eb4e <memset+0x82>
    eb32:	461e      	mov	r6, r3
    eb34:	4622      	mov	r2, r4
    eb36:	3a04      	subs	r2, #4
    eb38:	2a03      	cmp	r2, #3
    eb3a:	f846 5b04 	str.w	r5, [r6], #4
    eb3e:	d8fa      	bhi.n	eb36 <memset+0x6a>
    eb40:	1f22      	subs	r2, r4, #4
    eb42:	f022 0203 	bic.w	r2, r2, #3
    eb46:	3204      	adds	r2, #4
    eb48:	4413      	add	r3, r2
    eb4a:	f004 0403 	and.w	r4, r4, #3
    eb4e:	b12c      	cbz	r4, eb5c <memset+0x90>
    eb50:	b2c9      	uxtb	r1, r1
    eb52:	441c      	add	r4, r3
    eb54:	f803 1b01 	strb.w	r1, [r3], #1
    eb58:	429c      	cmp	r4, r3
    eb5a:	d1fb      	bne.n	eb54 <memset+0x88>
    eb5c:	bc70      	pop	{r4, r5, r6}
    eb5e:	4770      	bx	lr
    eb60:	4614      	mov	r4, r2
    eb62:	4603      	mov	r3, r0
    eb64:	e7c2      	b.n	eaec <memset+0x20>
    eb66:	bf00      	nop
	...

0000eb80 <strlen>:
    eb80:	f890 f000 	pld	[r0]
    eb84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    eb88:	f020 0107 	bic.w	r1, r0, #7
    eb8c:	f06f 0c00 	mvn.w	ip, #0
    eb90:	f010 0407 	ands.w	r4, r0, #7
    eb94:	f891 f020 	pld	[r1, #32]
    eb98:	f040 8049 	bne.w	ec2e <strlen+0xae>
    eb9c:	f04f 0400 	mov.w	r4, #0
    eba0:	f06f 0007 	mvn.w	r0, #7
    eba4:	e9d1 2300 	ldrd	r2, r3, [r1]
    eba8:	f891 f040 	pld	[r1, #64]	; 0x40
    ebac:	f100 0008 	add.w	r0, r0, #8
    ebb0:	fa82 f24c 	uadd8	r2, r2, ip
    ebb4:	faa4 f28c 	sel	r2, r4, ip
    ebb8:	fa83 f34c 	uadd8	r3, r3, ip
    ebbc:	faa2 f38c 	sel	r3, r2, ip
    ebc0:	bb4b      	cbnz	r3, ec16 <strlen+0x96>
    ebc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ebc6:	fa82 f24c 	uadd8	r2, r2, ip
    ebca:	f100 0008 	add.w	r0, r0, #8
    ebce:	faa4 f28c 	sel	r2, r4, ip
    ebd2:	fa83 f34c 	uadd8	r3, r3, ip
    ebd6:	faa2 f38c 	sel	r3, r2, ip
    ebda:	b9e3      	cbnz	r3, ec16 <strlen+0x96>
    ebdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ebe0:	fa82 f24c 	uadd8	r2, r2, ip
    ebe4:	f100 0008 	add.w	r0, r0, #8
    ebe8:	faa4 f28c 	sel	r2, r4, ip
    ebec:	fa83 f34c 	uadd8	r3, r3, ip
    ebf0:	faa2 f38c 	sel	r3, r2, ip
    ebf4:	b97b      	cbnz	r3, ec16 <strlen+0x96>
    ebf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ebfa:	f101 0120 	add.w	r1, r1, #32
    ebfe:	fa82 f24c 	uadd8	r2, r2, ip
    ec02:	f100 0008 	add.w	r0, r0, #8
    ec06:	faa4 f28c 	sel	r2, r4, ip
    ec0a:	fa83 f34c 	uadd8	r3, r3, ip
    ec0e:	faa2 f38c 	sel	r3, r2, ip
    ec12:	2b00      	cmp	r3, #0
    ec14:	d0c6      	beq.n	eba4 <strlen+0x24>
    ec16:	2a00      	cmp	r2, #0
    ec18:	bf04      	itt	eq
    ec1a:	3004      	addeq	r0, #4
    ec1c:	461a      	moveq	r2, r3
    ec1e:	ba12      	rev	r2, r2
    ec20:	fab2 f282 	clz	r2, r2
    ec24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    ec28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ec2c:	4770      	bx	lr
    ec2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    ec32:	f004 0503 	and.w	r5, r4, #3
    ec36:	f1c4 0000 	rsb	r0, r4, #0
    ec3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ec3e:	f014 0f04 	tst.w	r4, #4
    ec42:	f891 f040 	pld	[r1, #64]	; 0x40
    ec46:	fa0c f505 	lsl.w	r5, ip, r5
    ec4a:	ea62 0205 	orn	r2, r2, r5
    ec4e:	bf1c      	itt	ne
    ec50:	ea63 0305 	ornne	r3, r3, r5
    ec54:	4662      	movne	r2, ip
    ec56:	f04f 0400 	mov.w	r4, #0
    ec5a:	e7a9      	b.n	ebb0 <strlen+0x30>

0000ec5c <__register_exitproc>:
    ec5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec60:	4d2c      	ldr	r5, [pc, #176]	; (ed14 <__register_exitproc+0xb8>)
    ec62:	4606      	mov	r6, r0
    ec64:	6828      	ldr	r0, [r5, #0]
    ec66:	4698      	mov	r8, r3
    ec68:	460f      	mov	r7, r1
    ec6a:	4691      	mov	r9, r2
    ec6c:	f000 f882 	bl	ed74 <__retarget_lock_acquire_recursive>
    ec70:	4b29      	ldr	r3, [pc, #164]	; (ed18 <__register_exitproc+0xbc>)
    ec72:	681c      	ldr	r4, [r3, #0]
    ec74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d03e      	beq.n	ecfa <__register_exitproc+0x9e>
    ec7c:	685a      	ldr	r2, [r3, #4]
    ec7e:	2a1f      	cmp	r2, #31
    ec80:	dc1c      	bgt.n	ecbc <__register_exitproc+0x60>
    ec82:	f102 0e01 	add.w	lr, r2, #1
    ec86:	b176      	cbz	r6, eca6 <__register_exitproc+0x4a>
    ec88:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ec8c:	2401      	movs	r4, #1
    ec8e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ec92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ec96:	4094      	lsls	r4, r2
    ec98:	4320      	orrs	r0, r4
    ec9a:	2e02      	cmp	r6, #2
    ec9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eca0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eca4:	d023      	beq.n	ecee <__register_exitproc+0x92>
    eca6:	3202      	adds	r2, #2
    eca8:	f8c3 e004 	str.w	lr, [r3, #4]
    ecac:	6828      	ldr	r0, [r5, #0]
    ecae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ecb2:	f000 f861 	bl	ed78 <__retarget_lock_release_recursive>
    ecb6:	2000      	movs	r0, #0
    ecb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ecbc:	4b17      	ldr	r3, [pc, #92]	; (ed1c <__register_exitproc+0xc0>)
    ecbe:	b30b      	cbz	r3, ed04 <__register_exitproc+0xa8>
    ecc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ecc4:	f7ff fd0c 	bl	e6e0 <malloc>
    ecc8:	4603      	mov	r3, r0
    ecca:	b1d8      	cbz	r0, ed04 <__register_exitproc+0xa8>
    eccc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ecd0:	6002      	str	r2, [r0, #0]
    ecd2:	2100      	movs	r1, #0
    ecd4:	6041      	str	r1, [r0, #4]
    ecd6:	460a      	mov	r2, r1
    ecd8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ecdc:	f04f 0e01 	mov.w	lr, #1
    ece0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ece4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ece8:	2e00      	cmp	r6, #0
    ecea:	d0dc      	beq.n	eca6 <__register_exitproc+0x4a>
    ecec:	e7cc      	b.n	ec88 <__register_exitproc+0x2c>
    ecee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ecf2:	430c      	orrs	r4, r1
    ecf4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ecf8:	e7d5      	b.n	eca6 <__register_exitproc+0x4a>
    ecfa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ecfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ed02:	e7bb      	b.n	ec7c <__register_exitproc+0x20>
    ed04:	6828      	ldr	r0, [r5, #0]
    ed06:	f000 f837 	bl	ed78 <__retarget_lock_release_recursive>
    ed0a:	f04f 30ff 	mov.w	r0, #4294967295
    ed0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed12:	bf00      	nop
    ed14:	20000568 	.word	0x20000568
    ed18:	0000f238 	.word	0x0000f238
    ed1c:	0000e6e1 	.word	0x0000e6e1

0000ed20 <register_fini>:
    ed20:	4b02      	ldr	r3, [pc, #8]	; (ed2c <register_fini+0xc>)
    ed22:	b113      	cbz	r3, ed2a <register_fini+0xa>
    ed24:	4802      	ldr	r0, [pc, #8]	; (ed30 <register_fini+0x10>)
    ed26:	f000 b805 	b.w	ed34 <atexit>
    ed2a:	4770      	bx	lr
    ed2c:	00000000 	.word	0x00000000
    ed30:	0000ed41 	.word	0x0000ed41

0000ed34 <atexit>:
    ed34:	2300      	movs	r3, #0
    ed36:	4601      	mov	r1, r0
    ed38:	461a      	mov	r2, r3
    ed3a:	4618      	mov	r0, r3
    ed3c:	f7ff bf8e 	b.w	ec5c <__register_exitproc>

0000ed40 <__libc_fini_array>:
    ed40:	b538      	push	{r3, r4, r5, lr}
    ed42:	4c0a      	ldr	r4, [pc, #40]	; (ed6c <__libc_fini_array+0x2c>)
    ed44:	4d0a      	ldr	r5, [pc, #40]	; (ed70 <__libc_fini_array+0x30>)
    ed46:	1b64      	subs	r4, r4, r5
    ed48:	10a4      	asrs	r4, r4, #2
    ed4a:	d00a      	beq.n	ed62 <__libc_fini_array+0x22>
    ed4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ed50:	3b01      	subs	r3, #1
    ed52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ed56:	3c01      	subs	r4, #1
    ed58:	f855 3904 	ldr.w	r3, [r5], #-4
    ed5c:	4798      	blx	r3
    ed5e:	2c00      	cmp	r4, #0
    ed60:	d1f9      	bne.n	ed56 <__libc_fini_array+0x16>
    ed62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ed66:	f000 ba7b 	b.w	f260 <_fini>
    ed6a:	bf00      	nop
    ed6c:	0000f270 	.word	0x0000f270
    ed70:	0000f26c 	.word	0x0000f26c

0000ed74 <__retarget_lock_acquire_recursive>:
    ed74:	4770      	bx	lr
    ed76:	bf00      	nop

0000ed78 <__retarget_lock_release_recursive>:
    ed78:	4770      	bx	lr
    ed7a:	bf00      	nop
    ed7c:	20555043 	.word	0x20555043
    ed80:	69726553 	.word	0x69726553
    ed84:	203a6c61 	.word	0x203a6c61
    ed88:	00000000 	.word	0x00000000
    ed8c:	682f2e2e 	.word	0x682f2e2e
    ed90:	702f6c70 	.word	0x702f6c70
    ed94:	2f74726f 	.word	0x2f74726f
    ed98:	5f6c7068 	.word	0x5f6c7068
    ed9c:	6f697067 	.word	0x6f697067
    eda0:	7361625f 	.word	0x7361625f
    eda4:	00682e65 	.word	0x00682e65
    eda8:	682f2e2e 	.word	0x682f2e2e
    edac:	692f6c61 	.word	0x692f6c61
    edb0:	756c636e 	.word	0x756c636e
    edb4:	682f6564 	.word	0x682f6564
    edb8:	775f6c61 	.word	0x775f6c61
    edbc:	682e7464 	.word	0x682e7464
    edc0:	00000000 	.word	0x00000000
    edc4:	682f2e2e 	.word	0x682f2e2e
    edc8:	732f6c61 	.word	0x732f6c61
    edcc:	682f6372 	.word	0x682f6372
    edd0:	635f6c61 	.word	0x635f6c61
    edd4:	6e656c61 	.word	0x6e656c61
    edd8:	2e726164 	.word	0x2e726164
    eddc:	00000063 	.word	0x00000063
    ede0:	682f2e2e 	.word	0x682f2e2e
    ede4:	732f6c61 	.word	0x732f6c61
    ede8:	682f6372 	.word	0x682f6372
    edec:	635f6c61 	.word	0x635f6c61
    edf0:	615f6e61 	.word	0x615f6e61
    edf4:	636e7973 	.word	0x636e7973
    edf8:	0000632e 	.word	0x0000632e
    edfc:	682f2e2e 	.word	0x682f2e2e
    ee00:	732f6c61 	.word	0x732f6c61
    ee04:	682f6372 	.word	0x682f6372
    ee08:	635f6c61 	.word	0x635f6c61
    ee0c:	735f6372 	.word	0x735f6372
    ee10:	2e636e79 	.word	0x2e636e79
    ee14:	00000063 	.word	0x00000063
    ee18:	682f2e2e 	.word	0x682f2e2e
    ee1c:	732f6c61 	.word	0x732f6c61
    ee20:	682f6372 	.word	0x682f6372
    ee24:	695f6c61 	.word	0x695f6c61
    ee28:	6d5f6332 	.word	0x6d5f6332
    ee2c:	7973615f 	.word	0x7973615f
    ee30:	632e636e 	.word	0x632e636e
    ee34:	00000000 	.word	0x00000000
    ee38:	682f2e2e 	.word	0x682f2e2e
    ee3c:	732f6c61 	.word	0x732f6c61
    ee40:	682f6372 	.word	0x682f6372
    ee44:	705f6c61 	.word	0x705f6c61
    ee48:	632e6d77 	.word	0x632e6d77
    ee4c:	00000000 	.word	0x00000000
    ee50:	682f2e2e 	.word	0x682f2e2e
    ee54:	732f6c61 	.word	0x732f6c61
    ee58:	682f6372 	.word	0x682f6372
    ee5c:	715f6c61 	.word	0x715f6c61
    ee60:	5f697073 	.word	0x5f697073
    ee64:	636e7973 	.word	0x636e7973
    ee68:	0000632e 	.word	0x0000632e
    ee6c:	682f2e2e 	.word	0x682f2e2e
    ee70:	732f6c61 	.word	0x732f6c61
    ee74:	682f6372 	.word	0x682f6372
    ee78:	735f6c61 	.word	0x735f6c61
    ee7c:	6d5f6970 	.word	0x6d5f6970
    ee80:	7973615f 	.word	0x7973615f
    ee84:	632e636e 	.word	0x632e636e
    ee88:	00000000 	.word	0x00000000
    ee8c:	682f2e2e 	.word	0x682f2e2e
    ee90:	732f6c61 	.word	0x732f6c61
    ee94:	682f6372 	.word	0x682f6372
    ee98:	735f6c61 	.word	0x735f6c61
    ee9c:	6d5f6970 	.word	0x6d5f6970
    eea0:	6e79735f 	.word	0x6e79735f
    eea4:	00632e63 	.word	0x00632e63
    eea8:	682f2e2e 	.word	0x682f2e2e
    eeac:	732f6c61 	.word	0x732f6c61
    eeb0:	682f6372 	.word	0x682f6372
    eeb4:	745f6c61 	.word	0x745f6c61
    eeb8:	72656d69 	.word	0x72656d69
    eebc:	0000632e 	.word	0x0000632e
    eec0:	682f2e2e 	.word	0x682f2e2e
    eec4:	752f6c61 	.word	0x752f6c61
    eec8:	736c6974 	.word	0x736c6974
    eecc:	6372732f 	.word	0x6372732f
    eed0:	6974752f 	.word	0x6974752f
    eed4:	6c5f736c 	.word	0x6c5f736c
    eed8:	2e747369 	.word	0x2e747369
    eedc:	00000063 	.word	0x00000063

0000eee0 <_map>:
    eee0:	00000004 00000004 00000005 00000005     ................
    eef0:	00000006 00000056 00000007 00000057     ....V.......W...
    ef00:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    ef10:	632e6369 00000000                       ic.c....

0000ef18 <user_mux_confs>:
    ef18:	00000100 00000000 00000000 00000000     ................
	...

0000ef5c <channel_confs>:
    ef5c:	0000065e 00000000 00000000 00000000     ^...............
	...

0000ef9c <interrupt_cfg>:
	...
    f01c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f02c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f03c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f04c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f05c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f06c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f07c:	43000400 43000800 43000c00              ...C...C...C

0000f088 <sercomspi_regs>:
    f088:	0020000c 00020000 00000000 01ff00fe     .. .............
    f098:	20000c00 02000000 00000000 ff00fe00     ... ............
    f0a8:	000c0101 00000020 00000002 00fe0000     .... ...........
    f0b8:	000401ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f0c8:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f0d8:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f0e8:	43001400 43001800                       ...C...C

0000f0f0 <_usb_ep_cfgs>:
    f0f0:	2000072c 00000000 00000040 2000076c     ,.. ....@...l.. 
    f100:	200007ac 00400040 200007ec 2000082c     ... @.@.... ,.. 
    f110:	00400040 2000086c 200008ac 00400040     @.@.l.. ... @.@.
    f120:	200008ec 2000092c 00400040 00000804     ... ,.. @.@.....
    f130:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f140:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f150:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f160:	7361625f 00682e65                       _base.h.

0000f168 <n25q256a_interface>:
    f168:	0000b5a5 0000b649 0000b759 0000b911     ....I...Y.......
    f178:	0000b9a1 752f2e2e 642f6273 63697665     ....../usb/devic
    f188:	73752f65 2e636462 00000063              e/usbdc.c...

0000f194 <defaultParameters>:
    f194:	000000a5                                ....

0000f198 <defaultPreferences>:
    f198:	000000fa 00000032                       ....2...

0000f1a0 <_ZTV9CDC_Class>:
	...
    f1a8:	0000dd61 0000de15 0000da41 0000dd29     a.......A...)...
    f1b8:	0000de85 0000dced 0000dc2d 0000dc7d     ........-...}...
    f1c8:	0000dd49 0000dd99                       I.......

0000f1d0 <_ZTV6Stream>:
	...
    f1d8:	0000e6f5 0000df55 0000da41 0000da55     ....U...A...U...
    f1e8:	0000e6f5 0000e6f5 0000e6f5 2e257830     ............0x%.
    f1f8:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f208:	0066766f                                ovf.

0000f20c <_ZTV5Print>:
	...
    f214:	0000e6f5 0000df55 0000da41 0000da55     ....U...A...U...
    f224:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f234:	00632e6f                                o.c.

0000f238 <_global_impure_ptr>:
    f238:	20000140                                @.. 

0000f23c <_init>:
    f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f23e:	bf00      	nop
    f240:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f242:	bc08      	pop	{r3}
    f244:	469e      	mov	lr, r3
    f246:	4770      	bx	lr

0000f248 <__init_array_start>:
    f248:	0000ed21 	.word	0x0000ed21

0000f24c <__frame_dummy_init_array_entry>:
    f24c:	00000289 0000d949 0000da09 0000df05     ....I...........
    f25c:	0000e6cd                                ....

0000f260 <_fini>:
    f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f262:	bf00      	nop
    f264:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f266:	bc08      	pop	{r3}
    f268:	469e      	mov	lr, r3
    f26a:	4770      	bx	lr

0000f26c <__fini_array_start>:
    f26c:	00000265 	.word	0x00000265
