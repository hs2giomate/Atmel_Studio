
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000144e0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000144e0  000144e0  000244e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  000144e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003063c  2**0
                  CONTENTS
  5 .bss          00009c04  2000063c  00014b24  0003063c  2**2
                  ALLOC
  6 .stack        00010000  2000a240  0001e728  0003063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000a841e  00000000  00000000  000306c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e1d4  00000000  00000000  000d8ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021e9e  00000000  00000000  000e6cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003b78  00000000  00000000  00108b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003780  00000000  00000000  0010c6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00059e7a  00000000  00000000  0010fe4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004df96  00000000  00000000  00169cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00147fcd  00000000  00000000  001b7c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f188  00000000  00000000  002ffc28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 a2 01 20 b5 07 00 00 b1 07 00 00 b1 07 00 00     @.. ............
      10:	b1 07 00 00 b1 07 00 00 b1 07 00 00 00 00 00 00     ................
	...
      2c:	b1 07 00 00 b1 07 00 00 00 00 00 00 b1 07 00 00     ................
      3c:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      4c:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      5c:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      6c:	ed 65 00 00 f1 53 00 00 01 54 00 00 b1 07 00 00     .e...S...T......
      7c:	11 54 00 00 21 54 00 00 31 54 00 00 41 54 00 00     .T..!T..1T..AT..
      8c:	51 54 00 00 61 54 00 00 71 54 00 00 b1 07 00 00     QT..aT..qT......
      9c:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      ac:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      bc:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      cc:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
      dc:	b1 07 00 00 b1 07 00 00 b1 07 00 00 00 00 00 00     ................
	...
      f4:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     104:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     114:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     124:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     134:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     144:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     154:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     164:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     174:	b1 07 00 00 b1 07 00 00 39 48 00 00 59 b6 00 00     ........9H..Y...
     184:	69 b6 00 00 79 b6 00 00 89 b6 00 00 b1 07 00 00     i...y...........
     194:	99 80 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     1a4:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b5 80 00 00     ................
     1b4:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     1c4:	d1 80 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     1d4:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     1e4:	b1 07 00 00 b1 07 00 00 55 8d 00 00 b1 07 00 00     ........U.......
     1f4:	71 8d 00 00 b1 07 00 00 8d 8d 00 00 a9 8d 00 00     q...............
     204:	c5 8d 00 00 e1 8d 00 00 b1 07 00 00 b1 07 00 00     ................
     214:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     224:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     234:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     244:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................
     254:	b1 07 00 00 b1 07 00 00 b1 07 00 00 b1 07 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	000144e8 	.word	0x000144e8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000144e8 	.word	0x000144e8
     2c4:	20000640 	.word	0x20000640
     2c8:	000144e8 	.word	0x000144e8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "Dual_Flapper_Valve_Controller.h"
#include "MemoryFlash_Class.h"
#include "FlashMemoryClass.h"

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
{
	
} //Commands_Handler
     2f4:	bc70      	pop	{r4, r5, r6}
     2f6:	4770      	bx	lr

000002f8 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     2f8:	680b      	ldr	r3, [r1, #0]
     2fa:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     2fc:	4770      	bx	lr

000002fe <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     2fe:	60c1      	str	r1, [r0, #12]
     300:	4770      	bx	lr
	...

00000304 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     304:	b510      	push	{r4, lr}
     306:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     308:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     30c:	bf14      	ite	ne
     30e:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     310:	2100      	moveq	r1, #0
     312:	4b03      	ldr	r3, [pc, #12]	; (320 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     314:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     316:	4b03      	ldr	r3, [pc, #12]	; (324 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     318:	4798      	blx	r3
	}
	return data;
}
     31a:	4620      	mov	r0, r4
     31c:	bd10      	pop	{r4, pc}
     31e:	bf00      	nop
     320:	20001b6c 	.word	0x20001b6c
     324:	0000f1c9 	.word	0x0000f1c9

00000328 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     328:	b538      	push	{r3, r4, r5, lr}
     32a:	4605      	mov	r5, r0
     32c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     32e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     332:	bf14      	ite	ne
     334:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     336:	2100      	moveq	r1, #0
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     33a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     33c:	4b04      	ldr	r3, [pc, #16]	; (350 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     33e:	4798      	blx	r3
	return SetEnableFan1(data);
     340:	4621      	mov	r1, r4
     342:	4628      	mov	r0, r5
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     346:	4798      	blx	r3
}
     348:	bd38      	pop	{r3, r4, r5, pc}
     34a:	bf00      	nop
     34c:	20001b6c 	.word	0x20001b6c
     350:	0000f1c9 	.word	0x0000f1c9
     354:	00000305 	.word	0x00000305

00000358 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     358:	b538      	push	{r3, r4, r5, lr}
     35a:	4605      	mov	r5, r0
     35c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     35e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     362:	bf14      	ite	ne
     364:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     366:	2100      	moveq	r1, #0
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     36a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     36e:	4798      	blx	r3
	return SetEnableFan2(data);
     370:	4621      	mov	r1, r4
     372:	4628      	mov	r0, r5
     374:	4b03      	ldr	r3, [pc, #12]	; (384 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     376:	4798      	blx	r3
}
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	20001b6c 	.word	0x20001b6c
     380:	0000ee59 	.word	0x0000ee59
     384:	00000329 	.word	0x00000329

00000388 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     388:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     38a:	68c3      	ldr	r3, [r0, #12]
     38c:	6819      	ldr	r1, [r3, #0]
     38e:	6041      	str	r1, [r0, #4]
     390:	8899      	ldrh	r1, [r3, #4]
     392:	799b      	ldrb	r3, [r3, #6]
     394:	8101      	strh	r1, [r0, #8]
     396:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     398:	7a43      	ldrb	r3, [r0, #9]
     39a:	2b4b      	cmp	r3, #75	; 0x4b
     39c:	bf0c      	ite	eq
     39e:	2401      	moveq	r4, #1
     3a0:	2400      	movne	r4, #0
	if (result){
     3a2:	d001      	beq.n	3a8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3a4:	4620      	mov	r0, r4
     3a6:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3a8:	7a81      	ldrb	r1, [r0, #10]
     3aa:	4b01      	ldr	r3, [pc, #4]	; (3b0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3ac:	4798      	blx	r3
     3ae:	e7f9      	b.n	3a4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3b0:	00000359 	.word	0x00000359

000003b4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3b6:	68c3      	ldr	r3, [r0, #12]
     3b8:	f100 0210 	add.w	r2, r0, #16
     3bc:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3c0:	681f      	ldr	r7, [r3, #0]
     3c2:	685e      	ldr	r6, [r3, #4]
     3c4:	689d      	ldr	r5, [r3, #8]
     3c6:	68dc      	ldr	r4, [r3, #12]
     3c8:	6017      	str	r7, [r2, #0]
     3ca:	6056      	str	r6, [r2, #4]
     3cc:	6095      	str	r5, [r2, #8]
     3ce:	60d4      	str	r4, [r2, #12]
     3d0:	3310      	adds	r3, #16
     3d2:	3210      	adds	r2, #16
     3d4:	428b      	cmp	r3, r1
     3d6:	d1f3      	bne.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     3d8:	7d43      	ldrb	r3, [r0, #21]
     3da:	2b4c      	cmp	r3, #76	; 0x4c
     3dc:	bf0c      	ite	eq
     3de:	2501      	moveq	r5, #1
     3e0:	2500      	movne	r5, #0
	if (result){
     3e2:	d112      	bne.n	40a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     3e4:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     3e6:	7d81      	ldrb	r1, [r0, #22]
     3e8:	b119      	cbz	r1, 3f2 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     3ec:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     3ee:	4b09      	ldr	r3, [pc, #36]	; (414 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     3f0:	4798      	blx	r3
			
		}

		if (data[1]>0){
     3f2:	7de1      	ldrb	r1, [r4, #23]
     3f4:	b119      	cbz	r1, 3fe <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     3f6:	4b06      	ldr	r3, [pc, #24]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     3f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
     3fa:	4b06      	ldr	r3, [pc, #24]	; (414 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     3fc:	4798      	blx	r3
		}
		if (data[2]>0){
     3fe:	7e21      	ldrb	r1, [r4, #24]
     400:	b119      	cbz	r1, 40a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     404:	6e58      	ldr	r0, [r3, #100]	; 0x64
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     408:	4798      	blx	r3
		

	}
	
	return result;
}
     40a:	4628      	mov	r0, r5
     40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40e:	bf00      	nop
     410:	20001b6c 	.word	0x20001b6c
     414:	0000f1ed 	.word	0x0000f1ed
     418:	0000ee71 	.word	0x0000ee71

0000041c <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     420:	68c3      	ldr	r3, [r0, #12]
     422:	f100 0210 	add.w	r2, r0, #16
     426:	f103 0140 	add.w	r1, r3, #64	; 0x40
     42a:	681f      	ldr	r7, [r3, #0]
     42c:	685e      	ldr	r6, [r3, #4]
     42e:	689d      	ldr	r5, [r3, #8]
     430:	68dc      	ldr	r4, [r3, #12]
     432:	6017      	str	r7, [r2, #0]
     434:	6056      	str	r6, [r2, #4]
     436:	6095      	str	r5, [r2, #8]
     438:	60d4      	str	r4, [r2, #12]
     43a:	3310      	adds	r3, #16
     43c:	3210      	adds	r2, #16
     43e:	428b      	cmp	r3, r1
     440:	d1f3      	bne.n	42a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xe>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     442:	7d43      	ldrb	r3, [r0, #21]
     444:	2b4f      	cmp	r3, #79	; 0x4f
     446:	bf0c      	ite	eq
     448:	2701      	moveq	r7, #1
     44a:	2700      	movne	r7, #0
	if (result){
     44c:	d002      	beq.n	454 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x38>
	}else{

	}
	
	return result;
}
     44e:	4638      	mov	r0, r7
     450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     454:	4e0c      	ldr	r6, [pc, #48]	; (488 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x6c>)
     456:	f100 0516 	add.w	r5, r0, #22
     45a:	f100 0418 	add.w	r4, r0, #24
					flapper.valve[i]->StopControlling();
     45e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 48c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x70>
					flapper.valve[i]->StartControlling() ;
     462:	f8df 802c 	ldr.w	r8, [pc, #44]	; 490 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x74>
     466:	e003      	b.n	470 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x54>
     468:	47c0      	blx	r8
     46a:	3501      	adds	r5, #1
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     46c:	42a5      	cmp	r5, r4
     46e:	d0ee      	beq.n	44e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x32>
			if (flapper.valve[i]->isOK)
     470:	f856 0b04 	ldr.w	r0, [r6], #4
     474:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     478:	2b00      	cmp	r3, #0
     47a:	d0f6      	beq.n	46a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
				if ((data&(0x01))>0)
     47c:	782b      	ldrb	r3, [r5, #0]
     47e:	f013 0f01 	tst.w	r3, #1
     482:	d1f1      	bne.n	468 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4c>
					flapper.valve[i]->StopControlling();
     484:	47c8      	blx	r9
     486:	e7f0      	b.n	46a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
     488:	20001e98 	.word	0x20001e98
     48c:	00010341 	.word	0x00010341
     490:	00010525 	.word	0x00010525

00000494 <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     498:	68c3      	ldr	r3, [r0, #12]
     49a:	f100 0210 	add.w	r2, r0, #16
     49e:	f103 0140 	add.w	r1, r3, #64	; 0x40
     4a2:	681f      	ldr	r7, [r3, #0]
     4a4:	685e      	ldr	r6, [r3, #4]
     4a6:	689d      	ldr	r5, [r3, #8]
     4a8:	68dc      	ldr	r4, [r3, #12]
     4aa:	6017      	str	r7, [r2, #0]
     4ac:	6056      	str	r6, [r2, #4]
     4ae:	6095      	str	r5, [r2, #8]
     4b0:	60d4      	str	r4, [r2, #12]
     4b2:	3310      	adds	r3, #16
     4b4:	3210      	adds	r2, #16
     4b6:	428b      	cmp	r3, r1
     4b8:	d1f3      	bne.n	4a2 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xe>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4ba:	7d43      	ldrb	r3, [r0, #21]
     4bc:	2b50      	cmp	r3, #80	; 0x50
     4be:	bf0c      	ite	eq
     4c0:	2701      	moveq	r7, #1
     4c2:	2700      	movne	r7, #0
	if (result){
     4c4:	d002      	beq.n	4cc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x38>
	}else{

	}
	
	return result;
}
     4c6:	4638      	mov	r0, r7
     4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4cc:	4d0f      	ldr	r5, [pc, #60]	; (50c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4ce:	f100 0616 	add.w	r6, r0, #22
     4d2:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->doPeriodicTask=false;
     4d6:	f04f 0900 	mov.w	r9, #0
					flapper.valve[i]->StartControlling(data);
     4da:	f8df a034 	ldr.w	sl, [pc, #52]	; 510 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x7c>
     4de:	e007      	b.n	4f0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x5c>
				flapper.valve[i]->doPeriodicTask=false;
     4e0:	f8d8 3000 	ldr.w	r3, [r8]
     4e4:	f883 9079 	strb.w	r9, [r3, #121]	; 0x79
     4e8:	3504      	adds	r5, #4
     4ea:	3601      	adds	r6, #1
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     4ec:	42a6      	cmp	r6, r4
     4ee:	d0ea      	beq.n	4c6 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x32>
     4f0:	46a8      	mov	r8, r5
			if (flapper.valve[i]->isOK)
     4f2:	6828      	ldr	r0, [r5, #0]
     4f4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     4f8:	2b00      	cmp	r3, #0
     4fa:	d0f5      	beq.n	4e8 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
				if (flapper.valve[i]->controllerEnabled)
     4fc:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
     500:	2b00      	cmp	r3, #0
     502:	d0ed      	beq.n	4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
					flapper.valve[i]->StartControlling(data);
     504:	7831      	ldrb	r1, [r6, #0]
     506:	47d0      	blx	sl
     508:	e7ea      	b.n	4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
     50a:	bf00      	nop
     50c:	20001e98 	.word	0x20001e98
     510:	00010385 	.word	0x00010385

00000514 <_ZN16Commands_Handler22CommandWriteParametersEv>:

	}
	
	return result;
}
bool Commands_Handler::CommandWriteParameters(void){
     514:	b510      	push	{r4, lr}

	uint32_t	w,r;
	int n=sizeof(HVACMessageHeader);
	HVACMessageHeader hm;
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     516:	68c3      	ldr	r3, [r0, #12]
     518:	6819      	ldr	r1, [r3, #0]
     51a:	6041      	str	r1, [r0, #4]
     51c:	889c      	ldrh	r4, [r3, #4]
     51e:	7999      	ldrb	r1, [r3, #6]
     520:	8104      	strh	r4, [r0, #8]
     522:	7281      	strb	r1, [r0, #10]
	
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
	if (result){
     524:	7a42      	ldrb	r2, [r0, #9]
     526:	2a47      	cmp	r2, #71	; 0x47
     528:	d001      	beq.n	52e <_ZN16Commands_Handler22CommandWriteParametersEv+0x1a>
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
     52a:	2000      	movs	r0, #0
		}else{

	}
	
	return result;
     52c:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&usbMessageBuffer[n],sizeof(UserParameters));
     52e:	88db      	ldrh	r3, [r3, #6]
     530:	4601      	mov	r1, r0
     532:	f821 3f53 	strh.w	r3, [r1, #83]!
		r=memory.SaveParameters(parameters);
     536:	4803      	ldr	r0, [pc, #12]	; (544 <_ZN16Commands_Handler22CommandWriteParametersEv+0x30>)
     538:	4b03      	ldr	r3, [pc, #12]	; (548 <_ZN16Commands_Handler22CommandWriteParametersEv+0x34>)
     53a:	4798      	blx	r3
		result=(bool)(r==0);
     53c:	fab0 f080 	clz	r0, r0
     540:	0940      	lsrs	r0, r0, #5
     542:	bd10      	pop	{r4, pc}
     544:	20003510 	.word	0x20003510
     548:	00011469 	.word	0x00011469

0000054c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:
     54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     550:	4c26      	ldr	r4, [pc, #152]	; (5ec <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa0>)
     552:	4927      	ldr	r1, [pc, #156]	; (5f0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa4>)
     554:	4620      	mov	r0, r4
     556:	4e27      	ldr	r6, [pc, #156]	; (5f4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa8>)
     558:	47b0      	blx	r6
     55a:	4f27      	ldr	r7, [pc, #156]	; (5f8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xac>)
     55c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 61c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd0>
     560:	463a      	mov	r2, r7
     562:	4641      	mov	r1, r8
     564:	4620      	mov	r0, r4
     566:	4d25      	ldr	r5, [pc, #148]	; (5fc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb0>)
     568:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     56a:	f104 0920 	add.w	r9, r4, #32
     56e:	4924      	ldr	r1, [pc, #144]	; (600 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb4>)
     570:	4648      	mov	r0, r9
     572:	47b0      	blx	r6
     574:	463a      	mov	r2, r7
     576:	4641      	mov	r1, r8
     578:	4648      	mov	r0, r9
     57a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     57c:	f104 0940 	add.w	r9, r4, #64	; 0x40
     580:	4920      	ldr	r1, [pc, #128]	; (604 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>)
     582:	4648      	mov	r0, r9
     584:	47b0      	blx	r6
     586:	463a      	mov	r2, r7
     588:	4641      	mov	r1, r8
     58a:	4648      	mov	r0, r9
     58c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     58e:	f104 0960 	add.w	r9, r4, #96	; 0x60
     592:	491d      	ldr	r1, [pc, #116]	; (608 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xbc>)
     594:	4648      	mov	r0, r9
     596:	47b0      	blx	r6
     598:	463a      	mov	r2, r7
     59a:	4641      	mov	r1, r8
     59c:	4648      	mov	r0, r9
     59e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     5a0:	f104 0980 	add.w	r9, r4, #128	; 0x80
     5a4:	4919      	ldr	r1, [pc, #100]	; (60c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc0>)
     5a6:	4648      	mov	r0, r9
     5a8:	47b0      	blx	r6
     5aa:	463a      	mov	r2, r7
     5ac:	4641      	mov	r1, r8
     5ae:	4648      	mov	r0, r9
     5b0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     5b2:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     5b6:	4916      	ldr	r1, [pc, #88]	; (610 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc4>)
     5b8:	4648      	mov	r0, r9
     5ba:	47b0      	blx	r6
     5bc:	463a      	mov	r2, r7
     5be:	4641      	mov	r1, r8
     5c0:	4648      	mov	r0, r9
     5c2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     5c4:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     5c8:	4912      	ldr	r1, [pc, #72]	; (614 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc8>)
     5ca:	4648      	mov	r0, r9
     5cc:	47b0      	blx	r6
     5ce:	463a      	mov	r2, r7
     5d0:	4641      	mov	r1, r8
     5d2:	4648      	mov	r0, r9
     5d4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     5d6:	34e0      	adds	r4, #224	; 0xe0
     5d8:	490f      	ldr	r1, [pc, #60]	; (618 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xcc>)
     5da:	4620      	mov	r0, r4
     5dc:	47b0      	blx	r6
     5de:	463a      	mov	r2, r7
     5e0:	4641      	mov	r1, r8
     5e2:	4620      	mov	r0, r4
     5e4:	47a8      	blx	r5
     5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5ea:	bf00      	nop
     5ec:	20000658 	.word	0x20000658
     5f0:	20009f88 	.word	0x20009f88
     5f4:	0000dd8d 	.word	0x0000dd8d
     5f8:	20000000 	.word	0x20000000
     5fc:	000135c5 	.word	0x000135c5
     600:	2000a01c 	.word	0x2000a01c
     604:	2000a140 	.word	0x2000a140
     608:	2000a03c 	.word	0x2000a03c
     60c:	2000a100 	.word	0x2000a100
     610:	2000a120 	.word	0x2000a120
     614:	20009ff8 	.word	0x20009ff8
     618:	2000a098 	.word	0x2000a098
     61c:	0000ddc5 	.word	0x0000ddc5

00000620 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     620:	b530      	push	{r4, r5, lr}
     622:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     624:	68c3      	ldr	r3, [r0, #12]
     626:	6819      	ldr	r1, [r3, #0]
     628:	6041      	str	r1, [r0, #4]
     62a:	8899      	ldrh	r1, [r3, #4]
     62c:	799b      	ldrb	r3, [r3, #6]
     62e:	8101      	strh	r1, [r0, #8]
     630:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     632:	7a43      	ldrb	r3, [r0, #9]
     634:	2b51      	cmp	r3, #81	; 0x51
     636:	bf0c      	ite	eq
     638:	2501      	moveq	r5, #1
     63a:	2500      	movne	r5, #0
	if (result){
     63c:	d002      	beq.n	644 <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     63e:	4628      	mov	r0, r5
     640:	b003      	add	sp, #12
     642:	bd30      	pop	{r4, r5, pc}
     644:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     646:	4669      	mov	r1, sp
     648:	4808      	ldr	r0, [pc, #32]	; (66c <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     64a:	4b09      	ldr	r3, [pc, #36]	; (670 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     64c:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     64e:	6823      	ldr	r3, [r4, #0]
     650:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     654:	466a      	mov	r2, sp
     656:	68e1      	ldr	r1, [r4, #12]
     658:	4420      	add	r0, r4
     65a:	4b06      	ldr	r3, [pc, #24]	; (674 <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     65c:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     65e:	2240      	movs	r2, #64	; 0x40
     660:	68e1      	ldr	r1, [r4, #12]
     662:	4805      	ldr	r0, [pc, #20]	; (678 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     664:	4b05      	ldr	r3, [pc, #20]	; (67c <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     666:	4798      	blx	r3
     668:	e7e9      	b.n	63e <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     66a:	bf00      	nop
     66c:	20001b6c 	.word	0x20001b6c
     670:	0000f065 	.word	0x0000f065
     674:	00000b09 	.word	0x00000b09
     678:	200018a4 	.word	0x200018a4
     67c:	0000e7bd 	.word	0x0000e7bd

00000680 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     684:	b08d      	sub	sp, #52	; 0x34
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     686:	68c3      	ldr	r3, [r0, #12]
     688:	6819      	ldr	r1, [r3, #0]
     68a:	6041      	str	r1, [r0, #4]
     68c:	8899      	ldrh	r1, [r3, #4]
     68e:	799b      	ldrb	r3, [r3, #6]
     690:	8101      	strh	r1, [r0, #8]
     692:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     694:	7a43      	ldrb	r3, [r0, #9]
     696:	2b4e      	cmp	r3, #78	; 0x4e
     698:	bf0c      	ite	eq
     69a:	f04f 0801 	moveq.w	r8, #1
     69e:	f04f 0800 	movne.w	r8, #0
	if (result){
     6a2:	d003      	beq.n	6ac <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
}
     6a4:	4640      	mov	r0, r8
     6a6:	b00d      	add	sp, #52	; 0x34
     6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     6ac:	4604      	mov	r4, r0
     6ae:	4e19      	ldr	r6, [pc, #100]	; (714 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x94>)
	if (result){
     6b0:	2500      	movs	r5, #0
				flapper.valve[i]->UpdateFlapperValveData();
     6b2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 724 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xa4>
			if (flapper.valve[i]->isOK)
     6b6:	6830      	ldr	r0, [r6, #0]
     6b8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     6bc:	b98b      	cbnz	r3, 6e2 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x62>
     6be:	3604      	adds	r6, #4
     6c0:	3515      	adds	r5, #21
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     6c2:	2d2a      	cmp	r5, #42	; 0x2a
     6c4:	d1f7      	bne.n	6b6 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x36>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     6c6:	6823      	ldr	r3, [r4, #0]
     6c8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     6cc:	aa01      	add	r2, sp, #4
     6ce:	68e1      	ldr	r1, [r4, #12]
     6d0:	4420      	add	r0, r4
     6d2:	4b11      	ldr	r3, [pc, #68]	; (718 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x98>)
     6d4:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     6d6:	2240      	movs	r2, #64	; 0x40
     6d8:	68e1      	ldr	r1, [r4, #12]
     6da:	4810      	ldr	r0, [pc, #64]	; (71c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x9c>)
     6dc:	4b10      	ldr	r3, [pc, #64]	; (720 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xa0>)
     6de:	4798      	blx	r3
     6e0:	e7e0      	b.n	6a4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
				flapper.valve[i]->UpdateFlapperValveData();
     6e2:	47c8      	blx	r9
				fvds[i]= flapper.valve[i]->dataStruct;
     6e4:	6837      	ldr	r7, [r6, #0]
     6e6:	ab01      	add	r3, sp, #4
     6e8:	eb05 0e03 	add.w	lr, r5, r3
     6ec:	3784      	adds	r7, #132	; 0x84
     6ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     6f0:	f10d 0c04 	add.w	ip, sp, #4
     6f4:	f84c 0005 	str.w	r0, [ip, r5]
     6f8:	f8ce 1004 	str.w	r1, [lr, #4]
     6fc:	f8ce 2008 	str.w	r2, [lr, #8]
     700:	f8ce 300c 	str.w	r3, [lr, #12]
     704:	6838      	ldr	r0, [r7, #0]
     706:	f8ce 0010 	str.w	r0, [lr, #16]
     70a:	793b      	ldrb	r3, [r7, #4]
     70c:	f88e 3014 	strb.w	r3, [lr, #20]
     710:	e7d5      	b.n	6be <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x3e>
     712:	bf00      	nop
     714:	20001e98 	.word	0x20001e98
     718:	00000b09 	.word	0x00000b09
     71c:	200018a4 	.word	0x200018a4
     720:	0000e7bd 	.word	0x0000e7bd
     724:	00010581 	.word	0x00010581

00000728 <_ZN16Commands_Handler21CommandReadParametersEv>:
bool Commands_Handler::CommandReadParameters(){
     728:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     72a:	68c3      	ldr	r3, [r0, #12]
     72c:	6819      	ldr	r1, [r3, #0]
     72e:	6041      	str	r1, [r0, #4]
     730:	8899      	ldrh	r1, [r3, #4]
     732:	799b      	ldrb	r3, [r3, #6]
     734:	8101      	strh	r1, [r0, #8]
     736:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kGAINCommandReadParameters);
     738:	7a43      	ldrb	r3, [r0, #9]
     73a:	2b48      	cmp	r3, #72	; 0x48
     73c:	bf0c      	ite	eq
     73e:	2501      	moveq	r5, #1
     740:	2500      	movne	r5, #0
	if (result){
     742:	d001      	beq.n	748 <_ZN16Commands_Handler21CommandReadParametersEv+0x20>
}
     744:	4628      	mov	r0, r5
     746:	bd38      	pop	{r3, r4, r5, pc}
     748:	4604      	mov	r4, r0
		memory.ReadParameters(parameters);
     74a:	f100 0153 	add.w	r1, r0, #83	; 0x53
     74e:	4811      	ldr	r0, [pc, #68]	; (794 <_ZN16Commands_Handler21CommandReadParametersEv+0x6c>)
     750:	4b11      	ldr	r3, [pc, #68]	; (798 <_ZN16Commands_Handler21CommandReadParametersEv+0x70>)
     752:	4798      	blx	r3
		memcpy(usbMessageBuffer,(void*)&hm,n);
     754:	68e3      	ldr	r3, [r4, #12]
     756:	4a11      	ldr	r2, [pc, #68]	; (79c <_ZN16Commands_Handler21CommandReadParametersEv+0x74>)
     758:	601a      	str	r2, [r3, #0]
     75a:	2200      	movs	r2, #0
     75c:	711a      	strb	r2, [r3, #4]
     75e:	715a      	strb	r2, [r3, #5]
		memcpy((uint8_t*)&usbMessageBuffer[n],(void*)&parameters,sizeof(UserParameters));
     760:	68e3      	ldr	r3, [r4, #12]
     762:	f8b4 2053 	ldrh.w	r2, [r4, #83]	; 0x53
     766:	80da      	strh	r2, [r3, #6]
		is_stand_alone=flapper.IsStandAlone();
     768:	480d      	ldr	r0, [pc, #52]	; (7a0 <_ZN16Commands_Handler21CommandReadParametersEv+0x78>)
     76a:	4b0e      	ldr	r3, [pc, #56]	; (7a4 <_ZN16Commands_Handler21CommandReadParametersEv+0x7c>)
     76c:	4798      	blx	r3
     76e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
		if (is_stand_alone)
     772:	b148      	cbz	r0, 788 <_ZN16Commands_Handler21CommandReadParametersEv+0x60>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     774:	68e3      	ldr	r3, [r4, #12]
     776:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
     77a:	721a      	strb	r2, [r3, #8]
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     77c:	2240      	movs	r2, #64	; 0x40
     77e:	68e1      	ldr	r1, [r4, #12]
     780:	4809      	ldr	r0, [pc, #36]	; (7a8 <_ZN16Commands_Handler21CommandReadParametersEv+0x80>)
     782:	4b0a      	ldr	r3, [pc, #40]	; (7ac <_ZN16Commands_Handler21CommandReadParametersEv+0x84>)
     784:	4798      	blx	r3
     786:	e7dd      	b.n	744 <_ZN16Commands_Handler21CommandReadParametersEv+0x1c>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     788:	68e3      	ldr	r3, [r4, #12]
     78a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
     78e:	721a      	strb	r2, [r3, #8]
     790:	e7f4      	b.n	77c <_ZN16Commands_Handler21CommandReadParametersEv+0x54>
     792:	bf00      	nop
     794:	20003510 	.word	0x20003510
     798:	00011339 	.word	0x00011339
     79c:	61626364 	.word	0x61626364
     7a0:	20001db4 	.word	0x20001db4
     7a4:	0000f369 	.word	0x0000f369
     7a8:	200018a4 	.word	0x200018a4
     7ac:	0000e7bd 	.word	0x0000e7bd

000007b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7b0:	e7fe      	b.n	7b0 <Dummy_Handler>
	...

000007b4 <Reset_Handler>:
{
     7b4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     7b6:	4b17      	ldr	r3, [pc, #92]	; (814 <Reset_Handler+0x60>)
     7b8:	4a17      	ldr	r2, [pc, #92]	; (818 <Reset_Handler+0x64>)
     7ba:	429a      	cmp	r2, r3
     7bc:	d010      	beq.n	7e0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     7be:	4b17      	ldr	r3, [pc, #92]	; (81c <Reset_Handler+0x68>)
     7c0:	4a14      	ldr	r2, [pc, #80]	; (814 <Reset_Handler+0x60>)
     7c2:	429a      	cmp	r2, r3
     7c4:	d20c      	bcs.n	7e0 <Reset_Handler+0x2c>
     7c6:	3b01      	subs	r3, #1
     7c8:	1a9b      	subs	r3, r3, r2
     7ca:	f023 0303 	bic.w	r3, r3, #3
     7ce:	3304      	adds	r3, #4
     7d0:	4413      	add	r3, r2
     7d2:	4911      	ldr	r1, [pc, #68]	; (818 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     7d4:	f851 0b04 	ldr.w	r0, [r1], #4
     7d8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     7dc:	429a      	cmp	r2, r3
     7de:	d1f9      	bne.n	7d4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     7e0:	4b0f      	ldr	r3, [pc, #60]	; (820 <Reset_Handler+0x6c>)
     7e2:	4a10      	ldr	r2, [pc, #64]	; (824 <Reset_Handler+0x70>)
     7e4:	429a      	cmp	r2, r3
     7e6:	d20a      	bcs.n	7fe <Reset_Handler+0x4a>
     7e8:	3b01      	subs	r3, #1
     7ea:	1a9b      	subs	r3, r3, r2
     7ec:	f023 0303 	bic.w	r3, r3, #3
     7f0:	3304      	adds	r3, #4
     7f2:	4413      	add	r3, r2
                *pDest++ = 0;
     7f4:	2100      	movs	r1, #0
     7f6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     7fa:	4293      	cmp	r3, r2
     7fc:	d1fb      	bne.n	7f6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     7fe:	4a0a      	ldr	r2, [pc, #40]	; (828 <Reset_Handler+0x74>)
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <Reset_Handler+0x78>)
     802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     806:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     808:	4b09      	ldr	r3, [pc, #36]	; (830 <Reset_Handler+0x7c>)
     80a:	4798      	blx	r3
        main();
     80c:	4b09      	ldr	r3, [pc, #36]	; (834 <Reset_Handler+0x80>)
     80e:	4798      	blx	r3
     810:	e7fe      	b.n	810 <Reset_Handler+0x5c>
     812:	bf00      	nop
     814:	20000000 	.word	0x20000000
     818:	000144e8 	.word	0x000144e8
     81c:	2000063c 	.word	0x2000063c
     820:	2000a240 	.word	0x2000a240
     824:	2000063c 	.word	0x2000063c
     828:	e000ed00 	.word	0xe000ed00
     82c:	00000000 	.word	0x00000000
     830:	00013af5 	.word	0x00013af5
     834:	00000869 	.word	0x00000869

00000838 <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     838:	2280      	movs	r2, #128	; 0x80
     83a:	4b09      	ldr	r3, [pc, #36]	; (860 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     83c:	619a      	str	r2, [r3, #24]

static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	is_firmware_OK=true;
	if (counter_running==last_count)
     83e:	4b09      	ldr	r3, [pc, #36]	; (864 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     840:	681a      	ldr	r2, [r3, #0]
     842:	685b      	ldr	r3, [r3, #4]
     844:	429a      	cmp	r2, r3
		is_running=false;
	} 
	else
	{
		is_running=true;
		last_count=counter_running;
     846:	bf1c      	itt	ne
     848:	4b06      	ldrne	r3, [pc, #24]	; (864 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     84a:	605a      	strne	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     84c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     850:	4b03      	ldr	r3, [pc, #12]	; (860 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     852:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		
	}
	gpio_toggle_pin_level(LED0);
	localtimeout=true;
     856:	2201      	movs	r2, #1
     858:	4b02      	ldr	r3, [pc, #8]	; (864 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     85a:	721a      	strb	r2, [r3, #8]
     85c:	4770      	bx	lr
     85e:	bf00      	nop
     860:	41008000 	.word	0x41008000
     864:	20000758 	.word	0x20000758

00000868 <main>:




int main(void)		
{
     868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     86c:	4b40      	ldr	r3, [pc, #256]	; (970 <main+0x108>)
     86e:	4798      	blx	r3
	usb.Init();
     870:	4840      	ldr	r0, [pc, #256]	; (974 <main+0x10c>)
     872:	4b41      	ldr	r3, [pc, #260]	; (978 <main+0x110>)
     874:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     876:	20c8      	movs	r0, #200	; 0xc8
     878:	4b40      	ldr	r3, [pc, #256]	; (97c <main+0x114>)
     87a:	4798      	blx	r3
	memory.Init();
     87c:	4c40      	ldr	r4, [pc, #256]	; (980 <main+0x118>)
     87e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     882:	4620      	mov	r0, r4
     884:	4b3f      	ldr	r3, [pc, #252]	; (984 <main+0x11c>)
     886:	4798      	blx	r3
	memory.WriteDefaultParameters();
     888:	4620      	mov	r0, r4
     88a:	4b3f      	ldr	r3, [pc, #252]	; (988 <main+0x120>)
     88c:	4798      	blx	r3
	bool isOK=temperatures.Init();
     88e:	483f      	ldr	r0, [pc, #252]	; (98c <main+0x124>)
     890:	4b3f      	ldr	r3, [pc, #252]	; (990 <main+0x128>)
     892:	4798      	blx	r3
	if (isOK)
     894:	b990      	cbnz	r0, 8bc <main+0x54>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     896:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     89a:	4b3e      	ldr	r3, [pc, #248]	; (994 <main+0x12c>)
     89c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	{
		temperatures.StartOneConversion();
	}
	gpio_set_pin_level(LED0,true);
	while (!flapper.Init())
     8a0:	4e3d      	ldr	r6, [pc, #244]	; (998 <main+0x130>)
     8a2:	4d3e      	ldr	r5, [pc, #248]	; (99c <main+0x134>)
	{
		delay_ms(DELAY_ERROR);
     8a4:	4c35      	ldr	r4, [pc, #212]	; (97c <main+0x114>)
	while (!flapper.Init())
     8a6:	4630      	mov	r0, r6
     8a8:	47a8      	blx	r5
     8aa:	b958      	cbnz	r0, 8c4 <main+0x5c>
		delay_ms(DELAY_ERROR);
     8ac:	2032      	movs	r0, #50	; 0x32
     8ae:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     8b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     8b4:	4b37      	ldr	r3, [pc, #220]	; (994 <main+0x12c>)
     8b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     8ba:	e7f4      	b.n	8a6 <main+0x3e>
		temperatures.StartOneConversion();
     8bc:	4833      	ldr	r0, [pc, #204]	; (98c <main+0x124>)
     8be:	4b38      	ldr	r3, [pc, #224]	; (9a0 <main+0x138>)
     8c0:	4798      	blx	r3
     8c2:	e7e8      	b.n	896 <main+0x2e>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     8c4:	4e37      	ldr	r6, [pc, #220]	; (9a4 <main+0x13c>)
     8c6:	4d38      	ldr	r5, [pc, #224]	; (9a8 <main+0x140>)
		delay_ms(DELAY_ERROR);
     8c8:	4c2c      	ldr	r4, [pc, #176]	; (97c <main+0x114>)
	while(!fans.Init()){
     8ca:	4630      	mov	r0, r6
     8cc:	47a8      	blx	r5
     8ce:	b938      	cbnz	r0, 8e0 <main+0x78>
		delay_ms(DELAY_ERROR);
     8d0:	2032      	movs	r0, #50	; 0x32
     8d2:	47a0      	blx	r4
     8d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     8d8:	4b2e      	ldr	r3, [pc, #184]	; (994 <main+0x12c>)
     8da:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     8de:	e7f4      	b.n	8ca <main+0x62>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     8e0:	4c30      	ldr	r4, [pc, #192]	; (9a4 <main+0x13c>)
     8e2:	2100      	movs	r1, #0
     8e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
     8e6:	4b31      	ldr	r3, [pc, #196]	; (9ac <main+0x144>)
     8e8:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     8ea:	2100      	movs	r1, #0
     8ec:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     8ee:	4d30      	ldr	r5, [pc, #192]	; (9b0 <main+0x148>)
     8f0:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     8f2:	2100      	movs	r1, #0
     8f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
     8f6:	47a8      	blx	r5

// 	heater.DisableIndex(2);

// 	heater.DisableIndex(3);

	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),1000);
     8f8:	4c2e      	ldr	r4, [pc, #184]	; (9b4 <main+0x14c>)
     8fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8fe:	492e      	ldr	r1, [pc, #184]	; (9b8 <main+0x150>)
     900:	f104 000c 	add.w	r0, r4, #12
     904:	4b2d      	ldr	r3, [pc, #180]	; (9bc <main+0x154>)
     906:	4798      	blx	r3
	uint8_t localPosition;
 	//flapper.valve1->StartControlling(220);

 	//flapper.valve2->StartControlling(220);
	
	userApp.Init();
     908:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     90c:	4b2c      	ldr	r3, [pc, #176]	; (9c0 <main+0x158>)
     90e:	4798      	blx	r3


	while (1)
	{
		
		if (userApp.IsAppConnected())
     910:	4626      	mov	r6, r4
     912:	f104 082c 	add.w	r8, r4, #44	; 0x2c
     916:	4f2b      	ldr	r7, [pc, #172]	; (9c4 <main+0x15c>)
		{
			userApp.handleCommunication();			
     918:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 9d4 <main+0x16c>
     91c:	e009      	b.n	932 <main+0xca>
     91e:	4640      	mov	r0, r8
     920:	47c8      	blx	r9
     922:	e00a      	b.n	93a <main+0xd2>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     924:	4819      	ldr	r0, [pc, #100]	; (98c <main+0x124>)
     926:	4b1e      	ldr	r3, [pc, #120]	; (9a0 <main+0x138>)
     928:	4798      	blx	r3
			asm("nop");
     92a:	bf00      	nop
		}
		counter_running++;
     92c:	6833      	ldr	r3, [r6, #0]
     92e:	3301      	adds	r3, #1
     930:	6033      	str	r3, [r6, #0]
		if (userApp.IsAppConnected())
     932:	4640      	mov	r0, r8
     934:	47b8      	blx	r7
     936:	2800      	cmp	r0, #0
     938:	d1f1      	bne.n	91e <main+0xb6>
			flapper.valve1->Control_NBC_StandAlone_Reset();
     93a:	4d17      	ldr	r5, [pc, #92]	; (998 <main+0x130>)
     93c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
     940:	4c21      	ldr	r4, [pc, #132]	; (9c8 <main+0x160>)
     942:	47a0      	blx	r4
			flapper.valve2->Control_NBC_StandAlone_Reset();
     944:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
     948:	47a0      	blx	r4
		if (temperatures.IsConversionFinished())
     94a:	4810      	ldr	r0, [pc, #64]	; (98c <main+0x124>)
     94c:	4b1f      	ldr	r3, [pc, #124]	; (9cc <main+0x164>)
     94e:	4798      	blx	r3
     950:	2800      	cmp	r0, #0
     952:	d0eb      	beq.n	92c <main+0xc4>
			temperatures.GetConversionResult();
     954:	4c0d      	ldr	r4, [pc, #52]	; (98c <main+0x124>)
     956:	4620      	mov	r0, r4
     958:	4b1d      	ldr	r3, [pc, #116]	; (9d0 <main+0x168>)
     95a:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     95c:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     960:	2b01      	cmp	r3, #1
     962:	d1df      	bne.n	924 <main+0xbc>
				currentTemperature=temperatures.lastValue;
     964:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     968:	f8c6 31bc 	str.w	r3, [r6, #444]	; 0x1bc
     96c:	e7da      	b.n	924 <main+0xbc>
     96e:	bf00      	nop
     970:	000012cd 	.word	0x000012cd
     974:	200018a4 	.word	0x200018a4
     978:	0000e4ed 	.word	0x0000e4ed
     97c:	00002a99 	.word	0x00002a99
     980:	20003510 	.word	0x20003510
     984:	0001141d 	.word	0x0001141d
     988:	00011365 	.word	0x00011365
     98c:	200099e4 	.word	0x200099e4
     990:	000116d9 	.word	0x000116d9
     994:	41008000 	.word	0x41008000
     998:	20001db4 	.word	0x20001db4
     99c:	0000f2f9 	.word	0x0000f2f9
     9a0:	00011761 	.word	0x00011761
     9a4:	20001b6c 	.word	0x20001b6c
     9a8:	0000efed 	.word	0x0000efed
     9ac:	0000ee59 	.word	0x0000ee59
     9b0:	0000f1c9 	.word	0x0000f1c9
     9b4:	20000758 	.word	0x20000758
     9b8:	00000839 	.word	0x00000839
     9bc:	0000df69 	.word	0x0000df69
     9c0:	00000d41 	.word	0x00000d41
     9c4:	00001245 	.word	0x00001245
     9c8:	0000fa0d 	.word	0x0000fa0d
     9cc:	0001183d 	.word	0x0001183d
     9d0:	000117a9 	.word	0x000117a9
     9d4:	00001165 	.word	0x00001165

000009d8 <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     9dc:	4c30      	ldr	r4, [pc, #192]	; (aa0 <_GLOBAL__sub_I_localtimeout+0xc8>)
     9de:	f504 75e0 	add.w	r5, r4, #448	; 0x1c0
     9e2:	4930      	ldr	r1, [pc, #192]	; (aa4 <_GLOBAL__sub_I_localtimeout+0xcc>)
     9e4:	4628      	mov	r0, r5
     9e6:	4f30      	ldr	r7, [pc, #192]	; (aa8 <_GLOBAL__sub_I_localtimeout+0xd0>)
     9e8:	47b8      	blx	r7
     9ea:	4e30      	ldr	r6, [pc, #192]	; (aac <_GLOBAL__sub_I_localtimeout+0xd4>)
     9ec:	f8df 80f4 	ldr.w	r8, [pc, #244]	; ae4 <_GLOBAL__sub_I_localtimeout+0x10c>
     9f0:	4632      	mov	r2, r6
     9f2:	4641      	mov	r1, r8
     9f4:	4628      	mov	r0, r5
     9f6:	4d2e      	ldr	r5, [pc, #184]	; (ab0 <_GLOBAL__sub_I_localtimeout+0xd8>)
     9f8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     9fa:	f504 79f0 	add.w	r9, r4, #480	; 0x1e0
     9fe:	492d      	ldr	r1, [pc, #180]	; (ab4 <_GLOBAL__sub_I_localtimeout+0xdc>)
     a00:	4648      	mov	r0, r9
     a02:	47b8      	blx	r7
     a04:	4632      	mov	r2, r6
     a06:	4641      	mov	r1, r8
     a08:	4648      	mov	r0, r9
     a0a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     a0c:	f104 090c 	add.w	r9, r4, #12
     a10:	4929      	ldr	r1, [pc, #164]	; (ab8 <_GLOBAL__sub_I_localtimeout+0xe0>)
     a12:	4648      	mov	r0, r9
     a14:	47b8      	blx	r7
     a16:	4632      	mov	r2, r6
     a18:	4641      	mov	r1, r8
     a1a:	4648      	mov	r0, r9
     a1c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     a1e:	f504 7900 	add.w	r9, r4, #512	; 0x200
     a22:	4926      	ldr	r1, [pc, #152]	; (abc <_GLOBAL__sub_I_localtimeout+0xe4>)
     a24:	4648      	mov	r0, r9
     a26:	47b8      	blx	r7
     a28:	4632      	mov	r2, r6
     a2a:	4641      	mov	r1, r8
     a2c:	4648      	mov	r0, r9
     a2e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     a30:	f504 7908 	add.w	r9, r4, #544	; 0x220
     a34:	4922      	ldr	r1, [pc, #136]	; (ac0 <_GLOBAL__sub_I_localtimeout+0xe8>)
     a36:	4648      	mov	r0, r9
     a38:	47b8      	blx	r7
     a3a:	4632      	mov	r2, r6
     a3c:	4641      	mov	r1, r8
     a3e:	4648      	mov	r0, r9
     a40:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     a42:	f504 7910 	add.w	r9, r4, #576	; 0x240
     a46:	491f      	ldr	r1, [pc, #124]	; (ac4 <_GLOBAL__sub_I_localtimeout+0xec>)
     a48:	4648      	mov	r0, r9
     a4a:	47b8      	blx	r7
     a4c:	4632      	mov	r2, r6
     a4e:	4641      	mov	r1, r8
     a50:	4648      	mov	r0, r9
     a52:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     a54:	f504 7918 	add.w	r9, r4, #608	; 0x260
     a58:	491b      	ldr	r1, [pc, #108]	; (ac8 <_GLOBAL__sub_I_localtimeout+0xf0>)
     a5a:	4648      	mov	r0, r9
     a5c:	47b8      	blx	r7
     a5e:	4632      	mov	r2, r6
     a60:	4641      	mov	r1, r8
     a62:	4648      	mov	r0, r9
     a64:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     a66:	f504 7920 	add.w	r9, r4, #640	; 0x280
     a6a:	4918      	ldr	r1, [pc, #96]	; (acc <_GLOBAL__sub_I_localtimeout+0xf4>)
     a6c:	4648      	mov	r0, r9
     a6e:	47b8      	blx	r7
     a70:	4632      	mov	r2, r6
     a72:	4641      	mov	r1, r8
     a74:	4648      	mov	r0, r9
     a76:	47a8      	blx	r5
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     a78:	f504 7728 	add.w	r7, r4, #672	; 0x2a0
     a7c:	4914      	ldr	r1, [pc, #80]	; (ad0 <_GLOBAL__sub_I_localtimeout+0xf8>)
     a7e:	4638      	mov	r0, r7
     a80:	4b14      	ldr	r3, [pc, #80]	; (ad4 <_GLOBAL__sub_I_localtimeout+0xfc>)
     a82:	4798      	blx	r3
     a84:	4632      	mov	r2, r6
     a86:	4914      	ldr	r1, [pc, #80]	; (ad8 <_GLOBAL__sub_I_localtimeout+0x100>)
     a88:	4638      	mov	r0, r7
     a8a:	47a8      	blx	r5
static Maintenance_Tool	userApp;
     a8c:	342c      	adds	r4, #44	; 0x2c
     a8e:	4620      	mov	r0, r4
     a90:	4b12      	ldr	r3, [pc, #72]	; (adc <_GLOBAL__sub_I_localtimeout+0x104>)
     a92:	4798      	blx	r3
     a94:	4632      	mov	r2, r6
     a96:	4912      	ldr	r1, [pc, #72]	; (ae0 <_GLOBAL__sub_I_localtimeout+0x108>)
     a98:	4620      	mov	r0, r4
     a9a:	47a8      	blx	r5
     a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     aa0:	20000758 	.word	0x20000758
     aa4:	20009f88 	.word	0x20009f88
     aa8:	0000dd8d 	.word	0x0000dd8d
     aac:	20000000 	.word	0x20000000
     ab0:	000135c5 	.word	0x000135c5
     ab4:	2000a01c 	.word	0x2000a01c
     ab8:	2000a140 	.word	0x2000a140
     abc:	2000a03c 	.word	0x2000a03c
     ac0:	2000a100 	.word	0x2000a100
     ac4:	2000a120 	.word	0x2000a120
     ac8:	20009ff8 	.word	0x20009ff8
     acc:	2000a098 	.word	0x2000a098
     ad0:	2000a0b8 	.word	0x2000a0b8
     ad4:	0000dc31 	.word	0x0000dc31
     ad8:	0000dc4d 	.word	0x0000dc4d
     adc:	00000bad 	.word	0x00000bad
     ae0:	00000b61 	.word	0x00000b61
     ae4:	0000ddc5 	.word	0x0000ddc5

00000ae8 <_ZN22MaintenanceDataHandlerC1Ev>:
     ae8:	2264      	movs	r2, #100	; 0x64
     aea:	7002      	strb	r2, [r0, #0]
     aec:	2263      	movs	r2, #99	; 0x63
     aee:	7042      	strb	r2, [r0, #1]
     af0:	2262      	movs	r2, #98	; 0x62
     af2:	7082      	strb	r2, [r0, #2]
     af4:	2261      	movs	r2, #97	; 0x61
     af6:	70c2      	strb	r2, [r0, #3]
     af8:	2200      	movs	r2, #0
     afa:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     afc:	223a      	movs	r2, #58	; 0x3a
     afe:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     b02:	4770      	bx	lr

00000b04 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     b04:	4770      	bx	lr
	...

00000b08 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     b08:	b570      	push	{r4, r5, r6, lr}
     b0a:	4605      	mov	r5, r0
     b0c:	460c      	mov	r4, r1
     b0e:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     b10:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     b14:	3006      	adds	r0, #6
     b16:	4b09      	ldr	r3, [pc, #36]	; (b3c <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     b18:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     b1a:	462b      	mov	r3, r5
     b1c:	4621      	mov	r1, r4
     b1e:	3540      	adds	r5, #64	; 0x40
     b20:	681e      	ldr	r6, [r3, #0]
     b22:	685c      	ldr	r4, [r3, #4]
     b24:	6898      	ldr	r0, [r3, #8]
     b26:	68da      	ldr	r2, [r3, #12]
     b28:	600e      	str	r6, [r1, #0]
     b2a:	604c      	str	r4, [r1, #4]
     b2c:	6088      	str	r0, [r1, #8]
     b2e:	60ca      	str	r2, [r1, #12]
     b30:	3310      	adds	r3, #16
     b32:	3110      	adds	r1, #16
     b34:	42ab      	cmp	r3, r5
     b36:	d1f3      	bne.n	b20 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     b38:	2000      	movs	r0, #0
     b3a:	bd70      	pop	{r4, r5, r6, pc}
     b3c:	00013b45 	.word	0x00013b45

00000b40 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     b40:	4b02      	ldr	r3, [pc, #8]	; (b4c <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     b42:	681a      	ldr	r2, [r3, #0]
     b44:	6d93      	ldr	r3, [r2, #88]	; 0x58
     b46:	3301      	adds	r3, #1
     b48:	6593      	str	r3, [r2, #88]	; 0x58
     b4a:	4770      	bx	lr
     b4c:	20000a14 	.word	0x20000a14

00000b50 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     b50:	4b02      	ldr	r3, [pc, #8]	; (b5c <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	2200      	movs	r2, #0
     b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
     b5a:	4770      	bx	lr
     b5c:	20000a14 	.word	0x20000a14

00000b60 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     b60:	b538      	push	{r3, r4, r5, lr}
     b62:	4604      	mov	r4, r0
     b64:	4b0a      	ldr	r3, [pc, #40]	; (b90 <_ZN16Maintenance_ToolD1Ev+0x30>)
     b66:	6003      	str	r3, [r0, #0]
{
	ticks=0;
     b68:	2300      	movs	r3, #0
     b6a:	6583      	str	r3, [r0, #88]	; 0x58
	interfaceTimer.Stop();
     b6c:	4d09      	ldr	r5, [pc, #36]	; (b94 <_ZN16Maintenance_ToolD1Ev+0x34>)
     b6e:	4628      	mov	r0, r5
     b70:	4b09      	ldr	r3, [pc, #36]	; (b98 <_ZN16Maintenance_ToolD1Ev+0x38>)
     b72:	4798      	blx	r3
	interfaceTimer.Remove_task();
     b74:	4628      	mov	r0, r5
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <_ZN16Maintenance_ToolD1Ev+0x3c>)
     b78:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     b7a:	4909      	ldr	r1, [pc, #36]	; (ba0 <_ZN16Maintenance_ToolD1Ev+0x40>)
     b7c:	4620      	mov	r0, r4
     b7e:	4b09      	ldr	r3, [pc, #36]	; (ba4 <_ZN16Maintenance_ToolD1Ev+0x44>)
     b80:	4798      	blx	r3
     b82:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
     b86:	4b08      	ldr	r3, [pc, #32]	; (ba8 <_ZN16Maintenance_ToolD1Ev+0x48>)
     b88:	4798      	blx	r3
	
} //~Maintenance_Tool
     b8a:	4620      	mov	r0, r4
     b8c:	bd38      	pop	{r3, r4, r5, pc}
     b8e:	bf00      	nop
     b90:	00013f5c 	.word	0x00013f5c
     b94:	20000a18 	.word	0x20000a18
     b98:	0000deed 	.word	0x0000deed
     b9c:	0000dfdd 	.word	0x0000dfdd
     ba0:	00013f4c 	.word	0x00013f4c
     ba4:	000002f9 	.word	0x000002f9
     ba8:	00000b05 	.word	0x00000b05

00000bac <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     bac:	b538      	push	{r3, r4, r5, lr}
     bae:	4604      	mov	r4, r0
     bb0:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
     bb4:	4b16      	ldr	r3, [pc, #88]	; (c10 <_ZN16Maintenance_ToolC1Ev+0x64>)
     bb6:	4798      	blx	r3
     bb8:	4916      	ldr	r1, [pc, #88]	; (c14 <_ZN16Maintenance_ToolC1Ev+0x68>)
     bba:	4620      	mov	r0, r4
     bbc:	4b16      	ldr	r3, [pc, #88]	; (c18 <_ZN16Maintenance_ToolC1Ev+0x6c>)
     bbe:	4798      	blx	r3
     bc0:	4b16      	ldr	r3, [pc, #88]	; (c1c <_ZN16Maintenance_ToolC1Ev+0x70>)
     bc2:	6023      	str	r3, [r4, #0]
     bc4:	2300      	movs	r3, #0
     bc6:	2564      	movs	r5, #100	; 0x64
     bc8:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
     bcc:	2063      	movs	r0, #99	; 0x63
     bce:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
     bd2:	2162      	movs	r1, #98	; 0x62
     bd4:	f884 10b2 	strb.w	r1, [r4, #178]	; 0xb2
     bd8:	2261      	movs	r2, #97	; 0x61
     bda:	f884 20b3 	strb.w	r2, [r4, #179]	; 0xb3
     bde:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
     be2:	f884 513e 	strb.w	r5, [r4, #318]	; 0x13e
     be6:	f884 013f 	strb.w	r0, [r4, #319]	; 0x13f
     bea:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
     bee:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
     bf2:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	ptrMaintenanceTool=this;
     bf6:	4a0a      	ldr	r2, [pc, #40]	; (c20 <_ZN16Maintenance_ToolC1Ev+0x74>)
     bf8:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
     bfc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	nextMaintenanceSyncTime = 0;
     c00:	6623      	str	r3, [r4, #96]	; 0x60
	nextMaintenanceUsageTimerSyncTime = 0;
     c02:	6663      	str	r3, [r4, #100]	; 0x64
	ticks=0;
     c04:	65a3      	str	r3, [r4, #88]	; 0x58
	localBuffer=staticBuffer;
     c06:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
} //Maintenance_Tool
     c0a:	4620      	mov	r0, r4
     c0c:	bd38      	pop	{r3, r4, r5, pc}
     c0e:	bf00      	nop
     c10:	00000ae9 	.word	0x00000ae9
     c14:	00013f4c 	.word	0x00013f4c
     c18:	000002d1 	.word	0x000002d1
     c1c:	00013f5c 	.word	0x00013f5c
     c20:	20000a14 	.word	0x20000a14

00000c24 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     c24:	b410      	push	{r4}
     c26:	4604      	mov	r4, r0
     c28:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     c2a:	4619      	mov	r1, r3
     c2c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
     c30:	54d1      	strb	r1, [r2, r3]
     c32:	1c58      	adds	r0, r3, #1
     c34:	b2c0      	uxtb	r0, r0
     c36:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     c38:	2b40      	cmp	r3, #64	; 0x40
     c3a:	d1f7      	bne.n	c2c <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     c3c:	bc10      	pop	{r4}
     c3e:	4770      	bx	lr

00000c40 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     c40:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
     c44:	b92b      	cbnz	r3, c52 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     c46:	6603      	str	r3, [r0, #96]	; 0x60
		maintenanceIsConnected = true;
     c48:	2301      	movs	r3, #1
     c4a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
		bSendNotifications = true;
     c4e:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     c52:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
     c56:	4770      	bx	lr

00000c58 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:
	return result;
}



bool Maintenance_Tool::CommandSetHeaters(void)	{
     c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     c5c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
     c60:	6819      	ldr	r1, [r3, #0]
     c62:	f8c0 113e 	str.w	r1, [r0, #318]	; 0x13e
     c66:	8899      	ldrh	r1, [r3, #4]
     c68:	799b      	ldrb	r3, [r3, #6]
     c6a:	f8a0 1142 	strh.w	r1, [r0, #322]	; 0x142
     c6e:	f880 3144 	strb.w	r3, [r0, #324]	; 0x144
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     c72:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
     c76:	2b49      	cmp	r3, #73	; 0x49
     c78:	bf0c      	ite	eq
     c7a:	f04f 0801 	moveq.w	r8, #1
     c7e:	f04f 0800 	movne.w	r8, #0
	if (result){
     c82:	d002      	beq.n	c8a <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     c84:	4640      	mov	r0, r8
     c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     c8a:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
     c8e:	f880 213c 	strb.w	r2, [r0, #316]	; 0x13c
		enableHeaters=singleTaskMessage.description;
     c92:	f890 3144 	ldrb.w	r3, [r0, #324]	; 0x144
     c96:	f880 313d 	strb.w	r3, [r0, #317]	; 0x13d
		if (enableHeaters!=lastEnableHeaters)
     c9a:	429a      	cmp	r2, r3
     c9c:	d0f2      	beq.n	c84 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     c9e:	4605      	mov	r5, r0
     ca0:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     ca2:	4f07      	ldr	r7, [pc, #28]	; (cc0 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     ca4:	4e07      	ldr	r6, [pc, #28]	; (cc4 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     ca6:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
     caa:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     cac:	f002 0201 	and.w	r2, r2, #1
     cb0:	b2e1      	uxtb	r1, r4
     cb2:	4638      	mov	r0, r7
     cb4:	47b0      	blx	r6
     cb6:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     cb8:	2c04      	cmp	r4, #4
     cba:	d1f4      	bne.n	ca6 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     cbc:	e7e2      	b.n	c84 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     cbe:	bf00      	nop
     cc0:	200023e8 	.word	0x200023e8
     cc4:	00011211 	.word	0x00011211

00000cc8 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     cc8:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     cca:	0855      	lsrs	r5, r2, #1
     ccc:	d007      	beq.n	cde <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     cce:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     cd0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     cd4:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     cd6:	3401      	adds	r4, #1
     cd8:	b2a4      	uxth	r4, r4
     cda:	42ac      	cmp	r4, r5
     cdc:	dbf8      	blt.n	cd0 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     cde:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     ce2:	bf1d      	ittte	ne
     ce4:	189b      	addne	r3, r3, r2
     ce6:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     cea:	4048      	eorne	r0, r1
     cec:	4608      	moveq	r0, r1

	return checksum;
	}
     cee:	bc30      	pop	{r4, r5}
     cf0:	4770      	bx	lr
	...

00000cf4 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     cf4:	b538      	push	{r3, r4, r5, lr}
     cf6:	4604      	mov	r4, r0
	checksum=0;
     cf8:	2500      	movs	r5, #0
     cfa:	f8a0 511a 	strh.w	r5, [r0, #282]	; 0x11a
	checksum = calculateChecksum(0, sizeof(header), &header);
     cfe:	460b      	mov	r3, r1
     d00:	2206      	movs	r2, #6
     d02:	4629      	mov	r1, r5
     d04:	4d02      	ldr	r5, [pc, #8]	; (d10 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     d06:	47a8      	blx	r5
     d08:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
	}
     d0c:	bd38      	pop	{r3, r4, r5, pc}
     d0e:	bf00      	nop
     d10:	00000cc9 	.word	0x00000cc9

00000d14 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     d14:	4b06      	ldr	r3, [pc, #24]	; (d30 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	600b      	str	r3, [r1, #0]
     d1a:	4b06      	ldr	r3, [pc, #24]	; (d34 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	604b      	str	r3, [r1, #4]
     d20:	4b05      	ldr	r3, [pc, #20]	; (d38 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	608b      	str	r3, [r1, #8]
     d26:	4b05      	ldr	r3, [pc, #20]	; (d3c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	60cb      	str	r3, [r1, #12]
     d2c:	4770      	bx	lr
     d2e:	bf00      	nop
     d30:	41002018 	.word	0x41002018
     d34:	4100201c 	.word	0x4100201c
     d38:	41002020 	.word	0x41002020
     d3c:	41002024 	.word	0x41002024

00000d40 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d42:	4604      	mov	r4, r0
	ticks=0;
     d44:	2600      	movs	r6, #0
     d46:	6586      	str	r6, [r0, #88]	; 0x58
	interfaceTimer.Init();
     d48:	4d13      	ldr	r5, [pc, #76]	; (d98 <_ZN16Maintenance_Tool4InitEv+0x58>)
     d4a:	4628      	mov	r0, r5
     d4c:	4b13      	ldr	r3, [pc, #76]	; (d9c <_ZN16Maintenance_Tool4InitEv+0x5c>)
     d4e:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d54:	4912      	ldr	r1, [pc, #72]	; (da0 <_ZN16Maintenance_Tool4InitEv+0x60>)
     d56:	4628      	mov	r0, r5
     d58:	4b12      	ldr	r3, [pc, #72]	; (da4 <_ZN16Maintenance_Tool4InitEv+0x64>)
     d5a:	4798      	blx	r3
	InitCommandHandler(localBuffer);
     d5c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
     d60:	4620      	mov	r0, r4
     d62:	4b11      	ldr	r3, [pc, #68]	; (da8 <_ZN16Maintenance_Tool4InitEv+0x68>)
     d64:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     d66:	f204 1521 	addw	r5, r4, #289	; 0x121
     d6a:	4629      	mov	r1, r5
     d6c:	4620      	mov	r0, r4
     d6e:	4b0f      	ldr	r3, [pc, #60]	; (dac <_ZN16Maintenance_Tool4InitEv+0x6c>)
     d70:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     d72:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
     d76:	f8d4 7121 	ldr.w	r7, [r4, #289]	; 0x121
     d7a:	f8d4 0125 	ldr.w	r0, [r4, #293]	; 0x125
     d7e:	f8d4 1129 	ldr.w	r1, [r4, #297]	; 0x129
     d82:	f8d4 212d 	ldr.w	r2, [r4, #301]	; 0x12d
     d86:	601f      	str	r7, [r3, #0]
     d88:	6058      	str	r0, [r3, #4]
     d8a:	6099      	str	r1, [r3, #8]
     d8c:	60da      	str	r2, [r3, #12]
	gotAccess=false;
     d8e:	f884 6115 	strb.w	r6, [r4, #277]	; 0x115
}
     d92:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
     d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d98:	20000a18 	.word	0x20000a18
     d9c:	0000de79 	.word	0x0000de79
     da0:	00000b41 	.word	0x00000b41
     da4:	0000dfb5 	.word	0x0000dfb5
     da8:	000002ff 	.word	0x000002ff
     dac:	00000d15 	.word	0x00000d15

00000db0 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     db4:	4c31      	ldr	r4, [pc, #196]	; (e7c <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
     db6:	f104 0564 	add.w	r5, r4, #100	; 0x64
     dba:	4931      	ldr	r1, [pc, #196]	; (e80 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
     dbc:	4628      	mov	r0, r5
     dbe:	4f31      	ldr	r7, [pc, #196]	; (e84 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
     dc0:	47b8      	blx	r7
     dc2:	4e31      	ldr	r6, [pc, #196]	; (e88 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
     dc4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; ec0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
     dc8:	4632      	mov	r2, r6
     dca:	4641      	mov	r1, r8
     dcc:	4628      	mov	r0, r5
     dce:	4d2f      	ldr	r5, [pc, #188]	; (e8c <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
     dd0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     dd2:	f104 0984 	add.w	r9, r4, #132	; 0x84
     dd6:	492e      	ldr	r1, [pc, #184]	; (e90 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
     dd8:	4648      	mov	r0, r9
     dda:	47b8      	blx	r7
     ddc:	4632      	mov	r2, r6
     dde:	4641      	mov	r1, r8
     de0:	4648      	mov	r0, r9
     de2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     de4:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     de8:	492a      	ldr	r1, [pc, #168]	; (e94 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
     dea:	4648      	mov	r0, r9
     dec:	47b8      	blx	r7
     dee:	4632      	mov	r2, r6
     df0:	4641      	mov	r1, r8
     df2:	4648      	mov	r0, r9
     df4:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     df6:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     dfa:	4927      	ldr	r1, [pc, #156]	; (e98 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
     dfc:	4648      	mov	r0, r9
     dfe:	47b8      	blx	r7
     e00:	4632      	mov	r2, r6
     e02:	4641      	mov	r1, r8
     e04:	4648      	mov	r0, r9
     e06:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     e08:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     e0c:	4923      	ldr	r1, [pc, #140]	; (e9c <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
     e0e:	4648      	mov	r0, r9
     e10:	47b8      	blx	r7
     e12:	4632      	mov	r2, r6
     e14:	4641      	mov	r1, r8
     e16:	4648      	mov	r0, r9
     e18:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     e1a:	f504 7982 	add.w	r9, r4, #260	; 0x104
     e1e:	4920      	ldr	r1, [pc, #128]	; (ea0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
     e20:	4648      	mov	r0, r9
     e22:	47b8      	blx	r7
     e24:	4632      	mov	r2, r6
     e26:	4641      	mov	r1, r8
     e28:	4648      	mov	r0, r9
     e2a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     e2c:	f104 0904 	add.w	r9, r4, #4
     e30:	491c      	ldr	r1, [pc, #112]	; (ea4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
     e32:	4648      	mov	r0, r9
     e34:	47b8      	blx	r7
     e36:	4632      	mov	r2, r6
     e38:	4641      	mov	r1, r8
     e3a:	4648      	mov	r0, r9
     e3c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     e3e:	f504 7992 	add.w	r9, r4, #292	; 0x124
     e42:	4919      	ldr	r1, [pc, #100]	; (ea8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
     e44:	4648      	mov	r0, r9
     e46:	47b8      	blx	r7
     e48:	4632      	mov	r2, r6
     e4a:	4641      	mov	r1, r8
     e4c:	4648      	mov	r0, r9
     e4e:	47a8      	blx	r5
     e50:	f504 77a2 	add.w	r7, r4, #324	; 0x144
     e54:	4915      	ldr	r1, [pc, #84]	; (eac <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
     e56:	4638      	mov	r0, r7
     e58:	4b15      	ldr	r3, [pc, #84]	; (eb0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
     e5a:	4798      	blx	r3
     e5c:	4632      	mov	r2, r6
     e5e:	4915      	ldr	r1, [pc, #84]	; (eb4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
     e60:	4638      	mov	r0, r7
     e62:	47a8      	blx	r5
     e64:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
     e68:	4620      	mov	r0, r4
     e6a:	4b13      	ldr	r3, [pc, #76]	; (eb8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
     e6c:	4798      	blx	r3
     e6e:	4632      	mov	r2, r6
     e70:	4912      	ldr	r1, [pc, #72]	; (ebc <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
     e72:	4620      	mov	r0, r4
     e74:	47a8      	blx	r5
     e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e7a:	bf00      	nop
     e7c:	20000a14 	.word	0x20000a14
     e80:	20009f88 	.word	0x20009f88
     e84:	0000dd8d 	.word	0x0000dd8d
     e88:	20000000 	.word	0x20000000
     e8c:	000135c5 	.word	0x000135c5
     e90:	2000a01c 	.word	0x2000a01c
     e94:	2000a140 	.word	0x2000a140
     e98:	2000a03c 	.word	0x2000a03c
     e9c:	2000a100 	.word	0x2000a100
     ea0:	2000a120 	.word	0x2000a120
     ea4:	20009ff8 	.word	0x20009ff8
     ea8:	2000a098 	.word	0x2000a098
     eac:	2000a0b8 	.word	0x2000a0b8
     eb0:	0000dc31 	.word	0x0000dc31
     eb4:	0000dc4d 	.word	0x0000dc4d
     eb8:	00000bad 	.word	0x00000bad
     ebc:	00000b61 	.word	0x00000b61
     ec0:	0000ddc5 	.word	0x0000ddc5

00000ec4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     ec4:	b538      	push	{r3, r4, r5, lr}
     ec6:	4605      	mov	r5, r0
     ec8:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     eca:	4b05      	ldr	r3, [pc, #20]	; (ee0 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     ecc:	4798      	blx	r3
     ece:	f8a5 011a 	strh.w	r0, [r5, #282]	; 0x11a
	usb.writeData(&header, sizeof(header));
     ed2:	2206      	movs	r2, #6
     ed4:	4621      	mov	r1, r4
     ed6:	4803      	ldr	r0, [pc, #12]	; (ee4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     eda:	4798      	blx	r3
     edc:	bd38      	pop	{r3, r4, r5, pc}
     ede:	bf00      	nop
     ee0:	00000cf5 	.word	0x00000cf5
     ee4:	200018a4 	.word	0x200018a4
     ee8:	0000e725 	.word	0x0000e725

00000eec <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     eee:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
     ef2:	2b4a      	cmp	r3, #74	; 0x4a
     ef4:	bf0c      	ite	eq
     ef6:	2501      	moveq	r5, #1
     ef8:	2500      	movne	r5, #0
	if (result){
     efa:	d001      	beq.n	f00 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     efc:	4628      	mov	r0, r5
     efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f00:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     f02:	4e14      	ldr	r6, [pc, #80]	; (f54 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     f04:	4630      	mov	r0, r6
     f06:	4b14      	ldr	r3, [pc, #80]	; (f58 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
     f08:	4798      	blx	r3
     f0a:	4607      	mov	r7, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     f0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
     f10:	4a12      	ldr	r2, [pc, #72]	; (f5c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     f12:	601a      	str	r2, [r3, #0]
     f14:	2200      	movs	r2, #0
     f16:	711a      	strb	r2, [r3, #4]
     f18:	224a      	movs	r2, #74	; 0x4a
     f1a:	715a      	strb	r2, [r3, #5]
     f1c:	7198      	strb	r0, [r3, #6]
			heatersEnabled=heater.ReadEnableGIPO();
     f1e:	4630      	mov	r0, r6
     f20:	4b0f      	ldr	r3, [pc, #60]	; (f60 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x74>)
     f22:	4798      	blx	r3
			localBuffer[n]=heatersEnabled;
     f24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
     f28:	71d8      	strb	r0, [r3, #7]
			if (!heater.heaterStatusChanged)
     f2a:	7873      	ldrb	r3, [r6, #1]
     f2c:	b15b      	cbz	r3, f46 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5a>
			singleTaskMessage=singleTask;
     f2e:	4b0b      	ldr	r3, [pc, #44]	; (f5c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     f30:	f8c4 313e 	str.w	r3, [r4, #318]	; 0x13e
     f34:	2200      	movs	r2, #0
     f36:	f884 2142 	strb.w	r2, [r4, #322]	; 0x142
     f3a:	234a      	movs	r3, #74	; 0x4a
     f3c:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
     f40:	f884 7144 	strb.w	r7, [r4, #324]	; 0x144
     f44:	e7da      	b.n	efc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     f46:	2240      	movs	r2, #64	; 0x40
     f48:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
     f4c:	4805      	ldr	r0, [pc, #20]	; (f64 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x78>)
     f4e:	4b06      	ldr	r3, [pc, #24]	; (f68 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x7c>)
     f50:	4798      	blx	r3
     f52:	e7ec      	b.n	f2e <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x42>
     f54:	200023e8 	.word	0x200023e8
     f58:	0001114d 	.word	0x0001114d
     f5c:	61626364 	.word	0x61626364
     f60:	000111b9 	.word	0x000111b9
     f64:	200018a4 	.word	0x200018a4
     f68:	0000e7bd 	.word	0x0000e7bd

00000f6c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     f70:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
     f74:	2b4d      	cmp	r3, #77	; 0x4d
     f76:	bf0c      	ite	eq
     f78:	2501      	moveq	r5, #1
     f7a:	2500      	movne	r5, #0
	if (result){
     f7c:	d002      	beq.n	f84 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
     f7e:	4628      	mov	r0, r5
     f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
     f84:	4b18      	ldr	r3, [pc, #96]	; (fe8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     f86:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     f8a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
     f8e:	4a17      	ldr	r2, [pc, #92]	; (fec <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     f90:	601a      	str	r2, [r3, #0]
     f92:	2200      	movs	r2, #0
     f94:	711a      	strb	r2, [r3, #4]
     f96:	224d      	movs	r2, #77	; 0x4d
     f98:	715a      	strb	r2, [r3, #5]
     f9a:	f883 8006 	strb.w	r8, [r3, #6]
     f9e:	2307      	movs	r3, #7
     fa0:	4911      	ldr	r1, [pc, #68]	; (fe8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     fa2:	f103 0261 	add.w	r2, r3, #97	; 0x61
     fa6:	440a      	add	r2, r1
     fa8:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     fac:	f852 4f04 	ldr.w	r4, [r2, #4]!
     fb0:	f8d0 6148 	ldr.w	r6, [r0, #328]	; 0x148
     fb4:	50f4      	str	r4, [r6, r3]
     fb6:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
     fb8:	42bb      	cmp	r3, r7
     fba:	d1f7      	bne.n	fac <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
     fbc:	2b37      	cmp	r3, #55	; 0x37
     fbe:	d1f0      	bne.n	fa2 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
     fc0:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     fc2:	2240      	movs	r2, #64	; 0x40
     fc4:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
     fc8:	4809      	ldr	r0, [pc, #36]	; (ff0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
     fca:	4b0a      	ldr	r3, [pc, #40]	; (ff4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
     fcc:	4798      	blx	r3
		singleTaskMessage=singleTask;
     fce:	4b07      	ldr	r3, [pc, #28]	; (fec <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     fd0:	f8c4 313e 	str.w	r3, [r4, #318]	; 0x13e
     fd4:	2200      	movs	r2, #0
     fd6:	f884 2142 	strb.w	r2, [r4, #322]	; 0x142
     fda:	234d      	movs	r3, #77	; 0x4d
     fdc:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
     fe0:	f884 8144 	strb.w	r8, [r4, #324]	; 0x144
     fe4:	e7cb      	b.n	f7e <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
     fe6:	bf00      	nop
     fe8:	200099e4 	.word	0x200099e4
     fec:	61626364 	.word	0x61626364
     ff0:	200018a4 	.word	0x200018a4
     ff4:	0000e7bd 	.word	0x0000e7bd

00000ff8 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     ff8:	b570      	push	{r4, r5, r6, lr}
     ffa:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     ffc:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
    1000:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    1004:	681a      	ldr	r2, [r3, #0]
    1006:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    100a:	889b      	ldrh	r3, [r3, #4]
    100c:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    100e:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
    1012:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    1014:	b2db      	uxtb	r3, r3
    1016:	2b16      	cmp	r3, #22
    1018:	d817      	bhi.n	104a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x52>
		gotTask=true;
    101a:	2301      	movs	r3, #1
    101c:	f880 3117 	strb.w	r3, [r0, #279]	; 0x117
		result=gotTask;
    1020:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
		switch (header.task)
    1024:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    1028:	3b41      	subs	r3, #65	; 0x41
    102a:	2b16      	cmp	r3, #22
    102c:	d878      	bhi.n	1120 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x128>
    102e:	e8df f003 	tbb	[pc, r3]
    1032:	261f      	.short	0x261f
    1034:	1c1c2c1c 	.word	0x1c1c2c1c
    1038:	47413b35 	.word	0x47413b35
    103c:	655f534d 	.word	0x655f534d
    1040:	1c59716b 	.word	0x1c59716b
    1044:	77771c1c 	.word	0x77771c1c
    1048:	1c          	.byte	0x1c
    1049:	00          	.byte	0x00
		gotTask=false;
    104a:	2300      	movs	r3, #0
    104c:	f880 3117 	strb.w	r3, [r0, #279]	; 0x117
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    1050:	4e35      	ldr	r6, [pc, #212]	; (1128 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
    1052:	2240      	movs	r2, #64	; 0x40
    1054:	f500 71a4 	add.w	r1, r0, #328	; 0x148
    1058:	4630      	mov	r0, r6
    105a:	4b34      	ldr	r3, [pc, #208]	; (112c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
    105c:	4798      	blx	r3
		result=usb.rxReady;
    105e:	7d73      	ldrb	r3, [r6, #21]
    1060:	b2db      	uxtb	r3, r3
    1062:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
	if (result)
    1066:	2b00      	cmp	r3, #0
    1068:	d1dc      	bne.n	1024 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    106a:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    106e:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    1070:	4629      	mov	r1, r5
    1072:	4620      	mov	r0, r4
    1074:	4b2e      	ldr	r3, [pc, #184]	; (1130 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
    1076:	4798      	blx	r3
    1078:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    107c:	e7f5      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
	maintenanceIsConnected = false;
    107e:	2300      	movs	r3, #0
    1080:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	bSendNotifications = false;
    1084:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
				break;
    1088:	e7ef      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				notifyGAINCommandReceived( header, result);
    108a:	2201      	movs	r2, #1
    108c:	4629      	mov	r1, r5
    108e:	4620      	mov	r0, r4
    1090:	4b28      	ldr	r3, [pc, #160]	; (1134 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
    1092:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    1094:	2301      	movs	r3, #1
    1096:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				break;
    109a:	e7e6      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandWriteParameters();
    109c:	4620      	mov	r0, r4
    109e:	4b26      	ldr	r3, [pc, #152]	; (1138 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
    10a0:	4798      	blx	r3
    10a2:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10a6:	e7e0      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadParameters();
    10a8:	4620      	mov	r0, r4
    10aa:	4b24      	ldr	r3, [pc, #144]	; (113c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
    10ac:	4798      	blx	r3
    10ae:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10b2:	e7da      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetHeaters();
    10b4:	4620      	mov	r0, r4
    10b6:	4b22      	ldr	r3, [pc, #136]	; (1140 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
    10b8:	4798      	blx	r3
    10ba:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10be:	e7d4      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadHeaterStatus();
    10c0:	4620      	mov	r0, r4
    10c2:	4b20      	ldr	r3, [pc, #128]	; (1144 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
    10c4:	4798      	blx	r3
    10c6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10ca:	e7ce      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetEnableFans();
    10cc:	4620      	mov	r0, r4
    10ce:	4b1e      	ldr	r3, [pc, #120]	; (1148 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
    10d0:	4798      	blx	r3
    10d2:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10d6:	e7c8      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetPWMFans();
    10d8:	4620      	mov	r0, r4
    10da:	4b1c      	ldr	r3, [pc, #112]	; (114c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
    10dc:	4798      	blx	r3
    10de:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10e2:	e7c2      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandFansStatus();
    10e4:	4620      	mov	r0, r4
    10e6:	4b1a      	ldr	r3, [pc, #104]	; (1150 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
    10e8:	4798      	blx	r3
    10ea:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10ee:	e7bc      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadTemmperatures();
    10f0:	4620      	mov	r0, r4
    10f2:	4b18      	ldr	r3, [pc, #96]	; (1154 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
    10f4:	4798      	blx	r3
    10f6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    10fa:	e7b6      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadFlapperData();
    10fc:	4620      	mov	r0, r4
    10fe:	4b16      	ldr	r3, [pc, #88]	; (1158 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
    1100:	4798      	blx	r3
    1102:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    1106:	e7b0      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetFlapperValve();
    1108:	4620      	mov	r0, r4
    110a:	4b14      	ldr	r3, [pc, #80]	; (115c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
    110c:	4798      	blx	r3
    110e:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    1112:	e7aa      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetFlapperPosition();
    1114:	4620      	mov	r0, r4
    1116:	4b12      	ldr	r3, [pc, #72]	; (1160 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
    1118:	4798      	blx	r3
    111a:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    111e:	e7a4      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = false;
    1120:	2300      	movs	r3, #0
    1122:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				break;
    1126:	e7a0      	b.n	106a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
    1128:	200018a4 	.word	0x200018a4
    112c:	0000e639 	.word	0x0000e639
    1130:	00000c41 	.word	0x00000c41
    1134:	00000ec5 	.word	0x00000ec5
    1138:	00000515 	.word	0x00000515
    113c:	00000729 	.word	0x00000729
    1140:	00000c59 	.word	0x00000c59
    1144:	00000eed 	.word	0x00000eed
    1148:	00000389 	.word	0x00000389
    114c:	000003b5 	.word	0x000003b5
    1150:	00000621 	.word	0x00000621
    1154:	00000f6d 	.word	0x00000f6d
    1158:	00000681 	.word	0x00000681
    115c:	0000041d 	.word	0x0000041d
    1160:	00000495 	.word	0x00000495

00001164 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    1164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1166:	4604      	mov	r4, r0
	result=false;
    1168:	2300      	movs	r3, #0
    116a:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
	if (gotAccess)
    116e:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
    1172:	2b00      	cmp	r3, #0
    1174:	d04f      	beq.n	1216 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb2>
		if (usb.rxReady)
    1176:	4b2a      	ldr	r3, [pc, #168]	; (1220 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    1178:	7d5b      	ldrb	r3, [r3, #21]
    117a:	b95b      	cbnz	r3, 1194 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    117c:	2300      	movs	r3, #0
    117e:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1182:	2240      	movs	r2, #64	; 0x40
    1184:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    1188:	4825      	ldr	r0, [pc, #148]	; (1220 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    118a:	4b26      	ldr	r3, [pc, #152]	; (1224 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    118c:	4798      	blx	r3
	}
    118e:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    1192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    1194:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    1198:	681a      	ldr	r2, [r3, #0]
    119a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    119e:	889b      	ldrh	r3, [r3, #4]
    11a0:	f8a0 30b4 	strh.w	r3, [r0, #180]	; 0xb4
			switch (input){
    11a4:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
    11a8:	2b3d      	cmp	r3, #61	; 0x3d
    11aa:	d017      	beq.n	11dc <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    11ac:	2b3e      	cmp	r3, #62	; 0x3e
    11ae:	d010      	beq.n	11d2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    11b0:	2b3c      	cmp	r3, #60	; 0x3c
    11b2:	d003      	beq.n	11bc <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    11b4:	2300      	movs	r3, #0
    11b6:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
				break;
    11ba:	e006      	b.n	11ca <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    11bc:	2301      	movs	r3, #1
    11be:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
					result = handleHVACTask();
    11c2:	4b19      	ldr	r3, [pc, #100]	; (1228 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    11c4:	4798      	blx	r3
    11c6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
			ClearLocalBuffer();
    11ca:	4620      	mov	r0, r4
    11cc:	4b17      	ldr	r3, [pc, #92]	; (122c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    11ce:	4798      	blx	r3
    11d0:	e7d7      	b.n	1182 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    11d2:	4b15      	ldr	r3, [pc, #84]	; (1228 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    11d4:	4798      	blx	r3
    11d6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
				break;
    11da:	e7f6      	b.n	11ca <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    11dc:	2501      	movs	r5, #1
    11de:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
					interfaceTimer.Stop();
    11e2:	4e13      	ldr	r6, [pc, #76]	; (1230 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    11e4:	4630      	mov	r0, r6
    11e6:	4b13      	ldr	r3, [pc, #76]	; (1234 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    11e8:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    11ea:	4f13      	ldr	r7, [pc, #76]	; (1238 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    11ec:	4639      	mov	r1, r7
    11ee:	4630      	mov	r0, r6
    11f0:	4b12      	ldr	r3, [pc, #72]	; (123c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    11f2:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    11f4:	f242 7210 	movw	r2, #10000	; 0x2710
    11f8:	4639      	mov	r1, r7
    11fa:	4630      	mov	r0, r6
    11fc:	4b10      	ldr	r3, [pc, #64]	; (1240 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    11fe:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1200:	2300      	movs	r3, #0
    1202:	6623      	str	r3, [r4, #96]	; 0x60
					maintenanceIsConnected = true;
    1204:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
					bSendNotifications = true;
    1208:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
					result=is_MTPC_Beaming;
    120c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1210:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				break;
    1214:	e7d9      	b.n	11ca <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1216:	2300      	movs	r3, #0
    1218:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
    121c:	e7b7      	b.n	118e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    121e:	bf00      	nop
    1220:	200018a4 	.word	0x200018a4
    1224:	0000e639 	.word	0x0000e639
    1228:	00000ff9 	.word	0x00000ff9
    122c:	00000c25 	.word	0x00000c25
    1230:	20000a18 	.word	0x20000a18
    1234:	0000deed 	.word	0x0000deed
    1238:	00000b51 	.word	0x00000b51
    123c:	0000e009 	.word	0x0000e009
    1240:	0000e061 	.word	0x0000e061

00001244 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    1244:	b510      	push	{r4, lr}
    1246:	4604      	mov	r4, r0
	result=false;
    1248:	2300      	movs	r3, #0
    124a:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
	magic=0;
    124e:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
	if (gotAccess==true)
    1252:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
    1256:	b12b      	cbz	r3, 1264 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    1258:	2301      	movs	r3, #1
    125a:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
	return	result;
    125e:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
}
    1262:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    1264:	4b15      	ldr	r3, [pc, #84]	; (12bc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    1266:	7d5b      	ldrb	r3, [r3, #21]
    1268:	b1b3      	cbz	r3, 1298 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
    126a:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    126e:	1e41      	subs	r1, r0, #1
    1270:	3003      	adds	r0, #3
				magic=magic<<8;
    1272:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1276:	021b      	lsls	r3, r3, #8
    1278:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
				magic|= localBuffer[i];
    127c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1280:	4313      	orrs	r3, r2
    1282:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
			for (int i = 0; i < 4; i++)
    1286:	4281      	cmp	r1, r0
    1288:	d1f3      	bne.n	1272 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    128a:	4a0d      	ldr	r2, [pc, #52]	; (12c0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    128c:	ea83 0102 	eor.w	r1, r3, r2
    1290:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
			if (xorResult==0)
    1294:	4293      	cmp	r3, r2
    1296:	d006      	beq.n	12a6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1298:	2240      	movs	r2, #64	; 0x40
    129a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    129e:	4807      	ldr	r0, [pc, #28]	; (12bc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    12a0:	4b08      	ldr	r3, [pc, #32]	; (12c4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
    12a2:	4798      	blx	r3
    12a4:	e7db      	b.n	125e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    12a6:	2301      	movs	r3, #1
    12a8:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
				result=true;
    12ac:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				is_MTPC_Beaming=true;
    12b0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
				return	handleCommunication();
    12b4:	4620      	mov	r0, r4
    12b6:	4b04      	ldr	r3, [pc, #16]	; (12c8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
    12b8:	4798      	blx	r3
    12ba:	bd10      	pop	{r4, pc}
    12bc:	200018a4 	.word	0x200018a4
    12c0:	61626364 	.word	0x61626364
    12c4:	0000e639 	.word	0x0000e639
    12c8:	00001165 	.word	0x00001165

000012cc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    12cc:	b580      	push	{r7, lr}
    12ce:	af00      	add	r7, sp, #0
	system_init();
    12d0:	4b03      	ldr	r3, [pc, #12]	; (12e0 <atmel_start_init+0x14>)
    12d2:	4798      	blx	r3
	usb_init();
    12d4:	4b03      	ldr	r3, [pc, #12]	; (12e4 <atmel_start_init+0x18>)
    12d6:	4798      	blx	r3
	spi_nor_flash_init();
    12d8:	4b03      	ldr	r3, [pc, #12]	; (12e8 <atmel_start_init+0x1c>)
    12da:	4798      	blx	r3
}
    12dc:	bf00      	nop
    12de:	bd80      	pop	{r7, pc}
    12e0:	000026cd 	.word	0x000026cd
    12e4:	0000bd5d 	.word	0x0000bd5d
    12e8:	0000bcf1 	.word	0x0000bcf1

000012ec <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    12ec:	b480      	push	{r7}
    12ee:	b085      	sub	sp, #20
    12f0:	af00      	add	r7, sp, #0
    12f2:	60f8      	str	r0, [r7, #12]
    12f4:	460b      	mov	r3, r1
    12f6:	607a      	str	r2, [r7, #4]
    12f8:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    12fa:	7afa      	ldrb	r2, [r7, #11]
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	3220      	adds	r2, #32
    1300:	6879      	ldr	r1, [r7, #4]
    1302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1306:	bf00      	nop
    1308:	3714      	adds	r7, #20
    130a:	46bd      	mov	sp, r7
    130c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1310:	4770      	bx	lr

00001312 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    1312:	b480      	push	{r7}
    1314:	b083      	sub	sp, #12
    1316:	af00      	add	r7, sp, #0
    1318:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    131a:	687b      	ldr	r3, [r7, #4]
    131c:	691b      	ldr	r3, [r3, #16]
    131e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1322:	687b      	ldr	r3, [r7, #4]
    1324:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1326:	bf00      	nop
    1328:	370c      	adds	r7, #12
    132a:	46bd      	mov	sp, r7
    132c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1330:	4770      	bx	lr

00001332 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    1332:	b480      	push	{r7}
    1334:	b083      	sub	sp, #12
    1336:	af00      	add	r7, sp, #0
    1338:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    133a:	687b      	ldr	r3, [r7, #4]
    133c:	691b      	ldr	r3, [r3, #16]
    133e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1346:	bf00      	nop
    1348:	370c      	adds	r7, #12
    134a:	46bd      	mov	sp, r7
    134c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1350:	4770      	bx	lr

00001352 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    1352:	b480      	push	{r7}
    1354:	b083      	sub	sp, #12
    1356:	af00      	add	r7, sp, #0
    1358:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	691b      	ldr	r3, [r3, #16]
    135e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1366:	bf00      	nop
    1368:	370c      	adds	r7, #12
    136a:	46bd      	mov	sp, r7
    136c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1370:	4770      	bx	lr

00001372 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    1372:	b480      	push	{r7}
    1374:	b083      	sub	sp, #12
    1376:	af00      	add	r7, sp, #0
    1378:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	691b      	ldr	r3, [r3, #16]
    137e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1386:	bf00      	nop
    1388:	370c      	adds	r7, #12
    138a:	46bd      	mov	sp, r7
    138c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1390:	4770      	bx	lr

00001392 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    1392:	b480      	push	{r7}
    1394:	b083      	sub	sp, #12
    1396:	af00      	add	r7, sp, #0
    1398:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	695b      	ldr	r3, [r3, #20]
    139e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13a6:	bf00      	nop
    13a8:	370c      	adds	r7, #12
    13aa:	46bd      	mov	sp, r7
    13ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    13b0:	4770      	bx	lr

000013b2 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    13b2:	b480      	push	{r7}
    13b4:	b083      	sub	sp, #12
    13b6:	af00      	add	r7, sp, #0
    13b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	695b      	ldr	r3, [r3, #20]
    13be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13c6:	bf00      	nop
    13c8:	370c      	adds	r7, #12
    13ca:	46bd      	mov	sp, r7
    13cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    13d0:	4770      	bx	lr

000013d2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    13d2:	b480      	push	{r7}
    13d4:	b083      	sub	sp, #12
    13d6:	af00      	add	r7, sp, #0
    13d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    13da:	687b      	ldr	r3, [r7, #4]
    13dc:	695b      	ldr	r3, [r3, #20]
    13de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13e6:	bf00      	nop
    13e8:	370c      	adds	r7, #12
    13ea:	46bd      	mov	sp, r7
    13ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f0:	4770      	bx	lr

000013f2 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    13f2:	b480      	push	{r7}
    13f4:	b083      	sub	sp, #12
    13f6:	af00      	add	r7, sp, #0
    13f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    13fa:	687b      	ldr	r3, [r7, #4]
    13fc:	695b      	ldr	r3, [r3, #20]
    13fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1402:	687b      	ldr	r3, [r7, #4]
    1404:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1406:	bf00      	nop
    1408:	370c      	adds	r7, #12
    140a:	46bd      	mov	sp, r7
    140c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1410:	4770      	bx	lr

00001412 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    1412:	b480      	push	{r7}
    1414:	b083      	sub	sp, #12
    1416:	af00      	add	r7, sp, #0
    1418:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	695b      	ldr	r3, [r3, #20]
    141e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1426:	bf00      	nop
    1428:	370c      	adds	r7, #12
    142a:	46bd      	mov	sp, r7
    142c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1430:	4770      	bx	lr

00001432 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    1432:	b480      	push	{r7}
    1434:	b083      	sub	sp, #12
    1436:	af00      	add	r7, sp, #0
    1438:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	699b      	ldr	r3, [r3, #24]
    143e:	f043 0201 	orr.w	r2, r3, #1
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1446:	bf00      	nop
    1448:	370c      	adds	r7, #12
    144a:	46bd      	mov	sp, r7
    144c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1450:	4770      	bx	lr

00001452 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    1452:	b480      	push	{r7}
    1454:	b083      	sub	sp, #12
    1456:	af00      	add	r7, sp, #0
    1458:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	699b      	ldr	r3, [r3, #24]
    145e:	f043 0202 	orr.w	r2, r3, #2
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1466:	bf00      	nop
    1468:	370c      	adds	r7, #12
    146a:	46bd      	mov	sp, r7
    146c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1470:	4770      	bx	lr

00001472 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    1472:	b480      	push	{r7}
    1474:	b083      	sub	sp, #12
    1476:	af00      	add	r7, sp, #0
    1478:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	699b      	ldr	r3, [r3, #24]
    147e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1486:	bf00      	nop
    1488:	370c      	adds	r7, #12
    148a:	46bd      	mov	sp, r7
    148c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1490:	4770      	bx	lr

00001492 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    1492:	b480      	push	{r7}
    1494:	b083      	sub	sp, #12
    1496:	af00      	add	r7, sp, #0
    1498:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	699b      	ldr	r3, [r3, #24]
    149e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14a6:	bf00      	nop
    14a8:	370c      	adds	r7, #12
    14aa:	46bd      	mov	sp, r7
    14ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b0:	4770      	bx	lr

000014b2 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    14b2:	b480      	push	{r7}
    14b4:	b083      	sub	sp, #12
    14b6:	af00      	add	r7, sp, #0
    14b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	699b      	ldr	r3, [r3, #24]
    14be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14c6:	bf00      	nop
    14c8:	370c      	adds	r7, #12
    14ca:	46bd      	mov	sp, r7
    14cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d0:	4770      	bx	lr

000014d2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    14d2:	b480      	push	{r7}
    14d4:	b083      	sub	sp, #12
    14d6:	af00      	add	r7, sp, #0
    14d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	699b      	ldr	r3, [r3, #24]
    14de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14e6:	bf00      	nop
    14e8:	370c      	adds	r7, #12
    14ea:	46bd      	mov	sp, r7
    14ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f0:	4770      	bx	lr

000014f2 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    14f2:	b480      	push	{r7}
    14f4:	b083      	sub	sp, #12
    14f6:	af00      	add	r7, sp, #0
    14f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	69db      	ldr	r3, [r3, #28]
    14fe:	f043 0208 	orr.w	r2, r3, #8
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1506:	bf00      	nop
    1508:	370c      	adds	r7, #12
    150a:	46bd      	mov	sp, r7
    150c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1510:	4770      	bx	lr

00001512 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1512:	b480      	push	{r7}
    1514:	b083      	sub	sp, #12
    1516:	af00      	add	r7, sp, #0
    1518:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	69db      	ldr	r3, [r3, #28]
    151e:	f043 0220 	orr.w	r2, r3, #32
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1526:	bf00      	nop
    1528:	370c      	adds	r7, #12
    152a:	46bd      	mov	sp, r7
    152c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1530:	4770      	bx	lr

00001532 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1532:	b480      	push	{r7}
    1534:	b083      	sub	sp, #12
    1536:	af00      	add	r7, sp, #0
    1538:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	69db      	ldr	r3, [r3, #28]
    153e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1546:	bf00      	nop
    1548:	370c      	adds	r7, #12
    154a:	46bd      	mov	sp, r7
    154c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1550:	4770      	bx	lr

00001552 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1552:	b480      	push	{r7}
    1554:	b083      	sub	sp, #12
    1556:	af00      	add	r7, sp, #0
    1558:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	69db      	ldr	r3, [r3, #28]
    155e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1566:	bf00      	nop
    1568:	370c      	adds	r7, #12
    156a:	46bd      	mov	sp, r7
    156c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1570:	4770      	bx	lr

00001572 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1572:	b480      	push	{r7}
    1574:	b083      	sub	sp, #12
    1576:	af00      	add	r7, sp, #0
    1578:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	6a1b      	ldr	r3, [r3, #32]
    157e:	f043 0201 	orr.w	r2, r3, #1
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1586:	bf00      	nop
    1588:	370c      	adds	r7, #12
    158a:	46bd      	mov	sp, r7
    158c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1590:	4770      	bx	lr

00001592 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1592:	b480      	push	{r7}
    1594:	b083      	sub	sp, #12
    1596:	af00      	add	r7, sp, #0
    1598:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	6a1b      	ldr	r3, [r3, #32]
    159e:	f043 0202 	orr.w	r2, r3, #2
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15a6:	bf00      	nop
    15a8:	370c      	adds	r7, #12
    15aa:	46bd      	mov	sp, r7
    15ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    15b0:	4770      	bx	lr

000015b2 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    15b2:	b480      	push	{r7}
    15b4:	b083      	sub	sp, #12
    15b6:	af00      	add	r7, sp, #0
    15b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	6a1b      	ldr	r3, [r3, #32]
    15be:	f043 0204 	orr.w	r2, r3, #4
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15c6:	bf00      	nop
    15c8:	370c      	adds	r7, #12
    15ca:	46bd      	mov	sp, r7
    15cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    15d0:	4770      	bx	lr

000015d2 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    15d2:	b480      	push	{r7}
    15d4:	b083      	sub	sp, #12
    15d6:	af00      	add	r7, sp, #0
    15d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	6a1b      	ldr	r3, [r3, #32]
    15de:	f043 0208 	orr.w	r2, r3, #8
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15e6:	bf00      	nop
    15e8:	370c      	adds	r7, #12
    15ea:	46bd      	mov	sp, r7
    15ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f0:	4770      	bx	lr

000015f2 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    15f2:	b480      	push	{r7}
    15f4:	b083      	sub	sp, #12
    15f6:	af00      	add	r7, sp, #0
    15f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	6a1b      	ldr	r3, [r3, #32]
    15fe:	f043 0220 	orr.w	r2, r3, #32
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1606:	bf00      	nop
    1608:	370c      	adds	r7, #12
    160a:	46bd      	mov	sp, r7
    160c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1610:	4770      	bx	lr

00001612 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1612:	b480      	push	{r7}
    1614:	b083      	sub	sp, #12
    1616:	af00      	add	r7, sp, #0
    1618:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	6a1b      	ldr	r3, [r3, #32]
    161e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1626:	bf00      	nop
    1628:	370c      	adds	r7, #12
    162a:	46bd      	mov	sp, r7
    162c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1630:	4770      	bx	lr

00001632 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1632:	b480      	push	{r7}
    1634:	b085      	sub	sp, #20
    1636:	af00      	add	r7, sp, #0
    1638:	60f8      	str	r0, [r7, #12]
    163a:	460b      	mov	r3, r1
    163c:	607a      	str	r2, [r7, #4]
    163e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1640:	7afb      	ldrb	r3, [r7, #11]
    1642:	68fa      	ldr	r2, [r7, #12]
    1644:	01db      	lsls	r3, r3, #7
    1646:	4413      	add	r3, r2
    1648:	3308      	adds	r3, #8
    164a:	687a      	ldr	r2, [r7, #4]
    164c:	601a      	str	r2, [r3, #0]
}
    164e:	bf00      	nop
    1650:	3714      	adds	r7, #20
    1652:	46bd      	mov	sp, r7
    1654:	f85d 7b04 	ldr.w	r7, [sp], #4
    1658:	4770      	bx	lr

0000165a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    165a:	b480      	push	{r7}
    165c:	b085      	sub	sp, #20
    165e:	af00      	add	r7, sp, #0
    1660:	60f8      	str	r0, [r7, #12]
    1662:	460b      	mov	r3, r1
    1664:	607a      	str	r2, [r7, #4]
    1666:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1668:	7afb      	ldrb	r3, [r7, #11]
    166a:	68fa      	ldr	r2, [r7, #12]
    166c:	01db      	lsls	r3, r3, #7
    166e:	4413      	add	r3, r2
    1670:	3304      	adds	r3, #4
    1672:	687a      	ldr	r2, [r7, #4]
    1674:	601a      	str	r2, [r3, #0]
}
    1676:	bf00      	nop
    1678:	3714      	adds	r7, #20
    167a:	46bd      	mov	sp, r7
    167c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1680:	4770      	bx	lr

00001682 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1682:	b480      	push	{r7}
    1684:	b085      	sub	sp, #20
    1686:	af00      	add	r7, sp, #0
    1688:	60f8      	str	r0, [r7, #12]
    168a:	460b      	mov	r3, r1
    168c:	607a      	str	r2, [r7, #4]
    168e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1690:	7afb      	ldrb	r3, [r7, #11]
    1692:	68fa      	ldr	r2, [r7, #12]
    1694:	01db      	lsls	r3, r3, #7
    1696:	4413      	add	r3, r2
    1698:	3318      	adds	r3, #24
    169a:	687a      	ldr	r2, [r7, #4]
    169c:	601a      	str	r2, [r3, #0]
}
    169e:	bf00      	nop
    16a0:	3714      	adds	r7, #20
    16a2:	46bd      	mov	sp, r7
    16a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    16a8:	4770      	bx	lr

000016aa <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    16aa:	b480      	push	{r7}
    16ac:	b085      	sub	sp, #20
    16ae:	af00      	add	r7, sp, #0
    16b0:	60f8      	str	r0, [r7, #12]
    16b2:	460b      	mov	r3, r1
    16b4:	607a      	str	r2, [r7, #4]
    16b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    16b8:	7afb      	ldrb	r3, [r7, #11]
    16ba:	68fa      	ldr	r2, [r7, #12]
    16bc:	01db      	lsls	r3, r3, #7
    16be:	4413      	add	r3, r2
    16c0:	3314      	adds	r3, #20
    16c2:	687a      	ldr	r2, [r7, #4]
    16c4:	601a      	str	r2, [r3, #0]
}
    16c6:	bf00      	nop
    16c8:	3714      	adds	r7, #20
    16ca:	46bd      	mov	sp, r7
    16cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    16d0:	4770      	bx	lr

000016d2 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    16d2:	b480      	push	{r7}
    16d4:	b085      	sub	sp, #20
    16d6:	af00      	add	r7, sp, #0
    16d8:	6078      	str	r0, [r7, #4]
    16da:	4608      	mov	r0, r1
    16dc:	4611      	mov	r1, r2
    16de:	461a      	mov	r2, r3
    16e0:	4603      	mov	r3, r0
    16e2:	70fb      	strb	r3, [r7, #3]
    16e4:	460b      	mov	r3, r1
    16e6:	70bb      	strb	r3, [r7, #2]
    16e8:	4613      	mov	r3, r2
    16ea:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16ec:	78fa      	ldrb	r2, [r7, #3]
    16ee:	78bb      	ldrb	r3, [r7, #2]
    16f0:	6879      	ldr	r1, [r7, #4]
    16f2:	01d2      	lsls	r2, r2, #7
    16f4:	440a      	add	r2, r1
    16f6:	4413      	add	r3, r2
    16f8:	3330      	adds	r3, #48	; 0x30
    16fa:	781b      	ldrb	r3, [r3, #0]
    16fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    16fe:	7bfb      	ldrb	r3, [r7, #15]
    1700:	f023 030f 	bic.w	r3, r3, #15
    1704:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1706:	787b      	ldrb	r3, [r7, #1]
    1708:	f003 030f 	and.w	r3, r3, #15
    170c:	b2da      	uxtb	r2, r3
    170e:	7bfb      	ldrb	r3, [r7, #15]
    1710:	4313      	orrs	r3, r2
    1712:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1714:	78fa      	ldrb	r2, [r7, #3]
    1716:	78bb      	ldrb	r3, [r7, #2]
    1718:	6879      	ldr	r1, [r7, #4]
    171a:	01d2      	lsls	r2, r2, #7
    171c:	440a      	add	r2, r1
    171e:	4413      	add	r3, r2
    1720:	3330      	adds	r3, #48	; 0x30
    1722:	7bfa      	ldrb	r2, [r7, #15]
    1724:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1726:	bf00      	nop
    1728:	3714      	adds	r7, #20
    172a:	46bd      	mov	sp, r7
    172c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1730:	4770      	bx	lr

00001732 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1732:	b480      	push	{r7}
    1734:	b085      	sub	sp, #20
    1736:	af00      	add	r7, sp, #0
    1738:	6078      	str	r0, [r7, #4]
    173a:	4608      	mov	r0, r1
    173c:	4611      	mov	r1, r2
    173e:	461a      	mov	r2, r3
    1740:	4603      	mov	r3, r0
    1742:	70fb      	strb	r3, [r7, #3]
    1744:	460b      	mov	r3, r1
    1746:	70bb      	strb	r3, [r7, #2]
    1748:	4613      	mov	r3, r2
    174a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    174c:	78fa      	ldrb	r2, [r7, #3]
    174e:	78bb      	ldrb	r3, [r7, #2]
    1750:	6879      	ldr	r1, [r7, #4]
    1752:	01d2      	lsls	r2, r2, #7
    1754:	440a      	add	r2, r1
    1756:	4413      	add	r3, r2
    1758:	3330      	adds	r3, #48	; 0x30
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    175e:	7bfb      	ldrb	r3, [r7, #15]
    1760:	f003 030f 	and.w	r3, r3, #15
    1764:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1766:	787b      	ldrb	r3, [r7, #1]
    1768:	011b      	lsls	r3, r3, #4
    176a:	b2da      	uxtb	r2, r3
    176c:	7bfb      	ldrb	r3, [r7, #15]
    176e:	4313      	orrs	r3, r2
    1770:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1772:	78fa      	ldrb	r2, [r7, #3]
    1774:	78bb      	ldrb	r3, [r7, #2]
    1776:	6879      	ldr	r1, [r7, #4]
    1778:	01d2      	lsls	r2, r2, #7
    177a:	440a      	add	r2, r1
    177c:	4413      	add	r3, r2
    177e:	3330      	adds	r3, #48	; 0x30
    1780:	7bfa      	ldrb	r2, [r7, #15]
    1782:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1784:	bf00      	nop
    1786:	3714      	adds	r7, #20
    1788:	46bd      	mov	sp, r7
    178a:	f85d 7b04 	ldr.w	r7, [sp], #4
    178e:	4770      	bx	lr

00001790 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1790:	b480      	push	{r7}
    1792:	b085      	sub	sp, #20
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
    1798:	4608      	mov	r0, r1
    179a:	4611      	mov	r1, r2
    179c:	461a      	mov	r2, r3
    179e:	4603      	mov	r3, r0
    17a0:	70fb      	strb	r3, [r7, #3]
    17a2:	460b      	mov	r3, r1
    17a4:	70bb      	strb	r3, [r7, #2]
    17a6:	4613      	mov	r3, r2
    17a8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    17aa:	78fa      	ldrb	r2, [r7, #3]
    17ac:	78bb      	ldrb	r3, [r7, #2]
    17ae:	6879      	ldr	r1, [r7, #4]
    17b0:	01d2      	lsls	r2, r2, #7
    17b2:	440a      	add	r2, r1
    17b4:	4413      	add	r3, r2
    17b6:	3340      	adds	r3, #64	; 0x40
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    17bc:	7bfb      	ldrb	r3, [r7, #15]
    17be:	f023 0301 	bic.w	r3, r3, #1
    17c2:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    17c4:	787a      	ldrb	r2, [r7, #1]
    17c6:	7bfb      	ldrb	r3, [r7, #15]
    17c8:	4313      	orrs	r3, r2
    17ca:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17cc:	78fa      	ldrb	r2, [r7, #3]
    17ce:	78bb      	ldrb	r3, [r7, #2]
    17d0:	6879      	ldr	r1, [r7, #4]
    17d2:	01d2      	lsls	r2, r2, #7
    17d4:	440a      	add	r2, r1
    17d6:	4413      	add	r3, r2
    17d8:	3340      	adds	r3, #64	; 0x40
    17da:	7bfa      	ldrb	r2, [r7, #15]
    17dc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    17de:	bf00      	nop
    17e0:	3714      	adds	r7, #20
    17e2:	46bd      	mov	sp, r7
    17e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    17e8:	4770      	bx	lr

000017ea <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    17ea:	b490      	push	{r4, r7}
    17ec:	b082      	sub	sp, #8
    17ee:	af00      	add	r7, sp, #0
    17f0:	6078      	str	r0, [r7, #4]
    17f2:	460b      	mov	r3, r1
    17f4:	70fb      	strb	r3, [r7, #3]
    17f6:	4613      	mov	r3, r2
    17f8:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    17fa:	78fa      	ldrb	r2, [r7, #3]
    17fc:	78bb      	ldrb	r3, [r7, #2]
    17fe:	78f8      	ldrb	r0, [r7, #3]
    1800:	78b9      	ldrb	r1, [r7, #2]
    1802:	687c      	ldr	r4, [r7, #4]
    1804:	01c0      	lsls	r0, r0, #7
    1806:	4420      	add	r0, r4
    1808:	4401      	add	r1, r0
    180a:	3140      	adds	r1, #64	; 0x40
    180c:	7809      	ldrb	r1, [r1, #0]
    180e:	b2c9      	uxtb	r1, r1
    1810:	f041 0104 	orr.w	r1, r1, #4
    1814:	b2c8      	uxtb	r0, r1
    1816:	6879      	ldr	r1, [r7, #4]
    1818:	01d2      	lsls	r2, r2, #7
    181a:	440a      	add	r2, r1
    181c:	4413      	add	r3, r2
    181e:	3340      	adds	r3, #64	; 0x40
    1820:	4602      	mov	r2, r0
    1822:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1824:	bf00      	nop
    1826:	3708      	adds	r7, #8
    1828:	46bd      	mov	sp, r7
    182a:	bc90      	pop	{r4, r7}
    182c:	4770      	bx	lr

0000182e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    182e:	b490      	push	{r4, r7}
    1830:	b082      	sub	sp, #8
    1832:	af00      	add	r7, sp, #0
    1834:	6078      	str	r0, [r7, #4]
    1836:	460b      	mov	r3, r1
    1838:	70fb      	strb	r3, [r7, #3]
    183a:	4613      	mov	r3, r2
    183c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    183e:	78fa      	ldrb	r2, [r7, #3]
    1840:	78bb      	ldrb	r3, [r7, #2]
    1842:	78f8      	ldrb	r0, [r7, #3]
    1844:	78b9      	ldrb	r1, [r7, #2]
    1846:	687c      	ldr	r4, [r7, #4]
    1848:	01c0      	lsls	r0, r0, #7
    184a:	4420      	add	r0, r4
    184c:	4401      	add	r1, r0
    184e:	3140      	adds	r1, #64	; 0x40
    1850:	7809      	ldrb	r1, [r1, #0]
    1852:	b2c9      	uxtb	r1, r1
    1854:	f021 0104 	bic.w	r1, r1, #4
    1858:	b2c8      	uxtb	r0, r1
    185a:	6879      	ldr	r1, [r7, #4]
    185c:	01d2      	lsls	r2, r2, #7
    185e:	440a      	add	r2, r1
    1860:	4413      	add	r3, r2
    1862:	3340      	adds	r3, #64	; 0x40
    1864:	4602      	mov	r2, r0
    1866:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1868:	bf00      	nop
    186a:	3708      	adds	r7, #8
    186c:	46bd      	mov	sp, r7
    186e:	bc90      	pop	{r4, r7}
    1870:	4770      	bx	lr

00001872 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1872:	b480      	push	{r7}
    1874:	b085      	sub	sp, #20
    1876:	af00      	add	r7, sp, #0
    1878:	60f8      	str	r0, [r7, #12]
    187a:	460b      	mov	r3, r1
    187c:	607a      	str	r2, [r7, #4]
    187e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1880:	7afb      	ldrb	r3, [r7, #11]
    1882:	68fa      	ldr	r2, [r7, #12]
    1884:	01db      	lsls	r3, r3, #7
    1886:	4413      	add	r3, r2
    1888:	3328      	adds	r3, #40	; 0x28
    188a:	687a      	ldr	r2, [r7, #4]
    188c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    188e:	bf00      	nop
    1890:	3714      	adds	r7, #20
    1892:	46bd      	mov	sp, r7
    1894:	f85d 7b04 	ldr.w	r7, [sp], #4
    1898:	4770      	bx	lr
	...

0000189c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    189c:	b580      	push	{r7, lr}
    189e:	b082      	sub	sp, #8
    18a0:	af00      	add	r7, sp, #0
    18a2:	4603      	mov	r3, r0
    18a4:	6039      	str	r1, [r7, #0]
    18a6:	71fb      	strb	r3, [r7, #7]
    18a8:	4613      	mov	r3, r2
    18aa:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    18ac:	79bb      	ldrb	r3, [r7, #6]
    18ae:	2b01      	cmp	r3, #1
    18b0:	d01c      	beq.n	18ec <_gpio_set_direction+0x50>
    18b2:	2b02      	cmp	r3, #2
    18b4:	d037      	beq.n	1926 <_gpio_set_direction+0x8a>
    18b6:	2b00      	cmp	r3, #0
    18b8:	d14e      	bne.n	1958 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    18ba:	79fb      	ldrb	r3, [r7, #7]
    18bc:	683a      	ldr	r2, [r7, #0]
    18be:	4619      	mov	r1, r3
    18c0:	482a      	ldr	r0, [pc, #168]	; (196c <_gpio_set_direction+0xd0>)
    18c2:	4b2b      	ldr	r3, [pc, #172]	; (1970 <_gpio_set_direction+0xd4>)
    18c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    18c6:	683b      	ldr	r3, [r7, #0]
    18c8:	b29b      	uxth	r3, r3
    18ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    18ce:	79fb      	ldrb	r3, [r7, #7]
    18d0:	4619      	mov	r1, r3
    18d2:	4826      	ldr	r0, [pc, #152]	; (196c <_gpio_set_direction+0xd0>)
    18d4:	4b27      	ldr	r3, [pc, #156]	; (1974 <_gpio_set_direction+0xd8>)
    18d6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    18d8:	683b      	ldr	r3, [r7, #0]
    18da:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    18dc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    18e0:	79fb      	ldrb	r3, [r7, #7]
    18e2:	4619      	mov	r1, r3
    18e4:	4821      	ldr	r0, [pc, #132]	; (196c <_gpio_set_direction+0xd0>)
    18e6:	4b23      	ldr	r3, [pc, #140]	; (1974 <_gpio_set_direction+0xd8>)
    18e8:	4798      	blx	r3
		break;
    18ea:	e03a      	b.n	1962 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    18ec:	79fb      	ldrb	r3, [r7, #7]
    18ee:	683a      	ldr	r2, [r7, #0]
    18f0:	4619      	mov	r1, r3
    18f2:	481e      	ldr	r0, [pc, #120]	; (196c <_gpio_set_direction+0xd0>)
    18f4:	4b1e      	ldr	r3, [pc, #120]	; (1970 <_gpio_set_direction+0xd4>)
    18f6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    18f8:	683b      	ldr	r3, [r7, #0]
    18fa:	b29b      	uxth	r3, r3
    18fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1904:	79f9      	ldrb	r1, [r7, #7]
    1906:	461a      	mov	r2, r3
    1908:	4818      	ldr	r0, [pc, #96]	; (196c <_gpio_set_direction+0xd0>)
    190a:	4b1a      	ldr	r3, [pc, #104]	; (1974 <_gpio_set_direction+0xd8>)
    190c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    190e:	683b      	ldr	r3, [r7, #0]
    1910:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    191a:	79f9      	ldrb	r1, [r7, #7]
    191c:	461a      	mov	r2, r3
    191e:	4813      	ldr	r0, [pc, #76]	; (196c <_gpio_set_direction+0xd0>)
    1920:	4b14      	ldr	r3, [pc, #80]	; (1974 <_gpio_set_direction+0xd8>)
    1922:	4798      	blx	r3
		break;
    1924:	e01d      	b.n	1962 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1926:	79fb      	ldrb	r3, [r7, #7]
    1928:	683a      	ldr	r2, [r7, #0]
    192a:	4619      	mov	r1, r3
    192c:	480f      	ldr	r0, [pc, #60]	; (196c <_gpio_set_direction+0xd0>)
    192e:	4b12      	ldr	r3, [pc, #72]	; (1978 <_gpio_set_direction+0xdc>)
    1930:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1932:	683b      	ldr	r3, [r7, #0]
    1934:	b29b      	uxth	r3, r3
    1936:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    193a:	79fb      	ldrb	r3, [r7, #7]
    193c:	4619      	mov	r1, r3
    193e:	480b      	ldr	r0, [pc, #44]	; (196c <_gpio_set_direction+0xd0>)
    1940:	4b0c      	ldr	r3, [pc, #48]	; (1974 <_gpio_set_direction+0xd8>)
    1942:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1948:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    194c:	79fb      	ldrb	r3, [r7, #7]
    194e:	4619      	mov	r1, r3
    1950:	4806      	ldr	r0, [pc, #24]	; (196c <_gpio_set_direction+0xd0>)
    1952:	4b08      	ldr	r3, [pc, #32]	; (1974 <_gpio_set_direction+0xd8>)
    1954:	4798      	blx	r3
		break;
    1956:	e004      	b.n	1962 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1958:	2246      	movs	r2, #70	; 0x46
    195a:	4908      	ldr	r1, [pc, #32]	; (197c <_gpio_set_direction+0xe0>)
    195c:	2000      	movs	r0, #0
    195e:	4b08      	ldr	r3, [pc, #32]	; (1980 <_gpio_set_direction+0xe4>)
    1960:	4798      	blx	r3
	}
}
    1962:	bf00      	nop
    1964:	3708      	adds	r7, #8
    1966:	46bd      	mov	sp, r7
    1968:	bd80      	pop	{r7, pc}
    196a:	bf00      	nop
    196c:	41008000 	.word	0x41008000
    1970:	0000165b 	.word	0x0000165b
    1974:	00001873 	.word	0x00001873
    1978:	00001633 	.word	0x00001633
    197c:	00013f5c 	.word	0x00013f5c
    1980:	000040f5 	.word	0x000040f5

00001984 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1984:	b580      	push	{r7, lr}
    1986:	b082      	sub	sp, #8
    1988:	af00      	add	r7, sp, #0
    198a:	4603      	mov	r3, r0
    198c:	6039      	str	r1, [r7, #0]
    198e:	71fb      	strb	r3, [r7, #7]
    1990:	4613      	mov	r3, r2
    1992:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1994:	79bb      	ldrb	r3, [r7, #6]
    1996:	2b00      	cmp	r3, #0
    1998:	d006      	beq.n	19a8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    199a:	79fb      	ldrb	r3, [r7, #7]
    199c:	683a      	ldr	r2, [r7, #0]
    199e:	4619      	mov	r1, r3
    19a0:	4806      	ldr	r0, [pc, #24]	; (19bc <_gpio_set_level+0x38>)
    19a2:	4b07      	ldr	r3, [pc, #28]	; (19c0 <_gpio_set_level+0x3c>)
    19a4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    19a6:	e005      	b.n	19b4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    19a8:	79fb      	ldrb	r3, [r7, #7]
    19aa:	683a      	ldr	r2, [r7, #0]
    19ac:	4619      	mov	r1, r3
    19ae:	4803      	ldr	r0, [pc, #12]	; (19bc <_gpio_set_level+0x38>)
    19b0:	4b04      	ldr	r3, [pc, #16]	; (19c4 <_gpio_set_level+0x40>)
    19b2:	4798      	blx	r3
}
    19b4:	bf00      	nop
    19b6:	3708      	adds	r7, #8
    19b8:	46bd      	mov	sp, r7
    19ba:	bd80      	pop	{r7, pc}
    19bc:	41008000 	.word	0x41008000
    19c0:	00001683 	.word	0x00001683
    19c4:	000016ab 	.word	0x000016ab

000019c8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	b082      	sub	sp, #8
    19cc:	af00      	add	r7, sp, #0
    19ce:	4603      	mov	r3, r0
    19d0:	71fb      	strb	r3, [r7, #7]
    19d2:	460b      	mov	r3, r1
    19d4:	71bb      	strb	r3, [r7, #6]
    19d6:	4613      	mov	r3, r2
    19d8:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    19da:	797b      	ldrb	r3, [r7, #5]
    19dc:	2b01      	cmp	r3, #1
    19de:	d00a      	beq.n	19f6 <_gpio_set_pin_pull_mode+0x2e>
    19e0:	2b02      	cmp	r3, #2
    19e2:	d01f      	beq.n	1a24 <_gpio_set_pin_pull_mode+0x5c>
    19e4:	2b00      	cmp	r3, #0
    19e6:	d134      	bne.n	1a52 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    19e8:	79ba      	ldrb	r2, [r7, #6]
    19ea:	79fb      	ldrb	r3, [r7, #7]
    19ec:	4619      	mov	r1, r3
    19ee:	481e      	ldr	r0, [pc, #120]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    19f0:	4b1e      	ldr	r3, [pc, #120]	; (1a6c <_gpio_set_pin_pull_mode+0xa4>)
    19f2:	4798      	blx	r3
		break;
    19f4:	e033      	b.n	1a5e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    19f6:	79bb      	ldrb	r3, [r7, #6]
    19f8:	2201      	movs	r2, #1
    19fa:	409a      	lsls	r2, r3
    19fc:	79fb      	ldrb	r3, [r7, #7]
    19fe:	4619      	mov	r1, r3
    1a00:	4819      	ldr	r0, [pc, #100]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    1a02:	4b1b      	ldr	r3, [pc, #108]	; (1a70 <_gpio_set_pin_pull_mode+0xa8>)
    1a04:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1a06:	79ba      	ldrb	r2, [r7, #6]
    1a08:	79fb      	ldrb	r3, [r7, #7]
    1a0a:	4619      	mov	r1, r3
    1a0c:	4816      	ldr	r0, [pc, #88]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    1a0e:	4b19      	ldr	r3, [pc, #100]	; (1a74 <_gpio_set_pin_pull_mode+0xac>)
    1a10:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1a12:	79bb      	ldrb	r3, [r7, #6]
    1a14:	2201      	movs	r2, #1
    1a16:	409a      	lsls	r2, r3
    1a18:	79fb      	ldrb	r3, [r7, #7]
    1a1a:	4619      	mov	r1, r3
    1a1c:	4812      	ldr	r0, [pc, #72]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    1a1e:	4b16      	ldr	r3, [pc, #88]	; (1a78 <_gpio_set_pin_pull_mode+0xb0>)
    1a20:	4798      	blx	r3
		break;
    1a22:	e01c      	b.n	1a5e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1a24:	79bb      	ldrb	r3, [r7, #6]
    1a26:	2201      	movs	r2, #1
    1a28:	409a      	lsls	r2, r3
    1a2a:	79fb      	ldrb	r3, [r7, #7]
    1a2c:	4619      	mov	r1, r3
    1a2e:	480e      	ldr	r0, [pc, #56]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    1a30:	4b0f      	ldr	r3, [pc, #60]	; (1a70 <_gpio_set_pin_pull_mode+0xa8>)
    1a32:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1a34:	79ba      	ldrb	r2, [r7, #6]
    1a36:	79fb      	ldrb	r3, [r7, #7]
    1a38:	4619      	mov	r1, r3
    1a3a:	480b      	ldr	r0, [pc, #44]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    1a3c:	4b0d      	ldr	r3, [pc, #52]	; (1a74 <_gpio_set_pin_pull_mode+0xac>)
    1a3e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1a40:	79bb      	ldrb	r3, [r7, #6]
    1a42:	2201      	movs	r2, #1
    1a44:	409a      	lsls	r2, r3
    1a46:	79fb      	ldrb	r3, [r7, #7]
    1a48:	4619      	mov	r1, r3
    1a4a:	4807      	ldr	r0, [pc, #28]	; (1a68 <_gpio_set_pin_pull_mode+0xa0>)
    1a4c:	4b0b      	ldr	r3, [pc, #44]	; (1a7c <_gpio_set_pin_pull_mode+0xb4>)
    1a4e:	4798      	blx	r3
		break;
    1a50:	e005      	b.n	1a5e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1a52:	2289      	movs	r2, #137	; 0x89
    1a54:	490a      	ldr	r1, [pc, #40]	; (1a80 <_gpio_set_pin_pull_mode+0xb8>)
    1a56:	2000      	movs	r0, #0
    1a58:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <_gpio_set_pin_pull_mode+0xbc>)
    1a5a:	4798      	blx	r3
		break;
    1a5c:	bf00      	nop
	}
}
    1a5e:	bf00      	nop
    1a60:	3708      	adds	r7, #8
    1a62:	46bd      	mov	sp, r7
    1a64:	bd80      	pop	{r7, pc}
    1a66:	bf00      	nop
    1a68:	41008000 	.word	0x41008000
    1a6c:	0000182f 	.word	0x0000182f
    1a70:	0000165b 	.word	0x0000165b
    1a74:	000017eb 	.word	0x000017eb
    1a78:	00001683 	.word	0x00001683
    1a7c:	000016ab 	.word	0x000016ab
    1a80:	00013f5c 	.word	0x00013f5c
    1a84:	000040f5 	.word	0x000040f5

00001a88 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1a88:	b590      	push	{r4, r7, lr}
    1a8a:	b085      	sub	sp, #20
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	6078      	str	r0, [r7, #4]
    1a90:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	095b      	lsrs	r3, r3, #5
    1a96:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	b2db      	uxtb	r3, r3
    1a9c:	f003 031f 	and.w	r3, r3, #31
    1aa0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1aa2:	683b      	ldr	r3, [r7, #0]
    1aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
    1aa8:	d106      	bne.n	1ab8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1aaa:	7bba      	ldrb	r2, [r7, #14]
    1aac:	7bf9      	ldrb	r1, [r7, #15]
    1aae:	2300      	movs	r3, #0
    1ab0:	4812      	ldr	r0, [pc, #72]	; (1afc <_gpio_set_pin_function+0x74>)
    1ab2:	4c13      	ldr	r4, [pc, #76]	; (1b00 <_gpio_set_pin_function+0x78>)
    1ab4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1ab6:	e01d      	b.n	1af4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1ab8:	7bba      	ldrb	r2, [r7, #14]
    1aba:	7bf9      	ldrb	r1, [r7, #15]
    1abc:	2301      	movs	r3, #1
    1abe:	480f      	ldr	r0, [pc, #60]	; (1afc <_gpio_set_pin_function+0x74>)
    1ac0:	4c0f      	ldr	r4, [pc, #60]	; (1b00 <_gpio_set_pin_function+0x78>)
    1ac2:	47a0      	blx	r4
		if (pin & 1) {
    1ac4:	7bbb      	ldrb	r3, [r7, #14]
    1ac6:	f003 0301 	and.w	r3, r3, #1
    1aca:	2b00      	cmp	r3, #0
    1acc:	d009      	beq.n	1ae2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1ace:	7bbb      	ldrb	r3, [r7, #14]
    1ad0:	085b      	lsrs	r3, r3, #1
    1ad2:	b2da      	uxtb	r2, r3
    1ad4:	683b      	ldr	r3, [r7, #0]
    1ad6:	b2db      	uxtb	r3, r3
    1ad8:	7bf9      	ldrb	r1, [r7, #15]
    1ada:	4808      	ldr	r0, [pc, #32]	; (1afc <_gpio_set_pin_function+0x74>)
    1adc:	4c09      	ldr	r4, [pc, #36]	; (1b04 <_gpio_set_pin_function+0x7c>)
    1ade:	47a0      	blx	r4
}
    1ae0:	e008      	b.n	1af4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1ae2:	7bbb      	ldrb	r3, [r7, #14]
    1ae4:	085b      	lsrs	r3, r3, #1
    1ae6:	b2da      	uxtb	r2, r3
    1ae8:	683b      	ldr	r3, [r7, #0]
    1aea:	b2db      	uxtb	r3, r3
    1aec:	7bf9      	ldrb	r1, [r7, #15]
    1aee:	4803      	ldr	r0, [pc, #12]	; (1afc <_gpio_set_pin_function+0x74>)
    1af0:	4c05      	ldr	r4, [pc, #20]	; (1b08 <_gpio_set_pin_function+0x80>)
    1af2:	47a0      	blx	r4
}
    1af4:	bf00      	nop
    1af6:	3714      	adds	r7, #20
    1af8:	46bd      	mov	sp, r7
    1afa:	bd90      	pop	{r4, r7, pc}
    1afc:	41008000 	.word	0x41008000
    1b00:	00001791 	.word	0x00001791
    1b04:	00001733 	.word	0x00001733
    1b08:	000016d3 	.word	0x000016d3

00001b0c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	4603      	mov	r3, r0
    1b14:	460a      	mov	r2, r1
    1b16:	71fb      	strb	r3, [r7, #7]
    1b18:	4613      	mov	r3, r2
    1b1a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1b1c:	79fb      	ldrb	r3, [r7, #7]
    1b1e:	095b      	lsrs	r3, r3, #5
    1b20:	b2d8      	uxtb	r0, r3
    1b22:	79fb      	ldrb	r3, [r7, #7]
    1b24:	f003 031f 	and.w	r3, r3, #31
    1b28:	b2db      	uxtb	r3, r3
    1b2a:	79ba      	ldrb	r2, [r7, #6]
    1b2c:	4619      	mov	r1, r3
    1b2e:	4b03      	ldr	r3, [pc, #12]	; (1b3c <gpio_set_pin_pull_mode+0x30>)
    1b30:	4798      	blx	r3
}
    1b32:	bf00      	nop
    1b34:	3708      	adds	r7, #8
    1b36:	46bd      	mov	sp, r7
    1b38:	bd80      	pop	{r7, pc}
    1b3a:	bf00      	nop
    1b3c:	000019c9 	.word	0x000019c9

00001b40 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b082      	sub	sp, #8
    1b44:	af00      	add	r7, sp, #0
    1b46:	6078      	str	r0, [r7, #4]
    1b48:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1b4a:	6839      	ldr	r1, [r7, #0]
    1b4c:	6878      	ldr	r0, [r7, #4]
    1b4e:	4b03      	ldr	r3, [pc, #12]	; (1b5c <gpio_set_pin_function+0x1c>)
    1b50:	4798      	blx	r3
}
    1b52:	bf00      	nop
    1b54:	3708      	adds	r7, #8
    1b56:	46bd      	mov	sp, r7
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	bf00      	nop
    1b5c:	00001a89 	.word	0x00001a89

00001b60 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
    1b66:	4603      	mov	r3, r0
    1b68:	460a      	mov	r2, r1
    1b6a:	71fb      	strb	r3, [r7, #7]
    1b6c:	4613      	mov	r3, r2
    1b6e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1b70:	79fb      	ldrb	r3, [r7, #7]
    1b72:	095b      	lsrs	r3, r3, #5
    1b74:	b2d8      	uxtb	r0, r3
    1b76:	79fb      	ldrb	r3, [r7, #7]
    1b78:	f003 031f 	and.w	r3, r3, #31
    1b7c:	2201      	movs	r2, #1
    1b7e:	fa02 f303 	lsl.w	r3, r2, r3
    1b82:	79ba      	ldrb	r2, [r7, #6]
    1b84:	4619      	mov	r1, r3
    1b86:	4b03      	ldr	r3, [pc, #12]	; (1b94 <gpio_set_pin_direction+0x34>)
    1b88:	4798      	blx	r3
}
    1b8a:	bf00      	nop
    1b8c:	3708      	adds	r7, #8
    1b8e:	46bd      	mov	sp, r7
    1b90:	bd80      	pop	{r7, pc}
    1b92:	bf00      	nop
    1b94:	0000189d 	.word	0x0000189d

00001b98 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	4603      	mov	r3, r0
    1ba0:	460a      	mov	r2, r1
    1ba2:	71fb      	strb	r3, [r7, #7]
    1ba4:	4613      	mov	r3, r2
    1ba6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1ba8:	79fb      	ldrb	r3, [r7, #7]
    1baa:	095b      	lsrs	r3, r3, #5
    1bac:	b2d8      	uxtb	r0, r3
    1bae:	79fb      	ldrb	r3, [r7, #7]
    1bb0:	f003 031f 	and.w	r3, r3, #31
    1bb4:	2201      	movs	r2, #1
    1bb6:	fa02 f303 	lsl.w	r3, r2, r3
    1bba:	79ba      	ldrb	r2, [r7, #6]
    1bbc:	4619      	mov	r1, r3
    1bbe:	4b03      	ldr	r3, [pc, #12]	; (1bcc <gpio_set_pin_level+0x34>)
    1bc0:	4798      	blx	r3
}
    1bc2:	bf00      	nop
    1bc4:	3708      	adds	r7, #8
    1bc6:	46bd      	mov	sp, r7
    1bc8:	bd80      	pop	{r7, pc}
    1bca:	bf00      	nop
    1bcc:	00001985 	.word	0x00001985

00001bd0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	af00      	add	r7, sp, #0
	_init_chip();
    1bd4:	4b01      	ldr	r3, [pc, #4]	; (1bdc <init_mcu+0xc>)
    1bd6:	4798      	blx	r3
}
    1bd8:	bf00      	nop
    1bda:	bd80      	pop	{r7, pc}
    1bdc:	00004cfd 	.word	0x00004cfd

00001be0 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	b082      	sub	sp, #8
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d004      	beq.n	1bfa <wdt_init+0x1a>
    1bf0:	683b      	ldr	r3, [r7, #0]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d001      	beq.n	1bfa <wdt_init+0x1a>
    1bf6:	2301      	movs	r3, #1
    1bf8:	e000      	b.n	1bfc <wdt_init+0x1c>
    1bfa:	2300      	movs	r3, #0
    1bfc:	f003 0301 	and.w	r3, r3, #1
    1c00:	b2db      	uxtb	r3, r3
    1c02:	2248      	movs	r2, #72	; 0x48
    1c04:	4907      	ldr	r1, [pc, #28]	; (1c24 <wdt_init+0x44>)
    1c06:	4618      	mov	r0, r3
    1c08:	4b07      	ldr	r3, [pc, #28]	; (1c28 <wdt_init+0x48>)
    1c0a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	683a      	ldr	r2, [r7, #0]
    1c10:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	4618      	mov	r0, r3
    1c16:	4b05      	ldr	r3, [pc, #20]	; (1c2c <wdt_init+0x4c>)
    1c18:	4798      	blx	r3
    1c1a:	4603      	mov	r3, r0
}
    1c1c:	4618      	mov	r0, r3
    1c1e:	3708      	adds	r7, #8
    1c20:	46bd      	mov	sp, r7
    1c22:	bd80      	pop	{r7, pc}
    1c24:	00013f78 	.word	0x00013f78
    1c28:	000040f5 	.word	0x000040f5
    1c2c:	0000b795 	.word	0x0000b795

00001c30 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1c30:	b580      	push	{r7, lr}
    1c32:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1c34:	4804      	ldr	r0, [pc, #16]	; (1c48 <CRC_CALC_init+0x18>)
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <CRC_CALC_init+0x1c>)
    1c38:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1c3a:	4905      	ldr	r1, [pc, #20]	; (1c50 <CRC_CALC_init+0x20>)
    1c3c:	4805      	ldr	r0, [pc, #20]	; (1c54 <CRC_CALC_init+0x24>)
    1c3e:	4b06      	ldr	r3, [pc, #24]	; (1c58 <CRC_CALC_init+0x28>)
    1c40:	4798      	blx	r3
}
    1c42:	bf00      	nop
    1c44:	bd80      	pop	{r7, pc}
    1c46:	bf00      	nop
    1c48:	40000800 	.word	0x40000800
    1c4c:	00001453 	.word	0x00001453
    1c50:	41002000 	.word	0x41002000
    1c54:	2000a184 	.word	0x2000a184
    1c58:	00002a19 	.word	0x00002a19

00001c5c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c60:	2244      	movs	r2, #68	; 0x44
    1c62:	2104      	movs	r1, #4
    1c64:	483f      	ldr	r0, [pc, #252]	; (1d64 <EXTERNAL_IRQ_0_init+0x108>)
    1c66:	4b40      	ldr	r3, [pc, #256]	; (1d68 <EXTERNAL_IRQ_0_init+0x10c>)
    1c68:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1c6a:	4840      	ldr	r0, [pc, #256]	; (1d6c <EXTERNAL_IRQ_0_init+0x110>)
    1c6c:	4b40      	ldr	r3, [pc, #256]	; (1d70 <EXTERNAL_IRQ_0_init+0x114>)
    1c6e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1c70:	2101      	movs	r1, #1
    1c72:	2040      	movs	r0, #64	; 0x40
    1c74:	4b3f      	ldr	r3, [pc, #252]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1c76:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1c78:	2100      	movs	r1, #0
    1c7a:	2040      	movs	r0, #64	; 0x40
    1c7c:	4b3e      	ldr	r3, [pc, #248]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1c7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1c80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1c84:	2040      	movs	r0, #64	; 0x40
    1c86:	4b3d      	ldr	r3, [pc, #244]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1c88:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1c8a:	2101      	movs	r1, #1
    1c8c:	2021      	movs	r0, #33	; 0x21
    1c8e:	4b39      	ldr	r3, [pc, #228]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1c90:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1c92:	2100      	movs	r1, #0
    1c94:	2021      	movs	r0, #33	; 0x21
    1c96:	4b38      	ldr	r3, [pc, #224]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1c98:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1c9a:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1c9e:	2021      	movs	r0, #33	; 0x21
    1ca0:	4b36      	ldr	r3, [pc, #216]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1ca2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1ca4:	2101      	movs	r1, #1
    1ca6:	2003      	movs	r0, #3
    1ca8:	4b32      	ldr	r3, [pc, #200]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1caa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1cac:	2102      	movs	r1, #2
    1cae:	2003      	movs	r0, #3
    1cb0:	4b31      	ldr	r3, [pc, #196]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1cb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1cb4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1cb8:	2003      	movs	r0, #3
    1cba:	4b30      	ldr	r3, [pc, #192]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1cbc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1cbe:	2101      	movs	r1, #1
    1cc0:	2004      	movs	r0, #4
    1cc2:	4b2c      	ldr	r3, [pc, #176]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1cc4:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1cc6:	2102      	movs	r1, #2
    1cc8:	2004      	movs	r0, #4
    1cca:	4b2b      	ldr	r3, [pc, #172]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1ccc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1cce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1cd2:	2004      	movs	r0, #4
    1cd4:	4b29      	ldr	r3, [pc, #164]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1cd6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1cd8:	2101      	movs	r1, #1
    1cda:	2005      	movs	r0, #5
    1cdc:	4b25      	ldr	r3, [pc, #148]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1cde:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1ce0:	2102      	movs	r1, #2
    1ce2:	2005      	movs	r0, #5
    1ce4:	4b24      	ldr	r3, [pc, #144]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1ce6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1ce8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1cec:	2005      	movs	r0, #5
    1cee:	4b23      	ldr	r3, [pc, #140]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1cf0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1cf2:	2101      	movs	r1, #1
    1cf4:	2056      	movs	r0, #86	; 0x56
    1cf6:	4b1f      	ldr	r3, [pc, #124]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1cf8:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1cfa:	2102      	movs	r1, #2
    1cfc:	2056      	movs	r0, #86	; 0x56
    1cfe:	4b1e      	ldr	r3, [pc, #120]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1d00:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1d02:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1d06:	2056      	movs	r0, #86	; 0x56
    1d08:	4b1c      	ldr	r3, [pc, #112]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1d0a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1d0c:	2101      	movs	r1, #1
    1d0e:	2057      	movs	r0, #87	; 0x57
    1d10:	4b18      	ldr	r3, [pc, #96]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1d12:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1d14:	2102      	movs	r1, #2
    1d16:	2057      	movs	r0, #87	; 0x57
    1d18:	4b17      	ldr	r3, [pc, #92]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1d1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1d1c:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1d20:	2057      	movs	r0, #87	; 0x57
    1d22:	4b16      	ldr	r3, [pc, #88]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1d24:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1d26:	2101      	movs	r1, #1
    1d28:	2028      	movs	r0, #40	; 0x28
    1d2a:	4b12      	ldr	r3, [pc, #72]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1d2c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1d2e:	2100      	movs	r1, #0
    1d30:	2028      	movs	r0, #40	; 0x28
    1d32:	4b11      	ldr	r3, [pc, #68]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1d34:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1d36:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1d3a:	2028      	movs	r0, #40	; 0x28
    1d3c:	4b0f      	ldr	r3, [pc, #60]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1d3e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1d40:	2101      	movs	r1, #1
    1d42:	2029      	movs	r0, #41	; 0x29
    1d44:	4b0b      	ldr	r3, [pc, #44]	; (1d74 <EXTERNAL_IRQ_0_init+0x118>)
    1d46:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1d48:	2100      	movs	r1, #0
    1d4a:	2029      	movs	r0, #41	; 0x29
    1d4c:	4b0a      	ldr	r3, [pc, #40]	; (1d78 <EXTERNAL_IRQ_0_init+0x11c>)
    1d4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1d50:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1d54:	2029      	movs	r0, #41	; 0x29
    1d56:	4b09      	ldr	r3, [pc, #36]	; (1d7c <EXTERNAL_IRQ_0_init+0x120>)
    1d58:	4798      	blx	r3

	ext_irq_init();
    1d5a:	4b09      	ldr	r3, [pc, #36]	; (1d80 <EXTERNAL_IRQ_0_init+0x124>)
    1d5c:	4798      	blx	r3
}
    1d5e:	bf00      	nop
    1d60:	bd80      	pop	{r7, pc}
    1d62:	bf00      	nop
    1d64:	40001c00 	.word	0x40001c00
    1d68:	000012ed 	.word	0x000012ed
    1d6c:	40000800 	.word	0x40000800
    1d70:	000013d3 	.word	0x000013d3
    1d74:	00001b61 	.word	0x00001b61
    1d78:	00001b0d 	.word	0x00001b0d
    1d7c:	00001b41 	.word	0x00001b41
    1d80:	00002ae1 	.word	0x00002ae1

00001d84 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1d84:	b580      	push	{r7, lr}
    1d86:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d88:	2244      	movs	r2, #68	; 0x44
    1d8a:	210b      	movs	r1, #11
    1d8c:	4807      	ldr	r0, [pc, #28]	; (1dac <EVENT_SYSTEM_0_init+0x28>)
    1d8e:	4b08      	ldr	r3, [pc, #32]	; (1db0 <EVENT_SYSTEM_0_init+0x2c>)
    1d90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d92:	2244      	movs	r2, #68	; 0x44
    1d94:	210c      	movs	r1, #12
    1d96:	4805      	ldr	r0, [pc, #20]	; (1dac <EVENT_SYSTEM_0_init+0x28>)
    1d98:	4b05      	ldr	r3, [pc, #20]	; (1db0 <EVENT_SYSTEM_0_init+0x2c>)
    1d9a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1d9c:	4805      	ldr	r0, [pc, #20]	; (1db4 <EVENT_SYSTEM_0_init+0x30>)
    1d9e:	4b06      	ldr	r3, [pc, #24]	; (1db8 <EVENT_SYSTEM_0_init+0x34>)
    1da0:	4798      	blx	r3

	event_system_init();
    1da2:	4b06      	ldr	r3, [pc, #24]	; (1dbc <EVENT_SYSTEM_0_init+0x38>)
    1da4:	4798      	blx	r3
}
    1da6:	bf00      	nop
    1da8:	bd80      	pop	{r7, pc}
    1daa:	bf00      	nop
    1dac:	40001c00 	.word	0x40001c00
    1db0:	000012ed 	.word	0x000012ed
    1db4:	40000800 	.word	0x40000800
    1db8:	00001473 	.word	0x00001473
    1dbc:	00002acd 	.word	0x00002acd

00001dc0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1dc4:	2101      	movs	r1, #1
    1dc6:	202b      	movs	r0, #43	; 0x2b
    1dc8:	4b2b      	ldr	r3, [pc, #172]	; (1e78 <QSPI_N25Q256_PORT_init+0xb8>)
    1dca:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1dcc:	2100      	movs	r1, #0
    1dce:	202b      	movs	r0, #43	; 0x2b
    1dd0:	4b2a      	ldr	r3, [pc, #168]	; (1e7c <QSPI_N25Q256_PORT_init+0xbc>)
    1dd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1dd4:	492a      	ldr	r1, [pc, #168]	; (1e80 <QSPI_N25Q256_PORT_init+0xc0>)
    1dd6:	202b      	movs	r0, #43	; 0x2b
    1dd8:	4b2a      	ldr	r3, [pc, #168]	; (1e84 <QSPI_N25Q256_PORT_init+0xc4>)
    1dda:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1ddc:	2102      	movs	r1, #2
    1dde:	2008      	movs	r0, #8
    1de0:	4b25      	ldr	r3, [pc, #148]	; (1e78 <QSPI_N25Q256_PORT_init+0xb8>)
    1de2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1de4:	2100      	movs	r1, #0
    1de6:	2008      	movs	r0, #8
    1de8:	4b27      	ldr	r3, [pc, #156]	; (1e88 <QSPI_N25Q256_PORT_init+0xc8>)
    1dea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1dec:	2100      	movs	r1, #0
    1dee:	2008      	movs	r0, #8
    1df0:	4b22      	ldr	r3, [pc, #136]	; (1e7c <QSPI_N25Q256_PORT_init+0xbc>)
    1df2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1df4:	4925      	ldr	r1, [pc, #148]	; (1e8c <QSPI_N25Q256_PORT_init+0xcc>)
    1df6:	2008      	movs	r0, #8
    1df8:	4b22      	ldr	r3, [pc, #136]	; (1e84 <QSPI_N25Q256_PORT_init+0xc4>)
    1dfa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1dfc:	2102      	movs	r1, #2
    1dfe:	2009      	movs	r0, #9
    1e00:	4b1d      	ldr	r3, [pc, #116]	; (1e78 <QSPI_N25Q256_PORT_init+0xb8>)
    1e02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1e04:	2100      	movs	r1, #0
    1e06:	2009      	movs	r0, #9
    1e08:	4b1f      	ldr	r3, [pc, #124]	; (1e88 <QSPI_N25Q256_PORT_init+0xc8>)
    1e0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1e0c:	2100      	movs	r1, #0
    1e0e:	2009      	movs	r0, #9
    1e10:	4b1a      	ldr	r3, [pc, #104]	; (1e7c <QSPI_N25Q256_PORT_init+0xbc>)
    1e12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1e14:	491e      	ldr	r1, [pc, #120]	; (1e90 <QSPI_N25Q256_PORT_init+0xd0>)
    1e16:	2009      	movs	r0, #9
    1e18:	4b1a      	ldr	r3, [pc, #104]	; (1e84 <QSPI_N25Q256_PORT_init+0xc4>)
    1e1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1e1c:	2102      	movs	r1, #2
    1e1e:	200a      	movs	r0, #10
    1e20:	4b15      	ldr	r3, [pc, #84]	; (1e78 <QSPI_N25Q256_PORT_init+0xb8>)
    1e22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1e24:	2100      	movs	r1, #0
    1e26:	200a      	movs	r0, #10
    1e28:	4b17      	ldr	r3, [pc, #92]	; (1e88 <QSPI_N25Q256_PORT_init+0xc8>)
    1e2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1e2c:	2100      	movs	r1, #0
    1e2e:	200a      	movs	r0, #10
    1e30:	4b12      	ldr	r3, [pc, #72]	; (1e7c <QSPI_N25Q256_PORT_init+0xbc>)
    1e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1e34:	4917      	ldr	r1, [pc, #92]	; (1e94 <QSPI_N25Q256_PORT_init+0xd4>)
    1e36:	200a      	movs	r0, #10
    1e38:	4b12      	ldr	r3, [pc, #72]	; (1e84 <QSPI_N25Q256_PORT_init+0xc4>)
    1e3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1e3c:	2102      	movs	r1, #2
    1e3e:	200b      	movs	r0, #11
    1e40:	4b0d      	ldr	r3, [pc, #52]	; (1e78 <QSPI_N25Q256_PORT_init+0xb8>)
    1e42:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1e44:	2100      	movs	r1, #0
    1e46:	200b      	movs	r0, #11
    1e48:	4b0f      	ldr	r3, [pc, #60]	; (1e88 <QSPI_N25Q256_PORT_init+0xc8>)
    1e4a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1e4c:	2100      	movs	r1, #0
    1e4e:	200b      	movs	r0, #11
    1e50:	4b0a      	ldr	r3, [pc, #40]	; (1e7c <QSPI_N25Q256_PORT_init+0xbc>)
    1e52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1e54:	4910      	ldr	r1, [pc, #64]	; (1e98 <QSPI_N25Q256_PORT_init+0xd8>)
    1e56:	200b      	movs	r0, #11
    1e58:	4b0a      	ldr	r3, [pc, #40]	; (1e84 <QSPI_N25Q256_PORT_init+0xc4>)
    1e5a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1e5c:	2101      	movs	r1, #1
    1e5e:	202a      	movs	r0, #42	; 0x2a
    1e60:	4b05      	ldr	r3, [pc, #20]	; (1e78 <QSPI_N25Q256_PORT_init+0xb8>)
    1e62:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1e64:	2100      	movs	r1, #0
    1e66:	202a      	movs	r0, #42	; 0x2a
    1e68:	4b04      	ldr	r3, [pc, #16]	; (1e7c <QSPI_N25Q256_PORT_init+0xbc>)
    1e6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1e6c:	490b      	ldr	r1, [pc, #44]	; (1e9c <QSPI_N25Q256_PORT_init+0xdc>)
    1e6e:	202a      	movs	r0, #42	; 0x2a
    1e70:	4b04      	ldr	r3, [pc, #16]	; (1e84 <QSPI_N25Q256_PORT_init+0xc4>)
    1e72:	4798      	blx	r3
}
    1e74:	bf00      	nop
    1e76:	bd80      	pop	{r7, pc}
    1e78:	00001b61 	.word	0x00001b61
    1e7c:	00001b0d 	.word	0x00001b0d
    1e80:	002b0007 	.word	0x002b0007
    1e84:	00001b41 	.word	0x00001b41
    1e88:	00001b99 	.word	0x00001b99
    1e8c:	00080007 	.word	0x00080007
    1e90:	00090007 	.word	0x00090007
    1e94:	000a0007 	.word	0x000a0007
    1e98:	000b0007 	.word	0x000b0007
    1e9c:	002a0007 	.word	0x002a0007

00001ea0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1ea4:	4805      	ldr	r0, [pc, #20]	; (1ebc <QSPI_N25Q256_CLOCK_init+0x1c>)
    1ea6:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <QSPI_N25Q256_CLOCK_init+0x20>)
    1ea8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1eaa:	4804      	ldr	r0, [pc, #16]	; (1ebc <QSPI_N25Q256_CLOCK_init+0x1c>)
    1eac:	4b05      	ldr	r3, [pc, #20]	; (1ec4 <QSPI_N25Q256_CLOCK_init+0x24>)
    1eae:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1eb0:	4802      	ldr	r0, [pc, #8]	; (1ebc <QSPI_N25Q256_CLOCK_init+0x1c>)
    1eb2:	4b05      	ldr	r3, [pc, #20]	; (1ec8 <QSPI_N25Q256_CLOCK_init+0x28>)
    1eb4:	4798      	blx	r3
}
    1eb6:	bf00      	nop
    1eb8:	bd80      	pop	{r7, pc}
    1eba:	bf00      	nop
    1ebc:	40000800 	.word	0x40000800
    1ec0:	00001333 	.word	0x00001333
    1ec4:	00001373 	.word	0x00001373
    1ec8:	00001553 	.word	0x00001553

00001ecc <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1ed0:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <QSPI_N25Q256_init+0x18>)
    1ed2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1ed4:	4904      	ldr	r1, [pc, #16]	; (1ee8 <QSPI_N25Q256_init+0x1c>)
    1ed6:	4805      	ldr	r0, [pc, #20]	; (1eec <QSPI_N25Q256_init+0x20>)
    1ed8:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <QSPI_N25Q256_init+0x24>)
    1eda:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1edc:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <QSPI_N25Q256_init+0x28>)
    1ede:	4798      	blx	r3
}
    1ee0:	bf00      	nop
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	00001ea1 	.word	0x00001ea1
    1ee8:	42003400 	.word	0x42003400
    1eec:	2000a018 	.word	0x2000a018
    1ef0:	00002f51 	.word	0x00002f51
    1ef4:	00001dc1 	.word	0x00001dc1

00001ef8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1efc:	4802      	ldr	r0, [pc, #8]	; (1f08 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1efe:	4b03      	ldr	r3, [pc, #12]	; (1f0c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1f00:	4798      	blx	r3
}
    1f02:	bf00      	nop
    1f04:	bd80      	pop	{r7, pc}
    1f06:	bf00      	nop
    1f08:	40000800 	.word	0x40000800
    1f0c:	000013b3 	.word	0x000013b3

00001f10 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1f14:	4b03      	ldr	r3, [pc, #12]	; (1f24 <DATETIME_CLOCK_init+0x14>)
    1f16:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1f18:	4903      	ldr	r1, [pc, #12]	; (1f28 <DATETIME_CLOCK_init+0x18>)
    1f1a:	4804      	ldr	r0, [pc, #16]	; (1f2c <DATETIME_CLOCK_init+0x1c>)
    1f1c:	4b04      	ldr	r3, [pc, #16]	; (1f30 <DATETIME_CLOCK_init+0x20>)
    1f1e:	4798      	blx	r3
}
    1f20:	bf00      	nop
    1f22:	bd80      	pop	{r7, pc}
    1f24:	00001ef9 	.word	0x00001ef9
    1f28:	40002400 	.word	0x40002400
    1f2c:	2000a160 	.word	0x2000a160
    1f30:	000028bd 	.word	0x000028bd

00001f34 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1f38:	2101      	movs	r1, #1
    1f3a:	2010      	movs	r0, #16
    1f3c:	4b07      	ldr	r3, [pc, #28]	; (1f5c <I2C_HEATERS_PORT_init+0x28>)
    1f3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1f40:	4907      	ldr	r1, [pc, #28]	; (1f60 <I2C_HEATERS_PORT_init+0x2c>)
    1f42:	2010      	movs	r0, #16
    1f44:	4b07      	ldr	r3, [pc, #28]	; (1f64 <I2C_HEATERS_PORT_init+0x30>)
    1f46:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1f48:	2101      	movs	r1, #1
    1f4a:	2011      	movs	r0, #17
    1f4c:	4b03      	ldr	r3, [pc, #12]	; (1f5c <I2C_HEATERS_PORT_init+0x28>)
    1f4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1f50:	4905      	ldr	r1, [pc, #20]	; (1f68 <I2C_HEATERS_PORT_init+0x34>)
    1f52:	2011      	movs	r0, #17
    1f54:	4b03      	ldr	r3, [pc, #12]	; (1f64 <I2C_HEATERS_PORT_init+0x30>)
    1f56:	4798      	blx	r3
}
    1f58:	bf00      	nop
    1f5a:	bd80      	pop	{r7, pc}
    1f5c:	00001b0d 	.word	0x00001b0d
    1f60:	00100002 	.word	0x00100002
    1f64:	00001b41 	.word	0x00001b41
    1f68:	00110002 	.word	0x00110002

00001f6c <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1f6c:	b580      	push	{r7, lr}
    1f6e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f70:	2242      	movs	r2, #66	; 0x42
    1f72:	2108      	movs	r1, #8
    1f74:	4806      	ldr	r0, [pc, #24]	; (1f90 <I2C_HEATERS_CLOCK_init+0x24>)
    1f76:	4b07      	ldr	r3, [pc, #28]	; (1f94 <I2C_HEATERS_CLOCK_init+0x28>)
    1f78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f7a:	224a      	movs	r2, #74	; 0x4a
    1f7c:	2103      	movs	r1, #3
    1f7e:	4804      	ldr	r0, [pc, #16]	; (1f90 <I2C_HEATERS_CLOCK_init+0x24>)
    1f80:	4b04      	ldr	r3, [pc, #16]	; (1f94 <I2C_HEATERS_CLOCK_init+0x28>)
    1f82:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1f84:	4804      	ldr	r0, [pc, #16]	; (1f98 <I2C_HEATERS_CLOCK_init+0x2c>)
    1f86:	4b05      	ldr	r3, [pc, #20]	; (1f9c <I2C_HEATERS_CLOCK_init+0x30>)
    1f88:	4798      	blx	r3
}
    1f8a:	bf00      	nop
    1f8c:	bd80      	pop	{r7, pc}
    1f8e:	bf00      	nop
    1f90:	40001c00 	.word	0x40001c00
    1f94:	000012ed 	.word	0x000012ed
    1f98:	40000800 	.word	0x40000800
    1f9c:	000013f3 	.word	0x000013f3

00001fa0 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1fa4:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <I2C_HEATERS_init+0x18>)
    1fa6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1fa8:	4904      	ldr	r1, [pc, #16]	; (1fbc <I2C_HEATERS_init+0x1c>)
    1faa:	4805      	ldr	r0, [pc, #20]	; (1fc0 <I2C_HEATERS_init+0x20>)
    1fac:	4b05      	ldr	r3, [pc, #20]	; (1fc4 <I2C_HEATERS_init+0x24>)
    1fae:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1fb0:	4b05      	ldr	r3, [pc, #20]	; (1fc8 <I2C_HEATERS_init+0x28>)
    1fb2:	4798      	blx	r3
}
    1fb4:	bf00      	nop
    1fb6:	bd80      	pop	{r7, pc}
    1fb8:	00001f6d 	.word	0x00001f6d
    1fbc:	40003400 	.word	0x40003400
    1fc0:	2000a0b8 	.word	0x2000a0b8
    1fc4:	00002da9 	.word	0x00002da9
    1fc8:	00001f35 	.word	0x00001f35

00001fcc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1fd0:	2100      	movs	r1, #0
    1fd2:	203b      	movs	r0, #59	; 0x3b
    1fd4:	4b11      	ldr	r3, [pc, #68]	; (201c <SPI_TEMP_PORT_init+0x50>)
    1fd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1fd8:	2102      	movs	r1, #2
    1fda:	203b      	movs	r0, #59	; 0x3b
    1fdc:	4b10      	ldr	r3, [pc, #64]	; (2020 <SPI_TEMP_PORT_init+0x54>)
    1fde:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1fe0:	4910      	ldr	r1, [pc, #64]	; (2024 <SPI_TEMP_PORT_init+0x58>)
    1fe2:	203b      	movs	r0, #59	; 0x3b
    1fe4:	4b10      	ldr	r3, [pc, #64]	; (2028 <SPI_TEMP_PORT_init+0x5c>)
    1fe6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1fe8:	2100      	movs	r1, #0
    1fea:	203a      	movs	r0, #58	; 0x3a
    1fec:	4b0b      	ldr	r3, [pc, #44]	; (201c <SPI_TEMP_PORT_init+0x50>)
    1fee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1ff0:	2102      	movs	r1, #2
    1ff2:	203a      	movs	r0, #58	; 0x3a
    1ff4:	4b0a      	ldr	r3, [pc, #40]	; (2020 <SPI_TEMP_PORT_init+0x54>)
    1ff6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1ff8:	490c      	ldr	r1, [pc, #48]	; (202c <SPI_TEMP_PORT_init+0x60>)
    1ffa:	203a      	movs	r0, #58	; 0x3a
    1ffc:	4b0a      	ldr	r3, [pc, #40]	; (2028 <SPI_TEMP_PORT_init+0x5c>)
    1ffe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2000:	2101      	movs	r1, #1
    2002:	203c      	movs	r0, #60	; 0x3c
    2004:	4b06      	ldr	r3, [pc, #24]	; (2020 <SPI_TEMP_PORT_init+0x54>)
    2006:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2008:	2100      	movs	r1, #0
    200a:	203c      	movs	r0, #60	; 0x3c
    200c:	4b08      	ldr	r3, [pc, #32]	; (2030 <SPI_TEMP_PORT_init+0x64>)
    200e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2010:	4908      	ldr	r1, [pc, #32]	; (2034 <SPI_TEMP_PORT_init+0x68>)
    2012:	203c      	movs	r0, #60	; 0x3c
    2014:	4b04      	ldr	r3, [pc, #16]	; (2028 <SPI_TEMP_PORT_init+0x5c>)
    2016:	4798      	blx	r3
}
    2018:	bf00      	nop
    201a:	bd80      	pop	{r7, pc}
    201c:	00001b99 	.word	0x00001b99
    2020:	00001b61 	.word	0x00001b61
    2024:	003b0003 	.word	0x003b0003
    2028:	00001b41 	.word	0x00001b41
    202c:	003a0003 	.word	0x003a0003
    2030:	00001b0d 	.word	0x00001b0d
    2034:	003c0003 	.word	0x003c0003

00002038 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2038:	b580      	push	{r7, lr}
    203a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    203c:	2245      	movs	r2, #69	; 0x45
    203e:	2122      	movs	r1, #34	; 0x22
    2040:	4806      	ldr	r0, [pc, #24]	; (205c <SPI_TEMP_CLOCK_init+0x24>)
    2042:	4b07      	ldr	r3, [pc, #28]	; (2060 <SPI_TEMP_CLOCK_init+0x28>)
    2044:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2046:	224a      	movs	r2, #74	; 0x4a
    2048:	2103      	movs	r1, #3
    204a:	4804      	ldr	r0, [pc, #16]	; (205c <SPI_TEMP_CLOCK_init+0x24>)
    204c:	4b04      	ldr	r3, [pc, #16]	; (2060 <SPI_TEMP_CLOCK_init+0x28>)
    204e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    2050:	4804      	ldr	r0, [pc, #16]	; (2064 <SPI_TEMP_CLOCK_init+0x2c>)
    2052:	4b05      	ldr	r3, [pc, #20]	; (2068 <SPI_TEMP_CLOCK_init+0x30>)
    2054:	4798      	blx	r3
}
    2056:	bf00      	nop
    2058:	bd80      	pop	{r7, pc}
    205a:	bf00      	nop
    205c:	40001c00 	.word	0x40001c00
    2060:	000012ed 	.word	0x000012ed
    2064:	40000800 	.word	0x40000800
    2068:	00001573 	.word	0x00001573

0000206c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    206c:	b580      	push	{r7, lr}
    206e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2070:	4b05      	ldr	r3, [pc, #20]	; (2088 <SPI_TEMP_init+0x1c>)
    2072:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    2074:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2078:	4804      	ldr	r0, [pc, #16]	; (208c <SPI_TEMP_init+0x20>)
    207a:	4b05      	ldr	r3, [pc, #20]	; (2090 <SPI_TEMP_init+0x24>)
    207c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    207e:	4b05      	ldr	r3, [pc, #20]	; (2094 <SPI_TEMP_init+0x28>)
    2080:	4798      	blx	r3
}
    2082:	bf00      	nop
    2084:	bd80      	pop	{r7, pc}
    2086:	bf00      	nop
    2088:	00002039 	.word	0x00002039
    208c:	20009fc0 	.word	0x20009fc0
    2090:	00003061 	.word	0x00003061
    2094:	00001fcd 	.word	0x00001fcd

00002098 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    2098:	b580      	push	{r7, lr}
    209a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    209c:	2100      	movs	r1, #0
    209e:	2017      	movs	r0, #23
    20a0:	4b07      	ldr	r3, [pc, #28]	; (20c0 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    20a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    20a4:	4907      	ldr	r1, [pc, #28]	; (20c4 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    20a6:	2017      	movs	r0, #23
    20a8:	4b07      	ldr	r3, [pc, #28]	; (20c8 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    20aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    20ac:	2100      	movs	r1, #0
    20ae:	2016      	movs	r0, #22
    20b0:	4b03      	ldr	r3, [pc, #12]	; (20c0 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    20b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    20b4:	4905      	ldr	r1, [pc, #20]	; (20cc <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    20b6:	2016      	movs	r0, #22
    20b8:	4b03      	ldr	r3, [pc, #12]	; (20c8 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    20ba:	4798      	blx	r3
}
    20bc:	bf00      	nop
    20be:	bd80      	pop	{r7, pc}
    20c0:	00001b0d 	.word	0x00001b0d
    20c4:	00170003 	.word	0x00170003
    20c8:	00001b41 	.word	0x00001b41
    20cc:	00160003 	.word	0x00160003

000020d0 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20d4:	2244      	movs	r2, #68	; 0x44
    20d6:	2123      	movs	r1, #35	; 0x23
    20d8:	4806      	ldr	r0, [pc, #24]	; (20f4 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    20da:	4b07      	ldr	r3, [pc, #28]	; (20f8 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    20dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20de:	224a      	movs	r2, #74	; 0x4a
    20e0:	2103      	movs	r1, #3
    20e2:	4804      	ldr	r0, [pc, #16]	; (20f4 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    20e4:	4b04      	ldr	r3, [pc, #16]	; (20f8 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    20e6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    20e8:	4804      	ldr	r0, [pc, #16]	; (20fc <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    20ec:	4798      	blx	r3
}
    20ee:	bf00      	nop
    20f0:	bd80      	pop	{r7, pc}
    20f2:	bf00      	nop
    20f4:	40001c00 	.word	0x40001c00
    20f8:	000012ed 	.word	0x000012ed
    20fc:	40000800 	.word	0x40000800
    2100:	00001593 	.word	0x00001593

00002104 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    2104:	b580      	push	{r7, lr}
    2106:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2108:	4b04      	ldr	r3, [pc, #16]	; (211c <I2C_FLAPPER_VALVE_init+0x18>)
    210a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <I2C_FLAPPER_VALVE_init+0x1c>)
    210e:	4805      	ldr	r0, [pc, #20]	; (2124 <I2C_FLAPPER_VALVE_init+0x20>)
    2110:	4b05      	ldr	r3, [pc, #20]	; (2128 <I2C_FLAPPER_VALVE_init+0x24>)
    2112:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    2114:	4b05      	ldr	r3, [pc, #20]	; (212c <I2C_FLAPPER_VALVE_init+0x28>)
    2116:	4798      	blx	r3
}
    2118:	bf00      	nop
    211a:	bd80      	pop	{r7, pc}
    211c:	000020d1 	.word	0x000020d1
    2120:	43000400 	.word	0x43000400
    2124:	2000a05c 	.word	0x2000a05c
    2128:	00002da9 	.word	0x00002da9
    212c:	00002099 	.word	0x00002099

00002130 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2130:	b580      	push	{r7, lr}
    2132:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2134:	2100      	movs	r1, #0
    2136:	2044      	movs	r0, #68	; 0x44
    2138:	4b11      	ldr	r3, [pc, #68]	; (2180 <SPI_HI3593_PORT_init+0x50>)
    213a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    213c:	2102      	movs	r1, #2
    213e:	2044      	movs	r0, #68	; 0x44
    2140:	4b10      	ldr	r3, [pc, #64]	; (2184 <SPI_HI3593_PORT_init+0x54>)
    2142:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2144:	4910      	ldr	r1, [pc, #64]	; (2188 <SPI_HI3593_PORT_init+0x58>)
    2146:	2044      	movs	r0, #68	; 0x44
    2148:	4b10      	ldr	r3, [pc, #64]	; (218c <SPI_HI3593_PORT_init+0x5c>)
    214a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    214c:	2100      	movs	r1, #0
    214e:	2045      	movs	r0, #69	; 0x45
    2150:	4b0b      	ldr	r3, [pc, #44]	; (2180 <SPI_HI3593_PORT_init+0x50>)
    2152:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    2154:	2102      	movs	r1, #2
    2156:	2045      	movs	r0, #69	; 0x45
    2158:	4b0a      	ldr	r3, [pc, #40]	; (2184 <SPI_HI3593_PORT_init+0x54>)
    215a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    215c:	490c      	ldr	r1, [pc, #48]	; (2190 <SPI_HI3593_PORT_init+0x60>)
    215e:	2045      	movs	r0, #69	; 0x45
    2160:	4b0a      	ldr	r3, [pc, #40]	; (218c <SPI_HI3593_PORT_init+0x5c>)
    2162:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    2164:	2101      	movs	r1, #1
    2166:	2047      	movs	r0, #71	; 0x47
    2168:	4b06      	ldr	r3, [pc, #24]	; (2184 <SPI_HI3593_PORT_init+0x54>)
    216a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    216c:	2100      	movs	r1, #0
    216e:	2047      	movs	r0, #71	; 0x47
    2170:	4b08      	ldr	r3, [pc, #32]	; (2194 <SPI_HI3593_PORT_init+0x64>)
    2172:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    2174:	4908      	ldr	r1, [pc, #32]	; (2198 <SPI_HI3593_PORT_init+0x68>)
    2176:	2047      	movs	r0, #71	; 0x47
    2178:	4b04      	ldr	r3, [pc, #16]	; (218c <SPI_HI3593_PORT_init+0x5c>)
    217a:	4798      	blx	r3
}
    217c:	bf00      	nop
    217e:	bd80      	pop	{r7, pc}
    2180:	00001b99 	.word	0x00001b99
    2184:	00001b61 	.word	0x00001b61
    2188:	00440002 	.word	0x00440002
    218c:	00001b41 	.word	0x00001b41
    2190:	00450002 	.word	0x00450002
    2194:	00001b0d 	.word	0x00001b0d
    2198:	00470002 	.word	0x00470002

0000219c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    219c:	b580      	push	{r7, lr}
    219e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21a0:	2242      	movs	r2, #66	; 0x42
    21a2:	2124      	movs	r1, #36	; 0x24
    21a4:	4806      	ldr	r0, [pc, #24]	; (21c0 <SPI_HI3593_CLOCK_init+0x24>)
    21a6:	4b07      	ldr	r3, [pc, #28]	; (21c4 <SPI_HI3593_CLOCK_init+0x28>)
    21a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21aa:	224a      	movs	r2, #74	; 0x4a
    21ac:	2103      	movs	r1, #3
    21ae:	4804      	ldr	r0, [pc, #16]	; (21c0 <SPI_HI3593_CLOCK_init+0x24>)
    21b0:	4b04      	ldr	r3, [pc, #16]	; (21c4 <SPI_HI3593_CLOCK_init+0x28>)
    21b2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    21b4:	4804      	ldr	r0, [pc, #16]	; (21c8 <SPI_HI3593_CLOCK_init+0x2c>)
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <SPI_HI3593_CLOCK_init+0x30>)
    21b8:	4798      	blx	r3
}
    21ba:	bf00      	nop
    21bc:	bd80      	pop	{r7, pc}
    21be:	bf00      	nop
    21c0:	40001c00 	.word	0x40001c00
    21c4:	000012ed 	.word	0x000012ed
    21c8:	40000800 	.word	0x40000800
    21cc:	000015b3 	.word	0x000015b3

000021d0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <SPI_HI3593_init+0x18>)
    21d6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    21d8:	4904      	ldr	r1, [pc, #16]	; (21ec <SPI_HI3593_init+0x1c>)
    21da:	4805      	ldr	r0, [pc, #20]	; (21f0 <SPI_HI3593_init+0x20>)
    21dc:	4b05      	ldr	r3, [pc, #20]	; (21f4 <SPI_HI3593_init+0x24>)
    21de:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    21e0:	4b05      	ldr	r3, [pc, #20]	; (21f8 <SPI_HI3593_init+0x28>)
    21e2:	4798      	blx	r3
}
    21e4:	bf00      	nop
    21e6:	bd80      	pop	{r7, pc}
    21e8:	0000219d 	.word	0x0000219d
    21ec:	43000800 	.word	0x43000800
    21f0:	20009fa8 	.word	0x20009fa8
    21f4:	00003061 	.word	0x00003061
    21f8:	00002131 	.word	0x00002131

000021fc <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2200:	2100      	movs	r1, #0
    2202:	2068      	movs	r0, #104	; 0x68
    2204:	4b07      	ldr	r3, [pc, #28]	; (2224 <I2C_FANS_PORT_init+0x28>)
    2206:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2208:	4907      	ldr	r1, [pc, #28]	; (2228 <I2C_FANS_PORT_init+0x2c>)
    220a:	2068      	movs	r0, #104	; 0x68
    220c:	4b07      	ldr	r3, [pc, #28]	; (222c <I2C_FANS_PORT_init+0x30>)
    220e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2210:	2100      	movs	r1, #0
    2212:	2069      	movs	r0, #105	; 0x69
    2214:	4b03      	ldr	r3, [pc, #12]	; (2224 <I2C_FANS_PORT_init+0x28>)
    2216:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2218:	4905      	ldr	r1, [pc, #20]	; (2230 <I2C_FANS_PORT_init+0x34>)
    221a:	2069      	movs	r0, #105	; 0x69
    221c:	4b03      	ldr	r3, [pc, #12]	; (222c <I2C_FANS_PORT_init+0x30>)
    221e:	4798      	blx	r3
}
    2220:	bf00      	nop
    2222:	bd80      	pop	{r7, pc}
    2224:	00001b0d 	.word	0x00001b0d
    2228:	00680002 	.word	0x00680002
    222c:	00001b41 	.word	0x00001b41
    2230:	00690002 	.word	0x00690002

00002234 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2234:	b580      	push	{r7, lr}
    2236:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2238:	2244      	movs	r2, #68	; 0x44
    223a:	2125      	movs	r1, #37	; 0x25
    223c:	4806      	ldr	r0, [pc, #24]	; (2258 <I2C_FANS_CLOCK_init+0x24>)
    223e:	4b07      	ldr	r3, [pc, #28]	; (225c <I2C_FANS_CLOCK_init+0x28>)
    2240:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2242:	224a      	movs	r2, #74	; 0x4a
    2244:	2103      	movs	r1, #3
    2246:	4804      	ldr	r0, [pc, #16]	; (2258 <I2C_FANS_CLOCK_init+0x24>)
    2248:	4b04      	ldr	r3, [pc, #16]	; (225c <I2C_FANS_CLOCK_init+0x28>)
    224a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    224c:	4804      	ldr	r0, [pc, #16]	; (2260 <I2C_FANS_CLOCK_init+0x2c>)
    224e:	4b05      	ldr	r3, [pc, #20]	; (2264 <I2C_FANS_CLOCK_init+0x30>)
    2250:	4798      	blx	r3
}
    2252:	bf00      	nop
    2254:	bd80      	pop	{r7, pc}
    2256:	bf00      	nop
    2258:	40001c00 	.word	0x40001c00
    225c:	000012ed 	.word	0x000012ed
    2260:	40000800 	.word	0x40000800
    2264:	000015d3 	.word	0x000015d3

00002268 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2268:	b580      	push	{r7, lr}
    226a:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    226c:	4b04      	ldr	r3, [pc, #16]	; (2280 <I2C_FANS_init+0x18>)
    226e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2270:	4904      	ldr	r1, [pc, #16]	; (2284 <I2C_FANS_init+0x1c>)
    2272:	4805      	ldr	r0, [pc, #20]	; (2288 <I2C_FANS_init+0x20>)
    2274:	4b05      	ldr	r3, [pc, #20]	; (228c <I2C_FANS_init+0x24>)
    2276:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2278:	4b05      	ldr	r3, [pc, #20]	; (2290 <I2C_FANS_init+0x28>)
    227a:	4798      	blx	r3
}
    227c:	bf00      	nop
    227e:	bd80      	pop	{r7, pc}
    2280:	00002235 	.word	0x00002235
    2284:	43000c00 	.word	0x43000c00
    2288:	20009fd8 	.word	0x20009fd8
    228c:	00002da9 	.word	0x00002da9
    2290:	000021fd 	.word	0x000021fd

00002294 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    2294:	b580      	push	{r7, lr}
    2296:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2298:	4808      	ldr	r0, [pc, #32]	; (22bc <TIMER_USB_init+0x28>)
    229a:	4b09      	ldr	r3, [pc, #36]	; (22c0 <TIMER_USB_init+0x2c>)
    229c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    229e:	2243      	movs	r2, #67	; 0x43
    22a0:	2109      	movs	r1, #9
    22a2:	4808      	ldr	r0, [pc, #32]	; (22c4 <TIMER_USB_init+0x30>)
    22a4:	4b08      	ldr	r3, [pc, #32]	; (22c8 <TIMER_USB_init+0x34>)
    22a6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    22a8:	4b08      	ldr	r3, [pc, #32]	; (22cc <TIMER_USB_init+0x38>)
    22aa:	4798      	blx	r3
    22ac:	4603      	mov	r3, r0
    22ae:	461a      	mov	r2, r3
    22b0:	4907      	ldr	r1, [pc, #28]	; (22d0 <TIMER_USB_init+0x3c>)
    22b2:	4808      	ldr	r0, [pc, #32]	; (22d4 <TIMER_USB_init+0x40>)
    22b4:	4b08      	ldr	r3, [pc, #32]	; (22d8 <TIMER_USB_init+0x44>)
    22b6:	4798      	blx	r3
}
    22b8:	bf00      	nop
    22ba:	bd80      	pop	{r7, pc}
    22bc:	40000800 	.word	0x40000800
    22c0:	00001413 	.word	0x00001413
    22c4:	40001c00 	.word	0x40001c00
    22c8:	000012ed 	.word	0x000012ed
    22cc:	00008c2d 	.word	0x00008c2d
    22d0:	40003800 	.word	0x40003800
    22d4:	2000a120 	.word	0x2000a120
    22d8:	000032f1 	.word	0x000032f1

000022dc <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    22dc:	b580      	push	{r7, lr}
    22de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    22e0:	4808      	ldr	r0, [pc, #32]	; (2304 <TIMER_ARINC_init+0x28>)
    22e2:	4b09      	ldr	r3, [pc, #36]	; (2308 <TIMER_ARINC_init+0x2c>)
    22e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22e6:	2244      	movs	r2, #68	; 0x44
    22e8:	211a      	movs	r1, #26
    22ea:	4808      	ldr	r0, [pc, #32]	; (230c <TIMER_ARINC_init+0x30>)
    22ec:	4b08      	ldr	r3, [pc, #32]	; (2310 <TIMER_ARINC_init+0x34>)
    22ee:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    22f0:	4b08      	ldr	r3, [pc, #32]	; (2314 <TIMER_ARINC_init+0x38>)
    22f2:	4798      	blx	r3
    22f4:	4603      	mov	r3, r0
    22f6:	461a      	mov	r2, r3
    22f8:	4907      	ldr	r1, [pc, #28]	; (2318 <TIMER_ARINC_init+0x3c>)
    22fa:	4808      	ldr	r0, [pc, #32]	; (231c <TIMER_ARINC_init+0x40>)
    22fc:	4b08      	ldr	r3, [pc, #32]	; (2320 <TIMER_ARINC_init+0x44>)
    22fe:	4798      	blx	r3
}
    2300:	bf00      	nop
    2302:	bd80      	pop	{r7, pc}
    2304:	40000800 	.word	0x40000800
    2308:	000014d3 	.word	0x000014d3
    230c:	40001c00 	.word	0x40001c00
    2310:	000012ed 	.word	0x000012ed
    2314:	00008c2d 	.word	0x00008c2d
    2318:	4101a000 	.word	0x4101a000
    231c:	2000a100 	.word	0x2000a100
    2320:	000032f1 	.word	0x000032f1

00002324 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2324:	b580      	push	{r7, lr}
    2326:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2328:	4808      	ldr	r0, [pc, #32]	; (234c <TIMER_MAINTENANCE_init+0x28>)
    232a:	4b09      	ldr	r3, [pc, #36]	; (2350 <TIMER_MAINTENANCE_init+0x2c>)
    232c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    232e:	2246      	movs	r2, #70	; 0x46
    2330:	211e      	movs	r1, #30
    2332:	4808      	ldr	r0, [pc, #32]	; (2354 <TIMER_MAINTENANCE_init+0x30>)
    2334:	4b08      	ldr	r3, [pc, #32]	; (2358 <TIMER_MAINTENANCE_init+0x34>)
    2336:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2338:	4b08      	ldr	r3, [pc, #32]	; (235c <TIMER_MAINTENANCE_init+0x38>)
    233a:	4798      	blx	r3
    233c:	4603      	mov	r3, r0
    233e:	461a      	mov	r2, r3
    2340:	4907      	ldr	r1, [pc, #28]	; (2360 <TIMER_MAINTENANCE_init+0x3c>)
    2342:	4808      	ldr	r0, [pc, #32]	; (2364 <TIMER_MAINTENANCE_init+0x40>)
    2344:	4b08      	ldr	r3, [pc, #32]	; (2368 <TIMER_MAINTENANCE_init+0x44>)
    2346:	4798      	blx	r3
}
    2348:	bf00      	nop
    234a:	bd80      	pop	{r7, pc}
    234c:	40000800 	.word	0x40000800
    2350:	00001513 	.word	0x00001513
    2354:	40001c00 	.word	0x40001c00
    2358:	000012ed 	.word	0x000012ed
    235c:	00008c2d 	.word	0x00008c2d
    2360:	42001400 	.word	0x42001400
    2364:	20009ff8 	.word	0x20009ff8
    2368:	000032f1 	.word	0x000032f1

0000236c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    236c:	b580      	push	{r7, lr}
    236e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2370:	4808      	ldr	r0, [pc, #32]	; (2394 <TIMER_INTERFACE_init+0x28>)
    2372:	4b09      	ldr	r3, [pc, #36]	; (2398 <TIMER_INTERFACE_init+0x2c>)
    2374:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2376:	2246      	movs	r2, #70	; 0x46
    2378:	211e      	movs	r1, #30
    237a:	4808      	ldr	r0, [pc, #32]	; (239c <TIMER_INTERFACE_init+0x30>)
    237c:	4b08      	ldr	r3, [pc, #32]	; (23a0 <TIMER_INTERFACE_init+0x34>)
    237e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2380:	4b08      	ldr	r3, [pc, #32]	; (23a4 <TIMER_INTERFACE_init+0x38>)
    2382:	4798      	blx	r3
    2384:	4603      	mov	r3, r0
    2386:	461a      	mov	r2, r3
    2388:	4907      	ldr	r1, [pc, #28]	; (23a8 <TIMER_INTERFACE_init+0x3c>)
    238a:	4808      	ldr	r0, [pc, #32]	; (23ac <TIMER_INTERFACE_init+0x40>)
    238c:	4b08      	ldr	r3, [pc, #32]	; (23b0 <TIMER_INTERFACE_init+0x44>)
    238e:	4798      	blx	r3
}
    2390:	bf00      	nop
    2392:	bd80      	pop	{r7, pc}
    2394:	40000800 	.word	0x40000800
    2398:	00001533 	.word	0x00001533
    239c:	40001c00 	.word	0x40001c00
    23a0:	000012ed 	.word	0x000012ed
    23a4:	00008c2d 	.word	0x00008c2d
    23a8:	42001800 	.word	0x42001800
    23ac:	2000a03c 	.word	0x2000a03c
    23b0:	000032f1 	.word	0x000032f1

000023b4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    23b8:	4808      	ldr	r0, [pc, #32]	; (23dc <TIMER_EVENT_init+0x28>)
    23ba:	4b09      	ldr	r3, [pc, #36]	; (23e0 <TIMER_EVENT_init+0x2c>)
    23bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23be:	2246      	movs	r2, #70	; 0x46
    23c0:	2127      	movs	r1, #39	; 0x27
    23c2:	4808      	ldr	r0, [pc, #32]	; (23e4 <TIMER_EVENT_init+0x30>)
    23c4:	4b08      	ldr	r3, [pc, #32]	; (23e8 <TIMER_EVENT_init+0x34>)
    23c6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    23c8:	4b08      	ldr	r3, [pc, #32]	; (23ec <TIMER_EVENT_init+0x38>)
    23ca:	4798      	blx	r3
    23cc:	4603      	mov	r3, r0
    23ce:	461a      	mov	r2, r3
    23d0:	4907      	ldr	r1, [pc, #28]	; (23f0 <TIMER_EVENT_init+0x3c>)
    23d2:	4808      	ldr	r0, [pc, #32]	; (23f4 <TIMER_EVENT_init+0x40>)
    23d4:	4b08      	ldr	r3, [pc, #32]	; (23f8 <TIMER_EVENT_init+0x44>)
    23d6:	4798      	blx	r3
}
    23d8:	bf00      	nop
    23da:	bd80      	pop	{r7, pc}
    23dc:	40000800 	.word	0x40000800
    23e0:	000015f3 	.word	0x000015f3
    23e4:	40001c00 	.word	0x40001c00
    23e8:	000012ed 	.word	0x000012ed
    23ec:	00008c2d 	.word	0x00008c2d
    23f0:	43001400 	.word	0x43001400
    23f4:	2000a01c 	.word	0x2000a01c
    23f8:	000032f1 	.word	0x000032f1

000023fc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    23fc:	b480      	push	{r7}
    23fe:	af00      	add	r7, sp, #0
}
    2400:	bf00      	nop
    2402:	46bd      	mov	sp, r7
    2404:	f85d 7b04 	ldr.w	r7, [sp], #4
    2408:	4770      	bx	lr
	...

0000240c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    240c:	b580      	push	{r7, lr}
    240e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2410:	4804      	ldr	r0, [pc, #16]	; (2424 <LIVE_PULSE_CLOCK_init+0x18>)
    2412:	4b05      	ldr	r3, [pc, #20]	; (2428 <LIVE_PULSE_CLOCK_init+0x1c>)
    2414:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2416:	2240      	movs	r2, #64	; 0x40
    2418:	2127      	movs	r1, #39	; 0x27
    241a:	4804      	ldr	r0, [pc, #16]	; (242c <LIVE_PULSE_CLOCK_init+0x20>)
    241c:	4b04      	ldr	r3, [pc, #16]	; (2430 <LIVE_PULSE_CLOCK_init+0x24>)
    241e:	4798      	blx	r3
}
    2420:	bf00      	nop
    2422:	bd80      	pop	{r7, pc}
    2424:	40000800 	.word	0x40000800
    2428:	00001613 	.word	0x00001613
    242c:	40001c00 	.word	0x40001c00
    2430:	000012ed 	.word	0x000012ed

00002434 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2434:	b580      	push	{r7, lr}
    2436:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2438:	4b06      	ldr	r3, [pc, #24]	; (2454 <LIVE_PULSE_init+0x20>)
    243a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    243c:	4b06      	ldr	r3, [pc, #24]	; (2458 <LIVE_PULSE_init+0x24>)
    243e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2440:	4b06      	ldr	r3, [pc, #24]	; (245c <LIVE_PULSE_init+0x28>)
    2442:	4798      	blx	r3
    2444:	4603      	mov	r3, r0
    2446:	461a      	mov	r2, r3
    2448:	4905      	ldr	r1, [pc, #20]	; (2460 <LIVE_PULSE_init+0x2c>)
    244a:	4806      	ldr	r0, [pc, #24]	; (2464 <LIVE_PULSE_init+0x30>)
    244c:	4b06      	ldr	r3, [pc, #24]	; (2468 <LIVE_PULSE_init+0x34>)
    244e:	4798      	blx	r3
}
    2450:	bf00      	nop
    2452:	bd80      	pop	{r7, pc}
    2454:	0000240d 	.word	0x0000240d
    2458:	000023fd 	.word	0x000023fd
    245c:	00008c41 	.word	0x00008c41
    2460:	43001800 	.word	0x43001800
    2464:	2000a07c 	.word	0x2000a07c
    2468:	00002ea5 	.word	0x00002ea5

0000246c <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    246c:	b580      	push	{r7, lr}
    246e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2470:	4804      	ldr	r0, [pc, #16]	; (2484 <TIMER_HVAC_CLOCK_init+0x18>)
    2472:	4b05      	ldr	r3, [pc, #20]	; (2488 <TIMER_HVAC_CLOCK_init+0x1c>)
    2474:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2476:	2244      	movs	r2, #68	; 0x44
    2478:	2119      	movs	r1, #25
    247a:	4804      	ldr	r0, [pc, #16]	; (248c <TIMER_HVAC_CLOCK_init+0x20>)
    247c:	4b04      	ldr	r3, [pc, #16]	; (2490 <TIMER_HVAC_CLOCK_init+0x24>)
    247e:	4798      	blx	r3
}
    2480:	bf00      	nop
    2482:	bd80      	pop	{r7, pc}
    2484:	40000800 	.word	0x40000800
    2488:	00001493 	.word	0x00001493
    248c:	40001c00 	.word	0x40001c00
    2490:	000012ed 	.word	0x000012ed

00002494 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2494:	b580      	push	{r7, lr}
    2496:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2498:	4b05      	ldr	r3, [pc, #20]	; (24b0 <TIMER_HVAC_init+0x1c>)
    249a:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    249c:	4b05      	ldr	r3, [pc, #20]	; (24b4 <TIMER_HVAC_init+0x20>)
    249e:	4798      	blx	r3
    24a0:	4603      	mov	r3, r0
    24a2:	461a      	mov	r2, r3
    24a4:	4904      	ldr	r1, [pc, #16]	; (24b8 <TIMER_HVAC_init+0x24>)
    24a6:	4805      	ldr	r0, [pc, #20]	; (24bc <TIMER_HVAC_init+0x28>)
    24a8:	4b05      	ldr	r3, [pc, #20]	; (24c0 <TIMER_HVAC_init+0x2c>)
    24aa:	4798      	blx	r3
}
    24ac:	bf00      	nop
    24ae:	bd80      	pop	{r7, pc}
    24b0:	0000246d 	.word	0x0000246d
    24b4:	00008011 	.word	0x00008011
    24b8:	41016000 	.word	0x41016000
    24bc:	2000a140 	.word	0x2000a140
    24c0:	000032f1 	.word	0x000032f1

000024c4 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    24c8:	4804      	ldr	r0, [pc, #16]	; (24dc <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    24ca:	4b05      	ldr	r3, [pc, #20]	; (24e0 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    24cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24ce:	2244      	movs	r2, #68	; 0x44
    24d0:	2119      	movs	r1, #25
    24d2:	4804      	ldr	r0, [pc, #16]	; (24e4 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    24d4:	4b04      	ldr	r3, [pc, #16]	; (24e8 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    24d6:	4798      	blx	r3
}
    24d8:	bf00      	nop
    24da:	bd80      	pop	{r7, pc}
    24dc:	40000800 	.word	0x40000800
    24e0:	000014b3 	.word	0x000014b3
    24e4:	40001c00 	.word	0x40001c00
    24e8:	000012ed 	.word	0x000012ed

000024ec <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    24ec:	b580      	push	{r7, lr}
    24ee:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    24f0:	4b05      	ldr	r3, [pc, #20]	; (2508 <TIMER_TEMPERATURES_init+0x1c>)
    24f2:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    24f4:	4b05      	ldr	r3, [pc, #20]	; (250c <TIMER_TEMPERATURES_init+0x20>)
    24f6:	4798      	blx	r3
    24f8:	4603      	mov	r3, r0
    24fa:	461a      	mov	r2, r3
    24fc:	4904      	ldr	r1, [pc, #16]	; (2510 <TIMER_TEMPERATURES_init+0x24>)
    24fe:	4805      	ldr	r0, [pc, #20]	; (2514 <TIMER_TEMPERATURES_init+0x28>)
    2500:	4b05      	ldr	r3, [pc, #20]	; (2518 <TIMER_TEMPERATURES_init+0x2c>)
    2502:	4798      	blx	r3
}
    2504:	bf00      	nop
    2506:	bd80      	pop	{r7, pc}
    2508:	000024c5 	.word	0x000024c5
    250c:	00008011 	.word	0x00008011
    2510:	41018000 	.word	0x41018000
    2514:	20009f88 	.word	0x20009f88
    2518:	000032f1 	.word	0x000032f1

0000251c <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    251c:	b580      	push	{r7, lr}
    251e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2520:	4804      	ldr	r0, [pc, #16]	; (2534 <TIMER_CCU_CLOCK_init+0x18>)
    2522:	4b05      	ldr	r3, [pc, #20]	; (2538 <TIMER_CCU_CLOCK_init+0x1c>)
    2524:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2526:	2240      	movs	r2, #64	; 0x40
    2528:	211d      	movs	r1, #29
    252a:	4804      	ldr	r0, [pc, #16]	; (253c <TIMER_CCU_CLOCK_init+0x20>)
    252c:	4b04      	ldr	r3, [pc, #16]	; (2540 <TIMER_CCU_CLOCK_init+0x24>)
    252e:	4798      	blx	r3
}
    2530:	bf00      	nop
    2532:	bd80      	pop	{r7, pc}
    2534:	40000800 	.word	0x40000800
    2538:	000014f3 	.word	0x000014f3
    253c:	40001c00 	.word	0x40001c00
    2540:	000012ed 	.word	0x000012ed

00002544 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2544:	b580      	push	{r7, lr}
    2546:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <TIMER_CCU_init+0x1c>)
    254a:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    254c:	4b05      	ldr	r3, [pc, #20]	; (2564 <TIMER_CCU_init+0x20>)
    254e:	4798      	blx	r3
    2550:	4603      	mov	r3, r0
    2552:	461a      	mov	r2, r3
    2554:	4904      	ldr	r1, [pc, #16]	; (2568 <TIMER_CCU_init+0x24>)
    2556:	4805      	ldr	r0, [pc, #20]	; (256c <TIMER_CCU_init+0x28>)
    2558:	4b05      	ldr	r3, [pc, #20]	; (2570 <TIMER_CCU_init+0x2c>)
    255a:	4798      	blx	r3
}
    255c:	bf00      	nop
    255e:	bd80      	pop	{r7, pc}
    2560:	0000251d 	.word	0x0000251d
    2564:	00008011 	.word	0x00008011
    2568:	42000c00 	.word	0x42000c00
    256c:	2000a098 	.word	0x2000a098
    2570:	000032f1 	.word	0x000032f1

00002574 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2574:	b580      	push	{r7, lr}
    2576:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2578:	2102      	movs	r1, #2
    257a:	2018      	movs	r0, #24
    257c:	4b0f      	ldr	r3, [pc, #60]	; (25bc <CDCUSB_PORT_init+0x48>)
    257e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2580:	2100      	movs	r1, #0
    2582:	2018      	movs	r0, #24
    2584:	4b0e      	ldr	r3, [pc, #56]	; (25c0 <CDCUSB_PORT_init+0x4c>)
    2586:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2588:	2100      	movs	r1, #0
    258a:	2018      	movs	r0, #24
    258c:	4b0d      	ldr	r3, [pc, #52]	; (25c4 <CDCUSB_PORT_init+0x50>)
    258e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2590:	490d      	ldr	r1, [pc, #52]	; (25c8 <CDCUSB_PORT_init+0x54>)
    2592:	2018      	movs	r0, #24
    2594:	4b0d      	ldr	r3, [pc, #52]	; (25cc <CDCUSB_PORT_init+0x58>)
    2596:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2598:	2102      	movs	r1, #2
    259a:	2019      	movs	r0, #25
    259c:	4b07      	ldr	r3, [pc, #28]	; (25bc <CDCUSB_PORT_init+0x48>)
    259e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    25a0:	2100      	movs	r1, #0
    25a2:	2019      	movs	r0, #25
    25a4:	4b06      	ldr	r3, [pc, #24]	; (25c0 <CDCUSB_PORT_init+0x4c>)
    25a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    25a8:	2100      	movs	r1, #0
    25aa:	2019      	movs	r0, #25
    25ac:	4b05      	ldr	r3, [pc, #20]	; (25c4 <CDCUSB_PORT_init+0x50>)
    25ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    25b0:	4907      	ldr	r1, [pc, #28]	; (25d0 <CDCUSB_PORT_init+0x5c>)
    25b2:	2019      	movs	r0, #25
    25b4:	4b05      	ldr	r3, [pc, #20]	; (25cc <CDCUSB_PORT_init+0x58>)
    25b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    25b8:	bf00      	nop
    25ba:	bd80      	pop	{r7, pc}
    25bc:	00001b61 	.word	0x00001b61
    25c0:	00001b99 	.word	0x00001b99
    25c4:	00001b0d 	.word	0x00001b0d
    25c8:	00180007 	.word	0x00180007
    25cc:	00001b41 	.word	0x00001b41
    25d0:	00190007 	.word	0x00190007

000025d4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    25d4:	b580      	push	{r7, lr}
    25d6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    25d8:	2242      	movs	r2, #66	; 0x42
    25da:	210a      	movs	r1, #10
    25dc:	4805      	ldr	r0, [pc, #20]	; (25f4 <CDCUSB_CLOCK_init+0x20>)
    25de:	4b06      	ldr	r3, [pc, #24]	; (25f8 <CDCUSB_CLOCK_init+0x24>)
    25e0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    25e2:	4806      	ldr	r0, [pc, #24]	; (25fc <CDCUSB_CLOCK_init+0x28>)
    25e4:	4b06      	ldr	r3, [pc, #24]	; (2600 <CDCUSB_CLOCK_init+0x2c>)
    25e6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    25e8:	4804      	ldr	r0, [pc, #16]	; (25fc <CDCUSB_CLOCK_init+0x28>)
    25ea:	4b06      	ldr	r3, [pc, #24]	; (2604 <CDCUSB_CLOCK_init+0x30>)
    25ec:	4798      	blx	r3
}
    25ee:	bf00      	nop
    25f0:	bd80      	pop	{r7, pc}
    25f2:	bf00      	nop
    25f4:	40001c00 	.word	0x40001c00
    25f8:	000012ed 	.word	0x000012ed
    25fc:	40000800 	.word	0x40000800
    2600:	00001313 	.word	0x00001313
    2604:	00001433 	.word	0x00001433

00002608 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2608:	b580      	push	{r7, lr}
    260a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    260c:	4b03      	ldr	r3, [pc, #12]	; (261c <CDCUSB_init+0x14>)
    260e:	4798      	blx	r3
	usb_d_init();
    2610:	4b03      	ldr	r3, [pc, #12]	; (2620 <CDCUSB_init+0x18>)
    2612:	4798      	blx	r3
	CDCUSB_PORT_init();
    2614:	4b03      	ldr	r3, [pc, #12]	; (2624 <CDCUSB_init+0x1c>)
    2616:	4798      	blx	r3
}
    2618:	bf00      	nop
    261a:	bd80      	pop	{r7, pc}
    261c:	000025d5 	.word	0x000025d5
    2620:	00003b4d 	.word	0x00003b4d
    2624:	00002575 	.word	0x00002575

00002628 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2628:	b580      	push	{r7, lr}
    262a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    262c:	4802      	ldr	r0, [pc, #8]	; (2638 <WATCHDOG_CLOCK_init+0x10>)
    262e:	4b03      	ldr	r3, [pc, #12]	; (263c <WATCHDOG_CLOCK_init+0x14>)
    2630:	4798      	blx	r3
}
    2632:	bf00      	nop
    2634:	bd80      	pop	{r7, pc}
    2636:	bf00      	nop
    2638:	40000800 	.word	0x40000800
    263c:	00001393 	.word	0x00001393

00002640 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2640:	b580      	push	{r7, lr}
    2642:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2644:	4b03      	ldr	r3, [pc, #12]	; (2654 <WATCHDOG_init+0x14>)
    2646:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2648:	4903      	ldr	r1, [pc, #12]	; (2658 <WATCHDOG_init+0x18>)
    264a:	4804      	ldr	r0, [pc, #16]	; (265c <WATCHDOG_init+0x1c>)
    264c:	4b04      	ldr	r3, [pc, #16]	; (2660 <WATCHDOG_init+0x20>)
    264e:	4798      	blx	r3
}
    2650:	bf00      	nop
    2652:	bd80      	pop	{r7, pc}
    2654:	00002629 	.word	0x00002629
    2658:	40002000 	.word	0x40002000
    265c:	2000a180 	.word	0x2000a180
    2660:	00001be1 	.word	0x00001be1

00002664 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2664:	b580      	push	{r7, lr}
    2666:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2668:	4904      	ldr	r1, [pc, #16]	; (267c <CAN_CCU_PORT_init+0x18>)
    266a:	202d      	movs	r0, #45	; 0x2d
    266c:	4b04      	ldr	r3, [pc, #16]	; (2680 <CAN_CCU_PORT_init+0x1c>)
    266e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2670:	4904      	ldr	r1, [pc, #16]	; (2684 <CAN_CCU_PORT_init+0x20>)
    2672:	202c      	movs	r0, #44	; 0x2c
    2674:	4b02      	ldr	r3, [pc, #8]	; (2680 <CAN_CCU_PORT_init+0x1c>)
    2676:	4798      	blx	r3
}
    2678:	bf00      	nop
    267a:	bd80      	pop	{r7, pc}
    267c:	002d0007 	.word	0x002d0007
    2680:	00001b41 	.word	0x00001b41
    2684:	002c0007 	.word	0x002c0007

00002688 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2688:	b580      	push	{r7, lr}
    268a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    268c:	4807      	ldr	r0, [pc, #28]	; (26ac <CAN_CCU_init+0x24>)
    268e:	4b08      	ldr	r3, [pc, #32]	; (26b0 <CAN_CCU_init+0x28>)
    2690:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2692:	2249      	movs	r2, #73	; 0x49
    2694:	211c      	movs	r1, #28
    2696:	4807      	ldr	r0, [pc, #28]	; (26b4 <CAN_CCU_init+0x2c>)
    2698:	4b07      	ldr	r3, [pc, #28]	; (26b8 <CAN_CCU_init+0x30>)
    269a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    269c:	4907      	ldr	r1, [pc, #28]	; (26bc <CAN_CCU_init+0x34>)
    269e:	4808      	ldr	r0, [pc, #32]	; (26c0 <CAN_CCU_init+0x38>)
    26a0:	4b08      	ldr	r3, [pc, #32]	; (26c4 <CAN_CCU_init+0x3c>)
    26a2:	4798      	blx	r3
	CAN_CCU_PORT_init();
    26a4:	4b08      	ldr	r3, [pc, #32]	; (26c8 <CAN_CCU_init+0x40>)
    26a6:	4798      	blx	r3
}
    26a8:	bf00      	nop
    26aa:	bd80      	pop	{r7, pc}
    26ac:	40000800 	.word	0x40000800
    26b0:	00001353 	.word	0x00001353
    26b4:	40001c00 	.word	0x40001c00
    26b8:	000012ed 	.word	0x000012ed
    26bc:	42000400 	.word	0x42000400
    26c0:	2000a0d8 	.word	0x2000a0d8
    26c4:	0000292d 	.word	0x0000292d
    26c8:	00002665 	.word	0x00002665

000026cc <system_init>:

void system_init(void)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	af00      	add	r7, sp, #0
	init_mcu();
    26d0:	4b5f      	ldr	r3, [pc, #380]	; (2850 <system_init+0x184>)
    26d2:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    26d4:	2100      	movs	r1, #0
    26d6:	2007      	movs	r0, #7
    26d8:	4b5e      	ldr	r3, [pc, #376]	; (2854 <system_init+0x188>)
    26da:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    26dc:	2102      	movs	r1, #2
    26de:	2007      	movs	r0, #7
    26e0:	4b5d      	ldr	r3, [pc, #372]	; (2858 <system_init+0x18c>)
    26e2:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    26e4:	f04f 31ff 	mov.w	r1, #4294967295
    26e8:	2007      	movs	r0, #7
    26ea:	4b5c      	ldr	r3, [pc, #368]	; (285c <system_init+0x190>)
    26ec:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    26ee:	2101      	movs	r1, #1
    26f0:	200f      	movs	r0, #15
    26f2:	4b58      	ldr	r3, [pc, #352]	; (2854 <system_init+0x188>)
    26f4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    26f6:	2102      	movs	r1, #2
    26f8:	200f      	movs	r0, #15
    26fa:	4b57      	ldr	r3, [pc, #348]	; (2858 <system_init+0x18c>)
    26fc:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    26fe:	f04f 31ff 	mov.w	r1, #4294967295
    2702:	200f      	movs	r0, #15
    2704:	4b55      	ldr	r3, [pc, #340]	; (285c <system_init+0x190>)
    2706:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2708:	2101      	movs	r1, #1
    270a:	2013      	movs	r0, #19
    270c:	4b51      	ldr	r3, [pc, #324]	; (2854 <system_init+0x188>)
    270e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2710:	2102      	movs	r1, #2
    2712:	2013      	movs	r0, #19
    2714:	4b50      	ldr	r3, [pc, #320]	; (2858 <system_init+0x18c>)
    2716:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2718:	f04f 31ff 	mov.w	r1, #4294967295
    271c:	2013      	movs	r0, #19
    271e:	4b4f      	ldr	r3, [pc, #316]	; (285c <system_init+0x190>)
    2720:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2722:	2101      	movs	r1, #1
    2724:	201b      	movs	r0, #27
    2726:	4b4b      	ldr	r3, [pc, #300]	; (2854 <system_init+0x188>)
    2728:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    272a:	2102      	movs	r1, #2
    272c:	201b      	movs	r0, #27
    272e:	4b4a      	ldr	r3, [pc, #296]	; (2858 <system_init+0x18c>)
    2730:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2732:	f04f 31ff 	mov.w	r1, #4294967295
    2736:	201b      	movs	r0, #27
    2738:	4b48      	ldr	r3, [pc, #288]	; (285c <system_init+0x190>)
    273a:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    273c:	2101      	movs	r1, #1
    273e:	2027      	movs	r0, #39	; 0x27
    2740:	4b44      	ldr	r3, [pc, #272]	; (2854 <system_init+0x188>)
    2742:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2744:	2102      	movs	r1, #2
    2746:	2027      	movs	r0, #39	; 0x27
    2748:	4b43      	ldr	r3, [pc, #268]	; (2858 <system_init+0x18c>)
    274a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    274c:	f04f 31ff 	mov.w	r1, #4294967295
    2750:	2027      	movs	r0, #39	; 0x27
    2752:	4b42      	ldr	r3, [pc, #264]	; (285c <system_init+0x190>)
    2754:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2756:	2101      	movs	r1, #1
    2758:	203d      	movs	r0, #61	; 0x3d
    275a:	4b3e      	ldr	r3, [pc, #248]	; (2854 <system_init+0x188>)
    275c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    275e:	2102      	movs	r1, #2
    2760:	203d      	movs	r0, #61	; 0x3d
    2762:	4b3d      	ldr	r3, [pc, #244]	; (2858 <system_init+0x18c>)
    2764:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2766:	f04f 31ff 	mov.w	r1, #4294967295
    276a:	203d      	movs	r0, #61	; 0x3d
    276c:	4b3b      	ldr	r3, [pc, #236]	; (285c <system_init+0x190>)
    276e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2770:	2101      	movs	r1, #1
    2772:	203f      	movs	r0, #63	; 0x3f
    2774:	4b38      	ldr	r3, [pc, #224]	; (2858 <system_init+0x18c>)
    2776:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2778:	2101      	movs	r1, #1
    277a:	203f      	movs	r0, #63	; 0x3f
    277c:	4b38      	ldr	r3, [pc, #224]	; (2860 <system_init+0x194>)
    277e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2780:	f04f 31ff 	mov.w	r1, #4294967295
    2784:	203f      	movs	r0, #63	; 0x3f
    2786:	4b35      	ldr	r3, [pc, #212]	; (285c <system_init+0x190>)
    2788:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    278a:	2100      	movs	r1, #0
    278c:	204d      	movs	r0, #77	; 0x4d
    278e:	4b31      	ldr	r3, [pc, #196]	; (2854 <system_init+0x188>)
    2790:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2792:	2102      	movs	r1, #2
    2794:	204d      	movs	r0, #77	; 0x4d
    2796:	4b30      	ldr	r3, [pc, #192]	; (2858 <system_init+0x18c>)
    2798:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    279a:	f04f 31ff 	mov.w	r1, #4294967295
    279e:	204d      	movs	r0, #77	; 0x4d
    27a0:	4b2e      	ldr	r3, [pc, #184]	; (285c <system_init+0x190>)
    27a2:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    27a4:	2101      	movs	r1, #1
    27a6:	204e      	movs	r0, #78	; 0x4e
    27a8:	4b2a      	ldr	r3, [pc, #168]	; (2854 <system_init+0x188>)
    27aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    27ac:	2102      	movs	r1, #2
    27ae:	204e      	movs	r0, #78	; 0x4e
    27b0:	4b29      	ldr	r3, [pc, #164]	; (2858 <system_init+0x18c>)
    27b2:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    27b4:	f04f 31ff 	mov.w	r1, #4294967295
    27b8:	204e      	movs	r0, #78	; 0x4e
    27ba:	4b28      	ldr	r3, [pc, #160]	; (285c <system_init+0x190>)
    27bc:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    27be:	2100      	movs	r1, #0
    27c0:	204f      	movs	r0, #79	; 0x4f
    27c2:	4b24      	ldr	r3, [pc, #144]	; (2854 <system_init+0x188>)
    27c4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    27c6:	2102      	movs	r1, #2
    27c8:	204f      	movs	r0, #79	; 0x4f
    27ca:	4b23      	ldr	r3, [pc, #140]	; (2858 <system_init+0x18c>)
    27cc:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    27ce:	f04f 31ff 	mov.w	r1, #4294967295
    27d2:	204f      	movs	r0, #79	; 0x4f
    27d4:	4b21      	ldr	r3, [pc, #132]	; (285c <system_init+0x190>)
    27d6:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    27d8:	2100      	movs	r1, #0
    27da:	2052      	movs	r0, #82	; 0x52
    27dc:	4b1d      	ldr	r3, [pc, #116]	; (2854 <system_init+0x188>)
    27de:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    27e0:	2102      	movs	r1, #2
    27e2:	2052      	movs	r0, #82	; 0x52
    27e4:	4b1c      	ldr	r3, [pc, #112]	; (2858 <system_init+0x18c>)
    27e6:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    27e8:	f04f 31ff 	mov.w	r1, #4294967295
    27ec:	2052      	movs	r0, #82	; 0x52
    27ee:	4b1b      	ldr	r3, [pc, #108]	; (285c <system_init+0x190>)
    27f0:	4798      	blx	r3

	CRC_CALC_init();
    27f2:	4b1c      	ldr	r3, [pc, #112]	; (2864 <system_init+0x198>)
    27f4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    27f6:	4b1c      	ldr	r3, [pc, #112]	; (2868 <system_init+0x19c>)
    27f8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    27fa:	4b1c      	ldr	r3, [pc, #112]	; (286c <system_init+0x1a0>)
    27fc:	4798      	blx	r3

	QSPI_N25Q256_init();
    27fe:	4b1c      	ldr	r3, [pc, #112]	; (2870 <system_init+0x1a4>)
    2800:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2802:	4b1c      	ldr	r3, [pc, #112]	; (2874 <system_init+0x1a8>)
    2804:	4798      	blx	r3

	I2C_HEATERS_init();
    2806:	4b1c      	ldr	r3, [pc, #112]	; (2878 <system_init+0x1ac>)
    2808:	4798      	blx	r3

	SPI_TEMP_init();
    280a:	4b1c      	ldr	r3, [pc, #112]	; (287c <system_init+0x1b0>)
    280c:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    280e:	4b1c      	ldr	r3, [pc, #112]	; (2880 <system_init+0x1b4>)
    2810:	4798      	blx	r3

	SPI_HI3593_init();
    2812:	4b1c      	ldr	r3, [pc, #112]	; (2884 <system_init+0x1b8>)
    2814:	4798      	blx	r3

	I2C_FANS_init();
    2816:	4b1c      	ldr	r3, [pc, #112]	; (2888 <system_init+0x1bc>)
    2818:	4798      	blx	r3

	TIMER_USB_init();
    281a:	4b1c      	ldr	r3, [pc, #112]	; (288c <system_init+0x1c0>)
    281c:	4798      	blx	r3
	TIMER_ARINC_init();
    281e:	4b1c      	ldr	r3, [pc, #112]	; (2890 <system_init+0x1c4>)
    2820:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2822:	4b1c      	ldr	r3, [pc, #112]	; (2894 <system_init+0x1c8>)
    2824:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2826:	4b1c      	ldr	r3, [pc, #112]	; (2898 <system_init+0x1cc>)
    2828:	4798      	blx	r3
	TIMER_EVENT_init();
    282a:	4b1c      	ldr	r3, [pc, #112]	; (289c <system_init+0x1d0>)
    282c:	4798      	blx	r3
	LIVE_PULSE_init();
    282e:	4b1c      	ldr	r3, [pc, #112]	; (28a0 <system_init+0x1d4>)
    2830:	4798      	blx	r3

	TIMER_HVAC_init();
    2832:	4b1c      	ldr	r3, [pc, #112]	; (28a4 <system_init+0x1d8>)
    2834:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2836:	4b1c      	ldr	r3, [pc, #112]	; (28a8 <system_init+0x1dc>)
    2838:	4798      	blx	r3

	TIMER_CCU_init();
    283a:	4b1c      	ldr	r3, [pc, #112]	; (28ac <system_init+0x1e0>)
    283c:	4798      	blx	r3

	CDCUSB_init();
    283e:	4b1c      	ldr	r3, [pc, #112]	; (28b0 <system_init+0x1e4>)
    2840:	4798      	blx	r3

	WATCHDOG_init();
    2842:	4b1c      	ldr	r3, [pc, #112]	; (28b4 <system_init+0x1e8>)
    2844:	4798      	blx	r3
	CAN_CCU_init();
    2846:	4b1c      	ldr	r3, [pc, #112]	; (28b8 <system_init+0x1ec>)
    2848:	4798      	blx	r3
}
    284a:	bf00      	nop
    284c:	bd80      	pop	{r7, pc}
    284e:	bf00      	nop
    2850:	00001bd1 	.word	0x00001bd1
    2854:	00001b99 	.word	0x00001b99
    2858:	00001b61 	.word	0x00001b61
    285c:	00001b41 	.word	0x00001b41
    2860:	00001b0d 	.word	0x00001b0d
    2864:	00001c31 	.word	0x00001c31
    2868:	00001c5d 	.word	0x00001c5d
    286c:	00001d85 	.word	0x00001d85
    2870:	00001ecd 	.word	0x00001ecd
    2874:	00001f11 	.word	0x00001f11
    2878:	00001fa1 	.word	0x00001fa1
    287c:	0000206d 	.word	0x0000206d
    2880:	00002105 	.word	0x00002105
    2884:	000021d1 	.word	0x000021d1
    2888:	00002269 	.word	0x00002269
    288c:	00002295 	.word	0x00002295
    2890:	000022dd 	.word	0x000022dd
    2894:	00002325 	.word	0x00002325
    2898:	0000236d 	.word	0x0000236d
    289c:	000023b5 	.word	0x000023b5
    28a0:	00002435 	.word	0x00002435
    28a4:	00002495 	.word	0x00002495
    28a8:	000024ed 	.word	0x000024ed
    28ac:	00002545 	.word	0x00002545
    28b0:	00002609 	.word	0x00002609
    28b4:	00002641 	.word	0x00002641
    28b8:	00002689 	.word	0x00002689

000028bc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    28bc:	b580      	push	{r7, lr}
    28be:	b084      	sub	sp, #16
    28c0:	af00      	add	r7, sp, #0
    28c2:	6078      	str	r0, [r7, #4]
    28c4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    28c6:	2300      	movs	r3, #0
    28c8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	2b00      	cmp	r3, #0
    28ce:	bf14      	ite	ne
    28d0:	2301      	movne	r3, #1
    28d2:	2300      	moveq	r3, #0
    28d4:	b2db      	uxtb	r3, r3
    28d6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    28da:	4911      	ldr	r1, [pc, #68]	; (2920 <calendar_init+0x64>)
    28dc:	4618      	mov	r0, r3
    28de:	4b11      	ldr	r3, [pc, #68]	; (2924 <calendar_init+0x68>)
    28e0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	681a      	ldr	r2, [r3, #0]
    28e6:	683b      	ldr	r3, [r7, #0]
    28e8:	429a      	cmp	r2, r3
    28ea:	d101      	bne.n	28f0 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    28ec:	2300      	movs	r3, #0
    28ee:	e013      	b.n	2918 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	681b      	ldr	r3, [r3, #0]
    28f4:	2b00      	cmp	r3, #0
    28f6:	d002      	beq.n	28fe <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    28f8:	f06f 0311 	mvn.w	r3, #17
    28fc:	e00c      	b.n	2918 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	683a      	ldr	r2, [r7, #0]
    2902:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	4618      	mov	r0, r3
    2908:	4b07      	ldr	r3, [pc, #28]	; (2928 <calendar_init+0x6c>)
    290a:	4798      	blx	r3
    290c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2914:	619a      	str	r2, [r3, #24]

	return ret;
    2916:	68fb      	ldr	r3, [r7, #12]
}
    2918:	4618      	mov	r0, r3
    291a:	3710      	adds	r7, #16
    291c:	46bd      	mov	sp, r7
    291e:	bd80      	pop	{r7, pc}
    2920:	00013f94 	.word	0x00013f94
    2924:	000040f5 	.word	0x000040f5
    2928:	000064b1 	.word	0x000064b1

0000292c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    292c:	b580      	push	{r7, lr}
    292e:	b084      	sub	sp, #16
    2930:	af00      	add	r7, sp, #0
    2932:	6078      	str	r0, [r7, #4]
    2934:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2b00      	cmp	r3, #0
    293a:	d004      	beq.n	2946 <can_async_init+0x1a>
    293c:	683b      	ldr	r3, [r7, #0]
    293e:	2b00      	cmp	r3, #0
    2940:	d001      	beq.n	2946 <can_async_init+0x1a>
    2942:	2301      	movs	r3, #1
    2944:	e000      	b.n	2948 <can_async_init+0x1c>
    2946:	2300      	movs	r3, #0
    2948:	f003 0301 	and.w	r3, r3, #1
    294c:	b2db      	uxtb	r3, r3
    294e:	2241      	movs	r2, #65	; 0x41
    2950:	490e      	ldr	r1, [pc, #56]	; (298c <can_async_init+0x60>)
    2952:	4618      	mov	r0, r3
    2954:	4b0e      	ldr	r3, [pc, #56]	; (2990 <can_async_init+0x64>)
    2956:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	6839      	ldr	r1, [r7, #0]
    295c:	4618      	mov	r0, r3
    295e:	4b0d      	ldr	r3, [pc, #52]	; (2994 <can_async_init+0x68>)
    2960:	4798      	blx	r3
    2962:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	2b00      	cmp	r3, #0
    2968:	d001      	beq.n	296e <can_async_init+0x42>
		return rc;
    296a:	68fb      	ldr	r3, [r7, #12]
    296c:	e009      	b.n	2982 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	4a09      	ldr	r2, [pc, #36]	; (2998 <can_async_init+0x6c>)
    2972:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	4a09      	ldr	r2, [pc, #36]	; (299c <can_async_init+0x70>)
    2978:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    297a:	687b      	ldr	r3, [r7, #4]
    297c:	4a08      	ldr	r2, [pc, #32]	; (29a0 <can_async_init+0x74>)
    297e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2980:	2300      	movs	r3, #0
}
    2982:	4618      	mov	r0, r3
    2984:	3710      	adds	r7, #16
    2986:	46bd      	mov	sp, r7
    2988:	bd80      	pop	{r7, pc}
    298a:	bf00      	nop
    298c:	00013fb0 	.word	0x00013fb0
    2990:	000040f5 	.word	0x000040f5
    2994:	00004651 	.word	0x00004651
    2998:	000029a5 	.word	0x000029a5
    299c:	000029c9 	.word	0x000029c9
    29a0:	000029ed 	.word	0x000029ed

000029a4 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b084      	sub	sp, #16
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    29b0:	68fb      	ldr	r3, [r7, #12]
    29b2:	69db      	ldr	r3, [r3, #28]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d003      	beq.n	29c0 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	69db      	ldr	r3, [r3, #28]
    29bc:	68f8      	ldr	r0, [r7, #12]
    29be:	4798      	blx	r3
	}
}
    29c0:	bf00      	nop
    29c2:	3710      	adds	r7, #16
    29c4:	46bd      	mov	sp, r7
    29c6:	bd80      	pop	{r7, pc}

000029c8 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    29c8:	b580      	push	{r7, lr}
    29ca:	b084      	sub	sp, #16
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    29d4:	68fb      	ldr	r3, [r7, #12]
    29d6:	6a1b      	ldr	r3, [r3, #32]
    29d8:	2b00      	cmp	r3, #0
    29da:	d003      	beq.n	29e4 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	6a1b      	ldr	r3, [r3, #32]
    29e0:	68f8      	ldr	r0, [r7, #12]
    29e2:	4798      	blx	r3
	}
}
    29e4:	bf00      	nop
    29e6:	3710      	adds	r7, #16
    29e8:	46bd      	mov	sp, r7
    29ea:	bd80      	pop	{r7, pc}

000029ec <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    29ec:	b580      	push	{r7, lr}
    29ee:	b084      	sub	sp, #16
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	460b      	mov	r3, r1
    29f6:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    29fc:	68fb      	ldr	r3, [r7, #12]
    29fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a00:	2b00      	cmp	r3, #0
    2a02:	d005      	beq.n	2a10 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a08:	78fa      	ldrb	r2, [r7, #3]
    2a0a:	4611      	mov	r1, r2
    2a0c:	68f8      	ldr	r0, [r7, #12]
    2a0e:	4798      	blx	r3
	}
}
    2a10:	bf00      	nop
    2a12:	3710      	adds	r7, #16
    2a14:	46bd      	mov	sp, r7
    2a16:	bd80      	pop	{r7, pc}

00002a18 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2a18:	b580      	push	{r7, lr}
    2a1a:	b082      	sub	sp, #8
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	6078      	str	r0, [r7, #4]
    2a20:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d004      	beq.n	2a32 <crc_sync_init+0x1a>
    2a28:	683b      	ldr	r3, [r7, #0]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d001      	beq.n	2a32 <crc_sync_init+0x1a>
    2a2e:	2301      	movs	r3, #1
    2a30:	e000      	b.n	2a34 <crc_sync_init+0x1c>
    2a32:	2300      	movs	r3, #0
    2a34:	f003 0301 	and.w	r3, r3, #1
    2a38:	b2db      	uxtb	r3, r3
    2a3a:	222b      	movs	r2, #43	; 0x2b
    2a3c:	4906      	ldr	r1, [pc, #24]	; (2a58 <crc_sync_init+0x40>)
    2a3e:	4618      	mov	r0, r3
    2a40:	4b06      	ldr	r3, [pc, #24]	; (2a5c <crc_sync_init+0x44>)
    2a42:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	6839      	ldr	r1, [r7, #0]
    2a48:	4618      	mov	r0, r3
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <crc_sync_init+0x48>)
    2a4c:	4798      	blx	r3
    2a4e:	4603      	mov	r3, r0
}
    2a50:	4618      	mov	r0, r3
    2a52:	3708      	adds	r7, #8
    2a54:	46bd      	mov	sp, r7
    2a56:	bd80      	pop	{r7, pc}
    2a58:	00013fcc 	.word	0x00013fcc
    2a5c:	000040f5 	.word	0x000040f5
    2a60:	00004d51 	.word	0x00004d51

00002a64 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2a64:	b590      	push	{r4, r7, lr}
    2a66:	b083      	sub	sp, #12
    2a68:	af00      	add	r7, sp, #0
    2a6a:	4603      	mov	r3, r0
    2a6c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2a6e:	4b07      	ldr	r3, [pc, #28]	; (2a8c <delay_us+0x28>)
    2a70:	681c      	ldr	r4, [r3, #0]
    2a72:	88fb      	ldrh	r3, [r7, #6]
    2a74:	4618      	mov	r0, r3
    2a76:	4b06      	ldr	r3, [pc, #24]	; (2a90 <delay_us+0x2c>)
    2a78:	4798      	blx	r3
    2a7a:	4603      	mov	r3, r0
    2a7c:	4619      	mov	r1, r3
    2a7e:	4620      	mov	r0, r4
    2a80:	4b04      	ldr	r3, [pc, #16]	; (2a94 <delay_us+0x30>)
    2a82:	4798      	blx	r3
}
    2a84:	bf00      	nop
    2a86:	370c      	adds	r7, #12
    2a88:	46bd      	mov	sp, r7
    2a8a:	bd90      	pop	{r4, r7, pc}
    2a8c:	20000d00 	.word	0x20000d00
    2a90:	00004aa5 	.word	0x00004aa5
    2a94:	00004c39 	.word	0x00004c39

00002a98 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2a98:	b590      	push	{r4, r7, lr}
    2a9a:	b083      	sub	sp, #12
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	4603      	mov	r3, r0
    2aa0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2aa2:	4b07      	ldr	r3, [pc, #28]	; (2ac0 <delay_ms+0x28>)
    2aa4:	681c      	ldr	r4, [r3, #0]
    2aa6:	88fb      	ldrh	r3, [r7, #6]
    2aa8:	4618      	mov	r0, r3
    2aaa:	4b06      	ldr	r3, [pc, #24]	; (2ac4 <delay_ms+0x2c>)
    2aac:	4798      	blx	r3
    2aae:	4603      	mov	r3, r0
    2ab0:	4619      	mov	r1, r3
    2ab2:	4620      	mov	r0, r4
    2ab4:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <delay_ms+0x30>)
    2ab6:	4798      	blx	r3
}
    2ab8:	bf00      	nop
    2aba:	370c      	adds	r7, #12
    2abc:	46bd      	mov	sp, r7
    2abe:	bd90      	pop	{r4, r7, pc}
    2ac0:	20000d00 	.word	0x20000d00
    2ac4:	00004c11 	.word	0x00004c11
    2ac8:	00004c39 	.word	0x00004c39

00002acc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2acc:	b580      	push	{r7, lr}
    2ace:	af00      	add	r7, sp, #0
	return _event_system_init();
    2ad0:	4b02      	ldr	r3, [pc, #8]	; (2adc <event_system_init+0x10>)
    2ad2:	4798      	blx	r3
    2ad4:	4603      	mov	r3, r0
}
    2ad6:	4618      	mov	r0, r3
    2ad8:	bd80      	pop	{r7, pc}
    2ada:	bf00      	nop
    2adc:	0000550d 	.word	0x0000550d

00002ae0 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b082      	sub	sp, #8
    2ae4:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2ae6:	2300      	movs	r3, #0
    2ae8:	80fb      	strh	r3, [r7, #6]
    2aea:	e00e      	b.n	2b0a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2aec:	88fb      	ldrh	r3, [r7, #6]
    2aee:	4a0c      	ldr	r2, [pc, #48]	; (2b20 <ext_irq_init+0x40>)
    2af0:	00db      	lsls	r3, r3, #3
    2af2:	4413      	add	r3, r2
    2af4:	f04f 32ff 	mov.w	r2, #4294967295
    2af8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2afa:	88fb      	ldrh	r3, [r7, #6]
    2afc:	4a08      	ldr	r2, [pc, #32]	; (2b20 <ext_irq_init+0x40>)
    2afe:	2100      	movs	r1, #0
    2b00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2b04:	88fb      	ldrh	r3, [r7, #6]
    2b06:	3301      	adds	r3, #1
    2b08:	80fb      	strh	r3, [r7, #6]
    2b0a:	88fb      	ldrh	r3, [r7, #6]
    2b0c:	2b08      	cmp	r3, #8
    2b0e:	d9ed      	bls.n	2aec <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2b10:	4804      	ldr	r0, [pc, #16]	; (2b24 <ext_irq_init+0x44>)
    2b12:	4b05      	ldr	r3, [pc, #20]	; (2b28 <ext_irq_init+0x48>)
    2b14:	4798      	blx	r3
    2b16:	4603      	mov	r3, r0
}
    2b18:	4618      	mov	r0, r3
    2b1a:	3708      	adds	r7, #8
    2b1c:	46bd      	mov	sp, r7
    2b1e:	bd80      	pop	{r7, pc}
    2b20:	20000d04 	.word	0x20000d04
    2b24:	00002c85 	.word	0x00002c85
    2b28:	00005091 	.word	0x00005091

00002b2c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b086      	sub	sp, #24
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
    2b34:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2b36:	2300      	movs	r3, #0
    2b38:	75fb      	strb	r3, [r7, #23]
    2b3a:	2300      	movs	r3, #0
    2b3c:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2b3e:	2300      	movs	r3, #0
    2b40:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2b42:	e012      	b.n	2b6a <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2b44:	7dfb      	ldrb	r3, [r7, #23]
    2b46:	4a4d      	ldr	r2, [pc, #308]	; (2c7c <ext_irq_register+0x150>)
    2b48:	00db      	lsls	r3, r3, #3
    2b4a:	4413      	add	r3, r2
    2b4c:	685a      	ldr	r2, [r3, #4]
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	429a      	cmp	r2, r3
    2b52:	d107      	bne.n	2b64 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2b54:	7dfb      	ldrb	r3, [r7, #23]
    2b56:	4949      	ldr	r1, [pc, #292]	; (2c7c <ext_irq_register+0x150>)
    2b58:	683a      	ldr	r2, [r7, #0]
    2b5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2b5e:	2301      	movs	r3, #1
    2b60:	757b      	strb	r3, [r7, #21]
			break;
    2b62:	e005      	b.n	2b70 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2b64:	7dfb      	ldrb	r3, [r7, #23]
    2b66:	3301      	adds	r3, #1
    2b68:	75fb      	strb	r3, [r7, #23]
    2b6a:	7dfb      	ldrb	r3, [r7, #23]
    2b6c:	2b08      	cmp	r3, #8
    2b6e:	d9e9      	bls.n	2b44 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2b70:	683b      	ldr	r3, [r7, #0]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d10e      	bne.n	2b94 <ext_irq_register+0x68>
		if (!found) {
    2b76:	7d7b      	ldrb	r3, [r7, #21]
    2b78:	f083 0301 	eor.w	r3, r3, #1
    2b7c:	b2db      	uxtb	r3, r3
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d002      	beq.n	2b88 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2b82:	f06f 030c 	mvn.w	r3, #12
    2b86:	e074      	b.n	2c72 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2b88:	2100      	movs	r1, #0
    2b8a:	6878      	ldr	r0, [r7, #4]
    2b8c:	4b3c      	ldr	r3, [pc, #240]	; (2c80 <ext_irq_register+0x154>)
    2b8e:	4798      	blx	r3
    2b90:	4603      	mov	r3, r0
    2b92:	e06e      	b.n	2c72 <ext_irq_register+0x146>
	}

	if (!found) {
    2b94:	7d7b      	ldrb	r3, [r7, #21]
    2b96:	f083 0301 	eor.w	r3, r3, #1
    2b9a:	b2db      	uxtb	r3, r3
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d05a      	beq.n	2c56 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2ba0:	2300      	movs	r3, #0
    2ba2:	75fb      	strb	r3, [r7, #23]
    2ba4:	e016      	b.n	2bd4 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2ba6:	7dfb      	ldrb	r3, [r7, #23]
    2ba8:	4a34      	ldr	r2, [pc, #208]	; (2c7c <ext_irq_register+0x150>)
    2baa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d10d      	bne.n	2bce <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2bb2:	7dfb      	ldrb	r3, [r7, #23]
    2bb4:	4931      	ldr	r1, [pc, #196]	; (2c7c <ext_irq_register+0x150>)
    2bb6:	683a      	ldr	r2, [r7, #0]
    2bb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2bbc:	7dfb      	ldrb	r3, [r7, #23]
    2bbe:	4a2f      	ldr	r2, [pc, #188]	; (2c7c <ext_irq_register+0x150>)
    2bc0:	00db      	lsls	r3, r3, #3
    2bc2:	4413      	add	r3, r2
    2bc4:	687a      	ldr	r2, [r7, #4]
    2bc6:	605a      	str	r2, [r3, #4]
				found           = true;
    2bc8:	2301      	movs	r3, #1
    2bca:	757b      	strb	r3, [r7, #21]
				break;
    2bcc:	e005      	b.n	2bda <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2bce:	7dfb      	ldrb	r3, [r7, #23]
    2bd0:	3301      	adds	r3, #1
    2bd2:	75fb      	strb	r3, [r7, #23]
    2bd4:	7dfb      	ldrb	r3, [r7, #23]
    2bd6:	2b08      	cmp	r3, #8
    2bd8:	d9e5      	bls.n	2ba6 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2bda:	e036      	b.n	2c4a <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2bdc:	7dfb      	ldrb	r3, [r7, #23]
    2bde:	4a27      	ldr	r2, [pc, #156]	; (2c7c <ext_irq_register+0x150>)
    2be0:	00db      	lsls	r3, r3, #3
    2be2:	4413      	add	r3, r2
    2be4:	685a      	ldr	r2, [r3, #4]
    2be6:	7dbb      	ldrb	r3, [r7, #22]
    2be8:	4924      	ldr	r1, [pc, #144]	; (2c7c <ext_irq_register+0x150>)
    2bea:	00db      	lsls	r3, r3, #3
    2bec:	440b      	add	r3, r1
    2bee:	685b      	ldr	r3, [r3, #4]
    2bf0:	429a      	cmp	r2, r3
    2bf2:	d227      	bcs.n	2c44 <ext_irq_register+0x118>
    2bf4:	7dbb      	ldrb	r3, [r7, #22]
    2bf6:	4a21      	ldr	r2, [pc, #132]	; (2c7c <ext_irq_register+0x150>)
    2bf8:	00db      	lsls	r3, r3, #3
    2bfa:	4413      	add	r3, r2
    2bfc:	685b      	ldr	r3, [r3, #4]
    2bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c02:	d01f      	beq.n	2c44 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2c04:	7dbb      	ldrb	r3, [r7, #22]
    2c06:	491d      	ldr	r1, [pc, #116]	; (2c7c <ext_irq_register+0x150>)
    2c08:	f107 020c 	add.w	r2, r7, #12
    2c0c:	00db      	lsls	r3, r3, #3
    2c0e:	440b      	add	r3, r1
    2c10:	e893 0003 	ldmia.w	r3, {r0, r1}
    2c14:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2c18:	7dbb      	ldrb	r3, [r7, #22]
    2c1a:	7dfa      	ldrb	r2, [r7, #23]
    2c1c:	4817      	ldr	r0, [pc, #92]	; (2c7c <ext_irq_register+0x150>)
    2c1e:	4917      	ldr	r1, [pc, #92]	; (2c7c <ext_irq_register+0x150>)
    2c20:	00db      	lsls	r3, r3, #3
    2c22:	4403      	add	r3, r0
    2c24:	00d2      	lsls	r2, r2, #3
    2c26:	440a      	add	r2, r1
    2c28:	e892 0003 	ldmia.w	r2, {r0, r1}
    2c2c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2c30:	7dfb      	ldrb	r3, [r7, #23]
    2c32:	4a12      	ldr	r2, [pc, #72]	; (2c7c <ext_irq_register+0x150>)
    2c34:	00db      	lsls	r3, r3, #3
    2c36:	4413      	add	r3, r2
    2c38:	f107 020c 	add.w	r2, r7, #12
    2c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2c40:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2c44:	7dbb      	ldrb	r3, [r7, #22]
    2c46:	3301      	adds	r3, #1
    2c48:	75bb      	strb	r3, [r7, #22]
    2c4a:	7dbb      	ldrb	r3, [r7, #22]
    2c4c:	2b08      	cmp	r3, #8
    2c4e:	d802      	bhi.n	2c56 <ext_irq_register+0x12a>
    2c50:	7dfb      	ldrb	r3, [r7, #23]
    2c52:	2b08      	cmp	r3, #8
    2c54:	d9c2      	bls.n	2bdc <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2c56:	7d7b      	ldrb	r3, [r7, #21]
    2c58:	f083 0301 	eor.w	r3, r3, #1
    2c5c:	b2db      	uxtb	r3, r3
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d002      	beq.n	2c68 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2c62:	f06f 030c 	mvn.w	r3, #12
    2c66:	e004      	b.n	2c72 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2c68:	2101      	movs	r1, #1
    2c6a:	6878      	ldr	r0, [r7, #4]
    2c6c:	4b04      	ldr	r3, [pc, #16]	; (2c80 <ext_irq_register+0x154>)
    2c6e:	4798      	blx	r3
    2c70:	4603      	mov	r3, r0
}
    2c72:	4618      	mov	r0, r3
    2c74:	3718      	adds	r7, #24
    2c76:	46bd      	mov	sp, r7
    2c78:	bd80      	pop	{r7, pc}
    2c7a:	bf00      	nop
    2c7c:	20000d04 	.word	0x20000d04
    2c80:	00005225 	.word	0x00005225

00002c84 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2c84:	b580      	push	{r7, lr}
    2c86:	b084      	sub	sp, #16
    2c88:	af00      	add	r7, sp, #0
    2c8a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2c8c:	2300      	movs	r3, #0
    2c8e:	73fb      	strb	r3, [r7, #15]
    2c90:	2309      	movs	r3, #9
    2c92:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2c94:	e02a      	b.n	2cec <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2c96:	7bba      	ldrb	r2, [r7, #14]
    2c98:	7bfb      	ldrb	r3, [r7, #15]
    2c9a:	4413      	add	r3, r2
    2c9c:	105b      	asrs	r3, r3, #1
    2c9e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2ca0:	7b7b      	ldrb	r3, [r7, #13]
    2ca2:	2b08      	cmp	r3, #8
    2ca4:	d827      	bhi.n	2cf6 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2ca6:	7b7b      	ldrb	r3, [r7, #13]
    2ca8:	4a16      	ldr	r2, [pc, #88]	; (2d04 <process_ext_irq+0x80>)
    2caa:	00db      	lsls	r3, r3, #3
    2cac:	4413      	add	r3, r2
    2cae:	685a      	ldr	r2, [r3, #4]
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	429a      	cmp	r2, r3
    2cb4:	d10b      	bne.n	2cce <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2cb6:	7b7b      	ldrb	r3, [r7, #13]
    2cb8:	4a12      	ldr	r2, [pc, #72]	; (2d04 <process_ext_irq+0x80>)
    2cba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d01b      	beq.n	2cfa <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2cc2:	7b7b      	ldrb	r3, [r7, #13]
    2cc4:	4a0f      	ldr	r2, [pc, #60]	; (2d04 <process_ext_irq+0x80>)
    2cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2cca:	4798      	blx	r3
			}
			return;
    2ccc:	e015      	b.n	2cfa <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2cce:	7b7b      	ldrb	r3, [r7, #13]
    2cd0:	4a0c      	ldr	r2, [pc, #48]	; (2d04 <process_ext_irq+0x80>)
    2cd2:	00db      	lsls	r3, r3, #3
    2cd4:	4413      	add	r3, r2
    2cd6:	685a      	ldr	r2, [r3, #4]
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	429a      	cmp	r2, r3
    2cdc:	d203      	bcs.n	2ce6 <process_ext_irq+0x62>
			lower = middle + 1;
    2cde:	7b7b      	ldrb	r3, [r7, #13]
    2ce0:	3301      	adds	r3, #1
    2ce2:	73fb      	strb	r3, [r7, #15]
    2ce4:	e002      	b.n	2cec <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2ce6:	7b7b      	ldrb	r3, [r7, #13]
    2ce8:	3b01      	subs	r3, #1
    2cea:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2cec:	7bba      	ldrb	r2, [r7, #14]
    2cee:	7bfb      	ldrb	r3, [r7, #15]
    2cf0:	429a      	cmp	r2, r3
    2cf2:	d2d0      	bcs.n	2c96 <process_ext_irq+0x12>
    2cf4:	e002      	b.n	2cfc <process_ext_irq+0x78>
			return;
    2cf6:	bf00      	nop
    2cf8:	e000      	b.n	2cfc <process_ext_irq+0x78>
			return;
    2cfa:	bf00      	nop
		}
	}
}
    2cfc:	3710      	adds	r7, #16
    2cfe:	46bd      	mov	sp, r7
    2d00:	bd80      	pop	{r7, pc}
    2d02:	bf00      	nop
    2d04:	20000d04 	.word	0x20000d04

00002d08 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2d08:	b580      	push	{r7, lr}
    2d0a:	b08a      	sub	sp, #40	; 0x28
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	60f8      	str	r0, [r7, #12]
    2d10:	60b9      	str	r1, [r7, #8]
    2d12:	4613      	mov	r3, r2
    2d14:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2d16:	68fb      	ldr	r3, [r7, #12]
    2d18:	3b14      	subs	r3, #20
    2d1a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d1e:	8b9b      	ldrh	r3, [r3, #28]
    2d20:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2d22:	88fb      	ldrh	r3, [r7, #6]
    2d24:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2d26:	f248 0301 	movw	r3, #32769	; 0x8001
    2d2a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2d2c:	68bb      	ldr	r3, [r7, #8]
    2d2e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d32:	f107 0214 	add.w	r2, r7, #20
    2d36:	4611      	mov	r1, r2
    2d38:	4618      	mov	r0, r3
    2d3a:	4b06      	ldr	r3, [pc, #24]	; (2d54 <i2c_m_sync_read+0x4c>)
    2d3c:	4798      	blx	r3
    2d3e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2d40:	6a3b      	ldr	r3, [r7, #32]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d001      	beq.n	2d4a <i2c_m_sync_read+0x42>
		return ret;
    2d46:	6a3b      	ldr	r3, [r7, #32]
    2d48:	e000      	b.n	2d4c <i2c_m_sync_read+0x44>
	}

	return n;
    2d4a:	88fb      	ldrh	r3, [r7, #6]
}
    2d4c:	4618      	mov	r0, r3
    2d4e:	3728      	adds	r7, #40	; 0x28
    2d50:	46bd      	mov	sp, r7
    2d52:	bd80      	pop	{r7, pc}
    2d54:	00007195 	.word	0x00007195

00002d58 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	b08a      	sub	sp, #40	; 0x28
    2d5c:	af00      	add	r7, sp, #0
    2d5e:	60f8      	str	r0, [r7, #12]
    2d60:	60b9      	str	r1, [r7, #8]
    2d62:	4613      	mov	r3, r2
    2d64:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2d66:	68fb      	ldr	r3, [r7, #12]
    2d68:	3b14      	subs	r3, #20
    2d6a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d6e:	8b9b      	ldrh	r3, [r3, #28]
    2d70:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2d72:	88fb      	ldrh	r3, [r7, #6]
    2d74:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2d7a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2d7c:	68bb      	ldr	r3, [r7, #8]
    2d7e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d82:	f107 0214 	add.w	r2, r7, #20
    2d86:	4611      	mov	r1, r2
    2d88:	4618      	mov	r0, r3
    2d8a:	4b06      	ldr	r3, [pc, #24]	; (2da4 <i2c_m_sync_write+0x4c>)
    2d8c:	4798      	blx	r3
    2d8e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2d90:	6a3b      	ldr	r3, [r7, #32]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d001      	beq.n	2d9a <i2c_m_sync_write+0x42>
		return ret;
    2d96:	6a3b      	ldr	r3, [r7, #32]
    2d98:	e000      	b.n	2d9c <i2c_m_sync_write+0x44>
	}

	return n;
    2d9a:	88fb      	ldrh	r3, [r7, #6]
}
    2d9c:	4618      	mov	r0, r3
    2d9e:	3728      	adds	r7, #40	; 0x28
    2da0:	46bd      	mov	sp, r7
    2da2:	bd80      	pop	{r7, pc}
    2da4:	00007195 	.word	0x00007195

00002da8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2da8:	b580      	push	{r7, lr}
    2daa:	b084      	sub	sp, #16
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
    2db0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	2b00      	cmp	r3, #0
    2db6:	bf14      	ite	ne
    2db8:	2301      	movne	r3, #1
    2dba:	2300      	moveq	r3, #0
    2dbc:	b2db      	uxtb	r3, r3
    2dbe:	225e      	movs	r2, #94	; 0x5e
    2dc0:	490c      	ldr	r1, [pc, #48]	; (2df4 <i2c_m_sync_init+0x4c>)
    2dc2:	4618      	mov	r0, r3
    2dc4:	4b0c      	ldr	r3, [pc, #48]	; (2df8 <i2c_m_sync_init+0x50>)
    2dc6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2dc8:	687b      	ldr	r3, [r7, #4]
    2dca:	6839      	ldr	r1, [r7, #0]
    2dcc:	4618      	mov	r0, r3
    2dce:	4b0b      	ldr	r3, [pc, #44]	; (2dfc <i2c_m_sync_init+0x54>)
    2dd0:	4798      	blx	r3
    2dd2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2dd4:	68fb      	ldr	r3, [r7, #12]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d001      	beq.n	2dde <i2c_m_sync_init+0x36>
		return init_status;
    2dda:	68fb      	ldr	r3, [r7, #12]
    2ddc:	e006      	b.n	2dec <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	4a07      	ldr	r2, [pc, #28]	; (2e00 <i2c_m_sync_init+0x58>)
    2de2:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	4a07      	ldr	r2, [pc, #28]	; (2e04 <i2c_m_sync_init+0x5c>)
    2de8:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2dea:	2300      	movs	r3, #0
}
    2dec:	4618      	mov	r0, r3
    2dee:	3710      	adds	r7, #16
    2df0:	46bd      	mov	sp, r7
    2df2:	bd80      	pop	{r7, pc}
    2df4:	00013fe8 	.word	0x00013fe8
    2df8:	000040f5 	.word	0x000040f5
    2dfc:	00006f35 	.word	0x00006f35
    2e00:	00002d09 	.word	0x00002d09
    2e04:	00002d59 	.word	0x00002d59

00002e08 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	4618      	mov	r0, r3
    2e14:	4b03      	ldr	r3, [pc, #12]	; (2e24 <i2c_m_sync_enable+0x1c>)
    2e16:	4798      	blx	r3
    2e18:	4603      	mov	r3, r0
}
    2e1a:	4618      	mov	r0, r3
    2e1c:	3708      	adds	r7, #8
    2e1e:	46bd      	mov	sp, r7
    2e20:	bd80      	pop	{r7, pc}
    2e22:	bf00      	nop
    2e24:	00006f7d 	.word	0x00006f7d

00002e28 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b082      	sub	sp, #8
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	4618      	mov	r0, r3
    2e34:	4b03      	ldr	r3, [pc, #12]	; (2e44 <i2c_m_sync_disable+0x1c>)
    2e36:	4798      	blx	r3
    2e38:	4603      	mov	r3, r0
}
    2e3a:	4618      	mov	r0, r3
    2e3c:	3708      	adds	r7, #8
    2e3e:	46bd      	mov	sp, r7
    2e40:	bd80      	pop	{r7, pc}
    2e42:	bf00      	nop
    2e44:	00006fbd 	.word	0x00006fbd

00002e48 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2e48:	b480      	push	{r7}
    2e4a:	b085      	sub	sp, #20
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	60f8      	str	r0, [r7, #12]
    2e50:	460b      	mov	r3, r1
    2e52:	607a      	str	r2, [r7, #4]
    2e54:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2e56:	897b      	ldrh	r3, [r7, #10]
    2e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2e5c:	b21a      	sxth	r2, r3
    2e5e:	687b      	ldr	r3, [r7, #4]
    2e60:	b21b      	sxth	r3, r3
    2e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2e66:	b21b      	sxth	r3, r3
    2e68:	4313      	orrs	r3, r2
    2e6a:	b21b      	sxth	r3, r3
    2e6c:	b29a      	uxth	r2, r3
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	839a      	strh	r2, [r3, #28]
    2e72:	68fb      	ldr	r3, [r7, #12]
    2e74:	8b9b      	ldrh	r3, [r3, #28]
}
    2e76:	4618      	mov	r0, r3
    2e78:	3714      	adds	r7, #20
    2e7a:	46bd      	mov	sp, r7
    2e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e80:	4770      	bx	lr

00002e82 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2e82:	b480      	push	{r7}
    2e84:	b083      	sub	sp, #12
    2e86:	af00      	add	r7, sp, #0
    2e88:	6078      	str	r0, [r7, #4]
    2e8a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	f103 0214 	add.w	r2, r3, #20
    2e92:	683b      	ldr	r3, [r7, #0]
    2e94:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2e96:	2300      	movs	r3, #0
}
    2e98:	4618      	mov	r0, r3
    2e9a:	370c      	adds	r7, #12
    2e9c:	46bd      	mov	sp, r7
    2e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ea2:	4770      	bx	lr

00002ea4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	b084      	sub	sp, #16
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	60f8      	str	r0, [r7, #12]
    2eac:	60b9      	str	r1, [r7, #8]
    2eae:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2eb0:	68fb      	ldr	r3, [r7, #12]
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d004      	beq.n	2ec0 <pwm_init+0x1c>
    2eb6:	68bb      	ldr	r3, [r7, #8]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d001      	beq.n	2ec0 <pwm_init+0x1c>
    2ebc:	2301      	movs	r3, #1
    2ebe:	e000      	b.n	2ec2 <pwm_init+0x1e>
    2ec0:	2300      	movs	r3, #0
    2ec2:	f003 0301 	and.w	r3, r3, #1
    2ec6:	b2db      	uxtb	r3, r3
    2ec8:	2233      	movs	r2, #51	; 0x33
    2eca:	490a      	ldr	r1, [pc, #40]	; (2ef4 <pwm_init+0x50>)
    2ecc:	4618      	mov	r0, r3
    2ece:	4b0a      	ldr	r3, [pc, #40]	; (2ef8 <pwm_init+0x54>)
    2ed0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2ed2:	68fb      	ldr	r3, [r7, #12]
    2ed4:	68b9      	ldr	r1, [r7, #8]
    2ed6:	4618      	mov	r0, r3
    2ed8:	4b08      	ldr	r3, [pc, #32]	; (2efc <pwm_init+0x58>)
    2eda:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2edc:	68fb      	ldr	r3, [r7, #12]
    2ede:	4a08      	ldr	r2, [pc, #32]	; (2f00 <pwm_init+0x5c>)
    2ee0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	4a07      	ldr	r2, [pc, #28]	; (2f04 <pwm_init+0x60>)
    2ee6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2ee8:	2300      	movs	r3, #0
}
    2eea:	4618      	mov	r0, r3
    2eec:	3710      	adds	r7, #16
    2eee:	46bd      	mov	sp, r7
    2ef0:	bd80      	pop	{r7, pc}
    2ef2:	bf00      	nop
    2ef4:	00014004 	.word	0x00014004
    2ef8:	000040f5 	.word	0x000040f5
    2efc:	0000885d 	.word	0x0000885d
    2f00:	00002f09 	.word	0x00002f09
    2f04:	00002f2d 	.word	0x00002f2d

00002f08 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2f08:	b580      	push	{r7, lr}
    2f0a:	b084      	sub	sp, #16
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2f14:	68fb      	ldr	r3, [r7, #12]
    2f16:	695b      	ldr	r3, [r3, #20]
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d003      	beq.n	2f24 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2f1c:	68fb      	ldr	r3, [r7, #12]
    2f1e:	695b      	ldr	r3, [r3, #20]
    2f20:	68f8      	ldr	r0, [r7, #12]
    2f22:	4798      	blx	r3
	}
}
    2f24:	bf00      	nop
    2f26:	3710      	adds	r7, #16
    2f28:	46bd      	mov	sp, r7
    2f2a:	bd80      	pop	{r7, pc}

00002f2c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	b084      	sub	sp, #16
    2f30:	af00      	add	r7, sp, #0
    2f32:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2f38:	68fb      	ldr	r3, [r7, #12]
    2f3a:	699b      	ldr	r3, [r3, #24]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d003      	beq.n	2f48 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2f40:	68fb      	ldr	r3, [r7, #12]
    2f42:	699b      	ldr	r3, [r3, #24]
    2f44:	68f8      	ldr	r0, [r7, #12]
    2f46:	4798      	blx	r3
	}
}
    2f48:	bf00      	nop
    2f4a:	3710      	adds	r7, #16
    2f4c:	46bd      	mov	sp, r7
    2f4e:	bd80      	pop	{r7, pc}

00002f50 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b082      	sub	sp, #8
    2f54:	af00      	add	r7, sp, #0
    2f56:	6078      	str	r0, [r7, #4]
    2f58:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d004      	beq.n	2f6a <qspi_sync_init+0x1a>
    2f60:	683b      	ldr	r3, [r7, #0]
    2f62:	2b00      	cmp	r3, #0
    2f64:	d001      	beq.n	2f6a <qspi_sync_init+0x1a>
    2f66:	2301      	movs	r3, #1
    2f68:	e000      	b.n	2f6c <qspi_sync_init+0x1c>
    2f6a:	2300      	movs	r3, #0
    2f6c:	f003 0301 	and.w	r3, r3, #1
    2f70:	b2db      	uxtb	r3, r3
    2f72:	2231      	movs	r2, #49	; 0x31
    2f74:	4906      	ldr	r1, [pc, #24]	; (2f90 <qspi_sync_init+0x40>)
    2f76:	4618      	mov	r0, r3
    2f78:	4b06      	ldr	r3, [pc, #24]	; (2f94 <qspi_sync_init+0x44>)
    2f7a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	6839      	ldr	r1, [r7, #0]
    2f80:	4618      	mov	r0, r3
    2f82:	4b05      	ldr	r3, [pc, #20]	; (2f98 <qspi_sync_init+0x48>)
    2f84:	4798      	blx	r3
    2f86:	4603      	mov	r3, r0
}
    2f88:	4618      	mov	r0, r3
    2f8a:	3708      	adds	r7, #8
    2f8c:	46bd      	mov	sp, r7
    2f8e:	bd80      	pop	{r7, pc}
    2f90:	0001401c 	.word	0x0001401c
    2f94:	000040f5 	.word	0x000040f5
    2f98:	000060ed 	.word	0x000060ed

00002f9c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	b082      	sub	sp, #8
    2fa0:	af00      	add	r7, sp, #0
    2fa2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	bf14      	ite	ne
    2faa:	2301      	movne	r3, #1
    2fac:	2300      	moveq	r3, #0
    2fae:	b2db      	uxtb	r3, r3
    2fb0:	223f      	movs	r2, #63	; 0x3f
    2fb2:	4906      	ldr	r1, [pc, #24]	; (2fcc <qspi_sync_enable+0x30>)
    2fb4:	4618      	mov	r0, r3
    2fb6:	4b06      	ldr	r3, [pc, #24]	; (2fd0 <qspi_sync_enable+0x34>)
    2fb8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	4618      	mov	r0, r3
    2fbe:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <qspi_sync_enable+0x38>)
    2fc0:	4798      	blx	r3
    2fc2:	4603      	mov	r3, r0
}
    2fc4:	4618      	mov	r0, r3
    2fc6:	3708      	adds	r7, #8
    2fc8:	46bd      	mov	sp, r7
    2fca:	bd80      	pop	{r7, pc}
    2fcc:	0001401c 	.word	0x0001401c
    2fd0:	000040f5 	.word	0x000040f5
    2fd4:	00006161 	.word	0x00006161

00002fd8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	b082      	sub	sp, #8
    2fdc:	af00      	add	r7, sp, #0
    2fde:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	bf14      	ite	ne
    2fe6:	2301      	movne	r3, #1
    2fe8:	2300      	moveq	r3, #0
    2fea:	b2db      	uxtb	r3, r3
    2fec:	2246      	movs	r2, #70	; 0x46
    2fee:	4906      	ldr	r1, [pc, #24]	; (3008 <qspi_sync_disable+0x30>)
    2ff0:	4618      	mov	r0, r3
    2ff2:	4b06      	ldr	r3, [pc, #24]	; (300c <qspi_sync_disable+0x34>)
    2ff4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	4618      	mov	r0, r3
    2ffa:	4b05      	ldr	r3, [pc, #20]	; (3010 <qspi_sync_disable+0x38>)
    2ffc:	4798      	blx	r3
    2ffe:	4603      	mov	r3, r0
}
    3000:	4618      	mov	r0, r3
    3002:	3708      	adds	r7, #8
    3004:	46bd      	mov	sp, r7
    3006:	bd80      	pop	{r7, pc}
    3008:	0001401c 	.word	0x0001401c
    300c:	000040f5 	.word	0x000040f5
    3010:	00006185 	.word	0x00006185

00003014 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3014:	b580      	push	{r7, lr}
    3016:	b082      	sub	sp, #8
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
    301c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	2b00      	cmp	r3, #0
    3022:	d004      	beq.n	302e <qspi_sync_serial_run_command+0x1a>
    3024:	683b      	ldr	r3, [r7, #0]
    3026:	2b00      	cmp	r3, #0
    3028:	d001      	beq.n	302e <qspi_sync_serial_run_command+0x1a>
    302a:	2301      	movs	r3, #1
    302c:	e000      	b.n	3030 <qspi_sync_serial_run_command+0x1c>
    302e:	2300      	movs	r3, #0
    3030:	f003 0301 	and.w	r3, r3, #1
    3034:	b2db      	uxtb	r3, r3
    3036:	224d      	movs	r2, #77	; 0x4d
    3038:	4906      	ldr	r1, [pc, #24]	; (3054 <qspi_sync_serial_run_command+0x40>)
    303a:	4618      	mov	r0, r3
    303c:	4b06      	ldr	r3, [pc, #24]	; (3058 <qspi_sync_serial_run_command+0x44>)
    303e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	6839      	ldr	r1, [r7, #0]
    3044:	4618      	mov	r0, r3
    3046:	4b05      	ldr	r3, [pc, #20]	; (305c <qspi_sync_serial_run_command+0x48>)
    3048:	4798      	blx	r3
    304a:	4603      	mov	r3, r0
}
    304c:	4618      	mov	r0, r3
    304e:	3708      	adds	r7, #8
    3050:	46bd      	mov	sp, r7
    3052:	bd80      	pop	{r7, pc}
    3054:	0001401c 	.word	0x0001401c
    3058:	000040f5 	.word	0x000040f5
    305c:	000062d1 	.word	0x000062d1

00003060 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3060:	b580      	push	{r7, lr}
    3062:	b084      	sub	sp, #16
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
    3068:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    306a:	2300      	movs	r3, #0
    306c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	2b00      	cmp	r3, #0
    3072:	d004      	beq.n	307e <spi_m_sync_init+0x1e>
    3074:	683b      	ldr	r3, [r7, #0]
    3076:	2b00      	cmp	r3, #0
    3078:	d001      	beq.n	307e <spi_m_sync_init+0x1e>
    307a:	2301      	movs	r3, #1
    307c:	e000      	b.n	3080 <spi_m_sync_init+0x20>
    307e:	2300      	movs	r3, #0
    3080:	f003 0301 	and.w	r3, r3, #1
    3084:	b2db      	uxtb	r3, r3
    3086:	2240      	movs	r2, #64	; 0x40
    3088:	4910      	ldr	r1, [pc, #64]	; (30cc <spi_m_sync_init+0x6c>)
    308a:	4618      	mov	r0, r3
    308c:	4b10      	ldr	r3, [pc, #64]	; (30d0 <spi_m_sync_init+0x70>)
    308e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	683a      	ldr	r2, [r7, #0]
    3094:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3096:	687b      	ldr	r3, [r7, #4]
    3098:	3304      	adds	r3, #4
    309a:	6839      	ldr	r1, [r7, #0]
    309c:	4618      	mov	r0, r3
    309e:	4b0d      	ldr	r3, [pc, #52]	; (30d4 <spi_m_sync_init+0x74>)
    30a0:	4798      	blx	r3
    30a2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    30a4:	68fb      	ldr	r3, [r7, #12]
    30a6:	2b00      	cmp	r3, #0
    30a8:	da01      	bge.n	30ae <spi_m_sync_init+0x4e>
		return rc;
    30aa:	68fb      	ldr	r3, [r7, #12]
    30ac:	e00a      	b.n	30c4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    30b4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	4a07      	ldr	r2, [pc, #28]	; (30d8 <spi_m_sync_init+0x78>)
    30ba:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	4a07      	ldr	r2, [pc, #28]	; (30dc <spi_m_sync_init+0x7c>)
    30c0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    30c2:	2300      	movs	r3, #0
}
    30c4:	4618      	mov	r0, r3
    30c6:	3710      	adds	r7, #16
    30c8:	46bd      	mov	sp, r7
    30ca:	bd80      	pop	{r7, pc}
    30cc:	00014038 	.word	0x00014038
    30d0:	000040f5 	.word	0x000040f5
    30d4:	00007691 	.word	0x00007691
    30d8:	00003159 	.word	0x00003159
    30dc:	000031b1 	.word	0x000031b1

000030e0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    30e0:	b580      	push	{r7, lr}
    30e2:	b082      	sub	sp, #8
    30e4:	af00      	add	r7, sp, #0
    30e6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    30e8:	687b      	ldr	r3, [r7, #4]
    30ea:	2b00      	cmp	r3, #0
    30ec:	bf14      	ite	ne
    30ee:	2301      	movne	r3, #1
    30f0:	2300      	moveq	r3, #0
    30f2:	b2db      	uxtb	r3, r3
    30f4:	2257      	movs	r2, #87	; 0x57
    30f6:	4906      	ldr	r1, [pc, #24]	; (3110 <spi_m_sync_enable+0x30>)
    30f8:	4618      	mov	r0, r3
    30fa:	4b06      	ldr	r3, [pc, #24]	; (3114 <spi_m_sync_enable+0x34>)
    30fc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	3304      	adds	r3, #4
    3102:	4618      	mov	r0, r3
    3104:	4b04      	ldr	r3, [pc, #16]	; (3118 <spi_m_sync_enable+0x38>)
    3106:	4798      	blx	r3
}
    3108:	bf00      	nop
    310a:	3708      	adds	r7, #8
    310c:	46bd      	mov	sp, r7
    310e:	bd80      	pop	{r7, pc}
    3110:	00014038 	.word	0x00014038
    3114:	000040f5 	.word	0x000040f5
    3118:	0000779d 	.word	0x0000779d

0000311c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    311c:	b580      	push	{r7, lr}
    311e:	b082      	sub	sp, #8
    3120:	af00      	add	r7, sp, #0
    3122:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	2b00      	cmp	r3, #0
    3128:	bf14      	ite	ne
    312a:	2301      	movne	r3, #1
    312c:	2300      	moveq	r3, #0
    312e:	b2db      	uxtb	r3, r3
    3130:	225d      	movs	r2, #93	; 0x5d
    3132:	4906      	ldr	r1, [pc, #24]	; (314c <spi_m_sync_disable+0x30>)
    3134:	4618      	mov	r0, r3
    3136:	4b06      	ldr	r3, [pc, #24]	; (3150 <spi_m_sync_disable+0x34>)
    3138:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	3304      	adds	r3, #4
    313e:	4618      	mov	r0, r3
    3140:	4b04      	ldr	r3, [pc, #16]	; (3154 <spi_m_sync_disable+0x38>)
    3142:	4798      	blx	r3
}
    3144:	bf00      	nop
    3146:	3708      	adds	r7, #8
    3148:	46bd      	mov	sp, r7
    314a:	bd80      	pop	{r7, pc}
    314c:	00014038 	.word	0x00014038
    3150:	000040f5 	.word	0x000040f5
    3154:	000077ed 	.word	0x000077ed

00003158 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3158:	b580      	push	{r7, lr}
    315a:	b088      	sub	sp, #32
    315c:	af00      	add	r7, sp, #0
    315e:	60f8      	str	r0, [r7, #12]
    3160:	60b9      	str	r1, [r7, #8]
    3162:	4613      	mov	r3, r2
    3164:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3166:	68fb      	ldr	r3, [r7, #12]
    3168:	2b00      	cmp	r3, #0
    316a:	bf14      	ite	ne
    316c:	2301      	movne	r3, #1
    316e:	2300      	moveq	r3, #0
    3170:	b2db      	uxtb	r3, r3
    3172:	2287      	movs	r2, #135	; 0x87
    3174:	490b      	ldr	r1, [pc, #44]	; (31a4 <_spi_m_sync_io_read+0x4c>)
    3176:	4618      	mov	r0, r3
    3178:	4b0b      	ldr	r3, [pc, #44]	; (31a8 <_spi_m_sync_io_read+0x50>)
    317a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	3b0c      	subs	r3, #12
    3180:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3182:	68bb      	ldr	r3, [r7, #8]
    3184:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3186:	2300      	movs	r3, #0
    3188:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    318a:	88fb      	ldrh	r3, [r7, #6]
    318c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    318e:	f107 0310 	add.w	r3, r7, #16
    3192:	4619      	mov	r1, r3
    3194:	69f8      	ldr	r0, [r7, #28]
    3196:	4b05      	ldr	r3, [pc, #20]	; (31ac <_spi_m_sync_io_read+0x54>)
    3198:	4798      	blx	r3
    319a:	4603      	mov	r3, r0
}
    319c:	4618      	mov	r0, r3
    319e:	3720      	adds	r7, #32
    31a0:	46bd      	mov	sp, r7
    31a2:	bd80      	pop	{r7, pc}
    31a4:	00014038 	.word	0x00014038
    31a8:	000040f5 	.word	0x000040f5
    31ac:	00003209 	.word	0x00003209

000031b0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b088      	sub	sp, #32
    31b4:	af00      	add	r7, sp, #0
    31b6:	60f8      	str	r0, [r7, #12]
    31b8:	60b9      	str	r1, [r7, #8]
    31ba:	4613      	mov	r3, r2
    31bc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    31be:	68fb      	ldr	r3, [r7, #12]
    31c0:	2b00      	cmp	r3, #0
    31c2:	bf14      	ite	ne
    31c4:	2301      	movne	r3, #1
    31c6:	2300      	moveq	r3, #0
    31c8:	b2db      	uxtb	r3, r3
    31ca:	22a3      	movs	r2, #163	; 0xa3
    31cc:	490b      	ldr	r1, [pc, #44]	; (31fc <_spi_m_sync_io_write+0x4c>)
    31ce:	4618      	mov	r0, r3
    31d0:	4b0b      	ldr	r3, [pc, #44]	; (3200 <_spi_m_sync_io_write+0x50>)
    31d2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    31d4:	68fb      	ldr	r3, [r7, #12]
    31d6:	3b0c      	subs	r3, #12
    31d8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    31da:	2300      	movs	r3, #0
    31dc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    31de:	68bb      	ldr	r3, [r7, #8]
    31e0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    31e2:	88fb      	ldrh	r3, [r7, #6]
    31e4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    31e6:	f107 0310 	add.w	r3, r7, #16
    31ea:	4619      	mov	r1, r3
    31ec:	69f8      	ldr	r0, [r7, #28]
    31ee:	4b05      	ldr	r3, [pc, #20]	; (3204 <_spi_m_sync_io_write+0x54>)
    31f0:	4798      	blx	r3
    31f2:	4603      	mov	r3, r0
}
    31f4:	4618      	mov	r0, r3
    31f6:	3720      	adds	r7, #32
    31f8:	46bd      	mov	sp, r7
    31fa:	bd80      	pop	{r7, pc}
    31fc:	00014038 	.word	0x00014038
    3200:	000040f5 	.word	0x000040f5
    3204:	00003209 	.word	0x00003209

00003208 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3208:	b580      	push	{r7, lr}
    320a:	b086      	sub	sp, #24
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
    3210:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	2b00      	cmp	r3, #0
    3216:	d004      	beq.n	3222 <spi_m_sync_transfer+0x1a>
    3218:	683b      	ldr	r3, [r7, #0]
    321a:	2b00      	cmp	r3, #0
    321c:	d001      	beq.n	3222 <spi_m_sync_transfer+0x1a>
    321e:	2301      	movs	r3, #1
    3220:	e000      	b.n	3224 <spi_m_sync_transfer+0x1c>
    3222:	2300      	movs	r3, #0
    3224:	f003 0301 	and.w	r3, r3, #1
    3228:	b2db      	uxtb	r3, r3
    322a:	22b3      	movs	r2, #179	; 0xb3
    322c:	490c      	ldr	r1, [pc, #48]	; (3260 <spi_m_sync_transfer+0x58>)
    322e:	4618      	mov	r0, r3
    3230:	4b0c      	ldr	r3, [pc, #48]	; (3264 <spi_m_sync_transfer+0x5c>)
    3232:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3234:	683b      	ldr	r3, [r7, #0]
    3236:	681b      	ldr	r3, [r3, #0]
    3238:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    323a:	683b      	ldr	r3, [r7, #0]
    323c:	685b      	ldr	r3, [r3, #4]
    323e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3240:	683b      	ldr	r3, [r7, #0]
    3242:	689b      	ldr	r3, [r3, #8]
    3244:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	3304      	adds	r3, #4
    324a:	f107 020c 	add.w	r2, r7, #12
    324e:	4611      	mov	r1, r2
    3250:	4618      	mov	r0, r3
    3252:	4b05      	ldr	r3, [pc, #20]	; (3268 <spi_m_sync_transfer+0x60>)
    3254:	4798      	blx	r3
    3256:	4603      	mov	r3, r0
}
    3258:	4618      	mov	r0, r3
    325a:	3718      	adds	r7, #24
    325c:	46bd      	mov	sp, r7
    325e:	bd80      	pop	{r7, pc}
    3260:	00014038 	.word	0x00014038
    3264:	000040f5 	.word	0x000040f5
    3268:	00007991 	.word	0x00007991

0000326c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    326c:	b580      	push	{r7, lr}
    326e:	b082      	sub	sp, #8
    3270:	af00      	add	r7, sp, #0
    3272:	6078      	str	r0, [r7, #4]
    3274:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	2b00      	cmp	r3, #0
    327a:	d004      	beq.n	3286 <spi_m_sync_get_io_descriptor+0x1a>
    327c:	683b      	ldr	r3, [r7, #0]
    327e:	2b00      	cmp	r3, #0
    3280:	d001      	beq.n	3286 <spi_m_sync_get_io_descriptor+0x1a>
    3282:	2301      	movs	r3, #1
    3284:	e000      	b.n	3288 <spi_m_sync_get_io_descriptor+0x1c>
    3286:	2300      	movs	r3, #0
    3288:	f003 0301 	and.w	r3, r3, #1
    328c:	b2db      	uxtb	r3, r3
    328e:	22bd      	movs	r2, #189	; 0xbd
    3290:	4906      	ldr	r1, [pc, #24]	; (32ac <spi_m_sync_get_io_descriptor+0x40>)
    3292:	4618      	mov	r0, r3
    3294:	4b06      	ldr	r3, [pc, #24]	; (32b0 <spi_m_sync_get_io_descriptor+0x44>)
    3296:	4798      	blx	r3
	*io = &spi->io;
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	f103 020c 	add.w	r2, r3, #12
    329e:	683b      	ldr	r3, [r7, #0]
    32a0:	601a      	str	r2, [r3, #0]
	return 0;
    32a2:	2300      	movs	r3, #0
}
    32a4:	4618      	mov	r0, r3
    32a6:	3708      	adds	r7, #8
    32a8:	46bd      	mov	sp, r7
    32aa:	bd80      	pop	{r7, pc}
    32ac:	00014038 	.word	0x00014038
    32b0:	000040f5 	.word	0x000040f5

000032b4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    32b4:	b480      	push	{r7}
    32b6:	b083      	sub	sp, #12
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	681b      	ldr	r3, [r3, #0]
}
    32c0:	4618      	mov	r0, r3
    32c2:	370c      	adds	r7, #12
    32c4:	46bd      	mov	sp, r7
    32c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    32ca:	4770      	bx	lr

000032cc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    32cc:	b480      	push	{r7}
    32ce:	b083      	sub	sp, #12
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d002      	beq.n	32e0 <list_get_next_element+0x14>
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	e000      	b.n	32e2 <list_get_next_element+0x16>
    32e0:	2300      	movs	r3, #0
}
    32e2:	4618      	mov	r0, r3
    32e4:	370c      	adds	r7, #12
    32e6:	46bd      	mov	sp, r7
    32e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    32ec:	4770      	bx	lr
	...

000032f0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    32f0:	b580      	push	{r7, lr}
    32f2:	b084      	sub	sp, #16
    32f4:	af00      	add	r7, sp, #0
    32f6:	60f8      	str	r0, [r7, #12]
    32f8:	60b9      	str	r1, [r7, #8]
    32fa:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    32fc:	68fb      	ldr	r3, [r7, #12]
    32fe:	2b00      	cmp	r3, #0
    3300:	d007      	beq.n	3312 <timer_init+0x22>
    3302:	68bb      	ldr	r3, [r7, #8]
    3304:	2b00      	cmp	r3, #0
    3306:	d004      	beq.n	3312 <timer_init+0x22>
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	2b00      	cmp	r3, #0
    330c:	d001      	beq.n	3312 <timer_init+0x22>
    330e:	2301      	movs	r3, #1
    3310:	e000      	b.n	3314 <timer_init+0x24>
    3312:	2300      	movs	r3, #0
    3314:	f003 0301 	and.w	r3, r3, #1
    3318:	b2db      	uxtb	r3, r3
    331a:	223b      	movs	r2, #59	; 0x3b
    331c:	490c      	ldr	r1, [pc, #48]	; (3350 <timer_init+0x60>)
    331e:	4618      	mov	r0, r3
    3320:	4b0c      	ldr	r3, [pc, #48]	; (3354 <timer_init+0x64>)
    3322:	4798      	blx	r3
	descr->func = func;
    3324:	68fb      	ldr	r3, [r7, #12]
    3326:	687a      	ldr	r2, [r7, #4]
    3328:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    332a:	68fb      	ldr	r3, [r7, #12]
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	681b      	ldr	r3, [r3, #0]
    3330:	68fa      	ldr	r2, [r7, #12]
    3332:	3204      	adds	r2, #4
    3334:	68b9      	ldr	r1, [r7, #8]
    3336:	4610      	mov	r0, r2
    3338:	4798      	blx	r3
	descr->time                           = 0;
    333a:	68fb      	ldr	r3, [r7, #12]
    333c:	2200      	movs	r2, #0
    333e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3340:	68fb      	ldr	r3, [r7, #12]
    3342:	4a05      	ldr	r2, [pc, #20]	; (3358 <timer_init+0x68>)
    3344:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3346:	2300      	movs	r3, #0
}
    3348:	4618      	mov	r0, r3
    334a:	3710      	adds	r7, #16
    334c:	46bd      	mov	sp, r7
    334e:	bd80      	pop	{r7, pc}
    3350:	00014054 	.word	0x00014054
    3354:	000040f5 	.word	0x000040f5
    3358:	000036e1 	.word	0x000036e1

0000335c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    335c:	b580      	push	{r7, lr}
    335e:	b082      	sub	sp, #8
    3360:	af00      	add	r7, sp, #0
    3362:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	2b00      	cmp	r3, #0
    3368:	d005      	beq.n	3376 <timer_start+0x1a>
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	681b      	ldr	r3, [r3, #0]
    336e:	2b00      	cmp	r3, #0
    3370:	d001      	beq.n	3376 <timer_start+0x1a>
    3372:	2301      	movs	r3, #1
    3374:	e000      	b.n	3378 <timer_start+0x1c>
    3376:	2300      	movs	r3, #0
    3378:	f003 0301 	and.w	r3, r3, #1
    337c:	b2db      	uxtb	r3, r3
    337e:	2254      	movs	r2, #84	; 0x54
    3380:	490e      	ldr	r1, [pc, #56]	; (33bc <timer_start+0x60>)
    3382:	4618      	mov	r0, r3
    3384:	4b0e      	ldr	r3, [pc, #56]	; (33c0 <timer_start+0x64>)
    3386:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	681b      	ldr	r3, [r3, #0]
    338c:	699b      	ldr	r3, [r3, #24]
    338e:	687a      	ldr	r2, [r7, #4]
    3390:	3204      	adds	r2, #4
    3392:	4610      	mov	r0, r2
    3394:	4798      	blx	r3
    3396:	4603      	mov	r3, r0
    3398:	2b00      	cmp	r3, #0
    339a:	d002      	beq.n	33a2 <timer_start+0x46>
		return ERR_DENIED;
    339c:	f06f 0310 	mvn.w	r3, #16
    33a0:	e007      	b.n	33b2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	689b      	ldr	r3, [r3, #8]
    33a8:	687a      	ldr	r2, [r7, #4]
    33aa:	3204      	adds	r2, #4
    33ac:	4610      	mov	r0, r2
    33ae:	4798      	blx	r3

	return ERR_NONE;
    33b0:	2300      	movs	r3, #0
}
    33b2:	4618      	mov	r0, r3
    33b4:	3708      	adds	r7, #8
    33b6:	46bd      	mov	sp, r7
    33b8:	bd80      	pop	{r7, pc}
    33ba:	bf00      	nop
    33bc:	00014054 	.word	0x00014054
    33c0:	000040f5 	.word	0x000040f5

000033c4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	2b00      	cmp	r3, #0
    33d0:	d005      	beq.n	33de <timer_stop+0x1a>
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d001      	beq.n	33de <timer_stop+0x1a>
    33da:	2301      	movs	r3, #1
    33dc:	e000      	b.n	33e0 <timer_stop+0x1c>
    33de:	2300      	movs	r3, #0
    33e0:	f003 0301 	and.w	r3, r3, #1
    33e4:	b2db      	uxtb	r3, r3
    33e6:	2262      	movs	r2, #98	; 0x62
    33e8:	490f      	ldr	r1, [pc, #60]	; (3428 <timer_stop+0x64>)
    33ea:	4618      	mov	r0, r3
    33ec:	4b0f      	ldr	r3, [pc, #60]	; (342c <timer_stop+0x68>)
    33ee:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	681b      	ldr	r3, [r3, #0]
    33f4:	699b      	ldr	r3, [r3, #24]
    33f6:	687a      	ldr	r2, [r7, #4]
    33f8:	3204      	adds	r2, #4
    33fa:	4610      	mov	r0, r2
    33fc:	4798      	blx	r3
    33fe:	4603      	mov	r3, r0
    3400:	f083 0301 	eor.w	r3, r3, #1
    3404:	b2db      	uxtb	r3, r3
    3406:	2b00      	cmp	r3, #0
    3408:	d002      	beq.n	3410 <timer_stop+0x4c>
		return ERR_DENIED;
    340a:	f06f 0310 	mvn.w	r3, #16
    340e:	e007      	b.n	3420 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	68db      	ldr	r3, [r3, #12]
    3416:	687a      	ldr	r2, [r7, #4]
    3418:	3204      	adds	r2, #4
    341a:	4610      	mov	r0, r2
    341c:	4798      	blx	r3

	return ERR_NONE;
    341e:	2300      	movs	r3, #0
}
    3420:	4618      	mov	r0, r3
    3422:	3708      	adds	r7, #8
    3424:	46bd      	mov	sp, r7
    3426:	bd80      	pop	{r7, pc}
    3428:	00014054 	.word	0x00014054
    342c:	000040f5 	.word	0x000040f5

00003430 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3430:	b580      	push	{r7, lr}
    3432:	b084      	sub	sp, #16
    3434:	af00      	add	r7, sp, #0
    3436:	6078      	str	r0, [r7, #4]
    3438:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    343a:	687b      	ldr	r3, [r7, #4]
    343c:	2b00      	cmp	r3, #0
    343e:	d008      	beq.n	3452 <timer_add_task+0x22>
    3440:	683b      	ldr	r3, [r7, #0]
    3442:	2b00      	cmp	r3, #0
    3444:	d005      	beq.n	3452 <timer_add_task+0x22>
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	2b00      	cmp	r3, #0
    344c:	d001      	beq.n	3452 <timer_add_task+0x22>
    344e:	2301      	movs	r3, #1
    3450:	e000      	b.n	3454 <timer_add_task+0x24>
    3452:	2300      	movs	r3, #0
    3454:	f003 0301 	and.w	r3, r3, #1
    3458:	b2db      	uxtb	r3, r3
    345a:	227b      	movs	r2, #123	; 0x7b
    345c:	492f      	ldr	r1, [pc, #188]	; (351c <timer_add_task+0xec>)
    345e:	4618      	mov	r0, r3
    3460:	4b2f      	ldr	r3, [pc, #188]	; (3520 <timer_add_task+0xf0>)
    3462:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	7f1b      	ldrb	r3, [r3, #28]
    3468:	b2db      	uxtb	r3, r3
    346a:	f043 0301 	orr.w	r3, r3, #1
    346e:	b2da      	uxtb	r2, r3
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	3318      	adds	r3, #24
    3478:	6839      	ldr	r1, [r7, #0]
    347a:	4618      	mov	r0, r3
    347c:	4b29      	ldr	r3, [pc, #164]	; (3524 <timer_add_task+0xf4>)
    347e:	4798      	blx	r3
    3480:	4603      	mov	r3, r0
    3482:	2b00      	cmp	r3, #0
    3484:	d00f      	beq.n	34a6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	7f1b      	ldrb	r3, [r3, #28]
    348a:	b2db      	uxtb	r3, r3
    348c:	f023 0301 	bic.w	r3, r3, #1
    3490:	b2da      	uxtb	r2, r3
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3496:	2280      	movs	r2, #128	; 0x80
    3498:	4920      	ldr	r1, [pc, #128]	; (351c <timer_add_task+0xec>)
    349a:	2000      	movs	r0, #0
    349c:	4b20      	ldr	r3, [pc, #128]	; (3520 <timer_add_task+0xf0>)
    349e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    34a0:	f06f 0311 	mvn.w	r3, #17
    34a4:	e035      	b.n	3512 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	695a      	ldr	r2, [r3, #20]
    34aa:	683b      	ldr	r3, [r7, #0]
    34ac:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    34ae:	687b      	ldr	r3, [r7, #4]
    34b0:	f103 0018 	add.w	r0, r3, #24
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	695b      	ldr	r3, [r3, #20]
    34b8:	461a      	mov	r2, r3
    34ba:	6839      	ldr	r1, [r7, #0]
    34bc:	4b1a      	ldr	r3, [pc, #104]	; (3528 <timer_add_task+0xf8>)
    34be:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	7f1b      	ldrb	r3, [r3, #28]
    34c4:	b2db      	uxtb	r3, r3
    34c6:	f023 0301 	bic.w	r3, r3, #1
    34ca:	b2da      	uxtb	r2, r3
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	7f1b      	ldrb	r3, [r3, #28]
    34d4:	b2db      	uxtb	r3, r3
    34d6:	f003 0302 	and.w	r3, r3, #2
    34da:	2b00      	cmp	r3, #0
    34dc:	d018      	beq.n	3510 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    34de:	f107 030c 	add.w	r3, r7, #12
    34e2:	4618      	mov	r0, r3
    34e4:	4b11      	ldr	r3, [pc, #68]	; (352c <timer_add_task+0xfc>)
    34e6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	7f1b      	ldrb	r3, [r3, #28]
    34ec:	b2db      	uxtb	r3, r3
    34ee:	f023 0302 	bic.w	r3, r3, #2
    34f2:	b2da      	uxtb	r2, r3
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	69db      	ldr	r3, [r3, #28]
    34fe:	687a      	ldr	r2, [r7, #4]
    3500:	3204      	adds	r2, #4
    3502:	4610      	mov	r0, r2
    3504:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3506:	f107 030c 	add.w	r3, r7, #12
    350a:	4618      	mov	r0, r3
    350c:	4b08      	ldr	r3, [pc, #32]	; (3530 <timer_add_task+0x100>)
    350e:	4798      	blx	r3
	}

	return ERR_NONE;
    3510:	2300      	movs	r3, #0
}
    3512:	4618      	mov	r0, r3
    3514:	3710      	adds	r7, #16
    3516:	46bd      	mov	sp, r7
    3518:	bd80      	pop	{r7, pc}
    351a:	bf00      	nop
    351c:	00014054 	.word	0x00014054
    3520:	000040f5 	.word	0x000040f5
    3524:	0000411d 	.word	0x0000411d
    3528:	00003631 	.word	0x00003631
    352c:	0000bd6d 	.word	0x0000bd6d
    3530:	0000bd93 	.word	0x0000bd93

00003534 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3534:	b580      	push	{r7, lr}
    3536:	b084      	sub	sp, #16
    3538:	af00      	add	r7, sp, #0
    353a:	6078      	str	r0, [r7, #4]
    353c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	2b00      	cmp	r3, #0
    3542:	d008      	beq.n	3556 <timer_remove_task+0x22>
    3544:	683b      	ldr	r3, [r7, #0]
    3546:	2b00      	cmp	r3, #0
    3548:	d005      	beq.n	3556 <timer_remove_task+0x22>
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	681b      	ldr	r3, [r3, #0]
    354e:	2b00      	cmp	r3, #0
    3550:	d001      	beq.n	3556 <timer_remove_task+0x22>
    3552:	2301      	movs	r3, #1
    3554:	e000      	b.n	3558 <timer_remove_task+0x24>
    3556:	2300      	movs	r3, #0
    3558:	f003 0301 	and.w	r3, r3, #1
    355c:	b2db      	uxtb	r3, r3
    355e:	2296      	movs	r2, #150	; 0x96
    3560:	492d      	ldr	r1, [pc, #180]	; (3618 <timer_remove_task+0xe4>)
    3562:	4618      	mov	r0, r3
    3564:	4b2d      	ldr	r3, [pc, #180]	; (361c <timer_remove_task+0xe8>)
    3566:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	7f1b      	ldrb	r3, [r3, #28]
    356c:	b2db      	uxtb	r3, r3
    356e:	f043 0301 	orr.w	r3, r3, #1
    3572:	b2da      	uxtb	r2, r3
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	3318      	adds	r3, #24
    357c:	6839      	ldr	r1, [r7, #0]
    357e:	4618      	mov	r0, r3
    3580:	4b27      	ldr	r3, [pc, #156]	; (3620 <timer_remove_task+0xec>)
    3582:	4798      	blx	r3
    3584:	4603      	mov	r3, r0
    3586:	f083 0301 	eor.w	r3, r3, #1
    358a:	b2db      	uxtb	r3, r3
    358c:	2b00      	cmp	r3, #0
    358e:	d00f      	beq.n	35b0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	7f1b      	ldrb	r3, [r3, #28]
    3594:	b2db      	uxtb	r3, r3
    3596:	f023 0301 	bic.w	r3, r3, #1
    359a:	b2da      	uxtb	r2, r3
    359c:	687b      	ldr	r3, [r7, #4]
    359e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    35a0:	229b      	movs	r2, #155	; 0x9b
    35a2:	491d      	ldr	r1, [pc, #116]	; (3618 <timer_remove_task+0xe4>)
    35a4:	2000      	movs	r0, #0
    35a6:	4b1d      	ldr	r3, [pc, #116]	; (361c <timer_remove_task+0xe8>)
    35a8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    35aa:	f06f 0309 	mvn.w	r3, #9
    35ae:	e02e      	b.n	360e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	3318      	adds	r3, #24
    35b4:	6839      	ldr	r1, [r7, #0]
    35b6:	4618      	mov	r0, r3
    35b8:	4b1a      	ldr	r3, [pc, #104]	; (3624 <timer_remove_task+0xf0>)
    35ba:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	7f1b      	ldrb	r3, [r3, #28]
    35c0:	b2db      	uxtb	r3, r3
    35c2:	f023 0301 	bic.w	r3, r3, #1
    35c6:	b2da      	uxtb	r2, r3
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	7f1b      	ldrb	r3, [r3, #28]
    35d0:	b2db      	uxtb	r3, r3
    35d2:	f003 0302 	and.w	r3, r3, #2
    35d6:	2b00      	cmp	r3, #0
    35d8:	d018      	beq.n	360c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    35da:	f107 030c 	add.w	r3, r7, #12
    35de:	4618      	mov	r0, r3
    35e0:	4b11      	ldr	r3, [pc, #68]	; (3628 <timer_remove_task+0xf4>)
    35e2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	7f1b      	ldrb	r3, [r3, #28]
    35e8:	b2db      	uxtb	r3, r3
    35ea:	f023 0302 	bic.w	r3, r3, #2
    35ee:	b2da      	uxtb	r2, r3
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	69db      	ldr	r3, [r3, #28]
    35fa:	687a      	ldr	r2, [r7, #4]
    35fc:	3204      	adds	r2, #4
    35fe:	4610      	mov	r0, r2
    3600:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3602:	f107 030c 	add.w	r3, r7, #12
    3606:	4618      	mov	r0, r3
    3608:	4b08      	ldr	r3, [pc, #32]	; (362c <timer_remove_task+0xf8>)
    360a:	4798      	blx	r3
	}

	return ERR_NONE;
    360c:	2300      	movs	r3, #0
}
    360e:	4618      	mov	r0, r3
    3610:	3710      	adds	r7, #16
    3612:	46bd      	mov	sp, r7
    3614:	bd80      	pop	{r7, pc}
    3616:	bf00      	nop
    3618:	00014054 	.word	0x00014054
    361c:	000040f5 	.word	0x000040f5
    3620:	0000411d 	.word	0x0000411d
    3624:	0000427f 	.word	0x0000427f
    3628:	0000bd6d 	.word	0x0000bd6d
    362c:	0000bd93 	.word	0x0000bd93

00003630 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3630:	b580      	push	{r7, lr}
    3632:	b088      	sub	sp, #32
    3634:	af00      	add	r7, sp, #0
    3636:	60f8      	str	r0, [r7, #12]
    3638:	60b9      	str	r1, [r7, #8]
    363a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    363c:	2300      	movs	r3, #0
    363e:	61bb      	str	r3, [r7, #24]
    3640:	68f8      	ldr	r0, [r7, #12]
    3642:	4b23      	ldr	r3, [pc, #140]	; (36d0 <timer_add_timer_task+0xa0>)
    3644:	4798      	blx	r3
    3646:	6138      	str	r0, [r7, #16]

	if (!head) {
    3648:	693b      	ldr	r3, [r7, #16]
    364a:	2b00      	cmp	r3, #0
    364c:	d104      	bne.n	3658 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    364e:	68b9      	ldr	r1, [r7, #8]
    3650:	68f8      	ldr	r0, [r7, #12]
    3652:	4b20      	ldr	r3, [pc, #128]	; (36d4 <timer_add_timer_task+0xa4>)
    3654:	4798      	blx	r3
		return;
    3656:	e037      	b.n	36c8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3658:	693b      	ldr	r3, [r7, #16]
    365a:	61fb      	str	r3, [r7, #28]
    365c:	e022      	b.n	36a4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    365e:	69fb      	ldr	r3, [r7, #28]
    3660:	685a      	ldr	r2, [r3, #4]
    3662:	687b      	ldr	r3, [r7, #4]
    3664:	429a      	cmp	r2, r3
    3666:	d808      	bhi.n	367a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3668:	69fb      	ldr	r3, [r7, #28]
    366a:	689a      	ldr	r2, [r3, #8]
    366c:	69fb      	ldr	r3, [r7, #28]
    366e:	6859      	ldr	r1, [r3, #4]
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	1acb      	subs	r3, r1, r3
    3674:	4413      	add	r3, r2
    3676:	617b      	str	r3, [r7, #20]
    3678:	e009      	b.n	368e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    367a:	69fb      	ldr	r3, [r7, #28]
    367c:	689a      	ldr	r2, [r3, #8]
    367e:	69fb      	ldr	r3, [r7, #28]
    3680:	685b      	ldr	r3, [r3, #4]
    3682:	441a      	add	r2, r3
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	425b      	negs	r3, r3
    3688:	4413      	add	r3, r2
    368a:	3301      	adds	r3, #1
    368c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    368e:	68bb      	ldr	r3, [r7, #8]
    3690:	689a      	ldr	r2, [r3, #8]
    3692:	697b      	ldr	r3, [r7, #20]
    3694:	429a      	cmp	r2, r3
    3696:	d909      	bls.n	36ac <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3698:	69fb      	ldr	r3, [r7, #28]
    369a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    369c:	69f8      	ldr	r0, [r7, #28]
    369e:	4b0e      	ldr	r3, [pc, #56]	; (36d8 <timer_add_timer_task+0xa8>)
    36a0:	4798      	blx	r3
    36a2:	61f8      	str	r0, [r7, #28]
    36a4:	69fb      	ldr	r3, [r7, #28]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d1d9      	bne.n	365e <timer_add_timer_task+0x2e>
    36aa:	e000      	b.n	36ae <timer_add_timer_task+0x7e>
			break;
    36ac:	bf00      	nop
	}

	if (it == head) {
    36ae:	69fa      	ldr	r2, [r7, #28]
    36b0:	693b      	ldr	r3, [r7, #16]
    36b2:	429a      	cmp	r2, r3
    36b4:	d104      	bne.n	36c0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    36b6:	68b9      	ldr	r1, [r7, #8]
    36b8:	68f8      	ldr	r0, [r7, #12]
    36ba:	4b06      	ldr	r3, [pc, #24]	; (36d4 <timer_add_timer_task+0xa4>)
    36bc:	4798      	blx	r3
    36be:	e003      	b.n	36c8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    36c0:	68b9      	ldr	r1, [r7, #8]
    36c2:	69b8      	ldr	r0, [r7, #24]
    36c4:	4b05      	ldr	r3, [pc, #20]	; (36dc <timer_add_timer_task+0xac>)
    36c6:	4798      	blx	r3
	}
}
    36c8:	3720      	adds	r7, #32
    36ca:	46bd      	mov	sp, r7
    36cc:	bd80      	pop	{r7, pc}
    36ce:	bf00      	nop
    36d0:	000032b5 	.word	0x000032b5
    36d4:	00004155 	.word	0x00004155
    36d8:	000032cd 	.word	0x000032cd
    36dc:	000041ad 	.word	0x000041ad

000036e0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b086      	sub	sp, #24
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	3b04      	subs	r3, #4
    36ec:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    36ee:	693b      	ldr	r3, [r7, #16]
    36f0:	3318      	adds	r3, #24
    36f2:	4618      	mov	r0, r3
    36f4:	4b27      	ldr	r3, [pc, #156]	; (3794 <timer_process_counted+0xb4>)
    36f6:	4798      	blx	r3
    36f8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    36fa:	693b      	ldr	r3, [r7, #16]
    36fc:	695b      	ldr	r3, [r3, #20]
    36fe:	1c5a      	adds	r2, r3, #1
    3700:	693b      	ldr	r3, [r7, #16]
    3702:	615a      	str	r2, [r3, #20]
    3704:	693b      	ldr	r3, [r7, #16]
    3706:	695b      	ldr	r3, [r3, #20]
    3708:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    370a:	693b      	ldr	r3, [r7, #16]
    370c:	7f1b      	ldrb	r3, [r3, #28]
    370e:	b2db      	uxtb	r3, r3
    3710:	f003 0301 	and.w	r3, r3, #1
    3714:	2b00      	cmp	r3, #0
    3716:	d106      	bne.n	3726 <timer_process_counted+0x46>
    3718:	693b      	ldr	r3, [r7, #16]
    371a:	7f1b      	ldrb	r3, [r3, #28]
    371c:	b2db      	uxtb	r3, r3
    371e:	f003 0302 	and.w	r3, r3, #2
    3722:	2b00      	cmp	r3, #0
    3724:	d027      	beq.n	3776 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3726:	693b      	ldr	r3, [r7, #16]
    3728:	7f1b      	ldrb	r3, [r3, #28]
    372a:	b2db      	uxtb	r3, r3
    372c:	f043 0302 	orr.w	r3, r3, #2
    3730:	b2da      	uxtb	r2, r3
    3732:	693b      	ldr	r3, [r7, #16]
    3734:	771a      	strb	r2, [r3, #28]
		return;
    3736:	e029      	b.n	378c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3738:	697b      	ldr	r3, [r7, #20]
    373a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    373c:	693b      	ldr	r3, [r7, #16]
    373e:	3318      	adds	r3, #24
    3740:	4618      	mov	r0, r3
    3742:	4b15      	ldr	r3, [pc, #84]	; (3798 <timer_process_counted+0xb8>)
    3744:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3746:	68bb      	ldr	r3, [r7, #8]
    3748:	7c1b      	ldrb	r3, [r3, #16]
    374a:	2b01      	cmp	r3, #1
    374c:	d109      	bne.n	3762 <timer_process_counted+0x82>
			tmp->time_label = time;
    374e:	68bb      	ldr	r3, [r7, #8]
    3750:	68fa      	ldr	r2, [r7, #12]
    3752:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3754:	693b      	ldr	r3, [r7, #16]
    3756:	3318      	adds	r3, #24
    3758:	68fa      	ldr	r2, [r7, #12]
    375a:	68b9      	ldr	r1, [r7, #8]
    375c:	4618      	mov	r0, r3
    375e:	4b0f      	ldr	r3, [pc, #60]	; (379c <timer_process_counted+0xbc>)
    3760:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3762:	693b      	ldr	r3, [r7, #16]
    3764:	3318      	adds	r3, #24
    3766:	4618      	mov	r0, r3
    3768:	4b0a      	ldr	r3, [pc, #40]	; (3794 <timer_process_counted+0xb4>)
    376a:	4798      	blx	r3
    376c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    376e:	68bb      	ldr	r3, [r7, #8]
    3770:	68db      	ldr	r3, [r3, #12]
    3772:	68b8      	ldr	r0, [r7, #8]
    3774:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3776:	697b      	ldr	r3, [r7, #20]
    3778:	2b00      	cmp	r3, #0
    377a:	d007      	beq.n	378c <timer_process_counted+0xac>
    377c:	697b      	ldr	r3, [r7, #20]
    377e:	685b      	ldr	r3, [r3, #4]
    3780:	68fa      	ldr	r2, [r7, #12]
    3782:	1ad2      	subs	r2, r2, r3
    3784:	697b      	ldr	r3, [r7, #20]
    3786:	689b      	ldr	r3, [r3, #8]
    3788:	429a      	cmp	r2, r3
    378a:	d2d5      	bcs.n	3738 <timer_process_counted+0x58>
	}
}
    378c:	3718      	adds	r7, #24
    378e:	46bd      	mov	sp, r7
    3790:	bd80      	pop	{r7, pc}
    3792:	bf00      	nop
    3794:	000032b5 	.word	0x000032b5
    3798:	0000424d 	.word	0x0000424d
    379c:	00003631 	.word	0x00003631

000037a0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    37a0:	b480      	push	{r7}
    37a2:	b085      	sub	sp, #20
    37a4:	af00      	add	r7, sp, #0
    37a6:	4603      	mov	r3, r0
    37a8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    37aa:	2300      	movs	r3, #0
    37ac:	73fb      	strb	r3, [r7, #15]
    37ae:	e029      	b.n	3804 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    37b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37b4:	4a19      	ldr	r2, [pc, #100]	; (381c <_usb_d_find_ep+0x7c>)
    37b6:	015b      	lsls	r3, r3, #5
    37b8:	4413      	add	r3, r2
    37ba:	3301      	adds	r3, #1
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	79fa      	ldrb	r2, [r7, #7]
    37c0:	429a      	cmp	r2, r3
    37c2:	d102      	bne.n	37ca <_usb_d_find_ep+0x2a>
			return i;
    37c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37c8:	e022      	b.n	3810 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    37ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37ce:	4a13      	ldr	r2, [pc, #76]	; (381c <_usb_d_find_ep+0x7c>)
    37d0:	015b      	lsls	r3, r3, #5
    37d2:	4413      	add	r3, r2
    37d4:	781b      	ldrb	r3, [r3, #0]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d10e      	bne.n	37f8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    37da:	79fb      	ldrb	r3, [r7, #7]
    37dc:	f003 030f 	and.w	r3, r3, #15
    37e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    37e4:	490d      	ldr	r1, [pc, #52]	; (381c <_usb_d_find_ep+0x7c>)
    37e6:	0152      	lsls	r2, r2, #5
    37e8:	440a      	add	r2, r1
    37ea:	3201      	adds	r2, #1
    37ec:	7812      	ldrb	r2, [r2, #0]
    37ee:	4293      	cmp	r3, r2
    37f0:	d102      	bne.n	37f8 <_usb_d_find_ep+0x58>
			return i;
    37f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37f6:	e00b      	b.n	3810 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    37f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37fc:	b2db      	uxtb	r3, r3
    37fe:	3301      	adds	r3, #1
    3800:	b2db      	uxtb	r3, r3
    3802:	73fb      	strb	r3, [r7, #15]
    3804:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3808:	2b03      	cmp	r3, #3
    380a:	ddd1      	ble.n	37b0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    380c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3810:	4618      	mov	r0, r3
    3812:	3714      	adds	r7, #20
    3814:	46bd      	mov	sp, r7
    3816:	f85d 7b04 	ldr.w	r7, [sp], #4
    381a:	4770      	bx	lr
    381c:	20000d4c 	.word	0x20000d4c

00003820 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3820:	b580      	push	{r7, lr}
    3822:	b088      	sub	sp, #32
    3824:	af00      	add	r7, sp, #0
    3826:	60ba      	str	r2, [r7, #8]
    3828:	607b      	str	r3, [r7, #4]
    382a:	4603      	mov	r3, r0
    382c:	73fb      	strb	r3, [r7, #15]
    382e:	460b      	mov	r3, r1
    3830:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3832:	68bb      	ldr	r3, [r7, #8]
    3834:	617b      	str	r3, [r7, #20]
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	61bb      	str	r3, [r7, #24]
    383a:	7bbb      	ldrb	r3, [r7, #14]
    383c:	2b00      	cmp	r3, #0
    383e:	d004      	beq.n	384a <_usb_d_trans+0x2a>
    3840:	7bfb      	ldrb	r3, [r7, #15]
    3842:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3846:	b2db      	uxtb	r3, r3
    3848:	e003      	b.n	3852 <_usb_d_trans+0x32>
    384a:	7bfb      	ldrb	r3, [r7, #15]
    384c:	f003 030f 	and.w	r3, r3, #15
    3850:	b2db      	uxtb	r3, r3
    3852:	773b      	strb	r3, [r7, #28]
    3854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3858:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    385a:	f107 0314 	add.w	r3, r7, #20
    385e:	4618      	mov	r0, r3
    3860:	4b03      	ldr	r3, [pc, #12]	; (3870 <_usb_d_trans+0x50>)
    3862:	4798      	blx	r3
    3864:	4603      	mov	r3, r0
}
    3866:	4618      	mov	r0, r3
    3868:	3720      	adds	r7, #32
    386a:	46bd      	mov	sp, r7
    386c:	bd80      	pop	{r7, pc}
    386e:	bf00      	nop
    3870:	0000b3a1 	.word	0x0000b3a1

00003874 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3874:	b480      	push	{r7}
    3876:	b085      	sub	sp, #20
    3878:	af00      	add	r7, sp, #0
    387a:	60f8      	str	r0, [r7, #12]
    387c:	60b9      	str	r1, [r7, #8]
    387e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3880:	2300      	movs	r3, #0
}
    3882:	4618      	mov	r0, r3
    3884:	3714      	adds	r7, #20
    3886:	46bd      	mov	sp, r7
    3888:	f85d 7b04 	ldr.w	r7, [sp], #4
    388c:	4770      	bx	lr
	...

00003890 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3890:	b580      	push	{r7, lr}
    3892:	b086      	sub	sp, #24
    3894:	af00      	add	r7, sp, #0
    3896:	4603      	mov	r3, r0
    3898:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    389a:	79fb      	ldrb	r3, [r7, #7]
    389c:	4618      	mov	r0, r3
    389e:	4b2a      	ldr	r3, [pc, #168]	; (3948 <usb_d_cb_trans_setup+0xb8>)
    38a0:	4798      	blx	r3
    38a2:	4603      	mov	r3, r0
    38a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38aa:	015b      	lsls	r3, r3, #5
    38ac:	4a27      	ldr	r2, [pc, #156]	; (394c <usb_d_cb_trans_setup+0xbc>)
    38ae:	4413      	add	r3, r2
    38b0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    38b2:	693b      	ldr	r3, [r7, #16]
    38b4:	330c      	adds	r3, #12
    38b6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    38b8:	79fb      	ldrb	r3, [r7, #7]
    38ba:	68f9      	ldr	r1, [r7, #12]
    38bc:	4618      	mov	r0, r3
    38be:	4b24      	ldr	r3, [pc, #144]	; (3950 <usb_d_cb_trans_setup+0xc0>)
    38c0:	4798      	blx	r3
    38c2:	4603      	mov	r3, r0
    38c4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    38c6:	7afb      	ldrb	r3, [r7, #11]
    38c8:	2b08      	cmp	r3, #8
    38ca:	d00d      	beq.n	38e8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    38cc:	79fb      	ldrb	r3, [r7, #7]
    38ce:	2101      	movs	r1, #1
    38d0:	4618      	mov	r0, r3
    38d2:	4b20      	ldr	r3, [pc, #128]	; (3954 <usb_d_cb_trans_setup+0xc4>)
    38d4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    38d6:	79fb      	ldrb	r3, [r7, #7]
    38d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    38dc:	b2db      	uxtb	r3, r3
    38de:	2101      	movs	r1, #1
    38e0:	4618      	mov	r0, r3
    38e2:	4b1c      	ldr	r3, [pc, #112]	; (3954 <usb_d_cb_trans_setup+0xc4>)
    38e4:	4798      	blx	r3
		return;
    38e6:	e02b      	b.n	3940 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    38e8:	79fb      	ldrb	r3, [r7, #7]
    38ea:	2100      	movs	r1, #0
    38ec:	4618      	mov	r0, r3
    38ee:	4b19      	ldr	r3, [pc, #100]	; (3954 <usb_d_cb_trans_setup+0xc4>)
    38f0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    38f2:	79fb      	ldrb	r3, [r7, #7]
    38f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    38f8:	b2db      	uxtb	r3, r3
    38fa:	2100      	movs	r1, #0
    38fc:	4618      	mov	r0, r3
    38fe:	4b15      	ldr	r3, [pc, #84]	; (3954 <usb_d_cb_trans_setup+0xc4>)
    3900:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3902:	693b      	ldr	r3, [r7, #16]
    3904:	2201      	movs	r2, #1
    3906:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3908:	693b      	ldr	r3, [r7, #16]
    390a:	695b      	ldr	r3, [r3, #20]
    390c:	79fa      	ldrb	r2, [r7, #7]
    390e:	68f9      	ldr	r1, [r7, #12]
    3910:	4610      	mov	r0, r2
    3912:	4798      	blx	r3
    3914:	4603      	mov	r3, r0
    3916:	f083 0301 	eor.w	r3, r3, #1
    391a:	b2db      	uxtb	r3, r3
    391c:	2b00      	cmp	r3, #0
    391e:	d00f      	beq.n	3940 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3920:	693b      	ldr	r3, [r7, #16]
    3922:	2205      	movs	r2, #5
    3924:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3926:	79fb      	ldrb	r3, [r7, #7]
    3928:	2101      	movs	r1, #1
    392a:	4618      	mov	r0, r3
    392c:	4b09      	ldr	r3, [pc, #36]	; (3954 <usb_d_cb_trans_setup+0xc4>)
    392e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3930:	79fb      	ldrb	r3, [r7, #7]
    3932:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3936:	b2db      	uxtb	r3, r3
    3938:	2101      	movs	r1, #1
    393a:	4618      	mov	r0, r3
    393c:	4b05      	ldr	r3, [pc, #20]	; (3954 <usb_d_cb_trans_setup+0xc4>)
    393e:	4798      	blx	r3
	}
}
    3940:	3718      	adds	r7, #24
    3942:	46bd      	mov	sp, r7
    3944:	bd80      	pop	{r7, pc}
    3946:	bf00      	nop
    3948:	000037a1 	.word	0x000037a1
    394c:	20000d4c 	.word	0x20000d4c
    3950:	0000b2f9 	.word	0x0000b2f9
    3954:	0000b171 	.word	0x0000b171

00003958 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3958:	b580      	push	{r7, lr}
    395a:	b084      	sub	sp, #16
    395c:	af00      	add	r7, sp, #0
    395e:	4603      	mov	r3, r0
    3960:	6039      	str	r1, [r7, #0]
    3962:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3964:	79fb      	ldrb	r3, [r7, #7]
    3966:	4618      	mov	r0, r3
    3968:	4b0d      	ldr	r3, [pc, #52]	; (39a0 <usb_d_cb_trans_more+0x48>)
    396a:	4798      	blx	r3
    396c:	4603      	mov	r3, r0
    396e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3970:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3974:	015b      	lsls	r3, r3, #5
    3976:	4a0b      	ldr	r2, [pc, #44]	; (39a4 <usb_d_cb_trans_more+0x4c>)
    3978:	4413      	add	r3, r2
    397a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    397c:	68bb      	ldr	r3, [r7, #8]
    397e:	789b      	ldrb	r3, [r3, #2]
    3980:	2b03      	cmp	r3, #3
    3982:	d107      	bne.n	3994 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3984:	68bb      	ldr	r3, [r7, #8]
    3986:	699b      	ldr	r3, [r3, #24]
    3988:	79fa      	ldrb	r2, [r7, #7]
    398a:	6839      	ldr	r1, [r7, #0]
    398c:	4610      	mov	r0, r2
    398e:	4798      	blx	r3
    3990:	4603      	mov	r3, r0
    3992:	e000      	b.n	3996 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3994:	2300      	movs	r3, #0
}
    3996:	4618      	mov	r0, r3
    3998:	3710      	adds	r7, #16
    399a:	46bd      	mov	sp, r7
    399c:	bd80      	pop	{r7, pc}
    399e:	bf00      	nop
    39a0:	000037a1 	.word	0x000037a1
    39a4:	20000d4c 	.word	0x20000d4c

000039a8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    39a8:	b590      	push	{r4, r7, lr}
    39aa:	b087      	sub	sp, #28
    39ac:	af02      	add	r7, sp, #8
    39ae:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	789b      	ldrb	r3, [r3, #2]
    39b4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	7b1b      	ldrb	r3, [r3, #12]
    39ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    39be:	2b00      	cmp	r3, #0
    39c0:	bf14      	ite	ne
    39c2:	2301      	movne	r3, #1
    39c4:	2300      	moveq	r3, #0
    39c6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    39c8:	7bfb      	ldrb	r3, [r7, #15]
    39ca:	2b03      	cmp	r3, #3
    39cc:	d13a      	bne.n	3a44 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	69db      	ldr	r3, [r3, #28]
    39d2:	687a      	ldr	r2, [r7, #4]
    39d4:	7850      	ldrb	r0, [r2, #1]
    39d6:	687a      	ldr	r2, [r7, #4]
    39d8:	320c      	adds	r2, #12
    39da:	2101      	movs	r1, #1
    39dc:	4798      	blx	r3
    39de:	4603      	mov	r3, r0
    39e0:	737b      	strb	r3, [r7, #13]
		if (err) {
    39e2:	7b7b      	ldrb	r3, [r7, #13]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d015      	beq.n	3a14 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    39e8:	687b      	ldr	r3, [r7, #4]
    39ea:	2205      	movs	r2, #5
    39ec:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	2202      	movs	r2, #2
    39f2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    39f4:	7bbb      	ldrb	r3, [r7, #14]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d002      	beq.n	3a00 <usb_d_ctrl_trans_done+0x58>
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	785b      	ldrb	r3, [r3, #1]
    39fe:	e004      	b.n	3a0a <usb_d_ctrl_trans_done+0x62>
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	785b      	ldrb	r3, [r3, #1]
    3a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a08:	b2db      	uxtb	r3, r3
    3a0a:	2101      	movs	r1, #1
    3a0c:	4618      	mov	r0, r3
    3a0e:	4b15      	ldr	r3, [pc, #84]	; (3a64 <usb_d_ctrl_trans_done+0xbc>)
    3a10:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3a12:	e022      	b.n	3a5a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	2204      	movs	r2, #4
    3a18:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	7858      	ldrb	r0, [r3, #1]
    3a1e:	7bbb      	ldrb	r3, [r7, #14]
    3a20:	2b00      	cmp	r3, #0
    3a22:	bf14      	ite	ne
    3a24:	2301      	movne	r3, #1
    3a26:	2300      	moveq	r3, #0
    3a28:	b2db      	uxtb	r3, r3
    3a2a:	f083 0301 	eor.w	r3, r3, #1
    3a2e:	b2db      	uxtb	r3, r3
    3a30:	f003 0301 	and.w	r3, r3, #1
    3a34:	b2d9      	uxtb	r1, r3
    3a36:	2301      	movs	r3, #1
    3a38:	9300      	str	r3, [sp, #0]
    3a3a:	2300      	movs	r3, #0
    3a3c:	2200      	movs	r2, #0
    3a3e:	4c0a      	ldr	r4, [pc, #40]	; (3a68 <usb_d_ctrl_trans_done+0xc0>)
    3a40:	47a0      	blx	r4
}
    3a42:	e00a      	b.n	3a5a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	69db      	ldr	r3, [r3, #28]
    3a48:	687a      	ldr	r2, [r7, #4]
    3a4a:	7850      	ldrb	r0, [r2, #1]
    3a4c:	687a      	ldr	r2, [r7, #4]
    3a4e:	320c      	adds	r2, #12
    3a50:	2100      	movs	r1, #0
    3a52:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	2202      	movs	r2, #2
    3a58:	709a      	strb	r2, [r3, #2]
}
    3a5a:	bf00      	nop
    3a5c:	3714      	adds	r7, #20
    3a5e:	46bd      	mov	sp, r7
    3a60:	bd90      	pop	{r4, r7, pc}
    3a62:	bf00      	nop
    3a64:	0000b171 	.word	0x0000b171
    3a68:	00003821 	.word	0x00003821

00003a6c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b086      	sub	sp, #24
    3a70:	af00      	add	r7, sp, #0
    3a72:	4603      	mov	r3, r0
    3a74:	60b9      	str	r1, [r7, #8]
    3a76:	607a      	str	r2, [r7, #4]
    3a78:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a7a:	7bfb      	ldrb	r3, [r7, #15]
    3a7c:	4618      	mov	r0, r3
    3a7e:	4b2f      	ldr	r3, [pc, #188]	; (3b3c <_usb_d_cb_trans_done+0xd0>)
    3a80:	4798      	blx	r3
    3a82:	4603      	mov	r3, r0
    3a84:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a8a:	015b      	lsls	r3, r3, #5
    3a8c:	4a2c      	ldr	r2, [pc, #176]	; (3b40 <_usb_d_cb_trans_done+0xd4>)
    3a8e:	4413      	add	r3, r2
    3a90:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3a92:	68bb      	ldr	r3, [r7, #8]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d10e      	bne.n	3ab6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3a98:	693b      	ldr	r3, [r7, #16]
    3a9a:	2200      	movs	r2, #0
    3a9c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a9e:	693b      	ldr	r3, [r7, #16]
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d103      	bne.n	3aae <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3aa6:	6938      	ldr	r0, [r7, #16]
    3aa8:	4b26      	ldr	r3, [pc, #152]	; (3b44 <_usb_d_cb_trans_done+0xd8>)
    3aaa:	4798      	blx	r3
			return;
    3aac:	e043      	b.n	3b36 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3aae:	693b      	ldr	r3, [r7, #16]
    3ab0:	2201      	movs	r2, #1
    3ab2:	709a      	strb	r2, [r3, #2]
    3ab4:	e038      	b.n	3b28 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3ab6:	68bb      	ldr	r3, [r7, #8]
    3ab8:	2b01      	cmp	r3, #1
    3aba:	d113      	bne.n	3ae4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3abc:	693b      	ldr	r3, [r7, #16]
    3abe:	2202      	movs	r2, #2
    3ac0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3ac2:	693b      	ldr	r3, [r7, #16]
    3ac4:	781b      	ldrb	r3, [r3, #0]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d108      	bne.n	3adc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3aca:	693b      	ldr	r3, [r7, #16]
    3acc:	2202      	movs	r2, #2
    3ace:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3ad0:	7bfb      	ldrb	r3, [r7, #15]
    3ad2:	2100      	movs	r1, #0
    3ad4:	4618      	mov	r0, r3
    3ad6:	4b1c      	ldr	r3, [pc, #112]	; (3b48 <_usb_d_cb_trans_done+0xdc>)
    3ad8:	4798      	blx	r3
    3ada:	e025      	b.n	3b28 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3adc:	693b      	ldr	r3, [r7, #16]
    3ade:	2205      	movs	r2, #5
    3ae0:	709a      	strb	r2, [r3, #2]
    3ae2:	e021      	b.n	3b28 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3ae4:	68bb      	ldr	r3, [r7, #8]
    3ae6:	2b02      	cmp	r3, #2
    3ae8:	d10e      	bne.n	3b08 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3aea:	693b      	ldr	r3, [r7, #16]
    3aec:	2204      	movs	r2, #4
    3aee:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3af0:	693b      	ldr	r3, [r7, #16]
    3af2:	781b      	ldrb	r3, [r3, #0]
    3af4:	2b00      	cmp	r3, #0
    3af6:	d103      	bne.n	3b00 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3af8:	693b      	ldr	r3, [r7, #16]
    3afa:	2202      	movs	r2, #2
    3afc:	709a      	strb	r2, [r3, #2]
			return;
    3afe:	e01a      	b.n	3b36 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3b00:	693b      	ldr	r3, [r7, #16]
    3b02:	2201      	movs	r2, #1
    3b04:	709a      	strb	r2, [r3, #2]
    3b06:	e00f      	b.n	3b28 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3b08:	68bb      	ldr	r3, [r7, #8]
    3b0a:	2b03      	cmp	r3, #3
    3b0c:	d106      	bne.n	3b1c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3b0e:	693b      	ldr	r3, [r7, #16]
    3b10:	2200      	movs	r2, #0
    3b12:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3b14:	693b      	ldr	r3, [r7, #16]
    3b16:	2205      	movs	r2, #5
    3b18:	70da      	strb	r2, [r3, #3]
    3b1a:	e005      	b.n	3b28 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3b1c:	693b      	ldr	r3, [r7, #16]
    3b1e:	2206      	movs	r2, #6
    3b20:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3b22:	693b      	ldr	r3, [r7, #16]
    3b24:	2206      	movs	r2, #6
    3b26:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3b28:	693b      	ldr	r3, [r7, #16]
    3b2a:	69db      	ldr	r3, [r3, #28]
    3b2c:	693a      	ldr	r2, [r7, #16]
    3b2e:	78d1      	ldrb	r1, [r2, #3]
    3b30:	687a      	ldr	r2, [r7, #4]
    3b32:	7bf8      	ldrb	r0, [r7, #15]
    3b34:	4798      	blx	r3
}
    3b36:	3718      	adds	r7, #24
    3b38:	46bd      	mov	sp, r7
    3b3a:	bd80      	pop	{r7, pc}
    3b3c:	000037a1 	.word	0x000037a1
    3b40:	20000d4c 	.word	0x20000d4c
    3b44:	000039a9 	.word	0x000039a9
    3b48:	0000b171 	.word	0x0000b171

00003b4c <usb_d_init>:

int32_t usb_d_init(void)
{
    3b4c:	b580      	push	{r7, lr}
    3b4e:	b082      	sub	sp, #8
    3b50:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3b52:	4b21      	ldr	r3, [pc, #132]	; (3bd8 <usb_d_init+0x8c>)
    3b54:	4798      	blx	r3
    3b56:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3b58:	683b      	ldr	r3, [r7, #0]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	da01      	bge.n	3b62 <usb_d_init+0x16>
		return rc;
    3b5e:	683b      	ldr	r3, [r7, #0]
    3b60:	e036      	b.n	3bd0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3b62:	2280      	movs	r2, #128	; 0x80
    3b64:	2100      	movs	r1, #0
    3b66:	481d      	ldr	r0, [pc, #116]	; (3bdc <usb_d_init+0x90>)
    3b68:	4b1d      	ldr	r3, [pc, #116]	; (3be0 <usb_d_init+0x94>)
    3b6a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b6c:	2300      	movs	r3, #0
    3b6e:	71fb      	strb	r3, [r7, #7]
    3b70:	e01e      	b.n	3bb0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3b72:	79fb      	ldrb	r3, [r7, #7]
    3b74:	4a19      	ldr	r2, [pc, #100]	; (3bdc <usb_d_init+0x90>)
    3b76:	015b      	lsls	r3, r3, #5
    3b78:	4413      	add	r3, r2
    3b7a:	3301      	adds	r3, #1
    3b7c:	22ff      	movs	r2, #255	; 0xff
    3b7e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3b80:	79fb      	ldrb	r3, [r7, #7]
    3b82:	4a16      	ldr	r2, [pc, #88]	; (3bdc <usb_d_init+0x90>)
    3b84:	015b      	lsls	r3, r3, #5
    3b86:	4413      	add	r3, r2
    3b88:	3314      	adds	r3, #20
    3b8a:	4a16      	ldr	r2, [pc, #88]	; (3be4 <usb_d_init+0x98>)
    3b8c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3b8e:	79fb      	ldrb	r3, [r7, #7]
    3b90:	4a12      	ldr	r2, [pc, #72]	; (3bdc <usb_d_init+0x90>)
    3b92:	015b      	lsls	r3, r3, #5
    3b94:	4413      	add	r3, r2
    3b96:	3318      	adds	r3, #24
    3b98:	4a12      	ldr	r2, [pc, #72]	; (3be4 <usb_d_init+0x98>)
    3b9a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3b9c:	79fb      	ldrb	r3, [r7, #7]
    3b9e:	4a0f      	ldr	r2, [pc, #60]	; (3bdc <usb_d_init+0x90>)
    3ba0:	015b      	lsls	r3, r3, #5
    3ba2:	4413      	add	r3, r2
    3ba4:	331c      	adds	r3, #28
    3ba6:	4a0f      	ldr	r2, [pc, #60]	; (3be4 <usb_d_init+0x98>)
    3ba8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3baa:	79fb      	ldrb	r3, [r7, #7]
    3bac:	3301      	adds	r3, #1
    3bae:	71fb      	strb	r3, [r7, #7]
    3bb0:	79fb      	ldrb	r3, [r7, #7]
    3bb2:	2b03      	cmp	r3, #3
    3bb4:	d9dd      	bls.n	3b72 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3bb6:	490c      	ldr	r1, [pc, #48]	; (3be8 <usb_d_init+0x9c>)
    3bb8:	2000      	movs	r0, #0
    3bba:	4b0c      	ldr	r3, [pc, #48]	; (3bec <usb_d_init+0xa0>)
    3bbc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3bbe:	490c      	ldr	r1, [pc, #48]	; (3bf0 <usb_d_init+0xa4>)
    3bc0:	2001      	movs	r0, #1
    3bc2:	4b0a      	ldr	r3, [pc, #40]	; (3bec <usb_d_init+0xa0>)
    3bc4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3bc6:	490b      	ldr	r1, [pc, #44]	; (3bf4 <usb_d_init+0xa8>)
    3bc8:	2002      	movs	r0, #2
    3bca:	4b08      	ldr	r3, [pc, #32]	; (3bec <usb_d_init+0xa0>)
    3bcc:	4798      	blx	r3
	return ERR_NONE;
    3bce:	2300      	movs	r3, #0
}
    3bd0:	4618      	mov	r0, r3
    3bd2:	3708      	adds	r7, #8
    3bd4:	46bd      	mov	sp, r7
    3bd6:	bd80      	pop	{r7, pc}
    3bd8:	0000a9b9 	.word	0x0000a9b9
    3bdc:	20000d4c 	.word	0x20000d4c
    3be0:	00013c79 	.word	0x00013c79
    3be4:	00003875 	.word	0x00003875
    3be8:	00003891 	.word	0x00003891
    3bec:	0000b601 	.word	0x0000b601
    3bf0:	00003959 	.word	0x00003959
    3bf4:	00003a6d 	.word	0x00003a6d

00003bf8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b082      	sub	sp, #8
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	4603      	mov	r3, r0
    3c00:	6039      	str	r1, [r7, #0]
    3c02:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3c04:	79fb      	ldrb	r3, [r7, #7]
    3c06:	6839      	ldr	r1, [r7, #0]
    3c08:	4618      	mov	r0, r3
    3c0a:	4b03      	ldr	r3, [pc, #12]	; (3c18 <usb_d_register_callback+0x20>)
    3c0c:	4798      	blx	r3
}
    3c0e:	bf00      	nop
    3c10:	3708      	adds	r7, #8
    3c12:	46bd      	mov	sp, r7
    3c14:	bd80      	pop	{r7, pc}
    3c16:	bf00      	nop
    3c18:	0000b5b9 	.word	0x0000b5b9

00003c1c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3c1c:	b580      	push	{r7, lr}
    3c1e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3c20:	4b02      	ldr	r3, [pc, #8]	; (3c2c <usb_d_enable+0x10>)
    3c22:	4798      	blx	r3
    3c24:	4603      	mov	r3, r0
}
    3c26:	4618      	mov	r0, r3
    3c28:	bd80      	pop	{r7, pc}
    3c2a:	bf00      	nop
    3c2c:	0000aaa9 	.word	0x0000aaa9

00003c30 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3c30:	b580      	push	{r7, lr}
    3c32:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3c34:	4b01      	ldr	r3, [pc, #4]	; (3c3c <usb_d_attach+0xc>)
    3c36:	4798      	blx	r3
}
    3c38:	bf00      	nop
    3c3a:	bd80      	pop	{r7, pc}
    3c3c:	0000ab2d 	.word	0x0000ab2d

00003c40 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3c40:	b580      	push	{r7, lr}
    3c42:	b082      	sub	sp, #8
    3c44:	af00      	add	r7, sp, #0
    3c46:	4603      	mov	r3, r0
    3c48:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3c4a:	79fb      	ldrb	r3, [r7, #7]
    3c4c:	4618      	mov	r0, r3
    3c4e:	4b03      	ldr	r3, [pc, #12]	; (3c5c <usb_d_set_address+0x1c>)
    3c50:	4798      	blx	r3
}
    3c52:	bf00      	nop
    3c54:	3708      	adds	r7, #8
    3c56:	46bd      	mov	sp, r7
    3c58:	bd80      	pop	{r7, pc}
    3c5a:	bf00      	nop
    3c5c:	0000ab41 	.word	0x0000ab41

00003c60 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b082      	sub	sp, #8
    3c64:	af00      	add	r7, sp, #0
    3c66:	4603      	mov	r3, r0
    3c68:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3c6a:	79fb      	ldrb	r3, [r7, #7]
    3c6c:	b29b      	uxth	r3, r3
    3c6e:	461a      	mov	r2, r3
    3c70:	2100      	movs	r1, #0
    3c72:	2000      	movs	r0, #0
    3c74:	4b03      	ldr	r3, [pc, #12]	; (3c84 <usb_d_ep0_init+0x24>)
    3c76:	4798      	blx	r3
    3c78:	4603      	mov	r3, r0
}
    3c7a:	4618      	mov	r0, r3
    3c7c:	3708      	adds	r7, #8
    3c7e:	46bd      	mov	sp, r7
    3c80:	bd80      	pop	{r7, pc}
    3c82:	bf00      	nop
    3c84:	00003c89 	.word	0x00003c89

00003c88 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3c88:	b580      	push	{r7, lr}
    3c8a:	b086      	sub	sp, #24
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	4603      	mov	r3, r0
    3c90:	71fb      	strb	r3, [r7, #7]
    3c92:	460b      	mov	r3, r1
    3c94:	71bb      	strb	r3, [r7, #6]
    3c96:	4613      	mov	r3, r2
    3c98:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c9a:	79fb      	ldrb	r3, [r7, #7]
    3c9c:	4618      	mov	r0, r3
    3c9e:	4b1e      	ldr	r3, [pc, #120]	; (3d18 <usb_d_ep_init+0x90>)
    3ca0:	4798      	blx	r3
    3ca2:	4603      	mov	r3, r0
    3ca4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3caa:	015b      	lsls	r3, r3, #5
    3cac:	4a1b      	ldr	r2, [pc, #108]	; (3d1c <usb_d_ep_init+0x94>)
    3cae:	4413      	add	r3, r2
    3cb0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	db02      	blt.n	3cc0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3cba:	f06f 0313 	mvn.w	r3, #19
    3cbe:	e027      	b.n	3d10 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3cc0:	20ff      	movs	r0, #255	; 0xff
    3cc2:	4b15      	ldr	r3, [pc, #84]	; (3d18 <usb_d_ep_init+0x90>)
    3cc4:	4798      	blx	r3
    3cc6:	4603      	mov	r3, r0
    3cc8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cce:	2b00      	cmp	r3, #0
    3cd0:	da02      	bge.n	3cd8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3cd2:	f06f 0314 	mvn.w	r3, #20
    3cd6:	e01b      	b.n	3d10 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cdc:	015b      	lsls	r3, r3, #5
    3cde:	4a0f      	ldr	r2, [pc, #60]	; (3d1c <usb_d_ep_init+0x94>)
    3ce0:	4413      	add	r3, r2
    3ce2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3ce4:	88ba      	ldrh	r2, [r7, #4]
    3ce6:	79b9      	ldrb	r1, [r7, #6]
    3ce8:	79fb      	ldrb	r3, [r7, #7]
    3cea:	4618      	mov	r0, r3
    3cec:	4b0c      	ldr	r3, [pc, #48]	; (3d20 <usb_d_ep_init+0x98>)
    3cee:	4798      	blx	r3
    3cf0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3cf2:	68fb      	ldr	r3, [r7, #12]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	da01      	bge.n	3cfc <usb_d_ep_init+0x74>
		return rc;
    3cf8:	68fb      	ldr	r3, [r7, #12]
    3cfa:	e009      	b.n	3d10 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3cfc:	693b      	ldr	r3, [r7, #16]
    3cfe:	79fa      	ldrb	r2, [r7, #7]
    3d00:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3d02:	79bb      	ldrb	r3, [r7, #6]
    3d04:	f003 0303 	and.w	r3, r3, #3
    3d08:	b2da      	uxtb	r2, r3
    3d0a:	693b      	ldr	r3, [r7, #16]
    3d0c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3d0e:	2300      	movs	r3, #0
}
    3d10:	4618      	mov	r0, r3
    3d12:	3718      	adds	r7, #24
    3d14:	46bd      	mov	sp, r7
    3d16:	bd80      	pop	{r7, pc}
    3d18:	000037a1 	.word	0x000037a1
    3d1c:	20000d4c 	.word	0x20000d4c
    3d20:	0000abe1 	.word	0x0000abe1

00003d24 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b084      	sub	sp, #16
    3d28:	af00      	add	r7, sp, #0
    3d2a:	4603      	mov	r3, r0
    3d2c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d2e:	79fb      	ldrb	r3, [r7, #7]
    3d30:	4618      	mov	r0, r3
    3d32:	4b0d      	ldr	r3, [pc, #52]	; (3d68 <usb_d_ep_deinit+0x44>)
    3d34:	4798      	blx	r3
    3d36:	4603      	mov	r3, r0
    3d38:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3d3e:	015b      	lsls	r3, r3, #5
    3d40:	4a0a      	ldr	r2, [pc, #40]	; (3d6c <usb_d_ep_deinit+0x48>)
    3d42:	4413      	add	r3, r2
    3d44:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	db07      	blt.n	3d5e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3d4e:	79fb      	ldrb	r3, [r7, #7]
    3d50:	4618      	mov	r0, r3
    3d52:	4b07      	ldr	r3, [pc, #28]	; (3d70 <usb_d_ep_deinit+0x4c>)
    3d54:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3d56:	68bb      	ldr	r3, [r7, #8]
    3d58:	22ff      	movs	r2, #255	; 0xff
    3d5a:	705a      	strb	r2, [r3, #1]
    3d5c:	e000      	b.n	3d60 <usb_d_ep_deinit+0x3c>
		return;
    3d5e:	bf00      	nop
}
    3d60:	3710      	adds	r7, #16
    3d62:	46bd      	mov	sp, r7
    3d64:	bd80      	pop	{r7, pc}
    3d66:	bf00      	nop
    3d68:	000037a1 	.word	0x000037a1
    3d6c:	20000d4c 	.word	0x20000d4c
    3d70:	0000ad15 	.word	0x0000ad15

00003d74 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b086      	sub	sp, #24
    3d78:	af00      	add	r7, sp, #0
    3d7a:	4603      	mov	r3, r0
    3d7c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d7e:	79fb      	ldrb	r3, [r7, #7]
    3d80:	4618      	mov	r0, r3
    3d82:	4b15      	ldr	r3, [pc, #84]	; (3dd8 <usb_d_ep_enable+0x64>)
    3d84:	4798      	blx	r3
    3d86:	4603      	mov	r3, r0
    3d88:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d8e:	015b      	lsls	r3, r3, #5
    3d90:	4a12      	ldr	r2, [pc, #72]	; (3ddc <usb_d_ep_enable+0x68>)
    3d92:	4413      	add	r3, r2
    3d94:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	da02      	bge.n	3da4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3d9e:	f06f 0311 	mvn.w	r3, #17
    3da2:	e014      	b.n	3dce <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3da4:	693b      	ldr	r3, [r7, #16]
    3da6:	781b      	ldrb	r3, [r3, #0]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d101      	bne.n	3db0 <usb_d_ep_enable+0x3c>
    3dac:	2202      	movs	r2, #2
    3dae:	e000      	b.n	3db2 <usb_d_ep_enable+0x3e>
    3db0:	2201      	movs	r2, #1
    3db2:	693b      	ldr	r3, [r7, #16]
    3db4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3db6:	79fb      	ldrb	r3, [r7, #7]
    3db8:	4618      	mov	r0, r3
    3dba:	4b09      	ldr	r3, [pc, #36]	; (3de0 <usb_d_ep_enable+0x6c>)
    3dbc:	4798      	blx	r3
    3dbe:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3dc0:	68fb      	ldr	r3, [r7, #12]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	da02      	bge.n	3dcc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3dc6:	693b      	ldr	r3, [r7, #16]
    3dc8:	2200      	movs	r2, #0
    3dca:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3dcc:	68fb      	ldr	r3, [r7, #12]
}
    3dce:	4618      	mov	r0, r3
    3dd0:	3718      	adds	r7, #24
    3dd2:	46bd      	mov	sp, r7
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	bf00      	nop
    3dd8:	000037a1 	.word	0x000037a1
    3ddc:	20000d4c 	.word	0x20000d4c
    3de0:	0000adf9 	.word	0x0000adf9

00003de4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3de4:	b590      	push	{r4, r7, lr}
    3de6:	b08d      	sub	sp, #52	; 0x34
    3de8:	af02      	add	r7, sp, #8
    3dea:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	7a1b      	ldrb	r3, [r3, #8]
    3df0:	4618      	mov	r0, r3
    3df2:	4b51      	ldr	r3, [pc, #324]	; (3f38 <usb_d_ep_transfer+0x154>)
    3df4:	4798      	blx	r3
    3df6:	4603      	mov	r3, r0
    3df8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3dfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3dfe:	015b      	lsls	r3, r3, #5
    3e00:	4a4e      	ldr	r2, [pc, #312]	; (3f3c <usb_d_ep_transfer+0x158>)
    3e02:	4413      	add	r3, r2
    3e04:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	7a1b      	ldrb	r3, [r3, #8]
    3e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3e0e:	2b00      	cmp	r3, #0
    3e10:	bf14      	ite	ne
    3e12:	2301      	movne	r3, #1
    3e14:	2300      	moveq	r3, #0
    3e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	7a5b      	ldrb	r3, [r3, #9]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	bf14      	ite	ne
    3e22:	2301      	movne	r3, #1
    3e24:	2300      	moveq	r3, #0
    3e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	685b      	ldr	r3, [r3, #4]
    3e2e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3e30:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3e34:	2b00      	cmp	r3, #0
    3e36:	da02      	bge.n	3e3e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3e38:	f06f 0311 	mvn.w	r3, #17
    3e3c:	e077      	b.n	3f2e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3e3e:	f107 0308 	add.w	r3, r7, #8
    3e42:	4618      	mov	r0, r3
    3e44:	4b3e      	ldr	r3, [pc, #248]	; (3f40 <usb_d_ep_transfer+0x15c>)
    3e46:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3e48:	69bb      	ldr	r3, [r7, #24]
    3e4a:	789b      	ldrb	r3, [r3, #2]
    3e4c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3e4e:	7bfb      	ldrb	r3, [r7, #15]
    3e50:	b2db      	uxtb	r3, r3
    3e52:	2b01      	cmp	r3, #1
    3e54:	d10c      	bne.n	3e70 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3e56:	69bb      	ldr	r3, [r7, #24]
    3e58:	2203      	movs	r2, #3
    3e5a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3e5c:	f107 0308 	add.w	r3, r7, #8
    3e60:	4618      	mov	r0, r3
    3e62:	4b38      	ldr	r3, [pc, #224]	; (3f44 <usb_d_ep_transfer+0x160>)
    3e64:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3e66:	69bb      	ldr	r3, [r7, #24]
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d151      	bne.n	3f12 <usb_d_ep_transfer+0x12e>
    3e6e:	e017      	b.n	3ea0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3e70:	f107 0308 	add.w	r3, r7, #8
    3e74:	4618      	mov	r0, r3
    3e76:	4b33      	ldr	r3, [pc, #204]	; (3f44 <usb_d_ep_transfer+0x160>)
    3e78:	4798      	blx	r3
		switch (state) {
    3e7a:	7bfb      	ldrb	r3, [r7, #15]
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	2b05      	cmp	r3, #5
    3e80:	d004      	beq.n	3e8c <usb_d_ep_transfer+0xa8>
    3e82:	2b06      	cmp	r3, #6
    3e84:	d004      	beq.n	3e90 <usb_d_ep_transfer+0xac>
    3e86:	2b00      	cmp	r3, #0
    3e88:	d005      	beq.n	3e96 <usb_d_ep_transfer+0xb2>
    3e8a:	e007      	b.n	3e9c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3e8c:	2302      	movs	r3, #2
    3e8e:	e04e      	b.n	3f2e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3e90:	f06f 030f 	mvn.w	r3, #15
    3e94:	e04b      	b.n	3f2e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3e96:	f06f 0312 	mvn.w	r3, #18
    3e9a:	e048      	b.n	3f2e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3e9c:	2301      	movs	r3, #1
    3e9e:	e046      	b.n	3f2e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3ea0:	69bb      	ldr	r3, [r7, #24]
    3ea2:	7c9b      	ldrb	r3, [r3, #18]
    3ea4:	b29a      	uxth	r2, r3
    3ea6:	69bb      	ldr	r3, [r7, #24]
    3ea8:	7cdb      	ldrb	r3, [r3, #19]
    3eaa:	b29b      	uxth	r3, r3
    3eac:	021b      	lsls	r3, r3, #8
    3eae:	b29b      	uxth	r3, r3
    3eb0:	4413      	add	r3, r2
    3eb2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3eb4:	8afb      	ldrh	r3, [r7, #22]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d10b      	bne.n	3ed2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3eba:	2301      	movs	r3, #1
    3ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3ec0:	2300      	movs	r3, #0
    3ec2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3ec4:	2301      	movs	r3, #1
    3ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3eca:	69bb      	ldr	r3, [r7, #24]
    3ecc:	2204      	movs	r2, #4
    3ece:	709a      	strb	r2, [r3, #2]
    3ed0:	e01f      	b.n	3f12 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3ed2:	69bb      	ldr	r3, [r7, #24]
    3ed4:	7b1b      	ldrb	r3, [r3, #12]
    3ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3eda:	2b00      	cmp	r3, #0
    3edc:	bf14      	ite	ne
    3ede:	2301      	movne	r3, #1
    3ee0:	2300      	moveq	r3, #0
    3ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3ee6:	8afa      	ldrh	r2, [r7, #22]
    3ee8:	6a3b      	ldr	r3, [r7, #32]
    3eea:	429a      	cmp	r2, r3
    3eec:	d201      	bcs.n	3ef2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3eee:	8afb      	ldrh	r3, [r7, #22]
    3ef0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d008      	beq.n	3f0c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3efa:	8afa      	ldrh	r2, [r7, #22]
    3efc:	6a3b      	ldr	r3, [r7, #32]
    3efe:	429a      	cmp	r2, r3
    3f00:	bf8c      	ite	hi
    3f02:	2301      	movhi	r3, #1
    3f04:	2300      	movls	r3, #0
    3f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3f0a:	e002      	b.n	3f12 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3f0c:	2300      	movs	r3, #0
    3f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	7a18      	ldrb	r0, [r3, #8]
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	681a      	ldr	r2, [r3, #0]
    3f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3f1e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3f22:	9300      	str	r3, [sp, #0]
    3f24:	6a3b      	ldr	r3, [r7, #32]
    3f26:	4c08      	ldr	r4, [pc, #32]	; (3f48 <usb_d_ep_transfer+0x164>)
    3f28:	47a0      	blx	r4
    3f2a:	6138      	str	r0, [r7, #16]
	return rc;
    3f2c:	693b      	ldr	r3, [r7, #16]
}
    3f2e:	4618      	mov	r0, r3
    3f30:	372c      	adds	r7, #44	; 0x2c
    3f32:	46bd      	mov	sp, r7
    3f34:	bd90      	pop	{r4, r7, pc}
    3f36:	bf00      	nop
    3f38:	000037a1 	.word	0x000037a1
    3f3c:	20000d4c 	.word	0x20000d4c
    3f40:	0000bd6d 	.word	0x0000bd6d
    3f44:	0000bd93 	.word	0x0000bd93
    3f48:	00003821 	.word	0x00003821

00003f4c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3f4c:	b580      	push	{r7, lr}
    3f4e:	b084      	sub	sp, #16
    3f50:	af00      	add	r7, sp, #0
    3f52:	4603      	mov	r3, r0
    3f54:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3f56:	79fb      	ldrb	r3, [r7, #7]
    3f58:	4618      	mov	r0, r3
    3f5a:	4b0e      	ldr	r3, [pc, #56]	; (3f94 <usb_d_ep_abort+0x48>)
    3f5c:	4798      	blx	r3
    3f5e:	4603      	mov	r3, r0
    3f60:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f66:	015b      	lsls	r3, r3, #5
    3f68:	4a0b      	ldr	r2, [pc, #44]	; (3f98 <usb_d_ep_abort+0x4c>)
    3f6a:	4413      	add	r3, r2
    3f6c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f72:	2b00      	cmp	r3, #0
    3f74:	db0a      	blt.n	3f8c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3f76:	79fb      	ldrb	r3, [r7, #7]
    3f78:	4618      	mov	r0, r3
    3f7a:	4b08      	ldr	r3, [pc, #32]	; (3f9c <usb_d_ep_abort+0x50>)
    3f7c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3f7e:	68bb      	ldr	r3, [r7, #8]
    3f80:	2201      	movs	r2, #1
    3f82:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3f84:	68bb      	ldr	r3, [r7, #8]
    3f86:	2204      	movs	r2, #4
    3f88:	70da      	strb	r2, [r3, #3]
    3f8a:	e000      	b.n	3f8e <usb_d_ep_abort+0x42>
		return;
    3f8c:	bf00      	nop
}
    3f8e:	3710      	adds	r7, #16
    3f90:	46bd      	mov	sp, r7
    3f92:	bd80      	pop	{r7, pc}
    3f94:	000037a1 	.word	0x000037a1
    3f98:	20000d4c 	.word	0x20000d4c
    3f9c:	0000b565 	.word	0x0000b565

00003fa0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b086      	sub	sp, #24
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	4603      	mov	r3, r0
    3fa8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3faa:	79fb      	ldrb	r3, [r7, #7]
    3fac:	4618      	mov	r0, r3
    3fae:	4b1a      	ldr	r3, [pc, #104]	; (4018 <_usb_d_ep_halt_clr+0x78>)
    3fb0:	4798      	blx	r3
    3fb2:	4603      	mov	r3, r0
    3fb4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fba:	015b      	lsls	r3, r3, #5
    3fbc:	4a17      	ldr	r2, [pc, #92]	; (401c <_usb_d_ep_halt_clr+0x7c>)
    3fbe:	4413      	add	r3, r2
    3fc0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	da02      	bge.n	3fd0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3fca:	f06f 0311 	mvn.w	r3, #17
    3fce:	e01f      	b.n	4010 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3fd0:	79fb      	ldrb	r3, [r7, #7]
    3fd2:	2102      	movs	r1, #2
    3fd4:	4618      	mov	r0, r3
    3fd6:	4b12      	ldr	r3, [pc, #72]	; (4020 <_usb_d_ep_halt_clr+0x80>)
    3fd8:	4798      	blx	r3
    3fda:	4603      	mov	r3, r0
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d016      	beq.n	400e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3fe0:	79fb      	ldrb	r3, [r7, #7]
    3fe2:	2100      	movs	r1, #0
    3fe4:	4618      	mov	r0, r3
    3fe6:	4b0e      	ldr	r3, [pc, #56]	; (4020 <_usb_d_ep_halt_clr+0x80>)
    3fe8:	4798      	blx	r3
    3fea:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3fec:	68fb      	ldr	r3, [r7, #12]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	da01      	bge.n	3ff6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3ff2:	68fb      	ldr	r3, [r7, #12]
    3ff4:	e00c      	b.n	4010 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3ff6:	693b      	ldr	r3, [r7, #16]
    3ff8:	2201      	movs	r2, #1
    3ffa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3ffc:	693b      	ldr	r3, [r7, #16]
    3ffe:	2203      	movs	r2, #3
    4000:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4002:	693b      	ldr	r3, [r7, #16]
    4004:	69db      	ldr	r3, [r3, #28]
    4006:	79f8      	ldrb	r0, [r7, #7]
    4008:	2200      	movs	r2, #0
    400a:	2103      	movs	r1, #3
    400c:	4798      	blx	r3
	}
	return ERR_NONE;
    400e:	2300      	movs	r3, #0
}
    4010:	4618      	mov	r0, r3
    4012:	3718      	adds	r7, #24
    4014:	46bd      	mov	sp, r7
    4016:	bd80      	pop	{r7, pc}
    4018:	000037a1 	.word	0x000037a1
    401c:	20000d4c 	.word	0x20000d4c
    4020:	0000b171 	.word	0x0000b171

00004024 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	4603      	mov	r3, r0
    402c:	460a      	mov	r2, r1
    402e:	71fb      	strb	r3, [r7, #7]
    4030:	4613      	mov	r3, r2
    4032:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4034:	79bb      	ldrb	r3, [r7, #6]
    4036:	2b00      	cmp	r3, #0
    4038:	d105      	bne.n	4046 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    403a:	79fb      	ldrb	r3, [r7, #7]
    403c:	4618      	mov	r0, r3
    403e:	4b0c      	ldr	r3, [pc, #48]	; (4070 <usb_d_ep_halt+0x4c>)
    4040:	4798      	blx	r3
    4042:	4603      	mov	r3, r0
    4044:	e00f      	b.n	4066 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4046:	79bb      	ldrb	r3, [r7, #6]
    4048:	2b01      	cmp	r3, #1
    404a:	d106      	bne.n	405a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    404c:	79fb      	ldrb	r3, [r7, #7]
    404e:	2101      	movs	r1, #1
    4050:	4618      	mov	r0, r3
    4052:	4b08      	ldr	r3, [pc, #32]	; (4074 <usb_d_ep_halt+0x50>)
    4054:	4798      	blx	r3
    4056:	4603      	mov	r3, r0
    4058:	e005      	b.n	4066 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    405a:	79fb      	ldrb	r3, [r7, #7]
    405c:	2102      	movs	r1, #2
    405e:	4618      	mov	r0, r3
    4060:	4b04      	ldr	r3, [pc, #16]	; (4074 <usb_d_ep_halt+0x50>)
    4062:	4798      	blx	r3
    4064:	4603      	mov	r3, r0
	}
}
    4066:	4618      	mov	r0, r3
    4068:	3708      	adds	r7, #8
    406a:	46bd      	mov	sp, r7
    406c:	bd80      	pop	{r7, pc}
    406e:	bf00      	nop
    4070:	00003fa1 	.word	0x00003fa1
    4074:	0000b171 	.word	0x0000b171

00004078 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4078:	b580      	push	{r7, lr}
    407a:	b086      	sub	sp, #24
    407c:	af00      	add	r7, sp, #0
    407e:	4603      	mov	r3, r0
    4080:	603a      	str	r2, [r7, #0]
    4082:	71fb      	strb	r3, [r7, #7]
    4084:	460b      	mov	r3, r1
    4086:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4088:	79fb      	ldrb	r3, [r7, #7]
    408a:	4618      	mov	r0, r3
    408c:	4b16      	ldr	r3, [pc, #88]	; (40e8 <usb_d_ep_register_callback+0x70>)
    408e:	4798      	blx	r3
    4090:	4603      	mov	r3, r0
    4092:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4094:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4098:	015b      	lsls	r3, r3, #5
    409a:	4a14      	ldr	r2, [pc, #80]	; (40ec <usb_d_ep_register_callback+0x74>)
    409c:	4413      	add	r3, r2
    409e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    40a0:	683b      	ldr	r3, [r7, #0]
    40a2:	2b00      	cmp	r3, #0
    40a4:	d001      	beq.n	40aa <usb_d_ep_register_callback+0x32>
    40a6:	683b      	ldr	r3, [r7, #0]
    40a8:	e000      	b.n	40ac <usb_d_ep_register_callback+0x34>
    40aa:	4b11      	ldr	r3, [pc, #68]	; (40f0 <usb_d_ep_register_callback+0x78>)
    40ac:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    40ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    40b2:	2b00      	cmp	r3, #0
    40b4:	db13      	blt.n	40de <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    40b6:	79bb      	ldrb	r3, [r7, #6]
    40b8:	2b01      	cmp	r3, #1
    40ba:	d008      	beq.n	40ce <usb_d_ep_register_callback+0x56>
    40bc:	2b02      	cmp	r3, #2
    40be:	d00a      	beq.n	40d6 <usb_d_ep_register_callback+0x5e>
    40c0:	2b00      	cmp	r3, #0
    40c2:	d000      	beq.n	40c6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    40c4:	e00c      	b.n	40e0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    40c6:	693b      	ldr	r3, [r7, #16]
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	615a      	str	r2, [r3, #20]
		break;
    40cc:	e008      	b.n	40e0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    40ce:	693b      	ldr	r3, [r7, #16]
    40d0:	68fa      	ldr	r2, [r7, #12]
    40d2:	619a      	str	r2, [r3, #24]
		break;
    40d4:	e004      	b.n	40e0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    40d6:	693b      	ldr	r3, [r7, #16]
    40d8:	68fa      	ldr	r2, [r7, #12]
    40da:	61da      	str	r2, [r3, #28]
		break;
    40dc:	e000      	b.n	40e0 <usb_d_ep_register_callback+0x68>
		return;
    40de:	bf00      	nop
	}
}
    40e0:	3718      	adds	r7, #24
    40e2:	46bd      	mov	sp, r7
    40e4:	bd80      	pop	{r7, pc}
    40e6:	bf00      	nop
    40e8:	000037a1 	.word	0x000037a1
    40ec:	20000d4c 	.word	0x20000d4c
    40f0:	00003875 	.word	0x00003875

000040f4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    40f4:	b480      	push	{r7}
    40f6:	b085      	sub	sp, #20
    40f8:	af00      	add	r7, sp, #0
    40fa:	4603      	mov	r3, r0
    40fc:	60b9      	str	r1, [r7, #8]
    40fe:	607a      	str	r2, [r7, #4]
    4100:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4102:	7bfb      	ldrb	r3, [r7, #15]
    4104:	f083 0301 	eor.w	r3, r3, #1
    4108:	b2db      	uxtb	r3, r3
    410a:	2b00      	cmp	r3, #0
    410c:	d000      	beq.n	4110 <assert+0x1c>
		__asm("BKPT #0");
    410e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4110:	bf00      	nop
    4112:	3714      	adds	r7, #20
    4114:	46bd      	mov	sp, r7
    4116:	f85d 7b04 	ldr.w	r7, [sp], #4
    411a:	4770      	bx	lr

0000411c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    411c:	b480      	push	{r7}
    411e:	b085      	sub	sp, #20
    4120:	af00      	add	r7, sp, #0
    4122:	6078      	str	r0, [r7, #4]
    4124:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	681b      	ldr	r3, [r3, #0]
    412a:	60fb      	str	r3, [r7, #12]
    412c:	e008      	b.n	4140 <is_list_element+0x24>
		if (it == element) {
    412e:	68fa      	ldr	r2, [r7, #12]
    4130:	683b      	ldr	r3, [r7, #0]
    4132:	429a      	cmp	r2, r3
    4134:	d101      	bne.n	413a <is_list_element+0x1e>
			return true;
    4136:	2301      	movs	r3, #1
    4138:	e006      	b.n	4148 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    413a:	68fb      	ldr	r3, [r7, #12]
    413c:	681b      	ldr	r3, [r3, #0]
    413e:	60fb      	str	r3, [r7, #12]
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	2b00      	cmp	r3, #0
    4144:	d1f3      	bne.n	412e <is_list_element+0x12>
		}
	}

	return false;
    4146:	2300      	movs	r3, #0
}
    4148:	4618      	mov	r0, r3
    414a:	3714      	adds	r7, #20
    414c:	46bd      	mov	sp, r7
    414e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4152:	4770      	bx	lr

00004154 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4154:	b580      	push	{r7, lr}
    4156:	b082      	sub	sp, #8
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
    415c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    415e:	6839      	ldr	r1, [r7, #0]
    4160:	6878      	ldr	r0, [r7, #4]
    4162:	4b0f      	ldr	r3, [pc, #60]	; (41a0 <list_insert_as_head+0x4c>)
    4164:	4798      	blx	r3
    4166:	4603      	mov	r3, r0
    4168:	2b00      	cmp	r3, #0
    416a:	bf14      	ite	ne
    416c:	2301      	movne	r3, #1
    416e:	2300      	moveq	r3, #0
    4170:	b2db      	uxtb	r3, r3
    4172:	f083 0301 	eor.w	r3, r3, #1
    4176:	b2db      	uxtb	r3, r3
    4178:	f003 0301 	and.w	r3, r3, #1
    417c:	b2db      	uxtb	r3, r3
    417e:	2239      	movs	r2, #57	; 0x39
    4180:	4908      	ldr	r1, [pc, #32]	; (41a4 <list_insert_as_head+0x50>)
    4182:	4618      	mov	r0, r3
    4184:	4b08      	ldr	r3, [pc, #32]	; (41a8 <list_insert_as_head+0x54>)
    4186:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	681a      	ldr	r2, [r3, #0]
    418c:	683b      	ldr	r3, [r7, #0]
    418e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	683a      	ldr	r2, [r7, #0]
    4194:	601a      	str	r2, [r3, #0]
}
    4196:	bf00      	nop
    4198:	3708      	adds	r7, #8
    419a:	46bd      	mov	sp, r7
    419c:	bd80      	pop	{r7, pc}
    419e:	bf00      	nop
    41a0:	0000411d 	.word	0x0000411d
    41a4:	0001406c 	.word	0x0001406c
    41a8:	000040f5 	.word	0x000040f5

000041ac <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    41ac:	b480      	push	{r7}
    41ae:	b083      	sub	sp, #12
    41b0:	af00      	add	r7, sp, #0
    41b2:	6078      	str	r0, [r7, #4]
    41b4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	681a      	ldr	r2, [r3, #0]
    41ba:	683b      	ldr	r3, [r7, #0]
    41bc:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	683a      	ldr	r2, [r7, #0]
    41c2:	601a      	str	r2, [r3, #0]
}
    41c4:	bf00      	nop
    41c6:	370c      	adds	r7, #12
    41c8:	46bd      	mov	sp, r7
    41ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ce:	4770      	bx	lr

000041d0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    41d0:	b580      	push	{r7, lr}
    41d2:	b084      	sub	sp, #16
    41d4:	af00      	add	r7, sp, #0
    41d6:	6078      	str	r0, [r7, #4]
    41d8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	681b      	ldr	r3, [r3, #0]
    41de:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    41e0:	6839      	ldr	r1, [r7, #0]
    41e2:	6878      	ldr	r0, [r7, #4]
    41e4:	4b16      	ldr	r3, [pc, #88]	; (4240 <list_insert_at_end+0x70>)
    41e6:	4798      	blx	r3
    41e8:	4603      	mov	r3, r0
    41ea:	2b00      	cmp	r3, #0
    41ec:	bf14      	ite	ne
    41ee:	2301      	movne	r3, #1
    41f0:	2300      	moveq	r3, #0
    41f2:	b2db      	uxtb	r3, r3
    41f4:	f083 0301 	eor.w	r3, r3, #1
    41f8:	b2db      	uxtb	r3, r3
    41fa:	f003 0301 	and.w	r3, r3, #1
    41fe:	b2db      	uxtb	r3, r3
    4200:	224f      	movs	r2, #79	; 0x4f
    4202:	4910      	ldr	r1, [pc, #64]	; (4244 <list_insert_at_end+0x74>)
    4204:	4618      	mov	r0, r3
    4206:	4b10      	ldr	r3, [pc, #64]	; (4248 <list_insert_at_end+0x78>)
    4208:	4798      	blx	r3

	if (!list->head) {
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	2b00      	cmp	r3, #0
    4210:	d109      	bne.n	4226 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	683a      	ldr	r2, [r7, #0]
    4216:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4218:	683b      	ldr	r3, [r7, #0]
    421a:	2200      	movs	r2, #0
    421c:	601a      	str	r2, [r3, #0]
		return;
    421e:	e00c      	b.n	423a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4226:	68fb      	ldr	r3, [r7, #12]
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	2b00      	cmp	r3, #0
    422c:	d1f8      	bne.n	4220 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	683a      	ldr	r2, [r7, #0]
    4232:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4234:	683b      	ldr	r3, [r7, #0]
    4236:	2200      	movs	r2, #0
    4238:	601a      	str	r2, [r3, #0]
}
    423a:	3710      	adds	r7, #16
    423c:	46bd      	mov	sp, r7
    423e:	bd80      	pop	{r7, pc}
    4240:	0000411d 	.word	0x0000411d
    4244:	0001406c 	.word	0x0001406c
    4248:	000040f5 	.word	0x000040f5

0000424c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    424c:	b480      	push	{r7}
    424e:	b085      	sub	sp, #20
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	2b00      	cmp	r3, #0
    425a:	d009      	beq.n	4270 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	681a      	ldr	r2, [r3, #0]
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    426c:	68fb      	ldr	r3, [r7, #12]
    426e:	e000      	b.n	4272 <list_remove_head+0x26>
	}

	return NULL;
    4270:	2300      	movs	r3, #0
}
    4272:	4618      	mov	r0, r3
    4274:	3714      	adds	r7, #20
    4276:	46bd      	mov	sp, r7
    4278:	f85d 7b04 	ldr.w	r7, [sp], #4
    427c:	4770      	bx	lr

0000427e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    427e:	b480      	push	{r7}
    4280:	b085      	sub	sp, #20
    4282:	af00      	add	r7, sp, #0
    4284:	6078      	str	r0, [r7, #4]
    4286:	6039      	str	r1, [r7, #0]
	if (!element) {
    4288:	683b      	ldr	r3, [r7, #0]
    428a:	2b00      	cmp	r3, #0
    428c:	d101      	bne.n	4292 <list_delete_element+0x14>
		return false;
    428e:	2300      	movs	r3, #0
    4290:	e024      	b.n	42dc <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	681a      	ldr	r2, [r3, #0]
    4296:	683b      	ldr	r3, [r7, #0]
    4298:	429a      	cmp	r2, r3
    429a:	d106      	bne.n	42aa <list_delete_element+0x2c>
		list->head = list->head->next;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	681a      	ldr	r2, [r3, #0]
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	601a      	str	r2, [r3, #0]
		return true;
    42a6:	2301      	movs	r3, #1
    42a8:	e018      	b.n	42dc <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	681b      	ldr	r3, [r3, #0]
    42ae:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    42b0:	e002      	b.n	42b8 <list_delete_element+0x3a>
			it = it->next;
    42b2:	68fb      	ldr	r3, [r7, #12]
    42b4:	681b      	ldr	r3, [r3, #0]
    42b6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d004      	beq.n	42c8 <list_delete_element+0x4a>
    42be:	68fb      	ldr	r3, [r7, #12]
    42c0:	681a      	ldr	r2, [r3, #0]
    42c2:	683b      	ldr	r3, [r7, #0]
    42c4:	429a      	cmp	r2, r3
    42c6:	d1f4      	bne.n	42b2 <list_delete_element+0x34>
		}
		if (it) {
    42c8:	68fb      	ldr	r3, [r7, #12]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d005      	beq.n	42da <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    42ce:	683b      	ldr	r3, [r7, #0]
    42d0:	681a      	ldr	r2, [r3, #0]
    42d2:	68fb      	ldr	r3, [r7, #12]
    42d4:	601a      	str	r2, [r3, #0]
			return true;
    42d6:	2301      	movs	r3, #1
    42d8:	e000      	b.n	42dc <list_delete_element+0x5e>
		}
	}

	return false;
    42da:	2300      	movs	r3, #0
}
    42dc:	4618      	mov	r0, r3
    42de:	3714      	adds	r7, #20
    42e0:	46bd      	mov	sp, r7
    42e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e6:	4770      	bx	lr

000042e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    42e8:	b480      	push	{r7}
    42ea:	b083      	sub	sp, #12
    42ec:	af00      	add	r7, sp, #0
    42ee:	4603      	mov	r3, r0
    42f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    42f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42f6:	2b00      	cmp	r3, #0
    42f8:	db0b      	blt.n	4312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42fa:	4909      	ldr	r1, [pc, #36]	; (4320 <__NVIC_EnableIRQ+0x38>)
    42fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4300:	095b      	lsrs	r3, r3, #5
    4302:	88fa      	ldrh	r2, [r7, #6]
    4304:	f002 021f 	and.w	r2, r2, #31
    4308:	2001      	movs	r0, #1
    430a:	fa00 f202 	lsl.w	r2, r0, r2
    430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4312:	bf00      	nop
    4314:	370c      	adds	r7, #12
    4316:	46bd      	mov	sp, r7
    4318:	f85d 7b04 	ldr.w	r7, [sp], #4
    431c:	4770      	bx	lr
    431e:	bf00      	nop
    4320:	e000e100 	.word	0xe000e100

00004324 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4324:	b480      	push	{r7}
    4326:	b083      	sub	sp, #12
    4328:	af00      	add	r7, sp, #0
    432a:	4603      	mov	r3, r0
    432c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    432e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4332:	2b00      	cmp	r3, #0
    4334:	db10      	blt.n	4358 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4336:	490b      	ldr	r1, [pc, #44]	; (4364 <__NVIC_DisableIRQ+0x40>)
    4338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    433c:	095b      	lsrs	r3, r3, #5
    433e:	88fa      	ldrh	r2, [r7, #6]
    4340:	f002 021f 	and.w	r2, r2, #31
    4344:	2001      	movs	r0, #1
    4346:	fa00 f202 	lsl.w	r2, r0, r2
    434a:	3320      	adds	r3, #32
    434c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4354:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4358:	bf00      	nop
    435a:	370c      	adds	r7, #12
    435c:	46bd      	mov	sp, r7
    435e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4362:	4770      	bx	lr
    4364:	e000e100 	.word	0xe000e100

00004368 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4368:	b480      	push	{r7}
    436a:	b083      	sub	sp, #12
    436c:	af00      	add	r7, sp, #0
    436e:	4603      	mov	r3, r0
    4370:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4376:	2b00      	cmp	r3, #0
    4378:	db0c      	blt.n	4394 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    437a:	4909      	ldr	r1, [pc, #36]	; (43a0 <__NVIC_ClearPendingIRQ+0x38>)
    437c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4380:	095b      	lsrs	r3, r3, #5
    4382:	88fa      	ldrh	r2, [r7, #6]
    4384:	f002 021f 	and.w	r2, r2, #31
    4388:	2001      	movs	r0, #1
    438a:	fa00 f202 	lsl.w	r2, r0, r2
    438e:	3360      	adds	r3, #96	; 0x60
    4390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4394:	bf00      	nop
    4396:	370c      	adds	r7, #12
    4398:	46bd      	mov	sp, r7
    439a:	f85d 7b04 	ldr.w	r7, [sp], #4
    439e:	4770      	bx	lr
    43a0:	e000e100 	.word	0xe000e100

000043a4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    43a4:	b480      	push	{r7}
    43a6:	b083      	sub	sp, #12
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    43b0:	095b      	lsrs	r3, r3, #5
    43b2:	f003 0301 	and.w	r3, r3, #1
    43b6:	2b00      	cmp	r3, #0
    43b8:	bf14      	ite	ne
    43ba:	2301      	movne	r3, #1
    43bc:	2300      	moveq	r3, #0
    43be:	b2db      	uxtb	r3, r3
}
    43c0:	4618      	mov	r0, r3
    43c2:	370c      	adds	r7, #12
    43c4:	46bd      	mov	sp, r7
    43c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ca:	4770      	bx	lr

000043cc <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    43cc:	b480      	push	{r7}
    43ce:	b083      	sub	sp, #12
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
    43d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	683a      	ldr	r2, [r7, #0]
    43da:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43dc:	bf00      	nop
    43de:	370c      	adds	r7, #12
    43e0:	46bd      	mov	sp, r7
    43e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e6:	4770      	bx	lr

000043e8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    43e8:	b480      	push	{r7}
    43ea:	b083      	sub	sp, #12
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
    43f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	683a      	ldr	r2, [r7, #0]
    43f6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43f8:	bf00      	nop
    43fa:	370c      	adds	r7, #12
    43fc:	46bd      	mov	sp, r7
    43fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4402:	4770      	bx	lr

00004404 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4404:	b480      	push	{r7}
    4406:	b083      	sub	sp, #12
    4408:	af00      	add	r7, sp, #0
    440a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    440c:	687b      	ldr	r3, [r7, #4]
    440e:	699b      	ldr	r3, [r3, #24]
    4410:	f043 0201 	orr.w	r2, r3, #1
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4418:	bf00      	nop
    441a:	370c      	adds	r7, #12
    441c:	46bd      	mov	sp, r7
    441e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4422:	4770      	bx	lr

00004424 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4424:	b480      	push	{r7}
    4426:	b085      	sub	sp, #20
    4428:	af00      	add	r7, sp, #0
    442a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	699b      	ldr	r3, [r3, #24]
    4430:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4432:	68fb      	ldr	r3, [r7, #12]
    4434:	f003 0301 	and.w	r3, r3, #1
    4438:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    443a:	68fb      	ldr	r3, [r7, #12]
    443c:	2b00      	cmp	r3, #0
    443e:	bf14      	ite	ne
    4440:	2301      	movne	r3, #1
    4442:	2300      	moveq	r3, #0
    4444:	b2db      	uxtb	r3, r3
}
    4446:	4618      	mov	r0, r3
    4448:	3714      	adds	r7, #20
    444a:	46bd      	mov	sp, r7
    444c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4450:	4770      	bx	lr

00004452 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4452:	b480      	push	{r7}
    4454:	b083      	sub	sp, #12
    4456:	af00      	add	r7, sp, #0
    4458:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	699b      	ldr	r3, [r3, #24]
    445e:	f023 0201 	bic.w	r2, r3, #1
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4466:	bf00      	nop
    4468:	370c      	adds	r7, #12
    446a:	46bd      	mov	sp, r7
    446c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4470:	4770      	bx	lr

00004472 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4472:	b480      	push	{r7}
    4474:	b083      	sub	sp, #12
    4476:	af00      	add	r7, sp, #0
    4478:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	699b      	ldr	r3, [r3, #24]
    447e:	f043 0202 	orr.w	r2, r3, #2
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4486:	bf00      	nop
    4488:	370c      	adds	r7, #12
    448a:	46bd      	mov	sp, r7
    448c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4490:	4770      	bx	lr

00004492 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4492:	b480      	push	{r7}
    4494:	b083      	sub	sp, #12
    4496:	af00      	add	r7, sp, #0
    4498:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	699b      	ldr	r3, [r3, #24]
    449e:	f023 0202 	bic.w	r2, r3, #2
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    44a6:	bf00      	nop
    44a8:	370c      	adds	r7, #12
    44aa:	46bd      	mov	sp, r7
    44ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b0:	4770      	bx	lr

000044b2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    44b2:	b480      	push	{r7}
    44b4:	b083      	sub	sp, #12
    44b6:	af00      	add	r7, sp, #0
    44b8:	6078      	str	r0, [r7, #4]
    44ba:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	699a      	ldr	r2, [r3, #24]
    44c0:	683b      	ldr	r3, [r7, #0]
    44c2:	431a      	orrs	r2, r3
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    44c8:	bf00      	nop
    44ca:	370c      	adds	r7, #12
    44cc:	46bd      	mov	sp, r7
    44ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d2:	4770      	bx	lr

000044d4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    44d4:	b480      	push	{r7}
    44d6:	b083      	sub	sp, #12
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	683a      	ldr	r2, [r7, #0]
    44e2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    44e4:	bf00      	nop
    44e6:	370c      	adds	r7, #12
    44e8:	46bd      	mov	sp, r7
    44ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ee:	4770      	bx	lr

000044f0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    44f0:	b480      	push	{r7}
    44f2:	b083      	sub	sp, #12
    44f4:	af00      	add	r7, sp, #0
    44f6:	6078      	str	r0, [r7, #4]
    44f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    44fa:	687b      	ldr	r3, [r7, #4]
    44fc:	683a      	ldr	r2, [r7, #0]
    44fe:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4500:	bf00      	nop
    4502:	370c      	adds	r7, #12
    4504:	46bd      	mov	sp, r7
    4506:	f85d 7b04 	ldr.w	r7, [sp], #4
    450a:	4770      	bx	lr

0000450c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    450c:	b480      	push	{r7}
    450e:	b083      	sub	sp, #12
    4510:	af00      	add	r7, sp, #0
    4512:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4518:	4618      	mov	r0, r3
    451a:	370c      	adds	r7, #12
    451c:	46bd      	mov	sp, r7
    451e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4522:	4770      	bx	lr

00004524 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4524:	b480      	push	{r7}
    4526:	b083      	sub	sp, #12
    4528:	af00      	add	r7, sp, #0
    452a:	6078      	str	r0, [r7, #4]
    452c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	683a      	ldr	r2, [r7, #0]
    4532:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4534:	bf00      	nop
    4536:	370c      	adds	r7, #12
    4538:	46bd      	mov	sp, r7
    453a:	f85d 7b04 	ldr.w	r7, [sp], #4
    453e:	4770      	bx	lr

00004540 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4540:	b480      	push	{r7}
    4542:	b083      	sub	sp, #12
    4544:	af00      	add	r7, sp, #0
    4546:	6078      	str	r0, [r7, #4]
    4548:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	683a      	ldr	r2, [r7, #0]
    454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4552:	bf00      	nop
    4554:	370c      	adds	r7, #12
    4556:	46bd      	mov	sp, r7
    4558:	f85d 7b04 	ldr.w	r7, [sp], #4
    455c:	4770      	bx	lr

0000455e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    455e:	b480      	push	{r7}
    4560:	b083      	sub	sp, #12
    4562:	af00      	add	r7, sp, #0
    4564:	6078      	str	r0, [r7, #4]
    4566:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	683a      	ldr	r2, [r7, #0]
    456c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4570:	bf00      	nop
    4572:	370c      	adds	r7, #12
    4574:	46bd      	mov	sp, r7
    4576:	f85d 7b04 	ldr.w	r7, [sp], #4
    457a:	4770      	bx	lr

0000457c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    457c:	b480      	push	{r7}
    457e:	b083      	sub	sp, #12
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
    4584:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	683a      	ldr	r2, [r7, #0]
    458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    458e:	bf00      	nop
    4590:	370c      	adds	r7, #12
    4592:	46bd      	mov	sp, r7
    4594:	f85d 7b04 	ldr.w	r7, [sp], #4
    4598:	4770      	bx	lr

0000459a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    459a:	b480      	push	{r7}
    459c:	b083      	sub	sp, #12
    459e:	af00      	add	r7, sp, #0
    45a0:	6078      	str	r0, [r7, #4]
    45a2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	683a      	ldr	r2, [r7, #0]
    45a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    45ac:	bf00      	nop
    45ae:	370c      	adds	r7, #12
    45b0:	46bd      	mov	sp, r7
    45b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b6:	4770      	bx	lr

000045b8 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    45b8:	b480      	push	{r7}
    45ba:	b083      	sub	sp, #12
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	683a      	ldr	r2, [r7, #0]
    45c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    45ca:	bf00      	nop
    45cc:	370c      	adds	r7, #12
    45ce:	46bd      	mov	sp, r7
    45d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d4:	4770      	bx	lr

000045d6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    45d6:	b480      	push	{r7}
    45d8:	b083      	sub	sp, #12
    45da:	af00      	add	r7, sp, #0
    45dc:	6078      	str	r0, [r7, #4]
    45de:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    45e0:	687b      	ldr	r3, [r7, #4]
    45e2:	683a      	ldr	r2, [r7, #0]
    45e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    45e8:	bf00      	nop
    45ea:	370c      	adds	r7, #12
    45ec:	46bd      	mov	sp, r7
    45ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f2:	4770      	bx	lr

000045f4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    45f4:	b480      	push	{r7}
    45f6:	b083      	sub	sp, #12
    45f8:	af00      	add	r7, sp, #0
    45fa:	6078      	str	r0, [r7, #4]
    45fc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	683a      	ldr	r2, [r7, #0]
    4602:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4606:	bf00      	nop
    4608:	370c      	adds	r7, #12
    460a:	46bd      	mov	sp, r7
    460c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4610:	4770      	bx	lr

00004612 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4612:	b480      	push	{r7}
    4614:	b083      	sub	sp, #12
    4616:	af00      	add	r7, sp, #0
    4618:	6078      	str	r0, [r7, #4]
    461a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    461c:	687b      	ldr	r3, [r7, #4]
    461e:	683a      	ldr	r2, [r7, #0]
    4620:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4624:	bf00      	nop
    4626:	370c      	adds	r7, #12
    4628:	46bd      	mov	sp, r7
    462a:	f85d 7b04 	ldr.w	r7, [sp], #4
    462e:	4770      	bx	lr

00004630 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4630:	b480      	push	{r7}
    4632:	b083      	sub	sp, #12
    4634:	af00      	add	r7, sp, #0
    4636:	6078      	str	r0, [r7, #4]
    4638:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    463a:	687b      	ldr	r3, [r7, #4]
    463c:	683a      	ldr	r2, [r7, #0]
    463e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4642:	bf00      	nop
    4644:	370c      	adds	r7, #12
    4646:	46bd      	mov	sp, r7
    4648:	f85d 7b04 	ldr.w	r7, [sp], #4
    464c:	4770      	bx	lr
	...

00004650 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
    4656:	6078      	str	r0, [r7, #4]
    4658:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	683a      	ldr	r2, [r7, #0]
    465e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	4618      	mov	r0, r3
    4666:	4b56      	ldr	r3, [pc, #344]	; (47c0 <_can_async_init+0x170>)
    4668:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    466a:	bf00      	nop
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	681b      	ldr	r3, [r3, #0]
    4670:	4618      	mov	r0, r3
    4672:	4b54      	ldr	r3, [pc, #336]	; (47c4 <_can_async_init+0x174>)
    4674:	4798      	blx	r3
    4676:	4603      	mov	r3, r0
    4678:	f083 0301 	eor.w	r3, r3, #1
    467c:	b2db      	uxtb	r3, r3
    467e:	2b00      	cmp	r3, #0
    4680:	d1f4      	bne.n	466c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	4618      	mov	r0, r3
    4688:	4b4f      	ldr	r3, [pc, #316]	; (47c8 <_can_async_init+0x178>)
    468a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    468c:	683b      	ldr	r3, [r7, #0]
    468e:	4a4f      	ldr	r2, [pc, #316]	; (47cc <_can_async_init+0x17c>)
    4690:	4293      	cmp	r3, r2
    4692:	d17c      	bne.n	478e <_can_async_init+0x13e>
		_can1_dev    = dev;
    4694:	4a4e      	ldr	r2, [pc, #312]	; (47d0 <_can_async_init+0x180>)
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    469a:	687b      	ldr	r3, [r7, #4]
    469c:	4a4d      	ldr	r2, [pc, #308]	; (47d4 <_can_async_init+0x184>)
    469e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	f44f 7100 	mov.w	r1, #512	; 0x200
    46a8:	4618      	mov	r0, r3
    46aa:	4b4b      	ldr	r3, [pc, #300]	; (47d8 <_can_async_init+0x188>)
    46ac:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	2102      	movs	r1, #2
    46b4:	4618      	mov	r0, r3
    46b6:	4b49      	ldr	r3, [pc, #292]	; (47dc <_can_async_init+0x18c>)
    46b8:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	f640 2103 	movw	r1, #2563	; 0xa03
    46c2:	4618      	mov	r0, r3
    46c4:	4b46      	ldr	r3, [pc, #280]	; (47e0 <_can_async_init+0x190>)
    46c6:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	681b      	ldr	r3, [r3, #0]
    46cc:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    46d0:	4618      	mov	r0, r3
    46d2:	4b44      	ldr	r3, [pc, #272]	; (47e4 <_can_async_init+0x194>)
    46d4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	681a      	ldr	r2, [r3, #0]
    46da:	4b43      	ldr	r3, [pc, #268]	; (47e8 <_can_async_init+0x198>)
    46dc:	b29b      	uxth	r3, r3
    46de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    46e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    46e6:	4619      	mov	r1, r3
    46e8:	4610      	mov	r0, r2
    46ea:	4b40      	ldr	r3, [pc, #256]	; (47ec <_can_async_init+0x19c>)
    46ec:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	2107      	movs	r1, #7
    46f4:	4618      	mov	r0, r3
    46f6:	4b3e      	ldr	r3, [pc, #248]	; (47f0 <_can_async_init+0x1a0>)
    46f8:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    46fa:	687b      	ldr	r3, [r7, #4]
    46fc:	681b      	ldr	r3, [r3, #0]
    46fe:	2107      	movs	r1, #7
    4700:	4618      	mov	r0, r3
    4702:	4b3c      	ldr	r3, [pc, #240]	; (47f4 <_can_async_init+0x1a4>)
    4704:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	681a      	ldr	r2, [r3, #0]
    470a:	4b3b      	ldr	r3, [pc, #236]	; (47f8 <_can_async_init+0x1a8>)
    470c:	b29b      	uxth	r3, r3
    470e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4712:	4619      	mov	r1, r3
    4714:	4610      	mov	r0, r2
    4716:	4b39      	ldr	r3, [pc, #228]	; (47fc <_can_async_init+0x1ac>)
    4718:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	681a      	ldr	r2, [r3, #0]
    471e:	4b38      	ldr	r3, [pc, #224]	; (4800 <_can_async_init+0x1b0>)
    4720:	b29b      	uxth	r3, r3
    4722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4726:	4619      	mov	r1, r3
    4728:	4610      	mov	r0, r2
    472a:	4b36      	ldr	r3, [pc, #216]	; (4804 <_can_async_init+0x1b4>)
    472c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    472e:	687b      	ldr	r3, [r7, #4]
    4730:	681b      	ldr	r3, [r3, #0]
    4732:	2108      	movs	r1, #8
    4734:	4618      	mov	r0, r3
    4736:	4b34      	ldr	r3, [pc, #208]	; (4808 <_can_async_init+0x1b8>)
    4738:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	681a      	ldr	r2, [r3, #0]
    473e:	4b33      	ldr	r3, [pc, #204]	; (480c <_can_async_init+0x1bc>)
    4740:	b29b      	uxth	r3, r3
    4742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4746:	4619      	mov	r1, r3
    4748:	4610      	mov	r0, r2
    474a:	4b31      	ldr	r3, [pc, #196]	; (4810 <_can_async_init+0x1c0>)
    474c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	681a      	ldr	r2, [r3, #0]
    4752:	4b30      	ldr	r3, [pc, #192]	; (4814 <_can_async_init+0x1c4>)
    4754:	b29b      	uxth	r3, r3
    4756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    475a:	4619      	mov	r1, r3
    475c:	4610      	mov	r0, r2
    475e:	4b2e      	ldr	r3, [pc, #184]	; (4818 <_can_async_init+0x1c8>)
    4760:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	681b      	ldr	r3, [r3, #0]
    4766:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    476a:	4618      	mov	r0, r3
    476c:	4b2b      	ldr	r3, [pc, #172]	; (481c <_can_async_init+0x1cc>)
    476e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4770:	204f      	movs	r0, #79	; 0x4f
    4772:	4b2b      	ldr	r3, [pc, #172]	; (4820 <_can_async_init+0x1d0>)
    4774:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4776:	204f      	movs	r0, #79	; 0x4f
    4778:	4b2a      	ldr	r3, [pc, #168]	; (4824 <_can_async_init+0x1d4>)
    477a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    477c:	204f      	movs	r0, #79	; 0x4f
    477e:	4b2a      	ldr	r3, [pc, #168]	; (4828 <_can_async_init+0x1d8>)
    4780:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	681b      	ldr	r3, [r3, #0]
    4786:	2101      	movs	r1, #1
    4788:	4618      	mov	r0, r3
    478a:	4b28      	ldr	r3, [pc, #160]	; (482c <_can_async_init+0x1dc>)
    478c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	4618      	mov	r0, r3
    4794:	4b26      	ldr	r3, [pc, #152]	; (4830 <_can_async_init+0x1e0>)
    4796:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	4618      	mov	r0, r3
    479e:	4b25      	ldr	r3, [pc, #148]	; (4834 <_can_async_init+0x1e4>)
    47a0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    47a2:	bf00      	nop
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	4618      	mov	r0, r3
    47aa:	4b06      	ldr	r3, [pc, #24]	; (47c4 <_can_async_init+0x174>)
    47ac:	4798      	blx	r3
    47ae:	4603      	mov	r3, r0
    47b0:	2b00      	cmp	r3, #0
    47b2:	d1f7      	bne.n	47a4 <_can_async_init+0x154>
	};

	return ERR_NONE;
    47b4:	2300      	movs	r3, #0
}
    47b6:	4618      	mov	r0, r3
    47b8:	3708      	adds	r7, #8
    47ba:	46bd      	mov	sp, r7
    47bc:	bd80      	pop	{r7, pc}
    47be:	bf00      	nop
    47c0:	00004405 	.word	0x00004405
    47c4:	00004425 	.word	0x00004425
    47c8:	00004473 	.word	0x00004473
    47cc:	42000400 	.word	0x42000400
    47d0:	20000e6c 	.word	0x20000e6c
    47d4:	20000004 	.word	0x20000004
    47d8:	000044b3 	.word	0x000044b3
    47dc:	000043cd 	.word	0x000043cd
    47e0:	000044d5 	.word	0x000044d5
    47e4:	000043e9 	.word	0x000043e9
    47e8:	2000a1d0 	.word	0x2000a1d0
    47ec:	000045b9 	.word	0x000045b9
    47f0:	000045d7 	.word	0x000045d7
    47f4:	00004613 	.word	0x00004613
    47f8:	2000a188 	.word	0x2000a188
    47fc:	000045f5 	.word	0x000045f5
    4800:	20000dcc 	.word	0x20000dcc
    4804:	00004631 	.word	0x00004631
    4808:	00004541 	.word	0x00004541
    480c:	20000ddc 	.word	0x20000ddc
    4810:	0000455f 	.word	0x0000455f
    4814:	20000e5c 	.word	0x20000e5c
    4818:	0000457d 	.word	0x0000457d
    481c:	0000459b 	.word	0x0000459b
    4820:	00004325 	.word	0x00004325
    4824:	00004369 	.word	0x00004369
    4828:	000042e9 	.word	0x000042e9
    482c:	00004525 	.word	0x00004525
    4830:	00004493 	.word	0x00004493
    4834:	00004453 	.word	0x00004453

00004838 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4838:	b590      	push	{r4, r7, lr}
    483a:	b083      	sub	sp, #12
    483c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    483e:	4b2c      	ldr	r3, [pc, #176]	; (48f0 <CAN1_Handler+0xb8>)
    4840:	681b      	ldr	r3, [r3, #0]
    4842:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	4618      	mov	r0, r3
    484a:	4b2a      	ldr	r3, [pc, #168]	; (48f4 <CAN1_Handler+0xbc>)
    484c:	4798      	blx	r3
    484e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4850:	683b      	ldr	r3, [r7, #0]
    4852:	f003 0301 	and.w	r3, r3, #1
    4856:	2b00      	cmp	r3, #0
    4858:	d003      	beq.n	4862 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	689b      	ldr	r3, [r3, #8]
    485e:	6878      	ldr	r0, [r7, #4]
    4860:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4862:	683b      	ldr	r3, [r7, #0]
    4864:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4868:	2b00      	cmp	r3, #0
    486a:	d003      	beq.n	4874 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	685b      	ldr	r3, [r3, #4]
    4870:	6878      	ldr	r0, [r7, #4]
    4872:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4874:	683b      	ldr	r3, [r7, #0]
    4876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    487a:	2b00      	cmp	r3, #0
    487c:	d004      	beq.n	4888 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    487e:	687b      	ldr	r3, [r7, #4]
    4880:	68db      	ldr	r3, [r3, #12]
    4882:	2103      	movs	r1, #3
    4884:	6878      	ldr	r0, [r7, #4]
    4886:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4888:	683b      	ldr	r3, [r7, #0]
    488a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    488e:	2b00      	cmp	r3, #0
    4890:	d004      	beq.n	489c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	68db      	ldr	r3, [r3, #12]
    4896:	2100      	movs	r1, #0
    4898:	6878      	ldr	r0, [r7, #4]
    489a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    489c:	683b      	ldr	r3, [r7, #0]
    489e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    48a2:	2b00      	cmp	r3, #0
    48a4:	d00f      	beq.n	48c6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	68dc      	ldr	r4, [r3, #12]
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	681b      	ldr	r3, [r3, #0]
    48ae:	4618      	mov	r0, r3
    48b0:	4b11      	ldr	r3, [pc, #68]	; (48f8 <CAN1_Handler+0xc0>)
    48b2:	4798      	blx	r3
    48b4:	4603      	mov	r3, r0
    48b6:	2b00      	cmp	r3, #0
    48b8:	d001      	beq.n	48be <CAN1_Handler+0x86>
    48ba:	2302      	movs	r3, #2
    48bc:	e000      	b.n	48c0 <CAN1_Handler+0x88>
    48be:	2301      	movs	r3, #1
    48c0:	4619      	mov	r1, r3
    48c2:	6878      	ldr	r0, [r7, #4]
    48c4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    48c6:	683b      	ldr	r3, [r7, #0]
    48c8:	f003 0308 	and.w	r3, r3, #8
    48cc:	2b00      	cmp	r3, #0
    48ce:	d004      	beq.n	48da <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	68db      	ldr	r3, [r3, #12]
    48d4:	2104      	movs	r1, #4
    48d6:	6878      	ldr	r0, [r7, #4]
    48d8:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    48da:	687b      	ldr	r3, [r7, #4]
    48dc:	681b      	ldr	r3, [r3, #0]
    48de:	6839      	ldr	r1, [r7, #0]
    48e0:	4618      	mov	r0, r3
    48e2:	4b06      	ldr	r3, [pc, #24]	; (48fc <CAN1_Handler+0xc4>)
    48e4:	4798      	blx	r3
}
    48e6:	bf00      	nop
    48e8:	370c      	adds	r7, #12
    48ea:	46bd      	mov	sp, r7
    48ec:	bd90      	pop	{r4, r7, pc}
    48ee:	bf00      	nop
    48f0:	20000e6c 	.word	0x20000e6c
    48f4:	0000450d 	.word	0x0000450d
    48f8:	000043a5 	.word	0x000043a5
    48fc:	000044f1 	.word	0x000044f1

00004900 <__NVIC_SetPendingIRQ>:
{
    4900:	b480      	push	{r7}
    4902:	b083      	sub	sp, #12
    4904:	af00      	add	r7, sp, #0
    4906:	4603      	mov	r3, r0
    4908:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    490a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    490e:	2b00      	cmp	r3, #0
    4910:	db0c      	blt.n	492c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4912:	4909      	ldr	r1, [pc, #36]	; (4938 <__NVIC_SetPendingIRQ+0x38>)
    4914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4918:	095b      	lsrs	r3, r3, #5
    491a:	88fa      	ldrh	r2, [r7, #6]
    491c:	f002 021f 	and.w	r2, r2, #31
    4920:	2001      	movs	r0, #1
    4922:	fa00 f202 	lsl.w	r2, r0, r2
    4926:	3340      	adds	r3, #64	; 0x40
    4928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    492c:	bf00      	nop
    492e:	370c      	adds	r7, #12
    4930:	46bd      	mov	sp, r7
    4932:	f85d 7b04 	ldr.w	r7, [sp], #4
    4936:	4770      	bx	lr
    4938:	e000e100 	.word	0xe000e100

0000493c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    493c:	b580      	push	{r7, lr}
    493e:	b082      	sub	sp, #8
    4940:	af00      	add	r7, sp, #0
    4942:	4603      	mov	r3, r0
    4944:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4946:	79fb      	ldrb	r3, [r7, #7]
    4948:	b21b      	sxth	r3, r3
    494a:	4618      	mov	r0, r3
    494c:	4b02      	ldr	r3, [pc, #8]	; (4958 <_irq_set+0x1c>)
    494e:	4798      	blx	r3
}
    4950:	bf00      	nop
    4952:	3708      	adds	r7, #8
    4954:	46bd      	mov	sp, r7
    4956:	bd80      	pop	{r7, pc}
    4958:	00004901 	.word	0x00004901

0000495c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    495c:	b480      	push	{r7}
    495e:	b083      	sub	sp, #12
    4960:	af00      	add	r7, sp, #0
    4962:	4603      	mov	r3, r0
    4964:	6039      	str	r1, [r7, #0]
    4966:	80fb      	strh	r3, [r7, #6]
    4968:	4613      	mov	r3, r2
    496a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    496c:	797b      	ldrb	r3, [r7, #5]
    496e:	3b04      	subs	r3, #4
    4970:	2b05      	cmp	r3, #5
    4972:	d86b      	bhi.n	4a4c <_get_cycles_for_us_internal+0xf0>
    4974:	a201      	add	r2, pc, #4	; (adr r2, 497c <_get_cycles_for_us_internal+0x20>)
    4976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    497a:	bf00      	nop
    497c:	00004a2b 	.word	0x00004a2b
    4980:	00004a0b 	.word	0x00004a0b
    4984:	000049ed 	.word	0x000049ed
    4988:	000049cf 	.word	0x000049cf
    498c:	000049b1 	.word	0x000049b1
    4990:	00004995 	.word	0x00004995
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4994:	88fb      	ldrh	r3, [r7, #6]
    4996:	683a      	ldr	r2, [r7, #0]
    4998:	4935      	ldr	r1, [pc, #212]	; (4a70 <_get_cycles_for_us_internal+0x114>)
    499a:	fba1 1202 	umull	r1, r2, r1, r2
    499e:	0c92      	lsrs	r2, r2, #18
    49a0:	fb02 f303 	mul.w	r3, r2, r3
    49a4:	3302      	adds	r3, #2
    49a6:	4a33      	ldr	r2, [pc, #204]	; (4a74 <_get_cycles_for_us_internal+0x118>)
    49a8:	fba2 2303 	umull	r2, r3, r2, r3
    49ac:	085b      	lsrs	r3, r3, #1
    49ae:	e059      	b.n	4a64 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    49b0:	88fb      	ldrh	r3, [r7, #6]
    49b2:	683a      	ldr	r2, [r7, #0]
    49b4:	0952      	lsrs	r2, r2, #5
    49b6:	4930      	ldr	r1, [pc, #192]	; (4a78 <_get_cycles_for_us_internal+0x11c>)
    49b8:	fba1 1202 	umull	r1, r2, r1, r2
    49bc:	09d2      	lsrs	r2, r2, #7
    49be:	fb02 f303 	mul.w	r3, r2, r3
    49c2:	331d      	adds	r3, #29
    49c4:	4a2d      	ldr	r2, [pc, #180]	; (4a7c <_get_cycles_for_us_internal+0x120>)
    49c6:	fba2 2303 	umull	r2, r3, r2, r3
    49ca:	091b      	lsrs	r3, r3, #4
    49cc:	e04a      	b.n	4a64 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    49ce:	88fb      	ldrh	r3, [r7, #6]
    49d0:	683a      	ldr	r2, [r7, #0]
    49d2:	492b      	ldr	r1, [pc, #172]	; (4a80 <_get_cycles_for_us_internal+0x124>)
    49d4:	fba1 1202 	umull	r1, r2, r1, r2
    49d8:	0b52      	lsrs	r2, r2, #13
    49da:	fb02 f303 	mul.w	r3, r2, r3
    49de:	f203 132b 	addw	r3, r3, #299	; 0x12b
    49e2:	4a28      	ldr	r2, [pc, #160]	; (4a84 <_get_cycles_for_us_internal+0x128>)
    49e4:	fba2 2303 	umull	r2, r3, r2, r3
    49e8:	095b      	lsrs	r3, r3, #5
    49ea:	e03b      	b.n	4a64 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    49ec:	88fb      	ldrh	r3, [r7, #6]
    49ee:	683a      	ldr	r2, [r7, #0]
    49f0:	4925      	ldr	r1, [pc, #148]	; (4a88 <_get_cycles_for_us_internal+0x12c>)
    49f2:	fba1 1202 	umull	r1, r2, r1, r2
    49f6:	0992      	lsrs	r2, r2, #6
    49f8:	fb02 f303 	mul.w	r3, r2, r3
    49fc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4a00:	4a22      	ldr	r2, [pc, #136]	; (4a8c <_get_cycles_for_us_internal+0x130>)
    4a02:	fba2 2303 	umull	r2, r3, r2, r3
    4a06:	099b      	lsrs	r3, r3, #6
    4a08:	e02c      	b.n	4a64 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4a0a:	88fb      	ldrh	r3, [r7, #6]
    4a0c:	683a      	ldr	r2, [r7, #0]
    4a0e:	4920      	ldr	r1, [pc, #128]	; (4a90 <_get_cycles_for_us_internal+0x134>)
    4a10:	fba1 1202 	umull	r1, r2, r1, r2
    4a14:	0952      	lsrs	r2, r2, #5
    4a16:	fb02 f303 	mul.w	r3, r2, r3
    4a1a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4a1e:	332f      	adds	r3, #47	; 0x2f
    4a20:	4a1c      	ldr	r2, [pc, #112]	; (4a94 <_get_cycles_for_us_internal+0x138>)
    4a22:	fba2 2303 	umull	r2, r3, r2, r3
    4a26:	0b5b      	lsrs	r3, r3, #13
    4a28:	e01c      	b.n	4a64 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4a2a:	88fb      	ldrh	r3, [r7, #6]
    4a2c:	683a      	ldr	r2, [r7, #0]
    4a2e:	491a      	ldr	r1, [pc, #104]	; (4a98 <_get_cycles_for_us_internal+0x13c>)
    4a30:	fba1 1202 	umull	r1, r2, r1, r2
    4a34:	08d2      	lsrs	r2, r2, #3
    4a36:	fb02 f303 	mul.w	r3, r2, r3
    4a3a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4a3e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4a42:	4a16      	ldr	r2, [pc, #88]	; (4a9c <_get_cycles_for_us_internal+0x140>)
    4a44:	fba2 2303 	umull	r2, r3, r2, r3
    4a48:	0c5b      	lsrs	r3, r3, #17
    4a4a:	e00b      	b.n	4a64 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4a4c:	88fb      	ldrh	r3, [r7, #6]
    4a4e:	683a      	ldr	r2, [r7, #0]
    4a50:	fb02 f303 	mul.w	r3, r2, r3
    4a54:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4a58:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4a5c:	4a10      	ldr	r2, [pc, #64]	; (4aa0 <_get_cycles_for_us_internal+0x144>)
    4a5e:	fba2 2303 	umull	r2, r3, r2, r3
    4a62:	0c9b      	lsrs	r3, r3, #18
	}
}
    4a64:	4618      	mov	r0, r3
    4a66:	370c      	adds	r7, #12
    4a68:	46bd      	mov	sp, r7
    4a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a6e:	4770      	bx	lr
    4a70:	431bde83 	.word	0x431bde83
    4a74:	aaaaaaab 	.word	0xaaaaaaab
    4a78:	0a7c5ac5 	.word	0x0a7c5ac5
    4a7c:	88888889 	.word	0x88888889
    4a80:	d1b71759 	.word	0xd1b71759
    4a84:	1b4e81b5 	.word	0x1b4e81b5
    4a88:	10624dd3 	.word	0x10624dd3
    4a8c:	057619f1 	.word	0x057619f1
    4a90:	51eb851f 	.word	0x51eb851f
    4a94:	45e7b273 	.word	0x45e7b273
    4a98:	cccccccd 	.word	0xcccccccd
    4a9c:	6fd91d85 	.word	0x6fd91d85
    4aa0:	165e9f81 	.word	0x165e9f81

00004aa4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	b082      	sub	sp, #8
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	4603      	mov	r3, r0
    4aac:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4aae:	88fb      	ldrh	r3, [r7, #6]
    4ab0:	2209      	movs	r2, #9
    4ab2:	4904      	ldr	r1, [pc, #16]	; (4ac4 <_get_cycles_for_us+0x20>)
    4ab4:	4618      	mov	r0, r3
    4ab6:	4b04      	ldr	r3, [pc, #16]	; (4ac8 <_get_cycles_for_us+0x24>)
    4ab8:	4798      	blx	r3
    4aba:	4603      	mov	r3, r0
}
    4abc:	4618      	mov	r0, r3
    4abe:	3708      	adds	r7, #8
    4ac0:	46bd      	mov	sp, r7
    4ac2:	bd80      	pop	{r7, pc}
    4ac4:	07270e00 	.word	0x07270e00
    4ac8:	0000495d 	.word	0x0000495d

00004acc <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4acc:	b480      	push	{r7}
    4ace:	b083      	sub	sp, #12
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	4603      	mov	r3, r0
    4ad4:	6039      	str	r1, [r7, #0]
    4ad6:	80fb      	strh	r3, [r7, #6]
    4ad8:	4613      	mov	r3, r2
    4ada:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4adc:	797b      	ldrb	r3, [r7, #5]
    4ade:	3b04      	subs	r3, #4
    4ae0:	2b05      	cmp	r3, #5
    4ae2:	d870      	bhi.n	4bc6 <_get_cycles_for_ms_internal+0xfa>
    4ae4:	a201      	add	r2, pc, #4	; (adr r2, 4aec <_get_cycles_for_ms_internal+0x20>)
    4ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4aea:	bf00      	nop
    4aec:	00004ba9 	.word	0x00004ba9
    4af0:	00004b8d 	.word	0x00004b8d
    4af4:	00004b71 	.word	0x00004b71
    4af8:	00004b4d 	.word	0x00004b4d
    4afc:	00004b29 	.word	0x00004b29
    4b00:	00004b05 	.word	0x00004b05
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4b04:	88fb      	ldrh	r3, [r7, #6]
    4b06:	683a      	ldr	r2, [r7, #0]
    4b08:	4937      	ldr	r1, [pc, #220]	; (4be8 <_get_cycles_for_ms_internal+0x11c>)
    4b0a:	fba1 1202 	umull	r1, r2, r1, r2
    4b0e:	0c92      	lsrs	r2, r2, #18
    4b10:	fb02 f303 	mul.w	r3, r2, r3
    4b14:	3302      	adds	r3, #2
    4b16:	4a35      	ldr	r2, [pc, #212]	; (4bec <_get_cycles_for_ms_internal+0x120>)
    4b18:	fba2 2303 	umull	r2, r3, r2, r3
    4b1c:	085b      	lsrs	r3, r3, #1
    4b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b22:	fb02 f303 	mul.w	r3, r2, r3
    4b26:	e058      	b.n	4bda <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4b28:	88fb      	ldrh	r3, [r7, #6]
    4b2a:	683a      	ldr	r2, [r7, #0]
    4b2c:	0952      	lsrs	r2, r2, #5
    4b2e:	4930      	ldr	r1, [pc, #192]	; (4bf0 <_get_cycles_for_ms_internal+0x124>)
    4b30:	fba1 1202 	umull	r1, r2, r1, r2
    4b34:	09d2      	lsrs	r2, r2, #7
    4b36:	fb02 f303 	mul.w	r3, r2, r3
    4b3a:	3302      	adds	r3, #2
    4b3c:	4a2b      	ldr	r2, [pc, #172]	; (4bec <_get_cycles_for_ms_internal+0x120>)
    4b3e:	fba2 2303 	umull	r2, r3, r2, r3
    4b42:	085b      	lsrs	r3, r3, #1
    4b44:	2264      	movs	r2, #100	; 0x64
    4b46:	fb02 f303 	mul.w	r3, r2, r3
    4b4a:	e046      	b.n	4bda <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4b4c:	88fb      	ldrh	r3, [r7, #6]
    4b4e:	683a      	ldr	r2, [r7, #0]
    4b50:	4928      	ldr	r1, [pc, #160]	; (4bf4 <_get_cycles_for_ms_internal+0x128>)
    4b52:	fba1 1202 	umull	r1, r2, r1, r2
    4b56:	0b52      	lsrs	r2, r2, #13
    4b58:	fb02 f303 	mul.w	r3, r2, r3
    4b5c:	3302      	adds	r3, #2
    4b5e:	4a23      	ldr	r2, [pc, #140]	; (4bec <_get_cycles_for_ms_internal+0x120>)
    4b60:	fba2 2303 	umull	r2, r3, r2, r3
    4b64:	085a      	lsrs	r2, r3, #1
    4b66:	4613      	mov	r3, r2
    4b68:	009b      	lsls	r3, r3, #2
    4b6a:	4413      	add	r3, r2
    4b6c:	005b      	lsls	r3, r3, #1
    4b6e:	e034      	b.n	4bda <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4b70:	88fb      	ldrh	r3, [r7, #6]
    4b72:	683a      	ldr	r2, [r7, #0]
    4b74:	4920      	ldr	r1, [pc, #128]	; (4bf8 <_get_cycles_for_ms_internal+0x12c>)
    4b76:	fba1 1202 	umull	r1, r2, r1, r2
    4b7a:	0992      	lsrs	r2, r2, #6
    4b7c:	fb02 f303 	mul.w	r3, r2, r3
    4b80:	3302      	adds	r3, #2
    4b82:	4a1a      	ldr	r2, [pc, #104]	; (4bec <_get_cycles_for_ms_internal+0x120>)
    4b84:	fba2 2303 	umull	r2, r3, r2, r3
    4b88:	085b      	lsrs	r3, r3, #1
    4b8a:	e026      	b.n	4bda <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4b8c:	88fb      	ldrh	r3, [r7, #6]
    4b8e:	683a      	ldr	r2, [r7, #0]
    4b90:	491a      	ldr	r1, [pc, #104]	; (4bfc <_get_cycles_for_ms_internal+0x130>)
    4b92:	fba1 1202 	umull	r1, r2, r1, r2
    4b96:	0952      	lsrs	r2, r2, #5
    4b98:	fb02 f303 	mul.w	r3, r2, r3
    4b9c:	331d      	adds	r3, #29
    4b9e:	4a18      	ldr	r2, [pc, #96]	; (4c00 <_get_cycles_for_ms_internal+0x134>)
    4ba0:	fba2 2303 	umull	r2, r3, r2, r3
    4ba4:	091b      	lsrs	r3, r3, #4
    4ba6:	e018      	b.n	4bda <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4ba8:	88fb      	ldrh	r3, [r7, #6]
    4baa:	683a      	ldr	r2, [r7, #0]
    4bac:	4915      	ldr	r1, [pc, #84]	; (4c04 <_get_cycles_for_ms_internal+0x138>)
    4bae:	fba1 1202 	umull	r1, r2, r1, r2
    4bb2:	08d2      	lsrs	r2, r2, #3
    4bb4:	fb02 f303 	mul.w	r3, r2, r3
    4bb8:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4bbc:	4a12      	ldr	r2, [pc, #72]	; (4c08 <_get_cycles_for_ms_internal+0x13c>)
    4bbe:	fba2 2303 	umull	r2, r3, r2, r3
    4bc2:	095b      	lsrs	r3, r3, #5
    4bc4:	e009      	b.n	4bda <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4bc6:	88fb      	ldrh	r3, [r7, #6]
    4bc8:	683a      	ldr	r2, [r7, #0]
    4bca:	fb02 f303 	mul.w	r3, r2, r3
    4bce:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4bd2:	4a0e      	ldr	r2, [pc, #56]	; (4c0c <_get_cycles_for_ms_internal+0x140>)
    4bd4:	fba2 2303 	umull	r2, r3, r2, r3
    4bd8:	099b      	lsrs	r3, r3, #6
	}
}
    4bda:	4618      	mov	r0, r3
    4bdc:	370c      	adds	r7, #12
    4bde:	46bd      	mov	sp, r7
    4be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be4:	4770      	bx	lr
    4be6:	bf00      	nop
    4be8:	431bde83 	.word	0x431bde83
    4bec:	aaaaaaab 	.word	0xaaaaaaab
    4bf0:	0a7c5ac5 	.word	0x0a7c5ac5
    4bf4:	d1b71759 	.word	0xd1b71759
    4bf8:	10624dd3 	.word	0x10624dd3
    4bfc:	51eb851f 	.word	0x51eb851f
    4c00:	88888889 	.word	0x88888889
    4c04:	cccccccd 	.word	0xcccccccd
    4c08:	1b4e81b5 	.word	0x1b4e81b5
    4c0c:	057619f1 	.word	0x057619f1

00004c10 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4c10:	b580      	push	{r7, lr}
    4c12:	b082      	sub	sp, #8
    4c14:	af00      	add	r7, sp, #0
    4c16:	4603      	mov	r3, r0
    4c18:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4c1a:	88fb      	ldrh	r3, [r7, #6]
    4c1c:	2209      	movs	r2, #9
    4c1e:	4904      	ldr	r1, [pc, #16]	; (4c30 <_get_cycles_for_ms+0x20>)
    4c20:	4618      	mov	r0, r3
    4c22:	4b04      	ldr	r3, [pc, #16]	; (4c34 <_get_cycles_for_ms+0x24>)
    4c24:	4798      	blx	r3
    4c26:	4603      	mov	r3, r0
}
    4c28:	4618      	mov	r0, r3
    4c2a:	3708      	adds	r7, #8
    4c2c:	46bd      	mov	sp, r7
    4c2e:	bd80      	pop	{r7, pc}
    4c30:	07270e00 	.word	0x07270e00
    4c34:	00004acd 	.word	0x00004acd

00004c38 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4c38:	b480      	push	{r7}
    4c3a:	b083      	sub	sp, #12
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
    4c40:	6039      	str	r1, [r7, #0]
    4c42:	bf00      	nop
    4c44:	f3af 8000 	nop.w

00004c48 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4c48:	3901      	subs	r1, #1
    4c4a:	d8fd      	bhi.n	4c48 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4c4c:	bf00      	nop
    4c4e:	370c      	adds	r7, #12
    4c50:	46bd      	mov	sp, r7
    4c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c56:	4770      	bx	lr

00004c58 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4c58:	b480      	push	{r7}
    4c5a:	b083      	sub	sp, #12
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	6078      	str	r0, [r7, #4]
    4c60:	460b      	mov	r3, r1
    4c62:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	881b      	ldrh	r3, [r3, #0]
    4c68:	b29a      	uxth	r2, r3
    4c6a:	887b      	ldrh	r3, [r7, #2]
    4c6c:	021b      	lsls	r3, r3, #8
    4c6e:	b29b      	uxth	r3, r3
    4c70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4c74:	b29b      	uxth	r3, r3
    4c76:	4313      	orrs	r3, r2
    4c78:	b29a      	uxth	r2, r3
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4c7e:	bf00      	nop
    4c80:	370c      	adds	r7, #12
    4c82:	46bd      	mov	sp, r7
    4c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c88:	4770      	bx	lr

00004c8a <hri_port_set_EVCTRL_reg>:
{
    4c8a:	b480      	push	{r7}
    4c8c:	b085      	sub	sp, #20
    4c8e:	af00      	add	r7, sp, #0
    4c90:	60f8      	str	r0, [r7, #12]
    4c92:	460b      	mov	r3, r1
    4c94:	607a      	str	r2, [r7, #4]
    4c96:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4c98:	7afb      	ldrb	r3, [r7, #11]
    4c9a:	7afa      	ldrb	r2, [r7, #11]
    4c9c:	68f9      	ldr	r1, [r7, #12]
    4c9e:	01d2      	lsls	r2, r2, #7
    4ca0:	440a      	add	r2, r1
    4ca2:	322c      	adds	r2, #44	; 0x2c
    4ca4:	6811      	ldr	r1, [r2, #0]
    4ca6:	687a      	ldr	r2, [r7, #4]
    4ca8:	430a      	orrs	r2, r1
    4caa:	68f9      	ldr	r1, [r7, #12]
    4cac:	01db      	lsls	r3, r3, #7
    4cae:	440b      	add	r3, r1
    4cb0:	332c      	adds	r3, #44	; 0x2c
    4cb2:	601a      	str	r2, [r3, #0]
}
    4cb4:	bf00      	nop
    4cb6:	3714      	adds	r7, #20
    4cb8:	46bd      	mov	sp, r7
    4cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cbe:	4770      	bx	lr

00004cc0 <_port_event_init>:

static inline void _port_event_init()
{
    4cc0:	b580      	push	{r7, lr}
    4cc2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4cc4:	2200      	movs	r2, #0
    4cc6:	2100      	movs	r1, #0
    4cc8:	480a      	ldr	r0, [pc, #40]	; (4cf4 <_port_event_init+0x34>)
    4cca:	4b0b      	ldr	r3, [pc, #44]	; (4cf8 <_port_event_init+0x38>)
    4ccc:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4cce:	2200      	movs	r2, #0
    4cd0:	2101      	movs	r1, #1
    4cd2:	4808      	ldr	r0, [pc, #32]	; (4cf4 <_port_event_init+0x34>)
    4cd4:	4b08      	ldr	r3, [pc, #32]	; (4cf8 <_port_event_init+0x38>)
    4cd6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4cd8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4cdc:	2102      	movs	r1, #2
    4cde:	4805      	ldr	r0, [pc, #20]	; (4cf4 <_port_event_init+0x34>)
    4ce0:	4b05      	ldr	r3, [pc, #20]	; (4cf8 <_port_event_init+0x38>)
    4ce2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4ce4:	2200      	movs	r2, #0
    4ce6:	2103      	movs	r1, #3
    4ce8:	4802      	ldr	r0, [pc, #8]	; (4cf4 <_port_event_init+0x34>)
    4cea:	4b03      	ldr	r3, [pc, #12]	; (4cf8 <_port_event_init+0x38>)
    4cec:	4798      	blx	r3
}
    4cee:	bf00      	nop
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	bf00      	nop
    4cf4:	41008000 	.word	0x41008000
    4cf8:	00004c8b 	.word	0x00004c8b

00004cfc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4cfc:	b580      	push	{r7, lr}
    4cfe:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4d00:	2104      	movs	r1, #4
    4d02:	480b      	ldr	r0, [pc, #44]	; (4d30 <_init_chip+0x34>)
    4d04:	4b0b      	ldr	r3, [pc, #44]	; (4d34 <_init_chip+0x38>)
    4d06:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4d08:	4b0b      	ldr	r3, [pc, #44]	; (4d38 <_init_chip+0x3c>)
    4d0a:	4798      	blx	r3
	_oscctrl_init_sources();
    4d0c:	4b0b      	ldr	r3, [pc, #44]	; (4d3c <_init_chip+0x40>)
    4d0e:	4798      	blx	r3
	_mclk_init();
    4d10:	4b0b      	ldr	r3, [pc, #44]	; (4d40 <_init_chip+0x44>)
    4d12:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4d14:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4d18:	4b0a      	ldr	r3, [pc, #40]	; (4d44 <_init_chip+0x48>)
    4d1a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4d1c:	4b0a      	ldr	r3, [pc, #40]	; (4d48 <_init_chip+0x4c>)
    4d1e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4d20:	f640 30df 	movw	r0, #3039	; 0xbdf
    4d24:	4b07      	ldr	r3, [pc, #28]	; (4d44 <_init_chip+0x48>)
    4d26:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4d28:	4b08      	ldr	r3, [pc, #32]	; (4d4c <_init_chip+0x50>)
    4d2a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4d2c:	bf00      	nop
    4d2e:	bd80      	pop	{r7, pc}
    4d30:	41004000 	.word	0x41004000
    4d34:	00004c59 	.word	0x00004c59
    4d38:	00005825 	.word	0x00005825
    4d3c:	00005ced 	.word	0x00005ced
    4d40:	00005745 	.word	0x00005745
    4d44:	000055ed 	.word	0x000055ed
    4d48:	00005d2d 	.word	0x00005d2d
    4d4c:	00004cc1 	.word	0x00004cc1

00004d50 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4d50:	b480      	push	{r7}
    4d52:	b083      	sub	sp, #12
    4d54:	af00      	add	r7, sp, #0
    4d56:	6078      	str	r0, [r7, #4]
    4d58:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	683a      	ldr	r2, [r7, #0]
    4d5e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4d60:	2300      	movs	r3, #0
}
    4d62:	4618      	mov	r0, r3
    4d64:	370c      	adds	r7, #12
    4d66:	46bd      	mov	sp, r7
    4d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6c:	4770      	bx	lr
	...

00004d70 <__NVIC_EnableIRQ>:
{
    4d70:	b480      	push	{r7}
    4d72:	b083      	sub	sp, #12
    4d74:	af00      	add	r7, sp, #0
    4d76:	4603      	mov	r3, r0
    4d78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d7e:	2b00      	cmp	r3, #0
    4d80:	db0b      	blt.n	4d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d82:	4909      	ldr	r1, [pc, #36]	; (4da8 <__NVIC_EnableIRQ+0x38>)
    4d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d88:	095b      	lsrs	r3, r3, #5
    4d8a:	88fa      	ldrh	r2, [r7, #6]
    4d8c:	f002 021f 	and.w	r2, r2, #31
    4d90:	2001      	movs	r0, #1
    4d92:	fa00 f202 	lsl.w	r2, r0, r2
    4d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4d9a:	bf00      	nop
    4d9c:	370c      	adds	r7, #12
    4d9e:	46bd      	mov	sp, r7
    4da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da4:	4770      	bx	lr
    4da6:	bf00      	nop
    4da8:	e000e100 	.word	0xe000e100

00004dac <__NVIC_DisableIRQ>:
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	4603      	mov	r3, r0
    4db4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dba:	2b00      	cmp	r3, #0
    4dbc:	db10      	blt.n	4de0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dbe:	490b      	ldr	r1, [pc, #44]	; (4dec <__NVIC_DisableIRQ+0x40>)
    4dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dc4:	095b      	lsrs	r3, r3, #5
    4dc6:	88fa      	ldrh	r2, [r7, #6]
    4dc8:	f002 021f 	and.w	r2, r2, #31
    4dcc:	2001      	movs	r0, #1
    4dce:	fa00 f202 	lsl.w	r2, r0, r2
    4dd2:	3320      	adds	r3, #32
    4dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ddc:	f3bf 8f6f 	isb	sy
}
    4de0:	bf00      	nop
    4de2:	370c      	adds	r7, #12
    4de4:	46bd      	mov	sp, r7
    4de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dea:	4770      	bx	lr
    4dec:	e000e100 	.word	0xe000e100

00004df0 <__NVIC_ClearPendingIRQ>:
{
    4df0:	b480      	push	{r7}
    4df2:	b083      	sub	sp, #12
    4df4:	af00      	add	r7, sp, #0
    4df6:	4603      	mov	r3, r0
    4df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	db0c      	blt.n	4e1c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e02:	4909      	ldr	r1, [pc, #36]	; (4e28 <__NVIC_ClearPendingIRQ+0x38>)
    4e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e08:	095b      	lsrs	r3, r3, #5
    4e0a:	88fa      	ldrh	r2, [r7, #6]
    4e0c:	f002 021f 	and.w	r2, r2, #31
    4e10:	2001      	movs	r0, #1
    4e12:	fa00 f202 	lsl.w	r2, r0, r2
    4e16:	3360      	adds	r3, #96	; 0x60
    4e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4e1c:	bf00      	nop
    4e1e:	370c      	adds	r7, #12
    4e20:	46bd      	mov	sp, r7
    4e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e26:	4770      	bx	lr
    4e28:	e000e100 	.word	0xe000e100

00004e2c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4e2c:	b480      	push	{r7}
    4e2e:	b083      	sub	sp, #12
    4e30:	af00      	add	r7, sp, #0
    4e32:	6078      	str	r0, [r7, #4]
    4e34:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4e36:	bf00      	nop
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	685a      	ldr	r2, [r3, #4]
    4e3c:	683b      	ldr	r3, [r7, #0]
    4e3e:	4013      	ands	r3, r2
    4e40:	2b00      	cmp	r3, #0
    4e42:	d1f9      	bne.n	4e38 <hri_eic_wait_for_sync+0xc>
	};
}
    4e44:	bf00      	nop
    4e46:	370c      	adds	r7, #12
    4e48:	46bd      	mov	sp, r7
    4e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e4e:	4770      	bx	lr

00004e50 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4e50:	b480      	push	{r7}
    4e52:	b083      	sub	sp, #12
    4e54:	af00      	add	r7, sp, #0
    4e56:	6078      	str	r0, [r7, #4]
    4e58:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	685a      	ldr	r2, [r3, #4]
    4e5e:	683b      	ldr	r3, [r7, #0]
    4e60:	4013      	ands	r3, r2
    4e62:	2b00      	cmp	r3, #0
    4e64:	bf14      	ite	ne
    4e66:	2301      	movne	r3, #1
    4e68:	2300      	moveq	r3, #0
    4e6a:	b2db      	uxtb	r3, r3
}
    4e6c:	4618      	mov	r0, r3
    4e6e:	370c      	adds	r7, #12
    4e70:	46bd      	mov	sp, r7
    4e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e76:	4770      	bx	lr

00004e78 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4e78:	b480      	push	{r7}
    4e7a:	b083      	sub	sp, #12
    4e7c:	af00      	add	r7, sp, #0
    4e7e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	695b      	ldr	r3, [r3, #20]
}
    4e84:	4618      	mov	r0, r3
    4e86:	370c      	adds	r7, #12
    4e88:	46bd      	mov	sp, r7
    4e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e8e:	4770      	bx	lr

00004e90 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4e90:	b480      	push	{r7}
    4e92:	b083      	sub	sp, #12
    4e94:	af00      	add	r7, sp, #0
    4e96:	6078      	str	r0, [r7, #4]
    4e98:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	683a      	ldr	r2, [r7, #0]
    4e9e:	615a      	str	r2, [r3, #20]
}
    4ea0:	bf00      	nop
    4ea2:	370c      	adds	r7, #12
    4ea4:	46bd      	mov	sp, r7
    4ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eaa:	4770      	bx	lr

00004eac <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4eac:	b480      	push	{r7}
    4eae:	b083      	sub	sp, #12
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
    4eb4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	683a      	ldr	r2, [r7, #0]
    4eba:	611a      	str	r2, [r3, #16]
}
    4ebc:	bf00      	nop
    4ebe:	370c      	adds	r7, #12
    4ec0:	46bd      	mov	sp, r7
    4ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec6:	4770      	bx	lr

00004ec8 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4ec8:	b480      	push	{r7}
    4eca:	b083      	sub	sp, #12
    4ecc:	af00      	add	r7, sp, #0
    4ece:	6078      	str	r0, [r7, #4]
    4ed0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	683a      	ldr	r2, [r7, #0]
    4ed6:	60da      	str	r2, [r3, #12]
}
    4ed8:	bf00      	nop
    4eda:	370c      	adds	r7, #12
    4edc:	46bd      	mov	sp, r7
    4ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ee2:	4770      	bx	lr

00004ee4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b082      	sub	sp, #8
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	b2db      	uxtb	r3, r3
    4ef2:	f043 0302 	orr.w	r3, r3, #2
    4ef6:	b2da      	uxtb	r2, r3
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4efc:	2103      	movs	r1, #3
    4efe:	6878      	ldr	r0, [r7, #4]
    4f00:	4b02      	ldr	r3, [pc, #8]	; (4f0c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4f02:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f04:	bf00      	nop
    4f06:	3708      	adds	r7, #8
    4f08:	46bd      	mov	sp, r7
    4f0a:	bd80      	pop	{r7, pc}
    4f0c:	00004e2d 	.word	0x00004e2d

00004f10 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4f10:	b580      	push	{r7, lr}
    4f12:	b082      	sub	sp, #8
    4f14:	af00      	add	r7, sp, #0
    4f16:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	781b      	ldrb	r3, [r3, #0]
    4f1c:	b2db      	uxtb	r3, r3
    4f1e:	f023 0302 	bic.w	r3, r3, #2
    4f22:	b2da      	uxtb	r2, r3
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4f28:	2103      	movs	r1, #3
    4f2a:	6878      	ldr	r0, [r7, #4]
    4f2c:	4b02      	ldr	r3, [pc, #8]	; (4f38 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4f2e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f30:	bf00      	nop
    4f32:	3708      	adds	r7, #8
    4f34:	46bd      	mov	sp, r7
    4f36:	bd80      	pop	{r7, pc}
    4f38:	00004e2d 	.word	0x00004e2d

00004f3c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b084      	sub	sp, #16
    4f40:	af00      	add	r7, sp, #0
    4f42:	6078      	str	r0, [r7, #4]
    4f44:	460b      	mov	r3, r1
    4f46:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4f4e:	7bfb      	ldrb	r3, [r7, #15]
    4f50:	f023 0310 	bic.w	r3, r3, #16
    4f54:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4f56:	78fb      	ldrb	r3, [r7, #3]
    4f58:	011b      	lsls	r3, r3, #4
    4f5a:	b25a      	sxtb	r2, r3
    4f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f60:	4313      	orrs	r3, r2
    4f62:	b25b      	sxtb	r3, r3
    4f64:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4f66:	687b      	ldr	r3, [r7, #4]
    4f68:	7bfa      	ldrb	r2, [r7, #15]
    4f6a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4f6c:	2103      	movs	r1, #3
    4f6e:	6878      	ldr	r0, [r7, #4]
    4f70:	4b02      	ldr	r3, [pc, #8]	; (4f7c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4f72:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f74:	bf00      	nop
    4f76:	3710      	adds	r7, #16
    4f78:	46bd      	mov	sp, r7
    4f7a:	bd80      	pop	{r7, pc}
    4f7c:	00004e2d 	.word	0x00004e2d

00004f80 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4f80:	b580      	push	{r7, lr}
    4f82:	b084      	sub	sp, #16
    4f84:	af00      	add	r7, sp, #0
    4f86:	6078      	str	r0, [r7, #4]
    4f88:	460b      	mov	r3, r1
    4f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4f8c:	2103      	movs	r1, #3
    4f8e:	6878      	ldr	r0, [r7, #4]
    4f90:	4b06      	ldr	r3, [pc, #24]	; (4fac <hri_eic_get_CTRLA_reg+0x2c>)
    4f92:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4f94:	687b      	ldr	r3, [r7, #4]
    4f96:	781b      	ldrb	r3, [r3, #0]
    4f98:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4f9a:	7bfa      	ldrb	r2, [r7, #15]
    4f9c:	78fb      	ldrb	r3, [r7, #3]
    4f9e:	4013      	ands	r3, r2
    4fa0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4fa2:	7bfb      	ldrb	r3, [r7, #15]
}
    4fa4:	4618      	mov	r0, r3
    4fa6:	3710      	adds	r7, #16
    4fa8:	46bd      	mov	sp, r7
    4faa:	bd80      	pop	{r7, pc}
    4fac:	00004e2d 	.word	0x00004e2d

00004fb0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b082      	sub	sp, #8
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	6078      	str	r0, [r7, #4]
    4fb8:	460b      	mov	r3, r1
    4fba:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	78fa      	ldrb	r2, [r7, #3]
    4fc0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4fc2:	2103      	movs	r1, #3
    4fc4:	6878      	ldr	r0, [r7, #4]
    4fc6:	4b03      	ldr	r3, [pc, #12]	; (4fd4 <hri_eic_write_CTRLA_reg+0x24>)
    4fc8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fca:	bf00      	nop
    4fcc:	3708      	adds	r7, #8
    4fce:	46bd      	mov	sp, r7
    4fd0:	bd80      	pop	{r7, pc}
    4fd2:	bf00      	nop
    4fd4:	00004e2d 	.word	0x00004e2d

00004fd8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4fd8:	b480      	push	{r7}
    4fda:	b083      	sub	sp, #12
    4fdc:	af00      	add	r7, sp, #0
    4fde:	6078      	str	r0, [r7, #4]
    4fe0:	460b      	mov	r3, r1
    4fe2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	78fa      	ldrb	r2, [r7, #3]
    4fe8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fea:	bf00      	nop
    4fec:	370c      	adds	r7, #12
    4fee:	46bd      	mov	sp, r7
    4ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff4:	4770      	bx	lr

00004ff6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4ff6:	b480      	push	{r7}
    4ff8:	b083      	sub	sp, #12
    4ffa:	af00      	add	r7, sp, #0
    4ffc:	6078      	str	r0, [r7, #4]
    4ffe:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	683a      	ldr	r2, [r7, #0]
    5004:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5006:	bf00      	nop
    5008:	370c      	adds	r7, #12
    500a:	46bd      	mov	sp, r7
    500c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5010:	4770      	bx	lr

00005012 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    5012:	b480      	push	{r7}
    5014:	b083      	sub	sp, #12
    5016:	af00      	add	r7, sp, #0
    5018:	6078      	str	r0, [r7, #4]
    501a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	683a      	ldr	r2, [r7, #0]
    5020:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5022:	bf00      	nop
    5024:	370c      	adds	r7, #12
    5026:	46bd      	mov	sp, r7
    5028:	f85d 7b04 	ldr.w	r7, [sp], #4
    502c:	4770      	bx	lr

0000502e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    502e:	b480      	push	{r7}
    5030:	b085      	sub	sp, #20
    5032:	af00      	add	r7, sp, #0
    5034:	60f8      	str	r0, [r7, #12]
    5036:	460b      	mov	r3, r1
    5038:	607a      	str	r2, [r7, #4]
    503a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    503c:	7afb      	ldrb	r3, [r7, #11]
    503e:	68fa      	ldr	r2, [r7, #12]
    5040:	3306      	adds	r3, #6
    5042:	009b      	lsls	r3, r3, #2
    5044:	4413      	add	r3, r2
    5046:	687a      	ldr	r2, [r7, #4]
    5048:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    504a:	bf00      	nop
    504c:	3714      	adds	r7, #20
    504e:	46bd      	mov	sp, r7
    5050:	f85d 7b04 	ldr.w	r7, [sp], #4
    5054:	4770      	bx	lr

00005056 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    5056:	b480      	push	{r7}
    5058:	b083      	sub	sp, #12
    505a:	af00      	add	r7, sp, #0
    505c:	6078      	str	r0, [r7, #4]
    505e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	683a      	ldr	r2, [r7, #0]
    5064:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    5066:	bf00      	nop
    5068:	370c      	adds	r7, #12
    506a:	46bd      	mov	sp, r7
    506c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5070:	4770      	bx	lr

00005072 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    5072:	b480      	push	{r7}
    5074:	b083      	sub	sp, #12
    5076:	af00      	add	r7, sp, #0
    5078:	6078      	str	r0, [r7, #4]
    507a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	683a      	ldr	r2, [r7, #0]
    5080:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    5082:	bf00      	nop
    5084:	370c      	adds	r7, #12
    5086:	46bd      	mov	sp, r7
    5088:	f85d 7b04 	ldr.w	r7, [sp], #4
    508c:	4770      	bx	lr
	...

00005090 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    5090:	b580      	push	{r7, lr}
    5092:	b082      	sub	sp, #8
    5094:	af00      	add	r7, sp, #0
    5096:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    5098:	2101      	movs	r1, #1
    509a:	484f      	ldr	r0, [pc, #316]	; (51d8 <_ext_irq_init+0x148>)
    509c:	4b4f      	ldr	r3, [pc, #316]	; (51dc <_ext_irq_init+0x14c>)
    509e:	4798      	blx	r3
    50a0:	4603      	mov	r3, r0
    50a2:	f083 0301 	eor.w	r3, r3, #1
    50a6:	b2db      	uxtb	r3, r3
    50a8:	2b00      	cmp	r3, #0
    50aa:	d011      	beq.n	50d0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    50ac:	2102      	movs	r1, #2
    50ae:	484a      	ldr	r0, [pc, #296]	; (51d8 <_ext_irq_init+0x148>)
    50b0:	4b4b      	ldr	r3, [pc, #300]	; (51e0 <_ext_irq_init+0x150>)
    50b2:	4798      	blx	r3
    50b4:	4603      	mov	r3, r0
    50b6:	2b00      	cmp	r3, #0
    50b8:	d006      	beq.n	50c8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    50ba:	4847      	ldr	r0, [pc, #284]	; (51d8 <_ext_irq_init+0x148>)
    50bc:	4b49      	ldr	r3, [pc, #292]	; (51e4 <_ext_irq_init+0x154>)
    50be:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    50c0:	2102      	movs	r1, #2
    50c2:	4845      	ldr	r0, [pc, #276]	; (51d8 <_ext_irq_init+0x148>)
    50c4:	4b48      	ldr	r3, [pc, #288]	; (51e8 <_ext_irq_init+0x158>)
    50c6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    50c8:	2101      	movs	r1, #1
    50ca:	4843      	ldr	r0, [pc, #268]	; (51d8 <_ext_irq_init+0x148>)
    50cc:	4b47      	ldr	r3, [pc, #284]	; (51ec <_ext_irq_init+0x15c>)
    50ce:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    50d0:	2101      	movs	r1, #1
    50d2:	4841      	ldr	r0, [pc, #260]	; (51d8 <_ext_irq_init+0x148>)
    50d4:	4b44      	ldr	r3, [pc, #272]	; (51e8 <_ext_irq_init+0x158>)
    50d6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    50d8:	2100      	movs	r1, #0
    50da:	483f      	ldr	r0, [pc, #252]	; (51d8 <_ext_irq_init+0x148>)
    50dc:	4b44      	ldr	r3, [pc, #272]	; (51f0 <_ext_irq_init+0x160>)
    50de:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    50e0:	2100      	movs	r1, #0
    50e2:	483d      	ldr	r0, [pc, #244]	; (51d8 <_ext_irq_init+0x148>)
    50e4:	4b43      	ldr	r3, [pc, #268]	; (51f4 <_ext_irq_init+0x164>)
    50e6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    50e8:	2100      	movs	r1, #0
    50ea:	483b      	ldr	r0, [pc, #236]	; (51d8 <_ext_irq_init+0x148>)
    50ec:	4b42      	ldr	r3, [pc, #264]	; (51f8 <_ext_irq_init+0x168>)
    50ee:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    50f0:	f240 31bb 	movw	r1, #955	; 0x3bb
    50f4:	4838      	ldr	r0, [pc, #224]	; (51d8 <_ext_irq_init+0x148>)
    50f6:	4b41      	ldr	r3, [pc, #260]	; (51fc <_ext_irq_init+0x16c>)
    50f8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    50fa:	f240 313b 	movw	r1, #827	; 0x33b
    50fe:	4836      	ldr	r0, [pc, #216]	; (51d8 <_ext_irq_init+0x148>)
    5100:	4b3f      	ldr	r3, [pc, #252]	; (5200 <_ext_irq_init+0x170>)
    5102:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    5104:	2100      	movs	r1, #0
    5106:	4834      	ldr	r0, [pc, #208]	; (51d8 <_ext_irq_init+0x148>)
    5108:	4b3e      	ldr	r3, [pc, #248]	; (5204 <_ext_irq_init+0x174>)
    510a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    510c:	4a3e      	ldr	r2, [pc, #248]	; (5208 <_ext_irq_init+0x178>)
    510e:	2100      	movs	r1, #0
    5110:	4831      	ldr	r0, [pc, #196]	; (51d8 <_ext_irq_init+0x148>)
    5112:	4b3e      	ldr	r3, [pc, #248]	; (520c <_ext_irq_init+0x17c>)
    5114:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5116:	2211      	movs	r2, #17
    5118:	2101      	movs	r1, #1
    511a:	482f      	ldr	r0, [pc, #188]	; (51d8 <_ext_irq_init+0x148>)
    511c:	4b3b      	ldr	r3, [pc, #236]	; (520c <_ext_irq_init+0x17c>)
    511e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5120:	482d      	ldr	r0, [pc, #180]	; (51d8 <_ext_irq_init+0x148>)
    5122:	4b3b      	ldr	r3, [pc, #236]	; (5210 <_ext_irq_init+0x180>)
    5124:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    5126:	200c      	movs	r0, #12
    5128:	4b3a      	ldr	r3, [pc, #232]	; (5214 <_ext_irq_init+0x184>)
    512a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    512c:	200c      	movs	r0, #12
    512e:	4b3a      	ldr	r3, [pc, #232]	; (5218 <_ext_irq_init+0x188>)
    5130:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    5132:	200c      	movs	r0, #12
    5134:	4b39      	ldr	r3, [pc, #228]	; (521c <_ext_irq_init+0x18c>)
    5136:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    5138:	200d      	movs	r0, #13
    513a:	4b36      	ldr	r3, [pc, #216]	; (5214 <_ext_irq_init+0x184>)
    513c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    513e:	200d      	movs	r0, #13
    5140:	4b35      	ldr	r3, [pc, #212]	; (5218 <_ext_irq_init+0x188>)
    5142:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    5144:	200d      	movs	r0, #13
    5146:	4b35      	ldr	r3, [pc, #212]	; (521c <_ext_irq_init+0x18c>)
    5148:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    514a:	200f      	movs	r0, #15
    514c:	4b31      	ldr	r3, [pc, #196]	; (5214 <_ext_irq_init+0x184>)
    514e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    5150:	200f      	movs	r0, #15
    5152:	4b31      	ldr	r3, [pc, #196]	; (5218 <_ext_irq_init+0x188>)
    5154:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    5156:	200f      	movs	r0, #15
    5158:	4b30      	ldr	r3, [pc, #192]	; (521c <_ext_irq_init+0x18c>)
    515a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    515c:	2010      	movs	r0, #16
    515e:	4b2d      	ldr	r3, [pc, #180]	; (5214 <_ext_irq_init+0x184>)
    5160:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    5162:	2010      	movs	r0, #16
    5164:	4b2c      	ldr	r3, [pc, #176]	; (5218 <_ext_irq_init+0x188>)
    5166:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5168:	2010      	movs	r0, #16
    516a:	4b2c      	ldr	r3, [pc, #176]	; (521c <_ext_irq_init+0x18c>)
    516c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    516e:	2011      	movs	r0, #17
    5170:	4b28      	ldr	r3, [pc, #160]	; (5214 <_ext_irq_init+0x184>)
    5172:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    5174:	2011      	movs	r0, #17
    5176:	4b28      	ldr	r3, [pc, #160]	; (5218 <_ext_irq_init+0x188>)
    5178:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    517a:	2011      	movs	r0, #17
    517c:	4b27      	ldr	r3, [pc, #156]	; (521c <_ext_irq_init+0x18c>)
    517e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    5180:	2012      	movs	r0, #18
    5182:	4b24      	ldr	r3, [pc, #144]	; (5214 <_ext_irq_init+0x184>)
    5184:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    5186:	2012      	movs	r0, #18
    5188:	4b23      	ldr	r3, [pc, #140]	; (5218 <_ext_irq_init+0x188>)
    518a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    518c:	2012      	movs	r0, #18
    518e:	4b23      	ldr	r3, [pc, #140]	; (521c <_ext_irq_init+0x18c>)
    5190:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    5192:	2013      	movs	r0, #19
    5194:	4b1f      	ldr	r3, [pc, #124]	; (5214 <_ext_irq_init+0x184>)
    5196:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5198:	2013      	movs	r0, #19
    519a:	4b1f      	ldr	r3, [pc, #124]	; (5218 <_ext_irq_init+0x188>)
    519c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    519e:	2013      	movs	r0, #19
    51a0:	4b1e      	ldr	r3, [pc, #120]	; (521c <_ext_irq_init+0x18c>)
    51a2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    51a4:	2014      	movs	r0, #20
    51a6:	4b1b      	ldr	r3, [pc, #108]	; (5214 <_ext_irq_init+0x184>)
    51a8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    51aa:	2014      	movs	r0, #20
    51ac:	4b1a      	ldr	r3, [pc, #104]	; (5218 <_ext_irq_init+0x188>)
    51ae:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    51b0:	2014      	movs	r0, #20
    51b2:	4b1a      	ldr	r3, [pc, #104]	; (521c <_ext_irq_init+0x18c>)
    51b4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    51b6:	2015      	movs	r0, #21
    51b8:	4b16      	ldr	r3, [pc, #88]	; (5214 <_ext_irq_init+0x184>)
    51ba:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    51bc:	2015      	movs	r0, #21
    51be:	4b16      	ldr	r3, [pc, #88]	; (5218 <_ext_irq_init+0x188>)
    51c0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    51c2:	2015      	movs	r0, #21
    51c4:	4b15      	ldr	r3, [pc, #84]	; (521c <_ext_irq_init+0x18c>)
    51c6:	4798      	blx	r3

	callback = cb;
    51c8:	4a15      	ldr	r2, [pc, #84]	; (5220 <_ext_irq_init+0x190>)
    51ca:	687b      	ldr	r3, [r7, #4]
    51cc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    51ce:	2300      	movs	r3, #0
}
    51d0:	4618      	mov	r0, r3
    51d2:	3708      	adds	r7, #8
    51d4:	46bd      	mov	sp, r7
    51d6:	bd80      	pop	{r7, pc}
    51d8:	40002800 	.word	0x40002800
    51dc:	00004e51 	.word	0x00004e51
    51e0:	00004f81 	.word	0x00004f81
    51e4:	00004f11 	.word	0x00004f11
    51e8:	00004e2d 	.word	0x00004e2d
    51ec:	00004fb1 	.word	0x00004fb1
    51f0:	00004f3d 	.word	0x00004f3d
    51f4:	00004fd9 	.word	0x00004fd9
    51f8:	00004ff7 	.word	0x00004ff7
    51fc:	00005013 	.word	0x00005013
    5200:	00005057 	.word	0x00005057
    5204:	00005073 	.word	0x00005073
    5208:	90999013 	.word	0x90999013
    520c:	0000502f 	.word	0x0000502f
    5210:	00004ee5 	.word	0x00004ee5
    5214:	00004dad 	.word	0x00004dad
    5218:	00004df1 	.word	0x00004df1
    521c:	00004d71 	.word	0x00004d71
    5220:	20000e70 	.word	0x20000e70

00005224 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    5224:	b580      	push	{r7, lr}
    5226:	b084      	sub	sp, #16
    5228:	af00      	add	r7, sp, #0
    522a:	6078      	str	r0, [r7, #4]
    522c:	460b      	mov	r3, r1
    522e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5230:	23ff      	movs	r3, #255	; 0xff
    5232:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    5234:	2300      	movs	r3, #0
    5236:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5238:	e010      	b.n	525c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    523a:	7bbb      	ldrb	r3, [r7, #14]
    523c:	4a1c      	ldr	r2, [pc, #112]	; (52b0 <_ext_irq_enable+0x8c>)
    523e:	00db      	lsls	r3, r3, #3
    5240:	4413      	add	r3, r2
    5242:	685a      	ldr	r2, [r3, #4]
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	429a      	cmp	r2, r3
    5248:	d105      	bne.n	5256 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    524a:	7bbb      	ldrb	r3, [r7, #14]
    524c:	4a18      	ldr	r2, [pc, #96]	; (52b0 <_ext_irq_enable+0x8c>)
    524e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5252:	73fb      	strb	r3, [r7, #15]
			break;
    5254:	e005      	b.n	5262 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    5256:	7bbb      	ldrb	r3, [r7, #14]
    5258:	3301      	adds	r3, #1
    525a:	73bb      	strb	r3, [r7, #14]
    525c:	7bbb      	ldrb	r3, [r7, #14]
    525e:	2b08      	cmp	r3, #8
    5260:	d9eb      	bls.n	523a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    5262:	7bfb      	ldrb	r3, [r7, #15]
    5264:	2bff      	cmp	r3, #255	; 0xff
    5266:	d102      	bne.n	526e <_ext_irq_enable+0x4a>
		return -1;
    5268:	f04f 33ff 	mov.w	r3, #4294967295
    526c:	e01c      	b.n	52a8 <_ext_irq_enable+0x84>
	}

	if (enable) {
    526e:	78fb      	ldrb	r3, [r7, #3]
    5270:	2b00      	cmp	r3, #0
    5272:	d008      	beq.n	5286 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    5274:	7bfb      	ldrb	r3, [r7, #15]
    5276:	2201      	movs	r2, #1
    5278:	fa02 f303 	lsl.w	r3, r2, r3
    527c:	4619      	mov	r1, r3
    527e:	480d      	ldr	r0, [pc, #52]	; (52b4 <_ext_irq_enable+0x90>)
    5280:	4b0d      	ldr	r3, [pc, #52]	; (52b8 <_ext_irq_enable+0x94>)
    5282:	4798      	blx	r3
    5284:	e00f      	b.n	52a6 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    5286:	7bfb      	ldrb	r3, [r7, #15]
    5288:	2201      	movs	r2, #1
    528a:	fa02 f303 	lsl.w	r3, r2, r3
    528e:	4619      	mov	r1, r3
    5290:	4808      	ldr	r0, [pc, #32]	; (52b4 <_ext_irq_enable+0x90>)
    5292:	4b0a      	ldr	r3, [pc, #40]	; (52bc <_ext_irq_enable+0x98>)
    5294:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    5296:	7bfb      	ldrb	r3, [r7, #15]
    5298:	2201      	movs	r2, #1
    529a:	fa02 f303 	lsl.w	r3, r2, r3
    529e:	4619      	mov	r1, r3
    52a0:	4804      	ldr	r0, [pc, #16]	; (52b4 <_ext_irq_enable+0x90>)
    52a2:	4b07      	ldr	r3, [pc, #28]	; (52c0 <_ext_irq_enable+0x9c>)
    52a4:	4798      	blx	r3
	}

	return ERR_NONE;
    52a6:	2300      	movs	r3, #0
}
    52a8:	4618      	mov	r0, r3
    52aa:	3710      	adds	r7, #16
    52ac:	46bd      	mov	sp, r7
    52ae:	bd80      	pop	{r7, pc}
    52b0:	0001408c 	.word	0x0001408c
    52b4:	40002800 	.word	0x40002800
    52b8:	00004ead 	.word	0x00004ead
    52bc:	00004ec9 	.word	0x00004ec9
    52c0:	00004e91 	.word	0x00004e91

000052c4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    52c4:	b580      	push	{r7, lr}
    52c6:	b084      	sub	sp, #16
    52c8:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    52ca:	4841      	ldr	r0, [pc, #260]	; (53d0 <_ext_irq_handler+0x10c>)
    52cc:	4b41      	ldr	r3, [pc, #260]	; (53d4 <_ext_irq_handler+0x110>)
    52ce:	4798      	blx	r3
    52d0:	4603      	mov	r3, r0
    52d2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    52d4:	f04f 33ff 	mov.w	r3, #4294967295
    52d8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    52da:	683b      	ldr	r3, [r7, #0]
    52dc:	4619      	mov	r1, r3
    52de:	483c      	ldr	r0, [pc, #240]	; (53d0 <_ext_irq_handler+0x10c>)
    52e0:	4b3d      	ldr	r3, [pc, #244]	; (53d8 <_ext_irq_handler+0x114>)
    52e2:	4798      	blx	r3

	ASSERT(callback);
    52e4:	4b3d      	ldr	r3, [pc, #244]	; (53dc <_ext_irq_handler+0x118>)
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	2b00      	cmp	r3, #0
    52ea:	bf14      	ite	ne
    52ec:	2301      	movne	r3, #1
    52ee:	2300      	moveq	r3, #0
    52f0:	b2db      	uxtb	r3, r3
    52f2:	f44f 7284 	mov.w	r2, #264	; 0x108
    52f6:	493a      	ldr	r1, [pc, #232]	; (53e0 <_ext_irq_handler+0x11c>)
    52f8:	4618      	mov	r0, r3
    52fa:	4b3a      	ldr	r3, [pc, #232]	; (53e4 <_ext_irq_handler+0x120>)
    52fc:	4798      	blx	r3

	while (flags) {
    52fe:	e060      	b.n	53c2 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5300:	683b      	ldr	r3, [r7, #0]
    5302:	4618      	mov	r0, r3
    5304:	4b38      	ldr	r3, [pc, #224]	; (53e8 <_ext_irq_handler+0x124>)
    5306:	4798      	blx	r3
    5308:	4603      	mov	r3, r0
    530a:	b2db      	uxtb	r3, r3
    530c:	3b01      	subs	r3, #1
    530e:	b2db      	uxtb	r3, r3
    5310:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5312:	e047      	b.n	53a4 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    5314:	2300      	movs	r3, #0
    5316:	71fb      	strb	r3, [r7, #7]
    5318:	2309      	movs	r3, #9
    531a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    531c:	e024      	b.n	5368 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    531e:	79ba      	ldrb	r2, [r7, #6]
    5320:	79fb      	ldrb	r3, [r7, #7]
    5322:	4413      	add	r3, r2
    5324:	105b      	asrs	r3, r3, #1
    5326:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5328:	797b      	ldrb	r3, [r7, #5]
    532a:	4a30      	ldr	r2, [pc, #192]	; (53ec <_ext_irq_handler+0x128>)
    532c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5330:	461a      	mov	r2, r3
    5332:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5336:	429a      	cmp	r2, r3
    5338:	d106      	bne.n	5348 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    533a:	797b      	ldrb	r3, [r7, #5]
    533c:	4a2b      	ldr	r2, [pc, #172]	; (53ec <_ext_irq_handler+0x128>)
    533e:	00db      	lsls	r3, r3, #3
    5340:	4413      	add	r3, r2
    5342:	685b      	ldr	r3, [r3, #4]
    5344:	60bb      	str	r3, [r7, #8]
					break;
    5346:	e013      	b.n	5370 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5348:	797b      	ldrb	r3, [r7, #5]
    534a:	4a28      	ldr	r2, [pc, #160]	; (53ec <_ext_irq_handler+0x128>)
    534c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5350:	461a      	mov	r2, r3
    5352:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5356:	429a      	cmp	r2, r3
    5358:	da03      	bge.n	5362 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    535a:	797b      	ldrb	r3, [r7, #5]
    535c:	3301      	adds	r3, #1
    535e:	71fb      	strb	r3, [r7, #7]
    5360:	e002      	b.n	5368 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    5362:	797b      	ldrb	r3, [r7, #5]
    5364:	3b01      	subs	r3, #1
    5366:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5368:	79ba      	ldrb	r2, [r7, #6]
    536a:	79fb      	ldrb	r3, [r7, #7]
    536c:	429a      	cmp	r2, r3
    536e:	d2d6      	bcs.n	531e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5370:	68bb      	ldr	r3, [r7, #8]
    5372:	f1b3 3fff 	cmp.w	r3, #4294967295
    5376:	d003      	beq.n	5380 <_ext_irq_handler+0xbc>
				callback(pin);
    5378:	4b18      	ldr	r3, [pc, #96]	; (53dc <_ext_irq_handler+0x118>)
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	68b8      	ldr	r0, [r7, #8]
    537e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5380:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5384:	2201      	movs	r2, #1
    5386:	fa02 f303 	lsl.w	r3, r2, r3
    538a:	43da      	mvns	r2, r3
    538c:	683b      	ldr	r3, [r7, #0]
    538e:	4013      	ands	r3, r2
    5390:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    5392:	683b      	ldr	r3, [r7, #0]
    5394:	4618      	mov	r0, r3
    5396:	4b14      	ldr	r3, [pc, #80]	; (53e8 <_ext_irq_handler+0x124>)
    5398:	4798      	blx	r3
    539a:	4603      	mov	r3, r0
    539c:	b2db      	uxtb	r3, r3
    539e:	3b01      	subs	r3, #1
    53a0:	b2db      	uxtb	r3, r3
    53a2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    53a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    53ac:	d1b2      	bne.n	5314 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    53ae:	4808      	ldr	r0, [pc, #32]	; (53d0 <_ext_irq_handler+0x10c>)
    53b0:	4b08      	ldr	r3, [pc, #32]	; (53d4 <_ext_irq_handler+0x110>)
    53b2:	4798      	blx	r3
    53b4:	4603      	mov	r3, r0
    53b6:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    53b8:	683b      	ldr	r3, [r7, #0]
    53ba:	4619      	mov	r1, r3
    53bc:	4804      	ldr	r0, [pc, #16]	; (53d0 <_ext_irq_handler+0x10c>)
    53be:	4b06      	ldr	r3, [pc, #24]	; (53d8 <_ext_irq_handler+0x114>)
    53c0:	4798      	blx	r3
	while (flags) {
    53c2:	683b      	ldr	r3, [r7, #0]
    53c4:	2b00      	cmp	r3, #0
    53c6:	d19b      	bne.n	5300 <_ext_irq_handler+0x3c>
	}
}
    53c8:	bf00      	nop
    53ca:	3710      	adds	r7, #16
    53cc:	46bd      	mov	sp, r7
    53ce:	bd80      	pop	{r7, pc}
    53d0:	40002800 	.word	0x40002800
    53d4:	00004e79 	.word	0x00004e79
    53d8:	00004e91 	.word	0x00004e91
    53dc:	20000e70 	.word	0x20000e70
    53e0:	000140d4 	.word	0x000140d4
    53e4:	000040f5 	.word	0x000040f5
    53e8:	00013ad9 	.word	0x00013ad9
    53ec:	0001408c 	.word	0x0001408c

000053f0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    53f0:	b580      	push	{r7, lr}
    53f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53f4:	4b01      	ldr	r3, [pc, #4]	; (53fc <EIC_0_Handler+0xc>)
    53f6:	4798      	blx	r3
} /**
    53f8:	bf00      	nop
    53fa:	bd80      	pop	{r7, pc}
    53fc:	000052c5 	.word	0x000052c5

00005400 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5400:	b580      	push	{r7, lr}
    5402:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5404:	4b01      	ldr	r3, [pc, #4]	; (540c <EIC_1_Handler+0xc>)
    5406:	4798      	blx	r3
} /**
    5408:	bf00      	nop
    540a:	bd80      	pop	{r7, pc}
    540c:	000052c5 	.word	0x000052c5

00005410 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5410:	b580      	push	{r7, lr}
    5412:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5414:	4b01      	ldr	r3, [pc, #4]	; (541c <EIC_3_Handler+0xc>)
    5416:	4798      	blx	r3
} /**
    5418:	bf00      	nop
    541a:	bd80      	pop	{r7, pc}
    541c:	000052c5 	.word	0x000052c5

00005420 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5420:	b580      	push	{r7, lr}
    5422:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5424:	4b01      	ldr	r3, [pc, #4]	; (542c <EIC_4_Handler+0xc>)
    5426:	4798      	blx	r3
} /**
    5428:	bf00      	nop
    542a:	bd80      	pop	{r7, pc}
    542c:	000052c5 	.word	0x000052c5

00005430 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5430:	b580      	push	{r7, lr}
    5432:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5434:	4b01      	ldr	r3, [pc, #4]	; (543c <EIC_5_Handler+0xc>)
    5436:	4798      	blx	r3
} /**
    5438:	bf00      	nop
    543a:	bd80      	pop	{r7, pc}
    543c:	000052c5 	.word	0x000052c5

00005440 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5440:	b580      	push	{r7, lr}
    5442:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5444:	4b01      	ldr	r3, [pc, #4]	; (544c <EIC_6_Handler+0xc>)
    5446:	4798      	blx	r3
} /**
    5448:	bf00      	nop
    544a:	bd80      	pop	{r7, pc}
    544c:	000052c5 	.word	0x000052c5

00005450 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5450:	b580      	push	{r7, lr}
    5452:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5454:	4b01      	ldr	r3, [pc, #4]	; (545c <EIC_7_Handler+0xc>)
    5456:	4798      	blx	r3
} /**
    5458:	bf00      	nop
    545a:	bd80      	pop	{r7, pc}
    545c:	000052c5 	.word	0x000052c5

00005460 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5460:	b580      	push	{r7, lr}
    5462:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5464:	4b01      	ldr	r3, [pc, #4]	; (546c <EIC_8_Handler+0xc>)
    5466:	4798      	blx	r3
} /**
    5468:	bf00      	nop
    546a:	bd80      	pop	{r7, pc}
    546c:	000052c5 	.word	0x000052c5

00005470 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5470:	b580      	push	{r7, lr}
    5472:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5474:	4b01      	ldr	r3, [pc, #4]	; (547c <EIC_9_Handler+0xc>)
    5476:	4798      	blx	r3
}
    5478:	bf00      	nop
    547a:	bd80      	pop	{r7, pc}
    547c:	000052c5 	.word	0x000052c5

00005480 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5480:	b480      	push	{r7}
    5482:	b085      	sub	sp, #20
    5484:	af00      	add	r7, sp, #0
    5486:	60f8      	str	r0, [r7, #12]
    5488:	460b      	mov	r3, r1
    548a:	607a      	str	r2, [r7, #4]
    548c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    548e:	7afa      	ldrb	r2, [r7, #11]
    5490:	68fb      	ldr	r3, [r7, #12]
    5492:	3248      	adds	r2, #72	; 0x48
    5494:	6879      	ldr	r1, [r7, #4]
    5496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    549a:	bf00      	nop
    549c:	3714      	adds	r7, #20
    549e:	46bd      	mov	sp, r7
    54a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a4:	4770      	bx	lr

000054a6 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    54a6:	b480      	push	{r7}
    54a8:	b083      	sub	sp, #12
    54aa:	af00      	add	r7, sp, #0
    54ac:	6078      	str	r0, [r7, #4]
    54ae:	460b      	mov	r3, r1
    54b0:	70fb      	strb	r3, [r7, #3]
    54b2:	4613      	mov	r3, r2
    54b4:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    54b6:	78fb      	ldrb	r3, [r7, #3]
    54b8:	687a      	ldr	r2, [r7, #4]
    54ba:	3304      	adds	r3, #4
    54bc:	00db      	lsls	r3, r3, #3
    54be:	4413      	add	r3, r2
    54c0:	78ba      	ldrb	r2, [r7, #2]
    54c2:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    54c4:	78fb      	ldrb	r3, [r7, #3]
    54c6:	78ba      	ldrb	r2, [r7, #2]
    54c8:	43d2      	mvns	r2, r2
    54ca:	b2d1      	uxtb	r1, r2
    54cc:	687a      	ldr	r2, [r7, #4]
    54ce:	3304      	adds	r3, #4
    54d0:	00db      	lsls	r3, r3, #3
    54d2:	4413      	add	r3, r2
    54d4:	460a      	mov	r2, r1
    54d6:	711a      	strb	r2, [r3, #4]
}
    54d8:	bf00      	nop
    54da:	370c      	adds	r7, #12
    54dc:	46bd      	mov	sp, r7
    54de:	f85d 7b04 	ldr.w	r7, [sp], #4
    54e2:	4770      	bx	lr

000054e4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    54e4:	b480      	push	{r7}
    54e6:	b085      	sub	sp, #20
    54e8:	af00      	add	r7, sp, #0
    54ea:	60f8      	str	r0, [r7, #12]
    54ec:	460b      	mov	r3, r1
    54ee:	607a      	str	r2, [r7, #4]
    54f0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    54f2:	7afa      	ldrb	r2, [r7, #11]
    54f4:	68fb      	ldr	r3, [r7, #12]
    54f6:	3204      	adds	r2, #4
    54f8:	6879      	ldr	r1, [r7, #4]
    54fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    54fe:	bf00      	nop
    5500:	3714      	adds	r7, #20
    5502:	46bd      	mov	sp, r7
    5504:	f85d 7b04 	ldr.w	r7, [sp], #4
    5508:	4770      	bx	lr
	...

0000550c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    550c:	b580      	push	{r7, lr}
    550e:	b082      	sub	sp, #8
    5510:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    5512:	2300      	movs	r3, #0
    5514:	71fb      	strb	r3, [r7, #7]
    5516:	e00b      	b.n	5530 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5518:	79fb      	ldrb	r3, [r7, #7]
    551a:	4a18      	ldr	r2, [pc, #96]	; (557c <_event_system_init+0x70>)
    551c:	5cd3      	ldrb	r3, [r2, r3]
    551e:	461a      	mov	r2, r3
    5520:	79fb      	ldrb	r3, [r7, #7]
    5522:	4619      	mov	r1, r3
    5524:	4816      	ldr	r0, [pc, #88]	; (5580 <_event_system_init+0x74>)
    5526:	4b17      	ldr	r3, [pc, #92]	; (5584 <_event_system_init+0x78>)
    5528:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    552a:	79fb      	ldrb	r3, [r7, #7]
    552c:	3301      	adds	r3, #1
    552e:	71fb      	strb	r3, [r7, #7]
    5530:	79fb      	ldrb	r3, [r7, #7]
    5532:	2b42      	cmp	r3, #66	; 0x42
    5534:	d9f0      	bls.n	5518 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5536:	2300      	movs	r3, #0
    5538:	71fb      	strb	r3, [r7, #7]
    553a:	e016      	b.n	556a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    553c:	79fb      	ldrb	r3, [r7, #7]
    553e:	4a12      	ldr	r2, [pc, #72]	; (5588 <_event_system_init+0x7c>)
    5540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5544:	461a      	mov	r2, r3
    5546:	79fb      	ldrb	r3, [r7, #7]
    5548:	4619      	mov	r1, r3
    554a:	480d      	ldr	r0, [pc, #52]	; (5580 <_event_system_init+0x74>)
    554c:	4b0f      	ldr	r3, [pc, #60]	; (558c <_event_system_init+0x80>)
    554e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5550:	79fb      	ldrb	r3, [r7, #7]
    5552:	4a0f      	ldr	r2, [pc, #60]	; (5590 <_event_system_init+0x84>)
    5554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5558:	b2da      	uxtb	r2, r3
    555a:	79fb      	ldrb	r3, [r7, #7]
    555c:	4619      	mov	r1, r3
    555e:	4808      	ldr	r0, [pc, #32]	; (5580 <_event_system_init+0x74>)
    5560:	4b0c      	ldr	r3, [pc, #48]	; (5594 <_event_system_init+0x88>)
    5562:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5564:	79fb      	ldrb	r3, [r7, #7]
    5566:	3301      	adds	r3, #1
    5568:	71fb      	strb	r3, [r7, #7]
    556a:	79fb      	ldrb	r3, [r7, #7]
    556c:	2b1f      	cmp	r3, #31
    556e:	d9e5      	bls.n	553c <_event_system_init+0x30>
	}

	return ERR_NONE;
    5570:	2300      	movs	r3, #0
}
    5572:	4618      	mov	r0, r3
    5574:	3708      	adds	r7, #8
    5576:	46bd      	mov	sp, r7
    5578:	bd80      	pop	{r7, pc}
    557a:	bf00      	nop
    557c:	000140ec 	.word	0x000140ec
    5580:	4100e000 	.word	0x4100e000
    5584:	00005481 	.word	0x00005481
    5588:	00014130 	.word	0x00014130
    558c:	000054e5 	.word	0x000054e5
    5590:	00014170 	.word	0x00014170
    5594:	000054a7 	.word	0x000054a7

00005598 <hri_gclk_wait_for_sync>:
{
    5598:	b480      	push	{r7}
    559a:	b083      	sub	sp, #12
    559c:	af00      	add	r7, sp, #0
    559e:	6078      	str	r0, [r7, #4]
    55a0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    55a2:	bf00      	nop
    55a4:	687b      	ldr	r3, [r7, #4]
    55a6:	685a      	ldr	r2, [r3, #4]
    55a8:	683b      	ldr	r3, [r7, #0]
    55aa:	4013      	ands	r3, r2
    55ac:	2b00      	cmp	r3, #0
    55ae:	d1f9      	bne.n	55a4 <hri_gclk_wait_for_sync+0xc>
}
    55b0:	bf00      	nop
    55b2:	370c      	adds	r7, #12
    55b4:	46bd      	mov	sp, r7
    55b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ba:	4770      	bx	lr

000055bc <hri_gclk_write_GENCTRL_reg>:
{
    55bc:	b580      	push	{r7, lr}
    55be:	b084      	sub	sp, #16
    55c0:	af00      	add	r7, sp, #0
    55c2:	60f8      	str	r0, [r7, #12]
    55c4:	460b      	mov	r3, r1
    55c6:	607a      	str	r2, [r7, #4]
    55c8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    55ca:	7afa      	ldrb	r2, [r7, #11]
    55cc:	68fb      	ldr	r3, [r7, #12]
    55ce:	3208      	adds	r2, #8
    55d0:	6879      	ldr	r1, [r7, #4]
    55d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    55d6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    55da:	68f8      	ldr	r0, [r7, #12]
    55dc:	4b02      	ldr	r3, [pc, #8]	; (55e8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    55de:	4798      	blx	r3
}
    55e0:	bf00      	nop
    55e2:	3710      	adds	r7, #16
    55e4:	46bd      	mov	sp, r7
    55e6:	bd80      	pop	{r7, pc}
    55e8:	00005599 	.word	0x00005599

000055ec <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    55ec:	b580      	push	{r7, lr}
    55ee:	b082      	sub	sp, #8
    55f0:	af00      	add	r7, sp, #0
    55f2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	f003 0301 	and.w	r3, r3, #1
    55fa:	2b00      	cmp	r3, #0
    55fc:	d004      	beq.n	5608 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    55fe:	4a3b      	ldr	r2, [pc, #236]	; (56ec <_gclk_init_generators_by_fref+0x100>)
    5600:	2100      	movs	r1, #0
    5602:	483b      	ldr	r0, [pc, #236]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    5604:	4b3b      	ldr	r3, [pc, #236]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    5606:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	f003 0302 	and.w	r3, r3, #2
    560e:	2b00      	cmp	r3, #0
    5610:	d004      	beq.n	561c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    5612:	4a39      	ldr	r2, [pc, #228]	; (56f8 <_gclk_init_generators_by_fref+0x10c>)
    5614:	2101      	movs	r1, #1
    5616:	4836      	ldr	r0, [pc, #216]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    5618:	4b36      	ldr	r3, [pc, #216]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    561a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    561c:	687b      	ldr	r3, [r7, #4]
    561e:	f003 0304 	and.w	r3, r3, #4
    5622:	2b00      	cmp	r3, #0
    5624:	d004      	beq.n	5630 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    5626:	4a35      	ldr	r2, [pc, #212]	; (56fc <_gclk_init_generators_by_fref+0x110>)
    5628:	2102      	movs	r1, #2
    562a:	4831      	ldr	r0, [pc, #196]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    562c:	4b31      	ldr	r3, [pc, #196]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    562e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	f003 0308 	and.w	r3, r3, #8
    5636:	2b00      	cmp	r3, #0
    5638:	d004      	beq.n	5644 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    563a:	4a31      	ldr	r2, [pc, #196]	; (5700 <_gclk_init_generators_by_fref+0x114>)
    563c:	2103      	movs	r1, #3
    563e:	482c      	ldr	r0, [pc, #176]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    5640:	4b2c      	ldr	r3, [pc, #176]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    5642:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	f003 0310 	and.w	r3, r3, #16
    564a:	2b00      	cmp	r3, #0
    564c:	d004      	beq.n	5658 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    564e:	4a2d      	ldr	r2, [pc, #180]	; (5704 <_gclk_init_generators_by_fref+0x118>)
    5650:	2104      	movs	r1, #4
    5652:	4827      	ldr	r0, [pc, #156]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    5654:	4b27      	ldr	r3, [pc, #156]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    5656:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	f003 0320 	and.w	r3, r3, #32
    565e:	2b00      	cmp	r3, #0
    5660:	d004      	beq.n	566c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    5662:	4a29      	ldr	r2, [pc, #164]	; (5708 <_gclk_init_generators_by_fref+0x11c>)
    5664:	2105      	movs	r1, #5
    5666:	4822      	ldr	r0, [pc, #136]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    5668:	4b22      	ldr	r3, [pc, #136]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    566a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5672:	2b00      	cmp	r3, #0
    5674:	d004      	beq.n	5680 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    5676:	4a25      	ldr	r2, [pc, #148]	; (570c <_gclk_init_generators_by_fref+0x120>)
    5678:	2106      	movs	r1, #6
    567a:	481d      	ldr	r0, [pc, #116]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    567c:	4b1d      	ldr	r3, [pc, #116]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    567e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5686:	2b00      	cmp	r3, #0
    5688:	d004      	beq.n	5694 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    568a:	4a21      	ldr	r2, [pc, #132]	; (5710 <_gclk_init_generators_by_fref+0x124>)
    568c:	2107      	movs	r1, #7
    568e:	4818      	ldr	r0, [pc, #96]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    5690:	4b18      	ldr	r3, [pc, #96]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    5692:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	f403 7380 	and.w	r3, r3, #256	; 0x100
    569a:	2b00      	cmp	r3, #0
    569c:	d004      	beq.n	56a8 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    569e:	4a1d      	ldr	r2, [pc, #116]	; (5714 <_gclk_init_generators_by_fref+0x128>)
    56a0:	2108      	movs	r1, #8
    56a2:	4813      	ldr	r0, [pc, #76]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    56a4:	4b13      	ldr	r3, [pc, #76]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    56a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
    56ae:	2b00      	cmp	r3, #0
    56b0:	d004      	beq.n	56bc <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    56b2:	4a19      	ldr	r2, [pc, #100]	; (5718 <_gclk_init_generators_by_fref+0x12c>)
    56b4:	2109      	movs	r1, #9
    56b6:	480e      	ldr	r0, [pc, #56]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    56b8:	4b0e      	ldr	r3, [pc, #56]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    56ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    56c2:	2b00      	cmp	r3, #0
    56c4:	d004      	beq.n	56d0 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    56c6:	4a15      	ldr	r2, [pc, #84]	; (571c <_gclk_init_generators_by_fref+0x130>)
    56c8:	210a      	movs	r1, #10
    56ca:	4809      	ldr	r0, [pc, #36]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    56cc:	4b09      	ldr	r3, [pc, #36]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    56ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    56d6:	2b00      	cmp	r3, #0
    56d8:	d004      	beq.n	56e4 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    56da:	4a11      	ldr	r2, [pc, #68]	; (5720 <_gclk_init_generators_by_fref+0x134>)
    56dc:	210b      	movs	r1, #11
    56de:	4804      	ldr	r0, [pc, #16]	; (56f0 <_gclk_init_generators_by_fref+0x104>)
    56e0:	4b04      	ldr	r3, [pc, #16]	; (56f4 <_gclk_init_generators_by_fref+0x108>)
    56e2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    56e4:	bf00      	nop
    56e6:	3708      	adds	r7, #8
    56e8:	46bd      	mov	sp, r7
    56ea:	bd80      	pop	{r7, pc}
    56ec:	00010107 	.word	0x00010107
    56f0:	40001c00 	.word	0x40001c00
    56f4:	000055bd 	.word	0x000055bd
    56f8:	00010907 	.word	0x00010907
    56fc:	00010906 	.word	0x00010906
    5700:	00020908 	.word	0x00020908
    5704:	00010901 	.word	0x00010901
    5708:	00062901 	.word	0x00062901
    570c:	000c2901 	.word	0x000c2901
    5710:	00082908 	.word	0x00082908
    5714:	00032901 	.word	0x00032901
    5718:	00011908 	.word	0x00011908
    571c:	00010905 	.word	0x00010905
    5720:	00041905 	.word	0x00041905

00005724 <hri_mclk_write_CPUDIV_reg>:
{
    5724:	b480      	push	{r7}
    5726:	b083      	sub	sp, #12
    5728:	af00      	add	r7, sp, #0
    572a:	6078      	str	r0, [r7, #4]
    572c:	460b      	mov	r3, r1
    572e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	78fa      	ldrb	r2, [r7, #3]
    5734:	715a      	strb	r2, [r3, #5]
}
    5736:	bf00      	nop
    5738:	370c      	adds	r7, #12
    573a:	46bd      	mov	sp, r7
    573c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5740:	4770      	bx	lr
	...

00005744 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5744:	b580      	push	{r7, lr}
    5746:	b082      	sub	sp, #8
    5748:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    574a:	4b05      	ldr	r3, [pc, #20]	; (5760 <_mclk_init+0x1c>)
    574c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    574e:	2101      	movs	r1, #1
    5750:	6878      	ldr	r0, [r7, #4]
    5752:	4b04      	ldr	r3, [pc, #16]	; (5764 <_mclk_init+0x20>)
    5754:	4798      	blx	r3
}
    5756:	bf00      	nop
    5758:	3708      	adds	r7, #8
    575a:	46bd      	mov	sp, r7
    575c:	bd80      	pop	{r7, pc}
    575e:	bf00      	nop
    5760:	40000800 	.word	0x40000800
    5764:	00005725 	.word	0x00005725

00005768 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5768:	b480      	push	{r7}
    576a:	b083      	sub	sp, #12
    576c:	af00      	add	r7, sp, #0
    576e:	6078      	str	r0, [r7, #4]
    5770:	460b      	mov	r3, r1
    5772:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5774:	687b      	ldr	r3, [r7, #4]
    5776:	78fa      	ldrb	r2, [r7, #3]
    5778:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    577a:	bf00      	nop
    577c:	370c      	adds	r7, #12
    577e:	46bd      	mov	sp, r7
    5780:	f85d 7b04 	ldr.w	r7, [sp], #4
    5784:	4770      	bx	lr

00005786 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5786:	b480      	push	{r7}
    5788:	b083      	sub	sp, #12
    578a:	af00      	add	r7, sp, #0
    578c:	6078      	str	r0, [r7, #4]
    578e:	460b      	mov	r3, r1
    5790:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5792:	687b      	ldr	r3, [r7, #4]
    5794:	887a      	ldrh	r2, [r7, #2]
    5796:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5798:	bf00      	nop
    579a:	370c      	adds	r7, #12
    579c:	46bd      	mov	sp, r7
    579e:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a2:	4770      	bx	lr

000057a4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    57a4:	b480      	push	{r7}
    57a6:	b083      	sub	sp, #12
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
    57ac:	460b      	mov	r3, r1
    57ae:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	78fa      	ldrb	r2, [r7, #3]
    57b4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    57b6:	bf00      	nop
    57b8:	370c      	adds	r7, #12
    57ba:	46bd      	mov	sp, r7
    57bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c0:	4770      	bx	lr

000057c2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    57c2:	b480      	push	{r7}
    57c4:	b083      	sub	sp, #12
    57c6:	af00      	add	r7, sp, #0
    57c8:	6078      	str	r0, [r7, #4]
    57ca:	460b      	mov	r3, r1
    57cc:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	78fa      	ldrb	r2, [r7, #3]
    57d2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    57d4:	bf00      	nop
    57d6:	370c      	adds	r7, #12
    57d8:	46bd      	mov	sp, r7
    57da:	f85d 7b04 	ldr.w	r7, [sp], #4
    57de:	4770      	bx	lr

000057e0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    57e0:	b480      	push	{r7}
    57e2:	b085      	sub	sp, #20
    57e4:	af00      	add	r7, sp, #0
    57e6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    57e8:	687b      	ldr	r3, [r7, #4]
    57ea:	69db      	ldr	r3, [r3, #28]
    57ec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    57ee:	68fb      	ldr	r3, [r7, #12]
    57f0:	0a1b      	lsrs	r3, r3, #8
    57f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    57f6:	60fb      	str	r3, [r7, #12]
	return tmp;
    57f8:	68fb      	ldr	r3, [r7, #12]
}
    57fa:	4618      	mov	r0, r3
    57fc:	3714      	adds	r7, #20
    57fe:	46bd      	mov	sp, r7
    5800:	f85d 7b04 	ldr.w	r7, [sp], #4
    5804:	4770      	bx	lr

00005806 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5806:	b480      	push	{r7}
    5808:	b083      	sub	sp, #12
    580a:	af00      	add	r7, sp, #0
    580c:	6078      	str	r0, [r7, #4]
    580e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	683a      	ldr	r2, [r7, #0]
    5814:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5816:	bf00      	nop
    5818:	370c      	adds	r7, #12
    581a:	46bd      	mov	sp, r7
    581c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5820:	4770      	bx	lr
	...

00005824 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5824:	b580      	push	{r7, lr}
    5826:	b082      	sub	sp, #8
    5828:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    582a:	4b13      	ldr	r3, [pc, #76]	; (5878 <_osc32kctrl_init_sources+0x54>)
    582c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    582e:	2300      	movs	r3, #0
    5830:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5832:	f242 018e 	movw	r1, #8334	; 0x208e
    5836:	6878      	ldr	r0, [r7, #4]
    5838:	4b10      	ldr	r3, [pc, #64]	; (587c <_osc32kctrl_init_sources+0x58>)
    583a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    583c:	2100      	movs	r1, #0
    583e:	6878      	ldr	r0, [r7, #4]
    5840:	4b0f      	ldr	r3, [pc, #60]	; (5880 <_osc32kctrl_init_sources+0x5c>)
    5842:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5844:	2100      	movs	r1, #0
    5846:	6878      	ldr	r0, [r7, #4]
    5848:	4b0e      	ldr	r3, [pc, #56]	; (5884 <_osc32kctrl_init_sources+0x60>)
    584a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    584c:	6878      	ldr	r0, [r7, #4]
    584e:	4b0e      	ldr	r3, [pc, #56]	; (5888 <_osc32kctrl_init_sources+0x64>)
    5850:	4798      	blx	r3
    5852:	4603      	mov	r3, r0
    5854:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5856:	887b      	ldrh	r3, [r7, #2]
    5858:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    585a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    585e:	4619      	mov	r1, r3
    5860:	6878      	ldr	r0, [r7, #4]
    5862:	4b0a      	ldr	r3, [pc, #40]	; (588c <_osc32kctrl_init_sources+0x68>)
    5864:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5866:	2100      	movs	r1, #0
    5868:	6878      	ldr	r0, [r7, #4]
    586a:	4b09      	ldr	r3, [pc, #36]	; (5890 <_osc32kctrl_init_sources+0x6c>)
    586c:	4798      	blx	r3
	(void)calib;
}
    586e:	bf00      	nop
    5870:	3708      	adds	r7, #8
    5872:	46bd      	mov	sp, r7
    5874:	bd80      	pop	{r7, pc}
    5876:	bf00      	nop
    5878:	40001400 	.word	0x40001400
    587c:	00005787 	.word	0x00005787
    5880:	000057a5 	.word	0x000057a5
    5884:	000057c3 	.word	0x000057c3
    5888:	000057e1 	.word	0x000057e1
    588c:	00005807 	.word	0x00005807
    5890:	00005769 	.word	0x00005769

00005894 <hri_gclk_wait_for_sync>:
{
    5894:	b480      	push	{r7}
    5896:	b083      	sub	sp, #12
    5898:	af00      	add	r7, sp, #0
    589a:	6078      	str	r0, [r7, #4]
    589c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    589e:	bf00      	nop
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	685a      	ldr	r2, [r3, #4]
    58a4:	683b      	ldr	r3, [r7, #0]
    58a6:	4013      	ands	r3, r2
    58a8:	2b00      	cmp	r3, #0
    58aa:	d1f9      	bne.n	58a0 <hri_gclk_wait_for_sync+0xc>
}
    58ac:	bf00      	nop
    58ae:	370c      	adds	r7, #12
    58b0:	46bd      	mov	sp, r7
    58b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b6:	4770      	bx	lr

000058b8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    58b8:	b480      	push	{r7}
    58ba:	b083      	sub	sp, #12
    58bc:	af00      	add	r7, sp, #0
    58be:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    58c0:	687b      	ldr	r3, [r7, #4]
    58c2:	685b      	ldr	r3, [r3, #4]
    58c4:	089b      	lsrs	r3, r3, #2
    58c6:	f003 0301 	and.w	r3, r3, #1
    58ca:	2b00      	cmp	r3, #0
    58cc:	bf14      	ite	ne
    58ce:	2301      	movne	r3, #1
    58d0:	2300      	moveq	r3, #0
    58d2:	b2db      	uxtb	r3, r3
}
    58d4:	4618      	mov	r0, r3
    58d6:	370c      	adds	r7, #12
    58d8:	46bd      	mov	sp, r7
    58da:	f85d 7b04 	ldr.w	r7, [sp], #4
    58de:	4770      	bx	lr

000058e0 <hri_gclk_read_SYNCBUSY_reg>:
{
    58e0:	b480      	push	{r7}
    58e2:	b083      	sub	sp, #12
    58e4:	af00      	add	r7, sp, #0
    58e6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	685b      	ldr	r3, [r3, #4]
}
    58ec:	4618      	mov	r0, r3
    58ee:	370c      	adds	r7, #12
    58f0:	46bd      	mov	sp, r7
    58f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f6:	4770      	bx	lr

000058f8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    58f8:	b580      	push	{r7, lr}
    58fa:	b086      	sub	sp, #24
    58fc:	af00      	add	r7, sp, #0
    58fe:	60f8      	str	r0, [r7, #12]
    5900:	460b      	mov	r3, r1
    5902:	607a      	str	r2, [r7, #4]
    5904:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5906:	7afa      	ldrb	r2, [r7, #11]
    5908:	68fb      	ldr	r3, [r7, #12]
    590a:	3208      	adds	r2, #8
    590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5910:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5912:	697b      	ldr	r3, [r7, #20]
    5914:	f023 030f 	bic.w	r3, r3, #15
    5918:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	f003 030f 	and.w	r3, r3, #15
    5920:	697a      	ldr	r2, [r7, #20]
    5922:	4313      	orrs	r3, r2
    5924:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5926:	7afa      	ldrb	r2, [r7, #11]
    5928:	68fb      	ldr	r3, [r7, #12]
    592a:	3208      	adds	r2, #8
    592c:	6979      	ldr	r1, [r7, #20]
    592e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5932:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5936:	68f8      	ldr	r0, [r7, #12]
    5938:	4b02      	ldr	r3, [pc, #8]	; (5944 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    593a:	4798      	blx	r3
}
    593c:	bf00      	nop
    593e:	3718      	adds	r7, #24
    5940:	46bd      	mov	sp, r7
    5942:	bd80      	pop	{r7, pc}
    5944:	00005895 	.word	0x00005895

00005948 <hri_gclk_write_PCHCTRL_reg>:
{
    5948:	b480      	push	{r7}
    594a:	b085      	sub	sp, #20
    594c:	af00      	add	r7, sp, #0
    594e:	60f8      	str	r0, [r7, #12]
    5950:	460b      	mov	r3, r1
    5952:	607a      	str	r2, [r7, #4]
    5954:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5956:	7afa      	ldrb	r2, [r7, #11]
    5958:	68fb      	ldr	r3, [r7, #12]
    595a:	3220      	adds	r2, #32
    595c:	6879      	ldr	r1, [r7, #4]
    595e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5962:	bf00      	nop
    5964:	3714      	adds	r7, #20
    5966:	46bd      	mov	sp, r7
    5968:	f85d 7b04 	ldr.w	r7, [sp], #4
    596c:	4770      	bx	lr

0000596e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    596e:	b480      	push	{r7}
    5970:	b085      	sub	sp, #20
    5972:	af00      	add	r7, sp, #0
    5974:	60f8      	str	r0, [r7, #12]
    5976:	460b      	mov	r3, r1
    5978:	607a      	str	r2, [r7, #4]
    597a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    597c:	bf00      	nop
    597e:	7afa      	ldrb	r2, [r7, #11]
    5980:	68f9      	ldr	r1, [r7, #12]
    5982:	4613      	mov	r3, r2
    5984:	009b      	lsls	r3, r3, #2
    5986:	4413      	add	r3, r2
    5988:	009b      	lsls	r3, r3, #2
    598a:	440b      	add	r3, r1
    598c:	333c      	adds	r3, #60	; 0x3c
    598e:	681a      	ldr	r2, [r3, #0]
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	4013      	ands	r3, r2
    5994:	2b00      	cmp	r3, #0
    5996:	d1f2      	bne.n	597e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5998:	bf00      	nop
    599a:	3714      	adds	r7, #20
    599c:	46bd      	mov	sp, r7
    599e:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a2:	4770      	bx	lr

000059a4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    59a4:	b480      	push	{r7}
    59a6:	b083      	sub	sp, #12
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
    59ac:	460b      	mov	r3, r1
    59ae:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    59b0:	78fa      	ldrb	r2, [r7, #3]
    59b2:	6879      	ldr	r1, [r7, #4]
    59b4:	4613      	mov	r3, r2
    59b6:	009b      	lsls	r3, r3, #2
    59b8:	4413      	add	r3, r2
    59ba:	009b      	lsls	r3, r3, #2
    59bc:	440b      	add	r3, r1
    59be:	3340      	adds	r3, #64	; 0x40
    59c0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    59c2:	f003 0301 	and.w	r3, r3, #1
    59c6:	2b00      	cmp	r3, #0
    59c8:	bf14      	ite	ne
    59ca:	2301      	movne	r3, #1
    59cc:	2300      	moveq	r3, #0
    59ce:	b2db      	uxtb	r3, r3
}
    59d0:	4618      	mov	r0, r3
    59d2:	370c      	adds	r7, #12
    59d4:	46bd      	mov	sp, r7
    59d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59da:	4770      	bx	lr

000059dc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    59dc:	b480      	push	{r7}
    59de:	b083      	sub	sp, #12
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
    59e4:	460b      	mov	r3, r1
    59e6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    59e8:	78fa      	ldrb	r2, [r7, #3]
    59ea:	6879      	ldr	r1, [r7, #4]
    59ec:	4613      	mov	r3, r2
    59ee:	009b      	lsls	r3, r3, #2
    59f0:	4413      	add	r3, r2
    59f2:	009b      	lsls	r3, r3, #2
    59f4:	440b      	add	r3, r1
    59f6:	3340      	adds	r3, #64	; 0x40
    59f8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    59fa:	085b      	lsrs	r3, r3, #1
    59fc:	f003 0301 	and.w	r3, r3, #1
    5a00:	2b00      	cmp	r3, #0
    5a02:	bf14      	ite	ne
    5a04:	2301      	movne	r3, #1
    5a06:	2300      	moveq	r3, #0
    5a08:	b2db      	uxtb	r3, r3
}
    5a0a:	4618      	mov	r0, r3
    5a0c:	370c      	adds	r7, #12
    5a0e:	46bd      	mov	sp, r7
    5a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a14:	4770      	bx	lr
	...

00005a18 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5a18:	b580      	push	{r7, lr}
    5a1a:	b082      	sub	sp, #8
    5a1c:	af00      	add	r7, sp, #0
    5a1e:	6078      	str	r0, [r7, #4]
    5a20:	460b      	mov	r3, r1
    5a22:	70fb      	strb	r3, [r7, #3]
    5a24:	4613      	mov	r3, r2
    5a26:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5a28:	78fa      	ldrb	r2, [r7, #3]
    5a2a:	6879      	ldr	r1, [r7, #4]
    5a2c:	4613      	mov	r3, r2
    5a2e:	009b      	lsls	r3, r3, #2
    5a30:	4413      	add	r3, r2
    5a32:	009b      	lsls	r3, r3, #2
    5a34:	440b      	add	r3, r1
    5a36:	3330      	adds	r3, #48	; 0x30
    5a38:	78ba      	ldrb	r2, [r7, #2]
    5a3a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5a3c:	78fb      	ldrb	r3, [r7, #3]
    5a3e:	2202      	movs	r2, #2
    5a40:	4619      	mov	r1, r3
    5a42:	6878      	ldr	r0, [r7, #4]
    5a44:	4b02      	ldr	r3, [pc, #8]	; (5a50 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5a46:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a48:	bf00      	nop
    5a4a:	3708      	adds	r7, #8
    5a4c:	46bd      	mov	sp, r7
    5a4e:	bd80      	pop	{r7, pc}
    5a50:	0000596f 	.word	0x0000596f

00005a54 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b084      	sub	sp, #16
    5a58:	af00      	add	r7, sp, #0
    5a5a:	60f8      	str	r0, [r7, #12]
    5a5c:	460b      	mov	r3, r1
    5a5e:	607a      	str	r2, [r7, #4]
    5a60:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5a62:	7afa      	ldrb	r2, [r7, #11]
    5a64:	68f9      	ldr	r1, [r7, #12]
    5a66:	4613      	mov	r3, r2
    5a68:	009b      	lsls	r3, r3, #2
    5a6a:	4413      	add	r3, r2
    5a6c:	009b      	lsls	r3, r3, #2
    5a6e:	440b      	add	r3, r1
    5a70:	3334      	adds	r3, #52	; 0x34
    5a72:	687a      	ldr	r2, [r7, #4]
    5a74:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5a76:	7afb      	ldrb	r3, [r7, #11]
    5a78:	2206      	movs	r2, #6
    5a7a:	4619      	mov	r1, r3
    5a7c:	68f8      	ldr	r0, [r7, #12]
    5a7e:	4b03      	ldr	r3, [pc, #12]	; (5a8c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5a80:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a82:	bf00      	nop
    5a84:	3710      	adds	r7, #16
    5a86:	46bd      	mov	sp, r7
    5a88:	bd80      	pop	{r7, pc}
    5a8a:	bf00      	nop
    5a8c:	0000596f 	.word	0x0000596f

00005a90 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5a90:	b480      	push	{r7}
    5a92:	b085      	sub	sp, #20
    5a94:	af00      	add	r7, sp, #0
    5a96:	60f8      	str	r0, [r7, #12]
    5a98:	460b      	mov	r3, r1
    5a9a:	607a      	str	r2, [r7, #4]
    5a9c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5a9e:	7afa      	ldrb	r2, [r7, #11]
    5aa0:	68f9      	ldr	r1, [r7, #12]
    5aa2:	4613      	mov	r3, r2
    5aa4:	009b      	lsls	r3, r3, #2
    5aa6:	4413      	add	r3, r2
    5aa8:	009b      	lsls	r3, r3, #2
    5aaa:	440b      	add	r3, r1
    5aac:	3338      	adds	r3, #56	; 0x38
    5aae:	687a      	ldr	r2, [r7, #4]
    5ab0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ab2:	bf00      	nop
    5ab4:	3714      	adds	r7, #20
    5ab6:	46bd      	mov	sp, r7
    5ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5abc:	4770      	bx	lr

00005abe <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5abe:	b480      	push	{r7}
    5ac0:	b083      	sub	sp, #12
    5ac2:	af00      	add	r7, sp, #0
    5ac4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	691b      	ldr	r3, [r3, #16]
    5aca:	085b      	lsrs	r3, r3, #1
    5acc:	f003 0301 	and.w	r3, r3, #1
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	bf14      	ite	ne
    5ad4:	2301      	movne	r3, #1
    5ad6:	2300      	moveq	r3, #0
    5ad8:	b2db      	uxtb	r3, r3
}
    5ada:	4618      	mov	r0, r3
    5adc:	370c      	adds	r7, #12
    5ade:	46bd      	mov	sp, r7
    5ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ae4:	4770      	bx	lr

00005ae6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5ae6:	b480      	push	{r7}
    5ae8:	b083      	sub	sp, #12
    5aea:	af00      	add	r7, sp, #0
    5aec:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	691b      	ldr	r3, [r3, #16]
    5af2:	0a1b      	lsrs	r3, r3, #8
    5af4:	f003 0301 	and.w	r3, r3, #1
    5af8:	2b00      	cmp	r3, #0
    5afa:	bf14      	ite	ne
    5afc:	2301      	movne	r3, #1
    5afe:	2300      	moveq	r3, #0
    5b00:	b2db      	uxtb	r3, r3
}
    5b02:	4618      	mov	r0, r3
    5b04:	370c      	adds	r7, #12
    5b06:	46bd      	mov	sp, r7
    5b08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b0c:	4770      	bx	lr

00005b0e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5b0e:	b480      	push	{r7}
    5b10:	b085      	sub	sp, #20
    5b12:	af00      	add	r7, sp, #0
    5b14:	6078      	str	r0, [r7, #4]
    5b16:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5b18:	687b      	ldr	r3, [r7, #4]
    5b1a:	691b      	ldr	r3, [r3, #16]
    5b1c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b1e:	68fa      	ldr	r2, [r7, #12]
    5b20:	683b      	ldr	r3, [r7, #0]
    5b22:	4013      	ands	r3, r2
    5b24:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b26:	68fb      	ldr	r3, [r7, #12]
}
    5b28:	4618      	mov	r0, r3
    5b2a:	3714      	adds	r7, #20
    5b2c:	46bd      	mov	sp, r7
    5b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b32:	4770      	bx	lr

00005b34 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5b34:	b480      	push	{r7}
    5b36:	b085      	sub	sp, #20
    5b38:	af00      	add	r7, sp, #0
    5b3a:	60f8      	str	r0, [r7, #12]
    5b3c:	460b      	mov	r3, r1
    5b3e:	607a      	str	r2, [r7, #4]
    5b40:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5b42:	7afb      	ldrb	r3, [r7, #11]
    5b44:	68fa      	ldr	r2, [r7, #12]
    5b46:	3304      	adds	r3, #4
    5b48:	009b      	lsls	r3, r3, #2
    5b4a:	4413      	add	r3, r2
    5b4c:	687a      	ldr	r2, [r7, #4]
    5b4e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b50:	bf00      	nop
    5b52:	3714      	adds	r7, #20
    5b54:	46bd      	mov	sp, r7
    5b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b5a:	4770      	bx	lr

00005b5c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5b5c:	b480      	push	{r7}
    5b5e:	b083      	sub	sp, #12
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
    5b64:	460b      	mov	r3, r1
    5b66:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	78fa      	ldrb	r2, [r7, #3]
    5b6c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b6e:	bf00      	nop
    5b70:	370c      	adds	r7, #12
    5b72:	46bd      	mov	sp, r7
    5b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b78:	4770      	bx	lr

00005b7a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5b7a:	b480      	push	{r7}
    5b7c:	b085      	sub	sp, #20
    5b7e:	af00      	add	r7, sp, #0
    5b80:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	f893 3020 	ldrb.w	r3, [r3, #32]
    5b88:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5b8a:	7bfb      	ldrb	r3, [r7, #15]
    5b8c:	f003 0301 	and.w	r3, r3, #1
    5b90:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5b92:	7bfb      	ldrb	r3, [r7, #15]
    5b94:	2b00      	cmp	r3, #0
    5b96:	bf14      	ite	ne
    5b98:	2301      	movne	r3, #1
    5b9a:	2300      	moveq	r3, #0
    5b9c:	b2db      	uxtb	r3, r3
}
    5b9e:	4618      	mov	r0, r3
    5ba0:	3714      	adds	r7, #20
    5ba2:	46bd      	mov	sp, r7
    5ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ba8:	4770      	bx	lr

00005baa <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5baa:	b480      	push	{r7}
    5bac:	b083      	sub	sp, #12
    5bae:	af00      	add	r7, sp, #0
    5bb0:	6078      	str	r0, [r7, #4]
    5bb2:	460b      	mov	r3, r1
    5bb4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	78fa      	ldrb	r2, [r7, #3]
    5bba:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5bbe:	bf00      	nop
    5bc0:	370c      	adds	r7, #12
    5bc2:	46bd      	mov	sp, r7
    5bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bc8:	4770      	bx	lr

00005bca <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5bca:	b480      	push	{r7}
    5bcc:	b083      	sub	sp, #12
    5bce:	af00      	add	r7, sp, #0
    5bd0:	6078      	str	r0, [r7, #4]
    5bd2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5bd4:	687b      	ldr	r3, [r7, #4]
    5bd6:	683a      	ldr	r2, [r7, #0]
    5bd8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5bda:	bf00      	nop
    5bdc:	370c      	adds	r7, #12
    5bde:	46bd      	mov	sp, r7
    5be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5be4:	4770      	bx	lr

00005be6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5be6:	b480      	push	{r7}
    5be8:	b083      	sub	sp, #12
    5bea:	af00      	add	r7, sp, #0
    5bec:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5bf2:	4618      	mov	r0, r3
    5bf4:	370c      	adds	r7, #12
    5bf6:	46bd      	mov	sp, r7
    5bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bfc:	4770      	bx	lr

00005bfe <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5bfe:	b480      	push	{r7}
    5c00:	b083      	sub	sp, #12
    5c02:	af00      	add	r7, sp, #0
    5c04:	6078      	str	r0, [r7, #4]
    5c06:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	683a      	ldr	r2, [r7, #0]
    5c0c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5c0e:	bf00      	nop
    5c10:	370c      	adds	r7, #12
    5c12:	46bd      	mov	sp, r7
    5c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c18:	4770      	bx	lr

00005c1a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5c1a:	b480      	push	{r7}
    5c1c:	b085      	sub	sp, #20
    5c1e:	af00      	add	r7, sp, #0
    5c20:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c28:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5c2a:	7bfb      	ldrb	r3, [r7, #15]
    5c2c:	085b      	lsrs	r3, r3, #1
    5c2e:	b2db      	uxtb	r3, r3
    5c30:	f003 0301 	and.w	r3, r3, #1
    5c34:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c36:	7bfb      	ldrb	r3, [r7, #15]
    5c38:	2b00      	cmp	r3, #0
    5c3a:	bf14      	ite	ne
    5c3c:	2301      	movne	r3, #1
    5c3e:	2300      	moveq	r3, #0
    5c40:	b2db      	uxtb	r3, r3
}
    5c42:	4618      	mov	r0, r3
    5c44:	3714      	adds	r7, #20
    5c46:	46bd      	mov	sp, r7
    5c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4c:	4770      	bx	lr

00005c4e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5c4e:	b480      	push	{r7}
    5c50:	b085      	sub	sp, #20
    5c52:	af00      	add	r7, sp, #0
    5c54:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c5c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5c5e:	7bfb      	ldrb	r3, [r7, #15]
    5c60:	089b      	lsrs	r3, r3, #2
    5c62:	b2db      	uxtb	r3, r3
    5c64:	f003 0301 	and.w	r3, r3, #1
    5c68:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c6a:	7bfb      	ldrb	r3, [r7, #15]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	bf14      	ite	ne
    5c70:	2301      	movne	r3, #1
    5c72:	2300      	moveq	r3, #0
    5c74:	b2db      	uxtb	r3, r3
}
    5c76:	4618      	mov	r0, r3
    5c78:	3714      	adds	r7, #20
    5c7a:	46bd      	mov	sp, r7
    5c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c80:	4770      	bx	lr

00005c82 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5c82:	b480      	push	{r7}
    5c84:	b085      	sub	sp, #20
    5c86:	af00      	add	r7, sp, #0
    5c88:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c90:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5c92:	7bfb      	ldrb	r3, [r7, #15]
    5c94:	08db      	lsrs	r3, r3, #3
    5c96:	b2db      	uxtb	r3, r3
    5c98:	f003 0301 	and.w	r3, r3, #1
    5c9c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c9e:	7bfb      	ldrb	r3, [r7, #15]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	bf14      	ite	ne
    5ca4:	2301      	movne	r3, #1
    5ca6:	2300      	moveq	r3, #0
    5ca8:	b2db      	uxtb	r3, r3
}
    5caa:	4618      	mov	r0, r3
    5cac:	3714      	adds	r7, #20
    5cae:	46bd      	mov	sp, r7
    5cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb4:	4770      	bx	lr

00005cb6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5cb6:	b480      	push	{r7}
    5cb8:	b085      	sub	sp, #20
    5cba:	af00      	add	r7, sp, #0
    5cbc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5cbe:	687b      	ldr	r3, [r7, #4]
    5cc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5cc4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5cc6:	7bfb      	ldrb	r3, [r7, #15]
    5cc8:	091b      	lsrs	r3, r3, #4
    5cca:	b2db      	uxtb	r3, r3
    5ccc:	f003 0301 	and.w	r3, r3, #1
    5cd0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5cd2:	7bfb      	ldrb	r3, [r7, #15]
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	bf14      	ite	ne
    5cd8:	2301      	movne	r3, #1
    5cda:	2300      	moveq	r3, #0
    5cdc:	b2db      	uxtb	r3, r3
}
    5cde:	4618      	mov	r0, r3
    5ce0:	3714      	adds	r7, #20
    5ce2:	46bd      	mov	sp, r7
    5ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce8:	4770      	bx	lr
	...

00005cec <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5cec:	b580      	push	{r7, lr}
    5cee:	b082      	sub	sp, #8
    5cf0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5cf2:	4b0a      	ldr	r3, [pc, #40]	; (5d1c <_oscctrl_init_sources+0x30>)
    5cf4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5cf6:	4a0a      	ldr	r2, [pc, #40]	; (5d20 <_oscctrl_init_sources+0x34>)
    5cf8:	2101      	movs	r1, #1
    5cfa:	6878      	ldr	r0, [r7, #4]
    5cfc:	4b09      	ldr	r3, [pc, #36]	; (5d24 <_oscctrl_init_sources+0x38>)
    5cfe:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5d00:	bf00      	nop
    5d02:	6878      	ldr	r0, [r7, #4]
    5d04:	4b08      	ldr	r3, [pc, #32]	; (5d28 <_oscctrl_init_sources+0x3c>)
    5d06:	4798      	blx	r3
    5d08:	4603      	mov	r3, r0
    5d0a:	f083 0301 	eor.w	r3, r3, #1
    5d0e:	b2db      	uxtb	r3, r3
    5d10:	2b00      	cmp	r3, #0
    5d12:	d1f6      	bne.n	5d02 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5d14:	bf00      	nop
    5d16:	3708      	adds	r7, #8
    5d18:	46bd      	mov	sp, r7
    5d1a:	bd80      	pop	{r7, pc}
    5d1c:	40001000 	.word	0x40001000
    5d20:	03002646 	.word	0x03002646
    5d24:	00005b35 	.word	0x00005b35
    5d28:	00005abf 	.word	0x00005abf

00005d2c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b084      	sub	sp, #16
    5d30:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5d32:	4b6b      	ldr	r3, [pc, #428]	; (5ee0 <_oscctrl_init_referenced_generators+0x1b4>)
    5d34:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5d36:	2204      	movs	r2, #4
    5d38:	2100      	movs	r1, #0
    5d3a:	486a      	ldr	r0, [pc, #424]	; (5ee4 <_oscctrl_init_referenced_generators+0x1b8>)
    5d3c:	4b6a      	ldr	r3, [pc, #424]	; (5ee8 <_oscctrl_init_referenced_generators+0x1bc>)
    5d3e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5d40:	bf00      	nop
    5d42:	4868      	ldr	r0, [pc, #416]	; (5ee4 <_oscctrl_init_referenced_generators+0x1b8>)
    5d44:	4b69      	ldr	r3, [pc, #420]	; (5eec <_oscctrl_init_referenced_generators+0x1c0>)
    5d46:	4798      	blx	r3
    5d48:	4603      	mov	r3, r0
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d1f9      	bne.n	5d42 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5d4e:	2100      	movs	r1, #0
    5d50:	68f8      	ldr	r0, [r7, #12]
    5d52:	4b67      	ldr	r3, [pc, #412]	; (5ef0 <_oscctrl_init_referenced_generators+0x1c4>)
    5d54:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5d56:	4967      	ldr	r1, [pc, #412]	; (5ef4 <_oscctrl_init_referenced_generators+0x1c8>)
    5d58:	68f8      	ldr	r0, [r7, #12]
    5d5a:	4b67      	ldr	r3, [pc, #412]	; (5ef8 <_oscctrl_init_referenced_generators+0x1cc>)
    5d5c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5d5e:	bf00      	nop
    5d60:	68f8      	ldr	r0, [r7, #12]
    5d62:	4b66      	ldr	r3, [pc, #408]	; (5efc <_oscctrl_init_referenced_generators+0x1d0>)
    5d64:	4798      	blx	r3
    5d66:	4603      	mov	r3, r0
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d1f9      	bne.n	5d60 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5d6c:	2100      	movs	r1, #0
    5d6e:	68f8      	ldr	r0, [r7, #12]
    5d70:	4b63      	ldr	r3, [pc, #396]	; (5f00 <_oscctrl_init_referenced_generators+0x1d4>)
    5d72:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d74:	bf00      	nop
    5d76:	68f8      	ldr	r0, [r7, #12]
    5d78:	4b62      	ldr	r3, [pc, #392]	; (5f04 <_oscctrl_init_referenced_generators+0x1d8>)
    5d7a:	4798      	blx	r3
    5d7c:	4603      	mov	r3, r0
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d1f9      	bne.n	5d76 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5d82:	2302      	movs	r3, #2
    5d84:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5d86:	7afb      	ldrb	r3, [r7, #11]
    5d88:	4619      	mov	r1, r3
    5d8a:	68f8      	ldr	r0, [r7, #12]
    5d8c:	4b58      	ldr	r3, [pc, #352]	; (5ef0 <_oscctrl_init_referenced_generators+0x1c4>)
    5d8e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5d90:	bf00      	nop
    5d92:	68f8      	ldr	r0, [r7, #12]
    5d94:	4b5c      	ldr	r3, [pc, #368]	; (5f08 <_oscctrl_init_referenced_generators+0x1dc>)
    5d96:	4798      	blx	r3
    5d98:	4603      	mov	r3, r0
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d1f9      	bne.n	5d92 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5d9e:	68f8      	ldr	r0, [r7, #12]
    5da0:	4b5a      	ldr	r3, [pc, #360]	; (5f0c <_oscctrl_init_referenced_generators+0x1e0>)
    5da2:	4798      	blx	r3
    5da4:	4603      	mov	r3, r0
    5da6:	4619      	mov	r1, r3
    5da8:	68f8      	ldr	r0, [r7, #12]
    5daa:	4b59      	ldr	r3, [pc, #356]	; (5f10 <_oscctrl_init_referenced_generators+0x1e4>)
    5dac:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5dae:	bf00      	nop
    5db0:	68f8      	ldr	r0, [r7, #12]
    5db2:	4b58      	ldr	r3, [pc, #352]	; (5f14 <_oscctrl_init_referenced_generators+0x1e8>)
    5db4:	4798      	blx	r3
    5db6:	4603      	mov	r3, r0
    5db8:	2b00      	cmp	r3, #0
    5dba:	d1f9      	bne.n	5db0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5dbc:	2319      	movs	r3, #25
    5dbe:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5dc0:	7afb      	ldrb	r3, [r7, #11]
    5dc2:	4619      	mov	r1, r3
    5dc4:	68f8      	ldr	r0, [r7, #12]
    5dc6:	4b4e      	ldr	r3, [pc, #312]	; (5f00 <_oscctrl_init_referenced_generators+0x1d4>)
    5dc8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5dca:	bf00      	nop
    5dcc:	68f8      	ldr	r0, [r7, #12]
    5dce:	4b4d      	ldr	r3, [pc, #308]	; (5f04 <_oscctrl_init_referenced_generators+0x1d8>)
    5dd0:	4798      	blx	r3
    5dd2:	4603      	mov	r3, r0
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d1f9      	bne.n	5dcc <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5dd8:	2245      	movs	r2, #69	; 0x45
    5dda:	2101      	movs	r1, #1
    5ddc:	4841      	ldr	r0, [pc, #260]	; (5ee4 <_oscctrl_init_referenced_generators+0x1b8>)
    5dde:	4b4e      	ldr	r3, [pc, #312]	; (5f18 <_oscctrl_init_referenced_generators+0x1ec>)
    5de0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5de2:	223b      	movs	r2, #59	; 0x3b
    5de4:	2100      	movs	r1, #0
    5de6:	68f8      	ldr	r0, [r7, #12]
    5de8:	4b4c      	ldr	r3, [pc, #304]	; (5f1c <_oscctrl_init_referenced_generators+0x1f0>)
    5dea:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5dec:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5df0:	2100      	movs	r1, #0
    5df2:	68f8      	ldr	r0, [r7, #12]
    5df4:	4b4a      	ldr	r3, [pc, #296]	; (5f20 <_oscctrl_init_referenced_generators+0x1f4>)
    5df6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5df8:	2242      	movs	r2, #66	; 0x42
    5dfa:	2100      	movs	r1, #0
    5dfc:	68f8      	ldr	r0, [r7, #12]
    5dfe:	4b49      	ldr	r3, [pc, #292]	; (5f24 <_oscctrl_init_referenced_generators+0x1f8>)
    5e00:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5e02:	4a49      	ldr	r2, [pc, #292]	; (5f28 <_oscctrl_init_referenced_generators+0x1fc>)
    5e04:	2101      	movs	r1, #1
    5e06:	68f8      	ldr	r0, [r7, #12]
    5e08:	4b44      	ldr	r3, [pc, #272]	; (5f1c <_oscctrl_init_referenced_generators+0x1f0>)
    5e0a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5e0c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5e10:	2101      	movs	r1, #1
    5e12:	68f8      	ldr	r0, [r7, #12]
    5e14:	4b42      	ldr	r3, [pc, #264]	; (5f20 <_oscctrl_init_referenced_generators+0x1f4>)
    5e16:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5e18:	2202      	movs	r2, #2
    5e1a:	2101      	movs	r1, #1
    5e1c:	68f8      	ldr	r0, [r7, #12]
    5e1e:	4b41      	ldr	r3, [pc, #260]	; (5f24 <_oscctrl_init_referenced_generators+0x1f8>)
    5e20:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5e22:	68f8      	ldr	r0, [r7, #12]
    5e24:	4b41      	ldr	r3, [pc, #260]	; (5f2c <_oscctrl_init_referenced_generators+0x200>)
    5e26:	4798      	blx	r3
    5e28:	4603      	mov	r3, r0
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d00c      	beq.n	5e48 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5e2e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5e32:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5e34:	bf00      	nop
    5e36:	6879      	ldr	r1, [r7, #4]
    5e38:	68f8      	ldr	r0, [r7, #12]
    5e3a:	4b3d      	ldr	r3, [pc, #244]	; (5f30 <_oscctrl_init_referenced_generators+0x204>)
    5e3c:	4798      	blx	r3
    5e3e:	4602      	mov	r2, r0
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	429a      	cmp	r2, r3
    5e44:	d1f7      	bne.n	5e36 <_oscctrl_init_referenced_generators+0x10a>
    5e46:	e009      	b.n	5e5c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5e48:	bf00      	nop
    5e4a:	68f8      	ldr	r0, [r7, #12]
    5e4c:	4b39      	ldr	r3, [pc, #228]	; (5f34 <_oscctrl_init_referenced_generators+0x208>)
    5e4e:	4798      	blx	r3
    5e50:	4603      	mov	r3, r0
    5e52:	f083 0301 	eor.w	r3, r3, #1
    5e56:	b2db      	uxtb	r3, r3
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d1f6      	bne.n	5e4a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5e5c:	bf00      	nop
    5e5e:	2100      	movs	r1, #0
    5e60:	68f8      	ldr	r0, [r7, #12]
    5e62:	4b35      	ldr	r3, [pc, #212]	; (5f38 <_oscctrl_init_referenced_generators+0x20c>)
    5e64:	4798      	blx	r3
    5e66:	4603      	mov	r3, r0
    5e68:	f083 0301 	eor.w	r3, r3, #1
    5e6c:	b2db      	uxtb	r3, r3
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d009      	beq.n	5e86 <_oscctrl_init_referenced_generators+0x15a>
    5e72:	2100      	movs	r1, #0
    5e74:	68f8      	ldr	r0, [r7, #12]
    5e76:	4b31      	ldr	r3, [pc, #196]	; (5f3c <_oscctrl_init_referenced_generators+0x210>)
    5e78:	4798      	blx	r3
    5e7a:	4603      	mov	r3, r0
    5e7c:	f083 0301 	eor.w	r3, r3, #1
    5e80:	b2db      	uxtb	r3, r3
    5e82:	2b00      	cmp	r3, #0
    5e84:	d1eb      	bne.n	5e5e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5e86:	bf00      	nop
    5e88:	2101      	movs	r1, #1
    5e8a:	68f8      	ldr	r0, [r7, #12]
    5e8c:	4b2a      	ldr	r3, [pc, #168]	; (5f38 <_oscctrl_init_referenced_generators+0x20c>)
    5e8e:	4798      	blx	r3
    5e90:	4603      	mov	r3, r0
    5e92:	f083 0301 	eor.w	r3, r3, #1
    5e96:	b2db      	uxtb	r3, r3
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d009      	beq.n	5eb0 <_oscctrl_init_referenced_generators+0x184>
    5e9c:	2101      	movs	r1, #1
    5e9e:	68f8      	ldr	r0, [r7, #12]
    5ea0:	4b26      	ldr	r3, [pc, #152]	; (5f3c <_oscctrl_init_referenced_generators+0x210>)
    5ea2:	4798      	blx	r3
    5ea4:	4603      	mov	r3, r0
    5ea6:	f083 0301 	eor.w	r3, r3, #1
    5eaa:	b2db      	uxtb	r3, r3
    5eac:	2b00      	cmp	r3, #0
    5eae:	d1eb      	bne.n	5e88 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5eb0:	bf00      	nop
    5eb2:	480c      	ldr	r0, [pc, #48]	; (5ee4 <_oscctrl_init_referenced_generators+0x1b8>)
    5eb4:	4b22      	ldr	r3, [pc, #136]	; (5f40 <_oscctrl_init_referenced_generators+0x214>)
    5eb6:	4798      	blx	r3
    5eb8:	4603      	mov	r3, r0
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d1f9      	bne.n	5eb2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5ebe:	2207      	movs	r2, #7
    5ec0:	2100      	movs	r1, #0
    5ec2:	4808      	ldr	r0, [pc, #32]	; (5ee4 <_oscctrl_init_referenced_generators+0x1b8>)
    5ec4:	4b08      	ldr	r3, [pc, #32]	; (5ee8 <_oscctrl_init_referenced_generators+0x1bc>)
    5ec6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5ec8:	bf00      	nop
    5eca:	4806      	ldr	r0, [pc, #24]	; (5ee4 <_oscctrl_init_referenced_generators+0x1b8>)
    5ecc:	4b07      	ldr	r3, [pc, #28]	; (5eec <_oscctrl_init_referenced_generators+0x1c0>)
    5ece:	4798      	blx	r3
    5ed0:	4603      	mov	r3, r0
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d1f9      	bne.n	5eca <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5ed6:	bf00      	nop
    5ed8:	3710      	adds	r7, #16
    5eda:	46bd      	mov	sp, r7
    5edc:	bd80      	pop	{r7, pc}
    5ede:	bf00      	nop
    5ee0:	40001000 	.word	0x40001000
    5ee4:	40001c00 	.word	0x40001c00
    5ee8:	000058f9 	.word	0x000058f9
    5eec:	000058b9 	.word	0x000058b9
    5ef0:	00005b5d 	.word	0x00005b5d
    5ef4:	0401bb80 	.word	0x0401bb80
    5ef8:	00005bff 	.word	0x00005bff
    5efc:	00005cb7 	.word	0x00005cb7
    5f00:	00005bab 	.word	0x00005bab
    5f04:	00005c4f 	.word	0x00005c4f
    5f08:	00005c1b 	.word	0x00005c1b
    5f0c:	00005be7 	.word	0x00005be7
    5f10:	00005bcb 	.word	0x00005bcb
    5f14:	00005c83 	.word	0x00005c83
    5f18:	00005949 	.word	0x00005949
    5f1c:	00005a55 	.word	0x00005a55
    5f20:	00005a91 	.word	0x00005a91
    5f24:	00005a19 	.word	0x00005a19
    5f28:	000407a0 	.word	0x000407a0
    5f2c:	00005b7b 	.word	0x00005b7b
    5f30:	00005b0f 	.word	0x00005b0f
    5f34:	00005ae7 	.word	0x00005ae7
    5f38:	000059a5 	.word	0x000059a5
    5f3c:	000059dd 	.word	0x000059dd
    5f40:	000058e1 	.word	0x000058e1

00005f44 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5f44:	b480      	push	{r7}
    5f46:	b083      	sub	sp, #12
    5f48:	af00      	add	r7, sp, #0
    5f4a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	69db      	ldr	r3, [r3, #28]
    5f50:	0a9b      	lsrs	r3, r3, #10
    5f52:	f003 0301 	and.w	r3, r3, #1
    5f56:	2b00      	cmp	r3, #0
    5f58:	bf14      	ite	ne
    5f5a:	2301      	movne	r3, #1
    5f5c:	2300      	moveq	r3, #0
    5f5e:	b2db      	uxtb	r3, r3
}
    5f60:	4618      	mov	r0, r3
    5f62:	370c      	adds	r7, #12
    5f64:	46bd      	mov	sp, r7
    5f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f6a:	4770      	bx	lr

00005f6c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5f6c:	b480      	push	{r7}
    5f6e:	b083      	sub	sp, #12
    5f70:	af00      	add	r7, sp, #0
    5f72:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5f7a:	61da      	str	r2, [r3, #28]
}
    5f7c:	bf00      	nop
    5f7e:	370c      	adds	r7, #12
    5f80:	46bd      	mov	sp, r7
    5f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f86:	4770      	bx	lr

00005f88 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5f88:	b480      	push	{r7}
    5f8a:	b083      	sub	sp, #12
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	683a      	ldr	r2, [r7, #0]
    5f96:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f98:	bf00      	nop
    5f9a:	370c      	adds	r7, #12
    5f9c:	46bd      	mov	sp, r7
    5f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa2:	4770      	bx	lr

00005fa4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5fa4:	b480      	push	{r7}
    5fa6:	b083      	sub	sp, #12
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
    5fac:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	683a      	ldr	r2, [r7, #0]
    5fb2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fb4:	bf00      	nop
    5fb6:	370c      	adds	r7, #12
    5fb8:	46bd      	mov	sp, r7
    5fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fbe:	4770      	bx	lr

00005fc0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5fc0:	b480      	push	{r7}
    5fc2:	b083      	sub	sp, #12
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
    5fc8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	683a      	ldr	r2, [r7, #0]
    5fce:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fd0:	bf00      	nop
    5fd2:	370c      	adds	r7, #12
    5fd4:	46bd      	mov	sp, r7
    5fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fda:	4770      	bx	lr

00005fdc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5fdc:	b480      	push	{r7}
    5fde:	b083      	sub	sp, #12
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	6078      	str	r0, [r7, #4]
    5fe4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5fe6:	687b      	ldr	r3, [r7, #4]
    5fe8:	683a      	ldr	r2, [r7, #0]
    5fea:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fec:	bf00      	nop
    5fee:	370c      	adds	r7, #12
    5ff0:	46bd      	mov	sp, r7
    5ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff6:	4770      	bx	lr

00005ff8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5ff8:	b480      	push	{r7}
    5ffa:	b085      	sub	sp, #20
    5ffc:	af00      	add	r7, sp, #0
    5ffe:	6078      	str	r0, [r7, #4]
    6000:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6002:	687b      	ldr	r3, [r7, #4]
    6004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6006:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    6008:	68fb      	ldr	r3, [r7, #12]
    600a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    600e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    6010:	683b      	ldr	r3, [r7, #0]
    6012:	b2db      	uxtb	r3, r3
    6014:	68fa      	ldr	r2, [r7, #12]
    6016:	4313      	orrs	r3, r2
    6018:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	68fa      	ldr	r2, [r7, #12]
    601e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6020:	bf00      	nop
    6022:	3714      	adds	r7, #20
    6024:	46bd      	mov	sp, r7
    6026:	f85d 7b04 	ldr.w	r7, [sp], #4
    602a:	4770      	bx	lr

0000602c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    602c:	b480      	push	{r7}
    602e:	b085      	sub	sp, #20
    6030:	af00      	add	r7, sp, #0
    6032:	6078      	str	r0, [r7, #4]
    6034:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6036:	687b      	ldr	r3, [r7, #4]
    6038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    603a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    603c:	68fb      	ldr	r3, [r7, #12]
    603e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    6042:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    6044:	683b      	ldr	r3, [r7, #0]
    6046:	041b      	lsls	r3, r3, #16
    6048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    604c:	68fa      	ldr	r2, [r7, #12]
    604e:	4313      	orrs	r3, r2
    6050:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	68fa      	ldr	r2, [r7, #12]
    6056:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6058:	bf00      	nop
    605a:	3714      	adds	r7, #20
    605c:	46bd      	mov	sp, r7
    605e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6062:	4770      	bx	lr

00006064 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    6064:	b480      	push	{r7}
    6066:	b083      	sub	sp, #12
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
    606c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	683a      	ldr	r2, [r7, #0]
    6072:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6074:	bf00      	nop
    6076:	370c      	adds	r7, #12
    6078:	46bd      	mov	sp, r7
    607a:	f85d 7b04 	ldr.w	r7, [sp], #4
    607e:	4770      	bx	lr

00006080 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    6080:	b480      	push	{r7}
    6082:	b083      	sub	sp, #12
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    608c:	4618      	mov	r0, r3
    608e:	370c      	adds	r7, #12
    6090:	46bd      	mov	sp, r7
    6092:	f85d 7b04 	ldr.w	r7, [sp], #4
    6096:	4770      	bx	lr

00006098 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    6098:	b480      	push	{r7}
    609a:	b085      	sub	sp, #20
    609c:	af00      	add	r7, sp, #0
    609e:	60f8      	str	r0, [r7, #12]
    60a0:	60b9      	str	r1, [r7, #8]
    60a2:	607a      	str	r2, [r7, #4]
	while (count--) {
    60a4:	e007      	b.n	60b6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    60a6:	68fb      	ldr	r3, [r7, #12]
    60a8:	1c5a      	adds	r2, r3, #1
    60aa:	60fa      	str	r2, [r7, #12]
    60ac:	68ba      	ldr	r2, [r7, #8]
    60ae:	1c51      	adds	r1, r2, #1
    60b0:	60b9      	str	r1, [r7, #8]
    60b2:	7812      	ldrb	r2, [r2, #0]
    60b4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    60b6:	687b      	ldr	r3, [r7, #4]
    60b8:	1e5a      	subs	r2, r3, #1
    60ba:	607a      	str	r2, [r7, #4]
    60bc:	2b00      	cmp	r3, #0
    60be:	d1f2      	bne.n	60a6 <_qspi_memcpy+0xe>
	}
}
    60c0:	bf00      	nop
    60c2:	3714      	adds	r7, #20
    60c4:	46bd      	mov	sp, r7
    60c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ca:	4770      	bx	lr

000060cc <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    60cc:	b580      	push	{r7, lr}
    60ce:	b082      	sub	sp, #8
    60d0:	af00      	add	r7, sp, #0
    60d2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    60d4:	4903      	ldr	r1, [pc, #12]	; (60e4 <_qspi_end_transfer+0x18>)
    60d6:	6878      	ldr	r0, [r7, #4]
    60d8:	4b03      	ldr	r3, [pc, #12]	; (60e8 <_qspi_end_transfer+0x1c>)
    60da:	4798      	blx	r3
}
    60dc:	bf00      	nop
    60de:	3708      	adds	r7, #8
    60e0:	46bd      	mov	sp, r7
    60e2:	bd80      	pop	{r7, pc}
    60e4:	01000002 	.word	0x01000002
    60e8:	00005f89 	.word	0x00005f89

000060ec <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b082      	sub	sp, #8
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
    60f4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	2b00      	cmp	r3, #0
    60fa:	d004      	beq.n	6106 <_qspi_sync_init+0x1a>
    60fc:	683b      	ldr	r3, [r7, #0]
    60fe:	2b00      	cmp	r3, #0
    6100:	d001      	beq.n	6106 <_qspi_sync_init+0x1a>
    6102:	2301      	movs	r3, #1
    6104:	e000      	b.n	6108 <_qspi_sync_init+0x1c>
    6106:	2300      	movs	r3, #0
    6108:	f003 0301 	and.w	r3, r3, #1
    610c:	b2db      	uxtb	r3, r3
    610e:	2240      	movs	r2, #64	; 0x40
    6110:	490c      	ldr	r1, [pc, #48]	; (6144 <_qspi_sync_init+0x58>)
    6112:	4618      	mov	r0, r3
    6114:	4b0c      	ldr	r3, [pc, #48]	; (6148 <_qspi_sync_init+0x5c>)
    6116:	4798      	blx	r3
	dev->prvt = hw;
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	683a      	ldr	r2, [r7, #0]
    611c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	2101      	movs	r1, #1
    6124:	4618      	mov	r0, r3
    6126:	4b09      	ldr	r3, [pc, #36]	; (614c <_qspi_sync_init+0x60>)
    6128:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    612a:	4909      	ldr	r1, [pc, #36]	; (6150 <_qspi_sync_init+0x64>)
    612c:	6838      	ldr	r0, [r7, #0]
    612e:	4b09      	ldr	r3, [pc, #36]	; (6154 <_qspi_sync_init+0x68>)
    6130:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    6132:	4909      	ldr	r1, [pc, #36]	; (6158 <_qspi_sync_init+0x6c>)
    6134:	6838      	ldr	r0, [r7, #0]
    6136:	4b09      	ldr	r3, [pc, #36]	; (615c <_qspi_sync_init+0x70>)
    6138:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    613a:	2300      	movs	r3, #0
}
    613c:	4618      	mov	r0, r3
    613e:	3708      	adds	r7, #8
    6140:	46bd      	mov	sp, r7
    6142:	bd80      	pop	{r7, pc}
    6144:	000141f0 	.word	0x000141f0
    6148:	000040f5 	.word	0x000040f5
    614c:	00005f89 	.word	0x00005f89
    6150:	06000011 	.word	0x06000011
    6154:	00005fa5 	.word	0x00005fa5
    6158:	00241300 	.word	0x00241300
    615c:	00005fc1 	.word	0x00005fc1

00006160 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6160:	b580      	push	{r7, lr}
    6162:	b082      	sub	sp, #8
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	681b      	ldr	r3, [r3, #0]
    616c:	2102      	movs	r1, #2
    616e:	4618      	mov	r0, r3
    6170:	4b03      	ldr	r3, [pc, #12]	; (6180 <_qspi_sync_enable+0x20>)
    6172:	4798      	blx	r3
	return ERR_NONE;
    6174:	2300      	movs	r3, #0
}
    6176:	4618      	mov	r0, r3
    6178:	3708      	adds	r7, #8
    617a:	46bd      	mov	sp, r7
    617c:	bd80      	pop	{r7, pc}
    617e:	bf00      	nop
    6180:	00005f89 	.word	0x00005f89

00006184 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    6184:	b580      	push	{r7, lr}
    6186:	b082      	sub	sp, #8
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	2100      	movs	r1, #0
    6192:	4618      	mov	r0, r3
    6194:	4b03      	ldr	r3, [pc, #12]	; (61a4 <_qspi_sync_disable+0x20>)
    6196:	4798      	blx	r3
	return ERR_NONE;
    6198:	2300      	movs	r3, #0
}
    619a:	4618      	mov	r0, r3
    619c:	3708      	adds	r7, #8
    619e:	46bd      	mov	sp, r7
    61a0:	bd80      	pop	{r7, pc}
    61a2:	bf00      	nop
    61a4:	00005f89 	.word	0x00005f89

000061a8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    61a8:	b580      	push	{r7, lr}
    61aa:	b084      	sub	sp, #16
    61ac:	af00      	add	r7, sp, #0
    61ae:	6078      	str	r0, [r7, #4]
    61b0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    61b2:	687b      	ldr	r3, [r7, #4]
    61b4:	681b      	ldr	r3, [r3, #0]
    61b6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    61b8:	683b      	ldr	r3, [r7, #0]
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	f003 0320 	and.w	r3, r3, #32
    61c0:	b2db      	uxtb	r3, r3
    61c2:	2b00      	cmp	r3, #0
    61c4:	d005      	beq.n	61d2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    61c6:	683b      	ldr	r3, [r7, #0]
    61c8:	689b      	ldr	r3, [r3, #8]
    61ca:	4619      	mov	r1, r3
    61cc:	68f8      	ldr	r0, [r7, #12]
    61ce:	4b13      	ldr	r3, [pc, #76]	; (621c <_qspi_sync_command_set_ifr+0x74>)
    61d0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    61d2:	683b      	ldr	r3, [r7, #0]
    61d4:	781b      	ldrb	r3, [r3, #0]
    61d6:	f003 0310 	and.w	r3, r3, #16
    61da:	b2db      	uxtb	r3, r3
    61dc:	2b00      	cmp	r3, #0
    61de:	d005      	beq.n	61ec <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    61e0:	683b      	ldr	r3, [r7, #0]
    61e2:	791b      	ldrb	r3, [r3, #4]
    61e4:	4619      	mov	r1, r3
    61e6:	68f8      	ldr	r0, [r7, #12]
    61e8:	4b0d      	ldr	r3, [pc, #52]	; (6220 <_qspi_sync_command_set_ifr+0x78>)
    61ea:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    61ec:	683b      	ldr	r3, [r7, #0]
    61ee:	781b      	ldrb	r3, [r3, #0]
    61f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    61f4:	b2db      	uxtb	r3, r3
    61f6:	2b00      	cmp	r3, #0
    61f8:	d005      	beq.n	6206 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    61fa:	683b      	ldr	r3, [r7, #0]
    61fc:	795b      	ldrb	r3, [r3, #5]
    61fe:	4619      	mov	r1, r3
    6200:	68f8      	ldr	r0, [r7, #12]
    6202:	4b08      	ldr	r3, [pc, #32]	; (6224 <_qspi_sync_command_set_ifr+0x7c>)
    6204:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    6206:	683b      	ldr	r3, [r7, #0]
    6208:	681b      	ldr	r3, [r3, #0]
    620a:	4619      	mov	r1, r3
    620c:	68f8      	ldr	r0, [r7, #12]
    620e:	4b06      	ldr	r3, [pc, #24]	; (6228 <_qspi_sync_command_set_ifr+0x80>)
    6210:	4798      	blx	r3
}
    6212:	bf00      	nop
    6214:	3710      	adds	r7, #16
    6216:	46bd      	mov	sp, r7
    6218:	bd80      	pop	{r7, pc}
    621a:	bf00      	nop
    621c:	00005fdd 	.word	0x00005fdd
    6220:	00005ff9 	.word	0x00005ff9
    6224:	0000602d 	.word	0x0000602d
    6228:	00006065 	.word	0x00006065

0000622c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    622c:	b580      	push	{r7, lr}
    622e:	b084      	sub	sp, #16
    6230:	af00      	add	r7, sp, #0
    6232:	6078      	str	r0, [r7, #4]
    6234:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    6236:	687b      	ldr	r3, [r7, #4]
    6238:	681b      	ldr	r3, [r3, #0]
    623a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    623c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6240:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    6242:	683b      	ldr	r3, [r7, #0]
    6244:	781b      	ldrb	r3, [r3, #0]
    6246:	f003 0320 	and.w	r3, r3, #32
    624a:	b2db      	uxtb	r3, r3
    624c:	2b00      	cmp	r3, #0
    624e:	d004      	beq.n	625a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6250:	683b      	ldr	r3, [r7, #0]
    6252:	689b      	ldr	r3, [r3, #8]
    6254:	68fa      	ldr	r2, [r7, #12]
    6256:	4413      	add	r3, r2
    6258:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    625a:	68b8      	ldr	r0, [r7, #8]
    625c:	4b18      	ldr	r3, [pc, #96]	; (62c0 <_qspi_sync_run_transfer+0x94>)
    625e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6260:	683b      	ldr	r3, [r7, #0]
    6262:	691b      	ldr	r3, [r3, #16]
    6264:	2b00      	cmp	r3, #0
    6266:	d103      	bne.n	6270 <_qspi_sync_run_transfer+0x44>
    6268:	683b      	ldr	r3, [r7, #0]
    626a:	695b      	ldr	r3, [r3, #20]
    626c:	2b00      	cmp	r3, #0
    626e:	d001      	beq.n	6274 <_qspi_sync_run_transfer+0x48>
    6270:	2301      	movs	r3, #1
    6272:	e000      	b.n	6276 <_qspi_sync_run_transfer+0x4a>
    6274:	2300      	movs	r3, #0
    6276:	f003 0301 	and.w	r3, r3, #1
    627a:	b2db      	uxtb	r3, r3
    627c:	2282      	movs	r2, #130	; 0x82
    627e:	4911      	ldr	r1, [pc, #68]	; (62c4 <_qspi_sync_run_transfer+0x98>)
    6280:	4618      	mov	r0, r3
    6282:	4b11      	ldr	r3, [pc, #68]	; (62c8 <_qspi_sync_run_transfer+0x9c>)
    6284:	4798      	blx	r3

	if (cmd->tx_buf) {
    6286:	683b      	ldr	r3, [r7, #0]
    6288:	691b      	ldr	r3, [r3, #16]
    628a:	2b00      	cmp	r3, #0
    628c:	d008      	beq.n	62a0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    628e:	683b      	ldr	r3, [r7, #0]
    6290:	6919      	ldr	r1, [r3, #16]
    6292:	683b      	ldr	r3, [r7, #0]
    6294:	68db      	ldr	r3, [r3, #12]
    6296:	461a      	mov	r2, r3
    6298:	68f8      	ldr	r0, [r7, #12]
    629a:	4b0c      	ldr	r3, [pc, #48]	; (62cc <_qspi_sync_run_transfer+0xa0>)
    629c:	4798      	blx	r3
    629e:	e007      	b.n	62b0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    62a0:	683b      	ldr	r3, [r7, #0]
    62a2:	6958      	ldr	r0, [r3, #20]
    62a4:	683b      	ldr	r3, [r7, #0]
    62a6:	68db      	ldr	r3, [r3, #12]
    62a8:	461a      	mov	r2, r3
    62aa:	68f9      	ldr	r1, [r7, #12]
    62ac:	4b07      	ldr	r3, [pc, #28]	; (62cc <_qspi_sync_run_transfer+0xa0>)
    62ae:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    62b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62b4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    62b8:	bf00      	nop
    62ba:	3710      	adds	r7, #16
    62bc:	46bd      	mov	sp, r7
    62be:	bd80      	pop	{r7, pc}
    62c0:	00006081 	.word	0x00006081
    62c4:	000141f0 	.word	0x000141f0
    62c8:	000040f5 	.word	0x000040f5
    62cc:	00006099 	.word	0x00006099

000062d0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    62d0:	b580      	push	{r7, lr}
    62d2:	b082      	sub	sp, #8
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    62da:	6839      	ldr	r1, [r7, #0]
    62dc:	6878      	ldr	r0, [r7, #4]
    62de:	4b14      	ldr	r3, [pc, #80]	; (6330 <_qspi_sync_serial_run_command+0x60>)
    62e0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	781b      	ldrb	r3, [r3, #0]
    62e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    62ea:	b2db      	uxtb	r3, r3
    62ec:	2b00      	cmp	r3, #0
    62ee:	d003      	beq.n	62f8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    62f0:	6839      	ldr	r1, [r7, #0]
    62f2:	6878      	ldr	r0, [r7, #4]
    62f4:	4b0f      	ldr	r3, [pc, #60]	; (6334 <_qspi_sync_serial_run_command+0x64>)
    62f6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    62f8:	687b      	ldr	r3, [r7, #4]
    62fa:	681b      	ldr	r3, [r3, #0]
    62fc:	4618      	mov	r0, r3
    62fe:	4b0e      	ldr	r3, [pc, #56]	; (6338 <_qspi_sync_serial_run_command+0x68>)
    6300:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    6302:	bf00      	nop
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	4618      	mov	r0, r3
    630a:	4b0c      	ldr	r3, [pc, #48]	; (633c <_qspi_sync_serial_run_command+0x6c>)
    630c:	4798      	blx	r3
    630e:	4603      	mov	r3, r0
    6310:	f083 0301 	eor.w	r3, r3, #1
    6314:	b2db      	uxtb	r3, r3
    6316:	2b00      	cmp	r3, #0
    6318:	d1f4      	bne.n	6304 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	681b      	ldr	r3, [r3, #0]
    631e:	4618      	mov	r0, r3
    6320:	4b07      	ldr	r3, [pc, #28]	; (6340 <_qspi_sync_serial_run_command+0x70>)
    6322:	4798      	blx	r3
	return ERR_NONE;
    6324:	2300      	movs	r3, #0
}
    6326:	4618      	mov	r0, r3
    6328:	3708      	adds	r7, #8
    632a:	46bd      	mov	sp, r7
    632c:	bd80      	pop	{r7, pc}
    632e:	bf00      	nop
    6330:	000061a9 	.word	0x000061a9
    6334:	0000622d 	.word	0x0000622d
    6338:	000060cd 	.word	0x000060cd
    633c:	00005f45 	.word	0x00005f45
    6340:	00005f6d 	.word	0x00005f6d

00006344 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6344:	b480      	push	{r7}
    6346:	b083      	sub	sp, #12
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
    634c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    634e:	bf00      	nop
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	691a      	ldr	r2, [r3, #16]
    6354:	683b      	ldr	r3, [r7, #0]
    6356:	4013      	ands	r3, r2
    6358:	2b00      	cmp	r3, #0
    635a:	d1f9      	bne.n	6350 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    635c:	bf00      	nop
    635e:	370c      	adds	r7, #12
    6360:	46bd      	mov	sp, r7
    6362:	f85d 7b04 	ldr.w	r7, [sp], #4
    6366:	4770      	bx	lr

00006368 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6368:	b480      	push	{r7}
    636a:	b083      	sub	sp, #12
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	f44f 7280 	mov.w	r2, #256	; 0x100
    6376:	819a      	strh	r2, [r3, #12]
}
    6378:	bf00      	nop
    637a:	370c      	adds	r7, #12
    637c:	46bd      	mov	sp, r7
    637e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6382:	4770      	bx	lr

00006384 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6384:	b480      	push	{r7}
    6386:	b083      	sub	sp, #12
    6388:	af00      	add	r7, sp, #0
    638a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6392:	819a      	strh	r2, [r3, #12]
}
    6394:	bf00      	nop
    6396:	370c      	adds	r7, #12
    6398:	46bd      	mov	sp, r7
    639a:	f85d 7b04 	ldr.w	r7, [sp], #4
    639e:	4770      	bx	lr

000063a0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    63a0:	b480      	push	{r7}
    63a2:	b083      	sub	sp, #12
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	899b      	ldrh	r3, [r3, #12]
    63ac:	b29b      	uxth	r3, r3
}
    63ae:	4618      	mov	r0, r3
    63b0:	370c      	adds	r7, #12
    63b2:	46bd      	mov	sp, r7
    63b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b8:	4770      	bx	lr

000063ba <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    63ba:	b480      	push	{r7}
    63bc:	b083      	sub	sp, #12
    63be:	af00      	add	r7, sp, #0
    63c0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	895b      	ldrh	r3, [r3, #10]
    63c6:	b29b      	uxth	r3, r3
}
    63c8:	4618      	mov	r0, r3
    63ca:	370c      	adds	r7, #12
    63cc:	46bd      	mov	sp, r7
    63ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d2:	4770      	bx	lr

000063d4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    63d4:	b580      	push	{r7, lr}
    63d6:	b082      	sub	sp, #8
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	881b      	ldrh	r3, [r3, #0]
    63e0:	b29b      	uxth	r3, r3
    63e2:	f043 0301 	orr.w	r3, r3, #1
    63e6:	b29a      	uxth	r2, r3
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    63ec:	2101      	movs	r1, #1
    63ee:	6878      	ldr	r0, [r7, #4]
    63f0:	4b02      	ldr	r3, [pc, #8]	; (63fc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    63f2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    63f4:	bf00      	nop
    63f6:	3708      	adds	r7, #8
    63f8:	46bd      	mov	sp, r7
    63fa:	bd80      	pop	{r7, pc}
    63fc:	00006345 	.word	0x00006345

00006400 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6400:	b580      	push	{r7, lr}
    6402:	b084      	sub	sp, #16
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6408:	f248 0103 	movw	r1, #32771	; 0x8003
    640c:	6878      	ldr	r0, [r7, #4]
    640e:	4b0a      	ldr	r3, [pc, #40]	; (6438 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6410:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6412:	687b      	ldr	r3, [r7, #4]
    6414:	881b      	ldrh	r3, [r3, #0]
    6416:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6418:	89fb      	ldrh	r3, [r7, #14]
    641a:	085b      	lsrs	r3, r3, #1
    641c:	b29b      	uxth	r3, r3
    641e:	f003 0301 	and.w	r3, r3, #1
    6422:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6424:	89fb      	ldrh	r3, [r7, #14]
    6426:	2b00      	cmp	r3, #0
    6428:	bf14      	ite	ne
    642a:	2301      	movne	r3, #1
    642c:	2300      	moveq	r3, #0
    642e:	b2db      	uxtb	r3, r3
}
    6430:	4618      	mov	r0, r3
    6432:	3710      	adds	r7, #16
    6434:	46bd      	mov	sp, r7
    6436:	bd80      	pop	{r7, pc}
    6438:	00006345 	.word	0x00006345

0000643c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    643c:	b580      	push	{r7, lr}
    643e:	b082      	sub	sp, #8
    6440:	af00      	add	r7, sp, #0
    6442:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	881b      	ldrh	r3, [r3, #0]
    6448:	b29b      	uxth	r3, r3
    644a:	f023 0302 	bic.w	r3, r3, #2
    644e:	b29a      	uxth	r2, r3
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6454:	f248 0103 	movw	r1, #32771	; 0x8003
    6458:	6878      	ldr	r0, [r7, #4]
    645a:	4b03      	ldr	r3, [pc, #12]	; (6468 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    645c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    645e:	bf00      	nop
    6460:	3708      	adds	r7, #8
    6462:	46bd      	mov	sp, r7
    6464:	bd80      	pop	{r7, pc}
    6466:	bf00      	nop
    6468:	00006345 	.word	0x00006345

0000646c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    646c:	b580      	push	{r7, lr}
    646e:	b082      	sub	sp, #8
    6470:	af00      	add	r7, sp, #0
    6472:	6078      	str	r0, [r7, #4]
    6474:	460b      	mov	r3, r1
    6476:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	887a      	ldrh	r2, [r7, #2]
    647c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    647e:	f248 0103 	movw	r1, #32771	; 0x8003
    6482:	6878      	ldr	r0, [r7, #4]
    6484:	4b02      	ldr	r3, [pc, #8]	; (6490 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6486:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6488:	bf00      	nop
    648a:	3708      	adds	r7, #8
    648c:	46bd      	mov	sp, r7
    648e:	bd80      	pop	{r7, pc}
    6490:	00006345 	.word	0x00006345

00006494 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6494:	b480      	push	{r7}
    6496:	b083      	sub	sp, #12
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	683a      	ldr	r2, [r7, #0]
    64a2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    64a4:	bf00      	nop
    64a6:	370c      	adds	r7, #12
    64a8:	46bd      	mov	sp, r7
    64aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ae:	4770      	bx	lr

000064b0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    64b0:	b580      	push	{r7, lr}
    64b2:	b082      	sub	sp, #8
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d005      	beq.n	64ca <_calendar_init+0x1a>
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	681b      	ldr	r3, [r3, #0]
    64c2:	2b00      	cmp	r3, #0
    64c4:	d001      	beq.n	64ca <_calendar_init+0x1a>
    64c6:	2301      	movs	r3, #1
    64c8:	e000      	b.n	64cc <_calendar_init+0x1c>
    64ca:	2300      	movs	r3, #0
    64cc:	f003 0301 	and.w	r3, r3, #1
    64d0:	b2db      	uxtb	r3, r3
    64d2:	222f      	movs	r2, #47	; 0x2f
    64d4:	491b      	ldr	r1, [pc, #108]	; (6544 <_calendar_init+0x94>)
    64d6:	4618      	mov	r0, r3
    64d8:	4b1b      	ldr	r3, [pc, #108]	; (6548 <_calendar_init+0x98>)
    64da:	4798      	blx	r3

	_rtc_dev = dev;
    64dc:	4a1b      	ldr	r2, [pc, #108]	; (654c <_calendar_init+0x9c>)
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	4618      	mov	r0, r3
    64e8:	4b19      	ldr	r3, [pc, #100]	; (6550 <_calendar_init+0xa0>)
    64ea:	4798      	blx	r3
    64ec:	4603      	mov	r3, r0
    64ee:	2b00      	cmp	r3, #0
    64f0:	d00a      	beq.n	6508 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    64f2:	687b      	ldr	r3, [r7, #4]
    64f4:	681b      	ldr	r3, [r3, #0]
    64f6:	4618      	mov	r0, r3
    64f8:	4b16      	ldr	r3, [pc, #88]	; (6554 <_calendar_init+0xa4>)
    64fa:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	681b      	ldr	r3, [r3, #0]
    6500:	2102      	movs	r1, #2
    6502:	4618      	mov	r0, r3
    6504:	4b14      	ldr	r3, [pc, #80]	; (6558 <_calendar_init+0xa8>)
    6506:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	681b      	ldr	r3, [r3, #0]
    650c:	4618      	mov	r0, r3
    650e:	4b13      	ldr	r3, [pc, #76]	; (655c <_calendar_init+0xac>)
    6510:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	681b      	ldr	r3, [r3, #0]
    6516:	2101      	movs	r1, #1
    6518:	4618      	mov	r0, r3
    651a:	4b0f      	ldr	r3, [pc, #60]	; (6558 <_calendar_init+0xa8>)
    651c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	681b      	ldr	r3, [r3, #0]
    6522:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6526:	4618      	mov	r0, r3
    6528:	4b0d      	ldr	r3, [pc, #52]	; (6560 <_calendar_init+0xb0>)
    652a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6530:	2100      	movs	r1, #0
    6532:	4618      	mov	r0, r3
    6534:	4b0b      	ldr	r3, [pc, #44]	; (6564 <_calendar_init+0xb4>)
    6536:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6538:	2300      	movs	r3, #0
}
    653a:	4618      	mov	r0, r3
    653c:	3708      	adds	r7, #8
    653e:	46bd      	mov	sp, r7
    6540:	bd80      	pop	{r7, pc}
    6542:	bf00      	nop
    6544:	00014208 	.word	0x00014208
    6548:	000040f5 	.word	0x000040f5
    654c:	20000e74 	.word	0x20000e74
    6550:	00006401 	.word	0x00006401
    6554:	0000643d 	.word	0x0000643d
    6558:	00006345 	.word	0x00006345
    655c:	000063d5 	.word	0x000063d5
    6560:	0000646d 	.word	0x0000646d
    6564:	00006495 	.word	0x00006495

00006568 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6568:	b580      	push	{r7, lr}
    656a:	b084      	sub	sp, #16
    656c:	af00      	add	r7, sp, #0
    656e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	4618      	mov	r0, r3
    6576:	4b19      	ldr	r3, [pc, #100]	; (65dc <_rtc_interrupt_handler+0x74>)
    6578:	4798      	blx	r3
    657a:	4603      	mov	r3, r0
    657c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    657e:	687b      	ldr	r3, [r7, #4]
    6580:	681b      	ldr	r3, [r3, #0]
    6582:	4618      	mov	r0, r3
    6584:	4b16      	ldr	r3, [pc, #88]	; (65e0 <_rtc_interrupt_handler+0x78>)
    6586:	4798      	blx	r3
    6588:	4603      	mov	r3, r0
    658a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    658c:	89fa      	ldrh	r2, [r7, #14]
    658e:	89bb      	ldrh	r3, [r7, #12]
    6590:	4013      	ands	r3, r2
    6592:	b29b      	uxth	r3, r3
    6594:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6598:	2b00      	cmp	r3, #0
    659a:	d009      	beq.n	65b0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    659c:	687b      	ldr	r3, [r7, #4]
    659e:	685b      	ldr	r3, [r3, #4]
    65a0:	6878      	ldr	r0, [r7, #4]
    65a2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	681b      	ldr	r3, [r3, #0]
    65a8:	4618      	mov	r0, r3
    65aa:	4b0e      	ldr	r3, [pc, #56]	; (65e4 <_rtc_interrupt_handler+0x7c>)
    65ac:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    65ae:	e010      	b.n	65d2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    65b0:	89fa      	ldrh	r2, [r7, #14]
    65b2:	89bb      	ldrh	r3, [r7, #12]
    65b4:	4013      	ands	r3, r2
    65b6:	b29b      	uxth	r3, r3
    65b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    65bc:	2b00      	cmp	r3, #0
    65be:	d008      	beq.n	65d2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	689b      	ldr	r3, [r3, #8]
    65c4:	6878      	ldr	r0, [r7, #4]
    65c6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    65c8:	687b      	ldr	r3, [r7, #4]
    65ca:	681b      	ldr	r3, [r3, #0]
    65cc:	4618      	mov	r0, r3
    65ce:	4b06      	ldr	r3, [pc, #24]	; (65e8 <_rtc_interrupt_handler+0x80>)
    65d0:	4798      	blx	r3
}
    65d2:	bf00      	nop
    65d4:	3710      	adds	r7, #16
    65d6:	46bd      	mov	sp, r7
    65d8:	bd80      	pop	{r7, pc}
    65da:	bf00      	nop
    65dc:	000063a1 	.word	0x000063a1
    65e0:	000063bb 	.word	0x000063bb
    65e4:	00006369 	.word	0x00006369
    65e8:	00006385 	.word	0x00006385

000065ec <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    65ec:	b580      	push	{r7, lr}
    65ee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    65f0:	4b03      	ldr	r3, [pc, #12]	; (6600 <RTC_Handler+0x14>)
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	4618      	mov	r0, r3
    65f6:	4b03      	ldr	r3, [pc, #12]	; (6604 <RTC_Handler+0x18>)
    65f8:	4798      	blx	r3
}
    65fa:	bf00      	nop
    65fc:	bd80      	pop	{r7, pc}
    65fe:	bf00      	nop
    6600:	20000e74 	.word	0x20000e74
    6604:	00006569 	.word	0x00006569

00006608 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6608:	b480      	push	{r7}
    660a:	b083      	sub	sp, #12
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
    6610:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6612:	bf00      	nop
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	69da      	ldr	r2, [r3, #28]
    6618:	683b      	ldr	r3, [r7, #0]
    661a:	4013      	ands	r3, r2
    661c:	2b00      	cmp	r3, #0
    661e:	d1f9      	bne.n	6614 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6620:	bf00      	nop
    6622:	370c      	adds	r7, #12
    6624:	46bd      	mov	sp, r7
    6626:	f85d 7b04 	ldr.w	r7, [sp], #4
    662a:	4770      	bx	lr

0000662c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    662c:	b480      	push	{r7}
    662e:	b083      	sub	sp, #12
    6630:	af00      	add	r7, sp, #0
    6632:	6078      	str	r0, [r7, #4]
    6634:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6636:	687b      	ldr	r3, [r7, #4]
    6638:	69da      	ldr	r2, [r3, #28]
    663a:	683b      	ldr	r3, [r7, #0]
    663c:	4013      	ands	r3, r2
    663e:	2b00      	cmp	r3, #0
    6640:	bf14      	ite	ne
    6642:	2301      	movne	r3, #1
    6644:	2300      	moveq	r3, #0
    6646:	b2db      	uxtb	r3, r3
}
    6648:	4618      	mov	r0, r3
    664a:	370c      	adds	r7, #12
    664c:	46bd      	mov	sp, r7
    664e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6652:	4770      	bx	lr

00006654 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6654:	b480      	push	{r7}
    6656:	b083      	sub	sp, #12
    6658:	af00      	add	r7, sp, #0
    665a:	6078      	str	r0, [r7, #4]
    665c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    665e:	bf00      	nop
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	69da      	ldr	r2, [r3, #28]
    6664:	683b      	ldr	r3, [r7, #0]
    6666:	4013      	ands	r3, r2
    6668:	2b00      	cmp	r3, #0
    666a:	d1f9      	bne.n	6660 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    666c:	bf00      	nop
    666e:	370c      	adds	r7, #12
    6670:	46bd      	mov	sp, r7
    6672:	f85d 7b04 	ldr.w	r7, [sp], #4
    6676:	4770      	bx	lr

00006678 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6678:	b480      	push	{r7}
    667a:	b083      	sub	sp, #12
    667c:	af00      	add	r7, sp, #0
    667e:	6078      	str	r0, [r7, #4]
    6680:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	69da      	ldr	r2, [r3, #28]
    6686:	683b      	ldr	r3, [r7, #0]
    6688:	4013      	ands	r3, r2
    668a:	2b00      	cmp	r3, #0
    668c:	bf14      	ite	ne
    668e:	2301      	movne	r3, #1
    6690:	2300      	moveq	r3, #0
    6692:	b2db      	uxtb	r3, r3
}
    6694:	4618      	mov	r0, r3
    6696:	370c      	adds	r7, #12
    6698:	46bd      	mov	sp, r7
    669a:	f85d 7b04 	ldr.w	r7, [sp], #4
    669e:	4770      	bx	lr

000066a0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    66a0:	b480      	push	{r7}
    66a2:	b083      	sub	sp, #12
    66a4:	af00      	add	r7, sp, #0
    66a6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	2201      	movs	r2, #1
    66ac:	761a      	strb	r2, [r3, #24]
}
    66ae:	bf00      	nop
    66b0:	370c      	adds	r7, #12
    66b2:	46bd      	mov	sp, r7
    66b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66b8:	4770      	bx	lr

000066ba <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    66ba:	b480      	push	{r7}
    66bc:	b083      	sub	sp, #12
    66be:	af00      	add	r7, sp, #0
    66c0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	2202      	movs	r2, #2
    66c6:	761a      	strb	r2, [r3, #24]
}
    66c8:	bf00      	nop
    66ca:	370c      	adds	r7, #12
    66cc:	46bd      	mov	sp, r7
    66ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d2:	4770      	bx	lr

000066d4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    66d4:	b480      	push	{r7}
    66d6:	b083      	sub	sp, #12
    66d8:	af00      	add	r7, sp, #0
    66da:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	7e1b      	ldrb	r3, [r3, #24]
    66e0:	b2db      	uxtb	r3, r3
}
    66e2:	4618      	mov	r0, r3
    66e4:	370c      	adds	r7, #12
    66e6:	46bd      	mov	sp, r7
    66e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ec:	4770      	bx	lr

000066ee <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    66ee:	b480      	push	{r7}
    66f0:	b085      	sub	sp, #20
    66f2:	af00      	add	r7, sp, #0
    66f4:	6078      	str	r0, [r7, #4]
    66f6:	460b      	mov	r3, r1
    66f8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	7e1b      	ldrb	r3, [r3, #24]
    66fe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6700:	7bfa      	ldrb	r2, [r7, #15]
    6702:	78fb      	ldrb	r3, [r7, #3]
    6704:	4013      	ands	r3, r2
    6706:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6708:	7bfb      	ldrb	r3, [r7, #15]
}
    670a:	4618      	mov	r0, r3
    670c:	3714      	adds	r7, #20
    670e:	46bd      	mov	sp, r7
    6710:	f85d 7b04 	ldr.w	r7, [sp], #4
    6714:	4770      	bx	lr

00006716 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6716:	b480      	push	{r7}
    6718:	b083      	sub	sp, #12
    671a:	af00      	add	r7, sp, #0
    671c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	7e1b      	ldrb	r3, [r3, #24]
    6722:	b2db      	uxtb	r3, r3
}
    6724:	4618      	mov	r0, r3
    6726:	370c      	adds	r7, #12
    6728:	46bd      	mov	sp, r7
    672a:	f85d 7b04 	ldr.w	r7, [sp], #4
    672e:	4770      	bx	lr

00006730 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6730:	b480      	push	{r7}
    6732:	b083      	sub	sp, #12
    6734:	af00      	add	r7, sp, #0
    6736:	6078      	str	r0, [r7, #4]
    6738:	460b      	mov	r3, r1
    673a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    673c:	687b      	ldr	r3, [r7, #4]
    673e:	78fa      	ldrb	r2, [r7, #3]
    6740:	761a      	strb	r2, [r3, #24]
}
    6742:	bf00      	nop
    6744:	370c      	adds	r7, #12
    6746:	46bd      	mov	sp, r7
    6748:	f85d 7b04 	ldr.w	r7, [sp], #4
    674c:	4770      	bx	lr
	...

00006750 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6750:	b580      	push	{r7, lr}
    6752:	b082      	sub	sp, #8
    6754:	af00      	add	r7, sp, #0
    6756:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	681b      	ldr	r3, [r3, #0]
    675c:	f043 0202 	orr.w	r2, r3, #2
    6760:	687b      	ldr	r3, [r7, #4]
    6762:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6764:	2103      	movs	r1, #3
    6766:	6878      	ldr	r0, [r7, #4]
    6768:	4b02      	ldr	r3, [pc, #8]	; (6774 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    676a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    676c:	bf00      	nop
    676e:	3708      	adds	r7, #8
    6770:	46bd      	mov	sp, r7
    6772:	bd80      	pop	{r7, pc}
    6774:	00006609 	.word	0x00006609

00006778 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6778:	b580      	push	{r7, lr}
    677a:	b082      	sub	sp, #8
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	f023 0202 	bic.w	r2, r3, #2
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    678c:	2103      	movs	r1, #3
    678e:	6878      	ldr	r0, [r7, #4]
    6790:	4b02      	ldr	r3, [pc, #8]	; (679c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6792:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6794:	bf00      	nop
    6796:	3708      	adds	r7, #8
    6798:	46bd      	mov	sp, r7
    679a:	bd80      	pop	{r7, pc}
    679c:	00006609 	.word	0x00006609

000067a0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    67a0:	b480      	push	{r7}
    67a2:	b085      	sub	sp, #20
    67a4:	af00      	add	r7, sp, #0
    67a6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    67a8:	687b      	ldr	r3, [r7, #4]
    67aa:	681b      	ldr	r3, [r3, #0]
    67ac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    67ae:	68fb      	ldr	r3, [r7, #12]
    67b0:	0edb      	lsrs	r3, r3, #27
    67b2:	f003 0301 	and.w	r3, r3, #1
    67b6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    67b8:	68fb      	ldr	r3, [r7, #12]
    67ba:	2b00      	cmp	r3, #0
    67bc:	bf14      	ite	ne
    67be:	2301      	movne	r3, #1
    67c0:	2300      	moveq	r3, #0
    67c2:	b2db      	uxtb	r3, r3
}
    67c4:	4618      	mov	r0, r3
    67c6:	3714      	adds	r7, #20
    67c8:	46bd      	mov	sp, r7
    67ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ce:	4770      	bx	lr

000067d0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    67d0:	b580      	push	{r7, lr}
    67d2:	b084      	sub	sp, #16
    67d4:	af00      	add	r7, sp, #0
    67d6:	6078      	str	r0, [r7, #4]
    67d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    67da:	2103      	movs	r1, #3
    67dc:	6878      	ldr	r0, [r7, #4]
    67de:	4b07      	ldr	r3, [pc, #28]	; (67fc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    67e0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	681b      	ldr	r3, [r3, #0]
    67e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    67e8:	68fa      	ldr	r2, [r7, #12]
    67ea:	683b      	ldr	r3, [r7, #0]
    67ec:	4013      	ands	r3, r2
    67ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    67f0:	68fb      	ldr	r3, [r7, #12]
}
    67f2:	4618      	mov	r0, r3
    67f4:	3710      	adds	r7, #16
    67f6:	46bd      	mov	sp, r7
    67f8:	bd80      	pop	{r7, pc}
    67fa:	bf00      	nop
    67fc:	00006609 	.word	0x00006609

00006800 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6800:	b580      	push	{r7, lr}
    6802:	b082      	sub	sp, #8
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
    6808:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	683a      	ldr	r2, [r7, #0]
    680e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6810:	2103      	movs	r1, #3
    6812:	6878      	ldr	r0, [r7, #4]
    6814:	4b02      	ldr	r3, [pc, #8]	; (6820 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6816:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6818:	bf00      	nop
    681a:	3708      	adds	r7, #8
    681c:	46bd      	mov	sp, r7
    681e:	bd80      	pop	{r7, pc}
    6820:	00006609 	.word	0x00006609

00006824 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6824:	b580      	push	{r7, lr}
    6826:	b082      	sub	sp, #8
    6828:	af00      	add	r7, sp, #0
    682a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    682c:	687b      	ldr	r3, [r7, #4]
    682e:	681b      	ldr	r3, [r3, #0]
    6830:	f043 0202 	orr.w	r2, r3, #2
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6838:	2103      	movs	r1, #3
    683a:	6878      	ldr	r0, [r7, #4]
    683c:	4b02      	ldr	r3, [pc, #8]	; (6848 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    683e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6840:	bf00      	nop
    6842:	3708      	adds	r7, #8
    6844:	46bd      	mov	sp, r7
    6846:	bd80      	pop	{r7, pc}
    6848:	00006655 	.word	0x00006655

0000684c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    684c:	b580      	push	{r7, lr}
    684e:	b084      	sub	sp, #16
    6850:	af00      	add	r7, sp, #0
    6852:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6854:	2103      	movs	r1, #3
    6856:	6878      	ldr	r0, [r7, #4]
    6858:	4b09      	ldr	r3, [pc, #36]	; (6880 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    685a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	681b      	ldr	r3, [r3, #0]
    6860:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6862:	68fb      	ldr	r3, [r7, #12]
    6864:	085b      	lsrs	r3, r3, #1
    6866:	f003 0301 	and.w	r3, r3, #1
    686a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    686c:	68fb      	ldr	r3, [r7, #12]
    686e:	2b00      	cmp	r3, #0
    6870:	bf14      	ite	ne
    6872:	2301      	movne	r3, #1
    6874:	2300      	moveq	r3, #0
    6876:	b2db      	uxtb	r3, r3
}
    6878:	4618      	mov	r0, r3
    687a:	3710      	adds	r7, #16
    687c:	46bd      	mov	sp, r7
    687e:	bd80      	pop	{r7, pc}
    6880:	00006655 	.word	0x00006655

00006884 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6884:	b580      	push	{r7, lr}
    6886:	b082      	sub	sp, #8
    6888:	af00      	add	r7, sp, #0
    688a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	681b      	ldr	r3, [r3, #0]
    6890:	f023 0202 	bic.w	r2, r3, #2
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6898:	2103      	movs	r1, #3
    689a:	6878      	ldr	r0, [r7, #4]
    689c:	4b02      	ldr	r3, [pc, #8]	; (68a8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    689e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68a0:	bf00      	nop
    68a2:	3708      	adds	r7, #8
    68a4:	46bd      	mov	sp, r7
    68a6:	bd80      	pop	{r7, pc}
    68a8:	00006655 	.word	0x00006655

000068ac <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    68ac:	b580      	push	{r7, lr}
    68ae:	b084      	sub	sp, #16
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
    68b4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    68b6:	2103      	movs	r1, #3
    68b8:	6878      	ldr	r0, [r7, #4]
    68ba:	4b07      	ldr	r3, [pc, #28]	; (68d8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    68bc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	681b      	ldr	r3, [r3, #0]
    68c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    68c4:	68fa      	ldr	r2, [r7, #12]
    68c6:	683b      	ldr	r3, [r7, #0]
    68c8:	4013      	ands	r3, r2
    68ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    68cc:	68fb      	ldr	r3, [r7, #12]
}
    68ce:	4618      	mov	r0, r3
    68d0:	3710      	adds	r7, #16
    68d2:	46bd      	mov	sp, r7
    68d4:	bd80      	pop	{r7, pc}
    68d6:	bf00      	nop
    68d8:	00006655 	.word	0x00006655

000068dc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    68dc:	b580      	push	{r7, lr}
    68de:	b082      	sub	sp, #8
    68e0:	af00      	add	r7, sp, #0
    68e2:	6078      	str	r0, [r7, #4]
    68e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	683a      	ldr	r2, [r7, #0]
    68ea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    68ec:	2103      	movs	r1, #3
    68ee:	6878      	ldr	r0, [r7, #4]
    68f0:	4b02      	ldr	r3, [pc, #8]	; (68fc <hri_sercomspi_write_CTRLA_reg+0x20>)
    68f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68f4:	bf00      	nop
    68f6:	3708      	adds	r7, #8
    68f8:	46bd      	mov	sp, r7
    68fa:	bd80      	pop	{r7, pc}
    68fc:	00006655 	.word	0x00006655

00006900 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6900:	b580      	push	{r7, lr}
    6902:	b082      	sub	sp, #8
    6904:	af00      	add	r7, sp, #0
    6906:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	685b      	ldr	r3, [r3, #4]
    690c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6914:	2104      	movs	r1, #4
    6916:	6878      	ldr	r0, [r7, #4]
    6918:	4b02      	ldr	r3, [pc, #8]	; (6924 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    691a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    691c:	bf00      	nop
    691e:	3708      	adds	r7, #8
    6920:	46bd      	mov	sp, r7
    6922:	bd80      	pop	{r7, pc}
    6924:	00006609 	.word	0x00006609

00006928 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6928:	b580      	push	{r7, lr}
    692a:	b082      	sub	sp, #8
    692c:	af00      	add	r7, sp, #0
    692e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	685b      	ldr	r3, [r3, #4]
    6934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    693c:	2104      	movs	r1, #4
    693e:	6878      	ldr	r0, [r7, #4]
    6940:	4b02      	ldr	r3, [pc, #8]	; (694c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6942:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6944:	bf00      	nop
    6946:	3708      	adds	r7, #8
    6948:	46bd      	mov	sp, r7
    694a:	bd80      	pop	{r7, pc}
    694c:	00006609 	.word	0x00006609

00006950 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6950:	b580      	push	{r7, lr}
    6952:	b082      	sub	sp, #8
    6954:	af00      	add	r7, sp, #0
    6956:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6958:	687b      	ldr	r3, [r7, #4]
    695a:	685b      	ldr	r3, [r3, #4]
    695c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6964:	2104      	movs	r1, #4
    6966:	6878      	ldr	r0, [r7, #4]
    6968:	4b02      	ldr	r3, [pc, #8]	; (6974 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    696a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    696c:	bf00      	nop
    696e:	3708      	adds	r7, #8
    6970:	46bd      	mov	sp, r7
    6972:	bd80      	pop	{r7, pc}
    6974:	00006609 	.word	0x00006609

00006978 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6978:	b580      	push	{r7, lr}
    697a:	b082      	sub	sp, #8
    697c:	af00      	add	r7, sp, #0
    697e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6980:	687b      	ldr	r3, [r7, #4]
    6982:	685b      	ldr	r3, [r3, #4]
    6984:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6988:	687b      	ldr	r3, [r7, #4]
    698a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    698c:	2104      	movs	r1, #4
    698e:	6878      	ldr	r0, [r7, #4]
    6990:	4b02      	ldr	r3, [pc, #8]	; (699c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6992:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6994:	bf00      	nop
    6996:	3708      	adds	r7, #8
    6998:	46bd      	mov	sp, r7
    699a:	bd80      	pop	{r7, pc}
    699c:	00006609 	.word	0x00006609

000069a0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b082      	sub	sp, #8
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
    69a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	685a      	ldr	r2, [r3, #4]
    69ae:	683b      	ldr	r3, [r7, #0]
    69b0:	041b      	lsls	r3, r3, #16
    69b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    69b6:	431a      	orrs	r2, r3
    69b8:	687b      	ldr	r3, [r7, #4]
    69ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69bc:	2104      	movs	r1, #4
    69be:	6878      	ldr	r0, [r7, #4]
    69c0:	4b02      	ldr	r3, [pc, #8]	; (69cc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    69c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69c4:	bf00      	nop
    69c6:	3708      	adds	r7, #8
    69c8:	46bd      	mov	sp, r7
    69ca:	bd80      	pop	{r7, pc}
    69cc:	00006609 	.word	0x00006609

000069d0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    69d0:	b580      	push	{r7, lr}
    69d2:	b082      	sub	sp, #8
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
    69d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	683a      	ldr	r2, [r7, #0]
    69de:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69e0:	2104      	movs	r1, #4
    69e2:	6878      	ldr	r0, [r7, #4]
    69e4:	4b02      	ldr	r3, [pc, #8]	; (69f0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    69e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69e8:	bf00      	nop
    69ea:	3708      	adds	r7, #8
    69ec:	46bd      	mov	sp, r7
    69ee:	bd80      	pop	{r7, pc}
    69f0:	00006609 	.word	0x00006609

000069f4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    69f4:	b580      	push	{r7, lr}
    69f6:	b082      	sub	sp, #8
    69f8:	af00      	add	r7, sp, #0
    69fa:	6078      	str	r0, [r7, #4]
    69fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    69fe:	687b      	ldr	r3, [r7, #4]
    6a00:	683a      	ldr	r2, [r7, #0]
    6a02:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6a04:	2117      	movs	r1, #23
    6a06:	6878      	ldr	r0, [r7, #4]
    6a08:	4b02      	ldr	r3, [pc, #8]	; (6a14 <hri_sercomspi_write_CTRLB_reg+0x20>)
    6a0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a0c:	bf00      	nop
    6a0e:	3708      	adds	r7, #8
    6a10:	46bd      	mov	sp, r7
    6a12:	bd80      	pop	{r7, pc}
    6a14:	00006655 	.word	0x00006655

00006a18 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6a18:	b480      	push	{r7}
    6a1a:	b083      	sub	sp, #12
    6a1c:	af00      	add	r7, sp, #0
    6a1e:	6078      	str	r0, [r7, #4]
    6a20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6a22:	687b      	ldr	r3, [r7, #4]
    6a24:	683a      	ldr	r2, [r7, #0]
    6a26:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a28:	bf00      	nop
    6a2a:	370c      	adds	r7, #12
    6a2c:	46bd      	mov	sp, r7
    6a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a32:	4770      	bx	lr

00006a34 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6a34:	b480      	push	{r7}
    6a36:	b083      	sub	sp, #12
    6a38:	af00      	add	r7, sp, #0
    6a3a:	6078      	str	r0, [r7, #4]
    6a3c:	460b      	mov	r3, r1
    6a3e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	78fa      	ldrb	r2, [r7, #3]
    6a44:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a46:	bf00      	nop
    6a48:	370c      	adds	r7, #12
    6a4a:	46bd      	mov	sp, r7
    6a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a50:	4770      	bx	lr
	...

00006a54 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6a54:	b580      	push	{r7, lr}
    6a56:	b084      	sub	sp, #16
    6a58:	af00      	add	r7, sp, #0
    6a5a:	6078      	str	r0, [r7, #4]
    6a5c:	460b      	mov	r3, r1
    6a5e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a64:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6a66:	68fb      	ldr	r3, [r7, #12]
    6a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6a6c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6a6e:	78fb      	ldrb	r3, [r7, #3]
    6a70:	039b      	lsls	r3, r3, #14
    6a72:	461a      	mov	r2, r3
    6a74:	68fb      	ldr	r3, [r7, #12]
    6a76:	4313      	orrs	r3, r2
    6a78:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6a7a:	687b      	ldr	r3, [r7, #4]
    6a7c:	68fa      	ldr	r2, [r7, #12]
    6a7e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a80:	2104      	movs	r1, #4
    6a82:	6878      	ldr	r0, [r7, #4]
    6a84:	4b02      	ldr	r3, [pc, #8]	; (6a90 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6a86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a88:	bf00      	nop
    6a8a:	3710      	adds	r7, #16
    6a8c:	46bd      	mov	sp, r7
    6a8e:	bd80      	pop	{r7, pc}
    6a90:	00006609 	.word	0x00006609

00006a94 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6a94:	b580      	push	{r7, lr}
    6a96:	b082      	sub	sp, #8
    6a98:	af00      	add	r7, sp, #0
    6a9a:	6078      	str	r0, [r7, #4]
    6a9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	683a      	ldr	r2, [r7, #0]
    6aa2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6aa4:	2104      	movs	r1, #4
    6aa6:	6878      	ldr	r0, [r7, #4]
    6aa8:	4b02      	ldr	r3, [pc, #8]	; (6ab4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6aaa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6aac:	bf00      	nop
    6aae:	3708      	adds	r7, #8
    6ab0:	46bd      	mov	sp, r7
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	00006609 	.word	0x00006609

00006ab8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6ab8:	b580      	push	{r7, lr}
    6aba:	b082      	sub	sp, #8
    6abc:	af00      	add	r7, sp, #0
    6abe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ac0:	2104      	movs	r1, #4
    6ac2:	6878      	ldr	r0, [r7, #4]
    6ac4:	4b03      	ldr	r3, [pc, #12]	; (6ad4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6ac6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6acc:	4618      	mov	r0, r3
    6ace:	3708      	adds	r7, #8
    6ad0:	46bd      	mov	sp, r7
    6ad2:	bd80      	pop	{r7, pc}
    6ad4:	00006609 	.word	0x00006609

00006ad8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6ad8:	b480      	push	{r7}
    6ada:	b083      	sub	sp, #12
    6adc:	af00      	add	r7, sp, #0
    6ade:	6078      	str	r0, [r7, #4]
    6ae0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6ae2:	687b      	ldr	r3, [r7, #4]
    6ae4:	683a      	ldr	r2, [r7, #0]
    6ae6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ae8:	bf00      	nop
    6aea:	370c      	adds	r7, #12
    6aec:	46bd      	mov	sp, r7
    6aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af2:	4770      	bx	lr

00006af4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6af4:	b580      	push	{r7, lr}
    6af6:	b082      	sub	sp, #8
    6af8:	af00      	add	r7, sp, #0
    6afa:	6078      	str	r0, [r7, #4]
    6afc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	683a      	ldr	r2, [r7, #0]
    6b02:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b04:	2104      	movs	r1, #4
    6b06:	6878      	ldr	r0, [r7, #4]
    6b08:	4b02      	ldr	r3, [pc, #8]	; (6b14 <hri_sercomi2cm_write_DATA_reg+0x20>)
    6b0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b0c:	bf00      	nop
    6b0e:	3708      	adds	r7, #8
    6b10:	46bd      	mov	sp, r7
    6b12:	bd80      	pop	{r7, pc}
    6b14:	00006609 	.word	0x00006609

00006b18 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	b082      	sub	sp, #8
    6b1c:	af00      	add	r7, sp, #0
    6b1e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b20:	2104      	movs	r1, #4
    6b22:	6878      	ldr	r0, [r7, #4]
    6b24:	4b03      	ldr	r3, [pc, #12]	; (6b34 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6b26:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6b28:	687b      	ldr	r3, [r7, #4]
    6b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6b2c:	4618      	mov	r0, r3
    6b2e:	3708      	adds	r7, #8
    6b30:	46bd      	mov	sp, r7
    6b32:	bd80      	pop	{r7, pc}
    6b34:	00006609 	.word	0x00006609

00006b38 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6b38:	b480      	push	{r7}
    6b3a:	b083      	sub	sp, #12
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
    6b40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	683a      	ldr	r2, [r7, #0]
    6b46:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b48:	bf00      	nop
    6b4a:	370c      	adds	r7, #12
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6b54:	b480      	push	{r7}
    6b56:	b083      	sub	sp, #12
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6b60:	4618      	mov	r0, r3
    6b62:	370c      	adds	r7, #12
    6b64:	46bd      	mov	sp, r7
    6b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b6a:	4770      	bx	lr

00006b6c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6b6c:	b480      	push	{r7}
    6b6e:	b083      	sub	sp, #12
    6b70:	af00      	add	r7, sp, #0
    6b72:	6078      	str	r0, [r7, #4]
    6b74:	460b      	mov	r3, r1
    6b76:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6b78:	687b      	ldr	r3, [r7, #4]
    6b7a:	78fa      	ldrb	r2, [r7, #3]
    6b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b80:	bf00      	nop
    6b82:	370c      	adds	r7, #12
    6b84:	46bd      	mov	sp, r7
    6b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b8a:	4770      	bx	lr

00006b8c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6b8c:	b480      	push	{r7}
    6b8e:	b083      	sub	sp, #12
    6b90:	af00      	add	r7, sp, #0
    6b92:	6078      	str	r0, [r7, #4]
    6b94:	460b      	mov	r3, r1
    6b96:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6b98:	687b      	ldr	r3, [r7, #4]
    6b9a:	887a      	ldrh	r2, [r7, #2]
    6b9c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b9e:	bf00      	nop
    6ba0:	370c      	adds	r7, #12
    6ba2:	46bd      	mov	sp, r7
    6ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ba8:	4770      	bx	lr
	...

00006bac <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b082      	sub	sp, #8
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6bb4:	2104      	movs	r1, #4
    6bb6:	6878      	ldr	r0, [r7, #4]
    6bb8:	4b06      	ldr	r3, [pc, #24]	; (6bd4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6bba:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	8b5b      	ldrh	r3, [r3, #26]
    6bc0:	b29b      	uxth	r3, r3
    6bc2:	091b      	lsrs	r3, r3, #4
    6bc4:	b29b      	uxth	r3, r3
    6bc6:	f003 0303 	and.w	r3, r3, #3
    6bca:	b29b      	uxth	r3, r3
}
    6bcc:	4618      	mov	r0, r3
    6bce:	3708      	adds	r7, #8
    6bd0:	46bd      	mov	sp, r7
    6bd2:	bd80      	pop	{r7, pc}
    6bd4:	00006609 	.word	0x00006609

00006bd8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6bd8:	b580      	push	{r7, lr}
    6bda:	b082      	sub	sp, #8
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6be0:	2104      	movs	r1, #4
    6be2:	6878      	ldr	r0, [r7, #4]
    6be4:	4b04      	ldr	r3, [pc, #16]	; (6bf8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6be6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	8b5b      	ldrh	r3, [r3, #26]
    6bec:	b29b      	uxth	r3, r3
}
    6bee:	4618      	mov	r0, r3
    6bf0:	3708      	adds	r7, #8
    6bf2:	46bd      	mov	sp, r7
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	bf00      	nop
    6bf8:	00006609 	.word	0x00006609

00006bfc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6bfc:	b580      	push	{r7, lr}
    6bfe:	b082      	sub	sp, #8
    6c00:	af00      	add	r7, sp, #0
    6c02:	6078      	str	r0, [r7, #4]
    6c04:	460b      	mov	r3, r1
    6c06:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	887a      	ldrh	r2, [r7, #2]
    6c0c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6c0e:	2104      	movs	r1, #4
    6c10:	6878      	ldr	r0, [r7, #4]
    6c12:	4b03      	ldr	r3, [pc, #12]	; (6c20 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6c14:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c16:	bf00      	nop
    6c18:	3708      	adds	r7, #8
    6c1a:	46bd      	mov	sp, r7
    6c1c:	bd80      	pop	{r7, pc}
    6c1e:	bf00      	nop
    6c20:	00006609 	.word	0x00006609

00006c24 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6c24:	b4b0      	push	{r4, r5, r7}
    6c26:	b08d      	sub	sp, #52	; 0x34
    6c28:	af00      	add	r7, sp, #0
    6c2a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6c2c:	4b13      	ldr	r3, [pc, #76]	; (6c7c <_sercom_get_hardware_index+0x58>)
    6c2e:	f107 040c 	add.w	r4, r7, #12
    6c32:	461d      	mov	r5, r3
    6c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6c38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c40:	2300      	movs	r3, #0
    6c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c44:	e010      	b.n	6c68 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c48:	009b      	lsls	r3, r3, #2
    6c4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6c4e:	4413      	add	r3, r2
    6c50:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6c54:	461a      	mov	r2, r3
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	429a      	cmp	r2, r3
    6c5a:	d102      	bne.n	6c62 <_sercom_get_hardware_index+0x3e>
			return i;
    6c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c5e:	b2db      	uxtb	r3, r3
    6c60:	e006      	b.n	6c70 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c64:	3301      	adds	r3, #1
    6c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c6a:	2b07      	cmp	r3, #7
    6c6c:	d9eb      	bls.n	6c46 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6c6e:	2300      	movs	r3, #0
}
    6c70:	4618      	mov	r0, r3
    6c72:	3734      	adds	r7, #52	; 0x34
    6c74:	46bd      	mov	sp, r7
    6c76:	bcb0      	pop	{r4, r5, r7}
    6c78:	4770      	bx	lr
    6c7a:	bf00      	nop
    6c7c:	0001423c 	.word	0x0001423c

00006c80 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6c80:	b580      	push	{r7, lr}
    6c82:	b084      	sub	sp, #16
    6c84:	af00      	add	r7, sp, #0
    6c86:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6c88:	6878      	ldr	r0, [r7, #4]
    6c8a:	4b13      	ldr	r3, [pc, #76]	; (6cd8 <_get_i2cm_index+0x58>)
    6c8c:	4798      	blx	r3
    6c8e:	4603      	mov	r3, r0
    6c90:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c92:	2300      	movs	r3, #0
    6c94:	73fb      	strb	r3, [r7, #15]
    6c96:	e010      	b.n	6cba <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6c98:	7bfa      	ldrb	r2, [r7, #15]
    6c9a:	4910      	ldr	r1, [pc, #64]	; (6cdc <_get_i2cm_index+0x5c>)
    6c9c:	4613      	mov	r3, r2
    6c9e:	005b      	lsls	r3, r3, #1
    6ca0:	4413      	add	r3, r2
    6ca2:	00db      	lsls	r3, r3, #3
    6ca4:	440b      	add	r3, r1
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	7bba      	ldrb	r2, [r7, #14]
    6caa:	429a      	cmp	r2, r3
    6cac:	d102      	bne.n	6cb4 <_get_i2cm_index+0x34>
			return i;
    6cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6cb2:	e00d      	b.n	6cd0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6cb4:	7bfb      	ldrb	r3, [r7, #15]
    6cb6:	3301      	adds	r3, #1
    6cb8:	73fb      	strb	r3, [r7, #15]
    6cba:	7bfb      	ldrb	r3, [r7, #15]
    6cbc:	2b02      	cmp	r3, #2
    6cbe:	d9eb      	bls.n	6c98 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6cc0:	f240 32a6 	movw	r2, #934	; 0x3a6
    6cc4:	4906      	ldr	r1, [pc, #24]	; (6ce0 <_get_i2cm_index+0x60>)
    6cc6:	2000      	movs	r0, #0
    6cc8:	4b06      	ldr	r3, [pc, #24]	; (6ce4 <_get_i2cm_index+0x64>)
    6cca:	4798      	blx	r3
	return -1;
    6ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
    6cd0:	4618      	mov	r0, r3
    6cd2:	3710      	adds	r7, #16
    6cd4:	46bd      	mov	sp, r7
    6cd6:	bd80      	pop	{r7, pc}
    6cd8:	00006c25 	.word	0x00006c25
    6cdc:	20000018 	.word	0x20000018
    6ce0:	00014220 	.word	0x00014220
    6ce4:	000040f5 	.word	0x000040f5

00006ce8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6ce8:	b580      	push	{r7, lr}
    6cea:	b082      	sub	sp, #8
    6cec:	af00      	add	r7, sp, #0
    6cee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6cf0:	2103      	movs	r1, #3
    6cf2:	6878      	ldr	r0, [r7, #4]
    6cf4:	4b02      	ldr	r3, [pc, #8]	; (6d00 <_sercom_i2c_send_stop+0x18>)
    6cf6:	4798      	blx	r3
}
    6cf8:	bf00      	nop
    6cfa:	3708      	adds	r7, #8
    6cfc:	46bd      	mov	sp, r7
    6cfe:	bd80      	pop	{r7, pc}
    6d00:	000069a1 	.word	0x000069a1

00006d04 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6d04:	b590      	push	{r4, r7, lr}
    6d06:	b087      	sub	sp, #28
    6d08:	af00      	add	r7, sp, #0
    6d0a:	60f8      	str	r0, [r7, #12]
    6d0c:	60b9      	str	r1, [r7, #8]
    6d0e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6d10:	68f8      	ldr	r0, [r7, #12]
    6d12:	4b7d      	ldr	r3, [pc, #500]	; (6f08 <_sercom_i2c_sync_analyse_flags+0x204>)
    6d14:	4798      	blx	r3
    6d16:	4603      	mov	r3, r0
    6d18:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6d1a:	68f8      	ldr	r0, [r7, #12]
    6d1c:	4b7b      	ldr	r3, [pc, #492]	; (6f0c <_sercom_i2c_sync_analyse_flags+0x208>)
    6d1e:	4798      	blx	r3
    6d20:	4603      	mov	r3, r0
    6d22:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6d24:	68bb      	ldr	r3, [r7, #8]
    6d26:	f003 0301 	and.w	r3, r3, #1
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	f000 8095 	beq.w	6e5a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6d30:	8a7b      	ldrh	r3, [r7, #18]
    6d32:	f003 0302 	and.w	r3, r3, #2
    6d36:	2b00      	cmp	r3, #0
    6d38:	d01d      	beq.n	6d76 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6d3a:	68f8      	ldr	r0, [r7, #12]
    6d3c:	4b74      	ldr	r3, [pc, #464]	; (6f10 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6d3e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	885b      	ldrh	r3, [r3, #2]
    6d44:	b29b      	uxth	r3, r3
    6d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d4a:	b29a      	uxth	r2, r3
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	885b      	ldrh	r3, [r3, #2]
    6d54:	b29b      	uxth	r3, r3
    6d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d5a:	b29a      	uxth	r2, r3
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6d60:	8a7b      	ldrh	r3, [r7, #18]
    6d62:	f003 0301 	and.w	r3, r3, #1
    6d66:	2b00      	cmp	r3, #0
    6d68:	d002      	beq.n	6d70 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6d6a:	f06f 0304 	mvn.w	r3, #4
    6d6e:	e0c6      	b.n	6efe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6d70:	f06f 0303 	mvn.w	r3, #3
    6d74:	e0c3      	b.n	6efe <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6d76:	8a7b      	ldrh	r3, [r7, #18]
    6d78:	f003 0304 	and.w	r3, r3, #4
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d01f      	beq.n	6dc0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	685b      	ldr	r3, [r3, #4]
    6d84:	2b00      	cmp	r3, #0
    6d86:	dd07      	ble.n	6d98 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	885b      	ldrh	r3, [r3, #2]
    6d8c:	b29b      	uxth	r3, r3
    6d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d92:	b29a      	uxth	r2, r3
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	885b      	ldrh	r3, [r3, #2]
    6d9c:	b29b      	uxth	r3, r3
    6d9e:	b21b      	sxth	r3, r3
    6da0:	2b00      	cmp	r3, #0
    6da2:	da02      	bge.n	6daa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6da4:	68f8      	ldr	r0, [r7, #12]
    6da6:	4b5b      	ldr	r3, [pc, #364]	; (6f14 <_sercom_i2c_sync_analyse_flags+0x210>)
    6da8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	885b      	ldrh	r3, [r3, #2]
    6dae:	b29b      	uxth	r3, r3
    6db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6db4:	b29a      	uxth	r2, r3
    6db6:	687b      	ldr	r3, [r7, #4]
    6db8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6dba:	f06f 0301 	mvn.w	r3, #1
    6dbe:	e09e      	b.n	6efe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	885b      	ldrh	r3, [r3, #2]
    6dc4:	b29b      	uxth	r3, r3
    6dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d01c      	beq.n	6e08 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	881b      	ldrh	r3, [r3, #0]
    6dd2:	121b      	asrs	r3, r3, #8
    6dd4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6dd6:	f003 0406 	and.w	r4, r3, #6
    6dda:	68f8      	ldr	r0, [r7, #12]
    6ddc:	4b4e      	ldr	r3, [pc, #312]	; (6f18 <_sercom_i2c_sync_analyse_flags+0x214>)
    6dde:	4798      	blx	r3
    6de0:	4603      	mov	r3, r0
    6de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6de6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6de8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6dec:	4619      	mov	r1, r3
    6dee:	68f8      	ldr	r0, [r7, #12]
    6df0:	4b4a      	ldr	r3, [pc, #296]	; (6f1c <_sercom_i2c_sync_analyse_flags+0x218>)
    6df2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	885b      	ldrh	r3, [r3, #2]
    6df8:	b29b      	uxth	r3, r3
    6dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6dfe:	b29a      	uxth	r2, r3
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6e04:	2300      	movs	r3, #0
    6e06:	e07a      	b.n	6efe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	685b      	ldr	r3, [r3, #4]
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d111      	bne.n	6e34 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	885b      	ldrh	r3, [r3, #2]
    6e14:	b29b      	uxth	r3, r3
    6e16:	b21b      	sxth	r3, r3
    6e18:	2b00      	cmp	r3, #0
    6e1a:	da02      	bge.n	6e22 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6e1c:	68f8      	ldr	r0, [r7, #12]
    6e1e:	4b3d      	ldr	r3, [pc, #244]	; (6f14 <_sercom_i2c_sync_analyse_flags+0x210>)
    6e20:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	885b      	ldrh	r3, [r3, #2]
    6e26:	b29b      	uxth	r3, r3
    6e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e2c:	b29a      	uxth	r2, r3
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	805a      	strh	r2, [r3, #2]
    6e32:	e010      	b.n	6e56 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	689b      	ldr	r3, [r3, #8]
    6e38:	781b      	ldrb	r3, [r3, #0]
    6e3a:	4619      	mov	r1, r3
    6e3c:	68f8      	ldr	r0, [r7, #12]
    6e3e:	4b38      	ldr	r3, [pc, #224]	; (6f20 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6e40:	4798      	blx	r3
				msg->buffer++;
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	689b      	ldr	r3, [r3, #8]
    6e46:	1c5a      	adds	r2, r3, #1
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	609a      	str	r2, [r3, #8]
				msg->len--;
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	685b      	ldr	r3, [r3, #4]
    6e50:	1e5a      	subs	r2, r3, #1
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6e56:	2300      	movs	r3, #0
    6e58:	e051      	b.n	6efe <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6e5a:	68bb      	ldr	r3, [r7, #8]
    6e5c:	f003 0302 	and.w	r3, r3, #2
    6e60:	2b00      	cmp	r3, #0
    6e62:	d04b      	beq.n	6efc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	685b      	ldr	r3, [r3, #4]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	d041      	beq.n	6ef0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6e6c:	8a7b      	ldrh	r3, [r7, #18]
    6e6e:	f003 0304 	and.w	r3, r3, #4
    6e72:	2b00      	cmp	r3, #0
    6e74:	d13c      	bne.n	6ef0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	685b      	ldr	r3, [r3, #4]
    6e7a:	1e5a      	subs	r2, r3, #1
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	685b      	ldr	r3, [r3, #4]
    6e84:	2b00      	cmp	r3, #0
    6e86:	d102      	bne.n	6e8e <_sercom_i2c_sync_analyse_flags+0x18a>
    6e88:	697b      	ldr	r3, [r7, #20]
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d006      	beq.n	6e9c <_sercom_i2c_sync_analyse_flags+0x198>
    6e8e:	687b      	ldr	r3, [r7, #4]
    6e90:	685b      	ldr	r3, [r3, #4]
    6e92:	2b01      	cmp	r3, #1
    6e94:	d105      	bne.n	6ea2 <_sercom_i2c_sync_analyse_flags+0x19e>
    6e96:	697b      	ldr	r3, [r7, #20]
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d002      	beq.n	6ea2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6e9c:	68f8      	ldr	r0, [r7, #12]
    6e9e:	4b21      	ldr	r3, [pc, #132]	; (6f24 <_sercom_i2c_sync_analyse_flags+0x220>)
    6ea0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	685b      	ldr	r3, [r3, #4]
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d113      	bne.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	885b      	ldrh	r3, [r3, #2]
    6eae:	b29b      	uxth	r3, r3
    6eb0:	b21b      	sxth	r3, r3
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	da05      	bge.n	6ec2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6eb6:	68f8      	ldr	r0, [r7, #12]
    6eb8:	4b1b      	ldr	r3, [pc, #108]	; (6f28 <_sercom_i2c_sync_analyse_flags+0x224>)
    6eba:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6ebc:	68f8      	ldr	r0, [r7, #12]
    6ebe:	4b15      	ldr	r3, [pc, #84]	; (6f14 <_sercom_i2c_sync_analyse_flags+0x210>)
    6ec0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	885b      	ldrh	r3, [r3, #2]
    6ec6:	b29b      	uxth	r3, r3
    6ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ecc:	b29a      	uxth	r2, r3
    6ece:	687b      	ldr	r3, [r7, #4]
    6ed0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	689c      	ldr	r4, [r3, #8]
    6ed6:	1c62      	adds	r2, r4, #1
    6ed8:	687b      	ldr	r3, [r7, #4]
    6eda:	609a      	str	r2, [r3, #8]
    6edc:	68f8      	ldr	r0, [r7, #12]
    6ede:	4b13      	ldr	r3, [pc, #76]	; (6f2c <_sercom_i2c_sync_analyse_flags+0x228>)
    6ee0:	4798      	blx	r3
    6ee2:	4603      	mov	r3, r0
    6ee4:	b2db      	uxtb	r3, r3
    6ee6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6ee8:	68f8      	ldr	r0, [r7, #12]
    6eea:	4b11      	ldr	r3, [pc, #68]	; (6f30 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6eec:	4798      	blx	r3
    6eee:	e005      	b.n	6efc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6ef0:	68f8      	ldr	r0, [r7, #12]
    6ef2:	4b0f      	ldr	r3, [pc, #60]	; (6f30 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6ef4:	4798      	blx	r3
			return I2C_NACK;
    6ef6:	f06f 0301 	mvn.w	r3, #1
    6efa:	e000      	b.n	6efe <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6efc:	2300      	movs	r3, #0
}
    6efe:	4618      	mov	r0, r3
    6f00:	371c      	adds	r7, #28
    6f02:	46bd      	mov	sp, r7
    6f04:	bd90      	pop	{r4, r7, pc}
    6f06:	bf00      	nop
    6f08:	000067a1 	.word	0x000067a1
    6f0c:	00006bd9 	.word	0x00006bd9
    6f10:	000066a1 	.word	0x000066a1
    6f14:	00006ce9 	.word	0x00006ce9
    6f18:	00006ab9 	.word	0x00006ab9
    6f1c:	00006a95 	.word	0x00006a95
    6f20:	00006af5 	.word	0x00006af5
    6f24:	00006951 	.word	0x00006951
    6f28:	00006929 	.word	0x00006929
    6f2c:	00006b19 	.word	0x00006b19
    6f30:	000066bb 	.word	0x000066bb

00006f34 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b082      	sub	sp, #8
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
    6f3c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	2b00      	cmp	r3, #0
    6f42:	bf14      	ite	ne
    6f44:	2301      	movne	r3, #1
    6f46:	2300      	moveq	r3, #0
    6f48:	b2db      	uxtb	r3, r3
    6f4a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6f4e:	4908      	ldr	r1, [pc, #32]	; (6f70 <_i2c_m_sync_init+0x3c>)
    6f50:	4618      	mov	r0, r3
    6f52:	4b08      	ldr	r3, [pc, #32]	; (6f74 <_i2c_m_sync_init+0x40>)
    6f54:	4798      	blx	r3

	i2c_dev->hw = hw;
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	683a      	ldr	r2, [r7, #0]
    6f5a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	6839      	ldr	r1, [r7, #0]
    6f60:	4618      	mov	r0, r3
    6f62:	4b05      	ldr	r3, [pc, #20]	; (6f78 <_i2c_m_sync_init+0x44>)
    6f64:	4798      	blx	r3
    6f66:	4603      	mov	r3, r0
}
    6f68:	4618      	mov	r0, r3
    6f6a:	3708      	adds	r7, #8
    6f6c:	46bd      	mov	sp, r7
    6f6e:	bd80      	pop	{r7, pc}
    6f70:	00014220 	.word	0x00014220
    6f74:	000040f5 	.word	0x000040f5
    6f78:	0000734d 	.word	0x0000734d

00006f7c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b082      	sub	sp, #8
    6f80:	af00      	add	r7, sp, #0
    6f82:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	2b00      	cmp	r3, #0
    6f88:	bf14      	ite	ne
    6f8a:	2301      	movne	r3, #1
    6f8c:	2300      	moveq	r3, #0
    6f8e:	b2db      	uxtb	r3, r3
    6f90:	f240 5235 	movw	r2, #1333	; 0x535
    6f94:	4906      	ldr	r1, [pc, #24]	; (6fb0 <_i2c_m_sync_enable+0x34>)
    6f96:	4618      	mov	r0, r3
    6f98:	4b06      	ldr	r3, [pc, #24]	; (6fb4 <_i2c_m_sync_enable+0x38>)
    6f9a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6f9c:	687b      	ldr	r3, [r7, #4]
    6f9e:	691b      	ldr	r3, [r3, #16]
    6fa0:	4618      	mov	r0, r3
    6fa2:	4b05      	ldr	r3, [pc, #20]	; (6fb8 <_i2c_m_sync_enable+0x3c>)
    6fa4:	4798      	blx	r3
    6fa6:	4603      	mov	r3, r0
}
    6fa8:	4618      	mov	r0, r3
    6faa:	3708      	adds	r7, #8
    6fac:	46bd      	mov	sp, r7
    6fae:	bd80      	pop	{r7, pc}
    6fb0:	00014220 	.word	0x00014220
    6fb4:	000040f5 	.word	0x000040f5
    6fb8:	000072c1 	.word	0x000072c1

00006fbc <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    6fbc:	b580      	push	{r7, lr}
    6fbe:	b084      	sub	sp, #16
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	691b      	ldr	r3, [r3, #16]
    6fc8:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	2b00      	cmp	r3, #0
    6fce:	bf14      	ite	ne
    6fd0:	2301      	movne	r3, #1
    6fd2:	2300      	moveq	r3, #0
    6fd4:	b2db      	uxtb	r3, r3
    6fd6:	f240 5243 	movw	r2, #1347	; 0x543
    6fda:	490c      	ldr	r1, [pc, #48]	; (700c <_i2c_m_sync_disable+0x50>)
    6fdc:	4618      	mov	r0, r3
    6fde:	4b0c      	ldr	r3, [pc, #48]	; (7010 <_i2c_m_sync_disable+0x54>)
    6fe0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	691b      	ldr	r3, [r3, #16]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	bf14      	ite	ne
    6fea:	2301      	movne	r3, #1
    6fec:	2300      	moveq	r3, #0
    6fee:	b2db      	uxtb	r3, r3
    6ff0:	f240 5244 	movw	r2, #1348	; 0x544
    6ff4:	4905      	ldr	r1, [pc, #20]	; (700c <_i2c_m_sync_disable+0x50>)
    6ff6:	4618      	mov	r0, r3
    6ff8:	4b05      	ldr	r3, [pc, #20]	; (7010 <_i2c_m_sync_disable+0x54>)
    6ffa:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6ffc:	68f8      	ldr	r0, [r7, #12]
    6ffe:	4b05      	ldr	r3, [pc, #20]	; (7014 <_i2c_m_sync_disable+0x58>)
    7000:	4798      	blx	r3

	return ERR_NONE;
    7002:	2300      	movs	r3, #0
}
    7004:	4618      	mov	r0, r3
    7006:	3710      	adds	r7, #16
    7008:	46bd      	mov	sp, r7
    700a:	bd80      	pop	{r7, pc}
    700c:	00014220 	.word	0x00014220
    7010:	000040f5 	.word	0x000040f5
    7014:	00006779 	.word	0x00006779

00007018 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7018:	b580      	push	{r7, lr}
    701a:	b084      	sub	sp, #16
    701c:	af00      	add	r7, sp, #0
    701e:	6078      	str	r0, [r7, #4]
    7020:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    7022:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7026:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	691b      	ldr	r3, [r3, #16]
    702c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    702e:	68b8      	ldr	r0, [r7, #8]
    7030:	4b0f      	ldr	r3, [pc, #60]	; (7070 <_sercom_i2c_sync_wait_bus+0x58>)
    7032:	4798      	blx	r3
    7034:	4603      	mov	r3, r0
    7036:	461a      	mov	r2, r3
    7038:	683b      	ldr	r3, [r7, #0]
    703a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    703c:	68fb      	ldr	r3, [r7, #12]
    703e:	1e5a      	subs	r2, r3, #1
    7040:	60fa      	str	r2, [r7, #12]
    7042:	2b00      	cmp	r3, #0
    7044:	d102      	bne.n	704c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    7046:	f06f 0304 	mvn.w	r3, #4
    704a:	e00c      	b.n	7066 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    704c:	683b      	ldr	r3, [r7, #0]
    704e:	681b      	ldr	r3, [r3, #0]
    7050:	f003 0301 	and.w	r3, r3, #1
    7054:	2b00      	cmp	r3, #0
    7056:	d105      	bne.n	7064 <_sercom_i2c_sync_wait_bus+0x4c>
    7058:	683b      	ldr	r3, [r7, #0]
    705a:	681b      	ldr	r3, [r3, #0]
    705c:	f003 0302 	and.w	r3, r3, #2
    7060:	2b00      	cmp	r3, #0
    7062:	d0e4      	beq.n	702e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    7064:	2300      	movs	r3, #0
}
    7066:	4618      	mov	r0, r3
    7068:	3710      	adds	r7, #16
    706a:	46bd      	mov	sp, r7
    706c:	bd80      	pop	{r7, pc}
    706e:	bf00      	nop
    7070:	000066d5 	.word	0x000066d5

00007074 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    7074:	b590      	push	{r4, r7, lr}
    7076:	b087      	sub	sp, #28
    7078:	af00      	add	r7, sp, #0
    707a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    707c:	687b      	ldr	r3, [r7, #4]
    707e:	691b      	ldr	r3, [r3, #16]
    7080:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    7082:	687b      	ldr	r3, [r7, #4]
    7084:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7086:	6978      	ldr	r0, [r7, #20]
    7088:	4b39      	ldr	r3, [pc, #228]	; (7170 <_sercom_i2c_sync_send_address+0xfc>)
    708a:	4798      	blx	r3
    708c:	4603      	mov	r3, r0
    708e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	2b00      	cmp	r3, #0
    7094:	bf14      	ite	ne
    7096:	2301      	movne	r3, #1
    7098:	2300      	moveq	r3, #0
    709a:	b2db      	uxtb	r3, r3
    709c:	f240 52a5 	movw	r2, #1445	; 0x5a5
    70a0:	4934      	ldr	r1, [pc, #208]	; (7174 <_sercom_i2c_sync_send_address+0x100>)
    70a2:	4618      	mov	r0, r3
    70a4:	4b34      	ldr	r3, [pc, #208]	; (7178 <_sercom_i2c_sync_send_address+0x104>)
    70a6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    70a8:	693b      	ldr	r3, [r7, #16]
    70aa:	685b      	ldr	r3, [r3, #4]
    70ac:	2b01      	cmp	r3, #1
    70ae:	d106      	bne.n	70be <_sercom_i2c_sync_send_address+0x4a>
    70b0:	68fb      	ldr	r3, [r7, #12]
    70b2:	2b00      	cmp	r3, #0
    70b4:	d003      	beq.n	70be <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    70b6:	6978      	ldr	r0, [r7, #20]
    70b8:	4b30      	ldr	r3, [pc, #192]	; (717c <_sercom_i2c_sync_send_address+0x108>)
    70ba:	4798      	blx	r3
    70bc:	e002      	b.n	70c4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    70be:	6978      	ldr	r0, [r7, #20]
    70c0:	4b2f      	ldr	r3, [pc, #188]	; (7180 <_sercom_i2c_sync_send_address+0x10c>)
    70c2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    70c4:	693b      	ldr	r3, [r7, #16]
    70c6:	881b      	ldrh	r3, [r3, #0]
    70c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    70cc:	2b00      	cmp	r3, #0
    70ce:	d022      	beq.n	7116 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    70d0:	693b      	ldr	r3, [r7, #16]
    70d2:	885b      	ldrh	r3, [r3, #2]
    70d4:	b29b      	uxth	r3, r3
    70d6:	f003 0301 	and.w	r3, r3, #1
    70da:	2b00      	cmp	r3, #0
    70dc:	d007      	beq.n	70ee <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    70de:	693b      	ldr	r3, [r7, #16]
    70e0:	885b      	ldrh	r3, [r3, #2]
    70e2:	b29b      	uxth	r3, r3
    70e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    70e8:	b29a      	uxth	r2, r3
    70ea:	693b      	ldr	r3, [r7, #16]
    70ec:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    70ee:	693b      	ldr	r3, [r7, #16]
    70f0:	881b      	ldrh	r3, [r3, #0]
    70f2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    70f4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    70f8:	401c      	ands	r4, r3
    70fa:	6978      	ldr	r0, [r7, #20]
    70fc:	4b21      	ldr	r3, [pc, #132]	; (7184 <_sercom_i2c_sync_send_address+0x110>)
    70fe:	4798      	blx	r3
    7100:	4603      	mov	r3, r0
    7102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7106:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    710c:	4619      	mov	r1, r3
    710e:	6978      	ldr	r0, [r7, #20]
    7110:	4b1d      	ldr	r3, [pc, #116]	; (7188 <_sercom_i2c_sync_send_address+0x114>)
    7112:	4798      	blx	r3
    7114:	e01a      	b.n	714c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7116:	693b      	ldr	r3, [r7, #16]
    7118:	881b      	ldrh	r3, [r3, #0]
    711a:	005b      	lsls	r3, r3, #1
    711c:	b2db      	uxtb	r3, r3
    711e:	693a      	ldr	r2, [r7, #16]
    7120:	8852      	ldrh	r2, [r2, #2]
    7122:	b292      	uxth	r2, r2
    7124:	f002 0201 	and.w	r2, r2, #1
    7128:	2a00      	cmp	r2, #0
    712a:	bf14      	ite	ne
    712c:	2201      	movne	r2, #1
    712e:	2200      	moveq	r2, #0
    7130:	b2d2      	uxtb	r2, r2
    7132:	4313      	orrs	r3, r2
    7134:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7136:	6978      	ldr	r0, [r7, #20]
    7138:	4b12      	ldr	r3, [pc, #72]	; (7184 <_sercom_i2c_sync_send_address+0x110>)
    713a:	4798      	blx	r3
    713c:	4603      	mov	r3, r0
    713e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7142:	4323      	orrs	r3, r4
    7144:	4619      	mov	r1, r3
    7146:	6978      	ldr	r0, [r7, #20]
    7148:	4b0f      	ldr	r3, [pc, #60]	; (7188 <_sercom_i2c_sync_send_address+0x114>)
    714a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    714c:	f107 0308 	add.w	r3, r7, #8
    7150:	4619      	mov	r1, r3
    7152:	6878      	ldr	r0, [r7, #4]
    7154:	4b0d      	ldr	r3, [pc, #52]	; (718c <_sercom_i2c_sync_send_address+0x118>)
    7156:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7158:	68bb      	ldr	r3, [r7, #8]
    715a:	693a      	ldr	r2, [r7, #16]
    715c:	4619      	mov	r1, r3
    715e:	6978      	ldr	r0, [r7, #20]
    7160:	4b0b      	ldr	r3, [pc, #44]	; (7190 <_sercom_i2c_sync_send_address+0x11c>)
    7162:	4798      	blx	r3
    7164:	4603      	mov	r3, r0
}
    7166:	4618      	mov	r0, r3
    7168:	371c      	adds	r7, #28
    716a:	46bd      	mov	sp, r7
    716c:	bd90      	pop	{r4, r7, pc}
    716e:	bf00      	nop
    7170:	000067a1 	.word	0x000067a1
    7174:	00014220 	.word	0x00014220
    7178:	000040f5 	.word	0x000040f5
    717c:	00006951 	.word	0x00006951
    7180:	00006979 	.word	0x00006979
    7184:	00006ab9 	.word	0x00006ab9
    7188:	00006a95 	.word	0x00006a95
    718c:	00007019 	.word	0x00007019
    7190:	00006d05 	.word	0x00006d05

00007194 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    7194:	b580      	push	{r7, lr}
    7196:	b086      	sub	sp, #24
    7198:	af00      	add	r7, sp, #0
    719a:	6078      	str	r0, [r7, #4]
    719c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    719e:	687b      	ldr	r3, [r7, #4]
    71a0:	691b      	ldr	r3, [r3, #16]
    71a2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    71a4:	687b      	ldr	r3, [r7, #4]
    71a6:	2b00      	cmp	r3, #0
    71a8:	bf14      	ite	ne
    71aa:	2301      	movne	r3, #1
    71ac:	2300      	moveq	r3, #0
    71ae:	b2db      	uxtb	r3, r3
    71b0:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    71b4:	493b      	ldr	r1, [pc, #236]	; (72a4 <_i2c_m_sync_transfer+0x110>)
    71b6:	4618      	mov	r0, r3
    71b8:	4b3b      	ldr	r3, [pc, #236]	; (72a8 <_i2c_m_sync_transfer+0x114>)
    71ba:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	691b      	ldr	r3, [r3, #16]
    71c0:	2b00      	cmp	r3, #0
    71c2:	bf14      	ite	ne
    71c4:	2301      	movne	r3, #1
    71c6:	2300      	moveq	r3, #0
    71c8:	b2db      	uxtb	r3, r3
    71ca:	f240 52d1 	movw	r2, #1489	; 0x5d1
    71ce:	4935      	ldr	r1, [pc, #212]	; (72a4 <_i2c_m_sync_transfer+0x110>)
    71d0:	4618      	mov	r0, r3
    71d2:	4b35      	ldr	r3, [pc, #212]	; (72a8 <_i2c_m_sync_transfer+0x114>)
    71d4:	4798      	blx	r3
	ASSERT(msg);
    71d6:	683b      	ldr	r3, [r7, #0]
    71d8:	2b00      	cmp	r3, #0
    71da:	bf14      	ite	ne
    71dc:	2301      	movne	r3, #1
    71de:	2300      	moveq	r3, #0
    71e0:	b2db      	uxtb	r3, r3
    71e2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    71e6:	492f      	ldr	r1, [pc, #188]	; (72a4 <_i2c_m_sync_transfer+0x110>)
    71e8:	4618      	mov	r0, r3
    71ea:	4b2f      	ldr	r3, [pc, #188]	; (72a8 <_i2c_m_sync_transfer+0x114>)
    71ec:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	885b      	ldrh	r3, [r3, #2]
    71f2:	b29b      	uxth	r3, r3
    71f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    71f8:	2b00      	cmp	r3, #0
    71fa:	d002      	beq.n	7202 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    71fc:	f06f 0305 	mvn.w	r3, #5
    7200:	e04c      	b.n	729c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    7202:	683b      	ldr	r3, [r7, #0]
    7204:	885b      	ldrh	r3, [r3, #2]
    7206:	b29b      	uxth	r3, r3
    7208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    720c:	b29a      	uxth	r2, r3
    720e:	683b      	ldr	r3, [r7, #0]
    7210:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    7212:	687b      	ldr	r3, [r7, #4]
    7214:	683a      	ldr	r2, [r7, #0]
    7216:	ca07      	ldmia	r2, {r0, r1, r2}
    7218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    721c:	6938      	ldr	r0, [r7, #16]
    721e:	4b23      	ldr	r3, [pc, #140]	; (72ac <_i2c_m_sync_transfer+0x118>)
    7220:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    7222:	6878      	ldr	r0, [r7, #4]
    7224:	4b22      	ldr	r3, [pc, #136]	; (72b0 <_i2c_m_sync_transfer+0x11c>)
    7226:	4798      	blx	r3
    7228:	6178      	str	r0, [r7, #20]

	if (ret) {
    722a:	697b      	ldr	r3, [r7, #20]
    722c:	2b00      	cmp	r3, #0
    722e:	d02d      	beq.n	728c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	885b      	ldrh	r3, [r3, #2]
    7234:	b29b      	uxth	r3, r3
    7236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    723a:	b29a      	uxth	r2, r3
    723c:	687b      	ldr	r3, [r7, #4]
    723e:	805a      	strh	r2, [r3, #2]

		return ret;
    7240:	697b      	ldr	r3, [r7, #20]
    7242:	e02b      	b.n	729c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7244:	f107 030c 	add.w	r3, r7, #12
    7248:	4619      	mov	r1, r3
    724a:	6878      	ldr	r0, [r7, #4]
    724c:	4b19      	ldr	r3, [pc, #100]	; (72b4 <_i2c_m_sync_transfer+0x120>)
    724e:	4798      	blx	r3
    7250:	6178      	str	r0, [r7, #20]

		if (ret) {
    7252:	697b      	ldr	r3, [r7, #20]
    7254:	2b00      	cmp	r3, #0
    7256:	d012      	beq.n	727e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7258:	683b      	ldr	r3, [r7, #0]
    725a:	885b      	ldrh	r3, [r3, #2]
    725c:	b29b      	uxth	r3, r3
    725e:	b21b      	sxth	r3, r3
    7260:	2b00      	cmp	r3, #0
    7262:	da02      	bge.n	726a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7264:	6938      	ldr	r0, [r7, #16]
    7266:	4b14      	ldr	r3, [pc, #80]	; (72b8 <_i2c_m_sync_transfer+0x124>)
    7268:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    726a:	687b      	ldr	r3, [r7, #4]
    726c:	885b      	ldrh	r3, [r3, #2]
    726e:	b29b      	uxth	r3, r3
    7270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7274:	b29a      	uxth	r2, r3
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	805a      	strh	r2, [r3, #2]

			return ret;
    727a:	697b      	ldr	r3, [r7, #20]
    727c:	e00e      	b.n	729c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    727e:	68fb      	ldr	r3, [r7, #12]
    7280:	687a      	ldr	r2, [r7, #4]
    7282:	4619      	mov	r1, r3
    7284:	6938      	ldr	r0, [r7, #16]
    7286:	4b0d      	ldr	r3, [pc, #52]	; (72bc <_i2c_m_sync_transfer+0x128>)
    7288:	4798      	blx	r3
    728a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    728c:	687b      	ldr	r3, [r7, #4]
    728e:	885b      	ldrh	r3, [r3, #2]
    7290:	b29b      	uxth	r3, r3
    7292:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7296:	2b00      	cmp	r3, #0
    7298:	d1d4      	bne.n	7244 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    729a:	697b      	ldr	r3, [r7, #20]
}
    729c:	4618      	mov	r0, r3
    729e:	3718      	adds	r7, #24
    72a0:	46bd      	mov	sp, r7
    72a2:	bd80      	pop	{r7, pc}
    72a4:	00014220 	.word	0x00014220
    72a8:	000040f5 	.word	0x000040f5
    72ac:	00006901 	.word	0x00006901
    72b0:	00007075 	.word	0x00007075
    72b4:	00007019 	.word	0x00007019
    72b8:	00006ce9 	.word	0x00006ce9
    72bc:	00006d05 	.word	0x00006d05

000072c0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    72c0:	b580      	push	{r7, lr}
    72c2:	b084      	sub	sp, #16
    72c4:	af00      	add	r7, sp, #0
    72c6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    72c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    72cc:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    72ce:	2304      	movs	r3, #4
    72d0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	2b00      	cmp	r3, #0
    72d6:	bf14      	ite	ne
    72d8:	2301      	movne	r3, #1
    72da:	2300      	moveq	r3, #0
    72dc:	b2db      	uxtb	r3, r3
    72de:	f240 6205 	movw	r2, #1541	; 0x605
    72e2:	4915      	ldr	r1, [pc, #84]	; (7338 <_i2c_m_enable_implementation+0x78>)
    72e4:	4618      	mov	r0, r3
    72e6:	4b15      	ldr	r3, [pc, #84]	; (733c <_i2c_m_enable_implementation+0x7c>)
    72e8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    72ea:	6878      	ldr	r0, [r7, #4]
    72ec:	4b14      	ldr	r3, [pc, #80]	; (7340 <_i2c_m_enable_implementation+0x80>)
    72ee:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    72f0:	e016      	b.n	7320 <_i2c_m_enable_implementation+0x60>
		timeout--;
    72f2:	68fb      	ldr	r3, [r7, #12]
    72f4:	3b01      	subs	r3, #1
    72f6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    72f8:	68fb      	ldr	r3, [r7, #12]
    72fa:	2b00      	cmp	r3, #0
    72fc:	dc10      	bgt.n	7320 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    72fe:	68bb      	ldr	r3, [r7, #8]
    7300:	3b01      	subs	r3, #1
    7302:	60bb      	str	r3, [r7, #8]
    7304:	68bb      	ldr	r3, [r7, #8]
    7306:	2b00      	cmp	r3, #0
    7308:	d007      	beq.n	731a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    730a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    730e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7310:	2110      	movs	r1, #16
    7312:	6878      	ldr	r0, [r7, #4]
    7314:	4b0b      	ldr	r3, [pc, #44]	; (7344 <_i2c_m_enable_implementation+0x84>)
    7316:	4798      	blx	r3
    7318:	e002      	b.n	7320 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    731a:	f06f 0305 	mvn.w	r3, #5
    731e:	e006      	b.n	732e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7320:	6878      	ldr	r0, [r7, #4]
    7322:	4b09      	ldr	r3, [pc, #36]	; (7348 <_i2c_m_enable_implementation+0x88>)
    7324:	4798      	blx	r3
    7326:	4603      	mov	r3, r0
    7328:	2b01      	cmp	r3, #1
    732a:	d1e2      	bne.n	72f2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    732c:	2300      	movs	r3, #0
}
    732e:	4618      	mov	r0, r3
    7330:	3710      	adds	r7, #16
    7332:	46bd      	mov	sp, r7
    7334:	bd80      	pop	{r7, pc}
    7336:	bf00      	nop
    7338:	00014220 	.word	0x00014220
    733c:	000040f5 	.word	0x000040f5
    7340:	00006751 	.word	0x00006751
    7344:	00006bfd 	.word	0x00006bfd
    7348:	00006bad 	.word	0x00006bad

0000734c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    734c:	b580      	push	{r7, lr}
    734e:	b084      	sub	sp, #16
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
    7354:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7356:	6838      	ldr	r0, [r7, #0]
    7358:	4b42      	ldr	r3, [pc, #264]	; (7464 <_i2c_m_sync_init_impl+0x118>)
    735a:	4798      	blx	r3
    735c:	4603      	mov	r3, r0
    735e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7360:	2101      	movs	r1, #1
    7362:	6838      	ldr	r0, [r7, #0]
    7364:	4b40      	ldr	r3, [pc, #256]	; (7468 <_i2c_m_sync_init_impl+0x11c>)
    7366:	4798      	blx	r3
    7368:	4603      	mov	r3, r0
    736a:	f083 0301 	eor.w	r3, r3, #1
    736e:	b2db      	uxtb	r3, r3
    7370:	2b00      	cmp	r3, #0
    7372:	d020      	beq.n	73b6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7374:	7bfa      	ldrb	r2, [r7, #15]
    7376:	493d      	ldr	r1, [pc, #244]	; (746c <_i2c_m_sync_init_impl+0x120>)
    7378:	4613      	mov	r3, r2
    737a:	005b      	lsls	r3, r3, #1
    737c:	4413      	add	r3, r2
    737e:	00db      	lsls	r3, r3, #3
    7380:	440b      	add	r3, r1
    7382:	3304      	adds	r3, #4
    7384:	681b      	ldr	r3, [r3, #0]
    7386:	f003 031c 	and.w	r3, r3, #28
    738a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    738c:	2102      	movs	r1, #2
    738e:	6838      	ldr	r0, [r7, #0]
    7390:	4b37      	ldr	r3, [pc, #220]	; (7470 <_i2c_m_sync_init_impl+0x124>)
    7392:	4798      	blx	r3
    7394:	4603      	mov	r3, r0
    7396:	2b00      	cmp	r3, #0
    7398:	d006      	beq.n	73a8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    739a:	6838      	ldr	r0, [r7, #0]
    739c:	4b35      	ldr	r3, [pc, #212]	; (7474 <_i2c_m_sync_init_impl+0x128>)
    739e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    73a0:	2102      	movs	r1, #2
    73a2:	6838      	ldr	r0, [r7, #0]
    73a4:	4b34      	ldr	r3, [pc, #208]	; (7478 <_i2c_m_sync_init_impl+0x12c>)
    73a6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    73a8:	68bb      	ldr	r3, [r7, #8]
    73aa:	f043 0301 	orr.w	r3, r3, #1
    73ae:	4619      	mov	r1, r3
    73b0:	6838      	ldr	r0, [r7, #0]
    73b2:	4b32      	ldr	r3, [pc, #200]	; (747c <_i2c_m_sync_init_impl+0x130>)
    73b4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    73b6:	2101      	movs	r1, #1
    73b8:	6838      	ldr	r0, [r7, #0]
    73ba:	4b2f      	ldr	r3, [pc, #188]	; (7478 <_i2c_m_sync_init_impl+0x12c>)
    73bc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    73be:	7bfa      	ldrb	r2, [r7, #15]
    73c0:	492a      	ldr	r1, [pc, #168]	; (746c <_i2c_m_sync_init_impl+0x120>)
    73c2:	4613      	mov	r3, r2
    73c4:	005b      	lsls	r3, r3, #1
    73c6:	4413      	add	r3, r2
    73c8:	00db      	lsls	r3, r3, #3
    73ca:	440b      	add	r3, r1
    73cc:	3304      	adds	r3, #4
    73ce:	681b      	ldr	r3, [r3, #0]
    73d0:	4619      	mov	r1, r3
    73d2:	6838      	ldr	r0, [r7, #0]
    73d4:	4b29      	ldr	r3, [pc, #164]	; (747c <_i2c_m_sync_init_impl+0x130>)
    73d6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    73d8:	7bfa      	ldrb	r2, [r7, #15]
    73da:	4924      	ldr	r1, [pc, #144]	; (746c <_i2c_m_sync_init_impl+0x120>)
    73dc:	4613      	mov	r3, r2
    73de:	005b      	lsls	r3, r3, #1
    73e0:	4413      	add	r3, r2
    73e2:	00db      	lsls	r3, r3, #3
    73e4:	440b      	add	r3, r1
    73e6:	3308      	adds	r3, #8
    73e8:	681b      	ldr	r3, [r3, #0]
    73ea:	4619      	mov	r1, r3
    73ec:	6838      	ldr	r0, [r7, #0]
    73ee:	4b24      	ldr	r3, [pc, #144]	; (7480 <_i2c_m_sync_init_impl+0x134>)
    73f0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    73f2:	7bfa      	ldrb	r2, [r7, #15]
    73f4:	491d      	ldr	r1, [pc, #116]	; (746c <_i2c_m_sync_init_impl+0x120>)
    73f6:	4613      	mov	r3, r2
    73f8:	005b      	lsls	r3, r3, #1
    73fa:	4413      	add	r3, r2
    73fc:	00db      	lsls	r3, r3, #3
    73fe:	440b      	add	r3, r1
    7400:	330c      	adds	r3, #12
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	4619      	mov	r1, r3
    7406:	6838      	ldr	r0, [r7, #0]
    7408:	4b1e      	ldr	r3, [pc, #120]	; (7484 <_i2c_m_sync_init_impl+0x138>)
    740a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    740c:	7bfa      	ldrb	r2, [r7, #15]
    740e:	4917      	ldr	r1, [pc, #92]	; (746c <_i2c_m_sync_init_impl+0x120>)
    7410:	4613      	mov	r3, r2
    7412:	005b      	lsls	r3, r3, #1
    7414:	4413      	add	r3, r2
    7416:	00db      	lsls	r3, r3, #3
    7418:	440b      	add	r3, r1
    741a:	3304      	adds	r3, #4
    741c:	681b      	ldr	r3, [r3, #0]
    741e:	0e1b      	lsrs	r3, r3, #24
    7420:	b29b      	uxth	r3, r3
    7422:	f003 0303 	and.w	r3, r3, #3
    7426:	b29a      	uxth	r2, r3
    7428:	687b      	ldr	r3, [r7, #4]
    742a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    742c:	687b      	ldr	r3, [r7, #4]
    742e:	899b      	ldrh	r3, [r3, #12]
    7430:	2b01      	cmp	r3, #1
    7432:	bf8c      	ite	hi
    7434:	2301      	movhi	r3, #1
    7436:	2300      	movls	r3, #0
    7438:	b2db      	uxtb	r3, r3
    743a:	4619      	mov	r1, r3
    743c:	6838      	ldr	r0, [r7, #0]
    743e:	4b12      	ldr	r3, [pc, #72]	; (7488 <_i2c_m_sync_init_impl+0x13c>)
    7440:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7442:	7bfa      	ldrb	r2, [r7, #15]
    7444:	4909      	ldr	r1, [pc, #36]	; (746c <_i2c_m_sync_init_impl+0x120>)
    7446:	4613      	mov	r3, r2
    7448:	005b      	lsls	r3, r3, #1
    744a:	4413      	add	r3, r2
    744c:	00db      	lsls	r3, r3, #3
    744e:	440b      	add	r3, r1
    7450:	3312      	adds	r3, #18
    7452:	881a      	ldrh	r2, [r3, #0]
    7454:	687b      	ldr	r3, [r7, #4]
    7456:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7458:	2300      	movs	r3, #0
}
    745a:	4618      	mov	r0, r3
    745c:	3710      	adds	r7, #16
    745e:	46bd      	mov	sp, r7
    7460:	bd80      	pop	{r7, pc}
    7462:	bf00      	nop
    7464:	00006c81 	.word	0x00006c81
    7468:	0000662d 	.word	0x0000662d
    746c:	20000018 	.word	0x20000018
    7470:	000067d1 	.word	0x000067d1
    7474:	00006779 	.word	0x00006779
    7478:	00006609 	.word	0x00006609
    747c:	00006801 	.word	0x00006801
    7480:	000069d1 	.word	0x000069d1
    7484:	00006a19 	.word	0x00006a19
    7488:	00006a55 	.word	0x00006a55

0000748c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    748c:	b580      	push	{r7, lr}
    748e:	b082      	sub	sp, #8
    7490:	af00      	add	r7, sp, #0
    7492:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7494:	2101      	movs	r1, #1
    7496:	6878      	ldr	r0, [r7, #4]
    7498:	4b07      	ldr	r3, [pc, #28]	; (74b8 <_spi_sync_enable+0x2c>)
    749a:	4798      	blx	r3
    749c:	4603      	mov	r3, r0
    749e:	2b00      	cmp	r3, #0
    74a0:	d002      	beq.n	74a8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    74a2:	f06f 0303 	mvn.w	r3, #3
    74a6:	e003      	b.n	74b0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    74a8:	6878      	ldr	r0, [r7, #4]
    74aa:	4b04      	ldr	r3, [pc, #16]	; (74bc <_spi_sync_enable+0x30>)
    74ac:	4798      	blx	r3

	return ERR_NONE;
    74ae:	2300      	movs	r3, #0
}
    74b0:	4618      	mov	r0, r3
    74b2:	3708      	adds	r7, #8
    74b4:	46bd      	mov	sp, r7
    74b6:	bd80      	pop	{r7, pc}
    74b8:	00006679 	.word	0x00006679
    74bc:	00006825 	.word	0x00006825

000074c0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b082      	sub	sp, #8
    74c4:	af00      	add	r7, sp, #0
    74c6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    74c8:	2101      	movs	r1, #1
    74ca:	6878      	ldr	r0, [r7, #4]
    74cc:	4b07      	ldr	r3, [pc, #28]	; (74ec <_spi_sync_disable+0x2c>)
    74ce:	4798      	blx	r3
    74d0:	4603      	mov	r3, r0
    74d2:	2b00      	cmp	r3, #0
    74d4:	d002      	beq.n	74dc <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    74d6:	f06f 0303 	mvn.w	r3, #3
    74da:	e003      	b.n	74e4 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    74dc:	6878      	ldr	r0, [r7, #4]
    74de:	4b04      	ldr	r3, [pc, #16]	; (74f0 <_spi_sync_disable+0x30>)
    74e0:	4798      	blx	r3

	return ERR_NONE;
    74e2:	2300      	movs	r3, #0
}
    74e4:	4618      	mov	r0, r3
    74e6:	3708      	adds	r7, #8
    74e8:	46bd      	mov	sp, r7
    74ea:	bd80      	pop	{r7, pc}
    74ec:	00006679 	.word	0x00006679
    74f0:	00006885 	.word	0x00006885

000074f4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    74f4:	b580      	push	{r7, lr}
    74f6:	b082      	sub	sp, #8
    74f8:	af00      	add	r7, sp, #0
    74fa:	6078      	str	r0, [r7, #4]
    74fc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    74fe:	687b      	ldr	r3, [r7, #4]
    7500:	2b00      	cmp	r3, #0
    7502:	d004      	beq.n	750e <_spi_load_regs_master+0x1a>
    7504:	683b      	ldr	r3, [r7, #0]
    7506:	2b00      	cmp	r3, #0
    7508:	d001      	beq.n	750e <_spi_load_regs_master+0x1a>
    750a:	2301      	movs	r3, #1
    750c:	e000      	b.n	7510 <_spi_load_regs_master+0x1c>
    750e:	2300      	movs	r3, #0
    7510:	f003 0301 	and.w	r3, r3, #1
    7514:	b2db      	uxtb	r3, r3
    7516:	f640 1209 	movw	r2, #2313	; 0x909
    751a:	4915      	ldr	r1, [pc, #84]	; (7570 <_spi_load_regs_master+0x7c>)
    751c:	4618      	mov	r0, r3
    751e:	4b15      	ldr	r3, [pc, #84]	; (7574 <_spi_load_regs_master+0x80>)
    7520:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7522:	683b      	ldr	r3, [r7, #0]
    7524:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7526:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    752a:	f023 0301 	bic.w	r3, r3, #1
    752e:	4619      	mov	r1, r3
    7530:	6878      	ldr	r0, [r7, #4]
    7532:	4b11      	ldr	r3, [pc, #68]	; (7578 <_spi_load_regs_master+0x84>)
    7534:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7536:	683b      	ldr	r3, [r7, #0]
    7538:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    753a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    753e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7546:	4619      	mov	r1, r3
    7548:	6878      	ldr	r0, [r7, #4]
    754a:	4b0c      	ldr	r3, [pc, #48]	; (757c <_spi_load_regs_master+0x88>)
    754c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    754e:	683b      	ldr	r3, [r7, #0]
    7550:	7b1b      	ldrb	r3, [r3, #12]
    7552:	4619      	mov	r1, r3
    7554:	6878      	ldr	r0, [r7, #4]
    7556:	4b0a      	ldr	r3, [pc, #40]	; (7580 <_spi_load_regs_master+0x8c>)
    7558:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    755a:	683b      	ldr	r3, [r7, #0]
    755c:	7b5b      	ldrb	r3, [r3, #13]
    755e:	4619      	mov	r1, r3
    7560:	6878      	ldr	r0, [r7, #4]
    7562:	4b08      	ldr	r3, [pc, #32]	; (7584 <_spi_load_regs_master+0x90>)
    7564:	4798      	blx	r3
}
    7566:	bf00      	nop
    7568:	3708      	adds	r7, #8
    756a:	46bd      	mov	sp, r7
    756c:	bd80      	pop	{r7, pc}
    756e:	bf00      	nop
    7570:	00014220 	.word	0x00014220
    7574:	000040f5 	.word	0x000040f5
    7578:	000068dd 	.word	0x000068dd
    757c:	000069f5 	.word	0x000069f5
    7580:	00006a35 	.word	0x00006a35
    7584:	00006b6d 	.word	0x00006b6d

00007588 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7588:	b580      	push	{r7, lr}
    758a:	b082      	sub	sp, #8
    758c:	af00      	add	r7, sp, #0
    758e:	6078      	str	r0, [r7, #4]
    7590:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7592:	687b      	ldr	r3, [r7, #4]
    7594:	2b00      	cmp	r3, #0
    7596:	d004      	beq.n	75a2 <_spi_load_regs_slave+0x1a>
    7598:	683b      	ldr	r3, [r7, #0]
    759a:	2b00      	cmp	r3, #0
    759c:	d001      	beq.n	75a2 <_spi_load_regs_slave+0x1a>
    759e:	2301      	movs	r3, #1
    75a0:	e000      	b.n	75a4 <_spi_load_regs_slave+0x1c>
    75a2:	2300      	movs	r3, #0
    75a4:	f003 0301 	and.w	r3, r3, #1
    75a8:	b2db      	uxtb	r3, r3
    75aa:	f640 121d 	movw	r2, #2333	; 0x91d
    75ae:	491a      	ldr	r1, [pc, #104]	; (7618 <_spi_load_regs_slave+0x90>)
    75b0:	4618      	mov	r0, r3
    75b2:	4b1a      	ldr	r3, [pc, #104]	; (761c <_spi_load_regs_slave+0x94>)
    75b4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    75b6:	683b      	ldr	r3, [r7, #0]
    75b8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    75ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    75be:	f023 0301 	bic.w	r3, r3, #1
    75c2:	4619      	mov	r1, r3
    75c4:	6878      	ldr	r0, [r7, #4]
    75c6:	4b16      	ldr	r3, [pc, #88]	; (7620 <_spi_load_regs_slave+0x98>)
    75c8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    75ca:	683b      	ldr	r3, [r7, #0]
    75cc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    75ce:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    75d2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    75d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    75da:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    75de:	4619      	mov	r1, r3
    75e0:	6878      	ldr	r0, [r7, #4]
    75e2:	4b10      	ldr	r3, [pc, #64]	; (7624 <_spi_load_regs_slave+0x9c>)
    75e4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    75e6:	683b      	ldr	r3, [r7, #0]
    75e8:	689b      	ldr	r3, [r3, #8]
    75ea:	4619      	mov	r1, r3
    75ec:	6878      	ldr	r0, [r7, #4]
    75ee:	4b0e      	ldr	r3, [pc, #56]	; (7628 <_spi_load_regs_slave+0xa0>)
    75f0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    75f2:	683b      	ldr	r3, [r7, #0]
    75f4:	7b5b      	ldrb	r3, [r3, #13]
    75f6:	4619      	mov	r1, r3
    75f8:	6878      	ldr	r0, [r7, #4]
    75fa:	4b0c      	ldr	r3, [pc, #48]	; (762c <_spi_load_regs_slave+0xa4>)
    75fc:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    75fe:	bf00      	nop
    7600:	f04f 31ff 	mov.w	r1, #4294967295
    7604:	6878      	ldr	r0, [r7, #4]
    7606:	4b0a      	ldr	r3, [pc, #40]	; (7630 <_spi_load_regs_slave+0xa8>)
    7608:	4798      	blx	r3
    760a:	4603      	mov	r3, r0
    760c:	2b00      	cmp	r3, #0
    760e:	d1f7      	bne.n	7600 <_spi_load_regs_slave+0x78>
		;
}
    7610:	bf00      	nop
    7612:	3708      	adds	r7, #8
    7614:	46bd      	mov	sp, r7
    7616:	bd80      	pop	{r7, pc}
    7618:	00014220 	.word	0x00014220
    761c:	000040f5 	.word	0x000040f5
    7620:	000068dd 	.word	0x000068dd
    7624:	000069f5 	.word	0x000069f5
    7628:	00006ad9 	.word	0x00006ad9
    762c:	00006b6d 	.word	0x00006b6d
    7630:	00006679 	.word	0x00006679

00007634 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7634:	b580      	push	{r7, lr}
    7636:	b084      	sub	sp, #16
    7638:	af00      	add	r7, sp, #0
    763a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	4618      	mov	r0, r3
    7640:	4b11      	ldr	r3, [pc, #68]	; (7688 <_spi_get_regs+0x54>)
    7642:	4798      	blx	r3
    7644:	4603      	mov	r3, r0
    7646:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7648:	2300      	movs	r3, #0
    764a:	73fb      	strb	r3, [r7, #15]
    764c:	e014      	b.n	7678 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    764e:	7bfa      	ldrb	r2, [r7, #15]
    7650:	490e      	ldr	r1, [pc, #56]	; (768c <_spi_get_regs+0x58>)
    7652:	4613      	mov	r3, r2
    7654:	011b      	lsls	r3, r3, #4
    7656:	4413      	add	r3, r2
    7658:	440b      	add	r3, r1
    765a:	3310      	adds	r3, #16
    765c:	781b      	ldrb	r3, [r3, #0]
    765e:	7bba      	ldrb	r2, [r7, #14]
    7660:	429a      	cmp	r2, r3
    7662:	d106      	bne.n	7672 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7664:	7bfa      	ldrb	r2, [r7, #15]
    7666:	4613      	mov	r3, r2
    7668:	011b      	lsls	r3, r3, #4
    766a:	4413      	add	r3, r2
    766c:	4a07      	ldr	r2, [pc, #28]	; (768c <_spi_get_regs+0x58>)
    766e:	4413      	add	r3, r2
    7670:	e006      	b.n	7680 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7672:	7bfb      	ldrb	r3, [r7, #15]
    7674:	3301      	adds	r3, #1
    7676:	73fb      	strb	r3, [r7, #15]
    7678:	7bfb      	ldrb	r3, [r7, #15]
    767a:	2b01      	cmp	r3, #1
    767c:	d9e7      	bls.n	764e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    767e:	2300      	movs	r3, #0
}
    7680:	4618      	mov	r0, r3
    7682:	3710      	adds	r7, #16
    7684:	46bd      	mov	sp, r7
    7686:	bd80      	pop	{r7, pc}
    7688:	00006c25 	.word	0x00006c25
    768c:	0001425c 	.word	0x0001425c

00007690 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7690:	b580      	push	{r7, lr}
    7692:	b084      	sub	sp, #16
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
    7698:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    769a:	683b      	ldr	r3, [r7, #0]
    769c:	4618      	mov	r0, r3
    769e:	4b35      	ldr	r3, [pc, #212]	; (7774 <_spi_m_sync_init+0xe4>)
    76a0:	4798      	blx	r3
    76a2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	2b00      	cmp	r3, #0
    76a8:	d004      	beq.n	76b4 <_spi_m_sync_init+0x24>
    76aa:	683b      	ldr	r3, [r7, #0]
    76ac:	2b00      	cmp	r3, #0
    76ae:	d001      	beq.n	76b4 <_spi_m_sync_init+0x24>
    76b0:	2301      	movs	r3, #1
    76b2:	e000      	b.n	76b6 <_spi_m_sync_init+0x26>
    76b4:	2300      	movs	r3, #0
    76b6:	f003 0301 	and.w	r3, r3, #1
    76ba:	b2db      	uxtb	r3, r3
    76bc:	f640 123f 	movw	r2, #2367	; 0x93f
    76c0:	492d      	ldr	r1, [pc, #180]	; (7778 <_spi_m_sync_init+0xe8>)
    76c2:	4618      	mov	r0, r3
    76c4:	4b2d      	ldr	r3, [pc, #180]	; (777c <_spi_m_sync_init+0xec>)
    76c6:	4798      	blx	r3

	if (regs == NULL) {
    76c8:	68fb      	ldr	r3, [r7, #12]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d102      	bne.n	76d4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    76ce:	f06f 030c 	mvn.w	r3, #12
    76d2:	e04a      	b.n	776a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    76d4:	2101      	movs	r1, #1
    76d6:	6838      	ldr	r0, [r7, #0]
    76d8:	4b29      	ldr	r3, [pc, #164]	; (7780 <_spi_m_sync_init+0xf0>)
    76da:	4798      	blx	r3
    76dc:	4603      	mov	r3, r0
    76de:	f083 0301 	eor.w	r3, r3, #1
    76e2:	b2db      	uxtb	r3, r3
    76e4:	2b00      	cmp	r3, #0
    76e6:	d019      	beq.n	771c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    76e8:	68fb      	ldr	r3, [r7, #12]
    76ea:	681b      	ldr	r3, [r3, #0]
    76ec:	f003 031c 	and.w	r3, r3, #28
    76f0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    76f2:	2102      	movs	r1, #2
    76f4:	6838      	ldr	r0, [r7, #0]
    76f6:	4b23      	ldr	r3, [pc, #140]	; (7784 <_spi_m_sync_init+0xf4>)
    76f8:	4798      	blx	r3
    76fa:	4603      	mov	r3, r0
    76fc:	2b00      	cmp	r3, #0
    76fe:	d006      	beq.n	770e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7700:	6838      	ldr	r0, [r7, #0]
    7702:	4b21      	ldr	r3, [pc, #132]	; (7788 <_spi_m_sync_init+0xf8>)
    7704:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7706:	2102      	movs	r1, #2
    7708:	6838      	ldr	r0, [r7, #0]
    770a:	4b20      	ldr	r3, [pc, #128]	; (778c <_spi_m_sync_init+0xfc>)
    770c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    770e:	68bb      	ldr	r3, [r7, #8]
    7710:	f043 0301 	orr.w	r3, r3, #1
    7714:	4619      	mov	r1, r3
    7716:	6838      	ldr	r0, [r7, #0]
    7718:	4b1d      	ldr	r3, [pc, #116]	; (7790 <_spi_m_sync_init+0x100>)
    771a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    771c:	2101      	movs	r1, #1
    771e:	6838      	ldr	r0, [r7, #0]
    7720:	4b1a      	ldr	r3, [pc, #104]	; (778c <_spi_m_sync_init+0xfc>)
    7722:	4798      	blx	r3

	dev->prvt = hw;
    7724:	687b      	ldr	r3, [r7, #4]
    7726:	683a      	ldr	r2, [r7, #0]
    7728:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    772a:	68fb      	ldr	r3, [r7, #12]
    772c:	681b      	ldr	r3, [r3, #0]
    772e:	f003 031c 	and.w	r3, r3, #28
    7732:	2b08      	cmp	r3, #8
    7734:	d104      	bne.n	7740 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7736:	68f9      	ldr	r1, [r7, #12]
    7738:	6838      	ldr	r0, [r7, #0]
    773a:	4b16      	ldr	r3, [pc, #88]	; (7794 <_spi_m_sync_init+0x104>)
    773c:	4798      	blx	r3
    773e:	e003      	b.n	7748 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7740:	68f9      	ldr	r1, [r7, #12]
    7742:	6838      	ldr	r0, [r7, #0]
    7744:	4b14      	ldr	r3, [pc, #80]	; (7798 <_spi_m_sync_init+0x108>)
    7746:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7748:	68fb      	ldr	r3, [r7, #12]
    774a:	685b      	ldr	r3, [r3, #4]
    774c:	f003 0307 	and.w	r3, r3, #7
    7750:	2b00      	cmp	r3, #0
    7752:	d101      	bne.n	7758 <_spi_m_sync_init+0xc8>
    7754:	2201      	movs	r2, #1
    7756:	e000      	b.n	775a <_spi_m_sync_init+0xca>
    7758:	2202      	movs	r2, #2
    775a:	687b      	ldr	r3, [r7, #4]
    775c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    775e:	68fb      	ldr	r3, [r7, #12]
    7760:	89db      	ldrh	r3, [r3, #14]
    7762:	b29a      	uxth	r2, r3
    7764:	687b      	ldr	r3, [r7, #4]
    7766:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7768:	2300      	movs	r3, #0
}
    776a:	4618      	mov	r0, r3
    776c:	3710      	adds	r7, #16
    776e:	46bd      	mov	sp, r7
    7770:	bd80      	pop	{r7, pc}
    7772:	bf00      	nop
    7774:	00007635 	.word	0x00007635
    7778:	00014220 	.word	0x00014220
    777c:	000040f5 	.word	0x000040f5
    7780:	00006679 	.word	0x00006679
    7784:	000068ad 	.word	0x000068ad
    7788:	00006885 	.word	0x00006885
    778c:	00006655 	.word	0x00006655
    7790:	000068dd 	.word	0x000068dd
    7794:	00007589 	.word	0x00007589
    7798:	000074f5 	.word	0x000074f5

0000779c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    779c:	b580      	push	{r7, lr}
    779e:	b082      	sub	sp, #8
    77a0:	af00      	add	r7, sp, #0
    77a2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	2b00      	cmp	r3, #0
    77a8:	d005      	beq.n	77b6 <_spi_m_sync_enable+0x1a>
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	681b      	ldr	r3, [r3, #0]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d001      	beq.n	77b6 <_spi_m_sync_enable+0x1a>
    77b2:	2301      	movs	r3, #1
    77b4:	e000      	b.n	77b8 <_spi_m_sync_enable+0x1c>
    77b6:	2300      	movs	r3, #0
    77b8:	f003 0301 	and.w	r3, r3, #1
    77bc:	b2db      	uxtb	r3, r3
    77be:	f640 129e 	movw	r2, #2462	; 0x99e
    77c2:	4907      	ldr	r1, [pc, #28]	; (77e0 <_spi_m_sync_enable+0x44>)
    77c4:	4618      	mov	r0, r3
    77c6:	4b07      	ldr	r3, [pc, #28]	; (77e4 <_spi_m_sync_enable+0x48>)
    77c8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    77ca:	687b      	ldr	r3, [r7, #4]
    77cc:	681b      	ldr	r3, [r3, #0]
    77ce:	4618      	mov	r0, r3
    77d0:	4b05      	ldr	r3, [pc, #20]	; (77e8 <_spi_m_sync_enable+0x4c>)
    77d2:	4798      	blx	r3
    77d4:	4603      	mov	r3, r0
}
    77d6:	4618      	mov	r0, r3
    77d8:	3708      	adds	r7, #8
    77da:	46bd      	mov	sp, r7
    77dc:	bd80      	pop	{r7, pc}
    77de:	bf00      	nop
    77e0:	00014220 	.word	0x00014220
    77e4:	000040f5 	.word	0x000040f5
    77e8:	0000748d 	.word	0x0000748d

000077ec <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    77ec:	b580      	push	{r7, lr}
    77ee:	b082      	sub	sp, #8
    77f0:	af00      	add	r7, sp, #0
    77f2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	2b00      	cmp	r3, #0
    77f8:	d005      	beq.n	7806 <_spi_m_sync_disable+0x1a>
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	681b      	ldr	r3, [r3, #0]
    77fe:	2b00      	cmp	r3, #0
    7800:	d001      	beq.n	7806 <_spi_m_sync_disable+0x1a>
    7802:	2301      	movs	r3, #1
    7804:	e000      	b.n	7808 <_spi_m_sync_disable+0x1c>
    7806:	2300      	movs	r3, #0
    7808:	f003 0301 	and.w	r3, r3, #1
    780c:	b2db      	uxtb	r3, r3
    780e:	f640 12ba 	movw	r2, #2490	; 0x9ba
    7812:	4907      	ldr	r1, [pc, #28]	; (7830 <_spi_m_sync_disable+0x44>)
    7814:	4618      	mov	r0, r3
    7816:	4b07      	ldr	r3, [pc, #28]	; (7834 <_spi_m_sync_disable+0x48>)
    7818:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    781a:	687b      	ldr	r3, [r7, #4]
    781c:	681b      	ldr	r3, [r3, #0]
    781e:	4618      	mov	r0, r3
    7820:	4b05      	ldr	r3, [pc, #20]	; (7838 <_spi_m_sync_disable+0x4c>)
    7822:	4798      	blx	r3
    7824:	4603      	mov	r3, r0
}
    7826:	4618      	mov	r0, r3
    7828:	3708      	adds	r7, #8
    782a:	46bd      	mov	sp, r7
    782c:	bd80      	pop	{r7, pc}
    782e:	bf00      	nop
    7830:	00014220 	.word	0x00014220
    7834:	000040f5 	.word	0x000040f5
    7838:	000074c1 	.word	0x000074c1

0000783c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    783c:	b580      	push	{r7, lr}
    783e:	b082      	sub	sp, #8
    7840:	af00      	add	r7, sp, #0
    7842:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7844:	bf00      	nop
    7846:	2103      	movs	r1, #3
    7848:	6878      	ldr	r0, [r7, #4]
    784a:	4b06      	ldr	r3, [pc, #24]	; (7864 <_spi_wait_bus_idle+0x28>)
    784c:	4798      	blx	r3
    784e:	4603      	mov	r3, r0
    7850:	2b00      	cmp	r3, #0
    7852:	d0f8      	beq.n	7846 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7854:	2103      	movs	r1, #3
    7856:	6878      	ldr	r0, [r7, #4]
    7858:	4b03      	ldr	r3, [pc, #12]	; (7868 <_spi_wait_bus_idle+0x2c>)
    785a:	4798      	blx	r3
}
    785c:	bf00      	nop
    785e:	3708      	adds	r7, #8
    7860:	46bd      	mov	sp, r7
    7862:	bd80      	pop	{r7, pc}
    7864:	000066ef 	.word	0x000066ef
    7868:	00006731 	.word	0x00006731

0000786c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    786c:	b580      	push	{r7, lr}
    786e:	b086      	sub	sp, #24
    7870:	af00      	add	r7, sp, #0
    7872:	60f8      	str	r0, [r7, #12]
    7874:	60b9      	str	r1, [r7, #8]
    7876:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7878:	68bb      	ldr	r3, [r7, #8]
    787a:	f003 0304 	and.w	r3, r3, #4
    787e:	2b00      	cmp	r3, #0
    7880:	d101      	bne.n	7886 <_spi_rx_check_and_receive+0x1a>
		return false;
    7882:	2300      	movs	r3, #0
    7884:	e022      	b.n	78cc <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7886:	68f8      	ldr	r0, [r7, #12]
    7888:	4b12      	ldr	r3, [pc, #72]	; (78d4 <_spi_rx_check_and_receive+0x68>)
    788a:	4798      	blx	r3
    788c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	685b      	ldr	r3, [r3, #4]
    7892:	2b00      	cmp	r3, #0
    7894:	d014      	beq.n	78c0 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7896:	687b      	ldr	r3, [r7, #4]
    7898:	685b      	ldr	r3, [r3, #4]
    789a:	1c59      	adds	r1, r3, #1
    789c:	687a      	ldr	r2, [r7, #4]
    789e:	6051      	str	r1, [r2, #4]
    78a0:	697a      	ldr	r2, [r7, #20]
    78a2:	b2d2      	uxtb	r2, r2
    78a4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    78a6:	687b      	ldr	r3, [r7, #4]
    78a8:	7c1b      	ldrb	r3, [r3, #16]
    78aa:	2b01      	cmp	r3, #1
    78ac:	d908      	bls.n	78c0 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	685b      	ldr	r3, [r3, #4]
    78b2:	1c59      	adds	r1, r3, #1
    78b4:	687a      	ldr	r2, [r7, #4]
    78b6:	6051      	str	r1, [r2, #4]
    78b8:	697a      	ldr	r2, [r7, #20]
    78ba:	0a12      	lsrs	r2, r2, #8
    78bc:	b2d2      	uxtb	r2, r2
    78be:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    78c0:	687b      	ldr	r3, [r7, #4]
    78c2:	68db      	ldr	r3, [r3, #12]
    78c4:	1c5a      	adds	r2, r3, #1
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	60da      	str	r2, [r3, #12]

	return true;
    78ca:	2301      	movs	r3, #1
}
    78cc:	4618      	mov	r0, r3
    78ce:	3718      	adds	r7, #24
    78d0:	46bd      	mov	sp, r7
    78d2:	bd80      	pop	{r7, pc}
    78d4:	00006b55 	.word	0x00006b55

000078d8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b086      	sub	sp, #24
    78dc:	af00      	add	r7, sp, #0
    78de:	60f8      	str	r0, [r7, #12]
    78e0:	60b9      	str	r1, [r7, #8]
    78e2:	607a      	str	r2, [r7, #4]
    78e4:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    78e6:	68bb      	ldr	r3, [r7, #8]
    78e8:	f003 0301 	and.w	r3, r3, #1
    78ec:	2b00      	cmp	r3, #0
    78ee:	d028      	beq.n	7942 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	681b      	ldr	r3, [r3, #0]
    78f4:	2b00      	cmp	r3, #0
    78f6:	d018      	beq.n	792a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	681b      	ldr	r3, [r3, #0]
    78fc:	1c59      	adds	r1, r3, #1
    78fe:	687a      	ldr	r2, [r7, #4]
    7900:	6011      	str	r1, [r2, #0]
    7902:	781b      	ldrb	r3, [r3, #0]
    7904:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7906:	687b      	ldr	r3, [r7, #4]
    7908:	7c1b      	ldrb	r3, [r3, #16]
    790a:	2b01      	cmp	r3, #1
    790c:	d90f      	bls.n	792e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    790e:	687b      	ldr	r3, [r7, #4]
    7910:	681b      	ldr	r3, [r3, #0]
    7912:	781b      	ldrb	r3, [r3, #0]
    7914:	021b      	lsls	r3, r3, #8
    7916:	461a      	mov	r2, r3
    7918:	697b      	ldr	r3, [r7, #20]
    791a:	4313      	orrs	r3, r2
    791c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	681b      	ldr	r3, [r3, #0]
    7922:	1c5a      	adds	r2, r3, #1
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	601a      	str	r2, [r3, #0]
    7928:	e001      	b.n	792e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    792a:	887b      	ldrh	r3, [r7, #2]
    792c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	689b      	ldr	r3, [r3, #8]
    7932:	1c5a      	adds	r2, r3, #1
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7938:	6979      	ldr	r1, [r7, #20]
    793a:	68f8      	ldr	r0, [r7, #12]
    793c:	4b03      	ldr	r3, [pc, #12]	; (794c <_spi_tx_check_and_send+0x74>)
    793e:	4798      	blx	r3
    7940:	e000      	b.n	7944 <_spi_tx_check_and_send+0x6c>
		return;
    7942:	bf00      	nop
}
    7944:	3718      	adds	r7, #24
    7946:	46bd      	mov	sp, r7
    7948:	bd80      	pop	{r7, pc}
    794a:	bf00      	nop
    794c:	00006b39 	.word	0x00006b39

00007950 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7950:	b580      	push	{r7, lr}
    7952:	b082      	sub	sp, #8
    7954:	af00      	add	r7, sp, #0
    7956:	6078      	str	r0, [r7, #4]
    7958:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7960:	2b00      	cmp	r3, #0
    7962:	d00b      	beq.n	797c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7964:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7968:	6838      	ldr	r0, [r7, #0]
    796a:	4b07      	ldr	r3, [pc, #28]	; (7988 <_spi_err_check+0x38>)
    796c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    796e:	2180      	movs	r1, #128	; 0x80
    7970:	6838      	ldr	r0, [r7, #0]
    7972:	4b06      	ldr	r3, [pc, #24]	; (798c <_spi_err_check+0x3c>)
    7974:	4798      	blx	r3
		return ERR_OVERFLOW;
    7976:	f06f 0312 	mvn.w	r3, #18
    797a:	e000      	b.n	797e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    797c:	2300      	movs	r3, #0
}
    797e:	4618      	mov	r0, r3
    7980:	3708      	adds	r7, #8
    7982:	46bd      	mov	sp, r7
    7984:	bd80      	pop	{r7, pc}
    7986:	bf00      	nop
    7988:	00006b8d 	.word	0x00006b8d
    798c:	00006731 	.word	0x00006731

00007990 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7990:	b590      	push	{r4, r7, lr}
    7992:	b08b      	sub	sp, #44	; 0x2c
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
    7998:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	681b      	ldr	r3, [r3, #0]
    799e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    79a0:	2300      	movs	r3, #0
    79a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    79a4:	683b      	ldr	r3, [r7, #0]
    79a6:	681b      	ldr	r3, [r3, #0]
    79a8:	60bb      	str	r3, [r7, #8]
    79aa:	683b      	ldr	r3, [r7, #0]
    79ac:	685b      	ldr	r3, [r3, #4]
    79ae:	60fb      	str	r3, [r7, #12]
    79b0:	2300      	movs	r3, #0
    79b2:	613b      	str	r3, [r7, #16]
    79b4:	2300      	movs	r3, #0
    79b6:	617b      	str	r3, [r7, #20]
    79b8:	687b      	ldr	r3, [r7, #4]
    79ba:	791b      	ldrb	r3, [r3, #4]
    79bc:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d004      	beq.n	79ce <_spi_m_sync_trans+0x3e>
    79c4:	6a3b      	ldr	r3, [r7, #32]
    79c6:	2b00      	cmp	r3, #0
    79c8:	d001      	beq.n	79ce <_spi_m_sync_trans+0x3e>
    79ca:	2301      	movs	r3, #1
    79cc:	e000      	b.n	79d0 <_spi_m_sync_trans+0x40>
    79ce:	2300      	movs	r3, #0
    79d0:	f003 0301 	and.w	r3, r3, #1
    79d4:	b2db      	uxtb	r3, r3
    79d6:	f640 22a3 	movw	r2, #2723	; 0xaa3
    79da:	492b      	ldr	r1, [pc, #172]	; (7a88 <_spi_m_sync_trans+0xf8>)
    79dc:	4618      	mov	r0, r3
    79de:	4b2b      	ldr	r3, [pc, #172]	; (7a8c <_spi_m_sync_trans+0xfc>)
    79e0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    79e2:	2107      	movs	r1, #7
    79e4:	6a38      	ldr	r0, [r7, #32]
    79e6:	4b2a      	ldr	r3, [pc, #168]	; (7a90 <_spi_m_sync_trans+0x100>)
    79e8:	4798      	blx	r3
    79ea:	4603      	mov	r3, r0
    79ec:	2b00      	cmp	r3, #0
    79ee:	d002      	beq.n	79f6 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    79f0:	f06f 0303 	mvn.w	r3, #3
    79f4:	e043      	b.n	7a7e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    79f6:	6a38      	ldr	r0, [r7, #32]
    79f8:	4b26      	ldr	r3, [pc, #152]	; (7a94 <_spi_m_sync_trans+0x104>)
    79fa:	4798      	blx	r3
    79fc:	4603      	mov	r3, r0
    79fe:	f083 0301 	eor.w	r3, r3, #1
    7a02:	b2db      	uxtb	r3, r3
    7a04:	2b00      	cmp	r3, #0
    7a06:	d002      	beq.n	7a0e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7a08:	f06f 0313 	mvn.w	r3, #19
    7a0c:	e037      	b.n	7a7e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7a0e:	6a38      	ldr	r0, [r7, #32]
    7a10:	4b21      	ldr	r3, [pc, #132]	; (7a98 <_spi_m_sync_trans+0x108>)
    7a12:	4798      	blx	r3
    7a14:	4603      	mov	r3, r0
    7a16:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7a18:	f107 0308 	add.w	r3, r7, #8
    7a1c:	461a      	mov	r2, r3
    7a1e:	69f9      	ldr	r1, [r7, #28]
    7a20:	6a38      	ldr	r0, [r7, #32]
    7a22:	4b1e      	ldr	r3, [pc, #120]	; (7a9c <_spi_m_sync_trans+0x10c>)
    7a24:	4798      	blx	r3
    7a26:	4603      	mov	r3, r0
    7a28:	f083 0301 	eor.w	r3, r3, #1
    7a2c:	b2db      	uxtb	r3, r3
    7a2e:	2b00      	cmp	r3, #0
    7a30:	d00b      	beq.n	7a4a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7a32:	697a      	ldr	r2, [r7, #20]
    7a34:	693b      	ldr	r3, [r7, #16]
    7a36:	429a      	cmp	r2, r3
    7a38:	d307      	bcc.n	7a4a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	88db      	ldrh	r3, [r3, #6]
    7a3e:	f107 0208 	add.w	r2, r7, #8
    7a42:	69f9      	ldr	r1, [r7, #28]
    7a44:	6a38      	ldr	r0, [r7, #32]
    7a46:	4c16      	ldr	r4, [pc, #88]	; (7aa0 <_spi_m_sync_trans+0x110>)
    7a48:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7a4a:	6a39      	ldr	r1, [r7, #32]
    7a4c:	69f8      	ldr	r0, [r7, #28]
    7a4e:	4b15      	ldr	r3, [pc, #84]	; (7aa4 <_spi_m_sync_trans+0x114>)
    7a50:	4798      	blx	r3
    7a52:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a56:	2b00      	cmp	r3, #0
    7a58:	db0c      	blt.n	7a74 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7a5a:	693a      	ldr	r2, [r7, #16]
    7a5c:	683b      	ldr	r3, [r7, #0]
    7a5e:	689b      	ldr	r3, [r3, #8]
    7a60:	429a      	cmp	r2, r3
    7a62:	d3d4      	bcc.n	7a0e <_spi_m_sync_trans+0x7e>
    7a64:	697a      	ldr	r2, [r7, #20]
    7a66:	683b      	ldr	r3, [r7, #0]
    7a68:	689b      	ldr	r3, [r3, #8]
    7a6a:	429a      	cmp	r2, r3
    7a6c:	d3cf      	bcc.n	7a0e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7a6e:	693b      	ldr	r3, [r7, #16]
    7a70:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7a72:	e000      	b.n	7a76 <_spi_m_sync_trans+0xe6>
			break;
    7a74:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7a76:	6a38      	ldr	r0, [r7, #32]
    7a78:	4b0b      	ldr	r3, [pc, #44]	; (7aa8 <_spi_m_sync_trans+0x118>)
    7a7a:	4798      	blx	r3

	return rc;
    7a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7a7e:	4618      	mov	r0, r3
    7a80:	372c      	adds	r7, #44	; 0x2c
    7a82:	46bd      	mov	sp, r7
    7a84:	bd90      	pop	{r4, r7, pc}
    7a86:	bf00      	nop
    7a88:	00014220 	.word	0x00014220
    7a8c:	000040f5 	.word	0x000040f5
    7a90:	00006679 	.word	0x00006679
    7a94:	0000684d 	.word	0x0000684d
    7a98:	00006717 	.word	0x00006717
    7a9c:	0000786d 	.word	0x0000786d
    7aa0:	000078d9 	.word	0x000078d9
    7aa4:	00007951 	.word	0x00007951
    7aa8:	0000783d 	.word	0x0000783d

00007aac <__NVIC_EnableIRQ>:
{
    7aac:	b480      	push	{r7}
    7aae:	b083      	sub	sp, #12
    7ab0:	af00      	add	r7, sp, #0
    7ab2:	4603      	mov	r3, r0
    7ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7aba:	2b00      	cmp	r3, #0
    7abc:	db0b      	blt.n	7ad6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7abe:	4909      	ldr	r1, [pc, #36]	; (7ae4 <__NVIC_EnableIRQ+0x38>)
    7ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ac4:	095b      	lsrs	r3, r3, #5
    7ac6:	88fa      	ldrh	r2, [r7, #6]
    7ac8:	f002 021f 	and.w	r2, r2, #31
    7acc:	2001      	movs	r0, #1
    7ace:	fa00 f202 	lsl.w	r2, r0, r2
    7ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ad6:	bf00      	nop
    7ad8:	370c      	adds	r7, #12
    7ada:	46bd      	mov	sp, r7
    7adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae0:	4770      	bx	lr
    7ae2:	bf00      	nop
    7ae4:	e000e100 	.word	0xe000e100

00007ae8 <__NVIC_DisableIRQ>:
{
    7ae8:	b480      	push	{r7}
    7aea:	b083      	sub	sp, #12
    7aec:	af00      	add	r7, sp, #0
    7aee:	4603      	mov	r3, r0
    7af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7af6:	2b00      	cmp	r3, #0
    7af8:	db10      	blt.n	7b1c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7afa:	490b      	ldr	r1, [pc, #44]	; (7b28 <__NVIC_DisableIRQ+0x40>)
    7afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b00:	095b      	lsrs	r3, r3, #5
    7b02:	88fa      	ldrh	r2, [r7, #6]
    7b04:	f002 021f 	and.w	r2, r2, #31
    7b08:	2001      	movs	r0, #1
    7b0a:	fa00 f202 	lsl.w	r2, r0, r2
    7b0e:	3320      	adds	r3, #32
    7b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b18:	f3bf 8f6f 	isb	sy
}
    7b1c:	bf00      	nop
    7b1e:	370c      	adds	r7, #12
    7b20:	46bd      	mov	sp, r7
    7b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b26:	4770      	bx	lr
    7b28:	e000e100 	.word	0xe000e100

00007b2c <__NVIC_ClearPendingIRQ>:
{
    7b2c:	b480      	push	{r7}
    7b2e:	b083      	sub	sp, #12
    7b30:	af00      	add	r7, sp, #0
    7b32:	4603      	mov	r3, r0
    7b34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	db0c      	blt.n	7b58 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b3e:	4909      	ldr	r1, [pc, #36]	; (7b64 <__NVIC_ClearPendingIRQ+0x38>)
    7b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b44:	095b      	lsrs	r3, r3, #5
    7b46:	88fa      	ldrh	r2, [r7, #6]
    7b48:	f002 021f 	and.w	r2, r2, #31
    7b4c:	2001      	movs	r0, #1
    7b4e:	fa00 f202 	lsl.w	r2, r0, r2
    7b52:	3360      	adds	r3, #96	; 0x60
    7b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b58:	bf00      	nop
    7b5a:	370c      	adds	r7, #12
    7b5c:	46bd      	mov	sp, r7
    7b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b62:	4770      	bx	lr
    7b64:	e000e100 	.word	0xe000e100

00007b68 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b68:	b480      	push	{r7}
    7b6a:	b083      	sub	sp, #12
    7b6c:	af00      	add	r7, sp, #0
    7b6e:	6078      	str	r0, [r7, #4]
    7b70:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7b72:	bf00      	nop
    7b74:	687b      	ldr	r3, [r7, #4]
    7b76:	689a      	ldr	r2, [r3, #8]
    7b78:	683b      	ldr	r3, [r7, #0]
    7b7a:	4013      	ands	r3, r2
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d1f9      	bne.n	7b74 <hri_tcc_wait_for_sync+0xc>
	};
}
    7b80:	bf00      	nop
    7b82:	370c      	adds	r7, #12
    7b84:	46bd      	mov	sp, r7
    7b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b8a:	4770      	bx	lr

00007b8c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b8c:	b480      	push	{r7}
    7b8e:	b083      	sub	sp, #12
    7b90:	af00      	add	r7, sp, #0
    7b92:	6078      	str	r0, [r7, #4]
    7b94:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	689a      	ldr	r2, [r3, #8]
    7b9a:	683b      	ldr	r3, [r7, #0]
    7b9c:	4013      	ands	r3, r2
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	bf14      	ite	ne
    7ba2:	2301      	movne	r3, #1
    7ba4:	2300      	moveq	r3, #0
    7ba6:	b2db      	uxtb	r3, r3
}
    7ba8:	4618      	mov	r0, r3
    7baa:	370c      	adds	r7, #12
    7bac:	46bd      	mov	sp, r7
    7bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bb2:	4770      	bx	lr

00007bb4 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7bb4:	b480      	push	{r7}
    7bb6:	b083      	sub	sp, #12
    7bb8:	af00      	add	r7, sp, #0
    7bba:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7bbc:	687b      	ldr	r3, [r7, #4]
    7bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7bc0:	f003 0301 	and.w	r3, r3, #1
    7bc4:	2b00      	cmp	r3, #0
    7bc6:	bf14      	ite	ne
    7bc8:	2301      	movne	r3, #1
    7bca:	2300      	moveq	r3, #0
    7bcc:	b2db      	uxtb	r3, r3
}
    7bce:	4618      	mov	r0, r3
    7bd0:	370c      	adds	r7, #12
    7bd2:	46bd      	mov	sp, r7
    7bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bd8:	4770      	bx	lr

00007bda <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7bda:	b480      	push	{r7}
    7bdc:	b083      	sub	sp, #12
    7bde:	af00      	add	r7, sp, #0
    7be0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7be2:	687b      	ldr	r3, [r7, #4]
    7be4:	2201      	movs	r2, #1
    7be6:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7be8:	bf00      	nop
    7bea:	370c      	adds	r7, #12
    7bec:	46bd      	mov	sp, r7
    7bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf2:	4770      	bx	lr

00007bf4 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7bf4:	b480      	push	{r7}
    7bf6:	b083      	sub	sp, #12
    7bf8:	af00      	add	r7, sp, #0
    7bfa:	6078      	str	r0, [r7, #4]
    7bfc:	460b      	mov	r3, r1
    7bfe:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7c00:	687b      	ldr	r3, [r7, #4]
    7c02:	78fa      	ldrb	r2, [r7, #3]
    7c04:	715a      	strb	r2, [r3, #5]
}
    7c06:	bf00      	nop
    7c08:	370c      	adds	r7, #12
    7c0a:	46bd      	mov	sp, r7
    7c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c10:	4770      	bx	lr

00007c12 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7c12:	b480      	push	{r7}
    7c14:	b083      	sub	sp, #12
    7c16:	af00      	add	r7, sp, #0
    7c18:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	2201      	movs	r2, #1
    7c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7c20:	bf00      	nop
    7c22:	370c      	adds	r7, #12
    7c24:	46bd      	mov	sp, r7
    7c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c2a:	4770      	bx	lr

00007c2c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7c2c:	b580      	push	{r7, lr}
    7c2e:	b082      	sub	sp, #8
    7c30:	af00      	add	r7, sp, #0
    7c32:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7c34:	687b      	ldr	r3, [r7, #4]
    7c36:	681b      	ldr	r3, [r3, #0]
    7c38:	f043 0201 	orr.w	r2, r3, #1
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7c40:	2101      	movs	r1, #1
    7c42:	6878      	ldr	r0, [r7, #4]
    7c44:	4b02      	ldr	r3, [pc, #8]	; (7c50 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7c46:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c48:	bf00      	nop
    7c4a:	3708      	adds	r7, #8
    7c4c:	46bd      	mov	sp, r7
    7c4e:	bd80      	pop	{r7, pc}
    7c50:	00007b69 	.word	0x00007b69

00007c54 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7c54:	b580      	push	{r7, lr}
    7c56:	b082      	sub	sp, #8
    7c58:	af00      	add	r7, sp, #0
    7c5a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	681b      	ldr	r3, [r3, #0]
    7c60:	f043 0202 	orr.w	r2, r3, #2
    7c64:	687b      	ldr	r3, [r7, #4]
    7c66:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c68:	2103      	movs	r1, #3
    7c6a:	6878      	ldr	r0, [r7, #4]
    7c6c:	4b02      	ldr	r3, [pc, #8]	; (7c78 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7c6e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c70:	bf00      	nop
    7c72:	3708      	adds	r7, #8
    7c74:	46bd      	mov	sp, r7
    7c76:	bd80      	pop	{r7, pc}
    7c78:	00007b69 	.word	0x00007b69

00007c7c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7c7c:	b580      	push	{r7, lr}
    7c7e:	b084      	sub	sp, #16
    7c80:	af00      	add	r7, sp, #0
    7c82:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c84:	2103      	movs	r1, #3
    7c86:	6878      	ldr	r0, [r7, #4]
    7c88:	4b09      	ldr	r3, [pc, #36]	; (7cb0 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7c8a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	681b      	ldr	r3, [r3, #0]
    7c90:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7c92:	68fb      	ldr	r3, [r7, #12]
    7c94:	085b      	lsrs	r3, r3, #1
    7c96:	f003 0301 	and.w	r3, r3, #1
    7c9a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c9c:	68fb      	ldr	r3, [r7, #12]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	bf14      	ite	ne
    7ca2:	2301      	movne	r3, #1
    7ca4:	2300      	moveq	r3, #0
    7ca6:	b2db      	uxtb	r3, r3
}
    7ca8:	4618      	mov	r0, r3
    7caa:	3710      	adds	r7, #16
    7cac:	46bd      	mov	sp, r7
    7cae:	bd80      	pop	{r7, pc}
    7cb0:	00007b69 	.word	0x00007b69

00007cb4 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7cb4:	b580      	push	{r7, lr}
    7cb6:	b082      	sub	sp, #8
    7cb8:	af00      	add	r7, sp, #0
    7cba:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	681b      	ldr	r3, [r3, #0]
    7cc0:	f023 0202 	bic.w	r2, r3, #2
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7cc8:	2103      	movs	r1, #3
    7cca:	6878      	ldr	r0, [r7, #4]
    7ccc:	4b02      	ldr	r3, [pc, #8]	; (7cd8 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7cce:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cd0:	bf00      	nop
    7cd2:	3708      	adds	r7, #8
    7cd4:	46bd      	mov	sp, r7
    7cd6:	bd80      	pop	{r7, pc}
    7cd8:	00007b69 	.word	0x00007b69

00007cdc <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7cdc:	b580      	push	{r7, lr}
    7cde:	b084      	sub	sp, #16
    7ce0:	af00      	add	r7, sp, #0
    7ce2:	6078      	str	r0, [r7, #4]
    7ce4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7ce6:	2103      	movs	r1, #3
    7ce8:	6878      	ldr	r0, [r7, #4]
    7cea:	4b07      	ldr	r3, [pc, #28]	; (7d08 <hri_tcc_get_CTRLA_reg+0x2c>)
    7cec:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	681b      	ldr	r3, [r3, #0]
    7cf2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7cf4:	68fa      	ldr	r2, [r7, #12]
    7cf6:	683b      	ldr	r3, [r7, #0]
    7cf8:	4013      	ands	r3, r2
    7cfa:	60fb      	str	r3, [r7, #12]
	return tmp;
    7cfc:	68fb      	ldr	r3, [r7, #12]
}
    7cfe:	4618      	mov	r0, r3
    7d00:	3710      	adds	r7, #16
    7d02:	46bd      	mov	sp, r7
    7d04:	bd80      	pop	{r7, pc}
    7d06:	bf00      	nop
    7d08:	00007b69 	.word	0x00007b69

00007d0c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7d0c:	b580      	push	{r7, lr}
    7d0e:	b082      	sub	sp, #8
    7d10:	af00      	add	r7, sp, #0
    7d12:	6078      	str	r0, [r7, #4]
    7d14:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	683a      	ldr	r2, [r7, #0]
    7d1a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7d1c:	2103      	movs	r1, #3
    7d1e:	6878      	ldr	r0, [r7, #4]
    7d20:	4b02      	ldr	r3, [pc, #8]	; (7d2c <hri_tcc_write_CTRLA_reg+0x20>)
    7d22:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d24:	bf00      	nop
    7d26:	3708      	adds	r7, #8
    7d28:	46bd      	mov	sp, r7
    7d2a:	bd80      	pop	{r7, pc}
    7d2c:	00007b69 	.word	0x00007b69

00007d30 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7d30:	b480      	push	{r7}
    7d32:	b083      	sub	sp, #12
    7d34:	af00      	add	r7, sp, #0
    7d36:	6078      	str	r0, [r7, #4]
    7d38:	460b      	mov	r3, r1
    7d3a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	78fa      	ldrb	r2, [r7, #3]
    7d40:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d42:	bf00      	nop
    7d44:	370c      	adds	r7, #12
    7d46:	46bd      	mov	sp, r7
    7d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d4c:	4770      	bx	lr

00007d4e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7d4e:	b480      	push	{r7}
    7d50:	b083      	sub	sp, #12
    7d52:	af00      	add	r7, sp, #0
    7d54:	6078      	str	r0, [r7, #4]
    7d56:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	683a      	ldr	r2, [r7, #0]
    7d5c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d5e:	bf00      	nop
    7d60:	370c      	adds	r7, #12
    7d62:	46bd      	mov	sp, r7
    7d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d68:	4770      	bx	lr
	...

00007d6c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7d6c:	b580      	push	{r7, lr}
    7d6e:	b082      	sub	sp, #8
    7d70:	af00      	add	r7, sp, #0
    7d72:	6078      	str	r0, [r7, #4]
    7d74:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7d76:	687b      	ldr	r3, [r7, #4]
    7d78:	683a      	ldr	r2, [r7, #0]
    7d7a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d7c:	2180      	movs	r1, #128	; 0x80
    7d7e:	6878      	ldr	r0, [r7, #4]
    7d80:	4b02      	ldr	r3, [pc, #8]	; (7d8c <hri_tcc_write_PER_reg+0x20>)
    7d82:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d84:	bf00      	nop
    7d86:	3708      	adds	r7, #8
    7d88:	46bd      	mov	sp, r7
    7d8a:	bd80      	pop	{r7, pc}
    7d8c:	00007b69 	.word	0x00007b69

00007d90 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7d90:	b580      	push	{r7, lr}
    7d92:	b082      	sub	sp, #8
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d98:	2180      	movs	r1, #128	; 0x80
    7d9a:	6878      	ldr	r0, [r7, #4]
    7d9c:	4b03      	ldr	r3, [pc, #12]	; (7dac <hri_tcc_read_PER_reg+0x1c>)
    7d9e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7da4:	4618      	mov	r0, r3
    7da6:	3708      	adds	r7, #8
    7da8:	46bd      	mov	sp, r7
    7daa:	bd80      	pop	{r7, pc}
    7dac:	00007b69 	.word	0x00007b69

00007db0 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7db0:	b480      	push	{r7}
    7db2:	b083      	sub	sp, #12
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
    7db8:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7dba:	687b      	ldr	r3, [r7, #4]
    7dbc:	4a0c      	ldr	r2, [pc, #48]	; (7df0 <_tcc_init_irq_param+0x40>)
    7dbe:	4293      	cmp	r3, r2
    7dc0:	d102      	bne.n	7dc8 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7dc2:	4a0c      	ldr	r2, [pc, #48]	; (7df4 <_tcc_init_irq_param+0x44>)
    7dc4:	683b      	ldr	r3, [r7, #0]
    7dc6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	4a0b      	ldr	r2, [pc, #44]	; (7df8 <_tcc_init_irq_param+0x48>)
    7dcc:	4293      	cmp	r3, r2
    7dce:	d102      	bne.n	7dd6 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7dd0:	4a0a      	ldr	r2, [pc, #40]	; (7dfc <_tcc_init_irq_param+0x4c>)
    7dd2:	683b      	ldr	r3, [r7, #0]
    7dd4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	4a09      	ldr	r2, [pc, #36]	; (7e00 <_tcc_init_irq_param+0x50>)
    7dda:	4293      	cmp	r3, r2
    7ddc:	d102      	bne.n	7de4 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    7dde:	4a09      	ldr	r2, [pc, #36]	; (7e04 <_tcc_init_irq_param+0x54>)
    7de0:	683b      	ldr	r3, [r7, #0]
    7de2:	6013      	str	r3, [r2, #0]
	}
}
    7de4:	bf00      	nop
    7de6:	370c      	adds	r7, #12
    7de8:	46bd      	mov	sp, r7
    7dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dee:	4770      	bx	lr
    7df0:	41016000 	.word	0x41016000
    7df4:	20000e78 	.word	0x20000e78
    7df8:	41018000 	.word	0x41018000
    7dfc:	20000e7c 	.word	0x20000e7c
    7e00:	42000c00 	.word	0x42000c00
    7e04:	20000e80 	.word	0x20000e80

00007e08 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7e08:	b580      	push	{r7, lr}
    7e0a:	b084      	sub	sp, #16
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
    7e10:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7e12:	6838      	ldr	r0, [r7, #0]
    7e14:	4b33      	ldr	r3, [pc, #204]	; (7ee4 <_tcc_timer_init+0xdc>)
    7e16:	4798      	blx	r3
    7e18:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7e1a:	68fb      	ldr	r3, [r7, #12]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d102      	bne.n	7e26 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7e20:	f06f 0309 	mvn.w	r3, #9
    7e24:	e05a      	b.n	7edc <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7e26:	687b      	ldr	r3, [r7, #4]
    7e28:	683a      	ldr	r2, [r7, #0]
    7e2a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7e2c:	2101      	movs	r1, #1
    7e2e:	6838      	ldr	r0, [r7, #0]
    7e30:	4b2d      	ldr	r3, [pc, #180]	; (7ee8 <_tcc_timer_init+0xe0>)
    7e32:	4798      	blx	r3
    7e34:	4603      	mov	r3, r0
    7e36:	f083 0301 	eor.w	r3, r3, #1
    7e3a:	b2db      	uxtb	r3, r3
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d011      	beq.n	7e64 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7e40:	2102      	movs	r1, #2
    7e42:	6838      	ldr	r0, [r7, #0]
    7e44:	4b29      	ldr	r3, [pc, #164]	; (7eec <_tcc_timer_init+0xe4>)
    7e46:	4798      	blx	r3
    7e48:	4603      	mov	r3, r0
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d006      	beq.n	7e5c <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7e4e:	6838      	ldr	r0, [r7, #0]
    7e50:	4b27      	ldr	r3, [pc, #156]	; (7ef0 <_tcc_timer_init+0xe8>)
    7e52:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7e54:	2102      	movs	r1, #2
    7e56:	6838      	ldr	r0, [r7, #0]
    7e58:	4b26      	ldr	r3, [pc, #152]	; (7ef4 <_tcc_timer_init+0xec>)
    7e5a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7e5c:	2101      	movs	r1, #1
    7e5e:	6838      	ldr	r0, [r7, #0]
    7e60:	4b25      	ldr	r3, [pc, #148]	; (7ef8 <_tcc_timer_init+0xf0>)
    7e62:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7e64:	2101      	movs	r1, #1
    7e66:	6838      	ldr	r0, [r7, #0]
    7e68:	4b22      	ldr	r3, [pc, #136]	; (7ef4 <_tcc_timer_init+0xec>)
    7e6a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	689b      	ldr	r3, [r3, #8]
    7e70:	4619      	mov	r1, r3
    7e72:	6838      	ldr	r0, [r7, #0]
    7e74:	4b20      	ldr	r3, [pc, #128]	; (7ef8 <_tcc_timer_init+0xf0>)
    7e76:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	7b1b      	ldrb	r3, [r3, #12]
    7e7c:	4619      	mov	r1, r3
    7e7e:	6838      	ldr	r0, [r7, #0]
    7e80:	4b1e      	ldr	r3, [pc, #120]	; (7efc <_tcc_timer_init+0xf4>)
    7e82:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7e84:	68fb      	ldr	r3, [r7, #12]
    7e86:	7b5b      	ldrb	r3, [r3, #13]
    7e88:	4619      	mov	r1, r3
    7e8a:	6838      	ldr	r0, [r7, #0]
    7e8c:	4b1c      	ldr	r3, [pc, #112]	; (7f00 <_tcc_timer_init+0xf8>)
    7e8e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7e90:	68fb      	ldr	r3, [r7, #12]
    7e92:	691b      	ldr	r3, [r3, #16]
    7e94:	4619      	mov	r1, r3
    7e96:	6838      	ldr	r0, [r7, #0]
    7e98:	4b1a      	ldr	r3, [pc, #104]	; (7f04 <_tcc_timer_init+0xfc>)
    7e9a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7e9c:	68fb      	ldr	r3, [r7, #12]
    7e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ea0:	4619      	mov	r1, r3
    7ea2:	6838      	ldr	r0, [r7, #0]
    7ea4:	4b18      	ldr	r3, [pc, #96]	; (7f08 <_tcc_timer_init+0x100>)
    7ea6:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7ea8:	6838      	ldr	r0, [r7, #0]
    7eaa:	4b18      	ldr	r3, [pc, #96]	; (7f0c <_tcc_timer_init+0x104>)
    7eac:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7eae:	6879      	ldr	r1, [r7, #4]
    7eb0:	6838      	ldr	r0, [r7, #0]
    7eb2:	4b17      	ldr	r3, [pc, #92]	; (7f10 <_tcc_timer_init+0x108>)
    7eb4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ebc:	4618      	mov	r0, r3
    7ebe:	4b15      	ldr	r3, [pc, #84]	; (7f14 <_tcc_timer_init+0x10c>)
    7ec0:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7ec2:	68fb      	ldr	r3, [r7, #12]
    7ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ec8:	4618      	mov	r0, r3
    7eca:	4b13      	ldr	r3, [pc, #76]	; (7f18 <_tcc_timer_init+0x110>)
    7ecc:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7ece:	68fb      	ldr	r3, [r7, #12]
    7ed0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ed4:	4618      	mov	r0, r3
    7ed6:	4b11      	ldr	r3, [pc, #68]	; (7f1c <_tcc_timer_init+0x114>)
    7ed8:	4798      	blx	r3

	return ERR_NONE;
    7eda:	2300      	movs	r3, #0
}
    7edc:	4618      	mov	r0, r3
    7ede:	3710      	adds	r7, #16
    7ee0:	46bd      	mov	sp, r7
    7ee2:	bd80      	pop	{r7, pc}
    7ee4:	000080ed 	.word	0x000080ed
    7ee8:	00007b8d 	.word	0x00007b8d
    7eec:	00007cdd 	.word	0x00007cdd
    7ef0:	00007cb5 	.word	0x00007cb5
    7ef4:	00007b69 	.word	0x00007b69
    7ef8:	00007d0d 	.word	0x00007d0d
    7efc:	00007bf5 	.word	0x00007bf5
    7f00:	00007d31 	.word	0x00007d31
    7f04:	00007d4f 	.word	0x00007d4f
    7f08:	00007d6d 	.word	0x00007d6d
    7f0c:	00007c13 	.word	0x00007c13
    7f10:	00007db1 	.word	0x00007db1
    7f14:	00007ae9 	.word	0x00007ae9
    7f18:	00007b2d 	.word	0x00007b2d
    7f1c:	00007aad 	.word	0x00007aad

00007f20 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7f20:	b580      	push	{r7, lr}
    7f22:	b084      	sub	sp, #16
    7f24:	af00      	add	r7, sp, #0
    7f26:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7f28:	687b      	ldr	r3, [r7, #4]
    7f2a:	68db      	ldr	r3, [r3, #12]
    7f2c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f2e:	68f8      	ldr	r0, [r7, #12]
    7f30:	4b0a      	ldr	r3, [pc, #40]	; (7f5c <_tcc_timer_deinit+0x3c>)
    7f32:	4798      	blx	r3
    7f34:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7f36:	68bb      	ldr	r3, [r7, #8]
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d00b      	beq.n	7f54 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7f3c:	68bb      	ldr	r3, [r7, #8]
    7f3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7f42:	4618      	mov	r0, r3
    7f44:	4b06      	ldr	r3, [pc, #24]	; (7f60 <_tcc_timer_deinit+0x40>)
    7f46:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7f48:	68f8      	ldr	r0, [r7, #12]
    7f4a:	4b06      	ldr	r3, [pc, #24]	; (7f64 <_tcc_timer_deinit+0x44>)
    7f4c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7f4e:	68f8      	ldr	r0, [r7, #12]
    7f50:	4b05      	ldr	r3, [pc, #20]	; (7f68 <_tcc_timer_deinit+0x48>)
    7f52:	4798      	blx	r3
	}
}
    7f54:	bf00      	nop
    7f56:	3710      	adds	r7, #16
    7f58:	46bd      	mov	sp, r7
    7f5a:	bd80      	pop	{r7, pc}
    7f5c:	000080ed 	.word	0x000080ed
    7f60:	00007ae9 	.word	0x00007ae9
    7f64:	00007cb5 	.word	0x00007cb5
    7f68:	00007c2d 	.word	0x00007c2d

00007f6c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7f6c:	b580      	push	{r7, lr}
    7f6e:	b082      	sub	sp, #8
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	68db      	ldr	r3, [r3, #12]
    7f78:	4618      	mov	r0, r3
    7f7a:	4b03      	ldr	r3, [pc, #12]	; (7f88 <_tcc_timer_start+0x1c>)
    7f7c:	4798      	blx	r3
}
    7f7e:	bf00      	nop
    7f80:	3708      	adds	r7, #8
    7f82:	46bd      	mov	sp, r7
    7f84:	bd80      	pop	{r7, pc}
    7f86:	bf00      	nop
    7f88:	00007c55 	.word	0x00007c55

00007f8c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b082      	sub	sp, #8
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	68db      	ldr	r3, [r3, #12]
    7f98:	4618      	mov	r0, r3
    7f9a:	4b03      	ldr	r3, [pc, #12]	; (7fa8 <_tcc_timer_stop+0x1c>)
    7f9c:	4798      	blx	r3
}
    7f9e:	bf00      	nop
    7fa0:	3708      	adds	r7, #8
    7fa2:	46bd      	mov	sp, r7
    7fa4:	bd80      	pop	{r7, pc}
    7fa6:	bf00      	nop
    7fa8:	00007cb5 	.word	0x00007cb5

00007fac <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b082      	sub	sp, #8
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
    7fb4:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	68db      	ldr	r3, [r3, #12]
    7fba:	6839      	ldr	r1, [r7, #0]
    7fbc:	4618      	mov	r0, r3
    7fbe:	4b03      	ldr	r3, [pc, #12]	; (7fcc <_tcc_timer_set_period+0x20>)
    7fc0:	4798      	blx	r3
}
    7fc2:	bf00      	nop
    7fc4:	3708      	adds	r7, #8
    7fc6:	46bd      	mov	sp, r7
    7fc8:	bd80      	pop	{r7, pc}
    7fca:	bf00      	nop
    7fcc:	00007d6d 	.word	0x00007d6d

00007fd0 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7fd0:	b580      	push	{r7, lr}
    7fd2:	b082      	sub	sp, #8
    7fd4:	af00      	add	r7, sp, #0
    7fd6:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7fd8:	687b      	ldr	r3, [r7, #4]
    7fda:	68db      	ldr	r3, [r3, #12]
    7fdc:	4618      	mov	r0, r3
    7fde:	4b03      	ldr	r3, [pc, #12]	; (7fec <_tcc_timer_get_period+0x1c>)
    7fe0:	4798      	blx	r3
    7fe2:	4603      	mov	r3, r0
}
    7fe4:	4618      	mov	r0, r3
    7fe6:	3708      	adds	r7, #8
    7fe8:	46bd      	mov	sp, r7
    7fea:	bd80      	pop	{r7, pc}
    7fec:	00007d91 	.word	0x00007d91

00007ff0 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7ff0:	b580      	push	{r7, lr}
    7ff2:	b082      	sub	sp, #8
    7ff4:	af00      	add	r7, sp, #0
    7ff6:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	68db      	ldr	r3, [r3, #12]
    7ffc:	4618      	mov	r0, r3
    7ffe:	4b03      	ldr	r3, [pc, #12]	; (800c <_tcc_timer_is_started+0x1c>)
    8000:	4798      	blx	r3
    8002:	4603      	mov	r3, r0
}
    8004:	4618      	mov	r0, r3
    8006:	3708      	adds	r7, #8
    8008:	46bd      	mov	sp, r7
    800a:	bd80      	pop	{r7, pc}
    800c:	00007c7d 	.word	0x00007c7d

00008010 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    8010:	b480      	push	{r7}
    8012:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8014:	4b02      	ldr	r3, [pc, #8]	; (8020 <_tcc_get_timer+0x10>)
}
    8016:	4618      	mov	r0, r3
    8018:	46bd      	mov	sp, r7
    801a:	f85d 7b04 	ldr.w	r7, [sp], #4
    801e:	4770      	bx	lr
    8020:	200000f0 	.word	0x200000f0

00008024 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8024:	b580      	push	{r7, lr}
    8026:	b084      	sub	sp, #16
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	68db      	ldr	r3, [r3, #12]
    8030:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8032:	68f8      	ldr	r0, [r7, #12]
    8034:	4b08      	ldr	r3, [pc, #32]	; (8058 <_tcc_timer_set_irq+0x34>)
    8036:	4798      	blx	r3
    8038:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    803a:	68bb      	ldr	r3, [r7, #8]
    803c:	2b00      	cmp	r3, #0
    803e:	d006      	beq.n	804e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8040:	68bb      	ldr	r3, [r7, #8]
    8042:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8046:	b2db      	uxtb	r3, r3
    8048:	4618      	mov	r0, r3
    804a:	4b04      	ldr	r3, [pc, #16]	; (805c <_tcc_timer_set_irq+0x38>)
    804c:	4798      	blx	r3
	}
}
    804e:	bf00      	nop
    8050:	3710      	adds	r7, #16
    8052:	46bd      	mov	sp, r7
    8054:	bd80      	pop	{r7, pc}
    8056:	bf00      	nop
    8058:	000080ed 	.word	0x000080ed
    805c:	0000493d 	.word	0x0000493d

00008060 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8060:	b580      	push	{r7, lr}
    8062:	b084      	sub	sp, #16
    8064:	af00      	add	r7, sp, #0
    8066:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	68db      	ldr	r3, [r3, #12]
    806c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    806e:	68f8      	ldr	r0, [r7, #12]
    8070:	4b07      	ldr	r3, [pc, #28]	; (8090 <tcc_interrupt_handler+0x30>)
    8072:	4798      	blx	r3
    8074:	4603      	mov	r3, r0
    8076:	2b00      	cmp	r3, #0
    8078:	d006      	beq.n	8088 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    807a:	68f8      	ldr	r0, [r7, #12]
    807c:	4b05      	ldr	r3, [pc, #20]	; (8094 <tcc_interrupt_handler+0x34>)
    807e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8080:	687b      	ldr	r3, [r7, #4]
    8082:	681b      	ldr	r3, [r3, #0]
    8084:	6878      	ldr	r0, [r7, #4]
    8086:	4798      	blx	r3
	}
}
    8088:	bf00      	nop
    808a:	3710      	adds	r7, #16
    808c:	46bd      	mov	sp, r7
    808e:	bd80      	pop	{r7, pc}
    8090:	00007bb5 	.word	0x00007bb5
    8094:	00007bdb 	.word	0x00007bdb

00008098 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    8098:	b580      	push	{r7, lr}
    809a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    809c:	4b03      	ldr	r3, [pc, #12]	; (80ac <TCC0_0_Handler+0x14>)
    809e:	681b      	ldr	r3, [r3, #0]
    80a0:	4618      	mov	r0, r3
    80a2:	4b03      	ldr	r3, [pc, #12]	; (80b0 <TCC0_0_Handler+0x18>)
    80a4:	4798      	blx	r3
}
    80a6:	bf00      	nop
    80a8:	bd80      	pop	{r7, pc}
    80aa:	bf00      	nop
    80ac:	20000e78 	.word	0x20000e78
    80b0:	00008061 	.word	0x00008061

000080b4 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    80b4:	b580      	push	{r7, lr}
    80b6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    80b8:	4b03      	ldr	r3, [pc, #12]	; (80c8 <TCC1_0_Handler+0x14>)
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	4618      	mov	r0, r3
    80be:	4b03      	ldr	r3, [pc, #12]	; (80cc <TCC1_0_Handler+0x18>)
    80c0:	4798      	blx	r3
}
    80c2:	bf00      	nop
    80c4:	bd80      	pop	{r7, pc}
    80c6:	bf00      	nop
    80c8:	20000e7c 	.word	0x20000e7c
    80cc:	00008061 	.word	0x00008061

000080d0 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    80d0:	b580      	push	{r7, lr}
    80d2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    80d4:	4b03      	ldr	r3, [pc, #12]	; (80e4 <TCC2_0_Handler+0x14>)
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	4618      	mov	r0, r3
    80da:	4b03      	ldr	r3, [pc, #12]	; (80e8 <TCC2_0_Handler+0x18>)
    80dc:	4798      	blx	r3
}
    80de:	bf00      	nop
    80e0:	bd80      	pop	{r7, pc}
    80e2:	bf00      	nop
    80e4:	20000e80 	.word	0x20000e80
    80e8:	00008061 	.word	0x00008061

000080ec <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    80ec:	b480      	push	{r7}
    80ee:	b085      	sub	sp, #20
    80f0:	af00      	add	r7, sp, #0
    80f2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    80f4:	2300      	movs	r3, #0
    80f6:	73fb      	strb	r3, [r7, #15]
    80f8:	e015      	b.n	8126 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    80fa:	7bfa      	ldrb	r2, [r7, #15]
    80fc:	490f      	ldr	r1, [pc, #60]	; (813c <_get_tcc_cfg+0x50>)
    80fe:	4613      	mov	r3, r2
    8100:	005b      	lsls	r3, r3, #1
    8102:	4413      	add	r3, r2
    8104:	011b      	lsls	r3, r3, #4
    8106:	440b      	add	r3, r1
    8108:	681a      	ldr	r2, [r3, #0]
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	429a      	cmp	r2, r3
    810e:	d107      	bne.n	8120 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8110:	7bfa      	ldrb	r2, [r7, #15]
    8112:	4613      	mov	r3, r2
    8114:	005b      	lsls	r3, r3, #1
    8116:	4413      	add	r3, r2
    8118:	011b      	lsls	r3, r3, #4
    811a:	4a08      	ldr	r2, [pc, #32]	; (813c <_get_tcc_cfg+0x50>)
    811c:	4413      	add	r3, r2
    811e:	e006      	b.n	812e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8120:	7bfb      	ldrb	r3, [r7, #15]
    8122:	3301      	adds	r3, #1
    8124:	73fb      	strb	r3, [r7, #15]
    8126:	7bfb      	ldrb	r3, [r7, #15]
    8128:	2b02      	cmp	r3, #2
    812a:	d9e6      	bls.n	80fa <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    812c:	2300      	movs	r3, #0
}
    812e:	4618      	mov	r0, r3
    8130:	3714      	adds	r7, #20
    8132:	46bd      	mov	sp, r7
    8134:	f85d 7b04 	ldr.w	r7, [sp], #4
    8138:	4770      	bx	lr
    813a:	bf00      	nop
    813c:	20000060 	.word	0x20000060

00008140 <__NVIC_EnableIRQ>:
{
    8140:	b480      	push	{r7}
    8142:	b083      	sub	sp, #12
    8144:	af00      	add	r7, sp, #0
    8146:	4603      	mov	r3, r0
    8148:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    814a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    814e:	2b00      	cmp	r3, #0
    8150:	db0b      	blt.n	816a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8152:	4909      	ldr	r1, [pc, #36]	; (8178 <__NVIC_EnableIRQ+0x38>)
    8154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8158:	095b      	lsrs	r3, r3, #5
    815a:	88fa      	ldrh	r2, [r7, #6]
    815c:	f002 021f 	and.w	r2, r2, #31
    8160:	2001      	movs	r0, #1
    8162:	fa00 f202 	lsl.w	r2, r0, r2
    8166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    816a:	bf00      	nop
    816c:	370c      	adds	r7, #12
    816e:	46bd      	mov	sp, r7
    8170:	f85d 7b04 	ldr.w	r7, [sp], #4
    8174:	4770      	bx	lr
    8176:	bf00      	nop
    8178:	e000e100 	.word	0xe000e100

0000817c <__NVIC_DisableIRQ>:
{
    817c:	b480      	push	{r7}
    817e:	b083      	sub	sp, #12
    8180:	af00      	add	r7, sp, #0
    8182:	4603      	mov	r3, r0
    8184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    818a:	2b00      	cmp	r3, #0
    818c:	db10      	blt.n	81b0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    818e:	490b      	ldr	r1, [pc, #44]	; (81bc <__NVIC_DisableIRQ+0x40>)
    8190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8194:	095b      	lsrs	r3, r3, #5
    8196:	88fa      	ldrh	r2, [r7, #6]
    8198:	f002 021f 	and.w	r2, r2, #31
    819c:	2001      	movs	r0, #1
    819e:	fa00 f202 	lsl.w	r2, r0, r2
    81a2:	3320      	adds	r3, #32
    81a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    81a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    81ac:	f3bf 8f6f 	isb	sy
}
    81b0:	bf00      	nop
    81b2:	370c      	adds	r7, #12
    81b4:	46bd      	mov	sp, r7
    81b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ba:	4770      	bx	lr
    81bc:	e000e100 	.word	0xe000e100

000081c0 <__NVIC_ClearPendingIRQ>:
{
    81c0:	b480      	push	{r7}
    81c2:	b083      	sub	sp, #12
    81c4:	af00      	add	r7, sp, #0
    81c6:	4603      	mov	r3, r0
    81c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    81ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81ce:	2b00      	cmp	r3, #0
    81d0:	db0c      	blt.n	81ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81d2:	4909      	ldr	r1, [pc, #36]	; (81f8 <__NVIC_ClearPendingIRQ+0x38>)
    81d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81d8:	095b      	lsrs	r3, r3, #5
    81da:	88fa      	ldrh	r2, [r7, #6]
    81dc:	f002 021f 	and.w	r2, r2, #31
    81e0:	2001      	movs	r0, #1
    81e2:	fa00 f202 	lsl.w	r2, r0, r2
    81e6:	3360      	adds	r3, #96	; 0x60
    81e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81ec:	bf00      	nop
    81ee:	370c      	adds	r7, #12
    81f0:	46bd      	mov	sp, r7
    81f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f6:	4770      	bx	lr
    81f8:	e000e100 	.word	0xe000e100

000081fc <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    81fc:	b480      	push	{r7}
    81fe:	b083      	sub	sp, #12
    8200:	af00      	add	r7, sp, #0
    8202:	6078      	str	r0, [r7, #4]
    8204:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8206:	bf00      	nop
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	691a      	ldr	r2, [r3, #16]
    820c:	683b      	ldr	r3, [r7, #0]
    820e:	4013      	ands	r3, r2
    8210:	2b00      	cmp	r3, #0
    8212:	d1f9      	bne.n	8208 <hri_tc_wait_for_sync+0xc>
	};
}
    8214:	bf00      	nop
    8216:	370c      	adds	r7, #12
    8218:	46bd      	mov	sp, r7
    821a:	f85d 7b04 	ldr.w	r7, [sp], #4
    821e:	4770      	bx	lr

00008220 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8220:	b480      	push	{r7}
    8222:	b083      	sub	sp, #12
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
    8228:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    822a:	687b      	ldr	r3, [r7, #4]
    822c:	691a      	ldr	r2, [r3, #16]
    822e:	683b      	ldr	r3, [r7, #0]
    8230:	4013      	ands	r3, r2
    8232:	2b00      	cmp	r3, #0
    8234:	bf14      	ite	ne
    8236:	2301      	movne	r3, #1
    8238:	2300      	moveq	r3, #0
    823a:	b2db      	uxtb	r3, r3
}
    823c:	4618      	mov	r0, r3
    823e:	370c      	adds	r7, #12
    8240:	46bd      	mov	sp, r7
    8242:	f85d 7b04 	ldr.w	r7, [sp], #4
    8246:	4770      	bx	lr

00008248 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8248:	b480      	push	{r7}
    824a:	b083      	sub	sp, #12
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	7a9b      	ldrb	r3, [r3, #10]
    8254:	b2db      	uxtb	r3, r3
    8256:	f003 0301 	and.w	r3, r3, #1
    825a:	2b00      	cmp	r3, #0
    825c:	bf14      	ite	ne
    825e:	2301      	movne	r3, #1
    8260:	2300      	moveq	r3, #0
    8262:	b2db      	uxtb	r3, r3
}
    8264:	4618      	mov	r0, r3
    8266:	370c      	adds	r7, #12
    8268:	46bd      	mov	sp, r7
    826a:	f85d 7b04 	ldr.w	r7, [sp], #4
    826e:	4770      	bx	lr

00008270 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8270:	b480      	push	{r7}
    8272:	b083      	sub	sp, #12
    8274:	af00      	add	r7, sp, #0
    8276:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8278:	687b      	ldr	r3, [r7, #4]
    827a:	2201      	movs	r2, #1
    827c:	729a      	strb	r2, [r3, #10]
}
    827e:	bf00      	nop
    8280:	370c      	adds	r7, #12
    8282:	46bd      	mov	sp, r7
    8284:	f85d 7b04 	ldr.w	r7, [sp], #4
    8288:	4770      	bx	lr

0000828a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    828a:	b480      	push	{r7}
    828c:	b083      	sub	sp, #12
    828e:	af00      	add	r7, sp, #0
    8290:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    8292:	687b      	ldr	r3, [r7, #4]
    8294:	2202      	movs	r2, #2
    8296:	729a      	strb	r2, [r3, #10]
}
    8298:	bf00      	nop
    829a:	370c      	adds	r7, #12
    829c:	46bd      	mov	sp, r7
    829e:	f85d 7b04 	ldr.w	r7, [sp], #4
    82a2:	4770      	bx	lr

000082a4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    82a4:	b480      	push	{r7}
    82a6:	b083      	sub	sp, #12
    82a8:	af00      	add	r7, sp, #0
    82aa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	2201      	movs	r2, #1
    82b0:	725a      	strb	r2, [r3, #9]
}
    82b2:	bf00      	nop
    82b4:	370c      	adds	r7, #12
    82b6:	46bd      	mov	sp, r7
    82b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    82bc:	4770      	bx	lr

000082be <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    82be:	b480      	push	{r7}
    82c0:	b083      	sub	sp, #12
    82c2:	af00      	add	r7, sp, #0
    82c4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	7a5b      	ldrb	r3, [r3, #9]
    82ca:	b2db      	uxtb	r3, r3
    82cc:	085b      	lsrs	r3, r3, #1
    82ce:	f003 0301 	and.w	r3, r3, #1
    82d2:	2b00      	cmp	r3, #0
    82d4:	bf14      	ite	ne
    82d6:	2301      	movne	r3, #1
    82d8:	2300      	moveq	r3, #0
    82da:	b2db      	uxtb	r3, r3
}
    82dc:	4618      	mov	r0, r3
    82de:	370c      	adds	r7, #12
    82e0:	46bd      	mov	sp, r7
    82e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e6:	4770      	bx	lr

000082e8 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    82e8:	b580      	push	{r7, lr}
    82ea:	b082      	sub	sp, #8
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	681b      	ldr	r3, [r3, #0]
    82f4:	f043 0201 	orr.w	r2, r3, #1
    82f8:	687b      	ldr	r3, [r7, #4]
    82fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    82fc:	2101      	movs	r1, #1
    82fe:	6878      	ldr	r0, [r7, #4]
    8300:	4b02      	ldr	r3, [pc, #8]	; (830c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8302:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8304:	bf00      	nop
    8306:	3708      	adds	r7, #8
    8308:	46bd      	mov	sp, r7
    830a:	bd80      	pop	{r7, pc}
    830c:	000081fd 	.word	0x000081fd

00008310 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8310:	b580      	push	{r7, lr}
    8312:	b082      	sub	sp, #8
    8314:	af00      	add	r7, sp, #0
    8316:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	f043 0202 	orr.w	r2, r3, #2
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8324:	2103      	movs	r1, #3
    8326:	6878      	ldr	r0, [r7, #4]
    8328:	4b02      	ldr	r3, [pc, #8]	; (8334 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    832a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    832c:	bf00      	nop
    832e:	3708      	adds	r7, #8
    8330:	46bd      	mov	sp, r7
    8332:	bd80      	pop	{r7, pc}
    8334:	000081fd 	.word	0x000081fd

00008338 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8338:	b580      	push	{r7, lr}
    833a:	b084      	sub	sp, #16
    833c:	af00      	add	r7, sp, #0
    833e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8340:	2103      	movs	r1, #3
    8342:	6878      	ldr	r0, [r7, #4]
    8344:	4b09      	ldr	r3, [pc, #36]	; (836c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8346:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8348:	687b      	ldr	r3, [r7, #4]
    834a:	681b      	ldr	r3, [r3, #0]
    834c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    834e:	68fb      	ldr	r3, [r7, #12]
    8350:	085b      	lsrs	r3, r3, #1
    8352:	f003 0301 	and.w	r3, r3, #1
    8356:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8358:	68fb      	ldr	r3, [r7, #12]
    835a:	2b00      	cmp	r3, #0
    835c:	bf14      	ite	ne
    835e:	2301      	movne	r3, #1
    8360:	2300      	moveq	r3, #0
    8362:	b2db      	uxtb	r3, r3
}
    8364:	4618      	mov	r0, r3
    8366:	3710      	adds	r7, #16
    8368:	46bd      	mov	sp, r7
    836a:	bd80      	pop	{r7, pc}
    836c:	000081fd 	.word	0x000081fd

00008370 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8370:	b580      	push	{r7, lr}
    8372:	b082      	sub	sp, #8
    8374:	af00      	add	r7, sp, #0
    8376:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	681b      	ldr	r3, [r3, #0]
    837c:	f023 0202 	bic.w	r2, r3, #2
    8380:	687b      	ldr	r3, [r7, #4]
    8382:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8384:	2103      	movs	r1, #3
    8386:	6878      	ldr	r0, [r7, #4]
    8388:	4b02      	ldr	r3, [pc, #8]	; (8394 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    838a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    838c:	bf00      	nop
    838e:	3708      	adds	r7, #8
    8390:	46bd      	mov	sp, r7
    8392:	bd80      	pop	{r7, pc}
    8394:	000081fd 	.word	0x000081fd

00008398 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    8398:	b480      	push	{r7}
    839a:	b085      	sub	sp, #20
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    83a6:	68fb      	ldr	r3, [r7, #12]
    83a8:	089b      	lsrs	r3, r3, #2
    83aa:	f003 0303 	and.w	r3, r3, #3
    83ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    83b0:	68fb      	ldr	r3, [r7, #12]
}
    83b2:	4618      	mov	r0, r3
    83b4:	3714      	adds	r7, #20
    83b6:	46bd      	mov	sp, r7
    83b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83bc:	4770      	bx	lr
	...

000083c0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    83c0:	b580      	push	{r7, lr}
    83c2:	b084      	sub	sp, #16
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
    83c8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    83ca:	2103      	movs	r1, #3
    83cc:	6878      	ldr	r0, [r7, #4]
    83ce:	4b07      	ldr	r3, [pc, #28]	; (83ec <hri_tc_get_CTRLA_reg+0x2c>)
    83d0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83d2:	687b      	ldr	r3, [r7, #4]
    83d4:	681b      	ldr	r3, [r3, #0]
    83d6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    83d8:	68fa      	ldr	r2, [r7, #12]
    83da:	683b      	ldr	r3, [r7, #0]
    83dc:	4013      	ands	r3, r2
    83de:	60fb      	str	r3, [r7, #12]
	return tmp;
    83e0:	68fb      	ldr	r3, [r7, #12]
}
    83e2:	4618      	mov	r0, r3
    83e4:	3710      	adds	r7, #16
    83e6:	46bd      	mov	sp, r7
    83e8:	bd80      	pop	{r7, pc}
    83ea:	bf00      	nop
    83ec:	000081fd 	.word	0x000081fd

000083f0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    83f0:	b580      	push	{r7, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	af00      	add	r7, sp, #0
    83f6:	6078      	str	r0, [r7, #4]
    83f8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    83fa:	687b      	ldr	r3, [r7, #4]
    83fc:	683a      	ldr	r2, [r7, #0]
    83fe:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8400:	2103      	movs	r1, #3
    8402:	6878      	ldr	r0, [r7, #4]
    8404:	4b02      	ldr	r3, [pc, #8]	; (8410 <hri_tc_write_CTRLA_reg+0x20>)
    8406:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8408:	bf00      	nop
    840a:	3708      	adds	r7, #8
    840c:	46bd      	mov	sp, r7
    840e:	bd80      	pop	{r7, pc}
    8410:	000081fd 	.word	0x000081fd

00008414 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8414:	b480      	push	{r7}
    8416:	b083      	sub	sp, #12
    8418:	af00      	add	r7, sp, #0
    841a:	6078      	str	r0, [r7, #4]
    841c:	460b      	mov	r3, r1
    841e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	887a      	ldrh	r2, [r7, #2]
    8424:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8426:	bf00      	nop
    8428:	370c      	adds	r7, #12
    842a:	46bd      	mov	sp, r7
    842c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8430:	4770      	bx	lr

00008432 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8432:	b480      	push	{r7}
    8434:	b083      	sub	sp, #12
    8436:	af00      	add	r7, sp, #0
    8438:	6078      	str	r0, [r7, #4]
    843a:	460b      	mov	r3, r1
    843c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    843e:	687b      	ldr	r3, [r7, #4]
    8440:	78fa      	ldrb	r2, [r7, #3]
    8442:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8444:	bf00      	nop
    8446:	370c      	adds	r7, #12
    8448:	46bd      	mov	sp, r7
    844a:	f85d 7b04 	ldr.w	r7, [sp], #4
    844e:	4770      	bx	lr

00008450 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8450:	b480      	push	{r7}
    8452:	b083      	sub	sp, #12
    8454:	af00      	add	r7, sp, #0
    8456:	6078      	str	r0, [r7, #4]
    8458:	460b      	mov	r3, r1
    845a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    845c:	687b      	ldr	r3, [r7, #4]
    845e:	78fa      	ldrb	r2, [r7, #3]
    8460:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    8462:	bf00      	nop
    8464:	370c      	adds	r7, #12
    8466:	46bd      	mov	sp, r7
    8468:	f85d 7b04 	ldr.w	r7, [sp], #4
    846c:	4770      	bx	lr
	...

00008470 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8470:	b580      	push	{r7, lr}
    8472:	b082      	sub	sp, #8
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
    8478:	460b      	mov	r3, r1
    847a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	78fa      	ldrb	r2, [r7, #3]
    8480:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8482:	2120      	movs	r1, #32
    8484:	6878      	ldr	r0, [r7, #4]
    8486:	4b03      	ldr	r3, [pc, #12]	; (8494 <hri_tccount8_write_PER_reg+0x24>)
    8488:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    848a:	bf00      	nop
    848c:	3708      	adds	r7, #8
    848e:	46bd      	mov	sp, r7
    8490:	bd80      	pop	{r7, pc}
    8492:	bf00      	nop
    8494:	000081fd 	.word	0x000081fd

00008498 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    8498:	b580      	push	{r7, lr}
    849a:	b082      	sub	sp, #8
    849c:	af00      	add	r7, sp, #0
    849e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    84a0:	2120      	movs	r1, #32
    84a2:	6878      	ldr	r0, [r7, #4]
    84a4:	4b04      	ldr	r3, [pc, #16]	; (84b8 <hri_tccount8_read_PER_reg+0x20>)
    84a6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	7edb      	ldrb	r3, [r3, #27]
    84ac:	b2db      	uxtb	r3, r3
}
    84ae:	4618      	mov	r0, r3
    84b0:	3708      	adds	r7, #8
    84b2:	46bd      	mov	sp, r7
    84b4:	bd80      	pop	{r7, pc}
    84b6:	bf00      	nop
    84b8:	000081fd 	.word	0x000081fd

000084bc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    84bc:	b580      	push	{r7, lr}
    84be:	b082      	sub	sp, #8
    84c0:	af00      	add	r7, sp, #0
    84c2:	6078      	str	r0, [r7, #4]
    84c4:	460b      	mov	r3, r1
    84c6:	70fb      	strb	r3, [r7, #3]
    84c8:	4613      	mov	r3, r2
    84ca:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    84cc:	78fb      	ldrb	r3, [r7, #3]
    84ce:	687a      	ldr	r2, [r7, #4]
    84d0:	4413      	add	r3, r2
    84d2:	78ba      	ldrb	r2, [r7, #2]
    84d4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84d6:	21c0      	movs	r1, #192	; 0xc0
    84d8:	6878      	ldr	r0, [r7, #4]
    84da:	4b03      	ldr	r3, [pc, #12]	; (84e8 <hri_tccount8_write_CC_reg+0x2c>)
    84dc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84de:	bf00      	nop
    84e0:	3708      	adds	r7, #8
    84e2:	46bd      	mov	sp, r7
    84e4:	bd80      	pop	{r7, pc}
    84e6:	bf00      	nop
    84e8:	000081fd 	.word	0x000081fd

000084ec <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    84ec:	b580      	push	{r7, lr}
    84ee:	b082      	sub	sp, #8
    84f0:	af00      	add	r7, sp, #0
    84f2:	6078      	str	r0, [r7, #4]
    84f4:	460b      	mov	r3, r1
    84f6:	70fb      	strb	r3, [r7, #3]
    84f8:	4613      	mov	r3, r2
    84fa:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    84fc:	78fb      	ldrb	r3, [r7, #3]
    84fe:	687a      	ldr	r2, [r7, #4]
    8500:	330c      	adds	r3, #12
    8502:	005b      	lsls	r3, r3, #1
    8504:	4413      	add	r3, r2
    8506:	883a      	ldrh	r2, [r7, #0]
    8508:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    850a:	21c0      	movs	r1, #192	; 0xc0
    850c:	6878      	ldr	r0, [r7, #4]
    850e:	4b03      	ldr	r3, [pc, #12]	; (851c <hri_tccount16_write_CC_reg+0x30>)
    8510:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8512:	bf00      	nop
    8514:	3708      	adds	r7, #8
    8516:	46bd      	mov	sp, r7
    8518:	bd80      	pop	{r7, pc}
    851a:	bf00      	nop
    851c:	000081fd 	.word	0x000081fd

00008520 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8520:	b580      	push	{r7, lr}
    8522:	b082      	sub	sp, #8
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
    8528:	460b      	mov	r3, r1
    852a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    852c:	21c0      	movs	r1, #192	; 0xc0
    852e:	6878      	ldr	r0, [r7, #4]
    8530:	4b06      	ldr	r3, [pc, #24]	; (854c <hri_tccount16_read_CC_reg+0x2c>)
    8532:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8534:	78fb      	ldrb	r3, [r7, #3]
    8536:	687a      	ldr	r2, [r7, #4]
    8538:	330c      	adds	r3, #12
    853a:	005b      	lsls	r3, r3, #1
    853c:	4413      	add	r3, r2
    853e:	889b      	ldrh	r3, [r3, #4]
    8540:	b29b      	uxth	r3, r3
}
    8542:	4618      	mov	r0, r3
    8544:	3708      	adds	r7, #8
    8546:	46bd      	mov	sp, r7
    8548:	bd80      	pop	{r7, pc}
    854a:	bf00      	nop
    854c:	000081fd 	.word	0x000081fd

00008550 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8550:	b580      	push	{r7, lr}
    8552:	b084      	sub	sp, #16
    8554:	af00      	add	r7, sp, #0
    8556:	60f8      	str	r0, [r7, #12]
    8558:	460b      	mov	r3, r1
    855a:	607a      	str	r2, [r7, #4]
    855c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    855e:	7afb      	ldrb	r3, [r7, #11]
    8560:	68fa      	ldr	r2, [r7, #12]
    8562:	3306      	adds	r3, #6
    8564:	009b      	lsls	r3, r3, #2
    8566:	4413      	add	r3, r2
    8568:	687a      	ldr	r2, [r7, #4]
    856a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    856c:	21c0      	movs	r1, #192	; 0xc0
    856e:	68f8      	ldr	r0, [r7, #12]
    8570:	4b02      	ldr	r3, [pc, #8]	; (857c <hri_tccount32_write_CC_reg+0x2c>)
    8572:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8574:	bf00      	nop
    8576:	3710      	adds	r7, #16
    8578:	46bd      	mov	sp, r7
    857a:	bd80      	pop	{r7, pc}
    857c:	000081fd 	.word	0x000081fd

00008580 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8580:	b580      	push	{r7, lr}
    8582:	b082      	sub	sp, #8
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
    8588:	460b      	mov	r3, r1
    858a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    858c:	21c0      	movs	r1, #192	; 0xc0
    858e:	6878      	ldr	r0, [r7, #4]
    8590:	4b05      	ldr	r3, [pc, #20]	; (85a8 <hri_tccount32_read_CC_reg+0x28>)
    8592:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8594:	78fb      	ldrb	r3, [r7, #3]
    8596:	687a      	ldr	r2, [r7, #4]
    8598:	3306      	adds	r3, #6
    859a:	009b      	lsls	r3, r3, #2
    859c:	4413      	add	r3, r2
    859e:	685b      	ldr	r3, [r3, #4]
}
    85a0:	4618      	mov	r0, r3
    85a2:	3708      	adds	r7, #8
    85a4:	46bd      	mov	sp, r7
    85a6:	bd80      	pop	{r7, pc}
    85a8:	000081fd 	.word	0x000081fd

000085ac <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    85ac:	b580      	push	{r7, lr}
    85ae:	b084      	sub	sp, #16
    85b0:	af00      	add	r7, sp, #0
    85b2:	6078      	str	r0, [r7, #4]
    85b4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    85b6:	6838      	ldr	r0, [r7, #0]
    85b8:	4b93      	ldr	r3, [pc, #588]	; (8808 <_tc_timer_init+0x25c>)
    85ba:	4798      	blx	r3
    85bc:	4603      	mov	r3, r0
    85be:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    85c0:	687b      	ldr	r3, [r7, #4]
    85c2:	683a      	ldr	r2, [r7, #0]
    85c4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    85c6:	22a4      	movs	r2, #164	; 0xa4
    85c8:	4990      	ldr	r1, [pc, #576]	; (880c <_tc_timer_init+0x260>)
    85ca:	2001      	movs	r0, #1
    85cc:	4b90      	ldr	r3, [pc, #576]	; (8810 <_tc_timer_init+0x264>)
    85ce:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    85d0:	2101      	movs	r1, #1
    85d2:	6838      	ldr	r0, [r7, #0]
    85d4:	4b8f      	ldr	r3, [pc, #572]	; (8814 <_tc_timer_init+0x268>)
    85d6:	4798      	blx	r3
    85d8:	4603      	mov	r3, r0
    85da:	f083 0301 	eor.w	r3, r3, #1
    85de:	b2db      	uxtb	r3, r3
    85e0:	2b00      	cmp	r3, #0
    85e2:	d011      	beq.n	8608 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    85e4:	2102      	movs	r1, #2
    85e6:	6838      	ldr	r0, [r7, #0]
    85e8:	4b8b      	ldr	r3, [pc, #556]	; (8818 <_tc_timer_init+0x26c>)
    85ea:	4798      	blx	r3
    85ec:	4603      	mov	r3, r0
    85ee:	2b00      	cmp	r3, #0
    85f0:	d006      	beq.n	8600 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    85f2:	6838      	ldr	r0, [r7, #0]
    85f4:	4b89      	ldr	r3, [pc, #548]	; (881c <_tc_timer_init+0x270>)
    85f6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    85f8:	2102      	movs	r1, #2
    85fa:	6838      	ldr	r0, [r7, #0]
    85fc:	4b88      	ldr	r3, [pc, #544]	; (8820 <_tc_timer_init+0x274>)
    85fe:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8600:	2101      	movs	r1, #1
    8602:	6838      	ldr	r0, [r7, #0]
    8604:	4b87      	ldr	r3, [pc, #540]	; (8824 <_tc_timer_init+0x278>)
    8606:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8608:	2101      	movs	r1, #1
    860a:	6838      	ldr	r0, [r7, #0]
    860c:	4b84      	ldr	r3, [pc, #528]	; (8820 <_tc_timer_init+0x274>)
    860e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8610:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8614:	4984      	ldr	r1, [pc, #528]	; (8828 <_tc_timer_init+0x27c>)
    8616:	4613      	mov	r3, r2
    8618:	009b      	lsls	r3, r3, #2
    861a:	4413      	add	r3, r2
    861c:	009b      	lsls	r3, r3, #2
    861e:	440b      	add	r3, r1
    8620:	3304      	adds	r3, #4
    8622:	681b      	ldr	r3, [r3, #0]
    8624:	4619      	mov	r1, r3
    8626:	6838      	ldr	r0, [r7, #0]
    8628:	4b7e      	ldr	r3, [pc, #504]	; (8824 <_tc_timer_init+0x278>)
    862a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    862c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8630:	497d      	ldr	r1, [pc, #500]	; (8828 <_tc_timer_init+0x27c>)
    8632:	4613      	mov	r3, r2
    8634:	009b      	lsls	r3, r3, #2
    8636:	4413      	add	r3, r2
    8638:	009b      	lsls	r3, r3, #2
    863a:	440b      	add	r3, r1
    863c:	330a      	adds	r3, #10
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	4619      	mov	r1, r3
    8642:	6838      	ldr	r0, [r7, #0]
    8644:	4b79      	ldr	r3, [pc, #484]	; (882c <_tc_timer_init+0x280>)
    8646:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8648:	f997 200f 	ldrsb.w	r2, [r7, #15]
    864c:	4976      	ldr	r1, [pc, #472]	; (8828 <_tc_timer_init+0x27c>)
    864e:	4613      	mov	r3, r2
    8650:	009b      	lsls	r3, r3, #2
    8652:	4413      	add	r3, r2
    8654:	009b      	lsls	r3, r3, #2
    8656:	440b      	add	r3, r1
    8658:	3308      	adds	r3, #8
    865a:	881b      	ldrh	r3, [r3, #0]
    865c:	4619      	mov	r1, r3
    865e:	6838      	ldr	r0, [r7, #0]
    8660:	4b73      	ldr	r3, [pc, #460]	; (8830 <_tc_timer_init+0x284>)
    8662:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8664:	2101      	movs	r1, #1
    8666:	6838      	ldr	r0, [r7, #0]
    8668:	4b72      	ldr	r3, [pc, #456]	; (8834 <_tc_timer_init+0x288>)
    866a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    866c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8670:	496d      	ldr	r1, [pc, #436]	; (8828 <_tc_timer_init+0x27c>)
    8672:	4613      	mov	r3, r2
    8674:	009b      	lsls	r3, r3, #2
    8676:	4413      	add	r3, r2
    8678:	009b      	lsls	r3, r3, #2
    867a:	440b      	add	r3, r1
    867c:	3304      	adds	r3, #4
    867e:	681b      	ldr	r3, [r3, #0]
    8680:	f003 030c 	and.w	r3, r3, #12
    8684:	2b08      	cmp	r3, #8
    8686:	d11e      	bne.n	86c6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8688:	f997 200f 	ldrsb.w	r2, [r7, #15]
    868c:	4966      	ldr	r1, [pc, #408]	; (8828 <_tc_timer_init+0x27c>)
    868e:	4613      	mov	r3, r2
    8690:	009b      	lsls	r3, r3, #2
    8692:	4413      	add	r3, r2
    8694:	009b      	lsls	r3, r3, #2
    8696:	440b      	add	r3, r1
    8698:	330c      	adds	r3, #12
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	461a      	mov	r2, r3
    869e:	2100      	movs	r1, #0
    86a0:	6838      	ldr	r0, [r7, #0]
    86a2:	4b65      	ldr	r3, [pc, #404]	; (8838 <_tc_timer_init+0x28c>)
    86a4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    86a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86aa:	495f      	ldr	r1, [pc, #380]	; (8828 <_tc_timer_init+0x27c>)
    86ac:	4613      	mov	r3, r2
    86ae:	009b      	lsls	r3, r3, #2
    86b0:	4413      	add	r3, r2
    86b2:	009b      	lsls	r3, r3, #2
    86b4:	440b      	add	r3, r1
    86b6:	3310      	adds	r3, #16
    86b8:	681b      	ldr	r3, [r3, #0]
    86ba:	461a      	mov	r2, r3
    86bc:	2101      	movs	r1, #1
    86be:	6838      	ldr	r0, [r7, #0]
    86c0:	4b5d      	ldr	r3, [pc, #372]	; (8838 <_tc_timer_init+0x28c>)
    86c2:	4798      	blx	r3
    86c4:	e06a      	b.n	879c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    86c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86ca:	4957      	ldr	r1, [pc, #348]	; (8828 <_tc_timer_init+0x27c>)
    86cc:	4613      	mov	r3, r2
    86ce:	009b      	lsls	r3, r3, #2
    86d0:	4413      	add	r3, r2
    86d2:	009b      	lsls	r3, r3, #2
    86d4:	440b      	add	r3, r1
    86d6:	3304      	adds	r3, #4
    86d8:	681b      	ldr	r3, [r3, #0]
    86da:	f003 030c 	and.w	r3, r3, #12
    86de:	2b00      	cmp	r3, #0
    86e0:	d120      	bne.n	8724 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    86e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86e6:	4950      	ldr	r1, [pc, #320]	; (8828 <_tc_timer_init+0x27c>)
    86e8:	4613      	mov	r3, r2
    86ea:	009b      	lsls	r3, r3, #2
    86ec:	4413      	add	r3, r2
    86ee:	009b      	lsls	r3, r3, #2
    86f0:	440b      	add	r3, r1
    86f2:	330c      	adds	r3, #12
    86f4:	681b      	ldr	r3, [r3, #0]
    86f6:	b29b      	uxth	r3, r3
    86f8:	461a      	mov	r2, r3
    86fa:	2100      	movs	r1, #0
    86fc:	6838      	ldr	r0, [r7, #0]
    86fe:	4b4f      	ldr	r3, [pc, #316]	; (883c <_tc_timer_init+0x290>)
    8700:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8702:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8706:	4948      	ldr	r1, [pc, #288]	; (8828 <_tc_timer_init+0x27c>)
    8708:	4613      	mov	r3, r2
    870a:	009b      	lsls	r3, r3, #2
    870c:	4413      	add	r3, r2
    870e:	009b      	lsls	r3, r3, #2
    8710:	440b      	add	r3, r1
    8712:	3310      	adds	r3, #16
    8714:	681b      	ldr	r3, [r3, #0]
    8716:	b29b      	uxth	r3, r3
    8718:	461a      	mov	r2, r3
    871a:	2101      	movs	r1, #1
    871c:	6838      	ldr	r0, [r7, #0]
    871e:	4b47      	ldr	r3, [pc, #284]	; (883c <_tc_timer_init+0x290>)
    8720:	4798      	blx	r3
    8722:	e03b      	b.n	879c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8724:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8728:	493f      	ldr	r1, [pc, #252]	; (8828 <_tc_timer_init+0x27c>)
    872a:	4613      	mov	r3, r2
    872c:	009b      	lsls	r3, r3, #2
    872e:	4413      	add	r3, r2
    8730:	009b      	lsls	r3, r3, #2
    8732:	440b      	add	r3, r1
    8734:	3304      	adds	r3, #4
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	f003 030c 	and.w	r3, r3, #12
    873c:	2b04      	cmp	r3, #4
    873e:	d12d      	bne.n	879c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8740:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8744:	4938      	ldr	r1, [pc, #224]	; (8828 <_tc_timer_init+0x27c>)
    8746:	4613      	mov	r3, r2
    8748:	009b      	lsls	r3, r3, #2
    874a:	4413      	add	r3, r2
    874c:	009b      	lsls	r3, r3, #2
    874e:	440b      	add	r3, r1
    8750:	330c      	adds	r3, #12
    8752:	681b      	ldr	r3, [r3, #0]
    8754:	b2db      	uxtb	r3, r3
    8756:	461a      	mov	r2, r3
    8758:	2100      	movs	r1, #0
    875a:	6838      	ldr	r0, [r7, #0]
    875c:	4b38      	ldr	r3, [pc, #224]	; (8840 <_tc_timer_init+0x294>)
    875e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8760:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8764:	4930      	ldr	r1, [pc, #192]	; (8828 <_tc_timer_init+0x27c>)
    8766:	4613      	mov	r3, r2
    8768:	009b      	lsls	r3, r3, #2
    876a:	4413      	add	r3, r2
    876c:	009b      	lsls	r3, r3, #2
    876e:	440b      	add	r3, r1
    8770:	3310      	adds	r3, #16
    8772:	681b      	ldr	r3, [r3, #0]
    8774:	b2db      	uxtb	r3, r3
    8776:	461a      	mov	r2, r3
    8778:	2101      	movs	r1, #1
    877a:	6838      	ldr	r0, [r7, #0]
    877c:	4b30      	ldr	r3, [pc, #192]	; (8840 <_tc_timer_init+0x294>)
    877e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8780:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8784:	4928      	ldr	r1, [pc, #160]	; (8828 <_tc_timer_init+0x27c>)
    8786:	4613      	mov	r3, r2
    8788:	009b      	lsls	r3, r3, #2
    878a:	4413      	add	r3, r2
    878c:	009b      	lsls	r3, r3, #2
    878e:	440b      	add	r3, r1
    8790:	330b      	adds	r3, #11
    8792:	781b      	ldrb	r3, [r3, #0]
    8794:	4619      	mov	r1, r3
    8796:	6838      	ldr	r0, [r7, #0]
    8798:	4b2a      	ldr	r3, [pc, #168]	; (8844 <_tc_timer_init+0x298>)
    879a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    879c:	6838      	ldr	r0, [r7, #0]
    879e:	4b2a      	ldr	r3, [pc, #168]	; (8848 <_tc_timer_init+0x29c>)
    87a0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    87a2:	6879      	ldr	r1, [r7, #4]
    87a4:	6838      	ldr	r0, [r7, #0]
    87a6:	4b29      	ldr	r3, [pc, #164]	; (884c <_tc_timer_init+0x2a0>)
    87a8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    87aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ae:	491e      	ldr	r1, [pc, #120]	; (8828 <_tc_timer_init+0x27c>)
    87b0:	4613      	mov	r3, r2
    87b2:	009b      	lsls	r3, r3, #2
    87b4:	4413      	add	r3, r2
    87b6:	009b      	lsls	r3, r3, #2
    87b8:	440b      	add	r3, r1
    87ba:	3302      	adds	r3, #2
    87bc:	f9b3 3000 	ldrsh.w	r3, [r3]
    87c0:	4618      	mov	r0, r3
    87c2:	4b23      	ldr	r3, [pc, #140]	; (8850 <_tc_timer_init+0x2a4>)
    87c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    87c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ca:	4917      	ldr	r1, [pc, #92]	; (8828 <_tc_timer_init+0x27c>)
    87cc:	4613      	mov	r3, r2
    87ce:	009b      	lsls	r3, r3, #2
    87d0:	4413      	add	r3, r2
    87d2:	009b      	lsls	r3, r3, #2
    87d4:	440b      	add	r3, r1
    87d6:	3302      	adds	r3, #2
    87d8:	f9b3 3000 	ldrsh.w	r3, [r3]
    87dc:	4618      	mov	r0, r3
    87de:	4b1d      	ldr	r3, [pc, #116]	; (8854 <_tc_timer_init+0x2a8>)
    87e0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    87e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87e6:	4910      	ldr	r1, [pc, #64]	; (8828 <_tc_timer_init+0x27c>)
    87e8:	4613      	mov	r3, r2
    87ea:	009b      	lsls	r3, r3, #2
    87ec:	4413      	add	r3, r2
    87ee:	009b      	lsls	r3, r3, #2
    87f0:	440b      	add	r3, r1
    87f2:	3302      	adds	r3, #2
    87f4:	f9b3 3000 	ldrsh.w	r3, [r3]
    87f8:	4618      	mov	r0, r3
    87fa:	4b17      	ldr	r3, [pc, #92]	; (8858 <_tc_timer_init+0x2ac>)
    87fc:	4798      	blx	r3

	return ERR_NONE;
    87fe:	2300      	movs	r3, #0
}
    8800:	4618      	mov	r0, r3
    8802:	3710      	adds	r7, #16
    8804:	46bd      	mov	sp, r7
    8806:	bd80      	pop	{r7, pc}
    8808:	00008dfd 	.word	0x00008dfd
    880c:	00014280 	.word	0x00014280
    8810:	000040f5 	.word	0x000040f5
    8814:	00008221 	.word	0x00008221
    8818:	000083c1 	.word	0x000083c1
    881c:	00008371 	.word	0x00008371
    8820:	000081fd 	.word	0x000081fd
    8824:	000083f1 	.word	0x000083f1
    8828:	20000110 	.word	0x20000110
    882c:	00008451 	.word	0x00008451
    8830:	00008415 	.word	0x00008415
    8834:	00008433 	.word	0x00008433
    8838:	00008551 	.word	0x00008551
    883c:	000084ed 	.word	0x000084ed
    8840:	000084bd 	.word	0x000084bd
    8844:	00008471 	.word	0x00008471
    8848:	000082a5 	.word	0x000082a5
    884c:	00008e65 	.word	0x00008e65
    8850:	0000817d 	.word	0x0000817d
    8854:	000081c1 	.word	0x000081c1
    8858:	00008141 	.word	0x00008141

0000885c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    885c:	b580      	push	{r7, lr}
    885e:	b084      	sub	sp, #16
    8860:	af00      	add	r7, sp, #0
    8862:	6078      	str	r0, [r7, #4]
    8864:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8866:	6838      	ldr	r0, [r7, #0]
    8868:	4b73      	ldr	r3, [pc, #460]	; (8a38 <_pwm_init+0x1dc>)
    886a:	4798      	blx	r3
    886c:	4603      	mov	r3, r0
    886e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8870:	687b      	ldr	r3, [r7, #4]
    8872:	683a      	ldr	r2, [r7, #0]
    8874:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8876:	2101      	movs	r1, #1
    8878:	6838      	ldr	r0, [r7, #0]
    887a:	4b70      	ldr	r3, [pc, #448]	; (8a3c <_pwm_init+0x1e0>)
    887c:	4798      	blx	r3
    887e:	4603      	mov	r3, r0
    8880:	f083 0301 	eor.w	r3, r3, #1
    8884:	b2db      	uxtb	r3, r3
    8886:	2b00      	cmp	r3, #0
    8888:	d011      	beq.n	88ae <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    888a:	2102      	movs	r1, #2
    888c:	6838      	ldr	r0, [r7, #0]
    888e:	4b6c      	ldr	r3, [pc, #432]	; (8a40 <_pwm_init+0x1e4>)
    8890:	4798      	blx	r3
    8892:	4603      	mov	r3, r0
    8894:	2b00      	cmp	r3, #0
    8896:	d006      	beq.n	88a6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8898:	6838      	ldr	r0, [r7, #0]
    889a:	4b6a      	ldr	r3, [pc, #424]	; (8a44 <_pwm_init+0x1e8>)
    889c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    889e:	2102      	movs	r1, #2
    88a0:	6838      	ldr	r0, [r7, #0]
    88a2:	4b69      	ldr	r3, [pc, #420]	; (8a48 <_pwm_init+0x1ec>)
    88a4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    88a6:	2101      	movs	r1, #1
    88a8:	6838      	ldr	r0, [r7, #0]
    88aa:	4b68      	ldr	r3, [pc, #416]	; (8a4c <_pwm_init+0x1f0>)
    88ac:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    88ae:	2101      	movs	r1, #1
    88b0:	6838      	ldr	r0, [r7, #0]
    88b2:	4b65      	ldr	r3, [pc, #404]	; (8a48 <_pwm_init+0x1ec>)
    88b4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    88b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88ba:	4965      	ldr	r1, [pc, #404]	; (8a50 <_pwm_init+0x1f4>)
    88bc:	4613      	mov	r3, r2
    88be:	009b      	lsls	r3, r3, #2
    88c0:	4413      	add	r3, r2
    88c2:	009b      	lsls	r3, r3, #2
    88c4:	440b      	add	r3, r1
    88c6:	3304      	adds	r3, #4
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	4619      	mov	r1, r3
    88cc:	6838      	ldr	r0, [r7, #0]
    88ce:	4b5f      	ldr	r3, [pc, #380]	; (8a4c <_pwm_init+0x1f0>)
    88d0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    88d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88d6:	495e      	ldr	r1, [pc, #376]	; (8a50 <_pwm_init+0x1f4>)
    88d8:	4613      	mov	r3, r2
    88da:	009b      	lsls	r3, r3, #2
    88dc:	4413      	add	r3, r2
    88de:	009b      	lsls	r3, r3, #2
    88e0:	440b      	add	r3, r1
    88e2:	330a      	adds	r3, #10
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	4619      	mov	r1, r3
    88e8:	6838      	ldr	r0, [r7, #0]
    88ea:	4b5a      	ldr	r3, [pc, #360]	; (8a54 <_pwm_init+0x1f8>)
    88ec:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    88ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88f2:	4957      	ldr	r1, [pc, #348]	; (8a50 <_pwm_init+0x1f4>)
    88f4:	4613      	mov	r3, r2
    88f6:	009b      	lsls	r3, r3, #2
    88f8:	4413      	add	r3, r2
    88fa:	009b      	lsls	r3, r3, #2
    88fc:	440b      	add	r3, r1
    88fe:	3308      	adds	r3, #8
    8900:	881b      	ldrh	r3, [r3, #0]
    8902:	4619      	mov	r1, r3
    8904:	6838      	ldr	r0, [r7, #0]
    8906:	4b54      	ldr	r3, [pc, #336]	; (8a58 <_pwm_init+0x1fc>)
    8908:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    890a:	2103      	movs	r1, #3
    890c:	6838      	ldr	r0, [r7, #0]
    890e:	4b53      	ldr	r3, [pc, #332]	; (8a5c <_pwm_init+0x200>)
    8910:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8912:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8916:	494e      	ldr	r1, [pc, #312]	; (8a50 <_pwm_init+0x1f4>)
    8918:	4613      	mov	r3, r2
    891a:	009b      	lsls	r3, r3, #2
    891c:	4413      	add	r3, r2
    891e:	009b      	lsls	r3, r3, #2
    8920:	440b      	add	r3, r1
    8922:	3304      	adds	r3, #4
    8924:	681b      	ldr	r3, [r3, #0]
    8926:	f003 030c 	and.w	r3, r3, #12
    892a:	2b08      	cmp	r3, #8
    892c:	d11e      	bne.n	896c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    892e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8932:	4947      	ldr	r1, [pc, #284]	; (8a50 <_pwm_init+0x1f4>)
    8934:	4613      	mov	r3, r2
    8936:	009b      	lsls	r3, r3, #2
    8938:	4413      	add	r3, r2
    893a:	009b      	lsls	r3, r3, #2
    893c:	440b      	add	r3, r1
    893e:	330c      	adds	r3, #12
    8940:	681b      	ldr	r3, [r3, #0]
    8942:	461a      	mov	r2, r3
    8944:	2100      	movs	r1, #0
    8946:	6838      	ldr	r0, [r7, #0]
    8948:	4b45      	ldr	r3, [pc, #276]	; (8a60 <_pwm_init+0x204>)
    894a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    894c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8950:	493f      	ldr	r1, [pc, #252]	; (8a50 <_pwm_init+0x1f4>)
    8952:	4613      	mov	r3, r2
    8954:	009b      	lsls	r3, r3, #2
    8956:	4413      	add	r3, r2
    8958:	009b      	lsls	r3, r3, #2
    895a:	440b      	add	r3, r1
    895c:	3310      	adds	r3, #16
    895e:	681b      	ldr	r3, [r3, #0]
    8960:	461a      	mov	r2, r3
    8962:	2101      	movs	r1, #1
    8964:	6838      	ldr	r0, [r7, #0]
    8966:	4b3e      	ldr	r3, [pc, #248]	; (8a60 <_pwm_init+0x204>)
    8968:	4798      	blx	r3
    896a:	e031      	b.n	89d0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    896c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8970:	4937      	ldr	r1, [pc, #220]	; (8a50 <_pwm_init+0x1f4>)
    8972:	4613      	mov	r3, r2
    8974:	009b      	lsls	r3, r3, #2
    8976:	4413      	add	r3, r2
    8978:	009b      	lsls	r3, r3, #2
    897a:	440b      	add	r3, r1
    897c:	3304      	adds	r3, #4
    897e:	681b      	ldr	r3, [r3, #0]
    8980:	f003 030c 	and.w	r3, r3, #12
    8984:	2b00      	cmp	r3, #0
    8986:	d120      	bne.n	89ca <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8988:	f997 200f 	ldrsb.w	r2, [r7, #15]
    898c:	4930      	ldr	r1, [pc, #192]	; (8a50 <_pwm_init+0x1f4>)
    898e:	4613      	mov	r3, r2
    8990:	009b      	lsls	r3, r3, #2
    8992:	4413      	add	r3, r2
    8994:	009b      	lsls	r3, r3, #2
    8996:	440b      	add	r3, r1
    8998:	330c      	adds	r3, #12
    899a:	681b      	ldr	r3, [r3, #0]
    899c:	b29b      	uxth	r3, r3
    899e:	461a      	mov	r2, r3
    89a0:	2100      	movs	r1, #0
    89a2:	6838      	ldr	r0, [r7, #0]
    89a4:	4b2f      	ldr	r3, [pc, #188]	; (8a64 <_pwm_init+0x208>)
    89a6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    89a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89ac:	4928      	ldr	r1, [pc, #160]	; (8a50 <_pwm_init+0x1f4>)
    89ae:	4613      	mov	r3, r2
    89b0:	009b      	lsls	r3, r3, #2
    89b2:	4413      	add	r3, r2
    89b4:	009b      	lsls	r3, r3, #2
    89b6:	440b      	add	r3, r1
    89b8:	3310      	adds	r3, #16
    89ba:	681b      	ldr	r3, [r3, #0]
    89bc:	b29b      	uxth	r3, r3
    89be:	461a      	mov	r2, r3
    89c0:	2101      	movs	r1, #1
    89c2:	6838      	ldr	r0, [r7, #0]
    89c4:	4b27      	ldr	r3, [pc, #156]	; (8a64 <_pwm_init+0x208>)
    89c6:	4798      	blx	r3
    89c8:	e002      	b.n	89d0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    89ca:	f04f 33ff 	mov.w	r3, #4294967295
    89ce:	e02e      	b.n	8a2e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    89d0:	6879      	ldr	r1, [r7, #4]
    89d2:	6838      	ldr	r0, [r7, #0]
    89d4:	4b24      	ldr	r3, [pc, #144]	; (8a68 <_pwm_init+0x20c>)
    89d6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    89d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89dc:	491c      	ldr	r1, [pc, #112]	; (8a50 <_pwm_init+0x1f4>)
    89de:	4613      	mov	r3, r2
    89e0:	009b      	lsls	r3, r3, #2
    89e2:	4413      	add	r3, r2
    89e4:	009b      	lsls	r3, r3, #2
    89e6:	440b      	add	r3, r1
    89e8:	3302      	adds	r3, #2
    89ea:	f9b3 3000 	ldrsh.w	r3, [r3]
    89ee:	4618      	mov	r0, r3
    89f0:	4b1e      	ldr	r3, [pc, #120]	; (8a6c <_pwm_init+0x210>)
    89f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    89f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89f8:	4915      	ldr	r1, [pc, #84]	; (8a50 <_pwm_init+0x1f4>)
    89fa:	4613      	mov	r3, r2
    89fc:	009b      	lsls	r3, r3, #2
    89fe:	4413      	add	r3, r2
    8a00:	009b      	lsls	r3, r3, #2
    8a02:	440b      	add	r3, r1
    8a04:	3302      	adds	r3, #2
    8a06:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a0a:	4618      	mov	r0, r3
    8a0c:	4b18      	ldr	r3, [pc, #96]	; (8a70 <_pwm_init+0x214>)
    8a0e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8a10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a14:	490e      	ldr	r1, [pc, #56]	; (8a50 <_pwm_init+0x1f4>)
    8a16:	4613      	mov	r3, r2
    8a18:	009b      	lsls	r3, r3, #2
    8a1a:	4413      	add	r3, r2
    8a1c:	009b      	lsls	r3, r3, #2
    8a1e:	440b      	add	r3, r1
    8a20:	3302      	adds	r3, #2
    8a22:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a26:	4618      	mov	r0, r3
    8a28:	4b12      	ldr	r3, [pc, #72]	; (8a74 <_pwm_init+0x218>)
    8a2a:	4798      	blx	r3

	return 0;
    8a2c:	2300      	movs	r3, #0
}
    8a2e:	4618      	mov	r0, r3
    8a30:	3710      	adds	r7, #16
    8a32:	46bd      	mov	sp, r7
    8a34:	bd80      	pop	{r7, pc}
    8a36:	bf00      	nop
    8a38:	00008dfd 	.word	0x00008dfd
    8a3c:	00008221 	.word	0x00008221
    8a40:	000083c1 	.word	0x000083c1
    8a44:	00008371 	.word	0x00008371
    8a48:	000081fd 	.word	0x000081fd
    8a4c:	000083f1 	.word	0x000083f1
    8a50:	20000110 	.word	0x20000110
    8a54:	00008451 	.word	0x00008451
    8a58:	00008415 	.word	0x00008415
    8a5c:	00008433 	.word	0x00008433
    8a60:	00008551 	.word	0x00008551
    8a64:	000084ed 	.word	0x000084ed
    8a68:	00008e65 	.word	0x00008e65
    8a6c:	0000817d 	.word	0x0000817d
    8a70:	000081c1 	.word	0x000081c1
    8a74:	00008141 	.word	0x00008141

00008a78 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	b084      	sub	sp, #16
    8a7c:	af00      	add	r7, sp, #0
    8a7e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	68db      	ldr	r3, [r3, #12]
    8a84:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8a86:	68f8      	ldr	r0, [r7, #12]
    8a88:	4b10      	ldr	r3, [pc, #64]	; (8acc <_tc_timer_deinit+0x54>)
    8a8a:	4798      	blx	r3
    8a8c:	4603      	mov	r3, r0
    8a8e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8a90:	22f9      	movs	r2, #249	; 0xf9
    8a92:	490f      	ldr	r1, [pc, #60]	; (8ad0 <_tc_timer_deinit+0x58>)
    8a94:	2001      	movs	r0, #1
    8a96:	4b0f      	ldr	r3, [pc, #60]	; (8ad4 <_tc_timer_deinit+0x5c>)
    8a98:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8a9a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8a9e:	490e      	ldr	r1, [pc, #56]	; (8ad8 <_tc_timer_deinit+0x60>)
    8aa0:	4613      	mov	r3, r2
    8aa2:	009b      	lsls	r3, r3, #2
    8aa4:	4413      	add	r3, r2
    8aa6:	009b      	lsls	r3, r3, #2
    8aa8:	440b      	add	r3, r1
    8aaa:	3302      	adds	r3, #2
    8aac:	f9b3 3000 	ldrsh.w	r3, [r3]
    8ab0:	4618      	mov	r0, r3
    8ab2:	4b0a      	ldr	r3, [pc, #40]	; (8adc <_tc_timer_deinit+0x64>)
    8ab4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8ab6:	68f8      	ldr	r0, [r7, #12]
    8ab8:	4b09      	ldr	r3, [pc, #36]	; (8ae0 <_tc_timer_deinit+0x68>)
    8aba:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8abc:	68f8      	ldr	r0, [r7, #12]
    8abe:	4b09      	ldr	r3, [pc, #36]	; (8ae4 <_tc_timer_deinit+0x6c>)
    8ac0:	4798      	blx	r3
}
    8ac2:	bf00      	nop
    8ac4:	3710      	adds	r7, #16
    8ac6:	46bd      	mov	sp, r7
    8ac8:	bd80      	pop	{r7, pc}
    8aca:	bf00      	nop
    8acc:	00008dfd 	.word	0x00008dfd
    8ad0:	00014280 	.word	0x00014280
    8ad4:	000040f5 	.word	0x000040f5
    8ad8:	20000110 	.word	0x20000110
    8adc:	0000817d 	.word	0x0000817d
    8ae0:	00008371 	.word	0x00008371
    8ae4:	000082e9 	.word	0x000082e9

00008ae8 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8ae8:	b580      	push	{r7, lr}
    8aea:	b082      	sub	sp, #8
    8aec:	af00      	add	r7, sp, #0
    8aee:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8af0:	687b      	ldr	r3, [r7, #4]
    8af2:	68db      	ldr	r3, [r3, #12]
    8af4:	4618      	mov	r0, r3
    8af6:	4b03      	ldr	r3, [pc, #12]	; (8b04 <_tc_timer_start+0x1c>)
    8af8:	4798      	blx	r3
}
    8afa:	bf00      	nop
    8afc:	3708      	adds	r7, #8
    8afe:	46bd      	mov	sp, r7
    8b00:	bd80      	pop	{r7, pc}
    8b02:	bf00      	nop
    8b04:	00008311 	.word	0x00008311

00008b08 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	b082      	sub	sp, #8
    8b0c:	af00      	add	r7, sp, #0
    8b0e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8b10:	687b      	ldr	r3, [r7, #4]
    8b12:	68db      	ldr	r3, [r3, #12]
    8b14:	4618      	mov	r0, r3
    8b16:	4b03      	ldr	r3, [pc, #12]	; (8b24 <_tc_timer_stop+0x1c>)
    8b18:	4798      	blx	r3
}
    8b1a:	bf00      	nop
    8b1c:	3708      	adds	r7, #8
    8b1e:	46bd      	mov	sp, r7
    8b20:	bd80      	pop	{r7, pc}
    8b22:	bf00      	nop
    8b24:	00008371 	.word	0x00008371

00008b28 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8b28:	b580      	push	{r7, lr}
    8b2a:	b084      	sub	sp, #16
    8b2c:	af00      	add	r7, sp, #0
    8b2e:	6078      	str	r0, [r7, #4]
    8b30:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8b32:	687b      	ldr	r3, [r7, #4]
    8b34:	68db      	ldr	r3, [r3, #12]
    8b36:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b38:	68f8      	ldr	r0, [r7, #12]
    8b3a:	4b14      	ldr	r3, [pc, #80]	; (8b8c <_tc_timer_set_period+0x64>)
    8b3c:	4798      	blx	r3
    8b3e:	4603      	mov	r3, r0
    8b40:	2b02      	cmp	r3, #2
    8b42:	d105      	bne.n	8b50 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8b44:	683a      	ldr	r2, [r7, #0]
    8b46:	2100      	movs	r1, #0
    8b48:	68f8      	ldr	r0, [r7, #12]
    8b4a:	4b11      	ldr	r3, [pc, #68]	; (8b90 <_tc_timer_set_period+0x68>)
    8b4c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8b4e:	e019      	b.n	8b84 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b50:	68f8      	ldr	r0, [r7, #12]
    8b52:	4b0e      	ldr	r3, [pc, #56]	; (8b8c <_tc_timer_set_period+0x64>)
    8b54:	4798      	blx	r3
    8b56:	4603      	mov	r3, r0
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d107      	bne.n	8b6c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8b5c:	683b      	ldr	r3, [r7, #0]
    8b5e:	b29b      	uxth	r3, r3
    8b60:	461a      	mov	r2, r3
    8b62:	2100      	movs	r1, #0
    8b64:	68f8      	ldr	r0, [r7, #12]
    8b66:	4b0b      	ldr	r3, [pc, #44]	; (8b94 <_tc_timer_set_period+0x6c>)
    8b68:	4798      	blx	r3
}
    8b6a:	e00b      	b.n	8b84 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b6c:	68f8      	ldr	r0, [r7, #12]
    8b6e:	4b07      	ldr	r3, [pc, #28]	; (8b8c <_tc_timer_set_period+0x64>)
    8b70:	4798      	blx	r3
    8b72:	4603      	mov	r3, r0
    8b74:	2b01      	cmp	r3, #1
    8b76:	d105      	bne.n	8b84 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8b78:	683b      	ldr	r3, [r7, #0]
    8b7a:	b2db      	uxtb	r3, r3
    8b7c:	4619      	mov	r1, r3
    8b7e:	68f8      	ldr	r0, [r7, #12]
    8b80:	4b05      	ldr	r3, [pc, #20]	; (8b98 <_tc_timer_set_period+0x70>)
    8b82:	4798      	blx	r3
}
    8b84:	bf00      	nop
    8b86:	3710      	adds	r7, #16
    8b88:	46bd      	mov	sp, r7
    8b8a:	bd80      	pop	{r7, pc}
    8b8c:	00008399 	.word	0x00008399
    8b90:	00008551 	.word	0x00008551
    8b94:	000084ed 	.word	0x000084ed
    8b98:	00008471 	.word	0x00008471

00008b9c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8b9c:	b580      	push	{r7, lr}
    8b9e:	b084      	sub	sp, #16
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8ba4:	687b      	ldr	r3, [r7, #4]
    8ba6:	68db      	ldr	r3, [r3, #12]
    8ba8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8baa:	68f8      	ldr	r0, [r7, #12]
    8bac:	4b13      	ldr	r3, [pc, #76]	; (8bfc <_tc_timer_get_period+0x60>)
    8bae:	4798      	blx	r3
    8bb0:	4603      	mov	r3, r0
    8bb2:	2b02      	cmp	r3, #2
    8bb4:	d105      	bne.n	8bc2 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8bb6:	2100      	movs	r1, #0
    8bb8:	68f8      	ldr	r0, [r7, #12]
    8bba:	4b11      	ldr	r3, [pc, #68]	; (8c00 <_tc_timer_get_period+0x64>)
    8bbc:	4798      	blx	r3
    8bbe:	4603      	mov	r3, r0
    8bc0:	e017      	b.n	8bf2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8bc2:	68f8      	ldr	r0, [r7, #12]
    8bc4:	4b0d      	ldr	r3, [pc, #52]	; (8bfc <_tc_timer_get_period+0x60>)
    8bc6:	4798      	blx	r3
    8bc8:	4603      	mov	r3, r0
    8bca:	2b00      	cmp	r3, #0
    8bcc:	d105      	bne.n	8bda <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8bce:	2100      	movs	r1, #0
    8bd0:	68f8      	ldr	r0, [r7, #12]
    8bd2:	4b0c      	ldr	r3, [pc, #48]	; (8c04 <_tc_timer_get_period+0x68>)
    8bd4:	4798      	blx	r3
    8bd6:	4603      	mov	r3, r0
    8bd8:	e00b      	b.n	8bf2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8bda:	68f8      	ldr	r0, [r7, #12]
    8bdc:	4b07      	ldr	r3, [pc, #28]	; (8bfc <_tc_timer_get_period+0x60>)
    8bde:	4798      	blx	r3
    8be0:	4603      	mov	r3, r0
    8be2:	2b01      	cmp	r3, #1
    8be4:	d104      	bne.n	8bf0 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8be6:	68f8      	ldr	r0, [r7, #12]
    8be8:	4b07      	ldr	r3, [pc, #28]	; (8c08 <_tc_timer_get_period+0x6c>)
    8bea:	4798      	blx	r3
    8bec:	4603      	mov	r3, r0
    8bee:	e000      	b.n	8bf2 <_tc_timer_get_period+0x56>
	}

	return 0;
    8bf0:	2300      	movs	r3, #0
}
    8bf2:	4618      	mov	r0, r3
    8bf4:	3710      	adds	r7, #16
    8bf6:	46bd      	mov	sp, r7
    8bf8:	bd80      	pop	{r7, pc}
    8bfa:	bf00      	nop
    8bfc:	00008399 	.word	0x00008399
    8c00:	00008581 	.word	0x00008581
    8c04:	00008521 	.word	0x00008521
    8c08:	00008499 	.word	0x00008499

00008c0c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8c0c:	b580      	push	{r7, lr}
    8c0e:	b082      	sub	sp, #8
    8c10:	af00      	add	r7, sp, #0
    8c12:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	68db      	ldr	r3, [r3, #12]
    8c18:	4618      	mov	r0, r3
    8c1a:	4b03      	ldr	r3, [pc, #12]	; (8c28 <_tc_timer_is_started+0x1c>)
    8c1c:	4798      	blx	r3
    8c1e:	4603      	mov	r3, r0
}
    8c20:	4618      	mov	r0, r3
    8c22:	3708      	adds	r7, #8
    8c24:	46bd      	mov	sp, r7
    8c26:	bd80      	pop	{r7, pc}
    8c28:	00008339 	.word	0x00008339

00008c2c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8c2c:	b480      	push	{r7}
    8c2e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8c30:	4b02      	ldr	r3, [pc, #8]	; (8c3c <_tc_get_timer+0x10>)
}
    8c32:	4618      	mov	r0, r3
    8c34:	46bd      	mov	sp, r7
    8c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c3a:	4770      	bx	lr
    8c3c:	20000188 	.word	0x20000188

00008c40 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8c40:	b480      	push	{r7}
    8c42:	af00      	add	r7, sp, #0
	return NULL;
    8c44:	2300      	movs	r3, #0
}
    8c46:	4618      	mov	r0, r3
    8c48:	46bd      	mov	sp, r7
    8c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c4e:	4770      	bx	lr

00008c50 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8c50:	b580      	push	{r7, lr}
    8c52:	b084      	sub	sp, #16
    8c54:	af00      	add	r7, sp, #0
    8c56:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	68db      	ldr	r3, [r3, #12]
    8c5c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8c5e:	68f8      	ldr	r0, [r7, #12]
    8c60:	4b0e      	ldr	r3, [pc, #56]	; (8c9c <_tc_timer_set_irq+0x4c>)
    8c62:	4798      	blx	r3
    8c64:	4603      	mov	r3, r0
    8c66:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8c68:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8c6c:	490c      	ldr	r1, [pc, #48]	; (8ca0 <_tc_timer_set_irq+0x50>)
    8c6e:	2001      	movs	r0, #1
    8c70:	4b0c      	ldr	r3, [pc, #48]	; (8ca4 <_tc_timer_set_irq+0x54>)
    8c72:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8c74:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8c78:	490b      	ldr	r1, [pc, #44]	; (8ca8 <_tc_timer_set_irq+0x58>)
    8c7a:	4613      	mov	r3, r2
    8c7c:	009b      	lsls	r3, r3, #2
    8c7e:	4413      	add	r3, r2
    8c80:	009b      	lsls	r3, r3, #2
    8c82:	440b      	add	r3, r1
    8c84:	3302      	adds	r3, #2
    8c86:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c8a:	b2db      	uxtb	r3, r3
    8c8c:	4618      	mov	r0, r3
    8c8e:	4b07      	ldr	r3, [pc, #28]	; (8cac <_tc_timer_set_irq+0x5c>)
    8c90:	4798      	blx	r3
}
    8c92:	bf00      	nop
    8c94:	3710      	adds	r7, #16
    8c96:	46bd      	mov	sp, r7
    8c98:	bd80      	pop	{r7, pc}
    8c9a:	bf00      	nop
    8c9c:	00008dfd 	.word	0x00008dfd
    8ca0:	00014280 	.word	0x00014280
    8ca4:	000040f5 	.word	0x000040f5
    8ca8:	20000110 	.word	0x20000110
    8cac:	0000493d 	.word	0x0000493d

00008cb0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8cb0:	b580      	push	{r7, lr}
    8cb2:	b084      	sub	sp, #16
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8cb8:	687b      	ldr	r3, [r7, #4]
    8cba:	68db      	ldr	r3, [r3, #12]
    8cbc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8cbe:	68f8      	ldr	r0, [r7, #12]
    8cc0:	4b07      	ldr	r3, [pc, #28]	; (8ce0 <tc_interrupt_handler+0x30>)
    8cc2:	4798      	blx	r3
    8cc4:	4603      	mov	r3, r0
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d006      	beq.n	8cd8 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8cca:	68f8      	ldr	r0, [r7, #12]
    8ccc:	4b05      	ldr	r3, [pc, #20]	; (8ce4 <tc_interrupt_handler+0x34>)
    8cce:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	681b      	ldr	r3, [r3, #0]
    8cd4:	6878      	ldr	r0, [r7, #4]
    8cd6:	4798      	blx	r3
	}
}
    8cd8:	bf00      	nop
    8cda:	3710      	adds	r7, #16
    8cdc:	46bd      	mov	sp, r7
    8cde:	bd80      	pop	{r7, pc}
    8ce0:	00008249 	.word	0x00008249
    8ce4:	00008271 	.word	0x00008271

00008ce8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8ce8:	b580      	push	{r7, lr}
    8cea:	b084      	sub	sp, #16
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	691b      	ldr	r3, [r3, #16]
    8cf4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8cf6:	68f8      	ldr	r0, [r7, #12]
    8cf8:	4b12      	ldr	r3, [pc, #72]	; (8d44 <tc_pwm_interrupt_handler+0x5c>)
    8cfa:	4798      	blx	r3
    8cfc:	4603      	mov	r3, r0
    8cfe:	2b00      	cmp	r3, #0
    8d00:	d00a      	beq.n	8d18 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8d02:	68f8      	ldr	r0, [r7, #12]
    8d04:	4b10      	ldr	r3, [pc, #64]	; (8d48 <tc_pwm_interrupt_handler+0x60>)
    8d06:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8d08:	687b      	ldr	r3, [r7, #4]
    8d0a:	681b      	ldr	r3, [r3, #0]
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	d003      	beq.n	8d18 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8d10:	687b      	ldr	r3, [r7, #4]
    8d12:	681b      	ldr	r3, [r3, #0]
    8d14:	6878      	ldr	r0, [r7, #4]
    8d16:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8d18:	68f8      	ldr	r0, [r7, #12]
    8d1a:	4b0c      	ldr	r3, [pc, #48]	; (8d4c <tc_pwm_interrupt_handler+0x64>)
    8d1c:	4798      	blx	r3
    8d1e:	4603      	mov	r3, r0
    8d20:	2b00      	cmp	r3, #0
    8d22:	d00a      	beq.n	8d3a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8d24:	68f8      	ldr	r0, [r7, #12]
    8d26:	4b0a      	ldr	r3, [pc, #40]	; (8d50 <tc_pwm_interrupt_handler+0x68>)
    8d28:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	685b      	ldr	r3, [r3, #4]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d003      	beq.n	8d3a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8d32:	687b      	ldr	r3, [r7, #4]
    8d34:	685b      	ldr	r3, [r3, #4]
    8d36:	6878      	ldr	r0, [r7, #4]
    8d38:	4798      	blx	r3
		}
	}
}
    8d3a:	bf00      	nop
    8d3c:	3710      	adds	r7, #16
    8d3e:	46bd      	mov	sp, r7
    8d40:	bd80      	pop	{r7, pc}
    8d42:	bf00      	nop
    8d44:	00008249 	.word	0x00008249
    8d48:	00008271 	.word	0x00008271
    8d4c:	000082bf 	.word	0x000082bf
    8d50:	0000828b 	.word	0x0000828b

00008d54 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8d58:	4b03      	ldr	r3, [pc, #12]	; (8d68 <TC0_Handler+0x14>)
    8d5a:	681b      	ldr	r3, [r3, #0]
    8d5c:	4618      	mov	r0, r3
    8d5e:	4b03      	ldr	r3, [pc, #12]	; (8d6c <TC0_Handler+0x18>)
    8d60:	4798      	blx	r3
}
    8d62:	bf00      	nop
    8d64:	bd80      	pop	{r7, pc}
    8d66:	bf00      	nop
    8d68:	20000e84 	.word	0x20000e84
    8d6c:	00008cb1 	.word	0x00008cb1

00008d70 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8d70:	b580      	push	{r7, lr}
    8d72:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8d74:	4b03      	ldr	r3, [pc, #12]	; (8d84 <TC2_Handler+0x14>)
    8d76:	681b      	ldr	r3, [r3, #0]
    8d78:	4618      	mov	r0, r3
    8d7a:	4b03      	ldr	r3, [pc, #12]	; (8d88 <TC2_Handler+0x18>)
    8d7c:	4798      	blx	r3
}
    8d7e:	bf00      	nop
    8d80:	bd80      	pop	{r7, pc}
    8d82:	bf00      	nop
    8d84:	20000e88 	.word	0x20000e88
    8d88:	00008cb1 	.word	0x00008cb1

00008d8c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8d90:	4b03      	ldr	r3, [pc, #12]	; (8da0 <TC4_Handler+0x14>)
    8d92:	681b      	ldr	r3, [r3, #0]
    8d94:	4618      	mov	r0, r3
    8d96:	4b03      	ldr	r3, [pc, #12]	; (8da4 <TC4_Handler+0x18>)
    8d98:	4798      	blx	r3
}
    8d9a:	bf00      	nop
    8d9c:	bd80      	pop	{r7, pc}
    8d9e:	bf00      	nop
    8da0:	20000e8c 	.word	0x20000e8c
    8da4:	00008cb1 	.word	0x00008cb1

00008da8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8da8:	b580      	push	{r7, lr}
    8daa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8dac:	4b03      	ldr	r3, [pc, #12]	; (8dbc <TC5_Handler+0x14>)
    8dae:	681b      	ldr	r3, [r3, #0]
    8db0:	4618      	mov	r0, r3
    8db2:	4b03      	ldr	r3, [pc, #12]	; (8dc0 <TC5_Handler+0x18>)
    8db4:	4798      	blx	r3
}
    8db6:	bf00      	nop
    8db8:	bd80      	pop	{r7, pc}
    8dba:	bf00      	nop
    8dbc:	20000e90 	.word	0x20000e90
    8dc0:	00008cb1 	.word	0x00008cb1

00008dc4 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8dc4:	b580      	push	{r7, lr}
    8dc6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8dc8:	4b03      	ldr	r3, [pc, #12]	; (8dd8 <TC6_Handler+0x14>)
    8dca:	681b      	ldr	r3, [r3, #0]
    8dcc:	4618      	mov	r0, r3
    8dce:	4b03      	ldr	r3, [pc, #12]	; (8ddc <TC6_Handler+0x18>)
    8dd0:	4798      	blx	r3
}
    8dd2:	bf00      	nop
    8dd4:	bd80      	pop	{r7, pc}
    8dd6:	bf00      	nop
    8dd8:	20000e94 	.word	0x20000e94
    8ddc:	00008cb1 	.word	0x00008cb1

00008de0 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8de0:	b580      	push	{r7, lr}
    8de2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8de4:	4b03      	ldr	r3, [pc, #12]	; (8df4 <TC7_Handler+0x14>)
    8de6:	681b      	ldr	r3, [r3, #0]
    8de8:	4618      	mov	r0, r3
    8dea:	4b03      	ldr	r3, [pc, #12]	; (8df8 <TC7_Handler+0x18>)
    8dec:	4798      	blx	r3
}
    8dee:	bf00      	nop
    8df0:	bd80      	pop	{r7, pc}
    8df2:	bf00      	nop
    8df4:	20000e98 	.word	0x20000e98
    8df8:	00008ce9 	.word	0x00008ce9

00008dfc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b084      	sub	sp, #16
    8e00:	af00      	add	r7, sp, #0
    8e02:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8e04:	6878      	ldr	r0, [r7, #4]
    8e06:	4b13      	ldr	r3, [pc, #76]	; (8e54 <get_tc_index+0x58>)
    8e08:	4798      	blx	r3
    8e0a:	4603      	mov	r3, r0
    8e0c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8e0e:	2300      	movs	r3, #0
    8e10:	73fb      	strb	r3, [r7, #15]
    8e12:	e010      	b.n	8e36 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8e14:	7bfa      	ldrb	r2, [r7, #15]
    8e16:	4910      	ldr	r1, [pc, #64]	; (8e58 <get_tc_index+0x5c>)
    8e18:	4613      	mov	r3, r2
    8e1a:	009b      	lsls	r3, r3, #2
    8e1c:	4413      	add	r3, r2
    8e1e:	009b      	lsls	r3, r3, #2
    8e20:	440b      	add	r3, r1
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	7bba      	ldrb	r2, [r7, #14]
    8e26:	429a      	cmp	r2, r3
    8e28:	d102      	bne.n	8e30 <get_tc_index+0x34>
			return i;
    8e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e2e:	e00d      	b.n	8e4c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8e30:	7bfb      	ldrb	r3, [r7, #15]
    8e32:	3301      	adds	r3, #1
    8e34:	73fb      	strb	r3, [r7, #15]
    8e36:	7bfb      	ldrb	r3, [r7, #15]
    8e38:	2b05      	cmp	r3, #5
    8e3a:	d9eb      	bls.n	8e14 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8e3c:	f240 221d 	movw	r2, #541	; 0x21d
    8e40:	4906      	ldr	r1, [pc, #24]	; (8e5c <get_tc_index+0x60>)
    8e42:	2000      	movs	r0, #0
    8e44:	4b06      	ldr	r3, [pc, #24]	; (8e60 <get_tc_index+0x64>)
    8e46:	4798      	blx	r3
	return -1;
    8e48:	f04f 33ff 	mov.w	r3, #4294967295
}
    8e4c:	4618      	mov	r0, r3
    8e4e:	3710      	adds	r7, #16
    8e50:	46bd      	mov	sp, r7
    8e52:	bd80      	pop	{r7, pc}
    8e54:	00008f01 	.word	0x00008f01
    8e58:	20000110 	.word	0x20000110
    8e5c:	00014280 	.word	0x00014280
    8e60:	000040f5 	.word	0x000040f5

00008e64 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8e64:	b480      	push	{r7}
    8e66:	b083      	sub	sp, #12
    8e68:	af00      	add	r7, sp, #0
    8e6a:	6078      	str	r0, [r7, #4]
    8e6c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8e6e:	687b      	ldr	r3, [r7, #4]
    8e70:	4a17      	ldr	r2, [pc, #92]	; (8ed0 <_tc_init_irq_param+0x6c>)
    8e72:	4293      	cmp	r3, r2
    8e74:	d102      	bne.n	8e7c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8e76:	4a17      	ldr	r2, [pc, #92]	; (8ed4 <_tc_init_irq_param+0x70>)
    8e78:	683b      	ldr	r3, [r7, #0]
    8e7a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	4a16      	ldr	r2, [pc, #88]	; (8ed8 <_tc_init_irq_param+0x74>)
    8e80:	4293      	cmp	r3, r2
    8e82:	d102      	bne.n	8e8a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8e84:	4a15      	ldr	r2, [pc, #84]	; (8edc <_tc_init_irq_param+0x78>)
    8e86:	683b      	ldr	r3, [r7, #0]
    8e88:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	4a14      	ldr	r2, [pc, #80]	; (8ee0 <_tc_init_irq_param+0x7c>)
    8e8e:	4293      	cmp	r3, r2
    8e90:	d102      	bne.n	8e98 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8e92:	4a14      	ldr	r2, [pc, #80]	; (8ee4 <_tc_init_irq_param+0x80>)
    8e94:	683b      	ldr	r3, [r7, #0]
    8e96:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	4a13      	ldr	r2, [pc, #76]	; (8ee8 <_tc_init_irq_param+0x84>)
    8e9c:	4293      	cmp	r3, r2
    8e9e:	d102      	bne.n	8ea6 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8ea0:	4a12      	ldr	r2, [pc, #72]	; (8eec <_tc_init_irq_param+0x88>)
    8ea2:	683b      	ldr	r3, [r7, #0]
    8ea4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	4a11      	ldr	r2, [pc, #68]	; (8ef0 <_tc_init_irq_param+0x8c>)
    8eaa:	4293      	cmp	r3, r2
    8eac:	d102      	bne.n	8eb4 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8eae:	4a11      	ldr	r2, [pc, #68]	; (8ef4 <_tc_init_irq_param+0x90>)
    8eb0:	683b      	ldr	r3, [r7, #0]
    8eb2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	4a10      	ldr	r2, [pc, #64]	; (8ef8 <_tc_init_irq_param+0x94>)
    8eb8:	4293      	cmp	r3, r2
    8eba:	d102      	bne.n	8ec2 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8ebc:	4a0f      	ldr	r2, [pc, #60]	; (8efc <_tc_init_irq_param+0x98>)
    8ebe:	683b      	ldr	r3, [r7, #0]
    8ec0:	6013      	str	r3, [r2, #0]
	}
}
    8ec2:	bf00      	nop
    8ec4:	370c      	adds	r7, #12
    8ec6:	46bd      	mov	sp, r7
    8ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ecc:	4770      	bx	lr
    8ece:	bf00      	nop
    8ed0:	40003800 	.word	0x40003800
    8ed4:	20000e84 	.word	0x20000e84
    8ed8:	4101a000 	.word	0x4101a000
    8edc:	20000e88 	.word	0x20000e88
    8ee0:	42001400 	.word	0x42001400
    8ee4:	20000e8c 	.word	0x20000e8c
    8ee8:	42001800 	.word	0x42001800
    8eec:	20000e90 	.word	0x20000e90
    8ef0:	43001400 	.word	0x43001400
    8ef4:	20000e94 	.word	0x20000e94
    8ef8:	43001800 	.word	0x43001800
    8efc:	20000e98 	.word	0x20000e98

00008f00 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8f00:	b4b0      	push	{r4, r5, r7}
    8f02:	b08d      	sub	sp, #52	; 0x34
    8f04:	af00      	add	r7, sp, #0
    8f06:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8f08:	4b13      	ldr	r3, [pc, #76]	; (8f58 <_get_hardware_offset+0x58>)
    8f0a:	f107 040c 	add.w	r4, r7, #12
    8f0e:	461d      	mov	r5, r3
    8f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8f14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8f1c:	2300      	movs	r3, #0
    8f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f20:	e010      	b.n	8f44 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f24:	009b      	lsls	r3, r3, #2
    8f26:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8f2a:	4413      	add	r3, r2
    8f2c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8f30:	461a      	mov	r2, r3
    8f32:	687b      	ldr	r3, [r7, #4]
    8f34:	429a      	cmp	r2, r3
    8f36:	d102      	bne.n	8f3e <_get_hardware_offset+0x3e>
			return i;
    8f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f3a:	b2db      	uxtb	r3, r3
    8f3c:	e006      	b.n	8f4c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f40:	3301      	adds	r3, #1
    8f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f46:	2b07      	cmp	r3, #7
    8f48:	d9eb      	bls.n	8f22 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8f4a:	2300      	movs	r3, #0
}
    8f4c:	4618      	mov	r0, r3
    8f4e:	3734      	adds	r7, #52	; 0x34
    8f50:	46bd      	mov	sp, r7
    8f52:	bcb0      	pop	{r4, r5, r7}
    8f54:	4770      	bx	lr
    8f56:	bf00      	nop
    8f58:	00014294 	.word	0x00014294

00008f5c <__NVIC_EnableIRQ>:
{
    8f5c:	b480      	push	{r7}
    8f5e:	b083      	sub	sp, #12
    8f60:	af00      	add	r7, sp, #0
    8f62:	4603      	mov	r3, r0
    8f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	db0b      	blt.n	8f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f6e:	4909      	ldr	r1, [pc, #36]	; (8f94 <__NVIC_EnableIRQ+0x38>)
    8f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f74:	095b      	lsrs	r3, r3, #5
    8f76:	88fa      	ldrh	r2, [r7, #6]
    8f78:	f002 021f 	and.w	r2, r2, #31
    8f7c:	2001      	movs	r0, #1
    8f7e:	fa00 f202 	lsl.w	r2, r0, r2
    8f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f86:	bf00      	nop
    8f88:	370c      	adds	r7, #12
    8f8a:	46bd      	mov	sp, r7
    8f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f90:	4770      	bx	lr
    8f92:	bf00      	nop
    8f94:	e000e100 	.word	0xe000e100

00008f98 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8f98:	b480      	push	{r7}
    8f9a:	b087      	sub	sp, #28
    8f9c:	af00      	add	r7, sp, #0
    8f9e:	60f8      	str	r0, [r7, #12]
    8fa0:	460b      	mov	r3, r1
    8fa2:	607a      	str	r2, [r7, #4]
    8fa4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8fa6:	7afa      	ldrb	r2, [r7, #11]
    8fa8:	68f9      	ldr	r1, [r7, #12]
    8faa:	4613      	mov	r3, r2
    8fac:	009b      	lsls	r3, r3, #2
    8fae:	4413      	add	r3, r2
    8fb0:	009b      	lsls	r3, r3, #2
    8fb2:	440b      	add	r3, r1
    8fb4:	3340      	adds	r3, #64	; 0x40
    8fb6:	681b      	ldr	r3, [r3, #0]
    8fb8:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8fba:	697a      	ldr	r2, [r7, #20]
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	4013      	ands	r3, r2
    8fc0:	617b      	str	r3, [r7, #20]
	return tmp;
    8fc2:	697b      	ldr	r3, [r7, #20]
}
    8fc4:	4618      	mov	r0, r3
    8fc6:	371c      	adds	r7, #28
    8fc8:	46bd      	mov	sp, r7
    8fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fce:	4770      	bx	lr

00008fd0 <hri_oscctrl_get_STATUS_reg>:
{
    8fd0:	b480      	push	{r7}
    8fd2:	b085      	sub	sp, #20
    8fd4:	af00      	add	r7, sp, #0
    8fd6:	6078      	str	r0, [r7, #4]
    8fd8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8fda:	687b      	ldr	r3, [r7, #4]
    8fdc:	691b      	ldr	r3, [r3, #16]
    8fde:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8fe0:	68fa      	ldr	r2, [r7, #12]
    8fe2:	683b      	ldr	r3, [r7, #0]
    8fe4:	4013      	ands	r3, r2
    8fe6:	60fb      	str	r3, [r7, #12]
	return tmp;
    8fe8:	68fb      	ldr	r3, [r7, #12]
}
    8fea:	4618      	mov	r0, r3
    8fec:	3714      	adds	r7, #20
    8fee:	46bd      	mov	sp, r7
    8ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff4:	4770      	bx	lr

00008ff6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8ff6:	b480      	push	{r7}
    8ff8:	b085      	sub	sp, #20
    8ffa:	af00      	add	r7, sp, #0
    8ffc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8ffe:	687b      	ldr	r3, [r7, #4]
    9000:	f893 3020 	ldrb.w	r3, [r3, #32]
    9004:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9006:	7bfb      	ldrb	r3, [r7, #15]
    9008:	f003 0301 	and.w	r3, r3, #1
    900c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    900e:	7bfb      	ldrb	r3, [r7, #15]
    9010:	2b00      	cmp	r3, #0
    9012:	bf14      	ite	ne
    9014:	2301      	movne	r3, #1
    9016:	2300      	moveq	r3, #0
    9018:	b2db      	uxtb	r3, r3
}
    901a:	4618      	mov	r0, r3
    901c:	3714      	adds	r7, #20
    901e:	46bd      	mov	sp, r7
    9020:	f85d 7b04 	ldr.w	r7, [sp], #4
    9024:	4770      	bx	lr

00009026 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9026:	b480      	push	{r7}
    9028:	b083      	sub	sp, #12
    902a:	af00      	add	r7, sp, #0
    902c:	6078      	str	r0, [r7, #4]
    902e:	460b      	mov	r3, r1
    9030:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9032:	bf00      	nop
    9034:	687b      	ldr	r3, [r7, #4]
    9036:	789b      	ldrb	r3, [r3, #2]
    9038:	b2da      	uxtb	r2, r3
    903a:	78fb      	ldrb	r3, [r7, #3]
    903c:	4013      	ands	r3, r2
    903e:	b2db      	uxtb	r3, r3
    9040:	2b00      	cmp	r3, #0
    9042:	d1f7      	bne.n	9034 <hri_usb_wait_for_sync+0xe>
	};
}
    9044:	bf00      	nop
    9046:	370c      	adds	r7, #12
    9048:	46bd      	mov	sp, r7
    904a:	f85d 7b04 	ldr.w	r7, [sp], #4
    904e:	4770      	bx	lr

00009050 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9050:	b480      	push	{r7}
    9052:	b083      	sub	sp, #12
    9054:	af00      	add	r7, sp, #0
    9056:	6078      	str	r0, [r7, #4]
    9058:	460b      	mov	r3, r1
    905a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	789b      	ldrb	r3, [r3, #2]
    9060:	b2da      	uxtb	r2, r3
    9062:	78fb      	ldrb	r3, [r7, #3]
    9064:	4013      	ands	r3, r2
    9066:	b2db      	uxtb	r3, r3
    9068:	2b00      	cmp	r3, #0
    906a:	bf14      	ite	ne
    906c:	2301      	movne	r3, #1
    906e:	2300      	moveq	r3, #0
    9070:	b2db      	uxtb	r3, r3
}
    9072:	4618      	mov	r0, r3
    9074:	370c      	adds	r7, #12
    9076:	46bd      	mov	sp, r7
    9078:	f85d 7b04 	ldr.w	r7, [sp], #4
    907c:	4770      	bx	lr

0000907e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    907e:	b480      	push	{r7}
    9080:	b085      	sub	sp, #20
    9082:	af00      	add	r7, sp, #0
    9084:	6078      	str	r0, [r7, #4]
    9086:	460b      	mov	r3, r1
    9088:	70fb      	strb	r3, [r7, #3]
    908a:	4613      	mov	r3, r2
    908c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    908e:	78fb      	ldrb	r3, [r7, #3]
    9090:	687a      	ldr	r2, [r7, #4]
    9092:	3308      	adds	r3, #8
    9094:	015b      	lsls	r3, r3, #5
    9096:	4413      	add	r3, r2
    9098:	3307      	adds	r3, #7
    909a:	781b      	ldrb	r3, [r3, #0]
    909c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    909e:	7bfa      	ldrb	r2, [r7, #15]
    90a0:	78bb      	ldrb	r3, [r7, #2]
    90a2:	4013      	ands	r3, r2
    90a4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    90a6:	7bfb      	ldrb	r3, [r7, #15]
}
    90a8:	4618      	mov	r0, r3
    90aa:	3714      	adds	r7, #20
    90ac:	46bd      	mov	sp, r7
    90ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b2:	4770      	bx	lr

000090b4 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    90b4:	b480      	push	{r7}
    90b6:	b083      	sub	sp, #12
    90b8:	af00      	add	r7, sp, #0
    90ba:	6078      	str	r0, [r7, #4]
    90bc:	460b      	mov	r3, r1
    90be:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    90c0:	78fb      	ldrb	r3, [r7, #3]
    90c2:	687a      	ldr	r2, [r7, #4]
    90c4:	3308      	adds	r3, #8
    90c6:	015b      	lsls	r3, r3, #5
    90c8:	4413      	add	r3, r2
    90ca:	3307      	adds	r3, #7
    90cc:	781b      	ldrb	r3, [r3, #0]
    90ce:	b2db      	uxtb	r3, r3
}
    90d0:	4618      	mov	r0, r3
    90d2:	370c      	adds	r7, #12
    90d4:	46bd      	mov	sp, r7
    90d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90da:	4770      	bx	lr

000090dc <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    90dc:	b480      	push	{r7}
    90de:	b083      	sub	sp, #12
    90e0:	af00      	add	r7, sp, #0
    90e2:	6078      	str	r0, [r7, #4]
    90e4:	460b      	mov	r3, r1
    90e6:	70fb      	strb	r3, [r7, #3]
    90e8:	4613      	mov	r3, r2
    90ea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    90ec:	78fb      	ldrb	r3, [r7, #3]
    90ee:	687a      	ldr	r2, [r7, #4]
    90f0:	3308      	adds	r3, #8
    90f2:	015b      	lsls	r3, r3, #5
    90f4:	4413      	add	r3, r2
    90f6:	3307      	adds	r3, #7
    90f8:	78ba      	ldrb	r2, [r7, #2]
    90fa:	701a      	strb	r2, [r3, #0]
}
    90fc:	bf00      	nop
    90fe:	370c      	adds	r7, #12
    9100:	46bd      	mov	sp, r7
    9102:	f85d 7b04 	ldr.w	r7, [sp], #4
    9106:	4770      	bx	lr

00009108 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9108:	b480      	push	{r7}
    910a:	b083      	sub	sp, #12
    910c:	af00      	add	r7, sp, #0
    910e:	6078      	str	r0, [r7, #4]
    9110:	460b      	mov	r3, r1
    9112:	70fb      	strb	r3, [r7, #3]
    9114:	4613      	mov	r3, r2
    9116:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9118:	78fb      	ldrb	r3, [r7, #3]
    911a:	687a      	ldr	r2, [r7, #4]
    911c:	3308      	adds	r3, #8
    911e:	015b      	lsls	r3, r3, #5
    9120:	4413      	add	r3, r2
    9122:	3305      	adds	r3, #5
    9124:	78ba      	ldrb	r2, [r7, #2]
    9126:	701a      	strb	r2, [r3, #0]
}
    9128:	bf00      	nop
    912a:	370c      	adds	r7, #12
    912c:	46bd      	mov	sp, r7
    912e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9132:	4770      	bx	lr

00009134 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9134:	b480      	push	{r7}
    9136:	b083      	sub	sp, #12
    9138:	af00      	add	r7, sp, #0
    913a:	6078      	str	r0, [r7, #4]
    913c:	460b      	mov	r3, r1
    913e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9140:	78fb      	ldrb	r3, [r7, #3]
    9142:	687a      	ldr	r2, [r7, #4]
    9144:	3308      	adds	r3, #8
    9146:	015b      	lsls	r3, r3, #5
    9148:	4413      	add	r3, r2
    914a:	3306      	adds	r3, #6
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	b2db      	uxtb	r3, r3
}
    9150:	4618      	mov	r0, r3
    9152:	370c      	adds	r7, #12
    9154:	46bd      	mov	sp, r7
    9156:	f85d 7b04 	ldr.w	r7, [sp], #4
    915a:	4770      	bx	lr

0000915c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    915c:	b480      	push	{r7}
    915e:	b083      	sub	sp, #12
    9160:	af00      	add	r7, sp, #0
    9162:	6078      	str	r0, [r7, #4]
    9164:	460b      	mov	r3, r1
    9166:	70fb      	strb	r3, [r7, #3]
    9168:	4613      	mov	r3, r2
    916a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    916c:	78fb      	ldrb	r3, [r7, #3]
    916e:	687a      	ldr	r2, [r7, #4]
    9170:	3308      	adds	r3, #8
    9172:	015b      	lsls	r3, r3, #5
    9174:	4413      	add	r3, r2
    9176:	3304      	adds	r3, #4
    9178:	78ba      	ldrb	r2, [r7, #2]
    917a:	701a      	strb	r2, [r3, #0]
}
    917c:	bf00      	nop
    917e:	370c      	adds	r7, #12
    9180:	46bd      	mov	sp, r7
    9182:	f85d 7b04 	ldr.w	r7, [sp], #4
    9186:	4770      	bx	lr

00009188 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9188:	b480      	push	{r7}
    918a:	b083      	sub	sp, #12
    918c:	af00      	add	r7, sp, #0
    918e:	6078      	str	r0, [r7, #4]
    9190:	460b      	mov	r3, r1
    9192:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9194:	78fb      	ldrb	r3, [r7, #3]
    9196:	687a      	ldr	r2, [r7, #4]
    9198:	015b      	lsls	r3, r3, #5
    919a:	4413      	add	r3, r2
    919c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    91a0:	2210      	movs	r2, #16
    91a2:	701a      	strb	r2, [r3, #0]
}
    91a4:	bf00      	nop
    91a6:	370c      	adds	r7, #12
    91a8:	46bd      	mov	sp, r7
    91aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ae:	4770      	bx	lr

000091b0 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    91b0:	b480      	push	{r7}
    91b2:	b083      	sub	sp, #12
    91b4:	af00      	add	r7, sp, #0
    91b6:	6078      	str	r0, [r7, #4]
    91b8:	460b      	mov	r3, r1
    91ba:	70fb      	strb	r3, [r7, #3]
    91bc:	4613      	mov	r3, r2
    91be:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    91c0:	78fb      	ldrb	r3, [r7, #3]
    91c2:	687a      	ldr	r2, [r7, #4]
    91c4:	015b      	lsls	r3, r3, #5
    91c6:	4413      	add	r3, r2
    91c8:	f203 1309 	addw	r3, r3, #265	; 0x109
    91cc:	78ba      	ldrb	r2, [r7, #2]
    91ce:	701a      	strb	r2, [r3, #0]
}
    91d0:	bf00      	nop
    91d2:	370c      	adds	r7, #12
    91d4:	46bd      	mov	sp, r7
    91d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91da:	4770      	bx	lr

000091dc <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    91dc:	b480      	push	{r7}
    91de:	b083      	sub	sp, #12
    91e0:	af00      	add	r7, sp, #0
    91e2:	6078      	str	r0, [r7, #4]
    91e4:	460b      	mov	r3, r1
    91e6:	70fb      	strb	r3, [r7, #3]
    91e8:	4613      	mov	r3, r2
    91ea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    91ec:	78fb      	ldrb	r3, [r7, #3]
    91ee:	687a      	ldr	r2, [r7, #4]
    91f0:	015b      	lsls	r3, r3, #5
    91f2:	4413      	add	r3, r2
    91f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    91f8:	78ba      	ldrb	r2, [r7, #2]
    91fa:	701a      	strb	r2, [r3, #0]
}
    91fc:	bf00      	nop
    91fe:	370c      	adds	r7, #12
    9200:	46bd      	mov	sp, r7
    9202:	f85d 7b04 	ldr.w	r7, [sp], #4
    9206:	4770      	bx	lr

00009208 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9208:	b480      	push	{r7}
    920a:	b085      	sub	sp, #20
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
    9210:	460b      	mov	r3, r1
    9212:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9214:	78fb      	ldrb	r3, [r7, #3]
    9216:	687a      	ldr	r2, [r7, #4]
    9218:	3308      	adds	r3, #8
    921a:	015b      	lsls	r3, r3, #5
    921c:	4413      	add	r3, r2
    921e:	781b      	ldrb	r3, [r3, #0]
    9220:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9222:	7bfb      	ldrb	r3, [r7, #15]
    9224:	f003 0307 	and.w	r3, r3, #7
    9228:	73fb      	strb	r3, [r7, #15]
	return tmp;
    922a:	7bfb      	ldrb	r3, [r7, #15]
}
    922c:	4618      	mov	r0, r3
    922e:	3714      	adds	r7, #20
    9230:	46bd      	mov	sp, r7
    9232:	f85d 7b04 	ldr.w	r7, [sp], #4
    9236:	4770      	bx	lr

00009238 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9238:	b480      	push	{r7}
    923a:	b085      	sub	sp, #20
    923c:	af00      	add	r7, sp, #0
    923e:	6078      	str	r0, [r7, #4]
    9240:	460b      	mov	r3, r1
    9242:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9244:	78fb      	ldrb	r3, [r7, #3]
    9246:	687a      	ldr	r2, [r7, #4]
    9248:	3308      	adds	r3, #8
    924a:	015b      	lsls	r3, r3, #5
    924c:	4413      	add	r3, r2
    924e:	781b      	ldrb	r3, [r3, #0]
    9250:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9252:	7bfb      	ldrb	r3, [r7, #15]
    9254:	091b      	lsrs	r3, r3, #4
    9256:	b2db      	uxtb	r3, r3
    9258:	f003 0307 	and.w	r3, r3, #7
    925c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    925e:	7bfb      	ldrb	r3, [r7, #15]
}
    9260:	4618      	mov	r0, r3
    9262:	3714      	adds	r7, #20
    9264:	46bd      	mov	sp, r7
    9266:	f85d 7b04 	ldr.w	r7, [sp], #4
    926a:	4770      	bx	lr

0000926c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    926c:	b480      	push	{r7}
    926e:	b083      	sub	sp, #12
    9270:	af00      	add	r7, sp, #0
    9272:	6078      	str	r0, [r7, #4]
    9274:	460b      	mov	r3, r1
    9276:	70fb      	strb	r3, [r7, #3]
    9278:	4613      	mov	r3, r2
    927a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    927c:	78fb      	ldrb	r3, [r7, #3]
    927e:	687a      	ldr	r2, [r7, #4]
    9280:	3308      	adds	r3, #8
    9282:	015b      	lsls	r3, r3, #5
    9284:	4413      	add	r3, r2
    9286:	78ba      	ldrb	r2, [r7, #2]
    9288:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    928a:	bf00      	nop
    928c:	370c      	adds	r7, #12
    928e:	46bd      	mov	sp, r7
    9290:	f85d 7b04 	ldr.w	r7, [sp], #4
    9294:	4770      	bx	lr

00009296 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    9296:	b480      	push	{r7}
    9298:	b083      	sub	sp, #12
    929a:	af00      	add	r7, sp, #0
    929c:	6078      	str	r0, [r7, #4]
    929e:	460b      	mov	r3, r1
    92a0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    92a2:	78fb      	ldrb	r3, [r7, #3]
    92a4:	687a      	ldr	r2, [r7, #4]
    92a6:	3308      	adds	r3, #8
    92a8:	015b      	lsls	r3, r3, #5
    92aa:	4413      	add	r3, r2
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	b2db      	uxtb	r3, r3
}
    92b0:	4618      	mov	r0, r3
    92b2:	370c      	adds	r7, #12
    92b4:	46bd      	mov	sp, r7
    92b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ba:	4770      	bx	lr

000092bc <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    92bc:	b480      	push	{r7}
    92be:	b083      	sub	sp, #12
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	8b9b      	ldrh	r3, [r3, #28]
    92c8:	b29b      	uxth	r3, r3
}
    92ca:	4618      	mov	r0, r3
    92cc:	370c      	adds	r7, #12
    92ce:	46bd      	mov	sp, r7
    92d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92d4:	4770      	bx	lr

000092d6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    92d6:	b480      	push	{r7}
    92d8:	b083      	sub	sp, #12
    92da:	af00      	add	r7, sp, #0
    92dc:	6078      	str	r0, [r7, #4]
    92de:	460b      	mov	r3, r1
    92e0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	887a      	ldrh	r2, [r7, #2]
    92e6:	839a      	strh	r2, [r3, #28]
}
    92e8:	bf00      	nop
    92ea:	370c      	adds	r7, #12
    92ec:	46bd      	mov	sp, r7
    92ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f2:	4770      	bx	lr

000092f4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    92f4:	b480      	push	{r7}
    92f6:	b083      	sub	sp, #12
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
    92fc:	460b      	mov	r3, r1
    92fe:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	887a      	ldrh	r2, [r7, #2]
    9304:	831a      	strh	r2, [r3, #24]
}
    9306:	bf00      	nop
    9308:	370c      	adds	r7, #12
    930a:	46bd      	mov	sp, r7
    930c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9310:	4770      	bx	lr

00009312 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9312:	b480      	push	{r7}
    9314:	b083      	sub	sp, #12
    9316:	af00      	add	r7, sp, #0
    9318:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	8b1b      	ldrh	r3, [r3, #24]
    931e:	b29b      	uxth	r3, r3
}
    9320:	4618      	mov	r0, r3
    9322:	370c      	adds	r7, #12
    9324:	46bd      	mov	sp, r7
    9326:	f85d 7b04 	ldr.w	r7, [sp], #4
    932a:	4770      	bx	lr

0000932c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    932c:	b480      	push	{r7}
    932e:	b083      	sub	sp, #12
    9330:	af00      	add	r7, sp, #0
    9332:	6078      	str	r0, [r7, #4]
    9334:	460b      	mov	r3, r1
    9336:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	887a      	ldrh	r2, [r7, #2]
    933c:	829a      	strh	r2, [r3, #20]
}
    933e:	bf00      	nop
    9340:	370c      	adds	r7, #12
    9342:	46bd      	mov	sp, r7
    9344:	f85d 7b04 	ldr.w	r7, [sp], #4
    9348:	4770      	bx	lr

0000934a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    934a:	b480      	push	{r7}
    934c:	b085      	sub	sp, #20
    934e:	af00      	add	r7, sp, #0
    9350:	6078      	str	r0, [r7, #4]
    9352:	460b      	mov	r3, r1
    9354:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    9356:	687b      	ldr	r3, [r7, #4]
    9358:	789b      	ldrb	r3, [r3, #2]
    935a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    935c:	7bfa      	ldrb	r2, [r7, #15]
    935e:	78fb      	ldrb	r3, [r7, #3]
    9360:	4013      	ands	r3, r2
    9362:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9364:	7bfb      	ldrb	r3, [r7, #15]
}
    9366:	4618      	mov	r0, r3
    9368:	3714      	adds	r7, #20
    936a:	46bd      	mov	sp, r7
    936c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9370:	4770      	bx	lr
	...

00009374 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9374:	b580      	push	{r7, lr}
    9376:	b082      	sub	sp, #8
    9378:	af00      	add	r7, sp, #0
    937a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	781b      	ldrb	r3, [r3, #0]
    9380:	b2db      	uxtb	r3, r3
    9382:	f023 0302 	bic.w	r3, r3, #2
    9386:	b2da      	uxtb	r2, r3
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    938c:	2103      	movs	r1, #3
    938e:	6878      	ldr	r0, [r7, #4]
    9390:	4b02      	ldr	r3, [pc, #8]	; (939c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9392:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9394:	bf00      	nop
    9396:	3708      	adds	r7, #8
    9398:	46bd      	mov	sp, r7
    939a:	bd80      	pop	{r7, pc}
    939c:	00009027 	.word	0x00009027

000093a0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    93a0:	b580      	push	{r7, lr}
    93a2:	b084      	sub	sp, #16
    93a4:	af00      	add	r7, sp, #0
    93a6:	6078      	str	r0, [r7, #4]
    93a8:	460b      	mov	r3, r1
    93aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    93ac:	2103      	movs	r1, #3
    93ae:	6878      	ldr	r0, [r7, #4]
    93b0:	4b06      	ldr	r3, [pc, #24]	; (93cc <hri_usb_get_CTRLA_reg+0x2c>)
    93b2:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    93b4:	687b      	ldr	r3, [r7, #4]
    93b6:	781b      	ldrb	r3, [r3, #0]
    93b8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    93ba:	7bfa      	ldrb	r2, [r7, #15]
    93bc:	78fb      	ldrb	r3, [r7, #3]
    93be:	4013      	ands	r3, r2
    93c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    93c2:	7bfb      	ldrb	r3, [r7, #15]
}
    93c4:	4618      	mov	r0, r3
    93c6:	3710      	adds	r7, #16
    93c8:	46bd      	mov	sp, r7
    93ca:	bd80      	pop	{r7, pc}
    93cc:	00009027 	.word	0x00009027

000093d0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    93d0:	b580      	push	{r7, lr}
    93d2:	b082      	sub	sp, #8
    93d4:	af00      	add	r7, sp, #0
    93d6:	6078      	str	r0, [r7, #4]
    93d8:	460b      	mov	r3, r1
    93da:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    93dc:	687b      	ldr	r3, [r7, #4]
    93de:	78fa      	ldrb	r2, [r7, #3]
    93e0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    93e2:	2103      	movs	r1, #3
    93e4:	6878      	ldr	r0, [r7, #4]
    93e6:	4b03      	ldr	r3, [pc, #12]	; (93f4 <hri_usb_write_CTRLA_reg+0x24>)
    93e8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    93ea:	bf00      	nop
    93ec:	3708      	adds	r7, #8
    93ee:	46bd      	mov	sp, r7
    93f0:	bd80      	pop	{r7, pc}
    93f2:	bf00      	nop
    93f4:	00009027 	.word	0x00009027

000093f8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    93f8:	b580      	push	{r7, lr}
    93fa:	b082      	sub	sp, #8
    93fc:	af00      	add	r7, sp, #0
    93fe:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9400:	2103      	movs	r1, #3
    9402:	6878      	ldr	r0, [r7, #4]
    9404:	4b04      	ldr	r3, [pc, #16]	; (9418 <hri_usb_read_CTRLA_reg+0x20>)
    9406:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9408:	687b      	ldr	r3, [r7, #4]
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	b2db      	uxtb	r3, r3
}
    940e:	4618      	mov	r0, r3
    9410:	3708      	adds	r7, #8
    9412:	46bd      	mov	sp, r7
    9414:	bd80      	pop	{r7, pc}
    9416:	bf00      	nop
    9418:	00009027 	.word	0x00009027

0000941c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    941c:	b480      	push	{r7}
    941e:	b083      	sub	sp, #12
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9424:	687b      	ldr	r3, [r7, #4]
    9426:	891b      	ldrh	r3, [r3, #8]
    9428:	b29b      	uxth	r3, r3
    942a:	f023 0301 	bic.w	r3, r3, #1
    942e:	b29a      	uxth	r2, r3
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9434:	bf00      	nop
    9436:	370c      	adds	r7, #12
    9438:	46bd      	mov	sp, r7
    943a:	f85d 7b04 	ldr.w	r7, [sp], #4
    943e:	4770      	bx	lr

00009440 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9440:	b480      	push	{r7}
    9442:	b083      	sub	sp, #12
    9444:	af00      	add	r7, sp, #0
    9446:	6078      	str	r0, [r7, #4]
    9448:	460b      	mov	r3, r1
    944a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    944c:	687b      	ldr	r3, [r7, #4]
    944e:	887a      	ldrh	r2, [r7, #2]
    9450:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9452:	bf00      	nop
    9454:	370c      	adds	r7, #12
    9456:	46bd      	mov	sp, r7
    9458:	f85d 7b04 	ldr.w	r7, [sp], #4
    945c:	4770      	bx	lr

0000945e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    945e:	b480      	push	{r7}
    9460:	b083      	sub	sp, #12
    9462:	af00      	add	r7, sp, #0
    9464:	6078      	str	r0, [r7, #4]
    9466:	460b      	mov	r3, r1
    9468:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	78fa      	ldrb	r2, [r7, #3]
    946e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9470:	bf00      	nop
    9472:	370c      	adds	r7, #12
    9474:	46bd      	mov	sp, r7
    9476:	f85d 7b04 	ldr.w	r7, [sp], #4
    947a:	4770      	bx	lr

0000947c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    947c:	b480      	push	{r7}
    947e:	b083      	sub	sp, #12
    9480:	af00      	add	r7, sp, #0
    9482:	6078      	str	r0, [r7, #4]
    9484:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    9486:	687b      	ldr	r3, [r7, #4]
    9488:	683a      	ldr	r2, [r7, #0]
    948a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    948c:	bf00      	nop
    948e:	370c      	adds	r7, #12
    9490:	46bd      	mov	sp, r7
    9492:	f85d 7b04 	ldr.w	r7, [sp], #4
    9496:	4770      	bx	lr

00009498 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9498:	b480      	push	{r7}
    949a:	b083      	sub	sp, #12
    949c:	af00      	add	r7, sp, #0
    949e:	6078      	str	r0, [r7, #4]
    94a0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    94a2:	2300      	movs	r3, #0
}
    94a4:	4618      	mov	r0, r3
    94a6:	370c      	adds	r7, #12
    94a8:	46bd      	mov	sp, r7
    94aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ae:	4770      	bx	lr

000094b0 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    94b0:	b480      	push	{r7}
    94b2:	b085      	sub	sp, #20
    94b4:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    94b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94ba:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    94bc:	4b28      	ldr	r3, [pc, #160]	; (9560 <_usb_load_calib+0xb0>)
    94be:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    94c0:	f003 031f 	and.w	r3, r3, #31
    94c4:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    94c6:	4b26      	ldr	r3, [pc, #152]	; (9560 <_usb_load_calib+0xb0>)
    94c8:	681b      	ldr	r3, [r3, #0]
    94ca:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    94cc:	f003 031f 	and.w	r3, r3, #31
    94d0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    94d2:	4b23      	ldr	r3, [pc, #140]	; (9560 <_usb_load_calib+0xb0>)
    94d4:	681b      	ldr	r3, [r3, #0]
    94d6:	0a9b      	lsrs	r3, r3, #10
    94d8:	f003 0307 	and.w	r3, r3, #7
    94dc:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    94de:	68fb      	ldr	r3, [r7, #12]
    94e0:	2b00      	cmp	r3, #0
    94e2:	d002      	beq.n	94ea <_usb_load_calib+0x3a>
    94e4:	68fb      	ldr	r3, [r7, #12]
    94e6:	2b1f      	cmp	r3, #31
    94e8:	d101      	bne.n	94ee <_usb_load_calib+0x3e>
		pad_transn = 9;
    94ea:	2309      	movs	r3, #9
    94ec:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    94ee:	68bb      	ldr	r3, [r7, #8]
    94f0:	2b00      	cmp	r3, #0
    94f2:	d002      	beq.n	94fa <_usb_load_calib+0x4a>
    94f4:	68bb      	ldr	r3, [r7, #8]
    94f6:	2b1f      	cmp	r3, #31
    94f8:	d101      	bne.n	94fe <_usb_load_calib+0x4e>
		pad_transp = 25;
    94fa:	2319      	movs	r3, #25
    94fc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	2b00      	cmp	r3, #0
    9502:	d002      	beq.n	950a <_usb_load_calib+0x5a>
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	2b07      	cmp	r3, #7
    9508:	d101      	bne.n	950e <_usb_load_calib+0x5e>
		pad_trim = 6;
    950a:	2306      	movs	r3, #6
    950c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    950e:	68fb      	ldr	r3, [r7, #12]
    9510:	b29b      	uxth	r3, r3
    9512:	019b      	lsls	r3, r3, #6
    9514:	b29b      	uxth	r3, r3
    9516:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    951a:	b29a      	uxth	r2, r3
    951c:	68bb      	ldr	r3, [r7, #8]
    951e:	b29b      	uxth	r3, r3
    9520:	f003 031f 	and.w	r3, r3, #31
    9524:	b29b      	uxth	r3, r3
    9526:	4313      	orrs	r3, r2
    9528:	b29a      	uxth	r2, r3
    952a:	687b      	ldr	r3, [r7, #4]
    952c:	b29b      	uxth	r3, r3
    952e:	031b      	lsls	r3, r3, #12
    9530:	b29b      	uxth	r3, r3
    9532:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9536:	b29b      	uxth	r3, r3
    9538:	4313      	orrs	r3, r2
    953a:	b29a      	uxth	r2, r3
    953c:	683b      	ldr	r3, [r7, #0]
    953e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9540:	683a      	ldr	r2, [r7, #0]
    9542:	78d3      	ldrb	r3, [r2, #3]
    9544:	f043 0303 	orr.w	r3, r3, #3
    9548:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    954a:	683a      	ldr	r2, [r7, #0]
    954c:	78d3      	ldrb	r3, [r2, #3]
    954e:	f043 030c 	orr.w	r3, r3, #12
    9552:	70d3      	strb	r3, [r2, #3]
}
    9554:	bf00      	nop
    9556:	3714      	adds	r7, #20
    9558:	46bd      	mov	sp, r7
    955a:	f85d 7b04 	ldr.w	r7, [sp], #4
    955e:	4770      	bx	lr
    9560:	00800084 	.word	0x00800084

00009564 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    9564:	b580      	push	{r7, lr}
    9566:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9568:	bf00      	nop
    956a:	2203      	movs	r2, #3
    956c:	2100      	movs	r1, #0
    956e:	4804      	ldr	r0, [pc, #16]	; (9580 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9570:	4b04      	ldr	r3, [pc, #16]	; (9584 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9572:	4798      	blx	r3
    9574:	4603      	mov	r3, r0
    9576:	2b03      	cmp	r3, #3
    9578:	d1f7      	bne.n	956a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    957a:	bf00      	nop
    957c:	bd80      	pop	{r7, pc}
    957e:	bf00      	nop
    9580:	40001000 	.word	0x40001000
    9584:	00008f99 	.word	0x00008f99

00009588 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9588:	b580      	push	{r7, lr}
    958a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    958c:	480e      	ldr	r0, [pc, #56]	; (95c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    958e:	4b0f      	ldr	r3, [pc, #60]	; (95cc <_usb_d_dev_wait_dfll_rdy+0x44>)
    9590:	4798      	blx	r3
    9592:	4603      	mov	r3, r0
    9594:	2b00      	cmp	r3, #0
    9596:	d00a      	beq.n	95ae <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9598:	bf00      	nop
    959a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    959e:	480a      	ldr	r0, [pc, #40]	; (95c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    95a0:	4b0b      	ldr	r3, [pc, #44]	; (95d0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    95a2:	4798      	blx	r3
    95a4:	4603      	mov	r3, r0
    95a6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    95aa:	d1f6      	bne.n	959a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    95ac:	e009      	b.n	95c2 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    95ae:	bf00      	nop
    95b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    95b4:	4804      	ldr	r0, [pc, #16]	; (95c8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    95b6:	4b06      	ldr	r3, [pc, #24]	; (95d0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    95b8:	4798      	blx	r3
    95ba:	4603      	mov	r3, r0
    95bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    95c0:	d1f6      	bne.n	95b0 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    95c2:	bf00      	nop
    95c4:	bd80      	pop	{r7, pc}
    95c6:	bf00      	nop
    95c8:	40001000 	.word	0x40001000
    95cc:	00008ff7 	.word	0x00008ff7
    95d0:	00008fd1 	.word	0x00008fd1

000095d4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    95d4:	b580      	push	{r7, lr}
    95d6:	b082      	sub	sp, #8
    95d8:	af00      	add	r7, sp, #0
    95da:	4603      	mov	r3, r0
    95dc:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    95de:	79fb      	ldrb	r3, [r7, #7]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d102      	bne.n	95ea <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    95e4:	4b05      	ldr	r3, [pc, #20]	; (95fc <_usb_d_dev_wait_clk_rdy+0x28>)
    95e6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    95e8:	e004      	b.n	95f4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    95ea:	79fb      	ldrb	r3, [r7, #7]
    95ec:	2b01      	cmp	r3, #1
    95ee:	d101      	bne.n	95f4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    95f0:	4b03      	ldr	r3, [pc, #12]	; (9600 <_usb_d_dev_wait_clk_rdy+0x2c>)
    95f2:	4798      	blx	r3
}
    95f4:	bf00      	nop
    95f6:	3708      	adds	r7, #8
    95f8:	46bd      	mov	sp, r7
    95fa:	bd80      	pop	{r7, pc}
    95fc:	00009589 	.word	0x00009589
    9600:	00009565 	.word	0x00009565

00009604 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9604:	b580      	push	{r7, lr}
    9606:	b082      	sub	sp, #8
    9608:	af00      	add	r7, sp, #0
    960a:	4603      	mov	r3, r0
    960c:	6039      	str	r1, [r7, #0]
    960e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9610:	683b      	ldr	r3, [r7, #0]
    9612:	b2da      	uxtb	r2, r3
    9614:	79fb      	ldrb	r3, [r7, #7]
    9616:	4619      	mov	r1, r3
    9618:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    961c:	4b02      	ldr	r3, [pc, #8]	; (9628 <_usbd_ep_int_ack+0x24>)
    961e:	4798      	blx	r3
}
    9620:	bf00      	nop
    9622:	3708      	adds	r7, #8
    9624:	46bd      	mov	sp, r7
    9626:	bd80      	pop	{r7, pc}
    9628:	000090dd 	.word	0x000090dd

0000962c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    962c:	b580      	push	{r7, lr}
    962e:	b082      	sub	sp, #8
    9630:	af00      	add	r7, sp, #0
    9632:	4603      	mov	r3, r0
    9634:	6039      	str	r1, [r7, #0]
    9636:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9638:	683b      	ldr	r3, [r7, #0]
    963a:	b2da      	uxtb	r2, r3
    963c:	79fb      	ldrb	r3, [r7, #7]
    963e:	4619      	mov	r1, r3
    9640:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9644:	4b02      	ldr	r3, [pc, #8]	; (9650 <_usbd_ep_int_en+0x24>)
    9646:	4798      	blx	r3
}
    9648:	bf00      	nop
    964a:	3708      	adds	r7, #8
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}
    9650:	000091b1 	.word	0x000091b1

00009654 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9654:	b580      	push	{r7, lr}
    9656:	b082      	sub	sp, #8
    9658:	af00      	add	r7, sp, #0
    965a:	4603      	mov	r3, r0
    965c:	6039      	str	r1, [r7, #0]
    965e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9660:	683b      	ldr	r3, [r7, #0]
    9662:	b2da      	uxtb	r2, r3
    9664:	79fb      	ldrb	r3, [r7, #7]
    9666:	4619      	mov	r1, r3
    9668:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    966c:	4b02      	ldr	r3, [pc, #8]	; (9678 <_usbd_ep_int_dis+0x24>)
    966e:	4798      	blx	r3
}
    9670:	bf00      	nop
    9672:	3708      	adds	r7, #8
    9674:	46bd      	mov	sp, r7
    9676:	bd80      	pop	{r7, pc}
    9678:	000091dd 	.word	0x000091dd

0000967c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    967c:	b580      	push	{r7, lr}
    967e:	b082      	sub	sp, #8
    9680:	af00      	add	r7, sp, #0
    9682:	4603      	mov	r3, r0
    9684:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    9686:	79fb      	ldrb	r3, [r7, #7]
    9688:	4619      	mov	r1, r3
    968a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    968e:	4b06      	ldr	r3, [pc, #24]	; (96a8 <_usbd_ep_is_ctrl+0x2c>)
    9690:	4798      	blx	r3
    9692:	4603      	mov	r3, r0
    9694:	2b11      	cmp	r3, #17
    9696:	bf0c      	ite	eq
    9698:	2301      	moveq	r3, #1
    969a:	2300      	movne	r3, #0
    969c:	b2db      	uxtb	r3, r3
}
    969e:	4618      	mov	r0, r3
    96a0:	3708      	adds	r7, #8
    96a2:	46bd      	mov	sp, r7
    96a4:	bd80      	pop	{r7, pc}
    96a6:	bf00      	nop
    96a8:	00009297 	.word	0x00009297

000096ac <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    96ac:	b580      	push	{r7, lr}
    96ae:	b082      	sub	sp, #8
    96b0:	af00      	add	r7, sp, #0
    96b2:	4603      	mov	r3, r0
    96b4:	71fb      	strb	r3, [r7, #7]
    96b6:	460b      	mov	r3, r1
    96b8:	71bb      	strb	r3, [r7, #6]
    96ba:	4613      	mov	r3, r2
    96bc:	717b      	strb	r3, [r7, #5]
	if (st) {
    96be:	797b      	ldrb	r3, [r7, #5]
    96c0:	2b00      	cmp	r3, #0
    96c2:	d00b      	beq.n	96dc <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96c4:	79bb      	ldrb	r3, [r7, #6]
    96c6:	2210      	movs	r2, #16
    96c8:	fa02 f303 	lsl.w	r3, r2, r3
    96cc:	b2da      	uxtb	r2, r3
    96ce:	79fb      	ldrb	r3, [r7, #7]
    96d0:	4619      	mov	r1, r3
    96d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96d6:	4b09      	ldr	r3, [pc, #36]	; (96fc <_usbd_ep_set_stall+0x50>)
    96d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    96da:	e00a      	b.n	96f2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96dc:	79bb      	ldrb	r3, [r7, #6]
    96de:	2210      	movs	r2, #16
    96e0:	fa02 f303 	lsl.w	r3, r2, r3
    96e4:	b2da      	uxtb	r2, r3
    96e6:	79fb      	ldrb	r3, [r7, #7]
    96e8:	4619      	mov	r1, r3
    96ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96ee:	4b04      	ldr	r3, [pc, #16]	; (9700 <_usbd_ep_set_stall+0x54>)
    96f0:	4798      	blx	r3
}
    96f2:	bf00      	nop
    96f4:	3708      	adds	r7, #8
    96f6:	46bd      	mov	sp, r7
    96f8:	bd80      	pop	{r7, pc}
    96fa:	bf00      	nop
    96fc:	00009109 	.word	0x00009109
    9700:	0000915d 	.word	0x0000915d

00009704 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9704:	b580      	push	{r7, lr}
    9706:	b084      	sub	sp, #16
    9708:	af00      	add	r7, sp, #0
    970a:	4603      	mov	r3, r0
    970c:	460a      	mov	r2, r1
    970e:	71fb      	strb	r3, [r7, #7]
    9710:	4613      	mov	r3, r2
    9712:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9714:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9718:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    971a:	79fb      	ldrb	r3, [r7, #7]
    971c:	4619      	mov	r1, r3
    971e:	68f8      	ldr	r0, [r7, #12]
    9720:	4b08      	ldr	r3, [pc, #32]	; (9744 <_usbd_ep_is_stalled+0x40>)
    9722:	4798      	blx	r3
    9724:	4603      	mov	r3, r0
    9726:	4619      	mov	r1, r3
    9728:	79bb      	ldrb	r3, [r7, #6]
    972a:	2210      	movs	r2, #16
    972c:	fa02 f303 	lsl.w	r3, r2, r3
    9730:	400b      	ands	r3, r1
    9732:	2b00      	cmp	r3, #0
    9734:	bf14      	ite	ne
    9736:	2301      	movne	r3, #1
    9738:	2300      	moveq	r3, #0
    973a:	b2db      	uxtb	r3, r3
}
    973c:	4618      	mov	r0, r3
    973e:	3710      	adds	r7, #16
    9740:	46bd      	mov	sp, r7
    9742:	bd80      	pop	{r7, pc}
    9744:	00009135 	.word	0x00009135

00009748 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9748:	b580      	push	{r7, lr}
    974a:	b084      	sub	sp, #16
    974c:	af00      	add	r7, sp, #0
    974e:	4603      	mov	r3, r0
    9750:	460a      	mov	r2, r1
    9752:	71fb      	strb	r3, [r7, #7]
    9754:	4613      	mov	r3, r2
    9756:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9758:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    975c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    975e:	79fb      	ldrb	r3, [r7, #7]
    9760:	4619      	mov	r1, r3
    9762:	68f8      	ldr	r0, [r7, #12]
    9764:	4b08      	ldr	r3, [pc, #32]	; (9788 <_usbd_ep_is_stall_sent+0x40>)
    9766:	4798      	blx	r3
    9768:	4603      	mov	r3, r0
    976a:	4619      	mov	r1, r3
    976c:	79bb      	ldrb	r3, [r7, #6]
    976e:	2220      	movs	r2, #32
    9770:	fa02 f303 	lsl.w	r3, r2, r3
    9774:	400b      	ands	r3, r1
    9776:	2b00      	cmp	r3, #0
    9778:	bf14      	ite	ne
    977a:	2301      	movne	r3, #1
    977c:	2300      	moveq	r3, #0
    977e:	b2db      	uxtb	r3, r3
}
    9780:	4618      	mov	r0, r3
    9782:	3710      	adds	r7, #16
    9784:	46bd      	mov	sp, r7
    9786:	bd80      	pop	{r7, pc}
    9788:	000090b5 	.word	0x000090b5

0000978c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    978c:	b580      	push	{r7, lr}
    978e:	b082      	sub	sp, #8
    9790:	af00      	add	r7, sp, #0
    9792:	4603      	mov	r3, r0
    9794:	460a      	mov	r2, r1
    9796:	71fb      	strb	r3, [r7, #7]
    9798:	4613      	mov	r3, r2
    979a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    979c:	79bb      	ldrb	r3, [r7, #6]
    979e:	2220      	movs	r2, #32
    97a0:	409a      	lsls	r2, r3
    97a2:	79fb      	ldrb	r3, [r7, #7]
    97a4:	4611      	mov	r1, r2
    97a6:	4618      	mov	r0, r3
    97a8:	4b02      	ldr	r3, [pc, #8]	; (97b4 <_usbd_ep_ack_stall+0x28>)
    97aa:	4798      	blx	r3
}
    97ac:	bf00      	nop
    97ae:	3708      	adds	r7, #8
    97b0:	46bd      	mov	sp, r7
    97b2:	bd80      	pop	{r7, pc}
    97b4:	00009605 	.word	0x00009605

000097b8 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	4603      	mov	r3, r0
    97c0:	71fb      	strb	r3, [r7, #7]
    97c2:	460b      	mov	r3, r1
    97c4:	71bb      	strb	r3, [r7, #6]
    97c6:	4613      	mov	r3, r2
    97c8:	717b      	strb	r3, [r7, #5]
	if (en) {
    97ca:	797b      	ldrb	r3, [r7, #5]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d008      	beq.n	97e2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    97d0:	79bb      	ldrb	r3, [r7, #6]
    97d2:	2220      	movs	r2, #32
    97d4:	409a      	lsls	r2, r3
    97d6:	79fb      	ldrb	r3, [r7, #7]
    97d8:	4611      	mov	r1, r2
    97da:	4618      	mov	r0, r3
    97dc:	4b07      	ldr	r3, [pc, #28]	; (97fc <_usbd_ep_int_stall_en+0x44>)
    97de:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    97e0:	e007      	b.n	97f2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    97e2:	79bb      	ldrb	r3, [r7, #6]
    97e4:	2220      	movs	r2, #32
    97e6:	409a      	lsls	r2, r3
    97e8:	79fb      	ldrb	r3, [r7, #7]
    97ea:	4611      	mov	r1, r2
    97ec:	4618      	mov	r0, r3
    97ee:	4b04      	ldr	r3, [pc, #16]	; (9800 <_usbd_ep_int_stall_en+0x48>)
    97f0:	4798      	blx	r3
}
    97f2:	bf00      	nop
    97f4:	3708      	adds	r7, #8
    97f6:	46bd      	mov	sp, r7
    97f8:	bd80      	pop	{r7, pc}
    97fa:	bf00      	nop
    97fc:	0000962d 	.word	0x0000962d
    9800:	00009655 	.word	0x00009655

00009804 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9804:	b580      	push	{r7, lr}
    9806:	b082      	sub	sp, #8
    9808:	af00      	add	r7, sp, #0
    980a:	4603      	mov	r3, r0
    980c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    980e:	79fb      	ldrb	r3, [r7, #7]
    9810:	4619      	mov	r1, r3
    9812:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9816:	4b03      	ldr	r3, [pc, #12]	; (9824 <_usbd_ep_stop_setup+0x20>)
    9818:	4798      	blx	r3
}
    981a:	bf00      	nop
    981c:	3708      	adds	r7, #8
    981e:	46bd      	mov	sp, r7
    9820:	bd80      	pop	{r7, pc}
    9822:	bf00      	nop
    9824:	00009189 	.word	0x00009189

00009828 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9828:	b580      	push	{r7, lr}
    982a:	b082      	sub	sp, #8
    982c:	af00      	add	r7, sp, #0
    982e:	4603      	mov	r3, r0
    9830:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9832:	79fb      	ldrb	r3, [r7, #7]
    9834:	2210      	movs	r2, #16
    9836:	4619      	mov	r1, r3
    9838:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    983c:	4b05      	ldr	r3, [pc, #20]	; (9854 <_usbd_ep_is_setup+0x2c>)
    983e:	4798      	blx	r3
    9840:	4603      	mov	r3, r0
    9842:	2b00      	cmp	r3, #0
    9844:	bf14      	ite	ne
    9846:	2301      	movne	r3, #1
    9848:	2300      	moveq	r3, #0
    984a:	b2db      	uxtb	r3, r3
}
    984c:	4618      	mov	r0, r3
    984e:	3708      	adds	r7, #8
    9850:	46bd      	mov	sp, r7
    9852:	bd80      	pop	{r7, pc}
    9854:	0000907f 	.word	0x0000907f

00009858 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9858:	b580      	push	{r7, lr}
    985a:	b082      	sub	sp, #8
    985c:	af00      	add	r7, sp, #0
    985e:	4603      	mov	r3, r0
    9860:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9862:	79fb      	ldrb	r3, [r7, #7]
    9864:	2110      	movs	r1, #16
    9866:	4618      	mov	r0, r3
    9868:	4b02      	ldr	r3, [pc, #8]	; (9874 <_usbd_ep_ack_setup+0x1c>)
    986a:	4798      	blx	r3
}
    986c:	bf00      	nop
    986e:	3708      	adds	r7, #8
    9870:	46bd      	mov	sp, r7
    9872:	bd80      	pop	{r7, pc}
    9874:	00009605 	.word	0x00009605

00009878 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9878:	b580      	push	{r7, lr}
    987a:	b082      	sub	sp, #8
    987c:	af00      	add	r7, sp, #0
    987e:	4603      	mov	r3, r0
    9880:	71fb      	strb	r3, [r7, #7]
    9882:	460b      	mov	r3, r1
    9884:	71bb      	strb	r3, [r7, #6]
    9886:	4613      	mov	r3, r2
    9888:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    988a:	797b      	ldrb	r3, [r7, #5]
    988c:	2b00      	cmp	r3, #0
    988e:	d00b      	beq.n	98a8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9890:	79bb      	ldrb	r3, [r7, #6]
    9892:	2201      	movs	r2, #1
    9894:	fa02 f303 	lsl.w	r3, r2, r3
    9898:	b2da      	uxtb	r2, r3
    989a:	79fb      	ldrb	r3, [r7, #7]
    989c:	4619      	mov	r1, r3
    989e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98a2:	4b09      	ldr	r3, [pc, #36]	; (98c8 <_usbd_ep_set_toggle+0x50>)
    98a4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    98a6:	e00a      	b.n	98be <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    98a8:	79bb      	ldrb	r3, [r7, #6]
    98aa:	2201      	movs	r2, #1
    98ac:	fa02 f303 	lsl.w	r3, r2, r3
    98b0:	b2da      	uxtb	r2, r3
    98b2:	79fb      	ldrb	r3, [r7, #7]
    98b4:	4619      	mov	r1, r3
    98b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98ba:	4b04      	ldr	r3, [pc, #16]	; (98cc <_usbd_ep_set_toggle+0x54>)
    98bc:	4798      	blx	r3
}
    98be:	bf00      	nop
    98c0:	3708      	adds	r7, #8
    98c2:	46bd      	mov	sp, r7
    98c4:	bd80      	pop	{r7, pc}
    98c6:	bf00      	nop
    98c8:	00009109 	.word	0x00009109
    98cc:	0000915d 	.word	0x0000915d

000098d0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    98d0:	b580      	push	{r7, lr}
    98d2:	b082      	sub	sp, #8
    98d4:	af00      	add	r7, sp, #0
    98d6:	4603      	mov	r3, r0
    98d8:	460a      	mov	r2, r1
    98da:	71fb      	strb	r3, [r7, #7]
    98dc:	4613      	mov	r3, r2
    98de:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    98e0:	79bb      	ldrb	r3, [r7, #6]
    98e2:	2201      	movs	r2, #1
    98e4:	409a      	lsls	r2, r3
    98e6:	79fb      	ldrb	r3, [r7, #7]
    98e8:	4611      	mov	r1, r2
    98ea:	4618      	mov	r0, r3
    98ec:	4b02      	ldr	r3, [pc, #8]	; (98f8 <_usbd_ep_ack_io_cpt+0x28>)
    98ee:	4798      	blx	r3
}
    98f0:	bf00      	nop
    98f2:	3708      	adds	r7, #8
    98f4:	46bd      	mov	sp, r7
    98f6:	bd80      	pop	{r7, pc}
    98f8:	00009605 	.word	0x00009605

000098fc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    98fc:	b480      	push	{r7}
    98fe:	b085      	sub	sp, #20
    9900:	af00      	add	r7, sp, #0
    9902:	4603      	mov	r3, r0
    9904:	603a      	str	r2, [r7, #0]
    9906:	71fb      	strb	r3, [r7, #7]
    9908:	460b      	mov	r3, r1
    990a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    990c:	79fa      	ldrb	r2, [r7, #7]
    990e:	79bb      	ldrb	r3, [r7, #6]
    9910:	0052      	lsls	r2, r2, #1
    9912:	4413      	add	r3, r2
    9914:	011b      	lsls	r3, r3, #4
    9916:	4a06      	ldr	r2, [pc, #24]	; (9930 <_usbd_ep_set_buf+0x34>)
    9918:	4413      	add	r3, r2
    991a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    991c:	68fb      	ldr	r3, [r7, #12]
    991e:	683a      	ldr	r2, [r7, #0]
    9920:	601a      	str	r2, [r3, #0]
}
    9922:	bf00      	nop
    9924:	3714      	adds	r7, #20
    9926:	46bd      	mov	sp, r7
    9928:	f85d 7b04 	ldr.w	r7, [sp], #4
    992c:	4770      	bx	lr
    992e:	bf00      	nop
    9930:	200011a4 	.word	0x200011a4

00009934 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9934:	b480      	push	{r7}
    9936:	b085      	sub	sp, #20
    9938:	af00      	add	r7, sp, #0
    993a:	4603      	mov	r3, r0
    993c:	71fb      	strb	r3, [r7, #7]
    993e:	460b      	mov	r3, r1
    9940:	71bb      	strb	r3, [r7, #6]
    9942:	4613      	mov	r3, r2
    9944:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9946:	79fa      	ldrb	r2, [r7, #7]
    9948:	79bb      	ldrb	r3, [r7, #6]
    994a:	0052      	lsls	r2, r2, #1
    994c:	4413      	add	r3, r2
    994e:	011b      	lsls	r3, r3, #4
    9950:	4a08      	ldr	r2, [pc, #32]	; (9974 <_usbd_ep_set_in_count+0x40>)
    9952:	4413      	add	r3, r2
    9954:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9956:	88bb      	ldrh	r3, [r7, #4]
    9958:	f3c3 030d 	ubfx	r3, r3, #0, #14
    995c:	b299      	uxth	r1, r3
    995e:	68fa      	ldr	r2, [r7, #12]
    9960:	6853      	ldr	r3, [r2, #4]
    9962:	f361 339b 	bfi	r3, r1, #14, #14
    9966:	6053      	str	r3, [r2, #4]
}
    9968:	bf00      	nop
    996a:	3714      	adds	r7, #20
    996c:	46bd      	mov	sp, r7
    996e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9972:	4770      	bx	lr
    9974:	200011a4 	.word	0x200011a4

00009978 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9978:	b480      	push	{r7}
    997a:	b085      	sub	sp, #20
    997c:	af00      	add	r7, sp, #0
    997e:	4603      	mov	r3, r0
    9980:	71fb      	strb	r3, [r7, #7]
    9982:	460b      	mov	r3, r1
    9984:	71bb      	strb	r3, [r7, #6]
    9986:	4613      	mov	r3, r2
    9988:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    998a:	79fa      	ldrb	r2, [r7, #7]
    998c:	79bb      	ldrb	r3, [r7, #6]
    998e:	0052      	lsls	r2, r2, #1
    9990:	4413      	add	r3, r2
    9992:	011b      	lsls	r3, r3, #4
    9994:	4a08      	ldr	r2, [pc, #32]	; (99b8 <_usbd_ep_set_in_size+0x40>)
    9996:	4413      	add	r3, r2
    9998:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    999a:	88bb      	ldrh	r3, [r7, #4]
    999c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    99a0:	b299      	uxth	r1, r3
    99a2:	68fa      	ldr	r2, [r7, #12]
    99a4:	6853      	ldr	r3, [r2, #4]
    99a6:	f361 030d 	bfi	r3, r1, #0, #14
    99aa:	6053      	str	r3, [r2, #4]
}
    99ac:	bf00      	nop
    99ae:	3714      	adds	r7, #20
    99b0:	46bd      	mov	sp, r7
    99b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    99b6:	4770      	bx	lr
    99b8:	200011a4 	.word	0x200011a4

000099bc <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    99bc:	b480      	push	{r7}
    99be:	b085      	sub	sp, #20
    99c0:	af00      	add	r7, sp, #0
    99c2:	4603      	mov	r3, r0
    99c4:	71fb      	strb	r3, [r7, #7]
    99c6:	460b      	mov	r3, r1
    99c8:	71bb      	strb	r3, [r7, #6]
    99ca:	4613      	mov	r3, r2
    99cc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    99ce:	79fa      	ldrb	r2, [r7, #7]
    99d0:	79bb      	ldrb	r3, [r7, #6]
    99d2:	0052      	lsls	r2, r2, #1
    99d4:	4413      	add	r3, r2
    99d6:	011b      	lsls	r3, r3, #4
    99d8:	4a08      	ldr	r2, [pc, #32]	; (99fc <_usbd_ep_set_out_count+0x40>)
    99da:	4413      	add	r3, r2
    99dc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    99de:	88bb      	ldrh	r3, [r7, #4]
    99e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    99e4:	b299      	uxth	r1, r3
    99e6:	68fa      	ldr	r2, [r7, #12]
    99e8:	6853      	ldr	r3, [r2, #4]
    99ea:	f361 030d 	bfi	r3, r1, #0, #14
    99ee:	6053      	str	r3, [r2, #4]
}
    99f0:	bf00      	nop
    99f2:	3714      	adds	r7, #20
    99f4:	46bd      	mov	sp, r7
    99f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    99fa:	4770      	bx	lr
    99fc:	200011a4 	.word	0x200011a4

00009a00 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9a00:	b480      	push	{r7}
    9a02:	b085      	sub	sp, #20
    9a04:	af00      	add	r7, sp, #0
    9a06:	4603      	mov	r3, r0
    9a08:	71fb      	strb	r3, [r7, #7]
    9a0a:	460b      	mov	r3, r1
    9a0c:	71bb      	strb	r3, [r7, #6]
    9a0e:	4613      	mov	r3, r2
    9a10:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a12:	79fa      	ldrb	r2, [r7, #7]
    9a14:	79bb      	ldrb	r3, [r7, #6]
    9a16:	0052      	lsls	r2, r2, #1
    9a18:	4413      	add	r3, r2
    9a1a:	011b      	lsls	r3, r3, #4
    9a1c:	4a08      	ldr	r2, [pc, #32]	; (9a40 <_usbd_ep_set_out_size+0x40>)
    9a1e:	4413      	add	r3, r2
    9a20:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9a22:	88bb      	ldrh	r3, [r7, #4]
    9a24:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9a28:	b299      	uxth	r1, r3
    9a2a:	68fa      	ldr	r2, [r7, #12]
    9a2c:	6853      	ldr	r3, [r2, #4]
    9a2e:	f361 339b 	bfi	r3, r1, #14, #14
    9a32:	6053      	str	r3, [r2, #4]
}
    9a34:	bf00      	nop
    9a36:	3714      	adds	r7, #20
    9a38:	46bd      	mov	sp, r7
    9a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a3e:	4770      	bx	lr
    9a40:	200011a4 	.word	0x200011a4

00009a44 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9a44:	b580      	push	{r7, lr}
    9a46:	b084      	sub	sp, #16
    9a48:	af00      	add	r7, sp, #0
    9a4a:	60ba      	str	r2, [r7, #8]
    9a4c:	607b      	str	r3, [r7, #4]
    9a4e:	4603      	mov	r3, r0
    9a50:	73fb      	strb	r3, [r7, #15]
    9a52:	460b      	mov	r3, r1
    9a54:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9a56:	68bb      	ldr	r3, [r7, #8]
    9a58:	b29a      	uxth	r2, r3
    9a5a:	7bb9      	ldrb	r1, [r7, #14]
    9a5c:	7bfb      	ldrb	r3, [r7, #15]
    9a5e:	4618      	mov	r0, r3
    9a60:	4b06      	ldr	r3, [pc, #24]	; (9a7c <_usbd_ep_set_in_trans+0x38>)
    9a62:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9a64:	687b      	ldr	r3, [r7, #4]
    9a66:	b29a      	uxth	r2, r3
    9a68:	7bb9      	ldrb	r1, [r7, #14]
    9a6a:	7bfb      	ldrb	r3, [r7, #15]
    9a6c:	4618      	mov	r0, r3
    9a6e:	4b04      	ldr	r3, [pc, #16]	; (9a80 <_usbd_ep_set_in_trans+0x3c>)
    9a70:	4798      	blx	r3
}
    9a72:	bf00      	nop
    9a74:	3710      	adds	r7, #16
    9a76:	46bd      	mov	sp, r7
    9a78:	bd80      	pop	{r7, pc}
    9a7a:	bf00      	nop
    9a7c:	00009979 	.word	0x00009979
    9a80:	00009935 	.word	0x00009935

00009a84 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9a84:	b580      	push	{r7, lr}
    9a86:	b084      	sub	sp, #16
    9a88:	af00      	add	r7, sp, #0
    9a8a:	60ba      	str	r2, [r7, #8]
    9a8c:	607b      	str	r3, [r7, #4]
    9a8e:	4603      	mov	r3, r0
    9a90:	73fb      	strb	r3, [r7, #15]
    9a92:	460b      	mov	r3, r1
    9a94:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9a96:	68bb      	ldr	r3, [r7, #8]
    9a98:	b29a      	uxth	r2, r3
    9a9a:	7bb9      	ldrb	r1, [r7, #14]
    9a9c:	7bfb      	ldrb	r3, [r7, #15]
    9a9e:	4618      	mov	r0, r3
    9aa0:	4b06      	ldr	r3, [pc, #24]	; (9abc <_usbd_ep_set_out_trans+0x38>)
    9aa2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9aa4:	687b      	ldr	r3, [r7, #4]
    9aa6:	b29a      	uxth	r2, r3
    9aa8:	7bb9      	ldrb	r1, [r7, #14]
    9aaa:	7bfb      	ldrb	r3, [r7, #15]
    9aac:	4618      	mov	r0, r3
    9aae:	4b04      	ldr	r3, [pc, #16]	; (9ac0 <_usbd_ep_set_out_trans+0x3c>)
    9ab0:	4798      	blx	r3
}
    9ab2:	bf00      	nop
    9ab4:	3710      	adds	r7, #16
    9ab6:	46bd      	mov	sp, r7
    9ab8:	bd80      	pop	{r7, pc}
    9aba:	bf00      	nop
    9abc:	00009a01 	.word	0x00009a01
    9ac0:	000099bd 	.word	0x000099bd

00009ac4 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9ac4:	b480      	push	{r7}
    9ac6:	b085      	sub	sp, #20
    9ac8:	af00      	add	r7, sp, #0
    9aca:	4603      	mov	r3, r0
    9acc:	460a      	mov	r2, r1
    9ace:	71fb      	strb	r3, [r7, #7]
    9ad0:	4613      	mov	r3, r2
    9ad2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9ad4:	79fa      	ldrb	r2, [r7, #7]
    9ad6:	79bb      	ldrb	r3, [r7, #6]
    9ad8:	0052      	lsls	r2, r2, #1
    9ada:	4413      	add	r3, r2
    9adc:	011b      	lsls	r3, r3, #4
    9ade:	4a06      	ldr	r2, [pc, #24]	; (9af8 <_usbd_ep_clear_bank_status+0x34>)
    9ae0:	4413      	add	r3, r2
    9ae2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9ae4:	68fb      	ldr	r3, [r7, #12]
    9ae6:	2200      	movs	r2, #0
    9ae8:	729a      	strb	r2, [r3, #10]
}
    9aea:	bf00      	nop
    9aec:	3714      	adds	r7, #20
    9aee:	46bd      	mov	sp, r7
    9af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9af4:	4770      	bx	lr
    9af6:	bf00      	nop
    9af8:	200011a4 	.word	0x200011a4

00009afc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9afc:	b580      	push	{r7, lr}
    9afe:	b082      	sub	sp, #8
    9b00:	af00      	add	r7, sp, #0
    9b02:	4603      	mov	r3, r0
    9b04:	71fb      	strb	r3, [r7, #7]
    9b06:	460b      	mov	r3, r1
    9b08:	71bb      	strb	r3, [r7, #6]
    9b0a:	4613      	mov	r3, r2
    9b0c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9b0e:	797b      	ldrb	r3, [r7, #5]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d00b      	beq.n	9b2c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b14:	79bb      	ldrb	r3, [r7, #6]
    9b16:	2240      	movs	r2, #64	; 0x40
    9b18:	fa02 f303 	lsl.w	r3, r2, r3
    9b1c:	b2da      	uxtb	r2, r3
    9b1e:	79fb      	ldrb	r3, [r7, #7]
    9b20:	4619      	mov	r1, r3
    9b22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b26:	4b09      	ldr	r3, [pc, #36]	; (9b4c <_usbd_ep_set_in_rdy+0x50>)
    9b28:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9b2a:	e00a      	b.n	9b42 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b2c:	79bb      	ldrb	r3, [r7, #6]
    9b2e:	2240      	movs	r2, #64	; 0x40
    9b30:	fa02 f303 	lsl.w	r3, r2, r3
    9b34:	b2da      	uxtb	r2, r3
    9b36:	79fb      	ldrb	r3, [r7, #7]
    9b38:	4619      	mov	r1, r3
    9b3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b3e:	4b04      	ldr	r3, [pc, #16]	; (9b50 <_usbd_ep_set_in_rdy+0x54>)
    9b40:	4798      	blx	r3
}
    9b42:	bf00      	nop
    9b44:	3708      	adds	r7, #8
    9b46:	46bd      	mov	sp, r7
    9b48:	bd80      	pop	{r7, pc}
    9b4a:	bf00      	nop
    9b4c:	00009109 	.word	0x00009109
    9b50:	0000915d 	.word	0x0000915d

00009b54 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9b54:	b580      	push	{r7, lr}
    9b56:	b082      	sub	sp, #8
    9b58:	af00      	add	r7, sp, #0
    9b5a:	4603      	mov	r3, r0
    9b5c:	71fb      	strb	r3, [r7, #7]
    9b5e:	460b      	mov	r3, r1
    9b60:	71bb      	strb	r3, [r7, #6]
    9b62:	4613      	mov	r3, r2
    9b64:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9b66:	797b      	ldrb	r3, [r7, #5]
    9b68:	2b00      	cmp	r3, #0
    9b6a:	d00b      	beq.n	9b84 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b6c:	79bb      	ldrb	r3, [r7, #6]
    9b6e:	2240      	movs	r2, #64	; 0x40
    9b70:	fa02 f303 	lsl.w	r3, r2, r3
    9b74:	b2da      	uxtb	r2, r3
    9b76:	79fb      	ldrb	r3, [r7, #7]
    9b78:	4619      	mov	r1, r3
    9b7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b7e:	4b09      	ldr	r3, [pc, #36]	; (9ba4 <_usbd_ep_set_out_rdy+0x50>)
    9b80:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9b82:	e00a      	b.n	9b9a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b84:	79bb      	ldrb	r3, [r7, #6]
    9b86:	2240      	movs	r2, #64	; 0x40
    9b88:	fa02 f303 	lsl.w	r3, r2, r3
    9b8c:	b2da      	uxtb	r2, r3
    9b8e:	79fb      	ldrb	r3, [r7, #7]
    9b90:	4619      	mov	r1, r3
    9b92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b96:	4b04      	ldr	r3, [pc, #16]	; (9ba8 <_usbd_ep_set_out_rdy+0x54>)
    9b98:	4798      	blx	r3
}
    9b9a:	bf00      	nop
    9b9c:	3708      	adds	r7, #8
    9b9e:	46bd      	mov	sp, r7
    9ba0:	bd80      	pop	{r7, pc}
    9ba2:	bf00      	nop
    9ba4:	0000915d 	.word	0x0000915d
    9ba8:	00009109 	.word	0x00009109

00009bac <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9bac:	b480      	push	{r7}
    9bae:	b083      	sub	sp, #12
    9bb0:	af00      	add	r7, sp, #0
    9bb2:	4603      	mov	r3, r0
    9bb4:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9bb6:	88fb      	ldrh	r3, [r7, #6]
    9bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9bbc:	d820      	bhi.n	9c00 <_usbd_ep_pcksize_size+0x54>
    9bbe:	88fb      	ldrh	r3, [r7, #6]
    9bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9bc4:	d81a      	bhi.n	9bfc <_usbd_ep_pcksize_size+0x50>
    9bc6:	88fb      	ldrh	r3, [r7, #6]
    9bc8:	2b80      	cmp	r3, #128	; 0x80
    9bca:	d815      	bhi.n	9bf8 <_usbd_ep_pcksize_size+0x4c>
    9bcc:	88fb      	ldrh	r3, [r7, #6]
    9bce:	2b40      	cmp	r3, #64	; 0x40
    9bd0:	d810      	bhi.n	9bf4 <_usbd_ep_pcksize_size+0x48>
    9bd2:	88fb      	ldrh	r3, [r7, #6]
    9bd4:	2b20      	cmp	r3, #32
    9bd6:	d80b      	bhi.n	9bf0 <_usbd_ep_pcksize_size+0x44>
    9bd8:	88fb      	ldrh	r3, [r7, #6]
    9bda:	2b10      	cmp	r3, #16
    9bdc:	d806      	bhi.n	9bec <_usbd_ep_pcksize_size+0x40>
    9bde:	88fb      	ldrh	r3, [r7, #6]
    9be0:	2b08      	cmp	r3, #8
    9be2:	bf8c      	ite	hi
    9be4:	2301      	movhi	r3, #1
    9be6:	2300      	movls	r3, #0
    9be8:	b2db      	uxtb	r3, r3
    9bea:	e00a      	b.n	9c02 <_usbd_ep_pcksize_size+0x56>
    9bec:	2302      	movs	r3, #2
    9bee:	e008      	b.n	9c02 <_usbd_ep_pcksize_size+0x56>
    9bf0:	2303      	movs	r3, #3
    9bf2:	e006      	b.n	9c02 <_usbd_ep_pcksize_size+0x56>
    9bf4:	2304      	movs	r3, #4
    9bf6:	e004      	b.n	9c02 <_usbd_ep_pcksize_size+0x56>
    9bf8:	2305      	movs	r3, #5
    9bfa:	e002      	b.n	9c02 <_usbd_ep_pcksize_size+0x56>
    9bfc:	2306      	movs	r3, #6
    9bfe:	e000      	b.n	9c02 <_usbd_ep_pcksize_size+0x56>
    9c00:	2307      	movs	r3, #7
}
    9c02:	4618      	mov	r0, r3
    9c04:	370c      	adds	r7, #12
    9c06:	46bd      	mov	sp, r7
    9c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c0c:	4770      	bx	lr
	...

00009c10 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9c10:	b480      	push	{r7}
    9c12:	b085      	sub	sp, #20
    9c14:	af00      	add	r7, sp, #0
    9c16:	4603      	mov	r3, r0
    9c18:	460a      	mov	r2, r1
    9c1a:	71fb      	strb	r3, [r7, #7]
    9c1c:	4613      	mov	r3, r2
    9c1e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9c20:	79fb      	ldrb	r3, [r7, #7]
    9c22:	2b00      	cmp	r3, #0
    9c24:	d008      	beq.n	9c38 <_usb_d_dev_ept+0x28>
    9c26:	79bb      	ldrb	r3, [r7, #6]
    9c28:	2b00      	cmp	r3, #0
    9c2a:	d003      	beq.n	9c34 <_usb_d_dev_ept+0x24>
    9c2c:	79fb      	ldrb	r3, [r7, #7]
    9c2e:	3304      	adds	r3, #4
    9c30:	b2db      	uxtb	r3, r3
    9c32:	e002      	b.n	9c3a <_usb_d_dev_ept+0x2a>
    9c34:	79fb      	ldrb	r3, [r7, #7]
    9c36:	e000      	b.n	9c3a <_usb_d_dev_ept+0x2a>
    9c38:	2300      	movs	r3, #0
    9c3a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9c3c:	7bfa      	ldrb	r2, [r7, #15]
    9c3e:	4613      	mov	r3, r2
    9c40:	009b      	lsls	r3, r3, #2
    9c42:	4413      	add	r3, r2
    9c44:	009b      	lsls	r3, r3, #2
    9c46:	3310      	adds	r3, #16
    9c48:	4a04      	ldr	r2, [pc, #16]	; (9c5c <_usb_d_dev_ept+0x4c>)
    9c4a:	4413      	add	r3, r2
    9c4c:	3304      	adds	r3, #4
}
    9c4e:	4618      	mov	r0, r3
    9c50:	3714      	adds	r7, #20
    9c52:	46bd      	mov	sp, r7
    9c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c58:	4770      	bx	lr
    9c5a:	bf00      	nop
    9c5c:	200010dc 	.word	0x200010dc

00009c60 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9c60:	b580      	push	{r7, lr}
    9c62:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9c64:	2104      	movs	r1, #4
    9c66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c6a:	4b03      	ldr	r3, [pc, #12]	; (9c78 <_usb_d_dev_sof+0x18>)
    9c6c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9c6e:	4b03      	ldr	r3, [pc, #12]	; (9c7c <_usb_d_dev_sof+0x1c>)
    9c70:	681b      	ldr	r3, [r3, #0]
    9c72:	4798      	blx	r3
}
    9c74:	bf00      	nop
    9c76:	bd80      	pop	{r7, pc}
    9c78:	000092d7 	.word	0x000092d7
    9c7c:	200010dc 	.word	0x200010dc

00009c80 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9c80:	b580      	push	{r7, lr}
    9c82:	b084      	sub	sp, #16
    9c84:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9c86:	2300      	movs	r3, #0
    9c88:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c8a:	f240 2101 	movw	r1, #513	; 0x201
    9c8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c92:	4b1a      	ldr	r3, [pc, #104]	; (9cfc <_usb_d_dev_lpmsusp+0x7c>)
    9c94:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c96:	f240 2101 	movw	r1, #513	; 0x201
    9c9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c9e:	4b18      	ldr	r3, [pc, #96]	; (9d00 <_usb_d_dev_lpmsusp+0x80>)
    9ca0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9ca2:	2170      	movs	r1, #112	; 0x70
    9ca4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ca8:	4b16      	ldr	r3, [pc, #88]	; (9d04 <_usb_d_dev_lpmsusp+0x84>)
    9caa:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9cac:	2300      	movs	r3, #0
    9cae:	73fb      	strb	r3, [r7, #15]
    9cb0:	e018      	b.n	9ce4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9cb2:	7bfb      	ldrb	r3, [r7, #15]
    9cb4:	015b      	lsls	r3, r3, #5
    9cb6:	4a14      	ldr	r2, [pc, #80]	; (9d08 <_usb_d_dev_lpmsusp+0x88>)
    9cb8:	4413      	add	r3, r2
    9cba:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	891b      	ldrh	r3, [r3, #8]
    9cc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9cc4:	b2db      	uxtb	r3, r3
    9cc6:	2b03      	cmp	r3, #3
    9cc8:	d109      	bne.n	9cde <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9cca:	687b      	ldr	r3, [r7, #4]
    9ccc:	891b      	ldrh	r3, [r3, #8]
    9cce:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9cd2:	b29b      	uxth	r3, r3
    9cd4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9cd6:	687b      	ldr	r3, [r7, #4]
    9cd8:	2200      	movs	r2, #0
    9cda:	811a      	strh	r2, [r3, #8]
			break;
    9cdc:	e005      	b.n	9cea <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9cde:	7bfb      	ldrb	r3, [r7, #15]
    9ce0:	3301      	adds	r3, #1
    9ce2:	73fb      	strb	r3, [r7, #15]
    9ce4:	7bfb      	ldrb	r3, [r7, #15]
    9ce6:	2b03      	cmp	r3, #3
    9ce8:	d9e3      	bls.n	9cb2 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9cea:	4b08      	ldr	r3, [pc, #32]	; (9d0c <_usb_d_dev_lpmsusp+0x8c>)
    9cec:	685b      	ldr	r3, [r3, #4]
    9cee:	68b9      	ldr	r1, [r7, #8]
    9cf0:	2003      	movs	r0, #3
    9cf2:	4798      	blx	r3
}
    9cf4:	bf00      	nop
    9cf6:	3710      	adds	r7, #16
    9cf8:	46bd      	mov	sp, r7
    9cfa:	bd80      	pop	{r7, pc}
    9cfc:	000092d7 	.word	0x000092d7
    9d00:	0000932d 	.word	0x0000932d
    9d04:	000092f5 	.word	0x000092f5
    9d08:	200011a4 	.word	0x200011a4
    9d0c:	200010dc 	.word	0x200010dc

00009d10 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9d10:	b580      	push	{r7, lr}
    9d12:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9d14:	2180      	movs	r1, #128	; 0x80
    9d16:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d1a:	4b04      	ldr	r3, [pc, #16]	; (9d2c <_usb_d_dev_ramerr+0x1c>)
    9d1c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9d1e:	4b04      	ldr	r3, [pc, #16]	; (9d30 <_usb_d_dev_ramerr+0x20>)
    9d20:	685b      	ldr	r3, [r3, #4]
    9d22:	2100      	movs	r1, #0
    9d24:	2005      	movs	r0, #5
    9d26:	4798      	blx	r3
}
    9d28:	bf00      	nop
    9d2a:	bd80      	pop	{r7, pc}
    9d2c:	000092d7 	.word	0x000092d7
    9d30:	200010dc 	.word	0x200010dc

00009d34 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9d34:	b580      	push	{r7, lr}
    9d36:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d38:	2170      	movs	r1, #112	; 0x70
    9d3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d3e:	4b0b      	ldr	r3, [pc, #44]	; (9d6c <_usb_d_dev_wakeup+0x38>)
    9d40:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d42:	2170      	movs	r1, #112	; 0x70
    9d44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d48:	4b09      	ldr	r3, [pc, #36]	; (9d70 <_usb_d_dev_wakeup+0x3c>)
    9d4a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d4c:	f240 2101 	movw	r1, #513	; 0x201
    9d50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d54:	4b07      	ldr	r3, [pc, #28]	; (9d74 <_usb_d_dev_wakeup+0x40>)
    9d56:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9d58:	2000      	movs	r0, #0
    9d5a:	4b07      	ldr	r3, [pc, #28]	; (9d78 <_usb_d_dev_wakeup+0x44>)
    9d5c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9d5e:	4b07      	ldr	r3, [pc, #28]	; (9d7c <_usb_d_dev_wakeup+0x48>)
    9d60:	685b      	ldr	r3, [r3, #4]
    9d62:	2100      	movs	r1, #0
    9d64:	2002      	movs	r0, #2
    9d66:	4798      	blx	r3
}
    9d68:	bf00      	nop
    9d6a:	bd80      	pop	{r7, pc}
    9d6c:	000092d7 	.word	0x000092d7
    9d70:	0000932d 	.word	0x0000932d
    9d74:	000092f5 	.word	0x000092f5
    9d78:	000095d5 	.word	0x000095d5
    9d7c:	200010dc 	.word	0x200010dc

00009d80 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9d80:	b580      	push	{r7, lr}
    9d82:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9d84:	2200      	movs	r2, #0
    9d86:	2100      	movs	r1, #0
    9d88:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d8c:	4b0d      	ldr	r3, [pc, #52]	; (9dc4 <_usb_d_dev_reset+0x44>)
    9d8e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9d90:	2108      	movs	r1, #8
    9d92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d96:	4b0c      	ldr	r3, [pc, #48]	; (9dc8 <_usb_d_dev_reset+0x48>)
    9d98:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d9a:	2170      	movs	r1, #112	; 0x70
    9d9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9da0:	4b0a      	ldr	r3, [pc, #40]	; (9dcc <_usb_d_dev_reset+0x4c>)
    9da2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9da4:	f240 2101 	movw	r1, #513	; 0x201
    9da8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dac:	4b08      	ldr	r3, [pc, #32]	; (9dd0 <_usb_d_dev_reset+0x50>)
    9dae:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9db0:	4b08      	ldr	r3, [pc, #32]	; (9dd4 <_usb_d_dev_reset+0x54>)
    9db2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9db4:	4b08      	ldr	r3, [pc, #32]	; (9dd8 <_usb_d_dev_reset+0x58>)
    9db6:	685b      	ldr	r3, [r3, #4]
    9db8:	2100      	movs	r1, #0
    9dba:	2001      	movs	r0, #1
    9dbc:	4798      	blx	r3
}
    9dbe:	bf00      	nop
    9dc0:	bd80      	pop	{r7, pc}
    9dc2:	bf00      	nop
    9dc4:	0000926d 	.word	0x0000926d
    9dc8:	000092d7 	.word	0x000092d7
    9dcc:	0000932d 	.word	0x0000932d
    9dd0:	000092f5 	.word	0x000092f5
    9dd4:	0000a93d 	.word	0x0000a93d
    9dd8:	200010dc 	.word	0x200010dc

00009ddc <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9de0:	f240 2101 	movw	r1, #513	; 0x201
    9de4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9de8:	4b09      	ldr	r3, [pc, #36]	; (9e10 <_usb_d_dev_suspend+0x34>)
    9dea:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9dec:	f240 2101 	movw	r1, #513	; 0x201
    9df0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9df4:	4b07      	ldr	r3, [pc, #28]	; (9e14 <_usb_d_dev_suspend+0x38>)
    9df6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9df8:	2170      	movs	r1, #112	; 0x70
    9dfa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dfe:	4b06      	ldr	r3, [pc, #24]	; (9e18 <_usb_d_dev_suspend+0x3c>)
    9e00:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9e02:	4b06      	ldr	r3, [pc, #24]	; (9e1c <_usb_d_dev_suspend+0x40>)
    9e04:	685b      	ldr	r3, [r3, #4]
    9e06:	2100      	movs	r1, #0
    9e08:	2004      	movs	r0, #4
    9e0a:	4798      	blx	r3
}
    9e0c:	bf00      	nop
    9e0e:	bd80      	pop	{r7, pc}
    9e10:	000092d7 	.word	0x000092d7
    9e14:	0000932d 	.word	0x0000932d
    9e18:	000092f5 	.word	0x000092f5
    9e1c:	200010dc 	.word	0x200010dc

00009e20 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	b082      	sub	sp, #8
    9e24:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9e26:	2301      	movs	r3, #1
    9e28:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9e2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e2e:	4b22      	ldr	r3, [pc, #136]	; (9eb8 <_usb_d_dev_handle_nep+0x98>)
    9e30:	4798      	blx	r3
    9e32:	4603      	mov	r3, r0
    9e34:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9e36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e3a:	4b20      	ldr	r3, [pc, #128]	; (9ebc <_usb_d_dev_handle_nep+0x9c>)
    9e3c:	4798      	blx	r3
    9e3e:	4603      	mov	r3, r0
    9e40:	461a      	mov	r2, r3
    9e42:	88bb      	ldrh	r3, [r7, #4]
    9e44:	4013      	ands	r3, r2
    9e46:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9e48:	88bb      	ldrh	r3, [r7, #4]
    9e4a:	f003 0304 	and.w	r3, r3, #4
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d003      	beq.n	9e5a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9e52:	4b1b      	ldr	r3, [pc, #108]	; (9ec0 <_usb_d_dev_handle_nep+0xa0>)
    9e54:	4798      	blx	r3
		return true;
    9e56:	2301      	movs	r3, #1
    9e58:	e02a      	b.n	9eb0 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9e5a:	88bb      	ldrh	r3, [r7, #4]
    9e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9e60:	2b00      	cmp	r3, #0
    9e62:	d002      	beq.n	9e6a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9e64:	4b17      	ldr	r3, [pc, #92]	; (9ec4 <_usb_d_dev_handle_nep+0xa4>)
    9e66:	4798      	blx	r3
    9e68:	e021      	b.n	9eae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9e6a:	88bb      	ldrh	r3, [r7, #4]
    9e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e70:	2b00      	cmp	r3, #0
    9e72:	d002      	beq.n	9e7a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9e74:	4b14      	ldr	r3, [pc, #80]	; (9ec8 <_usb_d_dev_handle_nep+0xa8>)
    9e76:	4798      	blx	r3
    9e78:	e019      	b.n	9eae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9e7a:	88bb      	ldrh	r3, [r7, #4]
    9e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9e80:	2b00      	cmp	r3, #0
    9e82:	d002      	beq.n	9e8a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9e84:	4b11      	ldr	r3, [pc, #68]	; (9ecc <_usb_d_dev_handle_nep+0xac>)
    9e86:	4798      	blx	r3
    9e88:	e011      	b.n	9eae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9e8a:	88bb      	ldrh	r3, [r7, #4]
    9e8c:	f003 0308 	and.w	r3, r3, #8
    9e90:	2b00      	cmp	r3, #0
    9e92:	d002      	beq.n	9e9a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9e94:	4b0e      	ldr	r3, [pc, #56]	; (9ed0 <_usb_d_dev_handle_nep+0xb0>)
    9e96:	4798      	blx	r3
    9e98:	e009      	b.n	9eae <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9e9a:	88bb      	ldrh	r3, [r7, #4]
    9e9c:	f003 0301 	and.w	r3, r3, #1
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d002      	beq.n	9eaa <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9ea4:	4b0b      	ldr	r3, [pc, #44]	; (9ed4 <_usb_d_dev_handle_nep+0xb4>)
    9ea6:	4798      	blx	r3
    9ea8:	e001      	b.n	9eae <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9eaa:	2300      	movs	r3, #0
    9eac:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9eae:	79fb      	ldrb	r3, [r7, #7]
}
    9eb0:	4618      	mov	r0, r3
    9eb2:	3708      	adds	r7, #8
    9eb4:	46bd      	mov	sp, r7
    9eb6:	bd80      	pop	{r7, pc}
    9eb8:	000092bd 	.word	0x000092bd
    9ebc:	00009313 	.word	0x00009313
    9ec0:	00009c61 	.word	0x00009c61
    9ec4:	00009c81 	.word	0x00009c81
    9ec8:	00009d11 	.word	0x00009d11
    9ecc:	00009d35 	.word	0x00009d35
    9ed0:	00009d81 	.word	0x00009d81
    9ed4:	00009ddd 	.word	0x00009ddd

00009ed8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9ed8:	b590      	push	{r4, r7, lr}
    9eda:	b089      	sub	sp, #36	; 0x24
    9edc:	af00      	add	r7, sp, #0
    9ede:	6078      	str	r0, [r7, #4]
    9ee0:	460b      	mov	r3, r1
    9ee2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9ee4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ee8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9eea:	687b      	ldr	r3, [r7, #4]
    9eec:	7c9b      	ldrb	r3, [r3, #18]
    9eee:	f003 030f 	and.w	r3, r3, #15
    9ef2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9ef4:	7dfb      	ldrb	r3, [r7, #23]
    9ef6:	015b      	lsls	r3, r3, #5
    9ef8:	4a73      	ldr	r2, [pc, #460]	; (a0c8 <_usb_d_dev_in_next+0x1f0>)
    9efa:	4413      	add	r3, r2
    9efc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9efe:	78fb      	ldrb	r3, [r7, #3]
    9f00:	2b00      	cmp	r3, #0
    9f02:	d006      	beq.n	9f12 <_usb_d_dev_in_next+0x3a>
    9f04:	693b      	ldr	r3, [r7, #16]
    9f06:	3310      	adds	r3, #16
    9f08:	685b      	ldr	r3, [r3, #4]
    9f0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9f0e:	b29b      	uxth	r3, r3
    9f10:	e000      	b.n	9f14 <_usb_d_dev_in_next+0x3c>
    9f12:	2300      	movs	r3, #0
    9f14:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9f16:	687b      	ldr	r3, [r7, #4]
    9f18:	8a1b      	ldrh	r3, [r3, #16]
    9f1a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9f1e:	4293      	cmp	r3, r2
    9f20:	d103      	bne.n	9f2a <_usb_d_dev_in_next+0x52>
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	8a1b      	ldrh	r3, [r3, #16]
    9f26:	b21b      	sxth	r3, r3
    9f28:	e004      	b.n	9f34 <_usb_d_dev_in_next+0x5c>
    9f2a:	687b      	ldr	r3, [r7, #4]
    9f2c:	8a1b      	ldrh	r3, [r3, #16]
    9f2e:	3b01      	subs	r3, #1
    9f30:	b29b      	uxth	r3, r3
    9f32:	b21b      	sxth	r3, r3
    9f34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9f38:	4013      	ands	r3, r2
    9f3a:	b21b      	sxth	r3, r3
    9f3c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9f3e:	2300      	movs	r3, #0
    9f40:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	7cdb      	ldrb	r3, [r3, #19]
    9f46:	f003 0307 	and.w	r3, r3, #7
    9f4a:	b2db      	uxtb	r3, r3
    9f4c:	2b01      	cmp	r3, #1
    9f4e:	bf0c      	ite	eq
    9f50:	2301      	moveq	r3, #1
    9f52:	2300      	movne	r3, #0
    9f54:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9f56:	78fb      	ldrb	r3, [r7, #3]
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d004      	beq.n	9f66 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9f5c:	7dfb      	ldrb	r3, [r7, #23]
    9f5e:	2101      	movs	r1, #1
    9f60:	4618      	mov	r0, r3
    9f62:	4b5a      	ldr	r3, [pc, #360]	; (a0cc <_usb_d_dev_in_next+0x1f4>)
    9f64:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9f66:	687b      	ldr	r3, [r7, #4]
    9f68:	689a      	ldr	r2, [r3, #8]
    9f6a:	89fb      	ldrh	r3, [r7, #14]
    9f6c:	441a      	add	r2, r3
    9f6e:	687b      	ldr	r3, [r7, #4]
    9f70:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9f72:	687b      	ldr	r3, [r7, #4]
    9f74:	689a      	ldr	r2, [r3, #8]
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	685b      	ldr	r3, [r3, #4]
    9f7a:	429a      	cmp	r2, r3
    9f7c:	d243      	bcs.n	a006 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	685b      	ldr	r3, [r3, #4]
    9f82:	b29a      	uxth	r2, r3
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	689b      	ldr	r3, [r3, #8]
    9f88:	b29b      	uxth	r3, r3
    9f8a:	1ad3      	subs	r3, r2, r3
    9f8c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9f8e:	687b      	ldr	r3, [r7, #4]
    9f90:	7cdb      	ldrb	r3, [r3, #19]
    9f92:	f003 0320 	and.w	r3, r3, #32
    9f96:	b2db      	uxtb	r3, r3
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d01b      	beq.n	9fd4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	8a1b      	ldrh	r3, [r3, #16]
    9fa0:	8bfa      	ldrh	r2, [r7, #30]
    9fa2:	429a      	cmp	r2, r3
    9fa4:	d902      	bls.n	9fac <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9fa6:	687b      	ldr	r3, [r7, #4]
    9fa8:	8a1b      	ldrh	r3, [r3, #16]
    9faa:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	68d8      	ldr	r0, [r3, #12]
    9fb0:	687b      	ldr	r3, [r7, #4]
    9fb2:	681a      	ldr	r2, [r3, #0]
    9fb4:	687b      	ldr	r3, [r7, #4]
    9fb6:	689b      	ldr	r3, [r3, #8]
    9fb8:	4413      	add	r3, r2
    9fba:	8bfa      	ldrh	r2, [r7, #30]
    9fbc:	4619      	mov	r1, r3
    9fbe:	4b44      	ldr	r3, [pc, #272]	; (a0d0 <_usb_d_dev_in_next+0x1f8>)
    9fc0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	68db      	ldr	r3, [r3, #12]
    9fc6:	461a      	mov	r2, r3
    9fc8:	7dfb      	ldrb	r3, [r7, #23]
    9fca:	2101      	movs	r1, #1
    9fcc:	4618      	mov	r0, r3
    9fce:	4b41      	ldr	r3, [pc, #260]	; (a0d4 <_usb_d_dev_in_next+0x1fc>)
    9fd0:	4798      	blx	r3
    9fd2:	e011      	b.n	9ff8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9fd4:	8bfb      	ldrh	r3, [r7, #30]
    9fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9fda:	d902      	bls.n	9fe2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9fe0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	681a      	ldr	r2, [r3, #0]
    9fe6:	687b      	ldr	r3, [r7, #4]
    9fe8:	689b      	ldr	r3, [r3, #8]
    9fea:	4413      	add	r3, r2
    9fec:	461a      	mov	r2, r3
    9fee:	7dfb      	ldrb	r3, [r7, #23]
    9ff0:	2101      	movs	r1, #1
    9ff2:	4618      	mov	r0, r3
    9ff4:	4b37      	ldr	r3, [pc, #220]	; (a0d4 <_usb_d_dev_in_next+0x1fc>)
    9ff6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9ff8:	8bfa      	ldrh	r2, [r7, #30]
    9ffa:	7df8      	ldrb	r0, [r7, #23]
    9ffc:	2300      	movs	r3, #0
    9ffe:	2101      	movs	r1, #1
    a000:	4c35      	ldr	r4, [pc, #212]	; (a0d8 <_usb_d_dev_in_next+0x200>)
    a002:	47a0      	blx	r4
		goto _in_tx_exec;
    a004:	e041      	b.n	a08a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	7cdb      	ldrb	r3, [r3, #19]
    a00a:	f003 0310 	and.w	r3, r3, #16
    a00e:	b2db      	uxtb	r3, r3
    a010:	2b00      	cmp	r3, #0
    a012:	d00b      	beq.n	a02c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a014:	687a      	ldr	r2, [r7, #4]
    a016:	7cd3      	ldrb	r3, [r2, #19]
    a018:	f36f 1304 	bfc	r3, #4, #1
    a01c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a01e:	7df8      	ldrb	r0, [r7, #23]
    a020:	2300      	movs	r3, #0
    a022:	2200      	movs	r2, #0
    a024:	2101      	movs	r1, #1
    a026:	4c2c      	ldr	r4, [pc, #176]	; (a0d8 <_usb_d_dev_in_next+0x200>)
    a028:	47a0      	blx	r4
		goto _in_tx_exec;
    a02a:	e02e      	b.n	a08a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a02c:	7afb      	ldrb	r3, [r7, #11]
    a02e:	2b00      	cmp	r3, #0
    a030:	d006      	beq.n	a040 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a032:	7dfb      	ldrb	r3, [r7, #23]
    a034:	224b      	movs	r2, #75	; 0x4b
    a036:	4619      	mov	r1, r3
    a038:	69b8      	ldr	r0, [r7, #24]
    a03a:	4b28      	ldr	r3, [pc, #160]	; (a0dc <_usb_d_dev_in_next+0x204>)
    a03c:	4798      	blx	r3
    a03e:	e005      	b.n	a04c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a040:	7dfb      	ldrb	r3, [r7, #23]
    a042:	224a      	movs	r2, #74	; 0x4a
    a044:	4619      	mov	r1, r3
    a046:	69b8      	ldr	r0, [r7, #24]
    a048:	4b24      	ldr	r3, [pc, #144]	; (a0dc <_usb_d_dev_in_next+0x204>)
    a04a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	8a1b      	ldrh	r3, [r3, #16]
    a050:	89ba      	ldrh	r2, [r7, #12]
    a052:	429a      	cmp	r2, r3
    a054:	d114      	bne.n	a080 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a056:	687a      	ldr	r2, [r7, #4]
    a058:	7cd3      	ldrb	r3, [r2, #19]
    a05a:	f36f 1386 	bfc	r3, #6, #1
    a05e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a060:	4b1f      	ldr	r3, [pc, #124]	; (a0e0 <_usb_d_dev_in_next+0x208>)
    a062:	68db      	ldr	r3, [r3, #12]
    a064:	687a      	ldr	r2, [r7, #4]
    a066:	7c90      	ldrb	r0, [r2, #18]
    a068:	687a      	ldr	r2, [r7, #4]
    a06a:	6892      	ldr	r2, [r2, #8]
    a06c:	4611      	mov	r1, r2
    a06e:	4798      	blx	r3
    a070:	4603      	mov	r3, r0
    a072:	2b00      	cmp	r3, #0
    a074:	d124      	bne.n	a0c0 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a076:	687a      	ldr	r2, [r7, #4]
    a078:	7cd3      	ldrb	r3, [r2, #19]
    a07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a07e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a080:	2100      	movs	r1, #0
    a082:	6878      	ldr	r0, [r7, #4]
    a084:	4b17      	ldr	r3, [pc, #92]	; (a0e4 <_usb_d_dev_in_next+0x20c>)
    a086:	4798      	blx	r3
	return;
    a088:	e01b      	b.n	a0c2 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a08a:	78fb      	ldrb	r3, [r7, #3]
    a08c:	f083 0301 	eor.w	r3, r3, #1
    a090:	b2db      	uxtb	r3, r3
    a092:	2b00      	cmp	r3, #0
    a094:	d00d      	beq.n	a0b2 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a096:	7afb      	ldrb	r3, [r7, #11]
    a098:	2b00      	cmp	r3, #0
    a09a:	d002      	beq.n	a0a2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a09c:	234e      	movs	r3, #78	; 0x4e
    a09e:	777b      	strb	r3, [r7, #29]
    a0a0:	e001      	b.n	a0a6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a0a2:	234a      	movs	r3, #74	; 0x4a
    a0a4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a0a6:	7f7a      	ldrb	r2, [r7, #29]
    a0a8:	7dfb      	ldrb	r3, [r7, #23]
    a0aa:	4619      	mov	r1, r3
    a0ac:	69b8      	ldr	r0, [r7, #24]
    a0ae:	4b0e      	ldr	r3, [pc, #56]	; (a0e8 <_usb_d_dev_in_next+0x210>)
    a0b0:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a0b2:	7dfb      	ldrb	r3, [r7, #23]
    a0b4:	2201      	movs	r2, #1
    a0b6:	2101      	movs	r1, #1
    a0b8:	4618      	mov	r0, r3
    a0ba:	4b0c      	ldr	r3, [pc, #48]	; (a0ec <_usb_d_dev_in_next+0x214>)
    a0bc:	4798      	blx	r3
    a0be:	e000      	b.n	a0c2 <_usb_d_dev_in_next+0x1ea>
			return;
    a0c0:	bf00      	nop
}
    a0c2:	3724      	adds	r7, #36	; 0x24
    a0c4:	46bd      	mov	sp, r7
    a0c6:	bd90      	pop	{r4, r7, pc}
    a0c8:	200011a4 	.word	0x200011a4
    a0cc:	000098d1 	.word	0x000098d1
    a0d0:	00013b45 	.word	0x00013b45
    a0d4:	000098fd 	.word	0x000098fd
    a0d8:	00009a45 	.word	0x00009a45
    a0dc:	000091dd 	.word	0x000091dd
    a0e0:	200010dc 	.word	0x200010dc
    a0e4:	0000b201 	.word	0x0000b201
    a0e8:	000091b1 	.word	0x000091b1
    a0ec:	00009afd 	.word	0x00009afd

0000a0f0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a0f0:	b590      	push	{r4, r7, lr}
    a0f2:	b08b      	sub	sp, #44	; 0x2c
    a0f4:	af00      	add	r7, sp, #0
    a0f6:	6078      	str	r0, [r7, #4]
    a0f8:	460b      	mov	r3, r1
    a0fa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a0fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a100:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a102:	687b      	ldr	r3, [r7, #4]
    a104:	7c9b      	ldrb	r3, [r3, #18]
    a106:	f003 030f 	and.w	r3, r3, #15
    a10a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a10c:	7ffb      	ldrb	r3, [r7, #31]
    a10e:	015b      	lsls	r3, r3, #5
    a110:	4a94      	ldr	r2, [pc, #592]	; (a364 <_usb_d_dev_out_next+0x274>)
    a112:	4413      	add	r3, r2
    a114:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a116:	78fb      	ldrb	r3, [r7, #3]
    a118:	2b00      	cmp	r3, #0
    a11a:	d005      	beq.n	a128 <_usb_d_dev_out_next+0x38>
    a11c:	69bb      	ldr	r3, [r7, #24]
    a11e:	685b      	ldr	r3, [r3, #4]
    a120:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a124:	b29b      	uxth	r3, r3
    a126:	e000      	b.n	a12a <_usb_d_dev_out_next+0x3a>
    a128:	2300      	movs	r3, #0
    a12a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a12c:	78fb      	ldrb	r3, [r7, #3]
    a12e:	2b00      	cmp	r3, #0
    a130:	d005      	beq.n	a13e <_usb_d_dev_out_next+0x4e>
    a132:	69bb      	ldr	r3, [r7, #24]
    a134:	685b      	ldr	r3, [r3, #4]
    a136:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a13a:	b29b      	uxth	r3, r3
    a13c:	e000      	b.n	a140 <_usb_d_dev_out_next+0x50>
    a13e:	2300      	movs	r3, #0
    a140:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	8a1b      	ldrh	r3, [r3, #16]
    a146:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a14a:	4293      	cmp	r3, r2
    a14c:	d004      	beq.n	a158 <_usb_d_dev_out_next+0x68>
    a14e:	687b      	ldr	r3, [r7, #4]
    a150:	8a1b      	ldrh	r3, [r3, #16]
    a152:	3b01      	subs	r3, #1
    a154:	b29b      	uxth	r3, r3
    a156:	e001      	b.n	a15c <_usb_d_dev_out_next+0x6c>
    a158:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a15c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a15e:	8aba      	ldrh	r2, [r7, #20]
    a160:	8a7b      	ldrh	r3, [r7, #18]
    a162:	4013      	ands	r3, r2
    a164:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a166:	687b      	ldr	r3, [r7, #4]
    a168:	7cdb      	ldrb	r3, [r3, #19]
    a16a:	f003 0307 	and.w	r3, r3, #7
    a16e:	b2db      	uxtb	r3, r3
    a170:	2b01      	cmp	r3, #1
    a172:	bf0c      	ite	eq
    a174:	2301      	moveq	r3, #1
    a176:	2300      	movne	r3, #0
    a178:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a17a:	78fb      	ldrb	r3, [r7, #3]
    a17c:	2b00      	cmp	r3, #0
    a17e:	d004      	beq.n	a18a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a180:	7ffb      	ldrb	r3, [r7, #31]
    a182:	2100      	movs	r1, #0
    a184:	4618      	mov	r0, r3
    a186:	4b78      	ldr	r3, [pc, #480]	; (a368 <_usb_d_dev_out_next+0x278>)
    a188:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a18a:	687b      	ldr	r3, [r7, #4]
    a18c:	7cdb      	ldrb	r3, [r3, #19]
    a18e:	f003 0320 	and.w	r3, r3, #32
    a192:	b2db      	uxtb	r3, r3
    a194:	2b00      	cmp	r3, #0
    a196:	d01c      	beq.n	a1d2 <_usb_d_dev_out_next+0xe2>
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	685b      	ldr	r3, [r3, #4]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d018      	beq.n	a1d2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	685b      	ldr	r3, [r3, #4]
    a1a4:	b29a      	uxth	r2, r3
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	689b      	ldr	r3, [r3, #8]
    a1aa:	b29b      	uxth	r3, r3
    a1ac:	1ad3      	subs	r3, r2, r3
    a1ae:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a1b0:	687b      	ldr	r3, [r7, #4]
    a1b2:	681a      	ldr	r2, [r3, #0]
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	689b      	ldr	r3, [r3, #8]
    a1b8:	18d0      	adds	r0, r2, r3
    a1ba:	687b      	ldr	r3, [r7, #4]
    a1bc:	68d9      	ldr	r1, [r3, #12]
    a1be:	89ba      	ldrh	r2, [r7, #12]
    a1c0:	8a3b      	ldrh	r3, [r7, #16]
    a1c2:	429a      	cmp	r2, r3
    a1c4:	d901      	bls.n	a1ca <_usb_d_dev_out_next+0xda>
    a1c6:	8a3b      	ldrh	r3, [r7, #16]
    a1c8:	e000      	b.n	a1cc <_usb_d_dev_out_next+0xdc>
    a1ca:	89bb      	ldrh	r3, [r7, #12]
    a1cc:	461a      	mov	r2, r3
    a1ce:	4b67      	ldr	r3, [pc, #412]	; (a36c <_usb_d_dev_out_next+0x27c>)
    a1d0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a1d2:	687b      	ldr	r3, [r7, #4]
    a1d4:	685b      	ldr	r3, [r3, #4]
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	d121      	bne.n	a21e <_usb_d_dev_out_next+0x12e>
    a1da:	687b      	ldr	r3, [r7, #4]
    a1dc:	7cdb      	ldrb	r3, [r3, #19]
    a1de:	f003 0310 	and.w	r3, r3, #16
    a1e2:	b2db      	uxtb	r3, r3
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d01a      	beq.n	a21e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a1e8:	687a      	ldr	r2, [r7, #4]
    a1ea:	7cd3      	ldrb	r3, [r2, #19]
    a1ec:	f36f 1304 	bfc	r3, #4, #1
    a1f0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a1f2:	687a      	ldr	r2, [r7, #4]
    a1f4:	7cd3      	ldrb	r3, [r2, #19]
    a1f6:	f043 0320 	orr.w	r3, r3, #32
    a1fa:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1fc:	687b      	ldr	r3, [r7, #4]
    a1fe:	68db      	ldr	r3, [r3, #12]
    a200:	461a      	mov	r2, r3
    a202:	7ffb      	ldrb	r3, [r7, #31]
    a204:	2100      	movs	r1, #0
    a206:	4618      	mov	r0, r3
    a208:	4b59      	ldr	r3, [pc, #356]	; (a370 <_usb_d_dev_out_next+0x280>)
    a20a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	8a1b      	ldrh	r3, [r3, #16]
    a210:	461a      	mov	r2, r3
    a212:	7ff8      	ldrb	r0, [r7, #31]
    a214:	2300      	movs	r3, #0
    a216:	2100      	movs	r1, #0
    a218:	4c56      	ldr	r4, [pc, #344]	; (a374 <_usb_d_dev_out_next+0x284>)
    a21a:	47a0      	blx	r4
		goto _out_rx_exec;
    a21c:	e090      	b.n	a340 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a21e:	78fb      	ldrb	r3, [r7, #3]
    a220:	2b00      	cmp	r3, #0
    a222:	d010      	beq.n	a246 <_usb_d_dev_out_next+0x156>
    a224:	687b      	ldr	r3, [r7, #4]
    a226:	8a1b      	ldrh	r3, [r3, #16]
    a228:	8a3a      	ldrh	r2, [r7, #16]
    a22a:	429a      	cmp	r2, r3
    a22c:	d20b      	bcs.n	a246 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a22e:	687a      	ldr	r2, [r7, #4]
    a230:	7cd3      	ldrb	r3, [r2, #19]
    a232:	f36f 1304 	bfc	r3, #4, #1
    a236:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	689a      	ldr	r2, [r3, #8]
    a23c:	8abb      	ldrh	r3, [r7, #20]
    a23e:	441a      	add	r2, r3
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	609a      	str	r2, [r3, #8]
    a244:	e05c      	b.n	a300 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a246:	687b      	ldr	r3, [r7, #4]
    a248:	689a      	ldr	r2, [r3, #8]
    a24a:	8afb      	ldrh	r3, [r7, #22]
    a24c:	441a      	add	r2, r3
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a252:	687b      	ldr	r3, [r7, #4]
    a254:	689a      	ldr	r2, [r3, #8]
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	685b      	ldr	r3, [r3, #4]
    a25a:	429a      	cmp	r2, r3
    a25c:	d250      	bcs.n	a300 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	685b      	ldr	r3, [r3, #4]
    a262:	b29a      	uxth	r2, r3
    a264:	687b      	ldr	r3, [r7, #4]
    a266:	689b      	ldr	r3, [r3, #8]
    a268:	b29b      	uxth	r3, r3
    a26a:	1ad3      	subs	r3, r2, r3
    a26c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	7cdb      	ldrb	r3, [r3, #19]
    a272:	f003 0320 	and.w	r3, r3, #32
    a276:	b2db      	uxtb	r3, r3
    a278:	2b00      	cmp	r3, #0
    a27a:	d010      	beq.n	a29e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	8a1b      	ldrh	r3, [r3, #16]
    a280:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a282:	429a      	cmp	r2, r3
    a284:	d902      	bls.n	a28c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	8a1b      	ldrh	r3, [r3, #16]
    a28a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a28c:	687b      	ldr	r3, [r7, #4]
    a28e:	68db      	ldr	r3, [r3, #12]
    a290:	461a      	mov	r2, r3
    a292:	7ffb      	ldrb	r3, [r7, #31]
    a294:	2100      	movs	r1, #0
    a296:	4618      	mov	r0, r3
    a298:	4b35      	ldr	r3, [pc, #212]	; (a370 <_usb_d_dev_out_next+0x280>)
    a29a:	4798      	blx	r3
    a29c:	e029      	b.n	a2f2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a29e:	687b      	ldr	r3, [r7, #4]
    a2a0:	8a1b      	ldrh	r3, [r3, #16]
    a2a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2a4:	429a      	cmp	r2, r3
    a2a6:	d90f      	bls.n	a2c8 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a2a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a2aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a2ae:	d903      	bls.n	a2b8 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a2b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a2b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    a2b6:	e011      	b.n	a2dc <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a2b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2ba:	8a7b      	ldrh	r3, [r7, #18]
    a2bc:	4013      	ands	r3, r2
    a2be:	b29b      	uxth	r3, r3
    a2c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2c2:	1ad3      	subs	r3, r2, r3
    a2c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    a2c6:	e009      	b.n	a2dc <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a2c8:	687b      	ldr	r3, [r7, #4]
    a2ca:	8a1b      	ldrh	r3, [r3, #16]
    a2cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2ce:	429a      	cmp	r2, r3
    a2d0:	d204      	bcs.n	a2dc <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a2d2:	687a      	ldr	r2, [r7, #4]
    a2d4:	7cd3      	ldrb	r3, [r2, #19]
    a2d6:	f043 0320 	orr.w	r3, r3, #32
    a2da:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a2dc:	687b      	ldr	r3, [r7, #4]
    a2de:	681a      	ldr	r2, [r3, #0]
    a2e0:	687b      	ldr	r3, [r7, #4]
    a2e2:	689b      	ldr	r3, [r3, #8]
    a2e4:	4413      	add	r3, r2
    a2e6:	461a      	mov	r2, r3
    a2e8:	7ffb      	ldrb	r3, [r7, #31]
    a2ea:	2100      	movs	r1, #0
    a2ec:	4618      	mov	r0, r3
    a2ee:	4b20      	ldr	r3, [pc, #128]	; (a370 <_usb_d_dev_out_next+0x280>)
    a2f0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a2f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2f4:	7ff8      	ldrb	r0, [r7, #31]
    a2f6:	2300      	movs	r3, #0
    a2f8:	2100      	movs	r1, #0
    a2fa:	4c1e      	ldr	r4, [pc, #120]	; (a374 <_usb_d_dev_out_next+0x284>)
    a2fc:	47a0      	blx	r4
			goto _out_rx_exec;
    a2fe:	e01f      	b.n	a340 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a300:	7bfb      	ldrb	r3, [r7, #15]
    a302:	2b00      	cmp	r3, #0
    a304:	d006      	beq.n	a314 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a306:	7ffb      	ldrb	r3, [r7, #31]
    a308:	222d      	movs	r2, #45	; 0x2d
    a30a:	4619      	mov	r1, r3
    a30c:	6a38      	ldr	r0, [r7, #32]
    a30e:	4b1a      	ldr	r3, [pc, #104]	; (a378 <_usb_d_dev_out_next+0x288>)
    a310:	4798      	blx	r3
    a312:	e005      	b.n	a320 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a314:	7ffb      	ldrb	r3, [r7, #31]
    a316:	2225      	movs	r2, #37	; 0x25
    a318:	4619      	mov	r1, r3
    a31a:	6a38      	ldr	r0, [r7, #32]
    a31c:	4b16      	ldr	r3, [pc, #88]	; (a378 <_usb_d_dev_out_next+0x288>)
    a31e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a320:	7ffb      	ldrb	r3, [r7, #31]
    a322:	2b00      	cmp	r3, #0
    a324:	d107      	bne.n	a336 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a326:	687b      	ldr	r3, [r7, #4]
    a328:	68db      	ldr	r3, [r3, #12]
    a32a:	461a      	mov	r2, r3
    a32c:	7ffb      	ldrb	r3, [r7, #31]
    a32e:	2100      	movs	r1, #0
    a330:	4618      	mov	r0, r3
    a332:	4b0f      	ldr	r3, [pc, #60]	; (a370 <_usb_d_dev_out_next+0x280>)
    a334:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a336:	2100      	movs	r1, #0
    a338:	6878      	ldr	r0, [r7, #4]
    a33a:	4b10      	ldr	r3, [pc, #64]	; (a37c <_usb_d_dev_out_next+0x28c>)
    a33c:	4798      	blx	r3
	return;
    a33e:	e031      	b.n	a3a4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a340:	78fb      	ldrb	r3, [r7, #3]
    a342:	f083 0301 	eor.w	r3, r3, #1
    a346:	b2db      	uxtb	r3, r3
    a348:	2b00      	cmp	r3, #0
    a34a:	d025      	beq.n	a398 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a34c:	7bfb      	ldrb	r3, [r7, #15]
    a34e:	2b00      	cmp	r3, #0
    a350:	d018      	beq.n	a384 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a352:	7ffb      	ldrb	r3, [r7, #31]
    a354:	2101      	movs	r1, #1
    a356:	4618      	mov	r0, r3
    a358:	4b09      	ldr	r3, [pc, #36]	; (a380 <_usb_d_dev_out_next+0x290>)
    a35a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a35c:	232d      	movs	r3, #45	; 0x2d
    a35e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a362:	e012      	b.n	a38a <_usb_d_dev_out_next+0x29a>
    a364:	200011a4 	.word	0x200011a4
    a368:	000098d1 	.word	0x000098d1
    a36c:	00013b45 	.word	0x00013b45
    a370:	000098fd 	.word	0x000098fd
    a374:	00009a85 	.word	0x00009a85
    a378:	000091dd 	.word	0x000091dd
    a37c:	0000b201 	.word	0x0000b201
    a380:	00009ac5 	.word	0x00009ac5
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a384:	2325      	movs	r3, #37	; 0x25
    a386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a38a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a38e:	7ffb      	ldrb	r3, [r7, #31]
    a390:	4619      	mov	r1, r3
    a392:	6a38      	ldr	r0, [r7, #32]
    a394:	4b05      	ldr	r3, [pc, #20]	; (a3ac <_usb_d_dev_out_next+0x2bc>)
    a396:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a398:	7ffb      	ldrb	r3, [r7, #31]
    a39a:	2201      	movs	r2, #1
    a39c:	2100      	movs	r1, #0
    a39e:	4618      	mov	r0, r3
    a3a0:	4b03      	ldr	r3, [pc, #12]	; (a3b0 <_usb_d_dev_out_next+0x2c0>)
    a3a2:	4798      	blx	r3
}
    a3a4:	372c      	adds	r7, #44	; 0x2c
    a3a6:	46bd      	mov	sp, r7
    a3a8:	bd90      	pop	{r4, r7, pc}
    a3aa:	bf00      	nop
    a3ac:	000091b1 	.word	0x000091b1
    a3b0:	00009b55 	.word	0x00009b55

0000a3b4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a3b4:	b580      	push	{r7, lr}
    a3b6:	b084      	sub	sp, #16
    a3b8:	af00      	add	r7, sp, #0
    a3ba:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a3bc:	687b      	ldr	r3, [r7, #4]
    a3be:	7c9b      	ldrb	r3, [r3, #18]
    a3c0:	f003 030f 	and.w	r3, r3, #15
    a3c4:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a3c6:	687b      	ldr	r3, [r7, #4]
    a3c8:	7cdb      	ldrb	r3, [r3, #19]
    a3ca:	f003 0307 	and.w	r3, r3, #7
    a3ce:	b2db      	uxtb	r3, r3
    a3d0:	2b01      	cmp	r3, #1
    a3d2:	bf0c      	ite	eq
    a3d4:	2301      	moveq	r3, #1
    a3d6:	2300      	movne	r3, #0
    a3d8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a3da:	7bbb      	ldrb	r3, [r7, #14]
    a3dc:	f083 0301 	eor.w	r3, r3, #1
    a3e0:	b2db      	uxtb	r3, r3
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	d008      	beq.n	a3f8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a3e6:	7bfb      	ldrb	r3, [r7, #15]
    a3e8:	4618      	mov	r0, r3
    a3ea:	4b20      	ldr	r3, [pc, #128]	; (a46c <_usb_d_dev_handle_setup+0xb8>)
    a3ec:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a3ee:	7bfb      	ldrb	r3, [r7, #15]
    a3f0:	4618      	mov	r0, r3
    a3f2:	4b1f      	ldr	r3, [pc, #124]	; (a470 <_usb_d_dev_handle_setup+0xbc>)
    a3f4:	4798      	blx	r3
		return;
    a3f6:	e036      	b.n	a466 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	7cdb      	ldrb	r3, [r3, #19]
    a3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a400:	b2db      	uxtb	r3, r3
    a402:	2b00      	cmp	r3, #0
    a404:	d010      	beq.n	a428 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a406:	687a      	ldr	r2, [r7, #4]
    a408:	7cd3      	ldrb	r3, [r2, #19]
    a40a:	f36f 1386 	bfc	r3, #6, #1
    a40e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a410:	7bfb      	ldrb	r3, [r7, #15]
    a412:	2200      	movs	r2, #0
    a414:	2101      	movs	r1, #1
    a416:	4618      	mov	r0, r3
    a418:	4b16      	ldr	r3, [pc, #88]	; (a474 <_usb_d_dev_handle_setup+0xc0>)
    a41a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a41c:	7bfb      	ldrb	r3, [r7, #15]
    a41e:	2200      	movs	r2, #0
    a420:	2100      	movs	r1, #0
    a422:	4618      	mov	r0, r3
    a424:	4b14      	ldr	r3, [pc, #80]	; (a478 <_usb_d_dev_handle_setup+0xc4>)
    a426:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a428:	687a      	ldr	r2, [r7, #4]
    a42a:	7cd3      	ldrb	r3, [r2, #19]
    a42c:	f36f 03c3 	bfc	r3, #3, #1
    a430:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a432:	7bfb      	ldrb	r3, [r7, #15]
    a434:	2100      	movs	r1, #0
    a436:	4618      	mov	r0, r3
    a438:	4b10      	ldr	r3, [pc, #64]	; (a47c <_usb_d_dev_handle_setup+0xc8>)
    a43a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a43c:	7bfb      	ldrb	r3, [r7, #15]
    a43e:	2101      	movs	r1, #1
    a440:	4618      	mov	r0, r3
    a442:	4b0e      	ldr	r3, [pc, #56]	; (a47c <_usb_d_dev_handle_setup+0xc8>)
    a444:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a446:	7bfb      	ldrb	r3, [r7, #15]
    a448:	216f      	movs	r1, #111	; 0x6f
    a44a:	4618      	mov	r0, r3
    a44c:	4b0c      	ldr	r3, [pc, #48]	; (a480 <_usb_d_dev_handle_setup+0xcc>)
    a44e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a450:	7bfb      	ldrb	r3, [r7, #15]
    a452:	216f      	movs	r1, #111	; 0x6f
    a454:	4618      	mov	r0, r3
    a456:	4b0b      	ldr	r3, [pc, #44]	; (a484 <_usb_d_dev_handle_setup+0xd0>)
    a458:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a45a:	4b0b      	ldr	r3, [pc, #44]	; (a488 <_usb_d_dev_handle_setup+0xd4>)
    a45c:	689b      	ldr	r3, [r3, #8]
    a45e:	687a      	ldr	r2, [r7, #4]
    a460:	7c92      	ldrb	r2, [r2, #18]
    a462:	4610      	mov	r0, r2
    a464:	4798      	blx	r3
}
    a466:	3710      	adds	r7, #16
    a468:	46bd      	mov	sp, r7
    a46a:	bd80      	pop	{r7, pc}
    a46c:	00009859 	.word	0x00009859
    a470:	00009805 	.word	0x00009805
    a474:	00009afd 	.word	0x00009afd
    a478:	00009b55 	.word	0x00009b55
    a47c:	00009ac5 	.word	0x00009ac5
    a480:	00009605 	.word	0x00009605
    a484:	00009655 	.word	0x00009655
    a488:	200010dc 	.word	0x200010dc

0000a48c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a48c:	b580      	push	{r7, lr}
    a48e:	b084      	sub	sp, #16
    a490:	af00      	add	r7, sp, #0
    a492:	6078      	str	r0, [r7, #4]
    a494:	460b      	mov	r3, r1
    a496:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a498:	687b      	ldr	r3, [r7, #4]
    a49a:	7c9b      	ldrb	r3, [r3, #18]
    a49c:	f003 030f 	and.w	r3, r3, #15
    a4a0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a4a2:	78f9      	ldrb	r1, [r7, #3]
    a4a4:	7bfb      	ldrb	r3, [r7, #15]
    a4a6:	2200      	movs	r2, #0
    a4a8:	4618      	mov	r0, r3
    a4aa:	4b07      	ldr	r3, [pc, #28]	; (a4c8 <_usb_d_dev_handle_stall+0x3c>)
    a4ac:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a4ae:	4b07      	ldr	r3, [pc, #28]	; (a4cc <_usb_d_dev_handle_stall+0x40>)
    a4b0:	691b      	ldr	r3, [r3, #16]
    a4b2:	687a      	ldr	r2, [r7, #4]
    a4b4:	7c90      	ldrb	r0, [r2, #18]
    a4b6:	687a      	ldr	r2, [r7, #4]
    a4b8:	6892      	ldr	r2, [r2, #8]
    a4ba:	2101      	movs	r1, #1
    a4bc:	4798      	blx	r3
}
    a4be:	bf00      	nop
    a4c0:	3710      	adds	r7, #16
    a4c2:	46bd      	mov	sp, r7
    a4c4:	bd80      	pop	{r7, pc}
    a4c6:	bf00      	nop
    a4c8:	000097b9 	.word	0x000097b9
    a4cc:	200010dc 	.word	0x200010dc

0000a4d0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a4d0:	b580      	push	{r7, lr}
    a4d2:	b088      	sub	sp, #32
    a4d4:	af00      	add	r7, sp, #0
    a4d6:	6078      	str	r0, [r7, #4]
    a4d8:	460b      	mov	r3, r1
    a4da:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a4dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4e0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	7c9b      	ldrb	r3, [r3, #18]
    a4e6:	f003 030f 	and.w	r3, r3, #15
    a4ea:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a4ec:	4b61      	ldr	r3, [pc, #388]	; (a674 <_usb_d_dev_handle_trfail+0x1a4>)
    a4ee:	881b      	ldrh	r3, [r3, #0]
    a4f0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a4f2:	7efb      	ldrb	r3, [r7, #27]
    a4f4:	015b      	lsls	r3, r3, #5
    a4f6:	4a60      	ldr	r2, [pc, #384]	; (a678 <_usb_d_dev_handle_trfail+0x1a8>)
    a4f8:	4413      	add	r3, r2
    a4fa:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a4fc:	78fb      	ldrb	r3, [r7, #3]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d006      	beq.n	a510 <_usb_d_dev_handle_trfail+0x40>
    a502:	7efb      	ldrb	r3, [r7, #27]
    a504:	4619      	mov	r1, r3
    a506:	69f8      	ldr	r0, [r7, #28]
    a508:	4b5c      	ldr	r3, [pc, #368]	; (a67c <_usb_d_dev_handle_trfail+0x1ac>)
    a50a:	4798      	blx	r3
    a50c:	4603      	mov	r3, r0
    a50e:	e005      	b.n	a51c <_usb_d_dev_handle_trfail+0x4c>
    a510:	7efb      	ldrb	r3, [r7, #27]
    a512:	4619      	mov	r1, r3
    a514:	69f8      	ldr	r0, [r7, #28]
    a516:	4b5a      	ldr	r3, [pc, #360]	; (a680 <_usb_d_dev_handle_trfail+0x1b0>)
    a518:	4798      	blx	r3
    a51a:	4603      	mov	r3, r0
    a51c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a51e:	687b      	ldr	r3, [r7, #4]
    a520:	7cdb      	ldrb	r3, [r3, #19]
    a522:	f003 0307 	and.w	r3, r3, #7
    a526:	b2db      	uxtb	r3, r3
    a528:	2b01      	cmp	r3, #1
    a52a:	bf0c      	ite	eq
    a52c:	2301      	moveq	r3, #1
    a52e:	2300      	movne	r3, #0
    a530:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a532:	78fb      	ldrb	r3, [r7, #3]
    a534:	011b      	lsls	r3, r3, #4
    a536:	697a      	ldr	r2, [r7, #20]
    a538:	4413      	add	r3, r2
    a53a:	7a9b      	ldrb	r3, [r3, #10]
    a53c:	b2db      	uxtb	r3, r3
    a53e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a540:	7cfb      	ldrb	r3, [r7, #19]
    a542:	2b02      	cmp	r3, #2
    a544:	d12f      	bne.n	a5a6 <_usb_d_dev_handle_trfail+0xd6>
    a546:	7b3b      	ldrb	r3, [r7, #12]
    a548:	f003 0301 	and.w	r3, r3, #1
    a54c:	b2db      	uxtb	r3, r3
    a54e:	2b00      	cmp	r3, #0
    a550:	d029      	beq.n	a5a6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a552:	78fb      	ldrb	r3, [r7, #3]
    a554:	011b      	lsls	r3, r3, #4
    a556:	697a      	ldr	r2, [r7, #20]
    a558:	441a      	add	r2, r3
    a55a:	7a93      	ldrb	r3, [r2, #10]
    a55c:	f36f 0300 	bfc	r3, #0, #1
    a560:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a562:	78fb      	ldrb	r3, [r7, #3]
    a564:	f107 0220 	add.w	r2, r7, #32
    a568:	4413      	add	r3, r2
    a56a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a56e:	7efb      	ldrb	r3, [r7, #27]
    a570:	4619      	mov	r1, r3
    a572:	69f8      	ldr	r0, [r7, #28]
    a574:	4b43      	ldr	r3, [pc, #268]	; (a684 <_usb_d_dev_handle_trfail+0x1b4>)
    a576:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a578:	78fb      	ldrb	r3, [r7, #3]
    a57a:	f107 0220 	add.w	r2, r7, #32
    a57e:	4413      	add	r3, r2
    a580:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a584:	7efb      	ldrb	r3, [r7, #27]
    a586:	4619      	mov	r1, r3
    a588:	69f8      	ldr	r0, [r7, #28]
    a58a:	4b3f      	ldr	r3, [pc, #252]	; (a688 <_usb_d_dev_handle_trfail+0x1b8>)
    a58c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a58e:	78fb      	ldrb	r3, [r7, #3]
    a590:	2b00      	cmp	r3, #0
    a592:	bf14      	ite	ne
    a594:	2301      	movne	r3, #1
    a596:	2300      	moveq	r3, #0
    a598:	b2db      	uxtb	r3, r3
    a59a:	2204      	movs	r2, #4
    a59c:	4619      	mov	r1, r3
    a59e:	6878      	ldr	r0, [r7, #4]
    a5a0:	4b3a      	ldr	r3, [pc, #232]	; (a68c <_usb_d_dev_handle_trfail+0x1bc>)
    a5a2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a5a4:	e062      	b.n	a66c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a5a6:	7b3b      	ldrb	r3, [r7, #12]
    a5a8:	f003 0302 	and.w	r3, r3, #2
    a5ac:	b2db      	uxtb	r3, r3
    a5ae:	2b00      	cmp	r3, #0
    a5b0:	d040      	beq.n	a634 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a5b2:	78fb      	ldrb	r3, [r7, #3]
    a5b4:	011b      	lsls	r3, r3, #4
    a5b6:	697a      	ldr	r2, [r7, #20]
    a5b8:	441a      	add	r2, r3
    a5ba:	7a93      	ldrb	r3, [r2, #10]
    a5bc:	f36f 0341 	bfc	r3, #1, #1
    a5c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a5c2:	78fb      	ldrb	r3, [r7, #3]
    a5c4:	f107 0220 	add.w	r2, r7, #32
    a5c8:	4413      	add	r3, r2
    a5ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5ce:	7efb      	ldrb	r3, [r7, #27]
    a5d0:	4619      	mov	r1, r3
    a5d2:	69f8      	ldr	r0, [r7, #28]
    a5d4:	4b2b      	ldr	r3, [pc, #172]	; (a684 <_usb_d_dev_handle_trfail+0x1b4>)
    a5d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a5d8:	78fb      	ldrb	r3, [r7, #3]
    a5da:	f107 0220 	add.w	r2, r7, #32
    a5de:	4413      	add	r3, r2
    a5e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5e4:	7efb      	ldrb	r3, [r7, #27]
    a5e6:	4619      	mov	r1, r3
    a5e8:	69f8      	ldr	r0, [r7, #28]
    a5ea:	4b27      	ldr	r3, [pc, #156]	; (a688 <_usb_d_dev_handle_trfail+0x1b8>)
    a5ec:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a5ee:	7cbb      	ldrb	r3, [r7, #18]
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d03b      	beq.n	a66c <_usb_d_dev_handle_trfail+0x19c>
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	7cdb      	ldrb	r3, [r3, #19]
    a5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5fc:	b2db      	uxtb	r3, r3
    a5fe:	2b00      	cmp	r3, #0
    a600:	d034      	beq.n	a66c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a602:	687b      	ldr	r3, [r7, #4]
    a604:	7cdb      	ldrb	r3, [r3, #19]
    a606:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a60a:	b2db      	uxtb	r3, r3
    a60c:	461a      	mov	r2, r3
    a60e:	78fb      	ldrb	r3, [r7, #3]
    a610:	4293      	cmp	r3, r2
    a612:	d02b      	beq.n	a66c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	7cdb      	ldrb	r3, [r3, #19]
    a618:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a61c:	b2db      	uxtb	r3, r3
    a61e:	2b00      	cmp	r3, #0
    a620:	bf14      	ite	ne
    a622:	2301      	movne	r3, #1
    a624:	2300      	moveq	r3, #0
    a626:	b2db      	uxtb	r3, r3
    a628:	2200      	movs	r2, #0
    a62a:	4619      	mov	r1, r3
    a62c:	6878      	ldr	r0, [r7, #4]
    a62e:	4b17      	ldr	r3, [pc, #92]	; (a68c <_usb_d_dev_handle_trfail+0x1bc>)
    a630:	4798      	blx	r3
}
    a632:	e01b      	b.n	a66c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a634:	78fa      	ldrb	r2, [r7, #3]
    a636:	7efb      	ldrb	r3, [r7, #27]
    a638:	4611      	mov	r1, r2
    a63a:	4618      	mov	r0, r3
    a63c:	4b14      	ldr	r3, [pc, #80]	; (a690 <_usb_d_dev_handle_trfail+0x1c0>)
    a63e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a640:	78fb      	ldrb	r3, [r7, #3]
    a642:	f107 0220 	add.w	r2, r7, #32
    a646:	4413      	add	r3, r2
    a648:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a64c:	7efb      	ldrb	r3, [r7, #27]
    a64e:	4619      	mov	r1, r3
    a650:	69f8      	ldr	r0, [r7, #28]
    a652:	4b0c      	ldr	r3, [pc, #48]	; (a684 <_usb_d_dev_handle_trfail+0x1b4>)
    a654:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a656:	78fb      	ldrb	r3, [r7, #3]
    a658:	f107 0220 	add.w	r2, r7, #32
    a65c:	4413      	add	r3, r2
    a65e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a662:	7efb      	ldrb	r3, [r7, #27]
    a664:	4619      	mov	r1, r3
    a666:	69f8      	ldr	r0, [r7, #28]
    a668:	4b07      	ldr	r3, [pc, #28]	; (a688 <_usb_d_dev_handle_trfail+0x1b8>)
    a66a:	4798      	blx	r3
}
    a66c:	bf00      	nop
    a66e:	3720      	adds	r7, #32
    a670:	46bd      	mov	sp, r7
    a672:	bd80      	pop	{r7, pc}
    a674:	000142f0 	.word	0x000142f0
    a678:	200011a4 	.word	0x200011a4
    a67c:	00009239 	.word	0x00009239
    a680:	00009209 	.word	0x00009209
    a684:	000090dd 	.word	0x000090dd
    a688:	000091dd 	.word	0x000091dd
    a68c:	0000b249 	.word	0x0000b249
    a690:	00009ac5 	.word	0x00009ac5

0000a694 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a694:	b580      	push	{r7, lr}
    a696:	b082      	sub	sp, #8
    a698:	af00      	add	r7, sp, #0
    a69a:	6078      	str	r0, [r7, #4]
    a69c:	460b      	mov	r3, r1
    a69e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a6a0:	78fb      	ldrb	r3, [r7, #3]
    a6a2:	f003 0310 	and.w	r3, r3, #16
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	d003      	beq.n	a6b2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a6aa:	6878      	ldr	r0, [r7, #4]
    a6ac:	4b0c      	ldr	r3, [pc, #48]	; (a6e0 <_usb_d_dev_trans_setup_isr+0x4c>)
    a6ae:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a6b0:	e012      	b.n	a6d8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a6b2:	78fb      	ldrb	r3, [r7, #3]
    a6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	d004      	beq.n	a6c6 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a6bc:	2101      	movs	r1, #1
    a6be:	6878      	ldr	r0, [r7, #4]
    a6c0:	4b08      	ldr	r3, [pc, #32]	; (a6e4 <_usb_d_dev_trans_setup_isr+0x50>)
    a6c2:	4798      	blx	r3
}
    a6c4:	e008      	b.n	a6d8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a6c6:	78fb      	ldrb	r3, [r7, #3]
    a6c8:	f003 0320 	and.w	r3, r3, #32
    a6cc:	2b00      	cmp	r3, #0
    a6ce:	d003      	beq.n	a6d8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a6d0:	2100      	movs	r1, #0
    a6d2:	6878      	ldr	r0, [r7, #4]
    a6d4:	4b03      	ldr	r3, [pc, #12]	; (a6e4 <_usb_d_dev_trans_setup_isr+0x50>)
    a6d6:	4798      	blx	r3
}
    a6d8:	bf00      	nop
    a6da:	3708      	adds	r7, #8
    a6dc:	46bd      	mov	sp, r7
    a6de:	bd80      	pop	{r7, pc}
    a6e0:	0000a3b5 	.word	0x0000a3b5
    a6e4:	0000a48d 	.word	0x0000a48d

0000a6e8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a6e8:	b580      	push	{r7, lr}
    a6ea:	b082      	sub	sp, #8
    a6ec:	af00      	add	r7, sp, #0
    a6ee:	6078      	str	r0, [r7, #4]
    a6f0:	460b      	mov	r3, r1
    a6f2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a6f4:	78fb      	ldrb	r3, [r7, #3]
    a6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d004      	beq.n	a708 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a6fe:	2101      	movs	r1, #1
    a700:	6878      	ldr	r0, [r7, #4]
    a702:	4b1a      	ldr	r3, [pc, #104]	; (a76c <_usb_d_dev_trans_in_isr+0x84>)
    a704:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a706:	e02c      	b.n	a762 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a708:	78fb      	ldrb	r3, [r7, #3]
    a70a:	f003 0308 	and.w	r3, r3, #8
    a70e:	2b00      	cmp	r3, #0
    a710:	d004      	beq.n	a71c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a712:	2101      	movs	r1, #1
    a714:	6878      	ldr	r0, [r7, #4]
    a716:	4b16      	ldr	r3, [pc, #88]	; (a770 <_usb_d_dev_trans_in_isr+0x88>)
    a718:	4798      	blx	r3
}
    a71a:	e022      	b.n	a762 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a71c:	78fb      	ldrb	r3, [r7, #3]
    a71e:	f003 0302 	and.w	r3, r3, #2
    a722:	2b00      	cmp	r3, #0
    a724:	d004      	beq.n	a730 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a726:	2101      	movs	r1, #1
    a728:	6878      	ldr	r0, [r7, #4]
    a72a:	4b12      	ldr	r3, [pc, #72]	; (a774 <_usb_d_dev_trans_in_isr+0x8c>)
    a72c:	4798      	blx	r3
}
    a72e:	e018      	b.n	a762 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	7cdb      	ldrb	r3, [r3, #19]
    a734:	f003 0307 	and.w	r3, r3, #7
    a738:	b2db      	uxtb	r3, r3
    a73a:	2b01      	cmp	r3, #1
    a73c:	d111      	bne.n	a762 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a73e:	78fb      	ldrb	r3, [r7, #3]
    a740:	f003 0304 	and.w	r3, r3, #4
    a744:	2b00      	cmp	r3, #0
    a746:	d004      	beq.n	a752 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a748:	2100      	movs	r1, #0
    a74a:	6878      	ldr	r0, [r7, #4]
    a74c:	4b08      	ldr	r3, [pc, #32]	; (a770 <_usb_d_dev_trans_in_isr+0x88>)
    a74e:	4798      	blx	r3
}
    a750:	e007      	b.n	a762 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a752:	78fb      	ldrb	r3, [r7, #3]
    a754:	f003 0310 	and.w	r3, r3, #16
    a758:	2b00      	cmp	r3, #0
    a75a:	d002      	beq.n	a762 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a75c:	6878      	ldr	r0, [r7, #4]
    a75e:	4b06      	ldr	r3, [pc, #24]	; (a778 <_usb_d_dev_trans_in_isr+0x90>)
    a760:	4798      	blx	r3
}
    a762:	bf00      	nop
    a764:	3708      	adds	r7, #8
    a766:	46bd      	mov	sp, r7
    a768:	bd80      	pop	{r7, pc}
    a76a:	bf00      	nop
    a76c:	0000a48d 	.word	0x0000a48d
    a770:	0000a4d1 	.word	0x0000a4d1
    a774:	00009ed9 	.word	0x00009ed9
    a778:	0000a3b5 	.word	0x0000a3b5

0000a77c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a77c:	b580      	push	{r7, lr}
    a77e:	b082      	sub	sp, #8
    a780:	af00      	add	r7, sp, #0
    a782:	6078      	str	r0, [r7, #4]
    a784:	460b      	mov	r3, r1
    a786:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a788:	78fb      	ldrb	r3, [r7, #3]
    a78a:	f003 0320 	and.w	r3, r3, #32
    a78e:	2b00      	cmp	r3, #0
    a790:	d004      	beq.n	a79c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a792:	2100      	movs	r1, #0
    a794:	6878      	ldr	r0, [r7, #4]
    a796:	4b1a      	ldr	r3, [pc, #104]	; (a800 <_usb_d_dev_trans_out_isr+0x84>)
    a798:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a79a:	e02c      	b.n	a7f6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a79c:	78fb      	ldrb	r3, [r7, #3]
    a79e:	f003 0304 	and.w	r3, r3, #4
    a7a2:	2b00      	cmp	r3, #0
    a7a4:	d004      	beq.n	a7b0 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a7a6:	2100      	movs	r1, #0
    a7a8:	6878      	ldr	r0, [r7, #4]
    a7aa:	4b16      	ldr	r3, [pc, #88]	; (a804 <_usb_d_dev_trans_out_isr+0x88>)
    a7ac:	4798      	blx	r3
}
    a7ae:	e022      	b.n	a7f6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a7b0:	78fb      	ldrb	r3, [r7, #3]
    a7b2:	f003 0301 	and.w	r3, r3, #1
    a7b6:	2b00      	cmp	r3, #0
    a7b8:	d004      	beq.n	a7c4 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a7ba:	2101      	movs	r1, #1
    a7bc:	6878      	ldr	r0, [r7, #4]
    a7be:	4b12      	ldr	r3, [pc, #72]	; (a808 <_usb_d_dev_trans_out_isr+0x8c>)
    a7c0:	4798      	blx	r3
}
    a7c2:	e018      	b.n	a7f6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	7cdb      	ldrb	r3, [r3, #19]
    a7c8:	f003 0307 	and.w	r3, r3, #7
    a7cc:	b2db      	uxtb	r3, r3
    a7ce:	2b01      	cmp	r3, #1
    a7d0:	d111      	bne.n	a7f6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a7d2:	78fb      	ldrb	r3, [r7, #3]
    a7d4:	f003 0308 	and.w	r3, r3, #8
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d004      	beq.n	a7e6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a7dc:	2101      	movs	r1, #1
    a7de:	6878      	ldr	r0, [r7, #4]
    a7e0:	4b08      	ldr	r3, [pc, #32]	; (a804 <_usb_d_dev_trans_out_isr+0x88>)
    a7e2:	4798      	blx	r3
}
    a7e4:	e007      	b.n	a7f6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a7e6:	78fb      	ldrb	r3, [r7, #3]
    a7e8:	f003 0310 	and.w	r3, r3, #16
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d002      	beq.n	a7f6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a7f0:	6878      	ldr	r0, [r7, #4]
    a7f2:	4b06      	ldr	r3, [pc, #24]	; (a80c <_usb_d_dev_trans_out_isr+0x90>)
    a7f4:	4798      	blx	r3
}
    a7f6:	bf00      	nop
    a7f8:	3708      	adds	r7, #8
    a7fa:	46bd      	mov	sp, r7
    a7fc:	bd80      	pop	{r7, pc}
    a7fe:	bf00      	nop
    a800:	0000a48d 	.word	0x0000a48d
    a804:	0000a4d1 	.word	0x0000a4d1
    a808:	0000a0f1 	.word	0x0000a0f1
    a80c:	0000a3b5 	.word	0x0000a3b5

0000a810 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a810:	b580      	push	{r7, lr}
    a812:	b084      	sub	sp, #16
    a814:	af00      	add	r7, sp, #0
    a816:	6078      	str	r0, [r7, #4]
    a818:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a81a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a81e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a820:	683b      	ldr	r3, [r7, #0]
    a822:	7c9b      	ldrb	r3, [r3, #18]
    a824:	f003 030f 	and.w	r3, r3, #15
    a828:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a82a:	7afb      	ldrb	r3, [r7, #11]
    a82c:	2201      	movs	r2, #1
    a82e:	409a      	lsls	r2, r3
    a830:	687b      	ldr	r3, [r7, #4]
    a832:	4013      	ands	r3, r2
    a834:	2b00      	cmp	r3, #0
    a836:	d03d      	beq.n	a8b4 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a838:	7afb      	ldrb	r3, [r7, #11]
    a83a:	68fa      	ldr	r2, [r7, #12]
    a83c:	3308      	adds	r3, #8
    a83e:	015b      	lsls	r3, r3, #5
    a840:	4413      	add	r3, r2
    a842:	3307      	adds	r3, #7
    a844:	781b      	ldrb	r3, [r3, #0]
    a846:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a848:	7afb      	ldrb	r3, [r7, #11]
    a84a:	68fa      	ldr	r2, [r7, #12]
    a84c:	015b      	lsls	r3, r3, #5
    a84e:	4413      	add	r3, r2
    a850:	f203 1309 	addw	r3, r3, #265	; 0x109
    a854:	781b      	ldrb	r3, [r3, #0]
    a856:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a858:	7aba      	ldrb	r2, [r7, #10]
    a85a:	7a7b      	ldrb	r3, [r7, #9]
    a85c:	4013      	ands	r3, r2
    a85e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a860:	7abb      	ldrb	r3, [r7, #10]
    a862:	2b00      	cmp	r3, #0
    a864:	d027      	beq.n	a8b6 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a866:	683b      	ldr	r3, [r7, #0]
    a868:	7cdb      	ldrb	r3, [r3, #19]
    a86a:	f003 0307 	and.w	r3, r3, #7
    a86e:	b2db      	uxtb	r3, r3
    a870:	2b01      	cmp	r3, #1
    a872:	d10c      	bne.n	a88e <_usb_d_dev_handle_eps+0x7e>
    a874:	683b      	ldr	r3, [r7, #0]
    a876:	7cdb      	ldrb	r3, [r3, #19]
    a878:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a87c:	b2db      	uxtb	r3, r3
    a87e:	2b00      	cmp	r3, #0
    a880:	d105      	bne.n	a88e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a882:	7abb      	ldrb	r3, [r7, #10]
    a884:	4619      	mov	r1, r3
    a886:	6838      	ldr	r0, [r7, #0]
    a888:	4b0c      	ldr	r3, [pc, #48]	; (a8bc <_usb_d_dev_handle_eps+0xac>)
    a88a:	4798      	blx	r3
    a88c:	e013      	b.n	a8b6 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a88e:	683b      	ldr	r3, [r7, #0]
    a890:	7cdb      	ldrb	r3, [r3, #19]
    a892:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a896:	b2db      	uxtb	r3, r3
    a898:	2b00      	cmp	r3, #0
    a89a:	d005      	beq.n	a8a8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a89c:	7abb      	ldrb	r3, [r7, #10]
    a89e:	4619      	mov	r1, r3
    a8a0:	6838      	ldr	r0, [r7, #0]
    a8a2:	4b07      	ldr	r3, [pc, #28]	; (a8c0 <_usb_d_dev_handle_eps+0xb0>)
    a8a4:	4798      	blx	r3
    a8a6:	e006      	b.n	a8b6 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a8a8:	7abb      	ldrb	r3, [r7, #10]
    a8aa:	4619      	mov	r1, r3
    a8ac:	6838      	ldr	r0, [r7, #0]
    a8ae:	4b05      	ldr	r3, [pc, #20]	; (a8c4 <_usb_d_dev_handle_eps+0xb4>)
    a8b0:	4798      	blx	r3
    a8b2:	e000      	b.n	a8b6 <_usb_d_dev_handle_eps+0xa6>
		return;
    a8b4:	bf00      	nop
		}
	}
}
    a8b6:	3710      	adds	r7, #16
    a8b8:	46bd      	mov	sp, r7
    a8ba:	bd80      	pop	{r7, pc}
    a8bc:	0000a695 	.word	0x0000a695
    a8c0:	0000a6e9 	.word	0x0000a6e9
    a8c4:	0000a77d 	.word	0x0000a77d

0000a8c8 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a8c8:	b580      	push	{r7, lr}
    a8ca:	b084      	sub	sp, #16
    a8cc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a8ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a8d2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a8d4:	68bb      	ldr	r3, [r7, #8]
    a8d6:	8c1b      	ldrh	r3, [r3, #32]
    a8d8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a8da:	88fb      	ldrh	r3, [r7, #6]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d104      	bne.n	a8ea <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a8e0:	4b13      	ldr	r3, [pc, #76]	; (a930 <_usb_d_dev_handler+0x68>)
    a8e2:	4798      	blx	r3
    a8e4:	4603      	mov	r3, r0
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d11e      	bne.n	a928 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a8ea:	2300      	movs	r3, #0
    a8ec:	73fb      	strb	r3, [r7, #15]
    a8ee:	e017      	b.n	a920 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a8f0:	7bfa      	ldrb	r2, [r7, #15]
    a8f2:	4613      	mov	r3, r2
    a8f4:	009b      	lsls	r3, r3, #2
    a8f6:	4413      	add	r3, r2
    a8f8:	009b      	lsls	r3, r3, #2
    a8fa:	3310      	adds	r3, #16
    a8fc:	4a0d      	ldr	r2, [pc, #52]	; (a934 <_usb_d_dev_handler+0x6c>)
    a8fe:	4413      	add	r3, r2
    a900:	3304      	adds	r3, #4
    a902:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a904:	683b      	ldr	r3, [r7, #0]
    a906:	7c9b      	ldrb	r3, [r3, #18]
    a908:	2bff      	cmp	r3, #255	; 0xff
    a90a:	d005      	beq.n	a918 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a90c:	88fb      	ldrh	r3, [r7, #6]
    a90e:	6839      	ldr	r1, [r7, #0]
    a910:	4618      	mov	r0, r3
    a912:	4b09      	ldr	r3, [pc, #36]	; (a938 <_usb_d_dev_handler+0x70>)
    a914:	4798      	blx	r3
    a916:	e000      	b.n	a91a <_usb_d_dev_handler+0x52>
			continue;
    a918:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a91a:	7bfb      	ldrb	r3, [r7, #15]
    a91c:	3301      	adds	r3, #1
    a91e:	73fb      	strb	r3, [r7, #15]
    a920:	7bfb      	ldrb	r3, [r7, #15]
    a922:	2b08      	cmp	r3, #8
    a924:	d9e4      	bls.n	a8f0 <_usb_d_dev_handler+0x28>
    a926:	e000      	b.n	a92a <_usb_d_dev_handler+0x62>
			return;
    a928:	bf00      	nop
	}
}
    a92a:	3710      	adds	r7, #16
    a92c:	46bd      	mov	sp, r7
    a92e:	bd80      	pop	{r7, pc}
    a930:	00009e21 	.word	0x00009e21
    a934:	200010dc 	.word	0x200010dc
    a938:	0000a811 	.word	0x0000a811

0000a93c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a93c:	b580      	push	{r7, lr}
    a93e:	b082      	sub	sp, #8
    a940:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a942:	2300      	movs	r3, #0
    a944:	71fb      	strb	r3, [r7, #7]
    a946:	e023      	b.n	a990 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a948:	79fa      	ldrb	r2, [r7, #7]
    a94a:	4613      	mov	r3, r2
    a94c:	009b      	lsls	r3, r3, #2
    a94e:	4413      	add	r3, r2
    a950:	009b      	lsls	r3, r3, #2
    a952:	3310      	adds	r3, #16
    a954:	4a14      	ldr	r2, [pc, #80]	; (a9a8 <_usb_d_dev_reset_epts+0x6c>)
    a956:	4413      	add	r3, r2
    a958:	3304      	adds	r3, #4
    a95a:	2103      	movs	r1, #3
    a95c:	4618      	mov	r0, r3
    a95e:	4b13      	ldr	r3, [pc, #76]	; (a9ac <_usb_d_dev_reset_epts+0x70>)
    a960:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a962:	79fa      	ldrb	r2, [r7, #7]
    a964:	4910      	ldr	r1, [pc, #64]	; (a9a8 <_usb_d_dev_reset_epts+0x6c>)
    a966:	4613      	mov	r3, r2
    a968:	009b      	lsls	r3, r3, #2
    a96a:	4413      	add	r3, r2
    a96c:	009b      	lsls	r3, r3, #2
    a96e:	440b      	add	r3, r1
    a970:	3326      	adds	r3, #38	; 0x26
    a972:	22ff      	movs	r2, #255	; 0xff
    a974:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a976:	79fa      	ldrb	r2, [r7, #7]
    a978:	490b      	ldr	r1, [pc, #44]	; (a9a8 <_usb_d_dev_reset_epts+0x6c>)
    a97a:	4613      	mov	r3, r2
    a97c:	009b      	lsls	r3, r3, #2
    a97e:	4413      	add	r3, r2
    a980:	009b      	lsls	r3, r3, #2
    a982:	440b      	add	r3, r1
    a984:	3327      	adds	r3, #39	; 0x27
    a986:	2200      	movs	r2, #0
    a988:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a98a:	79fb      	ldrb	r3, [r7, #7]
    a98c:	3301      	adds	r3, #1
    a98e:	71fb      	strb	r3, [r7, #7]
    a990:	79fb      	ldrb	r3, [r7, #7]
    a992:	2b08      	cmp	r3, #8
    a994:	d9d8      	bls.n	a948 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a996:	22a0      	movs	r2, #160	; 0xa0
    a998:	2100      	movs	r1, #0
    a99a:	4805      	ldr	r0, [pc, #20]	; (a9b0 <_usb_d_dev_reset_epts+0x74>)
    a99c:	4b05      	ldr	r3, [pc, #20]	; (a9b4 <_usb_d_dev_reset_epts+0x78>)
    a99e:	4798      	blx	r3
}
    a9a0:	bf00      	nop
    a9a2:	3708      	adds	r7, #8
    a9a4:	46bd      	mov	sp, r7
    a9a6:	bd80      	pop	{r7, pc}
    a9a8:	200010dc 	.word	0x200010dc
    a9ac:	0000b201 	.word	0x0000b201
    a9b0:	200011a4 	.word	0x200011a4
    a9b4:	00013c79 	.word	0x00013c79

0000a9b8 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b084      	sub	sp, #16
    a9bc:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a9be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a9c2:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a9c4:	2301      	movs	r3, #1
    a9c6:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a9c8:	2304      	movs	r3, #4
    a9ca:	713b      	strb	r3, [r7, #4]
    a9cc:	2300      	movs	r3, #0
    a9ce:	717b      	strb	r3, [r7, #5]
    a9d0:	2300      	movs	r3, #0
    a9d2:	71bb      	strb	r3, [r7, #6]
    a9d4:	2300      	movs	r3, #0
    a9d6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a9d8:	2101      	movs	r1, #1
    a9da:	68f8      	ldr	r0, [r7, #12]
    a9dc:	4b26      	ldr	r3, [pc, #152]	; (aa78 <_usb_d_dev_init+0xc0>)
    a9de:	4798      	blx	r3
    a9e0:	4603      	mov	r3, r0
    a9e2:	f083 0301 	eor.w	r3, r3, #1
    a9e6:	b2db      	uxtb	r3, r3
    a9e8:	2b00      	cmp	r3, #0
    a9ea:	d011      	beq.n	aa10 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a9ec:	2102      	movs	r1, #2
    a9ee:	68f8      	ldr	r0, [r7, #12]
    a9f0:	4b22      	ldr	r3, [pc, #136]	; (aa7c <_usb_d_dev_init+0xc4>)
    a9f2:	4798      	blx	r3
    a9f4:	4603      	mov	r3, r0
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d006      	beq.n	aa08 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a9fa:	68f8      	ldr	r0, [r7, #12]
    a9fc:	4b20      	ldr	r3, [pc, #128]	; (aa80 <_usb_d_dev_init+0xc8>)
    a9fe:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    aa00:	2102      	movs	r1, #2
    aa02:	68f8      	ldr	r0, [r7, #12]
    aa04:	4b1f      	ldr	r3, [pc, #124]	; (aa84 <_usb_d_dev_init+0xcc>)
    aa06:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    aa08:	2101      	movs	r1, #1
    aa0a:	68f8      	ldr	r0, [r7, #12]
    aa0c:	4b1e      	ldr	r3, [pc, #120]	; (aa88 <_usb_d_dev_init+0xd0>)
    aa0e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    aa10:	2101      	movs	r1, #1
    aa12:	68f8      	ldr	r0, [r7, #12]
    aa14:	4b1b      	ldr	r3, [pc, #108]	; (aa84 <_usb_d_dev_init+0xcc>)
    aa16:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    aa18:	4b1c      	ldr	r3, [pc, #112]	; (aa8c <_usb_d_dev_init+0xd4>)
    aa1a:	4a1d      	ldr	r2, [pc, #116]	; (aa90 <_usb_d_dev_init+0xd8>)
    aa1c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    aa1e:	4b1b      	ldr	r3, [pc, #108]	; (aa8c <_usb_d_dev_init+0xd4>)
    aa20:	4a1b      	ldr	r2, [pc, #108]	; (aa90 <_usb_d_dev_init+0xd8>)
    aa22:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    aa24:	4b19      	ldr	r3, [pc, #100]	; (aa8c <_usb_d_dev_init+0xd4>)
    aa26:	4a1a      	ldr	r2, [pc, #104]	; (aa90 <_usb_d_dev_init+0xd8>)
    aa28:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    aa2a:	4b18      	ldr	r3, [pc, #96]	; (aa8c <_usb_d_dev_init+0xd4>)
    aa2c:	4a18      	ldr	r2, [pc, #96]	; (aa90 <_usb_d_dev_init+0xd8>)
    aa2e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    aa30:	4b16      	ldr	r3, [pc, #88]	; (aa8c <_usb_d_dev_init+0xd4>)
    aa32:	4a17      	ldr	r2, [pc, #92]	; (aa90 <_usb_d_dev_init+0xd8>)
    aa34:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    aa36:	4b17      	ldr	r3, [pc, #92]	; (aa94 <_usb_d_dev_init+0xdc>)
    aa38:	4798      	blx	r3

	_usb_load_calib();
    aa3a:	4b17      	ldr	r3, [pc, #92]	; (aa98 <_usb_d_dev_init+0xe0>)
    aa3c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    aa3e:	2104      	movs	r1, #4
    aa40:	68f8      	ldr	r0, [r7, #12]
    aa42:	4b11      	ldr	r3, [pc, #68]	; (aa88 <_usb_d_dev_init+0xd0>)
    aa44:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    aa46:	4b15      	ldr	r3, [pc, #84]	; (aa9c <_usb_d_dev_init+0xe4>)
    aa48:	4619      	mov	r1, r3
    aa4a:	68f8      	ldr	r0, [r7, #12]
    aa4c:	4b14      	ldr	r3, [pc, #80]	; (aaa0 <_usb_d_dev_init+0xe8>)
    aa4e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    aa50:	7afb      	ldrb	r3, [r7, #11]
    aa52:	f107 0210 	add.w	r2, r7, #16
    aa56:	4413      	add	r3, r2
    aa58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    aa5c:	f043 0301 	orr.w	r3, r3, #1
    aa60:	b2db      	uxtb	r3, r3
    aa62:	b29b      	uxth	r3, r3
    aa64:	4619      	mov	r1, r3
    aa66:	68f8      	ldr	r0, [r7, #12]
    aa68:	4b0e      	ldr	r3, [pc, #56]	; (aaa4 <_usb_d_dev_init+0xec>)
    aa6a:	4798      	blx	r3

	return ERR_NONE;
    aa6c:	2300      	movs	r3, #0
}
    aa6e:	4618      	mov	r0, r3
    aa70:	3710      	adds	r7, #16
    aa72:	46bd      	mov	sp, r7
    aa74:	bd80      	pop	{r7, pc}
    aa76:	bf00      	nop
    aa78:	00009051 	.word	0x00009051
    aa7c:	000093a1 	.word	0x000093a1
    aa80:	00009375 	.word	0x00009375
    aa84:	00009027 	.word	0x00009027
    aa88:	000093d1 	.word	0x000093d1
    aa8c:	200010dc 	.word	0x200010dc
    aa90:	00009499 	.word	0x00009499
    aa94:	0000a93d 	.word	0x0000a93d
    aa98:	000094b1 	.word	0x000094b1
    aa9c:	200011a4 	.word	0x200011a4
    aaa0:	0000947d 	.word	0x0000947d
    aaa4:	00009441 	.word	0x00009441

0000aaa8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    aaa8:	b580      	push	{r7, lr}
    aaaa:	b082      	sub	sp, #8
    aaac:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    aaae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aab2:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    aab4:	2103      	movs	r1, #3
    aab6:	6878      	ldr	r0, [r7, #4]
    aab8:	4b17      	ldr	r3, [pc, #92]	; (ab18 <_usb_d_dev_enable+0x70>)
    aaba:	4798      	blx	r3
    aabc:	4603      	mov	r3, r0
    aabe:	2b00      	cmp	r3, #0
    aac0:	d002      	beq.n	aac8 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    aac2:	f06f 0310 	mvn.w	r3, #16
    aac6:	e023      	b.n	ab10 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    aac8:	6878      	ldr	r0, [r7, #4]
    aaca:	4b14      	ldr	r3, [pc, #80]	; (ab1c <_usb_d_dev_enable+0x74>)
    aacc:	4798      	blx	r3
    aace:	4603      	mov	r3, r0
    aad0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    aad2:	78fb      	ldrb	r3, [r7, #3]
    aad4:	f003 0302 	and.w	r3, r3, #2
    aad8:	2b00      	cmp	r3, #0
    aada:	d107      	bne.n	aaec <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    aadc:	78fb      	ldrb	r3, [r7, #3]
    aade:	f043 0302 	orr.w	r3, r3, #2
    aae2:	b2db      	uxtb	r3, r3
    aae4:	4619      	mov	r1, r3
    aae6:	6878      	ldr	r0, [r7, #4]
    aae8:	4b0d      	ldr	r3, [pc, #52]	; (ab20 <_usb_d_dev_enable+0x78>)
    aaea:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    aaec:	2050      	movs	r0, #80	; 0x50
    aaee:	4b0d      	ldr	r3, [pc, #52]	; (ab24 <_usb_d_dev_enable+0x7c>)
    aaf0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    aaf2:	2051      	movs	r0, #81	; 0x51
    aaf4:	4b0b      	ldr	r3, [pc, #44]	; (ab24 <_usb_d_dev_enable+0x7c>)
    aaf6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aaf8:	2052      	movs	r0, #82	; 0x52
    aafa:	4b0a      	ldr	r3, [pc, #40]	; (ab24 <_usb_d_dev_enable+0x7c>)
    aafc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aafe:	2053      	movs	r0, #83	; 0x53
    ab00:	4b08      	ldr	r3, [pc, #32]	; (ab24 <_usb_d_dev_enable+0x7c>)
    ab02:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ab04:	f240 218d 	movw	r1, #653	; 0x28d
    ab08:	6878      	ldr	r0, [r7, #4]
    ab0a:	4b07      	ldr	r3, [pc, #28]	; (ab28 <_usb_d_dev_enable+0x80>)
    ab0c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ab0e:	2300      	movs	r3, #0
}
    ab10:	4618      	mov	r0, r3
    ab12:	3708      	adds	r7, #8
    ab14:	46bd      	mov	sp, r7
    ab16:	bd80      	pop	{r7, pc}
    ab18:	0000934b 	.word	0x0000934b
    ab1c:	000093f9 	.word	0x000093f9
    ab20:	000093d1 	.word	0x000093d1
    ab24:	00008f5d 	.word	0x00008f5d
    ab28:	000092f5 	.word	0x000092f5

0000ab2c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ab30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab34:	4b01      	ldr	r3, [pc, #4]	; (ab3c <_usb_d_dev_attach+0x10>)
    ab36:	4798      	blx	r3
}
    ab38:	bf00      	nop
    ab3a:	bd80      	pop	{r7, pc}
    ab3c:	0000941d 	.word	0x0000941d

0000ab40 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    ab40:	b580      	push	{r7, lr}
    ab42:	b082      	sub	sp, #8
    ab44:	af00      	add	r7, sp, #0
    ab46:	4603      	mov	r3, r0
    ab48:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ab4a:	79fb      	ldrb	r3, [r7, #7]
    ab4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab50:	b2db      	uxtb	r3, r3
    ab52:	4619      	mov	r1, r3
    ab54:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab58:	4b02      	ldr	r3, [pc, #8]	; (ab64 <_usb_d_dev_set_address+0x24>)
    ab5a:	4798      	blx	r3
}
    ab5c:	bf00      	nop
    ab5e:	3708      	adds	r7, #8
    ab60:	46bd      	mov	sp, r7
    ab62:	bd80      	pop	{r7, pc}
    ab64:	0000945f 	.word	0x0000945f

0000ab68 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    ab68:	b590      	push	{r4, r7, lr}
    ab6a:	b085      	sub	sp, #20
    ab6c:	af00      	add	r7, sp, #0
    ab6e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    ab70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab74:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ab76:	687b      	ldr	r3, [r7, #4]
    ab78:	7c9b      	ldrb	r3, [r3, #18]
    ab7a:	f003 030f 	and.w	r3, r3, #15
    ab7e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	68db      	ldr	r3, [r3, #12]
    ab84:	461a      	mov	r2, r3
    ab86:	7afb      	ldrb	r3, [r7, #11]
    ab88:	2100      	movs	r1, #0
    ab8a:	4618      	mov	r0, r3
    ab8c:	4b0f      	ldr	r3, [pc, #60]	; (abcc <_usb_d_dev_trans_setup+0x64>)
    ab8e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ab90:	687b      	ldr	r3, [r7, #4]
    ab92:	8a1b      	ldrh	r3, [r3, #16]
    ab94:	461a      	mov	r2, r3
    ab96:	7af8      	ldrb	r0, [r7, #11]
    ab98:	2300      	movs	r3, #0
    ab9a:	2100      	movs	r1, #0
    ab9c:	4c0c      	ldr	r4, [pc, #48]	; (abd0 <_usb_d_dev_trans_setup+0x68>)
    ab9e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    aba0:	7afb      	ldrb	r3, [r7, #11]
    aba2:	22b0      	movs	r2, #176	; 0xb0
    aba4:	4619      	mov	r1, r3
    aba6:	68f8      	ldr	r0, [r7, #12]
    aba8:	4b0a      	ldr	r3, [pc, #40]	; (abd4 <_usb_d_dev_trans_setup+0x6c>)
    abaa:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    abac:	7afb      	ldrb	r3, [r7, #11]
    abae:	2200      	movs	r2, #0
    abb0:	2100      	movs	r1, #0
    abb2:	4618      	mov	r0, r3
    abb4:	4b08      	ldr	r3, [pc, #32]	; (abd8 <_usb_d_dev_trans_setup+0x70>)
    abb6:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    abb8:	7afb      	ldrb	r3, [r7, #11]
    abba:	2210      	movs	r2, #16
    abbc:	4619      	mov	r1, r3
    abbe:	68f8      	ldr	r0, [r7, #12]
    abc0:	4b06      	ldr	r3, [pc, #24]	; (abdc <_usb_d_dev_trans_setup+0x74>)
    abc2:	4798      	blx	r3
}
    abc4:	bf00      	nop
    abc6:	3714      	adds	r7, #20
    abc8:	46bd      	mov	sp, r7
    abca:	bd90      	pop	{r4, r7, pc}
    abcc:	000098fd 	.word	0x000098fd
    abd0:	00009a85 	.word	0x00009a85
    abd4:	0000915d 	.word	0x0000915d
    abd8:	00009b55 	.word	0x00009b55
    abdc:	000091b1 	.word	0x000091b1

0000abe0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    abe0:	b580      	push	{r7, lr}
    abe2:	b088      	sub	sp, #32
    abe4:	af00      	add	r7, sp, #0
    abe6:	4603      	mov	r3, r0
    abe8:	71fb      	strb	r3, [r7, #7]
    abea:	460b      	mov	r3, r1
    abec:	71bb      	strb	r3, [r7, #6]
    abee:	4613      	mov	r3, r2
    abf0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    abf2:	79fb      	ldrb	r3, [r7, #7]
    abf4:	f003 030f 	and.w	r3, r3, #15
    abf8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    abfa:	79fb      	ldrb	r3, [r7, #7]
    abfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ac00:	2b00      	cmp	r3, #0
    ac02:	bf14      	ite	ne
    ac04:	2301      	movne	r3, #1
    ac06:	2300      	moveq	r3, #0
    ac08:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ac0a:	7fba      	ldrb	r2, [r7, #30]
    ac0c:	7ffb      	ldrb	r3, [r7, #31]
    ac0e:	4611      	mov	r1, r2
    ac10:	4618      	mov	r0, r3
    ac12:	4b3e      	ldr	r3, [pc, #248]	; (ad0c <_usb_d_dev_ep_init+0x12c>)
    ac14:	4798      	blx	r3
    ac16:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ac18:	79bb      	ldrb	r3, [r7, #6]
    ac1a:	f003 0303 	and.w	r3, r3, #3
    ac1e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ac20:	7ffa      	ldrb	r2, [r7, #31]
    ac22:	4613      	mov	r3, r2
    ac24:	005b      	lsls	r3, r3, #1
    ac26:	4413      	add	r3, r2
    ac28:	009b      	lsls	r3, r3, #2
    ac2a:	4a39      	ldr	r2, [pc, #228]	; (ad10 <_usb_d_dev_ep_init+0x130>)
    ac2c:	4413      	add	r3, r2
    ac2e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ac30:	7ffb      	ldrb	r3, [r7, #31]
    ac32:	2b04      	cmp	r3, #4
    ac34:	d902      	bls.n	ac3c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ac36:	f06f 0311 	mvn.w	r3, #17
    ac3a:	e063      	b.n	ad04 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ac3c:	69bb      	ldr	r3, [r7, #24]
    ac3e:	7c9b      	ldrb	r3, [r3, #18]
    ac40:	2bff      	cmp	r3, #255	; 0xff
    ac42:	d002      	beq.n	ac4a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ac44:	f06f 0313 	mvn.w	r3, #19
    ac48:	e05c      	b.n	ad04 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ac4a:	7dfb      	ldrb	r3, [r7, #23]
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	d11f      	bne.n	ac90 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ac50:	7fbb      	ldrb	r3, [r7, #30]
    ac52:	2b00      	cmp	r3, #0
    ac54:	bf14      	ite	ne
    ac56:	2301      	movne	r3, #1
    ac58:	2300      	moveq	r3, #0
    ac5a:	b2db      	uxtb	r3, r3
    ac5c:	f083 0301 	eor.w	r3, r3, #1
    ac60:	b2db      	uxtb	r3, r3
    ac62:	f003 0301 	and.w	r3, r3, #1
    ac66:	b2da      	uxtb	r2, r3
    ac68:	7ffb      	ldrb	r3, [r7, #31]
    ac6a:	4611      	mov	r1, r2
    ac6c:	4618      	mov	r0, r3
    ac6e:	4b27      	ldr	r3, [pc, #156]	; (ad0c <_usb_d_dev_ep_init+0x12c>)
    ac70:	4798      	blx	r3
    ac72:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ac74:	68fb      	ldr	r3, [r7, #12]
    ac76:	7c9b      	ldrb	r3, [r3, #18]
    ac78:	2bff      	cmp	r3, #255	; 0xff
    ac7a:	d002      	beq.n	ac82 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ac7c:	f06f 0313 	mvn.w	r3, #19
    ac80:	e040      	b.n	ad04 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ac82:	693b      	ldr	r3, [r7, #16]
    ac84:	681b      	ldr	r3, [r3, #0]
    ac86:	2b00      	cmp	r3, #0
    ac88:	d102      	bne.n	ac90 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ac8a:	f06f 0312 	mvn.w	r3, #18
    ac8e:	e039      	b.n	ad04 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ac90:	7fbb      	ldrb	r3, [r7, #30]
    ac92:	2b00      	cmp	r3, #0
    ac94:	d007      	beq.n	aca6 <_usb_d_dev_ep_init+0xc6>
    ac96:	693b      	ldr	r3, [r7, #16]
    ac98:	685b      	ldr	r3, [r3, #4]
    ac9a:	2b00      	cmp	r3, #0
    ac9c:	bf14      	ite	ne
    ac9e:	2301      	movne	r3, #1
    aca0:	2300      	moveq	r3, #0
    aca2:	b2db      	uxtb	r3, r3
    aca4:	e006      	b.n	acb4 <_usb_d_dev_ep_init+0xd4>
    aca6:	693b      	ldr	r3, [r7, #16]
    aca8:	681b      	ldr	r3, [r3, #0]
    acaa:	2b00      	cmp	r3, #0
    acac:	bf14      	ite	ne
    acae:	2301      	movne	r3, #1
    acb0:	2300      	moveq	r3, #0
    acb2:	b2db      	uxtb	r3, r3
    acb4:	2b00      	cmp	r3, #0
    acb6:	d00f      	beq.n	acd8 <_usb_d_dev_ep_init+0xf8>
    acb8:	7fbb      	ldrb	r3, [r7, #30]
    acba:	2b00      	cmp	r3, #0
    acbc:	d003      	beq.n	acc6 <_usb_d_dev_ep_init+0xe6>
    acbe:	693b      	ldr	r3, [r7, #16]
    acc0:	895b      	ldrh	r3, [r3, #10]
    acc2:	461a      	mov	r2, r3
    acc4:	e002      	b.n	accc <_usb_d_dev_ep_init+0xec>
    acc6:	693b      	ldr	r3, [r7, #16]
    acc8:	891b      	ldrh	r3, [r3, #8]
    acca:	461a      	mov	r2, r3
    accc:	88bb      	ldrh	r3, [r7, #4]
    acce:	429a      	cmp	r2, r3
    acd0:	da02      	bge.n	acd8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    acd2:	f06f 0312 	mvn.w	r3, #18
    acd6:	e015      	b.n	ad04 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    acd8:	7fbb      	ldrb	r3, [r7, #30]
    acda:	2b00      	cmp	r3, #0
    acdc:	d002      	beq.n	ace4 <_usb_d_dev_ep_init+0x104>
    acde:	693b      	ldr	r3, [r7, #16]
    ace0:	685b      	ldr	r3, [r3, #4]
    ace2:	e001      	b.n	ace8 <_usb_d_dev_ep_init+0x108>
    ace4:	693b      	ldr	r3, [r7, #16]
    ace6:	681b      	ldr	r3, [r3, #0]
    ace8:	69ba      	ldr	r2, [r7, #24]
    acea:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    acec:	69bb      	ldr	r3, [r7, #24]
    acee:	88ba      	ldrh	r2, [r7, #4]
    acf0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    acf2:	7dfb      	ldrb	r3, [r7, #23]
    acf4:	3301      	adds	r3, #1
    acf6:	b2da      	uxtb	r2, r3
    acf8:	69bb      	ldr	r3, [r7, #24]
    acfa:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    acfc:	69bb      	ldr	r3, [r7, #24]
    acfe:	79fa      	ldrb	r2, [r7, #7]
    ad00:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ad02:	2300      	movs	r3, #0
}
    ad04:	4618      	mov	r0, r3
    ad06:	3720      	adds	r7, #32
    ad08:	46bd      	mov	sp, r7
    ad0a:	bd80      	pop	{r7, pc}
    ad0c:	00009c11 	.word	0x00009c11
    ad10:	000142b4 	.word	0x000142b4

0000ad14 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ad14:	b580      	push	{r7, lr}
    ad16:	b086      	sub	sp, #24
    ad18:	af00      	add	r7, sp, #0
    ad1a:	4603      	mov	r3, r0
    ad1c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ad1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad22:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ad24:	79fb      	ldrb	r3, [r7, #7]
    ad26:	f003 030f 	and.w	r3, r3, #15
    ad2a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ad2c:	79fb      	ldrb	r3, [r7, #7]
    ad2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad32:	2b00      	cmp	r3, #0
    ad34:	bf14      	ite	ne
    ad36:	2301      	movne	r3, #1
    ad38:	2300      	moveq	r3, #0
    ad3a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad3c:	7cba      	ldrb	r2, [r7, #18]
    ad3e:	7cfb      	ldrb	r3, [r7, #19]
    ad40:	4611      	mov	r1, r2
    ad42:	4618      	mov	r0, r3
    ad44:	4b2a      	ldr	r3, [pc, #168]	; (adf0 <_usb_d_dev_ep_deinit+0xdc>)
    ad46:	4798      	blx	r3
    ad48:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ad4a:	7cfb      	ldrb	r3, [r7, #19]
    ad4c:	2b04      	cmp	r3, #4
    ad4e:	d84a      	bhi.n	ade6 <_usb_d_dev_ep_deinit+0xd2>
    ad50:	68fb      	ldr	r3, [r7, #12]
    ad52:	7c9b      	ldrb	r3, [r3, #18]
    ad54:	2bff      	cmp	r3, #255	; 0xff
    ad56:	d046      	beq.n	ade6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ad58:	7cbb      	ldrb	r3, [r7, #18]
    ad5a:	2203      	movs	r2, #3
    ad5c:	4619      	mov	r1, r3
    ad5e:	68f8      	ldr	r0, [r7, #12]
    ad60:	4b24      	ldr	r3, [pc, #144]	; (adf4 <_usb_d_dev_ep_deinit+0xe0>)
    ad62:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ad64:	68fb      	ldr	r3, [r7, #12]
    ad66:	7cdb      	ldrb	r3, [r3, #19]
    ad68:	f003 0307 	and.w	r3, r3, #7
    ad6c:	b2db      	uxtb	r3, r3
    ad6e:	2b01      	cmp	r3, #1
    ad70:	d107      	bne.n	ad82 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ad72:	79fb      	ldrb	r3, [r7, #7]
    ad74:	697a      	ldr	r2, [r7, #20]
    ad76:	3308      	adds	r3, #8
    ad78:	015b      	lsls	r3, r3, #5
    ad7a:	4413      	add	r3, r2
    ad7c:	2200      	movs	r2, #0
    ad7e:	701a      	strb	r2, [r3, #0]
    ad80:	e02a      	b.n	add8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ad82:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ad86:	2b00      	cmp	r3, #0
    ad88:	da15      	bge.n	adb6 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ad8a:	79fb      	ldrb	r3, [r7, #7]
    ad8c:	f003 030f 	and.w	r3, r3, #15
    ad90:	79fa      	ldrb	r2, [r7, #7]
    ad92:	f002 020f 	and.w	r2, r2, #15
    ad96:	6979      	ldr	r1, [r7, #20]
    ad98:	3208      	adds	r2, #8
    ad9a:	0152      	lsls	r2, r2, #5
    ad9c:	440a      	add	r2, r1
    ad9e:	7812      	ldrb	r2, [r2, #0]
    ada0:	b2d2      	uxtb	r2, r2
    ada2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    ada6:	b2d1      	uxtb	r1, r2
    ada8:	697a      	ldr	r2, [r7, #20]
    adaa:	3308      	adds	r3, #8
    adac:	015b      	lsls	r3, r3, #5
    adae:	4413      	add	r3, r2
    adb0:	460a      	mov	r2, r1
    adb2:	701a      	strb	r2, [r3, #0]
    adb4:	e010      	b.n	add8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    adb6:	79fb      	ldrb	r3, [r7, #7]
    adb8:	79fa      	ldrb	r2, [r7, #7]
    adba:	6979      	ldr	r1, [r7, #20]
    adbc:	3208      	adds	r2, #8
    adbe:	0152      	lsls	r2, r2, #5
    adc0:	440a      	add	r2, r1
    adc2:	7812      	ldrb	r2, [r2, #0]
    adc4:	b2d2      	uxtb	r2, r2
    adc6:	f022 0207 	bic.w	r2, r2, #7
    adca:	b2d1      	uxtb	r1, r2
    adcc:	697a      	ldr	r2, [r7, #20]
    adce:	3308      	adds	r3, #8
    add0:	015b      	lsls	r3, r3, #5
    add2:	4413      	add	r3, r2
    add4:	460a      	mov	r2, r1
    add6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    add8:	68fb      	ldr	r3, [r7, #12]
    adda:	2200      	movs	r2, #0
    addc:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    adde:	68fb      	ldr	r3, [r7, #12]
    ade0:	22ff      	movs	r2, #255	; 0xff
    ade2:	749a      	strb	r2, [r3, #18]
    ade4:	e000      	b.n	ade8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    ade6:	bf00      	nop
}
    ade8:	3718      	adds	r7, #24
    adea:	46bd      	mov	sp, r7
    adec:	bd80      	pop	{r7, pc}
    adee:	bf00      	nop
    adf0:	00009c11 	.word	0x00009c11
    adf4:	0000b249 	.word	0x0000b249

0000adf8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    adf8:	b5b0      	push	{r4, r5, r7, lr}
    adfa:	b088      	sub	sp, #32
    adfc:	af00      	add	r7, sp, #0
    adfe:	4603      	mov	r3, r0
    ae00:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    ae02:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae06:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    ae08:	79fb      	ldrb	r3, [r7, #7]
    ae0a:	f003 030f 	and.w	r3, r3, #15
    ae0e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    ae10:	79fb      	ldrb	r3, [r7, #7]
    ae12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae16:	2b00      	cmp	r3, #0
    ae18:	bf14      	ite	ne
    ae1a:	2301      	movne	r3, #1
    ae1c:	2300      	moveq	r3, #0
    ae1e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    ae20:	7eba      	ldrb	r2, [r7, #26]
    ae22:	7efb      	ldrb	r3, [r7, #27]
    ae24:	4611      	mov	r1, r2
    ae26:	4618      	mov	r0, r3
    ae28:	4b70      	ldr	r3, [pc, #448]	; (afec <_usb_d_dev_ep_enable+0x1f4>)
    ae2a:	4798      	blx	r3
    ae2c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    ae2e:	7efb      	ldrb	r3, [r7, #27]
    ae30:	4619      	mov	r1, r3
    ae32:	69f8      	ldr	r0, [r7, #28]
    ae34:	4b6e      	ldr	r3, [pc, #440]	; (aff0 <_usb_d_dev_ep_enable+0x1f8>)
    ae36:	4798      	blx	r3
    ae38:	4603      	mov	r3, r0
    ae3a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ae3c:	7efb      	ldrb	r3, [r7, #27]
    ae3e:	2b04      	cmp	r3, #4
    ae40:	d803      	bhi.n	ae4a <_usb_d_dev_ep_enable+0x52>
    ae42:	697b      	ldr	r3, [r7, #20]
    ae44:	7c9b      	ldrb	r3, [r3, #18]
    ae46:	2bff      	cmp	r3, #255	; 0xff
    ae48:	d102      	bne.n	ae50 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    ae4a:	f06f 0311 	mvn.w	r3, #17
    ae4e:	e0c8      	b.n	afe2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ae50:	7efb      	ldrb	r3, [r7, #27]
    ae52:	015b      	lsls	r3, r3, #5
    ae54:	4a67      	ldr	r2, [pc, #412]	; (aff4 <_usb_d_dev_ep_enable+0x1fc>)
    ae56:	4413      	add	r3, r2
    ae58:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ae5a:	697b      	ldr	r3, [r7, #20]
    ae5c:	7cdb      	ldrb	r3, [r3, #19]
    ae5e:	f003 0307 	and.w	r3, r3, #7
    ae62:	b2db      	uxtb	r3, r3
    ae64:	2b01      	cmp	r3, #1
    ae66:	d14b      	bne.n	af00 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    ae68:	7cfb      	ldrb	r3, [r7, #19]
    ae6a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d002      	beq.n	ae78 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    ae72:	f06f 0313 	mvn.w	r3, #19
    ae76:	e0b4      	b.n	afe2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    ae78:	7efb      	ldrb	r3, [r7, #27]
    ae7a:	2211      	movs	r2, #17
    ae7c:	4619      	mov	r1, r3
    ae7e:	69f8      	ldr	r0, [r7, #28]
    ae80:	4b5d      	ldr	r3, [pc, #372]	; (aff8 <_usb_d_dev_ep_enable+0x200>)
    ae82:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae84:	697b      	ldr	r3, [r7, #20]
    ae86:	8a1b      	ldrh	r3, [r3, #16]
    ae88:	039b      	lsls	r3, r3, #14
    ae8a:	4c5c      	ldr	r4, [pc, #368]	; (affc <_usb_d_dev_ep_enable+0x204>)
    ae8c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae8e:	697b      	ldr	r3, [r7, #20]
    ae90:	8a1b      	ldrh	r3, [r3, #16]
    ae92:	4618      	mov	r0, r3
    ae94:	4b5a      	ldr	r3, [pc, #360]	; (b000 <_usb_d_dev_ep_enable+0x208>)
    ae96:	4798      	blx	r3
    ae98:	4603      	mov	r3, r0
    ae9a:	071b      	lsls	r3, r3, #28
    ae9c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aea0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aea4:	68fb      	ldr	r3, [r7, #12]
    aea6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    aea8:	68fb      	ldr	r3, [r7, #12]
    aeaa:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aeae:	697b      	ldr	r3, [r7, #20]
    aeb0:	8a1b      	ldrh	r3, [r3, #16]
    aeb2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    aeb6:	697b      	ldr	r3, [r7, #20]
    aeb8:	8a1b      	ldrh	r3, [r3, #16]
    aeba:	4618      	mov	r0, r3
    aebc:	4b50      	ldr	r3, [pc, #320]	; (b000 <_usb_d_dev_ep_enable+0x208>)
    aebe:	4798      	blx	r3
    aec0:	4603      	mov	r3, r0
    aec2:	071b      	lsls	r3, r3, #28
    aec4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aec8:	432b      	orrs	r3, r5
    aeca:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aecc:	7efb      	ldrb	r3, [r7, #27]
    aece:	2200      	movs	r2, #0
    aed0:	2100      	movs	r1, #0
    aed2:	4618      	mov	r0, r3
    aed4:	4b4b      	ldr	r3, [pc, #300]	; (b004 <_usb_d_dev_ep_enable+0x20c>)
    aed6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    aed8:	7efb      	ldrb	r3, [r7, #27]
    aeda:	2200      	movs	r2, #0
    aedc:	2101      	movs	r1, #1
    aede:	4618      	mov	r0, r3
    aee0:	4b49      	ldr	r3, [pc, #292]	; (b008 <_usb_d_dev_ep_enable+0x210>)
    aee2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    aee4:	7efb      	ldrb	r3, [r7, #27]
    aee6:	2100      	movs	r1, #0
    aee8:	4618      	mov	r0, r3
    aeea:	4b48      	ldr	r3, [pc, #288]	; (b00c <_usb_d_dev_ep_enable+0x214>)
    aeec:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aeee:	7efb      	ldrb	r3, [r7, #27]
    aef0:	2101      	movs	r1, #1
    aef2:	4618      	mov	r0, r3
    aef4:	4b45      	ldr	r3, [pc, #276]	; (b00c <_usb_d_dev_ep_enable+0x214>)
    aef6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    aef8:	6978      	ldr	r0, [r7, #20]
    aefa:	4b45      	ldr	r3, [pc, #276]	; (b010 <_usb_d_dev_ep_enable+0x218>)
    aefc:	4798      	blx	r3
    aefe:	e06f      	b.n	afe0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    af00:	7ebb      	ldrb	r3, [r7, #26]
    af02:	2b00      	cmp	r3, #0
    af04:	d038      	beq.n	af78 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    af06:	7cfb      	ldrb	r3, [r7, #19]
    af08:	f003 0370 	and.w	r3, r3, #112	; 0x70
    af0c:	2b00      	cmp	r3, #0
    af0e:	d002      	beq.n	af16 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    af10:	f06f 0313 	mvn.w	r3, #19
    af14:	e065      	b.n	afe2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    af16:	697b      	ldr	r3, [r7, #20]
    af18:	7cdb      	ldrb	r3, [r3, #19]
    af1a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af1e:	b2db      	uxtb	r3, r3
    af20:	011b      	lsls	r3, r3, #4
    af22:	b2db      	uxtb	r3, r3
    af24:	f003 0370 	and.w	r3, r3, #112	; 0x70
    af28:	b2da      	uxtb	r2, r3
    af2a:	7cfb      	ldrb	r3, [r7, #19]
    af2c:	4313      	orrs	r3, r2
    af2e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    af30:	7cfa      	ldrb	r2, [r7, #19]
    af32:	7efb      	ldrb	r3, [r7, #27]
    af34:	4619      	mov	r1, r3
    af36:	69f8      	ldr	r0, [r7, #28]
    af38:	4b2f      	ldr	r3, [pc, #188]	; (aff8 <_usb_d_dev_ep_enable+0x200>)
    af3a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    af3c:	68fb      	ldr	r3, [r7, #12]
    af3e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    af42:	697b      	ldr	r3, [r7, #20]
    af44:	8a1b      	ldrh	r3, [r3, #16]
    af46:	f3c3 050d 	ubfx	r5, r3, #0, #14
    af4a:	697b      	ldr	r3, [r7, #20]
    af4c:	8a1b      	ldrh	r3, [r3, #16]
    af4e:	4618      	mov	r0, r3
    af50:	4b2b      	ldr	r3, [pc, #172]	; (b000 <_usb_d_dev_ep_enable+0x208>)
    af52:	4798      	blx	r3
    af54:	4603      	mov	r3, r0
    af56:	071b      	lsls	r3, r3, #28
    af58:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    af5c:	432b      	orrs	r3, r5
    af5e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    af60:	7efb      	ldrb	r3, [r7, #27]
    af62:	2200      	movs	r2, #0
    af64:	2101      	movs	r1, #1
    af66:	4618      	mov	r0, r3
    af68:	4b27      	ldr	r3, [pc, #156]	; (b008 <_usb_d_dev_ep_enable+0x210>)
    af6a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    af6c:	7efb      	ldrb	r3, [r7, #27]
    af6e:	2101      	movs	r1, #1
    af70:	4618      	mov	r0, r3
    af72:	4b26      	ldr	r3, [pc, #152]	; (b00c <_usb_d_dev_ep_enable+0x214>)
    af74:	4798      	blx	r3
    af76:	e033      	b.n	afe0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    af78:	7cfb      	ldrb	r3, [r7, #19]
    af7a:	f003 0307 	and.w	r3, r3, #7
    af7e:	2b00      	cmp	r3, #0
    af80:	d002      	beq.n	af88 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    af82:	f06f 0313 	mvn.w	r3, #19
    af86:	e02c      	b.n	afe2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    af88:	697b      	ldr	r3, [r7, #20]
    af8a:	7cdb      	ldrb	r3, [r3, #19]
    af8c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af90:	b2db      	uxtb	r3, r3
    af92:	461a      	mov	r2, r3
    af94:	7cfb      	ldrb	r3, [r7, #19]
    af96:	4313      	orrs	r3, r2
    af98:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    af9a:	7cfa      	ldrb	r2, [r7, #19]
    af9c:	7efb      	ldrb	r3, [r7, #27]
    af9e:	4619      	mov	r1, r3
    afa0:	69f8      	ldr	r0, [r7, #28]
    afa2:	4b15      	ldr	r3, [pc, #84]	; (aff8 <_usb_d_dev_ep_enable+0x200>)
    afa4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    afa6:	697b      	ldr	r3, [r7, #20]
    afa8:	8a1b      	ldrh	r3, [r3, #16]
    afaa:	039b      	lsls	r3, r3, #14
    afac:	4c13      	ldr	r4, [pc, #76]	; (affc <_usb_d_dev_ep_enable+0x204>)
    afae:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    afb0:	697b      	ldr	r3, [r7, #20]
    afb2:	8a1b      	ldrh	r3, [r3, #16]
    afb4:	4618      	mov	r0, r3
    afb6:	4b12      	ldr	r3, [pc, #72]	; (b000 <_usb_d_dev_ep_enable+0x208>)
    afb8:	4798      	blx	r3
    afba:	4603      	mov	r3, r0
    afbc:	071b      	lsls	r3, r3, #28
    afbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    afc2:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    afc6:	68fb      	ldr	r3, [r7, #12]
    afc8:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    afca:	7efb      	ldrb	r3, [r7, #27]
    afcc:	2200      	movs	r2, #0
    afce:	2100      	movs	r1, #0
    afd0:	4618      	mov	r0, r3
    afd2:	4b0c      	ldr	r3, [pc, #48]	; (b004 <_usb_d_dev_ep_enable+0x20c>)
    afd4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    afd6:	7efb      	ldrb	r3, [r7, #27]
    afd8:	2100      	movs	r1, #0
    afda:	4618      	mov	r0, r3
    afdc:	4b0b      	ldr	r3, [pc, #44]	; (b00c <_usb_d_dev_ep_enable+0x214>)
    afde:	4798      	blx	r3
	}

	return USB_OK;
    afe0:	2300      	movs	r3, #0
}
    afe2:	4618      	mov	r0, r3
    afe4:	3720      	adds	r7, #32
    afe6:	46bd      	mov	sp, r7
    afe8:	bdb0      	pop	{r4, r5, r7, pc}
    afea:	bf00      	nop
    afec:	00009c11 	.word	0x00009c11
    aff0:	00009297 	.word	0x00009297
    aff4:	200011a4 	.word	0x200011a4
    aff8:	0000926d 	.word	0x0000926d
    affc:	0fffc000 	.word	0x0fffc000
    b000:	00009bad 	.word	0x00009bad
    b004:	00009b55 	.word	0x00009b55
    b008:	00009afd 	.word	0x00009afd
    b00c:	00009ac5 	.word	0x00009ac5
    b010:	0000ab69 	.word	0x0000ab69

0000b014 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b014:	b580      	push	{r7, lr}
    b016:	b084      	sub	sp, #16
    b018:	af00      	add	r7, sp, #0
    b01a:	6078      	str	r0, [r7, #4]
    b01c:	460b      	mov	r3, r1
    b01e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b020:	687b      	ldr	r3, [r7, #4]
    b022:	7c9b      	ldrb	r3, [r3, #18]
    b024:	f003 030f 	and.w	r3, r3, #15
    b028:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b02a:	78fa      	ldrb	r2, [r7, #3]
    b02c:	7bfb      	ldrb	r3, [r7, #15]
    b02e:	4611      	mov	r1, r2
    b030:	4618      	mov	r0, r3
    b032:	4b03      	ldr	r3, [pc, #12]	; (b040 <_usb_d_dev_ep_stall_get+0x2c>)
    b034:	4798      	blx	r3
    b036:	4603      	mov	r3, r0
}
    b038:	4618      	mov	r0, r3
    b03a:	3710      	adds	r7, #16
    b03c:	46bd      	mov	sp, r7
    b03e:	bd80      	pop	{r7, pc}
    b040:	00009705 	.word	0x00009705

0000b044 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b044:	b580      	push	{r7, lr}
    b046:	b084      	sub	sp, #16
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
    b04c:	460b      	mov	r3, r1
    b04e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b050:	687b      	ldr	r3, [r7, #4]
    b052:	7c9b      	ldrb	r3, [r3, #18]
    b054:	f003 030f 	and.w	r3, r3, #15
    b058:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b05a:	78f9      	ldrb	r1, [r7, #3]
    b05c:	7bfb      	ldrb	r3, [r7, #15]
    b05e:	2201      	movs	r2, #1
    b060:	4618      	mov	r0, r3
    b062:	4b0a      	ldr	r3, [pc, #40]	; (b08c <_usb_d_dev_ep_stall_set+0x48>)
    b064:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b066:	78fb      	ldrb	r3, [r7, #3]
    b068:	2220      	movs	r2, #32
    b06a:	409a      	lsls	r2, r3
    b06c:	7bfb      	ldrb	r3, [r7, #15]
    b06e:	4611      	mov	r1, r2
    b070:	4618      	mov	r0, r3
    b072:	4b07      	ldr	r3, [pc, #28]	; (b090 <_usb_d_dev_ep_stall_set+0x4c>)
    b074:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b076:	687a      	ldr	r2, [r7, #4]
    b078:	7cd3      	ldrb	r3, [r2, #19]
    b07a:	f043 0308 	orr.w	r3, r3, #8
    b07e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b080:	2300      	movs	r3, #0
}
    b082:	4618      	mov	r0, r3
    b084:	3710      	adds	r7, #16
    b086:	46bd      	mov	sp, r7
    b088:	bd80      	pop	{r7, pc}
    b08a:	bf00      	nop
    b08c:	000096ad 	.word	0x000096ad
    b090:	0000962d 	.word	0x0000962d

0000b094 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b094:	b580      	push	{r7, lr}
    b096:	b084      	sub	sp, #16
    b098:	af00      	add	r7, sp, #0
    b09a:	6078      	str	r0, [r7, #4]
    b09c:	460b      	mov	r3, r1
    b09e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	7c9b      	ldrb	r3, [r3, #18]
    b0a4:	f003 030f 	and.w	r3, r3, #15
    b0a8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b0aa:	78fa      	ldrb	r2, [r7, #3]
    b0ac:	7bfb      	ldrb	r3, [r7, #15]
    b0ae:	4611      	mov	r1, r2
    b0b0:	4618      	mov	r0, r3
    b0b2:	4b28      	ldr	r3, [pc, #160]	; (b154 <_usb_d_dev_ep_stall_clr+0xc0>)
    b0b4:	4798      	blx	r3
    b0b6:	4603      	mov	r3, r0
    b0b8:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b0ba:	7bbb      	ldrb	r3, [r7, #14]
    b0bc:	f083 0301 	eor.w	r3, r3, #1
    b0c0:	b2db      	uxtb	r3, r3
    b0c2:	2b00      	cmp	r3, #0
    b0c4:	d001      	beq.n	b0ca <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b0c6:	2300      	movs	r3, #0
    b0c8:	e040      	b.n	b14c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b0ca:	78f9      	ldrb	r1, [r7, #3]
    b0cc:	7bfb      	ldrb	r3, [r7, #15]
    b0ce:	2200      	movs	r2, #0
    b0d0:	4618      	mov	r0, r3
    b0d2:	4b21      	ldr	r3, [pc, #132]	; (b158 <_usb_d_dev_ep_stall_clr+0xc4>)
    b0d4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b0d6:	78fb      	ldrb	r3, [r7, #3]
    b0d8:	2220      	movs	r2, #32
    b0da:	409a      	lsls	r2, r3
    b0dc:	7bfb      	ldrb	r3, [r7, #15]
    b0de:	4611      	mov	r1, r2
    b0e0:	4618      	mov	r0, r3
    b0e2:	4b1e      	ldr	r3, [pc, #120]	; (b15c <_usb_d_dev_ep_stall_clr+0xc8>)
    b0e4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b0e6:	78fa      	ldrb	r2, [r7, #3]
    b0e8:	7bfb      	ldrb	r3, [r7, #15]
    b0ea:	4611      	mov	r1, r2
    b0ec:	4618      	mov	r0, r3
    b0ee:	4b1c      	ldr	r3, [pc, #112]	; (b160 <_usb_d_dev_ep_stall_clr+0xcc>)
    b0f0:	4798      	blx	r3
    b0f2:	4603      	mov	r3, r0
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d00b      	beq.n	b110 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b0f8:	78fa      	ldrb	r2, [r7, #3]
    b0fa:	7bfb      	ldrb	r3, [r7, #15]
    b0fc:	4611      	mov	r1, r2
    b0fe:	4618      	mov	r0, r3
    b100:	4b18      	ldr	r3, [pc, #96]	; (b164 <_usb_d_dev_ep_stall_clr+0xd0>)
    b102:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b104:	78f9      	ldrb	r1, [r7, #3]
    b106:	7bfb      	ldrb	r3, [r7, #15]
    b108:	2200      	movs	r2, #0
    b10a:	4618      	mov	r0, r3
    b10c:	4b16      	ldr	r3, [pc, #88]	; (b168 <_usb_d_dev_ep_stall_clr+0xd4>)
    b10e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b110:	687b      	ldr	r3, [r7, #4]
    b112:	7cdb      	ldrb	r3, [r3, #19]
    b114:	f003 0307 	and.w	r3, r3, #7
    b118:	b2db      	uxtb	r3, r3
    b11a:	2b01      	cmp	r3, #1
    b11c:	d110      	bne.n	b140 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b11e:	7bfb      	ldrb	r3, [r7, #15]
    b120:	4619      	mov	r1, r3
    b122:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b126:	4b11      	ldr	r3, [pc, #68]	; (b16c <_usb_d_dev_ep_stall_clr+0xd8>)
    b128:	4798      	blx	r3
    b12a:	4603      	mov	r3, r0
    b12c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b130:	2b00      	cmp	r3, #0
    b132:	d10a      	bne.n	b14a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b134:	687a      	ldr	r2, [r7, #4]
    b136:	7cd3      	ldrb	r3, [r2, #19]
    b138:	f36f 03c3 	bfc	r3, #3, #1
    b13c:	74d3      	strb	r3, [r2, #19]
    b13e:	e004      	b.n	b14a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b140:	687a      	ldr	r2, [r7, #4]
    b142:	7cd3      	ldrb	r3, [r2, #19]
    b144:	f36f 03c3 	bfc	r3, #3, #1
    b148:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b14a:	2300      	movs	r3, #0
}
    b14c:	4618      	mov	r0, r3
    b14e:	3710      	adds	r7, #16
    b150:	46bd      	mov	sp, r7
    b152:	bd80      	pop	{r7, pc}
    b154:	00009705 	.word	0x00009705
    b158:	000096ad 	.word	0x000096ad
    b15c:	00009655 	.word	0x00009655
    b160:	00009749 	.word	0x00009749
    b164:	0000978d 	.word	0x0000978d
    b168:	00009879 	.word	0x00009879
    b16c:	00009135 	.word	0x00009135

0000b170 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b170:	b580      	push	{r7, lr}
    b172:	b086      	sub	sp, #24
    b174:	af00      	add	r7, sp, #0
    b176:	4603      	mov	r3, r0
    b178:	460a      	mov	r2, r1
    b17a:	71fb      	strb	r3, [r7, #7]
    b17c:	4613      	mov	r3, r2
    b17e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b180:	79fb      	ldrb	r3, [r7, #7]
    b182:	f003 030f 	and.w	r3, r3, #15
    b186:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b188:	79fb      	ldrb	r3, [r7, #7]
    b18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b18e:	2b00      	cmp	r3, #0
    b190:	bf14      	ite	ne
    b192:	2301      	movne	r3, #1
    b194:	2300      	moveq	r3, #0
    b196:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b198:	7cba      	ldrb	r2, [r7, #18]
    b19a:	7cfb      	ldrb	r3, [r7, #19]
    b19c:	4611      	mov	r1, r2
    b19e:	4618      	mov	r0, r3
    b1a0:	4b13      	ldr	r3, [pc, #76]	; (b1f0 <_usb_d_dev_ep_stall+0x80>)
    b1a2:	4798      	blx	r3
    b1a4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b1a6:	7cfb      	ldrb	r3, [r7, #19]
    b1a8:	2b04      	cmp	r3, #4
    b1aa:	d902      	bls.n	b1b2 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b1ac:	f06f 0311 	mvn.w	r3, #17
    b1b0:	e01a      	b.n	b1e8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b1b2:	79bb      	ldrb	r3, [r7, #6]
    b1b4:	2b01      	cmp	r3, #1
    b1b6:	d106      	bne.n	b1c6 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b1b8:	7cbb      	ldrb	r3, [r7, #18]
    b1ba:	4619      	mov	r1, r3
    b1bc:	68f8      	ldr	r0, [r7, #12]
    b1be:	4b0d      	ldr	r3, [pc, #52]	; (b1f4 <_usb_d_dev_ep_stall+0x84>)
    b1c0:	4798      	blx	r3
    b1c2:	6178      	str	r0, [r7, #20]
    b1c4:	e00f      	b.n	b1e6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b1c6:	79bb      	ldrb	r3, [r7, #6]
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d106      	bne.n	b1da <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b1cc:	7cbb      	ldrb	r3, [r7, #18]
    b1ce:	4619      	mov	r1, r3
    b1d0:	68f8      	ldr	r0, [r7, #12]
    b1d2:	4b09      	ldr	r3, [pc, #36]	; (b1f8 <_usb_d_dev_ep_stall+0x88>)
    b1d4:	4798      	blx	r3
    b1d6:	6178      	str	r0, [r7, #20]
    b1d8:	e005      	b.n	b1e6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b1da:	7cbb      	ldrb	r3, [r7, #18]
    b1dc:	4619      	mov	r1, r3
    b1de:	68f8      	ldr	r0, [r7, #12]
    b1e0:	4b06      	ldr	r3, [pc, #24]	; (b1fc <_usb_d_dev_ep_stall+0x8c>)
    b1e2:	4798      	blx	r3
    b1e4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b1e6:	697b      	ldr	r3, [r7, #20]
}
    b1e8:	4618      	mov	r0, r3
    b1ea:	3718      	adds	r7, #24
    b1ec:	46bd      	mov	sp, r7
    b1ee:	bd80      	pop	{r7, pc}
    b1f0:	00009c11 	.word	0x00009c11
    b1f4:	0000b045 	.word	0x0000b045
    b1f8:	0000b095 	.word	0x0000b095
    b1fc:	0000b015 	.word	0x0000b015

0000b200 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b200:	b580      	push	{r7, lr}
    b202:	b082      	sub	sp, #8
    b204:	af00      	add	r7, sp, #0
    b206:	6078      	str	r0, [r7, #4]
    b208:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b20a:	687b      	ldr	r3, [r7, #4]
    b20c:	7c9b      	ldrb	r3, [r3, #18]
    b20e:	2bff      	cmp	r3, #255	; 0xff
    b210:	d014      	beq.n	b23c <_usb_d_dev_trans_done+0x3c>
    b212:	687b      	ldr	r3, [r7, #4]
    b214:	7cdb      	ldrb	r3, [r3, #19]
    b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b21a:	b2db      	uxtb	r3, r3
    b21c:	2b00      	cmp	r3, #0
    b21e:	d00d      	beq.n	b23c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b220:	687a      	ldr	r2, [r7, #4]
    b222:	7cd3      	ldrb	r3, [r2, #19]
    b224:	f36f 1386 	bfc	r3, #6, #1
    b228:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b22a:	4b06      	ldr	r3, [pc, #24]	; (b244 <_usb_d_dev_trans_done+0x44>)
    b22c:	691b      	ldr	r3, [r3, #16]
    b22e:	687a      	ldr	r2, [r7, #4]
    b230:	7c90      	ldrb	r0, [r2, #18]
    b232:	687a      	ldr	r2, [r7, #4]
    b234:	6892      	ldr	r2, [r2, #8]
    b236:	6839      	ldr	r1, [r7, #0]
    b238:	4798      	blx	r3
    b23a:	e000      	b.n	b23e <_usb_d_dev_trans_done+0x3e>
		return;
    b23c:	bf00      	nop
}
    b23e:	3708      	adds	r7, #8
    b240:	46bd      	mov	sp, r7
    b242:	bd80      	pop	{r7, pc}
    b244:	200010dc 	.word	0x200010dc

0000b248 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b248:	b580      	push	{r7, lr}
    b24a:	b086      	sub	sp, #24
    b24c:	af00      	add	r7, sp, #0
    b24e:	60f8      	str	r0, [r7, #12]
    b250:	460b      	mov	r3, r1
    b252:	607a      	str	r2, [r7, #4]
    b254:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b256:	68fb      	ldr	r3, [r7, #12]
    b258:	7c9b      	ldrb	r3, [r3, #18]
    b25a:	f003 030f 	and.w	r3, r3, #15
    b25e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b260:	4b1f      	ldr	r3, [pc, #124]	; (b2e0 <_usb_d_dev_trans_stop+0x98>)
    b262:	881b      	ldrh	r3, [r3, #0]
    b264:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b266:	68fb      	ldr	r3, [r7, #12]
    b268:	7c9b      	ldrb	r3, [r3, #18]
    b26a:	2bff      	cmp	r3, #255	; 0xff
    b26c:	d033      	beq.n	b2d6 <_usb_d_dev_trans_stop+0x8e>
    b26e:	68fb      	ldr	r3, [r7, #12]
    b270:	7cdb      	ldrb	r3, [r3, #19]
    b272:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b276:	b2db      	uxtb	r3, r3
    b278:	2b00      	cmp	r3, #0
    b27a:	d02c      	beq.n	b2d6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b27c:	7afb      	ldrb	r3, [r7, #11]
    b27e:	2b00      	cmp	r3, #0
    b280:	d006      	beq.n	b290 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b282:	7dfb      	ldrb	r3, [r7, #23]
    b284:	2200      	movs	r2, #0
    b286:	2101      	movs	r1, #1
    b288:	4618      	mov	r0, r3
    b28a:	4b16      	ldr	r3, [pc, #88]	; (b2e4 <_usb_d_dev_trans_stop+0x9c>)
    b28c:	4798      	blx	r3
    b28e:	e005      	b.n	b29c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b290:	7dfb      	ldrb	r3, [r7, #23]
    b292:	2200      	movs	r2, #0
    b294:	2100      	movs	r1, #0
    b296:	4618      	mov	r0, r3
    b298:	4b13      	ldr	r3, [pc, #76]	; (b2e8 <_usb_d_dev_trans_stop+0xa0>)
    b29a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b29c:	7afb      	ldrb	r3, [r7, #11]
    b29e:	f107 0218 	add.w	r2, r7, #24
    b2a2:	4413      	add	r3, r2
    b2a4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b2a8:	461a      	mov	r2, r3
    b2aa:	7dfb      	ldrb	r3, [r7, #23]
    b2ac:	4611      	mov	r1, r2
    b2ae:	4618      	mov	r0, r3
    b2b0:	4b0e      	ldr	r3, [pc, #56]	; (b2ec <_usb_d_dev_trans_stop+0xa4>)
    b2b2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b2b4:	7afb      	ldrb	r3, [r7, #11]
    b2b6:	f107 0218 	add.w	r2, r7, #24
    b2ba:	4413      	add	r3, r2
    b2bc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b2c0:	461a      	mov	r2, r3
    b2c2:	7dfb      	ldrb	r3, [r7, #23]
    b2c4:	4611      	mov	r1, r2
    b2c6:	4618      	mov	r0, r3
    b2c8:	4b09      	ldr	r3, [pc, #36]	; (b2f0 <_usb_d_dev_trans_stop+0xa8>)
    b2ca:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b2cc:	6879      	ldr	r1, [r7, #4]
    b2ce:	68f8      	ldr	r0, [r7, #12]
    b2d0:	4b08      	ldr	r3, [pc, #32]	; (b2f4 <_usb_d_dev_trans_stop+0xac>)
    b2d2:	4798      	blx	r3
    b2d4:	e000      	b.n	b2d8 <_usb_d_dev_trans_stop+0x90>
		return;
    b2d6:	bf00      	nop
}
    b2d8:	3718      	adds	r7, #24
    b2da:	46bd      	mov	sp, r7
    b2dc:	bd80      	pop	{r7, pc}
    b2de:	bf00      	nop
    b2e0:	000142f4 	.word	0x000142f4
    b2e4:	00009afd 	.word	0x00009afd
    b2e8:	00009b55 	.word	0x00009b55
    b2ec:	00009605 	.word	0x00009605
    b2f0:	00009655 	.word	0x00009655
    b2f4:	0000b201 	.word	0x0000b201

0000b2f8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b2f8:	b580      	push	{r7, lr}
    b2fa:	b086      	sub	sp, #24
    b2fc:	af00      	add	r7, sp, #0
    b2fe:	4603      	mov	r3, r0
    b300:	6039      	str	r1, [r7, #0]
    b302:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b304:	79fb      	ldrb	r3, [r7, #7]
    b306:	f003 030f 	and.w	r3, r3, #15
    b30a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b30c:	7dfb      	ldrb	r3, [r7, #23]
    b30e:	015b      	lsls	r3, r3, #5
    b310:	4a1e      	ldr	r2, [pc, #120]	; (b38c <_usb_d_dev_ep_read_req+0x94>)
    b312:	4413      	add	r3, r2
    b314:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b316:	693b      	ldr	r3, [r7, #16]
    b318:	681b      	ldr	r3, [r3, #0]
    b31a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b31c:	693b      	ldr	r3, [r7, #16]
    b31e:	685b      	ldr	r3, [r3, #4]
    b320:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b324:	b29b      	uxth	r3, r3
    b326:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b328:	7dfb      	ldrb	r3, [r7, #23]
    b32a:	2b04      	cmp	r3, #4
    b32c:	d802      	bhi.n	b334 <_usb_d_dev_ep_read_req+0x3c>
    b32e:	683b      	ldr	r3, [r7, #0]
    b330:	2b00      	cmp	r3, #0
    b332:	d102      	bne.n	b33a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b334:	f06f 0311 	mvn.w	r3, #17
    b338:	e023      	b.n	b382 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b33a:	7dfb      	ldrb	r3, [r7, #23]
    b33c:	4618      	mov	r0, r3
    b33e:	4b14      	ldr	r3, [pc, #80]	; (b390 <_usb_d_dev_ep_read_req+0x98>)
    b340:	4798      	blx	r3
    b342:	4603      	mov	r3, r0
    b344:	f083 0301 	eor.w	r3, r3, #1
    b348:	b2db      	uxtb	r3, r3
    b34a:	2b00      	cmp	r3, #0
    b34c:	d002      	beq.n	b354 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b34e:	f06f 0312 	mvn.w	r3, #18
    b352:	e016      	b.n	b382 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b354:	7dfb      	ldrb	r3, [r7, #23]
    b356:	4618      	mov	r0, r3
    b358:	4b0e      	ldr	r3, [pc, #56]	; (b394 <_usb_d_dev_ep_read_req+0x9c>)
    b35a:	4798      	blx	r3
    b35c:	4603      	mov	r3, r0
    b35e:	f083 0301 	eor.w	r3, r3, #1
    b362:	b2db      	uxtb	r3, r3
    b364:	2b00      	cmp	r3, #0
    b366:	d001      	beq.n	b36c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b368:	2300      	movs	r3, #0
    b36a:	e00a      	b.n	b382 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b36c:	68fb      	ldr	r3, [r7, #12]
    b36e:	2208      	movs	r2, #8
    b370:	4619      	mov	r1, r3
    b372:	6838      	ldr	r0, [r7, #0]
    b374:	4b08      	ldr	r3, [pc, #32]	; (b398 <_usb_d_dev_ep_read_req+0xa0>)
    b376:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b378:	7dfb      	ldrb	r3, [r7, #23]
    b37a:	4618      	mov	r0, r3
    b37c:	4b07      	ldr	r3, [pc, #28]	; (b39c <_usb_d_dev_ep_read_req+0xa4>)
    b37e:	4798      	blx	r3

	return bytes;
    b380:	897b      	ldrh	r3, [r7, #10]
}
    b382:	4618      	mov	r0, r3
    b384:	3718      	adds	r7, #24
    b386:	46bd      	mov	sp, r7
    b388:	bd80      	pop	{r7, pc}
    b38a:	bf00      	nop
    b38c:	200011a4 	.word	0x200011a4
    b390:	0000967d 	.word	0x0000967d
    b394:	00009829 	.word	0x00009829
    b398:	00013b45 	.word	0x00013b45
    b39c:	00009859 	.word	0x00009859

0000b3a0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b3a0:	b580      	push	{r7, lr}
    b3a2:	b086      	sub	sp, #24
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b3a8:	687b      	ldr	r3, [r7, #4]
    b3aa:	7a1b      	ldrb	r3, [r3, #8]
    b3ac:	f003 030f 	and.w	r3, r3, #15
    b3b0:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b3b2:	687b      	ldr	r3, [r7, #4]
    b3b4:	7a1b      	ldrb	r3, [r3, #8]
    b3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	bf14      	ite	ne
    b3be:	2301      	movne	r3, #1
    b3c0:	2300      	moveq	r3, #0
    b3c2:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b3c4:	7d7a      	ldrb	r2, [r7, #21]
    b3c6:	7dbb      	ldrb	r3, [r7, #22]
    b3c8:	4611      	mov	r1, r2
    b3ca:	4618      	mov	r0, r3
    b3cc:	4b5f      	ldr	r3, [pc, #380]	; (b54c <_usb_d_dev_ep_trans+0x1ac>)
    b3ce:	4798      	blx	r3
    b3d0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b3d2:	693b      	ldr	r3, [r7, #16]
    b3d4:	8a1b      	ldrh	r3, [r3, #16]
    b3d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b3da:	4293      	cmp	r3, r2
    b3dc:	d004      	beq.n	b3e8 <_usb_d_dev_ep_trans+0x48>
    b3de:	693b      	ldr	r3, [r7, #16]
    b3e0:	8a1b      	ldrh	r3, [r3, #16]
    b3e2:	3b01      	subs	r3, #1
    b3e4:	b29b      	uxth	r3, r3
    b3e6:	e001      	b.n	b3ec <_usb_d_dev_ep_trans+0x4c>
    b3e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b3ec:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b3ee:	687b      	ldr	r3, [r7, #4]
    b3f0:	685a      	ldr	r2, [r3, #4]
    b3f2:	89fb      	ldrh	r3, [r7, #14]
    b3f4:	4013      	ands	r3, r2
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	bf14      	ite	ne
    b3fa:	2301      	movne	r3, #1
    b3fc:	2300      	moveq	r3, #0
    b3fe:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b400:	2300      	movs	r3, #0
    b402:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b404:	7dbb      	ldrb	r3, [r7, #22]
    b406:	2b04      	cmp	r3, #4
    b408:	d902      	bls.n	b410 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b40a:	f06f 0311 	mvn.w	r3, #17
    b40e:	e098      	b.n	b542 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b410:	687b      	ldr	r3, [r7, #4]
    b412:	681b      	ldr	r3, [r3, #0]
    b414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b418:	d31a      	bcc.n	b450 <_usb_d_dev_ep_trans+0xb0>
    b41a:	687b      	ldr	r3, [r7, #4]
    b41c:	681b      	ldr	r3, [r3, #0]
    b41e:	461a      	mov	r2, r3
    b420:	687b      	ldr	r3, [r7, #4]
    b422:	685b      	ldr	r3, [r3, #4]
    b424:	4413      	add	r3, r2
    b426:	4a4a      	ldr	r2, [pc, #296]	; (b550 <_usb_d_dev_ep_trans+0x1b0>)
    b428:	4293      	cmp	r3, r2
    b42a:	d811      	bhi.n	b450 <_usb_d_dev_ep_trans+0xb0>
    b42c:	687b      	ldr	r3, [r7, #4]
    b42e:	681b      	ldr	r3, [r3, #0]
    b430:	f003 0303 	and.w	r3, r3, #3
    b434:	2b00      	cmp	r3, #0
    b436:	d10b      	bne.n	b450 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b438:	7d7b      	ldrb	r3, [r7, #21]
    b43a:	f083 0301 	eor.w	r3, r3, #1
    b43e:	b2db      	uxtb	r3, r3
    b440:	2b00      	cmp	r3, #0
    b442:	d00e      	beq.n	b462 <_usb_d_dev_ep_trans+0xc2>
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	685b      	ldr	r3, [r3, #4]
    b448:	693a      	ldr	r2, [r7, #16]
    b44a:	8a12      	ldrh	r2, [r2, #16]
    b44c:	4293      	cmp	r3, r2
    b44e:	d208      	bcs.n	b462 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b450:	693b      	ldr	r3, [r7, #16]
    b452:	68db      	ldr	r3, [r3, #12]
    b454:	2b00      	cmp	r3, #0
    b456:	d102      	bne.n	b45e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b458:	f06f 0312 	mvn.w	r3, #18
    b45c:	e071      	b.n	b542 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b45e:	2301      	movs	r3, #1
    b460:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b462:	7d7b      	ldrb	r3, [r7, #21]
    b464:	f083 0301 	eor.w	r3, r3, #1
    b468:	b2db      	uxtb	r3, r3
    b46a:	2b00      	cmp	r3, #0
    b46c:	d009      	beq.n	b482 <_usb_d_dev_ep_trans+0xe2>
    b46e:	7b7b      	ldrb	r3, [r7, #13]
    b470:	2b00      	cmp	r3, #0
    b472:	d006      	beq.n	b482 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b474:	693b      	ldr	r3, [r7, #16]
    b476:	68db      	ldr	r3, [r3, #12]
    b478:	2b00      	cmp	r3, #0
    b47a:	d102      	bne.n	b482 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b47c:	f06f 0311 	mvn.w	r3, #17
    b480:	e05f      	b.n	b542 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b482:	693b      	ldr	r3, [r7, #16]
    b484:	7cdb      	ldrb	r3, [r3, #19]
    b486:	f003 0308 	and.w	r3, r3, #8
    b48a:	b2db      	uxtb	r3, r3
    b48c:	2b00      	cmp	r3, #0
    b48e:	d001      	beq.n	b494 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b490:	2302      	movs	r3, #2
    b492:	e056      	b.n	b542 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b494:	f107 0308 	add.w	r3, r7, #8
    b498:	4618      	mov	r0, r3
    b49a:	4b2e      	ldr	r3, [pc, #184]	; (b554 <_usb_d_dev_ep_trans+0x1b4>)
    b49c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b49e:	693b      	ldr	r3, [r7, #16]
    b4a0:	7cdb      	ldrb	r3, [r3, #19]
    b4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b4a6:	b2db      	uxtb	r3, r3
    b4a8:	2b00      	cmp	r3, #0
    b4aa:	d006      	beq.n	b4ba <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b4ac:	f107 0308 	add.w	r3, r7, #8
    b4b0:	4618      	mov	r0, r3
    b4b2:	4b29      	ldr	r3, [pc, #164]	; (b558 <_usb_d_dev_ep_trans+0x1b8>)
    b4b4:	4798      	blx	r3
		return USB_BUSY;
    b4b6:	2301      	movs	r3, #1
    b4b8:	e043      	b.n	b542 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b4ba:	693a      	ldr	r2, [r7, #16]
    b4bc:	7cd3      	ldrb	r3, [r2, #19]
    b4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b4c2:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b4c4:	f107 0308 	add.w	r3, r7, #8
    b4c8:	4618      	mov	r0, r3
    b4ca:	4b23      	ldr	r3, [pc, #140]	; (b558 <_usb_d_dev_ep_trans+0x1b8>)
    b4cc:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b4ce:	687b      	ldr	r3, [r7, #4]
    b4d0:	681a      	ldr	r2, [r3, #0]
    b4d2:	693b      	ldr	r3, [r7, #16]
    b4d4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b4d6:	687b      	ldr	r3, [r7, #4]
    b4d8:	685a      	ldr	r2, [r3, #4]
    b4da:	693b      	ldr	r3, [r7, #16]
    b4dc:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b4de:	693b      	ldr	r3, [r7, #16]
    b4e0:	2200      	movs	r2, #0
    b4e2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b4e4:	693a      	ldr	r2, [r7, #16]
    b4e6:	7cd3      	ldrb	r3, [r2, #19]
    b4e8:	7d79      	ldrb	r1, [r7, #21]
    b4ea:	f361 13c7 	bfi	r3, r1, #7, #1
    b4ee:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b4f0:	693a      	ldr	r2, [r7, #16]
    b4f2:	7cd3      	ldrb	r3, [r2, #19]
    b4f4:	7df9      	ldrb	r1, [r7, #23]
    b4f6:	f361 1345 	bfi	r3, r1, #5, #1
    b4fa:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b4fc:	687b      	ldr	r3, [r7, #4]
    b4fe:	7a5b      	ldrb	r3, [r3, #9]
    b500:	2b00      	cmp	r3, #0
    b502:	d007      	beq.n	b514 <_usb_d_dev_ep_trans+0x174>
    b504:	7b7b      	ldrb	r3, [r7, #13]
    b506:	f083 0301 	eor.w	r3, r3, #1
    b50a:	b2db      	uxtb	r3, r3
    b50c:	2b00      	cmp	r3, #0
    b50e:	d001      	beq.n	b514 <_usb_d_dev_ep_trans+0x174>
    b510:	2301      	movs	r3, #1
    b512:	e000      	b.n	b516 <_usb_d_dev_ep_trans+0x176>
    b514:	2300      	movs	r3, #0
    b516:	b2db      	uxtb	r3, r3
    b518:	f003 0301 	and.w	r3, r3, #1
    b51c:	b2d9      	uxtb	r1, r3
    b51e:	693a      	ldr	r2, [r7, #16]
    b520:	7cd3      	ldrb	r3, [r2, #19]
    b522:	f361 1304 	bfi	r3, r1, #4, #1
    b526:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b528:	7d7b      	ldrb	r3, [r7, #21]
    b52a:	2b00      	cmp	r3, #0
    b52c:	d004      	beq.n	b538 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b52e:	2100      	movs	r1, #0
    b530:	6938      	ldr	r0, [r7, #16]
    b532:	4b0a      	ldr	r3, [pc, #40]	; (b55c <_usb_d_dev_ep_trans+0x1bc>)
    b534:	4798      	blx	r3
    b536:	e003      	b.n	b540 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b538:	2100      	movs	r1, #0
    b53a:	6938      	ldr	r0, [r7, #16]
    b53c:	4b08      	ldr	r3, [pc, #32]	; (b560 <_usb_d_dev_ep_trans+0x1c0>)
    b53e:	4798      	blx	r3
	}

	return ERR_NONE;
    b540:	2300      	movs	r3, #0
}
    b542:	4618      	mov	r0, r3
    b544:	3718      	adds	r7, #24
    b546:	46bd      	mov	sp, r7
    b548:	bd80      	pop	{r7, pc}
    b54a:	bf00      	nop
    b54c:	00009c11 	.word	0x00009c11
    b550:	20041fff 	.word	0x20041fff
    b554:	0000bd6d 	.word	0x0000bd6d
    b558:	0000bd93 	.word	0x0000bd93
    b55c:	00009ed9 	.word	0x00009ed9
    b560:	0000a0f1 	.word	0x0000a0f1

0000b564 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b564:	b580      	push	{r7, lr}
    b566:	b084      	sub	sp, #16
    b568:	af00      	add	r7, sp, #0
    b56a:	4603      	mov	r3, r0
    b56c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b56e:	79fb      	ldrb	r3, [r7, #7]
    b570:	f003 030f 	and.w	r3, r3, #15
    b574:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b576:	79fb      	ldrb	r3, [r7, #7]
    b578:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b57c:	2b00      	cmp	r3, #0
    b57e:	bf14      	ite	ne
    b580:	2301      	movne	r3, #1
    b582:	2300      	moveq	r3, #0
    b584:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b586:	7bba      	ldrb	r2, [r7, #14]
    b588:	7bfb      	ldrb	r3, [r7, #15]
    b58a:	4611      	mov	r1, r2
    b58c:	4618      	mov	r0, r3
    b58e:	4b08      	ldr	r3, [pc, #32]	; (b5b0 <_usb_d_dev_ep_abort+0x4c>)
    b590:	4798      	blx	r3
    b592:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b594:	7bfb      	ldrb	r3, [r7, #15]
    b596:	2b04      	cmp	r3, #4
    b598:	d806      	bhi.n	b5a8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b59a:	7bbb      	ldrb	r3, [r7, #14]
    b59c:	2202      	movs	r2, #2
    b59e:	4619      	mov	r1, r3
    b5a0:	68b8      	ldr	r0, [r7, #8]
    b5a2:	4b04      	ldr	r3, [pc, #16]	; (b5b4 <_usb_d_dev_ep_abort+0x50>)
    b5a4:	4798      	blx	r3
    b5a6:	e000      	b.n	b5aa <_usb_d_dev_ep_abort+0x46>
		return;
    b5a8:	bf00      	nop
}
    b5aa:	3710      	adds	r7, #16
    b5ac:	46bd      	mov	sp, r7
    b5ae:	bd80      	pop	{r7, pc}
    b5b0:	00009c11 	.word	0x00009c11
    b5b4:	0000b249 	.word	0x0000b249

0000b5b8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b5b8:	b480      	push	{r7}
    b5ba:	b085      	sub	sp, #20
    b5bc:	af00      	add	r7, sp, #0
    b5be:	4603      	mov	r3, r0
    b5c0:	6039      	str	r1, [r7, #0]
    b5c2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b5c4:	683b      	ldr	r3, [r7, #0]
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	d001      	beq.n	b5ce <_usb_d_dev_register_callback+0x16>
    b5ca:	683b      	ldr	r3, [r7, #0]
    b5cc:	e000      	b.n	b5d0 <_usb_d_dev_register_callback+0x18>
    b5ce:	4b0a      	ldr	r3, [pc, #40]	; (b5f8 <_usb_d_dev_register_callback+0x40>)
    b5d0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b5d2:	79fb      	ldrb	r3, [r7, #7]
    b5d4:	2b01      	cmp	r3, #1
    b5d6:	d103      	bne.n	b5e0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b5d8:	4a08      	ldr	r2, [pc, #32]	; (b5fc <_usb_d_dev_register_callback+0x44>)
    b5da:	68fb      	ldr	r3, [r7, #12]
    b5dc:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b5de:	e005      	b.n	b5ec <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b5e0:	79fb      	ldrb	r3, [r7, #7]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d102      	bne.n	b5ec <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b5e6:	4a05      	ldr	r2, [pc, #20]	; (b5fc <_usb_d_dev_register_callback+0x44>)
    b5e8:	68fb      	ldr	r3, [r7, #12]
    b5ea:	6013      	str	r3, [r2, #0]
}
    b5ec:	bf00      	nop
    b5ee:	3714      	adds	r7, #20
    b5f0:	46bd      	mov	sp, r7
    b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5f6:	4770      	bx	lr
    b5f8:	00009499 	.word	0x00009499
    b5fc:	200010dc 	.word	0x200010dc

0000b600 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b600:	b480      	push	{r7}
    b602:	b085      	sub	sp, #20
    b604:	af00      	add	r7, sp, #0
    b606:	4603      	mov	r3, r0
    b608:	6039      	str	r1, [r7, #0]
    b60a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b60c:	683b      	ldr	r3, [r7, #0]
    b60e:	2b00      	cmp	r3, #0
    b610:	d001      	beq.n	b616 <_usb_d_dev_register_ep_callback+0x16>
    b612:	683b      	ldr	r3, [r7, #0]
    b614:	e000      	b.n	b618 <_usb_d_dev_register_ep_callback+0x18>
    b616:	4b0e      	ldr	r3, [pc, #56]	; (b650 <_usb_d_dev_register_ep_callback+0x50>)
    b618:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b61a:	79fb      	ldrb	r3, [r7, #7]
    b61c:	2b00      	cmp	r3, #0
    b61e:	d103      	bne.n	b628 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b620:	4a0c      	ldr	r2, [pc, #48]	; (b654 <_usb_d_dev_register_ep_callback+0x54>)
    b622:	68fb      	ldr	r3, [r7, #12]
    b624:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b626:	e00c      	b.n	b642 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b628:	79fb      	ldrb	r3, [r7, #7]
    b62a:	2b01      	cmp	r3, #1
    b62c:	d103      	bne.n	b636 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b62e:	4a09      	ldr	r2, [pc, #36]	; (b654 <_usb_d_dev_register_ep_callback+0x54>)
    b630:	68fb      	ldr	r3, [r7, #12]
    b632:	60d3      	str	r3, [r2, #12]
}
    b634:	e005      	b.n	b642 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b636:	79fb      	ldrb	r3, [r7, #7]
    b638:	2b02      	cmp	r3, #2
    b63a:	d102      	bne.n	b642 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b63c:	4a05      	ldr	r2, [pc, #20]	; (b654 <_usb_d_dev_register_ep_callback+0x54>)
    b63e:	68fb      	ldr	r3, [r7, #12]
    b640:	6113      	str	r3, [r2, #16]
}
    b642:	bf00      	nop
    b644:	3714      	adds	r7, #20
    b646:	46bd      	mov	sp, r7
    b648:	f85d 7b04 	ldr.w	r7, [sp], #4
    b64c:	4770      	bx	lr
    b64e:	bf00      	nop
    b650:	00009499 	.word	0x00009499
    b654:	200010dc 	.word	0x200010dc

0000b658 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b658:	b580      	push	{r7, lr}
    b65a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b65c:	4b01      	ldr	r3, [pc, #4]	; (b664 <USB_0_Handler+0xc>)
    b65e:	4798      	blx	r3
}
    b660:	bf00      	nop
    b662:	bd80      	pop	{r7, pc}
    b664:	0000a8c9 	.word	0x0000a8c9

0000b668 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b668:	b580      	push	{r7, lr}
    b66a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b66c:	4b01      	ldr	r3, [pc, #4]	; (b674 <USB_1_Handler+0xc>)
    b66e:	4798      	blx	r3
}
    b670:	bf00      	nop
    b672:	bd80      	pop	{r7, pc}
    b674:	0000a8c9 	.word	0x0000a8c9

0000b678 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b678:	b580      	push	{r7, lr}
    b67a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b67c:	4b01      	ldr	r3, [pc, #4]	; (b684 <USB_2_Handler+0xc>)
    b67e:	4798      	blx	r3
}
    b680:	bf00      	nop
    b682:	bd80      	pop	{r7, pc}
    b684:	0000a8c9 	.word	0x0000a8c9

0000b688 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b688:	b580      	push	{r7, lr}
    b68a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b68c:	4b01      	ldr	r3, [pc, #4]	; (b694 <USB_3_Handler+0xc>)
    b68e:	4798      	blx	r3
}
    b690:	bf00      	nop
    b692:	bd80      	pop	{r7, pc}
    b694:	0000a8c9 	.word	0x0000a8c9

0000b698 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b698:	b480      	push	{r7}
    b69a:	b083      	sub	sp, #12
    b69c:	af00      	add	r7, sp, #0
    b69e:	6078      	str	r0, [r7, #4]
    b6a0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b6a2:	bf00      	nop
    b6a4:	687b      	ldr	r3, [r7, #4]
    b6a6:	689a      	ldr	r2, [r3, #8]
    b6a8:	683b      	ldr	r3, [r7, #0]
    b6aa:	4013      	ands	r3, r2
    b6ac:	2b00      	cmp	r3, #0
    b6ae:	d1f9      	bne.n	b6a4 <hri_wdt_wait_for_sync+0xc>
	};
}
    b6b0:	bf00      	nop
    b6b2:	370c      	adds	r7, #12
    b6b4:	46bd      	mov	sp, r7
    b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6ba:	4770      	bx	lr

0000b6bc <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b6bc:	b580      	push	{r7, lr}
    b6be:	b084      	sub	sp, #16
    b6c0:	af00      	add	r7, sp, #0
    b6c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b6c4:	210e      	movs	r1, #14
    b6c6:	6878      	ldr	r0, [r7, #4]
    b6c8:	4b0a      	ldr	r3, [pc, #40]	; (b6f4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b6ca:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b6cc:	687b      	ldr	r3, [r7, #4]
    b6ce:	781b      	ldrb	r3, [r3, #0]
    b6d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b6d2:	7bfb      	ldrb	r3, [r7, #15]
    b6d4:	085b      	lsrs	r3, r3, #1
    b6d6:	b2db      	uxtb	r3, r3
    b6d8:	f003 0301 	and.w	r3, r3, #1
    b6dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b6de:	7bfb      	ldrb	r3, [r7, #15]
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	bf14      	ite	ne
    b6e4:	2301      	movne	r3, #1
    b6e6:	2300      	moveq	r3, #0
    b6e8:	b2db      	uxtb	r3, r3
}
    b6ea:	4618      	mov	r0, r3
    b6ec:	3710      	adds	r7, #16
    b6ee:	46bd      	mov	sp, r7
    b6f0:	bd80      	pop	{r7, pc}
    b6f2:	bf00      	nop
    b6f4:	0000b699 	.word	0x0000b699

0000b6f8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b6f8:	b580      	push	{r7, lr}
    b6fa:	b082      	sub	sp, #8
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b700:	687b      	ldr	r3, [r7, #4]
    b702:	781b      	ldrb	r3, [r3, #0]
    b704:	b2db      	uxtb	r3, r3
    b706:	f023 0304 	bic.w	r3, r3, #4
    b70a:	b2da      	uxtb	r2, r3
    b70c:	687b      	ldr	r3, [r7, #4]
    b70e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b710:	210e      	movs	r1, #14
    b712:	6878      	ldr	r0, [r7, #4]
    b714:	4b02      	ldr	r3, [pc, #8]	; (b720 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b716:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b718:	bf00      	nop
    b71a:	3708      	adds	r7, #8
    b71c:	46bd      	mov	sp, r7
    b71e:	bd80      	pop	{r7, pc}
    b720:	0000b699 	.word	0x0000b699

0000b724 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b724:	b580      	push	{r7, lr}
    b726:	b084      	sub	sp, #16
    b728:	af00      	add	r7, sp, #0
    b72a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b72c:	210e      	movs	r1, #14
    b72e:	6878      	ldr	r0, [r7, #4]
    b730:	4b08      	ldr	r3, [pc, #32]	; (b754 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b732:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b734:	687b      	ldr	r3, [r7, #4]
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b73a:	7bfb      	ldrb	r3, [r7, #15]
    b73c:	09db      	lsrs	r3, r3, #7
    b73e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b740:	7bfb      	ldrb	r3, [r7, #15]
    b742:	2b00      	cmp	r3, #0
    b744:	bf14      	ite	ne
    b746:	2301      	movne	r3, #1
    b748:	2300      	moveq	r3, #0
    b74a:	b2db      	uxtb	r3, r3
}
    b74c:	4618      	mov	r0, r3
    b74e:	3710      	adds	r7, #16
    b750:	46bd      	mov	sp, r7
    b752:	bd80      	pop	{r7, pc}
    b754:	0000b699 	.word	0x0000b699

0000b758 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b758:	b480      	push	{r7}
    b75a:	b085      	sub	sp, #20
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]
    b760:	460b      	mov	r3, r1
    b762:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b764:	687b      	ldr	r3, [r7, #4]
    b766:	785b      	ldrb	r3, [r3, #1]
    b768:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b76a:	7bfb      	ldrb	r3, [r7, #15]
    b76c:	f023 030f 	bic.w	r3, r3, #15
    b770:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b772:	78fb      	ldrb	r3, [r7, #3]
    b774:	f003 030f 	and.w	r3, r3, #15
    b778:	b2da      	uxtb	r2, r3
    b77a:	7bfb      	ldrb	r3, [r7, #15]
    b77c:	4313      	orrs	r3, r2
    b77e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b780:	687b      	ldr	r3, [r7, #4]
    b782:	7bfa      	ldrb	r2, [r7, #15]
    b784:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b786:	bf00      	nop
    b788:	3714      	adds	r7, #20
    b78a:	46bd      	mov	sp, r7
    b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b790:	4770      	bx	lr
	...

0000b794 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b794:	b580      	push	{r7, lr}
    b796:	b082      	sub	sp, #8
    b798:	af00      	add	r7, sp, #0
    b79a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b79c:	687b      	ldr	r3, [r7, #4]
    b79e:	2b00      	cmp	r3, #0
    b7a0:	d005      	beq.n	b7ae <_wdt_init+0x1a>
    b7a2:	687b      	ldr	r3, [r7, #4]
    b7a4:	681b      	ldr	r3, [r3, #0]
    b7a6:	2b00      	cmp	r3, #0
    b7a8:	d001      	beq.n	b7ae <_wdt_init+0x1a>
    b7aa:	2301      	movs	r3, #1
    b7ac:	e000      	b.n	b7b0 <_wdt_init+0x1c>
    b7ae:	2300      	movs	r3, #0
    b7b0:	f003 0301 	and.w	r3, r3, #1
    b7b4:	b2db      	uxtb	r3, r3
    b7b6:	2250      	movs	r2, #80	; 0x50
    b7b8:	4913      	ldr	r1, [pc, #76]	; (b808 <_wdt_init+0x74>)
    b7ba:	4618      	mov	r0, r3
    b7bc:	4b13      	ldr	r3, [pc, #76]	; (b80c <_wdt_init+0x78>)
    b7be:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b7c0:	687b      	ldr	r3, [r7, #4]
    b7c2:	681b      	ldr	r3, [r3, #0]
    b7c4:	4618      	mov	r0, r3
    b7c6:	4b12      	ldr	r3, [pc, #72]	; (b810 <_wdt_init+0x7c>)
    b7c8:	4798      	blx	r3
    b7ca:	4603      	mov	r3, r0
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d107      	bne.n	b7e0 <_wdt_init+0x4c>
    b7d0:	687b      	ldr	r3, [r7, #4]
    b7d2:	681b      	ldr	r3, [r3, #0]
    b7d4:	4618      	mov	r0, r3
    b7d6:	4b0f      	ldr	r3, [pc, #60]	; (b814 <_wdt_init+0x80>)
    b7d8:	4798      	blx	r3
    b7da:	4603      	mov	r3, r0
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d002      	beq.n	b7e6 <_wdt_init+0x52>
		return ERR_DENIED;
    b7e0:	f06f 0310 	mvn.w	r3, #16
    b7e4:	e00b      	b.n	b7fe <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b7e6:	687b      	ldr	r3, [r7, #4]
    b7e8:	681b      	ldr	r3, [r3, #0]
    b7ea:	4618      	mov	r0, r3
    b7ec:	4b0a      	ldr	r3, [pc, #40]	; (b818 <_wdt_init+0x84>)
    b7ee:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b7f0:	687b      	ldr	r3, [r7, #4]
    b7f2:	681b      	ldr	r3, [r3, #0]
    b7f4:	210b      	movs	r1, #11
    b7f6:	4618      	mov	r0, r3
    b7f8:	4b08      	ldr	r3, [pc, #32]	; (b81c <_wdt_init+0x88>)
    b7fa:	4798      	blx	r3
	}

	return ERR_NONE;
    b7fc:	2300      	movs	r3, #0
}
    b7fe:	4618      	mov	r0, r3
    b800:	3708      	adds	r7, #8
    b802:	46bd      	mov	sp, r7
    b804:	bd80      	pop	{r7, pc}
    b806:	bf00      	nop
    b808:	000142f8 	.word	0x000142f8
    b80c:	000040f5 	.word	0x000040f5
    b810:	0000b725 	.word	0x0000b725
    b814:	0000b6bd 	.word	0x0000b6bd
    b818:	0000b6f9 	.word	0x0000b6f9
    b81c:	0000b759 	.word	0x0000b759

0000b820 <hri_port_set_DIR_reg>:
{
    b820:	b480      	push	{r7}
    b822:	b085      	sub	sp, #20
    b824:	af00      	add	r7, sp, #0
    b826:	60f8      	str	r0, [r7, #12]
    b828:	460b      	mov	r3, r1
    b82a:	607a      	str	r2, [r7, #4]
    b82c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b82e:	7afb      	ldrb	r3, [r7, #11]
    b830:	68fa      	ldr	r2, [r7, #12]
    b832:	01db      	lsls	r3, r3, #7
    b834:	4413      	add	r3, r2
    b836:	3308      	adds	r3, #8
    b838:	687a      	ldr	r2, [r7, #4]
    b83a:	601a      	str	r2, [r3, #0]
}
    b83c:	bf00      	nop
    b83e:	3714      	adds	r7, #20
    b840:	46bd      	mov	sp, r7
    b842:	f85d 7b04 	ldr.w	r7, [sp], #4
    b846:	4770      	bx	lr

0000b848 <hri_port_clear_DIR_reg>:
{
    b848:	b480      	push	{r7}
    b84a:	b085      	sub	sp, #20
    b84c:	af00      	add	r7, sp, #0
    b84e:	60f8      	str	r0, [r7, #12]
    b850:	460b      	mov	r3, r1
    b852:	607a      	str	r2, [r7, #4]
    b854:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b856:	7afb      	ldrb	r3, [r7, #11]
    b858:	68fa      	ldr	r2, [r7, #12]
    b85a:	01db      	lsls	r3, r3, #7
    b85c:	4413      	add	r3, r2
    b85e:	3304      	adds	r3, #4
    b860:	687a      	ldr	r2, [r7, #4]
    b862:	601a      	str	r2, [r3, #0]
}
    b864:	bf00      	nop
    b866:	3714      	adds	r7, #20
    b868:	46bd      	mov	sp, r7
    b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b86e:	4770      	bx	lr

0000b870 <hri_port_set_OUT_reg>:
{
    b870:	b480      	push	{r7}
    b872:	b085      	sub	sp, #20
    b874:	af00      	add	r7, sp, #0
    b876:	60f8      	str	r0, [r7, #12]
    b878:	460b      	mov	r3, r1
    b87a:	607a      	str	r2, [r7, #4]
    b87c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b87e:	7afb      	ldrb	r3, [r7, #11]
    b880:	68fa      	ldr	r2, [r7, #12]
    b882:	01db      	lsls	r3, r3, #7
    b884:	4413      	add	r3, r2
    b886:	3318      	adds	r3, #24
    b888:	687a      	ldr	r2, [r7, #4]
    b88a:	601a      	str	r2, [r3, #0]
}
    b88c:	bf00      	nop
    b88e:	3714      	adds	r7, #20
    b890:	46bd      	mov	sp, r7
    b892:	f85d 7b04 	ldr.w	r7, [sp], #4
    b896:	4770      	bx	lr

0000b898 <hri_port_clear_OUT_reg>:
{
    b898:	b480      	push	{r7}
    b89a:	b085      	sub	sp, #20
    b89c:	af00      	add	r7, sp, #0
    b89e:	60f8      	str	r0, [r7, #12]
    b8a0:	460b      	mov	r3, r1
    b8a2:	607a      	str	r2, [r7, #4]
    b8a4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b8a6:	7afb      	ldrb	r3, [r7, #11]
    b8a8:	68fa      	ldr	r2, [r7, #12]
    b8aa:	01db      	lsls	r3, r3, #7
    b8ac:	4413      	add	r3, r2
    b8ae:	3314      	adds	r3, #20
    b8b0:	687a      	ldr	r2, [r7, #4]
    b8b2:	601a      	str	r2, [r3, #0]
}
    b8b4:	bf00      	nop
    b8b6:	3714      	adds	r7, #20
    b8b8:	46bd      	mov	sp, r7
    b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8be:	4770      	bx	lr

0000b8c0 <hri_port_write_PMUX_PMUXE_bf>:
{
    b8c0:	b480      	push	{r7}
    b8c2:	b085      	sub	sp, #20
    b8c4:	af00      	add	r7, sp, #0
    b8c6:	6078      	str	r0, [r7, #4]
    b8c8:	4608      	mov	r0, r1
    b8ca:	4611      	mov	r1, r2
    b8cc:	461a      	mov	r2, r3
    b8ce:	4603      	mov	r3, r0
    b8d0:	70fb      	strb	r3, [r7, #3]
    b8d2:	460b      	mov	r3, r1
    b8d4:	70bb      	strb	r3, [r7, #2]
    b8d6:	4613      	mov	r3, r2
    b8d8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b8da:	78fa      	ldrb	r2, [r7, #3]
    b8dc:	78bb      	ldrb	r3, [r7, #2]
    b8de:	6879      	ldr	r1, [r7, #4]
    b8e0:	01d2      	lsls	r2, r2, #7
    b8e2:	440a      	add	r2, r1
    b8e4:	4413      	add	r3, r2
    b8e6:	3330      	adds	r3, #48	; 0x30
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b8ec:	7bfb      	ldrb	r3, [r7, #15]
    b8ee:	f023 030f 	bic.w	r3, r3, #15
    b8f2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b8f4:	787b      	ldrb	r3, [r7, #1]
    b8f6:	f003 030f 	and.w	r3, r3, #15
    b8fa:	b2da      	uxtb	r2, r3
    b8fc:	7bfb      	ldrb	r3, [r7, #15]
    b8fe:	4313      	orrs	r3, r2
    b900:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b902:	78fa      	ldrb	r2, [r7, #3]
    b904:	78bb      	ldrb	r3, [r7, #2]
    b906:	6879      	ldr	r1, [r7, #4]
    b908:	01d2      	lsls	r2, r2, #7
    b90a:	440a      	add	r2, r1
    b90c:	4413      	add	r3, r2
    b90e:	3330      	adds	r3, #48	; 0x30
    b910:	7bfa      	ldrb	r2, [r7, #15]
    b912:	701a      	strb	r2, [r3, #0]
}
    b914:	bf00      	nop
    b916:	3714      	adds	r7, #20
    b918:	46bd      	mov	sp, r7
    b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b91e:	4770      	bx	lr

0000b920 <hri_port_write_PMUX_PMUXO_bf>:
{
    b920:	b480      	push	{r7}
    b922:	b085      	sub	sp, #20
    b924:	af00      	add	r7, sp, #0
    b926:	6078      	str	r0, [r7, #4]
    b928:	4608      	mov	r0, r1
    b92a:	4611      	mov	r1, r2
    b92c:	461a      	mov	r2, r3
    b92e:	4603      	mov	r3, r0
    b930:	70fb      	strb	r3, [r7, #3]
    b932:	460b      	mov	r3, r1
    b934:	70bb      	strb	r3, [r7, #2]
    b936:	4613      	mov	r3, r2
    b938:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b93a:	78fa      	ldrb	r2, [r7, #3]
    b93c:	78bb      	ldrb	r3, [r7, #2]
    b93e:	6879      	ldr	r1, [r7, #4]
    b940:	01d2      	lsls	r2, r2, #7
    b942:	440a      	add	r2, r1
    b944:	4413      	add	r3, r2
    b946:	3330      	adds	r3, #48	; 0x30
    b948:	781b      	ldrb	r3, [r3, #0]
    b94a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b94c:	7bfb      	ldrb	r3, [r7, #15]
    b94e:	f003 030f 	and.w	r3, r3, #15
    b952:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b954:	787b      	ldrb	r3, [r7, #1]
    b956:	011b      	lsls	r3, r3, #4
    b958:	b2da      	uxtb	r2, r3
    b95a:	7bfb      	ldrb	r3, [r7, #15]
    b95c:	4313      	orrs	r3, r2
    b95e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b960:	78fa      	ldrb	r2, [r7, #3]
    b962:	78bb      	ldrb	r3, [r7, #2]
    b964:	6879      	ldr	r1, [r7, #4]
    b966:	01d2      	lsls	r2, r2, #7
    b968:	440a      	add	r2, r1
    b96a:	4413      	add	r3, r2
    b96c:	3330      	adds	r3, #48	; 0x30
    b96e:	7bfa      	ldrb	r2, [r7, #15]
    b970:	701a      	strb	r2, [r3, #0]
}
    b972:	bf00      	nop
    b974:	3714      	adds	r7, #20
    b976:	46bd      	mov	sp, r7
    b978:	f85d 7b04 	ldr.w	r7, [sp], #4
    b97c:	4770      	bx	lr

0000b97e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b97e:	b480      	push	{r7}
    b980:	b085      	sub	sp, #20
    b982:	af00      	add	r7, sp, #0
    b984:	6078      	str	r0, [r7, #4]
    b986:	4608      	mov	r0, r1
    b988:	4611      	mov	r1, r2
    b98a:	461a      	mov	r2, r3
    b98c:	4603      	mov	r3, r0
    b98e:	70fb      	strb	r3, [r7, #3]
    b990:	460b      	mov	r3, r1
    b992:	70bb      	strb	r3, [r7, #2]
    b994:	4613      	mov	r3, r2
    b996:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b998:	78fa      	ldrb	r2, [r7, #3]
    b99a:	78bb      	ldrb	r3, [r7, #2]
    b99c:	6879      	ldr	r1, [r7, #4]
    b99e:	01d2      	lsls	r2, r2, #7
    b9a0:	440a      	add	r2, r1
    b9a2:	4413      	add	r3, r2
    b9a4:	3340      	adds	r3, #64	; 0x40
    b9a6:	781b      	ldrb	r3, [r3, #0]
    b9a8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b9aa:	7bfb      	ldrb	r3, [r7, #15]
    b9ac:	f023 0301 	bic.w	r3, r3, #1
    b9b0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b9b2:	787a      	ldrb	r2, [r7, #1]
    b9b4:	7bfb      	ldrb	r3, [r7, #15]
    b9b6:	4313      	orrs	r3, r2
    b9b8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b9ba:	78fa      	ldrb	r2, [r7, #3]
    b9bc:	78bb      	ldrb	r3, [r7, #2]
    b9be:	6879      	ldr	r1, [r7, #4]
    b9c0:	01d2      	lsls	r2, r2, #7
    b9c2:	440a      	add	r2, r1
    b9c4:	4413      	add	r3, r2
    b9c6:	3340      	adds	r3, #64	; 0x40
    b9c8:	7bfa      	ldrb	r2, [r7, #15]
    b9ca:	701a      	strb	r2, [r3, #0]
}
    b9cc:	bf00      	nop
    b9ce:	3714      	adds	r7, #20
    b9d0:	46bd      	mov	sp, r7
    b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9d6:	4770      	bx	lr

0000b9d8 <hri_port_write_WRCONFIG_reg>:
{
    b9d8:	b480      	push	{r7}
    b9da:	b085      	sub	sp, #20
    b9dc:	af00      	add	r7, sp, #0
    b9de:	60f8      	str	r0, [r7, #12]
    b9e0:	460b      	mov	r3, r1
    b9e2:	607a      	str	r2, [r7, #4]
    b9e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b9e6:	7afb      	ldrb	r3, [r7, #11]
    b9e8:	68fa      	ldr	r2, [r7, #12]
    b9ea:	01db      	lsls	r3, r3, #7
    b9ec:	4413      	add	r3, r2
    b9ee:	3328      	adds	r3, #40	; 0x28
    b9f0:	687a      	ldr	r2, [r7, #4]
    b9f2:	601a      	str	r2, [r3, #0]
}
    b9f4:	bf00      	nop
    b9f6:	3714      	adds	r7, #20
    b9f8:	46bd      	mov	sp, r7
    b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9fe:	4770      	bx	lr

0000ba00 <_gpio_set_direction>:
{
    ba00:	b580      	push	{r7, lr}
    ba02:	b082      	sub	sp, #8
    ba04:	af00      	add	r7, sp, #0
    ba06:	4603      	mov	r3, r0
    ba08:	6039      	str	r1, [r7, #0]
    ba0a:	71fb      	strb	r3, [r7, #7]
    ba0c:	4613      	mov	r3, r2
    ba0e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ba10:	79bb      	ldrb	r3, [r7, #6]
    ba12:	2b01      	cmp	r3, #1
    ba14:	d01c      	beq.n	ba50 <_gpio_set_direction+0x50>
    ba16:	2b02      	cmp	r3, #2
    ba18:	d037      	beq.n	ba8a <_gpio_set_direction+0x8a>
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	d14e      	bne.n	babc <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ba1e:	79fb      	ldrb	r3, [r7, #7]
    ba20:	683a      	ldr	r2, [r7, #0]
    ba22:	4619      	mov	r1, r3
    ba24:	482a      	ldr	r0, [pc, #168]	; (bad0 <_gpio_set_direction+0xd0>)
    ba26:	4b2b      	ldr	r3, [pc, #172]	; (bad4 <_gpio_set_direction+0xd4>)
    ba28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ba2a:	683b      	ldr	r3, [r7, #0]
    ba2c:	b29b      	uxth	r3, r3
    ba2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ba32:	79fb      	ldrb	r3, [r7, #7]
    ba34:	4619      	mov	r1, r3
    ba36:	4826      	ldr	r0, [pc, #152]	; (bad0 <_gpio_set_direction+0xd0>)
    ba38:	4b27      	ldr	r3, [pc, #156]	; (bad8 <_gpio_set_direction+0xd8>)
    ba3a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ba3c:	683b      	ldr	r3, [r7, #0]
    ba3e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ba40:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ba44:	79fb      	ldrb	r3, [r7, #7]
    ba46:	4619      	mov	r1, r3
    ba48:	4821      	ldr	r0, [pc, #132]	; (bad0 <_gpio_set_direction+0xd0>)
    ba4a:	4b23      	ldr	r3, [pc, #140]	; (bad8 <_gpio_set_direction+0xd8>)
    ba4c:	4798      	blx	r3
		break;
    ba4e:	e03a      	b.n	bac6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ba50:	79fb      	ldrb	r3, [r7, #7]
    ba52:	683a      	ldr	r2, [r7, #0]
    ba54:	4619      	mov	r1, r3
    ba56:	481e      	ldr	r0, [pc, #120]	; (bad0 <_gpio_set_direction+0xd0>)
    ba58:	4b1e      	ldr	r3, [pc, #120]	; (bad4 <_gpio_set_direction+0xd4>)
    ba5a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ba5c:	683b      	ldr	r3, [r7, #0]
    ba5e:	b29b      	uxth	r3, r3
    ba60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ba64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba68:	79f9      	ldrb	r1, [r7, #7]
    ba6a:	461a      	mov	r2, r3
    ba6c:	4818      	ldr	r0, [pc, #96]	; (bad0 <_gpio_set_direction+0xd0>)
    ba6e:	4b1a      	ldr	r3, [pc, #104]	; (bad8 <_gpio_set_direction+0xd8>)
    ba70:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ba72:	683b      	ldr	r3, [r7, #0]
    ba74:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ba76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ba7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba7e:	79f9      	ldrb	r1, [r7, #7]
    ba80:	461a      	mov	r2, r3
    ba82:	4813      	ldr	r0, [pc, #76]	; (bad0 <_gpio_set_direction+0xd0>)
    ba84:	4b14      	ldr	r3, [pc, #80]	; (bad8 <_gpio_set_direction+0xd8>)
    ba86:	4798      	blx	r3
		break;
    ba88:	e01d      	b.n	bac6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ba8a:	79fb      	ldrb	r3, [r7, #7]
    ba8c:	683a      	ldr	r2, [r7, #0]
    ba8e:	4619      	mov	r1, r3
    ba90:	480f      	ldr	r0, [pc, #60]	; (bad0 <_gpio_set_direction+0xd0>)
    ba92:	4b12      	ldr	r3, [pc, #72]	; (badc <_gpio_set_direction+0xdc>)
    ba94:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ba96:	683b      	ldr	r3, [r7, #0]
    ba98:	b29b      	uxth	r3, r3
    ba9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ba9e:	79fb      	ldrb	r3, [r7, #7]
    baa0:	4619      	mov	r1, r3
    baa2:	480b      	ldr	r0, [pc, #44]	; (bad0 <_gpio_set_direction+0xd0>)
    baa4:	4b0c      	ldr	r3, [pc, #48]	; (bad8 <_gpio_set_direction+0xd8>)
    baa6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    baa8:	683b      	ldr	r3, [r7, #0]
    baaa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    baac:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bab0:	79fb      	ldrb	r3, [r7, #7]
    bab2:	4619      	mov	r1, r3
    bab4:	4806      	ldr	r0, [pc, #24]	; (bad0 <_gpio_set_direction+0xd0>)
    bab6:	4b08      	ldr	r3, [pc, #32]	; (bad8 <_gpio_set_direction+0xd8>)
    bab8:	4798      	blx	r3
		break;
    baba:	e004      	b.n	bac6 <_gpio_set_direction+0xc6>
		ASSERT(false);
    babc:	2246      	movs	r2, #70	; 0x46
    babe:	4908      	ldr	r1, [pc, #32]	; (bae0 <_gpio_set_direction+0xe0>)
    bac0:	2000      	movs	r0, #0
    bac2:	4b08      	ldr	r3, [pc, #32]	; (bae4 <_gpio_set_direction+0xe4>)
    bac4:	4798      	blx	r3
}
    bac6:	bf00      	nop
    bac8:	3708      	adds	r7, #8
    baca:	46bd      	mov	sp, r7
    bacc:	bd80      	pop	{r7, pc}
    bace:	bf00      	nop
    bad0:	41008000 	.word	0x41008000
    bad4:	0000b849 	.word	0x0000b849
    bad8:	0000b9d9 	.word	0x0000b9d9
    badc:	0000b821 	.word	0x0000b821
    bae0:	00014310 	.word	0x00014310
    bae4:	000040f5 	.word	0x000040f5

0000bae8 <_gpio_set_level>:
{
    bae8:	b580      	push	{r7, lr}
    baea:	b082      	sub	sp, #8
    baec:	af00      	add	r7, sp, #0
    baee:	4603      	mov	r3, r0
    baf0:	6039      	str	r1, [r7, #0]
    baf2:	71fb      	strb	r3, [r7, #7]
    baf4:	4613      	mov	r3, r2
    baf6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    baf8:	79bb      	ldrb	r3, [r7, #6]
    bafa:	2b00      	cmp	r3, #0
    bafc:	d006      	beq.n	bb0c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bafe:	79fb      	ldrb	r3, [r7, #7]
    bb00:	683a      	ldr	r2, [r7, #0]
    bb02:	4619      	mov	r1, r3
    bb04:	4806      	ldr	r0, [pc, #24]	; (bb20 <_gpio_set_level+0x38>)
    bb06:	4b07      	ldr	r3, [pc, #28]	; (bb24 <_gpio_set_level+0x3c>)
    bb08:	4798      	blx	r3
}
    bb0a:	e005      	b.n	bb18 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bb0c:	79fb      	ldrb	r3, [r7, #7]
    bb0e:	683a      	ldr	r2, [r7, #0]
    bb10:	4619      	mov	r1, r3
    bb12:	4803      	ldr	r0, [pc, #12]	; (bb20 <_gpio_set_level+0x38>)
    bb14:	4b04      	ldr	r3, [pc, #16]	; (bb28 <_gpio_set_level+0x40>)
    bb16:	4798      	blx	r3
}
    bb18:	bf00      	nop
    bb1a:	3708      	adds	r7, #8
    bb1c:	46bd      	mov	sp, r7
    bb1e:	bd80      	pop	{r7, pc}
    bb20:	41008000 	.word	0x41008000
    bb24:	0000b871 	.word	0x0000b871
    bb28:	0000b899 	.word	0x0000b899

0000bb2c <_gpio_set_pin_function>:
{
    bb2c:	b590      	push	{r4, r7, lr}
    bb2e:	b085      	sub	sp, #20
    bb30:	af00      	add	r7, sp, #0
    bb32:	6078      	str	r0, [r7, #4]
    bb34:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bb36:	687b      	ldr	r3, [r7, #4]
    bb38:	095b      	lsrs	r3, r3, #5
    bb3a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bb3c:	687b      	ldr	r3, [r7, #4]
    bb3e:	b2db      	uxtb	r3, r3
    bb40:	f003 031f 	and.w	r3, r3, #31
    bb44:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bb46:	683b      	ldr	r3, [r7, #0]
    bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
    bb4c:	d106      	bne.n	bb5c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bb4e:	7bba      	ldrb	r2, [r7, #14]
    bb50:	7bf9      	ldrb	r1, [r7, #15]
    bb52:	2300      	movs	r3, #0
    bb54:	4812      	ldr	r0, [pc, #72]	; (bba0 <_gpio_set_pin_function+0x74>)
    bb56:	4c13      	ldr	r4, [pc, #76]	; (bba4 <_gpio_set_pin_function+0x78>)
    bb58:	47a0      	blx	r4
}
    bb5a:	e01d      	b.n	bb98 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bb5c:	7bba      	ldrb	r2, [r7, #14]
    bb5e:	7bf9      	ldrb	r1, [r7, #15]
    bb60:	2301      	movs	r3, #1
    bb62:	480f      	ldr	r0, [pc, #60]	; (bba0 <_gpio_set_pin_function+0x74>)
    bb64:	4c0f      	ldr	r4, [pc, #60]	; (bba4 <_gpio_set_pin_function+0x78>)
    bb66:	47a0      	blx	r4
		if (pin & 1) {
    bb68:	7bbb      	ldrb	r3, [r7, #14]
    bb6a:	f003 0301 	and.w	r3, r3, #1
    bb6e:	2b00      	cmp	r3, #0
    bb70:	d009      	beq.n	bb86 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bb72:	7bbb      	ldrb	r3, [r7, #14]
    bb74:	085b      	lsrs	r3, r3, #1
    bb76:	b2da      	uxtb	r2, r3
    bb78:	683b      	ldr	r3, [r7, #0]
    bb7a:	b2db      	uxtb	r3, r3
    bb7c:	7bf9      	ldrb	r1, [r7, #15]
    bb7e:	4808      	ldr	r0, [pc, #32]	; (bba0 <_gpio_set_pin_function+0x74>)
    bb80:	4c09      	ldr	r4, [pc, #36]	; (bba8 <_gpio_set_pin_function+0x7c>)
    bb82:	47a0      	blx	r4
}
    bb84:	e008      	b.n	bb98 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bb86:	7bbb      	ldrb	r3, [r7, #14]
    bb88:	085b      	lsrs	r3, r3, #1
    bb8a:	b2da      	uxtb	r2, r3
    bb8c:	683b      	ldr	r3, [r7, #0]
    bb8e:	b2db      	uxtb	r3, r3
    bb90:	7bf9      	ldrb	r1, [r7, #15]
    bb92:	4803      	ldr	r0, [pc, #12]	; (bba0 <_gpio_set_pin_function+0x74>)
    bb94:	4c05      	ldr	r4, [pc, #20]	; (bbac <_gpio_set_pin_function+0x80>)
    bb96:	47a0      	blx	r4
}
    bb98:	bf00      	nop
    bb9a:	3714      	adds	r7, #20
    bb9c:	46bd      	mov	sp, r7
    bb9e:	bd90      	pop	{r4, r7, pc}
    bba0:	41008000 	.word	0x41008000
    bba4:	0000b97f 	.word	0x0000b97f
    bba8:	0000b921 	.word	0x0000b921
    bbac:	0000b8c1 	.word	0x0000b8c1

0000bbb0 <gpio_set_pin_function>:
{
    bbb0:	b580      	push	{r7, lr}
    bbb2:	b082      	sub	sp, #8
    bbb4:	af00      	add	r7, sp, #0
    bbb6:	6078      	str	r0, [r7, #4]
    bbb8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bbba:	6839      	ldr	r1, [r7, #0]
    bbbc:	6878      	ldr	r0, [r7, #4]
    bbbe:	4b03      	ldr	r3, [pc, #12]	; (bbcc <gpio_set_pin_function+0x1c>)
    bbc0:	4798      	blx	r3
}
    bbc2:	bf00      	nop
    bbc4:	3708      	adds	r7, #8
    bbc6:	46bd      	mov	sp, r7
    bbc8:	bd80      	pop	{r7, pc}
    bbca:	bf00      	nop
    bbcc:	0000bb2d 	.word	0x0000bb2d

0000bbd0 <gpio_set_pin_direction>:
{
    bbd0:	b580      	push	{r7, lr}
    bbd2:	b082      	sub	sp, #8
    bbd4:	af00      	add	r7, sp, #0
    bbd6:	4603      	mov	r3, r0
    bbd8:	460a      	mov	r2, r1
    bbda:	71fb      	strb	r3, [r7, #7]
    bbdc:	4613      	mov	r3, r2
    bbde:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bbe0:	79fb      	ldrb	r3, [r7, #7]
    bbe2:	095b      	lsrs	r3, r3, #5
    bbe4:	b2d8      	uxtb	r0, r3
    bbe6:	79fb      	ldrb	r3, [r7, #7]
    bbe8:	f003 031f 	and.w	r3, r3, #31
    bbec:	2201      	movs	r2, #1
    bbee:	fa02 f303 	lsl.w	r3, r2, r3
    bbf2:	79ba      	ldrb	r2, [r7, #6]
    bbf4:	4619      	mov	r1, r3
    bbf6:	4b03      	ldr	r3, [pc, #12]	; (bc04 <gpio_set_pin_direction+0x34>)
    bbf8:	4798      	blx	r3
}
    bbfa:	bf00      	nop
    bbfc:	3708      	adds	r7, #8
    bbfe:	46bd      	mov	sp, r7
    bc00:	bd80      	pop	{r7, pc}
    bc02:	bf00      	nop
    bc04:	0000ba01 	.word	0x0000ba01

0000bc08 <gpio_set_pin_level>:
{
    bc08:	b580      	push	{r7, lr}
    bc0a:	b082      	sub	sp, #8
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	4603      	mov	r3, r0
    bc10:	460a      	mov	r2, r1
    bc12:	71fb      	strb	r3, [r7, #7]
    bc14:	4613      	mov	r3, r2
    bc16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bc18:	79fb      	ldrb	r3, [r7, #7]
    bc1a:	095b      	lsrs	r3, r3, #5
    bc1c:	b2d8      	uxtb	r0, r3
    bc1e:	79fb      	ldrb	r3, [r7, #7]
    bc20:	f003 031f 	and.w	r3, r3, #31
    bc24:	2201      	movs	r2, #1
    bc26:	fa02 f303 	lsl.w	r3, r2, r3
    bc2a:	79ba      	ldrb	r2, [r7, #6]
    bc2c:	4619      	mov	r1, r3
    bc2e:	4b03      	ldr	r3, [pc, #12]	; (bc3c <gpio_set_pin_level+0x34>)
    bc30:	4798      	blx	r3
}
    bc32:	bf00      	nop
    bc34:	3708      	adds	r7, #8
    bc36:	46bd      	mov	sp, r7
    bc38:	bd80      	pop	{r7, pc}
    bc3a:	bf00      	nop
    bc3c:	0000bae9 	.word	0x0000bae9

0000bc40 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bc40:	b580      	push	{r7, lr}
    bc42:	b082      	sub	sp, #8
    bc44:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bc46:	2100      	movs	r1, #0
    bc48:	2008      	movs	r0, #8
    bc4a:	4b24      	ldr	r3, [pc, #144]	; (bcdc <QSPI_N25Q256_exit_xip+0x9c>)
    bc4c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bc4e:	2100      	movs	r1, #0
    bc50:	202b      	movs	r0, #43	; 0x2b
    bc52:	4b22      	ldr	r3, [pc, #136]	; (bcdc <QSPI_N25Q256_exit_xip+0x9c>)
    bc54:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bc56:	2100      	movs	r1, #0
    bc58:	202a      	movs	r0, #42	; 0x2a
    bc5a:	4b20      	ldr	r3, [pc, #128]	; (bcdc <QSPI_N25Q256_exit_xip+0x9c>)
    bc5c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bc5e:	2102      	movs	r1, #2
    bc60:	2008      	movs	r0, #8
    bc62:	4b1f      	ldr	r3, [pc, #124]	; (bce0 <QSPI_N25Q256_exit_xip+0xa0>)
    bc64:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bc66:	2102      	movs	r1, #2
    bc68:	202b      	movs	r0, #43	; 0x2b
    bc6a:	4b1d      	ldr	r3, [pc, #116]	; (bce0 <QSPI_N25Q256_exit_xip+0xa0>)
    bc6c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bc6e:	2102      	movs	r1, #2
    bc70:	202a      	movs	r0, #42	; 0x2a
    bc72:	4b1b      	ldr	r3, [pc, #108]	; (bce0 <QSPI_N25Q256_exit_xip+0xa0>)
    bc74:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bc76:	2101      	movs	r1, #1
    bc78:	2008      	movs	r0, #8
    bc7a:	4b1a      	ldr	r3, [pc, #104]	; (bce4 <QSPI_N25Q256_exit_xip+0xa4>)
    bc7c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bc7e:	2100      	movs	r1, #0
    bc80:	202b      	movs	r0, #43	; 0x2b
    bc82:	4b18      	ldr	r3, [pc, #96]	; (bce4 <QSPI_N25Q256_exit_xip+0xa4>)
    bc84:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bc86:	2100      	movs	r1, #0
    bc88:	202a      	movs	r0, #42	; 0x2a
    bc8a:	4b16      	ldr	r3, [pc, #88]	; (bce4 <QSPI_N25Q256_exit_xip+0xa4>)
    bc8c:	4798      	blx	r3

	delay_us(1);
    bc8e:	2001      	movs	r0, #1
    bc90:	4b15      	ldr	r3, [pc, #84]	; (bce8 <QSPI_N25Q256_exit_xip+0xa8>)
    bc92:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bc94:	2300      	movs	r3, #0
    bc96:	607b      	str	r3, [r7, #4]
    bc98:	e010      	b.n	bcbc <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bc9a:	2101      	movs	r1, #1
    bc9c:	202a      	movs	r0, #42	; 0x2a
    bc9e:	4b11      	ldr	r3, [pc, #68]	; (bce4 <QSPI_N25Q256_exit_xip+0xa4>)
    bca0:	4798      	blx	r3
		delay_us(1);
    bca2:	2001      	movs	r0, #1
    bca4:	4b10      	ldr	r3, [pc, #64]	; (bce8 <QSPI_N25Q256_exit_xip+0xa8>)
    bca6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bca8:	2100      	movs	r1, #0
    bcaa:	202a      	movs	r0, #42	; 0x2a
    bcac:	4b0d      	ldr	r3, [pc, #52]	; (bce4 <QSPI_N25Q256_exit_xip+0xa4>)
    bcae:	4798      	blx	r3
		delay_us(1);
    bcb0:	2001      	movs	r0, #1
    bcb2:	4b0d      	ldr	r3, [pc, #52]	; (bce8 <QSPI_N25Q256_exit_xip+0xa8>)
    bcb4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bcb6:	687b      	ldr	r3, [r7, #4]
    bcb8:	3301      	adds	r3, #1
    bcba:	607b      	str	r3, [r7, #4]
    bcbc:	687b      	ldr	r3, [r7, #4]
    bcbe:	2b06      	cmp	r3, #6
    bcc0:	ddeb      	ble.n	bc9a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bcc2:	2101      	movs	r1, #1
    bcc4:	202b      	movs	r0, #43	; 0x2b
    bcc6:	4b07      	ldr	r3, [pc, #28]	; (bce4 <QSPI_N25Q256_exit_xip+0xa4>)
    bcc8:	4798      	blx	r3
	delay_us(1);
    bcca:	2001      	movs	r0, #1
    bccc:	4b06      	ldr	r3, [pc, #24]	; (bce8 <QSPI_N25Q256_exit_xip+0xa8>)
    bcce:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bcd0:	4b06      	ldr	r3, [pc, #24]	; (bcec <QSPI_N25Q256_exit_xip+0xac>)
    bcd2:	4798      	blx	r3
}
    bcd4:	bf00      	nop
    bcd6:	3708      	adds	r7, #8
    bcd8:	46bd      	mov	sp, r7
    bcda:	bd80      	pop	{r7, pc}
    bcdc:	0000bbb1 	.word	0x0000bbb1
    bce0:	0000bbd1 	.word	0x0000bbd1
    bce4:	0000bc09 	.word	0x0000bc09
    bce8:	00002a65 	.word	0x00002a65
    bcec:	00001dc1 	.word	0x00001dc1

0000bcf0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bcf0:	b598      	push	{r3, r4, r7, lr}
    bcf2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bcf4:	4806      	ldr	r0, [pc, #24]	; (bd10 <spi_nor_flash_init+0x20>)
    bcf6:	4b07      	ldr	r3, [pc, #28]	; (bd14 <spi_nor_flash_init+0x24>)
    bcf8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bcfa:	2300      	movs	r3, #0
    bcfc:	4a06      	ldr	r2, [pc, #24]	; (bd18 <spi_nor_flash_init+0x28>)
    bcfe:	4904      	ldr	r1, [pc, #16]	; (bd10 <spi_nor_flash_init+0x20>)
    bd00:	4806      	ldr	r0, [pc, #24]	; (bd1c <spi_nor_flash_init+0x2c>)
    bd02:	4c07      	ldr	r4, [pc, #28]	; (bd20 <spi_nor_flash_init+0x30>)
    bd04:	47a0      	blx	r4
    bd06:	4602      	mov	r2, r0
    bd08:	4b06      	ldr	r3, [pc, #24]	; (bd24 <spi_nor_flash_init+0x34>)
    bd0a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bd0c:	bf00      	nop
    bd0e:	bd98      	pop	{r3, r4, r7, pc}
    bd10:	2000a018 	.word	0x2000a018
    bd14:	00002f9d 	.word	0x00002f9d
    bd18:	0000bc41 	.word	0x0000bc41
    bd1c:	20001244 	.word	0x20001244
    bd20:	0000c15d 	.word	0x0000c15d
    bd24:	2000a218 	.word	0x2000a218

0000bd28 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bd28:	b580      	push	{r7, lr}
    bd2a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bd2c:	4805      	ldr	r0, [pc, #20]	; (bd44 <cdc_device_acm_init+0x1c>)
    bd2e:	4b06      	ldr	r3, [pc, #24]	; (bd48 <cdc_device_acm_init+0x20>)
    bd30:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bd32:	4b06      	ldr	r3, [pc, #24]	; (bd4c <cdc_device_acm_init+0x24>)
    bd34:	4798      	blx	r3

	usbdc_start(single_desc);
    bd36:	4806      	ldr	r0, [pc, #24]	; (bd50 <cdc_device_acm_init+0x28>)
    bd38:	4b06      	ldr	r3, [pc, #24]	; (bd54 <cdc_device_acm_init+0x2c>)
    bd3a:	4798      	blx	r3
	usbdc_attach();
    bd3c:	4b06      	ldr	r3, [pc, #24]	; (bd58 <cdc_device_acm_init+0x30>)
    bd3e:	4798      	blx	r3
}
    bd40:	bf00      	nop
    bd42:	bd80      	pop	{r7, pc}
    bd44:	20001294 	.word	0x20001294
    bd48:	0000d885 	.word	0x0000d885
    bd4c:	0000cafd 	.word	0x0000cafd
    bd50:	20000200 	.word	0x20000200
    bd54:	0000d921 	.word	0x0000d921
    bd58:	0000d971 	.word	0x0000d971

0000bd5c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bd5c:	b580      	push	{r7, lr}
    bd5e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bd60:	4b01      	ldr	r3, [pc, #4]	; (bd68 <usb_init+0xc>)
    bd62:	4798      	blx	r3
}
    bd64:	bf00      	nop
    bd66:	bd80      	pop	{r7, pc}
    bd68:	0000bd29 	.word	0x0000bd29

0000bd6c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bd6c:	b480      	push	{r7}
    bd6e:	b085      	sub	sp, #20
    bd70:	af00      	add	r7, sp, #0
    bd72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bd74:	f3ef 8310 	mrs	r3, PRIMASK
    bd78:	60fb      	str	r3, [r7, #12]
  return(result);
    bd7a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bd7c:	687b      	ldr	r3, [r7, #4]
    bd7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bd80:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bd82:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bd86:	bf00      	nop
    bd88:	3714      	adds	r7, #20
    bd8a:	46bd      	mov	sp, r7
    bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd90:	4770      	bx	lr

0000bd92 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bd92:	b480      	push	{r7}
    bd94:	b085      	sub	sp, #20
    bd96:	af00      	add	r7, sp, #0
    bd98:	6078      	str	r0, [r7, #4]
    bd9a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bd9e:	687b      	ldr	r3, [r7, #4]
    bda0:	681b      	ldr	r3, [r3, #0]
    bda2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bda4:	68fb      	ldr	r3, [r7, #12]
    bda6:	f383 8810 	msr	PRIMASK, r3
}
    bdaa:	bf00      	nop
    bdac:	3714      	adds	r7, #20
    bdae:	46bd      	mov	sp, r7
    bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdb4:	4770      	bx	lr
	...

0000bdb8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bdb8:	b580      	push	{r7, lr}
    bdba:	b08c      	sub	sp, #48	; 0x30
    bdbc:	af00      	add	r7, sp, #0
    bdbe:	6078      	str	r0, [r7, #4]
    bdc0:	460b      	mov	r3, r1
    bdc2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bdc4:	687b      	ldr	r3, [r7, #4]
    bdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bdc8:	687b      	ldr	r3, [r7, #4]
    bdca:	681b      	ldr	r3, [r3, #0]
    bdcc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bdce:	f107 030c 	add.w	r3, r7, #12
    bdd2:	2200      	movs	r2, #0
    bdd4:	601a      	str	r2, [r3, #0]
    bdd6:	605a      	str	r2, [r3, #4]
    bdd8:	609a      	str	r2, [r3, #8]
    bdda:	60da      	str	r2, [r3, #12]
    bddc:	611a      	str	r2, [r3, #16]
    bdde:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bde2:	7b1b      	ldrb	r3, [r3, #12]
    bde4:	2b00      	cmp	r3, #0
    bde6:	d001      	beq.n	bdec <n25q256a_xip_confirm+0x34>
    bde8:	2206      	movs	r2, #6
    bdea:	e000      	b.n	bdee <n25q256a_xip_confirm+0x36>
    bdec:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bdee:	7b3b      	ldrb	r3, [r7, #12]
    bdf0:	f362 0302 	bfi	r3, r2, #0, #3
    bdf4:	733b      	strb	r3, [r7, #12]
    bdf6:	7b3b      	ldrb	r3, [r7, #12]
    bdf8:	f043 0310 	orr.w	r3, r3, #16
    bdfc:	733b      	strb	r3, [r7, #12]
    bdfe:	7b3b      	ldrb	r3, [r7, #12]
    be00:	f043 0320 	orr.w	r3, r3, #32
    be04:	733b      	strb	r3, [r7, #12]
    be06:	7b3b      	ldrb	r3, [r7, #12]
    be08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be0c:	733b      	strb	r3, [r7, #12]
    be0e:	7b3b      	ldrb	r3, [r7, #12]
    be10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be14:	733b      	strb	r3, [r7, #12]
    be16:	7b7b      	ldrb	r3, [r7, #13]
    be18:	f043 0303 	orr.w	r3, r3, #3
    be1c:	737b      	strb	r3, [r7, #13]
    be1e:	7b7b      	ldrb	r3, [r7, #13]
    be20:	2201      	movs	r2, #1
    be22:	f362 1305 	bfi	r3, r2, #4, #2
    be26:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be2a:	7b1b      	ldrb	r3, [r3, #12]
    be2c:	2b00      	cmp	r3, #0
    be2e:	d001      	beq.n	be34 <n25q256a_xip_confirm+0x7c>
    be30:	2208      	movs	r2, #8
    be32:	e000      	b.n	be36 <n25q256a_xip_confirm+0x7e>
    be34:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    be36:	7bbb      	ldrb	r3, [r7, #14]
    be38:	f362 0304 	bfi	r3, r2, #0, #5
    be3c:	73bb      	strb	r3, [r7, #14]
    be3e:	230b      	movs	r3, #11
    be40:	743b      	strb	r3, [r7, #16]
    be42:	78fb      	ldrb	r3, [r7, #3]
    be44:	2b00      	cmp	r3, #0
    be46:	d001      	beq.n	be4c <n25q256a_xip_confirm+0x94>
    be48:	2300      	movs	r3, #0
    be4a:	e000      	b.n	be4e <n25q256a_xip_confirm+0x96>
    be4c:	23ff      	movs	r3, #255	; 0xff
    be4e:	747b      	strb	r3, [r7, #17]
    be50:	2301      	movs	r3, #1
    be52:	61bb      	str	r3, [r7, #24]
    be54:	f107 0327 	add.w	r3, r7, #39	; 0x27
    be58:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    be5a:	f107 030c 	add.w	r3, r7, #12
    be5e:	4619      	mov	r1, r3
    be60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be62:	4b07      	ldr	r3, [pc, #28]	; (be80 <n25q256a_xip_confirm+0xc8>)
    be64:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    be66:	78fb      	ldrb	r3, [r7, #3]
    be68:	2b00      	cmp	r3, #0
    be6a:	d001      	beq.n	be70 <n25q256a_xip_confirm+0xb8>
    be6c:	2202      	movs	r2, #2
    be6e:	e000      	b.n	be72 <n25q256a_xip_confirm+0xba>
    be70:	2201      	movs	r2, #1
    be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be74:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    be76:	2300      	movs	r3, #0
}
    be78:	4618      	mov	r0, r3
    be7a:	3730      	adds	r7, #48	; 0x30
    be7c:	46bd      	mov	sp, r7
    be7e:	bd80      	pop	{r7, pc}
    be80:	00003015 	.word	0x00003015

0000be84 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    be84:	b580      	push	{r7, lr}
    be86:	b08c      	sub	sp, #48	; 0x30
    be88:	af00      	add	r7, sp, #0
    be8a:	6078      	str	r0, [r7, #4]
    be8c:	460b      	mov	r3, r1
    be8e:	70fb      	strb	r3, [r7, #3]
    be90:	4613      	mov	r3, r2
    be92:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    be94:	2300      	movs	r3, #0
    be96:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    be9c:	687b      	ldr	r3, [r7, #4]
    be9e:	681b      	ldr	r3, [r3, #0]
    bea0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bea2:	f107 030c 	add.w	r3, r7, #12
    bea6:	2200      	movs	r2, #0
    bea8:	601a      	str	r2, [r3, #0]
    beaa:	605a      	str	r2, [r3, #4]
    beac:	609a      	str	r2, [r3, #8]
    beae:	60da      	str	r2, [r3, #12]
    beb0:	611a      	str	r2, [r3, #16]
    beb2:	615a      	str	r2, [r3, #20]
    beb4:	78fb      	ldrb	r3, [r7, #3]
    beb6:	f003 0307 	and.w	r3, r3, #7
    beba:	b2da      	uxtb	r2, r3
    bebc:	7b3b      	ldrb	r3, [r7, #12]
    bebe:	f362 0302 	bfi	r3, r2, #0, #3
    bec2:	733b      	strb	r3, [r7, #12]
    bec4:	7b3b      	ldrb	r3, [r7, #12]
    bec6:	f043 0310 	orr.w	r3, r3, #16
    beca:	733b      	strb	r3, [r7, #12]
    becc:	7b3b      	ldrb	r3, [r7, #12]
    bece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bed2:	733b      	strb	r3, [r7, #12]
    bed4:	78bb      	ldrb	r3, [r7, #2]
    bed6:	743b      	strb	r3, [r7, #16]
    bed8:	2301      	movs	r3, #1
    beda:	61bb      	str	r3, [r7, #24]
    bedc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    bee0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bee4:	7b5b      	ldrb	r3, [r3, #13]
    bee6:	2b00      	cmp	r3, #0
    bee8:	d003      	beq.n	bef2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    beea:	2100      	movs	r1, #0
    beec:	6878      	ldr	r0, [r7, #4]
    beee:	4b0a      	ldr	r3, [pc, #40]	; (bf18 <n25q256a_read_reg+0x94>)
    bef0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bef2:	f107 030c 	add.w	r3, r7, #12
    bef6:	4619      	mov	r1, r3
    bef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    befa:	4b08      	ldr	r3, [pc, #32]	; (bf1c <n25q256a_read_reg+0x98>)
    befc:	4798      	blx	r3
	if (n25q->xip_mode) {
    befe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf00:	7b5b      	ldrb	r3, [r3, #13]
    bf02:	2b00      	cmp	r3, #0
    bf04:	d003      	beq.n	bf0e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    bf06:	2101      	movs	r1, #1
    bf08:	6878      	ldr	r0, [r7, #4]
    bf0a:	4b03      	ldr	r3, [pc, #12]	; (bf18 <n25q256a_read_reg+0x94>)
    bf0c:	4798      	blx	r3
	}
	return status;
    bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bf10:	4618      	mov	r0, r3
    bf12:	3730      	adds	r7, #48	; 0x30
    bf14:	46bd      	mov	sp, r7
    bf16:	bd80      	pop	{r7, pc}
    bf18:	0000bdb9 	.word	0x0000bdb9
    bf1c:	00003015 	.word	0x00003015

0000bf20 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    bf20:	b580      	push	{r7, lr}
    bf22:	b08c      	sub	sp, #48	; 0x30
    bf24:	af00      	add	r7, sp, #0
    bf26:	60f8      	str	r0, [r7, #12]
    bf28:	607b      	str	r3, [r7, #4]
    bf2a:	460b      	mov	r3, r1
    bf2c:	72fb      	strb	r3, [r7, #11]
    bf2e:	4613      	mov	r3, r2
    bf30:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bf32:	68fb      	ldr	r3, [r7, #12]
    bf34:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bf36:	68fb      	ldr	r3, [r7, #12]
    bf38:	681b      	ldr	r3, [r3, #0]
    bf3a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    bf3c:	f107 0310 	add.w	r3, r7, #16
    bf40:	2200      	movs	r2, #0
    bf42:	601a      	str	r2, [r3, #0]
    bf44:	605a      	str	r2, [r3, #4]
    bf46:	609a      	str	r2, [r3, #8]
    bf48:	60da      	str	r2, [r3, #12]
    bf4a:	611a      	str	r2, [r3, #16]
    bf4c:	615a      	str	r2, [r3, #20]
    bf4e:	7afb      	ldrb	r3, [r7, #11]
    bf50:	f003 0307 	and.w	r3, r3, #7
    bf54:	b2da      	uxtb	r2, r3
    bf56:	7c3b      	ldrb	r3, [r7, #16]
    bf58:	f362 0302 	bfi	r3, r2, #0, #3
    bf5c:	743b      	strb	r3, [r7, #16]
    bf5e:	7c3b      	ldrb	r3, [r7, #16]
    bf60:	f043 0310 	orr.w	r3, r3, #16
    bf64:	743b      	strb	r3, [r7, #16]
    bf66:	7c3b      	ldrb	r3, [r7, #16]
    bf68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf6c:	743b      	strb	r3, [r7, #16]
    bf6e:	7c7b      	ldrb	r3, [r7, #17]
    bf70:	2202      	movs	r2, #2
    bf72:	f362 1305 	bfi	r3, r2, #4, #2
    bf76:	747b      	strb	r3, [r7, #17]
    bf78:	7abb      	ldrb	r3, [r7, #10]
    bf7a:	753b      	strb	r3, [r7, #20]
    bf7c:	2301      	movs	r3, #1
    bf7e:	61fb      	str	r3, [r7, #28]
    bf80:	1d3b      	adds	r3, r7, #4
    bf82:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf86:	7b5b      	ldrb	r3, [r3, #13]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d003      	beq.n	bf94 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    bf8c:	2100      	movs	r1, #0
    bf8e:	68f8      	ldr	r0, [r7, #12]
    bf90:	4b09      	ldr	r3, [pc, #36]	; (bfb8 <n25q256a_write_reg+0x98>)
    bf92:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bf94:	f107 0310 	add.w	r3, r7, #16
    bf98:	4619      	mov	r1, r3
    bf9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bf9c:	4b07      	ldr	r3, [pc, #28]	; (bfbc <n25q256a_write_reg+0x9c>)
    bf9e:	4798      	blx	r3
	if (n25q->xip_mode) {
    bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bfa2:	7b5b      	ldrb	r3, [r3, #13]
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d003      	beq.n	bfb0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bfa8:	2101      	movs	r1, #1
    bfaa:	68f8      	ldr	r0, [r7, #12]
    bfac:	4b02      	ldr	r3, [pc, #8]	; (bfb8 <n25q256a_write_reg+0x98>)
    bfae:	4798      	blx	r3
	}
}
    bfb0:	bf00      	nop
    bfb2:	3730      	adds	r7, #48	; 0x30
    bfb4:	46bd      	mov	sp, r7
    bfb6:	bd80      	pop	{r7, pc}
    bfb8:	0000bdb9 	.word	0x0000bdb9
    bfbc:	00003015 	.word	0x00003015

0000bfc0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bfc0:	b580      	push	{r7, lr}
    bfc2:	b090      	sub	sp, #64	; 0x40
    bfc4:	af00      	add	r7, sp, #0
    bfc6:	6078      	str	r0, [r7, #4]
    bfc8:	460b      	mov	r3, r1
    bfca:	70fb      	strb	r3, [r7, #3]
    bfcc:	4613      	mov	r3, r2
    bfce:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bfd0:	687b      	ldr	r3, [r7, #4]
    bfd2:	681b      	ldr	r3, [r3, #0]
    bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bfd6:	78bb      	ldrb	r3, [r7, #2]
    bfd8:	2b00      	cmp	r3, #0
    bfda:	d001      	beq.n	bfe0 <n25q256a_write_enable+0x20>
    bfdc:	2306      	movs	r3, #6
    bfde:	e000      	b.n	bfe2 <n25q256a_write_enable+0x22>
    bfe0:	2304      	movs	r3, #4
    bfe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bfe6:	f107 0320 	add.w	r3, r7, #32
    bfea:	2200      	movs	r2, #0
    bfec:	601a      	str	r2, [r3, #0]
    bfee:	605a      	str	r2, [r3, #4]
    bff0:	609a      	str	r2, [r3, #8]
    bff2:	60da      	str	r2, [r3, #12]
    bff4:	611a      	str	r2, [r3, #16]
    bff6:	615a      	str	r2, [r3, #20]
    bff8:	78fb      	ldrb	r3, [r7, #3]
    bffa:	f003 0307 	and.w	r3, r3, #7
    bffe:	b2da      	uxtb	r2, r3
    c000:	f897 3020 	ldrb.w	r3, [r7, #32]
    c004:	f362 0302 	bfi	r3, r2, #0, #3
    c008:	f887 3020 	strb.w	r3, [r7, #32]
    c00c:	f897 3020 	ldrb.w	r3, [r7, #32]
    c010:	f043 0310 	orr.w	r3, r3, #16
    c014:	f887 3020 	strb.w	r3, [r7, #32]
    c018:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c01c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c020:	f107 0308 	add.w	r3, r7, #8
    c024:	2200      	movs	r2, #0
    c026:	601a      	str	r2, [r3, #0]
    c028:	605a      	str	r2, [r3, #4]
    c02a:	609a      	str	r2, [r3, #8]
    c02c:	60da      	str	r2, [r3, #12]
    c02e:	611a      	str	r2, [r3, #16]
    c030:	615a      	str	r2, [r3, #20]
    c032:	78fb      	ldrb	r3, [r7, #3]
    c034:	f003 0307 	and.w	r3, r3, #7
    c038:	b2da      	uxtb	r2, r3
    c03a:	7a3b      	ldrb	r3, [r7, #8]
    c03c:	f362 0302 	bfi	r3, r2, #0, #3
    c040:	723b      	strb	r3, [r7, #8]
    c042:	7a3b      	ldrb	r3, [r7, #8]
    c044:	f043 0310 	orr.w	r3, r3, #16
    c048:	723b      	strb	r3, [r7, #8]
    c04a:	7a3b      	ldrb	r3, [r7, #8]
    c04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c050:	723b      	strb	r3, [r7, #8]
    c052:	2305      	movs	r3, #5
    c054:	733b      	strb	r3, [r7, #12]
    c056:	2301      	movs	r3, #1
    c058:	617b      	str	r3, [r7, #20]
    c05a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c05e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c060:	f107 0320 	add.w	r3, r7, #32
    c064:	4619      	mov	r1, r3
    c066:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c068:	4b08      	ldr	r3, [pc, #32]	; (c08c <n25q256a_write_enable+0xcc>)
    c06a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c06c:	f107 0308 	add.w	r3, r7, #8
    c070:	4619      	mov	r1, r3
    c072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c074:	4b05      	ldr	r3, [pc, #20]	; (c08c <n25q256a_write_enable+0xcc>)
    c076:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c078:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c07c:	f003 0302 	and.w	r3, r3, #2
    c080:	2b00      	cmp	r3, #0
    c082:	d0ed      	beq.n	c060 <n25q256a_write_enable+0xa0>
}
    c084:	bf00      	nop
    c086:	3740      	adds	r7, #64	; 0x40
    c088:	46bd      	mov	sp, r7
    c08a:	bd80      	pop	{r7, pc}
    c08c:	00003015 	.word	0x00003015

0000c090 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c090:	b590      	push	{r4, r7, lr}
    c092:	b087      	sub	sp, #28
    c094:	af00      	add	r7, sp, #0
    c096:	6078      	str	r0, [r7, #4]
    c098:	460b      	mov	r3, r1
    c09a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c09c:	687b      	ldr	r3, [r7, #4]
    c09e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c0a0:	68fb      	ldr	r3, [r7, #12]
    c0a2:	7b1b      	ldrb	r3, [r3, #12]
    c0a4:	2b00      	cmp	r3, #0
    c0a6:	d001      	beq.n	c0ac <n25q256a_switch_mode+0x1c>
    c0a8:	2306      	movs	r3, #6
    c0aa:	e000      	b.n	c0ae <n25q256a_switch_mode+0x1e>
    c0ac:	2300      	movs	r3, #0
    c0ae:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c0b0:	7afb      	ldrb	r3, [r7, #11]
    c0b2:	2265      	movs	r2, #101	; 0x65
    c0b4:	4619      	mov	r1, r3
    c0b6:	6878      	ldr	r0, [r7, #4]
    c0b8:	4b25      	ldr	r3, [pc, #148]	; (c150 <n25q256a_switch_mode+0xc0>)
    c0ba:	4798      	blx	r3
    c0bc:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c0be:	2300      	movs	r3, #0
    c0c0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c0c2:	68fb      	ldr	r3, [r7, #12]
    c0c4:	7b1b      	ldrb	r3, [r3, #12]
    c0c6:	78fa      	ldrb	r2, [r7, #3]
    c0c8:	429a      	cmp	r2, r3
    c0ca:	d03d      	beq.n	c148 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c0cc:	78fb      	ldrb	r3, [r7, #3]
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	d00b      	beq.n	c0ea <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c0d2:	697b      	ldr	r3, [r7, #20]
    c0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d011      	beq.n	c100 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c0dc:	697b      	ldr	r3, [r7, #20]
    c0de:	f003 031f 	and.w	r3, r3, #31
    c0e2:	617b      	str	r3, [r7, #20]
			modify = 1;
    c0e4:	2301      	movs	r3, #1
    c0e6:	74fb      	strb	r3, [r7, #19]
    c0e8:	e00a      	b.n	c100 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c0ea:	697b      	ldr	r3, [r7, #20]
    c0ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d105      	bne.n	c100 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c0f4:	697b      	ldr	r3, [r7, #20]
    c0f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c0fa:	617b      	str	r3, [r7, #20]
			modify = 1;
    c0fc:	2301      	movs	r3, #1
    c0fe:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c100:	7cfb      	ldrb	r3, [r7, #19]
    c102:	2b00      	cmp	r3, #0
    c104:	d021      	beq.n	c14a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c106:	68fb      	ldr	r3, [r7, #12]
    c108:	78fa      	ldrb	r2, [r7, #3]
    c10a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c10c:	7afb      	ldrb	r3, [r7, #11]
    c10e:	2201      	movs	r2, #1
    c110:	4619      	mov	r1, r3
    c112:	6878      	ldr	r0, [r7, #4]
    c114:	4b0f      	ldr	r3, [pc, #60]	; (c154 <n25q256a_switch_mode+0xc4>)
    c116:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c118:	7af9      	ldrb	r1, [r7, #11]
    c11a:	697b      	ldr	r3, [r7, #20]
    c11c:	2261      	movs	r2, #97	; 0x61
    c11e:	6878      	ldr	r0, [r7, #4]
    c120:	4c0d      	ldr	r4, [pc, #52]	; (c158 <n25q256a_switch_mode+0xc8>)
    c122:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c124:	78fb      	ldrb	r3, [r7, #3]
    c126:	2b00      	cmp	r3, #0
    c128:	d001      	beq.n	c12e <n25q256a_switch_mode+0x9e>
    c12a:	2306      	movs	r3, #6
    c12c:	e000      	b.n	c130 <n25q256a_switch_mode+0xa0>
    c12e:	2300      	movs	r3, #0
    c130:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c132:	7afb      	ldrb	r3, [r7, #11]
    c134:	2265      	movs	r2, #101	; 0x65
    c136:	4619      	mov	r1, r3
    c138:	6878      	ldr	r0, [r7, #4]
    c13a:	4b05      	ldr	r3, [pc, #20]	; (c150 <n25q256a_switch_mode+0xc0>)
    c13c:	4798      	blx	r3
    c13e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c140:	68fb      	ldr	r3, [r7, #12]
    c142:	78fa      	ldrb	r2, [r7, #3]
    c144:	731a      	strb	r2, [r3, #12]
    c146:	e000      	b.n	c14a <n25q256a_switch_mode+0xba>
		return;
    c148:	bf00      	nop
	}
}
    c14a:	371c      	adds	r7, #28
    c14c:	46bd      	mov	sp, r7
    c14e:	bd90      	pop	{r4, r7, pc}
    c150:	0000be85 	.word	0x0000be85
    c154:	0000bfc1 	.word	0x0000bfc1
    c158:	0000bf21 	.word	0x0000bf21

0000c15c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c15c:	b580      	push	{r7, lr}
    c15e:	b086      	sub	sp, #24
    c160:	af00      	add	r7, sp, #0
    c162:	60f8      	str	r0, [r7, #12]
    c164:	60b9      	str	r1, [r7, #8]
    c166:	607a      	str	r2, [r7, #4]
    c168:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c16a:	68fb      	ldr	r3, [r7, #12]
    c16c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c16e:	4a0c      	ldr	r2, [pc, #48]	; (c1a0 <n25q256a_construct+0x44>)
    c170:	68b9      	ldr	r1, [r7, #8]
    c172:	68f8      	ldr	r0, [r7, #12]
    c174:	4b0b      	ldr	r3, [pc, #44]	; (c1a4 <n25q256a_construct+0x48>)
    c176:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c178:	697b      	ldr	r3, [r7, #20]
    c17a:	2200      	movs	r2, #0
    c17c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c17e:	697b      	ldr	r3, [r7, #20]
    c180:	2200      	movs	r2, #0
    c182:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c184:	697b      	ldr	r3, [r7, #20]
    c186:	687a      	ldr	r2, [r7, #4]
    c188:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c18a:	78fb      	ldrb	r3, [r7, #3]
    c18c:	4619      	mov	r1, r3
    c18e:	68f8      	ldr	r0, [r7, #12]
    c190:	4b05      	ldr	r3, [pc, #20]	; (c1a8 <n25q256a_construct+0x4c>)
    c192:	4798      	blx	r3
	return me;
    c194:	68fb      	ldr	r3, [r7, #12]
}
    c196:	4618      	mov	r0, r3
    c198:	3718      	adds	r7, #24
    c19a:	46bd      	mov	sp, r7
    c19c:	bd80      	pop	{r7, pc}
    c19e:	bf00      	nop
    c1a0:	0001432c 	.word	0x0001432c
    c1a4:	0000c639 	.word	0x0000c639
    c1a8:	0000c091 	.word	0x0000c091

0000c1ac <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	b08c      	sub	sp, #48	; 0x30
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	60f8      	str	r0, [r7, #12]
    c1b4:	60b9      	str	r1, [r7, #8]
    c1b6:	607a      	str	r2, [r7, #4]
    c1b8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1ba:	68fb      	ldr	r3, [r7, #12]
    c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1be:	68fb      	ldr	r3, [r7, #12]
    c1c0:	681b      	ldr	r3, [r3, #0]
    c1c2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c1c4:	f107 0310 	add.w	r3, r7, #16
    c1c8:	2200      	movs	r2, #0
    c1ca:	601a      	str	r2, [r3, #0]
    c1cc:	605a      	str	r2, [r3, #4]
    c1ce:	609a      	str	r2, [r3, #8]
    c1d0:	60da      	str	r2, [r3, #12]
    c1d2:	611a      	str	r2, [r3, #16]
    c1d4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1d8:	7b1b      	ldrb	r3, [r3, #12]
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d001      	beq.n	c1e2 <n25q256a_read+0x36>
    c1de:	2206      	movs	r2, #6
    c1e0:	e000      	b.n	c1e4 <n25q256a_read+0x38>
    c1e2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c1e4:	7c3b      	ldrb	r3, [r7, #16]
    c1e6:	f362 0302 	bfi	r3, r2, #0, #3
    c1ea:	743b      	strb	r3, [r7, #16]
    c1ec:	7c3b      	ldrb	r3, [r7, #16]
    c1ee:	f043 0310 	orr.w	r3, r3, #16
    c1f2:	743b      	strb	r3, [r7, #16]
    c1f4:	7c3b      	ldrb	r3, [r7, #16]
    c1f6:	f043 0320 	orr.w	r3, r3, #32
    c1fa:	743b      	strb	r3, [r7, #16]
    c1fc:	7c3b      	ldrb	r3, [r7, #16]
    c1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c202:	743b      	strb	r3, [r7, #16]
    c204:	7c7b      	ldrb	r3, [r7, #17]
    c206:	2201      	movs	r2, #1
    c208:	f362 1305 	bfi	r3, r2, #4, #2
    c20c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c210:	7b1b      	ldrb	r3, [r3, #12]
    c212:	2b00      	cmp	r3, #0
    c214:	d001      	beq.n	c21a <n25q256a_read+0x6e>
    c216:	220a      	movs	r2, #10
    c218:	e000      	b.n	c21c <n25q256a_read+0x70>
    c21a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c21c:	7cbb      	ldrb	r3, [r7, #18]
    c21e:	f362 0304 	bfi	r3, r2, #0, #5
    c222:	74bb      	strb	r3, [r7, #18]
    c224:	230b      	movs	r3, #11
    c226:	753b      	strb	r3, [r7, #20]
    c228:	687b      	ldr	r3, [r7, #4]
    c22a:	61bb      	str	r3, [r7, #24]
    c22c:	683b      	ldr	r3, [r7, #0]
    c22e:	61fb      	str	r3, [r7, #28]
    c230:	68bb      	ldr	r3, [r7, #8]
    c232:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c234:	f107 0310 	add.w	r3, r7, #16
    c238:	4619      	mov	r1, r3
    c23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c23c:	4b03      	ldr	r3, [pc, #12]	; (c24c <n25q256a_read+0xa0>)
    c23e:	4798      	blx	r3
	return ERR_NONE;
    c240:	2300      	movs	r3, #0
}
    c242:	4618      	mov	r0, r3
    c244:	3730      	adds	r7, #48	; 0x30
    c246:	46bd      	mov	sp, r7
    c248:	bd80      	pop	{r7, pc}
    c24a:	bf00      	nop
    c24c:	00003015 	.word	0x00003015

0000c250 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c250:	b580      	push	{r7, lr}
    c252:	b08c      	sub	sp, #48	; 0x30
    c254:	af00      	add	r7, sp, #0
    c256:	60f8      	str	r0, [r7, #12]
    c258:	60b9      	str	r1, [r7, #8]
    c25a:	607a      	str	r2, [r7, #4]
    c25c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c25e:	68fb      	ldr	r3, [r7, #12]
    c260:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c262:	68fb      	ldr	r3, [r7, #12]
    c264:	681b      	ldr	r3, [r3, #0]
    c266:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c268:	f107 0310 	add.w	r3, r7, #16
    c26c:	2200      	movs	r2, #0
    c26e:	601a      	str	r2, [r3, #0]
    c270:	605a      	str	r2, [r3, #4]
    c272:	609a      	str	r2, [r3, #8]
    c274:	60da      	str	r2, [r3, #12]
    c276:	611a      	str	r2, [r3, #16]
    c278:	615a      	str	r2, [r3, #20]
    c27a:	7c3b      	ldrb	r3, [r7, #16]
    c27c:	f043 0310 	orr.w	r3, r3, #16
    c280:	743b      	strb	r3, [r7, #16]
    c282:	7c3b      	ldrb	r3, [r7, #16]
    c284:	f043 0320 	orr.w	r3, r3, #32
    c288:	743b      	strb	r3, [r7, #16]
    c28a:	7c3b      	ldrb	r3, [r7, #16]
    c28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c290:	743b      	strb	r3, [r7, #16]
    c292:	7c7b      	ldrb	r3, [r7, #17]
    c294:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c298:	747b      	strb	r3, [r7, #17]
    c29a:	2302      	movs	r3, #2
    c29c:	753b      	strb	r3, [r7, #20]
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	61bb      	str	r3, [r7, #24]
    c2a2:	683b      	ldr	r3, [r7, #0]
    c2a4:	61fb      	str	r3, [r7, #28]
    c2a6:	68bb      	ldr	r3, [r7, #8]
    c2a8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2ac:	7b1b      	ldrb	r3, [r3, #12]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d001      	beq.n	c2b6 <n25q256a_write+0x66>
    c2b2:	2206      	movs	r2, #6
    c2b4:	e000      	b.n	c2b8 <n25q256a_write+0x68>
    c2b6:	2200      	movs	r2, #0
    c2b8:	7c3b      	ldrb	r3, [r7, #16]
    c2ba:	f362 0302 	bfi	r3, r2, #0, #3
    c2be:	743b      	strb	r3, [r7, #16]
	while (length) {
    c2c0:	e035      	b.n	c32e <n25q256a_write+0xde>
		cmd.address = address;
    c2c2:	687b      	ldr	r3, [r7, #4]
    c2c4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c2c6:	683b      	ldr	r3, [r7, #0]
    c2c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c2cc:	d802      	bhi.n	c2d4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c2ce:	683b      	ldr	r3, [r7, #0]
    c2d0:	61fb      	str	r3, [r7, #28]
    c2d2:	e002      	b.n	c2da <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c2d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    c2d8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c2da:	7c3b      	ldrb	r3, [r7, #16]
    c2dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c2e0:	b2db      	uxtb	r3, r3
    c2e2:	2201      	movs	r2, #1
    c2e4:	4619      	mov	r1, r3
    c2e6:	68f8      	ldr	r0, [r7, #12]
    c2e8:	4b19      	ldr	r3, [pc, #100]	; (c350 <n25q256a_write+0x100>)
    c2ea:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c2ec:	f107 0310 	add.w	r3, r7, #16
    c2f0:	4619      	mov	r1, r3
    c2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c2f4:	4b17      	ldr	r3, [pc, #92]	; (c354 <n25q256a_write+0x104>)
    c2f6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c2f8:	bf00      	nop
    c2fa:	7c3b      	ldrb	r3, [r7, #16]
    c2fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c300:	b2db      	uxtb	r3, r3
    c302:	2270      	movs	r2, #112	; 0x70
    c304:	4619      	mov	r1, r3
    c306:	68f8      	ldr	r0, [r7, #12]
    c308:	4b13      	ldr	r3, [pc, #76]	; (c358 <n25q256a_write+0x108>)
    c30a:	4798      	blx	r3
    c30c:	4603      	mov	r3, r0
    c30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c312:	2b00      	cmp	r3, #0
    c314:	d0f1      	beq.n	c2fa <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c316:	6a3a      	ldr	r2, [r7, #32]
    c318:	69fb      	ldr	r3, [r7, #28]
    c31a:	4413      	add	r3, r2
    c31c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c31e:	69fb      	ldr	r3, [r7, #28]
    c320:	683a      	ldr	r2, [r7, #0]
    c322:	1ad3      	subs	r3, r2, r3
    c324:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c326:	69fb      	ldr	r3, [r7, #28]
    c328:	687a      	ldr	r2, [r7, #4]
    c32a:	4413      	add	r3, r2
    c32c:	607b      	str	r3, [r7, #4]
	while (length) {
    c32e:	683b      	ldr	r3, [r7, #0]
    c330:	2b00      	cmp	r3, #0
    c332:	d1c6      	bne.n	c2c2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c336:	7b5b      	ldrb	r3, [r3, #13]
    c338:	2b00      	cmp	r3, #0
    c33a:	d003      	beq.n	c344 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c33c:	2101      	movs	r1, #1
    c33e:	68f8      	ldr	r0, [r7, #12]
    c340:	4b06      	ldr	r3, [pc, #24]	; (c35c <n25q256a_write+0x10c>)
    c342:	4798      	blx	r3
	}
	return ERR_NONE;
    c344:	2300      	movs	r3, #0
}
    c346:	4618      	mov	r0, r3
    c348:	3730      	adds	r7, #48	; 0x30
    c34a:	46bd      	mov	sp, r7
    c34c:	bd80      	pop	{r7, pc}
    c34e:	bf00      	nop
    c350:	0000bfc1 	.word	0x0000bfc1
    c354:	00003015 	.word	0x00003015
    c358:	0000be85 	.word	0x0000be85
    c35c:	0000bdb9 	.word	0x0000bdb9

0000c360 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c360:	b580      	push	{r7, lr}
    c362:	b090      	sub	sp, #64	; 0x40
    c364:	af00      	add	r7, sp, #0
    c366:	60f8      	str	r0, [r7, #12]
    c368:	60b9      	str	r1, [r7, #8]
    c36a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c36c:	68fb      	ldr	r3, [r7, #12]
    c36e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c370:	68fb      	ldr	r3, [r7, #12]
    c372:	681b      	ldr	r3, [r3, #0]
    c374:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c376:	f107 0314 	add.w	r3, r7, #20
    c37a:	2200      	movs	r2, #0
    c37c:	601a      	str	r2, [r3, #0]
    c37e:	605a      	str	r2, [r3, #4]
    c380:	609a      	str	r2, [r3, #8]
    c382:	60da      	str	r2, [r3, #12]
    c384:	611a      	str	r2, [r3, #16]
    c386:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c38a:	7b1b      	ldrb	r3, [r3, #12]
    c38c:	2b00      	cmp	r3, #0
    c38e:	d001      	beq.n	c394 <n25q256a_erase+0x34>
    c390:	2206      	movs	r2, #6
    c392:	e000      	b.n	c396 <n25q256a_erase+0x36>
    c394:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c396:	7d3b      	ldrb	r3, [r7, #20]
    c398:	f362 0302 	bfi	r3, r2, #0, #3
    c39c:	753b      	strb	r3, [r7, #20]
    c39e:	7d3b      	ldrb	r3, [r7, #20]
    c3a0:	f043 0310 	orr.w	r3, r3, #16
    c3a4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c3a6:	687b      	ldr	r3, [r7, #4]
    c3a8:	4a56      	ldr	r2, [pc, #344]	; (c504 <n25q256a_erase+0x1a4>)
    c3aa:	4293      	cmp	r3, r2
    c3ac:	bf94      	ite	ls
    c3ae:	2301      	movls	r3, #1
    c3b0:	2300      	movhi	r3, #0
    c3b2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c3b4:	7d3b      	ldrb	r3, [r7, #20]
    c3b6:	f362 1345 	bfi	r3, r2, #5, #1
    c3ba:	753b      	strb	r3, [r7, #20]
    c3bc:	7d7b      	ldrb	r3, [r7, #21]
    c3be:	2202      	movs	r2, #2
    c3c0:	f362 1305 	bfi	r3, r2, #4, #2
    c3c4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c3c6:	68bb      	ldr	r3, [r7, #8]
    c3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c3ca:	687b      	ldr	r3, [r7, #4]
    c3cc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c3ce:	2300      	movs	r3, #0
    c3d0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c3d2:	687b      	ldr	r3, [r7, #4]
    c3d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d104      	bne.n	c3e6 <n25q256a_erase+0x86>
    c3dc:	68bb      	ldr	r3, [r7, #8]
    c3de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d002      	beq.n	c3ec <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c3e6:	f06f 030c 	mvn.w	r3, #12
    c3ea:	e087      	b.n	c4fc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c3ec:	687b      	ldr	r3, [r7, #4]
    c3ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c3f2:	d368      	bcc.n	c4c6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c3f4:	23c7      	movs	r3, #199	; 0xc7
    c3f6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c3f8:	7d3b      	ldrb	r3, [r7, #20]
    c3fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3fe:	b2db      	uxtb	r3, r3
    c400:	2201      	movs	r2, #1
    c402:	4619      	mov	r1, r3
    c404:	68f8      	ldr	r0, [r7, #12]
    c406:	4b40      	ldr	r3, [pc, #256]	; (c508 <n25q256a_erase+0x1a8>)
    c408:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c40a:	f107 0314 	add.w	r3, r7, #20
    c40e:	4619      	mov	r1, r3
    c410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c412:	4b3e      	ldr	r3, [pc, #248]	; (c50c <n25q256a_erase+0x1ac>)
    c414:	4798      	blx	r3
    c416:	e059      	b.n	c4cc <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c41a:	b29b      	uxth	r3, r3
    c41c:	2b00      	cmp	r3, #0
    c41e:	d11f      	bne.n	c460 <n25q256a_erase+0x100>
    c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c426:	d31b      	bcc.n	c460 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c42a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c42c:	23d8      	movs	r3, #216	; 0xd8
    c42e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c430:	7d3b      	ldrb	r3, [r7, #20]
    c432:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c436:	b2db      	uxtb	r3, r3
    c438:	2201      	movs	r2, #1
    c43a:	4619      	mov	r1, r3
    c43c:	68f8      	ldr	r0, [r7, #12]
    c43e:	4b32      	ldr	r3, [pc, #200]	; (c508 <n25q256a_erase+0x1a8>)
    c440:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c442:	f107 0314 	add.w	r3, r7, #20
    c446:	4619      	mov	r1, r3
    c448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c44a:	4b30      	ldr	r3, [pc, #192]	; (c50c <n25q256a_erase+0x1ac>)
    c44c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c450:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c454:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c458:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c45c:	63bb      	str	r3, [r7, #56]	; 0x38
    c45e:	e023      	b.n	c4a8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c466:	d31b      	bcc.n	c4a0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c46a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c46c:	2320      	movs	r3, #32
    c46e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c470:	7d3b      	ldrb	r3, [r7, #20]
    c472:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c476:	b2db      	uxtb	r3, r3
    c478:	2201      	movs	r2, #1
    c47a:	4619      	mov	r1, r3
    c47c:	68f8      	ldr	r0, [r7, #12]
    c47e:	4b22      	ldr	r3, [pc, #136]	; (c508 <n25q256a_erase+0x1a8>)
    c480:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c482:	f107 0314 	add.w	r3, r7, #20
    c486:	4619      	mov	r1, r3
    c488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c48a:	4b20      	ldr	r3, [pc, #128]	; (c50c <n25q256a_erase+0x1ac>)
    c48c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c494:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c498:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c49c:	63bb      	str	r3, [r7, #56]	; 0x38
    c49e:	e003      	b.n	c4a8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c4a0:	f06f 030c 	mvn.w	r3, #12
    c4a4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c4a6:	e011      	b.n	c4cc <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c4a8:	bf00      	nop
    c4aa:	7d3b      	ldrb	r3, [r7, #20]
    c4ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c4b0:	b2db      	uxtb	r3, r3
    c4b2:	2270      	movs	r2, #112	; 0x70
    c4b4:	4619      	mov	r1, r3
    c4b6:	68f8      	ldr	r0, [r7, #12]
    c4b8:	4b15      	ldr	r3, [pc, #84]	; (c510 <n25q256a_erase+0x1b0>)
    c4ba:	4798      	blx	r3
    c4bc:	4603      	mov	r3, r0
    c4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	d0f1      	beq.n	c4aa <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d1a5      	bne.n	c418 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c4cc:	bf00      	nop
    c4ce:	7d3b      	ldrb	r3, [r7, #20]
    c4d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c4d4:	b2db      	uxtb	r3, r3
    c4d6:	2270      	movs	r2, #112	; 0x70
    c4d8:	4619      	mov	r1, r3
    c4da:	68f8      	ldr	r0, [r7, #12]
    c4dc:	4b0c      	ldr	r3, [pc, #48]	; (c510 <n25q256a_erase+0x1b0>)
    c4de:	4798      	blx	r3
    c4e0:	4603      	mov	r3, r0
    c4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4e6:	2b00      	cmp	r3, #0
    c4e8:	d0f1      	beq.n	c4ce <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4ec:	7b5b      	ldrb	r3, [r3, #13]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d003      	beq.n	c4fa <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c4f2:	2101      	movs	r1, #1
    c4f4:	68f8      	ldr	r0, [r7, #12]
    c4f6:	4b07      	ldr	r3, [pc, #28]	; (c514 <n25q256a_erase+0x1b4>)
    c4f8:	4798      	blx	r3
	}
	return rc;
    c4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c4fc:	4618      	mov	r0, r3
    c4fe:	3740      	adds	r7, #64	; 0x40
    c500:	46bd      	mov	sp, r7
    c502:	bd80      	pop	{r7, pc}
    c504:	001fffff 	.word	0x001fffff
    c508:	0000bfc1 	.word	0x0000bfc1
    c50c:	00003015 	.word	0x00003015
    c510:	0000be85 	.word	0x0000be85
    c514:	0000bdb9 	.word	0x0000bdb9

0000c518 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c518:	b590      	push	{r4, r7, lr}
    c51a:	b085      	sub	sp, #20
    c51c:	af00      	add	r7, sp, #0
    c51e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c524:	68fb      	ldr	r3, [r7, #12]
    c526:	7b1b      	ldrb	r3, [r3, #12]
    c528:	2b00      	cmp	r3, #0
    c52a:	d001      	beq.n	c530 <n25q256a_enable_xip+0x18>
    c52c:	2306      	movs	r3, #6
    c52e:	e000      	b.n	c532 <n25q256a_enable_xip+0x1a>
    c530:	2300      	movs	r3, #0
    c532:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c534:	68fb      	ldr	r3, [r7, #12]
    c536:	7b5b      	ldrb	r3, [r3, #13]
    c538:	2b00      	cmp	r3, #0
    c53a:	d129      	bne.n	c590 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c53c:	7afb      	ldrb	r3, [r7, #11]
    c53e:	2285      	movs	r2, #133	; 0x85
    c540:	4619      	mov	r1, r3
    c542:	6878      	ldr	r0, [r7, #4]
    c544:	4b15      	ldr	r3, [pc, #84]	; (c59c <n25q256a_enable_xip+0x84>)
    c546:	4798      	blx	r3
    c548:	4603      	mov	r3, r0
    c54a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c54c:	7abb      	ldrb	r3, [r7, #10]
    c54e:	f003 0308 	and.w	r3, r3, #8
    c552:	2b00      	cmp	r3, #0
    c554:	d015      	beq.n	c582 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c556:	7abb      	ldrb	r3, [r7, #10]
    c558:	f023 0308 	bic.w	r3, r3, #8
    c55c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c55e:	7abb      	ldrb	r3, [r7, #10]
    c560:	7af9      	ldrb	r1, [r7, #11]
    c562:	2281      	movs	r2, #129	; 0x81
    c564:	6878      	ldr	r0, [r7, #4]
    c566:	4c0e      	ldr	r4, [pc, #56]	; (c5a0 <n25q256a_enable_xip+0x88>)
    c568:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c56a:	bf00      	nop
    c56c:	7afb      	ldrb	r3, [r7, #11]
    c56e:	2270      	movs	r2, #112	; 0x70
    c570:	4619      	mov	r1, r3
    c572:	6878      	ldr	r0, [r7, #4]
    c574:	4b09      	ldr	r3, [pc, #36]	; (c59c <n25q256a_enable_xip+0x84>)
    c576:	4798      	blx	r3
    c578:	4603      	mov	r3, r0
    c57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c57e:	2b00      	cmp	r3, #0
    c580:	d0f4      	beq.n	c56c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c582:	68fb      	ldr	r3, [r7, #12]
    c584:	2201      	movs	r2, #1
    c586:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c588:	2101      	movs	r1, #1
    c58a:	6878      	ldr	r0, [r7, #4]
    c58c:	4b05      	ldr	r3, [pc, #20]	; (c5a4 <n25q256a_enable_xip+0x8c>)
    c58e:	4798      	blx	r3
	}
	return ERR_NONE;
    c590:	2300      	movs	r3, #0
}
    c592:	4618      	mov	r0, r3
    c594:	3714      	adds	r7, #20
    c596:	46bd      	mov	sp, r7
    c598:	bd90      	pop	{r4, r7, pc}
    c59a:	bf00      	nop
    c59c:	0000be85 	.word	0x0000be85
    c5a0:	0000bf21 	.word	0x0000bf21
    c5a4:	0000bdb9 	.word	0x0000bdb9

0000c5a8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c5a8:	b580      	push	{r7, lr}
    c5aa:	b086      	sub	sp, #24
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c5b0:	687b      	ldr	r3, [r7, #4]
    c5b2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	681b      	ldr	r3, [r3, #0]
    c5b8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c5ba:	697b      	ldr	r3, [r7, #20]
    c5bc:	7b1b      	ldrb	r3, [r3, #12]
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d001      	beq.n	c5c6 <n25q256a_disable_xip+0x1e>
    c5c2:	2306      	movs	r3, #6
    c5c4:	e000      	b.n	c5c8 <n25q256a_disable_xip+0x20>
    c5c6:	2300      	movs	r3, #0
    c5c8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c5ca:	2100      	movs	r1, #0
    c5cc:	6878      	ldr	r0, [r7, #4]
    c5ce:	4b15      	ldr	r3, [pc, #84]	; (c624 <n25q256a_disable_xip+0x7c>)
    c5d0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c5d2:	7bfb      	ldrb	r3, [r7, #15]
    c5d4:	2285      	movs	r2, #133	; 0x85
    c5d6:	4619      	mov	r1, r3
    c5d8:	6878      	ldr	r0, [r7, #4]
    c5da:	4b13      	ldr	r3, [pc, #76]	; (c628 <n25q256a_disable_xip+0x80>)
    c5dc:	4798      	blx	r3
    c5de:	4603      	mov	r3, r0
    c5e0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c5e2:	7bbb      	ldrb	r3, [r7, #14]
    c5e4:	f003 0308 	and.w	r3, r3, #8
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d113      	bne.n	c614 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c5ec:	697b      	ldr	r3, [r7, #20]
    c5ee:	689b      	ldr	r3, [r3, #8]
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d00f      	beq.n	c614 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c5f4:	693b      	ldr	r3, [r7, #16]
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c5fa:	6938      	ldr	r0, [r7, #16]
    c5fc:	4b0b      	ldr	r3, [pc, #44]	; (c62c <n25q256a_disable_xip+0x84>)
    c5fe:	4798      	blx	r3
			n25q->pin_exit_xip();
    c600:	697b      	ldr	r3, [r7, #20]
    c602:	689b      	ldr	r3, [r3, #8]
    c604:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c606:	68b9      	ldr	r1, [r7, #8]
    c608:	6938      	ldr	r0, [r7, #16]
    c60a:	4b09      	ldr	r3, [pc, #36]	; (c630 <n25q256a_disable_xip+0x88>)
    c60c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c60e:	6938      	ldr	r0, [r7, #16]
    c610:	4b08      	ldr	r3, [pc, #32]	; (c634 <n25q256a_disable_xip+0x8c>)
    c612:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c614:	697b      	ldr	r3, [r7, #20]
    c616:	2200      	movs	r2, #0
    c618:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c61a:	2300      	movs	r3, #0
}
    c61c:	4618      	mov	r0, r3
    c61e:	3718      	adds	r7, #24
    c620:	46bd      	mov	sp, r7
    c622:	bd80      	pop	{r7, pc}
    c624:	0000bdb9 	.word	0x0000bdb9
    c628:	0000be85 	.word	0x0000be85
    c62c:	00002fd9 	.word	0x00002fd9
    c630:	00002f51 	.word	0x00002f51
    c634:	00002f9d 	.word	0x00002f9d

0000c638 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c638:	b480      	push	{r7}
    c63a:	b085      	sub	sp, #20
    c63c:	af00      	add	r7, sp, #0
    c63e:	60f8      	str	r0, [r7, #12]
    c640:	60b9      	str	r1, [r7, #8]
    c642:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c644:	68fb      	ldr	r3, [r7, #12]
    c646:	68ba      	ldr	r2, [r7, #8]
    c648:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c64a:	68fb      	ldr	r3, [r7, #12]
    c64c:	687a      	ldr	r2, [r7, #4]
    c64e:	605a      	str	r2, [r3, #4]

	return me;
    c650:	68fb      	ldr	r3, [r7, #12]
}
    c652:	4618      	mov	r0, r3
    c654:	3714      	adds	r7, #20
    c656:	46bd      	mov	sp, r7
    c658:	f85d 7b04 	ldr.w	r7, [sp], #4
    c65c:	4770      	bx	lr

0000c65e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c65e:	b480      	push	{r7}
    c660:	b083      	sub	sp, #12
    c662:	af00      	add	r7, sp, #0
    c664:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c666:	687b      	ldr	r3, [r7, #4]
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	b29a      	uxth	r2, r3
    c66c:	687b      	ldr	r3, [r7, #4]
    c66e:	3301      	adds	r3, #1
    c670:	781b      	ldrb	r3, [r3, #0]
    c672:	b29b      	uxth	r3, r3
    c674:	021b      	lsls	r3, r3, #8
    c676:	b29b      	uxth	r3, r3
    c678:	4413      	add	r3, r2
    c67a:	b29b      	uxth	r3, r3
}
    c67c:	4618      	mov	r0, r3
    c67e:	370c      	adds	r7, #12
    c680:	46bd      	mov	sp, r7
    c682:	f85d 7b04 	ldr.w	r7, [sp], #4
    c686:	4770      	bx	lr

0000c688 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c688:	b480      	push	{r7}
    c68a:	b083      	sub	sp, #12
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
	return desc[0];
    c690:	687b      	ldr	r3, [r7, #4]
    c692:	781b      	ldrb	r3, [r3, #0]
}
    c694:	4618      	mov	r0, r3
    c696:	370c      	adds	r7, #12
    c698:	46bd      	mov	sp, r7
    c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c69e:	4770      	bx	lr

0000c6a0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c6a0:	b580      	push	{r7, lr}
    c6a2:	b082      	sub	sp, #8
    c6a4:	af00      	add	r7, sp, #0
    c6a6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c6a8:	6878      	ldr	r0, [r7, #4]
    c6aa:	4b05      	ldr	r3, [pc, #20]	; (c6c0 <usb_desc_next+0x20>)
    c6ac:	4798      	blx	r3
    c6ae:	4603      	mov	r3, r0
    c6b0:	461a      	mov	r2, r3
    c6b2:	687b      	ldr	r3, [r7, #4]
    c6b4:	4413      	add	r3, r2
}
    c6b6:	4618      	mov	r0, r3
    c6b8:	3708      	adds	r7, #8
    c6ba:	46bd      	mov	sp, r7
    c6bc:	bd80      	pop	{r7, pc}
    c6be:	bf00      	nop
    c6c0:	0000c689 	.word	0x0000c689

0000c6c4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c6c4:	b580      	push	{r7, lr}
    c6c6:	b08c      	sub	sp, #48	; 0x30
    c6c8:	af00      	add	r7, sp, #0
    c6ca:	6078      	str	r0, [r7, #4]
    c6cc:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c6ce:	687b      	ldr	r3, [r7, #4]
    c6d0:	689b      	ldr	r3, [r3, #8]
    c6d2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c6d4:	683b      	ldr	r3, [r7, #0]
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c6da:	2300      	movs	r3, #0
    c6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c6e0:	e08f      	b.n	c802 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d102      	bne.n	c6ee <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c6e8:	f06f 0309 	mvn.w	r3, #9
    c6ec:	e092      	b.n	c814 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6f0:	789b      	ldrb	r3, [r3, #2]
    c6f2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6f6:	795b      	ldrb	r3, [r3, #5]
    c6f8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c6fa:	7c7b      	ldrb	r3, [r7, #17]
    c6fc:	2b02      	cmp	r3, #2
    c6fe:	d002      	beq.n	c706 <cdcdf_acm_enable+0x42>
    c700:	7c7b      	ldrb	r3, [r7, #17]
    c702:	2b0a      	cmp	r3, #10
    c704:	d121      	bne.n	c74a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c70a:	6a3a      	ldr	r2, [r7, #32]
    c70c:	5cd2      	ldrb	r2, [r2, r3]
    c70e:	7bbb      	ldrb	r3, [r7, #14]
    c710:	429a      	cmp	r2, r3
    c712:	d102      	bne.n	c71a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c714:	f06f 0311 	mvn.w	r3, #17
    c718:	e07c      	b.n	c814 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c71e:	6a3a      	ldr	r2, [r7, #32]
    c720:	5cd3      	ldrb	r3, [r2, r3]
    c722:	2bff      	cmp	r3, #255	; 0xff
    c724:	d002      	beq.n	c72c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c726:	f06f 031b 	mvn.w	r3, #27
    c72a:	e073      	b.n	c814 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c730:	7bb9      	ldrb	r1, [r7, #14]
    c732:	6a3a      	ldr	r2, [r7, #32]
    c734:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c736:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c738:	683b      	ldr	r3, [r7, #0]
    c73a:	685b      	ldr	r3, [r3, #4]
    c73c:	2205      	movs	r2, #5
    c73e:	4619      	mov	r1, r3
    c740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c742:	4b36      	ldr	r3, [pc, #216]	; (c81c <cdcdf_acm_enable+0x158>)
    c744:	4798      	blx	r3
    c746:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c748:	e047      	b.n	c7da <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c74a:	f06f 0309 	mvn.w	r3, #9
    c74e:	e061      	b.n	c814 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c752:	789b      	ldrb	r3, [r3, #2]
    c754:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c758:	78db      	ldrb	r3, [r3, #3]
    c75a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c75e:	3304      	adds	r3, #4
    c760:	4618      	mov	r0, r3
    c762:	4b2f      	ldr	r3, [pc, #188]	; (c820 <cdcdf_acm_enable+0x15c>)
    c764:	4798      	blx	r3
    c766:	4603      	mov	r3, r0
    c768:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c76a:	7ebb      	ldrb	r3, [r7, #26]
    c76c:	7ef9      	ldrb	r1, [r7, #27]
    c76e:	8bba      	ldrh	r2, [r7, #28]
    c770:	4618      	mov	r0, r3
    c772:	4b2c      	ldr	r3, [pc, #176]	; (c824 <cdcdf_acm_enable+0x160>)
    c774:	4798      	blx	r3
    c776:	4603      	mov	r3, r0
    c778:	2b00      	cmp	r3, #0
    c77a:	d002      	beq.n	c782 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c77c:	f06f 0313 	mvn.w	r3, #19
    c780:	e048      	b.n	c814 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c782:	7ebb      	ldrb	r3, [r7, #26]
    c784:	b25b      	sxtb	r3, r3
    c786:	2b00      	cmp	r3, #0
    c788:	da0f      	bge.n	c7aa <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c78a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c78e:	7eb9      	ldrb	r1, [r7, #26]
    c790:	6a3a      	ldr	r2, [r7, #32]
    c792:	4413      	add	r3, r2
    c794:	460a      	mov	r2, r1
    c796:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c79c:	6a3a      	ldr	r2, [r7, #32]
    c79e:	4413      	add	r3, r2
    c7a0:	789b      	ldrb	r3, [r3, #2]
    c7a2:	4618      	mov	r0, r3
    c7a4:	4b20      	ldr	r3, [pc, #128]	; (c828 <cdcdf_acm_enable+0x164>)
    c7a6:	4798      	blx	r3
    c7a8:	e007      	b.n	c7ba <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c7aa:	7eba      	ldrb	r2, [r7, #26]
    c7ac:	6a3b      	ldr	r3, [r7, #32]
    c7ae:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c7b0:	6a3b      	ldr	r3, [r7, #32]
    c7b2:	791b      	ldrb	r3, [r3, #4]
    c7b4:	4618      	mov	r0, r3
    c7b6:	4b1c      	ldr	r3, [pc, #112]	; (c828 <cdcdf_acm_enable+0x164>)
    c7b8:	4798      	blx	r3
			}
			desc->sod = ep;
    c7ba:	683b      	ldr	r3, [r7, #0]
    c7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c7be:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c7c0:	683b      	ldr	r3, [r7, #0]
    c7c2:	681b      	ldr	r3, [r3, #0]
    c7c4:	4618      	mov	r0, r3
    c7c6:	4b19      	ldr	r3, [pc, #100]	; (c82c <cdcdf_acm_enable+0x168>)
    c7c8:	4798      	blx	r3
    c7ca:	4602      	mov	r2, r0
    c7cc:	683b      	ldr	r3, [r7, #0]
    c7ce:	685b      	ldr	r3, [r3, #4]
    c7d0:	4619      	mov	r1, r3
    c7d2:	4610      	mov	r0, r2
    c7d4:	4b16      	ldr	r3, [pc, #88]	; (c830 <cdcdf_acm_enable+0x16c>)
    c7d6:	4798      	blx	r3
    c7d8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d1b7      	bne.n	c750 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c7e0:	683b      	ldr	r3, [r7, #0]
    c7e2:	681b      	ldr	r3, [r3, #0]
    c7e4:	4618      	mov	r0, r3
    c7e6:	4b11      	ldr	r3, [pc, #68]	; (c82c <cdcdf_acm_enable+0x168>)
    c7e8:	4798      	blx	r3
    c7ea:	683b      	ldr	r3, [r7, #0]
    c7ec:	685b      	ldr	r3, [r3, #4]
    c7ee:	2204      	movs	r2, #4
    c7f0:	4619      	mov	r1, r3
    c7f2:	4b0a      	ldr	r3, [pc, #40]	; (c81c <cdcdf_acm_enable+0x158>)
    c7f4:	4798      	blx	r3
    c7f6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c7fc:	3301      	adds	r3, #1
    c7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c806:	2b01      	cmp	r3, #1
    c808:	f67f af6b 	bls.w	c6e2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c80c:	4b09      	ldr	r3, [pc, #36]	; (c834 <cdcdf_acm_enable+0x170>)
    c80e:	2201      	movs	r2, #1
    c810:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c812:	2300      	movs	r3, #0
}
    c814:	4618      	mov	r0, r3
    c816:	3730      	adds	r7, #48	; 0x30
    c818:	46bd      	mov	sp, r7
    c81a:	bd80      	pop	{r7, pc}
    c81c:	0000da85 	.word	0x0000da85
    c820:	0000c65f 	.word	0x0000c65f
    c824:	00003c89 	.word	0x00003c89
    c828:	00003d75 	.word	0x00003d75
    c82c:	0000c6a1 	.word	0x0000c6a1
    c830:	0000dae1 	.word	0x0000dae1
    c834:	200012e0 	.word	0x200012e0

0000c838 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c838:	b580      	push	{r7, lr}
    c83a:	b088      	sub	sp, #32
    c83c:	af00      	add	r7, sp, #0
    c83e:	6078      	str	r0, [r7, #4]
    c840:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c842:	687b      	ldr	r3, [r7, #4]
    c844:	689b      	ldr	r3, [r3, #8]
    c846:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c848:	683b      	ldr	r3, [r7, #0]
    c84a:	2b00      	cmp	r3, #0
    c84c:	d00c      	beq.n	c868 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c84e:	683b      	ldr	r3, [r7, #0]
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	795b      	ldrb	r3, [r3, #5]
    c854:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c856:	7c7b      	ldrb	r3, [r7, #17]
    c858:	2b02      	cmp	r3, #2
    c85a:	d005      	beq.n	c868 <cdcdf_acm_disable+0x30>
    c85c:	7c7b      	ldrb	r3, [r7, #17]
    c85e:	2b0a      	cmp	r3, #10
    c860:	d002      	beq.n	c868 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c862:	f06f 0309 	mvn.w	r3, #9
    c866:	e035      	b.n	c8d4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c868:	2300      	movs	r3, #0
    c86a:	77fb      	strb	r3, [r7, #31]
    c86c:	e01f      	b.n	c8ae <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c86e:	7ffb      	ldrb	r3, [r7, #31]
    c870:	69ba      	ldr	r2, [r7, #24]
    c872:	5cd3      	ldrb	r3, [r2, r3]
    c874:	2bff      	cmp	r3, #255	; 0xff
    c876:	d016      	beq.n	c8a6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c878:	7ffb      	ldrb	r3, [r7, #31]
    c87a:	69ba      	ldr	r2, [r7, #24]
    c87c:	21ff      	movs	r1, #255	; 0xff
    c87e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c880:	7ffb      	ldrb	r3, [r7, #31]
    c882:	69ba      	ldr	r2, [r7, #24]
    c884:	4413      	add	r3, r2
    c886:	789b      	ldrb	r3, [r3, #2]
    c888:	2bff      	cmp	r3, #255	; 0xff
    c88a:	d00d      	beq.n	c8a8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c88c:	7ffb      	ldrb	r3, [r7, #31]
    c88e:	69ba      	ldr	r2, [r7, #24]
    c890:	4413      	add	r3, r2
    c892:	789b      	ldrb	r3, [r3, #2]
    c894:	4618      	mov	r0, r3
    c896:	4b11      	ldr	r3, [pc, #68]	; (c8dc <cdcdf_acm_disable+0xa4>)
    c898:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c89a:	7ffb      	ldrb	r3, [r7, #31]
    c89c:	69ba      	ldr	r2, [r7, #24]
    c89e:	4413      	add	r3, r2
    c8a0:	22ff      	movs	r2, #255	; 0xff
    c8a2:	709a      	strb	r2, [r3, #2]
    c8a4:	e000      	b.n	c8a8 <cdcdf_acm_disable+0x70>
			continue;
    c8a6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c8a8:	7ffb      	ldrb	r3, [r7, #31]
    c8aa:	3301      	adds	r3, #1
    c8ac:	77fb      	strb	r3, [r7, #31]
    c8ae:	7ffb      	ldrb	r3, [r7, #31]
    c8b0:	2b01      	cmp	r3, #1
    c8b2:	d9dc      	bls.n	c86e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c8b4:	69bb      	ldr	r3, [r7, #24]
    c8b6:	791b      	ldrb	r3, [r3, #4]
    c8b8:	2bff      	cmp	r3, #255	; 0xff
    c8ba:	d007      	beq.n	c8cc <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c8bc:	69bb      	ldr	r3, [r7, #24]
    c8be:	791b      	ldrb	r3, [r3, #4]
    c8c0:	4618      	mov	r0, r3
    c8c2:	4b06      	ldr	r3, [pc, #24]	; (c8dc <cdcdf_acm_disable+0xa4>)
    c8c4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c8c6:	69bb      	ldr	r3, [r7, #24]
    c8c8:	22ff      	movs	r2, #255	; 0xff
    c8ca:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c8cc:	4b04      	ldr	r3, [pc, #16]	; (c8e0 <cdcdf_acm_disable+0xa8>)
    c8ce:	2200      	movs	r2, #0
    c8d0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c8d2:	2300      	movs	r3, #0
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	3720      	adds	r7, #32
    c8d8:	46bd      	mov	sp, r7
    c8da:	bd80      	pop	{r7, pc}
    c8dc:	00003d25 	.word	0x00003d25
    c8e0:	200012e0 	.word	0x200012e0

0000c8e4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c8e4:	b580      	push	{r7, lr}
    c8e6:	b084      	sub	sp, #16
    c8e8:	af00      	add	r7, sp, #0
    c8ea:	60f8      	str	r0, [r7, #12]
    c8ec:	460b      	mov	r3, r1
    c8ee:	607a      	str	r2, [r7, #4]
    c8f0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c8f2:	7afb      	ldrb	r3, [r7, #11]
    c8f4:	2b01      	cmp	r3, #1
    c8f6:	d009      	beq.n	c90c <cdcdf_acm_ctrl+0x28>
    c8f8:	2b02      	cmp	r3, #2
    c8fa:	d00d      	beq.n	c918 <cdcdf_acm_ctrl+0x34>
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d10e      	bne.n	c91e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c900:	6879      	ldr	r1, [r7, #4]
    c902:	68f8      	ldr	r0, [r7, #12]
    c904:	4b09      	ldr	r3, [pc, #36]	; (c92c <cdcdf_acm_ctrl+0x48>)
    c906:	4798      	blx	r3
    c908:	4603      	mov	r3, r0
    c90a:	e00a      	b.n	c922 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c90c:	6879      	ldr	r1, [r7, #4]
    c90e:	68f8      	ldr	r0, [r7, #12]
    c910:	4b07      	ldr	r3, [pc, #28]	; (c930 <cdcdf_acm_ctrl+0x4c>)
    c912:	4798      	blx	r3
    c914:	4603      	mov	r3, r0
    c916:	e004      	b.n	c922 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c918:	f06f 031a 	mvn.w	r3, #26
    c91c:	e001      	b.n	c922 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c91e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c922:	4618      	mov	r0, r3
    c924:	3710      	adds	r7, #16
    c926:	46bd      	mov	sp, r7
    c928:	bd80      	pop	{r7, pc}
    c92a:	bf00      	nop
    c92c:	0000c6c5 	.word	0x0000c6c5
    c930:	0000c839 	.word	0x0000c839

0000c934 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c934:	b590      	push	{r4, r7, lr}
    c936:	b087      	sub	sp, #28
    c938:	af00      	add	r7, sp, #0
    c93a:	4603      	mov	r3, r0
    c93c:	6039      	str	r1, [r7, #0]
    c93e:	71fb      	strb	r3, [r7, #7]
    c940:	4613      	mov	r3, r2
    c942:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c944:	683b      	ldr	r3, [r7, #0]
    c946:	799a      	ldrb	r2, [r3, #6]
    c948:	79db      	ldrb	r3, [r3, #7]
    c94a:	021b      	lsls	r3, r3, #8
    c94c:	4313      	orrs	r3, r2
    c94e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c950:	4b2b      	ldr	r3, [pc, #172]	; (ca00 <cdcdf_acm_set_req+0xcc>)
    c952:	4798      	blx	r3
    c954:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c956:	683b      	ldr	r3, [r7, #0]
    c958:	785b      	ldrb	r3, [r3, #1]
    c95a:	2b20      	cmp	r3, #32
    c95c:	d002      	beq.n	c964 <cdcdf_acm_set_req+0x30>
    c95e:	2b22      	cmp	r3, #34	; 0x22
    c960:	d034      	beq.n	c9cc <cdcdf_acm_set_req+0x98>
    c962:	e046      	b.n	c9f2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c964:	8afb      	ldrh	r3, [r7, #22]
    c966:	2b07      	cmp	r3, #7
    c968:	d002      	beq.n	c970 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c96a:	f04f 33ff 	mov.w	r3, #4294967295
    c96e:	e042      	b.n	c9f6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c970:	79bb      	ldrb	r3, [r7, #6]
    c972:	2b00      	cmp	r3, #0
    c974:	d107      	bne.n	c986 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c976:	8afa      	ldrh	r2, [r7, #22]
    c978:	79f8      	ldrb	r0, [r7, #7]
    c97a:	2300      	movs	r3, #0
    c97c:	6939      	ldr	r1, [r7, #16]
    c97e:	4c21      	ldr	r4, [pc, #132]	; (ca04 <cdcdf_acm_set_req+0xd0>)
    c980:	47a0      	blx	r4
    c982:	4603      	mov	r3, r0
    c984:	e037      	b.n	c9f6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c986:	693a      	ldr	r2, [r7, #16]
    c988:	f107 0308 	add.w	r3, r7, #8
    c98c:	6810      	ldr	r0, [r2, #0]
    c98e:	6018      	str	r0, [r3, #0]
    c990:	8891      	ldrh	r1, [r2, #4]
    c992:	7992      	ldrb	r2, [r2, #6]
    c994:	8099      	strh	r1, [r3, #4]
    c996:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c998:	4b1b      	ldr	r3, [pc, #108]	; (ca08 <cdcdf_acm_set_req+0xd4>)
    c99a:	681b      	ldr	r3, [r3, #0]
    c99c:	2b00      	cmp	r3, #0
    c99e:	d008      	beq.n	c9b2 <cdcdf_acm_set_req+0x7e>
    c9a0:	4b19      	ldr	r3, [pc, #100]	; (ca08 <cdcdf_acm_set_req+0xd4>)
    c9a2:	681b      	ldr	r3, [r3, #0]
    c9a4:	f107 0208 	add.w	r2, r7, #8
    c9a8:	4610      	mov	r0, r2
    c9aa:	4798      	blx	r3
    c9ac:	4603      	mov	r3, r0
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d00a      	beq.n	c9c8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c9b2:	4b16      	ldr	r3, [pc, #88]	; (ca0c <cdcdf_acm_set_req+0xd8>)
    c9b4:	f107 0208 	add.w	r2, r7, #8
    c9b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    c9bc:	6018      	str	r0, [r3, #0]
    c9be:	3304      	adds	r3, #4
    c9c0:	8019      	strh	r1, [r3, #0]
    c9c2:	3302      	adds	r3, #2
    c9c4:	0c0a      	lsrs	r2, r1, #16
    c9c6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c9c8:	2300      	movs	r3, #0
    c9ca:	e014      	b.n	c9f6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c9cc:	2300      	movs	r3, #0
    c9ce:	2200      	movs	r2, #0
    c9d0:	2100      	movs	r1, #0
    c9d2:	2000      	movs	r0, #0
    c9d4:	4c0b      	ldr	r4, [pc, #44]	; (ca04 <cdcdf_acm_set_req+0xd0>)
    c9d6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c9d8:	4b0d      	ldr	r3, [pc, #52]	; (ca10 <cdcdf_acm_set_req+0xdc>)
    c9da:	681b      	ldr	r3, [r3, #0]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d006      	beq.n	c9ee <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c9e0:	4b0b      	ldr	r3, [pc, #44]	; (ca10 <cdcdf_acm_set_req+0xdc>)
    c9e2:	681b      	ldr	r3, [r3, #0]
    c9e4:	683a      	ldr	r2, [r7, #0]
    c9e6:	8852      	ldrh	r2, [r2, #2]
    c9e8:	b292      	uxth	r2, r2
    c9ea:	4610      	mov	r0, r2
    c9ec:	4798      	blx	r3
		}
		return ERR_NONE;
    c9ee:	2300      	movs	r3, #0
    c9f0:	e001      	b.n	c9f6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c9f2:	f06f 030c 	mvn.w	r3, #12
	}
}
    c9f6:	4618      	mov	r0, r3
    c9f8:	371c      	adds	r7, #28
    c9fa:	46bd      	mov	sp, r7
    c9fc:	bd90      	pop	{r4, r7, pc}
    c9fe:	bf00      	nop
    ca00:	0000d981 	.word	0x0000d981
    ca04:	0000d7f5 	.word	0x0000d7f5
    ca08:	200012f4 	.word	0x200012f4
    ca0c:	200012e8 	.word	0x200012e8
    ca10:	200012f0 	.word	0x200012f0

0000ca14 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca14:	b590      	push	{r4, r7, lr}
    ca16:	b085      	sub	sp, #20
    ca18:	af00      	add	r7, sp, #0
    ca1a:	4603      	mov	r3, r0
    ca1c:	6039      	str	r1, [r7, #0]
    ca1e:	71fb      	strb	r3, [r7, #7]
    ca20:	4613      	mov	r3, r2
    ca22:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    ca24:	683b      	ldr	r3, [r7, #0]
    ca26:	799a      	ldrb	r2, [r3, #6]
    ca28:	79db      	ldrb	r3, [r3, #7]
    ca2a:	021b      	lsls	r3, r3, #8
    ca2c:	4313      	orrs	r3, r2
    ca2e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    ca30:	79bb      	ldrb	r3, [r7, #6]
    ca32:	2b01      	cmp	r3, #1
    ca34:	d101      	bne.n	ca3a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    ca36:	2300      	movs	r3, #0
    ca38:	e013      	b.n	ca62 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    ca3a:	683b      	ldr	r3, [r7, #0]
    ca3c:	785b      	ldrb	r3, [r3, #1]
    ca3e:	2b21      	cmp	r3, #33	; 0x21
    ca40:	d10d      	bne.n	ca5e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ca42:	89fb      	ldrh	r3, [r7, #14]
    ca44:	2b07      	cmp	r3, #7
    ca46:	d002      	beq.n	ca4e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    ca48:	f04f 33ff 	mov.w	r3, #4294967295
    ca4c:	e009      	b.n	ca62 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    ca4e:	89fa      	ldrh	r2, [r7, #14]
    ca50:	79f8      	ldrb	r0, [r7, #7]
    ca52:	2300      	movs	r3, #0
    ca54:	4905      	ldr	r1, [pc, #20]	; (ca6c <cdcdf_acm_get_req+0x58>)
    ca56:	4c06      	ldr	r4, [pc, #24]	; (ca70 <cdcdf_acm_get_req+0x5c>)
    ca58:	47a0      	blx	r4
    ca5a:	4603      	mov	r3, r0
    ca5c:	e001      	b.n	ca62 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    ca5e:	f06f 030c 	mvn.w	r3, #12
	}
}
    ca62:	4618      	mov	r0, r3
    ca64:	3714      	adds	r7, #20
    ca66:	46bd      	mov	sp, r7
    ca68:	bd90      	pop	{r4, r7, pc}
    ca6a:	bf00      	nop
    ca6c:	200012e8 	.word	0x200012e8
    ca70:	0000d7f5 	.word	0x0000d7f5

0000ca74 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca74:	b580      	push	{r7, lr}
    ca76:	b082      	sub	sp, #8
    ca78:	af00      	add	r7, sp, #0
    ca7a:	4603      	mov	r3, r0
    ca7c:	6039      	str	r1, [r7, #0]
    ca7e:	71fb      	strb	r3, [r7, #7]
    ca80:	4613      	mov	r3, r2
    ca82:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ca84:	683b      	ldr	r3, [r7, #0]
    ca86:	781b      	ldrb	r3, [r3, #0]
    ca88:	095b      	lsrs	r3, r3, #5
    ca8a:	b2db      	uxtb	r3, r3
    ca8c:	f003 0303 	and.w	r3, r3, #3
    ca90:	2b01      	cmp	r3, #1
    ca92:	d002      	beq.n	ca9a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ca94:	f06f 0309 	mvn.w	r3, #9
    ca98:	e026      	b.n	cae8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ca9a:	683b      	ldr	r3, [r7, #0]
    ca9c:	889b      	ldrh	r3, [r3, #4]
    ca9e:	b29a      	uxth	r2, r3
    caa0:	4b13      	ldr	r3, [pc, #76]	; (caf0 <cdcdf_acm_req+0x7c>)
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	b29b      	uxth	r3, r3
    caa6:	429a      	cmp	r2, r3
    caa8:	d007      	beq.n	caba <cdcdf_acm_req+0x46>
    caaa:	683b      	ldr	r3, [r7, #0]
    caac:	889b      	ldrh	r3, [r3, #4]
    caae:	b29a      	uxth	r2, r3
    cab0:	4b0f      	ldr	r3, [pc, #60]	; (caf0 <cdcdf_acm_req+0x7c>)
    cab2:	785b      	ldrb	r3, [r3, #1]
    cab4:	b29b      	uxth	r3, r3
    cab6:	429a      	cmp	r2, r3
    cab8:	d114      	bne.n	cae4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    caba:	683b      	ldr	r3, [r7, #0]
    cabc:	781b      	ldrb	r3, [r3, #0]
    cabe:	b25b      	sxtb	r3, r3
    cac0:	2b00      	cmp	r3, #0
    cac2:	da07      	bge.n	cad4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    cac4:	79ba      	ldrb	r2, [r7, #6]
    cac6:	79fb      	ldrb	r3, [r7, #7]
    cac8:	6839      	ldr	r1, [r7, #0]
    caca:	4618      	mov	r0, r3
    cacc:	4b09      	ldr	r3, [pc, #36]	; (caf4 <cdcdf_acm_req+0x80>)
    cace:	4798      	blx	r3
    cad0:	4603      	mov	r3, r0
    cad2:	e009      	b.n	cae8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cad4:	79ba      	ldrb	r2, [r7, #6]
    cad6:	79fb      	ldrb	r3, [r7, #7]
    cad8:	6839      	ldr	r1, [r7, #0]
    cada:	4618      	mov	r0, r3
    cadc:	4b06      	ldr	r3, [pc, #24]	; (caf8 <cdcdf_acm_req+0x84>)
    cade:	4798      	blx	r3
    cae0:	4603      	mov	r3, r0
    cae2:	e001      	b.n	cae8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cae4:	f06f 0309 	mvn.w	r3, #9
	}
}
    cae8:	4618      	mov	r0, r3
    caea:	3708      	adds	r7, #8
    caec:	46bd      	mov	sp, r7
    caee:	bd80      	pop	{r7, pc}
    caf0:	200012e0 	.word	0x200012e0
    caf4:	0000ca15 	.word	0x0000ca15
    caf8:	0000c935 	.word	0x0000c935

0000cafc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cafc:	b580      	push	{r7, lr}
    cafe:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cb00:	4b0b      	ldr	r3, [pc, #44]	; (cb30 <cdcdf_acm_init+0x34>)
    cb02:	4798      	blx	r3
    cb04:	4603      	mov	r3, r0
    cb06:	2b01      	cmp	r3, #1
    cb08:	d902      	bls.n	cb10 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cb0a:	f06f 0310 	mvn.w	r3, #16
    cb0e:	e00d      	b.n	cb2c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cb10:	4b08      	ldr	r3, [pc, #32]	; (cb34 <cdcdf_acm_init+0x38>)
    cb12:	4a09      	ldr	r2, [pc, #36]	; (cb38 <cdcdf_acm_init+0x3c>)
    cb14:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cb16:	4b07      	ldr	r3, [pc, #28]	; (cb34 <cdcdf_acm_init+0x38>)
    cb18:	4a08      	ldr	r2, [pc, #32]	; (cb3c <cdcdf_acm_init+0x40>)
    cb1a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cb1c:	4805      	ldr	r0, [pc, #20]	; (cb34 <cdcdf_acm_init+0x38>)
    cb1e:	4b08      	ldr	r3, [pc, #32]	; (cb40 <cdcdf_acm_init+0x44>)
    cb20:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cb22:	4908      	ldr	r1, [pc, #32]	; (cb44 <cdcdf_acm_init+0x48>)
    cb24:	2001      	movs	r0, #1
    cb26:	4b08      	ldr	r3, [pc, #32]	; (cb48 <cdcdf_acm_init+0x4c>)
    cb28:	4798      	blx	r3
	return ERR_NONE;
    cb2a:	2300      	movs	r3, #0
}
    cb2c:	4618      	mov	r0, r3
    cb2e:	bd80      	pop	{r7, pc}
    cb30:	0000d999 	.word	0x0000d999
    cb34:	200012d4 	.word	0x200012d4
    cb38:	0000c8e5 	.word	0x0000c8e5
    cb3c:	200012e0 	.word	0x200012e0
    cb40:	0000d901 	.word	0x0000d901
    cb44:	20000208 	.word	0x20000208
    cb48:	0000d831 	.word	0x0000d831

0000cb4c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cb4c:	b590      	push	{r4, r7, lr}
    cb4e:	b083      	sub	sp, #12
    cb50:	af00      	add	r7, sp, #0
    cb52:	6078      	str	r0, [r7, #4]
    cb54:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cb56:	4b0b      	ldr	r3, [pc, #44]	; (cb84 <cdcdf_acm_read+0x38>)
    cb58:	4798      	blx	r3
    cb5a:	4603      	mov	r3, r0
    cb5c:	f083 0301 	eor.w	r3, r3, #1
    cb60:	b2db      	uxtb	r3, r3
    cb62:	2b00      	cmp	r3, #0
    cb64:	d002      	beq.n	cb6c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cb66:	f06f 0310 	mvn.w	r3, #16
    cb6a:	e007      	b.n	cb7c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cb6c:	4b06      	ldr	r3, [pc, #24]	; (cb88 <cdcdf_acm_read+0x3c>)
    cb6e:	7918      	ldrb	r0, [r3, #4]
    cb70:	2300      	movs	r3, #0
    cb72:	683a      	ldr	r2, [r7, #0]
    cb74:	6879      	ldr	r1, [r7, #4]
    cb76:	4c05      	ldr	r4, [pc, #20]	; (cb8c <cdcdf_acm_read+0x40>)
    cb78:	47a0      	blx	r4
    cb7a:	4603      	mov	r3, r0
}
    cb7c:	4618      	mov	r0, r3
    cb7e:	370c      	adds	r7, #12
    cb80:	46bd      	mov	sp, r7
    cb82:	bd90      	pop	{r4, r7, pc}
    cb84:	0000cc71 	.word	0x0000cc71
    cb88:	200012e0 	.word	0x200012e0
    cb8c:	0000d7f5 	.word	0x0000d7f5

0000cb90 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cb90:	b590      	push	{r4, r7, lr}
    cb92:	b083      	sub	sp, #12
    cb94:	af00      	add	r7, sp, #0
    cb96:	6078      	str	r0, [r7, #4]
    cb98:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cb9a:	4b0b      	ldr	r3, [pc, #44]	; (cbc8 <cdcdf_acm_write+0x38>)
    cb9c:	4798      	blx	r3
    cb9e:	4603      	mov	r3, r0
    cba0:	f083 0301 	eor.w	r3, r3, #1
    cba4:	b2db      	uxtb	r3, r3
    cba6:	2b00      	cmp	r3, #0
    cba8:	d002      	beq.n	cbb0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cbaa:	f06f 0310 	mvn.w	r3, #16
    cbae:	e007      	b.n	cbc0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cbb0:	4b06      	ldr	r3, [pc, #24]	; (cbcc <cdcdf_acm_write+0x3c>)
    cbb2:	78d8      	ldrb	r0, [r3, #3]
    cbb4:	2301      	movs	r3, #1
    cbb6:	683a      	ldr	r2, [r7, #0]
    cbb8:	6879      	ldr	r1, [r7, #4]
    cbba:	4c05      	ldr	r4, [pc, #20]	; (cbd0 <cdcdf_acm_write+0x40>)
    cbbc:	47a0      	blx	r4
    cbbe:	4603      	mov	r3, r0
}
    cbc0:	4618      	mov	r0, r3
    cbc2:	370c      	adds	r7, #12
    cbc4:	46bd      	mov	sp, r7
    cbc6:	bd90      	pop	{r4, r7, pc}
    cbc8:	0000cc71 	.word	0x0000cc71
    cbcc:	200012e0 	.word	0x200012e0
    cbd0:	0000d7f5 	.word	0x0000d7f5

0000cbd4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cbd4:	b580      	push	{r7, lr}
    cbd6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cbd8:	4b05      	ldr	r3, [pc, #20]	; (cbf0 <cdcdf_acm_stop_xfer+0x1c>)
    cbda:	78db      	ldrb	r3, [r3, #3]
    cbdc:	4618      	mov	r0, r3
    cbde:	4b05      	ldr	r3, [pc, #20]	; (cbf4 <cdcdf_acm_stop_xfer+0x20>)
    cbe0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cbe2:	4b03      	ldr	r3, [pc, #12]	; (cbf0 <cdcdf_acm_stop_xfer+0x1c>)
    cbe4:	791b      	ldrb	r3, [r3, #4]
    cbe6:	4618      	mov	r0, r3
    cbe8:	4b02      	ldr	r3, [pc, #8]	; (cbf4 <cdcdf_acm_stop_xfer+0x20>)
    cbea:	4798      	blx	r3
}
    cbec:	bf00      	nop
    cbee:	bd80      	pop	{r7, pc}
    cbf0:	200012e0 	.word	0x200012e0
    cbf4:	00003f4d 	.word	0x00003f4d

0000cbf8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cbf8:	b580      	push	{r7, lr}
    cbfa:	b082      	sub	sp, #8
    cbfc:	af00      	add	r7, sp, #0
    cbfe:	4603      	mov	r3, r0
    cc00:	6039      	str	r1, [r7, #0]
    cc02:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cc04:	79fb      	ldrb	r3, [r7, #7]
    cc06:	2b03      	cmp	r3, #3
    cc08:	d822      	bhi.n	cc50 <cdcdf_acm_register_callback+0x58>
    cc0a:	a201      	add	r2, pc, #4	; (adr r2, cc10 <cdcdf_acm_register_callback+0x18>)
    cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc10:	0000cc21 	.word	0x0000cc21
    cc14:	0000cc31 	.word	0x0000cc31
    cc18:	0000cc41 	.word	0x0000cc41
    cc1c:	0000cc49 	.word	0x0000cc49
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cc20:	4b0f      	ldr	r3, [pc, #60]	; (cc60 <cdcdf_acm_register_callback+0x68>)
    cc22:	791b      	ldrb	r3, [r3, #4]
    cc24:	683a      	ldr	r2, [r7, #0]
    cc26:	2102      	movs	r1, #2
    cc28:	4618      	mov	r0, r3
    cc2a:	4b0e      	ldr	r3, [pc, #56]	; (cc64 <cdcdf_acm_register_callback+0x6c>)
    cc2c:	4798      	blx	r3
		break;
    cc2e:	e012      	b.n	cc56 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cc30:	4b0b      	ldr	r3, [pc, #44]	; (cc60 <cdcdf_acm_register_callback+0x68>)
    cc32:	78db      	ldrb	r3, [r3, #3]
    cc34:	683a      	ldr	r2, [r7, #0]
    cc36:	2102      	movs	r1, #2
    cc38:	4618      	mov	r0, r3
    cc3a:	4b0a      	ldr	r3, [pc, #40]	; (cc64 <cdcdf_acm_register_callback+0x6c>)
    cc3c:	4798      	blx	r3
		break;
    cc3e:	e00a      	b.n	cc56 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cc40:	4a09      	ldr	r2, [pc, #36]	; (cc68 <cdcdf_acm_register_callback+0x70>)
    cc42:	683b      	ldr	r3, [r7, #0]
    cc44:	6013      	str	r3, [r2, #0]
		break;
    cc46:	e006      	b.n	cc56 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cc48:	4a08      	ldr	r2, [pc, #32]	; (cc6c <cdcdf_acm_register_callback+0x74>)
    cc4a:	683b      	ldr	r3, [r7, #0]
    cc4c:	6013      	str	r3, [r2, #0]
		break;
    cc4e:	e002      	b.n	cc56 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cc50:	f06f 030c 	mvn.w	r3, #12
    cc54:	e000      	b.n	cc58 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cc56:	2300      	movs	r3, #0
}
    cc58:	4618      	mov	r0, r3
    cc5a:	3708      	adds	r7, #8
    cc5c:	46bd      	mov	sp, r7
    cc5e:	bd80      	pop	{r7, pc}
    cc60:	200012e0 	.word	0x200012e0
    cc64:	00004079 	.word	0x00004079
    cc68:	200012f4 	.word	0x200012f4
    cc6c:	200012f0 	.word	0x200012f0

0000cc70 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cc70:	b480      	push	{r7}
    cc72:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cc74:	4b03      	ldr	r3, [pc, #12]	; (cc84 <cdcdf_acm_is_enabled+0x14>)
    cc76:	795b      	ldrb	r3, [r3, #5]
}
    cc78:	4618      	mov	r0, r3
    cc7a:	46bd      	mov	sp, r7
    cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc80:	4770      	bx	lr
    cc82:	bf00      	nop
    cc84:	200012e0 	.word	0x200012e0

0000cc88 <usb_get_u16>:
{
    cc88:	b480      	push	{r7}
    cc8a:	b083      	sub	sp, #12
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cc90:	687b      	ldr	r3, [r7, #4]
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	b29a      	uxth	r2, r3
    cc96:	687b      	ldr	r3, [r7, #4]
    cc98:	3301      	adds	r3, #1
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	b29b      	uxth	r3, r3
    cc9e:	021b      	lsls	r3, r3, #8
    cca0:	b29b      	uxth	r3, r3
    cca2:	4413      	add	r3, r2
    cca4:	b29b      	uxth	r3, r3
}
    cca6:	4618      	mov	r0, r3
    cca8:	370c      	adds	r7, #12
    ccaa:	46bd      	mov	sp, r7
    ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccb0:	4770      	bx	lr

0000ccb2 <usb_desc_len>:
{
    ccb2:	b480      	push	{r7}
    ccb4:	b083      	sub	sp, #12
    ccb6:	af00      	add	r7, sp, #0
    ccb8:	6078      	str	r0, [r7, #4]
	return desc[0];
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	781b      	ldrb	r3, [r3, #0]
}
    ccbe:	4618      	mov	r0, r3
    ccc0:	370c      	adds	r7, #12
    ccc2:	46bd      	mov	sp, r7
    ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccc8:	4770      	bx	lr
	...

0000cccc <usb_desc_next>:
{
    cccc:	b580      	push	{r7, lr}
    ccce:	b082      	sub	sp, #8
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ccd4:	6878      	ldr	r0, [r7, #4]
    ccd6:	4b05      	ldr	r3, [pc, #20]	; (ccec <usb_desc_next+0x20>)
    ccd8:	4798      	blx	r3
    ccda:	4603      	mov	r3, r0
    ccdc:	461a      	mov	r2, r3
    ccde:	687b      	ldr	r3, [r7, #4]
    cce0:	4413      	add	r3, r2
}
    cce2:	4618      	mov	r0, r3
    cce4:	3708      	adds	r7, #8
    cce6:	46bd      	mov	sp, r7
    cce8:	bd80      	pop	{r7, pc}
    ccea:	bf00      	nop
    ccec:	0000ccb3 	.word	0x0000ccb3

0000ccf0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ccf0:	b580      	push	{r7, lr}
    ccf2:	b082      	sub	sp, #8
    ccf4:	af00      	add	r7, sp, #0
    ccf6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	3302      	adds	r3, #2
    ccfc:	4618      	mov	r0, r3
    ccfe:	4b03      	ldr	r3, [pc, #12]	; (cd0c <usb_cfg_desc_total_len+0x1c>)
    cd00:	4798      	blx	r3
    cd02:	4603      	mov	r3, r0
}
    cd04:	4618      	mov	r0, r3
    cd06:	3708      	adds	r7, #8
    cd08:	46bd      	mov	sp, r7
    cd0a:	bd80      	pop	{r7, pc}
    cd0c:	0000cc89 	.word	0x0000cc89

0000cd10 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cd10:	b590      	push	{r4, r7, lr}
    cd12:	b085      	sub	sp, #20
    cd14:	af00      	add	r7, sp, #0
    cd16:	4603      	mov	r3, r0
    cd18:	6039      	str	r1, [r7, #0]
    cd1a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cd1c:	2300      	movs	r3, #0
    cd1e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cd20:	683b      	ldr	r3, [r7, #0]
    cd22:	799a      	ldrb	r2, [r3, #6]
    cd24:	79db      	ldrb	r3, [r3, #7]
    cd26:	021b      	lsls	r3, r3, #8
    cd28:	4313      	orrs	r3, r2
    cd2a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cd2c:	897b      	ldrh	r3, [r7, #10]
    cd2e:	2b12      	cmp	r3, #18
    cd30:	d901      	bls.n	cd36 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cd32:	2312      	movs	r3, #18
    cd34:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cd36:	68fb      	ldr	r3, [r7, #12]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d10a      	bne.n	cd52 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cd3c:	4b0f      	ldr	r3, [pc, #60]	; (cd7c <usbdc_get_dev_desc+0x6c>)
    cd3e:	681b      	ldr	r3, [r3, #0]
    cd40:	6818      	ldr	r0, [r3, #0]
    cd42:	4b0e      	ldr	r3, [pc, #56]	; (cd7c <usbdc_get_dev_desc+0x6c>)
    cd44:	681b      	ldr	r3, [r3, #0]
    cd46:	685b      	ldr	r3, [r3, #4]
    cd48:	2201      	movs	r2, #1
    cd4a:	4619      	mov	r1, r3
    cd4c:	4b0c      	ldr	r3, [pc, #48]	; (cd80 <usbdc_get_dev_desc+0x70>)
    cd4e:	4798      	blx	r3
    cd50:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cd52:	68fb      	ldr	r3, [r7, #12]
    cd54:	2b00      	cmp	r3, #0
    cd56:	d101      	bne.n	cd5c <usbdc_get_dev_desc+0x4c>
		return false;
    cd58:	2300      	movs	r3, #0
    cd5a:	e00b      	b.n	cd74 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cd5c:	897a      	ldrh	r2, [r7, #10]
    cd5e:	79f8      	ldrb	r0, [r7, #7]
    cd60:	2300      	movs	r3, #0
    cd62:	68f9      	ldr	r1, [r7, #12]
    cd64:	4c07      	ldr	r4, [pc, #28]	; (cd84 <usbdc_get_dev_desc+0x74>)
    cd66:	47a0      	blx	r4
    cd68:	4603      	mov	r3, r0
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d001      	beq.n	cd72 <usbdc_get_dev_desc+0x62>
		return false;
    cd6e:	2300      	movs	r3, #0
    cd70:	e000      	b.n	cd74 <usbdc_get_dev_desc+0x64>
	}
	return true;
    cd72:	2301      	movs	r3, #1
}
    cd74:	4618      	mov	r0, r3
    cd76:	3714      	adds	r7, #20
    cd78:	46bd      	mov	sp, r7
    cd7a:	bd90      	pop	{r4, r7, pc}
    cd7c:	200012f8 	.word	0x200012f8
    cd80:	0000da85 	.word	0x0000da85
    cd84:	0000d7f5 	.word	0x0000d7f5

0000cd88 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cd88:	b590      	push	{r4, r7, lr}
    cd8a:	b087      	sub	sp, #28
    cd8c:	af00      	add	r7, sp, #0
    cd8e:	4603      	mov	r3, r0
    cd90:	6039      	str	r1, [r7, #0]
    cd92:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cd94:	2300      	movs	r3, #0
    cd96:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cd98:	683b      	ldr	r3, [r7, #0]
    cd9a:	799a      	ldrb	r2, [r3, #6]
    cd9c:	79db      	ldrb	r3, [r3, #7]
    cd9e:	021b      	lsls	r3, r3, #8
    cda0:	4313      	orrs	r3, r2
    cda2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cda4:	683b      	ldr	r3, [r7, #0]
    cda6:	885b      	ldrh	r3, [r3, #2]
    cda8:	b29b      	uxth	r3, r3
    cdaa:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cdac:	8a7a      	ldrh	r2, [r7, #18]
    cdae:	4b1e      	ldr	r3, [pc, #120]	; (ce28 <usbdc_get_cfg_desc+0xa0>)
    cdb0:	7f1b      	ldrb	r3, [r3, #28]
    cdb2:	3b01      	subs	r3, #1
    cdb4:	4013      	ands	r3, r2
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	bf0c      	ite	eq
    cdba:	2301      	moveq	r3, #1
    cdbc:	2300      	movne	r3, #0
    cdbe:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cdc0:	697b      	ldr	r3, [r7, #20]
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d10c      	bne.n	cde0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cdc6:	4b18      	ldr	r3, [pc, #96]	; (ce28 <usbdc_get_cfg_desc+0xa0>)
    cdc8:	681b      	ldr	r3, [r3, #0]
    cdca:	6818      	ldr	r0, [r3, #0]
    cdcc:	4b16      	ldr	r3, [pc, #88]	; (ce28 <usbdc_get_cfg_desc+0xa0>)
    cdce:	681b      	ldr	r3, [r3, #0]
    cdd0:	6859      	ldr	r1, [r3, #4]
    cdd2:	7c3b      	ldrb	r3, [r7, #16]
    cdd4:	3301      	adds	r3, #1
    cdd6:	b2db      	uxtb	r3, r3
    cdd8:	461a      	mov	r2, r3
    cdda:	4b14      	ldr	r3, [pc, #80]	; (ce2c <usbdc_get_cfg_desc+0xa4>)
    cddc:	4798      	blx	r3
    cdde:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cde0:	697b      	ldr	r3, [r7, #20]
    cde2:	2b00      	cmp	r3, #0
    cde4:	d101      	bne.n	cdea <usbdc_get_cfg_desc+0x62>
		return false;
    cde6:	2300      	movs	r3, #0
    cde8:	e019      	b.n	ce1e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cdea:	6978      	ldr	r0, [r7, #20]
    cdec:	4b10      	ldr	r3, [pc, #64]	; (ce30 <usbdc_get_cfg_desc+0xa8>)
    cdee:	4798      	blx	r3
    cdf0:	4603      	mov	r3, r0
    cdf2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cdf4:	8a7a      	ldrh	r2, [r7, #18]
    cdf6:	89fb      	ldrh	r3, [r7, #14]
    cdf8:	429a      	cmp	r2, r3
    cdfa:	d802      	bhi.n	ce02 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cdfc:	2300      	movs	r3, #0
    cdfe:	747b      	strb	r3, [r7, #17]
    ce00:	e001      	b.n	ce06 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    ce02:	89fb      	ldrh	r3, [r7, #14]
    ce04:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ce06:	8a7a      	ldrh	r2, [r7, #18]
    ce08:	7c7b      	ldrb	r3, [r7, #17]
    ce0a:	79f8      	ldrb	r0, [r7, #7]
    ce0c:	6979      	ldr	r1, [r7, #20]
    ce0e:	4c09      	ldr	r4, [pc, #36]	; (ce34 <usbdc_get_cfg_desc+0xac>)
    ce10:	47a0      	blx	r4
    ce12:	4603      	mov	r3, r0
    ce14:	2b00      	cmp	r3, #0
    ce16:	d001      	beq.n	ce1c <usbdc_get_cfg_desc+0x94>
		return false;
    ce18:	2300      	movs	r3, #0
    ce1a:	e000      	b.n	ce1e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ce1c:	2301      	movs	r3, #1
}
    ce1e:	4618      	mov	r0, r3
    ce20:	371c      	adds	r7, #28
    ce22:	46bd      	mov	sp, r7
    ce24:	bd90      	pop	{r4, r7, pc}
    ce26:	bf00      	nop
    ce28:	200012f8 	.word	0x200012f8
    ce2c:	0000db45 	.word	0x0000db45
    ce30:	0000ccf1 	.word	0x0000ccf1
    ce34:	0000d7f5 	.word	0x0000d7f5

0000ce38 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ce38:	b590      	push	{r4, r7, lr}
    ce3a:	b085      	sub	sp, #20
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	4603      	mov	r3, r0
    ce40:	6039      	str	r1, [r7, #0]
    ce42:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    ce44:	683b      	ldr	r3, [r7, #0]
    ce46:	799a      	ldrb	r2, [r3, #6]
    ce48:	79db      	ldrb	r3, [r3, #7]
    ce4a:	021b      	lsls	r3, r3, #8
    ce4c:	4313      	orrs	r3, r2
    ce4e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    ce50:	683b      	ldr	r3, [r7, #0]
    ce52:	885b      	ldrh	r3, [r3, #2]
    ce54:	b29b      	uxth	r3, r3
    ce56:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ce58:	89fa      	ldrh	r2, [r7, #14]
    ce5a:	4b1a      	ldr	r3, [pc, #104]	; (cec4 <usbdc_get_str_desc+0x8c>)
    ce5c:	7f1b      	ldrb	r3, [r3, #28]
    ce5e:	3b01      	subs	r3, #1
    ce60:	4013      	ands	r3, r2
    ce62:	2b00      	cmp	r3, #0
    ce64:	bf0c      	ite	eq
    ce66:	2301      	moveq	r3, #1
    ce68:	2300      	movne	r3, #0
    ce6a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ce6c:	4b15      	ldr	r3, [pc, #84]	; (cec4 <usbdc_get_str_desc+0x8c>)
    ce6e:	681b      	ldr	r3, [r3, #0]
    ce70:	6818      	ldr	r0, [r3, #0]
    ce72:	4b14      	ldr	r3, [pc, #80]	; (cec4 <usbdc_get_str_desc+0x8c>)
    ce74:	681b      	ldr	r3, [r3, #0]
    ce76:	685b      	ldr	r3, [r3, #4]
    ce78:	7b3a      	ldrb	r2, [r7, #12]
    ce7a:	4619      	mov	r1, r3
    ce7c:	4b12      	ldr	r3, [pc, #72]	; (cec8 <usbdc_get_str_desc+0x90>)
    ce7e:	4798      	blx	r3
    ce80:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    ce82:	68bb      	ldr	r3, [r7, #8]
    ce84:	2b00      	cmp	r3, #0
    ce86:	d101      	bne.n	ce8c <usbdc_get_str_desc+0x54>
		return false;
    ce88:	2300      	movs	r3, #0
    ce8a:	e017      	b.n	cebc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    ce8c:	68bb      	ldr	r3, [r7, #8]
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	b29b      	uxth	r3, r3
    ce92:	89fa      	ldrh	r2, [r7, #14]
    ce94:	429a      	cmp	r2, r3
    ce96:	d802      	bhi.n	ce9e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    ce98:	2300      	movs	r3, #0
    ce9a:	737b      	strb	r3, [r7, #13]
    ce9c:	e002      	b.n	cea4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    ce9e:	68bb      	ldr	r3, [r7, #8]
    cea0:	781b      	ldrb	r3, [r3, #0]
    cea2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cea4:	89fa      	ldrh	r2, [r7, #14]
    cea6:	7b7b      	ldrb	r3, [r7, #13]
    cea8:	79f8      	ldrb	r0, [r7, #7]
    ceaa:	68b9      	ldr	r1, [r7, #8]
    ceac:	4c07      	ldr	r4, [pc, #28]	; (cecc <usbdc_get_str_desc+0x94>)
    ceae:	47a0      	blx	r4
    ceb0:	4603      	mov	r3, r0
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d001      	beq.n	ceba <usbdc_get_str_desc+0x82>
		return false;
    ceb6:	2300      	movs	r3, #0
    ceb8:	e000      	b.n	cebc <usbdc_get_str_desc+0x84>
	}
	return true;
    ceba:	2301      	movs	r3, #1
}
    cebc:	4618      	mov	r0, r3
    cebe:	3714      	adds	r7, #20
    cec0:	46bd      	mov	sp, r7
    cec2:	bd90      	pop	{r4, r7, pc}
    cec4:	200012f8 	.word	0x200012f8
    cec8:	0000dbbd 	.word	0x0000dbbd
    cecc:	0000d7f5 	.word	0x0000d7f5

0000ced0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    ced0:	b580      	push	{r7, lr}
    ced2:	b084      	sub	sp, #16
    ced4:	af00      	add	r7, sp, #0
    ced6:	4603      	mov	r3, r0
    ced8:	6039      	str	r1, [r7, #0]
    ceda:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cedc:	683b      	ldr	r3, [r7, #0]
    cede:	885b      	ldrh	r3, [r3, #2]
    cee0:	b29b      	uxth	r3, r3
    cee2:	0a1b      	lsrs	r3, r3, #8
    cee4:	b29b      	uxth	r3, r3
    cee6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    cee8:	7bfb      	ldrb	r3, [r7, #15]
    ceea:	2b02      	cmp	r3, #2
    ceec:	d00d      	beq.n	cf0a <usbdc_get_desc_req+0x3a>
    ceee:	2b03      	cmp	r3, #3
    cef0:	d012      	beq.n	cf18 <usbdc_get_desc_req+0x48>
    cef2:	2b01      	cmp	r3, #1
    cef4:	d002      	beq.n	cefc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    cef6:	bf00      	nop
	}
	return false;
    cef8:	2300      	movs	r3, #0
    cefa:	e013      	b.n	cf24 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    cefc:	79fb      	ldrb	r3, [r7, #7]
    cefe:	6839      	ldr	r1, [r7, #0]
    cf00:	4618      	mov	r0, r3
    cf02:	4b0a      	ldr	r3, [pc, #40]	; (cf2c <usbdc_get_desc_req+0x5c>)
    cf04:	4798      	blx	r3
    cf06:	4603      	mov	r3, r0
    cf08:	e00c      	b.n	cf24 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    cf0a:	79fb      	ldrb	r3, [r7, #7]
    cf0c:	6839      	ldr	r1, [r7, #0]
    cf0e:	4618      	mov	r0, r3
    cf10:	4b07      	ldr	r3, [pc, #28]	; (cf30 <usbdc_get_desc_req+0x60>)
    cf12:	4798      	blx	r3
    cf14:	4603      	mov	r3, r0
    cf16:	e005      	b.n	cf24 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    cf18:	79fb      	ldrb	r3, [r7, #7]
    cf1a:	6839      	ldr	r1, [r7, #0]
    cf1c:	4618      	mov	r0, r3
    cf1e:	4b05      	ldr	r3, [pc, #20]	; (cf34 <usbdc_get_desc_req+0x64>)
    cf20:	4798      	blx	r3
    cf22:	4603      	mov	r3, r0
}
    cf24:	4618      	mov	r0, r3
    cf26:	3710      	adds	r7, #16
    cf28:	46bd      	mov	sp, r7
    cf2a:	bd80      	pop	{r7, pc}
    cf2c:	0000cd11 	.word	0x0000cd11
    cf30:	0000cd89 	.word	0x0000cd89
    cf34:	0000ce39 	.word	0x0000ce39

0000cf38 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    cf38:	b590      	push	{r4, r7, lr}
    cf3a:	b085      	sub	sp, #20
    cf3c:	af00      	add	r7, sp, #0
    cf3e:	4603      	mov	r3, r0
    cf40:	6039      	str	r1, [r7, #0]
    cf42:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cf44:	683b      	ldr	r3, [r7, #0]
    cf46:	781b      	ldrb	r3, [r3, #0]
    cf48:	f003 031f 	and.w	r3, r3, #31
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	db1b      	blt.n	cf88 <usbdc_get_status_req+0x50>
    cf50:	2b01      	cmp	r3, #1
    cf52:	dd02      	ble.n	cf5a <usbdc_get_status_req+0x22>
    cf54:	2b02      	cmp	r3, #2
    cf56:	d003      	beq.n	cf60 <usbdc_get_status_req+0x28>
    cf58:	e016      	b.n	cf88 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    cf5a:	2300      	movs	r3, #0
    cf5c:	60fb      	str	r3, [r7, #12]
		break;
    cf5e:	e015      	b.n	cf8c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cf60:	683b      	ldr	r3, [r7, #0]
    cf62:	889b      	ldrh	r3, [r3, #4]
    cf64:	b29b      	uxth	r3, r3
    cf66:	b2db      	uxtb	r3, r3
    cf68:	2102      	movs	r1, #2
    cf6a:	4618      	mov	r0, r3
    cf6c:	4b0f      	ldr	r3, [pc, #60]	; (cfac <usbdc_get_status_req+0x74>)
    cf6e:	4798      	blx	r3
    cf70:	4603      	mov	r3, r0
    cf72:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	2b00      	cmp	r3, #0
    cf78:	da01      	bge.n	cf7e <usbdc_get_status_req+0x46>
			return false;
    cf7a:	2300      	movs	r3, #0
    cf7c:	e012      	b.n	cfa4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cf7e:	68fb      	ldr	r3, [r7, #12]
    cf80:	f003 0301 	and.w	r3, r3, #1
    cf84:	60fb      	str	r3, [r7, #12]
		break;
    cf86:	e001      	b.n	cf8c <usbdc_get_status_req+0x54>
	default:
		return false;
    cf88:	2300      	movs	r3, #0
    cf8a:	e00b      	b.n	cfa4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    cf8c:	4b08      	ldr	r3, [pc, #32]	; (cfb0 <usbdc_get_status_req+0x78>)
    cf8e:	695b      	ldr	r3, [r3, #20]
    cf90:	89ba      	ldrh	r2, [r7, #12]
    cf92:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cf94:	4b06      	ldr	r3, [pc, #24]	; (cfb0 <usbdc_get_status_req+0x78>)
    cf96:	6959      	ldr	r1, [r3, #20]
    cf98:	79f8      	ldrb	r0, [r7, #7]
    cf9a:	2300      	movs	r3, #0
    cf9c:	2202      	movs	r2, #2
    cf9e:	4c05      	ldr	r4, [pc, #20]	; (cfb4 <usbdc_get_status_req+0x7c>)
    cfa0:	47a0      	blx	r4
	return true;
    cfa2:	2301      	movs	r3, #1
}
    cfa4:	4618      	mov	r0, r3
    cfa6:	3714      	adds	r7, #20
    cfa8:	46bd      	mov	sp, r7
    cfaa:	bd90      	pop	{r4, r7, pc}
    cfac:	00004025 	.word	0x00004025
    cfb0:	200012f8 	.word	0x200012f8
    cfb4:	0000d7f5 	.word	0x0000d7f5

0000cfb8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cfb8:	b590      	push	{r4, r7, lr}
    cfba:	b085      	sub	sp, #20
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cfc0:	4b1f      	ldr	r3, [pc, #124]	; (d040 <usbdc_get_interface+0x88>)
    cfc2:	691b      	ldr	r3, [r3, #16]
    cfc4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cfc6:	4b1e      	ldr	r3, [pc, #120]	; (d040 <usbdc_get_interface+0x88>)
    cfc8:	7f5b      	ldrb	r3, [r3, #29]
    cfca:	461a      	mov	r2, r3
    cfcc:	687b      	ldr	r3, [r7, #4]
    cfce:	889b      	ldrh	r3, [r3, #4]
    cfd0:	b29b      	uxth	r3, r3
    cfd2:	fa42 f303 	asr.w	r3, r2, r3
    cfd6:	f003 0301 	and.w	r3, r3, #1
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d128      	bne.n	d030 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cfde:	4b18      	ldr	r3, [pc, #96]	; (d040 <usbdc_get_interface+0x88>)
    cfe0:	695b      	ldr	r3, [r3, #20]
    cfe2:	2200      	movs	r2, #0
    cfe4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cfe6:	4b16      	ldr	r3, [pc, #88]	; (d040 <usbdc_get_interface+0x88>)
    cfe8:	6959      	ldr	r1, [r3, #20]
    cfea:	2300      	movs	r3, #0
    cfec:	2201      	movs	r2, #1
    cfee:	2000      	movs	r0, #0
    cff0:	4c14      	ldr	r4, [pc, #80]	; (d044 <usbdc_get_interface+0x8c>)
    cff2:	47a0      	blx	r4
		return true;
    cff4:	2301      	movs	r3, #1
    cff6:	e01f      	b.n	d038 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cff8:	68fb      	ldr	r3, [r7, #12]
    cffa:	685b      	ldr	r3, [r3, #4]
    cffc:	687a      	ldr	r2, [r7, #4]
    cffe:	2102      	movs	r1, #2
    d000:	68f8      	ldr	r0, [r7, #12]
    d002:	4798      	blx	r3
    d004:	60b8      	str	r0, [r7, #8]
    d006:	68bb      	ldr	r3, [r7, #8]
    d008:	2b00      	cmp	r3, #0
    d00a:	da03      	bge.n	d014 <usbdc_get_interface+0x5c>
			func = func->next;
    d00c:	68fb      	ldr	r3, [r7, #12]
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	60fb      	str	r3, [r7, #12]
    d012:	e00d      	b.n	d030 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d014:	4b0a      	ldr	r3, [pc, #40]	; (d040 <usbdc_get_interface+0x88>)
    d016:	695b      	ldr	r3, [r3, #20]
    d018:	68ba      	ldr	r2, [r7, #8]
    d01a:	b2d2      	uxtb	r2, r2
    d01c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d01e:	4b08      	ldr	r3, [pc, #32]	; (d040 <usbdc_get_interface+0x88>)
    d020:	6959      	ldr	r1, [r3, #20]
    d022:	2300      	movs	r3, #0
    d024:	2201      	movs	r2, #1
    d026:	2000      	movs	r0, #0
    d028:	4c06      	ldr	r4, [pc, #24]	; (d044 <usbdc_get_interface+0x8c>)
    d02a:	47a0      	blx	r4
			return true;
    d02c:	2301      	movs	r3, #1
    d02e:	e003      	b.n	d038 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d030:	68fb      	ldr	r3, [r7, #12]
    d032:	2b00      	cmp	r3, #0
    d034:	d1e0      	bne.n	cff8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d036:	2300      	movs	r3, #0
}
    d038:	4618      	mov	r0, r3
    d03a:	3714      	adds	r7, #20
    d03c:	46bd      	mov	sp, r7
    d03e:	bd90      	pop	{r4, r7, pc}
    d040:	200012f8 	.word	0x200012f8
    d044:	0000d7f5 	.word	0x0000d7f5

0000d048 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d048:	b590      	push	{r4, r7, lr}
    d04a:	b083      	sub	sp, #12
    d04c:	af00      	add	r7, sp, #0
    d04e:	4603      	mov	r3, r0
    d050:	6039      	str	r1, [r7, #0]
    d052:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d054:	683b      	ldr	r3, [r7, #0]
    d056:	785b      	ldrb	r3, [r3, #1]
    d058:	2b0a      	cmp	r3, #10
    d05a:	d83a      	bhi.n	d0d2 <usbdc_get_req+0x8a>
    d05c:	a201      	add	r2, pc, #4	; (adr r2, d064 <usbdc_get_req+0x1c>)
    d05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d062:	bf00      	nop
    d064:	0000d0bb 	.word	0x0000d0bb
    d068:	0000d0d3 	.word	0x0000d0d3
    d06c:	0000d0d3 	.word	0x0000d0d3
    d070:	0000d0d3 	.word	0x0000d0d3
    d074:	0000d0d3 	.word	0x0000d0d3
    d078:	0000d0d3 	.word	0x0000d0d3
    d07c:	0000d091 	.word	0x0000d091
    d080:	0000d0d3 	.word	0x0000d0d3
    d084:	0000d09f 	.word	0x0000d09f
    d088:	0000d0d3 	.word	0x0000d0d3
    d08c:	0000d0c9 	.word	0x0000d0c9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d090:	79fb      	ldrb	r3, [r7, #7]
    d092:	6839      	ldr	r1, [r7, #0]
    d094:	4618      	mov	r0, r3
    d096:	4b11      	ldr	r3, [pc, #68]	; (d0dc <usbdc_get_req+0x94>)
    d098:	4798      	blx	r3
    d09a:	4603      	mov	r3, r0
    d09c:	e01a      	b.n	d0d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d09e:	4b10      	ldr	r3, [pc, #64]	; (d0e0 <usbdc_get_req+0x98>)
    d0a0:	695b      	ldr	r3, [r3, #20]
    d0a2:	4a0f      	ldr	r2, [pc, #60]	; (d0e0 <usbdc_get_req+0x98>)
    d0a4:	7ed2      	ldrb	r2, [r2, #27]
    d0a6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d0a8:	4b0d      	ldr	r3, [pc, #52]	; (d0e0 <usbdc_get_req+0x98>)
    d0aa:	6959      	ldr	r1, [r3, #20]
    d0ac:	79f8      	ldrb	r0, [r7, #7]
    d0ae:	2300      	movs	r3, #0
    d0b0:	2201      	movs	r2, #1
    d0b2:	4c0c      	ldr	r4, [pc, #48]	; (d0e4 <usbdc_get_req+0x9c>)
    d0b4:	47a0      	blx	r4
		return true;
    d0b6:	2301      	movs	r3, #1
    d0b8:	e00c      	b.n	d0d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d0ba:	79fb      	ldrb	r3, [r7, #7]
    d0bc:	6839      	ldr	r1, [r7, #0]
    d0be:	4618      	mov	r0, r3
    d0c0:	4b09      	ldr	r3, [pc, #36]	; (d0e8 <usbdc_get_req+0xa0>)
    d0c2:	4798      	blx	r3
    d0c4:	4603      	mov	r3, r0
    d0c6:	e005      	b.n	d0d4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d0c8:	6838      	ldr	r0, [r7, #0]
    d0ca:	4b08      	ldr	r3, [pc, #32]	; (d0ec <usbdc_get_req+0xa4>)
    d0cc:	4798      	blx	r3
    d0ce:	4603      	mov	r3, r0
    d0d0:	e000      	b.n	d0d4 <usbdc_get_req+0x8c>
	default:
		return false;
    d0d2:	2300      	movs	r3, #0
	}
}
    d0d4:	4618      	mov	r0, r3
    d0d6:	370c      	adds	r7, #12
    d0d8:	46bd      	mov	sp, r7
    d0da:	bd90      	pop	{r4, r7, pc}
    d0dc:	0000ced1 	.word	0x0000ced1
    d0e0:	200012f8 	.word	0x200012f8
    d0e4:	0000d7f5 	.word	0x0000d7f5
    d0e8:	0000cf39 	.word	0x0000cf39
    d0ec:	0000cfb9 	.word	0x0000cfb9

0000d0f0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d0f0:	b590      	push	{r4, r7, lr}
    d0f2:	b083      	sub	sp, #12
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	4603      	mov	r3, r0
    d0f8:	6039      	str	r1, [r7, #0]
    d0fa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d0fc:	683b      	ldr	r3, [r7, #0]
    d0fe:	781b      	ldrb	r3, [r3, #0]
    d100:	f003 031f 	and.w	r3, r3, #31
    d104:	2b02      	cmp	r3, #2
    d106:	d116      	bne.n	d136 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d108:	683b      	ldr	r3, [r7, #0]
    d10a:	88db      	ldrh	r3, [r3, #6]
    d10c:	b29b      	uxth	r3, r3
    d10e:	2b00      	cmp	r3, #0
    d110:	d001      	beq.n	d116 <usbdc_clear_ftr_req+0x26>
			return false;
    d112:	2300      	movs	r3, #0
    d114:	e010      	b.n	d138 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d116:	683b      	ldr	r3, [r7, #0]
    d118:	889b      	ldrh	r3, [r3, #4]
    d11a:	b29b      	uxth	r3, r3
    d11c:	b2db      	uxtb	r3, r3
    d11e:	2100      	movs	r1, #0
    d120:	4618      	mov	r0, r3
    d122:	4b07      	ldr	r3, [pc, #28]	; (d140 <usbdc_clear_ftr_req+0x50>)
    d124:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d126:	79f8      	ldrb	r0, [r7, #7]
    d128:	2301      	movs	r3, #1
    d12a:	2200      	movs	r2, #0
    d12c:	2100      	movs	r1, #0
    d12e:	4c05      	ldr	r4, [pc, #20]	; (d144 <usbdc_clear_ftr_req+0x54>)
    d130:	47a0      	blx	r4
		return true;
    d132:	2301      	movs	r3, #1
    d134:	e000      	b.n	d138 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d136:	2300      	movs	r3, #0
	}
}
    d138:	4618      	mov	r0, r3
    d13a:	370c      	adds	r7, #12
    d13c:	46bd      	mov	sp, r7
    d13e:	bd90      	pop	{r4, r7, pc}
    d140:	00004025 	.word	0x00004025
    d144:	0000d7f5 	.word	0x0000d7f5

0000d148 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d148:	b590      	push	{r4, r7, lr}
    d14a:	b083      	sub	sp, #12
    d14c:	af00      	add	r7, sp, #0
    d14e:	4603      	mov	r3, r0
    d150:	6039      	str	r1, [r7, #0]
    d152:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d154:	683b      	ldr	r3, [r7, #0]
    d156:	781b      	ldrb	r3, [r3, #0]
    d158:	f003 031f 	and.w	r3, r3, #31
    d15c:	2b02      	cmp	r3, #2
    d15e:	d116      	bne.n	d18e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d160:	683b      	ldr	r3, [r7, #0]
    d162:	88db      	ldrh	r3, [r3, #6]
    d164:	b29b      	uxth	r3, r3
    d166:	2b00      	cmp	r3, #0
    d168:	d001      	beq.n	d16e <usbdc_set_ftr_req+0x26>
			return false;
    d16a:	2300      	movs	r3, #0
    d16c:	e010      	b.n	d190 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d16e:	683b      	ldr	r3, [r7, #0]
    d170:	889b      	ldrh	r3, [r3, #4]
    d172:	b29b      	uxth	r3, r3
    d174:	b2db      	uxtb	r3, r3
    d176:	2101      	movs	r1, #1
    d178:	4618      	mov	r0, r3
    d17a:	4b07      	ldr	r3, [pc, #28]	; (d198 <usbdc_set_ftr_req+0x50>)
    d17c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d17e:	79f8      	ldrb	r0, [r7, #7]
    d180:	2301      	movs	r3, #1
    d182:	2200      	movs	r2, #0
    d184:	2100      	movs	r1, #0
    d186:	4c05      	ldr	r4, [pc, #20]	; (d19c <usbdc_set_ftr_req+0x54>)
    d188:	47a0      	blx	r4
		return true;
    d18a:	2301      	movs	r3, #1
    d18c:	e000      	b.n	d190 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d18e:	2300      	movs	r3, #0
	}
}
    d190:	4618      	mov	r0, r3
    d192:	370c      	adds	r7, #12
    d194:	46bd      	mov	sp, r7
    d196:	bd90      	pop	{r4, r7, pc}
    d198:	00004025 	.word	0x00004025
    d19c:	0000d7f5 	.word	0x0000d7f5

0000d1a0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d1a0:	b580      	push	{r7, lr}
    d1a2:	b082      	sub	sp, #8
    d1a4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d1a6:	4b0a      	ldr	r3, [pc, #40]	; (d1d0 <usbdc_unconfig+0x30>)
    d1a8:	691b      	ldr	r3, [r3, #16]
    d1aa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d1ac:	e008      	b.n	d1c0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d1ae:	687b      	ldr	r3, [r7, #4]
    d1b0:	685b      	ldr	r3, [r3, #4]
    d1b2:	2200      	movs	r2, #0
    d1b4:	2101      	movs	r1, #1
    d1b6:	6878      	ldr	r0, [r7, #4]
    d1b8:	4798      	blx	r3
		func = func->next;
    d1ba:	687b      	ldr	r3, [r7, #4]
    d1bc:	681b      	ldr	r3, [r3, #0]
    d1be:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d1c0:	687b      	ldr	r3, [r7, #4]
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	d1f3      	bne.n	d1ae <usbdc_unconfig+0xe>
	}
}
    d1c6:	bf00      	nop
    d1c8:	3708      	adds	r7, #8
    d1ca:	46bd      	mov	sp, r7
    d1cc:	bd80      	pop	{r7, pc}
    d1ce:	bf00      	nop
    d1d0:	200012f8 	.word	0x200012f8

0000d1d4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d1d4:	b580      	push	{r7, lr}
    d1d6:	b088      	sub	sp, #32
    d1d8:	af00      	add	r7, sp, #0
    d1da:	4603      	mov	r3, r0
    d1dc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d1de:	2300      	movs	r3, #0
    d1e0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d1e2:	23ff      	movs	r3, #255	; 0xff
    d1e4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d1e6:	79fb      	ldrb	r3, [r7, #7]
    d1e8:	2b00      	cmp	r3, #0
    d1ea:	d103      	bne.n	d1f4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d1ec:	4b2e      	ldr	r3, [pc, #184]	; (d2a8 <usbdc_set_config+0xd4>)
    d1ee:	4798      	blx	r3
		return true;
    d1f0:	2301      	movs	r3, #1
    d1f2:	e055      	b.n	d2a0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d1f4:	69bb      	ldr	r3, [r7, #24]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d10a      	bne.n	d210 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d1fa:	4b2c      	ldr	r3, [pc, #176]	; (d2ac <usbdc_set_config+0xd8>)
    d1fc:	681b      	ldr	r3, [r3, #0]
    d1fe:	6818      	ldr	r0, [r3, #0]
    d200:	4b2a      	ldr	r3, [pc, #168]	; (d2ac <usbdc_set_config+0xd8>)
    d202:	681b      	ldr	r3, [r3, #0]
    d204:	685b      	ldr	r3, [r3, #4]
    d206:	79fa      	ldrb	r2, [r7, #7]
    d208:	4619      	mov	r1, r3
    d20a:	4b29      	ldr	r3, [pc, #164]	; (d2b0 <usbdc_set_config+0xdc>)
    d20c:	4798      	blx	r3
    d20e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d210:	69bb      	ldr	r3, [r7, #24]
    d212:	2b00      	cmp	r3, #0
    d214:	d101      	bne.n	d21a <usbdc_set_config+0x46>
		return false;
    d216:	2300      	movs	r3, #0
    d218:	e042      	b.n	d2a0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d21a:	69b8      	ldr	r0, [r7, #24]
    d21c:	4b25      	ldr	r3, [pc, #148]	; (d2b4 <usbdc_set_config+0xe0>)
    d21e:	4798      	blx	r3
    d220:	4603      	mov	r3, r0
    d222:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d224:	8abb      	ldrh	r3, [r7, #20]
    d226:	69ba      	ldr	r2, [r7, #24]
    d228:	4413      	add	r3, r2
    d22a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d22c:	693b      	ldr	r3, [r7, #16]
    d22e:	2204      	movs	r2, #4
    d230:	4619      	mov	r1, r3
    d232:	69b8      	ldr	r0, [r7, #24]
    d234:	4b20      	ldr	r3, [pc, #128]	; (d2b8 <usbdc_set_config+0xe4>)
    d236:	4798      	blx	r3
    d238:	4603      	mov	r3, r0
    d23a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d23c:	e02c      	b.n	d298 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d23e:	68fb      	ldr	r3, [r7, #12]
    d240:	3302      	adds	r3, #2
    d242:	781b      	ldrb	r3, [r3, #0]
    d244:	7dfa      	ldrb	r2, [r7, #23]
    d246:	429a      	cmp	r2, r3
    d248:	d018      	beq.n	d27c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d24a:	68fb      	ldr	r3, [r7, #12]
    d24c:	789b      	ldrb	r3, [r3, #2]
    d24e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d250:	4b16      	ldr	r3, [pc, #88]	; (d2ac <usbdc_set_config+0xd8>)
    d252:	691b      	ldr	r3, [r3, #16]
    d254:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d256:	e00c      	b.n	d272 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d258:	69fb      	ldr	r3, [r7, #28]
    d25a:	685b      	ldr	r3, [r3, #4]
    d25c:	f107 020c 	add.w	r2, r7, #12
    d260:	2100      	movs	r1, #0
    d262:	69f8      	ldr	r0, [r7, #28]
    d264:	4798      	blx	r3
    d266:	4603      	mov	r3, r0
    d268:	2b00      	cmp	r3, #0
    d26a:	d006      	beq.n	d27a <usbdc_set_config+0xa6>
					func = func->next;
    d26c:	69fb      	ldr	r3, [r7, #28]
    d26e:	681b      	ldr	r3, [r3, #0]
    d270:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d272:	69fb      	ldr	r3, [r7, #28]
    d274:	2b00      	cmp	r3, #0
    d276:	d1ef      	bne.n	d258 <usbdc_set_config+0x84>
    d278:	e000      	b.n	d27c <usbdc_set_config+0xa8>
				} else {
					break;
    d27a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d27c:	68fb      	ldr	r3, [r7, #12]
    d27e:	4618      	mov	r0, r3
    d280:	4b0e      	ldr	r3, [pc, #56]	; (d2bc <usbdc_set_config+0xe8>)
    d282:	4798      	blx	r3
    d284:	4603      	mov	r3, r0
    d286:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d288:	68fb      	ldr	r3, [r7, #12]
    d28a:	6939      	ldr	r1, [r7, #16]
    d28c:	2204      	movs	r2, #4
    d28e:	4618      	mov	r0, r3
    d290:	4b09      	ldr	r3, [pc, #36]	; (d2b8 <usbdc_set_config+0xe4>)
    d292:	4798      	blx	r3
    d294:	4603      	mov	r3, r0
    d296:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d298:	68fb      	ldr	r3, [r7, #12]
    d29a:	2b00      	cmp	r3, #0
    d29c:	d1cf      	bne.n	d23e <usbdc_set_config+0x6a>
	}
	return true;
    d29e:	2301      	movs	r3, #1
}
    d2a0:	4618      	mov	r0, r3
    d2a2:	3720      	adds	r7, #32
    d2a4:	46bd      	mov	sp, r7
    d2a6:	bd80      	pop	{r7, pc}
    d2a8:	0000d1a1 	.word	0x0000d1a1
    d2ac:	200012f8 	.word	0x200012f8
    d2b0:	0000db45 	.word	0x0000db45
    d2b4:	0000ccf1 	.word	0x0000ccf1
    d2b8:	0000da85 	.word	0x0000da85
    d2bc:	0000cccd 	.word	0x0000cccd

0000d2c0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	b082      	sub	sp, #8
    d2c4:	af00      	add	r7, sp, #0
    d2c6:	4603      	mov	r3, r0
    d2c8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d2ca:	79fb      	ldrb	r3, [r7, #7]
    d2cc:	4618      	mov	r0, r3
    d2ce:	4b03      	ldr	r3, [pc, #12]	; (d2dc <usbdc_set_address+0x1c>)
    d2d0:	4798      	blx	r3
}
    d2d2:	bf00      	nop
    d2d4:	3708      	adds	r7, #8
    d2d6:	46bd      	mov	sp, r7
    d2d8:	bd80      	pop	{r7, pc}
    d2da:	bf00      	nop
    d2dc:	00003c41 	.word	0x00003c41

0000d2e0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d2e0:	b590      	push	{r4, r7, lr}
    d2e2:	b087      	sub	sp, #28
    d2e4:	af00      	add	r7, sp, #0
    d2e6:	4603      	mov	r3, r0
    d2e8:	460a      	mov	r2, r1
    d2ea:	80fb      	strh	r3, [r7, #6]
    d2ec:	4613      	mov	r3, r2
    d2ee:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d2f0:	2300      	movs	r3, #0
    d2f2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d2f4:	693b      	ldr	r3, [r7, #16]
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	d10b      	bne.n	d312 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d2fa:	4b43      	ldr	r3, [pc, #268]	; (d408 <usbdc_set_interface+0x128>)
    d2fc:	681b      	ldr	r3, [r3, #0]
    d2fe:	6818      	ldr	r0, [r3, #0]
    d300:	4b41      	ldr	r3, [pc, #260]	; (d408 <usbdc_set_interface+0x128>)
    d302:	681b      	ldr	r3, [r3, #0]
    d304:	6859      	ldr	r1, [r3, #4]
    d306:	4b40      	ldr	r3, [pc, #256]	; (d408 <usbdc_set_interface+0x128>)
    d308:	7edb      	ldrb	r3, [r3, #27]
    d30a:	461a      	mov	r2, r3
    d30c:	4b3f      	ldr	r3, [pc, #252]	; (d40c <usbdc_set_interface+0x12c>)
    d30e:	4798      	blx	r3
    d310:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d312:	693b      	ldr	r3, [r7, #16]
    d314:	2b00      	cmp	r3, #0
    d316:	d101      	bne.n	d31c <usbdc_set_interface+0x3c>
		return false;
    d318:	2300      	movs	r3, #0
    d31a:	e071      	b.n	d400 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d31c:	693b      	ldr	r3, [r7, #16]
    d31e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d320:	6938      	ldr	r0, [r7, #16]
    d322:	4b3b      	ldr	r3, [pc, #236]	; (d410 <usbdc_set_interface+0x130>)
    d324:	4798      	blx	r3
    d326:	4603      	mov	r3, r0
    d328:	461a      	mov	r2, r3
    d32a:	693b      	ldr	r3, [r7, #16]
    d32c:	4413      	add	r3, r2
    d32e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d330:	68bb      	ldr	r3, [r7, #8]
    d332:	68f9      	ldr	r1, [r7, #12]
    d334:	2204      	movs	r2, #4
    d336:	4618      	mov	r0, r3
    d338:	4b36      	ldr	r3, [pc, #216]	; (d414 <usbdc_set_interface+0x134>)
    d33a:	4798      	blx	r3
    d33c:	6138      	str	r0, [r7, #16]
    d33e:	693b      	ldr	r3, [r7, #16]
    d340:	2b00      	cmp	r3, #0
    d342:	d113      	bne.n	d36c <usbdc_set_interface+0x8c>
		return false;
    d344:	2300      	movs	r3, #0
    d346:	e05b      	b.n	d400 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d348:	68bb      	ldr	r3, [r7, #8]
    d34a:	4618      	mov	r0, r3
    d34c:	4b32      	ldr	r3, [pc, #200]	; (d418 <usbdc_set_interface+0x138>)
    d34e:	4798      	blx	r3
    d350:	4603      	mov	r3, r0
    d352:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d354:	68bb      	ldr	r3, [r7, #8]
    d356:	68f9      	ldr	r1, [r7, #12]
    d358:	2204      	movs	r2, #4
    d35a:	4618      	mov	r0, r3
    d35c:	4b2d      	ldr	r3, [pc, #180]	; (d414 <usbdc_set_interface+0x134>)
    d35e:	4798      	blx	r3
    d360:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d362:	693b      	ldr	r3, [r7, #16]
    d364:	2b00      	cmp	r3, #0
    d366:	d101      	bne.n	d36c <usbdc_set_interface+0x8c>
			return false;
    d368:	2300      	movs	r3, #0
    d36a:	e049      	b.n	d400 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d36c:	693b      	ldr	r3, [r7, #16]
    d36e:	3302      	adds	r3, #2
    d370:	781b      	ldrb	r3, [r3, #0]
    d372:	b29b      	uxth	r3, r3
    d374:	88ba      	ldrh	r2, [r7, #4]
    d376:	429a      	cmp	r2, r3
    d378:	d1e6      	bne.n	d348 <usbdc_set_interface+0x68>
    d37a:	693b      	ldr	r3, [r7, #16]
    d37c:	3303      	adds	r3, #3
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	b29b      	uxth	r3, r3
    d382:	88fa      	ldrh	r2, [r7, #6]
    d384:	429a      	cmp	r2, r3
    d386:	d1df      	bne.n	d348 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d388:	693b      	ldr	r3, [r7, #16]
    d38a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d38c:	4b1e      	ldr	r3, [pc, #120]	; (d408 <usbdc_set_interface+0x128>)
    d38e:	691b      	ldr	r3, [r3, #16]
    d390:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d392:	e031      	b.n	d3f8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d394:	697b      	ldr	r3, [r7, #20]
    d396:	685b      	ldr	r3, [r3, #4]
    d398:	f107 0208 	add.w	r2, r7, #8
    d39c:	2101      	movs	r1, #1
    d39e:	6978      	ldr	r0, [r7, #20]
    d3a0:	4798      	blx	r3
    d3a2:	4603      	mov	r3, r0
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d003      	beq.n	d3b0 <usbdc_set_interface+0xd0>
			func = func->next;
    d3a8:	697b      	ldr	r3, [r7, #20]
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	617b      	str	r3, [r7, #20]
    d3ae:	e023      	b.n	d3f8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d3b0:	697b      	ldr	r3, [r7, #20]
    d3b2:	685b      	ldr	r3, [r3, #4]
    d3b4:	f107 0208 	add.w	r2, r7, #8
    d3b8:	2100      	movs	r1, #0
    d3ba:	6978      	ldr	r0, [r7, #20]
    d3bc:	4798      	blx	r3
    d3be:	4603      	mov	r3, r0
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d117      	bne.n	d3f4 <usbdc_set_interface+0x114>
			if (alt_set) {
    d3c4:	88fb      	ldrh	r3, [r7, #6]
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d00c      	beq.n	d3e4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d3ca:	4b0f      	ldr	r3, [pc, #60]	; (d408 <usbdc_set_interface+0x128>)
    d3cc:	7f5b      	ldrb	r3, [r3, #29]
    d3ce:	b25a      	sxtb	r2, r3
    d3d0:	88bb      	ldrh	r3, [r7, #4]
    d3d2:	2101      	movs	r1, #1
    d3d4:	fa01 f303 	lsl.w	r3, r1, r3
    d3d8:	b25b      	sxtb	r3, r3
    d3da:	4313      	orrs	r3, r2
    d3dc:	b25b      	sxtb	r3, r3
    d3de:	b2da      	uxtb	r2, r3
    d3e0:	4b09      	ldr	r3, [pc, #36]	; (d408 <usbdc_set_interface+0x128>)
    d3e2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d3e4:	2300      	movs	r3, #0
    d3e6:	2200      	movs	r2, #0
    d3e8:	2100      	movs	r1, #0
    d3ea:	2000      	movs	r0, #0
    d3ec:	4c0b      	ldr	r4, [pc, #44]	; (d41c <usbdc_set_interface+0x13c>)
    d3ee:	47a0      	blx	r4
			return true;
    d3f0:	2301      	movs	r3, #1
    d3f2:	e005      	b.n	d400 <usbdc_set_interface+0x120>
		} else {
			return false;
    d3f4:	2300      	movs	r3, #0
    d3f6:	e003      	b.n	d400 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d3f8:	697b      	ldr	r3, [r7, #20]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d1ca      	bne.n	d394 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d3fe:	2300      	movs	r3, #0
}
    d400:	4618      	mov	r0, r3
    d402:	371c      	adds	r7, #28
    d404:	46bd      	mov	sp, r7
    d406:	bd90      	pop	{r4, r7, pc}
    d408:	200012f8 	.word	0x200012f8
    d40c:	0000db45 	.word	0x0000db45
    d410:	0000ccf1 	.word	0x0000ccf1
    d414:	0000da85 	.word	0x0000da85
    d418:	0000cccd 	.word	0x0000cccd
    d41c:	0000d7f5 	.word	0x0000d7f5

0000d420 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d420:	b590      	push	{r4, r7, lr}
    d422:	b083      	sub	sp, #12
    d424:	af00      	add	r7, sp, #0
    d426:	4603      	mov	r3, r0
    d428:	6039      	str	r1, [r7, #0]
    d42a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d42c:	683b      	ldr	r3, [r7, #0]
    d42e:	785b      	ldrb	r3, [r3, #1]
    d430:	3b01      	subs	r3, #1
    d432:	2b0a      	cmp	r3, #10
    d434:	d85b      	bhi.n	d4ee <usbdc_set_req+0xce>
    d436:	a201      	add	r2, pc, #4	; (adr r2, d43c <usbdc_set_req+0x1c>)
    d438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d43c:	0000d4bb 	.word	0x0000d4bb
    d440:	0000d4ef 	.word	0x0000d4ef
    d444:	0000d4c9 	.word	0x0000d4c9
    d448:	0000d4ef 	.word	0x0000d4ef
    d44c:	0000d469 	.word	0x0000d469
    d450:	0000d4ef 	.word	0x0000d4ef
    d454:	0000d4ef 	.word	0x0000d4ef
    d458:	0000d4ef 	.word	0x0000d4ef
    d45c:	0000d483 	.word	0x0000d483
    d460:	0000d4ef 	.word	0x0000d4ef
    d464:	0000d4d7 	.word	0x0000d4d7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d468:	79f8      	ldrb	r0, [r7, #7]
    d46a:	2301      	movs	r3, #1
    d46c:	2200      	movs	r2, #0
    d46e:	2100      	movs	r1, #0
    d470:	4c21      	ldr	r4, [pc, #132]	; (d4f8 <usbdc_set_req+0xd8>)
    d472:	47a0      	blx	r4
    d474:	4603      	mov	r3, r0
    d476:	2b00      	cmp	r3, #0
    d478:	bf0c      	ite	eq
    d47a:	2301      	moveq	r3, #1
    d47c:	2300      	movne	r3, #0
    d47e:	b2db      	uxtb	r3, r3
    d480:	e036      	b.n	d4f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d482:	683b      	ldr	r3, [r7, #0]
    d484:	885b      	ldrh	r3, [r3, #2]
    d486:	b29b      	uxth	r3, r3
    d488:	b2db      	uxtb	r3, r3
    d48a:	4618      	mov	r0, r3
    d48c:	4b1b      	ldr	r3, [pc, #108]	; (d4fc <usbdc_set_req+0xdc>)
    d48e:	4798      	blx	r3
    d490:	4603      	mov	r3, r0
    d492:	f083 0301 	eor.w	r3, r3, #1
    d496:	b2db      	uxtb	r3, r3
    d498:	2b00      	cmp	r3, #0
    d49a:	d001      	beq.n	d4a0 <usbdc_set_req+0x80>
			return false;
    d49c:	2300      	movs	r3, #0
    d49e:	e027      	b.n	d4f0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d4a0:	79f8      	ldrb	r0, [r7, #7]
    d4a2:	2301      	movs	r3, #1
    d4a4:	2200      	movs	r2, #0
    d4a6:	2100      	movs	r1, #0
    d4a8:	4c13      	ldr	r4, [pc, #76]	; (d4f8 <usbdc_set_req+0xd8>)
    d4aa:	47a0      	blx	r4
    d4ac:	4603      	mov	r3, r0
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	bf0c      	ite	eq
    d4b2:	2301      	moveq	r3, #1
    d4b4:	2300      	movne	r3, #0
    d4b6:	b2db      	uxtb	r3, r3
    d4b8:	e01a      	b.n	d4f0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d4ba:	79fb      	ldrb	r3, [r7, #7]
    d4bc:	6839      	ldr	r1, [r7, #0]
    d4be:	4618      	mov	r0, r3
    d4c0:	4b0f      	ldr	r3, [pc, #60]	; (d500 <usbdc_set_req+0xe0>)
    d4c2:	4798      	blx	r3
    d4c4:	4603      	mov	r3, r0
    d4c6:	e013      	b.n	d4f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d4c8:	79fb      	ldrb	r3, [r7, #7]
    d4ca:	6839      	ldr	r1, [r7, #0]
    d4cc:	4618      	mov	r0, r3
    d4ce:	4b0d      	ldr	r3, [pc, #52]	; (d504 <usbdc_set_req+0xe4>)
    d4d0:	4798      	blx	r3
    d4d2:	4603      	mov	r3, r0
    d4d4:	e00c      	b.n	d4f0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d4d6:	683b      	ldr	r3, [r7, #0]
    d4d8:	885b      	ldrh	r3, [r3, #2]
    d4da:	b29a      	uxth	r2, r3
    d4dc:	683b      	ldr	r3, [r7, #0]
    d4de:	889b      	ldrh	r3, [r3, #4]
    d4e0:	b29b      	uxth	r3, r3
    d4e2:	4619      	mov	r1, r3
    d4e4:	4610      	mov	r0, r2
    d4e6:	4b08      	ldr	r3, [pc, #32]	; (d508 <usbdc_set_req+0xe8>)
    d4e8:	4798      	blx	r3
    d4ea:	4603      	mov	r3, r0
    d4ec:	e000      	b.n	d4f0 <usbdc_set_req+0xd0>
	default:
		return false;
    d4ee:	2300      	movs	r3, #0
	}
}
    d4f0:	4618      	mov	r0, r3
    d4f2:	370c      	adds	r7, #12
    d4f4:	46bd      	mov	sp, r7
    d4f6:	bd90      	pop	{r4, r7, pc}
    d4f8:	0000d7f5 	.word	0x0000d7f5
    d4fc:	0000d1d5 	.word	0x0000d1d5
    d500:	0000d0f1 	.word	0x0000d0f1
    d504:	0000d149 	.word	0x0000d149
    d508:	0000d2e1 	.word	0x0000d2e1

0000d50c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d50c:	b580      	push	{r7, lr}
    d50e:	b082      	sub	sp, #8
    d510:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d512:	4b0a      	ldr	r3, [pc, #40]	; (d53c <usbdc_sof_notify+0x30>)
    d514:	685b      	ldr	r3, [r3, #4]
    d516:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d518:	e009      	b.n	d52e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d51a:	687b      	ldr	r3, [r7, #4]
    d51c:	685b      	ldr	r3, [r3, #4]
    d51e:	2b00      	cmp	r3, #0
    d520:	d002      	beq.n	d528 <usbdc_sof_notify+0x1c>
			sof->cb();
    d522:	687b      	ldr	r3, [r7, #4]
    d524:	685b      	ldr	r3, [r3, #4]
    d526:	4798      	blx	r3
		}
		sof = sof->next;
    d528:	687b      	ldr	r3, [r7, #4]
    d52a:	681b      	ldr	r3, [r3, #0]
    d52c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	2b00      	cmp	r3, #0
    d532:	d1f2      	bne.n	d51a <usbdc_sof_notify+0xe>
	}
}
    d534:	bf00      	nop
    d536:	3708      	adds	r7, #8
    d538:	46bd      	mov	sp, r7
    d53a:	bd80      	pop	{r7, pc}
    d53c:	200012f8 	.word	0x200012f8

0000d540 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d540:	b580      	push	{r7, lr}
    d542:	b084      	sub	sp, #16
    d544:	af00      	add	r7, sp, #0
    d546:	4603      	mov	r3, r0
    d548:	6039      	str	r1, [r7, #0]
    d54a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d54c:	4b0b      	ldr	r3, [pc, #44]	; (d57c <usbdc_change_notify+0x3c>)
    d54e:	68db      	ldr	r3, [r3, #12]
    d550:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d552:	e00c      	b.n	d56e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d554:	68fb      	ldr	r3, [r7, #12]
    d556:	685b      	ldr	r3, [r3, #4]
    d558:	2b00      	cmp	r3, #0
    d55a:	d005      	beq.n	d568 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d55c:	68fb      	ldr	r3, [r7, #12]
    d55e:	685b      	ldr	r3, [r3, #4]
    d560:	79fa      	ldrb	r2, [r7, #7]
    d562:	6839      	ldr	r1, [r7, #0]
    d564:	4610      	mov	r0, r2
    d566:	4798      	blx	r3
		}
		cg = cg->next;
    d568:	68fb      	ldr	r3, [r7, #12]
    d56a:	681b      	ldr	r3, [r3, #0]
    d56c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d56e:	68fb      	ldr	r3, [r7, #12]
    d570:	2b00      	cmp	r3, #0
    d572:	d1ef      	bne.n	d554 <usbdc_change_notify+0x14>
	}
}
    d574:	bf00      	nop
    d576:	3710      	adds	r7, #16
    d578:	46bd      	mov	sp, r7
    d57a:	bd80      	pop	{r7, pc}
    d57c:	200012f8 	.word	0x200012f8

0000d580 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d580:	b580      	push	{r7, lr}
    d582:	b084      	sub	sp, #16
    d584:	af00      	add	r7, sp, #0
    d586:	4603      	mov	r3, r0
    d588:	6039      	str	r1, [r7, #0]
    d58a:	71fb      	strb	r3, [r7, #7]
    d58c:	4613      	mov	r3, r2
    d58e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d590:	4b12      	ldr	r3, [pc, #72]	; (d5dc <usbdc_request_handler+0x5c>)
    d592:	689b      	ldr	r3, [r3, #8]
    d594:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d596:	e019      	b.n	d5cc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d598:	68fb      	ldr	r3, [r7, #12]
    d59a:	685b      	ldr	r3, [r3, #4]
    d59c:	2b00      	cmp	r3, #0
    d59e:	d012      	beq.n	d5c6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d5a0:	68fb      	ldr	r3, [r7, #12]
    d5a2:	685b      	ldr	r3, [r3, #4]
    d5a4:	79ba      	ldrb	r2, [r7, #6]
    d5a6:	79f8      	ldrb	r0, [r7, #7]
    d5a8:	6839      	ldr	r1, [r7, #0]
    d5aa:	4798      	blx	r3
    d5ac:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d5ae:	68bb      	ldr	r3, [r7, #8]
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d101      	bne.n	d5b8 <usbdc_request_handler+0x38>
				return true;
    d5b4:	2301      	movs	r3, #1
    d5b6:	e00d      	b.n	d5d4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d5b8:	68bb      	ldr	r3, [r7, #8]
    d5ba:	f113 0f0a 	cmn.w	r3, #10
    d5be:	d002      	beq.n	d5c6 <usbdc_request_handler+0x46>
				return -1;
    d5c0:	f04f 33ff 	mov.w	r3, #4294967295
    d5c4:	e006      	b.n	d5d4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d5c6:	68fb      	ldr	r3, [r7, #12]
    d5c8:	681b      	ldr	r3, [r3, #0]
    d5ca:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d5cc:	68fb      	ldr	r3, [r7, #12]
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d1e2      	bne.n	d598 <usbdc_request_handler+0x18>
	}
	return false;
    d5d2:	2300      	movs	r3, #0
}
    d5d4:	4618      	mov	r0, r3
    d5d6:	3710      	adds	r7, #16
    d5d8:	46bd      	mov	sp, r7
    d5da:	bd80      	pop	{r7, pc}
    d5dc:	200012f8 	.word	0x200012f8

0000d5e0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d5e0:	b580      	push	{r7, lr}
    d5e2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d5e4:	4b01      	ldr	r3, [pc, #4]	; (d5ec <usbd_sof_cb+0xc>)
    d5e6:	4798      	blx	r3
}
    d5e8:	bf00      	nop
    d5ea:	bd80      	pop	{r7, pc}
    d5ec:	0000d50d 	.word	0x0000d50d

0000d5f0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d5f0:	b580      	push	{r7, lr}
    d5f2:	b082      	sub	sp, #8
    d5f4:	af00      	add	r7, sp, #0
    d5f6:	4603      	mov	r3, r0
    d5f8:	6039      	str	r1, [r7, #0]
    d5fa:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d5fc:	79fb      	ldrb	r3, [r7, #7]
    d5fe:	2200      	movs	r2, #0
    d600:	6839      	ldr	r1, [r7, #0]
    d602:	4618      	mov	r0, r3
    d604:	4b14      	ldr	r3, [pc, #80]	; (d658 <usbdc_cb_ctl_req+0x68>)
    d606:	4798      	blx	r3
    d608:	4603      	mov	r3, r0
    d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d60e:	d00b      	beq.n	d628 <usbdc_cb_ctl_req+0x38>
    d610:	2b01      	cmp	r3, #1
    d612:	d007      	beq.n	d624 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d614:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d616:	683b      	ldr	r3, [r7, #0]
    d618:	781b      	ldrb	r3, [r3, #0]
    d61a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d61e:	2b00      	cmp	r3, #0
    d620:	d007      	beq.n	d632 <usbdc_cb_ctl_req+0x42>
    d622:	e003      	b.n	d62c <usbdc_cb_ctl_req+0x3c>
		return true;
    d624:	2301      	movs	r3, #1
    d626:	e013      	b.n	d650 <usbdc_cb_ctl_req+0x60>
		return false;
    d628:	2300      	movs	r3, #0
    d62a:	e011      	b.n	d650 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d62c:	2b80      	cmp	r3, #128	; 0x80
    d62e:	d007      	beq.n	d640 <usbdc_cb_ctl_req+0x50>
    d630:	e00d      	b.n	d64e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d632:	79fb      	ldrb	r3, [r7, #7]
    d634:	6839      	ldr	r1, [r7, #0]
    d636:	4618      	mov	r0, r3
    d638:	4b08      	ldr	r3, [pc, #32]	; (d65c <usbdc_cb_ctl_req+0x6c>)
    d63a:	4798      	blx	r3
    d63c:	4603      	mov	r3, r0
    d63e:	e007      	b.n	d650 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d640:	79fb      	ldrb	r3, [r7, #7]
    d642:	6839      	ldr	r1, [r7, #0]
    d644:	4618      	mov	r0, r3
    d646:	4b06      	ldr	r3, [pc, #24]	; (d660 <usbdc_cb_ctl_req+0x70>)
    d648:	4798      	blx	r3
    d64a:	4603      	mov	r3, r0
    d64c:	e000      	b.n	d650 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d64e:	2300      	movs	r3, #0
	}
}
    d650:	4618      	mov	r0, r3
    d652:	3708      	adds	r7, #8
    d654:	46bd      	mov	sp, r7
    d656:	bd80      	pop	{r7, pc}
    d658:	0000d581 	.word	0x0000d581
    d65c:	0000d421 	.word	0x0000d421
    d660:	0000d049 	.word	0x0000d049

0000d664 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d664:	b580      	push	{r7, lr}
    d666:	b082      	sub	sp, #8
    d668:	af00      	add	r7, sp, #0
    d66a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	781b      	ldrb	r3, [r3, #0]
    d670:	2b00      	cmp	r3, #0
    d672:	d135      	bne.n	d6e0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	785b      	ldrb	r3, [r3, #1]
    d678:	2b05      	cmp	r3, #5
    d67a:	d019      	beq.n	d6b0 <usbdc_ctrl_status_end+0x4c>
    d67c:	2b09      	cmp	r3, #9
    d67e:	d000      	beq.n	d682 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d680:	e02f      	b.n	d6e2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d682:	687b      	ldr	r3, [r7, #4]
    d684:	885b      	ldrh	r3, [r3, #2]
    d686:	b29b      	uxth	r3, r3
    d688:	b2da      	uxtb	r2, r3
    d68a:	4b17      	ldr	r3, [pc, #92]	; (d6e8 <usbdc_ctrl_status_end+0x84>)
    d68c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d68e:	687b      	ldr	r3, [r7, #4]
    d690:	885b      	ldrh	r3, [r3, #2]
    d692:	b29b      	uxth	r3, r3
    d694:	2b00      	cmp	r3, #0
    d696:	d001      	beq.n	d69c <usbdc_ctrl_status_end+0x38>
    d698:	2204      	movs	r2, #4
    d69a:	e000      	b.n	d69e <usbdc_ctrl_status_end+0x3a>
    d69c:	2203      	movs	r2, #3
    d69e:	4b12      	ldr	r3, [pc, #72]	; (d6e8 <usbdc_ctrl_status_end+0x84>)
    d6a0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d6a2:	4b11      	ldr	r3, [pc, #68]	; (d6e8 <usbdc_ctrl_status_end+0x84>)
    d6a4:	7e9b      	ldrb	r3, [r3, #26]
    d6a6:	4619      	mov	r1, r3
    d6a8:	2001      	movs	r0, #1
    d6aa:	4b10      	ldr	r3, [pc, #64]	; (d6ec <usbdc_ctrl_status_end+0x88>)
    d6ac:	4798      	blx	r3
		break;
    d6ae:	e018      	b.n	d6e2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d6b0:	687b      	ldr	r3, [r7, #4]
    d6b2:	885b      	ldrh	r3, [r3, #2]
    d6b4:	b29b      	uxth	r3, r3
    d6b6:	b2db      	uxtb	r3, r3
    d6b8:	4618      	mov	r0, r3
    d6ba:	4b0d      	ldr	r3, [pc, #52]	; (d6f0 <usbdc_ctrl_status_end+0x8c>)
    d6bc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d6be:	687b      	ldr	r3, [r7, #4]
    d6c0:	885b      	ldrh	r3, [r3, #2]
    d6c2:	b29b      	uxth	r3, r3
    d6c4:	2b00      	cmp	r3, #0
    d6c6:	d001      	beq.n	d6cc <usbdc_ctrl_status_end+0x68>
    d6c8:	2203      	movs	r2, #3
    d6ca:	e000      	b.n	d6ce <usbdc_ctrl_status_end+0x6a>
    d6cc:	2202      	movs	r2, #2
    d6ce:	4b06      	ldr	r3, [pc, #24]	; (d6e8 <usbdc_ctrl_status_end+0x84>)
    d6d0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d6d2:	4b05      	ldr	r3, [pc, #20]	; (d6e8 <usbdc_ctrl_status_end+0x84>)
    d6d4:	7e9b      	ldrb	r3, [r3, #26]
    d6d6:	4619      	mov	r1, r3
    d6d8:	2001      	movs	r0, #1
    d6da:	4b04      	ldr	r3, [pc, #16]	; (d6ec <usbdc_ctrl_status_end+0x88>)
    d6dc:	4798      	blx	r3
		break;
    d6de:	e000      	b.n	d6e2 <usbdc_ctrl_status_end+0x7e>
		return;
    d6e0:	bf00      	nop
	}
}
    d6e2:	3708      	adds	r7, #8
    d6e4:	46bd      	mov	sp, r7
    d6e6:	bd80      	pop	{r7, pc}
    d6e8:	200012f8 	.word	0x200012f8
    d6ec:	0000d541 	.word	0x0000d541
    d6f0:	0000d2c1 	.word	0x0000d2c1

0000d6f4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d6f4:	b580      	push	{r7, lr}
    d6f6:	b082      	sub	sp, #8
    d6f8:	af00      	add	r7, sp, #0
    d6fa:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d6fc:	2201      	movs	r2, #1
    d6fe:	6879      	ldr	r1, [r7, #4]
    d700:	2000      	movs	r0, #0
    d702:	4b03      	ldr	r3, [pc, #12]	; (d710 <usbdc_ctrl_data_end+0x1c>)
    d704:	4798      	blx	r3
	return false;
    d706:	2300      	movs	r3, #0
}
    d708:	4618      	mov	r0, r3
    d70a:	3708      	adds	r7, #8
    d70c:	46bd      	mov	sp, r7
    d70e:	bd80      	pop	{r7, pc}
    d710:	0000d581 	.word	0x0000d581

0000d714 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d714:	b580      	push	{r7, lr}
    d716:	b082      	sub	sp, #8
    d718:	af00      	add	r7, sp, #0
    d71a:	4603      	mov	r3, r0
    d71c:	603a      	str	r2, [r7, #0]
    d71e:	71fb      	strb	r3, [r7, #7]
    d720:	460b      	mov	r3, r1
    d722:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d724:	79bb      	ldrb	r3, [r7, #6]
    d726:	2b00      	cmp	r3, #0
    d728:	d002      	beq.n	d730 <usbdc_cb_ctl_done+0x1c>
    d72a:	2b01      	cmp	r3, #1
    d72c:	d004      	beq.n	d738 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d72e:	e008      	b.n	d742 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d730:	6838      	ldr	r0, [r7, #0]
    d732:	4b06      	ldr	r3, [pc, #24]	; (d74c <usbdc_cb_ctl_done+0x38>)
    d734:	4798      	blx	r3
		break;
    d736:	e004      	b.n	d742 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d738:	6838      	ldr	r0, [r7, #0]
    d73a:	4b05      	ldr	r3, [pc, #20]	; (d750 <usbdc_cb_ctl_done+0x3c>)
    d73c:	4798      	blx	r3
    d73e:	4603      	mov	r3, r0
    d740:	e000      	b.n	d744 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d742:	2300      	movs	r3, #0
}
    d744:	4618      	mov	r0, r3
    d746:	3708      	adds	r7, #8
    d748:	46bd      	mov	sp, r7
    d74a:	bd80      	pop	{r7, pc}
    d74c:	0000d665 	.word	0x0000d665
    d750:	0000d6f5 	.word	0x0000d6f5

0000d754 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d754:	b580      	push	{r7, lr}
    d756:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d758:	4b10      	ldr	r3, [pc, #64]	; (d79c <usbdc_reset+0x48>)
    d75a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d75c:	4b10      	ldr	r3, [pc, #64]	; (d7a0 <usbdc_reset+0x4c>)
    d75e:	2202      	movs	r2, #2
    d760:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d762:	4b0f      	ldr	r3, [pc, #60]	; (d7a0 <usbdc_reset+0x4c>)
    d764:	2200      	movs	r2, #0
    d766:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d768:	4b0d      	ldr	r3, [pc, #52]	; (d7a0 <usbdc_reset+0x4c>)
    d76a:	2200      	movs	r2, #0
    d76c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d76e:	2000      	movs	r0, #0
    d770:	4b0c      	ldr	r3, [pc, #48]	; (d7a4 <usbdc_reset+0x50>)
    d772:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d774:	4b0a      	ldr	r3, [pc, #40]	; (d7a0 <usbdc_reset+0x4c>)
    d776:	7f1b      	ldrb	r3, [r3, #28]
    d778:	4618      	mov	r0, r3
    d77a:	4b0b      	ldr	r3, [pc, #44]	; (d7a8 <usbdc_reset+0x54>)
    d77c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d77e:	4a0b      	ldr	r2, [pc, #44]	; (d7ac <usbdc_reset+0x58>)
    d780:	2100      	movs	r1, #0
    d782:	2000      	movs	r0, #0
    d784:	4b0a      	ldr	r3, [pc, #40]	; (d7b0 <usbdc_reset+0x5c>)
    d786:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d788:	4a0a      	ldr	r2, [pc, #40]	; (d7b4 <usbdc_reset+0x60>)
    d78a:	2102      	movs	r1, #2
    d78c:	2000      	movs	r0, #0
    d78e:	4b08      	ldr	r3, [pc, #32]	; (d7b0 <usbdc_reset+0x5c>)
    d790:	4798      	blx	r3
	usb_d_ep_enable(0);
    d792:	2000      	movs	r0, #0
    d794:	4b08      	ldr	r3, [pc, #32]	; (d7b8 <usbdc_reset+0x64>)
    d796:	4798      	blx	r3
}
    d798:	bf00      	nop
    d79a:	bd80      	pop	{r7, pc}
    d79c:	0000d1a1 	.word	0x0000d1a1
    d7a0:	200012f8 	.word	0x200012f8
    d7a4:	00003d25 	.word	0x00003d25
    d7a8:	00003c61 	.word	0x00003c61
    d7ac:	0000d5f1 	.word	0x0000d5f1
    d7b0:	00004079 	.word	0x00004079
    d7b4:	0000d715 	.word	0x0000d715
    d7b8:	00003d75 	.word	0x00003d75

0000d7bc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d7bc:	b580      	push	{r7, lr}
    d7be:	b082      	sub	sp, #8
    d7c0:	af00      	add	r7, sp, #0
    d7c2:	4603      	mov	r3, r0
    d7c4:	6039      	str	r1, [r7, #0]
    d7c6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d7c8:	79fb      	ldrb	r3, [r7, #7]
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	d002      	beq.n	d7d4 <usbd_event_cb+0x18>
    d7ce:	2b01      	cmp	r3, #1
    d7d0:	d005      	beq.n	d7de <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d7d2:	e007      	b.n	d7e4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d7d4:	6839      	ldr	r1, [r7, #0]
    d7d6:	2000      	movs	r0, #0
    d7d8:	4b04      	ldr	r3, [pc, #16]	; (d7ec <usbd_event_cb+0x30>)
    d7da:	4798      	blx	r3
		break;
    d7dc:	e002      	b.n	d7e4 <usbd_event_cb+0x28>
		usbdc_reset();
    d7de:	4b04      	ldr	r3, [pc, #16]	; (d7f0 <usbd_event_cb+0x34>)
    d7e0:	4798      	blx	r3
		break;
    d7e2:	bf00      	nop
	}
}
    d7e4:	bf00      	nop
    d7e6:	3708      	adds	r7, #8
    d7e8:	46bd      	mov	sp, r7
    d7ea:	bd80      	pop	{r7, pc}
    d7ec:	0000d541 	.word	0x0000d541
    d7f0:	0000d755 	.word	0x0000d755

0000d7f4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d7f4:	b580      	push	{r7, lr}
    d7f6:	b088      	sub	sp, #32
    d7f8:	af00      	add	r7, sp, #0
    d7fa:	60b9      	str	r1, [r7, #8]
    d7fc:	607a      	str	r2, [r7, #4]
    d7fe:	461a      	mov	r2, r3
    d800:	4603      	mov	r3, r0
    d802:	73fb      	strb	r3, [r7, #15]
    d804:	4613      	mov	r3, r2
    d806:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d808:	68bb      	ldr	r3, [r7, #8]
    d80a:	617b      	str	r3, [r7, #20]
    d80c:	687b      	ldr	r3, [r7, #4]
    d80e:	61bb      	str	r3, [r7, #24]
    d810:	7bfb      	ldrb	r3, [r7, #15]
    d812:	773b      	strb	r3, [r7, #28]
    d814:	7bbb      	ldrb	r3, [r7, #14]
    d816:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d818:	f107 0314 	add.w	r3, r7, #20
    d81c:	4618      	mov	r0, r3
    d81e:	4b03      	ldr	r3, [pc, #12]	; (d82c <usbdc_xfer+0x38>)
    d820:	4798      	blx	r3
    d822:	4603      	mov	r3, r0
}
    d824:	4618      	mov	r0, r3
    d826:	3720      	adds	r7, #32
    d828:	46bd      	mov	sp, r7
    d82a:	bd80      	pop	{r7, pc}
    d82c:	00003de5 	.word	0x00003de5

0000d830 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d830:	b580      	push	{r7, lr}
    d832:	b082      	sub	sp, #8
    d834:	af00      	add	r7, sp, #0
    d836:	4603      	mov	r3, r0
    d838:	6039      	str	r1, [r7, #0]
    d83a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d83c:	79fb      	ldrb	r3, [r7, #7]
    d83e:	2b01      	cmp	r3, #1
    d840:	d009      	beq.n	d856 <usbdc_register_handler+0x26>
    d842:	2b02      	cmp	r3, #2
    d844:	d00c      	beq.n	d860 <usbdc_register_handler+0x30>
    d846:	2b00      	cmp	r3, #0
    d848:	d000      	beq.n	d84c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d84a:	e00e      	b.n	d86a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d84c:	6839      	ldr	r1, [r7, #0]
    d84e:	4809      	ldr	r0, [pc, #36]	; (d874 <usbdc_register_handler+0x44>)
    d850:	4b09      	ldr	r3, [pc, #36]	; (d878 <usbdc_register_handler+0x48>)
    d852:	4798      	blx	r3
		break;
    d854:	e009      	b.n	d86a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d856:	6839      	ldr	r1, [r7, #0]
    d858:	4808      	ldr	r0, [pc, #32]	; (d87c <usbdc_register_handler+0x4c>)
    d85a:	4b07      	ldr	r3, [pc, #28]	; (d878 <usbdc_register_handler+0x48>)
    d85c:	4798      	blx	r3
		break;
    d85e:	e004      	b.n	d86a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d860:	6839      	ldr	r1, [r7, #0]
    d862:	4807      	ldr	r0, [pc, #28]	; (d880 <usbdc_register_handler+0x50>)
    d864:	4b04      	ldr	r3, [pc, #16]	; (d878 <usbdc_register_handler+0x48>)
    d866:	4798      	blx	r3
		break;
    d868:	bf00      	nop
	}
}
    d86a:	bf00      	nop
    d86c:	3708      	adds	r7, #8
    d86e:	46bd      	mov	sp, r7
    d870:	bd80      	pop	{r7, pc}
    d872:	bf00      	nop
    d874:	200012fc 	.word	0x200012fc
    d878:	000041d1 	.word	0x000041d1
    d87c:	20001300 	.word	0x20001300
    d880:	20001304 	.word	0x20001304

0000d884 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d884:	b580      	push	{r7, lr}
    d886:	b084      	sub	sp, #16
    d888:	af00      	add	r7, sp, #0
    d88a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d88c:	687b      	ldr	r3, [r7, #4]
    d88e:	2b00      	cmp	r3, #0
    d890:	bf14      	ite	ne
    d892:	2301      	movne	r3, #1
    d894:	2300      	moveq	r3, #0
    d896:	b2db      	uxtb	r3, r3
    d898:	f240 3255 	movw	r2, #853	; 0x355
    d89c:	4910      	ldr	r1, [pc, #64]	; (d8e0 <usbdc_init+0x5c>)
    d89e:	4618      	mov	r0, r3
    d8a0:	4b10      	ldr	r3, [pc, #64]	; (d8e4 <usbdc_init+0x60>)
    d8a2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d8a4:	4b10      	ldr	r3, [pc, #64]	; (d8e8 <usbdc_init+0x64>)
    d8a6:	4798      	blx	r3
    d8a8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d8aa:	68fb      	ldr	r3, [r7, #12]
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	da01      	bge.n	d8b4 <usbdc_init+0x30>
		return rc;
    d8b0:	68fb      	ldr	r3, [r7, #12]
    d8b2:	e010      	b.n	d8d6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d8b4:	2220      	movs	r2, #32
    d8b6:	2100      	movs	r1, #0
    d8b8:	480c      	ldr	r0, [pc, #48]	; (d8ec <usbdc_init+0x68>)
    d8ba:	4b0d      	ldr	r3, [pc, #52]	; (d8f0 <usbdc_init+0x6c>)
    d8bc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d8be:	4a0b      	ldr	r2, [pc, #44]	; (d8ec <usbdc_init+0x68>)
    d8c0:	687b      	ldr	r3, [r7, #4]
    d8c2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d8c4:	490b      	ldr	r1, [pc, #44]	; (d8f4 <usbdc_init+0x70>)
    d8c6:	2000      	movs	r0, #0
    d8c8:	4b0b      	ldr	r3, [pc, #44]	; (d8f8 <usbdc_init+0x74>)
    d8ca:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d8cc:	490b      	ldr	r1, [pc, #44]	; (d8fc <usbdc_init+0x78>)
    d8ce:	2001      	movs	r0, #1
    d8d0:	4b09      	ldr	r3, [pc, #36]	; (d8f8 <usbdc_init+0x74>)
    d8d2:	4798      	blx	r3

	return 0;
    d8d4:	2300      	movs	r3, #0
}
    d8d6:	4618      	mov	r0, r3
    d8d8:	3710      	adds	r7, #16
    d8da:	46bd      	mov	sp, r7
    d8dc:	bd80      	pop	{r7, pc}
    d8de:	bf00      	nop
    d8e0:	00014340 	.word	0x00014340
    d8e4:	000040f5 	.word	0x000040f5
    d8e8:	00003b4d 	.word	0x00003b4d
    d8ec:	200012f8 	.word	0x200012f8
    d8f0:	00013c79 	.word	0x00013c79
    d8f4:	0000d5e1 	.word	0x0000d5e1
    d8f8:	00003bf9 	.word	0x00003bf9
    d8fc:	0000d7bd 	.word	0x0000d7bd

0000d900 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d900:	b580      	push	{r7, lr}
    d902:	b082      	sub	sp, #8
    d904:	af00      	add	r7, sp, #0
    d906:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d908:	6879      	ldr	r1, [r7, #4]
    d90a:	4803      	ldr	r0, [pc, #12]	; (d918 <usbdc_register_function+0x18>)
    d90c:	4b03      	ldr	r3, [pc, #12]	; (d91c <usbdc_register_function+0x1c>)
    d90e:	4798      	blx	r3
}
    d910:	bf00      	nop
    d912:	3708      	adds	r7, #8
    d914:	46bd      	mov	sp, r7
    d916:	bd80      	pop	{r7, pc}
    d918:	20001308 	.word	0x20001308
    d91c:	000041d1 	.word	0x000041d1

0000d920 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d920:	b580      	push	{r7, lr}
    d922:	b082      	sub	sp, #8
    d924:	af00      	add	r7, sp, #0
    d926:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d928:	4b0f      	ldr	r3, [pc, #60]	; (d968 <usbdc_start+0x48>)
    d92a:	7e9b      	ldrb	r3, [r3, #26]
    d92c:	2b00      	cmp	r3, #0
    d92e:	d002      	beq.n	d936 <usbdc_start+0x16>
		return ERR_BUSY;
    d930:	f06f 0303 	mvn.w	r3, #3
    d934:	e013      	b.n	d95e <usbdc_start+0x3e>
	}

	if (desces) {
    d936:	687b      	ldr	r3, [r7, #4]
    d938:	2b00      	cmp	r3, #0
    d93a:	d00e      	beq.n	d95a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d93c:	4a0a      	ldr	r2, [pc, #40]	; (d968 <usbdc_start+0x48>)
    d93e:	687b      	ldr	r3, [r7, #4]
    d940:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	681b      	ldr	r3, [r3, #0]
    d946:	79da      	ldrb	r2, [r3, #7]
    d948:	4b07      	ldr	r3, [pc, #28]	; (d968 <usbdc_start+0x48>)
    d94a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d94c:	4b06      	ldr	r3, [pc, #24]	; (d968 <usbdc_start+0x48>)
    d94e:	2201      	movs	r2, #1
    d950:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d952:	4b06      	ldr	r3, [pc, #24]	; (d96c <usbdc_start+0x4c>)
    d954:	4798      	blx	r3
	return ERR_NONE;
    d956:	2300      	movs	r3, #0
    d958:	e001      	b.n	d95e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d95a:	f06f 0308 	mvn.w	r3, #8
}
    d95e:	4618      	mov	r0, r3
    d960:	3708      	adds	r7, #8
    d962:	46bd      	mov	sp, r7
    d964:	bd80      	pop	{r7, pc}
    d966:	bf00      	nop
    d968:	200012f8 	.word	0x200012f8
    d96c:	00003c1d 	.word	0x00003c1d

0000d970 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d970:	b580      	push	{r7, lr}
    d972:	af00      	add	r7, sp, #0
	usb_d_attach();
    d974:	4b01      	ldr	r3, [pc, #4]	; (d97c <usbdc_attach+0xc>)
    d976:	4798      	blx	r3
}
    d978:	bf00      	nop
    d97a:	bd80      	pop	{r7, pc}
    d97c:	00003c31 	.word	0x00003c31

0000d980 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d980:	b480      	push	{r7}
    d982:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d984:	4b03      	ldr	r3, [pc, #12]	; (d994 <usbdc_get_ctrl_buffer+0x14>)
    d986:	695b      	ldr	r3, [r3, #20]
}
    d988:	4618      	mov	r0, r3
    d98a:	46bd      	mov	sp, r7
    d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d990:	4770      	bx	lr
    d992:	bf00      	nop
    d994:	200012f8 	.word	0x200012f8

0000d998 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d998:	b480      	push	{r7}
    d99a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d99c:	4b07      	ldr	r3, [pc, #28]	; (d9bc <usbdc_get_state+0x24>)
    d99e:	7e9b      	ldrb	r3, [r3, #26]
    d9a0:	f003 0310 	and.w	r3, r3, #16
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d001      	beq.n	d9ac <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d9a8:	2310      	movs	r3, #16
    d9aa:	e001      	b.n	d9b0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d9ac:	4b03      	ldr	r3, [pc, #12]	; (d9bc <usbdc_get_state+0x24>)
    d9ae:	7e9b      	ldrb	r3, [r3, #26]
}
    d9b0:	4618      	mov	r0, r3
    d9b2:	46bd      	mov	sp, r7
    d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9b8:	4770      	bx	lr
    d9ba:	bf00      	nop
    d9bc:	200012f8 	.word	0x200012f8

0000d9c0 <usb_get_u16>:
{
    d9c0:	b480      	push	{r7}
    d9c2:	b083      	sub	sp, #12
    d9c4:	af00      	add	r7, sp, #0
    d9c6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d9c8:	687b      	ldr	r3, [r7, #4]
    d9ca:	781b      	ldrb	r3, [r3, #0]
    d9cc:	b29a      	uxth	r2, r3
    d9ce:	687b      	ldr	r3, [r7, #4]
    d9d0:	3301      	adds	r3, #1
    d9d2:	781b      	ldrb	r3, [r3, #0]
    d9d4:	b29b      	uxth	r3, r3
    d9d6:	021b      	lsls	r3, r3, #8
    d9d8:	b29b      	uxth	r3, r3
    d9da:	4413      	add	r3, r2
    d9dc:	b29b      	uxth	r3, r3
}
    d9de:	4618      	mov	r0, r3
    d9e0:	370c      	adds	r7, #12
    d9e2:	46bd      	mov	sp, r7
    d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9e8:	4770      	bx	lr

0000d9ea <usb_desc_len>:
{
    d9ea:	b480      	push	{r7}
    d9ec:	b083      	sub	sp, #12
    d9ee:	af00      	add	r7, sp, #0
    d9f0:	6078      	str	r0, [r7, #4]
	return desc[0];
    d9f2:	687b      	ldr	r3, [r7, #4]
    d9f4:	781b      	ldrb	r3, [r3, #0]
}
    d9f6:	4618      	mov	r0, r3
    d9f8:	370c      	adds	r7, #12
    d9fa:	46bd      	mov	sp, r7
    d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    da00:	4770      	bx	lr

0000da02 <usb_desc_type>:
{
    da02:	b480      	push	{r7}
    da04:	b083      	sub	sp, #12
    da06:	af00      	add	r7, sp, #0
    da08:	6078      	str	r0, [r7, #4]
	return desc[1];
    da0a:	687b      	ldr	r3, [r7, #4]
    da0c:	3301      	adds	r3, #1
    da0e:	781b      	ldrb	r3, [r3, #0]
}
    da10:	4618      	mov	r0, r3
    da12:	370c      	adds	r7, #12
    da14:	46bd      	mov	sp, r7
    da16:	f85d 7b04 	ldr.w	r7, [sp], #4
    da1a:	4770      	bx	lr

0000da1c <usb_desc_next>:
{
    da1c:	b580      	push	{r7, lr}
    da1e:	b082      	sub	sp, #8
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    da24:	6878      	ldr	r0, [r7, #4]
    da26:	4b05      	ldr	r3, [pc, #20]	; (da3c <usb_desc_next+0x20>)
    da28:	4798      	blx	r3
    da2a:	4603      	mov	r3, r0
    da2c:	461a      	mov	r2, r3
    da2e:	687b      	ldr	r3, [r7, #4]
    da30:	4413      	add	r3, r2
}
    da32:	4618      	mov	r0, r3
    da34:	3708      	adds	r7, #8
    da36:	46bd      	mov	sp, r7
    da38:	bd80      	pop	{r7, pc}
    da3a:	bf00      	nop
    da3c:	0000d9eb 	.word	0x0000d9eb

0000da40 <usb_cfg_desc_total_len>:
{
    da40:	b580      	push	{r7, lr}
    da42:	b082      	sub	sp, #8
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	3302      	adds	r3, #2
    da4c:	4618      	mov	r0, r3
    da4e:	4b03      	ldr	r3, [pc, #12]	; (da5c <usb_cfg_desc_total_len+0x1c>)
    da50:	4798      	blx	r3
    da52:	4603      	mov	r3, r0
}
    da54:	4618      	mov	r0, r3
    da56:	3708      	adds	r7, #8
    da58:	46bd      	mov	sp, r7
    da5a:	bd80      	pop	{r7, pc}
    da5c:	0000d9c1 	.word	0x0000d9c1

0000da60 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    da60:	b580      	push	{r7, lr}
    da62:	b082      	sub	sp, #8
    da64:	af00      	add	r7, sp, #0
    da66:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    da68:	6878      	ldr	r0, [r7, #4]
    da6a:	4b05      	ldr	r3, [pc, #20]	; (da80 <usb_cfg_desc_next+0x20>)
    da6c:	4798      	blx	r3
    da6e:	4603      	mov	r3, r0
    da70:	461a      	mov	r2, r3
    da72:	687b      	ldr	r3, [r7, #4]
    da74:	4413      	add	r3, r2
}
    da76:	4618      	mov	r0, r3
    da78:	3708      	adds	r7, #8
    da7a:	46bd      	mov	sp, r7
    da7c:	bd80      	pop	{r7, pc}
    da7e:	bf00      	nop
    da80:	0000da41 	.word	0x0000da41

0000da84 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    da84:	b580      	push	{r7, lr}
    da86:	b084      	sub	sp, #16
    da88:	af00      	add	r7, sp, #0
    da8a:	60f8      	str	r0, [r7, #12]
    da8c:	60b9      	str	r1, [r7, #8]
    da8e:	4613      	mov	r3, r2
    da90:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    da92:	e015      	b.n	dac0 <usb_find_desc+0x3c>
		_desc_len_check();
    da94:	68f8      	ldr	r0, [r7, #12]
    da96:	4b0f      	ldr	r3, [pc, #60]	; (dad4 <usb_find_desc+0x50>)
    da98:	4798      	blx	r3
    da9a:	4603      	mov	r3, r0
    da9c:	2b01      	cmp	r3, #1
    da9e:	d801      	bhi.n	daa4 <usb_find_desc+0x20>
    daa0:	2300      	movs	r3, #0
    daa2:	e012      	b.n	daca <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    daa4:	68f8      	ldr	r0, [r7, #12]
    daa6:	4b0c      	ldr	r3, [pc, #48]	; (dad8 <usb_find_desc+0x54>)
    daa8:	4798      	blx	r3
    daaa:	4603      	mov	r3, r0
    daac:	461a      	mov	r2, r3
    daae:	79fb      	ldrb	r3, [r7, #7]
    dab0:	4293      	cmp	r3, r2
    dab2:	d101      	bne.n	dab8 <usb_find_desc+0x34>
			return desc;
    dab4:	68fb      	ldr	r3, [r7, #12]
    dab6:	e008      	b.n	daca <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dab8:	68f8      	ldr	r0, [r7, #12]
    daba:	4b08      	ldr	r3, [pc, #32]	; (dadc <usb_find_desc+0x58>)
    dabc:	4798      	blx	r3
    dabe:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dac0:	68fa      	ldr	r2, [r7, #12]
    dac2:	68bb      	ldr	r3, [r7, #8]
    dac4:	429a      	cmp	r2, r3
    dac6:	d3e5      	bcc.n	da94 <usb_find_desc+0x10>
	}
	return NULL;
    dac8:	2300      	movs	r3, #0
}
    daca:	4618      	mov	r0, r3
    dacc:	3710      	adds	r7, #16
    dace:	46bd      	mov	sp, r7
    dad0:	bd80      	pop	{r7, pc}
    dad2:	bf00      	nop
    dad4:	0000d9eb 	.word	0x0000d9eb
    dad8:	0000da03 	.word	0x0000da03
    dadc:	0000da1d 	.word	0x0000da1d

0000dae0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dae0:	b580      	push	{r7, lr}
    dae2:	b082      	sub	sp, #8
    dae4:	af00      	add	r7, sp, #0
    dae6:	6078      	str	r0, [r7, #4]
    dae8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    daea:	e019      	b.n	db20 <usb_find_ep_desc+0x40>
		_desc_len_check();
    daec:	6878      	ldr	r0, [r7, #4]
    daee:	4b12      	ldr	r3, [pc, #72]	; (db38 <usb_find_ep_desc+0x58>)
    daf0:	4798      	blx	r3
    daf2:	4603      	mov	r3, r0
    daf4:	2b01      	cmp	r3, #1
    daf6:	d801      	bhi.n	dafc <usb_find_ep_desc+0x1c>
    daf8:	2300      	movs	r3, #0
    dafa:	e018      	b.n	db2e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dafc:	6878      	ldr	r0, [r7, #4]
    dafe:	4b0f      	ldr	r3, [pc, #60]	; (db3c <usb_find_ep_desc+0x5c>)
    db00:	4798      	blx	r3
    db02:	4603      	mov	r3, r0
    db04:	2b04      	cmp	r3, #4
    db06:	d010      	beq.n	db2a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    db08:	6878      	ldr	r0, [r7, #4]
    db0a:	4b0c      	ldr	r3, [pc, #48]	; (db3c <usb_find_ep_desc+0x5c>)
    db0c:	4798      	blx	r3
    db0e:	4603      	mov	r3, r0
    db10:	2b05      	cmp	r3, #5
    db12:	d101      	bne.n	db18 <usb_find_ep_desc+0x38>
			return desc;
    db14:	687b      	ldr	r3, [r7, #4]
    db16:	e00a      	b.n	db2e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    db18:	6878      	ldr	r0, [r7, #4]
    db1a:	4b09      	ldr	r3, [pc, #36]	; (db40 <usb_find_ep_desc+0x60>)
    db1c:	4798      	blx	r3
    db1e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    db20:	687a      	ldr	r2, [r7, #4]
    db22:	683b      	ldr	r3, [r7, #0]
    db24:	429a      	cmp	r2, r3
    db26:	d3e1      	bcc.n	daec <usb_find_ep_desc+0xc>
    db28:	e000      	b.n	db2c <usb_find_ep_desc+0x4c>
			break;
    db2a:	bf00      	nop
	}
	return NULL;
    db2c:	2300      	movs	r3, #0
}
    db2e:	4618      	mov	r0, r3
    db30:	3708      	adds	r7, #8
    db32:	46bd      	mov	sp, r7
    db34:	bd80      	pop	{r7, pc}
    db36:	bf00      	nop
    db38:	0000d9eb 	.word	0x0000d9eb
    db3c:	0000da03 	.word	0x0000da03
    db40:	0000da1d 	.word	0x0000da1d

0000db44 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    db44:	b580      	push	{r7, lr}
    db46:	b084      	sub	sp, #16
    db48:	af00      	add	r7, sp, #0
    db4a:	60f8      	str	r0, [r7, #12]
    db4c:	60b9      	str	r1, [r7, #8]
    db4e:	4613      	mov	r3, r2
    db50:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    db52:	2202      	movs	r2, #2
    db54:	68b9      	ldr	r1, [r7, #8]
    db56:	68f8      	ldr	r0, [r7, #12]
    db58:	4b15      	ldr	r3, [pc, #84]	; (dbb0 <usb_find_cfg_desc+0x6c>)
    db5a:	4798      	blx	r3
    db5c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    db5e:	68fb      	ldr	r3, [r7, #12]
    db60:	2b00      	cmp	r3, #0
    db62:	d11a      	bne.n	db9a <usb_find_cfg_desc+0x56>
		return NULL;
    db64:	2300      	movs	r3, #0
    db66:	e01f      	b.n	dba8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    db68:	68f8      	ldr	r0, [r7, #12]
    db6a:	4b12      	ldr	r3, [pc, #72]	; (dbb4 <usb_find_cfg_desc+0x70>)
    db6c:	4798      	blx	r3
    db6e:	4603      	mov	r3, r0
    db70:	2b01      	cmp	r3, #1
    db72:	d801      	bhi.n	db78 <usb_find_cfg_desc+0x34>
    db74:	2300      	movs	r3, #0
    db76:	e017      	b.n	dba8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    db78:	68fb      	ldr	r3, [r7, #12]
    db7a:	3301      	adds	r3, #1
    db7c:	781b      	ldrb	r3, [r3, #0]
    db7e:	2b02      	cmp	r3, #2
    db80:	d110      	bne.n	dba4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    db82:	68fb      	ldr	r3, [r7, #12]
    db84:	3305      	adds	r3, #5
    db86:	781b      	ldrb	r3, [r3, #0]
    db88:	79fa      	ldrb	r2, [r7, #7]
    db8a:	429a      	cmp	r2, r3
    db8c:	d101      	bne.n	db92 <usb_find_cfg_desc+0x4e>
			return desc;
    db8e:	68fb      	ldr	r3, [r7, #12]
    db90:	e00a      	b.n	dba8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    db92:	68f8      	ldr	r0, [r7, #12]
    db94:	4b08      	ldr	r3, [pc, #32]	; (dbb8 <usb_find_cfg_desc+0x74>)
    db96:	4798      	blx	r3
    db98:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    db9a:	68fa      	ldr	r2, [r7, #12]
    db9c:	68bb      	ldr	r3, [r7, #8]
    db9e:	429a      	cmp	r2, r3
    dba0:	d3e2      	bcc.n	db68 <usb_find_cfg_desc+0x24>
    dba2:	e000      	b.n	dba6 <usb_find_cfg_desc+0x62>
			break;
    dba4:	bf00      	nop
	}
	return NULL;
    dba6:	2300      	movs	r3, #0
}
    dba8:	4618      	mov	r0, r3
    dbaa:	3710      	adds	r7, #16
    dbac:	46bd      	mov	sp, r7
    dbae:	bd80      	pop	{r7, pc}
    dbb0:	0000da85 	.word	0x0000da85
    dbb4:	0000d9eb 	.word	0x0000d9eb
    dbb8:	0000da61 	.word	0x0000da61

0000dbbc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    dbbc:	b580      	push	{r7, lr}
    dbbe:	b086      	sub	sp, #24
    dbc0:	af00      	add	r7, sp, #0
    dbc2:	60f8      	str	r0, [r7, #12]
    dbc4:	60b9      	str	r1, [r7, #8]
    dbc6:	4613      	mov	r3, r2
    dbc8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    dbca:	2300      	movs	r3, #0
    dbcc:	75fb      	strb	r3, [r7, #23]
    dbce:	e020      	b.n	dc12 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    dbd0:	2203      	movs	r2, #3
    dbd2:	68b9      	ldr	r1, [r7, #8]
    dbd4:	68f8      	ldr	r0, [r7, #12]
    dbd6:	4b13      	ldr	r3, [pc, #76]	; (dc24 <usb_find_str_desc+0x68>)
    dbd8:	4798      	blx	r3
    dbda:	60f8      	str	r0, [r7, #12]
		if (desc) {
    dbdc:	68fb      	ldr	r3, [r7, #12]
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d015      	beq.n	dc0e <usb_find_str_desc+0x52>
			_desc_len_check();
    dbe2:	68f8      	ldr	r0, [r7, #12]
    dbe4:	4b10      	ldr	r3, [pc, #64]	; (dc28 <usb_find_str_desc+0x6c>)
    dbe6:	4798      	blx	r3
    dbe8:	4603      	mov	r3, r0
    dbea:	2b01      	cmp	r3, #1
    dbec:	d801      	bhi.n	dbf2 <usb_find_str_desc+0x36>
    dbee:	2300      	movs	r3, #0
    dbf0:	e014      	b.n	dc1c <usb_find_str_desc+0x60>
			if (i == str_index) {
    dbf2:	7dfa      	ldrb	r2, [r7, #23]
    dbf4:	79fb      	ldrb	r3, [r7, #7]
    dbf6:	429a      	cmp	r2, r3
    dbf8:	d101      	bne.n	dbfe <usb_find_str_desc+0x42>
				return desc;
    dbfa:	68fb      	ldr	r3, [r7, #12]
    dbfc:	e00e      	b.n	dc1c <usb_find_str_desc+0x60>
			}
			i++;
    dbfe:	7dfb      	ldrb	r3, [r7, #23]
    dc00:	3301      	adds	r3, #1
    dc02:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    dc04:	68f8      	ldr	r0, [r7, #12]
    dc06:	4b09      	ldr	r3, [pc, #36]	; (dc2c <usb_find_str_desc+0x70>)
    dc08:	4798      	blx	r3
    dc0a:	60f8      	str	r0, [r7, #12]
    dc0c:	e001      	b.n	dc12 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    dc0e:	2300      	movs	r3, #0
    dc10:	e004      	b.n	dc1c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dc12:	68fa      	ldr	r2, [r7, #12]
    dc14:	68bb      	ldr	r3, [r7, #8]
    dc16:	429a      	cmp	r2, r3
    dc18:	d3da      	bcc.n	dbd0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    dc1a:	2300      	movs	r3, #0
}
    dc1c:	4618      	mov	r0, r3
    dc1e:	3718      	adds	r7, #24
    dc20:	46bd      	mov	sp, r7
    dc22:	bd80      	pop	{r7, pc}
    dc24:	0000da85 	.word	0x0000da85
    dc28:	0000d9eb 	.word	0x0000d9eb
    dc2c:	0000da1d 	.word	0x0000da1d

0000dc30 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    dc30:	b480      	push	{r7}
    dc32:	b083      	sub	sp, #12
    dc34:	af00      	add	r7, sp, #0
    dc36:	6078      	str	r0, [r7, #4]
    dc38:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    dc3a:	687b      	ldr	r3, [r7, #4]
    dc3c:	683a      	ldr	r2, [r7, #0]
    dc3e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	4618      	mov	r0, r3
    dc44:	370c      	adds	r7, #12
    dc46:	46bd      	mov	sp, r7
    dc48:	bc80      	pop	{r7}
    dc4a:	4770      	bx	lr

0000dc4c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    dc4c:	b480      	push	{r7}
    dc4e:	b083      	sub	sp, #12
    dc50:	af00      	add	r7, sp, #0
    dc52:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    dc54:	687b      	ldr	r3, [r7, #4]
    dc56:	4618      	mov	r0, r3
    dc58:	370c      	adds	r7, #12
    dc5a:	46bd      	mov	sp, r7
    dc5c:	bc80      	pop	{r7}
    dc5e:	4770      	bx	lr

0000dc60 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    dc60:	b580      	push	{r7, lr}
    dc62:	b082      	sub	sp, #8
    dc64:	af00      	add	r7, sp, #0
    dc66:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    dc68:	687b      	ldr	r3, [r7, #4]
    dc6a:	4a23      	ldr	r2, [pc, #140]	; (dcf8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    dc6c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	4a21      	ldr	r2, [pc, #132]	; (dcf8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    dc72:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	691a      	ldr	r2, [r3, #16]
    dc78:	687b      	ldr	r3, [r7, #4]
    dc7a:	330c      	adds	r3, #12
    dc7c:	4619      	mov	r1, r3
    dc7e:	4610      	mov	r0, r2
    dc80:	4b1e      	ldr	r3, [pc, #120]	; (dcfc <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    dc82:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    dc84:	687b      	ldr	r3, [r7, #4]
    dc86:	691b      	ldr	r3, [r3, #16]
    dc88:	4618      	mov	r0, r3
    dc8a:	4b1d      	ldr	r3, [pc, #116]	; (dd00 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    dc8c:	4798      	blx	r3
    dc8e:	4603      	mov	r3, r0
    dc90:	b2da      	uxtb	r2, r3
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	7d1b      	ldrb	r3, [r3, #20]
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	bf0c      	ite	eq
    dc9e:	2301      	moveq	r3, #1
    dca0:	2300      	movne	r3, #0
    dca2:	b2da      	uxtb	r2, r3
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	725a      	strb	r2, [r3, #9]
	if (isOK)
    dca8:	687b      	ldr	r3, [r7, #4]
    dcaa:	7a5b      	ldrb	r3, [r3, #9]
    dcac:	b2db      	uxtb	r3, r3
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d116      	bne.n	dce0 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	691b      	ldr	r3, [r3, #16]
    dcb6:	4618      	mov	r0, r3
    dcb8:	4b12      	ldr	r3, [pc, #72]	; (dd04 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    dcba:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    dcbc:	687b      	ldr	r3, [r7, #4]
    dcbe:	691b      	ldr	r3, [r3, #16]
    dcc0:	4618      	mov	r0, r3
    dcc2:	4b0f      	ldr	r3, [pc, #60]	; (dd00 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    dcc4:	4798      	blx	r3
    dcc6:	4603      	mov	r3, r0
    dcc8:	b2da      	uxtb	r2, r3
    dcca:	687b      	ldr	r3, [r7, #4]
    dccc:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    dcce:	687b      	ldr	r3, [r7, #4]
    dcd0:	7d1b      	ldrb	r3, [r3, #20]
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	bf0c      	ite	eq
    dcd6:	2301      	moveq	r3, #1
    dcd8:	2300      	movne	r3, #0
    dcda:	b2da      	uxtb	r2, r3
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	725a      	strb	r2, [r3, #9]
	}
	
	i2c_initiated=isOK;
    dce0:	687b      	ldr	r3, [r7, #4]
    dce2:	7a5b      	ldrb	r3, [r3, #9]
    dce4:	b2da      	uxtb	r2, r3
    dce6:	687b      	ldr	r3, [r7, #4]
    dce8:	721a      	strb	r2, [r3, #8]
	return isOK;
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	7a5b      	ldrb	r3, [r3, #9]
    dcee:	b2db      	uxtb	r3, r3
	
}
    dcf0:	4618      	mov	r0, r3
    dcf2:	3708      	adds	r7, #8
    dcf4:	46bd      	mov	sp, r7
    dcf6:	bd80      	pop	{r7, pc}
    dcf8:	20001318 	.word	0x20001318
    dcfc:	00002e83 	.word	0x00002e83
    dd00:	00002e09 	.word	0x00002e09
    dd04:	00002e29 	.word	0x00002e29

0000dd08 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    dd08:	b580      	push	{r7, lr}
    dd0a:	b082      	sub	sp, #8
    dd0c:	af00      	add	r7, sp, #0
    dd0e:	6078      	str	r0, [r7, #4]
    dd10:	460b      	mov	r3, r1
    dd12:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	691b      	ldr	r3, [r3, #16]
    dd18:	78fa      	ldrb	r2, [r7, #3]
    dd1a:	b211      	sxth	r1, r2
    dd1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dd20:	4618      	mov	r0, r3
    dd22:	4b03      	ldr	r3, [pc, #12]	; (dd30 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    dd24:	4798      	blx	r3
    dd26:	4603      	mov	r3, r0
}
    dd28:	4618      	mov	r0, r3
    dd2a:	3708      	adds	r7, #8
    dd2c:	46bd      	mov	sp, r7
    dd2e:	bd80      	pop	{r7, pc}
    dd30:	00002e49 	.word	0x00002e49

0000dd34 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    dd34:	b580      	push	{r7, lr}
    dd36:	b086      	sub	sp, #24
    dd38:	af00      	add	r7, sp, #0
    dd3a:	60f8      	str	r0, [r7, #12]
    dd3c:	60b9      	str	r1, [r7, #8]
    dd3e:	4613      	mov	r3, r2
    dd40:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	68db      	ldr	r3, [r3, #12]
    dd46:	88fa      	ldrh	r2, [r7, #6]
    dd48:	68b9      	ldr	r1, [r7, #8]
    dd4a:	4618      	mov	r0, r3
    dd4c:	4b03      	ldr	r3, [pc, #12]	; (dd5c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dd4e:	4798      	blx	r3
    dd50:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dd52:	697b      	ldr	r3, [r7, #20]
}
    dd54:	4618      	mov	r0, r3
    dd56:	3718      	adds	r7, #24
    dd58:	46bd      	mov	sp, r7
    dd5a:	bd80      	pop	{r7, pc}
    dd5c:	00011961 	.word	0x00011961

0000dd60 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dd60:	b580      	push	{r7, lr}
    dd62:	b086      	sub	sp, #24
    dd64:	af00      	add	r7, sp, #0
    dd66:	60f8      	str	r0, [r7, #12]
    dd68:	60b9      	str	r1, [r7, #8]
    dd6a:	4613      	mov	r3, r2
    dd6c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dd6e:	68fb      	ldr	r3, [r7, #12]
    dd70:	68db      	ldr	r3, [r3, #12]
    dd72:	88fa      	ldrh	r2, [r7, #6]
    dd74:	68b9      	ldr	r1, [r7, #8]
    dd76:	4618      	mov	r0, r3
    dd78:	4b03      	ldr	r3, [pc, #12]	; (dd88 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    dd7a:	4798      	blx	r3
    dd7c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    dd7e:	697b      	ldr	r3, [r7, #20]
}
    dd80:	4618      	mov	r0, r3
    dd82:	3718      	adds	r7, #24
    dd84:	46bd      	mov	sp, r7
    dd86:	bd80      	pop	{r7, pc}
    dd88:	000119b1 	.word	0x000119b1

0000dd8c <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    dd8c:	b480      	push	{r7}
    dd8e:	b083      	sub	sp, #12
    dd90:	af00      	add	r7, sp, #0
    dd92:	6078      	str	r0, [r7, #4]
    dd94:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    dd96:	687b      	ldr	r3, [r7, #4]
    dd98:	683a      	ldr	r2, [r7, #0]
    dd9a:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    dd9c:	687b      	ldr	r3, [r7, #4]
    dd9e:	68db      	ldr	r3, [r3, #12]
    dda0:	2200      	movs	r2, #0
    dda2:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    dda4:	4a06      	ldr	r2, [pc, #24]	; (ddc0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    ddaa:	687b      	ldr	r3, [r7, #4]
    ddac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ddb0:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    ddb2:	687b      	ldr	r3, [r7, #4]
    ddb4:	4618      	mov	r0, r3
    ddb6:	370c      	adds	r7, #12
    ddb8:	46bd      	mov	sp, r7
    ddba:	bc80      	pop	{r7}
    ddbc:	4770      	bx	lr
    ddbe:	bf00      	nop
    ddc0:	20001498 	.word	0x20001498

0000ddc4 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ddc4:	b480      	push	{r7}
    ddc6:	b083      	sub	sp, #12
    ddc8:	af00      	add	r7, sp, #0
    ddca:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ddcc:	687b      	ldr	r3, [r7, #4]
    ddce:	2200      	movs	r2, #0
    ddd0:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ddd2:	687b      	ldr	r3, [r7, #4]
    ddd4:	4618      	mov	r0, r3
    ddd6:	370c      	adds	r7, #12
    ddd8:	46bd      	mov	sp, r7
    ddda:	bc80      	pop	{r7}
    dddc:	4770      	bx	lr
	...

0000dde0 <_ZL9InitArrayv>:


static void InitArray(){
    dde0:	b480      	push	{r7}
    dde2:	b083      	sub	sp, #12
    dde4:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    dde6:	2301      	movs	r3, #1
    dde8:	607b      	str	r3, [r7, #4]
    ddea:	687b      	ldr	r3, [r7, #4]
    ddec:	2b1f      	cmp	r3, #31
    ddee:	dc34      	bgt.n	de5a <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    ddf0:	491e      	ldr	r1, [pc, #120]	; (de6c <_ZL9InitArrayv+0x8c>)
    ddf2:	687a      	ldr	r2, [r7, #4]
    ddf4:	4613      	mov	r3, r2
    ddf6:	009b      	lsls	r3, r3, #2
    ddf8:	4413      	add	r3, r2
    ddfa:	009b      	lsls	r3, r3, #2
    ddfc:	440b      	add	r3, r1
    ddfe:	2200      	movs	r2, #0
    de00:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    de02:	491a      	ldr	r1, [pc, #104]	; (de6c <_ZL9InitArrayv+0x8c>)
    de04:	687a      	ldr	r2, [r7, #4]
    de06:	4613      	mov	r3, r2
    de08:	009b      	lsls	r3, r3, #2
    de0a:	4413      	add	r3, r2
    de0c:	009b      	lsls	r3, r3, #2
    de0e:	440b      	add	r3, r1
    de10:	330c      	adds	r3, #12
    de12:	2200      	movs	r2, #0
    de14:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	1e5a      	subs	r2, r3, #1
    de1a:	6879      	ldr	r1, [r7, #4]
    de1c:	460b      	mov	r3, r1
    de1e:	009b      	lsls	r3, r3, #2
    de20:	440b      	add	r3, r1
    de22:	009b      	lsls	r3, r3, #2
    de24:	4911      	ldr	r1, [pc, #68]	; (de6c <_ZL9InitArrayv+0x8c>)
    de26:	4419      	add	r1, r3
    de28:	4810      	ldr	r0, [pc, #64]	; (de6c <_ZL9InitArrayv+0x8c>)
    de2a:	4613      	mov	r3, r2
    de2c:	009b      	lsls	r3, r3, #2
    de2e:	4413      	add	r3, r2
    de30:	009b      	lsls	r3, r3, #2
    de32:	4403      	add	r3, r0
    de34:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    de36:	4a0e      	ldr	r2, [pc, #56]	; (de70 <_ZL9InitArrayv+0x90>)
    de38:	687b      	ldr	r3, [r7, #4]
    de3a:	2100      	movs	r1, #0
    de3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    de40:	687b      	ldr	r3, [r7, #4]
    de42:	3b01      	subs	r3, #1
    de44:	687a      	ldr	r2, [r7, #4]
    de46:	0092      	lsls	r2, r2, #2
    de48:	4909      	ldr	r1, [pc, #36]	; (de70 <_ZL9InitArrayv+0x90>)
    de4a:	440a      	add	r2, r1
    de4c:	4908      	ldr	r1, [pc, #32]	; (de70 <_ZL9InitArrayv+0x90>)
    de4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    de52:	687b      	ldr	r3, [r7, #4]
    de54:	3301      	adds	r3, #1
    de56:	607b      	str	r3, [r7, #4]
    de58:	e7c7      	b.n	ddea <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    de5a:	4b06      	ldr	r3, [pc, #24]	; (de74 <_ZL9InitArrayv+0x94>)
    de5c:	2201      	movs	r2, #1
    de5e:	701a      	strb	r2, [r3, #0]
		
}
    de60:	bf00      	nop
    de62:	370c      	adds	r7, #12
    de64:	46bd      	mov	sp, r7
    de66:	bc80      	pop	{r7}
    de68:	4770      	bx	lr
    de6a:	bf00      	nop
    de6c:	2000149c 	.word	0x2000149c
    de70:	2000171c 	.word	0x2000171c
    de74:	2000179c 	.word	0x2000179c

0000de78 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    de78:	b580      	push	{r7, lr}
    de7a:	b082      	sub	sp, #8
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]
	ticks=0;
    de80:	687b      	ldr	r3, [r7, #4]
    de82:	2200      	movs	r2, #0
    de84:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    de86:	4b0d      	ldr	r3, [pc, #52]	; (debc <_ZN11Timer_Class4InitEv+0x44>)
    de88:	781b      	ldrb	r3, [r3, #0]
    de8a:	f083 0301 	eor.w	r3, r3, #1
    de8e:	b2db      	uxtb	r3, r3
    de90:	2b00      	cmp	r3, #0
    de92:	d001      	beq.n	de98 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    de94:	4b0a      	ldr	r3, [pc, #40]	; (dec0 <_ZN11Timer_Class4InitEv+0x48>)
    de96:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    de98:	6878      	ldr	r0, [r7, #4]
    de9a:	4b0a      	ldr	r3, [pc, #40]	; (dec4 <_ZN11Timer_Class4InitEv+0x4c>)
    de9c:	4798      	blx	r3
    de9e:	4603      	mov	r3, r0
    dea0:	2b00      	cmp	r3, #0
    dea2:	bf0c      	ite	eq
    dea4:	2301      	moveq	r3, #1
    dea6:	2300      	movne	r3, #0
    dea8:	b2da      	uxtb	r2, r3
    deaa:	687b      	ldr	r3, [r7, #4]
    deac:	709a      	strb	r2, [r3, #2]
	return isOK;
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	789b      	ldrb	r3, [r3, #2]
    deb2:	b2db      	uxtb	r3, r3
}
    deb4:	4618      	mov	r0, r3
    deb6:	3708      	adds	r7, #8
    deb8:	46bd      	mov	sp, r7
    deba:	bd80      	pop	{r7, pc}
    debc:	2000179c 	.word	0x2000179c
    dec0:	0000dde1 	.word	0x0000dde1
    dec4:	0000dec9 	.word	0x0000dec9

0000dec8 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    dec8:	b580      	push	{r7, lr}
    deca:	b084      	sub	sp, #16
    decc:	af00      	add	r7, sp, #0
    dece:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	68db      	ldr	r3, [r3, #12]
    ded4:	4618      	mov	r0, r3
    ded6:	4b04      	ldr	r3, [pc, #16]	; (dee8 <_ZN11Timer_Class5StartEv+0x20>)
    ded8:	4798      	blx	r3
    deda:	60f8      	str	r0, [r7, #12]
	return status;
    dedc:	68fb      	ldr	r3, [r7, #12]
	
}
    dede:	4618      	mov	r0, r3
    dee0:	3710      	adds	r7, #16
    dee2:	46bd      	mov	sp, r7
    dee4:	bd80      	pop	{r7, pc}
    dee6:	bf00      	nop
    dee8:	0000335d 	.word	0x0000335d

0000deec <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    deec:	b580      	push	{r7, lr}
    deee:	b084      	sub	sp, #16
    def0:	af00      	add	r7, sp, #0
    def2:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	68db      	ldr	r3, [r3, #12]
    def8:	4618      	mov	r0, r3
    defa:	4b05      	ldr	r3, [pc, #20]	; (df10 <_ZN11Timer_Class4StopEv+0x24>)
    defc:	4798      	blx	r3
    defe:	60f8      	str	r0, [r7, #12]
	timeout=0;
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	2200      	movs	r2, #0
    df04:	705a      	strb	r2, [r3, #1]
	return status;
    df06:	68fb      	ldr	r3, [r7, #12]
}
    df08:	4618      	mov	r0, r3
    df0a:	3710      	adds	r7, #16
    df0c:	46bd      	mov	sp, r7
    df0e:	bd80      	pop	{r7, pc}
    df10:	000033c5 	.word	0x000033c5

0000df14 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    df14:	b580      	push	{r7, lr}
    df16:	b086      	sub	sp, #24
    df18:	af00      	add	r7, sp, #0
    df1a:	60f8      	str	r0, [r7, #12]
    df1c:	60b9      	str	r1, [r7, #8]
    df1e:	607a      	str	r2, [r7, #4]
    df20:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    df22:	68b9      	ldr	r1, [r7, #8]
    df24:	68f8      	ldr	r0, [r7, #12]
    df26:	4b0e      	ldr	r3, [pc, #56]	; (df60 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    df28:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    df2a:	68fb      	ldr	r3, [r7, #12]
    df2c:	699b      	ldr	r3, [r3, #24]
    df2e:	687a      	ldr	r2, [r7, #4]
    df30:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    df32:	68fb      	ldr	r3, [r7, #12]
    df34:	699b      	ldr	r3, [r3, #24]
    df36:	68ba      	ldr	r2, [r7, #8]
    df38:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    df3a:	68fb      	ldr	r3, [r7, #12]
    df3c:	699b      	ldr	r3, [r3, #24]
    df3e:	78fa      	ldrb	r2, [r7, #3]
    df40:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    df42:	68fb      	ldr	r3, [r7, #12]
    df44:	68da      	ldr	r2, [r3, #12]
    df46:	68fb      	ldr	r3, [r7, #12]
    df48:	699b      	ldr	r3, [r3, #24]
    df4a:	4619      	mov	r1, r3
    df4c:	4610      	mov	r0, r2
    df4e:	4b05      	ldr	r3, [pc, #20]	; (df64 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    df50:	4798      	blx	r3
    df52:	6178      	str	r0, [r7, #20]
	
	return status;
    df54:	697b      	ldr	r3, [r7, #20]
}
    df56:	4618      	mov	r0, r3
    df58:	3718      	adds	r7, #24
    df5a:	46bd      	mov	sp, r7
    df5c:	bd80      	pop	{r7, pc}
    df5e:	bf00      	nop
    df60:	0000e11d 	.word	0x0000e11d
    df64:	00003431 	.word	0x00003431

0000df68 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    df68:	b580      	push	{r7, lr}
    df6a:	b086      	sub	sp, #24
    df6c:	af00      	add	r7, sp, #0
    df6e:	60f8      	str	r0, [r7, #12]
    df70:	60b9      	str	r1, [r7, #8]
    df72:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    df74:	687a      	ldr	r2, [r7, #4]
    df76:	68b9      	ldr	r1, [r7, #8]
    df78:	68f8      	ldr	r0, [r7, #12]
    df7a:	4b0c      	ldr	r3, [pc, #48]	; (dfac <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    df7c:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    df7e:	68fb      	ldr	r3, [r7, #12]
    df80:	68db      	ldr	r3, [r3, #12]
    df82:	681b      	ldr	r3, [r3, #0]
    df84:	699b      	ldr	r3, [r3, #24]
    df86:	68fa      	ldr	r2, [r7, #12]
    df88:	68d2      	ldr	r2, [r2, #12]
    df8a:	3204      	adds	r2, #4
    df8c:	4610      	mov	r0, r2
    df8e:	4798      	blx	r3
    df90:	4603      	mov	r3, r0
    df92:	2b00      	cmp	r3, #0
    df94:	d105      	bne.n	dfa2 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    df96:	68fb      	ldr	r3, [r7, #12]
    df98:	68db      	ldr	r3, [r3, #12]
    df9a:	4618      	mov	r0, r3
    df9c:	4b04      	ldr	r3, [pc, #16]	; (dfb0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    df9e:	4798      	blx	r3
    dfa0:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    dfa2:	697b      	ldr	r3, [r7, #20]
}
    dfa4:	4618      	mov	r0, r3
    dfa6:	3718      	adds	r7, #24
    dfa8:	46bd      	mov	sp, r7
    dfaa:	bd80      	pop	{r7, pc}
    dfac:	0000dfb5 	.word	0x0000dfb5
    dfb0:	0000335d 	.word	0x0000335d

0000dfb4 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    dfb4:	b590      	push	{r4, r7, lr}
    dfb6:	b087      	sub	sp, #28
    dfb8:	af00      	add	r7, sp, #0
    dfba:	60f8      	str	r0, [r7, #12]
    dfbc:	60b9      	str	r1, [r7, #8]
    dfbe:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    dfc0:	2301      	movs	r3, #1
    dfc2:	687a      	ldr	r2, [r7, #4]
    dfc4:	68b9      	ldr	r1, [r7, #8]
    dfc6:	68f8      	ldr	r0, [r7, #12]
    dfc8:	4c03      	ldr	r4, [pc, #12]	; (dfd8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    dfca:	47a0      	blx	r4
    dfcc:	6178      	str	r0, [r7, #20]
		return status;
    dfce:	697b      	ldr	r3, [r7, #20]
}
    dfd0:	4618      	mov	r0, r3
    dfd2:	371c      	adds	r7, #28
    dfd4:	46bd      	mov	sp, r7
    dfd6:	bd90      	pop	{r4, r7, pc}
    dfd8:	0000df15 	.word	0x0000df15

0000dfdc <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
    dfdc:	b580      	push	{r7, lr}
    dfde:	b082      	sub	sp, #8
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    dfe4:	687b      	ldr	r3, [r7, #4]
    dfe6:	68da      	ldr	r2, [r3, #12]
    dfe8:	687b      	ldr	r3, [r7, #4]
    dfea:	699b      	ldr	r3, [r3, #24]
    dfec:	4619      	mov	r1, r3
    dfee:	4610      	mov	r0, r2
    dff0:	4b04      	ldr	r3, [pc, #16]	; (e004 <_ZN11Timer_Class11Remove_taskEv+0x28>)
    dff2:	4798      	blx	r3
	task->cb=NULL;
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	699b      	ldr	r3, [r3, #24]
    dff8:	2200      	movs	r2, #0
    dffa:	60da      	str	r2, [r3, #12]
}
    dffc:	bf00      	nop
    dffe:	3708      	adds	r7, #8
    e000:	46bd      	mov	sp, r7
    e002:	bd80      	pop	{r7, pc}
    e004:	00003535 	.word	0x00003535

0000e008 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
    e008:	b580      	push	{r7, lr}
    e00a:	b082      	sub	sp, #8
    e00c:	af00      	add	r7, sp, #0
    e00e:	6078      	str	r0, [r7, #4]
    e010:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e012:	6839      	ldr	r1, [r7, #0]
    e014:	6878      	ldr	r0, [r7, #4]
    e016:	4b0f      	ldr	r3, [pc, #60]	; (e054 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    e018:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e01a:	687b      	ldr	r3, [r7, #4]
    e01c:	68db      	ldr	r3, [r3, #12]
    e01e:	f103 0218 	add.w	r2, r3, #24
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	699b      	ldr	r3, [r3, #24]
    e026:	4619      	mov	r1, r3
    e028:	4610      	mov	r0, r2
    e02a:	4b0b      	ldr	r3, [pc, #44]	; (e058 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    e02c:	4798      	blx	r3
    e02e:	4603      	mov	r3, r0
    e030:	2b00      	cmp	r3, #0
    e032:	d007      	beq.n	e044 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	68da      	ldr	r2, [r3, #12]
    e038:	687b      	ldr	r3, [r7, #4]
    e03a:	699b      	ldr	r3, [r3, #24]
    e03c:	4619      	mov	r1, r3
    e03e:	4610      	mov	r0, r2
    e040:	4b06      	ldr	r3, [pc, #24]	; (e05c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    e042:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e044:	687b      	ldr	r3, [r7, #4]
    e046:	699b      	ldr	r3, [r3, #24]
    e048:	2200      	movs	r2, #0
    e04a:	60da      	str	r2, [r3, #12]
}
    e04c:	bf00      	nop
    e04e:	3708      	adds	r7, #8
    e050:	46bd      	mov	sp, r7
    e052:	bd80      	pop	{r7, pc}
    e054:	0000e19d 	.word	0x0000e19d
    e058:	0000411d 	.word	0x0000411d
    e05c:	00003535 	.word	0x00003535

0000e060 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e060:	b590      	push	{r4, r7, lr}
    e062:	b087      	sub	sp, #28
    e064:	af00      	add	r7, sp, #0
    e066:	60f8      	str	r0, [r7, #12]
    e068:	60b9      	str	r1, [r7, #8]
    e06a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e06c:	2300      	movs	r3, #0
    e06e:	687a      	ldr	r2, [r7, #4]
    e070:	68b9      	ldr	r1, [r7, #8]
    e072:	68f8      	ldr	r0, [r7, #12]
    e074:	4c0c      	ldr	r4, [pc, #48]	; (e0a8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e076:	47a0      	blx	r4
    e078:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e07a:	68fb      	ldr	r3, [r7, #12]
    e07c:	68db      	ldr	r3, [r3, #12]
    e07e:	681b      	ldr	r3, [r3, #0]
    e080:	699b      	ldr	r3, [r3, #24]
    e082:	68fa      	ldr	r2, [r7, #12]
    e084:	68d2      	ldr	r2, [r2, #12]
    e086:	3204      	adds	r2, #4
    e088:	4610      	mov	r0, r2
    e08a:	4798      	blx	r3
    e08c:	4603      	mov	r3, r0
    e08e:	2b00      	cmp	r3, #0
    e090:	d105      	bne.n	e09e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e092:	68fb      	ldr	r3, [r7, #12]
    e094:	68db      	ldr	r3, [r3, #12]
    e096:	4618      	mov	r0, r3
    e098:	4b04      	ldr	r3, [pc, #16]	; (e0ac <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e09a:	4798      	blx	r3
    e09c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e09e:	697b      	ldr	r3, [r7, #20]
}
    e0a0:	4618      	mov	r0, r3
    e0a2:	371c      	adds	r7, #28
    e0a4:	46bd      	mov	sp, r7
    e0a6:	bd90      	pop	{r4, r7, pc}
    e0a8:	0000df15 	.word	0x0000df15
    e0ac:	0000335d 	.word	0x0000335d

0000e0b0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e0b0:	b480      	push	{r7}
    e0b2:	b085      	sub	sp, #20
    e0b4:	af00      	add	r7, sp, #0
    e0b6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e0b8:	2300      	movs	r3, #0
    e0ba:	73fb      	strb	r3, [r7, #15]
    e0bc:	7bfb      	ldrb	r3, [r7, #15]
    e0be:	2b1f      	cmp	r3, #31
    e0c0:	dc23      	bgt.n	e10a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e0c2:	687b      	ldr	r3, [r7, #4]
    e0c4:	7f1a      	ldrb	r2, [r3, #28]
    e0c6:	7bfb      	ldrb	r3, [r7, #15]
    e0c8:	4413      	add	r3, r2
    e0ca:	b2db      	uxtb	r3, r3
    e0cc:	f003 031f 	and.w	r3, r3, #31
    e0d0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e0d2:	7bba      	ldrb	r2, [r7, #14]
    e0d4:	4910      	ldr	r1, [pc, #64]	; (e118 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e0d6:	4613      	mov	r3, r2
    e0d8:	009b      	lsls	r3, r3, #2
    e0da:	4413      	add	r3, r2
    e0dc:	009b      	lsls	r3, r3, #2
    e0de:	440b      	add	r3, r1
    e0e0:	330c      	adds	r3, #12
    e0e2:	681b      	ldr	r3, [r3, #0]
    e0e4:	2b00      	cmp	r3, #0
    e0e6:	d10c      	bne.n	e102 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e0e8:	7bba      	ldrb	r2, [r7, #14]
    e0ea:	4613      	mov	r3, r2
    e0ec:	009b      	lsls	r3, r3, #2
    e0ee:	4413      	add	r3, r2
    e0f0:	009b      	lsls	r3, r3, #2
    e0f2:	4a09      	ldr	r2, [pc, #36]	; (e118 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e0f4:	441a      	add	r2, r3
    e0f6:	687b      	ldr	r3, [r7, #4]
    e0f8:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e0fa:	687b      	ldr	r3, [r7, #4]
    e0fc:	7bba      	ldrb	r2, [r7, #14]
    e0fe:	771a      	strb	r2, [r3, #28]
			return;
    e100:	e006      	b.n	e110 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e102:	7bfb      	ldrb	r3, [r7, #15]
    e104:	3301      	adds	r3, #1
    e106:	73fb      	strb	r3, [r7, #15]
    e108:	e7d8      	b.n	e0bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	4a02      	ldr	r2, [pc, #8]	; (e118 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e10e:	619a      	str	r2, [r3, #24]

}
    e110:	3714      	adds	r7, #20
    e112:	46bd      	mov	sp, r7
    e114:	bc80      	pop	{r7}
    e116:	4770      	bx	lr
    e118:	2000149c 	.word	0x2000149c

0000e11c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e11c:	b580      	push	{r7, lr}
    e11e:	b084      	sub	sp, #16
    e120:	af00      	add	r7, sp, #0
    e122:	6078      	str	r0, [r7, #4]
    e124:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e126:	2300      	movs	r3, #0
    e128:	73fb      	strb	r3, [r7, #15]
    e12a:	7bfb      	ldrb	r3, [r7, #15]
    e12c:	2b1f      	cmp	r3, #31
    e12e:	dc28      	bgt.n	e182 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e130:	687b      	ldr	r3, [r7, #4]
    e132:	7f1a      	ldrb	r2, [r3, #28]
    e134:	7bfb      	ldrb	r3, [r7, #15]
    e136:	4413      	add	r3, r2
    e138:	b2db      	uxtb	r3, r3
    e13a:	f003 031f 	and.w	r3, r3, #31
    e13e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e140:	7bba      	ldrb	r2, [r7, #14]
    e142:	4913      	ldr	r1, [pc, #76]	; (e190 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e144:	4613      	mov	r3, r2
    e146:	009b      	lsls	r3, r3, #2
    e148:	4413      	add	r3, r2
    e14a:	009b      	lsls	r3, r3, #2
    e14c:	440b      	add	r3, r1
    e14e:	330c      	adds	r3, #12
    e150:	681a      	ldr	r2, [r3, #0]
    e152:	683b      	ldr	r3, [r7, #0]
    e154:	429a      	cmp	r2, r3
    e156:	d110      	bne.n	e17a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e158:	6839      	ldr	r1, [r7, #0]
    e15a:	6878      	ldr	r0, [r7, #4]
    e15c:	4b0d      	ldr	r3, [pc, #52]	; (e194 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e15e:	4798      	blx	r3
			task=&taskArray[j];
    e160:	7bba      	ldrb	r2, [r7, #14]
    e162:	4613      	mov	r3, r2
    e164:	009b      	lsls	r3, r3, #2
    e166:	4413      	add	r3, r2
    e168:	009b      	lsls	r3, r3, #2
    e16a:	4a09      	ldr	r2, [pc, #36]	; (e190 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e16c:	441a      	add	r2, r3
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	7bba      	ldrb	r2, [r7, #14]
    e176:	771a      	strb	r2, [r3, #28]
			return;
    e178:	e006      	b.n	e188 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e17a:	7bfb      	ldrb	r3, [r7, #15]
    e17c:	3301      	adds	r3, #1
    e17e:	73fb      	strb	r3, [r7, #15]
    e180:	e7d3      	b.n	e12a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e182:	6878      	ldr	r0, [r7, #4]
    e184:	4b04      	ldr	r3, [pc, #16]	; (e198 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e186:	4798      	blx	r3
	//task=&taskArray[0];

}
    e188:	3710      	adds	r7, #16
    e18a:	46bd      	mov	sp, r7
    e18c:	bd80      	pop	{r7, pc}
    e18e:	bf00      	nop
    e190:	2000149c 	.word	0x2000149c
    e194:	0000e009 	.word	0x0000e009
    e198:	0000e0b1 	.word	0x0000e0b1

0000e19c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e19c:	b480      	push	{r7}
    e19e:	b085      	sub	sp, #20
    e1a0:	af00      	add	r7, sp, #0
    e1a2:	6078      	str	r0, [r7, #4]
    e1a4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e1a6:	2300      	movs	r3, #0
    e1a8:	73fb      	strb	r3, [r7, #15]
    e1aa:	7bfb      	ldrb	r3, [r7, #15]
    e1ac:	2b1f      	cmp	r3, #31
    e1ae:	dc19      	bgt.n	e1e4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e1b0:	7bfa      	ldrb	r2, [r7, #15]
    e1b2:	490f      	ldr	r1, [pc, #60]	; (e1f0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e1b4:	4613      	mov	r3, r2
    e1b6:	009b      	lsls	r3, r3, #2
    e1b8:	4413      	add	r3, r2
    e1ba:	009b      	lsls	r3, r3, #2
    e1bc:	440b      	add	r3, r1
    e1be:	330c      	adds	r3, #12
    e1c0:	681a      	ldr	r2, [r3, #0]
    e1c2:	683b      	ldr	r3, [r7, #0]
    e1c4:	429a      	cmp	r2, r3
    e1c6:	d109      	bne.n	e1dc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e1c8:	7bfa      	ldrb	r2, [r7, #15]
    e1ca:	4613      	mov	r3, r2
    e1cc:	009b      	lsls	r3, r3, #2
    e1ce:	4413      	add	r3, r2
    e1d0:	009b      	lsls	r3, r3, #2
    e1d2:	4a07      	ldr	r2, [pc, #28]	; (e1f0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e1d4:	441a      	add	r2, r3
    e1d6:	687b      	ldr	r3, [r7, #4]
    e1d8:	619a      	str	r2, [r3, #24]
			return;
    e1da:	e004      	b.n	e1e6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e1dc:	7bfb      	ldrb	r3, [r7, #15]
    e1de:	3301      	adds	r3, #1
    e1e0:	73fb      	strb	r3, [r7, #15]
    e1e2:	e7e2      	b.n	e1aa <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e1e4:	bf00      	nop
}
    e1e6:	3714      	adds	r7, #20
    e1e8:	46bd      	mov	sp, r7
    e1ea:	bc80      	pop	{r7}
    e1ec:	4770      	bx	lr
    e1ee:	bf00      	nop
    e1f0:	2000149c 	.word	0x2000149c

0000e1f4 <_Z41__static_initialization_and_destruction_0ii>:
    e1f4:	b580      	push	{r7, lr}
    e1f6:	b082      	sub	sp, #8
    e1f8:	af00      	add	r7, sp, #0
    e1fa:	6078      	str	r0, [r7, #4]
    e1fc:	6039      	str	r1, [r7, #0]
    e1fe:	687b      	ldr	r3, [r7, #4]
    e200:	2b01      	cmp	r3, #1
    e202:	d14c      	bne.n	e29e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e204:	683b      	ldr	r3, [r7, #0]
    e206:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e20a:	4293      	cmp	r3, r2
    e20c:	d147      	bne.n	e29e <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e20e:	4926      	ldr	r1, [pc, #152]	; (e2a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e210:	4826      	ldr	r0, [pc, #152]	; (e2ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e212:	4b27      	ldr	r3, [pc, #156]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e214:	4798      	blx	r3
    e216:	4a27      	ldr	r2, [pc, #156]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e218:	4927      	ldr	r1, [pc, #156]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e21a:	4824      	ldr	r0, [pc, #144]	; (e2ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e21c:	4b27      	ldr	r3, [pc, #156]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e21e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e220:	4927      	ldr	r1, [pc, #156]	; (e2c0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e222:	4828      	ldr	r0, [pc, #160]	; (e2c4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e224:	4b22      	ldr	r3, [pc, #136]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e226:	4798      	blx	r3
    e228:	4a22      	ldr	r2, [pc, #136]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e22a:	4923      	ldr	r1, [pc, #140]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e22c:	4825      	ldr	r0, [pc, #148]	; (e2c4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e22e:	4b23      	ldr	r3, [pc, #140]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e230:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e232:	4925      	ldr	r1, [pc, #148]	; (e2c8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e234:	4825      	ldr	r0, [pc, #148]	; (e2cc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e236:	4b1e      	ldr	r3, [pc, #120]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e238:	4798      	blx	r3
    e23a:	4a1e      	ldr	r2, [pc, #120]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e23c:	491e      	ldr	r1, [pc, #120]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e23e:	4823      	ldr	r0, [pc, #140]	; (e2cc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e240:	4b1e      	ldr	r3, [pc, #120]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e242:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e244:	4922      	ldr	r1, [pc, #136]	; (e2d0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e246:	4823      	ldr	r0, [pc, #140]	; (e2d4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e248:	4b19      	ldr	r3, [pc, #100]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e24a:	4798      	blx	r3
    e24c:	4a19      	ldr	r2, [pc, #100]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e24e:	491a      	ldr	r1, [pc, #104]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e250:	4820      	ldr	r0, [pc, #128]	; (e2d4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e252:	4b1a      	ldr	r3, [pc, #104]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e254:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e256:	4920      	ldr	r1, [pc, #128]	; (e2d8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e258:	4820      	ldr	r0, [pc, #128]	; (e2dc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e25a:	4b15      	ldr	r3, [pc, #84]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e25c:	4798      	blx	r3
    e25e:	4a15      	ldr	r2, [pc, #84]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e260:	4915      	ldr	r1, [pc, #84]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e262:	481e      	ldr	r0, [pc, #120]	; (e2dc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e264:	4b15      	ldr	r3, [pc, #84]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e266:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e268:	491d      	ldr	r1, [pc, #116]	; (e2e0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e26a:	481e      	ldr	r0, [pc, #120]	; (e2e4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e26c:	4b10      	ldr	r3, [pc, #64]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e26e:	4798      	blx	r3
    e270:	4a10      	ldr	r2, [pc, #64]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e272:	4911      	ldr	r1, [pc, #68]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e274:	481b      	ldr	r0, [pc, #108]	; (e2e4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e276:	4b11      	ldr	r3, [pc, #68]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e278:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e27a:	491b      	ldr	r1, [pc, #108]	; (e2e8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e27c:	481b      	ldr	r0, [pc, #108]	; (e2ec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e27e:	4b0c      	ldr	r3, [pc, #48]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e280:	4798      	blx	r3
    e282:	4a0c      	ldr	r2, [pc, #48]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e284:	490c      	ldr	r1, [pc, #48]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e286:	4819      	ldr	r0, [pc, #100]	; (e2ec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e288:	4b0c      	ldr	r3, [pc, #48]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e28a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e28c:	4918      	ldr	r1, [pc, #96]	; (e2f0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e28e:	4819      	ldr	r0, [pc, #100]	; (e2f4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e290:	4b07      	ldr	r3, [pc, #28]	; (e2b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e292:	4798      	blx	r3
    e294:	4a07      	ldr	r2, [pc, #28]	; (e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e296:	4908      	ldr	r1, [pc, #32]	; (e2b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e298:	4816      	ldr	r0, [pc, #88]	; (e2f4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e29a:	4b08      	ldr	r3, [pc, #32]	; (e2bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e29c:	4798      	blx	r3
    e29e:	bf00      	nop
    e2a0:	3708      	adds	r7, #8
    e2a2:	46bd      	mov	sp, r7
    e2a4:	bd80      	pop	{r7, pc}
    e2a6:	bf00      	nop
    e2a8:	20009f88 	.word	0x20009f88
    e2ac:	20001398 	.word	0x20001398
    e2b0:	0000dd8d 	.word	0x0000dd8d
    e2b4:	20000000 	.word	0x20000000
    e2b8:	0000ddc5 	.word	0x0000ddc5
    e2bc:	000135c5 	.word	0x000135c5
    e2c0:	2000a01c 	.word	0x2000a01c
    e2c4:	200013b8 	.word	0x200013b8
    e2c8:	2000a140 	.word	0x2000a140
    e2cc:	200013d8 	.word	0x200013d8
    e2d0:	2000a03c 	.word	0x2000a03c
    e2d4:	200013f8 	.word	0x200013f8
    e2d8:	2000a100 	.word	0x2000a100
    e2dc:	20001418 	.word	0x20001418
    e2e0:	2000a120 	.word	0x2000a120
    e2e4:	20001438 	.word	0x20001438
    e2e8:	20009ff8 	.word	0x20009ff8
    e2ec:	20001458 	.word	0x20001458
    e2f0:	2000a098 	.word	0x2000a098
    e2f4:	20001478 	.word	0x20001478

0000e2f8 <_GLOBAL__sub_I_ptrTimerClass>:
    e2f8:	b580      	push	{r7, lr}
    e2fa:	af00      	add	r7, sp, #0
    e2fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e300:	2001      	movs	r0, #1
    e302:	4b01      	ldr	r3, [pc, #4]	; (e308 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e304:	4798      	blx	r3
    e306:	bd80      	pop	{r7, pc}
    e308:	0000e1f5 	.word	0x0000e1f5

0000e30c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e30c:	b480      	push	{r7}
    e30e:	b083      	sub	sp, #12
    e310:	af00      	add	r7, sp, #0
    e312:	6078      	str	r0, [r7, #4]
    e314:	4a05      	ldr	r2, [pc, #20]	; (e32c <_ZN5PrintC1Ev+0x20>)
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	601a      	str	r2, [r3, #0]
    e31a:	687b      	ldr	r3, [r7, #4]
    e31c:	2200      	movs	r2, #0
    e31e:	605a      	str	r2, [r3, #4]
    e320:	687b      	ldr	r3, [r7, #4]
    e322:	4618      	mov	r0, r3
    e324:	370c      	adds	r7, #12
    e326:	46bd      	mov	sp, r7
    e328:	bc80      	pop	{r7}
    e32a:	4770      	bx	lr
    e32c:	000143cc 	.word	0x000143cc

0000e330 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e330:	b480      	push	{r7}
    e332:	b083      	sub	sp, #12
    e334:	af00      	add	r7, sp, #0
    e336:	6078      	str	r0, [r7, #4]
    e338:	2300      	movs	r3, #0
    e33a:	4618      	mov	r0, r3
    e33c:	370c      	adds	r7, #12
    e33e:	46bd      	mov	sp, r7
    e340:	bc80      	pop	{r7}
    e342:	4770      	bx	lr

0000e344 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e344:	b480      	push	{r7}
    e346:	b083      	sub	sp, #12
    e348:	af00      	add	r7, sp, #0
    e34a:	6078      	str	r0, [r7, #4]
    e34c:	bf00      	nop
    e34e:	370c      	adds	r7, #12
    e350:	46bd      	mov	sp, r7
    e352:	bc80      	pop	{r7}
    e354:	4770      	bx	lr
	...

0000e358 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e358:	b580      	push	{r7, lr}
    e35a:	b082      	sub	sp, #8
    e35c:	af00      	add	r7, sp, #0
    e35e:	6078      	str	r0, [r7, #4]
    e360:	687b      	ldr	r3, [r7, #4]
    e362:	4618      	mov	r0, r3
    e364:	4b06      	ldr	r3, [pc, #24]	; (e380 <_ZN6StreamC1Ev+0x28>)
    e366:	4798      	blx	r3
    e368:	4a06      	ldr	r2, [pc, #24]	; (e384 <_ZN6StreamC1Ev+0x2c>)
    e36a:	687b      	ldr	r3, [r7, #4]
    e36c:	601a      	str	r2, [r3, #0]
    e36e:	687b      	ldr	r3, [r7, #4]
    e370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e374:	609a      	str	r2, [r3, #8]
    e376:	687b      	ldr	r3, [r7, #4]
    e378:	4618      	mov	r0, r3
    e37a:	3708      	adds	r7, #8
    e37c:	46bd      	mov	sp, r7
    e37e:	bd80      	pop	{r7, pc}
    e380:	0000e30d 	.word	0x0000e30d
    e384:	00014390 	.word	0x00014390

0000e388 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e388:	b480      	push	{r7}
    e38a:	b083      	sub	sp, #12
    e38c:	af00      	add	r7, sp, #0
    e38e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e390:	4b06      	ldr	r3, [pc, #24]	; (e3ac <_ZL10USBTimeoutPK10timer_task+0x24>)
    e392:	681b      	ldr	r3, [r3, #0]
    e394:	2201      	movs	r2, #1
    e396:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e398:	4b04      	ldr	r3, [pc, #16]	; (e3ac <_ZL10USBTimeoutPK10timer_task+0x24>)
    e39a:	681b      	ldr	r3, [r3, #0]
    e39c:	2200      	movs	r2, #0
    e39e:	741a      	strb	r2, [r3, #16]
	
}
    e3a0:	bf00      	nop
    e3a2:	370c      	adds	r7, #12
    e3a4:	46bd      	mov	sp, r7
    e3a6:	bc80      	pop	{r7}
    e3a8:	4770      	bx	lr
    e3aa:	bf00      	nop
    e3ac:	200018a0 	.word	0x200018a0

0000e3b0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e3b0:	b480      	push	{r7}
    e3b2:	b083      	sub	sp, #12
    e3b4:	af00      	add	r7, sp, #0
    e3b6:	4603      	mov	r3, r0
    e3b8:	603a      	str	r2, [r7, #0]
    e3ba:	71fb      	strb	r3, [r7, #7]
    e3bc:	460b      	mov	r3, r1
    e3be:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e3c0:	4b08      	ldr	r3, [pc, #32]	; (e3e4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e3c2:	681b      	ldr	r3, [r3, #0]
    e3c4:	2201      	movs	r2, #1
    e3c6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e3c8:	4b06      	ldr	r3, [pc, #24]	; (e3e4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e3ca:	681b      	ldr	r3, [r3, #0]
    e3cc:	2201      	movs	r2, #1
    e3ce:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e3d0:	4b04      	ldr	r3, [pc, #16]	; (e3e4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e3d2:	681b      	ldr	r3, [r3, #0]
    e3d4:	2201      	movs	r2, #1
    e3d6:	741a      	strb	r2, [r3, #16]


	return false;
    e3d8:	2300      	movs	r3, #0
}
    e3da:	4618      	mov	r0, r3
    e3dc:	370c      	adds	r7, #12
    e3de:	46bd      	mov	sp, r7
    e3e0:	bc80      	pop	{r7}
    e3e2:	4770      	bx	lr
    e3e4:	200018a0 	.word	0x200018a0

0000e3e8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e3e8:	b480      	push	{r7}
    e3ea:	b083      	sub	sp, #12
    e3ec:	af00      	add	r7, sp, #0
    e3ee:	4603      	mov	r3, r0
    e3f0:	603a      	str	r2, [r7, #0]
    e3f2:	71fb      	strb	r3, [r7, #7]
    e3f4:	460b      	mov	r3, r1
    e3f6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e3f8:	4b08      	ldr	r3, [pc, #32]	; (e41c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e3fa:	681b      	ldr	r3, [r3, #0]
    e3fc:	2201      	movs	r2, #1
    e3fe:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e400:	4b06      	ldr	r3, [pc, #24]	; (e41c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e402:	681b      	ldr	r3, [r3, #0]
    e404:	2201      	movs	r2, #1
    e406:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e408:	4b04      	ldr	r3, [pc, #16]	; (e41c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e40a:	681b      	ldr	r3, [r3, #0]
    e40c:	2201      	movs	r2, #1
    e40e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e410:	2300      	movs	r3, #0
}
    e412:	4618      	mov	r0, r3
    e414:	370c      	adds	r7, #12
    e416:	46bd      	mov	sp, r7
    e418:	bc80      	pop	{r7}
    e41a:	4770      	bx	lr
    e41c:	200018a0 	.word	0x200018a0

0000e420 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e420:	b580      	push	{r7, lr}
    e422:	b082      	sub	sp, #8
    e424:	af00      	add	r7, sp, #0
    e426:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e428:	793b      	ldrb	r3, [r7, #4]
    e42a:	f003 0301 	and.w	r3, r3, #1
    e42e:	b2db      	uxtb	r3, r3
    e430:	2b00      	cmp	r3, #0
    e432:	d013      	beq.n	e45c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e434:	490c      	ldr	r1, [pc, #48]	; (e468 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e436:	2000      	movs	r0, #0
    e438:	4b0c      	ldr	r3, [pc, #48]	; (e46c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e43a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e43c:	490c      	ldr	r1, [pc, #48]	; (e470 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e43e:	2001      	movs	r0, #1
    e440:	4b0a      	ldr	r3, [pc, #40]	; (e46c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e442:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e444:	4b0b      	ldr	r3, [pc, #44]	; (e474 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e446:	681b      	ldr	r3, [r3, #0]
    e448:	2201      	movs	r2, #1
    e44a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e44c:	4b09      	ldr	r3, [pc, #36]	; (e474 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e44e:	681b      	ldr	r3, [r3, #0]
    e450:	2201      	movs	r2, #1
    e452:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e454:	4b07      	ldr	r3, [pc, #28]	; (e474 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e456:	681b      	ldr	r3, [r3, #0]
    e458:	2201      	movs	r2, #1
    e45a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e45c:	2300      	movs	r3, #0
}
    e45e:	4618      	mov	r0, r3
    e460:	3708      	adds	r7, #8
    e462:	46bd      	mov	sp, r7
    e464:	bd80      	pop	{r7, pc}
    e466:	bf00      	nop
    e468:	0000e3b1 	.word	0x0000e3b1
    e46c:	0000cbf9 	.word	0x0000cbf9
    e470:	0000e3e9 	.word	0x0000e3e9
    e474:	200018a0 	.word	0x200018a0

0000e478 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e478:	b580      	push	{r7, lr}
    e47a:	b082      	sub	sp, #8
    e47c:	af00      	add	r7, sp, #0
    e47e:	6078      	str	r0, [r7, #4]
    e480:	687b      	ldr	r3, [r7, #4]
    e482:	4618      	mov	r0, r3
    e484:	4b0a      	ldr	r3, [pc, #40]	; (e4b0 <_ZN9CDC_ClassC1Ev+0x38>)
    e486:	4798      	blx	r3
    e488:	687b      	ldr	r3, [r7, #4]
    e48a:	3310      	adds	r3, #16
    e48c:	4618      	mov	r0, r3
    e48e:	4b09      	ldr	r3, [pc, #36]	; (e4b4 <_ZN9CDC_ClassC1Ev+0x3c>)
    e490:	4798      	blx	r3
    e492:	4a09      	ldr	r2, [pc, #36]	; (e4b8 <_ZN9CDC_ClassC1Ev+0x40>)
    e494:	687b      	ldr	r3, [r7, #4]
    e496:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e498:	687b      	ldr	r3, [r7, #4]
    e49a:	f04f 32ff 	mov.w	r2, #4294967295
    e49e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e4a0:	4a06      	ldr	r2, [pc, #24]	; (e4bc <_ZN9CDC_ClassC1Ev+0x44>)
    e4a2:	687b      	ldr	r3, [r7, #4]
    e4a4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e4a6:	687b      	ldr	r3, [r7, #4]
    e4a8:	4618      	mov	r0, r3
    e4aa:	3708      	adds	r7, #8
    e4ac:	46bd      	mov	sp, r7
    e4ae:	bd80      	pop	{r7, pc}
    e4b0:	0000e359 	.word	0x0000e359
    e4b4:	0000ebf1 	.word	0x0000ebf1
    e4b8:	00014360 	.word	0x00014360
    e4bc:	200018a0 	.word	0x200018a0

0000e4c0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e4c0:	b580      	push	{r7, lr}
    e4c2:	b082      	sub	sp, #8
    e4c4:	af00      	add	r7, sp, #0
    e4c6:	6078      	str	r0, [r7, #4]
    e4c8:	4a06      	ldr	r2, [pc, #24]	; (e4e4 <_ZN9CDC_ClassD1Ev+0x24>)
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	601a      	str	r2, [r3, #0]
    e4ce:	687b      	ldr	r3, [r7, #4]
    e4d0:	3310      	adds	r3, #16
    e4d2:	4618      	mov	r0, r3
    e4d4:	4b04      	ldr	r3, [pc, #16]	; (e4e8 <_ZN9CDC_ClassD1Ev+0x28>)
    e4d6:	4798      	blx	r3
{
} //~CDC_Class
    e4d8:	687b      	ldr	r3, [r7, #4]
    e4da:	4618      	mov	r0, r3
    e4dc:	3708      	adds	r7, #8
    e4de:	46bd      	mov	sp, r7
    e4e0:	bd80      	pop	{r7, pc}
    e4e2:	bf00      	nop
    e4e4:	00014360 	.word	0x00014360
    e4e8:	0000ec11 	.word	0x0000ec11

0000e4ec <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e4ec:	b580      	push	{r7, lr}
    e4ee:	b082      	sub	sp, #8
    e4f0:	af00      	add	r7, sp, #0
    e4f2:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	3310      	adds	r3, #16
    e4f8:	4618      	mov	r0, r3
    e4fa:	4b09      	ldr	r3, [pc, #36]	; (e520 <_ZN9CDC_Class4InitEv+0x34>)
    e4fc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e4fe:	4909      	ldr	r1, [pc, #36]	; (e524 <_ZN9CDC_Class4InitEv+0x38>)
    e500:	2003      	movs	r0, #3
    e502:	4b09      	ldr	r3, [pc, #36]	; (e528 <_ZN9CDC_Class4InitEv+0x3c>)
    e504:	4798      	blx	r3
	delay_ms(100);
    e506:	2064      	movs	r0, #100	; 0x64
    e508:	4b08      	ldr	r3, [pc, #32]	; (e52c <_ZN9CDC_Class4InitEv+0x40>)
    e50a:	4798      	blx	r3
		
	if (connected)
    e50c:	687b      	ldr	r3, [r7, #4]
    e50e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e510:	2064      	movs	r0, #100	; 0x64
    e512:	4b06      	ldr	r3, [pc, #24]	; (e52c <_ZN9CDC_Class4InitEv+0x40>)
    e514:	4798      	blx	r3

	

}
    e516:	bf00      	nop
    e518:	3708      	adds	r7, #8
    e51a:	46bd      	mov	sp, r7
    e51c:	bd80      	pop	{r7, pc}
    e51e:	bf00      	nop
    e520:	0000ec25 	.word	0x0000ec25
    e524:	0000e421 	.word	0x0000e421
    e528:	0000cbf9 	.word	0x0000cbf9
    e52c:	00002a99 	.word	0x00002a99

0000e530 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e530:	b580      	push	{r7, lr}
    e532:	b082      	sub	sp, #8
    e534:	af00      	add	r7, sp, #0
    e536:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e538:	4b03      	ldr	r3, [pc, #12]	; (e548 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e53a:	4798      	blx	r3
    e53c:	4603      	mov	r3, r0
	
}
    e53e:	4618      	mov	r0, r3
    e540:	3708      	adds	r7, #8
    e542:	46bd      	mov	sp, r7
    e544:	bd80      	pop	{r7, pc}
    e546:	bf00      	nop
    e548:	0000cc71 	.word	0x0000cc71

0000e54c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e54c:	b580      	push	{r7, lr}
    e54e:	b084      	sub	sp, #16
    e550:	af00      	add	r7, sp, #0
    e552:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	699b      	ldr	r3, [r3, #24]
    e558:	f1b3 3fff 	cmp.w	r3, #4294967295
    e55c:	bf14      	ite	ne
    e55e:	2301      	movne	r3, #1
    e560:	2300      	moveq	r3, #0
    e562:	b2db      	uxtb	r3, r3
    e564:	2b00      	cmp	r3, #0
    e566:	d002      	beq.n	e56e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	699b      	ldr	r3, [r3, #24]
    e56c:	e011      	b.n	e592 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	681b      	ldr	r3, [r3, #0]
    e572:	331c      	adds	r3, #28
    e574:	681b      	ldr	r3, [r3, #0]
    e576:	f107 010f 	add.w	r1, r7, #15
    e57a:	2201      	movs	r2, #1
    e57c:	6878      	ldr	r0, [r7, #4]
    e57e:	4798      	blx	r3
    e580:	4602      	mov	r2, r0
    e582:	687b      	ldr	r3, [r7, #4]
    e584:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e586:	7bfb      	ldrb	r3, [r7, #15]
    e588:	461a      	mov	r2, r3
    e58a:	687b      	ldr	r3, [r7, #4]
    e58c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e58e:	687b      	ldr	r3, [r7, #4]
    e590:	699b      	ldr	r3, [r3, #24]
}
    e592:	4618      	mov	r0, r3
    e594:	3710      	adds	r7, #16
    e596:	46bd      	mov	sp, r7
    e598:	bd80      	pop	{r7, pc}
	...

0000e59c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e59c:	b580      	push	{r7, lr}
    e59e:	b086      	sub	sp, #24
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	60f8      	str	r0, [r7, #12]
    e5a4:	60b9      	str	r1, [r7, #8]
    e5a6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e5a8:	68fb      	ldr	r3, [r7, #12]
    e5aa:	7c1b      	ldrb	r3, [r3, #16]
    e5ac:	b2db      	uxtb	r3, r3
    e5ae:	2b00      	cmp	r3, #0
    e5b0:	d02e      	beq.n	e610 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e5b2:	687a      	ldr	r2, [r7, #4]
    e5b4:	4613      	mov	r3, r2
    e5b6:	009b      	lsls	r3, r3, #2
    e5b8:	4413      	add	r3, r2
    e5ba:	005b      	lsls	r3, r3, #1
    e5bc:	461a      	mov	r2, r3
    e5be:	4918      	ldr	r1, [pc, #96]	; (e620 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e5c0:	4818      	ldr	r0, [pc, #96]	; (e624 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e5c2:	4b19      	ldr	r3, [pc, #100]	; (e628 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e5c4:	4798      	blx	r3
		rxReady=false;
    e5c6:	68fb      	ldr	r3, [r7, #12]
    e5c8:	2200      	movs	r2, #0
    e5ca:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	4619      	mov	r1, r3
    e5d0:	68b8      	ldr	r0, [r7, #8]
    e5d2:	4b16      	ldr	r3, [pc, #88]	; (e62c <_ZN9CDC_Class8readDataEPvl+0x90>)
    e5d4:	4798      	blx	r3
    e5d6:	4603      	mov	r3, r0
    e5d8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e5da:	68fb      	ldr	r3, [r7, #12]
    e5dc:	7d5b      	ldrb	r3, [r3, #21]
    e5de:	b2db      	uxtb	r3, r3
    e5e0:	f083 0301 	eor.w	r3, r3, #1
    e5e4:	b2db      	uxtb	r3, r3
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d006      	beq.n	e5f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e5ea:	68fb      	ldr	r3, [r7, #12]
    e5ec:	7c1b      	ldrb	r3, [r3, #16]
    e5ee:	b2db      	uxtb	r3, r3
    e5f0:	2b00      	cmp	r3, #0
    e5f2:	d001      	beq.n	e5f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e5f4:	2301      	movs	r3, #1
    e5f6:	e000      	b.n	e5fa <_ZN9CDC_Class8readDataEPvl+0x5e>
    e5f8:	2300      	movs	r3, #0
    e5fa:	2b00      	cmp	r3, #0
    e5fc:	d000      	beq.n	e600 <_ZN9CDC_Class8readDataEPvl+0x64>
    e5fe:	e7ec      	b.n	e5da <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e600:	4808      	ldr	r0, [pc, #32]	; (e624 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e602:	4b0b      	ldr	r3, [pc, #44]	; (e630 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e604:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e606:	4906      	ldr	r1, [pc, #24]	; (e620 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e608:	4806      	ldr	r0, [pc, #24]	; (e624 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e60a:	4b0a      	ldr	r3, [pc, #40]	; (e634 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e60c:	4798      	blx	r3
    e60e:	e001      	b.n	e614 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e610:	2300      	movs	r3, #0
    e612:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e614:	7dfb      	ldrb	r3, [r7, #23]
}
    e616:	4618      	mov	r0, r3
    e618:	3718      	adds	r7, #24
    e61a:	46bd      	mov	sp, r7
    e61c:	bd80      	pop	{r7, pc}
    e61e:	bf00      	nop
    e620:	0000e389 	.word	0x0000e389
    e624:	20001840 	.word	0x20001840
    e628:	0000e061 	.word	0x0000e061
    e62c:	0000cb4d 	.word	0x0000cb4d
    e630:	0000deed 	.word	0x0000deed
    e634:	0000e009 	.word	0x0000e009

0000e638 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    e638:	b580      	push	{r7, lr}
    e63a:	b086      	sub	sp, #24
    e63c:	af00      	add	r7, sp, #0
    e63e:	60f8      	str	r0, [r7, #12]
    e640:	60b9      	str	r1, [r7, #8]
    e642:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    e644:	68fb      	ldr	r3, [r7, #12]
    e646:	2200      	movs	r2, #0
    e648:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    e64a:	687b      	ldr	r3, [r7, #4]
    e64c:	4619      	mov	r1, r3
    e64e:	68b8      	ldr	r0, [r7, #8]
    e650:	4b04      	ldr	r3, [pc, #16]	; (e664 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    e652:	4798      	blx	r3
    e654:	4603      	mov	r3, r0
    e656:	617b      	str	r3, [r7, #20]
	return r;
    e658:	697b      	ldr	r3, [r7, #20]
}
    e65a:	4618      	mov	r0, r3
    e65c:	3718      	adds	r7, #24
    e65e:	46bd      	mov	sp, r7
    e660:	bd80      	pop	{r7, pc}
    e662:	bf00      	nop
    e664:	0000cb4d 	.word	0x0000cb4d

0000e668 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    e668:	b580      	push	{r7, lr}
    e66a:	b084      	sub	sp, #16
    e66c:	af00      	add	r7, sp, #0
    e66e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	2200      	movs	r2, #0
    e674:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e676:	f107 030f 	add.w	r3, r7, #15
    e67a:	2101      	movs	r1, #1
    e67c:	4618      	mov	r0, r3
    e67e:	4b08      	ldr	r3, [pc, #32]	; (e6a0 <_ZN9CDC_Class4readEv+0x38>)
    e680:	4798      	blx	r3
	while(!rxReady);
    e682:	687b      	ldr	r3, [r7, #4]
    e684:	7d5b      	ldrb	r3, [r3, #21]
    e686:	b2db      	uxtb	r3, r3
    e688:	f083 0301 	eor.w	r3, r3, #1
    e68c:	b2db      	uxtb	r3, r3
    e68e:	2b00      	cmp	r3, #0
    e690:	d000      	beq.n	e694 <_ZN9CDC_Class4readEv+0x2c>
    e692:	e7f6      	b.n	e682 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e694:	7bfb      	ldrb	r3, [r7, #15]
}
    e696:	4618      	mov	r0, r3
    e698:	3710      	adds	r7, #16
    e69a:	46bd      	mov	sp, r7
    e69c:	bd80      	pop	{r7, pc}
    e69e:	bf00      	nop
    e6a0:	0000cb4d 	.word	0x0000cb4d

0000e6a4 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e6a4:	b580      	push	{r7, lr}
    e6a6:	b082      	sub	sp, #8
    e6a8:	af00      	add	r7, sp, #0
    e6aa:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e6ac:	687b      	ldr	r3, [r7, #4]
    e6ae:	331c      	adds	r3, #28
    e6b0:	2140      	movs	r1, #64	; 0x40
    e6b2:	4618      	mov	r0, r3
    e6b4:	4b02      	ldr	r3, [pc, #8]	; (e6c0 <_ZN9CDC_Class5flushEv+0x1c>)
    e6b6:	4798      	blx	r3
}
    e6b8:	bf00      	nop
    e6ba:	3708      	adds	r7, #8
    e6bc:	46bd      	mov	sp, r7
    e6be:	bd80      	pop	{r7, pc}
    e6c0:	0000cb91 	.word	0x0000cb91

0000e6c4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e6c4:	b580      	push	{r7, lr}
    e6c6:	b082      	sub	sp, #8
    e6c8:	af00      	add	r7, sp, #0
    e6ca:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e6cc:	4b02      	ldr	r3, [pc, #8]	; (e6d8 <_ZN9CDC_Class5clearEv+0x14>)
    e6ce:	4798      	blx	r3
}
    e6d0:	bf00      	nop
    e6d2:	3708      	adds	r7, #8
    e6d4:	46bd      	mov	sp, r7
    e6d6:	bd80      	pop	{r7, pc}
    e6d8:	0000cbd5 	.word	0x0000cbd5

0000e6dc <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e6dc:	b580      	push	{r7, lr}
    e6de:	b082      	sub	sp, #8
    e6e0:	af00      	add	r7, sp, #0
    e6e2:	6078      	str	r0, [r7, #4]
    e6e4:	460b      	mov	r3, r1
    e6e6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e6e8:	687b      	ldr	r3, [r7, #4]
    e6ea:	7c1b      	ldrb	r3, [r3, #16]
    e6ec:	b2db      	uxtb	r3, r3
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d012      	beq.n	e718 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e6f2:	687b      	ldr	r3, [r7, #4]
    e6f4:	7d1b      	ldrb	r3, [r3, #20]
    e6f6:	b2db      	uxtb	r3, r3
    e6f8:	f083 0301 	eor.w	r3, r3, #1
    e6fc:	b2db      	uxtb	r3, r3
    e6fe:	2b00      	cmp	r3, #0
    e700:	d000      	beq.n	e704 <_ZN9CDC_Class5writeEh+0x28>
    e702:	e7f6      	b.n	e6f2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e704:	687b      	ldr	r3, [r7, #4]
    e706:	681b      	ldr	r3, [r3, #0]
    e708:	3324      	adds	r3, #36	; 0x24
    e70a:	681b      	ldr	r3, [r3, #0]
    e70c:	1cf9      	adds	r1, r7, #3
    e70e:	2201      	movs	r2, #1
    e710:	6878      	ldr	r0, [r7, #4]
    e712:	4798      	blx	r3
    e714:	4603      	mov	r3, r0
    e716:	e000      	b.n	e71a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e718:	2300      	movs	r3, #0
	}
		
}
    e71a:	4618      	mov	r0, r3
    e71c:	3708      	adds	r7, #8
    e71e:	46bd      	mov	sp, r7
    e720:	bd80      	pop	{r7, pc}
	...

0000e724 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e724:	b580      	push	{r7, lr}
    e726:	b086      	sub	sp, #24
    e728:	af00      	add	r7, sp, #0
    e72a:	60f8      	str	r0, [r7, #12]
    e72c:	60b9      	str	r1, [r7, #8]
    e72e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e730:	68fb      	ldr	r3, [r7, #12]
    e732:	7c1b      	ldrb	r3, [r3, #16]
    e734:	b2db      	uxtb	r3, r3
    e736:	2b00      	cmp	r3, #0
    e738:	d02f      	beq.n	e79a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e73a:	687a      	ldr	r2, [r7, #4]
    e73c:	4613      	mov	r3, r2
    e73e:	009b      	lsls	r3, r3, #2
    e740:	4413      	add	r3, r2
    e742:	005b      	lsls	r3, r3, #1
    e744:	461a      	mov	r2, r3
    e746:	4917      	ldr	r1, [pc, #92]	; (e7a4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e748:	4817      	ldr	r0, [pc, #92]	; (e7a8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e74a:	4b18      	ldr	r3, [pc, #96]	; (e7ac <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e74c:	4798      	blx	r3
		txReady=false;
    e74e:	68fb      	ldr	r3, [r7, #12]
    e750:	2200      	movs	r2, #0
    e752:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e754:	687b      	ldr	r3, [r7, #4]
    e756:	4619      	mov	r1, r3
    e758:	68b8      	ldr	r0, [r7, #8]
    e75a:	4b15      	ldr	r3, [pc, #84]	; (e7b0 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e75c:	4798      	blx	r3
    e75e:	4603      	mov	r3, r0
    e760:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e762:	68fb      	ldr	r3, [r7, #12]
    e764:	7d1b      	ldrb	r3, [r3, #20]
    e766:	b2db      	uxtb	r3, r3
    e768:	f083 0301 	eor.w	r3, r3, #1
    e76c:	b2db      	uxtb	r3, r3
    e76e:	2b00      	cmp	r3, #0
    e770:	d006      	beq.n	e780 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e772:	68fb      	ldr	r3, [r7, #12]
    e774:	7c1b      	ldrb	r3, [r3, #16]
    e776:	b2db      	uxtb	r3, r3
    e778:	2b00      	cmp	r3, #0
    e77a:	d001      	beq.n	e780 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e77c:	2301      	movs	r3, #1
    e77e:	e000      	b.n	e782 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e780:	2300      	movs	r3, #0
    e782:	2b00      	cmp	r3, #0
    e784:	d000      	beq.n	e788 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e786:	e7ec      	b.n	e762 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e788:	4807      	ldr	r0, [pc, #28]	; (e7a8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e78a:	4b0a      	ldr	r3, [pc, #40]	; (e7b4 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e78c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e78e:	4905      	ldr	r1, [pc, #20]	; (e7a4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e790:	4805      	ldr	r0, [pc, #20]	; (e7a8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e792:	4b09      	ldr	r3, [pc, #36]	; (e7b8 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e794:	4798      	blx	r3
		return r;
    e796:	697b      	ldr	r3, [r7, #20]
    e798:	e000      	b.n	e79c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e79a:	2300      	movs	r3, #0
	}
	

}
    e79c:	4618      	mov	r0, r3
    e79e:	3718      	adds	r7, #24
    e7a0:	46bd      	mov	sp, r7
    e7a2:	bd80      	pop	{r7, pc}
    e7a4:	0000e389 	.word	0x0000e389
    e7a8:	20001840 	.word	0x20001840
    e7ac:	0000e061 	.word	0x0000e061
    e7b0:	0000cb91 	.word	0x0000cb91
    e7b4:	0000deed 	.word	0x0000deed
    e7b8:	0000e009 	.word	0x0000e009

0000e7bc <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e7bc:	b580      	push	{r7, lr}
    e7be:	b086      	sub	sp, #24
    e7c0:	af00      	add	r7, sp, #0
    e7c2:	60f8      	str	r0, [r7, #12]
    e7c4:	60b9      	str	r1, [r7, #8]
    e7c6:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e7c8:	68fb      	ldr	r3, [r7, #12]
    e7ca:	2200      	movs	r2, #0
    e7cc:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e7ce:	68fb      	ldr	r3, [r7, #12]
    e7d0:	7c1b      	ldrb	r3, [r3, #16]
    e7d2:	b2db      	uxtb	r3, r3
    e7d4:	2b00      	cmp	r3, #0
    e7d6:	d02a      	beq.n	e82e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e7d8:	687a      	ldr	r2, [r7, #4]
    e7da:	4613      	mov	r3, r2
    e7dc:	009b      	lsls	r3, r3, #2
    e7de:	4413      	add	r3, r2
    e7e0:	005b      	lsls	r3, r3, #1
    e7e2:	461a      	mov	r2, r3
    e7e4:	4915      	ldr	r1, [pc, #84]	; (e83c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e7e6:	4816      	ldr	r0, [pc, #88]	; (e840 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e7e8:	4b16      	ldr	r3, [pc, #88]	; (e844 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e7ea:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e7ec:	6879      	ldr	r1, [r7, #4]
    e7ee:	68b8      	ldr	r0, [r7, #8]
    e7f0:	4b15      	ldr	r3, [pc, #84]	; (e848 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e7f2:	4798      	blx	r3
    e7f4:	4603      	mov	r3, r0
    e7f6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e7f8:	68fb      	ldr	r3, [r7, #12]
    e7fa:	7d1b      	ldrb	r3, [r3, #20]
    e7fc:	b2db      	uxtb	r3, r3
    e7fe:	f083 0301 	eor.w	r3, r3, #1
    e802:	b2db      	uxtb	r3, r3
    e804:	2b00      	cmp	r3, #0
    e806:	d006      	beq.n	e816 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e808:	68fb      	ldr	r3, [r7, #12]
    e80a:	7c1b      	ldrb	r3, [r3, #16]
    e80c:	b2db      	uxtb	r3, r3
    e80e:	2b00      	cmp	r3, #0
    e810:	d001      	beq.n	e816 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e812:	2301      	movs	r3, #1
    e814:	e000      	b.n	e818 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e816:	2300      	movs	r3, #0
    e818:	2b00      	cmp	r3, #0
    e81a:	d000      	beq.n	e81e <_ZN9CDC_Class5writeEPKhj+0x62>
    e81c:	e7ec      	b.n	e7f8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e81e:	4808      	ldr	r0, [pc, #32]	; (e840 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e820:	4b0a      	ldr	r3, [pc, #40]	; (e84c <_ZN9CDC_Class5writeEPKhj+0x90>)
    e822:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e824:	4905      	ldr	r1, [pc, #20]	; (e83c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e826:	4806      	ldr	r0, [pc, #24]	; (e840 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e828:	4b09      	ldr	r3, [pc, #36]	; (e850 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e82a:	4798      	blx	r3
    e82c:	e001      	b.n	e832 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e82e:	2300      	movs	r3, #0
    e830:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e832:	697b      	ldr	r3, [r7, #20]
}
    e834:	4618      	mov	r0, r3
    e836:	3718      	adds	r7, #24
    e838:	46bd      	mov	sp, r7
    e83a:	bd80      	pop	{r7, pc}
    e83c:	0000e389 	.word	0x0000e389
    e840:	20001840 	.word	0x20001840
    e844:	0000e061 	.word	0x0000e061
    e848:	0000cb91 	.word	0x0000cb91
    e84c:	0000deed 	.word	0x0000deed
    e850:	0000e009 	.word	0x0000e009

0000e854 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e854:	b480      	push	{r7}
    e856:	b083      	sub	sp, #12
    e858:	af00      	add	r7, sp, #0
    e85a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	7d5b      	ldrb	r3, [r3, #21]
    e860:	b2db      	uxtb	r3, r3
    e862:	2b00      	cmp	r3, #0
    e864:	d006      	beq.n	e874 <_ZN9CDC_Class9availableEv+0x20>
    e866:	687b      	ldr	r3, [r7, #4]
    e868:	7d1b      	ldrb	r3, [r3, #20]
    e86a:	b2db      	uxtb	r3, r3
    e86c:	2b00      	cmp	r3, #0
    e86e:	d001      	beq.n	e874 <_ZN9CDC_Class9availableEv+0x20>
    e870:	2301      	movs	r3, #1
    e872:	e000      	b.n	e876 <_ZN9CDC_Class9availableEv+0x22>
    e874:	2300      	movs	r3, #0
    e876:	2b00      	cmp	r3, #0
    e878:	d001      	beq.n	e87e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e87a:	2301      	movs	r3, #1
    e87c:	e000      	b.n	e880 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e87e:	2300      	movs	r3, #0
	}
	
}
    e880:	4618      	mov	r0, r3
    e882:	370c      	adds	r7, #12
    e884:	46bd      	mov	sp, r7
    e886:	bc80      	pop	{r7}
    e888:	4770      	bx	lr
	...

0000e88c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e88c:	b580      	push	{r7, lr}
    e88e:	b082      	sub	sp, #8
    e890:	af00      	add	r7, sp, #0
    e892:	6078      	str	r0, [r7, #4]
    e894:	6039      	str	r1, [r7, #0]
    e896:	687b      	ldr	r3, [r7, #4]
    e898:	2b01      	cmp	r3, #1
    e89a:	d154      	bne.n	e946 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e89c:	683b      	ldr	r3, [r7, #0]
    e89e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e8a2:	4293      	cmp	r3, r2
    e8a4:	d14f      	bne.n	e946 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e8a6:	492a      	ldr	r1, [pc, #168]	; (e950 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e8a8:	482a      	ldr	r0, [pc, #168]	; (e954 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8aa:	4b2b      	ldr	r3, [pc, #172]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8ac:	4798      	blx	r3
    e8ae:	4a2b      	ldr	r2, [pc, #172]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8b0:	492b      	ldr	r1, [pc, #172]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8b2:	4828      	ldr	r0, [pc, #160]	; (e954 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8b4:	4b2b      	ldr	r3, [pc, #172]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8b6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e8b8:	492b      	ldr	r1, [pc, #172]	; (e968 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e8ba:	482c      	ldr	r0, [pc, #176]	; (e96c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e8bc:	4b26      	ldr	r3, [pc, #152]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8be:	4798      	blx	r3
    e8c0:	4a26      	ldr	r2, [pc, #152]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8c2:	4927      	ldr	r1, [pc, #156]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8c4:	4829      	ldr	r0, [pc, #164]	; (e96c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e8c6:	4b27      	ldr	r3, [pc, #156]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8c8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e8ca:	4929      	ldr	r1, [pc, #164]	; (e970 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e8cc:	4829      	ldr	r0, [pc, #164]	; (e974 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e8ce:	4b22      	ldr	r3, [pc, #136]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8d0:	4798      	blx	r3
    e8d2:	4a22      	ldr	r2, [pc, #136]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8d4:	4922      	ldr	r1, [pc, #136]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8d6:	4827      	ldr	r0, [pc, #156]	; (e974 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e8d8:	4b22      	ldr	r3, [pc, #136]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8da:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e8dc:	4926      	ldr	r1, [pc, #152]	; (e978 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e8de:	4827      	ldr	r0, [pc, #156]	; (e97c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e8e0:	4b1d      	ldr	r3, [pc, #116]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8e2:	4798      	blx	r3
    e8e4:	4a1d      	ldr	r2, [pc, #116]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8e6:	491e      	ldr	r1, [pc, #120]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8e8:	4824      	ldr	r0, [pc, #144]	; (e97c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e8ea:	4b1e      	ldr	r3, [pc, #120]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8ec:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e8ee:	4924      	ldr	r1, [pc, #144]	; (e980 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e8f0:	4824      	ldr	r0, [pc, #144]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e8f2:	4b19      	ldr	r3, [pc, #100]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8f4:	4798      	blx	r3
    e8f6:	4a19      	ldr	r2, [pc, #100]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8f8:	4919      	ldr	r1, [pc, #100]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8fa:	4822      	ldr	r0, [pc, #136]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e8fc:	4b19      	ldr	r3, [pc, #100]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8fe:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e900:	4921      	ldr	r1, [pc, #132]	; (e988 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e902:	4822      	ldr	r0, [pc, #136]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e904:	4b14      	ldr	r3, [pc, #80]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e906:	4798      	blx	r3
    e908:	4a14      	ldr	r2, [pc, #80]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e90a:	4915      	ldr	r1, [pc, #84]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e90c:	481f      	ldr	r0, [pc, #124]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e90e:	4b15      	ldr	r3, [pc, #84]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e910:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e912:	491f      	ldr	r1, [pc, #124]	; (e990 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e914:	481f      	ldr	r0, [pc, #124]	; (e994 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e916:	4b10      	ldr	r3, [pc, #64]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e918:	4798      	blx	r3
    e91a:	4a10      	ldr	r2, [pc, #64]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e91c:	4910      	ldr	r1, [pc, #64]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e91e:	481d      	ldr	r0, [pc, #116]	; (e994 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e920:	4b10      	ldr	r3, [pc, #64]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e922:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e924:	491c      	ldr	r1, [pc, #112]	; (e998 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e926:	481d      	ldr	r0, [pc, #116]	; (e99c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e928:	4b0b      	ldr	r3, [pc, #44]	; (e958 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e92a:	4798      	blx	r3
    e92c:	4a0b      	ldr	r2, [pc, #44]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e92e:	490c      	ldr	r1, [pc, #48]	; (e960 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e930:	481a      	ldr	r0, [pc, #104]	; (e99c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e932:	4b0c      	ldr	r3, [pc, #48]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e934:	4798      	blx	r3
    e936:	481a      	ldr	r0, [pc, #104]	; (e9a0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e938:	4b1a      	ldr	r3, [pc, #104]	; (e9a4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e93a:	4798      	blx	r3
    e93c:	4a07      	ldr	r2, [pc, #28]	; (e95c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e93e:	491a      	ldr	r1, [pc, #104]	; (e9a8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e940:	4817      	ldr	r0, [pc, #92]	; (e9a0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e942:	4b08      	ldr	r3, [pc, #32]	; (e964 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e944:	4798      	blx	r3
    e946:	bf00      	nop
    e948:	3708      	adds	r7, #8
    e94a:	46bd      	mov	sp, r7
    e94c:	bd80      	pop	{r7, pc}
    e94e:	bf00      	nop
    e950:	20009f88 	.word	0x20009f88
    e954:	200017a0 	.word	0x200017a0
    e958:	0000dd8d 	.word	0x0000dd8d
    e95c:	20000000 	.word	0x20000000
    e960:	0000ddc5 	.word	0x0000ddc5
    e964:	000135c5 	.word	0x000135c5
    e968:	2000a01c 	.word	0x2000a01c
    e96c:	200017c0 	.word	0x200017c0
    e970:	2000a140 	.word	0x2000a140
    e974:	200017e0 	.word	0x200017e0
    e978:	2000a03c 	.word	0x2000a03c
    e97c:	20001800 	.word	0x20001800
    e980:	2000a100 	.word	0x2000a100
    e984:	20001820 	.word	0x20001820
    e988:	2000a120 	.word	0x2000a120
    e98c:	20001840 	.word	0x20001840
    e990:	20009ff8 	.word	0x20009ff8
    e994:	20001860 	.word	0x20001860
    e998:	2000a098 	.word	0x2000a098
    e99c:	20001880 	.word	0x20001880
    e9a0:	200018a4 	.word	0x200018a4
    e9a4:	0000e479 	.word	0x0000e479
    e9a8:	0000e4c1 	.word	0x0000e4c1

0000e9ac <_GLOBAL__sub_I_ptrCDCClass>:
    e9ac:	b580      	push	{r7, lr}
    e9ae:	af00      	add	r7, sp, #0
    e9b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9b4:	2001      	movs	r0, #1
    e9b6:	4b01      	ldr	r3, [pc, #4]	; (e9bc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e9b8:	4798      	blx	r3
    e9ba:	bd80      	pop	{r7, pc}
    e9bc:	0000e88d 	.word	0x0000e88d

0000e9c0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e9c0:	b590      	push	{r4, r7, lr}
    e9c2:	b083      	sub	sp, #12
    e9c4:	af00      	add	r7, sp, #0
    e9c6:	6078      	str	r0, [r7, #4]
    e9c8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e9ca:	683b      	ldr	r3, [r7, #0]
    e9cc:	2b00      	cmp	r3, #0
    e9ce:	d101      	bne.n	e9d4 <_ZN5Print5writeEPKc+0x14>
    e9d0:	2300      	movs	r3, #0
    e9d2:	e00c      	b.n	e9ee <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e9d4:	687b      	ldr	r3, [r7, #4]
    e9d6:	681b      	ldr	r3, [r3, #0]
    e9d8:	3304      	adds	r3, #4
    e9da:	681c      	ldr	r4, [r3, #0]
    e9dc:	6838      	ldr	r0, [r7, #0]
    e9de:	4b06      	ldr	r3, [pc, #24]	; (e9f8 <_ZN5Print5writeEPKc+0x38>)
    e9e0:	4798      	blx	r3
    e9e2:	4603      	mov	r3, r0
    e9e4:	461a      	mov	r2, r3
    e9e6:	6839      	ldr	r1, [r7, #0]
    e9e8:	6878      	ldr	r0, [r7, #4]
    e9ea:	47a0      	blx	r4
    e9ec:	4603      	mov	r3, r0
    }
    e9ee:	4618      	mov	r0, r3
    e9f0:	370c      	adds	r7, #12
    e9f2:	46bd      	mov	sp, r7
    e9f4:	bd90      	pop	{r4, r7, pc}
    e9f6:	bf00      	nop
    e9f8:	00013d41 	.word	0x00013d41

0000e9fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e9fc:	b580      	push	{r7, lr}
    e9fe:	b086      	sub	sp, #24
    ea00:	af00      	add	r7, sp, #0
    ea02:	60f8      	str	r0, [r7, #12]
    ea04:	60b9      	str	r1, [r7, #8]
    ea06:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    ea08:	2300      	movs	r3, #0
    ea0a:	617b      	str	r3, [r7, #20]
  while (size--) {
    ea0c:	687b      	ldr	r3, [r7, #4]
    ea0e:	1e5a      	subs	r2, r3, #1
    ea10:	607a      	str	r2, [r7, #4]
    ea12:	2b00      	cmp	r3, #0
    ea14:	bf14      	ite	ne
    ea16:	2301      	movne	r3, #1
    ea18:	2300      	moveq	r3, #0
    ea1a:	b2db      	uxtb	r3, r3
    ea1c:	2b00      	cmp	r3, #0
    ea1e:	d016      	beq.n	ea4e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    ea20:	68fb      	ldr	r3, [r7, #12]
    ea22:	681b      	ldr	r3, [r3, #0]
    ea24:	681a      	ldr	r2, [r3, #0]
    ea26:	68bb      	ldr	r3, [r7, #8]
    ea28:	1c59      	adds	r1, r3, #1
    ea2a:	60b9      	str	r1, [r7, #8]
    ea2c:	781b      	ldrb	r3, [r3, #0]
    ea2e:	4619      	mov	r1, r3
    ea30:	68f8      	ldr	r0, [r7, #12]
    ea32:	4790      	blx	r2
    ea34:	4603      	mov	r3, r0
    ea36:	2b00      	cmp	r3, #0
    ea38:	bf14      	ite	ne
    ea3a:	2301      	movne	r3, #1
    ea3c:	2300      	moveq	r3, #0
    ea3e:	b2db      	uxtb	r3, r3
    ea40:	2b00      	cmp	r3, #0
    ea42:	d003      	beq.n	ea4c <_ZN5Print5writeEPKhj+0x50>
    ea44:	697b      	ldr	r3, [r7, #20]
    ea46:	3301      	adds	r3, #1
    ea48:	617b      	str	r3, [r7, #20]
  while (size--) {
    ea4a:	e7df      	b.n	ea0c <_ZN5Print5writeEPKhj+0x10>
    else break;
    ea4c:	bf00      	nop
  }
  return n;
    ea4e:	697b      	ldr	r3, [r7, #20]
}
    ea50:	4618      	mov	r0, r3
    ea52:	3718      	adds	r7, #24
    ea54:	46bd      	mov	sp, r7
    ea56:	bd80      	pop	{r7, pc}

0000ea58 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    ea58:	b580      	push	{r7, lr}
    ea5a:	b082      	sub	sp, #8
    ea5c:	af00      	add	r7, sp, #0
    ea5e:	6078      	str	r0, [r7, #4]
    ea60:	6039      	str	r1, [r7, #0]
  return write(str);
    ea62:	6839      	ldr	r1, [r7, #0]
    ea64:	6878      	ldr	r0, [r7, #4]
    ea66:	4b03      	ldr	r3, [pc, #12]	; (ea74 <_ZN5Print5printEPKc+0x1c>)
    ea68:	4798      	blx	r3
    ea6a:	4603      	mov	r3, r0
}
    ea6c:	4618      	mov	r0, r3
    ea6e:	3708      	adds	r7, #8
    ea70:	46bd      	mov	sp, r7
    ea72:	bd80      	pop	{r7, pc}
    ea74:	0000e9c1 	.word	0x0000e9c1

0000ea78 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    ea78:	b480      	push	{r7}
    ea7a:	b083      	sub	sp, #12
    ea7c:	af00      	add	r7, sp, #0
    ea7e:	6078      	str	r0, [r7, #4]
    ea80:	460b      	mov	r3, r1
    ea82:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ea84:	78fb      	ldrb	r3, [r7, #3]
    ea86:	687a      	ldr	r2, [r7, #4]
    ea88:	01db      	lsls	r3, r3, #7
    ea8a:	4413      	add	r3, r2
    ea8c:	681b      	ldr	r3, [r3, #0]
}
    ea8e:	4618      	mov	r0, r3
    ea90:	370c      	adds	r7, #12
    ea92:	46bd      	mov	sp, r7
    ea94:	bc80      	pop	{r7}
    ea96:	4770      	bx	lr

0000ea98 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    ea98:	b480      	push	{r7}
    ea9a:	b083      	sub	sp, #12
    ea9c:	af00      	add	r7, sp, #0
    ea9e:	6078      	str	r0, [r7, #4]
    eaa0:	460b      	mov	r3, r1
    eaa2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    eaa4:	78fb      	ldrb	r3, [r7, #3]
    eaa6:	687a      	ldr	r2, [r7, #4]
    eaa8:	01db      	lsls	r3, r3, #7
    eaaa:	4413      	add	r3, r2
    eaac:	3310      	adds	r3, #16
    eaae:	681b      	ldr	r3, [r3, #0]
}
    eab0:	4618      	mov	r0, r3
    eab2:	370c      	adds	r7, #12
    eab4:	46bd      	mov	sp, r7
    eab6:	bc80      	pop	{r7}
    eab8:	4770      	bx	lr

0000eaba <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    eaba:	b480      	push	{r7}
    eabc:	b083      	sub	sp, #12
    eabe:	af00      	add	r7, sp, #0
    eac0:	6078      	str	r0, [r7, #4]
    eac2:	460b      	mov	r3, r1
    eac4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    eac6:	78fb      	ldrb	r3, [r7, #3]
    eac8:	687a      	ldr	r2, [r7, #4]
    eaca:	01db      	lsls	r3, r3, #7
    eacc:	4413      	add	r3, r2
    eace:	3320      	adds	r3, #32
    ead0:	681b      	ldr	r3, [r3, #0]
}
    ead2:	4618      	mov	r0, r3
    ead4:	370c      	adds	r7, #12
    ead6:	46bd      	mov	sp, r7
    ead8:	bc80      	pop	{r7}
    eada:	4770      	bx	lr

0000eadc <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    eadc:	b580      	push	{r7, lr}
    eade:	b086      	sub	sp, #24
    eae0:	af00      	add	r7, sp, #0
    eae2:	4603      	mov	r3, r0
    eae4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    eae6:	f107 030c 	add.w	r3, r7, #12
    eaea:	4618      	mov	r0, r3
    eaec:	4b13      	ldr	r3, [pc, #76]	; (eb3c <_gpio_get_level+0x60>)
    eaee:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    eaf0:	79fb      	ldrb	r3, [r7, #7]
    eaf2:	4619      	mov	r1, r3
    eaf4:	4812      	ldr	r0, [pc, #72]	; (eb40 <_gpio_get_level+0x64>)
    eaf6:	4b13      	ldr	r3, [pc, #76]	; (eb44 <_gpio_get_level+0x68>)
    eaf8:	4798      	blx	r3
    eafa:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    eafc:	79fb      	ldrb	r3, [r7, #7]
    eafe:	4619      	mov	r1, r3
    eb00:	480f      	ldr	r0, [pc, #60]	; (eb40 <_gpio_get_level+0x64>)
    eb02:	4b11      	ldr	r3, [pc, #68]	; (eb48 <_gpio_get_level+0x6c>)
    eb04:	4798      	blx	r3
    eb06:	4602      	mov	r2, r0
    eb08:	697b      	ldr	r3, [r7, #20]
    eb0a:	43db      	mvns	r3, r3
    eb0c:	4013      	ands	r3, r2
    eb0e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    eb10:	79fb      	ldrb	r3, [r7, #7]
    eb12:	4619      	mov	r1, r3
    eb14:	480a      	ldr	r0, [pc, #40]	; (eb40 <_gpio_get_level+0x64>)
    eb16:	4b0d      	ldr	r3, [pc, #52]	; (eb4c <_gpio_get_level+0x70>)
    eb18:	4798      	blx	r3
    eb1a:	4602      	mov	r2, r0
    eb1c:	697b      	ldr	r3, [r7, #20]
    eb1e:	4013      	ands	r3, r2
    eb20:	693a      	ldr	r2, [r7, #16]
    eb22:	4313      	orrs	r3, r2
    eb24:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    eb26:	f107 030c 	add.w	r3, r7, #12
    eb2a:	4618      	mov	r0, r3
    eb2c:	4b08      	ldr	r3, [pc, #32]	; (eb50 <_gpio_get_level+0x74>)
    eb2e:	4798      	blx	r3

	return tmp;
    eb30:	693b      	ldr	r3, [r7, #16]
}
    eb32:	4618      	mov	r0, r3
    eb34:	3718      	adds	r7, #24
    eb36:	46bd      	mov	sp, r7
    eb38:	bd80      	pop	{r7, pc}
    eb3a:	bf00      	nop
    eb3c:	0000bd6d 	.word	0x0000bd6d
    eb40:	41008000 	.word	0x41008000
    eb44:	0000ea79 	.word	0x0000ea79
    eb48:	0000eabb 	.word	0x0000eabb
    eb4c:	0000ea99 	.word	0x0000ea99
    eb50:	0000bd93 	.word	0x0000bd93

0000eb54 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    eb54:	b580      	push	{r7, lr}
    eb56:	b082      	sub	sp, #8
    eb58:	af00      	add	r7, sp, #0
    eb5a:	4603      	mov	r3, r0
    eb5c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    eb5e:	79fb      	ldrb	r3, [r7, #7]
    eb60:	115b      	asrs	r3, r3, #5
    eb62:	b2db      	uxtb	r3, r3
    eb64:	4618      	mov	r0, r3
    eb66:	4b09      	ldr	r3, [pc, #36]	; (eb8c <gpio_get_pin_level+0x38>)
    eb68:	4798      	blx	r3
    eb6a:	4601      	mov	r1, r0
    eb6c:	79fb      	ldrb	r3, [r7, #7]
    eb6e:	f003 031f 	and.w	r3, r3, #31
    eb72:	2201      	movs	r2, #1
    eb74:	fa02 f303 	lsl.w	r3, r2, r3
    eb78:	400b      	ands	r3, r1
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	bf14      	ite	ne
    eb7e:	2301      	movne	r3, #1
    eb80:	2300      	moveq	r3, #0
    eb82:	b2db      	uxtb	r3, r3
}
    eb84:	4618      	mov	r0, r3
    eb86:	3708      	adds	r7, #8
    eb88:	46bd      	mov	sp, r7
    eb8a:	bd80      	pop	{r7, pc}
    eb8c:	0000eadd 	.word	0x0000eadd

0000eb90 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    eb90:	b480      	push	{r7}
    eb92:	b083      	sub	sp, #12
    eb94:	af00      	add	r7, sp, #0
    eb96:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    eb98:	4b06      	ldr	r3, [pc, #24]	; (ebb4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    eb9a:	681b      	ldr	r3, [r3, #0]
    eb9c:	2201      	movs	r2, #1
    eb9e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    eba0:	4b04      	ldr	r3, [pc, #16]	; (ebb4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    eba2:	681b      	ldr	r3, [r3, #0]
    eba4:	2200      	movs	r2, #0
    eba6:	705a      	strb	r2, [r3, #1]
}
    eba8:	bf00      	nop
    ebaa:	370c      	adds	r7, #12
    ebac:	46bd      	mov	sp, r7
    ebae:	bc80      	pop	{r7}
    ebb0:	4770      	bx	lr
    ebb2:	bf00      	nop
    ebb4:	20001a04 	.word	0x20001a04

0000ebb8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    ebb8:	b580      	push	{r7, lr}
    ebba:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    ebbc:	2040      	movs	r0, #64	; 0x40
    ebbe:	4b0a      	ldr	r3, [pc, #40]	; (ebe8 <_ZL10USBPluggedv+0x30>)
    ebc0:	4798      	blx	r3
    ebc2:	4603      	mov	r3, r0
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	d004      	beq.n	ebd2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    ebc8:	4b08      	ldr	r3, [pc, #32]	; (ebec <_ZL10USBPluggedv+0x34>)
    ebca:	681b      	ldr	r3, [r3, #0]
    ebcc:	2201      	movs	r2, #1
    ebce:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ebd0:	e007      	b.n	ebe2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ebd2:	4b06      	ldr	r3, [pc, #24]	; (ebec <_ZL10USBPluggedv+0x34>)
    ebd4:	681b      	ldr	r3, [r3, #0]
    ebd6:	2200      	movs	r2, #0
    ebd8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ebda:	4b04      	ldr	r3, [pc, #16]	; (ebec <_ZL10USBPluggedv+0x34>)
    ebdc:	681b      	ldr	r3, [r3, #0]
    ebde:	2200      	movs	r2, #0
    ebe0:	701a      	strb	r2, [r3, #0]
}
    ebe2:	bf00      	nop
    ebe4:	bd80      	pop	{r7, pc}
    ebe6:	bf00      	nop
    ebe8:	0000eb55 	.word	0x0000eb55
    ebec:	20001a04 	.word	0x20001a04

0000ebf0 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    ebf0:	b480      	push	{r7}
    ebf2:	b083      	sub	sp, #12
    ebf4:	af00      	add	r7, sp, #0
    ebf6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    ebf8:	4a04      	ldr	r2, [pc, #16]	; (ec0c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    ebfa:	687b      	ldr	r3, [r7, #4]
    ebfc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    ebfe:	687b      	ldr	r3, [r7, #4]
    ec00:	4618      	mov	r0, r3
    ec02:	370c      	adds	r7, #12
    ec04:	46bd      	mov	sp, r7
    ec06:	bc80      	pop	{r7}
    ec08:	4770      	bx	lr
    ec0a:	bf00      	nop
    ec0c:	20001a04 	.word	0x20001a04

0000ec10 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ec10:	b480      	push	{r7}
    ec12:	b083      	sub	sp, #12
    ec14:	af00      	add	r7, sp, #0
    ec16:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ec18:	687b      	ldr	r3, [r7, #4]
    ec1a:	4618      	mov	r0, r3
    ec1c:	370c      	adds	r7, #12
    ec1e:	46bd      	mov	sp, r7
    ec20:	bc80      	pop	{r7}
    ec22:	4770      	bx	lr

0000ec24 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    ec24:	b580      	push	{r7, lr}
    ec26:	b082      	sub	sp, #8
    ec28:	af00      	add	r7, sp, #0
    ec2a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    ec2c:	491e      	ldr	r1, [pc, #120]	; (eca8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ec2e:	2040      	movs	r0, #64	; 0x40
    ec30:	4b1e      	ldr	r3, [pc, #120]	; (ecac <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    ec32:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    ec34:	481e      	ldr	r0, [pc, #120]	; (ecb0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ec36:	4b1f      	ldr	r3, [pc, #124]	; (ecb4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    ec38:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    ec3a:	2040      	movs	r0, #64	; 0x40
    ec3c:	4b1e      	ldr	r3, [pc, #120]	; (ecb8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ec3e:	4798      	blx	r3
    ec40:	4603      	mov	r3, r0
    ec42:	461a      	mov	r2, r3
    ec44:	687b      	ldr	r3, [r7, #4]
    ec46:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    ec48:	687b      	ldr	r3, [r7, #4]
    ec4a:	78db      	ldrb	r3, [r3, #3]
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	d021      	beq.n	ec94 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	2200      	movs	r2, #0
    ec54:	709a      	strb	r2, [r3, #2]
			plugged=true;
    ec56:	687b      	ldr	r3, [r7, #4]
    ec58:	2201      	movs	r2, #1
    ec5a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ec5c:	f44f 7216 	mov.w	r2, #600	; 0x258
    ec60:	4916      	ldr	r1, [pc, #88]	; (ecbc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    ec62:	4813      	ldr	r0, [pc, #76]	; (ecb0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ec64:	4b16      	ldr	r3, [pc, #88]	; (ecc0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    ec66:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    ec68:	4816      	ldr	r0, [pc, #88]	; (ecc4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    ec6a:	4b17      	ldr	r3, [pc, #92]	; (ecc8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    ec6c:	4798      	blx	r3
    ec6e:	4603      	mov	r3, r0
    ec70:	f083 0301 	eor.w	r3, r3, #1
    ec74:	b2db      	uxtb	r3, r3
    ec76:	2b00      	cmp	r3, #0
    ec78:	d008      	beq.n	ec8c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    ec7a:	687b      	ldr	r3, [r7, #4]
    ec7c:	789b      	ldrb	r3, [r3, #2]
    ec7e:	b2db      	uxtb	r3, r3
    ec80:	2b00      	cmp	r3, #0
    ec82:	d0f1      	beq.n	ec68 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    ec84:	687b      	ldr	r3, [r7, #4]
    ec86:	2200      	movs	r2, #0
    ec88:	701a      	strb	r2, [r3, #0]
					return;
    ec8a:	e009      	b.n	eca0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    ec8c:	4808      	ldr	r0, [pc, #32]	; (ecb0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ec8e:	4b0f      	ldr	r3, [pc, #60]	; (eccc <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    ec90:	4798      	blx	r3
    ec92:	e005      	b.n	eca0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    ec94:	687b      	ldr	r3, [r7, #4]
    ec96:	2200      	movs	r2, #0
    ec98:	701a      	strb	r2, [r3, #0]
			plugged=false;
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	2200      	movs	r2, #0
    ec9e:	705a      	strb	r2, [r3, #1]
		}
		
}
    eca0:	3708      	adds	r7, #8
    eca2:	46bd      	mov	sp, r7
    eca4:	bd80      	pop	{r7, pc}
    eca6:	bf00      	nop
    eca8:	0000ebb9 	.word	0x0000ebb9
    ecac:	00002b2d 	.word	0x00002b2d
    ecb0:	200019a4 	.word	0x200019a4
    ecb4:	0000de79 	.word	0x0000de79
    ecb8:	0000eb55 	.word	0x0000eb55
    ecbc:	0000eb91 	.word	0x0000eb91
    ecc0:	0000e061 	.word	0x0000e061
    ecc4:	200018a4 	.word	0x200018a4
    ecc8:	0000e531 	.word	0x0000e531
    eccc:	0000deed 	.word	0x0000deed

0000ecd0 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    ecd0:	b580      	push	{r7, lr}
    ecd2:	b082      	sub	sp, #8
    ecd4:	af00      	add	r7, sp, #0
    ecd6:	6078      	str	r0, [r7, #4]
    ecd8:	6039      	str	r1, [r7, #0]
    ecda:	687b      	ldr	r3, [r7, #4]
    ecdc:	2b01      	cmp	r3, #1
    ecde:	d14c      	bne.n	ed7a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ece0:	683b      	ldr	r3, [r7, #0]
    ece2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ece6:	4293      	cmp	r3, r2
    ece8:	d147      	bne.n	ed7a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ecea:	4926      	ldr	r1, [pc, #152]	; (ed84 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ecec:	4826      	ldr	r0, [pc, #152]	; (ed88 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ecee:	4b27      	ldr	r3, [pc, #156]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecf0:	4798      	blx	r3
    ecf2:	4a27      	ldr	r2, [pc, #156]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecf4:	4927      	ldr	r1, [pc, #156]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecf6:	4824      	ldr	r0, [pc, #144]	; (ed88 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ecf8:	4b27      	ldr	r3, [pc, #156]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecfa:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ecfc:	4927      	ldr	r1, [pc, #156]	; (ed9c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ecfe:	4828      	ldr	r0, [pc, #160]	; (eda0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ed00:	4b22      	ldr	r3, [pc, #136]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed02:	4798      	blx	r3
    ed04:	4a22      	ldr	r2, [pc, #136]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed06:	4923      	ldr	r1, [pc, #140]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed08:	4825      	ldr	r0, [pc, #148]	; (eda0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ed0a:	4b23      	ldr	r3, [pc, #140]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed0c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ed0e:	4925      	ldr	r1, [pc, #148]	; (eda4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ed10:	4825      	ldr	r0, [pc, #148]	; (eda8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ed12:	4b1e      	ldr	r3, [pc, #120]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed14:	4798      	blx	r3
    ed16:	4a1e      	ldr	r2, [pc, #120]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed18:	491e      	ldr	r1, [pc, #120]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed1a:	4823      	ldr	r0, [pc, #140]	; (eda8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ed1c:	4b1e      	ldr	r3, [pc, #120]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed1e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ed20:	4922      	ldr	r1, [pc, #136]	; (edac <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ed22:	4823      	ldr	r0, [pc, #140]	; (edb0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ed24:	4b19      	ldr	r3, [pc, #100]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed26:	4798      	blx	r3
    ed28:	4a19      	ldr	r2, [pc, #100]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed2a:	491a      	ldr	r1, [pc, #104]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed2c:	4820      	ldr	r0, [pc, #128]	; (edb0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ed2e:	4b1a      	ldr	r3, [pc, #104]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed30:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ed32:	4920      	ldr	r1, [pc, #128]	; (edb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ed34:	4820      	ldr	r0, [pc, #128]	; (edb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ed36:	4b15      	ldr	r3, [pc, #84]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed38:	4798      	blx	r3
    ed3a:	4a15      	ldr	r2, [pc, #84]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed3c:	4915      	ldr	r1, [pc, #84]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed3e:	481e      	ldr	r0, [pc, #120]	; (edb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ed40:	4b15      	ldr	r3, [pc, #84]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed42:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ed44:	491d      	ldr	r1, [pc, #116]	; (edbc <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ed46:	481e      	ldr	r0, [pc, #120]	; (edc0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ed48:	4b10      	ldr	r3, [pc, #64]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed4a:	4798      	blx	r3
    ed4c:	4a10      	ldr	r2, [pc, #64]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed4e:	4911      	ldr	r1, [pc, #68]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed50:	481b      	ldr	r0, [pc, #108]	; (edc0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ed52:	4b11      	ldr	r3, [pc, #68]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed54:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ed56:	491b      	ldr	r1, [pc, #108]	; (edc4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ed58:	481b      	ldr	r0, [pc, #108]	; (edc8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ed5a:	4b0c      	ldr	r3, [pc, #48]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed5c:	4798      	blx	r3
    ed5e:	4a0c      	ldr	r2, [pc, #48]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed60:	490c      	ldr	r1, [pc, #48]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed62:	4819      	ldr	r0, [pc, #100]	; (edc8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ed64:	4b0c      	ldr	r3, [pc, #48]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed66:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ed68:	4918      	ldr	r1, [pc, #96]	; (edcc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ed6a:	4819      	ldr	r0, [pc, #100]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ed6c:	4b07      	ldr	r3, [pc, #28]	; (ed8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed6e:	4798      	blx	r3
    ed70:	4a07      	ldr	r2, [pc, #28]	; (ed90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed72:	4908      	ldr	r1, [pc, #32]	; (ed94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed74:	4816      	ldr	r0, [pc, #88]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ed76:	4b08      	ldr	r3, [pc, #32]	; (ed98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed78:	4798      	blx	r3
    ed7a:	bf00      	nop
    ed7c:	3708      	adds	r7, #8
    ed7e:	46bd      	mov	sp, r7
    ed80:	bd80      	pop	{r7, pc}
    ed82:	bf00      	nop
    ed84:	20009f88 	.word	0x20009f88
    ed88:	20001904 	.word	0x20001904
    ed8c:	0000dd8d 	.word	0x0000dd8d
    ed90:	20000000 	.word	0x20000000
    ed94:	0000ddc5 	.word	0x0000ddc5
    ed98:	000135c5 	.word	0x000135c5
    ed9c:	2000a01c 	.word	0x2000a01c
    eda0:	20001924 	.word	0x20001924
    eda4:	2000a140 	.word	0x2000a140
    eda8:	20001944 	.word	0x20001944
    edac:	2000a03c 	.word	0x2000a03c
    edb0:	20001964 	.word	0x20001964
    edb4:	2000a100 	.word	0x2000a100
    edb8:	20001984 	.word	0x20001984
    edbc:	2000a120 	.word	0x2000a120
    edc0:	200019a4 	.word	0x200019a4
    edc4:	20009ff8 	.word	0x20009ff8
    edc8:	200019c4 	.word	0x200019c4
    edcc:	2000a098 	.word	0x2000a098
    edd0:	200019e4 	.word	0x200019e4

0000edd4 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    edd4:	b580      	push	{r7, lr}
    edd6:	af00      	add	r7, sp, #0
    edd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eddc:	2001      	movs	r0, #1
    edde:	4b01      	ldr	r3, [pc, #4]	; (ede4 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ede0:	4798      	blx	r3
    ede2:	bd80      	pop	{r7, pc}
    ede4:	0000ecd1 	.word	0x0000ecd1

0000ede8 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ede8:	b480      	push	{r7}
    edea:	b083      	sub	sp, #12
    edec:	af00      	add	r7, sp, #0
    edee:	6078      	str	r0, [r7, #4]
    return (void *)0;
    edf0:	2300      	movs	r3, #0
	}
    edf2:	4618      	mov	r0, r3
    edf4:	370c      	adds	r7, #12
    edf6:	46bd      	mov	sp, r7
    edf8:	bc80      	pop	{r7}
    edfa:	4770      	bx	lr

0000edfc <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    edfc:	b480      	push	{r7}
    edfe:	af00      	add	r7, sp, #0
		}
    ee00:	bf00      	nop
    ee02:	46bd      	mov	sp, r7
    ee04:	bc80      	pop	{r7}
    ee06:	4770      	bx	lr

0000ee08 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    ee08:	4770      	bx	lr

0000ee0a <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    ee0a:	4770      	bx	lr

0000ee0c <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
    ee0c:	1f0b      	subs	r3, r1, #4
    ee0e:	300c      	adds	r0, #12
    ee10:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
    ee12:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ee16:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ee1a:	428b      	cmp	r3, r1
    ee1c:	d1f9      	bne.n	ee12 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
    ee1e:	2000      	movs	r0, #0
    ee20:	4770      	bx	lr
	...

0000ee24 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
    ee24:	b510      	push	{r4, lr}
    ee26:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
    ee28:	68c0      	ldr	r0, [r0, #12]
    ee2a:	4b0a      	ldr	r3, [pc, #40]	; (ee54 <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
    ee2c:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
    ee2e:	f3c0 1200 	ubfx	r2, r0, #4, #1
    ee32:	78e3      	ldrb	r3, [r4, #3]
    ee34:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
    ee38:	f3c0 1240 	ubfx	r2, r0, #5, #1
    ee3c:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
    ee40:	f3c0 1280 	ubfx	r2, r0, #6, #1
    ee44:	f362 0300 	bfi	r3, r2, #0, #1
    ee48:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
    ee4a:	f000 0070 	and.w	r0, r0, #112	; 0x70
    ee4e:	7120      	strb	r0, [r4, #4]
	return faults;
}
    ee50:	bd10      	pop	{r4, pc}
    ee52:	bf00      	nop
    ee54:	00011ce9 	.word	0x00011ce9

0000ee58 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    ee58:	b510      	push	{r4, lr}
    ee5a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
    ee5c:	f081 0201 	eor.w	r2, r1, #1
    ee60:	2100      	movs	r1, #0
    ee62:	68c0      	ldr	r0, [r0, #12]
    ee64:	4b01      	ldr	r3, [pc, #4]	; (ee6c <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    ee66:	4798      	blx	r3
    ee68:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
    ee6a:	bd10      	pop	{r4, pc}
    ee6c:	00011fa1 	.word	0x00011fa1

0000ee70 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
    ee70:	b510      	push	{r4, lr}
    ee72:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
    ee74:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ee76:	4b02      	ldr	r3, [pc, #8]	; (ee80 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
    ee78:	4798      	blx	r3
    ee7a:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
    ee7c:	bd10      	pop	{r4, pc}
    ee7e:	bf00      	nop
    ee80:	00011d6d 	.word	0x00011d6d

0000ee84 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
    ee84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee88:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
    ee8a:	2100      	movs	r1, #0
    ee8c:	4c0f      	ldr	r4, [pc, #60]	; (eecc <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
    ee8e:	47a0      	blx	r4
		SetPWM(0xff);
    ee90:	21ff      	movs	r1, #255	; 0xff
    ee92:	4628      	mov	r0, r5
    ee94:	4b0e      	ldr	r3, [pc, #56]	; (eed0 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
    ee96:	4798      	blx	r3
		SetEnable(true);
    ee98:	2101      	movs	r1, #1
    ee9a:	4628      	mov	r0, r5
    ee9c:	47a0      	blx	r4
    ee9e:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
    eea0:	4f0b      	ldr	r7, [pc, #44]	; (eed0 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
    eea2:	f04f 080a 	mov.w	r8, #10
    eea6:	4e0b      	ldr	r6, [pc, #44]	; (eed4 <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
    eea8:	4621      	mov	r1, r4
    eeaa:	4628      	mov	r0, r5
    eeac:	47b8      	blx	r7
			delay_us(10);
    eeae:	4640      	mov	r0, r8
    eeb0:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
    eeb2:	3c01      	subs	r4, #1
    eeb4:	b2e4      	uxtb	r4, r4
    eeb6:	2c10      	cmp	r4, #16
    eeb8:	d1f6      	bne.n	eea8 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
    eeba:	4628      	mov	r0, r5
    eebc:	4b06      	ldr	r3, [pc, #24]	; (eed8 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
    eebe:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
    eec0:	78e8      	ldrb	r0, [r5, #3]
		return result;
    eec2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eeca:	bf00      	nop
    eecc:	0000ee59 	.word	0x0000ee59
    eed0:	0000ee71 	.word	0x0000ee71
    eed4:	00002a65 	.word	0x00002a65
    eed8:	0000ee25 	.word	0x0000ee25

0000eedc <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
    eedc:	b510      	push	{r4, lr}
    eede:	4604      	mov	r4, r0
	i2c=i2cClass;
    eee0:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
    eee2:	7a4b      	ldrb	r3, [r1, #9]
    eee4:	b90b      	cbnz	r3, eeea <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
    eee6:	78a0      	ldrb	r0, [r4, #2]
    eee8:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
    eeea:	4611      	mov	r1, r2
    eeec:	4b04      	ldr	r3, [pc, #16]	; (ef00 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
    eeee:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
    eef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    eef2:	4b04      	ldr	r3, [pc, #16]	; (ef04 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
    eef4:	4798      	blx	r3
		isOK=SelfTest();
    eef6:	4620      	mov	r0, r4
    eef8:	4b03      	ldr	r3, [pc, #12]	; (ef08 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
    eefa:	4798      	blx	r3
    eefc:	70a0      	strb	r0, [r4, #2]
    eefe:	e7f2      	b.n	eee6 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
    ef00:	0000ee0d 	.word	0x0000ee0d
    ef04:	00011e61 	.word	0x00011e61
    ef08:	0000ee85 	.word	0x0000ee85

0000ef0c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    ef0c:	b510      	push	{r4, lr}
    ef0e:	4604      	mov	r4, r0
    ef10:	302c      	adds	r0, #44	; 0x2c
    ef12:	4b03      	ldr	r3, [pc, #12]	; (ef20 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    ef14:	4798      	blx	r3
    ef16:	4620      	mov	r0, r4
    ef18:	4b02      	ldr	r3, [pc, #8]	; (ef24 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    ef1a:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    ef1c:	4620      	mov	r0, r4
    ef1e:	bd10      	pop	{r4, pc}
    ef20:	0000ee0b 	.word	0x0000ee0b
    ef24:	0000f155 	.word	0x0000f155

0000ef28 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    ef28:	b570      	push	{r4, r5, r6, lr}
    ef2a:	4c05      	ldr	r4, [pc, #20]	; (ef40 <__tcf_1+0x18>)
    ef2c:	4e05      	ldr	r6, [pc, #20]	; (ef44 <__tcf_1+0x1c>)
    ef2e:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    ef32:	3c1c      	subs	r4, #28
    ef34:	4620      	mov	r0, r4
    ef36:	47b0      	blx	r6
    ef38:	42ac      	cmp	r4, r5
    ef3a:	d1fa      	bne.n	ef32 <__tcf_1+0xa>
    ef3c:	bd70      	pop	{r4, r5, r6, pc}
    ef3e:	bf00      	nop
    ef40:	20001acc 	.word	0x20001acc
    ef44:	00011bf1 	.word	0x00011bf1

0000ef48 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    ef48:	b510      	push	{r4, lr}
    ef4a:	4803      	ldr	r0, [pc, #12]	; (ef58 <__tcf_0+0x10>)
    ef4c:	4c03      	ldr	r4, [pc, #12]	; (ef5c <__tcf_0+0x14>)
    ef4e:	47a0      	blx	r4
    ef50:	4803      	ldr	r0, [pc, #12]	; (ef60 <__tcf_0+0x18>)
    ef52:	47a0      	blx	r4
    ef54:	bd10      	pop	{r4, pc}
    ef56:	bf00      	nop
    ef58:	20001af8 	.word	0x20001af8
    ef5c:	0000f155 	.word	0x0000f155
    ef60:	20001acc 	.word	0x20001acc

0000ef64 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    ef64:	b510      	push	{r4, lr}
    ef66:	4604      	mov	r4, r0
    ef68:	4b0d      	ldr	r3, [pc, #52]	; (efa0 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    ef6a:	4798      	blx	r3
    ef6c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ef70:	4b0c      	ldr	r3, [pc, #48]	; (efa4 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    ef72:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    ef74:	4b0c      	ldr	r3, [pc, #48]	; (efa8 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    ef76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    ef7a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    ef7e:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    ef82:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    ef84:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    ef88:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    ef8a:	f503 729a 	add.w	r2, r3, #308	; 0x134
    ef8e:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    ef90:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
    ef94:	2300      	movs	r3, #0
    ef96:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    ef9a:	4620      	mov	r0, r4
    ef9c:	bd10      	pop	{r4, pc}
    ef9e:	bf00      	nop
    efa0:	0000f13d 	.word	0x0000f13d
    efa4:	0000ee09 	.word	0x0000ee09
    efa8:	20001a08 	.word	0x20001a08

0000efac <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
    efac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efb0:	4606      	mov	r6, r0
    efb2:	4c0c      	ldr	r4, [pc, #48]	; (efe4 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
    efb4:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    efb8:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    efba:	f8df 802c 	ldr.w	r8, [pc, #44]	; efe8 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
    efbe:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
    efc2:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    efc6:	f045 0120 	orr.w	r1, r5, #32
    efca:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
    efce:	b2c9      	uxtb	r1, r1
    efd0:	4620      	mov	r0, r4
    efd2:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    efd4:	3501      	adds	r5, #1
    efd6:	341c      	adds	r4, #28
    efd8:	2d07      	cmp	r5, #7
    efda:	d1f0      	bne.n	efbe <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
    efdc:	2000      	movs	r0, #0
    efde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efe2:	bf00      	nop
    efe4:	20001a08 	.word	0x20001a08
    efe8:	00011c05 	.word	0x00011c05

0000efec <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
    efec:	b570      	push	{r4, r5, r6, lr}
    efee:	4604      	mov	r4, r0
	i2c->Init();
    eff0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    eff4:	4b17      	ldr	r3, [pc, #92]	; (f054 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
    eff6:	4798      	blx	r3
	if (i2c->isOK)
    eff8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    effc:	7a5b      	ldrb	r3, [r3, #9]
    effe:	b943      	cbnz	r3, f012 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
    f000:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    f004:	7a5b      	ldrb	r3, [r3, #9]
    f006:	b2db      	uxtb	r3, r3
    f008:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
    f00c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
    f010:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
    f012:	4620      	mov	r0, r4
    f014:	4b10      	ldr	r3, [pc, #64]	; (f058 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
    f016:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
    f018:	f104 0568 	add.w	r5, r4, #104	; 0x68
    f01c:	462b      	mov	r3, r5
    f01e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    f022:	2100      	movs	r1, #0
    f024:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    f026:	4e0d      	ldr	r6, [pc, #52]	; (f05c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
    f028:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
    f02a:	462b      	mov	r3, r5
    f02c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    f030:	2101      	movs	r1, #1
    f032:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f034:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
    f036:	462a      	mov	r2, r5
    f038:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    f03c:	6e60      	ldr	r0, [r4, #100]	; 0x64
    f03e:	4b08      	ldr	r3, [pc, #32]	; (f060 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
    f040:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
    f042:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    f044:	6e22      	ldr	r2, [r4, #96]	; 0x60
    f046:	791b      	ldrb	r3, [r3, #4]
    f048:	7912      	ldrb	r2, [r2, #4]
    f04a:	4013      	ands	r3, r2
    f04c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    f050:	e7d6      	b.n	f000 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
    f052:	bf00      	nop
    f054:	0000dc61 	.word	0x0000dc61
    f058:	0000efad 	.word	0x0000efad
    f05c:	0000f261 	.word	0x0000f261
    f060:	0000eedd 	.word	0x0000eedd

0000f064 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
    f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f066:	f100 0468 	add.w	r4, r0, #104	; 0x68
    f06a:	1e4d      	subs	r5, r1, #1
    f06c:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
    f070:	4f04      	ldr	r7, [pc, #16]	; (f084 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
    f072:	f854 0b04 	ldr.w	r0, [r4], #4
    f076:	47b8      	blx	r7
    f078:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    f07c:	42b4      	cmp	r4, r6
    f07e:	d1f8      	bne.n	f072 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
    f080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f082:	bf00      	nop
    f084:	00011ce9 	.word	0x00011ce9

0000f088 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
    f088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
    f08c:	4c1c      	ldr	r4, [pc, #112]	; (f100 <_GLOBAL__sub_I_ptrFansClass+0x78>)
    f08e:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    f092:	491c      	ldr	r1, [pc, #112]	; (f104 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    f094:	4628      	mov	r0, r5
    f096:	4b1c      	ldr	r3, [pc, #112]	; (f108 <_GLOBAL__sub_I_ptrFansClass+0x80>)
    f098:	4798      	blx	r3
    f09a:	4f1c      	ldr	r7, [pc, #112]	; (f10c <_GLOBAL__sub_I_ptrFansClass+0x84>)
    f09c:	463a      	mov	r2, r7
    f09e:	491c      	ldr	r1, [pc, #112]	; (f110 <_GLOBAL__sub_I_ptrFansClass+0x88>)
    f0a0:	4628      	mov	r0, r5
    f0a2:	4e1c      	ldr	r6, [pc, #112]	; (f114 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    f0a4:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    f0a6:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    f0aa:	4628      	mov	r0, r5
    f0ac:	f8df 8088 	ldr.w	r8, [pc, #136]	; f138 <_GLOBAL__sub_I_ptrFansClass+0xb0>
    f0b0:	47c0      	blx	r8
    f0b2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    f0b6:	47c0      	blx	r8
    f0b8:	463a      	mov	r2, r7
    f0ba:	4917      	ldr	r1, [pc, #92]	; (f118 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    f0bc:	2000      	movs	r0, #0
    f0be:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    f0c0:	f504 789a 	add.w	r8, r4, #308	; 0x134
    f0c4:	4640      	mov	r0, r8
    f0c6:	4b15      	ldr	r3, [pc, #84]	; (f11c <_GLOBAL__sub_I_ptrFansClass+0x94>)
    f0c8:	4798      	blx	r3
    f0ca:	463a      	mov	r2, r7
    f0cc:	4914      	ldr	r1, [pc, #80]	; (f120 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    f0ce:	4640      	mov	r0, r8
    f0d0:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    f0d2:	4e14      	ldr	r6, [pc, #80]	; (f124 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    f0d4:	4620      	mov	r0, r4
    f0d6:	47b0      	blx	r6
    f0d8:	341c      	adds	r4, #28
    f0da:	42a5      	cmp	r5, r4
    f0dc:	d1fa      	bne.n	f0d4 <_GLOBAL__sub_I_ptrFansClass+0x4c>
    f0de:	4e0b      	ldr	r6, [pc, #44]	; (f10c <_GLOBAL__sub_I_ptrFansClass+0x84>)
    f0e0:	4632      	mov	r2, r6
    f0e2:	4911      	ldr	r1, [pc, #68]	; (f128 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    f0e4:	2000      	movs	r0, #0
    f0e6:	4c0b      	ldr	r4, [pc, #44]	; (f114 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    f0e8:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    f0ea:	4d10      	ldr	r5, [pc, #64]	; (f12c <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    f0ec:	4628      	mov	r0, r5
    f0ee:	4b10      	ldr	r3, [pc, #64]	; (f130 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    f0f0:	4798      	blx	r3
    f0f2:	4632      	mov	r2, r6
    f0f4:	490f      	ldr	r1, [pc, #60]	; (f134 <_GLOBAL__sub_I_ptrFansClass+0xac>)
    f0f6:	4628      	mov	r0, r5
    f0f8:	47a0      	blx	r4
    f0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0fe:	bf00      	nop
    f100:	20001a08 	.word	0x20001a08
    f104:	20009fd8 	.word	0x20009fd8
    f108:	0000dc31 	.word	0x0000dc31
    f10c:	20000000 	.word	0x20000000
    f110:	0000dc4d 	.word	0x0000dc4d
    f114:	000135c5 	.word	0x000135c5
    f118:	0000ef49 	.word	0x0000ef49
    f11c:	0000ee09 	.word	0x0000ee09
    f120:	0000ee0b 	.word	0x0000ee0b
    f124:	00011bdd 	.word	0x00011bdd
    f128:	0000ef29 	.word	0x0000ef29
    f12c:	20001b6c 	.word	0x20001b6c
    f130:	0000ef65 	.word	0x0000ef65
    f134:	0000ef0d 	.word	0x0000ef0d
    f138:	0000f13d 	.word	0x0000f13d

0000f13c <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    f13c:	b510      	push	{r4, lr}
    f13e:	4604      	mov	r4, r0
    f140:	4b02      	ldr	r3, [pc, #8]	; (f14c <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    f142:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    f144:	4b02      	ldr	r3, [pc, #8]	; (f150 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    f146:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    f148:	4620      	mov	r0, r4
    f14a:	bd10      	pop	{r4, pc}
    f14c:	0000f2c9 	.word	0x0000f2c9
    f150:	20001bf8 	.word	0x20001bf8

0000f154 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    f154:	b510      	push	{r4, lr}
    f156:	4604      	mov	r4, r0
    f158:	4b01      	ldr	r3, [pc, #4]	; (f160 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    f15a:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    f15c:	4620      	mov	r0, r4
    f15e:	bd10      	pop	{r4, pc}
    f160:	0000f2cb 	.word	0x0000f2cb

0000f164 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
    f164:	1f0b      	subs	r3, r1, #4
    f166:	300c      	adds	r0, #12
    f168:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
    f16a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f16e:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
    f172:	428b      	cmp	r3, r1
    f174:	d1f9      	bne.n	f16a <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
    f176:	2000      	movs	r0, #0
    f178:	4770      	bx	lr
	...

0000f17c <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
    f17c:	b538      	push	{r3, r4, r5, lr}
    f17e:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
    f180:	6900      	ldr	r0, [r0, #16]
    f182:	4b10      	ldr	r3, [pc, #64]	; (f1c4 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
    f184:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
    f186:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f18a:	0099      	lsls	r1, r3, #2
    f18c:	fa40 f501 	asr.w	r5, r0, r1
    f190:	5ce2      	ldrb	r2, [r4, r3]
    f192:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
    f196:	2502      	movs	r5, #2
    f198:	408d      	lsls	r5, r1
    f19a:	4205      	tst	r5, r0
    f19c:	bf14      	ite	ne
    f19e:	2501      	movne	r5, #1
    f1a0:	2500      	moveq	r5, #0
    f1a2:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
    f1a6:	2504      	movs	r5, #4
    f1a8:	408d      	lsls	r5, r1
    f1aa:	4205      	tst	r5, r0
    f1ac:	bf14      	ite	ne
    f1ae:	2501      	movne	r5, #1
    f1b0:	2500      	moveq	r5, #0
    f1b2:	f365 0200 	bfi	r2, r5, #0, #1
    f1b6:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
    f1b8:	2307      	movs	r3, #7
    f1ba:	408b      	lsls	r3, r1
    f1bc:	4018      	ands	r0, r3
    f1be:	b2c0      	uxtb	r0, r0
    f1c0:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
    f1c2:	bd38      	pop	{r3, r4, r5, pc}
    f1c4:	00011ce9 	.word	0x00011ce9

0000f1c8 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    f1c8:	b510      	push	{r4, lr}
    f1ca:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
    f1cc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f1d0:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
    f1d2:	f081 0201 	eor.w	r2, r1, #1
    f1d6:	bf0c      	ite	eq
    f1d8:	2102      	moveq	r1, #2
    f1da:	2101      	movne	r1, #1
    f1dc:	68c0      	ldr	r0, [r0, #12]
    f1de:	4b02      	ldr	r3, [pc, #8]	; (f1e8 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
    f1e0:	4798      	blx	r3
    f1e2:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    f1e4:	bd10      	pop	{r4, pc}
    f1e6:	bf00      	nop
    f1e8:	00011fa1 	.word	0x00011fa1

0000f1ec <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    f1ec:	b510      	push	{r4, lr}
    f1ee:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    f1f0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f1f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    f1f8:	69d8      	ldr	r0, [r3, #28]
    f1fa:	4b02      	ldr	r3, [pc, #8]	; (f204 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    f1fc:	4798      	blx	r3
    f1fe:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
    f202:	bd10      	pop	{r4, pc}
    f204:	00011d6d 	.word	0x00011d6d

0000f208 <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
    f208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f20c:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
    f20e:	2100      	movs	r1, #0
    f210:	4c0f      	ldr	r4, [pc, #60]	; (f250 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
    f212:	47a0      	blx	r4
	SetPWM(0xff);
    f214:	21ff      	movs	r1, #255	; 0xff
    f216:	4628      	mov	r0, r5
    f218:	4b0e      	ldr	r3, [pc, #56]	; (f254 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
    f21a:	4798      	blx	r3
	SetEnable(true);
    f21c:	2101      	movs	r1, #1
    f21e:	4628      	mov	r0, r5
    f220:	47a0      	blx	r4
    f222:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
    f224:	4f0b      	ldr	r7, [pc, #44]	; (f254 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
    f226:	f04f 080a 	mov.w	r8, #10
    f22a:	4e0b      	ldr	r6, [pc, #44]	; (f258 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
    f22c:	4621      	mov	r1, r4
    f22e:	4628      	mov	r0, r5
    f230:	47b8      	blx	r7
		delay_us(10);
    f232:	4640      	mov	r0, r8
    f234:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
    f236:	3c01      	subs	r4, #1
    f238:	b2e4      	uxtb	r4, r4
    f23a:	2c0c      	cmp	r4, #12
    f23c:	d1f6      	bne.n	f22c <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
    f23e:	4628      	mov	r0, r5
    f240:	4b06      	ldr	r3, [pc, #24]	; (f25c <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
    f242:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
    f244:	7828      	ldrb	r0, [r5, #0]
	return result;
}
    f246:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f24e:	bf00      	nop
    f250:	0000f1c9 	.word	0x0000f1c9
    f254:	0000f1ed 	.word	0x0000f1ed
    f258:	00002a65 	.word	0x00002a65
    f25c:	0000f17d 	.word	0x0000f17d

0000f260 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
    f260:	b510      	push	{r4, lr}
    f262:	4604      	mov	r4, r0
	i2c=i2cClass;
    f264:	6082      	str	r2, [r0, #8]
	fanNumber=number;
    f266:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
    f26a:	7a52      	ldrb	r2, [r2, #9]
    f26c:	b90a      	cbnz	r2, f272 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
    f26e:	7920      	ldrb	r0, [r4, #4]
    f270:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
    f272:	4619      	mov	r1, r3
    f274:	4b0e      	ldr	r3, [pc, #56]	; (f2b0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
    f276:	4798      	blx	r3
			if (fanNumber==0)
    f278:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f27c:	b15b      	cbz	r3, f296 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
    f27e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f282:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f286:	69d8      	ldr	r0, [r3, #28]
    f288:	4b0a      	ldr	r3, [pc, #40]	; (f2b4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
    f28a:	4798      	blx	r3
			isOK=SelfTest();
    f28c:	4620      	mov	r0, r4
    f28e:	4b0a      	ldr	r3, [pc, #40]	; (f2b8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
    f290:	4798      	blx	r3
    f292:	7120      	strb	r0, [r4, #4]
    f294:	e7eb      	b.n	f26e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
    f296:	2170      	movs	r1, #112	; 0x70
    f298:	68e0      	ldr	r0, [r4, #12]
    f29a:	4b08      	ldr	r3, [pc, #32]	; (f2bc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
    f29c:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
    f29e:	2107      	movs	r1, #7
    f2a0:	68e0      	ldr	r0, [r4, #12]
    f2a2:	4b07      	ldr	r3, [pc, #28]	; (f2c0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
    f2a4:	4798      	blx	r3
				expanders[1]->SetPortInput();
    f2a6:	6920      	ldr	r0, [r4, #16]
    f2a8:	4b06      	ldr	r3, [pc, #24]	; (f2c4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
    f2aa:	4798      	blx	r3
    f2ac:	e7e7      	b.n	f27e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
    f2ae:	bf00      	nop
    f2b0:	0000f165 	.word	0x0000f165
    f2b4:	00011e61 	.word	0x00011e61
    f2b8:	0000f209 	.word	0x0000f209
    f2bc:	00011ded 	.word	0x00011ded
    f2c0:	00011e95 	.word	0x00011e95
    f2c4:	00011da9 	.word	0x00011da9

0000f2c8 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    f2c8:	4770      	bx	lr

0000f2ca <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    f2ca:	4770      	bx	lr

0000f2cc <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
    f2cc:	b510      	push	{r4, lr}
    f2ce:	4604      	mov	r4, r0
    f2d0:	4b01      	ldr	r3, [pc, #4]	; (f2d8 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
    f2d2:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
    f2d4:	4620      	mov	r0, r4
    f2d6:	bd10      	pop	{r4, pc}
    f2d8:	0000f79d 	.word	0x0000f79d

0000f2dc <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    f2dc:	b538      	push	{r3, r4, r5, lr}
    f2de:	4d04      	ldr	r5, [pc, #16]	; (f2f0 <__tcf_0+0x14>)
    f2e0:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
    f2e4:	4c03      	ldr	r4, [pc, #12]	; (f2f4 <__tcf_0+0x18>)
    f2e6:	47a0      	blx	r4
    f2e8:	4628      	mov	r0, r5
    f2ea:	47a0      	blx	r4
    f2ec:	bd38      	pop	{r3, r4, r5, pc}
    f2ee:	bf00      	nop
    f2f0:	20001bfc 	.word	0x20001bfc
    f2f4:	0000f79d 	.word	0x0000f79d

0000f2f8 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
    f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2fa:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
    f2fc:	4d17      	ldr	r5, [pc, #92]	; (f35c <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x64>)
    f2fe:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
		valve[i]->InitController(i);
    f302:	2100      	movs	r1, #0
    f304:	4628      	mov	r0, r5
    f306:	4f16      	ldr	r7, [pc, #88]	; (f360 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x68>)
    f308:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
    f30a:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    f30e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    f312:	4e14      	ldr	r6, [pc, #80]	; (f364 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x6c>)
    f314:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
    f316:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
    f31a:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
    f31e:	2101      	movs	r1, #1
    f320:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
    f322:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    f326:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    f32a:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
    f32c:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    f330:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    f334:	47b0      	blx	r6
    f336:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    f33a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    f33e:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
    f340:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    f344:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	valve2=valve[1]; 
    f348:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    f34c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (valve1->isOK)|(valve2->isOK);
    f350:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
    f354:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
    f358:	4310      	orrs	r0, r2
    f35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f35c:	20001bfc 	.word	0x20001bfc
    f360:	0000f7bd 	.word	0x0000f7bd
    f364:	0000fb93 	.word	0x0000fb93

0000f368 <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv>:
		boolResult=	!valve1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
    f368:	b570      	push	{r4, r5, r6, lr}
    f36a:	4605      	mov	r5, r0
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
    f36c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
    f370:	4e05      	ldr	r6, [pc, #20]	; (f388 <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv+0x20>)
    f372:	47b0      	blx	r6
    f374:	4604      	mov	r4, r0
    f376:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
    f37a:	47b0      	blx	r6
    f37c:	4320      	orrs	r0, r4
    f37e:	b2c0      	uxtb	r0, r0
    f380:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	return is_stand_alone;
}
    f384:	bd70      	pop	{r4, r5, r6, pc}
    f386:	bf00      	nop
    f388:	0000fb59 	.word	0x0000fb59

0000f38c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:

Dual_Flapper_Valve_Controller flapper;
    f38c:	b570      	push	{r4, r5, r6, lr}
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    f38e:	4c0b      	ldr	r4, [pc, #44]	; (f3bc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x30>)
    f390:	4620      	mov	r0, r4
    f392:	4d0b      	ldr	r5, [pc, #44]	; (f3c0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x34>)
    f394:	47a8      	blx	r5
    f396:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    f39a:	47a8      	blx	r5
    f39c:	4e09      	ldr	r6, [pc, #36]	; (f3c4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x38>)
    f39e:	4632      	mov	r2, r6
    f3a0:	4909      	ldr	r1, [pc, #36]	; (f3c8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x3c>)
    f3a2:	2000      	movs	r0, #0
    f3a4:	4d09      	ldr	r5, [pc, #36]	; (f3cc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x40>)
    f3a6:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
    f3a8:	f504 74dc 	add.w	r4, r4, #440	; 0x1b8
    f3ac:	4620      	mov	r0, r4
    f3ae:	4b08      	ldr	r3, [pc, #32]	; (f3d0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
    f3b0:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
    f3b2:	4632      	mov	r2, r6
    f3b4:	4907      	ldr	r1, [pc, #28]	; (f3d4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
    f3b6:	4620      	mov	r0, r4
    f3b8:	47a8      	blx	r5
    f3ba:	bd70      	pop	{r4, r5, r6, pc}
    f3bc:	20001bfc 	.word	0x20001bfc
    f3c0:	0000f711 	.word	0x0000f711
    f3c4:	20000000 	.word	0x20000000
    f3c8:	0000f2dd 	.word	0x0000f2dd
    f3cc:	000135c5 	.word	0x000135c5
    f3d0:	0000f711 	.word	0x0000f711
    f3d4:	0000f2cd 	.word	0x0000f2cd

0000f3d8 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    f3d8:	b480      	push	{r7}
    f3da:	b083      	sub	sp, #12
    f3dc:	af00      	add	r7, sp, #0
    f3de:	6078      	str	r0, [r7, #4]
    f3e0:	460b      	mov	r3, r1
    f3e2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f3e4:	78fb      	ldrb	r3, [r7, #3]
    f3e6:	687a      	ldr	r2, [r7, #4]
    f3e8:	01db      	lsls	r3, r3, #7
    f3ea:	4413      	add	r3, r2
    f3ec:	681b      	ldr	r3, [r3, #0]
}
    f3ee:	4618      	mov	r0, r3
    f3f0:	370c      	adds	r7, #12
    f3f2:	46bd      	mov	sp, r7
    f3f4:	bc80      	pop	{r7}
    f3f6:	4770      	bx	lr

0000f3f8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f3f8:	b480      	push	{r7}
    f3fa:	b085      	sub	sp, #20
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	60f8      	str	r0, [r7, #12]
    f400:	460b      	mov	r3, r1
    f402:	607a      	str	r2, [r7, #4]
    f404:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f406:	7afb      	ldrb	r3, [r7, #11]
    f408:	68fa      	ldr	r2, [r7, #12]
    f40a:	01db      	lsls	r3, r3, #7
    f40c:	4413      	add	r3, r2
    f40e:	3318      	adds	r3, #24
    f410:	687a      	ldr	r2, [r7, #4]
    f412:	601a      	str	r2, [r3, #0]
}
    f414:	bf00      	nop
    f416:	3714      	adds	r7, #20
    f418:	46bd      	mov	sp, r7
    f41a:	bc80      	pop	{r7}
    f41c:	4770      	bx	lr

0000f41e <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    f41e:	b480      	push	{r7}
    f420:	b083      	sub	sp, #12
    f422:	af00      	add	r7, sp, #0
    f424:	6078      	str	r0, [r7, #4]
    f426:	460b      	mov	r3, r1
    f428:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f42a:	78fb      	ldrb	r3, [r7, #3]
    f42c:	687a      	ldr	r2, [r7, #4]
    f42e:	01db      	lsls	r3, r3, #7
    f430:	4413      	add	r3, r2
    f432:	3310      	adds	r3, #16
    f434:	681b      	ldr	r3, [r3, #0]
}
    f436:	4618      	mov	r0, r3
    f438:	370c      	adds	r7, #12
    f43a:	46bd      	mov	sp, r7
    f43c:	bc80      	pop	{r7}
    f43e:	4770      	bx	lr

0000f440 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f440:	b480      	push	{r7}
    f442:	b085      	sub	sp, #20
    f444:	af00      	add	r7, sp, #0
    f446:	60f8      	str	r0, [r7, #12]
    f448:	460b      	mov	r3, r1
    f44a:	607a      	str	r2, [r7, #4]
    f44c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f44e:	7afb      	ldrb	r3, [r7, #11]
    f450:	68fa      	ldr	r2, [r7, #12]
    f452:	01db      	lsls	r3, r3, #7
    f454:	4413      	add	r3, r2
    f456:	3314      	adds	r3, #20
    f458:	687a      	ldr	r2, [r7, #4]
    f45a:	601a      	str	r2, [r3, #0]
}
    f45c:	bf00      	nop
    f45e:	3714      	adds	r7, #20
    f460:	46bd      	mov	sp, r7
    f462:	bc80      	pop	{r7}
    f464:	4770      	bx	lr

0000f466 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f466:	b480      	push	{r7}
    f468:	b085      	sub	sp, #20
    f46a:	af00      	add	r7, sp, #0
    f46c:	60f8      	str	r0, [r7, #12]
    f46e:	460b      	mov	r3, r1
    f470:	607a      	str	r2, [r7, #4]
    f472:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    f474:	7afb      	ldrb	r3, [r7, #11]
    f476:	68fa      	ldr	r2, [r7, #12]
    f478:	01db      	lsls	r3, r3, #7
    f47a:	4413      	add	r3, r2
    f47c:	331c      	adds	r3, #28
    f47e:	687a      	ldr	r2, [r7, #4]
    f480:	601a      	str	r2, [r3, #0]
}
    f482:	bf00      	nop
    f484:	3714      	adds	r7, #20
    f486:	46bd      	mov	sp, r7
    f488:	bc80      	pop	{r7}
    f48a:	4770      	bx	lr

0000f48c <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f48c:	b480      	push	{r7}
    f48e:	b083      	sub	sp, #12
    f490:	af00      	add	r7, sp, #0
    f492:	6078      	str	r0, [r7, #4]
    f494:	460b      	mov	r3, r1
    f496:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f498:	78fb      	ldrb	r3, [r7, #3]
    f49a:	687a      	ldr	r2, [r7, #4]
    f49c:	01db      	lsls	r3, r3, #7
    f49e:	4413      	add	r3, r2
    f4a0:	3320      	adds	r3, #32
    f4a2:	681b      	ldr	r3, [r3, #0]
}
    f4a4:	4618      	mov	r0, r3
    f4a6:	370c      	adds	r7, #12
    f4a8:	46bd      	mov	sp, r7
    f4aa:	bc80      	pop	{r7}
    f4ac:	4770      	bx	lr
	...

0000f4b0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    f4b0:	b580      	push	{r7, lr}
    f4b2:	b082      	sub	sp, #8
    f4b4:	af00      	add	r7, sp, #0
    f4b6:	4603      	mov	r3, r0
    f4b8:	6039      	str	r1, [r7, #0]
    f4ba:	71fb      	strb	r3, [r7, #7]
    f4bc:	4613      	mov	r3, r2
    f4be:	71bb      	strb	r3, [r7, #6]
	if (level) {
    f4c0:	79bb      	ldrb	r3, [r7, #6]
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	d006      	beq.n	f4d4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    f4c6:	79fb      	ldrb	r3, [r7, #7]
    f4c8:	683a      	ldr	r2, [r7, #0]
    f4ca:	4619      	mov	r1, r3
    f4cc:	4806      	ldr	r0, [pc, #24]	; (f4e8 <_gpio_set_level+0x38>)
    f4ce:	4b07      	ldr	r3, [pc, #28]	; (f4ec <_gpio_set_level+0x3c>)
    f4d0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    f4d2:	e005      	b.n	f4e0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    f4d4:	79fb      	ldrb	r3, [r7, #7]
    f4d6:	683a      	ldr	r2, [r7, #0]
    f4d8:	4619      	mov	r1, r3
    f4da:	4803      	ldr	r0, [pc, #12]	; (f4e8 <_gpio_set_level+0x38>)
    f4dc:	4b04      	ldr	r3, [pc, #16]	; (f4f0 <_gpio_set_level+0x40>)
    f4de:	4798      	blx	r3
}
    f4e0:	bf00      	nop
    f4e2:	3708      	adds	r7, #8
    f4e4:	46bd      	mov	sp, r7
    f4e6:	bd80      	pop	{r7, pc}
    f4e8:	41008000 	.word	0x41008000
    f4ec:	0000f3f9 	.word	0x0000f3f9
    f4f0:	0000f441 	.word	0x0000f441

0000f4f4 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    f4f4:	b580      	push	{r7, lr}
    f4f6:	b082      	sub	sp, #8
    f4f8:	af00      	add	r7, sp, #0
    f4fa:	4603      	mov	r3, r0
    f4fc:	6039      	str	r1, [r7, #0]
    f4fe:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    f500:	79fb      	ldrb	r3, [r7, #7]
    f502:	683a      	ldr	r2, [r7, #0]
    f504:	4619      	mov	r1, r3
    f506:	4803      	ldr	r0, [pc, #12]	; (f514 <_gpio_toggle_level+0x20>)
    f508:	4b03      	ldr	r3, [pc, #12]	; (f518 <_gpio_toggle_level+0x24>)
    f50a:	4798      	blx	r3
}
    f50c:	bf00      	nop
    f50e:	3708      	adds	r7, #8
    f510:	46bd      	mov	sp, r7
    f512:	bd80      	pop	{r7, pc}
    f514:	41008000 	.word	0x41008000
    f518:	0000f467 	.word	0x0000f467

0000f51c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f51c:	b580      	push	{r7, lr}
    f51e:	b086      	sub	sp, #24
    f520:	af00      	add	r7, sp, #0
    f522:	4603      	mov	r3, r0
    f524:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f526:	f107 030c 	add.w	r3, r7, #12
    f52a:	4618      	mov	r0, r3
    f52c:	4b13      	ldr	r3, [pc, #76]	; (f57c <_gpio_get_level+0x60>)
    f52e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f530:	79fb      	ldrb	r3, [r7, #7]
    f532:	4619      	mov	r1, r3
    f534:	4812      	ldr	r0, [pc, #72]	; (f580 <_gpio_get_level+0x64>)
    f536:	4b13      	ldr	r3, [pc, #76]	; (f584 <_gpio_get_level+0x68>)
    f538:	4798      	blx	r3
    f53a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f53c:	79fb      	ldrb	r3, [r7, #7]
    f53e:	4619      	mov	r1, r3
    f540:	480f      	ldr	r0, [pc, #60]	; (f580 <_gpio_get_level+0x64>)
    f542:	4b11      	ldr	r3, [pc, #68]	; (f588 <_gpio_get_level+0x6c>)
    f544:	4798      	blx	r3
    f546:	4602      	mov	r2, r0
    f548:	697b      	ldr	r3, [r7, #20]
    f54a:	43db      	mvns	r3, r3
    f54c:	4013      	ands	r3, r2
    f54e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f550:	79fb      	ldrb	r3, [r7, #7]
    f552:	4619      	mov	r1, r3
    f554:	480a      	ldr	r0, [pc, #40]	; (f580 <_gpio_get_level+0x64>)
    f556:	4b0d      	ldr	r3, [pc, #52]	; (f58c <_gpio_get_level+0x70>)
    f558:	4798      	blx	r3
    f55a:	4602      	mov	r2, r0
    f55c:	697b      	ldr	r3, [r7, #20]
    f55e:	4013      	ands	r3, r2
    f560:	693a      	ldr	r2, [r7, #16]
    f562:	4313      	orrs	r3, r2
    f564:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f566:	f107 030c 	add.w	r3, r7, #12
    f56a:	4618      	mov	r0, r3
    f56c:	4b08      	ldr	r3, [pc, #32]	; (f590 <_gpio_get_level+0x74>)
    f56e:	4798      	blx	r3

	return tmp;
    f570:	693b      	ldr	r3, [r7, #16]
}
    f572:	4618      	mov	r0, r3
    f574:	3718      	adds	r7, #24
    f576:	46bd      	mov	sp, r7
    f578:	bd80      	pop	{r7, pc}
    f57a:	bf00      	nop
    f57c:	0000bd6d 	.word	0x0000bd6d
    f580:	41008000 	.word	0x41008000
    f584:	0000f3d9 	.word	0x0000f3d9
    f588:	0000f48d 	.word	0x0000f48d
    f58c:	0000f41f 	.word	0x0000f41f
    f590:	0000bd93 	.word	0x0000bd93

0000f594 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    f594:	b580      	push	{r7, lr}
    f596:	b082      	sub	sp, #8
    f598:	af00      	add	r7, sp, #0
    f59a:	4603      	mov	r3, r0
    f59c:	460a      	mov	r2, r1
    f59e:	71fb      	strb	r3, [r7, #7]
    f5a0:	4613      	mov	r3, r2
    f5a2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    f5a4:	79fb      	ldrb	r3, [r7, #7]
    f5a6:	115b      	asrs	r3, r3, #5
    f5a8:	b2d8      	uxtb	r0, r3
    f5aa:	79fb      	ldrb	r3, [r7, #7]
    f5ac:	f003 031f 	and.w	r3, r3, #31
    f5b0:	2201      	movs	r2, #1
    f5b2:	fa02 f303 	lsl.w	r3, r2, r3
    f5b6:	79ba      	ldrb	r2, [r7, #6]
    f5b8:	4619      	mov	r1, r3
    f5ba:	4b03      	ldr	r3, [pc, #12]	; (f5c8 <gpio_set_pin_level+0x34>)
    f5bc:	4798      	blx	r3
}
    f5be:	bf00      	nop
    f5c0:	3708      	adds	r7, #8
    f5c2:	46bd      	mov	sp, r7
    f5c4:	bd80      	pop	{r7, pc}
    f5c6:	bf00      	nop
    f5c8:	0000f4b1 	.word	0x0000f4b1

0000f5cc <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    f5cc:	b580      	push	{r7, lr}
    f5ce:	b082      	sub	sp, #8
    f5d0:	af00      	add	r7, sp, #0
    f5d2:	4603      	mov	r3, r0
    f5d4:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    f5d6:	79fb      	ldrb	r3, [r7, #7]
    f5d8:	115b      	asrs	r3, r3, #5
    f5da:	b2d8      	uxtb	r0, r3
    f5dc:	79fb      	ldrb	r3, [r7, #7]
    f5de:	f003 031f 	and.w	r3, r3, #31
    f5e2:	2201      	movs	r2, #1
    f5e4:	fa02 f303 	lsl.w	r3, r2, r3
    f5e8:	4619      	mov	r1, r3
    f5ea:	4b03      	ldr	r3, [pc, #12]	; (f5f8 <gpio_toggle_pin_level+0x2c>)
    f5ec:	4798      	blx	r3
}
    f5ee:	bf00      	nop
    f5f0:	3708      	adds	r7, #8
    f5f2:	46bd      	mov	sp, r7
    f5f4:	bd80      	pop	{r7, pc}
    f5f6:	bf00      	nop
    f5f8:	0000f4f5 	.word	0x0000f4f5

0000f5fc <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f5fc:	b580      	push	{r7, lr}
    f5fe:	b082      	sub	sp, #8
    f600:	af00      	add	r7, sp, #0
    f602:	4603      	mov	r3, r0
    f604:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f606:	79fb      	ldrb	r3, [r7, #7]
    f608:	115b      	asrs	r3, r3, #5
    f60a:	b2db      	uxtb	r3, r3
    f60c:	4618      	mov	r0, r3
    f60e:	4b09      	ldr	r3, [pc, #36]	; (f634 <gpio_get_pin_level+0x38>)
    f610:	4798      	blx	r3
    f612:	4601      	mov	r1, r0
    f614:	79fb      	ldrb	r3, [r7, #7]
    f616:	f003 031f 	and.w	r3, r3, #31
    f61a:	2201      	movs	r2, #1
    f61c:	fa02 f303 	lsl.w	r3, r2, r3
    f620:	400b      	ands	r3, r1
    f622:	2b00      	cmp	r3, #0
    f624:	bf14      	ite	ne
    f626:	2301      	movne	r3, #1
    f628:	2300      	moveq	r3, #0
    f62a:	b2db      	uxtb	r3, r3
}
    f62c:	4618      	mov	r0, r3
    f62e:	3708      	adds	r7, #8
    f630:	46bd      	mov	sp, r7
    f632:	bd80      	pop	{r7, pc}
    f634:	0000f51d 	.word	0x0000f51d

0000f638 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
    f638:	b480      	push	{r7}
    f63a:	b083      	sub	sp, #12
    f63c:	af00      	add	r7, sp, #0
    f63e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
    f640:	4b07      	ldr	r3, [pc, #28]	; (f660 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    f642:	681b      	ldr	r3, [r3, #0]
    f644:	2201      	movs	r2, #1
    f646:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
    f64a:	4b05      	ldr	r3, [pc, #20]	; (f660 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    f64c:	681b      	ldr	r3, [r3, #0]
    f64e:	2201      	movs	r2, #1
    f650:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
    f654:	bf00      	nop
    f656:	370c      	adds	r7, #12
    f658:	46bd      	mov	sp, r7
    f65a:	bc80      	pop	{r7}
    f65c:	4770      	bx	lr
    f65e:	bf00      	nop
    f660:	20001fc4 	.word	0x20001fc4

0000f664 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
    f664:	b480      	push	{r7}
    f666:	b083      	sub	sp, #12
    f668:	af00      	add	r7, sp, #0
    f66a:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
    f66c:	4b07      	ldr	r3, [pc, #28]	; (f68c <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    f66e:	685b      	ldr	r3, [r3, #4]
    f670:	2201      	movs	r2, #1
    f672:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
    f676:	4b05      	ldr	r3, [pc, #20]	; (f68c <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    f678:	685b      	ldr	r3, [r3, #4]
    f67a:	2201      	movs	r2, #1
    f67c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
    f680:	bf00      	nop
    f682:	370c      	adds	r7, #12
    f684:	46bd      	mov	sp, r7
    f686:	bc80      	pop	{r7}
    f688:	4770      	bx	lr
    f68a:	bf00      	nop
    f68c:	20001fc4 	.word	0x20001fc4

0000f690 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
    f690:	b480      	push	{r7}
    f692:	b083      	sub	sp, #12
    f694:	af00      	add	r7, sp, #0
    f696:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
    f698:	4b04      	ldr	r3, [pc, #16]	; (f6ac <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
    f69a:	681b      	ldr	r3, [r3, #0]
    f69c:	2201      	movs	r2, #1
    f69e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
    f6a2:	bf00      	nop
    f6a4:	370c      	adds	r7, #12
    f6a6:	46bd      	mov	sp, r7
    f6a8:	bc80      	pop	{r7}
    f6aa:	4770      	bx	lr
    f6ac:	20001fc4 	.word	0x20001fc4

0000f6b0 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
    f6b0:	b480      	push	{r7}
    f6b2:	b083      	sub	sp, #12
    f6b4:	af00      	add	r7, sp, #0
    f6b6:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
    f6b8:	4b04      	ldr	r3, [pc, #16]	; (f6cc <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
    f6ba:	685b      	ldr	r3, [r3, #4]
    f6bc:	2201      	movs	r2, #1
    f6be:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
    f6c2:	bf00      	nop
    f6c4:	370c      	adds	r7, #12
    f6c6:	46bd      	mov	sp, r7
    f6c8:	bc80      	pop	{r7}
    f6ca:	4770      	bx	lr
    f6cc:	20001fc4 	.word	0x20001fc4

0000f6d0 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
    f6d0:	b480      	push	{r7}
    f6d2:	b083      	sub	sp, #12
    f6d4:	af00      	add	r7, sp, #0
    f6d6:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
    f6d8:	4b04      	ldr	r3, [pc, #16]	; (f6ec <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
    f6da:	681b      	ldr	r3, [r3, #0]
    f6dc:	2201      	movs	r2, #1
    f6de:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
    f6e2:	bf00      	nop
    f6e4:	370c      	adds	r7, #12
    f6e6:	46bd      	mov	sp, r7
    f6e8:	bc80      	pop	{r7}
    f6ea:	4770      	bx	lr
    f6ec:	20001fc4 	.word	0x20001fc4

0000f6f0 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
    f6f0:	b480      	push	{r7}
    f6f2:	b083      	sub	sp, #12
    f6f4:	af00      	add	r7, sp, #0
    f6f6:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
    f6f8:	4b04      	ldr	r3, [pc, #16]	; (f70c <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
    f6fa:	685b      	ldr	r3, [r3, #4]
    f6fc:	2201      	movs	r2, #1
    f6fe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
    f702:	bf00      	nop
    f704:	370c      	adds	r7, #12
    f706:	46bd      	mov	sp, r7
    f708:	bc80      	pop	{r7}
    f70a:	4770      	bx	lr
    f70c:	20001fc4 	.word	0x20001fc4

0000f710 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    f710:	b580      	push	{r7, lr}
    f712:	b082      	sub	sp, #8
    f714:	af00      	add	r7, sp, #0
    f716:	6078      	str	r0, [r7, #4]
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	4618      	mov	r0, r3
    f71c:	4b1d      	ldr	r3, [pc, #116]	; (f794 <_ZN22FlapperValveControllerC1Ev+0x84>)
    f71e:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	4a1d      	ldr	r2, [pc, #116]	; (f798 <_ZN22FlapperValveControllerC1Ev+0x88>)
    f724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
    f728:	687b      	ldr	r3, [r7, #4]
    f72a:	2200      	movs	r2, #0
    f72c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
    f730:	687b      	ldr	r3, [r7, #4]
    f732:	2200      	movs	r2, #0
    f734:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
    f738:	687b      	ldr	r3, [r7, #4]
    f73a:	2200      	movs	r2, #0
    f73c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	2200      	movs	r2, #0
    f744:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
    f748:	687b      	ldr	r3, [r7, #4]
    f74a:	2200      	movs	r2, #0
    f74c:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    f750:	687b      	ldr	r3, [r7, #4]
    f752:	22da      	movs	r2, #218	; 0xda
    f754:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
    f758:	687b      	ldr	r3, [r7, #4]
    f75a:	2200      	movs	r2, #0
    f75c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
    f760:	687b      	ldr	r3, [r7, #4]
    f762:	2200      	movs	r2, #0
    f764:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	2200      	movs	r2, #0
    f76c:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	2200      	movs	r2, #0
    f774:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
    f778:	687b      	ldr	r3, [r7, #4]
    f77a:	2200      	movs	r2, #0
    f77c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	2200      	movs	r2, #0
    f784:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	
} //FlapperValveController
    f788:	687b      	ldr	r3, [r7, #4]
    f78a:	4618      	mov	r0, r3
    f78c:	3708      	adds	r7, #8
    f78e:	46bd      	mov	sp, r7
    f790:	bd80      	pop	{r7, pc}
    f792:	bf00      	nop
    f794:	00010a61 	.word	0x00010a61
    f798:	20001fcc 	.word	0x20001fcc

0000f79c <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    f79c:	b580      	push	{r7, lr}
    f79e:	b082      	sub	sp, #8
    f7a0:	af00      	add	r7, sp, #0
    f7a2:	6078      	str	r0, [r7, #4]
    f7a4:	687b      	ldr	r3, [r7, #4]
    f7a6:	4618      	mov	r0, r3
    f7a8:	4b03      	ldr	r3, [pc, #12]	; (f7b8 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    f7aa:	4798      	blx	r3
{
} //~FlapperValveController
    f7ac:	687b      	ldr	r3, [r7, #4]
    f7ae:	4618      	mov	r0, r3
    f7b0:	3708      	adds	r7, #8
    f7b2:	46bd      	mov	sp, r7
    f7b4:	bd80      	pop	{r7, pc}
    f7b6:	bf00      	nop
    f7b8:	00010aad 	.word	0x00010aad

0000f7bc <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
    f7bc:	b580      	push	{r7, lr}
    f7be:	b082      	sub	sp, #8
    f7c0:	af00      	add	r7, sp, #0
    f7c2:	6078      	str	r0, [r7, #4]
    f7c4:	460b      	mov	r3, r1
    f7c6:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
    f7c8:	78fb      	ldrb	r3, [r7, #3]
    f7ca:	491b      	ldr	r1, [pc, #108]	; (f838 <_ZN22FlapperValveController14InitControllerEh+0x7c>)
    f7cc:	687a      	ldr	r2, [r7, #4]
    f7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
    f7d2:	687b      	ldr	r3, [r7, #4]
    f7d4:	78fa      	ldrb	r2, [r7, #3]
    f7d6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
    f7da:	78fa      	ldrb	r2, [r7, #3]
    f7dc:	4613      	mov	r3, r2
    f7de:	011b      	lsls	r3, r3, #4
    f7e0:	1a9b      	subs	r3, r3, r2
    f7e2:	00db      	lsls	r3, r3, #3
    f7e4:	4a15      	ldr	r2, [pc, #84]	; (f83c <_ZN22FlapperValveController14InitControllerEh+0x80>)
    f7e6:	441a      	add	r2, r3
    f7e8:	687b      	ldr	r3, [r7, #4]
    f7ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
    f7ee:	78fb      	ldrb	r3, [r7, #3]
    f7f0:	78fa      	ldrb	r2, [r7, #3]
    f7f2:	0112      	lsls	r2, r2, #4
    f7f4:	4912      	ldr	r1, [pc, #72]	; (f840 <_ZN22FlapperValveController14InitControllerEh+0x84>)
    f7f6:	440a      	add	r2, r1
    f7f8:	6879      	ldr	r1, [r7, #4]
    f7fa:	3332      	adds	r3, #50	; 0x32
    f7fc:	009b      	lsls	r3, r3, #2
    f7fe:	440b      	add	r3, r1
    f800:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
    f802:	687b      	ldr	r3, [r7, #4]
    f804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f808:	78fa      	ldrb	r2, [r7, #3]
    f80a:	4611      	mov	r1, r2
    f80c:	4618      	mov	r0, r3
    f80e:	4b0d      	ldr	r3, [pc, #52]	; (f844 <_ZN22FlapperValveController14InitControllerEh+0x88>)
    f810:	4798      	blx	r3
    f812:	4603      	mov	r3, r0
    f814:	2b00      	cmp	r3, #0
    f816:	d007      	beq.n	f828 <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
    f818:	6878      	ldr	r0, [r7, #4]
    f81a:	4b0b      	ldr	r3, [pc, #44]	; (f848 <_ZN22FlapperValveController14InitControllerEh+0x8c>)
    f81c:	4798      	blx	r3
    f81e:	4603      	mov	r3, r0
    f820:	461a      	mov	r2, r3
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f82e:	b2db      	uxtb	r3, r3
}
    f830:	4618      	mov	r0, r3
    f832:	3708      	adds	r7, #8
    f834:	46bd      	mov	sp, r7
    f836:	bd80      	pop	{r7, pc}
    f838:	20001fc4 	.word	0x20001fc4
    f83c:	20001fcc 	.word	0x20001fcc
    f840:	20001fa4 	.word	0x20001fa4
    f844:	00010b61 	.word	0x00010b61
    f848:	000106ed 	.word	0x000106ed

0000f84c <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    f84c:	b480      	push	{r7}
    f84e:	b083      	sub	sp, #12
    f850:	af00      	add	r7, sp, #0
    f852:	6078      	str	r0, [r7, #4]
    f854:	460b      	mov	r3, r1
    f856:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    f858:	687b      	ldr	r3, [r7, #4]
    f85a:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
    f85e:	687b      	ldr	r3, [r7, #4]
    f860:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
    f864:	687b      	ldr	r3, [r7, #4]
    f866:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    f86a:	461a      	mov	r2, r3
    f86c:	78fb      	ldrb	r3, [r7, #3]
    f86e:	429a      	cmp	r2, r3
    f870:	bfcc      	ite	gt
    f872:	2301      	movgt	r3, #1
    f874:	2300      	movle	r3, #0
    f876:	b2da      	uxtb	r2, r3
    f878:	687b      	ldr	r3, [r7, #4]
    f87a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
    f87e:	687b      	ldr	r3, [r7, #4]
    f880:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
    f884:	4618      	mov	r0, r3
    f886:	370c      	adds	r7, #12
    f888:	46bd      	mov	sp, r7
    f88a:	bc80      	pop	{r7}
    f88c:	4770      	bx	lr
	...

0000f890 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    f890:	b580      	push	{r7, lr}
    f892:	b082      	sub	sp, #8
    f894:	af00      	add	r7, sp, #0
    f896:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    f89e:	4619      	mov	r1, r3
    f8a0:	6878      	ldr	r0, [r7, #4]
    f8a2:	4b03      	ldr	r3, [pc, #12]	; (f8b0 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    f8a4:	4798      	blx	r3
    f8a6:	4603      	mov	r3, r0
	
}
    f8a8:	4618      	mov	r0, r3
    f8aa:	3708      	adds	r7, #8
    f8ac:	46bd      	mov	sp, r7
    f8ae:	bd80      	pop	{r7, pc}
    f8b0:	0000f84d 	.word	0x0000f84d

0000f8b4 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    f8b4:	b590      	push	{r4, r7, lr}
    f8b6:	b083      	sub	sp, #12
    f8b8:	af00      	add	r7, sp, #0
    f8ba:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    f8bc:	687b      	ldr	r3, [r7, #4]
    f8be:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
    f8c2:	687b      	ldr	r3, [r7, #4]
    f8c4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f8ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    f8d2:	2b00      	cmp	r3, #0
    f8d4:	d009      	beq.n	f8ea <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
    f8d6:	687b      	ldr	r3, [r7, #4]
    f8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f8dc:	2100      	movs	r1, #0
    f8de:	4618      	mov	r0, r3
    f8e0:	4b0b      	ldr	r3, [pc, #44]	; (f910 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    f8e2:	4798      	blx	r3
		delay_ms(10);
    f8e4:	200a      	movs	r0, #10
    f8e6:	4b0b      	ldr	r3, [pc, #44]	; (f914 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    f8e8:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    f8f0:	6878      	ldr	r0, [r7, #4]
    f8f2:	4b09      	ldr	r3, [pc, #36]	; (f918 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    f8f4:	4798      	blx	r3
    f8f6:	4603      	mov	r3, r0
    f8f8:	4619      	mov	r1, r3
    f8fa:	4620      	mov	r0, r4
    f8fc:	4b07      	ldr	r3, [pc, #28]	; (f91c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    f8fe:	4798      	blx	r3
	StartMotor();
    f900:	6878      	ldr	r0, [r7, #4]
    f902:	4b07      	ldr	r3, [pc, #28]	; (f920 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
    f904:	4798      	blx	r3
	return 0;
    f906:	2300      	movs	r3, #0
}
    f908:	4618      	mov	r0, r3
    f90a:	370c      	adds	r7, #12
    f90c:	46bd      	mov	sp, r7
    f90e:	bd90      	pop	{r4, r7, pc}
    f910:	00010cc1 	.word	0x00010cc1
    f914:	00002a99 	.word	0x00002a99
    f918:	0000f891 	.word	0x0000f891
    f91c:	00010d41 	.word	0x00010d41
    f920:	000102ed 	.word	0x000102ed

0000f924 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    f924:	b580      	push	{r7, lr}
    f926:	b082      	sub	sp, #8
    f928:	af00      	add	r7, sp, #0
    f92a:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    f92c:	6878      	ldr	r0, [r7, #4]
    f92e:	4b13      	ldr	r3, [pc, #76]	; (f97c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    f930:	4798      	blx	r3
    f932:	4603      	mov	r3, r0
    f934:	2b00      	cmp	r3, #0
    f936:	d003      	beq.n	f940 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    f938:	6878      	ldr	r0, [r7, #4]
    f93a:	4b11      	ldr	r3, [pc, #68]	; (f980 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    f93c:	4798      	blx	r3
    f93e:	e013      	b.n	f968 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    f940:	687b      	ldr	r3, [r7, #4]
    f942:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    f946:	2b00      	cmp	r3, #0
    f948:	d00b      	beq.n	f962 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f94a:	687b      	ldr	r3, [r7, #4]
    f94c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    f950:	4619      	mov	r1, r3
    f952:	6878      	ldr	r0, [r7, #4]
    f954:	4b0b      	ldr	r3, [pc, #44]	; (f984 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    f956:	4798      	blx	r3
			NBC_Activated=false;
    f958:	687b      	ldr	r3, [r7, #4]
    f95a:	2200      	movs	r2, #0
    f95c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    f960:	e002      	b.n	f968 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    f962:	6878      	ldr	r0, [r7, #4]
    f964:	4b08      	ldr	r3, [pc, #32]	; (f988 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    f966:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    f968:	687b      	ldr	r3, [r7, #4]
    f96a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    f96e:	f083 0301 	eor.w	r3, r3, #1
    f972:	b2db      	uxtb	r3, r3
}
    f974:	4618      	mov	r0, r3
    f976:	3708      	adds	r7, #8
    f978:	46bd      	mov	sp, r7
    f97a:	bd80      	pop	{r7, pc}
    f97c:	00010085 	.word	0x00010085
    f980:	00010025 	.word	0x00010025
    f984:	00010385 	.word	0x00010385
    f988:	0000fc8d 	.word	0x0000fc8d

0000f98c <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    f98c:	b590      	push	{r4, r7, lr}
    f98e:	b085      	sub	sp, #20
    f990:	af00      	add	r7, sp, #0
    f992:	6078      	str	r0, [r7, #4]
	bool result=false;
    f994:	2300      	movs	r3, #0
    f996:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    f998:	687b      	ldr	r3, [r7, #4]
    f99a:	33c7      	adds	r3, #199	; 0xc7
    f99c:	4619      	mov	r1, r3
    f99e:	4817      	ldr	r0, [pc, #92]	; (f9fc <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    f9a0:	4b17      	ldr	r3, [pc, #92]	; (fa00 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    f9a2:	4798      	blx	r3
	UpdateFlapperValveData();
    f9a4:	6878      	ldr	r0, [r7, #4]
    f9a6:	4b17      	ldr	r3, [pc, #92]	; (fa04 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    f9a8:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    f9aa:	687b      	ldr	r3, [r7, #4]
    f9ac:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    f9b0:	f083 0301 	eor.w	r3, r3, #1
    f9b4:	b2db      	uxtb	r3, r3
    f9b6:	461c      	mov	r4, r3
    f9b8:	6878      	ldr	r0, [r7, #4]
    f9ba:	4b13      	ldr	r3, [pc, #76]	; (fa08 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    f9bc:	4798      	blx	r3
    f9be:	4603      	mov	r3, r0
    f9c0:	f083 0301 	eor.w	r3, r3, #1
    f9c4:	b2db      	uxtb	r3, r3
    f9c6:	4023      	ands	r3, r4
    f9c8:	2b00      	cmp	r3, #0
    f9ca:	bf14      	ite	ne
    f9cc:	2301      	movne	r3, #1
    f9ce:	2300      	moveq	r3, #0
    f9d0:	b2db      	uxtb	r3, r3
    f9d2:	2b00      	cmp	r3, #0
    f9d4:	d00d      	beq.n	f9f2 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    f9d6:	687b      	ldr	r3, [r7, #4]
    f9d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    f9dc:	461a      	mov	r2, r3
    f9de:	687b      	ldr	r3, [r7, #4]
    f9e0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
    f9e4:	429a      	cmp	r2, r3
    f9e6:	dd02      	ble.n	f9ee <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    f9e8:	2301      	movs	r3, #1
    f9ea:	73fb      	strb	r3, [r7, #15]
    f9ec:	e001      	b.n	f9f2 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    f9ee:	2300      	movs	r3, #0
    f9f0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    f9f2:	7bfb      	ldrb	r3, [r7, #15]
}
    f9f4:	4618      	mov	r0, r3
    f9f6:	3714      	adds	r7, #20
    f9f8:	46bd      	mov	sp, r7
    f9fa:	bd90      	pop	{r4, r7, pc}
    f9fc:	20003510 	.word	0x20003510
    fa00:	00011339 	.word	0x00011339
    fa04:	00010581 	.word	0x00010581
    fa08:	00010085 	.word	0x00010085

0000fa0c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    fa0c:	b580      	push	{r7, lr}
    fa0e:	b082      	sub	sp, #8
    fa10:	af00      	add	r7, sp, #0
    fa12:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    fa14:	6878      	ldr	r0, [r7, #4]
    fa16:	4b1c      	ldr	r3, [pc, #112]	; (fa88 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
    fa18:	4798      	blx	r3
    fa1a:	4603      	mov	r3, r0
    fa1c:	461a      	mov	r2, r3
    fa1e:	687b      	ldr	r3, [r7, #4]
    fa20:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    fa24:	b2db      	uxtb	r3, r3
    fa26:	f083 0301 	eor.w	r3, r3, #1
    fa2a:	b2db      	uxtb	r3, r3
    fa2c:	4013      	ands	r3, r2
    fa2e:	2b00      	cmp	r3, #0
    fa30:	bf14      	ite	ne
    fa32:	2301      	movne	r3, #1
    fa34:	2300      	moveq	r3, #0
    fa36:	b2db      	uxtb	r3, r3
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d003      	beq.n	fa44 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    fa3c:	6878      	ldr	r0, [r7, #4]
    fa3e:	4b13      	ldr	r3, [pc, #76]	; (fa8c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
    fa40:	4798      	blx	r3
    fa42:	e019      	b.n	fa78 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
    fa44:	687b      	ldr	r3, [r7, #4]
    fa46:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d011      	beq.n	fa72 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
    fa4e:	687b      	ldr	r3, [r7, #4]
    fa50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fa54:	2100      	movs	r1, #0
    fa56:	4618      	mov	r0, r3
    fa58:	4b0d      	ldr	r3, [pc, #52]	; (fa90 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
    fa5a:	4798      	blx	r3
			delay_us(10);
    fa5c:	200a      	movs	r0, #10
    fa5e:	4b0d      	ldr	r3, [pc, #52]	; (fa94 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
    fa60:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
    fa62:	687b      	ldr	r3, [r7, #4]
    fa64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fa68:	2101      	movs	r1, #1
    fa6a:	4618      	mov	r0, r3
    fa6c:	4b08      	ldr	r3, [pc, #32]	; (fa90 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
    fa6e:	4798      	blx	r3
    fa70:	e002      	b.n	fa78 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
    fa72:	6878      	ldr	r0, [r7, #4]
    fa74:	4b08      	ldr	r3, [pc, #32]	; (fa98 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
    fa76:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
    fa78:	687b      	ldr	r3, [r7, #4]
    fa7a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    fa7e:	b2db      	uxtb	r3, r3
}
    fa80:	4618      	mov	r0, r3
    fa82:	3708      	adds	r7, #8
    fa84:	46bd      	mov	sp, r7
    fa86:	bd80      	pop	{r7, pc}
    fa88:	0000f98d 	.word	0x0000f98d
    fa8c:	0000fe5d 	.word	0x0000fe5d
    fa90:	00010db9 	.word	0x00010db9
    fa94:	00002a65 	.word	0x00002a65
    fa98:	0000fa9d 	.word	0x0000fa9d

0000fa9c <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    fa9c:	b580      	push	{r7, lr}
    fa9e:	b082      	sub	sp, #8
    faa0:	af00      	add	r7, sp, #0
    faa2:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    faa4:	6878      	ldr	r0, [r7, #4]
    faa6:	4b29      	ldr	r3, [pc, #164]	; (fb4c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    faa8:	4798      	blx	r3
    faaa:	4603      	mov	r3, r0
    faac:	2b00      	cmp	r3, #0
    faae:	d031      	beq.n	fb14 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    fab0:	687b      	ldr	r3, [r7, #4]
    fab2:	2201      	movs	r2, #1
    fab4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
    fab8:	687b      	ldr	r3, [r7, #4]
    faba:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    fabe:	2b00      	cmp	r3, #0
    fac0:	d003      	beq.n	faca <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    fac2:	6878      	ldr	r0, [r7, #4]
    fac4:	4b22      	ldr	r3, [pc, #136]	; (fb50 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    fac6:	4798      	blx	r3
    fac8:	e038      	b.n	fb3c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    faca:	687b      	ldr	r3, [r7, #4]
    facc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    fad0:	461a      	mov	r2, r3
    fad2:	687b      	ldr	r3, [r7, #4]
    fad4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    fad8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    fadc:	429a      	cmp	r2, r3
    fade:	dd0c      	ble.n	fafa <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    fae0:	687b      	ldr	r3, [r7, #4]
    fae2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    fae6:	43db      	mvns	r3, r3
    fae8:	b2db      	uxtb	r3, r3
    faea:	4619      	mov	r1, r3
    faec:	6878      	ldr	r0, [r7, #4]
    faee:	4b19      	ldr	r3, [pc, #100]	; (fb54 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    faf0:	4798      	blx	r3
					standAloneReturning=true;
    faf2:	687b      	ldr	r3, [r7, #4]
    faf4:	2201      	movs	r2, #1
    faf6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    fafa:	687b      	ldr	r3, [r7, #4]
    fafc:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    fb00:	43db      	mvns	r3, r3
    fb02:	b2da      	uxtb	r2, r3
    fb04:	687b      	ldr	r3, [r7, #4]
    fb06:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
    fb0a:	687b      	ldr	r3, [r7, #4]
    fb0c:	2201      	movs	r2, #1
    fb0e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    fb12:	e013      	b.n	fb3c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    fb14:	687b      	ldr	r3, [r7, #4]
    fb16:	2200      	movs	r2, #0
    fb18:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
    fb1c:	687b      	ldr	r3, [r7, #4]
    fb1e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    fb22:	2b00      	cmp	r3, #0
    fb24:	d007      	beq.n	fb36 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    fb26:	687b      	ldr	r3, [r7, #4]
    fb28:	2200      	movs	r2, #0
    fb2a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
    fb2e:	687b      	ldr	r3, [r7, #4]
    fb30:	2200      	movs	r2, #0
    fb32:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    fb36:	6878      	ldr	r0, [r7, #4]
    fb38:	4b05      	ldr	r3, [pc, #20]	; (fb50 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    fb3a:	4798      	blx	r3
		
	}
	return standAloneMode;
    fb3c:	687b      	ldr	r3, [r7, #4]
    fb3e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
    fb42:	4618      	mov	r0, r3
    fb44:	3708      	adds	r7, #8
    fb46:	46bd      	mov	sp, r7
    fb48:	bd80      	pop	{r7, pc}
    fb4a:	bf00      	nop
    fb4c:	0000fb59 	.word	0x0000fb59
    fb50:	0000f925 	.word	0x0000f925
    fb54:	00010385 	.word	0x00010385

0000fb58 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    fb58:	b480      	push	{r7}
    fb5a:	b085      	sub	sp, #20
    fb5c:	af00      	add	r7, sp, #0
    fb5e:	6078      	str	r0, [r7, #4]
	
	bool result=false;
    fb60:	2300      	movs	r3, #0
    fb62:	73fb      	strb	r3, [r7, #15]
	if (partner->isOK)
    fb64:	687b      	ldr	r3, [r7, #4]
    fb66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    fb6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    fb6e:	b2db      	uxtb	r3, r3
    fb70:	2b00      	cmp	r3, #0
    fb72:	d006      	beq.n	fb82 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2a>
	{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
    fb74:	687b      	ldr	r3, [r7, #4]
    fb76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    fb7a:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
    fb7e:	73fb      	strb	r3, [r7, #15]
    fb80:	e001      	b.n	fb86 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2e>
	} 
	else
	{
		result=true;
    fb82:	2301      	movs	r3, #1
    fb84:	73fb      	strb	r3, [r7, #15]
	}


	return result;
    fb86:	7bfb      	ldrb	r3, [r7, #15]
}
    fb88:	4618      	mov	r0, r3
    fb8a:	3714      	adds	r7, #20
    fb8c:	46bd      	mov	sp, r7
    fb8e:	bc80      	pop	{r7}
    fb90:	4770      	bx	lr

0000fb92 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
    fb92:	b480      	push	{r7}
    fb94:	b083      	sub	sp, #12
    fb96:	af00      	add	r7, sp, #0
    fb98:	6078      	str	r0, [r7, #4]
    fb9a:	6039      	str	r1, [r7, #0]
	partner=part;
    fb9c:	687b      	ldr	r3, [r7, #4]
    fb9e:	683a      	ldr	r2, [r7, #0]
    fba0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
    fba4:	bf00      	nop
    fba6:	370c      	adds	r7, #12
    fba8:	46bd      	mov	sp, r7
    fbaa:	bc80      	pop	{r7}
    fbac:	4770      	bx	lr
	...

0000fbb0 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
    fbb0:	b580      	push	{r7, lr}
    fbb2:	b082      	sub	sp, #8
    fbb4:	af00      	add	r7, sp, #0
    fbb6:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    fbb8:	687b      	ldr	r3, [r7, #4]
    fbba:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    fbbe:	2b05      	cmp	r3, #5
    fbc0:	bfd4      	ite	le
    fbc2:	2301      	movle	r3, #1
    fbc4:	2300      	movgt	r3, #0
    fbc6:	b2da      	uxtb	r2, r3
    fbc8:	687b      	ldr	r3, [r7, #4]
    fbca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    fbce:	2b05      	cmp	r3, #5
    fbd0:	bfd4      	ite	le
    fbd2:	2301      	movle	r3, #1
    fbd4:	2300      	movgt	r3, #0
    fbd6:	b2db      	uxtb	r3, r3
    fbd8:	4013      	ands	r3, r2
    fbda:	b2da      	uxtb	r2, r3
    fbdc:	687b      	ldr	r3, [r7, #4]
    fbde:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    fbe2:	2bfa      	cmp	r3, #250	; 0xfa
    fbe4:	bfcc      	ite	gt
    fbe6:	2301      	movgt	r3, #1
    fbe8:	2300      	movle	r3, #0
    fbea:	b2d9      	uxtb	r1, r3
    fbec:	687b      	ldr	r3, [r7, #4]
    fbee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    fbf2:	2bf5      	cmp	r3, #245	; 0xf5
    fbf4:	bfcc      	ite	gt
    fbf6:	2301      	movgt	r3, #1
    fbf8:	2300      	movle	r3, #0
    fbfa:	b2db      	uxtb	r3, r3
    fbfc:	400b      	ands	r3, r1
    fbfe:	b2db      	uxtb	r3, r3
    fc00:	4313      	orrs	r3, r2
    fc02:	b2db      	uxtb	r3, r3
    fc04:	461a      	mov	r2, r3
    fc06:	687b      	ldr	r3, [r7, #4]
    fc08:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    fc0c:	f083 0301 	eor.w	r3, r3, #1
    fc10:	b2db      	uxtb	r3, r3
    fc12:	4619      	mov	r1, r3
    fc14:	687b      	ldr	r3, [r7, #4]
    fc16:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    fc1a:	b2db      	uxtb	r3, r3
    fc1c:	400b      	ands	r3, r1
    fc1e:	4013      	ands	r3, r2
    fc20:	2b00      	cmp	r3, #0
    fc22:	bf14      	ite	ne
    fc24:	2301      	movne	r3, #1
    fc26:	2300      	moveq	r3, #0
    fc28:	b2db      	uxtb	r3, r3
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d01f      	beq.n	fc6e <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
    fc2e:	687b      	ldr	r3, [r7, #4]
    fc30:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    fc34:	2b00      	cmp	r3, #0
    fc36:	d105      	bne.n	fc44 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    fc38:	22c8      	movs	r2, #200	; 0xc8
    fc3a:	4910      	ldr	r1, [pc, #64]	; (fc7c <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
    fc3c:	4810      	ldr	r0, [pc, #64]	; (fc80 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    fc3e:	4b11      	ldr	r3, [pc, #68]	; (fc84 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    fc40:	4798      	blx	r3
    fc42:	e004      	b.n	fc4e <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    fc44:	22c8      	movs	r2, #200	; 0xc8
    fc46:	4910      	ldr	r1, [pc, #64]	; (fc88 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
    fc48:	480d      	ldr	r0, [pc, #52]	; (fc80 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    fc4a:	4b0e      	ldr	r3, [pc, #56]	; (fc84 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    fc4c:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
    fc4e:	687b      	ldr	r3, [r7, #4]
    fc50:	2200      	movs	r2, #0
    fc52:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
    fc56:	687b      	ldr	r3, [r7, #4]
    fc58:	2200      	movs	r2, #0
    fc5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
    fc5e:	687b      	ldr	r3, [r7, #4]
    fc60:	2201      	movs	r2, #1
    fc62:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
    fc66:	687b      	ldr	r3, [r7, #4]
    fc68:	2201      	movs	r2, #1
    fc6a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
    fc6e:	687b      	ldr	r3, [r7, #4]
    fc70:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
    fc74:	4618      	mov	r0, r3
    fc76:	3708      	adds	r7, #8
    fc78:	46bd      	mov	sp, r7
    fc7a:	bd80      	pop	{r7, pc}
    fc7c:	0000f691 	.word	0x0000f691
    fc80:	20001ee4 	.word	0x20001ee4
    fc84:	0000e061 	.word	0x0000e061
    fc88:	0000f6b1 	.word	0x0000f6b1

0000fc8c <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    fc8c:	b590      	push	{r4, r7, lr}
    fc8e:	b083      	sub	sp, #12
    fc90:	af00      	add	r7, sp, #0
    fc92:	6078      	str	r0, [r7, #4]
	if (isControlling)
    fc94:	687b      	ldr	r3, [r7, #4]
    fc96:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    fc9a:	2b00      	cmp	r3, #0
    fc9c:	f000 80c9 	beq.w	fe32 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    fca0:	687b      	ldr	r3, [r7, #4]
    fca2:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    fca6:	687b      	ldr	r3, [r7, #4]
    fca8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    fcac:	4313      	orrs	r3, r2
    fcae:	b2db      	uxtb	r3, r3
    fcb0:	461a      	mov	r2, r3
    fcb2:	687b      	ldr	r3, [r7, #4]
    fcb4:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    fcb8:	4013      	ands	r3, r2
    fcba:	687a      	ldr	r2, [r7, #4]
    fcbc:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
    fcc0:	b2d2      	uxtb	r2, r2
    fcc2:	4013      	ands	r3, r2
    fcc4:	2b00      	cmp	r3, #0
    fcc6:	bf14      	ite	ne
    fcc8:	2301      	movne	r3, #1
    fcca:	2300      	moveq	r3, #0
    fccc:	b2db      	uxtb	r3, r3
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d003      	beq.n	fcda <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    fcd2:	6878      	ldr	r0, [r7, #4]
    fcd4:	4b59      	ldr	r3, [pc, #356]	; (fe3c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    fcd6:	4798      	blx	r3
    fcd8:	e0ab      	b.n	fe32 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
    fcda:	6878      	ldr	r0, [r7, #4]
    fcdc:	4b58      	ldr	r3, [pc, #352]	; (fe40 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
    fcde:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    fce0:	687b      	ldr	r3, [r7, #4]
    fce2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    fce6:	461a      	mov	r2, r3
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    fcee:	1ad3      	subs	r3, r2, r3
    fcf0:	2b00      	cmp	r3, #0
    fcf2:	bfb8      	it	lt
    fcf4:	425b      	neglt	r3, r3
    fcf6:	687a      	ldr	r2, [r7, #4]
    fcf8:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
    fcfc:	4293      	cmp	r3, r2
    fcfe:	bfcc      	ite	gt
    fd00:	2301      	movgt	r3, #1
    fd02:	2300      	movle	r3, #0
    fd04:	b2db      	uxtb	r3, r3
    fd06:	461a      	mov	r2, r3
    fd08:	687b      	ldr	r3, [r7, #4]
    fd0a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    fd0e:	4313      	orrs	r3, r2
    fd10:	2b00      	cmp	r3, #0
    fd12:	d078      	beq.n	fe06 <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
    fd14:	6878      	ldr	r0, [r7, #4]
    fd16:	4b4b      	ldr	r3, [pc, #300]	; (fe44 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
    fd18:	4798      	blx	r3
    fd1a:	4603      	mov	r3, r0
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d04a      	beq.n	fdb6 <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
    fd20:	687b      	ldr	r3, [r7, #4]
    fd22:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    fd26:	2b00      	cmp	r3, #0
    fd28:	d00e      	beq.n	fd48 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
    fd2a:	687b      	ldr	r3, [r7, #4]
    fd2c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    fd30:	2b00      	cmp	r3, #0
    fd32:	d053      	beq.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
    fd34:	687b      	ldr	r3, [r7, #4]
    fd36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    fd3a:	b2db      	uxtb	r3, r3
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d04d      	beq.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
    fd40:	6878      	ldr	r0, [r7, #4]
    fd42:	4b3e      	ldr	r3, [pc, #248]	; (fe3c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    fd44:	4798      	blx	r3
    fd46:	e049      	b.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    fd48:	687b      	ldr	r3, [r7, #4]
    fd4a:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
    fd4e:	6878      	ldr	r0, [r7, #4]
    fd50:	4b3d      	ldr	r3, [pc, #244]	; (fe48 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    fd52:	4798      	blx	r3
    fd54:	4603      	mov	r3, r0
    fd56:	429c      	cmp	r4, r3
    fd58:	bf14      	ite	ne
    fd5a:	2301      	movne	r3, #1
    fd5c:	2300      	moveq	r3, #0
    fd5e:	b2db      	uxtb	r3, r3
    fd60:	2b00      	cmp	r3, #0
    fd62:	d00a      	beq.n	fd7a <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
    fd64:	6878      	ldr	r0, [r7, #4]
    fd66:	4b39      	ldr	r3, [pc, #228]	; (fe4c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    fd68:	4798      	blx	r3
							RemoveTimeoutTask();
    fd6a:	6878      	ldr	r0, [r7, #4]
    fd6c:	4b38      	ldr	r3, [pc, #224]	; (fe50 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
    fd6e:	4798      	blx	r3
							keepControlling=true;
    fd70:	687b      	ldr	r3, [r7, #4]
    fd72:	2201      	movs	r2, #1
    fd74:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    fd78:	e030      	b.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
    fd7a:	687b      	ldr	r3, [r7, #4]
    fd7c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    fd80:	b2db      	uxtb	r3, r3
    fd82:	2b00      	cmp	r3, #0
    fd84:	d003      	beq.n	fd8e <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
    fd86:	6878      	ldr	r0, [r7, #4]
    fd88:	4b30      	ldr	r3, [pc, #192]	; (fe4c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    fd8a:	4798      	blx	r3
    fd8c:	e026      	b.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
    fd8e:	687b      	ldr	r3, [r7, #4]
    fd90:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    fd94:	2b00      	cmp	r3, #0
    fd96:	d021      	beq.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
    fd98:	687b      	ldr	r3, [r7, #4]
    fd9a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    fd9e:	b2db      	uxtb	r3, r3
    fda0:	2b00      	cmp	r3, #0
    fda2:	d003      	beq.n	fdac <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
    fda4:	6878      	ldr	r0, [r7, #4]
    fda6:	4b29      	ldr	r3, [pc, #164]	; (fe4c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    fda8:	4798      	blx	r3
    fdaa:	e017      	b.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
    fdac:	2100      	movs	r1, #0
    fdae:	6878      	ldr	r0, [r7, #4]
    fdb0:	4b28      	ldr	r3, [pc, #160]	; (fe54 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    fdb2:	4798      	blx	r3
    fdb4:	e012      	b.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
    fdb6:	687b      	ldr	r3, [r7, #4]
    fdb8:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d00d      	beq.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
    fdc0:	687b      	ldr	r3, [r7, #4]
    fdc2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    fdc6:	b2db      	uxtb	r3, r3
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d003      	beq.n	fdd4 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
    fdcc:	6878      	ldr	r0, [r7, #4]
    fdce:	4b22      	ldr	r3, [pc, #136]	; (fe58 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    fdd0:	4798      	blx	r3
    fdd2:	e003      	b.n	fddc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
    fdd4:	2100      	movs	r1, #0
    fdd6:	6878      	ldr	r0, [r7, #4]
    fdd8:	4b1e      	ldr	r3, [pc, #120]	; (fe54 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    fdda:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    fddc:	687b      	ldr	r3, [r7, #4]
    fdde:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    fde2:	461a      	mov	r2, r3
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    fdea:	1ad3      	subs	r3, r2, r3
    fdec:	2b00      	cmp	r3, #0
    fdee:	bfb8      	it	lt
    fdf0:	425b      	neglt	r3, r3
    fdf2:	687a      	ldr	r2, [r7, #4]
    fdf4:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
    fdf8:	4293      	cmp	r3, r2
    fdfa:	dd1a      	ble.n	fe32 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
    fdfc:	687b      	ldr	r3, [r7, #4]
    fdfe:	2200      	movs	r2, #0
    fe00:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
    fe04:	e015      	b.n	fe32 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
    fe06:	687b      	ldr	r3, [r7, #4]
    fe08:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	d009      	beq.n	fe24 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
    fe10:	687b      	ldr	r3, [r7, #4]
    fe12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    fe16:	b2db      	uxtb	r3, r3
    fe18:	2b00      	cmp	r3, #0
    fe1a:	d00a      	beq.n	fe32 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
    fe1c:	6878      	ldr	r0, [r7, #4]
    fe1e:	4b07      	ldr	r3, [pc, #28]	; (fe3c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    fe20:	4798      	blx	r3
    fe22:	e006      	b.n	fe32 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    fe24:	6878      	ldr	r0, [r7, #4]
    fe26:	4b0c      	ldr	r3, [pc, #48]	; (fe58 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    fe28:	4798      	blx	r3
					gotSetpoint=true;
    fe2a:	687b      	ldr	r3, [r7, #4]
    fe2c:	2201      	movs	r2, #1
    fe2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
    fe32:	2300      	movs	r3, #0
	
}
    fe34:	4618      	mov	r0, r3
    fe36:	370c      	adds	r7, #12
    fe38:	46bd      	mov	sp, r7
    fe3a:	bd90      	pop	{r4, r7, pc}
    fe3c:	000101a1 	.word	0x000101a1
    fe40:	0000fbb1 	.word	0x0000fbb1
    fe44:	000100f9 	.word	0x000100f9
    fe48:	0000f891 	.word	0x0000f891
    fe4c:	000100cd 	.word	0x000100cd
    fe50:	00010899 	.word	0x00010899
    fe54:	00010549 	.word	0x00010549
    fe58:	00010239 	.word	0x00010239

0000fe5c <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    fe5c:	b580      	push	{r7, lr}
    fe5e:	b084      	sub	sp, #16
    fe60:	af00      	add	r7, sp, #0
    fe62:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    fe64:	2052      	movs	r0, #82	; 0x52
    fe66:	4b60      	ldr	r3, [pc, #384]	; (ffe8 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    fe68:	4798      	blx	r3
    fe6a:	4603      	mov	r3, r0
    fe6c:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    fe6e:	6878      	ldr	r0, [r7, #4]
    fe70:	4b5e      	ldr	r3, [pc, #376]	; (ffec <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    fe72:	4798      	blx	r3
    fe74:	4603      	mov	r3, r0
    fe76:	2b00      	cmp	r3, #0
    fe78:	f000 80b2 	beq.w	ffe0 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
    fe7c:	687b      	ldr	r3, [r7, #4]
    fe7e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
    fe82:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
    fe84:	687b      	ldr	r3, [r7, #4]
    fe86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fe8a:	2100      	movs	r1, #0
    fe8c:	4618      	mov	r0, r3
    fe8e:	4b58      	ldr	r3, [pc, #352]	; (fff0 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    fe90:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
    fe92:	687b      	ldr	r3, [r7, #4]
    fe94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fe98:	2100      	movs	r1, #0
    fe9a:	4618      	mov	r0, r3
    fe9c:	4b55      	ldr	r3, [pc, #340]	; (fff4 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    fe9e:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
    fea0:	687b      	ldr	r3, [r7, #4]
    fea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fea6:	2100      	movs	r1, #0
    fea8:	4618      	mov	r0, r3
    feaa:	4b53      	ldr	r3, [pc, #332]	; (fff8 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    feac:	4798      	blx	r3
		delay_ms(100);
    feae:	2064      	movs	r0, #100	; 0x64
    feb0:	4b52      	ldr	r3, [pc, #328]	; (fffc <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    feb2:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
    feb4:	687b      	ldr	r3, [r7, #4]
    feb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    feba:	4618      	mov	r0, r3
    febc:	4b50      	ldr	r3, [pc, #320]	; (10000 <STACK_SIZE>)
    febe:	4798      	blx	r3
    fec0:	4603      	mov	r3, r0
    fec2:	461a      	mov	r2, r3
    fec4:	7bbb      	ldrb	r3, [r7, #14]
    fec6:	429a      	cmp	r2, r3
    fec8:	bfcc      	ite	gt
    feca:	2301      	movgt	r3, #1
    fecc:	2300      	movle	r3, #0
    fece:	b2db      	uxtb	r3, r3
    fed0:	2b00      	cmp	r3, #0
    fed2:	d007      	beq.n	fee4 <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
    fed4:	687b      	ldr	r3, [r7, #4]
    fed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    feda:	2101      	movs	r1, #1
    fedc:	4618      	mov	r0, r3
    fede:	4b49      	ldr	r3, [pc, #292]	; (10004 <STACK_SIZE+0x4>)
    fee0:	4798      	blx	r3
    fee2:	e006      	b.n	fef2 <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
    fee4:	687b      	ldr	r3, [r7, #4]
    fee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    feea:	2100      	movs	r1, #0
    feec:	4618      	mov	r0, r3
    feee:	4b45      	ldr	r3, [pc, #276]	; (10004 <STACK_SIZE+0x4>)
    fef0:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
    fef2:	687b      	ldr	r3, [r7, #4]
    fef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fef8:	2101      	movs	r1, #1
    fefa:	4618      	mov	r0, r3
    fefc:	4b3d      	ldr	r3, [pc, #244]	; (fff4 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    fefe:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
    ff00:	687b      	ldr	r3, [r7, #4]
    ff02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ff06:	2101      	movs	r1, #1
    ff08:	4618      	mov	r0, r3
    ff0a:	4b3b      	ldr	r3, [pc, #236]	; (fff8 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    ff0c:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
    ff0e:	687b      	ldr	r3, [r7, #4]
    ff10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ff14:	7bba      	ldrb	r2, [r7, #14]
    ff16:	4611      	mov	r1, r2
    ff18:	4618      	mov	r0, r3
    ff1a:	4b3b      	ldr	r3, [pc, #236]	; (10008 <STACK_SIZE+0x8>)
    ff1c:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
    ff1e:	687b      	ldr	r3, [r7, #4]
    ff20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ff24:	4618      	mov	r0, r3
    ff26:	4b36      	ldr	r3, [pc, #216]	; (10000 <STACK_SIZE>)
    ff28:	4798      	blx	r3
    ff2a:	4603      	mov	r3, r0
    ff2c:	461a      	mov	r2, r3
    ff2e:	687b      	ldr	r3, [r7, #4]
    ff30:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
    ff34:	687b      	ldr	r3, [r7, #4]
    ff36:	2200      	movs	r2, #0
    ff38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
    ff3c:	687b      	ldr	r3, [r7, #4]
    ff3e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    ff42:	2b00      	cmp	r3, #0
    ff44:	d106      	bne.n	ff54 <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
    ff46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff4a:	4930      	ldr	r1, [pc, #192]	; (1000c <STACK_SIZE+0xc>)
    ff4c:	4830      	ldr	r0, [pc, #192]	; (10010 <STACK_SIZE+0x10>)
    ff4e:	4b31      	ldr	r3, [pc, #196]	; (10014 <STACK_SIZE+0x14>)
    ff50:	4798      	blx	r3
    ff52:	e005      	b.n	ff60 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
    ff54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff58:	492f      	ldr	r1, [pc, #188]	; (10018 <STACK_SIZE+0x18>)
    ff5a:	482d      	ldr	r0, [pc, #180]	; (10010 <STACK_SIZE+0x10>)
    ff5c:	4b2d      	ldr	r3, [pc, #180]	; (10014 <STACK_SIZE+0x14>)
    ff5e:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
    ff60:	687b      	ldr	r3, [r7, #4]
    ff62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ff66:	2101      	movs	r1, #1
    ff68:	4618      	mov	r0, r3
    ff6a:	4b21      	ldr	r3, [pc, #132]	; (fff0 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    ff6c:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    ff6e:	687b      	ldr	r3, [r7, #4]
    ff70:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    ff74:	461a      	mov	r2, r3
    ff76:	7bbb      	ldrb	r3, [r7, #14]
    ff78:	1ad3      	subs	r3, r2, r3
    ff7a:	2b00      	cmp	r3, #0
    ff7c:	bfb8      	it	lt
    ff7e:	425b      	neglt	r3, r3
    ff80:	2b06      	cmp	r3, #6
    ff82:	bfcc      	ite	gt
    ff84:	2301      	movgt	r3, #1
    ff86:	2300      	movle	r3, #0
    ff88:	b2db      	uxtb	r3, r3
    ff8a:	461a      	mov	r2, r3
    ff8c:	687b      	ldr	r3, [r7, #4]
    ff8e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    ff92:	b2db      	uxtb	r3, r3
    ff94:	f083 0301 	eor.w	r3, r3, #1
    ff98:	b2db      	uxtb	r3, r3
    ff9a:	4013      	ands	r3, r2
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	bf14      	ite	ne
    ffa0:	2301      	movne	r3, #1
    ffa2:	2300      	moveq	r3, #0
    ffa4:	b2db      	uxtb	r3, r3
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d00e      	beq.n	ffc8 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
    ffaa:	2052      	movs	r0, #82	; 0x52
    ffac:	4b1b      	ldr	r3, [pc, #108]	; (1001c <STACK_SIZE+0x1c>)
    ffae:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
    ffb0:	687b      	ldr	r3, [r7, #4]
    ffb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ffb6:	4618      	mov	r0, r3
    ffb8:	4b11      	ldr	r3, [pc, #68]	; (10000 <STACK_SIZE>)
    ffba:	4798      	blx	r3
    ffbc:	4603      	mov	r3, r0
    ffbe:	461a      	mov	r2, r3
    ffc0:	687b      	ldr	r3, [r7, #4]
    ffc2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    ffc6:	e7d2      	b.n	ff6e <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
    ffc8:	687b      	ldr	r3, [r7, #4]
    ffca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ffce:	2100      	movs	r1, #0
    ffd0:	4618      	mov	r0, r3
    ffd2:	4b07      	ldr	r3, [pc, #28]	; (fff0 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    ffd4:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    ffd6:	7bfb      	ldrb	r3, [r7, #15]
    ffd8:	4619      	mov	r1, r3
    ffda:	2052      	movs	r0, #82	; 0x52
    ffdc:	4b10      	ldr	r3, [pc, #64]	; (10020 <STACK_SIZE+0x20>)
    ffde:	4798      	blx	r3
	} 
	else
	{
	}
}
    ffe0:	bf00      	nop
    ffe2:	3710      	adds	r7, #16
    ffe4:	46bd      	mov	sp, r7
    ffe6:	bd80      	pop	{r7, pc}
    ffe8:	0000f5fd 	.word	0x0000f5fd
    ffec:	0000f98d 	.word	0x0000f98d
    fff0:	00010cc1 	.word	0x00010cc1
    fff4:	00010e31 	.word	0x00010e31
    fff8:	00010db9 	.word	0x00010db9
    fffc:	00002a99 	.word	0x00002a99
   10000:	00010ee1 	.word	0x00010ee1
   10004:	00010d41 	.word	0x00010d41
   10008:	00010ea9 	.word	0x00010ea9
   1000c:	0000f6d1 	.word	0x0000f6d1
   10010:	20001ee4 	.word	0x20001ee4
   10014:	0000e061 	.word	0x0000e061
   10018:	0000f6f1 	.word	0x0000f6f1
   1001c:	0000f5cd 	.word	0x0000f5cd
   10020:	0000f595 	.word	0x0000f595

00010024 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   10024:	b580      	push	{r7, lr}
   10026:	b082      	sub	sp, #8
   10028:	af00      	add	r7, sp, #0
   1002a:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   1002c:	687b      	ldr	r3, [r7, #4]
   1002e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   10032:	2b00      	cmp	r3, #0
   10034:	d014      	beq.n	10060 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   10036:	687b      	ldr	r3, [r7, #4]
   10038:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1003c:	2b00      	cmp	r3, #0
   1003e:	d003      	beq.n	10048 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   10040:	6878      	ldr	r0, [r7, #4]
   10042:	4b0e      	ldr	r3, [pc, #56]	; (1007c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   10044:	4798      	blx	r3
   10046:	e013      	b.n	10070 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   10048:	687b      	ldr	r3, [r7, #4]
   1004a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   1004e:	4619      	mov	r1, r3
   10050:	6878      	ldr	r0, [r7, #4]
   10052:	4b0b      	ldr	r3, [pc, #44]	; (10080 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   10054:	4798      	blx	r3
			NBC_Activated=false;
   10056:	687b      	ldr	r3, [r7, #4]
   10058:	2200      	movs	r2, #0
   1005a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   1005e:	e007      	b.n	10070 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   10060:	21ff      	movs	r1, #255	; 0xff
   10062:	6878      	ldr	r0, [r7, #4]
   10064:	4b06      	ldr	r3, [pc, #24]	; (10080 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   10066:	4798      	blx	r3
			NBC_Activated=true;
   10068:	687b      	ldr	r3, [r7, #4]
   1006a:	2201      	movs	r2, #1
   1006c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
   10070:	2300      	movs	r3, #0
	
}
   10072:	4618      	mov	r0, r3
   10074:	3708      	adds	r7, #8
   10076:	46bd      	mov	sp, r7
   10078:	bd80      	pop	{r7, pc}
   1007a:	bf00      	nop
   1007c:	0000fc8d 	.word	0x0000fc8d
   10080:	00010385 	.word	0x00010385

00010084 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   10084:	b480      	push	{r7}
   10086:	b083      	sub	sp, #12
   10088:	af00      	add	r7, sp, #0
   1008a:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   1008c:	687b      	ldr	r3, [r7, #4]
   1008e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   10092:	461a      	mov	r2, r3
   10094:	687b      	ldr	r3, [r7, #4]
   10096:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
   1009a:	4013      	ands	r3, r2
   1009c:	687a      	ldr	r2, [r7, #4]
   1009e:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   100a2:	4313      	orrs	r3, r2
   100a4:	2b00      	cmp	r3, #0
   100a6:	bf14      	ite	ne
   100a8:	2301      	movne	r3, #1
   100aa:	2300      	moveq	r3, #0
   100ac:	b2da      	uxtb	r2, r3
   100ae:	687b      	ldr	r3, [r7, #4]
   100b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
   100b4:	687b      	ldr	r3, [r7, #4]
   100b6:	22ff      	movs	r2, #255	; 0xff
   100b8:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
   100bc:	687b      	ldr	r3, [r7, #4]
   100be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
   100c2:	4618      	mov	r0, r3
   100c4:	370c      	adds	r7, #12
   100c6:	46bd      	mov	sp, r7
   100c8:	bc80      	pop	{r7}
   100ca:	4770      	bx	lr

000100cc <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
   100cc:	b580      	push	{r7, lr}
   100ce:	b082      	sub	sp, #8
   100d0:	af00      	add	r7, sp, #0
   100d2:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
   100d4:	687b      	ldr	r3, [r7, #4]
   100d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   100da:	2100      	movs	r1, #0
   100dc:	4618      	mov	r0, r3
   100de:	4b05      	ldr	r3, [pc, #20]	; (100f4 <_ZN22FlapperValveController9StopMotorEv+0x28>)
   100e0:	4798      	blx	r3
	flapperValveIsMoving=false;
   100e2:	687b      	ldr	r3, [r7, #4]
   100e4:	2200      	movs	r2, #0
   100e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
   100ea:	2300      	movs	r3, #0
}
   100ec:	4618      	mov	r0, r3
   100ee:	3708      	adds	r7, #8
   100f0:	46bd      	mov	sp, r7
   100f2:	bd80      	pop	{r7, pc}
   100f4:	00010cc1 	.word	0x00010cc1

000100f8 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
   100f8:	b480      	push	{r7}
   100fa:	b085      	sub	sp, #20
   100fc:	af00      	add	r7, sp, #0
   100fe:	6078      	str	r0, [r7, #4]
	bool_result=true;
   10100:	687b      	ldr	r3, [r7, #4]
   10102:	2201      	movs	r2, #1
   10104:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
   10108:	687b      	ldr	r3, [r7, #4]
   1010a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1010e:	b2db      	uxtb	r3, r3
   10110:	2b00      	cmp	r3, #0
   10112:	d03c      	beq.n	1018e <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10114:	2300      	movs	r3, #0
   10116:	73fb      	strb	r3, [r7, #15]
   10118:	7bfb      	ldrb	r3, [r7, #15]
   1011a:	2b0e      	cmp	r3, #14
   1011c:	dc26      	bgt.n	1016c <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   1011e:	687b      	ldr	r3, [r7, #4]
   10120:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10124:	687a      	ldr	r2, [r7, #4]
   10126:	3332      	adds	r3, #50	; 0x32
   10128:	009b      	lsls	r3, r3, #2
   1012a:	4413      	add	r3, r2
   1012c:	685a      	ldr	r2, [r3, #4]
   1012e:	7bfb      	ldrb	r3, [r7, #15]
   10130:	4413      	add	r3, r2
   10132:	781a      	ldrb	r2, [r3, #0]
   10134:	687b      	ldr	r3, [r7, #4]
   10136:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   1013a:	6879      	ldr	r1, [r7, #4]
   1013c:	3332      	adds	r3, #50	; 0x32
   1013e:	009b      	lsls	r3, r3, #2
   10140:	440b      	add	r3, r1
   10142:	6859      	ldr	r1, [r3, #4]
   10144:	7bfb      	ldrb	r3, [r7, #15]
   10146:	3301      	adds	r3, #1
   10148:	440b      	add	r3, r1
   1014a:	781b      	ldrb	r3, [r3, #0]
   1014c:	429a      	cmp	r2, r3
   1014e:	d104      	bne.n	1015a <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
   10150:	687b      	ldr	r3, [r7, #4]
   10152:	2200      	movs	r2, #0
   10154:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   10158:	e004      	b.n	10164 <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
   1015a:	687b      	ldr	r3, [r7, #4]
   1015c:	2201      	movs	r2, #1
   1015e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
   10162:	e003      	b.n	1016c <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10164:	7bfb      	ldrb	r3, [r7, #15]
   10166:	3301      	adds	r3, #1
   10168:	73fb      	strb	r3, [r7, #15]
   1016a:	e7d5      	b.n	10118 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   1016c:	687b      	ldr	r3, [r7, #4]
   1016e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   10172:	b2db      	uxtb	r3, r3
   10174:	461a      	mov	r2, r3
   10176:	687b      	ldr	r3, [r7, #4]
   10178:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   1017c:	4013      	ands	r3, r2
   1017e:	2b00      	cmp	r3, #0
   10180:	bf14      	ite	ne
   10182:	2301      	movne	r3, #1
   10184:	2300      	moveq	r3, #0
   10186:	b2da      	uxtb	r2, r3
   10188:	687b      	ldr	r3, [r7, #4]
   1018a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
   1018e:	687b      	ldr	r3, [r7, #4]
   10190:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   10194:	b2db      	uxtb	r3, r3
	
}
   10196:	4618      	mov	r0, r3
   10198:	3714      	adds	r7, #20
   1019a:	46bd      	mov	sp, r7
   1019c:	bc80      	pop	{r7}
   1019e:	4770      	bx	lr

000101a0 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   101a0:	b580      	push	{r7, lr}
   101a2:	b082      	sub	sp, #8
   101a4:	af00      	add	r7, sp, #0
   101a6:	6078      	str	r0, [r7, #4]
		if (closing)
   101a8:	687b      	ldr	r3, [r7, #4]
   101aa:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   101ae:	2b00      	cmp	r3, #0
   101b0:	d003      	beq.n	101ba <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   101b2:	687b      	ldr	r3, [r7, #4]
   101b4:	2200      	movs	r2, #0
   101b6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
   101ba:	6878      	ldr	r0, [r7, #4]
   101bc:	4b17      	ldr	r3, [pc, #92]	; (1021c <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   101be:	4798      	blx	r3
		if (valve_ID==0)
   101c0:	687b      	ldr	r3, [r7, #4]
   101c2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   101c6:	2b00      	cmp	r3, #0
   101c8:	d108      	bne.n	101dc <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   101ca:	4915      	ldr	r1, [pc, #84]	; (10220 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   101cc:	4815      	ldr	r0, [pc, #84]	; (10224 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   101ce:	4b16      	ldr	r3, [pc, #88]	; (10228 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   101d0:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   101d2:	4916      	ldr	r1, [pc, #88]	; (1022c <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   101d4:	4813      	ldr	r0, [pc, #76]	; (10224 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   101d6:	4b14      	ldr	r3, [pc, #80]	; (10228 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   101d8:	4798      	blx	r3
   101da:	e007      	b.n	101ec <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   101dc:	4914      	ldr	r1, [pc, #80]	; (10230 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   101de:	4811      	ldr	r0, [pc, #68]	; (10224 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   101e0:	4b11      	ldr	r3, [pc, #68]	; (10228 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   101e2:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   101e4:	4913      	ldr	r1, [pc, #76]	; (10234 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   101e6:	480f      	ldr	r0, [pc, #60]	; (10224 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   101e8:	4b0f      	ldr	r3, [pc, #60]	; (10228 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   101ea:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   101ec:	687b      	ldr	r3, [r7, #4]
   101ee:	2200      	movs	r2, #0
   101f0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   101f4:	687b      	ldr	r3, [r7, #4]
   101f6:	2200      	movs	r2, #0
   101f8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
   101fc:	687b      	ldr	r3, [r7, #4]
   101fe:	2200      	movs	r2, #0
   10200:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
   10204:	687b      	ldr	r3, [r7, #4]
   10206:	2200      	movs	r2, #0
   10208:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
   1020c:	687b      	ldr	r3, [r7, #4]
   1020e:	2200      	movs	r2, #0
   10210:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   10214:	bf00      	nop
   10216:	3708      	adds	r7, #8
   10218:	46bd      	mov	sp, r7
   1021a:	bd80      	pop	{r7, pc}
   1021c:	000100cd 	.word	0x000100cd
   10220:	0000f639 	.word	0x0000f639
   10224:	20001ee4 	.word	0x20001ee4
   10228:	0000e009 	.word	0x0000e009
   1022c:	0000f691 	.word	0x0000f691
   10230:	0000f665 	.word	0x0000f665
   10234:	0000f6b1 	.word	0x0000f6b1

00010238 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   10238:	b580      	push	{r7, lr}
   1023a:	b082      	sub	sp, #8
   1023c:	af00      	add	r7, sp, #0
   1023e:	6078      	str	r0, [r7, #4]
		StopMotor();
   10240:	6878      	ldr	r0, [r7, #4]
   10242:	4b0c      	ldr	r3, [pc, #48]	; (10274 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
   10244:	4798      	blx	r3
		RemoveTimeoutTask();
   10246:	6878      	ldr	r0, [r7, #4]
   10248:	4b0b      	ldr	r3, [pc, #44]	; (10278 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   1024a:	4798      	blx	r3
		timeoutFlapperValveController=false;
   1024c:	687b      	ldr	r3, [r7, #4]
   1024e:	2200      	movs	r2, #0
   10250:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	2200      	movs	r2, #0
   10258:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
   1025c:	687b      	ldr	r3, [r7, #4]
   1025e:	2200      	movs	r2, #0
   10260:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
   10264:	687b      	ldr	r3, [r7, #4]
   10266:	2201      	movs	r2, #1
   10268:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   1026c:	bf00      	nop
   1026e:	3708      	adds	r7, #8
   10270:	46bd      	mov	sp, r7
   10272:	bd80      	pop	{r7, pc}
   10274:	000100cd 	.word	0x000100cd
   10278:	00010899 	.word	0x00010899

0001027c <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   1027c:	b580      	push	{r7, lr}
   1027e:	b084      	sub	sp, #16
   10280:	af00      	add	r7, sp, #0
   10282:	6078      	str	r0, [r7, #4]
   10284:	460b      	mov	r3, r1
   10286:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   10288:	78fb      	ldrb	r3, [r7, #3]
   1028a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   1028e:	2b00      	cmp	r3, #0
   10290:	dd0c      	ble.n	102ac <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   10292:	78fb      	ldrb	r3, [r7, #3]
   10294:	43db      	mvns	r3, r3
   10296:	009b      	lsls	r3, r3, #2
   10298:	2b00      	cmp	r3, #0
   1029a:	da00      	bge.n	1029e <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   1029c:	33ff      	adds	r3, #255	; 0xff
   1029e:	121b      	asrs	r3, r3, #8
   102a0:	461a      	mov	r2, r3
   102a2:	4b10      	ldr	r3, [pc, #64]	; (102e4 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   102a4:	4610      	mov	r0, r2
   102a6:	4798      	blx	r3
   102a8:	4603      	mov	r3, r0
   102aa:	e00b      	b.n	102c4 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   102ac:	78fb      	ldrb	r3, [r7, #3]
   102ae:	3bff      	subs	r3, #255	; 0xff
   102b0:	009b      	lsls	r3, r3, #2
   102b2:	2b00      	cmp	r3, #0
   102b4:	da00      	bge.n	102b8 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   102b6:	33ff      	adds	r3, #255	; 0xff
   102b8:	121b      	asrs	r3, r3, #8
   102ba:	461a      	mov	r2, r3
   102bc:	4b09      	ldr	r3, [pc, #36]	; (102e4 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   102be:	4610      	mov	r0, r2
   102c0:	4798      	blx	r3
   102c2:	4603      	mov	r3, r0
   102c4:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   102c6:	4b08      	ldr	r3, [pc, #32]	; (102e8 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
   102c8:	68f8      	ldr	r0, [r7, #12]
   102ca:	4798      	blx	r3
   102cc:	4603      	mov	r3, r0
   102ce:	b2da      	uxtb	r2, r3
   102d0:	687b      	ldr	r3, [r7, #4]
   102d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return tolerance;
   102d6:	687b      	ldr	r3, [r7, #4]
   102d8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
   102dc:	4618      	mov	r0, r3
   102de:	3710      	adds	r7, #16
   102e0:	46bd      	mov	sp, r7
   102e2:	bd80      	pop	{r7, pc}
   102e4:	00013745 	.word	0x00013745
   102e8:	00013a8d 	.word	0x00013a8d

000102ec <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   102ec:	b580      	push	{r7, lr}
   102ee:	b082      	sub	sp, #8
   102f0:	af00      	add	r7, sp, #0
   102f2:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   102f4:	687b      	ldr	r3, [r7, #4]
   102f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   102fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   102fe:	2b00      	cmp	r3, #0
   10300:	d009      	beq.n	10316 <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
   10302:	687b      	ldr	r3, [r7, #4]
   10304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10308:	2100      	movs	r1, #0
   1030a:	4618      	mov	r0, r3
   1030c:	4b0a      	ldr	r3, [pc, #40]	; (10338 <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   1030e:	4798      	blx	r3
		delay_ms(10);
   10310:	200a      	movs	r0, #10
   10312:	4b0a      	ldr	r3, [pc, #40]	; (1033c <_ZN22FlapperValveController10StartMotorEv+0x50>)
   10314:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   10316:	687b      	ldr	r3, [r7, #4]
   10318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1031c:	2101      	movs	r1, #1
   1031e:	4618      	mov	r0, r3
   10320:	4b05      	ldr	r3, [pc, #20]	; (10338 <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   10322:	4798      	blx	r3
	flapperValveIsMoving=true;
   10324:	687b      	ldr	r3, [r7, #4]
   10326:	2201      	movs	r2, #1
   10328:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
   1032c:	2300      	movs	r3, #0
}
   1032e:	4618      	mov	r0, r3
   10330:	3708      	adds	r7, #8
   10332:	46bd      	mov	sp, r7
   10334:	bd80      	pop	{r7, pc}
   10336:	bf00      	nop
   10338:	00010cc1 	.word	0x00010cc1
   1033c:	00002a99 	.word	0x00002a99

00010340 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   10340:	b580      	push	{r7, lr}
   10342:	b082      	sub	sp, #8
   10344:	af00      	add	r7, sp, #0
   10346:	6078      	str	r0, [r7, #4]
	StopMotor();
   10348:	6878      	ldr	r0, [r7, #4]
   1034a:	4b0d      	ldr	r3, [pc, #52]	; (10380 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   1034c:	4798      	blx	r3
	timeoutKeepControlling=false;
   1034e:	687b      	ldr	r3, [r7, #4]
   10350:	2200      	movs	r2, #0
   10352:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	timeoutFlapperValveController=false;
   10356:	687b      	ldr	r3, [r7, #4]
   10358:	2200      	movs	r2, #0
   1035a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	isControlling=false;
   1035e:	687b      	ldr	r3, [r7, #4]
   10360:	2200      	movs	r2, #0
   10362:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	keepControlling=false;
   10366:	687b      	ldr	r3, [r7, #4]
   10368:	2200      	movs	r2, #0
   1036a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	controllerEnabled=false;
   1036e:	687b      	ldr	r3, [r7, #4]
   10370:	2200      	movs	r2, #0
   10372:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	return 0;
   10376:	2300      	movs	r3, #0
}
   10378:	4618      	mov	r0, r3
   1037a:	3708      	adds	r7, #8
   1037c:	46bd      	mov	sp, r7
   1037e:	bd80      	pop	{r7, pc}
   10380:	000100cd 	.word	0x000100cd

00010384 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   10384:	b580      	push	{r7, lr}
   10386:	b082      	sub	sp, #8
   10388:	af00      	add	r7, sp, #0
   1038a:	6078      	str	r0, [r7, #4]
   1038c:	460b      	mov	r3, r1
   1038e:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   10390:	78fb      	ldrb	r3, [r7, #3]
   10392:	4619      	mov	r1, r3
   10394:	6878      	ldr	r0, [r7, #4]
   10396:	4b2b      	ldr	r3, [pc, #172]	; (10444 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   10398:	4798      	blx	r3
   1039a:	4603      	mov	r3, r0
   1039c:	461a      	mov	r2, r3
   1039e:	687b      	ldr	r3, [r7, #4]
   103a0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
   103a4:	687b      	ldr	r3, [r7, #4]
   103a6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   103aa:	4619      	mov	r1, r3
   103ac:	6878      	ldr	r0, [r7, #4]
   103ae:	4b26      	ldr	r3, [pc, #152]	; (10448 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   103b0:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   103b2:	687b      	ldr	r3, [r7, #4]
   103b4:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   103b8:	4b24      	ldr	r3, [pc, #144]	; (1044c <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   103ba:	4610      	mov	r0, r2
   103bc:	4798      	blx	r3
   103be:	4602      	mov	r2, r0
   103c0:	687b      	ldr	r3, [r7, #4]
   103c2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
   103c6:	687b      	ldr	r3, [r7, #4]
   103c8:	2200      	movs	r2, #0
   103ca:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   103ce:	687b      	ldr	r3, [r7, #4]
   103d0:	2200      	movs	r2, #0
   103d2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
   103d6:	687b      	ldr	r3, [r7, #4]
   103d8:	2200      	movs	r2, #0
   103da:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
   103de:	687b      	ldr	r3, [r7, #4]
   103e0:	2201      	movs	r2, #1
   103e2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
   103e6:	687b      	ldr	r3, [r7, #4]
   103e8:	2200      	movs	r2, #0
   103ea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
   103ee:	687b      	ldr	r3, [r7, #4]
   103f0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   103f4:	2b00      	cmp	r3, #0
   103f6:	d106      	bne.n	10406 <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   103f8:	f242 7210 	movw	r2, #10000	; 0x2710
   103fc:	4914      	ldr	r1, [pc, #80]	; (10450 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   103fe:	4815      	ldr	r0, [pc, #84]	; (10454 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   10400:	4b15      	ldr	r3, [pc, #84]	; (10458 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   10402:	4798      	blx	r3
   10404:	e005      	b.n	10412 <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   10406:	f242 7210 	movw	r2, #10000	; 0x2710
   1040a:	4914      	ldr	r1, [pc, #80]	; (1045c <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   1040c:	4811      	ldr	r0, [pc, #68]	; (10454 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   1040e:	4b12      	ldr	r3, [pc, #72]	; (10458 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   10410:	4798      	blx	r3
		}
		
		isControlling=true;
   10412:	687b      	ldr	r3, [r7, #4]
   10414:	2201      	movs	r2, #1
   10416:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   1041a:	6878      	ldr	r0, [r7, #4]
   1041c:	4b10      	ldr	r3, [pc, #64]	; (10460 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   1041e:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   10420:	6878      	ldr	r0, [r7, #4]
   10422:	4b10      	ldr	r3, [pc, #64]	; (10464 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   10424:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   10426:	687b      	ldr	r3, [r7, #4]
   10428:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   1042c:	b2db      	uxtb	r3, r3
   1042e:	2b00      	cmp	r3, #0
   10430:	d003      	beq.n	1043a <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
   10432:	687b      	ldr	r3, [r7, #4]
   10434:	2201      	movs	r2, #1
   10436:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
   1043a:	2300      	movs	r3, #0
	
}
   1043c:	4618      	mov	r0, r3
   1043e:	3708      	adds	r7, #8
   10440:	46bd      	mov	sp, r7
   10442:	bd80      	pop	{r7, pc}
   10444:	00010469 	.word	0x00010469
   10448:	0001027d 	.word	0x0001027d
   1044c:	0001373d 	.word	0x0001373d
   10450:	0000f639 	.word	0x0000f639
   10454:	20001ee4 	.word	0x20001ee4
   10458:	0000e061 	.word	0x0000e061
   1045c:	0000f665 	.word	0x0000f665
   10460:	0000f8b5 	.word	0x0000f8b5
   10464:	0000fc8d 	.word	0x0000fc8d

00010468 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   10468:	b580      	push	{r7, lr}
   1046a:	b082      	sub	sp, #8
   1046c:	af00      	add	r7, sp, #0
   1046e:	6078      	str	r0, [r7, #4]
   10470:	460b      	mov	r3, r1
   10472:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   10474:	6878      	ldr	r0, [r7, #4]
   10476:	4b2a      	ldr	r3, [pc, #168]	; (10520 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   10478:	4798      	blx	r3
   1047a:	4603      	mov	r3, r0
   1047c:	2b00      	cmp	r3, #0
   1047e:	d004      	beq.n	1048a <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   10480:	687b      	ldr	r3, [r7, #4]
   10482:	78fa      	ldrb	r2, [r7, #3]
   10484:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   10488:	e043      	b.n	10512 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   1048a:	687b      	ldr	r3, [r7, #4]
   1048c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   10490:	2b00      	cmp	r3, #0
   10492:	d01f      	beq.n	104d4 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   10494:	687b      	ldr	r3, [r7, #4]
   10496:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1049a:	43db      	mvns	r3, r3
   1049c:	b2da      	uxtb	r2, r3
   1049e:	687b      	ldr	r3, [r7, #4]
   104a0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
   104a4:	78fb      	ldrb	r3, [r7, #3]
   104a6:	687a      	ldr	r2, [r7, #4]
   104a8:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
   104ac:	4293      	cmp	r3, r2
   104ae:	dd0c      	ble.n	104ca <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   104b0:	687b      	ldr	r3, [r7, #4]
   104b2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   104b6:	687b      	ldr	r3, [r7, #4]
   104b8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
   104bc:	687b      	ldr	r3, [r7, #4]
   104be:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   104c2:	687b      	ldr	r3, [r7, #4]
   104c4:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   104c8:	e023      	b.n	10512 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   104ca:	687b      	ldr	r3, [r7, #4]
   104cc:	78fa      	ldrb	r2, [r7, #3]
   104ce:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   104d2:	e01e      	b.n	10512 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   104d4:	687b      	ldr	r3, [r7, #4]
   104d6:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   104da:	43db      	mvns	r3, r3
   104dc:	b2da      	uxtb	r2, r3
   104de:	687b      	ldr	r3, [r7, #4]
   104e0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
   104e4:	78fb      	ldrb	r3, [r7, #3]
   104e6:	687a      	ldr	r2, [r7, #4]
   104e8:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
   104ec:	4293      	cmp	r3, r2
   104ee:	dd0c      	ble.n	1050a <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   104f0:	687b      	ldr	r3, [r7, #4]
   104f2:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   104f6:	687b      	ldr	r3, [r7, #4]
   104f8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
   104fc:	687b      	ldr	r3, [r7, #4]
   104fe:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   10502:	687b      	ldr	r3, [r7, #4]
   10504:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   10508:	e003      	b.n	10512 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   1050a:	687b      	ldr	r3, [r7, #4]
   1050c:	78fa      	ldrb	r2, [r7, #3]
   1050e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
   10512:	687b      	ldr	r3, [r7, #4]
   10514:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
   10518:	4618      	mov	r0, r3
   1051a:	3708      	adds	r7, #8
   1051c:	46bd      	mov	sp, r7
   1051e:	bd80      	pop	{r7, pc}
   10520:	00010085 	.word	0x00010085

00010524 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   10524:	b580      	push	{r7, lr}
   10526:	b082      	sub	sp, #8
   10528:	af00      	add	r7, sp, #0
   1052a:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   1052c:	687b      	ldr	r3, [r7, #4]
   1052e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10532:	4619      	mov	r1, r3
   10534:	6878      	ldr	r0, [r7, #4]
   10536:	4b03      	ldr	r3, [pc, #12]	; (10544 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   10538:	4798      	blx	r3
   1053a:	4603      	mov	r3, r0
	
}
   1053c:	4618      	mov	r0, r3
   1053e:	3708      	adds	r7, #8
   10540:	46bd      	mov	sp, r7
   10542:	bd80      	pop	{r7, pc}
   10544:	00010385 	.word	0x00010385

00010548 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   10548:	b580      	push	{r7, lr}
   1054a:	b082      	sub	sp, #8
   1054c:	af00      	add	r7, sp, #0
   1054e:	6078      	str	r0, [r7, #4]
   10550:	460b      	mov	r3, r1
   10552:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   10554:	687b      	ldr	r3, [r7, #4]
   10556:	2200      	movs	r2, #0
   10558:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   1055c:	687b      	ldr	r3, [r7, #4]
   1055e:	2201      	movs	r2, #1
   10560:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   10564:	6878      	ldr	r0, [r7, #4]
   10566:	4b05      	ldr	r3, [pc, #20]	; (1057c <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   10568:	4798      	blx	r3
		keepControlling=false;
   1056a:	687b      	ldr	r3, [r7, #4]
   1056c:	2200      	movs	r2, #0
   1056e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
   10572:	2300      	movs	r3, #0
	
}
   10574:	4618      	mov	r0, r3
   10576:	3708      	adds	r7, #8
   10578:	46bd      	mov	sp, r7
   1057a:	bd80      	pop	{r7, pc}
   1057c:	0000f8b5 	.word	0x0000f8b5

00010580 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   10580:	b590      	push	{r4, r7, lr}
   10582:	b085      	sub	sp, #20
   10584:	af00      	add	r7, sp, #0
   10586:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   10588:	68fb      	ldr	r3, [r7, #12]
   1058a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1058e:	4618      	mov	r0, r3
   10590:	4b36      	ldr	r3, [pc, #216]	; (1066c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
   10592:	4798      	blx	r3
   10594:	4603      	mov	r3, r0
   10596:	461a      	mov	r2, r3
   10598:	68fb      	ldr	r3, [r7, #12]
   1059a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   1059e:	68fb      	ldr	r3, [r7, #12]
   105a0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   105a4:	68fb      	ldr	r3, [r7, #12]
   105a6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
   105aa:	68fb      	ldr	r3, [r7, #12]
   105ac:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   105b0:	68fb      	ldr	r3, [r7, #12]
   105b2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   105b6:	68fb      	ldr	r3, [r7, #12]
   105b8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   105bc:	68fc      	ldr	r4, [r7, #12]
   105be:	463b      	mov	r3, r7
   105c0:	4611      	mov	r1, r2
   105c2:	4618      	mov	r0, r3
   105c4:	4b2a      	ldr	r3, [pc, #168]	; (10670 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
   105c6:	4798      	blx	r3
   105c8:	f104 0384 	add.w	r3, r4, #132	; 0x84
   105cc:	463a      	mov	r2, r7
   105ce:	6810      	ldr	r0, [r2, #0]
   105d0:	6018      	str	r0, [r3, #0]
   105d2:	8892      	ldrh	r2, [r2, #4]
   105d4:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   105d6:	68fb      	ldr	r3, [r7, #12]
   105d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   105dc:	68fc      	ldr	r4, [r7, #12]
   105de:	463b      	mov	r3, r7
   105e0:	4611      	mov	r1, r2
   105e2:	4618      	mov	r0, r3
   105e4:	4b23      	ldr	r3, [pc, #140]	; (10674 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
   105e6:	4798      	blx	r3
   105e8:	f104 038a 	add.w	r3, r4, #138	; 0x8a
   105ec:	463a      	mov	r2, r7
   105ee:	6811      	ldr	r1, [r2, #0]
   105f0:	6852      	ldr	r2, [r2, #4]
   105f2:	6019      	str	r1, [r3, #0]
   105f4:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   105f6:	68fb      	ldr	r3, [r7, #12]
   105f8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   105fc:	b2da      	uxtb	r2, r3
   105fe:	68fb      	ldr	r3, [r7, #12]
   10600:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
   10604:	68fb      	ldr	r3, [r7, #12]
   10606:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   1060a:	68fb      	ldr	r3, [r7, #12]
   1060c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   10610:	68fb      	ldr	r3, [r7, #12]
   10612:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   10616:	68fb      	ldr	r3, [r7, #12]
   10618:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
   1061c:	68fb      	ldr	r3, [r7, #12]
   1061e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   10622:	b2da      	uxtb	r2, r3
   10624:	68fb      	ldr	r3, [r7, #12]
   10626:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
   1062a:	68fb      	ldr	r3, [r7, #12]
   1062c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   10630:	2b00      	cmp	r3, #0
   10632:	d008      	beq.n	10646 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   10634:	68fb      	ldr	r3, [r7, #12]
   10636:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1063a:	43db      	mvns	r3, r3
   1063c:	b2da      	uxtb	r2, r3
   1063e:	68fb      	ldr	r3, [r7, #12]
   10640:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   10644:	e007      	b.n	10656 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   10646:	68fb      	ldr	r3, [r7, #12]
   10648:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   1064c:	43db      	mvns	r3, r3
   1064e:	b2da      	uxtb	r2, r3
   10650:	68fb      	ldr	r3, [r7, #12]
   10652:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
   10656:	68fb      	ldr	r3, [r7, #12]
   10658:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1065c:	4619      	mov	r1, r3
   1065e:	68f8      	ldr	r0, [r7, #12]
   10660:	4b05      	ldr	r3, [pc, #20]	; (10678 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
   10662:	4798      	blx	r3
}
   10664:	bf00      	nop
   10666:	3714      	adds	r7, #20
   10668:	46bd      	mov	sp, r7
   1066a:	bd90      	pop	{r4, r7, pc}
   1066c:	00010ee1 	.word	0x00010ee1
   10670:	00010c65 	.word	0x00010c65
   10674:	00010c0d 	.word	0x00010c0d
   10678:	0001067d 	.word	0x0001067d

0001067c <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   1067c:	b480      	push	{r7}
   1067e:	b085      	sub	sp, #20
   10680:	af00      	add	r7, sp, #0
   10682:	6078      	str	r0, [r7, #4]
   10684:	460b      	mov	r3, r1
   10686:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10688:	2300      	movs	r3, #0
   1068a:	73fb      	strb	r3, [r7, #15]
   1068c:	7bfb      	ldrb	r3, [r7, #15]
   1068e:	2b0e      	cmp	r3, #14
   10690:	dc1d      	bgt.n	106ce <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   10692:	687b      	ldr	r3, [r7, #4]
   10694:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10698:	687a      	ldr	r2, [r7, #4]
   1069a:	3332      	adds	r3, #50	; 0x32
   1069c:	009b      	lsls	r3, r3, #2
   1069e:	4413      	add	r3, r2
   106a0:	685b      	ldr	r3, [r3, #4]
   106a2:	7bfa      	ldrb	r2, [r7, #15]
   106a4:	f1c2 020f 	rsb	r2, r2, #15
   106a8:	441a      	add	r2, r3
   106aa:	687b      	ldr	r3, [r7, #4]
   106ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   106b0:	6879      	ldr	r1, [r7, #4]
   106b2:	3332      	adds	r3, #50	; 0x32
   106b4:	009b      	lsls	r3, r3, #2
   106b6:	440b      	add	r3, r1
   106b8:	685b      	ldr	r3, [r3, #4]
   106ba:	7bf9      	ldrb	r1, [r7, #15]
   106bc:	f1c1 010e 	rsb	r1, r1, #14
   106c0:	440b      	add	r3, r1
   106c2:	781b      	ldrb	r3, [r3, #0]
   106c4:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   106c6:	7bfb      	ldrb	r3, [r7, #15]
   106c8:	3301      	adds	r3, #1
   106ca:	73fb      	strb	r3, [r7, #15]
   106cc:	e7de      	b.n	1068c <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   106ce:	687b      	ldr	r3, [r7, #4]
   106d0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   106d4:	687a      	ldr	r2, [r7, #4]
   106d6:	3332      	adds	r3, #50	; 0x32
   106d8:	009b      	lsls	r3, r3, #2
   106da:	4413      	add	r3, r2
   106dc:	685b      	ldr	r3, [r3, #4]
   106de:	78fa      	ldrb	r2, [r7, #3]
   106e0:	701a      	strb	r2, [r3, #0]
}
   106e2:	bf00      	nop
   106e4:	3714      	adds	r7, #20
   106e6:	46bd      	mov	sp, r7
   106e8:	bc80      	pop	{r7}
   106ea:	4770      	bx	lr

000106ec <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   106ec:	b580      	push	{r7, lr}
   106ee:	b084      	sub	sp, #16
   106f0:	af00      	add	r7, sp, #0
   106f2:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   106f4:	23b4      	movs	r3, #180	; 0xb4
   106f6:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   106f8:	687b      	ldr	r3, [r7, #4]
   106fa:	4a59      	ldr	r2, [pc, #356]	; (10860 <_ZN22FlapperValveController8SelftestEv+0x174>)
   106fc:	33c7      	adds	r3, #199	; 0xc7
   106fe:	8812      	ldrh	r2, [r2, #0]
   10700:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   10702:	6878      	ldr	r0, [r7, #4]
   10704:	4b57      	ldr	r3, [pc, #348]	; (10864 <_ZN22FlapperValveController8SelftestEv+0x178>)
   10706:	4798      	blx	r3
	singlefv->SetEnable(false);
   10708:	687b      	ldr	r3, [r7, #4]
   1070a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1070e:	2100      	movs	r1, #0
   10710:	4618      	mov	r0, r3
   10712:	4b55      	ldr	r3, [pc, #340]	; (10868 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   10714:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   10716:	687b      	ldr	r3, [r7, #4]
   10718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1071c:	2100      	movs	r1, #0
   1071e:	4618      	mov	r0, r3
   10720:	4b52      	ldr	r3, [pc, #328]	; (1086c <_ZN22FlapperValveController8SelftestEv+0x180>)
   10722:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   10724:	687b      	ldr	r3, [r7, #4]
   10726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1072a:	2100      	movs	r1, #0
   1072c:	4618      	mov	r0, r3
   1072e:	4b50      	ldr	r3, [pc, #320]	; (10870 <_ZN22FlapperValveController8SelftestEv+0x184>)
   10730:	4798      	blx	r3
	delay_ms(10);
   10732:	200a      	movs	r0, #10
   10734:	4b4f      	ldr	r3, [pc, #316]	; (10874 <_ZN22FlapperValveController8SelftestEv+0x188>)
   10736:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1073e:	2101      	movs	r1, #1
   10740:	4618      	mov	r0, r3
   10742:	4b4b      	ldr	r3, [pc, #300]	; (10870 <_ZN22FlapperValveController8SelftestEv+0x184>)
   10744:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   10746:	687b      	ldr	r3, [r7, #4]
   10748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1074c:	7bba      	ldrb	r2, [r7, #14]
   1074e:	4611      	mov	r1, r2
   10750:	4618      	mov	r0, r3
   10752:	4b49      	ldr	r3, [pc, #292]	; (10878 <_ZN22FlapperValveController8SelftestEv+0x18c>)
   10754:	4798      	blx	r3
	singlefv->SetDirection(false);
   10756:	687b      	ldr	r3, [r7, #4]
   10758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1075c:	2100      	movs	r1, #0
   1075e:	4618      	mov	r0, r3
   10760:	4b46      	ldr	r3, [pc, #280]	; (1087c <_ZN22FlapperValveController8SelftestEv+0x190>)
   10762:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
   10764:	687b      	ldr	r3, [r7, #4]
   10766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1076a:	4618      	mov	r0, r3
   1076c:	4b44      	ldr	r3, [pc, #272]	; (10880 <_ZN22FlapperValveController8SelftestEv+0x194>)
   1076e:	4798      	blx	r3
   10770:	4603      	mov	r3, r0
   10772:	461a      	mov	r2, r3
   10774:	7bbb      	ldrb	r3, [r7, #14]
   10776:	429a      	cmp	r2, r3
   10778:	bfcc      	ite	gt
   1077a:	2301      	movgt	r3, #1
   1077c:	2300      	movle	r3, #0
   1077e:	b2db      	uxtb	r3, r3
   10780:	2b00      	cmp	r3, #0
   10782:	d007      	beq.n	10794 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
   10784:	687b      	ldr	r3, [r7, #4]
   10786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1078a:	2101      	movs	r1, #1
   1078c:	4618      	mov	r0, r3
   1078e:	4b3b      	ldr	r3, [pc, #236]	; (1087c <_ZN22FlapperValveController8SelftestEv+0x190>)
   10790:	4798      	blx	r3
   10792:	e006      	b.n	107a2 <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
   10794:	687b      	ldr	r3, [r7, #4]
   10796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1079a:	2100      	movs	r1, #0
   1079c:	4618      	mov	r0, r3
   1079e:	4b37      	ldr	r3, [pc, #220]	; (1087c <_ZN22FlapperValveController8SelftestEv+0x190>)
   107a0:	4798      	blx	r3
	}
		if (valve_ID==0)
   107a2:	687b      	ldr	r3, [r7, #4]
   107a4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   107a8:	2b00      	cmp	r3, #0
   107aa:	d106      	bne.n	107ba <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   107ac:	f242 7210 	movw	r2, #10000	; 0x2710
   107b0:	4934      	ldr	r1, [pc, #208]	; (10884 <_ZN22FlapperValveController8SelftestEv+0x198>)
   107b2:	4835      	ldr	r0, [pc, #212]	; (10888 <_ZN22FlapperValveController8SelftestEv+0x19c>)
   107b4:	4b35      	ldr	r3, [pc, #212]	; (1088c <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   107b6:	4798      	blx	r3
   107b8:	e005      	b.n	107c6 <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   107ba:	f242 7210 	movw	r2, #10000	; 0x2710
   107be:	4934      	ldr	r1, [pc, #208]	; (10890 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
   107c0:	4831      	ldr	r0, [pc, #196]	; (10888 <_ZN22FlapperValveController8SelftestEv+0x19c>)
   107c2:	4b32      	ldr	r3, [pc, #200]	; (1088c <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   107c4:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
   107c6:	687b      	ldr	r3, [r7, #4]
   107c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   107cc:	2101      	movs	r1, #1
   107ce:	4618      	mov	r0, r3
   107d0:	4b25      	ldr	r3, [pc, #148]	; (10868 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   107d2:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
   107d4:	687b      	ldr	r3, [r7, #4]
   107d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   107da:	4618      	mov	r0, r3
   107dc:	4b28      	ldr	r3, [pc, #160]	; (10880 <_ZN22FlapperValveController8SelftestEv+0x194>)
   107de:	4798      	blx	r3
   107e0:	4603      	mov	r3, r0
   107e2:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   107e4:	687b      	ldr	r3, [r7, #4]
   107e6:	2200      	movs	r2, #0
   107e8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   107ec:	7bfa      	ldrb	r2, [r7, #15]
   107ee:	7bbb      	ldrb	r3, [r7, #14]
   107f0:	1ad3      	subs	r3, r2, r3
   107f2:	2b00      	cmp	r3, #0
   107f4:	bfb8      	it	lt
   107f6:	425b      	neglt	r3, r3
   107f8:	2b0c      	cmp	r3, #12
   107fa:	bfcc      	ite	gt
   107fc:	2301      	movgt	r3, #1
   107fe:	2300      	movle	r3, #0
   10800:	b2db      	uxtb	r3, r3
   10802:	461a      	mov	r2, r3
   10804:	687b      	ldr	r3, [r7, #4]
   10806:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1080a:	b2db      	uxtb	r3, r3
   1080c:	f083 0301 	eor.w	r3, r3, #1
   10810:	b2db      	uxtb	r3, r3
   10812:	4013      	ands	r3, r2
   10814:	2b00      	cmp	r3, #0
   10816:	bf14      	ite	ne
   10818:	2301      	movne	r3, #1
   1081a:	2300      	moveq	r3, #0
   1081c:	b2db      	uxtb	r3, r3
   1081e:	2b00      	cmp	r3, #0
   10820:	d008      	beq.n	10834 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
   10822:	687b      	ldr	r3, [r7, #4]
   10824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10828:	4618      	mov	r0, r3
   1082a:	4b15      	ldr	r3, [pc, #84]	; (10880 <_ZN22FlapperValveController8SelftestEv+0x194>)
   1082c:	4798      	blx	r3
   1082e:	4603      	mov	r3, r0
   10830:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   10832:	e7db      	b.n	107ec <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
   10834:	6878      	ldr	r0, [r7, #4]
   10836:	4b17      	ldr	r3, [pc, #92]	; (10894 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
   10838:	4798      	blx	r3

	singlefv->SetEnable(false);
   1083a:	687b      	ldr	r3, [r7, #4]
   1083c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10840:	2100      	movs	r1, #0
   10842:	4618      	mov	r0, r3
   10844:	4b08      	ldr	r3, [pc, #32]	; (10868 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   10846:	4798      	blx	r3
	return !timeoutFlapperValveController;
   10848:	687b      	ldr	r3, [r7, #4]
   1084a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1084e:	b2db      	uxtb	r3, r3
   10850:	f083 0301 	eor.w	r3, r3, #1
   10854:	b2db      	uxtb	r3, r3
}
   10856:	4618      	mov	r0, r3
   10858:	3710      	adds	r7, #16
   1085a:	46bd      	mov	sp, r7
   1085c:	bd80      	pop	{r7, pc}
   1085e:	bf00      	nop
   10860:	0001446c 	.word	0x0001446c
   10864:	00010581 	.word	0x00010581
   10868:	00010cc1 	.word	0x00010cc1
   1086c:	00010e31 	.word	0x00010e31
   10870:	00010db9 	.word	0x00010db9
   10874:	00002a99 	.word	0x00002a99
   10878:	00010ea9 	.word	0x00010ea9
   1087c:	00010d41 	.word	0x00010d41
   10880:	00010ee1 	.word	0x00010ee1
   10884:	0000f639 	.word	0x0000f639
   10888:	20001ee4 	.word	0x20001ee4
   1088c:	0000e061 	.word	0x0000e061
   10890:	0000f665 	.word	0x0000f665
   10894:	00010899 	.word	0x00010899

00010898 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
   10898:	b580      	push	{r7, lr}
   1089a:	b082      	sub	sp, #8
   1089c:	af00      	add	r7, sp, #0
   1089e:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   108a0:	687b      	ldr	r3, [r7, #4]
   108a2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   108a6:	2b00      	cmp	r3, #0
   108a8:	d104      	bne.n	108b4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   108aa:	4906      	ldr	r1, [pc, #24]	; (108c4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   108ac:	4806      	ldr	r0, [pc, #24]	; (108c8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   108ae:	4b07      	ldr	r3, [pc, #28]	; (108cc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   108b0:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   108b2:	e003      	b.n	108bc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   108b4:	4906      	ldr	r1, [pc, #24]	; (108d0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   108b6:	4804      	ldr	r0, [pc, #16]	; (108c8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   108b8:	4b04      	ldr	r3, [pc, #16]	; (108cc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   108ba:	4798      	blx	r3
}
   108bc:	bf00      	nop
   108be:	3708      	adds	r7, #8
   108c0:	46bd      	mov	sp, r7
   108c2:	bd80      	pop	{r7, pc}
   108c4:	0000f639 	.word	0x0000f639
   108c8:	20001ee4 	.word	0x20001ee4
   108cc:	0000e009 	.word	0x0000e009
   108d0:	0000f665 	.word	0x0000f665

000108d4 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   108d4:	b590      	push	{r4, r7, lr}
   108d6:	b083      	sub	sp, #12
   108d8:	af00      	add	r7, sp, #0
   108da:	6078      	str	r0, [r7, #4]
   108dc:	4c05      	ldr	r4, [pc, #20]	; (108f4 <__tcf_0+0x20>)
   108de:	4b06      	ldr	r3, [pc, #24]	; (108f8 <__tcf_0+0x24>)
   108e0:	429c      	cmp	r4, r3
   108e2:	d004      	beq.n	108ee <__tcf_0+0x1a>
   108e4:	3c78      	subs	r4, #120	; 0x78
   108e6:	4620      	mov	r0, r4
   108e8:	4b04      	ldr	r3, [pc, #16]	; (108fc <__tcf_0+0x28>)
   108ea:	4798      	blx	r3
   108ec:	e7f7      	b.n	108de <__tcf_0+0xa>
   108ee:	370c      	adds	r7, #12
   108f0:	46bd      	mov	sp, r7
   108f2:	bd90      	pop	{r4, r7, pc}
   108f4:	200020bc 	.word	0x200020bc
   108f8:	20001fcc 	.word	0x20001fcc
   108fc:	00010aad 	.word	0x00010aad

00010900 <_Z41__static_initialization_and_destruction_0ii>:

   10900:	b5b0      	push	{r4, r5, r7, lr}
   10902:	b082      	sub	sp, #8
   10904:	af00      	add	r7, sp, #0
   10906:	6078      	str	r0, [r7, #4]
   10908:	6039      	str	r1, [r7, #0]
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	2b01      	cmp	r3, #1
   1090e:	d164      	bne.n	109da <_Z41__static_initialization_and_destruction_0ii+0xda>
   10910:	683b      	ldr	r3, [r7, #0]
   10912:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10916:	4293      	cmp	r3, r2
   10918:	d15f      	bne.n	109da <_Z41__static_initialization_and_destruction_0ii+0xda>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1091a:	4932      	ldr	r1, [pc, #200]	; (109e4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1091c:	4832      	ldr	r0, [pc, #200]	; (109e8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1091e:	4b33      	ldr	r3, [pc, #204]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10920:	4798      	blx	r3
   10922:	4a33      	ldr	r2, [pc, #204]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10924:	4933      	ldr	r1, [pc, #204]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10926:	4830      	ldr	r0, [pc, #192]	; (109e8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10928:	4b33      	ldr	r3, [pc, #204]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1092a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   1092c:	4933      	ldr	r1, [pc, #204]	; (109fc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   1092e:	4834      	ldr	r0, [pc, #208]	; (10a00 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10930:	4b2e      	ldr	r3, [pc, #184]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10932:	4798      	blx	r3
   10934:	4a2e      	ldr	r2, [pc, #184]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10936:	492f      	ldr	r1, [pc, #188]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10938:	4831      	ldr	r0, [pc, #196]	; (10a00 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1093a:	4b2f      	ldr	r3, [pc, #188]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1093c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1093e:	4931      	ldr	r1, [pc, #196]	; (10a04 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10940:	4831      	ldr	r0, [pc, #196]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10942:	4b2a      	ldr	r3, [pc, #168]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10944:	4798      	blx	r3
   10946:	4a2a      	ldr	r2, [pc, #168]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10948:	492a      	ldr	r1, [pc, #168]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1094a:	482f      	ldr	r0, [pc, #188]	; (10a08 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1094c:	4b2a      	ldr	r3, [pc, #168]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1094e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10950:	492e      	ldr	r1, [pc, #184]	; (10a0c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10952:	482f      	ldr	r0, [pc, #188]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10954:	4b25      	ldr	r3, [pc, #148]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10956:	4798      	blx	r3
   10958:	4a25      	ldr	r2, [pc, #148]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1095a:	4926      	ldr	r1, [pc, #152]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1095c:	482c      	ldr	r0, [pc, #176]	; (10a10 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1095e:	4b26      	ldr	r3, [pc, #152]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10960:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10962:	492c      	ldr	r1, [pc, #176]	; (10a14 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10964:	482c      	ldr	r0, [pc, #176]	; (10a18 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10966:	4b21      	ldr	r3, [pc, #132]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10968:	4798      	blx	r3
   1096a:	4a21      	ldr	r2, [pc, #132]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1096c:	4921      	ldr	r1, [pc, #132]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1096e:	482a      	ldr	r0, [pc, #168]	; (10a18 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10970:	4b21      	ldr	r3, [pc, #132]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10972:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10974:	4929      	ldr	r1, [pc, #164]	; (10a1c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10976:	482a      	ldr	r0, [pc, #168]	; (10a20 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10978:	4b1c      	ldr	r3, [pc, #112]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1097a:	4798      	blx	r3
   1097c:	4a1c      	ldr	r2, [pc, #112]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1097e:	491d      	ldr	r1, [pc, #116]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10980:	4827      	ldr	r0, [pc, #156]	; (10a20 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10982:	4b1d      	ldr	r3, [pc, #116]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10984:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10986:	4927      	ldr	r1, [pc, #156]	; (10a24 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   10988:	4827      	ldr	r0, [pc, #156]	; (10a28 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   1098a:	4b18      	ldr	r3, [pc, #96]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1098c:	4798      	blx	r3
   1098e:	4a18      	ldr	r2, [pc, #96]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10990:	4918      	ldr	r1, [pc, #96]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10992:	4825      	ldr	r0, [pc, #148]	; (10a28 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10994:	4b18      	ldr	r3, [pc, #96]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10996:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10998:	4924      	ldr	r1, [pc, #144]	; (10a2c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1099a:	4825      	ldr	r0, [pc, #148]	; (10a30 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1099c:	4b13      	ldr	r3, [pc, #76]	; (109ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1099e:	4798      	blx	r3
   109a0:	4a13      	ldr	r2, [pc, #76]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   109a2:	4914      	ldr	r1, [pc, #80]	; (109f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   109a4:	4822      	ldr	r0, [pc, #136]	; (10a30 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   109a6:	4b14      	ldr	r3, [pc, #80]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   109a8:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   109aa:	4b22      	ldr	r3, [pc, #136]	; (10a34 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   109ac:	2401      	movs	r4, #1
   109ae:	461d      	mov	r5, r3
   109b0:	2c00      	cmp	r4, #0
   109b2:	db05      	blt.n	109c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>
   109b4:	4628      	mov	r0, r5
   109b6:	4b20      	ldr	r3, [pc, #128]	; (10a38 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   109b8:	4798      	blx	r3
   109ba:	3578      	adds	r5, #120	; 0x78
   109bc:	3c01      	subs	r4, #1
   109be:	e7f7      	b.n	109b0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
   109c0:	4a0b      	ldr	r2, [pc, #44]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   109c2:	491e      	ldr	r1, [pc, #120]	; (10a3c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   109c4:	2000      	movs	r0, #0
   109c6:	4b0c      	ldr	r3, [pc, #48]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   109c8:	4798      	blx	r3
   109ca:	481d      	ldr	r0, [pc, #116]	; (10a40 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   109cc:	4b1d      	ldr	r3, [pc, #116]	; (10a44 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   109ce:	4798      	blx	r3
   109d0:	4a07      	ldr	r2, [pc, #28]	; (109f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   109d2:	491d      	ldr	r1, [pc, #116]	; (10a48 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   109d4:	481a      	ldr	r0, [pc, #104]	; (10a40 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   109d6:	4b08      	ldr	r3, [pc, #32]	; (109f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   109d8:	4798      	blx	r3
   109da:	bf00      	nop
   109dc:	3708      	adds	r7, #8
   109de:	46bd      	mov	sp, r7
   109e0:	bdb0      	pop	{r4, r5, r7, pc}
   109e2:	bf00      	nop
   109e4:	20009f88 	.word	0x20009f88
   109e8:	20001ea4 	.word	0x20001ea4
   109ec:	0000dd8d 	.word	0x0000dd8d
   109f0:	20000000 	.word	0x20000000
   109f4:	0000ddc5 	.word	0x0000ddc5
   109f8:	000135c5 	.word	0x000135c5
   109fc:	2000a01c 	.word	0x2000a01c
   10a00:	20001ec4 	.word	0x20001ec4
   10a04:	2000a140 	.word	0x2000a140
   10a08:	20001ee4 	.word	0x20001ee4
   10a0c:	2000a03c 	.word	0x2000a03c
   10a10:	20001f04 	.word	0x20001f04
   10a14:	2000a100 	.word	0x2000a100
   10a18:	20001f24 	.word	0x20001f24
   10a1c:	2000a120 	.word	0x2000a120
   10a20:	20001f44 	.word	0x20001f44
   10a24:	20009ff8 	.word	0x20009ff8
   10a28:	20001f64 	.word	0x20001f64
   10a2c:	2000a098 	.word	0x2000a098
   10a30:	20001f84 	.word	0x20001f84
   10a34:	20001fcc 	.word	0x20001fcc
   10a38:	00010a61 	.word	0x00010a61
   10a3c:	000108d5 	.word	0x000108d5
   10a40:	200020bc 	.word	0x200020bc
   10a44:	0000f711 	.word	0x0000f711
   10a48:	0000f79d 	.word	0x0000f79d

00010a4c <_GLOBAL__sub_I_ptrFlapperValveController>:
   10a4c:	b580      	push	{r7, lr}
   10a4e:	af00      	add	r7, sp, #0
   10a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10a54:	2001      	movs	r0, #1
   10a56:	4b01      	ldr	r3, [pc, #4]	; (10a5c <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   10a58:	4798      	blx	r3
   10a5a:	bd80      	pop	{r7, pc}
   10a5c:	00010901 	.word	0x00010901

00010a60 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   10a60:	b580      	push	{r7, lr}
   10a62:	b082      	sub	sp, #8
   10a64:	af00      	add	r7, sp, #0
   10a66:	6078      	str	r0, [r7, #4]
   10a68:	687b      	ldr	r3, [r7, #4]
   10a6a:	4618      	mov	r0, r3
   10a6c:	4b0c      	ldr	r3, [pc, #48]	; (10aa0 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   10a6e:	4798      	blx	r3
{
	valveID=0;
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	2200      	movs	r2, #0
   10a74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
   10a78:	687b      	ldr	r3, [r7, #4]
   10a7a:	4a0a      	ldr	r2, [pc, #40]	; (10aa4 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   10a7c:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
   10a7e:	687b      	ldr	r3, [r7, #4]
   10a80:	2200      	movs	r2, #0
   10a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
   10a86:	4a08      	ldr	r2, [pc, #32]	; (10aa8 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   10a88:	687b      	ldr	r3, [r7, #4]
   10a8a:	6013      	str	r3, [r2, #0]
	isOK=false;
   10a8c:	687b      	ldr	r3, [r7, #4]
   10a8e:	2200      	movs	r2, #0
   10a90:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
   10a94:	687b      	ldr	r3, [r7, #4]
   10a96:	4618      	mov	r0, r3
   10a98:	3708      	adds	r7, #8
   10a9a:	46bd      	mov	sp, r7
   10a9c:	bd80      	pop	{r7, pc}
   10a9e:	bf00      	nop
   10aa0:	00011a01 	.word	0x00011a01
   10aa4:	2000229c 	.word	0x2000229c
   10aa8:	20002298 	.word	0x20002298

00010aac <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   10aac:	b580      	push	{r7, lr}
   10aae:	b082      	sub	sp, #8
   10ab0:	af00      	add	r7, sp, #0
   10ab2:	6078      	str	r0, [r7, #4]
   10ab4:	687b      	ldr	r3, [r7, #4]
   10ab6:	4618      	mov	r0, r3
   10ab8:	4b03      	ldr	r3, [pc, #12]	; (10ac8 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   10aba:	4798      	blx	r3
{
} //~FlapperValve_Class
   10abc:	687b      	ldr	r3, [r7, #4]
   10abe:	4618      	mov	r0, r3
   10ac0:	3708      	adds	r7, #8
   10ac2:	46bd      	mov	sp, r7
   10ac4:	bd80      	pop	{r7, pc}
   10ac6:	bf00      	nop
   10ac8:	00011a15 	.word	0x00011a15

00010acc <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   10acc:	b580      	push	{r7, lr}
   10ace:	b082      	sub	sp, #8
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	6078      	str	r0, [r7, #4]
	if (i2c->i2c_initiated)
   10ad4:	687b      	ldr	r3, [r7, #4]
   10ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10ad8:	7a1b      	ldrb	r3, [r3, #8]
   10ada:	b2db      	uxtb	r3, r3
   10adc:	2b00      	cmp	r3, #0
   10ade:	d104      	bne.n	10aea <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
   10ae0:	687b      	ldr	r3, [r7, #4]
   10ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10ae4:	4618      	mov	r0, r3
   10ae6:	4b19      	ldr	r3, [pc, #100]	; (10b4c <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   10ae8:	4798      	blx	r3
	}
		

		if (i2c->isOK)
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10aee:	7a5b      	ldrb	r3, [r3, #9]
   10af0:	b2db      	uxtb	r3, r3
   10af2:	2b00      	cmp	r3, #0
   10af4:	d01b      	beq.n	10b2e <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   10af6:	687b      	ldr	r3, [r7, #4]
   10af8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   10afc:	4619      	mov	r1, r3
   10afe:	6878      	ldr	r0, [r7, #4]
   10b00:	4b13      	ldr	r3, [pc, #76]	; (10b50 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   10b02:	4798      	blx	r3
			expanders[0]->SetPortInput();
   10b04:	687b      	ldr	r3, [r7, #4]
   10b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10b08:	4618      	mov	r0, r3
   10b0a:	4b12      	ldr	r3, [pc, #72]	; (10b54 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   10b0c:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
   10b0e:	687b      	ldr	r3, [r7, #4]
   10b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10b12:	2182      	movs	r1, #130	; 0x82
   10b14:	4618      	mov	r0, r3
   10b16:	4b10      	ldr	r3, [pc, #64]	; (10b58 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
   10b18:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   10b1a:	687b      	ldr	r3, [r7, #4]
   10b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10b1e:	4618      	mov	r0, r3
   10b20:	4b0e      	ldr	r3, [pc, #56]	; (10b5c <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
   10b22:	4798      	blx	r3
			expanders[3]->SetPortInput();
   10b24:	687b      	ldr	r3, [r7, #4]
   10b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10b28:	4618      	mov	r0, r3
   10b2a:	4b0a      	ldr	r3, [pc, #40]	; (10b54 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   10b2c:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   10b2e:	687b      	ldr	r3, [r7, #4]
   10b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10b32:	7a5b      	ldrb	r3, [r3, #9]
   10b34:	b2da      	uxtb	r2, r3
   10b36:	687b      	ldr	r3, [r7, #4]
   10b38:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
   10b3c:	687b      	ldr	r3, [r7, #4]
   10b3e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   10b42:	b2db      	uxtb	r3, r3


}
   10b44:	4618      	mov	r0, r3
   10b46:	3708      	adds	r7, #8
   10b48:	46bd      	mov	sp, r7
   10b4a:	bd80      	pop	{r7, pc}
   10b4c:	0000dc61 	.word	0x0000dc61
   10b50:	00010b89 	.word	0x00010b89
   10b54:	00011da9 	.word	0x00011da9
   10b58:	00011ded 	.word	0x00011ded
   10b5c:	00011e61 	.word	0x00011e61

00010b60 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   10b60:	b580      	push	{r7, lr}
   10b62:	b082      	sub	sp, #8
   10b64:	af00      	add	r7, sp, #0
   10b66:	6078      	str	r0, [r7, #4]
   10b68:	460b      	mov	r3, r1
   10b6a:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   10b6c:	687b      	ldr	r3, [r7, #4]
   10b6e:	78fa      	ldrb	r2, [r7, #3]
   10b70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
   10b74:	6878      	ldr	r0, [r7, #4]
   10b76:	4b03      	ldr	r3, [pc, #12]	; (10b84 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   10b78:	4798      	blx	r3
   10b7a:	4603      	mov	r3, r0
}
   10b7c:	4618      	mov	r0, r3
   10b7e:	3708      	adds	r7, #8
   10b80:	46bd      	mov	sp, r7
   10b82:	bd80      	pop	{r7, pc}
   10b84:	00010acd 	.word	0x00010acd

00010b88 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   10b88:	b580      	push	{r7, lr}
   10b8a:	b084      	sub	sp, #16
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	6078      	str	r0, [r7, #4]
   10b90:	460b      	mov	r3, r1
   10b92:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   10b94:	2300      	movs	r3, #0
   10b96:	60fb      	str	r3, [r7, #12]
   10b98:	68fb      	ldr	r3, [r7, #12]
   10b9a:	2b03      	cmp	r3, #3
   10b9c:	dc2d      	bgt.n	10bfa <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   10b9e:	687b      	ldr	r3, [r7, #4]
   10ba0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   10ba4:	4619      	mov	r1, r3
   10ba6:	68fb      	ldr	r3, [r7, #12]
   10ba8:	461a      	mov	r2, r3
   10baa:	00d2      	lsls	r2, r2, #3
   10bac:	1ad2      	subs	r2, r2, r3
   10bae:	0093      	lsls	r3, r2, #2
   10bb0:	461a      	mov	r2, r3
   10bb2:	460b      	mov	r3, r1
   10bb4:	00db      	lsls	r3, r3, #3
   10bb6:	1a5b      	subs	r3, r3, r1
   10bb8:	011b      	lsls	r3, r3, #4
   10bba:	4413      	add	r3, r2
   10bbc:	4a11      	ldr	r2, [pc, #68]	; (10c04 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
   10bbe:	441a      	add	r2, r3
   10bc0:	687b      	ldr	r3, [r7, #4]
   10bc2:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   10bc4:	687b      	ldr	r3, [r7, #4]
   10bc6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   10bc8:	68fb      	ldr	r3, [r7, #12]
   10bca:	b2da      	uxtb	r2, r3
   10bcc:	78fb      	ldrb	r3, [r7, #3]
   10bce:	009b      	lsls	r3, r3, #2
   10bd0:	b2db      	uxtb	r3, r3
   10bd2:	4413      	add	r3, r2
   10bd4:	b2db      	uxtb	r3, r3
   10bd6:	3320      	adds	r3, #32
   10bd8:	b2d9      	uxtb	r1, r3
   10bda:	687b      	ldr	r3, [r7, #4]
   10bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10bde:	461a      	mov	r2, r3
   10be0:	4b09      	ldr	r3, [pc, #36]	; (10c08 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   10be2:	4798      	blx	r3
		expanders[i]=currentExpander;
   10be4:	687b      	ldr	r3, [r7, #4]
   10be6:	6e99      	ldr	r1, [r3, #104]	; 0x68
   10be8:	687b      	ldr	r3, [r7, #4]
   10bea:	68fa      	ldr	r2, [r7, #12]
   10bec:	3216      	adds	r2, #22
   10bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   10bf2:	68fb      	ldr	r3, [r7, #12]
   10bf4:	3301      	adds	r3, #1
   10bf6:	60fb      	str	r3, [r7, #12]
   10bf8:	e7ce      	b.n	10b98 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   10bfa:	2300      	movs	r3, #0
}
   10bfc:	4618      	mov	r0, r3
   10bfe:	3710      	adds	r7, #16
   10c00:	46bd      	mov	sp, r7
   10c02:	bd80      	pop	{r7, pc}
   10c04:	200022b4 	.word	0x200022b4
   10c08:	00011c05 	.word	0x00011c05

00010c0c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   10c0c:	b590      	push	{r4, r7, lr}
   10c0e:	b085      	sub	sp, #20
   10c10:	af00      	add	r7, sp, #0
   10c12:	60f8      	str	r0, [r7, #12]
   10c14:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   10c16:	68bb      	ldr	r3, [r7, #8]
   10c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10c1a:	4618      	mov	r0, r3
   10c1c:	4b0f      	ldr	r3, [pc, #60]	; (10c5c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
   10c1e:	4798      	blx	r3
   10c20:	4603      	mov	r3, r0
   10c22:	461a      	mov	r2, r3
   10c24:	68bb      	ldr	r3, [r7, #8]
   10c26:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
   10c2a:	68b9      	ldr	r1, [r7, #8]
   10c2c:	68bb      	ldr	r3, [r7, #8]
   10c2e:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   10c32:	68bc      	ldr	r4, [r7, #8]
   10c34:	463b      	mov	r3, r7
   10c36:	4618      	mov	r0, r3
   10c38:	4b09      	ldr	r3, [pc, #36]	; (10c60 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   10c3a:	4798      	blx	r3
   10c3c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   10c40:	463a      	mov	r2, r7
   10c42:	6810      	ldr	r0, [r2, #0]
   10c44:	6851      	ldr	r1, [r2, #4]
   10c46:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
   10c48:	68fa      	ldr	r2, [r7, #12]
   10c4a:	68bb      	ldr	r3, [r7, #8]
   10c4c:	333c      	adds	r3, #60	; 0x3c
   10c4e:	cb03      	ldmia	r3!, {r0, r1}
   10c50:	6010      	str	r0, [r2, #0]
   10c52:	6051      	str	r1, [r2, #4]
}
   10c54:	68f8      	ldr	r0, [r7, #12]
   10c56:	3714      	adds	r7, #20
   10c58:	46bd      	mov	sp, r7
   10c5a:	bd90      	pop	{r4, r7, pc}
   10c5c:	00011ce9 	.word	0x00011ce9
   10c60:	00011b11 	.word	0x00011b11

00010c64 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   10c64:	b590      	push	{r4, r7, lr}
   10c66:	b085      	sub	sp, #20
   10c68:	af00      	add	r7, sp, #0
   10c6a:	60f8      	str	r0, [r7, #12]
   10c6c:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   10c6e:	68bb      	ldr	r3, [r7, #8]
   10c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10c72:	4618      	mov	r0, r3
   10c74:	4b10      	ldr	r3, [pc, #64]	; (10cb8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   10c76:	4798      	blx	r3
   10c78:	4603      	mov	r3, r0
   10c7a:	461a      	mov	r2, r3
   10c7c:	68bb      	ldr	r3, [r7, #8]
   10c7e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
   10c82:	68b9      	ldr	r1, [r7, #8]
   10c84:	68bb      	ldr	r3, [r7, #8]
   10c86:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   10c8a:	68bc      	ldr	r4, [r7, #8]
   10c8c:	463b      	mov	r3, r7
   10c8e:	4618      	mov	r0, r3
   10c90:	4b0a      	ldr	r3, [pc, #40]	; (10cbc <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   10c92:	4798      	blx	r3
   10c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10c98:	463a      	mov	r2, r7
   10c9a:	6810      	ldr	r0, [r2, #0]
   10c9c:	6018      	str	r0, [r3, #0]
   10c9e:	8892      	ldrh	r2, [r2, #4]
   10ca0:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   10ca2:	68fa      	ldr	r2, [r7, #12]
   10ca4:	68bb      	ldr	r3, [r7, #8]
   10ca6:	3344      	adds	r3, #68	; 0x44
   10ca8:	6818      	ldr	r0, [r3, #0]
   10caa:	6010      	str	r0, [r2, #0]
   10cac:	889b      	ldrh	r3, [r3, #4]
   10cae:	8093      	strh	r3, [r2, #4]
}
   10cb0:	68f8      	ldr	r0, [r7, #12]
   10cb2:	3714      	adds	r7, #20
   10cb4:	46bd      	mov	sp, r7
   10cb6:	bd90      	pop	{r4, r7, pc}
   10cb8:	00011ce9 	.word	0x00011ce9
   10cbc:	00011abd 	.word	0x00011abd

00010cc0 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   10cc0:	b580      	push	{r7, lr}
   10cc2:	b082      	sub	sp, #8
   10cc4:	af00      	add	r7, sp, #0
   10cc6:	6078      	str	r0, [r7, #4]
   10cc8:	460b      	mov	r3, r1
   10cca:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10ccc:	687b      	ldr	r3, [r7, #4]
   10cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10cd0:	4618      	mov	r0, r3
   10cd2:	4b19      	ldr	r3, [pc, #100]	; (10d38 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   10cd4:	4798      	blx	r3
   10cd6:	4603      	mov	r3, r0
   10cd8:	461a      	mov	r2, r3
   10cda:	687b      	ldr	r3, [r7, #4]
   10cdc:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
   10ce0:	78fb      	ldrb	r3, [r7, #3]
   10ce2:	2b00      	cmp	r3, #0
   10ce4:	d006      	beq.n	10cf4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   10ce6:	687b      	ldr	r3, [r7, #4]
   10ce8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10cec:	f043 0301 	orr.w	r3, r3, #1
   10cf0:	b2db      	uxtb	r3, r3
   10cf2:	e005      	b.n	10d00 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   10cf4:	687b      	ldr	r3, [r7, #4]
   10cf6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10cfa:	f023 0301 	bic.w	r3, r3, #1
   10cfe:	b2db      	uxtb	r3, r3
   10d00:	687a      	ldr	r2, [r7, #4]
   10d02:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
   10d06:	687b      	ldr	r3, [r7, #4]
   10d08:	78fa      	ldrb	r2, [r7, #3]
   10d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
   10d0e:	687b      	ldr	r3, [r7, #4]
   10d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   10d12:	687b      	ldr	r3, [r7, #4]
   10d14:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10d18:	4619      	mov	r1, r3
   10d1a:	4610      	mov	r0, r2
   10d1c:	4b07      	ldr	r3, [pc, #28]	; (10d3c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   10d1e:	4798      	blx	r3
   10d20:	4603      	mov	r3, r0
   10d22:	461a      	mov	r2, r3
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   10d2a:	687b      	ldr	r3, [r7, #4]
   10d2c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   10d30:	4618      	mov	r0, r3
   10d32:	3708      	adds	r7, #8
   10d34:	46bd      	mov	sp, r7
   10d36:	bd80      	pop	{r7, pc}
   10d38:	00011ce9 	.word	0x00011ce9
   10d3c:	00011d6d 	.word	0x00011d6d

00010d40 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   10d40:	b580      	push	{r7, lr}
   10d42:	b082      	sub	sp, #8
   10d44:	af00      	add	r7, sp, #0
   10d46:	6078      	str	r0, [r7, #4]
   10d48:	460b      	mov	r3, r1
   10d4a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10d4c:	687b      	ldr	r3, [r7, #4]
   10d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10d50:	4618      	mov	r0, r3
   10d52:	4b17      	ldr	r3, [pc, #92]	; (10db0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   10d54:	4798      	blx	r3
   10d56:	4603      	mov	r3, r0
   10d58:	461a      	mov	r2, r3
   10d5a:	687b      	ldr	r3, [r7, #4]
   10d5c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
   10d60:	78fb      	ldrb	r3, [r7, #3]
   10d62:	2b00      	cmp	r3, #0
   10d64:	d006      	beq.n	10d74 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   10d66:	687b      	ldr	r3, [r7, #4]
   10d68:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10d6c:	f043 0320 	orr.w	r3, r3, #32
   10d70:	b2db      	uxtb	r3, r3
   10d72:	e005      	b.n	10d80 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   10d74:	687b      	ldr	r3, [r7, #4]
   10d76:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10d7a:	f023 0320 	bic.w	r3, r3, #32
   10d7e:	b2db      	uxtb	r3, r3
   10d80:	687a      	ldr	r2, [r7, #4]
   10d82:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   10d86:	687b      	ldr	r3, [r7, #4]
   10d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   10d8a:	687b      	ldr	r3, [r7, #4]
   10d8c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10d90:	4619      	mov	r1, r3
   10d92:	4610      	mov	r0, r2
   10d94:	4b07      	ldr	r3, [pc, #28]	; (10db4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   10d96:	4798      	blx	r3
   10d98:	4603      	mov	r3, r0
   10d9a:	461a      	mov	r2, r3
   10d9c:	687b      	ldr	r3, [r7, #4]
   10d9e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   10da2:	687b      	ldr	r3, [r7, #4]
   10da4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   10da8:	4618      	mov	r0, r3
   10daa:	3708      	adds	r7, #8
   10dac:	46bd      	mov	sp, r7
   10dae:	bd80      	pop	{r7, pc}
   10db0:	00011ce9 	.word	0x00011ce9
   10db4:	00011d6d 	.word	0x00011d6d

00010db8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   10db8:	b580      	push	{r7, lr}
   10dba:	b082      	sub	sp, #8
   10dbc:	af00      	add	r7, sp, #0
   10dbe:	6078      	str	r0, [r7, #4]
   10dc0:	460b      	mov	r3, r1
   10dc2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10dc4:	687b      	ldr	r3, [r7, #4]
   10dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10dc8:	4618      	mov	r0, r3
   10dca:	4b17      	ldr	r3, [pc, #92]	; (10e28 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   10dcc:	4798      	blx	r3
   10dce:	4603      	mov	r3, r0
   10dd0:	461a      	mov	r2, r3
   10dd2:	687b      	ldr	r3, [r7, #4]
   10dd4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
   10dd8:	78fb      	ldrb	r3, [r7, #3]
   10dda:	2b00      	cmp	r3, #0
   10ddc:	d006      	beq.n	10dec <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   10dde:	687b      	ldr	r3, [r7, #4]
   10de0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10de8:	b2db      	uxtb	r3, r3
   10dea:	e005      	b.n	10df8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   10dec:	687b      	ldr	r3, [r7, #4]
   10dee:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   10df6:	b2db      	uxtb	r3, r3
   10df8:	687a      	ldr	r2, [r7, #4]
   10dfa:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   10dfe:	687b      	ldr	r3, [r7, #4]
   10e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   10e02:	687b      	ldr	r3, [r7, #4]
   10e04:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10e08:	4619      	mov	r1, r3
   10e0a:	4610      	mov	r0, r2
   10e0c:	4b07      	ldr	r3, [pc, #28]	; (10e2c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   10e0e:	4798      	blx	r3
   10e10:	4603      	mov	r3, r0
   10e12:	461a      	mov	r2, r3
   10e14:	687b      	ldr	r3, [r7, #4]
   10e16:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   10e1a:	687b      	ldr	r3, [r7, #4]
   10e1c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   10e20:	4618      	mov	r0, r3
   10e22:	3708      	adds	r7, #8
   10e24:	46bd      	mov	sp, r7
   10e26:	bd80      	pop	{r7, pc}
   10e28:	00011ce9 	.word	0x00011ce9
   10e2c:	00011d6d 	.word	0x00011d6d

00010e30 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   10e30:	b580      	push	{r7, lr}
   10e32:	b082      	sub	sp, #8
   10e34:	af00      	add	r7, sp, #0
   10e36:	6078      	str	r0, [r7, #4]
   10e38:	460b      	mov	r3, r1
   10e3a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10e3c:	687b      	ldr	r3, [r7, #4]
   10e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10e40:	4618      	mov	r0, r3
   10e42:	4b17      	ldr	r3, [pc, #92]	; (10ea0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   10e44:	4798      	blx	r3
   10e46:	4603      	mov	r3, r0
   10e48:	461a      	mov	r2, r3
   10e4a:	687b      	ldr	r3, [r7, #4]
   10e4c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
   10e50:	78fb      	ldrb	r3, [r7, #3]
   10e52:	2b00      	cmp	r3, #0
   10e54:	d006      	beq.n	10e64 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   10e56:	687b      	ldr	r3, [r7, #4]
   10e58:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10e5c:	f043 0304 	orr.w	r3, r3, #4
   10e60:	b2db      	uxtb	r3, r3
   10e62:	e005      	b.n	10e70 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   10e64:	687b      	ldr	r3, [r7, #4]
   10e66:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10e6a:	f023 0304 	bic.w	r3, r3, #4
   10e6e:	b2db      	uxtb	r3, r3
   10e70:	687a      	ldr	r2, [r7, #4]
   10e72:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   10e76:	687b      	ldr	r3, [r7, #4]
   10e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   10e7a:	687b      	ldr	r3, [r7, #4]
   10e7c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10e80:	4619      	mov	r1, r3
   10e82:	4610      	mov	r0, r2
   10e84:	4b07      	ldr	r3, [pc, #28]	; (10ea4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   10e86:	4798      	blx	r3
   10e88:	4603      	mov	r3, r0
   10e8a:	461a      	mov	r2, r3
   10e8c:	687b      	ldr	r3, [r7, #4]
   10e8e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   10e92:	687b      	ldr	r3, [r7, #4]
   10e94:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   10e98:	4618      	mov	r0, r3
   10e9a:	3708      	adds	r7, #8
   10e9c:	46bd      	mov	sp, r7
   10e9e:	bd80      	pop	{r7, pc}
   10ea0:	00011ce9 	.word	0x00011ce9
   10ea4:	00011d6d 	.word	0x00011d6d

00010ea8 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   10ea8:	b580      	push	{r7, lr}
   10eaa:	b082      	sub	sp, #8
   10eac:	af00      	add	r7, sp, #0
   10eae:	6078      	str	r0, [r7, #4]
   10eb0:	460b      	mov	r3, r1
   10eb2:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   10eb4:	687b      	ldr	r3, [r7, #4]
   10eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10eb8:	78fa      	ldrb	r2, [r7, #3]
   10eba:	4611      	mov	r1, r2
   10ebc:	4618      	mov	r0, r3
   10ebe:	4b07      	ldr	r3, [pc, #28]	; (10edc <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   10ec0:	4798      	blx	r3
   10ec2:	4603      	mov	r3, r0
   10ec4:	461a      	mov	r2, r3
   10ec6:	687b      	ldr	r3, [r7, #4]
   10ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   10ecc:	687b      	ldr	r3, [r7, #4]
   10ece:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
   10ed2:	4618      	mov	r0, r3
   10ed4:	3708      	adds	r7, #8
   10ed6:	46bd      	mov	sp, r7
   10ed8:	bd80      	pop	{r7, pc}
   10eda:	bf00      	nop
   10edc:	00011d6d 	.word	0x00011d6d

00010ee0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   10ee0:	b580      	push	{r7, lr}
   10ee2:	b082      	sub	sp, #8
   10ee4:	af00      	add	r7, sp, #0
   10ee6:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   10ee8:	687b      	ldr	r3, [r7, #4]
   10eea:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   10eee:	687b      	ldr	r3, [r7, #4]
   10ef0:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   10ef4:	687b      	ldr	r3, [r7, #4]
   10ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10ef8:	4618      	mov	r0, r3
   10efa:	4b18      	ldr	r3, [pc, #96]	; (10f5c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   10efc:	4798      	blx	r3
   10efe:	4603      	mov	r3, r0
   10f00:	461a      	mov	r2, r3
   10f02:	687b      	ldr	r3, [r7, #4]
   10f04:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   10f0e:	2bda      	cmp	r3, #218	; 0xda
   10f10:	dd04      	ble.n	10f1c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   10f12:	687b      	ldr	r3, [r7, #4]
   10f14:	2203      	movs	r2, #3
   10f16:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   10f1a:	e017      	b.n	10f4c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   10f1c:	687b      	ldr	r3, [r7, #4]
   10f1e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   10f22:	2b6d      	cmp	r3, #109	; 0x6d
   10f24:	dd04      	ble.n	10f30 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   10f26:	687b      	ldr	r3, [r7, #4]
   10f28:	2202      	movs	r2, #2
   10f2a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   10f2e:	e00d      	b.n	10f4c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   10f30:	687b      	ldr	r3, [r7, #4]
   10f32:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   10f36:	2b36      	cmp	r3, #54	; 0x36
   10f38:	dd04      	ble.n	10f44 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   10f3a:	687b      	ldr	r3, [r7, #4]
   10f3c:	2201      	movs	r2, #1
   10f3e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   10f42:	e003      	b.n	10f4c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   10f44:	687b      	ldr	r3, [r7, #4]
   10f46:	2200      	movs	r2, #0
   10f48:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
   10f4c:	687b      	ldr	r3, [r7, #4]
   10f4e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
   10f52:	4618      	mov	r0, r3
   10f54:	3708      	adds	r7, #8
   10f56:	46bd      	mov	sp, r7
   10f58:	bd80      	pop	{r7, pc}
   10f5a:	bf00      	nop
   10f5c:	00011ce9 	.word	0x00011ce9

00010f60 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10f60:	b590      	push	{r4, r7, lr}
   10f62:	b083      	sub	sp, #12
   10f64:	af00      	add	r7, sp, #0
   10f66:	6078      	str	r0, [r7, #4]
   10f68:	4c05      	ldr	r4, [pc, #20]	; (10f80 <__tcf_0+0x20>)
   10f6a:	4b06      	ldr	r3, [pc, #24]	; (10f84 <__tcf_0+0x24>)
   10f6c:	429c      	cmp	r4, r3
   10f6e:	d004      	beq.n	10f7a <__tcf_0+0x1a>
   10f70:	3c1c      	subs	r4, #28
   10f72:	4620      	mov	r0, r4
   10f74:	4b04      	ldr	r3, [pc, #16]	; (10f88 <__tcf_0+0x28>)
   10f76:	4798      	blx	r3
   10f78:	e7f7      	b.n	10f6a <__tcf_0+0xa>
   10f7a:	370c      	adds	r7, #12
   10f7c:	46bd      	mov	sp, r7
   10f7e:	bd90      	pop	{r4, r7, pc}
   10f80:	20002394 	.word	0x20002394
   10f84:	200022b4 	.word	0x200022b4
   10f88:	00011bf1 	.word	0x00011bf1

00010f8c <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   10f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f90:	b082      	sub	sp, #8
   10f92:	af00      	add	r7, sp, #0
   10f94:	6078      	str	r0, [r7, #4]
   10f96:	6039      	str	r1, [r7, #0]
   10f98:	687b      	ldr	r3, [r7, #4]
   10f9a:	2b01      	cmp	r3, #1
   10f9c:	d16e      	bne.n	1107c <_Z41__static_initialization_and_destruction_0ii+0xf0>
   10f9e:	683b      	ldr	r3, [r7, #0]
   10fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10fa4:	4293      	cmp	r3, r2
   10fa6:	d169      	bne.n	1107c <_Z41__static_initialization_and_destruction_0ii+0xf0>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10fa8:	4937      	ldr	r1, [pc, #220]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10faa:	4838      	ldr	r0, [pc, #224]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10fac:	4b38      	ldr	r3, [pc, #224]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10fae:	4798      	blx	r3
   10fb0:	4a38      	ldr	r2, [pc, #224]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10fb2:	4939      	ldr	r1, [pc, #228]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10fb4:	4835      	ldr	r0, [pc, #212]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10fb6:	4b39      	ldr	r3, [pc, #228]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10fb8:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10fba:	4939      	ldr	r1, [pc, #228]	; (110a0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10fbc:	4839      	ldr	r0, [pc, #228]	; (110a4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10fbe:	4b34      	ldr	r3, [pc, #208]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10fc0:	4798      	blx	r3
   10fc2:	4a34      	ldr	r2, [pc, #208]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10fc4:	4934      	ldr	r1, [pc, #208]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10fc6:	4837      	ldr	r0, [pc, #220]	; (110a4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10fc8:	4b34      	ldr	r3, [pc, #208]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10fca:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10fcc:	4936      	ldr	r1, [pc, #216]	; (110a8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10fce:	4837      	ldr	r0, [pc, #220]	; (110ac <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10fd0:	4b2f      	ldr	r3, [pc, #188]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10fd2:	4798      	blx	r3
   10fd4:	4a2f      	ldr	r2, [pc, #188]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10fd6:	4930      	ldr	r1, [pc, #192]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10fd8:	4834      	ldr	r0, [pc, #208]	; (110ac <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10fda:	4b30      	ldr	r3, [pc, #192]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10fdc:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10fde:	4934      	ldr	r1, [pc, #208]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   10fe0:	4834      	ldr	r0, [pc, #208]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10fe2:	4b2b      	ldr	r3, [pc, #172]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10fe4:	4798      	blx	r3
   10fe6:	4a2b      	ldr	r2, [pc, #172]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10fe8:	492b      	ldr	r1, [pc, #172]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10fea:	4832      	ldr	r0, [pc, #200]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10fec:	4b2b      	ldr	r3, [pc, #172]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10fee:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10ff0:	4931      	ldr	r1, [pc, #196]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   10ff2:	4832      	ldr	r0, [pc, #200]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10ff4:	4b26      	ldr	r3, [pc, #152]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10ff6:	4798      	blx	r3
   10ff8:	4a26      	ldr	r2, [pc, #152]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ffa:	4927      	ldr	r1, [pc, #156]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ffc:	482f      	ldr	r0, [pc, #188]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10ffe:	4b27      	ldr	r3, [pc, #156]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11000:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11002:	492f      	ldr	r1, [pc, #188]	; (110c0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   11004:	482f      	ldr	r0, [pc, #188]	; (110c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   11006:	4b22      	ldr	r3, [pc, #136]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   11008:	4798      	blx	r3
   1100a:	4a22      	ldr	r2, [pc, #136]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1100c:	4922      	ldr	r1, [pc, #136]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   1100e:	482d      	ldr	r0, [pc, #180]	; (110c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   11010:	4b22      	ldr	r3, [pc, #136]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11012:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11014:	492c      	ldr	r1, [pc, #176]	; (110c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   11016:	482d      	ldr	r0, [pc, #180]	; (110cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
   11018:	4b1d      	ldr	r3, [pc, #116]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   1101a:	4798      	blx	r3
   1101c:	4a1d      	ldr	r2, [pc, #116]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1101e:	491e      	ldr	r1, [pc, #120]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   11020:	482a      	ldr	r0, [pc, #168]	; (110cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
   11022:	4b1e      	ldr	r3, [pc, #120]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11024:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   11026:	492a      	ldr	r1, [pc, #168]	; (110d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   11028:	482a      	ldr	r0, [pc, #168]	; (110d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   1102a:	4b19      	ldr	r3, [pc, #100]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   1102c:	4798      	blx	r3
   1102e:	4a19      	ldr	r2, [pc, #100]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   11030:	4919      	ldr	r1, [pc, #100]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   11032:	4828      	ldr	r0, [pc, #160]	; (110d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   11034:	4b19      	ldr	r3, [pc, #100]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11036:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   11038:	4927      	ldr	r1, [pc, #156]	; (110d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   1103a:	4828      	ldr	r0, [pc, #160]	; (110dc <_Z41__static_initialization_and_destruction_0ii+0x150>)
   1103c:	4b28      	ldr	r3, [pc, #160]	; (110e0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   1103e:	4798      	blx	r3
   11040:	4a14      	ldr	r2, [pc, #80]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   11042:	4928      	ldr	r1, [pc, #160]	; (110e4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   11044:	4825      	ldr	r0, [pc, #148]	; (110dc <_Z41__static_initialization_and_destruction_0ii+0x150>)
   11046:	4b15      	ldr	r3, [pc, #84]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11048:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   1104a:	4b27      	ldr	r3, [pc, #156]	; (110e8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   1104c:	2401      	movs	r4, #1
   1104e:	461e      	mov	r6, r3
   11050:	2c00      	cmp	r4, #0
   11052:	db0e      	blt.n	11072 <_Z41__static_initialization_and_destruction_0ii+0xe6>
   11054:	4633      	mov	r3, r6
   11056:	2503      	movs	r5, #3
   11058:	4698      	mov	r8, r3
   1105a:	2d00      	cmp	r5, #0
   1105c:	db06      	blt.n	1106c <_Z41__static_initialization_and_destruction_0ii+0xe0>
   1105e:	4640      	mov	r0, r8
   11060:	4b22      	ldr	r3, [pc, #136]	; (110ec <_Z41__static_initialization_and_destruction_0ii+0x160>)
   11062:	4798      	blx	r3
   11064:	f108 081c 	add.w	r8, r8, #28
   11068:	3d01      	subs	r5, #1
   1106a:	e7f6      	b.n	1105a <_Z41__static_initialization_and_destruction_0ii+0xce>
   1106c:	3670      	adds	r6, #112	; 0x70
   1106e:	3c01      	subs	r4, #1
   11070:	e7ee      	b.n	11050 <_Z41__static_initialization_and_destruction_0ii+0xc4>
   11072:	4a08      	ldr	r2, [pc, #32]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   11074:	491e      	ldr	r1, [pc, #120]	; (110f0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   11076:	2000      	movs	r0, #0
   11078:	4b08      	ldr	r3, [pc, #32]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1107a:	4798      	blx	r3
}
   1107c:	bf00      	nop
   1107e:	3708      	adds	r7, #8
   11080:	46bd      	mov	sp, r7
   11082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11086:	bf00      	nop
   11088:	20009f88 	.word	0x20009f88
   1108c:	20002198 	.word	0x20002198
   11090:	0000dd8d 	.word	0x0000dd8d
   11094:	20000000 	.word	0x20000000
   11098:	0000ddc5 	.word	0x0000ddc5
   1109c:	000135c5 	.word	0x000135c5
   110a0:	2000a01c 	.word	0x2000a01c
   110a4:	200021b8 	.word	0x200021b8
   110a8:	2000a140 	.word	0x2000a140
   110ac:	200021d8 	.word	0x200021d8
   110b0:	2000a03c 	.word	0x2000a03c
   110b4:	200021f8 	.word	0x200021f8
   110b8:	2000a100 	.word	0x2000a100
   110bc:	20002218 	.word	0x20002218
   110c0:	2000a120 	.word	0x2000a120
   110c4:	20002238 	.word	0x20002238
   110c8:	20009ff8 	.word	0x20009ff8
   110cc:	20002258 	.word	0x20002258
   110d0:	2000a098 	.word	0x2000a098
   110d4:	20002278 	.word	0x20002278
   110d8:	2000a05c 	.word	0x2000a05c
   110dc:	2000229c 	.word	0x2000229c
   110e0:	0000dc31 	.word	0x0000dc31
   110e4:	0000dc4d 	.word	0x0000dc4d
   110e8:	200022b4 	.word	0x200022b4
   110ec:	00011bdd 	.word	0x00011bdd
   110f0:	00010f61 	.word	0x00010f61

000110f4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   110f4:	b580      	push	{r7, lr}
   110f6:	af00      	add	r7, sp, #0
   110f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   110fc:	2001      	movs	r0, #1
   110fe:	4b01      	ldr	r3, [pc, #4]	; (11104 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   11100:	4798      	blx	r3
   11102:	bd80      	pop	{r7, pc}
   11104:	00010f8d 	.word	0x00010f8d

00011108 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   11108:	b480      	push	{r7}
   1110a:	b083      	sub	sp, #12
   1110c:	af00      	add	r7, sp, #0
   1110e:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   11110:	4a07      	ldr	r2, [pc, #28]	; (11130 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   11112:	687b      	ldr	r3, [r7, #4]
   11114:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   11116:	687b      	ldr	r3, [r7, #4]
   11118:	4a06      	ldr	r2, [pc, #24]	; (11134 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   1111a:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   1111c:	687b      	ldr	r3, [r7, #4]
   1111e:	2200      	movs	r2, #0
   11120:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   11122:	687b      	ldr	r3, [r7, #4]
   11124:	4618      	mov	r0, r3
   11126:	370c      	adds	r7, #12
   11128:	46bd      	mov	sp, r7
   1112a:	bc80      	pop	{r7}
   1112c:	4770      	bx	lr
   1112e:	bf00      	nop
   11130:	200023ac 	.word	0x200023ac
   11134:	20002394 	.word	0x20002394

00011138 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   11138:	b480      	push	{r7}
   1113a:	b083      	sub	sp, #12
   1113c:	af00      	add	r7, sp, #0
   1113e:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   11140:	687b      	ldr	r3, [r7, #4]
   11142:	4618      	mov	r0, r3
   11144:	370c      	adds	r7, #12
   11146:	46bd      	mov	sp, r7
   11148:	bc80      	pop	{r7}
   1114a:	4770      	bx	lr

0001114c <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
   1114c:	b580      	push	{r7, lr}
   1114e:	b084      	sub	sp, #16
   11150:	af00      	add	r7, sp, #0
   11152:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   11154:	687b      	ldr	r3, [r7, #4]
   11156:	68db      	ldr	r3, [r3, #12]
   11158:	4618      	mov	r0, r3
   1115a:	4b16      	ldr	r3, [pc, #88]	; (111b4 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   1115c:	4798      	blx	r3
   1115e:	4603      	mov	r3, r0
   11160:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   11162:	7bbb      	ldrb	r3, [r7, #14]
   11164:	f003 0301 	and.w	r3, r3, #1
   11168:	2b00      	cmp	r3, #0
   1116a:	bf14      	ite	ne
   1116c:	2301      	movne	r3, #1
   1116e:	2300      	moveq	r3, #0
   11170:	b2da      	uxtb	r2, r3
   11172:	687b      	ldr	r3, [r7, #4]
   11174:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   11176:	2300      	movs	r3, #0
   11178:	73fb      	strb	r3, [r7, #15]
   1117a:	7bfb      	ldrb	r3, [r7, #15]
   1117c:	2b03      	cmp	r3, #3
   1117e:	dc14      	bgt.n	111aa <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   11180:	7bfb      	ldrb	r3, [r7, #15]
   11182:	7bb9      	ldrb	r1, [r7, #14]
   11184:	7bfa      	ldrb	r2, [r7, #15]
   11186:	3201      	adds	r2, #1
   11188:	fa41 f202 	asr.w	r2, r1, r2
   1118c:	f002 0201 	and.w	r2, r2, #1
   11190:	2a00      	cmp	r2, #0
   11192:	bf14      	ite	ne
   11194:	2201      	movne	r2, #1
   11196:	2200      	moveq	r2, #0
   11198:	b2d1      	uxtb	r1, r2
   1119a:	687a      	ldr	r2, [r7, #4]
   1119c:	4413      	add	r3, r2
   1119e:	460a      	mov	r2, r1
   111a0:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   111a2:	7bfb      	ldrb	r3, [r7, #15]
   111a4:	3301      	adds	r3, #1
   111a6:	73fb      	strb	r3, [r7, #15]
   111a8:	e7e7      	b.n	1117a <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   111aa:	7bbb      	ldrb	r3, [r7, #14]
}
   111ac:	4618      	mov	r0, r3
   111ae:	3710      	adds	r7, #16
   111b0:	46bd      	mov	sp, r7
   111b2:	bd80      	pop	{r7, pc}
   111b4:	00011ce9 	.word	0x00011ce9

000111b8 <_ZN18SingleHeater_Class14ReadEnableGIPOEv>:

uint8_t	SingleHeater_Class::ReadEnableGIPO(void){
   111b8:	b580      	push	{r7, lr}
   111ba:	b084      	sub	sp, #16
   111bc:	af00      	add	r7, sp, #0
   111be:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[1]->ReadGPIORegister();
   111c0:	687b      	ldr	r3, [r7, #4]
   111c2:	691b      	ldr	r3, [r3, #16]
   111c4:	4618      	mov	r0, r3
   111c6:	4b11      	ldr	r3, [pc, #68]	; (1120c <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x54>)
   111c8:	4798      	blx	r3
   111ca:	4603      	mov	r3, r0
   111cc:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < 4; i++)
   111ce:	2300      	movs	r3, #0
   111d0:	73fb      	strb	r3, [r7, #15]
   111d2:	7bfb      	ldrb	r3, [r7, #15]
   111d4:	2b03      	cmp	r3, #3
   111d6:	dc13      	bgt.n	11200 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x48>
	{
		enables[i]=!(r&(0x01<<i));
   111d8:	7bfb      	ldrb	r3, [r7, #15]
   111da:	7bb9      	ldrb	r1, [r7, #14]
   111dc:	7bfa      	ldrb	r2, [r7, #15]
   111de:	fa41 f202 	asr.w	r2, r1, r2
   111e2:	f002 0201 	and.w	r2, r2, #1
   111e6:	2a00      	cmp	r2, #0
   111e8:	bf0c      	ite	eq
   111ea:	2201      	moveq	r2, #1
   111ec:	2200      	movne	r2, #0
   111ee:	b2d1      	uxtb	r1, r2
   111f0:	687a      	ldr	r2, [r7, #4]
   111f2:	4413      	add	r3, r2
   111f4:	460a      	mov	r2, r1
   111f6:	771a      	strb	r2, [r3, #28]
	for (uint8_t i = 0; i < 4; i++)
   111f8:	7bfb      	ldrb	r3, [r7, #15]
   111fa:	3301      	adds	r3, #1
   111fc:	73fb      	strb	r3, [r7, #15]
   111fe:	e7e8      	b.n	111d2 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x1a>
	}
	return r;
   11200:	7bbb      	ldrb	r3, [r7, #14]
}
   11202:	4618      	mov	r0, r3
   11204:	3710      	adds	r7, #16
   11206:	46bd      	mov	sp, r7
   11208:	bd80      	pop	{r7, pc}
   1120a:	bf00      	nop
   1120c:	00011ce9 	.word	0x00011ce9

00011210 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   11210:	b580      	push	{r7, lr}
   11212:	b082      	sub	sp, #8
   11214:	af00      	add	r7, sp, #0
   11216:	6078      	str	r0, [r7, #4]
   11218:	460b      	mov	r3, r1
   1121a:	70fb      	strb	r3, [r7, #3]
   1121c:	4613      	mov	r3, r2
   1121e:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   11220:	687b      	ldr	r3, [r7, #4]
   11222:	6918      	ldr	r0, [r3, #16]
   11224:	78bb      	ldrb	r3, [r7, #2]
   11226:	f083 0301 	eor.w	r3, r3, #1
   1122a:	b2da      	uxtb	r2, r3
   1122c:	78fb      	ldrb	r3, [r7, #3]
   1122e:	4619      	mov	r1, r3
   11230:	4b05      	ldr	r3, [pc, #20]	; (11248 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   11232:	4798      	blx	r3
   11234:	4603      	mov	r3, r0
   11236:	461a      	mov	r2, r3
   11238:	687b      	ldr	r3, [r7, #4]
   1123a:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   1123c:	687b      	ldr	r3, [r7, #4]
   1123e:	7adb      	ldrb	r3, [r3, #11]
}
   11240:	4618      	mov	r0, r3
   11242:	3708      	adds	r7, #8
   11244:	46bd      	mov	sp, r7
   11246:	bd80      	pop	{r7, pc}
   11248:	00011fa1 	.word	0x00011fa1

0001124c <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   1124c:	b590      	push	{r4, r7, lr}
   1124e:	b083      	sub	sp, #12
   11250:	af00      	add	r7, sp, #0
   11252:	6078      	str	r0, [r7, #4]
   11254:	4c05      	ldr	r4, [pc, #20]	; (1126c <__tcf_0+0x20>)
   11256:	4b06      	ldr	r3, [pc, #24]	; (11270 <__tcf_0+0x24>)
   11258:	429c      	cmp	r4, r3
   1125a:	d004      	beq.n	11266 <__tcf_0+0x1a>
   1125c:	3c1c      	subs	r4, #28
   1125e:	4620      	mov	r0, r4
   11260:	4b04      	ldr	r3, [pc, #16]	; (11274 <__tcf_0+0x28>)
   11262:	4798      	blx	r3
   11264:	e7f7      	b.n	11256 <__tcf_0+0xa>
   11266:	370c      	adds	r7, #12
   11268:	46bd      	mov	sp, r7
   1126a:	bd90      	pop	{r4, r7, pc}
   1126c:	200023e8 	.word	0x200023e8
   11270:	200023b0 	.word	0x200023b0
   11274:	00011bf1 	.word	0x00011bf1

00011278 <_Z41__static_initialization_and_destruction_0ii>:
	}
	
	return result;
}

   11278:	b5b0      	push	{r4, r5, r7, lr}
   1127a:	b082      	sub	sp, #8
   1127c:	af00      	add	r7, sp, #0
   1127e:	6078      	str	r0, [r7, #4]
   11280:	6039      	str	r1, [r7, #0]
   11282:	687b      	ldr	r3, [r7, #4]
   11284:	2b01      	cmp	r3, #1
   11286:	d125      	bne.n	112d4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   11288:	683b      	ldr	r3, [r7, #0]
   1128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1128e:	4293      	cmp	r3, r2
   11290:	d120      	bne.n	112d4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11292:	4912      	ldr	r1, [pc, #72]	; (112dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
   11294:	4812      	ldr	r0, [pc, #72]	; (112e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   11296:	4b13      	ldr	r3, [pc, #76]	; (112e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   11298:	4798      	blx	r3
   1129a:	4a13      	ldr	r2, [pc, #76]	; (112e8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   1129c:	4913      	ldr	r1, [pc, #76]	; (112ec <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1129e:	4810      	ldr	r0, [pc, #64]	; (112e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   112a0:	4b13      	ldr	r3, [pc, #76]	; (112f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   112a2:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   112a4:	4b13      	ldr	r3, [pc, #76]	; (112f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   112a6:	2401      	movs	r4, #1
   112a8:	461d      	mov	r5, r3
   112aa:	2c00      	cmp	r4, #0
   112ac:	db05      	blt.n	112ba <_Z41__static_initialization_and_destruction_0ii+0x42>
   112ae:	4628      	mov	r0, r5
   112b0:	4b11      	ldr	r3, [pc, #68]	; (112f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   112b2:	4798      	blx	r3
   112b4:	351c      	adds	r5, #28
   112b6:	3c01      	subs	r4, #1
   112b8:	e7f7      	b.n	112aa <_Z41__static_initialization_and_destruction_0ii+0x32>
   112ba:	4a0b      	ldr	r2, [pc, #44]	; (112e8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   112bc:	490f      	ldr	r1, [pc, #60]	; (112fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
   112be:	2000      	movs	r0, #0
   112c0:	4b0b      	ldr	r3, [pc, #44]	; (112f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   112c2:	4798      	blx	r3
   112c4:	480e      	ldr	r0, [pc, #56]	; (11300 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   112c6:	4b0f      	ldr	r3, [pc, #60]	; (11304 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   112c8:	4798      	blx	r3
   112ca:	4a07      	ldr	r2, [pc, #28]	; (112e8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   112cc:	490e      	ldr	r1, [pc, #56]	; (11308 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   112ce:	480c      	ldr	r0, [pc, #48]	; (11300 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   112d0:	4b07      	ldr	r3, [pc, #28]	; (112f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   112d2:	4798      	blx	r3
   112d4:	bf00      	nop
   112d6:	3708      	adds	r7, #8
   112d8:	46bd      	mov	sp, r7
   112da:	bdb0      	pop	{r4, r5, r7, pc}
   112dc:	2000a0b8 	.word	0x2000a0b8
   112e0:	20002394 	.word	0x20002394
   112e4:	0000dc31 	.word	0x0000dc31
   112e8:	20000000 	.word	0x20000000
   112ec:	0000dc4d 	.word	0x0000dc4d
   112f0:	000135c5 	.word	0x000135c5
   112f4:	200023b0 	.word	0x200023b0
   112f8:	00011bdd 	.word	0x00011bdd
   112fc:	0001124d 	.word	0x0001124d
   11300:	200023e8 	.word	0x200023e8
   11304:	00011109 	.word	0x00011109
   11308:	00011139 	.word	0x00011139

0001130c <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   1130c:	b580      	push	{r7, lr}
   1130e:	af00      	add	r7, sp, #0
   11310:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11314:	2001      	movs	r0, #1
   11316:	4b01      	ldr	r3, [pc, #4]	; (1131c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   11318:	4798      	blx	r3
   1131a:	bd80      	pop	{r7, pc}
   1131c:	00011279 	.word	0x00011279

00011320 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   11320:	4770      	bx	lr

00011322 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   11322:	4770      	bx	lr

00011324 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   11324:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   11326:	2302      	movs	r3, #2
   11328:	4801      	ldr	r0, [pc, #4]	; (11330 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   1132a:	4c02      	ldr	r4, [pc, #8]	; (11334 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   1132c:	47a0      	blx	r4
	return	r;
}
   1132e:	bd10      	pop	{r4, pc}
   11330:	20009d58 	.word	0x20009d58
   11334:	000132ed 	.word	0x000132ed

00011338 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   11338:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   1133a:	4b03      	ldr	r3, [pc, #12]	; (11348 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   1133c:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   1133e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11342:	4b02      	ldr	r3, [pc, #8]	; (1134c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   11344:	4798      	blx	r3
}
   11346:	bd08      	pop	{r3, pc}
   11348:	2000240c 	.word	0x2000240c
   1134c:	00011325 	.word	0x00011325

00011350 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   11350:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   11352:	2302      	movs	r3, #2
   11354:	4801      	ldr	r0, [pc, #4]	; (1135c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   11356:	4c02      	ldr	r4, [pc, #8]	; (11360 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   11358:	47a0      	blx	r4
	return	w;
}
   1135a:	bd10      	pop	{r4, pc}
   1135c:	20009d58 	.word	0x20009d58
   11360:	000132b9 	.word	0x000132b9

00011364 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   11364:	b500      	push	{lr}
   11366:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   11368:	4b07      	ldr	r3, [pc, #28]	; (11388 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   1136a:	881b      	ldrh	r3, [r3, #0]
   1136c:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   11370:	4b06      	ldr	r3, [pc, #24]	; (1138c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   11372:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   11374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11378:	3202      	adds	r2, #2
   1137a:	a901      	add	r1, sp, #4
   1137c:	4b04      	ldr	r3, [pc, #16]	; (11390 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   1137e:	4798      	blx	r3
	return	w;
}
   11380:	b003      	add	sp, #12
   11382:	f85d fb04 	ldr.w	pc, [sp], #4
   11386:	bf00      	nop
   11388:	0001446c 	.word	0x0001446c
   1138c:	2000240c 	.word	0x2000240c
   11390:	00011351 	.word	0x00011351

00011394 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   11394:	b510      	push	{r4, lr}
   11396:	4604      	mov	r4, r0
   11398:	30b8      	adds	r0, #184	; 0xb8
   1139a:	4b03      	ldr	r3, [pc, #12]	; (113a8 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   1139c:	4798      	blx	r3
   1139e:	4620      	mov	r0, r4
   113a0:	4b02      	ldr	r3, [pc, #8]	; (113ac <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   113a2:	4798      	blx	r3
{
} //~MemoryManagment_Class
   113a4:	4620      	mov	r0, r4
   113a6:	bd10      	pop	{r4, pc}
   113a8:	000115b7 	.word	0x000115b7
   113ac:	00011323 	.word	0x00011323

000113b0 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   113b0:	b538      	push	{r3, r4, r5, lr}
   113b2:	4604      	mov	r4, r0
   113b4:	4b14      	ldr	r3, [pc, #80]	; (11408 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   113b6:	4798      	blx	r3
   113b8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   113bc:	4b13      	ldr	r3, [pc, #76]	; (1140c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   113be:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   113c0:	f44f 7500 	mov.w	r5, #512	; 0x200
   113c4:	462a      	mov	r2, r5
   113c6:	2100      	movs	r1, #0
   113c8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   113cc:	4b10      	ldr	r3, [pc, #64]	; (11410 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   113ce:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   113d0:	2300      	movs	r3, #0
   113d2:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   113d6:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   113da:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   113de:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   113e2:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   113e6:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   113ea:	4a0a      	ldr	r2, [pc, #40]	; (11414 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   113ec:	f246 33b4 	movw	r3, #25524	; 0x63b4
   113f0:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   113f2:	4b09      	ldr	r3, [pc, #36]	; (11418 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
   113fa:	332c      	adds	r3, #44	; 0x2c
   113fc:	f246 32b8 	movw	r2, #25528	; 0x63b8
   11400:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
   11402:	4620      	mov	r0, r4
   11404:	bd38      	pop	{r3, r4, r5, pc}
   11406:	bf00      	nop
   11408:	00011321 	.word	0x00011321
   1140c:	000115b5 	.word	0x000115b5
   11410:	00013c79 	.word	0x00013c79
   11414:	20002410 	.word	0x20002410
   11418:	2000240c 	.word	0x2000240c

0001141c <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   1141c:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   1141e:	480b      	ldr	r0, [pc, #44]	; (1144c <_ZN17MemoryFlash_Class4InitEm+0x30>)
   11420:	4b0b      	ldr	r3, [pc, #44]	; (11450 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   11422:	4798      	blx	r3
   11424:	b948      	cbnz	r0, 1143a <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   11426:	4d0b      	ldr	r5, [pc, #44]	; (11454 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   11428:	490b      	ldr	r1, [pc, #44]	; (11458 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   1142a:	4628      	mov	r0, r5
   1142c:	4c0b      	ldr	r4, [pc, #44]	; (1145c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   1142e:	47a0      	blx	r4
   11430:	490b      	ldr	r1, [pc, #44]	; (11460 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   11432:	4628      	mov	r0, r5
   11434:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   11436:	2001      	movs	r0, #1
   11438:	bd38      	pop	{r3, r4, r5, pc}
   1143a:	4d06      	ldr	r5, [pc, #24]	; (11454 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   1143c:	4909      	ldr	r1, [pc, #36]	; (11464 <_ZN17MemoryFlash_Class4InitEm+0x48>)
   1143e:	4628      	mov	r0, r5
   11440:	4c06      	ldr	r4, [pc, #24]	; (1145c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   11442:	47a0      	blx	r4
   11444:	4906      	ldr	r1, [pc, #24]	; (11460 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   11446:	4628      	mov	r0, r5
   11448:	47a0      	blx	r4
   1144a:	e7f4      	b.n	11436 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   1144c:	20009d58 	.word	0x20009d58
   11450:	0001321d 	.word	0x0001321d
   11454:	200018a4 	.word	0x200018a4
   11458:	00014400 	.word	0x00014400
   1145c:	0000ea59 	.word	0x0000ea59
   11460:	000143fc 	.word	0x000143fc
   11464:	000143dc 	.word	0x000143dc

00011468 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   11468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1146a:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   1146c:	4b10      	ldr	r3, [pc, #64]	; (114b0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   1146e:	681c      	ldr	r4, [r3, #0]
   11470:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   11474:	f246 33b4 	movw	r3, #25524	; 0x63b4
   11478:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1147e:	4622      	mov	r2, r4
   11480:	4629      	mov	r1, r5
   11482:	480c      	ldr	r0, [pc, #48]	; (114b4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   11484:	4e0c      	ldr	r6, [pc, #48]	; (114b8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   11486:	47b0      	blx	r6
	  if (r==0)
   11488:	4603      	mov	r3, r0
   1148a:	b108      	cbz	r0, 11490 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   1148c:	4618      	mov	r0, r3
   1148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   11490:	883b      	ldrh	r3, [r7, #0]
   11492:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   11494:	4e07      	ldr	r6, [pc, #28]	; (114b4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   11496:	4621      	mov	r1, r4
   11498:	4630      	mov	r0, r6
   1149a:	4b08      	ldr	r3, [pc, #32]	; (114bc <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   1149c:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   114a2:	4622      	mov	r2, r4
   114a4:	4629      	mov	r1, r5
   114a6:	4630      	mov	r0, r6
   114a8:	4c05      	ldr	r4, [pc, #20]	; (114c0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   114aa:	47a0      	blx	r4
   114ac:	4603      	mov	r3, r0
		  return	w;
   114ae:	e7ed      	b.n	1148c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   114b0:	2000240c 	.word	0x2000240c
   114b4:	20009d58 	.word	0x20009d58
   114b8:	000132ed 	.word	0x000132ed
   114bc:	00013289 	.word	0x00013289
   114c0:	000132b9 	.word	0x000132b9

000114c4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   114c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   114c8:	4c2b      	ldr	r4, [pc, #172]	; (11578 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   114ca:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   114ce:	492b      	ldr	r1, [pc, #172]	; (1157c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   114d0:	4628      	mov	r0, r5
   114d2:	4f2b      	ldr	r7, [pc, #172]	; (11580 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   114d4:	47b8      	blx	r7
   114d6:	4e2b      	ldr	r6, [pc, #172]	; (11584 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   114d8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 115b0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   114dc:	4632      	mov	r2, r6
   114de:	4641      	mov	r1, r8
   114e0:	4628      	mov	r0, r5
   114e2:	4d29      	ldr	r5, [pc, #164]	; (11588 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   114e4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   114e6:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   114ea:	4928      	ldr	r1, [pc, #160]	; (1158c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   114ec:	4648      	mov	r0, r9
   114ee:	47b8      	blx	r7
   114f0:	4632      	mov	r2, r6
   114f2:	4641      	mov	r1, r8
   114f4:	4648      	mov	r0, r9
   114f6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   114f8:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   114fc:	4924      	ldr	r1, [pc, #144]	; (11590 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   114fe:	4648      	mov	r0, r9
   11500:	47b8      	blx	r7
   11502:	4632      	mov	r2, r6
   11504:	4641      	mov	r1, r8
   11506:	4648      	mov	r0, r9
   11508:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1150a:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   1150e:	4921      	ldr	r1, [pc, #132]	; (11594 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   11510:	4648      	mov	r0, r9
   11512:	47b8      	blx	r7
   11514:	4632      	mov	r2, r6
   11516:	4641      	mov	r1, r8
   11518:	4648      	mov	r0, r9
   1151a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1151c:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   11520:	491d      	ldr	r1, [pc, #116]	; (11598 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   11522:	4648      	mov	r0, r9
   11524:	47b8      	blx	r7
   11526:	4632      	mov	r2, r6
   11528:	4641      	mov	r1, r8
   1152a:	4648      	mov	r0, r9
   1152c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1152e:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   11532:	491a      	ldr	r1, [pc, #104]	; (1159c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   11534:	4648      	mov	r0, r9
   11536:	47b8      	blx	r7
   11538:	4632      	mov	r2, r6
   1153a:	4641      	mov	r1, r8
   1153c:	4648      	mov	r0, r9
   1153e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11540:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   11544:	4916      	ldr	r1, [pc, #88]	; (115a0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   11546:	4648      	mov	r0, r9
   11548:	47b8      	blx	r7
   1154a:	4632      	mov	r2, r6
   1154c:	4641      	mov	r1, r8
   1154e:	4648      	mov	r0, r9
   11550:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   11552:	f1a4 0918 	sub.w	r9, r4, #24
   11556:	4913      	ldr	r1, [pc, #76]	; (115a4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   11558:	4648      	mov	r0, r9
   1155a:	47b8      	blx	r7
   1155c:	4632      	mov	r2, r6
   1155e:	4641      	mov	r1, r8
   11560:	4648      	mov	r0, r9
   11562:	47a8      	blx	r5
   11564:	3408      	adds	r4, #8
   11566:	4620      	mov	r0, r4
   11568:	4b0f      	ldr	r3, [pc, #60]	; (115a8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   1156a:	4798      	blx	r3
   1156c:	4632      	mov	r2, r6
   1156e:	490f      	ldr	r1, [pc, #60]	; (115ac <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   11570:	4620      	mov	r0, r4
   11572:	47a8      	blx	r5
   11574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11578:	20003508 	.word	0x20003508
   1157c:	20009f88 	.word	0x20009f88
   11580:	0000dd8d 	.word	0x0000dd8d
   11584:	20000000 	.word	0x20000000
   11588:	000135c5 	.word	0x000135c5
   1158c:	2000a01c 	.word	0x2000a01c
   11590:	2000a140 	.word	0x2000a140
   11594:	2000a03c 	.word	0x2000a03c
   11598:	2000a100 	.word	0x2000a100
   1159c:	2000a120 	.word	0x2000a120
   115a0:	20009ff8 	.word	0x20009ff8
   115a4:	2000a098 	.word	0x2000a098
   115a8:	000113b1 	.word	0x000113b1
   115ac:	00011395 	.word	0x00011395
   115b0:	0000ddc5 	.word	0x0000ddc5

000115b4 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   115b4:	4770      	bx	lr

000115b6 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   115b6:	4770      	bx	lr

000115b8 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   115b8:	4b03      	ldr	r3, [pc, #12]	; (115c8 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   115ba:	681b      	ldr	r3, [r3, #0]
   115bc:	2201      	movs	r2, #1
   115be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   115c2:	bf00      	nop
   115c4:	4770      	bx	lr
   115c6:	bf00      	nop
   115c8:	200098cc 	.word	0x200098cc

000115cc <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   115cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115ce:	4607      	mov	r7, r0
   115d0:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   115d4:	d007      	beq.n	115e6 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   115d6:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   115da:	4e05      	ldr	r6, [pc, #20]	; (115f0 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   115dc:	3c68      	subs	r4, #104	; 0x68
   115de:	4620      	mov	r0, r4
   115e0:	47b0      	blx	r6
   115e2:	42a5      	cmp	r5, r4
   115e4:	d1fa      	bne.n	115dc <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   115e6:	4638      	mov	r0, r7
   115e8:	4b02      	ldr	r3, [pc, #8]	; (115f4 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   115ea:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   115ec:	4638      	mov	r0, r7
   115ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115f0:	000120ad 	.word	0x000120ad
   115f4:	000120ad 	.word	0x000120ad

000115f8 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   115f8:	4b06      	ldr	r3, [pc, #24]	; (11614 <_ZL15Converter1Readyv+0x1c>)
   115fa:	681b      	ldr	r3, [r3, #0]
   115fc:	2201      	movs	r2, #1
   115fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   11602:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   11606:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   1160a:	2200      	movs	r2, #0
   1160c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11610:	4770      	bx	lr
   11612:	bf00      	nop
   11614:	200098cc 	.word	0x200098cc

00011618 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   11618:	4b06      	ldr	r3, [pc, #24]	; (11634 <_ZL15Converter2Readyv+0x1c>)
   1161a:	681b      	ldr	r3, [r3, #0]
   1161c:	2201      	movs	r2, #1
   1161e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   11622:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   11626:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   1162a:	2200      	movs	r2, #0
   1162c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11630:	4770      	bx	lr
   11632:	bf00      	nop
   11634:	200098cc 	.word	0x200098cc

00011638 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   11638:	4b06      	ldr	r3, [pc, #24]	; (11654 <_ZL15Converter3Readyv+0x1c>)
   1163a:	681b      	ldr	r3, [r3, #0]
   1163c:	2201      	movs	r2, #1
   1163e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   11642:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   11646:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   1164a:	2200      	movs	r2, #0
   1164c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11650:	4770      	bx	lr
   11652:	bf00      	nop
   11654:	200098cc 	.word	0x200098cc

00011658 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   11658:	b570      	push	{r4, r5, r6, lr}
   1165a:	4604      	mov	r4, r0
   1165c:	460e      	mov	r6, r1
   1165e:	4b0a      	ldr	r3, [pc, #40]	; (11688 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   11660:	4798      	blx	r3
   11662:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   11666:	4d09      	ldr	r5, [pc, #36]	; (1168c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   11668:	47a8      	blx	r5
   1166a:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1166e:	47a8      	blx	r5
   11670:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   11674:	47a8      	blx	r5
		spiLite=&ltSPI;
   11676:	4b06      	ldr	r3, [pc, #24]	; (11690 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   11678:	1d1a      	adds	r2, r3, #4
   1167a:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   1167e:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   11680:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   11684:	4620      	mov	r0, r4
   11686:	bd70      	pop	{r4, r5, r6, pc}
   11688:	00012099 	.word	0x00012099
   1168c:	00012099 	.word	0x00012099
   11690:	200098cc 	.word	0x200098cc

00011694 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   11694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11698:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1169a:	233d      	movs	r3, #61	; 0x3d
   1169c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   116a0:	231b      	movs	r3, #27
   116a2:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   116a6:	2327      	movs	r3, #39	; 0x27
   116a8:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   116ac:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   116b0:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   116b4:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   116b8:	4f06      	ldr	r7, [pc, #24]	; (116d4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   116ba:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   116be:	f856 1b04 	ldr.w	r1, [r6], #4
   116c2:	4628      	mov	r0, r5
   116c4:	47b8      	blx	r7
   116c6:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   116c8:	4546      	cmp	r6, r8
   116ca:	d1f6      	bne.n	116ba <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   116cc:	2001      	movs	r0, #1
   116ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116d2:	bf00      	nop
   116d4:	000120c1 	.word	0x000120c1

000116d8 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   116d8:	b538      	push	{r3, r4, r5, lr}
   116da:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   116dc:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   116e0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   116e4:	4b16      	ldr	r3, [pc, #88]	; (11740 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   116e6:	4798      	blx	r3
	spiLite->init();
   116e8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   116ec:	4b15      	ldr	r3, [pc, #84]	; (11744 <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   116ee:	4798      	blx	r3
	ptrTemperaturesClass=this;
   116f0:	4b15      	ldr	r3, [pc, #84]	; (11748 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   116f2:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   116f4:	4915      	ldr	r1, [pc, #84]	; (1174c <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   116f6:	2028      	movs	r0, #40	; 0x28
   116f8:	4d15      	ldr	r5, [pc, #84]	; (11750 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   116fa:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   116fc:	4915      	ldr	r1, [pc, #84]	; (11754 <_ZN24TemperatureSensors_Class4InitEv+0x7c>)
   116fe:	2029      	movs	r0, #41	; 0x29
   11700:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   11702:	4915      	ldr	r1, [pc, #84]	; (11758 <_ZN24TemperatureSensors_Class4InitEv+0x80>)
   11704:	2021      	movs	r0, #33	; 0x21
   11706:	47a8      	blx	r5
	InitModules();
   11708:	4620      	mov	r0, r4
   1170a:	4b14      	ldr	r3, [pc, #80]	; (1175c <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   1170c:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   1170e:	2301      	movs	r3, #1
   11710:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   11714:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   11718:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   1171c:	2300      	movs	r3, #0
   1171e:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   11722:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   11726:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   1172a:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   1172e:	4013      	ands	r3, r2
   11730:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   11734:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   11736:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   1173a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   1173e:	bd38      	pop	{r3, r4, r5, pc}
   11740:	000129cd 	.word	0x000129cd
   11744:	00012971 	.word	0x00012971
   11748:	200098cc 	.word	0x200098cc
   1174c:	000115f9 	.word	0x000115f9
   11750:	00002b2d 	.word	0x00002b2d
   11754:	00011619 	.word	0x00011619
   11758:	00011639 	.word	0x00011639
   1175c:	00011695 	.word	0x00011695

00011760 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   11760:	b510      	push	{r4, lr}
   11762:	4604      	mov	r4, r0
	converterTimeout=false;
   11764:	2200      	movs	r2, #0
   11766:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   1176a:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   1176e:	4403      	add	r3, r0
   11770:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   11774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11778:	4907      	ldr	r1, [pc, #28]	; (11798 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   1177a:	4808      	ldr	r0, [pc, #32]	; (1179c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   1177c:	4b08      	ldr	r3, [pc, #32]	; (117a0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   1177e:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   11780:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   11784:	2368      	movs	r3, #104	; 0x68
   11786:	fb03 4000 	mla	r0, r3, r0, r4
   1178a:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   1178e:	30a8      	adds	r0, #168	; 0xa8
   11790:	4b04      	ldr	r3, [pc, #16]	; (117a4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   11792:	4798      	blx	r3
   11794:	bd10      	pop	{r4, pc}
   11796:	bf00      	nop
   11798:	000115b9 	.word	0x000115b9
   1179c:	200098e4 	.word	0x200098e4
   117a0:	0000e061 	.word	0x0000e061
   117a4:	000121b5 	.word	0x000121b5

000117a8 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   117a8:	b538      	push	{r3, r4, r5, lr}
   117aa:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   117ac:	491e      	ldr	r1, [pc, #120]	; (11828 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   117ae:	481f      	ldr	r0, [pc, #124]	; (1182c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   117b0:	4b1f      	ldr	r3, [pc, #124]	; (11830 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   117b2:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   117b4:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   117b8:	2568      	movs	r5, #104	; 0x68
   117ba:	fb05 4000 	mla	r0, r5, r0, r4
   117be:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   117c2:	30a8      	adds	r0, #168	; 0xa8
   117c4:	4b1b      	ldr	r3, [pc, #108]	; (11834 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   117c6:	4798      	blx	r3
   117c8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   117cc:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   117d0:	fb05 4502 	mla	r5, r5, r2, r4
   117d4:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   117d8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   117dc:	2b01      	cmp	r3, #1
   117de:	d00d      	beq.n	117fc <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   117e0:	4b15      	ldr	r3, [pc, #84]	; (11838 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   117e2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   117e6:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   117ea:	3301      	adds	r3, #1
   117ec:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   117ee:	2b04      	cmp	r3, #4
   117f0:	d00c      	beq.n	1180c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   117f2:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   117f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   117fa:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   117fc:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   11800:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   11808:	66d8      	str	r0, [r3, #108]	; 0x6c
   1180a:	e7ec      	b.n	117e6 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   1180c:	2300      	movs	r3, #0
   1180e:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   11812:	3201      	adds	r2, #1
   11814:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   11816:	2a03      	cmp	r2, #3
		currentModule++;
   11818:	bf12      	itee	ne
   1181a:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   1181e:	2300      	moveq	r3, #0
   11820:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   11824:	e7e7      	b.n	117f6 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   11826:	bf00      	nop
   11828:	000115b9 	.word	0x000115b9
   1182c:	200098e4 	.word	0x200098e4
   11830:	0000e009 	.word	0x0000e009
   11834:	000122bd 	.word	0x000122bd
   11838:	c479c000 	.word	0xc479c000

0001183c <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   1183c:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   11840:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   11844:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   11848:	4013      	ands	r3, r2
}
   1184a:	4018      	ands	r0, r3
   1184c:	4770      	bx	lr
	...

00011850 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   11850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11854:	4c30      	ldr	r4, [pc, #192]	; (11918 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc8>)
   11856:	f104 0518 	add.w	r5, r4, #24
   1185a:	4930      	ldr	r1, [pc, #192]	; (1191c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xcc>)
   1185c:	4628      	mov	r0, r5
   1185e:	4f30      	ldr	r7, [pc, #192]	; (11920 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd0>)
   11860:	47b8      	blx	r7
   11862:	4e30      	ldr	r6, [pc, #192]	; (11924 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd4>)
   11864:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1195c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10c>
   11868:	4632      	mov	r2, r6
   1186a:	4641      	mov	r1, r8
   1186c:	4628      	mov	r0, r5
   1186e:	4d2e      	ldr	r5, [pc, #184]	; (11928 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd8>)
   11870:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11872:	f104 0938 	add.w	r9, r4, #56	; 0x38
   11876:	492d      	ldr	r1, [pc, #180]	; (1192c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xdc>)
   11878:	4648      	mov	r0, r9
   1187a:	47b8      	blx	r7
   1187c:	4632      	mov	r2, r6
   1187e:	4641      	mov	r1, r8
   11880:	4648      	mov	r0, r9
   11882:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11884:	f104 0958 	add.w	r9, r4, #88	; 0x58
   11888:	4929      	ldr	r1, [pc, #164]	; (11930 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe0>)
   1188a:	4648      	mov	r0, r9
   1188c:	47b8      	blx	r7
   1188e:	4632      	mov	r2, r6
   11890:	4641      	mov	r1, r8
   11892:	4648      	mov	r0, r9
   11894:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11896:	f104 0978 	add.w	r9, r4, #120	; 0x78
   1189a:	4926      	ldr	r1, [pc, #152]	; (11934 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe4>)
   1189c:	4648      	mov	r0, r9
   1189e:	47b8      	blx	r7
   118a0:	4632      	mov	r2, r6
   118a2:	4641      	mov	r1, r8
   118a4:	4648      	mov	r0, r9
   118a6:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   118a8:	f104 0998 	add.w	r9, r4, #152	; 0x98
   118ac:	4922      	ldr	r1, [pc, #136]	; (11938 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe8>)
   118ae:	4648      	mov	r0, r9
   118b0:	47b8      	blx	r7
   118b2:	4632      	mov	r2, r6
   118b4:	4641      	mov	r1, r8
   118b6:	4648      	mov	r0, r9
   118b8:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   118ba:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   118be:	491f      	ldr	r1, [pc, #124]	; (1193c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xec>)
   118c0:	4648      	mov	r0, r9
   118c2:	47b8      	blx	r7
   118c4:	4632      	mov	r2, r6
   118c6:	4641      	mov	r1, r8
   118c8:	4648      	mov	r0, r9
   118ca:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   118cc:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
   118d0:	491b      	ldr	r1, [pc, #108]	; (11940 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf0>)
   118d2:	4648      	mov	r0, r9
   118d4:	47b8      	blx	r7
   118d6:	4632      	mov	r2, r6
   118d8:	4641      	mov	r1, r8
   118da:	4648      	mov	r0, r9
   118dc:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   118de:	f104 09f8 	add.w	r9, r4, #248	; 0xf8
   118e2:	4918      	ldr	r1, [pc, #96]	; (11944 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf4>)
   118e4:	4648      	mov	r0, r9
   118e6:	47b8      	blx	r7
   118e8:	4632      	mov	r2, r6
   118ea:	4641      	mov	r1, r8
   118ec:	4648      	mov	r0, r9
   118ee:	47a8      	blx	r5
static LT_SPI	ltSPI;
   118f0:	1d27      	adds	r7, r4, #4
   118f2:	4638      	mov	r0, r7
   118f4:	4b14      	ldr	r3, [pc, #80]	; (11948 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf8>)
   118f6:	4798      	blx	r3
   118f8:	4632      	mov	r2, r6
   118fa:	4914      	ldr	r1, [pc, #80]	; (1194c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xfc>)
   118fc:	4638      	mov	r0, r7
   118fe:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   11900:	f504 748c 	add.w	r4, r4, #280	; 0x118
   11904:	4912      	ldr	r1, [pc, #72]	; (11950 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x100>)
   11906:	4620      	mov	r0, r4
   11908:	4b12      	ldr	r3, [pc, #72]	; (11954 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x104>)
   1190a:	4798      	blx	r3
   1190c:	4632      	mov	r2, r6
   1190e:	4912      	ldr	r1, [pc, #72]	; (11958 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x108>)
   11910:	4620      	mov	r0, r4
   11912:	47a8      	blx	r5
   11914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11918:	200098cc 	.word	0x200098cc
   1191c:	20009f88 	.word	0x20009f88
   11920:	0000dd8d 	.word	0x0000dd8d
   11924:	20000000 	.word	0x20000000
   11928:	000135c5 	.word	0x000135c5
   1192c:	2000a01c 	.word	0x2000a01c
   11930:	2000a140 	.word	0x2000a140
   11934:	2000a03c 	.word	0x2000a03c
   11938:	2000a100 	.word	0x2000a100
   1193c:	2000a120 	.word	0x2000a120
   11940:	20009ff8 	.word	0x20009ff8
   11944:	2000a098 	.word	0x2000a098
   11948:	00012935 	.word	0x00012935
   1194c:	0001295d 	.word	0x0001295d
   11950:	20009fc0 	.word	0x20009fc0
   11954:	00011659 	.word	0x00011659
   11958:	000115cd 	.word	0x000115cd
   1195c:	0000ddc5 	.word	0x0000ddc5

00011960 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   11960:	b580      	push	{r7, lr}
   11962:	b084      	sub	sp, #16
   11964:	af00      	add	r7, sp, #0
   11966:	60f8      	str	r0, [r7, #12]
   11968:	60b9      	str	r1, [r7, #8]
   1196a:	4613      	mov	r3, r2
   1196c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1196e:	68fb      	ldr	r3, [r7, #12]
   11970:	2b00      	cmp	r3, #0
   11972:	d004      	beq.n	1197e <io_write+0x1e>
   11974:	68bb      	ldr	r3, [r7, #8]
   11976:	2b00      	cmp	r3, #0
   11978:	d001      	beq.n	1197e <io_write+0x1e>
   1197a:	2301      	movs	r3, #1
   1197c:	e000      	b.n	11980 <io_write+0x20>
   1197e:	2300      	movs	r3, #0
   11980:	f003 0301 	and.w	r3, r3, #1
   11984:	b2db      	uxtb	r3, r3
   11986:	2234      	movs	r2, #52	; 0x34
   11988:	4907      	ldr	r1, [pc, #28]	; (119a8 <io_write+0x48>)
   1198a:	4618      	mov	r0, r3
   1198c:	4b07      	ldr	r3, [pc, #28]	; (119ac <io_write+0x4c>)
   1198e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   11990:	68fb      	ldr	r3, [r7, #12]
   11992:	681b      	ldr	r3, [r3, #0]
   11994:	88fa      	ldrh	r2, [r7, #6]
   11996:	68b9      	ldr	r1, [r7, #8]
   11998:	68f8      	ldr	r0, [r7, #12]
   1199a:	4798      	blx	r3
   1199c:	4603      	mov	r3, r0
}
   1199e:	4618      	mov	r0, r3
   119a0:	3710      	adds	r7, #16
   119a2:	46bd      	mov	sp, r7
   119a4:	bd80      	pop	{r7, pc}
   119a6:	bf00      	nop
   119a8:	00014420 	.word	0x00014420
   119ac:	000040f5 	.word	0x000040f5

000119b0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   119b0:	b580      	push	{r7, lr}
   119b2:	b084      	sub	sp, #16
   119b4:	af00      	add	r7, sp, #0
   119b6:	60f8      	str	r0, [r7, #12]
   119b8:	60b9      	str	r1, [r7, #8]
   119ba:	4613      	mov	r3, r2
   119bc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   119be:	68fb      	ldr	r3, [r7, #12]
   119c0:	2b00      	cmp	r3, #0
   119c2:	d004      	beq.n	119ce <io_read+0x1e>
   119c4:	68bb      	ldr	r3, [r7, #8]
   119c6:	2b00      	cmp	r3, #0
   119c8:	d001      	beq.n	119ce <io_read+0x1e>
   119ca:	2301      	movs	r3, #1
   119cc:	e000      	b.n	119d0 <io_read+0x20>
   119ce:	2300      	movs	r3, #0
   119d0:	f003 0301 	and.w	r3, r3, #1
   119d4:	b2db      	uxtb	r3, r3
   119d6:	223d      	movs	r2, #61	; 0x3d
   119d8:	4907      	ldr	r1, [pc, #28]	; (119f8 <io_read+0x48>)
   119da:	4618      	mov	r0, r3
   119dc:	4b07      	ldr	r3, [pc, #28]	; (119fc <io_read+0x4c>)
   119de:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   119e0:	68fb      	ldr	r3, [r7, #12]
   119e2:	685b      	ldr	r3, [r3, #4]
   119e4:	88fa      	ldrh	r2, [r7, #6]
   119e6:	68b9      	ldr	r1, [r7, #8]
   119e8:	68f8      	ldr	r0, [r7, #12]
   119ea:	4798      	blx	r3
   119ec:	4603      	mov	r3, r0
}
   119ee:	4618      	mov	r0, r3
   119f0:	3710      	adds	r7, #16
   119f2:	46bd      	mov	sp, r7
   119f4:	bd80      	pop	{r7, pc}
   119f6:	bf00      	nop
   119f8:	00014420 	.word	0x00014420
   119fc:	000040f5 	.word	0x000040f5

00011a00 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   11a00:	b480      	push	{r7}
   11a02:	b083      	sub	sp, #12
   11a04:	af00      	add	r7, sp, #0
   11a06:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   11a08:	687b      	ldr	r3, [r7, #4]
   11a0a:	4618      	mov	r0, r3
   11a0c:	370c      	adds	r7, #12
   11a0e:	46bd      	mov	sp, r7
   11a10:	bc80      	pop	{r7}
   11a12:	4770      	bx	lr

00011a14 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   11a14:	b480      	push	{r7}
   11a16:	b083      	sub	sp, #12
   11a18:	af00      	add	r7, sp, #0
   11a1a:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   11a1c:	687b      	ldr	r3, [r7, #4]
   11a1e:	4618      	mov	r0, r3
   11a20:	370c      	adds	r7, #12
   11a22:	46bd      	mov	sp, r7
   11a24:	bc80      	pop	{r7}
   11a26:	4770      	bx	lr

00011a28 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   11a28:	b480      	push	{r7}
   11a2a:	b085      	sub	sp, #20
   11a2c:	af00      	add	r7, sp, #0
   11a2e:	6078      	str	r0, [r7, #4]
   11a30:	460b      	mov	r3, r1
   11a32:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   11a34:	2300      	movs	r3, #0
   11a36:	73fb      	strb	r3, [r7, #15]
   11a38:	7bfb      	ldrb	r3, [r7, #15]
   11a3a:	2b01      	cmp	r3, #1
   11a3c:	dc13      	bgt.n	11a66 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   11a3e:	7bfb      	ldrb	r3, [r7, #15]
   11a40:	78f9      	ldrb	r1, [r7, #3]
   11a42:	7bfa      	ldrb	r2, [r7, #15]
   11a44:	2080      	movs	r0, #128	; 0x80
   11a46:	fa40 f202 	asr.w	r2, r0, r2
   11a4a:	400a      	ands	r2, r1
   11a4c:	2a00      	cmp	r2, #0
   11a4e:	bfcc      	ite	gt
   11a50:	2201      	movgt	r2, #1
   11a52:	2200      	movle	r2, #0
   11a54:	b2d1      	uxtb	r1, r2
   11a56:	687a      	ldr	r2, [r7, #4]
   11a58:	4413      	add	r3, r2
   11a5a:	460a      	mov	r2, r1
   11a5c:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
   11a5e:	7bfb      	ldrb	r3, [r7, #15]
   11a60:	3301      	adds	r3, #1
   11a62:	73fb      	strb	r3, [r7, #15]
   11a64:	e7e8      	b.n	11a38 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   11a66:	bf00      	nop
   11a68:	3714      	adds	r7, #20
   11a6a:	46bd      	mov	sp, r7
   11a6c:	bc80      	pop	{r7}
   11a6e:	4770      	bx	lr

00011a70 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   11a70:	b480      	push	{r7}
   11a72:	b085      	sub	sp, #20
   11a74:	af00      	add	r7, sp, #0
   11a76:	6078      	str	r0, [r7, #4]
   11a78:	460b      	mov	r3, r1
   11a7a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   11a7c:	2300      	movs	r3, #0
   11a7e:	73fb      	strb	r3, [r7, #15]
   11a80:	7bfb      	ldrb	r3, [r7, #15]
   11a82:	2b02      	cmp	r3, #2
   11a84:	dc15      	bgt.n	11ab2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   11a86:	7bfb      	ldrb	r3, [r7, #15]
   11a88:	f1c3 0302 	rsb	r3, r3, #2
   11a8c:	78f9      	ldrb	r1, [r7, #3]
   11a8e:	7bfa      	ldrb	r2, [r7, #15]
   11a90:	2020      	movs	r0, #32
   11a92:	fa40 f202 	asr.w	r2, r0, r2
   11a96:	400a      	ands	r2, r1
   11a98:	2a00      	cmp	r2, #0
   11a9a:	bfcc      	ite	gt
   11a9c:	2201      	movgt	r2, #1
   11a9e:	2200      	movle	r2, #0
   11aa0:	b2d1      	uxtb	r1, r2
   11aa2:	687a      	ldr	r2, [r7, #4]
   11aa4:	4413      	add	r3, r2
   11aa6:	460a      	mov	r2, r1
   11aa8:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
   11aaa:	7bfb      	ldrb	r3, [r7, #15]
   11aac:	3301      	adds	r3, #1
   11aae:	73fb      	strb	r3, [r7, #15]
   11ab0:	e7e6      	b.n	11a80 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   11ab2:	bf00      	nop
   11ab4:	3714      	adds	r7, #20
   11ab6:	46bd      	mov	sp, r7
   11ab8:	bc80      	pop	{r7}
   11aba:	4770      	bx	lr

00011abc <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   11abc:	b580      	push	{r7, lr}
   11abe:	b084      	sub	sp, #16
   11ac0:	af00      	add	r7, sp, #0
   11ac2:	60f8      	str	r0, [r7, #12]
   11ac4:	60b9      	str	r1, [r7, #8]
   11ac6:	4613      	mov	r3, r2
   11ac8:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   11aca:	79fb      	ldrb	r3, [r7, #7]
   11acc:	4619      	mov	r1, r3
   11ace:	68b8      	ldr	r0, [r7, #8]
   11ad0:	4b0d      	ldr	r3, [pc, #52]	; (11b08 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   11ad2:	4798      	blx	r3
	FillLimitSwitch(v);
   11ad4:	79fb      	ldrb	r3, [r7, #7]
   11ad6:	4619      	mov	r1, r3
   11ad8:	68b8      	ldr	r0, [r7, #8]
   11ada:	4b0c      	ldr	r3, [pc, #48]	; (11b0c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   11adc:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   11ade:	79fb      	ldrb	r3, [r7, #7]
   11ae0:	f003 0301 	and.w	r3, r3, #1
   11ae4:	2b00      	cmp	r3, #0
   11ae6:	bfcc      	ite	gt
   11ae8:	2301      	movgt	r3, #1
   11aea:	2300      	movle	r3, #0
   11aec:	b2da      	uxtb	r2, r3
   11aee:	68bb      	ldr	r3, [r7, #8]
   11af0:	769a      	strb	r2, [r3, #26]
	return controlStatus;
   11af2:	68fa      	ldr	r2, [r7, #12]
   11af4:	68bb      	ldr	r3, [r7, #8]
   11af6:	3315      	adds	r3, #21
   11af8:	6819      	ldr	r1, [r3, #0]
   11afa:	6011      	str	r1, [r2, #0]
   11afc:	889b      	ldrh	r3, [r3, #4]
   11afe:	8093      	strh	r3, [r2, #4]
}
   11b00:	68f8      	ldr	r0, [r7, #12]
   11b02:	3710      	adds	r7, #16
   11b04:	46bd      	mov	sp, r7
   11b06:	bd80      	pop	{r7, pc}
   11b08:	00011a29 	.word	0x00011a29
   11b0c:	00011a71 	.word	0x00011a71

00011b10 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   11b10:	b480      	push	{r7}
   11b12:	b085      	sub	sp, #20
   11b14:	af00      	add	r7, sp, #0
   11b16:	60f8      	str	r0, [r7, #12]
   11b18:	60b9      	str	r1, [r7, #8]
   11b1a:	4613      	mov	r3, r2
   11b1c:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   11b1e:	79fb      	ldrb	r3, [r7, #7]
   11b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11b24:	2b00      	cmp	r3, #0
   11b26:	bfcc      	ite	gt
   11b28:	2301      	movgt	r3, #1
   11b2a:	2300      	movle	r3, #0
   11b2c:	b2da      	uxtb	r2, r3
   11b2e:	68bb      	ldr	r3, [r7, #8]
   11b30:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   11b32:	79fb      	ldrb	r3, [r7, #7]
   11b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11b38:	2b00      	cmp	r3, #0
   11b3a:	bfcc      	ite	gt
   11b3c:	2301      	movgt	r3, #1
   11b3e:	2300      	movle	r3, #0
   11b40:	b2da      	uxtb	r2, r3
   11b42:	68bb      	ldr	r3, [r7, #8]
   11b44:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   11b46:	79fb      	ldrb	r3, [r7, #7]
   11b48:	f003 0320 	and.w	r3, r3, #32
   11b4c:	2b00      	cmp	r3, #0
   11b4e:	bfcc      	ite	gt
   11b50:	2301      	movgt	r3, #1
   11b52:	2300      	movle	r3, #0
   11b54:	b2da      	uxtb	r2, r3
   11b56:	68bb      	ldr	r3, [r7, #8]
   11b58:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   11b5a:	79fb      	ldrb	r3, [r7, #7]
   11b5c:	f003 0310 	and.w	r3, r3, #16
   11b60:	2b00      	cmp	r3, #0
   11b62:	bfcc      	ite	gt
   11b64:	2301      	movgt	r3, #1
   11b66:	2300      	movle	r3, #0
   11b68:	b2da      	uxtb	r2, r3
   11b6a:	68bb      	ldr	r3, [r7, #8]
   11b6c:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   11b6e:	79fb      	ldrb	r3, [r7, #7]
   11b70:	f003 0308 	and.w	r3, r3, #8
   11b74:	2b00      	cmp	r3, #0
   11b76:	bfcc      	ite	gt
   11b78:	2301      	movgt	r3, #1
   11b7a:	2300      	movle	r3, #0
   11b7c:	b2da      	uxtb	r2, r3
   11b7e:	68bb      	ldr	r3, [r7, #8]
   11b80:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   11b82:	79fb      	ldrb	r3, [r7, #7]
   11b84:	f003 0304 	and.w	r3, r3, #4
   11b88:	2b00      	cmp	r3, #0
   11b8a:	bfcc      	ite	gt
   11b8c:	2301      	movgt	r3, #1
   11b8e:	2300      	movle	r3, #0
   11b90:	b2da      	uxtb	r2, r3
   11b92:	68bb      	ldr	r3, [r7, #8]
   11b94:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   11b98:	79fb      	ldrb	r3, [r7, #7]
   11b9a:	f003 0302 	and.w	r3, r3, #2
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	bfcc      	ite	gt
   11ba2:	2301      	movgt	r3, #1
   11ba4:	2300      	movle	r3, #0
   11ba6:	b2da      	uxtb	r2, r3
   11ba8:	68bb      	ldr	r3, [r7, #8]
   11baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   11bae:	79fb      	ldrb	r3, [r7, #7]
   11bb0:	f003 0301 	and.w	r3, r3, #1
   11bb4:	2b00      	cmp	r3, #0
   11bb6:	bfcc      	ite	gt
   11bb8:	2301      	movgt	r3, #1
   11bba:	2300      	movle	r3, #0
   11bbc:	b2da      	uxtb	r2, r3
   11bbe:	68bb      	ldr	r3, [r7, #8]
   11bc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
   11bc4:	68fa      	ldr	r2, [r7, #12]
   11bc6:	68bb      	ldr	r3, [r7, #8]
   11bc8:	331b      	adds	r3, #27
   11bca:	6819      	ldr	r1, [r3, #0]
   11bcc:	685b      	ldr	r3, [r3, #4]
   11bce:	6011      	str	r1, [r2, #0]
   11bd0:	6053      	str	r3, [r2, #4]
   11bd2:	68f8      	ldr	r0, [r7, #12]
   11bd4:	3714      	adds	r7, #20
   11bd6:	46bd      	mov	sp, r7
   11bd8:	bc80      	pop	{r7}
   11bda:	4770      	bx	lr

00011bdc <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   11bdc:	b480      	push	{r7}
   11bde:	b083      	sub	sp, #12
   11be0:	af00      	add	r7, sp, #0
   11be2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	4618      	mov	r0, r3
   11be8:	370c      	adds	r7, #12
   11bea:	46bd      	mov	sp, r7
   11bec:	bc80      	pop	{r7}
   11bee:	4770      	bx	lr

00011bf0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   11bf0:	b480      	push	{r7}
   11bf2:	b083      	sub	sp, #12
   11bf4:	af00      	add	r7, sp, #0
   11bf6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   11bf8:	687b      	ldr	r3, [r7, #4]
   11bfa:	4618      	mov	r0, r3
   11bfc:	370c      	adds	r7, #12
   11bfe:	46bd      	mov	sp, r7
   11c00:	bc80      	pop	{r7}
   11c02:	4770      	bx	lr

00011c04 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   11c04:	b480      	push	{r7}
   11c06:	b085      	sub	sp, #20
   11c08:	af00      	add	r7, sp, #0
   11c0a:	60f8      	str	r0, [r7, #12]
   11c0c:	460b      	mov	r3, r1
   11c0e:	607a      	str	r2, [r7, #4]
   11c10:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   11c12:	687b      	ldr	r3, [r7, #4]
   11c14:	681a      	ldr	r2, [r3, #0]
   11c16:	68fb      	ldr	r3, [r7, #12]
   11c18:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   11c1a:	687b      	ldr	r3, [r7, #4]
   11c1c:	685a      	ldr	r2, [r3, #4]
   11c1e:	68fb      	ldr	r3, [r7, #12]
   11c20:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   11c22:	68fb      	ldr	r3, [r7, #12]
   11c24:	7afa      	ldrb	r2, [r7, #11]
   11c26:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   11c28:	68fb      	ldr	r3, [r7, #12]
   11c2a:	687a      	ldr	r2, [r7, #4]
   11c2c:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   11c2e:	68fb      	ldr	r3, [r7, #12]
   11c30:	68db      	ldr	r3, [r3, #12]
   11c32:	7a5b      	ldrb	r3, [r3, #9]
   11c34:	b2da      	uxtb	r2, r3
   11c36:	68fb      	ldr	r3, [r7, #12]
   11c38:	719a      	strb	r2, [r3, #6]
	return isOK;
   11c3a:	68fb      	ldr	r3, [r7, #12]
   11c3c:	799b      	ldrb	r3, [r3, #6]
   11c3e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   11c40:	4618      	mov	r0, r3
   11c42:	3714      	adds	r7, #20
   11c44:	46bd      	mov	sp, r7
   11c46:	bc80      	pop	{r7}
   11c48:	4770      	bx	lr

00011c4a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   11c4a:	b480      	push	{r7}
   11c4c:	b083      	sub	sp, #12
   11c4e:	af00      	add	r7, sp, #0
   11c50:	6078      	str	r0, [r7, #4]
   11c52:	460b      	mov	r3, r1
   11c54:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   11c56:	78fb      	ldrb	r3, [r7, #3]
   11c58:	f003 0307 	and.w	r3, r3, #7
   11c5c:	b2db      	uxtb	r3, r3
}
   11c5e:	4618      	mov	r0, r3
   11c60:	370c      	adds	r7, #12
   11c62:	46bd      	mov	sp, r7
   11c64:	bc80      	pop	{r7}
   11c66:	4770      	bx	lr

00011c68 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   11c68:	b480      	push	{r7}
   11c6a:	b083      	sub	sp, #12
   11c6c:	af00      	add	r7, sp, #0
   11c6e:	6078      	str	r0, [r7, #4]
   11c70:	4608      	mov	r0, r1
   11c72:	4611      	mov	r1, r2
   11c74:	461a      	mov	r2, r3
   11c76:	4603      	mov	r3, r0
   11c78:	70fb      	strb	r3, [r7, #3]
   11c7a:	460b      	mov	r3, r1
   11c7c:	70bb      	strb	r3, [r7, #2]
   11c7e:	4613      	mov	r3, r2
   11c80:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   11c82:	78fb      	ldrb	r3, [r7, #3]
   11c84:	2b07      	cmp	r3, #7
   11c86:	dc01      	bgt.n	11c8c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   11c88:	78bb      	ldrb	r3, [r7, #2]
   11c8a:	e000      	b.n	11c8e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   11c8c:	787b      	ldrb	r3, [r7, #1]
}
   11c8e:	4618      	mov	r0, r3
   11c90:	370c      	adds	r7, #12
   11c92:	46bd      	mov	sp, r7
   11c94:	bc80      	pop	{r7}
   11c96:	4770      	bx	lr

00011c98 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   11c98:	b580      	push	{r7, lr}
   11c9a:	b082      	sub	sp, #8
   11c9c:	af00      	add	r7, sp, #0
   11c9e:	6078      	str	r0, [r7, #4]
   11ca0:	460b      	mov	r3, r1
   11ca2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   11ca4:	687b      	ldr	r3, [r7, #4]
   11ca6:	68da      	ldr	r2, [r3, #12]
   11ca8:	687b      	ldr	r3, [r7, #4]
   11caa:	7a1b      	ldrb	r3, [r3, #8]
   11cac:	4619      	mov	r1, r3
   11cae:	4610      	mov	r0, r2
   11cb0:	4b0a      	ldr	r3, [pc, #40]	; (11cdc <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   11cb2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   11cb4:	687b      	ldr	r3, [r7, #4]
   11cb6:	68db      	ldr	r3, [r3, #12]
   11cb8:	1cf9      	adds	r1, r7, #3
   11cba:	2201      	movs	r2, #1
   11cbc:	4618      	mov	r0, r3
   11cbe:	4b08      	ldr	r3, [pc, #32]	; (11ce0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   11cc0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   11cc2:	687b      	ldr	r3, [r7, #4]
   11cc4:	68db      	ldr	r3, [r3, #12]
   11cc6:	6879      	ldr	r1, [r7, #4]
   11cc8:	2201      	movs	r2, #1
   11cca:	4618      	mov	r0, r3
   11ccc:	4b05      	ldr	r3, [pc, #20]	; (11ce4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   11cce:	4798      	blx	r3

	return registerValue;
   11cd0:	687b      	ldr	r3, [r7, #4]
   11cd2:	781b      	ldrb	r3, [r3, #0]
}
   11cd4:	4618      	mov	r0, r3
   11cd6:	3708      	adds	r7, #8
   11cd8:	46bd      	mov	sp, r7
   11cda:	bd80      	pop	{r7, pc}
   11cdc:	0000dd09 	.word	0x0000dd09
   11ce0:	0000dd35 	.word	0x0000dd35
   11ce4:	0000dd61 	.word	0x0000dd61

00011ce8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   11ce8:	b580      	push	{r7, lr}
   11cea:	b084      	sub	sp, #16
   11cec:	af00      	add	r7, sp, #0
   11cee:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11cf0:	687b      	ldr	r3, [r7, #4]
   11cf2:	68da      	ldr	r2, [r3, #12]
   11cf4:	687b      	ldr	r3, [r7, #4]
   11cf6:	7a1b      	ldrb	r3, [r3, #8]
   11cf8:	4619      	mov	r1, r3
   11cfa:	4610      	mov	r0, r2
   11cfc:	4b06      	ldr	r3, [pc, #24]	; (11d18 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   11cfe:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   11d00:	2109      	movs	r1, #9
   11d02:	6878      	ldr	r0, [r7, #4]
   11d04:	4b05      	ldr	r3, [pc, #20]	; (11d1c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   11d06:	4798      	blx	r3
   11d08:	4603      	mov	r3, r0
   11d0a:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   11d0c:	7bfb      	ldrb	r3, [r7, #15]
}
   11d0e:	4618      	mov	r0, r3
   11d10:	3710      	adds	r7, #16
   11d12:	46bd      	mov	sp, r7
   11d14:	bd80      	pop	{r7, pc}
   11d16:	bf00      	nop
   11d18:	0000dd09 	.word	0x0000dd09
   11d1c:	00011c99 	.word	0x00011c99

00011d20 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   11d20:	b580      	push	{r7, lr}
   11d22:	b084      	sub	sp, #16
   11d24:	af00      	add	r7, sp, #0
   11d26:	6078      	str	r0, [r7, #4]
   11d28:	460b      	mov	r3, r1
   11d2a:	70fb      	strb	r3, [r7, #3]
   11d2c:	4613      	mov	r3, r2
   11d2e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   11d30:	687b      	ldr	r3, [r7, #4]
   11d32:	68da      	ldr	r2, [r3, #12]
   11d34:	687b      	ldr	r3, [r7, #4]
   11d36:	7a1b      	ldrb	r3, [r3, #8]
   11d38:	4619      	mov	r1, r3
   11d3a:	4610      	mov	r0, r2
   11d3c:	4b09      	ldr	r3, [pc, #36]	; (11d64 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   11d3e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   11d40:	78fb      	ldrb	r3, [r7, #3]
   11d42:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   11d44:	78bb      	ldrb	r3, [r7, #2]
   11d46:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   11d48:	687b      	ldr	r3, [r7, #4]
   11d4a:	68db      	ldr	r3, [r3, #12]
   11d4c:	f107 010c 	add.w	r1, r7, #12
   11d50:	2202      	movs	r2, #2
   11d52:	4618      	mov	r0, r3
   11d54:	4b04      	ldr	r3, [pc, #16]	; (11d68 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   11d56:	4798      	blx	r3
   11d58:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   11d5a:	4618      	mov	r0, r3
   11d5c:	3710      	adds	r7, #16
   11d5e:	46bd      	mov	sp, r7
   11d60:	bd80      	pop	{r7, pc}
   11d62:	bf00      	nop
   11d64:	0000dd09 	.word	0x0000dd09
   11d68:	0000dd35 	.word	0x0000dd35

00011d6c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   11d6c:	b580      	push	{r7, lr}
   11d6e:	b082      	sub	sp, #8
   11d70:	af00      	add	r7, sp, #0
   11d72:	6078      	str	r0, [r7, #4]
   11d74:	460b      	mov	r3, r1
   11d76:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11d78:	687b      	ldr	r3, [r7, #4]
   11d7a:	68da      	ldr	r2, [r3, #12]
   11d7c:	687b      	ldr	r3, [r7, #4]
   11d7e:	7a1b      	ldrb	r3, [r3, #8]
   11d80:	4619      	mov	r1, r3
   11d82:	4610      	mov	r0, r2
   11d84:	4b06      	ldr	r3, [pc, #24]	; (11da0 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   11d86:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   11d88:	78fb      	ldrb	r3, [r7, #3]
   11d8a:	461a      	mov	r2, r3
   11d8c:	2109      	movs	r1, #9
   11d8e:	6878      	ldr	r0, [r7, #4]
   11d90:	4b04      	ldr	r3, [pc, #16]	; (11da4 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   11d92:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   11d94:	78fb      	ldrb	r3, [r7, #3]
}
   11d96:	4618      	mov	r0, r3
   11d98:	3708      	adds	r7, #8
   11d9a:	46bd      	mov	sp, r7
   11d9c:	bd80      	pop	{r7, pc}
   11d9e:	bf00      	nop
   11da0:	0000dd09 	.word	0x0000dd09
   11da4:	00011d21 	.word	0x00011d21

00011da8 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   11da8:	b580      	push	{r7, lr}
   11daa:	b084      	sub	sp, #16
   11dac:	af00      	add	r7, sp, #0
   11dae:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11db0:	2300      	movs	r3, #0
   11db2:	73fb      	strb	r3, [r7, #15]
   11db4:	7bfb      	ldrb	r3, [r7, #15]
   11db6:	2b07      	cmp	r3, #7
   11db8:	dc0f      	bgt.n	11dda <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   11dba:	7bfb      	ldrb	r3, [r7, #15]
   11dbc:	2201      	movs	r2, #1
   11dbe:	4619      	mov	r1, r3
   11dc0:	6878      	ldr	r0, [r7, #4]
   11dc2:	4b08      	ldr	r3, [pc, #32]	; (11de4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   11dc4:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   11dc6:	7bfb      	ldrb	r3, [r7, #15]
   11dc8:	2201      	movs	r2, #1
   11dca:	4619      	mov	r1, r3
   11dcc:	6878      	ldr	r0, [r7, #4]
   11dce:	4b06      	ldr	r3, [pc, #24]	; (11de8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   11dd0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11dd2:	7bfb      	ldrb	r3, [r7, #15]
   11dd4:	3301      	adds	r3, #1
   11dd6:	73fb      	strb	r3, [r7, #15]
   11dd8:	e7ec      	b.n	11db4 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   11dda:	bf00      	nop
   11ddc:	3710      	adds	r7, #16
   11dde:	46bd      	mov	sp, r7
   11de0:	bd80      	pop	{r7, pc}
   11de2:	bf00      	nop
   11de4:	00011f69 	.word	0x00011f69
   11de8:	0001204d 	.word	0x0001204d

00011dec <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   11dec:	b580      	push	{r7, lr}
   11dee:	b084      	sub	sp, #16
   11df0:	af00      	add	r7, sp, #0
   11df2:	6078      	str	r0, [r7, #4]
   11df4:	460b      	mov	r3, r1
   11df6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   11df8:	78fb      	ldrb	r3, [r7, #3]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	dd23      	ble.n	11e46 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   11dfe:	2300      	movs	r3, #0
   11e00:	73fb      	strb	r3, [r7, #15]
   11e02:	7bfb      	ldrb	r3, [r7, #15]
   11e04:	2b07      	cmp	r3, #7
   11e06:	dc21      	bgt.n	11e4c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   11e08:	78fa      	ldrb	r2, [r7, #3]
   11e0a:	7bfb      	ldrb	r3, [r7, #15]
   11e0c:	fa42 f303 	asr.w	r3, r2, r3
   11e10:	f003 0301 	and.w	r3, r3, #1
   11e14:	2b00      	cmp	r3, #0
   11e16:	d00c      	beq.n	11e32 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   11e18:	7bfb      	ldrb	r3, [r7, #15]
   11e1a:	2201      	movs	r2, #1
   11e1c:	4619      	mov	r1, r3
   11e1e:	6878      	ldr	r0, [r7, #4]
   11e20:	4b0c      	ldr	r3, [pc, #48]	; (11e54 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11e22:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   11e24:	7bfb      	ldrb	r3, [r7, #15]
   11e26:	2201      	movs	r2, #1
   11e28:	4619      	mov	r1, r3
   11e2a:	6878      	ldr	r0, [r7, #4]
   11e2c:	4b0a      	ldr	r3, [pc, #40]	; (11e58 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   11e2e:	4798      	blx	r3
   11e30:	e005      	b.n	11e3e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   11e32:	7bfb      	ldrb	r3, [r7, #15]
   11e34:	2200      	movs	r2, #0
   11e36:	4619      	mov	r1, r3
   11e38:	6878      	ldr	r0, [r7, #4]
   11e3a:	4b06      	ldr	r3, [pc, #24]	; (11e54 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11e3c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   11e3e:	7bfb      	ldrb	r3, [r7, #15]
   11e40:	3301      	adds	r3, #1
   11e42:	73fb      	strb	r3, [r7, #15]
   11e44:	e7dd      	b.n	11e02 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   11e46:	6878      	ldr	r0, [r7, #4]
   11e48:	4b04      	ldr	r3, [pc, #16]	; (11e5c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   11e4a:	4798      	blx	r3
	}
	
}
   11e4c:	bf00      	nop
   11e4e:	3710      	adds	r7, #16
   11e50:	46bd      	mov	sp, r7
   11e52:	bd80      	pop	{r7, pc}
   11e54:	00011f69 	.word	0x00011f69
   11e58:	0001204d 	.word	0x0001204d
   11e5c:	00011e61 	.word	0x00011e61

00011e60 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   11e60:	b580      	push	{r7, lr}
   11e62:	b084      	sub	sp, #16
   11e64:	af00      	add	r7, sp, #0
   11e66:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11e68:	2300      	movs	r3, #0
   11e6a:	73fb      	strb	r3, [r7, #15]
   11e6c:	7bfb      	ldrb	r3, [r7, #15]
   11e6e:	2b07      	cmp	r3, #7
   11e70:	dc09      	bgt.n	11e86 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   11e72:	7bfb      	ldrb	r3, [r7, #15]
   11e74:	2200      	movs	r2, #0
   11e76:	4619      	mov	r1, r3
   11e78:	6878      	ldr	r0, [r7, #4]
   11e7a:	4b05      	ldr	r3, [pc, #20]	; (11e90 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   11e7c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11e7e:	7bfb      	ldrb	r3, [r7, #15]
   11e80:	3301      	adds	r3, #1
   11e82:	73fb      	strb	r3, [r7, #15]
   11e84:	e7f2      	b.n	11e6c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   11e86:	bf00      	nop
   11e88:	3710      	adds	r7, #16
   11e8a:	46bd      	mov	sp, r7
   11e8c:	bd80      	pop	{r7, pc}
   11e8e:	bf00      	nop
   11e90:	00011f69 	.word	0x00011f69

00011e94 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
   11e9c:	460b      	mov	r3, r1
   11e9e:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
   11ea0:	2300      	movs	r3, #0
   11ea2:	73fb      	strb	r3, [r7, #15]
   11ea4:	7bfb      	ldrb	r3, [r7, #15]
   11ea6:	2b07      	cmp	r3, #7
   11ea8:	dc11      	bgt.n	11ece <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
   11eaa:	78fa      	ldrb	r2, [r7, #3]
   11eac:	7bfb      	ldrb	r3, [r7, #15]
   11eae:	fa42 f303 	asr.w	r3, r2, r3
   11eb2:	f003 0301 	and.w	r3, r3, #1
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	d005      	beq.n	11ec6 <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
   11eba:	7bfb      	ldrb	r3, [r7, #15]
   11ebc:	2200      	movs	r2, #0
   11ebe:	4619      	mov	r1, r3
   11ec0:	6878      	ldr	r0, [r7, #4]
   11ec2:	4b05      	ldr	r3, [pc, #20]	; (11ed8 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
   11ec4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11ec6:	7bfb      	ldrb	r3, [r7, #15]
   11ec8:	3301      	adds	r3, #1
   11eca:	73fb      	strb	r3, [r7, #15]
   11ecc:	e7ea      	b.n	11ea4 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
   11ece:	bf00      	nop
   11ed0:	3710      	adds	r7, #16
   11ed2:	46bd      	mov	sp, r7
   11ed4:	bd80      	pop	{r7, pc}
   11ed6:	bf00      	nop
   11ed8:	00011f69 	.word	0x00011f69

00011edc <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   11edc:	b580      	push	{r7, lr}
   11ede:	b084      	sub	sp, #16
   11ee0:	af00      	add	r7, sp, #0
   11ee2:	6078      	str	r0, [r7, #4]
   11ee4:	4608      	mov	r0, r1
   11ee6:	4611      	mov	r1, r2
   11ee8:	461a      	mov	r2, r3
   11eea:	4603      	mov	r3, r0
   11eec:	70fb      	strb	r3, [r7, #3]
   11eee:	460b      	mov	r3, r1
   11ef0:	70bb      	strb	r3, [r7, #2]
   11ef2:	4613      	mov	r3, r2
   11ef4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   11ef6:	787b      	ldrb	r3, [r7, #1]
   11ef8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   11efa:	78fb      	ldrb	r3, [r7, #3]
   11efc:	4619      	mov	r1, r3
   11efe:	6878      	ldr	r0, [r7, #4]
   11f00:	4b16      	ldr	r3, [pc, #88]	; (11f5c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   11f02:	4798      	blx	r3
   11f04:	4603      	mov	r3, r0
   11f06:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   11f08:	7bfb      	ldrb	r3, [r7, #15]
   11f0a:	4619      	mov	r1, r3
   11f0c:	6878      	ldr	r0, [r7, #4]
   11f0e:	4b14      	ldr	r3, [pc, #80]	; (11f60 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   11f10:	4798      	blx	r3
   11f12:	4603      	mov	r3, r0
   11f14:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   11f16:	78bb      	ldrb	r3, [r7, #2]
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d009      	beq.n	11f30 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   11f1c:	7bba      	ldrb	r2, [r7, #14]
   11f1e:	7b7b      	ldrb	r3, [r7, #13]
   11f20:	4619      	mov	r1, r3
   11f22:	2301      	movs	r3, #1
   11f24:	408b      	lsls	r3, r1
   11f26:	b2db      	uxtb	r3, r3
   11f28:	4313      	orrs	r3, r2
   11f2a:	b2db      	uxtb	r3, r3
   11f2c:	73bb      	strb	r3, [r7, #14]
   11f2e:	e00a      	b.n	11f46 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   11f30:	7bba      	ldrb	r2, [r7, #14]
   11f32:	7b7b      	ldrb	r3, [r7, #13]
   11f34:	4619      	mov	r1, r3
   11f36:	2301      	movs	r3, #1
   11f38:	408b      	lsls	r3, r1
   11f3a:	b2db      	uxtb	r3, r3
   11f3c:	43db      	mvns	r3, r3
   11f3e:	b2db      	uxtb	r3, r3
   11f40:	4013      	ands	r3, r2
   11f42:	b2db      	uxtb	r3, r3
   11f44:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   11f46:	7bba      	ldrb	r2, [r7, #14]
   11f48:	7bfb      	ldrb	r3, [r7, #15]
   11f4a:	4619      	mov	r1, r3
   11f4c:	6878      	ldr	r0, [r7, #4]
   11f4e:	4b05      	ldr	r3, [pc, #20]	; (11f64 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   11f50:	4798      	blx	r3
}
   11f52:	bf00      	nop
   11f54:	3710      	adds	r7, #16
   11f56:	46bd      	mov	sp, r7
   11f58:	bd80      	pop	{r7, pc}
   11f5a:	bf00      	nop
   11f5c:	00011c4b 	.word	0x00011c4b
   11f60:	00011c99 	.word	0x00011c99
   11f64:	00011d21 	.word	0x00011d21

00011f68 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   11f68:	b590      	push	{r4, r7, lr}
   11f6a:	b085      	sub	sp, #20
   11f6c:	af02      	add	r7, sp, #8
   11f6e:	6078      	str	r0, [r7, #4]
   11f70:	460b      	mov	r3, r1
   11f72:	70fb      	strb	r3, [r7, #3]
   11f74:	4613      	mov	r3, r2
   11f76:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   11f78:	78bb      	ldrb	r3, [r7, #2]
   11f7a:	2b01      	cmp	r3, #1
   11f7c:	bf0c      	ite	eq
   11f7e:	2301      	moveq	r3, #1
   11f80:	2300      	movne	r3, #0
   11f82:	b2db      	uxtb	r3, r3
   11f84:	461a      	mov	r2, r3
   11f86:	78f9      	ldrb	r1, [r7, #3]
   11f88:	2300      	movs	r3, #0
   11f8a:	9300      	str	r3, [sp, #0]
   11f8c:	2300      	movs	r3, #0
   11f8e:	6878      	ldr	r0, [r7, #4]
   11f90:	4c02      	ldr	r4, [pc, #8]	; (11f9c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11f92:	47a0      	blx	r4
}
   11f94:	bf00      	nop
   11f96:	370c      	adds	r7, #12
   11f98:	46bd      	mov	sp, r7
   11f9a:	bd90      	pop	{r4, r7, pc}
   11f9c:	00011edd 	.word	0x00011edd

00011fa0 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11fa0:	b590      	push	{r4, r7, lr}
   11fa2:	b085      	sub	sp, #20
   11fa4:	af00      	add	r7, sp, #0
   11fa6:	6078      	str	r0, [r7, #4]
   11fa8:	460b      	mov	r3, r1
   11faa:	70fb      	strb	r3, [r7, #3]
   11fac:	4613      	mov	r3, r2
   11fae:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   11fb0:	78fb      	ldrb	r3, [r7, #3]
   11fb2:	4619      	mov	r1, r3
   11fb4:	6878      	ldr	r0, [r7, #4]
   11fb6:	4b21      	ldr	r3, [pc, #132]	; (1203c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   11fb8:	4798      	blx	r3
   11fba:	4603      	mov	r3, r0
   11fbc:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   11fbe:	78f9      	ldrb	r1, [r7, #3]
   11fc0:	230a      	movs	r3, #10
   11fc2:	220a      	movs	r2, #10
   11fc4:	6878      	ldr	r0, [r7, #4]
   11fc6:	4c1e      	ldr	r4, [pc, #120]	; (12040 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11fc8:	47a0      	blx	r4
   11fca:	4603      	mov	r3, r0
   11fcc:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   11fce:	7bfb      	ldrb	r3, [r7, #15]
   11fd0:	4619      	mov	r1, r3
   11fd2:	6878      	ldr	r0, [r7, #4]
   11fd4:	4b1b      	ldr	r3, [pc, #108]	; (12044 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   11fd6:	4798      	blx	r3
   11fd8:	4603      	mov	r3, r0
   11fda:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   11fdc:	78bb      	ldrb	r3, [r7, #2]
   11fde:	2b00      	cmp	r3, #0
   11fe0:	d009      	beq.n	11ff6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   11fe2:	7bba      	ldrb	r2, [r7, #14]
   11fe4:	7b7b      	ldrb	r3, [r7, #13]
   11fe6:	4619      	mov	r1, r3
   11fe8:	2301      	movs	r3, #1
   11fea:	408b      	lsls	r3, r1
   11fec:	b2db      	uxtb	r3, r3
   11fee:	4313      	orrs	r3, r2
   11ff0:	b2db      	uxtb	r3, r3
   11ff2:	73bb      	strb	r3, [r7, #14]
   11ff4:	e00a      	b.n	1200c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   11ff6:	7bba      	ldrb	r2, [r7, #14]
   11ff8:	7b7b      	ldrb	r3, [r7, #13]
   11ffa:	4619      	mov	r1, r3
   11ffc:	2301      	movs	r3, #1
   11ffe:	408b      	lsls	r3, r1
   12000:	b2db      	uxtb	r3, r3
   12002:	43db      	mvns	r3, r3
   12004:	b2db      	uxtb	r3, r3
   12006:	4013      	ands	r3, r2
   12008:	b2db      	uxtb	r3, r3
   1200a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   1200c:	78f9      	ldrb	r1, [r7, #3]
   1200e:	2309      	movs	r3, #9
   12010:	2209      	movs	r2, #9
   12012:	6878      	ldr	r0, [r7, #4]
   12014:	4c0a      	ldr	r4, [pc, #40]	; (12040 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   12016:	47a0      	blx	r4
   12018:	4603      	mov	r3, r0
   1201a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   1201c:	7bba      	ldrb	r2, [r7, #14]
   1201e:	7bfb      	ldrb	r3, [r7, #15]
   12020:	4619      	mov	r1, r3
   12022:	6878      	ldr	r0, [r7, #4]
   12024:	4b08      	ldr	r3, [pc, #32]	; (12048 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   12026:	4798      	blx	r3
   12028:	4603      	mov	r3, r0
   1202a:	2b00      	cmp	r3, #0
   1202c:	bf0c      	ite	eq
   1202e:	2301      	moveq	r3, #1
   12030:	2300      	movne	r3, #0
   12032:	b2db      	uxtb	r3, r3
}
   12034:	4618      	mov	r0, r3
   12036:	3714      	adds	r7, #20
   12038:	46bd      	mov	sp, r7
   1203a:	bd90      	pop	{r4, r7, pc}
   1203c:	00011c4b 	.word	0x00011c4b
   12040:	00011c69 	.word	0x00011c69
   12044:	00011c99 	.word	0x00011c99
   12048:	00011d21 	.word	0x00011d21

0001204c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   1204c:	b590      	push	{r4, r7, lr}
   1204e:	b085      	sub	sp, #20
   12050:	af02      	add	r7, sp, #8
   12052:	6078      	str	r0, [r7, #4]
   12054:	460b      	mov	r3, r1
   12056:	70fb      	strb	r3, [r7, #3]
   12058:	4613      	mov	r3, r2
   1205a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   1205c:	78ba      	ldrb	r2, [r7, #2]
   1205e:	78f9      	ldrb	r1, [r7, #3]
   12060:	2306      	movs	r3, #6
   12062:	9300      	str	r3, [sp, #0]
   12064:	2306      	movs	r3, #6
   12066:	6878      	ldr	r0, [r7, #4]
   12068:	4c02      	ldr	r4, [pc, #8]	; (12074 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   1206a:	47a0      	blx	r4
}
   1206c:	bf00      	nop
   1206e:	370c      	adds	r7, #12
   12070:	46bd      	mov	sp, r7
   12072:	bd90      	pop	{r4, r7, pc}
   12074:	00011edd 	.word	0x00011edd

00012078 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   12078:	b480      	push	{r7}
   1207a:	b083      	sub	sp, #12
   1207c:	af00      	add	r7, sp, #0
   1207e:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   12080:	4b04      	ldr	r3, [pc, #16]	; (12094 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   12082:	681b      	ldr	r3, [r3, #0]
   12084:	2201      	movs	r2, #1
   12086:	709a      	strb	r2, [r3, #2]
	asm("nop");
   12088:	bf00      	nop
}
   1208a:	bf00      	nop
   1208c:	370c      	adds	r7, #12
   1208e:	46bd      	mov	sp, r7
   12090:	bc80      	pop	{r7}
   12092:	4770      	bx	lr
   12094:	20009cdc 	.word	0x20009cdc

00012098 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   12098:	b480      	push	{r7}
   1209a:	b083      	sub	sp, #12
   1209c:	af00      	add	r7, sp, #0
   1209e:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   120a0:	687b      	ldr	r3, [r7, #4]
   120a2:	4618      	mov	r0, r3
   120a4:	370c      	adds	r7, #12
   120a6:	46bd      	mov	sp, r7
   120a8:	bc80      	pop	{r7}
   120aa:	4770      	bx	lr

000120ac <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   120ac:	b480      	push	{r7}
   120ae:	b083      	sub	sp, #12
   120b0:	af00      	add	r7, sp, #0
   120b2:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   120b4:	687b      	ldr	r3, [r7, #4]
   120b6:	4618      	mov	r0, r3
   120b8:	370c      	adds	r7, #12
   120ba:	46bd      	mov	sp, r7
   120bc:	bc80      	pop	{r7}
   120be:	4770      	bx	lr

000120c0 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   120c0:	b580      	push	{r7, lr}
   120c2:	b084      	sub	sp, #16
   120c4:	af00      	add	r7, sp, #0
   120c6:	60f8      	str	r0, [r7, #12]
   120c8:	60b9      	str	r1, [r7, #8]
   120ca:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   120cc:	4a1c      	ldr	r2, [pc, #112]	; (12140 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   120ce:	68fb      	ldr	r3, [r7, #12]
   120d0:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   120d2:	68fb      	ldr	r3, [r7, #12]
   120d4:	68ba      	ldr	r2, [r7, #8]
   120d6:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   120d8:	68fb      	ldr	r3, [r7, #12]
   120da:	687a      	ldr	r2, [r7, #4]
   120dc:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   120de:	68fb      	ldr	r3, [r7, #12]
   120e0:	6a1b      	ldr	r3, [r3, #32]
   120e2:	68da      	ldr	r2, [r3, #12]
   120e4:	68fb      	ldr	r3, [r7, #12]
   120e6:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   120e8:	68fb      	ldr	r3, [r7, #12]
   120ea:	6a1b      	ldr	r3, [r3, #32]
   120ec:	689a      	ldr	r2, [r3, #8]
   120ee:	68fb      	ldr	r3, [r7, #12]
   120f0:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   120f2:	68fb      	ldr	r3, [r7, #12]
   120f4:	4a13      	ldr	r2, [pc, #76]	; (12144 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   120f6:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   120f8:	68fb      	ldr	r3, [r7, #12]
   120fa:	2204      	movs	r2, #4
   120fc:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   120fe:	68fb      	ldr	r3, [r7, #12]
   12100:	2209      	movs	r2, #9
   12102:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   12104:	68fb      	ldr	r3, [r7, #12]
   12106:	220e      	movs	r2, #14
   12108:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   1210a:	68fb      	ldr	r3, [r7, #12]
   1210c:	2213      	movs	r2, #19
   1210e:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   12110:	20c8      	movs	r0, #200	; 0xc8
   12112:	4b0d      	ldr	r3, [pc, #52]	; (12148 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   12114:	4798      	blx	r3
	temperatureTimer.Init();
   12116:	480d      	ldr	r0, [pc, #52]	; (1214c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   12118:	4b0d      	ldr	r3, [pc, #52]	; (12150 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   1211a:	4798      	blx	r3
	configure_channels();
   1211c:	68f8      	ldr	r0, [r7, #12]
   1211e:	4b0d      	ldr	r3, [pc, #52]	; (12154 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   12120:	4798      	blx	r3
	configure_global_parameters();
   12122:	68f8      	ldr	r0, [r7, #12]
   12124:	4b0c      	ldr	r3, [pc, #48]	; (12158 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   12126:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   12128:	68fb      	ldr	r3, [r7, #12]
   1212a:	2201      	movs	r2, #1
   1212c:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   1212e:	68f8      	ldr	r0, [r7, #12]
   12130:	4b0a      	ldr	r3, [pc, #40]	; (1215c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   12132:	4798      	blx	r3
   12134:	4603      	mov	r3, r0
}
   12136:	4618      	mov	r0, r3
   12138:	3710      	adds	r7, #16
   1213a:	46bd      	mov	sp, r7
   1213c:	bd80      	pop	{r7, pc}
   1213e:	bf00      	nop
   12140:	20009cdc 	.word	0x20009cdc
   12144:	20009c1c 	.word	0x20009c1c
   12148:	00002a99 	.word	0x00002a99
   1214c:	20009bdc 	.word	0x20009bdc
   12150:	0000de79 	.word	0x0000de79
   12154:	00012569 	.word	0x00012569
   12158:	00012621 	.word	0x00012621
   1215c:	00012659 	.word	0x00012659

00012160 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   12160:	b590      	push	{r4, r7, lr}
   12162:	b089      	sub	sp, #36	; 0x24
   12164:	af02      	add	r7, sp, #8
   12166:	60f8      	str	r0, [r7, #12]
   12168:	60b9      	str	r1, [r7, #8]
   1216a:	603b      	str	r3, [r7, #0]
   1216c:	4613      	mov	r3, r2
   1216e:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   12170:	79fb      	ldrb	r3, [r7, #7]
   12172:	461a      	mov	r2, r3
   12174:	f44f 7100 	mov.w	r1, #512	; 0x200
   12178:	68f8      	ldr	r0, [r7, #12]
   1217a:	4b0b      	ldr	r3, [pc, #44]	; (121a8 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   1217c:	4798      	blx	r3
   1217e:	4603      	mov	r3, r0
   12180:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   12182:	8afa      	ldrh	r2, [r7, #22]
   12184:	683b      	ldr	r3, [r7, #0]
   12186:	9300      	str	r3, [sp, #0]
   12188:	4613      	mov	r3, r2
   1218a:	2202      	movs	r2, #2
   1218c:	68b9      	ldr	r1, [r7, #8]
   1218e:	68f8      	ldr	r0, [r7, #12]
   12190:	4c06      	ldr	r4, [pc, #24]	; (121ac <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   12192:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   12194:	8afb      	ldrh	r3, [r7, #22]
   12196:	79fa      	ldrb	r2, [r7, #7]
   12198:	68b9      	ldr	r1, [r7, #8]
   1219a:	68f8      	ldr	r0, [r7, #12]
   1219c:	4c04      	ldr	r4, [pc, #16]	; (121b0 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1219e:	47a0      	blx	r4
}
   121a0:	bf00      	nop
   121a2:	371c      	adds	r7, #28
   121a4:	46bd      	mov	sp, r7
   121a6:	bd90      	pop	{r4, r7, pc}
   121a8:	0001253d 	.word	0x0001253d
   121ac:	000123fd 	.word	0x000123fd
   121b0:	00012201 	.word	0x00012201

000121b4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   121b4:	b590      	push	{r4, r7, lr}
   121b6:	b087      	sub	sp, #28
   121b8:	af02      	add	r7, sp, #8
   121ba:	6078      	str	r0, [r7, #4]
   121bc:	460b      	mov	r3, r1
   121be:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   121c0:	78fb      	ldrb	r3, [r7, #3]
   121c2:	687a      	ldr	r2, [r7, #4]
   121c4:	4413      	add	r3, r2
   121c6:	78db      	ldrb	r3, [r3, #3]
   121c8:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   121ca:	687b      	ldr	r3, [r7, #4]
   121cc:	2200      	movs	r2, #0
   121ce:	705a      	strb	r2, [r3, #1]
	ready=false;
   121d0:	687b      	ldr	r3, [r7, #4]
   121d2:	2200      	movs	r2, #0
   121d4:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   121d6:	687b      	ldr	r3, [r7, #4]
   121d8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   121da:	7bfb      	ldrb	r3, [r7, #15]
   121dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   121e0:	b2db      	uxtb	r3, r3
   121e2:	9300      	str	r3, [sp, #0]
   121e4:	2300      	movs	r3, #0
   121e6:	2202      	movs	r2, #2
   121e8:	6878      	ldr	r0, [r7, #4]
   121ea:	4c04      	ldr	r4, [pc, #16]	; (121fc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   121ec:	47a0      	blx	r4
	channelOnProcess=channel_number;
   121ee:	687b      	ldr	r3, [r7, #4]
   121f0:	7bfa      	ldrb	r2, [r7, #15]
   121f2:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   121f4:	bf00      	nop
   121f6:	3714      	adds	r7, #20
   121f8:	46bd      	mov	sp, r7
   121fa:	bd90      	pop	{r4, r7, pc}
   121fc:	000124cd 	.word	0x000124cd

00012200 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   12200:	b590      	push	{r4, r7, lr}
   12202:	b089      	sub	sp, #36	; 0x24
   12204:	af02      	add	r7, sp, #8
   12206:	60f8      	str	r0, [r7, #12]
   12208:	60b9      	str	r1, [r7, #8]
   1220a:	4611      	mov	r1, r2
   1220c:	461a      	mov	r2, r3
   1220e:	460b      	mov	r3, r1
   12210:	71fb      	strb	r3, [r7, #7]
   12212:	4613      	mov	r3, r2
   12214:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   12216:	88ba      	ldrh	r2, [r7, #4]
   12218:	2300      	movs	r3, #0
   1221a:	9300      	str	r3, [sp, #0]
   1221c:	4613      	mov	r3, r2
   1221e:	2203      	movs	r2, #3
   12220:	68b9      	ldr	r1, [r7, #8]
   12222:	68f8      	ldr	r0, [r7, #12]
   12224:	4c03      	ldr	r4, [pc, #12]	; (12234 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   12226:	47a0      	blx	r4
   12228:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   1222a:	bf00      	nop
   1222c:	371c      	adds	r7, #28
   1222e:	46bd      	mov	sp, r7
   12230:	bd90      	pop	{r4, r7, pc}
   12232:	bf00      	nop
   12234:	000123fd 	.word	0x000123fd

00012238 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   12238:	b590      	push	{r4, r7, lr}
   1223a:	b085      	sub	sp, #20
   1223c:	af02      	add	r7, sp, #8
   1223e:	6078      	str	r0, [r7, #4]
   12240:	460b      	mov	r3, r1
   12242:	70fb      	strb	r3, [r7, #3]
   12244:	4613      	mov	r3, r2
   12246:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   12248:	78fb      	ldrb	r3, [r7, #3]
   1224a:	461a      	mov	r2, r3
   1224c:	2110      	movs	r1, #16
   1224e:	6878      	ldr	r0, [r7, #4]
   12250:	4b17      	ldr	r3, [pc, #92]	; (122b0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   12252:	4798      	blx	r3
   12254:	4603      	mov	r3, r0
   12256:	461a      	mov	r2, r3
   12258:	687b      	ldr	r3, [r7, #4]
   1225a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1225e:	687b      	ldr	r3, [r7, #4]
   12260:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12262:	687b      	ldr	r3, [r7, #4]
   12264:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   12268:	2300      	movs	r3, #0
   1226a:	9300      	str	r3, [sp, #0]
   1226c:	4613      	mov	r3, r2
   1226e:	2203      	movs	r2, #3
   12270:	6878      	ldr	r0, [r7, #4]
   12272:	4c10      	ldr	r4, [pc, #64]	; (122b4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   12274:	47a0      	blx	r4
   12276:	4602      	mov	r2, r0
   12278:	687b      	ldr	r3, [r7, #4]
   1227a:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   12280:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   12288:	687b      	ldr	r3, [r7, #4]
   1228a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1228c:	78bb      	ldrb	r3, [r7, #2]
   1228e:	78fa      	ldrb	r2, [r7, #3]
   12290:	6878      	ldr	r0, [r7, #4]
   12292:	4c09      	ldr	r4, [pc, #36]	; (122b8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   12294:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   12296:	687b      	ldr	r3, [r7, #4]
   12298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1229a:	0e1b      	lsrs	r3, r3, #24
   1229c:	b2da      	uxtb	r2, r3
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   122a2:	687b      	ldr	r3, [r7, #4]
   122a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   122a6:	4618      	mov	r0, r3
   122a8:	370c      	adds	r7, #12
   122aa:	46bd      	mov	sp, r7
   122ac:	bd90      	pop	{r4, r7, pc}
   122ae:	bf00      	nop
   122b0:	0001253d 	.word	0x0001253d
   122b4:	000123fd 	.word	0x000123fd
   122b8:	00012311 	.word	0x00012311

000122bc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   122bc:	b580      	push	{r7, lr}
   122be:	b082      	sub	sp, #8
   122c0:	af00      	add	r7, sp, #0
   122c2:	6078      	str	r0, [r7, #4]
   122c4:	460b      	mov	r3, r1
   122c6:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   122c8:	78fb      	ldrb	r3, [r7, #3]
   122ca:	687a      	ldr	r2, [r7, #4]
   122cc:	4413      	add	r3, r2
   122ce:	78db      	ldrb	r3, [r3, #3]
   122d0:	4619      	mov	r1, r3
   122d2:	6878      	ldr	r0, [r7, #4]
   122d4:	4b03      	ldr	r3, [pc, #12]	; (122e4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   122d6:	4798      	blx	r3
   122d8:	4603      	mov	r3, r0
}
   122da:	4618      	mov	r0, r3
   122dc:	3708      	adds	r7, #8
   122de:	46bd      	mov	sp, r7
   122e0:	bd80      	pop	{r7, pc}
   122e2:	bf00      	nop
   122e4:	000122e9 	.word	0x000122e9

000122e8 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   122e8:	b580      	push	{r7, lr}
   122ea:	b082      	sub	sp, #8
   122ec:	af00      	add	r7, sp, #0
   122ee:	6078      	str	r0, [r7, #4]
   122f0:	460b      	mov	r3, r1
   122f2:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   122f4:	78fb      	ldrb	r3, [r7, #3]
   122f6:	2202      	movs	r2, #2
   122f8:	4619      	mov	r1, r3
   122fa:	6878      	ldr	r0, [r7, #4]
   122fc:	4b03      	ldr	r3, [pc, #12]	; (1230c <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   122fe:	4798      	blx	r3
   12300:	4603      	mov	r3, r0
}
   12302:	4618      	mov	r0, r3
   12304:	3708      	adds	r7, #8
   12306:	46bd      	mov	sp, r7
   12308:	bd80      	pop	{r7, pc}
   1230a:	bf00      	nop
   1230c:	00012239 	.word	0x00012239

00012310 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   12310:	b580      	push	{r7, lr}
   12312:	b084      	sub	sp, #16
   12314:	af00      	add	r7, sp, #0
   12316:	60f8      	str	r0, [r7, #12]
   12318:	60b9      	str	r1, [r7, #8]
   1231a:	4611      	mov	r1, r2
   1231c:	461a      	mov	r2, r3
   1231e:	460b      	mov	r3, r1
   12320:	71fb      	strb	r3, [r7, #7]
   12322:	4613      	mov	r3, r2
   12324:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   12326:	68ba      	ldr	r2, [r7, #8]
   12328:	68fb      	ldr	r3, [r7, #12]
   1232a:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   1232c:	68fb      	ldr	r3, [r7, #12]
   1232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   12334:	2b00      	cmp	r3, #0
   12336:	d006      	beq.n	12346 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   12338:	68fb      	ldr	r3, [r7, #12]
   1233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1233c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12340:	461a      	mov	r2, r3
   12342:	68fb      	ldr	r3, [r7, #12]
   12344:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   12346:	79bb      	ldrb	r3, [r7, #6]
   12348:	2b02      	cmp	r3, #2
   1234a:	d11d      	bne.n	12388 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   1234c:	68fb      	ldr	r3, [r7, #12]
   1234e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   12350:	4b18      	ldr	r3, [pc, #96]	; (123b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   12352:	4610      	mov	r0, r2
   12354:	4798      	blx	r3
   12356:	4602      	mov	r2, r0
   12358:	4b17      	ldr	r3, [pc, #92]	; (123b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1235a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1235e:	4610      	mov	r0, r2
   12360:	4798      	blx	r3
   12362:	4603      	mov	r3, r0
   12364:	461a      	mov	r2, r3
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1236a:	79fb      	ldrb	r3, [r7, #7]
   1236c:	4619      	mov	r1, r3
   1236e:	68f8      	ldr	r0, [r7, #12]
   12370:	4b12      	ldr	r3, [pc, #72]	; (123bc <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   12372:	4798      	blx	r3
   12374:	4603      	mov	r3, r0
   12376:	4618      	mov	r0, r3
   12378:	68fb      	ldr	r3, [r7, #12]
   1237a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1237c:	68f9      	ldr	r1, [r7, #12]
   1237e:	1c83      	adds	r3, r0, #2
   12380:	009b      	lsls	r3, r3, #2
   12382:	440b      	add	r3, r1
   12384:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   12386:	e011      	b.n	123ac <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   12388:	79bb      	ldrb	r3, [r7, #6]
   1238a:	2b01      	cmp	r3, #1
   1238c:	d10e      	bne.n	123ac <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   1238e:	68fb      	ldr	r3, [r7, #12]
   12390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   12392:	4b08      	ldr	r3, [pc, #32]	; (123b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   12394:	4610      	mov	r0, r2
   12396:	4798      	blx	r3
   12398:	4602      	mov	r2, r0
   1239a:	4b07      	ldr	r3, [pc, #28]	; (123b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1239c:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   123a0:	4610      	mov	r0, r2
   123a2:	4798      	blx	r3
   123a4:	4603      	mov	r3, r0
   123a6:	461a      	mov	r2, r3
   123a8:	68fb      	ldr	r3, [r7, #12]
   123aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
   123ac:	bf00      	nop
   123ae:	3710      	adds	r7, #16
   123b0:	46bd      	mov	sp, r7
   123b2:	bd80      	pop	{r7, pc}
   123b4:	00013745 	.word	0x00013745
   123b8:	00013955 	.word	0x00013955
   123bc:	000123c1 	.word	0x000123c1

000123c0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   123c0:	b480      	push	{r7}
   123c2:	b085      	sub	sp, #20
   123c4:	af00      	add	r7, sp, #0
   123c6:	6078      	str	r0, [r7, #4]
   123c8:	460b      	mov	r3, r1
   123ca:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   123cc:	2300      	movs	r3, #0
   123ce:	73fb      	strb	r3, [r7, #15]
   123d0:	7bfb      	ldrb	r3, [r7, #15]
   123d2:	2b03      	cmp	r3, #3
   123d4:	dc0c      	bgt.n	123f0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   123d6:	7bfb      	ldrb	r3, [r7, #15]
   123d8:	687a      	ldr	r2, [r7, #4]
   123da:	4413      	add	r3, r2
   123dc:	78db      	ldrb	r3, [r3, #3]
   123de:	78fa      	ldrb	r2, [r7, #3]
   123e0:	429a      	cmp	r2, r3
   123e2:	d101      	bne.n	123e8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   123e4:	7bfb      	ldrb	r3, [r7, #15]
   123e6:	e004      	b.n	123f2 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   123e8:	7bfb      	ldrb	r3, [r7, #15]
   123ea:	3301      	adds	r3, #1
   123ec:	73fb      	strb	r3, [r7, #15]
   123ee:	e7ef      	b.n	123d0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   123f0:	2300      	movs	r3, #0
}
   123f2:	4618      	mov	r0, r3
   123f4:	3714      	adds	r7, #20
   123f6:	46bd      	mov	sp, r7
   123f8:	bc80      	pop	{r7}
   123fa:	4770      	bx	lr

000123fc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   123fc:	b590      	push	{r4, r7, lr}
   123fe:	b089      	sub	sp, #36	; 0x24
   12400:	af02      	add	r7, sp, #8
   12402:	60f8      	str	r0, [r7, #12]
   12404:	60b9      	str	r1, [r7, #8]
   12406:	4611      	mov	r1, r2
   12408:	461a      	mov	r2, r3
   1240a:	460b      	mov	r3, r1
   1240c:	71fb      	strb	r3, [r7, #7]
   1240e:	4613      	mov	r3, r2
   12410:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   12412:	2300      	movs	r3, #0
   12414:	75fb      	strb	r3, [r7, #23]
   12416:	7dfb      	ldrb	r3, [r7, #23]
   12418:	2b06      	cmp	r3, #6
   1241a:	dc09      	bgt.n	12430 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   1241c:	68fb      	ldr	r3, [r7, #12]
   1241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12420:	7dfb      	ldrb	r3, [r7, #23]
   12422:	4413      	add	r3, r2
   12424:	2200      	movs	r2, #0
   12426:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   12428:	7dfb      	ldrb	r3, [r7, #23]
   1242a:	3301      	adds	r3, #1
   1242c:	75fb      	strb	r3, [r7, #23]
   1242e:	e7f2      	b.n	12416 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   12430:	68fb      	ldr	r3, [r7, #12]
   12432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12434:	79fa      	ldrb	r2, [r7, #7]
   12436:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   12438:	68fb      	ldr	r3, [r7, #12]
   1243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1243c:	3301      	adds	r3, #1
   1243e:	88ba      	ldrh	r2, [r7, #4]
   12440:	1212      	asrs	r2, r2, #8
   12442:	b2d2      	uxtb	r2, r2
   12444:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   12446:	68fb      	ldr	r3, [r7, #12]
   12448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1244a:	3302      	adds	r3, #2
   1244c:	88ba      	ldrh	r2, [r7, #4]
   1244e:	b2d2      	uxtb	r2, r2
   12450:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   12452:	68fb      	ldr	r3, [r7, #12]
   12454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12456:	3303      	adds	r3, #3
   12458:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1245a:	0e12      	lsrs	r2, r2, #24
   1245c:	b2d2      	uxtb	r2, r2
   1245e:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   12460:	68fb      	ldr	r3, [r7, #12]
   12462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12464:	3304      	adds	r3, #4
   12466:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12468:	0c12      	lsrs	r2, r2, #16
   1246a:	b2d2      	uxtb	r2, r2
   1246c:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   1246e:	68fb      	ldr	r3, [r7, #12]
   12470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12472:	3305      	adds	r3, #5
   12474:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12476:	0a12      	lsrs	r2, r2, #8
   12478:	b2d2      	uxtb	r2, r2
   1247a:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   1247c:	68fb      	ldr	r3, [r7, #12]
   1247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12480:	3306      	adds	r3, #6
   12482:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12484:	b2d2      	uxtb	r2, r2
   12486:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   12488:	68fb      	ldr	r3, [r7, #12]
   1248a:	6a18      	ldr	r0, [r3, #32]
   1248c:	68fb      	ldr	r3, [r7, #12]
   1248e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12490:	f107 0110 	add.w	r1, r7, #16
   12494:	2307      	movs	r3, #7
   12496:	9300      	str	r3, [sp, #0]
   12498:	460b      	mov	r3, r1
   1249a:	68b9      	ldr	r1, [r7, #8]
   1249c:	4c0a      	ldr	r4, [pc, #40]	; (124c8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1249e:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   124a0:	7c3b      	ldrb	r3, [r7, #16]
   124a2:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   124a4:	7c7b      	ldrb	r3, [r7, #17]
   124a6:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   124a8:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   124aa:	7cbb      	ldrb	r3, [r7, #18]
   124ac:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   124ae:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   124b0:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   124b2:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   124b4:	68fb      	ldr	r3, [r7, #12]
   124b6:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   124b8:	bf00      	nop
	return output_data;
   124ba:	68fb      	ldr	r3, [r7, #12]
   124bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   124be:	4618      	mov	r0, r3
   124c0:	371c      	adds	r7, #28
   124c2:	46bd      	mov	sp, r7
   124c4:	bd90      	pop	{r4, r7, pc}
   124c6:	bf00      	nop
   124c8:	000129f1 	.word	0x000129f1

000124cc <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   124cc:	b590      	push	{r4, r7, lr}
   124ce:	b087      	sub	sp, #28
   124d0:	af02      	add	r7, sp, #8
   124d2:	60f8      	str	r0, [r7, #12]
   124d4:	60b9      	str	r1, [r7, #8]
   124d6:	4611      	mov	r1, r2
   124d8:	461a      	mov	r2, r3
   124da:	460b      	mov	r3, r1
   124dc:	71fb      	strb	r3, [r7, #7]
   124de:	4613      	mov	r3, r2
   124e0:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   124e2:	68fb      	ldr	r3, [r7, #12]
   124e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   124e6:	79fa      	ldrb	r2, [r7, #7]
   124e8:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   124ea:	68fb      	ldr	r3, [r7, #12]
   124ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   124ee:	3301      	adds	r3, #1
   124f0:	88ba      	ldrh	r2, [r7, #4]
   124f2:	1212      	asrs	r2, r2, #8
   124f4:	b2d2      	uxtb	r2, r2
   124f6:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   124f8:	68fb      	ldr	r3, [r7, #12]
   124fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   124fc:	3302      	adds	r3, #2
   124fe:	88ba      	ldrh	r2, [r7, #4]
   12500:	b2d2      	uxtb	r2, r2
   12502:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   12504:	68fb      	ldr	r3, [r7, #12]
   12506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12508:	3303      	adds	r3, #3
   1250a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1250e:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   12510:	68fb      	ldr	r3, [r7, #12]
   12512:	6a18      	ldr	r0, [r3, #32]
   12514:	68fb      	ldr	r3, [r7, #12]
   12516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12518:	68fb      	ldr	r3, [r7, #12]
   1251a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1251c:	2304      	movs	r3, #4
   1251e:	9300      	str	r3, [sp, #0]
   12520:	460b      	mov	r3, r1
   12522:	68b9      	ldr	r1, [r7, #8]
   12524:	4c04      	ldr	r4, [pc, #16]	; (12538 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   12526:	47a0      	blx	r4
	return rx[0];
   12528:	68fb      	ldr	r3, [r7, #12]
   1252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1252c:	781b      	ldrb	r3, [r3, #0]
}
   1252e:	4618      	mov	r0, r3
   12530:	3714      	adds	r7, #20
   12532:	46bd      	mov	sp, r7
   12534:	bd90      	pop	{r4, r7, pc}
   12536:	bf00      	nop
   12538:	000129f1 	.word	0x000129f1

0001253c <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   1253c:	b480      	push	{r7}
   1253e:	b083      	sub	sp, #12
   12540:	af00      	add	r7, sp, #0
   12542:	6078      	str	r0, [r7, #4]
   12544:	460b      	mov	r3, r1
   12546:	807b      	strh	r3, [r7, #2]
   12548:	4613      	mov	r3, r2
   1254a:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   1254c:	787b      	ldrb	r3, [r7, #1]
   1254e:	3b01      	subs	r3, #1
   12550:	b29b      	uxth	r3, r3
   12552:	009b      	lsls	r3, r3, #2
   12554:	b29a      	uxth	r2, r3
   12556:	887b      	ldrh	r3, [r7, #2]
   12558:	4413      	add	r3, r2
   1255a:	b29b      	uxth	r3, r3
}
   1255c:	4618      	mov	r0, r3
   1255e:	370c      	adds	r7, #12
   12560:	46bd      	mov	sp, r7
   12562:	bc80      	pop	{r7}
   12564:	4770      	bx	lr
	...

00012568 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   12568:	b590      	push	{r4, r7, lr}
   1256a:	b085      	sub	sp, #20
   1256c:	af00      	add	r7, sp, #0
   1256e:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   12570:	4b25      	ldr	r3, [pc, #148]	; (12608 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12572:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   12574:	687b      	ldr	r3, [r7, #4]
   12576:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12578:	68fb      	ldr	r3, [r7, #12]
   1257a:	2202      	movs	r2, #2
   1257c:	6878      	ldr	r0, [r7, #4]
   1257e:	4c23      	ldr	r4, [pc, #140]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12580:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   12582:	4b23      	ldr	r3, [pc, #140]	; (12610 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   12584:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   12586:	687b      	ldr	r3, [r7, #4]
   12588:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1258a:	68fb      	ldr	r3, [r7, #12]
   1258c:	2204      	movs	r2, #4
   1258e:	6878      	ldr	r0, [r7, #4]
   12590:	4c1e      	ldr	r4, [pc, #120]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12592:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   12594:	4b1c      	ldr	r3, [pc, #112]	; (12608 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12596:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   12598:	687b      	ldr	r3, [r7, #4]
   1259a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1259c:	68fb      	ldr	r3, [r7, #12]
   1259e:	2207      	movs	r2, #7
   125a0:	6878      	ldr	r0, [r7, #4]
   125a2:	4c1a      	ldr	r4, [pc, #104]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   125a4:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   125a6:	4b1b      	ldr	r3, [pc, #108]	; (12614 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   125a8:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   125aa:	687b      	ldr	r3, [r7, #4]
   125ac:	6d99      	ldr	r1, [r3, #88]	; 0x58
   125ae:	68fb      	ldr	r3, [r7, #12]
   125b0:	2209      	movs	r2, #9
   125b2:	6878      	ldr	r0, [r7, #4]
   125b4:	4c15      	ldr	r4, [pc, #84]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   125b6:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   125b8:	4b13      	ldr	r3, [pc, #76]	; (12608 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   125ba:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   125bc:	687b      	ldr	r3, [r7, #4]
   125be:	6d99      	ldr	r1, [r3, #88]	; 0x58
   125c0:	68fb      	ldr	r3, [r7, #12]
   125c2:	220c      	movs	r2, #12
   125c4:	6878      	ldr	r0, [r7, #4]
   125c6:	4c11      	ldr	r4, [pc, #68]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   125c8:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   125ca:	4b13      	ldr	r3, [pc, #76]	; (12618 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   125cc:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   125d2:	68fb      	ldr	r3, [r7, #12]
   125d4:	220e      	movs	r2, #14
   125d6:	6878      	ldr	r0, [r7, #4]
   125d8:	4c0c      	ldr	r4, [pc, #48]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   125da:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   125dc:	4b0a      	ldr	r3, [pc, #40]	; (12608 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   125de:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   125e0:	687b      	ldr	r3, [r7, #4]
   125e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   125e4:	68fb      	ldr	r3, [r7, #12]
   125e6:	2211      	movs	r2, #17
   125e8:	6878      	ldr	r0, [r7, #4]
   125ea:	4c08      	ldr	r4, [pc, #32]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   125ec:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   125ee:	4b0b      	ldr	r3, [pc, #44]	; (1261c <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   125f0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   125f2:	687b      	ldr	r3, [r7, #4]
   125f4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   125f6:	68fb      	ldr	r3, [r7, #12]
   125f8:	2213      	movs	r2, #19
   125fa:	6878      	ldr	r0, [r7, #4]
   125fc:	4c03      	ldr	r4, [pc, #12]	; (1260c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   125fe:	47a0      	blx	r4

}
   12600:	bf00      	nop
   12602:	3714      	adds	r7, #20
   12604:	46bd      	mov	sp, r7
   12606:	bd90      	pop	{r4, r7, pc}
   12608:	e89c4000 	.word	0xe89c4000
   1260c:	00012161 	.word	0x00012161
   12610:	60a91000 	.word	0x60a91000
   12614:	61e91000 	.word	0x61e91000
   12618:	63291000 	.word	0x63291000
   1261c:	64691000 	.word	0x64691000

00012620 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   12620:	b590      	push	{r4, r7, lr}
   12622:	b085      	sub	sp, #20
   12624:	af02      	add	r7, sp, #8
   12626:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   12628:	687b      	ldr	r3, [r7, #4]
   1262a:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   1262c:	2300      	movs	r3, #0
   1262e:	9300      	str	r3, [sp, #0]
   12630:	23f0      	movs	r3, #240	; 0xf0
   12632:	2202      	movs	r2, #2
   12634:	6878      	ldr	r0, [r7, #4]
   12636:	4c07      	ldr	r4, [pc, #28]	; (12654 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   12638:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   1263a:	687b      	ldr	r3, [r7, #4]
   1263c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1263e:	2300      	movs	r3, #0
   12640:	9300      	str	r3, [sp, #0]
   12642:	23ff      	movs	r3, #255	; 0xff
   12644:	2202      	movs	r2, #2
   12646:	6878      	ldr	r0, [r7, #4]
   12648:	4c02      	ldr	r4, [pc, #8]	; (12654 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1264a:	47a0      	blx	r4
}
   1264c:	bf00      	nop
   1264e:	370c      	adds	r7, #12
   12650:	46bd      	mov	sp, r7
   12652:	bd90      	pop	{r4, r7, pc}
   12654:	000124cd 	.word	0x000124cd

00012658 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   12658:	b580      	push	{r7, lr}
   1265a:	b082      	sub	sp, #8
   1265c:	af00      	add	r7, sp, #0
   1265e:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   12660:	687b      	ldr	r3, [r7, #4]
   12662:	2200      	movs	r2, #0
   12664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   12668:	687b      	ldr	r3, [r7, #4]
   1266a:	2200      	movs	r2, #0
   1266c:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   1266e:	4a31      	ldr	r2, [pc, #196]	; (12734 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   12670:	687b      	ldr	r3, [r7, #4]
   12672:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   12674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12678:	492f      	ldr	r1, [pc, #188]	; (12738 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1267a:	4830      	ldr	r0, [pc, #192]	; (1273c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   1267c:	4b30      	ldr	r3, [pc, #192]	; (12740 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   1267e:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   12680:	687b      	ldr	r3, [r7, #4]
   12682:	79db      	ldrb	r3, [r3, #7]
   12684:	2b01      	cmp	r3, #1
   12686:	d009      	beq.n	1269c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12688:	687b      	ldr	r3, [r7, #4]
   1268a:	789b      	ldrb	r3, [r3, #2]
   1268c:	b2db      	uxtb	r3, r3
   1268e:	f083 0301 	eor.w	r3, r3, #1
   12692:	b2db      	uxtb	r3, r3
   12694:	2b00      	cmp	r3, #0
   12696:	d001      	beq.n	1269c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12698:	2301      	movs	r3, #1
   1269a:	e000      	b.n	1269e <_ZN13LTC2983_Class8SelfTestEv+0x46>
   1269c:	2300      	movs	r3, #0
   1269e:	2b00      	cmp	r3, #0
   126a0:	d034      	beq.n	1270c <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   126a2:	2100      	movs	r1, #0
   126a4:	6878      	ldr	r0, [r7, #4]
   126a6:	4b27      	ldr	r3, [pc, #156]	; (12744 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   126a8:	4798      	blx	r3
		delay_ms(1);
   126aa:	2001      	movs	r0, #1
   126ac:	4b26      	ldr	r3, [pc, #152]	; (12748 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   126ae:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   126b0:	687b      	ldr	r3, [r7, #4]
   126b2:	781b      	ldrb	r3, [r3, #0]
   126b4:	b2db      	uxtb	r3, r3
   126b6:	f083 0301 	eor.w	r3, r3, #1
   126ba:	b2db      	uxtb	r3, r3
   126bc:	2b00      	cmp	r3, #0
   126be:	d009      	beq.n	126d4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   126c0:	687b      	ldr	r3, [r7, #4]
   126c2:	789b      	ldrb	r3, [r3, #2]
   126c4:	b2db      	uxtb	r3, r3
   126c6:	f083 0301 	eor.w	r3, r3, #1
   126ca:	b2db      	uxtb	r3, r3
   126cc:	2b00      	cmp	r3, #0
   126ce:	d001      	beq.n	126d4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   126d0:	2301      	movs	r3, #1
   126d2:	e000      	b.n	126d6 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   126d4:	2300      	movs	r3, #0
   126d6:	2b00      	cmp	r3, #0
   126d8:	d000      	beq.n	126dc <_ZN13LTC2983_Class8SelfTestEv+0x84>
   126da:	e7e9      	b.n	126b0 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   126dc:	687b      	ldr	r3, [r7, #4]
   126de:	789b      	ldrb	r3, [r3, #2]
   126e0:	b2db      	uxtb	r3, r3
   126e2:	f083 0301 	eor.w	r3, r3, #1
   126e6:	b2db      	uxtb	r3, r3
   126e8:	2b00      	cmp	r3, #0
   126ea:	d0c9      	beq.n	12680 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   126ec:	687b      	ldr	r3, [r7, #4]
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	b2db      	uxtb	r3, r3
   126f2:	2b00      	cmp	r3, #0
   126f4:	d006      	beq.n	12704 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   126f6:	687b      	ldr	r3, [r7, #4]
   126f8:	78db      	ldrb	r3, [r3, #3]
   126fa:	4619      	mov	r1, r3
   126fc:	6878      	ldr	r0, [r7, #4]
   126fe:	4b13      	ldr	r3, [pc, #76]	; (1274c <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   12700:	4798      	blx	r3
   12702:	e7bd      	b.n	12680 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   12704:	2001      	movs	r0, #1
   12706:	4b10      	ldr	r3, [pc, #64]	; (12748 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   12708:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1270a:	e7b9      	b.n	12680 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   1270c:	490a      	ldr	r1, [pc, #40]	; (12738 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1270e:	480b      	ldr	r0, [pc, #44]	; (1273c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   12710:	4b0f      	ldr	r3, [pc, #60]	; (12750 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   12712:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	79db      	ldrb	r3, [r3, #7]
   12718:	2b01      	cmp	r3, #1
   1271a:	bf0c      	ite	eq
   1271c:	2301      	moveq	r3, #1
   1271e:	2300      	movne	r3, #0
   12720:	b2da      	uxtb	r2, r3
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	771a      	strb	r2, [r3, #28]
	return	isOK;
   12726:	687b      	ldr	r3, [r7, #4]
   12728:	7f1b      	ldrb	r3, [r3, #28]
	}
   1272a:	4618      	mov	r0, r3
   1272c:	3708      	adds	r7, #8
   1272e:	46bd      	mov	sp, r7
   12730:	bd80      	pop	{r7, pc}
   12732:	bf00      	nop
   12734:	20009cdc 	.word	0x20009cdc
   12738:	00012079 	.word	0x00012079
   1273c:	20009bdc 	.word	0x20009bdc
   12740:	0000e061 	.word	0x0000e061
   12744:	000121b5 	.word	0x000121b5
   12748:	00002a99 	.word	0x00002a99
   1274c:	000122e9 	.word	0x000122e9
   12750:	0000e009 	.word	0x0000e009

00012754 <_Z41__static_initialization_and_destruction_0ii>:
   12754:	b580      	push	{r7, lr}
   12756:	b082      	sub	sp, #8
   12758:	af00      	add	r7, sp, #0
   1275a:	6078      	str	r0, [r7, #4]
   1275c:	6039      	str	r1, [r7, #0]
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	2b01      	cmp	r3, #1
   12762:	d14c      	bne.n	127fe <_Z41__static_initialization_and_destruction_0ii+0xaa>
   12764:	683b      	ldr	r3, [r7, #0]
   12766:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1276a:	4293      	cmp	r3, r2
   1276c:	d147      	bne.n	127fe <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1276e:	4926      	ldr	r1, [pc, #152]	; (12808 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   12770:	4826      	ldr	r0, [pc, #152]	; (1280c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   12772:	4b27      	ldr	r3, [pc, #156]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12774:	4798      	blx	r3
   12776:	4a27      	ldr	r2, [pc, #156]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12778:	4927      	ldr	r1, [pc, #156]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1277a:	4824      	ldr	r0, [pc, #144]	; (1280c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1277c:	4b27      	ldr	r3, [pc, #156]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1277e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   12780:	4927      	ldr	r1, [pc, #156]	; (12820 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   12782:	4828      	ldr	r0, [pc, #160]	; (12824 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   12784:	4b22      	ldr	r3, [pc, #136]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12786:	4798      	blx	r3
   12788:	4a22      	ldr	r2, [pc, #136]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1278a:	4923      	ldr	r1, [pc, #140]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1278c:	4825      	ldr	r0, [pc, #148]	; (12824 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1278e:	4b23      	ldr	r3, [pc, #140]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12790:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   12792:	4925      	ldr	r1, [pc, #148]	; (12828 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   12794:	4825      	ldr	r0, [pc, #148]	; (1282c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   12796:	4b1e      	ldr	r3, [pc, #120]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12798:	4798      	blx	r3
   1279a:	4a1e      	ldr	r2, [pc, #120]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1279c:	491e      	ldr	r1, [pc, #120]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1279e:	4823      	ldr	r0, [pc, #140]	; (1282c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   127a0:	4b1e      	ldr	r3, [pc, #120]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   127a2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   127a4:	4922      	ldr	r1, [pc, #136]	; (12830 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   127a6:	4823      	ldr	r0, [pc, #140]	; (12834 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   127a8:	4b19      	ldr	r3, [pc, #100]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   127aa:	4798      	blx	r3
   127ac:	4a19      	ldr	r2, [pc, #100]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   127ae:	491a      	ldr	r1, [pc, #104]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   127b0:	4820      	ldr	r0, [pc, #128]	; (12834 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   127b2:	4b1a      	ldr	r3, [pc, #104]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   127b4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   127b6:	4920      	ldr	r1, [pc, #128]	; (12838 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   127b8:	4820      	ldr	r0, [pc, #128]	; (1283c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   127ba:	4b15      	ldr	r3, [pc, #84]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   127bc:	4798      	blx	r3
   127be:	4a15      	ldr	r2, [pc, #84]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   127c0:	4915      	ldr	r1, [pc, #84]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   127c2:	481e      	ldr	r0, [pc, #120]	; (1283c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   127c4:	4b15      	ldr	r3, [pc, #84]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   127c6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   127c8:	491d      	ldr	r1, [pc, #116]	; (12840 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   127ca:	481e      	ldr	r0, [pc, #120]	; (12844 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   127cc:	4b10      	ldr	r3, [pc, #64]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   127ce:	4798      	blx	r3
   127d0:	4a10      	ldr	r2, [pc, #64]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   127d2:	4911      	ldr	r1, [pc, #68]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   127d4:	481b      	ldr	r0, [pc, #108]	; (12844 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   127d6:	4b11      	ldr	r3, [pc, #68]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   127d8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   127da:	491b      	ldr	r1, [pc, #108]	; (12848 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   127dc:	481b      	ldr	r0, [pc, #108]	; (1284c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   127de:	4b0c      	ldr	r3, [pc, #48]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   127e0:	4798      	blx	r3
   127e2:	4a0c      	ldr	r2, [pc, #48]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   127e4:	490c      	ldr	r1, [pc, #48]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   127e6:	4819      	ldr	r0, [pc, #100]	; (1284c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   127e8:	4b0c      	ldr	r3, [pc, #48]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   127ea:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   127ec:	4918      	ldr	r1, [pc, #96]	; (12850 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   127ee:	4819      	ldr	r0, [pc, #100]	; (12854 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   127f0:	4b07      	ldr	r3, [pc, #28]	; (12810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   127f2:	4798      	blx	r3
   127f4:	4a07      	ldr	r2, [pc, #28]	; (12814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   127f6:	4908      	ldr	r1, [pc, #32]	; (12818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   127f8:	4816      	ldr	r0, [pc, #88]	; (12854 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   127fa:	4b08      	ldr	r3, [pc, #32]	; (1281c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   127fc:	4798      	blx	r3
   127fe:	bf00      	nop
   12800:	3708      	adds	r7, #8
   12802:	46bd      	mov	sp, r7
   12804:	bd80      	pop	{r7, pc}
   12806:	bf00      	nop
   12808:	20009f88 	.word	0x20009f88
   1280c:	20009bdc 	.word	0x20009bdc
   12810:	0000dd8d 	.word	0x0000dd8d
   12814:	20000000 	.word	0x20000000
   12818:	0000ddc5 	.word	0x0000ddc5
   1281c:	000135c5 	.word	0x000135c5
   12820:	2000a01c 	.word	0x2000a01c
   12824:	20009bfc 	.word	0x20009bfc
   12828:	2000a140 	.word	0x2000a140
   1282c:	20009c1c 	.word	0x20009c1c
   12830:	2000a03c 	.word	0x2000a03c
   12834:	20009c3c 	.word	0x20009c3c
   12838:	2000a100 	.word	0x2000a100
   1283c:	20009c5c 	.word	0x20009c5c
   12840:	2000a120 	.word	0x2000a120
   12844:	20009c7c 	.word	0x20009c7c
   12848:	20009ff8 	.word	0x20009ff8
   1284c:	20009c9c 	.word	0x20009c9c
   12850:	2000a098 	.word	0x2000a098
   12854:	20009cbc 	.word	0x20009cbc

00012858 <_GLOBAL__sub_I_ptrLTCClass>:
   12858:	b580      	push	{r7, lr}
   1285a:	af00      	add	r7, sp, #0
   1285c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12860:	2001      	movs	r0, #1
   12862:	4b01      	ldr	r3, [pc, #4]	; (12868 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   12864:	4798      	blx	r3
   12866:	bd80      	pop	{r7, pc}
   12868:	00012755 	.word	0x00012755

0001286c <hri_port_set_OUT_reg>:
{
   1286c:	b480      	push	{r7}
   1286e:	b085      	sub	sp, #20
   12870:	af00      	add	r7, sp, #0
   12872:	60f8      	str	r0, [r7, #12]
   12874:	460b      	mov	r3, r1
   12876:	607a      	str	r2, [r7, #4]
   12878:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1287a:	7afb      	ldrb	r3, [r7, #11]
   1287c:	68fa      	ldr	r2, [r7, #12]
   1287e:	01db      	lsls	r3, r3, #7
   12880:	4413      	add	r3, r2
   12882:	3318      	adds	r3, #24
   12884:	687a      	ldr	r2, [r7, #4]
   12886:	601a      	str	r2, [r3, #0]
}
   12888:	bf00      	nop
   1288a:	3714      	adds	r7, #20
   1288c:	46bd      	mov	sp, r7
   1288e:	bc80      	pop	{r7}
   12890:	4770      	bx	lr

00012892 <hri_port_clear_OUT_reg>:
{
   12892:	b480      	push	{r7}
   12894:	b085      	sub	sp, #20
   12896:	af00      	add	r7, sp, #0
   12898:	60f8      	str	r0, [r7, #12]
   1289a:	460b      	mov	r3, r1
   1289c:	607a      	str	r2, [r7, #4]
   1289e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   128a0:	7afb      	ldrb	r3, [r7, #11]
   128a2:	68fa      	ldr	r2, [r7, #12]
   128a4:	01db      	lsls	r3, r3, #7
   128a6:	4413      	add	r3, r2
   128a8:	3314      	adds	r3, #20
   128aa:	687a      	ldr	r2, [r7, #4]
   128ac:	601a      	str	r2, [r3, #0]
}
   128ae:	bf00      	nop
   128b0:	3714      	adds	r7, #20
   128b2:	46bd      	mov	sp, r7
   128b4:	bc80      	pop	{r7}
   128b6:	4770      	bx	lr

000128b8 <_gpio_set_level>:
{
   128b8:	b580      	push	{r7, lr}
   128ba:	b082      	sub	sp, #8
   128bc:	af00      	add	r7, sp, #0
   128be:	4603      	mov	r3, r0
   128c0:	6039      	str	r1, [r7, #0]
   128c2:	71fb      	strb	r3, [r7, #7]
   128c4:	4613      	mov	r3, r2
   128c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   128c8:	79bb      	ldrb	r3, [r7, #6]
   128ca:	2b00      	cmp	r3, #0
   128cc:	d006      	beq.n	128dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   128ce:	79fb      	ldrb	r3, [r7, #7]
   128d0:	683a      	ldr	r2, [r7, #0]
   128d2:	4619      	mov	r1, r3
   128d4:	4806      	ldr	r0, [pc, #24]	; (128f0 <_gpio_set_level+0x38>)
   128d6:	4b07      	ldr	r3, [pc, #28]	; (128f4 <_gpio_set_level+0x3c>)
   128d8:	4798      	blx	r3
}
   128da:	e005      	b.n	128e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   128dc:	79fb      	ldrb	r3, [r7, #7]
   128de:	683a      	ldr	r2, [r7, #0]
   128e0:	4619      	mov	r1, r3
   128e2:	4803      	ldr	r0, [pc, #12]	; (128f0 <_gpio_set_level+0x38>)
   128e4:	4b04      	ldr	r3, [pc, #16]	; (128f8 <_gpio_set_level+0x40>)
   128e6:	4798      	blx	r3
}
   128e8:	bf00      	nop
   128ea:	3708      	adds	r7, #8
   128ec:	46bd      	mov	sp, r7
   128ee:	bd80      	pop	{r7, pc}
   128f0:	41008000 	.word	0x41008000
   128f4:	0001286d 	.word	0x0001286d
   128f8:	00012893 	.word	0x00012893

000128fc <gpio_set_pin_level>:
{
   128fc:	b580      	push	{r7, lr}
   128fe:	b082      	sub	sp, #8
   12900:	af00      	add	r7, sp, #0
   12902:	4603      	mov	r3, r0
   12904:	460a      	mov	r2, r1
   12906:	71fb      	strb	r3, [r7, #7]
   12908:	4613      	mov	r3, r2
   1290a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1290c:	79fb      	ldrb	r3, [r7, #7]
   1290e:	115b      	asrs	r3, r3, #5
   12910:	b2d8      	uxtb	r0, r3
   12912:	79fb      	ldrb	r3, [r7, #7]
   12914:	f003 031f 	and.w	r3, r3, #31
   12918:	2201      	movs	r2, #1
   1291a:	fa02 f303 	lsl.w	r3, r2, r3
   1291e:	79ba      	ldrb	r2, [r7, #6]
   12920:	4619      	mov	r1, r3
   12922:	4b03      	ldr	r3, [pc, #12]	; (12930 <gpio_set_pin_level+0x34>)
   12924:	4798      	blx	r3
}
   12926:	bf00      	nop
   12928:	3708      	adds	r7, #8
   1292a:	46bd      	mov	sp, r7
   1292c:	bd80      	pop	{r7, pc}
   1292e:	bf00      	nop
   12930:	000128b9 	.word	0x000128b9

00012934 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   12934:	b480      	push	{r7}
   12936:	b083      	sub	sp, #12
   12938:	af00      	add	r7, sp, #0
   1293a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   1293c:	4a05      	ldr	r2, [pc, #20]	; (12954 <_ZN6LT_SPIC1Ev+0x20>)
   1293e:	687b      	ldr	r3, [r7, #4]
   12940:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   12942:	687b      	ldr	r3, [r7, #4]
   12944:	4a04      	ldr	r2, [pc, #16]	; (12958 <_ZN6LT_SPIC1Ev+0x24>)
   12946:	605a      	str	r2, [r3, #4]
} //LT_SPI
   12948:	687b      	ldr	r3, [r7, #4]
   1294a:	4618      	mov	r0, r3
   1294c:	370c      	adds	r7, #12
   1294e:	46bd      	mov	sp, r7
   12950:	bc80      	pop	{r7}
   12952:	4770      	bx	lr
   12954:	20009ce0 	.word	0x20009ce0
   12958:	20009ce4 	.word	0x20009ce4

0001295c <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   1295c:	b480      	push	{r7}
   1295e:	b083      	sub	sp, #12
   12960:	af00      	add	r7, sp, #0
   12962:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	4618      	mov	r0, r3
   12968:	370c      	adds	r7, #12
   1296a:	46bd      	mov	sp, r7
   1296c:	bc80      	pop	{r7}
   1296e:	4770      	bx	lr

00012970 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   12970:	b580      	push	{r7, lr}
   12972:	b082      	sub	sp, #8
   12974:	af00      	add	r7, sp, #0
   12976:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	685a      	ldr	r2, [r3, #4]
   1297c:	687b      	ldr	r3, [r7, #4]
   1297e:	691b      	ldr	r3, [r3, #16]
   12980:	4619      	mov	r1, r3
   12982:	4610      	mov	r0, r2
   12984:	4b0e      	ldr	r3, [pc, #56]	; (129c0 <_ZN6LT_SPI4initEv+0x50>)
   12986:	4798      	blx	r3
	spiTemp->init();
   12988:	687b      	ldr	r3, [r7, #4]
   1298a:	685b      	ldr	r3, [r3, #4]
   1298c:	4618      	mov	r0, r3
   1298e:	4b0d      	ldr	r3, [pc, #52]	; (129c4 <_ZN6LT_SPI4initEv+0x54>)
   12990:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   12992:	687b      	ldr	r3, [r7, #4]
   12994:	685b      	ldr	r3, [r3, #4]
   12996:	685a      	ldr	r2, [r3, #4]
   12998:	687b      	ldr	r3, [r7, #4]
   1299a:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   1299c:	687b      	ldr	r3, [r7, #4]
   1299e:	685b      	ldr	r3, [r3, #4]
   129a0:	689a      	ldr	r2, [r3, #8]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   129a6:	687b      	ldr	r3, [r7, #4]
   129a8:	685b      	ldr	r3, [r3, #4]
   129aa:	4618      	mov	r0, r3
   129ac:	4b06      	ldr	r3, [pc, #24]	; (129c8 <_ZN6LT_SPI4initEv+0x58>)
   129ae:	4798      	blx	r3
	ready=true;
   129b0:	687b      	ldr	r3, [r7, #4]
   129b2:	2201      	movs	r2, #1
   129b4:	701a      	strb	r2, [r3, #0]
}
   129b6:	bf00      	nop
   129b8:	3708      	adds	r7, #8
   129ba:	46bd      	mov	sp, r7
   129bc:	bd80      	pop	{r7, pc}
   129be:	bf00      	nop
   129c0:	00012c19 	.word	0x00012c19
   129c4:	00012bd1 	.word	0x00012bd1
   129c8:	00012c3d 	.word	0x00012c3d

000129cc <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   129cc:	b480      	push	{r7}
   129ce:	b083      	sub	sp, #12
   129d0:	af00      	add	r7, sp, #0
   129d2:	6078      	str	r0, [r7, #4]
   129d4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   129d6:	687b      	ldr	r3, [r7, #4]
   129d8:	683a      	ldr	r2, [r7, #0]
   129da:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   129dc:	4a03      	ldr	r2, [pc, #12]	; (129ec <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   129de:	687b      	ldr	r3, [r7, #4]
   129e0:	6013      	str	r3, [r2, #0]
}
   129e2:	bf00      	nop
   129e4:	370c      	adds	r7, #12
   129e6:	46bd      	mov	sp, r7
   129e8:	bc80      	pop	{r7}
   129ea:	4770      	bx	lr
   129ec:	20009ce0 	.word	0x20009ce0

000129f0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b086      	sub	sp, #24
   129f4:	af00      	add	r7, sp, #0
   129f6:	60f8      	str	r0, [r7, #12]
   129f8:	60b9      	str	r1, [r7, #8]
   129fa:	607a      	str	r2, [r7, #4]
   129fc:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   129fe:	687b      	ldr	r3, [r7, #4]
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   12a04:	68b9      	ldr	r1, [r7, #8]
   12a06:	68f8      	ldr	r0, [r7, #12]
   12a08:	4b25      	ldr	r3, [pc, #148]	; (12aa0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   12a0a:	4798      	blx	r3
	
	switch(rOrw){
   12a0c:	7dfb      	ldrb	r3, [r7, #23]
   12a0e:	2b02      	cmp	r3, #2
   12a10:	d002      	beq.n	12a18 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   12a12:	2b03      	cmp	r3, #3
   12a14:	d009      	beq.n	12a2a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   12a16:	e028      	b.n	12a6a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   12a18:	68fb      	ldr	r3, [r7, #12]
   12a1a:	685b      	ldr	r3, [r3, #4]
   12a1c:	f897 2020 	ldrb.w	r2, [r7, #32]
   12a20:	6879      	ldr	r1, [r7, #4]
   12a22:	4618      	mov	r0, r3
   12a24:	4b1f      	ldr	r3, [pc, #124]	; (12aa4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12a26:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   12a28:	e031      	b.n	12a8e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   12a2a:	68fb      	ldr	r3, [r7, #12]
   12a2c:	685b      	ldr	r3, [r3, #4]
   12a2e:	2203      	movs	r2, #3
   12a30:	6879      	ldr	r1, [r7, #4]
   12a32:	4618      	mov	r0, r3
   12a34:	4b1b      	ldr	r3, [pc, #108]	; (12aa4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12a36:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   12a38:	f897 3020 	ldrb.w	r3, [r7, #32]
   12a3c:	2b04      	cmp	r3, #4
   12a3e:	dd0b      	ble.n	12a58 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   12a40:	68fb      	ldr	r3, [r7, #12]
   12a42:	6858      	ldr	r0, [r3, #4]
   12a44:	f897 3020 	ldrb.w	r3, [r7, #32]
   12a48:	3b03      	subs	r3, #3
   12a4a:	461a      	mov	r2, r3
   12a4c:	6839      	ldr	r1, [r7, #0]
   12a4e:	4b16      	ldr	r3, [pc, #88]	; (12aa8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12a50:	4798      	blx	r3
					asm("nop");
   12a52:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   12a54:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   12a56:	e01a      	b.n	12a8e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   12a58:	68fb      	ldr	r3, [r7, #12]
   12a5a:	685b      	ldr	r3, [r3, #4]
   12a5c:	2201      	movs	r2, #1
   12a5e:	6839      	ldr	r1, [r7, #0]
   12a60:	4618      	mov	r0, r3
   12a62:	4b11      	ldr	r3, [pc, #68]	; (12aa8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12a64:	4798      	blx	r3
				asm("nop");
   12a66:	bf00      	nop
			break;
   12a68:	e011      	b.n	12a8e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   12a6a:	68fb      	ldr	r3, [r7, #12]
   12a6c:	685b      	ldr	r3, [r3, #4]
   12a6e:	f897 2020 	ldrb.w	r2, [r7, #32]
   12a72:	6879      	ldr	r1, [r7, #4]
   12a74:	4618      	mov	r0, r3
   12a76:	4b0b      	ldr	r3, [pc, #44]	; (12aa4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12a78:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   12a7a:	68fb      	ldr	r3, [r7, #12]
   12a7c:	6858      	ldr	r0, [r3, #4]
   12a7e:	f897 3020 	ldrb.w	r3, [r7, #32]
   12a82:	3b03      	subs	r3, #3
   12a84:	461a      	mov	r2, r3
   12a86:	6839      	ldr	r1, [r7, #0]
   12a88:	4b07      	ldr	r3, [pc, #28]	; (12aa8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12a8a:	4798      	blx	r3
			break;
   12a8c:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   12a8e:	68b9      	ldr	r1, [r7, #8]
   12a90:	68f8      	ldr	r0, [r7, #12]
   12a92:	4b06      	ldr	r3, [pc, #24]	; (12aac <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   12a94:	4798      	blx	r3
	asm("nop");
   12a96:	bf00      	nop
	
}
   12a98:	bf00      	nop
   12a9a:	3718      	adds	r7, #24
   12a9c:	46bd      	mov	sp, r7
   12a9e:	bd80      	pop	{r7, pc}
   12aa0:	00012ab1 	.word	0x00012ab1
   12aa4:	00012c79 	.word	0x00012c79
   12aa8:	00012cbd 	.word	0x00012cbd
   12aac:	00012af9 	.word	0x00012af9

00012ab0 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   12ab0:	b580      	push	{r7, lr}
   12ab2:	b082      	sub	sp, #8
   12ab4:	af00      	add	r7, sp, #0
   12ab6:	6078      	str	r0, [r7, #4]
   12ab8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   12aba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   12abe:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   12ac0:	683b      	ldr	r3, [r7, #0]
   12ac2:	b2db      	uxtb	r3, r3
   12ac4:	2100      	movs	r1, #0
   12ac6:	4618      	mov	r0, r3
   12ac8:	4b08      	ldr	r3, [pc, #32]	; (12aec <_ZN6LT_SPI4OpenEm+0x3c>)
   12aca:	4798      	blx	r3
	 delay_us(10);
   12acc:	200a      	movs	r0, #10
   12ace:	4b08      	ldr	r3, [pc, #32]	; (12af0 <_ZN6LT_SPI4OpenEm+0x40>)
   12ad0:	4798      	blx	r3
	spiTemp->Enable();
   12ad2:	687b      	ldr	r3, [r7, #4]
   12ad4:	685b      	ldr	r3, [r3, #4]
   12ad6:	4618      	mov	r0, r3
   12ad8:	4b06      	ldr	r3, [pc, #24]	; (12af4 <_ZN6LT_SPI4OpenEm+0x44>)
   12ada:	4798      	blx	r3
	 delay_us(10);
   12adc:	200a      	movs	r0, #10
   12ade:	4b04      	ldr	r3, [pc, #16]	; (12af0 <_ZN6LT_SPI4OpenEm+0x40>)
   12ae0:	4798      	blx	r3
 }
   12ae2:	bf00      	nop
   12ae4:	3708      	adds	r7, #8
   12ae6:	46bd      	mov	sp, r7
   12ae8:	bd80      	pop	{r7, pc}
   12aea:	bf00      	nop
   12aec:	000128fd 	.word	0x000128fd
   12af0:	00002a65 	.word	0x00002a65
   12af4:	00012c3d 	.word	0x00012c3d

00012af8 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   12af8:	b580      	push	{r7, lr}
   12afa:	b082      	sub	sp, #8
   12afc:	af00      	add	r7, sp, #0
   12afe:	6078      	str	r0, [r7, #4]
   12b00:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   12b02:	200a      	movs	r0, #10
   12b04:	4b0b      	ldr	r3, [pc, #44]	; (12b34 <_ZN6LT_SPI5CloseEm+0x3c>)
   12b06:	4798      	blx	r3
	 spiTemp->Disable();
   12b08:	687b      	ldr	r3, [r7, #4]
   12b0a:	685b      	ldr	r3, [r3, #4]
   12b0c:	4618      	mov	r0, r3
   12b0e:	4b0a      	ldr	r3, [pc, #40]	; (12b38 <_ZN6LT_SPI5CloseEm+0x40>)
   12b10:	4798      	blx	r3
	delay_us(10);
   12b12:	200a      	movs	r0, #10
   12b14:	4b07      	ldr	r3, [pc, #28]	; (12b34 <_ZN6LT_SPI5CloseEm+0x3c>)
   12b16:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   12b18:	683b      	ldr	r3, [r7, #0]
   12b1a:	b2db      	uxtb	r3, r3
   12b1c:	2101      	movs	r1, #1
   12b1e:	4618      	mov	r0, r3
   12b20:	4b06      	ldr	r3, [pc, #24]	; (12b3c <_ZN6LT_SPI5CloseEm+0x44>)
   12b22:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   12b24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12b28:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   12b2a:	bf00      	nop
   12b2c:	3708      	adds	r7, #8
   12b2e:	46bd      	mov	sp, r7
   12b30:	bd80      	pop	{r7, pc}
   12b32:	bf00      	nop
   12b34:	00002a65 	.word	0x00002a65
   12b38:	00012d01 	.word	0x00012d01
   12b3c:	000128fd 	.word	0x000128fd

00012b40 <_Z41__static_initialization_and_destruction_0ii>:
   12b40:	b580      	push	{r7, lr}
   12b42:	b082      	sub	sp, #8
   12b44:	af00      	add	r7, sp, #0
   12b46:	6078      	str	r0, [r7, #4]
   12b48:	6039      	str	r1, [r7, #0]
   12b4a:	687b      	ldr	r3, [r7, #4]
   12b4c:	2b01      	cmp	r3, #1
   12b4e:	d10c      	bne.n	12b6a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   12b50:	683b      	ldr	r3, [r7, #0]
   12b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12b56:	4293      	cmp	r3, r2
   12b58:	d107      	bne.n	12b6a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   12b5a:	4806      	ldr	r0, [pc, #24]	; (12b74 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12b5c:	4b06      	ldr	r3, [pc, #24]	; (12b78 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12b5e:	4798      	blx	r3
   12b60:	4a06      	ldr	r2, [pc, #24]	; (12b7c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12b62:	4907      	ldr	r1, [pc, #28]	; (12b80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12b64:	4803      	ldr	r0, [pc, #12]	; (12b74 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12b66:	4b07      	ldr	r3, [pc, #28]	; (12b84 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12b68:	4798      	blx	r3
   12b6a:	bf00      	nop
   12b6c:	3708      	adds	r7, #8
   12b6e:	46bd      	mov	sp, r7
   12b70:	bd80      	pop	{r7, pc}
   12b72:	bf00      	nop
   12b74:	20009ce4 	.word	0x20009ce4
   12b78:	00012b9d 	.word	0x00012b9d
   12b7c:	20000000 	.word	0x20000000
   12b80:	00012bbd 	.word	0x00012bbd
   12b84:	000135c5 	.word	0x000135c5

00012b88 <_GLOBAL__sub_I_ptrLTSPIClass>:
   12b88:	b580      	push	{r7, lr}
   12b8a:	af00      	add	r7, sp, #0
   12b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12b90:	2001      	movs	r0, #1
   12b92:	4b01      	ldr	r3, [pc, #4]	; (12b98 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   12b94:	4798      	blx	r3
   12b96:	bd80      	pop	{r7, pc}
   12b98:	00012b41 	.word	0x00012b41

00012b9c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   12b9c:	b480      	push	{r7}
   12b9e:	b083      	sub	sp, #12
   12ba0:	af00      	add	r7, sp, #0
   12ba2:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   12ba4:	4a04      	ldr	r2, [pc, #16]	; (12bb8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   12ba6:	687b      	ldr	r3, [r7, #4]
   12ba8:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	4618      	mov	r0, r3
   12bae:	370c      	adds	r7, #12
   12bb0:	46bd      	mov	sp, r7
   12bb2:	bc80      	pop	{r7}
   12bb4:	4770      	bx	lr
   12bb6:	bf00      	nop
   12bb8:	20009d00 	.word	0x20009d00

00012bbc <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   12bbc:	b480      	push	{r7}
   12bbe:	b083      	sub	sp, #12
   12bc0:	af00      	add	r7, sp, #0
   12bc2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   12bc4:	687b      	ldr	r3, [r7, #4]
   12bc6:	4618      	mov	r0, r3
   12bc8:	370c      	adds	r7, #12
   12bca:	46bd      	mov	sp, r7
   12bcc:	bc80      	pop	{r7}
   12bce:	4770      	bx	lr

00012bd0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   12bd0:	b580      	push	{r7, lr}
   12bd2:	b082      	sub	sp, #8
   12bd4:	af00      	add	r7, sp, #0
   12bd6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12bd8:	687b      	ldr	r3, [r7, #4]
   12bda:	68da      	ldr	r2, [r3, #12]
   12bdc:	687b      	ldr	r3, [r7, #4]
   12bde:	3310      	adds	r3, #16
   12be0:	4619      	mov	r1, r3
   12be2:	4610      	mov	r0, r2
   12be4:	4b09      	ldr	r3, [pc, #36]	; (12c0c <_ZN13SPI_Syn_Class4initEv+0x3c>)
   12be6:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   12be8:	687b      	ldr	r3, [r7, #4]
   12bea:	68db      	ldr	r3, [r3, #12]
   12bec:	4618      	mov	r0, r3
   12bee:	4b08      	ldr	r3, [pc, #32]	; (12c10 <_ZN13SPI_Syn_Class4initEv+0x40>)
   12bf0:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   12bf2:	687b      	ldr	r3, [r7, #4]
   12bf4:	4a07      	ldr	r2, [pc, #28]	; (12c14 <_ZN13SPI_Syn_Class4initEv+0x44>)
   12bf6:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   12bf8:	687b      	ldr	r3, [r7, #4]
   12bfa:	4a06      	ldr	r2, [pc, #24]	; (12c14 <_ZN13SPI_Syn_Class4initEv+0x44>)
   12bfc:	609a      	str	r2, [r3, #8]
	ready=true;
   12bfe:	687b      	ldr	r3, [r7, #4]
   12c00:	2201      	movs	r2, #1
   12c02:	701a      	strb	r2, [r3, #0]
	
}
   12c04:	bf00      	nop
   12c06:	3708      	adds	r7, #8
   12c08:	46bd      	mov	sp, r7
   12c0a:	bd80      	pop	{r7, pc}
   12c0c:	0000326d 	.word	0x0000326d
   12c10:	000030e1 	.word	0x000030e1
   12c14:	20009d04 	.word	0x20009d04

00012c18 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   12c18:	b480      	push	{r7}
   12c1a:	b083      	sub	sp, #12
   12c1c:	af00      	add	r7, sp, #0
   12c1e:	6078      	str	r0, [r7, #4]
   12c20:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   12c22:	4a05      	ldr	r2, [pc, #20]	; (12c38 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   12c24:	687b      	ldr	r3, [r7, #4]
   12c26:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   12c28:	687b      	ldr	r3, [r7, #4]
   12c2a:	683a      	ldr	r2, [r7, #0]
   12c2c:	60da      	str	r2, [r3, #12]
}
   12c2e:	bf00      	nop
   12c30:	370c      	adds	r7, #12
   12c32:	46bd      	mov	sp, r7
   12c34:	bc80      	pop	{r7}
   12c36:	4770      	bx	lr
   12c38:	20009d00 	.word	0x20009d00

00012c3c <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   12c3c:	b580      	push	{r7, lr}
   12c3e:	b082      	sub	sp, #8
   12c40:	af00      	add	r7, sp, #0
   12c42:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12c44:	687b      	ldr	r3, [r7, #4]
   12c46:	68da      	ldr	r2, [r3, #12]
   12c48:	687b      	ldr	r3, [r7, #4]
   12c4a:	3310      	adds	r3, #16
   12c4c:	4619      	mov	r1, r3
   12c4e:	4610      	mov	r0, r2
   12c50:	4b07      	ldr	r3, [pc, #28]	; (12c70 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   12c52:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   12c54:	687b      	ldr	r3, [r7, #4]
   12c56:	68db      	ldr	r3, [r3, #12]
   12c58:	4618      	mov	r0, r3
   12c5a:	4b06      	ldr	r3, [pc, #24]	; (12c74 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   12c5c:	4798      	blx	r3
	ready=true;
   12c5e:	687b      	ldr	r3, [r7, #4]
   12c60:	2201      	movs	r2, #1
   12c62:	701a      	strb	r2, [r3, #0]
	return 0;
   12c64:	2300      	movs	r3, #0
}
   12c66:	4618      	mov	r0, r3
   12c68:	3708      	adds	r7, #8
   12c6a:	46bd      	mov	sp, r7
   12c6c:	bd80      	pop	{r7, pc}
   12c6e:	bf00      	nop
   12c70:	0000326d 	.word	0x0000326d
   12c74:	000030e1 	.word	0x000030e1

00012c78 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   12c78:	b580      	push	{r7, lr}
   12c7a:	b086      	sub	sp, #24
   12c7c:	af00      	add	r7, sp, #0
   12c7e:	60f8      	str	r0, [r7, #12]
   12c80:	60b9      	str	r1, [r7, #8]
   12c82:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   12c84:	68fb      	ldr	r3, [r7, #12]
   12c86:	2201      	movs	r2, #1
   12c88:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   12c8a:	68fb      	ldr	r3, [r7, #12]
   12c8c:	691b      	ldr	r3, [r3, #16]
   12c8e:	687a      	ldr	r2, [r7, #4]
   12c90:	b292      	uxth	r2, r2
   12c92:	68b9      	ldr	r1, [r7, #8]
   12c94:	4618      	mov	r0, r3
   12c96:	4b08      	ldr	r3, [pc, #32]	; (12cb8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   12c98:	4798      	blx	r3
   12c9a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   12c9c:	697b      	ldr	r3, [r7, #20]
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	bf14      	ite	ne
   12ca2:	2301      	movne	r3, #1
   12ca4:	2300      	moveq	r3, #0
   12ca6:	b2da      	uxtb	r2, r3
   12ca8:	68fb      	ldr	r3, [r7, #12]
   12caa:	761a      	strb	r2, [r3, #24]
	 return w;
   12cac:	697b      	ldr	r3, [r7, #20]
	
}
   12cae:	4618      	mov	r0, r3
   12cb0:	3718      	adds	r7, #24
   12cb2:	46bd      	mov	sp, r7
   12cb4:	bd80      	pop	{r7, pc}
   12cb6:	bf00      	nop
   12cb8:	00011961 	.word	0x00011961

00012cbc <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   12cbc:	b580      	push	{r7, lr}
   12cbe:	b086      	sub	sp, #24
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	60f8      	str	r0, [r7, #12]
   12cc4:	60b9      	str	r1, [r7, #8]
   12cc6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   12cc8:	68fb      	ldr	r3, [r7, #12]
   12cca:	2201      	movs	r2, #1
   12ccc:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   12cce:	68fb      	ldr	r3, [r7, #12]
   12cd0:	691b      	ldr	r3, [r3, #16]
   12cd2:	687a      	ldr	r2, [r7, #4]
   12cd4:	b292      	uxth	r2, r2
   12cd6:	68b9      	ldr	r1, [r7, #8]
   12cd8:	4618      	mov	r0, r3
   12cda:	4b08      	ldr	r3, [pc, #32]	; (12cfc <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   12cdc:	4798      	blx	r3
   12cde:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   12ce0:	697b      	ldr	r3, [r7, #20]
   12ce2:	2b00      	cmp	r3, #0
   12ce4:	bf14      	ite	ne
   12ce6:	2301      	movne	r3, #1
   12ce8:	2300      	moveq	r3, #0
   12cea:	b2da      	uxtb	r2, r3
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	765a      	strb	r2, [r3, #25]
	return  r;
   12cf0:	697b      	ldr	r3, [r7, #20]
}
   12cf2:	4618      	mov	r0, r3
   12cf4:	3718      	adds	r7, #24
   12cf6:	46bd      	mov	sp, r7
   12cf8:	bd80      	pop	{r7, pc}
   12cfa:	bf00      	nop
   12cfc:	000119b1 	.word	0x000119b1

00012d00 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   12d00:	b580      	push	{r7, lr}
   12d02:	b082      	sub	sp, #8
   12d04:	af00      	add	r7, sp, #0
   12d06:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   12d08:	687b      	ldr	r3, [r7, #4]
   12d0a:	68db      	ldr	r3, [r3, #12]
   12d0c:	4618      	mov	r0, r3
   12d0e:	4b03      	ldr	r3, [pc, #12]	; (12d1c <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   12d10:	4798      	blx	r3
	
}
   12d12:	bf00      	nop
   12d14:	3708      	adds	r7, #8
   12d16:	46bd      	mov	sp, r7
   12d18:	bd80      	pop	{r7, pc}
   12d1a:	bf00      	nop
   12d1c:	0000311d 	.word	0x0000311d

00012d20 <hri_port_set_DIR_reg>:
{
   12d20:	b480      	push	{r7}
   12d22:	b085      	sub	sp, #20
   12d24:	af00      	add	r7, sp, #0
   12d26:	60f8      	str	r0, [r7, #12]
   12d28:	460b      	mov	r3, r1
   12d2a:	607a      	str	r2, [r7, #4]
   12d2c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   12d2e:	7afb      	ldrb	r3, [r7, #11]
   12d30:	68fa      	ldr	r2, [r7, #12]
   12d32:	01db      	lsls	r3, r3, #7
   12d34:	4413      	add	r3, r2
   12d36:	3308      	adds	r3, #8
   12d38:	687a      	ldr	r2, [r7, #4]
   12d3a:	601a      	str	r2, [r3, #0]
}
   12d3c:	bf00      	nop
   12d3e:	3714      	adds	r7, #20
   12d40:	46bd      	mov	sp, r7
   12d42:	bc80      	pop	{r7}
   12d44:	4770      	bx	lr

00012d46 <hri_port_clear_DIR_reg>:
{
   12d46:	b480      	push	{r7}
   12d48:	b085      	sub	sp, #20
   12d4a:	af00      	add	r7, sp, #0
   12d4c:	60f8      	str	r0, [r7, #12]
   12d4e:	460b      	mov	r3, r1
   12d50:	607a      	str	r2, [r7, #4]
   12d52:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   12d54:	7afb      	ldrb	r3, [r7, #11]
   12d56:	68fa      	ldr	r2, [r7, #12]
   12d58:	01db      	lsls	r3, r3, #7
   12d5a:	4413      	add	r3, r2
   12d5c:	3304      	adds	r3, #4
   12d5e:	687a      	ldr	r2, [r7, #4]
   12d60:	601a      	str	r2, [r3, #0]
}
   12d62:	bf00      	nop
   12d64:	3714      	adds	r7, #20
   12d66:	46bd      	mov	sp, r7
   12d68:	bc80      	pop	{r7}
   12d6a:	4770      	bx	lr

00012d6c <hri_port_set_OUT_reg>:
{
   12d6c:	b480      	push	{r7}
   12d6e:	b085      	sub	sp, #20
   12d70:	af00      	add	r7, sp, #0
   12d72:	60f8      	str	r0, [r7, #12]
   12d74:	460b      	mov	r3, r1
   12d76:	607a      	str	r2, [r7, #4]
   12d78:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12d7a:	7afb      	ldrb	r3, [r7, #11]
   12d7c:	68fa      	ldr	r2, [r7, #12]
   12d7e:	01db      	lsls	r3, r3, #7
   12d80:	4413      	add	r3, r2
   12d82:	3318      	adds	r3, #24
   12d84:	687a      	ldr	r2, [r7, #4]
   12d86:	601a      	str	r2, [r3, #0]
}
   12d88:	bf00      	nop
   12d8a:	3714      	adds	r7, #20
   12d8c:	46bd      	mov	sp, r7
   12d8e:	bc80      	pop	{r7}
   12d90:	4770      	bx	lr

00012d92 <hri_port_clear_OUT_reg>:
{
   12d92:	b480      	push	{r7}
   12d94:	b085      	sub	sp, #20
   12d96:	af00      	add	r7, sp, #0
   12d98:	60f8      	str	r0, [r7, #12]
   12d9a:	460b      	mov	r3, r1
   12d9c:	607a      	str	r2, [r7, #4]
   12d9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12da0:	7afb      	ldrb	r3, [r7, #11]
   12da2:	68fa      	ldr	r2, [r7, #12]
   12da4:	01db      	lsls	r3, r3, #7
   12da6:	4413      	add	r3, r2
   12da8:	3314      	adds	r3, #20
   12daa:	687a      	ldr	r2, [r7, #4]
   12dac:	601a      	str	r2, [r3, #0]
}
   12dae:	bf00      	nop
   12db0:	3714      	adds	r7, #20
   12db2:	46bd      	mov	sp, r7
   12db4:	bc80      	pop	{r7}
   12db6:	4770      	bx	lr

00012db8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12db8:	b480      	push	{r7}
   12dba:	b085      	sub	sp, #20
   12dbc:	af00      	add	r7, sp, #0
   12dbe:	6078      	str	r0, [r7, #4]
   12dc0:	4608      	mov	r0, r1
   12dc2:	4611      	mov	r1, r2
   12dc4:	461a      	mov	r2, r3
   12dc6:	4603      	mov	r3, r0
   12dc8:	70fb      	strb	r3, [r7, #3]
   12dca:	460b      	mov	r3, r1
   12dcc:	70bb      	strb	r3, [r7, #2]
   12dce:	4613      	mov	r3, r2
   12dd0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12dd2:	78fa      	ldrb	r2, [r7, #3]
   12dd4:	78bb      	ldrb	r3, [r7, #2]
   12dd6:	6879      	ldr	r1, [r7, #4]
   12dd8:	01d2      	lsls	r2, r2, #7
   12dda:	440a      	add	r2, r1
   12ddc:	4413      	add	r3, r2
   12dde:	3330      	adds	r3, #48	; 0x30
   12de0:	781b      	ldrb	r3, [r3, #0]
   12de2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   12de4:	7bfb      	ldrb	r3, [r7, #15]
   12de6:	f023 030f 	bic.w	r3, r3, #15
   12dea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   12dec:	787b      	ldrb	r3, [r7, #1]
   12dee:	f003 030f 	and.w	r3, r3, #15
   12df2:	b2da      	uxtb	r2, r3
   12df4:	7bfb      	ldrb	r3, [r7, #15]
   12df6:	4313      	orrs	r3, r2
   12df8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   12dfa:	78fa      	ldrb	r2, [r7, #3]
   12dfc:	78bb      	ldrb	r3, [r7, #2]
   12dfe:	6879      	ldr	r1, [r7, #4]
   12e00:	01d2      	lsls	r2, r2, #7
   12e02:	440a      	add	r2, r1
   12e04:	4413      	add	r3, r2
   12e06:	3330      	adds	r3, #48	; 0x30
   12e08:	7bfa      	ldrb	r2, [r7, #15]
   12e0a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12e0c:	bf00      	nop
   12e0e:	3714      	adds	r7, #20
   12e10:	46bd      	mov	sp, r7
   12e12:	bc80      	pop	{r7}
   12e14:	4770      	bx	lr

00012e16 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12e16:	b480      	push	{r7}
   12e18:	b085      	sub	sp, #20
   12e1a:	af00      	add	r7, sp, #0
   12e1c:	6078      	str	r0, [r7, #4]
   12e1e:	4608      	mov	r0, r1
   12e20:	4611      	mov	r1, r2
   12e22:	461a      	mov	r2, r3
   12e24:	4603      	mov	r3, r0
   12e26:	70fb      	strb	r3, [r7, #3]
   12e28:	460b      	mov	r3, r1
   12e2a:	70bb      	strb	r3, [r7, #2]
   12e2c:	4613      	mov	r3, r2
   12e2e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12e30:	78fa      	ldrb	r2, [r7, #3]
   12e32:	78bb      	ldrb	r3, [r7, #2]
   12e34:	6879      	ldr	r1, [r7, #4]
   12e36:	01d2      	lsls	r2, r2, #7
   12e38:	440a      	add	r2, r1
   12e3a:	4413      	add	r3, r2
   12e3c:	3330      	adds	r3, #48	; 0x30
   12e3e:	781b      	ldrb	r3, [r3, #0]
   12e40:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   12e42:	7bfb      	ldrb	r3, [r7, #15]
   12e44:	f003 030f 	and.w	r3, r3, #15
   12e48:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   12e4a:	787b      	ldrb	r3, [r7, #1]
   12e4c:	011b      	lsls	r3, r3, #4
   12e4e:	b2da      	uxtb	r2, r3
   12e50:	7bfb      	ldrb	r3, [r7, #15]
   12e52:	4313      	orrs	r3, r2
   12e54:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   12e56:	78fa      	ldrb	r2, [r7, #3]
   12e58:	78bb      	ldrb	r3, [r7, #2]
   12e5a:	6879      	ldr	r1, [r7, #4]
   12e5c:	01d2      	lsls	r2, r2, #7
   12e5e:	440a      	add	r2, r1
   12e60:	4413      	add	r3, r2
   12e62:	3330      	adds	r3, #48	; 0x30
   12e64:	7bfa      	ldrb	r2, [r7, #15]
   12e66:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12e68:	bf00      	nop
   12e6a:	3714      	adds	r7, #20
   12e6c:	46bd      	mov	sp, r7
   12e6e:	bc80      	pop	{r7}
   12e70:	4770      	bx	lr

00012e72 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   12e72:	b480      	push	{r7}
   12e74:	b085      	sub	sp, #20
   12e76:	af00      	add	r7, sp, #0
   12e78:	6078      	str	r0, [r7, #4]
   12e7a:	4608      	mov	r0, r1
   12e7c:	4611      	mov	r1, r2
   12e7e:	461a      	mov	r2, r3
   12e80:	4603      	mov	r3, r0
   12e82:	70fb      	strb	r3, [r7, #3]
   12e84:	460b      	mov	r3, r1
   12e86:	70bb      	strb	r3, [r7, #2]
   12e88:	4613      	mov	r3, r2
   12e8a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   12e8c:	78fa      	ldrb	r2, [r7, #3]
   12e8e:	78bb      	ldrb	r3, [r7, #2]
   12e90:	6879      	ldr	r1, [r7, #4]
   12e92:	01d2      	lsls	r2, r2, #7
   12e94:	440a      	add	r2, r1
   12e96:	4413      	add	r3, r2
   12e98:	3340      	adds	r3, #64	; 0x40
   12e9a:	781b      	ldrb	r3, [r3, #0]
   12e9c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   12e9e:	7bfb      	ldrb	r3, [r7, #15]
   12ea0:	f023 0301 	bic.w	r3, r3, #1
   12ea4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   12ea6:	787a      	ldrb	r2, [r7, #1]
   12ea8:	7bfb      	ldrb	r3, [r7, #15]
   12eaa:	4313      	orrs	r3, r2
   12eac:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   12eae:	78fa      	ldrb	r2, [r7, #3]
   12eb0:	78bb      	ldrb	r3, [r7, #2]
   12eb2:	6879      	ldr	r1, [r7, #4]
   12eb4:	01d2      	lsls	r2, r2, #7
   12eb6:	440a      	add	r2, r1
   12eb8:	4413      	add	r3, r2
   12eba:	3340      	adds	r3, #64	; 0x40
   12ebc:	7bfa      	ldrb	r2, [r7, #15]
   12ebe:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12ec0:	bf00      	nop
   12ec2:	3714      	adds	r7, #20
   12ec4:	46bd      	mov	sp, r7
   12ec6:	bc80      	pop	{r7}
   12ec8:	4770      	bx	lr

00012eca <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   12eca:	b480      	push	{r7}
   12ecc:	b085      	sub	sp, #20
   12ece:	af00      	add	r7, sp, #0
   12ed0:	60f8      	str	r0, [r7, #12]
   12ed2:	460b      	mov	r3, r1
   12ed4:	607a      	str	r2, [r7, #4]
   12ed6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   12ed8:	7afb      	ldrb	r3, [r7, #11]
   12eda:	68fa      	ldr	r2, [r7, #12]
   12edc:	01db      	lsls	r3, r3, #7
   12ede:	4413      	add	r3, r2
   12ee0:	3328      	adds	r3, #40	; 0x28
   12ee2:	687a      	ldr	r2, [r7, #4]
   12ee4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12ee6:	bf00      	nop
   12ee8:	3714      	adds	r7, #20
   12eea:	46bd      	mov	sp, r7
   12eec:	bc80      	pop	{r7}
   12eee:	4770      	bx	lr

00012ef0 <_gpio_set_direction>:
{
   12ef0:	b580      	push	{r7, lr}
   12ef2:	b082      	sub	sp, #8
   12ef4:	af00      	add	r7, sp, #0
   12ef6:	4603      	mov	r3, r0
   12ef8:	6039      	str	r1, [r7, #0]
   12efa:	71fb      	strb	r3, [r7, #7]
   12efc:	4613      	mov	r3, r2
   12efe:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   12f00:	79bb      	ldrb	r3, [r7, #6]
   12f02:	2b01      	cmp	r3, #1
   12f04:	d01c      	beq.n	12f40 <_gpio_set_direction+0x50>
   12f06:	2b02      	cmp	r3, #2
   12f08:	d037      	beq.n	12f7a <_gpio_set_direction+0x8a>
   12f0a:	2b00      	cmp	r3, #0
   12f0c:	d14e      	bne.n	12fac <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   12f0e:	79fb      	ldrb	r3, [r7, #7]
   12f10:	683a      	ldr	r2, [r7, #0]
   12f12:	4619      	mov	r1, r3
   12f14:	482a      	ldr	r0, [pc, #168]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f16:	4b2b      	ldr	r3, [pc, #172]	; (12fc4 <_gpio_set_direction+0xd4>)
   12f18:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12f1a:	683b      	ldr	r3, [r7, #0]
   12f1c:	b29b      	uxth	r3, r3
   12f1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12f22:	79fb      	ldrb	r3, [r7, #7]
   12f24:	4619      	mov	r1, r3
   12f26:	4826      	ldr	r0, [pc, #152]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f28:	4b27      	ldr	r3, [pc, #156]	; (12fc8 <_gpio_set_direction+0xd8>)
   12f2a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12f2c:	683b      	ldr	r3, [r7, #0]
   12f2e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12f30:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12f34:	79fb      	ldrb	r3, [r7, #7]
   12f36:	4619      	mov	r1, r3
   12f38:	4821      	ldr	r0, [pc, #132]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f3a:	4b23      	ldr	r3, [pc, #140]	; (12fc8 <_gpio_set_direction+0xd8>)
   12f3c:	4798      	blx	r3
		break;
   12f3e:	e03a      	b.n	12fb6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   12f40:	79fb      	ldrb	r3, [r7, #7]
   12f42:	683a      	ldr	r2, [r7, #0]
   12f44:	4619      	mov	r1, r3
   12f46:	481e      	ldr	r0, [pc, #120]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f48:	4b1e      	ldr	r3, [pc, #120]	; (12fc4 <_gpio_set_direction+0xd4>)
   12f4a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   12f4c:	683b      	ldr	r3, [r7, #0]
   12f4e:	b29b      	uxth	r3, r3
   12f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   12f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12f58:	79f9      	ldrb	r1, [r7, #7]
   12f5a:	461a      	mov	r2, r3
   12f5c:	4818      	ldr	r0, [pc, #96]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f5e:	4b1a      	ldr	r3, [pc, #104]	; (12fc8 <_gpio_set_direction+0xd8>)
   12f60:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   12f66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   12f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   12f6e:	79f9      	ldrb	r1, [r7, #7]
   12f70:	461a      	mov	r2, r3
   12f72:	4813      	ldr	r0, [pc, #76]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f74:	4b14      	ldr	r3, [pc, #80]	; (12fc8 <_gpio_set_direction+0xd8>)
   12f76:	4798      	blx	r3
		break;
   12f78:	e01d      	b.n	12fb6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   12f7a:	79fb      	ldrb	r3, [r7, #7]
   12f7c:	683a      	ldr	r2, [r7, #0]
   12f7e:	4619      	mov	r1, r3
   12f80:	480f      	ldr	r0, [pc, #60]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f82:	4b12      	ldr	r3, [pc, #72]	; (12fcc <_gpio_set_direction+0xdc>)
   12f84:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12f86:	683b      	ldr	r3, [r7, #0]
   12f88:	b29b      	uxth	r3, r3
   12f8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12f8e:	79fb      	ldrb	r3, [r7, #7]
   12f90:	4619      	mov	r1, r3
   12f92:	480b      	ldr	r0, [pc, #44]	; (12fc0 <_gpio_set_direction+0xd0>)
   12f94:	4b0c      	ldr	r3, [pc, #48]	; (12fc8 <_gpio_set_direction+0xd8>)
   12f96:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12f98:	683b      	ldr	r3, [r7, #0]
   12f9a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12f9c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12fa0:	79fb      	ldrb	r3, [r7, #7]
   12fa2:	4619      	mov	r1, r3
   12fa4:	4806      	ldr	r0, [pc, #24]	; (12fc0 <_gpio_set_direction+0xd0>)
   12fa6:	4b08      	ldr	r3, [pc, #32]	; (12fc8 <_gpio_set_direction+0xd8>)
   12fa8:	4798      	blx	r3
		break;
   12faa:	e004      	b.n	12fb6 <_gpio_set_direction+0xc6>
		ASSERT(false);
   12fac:	2246      	movs	r2, #70	; 0x46
   12fae:	4908      	ldr	r1, [pc, #32]	; (12fd0 <_gpio_set_direction+0xe0>)
   12fb0:	2000      	movs	r0, #0
   12fb2:	4b08      	ldr	r3, [pc, #32]	; (12fd4 <_gpio_set_direction+0xe4>)
   12fb4:	4798      	blx	r3
}
   12fb6:	bf00      	nop
   12fb8:	3708      	adds	r7, #8
   12fba:	46bd      	mov	sp, r7
   12fbc:	bd80      	pop	{r7, pc}
   12fbe:	bf00      	nop
   12fc0:	41008000 	.word	0x41008000
   12fc4:	00012d47 	.word	0x00012d47
   12fc8:	00012ecb 	.word	0x00012ecb
   12fcc:	00012d21 	.word	0x00012d21
   12fd0:	00014434 	.word	0x00014434
   12fd4:	000040f5 	.word	0x000040f5

00012fd8 <_gpio_set_level>:
{
   12fd8:	b580      	push	{r7, lr}
   12fda:	b082      	sub	sp, #8
   12fdc:	af00      	add	r7, sp, #0
   12fde:	4603      	mov	r3, r0
   12fe0:	6039      	str	r1, [r7, #0]
   12fe2:	71fb      	strb	r3, [r7, #7]
   12fe4:	4613      	mov	r3, r2
   12fe6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12fe8:	79bb      	ldrb	r3, [r7, #6]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d006      	beq.n	12ffc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12fee:	79fb      	ldrb	r3, [r7, #7]
   12ff0:	683a      	ldr	r2, [r7, #0]
   12ff2:	4619      	mov	r1, r3
   12ff4:	4806      	ldr	r0, [pc, #24]	; (13010 <_gpio_set_level+0x38>)
   12ff6:	4b07      	ldr	r3, [pc, #28]	; (13014 <_gpio_set_level+0x3c>)
   12ff8:	4798      	blx	r3
}
   12ffa:	e005      	b.n	13008 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12ffc:	79fb      	ldrb	r3, [r7, #7]
   12ffe:	683a      	ldr	r2, [r7, #0]
   13000:	4619      	mov	r1, r3
   13002:	4803      	ldr	r0, [pc, #12]	; (13010 <_gpio_set_level+0x38>)
   13004:	4b04      	ldr	r3, [pc, #16]	; (13018 <_gpio_set_level+0x40>)
   13006:	4798      	blx	r3
}
   13008:	bf00      	nop
   1300a:	3708      	adds	r7, #8
   1300c:	46bd      	mov	sp, r7
   1300e:	bd80      	pop	{r7, pc}
   13010:	41008000 	.word	0x41008000
   13014:	00012d6d 	.word	0x00012d6d
   13018:	00012d93 	.word	0x00012d93

0001301c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   1301c:	b590      	push	{r4, r7, lr}
   1301e:	b085      	sub	sp, #20
   13020:	af00      	add	r7, sp, #0
   13022:	6078      	str	r0, [r7, #4]
   13024:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   13026:	687b      	ldr	r3, [r7, #4]
   13028:	095b      	lsrs	r3, r3, #5
   1302a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   1302c:	687b      	ldr	r3, [r7, #4]
   1302e:	b2db      	uxtb	r3, r3
   13030:	f003 031f 	and.w	r3, r3, #31
   13034:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   13036:	683b      	ldr	r3, [r7, #0]
   13038:	f1b3 3fff 	cmp.w	r3, #4294967295
   1303c:	d106      	bne.n	1304c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1303e:	7bba      	ldrb	r2, [r7, #14]
   13040:	7bf9      	ldrb	r1, [r7, #15]
   13042:	2300      	movs	r3, #0
   13044:	4812      	ldr	r0, [pc, #72]	; (13090 <_gpio_set_pin_function+0x74>)
   13046:	4c13      	ldr	r4, [pc, #76]	; (13094 <_gpio_set_pin_function+0x78>)
   13048:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   1304a:	e01d      	b.n	13088 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   1304c:	7bba      	ldrb	r2, [r7, #14]
   1304e:	7bf9      	ldrb	r1, [r7, #15]
   13050:	2301      	movs	r3, #1
   13052:	480f      	ldr	r0, [pc, #60]	; (13090 <_gpio_set_pin_function+0x74>)
   13054:	4c0f      	ldr	r4, [pc, #60]	; (13094 <_gpio_set_pin_function+0x78>)
   13056:	47a0      	blx	r4
		if (pin & 1) {
   13058:	7bbb      	ldrb	r3, [r7, #14]
   1305a:	f003 0301 	and.w	r3, r3, #1
   1305e:	2b00      	cmp	r3, #0
   13060:	d009      	beq.n	13076 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   13062:	7bbb      	ldrb	r3, [r7, #14]
   13064:	105b      	asrs	r3, r3, #1
   13066:	b2da      	uxtb	r2, r3
   13068:	683b      	ldr	r3, [r7, #0]
   1306a:	b2db      	uxtb	r3, r3
   1306c:	7bf9      	ldrb	r1, [r7, #15]
   1306e:	4808      	ldr	r0, [pc, #32]	; (13090 <_gpio_set_pin_function+0x74>)
   13070:	4c09      	ldr	r4, [pc, #36]	; (13098 <_gpio_set_pin_function+0x7c>)
   13072:	47a0      	blx	r4
}
   13074:	e008      	b.n	13088 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   13076:	7bbb      	ldrb	r3, [r7, #14]
   13078:	105b      	asrs	r3, r3, #1
   1307a:	b2da      	uxtb	r2, r3
   1307c:	683b      	ldr	r3, [r7, #0]
   1307e:	b2db      	uxtb	r3, r3
   13080:	7bf9      	ldrb	r1, [r7, #15]
   13082:	4803      	ldr	r0, [pc, #12]	; (13090 <_gpio_set_pin_function+0x74>)
   13084:	4c05      	ldr	r4, [pc, #20]	; (1309c <_gpio_set_pin_function+0x80>)
   13086:	47a0      	blx	r4
}
   13088:	bf00      	nop
   1308a:	3714      	adds	r7, #20
   1308c:	46bd      	mov	sp, r7
   1308e:	bd90      	pop	{r4, r7, pc}
   13090:	41008000 	.word	0x41008000
   13094:	00012e73 	.word	0x00012e73
   13098:	00012e17 	.word	0x00012e17
   1309c:	00012db9 	.word	0x00012db9

000130a0 <gpio_set_pin_function>:
{
   130a0:	b580      	push	{r7, lr}
   130a2:	b082      	sub	sp, #8
   130a4:	af00      	add	r7, sp, #0
   130a6:	6078      	str	r0, [r7, #4]
   130a8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   130aa:	6839      	ldr	r1, [r7, #0]
   130ac:	6878      	ldr	r0, [r7, #4]
   130ae:	4b03      	ldr	r3, [pc, #12]	; (130bc <gpio_set_pin_function+0x1c>)
   130b0:	4798      	blx	r3
}
   130b2:	bf00      	nop
   130b4:	3708      	adds	r7, #8
   130b6:	46bd      	mov	sp, r7
   130b8:	bd80      	pop	{r7, pc}
   130ba:	bf00      	nop
   130bc:	0001301d 	.word	0x0001301d

000130c0 <gpio_set_pin_direction>:
{
   130c0:	b580      	push	{r7, lr}
   130c2:	b082      	sub	sp, #8
   130c4:	af00      	add	r7, sp, #0
   130c6:	4603      	mov	r3, r0
   130c8:	460a      	mov	r2, r1
   130ca:	71fb      	strb	r3, [r7, #7]
   130cc:	4613      	mov	r3, r2
   130ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   130d0:	79fb      	ldrb	r3, [r7, #7]
   130d2:	115b      	asrs	r3, r3, #5
   130d4:	b2d8      	uxtb	r0, r3
   130d6:	79fb      	ldrb	r3, [r7, #7]
   130d8:	f003 031f 	and.w	r3, r3, #31
   130dc:	2201      	movs	r2, #1
   130de:	fa02 f303 	lsl.w	r3, r2, r3
   130e2:	79ba      	ldrb	r2, [r7, #6]
   130e4:	4619      	mov	r1, r3
   130e6:	4b03      	ldr	r3, [pc, #12]	; (130f4 <gpio_set_pin_direction+0x34>)
   130e8:	4798      	blx	r3
}
   130ea:	bf00      	nop
   130ec:	3708      	adds	r7, #8
   130ee:	46bd      	mov	sp, r7
   130f0:	bd80      	pop	{r7, pc}
   130f2:	bf00      	nop
   130f4:	00012ef1 	.word	0x00012ef1

000130f8 <gpio_set_pin_level>:
{
   130f8:	b580      	push	{r7, lr}
   130fa:	b082      	sub	sp, #8
   130fc:	af00      	add	r7, sp, #0
   130fe:	4603      	mov	r3, r0
   13100:	460a      	mov	r2, r1
   13102:	71fb      	strb	r3, [r7, #7]
   13104:	4613      	mov	r3, r2
   13106:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13108:	79fb      	ldrb	r3, [r7, #7]
   1310a:	115b      	asrs	r3, r3, #5
   1310c:	b2d8      	uxtb	r0, r3
   1310e:	79fb      	ldrb	r3, [r7, #7]
   13110:	f003 031f 	and.w	r3, r3, #31
   13114:	2201      	movs	r2, #1
   13116:	fa02 f303 	lsl.w	r3, r2, r3
   1311a:	79ba      	ldrb	r2, [r7, #6]
   1311c:	4619      	mov	r1, r3
   1311e:	4b03      	ldr	r3, [pc, #12]	; (1312c <gpio_set_pin_level+0x34>)
   13120:	4798      	blx	r3
}
   13122:	bf00      	nop
   13124:	3708      	adds	r7, #8
   13126:	46bd      	mov	sp, r7
   13128:	bd80      	pop	{r7, pc}
   1312a:	bf00      	nop
   1312c:	00012fd9 	.word	0x00012fd9

00013130 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   13130:	b580      	push	{r7, lr}
   13132:	b082      	sub	sp, #8
   13134:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   13136:	2100      	movs	r1, #0
   13138:	2008      	movs	r0, #8
   1313a:	4b24      	ldr	r3, [pc, #144]	; (131cc <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1313c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1313e:	2100      	movs	r1, #0
   13140:	202b      	movs	r0, #43	; 0x2b
   13142:	4b22      	ldr	r3, [pc, #136]	; (131cc <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13144:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   13146:	2100      	movs	r1, #0
   13148:	202a      	movs	r0, #42	; 0x2a
   1314a:	4b20      	ldr	r3, [pc, #128]	; (131cc <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1314c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1314e:	2102      	movs	r1, #2
   13150:	2008      	movs	r0, #8
   13152:	4b1f      	ldr	r3, [pc, #124]	; (131d0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13154:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   13156:	2102      	movs	r1, #2
   13158:	202b      	movs	r0, #43	; 0x2b
   1315a:	4b1d      	ldr	r3, [pc, #116]	; (131d0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   1315c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1315e:	2102      	movs	r1, #2
   13160:	202a      	movs	r0, #42	; 0x2a
   13162:	4b1b      	ldr	r3, [pc, #108]	; (131d0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13164:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   13166:	2101      	movs	r1, #1
   13168:	2008      	movs	r0, #8
   1316a:	4b1a      	ldr	r3, [pc, #104]	; (131d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1316c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1316e:	2100      	movs	r1, #0
   13170:	202b      	movs	r0, #43	; 0x2b
   13172:	4b18      	ldr	r3, [pc, #96]	; (131d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13174:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   13176:	2100      	movs	r1, #0
   13178:	202a      	movs	r0, #42	; 0x2a
   1317a:	4b16      	ldr	r3, [pc, #88]	; (131d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1317c:	4798      	blx	r3

	delay_us(1);
   1317e:	2001      	movs	r0, #1
   13180:	4b15      	ldr	r3, [pc, #84]	; (131d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   13182:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   13184:	2300      	movs	r3, #0
   13186:	607b      	str	r3, [r7, #4]
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	2b06      	cmp	r3, #6
   1318c:	dc11      	bgt.n	131b2 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1318e:	2101      	movs	r1, #1
   13190:	202a      	movs	r0, #42	; 0x2a
   13192:	4b10      	ldr	r3, [pc, #64]	; (131d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13194:	4798      	blx	r3
		delay_us(1);
   13196:	2001      	movs	r0, #1
   13198:	4b0f      	ldr	r3, [pc, #60]	; (131d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1319a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   1319c:	2100      	movs	r1, #0
   1319e:	202a      	movs	r0, #42	; 0x2a
   131a0:	4b0c      	ldr	r3, [pc, #48]	; (131d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   131a2:	4798      	blx	r3
		delay_us(1);
   131a4:	2001      	movs	r0, #1
   131a6:	4b0c      	ldr	r3, [pc, #48]	; (131d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   131a8:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   131aa:	687b      	ldr	r3, [r7, #4]
   131ac:	3301      	adds	r3, #1
   131ae:	607b      	str	r3, [r7, #4]
   131b0:	e7ea      	b.n	13188 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   131b2:	2101      	movs	r1, #1
   131b4:	202b      	movs	r0, #43	; 0x2b
   131b6:	4b07      	ldr	r3, [pc, #28]	; (131d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   131b8:	4798      	blx	r3
	delay_us(1);
   131ba:	2001      	movs	r0, #1
   131bc:	4b06      	ldr	r3, [pc, #24]	; (131d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   131be:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   131c0:	4b06      	ldr	r3, [pc, #24]	; (131dc <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   131c2:	4798      	blx	r3
}
   131c4:	bf00      	nop
   131c6:	3708      	adds	r7, #8
   131c8:	46bd      	mov	sp, r7
   131ca:	bd80      	pop	{r7, pc}
   131cc:	000130a1 	.word	0x000130a1
   131d0:	000130c1 	.word	0x000130c1
   131d4:	000130f9 	.word	0x000130f9
   131d8:	00002a65 	.word	0x00002a65
   131dc:	00001dc1 	.word	0x00001dc1

000131e0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   131e0:	b480      	push	{r7}
   131e2:	b083      	sub	sp, #12
   131e4:	af00      	add	r7, sp, #0
   131e6:	6078      	str	r0, [r7, #4]
   131e8:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	683a      	ldr	r2, [r7, #0]
   131ee:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   131f0:	687b      	ldr	r3, [r7, #4]
   131f2:	4a04      	ldr	r2, [pc, #16]	; (13204 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   131f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   131f8:	687b      	ldr	r3, [r7, #4]
   131fa:	4618      	mov	r0, r3
   131fc:	370c      	adds	r7, #12
   131fe:	46bd      	mov	sp, r7
   13200:	bc80      	pop	{r7}
   13202:	4770      	bx	lr
   13204:	001fff00 	.word	0x001fff00

00013208 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   13208:	b480      	push	{r7}
   1320a:	b083      	sub	sp, #12
   1320c:	af00      	add	r7, sp, #0
   1320e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   13210:	687b      	ldr	r3, [r7, #4]
   13212:	4618      	mov	r0, r3
   13214:	370c      	adds	r7, #12
   13216:	46bd      	mov	sp, r7
   13218:	bc80      	pop	{r7}
   1321a:	4770      	bx	lr

0001321c <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   1321c:	b580      	push	{r7, lr}
   1321e:	b082      	sub	sp, #8
   13220:	af00      	add	r7, sp, #0
   13222:	6078      	str	r0, [r7, #4]
	xferDone=false;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2200      	movs	r2, #0
   13228:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1322a:	6878      	ldr	r0, [r7, #4]
   1322c:	4b04      	ldr	r3, [pc, #16]	; (13240 <_ZN13N25Q256_Class4InitEv+0x24>)
   1322e:	4798      	blx	r3
	return SelfTest();
   13230:	6878      	ldr	r0, [r7, #4]
   13232:	4b04      	ldr	r3, [pc, #16]	; (13244 <_ZN13N25Q256_Class4InitEv+0x28>)
   13234:	4798      	blx	r3
   13236:	4603      	mov	r3, r0
}
   13238:	4618      	mov	r0, r3
   1323a:	3708      	adds	r7, #8
   1323c:	46bd      	mov	sp, r7
   1323e:	bd80      	pop	{r7, pc}
   13240:	00013249 	.word	0x00013249
   13244:	000133e5 	.word	0x000133e5

00013248 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   13248:	b590      	push	{r4, r7, lr}
   1324a:	b083      	sub	sp, #12
   1324c:	af00      	add	r7, sp, #0
   1324e:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   13250:	687b      	ldr	r3, [r7, #4]
   13252:	685b      	ldr	r3, [r3, #4]
   13254:	4618      	mov	r0, r3
   13256:	4b08      	ldr	r3, [pc, #32]	; (13278 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   13258:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1325a:	687b      	ldr	r3, [r7, #4]
   1325c:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1325e:	2300      	movs	r3, #0
   13260:	4a06      	ldr	r2, [pc, #24]	; (1327c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   13262:	4807      	ldr	r0, [pc, #28]	; (13280 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   13264:	4c07      	ldr	r4, [pc, #28]	; (13284 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   13266:	47a0      	blx	r4
   13268:	4602      	mov	r2, r0
   1326a:	687b      	ldr	r3, [r7, #4]
   1326c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   13270:	bf00      	nop
   13272:	370c      	adds	r7, #12
   13274:	46bd      	mov	sp, r7
   13276:	bd90      	pop	{r4, r7, pc}
   13278:	00002f9d 	.word	0x00002f9d
   1327c:	00013131 	.word	0x00013131
   13280:	20009d48 	.word	0x20009d48
   13284:	0000c15d 	.word	0x0000c15d

00013288 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   13288:	b580      	push	{r7, lr}
   1328a:	b084      	sub	sp, #16
   1328c:	af00      	add	r7, sp, #0
   1328e:	6078      	str	r0, [r7, #4]
   13290:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   13292:	687b      	ldr	r3, [r7, #4]
   13294:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   13298:	685b      	ldr	r3, [r3, #4]
   1329a:	689b      	ldr	r3, [r3, #8]
   1329c:	687a      	ldr	r2, [r7, #4]
   1329e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   132a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   132a6:	6839      	ldr	r1, [r7, #0]
   132a8:	4798      	blx	r3
   132aa:	4603      	mov	r3, r0
   132ac:	60fb      	str	r3, [r7, #12]
	return	e;
   132ae:	68fb      	ldr	r3, [r7, #12]
}
   132b0:	4618      	mov	r0, r3
   132b2:	3710      	adds	r7, #16
   132b4:	46bd      	mov	sp, r7
   132b6:	bd80      	pop	{r7, pc}

000132b8 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   132b8:	b590      	push	{r4, r7, lr}
   132ba:	b087      	sub	sp, #28
   132bc:	af00      	add	r7, sp, #0
   132be:	60f8      	str	r0, [r7, #12]
   132c0:	60b9      	str	r1, [r7, #8]
   132c2:	607a      	str	r2, [r7, #4]
   132c4:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   132c6:	68fb      	ldr	r3, [r7, #12]
   132c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   132cc:	685b      	ldr	r3, [r3, #4]
   132ce:	685c      	ldr	r4, [r3, #4]
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   132d6:	683b      	ldr	r3, [r7, #0]
   132d8:	687a      	ldr	r2, [r7, #4]
   132da:	68b9      	ldr	r1, [r7, #8]
   132dc:	47a0      	blx	r4
   132de:	4603      	mov	r3, r0
   132e0:	617b      	str	r3, [r7, #20]
	return	w;
   132e2:	697b      	ldr	r3, [r7, #20]
}
   132e4:	4618      	mov	r0, r3
   132e6:	371c      	adds	r7, #28
   132e8:	46bd      	mov	sp, r7
   132ea:	bd90      	pop	{r4, r7, pc}

000132ec <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   132ec:	b590      	push	{r4, r7, lr}
   132ee:	b087      	sub	sp, #28
   132f0:	af00      	add	r7, sp, #0
   132f2:	60f8      	str	r0, [r7, #12]
   132f4:	60b9      	str	r1, [r7, #8]
   132f6:	607a      	str	r2, [r7, #4]
   132f8:	603b      	str	r3, [r7, #0]
	xferDone=false;
   132fa:	68fb      	ldr	r3, [r7, #12]
   132fc:	2200      	movs	r2, #0
   132fe:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   13300:	68fb      	ldr	r3, [r7, #12]
   13302:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   13306:	685b      	ldr	r3, [r3, #4]
   13308:	681c      	ldr	r4, [r3, #0]
   1330a:	68fb      	ldr	r3, [r7, #12]
   1330c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	687a      	ldr	r2, [r7, #4]
   13314:	68b9      	ldr	r1, [r7, #8]
   13316:	47a0      	blx	r4
   13318:	4603      	mov	r3, r0
   1331a:	617b      	str	r3, [r7, #20]
	return	r;
   1331c:	697b      	ldr	r3, [r7, #20]
}
   1331e:	4618      	mov	r0, r3
   13320:	371c      	adds	r7, #28
   13322:	46bd      	mov	sp, r7
   13324:	bd90      	pop	{r4, r7, pc}
	...

00013328 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   13328:	b580      	push	{r7, lr}
   1332a:	b082      	sub	sp, #8
   1332c:	af00      	add	r7, sp, #0
   1332e:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   13330:	687a      	ldr	r2, [r7, #4]
   13332:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13336:	f043 0310 	orr.w	r3, r3, #16
   1333a:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1333e:	687a      	ldr	r2, [r7, #4]
   13340:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13348:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   1334c:	687a      	ldr	r2, [r7, #4]
   1334e:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   13352:	f36f 1305 	bfc	r3, #4, #2
   13356:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1335a:	687b      	ldr	r3, [r7, #4]
   1335c:	2205      	movs	r2, #5
   1335e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   13362:	687b      	ldr	r3, [r7, #4]
   13364:	2201      	movs	r2, #1
   13366:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1336a:	687b      	ldr	r3, [r7, #4]
   1336c:	f203 2212 	addw	r2, r3, #530	; 0x212
   13370:	687b      	ldr	r3, [r7, #4]
   13372:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   13376:	687b      	ldr	r3, [r7, #4]
   13378:	685a      	ldr	r2, [r3, #4]
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	f503 7305 	add.w	r3, r3, #532	; 0x214
   13380:	4619      	mov	r1, r3
   13382:	4610      	mov	r0, r2
   13384:	4b04      	ldr	r3, [pc, #16]	; (13398 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   13386:	4798      	blx	r3
		return status;
   13388:	687b      	ldr	r3, [r7, #4]
   1338a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1338e:	4618      	mov	r0, r3
   13390:	3708      	adds	r7, #8
   13392:	46bd      	mov	sp, r7
   13394:	bd80      	pop	{r7, pc}
   13396:	bf00      	nop
   13398:	00003015 	.word	0x00003015

0001339c <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1339c:	b580      	push	{r7, lr}
   1339e:	b082      	sub	sp, #8
   133a0:	af00      	add	r7, sp, #0
   133a2:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   133a4:	6878      	ldr	r0, [r7, #4]
   133a6:	4b0e      	ldr	r3, [pc, #56]	; (133e0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   133a8:	4798      	blx	r3
   133aa:	4603      	mov	r3, r0
   133ac:	461a      	mov	r2, r3
   133ae:	687b      	ldr	r3, [r7, #4]
   133b0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   133ba:	f003 0301 	and.w	r3, r3, #1
   133be:	2b00      	cmp	r3, #0
   133c0:	d000      	beq.n	133c4 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   133c2:	e7ef      	b.n	133a4 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   133ca:	f003 0301 	and.w	r3, r3, #1
   133ce:	2b00      	cmp	r3, #0
   133d0:	bf0c      	ite	eq
   133d2:	2301      	moveq	r3, #1
   133d4:	2300      	movne	r3, #0
   133d6:	b2db      	uxtb	r3, r3
}
   133d8:	4618      	mov	r0, r3
   133da:	3708      	adds	r7, #8
   133dc:	46bd      	mov	sp, r7
   133de:	bd80      	pop	{r7, pc}
   133e0:	00013329 	.word	0x00013329

000133e4 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   133e4:	b590      	push	{r4, r7, lr}
   133e6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   133ea:	b085      	sub	sp, #20
   133ec:	af00      	add	r7, sp, #0
   133ee:	f107 0310 	add.w	r3, r7, #16
   133f2:	3b0c      	subs	r3, #12
   133f4:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   133f6:	f107 0310 	add.w	r3, r7, #16
   133fa:	3b0c      	subs	r3, #12
   133fc:	681b      	ldr	r3, [r3, #0]
   133fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   13402:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   13406:	f107 0310 	add.w	r3, r7, #16
   1340a:	3b0c      	subs	r3, #12
   1340c:	681b      	ldr	r3, [r3, #0]
   1340e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13412:	f107 0110 	add.w	r1, r7, #16
   13416:	3904      	subs	r1, #4
   13418:	f107 0010 	add.w	r0, r7, #16
   1341c:	380c      	subs	r0, #12
   1341e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13422:	6800      	ldr	r0, [r0, #0]
   13424:	4c4b      	ldr	r4, [pc, #300]	; (13554 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   13426:	47a0      	blx	r4
	WaitOnBusy();
   13428:	f107 0310 	add.w	r3, r7, #16
   1342c:	3b0c      	subs	r3, #12
   1342e:	6818      	ldr	r0, [r3, #0]
   13430:	4b49      	ldr	r3, [pc, #292]	; (13558 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13432:	4798      	blx	r3
	Erase(currentAddress);
   13434:	f107 0310 	add.w	r3, r7, #16
   13438:	3b0c      	subs	r3, #12
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13440:	f107 0310 	add.w	r3, r7, #16
   13444:	3b0c      	subs	r3, #12
   13446:	4611      	mov	r1, r2
   13448:	6818      	ldr	r0, [r3, #0]
   1344a:	4b44      	ldr	r3, [pc, #272]	; (1355c <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   1344c:	4798      	blx	r3
	WaitOnBusy();
   1344e:	f107 0310 	add.w	r3, r7, #16
   13452:	3b0c      	subs	r3, #12
   13454:	6818      	ldr	r0, [r3, #0]
   13456:	4b40      	ldr	r3, [pc, #256]	; (13558 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13458:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1345a:	f107 0310 	add.w	r3, r7, #16
   1345e:	3b0c      	subs	r3, #12
   13460:	681b      	ldr	r3, [r3, #0]
   13462:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13466:	f107 0110 	add.w	r1, r7, #16
   1346a:	3904      	subs	r1, #4
   1346c:	f107 0010 	add.w	r0, r7, #16
   13470:	380c      	subs	r0, #12
   13472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13476:	6800      	ldr	r0, [r0, #0]
   13478:	4c39      	ldr	r4, [pc, #228]	; (13560 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   1347a:	47a0      	blx	r4
	WaitOnBusy();
   1347c:	f107 0310 	add.w	r3, r7, #16
   13480:	3b0c      	subs	r3, #12
   13482:	6818      	ldr	r0, [r3, #0]
   13484:	4b34      	ldr	r3, [pc, #208]	; (13558 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13486:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   13488:	f107 0310 	add.w	r3, r7, #16
   1348c:	3b0c      	subs	r3, #12
   1348e:	681b      	ldr	r3, [r3, #0]
   13490:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13494:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   13498:	f101 0110 	add.w	r1, r1, #16
   1349c:	3904      	subs	r1, #4
   1349e:	f107 0010 	add.w	r0, r7, #16
   134a2:	380c      	subs	r0, #12
   134a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   134a8:	6800      	ldr	r0, [r0, #0]
   134aa:	4c2a      	ldr	r4, [pc, #168]	; (13554 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   134ac:	47a0      	blx	r4
	WaitOnBusy();
   134ae:	f107 0310 	add.w	r3, r7, #16
   134b2:	3b0c      	subs	r3, #12
   134b4:	6818      	ldr	r0, [r3, #0]
   134b6:	4b28      	ldr	r3, [pc, #160]	; (13558 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   134b8:	4798      	blx	r3
	isOK	 = true;
   134ba:	f107 0310 	add.w	r3, r7, #16
   134be:	3b0c      	subs	r3, #12
   134c0:	681b      	ldr	r3, [r3, #0]
   134c2:	2201      	movs	r2, #1
   134c4:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   134c8:	2300      	movs	r3, #0
   134ca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   134ce:	f102 020c 	add.w	r2, r2, #12
   134d2:	6013      	str	r3, [r2, #0]
   134d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   134d8:	f103 030c 	add.w	r3, r3, #12
   134dc:	681b      	ldr	r3, [r3, #0]
   134de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   134e2:	da2b      	bge.n	1353c <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   134e4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   134e8:	f103 0310 	add.w	r3, r3, #16
   134ec:	3b04      	subs	r3, #4
   134ee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   134f2:	f102 020c 	add.w	r2, r2, #12
   134f6:	6812      	ldr	r2, [r2, #0]
   134f8:	4413      	add	r3, r2
   134fa:	781a      	ldrb	r2, [r3, #0]
   134fc:	f107 0310 	add.w	r3, r7, #16
   13500:	3b04      	subs	r3, #4
   13502:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   13506:	f101 010c 	add.w	r1, r1, #12
   1350a:	6809      	ldr	r1, [r1, #0]
   1350c:	440b      	add	r3, r1
   1350e:	781b      	ldrb	r3, [r3, #0]
   13510:	429a      	cmp	r2, r3
   13512:	d007      	beq.n	13524 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   13514:	f107 0310 	add.w	r3, r7, #16
   13518:	3b0c      	subs	r3, #12
   1351a:	681b      	ldr	r3, [r3, #0]
   1351c:	2200      	movs	r2, #0
   1351e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   13522:	e00b      	b.n	1353c <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   13524:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   13528:	f103 030c 	add.w	r3, r3, #12
   1352c:	681b      	ldr	r3, [r3, #0]
   1352e:	3301      	adds	r3, #1
   13530:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13534:	f102 020c 	add.w	r2, r2, #12
   13538:	6013      	str	r3, [r2, #0]
   1353a:	e7cb      	b.n	134d4 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   1353c:	f107 0310 	add.w	r3, r7, #16
   13540:	3b0c      	subs	r3, #12
   13542:	681b      	ldr	r3, [r3, #0]
   13544:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   13548:	4618      	mov	r0, r3
   1354a:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1354e:	3714      	adds	r7, #20
   13550:	46bd      	mov	sp, r7
   13552:	bd90      	pop	{r4, r7, pc}
   13554:	000132ed 	.word	0x000132ed
   13558:	0001339d 	.word	0x0001339d
   1355c:	00013289 	.word	0x00013289
   13560:	000132b9 	.word	0x000132b9

00013564 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   13564:	b580      	push	{r7, lr}
   13566:	b082      	sub	sp, #8
   13568:	af00      	add	r7, sp, #0
   1356a:	6078      	str	r0, [r7, #4]
   1356c:	6039      	str	r1, [r7, #0]
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	2b01      	cmp	r3, #1
   13572:	d10d      	bne.n	13590 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13574:	683b      	ldr	r3, [r7, #0]
   13576:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1357a:	4293      	cmp	r3, r2
   1357c:	d108      	bne.n	13590 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1357e:	4906      	ldr	r1, [pc, #24]	; (13598 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13580:	4806      	ldr	r0, [pc, #24]	; (1359c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13582:	4b07      	ldr	r3, [pc, #28]	; (135a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13584:	4798      	blx	r3
   13586:	4a07      	ldr	r2, [pc, #28]	; (135a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13588:	4907      	ldr	r1, [pc, #28]	; (135a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1358a:	4804      	ldr	r0, [pc, #16]	; (1359c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1358c:	4b07      	ldr	r3, [pc, #28]	; (135ac <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1358e:	4798      	blx	r3
   13590:	bf00      	nop
   13592:	3708      	adds	r7, #8
   13594:	46bd      	mov	sp, r7
   13596:	bd80      	pop	{r7, pc}
   13598:	2000a018 	.word	0x2000a018
   1359c:	20009d58 	.word	0x20009d58
   135a0:	000131e1 	.word	0x000131e1
   135a4:	20000000 	.word	0x20000000
   135a8:	00013209 	.word	0x00013209
   135ac:	000135c5 	.word	0x000135c5

000135b0 <_GLOBAL__sub_I_ptrN25Q256Class>:
   135b0:	b580      	push	{r7, lr}
   135b2:	af00      	add	r7, sp, #0
   135b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   135b8:	2001      	movs	r0, #1
   135ba:	4b01      	ldr	r3, [pc, #4]	; (135c0 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   135bc:	4798      	blx	r3
   135be:	bd80      	pop	{r7, pc}
   135c0:	00013565 	.word	0x00013565

000135c4 <__aeabi_atexit>:
   135c4:	460b      	mov	r3, r1
   135c6:	4601      	mov	r1, r0
   135c8:	4618      	mov	r0, r3
   135ca:	f000 ba7f 	b.w	13acc <__cxa_atexit>
   135ce:	bf00      	nop

000135d0 <__aeabi_frsub>:
   135d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   135d4:	e002      	b.n	135dc <__addsf3>
   135d6:	bf00      	nop

000135d8 <__aeabi_fsub>:
   135d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000135dc <__addsf3>:
   135dc:	0042      	lsls	r2, r0, #1
   135de:	bf1f      	itttt	ne
   135e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   135e4:	ea92 0f03 	teqne	r2, r3
   135e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   135ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   135f0:	d06a      	beq.n	136c8 <__addsf3+0xec>
   135f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   135f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   135fa:	bfc1      	itttt	gt
   135fc:	18d2      	addgt	r2, r2, r3
   135fe:	4041      	eorgt	r1, r0
   13600:	4048      	eorgt	r0, r1
   13602:	4041      	eorgt	r1, r0
   13604:	bfb8      	it	lt
   13606:	425b      	neglt	r3, r3
   13608:	2b19      	cmp	r3, #25
   1360a:	bf88      	it	hi
   1360c:	4770      	bxhi	lr
   1360e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13612:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13616:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1361a:	bf18      	it	ne
   1361c:	4240      	negne	r0, r0
   1361e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13622:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   13626:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1362a:	bf18      	it	ne
   1362c:	4249      	negne	r1, r1
   1362e:	ea92 0f03 	teq	r2, r3
   13632:	d03f      	beq.n	136b4 <__addsf3+0xd8>
   13634:	f1a2 0201 	sub.w	r2, r2, #1
   13638:	fa41 fc03 	asr.w	ip, r1, r3
   1363c:	eb10 000c 	adds.w	r0, r0, ip
   13640:	f1c3 0320 	rsb	r3, r3, #32
   13644:	fa01 f103 	lsl.w	r1, r1, r3
   13648:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1364c:	d502      	bpl.n	13654 <__addsf3+0x78>
   1364e:	4249      	negs	r1, r1
   13650:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13654:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13658:	d313      	bcc.n	13682 <__addsf3+0xa6>
   1365a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1365e:	d306      	bcc.n	1366e <__addsf3+0x92>
   13660:	0840      	lsrs	r0, r0, #1
   13662:	ea4f 0131 	mov.w	r1, r1, rrx
   13666:	f102 0201 	add.w	r2, r2, #1
   1366a:	2afe      	cmp	r2, #254	; 0xfe
   1366c:	d251      	bcs.n	13712 <__addsf3+0x136>
   1366e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13672:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13676:	bf08      	it	eq
   13678:	f020 0001 	biceq.w	r0, r0, #1
   1367c:	ea40 0003 	orr.w	r0, r0, r3
   13680:	4770      	bx	lr
   13682:	0049      	lsls	r1, r1, #1
   13684:	eb40 0000 	adc.w	r0, r0, r0
   13688:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1368c:	f1a2 0201 	sub.w	r2, r2, #1
   13690:	d1ed      	bne.n	1366e <__addsf3+0x92>
   13692:	fab0 fc80 	clz	ip, r0
   13696:	f1ac 0c08 	sub.w	ip, ip, #8
   1369a:	ebb2 020c 	subs.w	r2, r2, ip
   1369e:	fa00 f00c 	lsl.w	r0, r0, ip
   136a2:	bfaa      	itet	ge
   136a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   136a8:	4252      	neglt	r2, r2
   136aa:	4318      	orrge	r0, r3
   136ac:	bfbc      	itt	lt
   136ae:	40d0      	lsrlt	r0, r2
   136b0:	4318      	orrlt	r0, r3
   136b2:	4770      	bx	lr
   136b4:	f092 0f00 	teq	r2, #0
   136b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   136bc:	bf06      	itte	eq
   136be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   136c2:	3201      	addeq	r2, #1
   136c4:	3b01      	subne	r3, #1
   136c6:	e7b5      	b.n	13634 <__addsf3+0x58>
   136c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   136cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   136d0:	bf18      	it	ne
   136d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   136d6:	d021      	beq.n	1371c <__addsf3+0x140>
   136d8:	ea92 0f03 	teq	r2, r3
   136dc:	d004      	beq.n	136e8 <__addsf3+0x10c>
   136de:	f092 0f00 	teq	r2, #0
   136e2:	bf08      	it	eq
   136e4:	4608      	moveq	r0, r1
   136e6:	4770      	bx	lr
   136e8:	ea90 0f01 	teq	r0, r1
   136ec:	bf1c      	itt	ne
   136ee:	2000      	movne	r0, #0
   136f0:	4770      	bxne	lr
   136f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   136f6:	d104      	bne.n	13702 <__addsf3+0x126>
   136f8:	0040      	lsls	r0, r0, #1
   136fa:	bf28      	it	cs
   136fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13700:	4770      	bx	lr
   13702:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   13706:	bf3c      	itt	cc
   13708:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1370c:	4770      	bxcc	lr
   1370e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13712:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   13716:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1371a:	4770      	bx	lr
   1371c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13720:	bf16      	itet	ne
   13722:	4608      	movne	r0, r1
   13724:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13728:	4601      	movne	r1, r0
   1372a:	0242      	lsls	r2, r0, #9
   1372c:	bf06      	itte	eq
   1372e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13732:	ea90 0f01 	teqeq	r0, r1
   13736:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1373a:	4770      	bx	lr

0001373c <__aeabi_ui2f>:
   1373c:	f04f 0300 	mov.w	r3, #0
   13740:	e004      	b.n	1374c <__aeabi_i2f+0x8>
   13742:	bf00      	nop

00013744 <__aeabi_i2f>:
   13744:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13748:	bf48      	it	mi
   1374a:	4240      	negmi	r0, r0
   1374c:	ea5f 0c00 	movs.w	ip, r0
   13750:	bf08      	it	eq
   13752:	4770      	bxeq	lr
   13754:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13758:	4601      	mov	r1, r0
   1375a:	f04f 0000 	mov.w	r0, #0
   1375e:	e01c      	b.n	1379a <__aeabi_l2f+0x2a>

00013760 <__aeabi_ul2f>:
   13760:	ea50 0201 	orrs.w	r2, r0, r1
   13764:	bf08      	it	eq
   13766:	4770      	bxeq	lr
   13768:	f04f 0300 	mov.w	r3, #0
   1376c:	e00a      	b.n	13784 <__aeabi_l2f+0x14>
   1376e:	bf00      	nop

00013770 <__aeabi_l2f>:
   13770:	ea50 0201 	orrs.w	r2, r0, r1
   13774:	bf08      	it	eq
   13776:	4770      	bxeq	lr
   13778:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1377c:	d502      	bpl.n	13784 <__aeabi_l2f+0x14>
   1377e:	4240      	negs	r0, r0
   13780:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13784:	ea5f 0c01 	movs.w	ip, r1
   13788:	bf02      	ittt	eq
   1378a:	4684      	moveq	ip, r0
   1378c:	4601      	moveq	r1, r0
   1378e:	2000      	moveq	r0, #0
   13790:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13794:	bf08      	it	eq
   13796:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1379a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1379e:	fabc f28c 	clz	r2, ip
   137a2:	3a08      	subs	r2, #8
   137a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   137a8:	db10      	blt.n	137cc <__aeabi_l2f+0x5c>
   137aa:	fa01 fc02 	lsl.w	ip, r1, r2
   137ae:	4463      	add	r3, ip
   137b0:	fa00 fc02 	lsl.w	ip, r0, r2
   137b4:	f1c2 0220 	rsb	r2, r2, #32
   137b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   137bc:	fa20 f202 	lsr.w	r2, r0, r2
   137c0:	eb43 0002 	adc.w	r0, r3, r2
   137c4:	bf08      	it	eq
   137c6:	f020 0001 	biceq.w	r0, r0, #1
   137ca:	4770      	bx	lr
   137cc:	f102 0220 	add.w	r2, r2, #32
   137d0:	fa01 fc02 	lsl.w	ip, r1, r2
   137d4:	f1c2 0220 	rsb	r2, r2, #32
   137d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   137dc:	fa21 f202 	lsr.w	r2, r1, r2
   137e0:	eb43 0002 	adc.w	r0, r3, r2
   137e4:	bf08      	it	eq
   137e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   137ea:	4770      	bx	lr

000137ec <__aeabi_fmul>:
   137ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
   137f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   137f4:	bf1e      	ittt	ne
   137f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   137fa:	ea92 0f0c 	teqne	r2, ip
   137fe:	ea93 0f0c 	teqne	r3, ip
   13802:	d06f      	beq.n	138e4 <__aeabi_fmul+0xf8>
   13804:	441a      	add	r2, r3
   13806:	ea80 0c01 	eor.w	ip, r0, r1
   1380a:	0240      	lsls	r0, r0, #9
   1380c:	bf18      	it	ne
   1380e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13812:	d01e      	beq.n	13852 <__aeabi_fmul+0x66>
   13814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13818:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1381c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13820:	fba0 3101 	umull	r3, r1, r0, r1
   13824:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13828:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1382c:	bf3e      	ittt	cc
   1382e:	0049      	lslcc	r1, r1, #1
   13830:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13834:	005b      	lslcc	r3, r3, #1
   13836:	ea40 0001 	orr.w	r0, r0, r1
   1383a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1383e:	2afd      	cmp	r2, #253	; 0xfd
   13840:	d81d      	bhi.n	1387e <__aeabi_fmul+0x92>
   13842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13846:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1384a:	bf08      	it	eq
   1384c:	f020 0001 	biceq.w	r0, r0, #1
   13850:	4770      	bx	lr
   13852:	f090 0f00 	teq	r0, #0
   13856:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1385a:	bf08      	it	eq
   1385c:	0249      	lsleq	r1, r1, #9
   1385e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13862:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13866:	3a7f      	subs	r2, #127	; 0x7f
   13868:	bfc2      	ittt	gt
   1386a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1386e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13872:	4770      	bxgt	lr
   13874:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13878:	f04f 0300 	mov.w	r3, #0
   1387c:	3a01      	subs	r2, #1
   1387e:	dc5d      	bgt.n	1393c <__aeabi_fmul+0x150>
   13880:	f112 0f19 	cmn.w	r2, #25
   13884:	bfdc      	itt	le
   13886:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1388a:	4770      	bxle	lr
   1388c:	f1c2 0200 	rsb	r2, r2, #0
   13890:	0041      	lsls	r1, r0, #1
   13892:	fa21 f102 	lsr.w	r1, r1, r2
   13896:	f1c2 0220 	rsb	r2, r2, #32
   1389a:	fa00 fc02 	lsl.w	ip, r0, r2
   1389e:	ea5f 0031 	movs.w	r0, r1, rrx
   138a2:	f140 0000 	adc.w	r0, r0, #0
   138a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   138aa:	bf08      	it	eq
   138ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   138b0:	4770      	bx	lr
   138b2:	f092 0f00 	teq	r2, #0
   138b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   138ba:	bf02      	ittt	eq
   138bc:	0040      	lsleq	r0, r0, #1
   138be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   138c2:	3a01      	subeq	r2, #1
   138c4:	d0f9      	beq.n	138ba <__aeabi_fmul+0xce>
   138c6:	ea40 000c 	orr.w	r0, r0, ip
   138ca:	f093 0f00 	teq	r3, #0
   138ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   138d2:	bf02      	ittt	eq
   138d4:	0049      	lsleq	r1, r1, #1
   138d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   138da:	3b01      	subeq	r3, #1
   138dc:	d0f9      	beq.n	138d2 <__aeabi_fmul+0xe6>
   138de:	ea41 010c 	orr.w	r1, r1, ip
   138e2:	e78f      	b.n	13804 <__aeabi_fmul+0x18>
   138e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   138e8:	ea92 0f0c 	teq	r2, ip
   138ec:	bf18      	it	ne
   138ee:	ea93 0f0c 	teqne	r3, ip
   138f2:	d00a      	beq.n	1390a <__aeabi_fmul+0x11e>
   138f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   138f8:	bf18      	it	ne
   138fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   138fe:	d1d8      	bne.n	138b2 <__aeabi_fmul+0xc6>
   13900:	ea80 0001 	eor.w	r0, r0, r1
   13904:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13908:	4770      	bx	lr
   1390a:	f090 0f00 	teq	r0, #0
   1390e:	bf17      	itett	ne
   13910:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   13914:	4608      	moveq	r0, r1
   13916:	f091 0f00 	teqne	r1, #0
   1391a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1391e:	d014      	beq.n	1394a <__aeabi_fmul+0x15e>
   13920:	ea92 0f0c 	teq	r2, ip
   13924:	d101      	bne.n	1392a <__aeabi_fmul+0x13e>
   13926:	0242      	lsls	r2, r0, #9
   13928:	d10f      	bne.n	1394a <__aeabi_fmul+0x15e>
   1392a:	ea93 0f0c 	teq	r3, ip
   1392e:	d103      	bne.n	13938 <__aeabi_fmul+0x14c>
   13930:	024b      	lsls	r3, r1, #9
   13932:	bf18      	it	ne
   13934:	4608      	movne	r0, r1
   13936:	d108      	bne.n	1394a <__aeabi_fmul+0x15e>
   13938:	ea80 0001 	eor.w	r0, r0, r1
   1393c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13948:	4770      	bx	lr
   1394a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1394e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   13952:	4770      	bx	lr

00013954 <__aeabi_fdiv>:
   13954:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13958:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1395c:	bf1e      	ittt	ne
   1395e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13962:	ea92 0f0c 	teqne	r2, ip
   13966:	ea93 0f0c 	teqne	r3, ip
   1396a:	d069      	beq.n	13a40 <__aeabi_fdiv+0xec>
   1396c:	eba2 0203 	sub.w	r2, r2, r3
   13970:	ea80 0c01 	eor.w	ip, r0, r1
   13974:	0249      	lsls	r1, r1, #9
   13976:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1397a:	d037      	beq.n	139ec <__aeabi_fdiv+0x98>
   1397c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13980:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13984:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   13988:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1398c:	428b      	cmp	r3, r1
   1398e:	bf38      	it	cc
   13990:	005b      	lslcc	r3, r3, #1
   13992:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   13996:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1399a:	428b      	cmp	r3, r1
   1399c:	bf24      	itt	cs
   1399e:	1a5b      	subcs	r3, r3, r1
   139a0:	ea40 000c 	orrcs.w	r0, r0, ip
   139a4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   139a8:	bf24      	itt	cs
   139aa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   139ae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   139b2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   139b6:	bf24      	itt	cs
   139b8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   139bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   139c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   139c4:	bf24      	itt	cs
   139c6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   139ca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   139ce:	011b      	lsls	r3, r3, #4
   139d0:	bf18      	it	ne
   139d2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   139d6:	d1e0      	bne.n	1399a <__aeabi_fdiv+0x46>
   139d8:	2afd      	cmp	r2, #253	; 0xfd
   139da:	f63f af50 	bhi.w	1387e <__aeabi_fmul+0x92>
   139de:	428b      	cmp	r3, r1
   139e0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   139e4:	bf08      	it	eq
   139e6:	f020 0001 	biceq.w	r0, r0, #1
   139ea:	4770      	bx	lr
   139ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   139f0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   139f4:	327f      	adds	r2, #127	; 0x7f
   139f6:	bfc2      	ittt	gt
   139f8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   139fc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13a00:	4770      	bxgt	lr
   13a02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13a06:	f04f 0300 	mov.w	r3, #0
   13a0a:	3a01      	subs	r2, #1
   13a0c:	e737      	b.n	1387e <__aeabi_fmul+0x92>
   13a0e:	f092 0f00 	teq	r2, #0
   13a12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13a16:	bf02      	ittt	eq
   13a18:	0040      	lsleq	r0, r0, #1
   13a1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13a1e:	3a01      	subeq	r2, #1
   13a20:	d0f9      	beq.n	13a16 <__aeabi_fdiv+0xc2>
   13a22:	ea40 000c 	orr.w	r0, r0, ip
   13a26:	f093 0f00 	teq	r3, #0
   13a2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13a2e:	bf02      	ittt	eq
   13a30:	0049      	lsleq	r1, r1, #1
   13a32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13a36:	3b01      	subeq	r3, #1
   13a38:	d0f9      	beq.n	13a2e <__aeabi_fdiv+0xda>
   13a3a:	ea41 010c 	orr.w	r1, r1, ip
   13a3e:	e795      	b.n	1396c <__aeabi_fdiv+0x18>
   13a40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13a44:	ea92 0f0c 	teq	r2, ip
   13a48:	d108      	bne.n	13a5c <__aeabi_fdiv+0x108>
   13a4a:	0242      	lsls	r2, r0, #9
   13a4c:	f47f af7d 	bne.w	1394a <__aeabi_fmul+0x15e>
   13a50:	ea93 0f0c 	teq	r3, ip
   13a54:	f47f af70 	bne.w	13938 <__aeabi_fmul+0x14c>
   13a58:	4608      	mov	r0, r1
   13a5a:	e776      	b.n	1394a <__aeabi_fmul+0x15e>
   13a5c:	ea93 0f0c 	teq	r3, ip
   13a60:	d104      	bne.n	13a6c <__aeabi_fdiv+0x118>
   13a62:	024b      	lsls	r3, r1, #9
   13a64:	f43f af4c 	beq.w	13900 <__aeabi_fmul+0x114>
   13a68:	4608      	mov	r0, r1
   13a6a:	e76e      	b.n	1394a <__aeabi_fmul+0x15e>
   13a6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13a70:	bf18      	it	ne
   13a72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13a76:	d1ca      	bne.n	13a0e <__aeabi_fdiv+0xba>
   13a78:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13a7c:	f47f af5c 	bne.w	13938 <__aeabi_fmul+0x14c>
   13a80:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13a84:	f47f af3c 	bne.w	13900 <__aeabi_fmul+0x114>
   13a88:	e75f      	b.n	1394a <__aeabi_fmul+0x15e>
   13a8a:	bf00      	nop

00013a8c <__aeabi_f2uiz>:
   13a8c:	0042      	lsls	r2, r0, #1
   13a8e:	d20e      	bcs.n	13aae <__aeabi_f2uiz+0x22>
   13a90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13a94:	d30b      	bcc.n	13aae <__aeabi_f2uiz+0x22>
   13a96:	f04f 039e 	mov.w	r3, #158	; 0x9e
   13a9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   13a9e:	d409      	bmi.n	13ab4 <__aeabi_f2uiz+0x28>
   13aa0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13aa8:	fa23 f002 	lsr.w	r0, r3, r2
   13aac:	4770      	bx	lr
   13aae:	f04f 0000 	mov.w	r0, #0
   13ab2:	4770      	bx	lr
   13ab4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13ab8:	d101      	bne.n	13abe <__aeabi_f2uiz+0x32>
   13aba:	0242      	lsls	r2, r0, #9
   13abc:	d102      	bne.n	13ac4 <__aeabi_f2uiz+0x38>
   13abe:	f04f 30ff 	mov.w	r0, #4294967295
   13ac2:	4770      	bx	lr
   13ac4:	f04f 0000 	mov.w	r0, #0
   13ac8:	4770      	bx	lr
   13aca:	bf00      	nop

00013acc <__cxa_atexit>:
   13acc:	4613      	mov	r3, r2
   13ace:	460a      	mov	r2, r1
   13ad0:	4601      	mov	r1, r0
   13ad2:	2002      	movs	r0, #2
   13ad4:	f000 b9a2 	b.w	13e1c <__register_exitproc>

00013ad8 <ffs>:
   13ad8:	b140      	cbz	r0, 13aec <ffs+0x14>
   13ada:	2300      	movs	r3, #0
   13adc:	fa40 f103 	asr.w	r1, r0, r3
   13ae0:	1c5a      	adds	r2, r3, #1
   13ae2:	07c9      	lsls	r1, r1, #31
   13ae4:	4613      	mov	r3, r2
   13ae6:	d5f9      	bpl.n	13adc <ffs+0x4>
   13ae8:	4610      	mov	r0, r2
   13aea:	4770      	bx	lr
   13aec:	4602      	mov	r2, r0
   13aee:	4610      	mov	r0, r2
   13af0:	4770      	bx	lr
   13af2:	bf00      	nop

00013af4 <__libc_init_array>:
   13af4:	b570      	push	{r4, r5, r6, lr}
   13af6:	4e0f      	ldr	r6, [pc, #60]	; (13b34 <__libc_init_array+0x40>)
   13af8:	4d0f      	ldr	r5, [pc, #60]	; (13b38 <__libc_init_array+0x44>)
   13afa:	1b76      	subs	r6, r6, r5
   13afc:	10b6      	asrs	r6, r6, #2
   13afe:	bf18      	it	ne
   13b00:	2400      	movne	r4, #0
   13b02:	d005      	beq.n	13b10 <__libc_init_array+0x1c>
   13b04:	3401      	adds	r4, #1
   13b06:	f855 3b04 	ldr.w	r3, [r5], #4
   13b0a:	4798      	blx	r3
   13b0c:	42a6      	cmp	r6, r4
   13b0e:	d1f9      	bne.n	13b04 <__libc_init_array+0x10>
   13b10:	4e0a      	ldr	r6, [pc, #40]	; (13b3c <__libc_init_array+0x48>)
   13b12:	4d0b      	ldr	r5, [pc, #44]	; (13b40 <__libc_init_array+0x4c>)
   13b14:	1b76      	subs	r6, r6, r5
   13b16:	f000 fcb1 	bl	1447c <_init>
   13b1a:	10b6      	asrs	r6, r6, #2
   13b1c:	bf18      	it	ne
   13b1e:	2400      	movne	r4, #0
   13b20:	d006      	beq.n	13b30 <__libc_init_array+0x3c>
   13b22:	3401      	adds	r4, #1
   13b24:	f855 3b04 	ldr.w	r3, [r5], #4
   13b28:	4798      	blx	r3
   13b2a:	42a6      	cmp	r6, r4
   13b2c:	d1f9      	bne.n	13b22 <__libc_init_array+0x2e>
   13b2e:	bd70      	pop	{r4, r5, r6, pc}
   13b30:	bd70      	pop	{r4, r5, r6, pc}
   13b32:	bf00      	nop
   13b34:	00014488 	.word	0x00014488
   13b38:	00014488 	.word	0x00014488
   13b3c:	000144d0 	.word	0x000144d0
   13b40:	00014488 	.word	0x00014488

00013b44 <memcpy>:
   13b44:	4684      	mov	ip, r0
   13b46:	ea41 0300 	orr.w	r3, r1, r0
   13b4a:	f013 0303 	ands.w	r3, r3, #3
   13b4e:	d16d      	bne.n	13c2c <memcpy+0xe8>
   13b50:	3a40      	subs	r2, #64	; 0x40
   13b52:	d341      	bcc.n	13bd8 <memcpy+0x94>
   13b54:	f851 3b04 	ldr.w	r3, [r1], #4
   13b58:	f840 3b04 	str.w	r3, [r0], #4
   13b5c:	f851 3b04 	ldr.w	r3, [r1], #4
   13b60:	f840 3b04 	str.w	r3, [r0], #4
   13b64:	f851 3b04 	ldr.w	r3, [r1], #4
   13b68:	f840 3b04 	str.w	r3, [r0], #4
   13b6c:	f851 3b04 	ldr.w	r3, [r1], #4
   13b70:	f840 3b04 	str.w	r3, [r0], #4
   13b74:	f851 3b04 	ldr.w	r3, [r1], #4
   13b78:	f840 3b04 	str.w	r3, [r0], #4
   13b7c:	f851 3b04 	ldr.w	r3, [r1], #4
   13b80:	f840 3b04 	str.w	r3, [r0], #4
   13b84:	f851 3b04 	ldr.w	r3, [r1], #4
   13b88:	f840 3b04 	str.w	r3, [r0], #4
   13b8c:	f851 3b04 	ldr.w	r3, [r1], #4
   13b90:	f840 3b04 	str.w	r3, [r0], #4
   13b94:	f851 3b04 	ldr.w	r3, [r1], #4
   13b98:	f840 3b04 	str.w	r3, [r0], #4
   13b9c:	f851 3b04 	ldr.w	r3, [r1], #4
   13ba0:	f840 3b04 	str.w	r3, [r0], #4
   13ba4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ba8:	f840 3b04 	str.w	r3, [r0], #4
   13bac:	f851 3b04 	ldr.w	r3, [r1], #4
   13bb0:	f840 3b04 	str.w	r3, [r0], #4
   13bb4:	f851 3b04 	ldr.w	r3, [r1], #4
   13bb8:	f840 3b04 	str.w	r3, [r0], #4
   13bbc:	f851 3b04 	ldr.w	r3, [r1], #4
   13bc0:	f840 3b04 	str.w	r3, [r0], #4
   13bc4:	f851 3b04 	ldr.w	r3, [r1], #4
   13bc8:	f840 3b04 	str.w	r3, [r0], #4
   13bcc:	f851 3b04 	ldr.w	r3, [r1], #4
   13bd0:	f840 3b04 	str.w	r3, [r0], #4
   13bd4:	3a40      	subs	r2, #64	; 0x40
   13bd6:	d2bd      	bcs.n	13b54 <memcpy+0x10>
   13bd8:	3230      	adds	r2, #48	; 0x30
   13bda:	d311      	bcc.n	13c00 <memcpy+0xbc>
   13bdc:	f851 3b04 	ldr.w	r3, [r1], #4
   13be0:	f840 3b04 	str.w	r3, [r0], #4
   13be4:	f851 3b04 	ldr.w	r3, [r1], #4
   13be8:	f840 3b04 	str.w	r3, [r0], #4
   13bec:	f851 3b04 	ldr.w	r3, [r1], #4
   13bf0:	f840 3b04 	str.w	r3, [r0], #4
   13bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   13bf8:	f840 3b04 	str.w	r3, [r0], #4
   13bfc:	3a10      	subs	r2, #16
   13bfe:	d2ed      	bcs.n	13bdc <memcpy+0x98>
   13c00:	320c      	adds	r2, #12
   13c02:	d305      	bcc.n	13c10 <memcpy+0xcc>
   13c04:	f851 3b04 	ldr.w	r3, [r1], #4
   13c08:	f840 3b04 	str.w	r3, [r0], #4
   13c0c:	3a04      	subs	r2, #4
   13c0e:	d2f9      	bcs.n	13c04 <memcpy+0xc0>
   13c10:	3204      	adds	r2, #4
   13c12:	d008      	beq.n	13c26 <memcpy+0xe2>
   13c14:	07d2      	lsls	r2, r2, #31
   13c16:	bf1c      	itt	ne
   13c18:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13c1c:	f800 3b01 	strbne.w	r3, [r0], #1
   13c20:	d301      	bcc.n	13c26 <memcpy+0xe2>
   13c22:	880b      	ldrh	r3, [r1, #0]
   13c24:	8003      	strh	r3, [r0, #0]
   13c26:	4660      	mov	r0, ip
   13c28:	4770      	bx	lr
   13c2a:	bf00      	nop
   13c2c:	2a08      	cmp	r2, #8
   13c2e:	d313      	bcc.n	13c58 <memcpy+0x114>
   13c30:	078b      	lsls	r3, r1, #30
   13c32:	d08d      	beq.n	13b50 <memcpy+0xc>
   13c34:	f010 0303 	ands.w	r3, r0, #3
   13c38:	d08a      	beq.n	13b50 <memcpy+0xc>
   13c3a:	f1c3 0304 	rsb	r3, r3, #4
   13c3e:	1ad2      	subs	r2, r2, r3
   13c40:	07db      	lsls	r3, r3, #31
   13c42:	bf1c      	itt	ne
   13c44:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13c48:	f800 3b01 	strbne.w	r3, [r0], #1
   13c4c:	d380      	bcc.n	13b50 <memcpy+0xc>
   13c4e:	f831 3b02 	ldrh.w	r3, [r1], #2
   13c52:	f820 3b02 	strh.w	r3, [r0], #2
   13c56:	e77b      	b.n	13b50 <memcpy+0xc>
   13c58:	3a04      	subs	r2, #4
   13c5a:	d3d9      	bcc.n	13c10 <memcpy+0xcc>
   13c5c:	3a01      	subs	r2, #1
   13c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
   13c62:	f800 3b01 	strb.w	r3, [r0], #1
   13c66:	d2f9      	bcs.n	13c5c <memcpy+0x118>
   13c68:	780b      	ldrb	r3, [r1, #0]
   13c6a:	7003      	strb	r3, [r0, #0]
   13c6c:	784b      	ldrb	r3, [r1, #1]
   13c6e:	7043      	strb	r3, [r0, #1]
   13c70:	788b      	ldrb	r3, [r1, #2]
   13c72:	7083      	strb	r3, [r0, #2]
   13c74:	4660      	mov	r0, ip
   13c76:	4770      	bx	lr

00013c78 <memset>:
   13c78:	b470      	push	{r4, r5, r6}
   13c7a:	0786      	lsls	r6, r0, #30
   13c7c:	d046      	beq.n	13d0c <memset+0x94>
   13c7e:	1e54      	subs	r4, r2, #1
   13c80:	2a00      	cmp	r2, #0
   13c82:	d041      	beq.n	13d08 <memset+0x90>
   13c84:	b2ca      	uxtb	r2, r1
   13c86:	4603      	mov	r3, r0
   13c88:	e002      	b.n	13c90 <memset+0x18>
   13c8a:	f114 34ff 	adds.w	r4, r4, #4294967295
   13c8e:	d33b      	bcc.n	13d08 <memset+0x90>
   13c90:	f803 2b01 	strb.w	r2, [r3], #1
   13c94:	079d      	lsls	r5, r3, #30
   13c96:	d1f8      	bne.n	13c8a <memset+0x12>
   13c98:	2c03      	cmp	r4, #3
   13c9a:	d92e      	bls.n	13cfa <memset+0x82>
   13c9c:	b2cd      	uxtb	r5, r1
   13c9e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   13ca2:	2c0f      	cmp	r4, #15
   13ca4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   13ca8:	d919      	bls.n	13cde <memset+0x66>
   13caa:	f103 0210 	add.w	r2, r3, #16
   13cae:	4626      	mov	r6, r4
   13cb0:	3e10      	subs	r6, #16
   13cb2:	2e0f      	cmp	r6, #15
   13cb4:	f842 5c10 	str.w	r5, [r2, #-16]
   13cb8:	f842 5c0c 	str.w	r5, [r2, #-12]
   13cbc:	f842 5c08 	str.w	r5, [r2, #-8]
   13cc0:	f842 5c04 	str.w	r5, [r2, #-4]
   13cc4:	f102 0210 	add.w	r2, r2, #16
   13cc8:	d8f2      	bhi.n	13cb0 <memset+0x38>
   13cca:	f1a4 0210 	sub.w	r2, r4, #16
   13cce:	f022 020f 	bic.w	r2, r2, #15
   13cd2:	f004 040f 	and.w	r4, r4, #15
   13cd6:	3210      	adds	r2, #16
   13cd8:	2c03      	cmp	r4, #3
   13cda:	4413      	add	r3, r2
   13cdc:	d90d      	bls.n	13cfa <memset+0x82>
   13cde:	461e      	mov	r6, r3
   13ce0:	4622      	mov	r2, r4
   13ce2:	3a04      	subs	r2, #4
   13ce4:	2a03      	cmp	r2, #3
   13ce6:	f846 5b04 	str.w	r5, [r6], #4
   13cea:	d8fa      	bhi.n	13ce2 <memset+0x6a>
   13cec:	1f22      	subs	r2, r4, #4
   13cee:	f022 0203 	bic.w	r2, r2, #3
   13cf2:	3204      	adds	r2, #4
   13cf4:	4413      	add	r3, r2
   13cf6:	f004 0403 	and.w	r4, r4, #3
   13cfa:	b12c      	cbz	r4, 13d08 <memset+0x90>
   13cfc:	b2c9      	uxtb	r1, r1
   13cfe:	441c      	add	r4, r3
   13d00:	f803 1b01 	strb.w	r1, [r3], #1
   13d04:	429c      	cmp	r4, r3
   13d06:	d1fb      	bne.n	13d00 <memset+0x88>
   13d08:	bc70      	pop	{r4, r5, r6}
   13d0a:	4770      	bx	lr
   13d0c:	4614      	mov	r4, r2
   13d0e:	4603      	mov	r3, r0
   13d10:	e7c2      	b.n	13c98 <memset+0x20>
   13d12:	bf00      	nop
	...

00013d40 <strlen>:
   13d40:	f890 f000 	pld	[r0]
   13d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   13d48:	f020 0107 	bic.w	r1, r0, #7
   13d4c:	f06f 0c00 	mvn.w	ip, #0
   13d50:	f010 0407 	ands.w	r4, r0, #7
   13d54:	f891 f020 	pld	[r1, #32]
   13d58:	f040 8049 	bne.w	13dee <strlen+0xae>
   13d5c:	f04f 0400 	mov.w	r4, #0
   13d60:	f06f 0007 	mvn.w	r0, #7
   13d64:	e9d1 2300 	ldrd	r2, r3, [r1]
   13d68:	f891 f040 	pld	[r1, #64]	; 0x40
   13d6c:	f100 0008 	add.w	r0, r0, #8
   13d70:	fa82 f24c 	uadd8	r2, r2, ip
   13d74:	faa4 f28c 	sel	r2, r4, ip
   13d78:	fa83 f34c 	uadd8	r3, r3, ip
   13d7c:	faa2 f38c 	sel	r3, r2, ip
   13d80:	bb4b      	cbnz	r3, 13dd6 <strlen+0x96>
   13d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   13d86:	fa82 f24c 	uadd8	r2, r2, ip
   13d8a:	f100 0008 	add.w	r0, r0, #8
   13d8e:	faa4 f28c 	sel	r2, r4, ip
   13d92:	fa83 f34c 	uadd8	r3, r3, ip
   13d96:	faa2 f38c 	sel	r3, r2, ip
   13d9a:	b9e3      	cbnz	r3, 13dd6 <strlen+0x96>
   13d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   13da0:	fa82 f24c 	uadd8	r2, r2, ip
   13da4:	f100 0008 	add.w	r0, r0, #8
   13da8:	faa4 f28c 	sel	r2, r4, ip
   13dac:	fa83 f34c 	uadd8	r3, r3, ip
   13db0:	faa2 f38c 	sel	r3, r2, ip
   13db4:	b97b      	cbnz	r3, 13dd6 <strlen+0x96>
   13db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   13dba:	f101 0120 	add.w	r1, r1, #32
   13dbe:	fa82 f24c 	uadd8	r2, r2, ip
   13dc2:	f100 0008 	add.w	r0, r0, #8
   13dc6:	faa4 f28c 	sel	r2, r4, ip
   13dca:	fa83 f34c 	uadd8	r3, r3, ip
   13dce:	faa2 f38c 	sel	r3, r2, ip
   13dd2:	2b00      	cmp	r3, #0
   13dd4:	d0c6      	beq.n	13d64 <strlen+0x24>
   13dd6:	2a00      	cmp	r2, #0
   13dd8:	bf04      	itt	eq
   13dda:	3004      	addeq	r0, #4
   13ddc:	461a      	moveq	r2, r3
   13dde:	ba12      	rev	r2, r2
   13de0:	fab2 f282 	clz	r2, r2
   13de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   13de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   13dec:	4770      	bx	lr
   13dee:	e9d1 2300 	ldrd	r2, r3, [r1]
   13df2:	f004 0503 	and.w	r5, r4, #3
   13df6:	f1c4 0000 	rsb	r0, r4, #0
   13dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   13dfe:	f014 0f04 	tst.w	r4, #4
   13e02:	f891 f040 	pld	[r1, #64]	; 0x40
   13e06:	fa0c f505 	lsl.w	r5, ip, r5
   13e0a:	ea62 0205 	orn	r2, r2, r5
   13e0e:	bf1c      	itt	ne
   13e10:	ea63 0305 	ornne	r3, r3, r5
   13e14:	4662      	movne	r2, ip
   13e16:	f04f 0400 	mov.w	r4, #0
   13e1a:	e7a9      	b.n	13d70 <strlen+0x30>

00013e1c <__register_exitproc>:
   13e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13e20:	4d2c      	ldr	r5, [pc, #176]	; (13ed4 <__register_exitproc+0xb8>)
   13e22:	4606      	mov	r6, r0
   13e24:	6828      	ldr	r0, [r5, #0]
   13e26:	4698      	mov	r8, r3
   13e28:	460f      	mov	r7, r1
   13e2a:	4691      	mov	r9, r2
   13e2c:	f000 f882 	bl	13f34 <__retarget_lock_acquire_recursive>
   13e30:	4b29      	ldr	r3, [pc, #164]	; (13ed8 <__register_exitproc+0xbc>)
   13e32:	681c      	ldr	r4, [r3, #0]
   13e34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13e38:	2b00      	cmp	r3, #0
   13e3a:	d03e      	beq.n	13eba <__register_exitproc+0x9e>
   13e3c:	685a      	ldr	r2, [r3, #4]
   13e3e:	2a1f      	cmp	r2, #31
   13e40:	dc1c      	bgt.n	13e7c <__register_exitproc+0x60>
   13e42:	f102 0e01 	add.w	lr, r2, #1
   13e46:	b176      	cbz	r6, 13e66 <__register_exitproc+0x4a>
   13e48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   13e4c:	2401      	movs	r4, #1
   13e4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13e52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   13e56:	4094      	lsls	r4, r2
   13e58:	4320      	orrs	r0, r4
   13e5a:	2e02      	cmp	r6, #2
   13e5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   13e60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13e64:	d023      	beq.n	13eae <__register_exitproc+0x92>
   13e66:	3202      	adds	r2, #2
   13e68:	f8c3 e004 	str.w	lr, [r3, #4]
   13e6c:	6828      	ldr	r0, [r5, #0]
   13e6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   13e72:	f000 f861 	bl	13f38 <__retarget_lock_release_recursive>
   13e76:	2000      	movs	r0, #0
   13e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13e7c:	4b17      	ldr	r3, [pc, #92]	; (13edc <__register_exitproc+0xc0>)
   13e7e:	b30b      	cbz	r3, 13ec4 <__register_exitproc+0xa8>
   13e80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13e84:	f7fa ffb0 	bl	ede8 <malloc>
   13e88:	4603      	mov	r3, r0
   13e8a:	b1d8      	cbz	r0, 13ec4 <__register_exitproc+0xa8>
   13e8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   13e90:	6002      	str	r2, [r0, #0]
   13e92:	2100      	movs	r1, #0
   13e94:	6041      	str	r1, [r0, #4]
   13e96:	460a      	mov	r2, r1
   13e98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   13e9c:	f04f 0e01 	mov.w	lr, #1
   13ea0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   13ea4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13ea8:	2e00      	cmp	r6, #0
   13eaa:	d0dc      	beq.n	13e66 <__register_exitproc+0x4a>
   13eac:	e7cc      	b.n	13e48 <__register_exitproc+0x2c>
   13eae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   13eb2:	430c      	orrs	r4, r1
   13eb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13eb8:	e7d5      	b.n	13e66 <__register_exitproc+0x4a>
   13eba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   13ebe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   13ec2:	e7bb      	b.n	13e3c <__register_exitproc+0x20>
   13ec4:	6828      	ldr	r0, [r5, #0]
   13ec6:	f000 f837 	bl	13f38 <__retarget_lock_release_recursive>
   13eca:	f04f 30ff 	mov.w	r0, #4294967295
   13ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13ed2:	bf00      	nop
   13ed4:	20000638 	.word	0x20000638
   13ed8:	00014478 	.word	0x00014478
   13edc:	0000ede9 	.word	0x0000ede9

00013ee0 <register_fini>:
   13ee0:	4b02      	ldr	r3, [pc, #8]	; (13eec <register_fini+0xc>)
   13ee2:	b113      	cbz	r3, 13eea <register_fini+0xa>
   13ee4:	4802      	ldr	r0, [pc, #8]	; (13ef0 <register_fini+0x10>)
   13ee6:	f000 b805 	b.w	13ef4 <atexit>
   13eea:	4770      	bx	lr
   13eec:	00000000 	.word	0x00000000
   13ef0:	00013f01 	.word	0x00013f01

00013ef4 <atexit>:
   13ef4:	2300      	movs	r3, #0
   13ef6:	4601      	mov	r1, r0
   13ef8:	461a      	mov	r2, r3
   13efa:	4618      	mov	r0, r3
   13efc:	f7ff bf8e 	b.w	13e1c <__register_exitproc>

00013f00 <__libc_fini_array>:
   13f00:	b538      	push	{r3, r4, r5, lr}
   13f02:	4c0a      	ldr	r4, [pc, #40]	; (13f2c <__libc_fini_array+0x2c>)
   13f04:	4d0a      	ldr	r5, [pc, #40]	; (13f30 <__libc_fini_array+0x30>)
   13f06:	1b64      	subs	r4, r4, r5
   13f08:	10a4      	asrs	r4, r4, #2
   13f0a:	d00a      	beq.n	13f22 <__libc_fini_array+0x22>
   13f0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   13f10:	3b01      	subs	r3, #1
   13f12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13f16:	3c01      	subs	r4, #1
   13f18:	f855 3904 	ldr.w	r3, [r5], #-4
   13f1c:	4798      	blx	r3
   13f1e:	2c00      	cmp	r4, #0
   13f20:	d1f9      	bne.n	13f16 <__libc_fini_array+0x16>
   13f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13f26:	f000 bad3 	b.w	144d0 <_fini>
   13f2a:	bf00      	nop
   13f2c:	000144e0 	.word	0x000144e0
   13f30:	000144dc 	.word	0x000144dc

00013f34 <__retarget_lock_acquire_recursive>:
   13f34:	4770      	bx	lr
   13f36:	bf00      	nop

00013f38 <__retarget_lock_release_recursive>:
   13f38:	4770      	bx	lr
   13f3a:	bf00      	nop

00013f3c <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   13f3c:	014c 0000 0000 0000 0000 0000               L...........

00013f48 <_ZTT16Maintenance_Tool>:
   13f48:	3f5c 0001 3f48 0001                         \?..H?..

00013f50 <_ZTV16Maintenance_Tool>:
   13f50:	014c 0000 0000 0000 0000 0000 2e2e 682f     L............./h
   13f60:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   13f70:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
   13f80:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
   13f90:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13fa0:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
   13fb0:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   13fc0:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
   13fd0:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
   13fe0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
   13ff0:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   14000:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   14010:	6c61 705f 6d77 632e 0000 0000 2e2e 682f     al_pwm.c....../h
   14020:	6c61 732f 6372 682f 6c61 715f 7073 5f69     al/src/hal_qspi_
   14030:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   14040:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
   14050:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   14060:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
   14070:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
   14080:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

0001408c <_map>:
   1408c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   1409c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   140ac:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   140bc:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   140cc:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   140dc:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

000140ec <user_mux_confs>:
   140ec:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00014130 <channel_confs>:
   14130:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00014170 <interrupt_cfg>:
	...
   141f0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   14200:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   14210:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   14220:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   14230:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   14240:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   14250:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0001425c <sercomspi_regs>:
   1425c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   1426c:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   1427c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1428c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1429c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   142ac:	1400 4300 1800 4300                         ...C...C

000142b4 <_usb_ep_cfgs>:
   142b4:	0e9c 2000 0000 0000 0040 0000 0edc 2000     ... ....@...... 
   142c4:	0f1c 2000 0040 0040 0f5c 2000 0f9c 2000     ... @.@.\.. ... 
   142d4:	0040 0040 0fdc 2000 101c 2000 0040 0040     @.@.... ... @.@.
   142e4:	105c 2000 109c 2000 0040 0040 0804 0000     \.. ... @.@.....
   142f4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   14304:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   14314:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   14324:	625f 7361 2e65 0068                         _base.h.

0001432c <n25q256a_interface>:
   1432c:	c1ad 0000 c251 0000 c361 0000 c519 0000     ....Q...a.......
   1433c:	c5a9 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   1434c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00014358 <_ZTV9CDC_Class>:
	...
   14360:	e6dd 0000 e7bd 0000 e331 0000 e6a5 0000     ........1.......
   14370:	e855 0000 e669 0000 e54d 0000 e59d 0000     U...i...M.......
   14380:	e6c5 0000 e725 0000                         ....%...

00014388 <_ZTV6Stream>:
	...
   14390:	edfd 0000 e9fd 0000 e331 0000 e345 0000     ........1...E...
   143a0:	edfd 0000 edfd 0000 edfd 0000 7830 2e25     ............0x%.
   143b0:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   143c0:	766f 0066                                   ovf.

000143c4 <_ZTV5Print>:
	...
   143cc:	edfd 0000 e9fd 0000 e331 0000 e345 0000     ........1...E...
   143dc:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   143ec:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   143fc:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   1440c:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   1441c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   1442c:	6c61 695f 2e6f 0063 2e2e 2e2f 2f2e 2e2e     al_io.c.../../..
   1443c:	412f 554c 445f 6972 6576 2f72 4c41 5f55     /ALU_Driver/ALU_
   1444c:	7244 7669 7265 682f 6c70 702f 726f 2f74     Driver/hpl/port/
   1445c:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.

0001446c <defaultParameters>:
   1446c:	4020 0000                                    @..

00014470 <defaultPreferences>:
   14470:	00fa 0000 0032 0000                         ....2...

00014478 <_global_impure_ptr>:
   14478:	0210 2000                                   ... 

0001447c <_init>:
   1447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1447e:	bf00      	nop
   14480:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14482:	bc08      	pop	{r3}
   14484:	469e      	mov	lr, r3
   14486:	4770      	bx	lr

00014488 <__init_array_start>:
   14488:	00013ee1 	.word	0x00013ee1

0001448c <__frame_dummy_init_array_entry>:
   1448c:	00000289 0000054d 000009d9 00000db1     ....M...........
   1449c:	0000e2f9 0000e9ad 0000edd5 0000f089     ................
   144ac:	0000f38d 00010a4d 000110f5 0001130d     ....M...........
   144bc:	000114c5 00011851 00012859 00012b89     ....Q...Y(...+..
   144cc:	000135b1                                .5..

000144d0 <_fini>:
   144d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144d2:	bf00      	nop
   144d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   144d6:	bc08      	pop	{r3}
   144d8:	469e      	mov	lr, r3
   144da:	4770      	bx	lr

000144dc <__fini_array_start>:
   144dc:	00000265 	.word	0x00000265
