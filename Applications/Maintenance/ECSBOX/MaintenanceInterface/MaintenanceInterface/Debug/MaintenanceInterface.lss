
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001bbd8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001bbd8  0001bbd8  0002bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a44  20000000  0001bbe0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a44  2**0
                  CONTENTS
  5 .bss          0000d720  20000a48  0001c628  00030a44  2**3
                  ALLOC
  6 .stack        00010000  2000e168  00029d48  00030a44  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f31a6  00000000  00000000  00030acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014480  00000000  00000000  00123c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002737e  00000000  00000000  001380f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004578  00000000  00000000  0015f46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000040a8  00000000  00000000  001639e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00069a28  00000000  00000000  00167a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000692be  00000000  00000000  001d14b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0015073e  00000000  00000000  0023a775  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000116c0  00000000  00000000  0038aeb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 e1 01 20 a9 0b 00 00 a5 0b 00 00 a5 0b 00 00     h.. ............
      10:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 00 00 00 00     ................
	...
      2c:	a5 0b 00 00 a5 0b 00 00 00 00 00 00 a5 0b 00 00     ................
      3c:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      4c:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      5c:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      6c:	61 78 00 00 09 65 00 00 19 65 00 00 a5 0b 00 00     ax...e...e......
      7c:	29 65 00 00 39 65 00 00 49 65 00 00 59 65 00 00     )e..9e..Ie..Ye..
      8c:	69 65 00 00 79 65 00 00 89 65 00 00 a5 0b 00 00     ie..ye...e......
      9c:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      ac:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      bc:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      cc:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
      dc:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 00 00 00 00     ................
	...
      f4:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     104:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     114:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     124:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     134:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     144:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     154:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     164:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     174:	a5 0b 00 00 a5 0b 00 00 51 59 00 00 cd c8 00 00     ........QY......
     184:	dd c8 00 00 ed c8 00 00 fd c8 00 00 a5 0b 00 00     ................
     194:	0d 93 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     1a4:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 29 93 00 00     ............)...
     1b4:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     1c4:	45 93 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     E...............
     1d4:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     1e4:	a5 0b 00 00 a5 0b 00 00 c9 9f 00 00 a5 0b 00 00     ................
     1f4:	e5 9f 00 00 a5 0b 00 00 01 a0 00 00 1d a0 00 00     ................
     204:	39 a0 00 00 55 a0 00 00 a5 0b 00 00 a5 0b 00 00     9...U...........
     214:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     224:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     234:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     244:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................
     254:	a5 0b 00 00 a5 0b 00 00 a5 0b 00 00 a5 0b 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a48 	.word	0x20000a48
     280:	00000000 	.word	0x00000000
     284:	0001bbe0 	.word	0x0001bbe0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001bbe0 	.word	0x0001bbe0
     2c4:	20000a4c 	.word	0x20000a4c
     2c8:	0001bbe0 	.word	0x0001bbe0
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "Event_Logger_Class.h"

static uint8_t  local_memory_block[QSPI_ERBLK];

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
     2f4:	f880 6084 	strb.w	r6, [r0, #132]	; 0x84
     2f8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
     2fc:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
     300:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
     304:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
{
	
} //Commands_Handler
     308:	bc70      	pop	{r4, r5, r6}
     30a:	4770      	bx	lr

0000030c <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     30c:	680b      	ldr	r3, [r1, #0]
     30e:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     310:	4770      	bx	lr
	...

00000314 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     314:	60c1      	str	r1, [r0, #12]
	memory_block=local_memory_block;
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <_ZN16Commands_Handler18InitCommandHandlerEPh+0xc>)
     318:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
     31c:	4770      	bx	lr
     31e:	bf00      	nop
     320:	20000a64 	.word	0x20000a64

00000324 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     324:	b510      	push	{r4, lr}
     326:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     328:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     32c:	bf14      	ite	ne
     32e:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     330:	2100      	moveq	r1, #0
     332:	4b03      	ldr	r3, [pc, #12]	; (340 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     334:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     336:	4b03      	ldr	r3, [pc, #12]	; (344 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     338:	4798      	blx	r3
	}
	return data;
}
     33a:	4620      	mov	r0, r4
     33c:	bd10      	pop	{r4, pc}
     33e:	bf00      	nop
     340:	2000373c 	.word	0x2000373c
     344:	0001150d 	.word	0x0001150d

00000348 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     348:	b538      	push	{r3, r4, r5, lr}
     34a:	4605      	mov	r5, r0
     34c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     34e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     352:	bf14      	ite	ne
     354:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     356:	2100      	moveq	r1, #0
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     35a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     35c:	4b04      	ldr	r3, [pc, #16]	; (370 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     35e:	4798      	blx	r3
	return SetEnableFan1(data);
     360:	4621      	mov	r1, r4
     362:	4628      	mov	r0, r5
     364:	4b03      	ldr	r3, [pc, #12]	; (374 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     366:	4798      	blx	r3
}
     368:	bd38      	pop	{r3, r4, r5, pc}
     36a:	bf00      	nop
     36c:	2000373c 	.word	0x2000373c
     370:	0001150d 	.word	0x0001150d
     374:	00000325 	.word	0x00000325

00000378 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     378:	b538      	push	{r3, r4, r5, lr}
     37a:	4605      	mov	r5, r0
     37c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     37e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     382:	bf14      	ite	ne
     384:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     386:	2100      	moveq	r1, #0
     388:	4b04      	ldr	r3, [pc, #16]	; (39c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     38a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     38c:	4b04      	ldr	r3, [pc, #16]	; (3a0 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     38e:	4798      	blx	r3
	return SetEnableFan2(data);
     390:	4621      	mov	r1, r4
     392:	4628      	mov	r0, r5
     394:	4b03      	ldr	r3, [pc, #12]	; (3a4 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     396:	4798      	blx	r3
}
     398:	bd38      	pop	{r3, r4, r5, pc}
     39a:	bf00      	nop
     39c:	2000373c 	.word	0x2000373c
     3a0:	00011151 	.word	0x00011151
     3a4:	00000349 	.word	0x00000349

000003a8 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     3a8:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3aa:	68c3      	ldr	r3, [r0, #12]
     3ac:	6819      	ldr	r1, [r3, #0]
     3ae:	6041      	str	r1, [r0, #4]
     3b0:	8899      	ldrh	r1, [r3, #4]
     3b2:	799b      	ldrb	r3, [r3, #6]
     3b4:	8101      	strh	r1, [r0, #8]
     3b6:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     3b8:	7a43      	ldrb	r3, [r0, #9]
     3ba:	2b4b      	cmp	r3, #75	; 0x4b
     3bc:	bf0c      	ite	eq
     3be:	2401      	moveq	r4, #1
     3c0:	2400      	movne	r4, #0
	if (result){
     3c2:	d001      	beq.n	3c8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3c4:	4620      	mov	r0, r4
     3c6:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3c8:	7a81      	ldrb	r1, [r0, #10]
     3ca:	4b01      	ldr	r3, [pc, #4]	; (3d0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3cc:	4798      	blx	r3
     3ce:	e7f9      	b.n	3c4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3d0:	00000379 	.word	0x00000379

000003d4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3d6:	68c3      	ldr	r3, [r0, #12]
     3d8:	f100 0210 	add.w	r2, r0, #16
     3dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3e0:	681f      	ldr	r7, [r3, #0]
     3e2:	685e      	ldr	r6, [r3, #4]
     3e4:	689d      	ldr	r5, [r3, #8]
     3e6:	68dc      	ldr	r4, [r3, #12]
     3e8:	6017      	str	r7, [r2, #0]
     3ea:	6056      	str	r6, [r2, #4]
     3ec:	6095      	str	r5, [r2, #8]
     3ee:	60d4      	str	r4, [r2, #12]
     3f0:	3310      	adds	r3, #16
     3f2:	3210      	adds	r2, #16
     3f4:	428b      	cmp	r3, r1
     3f6:	d1f3      	bne.n	3e0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     3f8:	7d43      	ldrb	r3, [r0, #21]
     3fa:	2b4c      	cmp	r3, #76	; 0x4c
     3fc:	bf0c      	ite	eq
     3fe:	2501      	moveq	r5, #1
     400:	2500      	movne	r5, #0
	if (result){
     402:	d112      	bne.n	42a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     404:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     406:	7d81      	ldrb	r1, [r0, #22]
     408:	b119      	cbz	r1, 412 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     40a:	4b09      	ldr	r3, [pc, #36]	; (430 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     40c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     40e:	4b09      	ldr	r3, [pc, #36]	; (434 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     410:	4798      	blx	r3
			
		}

		if (data[1]>0){
     412:	7de1      	ldrb	r1, [r4, #23]
     414:	b119      	cbz	r1, 41e <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     416:	4b06      	ldr	r3, [pc, #24]	; (430 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     418:	6e18      	ldr	r0, [r3, #96]	; 0x60
     41a:	4b06      	ldr	r3, [pc, #24]	; (434 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     41c:	4798      	blx	r3
		}
		if (data[2]>0){
     41e:	7e21      	ldrb	r1, [r4, #24]
     420:	b119      	cbz	r1, 42a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     422:	4b03      	ldr	r3, [pc, #12]	; (430 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     424:	6e58      	ldr	r0, [r3, #100]	; 0x64
     426:	4b04      	ldr	r3, [pc, #16]	; (438 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     428:	4798      	blx	r3
		

	}
	
	return result;
}
     42a:	4628      	mov	r0, r5
     42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     42e:	bf00      	nop
     430:	2000373c 	.word	0x2000373c
     434:	00011531 	.word	0x00011531
     438:	00011169 	.word	0x00011169

0000043c <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     440:	68c3      	ldr	r3, [r0, #12]
     442:	f100 0210 	add.w	r2, r0, #16
     446:	f103 0140 	add.w	r1, r3, #64	; 0x40
     44a:	681f      	ldr	r7, [r3, #0]
     44c:	685e      	ldr	r6, [r3, #4]
     44e:	689d      	ldr	r5, [r3, #8]
     450:	68dc      	ldr	r4, [r3, #12]
     452:	6017      	str	r7, [r2, #0]
     454:	6056      	str	r6, [r2, #4]
     456:	6095      	str	r5, [r2, #8]
     458:	60d4      	str	r4, [r2, #12]
     45a:	3310      	adds	r3, #16
     45c:	3210      	adds	r2, #16
     45e:	428b      	cmp	r3, r1
     460:	d1f3      	bne.n	44a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xe>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     462:	7d43      	ldrb	r3, [r0, #21]
     464:	2b4f      	cmp	r3, #79	; 0x4f
     466:	bf0c      	ite	eq
     468:	2701      	moveq	r7, #1
     46a:	2700      	movne	r7, #0
	if (result){
     46c:	d002      	beq.n	474 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x38>
	}else{

	}
	
	return result;
}
     46e:	4638      	mov	r0, r7
     470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     474:	4e0c      	ldr	r6, [pc, #48]	; (4a8 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x6c>)
     476:	f100 0516 	add.w	r5, r0, #22
     47a:	f100 0418 	add.w	r4, r0, #24
					flapper.valve[i]->StopControlling();
     47e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4ac <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x70>
					flapper.valve[i]->StartControlling() ;
     482:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4b0 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x74>
     486:	e003      	b.n	490 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x54>
     488:	47c0      	blx	r8
     48a:	3501      	adds	r5, #1
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     48c:	42a5      	cmp	r5, r4
     48e:	d0ee      	beq.n	46e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x32>
			if (flapper.valve[i]->isOK)
     490:	f856 0b04 	ldr.w	r0, [r6], #4
     494:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     498:	2b00      	cmp	r3, #0
     49a:	d0f6      	beq.n	48a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
				if ((data&(0x01))>0)
     49c:	782b      	ldrb	r3, [r5, #0]
     49e:	f013 0f01 	tst.w	r3, #1
     4a2:	d1f1      	bne.n	488 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4c>
					flapper.valve[i]->StopControlling();
     4a4:	47c8      	blx	r9
     4a6:	e7f0      	b.n	48a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
     4a8:	200053d8 	.word	0x200053d8
     4ac:	00012d59 	.word	0x00012d59
     4b0:	00012f3d 	.word	0x00012f3d

000004b4 <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     4b8:	68c3      	ldr	r3, [r0, #12]
     4ba:	f100 0210 	add.w	r2, r0, #16
     4be:	f103 0140 	add.w	r1, r3, #64	; 0x40
     4c2:	681f      	ldr	r7, [r3, #0]
     4c4:	685e      	ldr	r6, [r3, #4]
     4c6:	689d      	ldr	r5, [r3, #8]
     4c8:	68dc      	ldr	r4, [r3, #12]
     4ca:	6017      	str	r7, [r2, #0]
     4cc:	6056      	str	r6, [r2, #4]
     4ce:	6095      	str	r5, [r2, #8]
     4d0:	60d4      	str	r4, [r2, #12]
     4d2:	3310      	adds	r3, #16
     4d4:	3210      	adds	r2, #16
     4d6:	428b      	cmp	r3, r1
     4d8:	d1f3      	bne.n	4c2 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xe>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4da:	7d43      	ldrb	r3, [r0, #21]
     4dc:	2b50      	cmp	r3, #80	; 0x50
     4de:	bf0c      	ite	eq
     4e0:	2701      	moveq	r7, #1
     4e2:	2700      	movne	r7, #0
	if (result){
     4e4:	d002      	beq.n	4ec <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x38>
	}else{

	}
	
	return result;
}
     4e6:	4638      	mov	r0, r7
     4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4ec:	4d0f      	ldr	r5, [pc, #60]	; (52c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4ee:	f100 0616 	add.w	r6, r0, #22
     4f2:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->doPeriodicTask=false;
     4f6:	f04f 0900 	mov.w	r9, #0
					flapper.valve[i]->StartControlling(data);
     4fa:	f8df a034 	ldr.w	sl, [pc, #52]	; 530 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x7c>
     4fe:	e007      	b.n	510 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x5c>
				flapper.valve[i]->doPeriodicTask=false;
     500:	f8d8 3000 	ldr.w	r3, [r8]
     504:	f883 9079 	strb.w	r9, [r3, #121]	; 0x79
     508:	3504      	adds	r5, #4
     50a:	3601      	adds	r6, #1
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     50c:	42a6      	cmp	r6, r4
     50e:	d0ea      	beq.n	4e6 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x32>
     510:	46a8      	mov	r8, r5
			if (flapper.valve[i]->isOK)
     512:	6828      	ldr	r0, [r5, #0]
     514:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     518:	2b00      	cmp	r3, #0
     51a:	d0f5      	beq.n	508 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
				if (flapper.valve[i]->controllerEnabled)
     51c:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
     520:	2b00      	cmp	r3, #0
     522:	d0ed      	beq.n	500 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
					flapper.valve[i]->StartControlling(data);
     524:	7831      	ldrb	r1, [r6, #0]
     526:	47d0      	blx	sl
     528:	e7ea      	b.n	500 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
     52a:	bf00      	nop
     52c:	200053d8 	.word	0x200053d8
     530:	00012d9d 	.word	0x00012d9d

00000534 <_ZN16Commands_Handler22CommandWriteParametersEv>:


	
	return result;
}
bool Commands_Handler::CommandWriteParameters(void){
     534:	b510      	push	{r4, lr}

	uint32_t	w,r;
	int n=sizeof(HVACMessageHeader);
	HVACMessageHeader hm;
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     536:	68c3      	ldr	r3, [r0, #12]
     538:	6819      	ldr	r1, [r3, #0]
     53a:	6041      	str	r1, [r0, #4]
     53c:	889c      	ldrh	r4, [r3, #4]
     53e:	7999      	ldrb	r1, [r3, #6]
     540:	8104      	strh	r4, [r0, #8]
     542:	7281      	strb	r1, [r0, #10]
	
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
	if (result){
     544:	7a42      	ldrb	r2, [r0, #9]
     546:	2a47      	cmp	r2, #71	; 0x47
     548:	d001      	beq.n	54e <_ZN16Commands_Handler22CommandWriteParametersEv+0x1a>
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
     54a:	2000      	movs	r0, #0
		}else{

	}
	
	return result;
}
     54c:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&usbMessageBuffer[n],sizeof(UserParameters));
     54e:	88db      	ldrh	r3, [r3, #6]
     550:	4601      	mov	r1, r0
     552:	f821 3f63 	strh.w	r3, [r1, #99]!
		r=memory.SaveParameters(parameters);
     556:	4803      	ldr	r0, [pc, #12]	; (564 <_ZN16Commands_Handler22CommandWriteParametersEv+0x30>)
     558:	4b03      	ldr	r3, [pc, #12]	; (568 <_ZN16Commands_Handler22CommandWriteParametersEv+0x34>)
     55a:	4798      	blx	r3
		result=(bool)(r==0);
     55c:	fab0 f080 	clz	r0, r0
     560:	0940      	lsrs	r0, r0, #5
     562:	bd10      	pop	{r4, pc}
     564:	20006a80 	.word	0x20006a80
     568:	000140e9 	.word	0x000140e9

0000056c <_ZN16Commands_Handler17CommandSetHeatersEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetHeaters(void){
     56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     570:	68c3      	ldr	r3, [r0, #12]
     572:	6819      	ldr	r1, [r3, #0]
     574:	6041      	str	r1, [r0, #4]
     576:	8899      	ldrh	r1, [r3, #4]
     578:	799b      	ldrb	r3, [r3, #6]
     57a:	8101      	strh	r1, [r0, #8]
     57c:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetHeaters);
     57e:	7a43      	ldrb	r3, [r0, #9]
     580:	2b49      	cmp	r3, #73	; 0x49
     582:	bf0c      	ite	eq
     584:	f04f 0a01 	moveq.w	sl, #1
     588:	f04f 0a00 	movne.w	sl, #0
	if (result){
     58c:	d002      	beq.n	594 <_ZN16Commands_Handler17CommandSetHeatersEv+0x28>
			
		}
	}
	
	return result;
}
     58e:	4650      	mov	r0, sl
     590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lastEnableHeaters=enableHeaters;
     594:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
     598:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
		enableHeaters=singleTaskMessage.description;
     59c:	7a83      	ldrb	r3, [r0, #10]
     59e:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
		if (enableHeaters!=lastEnableHeaters)
     5a2:	429a      	cmp	r2, r3
     5a4:	d0f3      	beq.n	58e <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5a6:	4605      	mov	r5, r0
     5a8:	2600      	movs	r6, #0
					heaters.module[j]->SetRelay(i,powerOn);
     5aa:	f8df 9030 	ldr.w	r9, [pc, #48]	; 5dc <_ZN16Commands_Handler17CommandSetHeatersEv+0x70>
     5ae:	f8df 8030 	ldr.w	r8, [pc, #48]	; 5e0 <_ZN16Commands_Handler17CommandSetHeatersEv+0x74>
     5b2:	2400      	movs	r4, #0
     5b4:	eb06 0709 	add.w	r7, r6, r9
					powerOn=enableHeaters&(0x01<<(i+4*j));
     5b8:	f895 2067 	ldrb.w	r2, [r5, #103]	; 0x67
     5bc:	1933      	adds	r3, r6, r4
     5be:	411a      	asrs	r2, r3
     5c0:	f002 0201 	and.w	r2, r2, #1
     5c4:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
					heaters.module[j]->SetRelay(i,powerOn);
     5c8:	b2e1      	uxtb	r1, r4
     5ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
     5cc:	47c0      	blx	r8
     5ce:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     5d0:	2c04      	cmp	r4, #4
     5d2:	d1f1      	bne.n	5b8 <_ZN16Commands_Handler17CommandSetHeatersEv+0x4c>
     5d4:	3604      	adds	r6, #4
			for (uint8_t j = 0; j < 2; j++)
     5d6:	2e08      	cmp	r6, #8
     5d8:	d1eb      	bne.n	5b2 <_ZN16Commands_Handler17CommandSetHeatersEv+0x46>
     5da:	e7d8      	b.n	58e <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5dc:	20002e50 	.word	0x20002e50
     5e0:	00013da1 	.word	0x00013da1

000005e4 <_ZN16Commands_Handler18CommandSetScavengeEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetScavenge(void){
     5e4:	b510      	push	{r4, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     5e6:	68c3      	ldr	r3, [r0, #12]
     5e8:	6819      	ldr	r1, [r3, #0]
     5ea:	6041      	str	r1, [r0, #4]
     5ec:	8899      	ldrh	r1, [r3, #4]
     5ee:	799b      	ldrb	r3, [r3, #6]
     5f0:	8101      	strh	r1, [r0, #8]
     5f2:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetScavenge);
     5f4:	7a43      	ldrb	r3, [r0, #9]
     5f6:	2b53      	cmp	r3, #83	; 0x53
     5f8:	bf0c      	ite	eq
     5fa:	2401      	moveq	r4, #1
     5fc:	2400      	movne	r4, #0
	if (result){
     5fe:	d001      	beq.n	604 <_ZN16Commands_Handler18CommandSetScavengeEv+0x20>
		scavenge.SetEnable(powerOn);
	
	}
	
	return result;
}
     600:	4620      	mov	r0, r4
     602:	bd10      	pop	{r4, pc}
		data_byte=singleTaskMessage.description;
     604:	7a81      	ldrb	r1, [r0, #10]
     606:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
		powerOn=(data_byte&(0x02))>0;
     60a:	f3c1 0140 	ubfx	r1, r1, #1, #1
     60e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
		scavenge.SetEnable(powerOn);
     612:	4802      	ldr	r0, [pc, #8]	; (61c <_ZN16Commands_Handler18CommandSetScavengeEv+0x38>)
     614:	4b02      	ldr	r3, [pc, #8]	; (620 <_ZN16Commands_Handler18CommandSetScavengeEv+0x3c>)
     616:	4798      	blx	r3
     618:	e7f2      	b.n	600 <_ZN16Commands_Handler18CommandSetScavengeEv+0x1c>
     61a:	bf00      	nop
     61c:	2000cdd0 	.word	0x2000cdd0
     620:	000142e1 	.word	0x000142e1

00000624 <_ZN16Commands_Handler20CommandSetCompressorEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetCompressor(void){
     624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	memcpy(&message64,usbMessageBuffer,64);
     626:	68c3      	ldr	r3, [r0, #12]
     628:	f100 0210 	add.w	r2, r0, #16
     62c:	f103 0140 	add.w	r1, r3, #64	; 0x40
     630:	681f      	ldr	r7, [r3, #0]
     632:	685e      	ldr	r6, [r3, #4]
     634:	689d      	ldr	r5, [r3, #8]
     636:	68dc      	ldr	r4, [r3, #12]
     638:	6017      	str	r7, [r2, #0]
     63a:	6056      	str	r6, [r2, #4]
     63c:	6095      	str	r5, [r2, #8]
     63e:	60d4      	str	r4, [r2, #12]
     640:	3310      	adds	r3, #16
     642:	3210      	adds	r2, #16
     644:	428b      	cmp	r3, r1
     646:	d1f3      	bne.n	630 <_ZN16Commands_Handler20CommandSetCompressorEv+0xc>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandSetCompressor);
     648:	7d43      	ldrb	r3, [r0, #21]
     64a:	2b55      	cmp	r3, #85	; 0x55
     64c:	bf0c      	ite	eq
     64e:	2501      	moveq	r5, #1
     650:	2500      	movne	r5, #0
	if (result){
     652:	d001      	beq.n	658 <_ZN16Commands_Handler20CommandSetCompressorEv+0x34>
	
		
	}
	
	return result;
     654:	4628      	mov	r0, r5
     656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     658:	4604      	mov	r4, r0
		data_byte=message64.content[0] ;
     65a:	7d82      	ldrb	r2, [r0, #22]
     65c:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
		compressor_speed=message64.content[1]*256+message64.content[2];
     660:	7dc1      	ldrb	r1, [r0, #23]
     662:	7e03      	ldrb	r3, [r0, #24]
     664:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     668:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		if ((data_byte&0x01)>0)
     66c:	f012 0f01 	tst.w	r2, #1
     670:	d014      	beq.n	69c <_ZN16Commands_Handler20CommandSetCompressorEv+0x78>
			if (ccu.IsEnabled())
     672:	4813      	ldr	r0, [pc, #76]	; (6c0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     674:	4b13      	ldr	r3, [pc, #76]	; (6c4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     676:	4798      	blx	r3
     678:	b158      	cbz	r0, 692 <_ZN16Commands_Handler20CommandSetCompressorEv+0x6e>
				if ( compressor_speed>0)
     67a:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
     67e:	b119      	cbz	r1, 688 <_ZN16Commands_Handler20CommandSetCompressorEv+0x64>
					ccu.Set_Motor_Speed(compressor_speed);
     680:	4811      	ldr	r0, [pc, #68]	; (6c8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     682:	4b12      	ldr	r3, [pc, #72]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     684:	4798      	blx	r3
     686:	e7e5      	b.n	654 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.SetEnable(false);
     688:	2100      	movs	r1, #0
     68a:	480d      	ldr	r0, [pc, #52]	; (6c0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     68c:	4b10      	ldr	r3, [pc, #64]	; (6d0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     68e:	4798      	blx	r3
     690:	e7e0      	b.n	654 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(true);
     692:	2101      	movs	r1, #1
     694:	480a      	ldr	r0, [pc, #40]	; (6c0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     696:	4b0e      	ldr	r3, [pc, #56]	; (6d0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     698:	4798      	blx	r3
     69a:	e7db      	b.n	654 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
			if (ccu.IsEnabled())
     69c:	4808      	ldr	r0, [pc, #32]	; (6c0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     69e:	4b09      	ldr	r3, [pc, #36]	; (6c4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     6a0:	4798      	blx	r3
     6a2:	b938      	cbnz	r0, 6b4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x90>
				if ( compressor_speed>0)
     6a4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
     6a8:	2900      	cmp	r1, #0
     6aa:	d0d3      	beq.n	654 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.Set_Motor_Speed(compressor_speed);
     6ac:	4806      	ldr	r0, [pc, #24]	; (6c8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     6ae:	4b07      	ldr	r3, [pc, #28]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     6b0:	4798      	blx	r3
     6b2:	e7cf      	b.n	654 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(false);
     6b4:	2100      	movs	r1, #0
     6b6:	4802      	ldr	r0, [pc, #8]	; (6c0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6b8:	4b05      	ldr	r3, [pc, #20]	; (6d0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6ba:	4798      	blx	r3
     6bc:	e7ca      	b.n	654 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
     6be:	bf00      	nop
     6c0:	20002a74 	.word	0x20002a74
     6c4:	0000f329 	.word	0x0000f329
     6c8:	200028d8 	.word	0x200028d8
     6cc:	0000f741 	.word	0x0000f741
     6d0:	0000f2f5 	.word	0x0000f2f5

000006d4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:
     6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     6d8:	4c2b      	ldr	r4, [pc, #172]	; (788 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb4>)
     6da:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
     6de:	492b      	ldr	r1, [pc, #172]	; (78c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>)
     6e0:	4628      	mov	r0, r5
     6e2:	4b2b      	ldr	r3, [pc, #172]	; (790 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xbc>)
     6e4:	4798      	blx	r3
     6e6:	4e2b      	ldr	r6, [pc, #172]	; (794 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc0>)
     6e8:	4632      	mov	r2, r6
     6ea:	492b      	ldr	r1, [pc, #172]	; (798 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc4>)
     6ec:	4628      	mov	r0, r5
     6ee:	4d2b      	ldr	r5, [pc, #172]	; (79c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc8>)
     6f0:	47a8      	blx	r5
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     6f2:	f1a4 09e0 	sub.w	r9, r4, #224	; 0xe0
     6f6:	492a      	ldr	r1, [pc, #168]	; (7a0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xcc>)
     6f8:	4648      	mov	r0, r9
     6fa:	4f2a      	ldr	r7, [pc, #168]	; (7a4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd0>)
     6fc:	47b8      	blx	r7
     6fe:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 7c4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xf0>
     702:	4632      	mov	r2, r6
     704:	4641      	mov	r1, r8
     706:	4648      	mov	r0, r9
     708:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     70a:	f1a4 09c0 	sub.w	r9, r4, #192	; 0xc0
     70e:	4926      	ldr	r1, [pc, #152]	; (7a8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd4>)
     710:	4648      	mov	r0, r9
     712:	47b8      	blx	r7
     714:	4632      	mov	r2, r6
     716:	4641      	mov	r1, r8
     718:	4648      	mov	r0, r9
     71a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     71c:	f1a4 09a0 	sub.w	r9, r4, #160	; 0xa0
     720:	4922      	ldr	r1, [pc, #136]	; (7ac <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd8>)
     722:	4648      	mov	r0, r9
     724:	47b8      	blx	r7
     726:	4632      	mov	r2, r6
     728:	4641      	mov	r1, r8
     72a:	4648      	mov	r0, r9
     72c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     72e:	f1a4 0980 	sub.w	r9, r4, #128	; 0x80
     732:	491f      	ldr	r1, [pc, #124]	; (7b0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xdc>)
     734:	4648      	mov	r0, r9
     736:	47b8      	blx	r7
     738:	4632      	mov	r2, r6
     73a:	4641      	mov	r1, r8
     73c:	4648      	mov	r0, r9
     73e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     740:	f1a4 0960 	sub.w	r9, r4, #96	; 0x60
     744:	491b      	ldr	r1, [pc, #108]	; (7b4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe0>)
     746:	4648      	mov	r0, r9
     748:	47b8      	blx	r7
     74a:	4632      	mov	r2, r6
     74c:	4641      	mov	r1, r8
     74e:	4648      	mov	r0, r9
     750:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     752:	f1a4 0940 	sub.w	r9, r4, #64	; 0x40
     756:	4918      	ldr	r1, [pc, #96]	; (7b8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe4>)
     758:	4648      	mov	r0, r9
     75a:	47b8      	blx	r7
     75c:	4632      	mov	r2, r6
     75e:	4641      	mov	r1, r8
     760:	4648      	mov	r0, r9
     762:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     764:	f1a4 0920 	sub.w	r9, r4, #32
     768:	4914      	ldr	r1, [pc, #80]	; (7bc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe8>)
     76a:	4648      	mov	r0, r9
     76c:	47b8      	blx	r7
     76e:	4632      	mov	r2, r6
     770:	4641      	mov	r1, r8
     772:	4648      	mov	r0, r9
     774:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     776:	4912      	ldr	r1, [pc, #72]	; (7c0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xec>)
     778:	4620      	mov	r0, r4
     77a:	47b8      	blx	r7
     77c:	4632      	mov	r2, r6
     77e:	4641      	mov	r1, r8
     780:	4620      	mov	r0, r4
     782:	47a8      	blx	r5
     784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     788:	20001b5c 	.word	0x20001b5c
     78c:	2000dfe0 	.word	0x2000dfe0
     790:	0000fa29 	.word	0x0000fa29
     794:	20000000 	.word	0x20000000
     798:	0000fa45 	.word	0x0000fa45
     79c:	00019fb9 	.word	0x00019fb9
     7a0:	2000deb0 	.word	0x2000deb0
     7a4:	000100e1 	.word	0x000100e1
     7a8:	2000df44 	.word	0x2000df44
     7ac:	2000e068 	.word	0x2000e068
     7b0:	2000df64 	.word	0x2000df64
     7b4:	2000e028 	.word	0x2000e028
     7b8:	2000e048 	.word	0x2000e048
     7bc:	2000df20 	.word	0x2000df20
     7c0:	2000dfc0 	.word	0x2000dfc0
     7c4:	00010119 	.word	0x00010119

000007c8 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     7c8:	b530      	push	{r4, r5, lr}
     7ca:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     7cc:	68c3      	ldr	r3, [r0, #12]
     7ce:	6819      	ldr	r1, [r3, #0]
     7d0:	6041      	str	r1, [r0, #4]
     7d2:	8899      	ldrh	r1, [r3, #4]
     7d4:	799b      	ldrb	r3, [r3, #6]
     7d6:	8101      	strh	r1, [r0, #8]
     7d8:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     7da:	7a43      	ldrb	r3, [r0, #9]
     7dc:	2b51      	cmp	r3, #81	; 0x51
     7de:	bf0c      	ite	eq
     7e0:	2501      	moveq	r5, #1
     7e2:	2500      	movne	r5, #0
	if (result){
     7e4:	d002      	beq.n	7ec <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     7e6:	4628      	mov	r0, r5
     7e8:	b003      	add	sp, #12
     7ea:	bd30      	pop	{r4, r5, pc}
     7ec:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     7ee:	4669      	mov	r1, sp
     7f0:	4808      	ldr	r0, [pc, #32]	; (814 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     7f2:	4b09      	ldr	r3, [pc, #36]	; (818 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     7f4:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     7f6:	6823      	ldr	r3, [r4, #0]
     7f8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     7fc:	466a      	mov	r2, sp
     7fe:	68e1      	ldr	r1, [r4, #12]
     800:	4420      	add	r0, r4
     802:	4b06      	ldr	r3, [pc, #24]	; (81c <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     804:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     806:	2240      	movs	r2, #64	; 0x40
     808:	68e1      	ldr	r1, [r4, #12]
     80a:	4805      	ldr	r0, [pc, #20]	; (820 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     80e:	4798      	blx	r3
     810:	e7e9      	b.n	7e6 <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     812:	bf00      	nop
     814:	2000373c 	.word	0x2000373c
     818:	0001138d 	.word	0x0001138d
     81c:	00000ff9 	.word	0x00000ff9
     820:	20003444 	.word	0x20003444
     824:	00010b11 	.word	0x00010b11

00000828 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     82c:	b08c      	sub	sp, #48	; 0x30
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     82e:	68c3      	ldr	r3, [r0, #12]
     830:	6819      	ldr	r1, [r3, #0]
     832:	6041      	str	r1, [r0, #4]
     834:	8899      	ldrh	r1, [r3, #4]
     836:	799b      	ldrb	r3, [r3, #6]
     838:	8101      	strh	r1, [r0, #8]
     83a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     83c:	7a43      	ldrb	r3, [r0, #9]
     83e:	2b4e      	cmp	r3, #78	; 0x4e
     840:	bf0c      	ite	eq
     842:	f04f 0801 	moveq.w	r8, #1
     846:	f04f 0800 	movne.w	r8, #0
	if (result){
     84a:	d003      	beq.n	854 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
}
     84c:	4640      	mov	r0, r8
     84e:	b00c      	add	sp, #48	; 0x30
     850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     854:	4605      	mov	r5, r0
     856:	4f22      	ldr	r7, [pc, #136]	; (8e0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xb8>)
	if (result){
     858:	2600      	movs	r6, #0
				fvds[i]= flapper.valve[i]->dataStruct;
     85a:	f10d 0904 	add.w	r9, sp, #4
				flapper.valve[i]->UpdateFlapperValveData();
     85e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8f0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc8>
			if (flapper.valve[i]->isOK)
     862:	6838      	ldr	r0, [r7, #0]
     864:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     868:	bb23      	cbnz	r3, 8b4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x8c>
				fvds[i]= flapper.valve[i]->dataStruct;
     86a:	eb06 0e09 	add.w	lr, r6, r9
     86e:	f100 0484 	add.w	r4, r0, #132	; 0x84
     872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     874:	f846 0009 	str.w	r0, [r6, r9]
     878:	f8ce 1004 	str.w	r1, [lr, #4]
     87c:	f8ce 2008 	str.w	r2, [lr, #8]
     880:	f8ce 300c 	str.w	r3, [lr, #12]
     884:	6820      	ldr	r0, [r4, #0]
     886:	f8ce 0010 	str.w	r0, [lr, #16]
     88a:	7923      	ldrb	r3, [r4, #4]
     88c:	f88e 3014 	strb.w	r3, [lr, #20]
     890:	3704      	adds	r7, #4
     892:	3615      	adds	r6, #21
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     894:	2e2a      	cmp	r6, #42	; 0x2a
     896:	d1e4      	bne.n	862 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x3a>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     898:	682b      	ldr	r3, [r5, #0]
     89a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     89e:	aa01      	add	r2, sp, #4
     8a0:	68e9      	ldr	r1, [r5, #12]
     8a2:	4428      	add	r0, r5
     8a4:	4b0f      	ldr	r3, [pc, #60]	; (8e4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xbc>)
     8a6:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     8a8:	2240      	movs	r2, #64	; 0x40
     8aa:	68e9      	ldr	r1, [r5, #12]
     8ac:	480e      	ldr	r0, [pc, #56]	; (8e8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc0>)
     8ae:	4b0f      	ldr	r3, [pc, #60]	; (8ec <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc4>)
     8b0:	4798      	blx	r3
     8b2:	e7cb      	b.n	84c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
				flapper.valve[i]->UpdateFlapperValveData();
     8b4:	47d0      	blx	sl
				fvds[i]= flapper.valve[i]->dataStruct;
     8b6:	683c      	ldr	r4, [r7, #0]
     8b8:	eb06 0e09 	add.w	lr, r6, r9
     8bc:	3484      	adds	r4, #132	; 0x84
     8be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     8c0:	f846 0009 	str.w	r0, [r6, r9]
     8c4:	f8ce 1004 	str.w	r1, [lr, #4]
     8c8:	f8ce 2008 	str.w	r2, [lr, #8]
     8cc:	f8ce 300c 	str.w	r3, [lr, #12]
     8d0:	6820      	ldr	r0, [r4, #0]
     8d2:	f8ce 0010 	str.w	r0, [lr, #16]
     8d6:	7923      	ldrb	r3, [r4, #4]
     8d8:	f88e 3014 	strb.w	r3, [lr, #20]
     8dc:	e7d8      	b.n	890 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x68>
     8de:	bf00      	nop
     8e0:	200053d8 	.word	0x200053d8
     8e4:	00000ff9 	.word	0x00000ff9
     8e8:	20003444 	.word	0x20003444
     8ec:	00010b11 	.word	0x00010b11
     8f0:	00012f99 	.word	0x00012f99

000008f4 <_ZN16Commands_Handler21CommandReadParametersEv>:
bool Commands_Handler::CommandReadParameters(){
     8f4:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     8f6:	68c3      	ldr	r3, [r0, #12]
     8f8:	6819      	ldr	r1, [r3, #0]
     8fa:	6041      	str	r1, [r0, #4]
     8fc:	8899      	ldrh	r1, [r3, #4]
     8fe:	799b      	ldrb	r3, [r3, #6]
     900:	8101      	strh	r1, [r0, #8]
     902:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kGAINCommandReadParameters);
     904:	7a43      	ldrb	r3, [r0, #9]
     906:	2b48      	cmp	r3, #72	; 0x48
     908:	bf0c      	ite	eq
     90a:	2501      	moveq	r5, #1
     90c:	2500      	movne	r5, #0
	if (result){
     90e:	d001      	beq.n	914 <_ZN16Commands_Handler21CommandReadParametersEv+0x20>
}
     910:	4628      	mov	r0, r5
     912:	bd38      	pop	{r3, r4, r5, pc}
     914:	4604      	mov	r4, r0
		memory.ReadParameters(parameters);
     916:	f100 0163 	add.w	r1, r0, #99	; 0x63
     91a:	4811      	ldr	r0, [pc, #68]	; (960 <_ZN16Commands_Handler21CommandReadParametersEv+0x6c>)
     91c:	4b11      	ldr	r3, [pc, #68]	; (964 <_ZN16Commands_Handler21CommandReadParametersEv+0x70>)
     91e:	4798      	blx	r3
		memcpy(usbMessageBuffer,(void*)&hm,n);
     920:	68e3      	ldr	r3, [r4, #12]
     922:	4a11      	ldr	r2, [pc, #68]	; (968 <_ZN16Commands_Handler21CommandReadParametersEv+0x74>)
     924:	601a      	str	r2, [r3, #0]
     926:	2200      	movs	r2, #0
     928:	711a      	strb	r2, [r3, #4]
     92a:	715a      	strb	r2, [r3, #5]
		memcpy((uint8_t*)&usbMessageBuffer[n],(void*)&parameters,sizeof(UserParameters));
     92c:	68e3      	ldr	r3, [r4, #12]
     92e:	f8b4 2063 	ldrh.w	r2, [r4, #99]	; 0x63
     932:	80da      	strh	r2, [r3, #6]
		is_stand_alone=flapper.IsStandAlone();
     934:	480d      	ldr	r0, [pc, #52]	; (96c <_ZN16Commands_Handler21CommandReadParametersEv+0x78>)
     936:	4b0e      	ldr	r3, [pc, #56]	; (970 <_ZN16Commands_Handler21CommandReadParametersEv+0x7c>)
     938:	4798      	blx	r3
     93a:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
		if (is_stand_alone)
     93e:	b148      	cbz	r0, 954 <_ZN16Commands_Handler21CommandReadParametersEv+0x60>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     940:	68e3      	ldr	r3, [r4, #12]
     942:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
     946:	721a      	strb	r2, [r3, #8]
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     948:	2240      	movs	r2, #64	; 0x40
     94a:	68e1      	ldr	r1, [r4, #12]
     94c:	4809      	ldr	r0, [pc, #36]	; (974 <_ZN16Commands_Handler21CommandReadParametersEv+0x80>)
     94e:	4b0a      	ldr	r3, [pc, #40]	; (978 <_ZN16Commands_Handler21CommandReadParametersEv+0x84>)
     950:	4798      	blx	r3
     952:	e7dd      	b.n	910 <_ZN16Commands_Handler21CommandReadParametersEv+0x1c>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     954:	68e3      	ldr	r3, [r4, #12]
     956:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
     95a:	721a      	strb	r2, [r3, #8]
     95c:	e7f4      	b.n	948 <_ZN16Commands_Handler21CommandReadParametersEv+0x54>
     95e:	bf00      	nop
     960:	20006a80 	.word	0x20006a80
     964:	00013fbd 	.word	0x00013fbd
     968:	61626364 	.word	0x61626364
     96c:	200052f4 	.word	0x200052f4
     970:	00011d61 	.word	0x00011d61
     974:	20003444 	.word	0x20003444
     978:	00010b11 	.word	0x00010b11

0000097c <_ZN16Commands_Handler21CommandReadDataLoggerEv>:
bool Commands_Handler::CommandReadDataLogger(){
     97c:	b570      	push	{r4, r5, r6, lr}
     97e:	b082      	sub	sp, #8
	memcpy(&dataLogMessage,usbMessageBuffer,sizeof(DataLogMessage));
     980:	68c3      	ldr	r3, [r0, #12]
     982:	681c      	ldr	r4, [r3, #0]
     984:	6859      	ldr	r1, [r3, #4]
     986:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
     98a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
     98e:	8919      	ldrh	r1, [r3, #8]
     990:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
	if (result){
     994:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
     998:	2a57      	cmp	r2, #87	; 0x57
     99a:	d002      	beq.n	9a2 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x26>
	bool	result(dataLogMessage.header.task == kHVACCommandReadDataLog);
     99c:	2000      	movs	r0, #0
}
     99e:	b002      	add	sp, #8
     9a0:	bd70      	pop	{r4, r5, r6, pc}
     9a2:	4604      	mov	r4, r0
			uint32_t add=*logger.memory_event_stack;
     9a4:	4a2c      	ldr	r2, [pc, #176]	; (a58 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xdc>)
     9a6:	f8d2 25ec 	ldr.w	r2, [r2, #1516]	; 0x5ec
     9aa:	6812      	ldr	r2, [r2, #0]
     9ac:	9201      	str	r2, [sp, #4]
			if (add>=dataLogMessage.address)
     9ae:	f8d0 108a 	ldr.w	r1, [r0, #138]	; 0x8a
     9b2:	428a      	cmp	r2, r1
     9b4:	d33e      	bcc.n	a34 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xb8>
				memory_flash_address= dataLogMessage.address;
     9b6:	6741      	str	r1, [r0, #116]	; 0x74
				read_result=memory.ReadEventLogSector(memory_flash_address,memory_block);
     9b8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
     9bc:	4827      	ldr	r0, [pc, #156]	; (a5c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xe0>)
     9be:	4b28      	ldr	r3, [pc, #160]	; (a60 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xe4>)
     9c0:	4798      	blx	r3
     9c2:	66e0      	str	r0, [r4, #108]	; 0x6c
				if (read_result==0)
     9c4:	bb20      	cbnz	r0, a10 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x94>
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     9c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
     9c8:	67e3      	str	r3, [r4, #124]	; 0x7c
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     9ca:	4823      	ldr	r0, [pc, #140]	; (a58 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xdc>)
     9cc:	4b25      	ldr	r3, [pc, #148]	; (a64 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xe8>)
     9ce:	4798      	blx	r3
     9d0:	67a0      	str	r0, [r4, #120]	; 0x78
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     9d2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     9d6:	6823      	ldr	r3, [r4, #0]
     9d8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     9dc:	f104 027c 	add.w	r2, r4, #124	; 0x7c
     9e0:	68e1      	ldr	r1, [r4, #12]
     9e2:	4420      	add	r0, r4
     9e4:	4b20      	ldr	r3, [pc, #128]	; (a68 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xec>)
     9e6:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     9e8:	4e20      	ldr	r6, [pc, #128]	; (a6c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf0>)
     9ea:	2240      	movs	r2, #64	; 0x40
     9ec:	68e1      	ldr	r1, [r4, #12]
     9ee:	4630      	mov	r0, r6
     9f0:	4d1f      	ldr	r5, [pc, #124]	; (a70 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf4>)
     9f2:	47a8      	blx	r5
					delay_ms(100);
     9f4:	2064      	movs	r0, #100	; 0x64
     9f6:	4b1f      	ldr	r3, [pc, #124]	; (a74 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf8>)
     9f8:	4798      	blx	r3
					write_result=usb.write(memory_block,QSPI_ERBLK);
     9fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9fe:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
     a02:	4630      	mov	r0, r6
     a04:	47a8      	blx	r5
     a06:	6720      	str	r0, [r4, #112]	; 0x70
					result=write_result==0;
     a08:	fab0 f080 	clz	r0, r0
     a0c:	0940      	lsrs	r0, r0, #5
     a0e:	e7c6      	b.n	99e <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
					memory_flash_address=0;
     a10:	2500      	movs	r5, #0
     a12:	4622      	mov	r2, r4
     a14:	f842 5f74 	str.w	r5, [r2, #116]!
					CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&memory_flash_address);
     a18:	6823      	ldr	r3, [r4, #0]
     a1a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a1e:	68e1      	ldr	r1, [r4, #12]
     a20:	4420      	add	r0, r4
     a22:	4b11      	ldr	r3, [pc, #68]	; (a68 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xec>)
     a24:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a26:	2240      	movs	r2, #64	; 0x40
     a28:	68e1      	ldr	r1, [r4, #12]
     a2a:	4810      	ldr	r0, [pc, #64]	; (a6c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf0>)
     a2c:	4b10      	ldr	r3, [pc, #64]	; (a70 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf4>)
     a2e:	4798      	blx	r3
					result=false;
     a30:	4628      	mov	r0, r5
     a32:	e7b4      	b.n	99e <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
				memory_flash_address=0;
     a34:	2500      	movs	r5, #0
     a36:	6745      	str	r5, [r0, #116]	; 0x74
				CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     a38:	6802      	ldr	r2, [r0, #0]
     a3a:	f852 0c0c 	ldr.w	r0, [r2, #-12]
     a3e:	aa01      	add	r2, sp, #4
     a40:	4619      	mov	r1, r3
     a42:	4420      	add	r0, r4
     a44:	4b08      	ldr	r3, [pc, #32]	; (a68 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xec>)
     a46:	4798      	blx	r3
				usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a48:	2240      	movs	r2, #64	; 0x40
     a4a:	68e1      	ldr	r1, [r4, #12]
     a4c:	4807      	ldr	r0, [pc, #28]	; (a6c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf0>)
     a4e:	4b08      	ldr	r3, [pc, #32]	; (a70 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xf4>)
     a50:	4798      	blx	r3
				result=false;
     a52:	4628      	mov	r0, r5
     a54:	e7a3      	b.n	99e <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
     a56:	bf00      	nop
     a58:	20003a00 	.word	0x20003a00
     a5c:	20006a80 	.word	0x20006a80
     a60:	00013f5d 	.word	0x00013f5d
     a64:	00011929 	.word	0x00011929
     a68:	00000ff9 	.word	0x00000ff9
     a6c:	20003444 	.word	0x20003444
     a70:	00010b11 	.word	0x00010b11
     a74:	00003561 	.word	0x00003561

00000a78 <_ZN16Commands_Handler23CommandReadHeaterStatusEv>:
bool Commands_Handler::CommandReadHeaterStatus(){
     a78:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     a7a:	68c3      	ldr	r3, [r0, #12]
     a7c:	6819      	ldr	r1, [r3, #0]
     a7e:	6041      	str	r1, [r0, #4]
     a80:	8899      	ldrh	r1, [r3, #4]
     a82:	799b      	ldrb	r3, [r3, #6]
     a84:	8101      	strh	r1, [r0, #8]
     a86:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadHeaterStatus);
     a88:	7a43      	ldrb	r3, [r0, #9]
     a8a:	2b4a      	cmp	r3, #74	; 0x4a
     a8c:	bf0c      	ite	eq
     a8e:	2501      	moveq	r5, #1
     a90:	2500      	movne	r5, #0
	if (result){
     a92:	d001      	beq.n	a98 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x20>
}
     a94:	4628      	mov	r0, r5
     a96:	bd70      	pop	{r4, r5, r6, pc}
     a98:	4604      	mov	r4, r0
		heaters.ReadAllGPIOs(heater_data_array);
     a9a:	f100 0653 	add.w	r6, r0, #83	; 0x53
     a9e:	4631      	mov	r1, r6
     aa0:	4808      	ldr	r0, [pc, #32]	; (ac4 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x4c>)
     aa2:	4b09      	ldr	r3, [pc, #36]	; (ac8 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x50>)
     aa4:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,heater_data_array);
     aa6:	6823      	ldr	r3, [r4, #0]
     aa8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     aac:	4632      	mov	r2, r6
     aae:	68e1      	ldr	r1, [r4, #12]
     ab0:	4420      	add	r0, r4
     ab2:	4b06      	ldr	r3, [pc, #24]	; (acc <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x54>)
     ab4:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     ab6:	2240      	movs	r2, #64	; 0x40
     ab8:	68e1      	ldr	r1, [r4, #12]
     aba:	4805      	ldr	r0, [pc, #20]	; (ad0 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x58>)
     abc:	4b05      	ldr	r3, [pc, #20]	; (ad4 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x5c>)
     abe:	4798      	blx	r3
     ac0:	e7e8      	b.n	a94 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x1c>
     ac2:	bf00      	nop
     ac4:	20002e50 	.word	0x20002e50
     ac8:	0000f97d 	.word	0x0000f97d
     acc:	00000ff9 	.word	0x00000ff9
     ad0:	20003444 	.word	0x20003444
     ad4:	00010b11 	.word	0x00010b11

00000ad8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv>:
bool Commands_Handler::CommandReadScavengeStatus(void){
     ad8:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     ada:	68c3      	ldr	r3, [r0, #12]
     adc:	6819      	ldr	r1, [r3, #0]
     ade:	6041      	str	r1, [r0, #4]
     ae0:	8899      	ldrh	r1, [r3, #4]
     ae2:	799b      	ldrb	r3, [r3, #6]
     ae4:	8101      	strh	r1, [r0, #8]
     ae6:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadScavengeStatus);
     ae8:	7a43      	ldrb	r3, [r0, #9]
     aea:	2b52      	cmp	r3, #82	; 0x52
     aec:	bf0c      	ite	eq
     aee:	2501      	moveq	r5, #1
     af0:	2500      	movne	r5, #0
	if (result){
     af2:	d001      	beq.n	af8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x20>
}
     af4:	4628      	mov	r0, r5
     af6:	bd38      	pop	{r3, r4, r5, pc}
     af8:	4604      	mov	r4, r0
		data_byte=scavenge.ReadStatus();
     afa:	4809      	ldr	r0, [pc, #36]	; (b20 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x48>)
     afc:	4b09      	ldr	r3, [pc, #36]	; (b24 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x4c>)
     afe:	4798      	blx	r3
     b00:	4622      	mov	r2, r4
     b02:	f802 0f69 	strb.w	r0, [r2, #105]!
		CreateFullBufferMessage(usbMessageBuffer,&data_byte);
     b06:	6823      	ldr	r3, [r4, #0]
     b08:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b0c:	68e1      	ldr	r1, [r4, #12]
     b0e:	4420      	add	r0, r4
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x50>)
     b12:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b14:	2240      	movs	r2, #64	; 0x40
     b16:	68e1      	ldr	r1, [r4, #12]
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x54>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x58>)
     b1c:	4798      	blx	r3
     b1e:	e7e9      	b.n	af4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x1c>
     b20:	2000cdd0 	.word	0x2000cdd0
     b24:	000142bd 	.word	0x000142bd
     b28:	00000ff9 	.word	0x00000ff9
     b2c:	20003444 	.word	0x20003444
     b30:	00010b11 	.word	0x00010b11

00000b34 <_ZN16Commands_Handler27CommandReadCompressorStatusEv>:
bool Commands_Handler::CommandReadCompressorStatus(void){
     b34:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     b36:	68c3      	ldr	r3, [r0, #12]
     b38:	6819      	ldr	r1, [r3, #0]
     b3a:	6041      	str	r1, [r0, #4]
     b3c:	8899      	ldrh	r1, [r3, #4]
     b3e:	799b      	ldrb	r3, [r3, #6]
     b40:	8101      	strh	r1, [r0, #8]
     b42:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadCompressorStatus);
     b44:	7a43      	ldrb	r3, [r0, #9]
     b46:	2b54      	cmp	r3, #84	; 0x54
     b48:	bf0c      	ite	eq
     b4a:	2501      	moveq	r5, #1
     b4c:	2500      	movne	r5, #0
	if (result){
     b4e:	d001      	beq.n	b54 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x20>
}
     b50:	4628      	mov	r0, r5
     b52:	bd70      	pop	{r4, r5, r6, pc}
     b54:	4604      	mov	r4, r0
		ccu.GetCompressorStatus(compressor_data_array);
     b56:	f100 0657 	add.w	r6, r0, #87	; 0x57
     b5a:	4631      	mov	r1, r6
     b5c:	480b      	ldr	r0, [pc, #44]	; (b8c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x58>)
     b5e:	4b0c      	ldr	r3, [pc, #48]	; (b90 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x5c>)
     b60:	4798      	blx	r3
		memcpy(&compressor_data_array[4],(void*)&temperatures.values[0][0],4);
     b62:	4b0c      	ldr	r3, [pc, #48]	; (b94 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x60>)
     b64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     b66:	f8c4 205b 	str.w	r2, [r4, #91]	; 0x5b
		memcpy(&compressor_data_array[8],(void*)&temperatures.values[0][1],4);
     b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     b6c:	f8c4 305f 	str.w	r3, [r4, #95]	; 0x5f
		CreateFullBufferMessage(usbMessageBuffer,compressor_data_array);
     b70:	6823      	ldr	r3, [r4, #0]
     b72:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b76:	4632      	mov	r2, r6
     b78:	68e1      	ldr	r1, [r4, #12]
     b7a:	4420      	add	r0, r4
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x64>)
     b7e:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b80:	2240      	movs	r2, #64	; 0x40
     b82:	68e1      	ldr	r1, [r4, #12]
     b84:	4805      	ldr	r0, [pc, #20]	; (b9c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x68>)
     b86:	4b06      	ldr	r3, [pc, #24]	; (ba0 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x6c>)
     b88:	4798      	blx	r3
     b8a:	e7e1      	b.n	b50 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x1c>
     b8c:	200028d8 	.word	0x200028d8
     b90:	0000eff9 	.word	0x0000eff9
     b94:	2000cde4 	.word	0x2000cde4
     b98:	00000ff9 	.word	0x00000ff9
     b9c:	20003444 	.word	0x20003444
     ba0:	00010b11 	.word	0x00010b11

00000ba4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     ba4:	bf00      	nop
     ba6:	e7fd      	b.n	ba4 <Dummy_Handler>

00000ba8 <Reset_Handler>:
{
     ba8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     baa:	4b17      	ldr	r3, [pc, #92]	; (c08 <Reset_Handler+0x60>)
     bac:	4a17      	ldr	r2, [pc, #92]	; (c0c <Reset_Handler+0x64>)
     bae:	429a      	cmp	r2, r3
     bb0:	d010      	beq.n	bd4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     bb2:	4b17      	ldr	r3, [pc, #92]	; (c10 <Reset_Handler+0x68>)
     bb4:	4a14      	ldr	r2, [pc, #80]	; (c08 <Reset_Handler+0x60>)
     bb6:	429a      	cmp	r2, r3
     bb8:	d20c      	bcs.n	bd4 <Reset_Handler+0x2c>
     bba:	3b01      	subs	r3, #1
     bbc:	1a9b      	subs	r3, r3, r2
     bbe:	f023 0303 	bic.w	r3, r3, #3
     bc2:	3304      	adds	r3, #4
     bc4:	4413      	add	r3, r2
     bc6:	4911      	ldr	r1, [pc, #68]	; (c0c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     bc8:	f851 0b04 	ldr.w	r0, [r1], #4
     bcc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     bd0:	429a      	cmp	r2, r3
     bd2:	d1f9      	bne.n	bc8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     bd4:	4b0f      	ldr	r3, [pc, #60]	; (c14 <Reset_Handler+0x6c>)
     bd6:	4a10      	ldr	r2, [pc, #64]	; (c18 <Reset_Handler+0x70>)
     bd8:	429a      	cmp	r2, r3
     bda:	d20a      	bcs.n	bf2 <Reset_Handler+0x4a>
     bdc:	3b01      	subs	r3, #1
     bde:	1a9b      	subs	r3, r3, r2
     be0:	f023 0303 	bic.w	r3, r3, #3
     be4:	3304      	adds	r3, #4
     be6:	4413      	add	r3, r2
                *pDest++ = 0;
     be8:	2100      	movs	r1, #0
     bea:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     bee:	4293      	cmp	r3, r2
     bf0:	d1fb      	bne.n	bea <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     bf2:	4a0a      	ldr	r2, [pc, #40]	; (c1c <Reset_Handler+0x74>)
     bf4:	4b0a      	ldr	r3, [pc, #40]	; (c20 <Reset_Handler+0x78>)
     bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     bfa:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     bfc:	4b09      	ldr	r3, [pc, #36]	; (c24 <Reset_Handler+0x7c>)
     bfe:	4798      	blx	r3
        main();
     c00:	4b09      	ldr	r3, [pc, #36]	; (c28 <Reset_Handler+0x80>)
     c02:	4798      	blx	r3
     c04:	e7fe      	b.n	c04 <Reset_Handler+0x5c>
     c06:	bf00      	nop
     c08:	20000000 	.word	0x20000000
     c0c:	0001bbe0 	.word	0x0001bbe0
     c10:	20000a44 	.word	0x20000a44
     c14:	2000e168 	.word	0x2000e168
     c18:	20000a48 	.word	0x20000a48
     c1c:	e000ed00 	.word	0xe000ed00
     c20:	00000000 	.word	0x00000000
     c24:	0001a4e9 	.word	0x0001a4e9
     c28:	00000c5d 	.word	0x00000c5d

00000c2c <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c2c:	2280      	movs	r2, #128	; 0x80
     c2e:	4b09      	ldr	r3, [pc, #36]	; (c54 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     c30:	619a      	str	r2, [r3, #24]

static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	is_firmware_OK=true;
	if (counter_running==last_count)
     c32:	4b09      	ldr	r3, [pc, #36]	; (c58 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     c34:	681a      	ldr	r2, [r3, #0]
     c36:	685b      	ldr	r3, [r3, #4]
     c38:	429a      	cmp	r2, r3
     c3a:	d006      	beq.n	c4a <_ZL15FirmwareIsAlivePK10timer_task+0x1e>
		is_running=false;
	} 
	else
	{
		is_running=true;
		last_count=counter_running;
     c3c:	4b06      	ldr	r3, [pc, #24]	; (c58 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     c3e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     c40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     c44:	4b03      	ldr	r3, [pc, #12]	; (c54 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     c46:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		gpio_toggle_pin_level(LED0);
		
	}
	
	localtimeout=true;
     c4a:	2201      	movs	r2, #1
     c4c:	4b02      	ldr	r3, [pc, #8]	; (c58 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     c4e:	721a      	strb	r2, [r3, #8]
     c50:	4770      	bx	lr
     c52:	bf00      	nop
     c54:	41008000 	.word	0x41008000
     c58:	20001b7c 	.word	0x20001b7c

00000c5c <main>:




int main(void)		
{
     c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     c60:	4b6e      	ldr	r3, [pc, #440]	; (e1c <main+0x1c0>)
     c62:	4798      	blx	r3
	
	//StartLivePulse();
	delay_ms(200);
     c64:	20c8      	movs	r0, #200	; 0xc8
     c66:	4b6e      	ldr	r3, [pc, #440]	; (e20 <main+0x1c4>)
     c68:	4798      	blx	r3
	logger.Init();
     c6a:	486e      	ldr	r0, [pc, #440]	; (e24 <main+0x1c8>)
     c6c:	4b6e      	ldr	r3, [pc, #440]	; (e28 <main+0x1cc>)
     c6e:	4798      	blx	r3
	while(!memory.Init()){
     c70:	4e6e      	ldr	r6, [pc, #440]	; (e2c <main+0x1d0>)
     c72:	4d6f      	ldr	r5, [pc, #444]	; (e30 <main+0x1d4>)
		delay_ms(DELAY_ERROR);
     c74:	4c6a      	ldr	r4, [pc, #424]	; (e20 <main+0x1c4>)
	while(!memory.Init()){
     c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     c7a:	4630      	mov	r0, r6
     c7c:	47a8      	blx	r5
     c7e:	b938      	cbnz	r0, c90 <main+0x34>
		delay_ms(DELAY_ERROR);
     c80:	2064      	movs	r0, #100	; 0x64
     c82:	47a0      	blx	r4
     c84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     c88:	4b6a      	ldr	r3, [pc, #424]	; (e34 <main+0x1d8>)
     c8a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     c8e:	e7f2      	b.n	c76 <main+0x1a>
		gpio_toggle_pin_level(LED0);
	}
	if (memory.initiated)
     c90:	4b66      	ldr	r3, [pc, #408]	; (e2c <main+0x1d0>)
     c92:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
     c96:	b133      	cbz	r3, ca6 <main+0x4a>
	{
		memory.WriteDefaultParameters();
     c98:	4864      	ldr	r0, [pc, #400]	; (e2c <main+0x1d0>)
     c9a:	4b67      	ldr	r3, [pc, #412]	; (e38 <main+0x1dc>)
     c9c:	4798      	blx	r3
		logger.SaveEvent("Info:Memory Started");
     c9e:	4967      	ldr	r1, [pc, #412]	; (e3c <main+0x1e0>)
     ca0:	4860      	ldr	r0, [pc, #384]	; (e24 <main+0x1c8>)
     ca2:	4b67      	ldr	r3, [pc, #412]	; (e40 <main+0x1e4>)
     ca4:	4798      	blx	r3
	}

	
	bool isOK=temperatures.Init();
     ca6:	4867      	ldr	r0, [pc, #412]	; (e44 <main+0x1e8>)
     ca8:	4b67      	ldr	r3, [pc, #412]	; (e48 <main+0x1ec>)
     caa:	4798      	blx	r3
	if (isOK)
     cac:	b110      	cbz	r0, cb4 <main+0x58>
	{
		temperatures.StartOneConversion();
     cae:	4865      	ldr	r0, [pc, #404]	; (e44 <main+0x1e8>)
     cb0:	4b66      	ldr	r3, [pc, #408]	; (e4c <main+0x1f0>)
     cb2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cb4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     cb8:	4b5e      	ldr	r3, [pc, #376]	; (e34 <main+0x1d8>)
     cba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
 	gpio_set_pin_level(LED0,true);
	while (!flapper.Init())
     cbe:	4e64      	ldr	r6, [pc, #400]	; (e50 <main+0x1f4>)
     cc0:	4d64      	ldr	r5, [pc, #400]	; (e54 <main+0x1f8>)
	{
		delay_ms(DELAY_ERROR);
     cc2:	4c57      	ldr	r4, [pc, #348]	; (e20 <main+0x1c4>)
	while (!flapper.Init())
     cc4:	4630      	mov	r0, r6
     cc6:	47a8      	blx	r5
     cc8:	b938      	cbnz	r0, cda <main+0x7e>
		delay_ms(DELAY_ERROR);
     cca:	2064      	movs	r0, #100	; 0x64
     ccc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     cce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     cd2:	4b58      	ldr	r3, [pc, #352]	; (e34 <main+0x1d8>)
     cd4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     cd8:	e7f4      	b.n	cc4 <main+0x68>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     cda:	4e5f      	ldr	r6, [pc, #380]	; (e58 <main+0x1fc>)
     cdc:	4d5f      	ldr	r5, [pc, #380]	; (e5c <main+0x200>)
		delay_ms(DELAY_ERROR);
     cde:	4c50      	ldr	r4, [pc, #320]	; (e20 <main+0x1c4>)
	while(!fans.Init()){
     ce0:	4630      	mov	r0, r6
     ce2:	47a8      	blx	r5
     ce4:	b938      	cbnz	r0, cf6 <main+0x9a>
		delay_ms(DELAY_ERROR);
     ce6:	2064      	movs	r0, #100	; 0x64
     ce8:	47a0      	blx	r4
     cea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     cee:	4b51      	ldr	r3, [pc, #324]	; (e34 <main+0x1d8>)
     cf0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     cf4:	e7f4      	b.n	ce0 <main+0x84>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     cf6:	4c58      	ldr	r4, [pc, #352]	; (e58 <main+0x1fc>)
     cf8:	2100      	movs	r1, #0
     cfa:	6e60      	ldr	r0, [r4, #100]	; 0x64
     cfc:	4b58      	ldr	r3, [pc, #352]	; (e60 <main+0x204>)
     cfe:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     d00:	2100      	movs	r1, #0
     d02:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     d04:	4d57      	ldr	r5, [pc, #348]	; (e64 <main+0x208>)
     d06:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     d08:	2100      	movs	r1, #0
     d0a:	6e20      	ldr	r0, [r4, #96]	; 0x60
     d0c:	47a8      	blx	r5
// 	
	while(!heaters.Init()){
     d0e:	4e56      	ldr	r6, [pc, #344]	; (e68 <main+0x20c>)
     d10:	4d56      	ldr	r5, [pc, #344]	; (e6c <main+0x210>)
		delay_ms(DELAY_ERROR);
     d12:	4c43      	ldr	r4, [pc, #268]	; (e20 <main+0x1c4>)
	while(!heaters.Init()){
     d14:	4630      	mov	r0, r6
     d16:	47a8      	blx	r5
     d18:	b938      	cbnz	r0, d2a <main+0xce>
		delay_ms(DELAY_ERROR);
     d1a:	2064      	movs	r0, #100	; 0x64
     d1c:	47a0      	blx	r4
     d1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d22:	4b44      	ldr	r3, [pc, #272]	; (e34 <main+0x1d8>)
     d24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d28:	e7f4      	b.n	d14 <main+0xb8>
		gpio_toggle_pin_level(LED0);

			}
	while(!scavenge.Init()){
     d2a:	4e51      	ldr	r6, [pc, #324]	; (e70 <main+0x214>)
     d2c:	4d51      	ldr	r5, [pc, #324]	; (e74 <main+0x218>)
		delay_ms(DELAY_ERROR);
     d2e:	4c3c      	ldr	r4, [pc, #240]	; (e20 <main+0x1c4>)
	while(!scavenge.Init()){
     d30:	4630      	mov	r0, r6
     d32:	47a8      	blx	r5
     d34:	b938      	cbnz	r0, d46 <main+0xea>
		delay_ms(DELAY_ERROR);
     d36:	2064      	movs	r0, #100	; 0x64
     d38:	47a0      	blx	r4
     d3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d3e:	4b3d      	ldr	r3, [pc, #244]	; (e34 <main+0x1d8>)
     d40:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d44:	e7f4      	b.n	d30 <main+0xd4>

		gpio_toggle_pin_level(LED0);

	}
	scavenge.SetEnable(false);
     d46:	2100      	movs	r1, #0
     d48:	4849      	ldr	r0, [pc, #292]	; (e70 <main+0x214>)
     d4a:	4b4b      	ldr	r3, [pc, #300]	; (e78 <main+0x21c>)
     d4c:	4798      	blx	r3
	while(!ccu.Init()){
     d4e:	4e4b      	ldr	r6, [pc, #300]	; (e7c <main+0x220>)
     d50:	4d4b      	ldr	r5, [pc, #300]	; (e80 <main+0x224>)
		delay_ms(DELAY_ERROR);
     d52:	4c33      	ldr	r4, [pc, #204]	; (e20 <main+0x1c4>)
	while(!ccu.Init()){
     d54:	4630      	mov	r0, r6
     d56:	47a8      	blx	r5
     d58:	b938      	cbnz	r0, d6a <main+0x10e>
		delay_ms(DELAY_ERROR);
     d5a:	2064      	movs	r0, #100	; 0x64
     d5c:	47a0      	blx	r4
     d5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d62:	4b34      	ldr	r3, [pc, #208]	; (e34 <main+0x1d8>)
     d64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d68:	e7f4      	b.n	d54 <main+0xf8>
		gpio_toggle_pin_level(LED0);
	}
	ccu.SetEnable(false);
     d6a:	2100      	movs	r1, #0
     d6c:	4845      	ldr	r0, [pc, #276]	; (e84 <main+0x228>)
     d6e:	4b46      	ldr	r3, [pc, #280]	; (e88 <main+0x22c>)
     d70:	4798      	blx	r3
	
	
	
	usb.Init();
     d72:	4846      	ldr	r0, [pc, #280]	; (e8c <main+0x230>)
     d74:	4b46      	ldr	r3, [pc, #280]	; (e90 <main+0x234>)
     d76:	4798      	blx	r3
	
	



	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),1000);
     d78:	4c46      	ldr	r4, [pc, #280]	; (e94 <main+0x238>)
     d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d7e:	4946      	ldr	r1, [pc, #280]	; (e98 <main+0x23c>)
     d80:	f104 000c 	add.w	r0, r4, #12
     d84:	4b45      	ldr	r3, [pc, #276]	; (e9c <main+0x240>)
     d86:	4798      	blx	r3
	uint8_t localPosition;
 	//flapper.valve1->StartControlling(220);

 	//flapper.valve2->StartControlling(220);
	
	userApp.Init();
     d88:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     d8c:	4b44      	ldr	r3, [pc, #272]	; (ea0 <main+0x244>)
     d8e:	4798      	blx	r3

	
	


	logger.SaveInstationLog();
     d90:	4824      	ldr	r0, [pc, #144]	; (e24 <main+0x1c8>)
     d92:	4b44      	ldr	r3, [pc, #272]	; (ea4 <main+0x248>)
     d94:	4798      	blx	r3

	while (1)
	{
		
		if (userApp.IsAppConnected())
     d96:	4625      	mov	r5, r4
     d98:	f8df 8124 	ldr.w	r8, [pc, #292]	; ec0 <main+0x264>
		{
			userApp.handleCommunication();			
     d9c:	f8df 9124 	ldr.w	r9, [pc, #292]	; ec4 <main+0x268>
		}
	//	delay_ms(10);
		
	//	while ((!flapper.valve1->gotSetpoint)|((!flapper.valve2->gotSetpoint)&false))
	//	{
			flapper.valve1->Control_NBC_StandAlone_Reset();
     da0:	4e2b      	ldr	r6, [pc, #172]	; (e50 <main+0x1f4>)
     da2:	e037      	b.n	e14 <main+0x1b8>
			userApp.handleCommunication();			
     da4:	4638      	mov	r0, r7
     da6:	47c8      	blx	r9
     da8:	e010      	b.n	dcc <main+0x170>
						gotNewTemperature=true;
					
					}
				
				}
				temperatures.StartOneConversion();
     daa:	4826      	ldr	r0, [pc, #152]	; (e44 <main+0x1e8>)
     dac:	4b27      	ldr	r3, [pc, #156]	; (e4c <main+0x1f0>)
     dae:	4798      	blx	r3
				asm("nop");
     db0:	bf00      	nop
			}
		}
		
		
		ccu.Periodic_Task();
     db2:	4832      	ldr	r0, [pc, #200]	; (e7c <main+0x220>)
     db4:	4b3c      	ldr	r3, [pc, #240]	; (ea8 <main+0x24c>)
     db6:	4798      	blx	r3
		counter_running++;
     db8:	682a      	ldr	r2, [r5, #0]
     dba:	3201      	adds	r2, #1
     dbc:	602a      	str	r2, [r5, #0]
		if (counter_running%0x100==0)
     dbe:	f012 0fff 	tst.w	r2, #255	; 0xff
     dc2:	d021      	beq.n	e08 <main+0x1ac>
		if (userApp.IsAppConnected())
     dc4:	4638      	mov	r0, r7
     dc6:	47c0      	blx	r8
     dc8:	2800      	cmp	r0, #0
     dca:	d1eb      	bne.n	da4 <main+0x148>
			flapper.valve1->Control_NBC_StandAlone_Reset();
     dcc:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
     dd0:	4c36      	ldr	r4, [pc, #216]	; (eac <main+0x250>)
     dd2:	47a0      	blx	r4
			flapper.valve2->Control_NBC_StandAlone_Reset();
     dd4:	f8d6 00e0 	ldr.w	r0, [r6, #224]	; 0xe0
     dd8:	47a0      	blx	r4
		if (temperatures.isOK)
     dda:	4b1a      	ldr	r3, [pc, #104]	; (e44 <main+0x1e8>)
     ddc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
     de0:	2b00      	cmp	r3, #0
     de2:	d0e6      	beq.n	db2 <main+0x156>
			if (temperatures.IsConversionFinished())
     de4:	4817      	ldr	r0, [pc, #92]	; (e44 <main+0x1e8>)
     de6:	4b32      	ldr	r3, [pc, #200]	; (eb0 <main+0x254>)
     de8:	4798      	blx	r3
     dea:	2800      	cmp	r0, #0
     dec:	d0e1      	beq.n	db2 <main+0x156>
				temperatures.GetConversionResult();
     dee:	4c15      	ldr	r4, [pc, #84]	; (e44 <main+0x1e8>)
     df0:	4620      	mov	r0, r4
     df2:	4b30      	ldr	r3, [pc, #192]	; (eb4 <main+0x258>)
     df4:	4798      	blx	r3
				if (temperatures.faultData==VALID_TEMPERATURE)
     df6:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     dfa:	2b01      	cmp	r3, #1
     dfc:	d1d5      	bne.n	daa <main+0x14e>
					currentTemperature=temperatures.lastValue;
     dfe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     e02:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
     e06:	e7d0      	b.n	daa <main+0x14e>
		{
			logger.SaveEventIndexResult("Running  like crazy!!!",(uint8_t)counter_running,0);
     e08:	2300      	movs	r3, #0
     e0a:	b2d2      	uxtb	r2, r2
     e0c:	492a      	ldr	r1, [pc, #168]	; (eb8 <main+0x25c>)
     e0e:	4805      	ldr	r0, [pc, #20]	; (e24 <main+0x1c8>)
     e10:	4c2a      	ldr	r4, [pc, #168]	; (ebc <main+0x260>)
     e12:	47a0      	blx	r4
		if (userApp.IsAppConnected())
     e14:	f105 072c 	add.w	r7, r5, #44	; 0x2c
     e18:	e7d4      	b.n	dc4 <main+0x168>
     e1a:	bf00      	nop
     e1c:	00001731 	.word	0x00001731
     e20:	00003561 	.word	0x00003561
     e24:	20003a00 	.word	0x20003a00
     e28:	000116f1 	.word	0x000116f1
     e2c:	20006a80 	.word	0x20006a80
     e30:	000140a1 	.word	0x000140a1
     e34:	41008000 	.word	0x41008000
     e38:	00013fe9 	.word	0x00013fe9
     e3c:	0001aa7c 	.word	0x0001aa7c
     e40:	00011a05 	.word	0x00011a05
     e44:	2000cde4 	.word	0x2000cde4
     e48:	00014505 	.word	0x00014505
     e4c:	000145b9 	.word	0x000145b9
     e50:	200052f4 	.word	0x200052f4
     e54:	00011cf1 	.word	0x00011cf1
     e58:	2000373c 	.word	0x2000373c
     e5c:	00011315 	.word	0x00011315
     e60:	00011151 	.word	0x00011151
     e64:	0001150d 	.word	0x0001150d
     e68:	20002e50 	.word	0x20002e50
     e6c:	0000f909 	.word	0x0000f909
     e70:	2000cdd0 	.word	0x2000cdd0
     e74:	00014319 	.word	0x00014319
     e78:	000142e1 	.word	0x000142e1
     e7c:	200028d8 	.word	0x200028d8
     e80:	0000ef2d 	.word	0x0000ef2d
     e84:	20002a74 	.word	0x20002a74
     e88:	0000f2f5 	.word	0x0000f2f5
     e8c:	20003444 	.word	0x20003444
     e90:	00010841 	.word	0x00010841
     e94:	20001b7c 	.word	0x20001b7c
     e98:	00000c2d 	.word	0x00000c2d
     e9c:	000102bd 	.word	0x000102bd
     ea0:	000011c9 	.word	0x000011c9
     ea4:	00011849 	.word	0x00011849
     ea8:	0000f5b1 	.word	0x0000f5b1
     eac:	00012425 	.word	0x00012425
     eb0:	00014695 	.word	0x00014695
     eb4:	00014601 	.word	0x00014601
     eb8:	0001aa90 	.word	0x0001aa90
     ebc:	00011951 	.word	0x00011951
     ec0:	000016a9 	.word	0x000016a9
     ec4:	000015c9 	.word	0x000015c9

00000ec8 <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     ecc:	4c30      	ldr	r4, [pc, #192]	; (f90 <_GLOBAL__sub_I_localtimeout+0xc8>)
     ece:	f504 75fe 	add.w	r5, r4, #508	; 0x1fc
     ed2:	4930      	ldr	r1, [pc, #192]	; (f94 <_GLOBAL__sub_I_localtimeout+0xcc>)
     ed4:	4628      	mov	r0, r5
     ed6:	4f30      	ldr	r7, [pc, #192]	; (f98 <_GLOBAL__sub_I_localtimeout+0xd0>)
     ed8:	47b8      	blx	r7
     eda:	4e30      	ldr	r6, [pc, #192]	; (f9c <_GLOBAL__sub_I_localtimeout+0xd4>)
     edc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; fd4 <_GLOBAL__sub_I_localtimeout+0x10c>
     ee0:	4632      	mov	r2, r6
     ee2:	4641      	mov	r1, r8
     ee4:	4628      	mov	r0, r5
     ee6:	4d2e      	ldr	r5, [pc, #184]	; (fa0 <_GLOBAL__sub_I_localtimeout+0xd8>)
     ee8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     eea:	f504 7907 	add.w	r9, r4, #540	; 0x21c
     eee:	492d      	ldr	r1, [pc, #180]	; (fa4 <_GLOBAL__sub_I_localtimeout+0xdc>)
     ef0:	4648      	mov	r0, r9
     ef2:	47b8      	blx	r7
     ef4:	4632      	mov	r2, r6
     ef6:	4641      	mov	r1, r8
     ef8:	4648      	mov	r0, r9
     efa:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     efc:	f104 090c 	add.w	r9, r4, #12
     f00:	4929      	ldr	r1, [pc, #164]	; (fa8 <_GLOBAL__sub_I_localtimeout+0xe0>)
     f02:	4648      	mov	r0, r9
     f04:	47b8      	blx	r7
     f06:	4632      	mov	r2, r6
     f08:	4641      	mov	r1, r8
     f0a:	4648      	mov	r0, r9
     f0c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     f0e:	f504 790f 	add.w	r9, r4, #572	; 0x23c
     f12:	4926      	ldr	r1, [pc, #152]	; (fac <_GLOBAL__sub_I_localtimeout+0xe4>)
     f14:	4648      	mov	r0, r9
     f16:	47b8      	blx	r7
     f18:	4632      	mov	r2, r6
     f1a:	4641      	mov	r1, r8
     f1c:	4648      	mov	r0, r9
     f1e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     f20:	f504 7917 	add.w	r9, r4, #604	; 0x25c
     f24:	4922      	ldr	r1, [pc, #136]	; (fb0 <_GLOBAL__sub_I_localtimeout+0xe8>)
     f26:	4648      	mov	r0, r9
     f28:	47b8      	blx	r7
     f2a:	4632      	mov	r2, r6
     f2c:	4641      	mov	r1, r8
     f2e:	4648      	mov	r0, r9
     f30:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     f32:	f504 791f 	add.w	r9, r4, #636	; 0x27c
     f36:	491f      	ldr	r1, [pc, #124]	; (fb4 <_GLOBAL__sub_I_localtimeout+0xec>)
     f38:	4648      	mov	r0, r9
     f3a:	47b8      	blx	r7
     f3c:	4632      	mov	r2, r6
     f3e:	4641      	mov	r1, r8
     f40:	4648      	mov	r0, r9
     f42:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     f44:	f504 7927 	add.w	r9, r4, #668	; 0x29c
     f48:	491b      	ldr	r1, [pc, #108]	; (fb8 <_GLOBAL__sub_I_localtimeout+0xf0>)
     f4a:	4648      	mov	r0, r9
     f4c:	47b8      	blx	r7
     f4e:	4632      	mov	r2, r6
     f50:	4641      	mov	r1, r8
     f52:	4648      	mov	r0, r9
     f54:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     f56:	f504 792f 	add.w	r9, r4, #700	; 0x2bc
     f5a:	4918      	ldr	r1, [pc, #96]	; (fbc <_GLOBAL__sub_I_localtimeout+0xf4>)
     f5c:	4648      	mov	r0, r9
     f5e:	47b8      	blx	r7
     f60:	4632      	mov	r2, r6
     f62:	4641      	mov	r1, r8
     f64:	4648      	mov	r0, r9
     f66:	47a8      	blx	r5
     f68:	f504 7737 	add.w	r7, r4, #732	; 0x2dc
     f6c:	4914      	ldr	r1, [pc, #80]	; (fc0 <_GLOBAL__sub_I_localtimeout+0xf8>)
     f6e:	4638      	mov	r0, r7
     f70:	4b14      	ldr	r3, [pc, #80]	; (fc4 <_GLOBAL__sub_I_localtimeout+0xfc>)
     f72:	4798      	blx	r3
     f74:	4632      	mov	r2, r6
     f76:	4914      	ldr	r1, [pc, #80]	; (fc8 <_GLOBAL__sub_I_localtimeout+0x100>)
     f78:	4638      	mov	r0, r7
     f7a:	47a8      	blx	r5
static Maintenance_Tool	userApp;
     f7c:	342c      	adds	r4, #44	; 0x2c
     f7e:	4620      	mov	r0, r4
     f80:	4b12      	ldr	r3, [pc, #72]	; (fcc <_GLOBAL__sub_I_localtimeout+0x104>)
     f82:	4798      	blx	r3
     f84:	4632      	mov	r2, r6
     f86:	4912      	ldr	r1, [pc, #72]	; (fd0 <_GLOBAL__sub_I_localtimeout+0x108>)
     f88:	4620      	mov	r0, r4
     f8a:	47a8      	blx	r5
     f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f90:	20001b7c 	.word	0x20001b7c
     f94:	2000deb0 	.word	0x2000deb0
     f98:	000100e1 	.word	0x000100e1
     f9c:	20000000 	.word	0x20000000
     fa0:	00019fb9 	.word	0x00019fb9
     fa4:	2000df44 	.word	0x2000df44
     fa8:	2000e068 	.word	0x2000e068
     fac:	2000df64 	.word	0x2000df64
     fb0:	2000e028 	.word	0x2000e028
     fb4:	2000e048 	.word	0x2000e048
     fb8:	2000df20 	.word	0x2000df20
     fbc:	2000dfc0 	.word	0x2000dfc0
     fc0:	2000dfe0 	.word	0x2000dfe0
     fc4:	0000fa29 	.word	0x0000fa29
     fc8:	0000fa45 	.word	0x0000fa45
     fcc:	000010a1 	.word	0x000010a1
     fd0:	00001055 	.word	0x00001055
     fd4:	00010119 	.word	0x00010119

00000fd8 <_ZN22MaintenanceDataHandlerC1Ev>:
     fd8:	2264      	movs	r2, #100	; 0x64
     fda:	7002      	strb	r2, [r0, #0]
     fdc:	2263      	movs	r2, #99	; 0x63
     fde:	7042      	strb	r2, [r0, #1]
     fe0:	2262      	movs	r2, #98	; 0x62
     fe2:	7082      	strb	r2, [r0, #2]
     fe4:	2261      	movs	r2, #97	; 0x61
     fe6:	70c2      	strb	r2, [r0, #3]
     fe8:	2200      	movs	r2, #0
     fea:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     fec:	223a      	movs	r2, #58	; 0x3a
     fee:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     ff2:	4770      	bx	lr

00000ff4 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     ff4:	4770      	bx	lr
	...

00000ff8 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     ff8:	b570      	push	{r4, r5, r6, lr}
     ffa:	4605      	mov	r5, r0
     ffc:	460c      	mov	r4, r1
     ffe:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
    1000:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    1004:	3006      	adds	r0, #6
    1006:	4b09      	ldr	r3, [pc, #36]	; (102c <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
    1008:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
    100a:	462b      	mov	r3, r5
    100c:	4621      	mov	r1, r4
    100e:	3540      	adds	r5, #64	; 0x40
    1010:	681e      	ldr	r6, [r3, #0]
    1012:	685c      	ldr	r4, [r3, #4]
    1014:	6898      	ldr	r0, [r3, #8]
    1016:	68da      	ldr	r2, [r3, #12]
    1018:	600e      	str	r6, [r1, #0]
    101a:	604c      	str	r4, [r1, #4]
    101c:	6088      	str	r0, [r1, #8]
    101e:	60ca      	str	r2, [r1, #12]
    1020:	3310      	adds	r3, #16
    1022:	3110      	adds	r1, #16
    1024:	42ab      	cmp	r3, r5
    1026:	d1f3      	bne.n	1010 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
    1028:	2000      	movs	r0, #0
    102a:	bd70      	pop	{r4, r5, r6, pc}
    102c:	0001a539 	.word	0x0001a539

00001030 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
    1030:	4b03      	ldr	r3, [pc, #12]	; (1040 <_ZL21MaintenaceToolTimmingPK10timer_task+0x10>)
    1032:	681a      	ldr	r2, [r3, #0]
    1034:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
    1038:	3301      	adds	r3, #1
    103a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    103e:	4770      	bx	lr
    1040:	20001e74 	.word	0x20001e74

00001044 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
    1044:	4b02      	ldr	r3, [pc, #8]	; (1050 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
    1046:	681b      	ldr	r3, [r3, #0]
    1048:	2200      	movs	r2, #0
    104a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    104e:	4770      	bx	lr
    1050:	20001e74 	.word	0x20001e74

00001054 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
    1054:	b538      	push	{r3, r4, r5, lr}
    1056:	4604      	mov	r4, r0
    1058:	4b0a      	ldr	r3, [pc, #40]	; (1084 <_ZN16Maintenance_ToolD1Ev+0x30>)
    105a:	6003      	str	r3, [r0, #0]
{
	ticks=0;
    105c:	2300      	movs	r3, #0
    105e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	interfaceTimer.Stop();
    1062:	4d09      	ldr	r5, [pc, #36]	; (1088 <_ZN16Maintenance_ToolD1Ev+0x34>)
    1064:	4628      	mov	r0, r5
    1066:	4b09      	ldr	r3, [pc, #36]	; (108c <_ZN16Maintenance_ToolD1Ev+0x38>)
    1068:	4798      	blx	r3
	interfaceTimer.Remove_task();
    106a:	4628      	mov	r0, r5
    106c:	4b08      	ldr	r3, [pc, #32]	; (1090 <_ZN16Maintenance_ToolD1Ev+0x3c>)
    106e:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
    1070:	4908      	ldr	r1, [pc, #32]	; (1094 <_ZN16Maintenance_ToolD1Ev+0x40>)
    1072:	4620      	mov	r0, r4
    1074:	4b08      	ldr	r3, [pc, #32]	; (1098 <_ZN16Maintenance_ToolD1Ev+0x44>)
    1076:	4798      	blx	r3
    1078:	f504 70c4 	add.w	r0, r4, #392	; 0x188
    107c:	4b07      	ldr	r3, [pc, #28]	; (109c <_ZN16Maintenance_ToolD1Ev+0x48>)
    107e:	4798      	blx	r3
	
} //~Maintenance_Tool
    1080:	4620      	mov	r0, r4
    1082:	bd38      	pop	{r3, r4, r5, pc}
    1084:	0001aac8 	.word	0x0001aac8
    1088:	20001e78 	.word	0x20001e78
    108c:	00010241 	.word	0x00010241
    1090:	00010331 	.word	0x00010331
    1094:	0001aab8 	.word	0x0001aab8
    1098:	0000030d 	.word	0x0000030d
    109c:	00000ff5 	.word	0x00000ff5

000010a0 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
    10a0:	b538      	push	{r3, r4, r5, lr}
    10a2:	4604      	mov	r4, r0
    10a4:	f500 70c4 	add.w	r0, r0, #392	; 0x188
    10a8:	4b17      	ldr	r3, [pc, #92]	; (1108 <_ZN16Maintenance_ToolC1Ev+0x68>)
    10aa:	4798      	blx	r3
    10ac:	4917      	ldr	r1, [pc, #92]	; (110c <_ZN16Maintenance_ToolC1Ev+0x6c>)
    10ae:	4620      	mov	r0, r4
    10b0:	4b17      	ldr	r3, [pc, #92]	; (1110 <_ZN16Maintenance_ToolC1Ev+0x70>)
    10b2:	4798      	blx	r3
    10b4:	4b17      	ldr	r3, [pc, #92]	; (1114 <_ZN16Maintenance_ToolC1Ev+0x74>)
    10b6:	6023      	str	r3, [r4, #0]
    10b8:	2300      	movs	r3, #0
    10ba:	2564      	movs	r5, #100	; 0x64
    10bc:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
    10c0:	2063      	movs	r0, #99	; 0x63
    10c2:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
    10c6:	2162      	movs	r1, #98	; 0x62
    10c8:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    10cc:	2261      	movs	r2, #97	; 0x61
    10ce:	f884 20ef 	strb.w	r2, [r4, #239]	; 0xef
    10d2:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
    10d6:	f884 517a 	strb.w	r5, [r4, #378]	; 0x17a
    10da:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    10de:	f884 117c 	strb.w	r1, [r4, #380]	; 0x17c
    10e2:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
    10e6:	f884 317f 	strb.w	r3, [r4, #383]	; 0x17f
	ptrMaintenanceTool=this;
    10ea:	4a0b      	ldr	r2, [pc, #44]	; (1118 <_ZN16Maintenance_ToolC1Ev+0x78>)
    10ec:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
    10f0:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	nextMaintenanceSyncTime = 0;
    10f4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	nextMaintenanceUsageTimerSyncTime = 0;
    10f8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ticks=0;
    10fc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	localBuffer=staticBuffer;
    1100:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
} //Maintenance_Tool
    1104:	4620      	mov	r0, r4
    1106:	bd38      	pop	{r3, r4, r5, pc}
    1108:	00000fd9 	.word	0x00000fd9
    110c:	0001aab8 	.word	0x0001aab8
    1110:	000002d1 	.word	0x000002d1
    1114:	0001aac8 	.word	0x0001aac8
    1118:	20001e74 	.word	0x20001e74

0000111c <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
    111c:	b410      	push	{r4}
    111e:	4604      	mov	r4, r0
    1120:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
    1122:	4619      	mov	r1, r3
    1124:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
    1128:	54d1      	strb	r1, [r2, r3]
    112a:	1c58      	adds	r0, r3, #1
    112c:	b2c0      	uxtb	r0, r0
    112e:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
    1130:	2b40      	cmp	r3, #64	; 0x40
    1132:	d1f7      	bne.n	1124 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
    1134:	bc10      	pop	{r4}
    1136:	4770      	bx	lr

00001138 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
    1138:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    113c:	b933      	cbnz	r3, 114c <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
    113e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		maintenanceIsConnected = true;
    1142:	2301      	movs	r3, #1
    1144:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		bSendNotifications = true;
    1148:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
    114c:	f890 0150 	ldrb.w	r0, [r0, #336]	; 0x150
    1150:	4770      	bx	lr

00001152 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
    1152:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
    1154:	0855      	lsrs	r5, r2, #1
    1156:	d007      	beq.n	1168 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
    1158:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
    115a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    115e:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
    1160:	3401      	adds	r4, #1
    1162:	b2a4      	uxth	r4, r4
    1164:	42ac      	cmp	r4, r5
    1166:	dbf8      	blt.n	115a <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
    1168:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
    116c:	bf1d      	ittte	ne
    116e:	189b      	addne	r3, r3, r2
    1170:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
    1174:	4048      	eorne	r0, r1
    1176:	4608      	moveq	r0, r1

	return checksum;
	}
    1178:	bc30      	pop	{r4, r5}
    117a:	4770      	bx	lr

0000117c <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
    117c:	b538      	push	{r3, r4, r5, lr}
    117e:	4604      	mov	r4, r0
	checksum=0;
    1180:	2500      	movs	r5, #0
    1182:	f8a0 5156 	strh.w	r5, [r0, #342]	; 0x156
	checksum = calculateChecksum(0, sizeof(header), &header);
    1186:	460b      	mov	r3, r1
    1188:	2206      	movs	r2, #6
    118a:	4629      	mov	r1, r5
    118c:	4d02      	ldr	r5, [pc, #8]	; (1198 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
    118e:	47a8      	blx	r5
    1190:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
	}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	00001153 	.word	0x00001153

0000119c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
    119c:	4b06      	ldr	r3, [pc, #24]	; (11b8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	600b      	str	r3, [r1, #0]
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
    11a4:	681b      	ldr	r3, [r3, #0]
    11a6:	604b      	str	r3, [r1, #4]
    11a8:	4b05      	ldr	r3, [pc, #20]	; (11c0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	608b      	str	r3, [r1, #8]
    11ae:	4b05      	ldr	r3, [pc, #20]	; (11c4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	60cb      	str	r3, [r1, #12]
    11b4:	4770      	bx	lr
    11b6:	bf00      	nop
    11b8:	41002018 	.word	0x41002018
    11bc:	4100201c 	.word	0x4100201c
    11c0:	41002020 	.word	0x41002020
    11c4:	41002024 	.word	0x41002024

000011c8 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
    11c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ca:	4604      	mov	r4, r0
	ticks=0;
    11cc:	2600      	movs	r6, #0
    11ce:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
	interfaceTimer.Init();
    11d2:	4d14      	ldr	r5, [pc, #80]	; (1224 <_ZN16Maintenance_Tool4InitEv+0x5c>)
    11d4:	4628      	mov	r0, r5
    11d6:	4b14      	ldr	r3, [pc, #80]	; (1228 <_ZN16Maintenance_Tool4InitEv+0x60>)
    11d8:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
    11da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    11de:	4913      	ldr	r1, [pc, #76]	; (122c <_ZN16Maintenance_Tool4InitEv+0x64>)
    11e0:	4628      	mov	r0, r5
    11e2:	4b13      	ldr	r3, [pc, #76]	; (1230 <_ZN16Maintenance_Tool4InitEv+0x68>)
    11e4:	4798      	blx	r3
	InitCommandHandler(localBuffer);
    11e6:	f8d4 1184 	ldr.w	r1, [r4, #388]	; 0x184
    11ea:	4620      	mov	r0, r4
    11ec:	4b11      	ldr	r3, [pc, #68]	; (1234 <_ZN16Maintenance_Tool4InitEv+0x6c>)
    11ee:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
    11f0:	f204 155d 	addw	r5, r4, #349	; 0x15d
    11f4:	4629      	mov	r1, r5
    11f6:	4620      	mov	r0, r4
    11f8:	4b0f      	ldr	r3, [pc, #60]	; (1238 <_ZN16Maintenance_Tool4InitEv+0x70>)
    11fa:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
    11fc:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    1200:	f8d4 715d 	ldr.w	r7, [r4, #349]	; 0x15d
    1204:	f8d4 0161 	ldr.w	r0, [r4, #353]	; 0x161
    1208:	f8d4 1165 	ldr.w	r1, [r4, #357]	; 0x165
    120c:	f8d4 2169 	ldr.w	r2, [r4, #361]	; 0x169
    1210:	601f      	str	r7, [r3, #0]
    1212:	6058      	str	r0, [r3, #4]
    1214:	6099      	str	r1, [r3, #8]
    1216:	60da      	str	r2, [r3, #12]
	gotAccess=false;
    1218:	f884 6151 	strb.w	r6, [r4, #337]	; 0x151
}
    121c:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
    1220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1222:	bf00      	nop
    1224:	20001e78 	.word	0x20001e78
    1228:	000101cd 	.word	0x000101cd
    122c:	00001031 	.word	0x00001031
    1230:	00010309 	.word	0x00010309
    1234:	00000315 	.word	0x00000315
    1238:	0000119d 	.word	0x0000119d

0000123c <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
    123c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1240:	4c31      	ldr	r4, [pc, #196]	; (1308 <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
    1242:	f104 0564 	add.w	r5, r4, #100	; 0x64
    1246:	4931      	ldr	r1, [pc, #196]	; (130c <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
    1248:	4628      	mov	r0, r5
    124a:	4f31      	ldr	r7, [pc, #196]	; (1310 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
    124c:	47b8      	blx	r7
    124e:	4e31      	ldr	r6, [pc, #196]	; (1314 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
    1250:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 134c <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
    1254:	4632      	mov	r2, r6
    1256:	4641      	mov	r1, r8
    1258:	4628      	mov	r0, r5
    125a:	4d2f      	ldr	r5, [pc, #188]	; (1318 <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
    125c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    125e:	f104 0984 	add.w	r9, r4, #132	; 0x84
    1262:	492e      	ldr	r1, [pc, #184]	; (131c <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
    1264:	4648      	mov	r0, r9
    1266:	47b8      	blx	r7
    1268:	4632      	mov	r2, r6
    126a:	4641      	mov	r1, r8
    126c:	4648      	mov	r0, r9
    126e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    1270:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
    1274:	492a      	ldr	r1, [pc, #168]	; (1320 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
    1276:	4648      	mov	r0, r9
    1278:	47b8      	blx	r7
    127a:	4632      	mov	r2, r6
    127c:	4641      	mov	r1, r8
    127e:	4648      	mov	r0, r9
    1280:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1282:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
    1286:	4927      	ldr	r1, [pc, #156]	; (1324 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
    1288:	4648      	mov	r0, r9
    128a:	47b8      	blx	r7
    128c:	4632      	mov	r2, r6
    128e:	4641      	mov	r1, r8
    1290:	4648      	mov	r0, r9
    1292:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    1294:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
    1298:	4923      	ldr	r1, [pc, #140]	; (1328 <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
    129a:	4648      	mov	r0, r9
    129c:	47b8      	blx	r7
    129e:	4632      	mov	r2, r6
    12a0:	4641      	mov	r1, r8
    12a2:	4648      	mov	r0, r9
    12a4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    12a6:	f504 7982 	add.w	r9, r4, #260	; 0x104
    12aa:	4920      	ldr	r1, [pc, #128]	; (132c <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
    12ac:	4648      	mov	r0, r9
    12ae:	47b8      	blx	r7
    12b0:	4632      	mov	r2, r6
    12b2:	4641      	mov	r1, r8
    12b4:	4648      	mov	r0, r9
    12b6:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    12b8:	f104 0904 	add.w	r9, r4, #4
    12bc:	491c      	ldr	r1, [pc, #112]	; (1330 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
    12be:	4648      	mov	r0, r9
    12c0:	47b8      	blx	r7
    12c2:	4632      	mov	r2, r6
    12c4:	4641      	mov	r1, r8
    12c6:	4648      	mov	r0, r9
    12c8:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    12ca:	f504 7992 	add.w	r9, r4, #292	; 0x124
    12ce:	4919      	ldr	r1, [pc, #100]	; (1334 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
    12d0:	4648      	mov	r0, r9
    12d2:	47b8      	blx	r7
    12d4:	4632      	mov	r2, r6
    12d6:	4641      	mov	r1, r8
    12d8:	4648      	mov	r0, r9
    12da:	47a8      	blx	r5
    12dc:	f504 77a2 	add.w	r7, r4, #324	; 0x144
    12e0:	4915      	ldr	r1, [pc, #84]	; (1338 <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
    12e2:	4638      	mov	r0, r7
    12e4:	4b15      	ldr	r3, [pc, #84]	; (133c <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
    12e6:	4798      	blx	r3
    12e8:	4632      	mov	r2, r6
    12ea:	4915      	ldr	r1, [pc, #84]	; (1340 <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
    12ec:	4638      	mov	r0, r7
    12ee:	47a8      	blx	r5
    12f0:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
    12f4:	4620      	mov	r0, r4
    12f6:	4b13      	ldr	r3, [pc, #76]	; (1344 <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
    12f8:	4798      	blx	r3
    12fa:	4632      	mov	r2, r6
    12fc:	4912      	ldr	r1, [pc, #72]	; (1348 <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
    12fe:	4620      	mov	r0, r4
    1300:	47a8      	blx	r5
    1302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1306:	bf00      	nop
    1308:	20001e74 	.word	0x20001e74
    130c:	2000deb0 	.word	0x2000deb0
    1310:	000100e1 	.word	0x000100e1
    1314:	20000000 	.word	0x20000000
    1318:	00019fb9 	.word	0x00019fb9
    131c:	2000df44 	.word	0x2000df44
    1320:	2000e068 	.word	0x2000e068
    1324:	2000df64 	.word	0x2000df64
    1328:	2000e028 	.word	0x2000e028
    132c:	2000e048 	.word	0x2000e048
    1330:	2000df20 	.word	0x2000df20
    1334:	2000dfc0 	.word	0x2000dfc0
    1338:	2000dfe0 	.word	0x2000dfe0
    133c:	0000fa29 	.word	0x0000fa29
    1340:	0000fa45 	.word	0x0000fa45
    1344:	000010a1 	.word	0x000010a1
    1348:	00001055 	.word	0x00001055
    134c:	00010119 	.word	0x00010119

00001350 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
    1350:	b538      	push	{r3, r4, r5, lr}
    1352:	4605      	mov	r5, r0
    1354:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
    1356:	4b05      	ldr	r3, [pc, #20]	; (136c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
    1358:	4798      	blx	r3
    135a:	f8a5 0156 	strh.w	r0, [r5, #342]	; 0x156
	usb.writeData(&header, sizeof(header));
    135e:	2206      	movs	r2, #6
    1360:	4621      	mov	r1, r4
    1362:	4803      	ldr	r0, [pc, #12]	; (1370 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
    1364:	4b03      	ldr	r3, [pc, #12]	; (1374 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
    1366:	4798      	blx	r3
    1368:	bd38      	pop	{r3, r4, r5, pc}
    136a:	bf00      	nop
    136c:	0000117d 	.word	0x0000117d
    1370:	20003444 	.word	0x20003444
    1374:	00010a79 	.word	0x00010a79

00001378 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
    1378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
    137c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    1380:	2b4d      	cmp	r3, #77	; 0x4d
    1382:	bf0c      	ite	eq
    1384:	2501      	moveq	r5, #1
    1386:	2500      	movne	r5, #0
	if (result){
    1388:	d002      	beq.n	1390 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
    138a:	4628      	mov	r0, r5
    138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
    1390:	4b18      	ldr	r3, [pc, #96]	; (13f4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    1392:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
    1396:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
    139a:	4a17      	ldr	r2, [pc, #92]	; (13f8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    139c:	601a      	str	r2, [r3, #0]
    139e:	2200      	movs	r2, #0
    13a0:	711a      	strb	r2, [r3, #4]
    13a2:	224d      	movs	r2, #77	; 0x4d
    13a4:	715a      	strb	r2, [r3, #5]
    13a6:	f883 8006 	strb.w	r8, [r3, #6]
    13aa:	2307      	movs	r3, #7
    13ac:	4911      	ldr	r1, [pc, #68]	; (13f4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    13ae:	f103 0261 	add.w	r2, r3, #97	; 0x61
    13b2:	440a      	add	r2, r1
    13b4:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
    13b8:	f852 4f04 	ldr.w	r4, [r2, #4]!
    13bc:	f8d0 6184 	ldr.w	r6, [r0, #388]	; 0x184
    13c0:	50f4      	str	r4, [r6, r3]
    13c2:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
    13c4:	42bb      	cmp	r3, r7
    13c6:	d1f7      	bne.n	13b8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
    13c8:	2b37      	cmp	r3, #55	; 0x37
    13ca:	d1f0      	bne.n	13ae <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
    13cc:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    13ce:	2240      	movs	r2, #64	; 0x40
    13d0:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    13d4:	4809      	ldr	r0, [pc, #36]	; (13fc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
    13d6:	4b0a      	ldr	r3, [pc, #40]	; (1400 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
    13d8:	4798      	blx	r3
		singleTaskMessage=singleTask;
    13da:	4b07      	ldr	r3, [pc, #28]	; (13f8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    13dc:	f8c4 317a 	str.w	r3, [r4, #378]	; 0x17a
    13e0:	2200      	movs	r2, #0
    13e2:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
    13e6:	234d      	movs	r3, #77	; 0x4d
    13e8:	f884 317f 	strb.w	r3, [r4, #383]	; 0x17f
    13ec:	f884 8180 	strb.w	r8, [r4, #384]	; 0x180
    13f0:	e7cb      	b.n	138a <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
    13f2:	bf00      	nop
    13f4:	2000cde4 	.word	0x2000cde4
    13f8:	61626364 	.word	0x61626364
    13fc:	20003444 	.word	0x20003444
    1400:	00010b11 	.word	0x00010b11

00001404 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    1408:	f100 05ec 	add.w	r5, r0, #236	; 0xec
    140c:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
    1410:	681a      	ldr	r2, [r3, #0]
    1412:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
    1416:	889b      	ldrh	r3, [r3, #4]
    1418:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    141a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    141e:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    1420:	b2db      	uxtb	r3, r3
    1422:	2b1c      	cmp	r3, #28
    1424:	d81b      	bhi.n	145e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x5a>
		gotTask=true;
    1426:	2301      	movs	r3, #1
    1428:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		result=gotTask;
    142c:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
		switch (header.task)
    1430:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    1434:	3b41      	subs	r3, #65	; 0x41
    1436:	2b1c      	cmp	r3, #28
    1438:	f200 809a 	bhi.w	1570 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x16c>
    143c:	e8df f003 	tbb	[pc, r3]
    1440:	2f1f2922 	.word	0x2f1f2922
    1444:	3e381f1f 	.word	0x3e381f1f
    1448:	746e504a 	.word	0x746e504a
    144c:	928c8680 	.word	0x928c8680
    1450:	68565c7a 	.word	0x68565c7a
    1454:	1f449862 	.word	0x1f449862
    1458:	98981f1f 	.word	0x98981f1f
    145c:	1f          	.byte	0x1f
    145d:	00          	.byte	0x00
		gotTask=false;
    145e:	2300      	movs	r3, #0
    1460:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    1464:	4e44      	ldr	r6, [pc, #272]	; (1578 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x174>)
    1466:	2240      	movs	r2, #64	; 0x40
    1468:	f500 71c2 	add.w	r1, r0, #388	; 0x184
    146c:	4630      	mov	r0, r6
    146e:	4b43      	ldr	r3, [pc, #268]	; (157c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x178>)
    1470:	4798      	blx	r3
		result=usb.rxReady;
    1472:	7d73      	ldrb	r3, [r6, #21]
    1474:	b2db      	uxtb	r3, r3
    1476:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
	if (result)
    147a:	2b00      	cmp	r3, #0
    147c:	d1d8      	bne.n	1430 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    147e:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
    1482:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    1484:	4629      	mov	r1, r5
    1486:	4620      	mov	r0, r4
    1488:	4b3d      	ldr	r3, [pc, #244]	; (1580 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x17c>)
    148a:	4798      	blx	r3
    148c:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    1490:	e7f5      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
	maintenanceIsConnected = false;
    1492:	2300      	movs	r3, #0
    1494:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	bSendNotifications = false;
    1498:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
				break;
    149c:	e7ef      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				notifyGAINCommandReceived( header, result);
    149e:	2201      	movs	r2, #1
    14a0:	4629      	mov	r1, r5
    14a2:	4620      	mov	r0, r4
    14a4:	4b37      	ldr	r3, [pc, #220]	; (1584 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x180>)
    14a6:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    14a8:	2301      	movs	r3, #1
    14aa:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
				break;
    14ae:	e7e6      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandWriteParameters();
    14b0:	4620      	mov	r0, r4
    14b2:	4b35      	ldr	r3, [pc, #212]	; (1588 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x184>)
    14b4:	4798      	blx	r3
    14b6:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    14ba:	e7e0      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadParameters();
    14bc:	4620      	mov	r0, r4
    14be:	4b33      	ldr	r3, [pc, #204]	; (158c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x188>)
    14c0:	4798      	blx	r3
    14c2:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    14c6:	e7da      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadDataLogger();
    14c8:	4620      	mov	r0, r4
    14ca:	4b31      	ldr	r3, [pc, #196]	; (1590 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x18c>)
    14cc:	4798      	blx	r3
    14ce:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    14d2:	e7d4      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetHeaters();
    14d4:	4620      	mov	r0, r4
    14d6:	4b2f      	ldr	r3, [pc, #188]	; (1594 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x190>)
    14d8:	4798      	blx	r3
    14da:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    14de:	e7ce      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadHeaterStatus();
    14e0:	4620      	mov	r0, r4
    14e2:	4b2d      	ldr	r3, [pc, #180]	; (1598 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x194>)
    14e4:	4798      	blx	r3
    14e6:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    14ea:	e7c8      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetScavenge();
    14ec:	4620      	mov	r0, r4
    14ee:	4b2b      	ldr	r3, [pc, #172]	; (159c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x198>)
    14f0:	4798      	blx	r3
    14f2:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    14f6:	e7c2      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadScavengeStatus();
    14f8:	4620      	mov	r0, r4
    14fa:	4b29      	ldr	r3, [pc, #164]	; (15a0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x19c>)
    14fc:	4798      	blx	r3
    14fe:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    1502:	e7bc      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetCompressor();
    1504:	4620      	mov	r0, r4
    1506:	4b27      	ldr	r3, [pc, #156]	; (15a4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a0>)
    1508:	4798      	blx	r3
    150a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    150e:	e7b6      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadCompressorStatus();
    1510:	4620      	mov	r0, r4
    1512:	4b25      	ldr	r3, [pc, #148]	; (15a8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a4>)
    1514:	4798      	blx	r3
    1516:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    151a:	e7b0      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetEnableFans();
    151c:	4620      	mov	r0, r4
    151e:	4b23      	ldr	r3, [pc, #140]	; (15ac <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a8>)
    1520:	4798      	blx	r3
    1522:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    1526:	e7aa      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetPWMFans();
    1528:	4620      	mov	r0, r4
    152a:	4b21      	ldr	r3, [pc, #132]	; (15b0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1ac>)
    152c:	4798      	blx	r3
    152e:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    1532:	e7a4      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandFansStatus();
    1534:	4620      	mov	r0, r4
    1536:	4b1f      	ldr	r3, [pc, #124]	; (15b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b0>)
    1538:	4798      	blx	r3
    153a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    153e:	e79e      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadTemmperatures();
    1540:	4620      	mov	r0, r4
    1542:	4b1d      	ldr	r3, [pc, #116]	; (15b8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b4>)
    1544:	4798      	blx	r3
    1546:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    154a:	e798      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadFlapperData();
    154c:	4620      	mov	r0, r4
    154e:	4b1b      	ldr	r3, [pc, #108]	; (15bc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b8>)
    1550:	4798      	blx	r3
    1552:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    1556:	e792      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperValve();
    1558:	4620      	mov	r0, r4
    155a:	4b19      	ldr	r3, [pc, #100]	; (15c0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1bc>)
    155c:	4798      	blx	r3
    155e:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    1562:	e78c      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperPosition();
    1564:	4620      	mov	r0, r4
    1566:	4b17      	ldr	r3, [pc, #92]	; (15c4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1c0>)
    1568:	4798      	blx	r3
    156a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    156e:	e786      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = false;
    1570:	2300      	movs	r3, #0
    1572:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
				break;
    1576:	e782      	b.n	147e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
    1578:	20003444 	.word	0x20003444
    157c:	0001098d 	.word	0x0001098d
    1580:	00001139 	.word	0x00001139
    1584:	00001351 	.word	0x00001351
    1588:	00000535 	.word	0x00000535
    158c:	000008f5 	.word	0x000008f5
    1590:	0000097d 	.word	0x0000097d
    1594:	0000056d 	.word	0x0000056d
    1598:	00000a79 	.word	0x00000a79
    159c:	000005e5 	.word	0x000005e5
    15a0:	00000ad9 	.word	0x00000ad9
    15a4:	00000625 	.word	0x00000625
    15a8:	00000b35 	.word	0x00000b35
    15ac:	000003a9 	.word	0x000003a9
    15b0:	000003d5 	.word	0x000003d5
    15b4:	000007c9 	.word	0x000007c9
    15b8:	00001379 	.word	0x00001379
    15bc:	00000829 	.word	0x00000829
    15c0:	0000043d 	.word	0x0000043d
    15c4:	000004b5 	.word	0x000004b5

000015c8 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    15c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ca:	4604      	mov	r4, r0
	result=false;
    15cc:	2300      	movs	r3, #0
    15ce:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	if (gotAccess)
    15d2:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    15d6:	2b00      	cmp	r3, #0
    15d8:	d050      	beq.n	167c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>
		if (usb.rxReady)
    15da:	4b2a      	ldr	r3, [pc, #168]	; (1684 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    15dc:	7d5b      	ldrb	r3, [r3, #21]
    15de:	b95b      	cbnz	r3, 15f8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    15e0:	2300      	movs	r3, #0
    15e2:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    15e6:	2240      	movs	r2, #64	; 0x40
    15e8:	f8d4 1184 	ldr.w	r1, [r4, #388]	; 0x184
    15ec:	4825      	ldr	r0, [pc, #148]	; (1684 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    15ee:	4b26      	ldr	r3, [pc, #152]	; (1688 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    15f0:	4798      	blx	r3
	}
    15f2:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
    15f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    15f8:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
    15fc:	681a      	ldr	r2, [r3, #0]
    15fe:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
    1602:	889b      	ldrh	r3, [r3, #4]
    1604:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
			switch (input){
    1608:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
    160c:	2b3d      	cmp	r3, #61	; 0x3d
    160e:	d017      	beq.n	1640 <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    1610:	2b3e      	cmp	r3, #62	; 0x3e
    1612:	d010      	beq.n	1636 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    1614:	2b3c      	cmp	r3, #60	; 0x3c
    1616:	d003      	beq.n	1620 <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    1618:	2300      	movs	r3, #0
    161a:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
				break;
    161e:	e006      	b.n	162e <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    1620:	2301      	movs	r3, #1
    1622:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
					result = handleHVACTask();
    1626:	4b19      	ldr	r3, [pc, #100]	; (168c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1628:	4798      	blx	r3
    162a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
			ClearLocalBuffer();
    162e:	4620      	mov	r0, r4
    1630:	4b17      	ldr	r3, [pc, #92]	; (1690 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    1632:	4798      	blx	r3
    1634:	e7d7      	b.n	15e6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    1636:	4b15      	ldr	r3, [pc, #84]	; (168c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1638:	4798      	blx	r3
    163a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
				break;
    163e:	e7f6      	b.n	162e <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    1640:	2501      	movs	r5, #1
    1642:	f880 5098 	strb.w	r5, [r0, #152]	; 0x98
					interfaceTimer.Stop();
    1646:	4e13      	ldr	r6, [pc, #76]	; (1694 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    1648:	4630      	mov	r0, r6
    164a:	4b13      	ldr	r3, [pc, #76]	; (1698 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    164c:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    164e:	4f13      	ldr	r7, [pc, #76]	; (169c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    1650:	4639      	mov	r1, r7
    1652:	4630      	mov	r0, r6
    1654:	4b12      	ldr	r3, [pc, #72]	; (16a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    1656:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1658:	f242 7210 	movw	r2, #10000	; 0x2710
    165c:	4639      	mov	r1, r7
    165e:	4630      	mov	r0, r6
    1660:	4b10      	ldr	r3, [pc, #64]	; (16a4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    1662:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1664:	2300      	movs	r3, #0
    1666:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
					maintenanceIsConnected = true;
    166a:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
					bSendNotifications = true;
    166e:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
					result=is_MTPC_Beaming;
    1672:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    1676:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
				break;
    167a:	e7d8      	b.n	162e <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    167c:	2300      	movs	r3, #0
    167e:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
    1682:	e7b6      	b.n	15f2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    1684:	20003444 	.word	0x20003444
    1688:	0001098d 	.word	0x0001098d
    168c:	00001405 	.word	0x00001405
    1690:	0000111d 	.word	0x0000111d
    1694:	20001e78 	.word	0x20001e78
    1698:	00010241 	.word	0x00010241
    169c:	00001045 	.word	0x00001045
    16a0:	0001035d 	.word	0x0001035d
    16a4:	000103b5 	.word	0x000103b5

000016a8 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    16a8:	b510      	push	{r4, lr}
    16aa:	4604      	mov	r4, r0
	result=false;
    16ac:	2300      	movs	r3, #0
    16ae:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	magic=0;
    16b2:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
	if (gotAccess==true)
    16b6:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    16ba:	b12b      	cbz	r3, 16c8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    16bc:	2301      	movs	r3, #1
    16be:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	return	result;
    16c2:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
}
    16c6:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    16c8:	4b15      	ldr	r3, [pc, #84]	; (1720 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    16ca:	7d5b      	ldrb	r3, [r3, #21]
    16cc:	b1b3      	cbz	r3, 16fc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
    16ce:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
    16d2:	1e41      	subs	r1, r0, #1
    16d4:	3003      	adds	r0, #3
				magic=magic<<8;
    16d6:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    16da:	021b      	lsls	r3, r3, #8
    16dc:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
				magic|= localBuffer[i];
    16e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    16e4:	4313      	orrs	r3, r2
    16e6:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
			for (int i = 0; i < 4; i++)
    16ea:	4281      	cmp	r1, r0
    16ec:	d1f3      	bne.n	16d6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    16ee:	4a0d      	ldr	r2, [pc, #52]	; (1724 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    16f0:	ea83 0102 	eor.w	r1, r3, r2
    16f4:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
			if (xorResult==0)
    16f8:	4293      	cmp	r3, r2
    16fa:	d006      	beq.n	170a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    16fc:	2240      	movs	r2, #64	; 0x40
    16fe:	f8d4 1184 	ldr.w	r1, [r4, #388]	; 0x184
    1702:	4807      	ldr	r0, [pc, #28]	; (1720 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    1704:	4b08      	ldr	r3, [pc, #32]	; (1728 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
    1706:	4798      	blx	r3
    1708:	e7db      	b.n	16c2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    170a:	2301      	movs	r3, #1
    170c:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
				result=true;
    1710:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
				is_MTPC_Beaming=true;
    1714:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
				return	handleCommunication();
    1718:	4620      	mov	r0, r4
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
    171c:	4798      	blx	r3
    171e:	bd10      	pop	{r4, pc}
    1720:	20003444 	.word	0x20003444
    1724:	61626364 	.word	0x61626364
    1728:	0001098d 	.word	0x0001098d
    172c:	000015c9 	.word	0x000015c9

00001730 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1730:	b580      	push	{r7, lr}
    1732:	af00      	add	r7, sp, #0
	system_init();
    1734:	4b03      	ldr	r3, [pc, #12]	; (1744 <atmel_start_init+0x14>)
    1736:	4798      	blx	r3
	usb_init();
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <atmel_start_init+0x18>)
    173a:	4798      	blx	r3
	spi_nor_flash_init();
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <atmel_start_init+0x1c>)
    173e:	4798      	blx	r3
}
    1740:	bf00      	nop
    1742:	bd80      	pop	{r7, pc}
    1744:	00002b31 	.word	0x00002b31
    1748:	0000cfd1 	.word	0x0000cfd1
    174c:	0000cf65 	.word	0x0000cf65

00001750 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1750:	b480      	push	{r7}
    1752:	b085      	sub	sp, #20
    1754:	af00      	add	r7, sp, #0
    1756:	60f8      	str	r0, [r7, #12]
    1758:	460b      	mov	r3, r1
    175a:	607a      	str	r2, [r7, #4]
    175c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    175e:	7afa      	ldrb	r2, [r7, #11]
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	3220      	adds	r2, #32
    1764:	6879      	ldr	r1, [r7, #4]
    1766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    176a:	bf00      	nop
    176c:	3714      	adds	r7, #20
    176e:	46bd      	mov	sp, r7
    1770:	f85d 7b04 	ldr.w	r7, [sp], #4
    1774:	4770      	bx	lr

00001776 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    1776:	b480      	push	{r7}
    1778:	b083      	sub	sp, #12
    177a:	af00      	add	r7, sp, #0
    177c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	691b      	ldr	r3, [r3, #16]
    1782:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    178a:	bf00      	nop
    178c:	370c      	adds	r7, #12
    178e:	46bd      	mov	sp, r7
    1790:	f85d 7b04 	ldr.w	r7, [sp], #4
    1794:	4770      	bx	lr

00001796 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    1796:	b480      	push	{r7}
    1798:	b083      	sub	sp, #12
    179a:	af00      	add	r7, sp, #0
    179c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	691b      	ldr	r3, [r3, #16]
    17a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    17aa:	bf00      	nop
    17ac:	370c      	adds	r7, #12
    17ae:	46bd      	mov	sp, r7
    17b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    17b4:	4770      	bx	lr

000017b6 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    17b6:	b480      	push	{r7}
    17b8:	b083      	sub	sp, #12
    17ba:	af00      	add	r7, sp, #0
    17bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	691b      	ldr	r3, [r3, #16]
    17c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    17ca:	bf00      	nop
    17cc:	370c      	adds	r7, #12
    17ce:	46bd      	mov	sp, r7
    17d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    17d4:	4770      	bx	lr

000017d6 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    17d6:	b480      	push	{r7}
    17d8:	b083      	sub	sp, #12
    17da:	af00      	add	r7, sp, #0
    17dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	691b      	ldr	r3, [r3, #16]
    17e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    17ea:	bf00      	nop
    17ec:	370c      	adds	r7, #12
    17ee:	46bd      	mov	sp, r7
    17f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    17f4:	4770      	bx	lr

000017f6 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    17f6:	b480      	push	{r7}
    17f8:	b083      	sub	sp, #12
    17fa:	af00      	add	r7, sp, #0
    17fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	695b      	ldr	r3, [r3, #20]
    1802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    180a:	bf00      	nop
    180c:	370c      	adds	r7, #12
    180e:	46bd      	mov	sp, r7
    1810:	f85d 7b04 	ldr.w	r7, [sp], #4
    1814:	4770      	bx	lr

00001816 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    1816:	b480      	push	{r7}
    1818:	b083      	sub	sp, #12
    181a:	af00      	add	r7, sp, #0
    181c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	695b      	ldr	r3, [r3, #20]
    1822:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    182a:	bf00      	nop
    182c:	370c      	adds	r7, #12
    182e:	46bd      	mov	sp, r7
    1830:	f85d 7b04 	ldr.w	r7, [sp], #4
    1834:	4770      	bx	lr

00001836 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    1836:	b480      	push	{r7}
    1838:	b083      	sub	sp, #12
    183a:	af00      	add	r7, sp, #0
    183c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	695b      	ldr	r3, [r3, #20]
    1842:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    184a:	bf00      	nop
    184c:	370c      	adds	r7, #12
    184e:	46bd      	mov	sp, r7
    1850:	f85d 7b04 	ldr.w	r7, [sp], #4
    1854:	4770      	bx	lr

00001856 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    1856:	b480      	push	{r7}
    1858:	b083      	sub	sp, #12
    185a:	af00      	add	r7, sp, #0
    185c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	695b      	ldr	r3, [r3, #20]
    1862:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    186a:	bf00      	nop
    186c:	370c      	adds	r7, #12
    186e:	46bd      	mov	sp, r7
    1870:	f85d 7b04 	ldr.w	r7, [sp], #4
    1874:	4770      	bx	lr

00001876 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    1876:	b480      	push	{r7}
    1878:	b083      	sub	sp, #12
    187a:	af00      	add	r7, sp, #0
    187c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	699b      	ldr	r3, [r3, #24]
    1882:	f043 0201 	orr.w	r2, r3, #1
    1886:	687b      	ldr	r3, [r7, #4]
    1888:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    188a:	bf00      	nop
    188c:	370c      	adds	r7, #12
    188e:	46bd      	mov	sp, r7
    1890:	f85d 7b04 	ldr.w	r7, [sp], #4
    1894:	4770      	bx	lr

00001896 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    1896:	b480      	push	{r7}
    1898:	b083      	sub	sp, #12
    189a:	af00      	add	r7, sp, #0
    189c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	699b      	ldr	r3, [r3, #24]
    18a2:	f043 0202 	orr.w	r2, r3, #2
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18aa:	bf00      	nop
    18ac:	370c      	adds	r7, #12
    18ae:	46bd      	mov	sp, r7
    18b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    18b4:	4770      	bx	lr

000018b6 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    18b6:	b480      	push	{r7}
    18b8:	b083      	sub	sp, #12
    18ba:	af00      	add	r7, sp, #0
    18bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	699b      	ldr	r3, [r3, #24]
    18c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18ca:	bf00      	nop
    18cc:	370c      	adds	r7, #12
    18ce:	46bd      	mov	sp, r7
    18d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d4:	4770      	bx	lr

000018d6 <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
    18d6:	b480      	push	{r7}
    18d8:	b083      	sub	sp, #12
    18da:	af00      	add	r7, sp, #0
    18dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	699b      	ldr	r3, [r3, #24]
    18e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18ea:	bf00      	nop
    18ec:	370c      	adds	r7, #12
    18ee:	46bd      	mov	sp, r7
    18f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f4:	4770      	bx	lr

000018f6 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    18f6:	b480      	push	{r7}
    18f8:	b083      	sub	sp, #12
    18fa:	af00      	add	r7, sp, #0
    18fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    18fe:	687b      	ldr	r3, [r7, #4]
    1900:	699b      	ldr	r3, [r3, #24]
    1902:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    190a:	bf00      	nop
    190c:	370c      	adds	r7, #12
    190e:	46bd      	mov	sp, r7
    1910:	f85d 7b04 	ldr.w	r7, [sp], #4
    1914:	4770      	bx	lr

00001916 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    1916:	b480      	push	{r7}
    1918:	b083      	sub	sp, #12
    191a:	af00      	add	r7, sp, #0
    191c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    191e:	687b      	ldr	r3, [r7, #4]
    1920:	699b      	ldr	r3, [r3, #24]
    1922:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    192a:	bf00      	nop
    192c:	370c      	adds	r7, #12
    192e:	46bd      	mov	sp, r7
    1930:	f85d 7b04 	ldr.w	r7, [sp], #4
    1934:	4770      	bx	lr

00001936 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    1936:	b480      	push	{r7}
    1938:	b083      	sub	sp, #12
    193a:	af00      	add	r7, sp, #0
    193c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	699b      	ldr	r3, [r3, #24]
    1942:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    194a:	bf00      	nop
    194c:	370c      	adds	r7, #12
    194e:	46bd      	mov	sp, r7
    1950:	f85d 7b04 	ldr.w	r7, [sp], #4
    1954:	4770      	bx	lr

00001956 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    1956:	b480      	push	{r7}
    1958:	b083      	sub	sp, #12
    195a:	af00      	add	r7, sp, #0
    195c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	69db      	ldr	r3, [r3, #28]
    1962:	f043 0208 	orr.w	r2, r3, #8
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    196a:	bf00      	nop
    196c:	370c      	adds	r7, #12
    196e:	46bd      	mov	sp, r7
    1970:	f85d 7b04 	ldr.w	r7, [sp], #4
    1974:	4770      	bx	lr

00001976 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1976:	b480      	push	{r7}
    1978:	b083      	sub	sp, #12
    197a:	af00      	add	r7, sp, #0
    197c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	69db      	ldr	r3, [r3, #28]
    1982:	f043 0220 	orr.w	r2, r3, #32
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    198a:	bf00      	nop
    198c:	370c      	adds	r7, #12
    198e:	46bd      	mov	sp, r7
    1990:	f85d 7b04 	ldr.w	r7, [sp], #4
    1994:	4770      	bx	lr

00001996 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1996:	b480      	push	{r7}
    1998:	b083      	sub	sp, #12
    199a:	af00      	add	r7, sp, #0
    199c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    199e:	687b      	ldr	r3, [r7, #4]
    19a0:	69db      	ldr	r3, [r3, #28]
    19a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19aa:	bf00      	nop
    19ac:	370c      	adds	r7, #12
    19ae:	46bd      	mov	sp, r7
    19b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b4:	4770      	bx	lr

000019b6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    19b6:	b480      	push	{r7}
    19b8:	b083      	sub	sp, #12
    19ba:	af00      	add	r7, sp, #0
    19bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	69db      	ldr	r3, [r3, #28]
    19c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19ca:	bf00      	nop
    19cc:	370c      	adds	r7, #12
    19ce:	46bd      	mov	sp, r7
    19d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d4:	4770      	bx	lr

000019d6 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    19d6:	b480      	push	{r7}
    19d8:	b083      	sub	sp, #12
    19da:	af00      	add	r7, sp, #0
    19dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	6a1b      	ldr	r3, [r3, #32]
    19e2:	f043 0201 	orr.w	r2, r3, #1
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19ea:	bf00      	nop
    19ec:	370c      	adds	r7, #12
    19ee:	46bd      	mov	sp, r7
    19f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f4:	4770      	bx	lr

000019f6 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    19f6:	b480      	push	{r7}
    19f8:	b083      	sub	sp, #12
    19fa:	af00      	add	r7, sp, #0
    19fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	6a1b      	ldr	r3, [r3, #32]
    1a02:	f043 0202 	orr.w	r2, r3, #2
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a0a:	bf00      	nop
    1a0c:	370c      	adds	r7, #12
    1a0e:	46bd      	mov	sp, r7
    1a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a14:	4770      	bx	lr

00001a16 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1a16:	b480      	push	{r7}
    1a18:	b083      	sub	sp, #12
    1a1a:	af00      	add	r7, sp, #0
    1a1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	6a1b      	ldr	r3, [r3, #32]
    1a22:	f043 0204 	orr.w	r2, r3, #4
    1a26:	687b      	ldr	r3, [r7, #4]
    1a28:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a2a:	bf00      	nop
    1a2c:	370c      	adds	r7, #12
    1a2e:	46bd      	mov	sp, r7
    1a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a34:	4770      	bx	lr

00001a36 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    1a36:	b480      	push	{r7}
    1a38:	b083      	sub	sp, #12
    1a3a:	af00      	add	r7, sp, #0
    1a3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	6a1b      	ldr	r3, [r3, #32]
    1a42:	f043 0208 	orr.w	r2, r3, #8
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a4a:	bf00      	nop
    1a4c:	370c      	adds	r7, #12
    1a4e:	46bd      	mov	sp, r7
    1a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a54:	4770      	bx	lr

00001a56 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1a56:	b480      	push	{r7}
    1a58:	b083      	sub	sp, #12
    1a5a:	af00      	add	r7, sp, #0
    1a5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	6a1b      	ldr	r3, [r3, #32]
    1a62:	f043 0220 	orr.w	r2, r3, #32
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a6a:	bf00      	nop
    1a6c:	370c      	adds	r7, #12
    1a6e:	46bd      	mov	sp, r7
    1a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a74:	4770      	bx	lr

00001a76 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1a76:	b480      	push	{r7}
    1a78:	b083      	sub	sp, #12
    1a7a:	af00      	add	r7, sp, #0
    1a7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	6a1b      	ldr	r3, [r3, #32]
    1a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a8a:	bf00      	nop
    1a8c:	370c      	adds	r7, #12
    1a8e:	46bd      	mov	sp, r7
    1a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a94:	4770      	bx	lr

00001a96 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1a96:	b480      	push	{r7}
    1a98:	b085      	sub	sp, #20
    1a9a:	af00      	add	r7, sp, #0
    1a9c:	60f8      	str	r0, [r7, #12]
    1a9e:	460b      	mov	r3, r1
    1aa0:	607a      	str	r2, [r7, #4]
    1aa2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1aa4:	7afb      	ldrb	r3, [r7, #11]
    1aa6:	68fa      	ldr	r2, [r7, #12]
    1aa8:	01db      	lsls	r3, r3, #7
    1aaa:	4413      	add	r3, r2
    1aac:	3308      	adds	r3, #8
    1aae:	687a      	ldr	r2, [r7, #4]
    1ab0:	601a      	str	r2, [r3, #0]
}
    1ab2:	bf00      	nop
    1ab4:	3714      	adds	r7, #20
    1ab6:	46bd      	mov	sp, r7
    1ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1abc:	4770      	bx	lr

00001abe <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1abe:	b480      	push	{r7}
    1ac0:	b085      	sub	sp, #20
    1ac2:	af00      	add	r7, sp, #0
    1ac4:	60f8      	str	r0, [r7, #12]
    1ac6:	460b      	mov	r3, r1
    1ac8:	607a      	str	r2, [r7, #4]
    1aca:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1acc:	7afb      	ldrb	r3, [r7, #11]
    1ace:	68fa      	ldr	r2, [r7, #12]
    1ad0:	01db      	lsls	r3, r3, #7
    1ad2:	4413      	add	r3, r2
    1ad4:	3304      	adds	r3, #4
    1ad6:	687a      	ldr	r2, [r7, #4]
    1ad8:	601a      	str	r2, [r3, #0]
}
    1ada:	bf00      	nop
    1adc:	3714      	adds	r7, #20
    1ade:	46bd      	mov	sp, r7
    1ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ae4:	4770      	bx	lr

00001ae6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1ae6:	b480      	push	{r7}
    1ae8:	b085      	sub	sp, #20
    1aea:	af00      	add	r7, sp, #0
    1aec:	60f8      	str	r0, [r7, #12]
    1aee:	460b      	mov	r3, r1
    1af0:	607a      	str	r2, [r7, #4]
    1af2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1af4:	7afb      	ldrb	r3, [r7, #11]
    1af6:	68fa      	ldr	r2, [r7, #12]
    1af8:	01db      	lsls	r3, r3, #7
    1afa:	4413      	add	r3, r2
    1afc:	3318      	adds	r3, #24
    1afe:	687a      	ldr	r2, [r7, #4]
    1b00:	601a      	str	r2, [r3, #0]
}
    1b02:	bf00      	nop
    1b04:	3714      	adds	r7, #20
    1b06:	46bd      	mov	sp, r7
    1b08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b0c:	4770      	bx	lr

00001b0e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1b0e:	b480      	push	{r7}
    1b10:	b085      	sub	sp, #20
    1b12:	af00      	add	r7, sp, #0
    1b14:	60f8      	str	r0, [r7, #12]
    1b16:	460b      	mov	r3, r1
    1b18:	607a      	str	r2, [r7, #4]
    1b1a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b1c:	7afb      	ldrb	r3, [r7, #11]
    1b1e:	68fa      	ldr	r2, [r7, #12]
    1b20:	01db      	lsls	r3, r3, #7
    1b22:	4413      	add	r3, r2
    1b24:	3314      	adds	r3, #20
    1b26:	687a      	ldr	r2, [r7, #4]
    1b28:	601a      	str	r2, [r3, #0]
}
    1b2a:	bf00      	nop
    1b2c:	3714      	adds	r7, #20
    1b2e:	46bd      	mov	sp, r7
    1b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b34:	4770      	bx	lr

00001b36 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1b36:	b480      	push	{r7}
    1b38:	b085      	sub	sp, #20
    1b3a:	af00      	add	r7, sp, #0
    1b3c:	6078      	str	r0, [r7, #4]
    1b3e:	4608      	mov	r0, r1
    1b40:	4611      	mov	r1, r2
    1b42:	461a      	mov	r2, r3
    1b44:	4603      	mov	r3, r0
    1b46:	70fb      	strb	r3, [r7, #3]
    1b48:	460b      	mov	r3, r1
    1b4a:	70bb      	strb	r3, [r7, #2]
    1b4c:	4613      	mov	r3, r2
    1b4e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b50:	78fa      	ldrb	r2, [r7, #3]
    1b52:	78bb      	ldrb	r3, [r7, #2]
    1b54:	6879      	ldr	r1, [r7, #4]
    1b56:	01d2      	lsls	r2, r2, #7
    1b58:	440a      	add	r2, r1
    1b5a:	4413      	add	r3, r2
    1b5c:	3330      	adds	r3, #48	; 0x30
    1b5e:	781b      	ldrb	r3, [r3, #0]
    1b60:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1b62:	7bfb      	ldrb	r3, [r7, #15]
    1b64:	f023 030f 	bic.w	r3, r3, #15
    1b68:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1b6a:	787b      	ldrb	r3, [r7, #1]
    1b6c:	f003 030f 	and.w	r3, r3, #15
    1b70:	b2da      	uxtb	r2, r3
    1b72:	7bfb      	ldrb	r3, [r7, #15]
    1b74:	4313      	orrs	r3, r2
    1b76:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b78:	78fa      	ldrb	r2, [r7, #3]
    1b7a:	78bb      	ldrb	r3, [r7, #2]
    1b7c:	6879      	ldr	r1, [r7, #4]
    1b7e:	01d2      	lsls	r2, r2, #7
    1b80:	440a      	add	r2, r1
    1b82:	4413      	add	r3, r2
    1b84:	3330      	adds	r3, #48	; 0x30
    1b86:	7bfa      	ldrb	r2, [r7, #15]
    1b88:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1b8a:	bf00      	nop
    1b8c:	3714      	adds	r7, #20
    1b8e:	46bd      	mov	sp, r7
    1b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b94:	4770      	bx	lr

00001b96 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1b96:	b480      	push	{r7}
    1b98:	b085      	sub	sp, #20
    1b9a:	af00      	add	r7, sp, #0
    1b9c:	6078      	str	r0, [r7, #4]
    1b9e:	4608      	mov	r0, r1
    1ba0:	4611      	mov	r1, r2
    1ba2:	461a      	mov	r2, r3
    1ba4:	4603      	mov	r3, r0
    1ba6:	70fb      	strb	r3, [r7, #3]
    1ba8:	460b      	mov	r3, r1
    1baa:	70bb      	strb	r3, [r7, #2]
    1bac:	4613      	mov	r3, r2
    1bae:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1bb0:	78fa      	ldrb	r2, [r7, #3]
    1bb2:	78bb      	ldrb	r3, [r7, #2]
    1bb4:	6879      	ldr	r1, [r7, #4]
    1bb6:	01d2      	lsls	r2, r2, #7
    1bb8:	440a      	add	r2, r1
    1bba:	4413      	add	r3, r2
    1bbc:	3330      	adds	r3, #48	; 0x30
    1bbe:	781b      	ldrb	r3, [r3, #0]
    1bc0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1bc2:	7bfb      	ldrb	r3, [r7, #15]
    1bc4:	f003 030f 	and.w	r3, r3, #15
    1bc8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1bca:	787b      	ldrb	r3, [r7, #1]
    1bcc:	011b      	lsls	r3, r3, #4
    1bce:	b2da      	uxtb	r2, r3
    1bd0:	7bfb      	ldrb	r3, [r7, #15]
    1bd2:	4313      	orrs	r3, r2
    1bd4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1bd6:	78fa      	ldrb	r2, [r7, #3]
    1bd8:	78bb      	ldrb	r3, [r7, #2]
    1bda:	6879      	ldr	r1, [r7, #4]
    1bdc:	01d2      	lsls	r2, r2, #7
    1bde:	440a      	add	r2, r1
    1be0:	4413      	add	r3, r2
    1be2:	3330      	adds	r3, #48	; 0x30
    1be4:	7bfa      	ldrb	r2, [r7, #15]
    1be6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1be8:	bf00      	nop
    1bea:	3714      	adds	r7, #20
    1bec:	46bd      	mov	sp, r7
    1bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf2:	4770      	bx	lr

00001bf4 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1bf4:	b480      	push	{r7}
    1bf6:	b085      	sub	sp, #20
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
    1bfc:	4608      	mov	r0, r1
    1bfe:	4611      	mov	r1, r2
    1c00:	461a      	mov	r2, r3
    1c02:	4603      	mov	r3, r0
    1c04:	70fb      	strb	r3, [r7, #3]
    1c06:	460b      	mov	r3, r1
    1c08:	70bb      	strb	r3, [r7, #2]
    1c0a:	4613      	mov	r3, r2
    1c0c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c0e:	78fa      	ldrb	r2, [r7, #3]
    1c10:	78bb      	ldrb	r3, [r7, #2]
    1c12:	6879      	ldr	r1, [r7, #4]
    1c14:	01d2      	lsls	r2, r2, #7
    1c16:	440a      	add	r2, r1
    1c18:	4413      	add	r3, r2
    1c1a:	3340      	adds	r3, #64	; 0x40
    1c1c:	781b      	ldrb	r3, [r3, #0]
    1c1e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c20:	7bfb      	ldrb	r3, [r7, #15]
    1c22:	f023 0301 	bic.w	r3, r3, #1
    1c26:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c28:	787a      	ldrb	r2, [r7, #1]
    1c2a:	7bfb      	ldrb	r3, [r7, #15]
    1c2c:	4313      	orrs	r3, r2
    1c2e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c30:	78fa      	ldrb	r2, [r7, #3]
    1c32:	78bb      	ldrb	r3, [r7, #2]
    1c34:	6879      	ldr	r1, [r7, #4]
    1c36:	01d2      	lsls	r2, r2, #7
    1c38:	440a      	add	r2, r1
    1c3a:	4413      	add	r3, r2
    1c3c:	3340      	adds	r3, #64	; 0x40
    1c3e:	7bfa      	ldrb	r2, [r7, #15]
    1c40:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1c42:	bf00      	nop
    1c44:	3714      	adds	r7, #20
    1c46:	46bd      	mov	sp, r7
    1c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c4c:	4770      	bx	lr

00001c4e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1c4e:	b490      	push	{r4, r7}
    1c50:	b082      	sub	sp, #8
    1c52:	af00      	add	r7, sp, #0
    1c54:	6078      	str	r0, [r7, #4]
    1c56:	460b      	mov	r3, r1
    1c58:	70fb      	strb	r3, [r7, #3]
    1c5a:	4613      	mov	r3, r2
    1c5c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1c5e:	78fa      	ldrb	r2, [r7, #3]
    1c60:	78bb      	ldrb	r3, [r7, #2]
    1c62:	78f8      	ldrb	r0, [r7, #3]
    1c64:	78b9      	ldrb	r1, [r7, #2]
    1c66:	687c      	ldr	r4, [r7, #4]
    1c68:	01c0      	lsls	r0, r0, #7
    1c6a:	4420      	add	r0, r4
    1c6c:	4401      	add	r1, r0
    1c6e:	3140      	adds	r1, #64	; 0x40
    1c70:	7809      	ldrb	r1, [r1, #0]
    1c72:	b2c9      	uxtb	r1, r1
    1c74:	f041 0104 	orr.w	r1, r1, #4
    1c78:	b2c8      	uxtb	r0, r1
    1c7a:	6879      	ldr	r1, [r7, #4]
    1c7c:	01d2      	lsls	r2, r2, #7
    1c7e:	440a      	add	r2, r1
    1c80:	4413      	add	r3, r2
    1c82:	3340      	adds	r3, #64	; 0x40
    1c84:	4602      	mov	r2, r0
    1c86:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1c88:	bf00      	nop
    1c8a:	3708      	adds	r7, #8
    1c8c:	46bd      	mov	sp, r7
    1c8e:	bc90      	pop	{r4, r7}
    1c90:	4770      	bx	lr

00001c92 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1c92:	b490      	push	{r4, r7}
    1c94:	b082      	sub	sp, #8
    1c96:	af00      	add	r7, sp, #0
    1c98:	6078      	str	r0, [r7, #4]
    1c9a:	460b      	mov	r3, r1
    1c9c:	70fb      	strb	r3, [r7, #3]
    1c9e:	4613      	mov	r3, r2
    1ca0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1ca2:	78fa      	ldrb	r2, [r7, #3]
    1ca4:	78bb      	ldrb	r3, [r7, #2]
    1ca6:	78f8      	ldrb	r0, [r7, #3]
    1ca8:	78b9      	ldrb	r1, [r7, #2]
    1caa:	687c      	ldr	r4, [r7, #4]
    1cac:	01c0      	lsls	r0, r0, #7
    1cae:	4420      	add	r0, r4
    1cb0:	4401      	add	r1, r0
    1cb2:	3140      	adds	r1, #64	; 0x40
    1cb4:	7809      	ldrb	r1, [r1, #0]
    1cb6:	b2c9      	uxtb	r1, r1
    1cb8:	f021 0104 	bic.w	r1, r1, #4
    1cbc:	b2c8      	uxtb	r0, r1
    1cbe:	6879      	ldr	r1, [r7, #4]
    1cc0:	01d2      	lsls	r2, r2, #7
    1cc2:	440a      	add	r2, r1
    1cc4:	4413      	add	r3, r2
    1cc6:	3340      	adds	r3, #64	; 0x40
    1cc8:	4602      	mov	r2, r0
    1cca:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1ccc:	bf00      	nop
    1cce:	3708      	adds	r7, #8
    1cd0:	46bd      	mov	sp, r7
    1cd2:	bc90      	pop	{r4, r7}
    1cd4:	4770      	bx	lr

00001cd6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1cd6:	b480      	push	{r7}
    1cd8:	b085      	sub	sp, #20
    1cda:	af00      	add	r7, sp, #0
    1cdc:	60f8      	str	r0, [r7, #12]
    1cde:	460b      	mov	r3, r1
    1ce0:	607a      	str	r2, [r7, #4]
    1ce2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ce4:	7afb      	ldrb	r3, [r7, #11]
    1ce6:	68fa      	ldr	r2, [r7, #12]
    1ce8:	01db      	lsls	r3, r3, #7
    1cea:	4413      	add	r3, r2
    1cec:	3328      	adds	r3, #40	; 0x28
    1cee:	687a      	ldr	r2, [r7, #4]
    1cf0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1cf2:	bf00      	nop
    1cf4:	3714      	adds	r7, #20
    1cf6:	46bd      	mov	sp, r7
    1cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cfc:	4770      	bx	lr
	...

00001d00 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b082      	sub	sp, #8
    1d04:	af00      	add	r7, sp, #0
    1d06:	4603      	mov	r3, r0
    1d08:	6039      	str	r1, [r7, #0]
    1d0a:	71fb      	strb	r3, [r7, #7]
    1d0c:	4613      	mov	r3, r2
    1d0e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1d10:	79bb      	ldrb	r3, [r7, #6]
    1d12:	2b01      	cmp	r3, #1
    1d14:	d01c      	beq.n	1d50 <_gpio_set_direction+0x50>
    1d16:	2b02      	cmp	r3, #2
    1d18:	d037      	beq.n	1d8a <_gpio_set_direction+0x8a>
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d14e      	bne.n	1dbc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1d1e:	79fb      	ldrb	r3, [r7, #7]
    1d20:	683a      	ldr	r2, [r7, #0]
    1d22:	4619      	mov	r1, r3
    1d24:	482a      	ldr	r0, [pc, #168]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d26:	4b2b      	ldr	r3, [pc, #172]	; (1dd4 <_gpio_set_direction+0xd4>)
    1d28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1d2a:	683b      	ldr	r3, [r7, #0]
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1d32:	79fb      	ldrb	r3, [r7, #7]
    1d34:	4619      	mov	r1, r3
    1d36:	4826      	ldr	r0, [pc, #152]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d38:	4b27      	ldr	r3, [pc, #156]	; (1dd8 <_gpio_set_direction+0xd8>)
    1d3a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1d3c:	683b      	ldr	r3, [r7, #0]
    1d3e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1d40:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1d44:	79fb      	ldrb	r3, [r7, #7]
    1d46:	4619      	mov	r1, r3
    1d48:	4821      	ldr	r0, [pc, #132]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d4a:	4b23      	ldr	r3, [pc, #140]	; (1dd8 <_gpio_set_direction+0xd8>)
    1d4c:	4798      	blx	r3
		break;
    1d4e:	e03a      	b.n	1dc6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1d50:	79fb      	ldrb	r3, [r7, #7]
    1d52:	683a      	ldr	r2, [r7, #0]
    1d54:	4619      	mov	r1, r3
    1d56:	481e      	ldr	r0, [pc, #120]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d58:	4b1e      	ldr	r3, [pc, #120]	; (1dd4 <_gpio_set_direction+0xd4>)
    1d5a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1d5c:	683b      	ldr	r3, [r7, #0]
    1d5e:	b29b      	uxth	r3, r3
    1d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1d68:	79f9      	ldrb	r1, [r7, #7]
    1d6a:	461a      	mov	r2, r3
    1d6c:	4818      	ldr	r0, [pc, #96]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d6e:	4b1a      	ldr	r3, [pc, #104]	; (1dd8 <_gpio_set_direction+0xd8>)
    1d70:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1d72:	683b      	ldr	r3, [r7, #0]
    1d74:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1d76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1d7e:	79f9      	ldrb	r1, [r7, #7]
    1d80:	461a      	mov	r2, r3
    1d82:	4813      	ldr	r0, [pc, #76]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d84:	4b14      	ldr	r3, [pc, #80]	; (1dd8 <_gpio_set_direction+0xd8>)
    1d86:	4798      	blx	r3
		break;
    1d88:	e01d      	b.n	1dc6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1d8a:	79fb      	ldrb	r3, [r7, #7]
    1d8c:	683a      	ldr	r2, [r7, #0]
    1d8e:	4619      	mov	r1, r3
    1d90:	480f      	ldr	r0, [pc, #60]	; (1dd0 <_gpio_set_direction+0xd0>)
    1d92:	4b12      	ldr	r3, [pc, #72]	; (1ddc <_gpio_set_direction+0xdc>)
    1d94:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1d96:	683b      	ldr	r3, [r7, #0]
    1d98:	b29b      	uxth	r3, r3
    1d9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1d9e:	79fb      	ldrb	r3, [r7, #7]
    1da0:	4619      	mov	r1, r3
    1da2:	480b      	ldr	r0, [pc, #44]	; (1dd0 <_gpio_set_direction+0xd0>)
    1da4:	4b0c      	ldr	r3, [pc, #48]	; (1dd8 <_gpio_set_direction+0xd8>)
    1da6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1da8:	683b      	ldr	r3, [r7, #0]
    1daa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1dac:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1db0:	79fb      	ldrb	r3, [r7, #7]
    1db2:	4619      	mov	r1, r3
    1db4:	4806      	ldr	r0, [pc, #24]	; (1dd0 <_gpio_set_direction+0xd0>)
    1db6:	4b08      	ldr	r3, [pc, #32]	; (1dd8 <_gpio_set_direction+0xd8>)
    1db8:	4798      	blx	r3
		break;
    1dba:	e004      	b.n	1dc6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1dbc:	2246      	movs	r2, #70	; 0x46
    1dbe:	4908      	ldr	r1, [pc, #32]	; (1de0 <_gpio_set_direction+0xe0>)
    1dc0:	2000      	movs	r0, #0
    1dc2:	4b08      	ldr	r3, [pc, #32]	; (1de4 <_gpio_set_direction+0xe4>)
    1dc4:	4798      	blx	r3
	}
}
    1dc6:	bf00      	nop
    1dc8:	3708      	adds	r7, #8
    1dca:	46bd      	mov	sp, r7
    1dcc:	bd80      	pop	{r7, pc}
    1dce:	bf00      	nop
    1dd0:	41008000 	.word	0x41008000
    1dd4:	00001abf 	.word	0x00001abf
    1dd8:	00001cd7 	.word	0x00001cd7
    1ddc:	00001a97 	.word	0x00001a97
    1de0:	0001aac8 	.word	0x0001aac8
    1de4:	00004bbd 	.word	0x00004bbd

00001de8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b082      	sub	sp, #8
    1dec:	af00      	add	r7, sp, #0
    1dee:	4603      	mov	r3, r0
    1df0:	6039      	str	r1, [r7, #0]
    1df2:	71fb      	strb	r3, [r7, #7]
    1df4:	4613      	mov	r3, r2
    1df6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1df8:	79bb      	ldrb	r3, [r7, #6]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d006      	beq.n	1e0c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1dfe:	79fb      	ldrb	r3, [r7, #7]
    1e00:	683a      	ldr	r2, [r7, #0]
    1e02:	4619      	mov	r1, r3
    1e04:	4806      	ldr	r0, [pc, #24]	; (1e20 <_gpio_set_level+0x38>)
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <_gpio_set_level+0x3c>)
    1e08:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1e0a:	e005      	b.n	1e18 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1e0c:	79fb      	ldrb	r3, [r7, #7]
    1e0e:	683a      	ldr	r2, [r7, #0]
    1e10:	4619      	mov	r1, r3
    1e12:	4803      	ldr	r0, [pc, #12]	; (1e20 <_gpio_set_level+0x38>)
    1e14:	4b04      	ldr	r3, [pc, #16]	; (1e28 <_gpio_set_level+0x40>)
    1e16:	4798      	blx	r3
}
    1e18:	bf00      	nop
    1e1a:	3708      	adds	r7, #8
    1e1c:	46bd      	mov	sp, r7
    1e1e:	bd80      	pop	{r7, pc}
    1e20:	41008000 	.word	0x41008000
    1e24:	00001ae7 	.word	0x00001ae7
    1e28:	00001b0f 	.word	0x00001b0f

00001e2c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
    1e32:	4603      	mov	r3, r0
    1e34:	71fb      	strb	r3, [r7, #7]
    1e36:	460b      	mov	r3, r1
    1e38:	71bb      	strb	r3, [r7, #6]
    1e3a:	4613      	mov	r3, r2
    1e3c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1e3e:	797b      	ldrb	r3, [r7, #5]
    1e40:	2b01      	cmp	r3, #1
    1e42:	d00a      	beq.n	1e5a <_gpio_set_pin_pull_mode+0x2e>
    1e44:	2b02      	cmp	r3, #2
    1e46:	d01f      	beq.n	1e88 <_gpio_set_pin_pull_mode+0x5c>
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d134      	bne.n	1eb6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1e4c:	79ba      	ldrb	r2, [r7, #6]
    1e4e:	79fb      	ldrb	r3, [r7, #7]
    1e50:	4619      	mov	r1, r3
    1e52:	481e      	ldr	r0, [pc, #120]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1e54:	4b1e      	ldr	r3, [pc, #120]	; (1ed0 <_gpio_set_pin_pull_mode+0xa4>)
    1e56:	4798      	blx	r3
		break;
    1e58:	e033      	b.n	1ec2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1e5a:	79bb      	ldrb	r3, [r7, #6]
    1e5c:	2201      	movs	r2, #1
    1e5e:	409a      	lsls	r2, r3
    1e60:	79fb      	ldrb	r3, [r7, #7]
    1e62:	4619      	mov	r1, r3
    1e64:	4819      	ldr	r0, [pc, #100]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1e66:	4b1b      	ldr	r3, [pc, #108]	; (1ed4 <_gpio_set_pin_pull_mode+0xa8>)
    1e68:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1e6a:	79ba      	ldrb	r2, [r7, #6]
    1e6c:	79fb      	ldrb	r3, [r7, #7]
    1e6e:	4619      	mov	r1, r3
    1e70:	4816      	ldr	r0, [pc, #88]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1e72:	4b19      	ldr	r3, [pc, #100]	; (1ed8 <_gpio_set_pin_pull_mode+0xac>)
    1e74:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1e76:	79bb      	ldrb	r3, [r7, #6]
    1e78:	2201      	movs	r2, #1
    1e7a:	409a      	lsls	r2, r3
    1e7c:	79fb      	ldrb	r3, [r7, #7]
    1e7e:	4619      	mov	r1, r3
    1e80:	4812      	ldr	r0, [pc, #72]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1e82:	4b16      	ldr	r3, [pc, #88]	; (1edc <_gpio_set_pin_pull_mode+0xb0>)
    1e84:	4798      	blx	r3
		break;
    1e86:	e01c      	b.n	1ec2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1e88:	79bb      	ldrb	r3, [r7, #6]
    1e8a:	2201      	movs	r2, #1
    1e8c:	409a      	lsls	r2, r3
    1e8e:	79fb      	ldrb	r3, [r7, #7]
    1e90:	4619      	mov	r1, r3
    1e92:	480e      	ldr	r0, [pc, #56]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1e94:	4b0f      	ldr	r3, [pc, #60]	; (1ed4 <_gpio_set_pin_pull_mode+0xa8>)
    1e96:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1e98:	79ba      	ldrb	r2, [r7, #6]
    1e9a:	79fb      	ldrb	r3, [r7, #7]
    1e9c:	4619      	mov	r1, r3
    1e9e:	480b      	ldr	r0, [pc, #44]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1ea0:	4b0d      	ldr	r3, [pc, #52]	; (1ed8 <_gpio_set_pin_pull_mode+0xac>)
    1ea2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1ea4:	79bb      	ldrb	r3, [r7, #6]
    1ea6:	2201      	movs	r2, #1
    1ea8:	409a      	lsls	r2, r3
    1eaa:	79fb      	ldrb	r3, [r7, #7]
    1eac:	4619      	mov	r1, r3
    1eae:	4807      	ldr	r0, [pc, #28]	; (1ecc <_gpio_set_pin_pull_mode+0xa0>)
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <_gpio_set_pin_pull_mode+0xb4>)
    1eb2:	4798      	blx	r3
		break;
    1eb4:	e005      	b.n	1ec2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1eb6:	2289      	movs	r2, #137	; 0x89
    1eb8:	490a      	ldr	r1, [pc, #40]	; (1ee4 <_gpio_set_pin_pull_mode+0xb8>)
    1eba:	2000      	movs	r0, #0
    1ebc:	4b0a      	ldr	r3, [pc, #40]	; (1ee8 <_gpio_set_pin_pull_mode+0xbc>)
    1ebe:	4798      	blx	r3
		break;
    1ec0:	bf00      	nop
	}
}
    1ec2:	bf00      	nop
    1ec4:	3708      	adds	r7, #8
    1ec6:	46bd      	mov	sp, r7
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	bf00      	nop
    1ecc:	41008000 	.word	0x41008000
    1ed0:	00001c93 	.word	0x00001c93
    1ed4:	00001abf 	.word	0x00001abf
    1ed8:	00001c4f 	.word	0x00001c4f
    1edc:	00001ae7 	.word	0x00001ae7
    1ee0:	00001b0f 	.word	0x00001b0f
    1ee4:	0001aac8 	.word	0x0001aac8
    1ee8:	00004bbd 	.word	0x00004bbd

00001eec <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1eec:	b590      	push	{r4, r7, lr}
    1eee:	b085      	sub	sp, #20
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
    1ef4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	095b      	lsrs	r3, r3, #5
    1efa:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	b2db      	uxtb	r3, r3
    1f00:	f003 031f 	and.w	r3, r3, #31
    1f04:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1f06:	683b      	ldr	r3, [r7, #0]
    1f08:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f0c:	d106      	bne.n	1f1c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1f0e:	7bba      	ldrb	r2, [r7, #14]
    1f10:	7bf9      	ldrb	r1, [r7, #15]
    1f12:	2300      	movs	r3, #0
    1f14:	4812      	ldr	r0, [pc, #72]	; (1f60 <_gpio_set_pin_function+0x74>)
    1f16:	4c13      	ldr	r4, [pc, #76]	; (1f64 <_gpio_set_pin_function+0x78>)
    1f18:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1f1a:	e01d      	b.n	1f58 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1f1c:	7bba      	ldrb	r2, [r7, #14]
    1f1e:	7bf9      	ldrb	r1, [r7, #15]
    1f20:	2301      	movs	r3, #1
    1f22:	480f      	ldr	r0, [pc, #60]	; (1f60 <_gpio_set_pin_function+0x74>)
    1f24:	4c0f      	ldr	r4, [pc, #60]	; (1f64 <_gpio_set_pin_function+0x78>)
    1f26:	47a0      	blx	r4
		if (pin & 1) {
    1f28:	7bbb      	ldrb	r3, [r7, #14]
    1f2a:	f003 0301 	and.w	r3, r3, #1
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d009      	beq.n	1f46 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1f32:	7bbb      	ldrb	r3, [r7, #14]
    1f34:	085b      	lsrs	r3, r3, #1
    1f36:	b2da      	uxtb	r2, r3
    1f38:	683b      	ldr	r3, [r7, #0]
    1f3a:	b2db      	uxtb	r3, r3
    1f3c:	7bf9      	ldrb	r1, [r7, #15]
    1f3e:	4808      	ldr	r0, [pc, #32]	; (1f60 <_gpio_set_pin_function+0x74>)
    1f40:	4c09      	ldr	r4, [pc, #36]	; (1f68 <_gpio_set_pin_function+0x7c>)
    1f42:	47a0      	blx	r4
}
    1f44:	e008      	b.n	1f58 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1f46:	7bbb      	ldrb	r3, [r7, #14]
    1f48:	085b      	lsrs	r3, r3, #1
    1f4a:	b2da      	uxtb	r2, r3
    1f4c:	683b      	ldr	r3, [r7, #0]
    1f4e:	b2db      	uxtb	r3, r3
    1f50:	7bf9      	ldrb	r1, [r7, #15]
    1f52:	4803      	ldr	r0, [pc, #12]	; (1f60 <_gpio_set_pin_function+0x74>)
    1f54:	4c05      	ldr	r4, [pc, #20]	; (1f6c <_gpio_set_pin_function+0x80>)
    1f56:	47a0      	blx	r4
}
    1f58:	bf00      	nop
    1f5a:	3714      	adds	r7, #20
    1f5c:	46bd      	mov	sp, r7
    1f5e:	bd90      	pop	{r4, r7, pc}
    1f60:	41008000 	.word	0x41008000
    1f64:	00001bf5 	.word	0x00001bf5
    1f68:	00001b97 	.word	0x00001b97
    1f6c:	00001b37 	.word	0x00001b37

00001f70 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1f70:	b580      	push	{r7, lr}
    1f72:	b082      	sub	sp, #8
    1f74:	af00      	add	r7, sp, #0
    1f76:	4603      	mov	r3, r0
    1f78:	460a      	mov	r2, r1
    1f7a:	71fb      	strb	r3, [r7, #7]
    1f7c:	4613      	mov	r3, r2
    1f7e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1f80:	79fb      	ldrb	r3, [r7, #7]
    1f82:	095b      	lsrs	r3, r3, #5
    1f84:	b2d8      	uxtb	r0, r3
    1f86:	79fb      	ldrb	r3, [r7, #7]
    1f88:	f003 031f 	and.w	r3, r3, #31
    1f8c:	b2db      	uxtb	r3, r3
    1f8e:	79ba      	ldrb	r2, [r7, #6]
    1f90:	4619      	mov	r1, r3
    1f92:	4b03      	ldr	r3, [pc, #12]	; (1fa0 <gpio_set_pin_pull_mode+0x30>)
    1f94:	4798      	blx	r3
}
    1f96:	bf00      	nop
    1f98:	3708      	adds	r7, #8
    1f9a:	46bd      	mov	sp, r7
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	bf00      	nop
    1fa0:	00001e2d 	.word	0x00001e2d

00001fa4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	b082      	sub	sp, #8
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
    1fac:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1fae:	6839      	ldr	r1, [r7, #0]
    1fb0:	6878      	ldr	r0, [r7, #4]
    1fb2:	4b03      	ldr	r3, [pc, #12]	; (1fc0 <gpio_set_pin_function+0x1c>)
    1fb4:	4798      	blx	r3
}
    1fb6:	bf00      	nop
    1fb8:	3708      	adds	r7, #8
    1fba:	46bd      	mov	sp, r7
    1fbc:	bd80      	pop	{r7, pc}
    1fbe:	bf00      	nop
    1fc0:	00001eed 	.word	0x00001eed

00001fc4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	b082      	sub	sp, #8
    1fc8:	af00      	add	r7, sp, #0
    1fca:	4603      	mov	r3, r0
    1fcc:	460a      	mov	r2, r1
    1fce:	71fb      	strb	r3, [r7, #7]
    1fd0:	4613      	mov	r3, r2
    1fd2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1fd4:	79fb      	ldrb	r3, [r7, #7]
    1fd6:	095b      	lsrs	r3, r3, #5
    1fd8:	b2d8      	uxtb	r0, r3
    1fda:	79fb      	ldrb	r3, [r7, #7]
    1fdc:	f003 031f 	and.w	r3, r3, #31
    1fe0:	2201      	movs	r2, #1
    1fe2:	fa02 f303 	lsl.w	r3, r2, r3
    1fe6:	79ba      	ldrb	r2, [r7, #6]
    1fe8:	4619      	mov	r1, r3
    1fea:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <gpio_set_pin_direction+0x34>)
    1fec:	4798      	blx	r3
}
    1fee:	bf00      	nop
    1ff0:	3708      	adds	r7, #8
    1ff2:	46bd      	mov	sp, r7
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	bf00      	nop
    1ff8:	00001d01 	.word	0x00001d01

00001ffc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1ffc:	b580      	push	{r7, lr}
    1ffe:	b082      	sub	sp, #8
    2000:	af00      	add	r7, sp, #0
    2002:	4603      	mov	r3, r0
    2004:	460a      	mov	r2, r1
    2006:	71fb      	strb	r3, [r7, #7]
    2008:	4613      	mov	r3, r2
    200a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    200c:	79fb      	ldrb	r3, [r7, #7]
    200e:	095b      	lsrs	r3, r3, #5
    2010:	b2d8      	uxtb	r0, r3
    2012:	79fb      	ldrb	r3, [r7, #7]
    2014:	f003 031f 	and.w	r3, r3, #31
    2018:	2201      	movs	r2, #1
    201a:	fa02 f303 	lsl.w	r3, r2, r3
    201e:	79ba      	ldrb	r2, [r7, #6]
    2020:	4619      	mov	r1, r3
    2022:	4b03      	ldr	r3, [pc, #12]	; (2030 <gpio_set_pin_level+0x34>)
    2024:	4798      	blx	r3
}
    2026:	bf00      	nop
    2028:	3708      	adds	r7, #8
    202a:	46bd      	mov	sp, r7
    202c:	bd80      	pop	{r7, pc}
    202e:	bf00      	nop
    2030:	00001de9 	.word	0x00001de9

00002034 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2034:	b580      	push	{r7, lr}
    2036:	af00      	add	r7, sp, #0
	_init_chip();
    2038:	4b01      	ldr	r3, [pc, #4]	; (2040 <init_mcu+0xc>)
    203a:	4798      	blx	r3
}
    203c:	bf00      	nop
    203e:	bd80      	pop	{r7, pc}
    2040:	00005e15 	.word	0x00005e15

00002044 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2044:	b580      	push	{r7, lr}
    2046:	b082      	sub	sp, #8
    2048:	af00      	add	r7, sp, #0
    204a:	6078      	str	r0, [r7, #4]
    204c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	2b00      	cmp	r3, #0
    2052:	d004      	beq.n	205e <wdt_init+0x1a>
    2054:	683b      	ldr	r3, [r7, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d001      	beq.n	205e <wdt_init+0x1a>
    205a:	2301      	movs	r3, #1
    205c:	e000      	b.n	2060 <wdt_init+0x1c>
    205e:	2300      	movs	r3, #0
    2060:	f003 0301 	and.w	r3, r3, #1
    2064:	b2db      	uxtb	r3, r3
    2066:	2248      	movs	r2, #72	; 0x48
    2068:	4907      	ldr	r1, [pc, #28]	; (2088 <wdt_init+0x44>)
    206a:	4618      	mov	r0, r3
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <wdt_init+0x48>)
    206e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2070:	687b      	ldr	r3, [r7, #4]
    2072:	683a      	ldr	r2, [r7, #0]
    2074:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	4618      	mov	r0, r3
    207a:	4b05      	ldr	r3, [pc, #20]	; (2090 <wdt_init+0x4c>)
    207c:	4798      	blx	r3
    207e:	4603      	mov	r3, r0
}
    2080:	4618      	mov	r0, r3
    2082:	3708      	adds	r7, #8
    2084:	46bd      	mov	sp, r7
    2086:	bd80      	pop	{r7, pc}
    2088:	0001aae4 	.word	0x0001aae4
    208c:	00004bbd 	.word	0x00004bbd
    2090:	0000ca09 	.word	0x0000ca09

00002094 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2094:	b580      	push	{r7, lr}
    2096:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    2098:	4804      	ldr	r0, [pc, #16]	; (20ac <CRC_CALC_init+0x18>)
    209a:	4b05      	ldr	r3, [pc, #20]	; (20b0 <CRC_CALC_init+0x1c>)
    209c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    209e:	4905      	ldr	r1, [pc, #20]	; (20b4 <CRC_CALC_init+0x20>)
    20a0:	4805      	ldr	r0, [pc, #20]	; (20b8 <CRC_CALC_init+0x24>)
    20a2:	4b06      	ldr	r3, [pc, #24]	; (20bc <CRC_CALC_init+0x28>)
    20a4:	4798      	blx	r3
}
    20a6:	bf00      	nop
    20a8:	bd80      	pop	{r7, pc}
    20aa:	bf00      	nop
    20ac:	40000800 	.word	0x40000800
    20b0:	00001897 	.word	0x00001897
    20b4:	41002000 	.word	0x41002000
    20b8:	2000e0ac 	.word	0x2000e0ac
    20bc:	000034e1 	.word	0x000034e1

000020c0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20c4:	2244      	movs	r2, #68	; 0x44
    20c6:	2104      	movs	r1, #4
    20c8:	483f      	ldr	r0, [pc, #252]	; (21c8 <EXTERNAL_IRQ_0_init+0x108>)
    20ca:	4b40      	ldr	r3, [pc, #256]	; (21cc <EXTERNAL_IRQ_0_init+0x10c>)
    20cc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    20ce:	4840      	ldr	r0, [pc, #256]	; (21d0 <EXTERNAL_IRQ_0_init+0x110>)
    20d0:	4b40      	ldr	r3, [pc, #256]	; (21d4 <EXTERNAL_IRQ_0_init+0x114>)
    20d2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    20d4:	2101      	movs	r1, #1
    20d6:	2040      	movs	r0, #64	; 0x40
    20d8:	4b3f      	ldr	r3, [pc, #252]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    20da:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    20dc:	2100      	movs	r1, #0
    20de:	2040      	movs	r0, #64	; 0x40
    20e0:	4b3e      	ldr	r3, [pc, #248]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    20e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    20e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    20e8:	2040      	movs	r0, #64	; 0x40
    20ea:	4b3d      	ldr	r3, [pc, #244]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    20ec:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    20ee:	2101      	movs	r1, #1
    20f0:	2021      	movs	r0, #33	; 0x21
    20f2:	4b39      	ldr	r3, [pc, #228]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    20f4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    20f6:	2100      	movs	r1, #0
    20f8:	2021      	movs	r0, #33	; 0x21
    20fa:	4b38      	ldr	r3, [pc, #224]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    20fc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    20fe:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    2102:	2021      	movs	r0, #33	; 0x21
    2104:	4b36      	ldr	r3, [pc, #216]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    2106:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    2108:	2101      	movs	r1, #1
    210a:	2003      	movs	r0, #3
    210c:	4b32      	ldr	r3, [pc, #200]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    210e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    2110:	2102      	movs	r1, #2
    2112:	2003      	movs	r0, #3
    2114:	4b31      	ldr	r3, [pc, #196]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    2116:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    2118:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    211c:	2003      	movs	r0, #3
    211e:	4b30      	ldr	r3, [pc, #192]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    2120:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    2122:	2101      	movs	r1, #1
    2124:	2004      	movs	r0, #4
    2126:	4b2c      	ldr	r3, [pc, #176]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    2128:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    212a:	2102      	movs	r1, #2
    212c:	2004      	movs	r0, #4
    212e:	4b2b      	ldr	r3, [pc, #172]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    2130:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    2132:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2136:	2004      	movs	r0, #4
    2138:	4b29      	ldr	r3, [pc, #164]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    213a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    213c:	2101      	movs	r1, #1
    213e:	2005      	movs	r0, #5
    2140:	4b25      	ldr	r3, [pc, #148]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    2142:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2144:	2102      	movs	r1, #2
    2146:	2005      	movs	r0, #5
    2148:	4b24      	ldr	r3, [pc, #144]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    214a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    214c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    2150:	2005      	movs	r0, #5
    2152:	4b23      	ldr	r3, [pc, #140]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    2154:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    2156:	2101      	movs	r1, #1
    2158:	2056      	movs	r0, #86	; 0x56
    215a:	4b1f      	ldr	r3, [pc, #124]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    215c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    215e:	2102      	movs	r1, #2
    2160:	2056      	movs	r0, #86	; 0x56
    2162:	4b1e      	ldr	r3, [pc, #120]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    2164:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    2166:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    216a:	2056      	movs	r0, #86	; 0x56
    216c:	4b1c      	ldr	r3, [pc, #112]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    216e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    2170:	2101      	movs	r1, #1
    2172:	2057      	movs	r0, #87	; 0x57
    2174:	4b18      	ldr	r3, [pc, #96]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    2176:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    2178:	2102      	movs	r1, #2
    217a:	2057      	movs	r0, #87	; 0x57
    217c:	4b17      	ldr	r3, [pc, #92]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    217e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    2180:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2184:	2057      	movs	r0, #87	; 0x57
    2186:	4b16      	ldr	r3, [pc, #88]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    2188:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    218a:	2101      	movs	r1, #1
    218c:	2028      	movs	r0, #40	; 0x28
    218e:	4b12      	ldr	r3, [pc, #72]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    2190:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    2192:	2100      	movs	r1, #0
    2194:	2028      	movs	r0, #40	; 0x28
    2196:	4b11      	ldr	r3, [pc, #68]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    2198:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    219a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    219e:	2028      	movs	r0, #40	; 0x28
    21a0:	4b0f      	ldr	r3, [pc, #60]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    21a2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    21a4:	2101      	movs	r1, #1
    21a6:	2029      	movs	r0, #41	; 0x29
    21a8:	4b0b      	ldr	r3, [pc, #44]	; (21d8 <EXTERNAL_IRQ_0_init+0x118>)
    21aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    21ac:	2100      	movs	r1, #0
    21ae:	2029      	movs	r0, #41	; 0x29
    21b0:	4b0a      	ldr	r3, [pc, #40]	; (21dc <EXTERNAL_IRQ_0_init+0x11c>)
    21b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    21b4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    21b8:	2029      	movs	r0, #41	; 0x29
    21ba:	4b09      	ldr	r3, [pc, #36]	; (21e0 <EXTERNAL_IRQ_0_init+0x120>)
    21bc:	4798      	blx	r3

	ext_irq_init();
    21be:	4b09      	ldr	r3, [pc, #36]	; (21e4 <EXTERNAL_IRQ_0_init+0x124>)
    21c0:	4798      	blx	r3
}
    21c2:	bf00      	nop
    21c4:	bd80      	pop	{r7, pc}
    21c6:	bf00      	nop
    21c8:	40001c00 	.word	0x40001c00
    21cc:	00001751 	.word	0x00001751
    21d0:	40000800 	.word	0x40000800
    21d4:	00001837 	.word	0x00001837
    21d8:	00001fc5 	.word	0x00001fc5
    21dc:	00001f71 	.word	0x00001f71
    21e0:	00001fa5 	.word	0x00001fa5
    21e4:	000035a9 	.word	0x000035a9

000021e8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21ec:	2244      	movs	r2, #68	; 0x44
    21ee:	210b      	movs	r1, #11
    21f0:	4807      	ldr	r0, [pc, #28]	; (2210 <EVENT_SYSTEM_0_init+0x28>)
    21f2:	4b08      	ldr	r3, [pc, #32]	; (2214 <EVENT_SYSTEM_0_init+0x2c>)
    21f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21f6:	2244      	movs	r2, #68	; 0x44
    21f8:	210c      	movs	r1, #12
    21fa:	4805      	ldr	r0, [pc, #20]	; (2210 <EVENT_SYSTEM_0_init+0x28>)
    21fc:	4b05      	ldr	r3, [pc, #20]	; (2214 <EVENT_SYSTEM_0_init+0x2c>)
    21fe:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    2200:	4805      	ldr	r0, [pc, #20]	; (2218 <EVENT_SYSTEM_0_init+0x30>)
    2202:	4b06      	ldr	r3, [pc, #24]	; (221c <EVENT_SYSTEM_0_init+0x34>)
    2204:	4798      	blx	r3

	event_system_init();
    2206:	4b06      	ldr	r3, [pc, #24]	; (2220 <EVENT_SYSTEM_0_init+0x38>)
    2208:	4798      	blx	r3
}
    220a:	bf00      	nop
    220c:	bd80      	pop	{r7, pc}
    220e:	bf00      	nop
    2210:	40001c00 	.word	0x40001c00
    2214:	00001751 	.word	0x00001751
    2218:	40000800 	.word	0x40000800
    221c:	000018b7 	.word	0x000018b7
    2220:	00003595 	.word	0x00003595

00002224 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2224:	b580      	push	{r7, lr}
    2226:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    2228:	2101      	movs	r1, #1
    222a:	202b      	movs	r0, #43	; 0x2b
    222c:	4b2b      	ldr	r3, [pc, #172]	; (22dc <QSPI_N25Q256_PORT_init+0xb8>)
    222e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    2230:	2100      	movs	r1, #0
    2232:	202b      	movs	r0, #43	; 0x2b
    2234:	4b2a      	ldr	r3, [pc, #168]	; (22e0 <QSPI_N25Q256_PORT_init+0xbc>)
    2236:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    2238:	492a      	ldr	r1, [pc, #168]	; (22e4 <QSPI_N25Q256_PORT_init+0xc0>)
    223a:	202b      	movs	r0, #43	; 0x2b
    223c:	4b2a      	ldr	r3, [pc, #168]	; (22e8 <QSPI_N25Q256_PORT_init+0xc4>)
    223e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2240:	2102      	movs	r1, #2
    2242:	2008      	movs	r0, #8
    2244:	4b25      	ldr	r3, [pc, #148]	; (22dc <QSPI_N25Q256_PORT_init+0xb8>)
    2246:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    2248:	2100      	movs	r1, #0
    224a:	2008      	movs	r0, #8
    224c:	4b27      	ldr	r3, [pc, #156]	; (22ec <QSPI_N25Q256_PORT_init+0xc8>)
    224e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2250:	2100      	movs	r1, #0
    2252:	2008      	movs	r0, #8
    2254:	4b22      	ldr	r3, [pc, #136]	; (22e0 <QSPI_N25Q256_PORT_init+0xbc>)
    2256:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    2258:	4925      	ldr	r1, [pc, #148]	; (22f0 <QSPI_N25Q256_PORT_init+0xcc>)
    225a:	2008      	movs	r0, #8
    225c:	4b22      	ldr	r3, [pc, #136]	; (22e8 <QSPI_N25Q256_PORT_init+0xc4>)
    225e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2260:	2102      	movs	r1, #2
    2262:	2009      	movs	r0, #9
    2264:	4b1d      	ldr	r3, [pc, #116]	; (22dc <QSPI_N25Q256_PORT_init+0xb8>)
    2266:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    2268:	2100      	movs	r1, #0
    226a:	2009      	movs	r0, #9
    226c:	4b1f      	ldr	r3, [pc, #124]	; (22ec <QSPI_N25Q256_PORT_init+0xc8>)
    226e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    2270:	2100      	movs	r1, #0
    2272:	2009      	movs	r0, #9
    2274:	4b1a      	ldr	r3, [pc, #104]	; (22e0 <QSPI_N25Q256_PORT_init+0xbc>)
    2276:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    2278:	491e      	ldr	r1, [pc, #120]	; (22f4 <QSPI_N25Q256_PORT_init+0xd0>)
    227a:	2009      	movs	r0, #9
    227c:	4b1a      	ldr	r3, [pc, #104]	; (22e8 <QSPI_N25Q256_PORT_init+0xc4>)
    227e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    2280:	2102      	movs	r1, #2
    2282:	200a      	movs	r0, #10
    2284:	4b15      	ldr	r3, [pc, #84]	; (22dc <QSPI_N25Q256_PORT_init+0xb8>)
    2286:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    2288:	2100      	movs	r1, #0
    228a:	200a      	movs	r0, #10
    228c:	4b17      	ldr	r3, [pc, #92]	; (22ec <QSPI_N25Q256_PORT_init+0xc8>)
    228e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    2290:	2100      	movs	r1, #0
    2292:	200a      	movs	r0, #10
    2294:	4b12      	ldr	r3, [pc, #72]	; (22e0 <QSPI_N25Q256_PORT_init+0xbc>)
    2296:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    2298:	4917      	ldr	r1, [pc, #92]	; (22f8 <QSPI_N25Q256_PORT_init+0xd4>)
    229a:	200a      	movs	r0, #10
    229c:	4b12      	ldr	r3, [pc, #72]	; (22e8 <QSPI_N25Q256_PORT_init+0xc4>)
    229e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    22a0:	2102      	movs	r1, #2
    22a2:	200b      	movs	r0, #11
    22a4:	4b0d      	ldr	r3, [pc, #52]	; (22dc <QSPI_N25Q256_PORT_init+0xb8>)
    22a6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    22a8:	2100      	movs	r1, #0
    22aa:	200b      	movs	r0, #11
    22ac:	4b0f      	ldr	r3, [pc, #60]	; (22ec <QSPI_N25Q256_PORT_init+0xc8>)
    22ae:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    22b0:	2100      	movs	r1, #0
    22b2:	200b      	movs	r0, #11
    22b4:	4b0a      	ldr	r3, [pc, #40]	; (22e0 <QSPI_N25Q256_PORT_init+0xbc>)
    22b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    22b8:	4910      	ldr	r1, [pc, #64]	; (22fc <QSPI_N25Q256_PORT_init+0xd8>)
    22ba:	200b      	movs	r0, #11
    22bc:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <QSPI_N25Q256_PORT_init+0xc4>)
    22be:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    22c0:	2101      	movs	r1, #1
    22c2:	202a      	movs	r0, #42	; 0x2a
    22c4:	4b05      	ldr	r3, [pc, #20]	; (22dc <QSPI_N25Q256_PORT_init+0xb8>)
    22c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    22c8:	2100      	movs	r1, #0
    22ca:	202a      	movs	r0, #42	; 0x2a
    22cc:	4b04      	ldr	r3, [pc, #16]	; (22e0 <QSPI_N25Q256_PORT_init+0xbc>)
    22ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    22d0:	490b      	ldr	r1, [pc, #44]	; (2300 <QSPI_N25Q256_PORT_init+0xdc>)
    22d2:	202a      	movs	r0, #42	; 0x2a
    22d4:	4b04      	ldr	r3, [pc, #16]	; (22e8 <QSPI_N25Q256_PORT_init+0xc4>)
    22d6:	4798      	blx	r3
}
    22d8:	bf00      	nop
    22da:	bd80      	pop	{r7, pc}
    22dc:	00001fc5 	.word	0x00001fc5
    22e0:	00001f71 	.word	0x00001f71
    22e4:	002b0007 	.word	0x002b0007
    22e8:	00001fa5 	.word	0x00001fa5
    22ec:	00001ffd 	.word	0x00001ffd
    22f0:	00080007 	.word	0x00080007
    22f4:	00090007 	.word	0x00090007
    22f8:	000a0007 	.word	0x000a0007
    22fc:	000b0007 	.word	0x000b0007
    2300:	002a0007 	.word	0x002a0007

00002304 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    2304:	b580      	push	{r7, lr}
    2306:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    2308:	4805      	ldr	r0, [pc, #20]	; (2320 <QSPI_N25Q256_CLOCK_init+0x1c>)
    230a:	4b06      	ldr	r3, [pc, #24]	; (2324 <QSPI_N25Q256_CLOCK_init+0x20>)
    230c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    230e:	4804      	ldr	r0, [pc, #16]	; (2320 <QSPI_N25Q256_CLOCK_init+0x1c>)
    2310:	4b05      	ldr	r3, [pc, #20]	; (2328 <QSPI_N25Q256_CLOCK_init+0x24>)
    2312:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    2314:	4802      	ldr	r0, [pc, #8]	; (2320 <QSPI_N25Q256_CLOCK_init+0x1c>)
    2316:	4b05      	ldr	r3, [pc, #20]	; (232c <QSPI_N25Q256_CLOCK_init+0x28>)
    2318:	4798      	blx	r3
}
    231a:	bf00      	nop
    231c:	bd80      	pop	{r7, pc}
    231e:	bf00      	nop
    2320:	40000800 	.word	0x40000800
    2324:	00001797 	.word	0x00001797
    2328:	000017d7 	.word	0x000017d7
    232c:	000019b7 	.word	0x000019b7

00002330 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    2330:	b580      	push	{r7, lr}
    2332:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    2334:	4b04      	ldr	r3, [pc, #16]	; (2348 <QSPI_N25Q256_init+0x18>)
    2336:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    2338:	4904      	ldr	r1, [pc, #16]	; (234c <QSPI_N25Q256_init+0x1c>)
    233a:	4805      	ldr	r0, [pc, #20]	; (2350 <QSPI_N25Q256_init+0x20>)
    233c:	4b05      	ldr	r3, [pc, #20]	; (2354 <QSPI_N25Q256_init+0x24>)
    233e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    2340:	4b05      	ldr	r3, [pc, #20]	; (2358 <QSPI_N25Q256_init+0x28>)
    2342:	4798      	blx	r3
}
    2344:	bf00      	nop
    2346:	bd80      	pop	{r7, pc}
    2348:	00002305 	.word	0x00002305
    234c:	42003400 	.word	0x42003400
    2350:	2000df40 	.word	0x2000df40
    2354:	00003a19 	.word	0x00003a19
    2358:	00002225 	.word	0x00002225

0000235c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    235c:	b580      	push	{r7, lr}
    235e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    2360:	4802      	ldr	r0, [pc, #8]	; (236c <DATETIME_CLOCK_CLOCK_init+0x10>)
    2362:	4b03      	ldr	r3, [pc, #12]	; (2370 <DATETIME_CLOCK_CLOCK_init+0x14>)
    2364:	4798      	blx	r3
}
    2366:	bf00      	nop
    2368:	bd80      	pop	{r7, pc}
    236a:	bf00      	nop
    236c:	40000800 	.word	0x40000800
    2370:	00001817 	.word	0x00001817

00002374 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2374:	b580      	push	{r7, lr}
    2376:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2378:	4b03      	ldr	r3, [pc, #12]	; (2388 <DATETIME_CLOCK_init+0x14>)
    237a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    237c:	4903      	ldr	r1, [pc, #12]	; (238c <DATETIME_CLOCK_init+0x18>)
    237e:	4804      	ldr	r0, [pc, #16]	; (2390 <DATETIME_CLOCK_init+0x1c>)
    2380:	4b04      	ldr	r3, [pc, #16]	; (2394 <DATETIME_CLOCK_init+0x20>)
    2382:	4798      	blx	r3
}
    2384:	bf00      	nop
    2386:	bd80      	pop	{r7, pc}
    2388:	0000235d 	.word	0x0000235d
    238c:	40002400 	.word	0x40002400
    2390:	2000e088 	.word	0x2000e088
    2394:	00003049 	.word	0x00003049

00002398 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    2398:	b580      	push	{r7, lr}
    239a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    239c:	2100      	movs	r1, #0
    239e:	2011      	movs	r0, #17
    23a0:	4b07      	ldr	r3, [pc, #28]	; (23c0 <I2C_HEATERS_PORT_init+0x28>)
    23a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    23a4:	4907      	ldr	r1, [pc, #28]	; (23c4 <I2C_HEATERS_PORT_init+0x2c>)
    23a6:	2011      	movs	r0, #17
    23a8:	4b07      	ldr	r3, [pc, #28]	; (23c8 <I2C_HEATERS_PORT_init+0x30>)
    23aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    23ac:	2100      	movs	r1, #0
    23ae:	2010      	movs	r0, #16
    23b0:	4b03      	ldr	r3, [pc, #12]	; (23c0 <I2C_HEATERS_PORT_init+0x28>)
    23b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    23b4:	4905      	ldr	r1, [pc, #20]	; (23cc <I2C_HEATERS_PORT_init+0x34>)
    23b6:	2010      	movs	r0, #16
    23b8:	4b03      	ldr	r3, [pc, #12]	; (23c8 <I2C_HEATERS_PORT_init+0x30>)
    23ba:	4798      	blx	r3
}
    23bc:	bf00      	nop
    23be:	bd80      	pop	{r7, pc}
    23c0:	00001f71 	.word	0x00001f71
    23c4:	00110003 	.word	0x00110003
    23c8:	00001fa5 	.word	0x00001fa5
    23cc:	00100003 	.word	0x00100003

000023d0 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23d4:	2240      	movs	r2, #64	; 0x40
    23d6:	2118      	movs	r1, #24
    23d8:	4806      	ldr	r0, [pc, #24]	; (23f4 <I2C_HEATERS_CLOCK_init+0x24>)
    23da:	4b07      	ldr	r3, [pc, #28]	; (23f8 <I2C_HEATERS_CLOCK_init+0x28>)
    23dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23de:	2243      	movs	r2, #67	; 0x43
    23e0:	2103      	movs	r1, #3
    23e2:	4804      	ldr	r0, [pc, #16]	; (23f4 <I2C_HEATERS_CLOCK_init+0x24>)
    23e4:	4b04      	ldr	r3, [pc, #16]	; (23f8 <I2C_HEATERS_CLOCK_init+0x28>)
    23e6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    23e8:	4804      	ldr	r0, [pc, #16]	; (23fc <I2C_HEATERS_CLOCK_init+0x2c>)
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <I2C_HEATERS_CLOCK_init+0x30>)
    23ec:	4798      	blx	r3
}
    23ee:	bf00      	nop
    23f0:	bd80      	pop	{r7, pc}
    23f2:	bf00      	nop
    23f4:	40001c00 	.word	0x40001c00
    23f8:	00001751 	.word	0x00001751
    23fc:	40000800 	.word	0x40000800
    2400:	000018d7 	.word	0x000018d7

00002404 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    2404:	b580      	push	{r7, lr}
    2406:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    2408:	4b04      	ldr	r3, [pc, #16]	; (241c <I2C_HEATERS_init+0x18>)
    240a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    240c:	4904      	ldr	r1, [pc, #16]	; (2420 <I2C_HEATERS_init+0x1c>)
    240e:	4805      	ldr	r0, [pc, #20]	; (2424 <I2C_HEATERS_init+0x20>)
    2410:	4b05      	ldr	r3, [pc, #20]	; (2428 <I2C_HEATERS_init+0x24>)
    2412:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    2414:	4b05      	ldr	r3, [pc, #20]	; (242c <I2C_HEATERS_init+0x28>)
    2416:	4798      	blx	r3
}
    2418:	bf00      	nop
    241a:	bd80      	pop	{r7, pc}
    241c:	000023d1 	.word	0x000023d1
    2420:	41014000 	.word	0x41014000
    2424:	2000dfe0 	.word	0x2000dfe0
    2428:	00003871 	.word	0x00003871
    242c:	00002399 	.word	0x00002399

00002430 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    2430:	b580      	push	{r7, lr}
    2432:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    2434:	2100      	movs	r1, #0
    2436:	203b      	movs	r0, #59	; 0x3b
    2438:	4b11      	ldr	r3, [pc, #68]	; (2480 <SPI_TEMP_PORT_init+0x50>)
    243a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    243c:	2102      	movs	r1, #2
    243e:	203b      	movs	r0, #59	; 0x3b
    2440:	4b10      	ldr	r3, [pc, #64]	; (2484 <SPI_TEMP_PORT_init+0x54>)
    2442:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2444:	4910      	ldr	r1, [pc, #64]	; (2488 <SPI_TEMP_PORT_init+0x58>)
    2446:	203b      	movs	r0, #59	; 0x3b
    2448:	4b10      	ldr	r3, [pc, #64]	; (248c <SPI_TEMP_PORT_init+0x5c>)
    244a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    244c:	2100      	movs	r1, #0
    244e:	203a      	movs	r0, #58	; 0x3a
    2450:	4b0b      	ldr	r3, [pc, #44]	; (2480 <SPI_TEMP_PORT_init+0x50>)
    2452:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2454:	2102      	movs	r1, #2
    2456:	203a      	movs	r0, #58	; 0x3a
    2458:	4b0a      	ldr	r3, [pc, #40]	; (2484 <SPI_TEMP_PORT_init+0x54>)
    245a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    245c:	490c      	ldr	r1, [pc, #48]	; (2490 <SPI_TEMP_PORT_init+0x60>)
    245e:	203a      	movs	r0, #58	; 0x3a
    2460:	4b0a      	ldr	r3, [pc, #40]	; (248c <SPI_TEMP_PORT_init+0x5c>)
    2462:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2464:	2101      	movs	r1, #1
    2466:	203c      	movs	r0, #60	; 0x3c
    2468:	4b06      	ldr	r3, [pc, #24]	; (2484 <SPI_TEMP_PORT_init+0x54>)
    246a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    246c:	2100      	movs	r1, #0
    246e:	203c      	movs	r0, #60	; 0x3c
    2470:	4b08      	ldr	r3, [pc, #32]	; (2494 <SPI_TEMP_PORT_init+0x64>)
    2472:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2474:	4908      	ldr	r1, [pc, #32]	; (2498 <SPI_TEMP_PORT_init+0x68>)
    2476:	203c      	movs	r0, #60	; 0x3c
    2478:	4b04      	ldr	r3, [pc, #16]	; (248c <SPI_TEMP_PORT_init+0x5c>)
    247a:	4798      	blx	r3
}
    247c:	bf00      	nop
    247e:	bd80      	pop	{r7, pc}
    2480:	00001ffd 	.word	0x00001ffd
    2484:	00001fc5 	.word	0x00001fc5
    2488:	003b0003 	.word	0x003b0003
    248c:	00001fa5 	.word	0x00001fa5
    2490:	003a0003 	.word	0x003a0003
    2494:	00001f71 	.word	0x00001f71
    2498:	003c0003 	.word	0x003c0003

0000249c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    249c:	b580      	push	{r7, lr}
    249e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24a0:	2245      	movs	r2, #69	; 0x45
    24a2:	2122      	movs	r1, #34	; 0x22
    24a4:	4806      	ldr	r0, [pc, #24]	; (24c0 <SPI_TEMP_CLOCK_init+0x24>)
    24a6:	4b07      	ldr	r3, [pc, #28]	; (24c4 <SPI_TEMP_CLOCK_init+0x28>)
    24a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24aa:	224a      	movs	r2, #74	; 0x4a
    24ac:	2103      	movs	r1, #3
    24ae:	4804      	ldr	r0, [pc, #16]	; (24c0 <SPI_TEMP_CLOCK_init+0x24>)
    24b0:	4b04      	ldr	r3, [pc, #16]	; (24c4 <SPI_TEMP_CLOCK_init+0x28>)
    24b2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    24b4:	4804      	ldr	r0, [pc, #16]	; (24c8 <SPI_TEMP_CLOCK_init+0x2c>)
    24b6:	4b05      	ldr	r3, [pc, #20]	; (24cc <SPI_TEMP_CLOCK_init+0x30>)
    24b8:	4798      	blx	r3
}
    24ba:	bf00      	nop
    24bc:	bd80      	pop	{r7, pc}
    24be:	bf00      	nop
    24c0:	40001c00 	.word	0x40001c00
    24c4:	00001751 	.word	0x00001751
    24c8:	40000800 	.word	0x40000800
    24cc:	000019d7 	.word	0x000019d7

000024d0 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    24d4:	4b05      	ldr	r3, [pc, #20]	; (24ec <SPI_TEMP_init+0x1c>)
    24d6:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    24d8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    24dc:	4804      	ldr	r0, [pc, #16]	; (24f0 <SPI_TEMP_init+0x20>)
    24de:	4b05      	ldr	r3, [pc, #20]	; (24f4 <SPI_TEMP_init+0x24>)
    24e0:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    24e2:	4b05      	ldr	r3, [pc, #20]	; (24f8 <SPI_TEMP_init+0x28>)
    24e4:	4798      	blx	r3
}
    24e6:	bf00      	nop
    24e8:	bd80      	pop	{r7, pc}
    24ea:	bf00      	nop
    24ec:	0000249d 	.word	0x0000249d
    24f0:	2000dee8 	.word	0x2000dee8
    24f4:	00003b29 	.word	0x00003b29
    24f8:	00002431 	.word	0x00002431

000024fc <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    24fc:	b580      	push	{r7, lr}
    24fe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2500:	2100      	movs	r1, #0
    2502:	2017      	movs	r0, #23
    2504:	4b07      	ldr	r3, [pc, #28]	; (2524 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    2506:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    2508:	4907      	ldr	r1, [pc, #28]	; (2528 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    250a:	2017      	movs	r0, #23
    250c:	4b07      	ldr	r3, [pc, #28]	; (252c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    250e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2510:	2100      	movs	r1, #0
    2512:	2016      	movs	r0, #22
    2514:	4b03      	ldr	r3, [pc, #12]	; (2524 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    2516:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    2518:	4905      	ldr	r1, [pc, #20]	; (2530 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    251a:	2016      	movs	r0, #22
    251c:	4b03      	ldr	r3, [pc, #12]	; (252c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    251e:	4798      	blx	r3
}
    2520:	bf00      	nop
    2522:	bd80      	pop	{r7, pc}
    2524:	00001f71 	.word	0x00001f71
    2528:	00170003 	.word	0x00170003
    252c:	00001fa5 	.word	0x00001fa5
    2530:	00160003 	.word	0x00160003

00002534 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    2534:	b580      	push	{r7, lr}
    2536:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2538:	2244      	movs	r2, #68	; 0x44
    253a:	2123      	movs	r1, #35	; 0x23
    253c:	4806      	ldr	r0, [pc, #24]	; (2558 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    253e:	4b07      	ldr	r3, [pc, #28]	; (255c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2540:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2542:	224a      	movs	r2, #74	; 0x4a
    2544:	2103      	movs	r1, #3
    2546:	4804      	ldr	r0, [pc, #16]	; (2558 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2548:	4b04      	ldr	r3, [pc, #16]	; (255c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    254a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    254c:	4804      	ldr	r0, [pc, #16]	; (2560 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    254e:	4b05      	ldr	r3, [pc, #20]	; (2564 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    2550:	4798      	blx	r3
}
    2552:	bf00      	nop
    2554:	bd80      	pop	{r7, pc}
    2556:	bf00      	nop
    2558:	40001c00 	.word	0x40001c00
    255c:	00001751 	.word	0x00001751
    2560:	40000800 	.word	0x40000800
    2564:	000019f7 	.word	0x000019f7

00002568 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    2568:	b580      	push	{r7, lr}
    256a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    256c:	4b04      	ldr	r3, [pc, #16]	; (2580 <I2C_FLAPPER_VALVE_init+0x18>)
    256e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    2570:	4904      	ldr	r1, [pc, #16]	; (2584 <I2C_FLAPPER_VALVE_init+0x1c>)
    2572:	4805      	ldr	r0, [pc, #20]	; (2588 <I2C_FLAPPER_VALVE_init+0x20>)
    2574:	4b05      	ldr	r3, [pc, #20]	; (258c <I2C_FLAPPER_VALVE_init+0x24>)
    2576:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    2578:	4b05      	ldr	r3, [pc, #20]	; (2590 <I2C_FLAPPER_VALVE_init+0x28>)
    257a:	4798      	blx	r3
}
    257c:	bf00      	nop
    257e:	bd80      	pop	{r7, pc}
    2580:	00002535 	.word	0x00002535
    2584:	43000400 	.word	0x43000400
    2588:	2000df84 	.word	0x2000df84
    258c:	00003871 	.word	0x00003871
    2590:	000024fd 	.word	0x000024fd

00002594 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2594:	b580      	push	{r7, lr}
    2596:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2598:	2100      	movs	r1, #0
    259a:	2044      	movs	r0, #68	; 0x44
    259c:	4b11      	ldr	r3, [pc, #68]	; (25e4 <SPI_HI3593_PORT_init+0x50>)
    259e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    25a0:	2102      	movs	r1, #2
    25a2:	2044      	movs	r0, #68	; 0x44
    25a4:	4b10      	ldr	r3, [pc, #64]	; (25e8 <SPI_HI3593_PORT_init+0x54>)
    25a6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    25a8:	4910      	ldr	r1, [pc, #64]	; (25ec <SPI_HI3593_PORT_init+0x58>)
    25aa:	2044      	movs	r0, #68	; 0x44
    25ac:	4b10      	ldr	r3, [pc, #64]	; (25f0 <SPI_HI3593_PORT_init+0x5c>)
    25ae:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    25b0:	2100      	movs	r1, #0
    25b2:	2045      	movs	r0, #69	; 0x45
    25b4:	4b0b      	ldr	r3, [pc, #44]	; (25e4 <SPI_HI3593_PORT_init+0x50>)
    25b6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    25b8:	2102      	movs	r1, #2
    25ba:	2045      	movs	r0, #69	; 0x45
    25bc:	4b0a      	ldr	r3, [pc, #40]	; (25e8 <SPI_HI3593_PORT_init+0x54>)
    25be:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    25c0:	490c      	ldr	r1, [pc, #48]	; (25f4 <SPI_HI3593_PORT_init+0x60>)
    25c2:	2045      	movs	r0, #69	; 0x45
    25c4:	4b0a      	ldr	r3, [pc, #40]	; (25f0 <SPI_HI3593_PORT_init+0x5c>)
    25c6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    25c8:	2101      	movs	r1, #1
    25ca:	2047      	movs	r0, #71	; 0x47
    25cc:	4b06      	ldr	r3, [pc, #24]	; (25e8 <SPI_HI3593_PORT_init+0x54>)
    25ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    25d0:	2100      	movs	r1, #0
    25d2:	2047      	movs	r0, #71	; 0x47
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <SPI_HI3593_PORT_init+0x64>)
    25d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    25d8:	4908      	ldr	r1, [pc, #32]	; (25fc <SPI_HI3593_PORT_init+0x68>)
    25da:	2047      	movs	r0, #71	; 0x47
    25dc:	4b04      	ldr	r3, [pc, #16]	; (25f0 <SPI_HI3593_PORT_init+0x5c>)
    25de:	4798      	blx	r3
}
    25e0:	bf00      	nop
    25e2:	bd80      	pop	{r7, pc}
    25e4:	00001ffd 	.word	0x00001ffd
    25e8:	00001fc5 	.word	0x00001fc5
    25ec:	00440002 	.word	0x00440002
    25f0:	00001fa5 	.word	0x00001fa5
    25f4:	00450002 	.word	0x00450002
    25f8:	00001f71 	.word	0x00001f71
    25fc:	00470002 	.word	0x00470002

00002600 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2600:	b580      	push	{r7, lr}
    2602:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2604:	2242      	movs	r2, #66	; 0x42
    2606:	2124      	movs	r1, #36	; 0x24
    2608:	4806      	ldr	r0, [pc, #24]	; (2624 <SPI_HI3593_CLOCK_init+0x24>)
    260a:	4b07      	ldr	r3, [pc, #28]	; (2628 <SPI_HI3593_CLOCK_init+0x28>)
    260c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    260e:	224a      	movs	r2, #74	; 0x4a
    2610:	2103      	movs	r1, #3
    2612:	4804      	ldr	r0, [pc, #16]	; (2624 <SPI_HI3593_CLOCK_init+0x24>)
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <SPI_HI3593_CLOCK_init+0x28>)
    2616:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    2618:	4804      	ldr	r0, [pc, #16]	; (262c <SPI_HI3593_CLOCK_init+0x2c>)
    261a:	4b05      	ldr	r3, [pc, #20]	; (2630 <SPI_HI3593_CLOCK_init+0x30>)
    261c:	4798      	blx	r3
}
    261e:	bf00      	nop
    2620:	bd80      	pop	{r7, pc}
    2622:	bf00      	nop
    2624:	40001c00 	.word	0x40001c00
    2628:	00001751 	.word	0x00001751
    262c:	40000800 	.word	0x40000800
    2630:	00001a17 	.word	0x00001a17

00002634 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    2634:	b580      	push	{r7, lr}
    2636:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    2638:	4b04      	ldr	r3, [pc, #16]	; (264c <SPI_HI3593_init+0x18>)
    263a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    263c:	4904      	ldr	r1, [pc, #16]	; (2650 <SPI_HI3593_init+0x1c>)
    263e:	4805      	ldr	r0, [pc, #20]	; (2654 <SPI_HI3593_init+0x20>)
    2640:	4b05      	ldr	r3, [pc, #20]	; (2658 <SPI_HI3593_init+0x24>)
    2642:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2644:	4b05      	ldr	r3, [pc, #20]	; (265c <SPI_HI3593_init+0x28>)
    2646:	4798      	blx	r3
}
    2648:	bf00      	nop
    264a:	bd80      	pop	{r7, pc}
    264c:	00002601 	.word	0x00002601
    2650:	43000800 	.word	0x43000800
    2654:	2000ded0 	.word	0x2000ded0
    2658:	00003b29 	.word	0x00003b29
    265c:	00002595 	.word	0x00002595

00002660 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    2660:	b580      	push	{r7, lr}
    2662:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2664:	2100      	movs	r1, #0
    2666:	2068      	movs	r0, #104	; 0x68
    2668:	4b07      	ldr	r3, [pc, #28]	; (2688 <I2C_FANS_PORT_init+0x28>)
    266a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    266c:	4907      	ldr	r1, [pc, #28]	; (268c <I2C_FANS_PORT_init+0x2c>)
    266e:	2068      	movs	r0, #104	; 0x68
    2670:	4b07      	ldr	r3, [pc, #28]	; (2690 <I2C_FANS_PORT_init+0x30>)
    2672:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2674:	2100      	movs	r1, #0
    2676:	2069      	movs	r0, #105	; 0x69
    2678:	4b03      	ldr	r3, [pc, #12]	; (2688 <I2C_FANS_PORT_init+0x28>)
    267a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    267c:	4905      	ldr	r1, [pc, #20]	; (2694 <I2C_FANS_PORT_init+0x34>)
    267e:	2069      	movs	r0, #105	; 0x69
    2680:	4b03      	ldr	r3, [pc, #12]	; (2690 <I2C_FANS_PORT_init+0x30>)
    2682:	4798      	blx	r3
}
    2684:	bf00      	nop
    2686:	bd80      	pop	{r7, pc}
    2688:	00001f71 	.word	0x00001f71
    268c:	00680002 	.word	0x00680002
    2690:	00001fa5 	.word	0x00001fa5
    2694:	00690002 	.word	0x00690002

00002698 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2698:	b580      	push	{r7, lr}
    269a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    269c:	2244      	movs	r2, #68	; 0x44
    269e:	2125      	movs	r1, #37	; 0x25
    26a0:	4806      	ldr	r0, [pc, #24]	; (26bc <I2C_FANS_CLOCK_init+0x24>)
    26a2:	4b07      	ldr	r3, [pc, #28]	; (26c0 <I2C_FANS_CLOCK_init+0x28>)
    26a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    26a6:	224a      	movs	r2, #74	; 0x4a
    26a8:	2103      	movs	r1, #3
    26aa:	4804      	ldr	r0, [pc, #16]	; (26bc <I2C_FANS_CLOCK_init+0x24>)
    26ac:	4b04      	ldr	r3, [pc, #16]	; (26c0 <I2C_FANS_CLOCK_init+0x28>)
    26ae:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    26b0:	4804      	ldr	r0, [pc, #16]	; (26c4 <I2C_FANS_CLOCK_init+0x2c>)
    26b2:	4b05      	ldr	r3, [pc, #20]	; (26c8 <I2C_FANS_CLOCK_init+0x30>)
    26b4:	4798      	blx	r3
}
    26b6:	bf00      	nop
    26b8:	bd80      	pop	{r7, pc}
    26ba:	bf00      	nop
    26bc:	40001c00 	.word	0x40001c00
    26c0:	00001751 	.word	0x00001751
    26c4:	40000800 	.word	0x40000800
    26c8:	00001a37 	.word	0x00001a37

000026cc <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    26d0:	4b04      	ldr	r3, [pc, #16]	; (26e4 <I2C_FANS_init+0x18>)
    26d2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    26d4:	4904      	ldr	r1, [pc, #16]	; (26e8 <I2C_FANS_init+0x1c>)
    26d6:	4805      	ldr	r0, [pc, #20]	; (26ec <I2C_FANS_init+0x20>)
    26d8:	4b05      	ldr	r3, [pc, #20]	; (26f0 <I2C_FANS_init+0x24>)
    26da:	4798      	blx	r3
	I2C_FANS_PORT_init();
    26dc:	4b05      	ldr	r3, [pc, #20]	; (26f4 <I2C_FANS_init+0x28>)
    26de:	4798      	blx	r3
}
    26e0:	bf00      	nop
    26e2:	bd80      	pop	{r7, pc}
    26e4:	00002699 	.word	0x00002699
    26e8:	43000c00 	.word	0x43000c00
    26ec:	2000df00 	.word	0x2000df00
    26f0:	00003871 	.word	0x00003871
    26f4:	00002661 	.word	0x00002661

000026f8 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    26fc:	4808      	ldr	r0, [pc, #32]	; (2720 <TIMER_USB_init+0x28>)
    26fe:	4b09      	ldr	r3, [pc, #36]	; (2724 <TIMER_USB_init+0x2c>)
    2700:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2702:	2243      	movs	r2, #67	; 0x43
    2704:	2109      	movs	r1, #9
    2706:	4808      	ldr	r0, [pc, #32]	; (2728 <TIMER_USB_init+0x30>)
    2708:	4b08      	ldr	r3, [pc, #32]	; (272c <TIMER_USB_init+0x34>)
    270a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    270c:	4b08      	ldr	r3, [pc, #32]	; (2730 <TIMER_USB_init+0x38>)
    270e:	4798      	blx	r3
    2710:	4603      	mov	r3, r0
    2712:	461a      	mov	r2, r3
    2714:	4907      	ldr	r1, [pc, #28]	; (2734 <TIMER_USB_init+0x3c>)
    2716:	4808      	ldr	r0, [pc, #32]	; (2738 <TIMER_USB_init+0x40>)
    2718:	4b08      	ldr	r3, [pc, #32]	; (273c <TIMER_USB_init+0x44>)
    271a:	4798      	blx	r3
}
    271c:	bf00      	nop
    271e:	bd80      	pop	{r7, pc}
    2720:	40000800 	.word	0x40000800
    2724:	00001857 	.word	0x00001857
    2728:	40001c00 	.word	0x40001c00
    272c:	00001751 	.word	0x00001751
    2730:	00009ea1 	.word	0x00009ea1
    2734:	40003800 	.word	0x40003800
    2738:	2000e048 	.word	0x2000e048
    273c:	00003db9 	.word	0x00003db9

00002740 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2740:	b580      	push	{r7, lr}
    2742:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2744:	4808      	ldr	r0, [pc, #32]	; (2768 <TIMER_ARINC_init+0x28>)
    2746:	4b09      	ldr	r3, [pc, #36]	; (276c <TIMER_ARINC_init+0x2c>)
    2748:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    274a:	2244      	movs	r2, #68	; 0x44
    274c:	211a      	movs	r1, #26
    274e:	4808      	ldr	r0, [pc, #32]	; (2770 <TIMER_ARINC_init+0x30>)
    2750:	4b08      	ldr	r3, [pc, #32]	; (2774 <TIMER_ARINC_init+0x34>)
    2752:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2754:	4b08      	ldr	r3, [pc, #32]	; (2778 <TIMER_ARINC_init+0x38>)
    2756:	4798      	blx	r3
    2758:	4603      	mov	r3, r0
    275a:	461a      	mov	r2, r3
    275c:	4907      	ldr	r1, [pc, #28]	; (277c <TIMER_ARINC_init+0x3c>)
    275e:	4808      	ldr	r0, [pc, #32]	; (2780 <TIMER_ARINC_init+0x40>)
    2760:	4b08      	ldr	r3, [pc, #32]	; (2784 <TIMER_ARINC_init+0x44>)
    2762:	4798      	blx	r3
}
    2764:	bf00      	nop
    2766:	bd80      	pop	{r7, pc}
    2768:	40000800 	.word	0x40000800
    276c:	00001937 	.word	0x00001937
    2770:	40001c00 	.word	0x40001c00
    2774:	00001751 	.word	0x00001751
    2778:	00009ea1 	.word	0x00009ea1
    277c:	4101a000 	.word	0x4101a000
    2780:	2000e028 	.word	0x2000e028
    2784:	00003db9 	.word	0x00003db9

00002788 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2788:	b580      	push	{r7, lr}
    278a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    278c:	4808      	ldr	r0, [pc, #32]	; (27b0 <TIMER_MAINTENANCE_init+0x28>)
    278e:	4b09      	ldr	r3, [pc, #36]	; (27b4 <TIMER_MAINTENANCE_init+0x2c>)
    2790:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2792:	2246      	movs	r2, #70	; 0x46
    2794:	211e      	movs	r1, #30
    2796:	4808      	ldr	r0, [pc, #32]	; (27b8 <TIMER_MAINTENANCE_init+0x30>)
    2798:	4b08      	ldr	r3, [pc, #32]	; (27bc <TIMER_MAINTENANCE_init+0x34>)
    279a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    279c:	4b08      	ldr	r3, [pc, #32]	; (27c0 <TIMER_MAINTENANCE_init+0x38>)
    279e:	4798      	blx	r3
    27a0:	4603      	mov	r3, r0
    27a2:	461a      	mov	r2, r3
    27a4:	4907      	ldr	r1, [pc, #28]	; (27c4 <TIMER_MAINTENANCE_init+0x3c>)
    27a6:	4808      	ldr	r0, [pc, #32]	; (27c8 <TIMER_MAINTENANCE_init+0x40>)
    27a8:	4b08      	ldr	r3, [pc, #32]	; (27cc <TIMER_MAINTENANCE_init+0x44>)
    27aa:	4798      	blx	r3
}
    27ac:	bf00      	nop
    27ae:	bd80      	pop	{r7, pc}
    27b0:	40000800 	.word	0x40000800
    27b4:	00001977 	.word	0x00001977
    27b8:	40001c00 	.word	0x40001c00
    27bc:	00001751 	.word	0x00001751
    27c0:	00009ea1 	.word	0x00009ea1
    27c4:	42001400 	.word	0x42001400
    27c8:	2000df20 	.word	0x2000df20
    27cc:	00003db9 	.word	0x00003db9

000027d0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    27d4:	4808      	ldr	r0, [pc, #32]	; (27f8 <TIMER_INTERFACE_init+0x28>)
    27d6:	4b09      	ldr	r3, [pc, #36]	; (27fc <TIMER_INTERFACE_init+0x2c>)
    27d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27da:	2246      	movs	r2, #70	; 0x46
    27dc:	211e      	movs	r1, #30
    27de:	4808      	ldr	r0, [pc, #32]	; (2800 <TIMER_INTERFACE_init+0x30>)
    27e0:	4b08      	ldr	r3, [pc, #32]	; (2804 <TIMER_INTERFACE_init+0x34>)
    27e2:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    27e4:	4b08      	ldr	r3, [pc, #32]	; (2808 <TIMER_INTERFACE_init+0x38>)
    27e6:	4798      	blx	r3
    27e8:	4603      	mov	r3, r0
    27ea:	461a      	mov	r2, r3
    27ec:	4907      	ldr	r1, [pc, #28]	; (280c <TIMER_INTERFACE_init+0x3c>)
    27ee:	4808      	ldr	r0, [pc, #32]	; (2810 <TIMER_INTERFACE_init+0x40>)
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <TIMER_INTERFACE_init+0x44>)
    27f2:	4798      	blx	r3
}
    27f4:	bf00      	nop
    27f6:	bd80      	pop	{r7, pc}
    27f8:	40000800 	.word	0x40000800
    27fc:	00001997 	.word	0x00001997
    2800:	40001c00 	.word	0x40001c00
    2804:	00001751 	.word	0x00001751
    2808:	00009ea1 	.word	0x00009ea1
    280c:	42001800 	.word	0x42001800
    2810:	2000df64 	.word	0x2000df64
    2814:	00003db9 	.word	0x00003db9

00002818 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2818:	b580      	push	{r7, lr}
    281a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    281c:	4808      	ldr	r0, [pc, #32]	; (2840 <TIMER_EVENT_init+0x28>)
    281e:	4b09      	ldr	r3, [pc, #36]	; (2844 <TIMER_EVENT_init+0x2c>)
    2820:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2822:	2246      	movs	r2, #70	; 0x46
    2824:	2127      	movs	r1, #39	; 0x27
    2826:	4808      	ldr	r0, [pc, #32]	; (2848 <TIMER_EVENT_init+0x30>)
    2828:	4b08      	ldr	r3, [pc, #32]	; (284c <TIMER_EVENT_init+0x34>)
    282a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    282c:	4b08      	ldr	r3, [pc, #32]	; (2850 <TIMER_EVENT_init+0x38>)
    282e:	4798      	blx	r3
    2830:	4603      	mov	r3, r0
    2832:	461a      	mov	r2, r3
    2834:	4907      	ldr	r1, [pc, #28]	; (2854 <TIMER_EVENT_init+0x3c>)
    2836:	4808      	ldr	r0, [pc, #32]	; (2858 <TIMER_EVENT_init+0x40>)
    2838:	4b08      	ldr	r3, [pc, #32]	; (285c <TIMER_EVENT_init+0x44>)
    283a:	4798      	blx	r3
}
    283c:	bf00      	nop
    283e:	bd80      	pop	{r7, pc}
    2840:	40000800 	.word	0x40000800
    2844:	00001a57 	.word	0x00001a57
    2848:	40001c00 	.word	0x40001c00
    284c:	00001751 	.word	0x00001751
    2850:	00009ea1 	.word	0x00009ea1
    2854:	43001400 	.word	0x43001400
    2858:	2000df44 	.word	0x2000df44
    285c:	00003db9 	.word	0x00003db9

00002860 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2860:	b480      	push	{r7}
    2862:	af00      	add	r7, sp, #0
}
    2864:	bf00      	nop
    2866:	46bd      	mov	sp, r7
    2868:	f85d 7b04 	ldr.w	r7, [sp], #4
    286c:	4770      	bx	lr
	...

00002870 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2870:	b580      	push	{r7, lr}
    2872:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2874:	4804      	ldr	r0, [pc, #16]	; (2888 <LIVE_PULSE_CLOCK_init+0x18>)
    2876:	4b05      	ldr	r3, [pc, #20]	; (288c <LIVE_PULSE_CLOCK_init+0x1c>)
    2878:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    287a:	2240      	movs	r2, #64	; 0x40
    287c:	2127      	movs	r1, #39	; 0x27
    287e:	4804      	ldr	r0, [pc, #16]	; (2890 <LIVE_PULSE_CLOCK_init+0x20>)
    2880:	4b04      	ldr	r3, [pc, #16]	; (2894 <LIVE_PULSE_CLOCK_init+0x24>)
    2882:	4798      	blx	r3
}
    2884:	bf00      	nop
    2886:	bd80      	pop	{r7, pc}
    2888:	40000800 	.word	0x40000800
    288c:	00001a77 	.word	0x00001a77
    2890:	40001c00 	.word	0x40001c00
    2894:	00001751 	.word	0x00001751

00002898 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2898:	b580      	push	{r7, lr}
    289a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    289c:	4b06      	ldr	r3, [pc, #24]	; (28b8 <LIVE_PULSE_init+0x20>)
    289e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    28a0:	4b06      	ldr	r3, [pc, #24]	; (28bc <LIVE_PULSE_init+0x24>)
    28a2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    28a4:	4b06      	ldr	r3, [pc, #24]	; (28c0 <LIVE_PULSE_init+0x28>)
    28a6:	4798      	blx	r3
    28a8:	4603      	mov	r3, r0
    28aa:	461a      	mov	r2, r3
    28ac:	4905      	ldr	r1, [pc, #20]	; (28c4 <LIVE_PULSE_init+0x2c>)
    28ae:	4806      	ldr	r0, [pc, #24]	; (28c8 <LIVE_PULSE_init+0x30>)
    28b0:	4b06      	ldr	r3, [pc, #24]	; (28cc <LIVE_PULSE_init+0x34>)
    28b2:	4798      	blx	r3
}
    28b4:	bf00      	nop
    28b6:	bd80      	pop	{r7, pc}
    28b8:	00002871 	.word	0x00002871
    28bc:	00002861 	.word	0x00002861
    28c0:	00009eb5 	.word	0x00009eb5
    28c4:	43001800 	.word	0x43001800
    28c8:	2000dfa4 	.word	0x2000dfa4
    28cc:	0000396d 	.word	0x0000396d

000028d0 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    28d0:	b580      	push	{r7, lr}
    28d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    28d4:	4804      	ldr	r0, [pc, #16]	; (28e8 <TIMER_HVAC_CLOCK_init+0x18>)
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <TIMER_HVAC_CLOCK_init+0x1c>)
    28d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    28da:	2244      	movs	r2, #68	; 0x44
    28dc:	2119      	movs	r1, #25
    28de:	4804      	ldr	r0, [pc, #16]	; (28f0 <TIMER_HVAC_CLOCK_init+0x20>)
    28e0:	4b04      	ldr	r3, [pc, #16]	; (28f4 <TIMER_HVAC_CLOCK_init+0x24>)
    28e2:	4798      	blx	r3
}
    28e4:	bf00      	nop
    28e6:	bd80      	pop	{r7, pc}
    28e8:	40000800 	.word	0x40000800
    28ec:	000018f7 	.word	0x000018f7
    28f0:	40001c00 	.word	0x40001c00
    28f4:	00001751 	.word	0x00001751

000028f8 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    28fc:	4b05      	ldr	r3, [pc, #20]	; (2914 <TIMER_HVAC_init+0x1c>)
    28fe:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    2900:	4b05      	ldr	r3, [pc, #20]	; (2918 <TIMER_HVAC_init+0x20>)
    2902:	4798      	blx	r3
    2904:	4603      	mov	r3, r0
    2906:	461a      	mov	r2, r3
    2908:	4904      	ldr	r1, [pc, #16]	; (291c <TIMER_HVAC_init+0x24>)
    290a:	4805      	ldr	r0, [pc, #20]	; (2920 <TIMER_HVAC_init+0x28>)
    290c:	4b05      	ldr	r3, [pc, #20]	; (2924 <TIMER_HVAC_init+0x2c>)
    290e:	4798      	blx	r3
}
    2910:	bf00      	nop
    2912:	bd80      	pop	{r7, pc}
    2914:	000028d1 	.word	0x000028d1
    2918:	00009285 	.word	0x00009285
    291c:	41016000 	.word	0x41016000
    2920:	2000e068 	.word	0x2000e068
    2924:	00003db9 	.word	0x00003db9

00002928 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2928:	b580      	push	{r7, lr}
    292a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    292c:	4804      	ldr	r0, [pc, #16]	; (2940 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    292e:	4b05      	ldr	r3, [pc, #20]	; (2944 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2930:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2932:	2244      	movs	r2, #68	; 0x44
    2934:	2119      	movs	r1, #25
    2936:	4804      	ldr	r0, [pc, #16]	; (2948 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    293a:	4798      	blx	r3
}
    293c:	bf00      	nop
    293e:	bd80      	pop	{r7, pc}
    2940:	40000800 	.word	0x40000800
    2944:	00001917 	.word	0x00001917
    2948:	40001c00 	.word	0x40001c00
    294c:	00001751 	.word	0x00001751

00002950 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2950:	b580      	push	{r7, lr}
    2952:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2954:	4b05      	ldr	r3, [pc, #20]	; (296c <TIMER_TEMPERATURES_init+0x1c>)
    2956:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2958:	4b05      	ldr	r3, [pc, #20]	; (2970 <TIMER_TEMPERATURES_init+0x20>)
    295a:	4798      	blx	r3
    295c:	4603      	mov	r3, r0
    295e:	461a      	mov	r2, r3
    2960:	4904      	ldr	r1, [pc, #16]	; (2974 <TIMER_TEMPERATURES_init+0x24>)
    2962:	4805      	ldr	r0, [pc, #20]	; (2978 <TIMER_TEMPERATURES_init+0x28>)
    2964:	4b05      	ldr	r3, [pc, #20]	; (297c <TIMER_TEMPERATURES_init+0x2c>)
    2966:	4798      	blx	r3
}
    2968:	bf00      	nop
    296a:	bd80      	pop	{r7, pc}
    296c:	00002929 	.word	0x00002929
    2970:	00009285 	.word	0x00009285
    2974:	41018000 	.word	0x41018000
    2978:	2000deb0 	.word	0x2000deb0
    297c:	00003db9 	.word	0x00003db9

00002980 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    2980:	b580      	push	{r7, lr}
    2982:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2984:	4804      	ldr	r0, [pc, #16]	; (2998 <TIMER_CCU_CLOCK_init+0x18>)
    2986:	4b05      	ldr	r3, [pc, #20]	; (299c <TIMER_CCU_CLOCK_init+0x1c>)
    2988:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    298a:	2240      	movs	r2, #64	; 0x40
    298c:	211d      	movs	r1, #29
    298e:	4804      	ldr	r0, [pc, #16]	; (29a0 <TIMER_CCU_CLOCK_init+0x20>)
    2990:	4b04      	ldr	r3, [pc, #16]	; (29a4 <TIMER_CCU_CLOCK_init+0x24>)
    2992:	4798      	blx	r3
}
    2994:	bf00      	nop
    2996:	bd80      	pop	{r7, pc}
    2998:	40000800 	.word	0x40000800
    299c:	00001957 	.word	0x00001957
    29a0:	40001c00 	.word	0x40001c00
    29a4:	00001751 	.word	0x00001751

000029a8 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    29ac:	4b05      	ldr	r3, [pc, #20]	; (29c4 <TIMER_CCU_init+0x1c>)
    29ae:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    29b0:	4b05      	ldr	r3, [pc, #20]	; (29c8 <TIMER_CCU_init+0x20>)
    29b2:	4798      	blx	r3
    29b4:	4603      	mov	r3, r0
    29b6:	461a      	mov	r2, r3
    29b8:	4904      	ldr	r1, [pc, #16]	; (29cc <TIMER_CCU_init+0x24>)
    29ba:	4805      	ldr	r0, [pc, #20]	; (29d0 <TIMER_CCU_init+0x28>)
    29bc:	4b05      	ldr	r3, [pc, #20]	; (29d4 <TIMER_CCU_init+0x2c>)
    29be:	4798      	blx	r3
}
    29c0:	bf00      	nop
    29c2:	bd80      	pop	{r7, pc}
    29c4:	00002981 	.word	0x00002981
    29c8:	00009285 	.word	0x00009285
    29cc:	42000c00 	.word	0x42000c00
    29d0:	2000dfc0 	.word	0x2000dfc0
    29d4:	00003db9 	.word	0x00003db9

000029d8 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    29d8:	b580      	push	{r7, lr}
    29da:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    29dc:	2102      	movs	r1, #2
    29de:	2018      	movs	r0, #24
    29e0:	4b0f      	ldr	r3, [pc, #60]	; (2a20 <CDCUSB_PORT_init+0x48>)
    29e2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    29e4:	2100      	movs	r1, #0
    29e6:	2018      	movs	r0, #24
    29e8:	4b0e      	ldr	r3, [pc, #56]	; (2a24 <CDCUSB_PORT_init+0x4c>)
    29ea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    29ec:	2100      	movs	r1, #0
    29ee:	2018      	movs	r0, #24
    29f0:	4b0d      	ldr	r3, [pc, #52]	; (2a28 <CDCUSB_PORT_init+0x50>)
    29f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    29f4:	490d      	ldr	r1, [pc, #52]	; (2a2c <CDCUSB_PORT_init+0x54>)
    29f6:	2018      	movs	r0, #24
    29f8:	4b0d      	ldr	r3, [pc, #52]	; (2a30 <CDCUSB_PORT_init+0x58>)
    29fa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    29fc:	2102      	movs	r1, #2
    29fe:	2019      	movs	r0, #25
    2a00:	4b07      	ldr	r3, [pc, #28]	; (2a20 <CDCUSB_PORT_init+0x48>)
    2a02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2a04:	2100      	movs	r1, #0
    2a06:	2019      	movs	r0, #25
    2a08:	4b06      	ldr	r3, [pc, #24]	; (2a24 <CDCUSB_PORT_init+0x4c>)
    2a0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2a0c:	2100      	movs	r1, #0
    2a0e:	2019      	movs	r0, #25
    2a10:	4b05      	ldr	r3, [pc, #20]	; (2a28 <CDCUSB_PORT_init+0x50>)
    2a12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2a14:	4907      	ldr	r1, [pc, #28]	; (2a34 <CDCUSB_PORT_init+0x5c>)
    2a16:	2019      	movs	r0, #25
    2a18:	4b05      	ldr	r3, [pc, #20]	; (2a30 <CDCUSB_PORT_init+0x58>)
    2a1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2a1c:	bf00      	nop
    2a1e:	bd80      	pop	{r7, pc}
    2a20:	00001fc5 	.word	0x00001fc5
    2a24:	00001ffd 	.word	0x00001ffd
    2a28:	00001f71 	.word	0x00001f71
    2a2c:	00180007 	.word	0x00180007
    2a30:	00001fa5 	.word	0x00001fa5
    2a34:	00190007 	.word	0x00190007

00002a38 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2a3c:	2242      	movs	r2, #66	; 0x42
    2a3e:	210a      	movs	r1, #10
    2a40:	4805      	ldr	r0, [pc, #20]	; (2a58 <CDCUSB_CLOCK_init+0x20>)
    2a42:	4b06      	ldr	r3, [pc, #24]	; (2a5c <CDCUSB_CLOCK_init+0x24>)
    2a44:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2a46:	4806      	ldr	r0, [pc, #24]	; (2a60 <CDCUSB_CLOCK_init+0x28>)
    2a48:	4b06      	ldr	r3, [pc, #24]	; (2a64 <CDCUSB_CLOCK_init+0x2c>)
    2a4a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2a4c:	4804      	ldr	r0, [pc, #16]	; (2a60 <CDCUSB_CLOCK_init+0x28>)
    2a4e:	4b06      	ldr	r3, [pc, #24]	; (2a68 <CDCUSB_CLOCK_init+0x30>)
    2a50:	4798      	blx	r3
}
    2a52:	bf00      	nop
    2a54:	bd80      	pop	{r7, pc}
    2a56:	bf00      	nop
    2a58:	40001c00 	.word	0x40001c00
    2a5c:	00001751 	.word	0x00001751
    2a60:	40000800 	.word	0x40000800
    2a64:	00001777 	.word	0x00001777
    2a68:	00001877 	.word	0x00001877

00002a6c <CDCUSB_init>:

void CDCUSB_init(void)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2a70:	4b03      	ldr	r3, [pc, #12]	; (2a80 <CDCUSB_init+0x14>)
    2a72:	4798      	blx	r3
	usb_d_init();
    2a74:	4b03      	ldr	r3, [pc, #12]	; (2a84 <CDCUSB_init+0x18>)
    2a76:	4798      	blx	r3
	CDCUSB_PORT_init();
    2a78:	4b03      	ldr	r3, [pc, #12]	; (2a88 <CDCUSB_init+0x1c>)
    2a7a:	4798      	blx	r3
}
    2a7c:	bf00      	nop
    2a7e:	bd80      	pop	{r7, pc}
    2a80:	00002a39 	.word	0x00002a39
    2a84:	00004615 	.word	0x00004615
    2a88:	000029d9 	.word	0x000029d9

00002a8c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2a90:	4802      	ldr	r0, [pc, #8]	; (2a9c <WATCHDOG_CLOCK_init+0x10>)
    2a92:	4b03      	ldr	r3, [pc, #12]	; (2aa0 <WATCHDOG_CLOCK_init+0x14>)
    2a94:	4798      	blx	r3
}
    2a96:	bf00      	nop
    2a98:	bd80      	pop	{r7, pc}
    2a9a:	bf00      	nop
    2a9c:	40000800 	.word	0x40000800
    2aa0:	000017f7 	.word	0x000017f7

00002aa4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2aa8:	4b03      	ldr	r3, [pc, #12]	; (2ab8 <WATCHDOG_init+0x14>)
    2aaa:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2aac:	4903      	ldr	r1, [pc, #12]	; (2abc <WATCHDOG_init+0x18>)
    2aae:	4804      	ldr	r0, [pc, #16]	; (2ac0 <WATCHDOG_init+0x1c>)
    2ab0:	4b04      	ldr	r3, [pc, #16]	; (2ac4 <WATCHDOG_init+0x20>)
    2ab2:	4798      	blx	r3
}
    2ab4:	bf00      	nop
    2ab6:	bd80      	pop	{r7, pc}
    2ab8:	00002a8d 	.word	0x00002a8d
    2abc:	40002000 	.word	0x40002000
    2ac0:	2000e0a8 	.word	0x2000e0a8
    2ac4:	00002045 	.word	0x00002045

00002ac8 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2acc:	4904      	ldr	r1, [pc, #16]	; (2ae0 <CAN_CCU_PORT_init+0x18>)
    2ace:	202d      	movs	r0, #45	; 0x2d
    2ad0:	4b04      	ldr	r3, [pc, #16]	; (2ae4 <CAN_CCU_PORT_init+0x1c>)
    2ad2:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2ad4:	4904      	ldr	r1, [pc, #16]	; (2ae8 <CAN_CCU_PORT_init+0x20>)
    2ad6:	202c      	movs	r0, #44	; 0x2c
    2ad8:	4b02      	ldr	r3, [pc, #8]	; (2ae4 <CAN_CCU_PORT_init+0x1c>)
    2ada:	4798      	blx	r3
}
    2adc:	bf00      	nop
    2ade:	bd80      	pop	{r7, pc}
    2ae0:	002d0007 	.word	0x002d0007
    2ae4:	00001fa5 	.word	0x00001fa5
    2ae8:	002c0007 	.word	0x002c0007

00002aec <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2af0:	4807      	ldr	r0, [pc, #28]	; (2b10 <CAN_CCU_init+0x24>)
    2af2:	4b08      	ldr	r3, [pc, #32]	; (2b14 <CAN_CCU_init+0x28>)
    2af4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2af6:	2249      	movs	r2, #73	; 0x49
    2af8:	211c      	movs	r1, #28
    2afa:	4807      	ldr	r0, [pc, #28]	; (2b18 <CAN_CCU_init+0x2c>)
    2afc:	4b07      	ldr	r3, [pc, #28]	; (2b1c <CAN_CCU_init+0x30>)
    2afe:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2b00:	4907      	ldr	r1, [pc, #28]	; (2b20 <CAN_CCU_init+0x34>)
    2b02:	4808      	ldr	r0, [pc, #32]	; (2b24 <CAN_CCU_init+0x38>)
    2b04:	4b08      	ldr	r3, [pc, #32]	; (2b28 <CAN_CCU_init+0x3c>)
    2b06:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2b08:	4b08      	ldr	r3, [pc, #32]	; (2b2c <CAN_CCU_init+0x40>)
    2b0a:	4798      	blx	r3
}
    2b0c:	bf00      	nop
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	40000800 	.word	0x40000800
    2b14:	000017b7 	.word	0x000017b7
    2b18:	40001c00 	.word	0x40001c00
    2b1c:	00001751 	.word	0x00001751
    2b20:	42000400 	.word	0x42000400
    2b24:	2000e000 	.word	0x2000e000
    2b28:	00003259 	.word	0x00003259
    2b2c:	00002ac9 	.word	0x00002ac9

00002b30 <system_init>:

void system_init(void)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	af00      	add	r7, sp, #0
	init_mcu();
    2b34:	4b5f      	ldr	r3, [pc, #380]	; (2cb4 <system_init+0x184>)
    2b36:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    2b38:	2100      	movs	r1, #0
    2b3a:	2007      	movs	r0, #7
    2b3c:	4b5e      	ldr	r3, [pc, #376]	; (2cb8 <system_init+0x188>)
    2b3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2b40:	2102      	movs	r1, #2
    2b42:	2007      	movs	r0, #7
    2b44:	4b5d      	ldr	r3, [pc, #372]	; (2cbc <system_init+0x18c>)
    2b46:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2b48:	f04f 31ff 	mov.w	r1, #4294967295
    2b4c:	2007      	movs	r0, #7
    2b4e:	4b5c      	ldr	r3, [pc, #368]	; (2cc0 <system_init+0x190>)
    2b50:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2b52:	2101      	movs	r1, #1
    2b54:	200f      	movs	r0, #15
    2b56:	4b58      	ldr	r3, [pc, #352]	; (2cb8 <system_init+0x188>)
    2b58:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2b5a:	2102      	movs	r1, #2
    2b5c:	200f      	movs	r0, #15
    2b5e:	4b57      	ldr	r3, [pc, #348]	; (2cbc <system_init+0x18c>)
    2b60:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2b62:	f04f 31ff 	mov.w	r1, #4294967295
    2b66:	200f      	movs	r0, #15
    2b68:	4b55      	ldr	r3, [pc, #340]	; (2cc0 <system_init+0x190>)
    2b6a:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2b6c:	2101      	movs	r1, #1
    2b6e:	2013      	movs	r0, #19
    2b70:	4b51      	ldr	r3, [pc, #324]	; (2cb8 <system_init+0x188>)
    2b72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2b74:	2102      	movs	r1, #2
    2b76:	2013      	movs	r0, #19
    2b78:	4b50      	ldr	r3, [pc, #320]	; (2cbc <system_init+0x18c>)
    2b7a:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2b7c:	f04f 31ff 	mov.w	r1, #4294967295
    2b80:	2013      	movs	r0, #19
    2b82:	4b4f      	ldr	r3, [pc, #316]	; (2cc0 <system_init+0x190>)
    2b84:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2b86:	2101      	movs	r1, #1
    2b88:	201b      	movs	r0, #27
    2b8a:	4b4b      	ldr	r3, [pc, #300]	; (2cb8 <system_init+0x188>)
    2b8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2b8e:	2102      	movs	r1, #2
    2b90:	201b      	movs	r0, #27
    2b92:	4b4a      	ldr	r3, [pc, #296]	; (2cbc <system_init+0x18c>)
    2b94:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2b96:	f04f 31ff 	mov.w	r1, #4294967295
    2b9a:	201b      	movs	r0, #27
    2b9c:	4b48      	ldr	r3, [pc, #288]	; (2cc0 <system_init+0x190>)
    2b9e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2ba0:	2101      	movs	r1, #1
    2ba2:	2027      	movs	r0, #39	; 0x27
    2ba4:	4b44      	ldr	r3, [pc, #272]	; (2cb8 <system_init+0x188>)
    2ba6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2ba8:	2102      	movs	r1, #2
    2baa:	2027      	movs	r0, #39	; 0x27
    2bac:	4b43      	ldr	r3, [pc, #268]	; (2cbc <system_init+0x18c>)
    2bae:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2bb0:	f04f 31ff 	mov.w	r1, #4294967295
    2bb4:	2027      	movs	r0, #39	; 0x27
    2bb6:	4b42      	ldr	r3, [pc, #264]	; (2cc0 <system_init+0x190>)
    2bb8:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2bba:	2101      	movs	r1, #1
    2bbc:	203d      	movs	r0, #61	; 0x3d
    2bbe:	4b3e      	ldr	r3, [pc, #248]	; (2cb8 <system_init+0x188>)
    2bc0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2bc2:	2102      	movs	r1, #2
    2bc4:	203d      	movs	r0, #61	; 0x3d
    2bc6:	4b3d      	ldr	r3, [pc, #244]	; (2cbc <system_init+0x18c>)
    2bc8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2bca:	f04f 31ff 	mov.w	r1, #4294967295
    2bce:	203d      	movs	r0, #61	; 0x3d
    2bd0:	4b3b      	ldr	r3, [pc, #236]	; (2cc0 <system_init+0x190>)
    2bd2:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2bd4:	2101      	movs	r1, #1
    2bd6:	203f      	movs	r0, #63	; 0x3f
    2bd8:	4b38      	ldr	r3, [pc, #224]	; (2cbc <system_init+0x18c>)
    2bda:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2bdc:	2101      	movs	r1, #1
    2bde:	203f      	movs	r0, #63	; 0x3f
    2be0:	4b38      	ldr	r3, [pc, #224]	; (2cc4 <system_init+0x194>)
    2be2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2be4:	f04f 31ff 	mov.w	r1, #4294967295
    2be8:	203f      	movs	r0, #63	; 0x3f
    2bea:	4b35      	ldr	r3, [pc, #212]	; (2cc0 <system_init+0x190>)
    2bec:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2bee:	2100      	movs	r1, #0
    2bf0:	204d      	movs	r0, #77	; 0x4d
    2bf2:	4b31      	ldr	r3, [pc, #196]	; (2cb8 <system_init+0x188>)
    2bf4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2bf6:	2102      	movs	r1, #2
    2bf8:	204d      	movs	r0, #77	; 0x4d
    2bfa:	4b30      	ldr	r3, [pc, #192]	; (2cbc <system_init+0x18c>)
    2bfc:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2bfe:	f04f 31ff 	mov.w	r1, #4294967295
    2c02:	204d      	movs	r0, #77	; 0x4d
    2c04:	4b2e      	ldr	r3, [pc, #184]	; (2cc0 <system_init+0x190>)
    2c06:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2c08:	2101      	movs	r1, #1
    2c0a:	204e      	movs	r0, #78	; 0x4e
    2c0c:	4b2a      	ldr	r3, [pc, #168]	; (2cb8 <system_init+0x188>)
    2c0e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2c10:	2102      	movs	r1, #2
    2c12:	204e      	movs	r0, #78	; 0x4e
    2c14:	4b29      	ldr	r3, [pc, #164]	; (2cbc <system_init+0x18c>)
    2c16:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2c18:	f04f 31ff 	mov.w	r1, #4294967295
    2c1c:	204e      	movs	r0, #78	; 0x4e
    2c1e:	4b28      	ldr	r3, [pc, #160]	; (2cc0 <system_init+0x190>)
    2c20:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2c22:	2100      	movs	r1, #0
    2c24:	204f      	movs	r0, #79	; 0x4f
    2c26:	4b24      	ldr	r3, [pc, #144]	; (2cb8 <system_init+0x188>)
    2c28:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2c2a:	2102      	movs	r1, #2
    2c2c:	204f      	movs	r0, #79	; 0x4f
    2c2e:	4b23      	ldr	r3, [pc, #140]	; (2cbc <system_init+0x18c>)
    2c30:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2c32:	f04f 31ff 	mov.w	r1, #4294967295
    2c36:	204f      	movs	r0, #79	; 0x4f
    2c38:	4b21      	ldr	r3, [pc, #132]	; (2cc0 <system_init+0x190>)
    2c3a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2c3c:	2100      	movs	r1, #0
    2c3e:	2052      	movs	r0, #82	; 0x52
    2c40:	4b1d      	ldr	r3, [pc, #116]	; (2cb8 <system_init+0x188>)
    2c42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2c44:	2102      	movs	r1, #2
    2c46:	2052      	movs	r0, #82	; 0x52
    2c48:	4b1c      	ldr	r3, [pc, #112]	; (2cbc <system_init+0x18c>)
    2c4a:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2c4c:	f04f 31ff 	mov.w	r1, #4294967295
    2c50:	2052      	movs	r0, #82	; 0x52
    2c52:	4b1b      	ldr	r3, [pc, #108]	; (2cc0 <system_init+0x190>)
    2c54:	4798      	blx	r3

	CRC_CALC_init();
    2c56:	4b1c      	ldr	r3, [pc, #112]	; (2cc8 <system_init+0x198>)
    2c58:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2c5a:	4b1c      	ldr	r3, [pc, #112]	; (2ccc <system_init+0x19c>)
    2c5c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2c5e:	4b1c      	ldr	r3, [pc, #112]	; (2cd0 <system_init+0x1a0>)
    2c60:	4798      	blx	r3

	QSPI_N25Q256_init();
    2c62:	4b1c      	ldr	r3, [pc, #112]	; (2cd4 <system_init+0x1a4>)
    2c64:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2c66:	4b1c      	ldr	r3, [pc, #112]	; (2cd8 <system_init+0x1a8>)
    2c68:	4798      	blx	r3

	I2C_HEATERS_init();
    2c6a:	4b1c      	ldr	r3, [pc, #112]	; (2cdc <system_init+0x1ac>)
    2c6c:	4798      	blx	r3

	SPI_TEMP_init();
    2c6e:	4b1c      	ldr	r3, [pc, #112]	; (2ce0 <system_init+0x1b0>)
    2c70:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2c72:	4b1c      	ldr	r3, [pc, #112]	; (2ce4 <system_init+0x1b4>)
    2c74:	4798      	blx	r3

	SPI_HI3593_init();
    2c76:	4b1c      	ldr	r3, [pc, #112]	; (2ce8 <system_init+0x1b8>)
    2c78:	4798      	blx	r3

	I2C_FANS_init();
    2c7a:	4b1c      	ldr	r3, [pc, #112]	; (2cec <system_init+0x1bc>)
    2c7c:	4798      	blx	r3

	TIMER_USB_init();
    2c7e:	4b1c      	ldr	r3, [pc, #112]	; (2cf0 <system_init+0x1c0>)
    2c80:	4798      	blx	r3
	TIMER_ARINC_init();
    2c82:	4b1c      	ldr	r3, [pc, #112]	; (2cf4 <system_init+0x1c4>)
    2c84:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2c86:	4b1c      	ldr	r3, [pc, #112]	; (2cf8 <system_init+0x1c8>)
    2c88:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2c8a:	4b1c      	ldr	r3, [pc, #112]	; (2cfc <system_init+0x1cc>)
    2c8c:	4798      	blx	r3
	TIMER_EVENT_init();
    2c8e:	4b1c      	ldr	r3, [pc, #112]	; (2d00 <system_init+0x1d0>)
    2c90:	4798      	blx	r3
	LIVE_PULSE_init();
    2c92:	4b1c      	ldr	r3, [pc, #112]	; (2d04 <system_init+0x1d4>)
    2c94:	4798      	blx	r3

	TIMER_HVAC_init();
    2c96:	4b1c      	ldr	r3, [pc, #112]	; (2d08 <system_init+0x1d8>)
    2c98:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2c9a:	4b1c      	ldr	r3, [pc, #112]	; (2d0c <system_init+0x1dc>)
    2c9c:	4798      	blx	r3

	TIMER_CCU_init();
    2c9e:	4b1c      	ldr	r3, [pc, #112]	; (2d10 <system_init+0x1e0>)
    2ca0:	4798      	blx	r3

	CDCUSB_init();
    2ca2:	4b1c      	ldr	r3, [pc, #112]	; (2d14 <system_init+0x1e4>)
    2ca4:	4798      	blx	r3

	WATCHDOG_init();
    2ca6:	4b1c      	ldr	r3, [pc, #112]	; (2d18 <system_init+0x1e8>)
    2ca8:	4798      	blx	r3
	CAN_CCU_init();
    2caa:	4b1c      	ldr	r3, [pc, #112]	; (2d1c <system_init+0x1ec>)
    2cac:	4798      	blx	r3
}
    2cae:	bf00      	nop
    2cb0:	bd80      	pop	{r7, pc}
    2cb2:	bf00      	nop
    2cb4:	00002035 	.word	0x00002035
    2cb8:	00001ffd 	.word	0x00001ffd
    2cbc:	00001fc5 	.word	0x00001fc5
    2cc0:	00001fa5 	.word	0x00001fa5
    2cc4:	00001f71 	.word	0x00001f71
    2cc8:	00002095 	.word	0x00002095
    2ccc:	000020c1 	.word	0x000020c1
    2cd0:	000021e9 	.word	0x000021e9
    2cd4:	00002331 	.word	0x00002331
    2cd8:	00002375 	.word	0x00002375
    2cdc:	00002405 	.word	0x00002405
    2ce0:	000024d1 	.word	0x000024d1
    2ce4:	00002569 	.word	0x00002569
    2ce8:	00002635 	.word	0x00002635
    2cec:	000026cd 	.word	0x000026cd
    2cf0:	000026f9 	.word	0x000026f9
    2cf4:	00002741 	.word	0x00002741
    2cf8:	00002789 	.word	0x00002789
    2cfc:	000027d1 	.word	0x000027d1
    2d00:	00002819 	.word	0x00002819
    2d04:	00002899 	.word	0x00002899
    2d08:	000028f9 	.word	0x000028f9
    2d0c:	00002951 	.word	0x00002951
    2d10:	000029a9 	.word	0x000029a9
    2d14:	00002a6d 	.word	0x00002a6d
    2d18:	00002aa5 	.word	0x00002aa5
    2d1c:	00002aed 	.word	0x00002aed

00002d20 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    2d20:	b480      	push	{r7}
    2d22:	b083      	sub	sp, #12
    2d24:	af00      	add	r7, sp, #0
    2d26:	4603      	mov	r3, r0
    2d28:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    2d2a:	88fb      	ldrh	r3, [r7, #6]
    2d2c:	f003 0303 	and.w	r3, r3, #3
    2d30:	2b00      	cmp	r3, #0
    2d32:	d001      	beq.n	2d38 <leap_year+0x18>
		return false;
    2d34:	2300      	movs	r3, #0
    2d36:	e000      	b.n	2d3a <leap_year+0x1a>
	} else {
		return true;
    2d38:	2301      	movs	r3, #1
	}
}
    2d3a:	4618      	mov	r0, r3
    2d3c:	370c      	adds	r7, #12
    2d3e:	46bd      	mov	sp, r7
    2d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d44:	4770      	bx	lr
	...

00002d48 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b084      	sub	sp, #16
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
    2d50:	460b      	mov	r3, r1
    2d52:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2d54:	2300      	movs	r3, #0
    2d56:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	b29b      	uxth	r3, r3
    2d5c:	4618      	mov	r0, r3
    2d5e:	4b2f      	ldr	r3, [pc, #188]	; (2e1c <get_secs_in_month+0xd4>)
    2d60:	4798      	blx	r3
    2d62:	4603      	mov	r3, r0
    2d64:	2b00      	cmp	r3, #0
    2d66:	d028      	beq.n	2dba <get_secs_in_month+0x72>
		switch (month) {
    2d68:	78fb      	ldrb	r3, [r7, #3]
    2d6a:	3b01      	subs	r3, #1
    2d6c:	2b0b      	cmp	r3, #11
    2d6e:	d84c      	bhi.n	2e0a <get_secs_in_month+0xc2>
    2d70:	a201      	add	r2, pc, #4	; (adr r2, 2d78 <get_secs_in_month+0x30>)
    2d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2d76:	bf00      	nop
    2d78:	00002da9 	.word	0x00002da9
    2d7c:	00002daf 	.word	0x00002daf
    2d80:	00002da9 	.word	0x00002da9
    2d84:	00002db5 	.word	0x00002db5
    2d88:	00002da9 	.word	0x00002da9
    2d8c:	00002db5 	.word	0x00002db5
    2d90:	00002da9 	.word	0x00002da9
    2d94:	00002da9 	.word	0x00002da9
    2d98:	00002db5 	.word	0x00002db5
    2d9c:	00002da9 	.word	0x00002da9
    2da0:	00002db5 	.word	0x00002db5
    2da4:	00002da9 	.word	0x00002da9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2da8:	4b1d      	ldr	r3, [pc, #116]	; (2e20 <get_secs_in_month+0xd8>)
    2daa:	60fb      	str	r3, [r7, #12]
			break;
    2dac:	e030      	b.n	2e10 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2dae:	4b1d      	ldr	r3, [pc, #116]	; (2e24 <get_secs_in_month+0xdc>)
    2db0:	60fb      	str	r3, [r7, #12]
			break;
    2db2:	e02d      	b.n	2e10 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2db4:	4b1c      	ldr	r3, [pc, #112]	; (2e28 <get_secs_in_month+0xe0>)
    2db6:	60fb      	str	r3, [r7, #12]
			break;
    2db8:	e02a      	b.n	2e10 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    2dba:	78fb      	ldrb	r3, [r7, #3]
    2dbc:	3b01      	subs	r3, #1
    2dbe:	2b0b      	cmp	r3, #11
    2dc0:	d825      	bhi.n	2e0e <get_secs_in_month+0xc6>
    2dc2:	a201      	add	r2, pc, #4	; (adr r2, 2dc8 <get_secs_in_month+0x80>)
    2dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2dc8:	00002df9 	.word	0x00002df9
    2dcc:	00002dff 	.word	0x00002dff
    2dd0:	00002df9 	.word	0x00002df9
    2dd4:	00002e05 	.word	0x00002e05
    2dd8:	00002df9 	.word	0x00002df9
    2ddc:	00002e05 	.word	0x00002e05
    2de0:	00002df9 	.word	0x00002df9
    2de4:	00002df9 	.word	0x00002df9
    2de8:	00002e05 	.word	0x00002e05
    2dec:	00002df9 	.word	0x00002df9
    2df0:	00002e05 	.word	0x00002e05
    2df4:	00002df9 	.word	0x00002df9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2df8:	4b09      	ldr	r3, [pc, #36]	; (2e20 <get_secs_in_month+0xd8>)
    2dfa:	60fb      	str	r3, [r7, #12]
			break;
    2dfc:	e008      	b.n	2e10 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2dfe:	4b0b      	ldr	r3, [pc, #44]	; (2e2c <get_secs_in_month+0xe4>)
    2e00:	60fb      	str	r3, [r7, #12]
			break;
    2e02:	e005      	b.n	2e10 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2e04:	4b08      	ldr	r3, [pc, #32]	; (2e28 <get_secs_in_month+0xe0>)
    2e06:	60fb      	str	r3, [r7, #12]
			break;
    2e08:	e002      	b.n	2e10 <get_secs_in_month+0xc8>
			break;
    2e0a:	bf00      	nop
    2e0c:	e000      	b.n	2e10 <get_secs_in_month+0xc8>
		default:
			break;
    2e0e:	bf00      	nop
		}
	}

	return sec_in_month;
    2e10:	68fb      	ldr	r3, [r7, #12]
}
    2e12:	4618      	mov	r0, r3
    2e14:	3710      	adds	r7, #16
    2e16:	46bd      	mov	sp, r7
    2e18:	bd80      	pop	{r7, pc}
    2e1a:	bf00      	nop
    2e1c:	00002d21 	.word	0x00002d21
    2e20:	0028de80 	.word	0x0028de80
    2e24:	00263b80 	.word	0x00263b80
    2e28:	00278d00 	.word	0x00278d00
    2e2c:	0024ea00 	.word	0x0024ea00

00002e30 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2e30:	b580      	push	{r7, lr}
    2e32:	b08a      	sub	sp, #40	; 0x28
    2e34:	af00      	add	r7, sp, #0
    2e36:	60f8      	str	r0, [r7, #12]
    2e38:	60b9      	str	r1, [r7, #8]
    2e3a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	699b      	ldr	r3, [r3, #24]
    2e40:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2e42:	2301      	movs	r3, #1
    2e44:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2e46:	2301      	movs	r3, #1
    2e48:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    2e4a:	2300      	movs	r3, #0
    2e4c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    2e4e:	2300      	movs	r3, #0
    2e50:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2e52:	68bb      	ldr	r3, [r7, #8]
    2e54:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2e56:	6a3b      	ldr	r3, [r7, #32]
    2e58:	b29b      	uxth	r3, r3
    2e5a:	4618      	mov	r0, r3
    2e5c:	4b32      	ldr	r3, [pc, #200]	; (2f28 <convert_timestamp_to_datetime+0xf8>)
    2e5e:	4798      	blx	r3
    2e60:	4603      	mov	r3, r0
    2e62:	2b00      	cmp	r3, #0
    2e64:	d001      	beq.n	2e6a <convert_timestamp_to_datetime+0x3a>
    2e66:	4b31      	ldr	r3, [pc, #196]	; (2f2c <convert_timestamp_to_datetime+0xfc>)
    2e68:	e000      	b.n	2e6c <convert_timestamp_to_datetime+0x3c>
    2e6a:	4b31      	ldr	r3, [pc, #196]	; (2f30 <convert_timestamp_to_datetime+0x100>)
    2e6c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    2e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2e70:	69bb      	ldr	r3, [r7, #24]
    2e72:	429a      	cmp	r2, r3
    2e74:	d307      	bcc.n	2e86 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2e78:	69bb      	ldr	r3, [r7, #24]
    2e7a:	1ad3      	subs	r3, r2, r3
    2e7c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    2e7e:	6a3b      	ldr	r3, [r7, #32]
    2e80:	3301      	adds	r3, #1
    2e82:	623b      	str	r3, [r7, #32]
    2e84:	e7e7      	b.n	2e56 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2e86:	7ffb      	ldrb	r3, [r7, #31]
    2e88:	4619      	mov	r1, r3
    2e8a:	6a38      	ldr	r0, [r7, #32]
    2e8c:	4b29      	ldr	r3, [pc, #164]	; (2f34 <convert_timestamp_to_datetime+0x104>)
    2e8e:	4798      	blx	r3
    2e90:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2e94:	697b      	ldr	r3, [r7, #20]
    2e96:	429a      	cmp	r2, r3
    2e98:	d307      	bcc.n	2eaa <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    2e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2e9c:	697b      	ldr	r3, [r7, #20]
    2e9e:	1ad3      	subs	r3, r2, r3
    2ea0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2ea2:	7ffb      	ldrb	r3, [r7, #31]
    2ea4:	3301      	adds	r3, #1
    2ea6:	77fb      	strb	r3, [r7, #31]
    2ea8:	e7ed      	b.n	2e86 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2eac:	4a22      	ldr	r2, [pc, #136]	; (2f38 <convert_timestamp_to_datetime+0x108>)
    2eae:	4293      	cmp	r3, r2
    2eb0:	d909      	bls.n	2ec6 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2eb4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2eb8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    2ebc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    2ebe:	7fbb      	ldrb	r3, [r7, #30]
    2ec0:	3301      	adds	r3, #1
    2ec2:	77bb      	strb	r3, [r7, #30]
    2ec4:	e7f1      	b.n	2eaa <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ec8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    2ecc:	d307      	bcc.n	2ede <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    2ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ed0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2ed4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2ed6:	7f7b      	ldrb	r3, [r7, #29]
    2ed8:	3301      	adds	r3, #1
    2eda:	777b      	strb	r3, [r7, #29]
    2edc:	e7f3      	b.n	2ec6 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ee0:	2b3b      	cmp	r3, #59	; 0x3b
    2ee2:	d906      	bls.n	2ef2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ee6:	3b3c      	subs	r3, #60	; 0x3c
    2ee8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    2eea:	7f3b      	ldrb	r3, [r7, #28]
    2eec:	3301      	adds	r3, #1
    2eee:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2ef0:	e7f5      	b.n	2ede <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2ef2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2ef4:	6a3b      	ldr	r3, [r7, #32]
    2ef6:	b29a      	uxth	r2, r3
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	7ffa      	ldrb	r2, [r7, #31]
    2f00:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    2f02:	687b      	ldr	r3, [r7, #4]
    2f04:	7fba      	ldrb	r2, [r7, #30]
    2f06:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	7f7a      	ldrb	r2, [r7, #29]
    2f0c:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	7f3a      	ldrb	r2, [r7, #28]
    2f12:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    2f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f16:	b2da      	uxtb	r2, r3
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    2f1c:	2300      	movs	r3, #0
}
    2f1e:	4618      	mov	r0, r3
    2f20:	3728      	adds	r7, #40	; 0x28
    2f22:	46bd      	mov	sp, r7
    2f24:	bd80      	pop	{r7, pc}
    2f26:	bf00      	nop
    2f28:	00002d21 	.word	0x00002d21
    2f2c:	01e28500 	.word	0x01e28500
    2f30:	01e13380 	.word	0x01e13380
    2f34:	00002d49 	.word	0x00002d49
    2f38:	0001517f 	.word	0x0001517f

00002f3c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b086      	sub	sp, #24
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
    2f44:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    2f46:	2300      	movs	r3, #0
    2f48:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    2f4a:	2300      	movs	r3, #0
    2f4c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    2f4e:	683b      	ldr	r3, [r7, #0]
    2f50:	88db      	ldrh	r3, [r3, #6]
    2f52:	b2da      	uxtb	r2, r3
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	699b      	ldr	r3, [r3, #24]
    2f58:	b2db      	uxtb	r3, r3
    2f5a:	1ad3      	subs	r3, r2, r3
    2f5c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    2f5e:	683b      	ldr	r3, [r7, #0]
    2f60:	795b      	ldrb	r3, [r3, #5]
    2f62:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    2f64:	683b      	ldr	r3, [r7, #0]
    2f66:	791b      	ldrb	r3, [r3, #4]
    2f68:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    2f6a:	683b      	ldr	r3, [r7, #0]
    2f6c:	789b      	ldrb	r3, [r3, #2]
    2f6e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    2f70:	683b      	ldr	r3, [r7, #0]
    2f72:	785b      	ldrb	r3, [r3, #1]
    2f74:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    2f76:	683b      	ldr	r3, [r7, #0]
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    2f7c:	2300      	movs	r3, #0
    2f7e:	613b      	str	r3, [r7, #16]
    2f80:	e01a      	b.n	2fb8 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	699b      	ldr	r3, [r3, #24]
    2f86:	b29a      	uxth	r2, r3
    2f88:	693b      	ldr	r3, [r7, #16]
    2f8a:	b29b      	uxth	r3, r3
    2f8c:	4413      	add	r3, r2
    2f8e:	b29b      	uxth	r3, r3
    2f90:	4618      	mov	r0, r3
    2f92:	4b29      	ldr	r3, [pc, #164]	; (3038 <convert_datetime_to_timestamp+0xfc>)
    2f94:	4798      	blx	r3
    2f96:	4603      	mov	r3, r0
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d006      	beq.n	2faa <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    2f9c:	697b      	ldr	r3, [r7, #20]
    2f9e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    2fa2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    2fa6:	617b      	str	r3, [r7, #20]
    2fa8:	e003      	b.n	2fb2 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    2faa:	697a      	ldr	r2, [r7, #20]
    2fac:	4b23      	ldr	r3, [pc, #140]	; (303c <convert_datetime_to_timestamp+0x100>)
    2fae:	4413      	add	r3, r2
    2fb0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    2fb2:	693b      	ldr	r3, [r7, #16]
    2fb4:	3301      	adds	r3, #1
    2fb6:	613b      	str	r3, [r7, #16]
    2fb8:	7bfa      	ldrb	r2, [r7, #15]
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	429a      	cmp	r2, r3
    2fbe:	d8e0      	bhi.n	2f82 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    2fc0:	2301      	movs	r3, #1
    2fc2:	613b      	str	r3, [r7, #16]
    2fc4:	e00f      	b.n	2fe6 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    2fc6:	683b      	ldr	r3, [r7, #0]
    2fc8:	88db      	ldrh	r3, [r3, #6]
    2fca:	461a      	mov	r2, r3
    2fcc:	693b      	ldr	r3, [r7, #16]
    2fce:	b2db      	uxtb	r3, r3
    2fd0:	4619      	mov	r1, r3
    2fd2:	4610      	mov	r0, r2
    2fd4:	4b1a      	ldr	r3, [pc, #104]	; (3040 <convert_datetime_to_timestamp+0x104>)
    2fd6:	4798      	blx	r3
    2fd8:	4602      	mov	r2, r0
    2fda:	697b      	ldr	r3, [r7, #20]
    2fdc:	4413      	add	r3, r2
    2fde:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    2fe0:	693b      	ldr	r3, [r7, #16]
    2fe2:	3301      	adds	r3, #1
    2fe4:	613b      	str	r3, [r7, #16]
    2fe6:	7bba      	ldrb	r2, [r7, #14]
    2fe8:	693b      	ldr	r3, [r7, #16]
    2fea:	429a      	cmp	r2, r3
    2fec:	d8eb      	bhi.n	2fc6 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    2fee:	7b7b      	ldrb	r3, [r7, #13]
    2ff0:	3b01      	subs	r3, #1
    2ff2:	4a14      	ldr	r2, [pc, #80]	; (3044 <convert_datetime_to_timestamp+0x108>)
    2ff4:	fb02 f303 	mul.w	r3, r2, r3
    2ff8:	461a      	mov	r2, r3
    2ffa:	697b      	ldr	r3, [r7, #20]
    2ffc:	4413      	add	r3, r2
    2ffe:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    3000:	7b3b      	ldrb	r3, [r7, #12]
    3002:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    3006:	fb02 f303 	mul.w	r3, r2, r3
    300a:	461a      	mov	r2, r3
    300c:	697b      	ldr	r3, [r7, #20]
    300e:	4413      	add	r3, r2
    3010:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    3012:	7afa      	ldrb	r2, [r7, #11]
    3014:	4613      	mov	r3, r2
    3016:	011b      	lsls	r3, r3, #4
    3018:	1a9b      	subs	r3, r3, r2
    301a:	009b      	lsls	r3, r3, #2
    301c:	461a      	mov	r2, r3
    301e:	697b      	ldr	r3, [r7, #20]
    3020:	4413      	add	r3, r2
    3022:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    3024:	7abb      	ldrb	r3, [r7, #10]
    3026:	697a      	ldr	r2, [r7, #20]
    3028:	4413      	add	r3, r2
    302a:	617b      	str	r3, [r7, #20]

	return tmp;
    302c:	697b      	ldr	r3, [r7, #20]
}
    302e:	4618      	mov	r0, r3
    3030:	3718      	adds	r7, #24
    3032:	46bd      	mov	sp, r7
    3034:	bd80      	pop	{r7, pc}
    3036:	bf00      	nop
    3038:	00002d21 	.word	0x00002d21
    303c:	01e13380 	.word	0x01e13380
    3040:	00002d49 	.word	0x00002d49
    3044:	00015180 	.word	0x00015180

00003048 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    3048:	b580      	push	{r7, lr}
    304a:	b084      	sub	sp, #16
    304c:	af00      	add	r7, sp, #0
    304e:	6078      	str	r0, [r7, #4]
    3050:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3052:	2300      	movs	r3, #0
    3054:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    3056:	687b      	ldr	r3, [r7, #4]
    3058:	2b00      	cmp	r3, #0
    305a:	bf14      	ite	ne
    305c:	2301      	movne	r3, #1
    305e:	2300      	moveq	r3, #0
    3060:	b2db      	uxtb	r3, r3
    3062:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3066:	4911      	ldr	r1, [pc, #68]	; (30ac <calendar_init+0x64>)
    3068:	4618      	mov	r0, r3
    306a:	4b11      	ldr	r3, [pc, #68]	; (30b0 <calendar_init+0x68>)
    306c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	681a      	ldr	r2, [r3, #0]
    3072:	683b      	ldr	r3, [r7, #0]
    3074:	429a      	cmp	r2, r3
    3076:	d101      	bne.n	307c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3078:	2300      	movs	r3, #0
    307a:	e013      	b.n	30a4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	2b00      	cmp	r3, #0
    3082:	d002      	beq.n	308a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3084:	f06f 0311 	mvn.w	r3, #17
    3088:	e00c      	b.n	30a4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    308a:	687b      	ldr	r3, [r7, #4]
    308c:	683a      	ldr	r2, [r7, #0]
    308e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	4618      	mov	r0, r3
    3094:	4b07      	ldr	r3, [pc, #28]	; (30b4 <calendar_init+0x6c>)
    3096:	4798      	blx	r3
    3098:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    30a0:	619a      	str	r2, [r3, #24]

	return ret;
    30a2:	68fb      	ldr	r3, [r7, #12]
}
    30a4:	4618      	mov	r0, r3
    30a6:	3710      	adds	r7, #16
    30a8:	46bd      	mov	sp, r7
    30aa:	bd80      	pop	{r7, pc}
    30ac:	0001ab00 	.word	0x0001ab00
    30b0:	00004bbd 	.word	0x00004bbd
    30b4:	0000763d 	.word	0x0000763d

000030b8 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	2b00      	cmp	r3, #0
    30c4:	bf14      	ite	ne
    30c6:	2301      	movne	r3, #1
    30c8:	2300      	moveq	r3, #0
    30ca:	b2db      	uxtb	r3, r3
    30cc:	f240 12e5 	movw	r2, #485	; 0x1e5
    30d0:	4906      	ldr	r1, [pc, #24]	; (30ec <calendar_enable+0x34>)
    30d2:	4618      	mov	r0, r3
    30d4:	4b06      	ldr	r3, [pc, #24]	; (30f0 <calendar_enable+0x38>)
    30d6:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	4618      	mov	r0, r3
    30dc:	4b05      	ldr	r3, [pc, #20]	; (30f4 <calendar_enable+0x3c>)
    30de:	4798      	blx	r3

	return ERR_NONE;
    30e0:	2300      	movs	r3, #0
}
    30e2:	4618      	mov	r0, r3
    30e4:	3708      	adds	r7, #8
    30e6:	46bd      	mov	sp, r7
    30e8:	bd80      	pop	{r7, pc}
    30ea:	bf00      	nop
    30ec:	0001ab00 	.word	0x0001ab00
    30f0:	00004bbd 	.word	0x00004bbd
    30f4:	000076f5 	.word	0x000076f5

000030f8 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    30f8:	b580      	push	{r7, lr}
    30fa:	b086      	sub	sp, #24
    30fc:	af00      	add	r7, sp, #0
    30fe:	6078      	str	r0, [r7, #4]
    3100:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	2b00      	cmp	r3, #0
    3106:	bf14      	ite	ne
    3108:	2301      	movne	r3, #1
    310a:	2300      	moveq	r3, #0
    310c:	b2db      	uxtb	r3, r3
    310e:	f44f 7203 	mov.w	r2, #524	; 0x20c
    3112:	4915      	ldr	r1, [pc, #84]	; (3168 <calendar_set_time+0x70>)
    3114:	4618      	mov	r0, r3
    3116:	4b15      	ldr	r3, [pc, #84]	; (316c <calendar_set_time+0x74>)
    3118:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	4618      	mov	r0, r3
    311e:	4b14      	ldr	r3, [pc, #80]	; (3170 <calendar_set_time+0x78>)
    3120:	4798      	blx	r3
    3122:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    3124:	f107 0308 	add.w	r3, r7, #8
    3128:	461a      	mov	r2, r3
    312a:	6979      	ldr	r1, [r7, #20]
    312c:	6878      	ldr	r0, [r7, #4]
    312e:	4b11      	ldr	r3, [pc, #68]	; (3174 <calendar_set_time+0x7c>)
    3130:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    3132:	683b      	ldr	r3, [r7, #0]
    3134:	781b      	ldrb	r3, [r3, #0]
    3136:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    3138:	683b      	ldr	r3, [r7, #0]
    313a:	785b      	ldrb	r3, [r3, #1]
    313c:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    313e:	683b      	ldr	r3, [r7, #0]
    3140:	789b      	ldrb	r3, [r3, #2]
    3142:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    3144:	f107 0308 	add.w	r3, r7, #8
    3148:	4619      	mov	r1, r3
    314a:	6878      	ldr	r0, [r7, #4]
    314c:	4b0a      	ldr	r3, [pc, #40]	; (3178 <calendar_set_time+0x80>)
    314e:	4798      	blx	r3
    3150:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	6939      	ldr	r1, [r7, #16]
    3156:	4618      	mov	r0, r3
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <calendar_set_time+0x84>)
    315a:	4798      	blx	r3

	return ERR_NONE;
    315c:	2300      	movs	r3, #0
}
    315e:	4618      	mov	r0, r3
    3160:	3718      	adds	r7, #24
    3162:	46bd      	mov	sp, r7
    3164:	bd80      	pop	{r7, pc}
    3166:	bf00      	nop
    3168:	0001ab00 	.word	0x0001ab00
    316c:	00004bbd 	.word	0x00004bbd
    3170:	00007791 	.word	0x00007791
    3174:	00002e31 	.word	0x00002e31
    3178:	00002f3d 	.word	0x00002f3d
    317c:	00007741 	.word	0x00007741

00003180 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    3180:	b580      	push	{r7, lr}
    3182:	b086      	sub	sp, #24
    3184:	af00      	add	r7, sp, #0
    3186:	6078      	str	r0, [r7, #4]
    3188:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	2b00      	cmp	r3, #0
    318e:	bf14      	ite	ne
    3190:	2301      	movne	r3, #1
    3192:	2300      	moveq	r3, #0
    3194:	b2db      	uxtb	r3, r3
    3196:	f44f 7209 	mov.w	r2, #548	; 0x224
    319a:	4915      	ldr	r1, [pc, #84]	; (31f0 <calendar_set_date+0x70>)
    319c:	4618      	mov	r0, r3
    319e:	4b15      	ldr	r3, [pc, #84]	; (31f4 <calendar_set_date+0x74>)
    31a0:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	4618      	mov	r0, r3
    31a6:	4b14      	ldr	r3, [pc, #80]	; (31f8 <calendar_set_date+0x78>)
    31a8:	4798      	blx	r3
    31aa:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    31ac:	f107 0308 	add.w	r3, r7, #8
    31b0:	461a      	mov	r2, r3
    31b2:	6979      	ldr	r1, [r7, #20]
    31b4:	6878      	ldr	r0, [r7, #4]
    31b6:	4b11      	ldr	r3, [pc, #68]	; (31fc <calendar_set_date+0x7c>)
    31b8:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    31ba:	683b      	ldr	r3, [r7, #0]
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    31c0:	683b      	ldr	r3, [r7, #0]
    31c2:	785b      	ldrb	r3, [r3, #1]
    31c4:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    31c6:	683b      	ldr	r3, [r7, #0]
    31c8:	885b      	ldrh	r3, [r3, #2]
    31ca:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    31cc:	f107 0308 	add.w	r3, r7, #8
    31d0:	4619      	mov	r1, r3
    31d2:	6878      	ldr	r0, [r7, #4]
    31d4:	4b0a      	ldr	r3, [pc, #40]	; (3200 <calendar_set_date+0x80>)
    31d6:	4798      	blx	r3
    31d8:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	6939      	ldr	r1, [r7, #16]
    31de:	4618      	mov	r0, r3
    31e0:	4b08      	ldr	r3, [pc, #32]	; (3204 <calendar_set_date+0x84>)
    31e2:	4798      	blx	r3

	return ERR_NONE;
    31e4:	2300      	movs	r3, #0
}
    31e6:	4618      	mov	r0, r3
    31e8:	3718      	adds	r7, #24
    31ea:	46bd      	mov	sp, r7
    31ec:	bd80      	pop	{r7, pc}
    31ee:	bf00      	nop
    31f0:	0001ab00 	.word	0x0001ab00
    31f4:	00004bbd 	.word	0x00004bbd
    31f8:	00007791 	.word	0x00007791
    31fc:	00002e31 	.word	0x00002e31
    3200:	00002f3d 	.word	0x00002f3d
    3204:	00007741 	.word	0x00007741

00003208 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3208:	b580      	push	{r7, lr}
    320a:	b084      	sub	sp, #16
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
    3210:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	2b00      	cmp	r3, #0
    3216:	bf14      	ite	ne
    3218:	2301      	movne	r3, #1
    321a:	2300      	moveq	r3, #0
    321c:	b2db      	uxtb	r3, r3
    321e:	f240 223b 	movw	r2, #571	; 0x23b
    3222:	4909      	ldr	r1, [pc, #36]	; (3248 <calendar_get_date_time+0x40>)
    3224:	4618      	mov	r0, r3
    3226:	4b09      	ldr	r3, [pc, #36]	; (324c <calendar_get_date_time+0x44>)
    3228:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	4618      	mov	r0, r3
    322e:	4b08      	ldr	r3, [pc, #32]	; (3250 <calendar_get_date_time+0x48>)
    3230:	4798      	blx	r3
    3232:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    3234:	683a      	ldr	r2, [r7, #0]
    3236:	68f9      	ldr	r1, [r7, #12]
    3238:	6878      	ldr	r0, [r7, #4]
    323a:	4b06      	ldr	r3, [pc, #24]	; (3254 <calendar_get_date_time+0x4c>)
    323c:	4798      	blx	r3

	return ERR_NONE;
    323e:	2300      	movs	r3, #0
}
    3240:	4618      	mov	r0, r3
    3242:	3710      	adds	r7, #16
    3244:	46bd      	mov	sp, r7
    3246:	bd80      	pop	{r7, pc}
    3248:	0001ab00 	.word	0x0001ab00
    324c:	00004bbd 	.word	0x00004bbd
    3250:	00007791 	.word	0x00007791
    3254:	00002e31 	.word	0x00002e31

00003258 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    3258:	b580      	push	{r7, lr}
    325a:	b084      	sub	sp, #16
    325c:	af00      	add	r7, sp, #0
    325e:	6078      	str	r0, [r7, #4]
    3260:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	2b00      	cmp	r3, #0
    3266:	d004      	beq.n	3272 <can_async_init+0x1a>
    3268:	683b      	ldr	r3, [r7, #0]
    326a:	2b00      	cmp	r3, #0
    326c:	d001      	beq.n	3272 <can_async_init+0x1a>
    326e:	2301      	movs	r3, #1
    3270:	e000      	b.n	3274 <can_async_init+0x1c>
    3272:	2300      	movs	r3, #0
    3274:	f003 0301 	and.w	r3, r3, #1
    3278:	b2db      	uxtb	r3, r3
    327a:	2241      	movs	r2, #65	; 0x41
    327c:	490e      	ldr	r1, [pc, #56]	; (32b8 <can_async_init+0x60>)
    327e:	4618      	mov	r0, r3
    3280:	4b0e      	ldr	r3, [pc, #56]	; (32bc <can_async_init+0x64>)
    3282:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	6839      	ldr	r1, [r7, #0]
    3288:	4618      	mov	r0, r3
    328a:	4b0d      	ldr	r3, [pc, #52]	; (32c0 <can_async_init+0x68>)
    328c:	4798      	blx	r3
    328e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3290:	68fb      	ldr	r3, [r7, #12]
    3292:	2b00      	cmp	r3, #0
    3294:	d001      	beq.n	329a <can_async_init+0x42>
		return rc;
    3296:	68fb      	ldr	r3, [r7, #12]
    3298:	e009      	b.n	32ae <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	4a09      	ldr	r2, [pc, #36]	; (32c4 <can_async_init+0x6c>)
    329e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	4a09      	ldr	r2, [pc, #36]	; (32c8 <can_async_init+0x70>)
    32a4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	4a08      	ldr	r2, [pc, #32]	; (32cc <can_async_init+0x74>)
    32aa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    32ac:	2300      	movs	r3, #0
}
    32ae:	4618      	mov	r0, r3
    32b0:	3710      	adds	r7, #16
    32b2:	46bd      	mov	sp, r7
    32b4:	bd80      	pop	{r7, pc}
    32b6:	bf00      	nop
    32b8:	0001ab1c 	.word	0x0001ab1c
    32bc:	00004bbd 	.word	0x00004bbd
    32c0:	00005325 	.word	0x00005325
    32c4:	0000346d 	.word	0x0000346d
    32c8:	00003491 	.word	0x00003491
    32cc:	000034b5 	.word	0x000034b5

000032d0 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    32d0:	b580      	push	{r7, lr}
    32d2:	b082      	sub	sp, #8
    32d4:	af00      	add	r7, sp, #0
    32d6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	2b00      	cmp	r3, #0
    32dc:	bf14      	ite	ne
    32de:	2301      	movne	r3, #1
    32e0:	2300      	moveq	r3, #0
    32e2:	b2db      	uxtb	r3, r3
    32e4:	225c      	movs	r2, #92	; 0x5c
    32e6:	4906      	ldr	r1, [pc, #24]	; (3300 <can_async_enable+0x30>)
    32e8:	4618      	mov	r0, r3
    32ea:	4b06      	ldr	r3, [pc, #24]	; (3304 <can_async_enable+0x34>)
    32ec:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	4618      	mov	r0, r3
    32f2:	4b05      	ldr	r3, [pc, #20]	; (3308 <can_async_enable+0x38>)
    32f4:	4798      	blx	r3
    32f6:	4603      	mov	r3, r0
}
    32f8:	4618      	mov	r0, r3
    32fa:	3708      	adds	r7, #8
    32fc:	46bd      	mov	sp, r7
    32fe:	bd80      	pop	{r7, pc}
    3300:	0001ab1c 	.word	0x0001ab1c
    3304:	00004bbd 	.word	0x00004bbd
    3308:	0000550d 	.word	0x0000550d

0000330c <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    330c:	b580      	push	{r7, lr}
    330e:	b082      	sub	sp, #8
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
    3314:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	2b00      	cmp	r3, #0
    331a:	d004      	beq.n	3326 <can_async_read+0x1a>
    331c:	683b      	ldr	r3, [r7, #0]
    331e:	2b00      	cmp	r3, #0
    3320:	d001      	beq.n	3326 <can_async_read+0x1a>
    3322:	2301      	movs	r3, #1
    3324:	e000      	b.n	3328 <can_async_read+0x1c>
    3326:	2300      	movs	r3, #0
    3328:	f003 0301 	and.w	r3, r3, #1
    332c:	b2db      	uxtb	r3, r3
    332e:	226e      	movs	r2, #110	; 0x6e
    3330:	4906      	ldr	r1, [pc, #24]	; (334c <can_async_read+0x40>)
    3332:	4618      	mov	r0, r3
    3334:	4b06      	ldr	r3, [pc, #24]	; (3350 <can_async_read+0x44>)
    3336:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	6839      	ldr	r1, [r7, #0]
    333c:	4618      	mov	r0, r3
    333e:	4b05      	ldr	r3, [pc, #20]	; (3354 <can_async_read+0x48>)
    3340:	4798      	blx	r3
    3342:	4603      	mov	r3, r0
}
    3344:	4618      	mov	r0, r3
    3346:	3708      	adds	r7, #8
    3348:	46bd      	mov	sp, r7
    334a:	bd80      	pop	{r7, pc}
    334c:	0001ab1c 	.word	0x0001ab1c
    3350:	00004bbd 	.word	0x00004bbd
    3354:	0000552d 	.word	0x0000552d

00003358 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    3358:	b580      	push	{r7, lr}
    335a:	b082      	sub	sp, #8
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	2b00      	cmp	r3, #0
    3366:	d004      	beq.n	3372 <can_async_write+0x1a>
    3368:	683b      	ldr	r3, [r7, #0]
    336a:	2b00      	cmp	r3, #0
    336c:	d001      	beq.n	3372 <can_async_write+0x1a>
    336e:	2301      	movs	r3, #1
    3370:	e000      	b.n	3374 <can_async_write+0x1c>
    3372:	2300      	movs	r3, #0
    3374:	f003 0301 	and.w	r3, r3, #1
    3378:	b2db      	uxtb	r3, r3
    337a:	2277      	movs	r2, #119	; 0x77
    337c:	4906      	ldr	r1, [pc, #24]	; (3398 <can_async_write+0x40>)
    337e:	4618      	mov	r0, r3
    3380:	4b06      	ldr	r3, [pc, #24]	; (339c <can_async_write+0x44>)
    3382:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	6839      	ldr	r1, [r7, #0]
    3388:	4618      	mov	r0, r3
    338a:	4b05      	ldr	r3, [pc, #20]	; (33a0 <can_async_write+0x48>)
    338c:	4798      	blx	r3
    338e:	4603      	mov	r3, r0
}
    3390:	4618      	mov	r0, r3
    3392:	3708      	adds	r7, #8
    3394:	46bd      	mov	sp, r7
    3396:	bd80      	pop	{r7, pc}
    3398:	0001ab1c 	.word	0x0001ab1c
    339c:	00004bbd 	.word	0x00004bbd
    33a0:	0000563d 	.word	0x0000563d

000033a4 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b084      	sub	sp, #16
    33a8:	af00      	add	r7, sp, #0
    33aa:	60f8      	str	r0, [r7, #12]
    33ac:	460b      	mov	r3, r1
    33ae:	607a      	str	r2, [r7, #4]
    33b0:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    33b2:	68fb      	ldr	r3, [r7, #12]
    33b4:	2b00      	cmp	r3, #0
    33b6:	bf14      	ite	ne
    33b8:	2301      	movne	r3, #1
    33ba:	2300      	moveq	r3, #0
    33bc:	b2db      	uxtb	r3, r3
    33be:	2281      	movs	r2, #129	; 0x81
    33c0:	4914      	ldr	r1, [pc, #80]	; (3414 <can_async_register_callback+0x70>)
    33c2:	4618      	mov	r0, r3
    33c4:	4b14      	ldr	r3, [pc, #80]	; (3418 <can_async_register_callback+0x74>)
    33c6:	4798      	blx	r3

	switch (type) {
    33c8:	7afb      	ldrb	r3, [r7, #11]
    33ca:	2b01      	cmp	r3, #1
    33cc:	d007      	beq.n	33de <can_async_register_callback+0x3a>
    33ce:	2b02      	cmp	r3, #2
    33d0:	d009      	beq.n	33e6 <can_async_register_callback+0x42>
    33d2:	2b00      	cmp	r3, #0
    33d4:	d10b      	bne.n	33ee <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    33d6:	68fb      	ldr	r3, [r7, #12]
    33d8:	687a      	ldr	r2, [r7, #4]
    33da:	621a      	str	r2, [r3, #32]
		break;
    33dc:	e00a      	b.n	33f4 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    33de:	68fb      	ldr	r3, [r7, #12]
    33e0:	687a      	ldr	r2, [r7, #4]
    33e2:	61da      	str	r2, [r3, #28]
		break;
    33e4:	e006      	b.n	33f4 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    33e6:	68fb      	ldr	r3, [r7, #12]
    33e8:	687a      	ldr	r2, [r7, #4]
    33ea:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    33ec:	e002      	b.n	33f4 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    33ee:	f06f 030c 	mvn.w	r3, #12
    33f2:	e00b      	b.n	340c <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    33f4:	68f8      	ldr	r0, [r7, #12]
    33f6:	687b      	ldr	r3, [r7, #4]
    33f8:	2b00      	cmp	r3, #0
    33fa:	bf14      	ite	ne
    33fc:	2301      	movne	r3, #1
    33fe:	2300      	moveq	r3, #0
    3400:	b2da      	uxtb	r2, r3
    3402:	7afb      	ldrb	r3, [r7, #11]
    3404:	4619      	mov	r1, r3
    3406:	4b05      	ldr	r3, [pc, #20]	; (341c <can_async_register_callback+0x78>)
    3408:	4798      	blx	r3

	return ERR_NONE;
    340a:	2300      	movs	r3, #0
}
    340c:	4618      	mov	r0, r3
    340e:	3710      	adds	r7, #16
    3410:	46bd      	mov	sp, r7
    3412:	bd80      	pop	{r7, pc}
    3414:	0001ab1c 	.word	0x0001ab1c
    3418:	00004bbd 	.word	0x00004bbd
    341c:	000057f9 	.word	0x000057f9

00003420 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    3420:	b590      	push	{r4, r7, lr}
    3422:	b085      	sub	sp, #20
    3424:	af00      	add	r7, sp, #0
    3426:	60f8      	str	r0, [r7, #12]
    3428:	607b      	str	r3, [r7, #4]
    342a:	460b      	mov	r3, r1
    342c:	72fb      	strb	r3, [r7, #11]
    342e:	4613      	mov	r3, r2
    3430:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    3432:	68fb      	ldr	r3, [r7, #12]
    3434:	2b00      	cmp	r3, #0
    3436:	bf14      	ite	ne
    3438:	2301      	movne	r3, #1
    343a:	2300      	moveq	r3, #0
    343c:	b2db      	uxtb	r3, r3
    343e:	22b8      	movs	r2, #184	; 0xb8
    3440:	4907      	ldr	r1, [pc, #28]	; (3460 <can_async_set_filter+0x40>)
    3442:	4618      	mov	r0, r3
    3444:	4b07      	ldr	r3, [pc, #28]	; (3464 <can_async_set_filter+0x44>)
    3446:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    3448:	68f8      	ldr	r0, [r7, #12]
    344a:	7aba      	ldrb	r2, [r7, #10]
    344c:	7af9      	ldrb	r1, [r7, #11]
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	4c05      	ldr	r4, [pc, #20]	; (3468 <can_async_set_filter+0x48>)
    3452:	47a0      	blx	r4
    3454:	4603      	mov	r3, r0
}
    3456:	4618      	mov	r0, r3
    3458:	3714      	adds	r7, #20
    345a:	46bd      	mov	sp, r7
    345c:	bd90      	pop	{r4, r7, pc}
    345e:	bf00      	nop
    3460:	0001ab1c 	.word	0x0001ab1c
    3464:	00004bbd 	.word	0x00004bbd
    3468:	00005889 	.word	0x00005889

0000346c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    346c:	b580      	push	{r7, lr}
    346e:	b084      	sub	sp, #16
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    3478:	68fb      	ldr	r3, [r7, #12]
    347a:	69db      	ldr	r3, [r3, #28]
    347c:	2b00      	cmp	r3, #0
    347e:	d003      	beq.n	3488 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3480:	68fb      	ldr	r3, [r7, #12]
    3482:	69db      	ldr	r3, [r3, #28]
    3484:	68f8      	ldr	r0, [r7, #12]
    3486:	4798      	blx	r3
	}
}
    3488:	bf00      	nop
    348a:	3710      	adds	r7, #16
    348c:	46bd      	mov	sp, r7
    348e:	bd80      	pop	{r7, pc}

00003490 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3490:	b580      	push	{r7, lr}
    3492:	b084      	sub	sp, #16
    3494:	af00      	add	r7, sp, #0
    3496:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    349c:	68fb      	ldr	r3, [r7, #12]
    349e:	6a1b      	ldr	r3, [r3, #32]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d003      	beq.n	34ac <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	6a1b      	ldr	r3, [r3, #32]
    34a8:	68f8      	ldr	r0, [r7, #12]
    34aa:	4798      	blx	r3
	}
}
    34ac:	bf00      	nop
    34ae:	3710      	adds	r7, #16
    34b0:	46bd      	mov	sp, r7
    34b2:	bd80      	pop	{r7, pc}

000034b4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    34b4:	b580      	push	{r7, lr}
    34b6:	b084      	sub	sp, #16
    34b8:	af00      	add	r7, sp, #0
    34ba:	6078      	str	r0, [r7, #4]
    34bc:	460b      	mov	r3, r1
    34be:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    34c4:	68fb      	ldr	r3, [r7, #12]
    34c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34c8:	2b00      	cmp	r3, #0
    34ca:	d005      	beq.n	34d8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34d0:	78fa      	ldrb	r2, [r7, #3]
    34d2:	4611      	mov	r1, r2
    34d4:	68f8      	ldr	r0, [r7, #12]
    34d6:	4798      	blx	r3
	}
}
    34d8:	bf00      	nop
    34da:	3710      	adds	r7, #16
    34dc:	46bd      	mov	sp, r7
    34de:	bd80      	pop	{r7, pc}

000034e0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
    34e8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	2b00      	cmp	r3, #0
    34ee:	d004      	beq.n	34fa <crc_sync_init+0x1a>
    34f0:	683b      	ldr	r3, [r7, #0]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d001      	beq.n	34fa <crc_sync_init+0x1a>
    34f6:	2301      	movs	r3, #1
    34f8:	e000      	b.n	34fc <crc_sync_init+0x1c>
    34fa:	2300      	movs	r3, #0
    34fc:	f003 0301 	and.w	r3, r3, #1
    3500:	b2db      	uxtb	r3, r3
    3502:	222b      	movs	r2, #43	; 0x2b
    3504:	4906      	ldr	r1, [pc, #24]	; (3520 <crc_sync_init+0x40>)
    3506:	4618      	mov	r0, r3
    3508:	4b06      	ldr	r3, [pc, #24]	; (3524 <crc_sync_init+0x44>)
    350a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	6839      	ldr	r1, [r7, #0]
    3510:	4618      	mov	r0, r3
    3512:	4b05      	ldr	r3, [pc, #20]	; (3528 <crc_sync_init+0x48>)
    3514:	4798      	blx	r3
    3516:	4603      	mov	r3, r0
}
    3518:	4618      	mov	r0, r3
    351a:	3708      	adds	r7, #8
    351c:	46bd      	mov	sp, r7
    351e:	bd80      	pop	{r7, pc}
    3520:	0001ab38 	.word	0x0001ab38
    3524:	00004bbd 	.word	0x00004bbd
    3528:	00005e69 	.word	0x00005e69

0000352c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    352c:	b590      	push	{r4, r7, lr}
    352e:	b083      	sub	sp, #12
    3530:	af00      	add	r7, sp, #0
    3532:	4603      	mov	r3, r0
    3534:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    3536:	4b07      	ldr	r3, [pc, #28]	; (3554 <delay_us+0x28>)
    3538:	681c      	ldr	r4, [r3, #0]
    353a:	88fb      	ldrh	r3, [r7, #6]
    353c:	4618      	mov	r0, r3
    353e:	4b06      	ldr	r3, [pc, #24]	; (3558 <delay_us+0x2c>)
    3540:	4798      	blx	r3
    3542:	4603      	mov	r3, r0
    3544:	4619      	mov	r1, r3
    3546:	4620      	mov	r0, r4
    3548:	4b04      	ldr	r3, [pc, #16]	; (355c <delay_us+0x30>)
    354a:	4798      	blx	r3
}
    354c:	bf00      	nop
    354e:	370c      	adds	r7, #12
    3550:	46bd      	mov	sp, r7
    3552:	bd90      	pop	{r4, r7, pc}
    3554:	2000219c 	.word	0x2000219c
    3558:	00005bbd 	.word	0x00005bbd
    355c:	00005d51 	.word	0x00005d51

00003560 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3560:	b590      	push	{r4, r7, lr}
    3562:	b083      	sub	sp, #12
    3564:	af00      	add	r7, sp, #0
    3566:	4603      	mov	r3, r0
    3568:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    356a:	4b07      	ldr	r3, [pc, #28]	; (3588 <delay_ms+0x28>)
    356c:	681c      	ldr	r4, [r3, #0]
    356e:	88fb      	ldrh	r3, [r7, #6]
    3570:	4618      	mov	r0, r3
    3572:	4b06      	ldr	r3, [pc, #24]	; (358c <delay_ms+0x2c>)
    3574:	4798      	blx	r3
    3576:	4603      	mov	r3, r0
    3578:	4619      	mov	r1, r3
    357a:	4620      	mov	r0, r4
    357c:	4b04      	ldr	r3, [pc, #16]	; (3590 <delay_ms+0x30>)
    357e:	4798      	blx	r3
}
    3580:	bf00      	nop
    3582:	370c      	adds	r7, #12
    3584:	46bd      	mov	sp, r7
    3586:	bd90      	pop	{r4, r7, pc}
    3588:	2000219c 	.word	0x2000219c
    358c:	00005d29 	.word	0x00005d29
    3590:	00005d51 	.word	0x00005d51

00003594 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3594:	b580      	push	{r7, lr}
    3596:	af00      	add	r7, sp, #0
	return _event_system_init();
    3598:	4b02      	ldr	r3, [pc, #8]	; (35a4 <event_system_init+0x10>)
    359a:	4798      	blx	r3
    359c:	4603      	mov	r3, r0
}
    359e:	4618      	mov	r0, r3
    35a0:	bd80      	pop	{r7, pc}
    35a2:	bf00      	nop
    35a4:	00006625 	.word	0x00006625

000035a8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    35a8:	b580      	push	{r7, lr}
    35aa:	b082      	sub	sp, #8
    35ac:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    35ae:	2300      	movs	r3, #0
    35b0:	80fb      	strh	r3, [r7, #6]
    35b2:	e00e      	b.n	35d2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    35b4:	88fb      	ldrh	r3, [r7, #6]
    35b6:	4a0c      	ldr	r2, [pc, #48]	; (35e8 <ext_irq_init+0x40>)
    35b8:	00db      	lsls	r3, r3, #3
    35ba:	4413      	add	r3, r2
    35bc:	f04f 32ff 	mov.w	r2, #4294967295
    35c0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    35c2:	88fb      	ldrh	r3, [r7, #6]
    35c4:	4a08      	ldr	r2, [pc, #32]	; (35e8 <ext_irq_init+0x40>)
    35c6:	2100      	movs	r1, #0
    35c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    35cc:	88fb      	ldrh	r3, [r7, #6]
    35ce:	3301      	adds	r3, #1
    35d0:	80fb      	strh	r3, [r7, #6]
    35d2:	88fb      	ldrh	r3, [r7, #6]
    35d4:	2b08      	cmp	r3, #8
    35d6:	d9ed      	bls.n	35b4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    35d8:	4804      	ldr	r0, [pc, #16]	; (35ec <ext_irq_init+0x44>)
    35da:	4b05      	ldr	r3, [pc, #20]	; (35f0 <ext_irq_init+0x48>)
    35dc:	4798      	blx	r3
    35de:	4603      	mov	r3, r0
}
    35e0:	4618      	mov	r0, r3
    35e2:	3708      	adds	r7, #8
    35e4:	46bd      	mov	sp, r7
    35e6:	bd80      	pop	{r7, pc}
    35e8:	200021a0 	.word	0x200021a0
    35ec:	0000374d 	.word	0x0000374d
    35f0:	000061a9 	.word	0x000061a9

000035f4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    35f4:	b580      	push	{r7, lr}
    35f6:	b086      	sub	sp, #24
    35f8:	af00      	add	r7, sp, #0
    35fa:	6078      	str	r0, [r7, #4]
    35fc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    35fe:	2300      	movs	r3, #0
    3600:	75fb      	strb	r3, [r7, #23]
    3602:	2300      	movs	r3, #0
    3604:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    3606:	2300      	movs	r3, #0
    3608:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    360a:	e012      	b.n	3632 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    360c:	7dfb      	ldrb	r3, [r7, #23]
    360e:	4a4d      	ldr	r2, [pc, #308]	; (3744 <ext_irq_register+0x150>)
    3610:	00db      	lsls	r3, r3, #3
    3612:	4413      	add	r3, r2
    3614:	685a      	ldr	r2, [r3, #4]
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	429a      	cmp	r2, r3
    361a:	d107      	bne.n	362c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    361c:	7dfb      	ldrb	r3, [r7, #23]
    361e:	4949      	ldr	r1, [pc, #292]	; (3744 <ext_irq_register+0x150>)
    3620:	683a      	ldr	r2, [r7, #0]
    3622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    3626:	2301      	movs	r3, #1
    3628:	757b      	strb	r3, [r7, #21]
			break;
    362a:	e005      	b.n	3638 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    362c:	7dfb      	ldrb	r3, [r7, #23]
    362e:	3301      	adds	r3, #1
    3630:	75fb      	strb	r3, [r7, #23]
    3632:	7dfb      	ldrb	r3, [r7, #23]
    3634:	2b08      	cmp	r3, #8
    3636:	d9e9      	bls.n	360c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    3638:	683b      	ldr	r3, [r7, #0]
    363a:	2b00      	cmp	r3, #0
    363c:	d10e      	bne.n	365c <ext_irq_register+0x68>
		if (!found) {
    363e:	7d7b      	ldrb	r3, [r7, #21]
    3640:	f083 0301 	eor.w	r3, r3, #1
    3644:	b2db      	uxtb	r3, r3
    3646:	2b00      	cmp	r3, #0
    3648:	d002      	beq.n	3650 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    364a:	f06f 030c 	mvn.w	r3, #12
    364e:	e074      	b.n	373a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    3650:	2100      	movs	r1, #0
    3652:	6878      	ldr	r0, [r7, #4]
    3654:	4b3c      	ldr	r3, [pc, #240]	; (3748 <ext_irq_register+0x154>)
    3656:	4798      	blx	r3
    3658:	4603      	mov	r3, r0
    365a:	e06e      	b.n	373a <ext_irq_register+0x146>
	}

	if (!found) {
    365c:	7d7b      	ldrb	r3, [r7, #21]
    365e:	f083 0301 	eor.w	r3, r3, #1
    3662:	b2db      	uxtb	r3, r3
    3664:	2b00      	cmp	r3, #0
    3666:	d05a      	beq.n	371e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3668:	2300      	movs	r3, #0
    366a:	75fb      	strb	r3, [r7, #23]
    366c:	e016      	b.n	369c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    366e:	7dfb      	ldrb	r3, [r7, #23]
    3670:	4a34      	ldr	r2, [pc, #208]	; (3744 <ext_irq_register+0x150>)
    3672:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3676:	2b00      	cmp	r3, #0
    3678:	d10d      	bne.n	3696 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    367a:	7dfb      	ldrb	r3, [r7, #23]
    367c:	4931      	ldr	r1, [pc, #196]	; (3744 <ext_irq_register+0x150>)
    367e:	683a      	ldr	r2, [r7, #0]
    3680:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    3684:	7dfb      	ldrb	r3, [r7, #23]
    3686:	4a2f      	ldr	r2, [pc, #188]	; (3744 <ext_irq_register+0x150>)
    3688:	00db      	lsls	r3, r3, #3
    368a:	4413      	add	r3, r2
    368c:	687a      	ldr	r2, [r7, #4]
    368e:	605a      	str	r2, [r3, #4]
				found           = true;
    3690:	2301      	movs	r3, #1
    3692:	757b      	strb	r3, [r7, #21]
				break;
    3694:	e005      	b.n	36a2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3696:	7dfb      	ldrb	r3, [r7, #23]
    3698:	3301      	adds	r3, #1
    369a:	75fb      	strb	r3, [r7, #23]
    369c:	7dfb      	ldrb	r3, [r7, #23]
    369e:	2b08      	cmp	r3, #8
    36a0:	d9e5      	bls.n	366e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    36a2:	e036      	b.n	3712 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    36a4:	7dfb      	ldrb	r3, [r7, #23]
    36a6:	4a27      	ldr	r2, [pc, #156]	; (3744 <ext_irq_register+0x150>)
    36a8:	00db      	lsls	r3, r3, #3
    36aa:	4413      	add	r3, r2
    36ac:	685a      	ldr	r2, [r3, #4]
    36ae:	7dbb      	ldrb	r3, [r7, #22]
    36b0:	4924      	ldr	r1, [pc, #144]	; (3744 <ext_irq_register+0x150>)
    36b2:	00db      	lsls	r3, r3, #3
    36b4:	440b      	add	r3, r1
    36b6:	685b      	ldr	r3, [r3, #4]
    36b8:	429a      	cmp	r2, r3
    36ba:	d227      	bcs.n	370c <ext_irq_register+0x118>
    36bc:	7dbb      	ldrb	r3, [r7, #22]
    36be:	4a21      	ldr	r2, [pc, #132]	; (3744 <ext_irq_register+0x150>)
    36c0:	00db      	lsls	r3, r3, #3
    36c2:	4413      	add	r3, r2
    36c4:	685b      	ldr	r3, [r3, #4]
    36c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    36ca:	d01f      	beq.n	370c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    36cc:	7dbb      	ldrb	r3, [r7, #22]
    36ce:	491d      	ldr	r1, [pc, #116]	; (3744 <ext_irq_register+0x150>)
    36d0:	f107 020c 	add.w	r2, r7, #12
    36d4:	00db      	lsls	r3, r3, #3
    36d6:	440b      	add	r3, r1
    36d8:	e893 0003 	ldmia.w	r3, {r0, r1}
    36dc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    36e0:	7dbb      	ldrb	r3, [r7, #22]
    36e2:	7dfa      	ldrb	r2, [r7, #23]
    36e4:	4817      	ldr	r0, [pc, #92]	; (3744 <ext_irq_register+0x150>)
    36e6:	4917      	ldr	r1, [pc, #92]	; (3744 <ext_irq_register+0x150>)
    36e8:	00db      	lsls	r3, r3, #3
    36ea:	4403      	add	r3, r0
    36ec:	00d2      	lsls	r2, r2, #3
    36ee:	440a      	add	r2, r1
    36f0:	e892 0003 	ldmia.w	r2, {r0, r1}
    36f4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    36f8:	7dfb      	ldrb	r3, [r7, #23]
    36fa:	4a12      	ldr	r2, [pc, #72]	; (3744 <ext_irq_register+0x150>)
    36fc:	00db      	lsls	r3, r3, #3
    36fe:	4413      	add	r3, r2
    3700:	f107 020c 	add.w	r2, r7, #12
    3704:	e892 0003 	ldmia.w	r2, {r0, r1}
    3708:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    370c:	7dbb      	ldrb	r3, [r7, #22]
    370e:	3301      	adds	r3, #1
    3710:	75bb      	strb	r3, [r7, #22]
    3712:	7dbb      	ldrb	r3, [r7, #22]
    3714:	2b08      	cmp	r3, #8
    3716:	d802      	bhi.n	371e <ext_irq_register+0x12a>
    3718:	7dfb      	ldrb	r3, [r7, #23]
    371a:	2b08      	cmp	r3, #8
    371c:	d9c2      	bls.n	36a4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    371e:	7d7b      	ldrb	r3, [r7, #21]
    3720:	f083 0301 	eor.w	r3, r3, #1
    3724:	b2db      	uxtb	r3, r3
    3726:	2b00      	cmp	r3, #0
    3728:	d002      	beq.n	3730 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    372a:	f06f 030c 	mvn.w	r3, #12
    372e:	e004      	b.n	373a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    3730:	2101      	movs	r1, #1
    3732:	6878      	ldr	r0, [r7, #4]
    3734:	4b04      	ldr	r3, [pc, #16]	; (3748 <ext_irq_register+0x154>)
    3736:	4798      	blx	r3
    3738:	4603      	mov	r3, r0
}
    373a:	4618      	mov	r0, r3
    373c:	3718      	adds	r7, #24
    373e:	46bd      	mov	sp, r7
    3740:	bd80      	pop	{r7, pc}
    3742:	bf00      	nop
    3744:	200021a0 	.word	0x200021a0
    3748:	0000633d 	.word	0x0000633d

0000374c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    374c:	b580      	push	{r7, lr}
    374e:	b084      	sub	sp, #16
    3750:	af00      	add	r7, sp, #0
    3752:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3754:	2300      	movs	r3, #0
    3756:	73fb      	strb	r3, [r7, #15]
    3758:	2309      	movs	r3, #9
    375a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    375c:	e02a      	b.n	37b4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    375e:	7bba      	ldrb	r2, [r7, #14]
    3760:	7bfb      	ldrb	r3, [r7, #15]
    3762:	4413      	add	r3, r2
    3764:	105b      	asrs	r3, r3, #1
    3766:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    3768:	7b7b      	ldrb	r3, [r7, #13]
    376a:	2b08      	cmp	r3, #8
    376c:	d827      	bhi.n	37be <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    376e:	7b7b      	ldrb	r3, [r7, #13]
    3770:	4a16      	ldr	r2, [pc, #88]	; (37cc <process_ext_irq+0x80>)
    3772:	00db      	lsls	r3, r3, #3
    3774:	4413      	add	r3, r2
    3776:	685a      	ldr	r2, [r3, #4]
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	429a      	cmp	r2, r3
    377c:	d10b      	bne.n	3796 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    377e:	7b7b      	ldrb	r3, [r7, #13]
    3780:	4a12      	ldr	r2, [pc, #72]	; (37cc <process_ext_irq+0x80>)
    3782:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3786:	2b00      	cmp	r3, #0
    3788:	d01b      	beq.n	37c2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    378a:	7b7b      	ldrb	r3, [r7, #13]
    378c:	4a0f      	ldr	r2, [pc, #60]	; (37cc <process_ext_irq+0x80>)
    378e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3792:	4798      	blx	r3
			}
			return;
    3794:	e015      	b.n	37c2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    3796:	7b7b      	ldrb	r3, [r7, #13]
    3798:	4a0c      	ldr	r2, [pc, #48]	; (37cc <process_ext_irq+0x80>)
    379a:	00db      	lsls	r3, r3, #3
    379c:	4413      	add	r3, r2
    379e:	685a      	ldr	r2, [r3, #4]
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	429a      	cmp	r2, r3
    37a4:	d203      	bcs.n	37ae <process_ext_irq+0x62>
			lower = middle + 1;
    37a6:	7b7b      	ldrb	r3, [r7, #13]
    37a8:	3301      	adds	r3, #1
    37aa:	73fb      	strb	r3, [r7, #15]
    37ac:	e002      	b.n	37b4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    37ae:	7b7b      	ldrb	r3, [r7, #13]
    37b0:	3b01      	subs	r3, #1
    37b2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    37b4:	7bba      	ldrb	r2, [r7, #14]
    37b6:	7bfb      	ldrb	r3, [r7, #15]
    37b8:	429a      	cmp	r2, r3
    37ba:	d2d0      	bcs.n	375e <process_ext_irq+0x12>
    37bc:	e002      	b.n	37c4 <process_ext_irq+0x78>
			return;
    37be:	bf00      	nop
    37c0:	e000      	b.n	37c4 <process_ext_irq+0x78>
			return;
    37c2:	bf00      	nop
		}
	}
}
    37c4:	3710      	adds	r7, #16
    37c6:	46bd      	mov	sp, r7
    37c8:	bd80      	pop	{r7, pc}
    37ca:	bf00      	nop
    37cc:	200021a0 	.word	0x200021a0

000037d0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    37d0:	b580      	push	{r7, lr}
    37d2:	b08a      	sub	sp, #40	; 0x28
    37d4:	af00      	add	r7, sp, #0
    37d6:	60f8      	str	r0, [r7, #12]
    37d8:	60b9      	str	r1, [r7, #8]
    37da:	4613      	mov	r3, r2
    37dc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    37de:	68fb      	ldr	r3, [r7, #12]
    37e0:	3b14      	subs	r3, #20
    37e2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    37e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37e6:	8b9b      	ldrh	r3, [r3, #28]
    37e8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    37ea:	88fb      	ldrh	r3, [r7, #6]
    37ec:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    37ee:	f248 0301 	movw	r3, #32769	; 0x8001
    37f2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    37f4:	68bb      	ldr	r3, [r7, #8]
    37f6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    37f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37fa:	f107 0214 	add.w	r2, r7, #20
    37fe:	4611      	mov	r1, r2
    3800:	4618      	mov	r0, r3
    3802:	4b06      	ldr	r3, [pc, #24]	; (381c <i2c_m_sync_read+0x4c>)
    3804:	4798      	blx	r3
    3806:	6238      	str	r0, [r7, #32]

	if (ret) {
    3808:	6a3b      	ldr	r3, [r7, #32]
    380a:	2b00      	cmp	r3, #0
    380c:	d001      	beq.n	3812 <i2c_m_sync_read+0x42>
		return ret;
    380e:	6a3b      	ldr	r3, [r7, #32]
    3810:	e000      	b.n	3814 <i2c_m_sync_read+0x44>
	}

	return n;
    3812:	88fb      	ldrh	r3, [r7, #6]
}
    3814:	4618      	mov	r0, r3
    3816:	3728      	adds	r7, #40	; 0x28
    3818:	46bd      	mov	sp, r7
    381a:	bd80      	pop	{r7, pc}
    381c:	00008409 	.word	0x00008409

00003820 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    3820:	b580      	push	{r7, lr}
    3822:	b08a      	sub	sp, #40	; 0x28
    3824:	af00      	add	r7, sp, #0
    3826:	60f8      	str	r0, [r7, #12]
    3828:	60b9      	str	r1, [r7, #8]
    382a:	4613      	mov	r3, r2
    382c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    382e:	68fb      	ldr	r3, [r7, #12]
    3830:	3b14      	subs	r3, #20
    3832:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3836:	8b9b      	ldrh	r3, [r3, #28]
    3838:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    383a:	88fb      	ldrh	r3, [r7, #6]
    383c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3842:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    3844:	68bb      	ldr	r3, [r7, #8]
    3846:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    384a:	f107 0214 	add.w	r2, r7, #20
    384e:	4611      	mov	r1, r2
    3850:	4618      	mov	r0, r3
    3852:	4b06      	ldr	r3, [pc, #24]	; (386c <i2c_m_sync_write+0x4c>)
    3854:	4798      	blx	r3
    3856:	6238      	str	r0, [r7, #32]

	if (ret) {
    3858:	6a3b      	ldr	r3, [r7, #32]
    385a:	2b00      	cmp	r3, #0
    385c:	d001      	beq.n	3862 <i2c_m_sync_write+0x42>
		return ret;
    385e:	6a3b      	ldr	r3, [r7, #32]
    3860:	e000      	b.n	3864 <i2c_m_sync_write+0x44>
	}

	return n;
    3862:	88fb      	ldrh	r3, [r7, #6]
}
    3864:	4618      	mov	r0, r3
    3866:	3728      	adds	r7, #40	; 0x28
    3868:	46bd      	mov	sp, r7
    386a:	bd80      	pop	{r7, pc}
    386c:	00008409 	.word	0x00008409

00003870 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    3870:	b580      	push	{r7, lr}
    3872:	b084      	sub	sp, #16
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	2b00      	cmp	r3, #0
    387e:	bf14      	ite	ne
    3880:	2301      	movne	r3, #1
    3882:	2300      	moveq	r3, #0
    3884:	b2db      	uxtb	r3, r3
    3886:	225e      	movs	r2, #94	; 0x5e
    3888:	490c      	ldr	r1, [pc, #48]	; (38bc <i2c_m_sync_init+0x4c>)
    388a:	4618      	mov	r0, r3
    388c:	4b0c      	ldr	r3, [pc, #48]	; (38c0 <i2c_m_sync_init+0x50>)
    388e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	6839      	ldr	r1, [r7, #0]
    3894:	4618      	mov	r0, r3
    3896:	4b0b      	ldr	r3, [pc, #44]	; (38c4 <i2c_m_sync_init+0x54>)
    3898:	4798      	blx	r3
    389a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    389c:	68fb      	ldr	r3, [r7, #12]
    389e:	2b00      	cmp	r3, #0
    38a0:	d001      	beq.n	38a6 <i2c_m_sync_init+0x36>
		return init_status;
    38a2:	68fb      	ldr	r3, [r7, #12]
    38a4:	e006      	b.n	38b4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	4a07      	ldr	r2, [pc, #28]	; (38c8 <i2c_m_sync_init+0x58>)
    38aa:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    38ac:	687b      	ldr	r3, [r7, #4]
    38ae:	4a07      	ldr	r2, [pc, #28]	; (38cc <i2c_m_sync_init+0x5c>)
    38b0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    38b2:	2300      	movs	r3, #0
}
    38b4:	4618      	mov	r0, r3
    38b6:	3710      	adds	r7, #16
    38b8:	46bd      	mov	sp, r7
    38ba:	bd80      	pop	{r7, pc}
    38bc:	0001ab54 	.word	0x0001ab54
    38c0:	00004bbd 	.word	0x00004bbd
    38c4:	000081a9 	.word	0x000081a9
    38c8:	000037d1 	.word	0x000037d1
    38cc:	00003821 	.word	0x00003821

000038d0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    38d0:	b580      	push	{r7, lr}
    38d2:	b082      	sub	sp, #8
    38d4:	af00      	add	r7, sp, #0
    38d6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	4618      	mov	r0, r3
    38dc:	4b03      	ldr	r3, [pc, #12]	; (38ec <i2c_m_sync_enable+0x1c>)
    38de:	4798      	blx	r3
    38e0:	4603      	mov	r3, r0
}
    38e2:	4618      	mov	r0, r3
    38e4:	3708      	adds	r7, #8
    38e6:	46bd      	mov	sp, r7
    38e8:	bd80      	pop	{r7, pc}
    38ea:	bf00      	nop
    38ec:	000081f1 	.word	0x000081f1

000038f0 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b082      	sub	sp, #8
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	4618      	mov	r0, r3
    38fc:	4b03      	ldr	r3, [pc, #12]	; (390c <i2c_m_sync_disable+0x1c>)
    38fe:	4798      	blx	r3
    3900:	4603      	mov	r3, r0
}
    3902:	4618      	mov	r0, r3
    3904:	3708      	adds	r7, #8
    3906:	46bd      	mov	sp, r7
    3908:	bd80      	pop	{r7, pc}
    390a:	bf00      	nop
    390c:	00008231 	.word	0x00008231

00003910 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	60f8      	str	r0, [r7, #12]
    3918:	460b      	mov	r3, r1
    391a:	607a      	str	r2, [r7, #4]
    391c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    391e:	897b      	ldrh	r3, [r7, #10]
    3920:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3924:	b21a      	sxth	r2, r3
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	b21b      	sxth	r3, r3
    392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    392e:	b21b      	sxth	r3, r3
    3930:	4313      	orrs	r3, r2
    3932:	b21b      	sxth	r3, r3
    3934:	b29a      	uxth	r2, r3
    3936:	68fb      	ldr	r3, [r7, #12]
    3938:	839a      	strh	r2, [r3, #28]
    393a:	68fb      	ldr	r3, [r7, #12]
    393c:	8b9b      	ldrh	r3, [r3, #28]
}
    393e:	4618      	mov	r0, r3
    3940:	3714      	adds	r7, #20
    3942:	46bd      	mov	sp, r7
    3944:	f85d 7b04 	ldr.w	r7, [sp], #4
    3948:	4770      	bx	lr

0000394a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    394a:	b480      	push	{r7}
    394c:	b083      	sub	sp, #12
    394e:	af00      	add	r7, sp, #0
    3950:	6078      	str	r0, [r7, #4]
    3952:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3954:	687b      	ldr	r3, [r7, #4]
    3956:	f103 0214 	add.w	r2, r3, #20
    395a:	683b      	ldr	r3, [r7, #0]
    395c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    395e:	2300      	movs	r3, #0
}
    3960:	4618      	mov	r0, r3
    3962:	370c      	adds	r7, #12
    3964:	46bd      	mov	sp, r7
    3966:	f85d 7b04 	ldr.w	r7, [sp], #4
    396a:	4770      	bx	lr

0000396c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    396c:	b580      	push	{r7, lr}
    396e:	b084      	sub	sp, #16
    3970:	af00      	add	r7, sp, #0
    3972:	60f8      	str	r0, [r7, #12]
    3974:	60b9      	str	r1, [r7, #8]
    3976:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3978:	68fb      	ldr	r3, [r7, #12]
    397a:	2b00      	cmp	r3, #0
    397c:	d004      	beq.n	3988 <pwm_init+0x1c>
    397e:	68bb      	ldr	r3, [r7, #8]
    3980:	2b00      	cmp	r3, #0
    3982:	d001      	beq.n	3988 <pwm_init+0x1c>
    3984:	2301      	movs	r3, #1
    3986:	e000      	b.n	398a <pwm_init+0x1e>
    3988:	2300      	movs	r3, #0
    398a:	f003 0301 	and.w	r3, r3, #1
    398e:	b2db      	uxtb	r3, r3
    3990:	2233      	movs	r2, #51	; 0x33
    3992:	490a      	ldr	r1, [pc, #40]	; (39bc <pwm_init+0x50>)
    3994:	4618      	mov	r0, r3
    3996:	4b0a      	ldr	r3, [pc, #40]	; (39c0 <pwm_init+0x54>)
    3998:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	68b9      	ldr	r1, [r7, #8]
    399e:	4618      	mov	r0, r3
    39a0:	4b08      	ldr	r3, [pc, #32]	; (39c4 <pwm_init+0x58>)
    39a2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    39a4:	68fb      	ldr	r3, [r7, #12]
    39a6:	4a08      	ldr	r2, [pc, #32]	; (39c8 <pwm_init+0x5c>)
    39a8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	4a07      	ldr	r2, [pc, #28]	; (39cc <pwm_init+0x60>)
    39ae:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    39b0:	2300      	movs	r3, #0
}
    39b2:	4618      	mov	r0, r3
    39b4:	3710      	adds	r7, #16
    39b6:	46bd      	mov	sp, r7
    39b8:	bd80      	pop	{r7, pc}
    39ba:	bf00      	nop
    39bc:	0001ab70 	.word	0x0001ab70
    39c0:	00004bbd 	.word	0x00004bbd
    39c4:	00009ad1 	.word	0x00009ad1
    39c8:	000039d1 	.word	0x000039d1
    39cc:	000039f5 	.word	0x000039f5

000039d0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    39d0:	b580      	push	{r7, lr}
    39d2:	b084      	sub	sp, #16
    39d4:	af00      	add	r7, sp, #0
    39d6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	695b      	ldr	r3, [r3, #20]
    39e0:	2b00      	cmp	r3, #0
    39e2:	d003      	beq.n	39ec <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    39e4:	68fb      	ldr	r3, [r7, #12]
    39e6:	695b      	ldr	r3, [r3, #20]
    39e8:	68f8      	ldr	r0, [r7, #12]
    39ea:	4798      	blx	r3
	}
}
    39ec:	bf00      	nop
    39ee:	3710      	adds	r7, #16
    39f0:	46bd      	mov	sp, r7
    39f2:	bd80      	pop	{r7, pc}

000039f4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	b084      	sub	sp, #16
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3a00:	68fb      	ldr	r3, [r7, #12]
    3a02:	699b      	ldr	r3, [r3, #24]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d003      	beq.n	3a10 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3a08:	68fb      	ldr	r3, [r7, #12]
    3a0a:	699b      	ldr	r3, [r3, #24]
    3a0c:	68f8      	ldr	r0, [r7, #12]
    3a0e:	4798      	blx	r3
	}
}
    3a10:	bf00      	nop
    3a12:	3710      	adds	r7, #16
    3a14:	46bd      	mov	sp, r7
    3a16:	bd80      	pop	{r7, pc}

00003a18 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3a18:	b580      	push	{r7, lr}
    3a1a:	b082      	sub	sp, #8
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	6078      	str	r0, [r7, #4]
    3a20:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	2b00      	cmp	r3, #0
    3a26:	d004      	beq.n	3a32 <qspi_sync_init+0x1a>
    3a28:	683b      	ldr	r3, [r7, #0]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d001      	beq.n	3a32 <qspi_sync_init+0x1a>
    3a2e:	2301      	movs	r3, #1
    3a30:	e000      	b.n	3a34 <qspi_sync_init+0x1c>
    3a32:	2300      	movs	r3, #0
    3a34:	f003 0301 	and.w	r3, r3, #1
    3a38:	b2db      	uxtb	r3, r3
    3a3a:	2231      	movs	r2, #49	; 0x31
    3a3c:	4906      	ldr	r1, [pc, #24]	; (3a58 <qspi_sync_init+0x40>)
    3a3e:	4618      	mov	r0, r3
    3a40:	4b06      	ldr	r3, [pc, #24]	; (3a5c <qspi_sync_init+0x44>)
    3a42:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	6839      	ldr	r1, [r7, #0]
    3a48:	4618      	mov	r0, r3
    3a4a:	4b05      	ldr	r3, [pc, #20]	; (3a60 <qspi_sync_init+0x48>)
    3a4c:	4798      	blx	r3
    3a4e:	4603      	mov	r3, r0
}
    3a50:	4618      	mov	r0, r3
    3a52:	3708      	adds	r7, #8
    3a54:	46bd      	mov	sp, r7
    3a56:	bd80      	pop	{r7, pc}
    3a58:	0001ab88 	.word	0x0001ab88
    3a5c:	00004bbd 	.word	0x00004bbd
    3a60:	00007205 	.word	0x00007205

00003a64 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    3a64:	b580      	push	{r7, lr}
    3a66:	b082      	sub	sp, #8
    3a68:	af00      	add	r7, sp, #0
    3a6a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	bf14      	ite	ne
    3a72:	2301      	movne	r3, #1
    3a74:	2300      	moveq	r3, #0
    3a76:	b2db      	uxtb	r3, r3
    3a78:	223f      	movs	r2, #63	; 0x3f
    3a7a:	4906      	ldr	r1, [pc, #24]	; (3a94 <qspi_sync_enable+0x30>)
    3a7c:	4618      	mov	r0, r3
    3a7e:	4b06      	ldr	r3, [pc, #24]	; (3a98 <qspi_sync_enable+0x34>)
    3a80:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	4618      	mov	r0, r3
    3a86:	4b05      	ldr	r3, [pc, #20]	; (3a9c <qspi_sync_enable+0x38>)
    3a88:	4798      	blx	r3
    3a8a:	4603      	mov	r3, r0
}
    3a8c:	4618      	mov	r0, r3
    3a8e:	3708      	adds	r7, #8
    3a90:	46bd      	mov	sp, r7
    3a92:	bd80      	pop	{r7, pc}
    3a94:	0001ab88 	.word	0x0001ab88
    3a98:	00004bbd 	.word	0x00004bbd
    3a9c:	00007279 	.word	0x00007279

00003aa0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3aa0:	b580      	push	{r7, lr}
    3aa2:	b082      	sub	sp, #8
    3aa4:	af00      	add	r7, sp, #0
    3aa6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	bf14      	ite	ne
    3aae:	2301      	movne	r3, #1
    3ab0:	2300      	moveq	r3, #0
    3ab2:	b2db      	uxtb	r3, r3
    3ab4:	2246      	movs	r2, #70	; 0x46
    3ab6:	4906      	ldr	r1, [pc, #24]	; (3ad0 <qspi_sync_disable+0x30>)
    3ab8:	4618      	mov	r0, r3
    3aba:	4b06      	ldr	r3, [pc, #24]	; (3ad4 <qspi_sync_disable+0x34>)
    3abc:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	4618      	mov	r0, r3
    3ac2:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <qspi_sync_disable+0x38>)
    3ac4:	4798      	blx	r3
    3ac6:	4603      	mov	r3, r0
}
    3ac8:	4618      	mov	r0, r3
    3aca:	3708      	adds	r7, #8
    3acc:	46bd      	mov	sp, r7
    3ace:	bd80      	pop	{r7, pc}
    3ad0:	0001ab88 	.word	0x0001ab88
    3ad4:	00004bbd 	.word	0x00004bbd
    3ad8:	0000729d 	.word	0x0000729d

00003adc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b082      	sub	sp, #8
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	6078      	str	r0, [r7, #4]
    3ae4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3ae6:	687b      	ldr	r3, [r7, #4]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d004      	beq.n	3af6 <qspi_sync_serial_run_command+0x1a>
    3aec:	683b      	ldr	r3, [r7, #0]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d001      	beq.n	3af6 <qspi_sync_serial_run_command+0x1a>
    3af2:	2301      	movs	r3, #1
    3af4:	e000      	b.n	3af8 <qspi_sync_serial_run_command+0x1c>
    3af6:	2300      	movs	r3, #0
    3af8:	f003 0301 	and.w	r3, r3, #1
    3afc:	b2db      	uxtb	r3, r3
    3afe:	224d      	movs	r2, #77	; 0x4d
    3b00:	4906      	ldr	r1, [pc, #24]	; (3b1c <qspi_sync_serial_run_command+0x40>)
    3b02:	4618      	mov	r0, r3
    3b04:	4b06      	ldr	r3, [pc, #24]	; (3b20 <qspi_sync_serial_run_command+0x44>)
    3b06:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3b08:	687b      	ldr	r3, [r7, #4]
    3b0a:	6839      	ldr	r1, [r7, #0]
    3b0c:	4618      	mov	r0, r3
    3b0e:	4b05      	ldr	r3, [pc, #20]	; (3b24 <qspi_sync_serial_run_command+0x48>)
    3b10:	4798      	blx	r3
    3b12:	4603      	mov	r3, r0
}
    3b14:	4618      	mov	r0, r3
    3b16:	3708      	adds	r7, #8
    3b18:	46bd      	mov	sp, r7
    3b1a:	bd80      	pop	{r7, pc}
    3b1c:	0001ab88 	.word	0x0001ab88
    3b20:	00004bbd 	.word	0x00004bbd
    3b24:	000073e9 	.word	0x000073e9

00003b28 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	b084      	sub	sp, #16
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
    3b30:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3b32:	2300      	movs	r3, #0
    3b34:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3b36:	687b      	ldr	r3, [r7, #4]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d004      	beq.n	3b46 <spi_m_sync_init+0x1e>
    3b3c:	683b      	ldr	r3, [r7, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d001      	beq.n	3b46 <spi_m_sync_init+0x1e>
    3b42:	2301      	movs	r3, #1
    3b44:	e000      	b.n	3b48 <spi_m_sync_init+0x20>
    3b46:	2300      	movs	r3, #0
    3b48:	f003 0301 	and.w	r3, r3, #1
    3b4c:	b2db      	uxtb	r3, r3
    3b4e:	2240      	movs	r2, #64	; 0x40
    3b50:	4910      	ldr	r1, [pc, #64]	; (3b94 <spi_m_sync_init+0x6c>)
    3b52:	4618      	mov	r0, r3
    3b54:	4b10      	ldr	r3, [pc, #64]	; (3b98 <spi_m_sync_init+0x70>)
    3b56:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	683a      	ldr	r2, [r7, #0]
    3b5c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	3304      	adds	r3, #4
    3b62:	6839      	ldr	r1, [r7, #0]
    3b64:	4618      	mov	r0, r3
    3b66:	4b0d      	ldr	r3, [pc, #52]	; (3b9c <spi_m_sync_init+0x74>)
    3b68:	4798      	blx	r3
    3b6a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3b6c:	68fb      	ldr	r3, [r7, #12]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	da01      	bge.n	3b76 <spi_m_sync_init+0x4e>
		return rc;
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	e00a      	b.n	3b8c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3b7c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	4a07      	ldr	r2, [pc, #28]	; (3ba0 <spi_m_sync_init+0x78>)
    3b82:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3b84:	687b      	ldr	r3, [r7, #4]
    3b86:	4a07      	ldr	r2, [pc, #28]	; (3ba4 <spi_m_sync_init+0x7c>)
    3b88:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3b8a:	2300      	movs	r3, #0
}
    3b8c:	4618      	mov	r0, r3
    3b8e:	3710      	adds	r7, #16
    3b90:	46bd      	mov	sp, r7
    3b92:	bd80      	pop	{r7, pc}
    3b94:	0001aba4 	.word	0x0001aba4
    3b98:	00004bbd 	.word	0x00004bbd
    3b9c:	00008905 	.word	0x00008905
    3ba0:	00003c21 	.word	0x00003c21
    3ba4:	00003c79 	.word	0x00003c79

00003ba8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b082      	sub	sp, #8
    3bac:	af00      	add	r7, sp, #0
    3bae:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3bb0:	687b      	ldr	r3, [r7, #4]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	bf14      	ite	ne
    3bb6:	2301      	movne	r3, #1
    3bb8:	2300      	moveq	r3, #0
    3bba:	b2db      	uxtb	r3, r3
    3bbc:	2257      	movs	r2, #87	; 0x57
    3bbe:	4906      	ldr	r1, [pc, #24]	; (3bd8 <spi_m_sync_enable+0x30>)
    3bc0:	4618      	mov	r0, r3
    3bc2:	4b06      	ldr	r3, [pc, #24]	; (3bdc <spi_m_sync_enable+0x34>)
    3bc4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	3304      	adds	r3, #4
    3bca:	4618      	mov	r0, r3
    3bcc:	4b04      	ldr	r3, [pc, #16]	; (3be0 <spi_m_sync_enable+0x38>)
    3bce:	4798      	blx	r3
}
    3bd0:	bf00      	nop
    3bd2:	3708      	adds	r7, #8
    3bd4:	46bd      	mov	sp, r7
    3bd6:	bd80      	pop	{r7, pc}
    3bd8:	0001aba4 	.word	0x0001aba4
    3bdc:	00004bbd 	.word	0x00004bbd
    3be0:	00008a11 	.word	0x00008a11

00003be4 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3be4:	b580      	push	{r7, lr}
    3be6:	b082      	sub	sp, #8
    3be8:	af00      	add	r7, sp, #0
    3bea:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	bf14      	ite	ne
    3bf2:	2301      	movne	r3, #1
    3bf4:	2300      	moveq	r3, #0
    3bf6:	b2db      	uxtb	r3, r3
    3bf8:	225d      	movs	r2, #93	; 0x5d
    3bfa:	4906      	ldr	r1, [pc, #24]	; (3c14 <spi_m_sync_disable+0x30>)
    3bfc:	4618      	mov	r0, r3
    3bfe:	4b06      	ldr	r3, [pc, #24]	; (3c18 <spi_m_sync_disable+0x34>)
    3c00:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	3304      	adds	r3, #4
    3c06:	4618      	mov	r0, r3
    3c08:	4b04      	ldr	r3, [pc, #16]	; (3c1c <spi_m_sync_disable+0x38>)
    3c0a:	4798      	blx	r3
}
    3c0c:	bf00      	nop
    3c0e:	3708      	adds	r7, #8
    3c10:	46bd      	mov	sp, r7
    3c12:	bd80      	pop	{r7, pc}
    3c14:	0001aba4 	.word	0x0001aba4
    3c18:	00004bbd 	.word	0x00004bbd
    3c1c:	00008a61 	.word	0x00008a61

00003c20 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3c20:	b580      	push	{r7, lr}
    3c22:	b088      	sub	sp, #32
    3c24:	af00      	add	r7, sp, #0
    3c26:	60f8      	str	r0, [r7, #12]
    3c28:	60b9      	str	r1, [r7, #8]
    3c2a:	4613      	mov	r3, r2
    3c2c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3c2e:	68fb      	ldr	r3, [r7, #12]
    3c30:	2b00      	cmp	r3, #0
    3c32:	bf14      	ite	ne
    3c34:	2301      	movne	r3, #1
    3c36:	2300      	moveq	r3, #0
    3c38:	b2db      	uxtb	r3, r3
    3c3a:	2287      	movs	r2, #135	; 0x87
    3c3c:	490b      	ldr	r1, [pc, #44]	; (3c6c <_spi_m_sync_io_read+0x4c>)
    3c3e:	4618      	mov	r0, r3
    3c40:	4b0b      	ldr	r3, [pc, #44]	; (3c70 <_spi_m_sync_io_read+0x50>)
    3c42:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3c44:	68fb      	ldr	r3, [r7, #12]
    3c46:	3b0c      	subs	r3, #12
    3c48:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3c4a:	68bb      	ldr	r3, [r7, #8]
    3c4c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3c4e:	2300      	movs	r3, #0
    3c50:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3c52:	88fb      	ldrh	r3, [r7, #6]
    3c54:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3c56:	f107 0310 	add.w	r3, r7, #16
    3c5a:	4619      	mov	r1, r3
    3c5c:	69f8      	ldr	r0, [r7, #28]
    3c5e:	4b05      	ldr	r3, [pc, #20]	; (3c74 <_spi_m_sync_io_read+0x54>)
    3c60:	4798      	blx	r3
    3c62:	4603      	mov	r3, r0
}
    3c64:	4618      	mov	r0, r3
    3c66:	3720      	adds	r7, #32
    3c68:	46bd      	mov	sp, r7
    3c6a:	bd80      	pop	{r7, pc}
    3c6c:	0001aba4 	.word	0x0001aba4
    3c70:	00004bbd 	.word	0x00004bbd
    3c74:	00003cd1 	.word	0x00003cd1

00003c78 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b088      	sub	sp, #32
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	60f8      	str	r0, [r7, #12]
    3c80:	60b9      	str	r1, [r7, #8]
    3c82:	4613      	mov	r3, r2
    3c84:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3c86:	68fb      	ldr	r3, [r7, #12]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	bf14      	ite	ne
    3c8c:	2301      	movne	r3, #1
    3c8e:	2300      	moveq	r3, #0
    3c90:	b2db      	uxtb	r3, r3
    3c92:	22a3      	movs	r2, #163	; 0xa3
    3c94:	490b      	ldr	r1, [pc, #44]	; (3cc4 <_spi_m_sync_io_write+0x4c>)
    3c96:	4618      	mov	r0, r3
    3c98:	4b0b      	ldr	r3, [pc, #44]	; (3cc8 <_spi_m_sync_io_write+0x50>)
    3c9a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3c9c:	68fb      	ldr	r3, [r7, #12]
    3c9e:	3b0c      	subs	r3, #12
    3ca0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3ca2:	2300      	movs	r3, #0
    3ca4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    3ca6:	68bb      	ldr	r3, [r7, #8]
    3ca8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3caa:	88fb      	ldrh	r3, [r7, #6]
    3cac:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3cae:	f107 0310 	add.w	r3, r7, #16
    3cb2:	4619      	mov	r1, r3
    3cb4:	69f8      	ldr	r0, [r7, #28]
    3cb6:	4b05      	ldr	r3, [pc, #20]	; (3ccc <_spi_m_sync_io_write+0x54>)
    3cb8:	4798      	blx	r3
    3cba:	4603      	mov	r3, r0
}
    3cbc:	4618      	mov	r0, r3
    3cbe:	3720      	adds	r7, #32
    3cc0:	46bd      	mov	sp, r7
    3cc2:	bd80      	pop	{r7, pc}
    3cc4:	0001aba4 	.word	0x0001aba4
    3cc8:	00004bbd 	.word	0x00004bbd
    3ccc:	00003cd1 	.word	0x00003cd1

00003cd0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b086      	sub	sp, #24
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	6078      	str	r0, [r7, #4]
    3cd8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d004      	beq.n	3cea <spi_m_sync_transfer+0x1a>
    3ce0:	683b      	ldr	r3, [r7, #0]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d001      	beq.n	3cea <spi_m_sync_transfer+0x1a>
    3ce6:	2301      	movs	r3, #1
    3ce8:	e000      	b.n	3cec <spi_m_sync_transfer+0x1c>
    3cea:	2300      	movs	r3, #0
    3cec:	f003 0301 	and.w	r3, r3, #1
    3cf0:	b2db      	uxtb	r3, r3
    3cf2:	22b3      	movs	r2, #179	; 0xb3
    3cf4:	490c      	ldr	r1, [pc, #48]	; (3d28 <spi_m_sync_transfer+0x58>)
    3cf6:	4618      	mov	r0, r3
    3cf8:	4b0c      	ldr	r3, [pc, #48]	; (3d2c <spi_m_sync_transfer+0x5c>)
    3cfa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3cfc:	683b      	ldr	r3, [r7, #0]
    3cfe:	681b      	ldr	r3, [r3, #0]
    3d00:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3d02:	683b      	ldr	r3, [r7, #0]
    3d04:	685b      	ldr	r3, [r3, #4]
    3d06:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3d08:	683b      	ldr	r3, [r7, #0]
    3d0a:	689b      	ldr	r3, [r3, #8]
    3d0c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	3304      	adds	r3, #4
    3d12:	f107 020c 	add.w	r2, r7, #12
    3d16:	4611      	mov	r1, r2
    3d18:	4618      	mov	r0, r3
    3d1a:	4b05      	ldr	r3, [pc, #20]	; (3d30 <spi_m_sync_transfer+0x60>)
    3d1c:	4798      	blx	r3
    3d1e:	4603      	mov	r3, r0
}
    3d20:	4618      	mov	r0, r3
    3d22:	3718      	adds	r7, #24
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}
    3d28:	0001aba4 	.word	0x0001aba4
    3d2c:	00004bbd 	.word	0x00004bbd
    3d30:	00008c05 	.word	0x00008c05

00003d34 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
    3d3c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d004      	beq.n	3d4e <spi_m_sync_get_io_descriptor+0x1a>
    3d44:	683b      	ldr	r3, [r7, #0]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d001      	beq.n	3d4e <spi_m_sync_get_io_descriptor+0x1a>
    3d4a:	2301      	movs	r3, #1
    3d4c:	e000      	b.n	3d50 <spi_m_sync_get_io_descriptor+0x1c>
    3d4e:	2300      	movs	r3, #0
    3d50:	f003 0301 	and.w	r3, r3, #1
    3d54:	b2db      	uxtb	r3, r3
    3d56:	22bd      	movs	r2, #189	; 0xbd
    3d58:	4906      	ldr	r1, [pc, #24]	; (3d74 <spi_m_sync_get_io_descriptor+0x40>)
    3d5a:	4618      	mov	r0, r3
    3d5c:	4b06      	ldr	r3, [pc, #24]	; (3d78 <spi_m_sync_get_io_descriptor+0x44>)
    3d5e:	4798      	blx	r3
	*io = &spi->io;
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	f103 020c 	add.w	r2, r3, #12
    3d66:	683b      	ldr	r3, [r7, #0]
    3d68:	601a      	str	r2, [r3, #0]
	return 0;
    3d6a:	2300      	movs	r3, #0
}
    3d6c:	4618      	mov	r0, r3
    3d6e:	3708      	adds	r7, #8
    3d70:	46bd      	mov	sp, r7
    3d72:	bd80      	pop	{r7, pc}
    3d74:	0001aba4 	.word	0x0001aba4
    3d78:	00004bbd 	.word	0x00004bbd

00003d7c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3d7c:	b480      	push	{r7}
    3d7e:	b083      	sub	sp, #12
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	681b      	ldr	r3, [r3, #0]
}
    3d88:	4618      	mov	r0, r3
    3d8a:	370c      	adds	r7, #12
    3d8c:	46bd      	mov	sp, r7
    3d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d92:	4770      	bx	lr

00003d94 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3d94:	b480      	push	{r7}
    3d96:	b083      	sub	sp, #12
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d002      	beq.n	3da8 <list_get_next_element+0x14>
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	681b      	ldr	r3, [r3, #0]
    3da6:	e000      	b.n	3daa <list_get_next_element+0x16>
    3da8:	2300      	movs	r3, #0
}
    3daa:	4618      	mov	r0, r3
    3dac:	370c      	adds	r7, #12
    3dae:	46bd      	mov	sp, r7
    3db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db4:	4770      	bx	lr
	...

00003db8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b084      	sub	sp, #16
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	60f8      	str	r0, [r7, #12]
    3dc0:	60b9      	str	r1, [r7, #8]
    3dc2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3dc4:	68fb      	ldr	r3, [r7, #12]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d007      	beq.n	3dda <timer_init+0x22>
    3dca:	68bb      	ldr	r3, [r7, #8]
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d004      	beq.n	3dda <timer_init+0x22>
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d001      	beq.n	3dda <timer_init+0x22>
    3dd6:	2301      	movs	r3, #1
    3dd8:	e000      	b.n	3ddc <timer_init+0x24>
    3dda:	2300      	movs	r3, #0
    3ddc:	f003 0301 	and.w	r3, r3, #1
    3de0:	b2db      	uxtb	r3, r3
    3de2:	223b      	movs	r2, #59	; 0x3b
    3de4:	490c      	ldr	r1, [pc, #48]	; (3e18 <timer_init+0x60>)
    3de6:	4618      	mov	r0, r3
    3de8:	4b0c      	ldr	r3, [pc, #48]	; (3e1c <timer_init+0x64>)
    3dea:	4798      	blx	r3
	descr->func = func;
    3dec:	68fb      	ldr	r3, [r7, #12]
    3dee:	687a      	ldr	r2, [r7, #4]
    3df0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3df2:	68fb      	ldr	r3, [r7, #12]
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	681b      	ldr	r3, [r3, #0]
    3df8:	68fa      	ldr	r2, [r7, #12]
    3dfa:	3204      	adds	r2, #4
    3dfc:	68b9      	ldr	r1, [r7, #8]
    3dfe:	4610      	mov	r0, r2
    3e00:	4798      	blx	r3
	descr->time                           = 0;
    3e02:	68fb      	ldr	r3, [r7, #12]
    3e04:	2200      	movs	r2, #0
    3e06:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	4a05      	ldr	r2, [pc, #20]	; (3e20 <timer_init+0x68>)
    3e0c:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3e0e:	2300      	movs	r3, #0
}
    3e10:	4618      	mov	r0, r3
    3e12:	3710      	adds	r7, #16
    3e14:	46bd      	mov	sp, r7
    3e16:	bd80      	pop	{r7, pc}
    3e18:	0001abc0 	.word	0x0001abc0
    3e1c:	00004bbd 	.word	0x00004bbd
    3e20:	000041a9 	.word	0x000041a9

00003e24 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b082      	sub	sp, #8
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d005      	beq.n	3e3e <timer_start+0x1a>
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	681b      	ldr	r3, [r3, #0]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d001      	beq.n	3e3e <timer_start+0x1a>
    3e3a:	2301      	movs	r3, #1
    3e3c:	e000      	b.n	3e40 <timer_start+0x1c>
    3e3e:	2300      	movs	r3, #0
    3e40:	f003 0301 	and.w	r3, r3, #1
    3e44:	b2db      	uxtb	r3, r3
    3e46:	2254      	movs	r2, #84	; 0x54
    3e48:	490e      	ldr	r1, [pc, #56]	; (3e84 <timer_start+0x60>)
    3e4a:	4618      	mov	r0, r3
    3e4c:	4b0e      	ldr	r3, [pc, #56]	; (3e88 <timer_start+0x64>)
    3e4e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	681b      	ldr	r3, [r3, #0]
    3e54:	699b      	ldr	r3, [r3, #24]
    3e56:	687a      	ldr	r2, [r7, #4]
    3e58:	3204      	adds	r2, #4
    3e5a:	4610      	mov	r0, r2
    3e5c:	4798      	blx	r3
    3e5e:	4603      	mov	r3, r0
    3e60:	2b00      	cmp	r3, #0
    3e62:	d002      	beq.n	3e6a <timer_start+0x46>
		return ERR_DENIED;
    3e64:	f06f 0310 	mvn.w	r3, #16
    3e68:	e007      	b.n	3e7a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	681b      	ldr	r3, [r3, #0]
    3e6e:	689b      	ldr	r3, [r3, #8]
    3e70:	687a      	ldr	r2, [r7, #4]
    3e72:	3204      	adds	r2, #4
    3e74:	4610      	mov	r0, r2
    3e76:	4798      	blx	r3

	return ERR_NONE;
    3e78:	2300      	movs	r3, #0
}
    3e7a:	4618      	mov	r0, r3
    3e7c:	3708      	adds	r7, #8
    3e7e:	46bd      	mov	sp, r7
    3e80:	bd80      	pop	{r7, pc}
    3e82:	bf00      	nop
    3e84:	0001abc0 	.word	0x0001abc0
    3e88:	00004bbd 	.word	0x00004bbd

00003e8c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d005      	beq.n	3ea6 <timer_stop+0x1a>
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d001      	beq.n	3ea6 <timer_stop+0x1a>
    3ea2:	2301      	movs	r3, #1
    3ea4:	e000      	b.n	3ea8 <timer_stop+0x1c>
    3ea6:	2300      	movs	r3, #0
    3ea8:	f003 0301 	and.w	r3, r3, #1
    3eac:	b2db      	uxtb	r3, r3
    3eae:	2262      	movs	r2, #98	; 0x62
    3eb0:	490f      	ldr	r1, [pc, #60]	; (3ef0 <timer_stop+0x64>)
    3eb2:	4618      	mov	r0, r3
    3eb4:	4b0f      	ldr	r3, [pc, #60]	; (3ef4 <timer_stop+0x68>)
    3eb6:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	699b      	ldr	r3, [r3, #24]
    3ebe:	687a      	ldr	r2, [r7, #4]
    3ec0:	3204      	adds	r2, #4
    3ec2:	4610      	mov	r0, r2
    3ec4:	4798      	blx	r3
    3ec6:	4603      	mov	r3, r0
    3ec8:	f083 0301 	eor.w	r3, r3, #1
    3ecc:	b2db      	uxtb	r3, r3
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d002      	beq.n	3ed8 <timer_stop+0x4c>
		return ERR_DENIED;
    3ed2:	f06f 0310 	mvn.w	r3, #16
    3ed6:	e007      	b.n	3ee8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3ed8:	687b      	ldr	r3, [r7, #4]
    3eda:	681b      	ldr	r3, [r3, #0]
    3edc:	68db      	ldr	r3, [r3, #12]
    3ede:	687a      	ldr	r2, [r7, #4]
    3ee0:	3204      	adds	r2, #4
    3ee2:	4610      	mov	r0, r2
    3ee4:	4798      	blx	r3

	return ERR_NONE;
    3ee6:	2300      	movs	r3, #0
}
    3ee8:	4618      	mov	r0, r3
    3eea:	3708      	adds	r7, #8
    3eec:	46bd      	mov	sp, r7
    3eee:	bd80      	pop	{r7, pc}
    3ef0:	0001abc0 	.word	0x0001abc0
    3ef4:	00004bbd 	.word	0x00004bbd

00003ef8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3ef8:	b580      	push	{r7, lr}
    3efa:	b084      	sub	sp, #16
    3efc:	af00      	add	r7, sp, #0
    3efe:	6078      	str	r0, [r7, #4]
    3f00:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d008      	beq.n	3f1a <timer_add_task+0x22>
    3f08:	683b      	ldr	r3, [r7, #0]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d005      	beq.n	3f1a <timer_add_task+0x22>
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d001      	beq.n	3f1a <timer_add_task+0x22>
    3f16:	2301      	movs	r3, #1
    3f18:	e000      	b.n	3f1c <timer_add_task+0x24>
    3f1a:	2300      	movs	r3, #0
    3f1c:	f003 0301 	and.w	r3, r3, #1
    3f20:	b2db      	uxtb	r3, r3
    3f22:	227b      	movs	r2, #123	; 0x7b
    3f24:	492f      	ldr	r1, [pc, #188]	; (3fe4 <timer_add_task+0xec>)
    3f26:	4618      	mov	r0, r3
    3f28:	4b2f      	ldr	r3, [pc, #188]	; (3fe8 <timer_add_task+0xf0>)
    3f2a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	7f1b      	ldrb	r3, [r3, #28]
    3f30:	b2db      	uxtb	r3, r3
    3f32:	f043 0301 	orr.w	r3, r3, #1
    3f36:	b2da      	uxtb	r2, r3
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	3318      	adds	r3, #24
    3f40:	6839      	ldr	r1, [r7, #0]
    3f42:	4618      	mov	r0, r3
    3f44:	4b29      	ldr	r3, [pc, #164]	; (3fec <timer_add_task+0xf4>)
    3f46:	4798      	blx	r3
    3f48:	4603      	mov	r3, r0
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d00f      	beq.n	3f6e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	7f1b      	ldrb	r3, [r3, #28]
    3f52:	b2db      	uxtb	r3, r3
    3f54:	f023 0301 	bic.w	r3, r3, #1
    3f58:	b2da      	uxtb	r2, r3
    3f5a:	687b      	ldr	r3, [r7, #4]
    3f5c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3f5e:	2280      	movs	r2, #128	; 0x80
    3f60:	4920      	ldr	r1, [pc, #128]	; (3fe4 <timer_add_task+0xec>)
    3f62:	2000      	movs	r0, #0
    3f64:	4b20      	ldr	r3, [pc, #128]	; (3fe8 <timer_add_task+0xf0>)
    3f66:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3f68:	f06f 0311 	mvn.w	r3, #17
    3f6c:	e035      	b.n	3fda <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	695a      	ldr	r2, [r3, #20]
    3f72:	683b      	ldr	r3, [r7, #0]
    3f74:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	f103 0018 	add.w	r0, r3, #24
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	695b      	ldr	r3, [r3, #20]
    3f80:	461a      	mov	r2, r3
    3f82:	6839      	ldr	r1, [r7, #0]
    3f84:	4b1a      	ldr	r3, [pc, #104]	; (3ff0 <timer_add_task+0xf8>)
    3f86:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	7f1b      	ldrb	r3, [r3, #28]
    3f8c:	b2db      	uxtb	r3, r3
    3f8e:	f023 0301 	bic.w	r3, r3, #1
    3f92:	b2da      	uxtb	r2, r3
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	7f1b      	ldrb	r3, [r3, #28]
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	f003 0302 	and.w	r3, r3, #2
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d018      	beq.n	3fd8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    3fa6:	f107 030c 	add.w	r3, r7, #12
    3faa:	4618      	mov	r0, r3
    3fac:	4b11      	ldr	r3, [pc, #68]	; (3ff4 <timer_add_task+0xfc>)
    3fae:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	7f1b      	ldrb	r3, [r3, #28]
    3fb4:	b2db      	uxtb	r3, r3
    3fb6:	f023 0302 	bic.w	r3, r3, #2
    3fba:	b2da      	uxtb	r2, r3
    3fbc:	687b      	ldr	r3, [r7, #4]
    3fbe:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	681b      	ldr	r3, [r3, #0]
    3fc4:	69db      	ldr	r3, [r3, #28]
    3fc6:	687a      	ldr	r2, [r7, #4]
    3fc8:	3204      	adds	r2, #4
    3fca:	4610      	mov	r0, r2
    3fcc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3fce:	f107 030c 	add.w	r3, r7, #12
    3fd2:	4618      	mov	r0, r3
    3fd4:	4b08      	ldr	r3, [pc, #32]	; (3ff8 <timer_add_task+0x100>)
    3fd6:	4798      	blx	r3
	}

	return ERR_NONE;
    3fd8:	2300      	movs	r3, #0
}
    3fda:	4618      	mov	r0, r3
    3fdc:	3710      	adds	r7, #16
    3fde:	46bd      	mov	sp, r7
    3fe0:	bd80      	pop	{r7, pc}
    3fe2:	bf00      	nop
    3fe4:	0001abc0 	.word	0x0001abc0
    3fe8:	00004bbd 	.word	0x00004bbd
    3fec:	00004be5 	.word	0x00004be5
    3ff0:	000040f9 	.word	0x000040f9
    3ff4:	0000cfe1 	.word	0x0000cfe1
    3ff8:	0000d007 	.word	0x0000d007

00003ffc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b084      	sub	sp, #16
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    4004:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	2b00      	cmp	r3, #0
    400a:	d008      	beq.n	401e <timer_remove_task+0x22>
    400c:	683b      	ldr	r3, [r7, #0]
    400e:	2b00      	cmp	r3, #0
    4010:	d005      	beq.n	401e <timer_remove_task+0x22>
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	681b      	ldr	r3, [r3, #0]
    4016:	2b00      	cmp	r3, #0
    4018:	d001      	beq.n	401e <timer_remove_task+0x22>
    401a:	2301      	movs	r3, #1
    401c:	e000      	b.n	4020 <timer_remove_task+0x24>
    401e:	2300      	movs	r3, #0
    4020:	f003 0301 	and.w	r3, r3, #1
    4024:	b2db      	uxtb	r3, r3
    4026:	2296      	movs	r2, #150	; 0x96
    4028:	492d      	ldr	r1, [pc, #180]	; (40e0 <timer_remove_task+0xe4>)
    402a:	4618      	mov	r0, r3
    402c:	4b2d      	ldr	r3, [pc, #180]	; (40e4 <timer_remove_task+0xe8>)
    402e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	7f1b      	ldrb	r3, [r3, #28]
    4034:	b2db      	uxtb	r3, r3
    4036:	f043 0301 	orr.w	r3, r3, #1
    403a:	b2da      	uxtb	r2, r3
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	3318      	adds	r3, #24
    4044:	6839      	ldr	r1, [r7, #0]
    4046:	4618      	mov	r0, r3
    4048:	4b27      	ldr	r3, [pc, #156]	; (40e8 <timer_remove_task+0xec>)
    404a:	4798      	blx	r3
    404c:	4603      	mov	r3, r0
    404e:	f083 0301 	eor.w	r3, r3, #1
    4052:	b2db      	uxtb	r3, r3
    4054:	2b00      	cmp	r3, #0
    4056:	d00f      	beq.n	4078 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	7f1b      	ldrb	r3, [r3, #28]
    405c:	b2db      	uxtb	r3, r3
    405e:	f023 0301 	bic.w	r3, r3, #1
    4062:	b2da      	uxtb	r2, r3
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4068:	229b      	movs	r2, #155	; 0x9b
    406a:	491d      	ldr	r1, [pc, #116]	; (40e0 <timer_remove_task+0xe4>)
    406c:	2000      	movs	r0, #0
    406e:	4b1d      	ldr	r3, [pc, #116]	; (40e4 <timer_remove_task+0xe8>)
    4070:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4072:	f06f 0309 	mvn.w	r3, #9
    4076:	e02e      	b.n	40d6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	3318      	adds	r3, #24
    407c:	6839      	ldr	r1, [r7, #0]
    407e:	4618      	mov	r0, r3
    4080:	4b1a      	ldr	r3, [pc, #104]	; (40ec <timer_remove_task+0xf0>)
    4082:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	7f1b      	ldrb	r3, [r3, #28]
    4088:	b2db      	uxtb	r3, r3
    408a:	f023 0301 	bic.w	r3, r3, #1
    408e:	b2da      	uxtb	r2, r3
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4094:	687b      	ldr	r3, [r7, #4]
    4096:	7f1b      	ldrb	r3, [r3, #28]
    4098:	b2db      	uxtb	r3, r3
    409a:	f003 0302 	and.w	r3, r3, #2
    409e:	2b00      	cmp	r3, #0
    40a0:	d018      	beq.n	40d4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    40a2:	f107 030c 	add.w	r3, r7, #12
    40a6:	4618      	mov	r0, r3
    40a8:	4b11      	ldr	r3, [pc, #68]	; (40f0 <timer_remove_task+0xf4>)
    40aa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	7f1b      	ldrb	r3, [r3, #28]
    40b0:	b2db      	uxtb	r3, r3
    40b2:	f023 0302 	bic.w	r3, r3, #2
    40b6:	b2da      	uxtb	r2, r3
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	69db      	ldr	r3, [r3, #28]
    40c2:	687a      	ldr	r2, [r7, #4]
    40c4:	3204      	adds	r2, #4
    40c6:	4610      	mov	r0, r2
    40c8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    40ca:	f107 030c 	add.w	r3, r7, #12
    40ce:	4618      	mov	r0, r3
    40d0:	4b08      	ldr	r3, [pc, #32]	; (40f4 <timer_remove_task+0xf8>)
    40d2:	4798      	blx	r3
	}

	return ERR_NONE;
    40d4:	2300      	movs	r3, #0
}
    40d6:	4618      	mov	r0, r3
    40d8:	3710      	adds	r7, #16
    40da:	46bd      	mov	sp, r7
    40dc:	bd80      	pop	{r7, pc}
    40de:	bf00      	nop
    40e0:	0001abc0 	.word	0x0001abc0
    40e4:	00004bbd 	.word	0x00004bbd
    40e8:	00004be5 	.word	0x00004be5
    40ec:	00004d47 	.word	0x00004d47
    40f0:	0000cfe1 	.word	0x0000cfe1
    40f4:	0000d007 	.word	0x0000d007

000040f8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b088      	sub	sp, #32
    40fc:	af00      	add	r7, sp, #0
    40fe:	60f8      	str	r0, [r7, #12]
    4100:	60b9      	str	r1, [r7, #8]
    4102:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    4104:	2300      	movs	r3, #0
    4106:	61bb      	str	r3, [r7, #24]
    4108:	68f8      	ldr	r0, [r7, #12]
    410a:	4b23      	ldr	r3, [pc, #140]	; (4198 <timer_add_timer_task+0xa0>)
    410c:	4798      	blx	r3
    410e:	6138      	str	r0, [r7, #16]

	if (!head) {
    4110:	693b      	ldr	r3, [r7, #16]
    4112:	2b00      	cmp	r3, #0
    4114:	d104      	bne.n	4120 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    4116:	68b9      	ldr	r1, [r7, #8]
    4118:	68f8      	ldr	r0, [r7, #12]
    411a:	4b20      	ldr	r3, [pc, #128]	; (419c <timer_add_timer_task+0xa4>)
    411c:	4798      	blx	r3
		return;
    411e:	e037      	b.n	4190 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4120:	693b      	ldr	r3, [r7, #16]
    4122:	61fb      	str	r3, [r7, #28]
    4124:	e022      	b.n	416c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    4126:	69fb      	ldr	r3, [r7, #28]
    4128:	685a      	ldr	r2, [r3, #4]
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	429a      	cmp	r2, r3
    412e:	d808      	bhi.n	4142 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4130:	69fb      	ldr	r3, [r7, #28]
    4132:	689a      	ldr	r2, [r3, #8]
    4134:	69fb      	ldr	r3, [r7, #28]
    4136:	6859      	ldr	r1, [r3, #4]
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	1acb      	subs	r3, r1, r3
    413c:	4413      	add	r3, r2
    413e:	617b      	str	r3, [r7, #20]
    4140:	e009      	b.n	4156 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4142:	69fb      	ldr	r3, [r7, #28]
    4144:	689a      	ldr	r2, [r3, #8]
    4146:	69fb      	ldr	r3, [r7, #28]
    4148:	685b      	ldr	r3, [r3, #4]
    414a:	441a      	add	r2, r3
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	425b      	negs	r3, r3
    4150:	4413      	add	r3, r2
    4152:	3301      	adds	r3, #1
    4154:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    4156:	68bb      	ldr	r3, [r7, #8]
    4158:	689a      	ldr	r2, [r3, #8]
    415a:	697b      	ldr	r3, [r7, #20]
    415c:	429a      	cmp	r2, r3
    415e:	d909      	bls.n	4174 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4160:	69fb      	ldr	r3, [r7, #28]
    4162:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4164:	69f8      	ldr	r0, [r7, #28]
    4166:	4b0e      	ldr	r3, [pc, #56]	; (41a0 <timer_add_timer_task+0xa8>)
    4168:	4798      	blx	r3
    416a:	61f8      	str	r0, [r7, #28]
    416c:	69fb      	ldr	r3, [r7, #28]
    416e:	2b00      	cmp	r3, #0
    4170:	d1d9      	bne.n	4126 <timer_add_timer_task+0x2e>
    4172:	e000      	b.n	4176 <timer_add_timer_task+0x7e>
			break;
    4174:	bf00      	nop
	}

	if (it == head) {
    4176:	69fa      	ldr	r2, [r7, #28]
    4178:	693b      	ldr	r3, [r7, #16]
    417a:	429a      	cmp	r2, r3
    417c:	d104      	bne.n	4188 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    417e:	68b9      	ldr	r1, [r7, #8]
    4180:	68f8      	ldr	r0, [r7, #12]
    4182:	4b06      	ldr	r3, [pc, #24]	; (419c <timer_add_timer_task+0xa4>)
    4184:	4798      	blx	r3
    4186:	e003      	b.n	4190 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4188:	68b9      	ldr	r1, [r7, #8]
    418a:	69b8      	ldr	r0, [r7, #24]
    418c:	4b05      	ldr	r3, [pc, #20]	; (41a4 <timer_add_timer_task+0xac>)
    418e:	4798      	blx	r3
	}
}
    4190:	3720      	adds	r7, #32
    4192:	46bd      	mov	sp, r7
    4194:	bd80      	pop	{r7, pc}
    4196:	bf00      	nop
    4198:	00003d7d 	.word	0x00003d7d
    419c:	00004c1d 	.word	0x00004c1d
    41a0:	00003d95 	.word	0x00003d95
    41a4:	00004c75 	.word	0x00004c75

000041a8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b086      	sub	sp, #24
    41ac:	af00      	add	r7, sp, #0
    41ae:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	3b04      	subs	r3, #4
    41b4:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    41b6:	693b      	ldr	r3, [r7, #16]
    41b8:	3318      	adds	r3, #24
    41ba:	4618      	mov	r0, r3
    41bc:	4b27      	ldr	r3, [pc, #156]	; (425c <timer_process_counted+0xb4>)
    41be:	4798      	blx	r3
    41c0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    41c2:	693b      	ldr	r3, [r7, #16]
    41c4:	695b      	ldr	r3, [r3, #20]
    41c6:	1c5a      	adds	r2, r3, #1
    41c8:	693b      	ldr	r3, [r7, #16]
    41ca:	615a      	str	r2, [r3, #20]
    41cc:	693b      	ldr	r3, [r7, #16]
    41ce:	695b      	ldr	r3, [r3, #20]
    41d0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    41d2:	693b      	ldr	r3, [r7, #16]
    41d4:	7f1b      	ldrb	r3, [r3, #28]
    41d6:	b2db      	uxtb	r3, r3
    41d8:	f003 0301 	and.w	r3, r3, #1
    41dc:	2b00      	cmp	r3, #0
    41de:	d106      	bne.n	41ee <timer_process_counted+0x46>
    41e0:	693b      	ldr	r3, [r7, #16]
    41e2:	7f1b      	ldrb	r3, [r3, #28]
    41e4:	b2db      	uxtb	r3, r3
    41e6:	f003 0302 	and.w	r3, r3, #2
    41ea:	2b00      	cmp	r3, #0
    41ec:	d027      	beq.n	423e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    41ee:	693b      	ldr	r3, [r7, #16]
    41f0:	7f1b      	ldrb	r3, [r3, #28]
    41f2:	b2db      	uxtb	r3, r3
    41f4:	f043 0302 	orr.w	r3, r3, #2
    41f8:	b2da      	uxtb	r2, r3
    41fa:	693b      	ldr	r3, [r7, #16]
    41fc:	771a      	strb	r2, [r3, #28]
		return;
    41fe:	e029      	b.n	4254 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4200:	697b      	ldr	r3, [r7, #20]
    4202:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    4204:	693b      	ldr	r3, [r7, #16]
    4206:	3318      	adds	r3, #24
    4208:	4618      	mov	r0, r3
    420a:	4b15      	ldr	r3, [pc, #84]	; (4260 <timer_process_counted+0xb8>)
    420c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    420e:	68bb      	ldr	r3, [r7, #8]
    4210:	7c1b      	ldrb	r3, [r3, #16]
    4212:	2b01      	cmp	r3, #1
    4214:	d109      	bne.n	422a <timer_process_counted+0x82>
			tmp->time_label = time;
    4216:	68bb      	ldr	r3, [r7, #8]
    4218:	68fa      	ldr	r2, [r7, #12]
    421a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    421c:	693b      	ldr	r3, [r7, #16]
    421e:	3318      	adds	r3, #24
    4220:	68fa      	ldr	r2, [r7, #12]
    4222:	68b9      	ldr	r1, [r7, #8]
    4224:	4618      	mov	r0, r3
    4226:	4b0f      	ldr	r3, [pc, #60]	; (4264 <timer_process_counted+0xbc>)
    4228:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    422a:	693b      	ldr	r3, [r7, #16]
    422c:	3318      	adds	r3, #24
    422e:	4618      	mov	r0, r3
    4230:	4b0a      	ldr	r3, [pc, #40]	; (425c <timer_process_counted+0xb4>)
    4232:	4798      	blx	r3
    4234:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    4236:	68bb      	ldr	r3, [r7, #8]
    4238:	68db      	ldr	r3, [r3, #12]
    423a:	68b8      	ldr	r0, [r7, #8]
    423c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    423e:	697b      	ldr	r3, [r7, #20]
    4240:	2b00      	cmp	r3, #0
    4242:	d007      	beq.n	4254 <timer_process_counted+0xac>
    4244:	697b      	ldr	r3, [r7, #20]
    4246:	685b      	ldr	r3, [r3, #4]
    4248:	68fa      	ldr	r2, [r7, #12]
    424a:	1ad2      	subs	r2, r2, r3
    424c:	697b      	ldr	r3, [r7, #20]
    424e:	689b      	ldr	r3, [r3, #8]
    4250:	429a      	cmp	r2, r3
    4252:	d2d5      	bcs.n	4200 <timer_process_counted+0x58>
	}
}
    4254:	3718      	adds	r7, #24
    4256:	46bd      	mov	sp, r7
    4258:	bd80      	pop	{r7, pc}
    425a:	bf00      	nop
    425c:	00003d7d 	.word	0x00003d7d
    4260:	00004d15 	.word	0x00004d15
    4264:	000040f9 	.word	0x000040f9

00004268 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4268:	b480      	push	{r7}
    426a:	b085      	sub	sp, #20
    426c:	af00      	add	r7, sp, #0
    426e:	4603      	mov	r3, r0
    4270:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4272:	2300      	movs	r3, #0
    4274:	73fb      	strb	r3, [r7, #15]
    4276:	e029      	b.n	42cc <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4278:	f997 300f 	ldrsb.w	r3, [r7, #15]
    427c:	4a19      	ldr	r2, [pc, #100]	; (42e4 <_usb_d_find_ep+0x7c>)
    427e:	015b      	lsls	r3, r3, #5
    4280:	4413      	add	r3, r2
    4282:	3301      	adds	r3, #1
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	79fa      	ldrb	r2, [r7, #7]
    4288:	429a      	cmp	r2, r3
    428a:	d102      	bne.n	4292 <_usb_d_find_ep+0x2a>
			return i;
    428c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4290:	e022      	b.n	42d8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4292:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4296:	4a13      	ldr	r2, [pc, #76]	; (42e4 <_usb_d_find_ep+0x7c>)
    4298:	015b      	lsls	r3, r3, #5
    429a:	4413      	add	r3, r2
    429c:	781b      	ldrb	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d10e      	bne.n	42c0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    42a2:	79fb      	ldrb	r3, [r7, #7]
    42a4:	f003 030f 	and.w	r3, r3, #15
    42a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    42ac:	490d      	ldr	r1, [pc, #52]	; (42e4 <_usb_d_find_ep+0x7c>)
    42ae:	0152      	lsls	r2, r2, #5
    42b0:	440a      	add	r2, r1
    42b2:	3201      	adds	r2, #1
    42b4:	7812      	ldrb	r2, [r2, #0]
    42b6:	4293      	cmp	r3, r2
    42b8:	d102      	bne.n	42c0 <_usb_d_find_ep+0x58>
			return i;
    42ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    42be:	e00b      	b.n	42d8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    42c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    42c4:	b2db      	uxtb	r3, r3
    42c6:	3301      	adds	r3, #1
    42c8:	b2db      	uxtb	r3, r3
    42ca:	73fb      	strb	r3, [r7, #15]
    42cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    42d0:	2b03      	cmp	r3, #3
    42d2:	ddd1      	ble.n	4278 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    42d4:	f04f 33ff 	mov.w	r3, #4294967295
}
    42d8:	4618      	mov	r0, r3
    42da:	3714      	adds	r7, #20
    42dc:	46bd      	mov	sp, r7
    42de:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e2:	4770      	bx	lr
    42e4:	200021e8 	.word	0x200021e8

000042e8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b088      	sub	sp, #32
    42ec:	af00      	add	r7, sp, #0
    42ee:	60ba      	str	r2, [r7, #8]
    42f0:	607b      	str	r3, [r7, #4]
    42f2:	4603      	mov	r3, r0
    42f4:	73fb      	strb	r3, [r7, #15]
    42f6:	460b      	mov	r3, r1
    42f8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    42fa:	68bb      	ldr	r3, [r7, #8]
    42fc:	617b      	str	r3, [r7, #20]
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	61bb      	str	r3, [r7, #24]
    4302:	7bbb      	ldrb	r3, [r7, #14]
    4304:	2b00      	cmp	r3, #0
    4306:	d004      	beq.n	4312 <_usb_d_trans+0x2a>
    4308:	7bfb      	ldrb	r3, [r7, #15]
    430a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    430e:	b2db      	uxtb	r3, r3
    4310:	e003      	b.n	431a <_usb_d_trans+0x32>
    4312:	7bfb      	ldrb	r3, [r7, #15]
    4314:	f003 030f 	and.w	r3, r3, #15
    4318:	b2db      	uxtb	r3, r3
    431a:	773b      	strb	r3, [r7, #28]
    431c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4320:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    4322:	f107 0314 	add.w	r3, r7, #20
    4326:	4618      	mov	r0, r3
    4328:	4b03      	ldr	r3, [pc, #12]	; (4338 <_usb_d_trans+0x50>)
    432a:	4798      	blx	r3
    432c:	4603      	mov	r3, r0
}
    432e:	4618      	mov	r0, r3
    4330:	3720      	adds	r7, #32
    4332:	46bd      	mov	sp, r7
    4334:	bd80      	pop	{r7, pc}
    4336:	bf00      	nop
    4338:	0000c615 	.word	0x0000c615

0000433c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    433c:	b480      	push	{r7}
    433e:	b085      	sub	sp, #20
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	60b9      	str	r1, [r7, #8]
    4346:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4348:	2300      	movs	r3, #0
}
    434a:	4618      	mov	r0, r3
    434c:	3714      	adds	r7, #20
    434e:	46bd      	mov	sp, r7
    4350:	f85d 7b04 	ldr.w	r7, [sp], #4
    4354:	4770      	bx	lr
	...

00004358 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4358:	b580      	push	{r7, lr}
    435a:	b086      	sub	sp, #24
    435c:	af00      	add	r7, sp, #0
    435e:	4603      	mov	r3, r0
    4360:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4362:	79fb      	ldrb	r3, [r7, #7]
    4364:	4618      	mov	r0, r3
    4366:	4b2a      	ldr	r3, [pc, #168]	; (4410 <usb_d_cb_trans_setup+0xb8>)
    4368:	4798      	blx	r3
    436a:	4603      	mov	r3, r0
    436c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    436e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4372:	015b      	lsls	r3, r3, #5
    4374:	4a27      	ldr	r2, [pc, #156]	; (4414 <usb_d_cb_trans_setup+0xbc>)
    4376:	4413      	add	r3, r2
    4378:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    437a:	693b      	ldr	r3, [r7, #16]
    437c:	330c      	adds	r3, #12
    437e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4380:	79fb      	ldrb	r3, [r7, #7]
    4382:	68f9      	ldr	r1, [r7, #12]
    4384:	4618      	mov	r0, r3
    4386:	4b24      	ldr	r3, [pc, #144]	; (4418 <usb_d_cb_trans_setup+0xc0>)
    4388:	4798      	blx	r3
    438a:	4603      	mov	r3, r0
    438c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    438e:	7afb      	ldrb	r3, [r7, #11]
    4390:	2b08      	cmp	r3, #8
    4392:	d00d      	beq.n	43b0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4394:	79fb      	ldrb	r3, [r7, #7]
    4396:	2101      	movs	r1, #1
    4398:	4618      	mov	r0, r3
    439a:	4b20      	ldr	r3, [pc, #128]	; (441c <usb_d_cb_trans_setup+0xc4>)
    439c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    439e:	79fb      	ldrb	r3, [r7, #7]
    43a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43a4:	b2db      	uxtb	r3, r3
    43a6:	2101      	movs	r1, #1
    43a8:	4618      	mov	r0, r3
    43aa:	4b1c      	ldr	r3, [pc, #112]	; (441c <usb_d_cb_trans_setup+0xc4>)
    43ac:	4798      	blx	r3
		return;
    43ae:	e02b      	b.n	4408 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    43b0:	79fb      	ldrb	r3, [r7, #7]
    43b2:	2100      	movs	r1, #0
    43b4:	4618      	mov	r0, r3
    43b6:	4b19      	ldr	r3, [pc, #100]	; (441c <usb_d_cb_trans_setup+0xc4>)
    43b8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    43ba:	79fb      	ldrb	r3, [r7, #7]
    43bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43c0:	b2db      	uxtb	r3, r3
    43c2:	2100      	movs	r1, #0
    43c4:	4618      	mov	r0, r3
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <usb_d_cb_trans_setup+0xc4>)
    43c8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    43ca:	693b      	ldr	r3, [r7, #16]
    43cc:	2201      	movs	r2, #1
    43ce:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    43d0:	693b      	ldr	r3, [r7, #16]
    43d2:	695b      	ldr	r3, [r3, #20]
    43d4:	79fa      	ldrb	r2, [r7, #7]
    43d6:	68f9      	ldr	r1, [r7, #12]
    43d8:	4610      	mov	r0, r2
    43da:	4798      	blx	r3
    43dc:	4603      	mov	r3, r0
    43de:	f083 0301 	eor.w	r3, r3, #1
    43e2:	b2db      	uxtb	r3, r3
    43e4:	2b00      	cmp	r3, #0
    43e6:	d00f      	beq.n	4408 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    43e8:	693b      	ldr	r3, [r7, #16]
    43ea:	2205      	movs	r2, #5
    43ec:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    43ee:	79fb      	ldrb	r3, [r7, #7]
    43f0:	2101      	movs	r1, #1
    43f2:	4618      	mov	r0, r3
    43f4:	4b09      	ldr	r3, [pc, #36]	; (441c <usb_d_cb_trans_setup+0xc4>)
    43f6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    43f8:	79fb      	ldrb	r3, [r7, #7]
    43fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43fe:	b2db      	uxtb	r3, r3
    4400:	2101      	movs	r1, #1
    4402:	4618      	mov	r0, r3
    4404:	4b05      	ldr	r3, [pc, #20]	; (441c <usb_d_cb_trans_setup+0xc4>)
    4406:	4798      	blx	r3
	}
}
    4408:	3718      	adds	r7, #24
    440a:	46bd      	mov	sp, r7
    440c:	bd80      	pop	{r7, pc}
    440e:	bf00      	nop
    4410:	00004269 	.word	0x00004269
    4414:	200021e8 	.word	0x200021e8
    4418:	0000c56d 	.word	0x0000c56d
    441c:	0000c3e5 	.word	0x0000c3e5

00004420 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4420:	b580      	push	{r7, lr}
    4422:	b084      	sub	sp, #16
    4424:	af00      	add	r7, sp, #0
    4426:	4603      	mov	r3, r0
    4428:	6039      	str	r1, [r7, #0]
    442a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    442c:	79fb      	ldrb	r3, [r7, #7]
    442e:	4618      	mov	r0, r3
    4430:	4b0d      	ldr	r3, [pc, #52]	; (4468 <usb_d_cb_trans_more+0x48>)
    4432:	4798      	blx	r3
    4434:	4603      	mov	r3, r0
    4436:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4438:	f997 300f 	ldrsb.w	r3, [r7, #15]
    443c:	015b      	lsls	r3, r3, #5
    443e:	4a0b      	ldr	r2, [pc, #44]	; (446c <usb_d_cb_trans_more+0x4c>)
    4440:	4413      	add	r3, r2
    4442:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4444:	68bb      	ldr	r3, [r7, #8]
    4446:	789b      	ldrb	r3, [r3, #2]
    4448:	2b03      	cmp	r3, #3
    444a:	d107      	bne.n	445c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    444c:	68bb      	ldr	r3, [r7, #8]
    444e:	699b      	ldr	r3, [r3, #24]
    4450:	79fa      	ldrb	r2, [r7, #7]
    4452:	6839      	ldr	r1, [r7, #0]
    4454:	4610      	mov	r0, r2
    4456:	4798      	blx	r3
    4458:	4603      	mov	r3, r0
    445a:	e000      	b.n	445e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    445c:	2300      	movs	r3, #0
}
    445e:	4618      	mov	r0, r3
    4460:	3710      	adds	r7, #16
    4462:	46bd      	mov	sp, r7
    4464:	bd80      	pop	{r7, pc}
    4466:	bf00      	nop
    4468:	00004269 	.word	0x00004269
    446c:	200021e8 	.word	0x200021e8

00004470 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4470:	b590      	push	{r4, r7, lr}
    4472:	b087      	sub	sp, #28
    4474:	af02      	add	r7, sp, #8
    4476:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	789b      	ldrb	r3, [r3, #2]
    447c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	7b1b      	ldrb	r3, [r3, #12]
    4482:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4486:	2b00      	cmp	r3, #0
    4488:	bf14      	ite	ne
    448a:	2301      	movne	r3, #1
    448c:	2300      	moveq	r3, #0
    448e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4490:	7bfb      	ldrb	r3, [r7, #15]
    4492:	2b03      	cmp	r3, #3
    4494:	d13a      	bne.n	450c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	69db      	ldr	r3, [r3, #28]
    449a:	687a      	ldr	r2, [r7, #4]
    449c:	7850      	ldrb	r0, [r2, #1]
    449e:	687a      	ldr	r2, [r7, #4]
    44a0:	320c      	adds	r2, #12
    44a2:	2101      	movs	r1, #1
    44a4:	4798      	blx	r3
    44a6:	4603      	mov	r3, r0
    44a8:	737b      	strb	r3, [r7, #13]
		if (err) {
    44aa:	7b7b      	ldrb	r3, [r7, #13]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d015      	beq.n	44dc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	2205      	movs	r2, #5
    44b4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    44b6:	687b      	ldr	r3, [r7, #4]
    44b8:	2202      	movs	r2, #2
    44ba:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    44bc:	7bbb      	ldrb	r3, [r7, #14]
    44be:	2b00      	cmp	r3, #0
    44c0:	d002      	beq.n	44c8 <usb_d_ctrl_trans_done+0x58>
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	785b      	ldrb	r3, [r3, #1]
    44c6:	e004      	b.n	44d2 <usb_d_ctrl_trans_done+0x62>
    44c8:	687b      	ldr	r3, [r7, #4]
    44ca:	785b      	ldrb	r3, [r3, #1]
    44cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44d0:	b2db      	uxtb	r3, r3
    44d2:	2101      	movs	r1, #1
    44d4:	4618      	mov	r0, r3
    44d6:	4b15      	ldr	r3, [pc, #84]	; (452c <usb_d_ctrl_trans_done+0xbc>)
    44d8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    44da:	e022      	b.n	4522 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	2204      	movs	r2, #4
    44e0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	7858      	ldrb	r0, [r3, #1]
    44e6:	7bbb      	ldrb	r3, [r7, #14]
    44e8:	2b00      	cmp	r3, #0
    44ea:	bf14      	ite	ne
    44ec:	2301      	movne	r3, #1
    44ee:	2300      	moveq	r3, #0
    44f0:	b2db      	uxtb	r3, r3
    44f2:	f083 0301 	eor.w	r3, r3, #1
    44f6:	b2db      	uxtb	r3, r3
    44f8:	f003 0301 	and.w	r3, r3, #1
    44fc:	b2d9      	uxtb	r1, r3
    44fe:	2301      	movs	r3, #1
    4500:	9300      	str	r3, [sp, #0]
    4502:	2300      	movs	r3, #0
    4504:	2200      	movs	r2, #0
    4506:	4c0a      	ldr	r4, [pc, #40]	; (4530 <usb_d_ctrl_trans_done+0xc0>)
    4508:	47a0      	blx	r4
}
    450a:	e00a      	b.n	4522 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	69db      	ldr	r3, [r3, #28]
    4510:	687a      	ldr	r2, [r7, #4]
    4512:	7850      	ldrb	r0, [r2, #1]
    4514:	687a      	ldr	r2, [r7, #4]
    4516:	320c      	adds	r2, #12
    4518:	2100      	movs	r1, #0
    451a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	2202      	movs	r2, #2
    4520:	709a      	strb	r2, [r3, #2]
}
    4522:	bf00      	nop
    4524:	3714      	adds	r7, #20
    4526:	46bd      	mov	sp, r7
    4528:	bd90      	pop	{r4, r7, pc}
    452a:	bf00      	nop
    452c:	0000c3e5 	.word	0x0000c3e5
    4530:	000042e9 	.word	0x000042e9

00004534 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4534:	b580      	push	{r7, lr}
    4536:	b086      	sub	sp, #24
    4538:	af00      	add	r7, sp, #0
    453a:	4603      	mov	r3, r0
    453c:	60b9      	str	r1, [r7, #8]
    453e:	607a      	str	r2, [r7, #4]
    4540:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4542:	7bfb      	ldrb	r3, [r7, #15]
    4544:	4618      	mov	r0, r3
    4546:	4b2f      	ldr	r3, [pc, #188]	; (4604 <_usb_d_cb_trans_done+0xd0>)
    4548:	4798      	blx	r3
    454a:	4603      	mov	r3, r0
    454c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    454e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4552:	015b      	lsls	r3, r3, #5
    4554:	4a2c      	ldr	r2, [pc, #176]	; (4608 <_usb_d_cb_trans_done+0xd4>)
    4556:	4413      	add	r3, r2
    4558:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    455a:	68bb      	ldr	r3, [r7, #8]
    455c:	2b00      	cmp	r3, #0
    455e:	d10e      	bne.n	457e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4560:	693b      	ldr	r3, [r7, #16]
    4562:	2200      	movs	r2, #0
    4564:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4566:	693b      	ldr	r3, [r7, #16]
    4568:	781b      	ldrb	r3, [r3, #0]
    456a:	2b00      	cmp	r3, #0
    456c:	d103      	bne.n	4576 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    456e:	6938      	ldr	r0, [r7, #16]
    4570:	4b26      	ldr	r3, [pc, #152]	; (460c <_usb_d_cb_trans_done+0xd8>)
    4572:	4798      	blx	r3
			return;
    4574:	e043      	b.n	45fe <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4576:	693b      	ldr	r3, [r7, #16]
    4578:	2201      	movs	r2, #1
    457a:	709a      	strb	r2, [r3, #2]
    457c:	e038      	b.n	45f0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    457e:	68bb      	ldr	r3, [r7, #8]
    4580:	2b01      	cmp	r3, #1
    4582:	d113      	bne.n	45ac <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4584:	693b      	ldr	r3, [r7, #16]
    4586:	2202      	movs	r2, #2
    4588:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    458a:	693b      	ldr	r3, [r7, #16]
    458c:	781b      	ldrb	r3, [r3, #0]
    458e:	2b00      	cmp	r3, #0
    4590:	d108      	bne.n	45a4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4592:	693b      	ldr	r3, [r7, #16]
    4594:	2202      	movs	r2, #2
    4596:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4598:	7bfb      	ldrb	r3, [r7, #15]
    459a:	2100      	movs	r1, #0
    459c:	4618      	mov	r0, r3
    459e:	4b1c      	ldr	r3, [pc, #112]	; (4610 <_usb_d_cb_trans_done+0xdc>)
    45a0:	4798      	blx	r3
    45a2:	e025      	b.n	45f0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    45a4:	693b      	ldr	r3, [r7, #16]
    45a6:	2205      	movs	r2, #5
    45a8:	709a      	strb	r2, [r3, #2]
    45aa:	e021      	b.n	45f0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    45ac:	68bb      	ldr	r3, [r7, #8]
    45ae:	2b02      	cmp	r3, #2
    45b0:	d10e      	bne.n	45d0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    45b2:	693b      	ldr	r3, [r7, #16]
    45b4:	2204      	movs	r2, #4
    45b6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    45b8:	693b      	ldr	r3, [r7, #16]
    45ba:	781b      	ldrb	r3, [r3, #0]
    45bc:	2b00      	cmp	r3, #0
    45be:	d103      	bne.n	45c8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    45c0:	693b      	ldr	r3, [r7, #16]
    45c2:	2202      	movs	r2, #2
    45c4:	709a      	strb	r2, [r3, #2]
			return;
    45c6:	e01a      	b.n	45fe <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    45c8:	693b      	ldr	r3, [r7, #16]
    45ca:	2201      	movs	r2, #1
    45cc:	709a      	strb	r2, [r3, #2]
    45ce:	e00f      	b.n	45f0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    45d0:	68bb      	ldr	r3, [r7, #8]
    45d2:	2b03      	cmp	r3, #3
    45d4:	d106      	bne.n	45e4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    45d6:	693b      	ldr	r3, [r7, #16]
    45d8:	2200      	movs	r2, #0
    45da:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    45dc:	693b      	ldr	r3, [r7, #16]
    45de:	2205      	movs	r2, #5
    45e0:	70da      	strb	r2, [r3, #3]
    45e2:	e005      	b.n	45f0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    45e4:	693b      	ldr	r3, [r7, #16]
    45e6:	2206      	movs	r2, #6
    45e8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    45ea:	693b      	ldr	r3, [r7, #16]
    45ec:	2206      	movs	r2, #6
    45ee:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    45f0:	693b      	ldr	r3, [r7, #16]
    45f2:	69db      	ldr	r3, [r3, #28]
    45f4:	693a      	ldr	r2, [r7, #16]
    45f6:	78d1      	ldrb	r1, [r2, #3]
    45f8:	687a      	ldr	r2, [r7, #4]
    45fa:	7bf8      	ldrb	r0, [r7, #15]
    45fc:	4798      	blx	r3
}
    45fe:	3718      	adds	r7, #24
    4600:	46bd      	mov	sp, r7
    4602:	bd80      	pop	{r7, pc}
    4604:	00004269 	.word	0x00004269
    4608:	200021e8 	.word	0x200021e8
    460c:	00004471 	.word	0x00004471
    4610:	0000c3e5 	.word	0x0000c3e5

00004614 <usb_d_init>:

int32_t usb_d_init(void)
{
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    461a:	4b21      	ldr	r3, [pc, #132]	; (46a0 <usb_d_init+0x8c>)
    461c:	4798      	blx	r3
    461e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	2b00      	cmp	r3, #0
    4624:	da01      	bge.n	462a <usb_d_init+0x16>
		return rc;
    4626:	683b      	ldr	r3, [r7, #0]
    4628:	e036      	b.n	4698 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    462a:	2280      	movs	r2, #128	; 0x80
    462c:	2100      	movs	r1, #0
    462e:	481d      	ldr	r0, [pc, #116]	; (46a4 <usb_d_init+0x90>)
    4630:	4b1d      	ldr	r3, [pc, #116]	; (46a8 <usb_d_init+0x94>)
    4632:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4634:	2300      	movs	r3, #0
    4636:	71fb      	strb	r3, [r7, #7]
    4638:	e01e      	b.n	4678 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    463a:	79fb      	ldrb	r3, [r7, #7]
    463c:	4a19      	ldr	r2, [pc, #100]	; (46a4 <usb_d_init+0x90>)
    463e:	015b      	lsls	r3, r3, #5
    4640:	4413      	add	r3, r2
    4642:	3301      	adds	r3, #1
    4644:	22ff      	movs	r2, #255	; 0xff
    4646:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4648:	79fb      	ldrb	r3, [r7, #7]
    464a:	4a16      	ldr	r2, [pc, #88]	; (46a4 <usb_d_init+0x90>)
    464c:	015b      	lsls	r3, r3, #5
    464e:	4413      	add	r3, r2
    4650:	3314      	adds	r3, #20
    4652:	4a16      	ldr	r2, [pc, #88]	; (46ac <usb_d_init+0x98>)
    4654:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4656:	79fb      	ldrb	r3, [r7, #7]
    4658:	4a12      	ldr	r2, [pc, #72]	; (46a4 <usb_d_init+0x90>)
    465a:	015b      	lsls	r3, r3, #5
    465c:	4413      	add	r3, r2
    465e:	3318      	adds	r3, #24
    4660:	4a12      	ldr	r2, [pc, #72]	; (46ac <usb_d_init+0x98>)
    4662:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4664:	79fb      	ldrb	r3, [r7, #7]
    4666:	4a0f      	ldr	r2, [pc, #60]	; (46a4 <usb_d_init+0x90>)
    4668:	015b      	lsls	r3, r3, #5
    466a:	4413      	add	r3, r2
    466c:	331c      	adds	r3, #28
    466e:	4a0f      	ldr	r2, [pc, #60]	; (46ac <usb_d_init+0x98>)
    4670:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4672:	79fb      	ldrb	r3, [r7, #7]
    4674:	3301      	adds	r3, #1
    4676:	71fb      	strb	r3, [r7, #7]
    4678:	79fb      	ldrb	r3, [r7, #7]
    467a:	2b03      	cmp	r3, #3
    467c:	d9dd      	bls.n	463a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    467e:	490c      	ldr	r1, [pc, #48]	; (46b0 <usb_d_init+0x9c>)
    4680:	2000      	movs	r0, #0
    4682:	4b0c      	ldr	r3, [pc, #48]	; (46b4 <usb_d_init+0xa0>)
    4684:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4686:	490c      	ldr	r1, [pc, #48]	; (46b8 <usb_d_init+0xa4>)
    4688:	2001      	movs	r0, #1
    468a:	4b0a      	ldr	r3, [pc, #40]	; (46b4 <usb_d_init+0xa0>)
    468c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    468e:	490b      	ldr	r1, [pc, #44]	; (46bc <usb_d_init+0xa8>)
    4690:	2002      	movs	r0, #2
    4692:	4b08      	ldr	r3, [pc, #32]	; (46b4 <usb_d_init+0xa0>)
    4694:	4798      	blx	r3
	return ERR_NONE;
    4696:	2300      	movs	r3, #0
}
    4698:	4618      	mov	r0, r3
    469a:	3708      	adds	r7, #8
    469c:	46bd      	mov	sp, r7
    469e:	bd80      	pop	{r7, pc}
    46a0:	0000bc2d 	.word	0x0000bc2d
    46a4:	200021e8 	.word	0x200021e8
    46a8:	0001a66d 	.word	0x0001a66d
    46ac:	0000433d 	.word	0x0000433d
    46b0:	00004359 	.word	0x00004359
    46b4:	0000c875 	.word	0x0000c875
    46b8:	00004421 	.word	0x00004421
    46bc:	00004535 	.word	0x00004535

000046c0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    46c0:	b580      	push	{r7, lr}
    46c2:	b082      	sub	sp, #8
    46c4:	af00      	add	r7, sp, #0
    46c6:	4603      	mov	r3, r0
    46c8:	6039      	str	r1, [r7, #0]
    46ca:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    46cc:	79fb      	ldrb	r3, [r7, #7]
    46ce:	6839      	ldr	r1, [r7, #0]
    46d0:	4618      	mov	r0, r3
    46d2:	4b03      	ldr	r3, [pc, #12]	; (46e0 <usb_d_register_callback+0x20>)
    46d4:	4798      	blx	r3
}
    46d6:	bf00      	nop
    46d8:	3708      	adds	r7, #8
    46da:	46bd      	mov	sp, r7
    46dc:	bd80      	pop	{r7, pc}
    46de:	bf00      	nop
    46e0:	0000c82d 	.word	0x0000c82d

000046e4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    46e8:	4b02      	ldr	r3, [pc, #8]	; (46f4 <usb_d_enable+0x10>)
    46ea:	4798      	blx	r3
    46ec:	4603      	mov	r3, r0
}
    46ee:	4618      	mov	r0, r3
    46f0:	bd80      	pop	{r7, pc}
    46f2:	bf00      	nop
    46f4:	0000bd1d 	.word	0x0000bd1d

000046f8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    46fc:	4b01      	ldr	r3, [pc, #4]	; (4704 <usb_d_attach+0xc>)
    46fe:	4798      	blx	r3
}
    4700:	bf00      	nop
    4702:	bd80      	pop	{r7, pc}
    4704:	0000bda1 	.word	0x0000bda1

00004708 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4708:	b580      	push	{r7, lr}
    470a:	b082      	sub	sp, #8
    470c:	af00      	add	r7, sp, #0
    470e:	4603      	mov	r3, r0
    4710:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    4712:	79fb      	ldrb	r3, [r7, #7]
    4714:	4618      	mov	r0, r3
    4716:	4b03      	ldr	r3, [pc, #12]	; (4724 <usb_d_set_address+0x1c>)
    4718:	4798      	blx	r3
}
    471a:	bf00      	nop
    471c:	3708      	adds	r7, #8
    471e:	46bd      	mov	sp, r7
    4720:	bd80      	pop	{r7, pc}
    4722:	bf00      	nop
    4724:	0000bdb5 	.word	0x0000bdb5

00004728 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    4728:	b580      	push	{r7, lr}
    472a:	b082      	sub	sp, #8
    472c:	af00      	add	r7, sp, #0
    472e:	4603      	mov	r3, r0
    4730:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    4732:	79fb      	ldrb	r3, [r7, #7]
    4734:	b29b      	uxth	r3, r3
    4736:	461a      	mov	r2, r3
    4738:	2100      	movs	r1, #0
    473a:	2000      	movs	r0, #0
    473c:	4b03      	ldr	r3, [pc, #12]	; (474c <usb_d_ep0_init+0x24>)
    473e:	4798      	blx	r3
    4740:	4603      	mov	r3, r0
}
    4742:	4618      	mov	r0, r3
    4744:	3708      	adds	r7, #8
    4746:	46bd      	mov	sp, r7
    4748:	bd80      	pop	{r7, pc}
    474a:	bf00      	nop
    474c:	00004751 	.word	0x00004751

00004750 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4750:	b580      	push	{r7, lr}
    4752:	b086      	sub	sp, #24
    4754:	af00      	add	r7, sp, #0
    4756:	4603      	mov	r3, r0
    4758:	71fb      	strb	r3, [r7, #7]
    475a:	460b      	mov	r3, r1
    475c:	71bb      	strb	r3, [r7, #6]
    475e:	4613      	mov	r3, r2
    4760:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4762:	79fb      	ldrb	r3, [r7, #7]
    4764:	4618      	mov	r0, r3
    4766:	4b1e      	ldr	r3, [pc, #120]	; (47e0 <usb_d_ep_init+0x90>)
    4768:	4798      	blx	r3
    476a:	4603      	mov	r3, r0
    476c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    476e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4772:	015b      	lsls	r3, r3, #5
    4774:	4a1b      	ldr	r2, [pc, #108]	; (47e4 <usb_d_ep_init+0x94>)
    4776:	4413      	add	r3, r2
    4778:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    477a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    477e:	2b00      	cmp	r3, #0
    4780:	db02      	blt.n	4788 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    4782:	f06f 0313 	mvn.w	r3, #19
    4786:	e027      	b.n	47d8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4788:	20ff      	movs	r0, #255	; 0xff
    478a:	4b15      	ldr	r3, [pc, #84]	; (47e0 <usb_d_ep_init+0x90>)
    478c:	4798      	blx	r3
    478e:	4603      	mov	r3, r0
    4790:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    4792:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4796:	2b00      	cmp	r3, #0
    4798:	da02      	bge.n	47a0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    479a:	f06f 0314 	mvn.w	r3, #20
    479e:	e01b      	b.n	47d8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    47a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    47a4:	015b      	lsls	r3, r3, #5
    47a6:	4a0f      	ldr	r2, [pc, #60]	; (47e4 <usb_d_ep_init+0x94>)
    47a8:	4413      	add	r3, r2
    47aa:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    47ac:	88ba      	ldrh	r2, [r7, #4]
    47ae:	79b9      	ldrb	r1, [r7, #6]
    47b0:	79fb      	ldrb	r3, [r7, #7]
    47b2:	4618      	mov	r0, r3
    47b4:	4b0c      	ldr	r3, [pc, #48]	; (47e8 <usb_d_ep_init+0x98>)
    47b6:	4798      	blx	r3
    47b8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	2b00      	cmp	r3, #0
    47be:	da01      	bge.n	47c4 <usb_d_ep_init+0x74>
		return rc;
    47c0:	68fb      	ldr	r3, [r7, #12]
    47c2:	e009      	b.n	47d8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    47c4:	693b      	ldr	r3, [r7, #16]
    47c6:	79fa      	ldrb	r2, [r7, #7]
    47c8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    47ca:	79bb      	ldrb	r3, [r7, #6]
    47cc:	f003 0303 	and.w	r3, r3, #3
    47d0:	b2da      	uxtb	r2, r3
    47d2:	693b      	ldr	r3, [r7, #16]
    47d4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    47d6:	2300      	movs	r3, #0
}
    47d8:	4618      	mov	r0, r3
    47da:	3718      	adds	r7, #24
    47dc:	46bd      	mov	sp, r7
    47de:	bd80      	pop	{r7, pc}
    47e0:	00004269 	.word	0x00004269
    47e4:	200021e8 	.word	0x200021e8
    47e8:	0000be55 	.word	0x0000be55

000047ec <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b084      	sub	sp, #16
    47f0:	af00      	add	r7, sp, #0
    47f2:	4603      	mov	r3, r0
    47f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    47f6:	79fb      	ldrb	r3, [r7, #7]
    47f8:	4618      	mov	r0, r3
    47fa:	4b0d      	ldr	r3, [pc, #52]	; (4830 <usb_d_ep_deinit+0x44>)
    47fc:	4798      	blx	r3
    47fe:	4603      	mov	r3, r0
    4800:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4802:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4806:	015b      	lsls	r3, r3, #5
    4808:	4a0a      	ldr	r2, [pc, #40]	; (4834 <usb_d_ep_deinit+0x48>)
    480a:	4413      	add	r3, r2
    480c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4812:	2b00      	cmp	r3, #0
    4814:	db07      	blt.n	4826 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    4816:	79fb      	ldrb	r3, [r7, #7]
    4818:	4618      	mov	r0, r3
    481a:	4b07      	ldr	r3, [pc, #28]	; (4838 <usb_d_ep_deinit+0x4c>)
    481c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    481e:	68bb      	ldr	r3, [r7, #8]
    4820:	22ff      	movs	r2, #255	; 0xff
    4822:	705a      	strb	r2, [r3, #1]
    4824:	e000      	b.n	4828 <usb_d_ep_deinit+0x3c>
		return;
    4826:	bf00      	nop
}
    4828:	3710      	adds	r7, #16
    482a:	46bd      	mov	sp, r7
    482c:	bd80      	pop	{r7, pc}
    482e:	bf00      	nop
    4830:	00004269 	.word	0x00004269
    4834:	200021e8 	.word	0x200021e8
    4838:	0000bf89 	.word	0x0000bf89

0000483c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    483c:	b580      	push	{r7, lr}
    483e:	b086      	sub	sp, #24
    4840:	af00      	add	r7, sp, #0
    4842:	4603      	mov	r3, r0
    4844:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4846:	79fb      	ldrb	r3, [r7, #7]
    4848:	4618      	mov	r0, r3
    484a:	4b15      	ldr	r3, [pc, #84]	; (48a0 <usb_d_ep_enable+0x64>)
    484c:	4798      	blx	r3
    484e:	4603      	mov	r3, r0
    4850:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4852:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4856:	015b      	lsls	r3, r3, #5
    4858:	4a12      	ldr	r2, [pc, #72]	; (48a4 <usb_d_ep_enable+0x68>)
    485a:	4413      	add	r3, r2
    485c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    485e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4862:	2b00      	cmp	r3, #0
    4864:	da02      	bge.n	486c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    4866:	f06f 0311 	mvn.w	r3, #17
    486a:	e014      	b.n	4896 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    486c:	693b      	ldr	r3, [r7, #16]
    486e:	781b      	ldrb	r3, [r3, #0]
    4870:	2b00      	cmp	r3, #0
    4872:	d101      	bne.n	4878 <usb_d_ep_enable+0x3c>
    4874:	2202      	movs	r2, #2
    4876:	e000      	b.n	487a <usb_d_ep_enable+0x3e>
    4878:	2201      	movs	r2, #1
    487a:	693b      	ldr	r3, [r7, #16]
    487c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    487e:	79fb      	ldrb	r3, [r7, #7]
    4880:	4618      	mov	r0, r3
    4882:	4b09      	ldr	r3, [pc, #36]	; (48a8 <usb_d_ep_enable+0x6c>)
    4884:	4798      	blx	r3
    4886:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	2b00      	cmp	r3, #0
    488c:	da02      	bge.n	4894 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    488e:	693b      	ldr	r3, [r7, #16]
    4890:	2200      	movs	r2, #0
    4892:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    4894:	68fb      	ldr	r3, [r7, #12]
}
    4896:	4618      	mov	r0, r3
    4898:	3718      	adds	r7, #24
    489a:	46bd      	mov	sp, r7
    489c:	bd80      	pop	{r7, pc}
    489e:	bf00      	nop
    48a0:	00004269 	.word	0x00004269
    48a4:	200021e8 	.word	0x200021e8
    48a8:	0000c06d 	.word	0x0000c06d

000048ac <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    48ac:	b590      	push	{r4, r7, lr}
    48ae:	b08d      	sub	sp, #52	; 0x34
    48b0:	af02      	add	r7, sp, #8
    48b2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	7a1b      	ldrb	r3, [r3, #8]
    48b8:	4618      	mov	r0, r3
    48ba:	4b51      	ldr	r3, [pc, #324]	; (4a00 <usb_d_ep_transfer+0x154>)
    48bc:	4798      	blx	r3
    48be:	4603      	mov	r3, r0
    48c0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    48c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    48c6:	015b      	lsls	r3, r3, #5
    48c8:	4a4e      	ldr	r2, [pc, #312]	; (4a04 <usb_d_ep_transfer+0x158>)
    48ca:	4413      	add	r3, r2
    48cc:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	7a1b      	ldrb	r3, [r3, #8]
    48d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    48d6:	2b00      	cmp	r3, #0
    48d8:	bf14      	ite	ne
    48da:	2301      	movne	r3, #1
    48dc:	2300      	moveq	r3, #0
    48de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	7a5b      	ldrb	r3, [r3, #9]
    48e6:	2b00      	cmp	r3, #0
    48e8:	bf14      	ite	ne
    48ea:	2301      	movne	r3, #1
    48ec:	2300      	moveq	r3, #0
    48ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	685b      	ldr	r3, [r3, #4]
    48f6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    48f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    48fc:	2b00      	cmp	r3, #0
    48fe:	da02      	bge.n	4906 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    4900:	f06f 0311 	mvn.w	r3, #17
    4904:	e077      	b.n	49f6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    4906:	f107 0308 	add.w	r3, r7, #8
    490a:	4618      	mov	r0, r3
    490c:	4b3e      	ldr	r3, [pc, #248]	; (4a08 <usb_d_ep_transfer+0x15c>)
    490e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    4910:	69bb      	ldr	r3, [r7, #24]
    4912:	789b      	ldrb	r3, [r3, #2]
    4914:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    4916:	7bfb      	ldrb	r3, [r7, #15]
    4918:	b2db      	uxtb	r3, r3
    491a:	2b01      	cmp	r3, #1
    491c:	d10c      	bne.n	4938 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    491e:	69bb      	ldr	r3, [r7, #24]
    4920:	2203      	movs	r2, #3
    4922:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    4924:	f107 0308 	add.w	r3, r7, #8
    4928:	4618      	mov	r0, r3
    492a:	4b38      	ldr	r3, [pc, #224]	; (4a0c <usb_d_ep_transfer+0x160>)
    492c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    492e:	69bb      	ldr	r3, [r7, #24]
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	2b00      	cmp	r3, #0
    4934:	d151      	bne.n	49da <usb_d_ep_transfer+0x12e>
    4936:	e017      	b.n	4968 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    4938:	f107 0308 	add.w	r3, r7, #8
    493c:	4618      	mov	r0, r3
    493e:	4b33      	ldr	r3, [pc, #204]	; (4a0c <usb_d_ep_transfer+0x160>)
    4940:	4798      	blx	r3
		switch (state) {
    4942:	7bfb      	ldrb	r3, [r7, #15]
    4944:	b2db      	uxtb	r3, r3
    4946:	2b05      	cmp	r3, #5
    4948:	d004      	beq.n	4954 <usb_d_ep_transfer+0xa8>
    494a:	2b06      	cmp	r3, #6
    494c:	d004      	beq.n	4958 <usb_d_ep_transfer+0xac>
    494e:	2b00      	cmp	r3, #0
    4950:	d005      	beq.n	495e <usb_d_ep_transfer+0xb2>
    4952:	e007      	b.n	4964 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    4954:	2302      	movs	r3, #2
    4956:	e04e      	b.n	49f6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    4958:	f06f 030f 	mvn.w	r3, #15
    495c:	e04b      	b.n	49f6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    495e:	f06f 0312 	mvn.w	r3, #18
    4962:	e048      	b.n	49f6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    4964:	2301      	movs	r3, #1
    4966:	e046      	b.n	49f6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4968:	69bb      	ldr	r3, [r7, #24]
    496a:	7c9b      	ldrb	r3, [r3, #18]
    496c:	b29a      	uxth	r2, r3
    496e:	69bb      	ldr	r3, [r7, #24]
    4970:	7cdb      	ldrb	r3, [r3, #19]
    4972:	b29b      	uxth	r3, r3
    4974:	021b      	lsls	r3, r3, #8
    4976:	b29b      	uxth	r3, r3
    4978:	4413      	add	r3, r2
    497a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    497c:	8afb      	ldrh	r3, [r7, #22]
    497e:	2b00      	cmp	r3, #0
    4980:	d10b      	bne.n	499a <usb_d_ep_transfer+0xee>
			dir                 = true;
    4982:	2301      	movs	r3, #1
    4984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4988:	2300      	movs	r3, #0
    498a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    498c:	2301      	movs	r3, #1
    498e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4992:	69bb      	ldr	r3, [r7, #24]
    4994:	2204      	movs	r2, #4
    4996:	709a      	strb	r2, [r3, #2]
    4998:	e01f      	b.n	49da <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    499a:	69bb      	ldr	r3, [r7, #24]
    499c:	7b1b      	ldrb	r3, [r3, #12]
    499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    49a2:	2b00      	cmp	r3, #0
    49a4:	bf14      	ite	ne
    49a6:	2301      	movne	r3, #1
    49a8:	2300      	moveq	r3, #0
    49aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    49ae:	8afa      	ldrh	r2, [r7, #22]
    49b0:	6a3b      	ldr	r3, [r7, #32]
    49b2:	429a      	cmp	r2, r3
    49b4:	d201      	bcs.n	49ba <usb_d_ep_transfer+0x10e>
				len = req_len;
    49b6:	8afb      	ldrh	r3, [r7, #22]
    49b8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    49ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    49be:	2b00      	cmp	r3, #0
    49c0:	d008      	beq.n	49d4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    49c2:	8afa      	ldrh	r2, [r7, #22]
    49c4:	6a3b      	ldr	r3, [r7, #32]
    49c6:	429a      	cmp	r2, r3
    49c8:	bf8c      	ite	hi
    49ca:	2301      	movhi	r3, #1
    49cc:	2300      	movls	r3, #0
    49ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    49d2:	e002      	b.n	49da <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    49d4:	2300      	movs	r3, #0
    49d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    49da:	687b      	ldr	r3, [r7, #4]
    49dc:	7a18      	ldrb	r0, [r3, #8]
    49de:	687b      	ldr	r3, [r7, #4]
    49e0:	681a      	ldr	r2, [r3, #0]
    49e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    49e6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    49ea:	9300      	str	r3, [sp, #0]
    49ec:	6a3b      	ldr	r3, [r7, #32]
    49ee:	4c08      	ldr	r4, [pc, #32]	; (4a10 <usb_d_ep_transfer+0x164>)
    49f0:	47a0      	blx	r4
    49f2:	6138      	str	r0, [r7, #16]
	return rc;
    49f4:	693b      	ldr	r3, [r7, #16]
}
    49f6:	4618      	mov	r0, r3
    49f8:	372c      	adds	r7, #44	; 0x2c
    49fa:	46bd      	mov	sp, r7
    49fc:	bd90      	pop	{r4, r7, pc}
    49fe:	bf00      	nop
    4a00:	00004269 	.word	0x00004269
    4a04:	200021e8 	.word	0x200021e8
    4a08:	0000cfe1 	.word	0x0000cfe1
    4a0c:	0000d007 	.word	0x0000d007
    4a10:	000042e9 	.word	0x000042e9

00004a14 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4a14:	b580      	push	{r7, lr}
    4a16:	b084      	sub	sp, #16
    4a18:	af00      	add	r7, sp, #0
    4a1a:	4603      	mov	r3, r0
    4a1c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4a1e:	79fb      	ldrb	r3, [r7, #7]
    4a20:	4618      	mov	r0, r3
    4a22:	4b0e      	ldr	r3, [pc, #56]	; (4a5c <usb_d_ep_abort+0x48>)
    4a24:	4798      	blx	r3
    4a26:	4603      	mov	r3, r0
    4a28:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a2e:	015b      	lsls	r3, r3, #5
    4a30:	4a0b      	ldr	r2, [pc, #44]	; (4a60 <usb_d_ep_abort+0x4c>)
    4a32:	4413      	add	r3, r2
    4a34:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	db0a      	blt.n	4a54 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4a3e:	79fb      	ldrb	r3, [r7, #7]
    4a40:	4618      	mov	r0, r3
    4a42:	4b08      	ldr	r3, [pc, #32]	; (4a64 <usb_d_ep_abort+0x50>)
    4a44:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4a46:	68bb      	ldr	r3, [r7, #8]
    4a48:	2201      	movs	r2, #1
    4a4a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4a4c:	68bb      	ldr	r3, [r7, #8]
    4a4e:	2204      	movs	r2, #4
    4a50:	70da      	strb	r2, [r3, #3]
    4a52:	e000      	b.n	4a56 <usb_d_ep_abort+0x42>
		return;
    4a54:	bf00      	nop
}
    4a56:	3710      	adds	r7, #16
    4a58:	46bd      	mov	sp, r7
    4a5a:	bd80      	pop	{r7, pc}
    4a5c:	00004269 	.word	0x00004269
    4a60:	200021e8 	.word	0x200021e8
    4a64:	0000c7d9 	.word	0x0000c7d9

00004a68 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4a68:	b580      	push	{r7, lr}
    4a6a:	b086      	sub	sp, #24
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	4603      	mov	r3, r0
    4a70:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4a72:	79fb      	ldrb	r3, [r7, #7]
    4a74:	4618      	mov	r0, r3
    4a76:	4b1a      	ldr	r3, [pc, #104]	; (4ae0 <_usb_d_ep_halt_clr+0x78>)
    4a78:	4798      	blx	r3
    4a7a:	4603      	mov	r3, r0
    4a7c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4a82:	015b      	lsls	r3, r3, #5
    4a84:	4a17      	ldr	r2, [pc, #92]	; (4ae4 <_usb_d_ep_halt_clr+0x7c>)
    4a86:	4413      	add	r3, r2
    4a88:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4a8e:	2b00      	cmp	r3, #0
    4a90:	da02      	bge.n	4a98 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    4a92:	f06f 0311 	mvn.w	r3, #17
    4a96:	e01f      	b.n	4ad8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4a98:	79fb      	ldrb	r3, [r7, #7]
    4a9a:	2102      	movs	r1, #2
    4a9c:	4618      	mov	r0, r3
    4a9e:	4b12      	ldr	r3, [pc, #72]	; (4ae8 <_usb_d_ep_halt_clr+0x80>)
    4aa0:	4798      	blx	r3
    4aa2:	4603      	mov	r3, r0
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d016      	beq.n	4ad6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4aa8:	79fb      	ldrb	r3, [r7, #7]
    4aaa:	2100      	movs	r1, #0
    4aac:	4618      	mov	r0, r3
    4aae:	4b0e      	ldr	r3, [pc, #56]	; (4ae8 <_usb_d_ep_halt_clr+0x80>)
    4ab0:	4798      	blx	r3
    4ab2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4ab4:	68fb      	ldr	r3, [r7, #12]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	da01      	bge.n	4abe <_usb_d_ep_halt_clr+0x56>
			return rc;
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	e00c      	b.n	4ad8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4abe:	693b      	ldr	r3, [r7, #16]
    4ac0:	2201      	movs	r2, #1
    4ac2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4ac4:	693b      	ldr	r3, [r7, #16]
    4ac6:	2203      	movs	r2, #3
    4ac8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4aca:	693b      	ldr	r3, [r7, #16]
    4acc:	69db      	ldr	r3, [r3, #28]
    4ace:	79f8      	ldrb	r0, [r7, #7]
    4ad0:	2200      	movs	r2, #0
    4ad2:	2103      	movs	r1, #3
    4ad4:	4798      	blx	r3
	}
	return ERR_NONE;
    4ad6:	2300      	movs	r3, #0
}
    4ad8:	4618      	mov	r0, r3
    4ada:	3718      	adds	r7, #24
    4adc:	46bd      	mov	sp, r7
    4ade:	bd80      	pop	{r7, pc}
    4ae0:	00004269 	.word	0x00004269
    4ae4:	200021e8 	.word	0x200021e8
    4ae8:	0000c3e5 	.word	0x0000c3e5

00004aec <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4aec:	b580      	push	{r7, lr}
    4aee:	b082      	sub	sp, #8
    4af0:	af00      	add	r7, sp, #0
    4af2:	4603      	mov	r3, r0
    4af4:	460a      	mov	r2, r1
    4af6:	71fb      	strb	r3, [r7, #7]
    4af8:	4613      	mov	r3, r2
    4afa:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4afc:	79bb      	ldrb	r3, [r7, #6]
    4afe:	2b00      	cmp	r3, #0
    4b00:	d105      	bne.n	4b0e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4b02:	79fb      	ldrb	r3, [r7, #7]
    4b04:	4618      	mov	r0, r3
    4b06:	4b0c      	ldr	r3, [pc, #48]	; (4b38 <usb_d_ep_halt+0x4c>)
    4b08:	4798      	blx	r3
    4b0a:	4603      	mov	r3, r0
    4b0c:	e00f      	b.n	4b2e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4b0e:	79bb      	ldrb	r3, [r7, #6]
    4b10:	2b01      	cmp	r3, #1
    4b12:	d106      	bne.n	4b22 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4b14:	79fb      	ldrb	r3, [r7, #7]
    4b16:	2101      	movs	r1, #1
    4b18:	4618      	mov	r0, r3
    4b1a:	4b08      	ldr	r3, [pc, #32]	; (4b3c <usb_d_ep_halt+0x50>)
    4b1c:	4798      	blx	r3
    4b1e:	4603      	mov	r3, r0
    4b20:	e005      	b.n	4b2e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4b22:	79fb      	ldrb	r3, [r7, #7]
    4b24:	2102      	movs	r1, #2
    4b26:	4618      	mov	r0, r3
    4b28:	4b04      	ldr	r3, [pc, #16]	; (4b3c <usb_d_ep_halt+0x50>)
    4b2a:	4798      	blx	r3
    4b2c:	4603      	mov	r3, r0
	}
}
    4b2e:	4618      	mov	r0, r3
    4b30:	3708      	adds	r7, #8
    4b32:	46bd      	mov	sp, r7
    4b34:	bd80      	pop	{r7, pc}
    4b36:	bf00      	nop
    4b38:	00004a69 	.word	0x00004a69
    4b3c:	0000c3e5 	.word	0x0000c3e5

00004b40 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b086      	sub	sp, #24
    4b44:	af00      	add	r7, sp, #0
    4b46:	4603      	mov	r3, r0
    4b48:	603a      	str	r2, [r7, #0]
    4b4a:	71fb      	strb	r3, [r7, #7]
    4b4c:	460b      	mov	r3, r1
    4b4e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4b50:	79fb      	ldrb	r3, [r7, #7]
    4b52:	4618      	mov	r0, r3
    4b54:	4b16      	ldr	r3, [pc, #88]	; (4bb0 <usb_d_ep_register_callback+0x70>)
    4b56:	4798      	blx	r3
    4b58:	4603      	mov	r3, r0
    4b5a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b60:	015b      	lsls	r3, r3, #5
    4b62:	4a14      	ldr	r2, [pc, #80]	; (4bb4 <usb_d_ep_register_callback+0x74>)
    4b64:	4413      	add	r3, r2
    4b66:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4b68:	683b      	ldr	r3, [r7, #0]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d001      	beq.n	4b72 <usb_d_ep_register_callback+0x32>
    4b6e:	683b      	ldr	r3, [r7, #0]
    4b70:	e000      	b.n	4b74 <usb_d_ep_register_callback+0x34>
    4b72:	4b11      	ldr	r3, [pc, #68]	; (4bb8 <usb_d_ep_register_callback+0x78>)
    4b74:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	db13      	blt.n	4ba6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    4b7e:	79bb      	ldrb	r3, [r7, #6]
    4b80:	2b01      	cmp	r3, #1
    4b82:	d008      	beq.n	4b96 <usb_d_ep_register_callback+0x56>
    4b84:	2b02      	cmp	r3, #2
    4b86:	d00a      	beq.n	4b9e <usb_d_ep_register_callback+0x5e>
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d000      	beq.n	4b8e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    4b8c:	e00c      	b.n	4ba8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    4b8e:	693b      	ldr	r3, [r7, #16]
    4b90:	68fa      	ldr	r2, [r7, #12]
    4b92:	615a      	str	r2, [r3, #20]
		break;
    4b94:	e008      	b.n	4ba8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4b96:	693b      	ldr	r3, [r7, #16]
    4b98:	68fa      	ldr	r2, [r7, #12]
    4b9a:	619a      	str	r2, [r3, #24]
		break;
    4b9c:	e004      	b.n	4ba8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4b9e:	693b      	ldr	r3, [r7, #16]
    4ba0:	68fa      	ldr	r2, [r7, #12]
    4ba2:	61da      	str	r2, [r3, #28]
		break;
    4ba4:	e000      	b.n	4ba8 <usb_d_ep_register_callback+0x68>
		return;
    4ba6:	bf00      	nop
	}
}
    4ba8:	3718      	adds	r7, #24
    4baa:	46bd      	mov	sp, r7
    4bac:	bd80      	pop	{r7, pc}
    4bae:	bf00      	nop
    4bb0:	00004269 	.word	0x00004269
    4bb4:	200021e8 	.word	0x200021e8
    4bb8:	0000433d 	.word	0x0000433d

00004bbc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4bbc:	b480      	push	{r7}
    4bbe:	b085      	sub	sp, #20
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	4603      	mov	r3, r0
    4bc4:	60b9      	str	r1, [r7, #8]
    4bc6:	607a      	str	r2, [r7, #4]
    4bc8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4bca:	7bfb      	ldrb	r3, [r7, #15]
    4bcc:	f083 0301 	eor.w	r3, r3, #1
    4bd0:	b2db      	uxtb	r3, r3
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d000      	beq.n	4bd8 <assert+0x1c>
		__asm("BKPT #0");
    4bd6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4bd8:	bf00      	nop
    4bda:	3714      	adds	r7, #20
    4bdc:	46bd      	mov	sp, r7
    4bde:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be2:	4770      	bx	lr

00004be4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4be4:	b480      	push	{r7}
    4be6:	b085      	sub	sp, #20
    4be8:	af00      	add	r7, sp, #0
    4bea:	6078      	str	r0, [r7, #4]
    4bec:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	681b      	ldr	r3, [r3, #0]
    4bf2:	60fb      	str	r3, [r7, #12]
    4bf4:	e008      	b.n	4c08 <is_list_element+0x24>
		if (it == element) {
    4bf6:	68fa      	ldr	r2, [r7, #12]
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	429a      	cmp	r2, r3
    4bfc:	d101      	bne.n	4c02 <is_list_element+0x1e>
			return true;
    4bfe:	2301      	movs	r3, #1
    4c00:	e006      	b.n	4c10 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4c02:	68fb      	ldr	r3, [r7, #12]
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	60fb      	str	r3, [r7, #12]
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d1f3      	bne.n	4bf6 <is_list_element+0x12>
		}
	}

	return false;
    4c0e:	2300      	movs	r3, #0
}
    4c10:	4618      	mov	r0, r3
    4c12:	3714      	adds	r7, #20
    4c14:	46bd      	mov	sp, r7
    4c16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1a:	4770      	bx	lr

00004c1c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b082      	sub	sp, #8
    4c20:	af00      	add	r7, sp, #0
    4c22:	6078      	str	r0, [r7, #4]
    4c24:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4c26:	6839      	ldr	r1, [r7, #0]
    4c28:	6878      	ldr	r0, [r7, #4]
    4c2a:	4b0f      	ldr	r3, [pc, #60]	; (4c68 <list_insert_as_head+0x4c>)
    4c2c:	4798      	blx	r3
    4c2e:	4603      	mov	r3, r0
    4c30:	2b00      	cmp	r3, #0
    4c32:	bf14      	ite	ne
    4c34:	2301      	movne	r3, #1
    4c36:	2300      	moveq	r3, #0
    4c38:	b2db      	uxtb	r3, r3
    4c3a:	f083 0301 	eor.w	r3, r3, #1
    4c3e:	b2db      	uxtb	r3, r3
    4c40:	f003 0301 	and.w	r3, r3, #1
    4c44:	b2db      	uxtb	r3, r3
    4c46:	2239      	movs	r2, #57	; 0x39
    4c48:	4908      	ldr	r1, [pc, #32]	; (4c6c <list_insert_as_head+0x50>)
    4c4a:	4618      	mov	r0, r3
    4c4c:	4b08      	ldr	r3, [pc, #32]	; (4c70 <list_insert_as_head+0x54>)
    4c4e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	681a      	ldr	r2, [r3, #0]
    4c54:	683b      	ldr	r3, [r7, #0]
    4c56:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	683a      	ldr	r2, [r7, #0]
    4c5c:	601a      	str	r2, [r3, #0]
}
    4c5e:	bf00      	nop
    4c60:	3708      	adds	r7, #8
    4c62:	46bd      	mov	sp, r7
    4c64:	bd80      	pop	{r7, pc}
    4c66:	bf00      	nop
    4c68:	00004be5 	.word	0x00004be5
    4c6c:	0001abd8 	.word	0x0001abd8
    4c70:	00004bbd 	.word	0x00004bbd

00004c74 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4c74:	b480      	push	{r7}
    4c76:	b083      	sub	sp, #12
    4c78:	af00      	add	r7, sp, #0
    4c7a:	6078      	str	r0, [r7, #4]
    4c7c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	681a      	ldr	r2, [r3, #0]
    4c82:	683b      	ldr	r3, [r7, #0]
    4c84:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	683a      	ldr	r2, [r7, #0]
    4c8a:	601a      	str	r2, [r3, #0]
}
    4c8c:	bf00      	nop
    4c8e:	370c      	adds	r7, #12
    4c90:	46bd      	mov	sp, r7
    4c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c96:	4770      	bx	lr

00004c98 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4c98:	b580      	push	{r7, lr}
    4c9a:	b084      	sub	sp, #16
    4c9c:	af00      	add	r7, sp, #0
    4c9e:	6078      	str	r0, [r7, #4]
    4ca0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	681b      	ldr	r3, [r3, #0]
    4ca6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4ca8:	6839      	ldr	r1, [r7, #0]
    4caa:	6878      	ldr	r0, [r7, #4]
    4cac:	4b16      	ldr	r3, [pc, #88]	; (4d08 <list_insert_at_end+0x70>)
    4cae:	4798      	blx	r3
    4cb0:	4603      	mov	r3, r0
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	bf14      	ite	ne
    4cb6:	2301      	movne	r3, #1
    4cb8:	2300      	moveq	r3, #0
    4cba:	b2db      	uxtb	r3, r3
    4cbc:	f083 0301 	eor.w	r3, r3, #1
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	f003 0301 	and.w	r3, r3, #1
    4cc6:	b2db      	uxtb	r3, r3
    4cc8:	224f      	movs	r2, #79	; 0x4f
    4cca:	4910      	ldr	r1, [pc, #64]	; (4d0c <list_insert_at_end+0x74>)
    4ccc:	4618      	mov	r0, r3
    4cce:	4b10      	ldr	r3, [pc, #64]	; (4d10 <list_insert_at_end+0x78>)
    4cd0:	4798      	blx	r3

	if (!list->head) {
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	681b      	ldr	r3, [r3, #0]
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d109      	bne.n	4cee <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	683a      	ldr	r2, [r7, #0]
    4cde:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4ce0:	683b      	ldr	r3, [r7, #0]
    4ce2:	2200      	movs	r2, #0
    4ce4:	601a      	str	r2, [r3, #0]
		return;
    4ce6:	e00c      	b.n	4d02 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4ce8:	68fb      	ldr	r3, [r7, #12]
    4cea:	681b      	ldr	r3, [r3, #0]
    4cec:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	681b      	ldr	r3, [r3, #0]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d1f8      	bne.n	4ce8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	683a      	ldr	r2, [r7, #0]
    4cfa:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4cfc:	683b      	ldr	r3, [r7, #0]
    4cfe:	2200      	movs	r2, #0
    4d00:	601a      	str	r2, [r3, #0]
}
    4d02:	3710      	adds	r7, #16
    4d04:	46bd      	mov	sp, r7
    4d06:	bd80      	pop	{r7, pc}
    4d08:	00004be5 	.word	0x00004be5
    4d0c:	0001abd8 	.word	0x0001abd8
    4d10:	00004bbd 	.word	0x00004bbd

00004d14 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4d14:	b480      	push	{r7}
    4d16:	b085      	sub	sp, #20
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	681b      	ldr	r3, [r3, #0]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d009      	beq.n	4d38 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	681a      	ldr	r2, [r3, #0]
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4d34:	68fb      	ldr	r3, [r7, #12]
    4d36:	e000      	b.n	4d3a <list_remove_head+0x26>
	}

	return NULL;
    4d38:	2300      	movs	r3, #0
}
    4d3a:	4618      	mov	r0, r3
    4d3c:	3714      	adds	r7, #20
    4d3e:	46bd      	mov	sp, r7
    4d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d44:	4770      	bx	lr

00004d46 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4d46:	b480      	push	{r7}
    4d48:	b085      	sub	sp, #20
    4d4a:	af00      	add	r7, sp, #0
    4d4c:	6078      	str	r0, [r7, #4]
    4d4e:	6039      	str	r1, [r7, #0]
	if (!element) {
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d101      	bne.n	4d5a <list_delete_element+0x14>
		return false;
    4d56:	2300      	movs	r3, #0
    4d58:	e024      	b.n	4da4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	681a      	ldr	r2, [r3, #0]
    4d5e:	683b      	ldr	r3, [r7, #0]
    4d60:	429a      	cmp	r2, r3
    4d62:	d106      	bne.n	4d72 <list_delete_element+0x2c>
		list->head = list->head->next;
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	681b      	ldr	r3, [r3, #0]
    4d68:	681a      	ldr	r2, [r3, #0]
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	601a      	str	r2, [r3, #0]
		return true;
    4d6e:	2301      	movs	r3, #1
    4d70:	e018      	b.n	4da4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4d78:	e002      	b.n	4d80 <list_delete_element+0x3a>
			it = it->next;
    4d7a:	68fb      	ldr	r3, [r7, #12]
    4d7c:	681b      	ldr	r3, [r3, #0]
    4d7e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4d80:	68fb      	ldr	r3, [r7, #12]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d004      	beq.n	4d90 <list_delete_element+0x4a>
    4d86:	68fb      	ldr	r3, [r7, #12]
    4d88:	681a      	ldr	r2, [r3, #0]
    4d8a:	683b      	ldr	r3, [r7, #0]
    4d8c:	429a      	cmp	r2, r3
    4d8e:	d1f4      	bne.n	4d7a <list_delete_element+0x34>
		}
		if (it) {
    4d90:	68fb      	ldr	r3, [r7, #12]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d005      	beq.n	4da2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4d96:	683b      	ldr	r3, [r7, #0]
    4d98:	681a      	ldr	r2, [r3, #0]
    4d9a:	68fb      	ldr	r3, [r7, #12]
    4d9c:	601a      	str	r2, [r3, #0]
			return true;
    4d9e:	2301      	movs	r3, #1
    4da0:	e000      	b.n	4da4 <list_delete_element+0x5e>
		}
	}

	return false;
    4da2:	2300      	movs	r3, #0
}
    4da4:	4618      	mov	r0, r3
    4da6:	3714      	adds	r7, #20
    4da8:	46bd      	mov	sp, r7
    4daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dae:	4770      	bx	lr

00004db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4db0:	b480      	push	{r7}
    4db2:	b083      	sub	sp, #12
    4db4:	af00      	add	r7, sp, #0
    4db6:	4603      	mov	r3, r0
    4db8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	db0b      	blt.n	4dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dc2:	4909      	ldr	r1, [pc, #36]	; (4de8 <__NVIC_EnableIRQ+0x38>)
    4dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dc8:	095b      	lsrs	r3, r3, #5
    4dca:	88fa      	ldrh	r2, [r7, #6]
    4dcc:	f002 021f 	and.w	r2, r2, #31
    4dd0:	2001      	movs	r0, #1
    4dd2:	fa00 f202 	lsl.w	r2, r0, r2
    4dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4dda:	bf00      	nop
    4ddc:	370c      	adds	r7, #12
    4dde:	46bd      	mov	sp, r7
    4de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de4:	4770      	bx	lr
    4de6:	bf00      	nop
    4de8:	e000e100 	.word	0xe000e100

00004dec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4dec:	b480      	push	{r7}
    4dee:	b083      	sub	sp, #12
    4df0:	af00      	add	r7, sp, #0
    4df2:	4603      	mov	r3, r0
    4df4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	db10      	blt.n	4e20 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dfe:	490b      	ldr	r1, [pc, #44]	; (4e2c <__NVIC_DisableIRQ+0x40>)
    4e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e04:	095b      	lsrs	r3, r3, #5
    4e06:	88fa      	ldrh	r2, [r7, #6]
    4e08:	f002 021f 	and.w	r2, r2, #31
    4e0c:	2001      	movs	r0, #1
    4e0e:	fa00 f202 	lsl.w	r2, r0, r2
    4e12:	3320      	adds	r3, #32
    4e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e1c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4e20:	bf00      	nop
    4e22:	370c      	adds	r7, #12
    4e24:	46bd      	mov	sp, r7
    4e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e2a:	4770      	bx	lr
    4e2c:	e000e100 	.word	0xe000e100

00004e30 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4e30:	b480      	push	{r7}
    4e32:	b083      	sub	sp, #12
    4e34:	af00      	add	r7, sp, #0
    4e36:	4603      	mov	r3, r0
    4e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	db0c      	blt.n	4e5c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e42:	4909      	ldr	r1, [pc, #36]	; (4e68 <__NVIC_ClearPendingIRQ+0x38>)
    4e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e48:	095b      	lsrs	r3, r3, #5
    4e4a:	88fa      	ldrh	r2, [r7, #6]
    4e4c:	f002 021f 	and.w	r2, r2, #31
    4e50:	2001      	movs	r0, #1
    4e52:	fa00 f202 	lsl.w	r2, r0, r2
    4e56:	3360      	adds	r3, #96	; 0x60
    4e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4e5c:	bf00      	nop
    4e5e:	370c      	adds	r7, #12
    4e60:	46bd      	mov	sp, r7
    4e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e66:	4770      	bx	lr
    4e68:	e000e100 	.word	0xe000e100

00004e6c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4e6c:	b480      	push	{r7}
    4e6e:	b083      	sub	sp, #12
    4e70:	af00      	add	r7, sp, #0
    4e72:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4e74:	687b      	ldr	r3, [r7, #4]
    4e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e78:	095b      	lsrs	r3, r3, #5
    4e7a:	f003 0301 	and.w	r3, r3, #1
    4e7e:	2b00      	cmp	r3, #0
    4e80:	bf14      	ite	ne
    4e82:	2301      	movne	r3, #1
    4e84:	2300      	moveq	r3, #0
    4e86:	b2db      	uxtb	r3, r3
}
    4e88:	4618      	mov	r0, r3
    4e8a:	370c      	adds	r7, #12
    4e8c:	46bd      	mov	sp, r7
    4e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e92:	4770      	bx	lr

00004e94 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    4e94:	b480      	push	{r7}
    4e96:	b083      	sub	sp, #12
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    4ea6:	4618      	mov	r0, r3
    4ea8:	370c      	adds	r7, #12
    4eaa:	46bd      	mov	sp, r7
    4eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eb0:	4770      	bx	lr

00004eb2 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    4eb2:	b480      	push	{r7}
    4eb4:	b083      	sub	sp, #12
    4eb6:	af00      	add	r7, sp, #0
    4eb8:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4ec0:	0a1b      	lsrs	r3, r3, #8
    4ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    4ec6:	4618      	mov	r0, r3
    4ec8:	370c      	adds	r7, #12
    4eca:	46bd      	mov	sp, r7
    4ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed0:	4770      	bx	lr

00004ed2 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    4ed2:	b480      	push	{r7}
    4ed4:	b083      	sub	sp, #12
    4ed6:	af00      	add	r7, sp, #0
    4ed8:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4ee0:	0d5b      	lsrs	r3, r3, #21
    4ee2:	f003 0301 	and.w	r3, r3, #1
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	bf14      	ite	ne
    4eea:	2301      	movne	r3, #1
    4eec:	2300      	moveq	r3, #0
    4eee:	b2db      	uxtb	r3, r3
}
    4ef0:	4618      	mov	r0, r3
    4ef2:	370c      	adds	r7, #12
    4ef4:	46bd      	mov	sp, r7
    4ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4efa:	4770      	bx	lr

00004efc <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    4efc:	b480      	push	{r7}
    4efe:	b083      	sub	sp, #12
    4f00:	af00      	add	r7, sp, #0
    4f02:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4f0a:	0c1b      	lsrs	r3, r3, #16
    4f0c:	f003 031f 	and.w	r3, r3, #31
}
    4f10:	4618      	mov	r0, r3
    4f12:	370c      	adds	r7, #12
    4f14:	46bd      	mov	sp, r7
    4f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1a:	4770      	bx	lr

00004f1c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4f1c:	b480      	push	{r7}
    4f1e:	b083      	sub	sp, #12
    4f20:	af00      	add	r7, sp, #0
    4f22:	6078      	str	r0, [r7, #4]
    4f24:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	683a      	ldr	r2, [r7, #0]
    4f2a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f2c:	bf00      	nop
    4f2e:	370c      	adds	r7, #12
    4f30:	46bd      	mov	sp, r7
    4f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f36:	4770      	bx	lr

00004f38 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4f38:	b480      	push	{r7}
    4f3a:	b083      	sub	sp, #12
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	6078      	str	r0, [r7, #4]
    4f40:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	683a      	ldr	r2, [r7, #0]
    4f46:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f48:	bf00      	nop
    4f4a:	370c      	adds	r7, #12
    4f4c:	46bd      	mov	sp, r7
    4f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f52:	4770      	bx	lr

00004f54 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4f54:	b480      	push	{r7}
    4f56:	b083      	sub	sp, #12
    4f58:	af00      	add	r7, sp, #0
    4f5a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	699b      	ldr	r3, [r3, #24]
    4f60:	f043 0201 	orr.w	r2, r3, #1
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f68:	bf00      	nop
    4f6a:	370c      	adds	r7, #12
    4f6c:	46bd      	mov	sp, r7
    4f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f72:	4770      	bx	lr

00004f74 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4f74:	b480      	push	{r7}
    4f76:	b085      	sub	sp, #20
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	699b      	ldr	r3, [r3, #24]
    4f80:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	f003 0301 	and.w	r3, r3, #1
    4f88:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4f8a:	68fb      	ldr	r3, [r7, #12]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	bf14      	ite	ne
    4f90:	2301      	movne	r3, #1
    4f92:	2300      	moveq	r3, #0
    4f94:	b2db      	uxtb	r3, r3
}
    4f96:	4618      	mov	r0, r3
    4f98:	3714      	adds	r7, #20
    4f9a:	46bd      	mov	sp, r7
    4f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa0:	4770      	bx	lr

00004fa2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4fa2:	b480      	push	{r7}
    4fa4:	b083      	sub	sp, #12
    4fa6:	af00      	add	r7, sp, #0
    4fa8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    4faa:	687b      	ldr	r3, [r7, #4]
    4fac:	699b      	ldr	r3, [r3, #24]
    4fae:	f023 0201 	bic.w	r2, r3, #1
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4fb6:	bf00      	nop
    4fb8:	370c      	adds	r7, #12
    4fba:	46bd      	mov	sp, r7
    4fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc0:	4770      	bx	lr

00004fc2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4fc2:	b480      	push	{r7}
    4fc4:	b083      	sub	sp, #12
    4fc6:	af00      	add	r7, sp, #0
    4fc8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    4fca:	687b      	ldr	r3, [r7, #4]
    4fcc:	699b      	ldr	r3, [r3, #24]
    4fce:	f043 0202 	orr.w	r2, r3, #2
    4fd2:	687b      	ldr	r3, [r7, #4]
    4fd4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4fd6:	bf00      	nop
    4fd8:	370c      	adds	r7, #12
    4fda:	46bd      	mov	sp, r7
    4fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe0:	4770      	bx	lr

00004fe2 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4fe2:	b480      	push	{r7}
    4fe4:	b083      	sub	sp, #12
    4fe6:	af00      	add	r7, sp, #0
    4fe8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4fea:	687b      	ldr	r3, [r7, #4]
    4fec:	699b      	ldr	r3, [r3, #24]
    4fee:	f023 0202 	bic.w	r2, r3, #2
    4ff2:	687b      	ldr	r3, [r7, #4]
    4ff4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4ff6:	bf00      	nop
    4ff8:	370c      	adds	r7, #12
    4ffa:	46bd      	mov	sp, r7
    4ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5000:	4770      	bx	lr

00005002 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    5002:	b480      	push	{r7}
    5004:	b085      	sub	sp, #20
    5006:	af00      	add	r7, sp, #0
    5008:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    500a:	687b      	ldr	r3, [r7, #4]
    500c:	699b      	ldr	r3, [r3, #24]
    500e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    5010:	68fb      	ldr	r3, [r7, #12]
    5012:	0a1b      	lsrs	r3, r3, #8
    5014:	f003 0301 	and.w	r3, r3, #1
    5018:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	2b00      	cmp	r3, #0
    501e:	bf14      	ite	ne
    5020:	2301      	movne	r3, #1
    5022:	2300      	moveq	r3, #0
    5024:	b2db      	uxtb	r3, r3
}
    5026:	4618      	mov	r0, r3
    5028:	3714      	adds	r7, #20
    502a:	46bd      	mov	sp, r7
    502c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5030:	4770      	bx	lr

00005032 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    5032:	b480      	push	{r7}
    5034:	b085      	sub	sp, #20
    5036:	af00      	add	r7, sp, #0
    5038:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	699b      	ldr	r3, [r3, #24]
    503e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    5040:	68fb      	ldr	r3, [r7, #12]
    5042:	0a5b      	lsrs	r3, r3, #9
    5044:	f003 0301 	and.w	r3, r3, #1
    5048:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    504a:	68fb      	ldr	r3, [r7, #12]
    504c:	2b00      	cmp	r3, #0
    504e:	bf14      	ite	ne
    5050:	2301      	movne	r3, #1
    5052:	2300      	moveq	r3, #0
    5054:	b2db      	uxtb	r3, r3
}
    5056:	4618      	mov	r0, r3
    5058:	3714      	adds	r7, #20
    505a:	46bd      	mov	sp, r7
    505c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5060:	4770      	bx	lr

00005062 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5062:	b480      	push	{r7}
    5064:	b083      	sub	sp, #12
    5066:	af00      	add	r7, sp, #0
    5068:	6078      	str	r0, [r7, #4]
    506a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	699a      	ldr	r2, [r3, #24]
    5070:	683b      	ldr	r3, [r7, #0]
    5072:	431a      	orrs	r2, r3
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5078:	bf00      	nop
    507a:	370c      	adds	r7, #12
    507c:	46bd      	mov	sp, r7
    507e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5082:	4770      	bx	lr

00005084 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5084:	b480      	push	{r7}
    5086:	b083      	sub	sp, #12
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
    508c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	683a      	ldr	r2, [r7, #0]
    5092:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5094:	bf00      	nop
    5096:	370c      	adds	r7, #12
    5098:	46bd      	mov	sp, r7
    509a:	f85d 7b04 	ldr.w	r7, [sp], #4
    509e:	4770      	bx	lr

000050a0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    50a0:	b480      	push	{r7}
    50a2:	b083      	sub	sp, #12
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
    50a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	683a      	ldr	r2, [r7, #0]
    50ae:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    50b0:	bf00      	nop
    50b2:	370c      	adds	r7, #12
    50b4:	46bd      	mov	sp, r7
    50b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ba:	4770      	bx	lr

000050bc <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    50bc:	b480      	push	{r7}
    50be:	b083      	sub	sp, #12
    50c0:	af00      	add	r7, sp, #0
    50c2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    50c4:	687b      	ldr	r3, [r7, #4]
    50c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    50c8:	4618      	mov	r0, r3
    50ca:	370c      	adds	r7, #12
    50cc:	46bd      	mov	sp, r7
    50ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    50d2:	4770      	bx	lr

000050d4 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    50d4:	b480      	push	{r7}
    50d6:	b085      	sub	sp, #20
    50d8:	af00      	add	r7, sp, #0
    50da:	6078      	str	r0, [r7, #4]
    50dc:	460b      	mov	r3, r1
    50de:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    50e0:	687b      	ldr	r3, [r7, #4]
    50e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    50e4:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    50e6:	68fb      	ldr	r3, [r7, #12]
    50e8:	f023 0301 	bic.w	r3, r3, #1
    50ec:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    50ee:	78fb      	ldrb	r3, [r7, #3]
    50f0:	68fa      	ldr	r2, [r7, #12]
    50f2:	4313      	orrs	r3, r2
    50f4:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    50f6:	687b      	ldr	r3, [r7, #4]
    50f8:	68fa      	ldr	r2, [r7, #12]
    50fa:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    50fc:	bf00      	nop
    50fe:	3714      	adds	r7, #20
    5100:	46bd      	mov	sp, r7
    5102:	f85d 7b04 	ldr.w	r7, [sp], #4
    5106:	4770      	bx	lr

00005108 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    5108:	b480      	push	{r7}
    510a:	b085      	sub	sp, #20
    510c:	af00      	add	r7, sp, #0
    510e:	6078      	str	r0, [r7, #4]
    5110:	460b      	mov	r3, r1
    5112:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5118:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    511a:	68fb      	ldr	r3, [r7, #12]
    511c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5120:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    5122:	78fb      	ldrb	r3, [r7, #3]
    5124:	025b      	lsls	r3, r3, #9
    5126:	461a      	mov	r2, r3
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	4313      	orrs	r3, r2
    512c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	68fa      	ldr	r2, [r7, #12]
    5132:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    5134:	bf00      	nop
    5136:	3714      	adds	r7, #20
    5138:	46bd      	mov	sp, r7
    513a:	f85d 7b04 	ldr.w	r7, [sp], #4
    513e:	4770      	bx	lr

00005140 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    5140:	b480      	push	{r7}
    5142:	b085      	sub	sp, #20
    5144:	af00      	add	r7, sp, #0
    5146:	6078      	str	r0, [r7, #4]
    5148:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    514a:	687b      	ldr	r3, [r7, #4]
    514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    514e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5150:	68fa      	ldr	r2, [r7, #12]
    5152:	683b      	ldr	r3, [r7, #0]
    5154:	4013      	ands	r3, r2
    5156:	60fb      	str	r3, [r7, #12]
	return tmp;
    5158:	68fb      	ldr	r3, [r7, #12]
}
    515a:	4618      	mov	r0, r3
    515c:	3714      	adds	r7, #20
    515e:	46bd      	mov	sp, r7
    5160:	f85d 7b04 	ldr.w	r7, [sp], #4
    5164:	4770      	bx	lr

00005166 <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    5166:	b480      	push	{r7}
    5168:	b083      	sub	sp, #12
    516a:	af00      	add	r7, sp, #0
    516c:	6078      	str	r0, [r7, #4]
    516e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	683a      	ldr	r2, [r7, #0]
    5174:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    5176:	bf00      	nop
    5178:	370c      	adds	r7, #12
    517a:	46bd      	mov	sp, r7
    517c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5180:	4770      	bx	lr

00005182 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5182:	b480      	push	{r7}
    5184:	b083      	sub	sp, #12
    5186:	af00      	add	r7, sp, #0
    5188:	6078      	str	r0, [r7, #4]
    518a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	683a      	ldr	r2, [r7, #0]
    5190:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5192:	bf00      	nop
    5194:	370c      	adds	r7, #12
    5196:	46bd      	mov	sp, r7
    5198:	f85d 7b04 	ldr.w	r7, [sp], #4
    519c:	4770      	bx	lr

0000519e <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    519e:	b480      	push	{r7}
    51a0:	b083      	sub	sp, #12
    51a2:	af00      	add	r7, sp, #0
    51a4:	6078      	str	r0, [r7, #4]
    51a6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    51a8:	687b      	ldr	r3, [r7, #4]
    51aa:	683a      	ldr	r2, [r7, #0]
    51ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    51b0:	bf00      	nop
    51b2:	370c      	adds	r7, #12
    51b4:	46bd      	mov	sp, r7
    51b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ba:	4770      	bx	lr

000051bc <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    51bc:	b480      	push	{r7}
    51be:	b083      	sub	sp, #12
    51c0:	af00      	add	r7, sp, #0
    51c2:	6078      	str	r0, [r7, #4]
    51c4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    51c6:	687b      	ldr	r3, [r7, #4]
    51c8:	683a      	ldr	r2, [r7, #0]
    51ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    51ce:	bf00      	nop
    51d0:	370c      	adds	r7, #12
    51d2:	46bd      	mov	sp, r7
    51d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d8:	4770      	bx	lr

000051da <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    51da:	b480      	push	{r7}
    51dc:	b083      	sub	sp, #12
    51de:	af00      	add	r7, sp, #0
    51e0:	6078      	str	r0, [r7, #4]
    51e2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	683a      	ldr	r2, [r7, #0]
    51e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    51ec:	bf00      	nop
    51ee:	370c      	adds	r7, #12
    51f0:	46bd      	mov	sp, r7
    51f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f6:	4770      	bx	lr

000051f8 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    51f8:	b480      	push	{r7}
    51fa:	b083      	sub	sp, #12
    51fc:	af00      	add	r7, sp, #0
    51fe:	6078      	str	r0, [r7, #4]
    5200:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    5202:	687b      	ldr	r3, [r7, #4]
    5204:	683a      	ldr	r2, [r7, #0]
    5206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    520a:	bf00      	nop
    520c:	370c      	adds	r7, #12
    520e:	46bd      	mov	sp, r7
    5210:	f85d 7b04 	ldr.w	r7, [sp], #4
    5214:	4770      	bx	lr

00005216 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    5216:	b480      	push	{r7}
    5218:	b083      	sub	sp, #12
    521a:	af00      	add	r7, sp, #0
    521c:	6078      	str	r0, [r7, #4]
    521e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5220:	687b      	ldr	r3, [r7, #4]
    5222:	683a      	ldr	r2, [r7, #0]
    5224:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5228:	bf00      	nop
    522a:	370c      	adds	r7, #12
    522c:	46bd      	mov	sp, r7
    522e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5232:	4770      	bx	lr

00005234 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    5234:	b480      	push	{r7}
    5236:	b085      	sub	sp, #20
    5238:	af00      	add	r7, sp, #0
    523a:	6078      	str	r0, [r7, #4]
    523c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    5244:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    5246:	68fb      	ldr	r3, [r7, #12]
    5248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    524c:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    524e:	683b      	ldr	r3, [r7, #0]
    5250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5254:	68fa      	ldr	r2, [r7, #12]
    5256:	4313      	orrs	r3, r2
    5258:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	68fa      	ldr	r2, [r7, #12]
    525e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5262:	bf00      	nop
    5264:	3714      	adds	r7, #20
    5266:	46bd      	mov	sp, r7
    5268:	f85d 7b04 	ldr.w	r7, [sp], #4
    526c:	4770      	bx	lr

0000526e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    526e:	b480      	push	{r7}
    5270:	b083      	sub	sp, #12
    5272:	af00      	add	r7, sp, #0
    5274:	6078      	str	r0, [r7, #4]
    5276:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5278:	687b      	ldr	r3, [r7, #4]
    527a:	683a      	ldr	r2, [r7, #0]
    527c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    5280:	bf00      	nop
    5282:	370c      	adds	r7, #12
    5284:	46bd      	mov	sp, r7
    5286:	f85d 7b04 	ldr.w	r7, [sp], #4
    528a:	4770      	bx	lr

0000528c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    528c:	b480      	push	{r7}
    528e:	b083      	sub	sp, #12
    5290:	af00      	add	r7, sp, #0
    5292:	6078      	str	r0, [r7, #4]
    5294:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	683a      	ldr	r2, [r7, #0]
    529a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    529e:	bf00      	nop
    52a0:	370c      	adds	r7, #12
    52a2:	46bd      	mov	sp, r7
    52a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a8:	4770      	bx	lr

000052aa <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    52aa:	b480      	push	{r7}
    52ac:	b083      	sub	sp, #12
    52ae:	af00      	add	r7, sp, #0
    52b0:	6078      	str	r0, [r7, #4]
    52b2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	683a      	ldr	r2, [r7, #0]
    52b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    52bc:	bf00      	nop
    52be:	370c      	adds	r7, #12
    52c0:	46bd      	mov	sp, r7
    52c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c6:	4770      	bx	lr

000052c8 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    52c8:	b480      	push	{r7}
    52ca:	b083      	sub	sp, #12
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
    52d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	683a      	ldr	r2, [r7, #0]
    52d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    52da:	bf00      	nop
    52dc:	370c      	adds	r7, #12
    52de:	46bd      	mov	sp, r7
    52e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e4:	4770      	bx	lr

000052e6 <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    52e6:	b480      	push	{r7}
    52e8:	b083      	sub	sp, #12
    52ea:	af00      	add	r7, sp, #0
    52ec:	6078      	str	r0, [r7, #4]
    52ee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	683a      	ldr	r2, [r7, #0]
    52f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    52f8:	bf00      	nop
    52fa:	370c      	adds	r7, #12
    52fc:	46bd      	mov	sp, r7
    52fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5302:	4770      	bx	lr

00005304 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5304:	b480      	push	{r7}
    5306:	b083      	sub	sp, #12
    5308:	af00      	add	r7, sp, #0
    530a:	6078      	str	r0, [r7, #4]
    530c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    530e:	687b      	ldr	r3, [r7, #4]
    5310:	683a      	ldr	r2, [r7, #0]
    5312:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5316:	bf00      	nop
    5318:	370c      	adds	r7, #12
    531a:	46bd      	mov	sp, r7
    531c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5320:	4770      	bx	lr
	...

00005324 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5324:	b580      	push	{r7, lr}
    5326:	b082      	sub	sp, #8
    5328:	af00      	add	r7, sp, #0
    532a:	6078      	str	r0, [r7, #4]
    532c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	683a      	ldr	r2, [r7, #0]
    5332:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	681b      	ldr	r3, [r3, #0]
    5338:	4618      	mov	r0, r3
    533a:	4b56      	ldr	r3, [pc, #344]	; (5494 <_can_async_init+0x170>)
    533c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    533e:	bf00      	nop
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	4618      	mov	r0, r3
    5346:	4b54      	ldr	r3, [pc, #336]	; (5498 <_can_async_init+0x174>)
    5348:	4798      	blx	r3
    534a:	4603      	mov	r3, r0
    534c:	f083 0301 	eor.w	r3, r3, #1
    5350:	b2db      	uxtb	r3, r3
    5352:	2b00      	cmp	r3, #0
    5354:	d1f4      	bne.n	5340 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5356:	687b      	ldr	r3, [r7, #4]
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	4618      	mov	r0, r3
    535c:	4b4f      	ldr	r3, [pc, #316]	; (549c <_can_async_init+0x178>)
    535e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5360:	683b      	ldr	r3, [r7, #0]
    5362:	4a4f      	ldr	r2, [pc, #316]	; (54a0 <_can_async_init+0x17c>)
    5364:	4293      	cmp	r3, r2
    5366:	d17c      	bne.n	5462 <_can_async_init+0x13e>
		_can1_dev    = dev;
    5368:	4a4e      	ldr	r2, [pc, #312]	; (54a4 <_can_async_init+0x180>)
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    536e:	687b      	ldr	r3, [r7, #4]
    5370:	4a4d      	ldr	r2, [pc, #308]	; (54a8 <_can_async_init+0x184>)
    5372:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	f44f 7100 	mov.w	r1, #512	; 0x200
    537c:	4618      	mov	r0, r3
    537e:	4b4b      	ldr	r3, [pc, #300]	; (54ac <_can_async_init+0x188>)
    5380:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	2102      	movs	r1, #2
    5388:	4618      	mov	r0, r3
    538a:	4b49      	ldr	r3, [pc, #292]	; (54b0 <_can_async_init+0x18c>)
    538c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    538e:	687b      	ldr	r3, [r7, #4]
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	f640 2103 	movw	r1, #2563	; 0xa03
    5396:	4618      	mov	r0, r3
    5398:	4b46      	ldr	r3, [pc, #280]	; (54b4 <_can_async_init+0x190>)
    539a:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	681b      	ldr	r3, [r3, #0]
    53a0:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    53a4:	4618      	mov	r0, r3
    53a6:	4b44      	ldr	r3, [pc, #272]	; (54b8 <_can_async_init+0x194>)
    53a8:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    53aa:	687b      	ldr	r3, [r7, #4]
    53ac:	681a      	ldr	r2, [r3, #0]
    53ae:	4b43      	ldr	r3, [pc, #268]	; (54bc <_can_async_init+0x198>)
    53b0:	b29b      	uxth	r3, r3
    53b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    53b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    53ba:	4619      	mov	r1, r3
    53bc:	4610      	mov	r0, r2
    53be:	4b40      	ldr	r3, [pc, #256]	; (54c0 <_can_async_init+0x19c>)
    53c0:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	2107      	movs	r1, #7
    53c8:	4618      	mov	r0, r3
    53ca:	4b3e      	ldr	r3, [pc, #248]	; (54c4 <_can_async_init+0x1a0>)
    53cc:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	2107      	movs	r1, #7
    53d4:	4618      	mov	r0, r3
    53d6:	4b3c      	ldr	r3, [pc, #240]	; (54c8 <_can_async_init+0x1a4>)
    53d8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    53da:	687b      	ldr	r3, [r7, #4]
    53dc:	681a      	ldr	r2, [r3, #0]
    53de:	4b3b      	ldr	r3, [pc, #236]	; (54cc <_can_async_init+0x1a8>)
    53e0:	b29b      	uxth	r3, r3
    53e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    53e6:	4619      	mov	r1, r3
    53e8:	4610      	mov	r0, r2
    53ea:	4b39      	ldr	r3, [pc, #228]	; (54d0 <_can_async_init+0x1ac>)
    53ec:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	681a      	ldr	r2, [r3, #0]
    53f2:	4b38      	ldr	r3, [pc, #224]	; (54d4 <_can_async_init+0x1b0>)
    53f4:	b29b      	uxth	r3, r3
    53f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    53fa:	4619      	mov	r1, r3
    53fc:	4610      	mov	r0, r2
    53fe:	4b36      	ldr	r3, [pc, #216]	; (54d8 <_can_async_init+0x1b4>)
    5400:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	681b      	ldr	r3, [r3, #0]
    5406:	2108      	movs	r1, #8
    5408:	4618      	mov	r0, r3
    540a:	4b34      	ldr	r3, [pc, #208]	; (54dc <_can_async_init+0x1b8>)
    540c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	681a      	ldr	r2, [r3, #0]
    5412:	4b33      	ldr	r3, [pc, #204]	; (54e0 <_can_async_init+0x1bc>)
    5414:	b29b      	uxth	r3, r3
    5416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    541a:	4619      	mov	r1, r3
    541c:	4610      	mov	r0, r2
    541e:	4b31      	ldr	r3, [pc, #196]	; (54e4 <_can_async_init+0x1c0>)
    5420:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	681a      	ldr	r2, [r3, #0]
    5426:	4b30      	ldr	r3, [pc, #192]	; (54e8 <_can_async_init+0x1c4>)
    5428:	b29b      	uxth	r3, r3
    542a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    542e:	4619      	mov	r1, r3
    5430:	4610      	mov	r0, r2
    5432:	4b2e      	ldr	r3, [pc, #184]	; (54ec <_can_async_init+0x1c8>)
    5434:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    543e:	4618      	mov	r0, r3
    5440:	4b2b      	ldr	r3, [pc, #172]	; (54f0 <_can_async_init+0x1cc>)
    5442:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    5444:	204f      	movs	r0, #79	; 0x4f
    5446:	4b2b      	ldr	r3, [pc, #172]	; (54f4 <_can_async_init+0x1d0>)
    5448:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    544a:	204f      	movs	r0, #79	; 0x4f
    544c:	4b2a      	ldr	r3, [pc, #168]	; (54f8 <_can_async_init+0x1d4>)
    544e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5450:	204f      	movs	r0, #79	; 0x4f
    5452:	4b2a      	ldr	r3, [pc, #168]	; (54fc <_can_async_init+0x1d8>)
    5454:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	2101      	movs	r1, #1
    545c:	4618      	mov	r0, r3
    545e:	4b28      	ldr	r3, [pc, #160]	; (5500 <_can_async_init+0x1dc>)
    5460:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	4618      	mov	r0, r3
    5468:	4b26      	ldr	r3, [pc, #152]	; (5504 <_can_async_init+0x1e0>)
    546a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    546c:	687b      	ldr	r3, [r7, #4]
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	4618      	mov	r0, r3
    5472:	4b25      	ldr	r3, [pc, #148]	; (5508 <_can_async_init+0x1e4>)
    5474:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    5476:	bf00      	nop
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	4618      	mov	r0, r3
    547e:	4b06      	ldr	r3, [pc, #24]	; (5498 <_can_async_init+0x174>)
    5480:	4798      	blx	r3
    5482:	4603      	mov	r3, r0
    5484:	2b00      	cmp	r3, #0
    5486:	d1f7      	bne.n	5478 <_can_async_init+0x154>
	};

	return ERR_NONE;
    5488:	2300      	movs	r3, #0
}
    548a:	4618      	mov	r0, r3
    548c:	3708      	adds	r7, #8
    548e:	46bd      	mov	sp, r7
    5490:	bd80      	pop	{r7, pc}
    5492:	bf00      	nop
    5494:	00004f55 	.word	0x00004f55
    5498:	00004f75 	.word	0x00004f75
    549c:	00004fc3 	.word	0x00004fc3
    54a0:	42000400 	.word	0x42000400
    54a4:	20002308 	.word	0x20002308
    54a8:	20000004 	.word	0x20000004
    54ac:	00005063 	.word	0x00005063
    54b0:	00004f1d 	.word	0x00004f1d
    54b4:	00005085 	.word	0x00005085
    54b8:	00004f39 	.word	0x00004f39
    54bc:	2000e0f8 	.word	0x2000e0f8
    54c0:	00005217 	.word	0x00005217
    54c4:	0000526f 	.word	0x0000526f
    54c8:	000052ab 	.word	0x000052ab
    54cc:	2000e0b0 	.word	0x2000e0b0
    54d0:	0000528d 	.word	0x0000528d
    54d4:	20002268 	.word	0x20002268
    54d8:	00005305 	.word	0x00005305
    54dc:	0000519f 	.word	0x0000519f
    54e0:	20002278 	.word	0x20002278
    54e4:	000051bd 	.word	0x000051bd
    54e8:	200022f8 	.word	0x200022f8
    54ec:	000051db 	.word	0x000051db
    54f0:	000051f9 	.word	0x000051f9
    54f4:	00004ded 	.word	0x00004ded
    54f8:	00004e31 	.word	0x00004e31
    54fc:	00004db1 	.word	0x00004db1
    5500:	00005183 	.word	0x00005183
    5504:	00004fe3 	.word	0x00004fe3
    5508:	00004fa3 	.word	0x00004fa3

0000550c <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    550c:	b580      	push	{r7, lr}
    550e:	b082      	sub	sp, #8
    5510:	af00      	add	r7, sp, #0
    5512:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	4618      	mov	r0, r3
    551a:	4b03      	ldr	r3, [pc, #12]	; (5528 <_can_async_enable+0x1c>)
    551c:	4798      	blx	r3
	return ERR_NONE;
    551e:	2300      	movs	r3, #0
}
    5520:	4618      	mov	r0, r3
    5522:	3708      	adds	r7, #8
    5524:	46bd      	mov	sp, r7
    5526:	bd80      	pop	{r7, pc}
    5528:	00004fa3 	.word	0x00004fa3

0000552c <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    552c:	b590      	push	{r4, r7, lr}
    552e:	b089      	sub	sp, #36	; 0x24
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
    5534:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    5536:	2300      	movs	r3, #0
    5538:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	4618      	mov	r0, r3
    5540:	4b37      	ldr	r3, [pc, #220]	; (5620 <_can_async_read+0xf4>)
    5542:	4798      	blx	r3
    5544:	4603      	mov	r3, r0
    5546:	2b00      	cmp	r3, #0
    5548:	d102      	bne.n	5550 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    554a:	f06f 0309 	mvn.w	r3, #9
    554e:	e063      	b.n	5618 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	4618      	mov	r0, r3
    5556:	4b33      	ldr	r3, [pc, #204]	; (5624 <_can_async_read+0xf8>)
    5558:	4798      	blx	r3
    555a:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	4a31      	ldr	r2, [pc, #196]	; (5628 <_can_async_read+0xfc>)
    5562:	4293      	cmp	r3, r2
    5564:	d108      	bne.n	5578 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    5566:	69ba      	ldr	r2, [r7, #24]
    5568:	4613      	mov	r3, r2
    556a:	00db      	lsls	r3, r3, #3
    556c:	4413      	add	r3, r2
    556e:	00db      	lsls	r3, r3, #3
    5570:	461a      	mov	r2, r3
    5572:	4b2e      	ldr	r3, [pc, #184]	; (562c <_can_async_read+0x100>)
    5574:	4413      	add	r3, r2
    5576:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    5578:	69fb      	ldr	r3, [r7, #28]
    557a:	2b00      	cmp	r3, #0
    557c:	d102      	bne.n	5584 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    557e:	f06f 031b 	mvn.w	r3, #27
    5582:	e049      	b.n	5618 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    5584:	69fb      	ldr	r3, [r7, #28]
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	f3c3 7380 	ubfx	r3, r3, #30, #1
    558c:	b2db      	uxtb	r3, r3
    558e:	2b01      	cmp	r3, #1
    5590:	d10a      	bne.n	55a8 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    5592:	683b      	ldr	r3, [r7, #0]
    5594:	2201      	movs	r2, #1
    5596:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    5598:	69fb      	ldr	r3, [r7, #28]
    559a:	681b      	ldr	r3, [r3, #0]
    559c:	f3c3 031c 	ubfx	r3, r3, #0, #29
    55a0:	461a      	mov	r2, r3
    55a2:	683b      	ldr	r3, [r7, #0]
    55a4:	601a      	str	r2, [r3, #0]
    55a6:	e00a      	b.n	55be <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    55a8:	683b      	ldr	r3, [r7, #0]
    55aa:	2200      	movs	r2, #0
    55ac:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    55ae:	69fb      	ldr	r3, [r7, #28]
    55b0:	681b      	ldr	r3, [r3, #0]
    55b2:	f3c3 031c 	ubfx	r3, r3, #0, #29
    55b6:	149b      	asrs	r3, r3, #18
    55b8:	461a      	mov	r2, r3
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    55be:	69fb      	ldr	r3, [r7, #28]
    55c0:	681b      	ldr	r3, [r3, #0]
    55c2:	f3c3 7340 	ubfx	r3, r3, #29, #1
    55c6:	b2db      	uxtb	r3, r3
    55c8:	2b01      	cmp	r3, #1
    55ca:	d102      	bne.n	55d2 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    55cc:	683b      	ldr	r3, [r7, #0]
    55ce:	2201      	movs	r2, #1
    55d0:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    55d2:	4b17      	ldr	r3, [pc, #92]	; (5630 <_can_async_read+0x104>)
    55d4:	f107 0408 	add.w	r4, r7, #8
    55d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    55da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    55de:	69fb      	ldr	r3, [r7, #28]
    55e0:	685b      	ldr	r3, [r3, #4]
    55e2:	f3c3 4303 	ubfx	r3, r3, #16, #4
    55e6:	b2db      	uxtb	r3, r3
    55e8:	f107 0220 	add.w	r2, r7, #32
    55ec:	4413      	add	r3, r2
    55ee:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    55f2:	683b      	ldr	r3, [r7, #0]
    55f4:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    55f6:	683b      	ldr	r3, [r7, #0]
    55f8:	6898      	ldr	r0, [r3, #8]
    55fa:	69fb      	ldr	r3, [r7, #28]
    55fc:	f103 0108 	add.w	r1, r3, #8
    5600:	683b      	ldr	r3, [r7, #0]
    5602:	7b1b      	ldrb	r3, [r3, #12]
    5604:	461a      	mov	r2, r3
    5606:	4b0b      	ldr	r3, [pc, #44]	; (5634 <_can_async_read+0x108>)
    5608:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    560a:	687b      	ldr	r3, [r7, #4]
    560c:	681b      	ldr	r3, [r3, #0]
    560e:	69b9      	ldr	r1, [r7, #24]
    5610:	4618      	mov	r0, r3
    5612:	4b09      	ldr	r3, [pc, #36]	; (5638 <_can_async_read+0x10c>)
    5614:	4798      	blx	r3

	return ERR_NONE;
    5616:	2300      	movs	r3, #0
}
    5618:	4618      	mov	r0, r3
    561a:	3724      	adds	r7, #36	; 0x24
    561c:	46bd      	mov	sp, r7
    561e:	bd90      	pop	{r4, r7, pc}
    5620:	00004e95 	.word	0x00004e95
    5624:	00004eb3 	.word	0x00004eb3
    5628:	42000400 	.word	0x42000400
    562c:	2000e0f8 	.word	0x2000e0f8
    5630:	0001abf8 	.word	0x0001abf8
    5634:	0001a539 	.word	0x0001a539
    5638:	00005235 	.word	0x00005235

0000563c <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    563c:	b590      	push	{r4, r7, lr}
    563e:	b085      	sub	sp, #20
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
    5644:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    5646:	2300      	movs	r3, #0
    5648:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	4618      	mov	r0, r3
    5650:	4b61      	ldr	r3, [pc, #388]	; (57d8 <_can_async_write+0x19c>)
    5652:	4798      	blx	r3
    5654:	4603      	mov	r3, r0
    5656:	2b00      	cmp	r3, #0
    5658:	d002      	beq.n	5660 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    565a:	f06f 031b 	mvn.w	r3, #27
    565e:	e0b7      	b.n	57d0 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	4618      	mov	r0, r3
    5666:	4b5d      	ldr	r3, [pc, #372]	; (57dc <_can_async_write+0x1a0>)
    5668:	4798      	blx	r3
    566a:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	681b      	ldr	r3, [r3, #0]
    5670:	4a5b      	ldr	r2, [pc, #364]	; (57e0 <_can_async_write+0x1a4>)
    5672:	4293      	cmp	r3, r2
    5674:	d108      	bne.n	5688 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    5676:	68ba      	ldr	r2, [r7, #8]
    5678:	4613      	mov	r3, r2
    567a:	00db      	lsls	r3, r3, #3
    567c:	4413      	add	r3, r2
    567e:	00db      	lsls	r3, r3, #3
    5680:	461a      	mov	r2, r3
    5682:	4b58      	ldr	r3, [pc, #352]	; (57e4 <_can_async_write+0x1a8>)
    5684:	4413      	add	r3, r2
    5686:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    5688:	68fb      	ldr	r3, [r7, #12]
    568a:	2b00      	cmp	r3, #0
    568c:	d102      	bne.n	5694 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    568e:	f06f 031b 	mvn.w	r3, #27
    5692:	e09d      	b.n	57d0 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    5694:	683b      	ldr	r3, [r7, #0]
    5696:	7b5b      	ldrb	r3, [r3, #13]
    5698:	2b01      	cmp	r3, #1
    569a:	d109      	bne.n	56b0 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    569c:	683b      	ldr	r3, [r7, #0]
    569e:	681a      	ldr	r2, [r3, #0]
    56a0:	68fb      	ldr	r3, [r7, #12]
    56a2:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    56a4:	68fa      	ldr	r2, [r7, #12]
    56a6:	6813      	ldr	r3, [r2, #0]
    56a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    56ac:	6013      	str	r3, [r2, #0]
    56ae:	e004      	b.n	56ba <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    56b0:	683b      	ldr	r3, [r7, #0]
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	049a      	lsls	r2, r3, #18
    56b6:	68fb      	ldr	r3, [r7, #12]
    56b8:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    56ba:	683b      	ldr	r3, [r7, #0]
    56bc:	7b1b      	ldrb	r3, [r3, #12]
    56be:	2b08      	cmp	r3, #8
    56c0:	d80a      	bhi.n	56d8 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    56c2:	683b      	ldr	r3, [r7, #0]
    56c4:	7b1b      	ldrb	r3, [r3, #12]
    56c6:	f003 030f 	and.w	r3, r3, #15
    56ca:	b2d9      	uxtb	r1, r3
    56cc:	68fa      	ldr	r2, [r7, #12]
    56ce:	6853      	ldr	r3, [r2, #4]
    56d0:	f361 4313 	bfi	r3, r1, #16, #4
    56d4:	6053      	str	r3, [r2, #4]
    56d6:	e04a      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    56d8:	683b      	ldr	r3, [r7, #0]
    56da:	7b1b      	ldrb	r3, [r3, #12]
    56dc:	2b0c      	cmp	r3, #12
    56de:	d806      	bhi.n	56ee <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    56e0:	68fa      	ldr	r2, [r7, #12]
    56e2:	6853      	ldr	r3, [r2, #4]
    56e4:	2109      	movs	r1, #9
    56e6:	f361 4313 	bfi	r3, r1, #16, #4
    56ea:	6053      	str	r3, [r2, #4]
    56ec:	e03f      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    56ee:	683b      	ldr	r3, [r7, #0]
    56f0:	7b1b      	ldrb	r3, [r3, #12]
    56f2:	2b10      	cmp	r3, #16
    56f4:	d806      	bhi.n	5704 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    56f6:	68fa      	ldr	r2, [r7, #12]
    56f8:	6853      	ldr	r3, [r2, #4]
    56fa:	210a      	movs	r1, #10
    56fc:	f361 4313 	bfi	r3, r1, #16, #4
    5700:	6053      	str	r3, [r2, #4]
    5702:	e034      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    5704:	683b      	ldr	r3, [r7, #0]
    5706:	7b1b      	ldrb	r3, [r3, #12]
    5708:	2b14      	cmp	r3, #20
    570a:	d806      	bhi.n	571a <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    570c:	68fa      	ldr	r2, [r7, #12]
    570e:	6853      	ldr	r3, [r2, #4]
    5710:	210b      	movs	r1, #11
    5712:	f361 4313 	bfi	r3, r1, #16, #4
    5716:	6053      	str	r3, [r2, #4]
    5718:	e029      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    571a:	683b      	ldr	r3, [r7, #0]
    571c:	7b1b      	ldrb	r3, [r3, #12]
    571e:	2b18      	cmp	r3, #24
    5720:	d806      	bhi.n	5730 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    5722:	68fa      	ldr	r2, [r7, #12]
    5724:	6853      	ldr	r3, [r2, #4]
    5726:	210c      	movs	r1, #12
    5728:	f361 4313 	bfi	r3, r1, #16, #4
    572c:	6053      	str	r3, [r2, #4]
    572e:	e01e      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    5730:	683b      	ldr	r3, [r7, #0]
    5732:	7b1b      	ldrb	r3, [r3, #12]
    5734:	2b20      	cmp	r3, #32
    5736:	d806      	bhi.n	5746 <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    5738:	68fa      	ldr	r2, [r7, #12]
    573a:	6853      	ldr	r3, [r2, #4]
    573c:	210d      	movs	r1, #13
    573e:	f361 4313 	bfi	r3, r1, #16, #4
    5742:	6053      	str	r3, [r2, #4]
    5744:	e013      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    5746:	683b      	ldr	r3, [r7, #0]
    5748:	7b1b      	ldrb	r3, [r3, #12]
    574a:	2b30      	cmp	r3, #48	; 0x30
    574c:	d806      	bhi.n	575c <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    574e:	68fa      	ldr	r2, [r7, #12]
    5750:	6853      	ldr	r3, [r2, #4]
    5752:	210e      	movs	r1, #14
    5754:	f361 4313 	bfi	r3, r1, #16, #4
    5758:	6053      	str	r3, [r2, #4]
    575a:	e008      	b.n	576e <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    575c:	683b      	ldr	r3, [r7, #0]
    575e:	7b1b      	ldrb	r3, [r3, #12]
    5760:	2b40      	cmp	r3, #64	; 0x40
    5762:	d804      	bhi.n	576e <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    5764:	68fa      	ldr	r2, [r7, #12]
    5766:	6853      	ldr	r3, [r2, #4]
    5768:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    576c:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    576e:	687b      	ldr	r3, [r7, #4]
    5770:	681b      	ldr	r3, [r3, #0]
    5772:	4618      	mov	r0, r3
    5774:	4b1c      	ldr	r3, [pc, #112]	; (57e8 <_can_async_write+0x1ac>)
    5776:	4798      	blx	r3
    5778:	4603      	mov	r3, r0
    577a:	4619      	mov	r1, r3
    577c:	68fa      	ldr	r2, [r7, #12]
    577e:	6853      	ldr	r3, [r2, #4]
    5780:	f361 5355 	bfi	r3, r1, #21, #1
    5784:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	681b      	ldr	r3, [r3, #0]
    578a:	4618      	mov	r0, r3
    578c:	4b17      	ldr	r3, [pc, #92]	; (57ec <_can_async_write+0x1b0>)
    578e:	4798      	blx	r3
    5790:	4603      	mov	r3, r0
    5792:	4619      	mov	r1, r3
    5794:	68fa      	ldr	r2, [r7, #12]
    5796:	6853      	ldr	r3, [r2, #4]
    5798:	f361 5314 	bfi	r3, r1, #20, #1
    579c:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    579e:	68fb      	ldr	r3, [r7, #12]
    57a0:	f103 0008 	add.w	r0, r3, #8
    57a4:	683b      	ldr	r3, [r7, #0]
    57a6:	6899      	ldr	r1, [r3, #8]
    57a8:	683b      	ldr	r3, [r7, #0]
    57aa:	7b1b      	ldrb	r3, [r3, #12]
    57ac:	461a      	mov	r2, r3
    57ae:	4b10      	ldr	r3, [pc, #64]	; (57f0 <_can_async_write+0x1b4>)
    57b0:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    57b2:	687b      	ldr	r3, [r7, #4]
    57b4:	681c      	ldr	r4, [r3, #0]
    57b6:	687b      	ldr	r3, [r7, #4]
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	4618      	mov	r0, r3
    57bc:	4b07      	ldr	r3, [pc, #28]	; (57dc <_can_async_write+0x1a0>)
    57be:	4798      	blx	r3
    57c0:	4602      	mov	r2, r0
    57c2:	2301      	movs	r3, #1
    57c4:	4093      	lsls	r3, r2
    57c6:	4619      	mov	r1, r3
    57c8:	4620      	mov	r0, r4
    57ca:	4b0a      	ldr	r3, [pc, #40]	; (57f4 <_can_async_write+0x1b8>)
    57cc:	4798      	blx	r3
	return ERR_NONE;
    57ce:	2300      	movs	r3, #0
}
    57d0:	4618      	mov	r0, r3
    57d2:	3714      	adds	r7, #20
    57d4:	46bd      	mov	sp, r7
    57d6:	bd90      	pop	{r4, r7, pc}
    57d8:	00004ed3 	.word	0x00004ed3
    57dc:	00004efd 	.word	0x00004efd
    57e0:	42000400 	.word	0x42000400
    57e4:	2000e0b0 	.word	0x2000e0b0
    57e8:	00005003 	.word	0x00005003
    57ec:	00005033 	.word	0x00005033
    57f0:	0001a539 	.word	0x0001a539
    57f4:	000052c9 	.word	0x000052c9

000057f8 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b084      	sub	sp, #16
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
    5800:	460b      	mov	r3, r1
    5802:	70fb      	strb	r3, [r7, #3]
    5804:	4613      	mov	r3, r2
    5806:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    5808:	78fb      	ldrb	r3, [r7, #3]
    580a:	2b00      	cmp	r3, #0
    580c:	d107      	bne.n	581e <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	78ba      	ldrb	r2, [r7, #2]
    5814:	4611      	mov	r1, r2
    5816:	4618      	mov	r0, r3
    5818:	4b16      	ldr	r3, [pc, #88]	; (5874 <_can_async_set_irq_state+0x7c>)
    581a:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    581c:	e026      	b.n	586c <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    581e:	78fb      	ldrb	r3, [r7, #3]
    5820:	2b01      	cmp	r3, #1
    5822:	d10e      	bne.n	5842 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	78ba      	ldrb	r2, [r7, #2]
    582a:	4611      	mov	r1, r2
    582c:	4618      	mov	r0, r3
    582e:	4b12      	ldr	r3, [pc, #72]	; (5878 <_can_async_set_irq_state+0x80>)
    5830:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	f04f 31ff 	mov.w	r1, #4294967295
    583a:	4618      	mov	r0, r3
    583c:	4b0f      	ldr	r3, [pc, #60]	; (587c <_can_async_set_irq_state+0x84>)
    583e:	4798      	blx	r3
	return;
    5840:	e014      	b.n	586c <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    5842:	78fb      	ldrb	r3, [r7, #3]
    5844:	2b02      	cmp	r3, #2
    5846:	d111      	bne.n	586c <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	f240 2101 	movw	r1, #513	; 0x201
    5850:	4618      	mov	r0, r3
    5852:	4b0b      	ldr	r3, [pc, #44]	; (5880 <_can_async_set_irq_state+0x88>)
    5854:	4798      	blx	r3
    5856:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	681a      	ldr	r2, [r3, #0]
    585c:	68fb      	ldr	r3, [r7, #12]
    585e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    5862:	4619      	mov	r1, r3
    5864:	4610      	mov	r0, r2
    5866:	4b07      	ldr	r3, [pc, #28]	; (5884 <_can_async_set_irq_state+0x8c>)
    5868:	4798      	blx	r3
	return;
    586a:	bf00      	nop
    586c:	bf00      	nop
}
    586e:	3710      	adds	r7, #16
    5870:	46bd      	mov	sp, r7
    5872:	bd80      	pop	{r7, pc}
    5874:	000050d5 	.word	0x000050d5
    5878:	00005109 	.word	0x00005109
    587c:	000052e7 	.word	0x000052e7
    5880:	00005141 	.word	0x00005141
    5884:	00005167 	.word	0x00005167

00005888 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    5888:	b480      	push	{r7}
    588a:	b087      	sub	sp, #28
    588c:	af00      	add	r7, sp, #0
    588e:	60f8      	str	r0, [r7, #12]
    5890:	607b      	str	r3, [r7, #4]
    5892:	460b      	mov	r3, r1
    5894:	72fb      	strb	r3, [r7, #11]
    5896:	4613      	mov	r3, r2
    5898:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    589a:	68fb      	ldr	r3, [r7, #12]
    589c:	699b      	ldr	r3, [r3, #24]
    589e:	68da      	ldr	r2, [r3, #12]
    58a0:	7afb      	ldrb	r3, [r7, #11]
    58a2:	009b      	lsls	r3, r3, #2
    58a4:	4413      	add	r3, r2
    58a6:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	699b      	ldr	r3, [r3, #24]
    58ac:	691a      	ldr	r2, [r3, #16]
    58ae:	7afb      	ldrb	r3, [r7, #11]
    58b0:	00db      	lsls	r3, r3, #3
    58b2:	4413      	add	r3, r2
    58b4:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    58b6:	7abb      	ldrb	r3, [r7, #10]
    58b8:	2b00      	cmp	r3, #0
    58ba:	d123      	bne.n	5904 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	2b00      	cmp	r3, #0
    58c0:	d104      	bne.n	58cc <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    58c2:	697b      	ldr	r3, [r7, #20]
    58c4:	2200      	movs	r2, #0
    58c6:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    58c8:	2300      	movs	r3, #0
    58ca:	e03b      	b.n	5944 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	685a      	ldr	r2, [r3, #4]
    58d0:	697b      	ldr	r3, [r7, #20]
    58d2:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	681b      	ldr	r3, [r3, #0]
    58d8:	b29b      	uxth	r3, r3
    58da:	f3c3 030a 	ubfx	r3, r3, #0, #11
    58de:	b299      	uxth	r1, r3
    58e0:	697a      	ldr	r2, [r7, #20]
    58e2:	6813      	ldr	r3, [r2, #0]
    58e4:	f361 431a 	bfi	r3, r1, #16, #11
    58e8:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    58ea:	697a      	ldr	r2, [r7, #20]
    58ec:	6813      	ldr	r3, [r2, #0]
    58ee:	2102      	movs	r1, #2
    58f0:	f361 739f 	bfi	r3, r1, #30, #2
    58f4:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    58f6:	697a      	ldr	r2, [r7, #20]
    58f8:	6813      	ldr	r3, [r2, #0]
    58fa:	2101      	movs	r1, #1
    58fc:	f361 63dd 	bfi	r3, r1, #27, #3
    5900:	6013      	str	r3, [r2, #0]
    5902:	e01e      	b.n	5942 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    5904:	7abb      	ldrb	r3, [r7, #10]
    5906:	2b01      	cmp	r3, #1
    5908:	d11b      	bne.n	5942 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	2b00      	cmp	r3, #0
    590e:	d104      	bne.n	591a <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    5910:	693b      	ldr	r3, [r7, #16]
    5912:	2200      	movs	r2, #0
    5914:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    5916:	2300      	movs	r3, #0
    5918:	e014      	b.n	5944 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	681a      	ldr	r2, [r3, #0]
    591e:	693b      	ldr	r3, [r7, #16]
    5920:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    5922:	693a      	ldr	r2, [r7, #16]
    5924:	6813      	ldr	r3, [r2, #0]
    5926:	2101      	movs	r1, #1
    5928:	f361 735f 	bfi	r3, r1, #29, #3
    592c:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	685a      	ldr	r2, [r3, #4]
    5932:	693b      	ldr	r3, [r7, #16]
    5934:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    5936:	693a      	ldr	r2, [r7, #16]
    5938:	6853      	ldr	r3, [r2, #4]
    593a:	2102      	movs	r1, #2
    593c:	f361 739f 	bfi	r3, r1, #30, #2
    5940:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    5942:	2300      	movs	r3, #0
}
    5944:	4618      	mov	r0, r3
    5946:	371c      	adds	r7, #28
    5948:	46bd      	mov	sp, r7
    594a:	f85d 7b04 	ldr.w	r7, [sp], #4
    594e:	4770      	bx	lr

00005950 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5950:	b590      	push	{r4, r7, lr}
    5952:	b083      	sub	sp, #12
    5954:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5956:	4b2c      	ldr	r3, [pc, #176]	; (5a08 <CAN1_Handler+0xb8>)
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	4618      	mov	r0, r3
    5962:	4b2a      	ldr	r3, [pc, #168]	; (5a0c <CAN1_Handler+0xbc>)
    5964:	4798      	blx	r3
    5966:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5968:	683b      	ldr	r3, [r7, #0]
    596a:	f003 0301 	and.w	r3, r3, #1
    596e:	2b00      	cmp	r3, #0
    5970:	d003      	beq.n	597a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	689b      	ldr	r3, [r3, #8]
    5976:	6878      	ldr	r0, [r7, #4]
    5978:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    597a:	683b      	ldr	r3, [r7, #0]
    597c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5980:	2b00      	cmp	r3, #0
    5982:	d003      	beq.n	598c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	685b      	ldr	r3, [r3, #4]
    5988:	6878      	ldr	r0, [r7, #4]
    598a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    598c:	683b      	ldr	r3, [r7, #0]
    598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5992:	2b00      	cmp	r3, #0
    5994:	d004      	beq.n	59a0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	68db      	ldr	r3, [r3, #12]
    599a:	2103      	movs	r1, #3
    599c:	6878      	ldr	r0, [r7, #4]
    599e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    59a0:	683b      	ldr	r3, [r7, #0]
    59a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    59a6:	2b00      	cmp	r3, #0
    59a8:	d004      	beq.n	59b4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    59aa:	687b      	ldr	r3, [r7, #4]
    59ac:	68db      	ldr	r3, [r3, #12]
    59ae:	2100      	movs	r1, #0
    59b0:	6878      	ldr	r0, [r7, #4]
    59b2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    59b4:	683b      	ldr	r3, [r7, #0]
    59b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    59ba:	2b00      	cmp	r3, #0
    59bc:	d00f      	beq.n	59de <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	68dc      	ldr	r4, [r3, #12]
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	4618      	mov	r0, r3
    59c8:	4b11      	ldr	r3, [pc, #68]	; (5a10 <CAN1_Handler+0xc0>)
    59ca:	4798      	blx	r3
    59cc:	4603      	mov	r3, r0
    59ce:	2b00      	cmp	r3, #0
    59d0:	d001      	beq.n	59d6 <CAN1_Handler+0x86>
    59d2:	2302      	movs	r3, #2
    59d4:	e000      	b.n	59d8 <CAN1_Handler+0x88>
    59d6:	2301      	movs	r3, #1
    59d8:	4619      	mov	r1, r3
    59da:	6878      	ldr	r0, [r7, #4]
    59dc:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    59de:	683b      	ldr	r3, [r7, #0]
    59e0:	f003 0308 	and.w	r3, r3, #8
    59e4:	2b00      	cmp	r3, #0
    59e6:	d004      	beq.n	59f2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	68db      	ldr	r3, [r3, #12]
    59ec:	2104      	movs	r1, #4
    59ee:	6878      	ldr	r0, [r7, #4]
    59f0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	681b      	ldr	r3, [r3, #0]
    59f6:	6839      	ldr	r1, [r7, #0]
    59f8:	4618      	mov	r0, r3
    59fa:	4b06      	ldr	r3, [pc, #24]	; (5a14 <CAN1_Handler+0xc4>)
    59fc:	4798      	blx	r3
}
    59fe:	bf00      	nop
    5a00:	370c      	adds	r7, #12
    5a02:	46bd      	mov	sp, r7
    5a04:	bd90      	pop	{r4, r7, pc}
    5a06:	bf00      	nop
    5a08:	20002308 	.word	0x20002308
    5a0c:	000050bd 	.word	0x000050bd
    5a10:	00004e6d 	.word	0x00004e6d
    5a14:	000050a1 	.word	0x000050a1

00005a18 <__NVIC_SetPendingIRQ>:
{
    5a18:	b480      	push	{r7}
    5a1a:	b083      	sub	sp, #12
    5a1c:	af00      	add	r7, sp, #0
    5a1e:	4603      	mov	r3, r0
    5a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a26:	2b00      	cmp	r3, #0
    5a28:	db0c      	blt.n	5a44 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a2a:	4909      	ldr	r1, [pc, #36]	; (5a50 <__NVIC_SetPendingIRQ+0x38>)
    5a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a30:	095b      	lsrs	r3, r3, #5
    5a32:	88fa      	ldrh	r2, [r7, #6]
    5a34:	f002 021f 	and.w	r2, r2, #31
    5a38:	2001      	movs	r0, #1
    5a3a:	fa00 f202 	lsl.w	r2, r0, r2
    5a3e:	3340      	adds	r3, #64	; 0x40
    5a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5a44:	bf00      	nop
    5a46:	370c      	adds	r7, #12
    5a48:	46bd      	mov	sp, r7
    5a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a4e:	4770      	bx	lr
    5a50:	e000e100 	.word	0xe000e100

00005a54 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b082      	sub	sp, #8
    5a58:	af00      	add	r7, sp, #0
    5a5a:	4603      	mov	r3, r0
    5a5c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5a5e:	79fb      	ldrb	r3, [r7, #7]
    5a60:	b21b      	sxth	r3, r3
    5a62:	4618      	mov	r0, r3
    5a64:	4b02      	ldr	r3, [pc, #8]	; (5a70 <_irq_set+0x1c>)
    5a66:	4798      	blx	r3
}
    5a68:	bf00      	nop
    5a6a:	3708      	adds	r7, #8
    5a6c:	46bd      	mov	sp, r7
    5a6e:	bd80      	pop	{r7, pc}
    5a70:	00005a19 	.word	0x00005a19

00005a74 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5a74:	b480      	push	{r7}
    5a76:	b083      	sub	sp, #12
    5a78:	af00      	add	r7, sp, #0
    5a7a:	4603      	mov	r3, r0
    5a7c:	6039      	str	r1, [r7, #0]
    5a7e:	80fb      	strh	r3, [r7, #6]
    5a80:	4613      	mov	r3, r2
    5a82:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5a84:	797b      	ldrb	r3, [r7, #5]
    5a86:	3b04      	subs	r3, #4
    5a88:	2b05      	cmp	r3, #5
    5a8a:	d86b      	bhi.n	5b64 <_get_cycles_for_us_internal+0xf0>
    5a8c:	a201      	add	r2, pc, #4	; (adr r2, 5a94 <_get_cycles_for_us_internal+0x20>)
    5a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5a92:	bf00      	nop
    5a94:	00005b43 	.word	0x00005b43
    5a98:	00005b23 	.word	0x00005b23
    5a9c:	00005b05 	.word	0x00005b05
    5aa0:	00005ae7 	.word	0x00005ae7
    5aa4:	00005ac9 	.word	0x00005ac9
    5aa8:	00005aad 	.word	0x00005aad
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5aac:	88fb      	ldrh	r3, [r7, #6]
    5aae:	683a      	ldr	r2, [r7, #0]
    5ab0:	4935      	ldr	r1, [pc, #212]	; (5b88 <_get_cycles_for_us_internal+0x114>)
    5ab2:	fba1 1202 	umull	r1, r2, r1, r2
    5ab6:	0c92      	lsrs	r2, r2, #18
    5ab8:	fb02 f303 	mul.w	r3, r2, r3
    5abc:	3302      	adds	r3, #2
    5abe:	4a33      	ldr	r2, [pc, #204]	; (5b8c <_get_cycles_for_us_internal+0x118>)
    5ac0:	fba2 2303 	umull	r2, r3, r2, r3
    5ac4:	085b      	lsrs	r3, r3, #1
    5ac6:	e059      	b.n	5b7c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5ac8:	88fb      	ldrh	r3, [r7, #6]
    5aca:	683a      	ldr	r2, [r7, #0]
    5acc:	0952      	lsrs	r2, r2, #5
    5ace:	4930      	ldr	r1, [pc, #192]	; (5b90 <_get_cycles_for_us_internal+0x11c>)
    5ad0:	fba1 1202 	umull	r1, r2, r1, r2
    5ad4:	09d2      	lsrs	r2, r2, #7
    5ad6:	fb02 f303 	mul.w	r3, r2, r3
    5ada:	331d      	adds	r3, #29
    5adc:	4a2d      	ldr	r2, [pc, #180]	; (5b94 <_get_cycles_for_us_internal+0x120>)
    5ade:	fba2 2303 	umull	r2, r3, r2, r3
    5ae2:	091b      	lsrs	r3, r3, #4
    5ae4:	e04a      	b.n	5b7c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5ae6:	88fb      	ldrh	r3, [r7, #6]
    5ae8:	683a      	ldr	r2, [r7, #0]
    5aea:	492b      	ldr	r1, [pc, #172]	; (5b98 <_get_cycles_for_us_internal+0x124>)
    5aec:	fba1 1202 	umull	r1, r2, r1, r2
    5af0:	0b52      	lsrs	r2, r2, #13
    5af2:	fb02 f303 	mul.w	r3, r2, r3
    5af6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5afa:	4a28      	ldr	r2, [pc, #160]	; (5b9c <_get_cycles_for_us_internal+0x128>)
    5afc:	fba2 2303 	umull	r2, r3, r2, r3
    5b00:	095b      	lsrs	r3, r3, #5
    5b02:	e03b      	b.n	5b7c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5b04:	88fb      	ldrh	r3, [r7, #6]
    5b06:	683a      	ldr	r2, [r7, #0]
    5b08:	4925      	ldr	r1, [pc, #148]	; (5ba0 <_get_cycles_for_us_internal+0x12c>)
    5b0a:	fba1 1202 	umull	r1, r2, r1, r2
    5b0e:	0992      	lsrs	r2, r2, #6
    5b10:	fb02 f303 	mul.w	r3, r2, r3
    5b14:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5b18:	4a22      	ldr	r2, [pc, #136]	; (5ba4 <_get_cycles_for_us_internal+0x130>)
    5b1a:	fba2 2303 	umull	r2, r3, r2, r3
    5b1e:	099b      	lsrs	r3, r3, #6
    5b20:	e02c      	b.n	5b7c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5b22:	88fb      	ldrh	r3, [r7, #6]
    5b24:	683a      	ldr	r2, [r7, #0]
    5b26:	4920      	ldr	r1, [pc, #128]	; (5ba8 <_get_cycles_for_us_internal+0x134>)
    5b28:	fba1 1202 	umull	r1, r2, r1, r2
    5b2c:	0952      	lsrs	r2, r2, #5
    5b2e:	fb02 f303 	mul.w	r3, r2, r3
    5b32:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5b36:	332f      	adds	r3, #47	; 0x2f
    5b38:	4a1c      	ldr	r2, [pc, #112]	; (5bac <_get_cycles_for_us_internal+0x138>)
    5b3a:	fba2 2303 	umull	r2, r3, r2, r3
    5b3e:	0b5b      	lsrs	r3, r3, #13
    5b40:	e01c      	b.n	5b7c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5b42:	88fb      	ldrh	r3, [r7, #6]
    5b44:	683a      	ldr	r2, [r7, #0]
    5b46:	491a      	ldr	r1, [pc, #104]	; (5bb0 <_get_cycles_for_us_internal+0x13c>)
    5b48:	fba1 1202 	umull	r1, r2, r1, r2
    5b4c:	08d2      	lsrs	r2, r2, #3
    5b4e:	fb02 f303 	mul.w	r3, r2, r3
    5b52:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5b56:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5b5a:	4a16      	ldr	r2, [pc, #88]	; (5bb4 <_get_cycles_for_us_internal+0x140>)
    5b5c:	fba2 2303 	umull	r2, r3, r2, r3
    5b60:	0c5b      	lsrs	r3, r3, #17
    5b62:	e00b      	b.n	5b7c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5b64:	88fb      	ldrh	r3, [r7, #6]
    5b66:	683a      	ldr	r2, [r7, #0]
    5b68:	fb02 f303 	mul.w	r3, r2, r3
    5b6c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5b70:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5b74:	4a10      	ldr	r2, [pc, #64]	; (5bb8 <_get_cycles_for_us_internal+0x144>)
    5b76:	fba2 2303 	umull	r2, r3, r2, r3
    5b7a:	0c9b      	lsrs	r3, r3, #18
	}
}
    5b7c:	4618      	mov	r0, r3
    5b7e:	370c      	adds	r7, #12
    5b80:	46bd      	mov	sp, r7
    5b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b86:	4770      	bx	lr
    5b88:	431bde83 	.word	0x431bde83
    5b8c:	aaaaaaab 	.word	0xaaaaaaab
    5b90:	0a7c5ac5 	.word	0x0a7c5ac5
    5b94:	88888889 	.word	0x88888889
    5b98:	d1b71759 	.word	0xd1b71759
    5b9c:	1b4e81b5 	.word	0x1b4e81b5
    5ba0:	10624dd3 	.word	0x10624dd3
    5ba4:	057619f1 	.word	0x057619f1
    5ba8:	51eb851f 	.word	0x51eb851f
    5bac:	45e7b273 	.word	0x45e7b273
    5bb0:	cccccccd 	.word	0xcccccccd
    5bb4:	6fd91d85 	.word	0x6fd91d85
    5bb8:	165e9f81 	.word	0x165e9f81

00005bbc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b082      	sub	sp, #8
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	4603      	mov	r3, r0
    5bc4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5bc6:	88fb      	ldrh	r3, [r7, #6]
    5bc8:	2209      	movs	r2, #9
    5bca:	4904      	ldr	r1, [pc, #16]	; (5bdc <_get_cycles_for_us+0x20>)
    5bcc:	4618      	mov	r0, r3
    5bce:	4b04      	ldr	r3, [pc, #16]	; (5be0 <_get_cycles_for_us+0x24>)
    5bd0:	4798      	blx	r3
    5bd2:	4603      	mov	r3, r0
}
    5bd4:	4618      	mov	r0, r3
    5bd6:	3708      	adds	r7, #8
    5bd8:	46bd      	mov	sp, r7
    5bda:	bd80      	pop	{r7, pc}
    5bdc:	07270e00 	.word	0x07270e00
    5be0:	00005a75 	.word	0x00005a75

00005be4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5be4:	b480      	push	{r7}
    5be6:	b083      	sub	sp, #12
    5be8:	af00      	add	r7, sp, #0
    5bea:	4603      	mov	r3, r0
    5bec:	6039      	str	r1, [r7, #0]
    5bee:	80fb      	strh	r3, [r7, #6]
    5bf0:	4613      	mov	r3, r2
    5bf2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5bf4:	797b      	ldrb	r3, [r7, #5]
    5bf6:	3b04      	subs	r3, #4
    5bf8:	2b05      	cmp	r3, #5
    5bfa:	d870      	bhi.n	5cde <_get_cycles_for_ms_internal+0xfa>
    5bfc:	a201      	add	r2, pc, #4	; (adr r2, 5c04 <_get_cycles_for_ms_internal+0x20>)
    5bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c02:	bf00      	nop
    5c04:	00005cc1 	.word	0x00005cc1
    5c08:	00005ca5 	.word	0x00005ca5
    5c0c:	00005c89 	.word	0x00005c89
    5c10:	00005c65 	.word	0x00005c65
    5c14:	00005c41 	.word	0x00005c41
    5c18:	00005c1d 	.word	0x00005c1d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5c1c:	88fb      	ldrh	r3, [r7, #6]
    5c1e:	683a      	ldr	r2, [r7, #0]
    5c20:	4937      	ldr	r1, [pc, #220]	; (5d00 <_get_cycles_for_ms_internal+0x11c>)
    5c22:	fba1 1202 	umull	r1, r2, r1, r2
    5c26:	0c92      	lsrs	r2, r2, #18
    5c28:	fb02 f303 	mul.w	r3, r2, r3
    5c2c:	3302      	adds	r3, #2
    5c2e:	4a35      	ldr	r2, [pc, #212]	; (5d04 <_get_cycles_for_ms_internal+0x120>)
    5c30:	fba2 2303 	umull	r2, r3, r2, r3
    5c34:	085b      	lsrs	r3, r3, #1
    5c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c3a:	fb02 f303 	mul.w	r3, r2, r3
    5c3e:	e058      	b.n	5cf2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5c40:	88fb      	ldrh	r3, [r7, #6]
    5c42:	683a      	ldr	r2, [r7, #0]
    5c44:	0952      	lsrs	r2, r2, #5
    5c46:	4930      	ldr	r1, [pc, #192]	; (5d08 <_get_cycles_for_ms_internal+0x124>)
    5c48:	fba1 1202 	umull	r1, r2, r1, r2
    5c4c:	09d2      	lsrs	r2, r2, #7
    5c4e:	fb02 f303 	mul.w	r3, r2, r3
    5c52:	3302      	adds	r3, #2
    5c54:	4a2b      	ldr	r2, [pc, #172]	; (5d04 <_get_cycles_for_ms_internal+0x120>)
    5c56:	fba2 2303 	umull	r2, r3, r2, r3
    5c5a:	085b      	lsrs	r3, r3, #1
    5c5c:	2264      	movs	r2, #100	; 0x64
    5c5e:	fb02 f303 	mul.w	r3, r2, r3
    5c62:	e046      	b.n	5cf2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5c64:	88fb      	ldrh	r3, [r7, #6]
    5c66:	683a      	ldr	r2, [r7, #0]
    5c68:	4928      	ldr	r1, [pc, #160]	; (5d0c <_get_cycles_for_ms_internal+0x128>)
    5c6a:	fba1 1202 	umull	r1, r2, r1, r2
    5c6e:	0b52      	lsrs	r2, r2, #13
    5c70:	fb02 f303 	mul.w	r3, r2, r3
    5c74:	3302      	adds	r3, #2
    5c76:	4a23      	ldr	r2, [pc, #140]	; (5d04 <_get_cycles_for_ms_internal+0x120>)
    5c78:	fba2 2303 	umull	r2, r3, r2, r3
    5c7c:	085a      	lsrs	r2, r3, #1
    5c7e:	4613      	mov	r3, r2
    5c80:	009b      	lsls	r3, r3, #2
    5c82:	4413      	add	r3, r2
    5c84:	005b      	lsls	r3, r3, #1
    5c86:	e034      	b.n	5cf2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5c88:	88fb      	ldrh	r3, [r7, #6]
    5c8a:	683a      	ldr	r2, [r7, #0]
    5c8c:	4920      	ldr	r1, [pc, #128]	; (5d10 <_get_cycles_for_ms_internal+0x12c>)
    5c8e:	fba1 1202 	umull	r1, r2, r1, r2
    5c92:	0992      	lsrs	r2, r2, #6
    5c94:	fb02 f303 	mul.w	r3, r2, r3
    5c98:	3302      	adds	r3, #2
    5c9a:	4a1a      	ldr	r2, [pc, #104]	; (5d04 <_get_cycles_for_ms_internal+0x120>)
    5c9c:	fba2 2303 	umull	r2, r3, r2, r3
    5ca0:	085b      	lsrs	r3, r3, #1
    5ca2:	e026      	b.n	5cf2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5ca4:	88fb      	ldrh	r3, [r7, #6]
    5ca6:	683a      	ldr	r2, [r7, #0]
    5ca8:	491a      	ldr	r1, [pc, #104]	; (5d14 <_get_cycles_for_ms_internal+0x130>)
    5caa:	fba1 1202 	umull	r1, r2, r1, r2
    5cae:	0952      	lsrs	r2, r2, #5
    5cb0:	fb02 f303 	mul.w	r3, r2, r3
    5cb4:	331d      	adds	r3, #29
    5cb6:	4a18      	ldr	r2, [pc, #96]	; (5d18 <_get_cycles_for_ms_internal+0x134>)
    5cb8:	fba2 2303 	umull	r2, r3, r2, r3
    5cbc:	091b      	lsrs	r3, r3, #4
    5cbe:	e018      	b.n	5cf2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5cc0:	88fb      	ldrh	r3, [r7, #6]
    5cc2:	683a      	ldr	r2, [r7, #0]
    5cc4:	4915      	ldr	r1, [pc, #84]	; (5d1c <_get_cycles_for_ms_internal+0x138>)
    5cc6:	fba1 1202 	umull	r1, r2, r1, r2
    5cca:	08d2      	lsrs	r2, r2, #3
    5ccc:	fb02 f303 	mul.w	r3, r2, r3
    5cd0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5cd4:	4a12      	ldr	r2, [pc, #72]	; (5d20 <_get_cycles_for_ms_internal+0x13c>)
    5cd6:	fba2 2303 	umull	r2, r3, r2, r3
    5cda:	095b      	lsrs	r3, r3, #5
    5cdc:	e009      	b.n	5cf2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    5cde:	88fb      	ldrh	r3, [r7, #6]
    5ce0:	683a      	ldr	r2, [r7, #0]
    5ce2:	fb02 f303 	mul.w	r3, r2, r3
    5ce6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5cea:	4a0e      	ldr	r2, [pc, #56]	; (5d24 <_get_cycles_for_ms_internal+0x140>)
    5cec:	fba2 2303 	umull	r2, r3, r2, r3
    5cf0:	099b      	lsrs	r3, r3, #6
	}
}
    5cf2:	4618      	mov	r0, r3
    5cf4:	370c      	adds	r7, #12
    5cf6:	46bd      	mov	sp, r7
    5cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cfc:	4770      	bx	lr
    5cfe:	bf00      	nop
    5d00:	431bde83 	.word	0x431bde83
    5d04:	aaaaaaab 	.word	0xaaaaaaab
    5d08:	0a7c5ac5 	.word	0x0a7c5ac5
    5d0c:	d1b71759 	.word	0xd1b71759
    5d10:	10624dd3 	.word	0x10624dd3
    5d14:	51eb851f 	.word	0x51eb851f
    5d18:	88888889 	.word	0x88888889
    5d1c:	cccccccd 	.word	0xcccccccd
    5d20:	1b4e81b5 	.word	0x1b4e81b5
    5d24:	057619f1 	.word	0x057619f1

00005d28 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	4603      	mov	r3, r0
    5d30:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5d32:	88fb      	ldrh	r3, [r7, #6]
    5d34:	2209      	movs	r2, #9
    5d36:	4904      	ldr	r1, [pc, #16]	; (5d48 <_get_cycles_for_ms+0x20>)
    5d38:	4618      	mov	r0, r3
    5d3a:	4b04      	ldr	r3, [pc, #16]	; (5d4c <_get_cycles_for_ms+0x24>)
    5d3c:	4798      	blx	r3
    5d3e:	4603      	mov	r3, r0
}
    5d40:	4618      	mov	r0, r3
    5d42:	3708      	adds	r7, #8
    5d44:	46bd      	mov	sp, r7
    5d46:	bd80      	pop	{r7, pc}
    5d48:	07270e00 	.word	0x07270e00
    5d4c:	00005be5 	.word	0x00005be5

00005d50 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5d50:	b480      	push	{r7}
    5d52:	b083      	sub	sp, #12
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
    5d58:	6039      	str	r1, [r7, #0]
    5d5a:	bf00      	nop
    5d5c:	f3af 8000 	nop.w

00005d60 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    5d60:	3901      	subs	r1, #1
    5d62:	d8fd      	bhi.n	5d60 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    5d64:	bf00      	nop
    5d66:	370c      	adds	r7, #12
    5d68:	46bd      	mov	sp, r7
    5d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6e:	4770      	bx	lr

00005d70 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5d70:	b480      	push	{r7}
    5d72:	b083      	sub	sp, #12
    5d74:	af00      	add	r7, sp, #0
    5d76:	6078      	str	r0, [r7, #4]
    5d78:	460b      	mov	r3, r1
    5d7a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	881b      	ldrh	r3, [r3, #0]
    5d80:	b29a      	uxth	r2, r3
    5d82:	887b      	ldrh	r3, [r7, #2]
    5d84:	021b      	lsls	r3, r3, #8
    5d86:	b29b      	uxth	r3, r3
    5d88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    5d8c:	b29b      	uxth	r3, r3
    5d8e:	4313      	orrs	r3, r2
    5d90:	b29a      	uxth	r2, r3
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5d96:	bf00      	nop
    5d98:	370c      	adds	r7, #12
    5d9a:	46bd      	mov	sp, r7
    5d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da0:	4770      	bx	lr

00005da2 <hri_port_set_EVCTRL_reg>:
{
    5da2:	b480      	push	{r7}
    5da4:	b085      	sub	sp, #20
    5da6:	af00      	add	r7, sp, #0
    5da8:	60f8      	str	r0, [r7, #12]
    5daa:	460b      	mov	r3, r1
    5dac:	607a      	str	r2, [r7, #4]
    5dae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5db0:	7afb      	ldrb	r3, [r7, #11]
    5db2:	7afa      	ldrb	r2, [r7, #11]
    5db4:	68f9      	ldr	r1, [r7, #12]
    5db6:	01d2      	lsls	r2, r2, #7
    5db8:	440a      	add	r2, r1
    5dba:	322c      	adds	r2, #44	; 0x2c
    5dbc:	6811      	ldr	r1, [r2, #0]
    5dbe:	687a      	ldr	r2, [r7, #4]
    5dc0:	430a      	orrs	r2, r1
    5dc2:	68f9      	ldr	r1, [r7, #12]
    5dc4:	01db      	lsls	r3, r3, #7
    5dc6:	440b      	add	r3, r1
    5dc8:	332c      	adds	r3, #44	; 0x2c
    5dca:	601a      	str	r2, [r3, #0]
}
    5dcc:	bf00      	nop
    5dce:	3714      	adds	r7, #20
    5dd0:	46bd      	mov	sp, r7
    5dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd6:	4770      	bx	lr

00005dd8 <_port_event_init>:

static inline void _port_event_init()
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    5ddc:	2200      	movs	r2, #0
    5dde:	2100      	movs	r1, #0
    5de0:	480a      	ldr	r0, [pc, #40]	; (5e0c <_port_event_init+0x34>)
    5de2:	4b0b      	ldr	r3, [pc, #44]	; (5e10 <_port_event_init+0x38>)
    5de4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5de6:	2200      	movs	r2, #0
    5de8:	2101      	movs	r1, #1
    5dea:	4808      	ldr	r0, [pc, #32]	; (5e0c <_port_event_init+0x34>)
    5dec:	4b08      	ldr	r3, [pc, #32]	; (5e10 <_port_event_init+0x38>)
    5dee:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5df0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5df4:	2102      	movs	r1, #2
    5df6:	4805      	ldr	r0, [pc, #20]	; (5e0c <_port_event_init+0x34>)
    5df8:	4b05      	ldr	r3, [pc, #20]	; (5e10 <_port_event_init+0x38>)
    5dfa:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    5dfc:	2200      	movs	r2, #0
    5dfe:	2103      	movs	r1, #3
    5e00:	4802      	ldr	r0, [pc, #8]	; (5e0c <_port_event_init+0x34>)
    5e02:	4b03      	ldr	r3, [pc, #12]	; (5e10 <_port_event_init+0x38>)
    5e04:	4798      	blx	r3
}
    5e06:	bf00      	nop
    5e08:	bd80      	pop	{r7, pc}
    5e0a:	bf00      	nop
    5e0c:	41008000 	.word	0x41008000
    5e10:	00005da3 	.word	0x00005da3

00005e14 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5e14:	b580      	push	{r7, lr}
    5e16:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5e18:	2104      	movs	r1, #4
    5e1a:	480b      	ldr	r0, [pc, #44]	; (5e48 <_init_chip+0x34>)
    5e1c:	4b0b      	ldr	r3, [pc, #44]	; (5e4c <_init_chip+0x38>)
    5e1e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5e20:	4b0b      	ldr	r3, [pc, #44]	; (5e50 <_init_chip+0x3c>)
    5e22:	4798      	blx	r3
	_oscctrl_init_sources();
    5e24:	4b0b      	ldr	r3, [pc, #44]	; (5e54 <_init_chip+0x40>)
    5e26:	4798      	blx	r3
	_mclk_init();
    5e28:	4b0b      	ldr	r3, [pc, #44]	; (5e58 <_init_chip+0x44>)
    5e2a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5e2c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5e30:	4b0a      	ldr	r3, [pc, #40]	; (5e5c <_init_chip+0x48>)
    5e32:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5e34:	4b0a      	ldr	r3, [pc, #40]	; (5e60 <_init_chip+0x4c>)
    5e36:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5e38:	f640 30df 	movw	r0, #3039	; 0xbdf
    5e3c:	4b07      	ldr	r3, [pc, #28]	; (5e5c <_init_chip+0x48>)
    5e3e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5e40:	4b08      	ldr	r3, [pc, #32]	; (5e64 <_init_chip+0x50>)
    5e42:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5e44:	bf00      	nop
    5e46:	bd80      	pop	{r7, pc}
    5e48:	41004000 	.word	0x41004000
    5e4c:	00005d71 	.word	0x00005d71
    5e50:	0000693d 	.word	0x0000693d
    5e54:	00006e05 	.word	0x00006e05
    5e58:	0000685d 	.word	0x0000685d
    5e5c:	00006705 	.word	0x00006705
    5e60:	00006e45 	.word	0x00006e45
    5e64:	00005dd9 	.word	0x00005dd9

00005e68 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5e68:	b480      	push	{r7}
    5e6a:	b083      	sub	sp, #12
    5e6c:	af00      	add	r7, sp, #0
    5e6e:	6078      	str	r0, [r7, #4]
    5e70:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	683a      	ldr	r2, [r7, #0]
    5e76:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5e78:	2300      	movs	r3, #0
}
    5e7a:	4618      	mov	r0, r3
    5e7c:	370c      	adds	r7, #12
    5e7e:	46bd      	mov	sp, r7
    5e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e84:	4770      	bx	lr
	...

00005e88 <__NVIC_EnableIRQ>:
{
    5e88:	b480      	push	{r7}
    5e8a:	b083      	sub	sp, #12
    5e8c:	af00      	add	r7, sp, #0
    5e8e:	4603      	mov	r3, r0
    5e90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e96:	2b00      	cmp	r3, #0
    5e98:	db0b      	blt.n	5eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e9a:	4909      	ldr	r1, [pc, #36]	; (5ec0 <__NVIC_EnableIRQ+0x38>)
    5e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ea0:	095b      	lsrs	r3, r3, #5
    5ea2:	88fa      	ldrh	r2, [r7, #6]
    5ea4:	f002 021f 	and.w	r2, r2, #31
    5ea8:	2001      	movs	r0, #1
    5eaa:	fa00 f202 	lsl.w	r2, r0, r2
    5eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5eb2:	bf00      	nop
    5eb4:	370c      	adds	r7, #12
    5eb6:	46bd      	mov	sp, r7
    5eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ebc:	4770      	bx	lr
    5ebe:	bf00      	nop
    5ec0:	e000e100 	.word	0xe000e100

00005ec4 <__NVIC_DisableIRQ>:
{
    5ec4:	b480      	push	{r7}
    5ec6:	b083      	sub	sp, #12
    5ec8:	af00      	add	r7, sp, #0
    5eca:	4603      	mov	r3, r0
    5ecc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	db10      	blt.n	5ef8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ed6:	490b      	ldr	r1, [pc, #44]	; (5f04 <__NVIC_DisableIRQ+0x40>)
    5ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5edc:	095b      	lsrs	r3, r3, #5
    5ede:	88fa      	ldrh	r2, [r7, #6]
    5ee0:	f002 021f 	and.w	r2, r2, #31
    5ee4:	2001      	movs	r0, #1
    5ee6:	fa00 f202 	lsl.w	r2, r0, r2
    5eea:	3320      	adds	r3, #32
    5eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ef4:	f3bf 8f6f 	isb	sy
}
    5ef8:	bf00      	nop
    5efa:	370c      	adds	r7, #12
    5efc:	46bd      	mov	sp, r7
    5efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f02:	4770      	bx	lr
    5f04:	e000e100 	.word	0xe000e100

00005f08 <__NVIC_ClearPendingIRQ>:
{
    5f08:	b480      	push	{r7}
    5f0a:	b083      	sub	sp, #12
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	4603      	mov	r3, r0
    5f10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f16:	2b00      	cmp	r3, #0
    5f18:	db0c      	blt.n	5f34 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f1a:	4909      	ldr	r1, [pc, #36]	; (5f40 <__NVIC_ClearPendingIRQ+0x38>)
    5f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f20:	095b      	lsrs	r3, r3, #5
    5f22:	88fa      	ldrh	r2, [r7, #6]
    5f24:	f002 021f 	and.w	r2, r2, #31
    5f28:	2001      	movs	r0, #1
    5f2a:	fa00 f202 	lsl.w	r2, r0, r2
    5f2e:	3360      	adds	r3, #96	; 0x60
    5f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f34:	bf00      	nop
    5f36:	370c      	adds	r7, #12
    5f38:	46bd      	mov	sp, r7
    5f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3e:	4770      	bx	lr
    5f40:	e000e100 	.word	0xe000e100

00005f44 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5f44:	b480      	push	{r7}
    5f46:	b083      	sub	sp, #12
    5f48:	af00      	add	r7, sp, #0
    5f4a:	6078      	str	r0, [r7, #4]
    5f4c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    5f4e:	bf00      	nop
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	685a      	ldr	r2, [r3, #4]
    5f54:	683b      	ldr	r3, [r7, #0]
    5f56:	4013      	ands	r3, r2
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d1f9      	bne.n	5f50 <hri_eic_wait_for_sync+0xc>
	};
}
    5f5c:	bf00      	nop
    5f5e:	370c      	adds	r7, #12
    5f60:	46bd      	mov	sp, r7
    5f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f66:	4770      	bx	lr

00005f68 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5f68:	b480      	push	{r7}
    5f6a:	b083      	sub	sp, #12
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	6078      	str	r0, [r7, #4]
    5f70:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	685a      	ldr	r2, [r3, #4]
    5f76:	683b      	ldr	r3, [r7, #0]
    5f78:	4013      	ands	r3, r2
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	bf14      	ite	ne
    5f7e:	2301      	movne	r3, #1
    5f80:	2300      	moveq	r3, #0
    5f82:	b2db      	uxtb	r3, r3
}
    5f84:	4618      	mov	r0, r3
    5f86:	370c      	adds	r7, #12
    5f88:	46bd      	mov	sp, r7
    5f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8e:	4770      	bx	lr

00005f90 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    5f90:	b480      	push	{r7}
    5f92:	b083      	sub	sp, #12
    5f94:	af00      	add	r7, sp, #0
    5f96:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    5f98:	687b      	ldr	r3, [r7, #4]
    5f9a:	695b      	ldr	r3, [r3, #20]
}
    5f9c:	4618      	mov	r0, r3
    5f9e:	370c      	adds	r7, #12
    5fa0:	46bd      	mov	sp, r7
    5fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa6:	4770      	bx	lr

00005fa8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    5fa8:	b480      	push	{r7}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	6078      	str	r0, [r7, #4]
    5fb0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	683a      	ldr	r2, [r7, #0]
    5fb6:	615a      	str	r2, [r3, #20]
}
    5fb8:	bf00      	nop
    5fba:	370c      	adds	r7, #12
    5fbc:	46bd      	mov	sp, r7
    5fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc2:	4770      	bx	lr

00005fc4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    5fc4:	b480      	push	{r7}
    5fc6:	b083      	sub	sp, #12
    5fc8:	af00      	add	r7, sp, #0
    5fca:	6078      	str	r0, [r7, #4]
    5fcc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    5fce:	687b      	ldr	r3, [r7, #4]
    5fd0:	683a      	ldr	r2, [r7, #0]
    5fd2:	611a      	str	r2, [r3, #16]
}
    5fd4:	bf00      	nop
    5fd6:	370c      	adds	r7, #12
    5fd8:	46bd      	mov	sp, r7
    5fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fde:	4770      	bx	lr

00005fe0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    5fe0:	b480      	push	{r7}
    5fe2:	b083      	sub	sp, #12
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
    5fe8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	683a      	ldr	r2, [r7, #0]
    5fee:	60da      	str	r2, [r3, #12]
}
    5ff0:	bf00      	nop
    5ff2:	370c      	adds	r7, #12
    5ff4:	46bd      	mov	sp, r7
    5ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ffa:	4770      	bx	lr

00005ffc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5ffc:	b580      	push	{r7, lr}
    5ffe:	b082      	sub	sp, #8
    6000:	af00      	add	r7, sp, #0
    6002:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6004:	687b      	ldr	r3, [r7, #4]
    6006:	781b      	ldrb	r3, [r3, #0]
    6008:	b2db      	uxtb	r3, r3
    600a:	f043 0302 	orr.w	r3, r3, #2
    600e:	b2da      	uxtb	r2, r3
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6014:	2103      	movs	r1, #3
    6016:	6878      	ldr	r0, [r7, #4]
    6018:	4b02      	ldr	r3, [pc, #8]	; (6024 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    601a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    601c:	bf00      	nop
    601e:	3708      	adds	r7, #8
    6020:	46bd      	mov	sp, r7
    6022:	bd80      	pop	{r7, pc}
    6024:	00005f45 	.word	0x00005f45

00006028 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6028:	b580      	push	{r7, lr}
    602a:	b082      	sub	sp, #8
    602c:	af00      	add	r7, sp, #0
    602e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	b2db      	uxtb	r3, r3
    6036:	f023 0302 	bic.w	r3, r3, #2
    603a:	b2da      	uxtb	r2, r3
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6040:	2103      	movs	r1, #3
    6042:	6878      	ldr	r0, [r7, #4]
    6044:	4b02      	ldr	r3, [pc, #8]	; (6050 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    6046:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6048:	bf00      	nop
    604a:	3708      	adds	r7, #8
    604c:	46bd      	mov	sp, r7
    604e:	bd80      	pop	{r7, pc}
    6050:	00005f45 	.word	0x00005f45

00006054 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    6054:	b580      	push	{r7, lr}
    6056:	b084      	sub	sp, #16
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
    605c:	460b      	mov	r3, r1
    605e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	781b      	ldrb	r3, [r3, #0]
    6064:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    6066:	7bfb      	ldrb	r3, [r7, #15]
    6068:	f023 0310 	bic.w	r3, r3, #16
    606c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    606e:	78fb      	ldrb	r3, [r7, #3]
    6070:	011b      	lsls	r3, r3, #4
    6072:	b25a      	sxtb	r2, r3
    6074:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6078:	4313      	orrs	r3, r2
    607a:	b25b      	sxtb	r3, r3
    607c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	7bfa      	ldrb	r2, [r7, #15]
    6082:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6084:	2103      	movs	r1, #3
    6086:	6878      	ldr	r0, [r7, #4]
    6088:	4b02      	ldr	r3, [pc, #8]	; (6094 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    608a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    608c:	bf00      	nop
    608e:	3710      	adds	r7, #16
    6090:	46bd      	mov	sp, r7
    6092:	bd80      	pop	{r7, pc}
    6094:	00005f45 	.word	0x00005f45

00006098 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6098:	b580      	push	{r7, lr}
    609a:	b084      	sub	sp, #16
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	460b      	mov	r3, r1
    60a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    60a4:	2103      	movs	r1, #3
    60a6:	6878      	ldr	r0, [r7, #4]
    60a8:	4b06      	ldr	r3, [pc, #24]	; (60c4 <hri_eic_get_CTRLA_reg+0x2c>)
    60aa:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	781b      	ldrb	r3, [r3, #0]
    60b0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    60b2:	7bfa      	ldrb	r2, [r7, #15]
    60b4:	78fb      	ldrb	r3, [r7, #3]
    60b6:	4013      	ands	r3, r2
    60b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    60ba:	7bfb      	ldrb	r3, [r7, #15]
}
    60bc:	4618      	mov	r0, r3
    60be:	3710      	adds	r7, #16
    60c0:	46bd      	mov	sp, r7
    60c2:	bd80      	pop	{r7, pc}
    60c4:	00005f45 	.word	0x00005f45

000060c8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    60c8:	b580      	push	{r7, lr}
    60ca:	b082      	sub	sp, #8
    60cc:	af00      	add	r7, sp, #0
    60ce:	6078      	str	r0, [r7, #4]
    60d0:	460b      	mov	r3, r1
    60d2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    60d4:	687b      	ldr	r3, [r7, #4]
    60d6:	78fa      	ldrb	r2, [r7, #3]
    60d8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    60da:	2103      	movs	r1, #3
    60dc:	6878      	ldr	r0, [r7, #4]
    60de:	4b03      	ldr	r3, [pc, #12]	; (60ec <hri_eic_write_CTRLA_reg+0x24>)
    60e0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    60e2:	bf00      	nop
    60e4:	3708      	adds	r7, #8
    60e6:	46bd      	mov	sp, r7
    60e8:	bd80      	pop	{r7, pc}
    60ea:	bf00      	nop
    60ec:	00005f45 	.word	0x00005f45

000060f0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    60f0:	b480      	push	{r7}
    60f2:	b083      	sub	sp, #12
    60f4:	af00      	add	r7, sp, #0
    60f6:	6078      	str	r0, [r7, #4]
    60f8:	460b      	mov	r3, r1
    60fa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	78fa      	ldrb	r2, [r7, #3]
    6100:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6102:	bf00      	nop
    6104:	370c      	adds	r7, #12
    6106:	46bd      	mov	sp, r7
    6108:	f85d 7b04 	ldr.w	r7, [sp], #4
    610c:	4770      	bx	lr

0000610e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    610e:	b480      	push	{r7}
    6110:	b083      	sub	sp, #12
    6112:	af00      	add	r7, sp, #0
    6114:	6078      	str	r0, [r7, #4]
    6116:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	683a      	ldr	r2, [r7, #0]
    611c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    611e:	bf00      	nop
    6120:	370c      	adds	r7, #12
    6122:	46bd      	mov	sp, r7
    6124:	f85d 7b04 	ldr.w	r7, [sp], #4
    6128:	4770      	bx	lr

0000612a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    612a:	b480      	push	{r7}
    612c:	b083      	sub	sp, #12
    612e:	af00      	add	r7, sp, #0
    6130:	6078      	str	r0, [r7, #4]
    6132:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	683a      	ldr	r2, [r7, #0]
    6138:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    613a:	bf00      	nop
    613c:	370c      	adds	r7, #12
    613e:	46bd      	mov	sp, r7
    6140:	f85d 7b04 	ldr.w	r7, [sp], #4
    6144:	4770      	bx	lr

00006146 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    6146:	b480      	push	{r7}
    6148:	b085      	sub	sp, #20
    614a:	af00      	add	r7, sp, #0
    614c:	60f8      	str	r0, [r7, #12]
    614e:	460b      	mov	r3, r1
    6150:	607a      	str	r2, [r7, #4]
    6152:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    6154:	7afb      	ldrb	r3, [r7, #11]
    6156:	68fa      	ldr	r2, [r7, #12]
    6158:	3306      	adds	r3, #6
    615a:	009b      	lsls	r3, r3, #2
    615c:	4413      	add	r3, r2
    615e:	687a      	ldr	r2, [r7, #4]
    6160:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6162:	bf00      	nop
    6164:	3714      	adds	r7, #20
    6166:	46bd      	mov	sp, r7
    6168:	f85d 7b04 	ldr.w	r7, [sp], #4
    616c:	4770      	bx	lr

0000616e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    616e:	b480      	push	{r7}
    6170:	b083      	sub	sp, #12
    6172:	af00      	add	r7, sp, #0
    6174:	6078      	str	r0, [r7, #4]
    6176:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	683a      	ldr	r2, [r7, #0]
    617c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    617e:	bf00      	nop
    6180:	370c      	adds	r7, #12
    6182:	46bd      	mov	sp, r7
    6184:	f85d 7b04 	ldr.w	r7, [sp], #4
    6188:	4770      	bx	lr

0000618a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    618a:	b480      	push	{r7}
    618c:	b083      	sub	sp, #12
    618e:	af00      	add	r7, sp, #0
    6190:	6078      	str	r0, [r7, #4]
    6192:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	683a      	ldr	r2, [r7, #0]
    6198:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    619a:	bf00      	nop
    619c:	370c      	adds	r7, #12
    619e:	46bd      	mov	sp, r7
    61a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    61a4:	4770      	bx	lr
	...

000061a8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    61a8:	b580      	push	{r7, lr}
    61aa:	b082      	sub	sp, #8
    61ac:	af00      	add	r7, sp, #0
    61ae:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    61b0:	2101      	movs	r1, #1
    61b2:	484f      	ldr	r0, [pc, #316]	; (62f0 <_ext_irq_init+0x148>)
    61b4:	4b4f      	ldr	r3, [pc, #316]	; (62f4 <_ext_irq_init+0x14c>)
    61b6:	4798      	blx	r3
    61b8:	4603      	mov	r3, r0
    61ba:	f083 0301 	eor.w	r3, r3, #1
    61be:	b2db      	uxtb	r3, r3
    61c0:	2b00      	cmp	r3, #0
    61c2:	d011      	beq.n	61e8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    61c4:	2102      	movs	r1, #2
    61c6:	484a      	ldr	r0, [pc, #296]	; (62f0 <_ext_irq_init+0x148>)
    61c8:	4b4b      	ldr	r3, [pc, #300]	; (62f8 <_ext_irq_init+0x150>)
    61ca:	4798      	blx	r3
    61cc:	4603      	mov	r3, r0
    61ce:	2b00      	cmp	r3, #0
    61d0:	d006      	beq.n	61e0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    61d2:	4847      	ldr	r0, [pc, #284]	; (62f0 <_ext_irq_init+0x148>)
    61d4:	4b49      	ldr	r3, [pc, #292]	; (62fc <_ext_irq_init+0x154>)
    61d6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    61d8:	2102      	movs	r1, #2
    61da:	4845      	ldr	r0, [pc, #276]	; (62f0 <_ext_irq_init+0x148>)
    61dc:	4b48      	ldr	r3, [pc, #288]	; (6300 <_ext_irq_init+0x158>)
    61de:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    61e0:	2101      	movs	r1, #1
    61e2:	4843      	ldr	r0, [pc, #268]	; (62f0 <_ext_irq_init+0x148>)
    61e4:	4b47      	ldr	r3, [pc, #284]	; (6304 <_ext_irq_init+0x15c>)
    61e6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    61e8:	2101      	movs	r1, #1
    61ea:	4841      	ldr	r0, [pc, #260]	; (62f0 <_ext_irq_init+0x148>)
    61ec:	4b44      	ldr	r3, [pc, #272]	; (6300 <_ext_irq_init+0x158>)
    61ee:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    61f0:	2100      	movs	r1, #0
    61f2:	483f      	ldr	r0, [pc, #252]	; (62f0 <_ext_irq_init+0x148>)
    61f4:	4b44      	ldr	r3, [pc, #272]	; (6308 <_ext_irq_init+0x160>)
    61f6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    61f8:	2100      	movs	r1, #0
    61fa:	483d      	ldr	r0, [pc, #244]	; (62f0 <_ext_irq_init+0x148>)
    61fc:	4b43      	ldr	r3, [pc, #268]	; (630c <_ext_irq_init+0x164>)
    61fe:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    6200:	2100      	movs	r1, #0
    6202:	483b      	ldr	r0, [pc, #236]	; (62f0 <_ext_irq_init+0x148>)
    6204:	4b42      	ldr	r3, [pc, #264]	; (6310 <_ext_irq_init+0x168>)
    6206:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6208:	f240 31bb 	movw	r1, #955	; 0x3bb
    620c:	4838      	ldr	r0, [pc, #224]	; (62f0 <_ext_irq_init+0x148>)
    620e:	4b41      	ldr	r3, [pc, #260]	; (6314 <_ext_irq_init+0x16c>)
    6210:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    6212:	f240 313b 	movw	r1, #827	; 0x33b
    6216:	4836      	ldr	r0, [pc, #216]	; (62f0 <_ext_irq_init+0x148>)
    6218:	4b3f      	ldr	r3, [pc, #252]	; (6318 <_ext_irq_init+0x170>)
    621a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    621c:	2100      	movs	r1, #0
    621e:	4834      	ldr	r0, [pc, #208]	; (62f0 <_ext_irq_init+0x148>)
    6220:	4b3e      	ldr	r3, [pc, #248]	; (631c <_ext_irq_init+0x174>)
    6222:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6224:	4a3e      	ldr	r2, [pc, #248]	; (6320 <_ext_irq_init+0x178>)
    6226:	2100      	movs	r1, #0
    6228:	4831      	ldr	r0, [pc, #196]	; (62f0 <_ext_irq_init+0x148>)
    622a:	4b3e      	ldr	r3, [pc, #248]	; (6324 <_ext_irq_init+0x17c>)
    622c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    622e:	2211      	movs	r2, #17
    6230:	2101      	movs	r1, #1
    6232:	482f      	ldr	r0, [pc, #188]	; (62f0 <_ext_irq_init+0x148>)
    6234:	4b3b      	ldr	r3, [pc, #236]	; (6324 <_ext_irq_init+0x17c>)
    6236:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6238:	482d      	ldr	r0, [pc, #180]	; (62f0 <_ext_irq_init+0x148>)
    623a:	4b3b      	ldr	r3, [pc, #236]	; (6328 <_ext_irq_init+0x180>)
    623c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    623e:	200c      	movs	r0, #12
    6240:	4b3a      	ldr	r3, [pc, #232]	; (632c <_ext_irq_init+0x184>)
    6242:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    6244:	200c      	movs	r0, #12
    6246:	4b3a      	ldr	r3, [pc, #232]	; (6330 <_ext_irq_init+0x188>)
    6248:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    624a:	200c      	movs	r0, #12
    624c:	4b39      	ldr	r3, [pc, #228]	; (6334 <_ext_irq_init+0x18c>)
    624e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    6250:	200d      	movs	r0, #13
    6252:	4b36      	ldr	r3, [pc, #216]	; (632c <_ext_irq_init+0x184>)
    6254:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    6256:	200d      	movs	r0, #13
    6258:	4b35      	ldr	r3, [pc, #212]	; (6330 <_ext_irq_init+0x188>)
    625a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    625c:	200d      	movs	r0, #13
    625e:	4b35      	ldr	r3, [pc, #212]	; (6334 <_ext_irq_init+0x18c>)
    6260:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    6262:	200f      	movs	r0, #15
    6264:	4b31      	ldr	r3, [pc, #196]	; (632c <_ext_irq_init+0x184>)
    6266:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    6268:	200f      	movs	r0, #15
    626a:	4b31      	ldr	r3, [pc, #196]	; (6330 <_ext_irq_init+0x188>)
    626c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    626e:	200f      	movs	r0, #15
    6270:	4b30      	ldr	r3, [pc, #192]	; (6334 <_ext_irq_init+0x18c>)
    6272:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6274:	2010      	movs	r0, #16
    6276:	4b2d      	ldr	r3, [pc, #180]	; (632c <_ext_irq_init+0x184>)
    6278:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    627a:	2010      	movs	r0, #16
    627c:	4b2c      	ldr	r3, [pc, #176]	; (6330 <_ext_irq_init+0x188>)
    627e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6280:	2010      	movs	r0, #16
    6282:	4b2c      	ldr	r3, [pc, #176]	; (6334 <_ext_irq_init+0x18c>)
    6284:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    6286:	2011      	movs	r0, #17
    6288:	4b28      	ldr	r3, [pc, #160]	; (632c <_ext_irq_init+0x184>)
    628a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    628c:	2011      	movs	r0, #17
    628e:	4b28      	ldr	r3, [pc, #160]	; (6330 <_ext_irq_init+0x188>)
    6290:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    6292:	2011      	movs	r0, #17
    6294:	4b27      	ldr	r3, [pc, #156]	; (6334 <_ext_irq_init+0x18c>)
    6296:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6298:	2012      	movs	r0, #18
    629a:	4b24      	ldr	r3, [pc, #144]	; (632c <_ext_irq_init+0x184>)
    629c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    629e:	2012      	movs	r0, #18
    62a0:	4b23      	ldr	r3, [pc, #140]	; (6330 <_ext_irq_init+0x188>)
    62a2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    62a4:	2012      	movs	r0, #18
    62a6:	4b23      	ldr	r3, [pc, #140]	; (6334 <_ext_irq_init+0x18c>)
    62a8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    62aa:	2013      	movs	r0, #19
    62ac:	4b1f      	ldr	r3, [pc, #124]	; (632c <_ext_irq_init+0x184>)
    62ae:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    62b0:	2013      	movs	r0, #19
    62b2:	4b1f      	ldr	r3, [pc, #124]	; (6330 <_ext_irq_init+0x188>)
    62b4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    62b6:	2013      	movs	r0, #19
    62b8:	4b1e      	ldr	r3, [pc, #120]	; (6334 <_ext_irq_init+0x18c>)
    62ba:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    62bc:	2014      	movs	r0, #20
    62be:	4b1b      	ldr	r3, [pc, #108]	; (632c <_ext_irq_init+0x184>)
    62c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    62c2:	2014      	movs	r0, #20
    62c4:	4b1a      	ldr	r3, [pc, #104]	; (6330 <_ext_irq_init+0x188>)
    62c6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    62c8:	2014      	movs	r0, #20
    62ca:	4b1a      	ldr	r3, [pc, #104]	; (6334 <_ext_irq_init+0x18c>)
    62cc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    62ce:	2015      	movs	r0, #21
    62d0:	4b16      	ldr	r3, [pc, #88]	; (632c <_ext_irq_init+0x184>)
    62d2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    62d4:	2015      	movs	r0, #21
    62d6:	4b16      	ldr	r3, [pc, #88]	; (6330 <_ext_irq_init+0x188>)
    62d8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    62da:	2015      	movs	r0, #21
    62dc:	4b15      	ldr	r3, [pc, #84]	; (6334 <_ext_irq_init+0x18c>)
    62de:	4798      	blx	r3

	callback = cb;
    62e0:	4a15      	ldr	r2, [pc, #84]	; (6338 <_ext_irq_init+0x190>)
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    62e6:	2300      	movs	r3, #0
}
    62e8:	4618      	mov	r0, r3
    62ea:	3708      	adds	r7, #8
    62ec:	46bd      	mov	sp, r7
    62ee:	bd80      	pop	{r7, pc}
    62f0:	40002800 	.word	0x40002800
    62f4:	00005f69 	.word	0x00005f69
    62f8:	00006099 	.word	0x00006099
    62fc:	00006029 	.word	0x00006029
    6300:	00005f45 	.word	0x00005f45
    6304:	000060c9 	.word	0x000060c9
    6308:	00006055 	.word	0x00006055
    630c:	000060f1 	.word	0x000060f1
    6310:	0000610f 	.word	0x0000610f
    6314:	0000612b 	.word	0x0000612b
    6318:	0000616f 	.word	0x0000616f
    631c:	0000618b 	.word	0x0000618b
    6320:	90999013 	.word	0x90999013
    6324:	00006147 	.word	0x00006147
    6328:	00005ffd 	.word	0x00005ffd
    632c:	00005ec5 	.word	0x00005ec5
    6330:	00005f09 	.word	0x00005f09
    6334:	00005e89 	.word	0x00005e89
    6338:	2000230c 	.word	0x2000230c

0000633c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    633c:	b580      	push	{r7, lr}
    633e:	b084      	sub	sp, #16
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
    6344:	460b      	mov	r3, r1
    6346:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    6348:	23ff      	movs	r3, #255	; 0xff
    634a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    634c:	2300      	movs	r3, #0
    634e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    6350:	e010      	b.n	6374 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    6352:	7bbb      	ldrb	r3, [r7, #14]
    6354:	4a1c      	ldr	r2, [pc, #112]	; (63c8 <_ext_irq_enable+0x8c>)
    6356:	00db      	lsls	r3, r3, #3
    6358:	4413      	add	r3, r2
    635a:	685a      	ldr	r2, [r3, #4]
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	429a      	cmp	r2, r3
    6360:	d105      	bne.n	636e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    6362:	7bbb      	ldrb	r3, [r7, #14]
    6364:	4a18      	ldr	r2, [pc, #96]	; (63c8 <_ext_irq_enable+0x8c>)
    6366:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    636a:	73fb      	strb	r3, [r7, #15]
			break;
    636c:	e005      	b.n	637a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    636e:	7bbb      	ldrb	r3, [r7, #14]
    6370:	3301      	adds	r3, #1
    6372:	73bb      	strb	r3, [r7, #14]
    6374:	7bbb      	ldrb	r3, [r7, #14]
    6376:	2b08      	cmp	r3, #8
    6378:	d9eb      	bls.n	6352 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    637a:	7bfb      	ldrb	r3, [r7, #15]
    637c:	2bff      	cmp	r3, #255	; 0xff
    637e:	d102      	bne.n	6386 <_ext_irq_enable+0x4a>
		return -1;
    6380:	f04f 33ff 	mov.w	r3, #4294967295
    6384:	e01c      	b.n	63c0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    6386:	78fb      	ldrb	r3, [r7, #3]
    6388:	2b00      	cmp	r3, #0
    638a:	d008      	beq.n	639e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    638c:	7bfb      	ldrb	r3, [r7, #15]
    638e:	2201      	movs	r2, #1
    6390:	fa02 f303 	lsl.w	r3, r2, r3
    6394:	4619      	mov	r1, r3
    6396:	480d      	ldr	r0, [pc, #52]	; (63cc <_ext_irq_enable+0x90>)
    6398:	4b0d      	ldr	r3, [pc, #52]	; (63d0 <_ext_irq_enable+0x94>)
    639a:	4798      	blx	r3
    639c:	e00f      	b.n	63be <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    639e:	7bfb      	ldrb	r3, [r7, #15]
    63a0:	2201      	movs	r2, #1
    63a2:	fa02 f303 	lsl.w	r3, r2, r3
    63a6:	4619      	mov	r1, r3
    63a8:	4808      	ldr	r0, [pc, #32]	; (63cc <_ext_irq_enable+0x90>)
    63aa:	4b0a      	ldr	r3, [pc, #40]	; (63d4 <_ext_irq_enable+0x98>)
    63ac:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    63ae:	7bfb      	ldrb	r3, [r7, #15]
    63b0:	2201      	movs	r2, #1
    63b2:	fa02 f303 	lsl.w	r3, r2, r3
    63b6:	4619      	mov	r1, r3
    63b8:	4804      	ldr	r0, [pc, #16]	; (63cc <_ext_irq_enable+0x90>)
    63ba:	4b07      	ldr	r3, [pc, #28]	; (63d8 <_ext_irq_enable+0x9c>)
    63bc:	4798      	blx	r3
	}

	return ERR_NONE;
    63be:	2300      	movs	r3, #0
}
    63c0:	4618      	mov	r0, r3
    63c2:	3710      	adds	r7, #16
    63c4:	46bd      	mov	sp, r7
    63c6:	bd80      	pop	{r7, pc}
    63c8:	0001ac08 	.word	0x0001ac08
    63cc:	40002800 	.word	0x40002800
    63d0:	00005fc5 	.word	0x00005fc5
    63d4:	00005fe1 	.word	0x00005fe1
    63d8:	00005fa9 	.word	0x00005fa9

000063dc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    63dc:	b580      	push	{r7, lr}
    63de:	b084      	sub	sp, #16
    63e0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    63e2:	4841      	ldr	r0, [pc, #260]	; (64e8 <_ext_irq_handler+0x10c>)
    63e4:	4b41      	ldr	r3, [pc, #260]	; (64ec <_ext_irq_handler+0x110>)
    63e6:	4798      	blx	r3
    63e8:	4603      	mov	r3, r0
    63ea:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    63ec:	f04f 33ff 	mov.w	r3, #4294967295
    63f0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    63f2:	683b      	ldr	r3, [r7, #0]
    63f4:	4619      	mov	r1, r3
    63f6:	483c      	ldr	r0, [pc, #240]	; (64e8 <_ext_irq_handler+0x10c>)
    63f8:	4b3d      	ldr	r3, [pc, #244]	; (64f0 <_ext_irq_handler+0x114>)
    63fa:	4798      	blx	r3

	ASSERT(callback);
    63fc:	4b3d      	ldr	r3, [pc, #244]	; (64f4 <_ext_irq_handler+0x118>)
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	2b00      	cmp	r3, #0
    6402:	bf14      	ite	ne
    6404:	2301      	movne	r3, #1
    6406:	2300      	moveq	r3, #0
    6408:	b2db      	uxtb	r3, r3
    640a:	f44f 7284 	mov.w	r2, #264	; 0x108
    640e:	493a      	ldr	r1, [pc, #232]	; (64f8 <_ext_irq_handler+0x11c>)
    6410:	4618      	mov	r0, r3
    6412:	4b3a      	ldr	r3, [pc, #232]	; (64fc <_ext_irq_handler+0x120>)
    6414:	4798      	blx	r3

	while (flags) {
    6416:	e060      	b.n	64da <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    6418:	683b      	ldr	r3, [r7, #0]
    641a:	4618      	mov	r0, r3
    641c:	4b38      	ldr	r3, [pc, #224]	; (6500 <_ext_irq_handler+0x124>)
    641e:	4798      	blx	r3
    6420:	4603      	mov	r3, r0
    6422:	b2db      	uxtb	r3, r3
    6424:	3b01      	subs	r3, #1
    6426:	b2db      	uxtb	r3, r3
    6428:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    642a:	e047      	b.n	64bc <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    642c:	2300      	movs	r3, #0
    642e:	71fb      	strb	r3, [r7, #7]
    6430:	2309      	movs	r3, #9
    6432:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    6434:	e024      	b.n	6480 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    6436:	79ba      	ldrb	r2, [r7, #6]
    6438:	79fb      	ldrb	r3, [r7, #7]
    643a:	4413      	add	r3, r2
    643c:	105b      	asrs	r3, r3, #1
    643e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    6440:	797b      	ldrb	r3, [r7, #5]
    6442:	4a30      	ldr	r2, [pc, #192]	; (6504 <_ext_irq_handler+0x128>)
    6444:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6448:	461a      	mov	r2, r3
    644a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    644e:	429a      	cmp	r2, r3
    6450:	d106      	bne.n	6460 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    6452:	797b      	ldrb	r3, [r7, #5]
    6454:	4a2b      	ldr	r2, [pc, #172]	; (6504 <_ext_irq_handler+0x128>)
    6456:	00db      	lsls	r3, r3, #3
    6458:	4413      	add	r3, r2
    645a:	685b      	ldr	r3, [r3, #4]
    645c:	60bb      	str	r3, [r7, #8]
					break;
    645e:	e013      	b.n	6488 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    6460:	797b      	ldrb	r3, [r7, #5]
    6462:	4a28      	ldr	r2, [pc, #160]	; (6504 <_ext_irq_handler+0x128>)
    6464:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6468:	461a      	mov	r2, r3
    646a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    646e:	429a      	cmp	r2, r3
    6470:	da03      	bge.n	647a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    6472:	797b      	ldrb	r3, [r7, #5]
    6474:	3301      	adds	r3, #1
    6476:	71fb      	strb	r3, [r7, #7]
    6478:	e002      	b.n	6480 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    647a:	797b      	ldrb	r3, [r7, #5]
    647c:	3b01      	subs	r3, #1
    647e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    6480:	79ba      	ldrb	r2, [r7, #6]
    6482:	79fb      	ldrb	r3, [r7, #7]
    6484:	429a      	cmp	r2, r3
    6486:	d2d6      	bcs.n	6436 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    6488:	68bb      	ldr	r3, [r7, #8]
    648a:	f1b3 3fff 	cmp.w	r3, #4294967295
    648e:	d003      	beq.n	6498 <_ext_irq_handler+0xbc>
				callback(pin);
    6490:	4b18      	ldr	r3, [pc, #96]	; (64f4 <_ext_irq_handler+0x118>)
    6492:	681b      	ldr	r3, [r3, #0]
    6494:	68b8      	ldr	r0, [r7, #8]
    6496:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    6498:	f997 300f 	ldrsb.w	r3, [r7, #15]
    649c:	2201      	movs	r2, #1
    649e:	fa02 f303 	lsl.w	r3, r2, r3
    64a2:	43da      	mvns	r2, r3
    64a4:	683b      	ldr	r3, [r7, #0]
    64a6:	4013      	ands	r3, r2
    64a8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    64aa:	683b      	ldr	r3, [r7, #0]
    64ac:	4618      	mov	r0, r3
    64ae:	4b14      	ldr	r3, [pc, #80]	; (6500 <_ext_irq_handler+0x124>)
    64b0:	4798      	blx	r3
    64b2:	4603      	mov	r3, r0
    64b4:	b2db      	uxtb	r3, r3
    64b6:	3b01      	subs	r3, #1
    64b8:	b2db      	uxtb	r3, r3
    64ba:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    64bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    64c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    64c4:	d1b2      	bne.n	642c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    64c6:	4808      	ldr	r0, [pc, #32]	; (64e8 <_ext_irq_handler+0x10c>)
    64c8:	4b08      	ldr	r3, [pc, #32]	; (64ec <_ext_irq_handler+0x110>)
    64ca:	4798      	blx	r3
    64cc:	4603      	mov	r3, r0
    64ce:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    64d0:	683b      	ldr	r3, [r7, #0]
    64d2:	4619      	mov	r1, r3
    64d4:	4804      	ldr	r0, [pc, #16]	; (64e8 <_ext_irq_handler+0x10c>)
    64d6:	4b06      	ldr	r3, [pc, #24]	; (64f0 <_ext_irq_handler+0x114>)
    64d8:	4798      	blx	r3
	while (flags) {
    64da:	683b      	ldr	r3, [r7, #0]
    64dc:	2b00      	cmp	r3, #0
    64de:	d19b      	bne.n	6418 <_ext_irq_handler+0x3c>
	}
}
    64e0:	bf00      	nop
    64e2:	3710      	adds	r7, #16
    64e4:	46bd      	mov	sp, r7
    64e6:	bd80      	pop	{r7, pc}
    64e8:	40002800 	.word	0x40002800
    64ec:	00005f91 	.word	0x00005f91
    64f0:	00005fa9 	.word	0x00005fa9
    64f4:	2000230c 	.word	0x2000230c
    64f8:	0001ac50 	.word	0x0001ac50
    64fc:	00004bbd 	.word	0x00004bbd
    6500:	0001a4cd 	.word	0x0001a4cd
    6504:	0001ac08 	.word	0x0001ac08

00006508 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    6508:	b580      	push	{r7, lr}
    650a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    650c:	4b01      	ldr	r3, [pc, #4]	; (6514 <EIC_0_Handler+0xc>)
    650e:	4798      	blx	r3
} /**
    6510:	bf00      	nop
    6512:	bd80      	pop	{r7, pc}
    6514:	000063dd 	.word	0x000063dd

00006518 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    6518:	b580      	push	{r7, lr}
    651a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    651c:	4b01      	ldr	r3, [pc, #4]	; (6524 <EIC_1_Handler+0xc>)
    651e:	4798      	blx	r3
} /**
    6520:	bf00      	nop
    6522:	bd80      	pop	{r7, pc}
    6524:	000063dd 	.word	0x000063dd

00006528 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    6528:	b580      	push	{r7, lr}
    652a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    652c:	4b01      	ldr	r3, [pc, #4]	; (6534 <EIC_3_Handler+0xc>)
    652e:	4798      	blx	r3
} /**
    6530:	bf00      	nop
    6532:	bd80      	pop	{r7, pc}
    6534:	000063dd 	.word	0x000063dd

00006538 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    6538:	b580      	push	{r7, lr}
    653a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    653c:	4b01      	ldr	r3, [pc, #4]	; (6544 <EIC_4_Handler+0xc>)
    653e:	4798      	blx	r3
} /**
    6540:	bf00      	nop
    6542:	bd80      	pop	{r7, pc}
    6544:	000063dd 	.word	0x000063dd

00006548 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    6548:	b580      	push	{r7, lr}
    654a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    654c:	4b01      	ldr	r3, [pc, #4]	; (6554 <EIC_5_Handler+0xc>)
    654e:	4798      	blx	r3
} /**
    6550:	bf00      	nop
    6552:	bd80      	pop	{r7, pc}
    6554:	000063dd 	.word	0x000063dd

00006558 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    6558:	b580      	push	{r7, lr}
    655a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    655c:	4b01      	ldr	r3, [pc, #4]	; (6564 <EIC_6_Handler+0xc>)
    655e:	4798      	blx	r3
} /**
    6560:	bf00      	nop
    6562:	bd80      	pop	{r7, pc}
    6564:	000063dd 	.word	0x000063dd

00006568 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    6568:	b580      	push	{r7, lr}
    656a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    656c:	4b01      	ldr	r3, [pc, #4]	; (6574 <EIC_7_Handler+0xc>)
    656e:	4798      	blx	r3
} /**
    6570:	bf00      	nop
    6572:	bd80      	pop	{r7, pc}
    6574:	000063dd 	.word	0x000063dd

00006578 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    6578:	b580      	push	{r7, lr}
    657a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    657c:	4b01      	ldr	r3, [pc, #4]	; (6584 <EIC_8_Handler+0xc>)
    657e:	4798      	blx	r3
} /**
    6580:	bf00      	nop
    6582:	bd80      	pop	{r7, pc}
    6584:	000063dd 	.word	0x000063dd

00006588 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    6588:	b580      	push	{r7, lr}
    658a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    658c:	4b01      	ldr	r3, [pc, #4]	; (6594 <EIC_9_Handler+0xc>)
    658e:	4798      	blx	r3
}
    6590:	bf00      	nop
    6592:	bd80      	pop	{r7, pc}
    6594:	000063dd 	.word	0x000063dd

00006598 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    6598:	b480      	push	{r7}
    659a:	b085      	sub	sp, #20
    659c:	af00      	add	r7, sp, #0
    659e:	60f8      	str	r0, [r7, #12]
    65a0:	460b      	mov	r3, r1
    65a2:	607a      	str	r2, [r7, #4]
    65a4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    65a6:	7afa      	ldrb	r2, [r7, #11]
    65a8:	68fb      	ldr	r3, [r7, #12]
    65aa:	3248      	adds	r2, #72	; 0x48
    65ac:	6879      	ldr	r1, [r7, #4]
    65ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    65b2:	bf00      	nop
    65b4:	3714      	adds	r7, #20
    65b6:	46bd      	mov	sp, r7
    65b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    65bc:	4770      	bx	lr

000065be <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    65be:	b480      	push	{r7}
    65c0:	b083      	sub	sp, #12
    65c2:	af00      	add	r7, sp, #0
    65c4:	6078      	str	r0, [r7, #4]
    65c6:	460b      	mov	r3, r1
    65c8:	70fb      	strb	r3, [r7, #3]
    65ca:	4613      	mov	r3, r2
    65cc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    65ce:	78fb      	ldrb	r3, [r7, #3]
    65d0:	687a      	ldr	r2, [r7, #4]
    65d2:	3304      	adds	r3, #4
    65d4:	00db      	lsls	r3, r3, #3
    65d6:	4413      	add	r3, r2
    65d8:	78ba      	ldrb	r2, [r7, #2]
    65da:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    65dc:	78fb      	ldrb	r3, [r7, #3]
    65de:	78ba      	ldrb	r2, [r7, #2]
    65e0:	43d2      	mvns	r2, r2
    65e2:	b2d1      	uxtb	r1, r2
    65e4:	687a      	ldr	r2, [r7, #4]
    65e6:	3304      	adds	r3, #4
    65e8:	00db      	lsls	r3, r3, #3
    65ea:	4413      	add	r3, r2
    65ec:	460a      	mov	r2, r1
    65ee:	711a      	strb	r2, [r3, #4]
}
    65f0:	bf00      	nop
    65f2:	370c      	adds	r7, #12
    65f4:	46bd      	mov	sp, r7
    65f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fa:	4770      	bx	lr

000065fc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    65fc:	b480      	push	{r7}
    65fe:	b085      	sub	sp, #20
    6600:	af00      	add	r7, sp, #0
    6602:	60f8      	str	r0, [r7, #12]
    6604:	460b      	mov	r3, r1
    6606:	607a      	str	r2, [r7, #4]
    6608:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    660a:	7afa      	ldrb	r2, [r7, #11]
    660c:	68fb      	ldr	r3, [r7, #12]
    660e:	3204      	adds	r2, #4
    6610:	6879      	ldr	r1, [r7, #4]
    6612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6616:	bf00      	nop
    6618:	3714      	adds	r7, #20
    661a:	46bd      	mov	sp, r7
    661c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6620:	4770      	bx	lr
	...

00006624 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6624:	b580      	push	{r7, lr}
    6626:	b082      	sub	sp, #8
    6628:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    662a:	2300      	movs	r3, #0
    662c:	71fb      	strb	r3, [r7, #7]
    662e:	e00b      	b.n	6648 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6630:	79fb      	ldrb	r3, [r7, #7]
    6632:	4a18      	ldr	r2, [pc, #96]	; (6694 <_event_system_init+0x70>)
    6634:	5cd3      	ldrb	r3, [r2, r3]
    6636:	461a      	mov	r2, r3
    6638:	79fb      	ldrb	r3, [r7, #7]
    663a:	4619      	mov	r1, r3
    663c:	4816      	ldr	r0, [pc, #88]	; (6698 <_event_system_init+0x74>)
    663e:	4b17      	ldr	r3, [pc, #92]	; (669c <_event_system_init+0x78>)
    6640:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    6642:	79fb      	ldrb	r3, [r7, #7]
    6644:	3301      	adds	r3, #1
    6646:	71fb      	strb	r3, [r7, #7]
    6648:	79fb      	ldrb	r3, [r7, #7]
    664a:	2b42      	cmp	r3, #66	; 0x42
    664c:	d9f0      	bls.n	6630 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    664e:	2300      	movs	r3, #0
    6650:	71fb      	strb	r3, [r7, #7]
    6652:	e016      	b.n	6682 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6654:	79fb      	ldrb	r3, [r7, #7]
    6656:	4a12      	ldr	r2, [pc, #72]	; (66a0 <_event_system_init+0x7c>)
    6658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    665c:	461a      	mov	r2, r3
    665e:	79fb      	ldrb	r3, [r7, #7]
    6660:	4619      	mov	r1, r3
    6662:	480d      	ldr	r0, [pc, #52]	; (6698 <_event_system_init+0x74>)
    6664:	4b0f      	ldr	r3, [pc, #60]	; (66a4 <_event_system_init+0x80>)
    6666:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6668:	79fb      	ldrb	r3, [r7, #7]
    666a:	4a0f      	ldr	r2, [pc, #60]	; (66a8 <_event_system_init+0x84>)
    666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6670:	b2da      	uxtb	r2, r3
    6672:	79fb      	ldrb	r3, [r7, #7]
    6674:	4619      	mov	r1, r3
    6676:	4808      	ldr	r0, [pc, #32]	; (6698 <_event_system_init+0x74>)
    6678:	4b0c      	ldr	r3, [pc, #48]	; (66ac <_event_system_init+0x88>)
    667a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    667c:	79fb      	ldrb	r3, [r7, #7]
    667e:	3301      	adds	r3, #1
    6680:	71fb      	strb	r3, [r7, #7]
    6682:	79fb      	ldrb	r3, [r7, #7]
    6684:	2b1f      	cmp	r3, #31
    6686:	d9e5      	bls.n	6654 <_event_system_init+0x30>
	}

	return ERR_NONE;
    6688:	2300      	movs	r3, #0
}
    668a:	4618      	mov	r0, r3
    668c:	3708      	adds	r7, #8
    668e:	46bd      	mov	sp, r7
    6690:	bd80      	pop	{r7, pc}
    6692:	bf00      	nop
    6694:	0001ac68 	.word	0x0001ac68
    6698:	4100e000 	.word	0x4100e000
    669c:	00006599 	.word	0x00006599
    66a0:	0001acac 	.word	0x0001acac
    66a4:	000065fd 	.word	0x000065fd
    66a8:	0001acec 	.word	0x0001acec
    66ac:	000065bf 	.word	0x000065bf

000066b0 <hri_gclk_wait_for_sync>:
{
    66b0:	b480      	push	{r7}
    66b2:	b083      	sub	sp, #12
    66b4:	af00      	add	r7, sp, #0
    66b6:	6078      	str	r0, [r7, #4]
    66b8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    66ba:	bf00      	nop
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	685a      	ldr	r2, [r3, #4]
    66c0:	683b      	ldr	r3, [r7, #0]
    66c2:	4013      	ands	r3, r2
    66c4:	2b00      	cmp	r3, #0
    66c6:	d1f9      	bne.n	66bc <hri_gclk_wait_for_sync+0xc>
}
    66c8:	bf00      	nop
    66ca:	370c      	adds	r7, #12
    66cc:	46bd      	mov	sp, r7
    66ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d2:	4770      	bx	lr

000066d4 <hri_gclk_write_GENCTRL_reg>:
{
    66d4:	b580      	push	{r7, lr}
    66d6:	b084      	sub	sp, #16
    66d8:	af00      	add	r7, sp, #0
    66da:	60f8      	str	r0, [r7, #12]
    66dc:	460b      	mov	r3, r1
    66de:	607a      	str	r2, [r7, #4]
    66e0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    66e2:	7afa      	ldrb	r2, [r7, #11]
    66e4:	68fb      	ldr	r3, [r7, #12]
    66e6:	3208      	adds	r2, #8
    66e8:	6879      	ldr	r1, [r7, #4]
    66ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    66ee:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    66f2:	68f8      	ldr	r0, [r7, #12]
    66f4:	4b02      	ldr	r3, [pc, #8]	; (6700 <hri_gclk_write_GENCTRL_reg+0x2c>)
    66f6:	4798      	blx	r3
}
    66f8:	bf00      	nop
    66fa:	3710      	adds	r7, #16
    66fc:	46bd      	mov	sp, r7
    66fe:	bd80      	pop	{r7, pc}
    6700:	000066b1 	.word	0x000066b1

00006704 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6704:	b580      	push	{r7, lr}
    6706:	b082      	sub	sp, #8
    6708:	af00      	add	r7, sp, #0
    670a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	f003 0301 	and.w	r3, r3, #1
    6712:	2b00      	cmp	r3, #0
    6714:	d004      	beq.n	6720 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    6716:	4a3b      	ldr	r2, [pc, #236]	; (6804 <_gclk_init_generators_by_fref+0x100>)
    6718:	2100      	movs	r1, #0
    671a:	483b      	ldr	r0, [pc, #236]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    671c:	4b3b      	ldr	r3, [pc, #236]	; (680c <_gclk_init_generators_by_fref+0x108>)
    671e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	f003 0302 	and.w	r3, r3, #2
    6726:	2b00      	cmp	r3, #0
    6728:	d004      	beq.n	6734 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    672a:	4a39      	ldr	r2, [pc, #228]	; (6810 <_gclk_init_generators_by_fref+0x10c>)
    672c:	2101      	movs	r1, #1
    672e:	4836      	ldr	r0, [pc, #216]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    6730:	4b36      	ldr	r3, [pc, #216]	; (680c <_gclk_init_generators_by_fref+0x108>)
    6732:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	f003 0304 	and.w	r3, r3, #4
    673a:	2b00      	cmp	r3, #0
    673c:	d004      	beq.n	6748 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    673e:	4a35      	ldr	r2, [pc, #212]	; (6814 <_gclk_init_generators_by_fref+0x110>)
    6740:	2102      	movs	r1, #2
    6742:	4831      	ldr	r0, [pc, #196]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    6744:	4b31      	ldr	r3, [pc, #196]	; (680c <_gclk_init_generators_by_fref+0x108>)
    6746:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	f003 0308 	and.w	r3, r3, #8
    674e:	2b00      	cmp	r3, #0
    6750:	d004      	beq.n	675c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    6752:	4a31      	ldr	r2, [pc, #196]	; (6818 <_gclk_init_generators_by_fref+0x114>)
    6754:	2103      	movs	r1, #3
    6756:	482c      	ldr	r0, [pc, #176]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    6758:	4b2c      	ldr	r3, [pc, #176]	; (680c <_gclk_init_generators_by_fref+0x108>)
    675a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	f003 0310 	and.w	r3, r3, #16
    6762:	2b00      	cmp	r3, #0
    6764:	d004      	beq.n	6770 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    6766:	4a2d      	ldr	r2, [pc, #180]	; (681c <_gclk_init_generators_by_fref+0x118>)
    6768:	2104      	movs	r1, #4
    676a:	4827      	ldr	r0, [pc, #156]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    676c:	4b27      	ldr	r3, [pc, #156]	; (680c <_gclk_init_generators_by_fref+0x108>)
    676e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	f003 0320 	and.w	r3, r3, #32
    6776:	2b00      	cmp	r3, #0
    6778:	d004      	beq.n	6784 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    677a:	4a29      	ldr	r2, [pc, #164]	; (6820 <_gclk_init_generators_by_fref+0x11c>)
    677c:	2105      	movs	r1, #5
    677e:	4822      	ldr	r0, [pc, #136]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    6780:	4b22      	ldr	r3, [pc, #136]	; (680c <_gclk_init_generators_by_fref+0x108>)
    6782:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	f003 0340 	and.w	r3, r3, #64	; 0x40
    678a:	2b00      	cmp	r3, #0
    678c:	d004      	beq.n	6798 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    678e:	4a25      	ldr	r2, [pc, #148]	; (6824 <_gclk_init_generators_by_fref+0x120>)
    6790:	2106      	movs	r1, #6
    6792:	481d      	ldr	r0, [pc, #116]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    6794:	4b1d      	ldr	r3, [pc, #116]	; (680c <_gclk_init_generators_by_fref+0x108>)
    6796:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    6798:	687b      	ldr	r3, [r7, #4]
    679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    679e:	2b00      	cmp	r3, #0
    67a0:	d004      	beq.n	67ac <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    67a2:	4a21      	ldr	r2, [pc, #132]	; (6828 <_gclk_init_generators_by_fref+0x124>)
    67a4:	2107      	movs	r1, #7
    67a6:	4818      	ldr	r0, [pc, #96]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    67a8:	4b18      	ldr	r3, [pc, #96]	; (680c <_gclk_init_generators_by_fref+0x108>)
    67aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
    67b2:	2b00      	cmp	r3, #0
    67b4:	d004      	beq.n	67c0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    67b6:	4a1d      	ldr	r2, [pc, #116]	; (682c <_gclk_init_generators_by_fref+0x128>)
    67b8:	2108      	movs	r1, #8
    67ba:	4813      	ldr	r0, [pc, #76]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    67bc:	4b13      	ldr	r3, [pc, #76]	; (680c <_gclk_init_generators_by_fref+0x108>)
    67be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    67c6:	2b00      	cmp	r3, #0
    67c8:	d004      	beq.n	67d4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    67ca:	4a19      	ldr	r2, [pc, #100]	; (6830 <_gclk_init_generators_by_fref+0x12c>)
    67cc:	2109      	movs	r1, #9
    67ce:	480e      	ldr	r0, [pc, #56]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    67d0:	4b0e      	ldr	r3, [pc, #56]	; (680c <_gclk_init_generators_by_fref+0x108>)
    67d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    67da:	2b00      	cmp	r3, #0
    67dc:	d004      	beq.n	67e8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    67de:	4a15      	ldr	r2, [pc, #84]	; (6834 <_gclk_init_generators_by_fref+0x130>)
    67e0:	210a      	movs	r1, #10
    67e2:	4809      	ldr	r0, [pc, #36]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    67e4:	4b09      	ldr	r3, [pc, #36]	; (680c <_gclk_init_generators_by_fref+0x108>)
    67e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    67ee:	2b00      	cmp	r3, #0
    67f0:	d004      	beq.n	67fc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    67f2:	4a11      	ldr	r2, [pc, #68]	; (6838 <_gclk_init_generators_by_fref+0x134>)
    67f4:	210b      	movs	r1, #11
    67f6:	4804      	ldr	r0, [pc, #16]	; (6808 <_gclk_init_generators_by_fref+0x104>)
    67f8:	4b04      	ldr	r3, [pc, #16]	; (680c <_gclk_init_generators_by_fref+0x108>)
    67fa:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    67fc:	bf00      	nop
    67fe:	3708      	adds	r7, #8
    6800:	46bd      	mov	sp, r7
    6802:	bd80      	pop	{r7, pc}
    6804:	00010107 	.word	0x00010107
    6808:	40001c00 	.word	0x40001c00
    680c:	000066d5 	.word	0x000066d5
    6810:	00010907 	.word	0x00010907
    6814:	00010906 	.word	0x00010906
    6818:	00020908 	.word	0x00020908
    681c:	00010901 	.word	0x00010901
    6820:	00062901 	.word	0x00062901
    6824:	000c2901 	.word	0x000c2901
    6828:	00082908 	.word	0x00082908
    682c:	00032901 	.word	0x00032901
    6830:	00011908 	.word	0x00011908
    6834:	00010905 	.word	0x00010905
    6838:	00041905 	.word	0x00041905

0000683c <hri_mclk_write_CPUDIV_reg>:
{
    683c:	b480      	push	{r7}
    683e:	b083      	sub	sp, #12
    6840:	af00      	add	r7, sp, #0
    6842:	6078      	str	r0, [r7, #4]
    6844:	460b      	mov	r3, r1
    6846:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    6848:	687b      	ldr	r3, [r7, #4]
    684a:	78fa      	ldrb	r2, [r7, #3]
    684c:	715a      	strb	r2, [r3, #5]
}
    684e:	bf00      	nop
    6850:	370c      	adds	r7, #12
    6852:	46bd      	mov	sp, r7
    6854:	f85d 7b04 	ldr.w	r7, [sp], #4
    6858:	4770      	bx	lr
	...

0000685c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    685c:	b580      	push	{r7, lr}
    685e:	b082      	sub	sp, #8
    6860:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    6862:	4b05      	ldr	r3, [pc, #20]	; (6878 <_mclk_init+0x1c>)
    6864:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    6866:	2101      	movs	r1, #1
    6868:	6878      	ldr	r0, [r7, #4]
    686a:	4b04      	ldr	r3, [pc, #16]	; (687c <_mclk_init+0x20>)
    686c:	4798      	blx	r3
}
    686e:	bf00      	nop
    6870:	3708      	adds	r7, #8
    6872:	46bd      	mov	sp, r7
    6874:	bd80      	pop	{r7, pc}
    6876:	bf00      	nop
    6878:	40000800 	.word	0x40000800
    687c:	0000683d 	.word	0x0000683d

00006880 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    6880:	b480      	push	{r7}
    6882:	b083      	sub	sp, #12
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
    6888:	460b      	mov	r3, r1
    688a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	78fa      	ldrb	r2, [r7, #3]
    6890:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6892:	bf00      	nop
    6894:	370c      	adds	r7, #12
    6896:	46bd      	mov	sp, r7
    6898:	f85d 7b04 	ldr.w	r7, [sp], #4
    689c:	4770      	bx	lr

0000689e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    689e:	b480      	push	{r7}
    68a0:	b083      	sub	sp, #12
    68a2:	af00      	add	r7, sp, #0
    68a4:	6078      	str	r0, [r7, #4]
    68a6:	460b      	mov	r3, r1
    68a8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    68aa:	687b      	ldr	r3, [r7, #4]
    68ac:	887a      	ldrh	r2, [r7, #2]
    68ae:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    68b0:	bf00      	nop
    68b2:	370c      	adds	r7, #12
    68b4:	46bd      	mov	sp, r7
    68b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ba:	4770      	bx	lr

000068bc <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    68bc:	b480      	push	{r7}
    68be:	b083      	sub	sp, #12
    68c0:	af00      	add	r7, sp, #0
    68c2:	6078      	str	r0, [r7, #4]
    68c4:	460b      	mov	r3, r1
    68c6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	78fa      	ldrb	r2, [r7, #3]
    68cc:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    68ce:	bf00      	nop
    68d0:	370c      	adds	r7, #12
    68d2:	46bd      	mov	sp, r7
    68d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    68d8:	4770      	bx	lr

000068da <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    68da:	b480      	push	{r7}
    68dc:	b083      	sub	sp, #12
    68de:	af00      	add	r7, sp, #0
    68e0:	6078      	str	r0, [r7, #4]
    68e2:	460b      	mov	r3, r1
    68e4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	78fa      	ldrb	r2, [r7, #3]
    68ea:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    68ec:	bf00      	nop
    68ee:	370c      	adds	r7, #12
    68f0:	46bd      	mov	sp, r7
    68f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    68f6:	4770      	bx	lr

000068f8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    68f8:	b480      	push	{r7}
    68fa:	b085      	sub	sp, #20
    68fc:	af00      	add	r7, sp, #0
    68fe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	69db      	ldr	r3, [r3, #28]
    6904:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    6906:	68fb      	ldr	r3, [r7, #12]
    6908:	0a1b      	lsrs	r3, r3, #8
    690a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    690e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6910:	68fb      	ldr	r3, [r7, #12]
}
    6912:	4618      	mov	r0, r3
    6914:	3714      	adds	r7, #20
    6916:	46bd      	mov	sp, r7
    6918:	f85d 7b04 	ldr.w	r7, [sp], #4
    691c:	4770      	bx	lr

0000691e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    691e:	b480      	push	{r7}
    6920:	b083      	sub	sp, #12
    6922:	af00      	add	r7, sp, #0
    6924:	6078      	str	r0, [r7, #4]
    6926:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	683a      	ldr	r2, [r7, #0]
    692c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    692e:	bf00      	nop
    6930:	370c      	adds	r7, #12
    6932:	46bd      	mov	sp, r7
    6934:	f85d 7b04 	ldr.w	r7, [sp], #4
    6938:	4770      	bx	lr
	...

0000693c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    693c:	b580      	push	{r7, lr}
    693e:	b082      	sub	sp, #8
    6940:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6942:	4b13      	ldr	r3, [pc, #76]	; (6990 <_osc32kctrl_init_sources+0x54>)
    6944:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6946:	2300      	movs	r3, #0
    6948:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    694a:	f242 018e 	movw	r1, #8334	; 0x208e
    694e:	6878      	ldr	r0, [r7, #4]
    6950:	4b10      	ldr	r3, [pc, #64]	; (6994 <_osc32kctrl_init_sources+0x58>)
    6952:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6954:	2100      	movs	r1, #0
    6956:	6878      	ldr	r0, [r7, #4]
    6958:	4b0f      	ldr	r3, [pc, #60]	; (6998 <_osc32kctrl_init_sources+0x5c>)
    695a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    695c:	2100      	movs	r1, #0
    695e:	6878      	ldr	r0, [r7, #4]
    6960:	4b0e      	ldr	r3, [pc, #56]	; (699c <_osc32kctrl_init_sources+0x60>)
    6962:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6964:	6878      	ldr	r0, [r7, #4]
    6966:	4b0e      	ldr	r3, [pc, #56]	; (69a0 <_osc32kctrl_init_sources+0x64>)
    6968:	4798      	blx	r3
    696a:	4603      	mov	r3, r0
    696c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    696e:	887b      	ldrh	r3, [r7, #2]
    6970:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6972:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6976:	4619      	mov	r1, r3
    6978:	6878      	ldr	r0, [r7, #4]
    697a:	4b0a      	ldr	r3, [pc, #40]	; (69a4 <_osc32kctrl_init_sources+0x68>)
    697c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    697e:	2100      	movs	r1, #0
    6980:	6878      	ldr	r0, [r7, #4]
    6982:	4b09      	ldr	r3, [pc, #36]	; (69a8 <_osc32kctrl_init_sources+0x6c>)
    6984:	4798      	blx	r3
	(void)calib;
}
    6986:	bf00      	nop
    6988:	3708      	adds	r7, #8
    698a:	46bd      	mov	sp, r7
    698c:	bd80      	pop	{r7, pc}
    698e:	bf00      	nop
    6990:	40001400 	.word	0x40001400
    6994:	0000689f 	.word	0x0000689f
    6998:	000068bd 	.word	0x000068bd
    699c:	000068db 	.word	0x000068db
    69a0:	000068f9 	.word	0x000068f9
    69a4:	0000691f 	.word	0x0000691f
    69a8:	00006881 	.word	0x00006881

000069ac <hri_gclk_wait_for_sync>:
{
    69ac:	b480      	push	{r7}
    69ae:	b083      	sub	sp, #12
    69b0:	af00      	add	r7, sp, #0
    69b2:	6078      	str	r0, [r7, #4]
    69b4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    69b6:	bf00      	nop
    69b8:	687b      	ldr	r3, [r7, #4]
    69ba:	685a      	ldr	r2, [r3, #4]
    69bc:	683b      	ldr	r3, [r7, #0]
    69be:	4013      	ands	r3, r2
    69c0:	2b00      	cmp	r3, #0
    69c2:	d1f9      	bne.n	69b8 <hri_gclk_wait_for_sync+0xc>
}
    69c4:	bf00      	nop
    69c6:	370c      	adds	r7, #12
    69c8:	46bd      	mov	sp, r7
    69ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ce:	4770      	bx	lr

000069d0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    69d0:	b480      	push	{r7}
    69d2:	b083      	sub	sp, #12
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    69d8:	687b      	ldr	r3, [r7, #4]
    69da:	685b      	ldr	r3, [r3, #4]
    69dc:	089b      	lsrs	r3, r3, #2
    69de:	f003 0301 	and.w	r3, r3, #1
    69e2:	2b00      	cmp	r3, #0
    69e4:	bf14      	ite	ne
    69e6:	2301      	movne	r3, #1
    69e8:	2300      	moveq	r3, #0
    69ea:	b2db      	uxtb	r3, r3
}
    69ec:	4618      	mov	r0, r3
    69ee:	370c      	adds	r7, #12
    69f0:	46bd      	mov	sp, r7
    69f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f6:	4770      	bx	lr

000069f8 <hri_gclk_read_SYNCBUSY_reg>:
{
    69f8:	b480      	push	{r7}
    69fa:	b083      	sub	sp, #12
    69fc:	af00      	add	r7, sp, #0
    69fe:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	685b      	ldr	r3, [r3, #4]
}
    6a04:	4618      	mov	r0, r3
    6a06:	370c      	adds	r7, #12
    6a08:	46bd      	mov	sp, r7
    6a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a0e:	4770      	bx	lr

00006a10 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6a10:	b580      	push	{r7, lr}
    6a12:	b086      	sub	sp, #24
    6a14:	af00      	add	r7, sp, #0
    6a16:	60f8      	str	r0, [r7, #12]
    6a18:	460b      	mov	r3, r1
    6a1a:	607a      	str	r2, [r7, #4]
    6a1c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6a1e:	7afa      	ldrb	r2, [r7, #11]
    6a20:	68fb      	ldr	r3, [r7, #12]
    6a22:	3208      	adds	r2, #8
    6a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a28:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6a2a:	697b      	ldr	r3, [r7, #20]
    6a2c:	f023 030f 	bic.w	r3, r3, #15
    6a30:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6a32:	687b      	ldr	r3, [r7, #4]
    6a34:	f003 030f 	and.w	r3, r3, #15
    6a38:	697a      	ldr	r2, [r7, #20]
    6a3a:	4313      	orrs	r3, r2
    6a3c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6a3e:	7afa      	ldrb	r2, [r7, #11]
    6a40:	68fb      	ldr	r3, [r7, #12]
    6a42:	3208      	adds	r2, #8
    6a44:	6979      	ldr	r1, [r7, #20]
    6a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6a4a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6a4e:	68f8      	ldr	r0, [r7, #12]
    6a50:	4b02      	ldr	r3, [pc, #8]	; (6a5c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6a52:	4798      	blx	r3
}
    6a54:	bf00      	nop
    6a56:	3718      	adds	r7, #24
    6a58:	46bd      	mov	sp, r7
    6a5a:	bd80      	pop	{r7, pc}
    6a5c:	000069ad 	.word	0x000069ad

00006a60 <hri_gclk_write_PCHCTRL_reg>:
{
    6a60:	b480      	push	{r7}
    6a62:	b085      	sub	sp, #20
    6a64:	af00      	add	r7, sp, #0
    6a66:	60f8      	str	r0, [r7, #12]
    6a68:	460b      	mov	r3, r1
    6a6a:	607a      	str	r2, [r7, #4]
    6a6c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6a6e:	7afa      	ldrb	r2, [r7, #11]
    6a70:	68fb      	ldr	r3, [r7, #12]
    6a72:	3220      	adds	r2, #32
    6a74:	6879      	ldr	r1, [r7, #4]
    6a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6a7a:	bf00      	nop
    6a7c:	3714      	adds	r7, #20
    6a7e:	46bd      	mov	sp, r7
    6a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a84:	4770      	bx	lr

00006a86 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6a86:	b480      	push	{r7}
    6a88:	b085      	sub	sp, #20
    6a8a:	af00      	add	r7, sp, #0
    6a8c:	60f8      	str	r0, [r7, #12]
    6a8e:	460b      	mov	r3, r1
    6a90:	607a      	str	r2, [r7, #4]
    6a92:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6a94:	bf00      	nop
    6a96:	7afa      	ldrb	r2, [r7, #11]
    6a98:	68f9      	ldr	r1, [r7, #12]
    6a9a:	4613      	mov	r3, r2
    6a9c:	009b      	lsls	r3, r3, #2
    6a9e:	4413      	add	r3, r2
    6aa0:	009b      	lsls	r3, r3, #2
    6aa2:	440b      	add	r3, r1
    6aa4:	333c      	adds	r3, #60	; 0x3c
    6aa6:	681a      	ldr	r2, [r3, #0]
    6aa8:	687b      	ldr	r3, [r7, #4]
    6aaa:	4013      	ands	r3, r2
    6aac:	2b00      	cmp	r3, #0
    6aae:	d1f2      	bne.n	6a96 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6ab0:	bf00      	nop
    6ab2:	3714      	adds	r7, #20
    6ab4:	46bd      	mov	sp, r7
    6ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aba:	4770      	bx	lr

00006abc <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6abc:	b480      	push	{r7}
    6abe:	b083      	sub	sp, #12
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	6078      	str	r0, [r7, #4]
    6ac4:	460b      	mov	r3, r1
    6ac6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6ac8:	78fa      	ldrb	r2, [r7, #3]
    6aca:	6879      	ldr	r1, [r7, #4]
    6acc:	4613      	mov	r3, r2
    6ace:	009b      	lsls	r3, r3, #2
    6ad0:	4413      	add	r3, r2
    6ad2:	009b      	lsls	r3, r3, #2
    6ad4:	440b      	add	r3, r1
    6ad6:	3340      	adds	r3, #64	; 0x40
    6ad8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6ada:	f003 0301 	and.w	r3, r3, #1
    6ade:	2b00      	cmp	r3, #0
    6ae0:	bf14      	ite	ne
    6ae2:	2301      	movne	r3, #1
    6ae4:	2300      	moveq	r3, #0
    6ae6:	b2db      	uxtb	r3, r3
}
    6ae8:	4618      	mov	r0, r3
    6aea:	370c      	adds	r7, #12
    6aec:	46bd      	mov	sp, r7
    6aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af2:	4770      	bx	lr

00006af4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6af4:	b480      	push	{r7}
    6af6:	b083      	sub	sp, #12
    6af8:	af00      	add	r7, sp, #0
    6afa:	6078      	str	r0, [r7, #4]
    6afc:	460b      	mov	r3, r1
    6afe:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6b00:	78fa      	ldrb	r2, [r7, #3]
    6b02:	6879      	ldr	r1, [r7, #4]
    6b04:	4613      	mov	r3, r2
    6b06:	009b      	lsls	r3, r3, #2
    6b08:	4413      	add	r3, r2
    6b0a:	009b      	lsls	r3, r3, #2
    6b0c:	440b      	add	r3, r1
    6b0e:	3340      	adds	r3, #64	; 0x40
    6b10:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6b12:	085b      	lsrs	r3, r3, #1
    6b14:	f003 0301 	and.w	r3, r3, #1
    6b18:	2b00      	cmp	r3, #0
    6b1a:	bf14      	ite	ne
    6b1c:	2301      	movne	r3, #1
    6b1e:	2300      	moveq	r3, #0
    6b20:	b2db      	uxtb	r3, r3
}
    6b22:	4618      	mov	r0, r3
    6b24:	370c      	adds	r7, #12
    6b26:	46bd      	mov	sp, r7
    6b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b2c:	4770      	bx	lr
	...

00006b30 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6b30:	b580      	push	{r7, lr}
    6b32:	b082      	sub	sp, #8
    6b34:	af00      	add	r7, sp, #0
    6b36:	6078      	str	r0, [r7, #4]
    6b38:	460b      	mov	r3, r1
    6b3a:	70fb      	strb	r3, [r7, #3]
    6b3c:	4613      	mov	r3, r2
    6b3e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6b40:	78fa      	ldrb	r2, [r7, #3]
    6b42:	6879      	ldr	r1, [r7, #4]
    6b44:	4613      	mov	r3, r2
    6b46:	009b      	lsls	r3, r3, #2
    6b48:	4413      	add	r3, r2
    6b4a:	009b      	lsls	r3, r3, #2
    6b4c:	440b      	add	r3, r1
    6b4e:	3330      	adds	r3, #48	; 0x30
    6b50:	78ba      	ldrb	r2, [r7, #2]
    6b52:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6b54:	78fb      	ldrb	r3, [r7, #3]
    6b56:	2202      	movs	r2, #2
    6b58:	4619      	mov	r1, r3
    6b5a:	6878      	ldr	r0, [r7, #4]
    6b5c:	4b02      	ldr	r3, [pc, #8]	; (6b68 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6b5e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6b60:	bf00      	nop
    6b62:	3708      	adds	r7, #8
    6b64:	46bd      	mov	sp, r7
    6b66:	bd80      	pop	{r7, pc}
    6b68:	00006a87 	.word	0x00006a87

00006b6c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6b6c:	b580      	push	{r7, lr}
    6b6e:	b084      	sub	sp, #16
    6b70:	af00      	add	r7, sp, #0
    6b72:	60f8      	str	r0, [r7, #12]
    6b74:	460b      	mov	r3, r1
    6b76:	607a      	str	r2, [r7, #4]
    6b78:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6b7a:	7afa      	ldrb	r2, [r7, #11]
    6b7c:	68f9      	ldr	r1, [r7, #12]
    6b7e:	4613      	mov	r3, r2
    6b80:	009b      	lsls	r3, r3, #2
    6b82:	4413      	add	r3, r2
    6b84:	009b      	lsls	r3, r3, #2
    6b86:	440b      	add	r3, r1
    6b88:	3334      	adds	r3, #52	; 0x34
    6b8a:	687a      	ldr	r2, [r7, #4]
    6b8c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6b8e:	7afb      	ldrb	r3, [r7, #11]
    6b90:	2206      	movs	r2, #6
    6b92:	4619      	mov	r1, r3
    6b94:	68f8      	ldr	r0, [r7, #12]
    6b96:	4b03      	ldr	r3, [pc, #12]	; (6ba4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6b98:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6b9a:	bf00      	nop
    6b9c:	3710      	adds	r7, #16
    6b9e:	46bd      	mov	sp, r7
    6ba0:	bd80      	pop	{r7, pc}
    6ba2:	bf00      	nop
    6ba4:	00006a87 	.word	0x00006a87

00006ba8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6ba8:	b480      	push	{r7}
    6baa:	b085      	sub	sp, #20
    6bac:	af00      	add	r7, sp, #0
    6bae:	60f8      	str	r0, [r7, #12]
    6bb0:	460b      	mov	r3, r1
    6bb2:	607a      	str	r2, [r7, #4]
    6bb4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6bb6:	7afa      	ldrb	r2, [r7, #11]
    6bb8:	68f9      	ldr	r1, [r7, #12]
    6bba:	4613      	mov	r3, r2
    6bbc:	009b      	lsls	r3, r3, #2
    6bbe:	4413      	add	r3, r2
    6bc0:	009b      	lsls	r3, r3, #2
    6bc2:	440b      	add	r3, r1
    6bc4:	3338      	adds	r3, #56	; 0x38
    6bc6:	687a      	ldr	r2, [r7, #4]
    6bc8:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6bca:	bf00      	nop
    6bcc:	3714      	adds	r7, #20
    6bce:	46bd      	mov	sp, r7
    6bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bd4:	4770      	bx	lr

00006bd6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6bd6:	b480      	push	{r7}
    6bd8:	b083      	sub	sp, #12
    6bda:	af00      	add	r7, sp, #0
    6bdc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	691b      	ldr	r3, [r3, #16]
    6be2:	085b      	lsrs	r3, r3, #1
    6be4:	f003 0301 	and.w	r3, r3, #1
    6be8:	2b00      	cmp	r3, #0
    6bea:	bf14      	ite	ne
    6bec:	2301      	movne	r3, #1
    6bee:	2300      	moveq	r3, #0
    6bf0:	b2db      	uxtb	r3, r3
}
    6bf2:	4618      	mov	r0, r3
    6bf4:	370c      	adds	r7, #12
    6bf6:	46bd      	mov	sp, r7
    6bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bfc:	4770      	bx	lr

00006bfe <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6bfe:	b480      	push	{r7}
    6c00:	b083      	sub	sp, #12
    6c02:	af00      	add	r7, sp, #0
    6c04:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6c06:	687b      	ldr	r3, [r7, #4]
    6c08:	691b      	ldr	r3, [r3, #16]
    6c0a:	0a1b      	lsrs	r3, r3, #8
    6c0c:	f003 0301 	and.w	r3, r3, #1
    6c10:	2b00      	cmp	r3, #0
    6c12:	bf14      	ite	ne
    6c14:	2301      	movne	r3, #1
    6c16:	2300      	moveq	r3, #0
    6c18:	b2db      	uxtb	r3, r3
}
    6c1a:	4618      	mov	r0, r3
    6c1c:	370c      	adds	r7, #12
    6c1e:	46bd      	mov	sp, r7
    6c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c24:	4770      	bx	lr

00006c26 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6c26:	b480      	push	{r7}
    6c28:	b085      	sub	sp, #20
    6c2a:	af00      	add	r7, sp, #0
    6c2c:	6078      	str	r0, [r7, #4]
    6c2e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	691b      	ldr	r3, [r3, #16]
    6c34:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6c36:	68fa      	ldr	r2, [r7, #12]
    6c38:	683b      	ldr	r3, [r7, #0]
    6c3a:	4013      	ands	r3, r2
    6c3c:	60fb      	str	r3, [r7, #12]
	return tmp;
    6c3e:	68fb      	ldr	r3, [r7, #12]
}
    6c40:	4618      	mov	r0, r3
    6c42:	3714      	adds	r7, #20
    6c44:	46bd      	mov	sp, r7
    6c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c4a:	4770      	bx	lr

00006c4c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6c4c:	b480      	push	{r7}
    6c4e:	b085      	sub	sp, #20
    6c50:	af00      	add	r7, sp, #0
    6c52:	60f8      	str	r0, [r7, #12]
    6c54:	460b      	mov	r3, r1
    6c56:	607a      	str	r2, [r7, #4]
    6c58:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6c5a:	7afb      	ldrb	r3, [r7, #11]
    6c5c:	68fa      	ldr	r2, [r7, #12]
    6c5e:	3304      	adds	r3, #4
    6c60:	009b      	lsls	r3, r3, #2
    6c62:	4413      	add	r3, r2
    6c64:	687a      	ldr	r2, [r7, #4]
    6c66:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c68:	bf00      	nop
    6c6a:	3714      	adds	r7, #20
    6c6c:	46bd      	mov	sp, r7
    6c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c72:	4770      	bx	lr

00006c74 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6c74:	b480      	push	{r7}
    6c76:	b083      	sub	sp, #12
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
    6c7c:	460b      	mov	r3, r1
    6c7e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	78fa      	ldrb	r2, [r7, #3]
    6c84:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c86:	bf00      	nop
    6c88:	370c      	adds	r7, #12
    6c8a:	46bd      	mov	sp, r7
    6c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c90:	4770      	bx	lr

00006c92 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    6c92:	b480      	push	{r7}
    6c94:	b085      	sub	sp, #20
    6c96:	af00      	add	r7, sp, #0
    6c98:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
    6ca0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6ca2:	7bfb      	ldrb	r3, [r7, #15]
    6ca4:	f003 0301 	and.w	r3, r3, #1
    6ca8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6caa:	7bfb      	ldrb	r3, [r7, #15]
    6cac:	2b00      	cmp	r3, #0
    6cae:	bf14      	ite	ne
    6cb0:	2301      	movne	r3, #1
    6cb2:	2300      	moveq	r3, #0
    6cb4:	b2db      	uxtb	r3, r3
}
    6cb6:	4618      	mov	r0, r3
    6cb8:	3714      	adds	r7, #20
    6cba:	46bd      	mov	sp, r7
    6cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cc0:	4770      	bx	lr

00006cc2 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    6cc2:	b480      	push	{r7}
    6cc4:	b083      	sub	sp, #12
    6cc6:	af00      	add	r7, sp, #0
    6cc8:	6078      	str	r0, [r7, #4]
    6cca:	460b      	mov	r3, r1
    6ccc:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6cce:	687b      	ldr	r3, [r7, #4]
    6cd0:	78fa      	ldrb	r2, [r7, #3]
    6cd2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6cd6:	bf00      	nop
    6cd8:	370c      	adds	r7, #12
    6cda:	46bd      	mov	sp, r7
    6cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ce0:	4770      	bx	lr

00006ce2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    6ce2:	b480      	push	{r7}
    6ce4:	b083      	sub	sp, #12
    6ce6:	af00      	add	r7, sp, #0
    6ce8:	6078      	str	r0, [r7, #4]
    6cea:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6cec:	687b      	ldr	r3, [r7, #4]
    6cee:	683a      	ldr	r2, [r7, #0]
    6cf0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6cf2:	bf00      	nop
    6cf4:	370c      	adds	r7, #12
    6cf6:	46bd      	mov	sp, r7
    6cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cfc:	4770      	bx	lr

00006cfe <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6cfe:	b480      	push	{r7}
    6d00:	b083      	sub	sp, #12
    6d02:	af00      	add	r7, sp, #0
    6d04:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6d0a:	4618      	mov	r0, r3
    6d0c:	370c      	adds	r7, #12
    6d0e:	46bd      	mov	sp, r7
    6d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d14:	4770      	bx	lr

00006d16 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6d16:	b480      	push	{r7}
    6d18:	b083      	sub	sp, #12
    6d1a:	af00      	add	r7, sp, #0
    6d1c:	6078      	str	r0, [r7, #4]
    6d1e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	683a      	ldr	r2, [r7, #0]
    6d24:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d26:	bf00      	nop
    6d28:	370c      	adds	r7, #12
    6d2a:	46bd      	mov	sp, r7
    6d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d30:	4770      	bx	lr

00006d32 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    6d32:	b480      	push	{r7}
    6d34:	b085      	sub	sp, #20
    6d36:	af00      	add	r7, sp, #0
    6d38:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6d40:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    6d42:	7bfb      	ldrb	r3, [r7, #15]
    6d44:	085b      	lsrs	r3, r3, #1
    6d46:	b2db      	uxtb	r3, r3
    6d48:	f003 0301 	and.w	r3, r3, #1
    6d4c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6d4e:	7bfb      	ldrb	r3, [r7, #15]
    6d50:	2b00      	cmp	r3, #0
    6d52:	bf14      	ite	ne
    6d54:	2301      	movne	r3, #1
    6d56:	2300      	moveq	r3, #0
    6d58:	b2db      	uxtb	r3, r3
}
    6d5a:	4618      	mov	r0, r3
    6d5c:	3714      	adds	r7, #20
    6d5e:	46bd      	mov	sp, r7
    6d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d64:	4770      	bx	lr

00006d66 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6d66:	b480      	push	{r7}
    6d68:	b085      	sub	sp, #20
    6d6a:	af00      	add	r7, sp, #0
    6d6c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6d6e:	687b      	ldr	r3, [r7, #4]
    6d70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6d74:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6d76:	7bfb      	ldrb	r3, [r7, #15]
    6d78:	089b      	lsrs	r3, r3, #2
    6d7a:	b2db      	uxtb	r3, r3
    6d7c:	f003 0301 	and.w	r3, r3, #1
    6d80:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6d82:	7bfb      	ldrb	r3, [r7, #15]
    6d84:	2b00      	cmp	r3, #0
    6d86:	bf14      	ite	ne
    6d88:	2301      	movne	r3, #1
    6d8a:	2300      	moveq	r3, #0
    6d8c:	b2db      	uxtb	r3, r3
}
    6d8e:	4618      	mov	r0, r3
    6d90:	3714      	adds	r7, #20
    6d92:	46bd      	mov	sp, r7
    6d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d98:	4770      	bx	lr

00006d9a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6d9a:	b480      	push	{r7}
    6d9c:	b085      	sub	sp, #20
    6d9e:	af00      	add	r7, sp, #0
    6da0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6da8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6daa:	7bfb      	ldrb	r3, [r7, #15]
    6dac:	08db      	lsrs	r3, r3, #3
    6dae:	b2db      	uxtb	r3, r3
    6db0:	f003 0301 	and.w	r3, r3, #1
    6db4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6db6:	7bfb      	ldrb	r3, [r7, #15]
    6db8:	2b00      	cmp	r3, #0
    6dba:	bf14      	ite	ne
    6dbc:	2301      	movne	r3, #1
    6dbe:	2300      	moveq	r3, #0
    6dc0:	b2db      	uxtb	r3, r3
}
    6dc2:	4618      	mov	r0, r3
    6dc4:	3714      	adds	r7, #20
    6dc6:	46bd      	mov	sp, r7
    6dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dcc:	4770      	bx	lr

00006dce <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6dce:	b480      	push	{r7}
    6dd0:	b085      	sub	sp, #20
    6dd2:	af00      	add	r7, sp, #0
    6dd4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6ddc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6dde:	7bfb      	ldrb	r3, [r7, #15]
    6de0:	091b      	lsrs	r3, r3, #4
    6de2:	b2db      	uxtb	r3, r3
    6de4:	f003 0301 	and.w	r3, r3, #1
    6de8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6dea:	7bfb      	ldrb	r3, [r7, #15]
    6dec:	2b00      	cmp	r3, #0
    6dee:	bf14      	ite	ne
    6df0:	2301      	movne	r3, #1
    6df2:	2300      	moveq	r3, #0
    6df4:	b2db      	uxtb	r3, r3
}
    6df6:	4618      	mov	r0, r3
    6df8:	3714      	adds	r7, #20
    6dfa:	46bd      	mov	sp, r7
    6dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e00:	4770      	bx	lr
	...

00006e04 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6e04:	b580      	push	{r7, lr}
    6e06:	b082      	sub	sp, #8
    6e08:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6e0a:	4b0a      	ldr	r3, [pc, #40]	; (6e34 <_oscctrl_init_sources+0x30>)
    6e0c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6e0e:	4a0a      	ldr	r2, [pc, #40]	; (6e38 <_oscctrl_init_sources+0x34>)
    6e10:	2101      	movs	r1, #1
    6e12:	6878      	ldr	r0, [r7, #4]
    6e14:	4b09      	ldr	r3, [pc, #36]	; (6e3c <_oscctrl_init_sources+0x38>)
    6e16:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6e18:	bf00      	nop
    6e1a:	6878      	ldr	r0, [r7, #4]
    6e1c:	4b08      	ldr	r3, [pc, #32]	; (6e40 <_oscctrl_init_sources+0x3c>)
    6e1e:	4798      	blx	r3
    6e20:	4603      	mov	r3, r0
    6e22:	f083 0301 	eor.w	r3, r3, #1
    6e26:	b2db      	uxtb	r3, r3
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d1f6      	bne.n	6e1a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6e2c:	bf00      	nop
    6e2e:	3708      	adds	r7, #8
    6e30:	46bd      	mov	sp, r7
    6e32:	bd80      	pop	{r7, pc}
    6e34:	40001000 	.word	0x40001000
    6e38:	03002646 	.word	0x03002646
    6e3c:	00006c4d 	.word	0x00006c4d
    6e40:	00006bd7 	.word	0x00006bd7

00006e44 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b084      	sub	sp, #16
    6e48:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6e4a:	4b6b      	ldr	r3, [pc, #428]	; (6ff8 <_oscctrl_init_referenced_generators+0x1b4>)
    6e4c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    6e4e:	2204      	movs	r2, #4
    6e50:	2100      	movs	r1, #0
    6e52:	486a      	ldr	r0, [pc, #424]	; (6ffc <_oscctrl_init_referenced_generators+0x1b8>)
    6e54:	4b6a      	ldr	r3, [pc, #424]	; (7000 <_oscctrl_init_referenced_generators+0x1bc>)
    6e56:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6e58:	bf00      	nop
    6e5a:	4868      	ldr	r0, [pc, #416]	; (6ffc <_oscctrl_init_referenced_generators+0x1b8>)
    6e5c:	4b69      	ldr	r3, [pc, #420]	; (7004 <_oscctrl_init_referenced_generators+0x1c0>)
    6e5e:	4798      	blx	r3
    6e60:	4603      	mov	r3, r0
    6e62:	2b00      	cmp	r3, #0
    6e64:	d1f9      	bne.n	6e5a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6e66:	2100      	movs	r1, #0
    6e68:	68f8      	ldr	r0, [r7, #12]
    6e6a:	4b67      	ldr	r3, [pc, #412]	; (7008 <_oscctrl_init_referenced_generators+0x1c4>)
    6e6c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    6e6e:	4967      	ldr	r1, [pc, #412]	; (700c <_oscctrl_init_referenced_generators+0x1c8>)
    6e70:	68f8      	ldr	r0, [r7, #12]
    6e72:	4b67      	ldr	r3, [pc, #412]	; (7010 <_oscctrl_init_referenced_generators+0x1cc>)
    6e74:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6e76:	bf00      	nop
    6e78:	68f8      	ldr	r0, [r7, #12]
    6e7a:	4b66      	ldr	r3, [pc, #408]	; (7014 <_oscctrl_init_referenced_generators+0x1d0>)
    6e7c:	4798      	blx	r3
    6e7e:	4603      	mov	r3, r0
    6e80:	2b00      	cmp	r3, #0
    6e82:	d1f9      	bne.n	6e78 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6e84:	2100      	movs	r1, #0
    6e86:	68f8      	ldr	r0, [r7, #12]
    6e88:	4b63      	ldr	r3, [pc, #396]	; (7018 <_oscctrl_init_referenced_generators+0x1d4>)
    6e8a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6e8c:	bf00      	nop
    6e8e:	68f8      	ldr	r0, [r7, #12]
    6e90:	4b62      	ldr	r3, [pc, #392]	; (701c <_oscctrl_init_referenced_generators+0x1d8>)
    6e92:	4798      	blx	r3
    6e94:	4603      	mov	r3, r0
    6e96:	2b00      	cmp	r3, #0
    6e98:	d1f9      	bne.n	6e8e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6e9a:	2302      	movs	r3, #2
    6e9c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    6e9e:	7afb      	ldrb	r3, [r7, #11]
    6ea0:	4619      	mov	r1, r3
    6ea2:	68f8      	ldr	r0, [r7, #12]
    6ea4:	4b58      	ldr	r3, [pc, #352]	; (7008 <_oscctrl_init_referenced_generators+0x1c4>)
    6ea6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6ea8:	bf00      	nop
    6eaa:	68f8      	ldr	r0, [r7, #12]
    6eac:	4b5c      	ldr	r3, [pc, #368]	; (7020 <_oscctrl_init_referenced_generators+0x1dc>)
    6eae:	4798      	blx	r3
    6eb0:	4603      	mov	r3, r0
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d1f9      	bne.n	6eaa <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    6eb6:	68f8      	ldr	r0, [r7, #12]
    6eb8:	4b5a      	ldr	r3, [pc, #360]	; (7024 <_oscctrl_init_referenced_generators+0x1e0>)
    6eba:	4798      	blx	r3
    6ebc:	4603      	mov	r3, r0
    6ebe:	4619      	mov	r1, r3
    6ec0:	68f8      	ldr	r0, [r7, #12]
    6ec2:	4b59      	ldr	r3, [pc, #356]	; (7028 <_oscctrl_init_referenced_generators+0x1e4>)
    6ec4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6ec6:	bf00      	nop
    6ec8:	68f8      	ldr	r0, [r7, #12]
    6eca:	4b58      	ldr	r3, [pc, #352]	; (702c <_oscctrl_init_referenced_generators+0x1e8>)
    6ecc:	4798      	blx	r3
    6ece:	4603      	mov	r3, r0
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d1f9      	bne.n	6ec8 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    6ed4:	2319      	movs	r3, #25
    6ed6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    6ed8:	7afb      	ldrb	r3, [r7, #11]
    6eda:	4619      	mov	r1, r3
    6edc:	68f8      	ldr	r0, [r7, #12]
    6ede:	4b4e      	ldr	r3, [pc, #312]	; (7018 <_oscctrl_init_referenced_generators+0x1d4>)
    6ee0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6ee2:	bf00      	nop
    6ee4:	68f8      	ldr	r0, [r7, #12]
    6ee6:	4b4d      	ldr	r3, [pc, #308]	; (701c <_oscctrl_init_referenced_generators+0x1d8>)
    6ee8:	4798      	blx	r3
    6eea:	4603      	mov	r3, r0
    6eec:	2b00      	cmp	r3, #0
    6eee:	d1f9      	bne.n	6ee4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    6ef0:	2245      	movs	r2, #69	; 0x45
    6ef2:	2101      	movs	r1, #1
    6ef4:	4841      	ldr	r0, [pc, #260]	; (6ffc <_oscctrl_init_referenced_generators+0x1b8>)
    6ef6:	4b4e      	ldr	r3, [pc, #312]	; (7030 <_oscctrl_init_referenced_generators+0x1ec>)
    6ef8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6efa:	223b      	movs	r2, #59	; 0x3b
    6efc:	2100      	movs	r1, #0
    6efe:	68f8      	ldr	r0, [r7, #12]
    6f00:	4b4c      	ldr	r3, [pc, #304]	; (7034 <_oscctrl_init_referenced_generators+0x1f0>)
    6f02:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6f04:	f44f 6201 	mov.w	r2, #2064	; 0x810
    6f08:	2100      	movs	r1, #0
    6f0a:	68f8      	ldr	r0, [r7, #12]
    6f0c:	4b4a      	ldr	r3, [pc, #296]	; (7038 <_oscctrl_init_referenced_generators+0x1f4>)
    6f0e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6f10:	2242      	movs	r2, #66	; 0x42
    6f12:	2100      	movs	r1, #0
    6f14:	68f8      	ldr	r0, [r7, #12]
    6f16:	4b49      	ldr	r3, [pc, #292]	; (703c <_oscctrl_init_referenced_generators+0x1f8>)
    6f18:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6f1a:	4a49      	ldr	r2, [pc, #292]	; (7040 <_oscctrl_init_referenced_generators+0x1fc>)
    6f1c:	2101      	movs	r1, #1
    6f1e:	68f8      	ldr	r0, [r7, #12]
    6f20:	4b44      	ldr	r3, [pc, #272]	; (7034 <_oscctrl_init_referenced_generators+0x1f0>)
    6f22:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6f24:	f44f 6203 	mov.w	r2, #2096	; 0x830
    6f28:	2101      	movs	r1, #1
    6f2a:	68f8      	ldr	r0, [r7, #12]
    6f2c:	4b42      	ldr	r3, [pc, #264]	; (7038 <_oscctrl_init_referenced_generators+0x1f4>)
    6f2e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6f30:	2202      	movs	r2, #2
    6f32:	2101      	movs	r1, #1
    6f34:	68f8      	ldr	r0, [r7, #12]
    6f36:	4b41      	ldr	r3, [pc, #260]	; (703c <_oscctrl_init_referenced_generators+0x1f8>)
    6f38:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6f3a:	68f8      	ldr	r0, [r7, #12]
    6f3c:	4b41      	ldr	r3, [pc, #260]	; (7044 <_oscctrl_init_referenced_generators+0x200>)
    6f3e:	4798      	blx	r3
    6f40:	4603      	mov	r3, r0
    6f42:	2b00      	cmp	r3, #0
    6f44:	d00c      	beq.n	6f60 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    6f46:	f44f 6310 	mov.w	r3, #2304	; 0x900
    6f4a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    6f4c:	bf00      	nop
    6f4e:	6879      	ldr	r1, [r7, #4]
    6f50:	68f8      	ldr	r0, [r7, #12]
    6f52:	4b3d      	ldr	r3, [pc, #244]	; (7048 <_oscctrl_init_referenced_generators+0x204>)
    6f54:	4798      	blx	r3
    6f56:	4602      	mov	r2, r0
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	429a      	cmp	r2, r3
    6f5c:	d1f7      	bne.n	6f4e <_oscctrl_init_referenced_generators+0x10a>
    6f5e:	e009      	b.n	6f74 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6f60:	bf00      	nop
    6f62:	68f8      	ldr	r0, [r7, #12]
    6f64:	4b39      	ldr	r3, [pc, #228]	; (704c <_oscctrl_init_referenced_generators+0x208>)
    6f66:	4798      	blx	r3
    6f68:	4603      	mov	r3, r0
    6f6a:	f083 0301 	eor.w	r3, r3, #1
    6f6e:	b2db      	uxtb	r3, r3
    6f70:	2b00      	cmp	r3, #0
    6f72:	d1f6      	bne.n	6f62 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    6f74:	bf00      	nop
    6f76:	2100      	movs	r1, #0
    6f78:	68f8      	ldr	r0, [r7, #12]
    6f7a:	4b35      	ldr	r3, [pc, #212]	; (7050 <_oscctrl_init_referenced_generators+0x20c>)
    6f7c:	4798      	blx	r3
    6f7e:	4603      	mov	r3, r0
    6f80:	f083 0301 	eor.w	r3, r3, #1
    6f84:	b2db      	uxtb	r3, r3
    6f86:	2b00      	cmp	r3, #0
    6f88:	d009      	beq.n	6f9e <_oscctrl_init_referenced_generators+0x15a>
    6f8a:	2100      	movs	r1, #0
    6f8c:	68f8      	ldr	r0, [r7, #12]
    6f8e:	4b31      	ldr	r3, [pc, #196]	; (7054 <_oscctrl_init_referenced_generators+0x210>)
    6f90:	4798      	blx	r3
    6f92:	4603      	mov	r3, r0
    6f94:	f083 0301 	eor.w	r3, r3, #1
    6f98:	b2db      	uxtb	r3, r3
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d1eb      	bne.n	6f76 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    6f9e:	bf00      	nop
    6fa0:	2101      	movs	r1, #1
    6fa2:	68f8      	ldr	r0, [r7, #12]
    6fa4:	4b2a      	ldr	r3, [pc, #168]	; (7050 <_oscctrl_init_referenced_generators+0x20c>)
    6fa6:	4798      	blx	r3
    6fa8:	4603      	mov	r3, r0
    6faa:	f083 0301 	eor.w	r3, r3, #1
    6fae:	b2db      	uxtb	r3, r3
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d009      	beq.n	6fc8 <_oscctrl_init_referenced_generators+0x184>
    6fb4:	2101      	movs	r1, #1
    6fb6:	68f8      	ldr	r0, [r7, #12]
    6fb8:	4b26      	ldr	r3, [pc, #152]	; (7054 <_oscctrl_init_referenced_generators+0x210>)
    6fba:	4798      	blx	r3
    6fbc:	4603      	mov	r3, r0
    6fbe:	f083 0301 	eor.w	r3, r3, #1
    6fc2:	b2db      	uxtb	r3, r3
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d1eb      	bne.n	6fa0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6fc8:	bf00      	nop
    6fca:	480c      	ldr	r0, [pc, #48]	; (6ffc <_oscctrl_init_referenced_generators+0x1b8>)
    6fcc:	4b22      	ldr	r3, [pc, #136]	; (7058 <_oscctrl_init_referenced_generators+0x214>)
    6fce:	4798      	blx	r3
    6fd0:	4603      	mov	r3, r0
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d1f9      	bne.n	6fca <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    6fd6:	2207      	movs	r2, #7
    6fd8:	2100      	movs	r1, #0
    6fda:	4808      	ldr	r0, [pc, #32]	; (6ffc <_oscctrl_init_referenced_generators+0x1b8>)
    6fdc:	4b08      	ldr	r3, [pc, #32]	; (7000 <_oscctrl_init_referenced_generators+0x1bc>)
    6fde:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6fe0:	bf00      	nop
    6fe2:	4806      	ldr	r0, [pc, #24]	; (6ffc <_oscctrl_init_referenced_generators+0x1b8>)
    6fe4:	4b07      	ldr	r3, [pc, #28]	; (7004 <_oscctrl_init_referenced_generators+0x1c0>)
    6fe6:	4798      	blx	r3
    6fe8:	4603      	mov	r3, r0
    6fea:	2b00      	cmp	r3, #0
    6fec:	d1f9      	bne.n	6fe2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    6fee:	bf00      	nop
    6ff0:	3710      	adds	r7, #16
    6ff2:	46bd      	mov	sp, r7
    6ff4:	bd80      	pop	{r7, pc}
    6ff6:	bf00      	nop
    6ff8:	40001000 	.word	0x40001000
    6ffc:	40001c00 	.word	0x40001c00
    7000:	00006a11 	.word	0x00006a11
    7004:	000069d1 	.word	0x000069d1
    7008:	00006c75 	.word	0x00006c75
    700c:	0401bb80 	.word	0x0401bb80
    7010:	00006d17 	.word	0x00006d17
    7014:	00006dcf 	.word	0x00006dcf
    7018:	00006cc3 	.word	0x00006cc3
    701c:	00006d67 	.word	0x00006d67
    7020:	00006d33 	.word	0x00006d33
    7024:	00006cff 	.word	0x00006cff
    7028:	00006ce3 	.word	0x00006ce3
    702c:	00006d9b 	.word	0x00006d9b
    7030:	00006a61 	.word	0x00006a61
    7034:	00006b6d 	.word	0x00006b6d
    7038:	00006ba9 	.word	0x00006ba9
    703c:	00006b31 	.word	0x00006b31
    7040:	000407a0 	.word	0x000407a0
    7044:	00006c93 	.word	0x00006c93
    7048:	00006c27 	.word	0x00006c27
    704c:	00006bff 	.word	0x00006bff
    7050:	00006abd 	.word	0x00006abd
    7054:	00006af5 	.word	0x00006af5
    7058:	000069f9 	.word	0x000069f9

0000705c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    705c:	b480      	push	{r7}
    705e:	b083      	sub	sp, #12
    7060:	af00      	add	r7, sp, #0
    7062:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    7064:	687b      	ldr	r3, [r7, #4]
    7066:	69db      	ldr	r3, [r3, #28]
    7068:	0a9b      	lsrs	r3, r3, #10
    706a:	f003 0301 	and.w	r3, r3, #1
    706e:	2b00      	cmp	r3, #0
    7070:	bf14      	ite	ne
    7072:	2301      	movne	r3, #1
    7074:	2300      	moveq	r3, #0
    7076:	b2db      	uxtb	r3, r3
}
    7078:	4618      	mov	r0, r3
    707a:	370c      	adds	r7, #12
    707c:	46bd      	mov	sp, r7
    707e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7082:	4770      	bx	lr

00007084 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    7084:	b480      	push	{r7}
    7086:	b083      	sub	sp, #12
    7088:	af00      	add	r7, sp, #0
    708a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    708c:	687b      	ldr	r3, [r7, #4]
    708e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7092:	61da      	str	r2, [r3, #28]
}
    7094:	bf00      	nop
    7096:	370c      	adds	r7, #12
    7098:	46bd      	mov	sp, r7
    709a:	f85d 7b04 	ldr.w	r7, [sp], #4
    709e:	4770      	bx	lr

000070a0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    70a0:	b480      	push	{r7}
    70a2:	b083      	sub	sp, #12
    70a4:	af00      	add	r7, sp, #0
    70a6:	6078      	str	r0, [r7, #4]
    70a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	683a      	ldr	r2, [r7, #0]
    70ae:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    70b0:	bf00      	nop
    70b2:	370c      	adds	r7, #12
    70b4:	46bd      	mov	sp, r7
    70b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    70ba:	4770      	bx	lr

000070bc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    70bc:	b480      	push	{r7}
    70be:	b083      	sub	sp, #12
    70c0:	af00      	add	r7, sp, #0
    70c2:	6078      	str	r0, [r7, #4]
    70c4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	683a      	ldr	r2, [r7, #0]
    70ca:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    70cc:	bf00      	nop
    70ce:	370c      	adds	r7, #12
    70d0:	46bd      	mov	sp, r7
    70d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    70d6:	4770      	bx	lr

000070d8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    70d8:	b480      	push	{r7}
    70da:	b083      	sub	sp, #12
    70dc:	af00      	add	r7, sp, #0
    70de:	6078      	str	r0, [r7, #4]
    70e0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	683a      	ldr	r2, [r7, #0]
    70e6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    70e8:	bf00      	nop
    70ea:	370c      	adds	r7, #12
    70ec:	46bd      	mov	sp, r7
    70ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    70f2:	4770      	bx	lr

000070f4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    70f4:	b480      	push	{r7}
    70f6:	b083      	sub	sp, #12
    70f8:	af00      	add	r7, sp, #0
    70fa:	6078      	str	r0, [r7, #4]
    70fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	683a      	ldr	r2, [r7, #0]
    7102:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7104:	bf00      	nop
    7106:	370c      	adds	r7, #12
    7108:	46bd      	mov	sp, r7
    710a:	f85d 7b04 	ldr.w	r7, [sp], #4
    710e:	4770      	bx	lr

00007110 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7110:	b480      	push	{r7}
    7112:	b085      	sub	sp, #20
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
    7118:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    711a:	687b      	ldr	r3, [r7, #4]
    711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    711e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    7120:	68fb      	ldr	r3, [r7, #12]
    7122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7126:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	b2db      	uxtb	r3, r3
    712c:	68fa      	ldr	r2, [r7, #12]
    712e:	4313      	orrs	r3, r2
    7130:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	68fa      	ldr	r2, [r7, #12]
    7136:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7138:	bf00      	nop
    713a:	3714      	adds	r7, #20
    713c:	46bd      	mov	sp, r7
    713e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7142:	4770      	bx	lr

00007144 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7144:	b480      	push	{r7}
    7146:	b085      	sub	sp, #20
    7148:	af00      	add	r7, sp, #0
    714a:	6078      	str	r0, [r7, #4]
    714c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7152:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7154:	68fb      	ldr	r3, [r7, #12]
    7156:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    715a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    715c:	683b      	ldr	r3, [r7, #0]
    715e:	041b      	lsls	r3, r3, #16
    7160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    7164:	68fa      	ldr	r2, [r7, #12]
    7166:	4313      	orrs	r3, r2
    7168:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    716a:	687b      	ldr	r3, [r7, #4]
    716c:	68fa      	ldr	r2, [r7, #12]
    716e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7170:	bf00      	nop
    7172:	3714      	adds	r7, #20
    7174:	46bd      	mov	sp, r7
    7176:	f85d 7b04 	ldr.w	r7, [sp], #4
    717a:	4770      	bx	lr

0000717c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    717c:	b480      	push	{r7}
    717e:	b083      	sub	sp, #12
    7180:	af00      	add	r7, sp, #0
    7182:	6078      	str	r0, [r7, #4]
    7184:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7186:	687b      	ldr	r3, [r7, #4]
    7188:	683a      	ldr	r2, [r7, #0]
    718a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    718c:	bf00      	nop
    718e:	370c      	adds	r7, #12
    7190:	46bd      	mov	sp, r7
    7192:	f85d 7b04 	ldr.w	r7, [sp], #4
    7196:	4770      	bx	lr

00007198 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7198:	b480      	push	{r7}
    719a:	b083      	sub	sp, #12
    719c:	af00      	add	r7, sp, #0
    719e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    71a4:	4618      	mov	r0, r3
    71a6:	370c      	adds	r7, #12
    71a8:	46bd      	mov	sp, r7
    71aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ae:	4770      	bx	lr

000071b0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    71b0:	b480      	push	{r7}
    71b2:	b085      	sub	sp, #20
    71b4:	af00      	add	r7, sp, #0
    71b6:	60f8      	str	r0, [r7, #12]
    71b8:	60b9      	str	r1, [r7, #8]
    71ba:	607a      	str	r2, [r7, #4]
	while (count--) {
    71bc:	e007      	b.n	71ce <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    71be:	68fb      	ldr	r3, [r7, #12]
    71c0:	1c5a      	adds	r2, r3, #1
    71c2:	60fa      	str	r2, [r7, #12]
    71c4:	68ba      	ldr	r2, [r7, #8]
    71c6:	1c51      	adds	r1, r2, #1
    71c8:	60b9      	str	r1, [r7, #8]
    71ca:	7812      	ldrb	r2, [r2, #0]
    71cc:	701a      	strb	r2, [r3, #0]
	while (count--) {
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	1e5a      	subs	r2, r3, #1
    71d2:	607a      	str	r2, [r7, #4]
    71d4:	2b00      	cmp	r3, #0
    71d6:	d1f2      	bne.n	71be <_qspi_memcpy+0xe>
	}
}
    71d8:	bf00      	nop
    71da:	3714      	adds	r7, #20
    71dc:	46bd      	mov	sp, r7
    71de:	f85d 7b04 	ldr.w	r7, [sp], #4
    71e2:	4770      	bx	lr

000071e4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    71e4:	b580      	push	{r7, lr}
    71e6:	b082      	sub	sp, #8
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    71ec:	4903      	ldr	r1, [pc, #12]	; (71fc <_qspi_end_transfer+0x18>)
    71ee:	6878      	ldr	r0, [r7, #4]
    71f0:	4b03      	ldr	r3, [pc, #12]	; (7200 <_qspi_end_transfer+0x1c>)
    71f2:	4798      	blx	r3
}
    71f4:	bf00      	nop
    71f6:	3708      	adds	r7, #8
    71f8:	46bd      	mov	sp, r7
    71fa:	bd80      	pop	{r7, pc}
    71fc:	01000002 	.word	0x01000002
    7200:	000070a1 	.word	0x000070a1

00007204 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7204:	b580      	push	{r7, lr}
    7206:	b082      	sub	sp, #8
    7208:	af00      	add	r7, sp, #0
    720a:	6078      	str	r0, [r7, #4]
    720c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    720e:	687b      	ldr	r3, [r7, #4]
    7210:	2b00      	cmp	r3, #0
    7212:	d004      	beq.n	721e <_qspi_sync_init+0x1a>
    7214:	683b      	ldr	r3, [r7, #0]
    7216:	2b00      	cmp	r3, #0
    7218:	d001      	beq.n	721e <_qspi_sync_init+0x1a>
    721a:	2301      	movs	r3, #1
    721c:	e000      	b.n	7220 <_qspi_sync_init+0x1c>
    721e:	2300      	movs	r3, #0
    7220:	f003 0301 	and.w	r3, r3, #1
    7224:	b2db      	uxtb	r3, r3
    7226:	2240      	movs	r2, #64	; 0x40
    7228:	490c      	ldr	r1, [pc, #48]	; (725c <_qspi_sync_init+0x58>)
    722a:	4618      	mov	r0, r3
    722c:	4b0c      	ldr	r3, [pc, #48]	; (7260 <_qspi_sync_init+0x5c>)
    722e:	4798      	blx	r3
	dev->prvt = hw;
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	683a      	ldr	r2, [r7, #0]
    7234:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	2101      	movs	r1, #1
    723c:	4618      	mov	r0, r3
    723e:	4b09      	ldr	r3, [pc, #36]	; (7264 <_qspi_sync_init+0x60>)
    7240:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7242:	4909      	ldr	r1, [pc, #36]	; (7268 <_qspi_sync_init+0x64>)
    7244:	6838      	ldr	r0, [r7, #0]
    7246:	4b09      	ldr	r3, [pc, #36]	; (726c <_qspi_sync_init+0x68>)
    7248:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    724a:	4909      	ldr	r1, [pc, #36]	; (7270 <_qspi_sync_init+0x6c>)
    724c:	6838      	ldr	r0, [r7, #0]
    724e:	4b09      	ldr	r3, [pc, #36]	; (7274 <_qspi_sync_init+0x70>)
    7250:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7252:	2300      	movs	r3, #0
}
    7254:	4618      	mov	r0, r3
    7256:	3708      	adds	r7, #8
    7258:	46bd      	mov	sp, r7
    725a:	bd80      	pop	{r7, pc}
    725c:	0001ad6c 	.word	0x0001ad6c
    7260:	00004bbd 	.word	0x00004bbd
    7264:	000070a1 	.word	0x000070a1
    7268:	06000011 	.word	0x06000011
    726c:	000070bd 	.word	0x000070bd
    7270:	00241300 	.word	0x00241300
    7274:	000070d9 	.word	0x000070d9

00007278 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7278:	b580      	push	{r7, lr}
    727a:	b082      	sub	sp, #8
    727c:	af00      	add	r7, sp, #0
    727e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	681b      	ldr	r3, [r3, #0]
    7284:	2102      	movs	r1, #2
    7286:	4618      	mov	r0, r3
    7288:	4b03      	ldr	r3, [pc, #12]	; (7298 <_qspi_sync_enable+0x20>)
    728a:	4798      	blx	r3
	return ERR_NONE;
    728c:	2300      	movs	r3, #0
}
    728e:	4618      	mov	r0, r3
    7290:	3708      	adds	r7, #8
    7292:	46bd      	mov	sp, r7
    7294:	bd80      	pop	{r7, pc}
    7296:	bf00      	nop
    7298:	000070a1 	.word	0x000070a1

0000729c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    729c:	b580      	push	{r7, lr}
    729e:	b082      	sub	sp, #8
    72a0:	af00      	add	r7, sp, #0
    72a2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	681b      	ldr	r3, [r3, #0]
    72a8:	2100      	movs	r1, #0
    72aa:	4618      	mov	r0, r3
    72ac:	4b03      	ldr	r3, [pc, #12]	; (72bc <_qspi_sync_disable+0x20>)
    72ae:	4798      	blx	r3
	return ERR_NONE;
    72b0:	2300      	movs	r3, #0
}
    72b2:	4618      	mov	r0, r3
    72b4:	3708      	adds	r7, #8
    72b6:	46bd      	mov	sp, r7
    72b8:	bd80      	pop	{r7, pc}
    72ba:	bf00      	nop
    72bc:	000070a1 	.word	0x000070a1

000072c0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    72c0:	b580      	push	{r7, lr}
    72c2:	b084      	sub	sp, #16
    72c4:	af00      	add	r7, sp, #0
    72c6:	6078      	str	r0, [r7, #4]
    72c8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	681b      	ldr	r3, [r3, #0]
    72ce:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    72d0:	683b      	ldr	r3, [r7, #0]
    72d2:	781b      	ldrb	r3, [r3, #0]
    72d4:	f003 0320 	and.w	r3, r3, #32
    72d8:	b2db      	uxtb	r3, r3
    72da:	2b00      	cmp	r3, #0
    72dc:	d005      	beq.n	72ea <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    72de:	683b      	ldr	r3, [r7, #0]
    72e0:	689b      	ldr	r3, [r3, #8]
    72e2:	4619      	mov	r1, r3
    72e4:	68f8      	ldr	r0, [r7, #12]
    72e6:	4b13      	ldr	r3, [pc, #76]	; (7334 <_qspi_sync_command_set_ifr+0x74>)
    72e8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    72ea:	683b      	ldr	r3, [r7, #0]
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	f003 0310 	and.w	r3, r3, #16
    72f2:	b2db      	uxtb	r3, r3
    72f4:	2b00      	cmp	r3, #0
    72f6:	d005      	beq.n	7304 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    72f8:	683b      	ldr	r3, [r7, #0]
    72fa:	791b      	ldrb	r3, [r3, #4]
    72fc:	4619      	mov	r1, r3
    72fe:	68f8      	ldr	r0, [r7, #12]
    7300:	4b0d      	ldr	r3, [pc, #52]	; (7338 <_qspi_sync_command_set_ifr+0x78>)
    7302:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7304:	683b      	ldr	r3, [r7, #0]
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	f003 0340 	and.w	r3, r3, #64	; 0x40
    730c:	b2db      	uxtb	r3, r3
    730e:	2b00      	cmp	r3, #0
    7310:	d005      	beq.n	731e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7312:	683b      	ldr	r3, [r7, #0]
    7314:	795b      	ldrb	r3, [r3, #5]
    7316:	4619      	mov	r1, r3
    7318:	68f8      	ldr	r0, [r7, #12]
    731a:	4b08      	ldr	r3, [pc, #32]	; (733c <_qspi_sync_command_set_ifr+0x7c>)
    731c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    731e:	683b      	ldr	r3, [r7, #0]
    7320:	681b      	ldr	r3, [r3, #0]
    7322:	4619      	mov	r1, r3
    7324:	68f8      	ldr	r0, [r7, #12]
    7326:	4b06      	ldr	r3, [pc, #24]	; (7340 <_qspi_sync_command_set_ifr+0x80>)
    7328:	4798      	blx	r3
}
    732a:	bf00      	nop
    732c:	3710      	adds	r7, #16
    732e:	46bd      	mov	sp, r7
    7330:	bd80      	pop	{r7, pc}
    7332:	bf00      	nop
    7334:	000070f5 	.word	0x000070f5
    7338:	00007111 	.word	0x00007111
    733c:	00007145 	.word	0x00007145
    7340:	0000717d 	.word	0x0000717d

00007344 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7344:	b580      	push	{r7, lr}
    7346:	b084      	sub	sp, #16
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
    734c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	681b      	ldr	r3, [r3, #0]
    7352:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    7354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7358:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    735a:	683b      	ldr	r3, [r7, #0]
    735c:	781b      	ldrb	r3, [r3, #0]
    735e:	f003 0320 	and.w	r3, r3, #32
    7362:	b2db      	uxtb	r3, r3
    7364:	2b00      	cmp	r3, #0
    7366:	d004      	beq.n	7372 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    7368:	683b      	ldr	r3, [r7, #0]
    736a:	689b      	ldr	r3, [r3, #8]
    736c:	68fa      	ldr	r2, [r7, #12]
    736e:	4413      	add	r3, r2
    7370:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    7372:	68b8      	ldr	r0, [r7, #8]
    7374:	4b18      	ldr	r3, [pc, #96]	; (73d8 <_qspi_sync_run_transfer+0x94>)
    7376:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7378:	683b      	ldr	r3, [r7, #0]
    737a:	691b      	ldr	r3, [r3, #16]
    737c:	2b00      	cmp	r3, #0
    737e:	d103      	bne.n	7388 <_qspi_sync_run_transfer+0x44>
    7380:	683b      	ldr	r3, [r7, #0]
    7382:	695b      	ldr	r3, [r3, #20]
    7384:	2b00      	cmp	r3, #0
    7386:	d001      	beq.n	738c <_qspi_sync_run_transfer+0x48>
    7388:	2301      	movs	r3, #1
    738a:	e000      	b.n	738e <_qspi_sync_run_transfer+0x4a>
    738c:	2300      	movs	r3, #0
    738e:	f003 0301 	and.w	r3, r3, #1
    7392:	b2db      	uxtb	r3, r3
    7394:	2282      	movs	r2, #130	; 0x82
    7396:	4911      	ldr	r1, [pc, #68]	; (73dc <_qspi_sync_run_transfer+0x98>)
    7398:	4618      	mov	r0, r3
    739a:	4b11      	ldr	r3, [pc, #68]	; (73e0 <_qspi_sync_run_transfer+0x9c>)
    739c:	4798      	blx	r3

	if (cmd->tx_buf) {
    739e:	683b      	ldr	r3, [r7, #0]
    73a0:	691b      	ldr	r3, [r3, #16]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d008      	beq.n	73b8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    73a6:	683b      	ldr	r3, [r7, #0]
    73a8:	6919      	ldr	r1, [r3, #16]
    73aa:	683b      	ldr	r3, [r7, #0]
    73ac:	68db      	ldr	r3, [r3, #12]
    73ae:	461a      	mov	r2, r3
    73b0:	68f8      	ldr	r0, [r7, #12]
    73b2:	4b0c      	ldr	r3, [pc, #48]	; (73e4 <_qspi_sync_run_transfer+0xa0>)
    73b4:	4798      	blx	r3
    73b6:	e007      	b.n	73c8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    73b8:	683b      	ldr	r3, [r7, #0]
    73ba:	6958      	ldr	r0, [r3, #20]
    73bc:	683b      	ldr	r3, [r7, #0]
    73be:	68db      	ldr	r3, [r3, #12]
    73c0:	461a      	mov	r2, r3
    73c2:	68f9      	ldr	r1, [r7, #12]
    73c4:	4b07      	ldr	r3, [pc, #28]	; (73e4 <_qspi_sync_run_transfer+0xa0>)
    73c6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    73c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    73cc:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    73d0:	bf00      	nop
    73d2:	3710      	adds	r7, #16
    73d4:	46bd      	mov	sp, r7
    73d6:	bd80      	pop	{r7, pc}
    73d8:	00007199 	.word	0x00007199
    73dc:	0001ad6c 	.word	0x0001ad6c
    73e0:	00004bbd 	.word	0x00004bbd
    73e4:	000071b1 	.word	0x000071b1

000073e8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    73e8:	b580      	push	{r7, lr}
    73ea:	b082      	sub	sp, #8
    73ec:	af00      	add	r7, sp, #0
    73ee:	6078      	str	r0, [r7, #4]
    73f0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    73f2:	6839      	ldr	r1, [r7, #0]
    73f4:	6878      	ldr	r0, [r7, #4]
    73f6:	4b14      	ldr	r3, [pc, #80]	; (7448 <_qspi_sync_serial_run_command+0x60>)
    73f8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    73fa:	683b      	ldr	r3, [r7, #0]
    73fc:	781b      	ldrb	r3, [r3, #0]
    73fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7402:	b2db      	uxtb	r3, r3
    7404:	2b00      	cmp	r3, #0
    7406:	d003      	beq.n	7410 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    7408:	6839      	ldr	r1, [r7, #0]
    740a:	6878      	ldr	r0, [r7, #4]
    740c:	4b0f      	ldr	r3, [pc, #60]	; (744c <_qspi_sync_serial_run_command+0x64>)
    740e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    7410:	687b      	ldr	r3, [r7, #4]
    7412:	681b      	ldr	r3, [r3, #0]
    7414:	4618      	mov	r0, r3
    7416:	4b0e      	ldr	r3, [pc, #56]	; (7450 <_qspi_sync_serial_run_command+0x68>)
    7418:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    741a:	bf00      	nop
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	681b      	ldr	r3, [r3, #0]
    7420:	4618      	mov	r0, r3
    7422:	4b0c      	ldr	r3, [pc, #48]	; (7454 <_qspi_sync_serial_run_command+0x6c>)
    7424:	4798      	blx	r3
    7426:	4603      	mov	r3, r0
    7428:	f083 0301 	eor.w	r3, r3, #1
    742c:	b2db      	uxtb	r3, r3
    742e:	2b00      	cmp	r3, #0
    7430:	d1f4      	bne.n	741c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    7432:	687b      	ldr	r3, [r7, #4]
    7434:	681b      	ldr	r3, [r3, #0]
    7436:	4618      	mov	r0, r3
    7438:	4b07      	ldr	r3, [pc, #28]	; (7458 <_qspi_sync_serial_run_command+0x70>)
    743a:	4798      	blx	r3
	return ERR_NONE;
    743c:	2300      	movs	r3, #0
}
    743e:	4618      	mov	r0, r3
    7440:	3708      	adds	r7, #8
    7442:	46bd      	mov	sp, r7
    7444:	bd80      	pop	{r7, pc}
    7446:	bf00      	nop
    7448:	000072c1 	.word	0x000072c1
    744c:	00007345 	.word	0x00007345
    7450:	000071e5 	.word	0x000071e5
    7454:	0000705d 	.word	0x0000705d
    7458:	00007085 	.word	0x00007085

0000745c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    745c:	b480      	push	{r7}
    745e:	b083      	sub	sp, #12
    7460:	af00      	add	r7, sp, #0
    7462:	6078      	str	r0, [r7, #4]
    7464:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7466:	bf00      	nop
    7468:	687b      	ldr	r3, [r7, #4]
    746a:	691a      	ldr	r2, [r3, #16]
    746c:	683b      	ldr	r3, [r7, #0]
    746e:	4013      	ands	r3, r2
    7470:	2b00      	cmp	r3, #0
    7472:	d1f9      	bne.n	7468 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    7474:	bf00      	nop
    7476:	370c      	adds	r7, #12
    7478:	46bd      	mov	sp, r7
    747a:	f85d 7b04 	ldr.w	r7, [sp], #4
    747e:	4770      	bx	lr

00007480 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    7480:	b480      	push	{r7}
    7482:	b083      	sub	sp, #12
    7484:	af00      	add	r7, sp, #0
    7486:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7488:	687b      	ldr	r3, [r7, #4]
    748a:	f44f 7280 	mov.w	r2, #256	; 0x100
    748e:	819a      	strh	r2, [r3, #12]
}
    7490:	bf00      	nop
    7492:	370c      	adds	r7, #12
    7494:	46bd      	mov	sp, r7
    7496:	f85d 7b04 	ldr.w	r7, [sp], #4
    749a:	4770      	bx	lr

0000749c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    749c:	b480      	push	{r7}
    749e:	b083      	sub	sp, #12
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    74a4:	687b      	ldr	r3, [r7, #4]
    74a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    74aa:	819a      	strh	r2, [r3, #12]
}
    74ac:	bf00      	nop
    74ae:	370c      	adds	r7, #12
    74b0:	46bd      	mov	sp, r7
    74b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b6:	4770      	bx	lr

000074b8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    74b8:	b480      	push	{r7}
    74ba:	b083      	sub	sp, #12
    74bc:	af00      	add	r7, sp, #0
    74be:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	899b      	ldrh	r3, [r3, #12]
    74c4:	b29b      	uxth	r3, r3
}
    74c6:	4618      	mov	r0, r3
    74c8:	370c      	adds	r7, #12
    74ca:	46bd      	mov	sp, r7
    74cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    74d0:	4770      	bx	lr

000074d2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    74d2:	b480      	push	{r7}
    74d4:	b083      	sub	sp, #12
    74d6:	af00      	add	r7, sp, #0
    74d8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    74da:	687b      	ldr	r3, [r7, #4]
    74dc:	895b      	ldrh	r3, [r3, #10]
    74de:	b29b      	uxth	r3, r3
}
    74e0:	4618      	mov	r0, r3
    74e2:	370c      	adds	r7, #12
    74e4:	46bd      	mov	sp, r7
    74e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ea:	4770      	bx	lr

000074ec <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    74ec:	b580      	push	{r7, lr}
    74ee:	b082      	sub	sp, #8
    74f0:	af00      	add	r7, sp, #0
    74f2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    74f4:	687b      	ldr	r3, [r7, #4]
    74f6:	881b      	ldrh	r3, [r3, #0]
    74f8:	b29b      	uxth	r3, r3
    74fa:	f043 0301 	orr.w	r3, r3, #1
    74fe:	b29a      	uxth	r2, r3
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    7504:	2101      	movs	r1, #1
    7506:	6878      	ldr	r0, [r7, #4]
    7508:	4b02      	ldr	r3, [pc, #8]	; (7514 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    750a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    750c:	bf00      	nop
    750e:	3708      	adds	r7, #8
    7510:	46bd      	mov	sp, r7
    7512:	bd80      	pop	{r7, pc}
    7514:	0000745d 	.word	0x0000745d

00007518 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7518:	b580      	push	{r7, lr}
    751a:	b082      	sub	sp, #8
    751c:	af00      	add	r7, sp, #0
    751e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	881b      	ldrh	r3, [r3, #0]
    7524:	b29b      	uxth	r3, r3
    7526:	f043 0302 	orr.w	r3, r3, #2
    752a:	b29a      	uxth	r2, r3
    752c:	687b      	ldr	r3, [r7, #4]
    752e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7530:	f248 0103 	movw	r1, #32771	; 0x8003
    7534:	6878      	ldr	r0, [r7, #4]
    7536:	4b03      	ldr	r3, [pc, #12]	; (7544 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    7538:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    753a:	bf00      	nop
    753c:	3708      	adds	r7, #8
    753e:	46bd      	mov	sp, r7
    7540:	bd80      	pop	{r7, pc}
    7542:	bf00      	nop
    7544:	0000745d 	.word	0x0000745d

00007548 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7548:	b580      	push	{r7, lr}
    754a:	b084      	sub	sp, #16
    754c:	af00      	add	r7, sp, #0
    754e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7550:	f248 0103 	movw	r1, #32771	; 0x8003
    7554:	6878      	ldr	r0, [r7, #4]
    7556:	4b0a      	ldr	r3, [pc, #40]	; (7580 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    7558:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	881b      	ldrh	r3, [r3, #0]
    755e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    7560:	89fb      	ldrh	r3, [r7, #14]
    7562:	085b      	lsrs	r3, r3, #1
    7564:	b29b      	uxth	r3, r3
    7566:	f003 0301 	and.w	r3, r3, #1
    756a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    756c:	89fb      	ldrh	r3, [r7, #14]
    756e:	2b00      	cmp	r3, #0
    7570:	bf14      	ite	ne
    7572:	2301      	movne	r3, #1
    7574:	2300      	moveq	r3, #0
    7576:	b2db      	uxtb	r3, r3
}
    7578:	4618      	mov	r0, r3
    757a:	3710      	adds	r7, #16
    757c:	46bd      	mov	sp, r7
    757e:	bd80      	pop	{r7, pc}
    7580:	0000745d 	.word	0x0000745d

00007584 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7584:	b580      	push	{r7, lr}
    7586:	b082      	sub	sp, #8
    7588:	af00      	add	r7, sp, #0
    758a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	881b      	ldrh	r3, [r3, #0]
    7590:	b29b      	uxth	r3, r3
    7592:	f023 0302 	bic.w	r3, r3, #2
    7596:	b29a      	uxth	r2, r3
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    759c:	f248 0103 	movw	r1, #32771	; 0x8003
    75a0:	6878      	ldr	r0, [r7, #4]
    75a2:	4b03      	ldr	r3, [pc, #12]	; (75b0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    75a4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    75a6:	bf00      	nop
    75a8:	3708      	adds	r7, #8
    75aa:	46bd      	mov	sp, r7
    75ac:	bd80      	pop	{r7, pc}
    75ae:	bf00      	nop
    75b0:	0000745d 	.word	0x0000745d

000075b4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b082      	sub	sp, #8
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
    75bc:	460b      	mov	r3, r1
    75be:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	887a      	ldrh	r2, [r7, #2]
    75c4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    75c6:	f248 0103 	movw	r1, #32771	; 0x8003
    75ca:	6878      	ldr	r0, [r7, #4]
    75cc:	4b02      	ldr	r3, [pc, #8]	; (75d8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    75ce:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    75d0:	bf00      	nop
    75d2:	3708      	adds	r7, #8
    75d4:	46bd      	mov	sp, r7
    75d6:	bd80      	pop	{r7, pc}
    75d8:	0000745d 	.word	0x0000745d

000075dc <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    75dc:	b580      	push	{r7, lr}
    75de:	b082      	sub	sp, #8
    75e0:	af00      	add	r7, sp, #0
    75e2:	6078      	str	r0, [r7, #4]
    75e4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    75e6:	687b      	ldr	r3, [r7, #4]
    75e8:	683a      	ldr	r2, [r7, #0]
    75ea:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    75ec:	2108      	movs	r1, #8
    75ee:	6878      	ldr	r0, [r7, #4]
    75f0:	4b02      	ldr	r3, [pc, #8]	; (75fc <hri_rtcmode0_write_COUNT_reg+0x20>)
    75f2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    75f4:	bf00      	nop
    75f6:	3708      	adds	r7, #8
    75f8:	46bd      	mov	sp, r7
    75fa:	bd80      	pop	{r7, pc}
    75fc:	0000745d 	.word	0x0000745d

00007600 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7600:	b580      	push	{r7, lr}
    7602:	b082      	sub	sp, #8
    7604:	af00      	add	r7, sp, #0
    7606:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7608:	2108      	movs	r1, #8
    760a:	6878      	ldr	r0, [r7, #4]
    760c:	4b03      	ldr	r3, [pc, #12]	; (761c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    760e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7610:	687b      	ldr	r3, [r7, #4]
    7612:	699b      	ldr	r3, [r3, #24]
}
    7614:	4618      	mov	r0, r3
    7616:	3708      	adds	r7, #8
    7618:	46bd      	mov	sp, r7
    761a:	bd80      	pop	{r7, pc}
    761c:	0000745d 	.word	0x0000745d

00007620 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7620:	b480      	push	{r7}
    7622:	b083      	sub	sp, #12
    7624:	af00      	add	r7, sp, #0
    7626:	6078      	str	r0, [r7, #4]
    7628:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    762a:	687b      	ldr	r3, [r7, #4]
    762c:	683a      	ldr	r2, [r7, #0]
    762e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7630:	bf00      	nop
    7632:	370c      	adds	r7, #12
    7634:	46bd      	mov	sp, r7
    7636:	f85d 7b04 	ldr.w	r7, [sp], #4
    763a:	4770      	bx	lr

0000763c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    763c:	b580      	push	{r7, lr}
    763e:	b082      	sub	sp, #8
    7640:	af00      	add	r7, sp, #0
    7642:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	2b00      	cmp	r3, #0
    7648:	d005      	beq.n	7656 <_calendar_init+0x1a>
    764a:	687b      	ldr	r3, [r7, #4]
    764c:	681b      	ldr	r3, [r3, #0]
    764e:	2b00      	cmp	r3, #0
    7650:	d001      	beq.n	7656 <_calendar_init+0x1a>
    7652:	2301      	movs	r3, #1
    7654:	e000      	b.n	7658 <_calendar_init+0x1c>
    7656:	2300      	movs	r3, #0
    7658:	f003 0301 	and.w	r3, r3, #1
    765c:	b2db      	uxtb	r3, r3
    765e:	222f      	movs	r2, #47	; 0x2f
    7660:	491b      	ldr	r1, [pc, #108]	; (76d0 <_calendar_init+0x94>)
    7662:	4618      	mov	r0, r3
    7664:	4b1b      	ldr	r3, [pc, #108]	; (76d4 <_calendar_init+0x98>)
    7666:	4798      	blx	r3

	_rtc_dev = dev;
    7668:	4a1b      	ldr	r2, [pc, #108]	; (76d8 <_calendar_init+0x9c>)
    766a:	687b      	ldr	r3, [r7, #4]
    766c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	681b      	ldr	r3, [r3, #0]
    7672:	4618      	mov	r0, r3
    7674:	4b19      	ldr	r3, [pc, #100]	; (76dc <_calendar_init+0xa0>)
    7676:	4798      	blx	r3
    7678:	4603      	mov	r3, r0
    767a:	2b00      	cmp	r3, #0
    767c:	d00a      	beq.n	7694 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	681b      	ldr	r3, [r3, #0]
    7682:	4618      	mov	r0, r3
    7684:	4b16      	ldr	r3, [pc, #88]	; (76e0 <_calendar_init+0xa4>)
    7686:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	681b      	ldr	r3, [r3, #0]
    768c:	2102      	movs	r1, #2
    768e:	4618      	mov	r0, r3
    7690:	4b14      	ldr	r3, [pc, #80]	; (76e4 <_calendar_init+0xa8>)
    7692:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	681b      	ldr	r3, [r3, #0]
    7698:	4618      	mov	r0, r3
    769a:	4b13      	ldr	r3, [pc, #76]	; (76e8 <_calendar_init+0xac>)
    769c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	681b      	ldr	r3, [r3, #0]
    76a2:	2101      	movs	r1, #1
    76a4:	4618      	mov	r0, r3
    76a6:	4b0f      	ldr	r3, [pc, #60]	; (76e4 <_calendar_init+0xa8>)
    76a8:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	681b      	ldr	r3, [r3, #0]
    76ae:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    76b2:	4618      	mov	r0, r3
    76b4:	4b0d      	ldr	r3, [pc, #52]	; (76ec <_calendar_init+0xb0>)
    76b6:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    76bc:	2100      	movs	r1, #0
    76be:	4618      	mov	r0, r3
    76c0:	4b0b      	ldr	r3, [pc, #44]	; (76f0 <_calendar_init+0xb4>)
    76c2:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    76c4:	2300      	movs	r3, #0
}
    76c6:	4618      	mov	r0, r3
    76c8:	3708      	adds	r7, #8
    76ca:	46bd      	mov	sp, r7
    76cc:	bd80      	pop	{r7, pc}
    76ce:	bf00      	nop
    76d0:	0001ad84 	.word	0x0001ad84
    76d4:	00004bbd 	.word	0x00004bbd
    76d8:	20002310 	.word	0x20002310
    76dc:	00007549 	.word	0x00007549
    76e0:	00007585 	.word	0x00007585
    76e4:	0000745d 	.word	0x0000745d
    76e8:	000074ed 	.word	0x000074ed
    76ec:	000075b5 	.word	0x000075b5
    76f0:	00007621 	.word	0x00007621

000076f4 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	b082      	sub	sp, #8
    76f8:	af00      	add	r7, sp, #0
    76fa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    76fc:	687b      	ldr	r3, [r7, #4]
    76fe:	2b00      	cmp	r3, #0
    7700:	d005      	beq.n	770e <_calendar_enable+0x1a>
    7702:	687b      	ldr	r3, [r7, #4]
    7704:	681b      	ldr	r3, [r3, #0]
    7706:	2b00      	cmp	r3, #0
    7708:	d001      	beq.n	770e <_calendar_enable+0x1a>
    770a:	2301      	movs	r3, #1
    770c:	e000      	b.n	7710 <_calendar_enable+0x1c>
    770e:	2300      	movs	r3, #0
    7710:	f003 0301 	and.w	r3, r3, #1
    7714:	b2db      	uxtb	r3, r3
    7716:	2275      	movs	r2, #117	; 0x75
    7718:	4906      	ldr	r1, [pc, #24]	; (7734 <_calendar_enable+0x40>)
    771a:	4618      	mov	r0, r3
    771c:	4b06      	ldr	r3, [pc, #24]	; (7738 <_calendar_enable+0x44>)
    771e:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    7720:	687b      	ldr	r3, [r7, #4]
    7722:	681b      	ldr	r3, [r3, #0]
    7724:	4618      	mov	r0, r3
    7726:	4b05      	ldr	r3, [pc, #20]	; (773c <_calendar_enable+0x48>)
    7728:	4798      	blx	r3

	return ERR_NONE;
    772a:	2300      	movs	r3, #0
}
    772c:	4618      	mov	r0, r3
    772e:	3708      	adds	r7, #8
    7730:	46bd      	mov	sp, r7
    7732:	bd80      	pop	{r7, pc}
    7734:	0001ad84 	.word	0x0001ad84
    7738:	00004bbd 	.word	0x00004bbd
    773c:	00007519 	.word	0x00007519

00007740 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    7740:	b580      	push	{r7, lr}
    7742:	b082      	sub	sp, #8
    7744:	af00      	add	r7, sp, #0
    7746:	6078      	str	r0, [r7, #4]
    7748:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	2b00      	cmp	r3, #0
    774e:	d005      	beq.n	775c <_calendar_set_counter+0x1c>
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	2b00      	cmp	r3, #0
    7756:	d001      	beq.n	775c <_calendar_set_counter+0x1c>
    7758:	2301      	movs	r3, #1
    775a:	e000      	b.n	775e <_calendar_set_counter+0x1e>
    775c:	2300      	movs	r3, #0
    775e:	f003 0301 	and.w	r3, r3, #1
    7762:	b2db      	uxtb	r3, r3
    7764:	228d      	movs	r2, #141	; 0x8d
    7766:	4907      	ldr	r1, [pc, #28]	; (7784 <_calendar_set_counter+0x44>)
    7768:	4618      	mov	r0, r3
    776a:	4b07      	ldr	r3, [pc, #28]	; (7788 <_calendar_set_counter+0x48>)
    776c:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	681b      	ldr	r3, [r3, #0]
    7772:	6839      	ldr	r1, [r7, #0]
    7774:	4618      	mov	r0, r3
    7776:	4b05      	ldr	r3, [pc, #20]	; (778c <_calendar_set_counter+0x4c>)
    7778:	4798      	blx	r3

	return ERR_NONE;
    777a:	2300      	movs	r3, #0
}
    777c:	4618      	mov	r0, r3
    777e:	3708      	adds	r7, #8
    7780:	46bd      	mov	sp, r7
    7782:	bd80      	pop	{r7, pc}
    7784:	0001ad84 	.word	0x0001ad84
    7788:	00004bbd 	.word	0x00004bbd
    778c:	000075dd 	.word	0x000075dd

00007790 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    7790:	b580      	push	{r7, lr}
    7792:	b082      	sub	sp, #8
    7794:	af00      	add	r7, sp, #0
    7796:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7798:	687b      	ldr	r3, [r7, #4]
    779a:	2b00      	cmp	r3, #0
    779c:	d005      	beq.n	77aa <_calendar_get_counter+0x1a>
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	681b      	ldr	r3, [r3, #0]
    77a2:	2b00      	cmp	r3, #0
    77a4:	d001      	beq.n	77aa <_calendar_get_counter+0x1a>
    77a6:	2301      	movs	r3, #1
    77a8:	e000      	b.n	77ac <_calendar_get_counter+0x1c>
    77aa:	2300      	movs	r3, #0
    77ac:	f003 0301 	and.w	r3, r3, #1
    77b0:	b2db      	uxtb	r3, r3
    77b2:	2299      	movs	r2, #153	; 0x99
    77b4:	4906      	ldr	r1, [pc, #24]	; (77d0 <_calendar_get_counter+0x40>)
    77b6:	4618      	mov	r0, r3
    77b8:	4b06      	ldr	r3, [pc, #24]	; (77d4 <_calendar_get_counter+0x44>)
    77ba:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	681b      	ldr	r3, [r3, #0]
    77c0:	4618      	mov	r0, r3
    77c2:	4b05      	ldr	r3, [pc, #20]	; (77d8 <_calendar_get_counter+0x48>)
    77c4:	4798      	blx	r3
    77c6:	4603      	mov	r3, r0
}
    77c8:	4618      	mov	r0, r3
    77ca:	3708      	adds	r7, #8
    77cc:	46bd      	mov	sp, r7
    77ce:	bd80      	pop	{r7, pc}
    77d0:	0001ad84 	.word	0x0001ad84
    77d4:	00004bbd 	.word	0x00004bbd
    77d8:	00007601 	.word	0x00007601

000077dc <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    77dc:	b580      	push	{r7, lr}
    77de:	b084      	sub	sp, #16
    77e0:	af00      	add	r7, sp, #0
    77e2:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	4618      	mov	r0, r3
    77ea:	4b19      	ldr	r3, [pc, #100]	; (7850 <_rtc_interrupt_handler+0x74>)
    77ec:	4798      	blx	r3
    77ee:	4603      	mov	r3, r0
    77f0:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	681b      	ldr	r3, [r3, #0]
    77f6:	4618      	mov	r0, r3
    77f8:	4b16      	ldr	r3, [pc, #88]	; (7854 <_rtc_interrupt_handler+0x78>)
    77fa:	4798      	blx	r3
    77fc:	4603      	mov	r3, r0
    77fe:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7800:	89fa      	ldrh	r2, [r7, #14]
    7802:	89bb      	ldrh	r3, [r7, #12]
    7804:	4013      	ands	r3, r2
    7806:	b29b      	uxth	r3, r3
    7808:	f403 7380 	and.w	r3, r3, #256	; 0x100
    780c:	2b00      	cmp	r3, #0
    780e:	d009      	beq.n	7824 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	685b      	ldr	r3, [r3, #4]
    7814:	6878      	ldr	r0, [r7, #4]
    7816:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	4618      	mov	r0, r3
    781e:	4b0e      	ldr	r3, [pc, #56]	; (7858 <_rtc_interrupt_handler+0x7c>)
    7820:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    7822:	e010      	b.n	7846 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    7824:	89fa      	ldrh	r2, [r7, #14]
    7826:	89bb      	ldrh	r3, [r7, #12]
    7828:	4013      	ands	r3, r2
    782a:	b29b      	uxth	r3, r3
    782c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7830:	2b00      	cmp	r3, #0
    7832:	d008      	beq.n	7846 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	689b      	ldr	r3, [r3, #8]
    7838:	6878      	ldr	r0, [r7, #4]
    783a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    783c:	687b      	ldr	r3, [r7, #4]
    783e:	681b      	ldr	r3, [r3, #0]
    7840:	4618      	mov	r0, r3
    7842:	4b06      	ldr	r3, [pc, #24]	; (785c <_rtc_interrupt_handler+0x80>)
    7844:	4798      	blx	r3
}
    7846:	bf00      	nop
    7848:	3710      	adds	r7, #16
    784a:	46bd      	mov	sp, r7
    784c:	bd80      	pop	{r7, pc}
    784e:	bf00      	nop
    7850:	000074b9 	.word	0x000074b9
    7854:	000074d3 	.word	0x000074d3
    7858:	00007481 	.word	0x00007481
    785c:	0000749d 	.word	0x0000749d

00007860 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7860:	b580      	push	{r7, lr}
    7862:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    7864:	4b03      	ldr	r3, [pc, #12]	; (7874 <RTC_Handler+0x14>)
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	4618      	mov	r0, r3
    786a:	4b03      	ldr	r3, [pc, #12]	; (7878 <RTC_Handler+0x18>)
    786c:	4798      	blx	r3
}
    786e:	bf00      	nop
    7870:	bd80      	pop	{r7, pc}
    7872:	bf00      	nop
    7874:	20002310 	.word	0x20002310
    7878:	000077dd 	.word	0x000077dd

0000787c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    787c:	b480      	push	{r7}
    787e:	b083      	sub	sp, #12
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
    7884:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7886:	bf00      	nop
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	69da      	ldr	r2, [r3, #28]
    788c:	683b      	ldr	r3, [r7, #0]
    788e:	4013      	ands	r3, r2
    7890:	2b00      	cmp	r3, #0
    7892:	d1f9      	bne.n	7888 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    7894:	bf00      	nop
    7896:	370c      	adds	r7, #12
    7898:	46bd      	mov	sp, r7
    789a:	f85d 7b04 	ldr.w	r7, [sp], #4
    789e:	4770      	bx	lr

000078a0 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    78a0:	b480      	push	{r7}
    78a2:	b083      	sub	sp, #12
    78a4:	af00      	add	r7, sp, #0
    78a6:	6078      	str	r0, [r7, #4]
    78a8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    78aa:	687b      	ldr	r3, [r7, #4]
    78ac:	69da      	ldr	r2, [r3, #28]
    78ae:	683b      	ldr	r3, [r7, #0]
    78b0:	4013      	ands	r3, r2
    78b2:	2b00      	cmp	r3, #0
    78b4:	bf14      	ite	ne
    78b6:	2301      	movne	r3, #1
    78b8:	2300      	moveq	r3, #0
    78ba:	b2db      	uxtb	r3, r3
}
    78bc:	4618      	mov	r0, r3
    78be:	370c      	adds	r7, #12
    78c0:	46bd      	mov	sp, r7
    78c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    78c6:	4770      	bx	lr

000078c8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    78c8:	b480      	push	{r7}
    78ca:	b083      	sub	sp, #12
    78cc:	af00      	add	r7, sp, #0
    78ce:	6078      	str	r0, [r7, #4]
    78d0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    78d2:	bf00      	nop
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	69da      	ldr	r2, [r3, #28]
    78d8:	683b      	ldr	r3, [r7, #0]
    78da:	4013      	ands	r3, r2
    78dc:	2b00      	cmp	r3, #0
    78de:	d1f9      	bne.n	78d4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    78e0:	bf00      	nop
    78e2:	370c      	adds	r7, #12
    78e4:	46bd      	mov	sp, r7
    78e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78ea:	4770      	bx	lr

000078ec <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    78ec:	b480      	push	{r7}
    78ee:	b083      	sub	sp, #12
    78f0:	af00      	add	r7, sp, #0
    78f2:	6078      	str	r0, [r7, #4]
    78f4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	69da      	ldr	r2, [r3, #28]
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	4013      	ands	r3, r2
    78fe:	2b00      	cmp	r3, #0
    7900:	bf14      	ite	ne
    7902:	2301      	movne	r3, #1
    7904:	2300      	moveq	r3, #0
    7906:	b2db      	uxtb	r3, r3
}
    7908:	4618      	mov	r0, r3
    790a:	370c      	adds	r7, #12
    790c:	46bd      	mov	sp, r7
    790e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7912:	4770      	bx	lr

00007914 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    7914:	b480      	push	{r7}
    7916:	b083      	sub	sp, #12
    7918:	af00      	add	r7, sp, #0
    791a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	2201      	movs	r2, #1
    7920:	761a      	strb	r2, [r3, #24]
}
    7922:	bf00      	nop
    7924:	370c      	adds	r7, #12
    7926:	46bd      	mov	sp, r7
    7928:	f85d 7b04 	ldr.w	r7, [sp], #4
    792c:	4770      	bx	lr

0000792e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    792e:	b480      	push	{r7}
    7930:	b083      	sub	sp, #12
    7932:	af00      	add	r7, sp, #0
    7934:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	2202      	movs	r2, #2
    793a:	761a      	strb	r2, [r3, #24]
}
    793c:	bf00      	nop
    793e:	370c      	adds	r7, #12
    7940:	46bd      	mov	sp, r7
    7942:	f85d 7b04 	ldr.w	r7, [sp], #4
    7946:	4770      	bx	lr

00007948 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7948:	b480      	push	{r7}
    794a:	b083      	sub	sp, #12
    794c:	af00      	add	r7, sp, #0
    794e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	7e1b      	ldrb	r3, [r3, #24]
    7954:	b2db      	uxtb	r3, r3
}
    7956:	4618      	mov	r0, r3
    7958:	370c      	adds	r7, #12
    795a:	46bd      	mov	sp, r7
    795c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7960:	4770      	bx	lr

00007962 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7962:	b480      	push	{r7}
    7964:	b085      	sub	sp, #20
    7966:	af00      	add	r7, sp, #0
    7968:	6078      	str	r0, [r7, #4]
    796a:	460b      	mov	r3, r1
    796c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    796e:	687b      	ldr	r3, [r7, #4]
    7970:	7e1b      	ldrb	r3, [r3, #24]
    7972:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7974:	7bfa      	ldrb	r2, [r7, #15]
    7976:	78fb      	ldrb	r3, [r7, #3]
    7978:	4013      	ands	r3, r2
    797a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    797c:	7bfb      	ldrb	r3, [r7, #15]
}
    797e:	4618      	mov	r0, r3
    7980:	3714      	adds	r7, #20
    7982:	46bd      	mov	sp, r7
    7984:	f85d 7b04 	ldr.w	r7, [sp], #4
    7988:	4770      	bx	lr

0000798a <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    798a:	b480      	push	{r7}
    798c:	b083      	sub	sp, #12
    798e:	af00      	add	r7, sp, #0
    7990:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	7e1b      	ldrb	r3, [r3, #24]
    7996:	b2db      	uxtb	r3, r3
}
    7998:	4618      	mov	r0, r3
    799a:	370c      	adds	r7, #12
    799c:	46bd      	mov	sp, r7
    799e:	f85d 7b04 	ldr.w	r7, [sp], #4
    79a2:	4770      	bx	lr

000079a4 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    79a4:	b480      	push	{r7}
    79a6:	b083      	sub	sp, #12
    79a8:	af00      	add	r7, sp, #0
    79aa:	6078      	str	r0, [r7, #4]
    79ac:	460b      	mov	r3, r1
    79ae:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	78fa      	ldrb	r2, [r7, #3]
    79b4:	761a      	strb	r2, [r3, #24]
}
    79b6:	bf00      	nop
    79b8:	370c      	adds	r7, #12
    79ba:	46bd      	mov	sp, r7
    79bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c0:	4770      	bx	lr
	...

000079c4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    79c4:	b580      	push	{r7, lr}
    79c6:	b082      	sub	sp, #8
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	681b      	ldr	r3, [r3, #0]
    79d0:	f043 0202 	orr.w	r2, r3, #2
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    79d8:	2103      	movs	r1, #3
    79da:	6878      	ldr	r0, [r7, #4]
    79dc:	4b02      	ldr	r3, [pc, #8]	; (79e8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    79de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    79e0:	bf00      	nop
    79e2:	3708      	adds	r7, #8
    79e4:	46bd      	mov	sp, r7
    79e6:	bd80      	pop	{r7, pc}
    79e8:	0000787d 	.word	0x0000787d

000079ec <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    79ec:	b580      	push	{r7, lr}
    79ee:	b082      	sub	sp, #8
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	f023 0202 	bic.w	r2, r3, #2
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7a00:	2103      	movs	r1, #3
    7a02:	6878      	ldr	r0, [r7, #4]
    7a04:	4b02      	ldr	r3, [pc, #8]	; (7a10 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7a06:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a08:	bf00      	nop
    7a0a:	3708      	adds	r7, #8
    7a0c:	46bd      	mov	sp, r7
    7a0e:	bd80      	pop	{r7, pc}
    7a10:	0000787d 	.word	0x0000787d

00007a14 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7a14:	b480      	push	{r7}
    7a16:	b085      	sub	sp, #20
    7a18:	af00      	add	r7, sp, #0
    7a1a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7a22:	68fb      	ldr	r3, [r7, #12]
    7a24:	0edb      	lsrs	r3, r3, #27
    7a26:	f003 0301 	and.w	r3, r3, #1
    7a2a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7a2c:	68fb      	ldr	r3, [r7, #12]
    7a2e:	2b00      	cmp	r3, #0
    7a30:	bf14      	ite	ne
    7a32:	2301      	movne	r3, #1
    7a34:	2300      	moveq	r3, #0
    7a36:	b2db      	uxtb	r3, r3
}
    7a38:	4618      	mov	r0, r3
    7a3a:	3714      	adds	r7, #20
    7a3c:	46bd      	mov	sp, r7
    7a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a42:	4770      	bx	lr

00007a44 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7a44:	b580      	push	{r7, lr}
    7a46:	b084      	sub	sp, #16
    7a48:	af00      	add	r7, sp, #0
    7a4a:	6078      	str	r0, [r7, #4]
    7a4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7a4e:	2103      	movs	r1, #3
    7a50:	6878      	ldr	r0, [r7, #4]
    7a52:	4b07      	ldr	r3, [pc, #28]	; (7a70 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7a54:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7a56:	687b      	ldr	r3, [r7, #4]
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7a5c:	68fa      	ldr	r2, [r7, #12]
    7a5e:	683b      	ldr	r3, [r7, #0]
    7a60:	4013      	ands	r3, r2
    7a62:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a64:	68fb      	ldr	r3, [r7, #12]
}
    7a66:	4618      	mov	r0, r3
    7a68:	3710      	adds	r7, #16
    7a6a:	46bd      	mov	sp, r7
    7a6c:	bd80      	pop	{r7, pc}
    7a6e:	bf00      	nop
    7a70:	0000787d 	.word	0x0000787d

00007a74 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b082      	sub	sp, #8
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	683a      	ldr	r2, [r7, #0]
    7a82:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7a84:	2103      	movs	r1, #3
    7a86:	6878      	ldr	r0, [r7, #4]
    7a88:	4b02      	ldr	r3, [pc, #8]	; (7a94 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    7a8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a8c:	bf00      	nop
    7a8e:	3708      	adds	r7, #8
    7a90:	46bd      	mov	sp, r7
    7a92:	bd80      	pop	{r7, pc}
    7a94:	0000787d 	.word	0x0000787d

00007a98 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7a98:	b580      	push	{r7, lr}
    7a9a:	b082      	sub	sp, #8
    7a9c:	af00      	add	r7, sp, #0
    7a9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	681b      	ldr	r3, [r3, #0]
    7aa4:	f043 0202 	orr.w	r2, r3, #2
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7aac:	2103      	movs	r1, #3
    7aae:	6878      	ldr	r0, [r7, #4]
    7ab0:	4b02      	ldr	r3, [pc, #8]	; (7abc <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    7ab2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ab4:	bf00      	nop
    7ab6:	3708      	adds	r7, #8
    7ab8:	46bd      	mov	sp, r7
    7aba:	bd80      	pop	{r7, pc}
    7abc:	000078c9 	.word	0x000078c9

00007ac0 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7ac0:	b580      	push	{r7, lr}
    7ac2:	b084      	sub	sp, #16
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7ac8:	2103      	movs	r1, #3
    7aca:	6878      	ldr	r0, [r7, #4]
    7acc:	4b09      	ldr	r3, [pc, #36]	; (7af4 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    7ace:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7ad0:	687b      	ldr	r3, [r7, #4]
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7ad6:	68fb      	ldr	r3, [r7, #12]
    7ad8:	085b      	lsrs	r3, r3, #1
    7ada:	f003 0301 	and.w	r3, r3, #1
    7ade:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ae0:	68fb      	ldr	r3, [r7, #12]
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	bf14      	ite	ne
    7ae6:	2301      	movne	r3, #1
    7ae8:	2300      	moveq	r3, #0
    7aea:	b2db      	uxtb	r3, r3
}
    7aec:	4618      	mov	r0, r3
    7aee:	3710      	adds	r7, #16
    7af0:	46bd      	mov	sp, r7
    7af2:	bd80      	pop	{r7, pc}
    7af4:	000078c9 	.word	0x000078c9

00007af8 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7af8:	b580      	push	{r7, lr}
    7afa:	b082      	sub	sp, #8
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7b00:	687b      	ldr	r3, [r7, #4]
    7b02:	681b      	ldr	r3, [r3, #0]
    7b04:	f023 0202 	bic.w	r2, r3, #2
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7b0c:	2103      	movs	r1, #3
    7b0e:	6878      	ldr	r0, [r7, #4]
    7b10:	4b02      	ldr	r3, [pc, #8]	; (7b1c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7b12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b14:	bf00      	nop
    7b16:	3708      	adds	r7, #8
    7b18:	46bd      	mov	sp, r7
    7b1a:	bd80      	pop	{r7, pc}
    7b1c:	000078c9 	.word	0x000078c9

00007b20 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	b084      	sub	sp, #16
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
    7b28:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7b2a:	2103      	movs	r1, #3
    7b2c:	6878      	ldr	r0, [r7, #4]
    7b2e:	4b07      	ldr	r3, [pc, #28]	; (7b4c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7b30:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	681b      	ldr	r3, [r3, #0]
    7b36:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7b38:	68fa      	ldr	r2, [r7, #12]
    7b3a:	683b      	ldr	r3, [r7, #0]
    7b3c:	4013      	ands	r3, r2
    7b3e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b40:	68fb      	ldr	r3, [r7, #12]
}
    7b42:	4618      	mov	r0, r3
    7b44:	3710      	adds	r7, #16
    7b46:	46bd      	mov	sp, r7
    7b48:	bd80      	pop	{r7, pc}
    7b4a:	bf00      	nop
    7b4c:	000078c9 	.word	0x000078c9

00007b50 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7b50:	b580      	push	{r7, lr}
    7b52:	b082      	sub	sp, #8
    7b54:	af00      	add	r7, sp, #0
    7b56:	6078      	str	r0, [r7, #4]
    7b58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7b5a:	687b      	ldr	r3, [r7, #4]
    7b5c:	683a      	ldr	r2, [r7, #0]
    7b5e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7b60:	2103      	movs	r1, #3
    7b62:	6878      	ldr	r0, [r7, #4]
    7b64:	4b02      	ldr	r3, [pc, #8]	; (7b70 <hri_sercomspi_write_CTRLA_reg+0x20>)
    7b66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b68:	bf00      	nop
    7b6a:	3708      	adds	r7, #8
    7b6c:	46bd      	mov	sp, r7
    7b6e:	bd80      	pop	{r7, pc}
    7b70:	000078c9 	.word	0x000078c9

00007b74 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7b74:	b580      	push	{r7, lr}
    7b76:	b082      	sub	sp, #8
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	685b      	ldr	r3, [r3, #4]
    7b80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7b88:	2104      	movs	r1, #4
    7b8a:	6878      	ldr	r0, [r7, #4]
    7b8c:	4b02      	ldr	r3, [pc, #8]	; (7b98 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7b8e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b90:	bf00      	nop
    7b92:	3708      	adds	r7, #8
    7b94:	46bd      	mov	sp, r7
    7b96:	bd80      	pop	{r7, pc}
    7b98:	0000787d 	.word	0x0000787d

00007b9c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7b9c:	b580      	push	{r7, lr}
    7b9e:	b082      	sub	sp, #8
    7ba0:	af00      	add	r7, sp, #0
    7ba2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	685b      	ldr	r3, [r3, #4]
    7ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7bb0:	2104      	movs	r1, #4
    7bb2:	6878      	ldr	r0, [r7, #4]
    7bb4:	4b02      	ldr	r3, [pc, #8]	; (7bc0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    7bb6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7bb8:	bf00      	nop
    7bba:	3708      	adds	r7, #8
    7bbc:	46bd      	mov	sp, r7
    7bbe:	bd80      	pop	{r7, pc}
    7bc0:	0000787d 	.word	0x0000787d

00007bc4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7bc4:	b580      	push	{r7, lr}
    7bc6:	b082      	sub	sp, #8
    7bc8:	af00      	add	r7, sp, #0
    7bca:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	685b      	ldr	r3, [r3, #4]
    7bd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7bd4:	687b      	ldr	r3, [r7, #4]
    7bd6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7bd8:	2104      	movs	r1, #4
    7bda:	6878      	ldr	r0, [r7, #4]
    7bdc:	4b02      	ldr	r3, [pc, #8]	; (7be8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7bde:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7be0:	bf00      	nop
    7be2:	3708      	adds	r7, #8
    7be4:	46bd      	mov	sp, r7
    7be6:	bd80      	pop	{r7, pc}
    7be8:	0000787d 	.word	0x0000787d

00007bec <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7bec:	b580      	push	{r7, lr}
    7bee:	b082      	sub	sp, #8
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	685b      	ldr	r3, [r3, #4]
    7bf8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7bfc:	687b      	ldr	r3, [r7, #4]
    7bfe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c00:	2104      	movs	r1, #4
    7c02:	6878      	ldr	r0, [r7, #4]
    7c04:	4b02      	ldr	r3, [pc, #8]	; (7c10 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7c06:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c08:	bf00      	nop
    7c0a:	3708      	adds	r7, #8
    7c0c:	46bd      	mov	sp, r7
    7c0e:	bd80      	pop	{r7, pc}
    7c10:	0000787d 	.word	0x0000787d

00007c14 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
    7c1c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	685a      	ldr	r2, [r3, #4]
    7c22:	683b      	ldr	r3, [r7, #0]
    7c24:	041b      	lsls	r3, r3, #16
    7c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    7c2a:	431a      	orrs	r2, r3
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c30:	2104      	movs	r1, #4
    7c32:	6878      	ldr	r0, [r7, #4]
    7c34:	4b02      	ldr	r3, [pc, #8]	; (7c40 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    7c36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c38:	bf00      	nop
    7c3a:	3708      	adds	r7, #8
    7c3c:	46bd      	mov	sp, r7
    7c3e:	bd80      	pop	{r7, pc}
    7c40:	0000787d 	.word	0x0000787d

00007c44 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	b082      	sub	sp, #8
    7c48:	af00      	add	r7, sp, #0
    7c4a:	6078      	str	r0, [r7, #4]
    7c4c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7c4e:	687b      	ldr	r3, [r7, #4]
    7c50:	683a      	ldr	r2, [r7, #0]
    7c52:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c54:	2104      	movs	r1, #4
    7c56:	6878      	ldr	r0, [r7, #4]
    7c58:	4b02      	ldr	r3, [pc, #8]	; (7c64 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    7c5a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c5c:	bf00      	nop
    7c5e:	3708      	adds	r7, #8
    7c60:	46bd      	mov	sp, r7
    7c62:	bd80      	pop	{r7, pc}
    7c64:	0000787d 	.word	0x0000787d

00007c68 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	b082      	sub	sp, #8
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	6078      	str	r0, [r7, #4]
    7c70:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7c72:	687b      	ldr	r3, [r7, #4]
    7c74:	683a      	ldr	r2, [r7, #0]
    7c76:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    7c78:	2117      	movs	r1, #23
    7c7a:	6878      	ldr	r0, [r7, #4]
    7c7c:	4b02      	ldr	r3, [pc, #8]	; (7c88 <hri_sercomspi_write_CTRLB_reg+0x20>)
    7c7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c80:	bf00      	nop
    7c82:	3708      	adds	r7, #8
    7c84:	46bd      	mov	sp, r7
    7c86:	bd80      	pop	{r7, pc}
    7c88:	000078c9 	.word	0x000078c9

00007c8c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7c8c:	b480      	push	{r7}
    7c8e:	b083      	sub	sp, #12
    7c90:	af00      	add	r7, sp, #0
    7c92:	6078      	str	r0, [r7, #4]
    7c94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	683a      	ldr	r2, [r7, #0]
    7c9a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c9c:	bf00      	nop
    7c9e:	370c      	adds	r7, #12
    7ca0:	46bd      	mov	sp, r7
    7ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca6:	4770      	bx	lr

00007ca8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    7ca8:	b480      	push	{r7}
    7caa:	b083      	sub	sp, #12
    7cac:	af00      	add	r7, sp, #0
    7cae:	6078      	str	r0, [r7, #4]
    7cb0:	460b      	mov	r3, r1
    7cb2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	78fa      	ldrb	r2, [r7, #3]
    7cb8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cba:	bf00      	nop
    7cbc:	370c      	adds	r7, #12
    7cbe:	46bd      	mov	sp, r7
    7cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cc4:	4770      	bx	lr
	...

00007cc8 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    7cc8:	b580      	push	{r7, lr}
    7cca:	b084      	sub	sp, #16
    7ccc:	af00      	add	r7, sp, #0
    7cce:	6078      	str	r0, [r7, #4]
    7cd0:	460b      	mov	r3, r1
    7cd2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7cd8:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7cda:	68fb      	ldr	r3, [r7, #12]
    7cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    7ce0:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7ce2:	78fb      	ldrb	r3, [r7, #3]
    7ce4:	039b      	lsls	r3, r3, #14
    7ce6:	461a      	mov	r2, r3
    7ce8:	68fb      	ldr	r3, [r7, #12]
    7cea:	4313      	orrs	r3, r2
    7cec:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	68fa      	ldr	r2, [r7, #12]
    7cf2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7cf4:	2104      	movs	r1, #4
    7cf6:	6878      	ldr	r0, [r7, #4]
    7cf8:	4b02      	ldr	r3, [pc, #8]	; (7d04 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    7cfa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cfc:	bf00      	nop
    7cfe:	3710      	adds	r7, #16
    7d00:	46bd      	mov	sp, r7
    7d02:	bd80      	pop	{r7, pc}
    7d04:	0000787d 	.word	0x0000787d

00007d08 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    7d08:	b580      	push	{r7, lr}
    7d0a:	b082      	sub	sp, #8
    7d0c:	af00      	add	r7, sp, #0
    7d0e:	6078      	str	r0, [r7, #4]
    7d10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7d12:	687b      	ldr	r3, [r7, #4]
    7d14:	683a      	ldr	r2, [r7, #0]
    7d16:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d18:	2104      	movs	r1, #4
    7d1a:	6878      	ldr	r0, [r7, #4]
    7d1c:	4b02      	ldr	r3, [pc, #8]	; (7d28 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7d1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d20:	bf00      	nop
    7d22:	3708      	adds	r7, #8
    7d24:	46bd      	mov	sp, r7
    7d26:	bd80      	pop	{r7, pc}
    7d28:	0000787d 	.word	0x0000787d

00007d2c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7d2c:	b580      	push	{r7, lr}
    7d2e:	b082      	sub	sp, #8
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d34:	2104      	movs	r1, #4
    7d36:	6878      	ldr	r0, [r7, #4]
    7d38:	4b03      	ldr	r3, [pc, #12]	; (7d48 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    7d3a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7d40:	4618      	mov	r0, r3
    7d42:	3708      	adds	r7, #8
    7d44:	46bd      	mov	sp, r7
    7d46:	bd80      	pop	{r7, pc}
    7d48:	0000787d 	.word	0x0000787d

00007d4c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7d4c:	b480      	push	{r7}
    7d4e:	b083      	sub	sp, #12
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
    7d54:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7d56:	687b      	ldr	r3, [r7, #4]
    7d58:	683a      	ldr	r2, [r7, #0]
    7d5a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d5c:	bf00      	nop
    7d5e:	370c      	adds	r7, #12
    7d60:	46bd      	mov	sp, r7
    7d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d66:	4770      	bx	lr

00007d68 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    7d68:	b580      	push	{r7, lr}
    7d6a:	b082      	sub	sp, #8
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	6078      	str	r0, [r7, #4]
    7d70:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7d72:	687b      	ldr	r3, [r7, #4]
    7d74:	683a      	ldr	r2, [r7, #0]
    7d76:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d78:	2104      	movs	r1, #4
    7d7a:	6878      	ldr	r0, [r7, #4]
    7d7c:	4b02      	ldr	r3, [pc, #8]	; (7d88 <hri_sercomi2cm_write_DATA_reg+0x20>)
    7d7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d80:	bf00      	nop
    7d82:	3708      	adds	r7, #8
    7d84:	46bd      	mov	sp, r7
    7d86:	bd80      	pop	{r7, pc}
    7d88:	0000787d 	.word	0x0000787d

00007d8c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7d8c:	b580      	push	{r7, lr}
    7d8e:	b082      	sub	sp, #8
    7d90:	af00      	add	r7, sp, #0
    7d92:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d94:	2104      	movs	r1, #4
    7d96:	6878      	ldr	r0, [r7, #4]
    7d98:	4b03      	ldr	r3, [pc, #12]	; (7da8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    7d9a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7d9c:	687b      	ldr	r3, [r7, #4]
    7d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7da0:	4618      	mov	r0, r3
    7da2:	3708      	adds	r7, #8
    7da4:	46bd      	mov	sp, r7
    7da6:	bd80      	pop	{r7, pc}
    7da8:	0000787d 	.word	0x0000787d

00007dac <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    7dac:	b480      	push	{r7}
    7dae:	b083      	sub	sp, #12
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    7db6:	687b      	ldr	r3, [r7, #4]
    7db8:	683a      	ldr	r2, [r7, #0]
    7dba:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dbc:	bf00      	nop
    7dbe:	370c      	adds	r7, #12
    7dc0:	46bd      	mov	sp, r7
    7dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dc6:	4770      	bx	lr

00007dc8 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    7dc8:	b480      	push	{r7}
    7dca:	b083      	sub	sp, #12
    7dcc:	af00      	add	r7, sp, #0
    7dce:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7dd4:	4618      	mov	r0, r3
    7dd6:	370c      	adds	r7, #12
    7dd8:	46bd      	mov	sp, r7
    7dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dde:	4770      	bx	lr

00007de0 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    7de0:	b480      	push	{r7}
    7de2:	b083      	sub	sp, #12
    7de4:	af00      	add	r7, sp, #0
    7de6:	6078      	str	r0, [r7, #4]
    7de8:	460b      	mov	r3, r1
    7dea:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7dec:	687b      	ldr	r3, [r7, #4]
    7dee:	78fa      	ldrb	r2, [r7, #3]
    7df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7df4:	bf00      	nop
    7df6:	370c      	adds	r7, #12
    7df8:	46bd      	mov	sp, r7
    7dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dfe:	4770      	bx	lr

00007e00 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    7e00:	b480      	push	{r7}
    7e02:	b083      	sub	sp, #12
    7e04:	af00      	add	r7, sp, #0
    7e06:	6078      	str	r0, [r7, #4]
    7e08:	460b      	mov	r3, r1
    7e0a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	887a      	ldrh	r2, [r7, #2]
    7e10:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e12:	bf00      	nop
    7e14:	370c      	adds	r7, #12
    7e16:	46bd      	mov	sp, r7
    7e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e1c:	4770      	bx	lr
	...

00007e20 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7e20:	b580      	push	{r7, lr}
    7e22:	b082      	sub	sp, #8
    7e24:	af00      	add	r7, sp, #0
    7e26:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e28:	2104      	movs	r1, #4
    7e2a:	6878      	ldr	r0, [r7, #4]
    7e2c:	4b06      	ldr	r3, [pc, #24]	; (7e48 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7e2e:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7e30:	687b      	ldr	r3, [r7, #4]
    7e32:	8b5b      	ldrh	r3, [r3, #26]
    7e34:	b29b      	uxth	r3, r3
    7e36:	091b      	lsrs	r3, r3, #4
    7e38:	b29b      	uxth	r3, r3
    7e3a:	f003 0303 	and.w	r3, r3, #3
    7e3e:	b29b      	uxth	r3, r3
}
    7e40:	4618      	mov	r0, r3
    7e42:	3708      	adds	r7, #8
    7e44:	46bd      	mov	sp, r7
    7e46:	bd80      	pop	{r7, pc}
    7e48:	0000787d 	.word	0x0000787d

00007e4c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b082      	sub	sp, #8
    7e50:	af00      	add	r7, sp, #0
    7e52:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e54:	2104      	movs	r1, #4
    7e56:	6878      	ldr	r0, [r7, #4]
    7e58:	4b04      	ldr	r3, [pc, #16]	; (7e6c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    7e5a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	8b5b      	ldrh	r3, [r3, #26]
    7e60:	b29b      	uxth	r3, r3
}
    7e62:	4618      	mov	r0, r3
    7e64:	3708      	adds	r7, #8
    7e66:	46bd      	mov	sp, r7
    7e68:	bd80      	pop	{r7, pc}
    7e6a:	bf00      	nop
    7e6c:	0000787d 	.word	0x0000787d

00007e70 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7e70:	b580      	push	{r7, lr}
    7e72:	b082      	sub	sp, #8
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
    7e78:	460b      	mov	r3, r1
    7e7a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	887a      	ldrh	r2, [r7, #2]
    7e80:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e82:	2104      	movs	r1, #4
    7e84:	6878      	ldr	r0, [r7, #4]
    7e86:	4b03      	ldr	r3, [pc, #12]	; (7e94 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    7e88:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e8a:	bf00      	nop
    7e8c:	3708      	adds	r7, #8
    7e8e:	46bd      	mov	sp, r7
    7e90:	bd80      	pop	{r7, pc}
    7e92:	bf00      	nop
    7e94:	0000787d 	.word	0x0000787d

00007e98 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    7e98:	b4b0      	push	{r4, r5, r7}
    7e9a:	b08d      	sub	sp, #52	; 0x34
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7ea0:	4b13      	ldr	r3, [pc, #76]	; (7ef0 <_sercom_get_hardware_index+0x58>)
    7ea2:	f107 040c 	add.w	r4, r7, #12
    7ea6:	461d      	mov	r5, r3
    7ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7eac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7eb4:	2300      	movs	r3, #0
    7eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    7eb8:	e010      	b.n	7edc <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ebc:	009b      	lsls	r3, r3, #2
    7ebe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7ec2:	4413      	add	r3, r2
    7ec4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7ec8:	461a      	mov	r2, r3
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	429a      	cmp	r2, r3
    7ece:	d102      	bne.n	7ed6 <_sercom_get_hardware_index+0x3e>
			return i;
    7ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ed2:	b2db      	uxtb	r3, r3
    7ed4:	e006      	b.n	7ee4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ed8:	3301      	adds	r3, #1
    7eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    7edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ede:	2b07      	cmp	r3, #7
    7ee0:	d9eb      	bls.n	7eba <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    7ee2:	2300      	movs	r3, #0
}
    7ee4:	4618      	mov	r0, r3
    7ee6:	3734      	adds	r7, #52	; 0x34
    7ee8:	46bd      	mov	sp, r7
    7eea:	bcb0      	pop	{r4, r5, r7}
    7eec:	4770      	bx	lr
    7eee:	bf00      	nop
    7ef0:	0001adb8 	.word	0x0001adb8

00007ef4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7ef4:	b580      	push	{r7, lr}
    7ef6:	b084      	sub	sp, #16
    7ef8:	af00      	add	r7, sp, #0
    7efa:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7efc:	6878      	ldr	r0, [r7, #4]
    7efe:	4b13      	ldr	r3, [pc, #76]	; (7f4c <_get_i2cm_index+0x58>)
    7f00:	4798      	blx	r3
    7f02:	4603      	mov	r3, r0
    7f04:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7f06:	2300      	movs	r3, #0
    7f08:	73fb      	strb	r3, [r7, #15]
    7f0a:	e010      	b.n	7f2e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    7f0c:	7bfa      	ldrb	r2, [r7, #15]
    7f0e:	4910      	ldr	r1, [pc, #64]	; (7f50 <_get_i2cm_index+0x5c>)
    7f10:	4613      	mov	r3, r2
    7f12:	005b      	lsls	r3, r3, #1
    7f14:	4413      	add	r3, r2
    7f16:	00db      	lsls	r3, r3, #3
    7f18:	440b      	add	r3, r1
    7f1a:	781b      	ldrb	r3, [r3, #0]
    7f1c:	7bba      	ldrb	r2, [r7, #14]
    7f1e:	429a      	cmp	r2, r3
    7f20:	d102      	bne.n	7f28 <_get_i2cm_index+0x34>
			return i;
    7f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7f26:	e00d      	b.n	7f44 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7f28:	7bfb      	ldrb	r3, [r7, #15]
    7f2a:	3301      	adds	r3, #1
    7f2c:	73fb      	strb	r3, [r7, #15]
    7f2e:	7bfb      	ldrb	r3, [r7, #15]
    7f30:	2b02      	cmp	r3, #2
    7f32:	d9eb      	bls.n	7f0c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    7f34:	f240 32a6 	movw	r2, #934	; 0x3a6
    7f38:	4906      	ldr	r1, [pc, #24]	; (7f54 <_get_i2cm_index+0x60>)
    7f3a:	2000      	movs	r0, #0
    7f3c:	4b06      	ldr	r3, [pc, #24]	; (7f58 <_get_i2cm_index+0x64>)
    7f3e:	4798      	blx	r3
	return -1;
    7f40:	f04f 33ff 	mov.w	r3, #4294967295
}
    7f44:	4618      	mov	r0, r3
    7f46:	3710      	adds	r7, #16
    7f48:	46bd      	mov	sp, r7
    7f4a:	bd80      	pop	{r7, pc}
    7f4c:	00007e99 	.word	0x00007e99
    7f50:	20000018 	.word	0x20000018
    7f54:	0001ad9c 	.word	0x0001ad9c
    7f58:	00004bbd 	.word	0x00004bbd

00007f5c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    7f5c:	b580      	push	{r7, lr}
    7f5e:	b082      	sub	sp, #8
    7f60:	af00      	add	r7, sp, #0
    7f62:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    7f64:	2103      	movs	r1, #3
    7f66:	6878      	ldr	r0, [r7, #4]
    7f68:	4b02      	ldr	r3, [pc, #8]	; (7f74 <_sercom_i2c_send_stop+0x18>)
    7f6a:	4798      	blx	r3
}
    7f6c:	bf00      	nop
    7f6e:	3708      	adds	r7, #8
    7f70:	46bd      	mov	sp, r7
    7f72:	bd80      	pop	{r7, pc}
    7f74:	00007c15 	.word	0x00007c15

00007f78 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    7f78:	b590      	push	{r4, r7, lr}
    7f7a:	b087      	sub	sp, #28
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	60f8      	str	r0, [r7, #12]
    7f80:	60b9      	str	r1, [r7, #8]
    7f82:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7f84:	68f8      	ldr	r0, [r7, #12]
    7f86:	4b7d      	ldr	r3, [pc, #500]	; (817c <_sercom_i2c_sync_analyse_flags+0x204>)
    7f88:	4798      	blx	r3
    7f8a:	4603      	mov	r3, r0
    7f8c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    7f8e:	68f8      	ldr	r0, [r7, #12]
    7f90:	4b7b      	ldr	r3, [pc, #492]	; (8180 <_sercom_i2c_sync_analyse_flags+0x208>)
    7f92:	4798      	blx	r3
    7f94:	4603      	mov	r3, r0
    7f96:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    7f98:	68bb      	ldr	r3, [r7, #8]
    7f9a:	f003 0301 	and.w	r3, r3, #1
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	f000 8095 	beq.w	80ce <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    7fa4:	8a7b      	ldrh	r3, [r7, #18]
    7fa6:	f003 0302 	and.w	r3, r3, #2
    7faa:	2b00      	cmp	r3, #0
    7fac:	d01d      	beq.n	7fea <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    7fae:	68f8      	ldr	r0, [r7, #12]
    7fb0:	4b74      	ldr	r3, [pc, #464]	; (8184 <_sercom_i2c_sync_analyse_flags+0x20c>)
    7fb2:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    7fb4:	687b      	ldr	r3, [r7, #4]
    7fb6:	885b      	ldrh	r3, [r3, #2]
    7fb8:	b29b      	uxth	r3, r3
    7fba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7fbe:	b29a      	uxth	r2, r3
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    7fc4:	687b      	ldr	r3, [r7, #4]
    7fc6:	885b      	ldrh	r3, [r3, #2]
    7fc8:	b29b      	uxth	r3, r3
    7fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7fce:	b29a      	uxth	r2, r3
    7fd0:	687b      	ldr	r3, [r7, #4]
    7fd2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    7fd4:	8a7b      	ldrh	r3, [r7, #18]
    7fd6:	f003 0301 	and.w	r3, r3, #1
    7fda:	2b00      	cmp	r3, #0
    7fdc:	d002      	beq.n	7fe4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    7fde:	f06f 0304 	mvn.w	r3, #4
    7fe2:	e0c6      	b.n	8172 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    7fe4:	f06f 0303 	mvn.w	r3, #3
    7fe8:	e0c3      	b.n	8172 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    7fea:	8a7b      	ldrh	r3, [r7, #18]
    7fec:	f003 0304 	and.w	r3, r3, #4
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d01f      	beq.n	8034 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    7ff4:	687b      	ldr	r3, [r7, #4]
    7ff6:	685b      	ldr	r3, [r3, #4]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	dd07      	ble.n	800c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	885b      	ldrh	r3, [r3, #2]
    8000:	b29b      	uxth	r3, r3
    8002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8006:	b29a      	uxth	r2, r3
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	885b      	ldrh	r3, [r3, #2]
    8010:	b29b      	uxth	r3, r3
    8012:	b21b      	sxth	r3, r3
    8014:	2b00      	cmp	r3, #0
    8016:	da02      	bge.n	801e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    8018:	68f8      	ldr	r0, [r7, #12]
    801a:	4b5b      	ldr	r3, [pc, #364]	; (8188 <_sercom_i2c_sync_analyse_flags+0x210>)
    801c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    801e:	687b      	ldr	r3, [r7, #4]
    8020:	885b      	ldrh	r3, [r3, #2]
    8022:	b29b      	uxth	r3, r3
    8024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8028:	b29a      	uxth	r2, r3
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    802e:	f06f 0301 	mvn.w	r3, #1
    8032:	e09e      	b.n	8172 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	885b      	ldrh	r3, [r3, #2]
    8038:	b29b      	uxth	r3, r3
    803a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    803e:	2b00      	cmp	r3, #0
    8040:	d01c      	beq.n	807c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    8042:	687b      	ldr	r3, [r7, #4]
    8044:	881b      	ldrh	r3, [r3, #0]
    8046:	121b      	asrs	r3, r3, #8
    8048:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    804a:	f003 0406 	and.w	r4, r3, #6
    804e:	68f8      	ldr	r0, [r7, #12]
    8050:	4b4e      	ldr	r3, [pc, #312]	; (818c <_sercom_i2c_sync_analyse_flags+0x214>)
    8052:	4798      	blx	r3
    8054:	4603      	mov	r3, r0
    8056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    805a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    805c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    8060:	4619      	mov	r1, r3
    8062:	68f8      	ldr	r0, [r7, #12]
    8064:	4b4a      	ldr	r3, [pc, #296]	; (8190 <_sercom_i2c_sync_analyse_flags+0x218>)
    8066:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	885b      	ldrh	r3, [r3, #2]
    806c:	b29b      	uxth	r3, r3
    806e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    8072:	b29a      	uxth	r2, r3
    8074:	687b      	ldr	r3, [r7, #4]
    8076:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8078:	2300      	movs	r3, #0
    807a:	e07a      	b.n	8172 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	685b      	ldr	r3, [r3, #4]
    8080:	2b00      	cmp	r3, #0
    8082:	d111      	bne.n	80a8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	885b      	ldrh	r3, [r3, #2]
    8088:	b29b      	uxth	r3, r3
    808a:	b21b      	sxth	r3, r3
    808c:	2b00      	cmp	r3, #0
    808e:	da02      	bge.n	8096 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    8090:	68f8      	ldr	r0, [r7, #12]
    8092:	4b3d      	ldr	r3, [pc, #244]	; (8188 <_sercom_i2c_sync_analyse_flags+0x210>)
    8094:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	885b      	ldrh	r3, [r3, #2]
    809a:	b29b      	uxth	r3, r3
    809c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    80a0:	b29a      	uxth	r2, r3
    80a2:	687b      	ldr	r3, [r7, #4]
    80a4:	805a      	strh	r2, [r3, #2]
    80a6:	e010      	b.n	80ca <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    80a8:	687b      	ldr	r3, [r7, #4]
    80aa:	689b      	ldr	r3, [r3, #8]
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	4619      	mov	r1, r3
    80b0:	68f8      	ldr	r0, [r7, #12]
    80b2:	4b38      	ldr	r3, [pc, #224]	; (8194 <_sercom_i2c_sync_analyse_flags+0x21c>)
    80b4:	4798      	blx	r3
				msg->buffer++;
    80b6:	687b      	ldr	r3, [r7, #4]
    80b8:	689b      	ldr	r3, [r3, #8]
    80ba:	1c5a      	adds	r2, r3, #1
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	609a      	str	r2, [r3, #8]
				msg->len--;
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	685b      	ldr	r3, [r3, #4]
    80c4:	1e5a      	subs	r2, r3, #1
    80c6:	687b      	ldr	r3, [r7, #4]
    80c8:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    80ca:	2300      	movs	r3, #0
    80cc:	e051      	b.n	8172 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    80ce:	68bb      	ldr	r3, [r7, #8]
    80d0:	f003 0302 	and.w	r3, r3, #2
    80d4:	2b00      	cmp	r3, #0
    80d6:	d04b      	beq.n	8170 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	685b      	ldr	r3, [r3, #4]
    80dc:	2b00      	cmp	r3, #0
    80de:	d041      	beq.n	8164 <_sercom_i2c_sync_analyse_flags+0x1ec>
    80e0:	8a7b      	ldrh	r3, [r7, #18]
    80e2:	f003 0304 	and.w	r3, r3, #4
    80e6:	2b00      	cmp	r3, #0
    80e8:	d13c      	bne.n	8164 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    80ea:	687b      	ldr	r3, [r7, #4]
    80ec:	685b      	ldr	r3, [r3, #4]
    80ee:	1e5a      	subs	r2, r3, #1
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    80f4:	687b      	ldr	r3, [r7, #4]
    80f6:	685b      	ldr	r3, [r3, #4]
    80f8:	2b00      	cmp	r3, #0
    80fa:	d102      	bne.n	8102 <_sercom_i2c_sync_analyse_flags+0x18a>
    80fc:	697b      	ldr	r3, [r7, #20]
    80fe:	2b00      	cmp	r3, #0
    8100:	d006      	beq.n	8110 <_sercom_i2c_sync_analyse_flags+0x198>
    8102:	687b      	ldr	r3, [r7, #4]
    8104:	685b      	ldr	r3, [r3, #4]
    8106:	2b01      	cmp	r3, #1
    8108:	d105      	bne.n	8116 <_sercom_i2c_sync_analyse_flags+0x19e>
    810a:	697b      	ldr	r3, [r7, #20]
    810c:	2b00      	cmp	r3, #0
    810e:	d002      	beq.n	8116 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    8110:	68f8      	ldr	r0, [r7, #12]
    8112:	4b21      	ldr	r3, [pc, #132]	; (8198 <_sercom_i2c_sync_analyse_flags+0x220>)
    8114:	4798      	blx	r3
			}

			if (msg->len == 0) {
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	685b      	ldr	r3, [r3, #4]
    811a:	2b00      	cmp	r3, #0
    811c:	d113      	bne.n	8146 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	885b      	ldrh	r3, [r3, #2]
    8122:	b29b      	uxth	r3, r3
    8124:	b21b      	sxth	r3, r3
    8126:	2b00      	cmp	r3, #0
    8128:	da05      	bge.n	8136 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    812a:	68f8      	ldr	r0, [r7, #12]
    812c:	4b1b      	ldr	r3, [pc, #108]	; (819c <_sercom_i2c_sync_analyse_flags+0x224>)
    812e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    8130:	68f8      	ldr	r0, [r7, #12]
    8132:	4b15      	ldr	r3, [pc, #84]	; (8188 <_sercom_i2c_sync_analyse_flags+0x210>)
    8134:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	885b      	ldrh	r3, [r3, #2]
    813a:	b29b      	uxth	r3, r3
    813c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8140:	b29a      	uxth	r2, r3
    8142:	687b      	ldr	r3, [r7, #4]
    8144:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	689c      	ldr	r4, [r3, #8]
    814a:	1c62      	adds	r2, r4, #1
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	609a      	str	r2, [r3, #8]
    8150:	68f8      	ldr	r0, [r7, #12]
    8152:	4b13      	ldr	r3, [pc, #76]	; (81a0 <_sercom_i2c_sync_analyse_flags+0x228>)
    8154:	4798      	blx	r3
    8156:	4603      	mov	r3, r0
    8158:	b2db      	uxtb	r3, r3
    815a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    815c:	68f8      	ldr	r0, [r7, #12]
    815e:	4b11      	ldr	r3, [pc, #68]	; (81a4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8160:	4798      	blx	r3
    8162:	e005      	b.n	8170 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8164:	68f8      	ldr	r0, [r7, #12]
    8166:	4b0f      	ldr	r3, [pc, #60]	; (81a4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8168:	4798      	blx	r3
			return I2C_NACK;
    816a:	f06f 0301 	mvn.w	r3, #1
    816e:	e000      	b.n	8172 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    8170:	2300      	movs	r3, #0
}
    8172:	4618      	mov	r0, r3
    8174:	371c      	adds	r7, #28
    8176:	46bd      	mov	sp, r7
    8178:	bd90      	pop	{r4, r7, pc}
    817a:	bf00      	nop
    817c:	00007a15 	.word	0x00007a15
    8180:	00007e4d 	.word	0x00007e4d
    8184:	00007915 	.word	0x00007915
    8188:	00007f5d 	.word	0x00007f5d
    818c:	00007d2d 	.word	0x00007d2d
    8190:	00007d09 	.word	0x00007d09
    8194:	00007d69 	.word	0x00007d69
    8198:	00007bc5 	.word	0x00007bc5
    819c:	00007b9d 	.word	0x00007b9d
    81a0:	00007d8d 	.word	0x00007d8d
    81a4:	0000792f 	.word	0x0000792f

000081a8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    81a8:	b580      	push	{r7, lr}
    81aa:	b082      	sub	sp, #8
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
    81b0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    81b2:	687b      	ldr	r3, [r7, #4]
    81b4:	2b00      	cmp	r3, #0
    81b6:	bf14      	ite	ne
    81b8:	2301      	movne	r3, #1
    81ba:	2300      	moveq	r3, #0
    81bc:	b2db      	uxtb	r3, r3
    81be:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    81c2:	4908      	ldr	r1, [pc, #32]	; (81e4 <_i2c_m_sync_init+0x3c>)
    81c4:	4618      	mov	r0, r3
    81c6:	4b08      	ldr	r3, [pc, #32]	; (81e8 <_i2c_m_sync_init+0x40>)
    81c8:	4798      	blx	r3

	i2c_dev->hw = hw;
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	683a      	ldr	r2, [r7, #0]
    81ce:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    81d0:	687b      	ldr	r3, [r7, #4]
    81d2:	6839      	ldr	r1, [r7, #0]
    81d4:	4618      	mov	r0, r3
    81d6:	4b05      	ldr	r3, [pc, #20]	; (81ec <_i2c_m_sync_init+0x44>)
    81d8:	4798      	blx	r3
    81da:	4603      	mov	r3, r0
}
    81dc:	4618      	mov	r0, r3
    81de:	3708      	adds	r7, #8
    81e0:	46bd      	mov	sp, r7
    81e2:	bd80      	pop	{r7, pc}
    81e4:	0001ad9c 	.word	0x0001ad9c
    81e8:	00004bbd 	.word	0x00004bbd
    81ec:	000085c1 	.word	0x000085c1

000081f0 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    81f0:	b580      	push	{r7, lr}
    81f2:	b082      	sub	sp, #8
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    81f8:	687b      	ldr	r3, [r7, #4]
    81fa:	2b00      	cmp	r3, #0
    81fc:	bf14      	ite	ne
    81fe:	2301      	movne	r3, #1
    8200:	2300      	moveq	r3, #0
    8202:	b2db      	uxtb	r3, r3
    8204:	f240 5235 	movw	r2, #1333	; 0x535
    8208:	4906      	ldr	r1, [pc, #24]	; (8224 <_i2c_m_sync_enable+0x34>)
    820a:	4618      	mov	r0, r3
    820c:	4b06      	ldr	r3, [pc, #24]	; (8228 <_i2c_m_sync_enable+0x38>)
    820e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	691b      	ldr	r3, [r3, #16]
    8214:	4618      	mov	r0, r3
    8216:	4b05      	ldr	r3, [pc, #20]	; (822c <_i2c_m_sync_enable+0x3c>)
    8218:	4798      	blx	r3
    821a:	4603      	mov	r3, r0
}
    821c:	4618      	mov	r0, r3
    821e:	3708      	adds	r7, #8
    8220:	46bd      	mov	sp, r7
    8222:	bd80      	pop	{r7, pc}
    8224:	0001ad9c 	.word	0x0001ad9c
    8228:	00004bbd 	.word	0x00004bbd
    822c:	00008535 	.word	0x00008535

00008230 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    8230:	b580      	push	{r7, lr}
    8232:	b084      	sub	sp, #16
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	691b      	ldr	r3, [r3, #16]
    823c:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	2b00      	cmp	r3, #0
    8242:	bf14      	ite	ne
    8244:	2301      	movne	r3, #1
    8246:	2300      	moveq	r3, #0
    8248:	b2db      	uxtb	r3, r3
    824a:	f240 5243 	movw	r2, #1347	; 0x543
    824e:	490c      	ldr	r1, [pc, #48]	; (8280 <_i2c_m_sync_disable+0x50>)
    8250:	4618      	mov	r0, r3
    8252:	4b0c      	ldr	r3, [pc, #48]	; (8284 <_i2c_m_sync_disable+0x54>)
    8254:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8256:	687b      	ldr	r3, [r7, #4]
    8258:	691b      	ldr	r3, [r3, #16]
    825a:	2b00      	cmp	r3, #0
    825c:	bf14      	ite	ne
    825e:	2301      	movne	r3, #1
    8260:	2300      	moveq	r3, #0
    8262:	b2db      	uxtb	r3, r3
    8264:	f240 5244 	movw	r2, #1348	; 0x544
    8268:	4905      	ldr	r1, [pc, #20]	; (8280 <_i2c_m_sync_disable+0x50>)
    826a:	4618      	mov	r0, r3
    826c:	4b05      	ldr	r3, [pc, #20]	; (8284 <_i2c_m_sync_disable+0x54>)
    826e:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    8270:	68f8      	ldr	r0, [r7, #12]
    8272:	4b05      	ldr	r3, [pc, #20]	; (8288 <_i2c_m_sync_disable+0x58>)
    8274:	4798      	blx	r3

	return ERR_NONE;
    8276:	2300      	movs	r3, #0
}
    8278:	4618      	mov	r0, r3
    827a:	3710      	adds	r7, #16
    827c:	46bd      	mov	sp, r7
    827e:	bd80      	pop	{r7, pc}
    8280:	0001ad9c 	.word	0x0001ad9c
    8284:	00004bbd 	.word	0x00004bbd
    8288:	000079ed 	.word	0x000079ed

0000828c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    828c:	b580      	push	{r7, lr}
    828e:	b084      	sub	sp, #16
    8290:	af00      	add	r7, sp, #0
    8292:	6078      	str	r0, [r7, #4]
    8294:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    8296:	f64f 73ff 	movw	r3, #65535	; 0xffff
    829a:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	691b      	ldr	r3, [r3, #16]
    82a0:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    82a2:	68b8      	ldr	r0, [r7, #8]
    82a4:	4b0f      	ldr	r3, [pc, #60]	; (82e4 <_sercom_i2c_sync_wait_bus+0x58>)
    82a6:	4798      	blx	r3
    82a8:	4603      	mov	r3, r0
    82aa:	461a      	mov	r2, r3
    82ac:	683b      	ldr	r3, [r7, #0]
    82ae:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    82b0:	68fb      	ldr	r3, [r7, #12]
    82b2:	1e5a      	subs	r2, r3, #1
    82b4:	60fa      	str	r2, [r7, #12]
    82b6:	2b00      	cmp	r3, #0
    82b8:	d102      	bne.n	82c0 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    82ba:	f06f 0304 	mvn.w	r3, #4
    82be:	e00c      	b.n	82da <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    82c0:	683b      	ldr	r3, [r7, #0]
    82c2:	681b      	ldr	r3, [r3, #0]
    82c4:	f003 0301 	and.w	r3, r3, #1
    82c8:	2b00      	cmp	r3, #0
    82ca:	d105      	bne.n	82d8 <_sercom_i2c_sync_wait_bus+0x4c>
    82cc:	683b      	ldr	r3, [r7, #0]
    82ce:	681b      	ldr	r3, [r3, #0]
    82d0:	f003 0302 	and.w	r3, r3, #2
    82d4:	2b00      	cmp	r3, #0
    82d6:	d0e4      	beq.n	82a2 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    82d8:	2300      	movs	r3, #0
}
    82da:	4618      	mov	r0, r3
    82dc:	3710      	adds	r7, #16
    82de:	46bd      	mov	sp, r7
    82e0:	bd80      	pop	{r7, pc}
    82e2:	bf00      	nop
    82e4:	00007949 	.word	0x00007949

000082e8 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    82e8:	b590      	push	{r4, r7, lr}
    82ea:	b087      	sub	sp, #28
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	691b      	ldr	r3, [r3, #16]
    82f4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    82fa:	6978      	ldr	r0, [r7, #20]
    82fc:	4b39      	ldr	r3, [pc, #228]	; (83e4 <_sercom_i2c_sync_send_address+0xfc>)
    82fe:	4798      	blx	r3
    8300:	4603      	mov	r3, r0
    8302:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    8304:	687b      	ldr	r3, [r7, #4]
    8306:	2b00      	cmp	r3, #0
    8308:	bf14      	ite	ne
    830a:	2301      	movne	r3, #1
    830c:	2300      	moveq	r3, #0
    830e:	b2db      	uxtb	r3, r3
    8310:	f240 52a5 	movw	r2, #1445	; 0x5a5
    8314:	4934      	ldr	r1, [pc, #208]	; (83e8 <_sercom_i2c_sync_send_address+0x100>)
    8316:	4618      	mov	r0, r3
    8318:	4b34      	ldr	r3, [pc, #208]	; (83ec <_sercom_i2c_sync_send_address+0x104>)
    831a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    831c:	693b      	ldr	r3, [r7, #16]
    831e:	685b      	ldr	r3, [r3, #4]
    8320:	2b01      	cmp	r3, #1
    8322:	d106      	bne.n	8332 <_sercom_i2c_sync_send_address+0x4a>
    8324:	68fb      	ldr	r3, [r7, #12]
    8326:	2b00      	cmp	r3, #0
    8328:	d003      	beq.n	8332 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    832a:	6978      	ldr	r0, [r7, #20]
    832c:	4b30      	ldr	r3, [pc, #192]	; (83f0 <_sercom_i2c_sync_send_address+0x108>)
    832e:	4798      	blx	r3
    8330:	e002      	b.n	8338 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    8332:	6978      	ldr	r0, [r7, #20]
    8334:	4b2f      	ldr	r3, [pc, #188]	; (83f4 <_sercom_i2c_sync_send_address+0x10c>)
    8336:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    8338:	693b      	ldr	r3, [r7, #16]
    833a:	881b      	ldrh	r3, [r3, #0]
    833c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8340:	2b00      	cmp	r3, #0
    8342:	d022      	beq.n	838a <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    8344:	693b      	ldr	r3, [r7, #16]
    8346:	885b      	ldrh	r3, [r3, #2]
    8348:	b29b      	uxth	r3, r3
    834a:	f003 0301 	and.w	r3, r3, #1
    834e:	2b00      	cmp	r3, #0
    8350:	d007      	beq.n	8362 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    8352:	693b      	ldr	r3, [r7, #16]
    8354:	885b      	ldrh	r3, [r3, #2]
    8356:	b29b      	uxth	r3, r3
    8358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    835c:	b29a      	uxth	r2, r3
    835e:	693b      	ldr	r3, [r7, #16]
    8360:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    8362:	693b      	ldr	r3, [r7, #16]
    8364:	881b      	ldrh	r3, [r3, #0]
    8366:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8368:	f240 74fe 	movw	r4, #2046	; 0x7fe
    836c:	401c      	ands	r4, r3
    836e:	6978      	ldr	r0, [r7, #20]
    8370:	4b21      	ldr	r3, [pc, #132]	; (83f8 <_sercom_i2c_sync_send_address+0x110>)
    8372:	4798      	blx	r3
    8374:	4603      	mov	r3, r0
    8376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    837a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    837c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8380:	4619      	mov	r1, r3
    8382:	6978      	ldr	r0, [r7, #20]
    8384:	4b1d      	ldr	r3, [pc, #116]	; (83fc <_sercom_i2c_sync_send_address+0x114>)
    8386:	4798      	blx	r3
    8388:	e01a      	b.n	83c0 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    838a:	693b      	ldr	r3, [r7, #16]
    838c:	881b      	ldrh	r3, [r3, #0]
    838e:	005b      	lsls	r3, r3, #1
    8390:	b2db      	uxtb	r3, r3
    8392:	693a      	ldr	r2, [r7, #16]
    8394:	8852      	ldrh	r2, [r2, #2]
    8396:	b292      	uxth	r2, r2
    8398:	f002 0201 	and.w	r2, r2, #1
    839c:	2a00      	cmp	r2, #0
    839e:	bf14      	ite	ne
    83a0:	2201      	movne	r2, #1
    83a2:	2200      	moveq	r2, #0
    83a4:	b2d2      	uxtb	r2, r2
    83a6:	4313      	orrs	r3, r2
    83a8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    83aa:	6978      	ldr	r0, [r7, #20]
    83ac:	4b12      	ldr	r3, [pc, #72]	; (83f8 <_sercom_i2c_sync_send_address+0x110>)
    83ae:	4798      	blx	r3
    83b0:	4603      	mov	r3, r0
    83b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    83b6:	4323      	orrs	r3, r4
    83b8:	4619      	mov	r1, r3
    83ba:	6978      	ldr	r0, [r7, #20]
    83bc:	4b0f      	ldr	r3, [pc, #60]	; (83fc <_sercom_i2c_sync_send_address+0x114>)
    83be:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    83c0:	f107 0308 	add.w	r3, r7, #8
    83c4:	4619      	mov	r1, r3
    83c6:	6878      	ldr	r0, [r7, #4]
    83c8:	4b0d      	ldr	r3, [pc, #52]	; (8400 <_sercom_i2c_sync_send_address+0x118>)
    83ca:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    83cc:	68bb      	ldr	r3, [r7, #8]
    83ce:	693a      	ldr	r2, [r7, #16]
    83d0:	4619      	mov	r1, r3
    83d2:	6978      	ldr	r0, [r7, #20]
    83d4:	4b0b      	ldr	r3, [pc, #44]	; (8404 <_sercom_i2c_sync_send_address+0x11c>)
    83d6:	4798      	blx	r3
    83d8:	4603      	mov	r3, r0
}
    83da:	4618      	mov	r0, r3
    83dc:	371c      	adds	r7, #28
    83de:	46bd      	mov	sp, r7
    83e0:	bd90      	pop	{r4, r7, pc}
    83e2:	bf00      	nop
    83e4:	00007a15 	.word	0x00007a15
    83e8:	0001ad9c 	.word	0x0001ad9c
    83ec:	00004bbd 	.word	0x00004bbd
    83f0:	00007bc5 	.word	0x00007bc5
    83f4:	00007bed 	.word	0x00007bed
    83f8:	00007d2d 	.word	0x00007d2d
    83fc:	00007d09 	.word	0x00007d09
    8400:	0000828d 	.word	0x0000828d
    8404:	00007f79 	.word	0x00007f79

00008408 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    8408:	b580      	push	{r7, lr}
    840a:	b086      	sub	sp, #24
    840c:	af00      	add	r7, sp, #0
    840e:	6078      	str	r0, [r7, #4]
    8410:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    8412:	687b      	ldr	r3, [r7, #4]
    8414:	691b      	ldr	r3, [r3, #16]
    8416:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	2b00      	cmp	r3, #0
    841c:	bf14      	ite	ne
    841e:	2301      	movne	r3, #1
    8420:	2300      	moveq	r3, #0
    8422:	b2db      	uxtb	r3, r3
    8424:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    8428:	493b      	ldr	r1, [pc, #236]	; (8518 <_i2c_m_sync_transfer+0x110>)
    842a:	4618      	mov	r0, r3
    842c:	4b3b      	ldr	r3, [pc, #236]	; (851c <_i2c_m_sync_transfer+0x114>)
    842e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	691b      	ldr	r3, [r3, #16]
    8434:	2b00      	cmp	r3, #0
    8436:	bf14      	ite	ne
    8438:	2301      	movne	r3, #1
    843a:	2300      	moveq	r3, #0
    843c:	b2db      	uxtb	r3, r3
    843e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    8442:	4935      	ldr	r1, [pc, #212]	; (8518 <_i2c_m_sync_transfer+0x110>)
    8444:	4618      	mov	r0, r3
    8446:	4b35      	ldr	r3, [pc, #212]	; (851c <_i2c_m_sync_transfer+0x114>)
    8448:	4798      	blx	r3
	ASSERT(msg);
    844a:	683b      	ldr	r3, [r7, #0]
    844c:	2b00      	cmp	r3, #0
    844e:	bf14      	ite	ne
    8450:	2301      	movne	r3, #1
    8452:	2300      	moveq	r3, #0
    8454:	b2db      	uxtb	r3, r3
    8456:	f240 52d2 	movw	r2, #1490	; 0x5d2
    845a:	492f      	ldr	r1, [pc, #188]	; (8518 <_i2c_m_sync_transfer+0x110>)
    845c:	4618      	mov	r0, r3
    845e:	4b2f      	ldr	r3, [pc, #188]	; (851c <_i2c_m_sync_transfer+0x114>)
    8460:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8462:	687b      	ldr	r3, [r7, #4]
    8464:	885b      	ldrh	r3, [r3, #2]
    8466:	b29b      	uxth	r3, r3
    8468:	f403 7380 	and.w	r3, r3, #256	; 0x100
    846c:	2b00      	cmp	r3, #0
    846e:	d002      	beq.n	8476 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    8470:	f06f 0305 	mvn.w	r3, #5
    8474:	e04c      	b.n	8510 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    8476:	683b      	ldr	r3, [r7, #0]
    8478:	885b      	ldrh	r3, [r3, #2]
    847a:	b29b      	uxth	r3, r3
    847c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8480:	b29a      	uxth	r2, r3
    8482:	683b      	ldr	r3, [r7, #0]
    8484:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	683a      	ldr	r2, [r7, #0]
    848a:	ca07      	ldmia	r2, {r0, r1, r2}
    848c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    8490:	6938      	ldr	r0, [r7, #16]
    8492:	4b23      	ldr	r3, [pc, #140]	; (8520 <_i2c_m_sync_transfer+0x118>)
    8494:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    8496:	6878      	ldr	r0, [r7, #4]
    8498:	4b22      	ldr	r3, [pc, #136]	; (8524 <_i2c_m_sync_transfer+0x11c>)
    849a:	4798      	blx	r3
    849c:	6178      	str	r0, [r7, #20]

	if (ret) {
    849e:	697b      	ldr	r3, [r7, #20]
    84a0:	2b00      	cmp	r3, #0
    84a2:	d02d      	beq.n	8500 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	885b      	ldrh	r3, [r3, #2]
    84a8:	b29b      	uxth	r3, r3
    84aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    84ae:	b29a      	uxth	r2, r3
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	805a      	strh	r2, [r3, #2]

		return ret;
    84b4:	697b      	ldr	r3, [r7, #20]
    84b6:	e02b      	b.n	8510 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    84b8:	f107 030c 	add.w	r3, r7, #12
    84bc:	4619      	mov	r1, r3
    84be:	6878      	ldr	r0, [r7, #4]
    84c0:	4b19      	ldr	r3, [pc, #100]	; (8528 <_i2c_m_sync_transfer+0x120>)
    84c2:	4798      	blx	r3
    84c4:	6178      	str	r0, [r7, #20]

		if (ret) {
    84c6:	697b      	ldr	r3, [r7, #20]
    84c8:	2b00      	cmp	r3, #0
    84ca:	d012      	beq.n	84f2 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    84cc:	683b      	ldr	r3, [r7, #0]
    84ce:	885b      	ldrh	r3, [r3, #2]
    84d0:	b29b      	uxth	r3, r3
    84d2:	b21b      	sxth	r3, r3
    84d4:	2b00      	cmp	r3, #0
    84d6:	da02      	bge.n	84de <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    84d8:	6938      	ldr	r0, [r7, #16]
    84da:	4b14      	ldr	r3, [pc, #80]	; (852c <_i2c_m_sync_transfer+0x124>)
    84dc:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    84de:	687b      	ldr	r3, [r7, #4]
    84e0:	885b      	ldrh	r3, [r3, #2]
    84e2:	b29b      	uxth	r3, r3
    84e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    84e8:	b29a      	uxth	r2, r3
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	805a      	strh	r2, [r3, #2]

			return ret;
    84ee:	697b      	ldr	r3, [r7, #20]
    84f0:	e00e      	b.n	8510 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    84f2:	68fb      	ldr	r3, [r7, #12]
    84f4:	687a      	ldr	r2, [r7, #4]
    84f6:	4619      	mov	r1, r3
    84f8:	6938      	ldr	r0, [r7, #16]
    84fa:	4b0d      	ldr	r3, [pc, #52]	; (8530 <_i2c_m_sync_transfer+0x128>)
    84fc:	4798      	blx	r3
    84fe:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	885b      	ldrh	r3, [r3, #2]
    8504:	b29b      	uxth	r3, r3
    8506:	f403 7380 	and.w	r3, r3, #256	; 0x100
    850a:	2b00      	cmp	r3, #0
    850c:	d1d4      	bne.n	84b8 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    850e:	697b      	ldr	r3, [r7, #20]
}
    8510:	4618      	mov	r0, r3
    8512:	3718      	adds	r7, #24
    8514:	46bd      	mov	sp, r7
    8516:	bd80      	pop	{r7, pc}
    8518:	0001ad9c 	.word	0x0001ad9c
    851c:	00004bbd 	.word	0x00004bbd
    8520:	00007b75 	.word	0x00007b75
    8524:	000082e9 	.word	0x000082e9
    8528:	0000828d 	.word	0x0000828d
    852c:	00007f5d 	.word	0x00007f5d
    8530:	00007f79 	.word	0x00007f79

00008534 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    8534:	b580      	push	{r7, lr}
    8536:	b084      	sub	sp, #16
    8538:	af00      	add	r7, sp, #0
    853a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    853c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8540:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    8542:	2304      	movs	r3, #4
    8544:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	2b00      	cmp	r3, #0
    854a:	bf14      	ite	ne
    854c:	2301      	movne	r3, #1
    854e:	2300      	moveq	r3, #0
    8550:	b2db      	uxtb	r3, r3
    8552:	f240 6205 	movw	r2, #1541	; 0x605
    8556:	4915      	ldr	r1, [pc, #84]	; (85ac <_i2c_m_enable_implementation+0x78>)
    8558:	4618      	mov	r0, r3
    855a:	4b15      	ldr	r3, [pc, #84]	; (85b0 <_i2c_m_enable_implementation+0x7c>)
    855c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    855e:	6878      	ldr	r0, [r7, #4]
    8560:	4b14      	ldr	r3, [pc, #80]	; (85b4 <_i2c_m_enable_implementation+0x80>)
    8562:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    8564:	e016      	b.n	8594 <_i2c_m_enable_implementation+0x60>
		timeout--;
    8566:	68fb      	ldr	r3, [r7, #12]
    8568:	3b01      	subs	r3, #1
    856a:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    856c:	68fb      	ldr	r3, [r7, #12]
    856e:	2b00      	cmp	r3, #0
    8570:	dc10      	bgt.n	8594 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    8572:	68bb      	ldr	r3, [r7, #8]
    8574:	3b01      	subs	r3, #1
    8576:	60bb      	str	r3, [r7, #8]
    8578:	68bb      	ldr	r3, [r7, #8]
    857a:	2b00      	cmp	r3, #0
    857c:	d007      	beq.n	858e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    857e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8582:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    8584:	2110      	movs	r1, #16
    8586:	6878      	ldr	r0, [r7, #4]
    8588:	4b0b      	ldr	r3, [pc, #44]	; (85b8 <_i2c_m_enable_implementation+0x84>)
    858a:	4798      	blx	r3
    858c:	e002      	b.n	8594 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    858e:	f06f 0305 	mvn.w	r3, #5
    8592:	e006      	b.n	85a2 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    8594:	6878      	ldr	r0, [r7, #4]
    8596:	4b09      	ldr	r3, [pc, #36]	; (85bc <_i2c_m_enable_implementation+0x88>)
    8598:	4798      	blx	r3
    859a:	4603      	mov	r3, r0
    859c:	2b01      	cmp	r3, #1
    859e:	d1e2      	bne.n	8566 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    85a0:	2300      	movs	r3, #0
}
    85a2:	4618      	mov	r0, r3
    85a4:	3710      	adds	r7, #16
    85a6:	46bd      	mov	sp, r7
    85a8:	bd80      	pop	{r7, pc}
    85aa:	bf00      	nop
    85ac:	0001ad9c 	.word	0x0001ad9c
    85b0:	00004bbd 	.word	0x00004bbd
    85b4:	000079c5 	.word	0x000079c5
    85b8:	00007e71 	.word	0x00007e71
    85bc:	00007e21 	.word	0x00007e21

000085c0 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    85c0:	b580      	push	{r7, lr}
    85c2:	b084      	sub	sp, #16
    85c4:	af00      	add	r7, sp, #0
    85c6:	6078      	str	r0, [r7, #4]
    85c8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    85ca:	6838      	ldr	r0, [r7, #0]
    85cc:	4b42      	ldr	r3, [pc, #264]	; (86d8 <_i2c_m_sync_init_impl+0x118>)
    85ce:	4798      	blx	r3
    85d0:	4603      	mov	r3, r0
    85d2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    85d4:	2101      	movs	r1, #1
    85d6:	6838      	ldr	r0, [r7, #0]
    85d8:	4b40      	ldr	r3, [pc, #256]	; (86dc <_i2c_m_sync_init_impl+0x11c>)
    85da:	4798      	blx	r3
    85dc:	4603      	mov	r3, r0
    85de:	f083 0301 	eor.w	r3, r3, #1
    85e2:	b2db      	uxtb	r3, r3
    85e4:	2b00      	cmp	r3, #0
    85e6:	d020      	beq.n	862a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    85e8:	7bfa      	ldrb	r2, [r7, #15]
    85ea:	493d      	ldr	r1, [pc, #244]	; (86e0 <_i2c_m_sync_init_impl+0x120>)
    85ec:	4613      	mov	r3, r2
    85ee:	005b      	lsls	r3, r3, #1
    85f0:	4413      	add	r3, r2
    85f2:	00db      	lsls	r3, r3, #3
    85f4:	440b      	add	r3, r1
    85f6:	3304      	adds	r3, #4
    85f8:	681b      	ldr	r3, [r3, #0]
    85fa:	f003 031c 	and.w	r3, r3, #28
    85fe:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8600:	2102      	movs	r1, #2
    8602:	6838      	ldr	r0, [r7, #0]
    8604:	4b37      	ldr	r3, [pc, #220]	; (86e4 <_i2c_m_sync_init_impl+0x124>)
    8606:	4798      	blx	r3
    8608:	4603      	mov	r3, r0
    860a:	2b00      	cmp	r3, #0
    860c:	d006      	beq.n	861c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    860e:	6838      	ldr	r0, [r7, #0]
    8610:	4b35      	ldr	r3, [pc, #212]	; (86e8 <_i2c_m_sync_init_impl+0x128>)
    8612:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    8614:	2102      	movs	r1, #2
    8616:	6838      	ldr	r0, [r7, #0]
    8618:	4b34      	ldr	r3, [pc, #208]	; (86ec <_i2c_m_sync_init_impl+0x12c>)
    861a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    861c:	68bb      	ldr	r3, [r7, #8]
    861e:	f043 0301 	orr.w	r3, r3, #1
    8622:	4619      	mov	r1, r3
    8624:	6838      	ldr	r0, [r7, #0]
    8626:	4b32      	ldr	r3, [pc, #200]	; (86f0 <_i2c_m_sync_init_impl+0x130>)
    8628:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    862a:	2101      	movs	r1, #1
    862c:	6838      	ldr	r0, [r7, #0]
    862e:	4b2f      	ldr	r3, [pc, #188]	; (86ec <_i2c_m_sync_init_impl+0x12c>)
    8630:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8632:	7bfa      	ldrb	r2, [r7, #15]
    8634:	492a      	ldr	r1, [pc, #168]	; (86e0 <_i2c_m_sync_init_impl+0x120>)
    8636:	4613      	mov	r3, r2
    8638:	005b      	lsls	r3, r3, #1
    863a:	4413      	add	r3, r2
    863c:	00db      	lsls	r3, r3, #3
    863e:	440b      	add	r3, r1
    8640:	3304      	adds	r3, #4
    8642:	681b      	ldr	r3, [r3, #0]
    8644:	4619      	mov	r1, r3
    8646:	6838      	ldr	r0, [r7, #0]
    8648:	4b29      	ldr	r3, [pc, #164]	; (86f0 <_i2c_m_sync_init_impl+0x130>)
    864a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    864c:	7bfa      	ldrb	r2, [r7, #15]
    864e:	4924      	ldr	r1, [pc, #144]	; (86e0 <_i2c_m_sync_init_impl+0x120>)
    8650:	4613      	mov	r3, r2
    8652:	005b      	lsls	r3, r3, #1
    8654:	4413      	add	r3, r2
    8656:	00db      	lsls	r3, r3, #3
    8658:	440b      	add	r3, r1
    865a:	3308      	adds	r3, #8
    865c:	681b      	ldr	r3, [r3, #0]
    865e:	4619      	mov	r1, r3
    8660:	6838      	ldr	r0, [r7, #0]
    8662:	4b24      	ldr	r3, [pc, #144]	; (86f4 <_i2c_m_sync_init_impl+0x134>)
    8664:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    8666:	7bfa      	ldrb	r2, [r7, #15]
    8668:	491d      	ldr	r1, [pc, #116]	; (86e0 <_i2c_m_sync_init_impl+0x120>)
    866a:	4613      	mov	r3, r2
    866c:	005b      	lsls	r3, r3, #1
    866e:	4413      	add	r3, r2
    8670:	00db      	lsls	r3, r3, #3
    8672:	440b      	add	r3, r1
    8674:	330c      	adds	r3, #12
    8676:	681b      	ldr	r3, [r3, #0]
    8678:	4619      	mov	r1, r3
    867a:	6838      	ldr	r0, [r7, #0]
    867c:	4b1e      	ldr	r3, [pc, #120]	; (86f8 <_i2c_m_sync_init_impl+0x138>)
    867e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    8680:	7bfa      	ldrb	r2, [r7, #15]
    8682:	4917      	ldr	r1, [pc, #92]	; (86e0 <_i2c_m_sync_init_impl+0x120>)
    8684:	4613      	mov	r3, r2
    8686:	005b      	lsls	r3, r3, #1
    8688:	4413      	add	r3, r2
    868a:	00db      	lsls	r3, r3, #3
    868c:	440b      	add	r3, r1
    868e:	3304      	adds	r3, #4
    8690:	681b      	ldr	r3, [r3, #0]
    8692:	0e1b      	lsrs	r3, r3, #24
    8694:	b29b      	uxth	r3, r3
    8696:	f003 0303 	and.w	r3, r3, #3
    869a:	b29a      	uxth	r2, r3
    869c:	687b      	ldr	r3, [r7, #4]
    869e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	899b      	ldrh	r3, [r3, #12]
    86a4:	2b01      	cmp	r3, #1
    86a6:	bf8c      	ite	hi
    86a8:	2301      	movhi	r3, #1
    86aa:	2300      	movls	r3, #0
    86ac:	b2db      	uxtb	r3, r3
    86ae:	4619      	mov	r1, r3
    86b0:	6838      	ldr	r0, [r7, #0]
    86b2:	4b12      	ldr	r3, [pc, #72]	; (86fc <_i2c_m_sync_init_impl+0x13c>)
    86b4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    86b6:	7bfa      	ldrb	r2, [r7, #15]
    86b8:	4909      	ldr	r1, [pc, #36]	; (86e0 <_i2c_m_sync_init_impl+0x120>)
    86ba:	4613      	mov	r3, r2
    86bc:	005b      	lsls	r3, r3, #1
    86be:	4413      	add	r3, r2
    86c0:	00db      	lsls	r3, r3, #3
    86c2:	440b      	add	r3, r1
    86c4:	3312      	adds	r3, #18
    86c6:	881a      	ldrh	r2, [r3, #0]
    86c8:	687b      	ldr	r3, [r7, #4]
    86ca:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    86cc:	2300      	movs	r3, #0
}
    86ce:	4618      	mov	r0, r3
    86d0:	3710      	adds	r7, #16
    86d2:	46bd      	mov	sp, r7
    86d4:	bd80      	pop	{r7, pc}
    86d6:	bf00      	nop
    86d8:	00007ef5 	.word	0x00007ef5
    86dc:	000078a1 	.word	0x000078a1
    86e0:	20000018 	.word	0x20000018
    86e4:	00007a45 	.word	0x00007a45
    86e8:	000079ed 	.word	0x000079ed
    86ec:	0000787d 	.word	0x0000787d
    86f0:	00007a75 	.word	0x00007a75
    86f4:	00007c45 	.word	0x00007c45
    86f8:	00007c8d 	.word	0x00007c8d
    86fc:	00007cc9 	.word	0x00007cc9

00008700 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    8700:	b580      	push	{r7, lr}
    8702:	b082      	sub	sp, #8
    8704:	af00      	add	r7, sp, #0
    8706:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8708:	2101      	movs	r1, #1
    870a:	6878      	ldr	r0, [r7, #4]
    870c:	4b07      	ldr	r3, [pc, #28]	; (872c <_spi_sync_enable+0x2c>)
    870e:	4798      	blx	r3
    8710:	4603      	mov	r3, r0
    8712:	2b00      	cmp	r3, #0
    8714:	d002      	beq.n	871c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    8716:	f06f 0303 	mvn.w	r3, #3
    871a:	e003      	b.n	8724 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    871c:	6878      	ldr	r0, [r7, #4]
    871e:	4b04      	ldr	r3, [pc, #16]	; (8730 <_spi_sync_enable+0x30>)
    8720:	4798      	blx	r3

	return ERR_NONE;
    8722:	2300      	movs	r3, #0
}
    8724:	4618      	mov	r0, r3
    8726:	3708      	adds	r7, #8
    8728:	46bd      	mov	sp, r7
    872a:	bd80      	pop	{r7, pc}
    872c:	000078ed 	.word	0x000078ed
    8730:	00007a99 	.word	0x00007a99

00008734 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    8734:	b580      	push	{r7, lr}
    8736:	b082      	sub	sp, #8
    8738:	af00      	add	r7, sp, #0
    873a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    873c:	2101      	movs	r1, #1
    873e:	6878      	ldr	r0, [r7, #4]
    8740:	4b07      	ldr	r3, [pc, #28]	; (8760 <_spi_sync_disable+0x2c>)
    8742:	4798      	blx	r3
    8744:	4603      	mov	r3, r0
    8746:	2b00      	cmp	r3, #0
    8748:	d002      	beq.n	8750 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    874a:	f06f 0303 	mvn.w	r3, #3
    874e:	e003      	b.n	8758 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8750:	6878      	ldr	r0, [r7, #4]
    8752:	4b04      	ldr	r3, [pc, #16]	; (8764 <_spi_sync_disable+0x30>)
    8754:	4798      	blx	r3

	return ERR_NONE;
    8756:	2300      	movs	r3, #0
}
    8758:	4618      	mov	r0, r3
    875a:	3708      	adds	r7, #8
    875c:	46bd      	mov	sp, r7
    875e:	bd80      	pop	{r7, pc}
    8760:	000078ed 	.word	0x000078ed
    8764:	00007af9 	.word	0x00007af9

00008768 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8768:	b580      	push	{r7, lr}
    876a:	b082      	sub	sp, #8
    876c:	af00      	add	r7, sp, #0
    876e:	6078      	str	r0, [r7, #4]
    8770:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8772:	687b      	ldr	r3, [r7, #4]
    8774:	2b00      	cmp	r3, #0
    8776:	d004      	beq.n	8782 <_spi_load_regs_master+0x1a>
    8778:	683b      	ldr	r3, [r7, #0]
    877a:	2b00      	cmp	r3, #0
    877c:	d001      	beq.n	8782 <_spi_load_regs_master+0x1a>
    877e:	2301      	movs	r3, #1
    8780:	e000      	b.n	8784 <_spi_load_regs_master+0x1c>
    8782:	2300      	movs	r3, #0
    8784:	f003 0301 	and.w	r3, r3, #1
    8788:	b2db      	uxtb	r3, r3
    878a:	f640 1209 	movw	r2, #2313	; 0x909
    878e:	4915      	ldr	r1, [pc, #84]	; (87e4 <_spi_load_regs_master+0x7c>)
    8790:	4618      	mov	r0, r3
    8792:	4b15      	ldr	r3, [pc, #84]	; (87e8 <_spi_load_regs_master+0x80>)
    8794:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8796:	683b      	ldr	r3, [r7, #0]
    8798:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    879a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    879e:	f023 0301 	bic.w	r3, r3, #1
    87a2:	4619      	mov	r1, r3
    87a4:	6878      	ldr	r0, [r7, #4]
    87a6:	4b11      	ldr	r3, [pc, #68]	; (87ec <_spi_load_regs_master+0x84>)
    87a8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    87aa:	683b      	ldr	r3, [r7, #0]
    87ac:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    87ae:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    87b2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    87b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    87ba:	4619      	mov	r1, r3
    87bc:	6878      	ldr	r0, [r7, #4]
    87be:	4b0c      	ldr	r3, [pc, #48]	; (87f0 <_spi_load_regs_master+0x88>)
    87c0:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    87c2:	683b      	ldr	r3, [r7, #0]
    87c4:	7b1b      	ldrb	r3, [r3, #12]
    87c6:	4619      	mov	r1, r3
    87c8:	6878      	ldr	r0, [r7, #4]
    87ca:	4b0a      	ldr	r3, [pc, #40]	; (87f4 <_spi_load_regs_master+0x8c>)
    87cc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    87ce:	683b      	ldr	r3, [r7, #0]
    87d0:	7b5b      	ldrb	r3, [r3, #13]
    87d2:	4619      	mov	r1, r3
    87d4:	6878      	ldr	r0, [r7, #4]
    87d6:	4b08      	ldr	r3, [pc, #32]	; (87f8 <_spi_load_regs_master+0x90>)
    87d8:	4798      	blx	r3
}
    87da:	bf00      	nop
    87dc:	3708      	adds	r7, #8
    87de:	46bd      	mov	sp, r7
    87e0:	bd80      	pop	{r7, pc}
    87e2:	bf00      	nop
    87e4:	0001ad9c 	.word	0x0001ad9c
    87e8:	00004bbd 	.word	0x00004bbd
    87ec:	00007b51 	.word	0x00007b51
    87f0:	00007c69 	.word	0x00007c69
    87f4:	00007ca9 	.word	0x00007ca9
    87f8:	00007de1 	.word	0x00007de1

000087fc <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b082      	sub	sp, #8
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
    8804:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	2b00      	cmp	r3, #0
    880a:	d004      	beq.n	8816 <_spi_load_regs_slave+0x1a>
    880c:	683b      	ldr	r3, [r7, #0]
    880e:	2b00      	cmp	r3, #0
    8810:	d001      	beq.n	8816 <_spi_load_regs_slave+0x1a>
    8812:	2301      	movs	r3, #1
    8814:	e000      	b.n	8818 <_spi_load_regs_slave+0x1c>
    8816:	2300      	movs	r3, #0
    8818:	f003 0301 	and.w	r3, r3, #1
    881c:	b2db      	uxtb	r3, r3
    881e:	f640 121d 	movw	r2, #2333	; 0x91d
    8822:	491a      	ldr	r1, [pc, #104]	; (888c <_spi_load_regs_slave+0x90>)
    8824:	4618      	mov	r0, r3
    8826:	4b1a      	ldr	r3, [pc, #104]	; (8890 <_spi_load_regs_slave+0x94>)
    8828:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    882a:	683b      	ldr	r3, [r7, #0]
    882c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    882e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8832:	f023 0301 	bic.w	r3, r3, #1
    8836:	4619      	mov	r1, r3
    8838:	6878      	ldr	r0, [r7, #4]
    883a:	4b16      	ldr	r3, [pc, #88]	; (8894 <_spi_load_regs_slave+0x98>)
    883c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    883e:	683b      	ldr	r3, [r7, #0]
    8840:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8842:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8846:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    884a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    884e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    8852:	4619      	mov	r1, r3
    8854:	6878      	ldr	r0, [r7, #4]
    8856:	4b10      	ldr	r3, [pc, #64]	; (8898 <_spi_load_regs_slave+0x9c>)
    8858:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    885a:	683b      	ldr	r3, [r7, #0]
    885c:	689b      	ldr	r3, [r3, #8]
    885e:	4619      	mov	r1, r3
    8860:	6878      	ldr	r0, [r7, #4]
    8862:	4b0e      	ldr	r3, [pc, #56]	; (889c <_spi_load_regs_slave+0xa0>)
    8864:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8866:	683b      	ldr	r3, [r7, #0]
    8868:	7b5b      	ldrb	r3, [r3, #13]
    886a:	4619      	mov	r1, r3
    886c:	6878      	ldr	r0, [r7, #4]
    886e:	4b0c      	ldr	r3, [pc, #48]	; (88a0 <_spi_load_regs_slave+0xa4>)
    8870:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    8872:	bf00      	nop
    8874:	f04f 31ff 	mov.w	r1, #4294967295
    8878:	6878      	ldr	r0, [r7, #4]
    887a:	4b0a      	ldr	r3, [pc, #40]	; (88a4 <_spi_load_regs_slave+0xa8>)
    887c:	4798      	blx	r3
    887e:	4603      	mov	r3, r0
    8880:	2b00      	cmp	r3, #0
    8882:	d1f7      	bne.n	8874 <_spi_load_regs_slave+0x78>
		;
}
    8884:	bf00      	nop
    8886:	3708      	adds	r7, #8
    8888:	46bd      	mov	sp, r7
    888a:	bd80      	pop	{r7, pc}
    888c:	0001ad9c 	.word	0x0001ad9c
    8890:	00004bbd 	.word	0x00004bbd
    8894:	00007b51 	.word	0x00007b51
    8898:	00007c69 	.word	0x00007c69
    889c:	00007d4d 	.word	0x00007d4d
    88a0:	00007de1 	.word	0x00007de1
    88a4:	000078ed 	.word	0x000078ed

000088a8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    88a8:	b580      	push	{r7, lr}
    88aa:	b084      	sub	sp, #16
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	4618      	mov	r0, r3
    88b4:	4b11      	ldr	r3, [pc, #68]	; (88fc <_spi_get_regs+0x54>)
    88b6:	4798      	blx	r3
    88b8:	4603      	mov	r3, r0
    88ba:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    88bc:	2300      	movs	r3, #0
    88be:	73fb      	strb	r3, [r7, #15]
    88c0:	e014      	b.n	88ec <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    88c2:	7bfa      	ldrb	r2, [r7, #15]
    88c4:	490e      	ldr	r1, [pc, #56]	; (8900 <_spi_get_regs+0x58>)
    88c6:	4613      	mov	r3, r2
    88c8:	011b      	lsls	r3, r3, #4
    88ca:	4413      	add	r3, r2
    88cc:	440b      	add	r3, r1
    88ce:	3310      	adds	r3, #16
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	7bba      	ldrb	r2, [r7, #14]
    88d4:	429a      	cmp	r2, r3
    88d6:	d106      	bne.n	88e6 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    88d8:	7bfa      	ldrb	r2, [r7, #15]
    88da:	4613      	mov	r3, r2
    88dc:	011b      	lsls	r3, r3, #4
    88de:	4413      	add	r3, r2
    88e0:	4a07      	ldr	r2, [pc, #28]	; (8900 <_spi_get_regs+0x58>)
    88e2:	4413      	add	r3, r2
    88e4:	e006      	b.n	88f4 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    88e6:	7bfb      	ldrb	r3, [r7, #15]
    88e8:	3301      	adds	r3, #1
    88ea:	73fb      	strb	r3, [r7, #15]
    88ec:	7bfb      	ldrb	r3, [r7, #15]
    88ee:	2b01      	cmp	r3, #1
    88f0:	d9e7      	bls.n	88c2 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    88f2:	2300      	movs	r3, #0
}
    88f4:	4618      	mov	r0, r3
    88f6:	3710      	adds	r7, #16
    88f8:	46bd      	mov	sp, r7
    88fa:	bd80      	pop	{r7, pc}
    88fc:	00007e99 	.word	0x00007e99
    8900:	0001add8 	.word	0x0001add8

00008904 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    8904:	b580      	push	{r7, lr}
    8906:	b084      	sub	sp, #16
    8908:	af00      	add	r7, sp, #0
    890a:	6078      	str	r0, [r7, #4]
    890c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    890e:	683b      	ldr	r3, [r7, #0]
    8910:	4618      	mov	r0, r3
    8912:	4b35      	ldr	r3, [pc, #212]	; (89e8 <_spi_m_sync_init+0xe4>)
    8914:	4798      	blx	r3
    8916:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	2b00      	cmp	r3, #0
    891c:	d004      	beq.n	8928 <_spi_m_sync_init+0x24>
    891e:	683b      	ldr	r3, [r7, #0]
    8920:	2b00      	cmp	r3, #0
    8922:	d001      	beq.n	8928 <_spi_m_sync_init+0x24>
    8924:	2301      	movs	r3, #1
    8926:	e000      	b.n	892a <_spi_m_sync_init+0x26>
    8928:	2300      	movs	r3, #0
    892a:	f003 0301 	and.w	r3, r3, #1
    892e:	b2db      	uxtb	r3, r3
    8930:	f640 123f 	movw	r2, #2367	; 0x93f
    8934:	492d      	ldr	r1, [pc, #180]	; (89ec <_spi_m_sync_init+0xe8>)
    8936:	4618      	mov	r0, r3
    8938:	4b2d      	ldr	r3, [pc, #180]	; (89f0 <_spi_m_sync_init+0xec>)
    893a:	4798      	blx	r3

	if (regs == NULL) {
    893c:	68fb      	ldr	r3, [r7, #12]
    893e:	2b00      	cmp	r3, #0
    8940:	d102      	bne.n	8948 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8942:	f06f 030c 	mvn.w	r3, #12
    8946:	e04a      	b.n	89de <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8948:	2101      	movs	r1, #1
    894a:	6838      	ldr	r0, [r7, #0]
    894c:	4b29      	ldr	r3, [pc, #164]	; (89f4 <_spi_m_sync_init+0xf0>)
    894e:	4798      	blx	r3
    8950:	4603      	mov	r3, r0
    8952:	f083 0301 	eor.w	r3, r3, #1
    8956:	b2db      	uxtb	r3, r3
    8958:	2b00      	cmp	r3, #0
    895a:	d019      	beq.n	8990 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    895c:	68fb      	ldr	r3, [r7, #12]
    895e:	681b      	ldr	r3, [r3, #0]
    8960:	f003 031c 	and.w	r3, r3, #28
    8964:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8966:	2102      	movs	r1, #2
    8968:	6838      	ldr	r0, [r7, #0]
    896a:	4b23      	ldr	r3, [pc, #140]	; (89f8 <_spi_m_sync_init+0xf4>)
    896c:	4798      	blx	r3
    896e:	4603      	mov	r3, r0
    8970:	2b00      	cmp	r3, #0
    8972:	d006      	beq.n	8982 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8974:	6838      	ldr	r0, [r7, #0]
    8976:	4b21      	ldr	r3, [pc, #132]	; (89fc <_spi_m_sync_init+0xf8>)
    8978:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    897a:	2102      	movs	r1, #2
    897c:	6838      	ldr	r0, [r7, #0]
    897e:	4b20      	ldr	r3, [pc, #128]	; (8a00 <_spi_m_sync_init+0xfc>)
    8980:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8982:	68bb      	ldr	r3, [r7, #8]
    8984:	f043 0301 	orr.w	r3, r3, #1
    8988:	4619      	mov	r1, r3
    898a:	6838      	ldr	r0, [r7, #0]
    898c:	4b1d      	ldr	r3, [pc, #116]	; (8a04 <_spi_m_sync_init+0x100>)
    898e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8990:	2101      	movs	r1, #1
    8992:	6838      	ldr	r0, [r7, #0]
    8994:	4b1a      	ldr	r3, [pc, #104]	; (8a00 <_spi_m_sync_init+0xfc>)
    8996:	4798      	blx	r3

	dev->prvt = hw;
    8998:	687b      	ldr	r3, [r7, #4]
    899a:	683a      	ldr	r2, [r7, #0]
    899c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    899e:	68fb      	ldr	r3, [r7, #12]
    89a0:	681b      	ldr	r3, [r3, #0]
    89a2:	f003 031c 	and.w	r3, r3, #28
    89a6:	2b08      	cmp	r3, #8
    89a8:	d104      	bne.n	89b4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    89aa:	68f9      	ldr	r1, [r7, #12]
    89ac:	6838      	ldr	r0, [r7, #0]
    89ae:	4b16      	ldr	r3, [pc, #88]	; (8a08 <_spi_m_sync_init+0x104>)
    89b0:	4798      	blx	r3
    89b2:	e003      	b.n	89bc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    89b4:	68f9      	ldr	r1, [r7, #12]
    89b6:	6838      	ldr	r0, [r7, #0]
    89b8:	4b14      	ldr	r3, [pc, #80]	; (8a0c <_spi_m_sync_init+0x108>)
    89ba:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    89bc:	68fb      	ldr	r3, [r7, #12]
    89be:	685b      	ldr	r3, [r3, #4]
    89c0:	f003 0307 	and.w	r3, r3, #7
    89c4:	2b00      	cmp	r3, #0
    89c6:	d101      	bne.n	89cc <_spi_m_sync_init+0xc8>
    89c8:	2201      	movs	r2, #1
    89ca:	e000      	b.n	89ce <_spi_m_sync_init+0xca>
    89cc:	2202      	movs	r2, #2
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    89d2:	68fb      	ldr	r3, [r7, #12]
    89d4:	89db      	ldrh	r3, [r3, #14]
    89d6:	b29a      	uxth	r2, r3
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    89dc:	2300      	movs	r3, #0
}
    89de:	4618      	mov	r0, r3
    89e0:	3710      	adds	r7, #16
    89e2:	46bd      	mov	sp, r7
    89e4:	bd80      	pop	{r7, pc}
    89e6:	bf00      	nop
    89e8:	000088a9 	.word	0x000088a9
    89ec:	0001ad9c 	.word	0x0001ad9c
    89f0:	00004bbd 	.word	0x00004bbd
    89f4:	000078ed 	.word	0x000078ed
    89f8:	00007b21 	.word	0x00007b21
    89fc:	00007af9 	.word	0x00007af9
    8a00:	000078c9 	.word	0x000078c9
    8a04:	00007b51 	.word	0x00007b51
    8a08:	000087fd 	.word	0x000087fd
    8a0c:	00008769 	.word	0x00008769

00008a10 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    8a10:	b580      	push	{r7, lr}
    8a12:	b082      	sub	sp, #8
    8a14:	af00      	add	r7, sp, #0
    8a16:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8a18:	687b      	ldr	r3, [r7, #4]
    8a1a:	2b00      	cmp	r3, #0
    8a1c:	d005      	beq.n	8a2a <_spi_m_sync_enable+0x1a>
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	681b      	ldr	r3, [r3, #0]
    8a22:	2b00      	cmp	r3, #0
    8a24:	d001      	beq.n	8a2a <_spi_m_sync_enable+0x1a>
    8a26:	2301      	movs	r3, #1
    8a28:	e000      	b.n	8a2c <_spi_m_sync_enable+0x1c>
    8a2a:	2300      	movs	r3, #0
    8a2c:	f003 0301 	and.w	r3, r3, #1
    8a30:	b2db      	uxtb	r3, r3
    8a32:	f640 129e 	movw	r2, #2462	; 0x99e
    8a36:	4907      	ldr	r1, [pc, #28]	; (8a54 <_spi_m_sync_enable+0x44>)
    8a38:	4618      	mov	r0, r3
    8a3a:	4b07      	ldr	r3, [pc, #28]	; (8a58 <_spi_m_sync_enable+0x48>)
    8a3c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    8a3e:	687b      	ldr	r3, [r7, #4]
    8a40:	681b      	ldr	r3, [r3, #0]
    8a42:	4618      	mov	r0, r3
    8a44:	4b05      	ldr	r3, [pc, #20]	; (8a5c <_spi_m_sync_enable+0x4c>)
    8a46:	4798      	blx	r3
    8a48:	4603      	mov	r3, r0
}
    8a4a:	4618      	mov	r0, r3
    8a4c:	3708      	adds	r7, #8
    8a4e:	46bd      	mov	sp, r7
    8a50:	bd80      	pop	{r7, pc}
    8a52:	bf00      	nop
    8a54:	0001ad9c 	.word	0x0001ad9c
    8a58:	00004bbd 	.word	0x00004bbd
    8a5c:	00008701 	.word	0x00008701

00008a60 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    8a60:	b580      	push	{r7, lr}
    8a62:	b082      	sub	sp, #8
    8a64:	af00      	add	r7, sp, #0
    8a66:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8a68:	687b      	ldr	r3, [r7, #4]
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d005      	beq.n	8a7a <_spi_m_sync_disable+0x1a>
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	681b      	ldr	r3, [r3, #0]
    8a72:	2b00      	cmp	r3, #0
    8a74:	d001      	beq.n	8a7a <_spi_m_sync_disable+0x1a>
    8a76:	2301      	movs	r3, #1
    8a78:	e000      	b.n	8a7c <_spi_m_sync_disable+0x1c>
    8a7a:	2300      	movs	r3, #0
    8a7c:	f003 0301 	and.w	r3, r3, #1
    8a80:	b2db      	uxtb	r3, r3
    8a82:	f640 12ba 	movw	r2, #2490	; 0x9ba
    8a86:	4907      	ldr	r1, [pc, #28]	; (8aa4 <_spi_m_sync_disable+0x44>)
    8a88:	4618      	mov	r0, r3
    8a8a:	4b07      	ldr	r3, [pc, #28]	; (8aa8 <_spi_m_sync_disable+0x48>)
    8a8c:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	681b      	ldr	r3, [r3, #0]
    8a92:	4618      	mov	r0, r3
    8a94:	4b05      	ldr	r3, [pc, #20]	; (8aac <_spi_m_sync_disable+0x4c>)
    8a96:	4798      	blx	r3
    8a98:	4603      	mov	r3, r0
}
    8a9a:	4618      	mov	r0, r3
    8a9c:	3708      	adds	r7, #8
    8a9e:	46bd      	mov	sp, r7
    8aa0:	bd80      	pop	{r7, pc}
    8aa2:	bf00      	nop
    8aa4:	0001ad9c 	.word	0x0001ad9c
    8aa8:	00004bbd 	.word	0x00004bbd
    8aac:	00008735 	.word	0x00008735

00008ab0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8ab0:	b580      	push	{r7, lr}
    8ab2:	b082      	sub	sp, #8
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8ab8:	bf00      	nop
    8aba:	2103      	movs	r1, #3
    8abc:	6878      	ldr	r0, [r7, #4]
    8abe:	4b06      	ldr	r3, [pc, #24]	; (8ad8 <_spi_wait_bus_idle+0x28>)
    8ac0:	4798      	blx	r3
    8ac2:	4603      	mov	r3, r0
    8ac4:	2b00      	cmp	r3, #0
    8ac6:	d0f8      	beq.n	8aba <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    8ac8:	2103      	movs	r1, #3
    8aca:	6878      	ldr	r0, [r7, #4]
    8acc:	4b03      	ldr	r3, [pc, #12]	; (8adc <_spi_wait_bus_idle+0x2c>)
    8ace:	4798      	blx	r3
}
    8ad0:	bf00      	nop
    8ad2:	3708      	adds	r7, #8
    8ad4:	46bd      	mov	sp, r7
    8ad6:	bd80      	pop	{r7, pc}
    8ad8:	00007963 	.word	0x00007963
    8adc:	000079a5 	.word	0x000079a5

00008ae0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    8ae0:	b580      	push	{r7, lr}
    8ae2:	b086      	sub	sp, #24
    8ae4:	af00      	add	r7, sp, #0
    8ae6:	60f8      	str	r0, [r7, #12]
    8ae8:	60b9      	str	r1, [r7, #8]
    8aea:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    8aec:	68bb      	ldr	r3, [r7, #8]
    8aee:	f003 0304 	and.w	r3, r3, #4
    8af2:	2b00      	cmp	r3, #0
    8af4:	d101      	bne.n	8afa <_spi_rx_check_and_receive+0x1a>
		return false;
    8af6:	2300      	movs	r3, #0
    8af8:	e022      	b.n	8b40 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    8afa:	68f8      	ldr	r0, [r7, #12]
    8afc:	4b12      	ldr	r3, [pc, #72]	; (8b48 <_spi_rx_check_and_receive+0x68>)
    8afe:	4798      	blx	r3
    8b00:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    8b02:	687b      	ldr	r3, [r7, #4]
    8b04:	685b      	ldr	r3, [r3, #4]
    8b06:	2b00      	cmp	r3, #0
    8b08:	d014      	beq.n	8b34 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    8b0a:	687b      	ldr	r3, [r7, #4]
    8b0c:	685b      	ldr	r3, [r3, #4]
    8b0e:	1c59      	adds	r1, r3, #1
    8b10:	687a      	ldr	r2, [r7, #4]
    8b12:	6051      	str	r1, [r2, #4]
    8b14:	697a      	ldr	r2, [r7, #20]
    8b16:	b2d2      	uxtb	r2, r2
    8b18:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    8b1a:	687b      	ldr	r3, [r7, #4]
    8b1c:	7c1b      	ldrb	r3, [r3, #16]
    8b1e:	2b01      	cmp	r3, #1
    8b20:	d908      	bls.n	8b34 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	685b      	ldr	r3, [r3, #4]
    8b26:	1c59      	adds	r1, r3, #1
    8b28:	687a      	ldr	r2, [r7, #4]
    8b2a:	6051      	str	r1, [r2, #4]
    8b2c:	697a      	ldr	r2, [r7, #20]
    8b2e:	0a12      	lsrs	r2, r2, #8
    8b30:	b2d2      	uxtb	r2, r2
    8b32:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	68db      	ldr	r3, [r3, #12]
    8b38:	1c5a      	adds	r2, r3, #1
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	60da      	str	r2, [r3, #12]

	return true;
    8b3e:	2301      	movs	r3, #1
}
    8b40:	4618      	mov	r0, r3
    8b42:	3718      	adds	r7, #24
    8b44:	46bd      	mov	sp, r7
    8b46:	bd80      	pop	{r7, pc}
    8b48:	00007dc9 	.word	0x00007dc9

00008b4c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    8b4c:	b580      	push	{r7, lr}
    8b4e:	b086      	sub	sp, #24
    8b50:	af00      	add	r7, sp, #0
    8b52:	60f8      	str	r0, [r7, #12]
    8b54:	60b9      	str	r1, [r7, #8]
    8b56:	607a      	str	r2, [r7, #4]
    8b58:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    8b5a:	68bb      	ldr	r3, [r7, #8]
    8b5c:	f003 0301 	and.w	r3, r3, #1
    8b60:	2b00      	cmp	r3, #0
    8b62:	d028      	beq.n	8bb6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	681b      	ldr	r3, [r3, #0]
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d018      	beq.n	8b9e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	681b      	ldr	r3, [r3, #0]
    8b70:	1c59      	adds	r1, r3, #1
    8b72:	687a      	ldr	r2, [r7, #4]
    8b74:	6011      	str	r1, [r2, #0]
    8b76:	781b      	ldrb	r3, [r3, #0]
    8b78:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	7c1b      	ldrb	r3, [r3, #16]
    8b7e:	2b01      	cmp	r3, #1
    8b80:	d90f      	bls.n	8ba2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	021b      	lsls	r3, r3, #8
    8b8a:	461a      	mov	r2, r3
    8b8c:	697b      	ldr	r3, [r7, #20]
    8b8e:	4313      	orrs	r3, r2
    8b90:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	1c5a      	adds	r2, r3, #1
    8b98:	687b      	ldr	r3, [r7, #4]
    8b9a:	601a      	str	r2, [r3, #0]
    8b9c:	e001      	b.n	8ba2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    8b9e:	887b      	ldrh	r3, [r7, #2]
    8ba0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	689b      	ldr	r3, [r3, #8]
    8ba6:	1c5a      	adds	r2, r3, #1
    8ba8:	687b      	ldr	r3, [r7, #4]
    8baa:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    8bac:	6979      	ldr	r1, [r7, #20]
    8bae:	68f8      	ldr	r0, [r7, #12]
    8bb0:	4b03      	ldr	r3, [pc, #12]	; (8bc0 <_spi_tx_check_and_send+0x74>)
    8bb2:	4798      	blx	r3
    8bb4:	e000      	b.n	8bb8 <_spi_tx_check_and_send+0x6c>
		return;
    8bb6:	bf00      	nop
}
    8bb8:	3718      	adds	r7, #24
    8bba:	46bd      	mov	sp, r7
    8bbc:	bd80      	pop	{r7, pc}
    8bbe:	bf00      	nop
    8bc0:	00007dad 	.word	0x00007dad

00008bc4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    8bc4:	b580      	push	{r7, lr}
    8bc6:	b082      	sub	sp, #8
    8bc8:	af00      	add	r7, sp, #0
    8bca:	6078      	str	r0, [r7, #4]
    8bcc:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	d00b      	beq.n	8bf0 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8bdc:	6838      	ldr	r0, [r7, #0]
    8bde:	4b07      	ldr	r3, [pc, #28]	; (8bfc <_spi_err_check+0x38>)
    8be0:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8be2:	2180      	movs	r1, #128	; 0x80
    8be4:	6838      	ldr	r0, [r7, #0]
    8be6:	4b06      	ldr	r3, [pc, #24]	; (8c00 <_spi_err_check+0x3c>)
    8be8:	4798      	blx	r3
		return ERR_OVERFLOW;
    8bea:	f06f 0312 	mvn.w	r3, #18
    8bee:	e000      	b.n	8bf2 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8bf0:	2300      	movs	r3, #0
}
    8bf2:	4618      	mov	r0, r3
    8bf4:	3708      	adds	r7, #8
    8bf6:	46bd      	mov	sp, r7
    8bf8:	bd80      	pop	{r7, pc}
    8bfa:	bf00      	nop
    8bfc:	00007e01 	.word	0x00007e01
    8c00:	000079a5 	.word	0x000079a5

00008c04 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    8c04:	b590      	push	{r4, r7, lr}
    8c06:	b08b      	sub	sp, #44	; 0x2c
    8c08:	af00      	add	r7, sp, #0
    8c0a:	6078      	str	r0, [r7, #4]
    8c0c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	681b      	ldr	r3, [r3, #0]
    8c12:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    8c14:	2300      	movs	r3, #0
    8c16:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    8c18:	683b      	ldr	r3, [r7, #0]
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	60bb      	str	r3, [r7, #8]
    8c1e:	683b      	ldr	r3, [r7, #0]
    8c20:	685b      	ldr	r3, [r3, #4]
    8c22:	60fb      	str	r3, [r7, #12]
    8c24:	2300      	movs	r3, #0
    8c26:	613b      	str	r3, [r7, #16]
    8c28:	2300      	movs	r3, #0
    8c2a:	617b      	str	r3, [r7, #20]
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	791b      	ldrb	r3, [r3, #4]
    8c30:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    8c32:	687b      	ldr	r3, [r7, #4]
    8c34:	2b00      	cmp	r3, #0
    8c36:	d004      	beq.n	8c42 <_spi_m_sync_trans+0x3e>
    8c38:	6a3b      	ldr	r3, [r7, #32]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d001      	beq.n	8c42 <_spi_m_sync_trans+0x3e>
    8c3e:	2301      	movs	r3, #1
    8c40:	e000      	b.n	8c44 <_spi_m_sync_trans+0x40>
    8c42:	2300      	movs	r3, #0
    8c44:	f003 0301 	and.w	r3, r3, #1
    8c48:	b2db      	uxtb	r3, r3
    8c4a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    8c4e:	492b      	ldr	r1, [pc, #172]	; (8cfc <_spi_m_sync_trans+0xf8>)
    8c50:	4618      	mov	r0, r3
    8c52:	4b2b      	ldr	r3, [pc, #172]	; (8d00 <_spi_m_sync_trans+0xfc>)
    8c54:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    8c56:	2107      	movs	r1, #7
    8c58:	6a38      	ldr	r0, [r7, #32]
    8c5a:	4b2a      	ldr	r3, [pc, #168]	; (8d04 <_spi_m_sync_trans+0x100>)
    8c5c:	4798      	blx	r3
    8c5e:	4603      	mov	r3, r0
    8c60:	2b00      	cmp	r3, #0
    8c62:	d002      	beq.n	8c6a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    8c64:	f06f 0303 	mvn.w	r3, #3
    8c68:	e043      	b.n	8cf2 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    8c6a:	6a38      	ldr	r0, [r7, #32]
    8c6c:	4b26      	ldr	r3, [pc, #152]	; (8d08 <_spi_m_sync_trans+0x104>)
    8c6e:	4798      	blx	r3
    8c70:	4603      	mov	r3, r0
    8c72:	f083 0301 	eor.w	r3, r3, #1
    8c76:	b2db      	uxtb	r3, r3
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d002      	beq.n	8c82 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    8c7c:	f06f 0313 	mvn.w	r3, #19
    8c80:	e037      	b.n	8cf2 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    8c82:	6a38      	ldr	r0, [r7, #32]
    8c84:	4b21      	ldr	r3, [pc, #132]	; (8d0c <_spi_m_sync_trans+0x108>)
    8c86:	4798      	blx	r3
    8c88:	4603      	mov	r3, r0
    8c8a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    8c8c:	f107 0308 	add.w	r3, r7, #8
    8c90:	461a      	mov	r2, r3
    8c92:	69f9      	ldr	r1, [r7, #28]
    8c94:	6a38      	ldr	r0, [r7, #32]
    8c96:	4b1e      	ldr	r3, [pc, #120]	; (8d10 <_spi_m_sync_trans+0x10c>)
    8c98:	4798      	blx	r3
    8c9a:	4603      	mov	r3, r0
    8c9c:	f083 0301 	eor.w	r3, r3, #1
    8ca0:	b2db      	uxtb	r3, r3
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	d00b      	beq.n	8cbe <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    8ca6:	697a      	ldr	r2, [r7, #20]
    8ca8:	693b      	ldr	r3, [r7, #16]
    8caa:	429a      	cmp	r2, r3
    8cac:	d307      	bcc.n	8cbe <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    8cae:	687b      	ldr	r3, [r7, #4]
    8cb0:	88db      	ldrh	r3, [r3, #6]
    8cb2:	f107 0208 	add.w	r2, r7, #8
    8cb6:	69f9      	ldr	r1, [r7, #28]
    8cb8:	6a38      	ldr	r0, [r7, #32]
    8cba:	4c16      	ldr	r4, [pc, #88]	; (8d14 <_spi_m_sync_trans+0x110>)
    8cbc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    8cbe:	6a39      	ldr	r1, [r7, #32]
    8cc0:	69f8      	ldr	r0, [r7, #28]
    8cc2:	4b15      	ldr	r3, [pc, #84]	; (8d18 <_spi_m_sync_trans+0x114>)
    8cc4:	4798      	blx	r3
    8cc6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cca:	2b00      	cmp	r3, #0
    8ccc:	db0c      	blt.n	8ce8 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    8cce:	693a      	ldr	r2, [r7, #16]
    8cd0:	683b      	ldr	r3, [r7, #0]
    8cd2:	689b      	ldr	r3, [r3, #8]
    8cd4:	429a      	cmp	r2, r3
    8cd6:	d3d4      	bcc.n	8c82 <_spi_m_sync_trans+0x7e>
    8cd8:	697a      	ldr	r2, [r7, #20]
    8cda:	683b      	ldr	r3, [r7, #0]
    8cdc:	689b      	ldr	r3, [r3, #8]
    8cde:	429a      	cmp	r2, r3
    8ce0:	d3cf      	bcc.n	8c82 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8ce2:	693b      	ldr	r3, [r7, #16]
    8ce4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8ce6:	e000      	b.n	8cea <_spi_m_sync_trans+0xe6>
			break;
    8ce8:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    8cea:	6a38      	ldr	r0, [r7, #32]
    8cec:	4b0b      	ldr	r3, [pc, #44]	; (8d1c <_spi_m_sync_trans+0x118>)
    8cee:	4798      	blx	r3

	return rc;
    8cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8cf2:	4618      	mov	r0, r3
    8cf4:	372c      	adds	r7, #44	; 0x2c
    8cf6:	46bd      	mov	sp, r7
    8cf8:	bd90      	pop	{r4, r7, pc}
    8cfa:	bf00      	nop
    8cfc:	0001ad9c 	.word	0x0001ad9c
    8d00:	00004bbd 	.word	0x00004bbd
    8d04:	000078ed 	.word	0x000078ed
    8d08:	00007ac1 	.word	0x00007ac1
    8d0c:	0000798b 	.word	0x0000798b
    8d10:	00008ae1 	.word	0x00008ae1
    8d14:	00008b4d 	.word	0x00008b4d
    8d18:	00008bc5 	.word	0x00008bc5
    8d1c:	00008ab1 	.word	0x00008ab1

00008d20 <__NVIC_EnableIRQ>:
{
    8d20:	b480      	push	{r7}
    8d22:	b083      	sub	sp, #12
    8d24:	af00      	add	r7, sp, #0
    8d26:	4603      	mov	r3, r0
    8d28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	db0b      	blt.n	8d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d32:	4909      	ldr	r1, [pc, #36]	; (8d58 <__NVIC_EnableIRQ+0x38>)
    8d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d38:	095b      	lsrs	r3, r3, #5
    8d3a:	88fa      	ldrh	r2, [r7, #6]
    8d3c:	f002 021f 	and.w	r2, r2, #31
    8d40:	2001      	movs	r0, #1
    8d42:	fa00 f202 	lsl.w	r2, r0, r2
    8d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d4a:	bf00      	nop
    8d4c:	370c      	adds	r7, #12
    8d4e:	46bd      	mov	sp, r7
    8d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d54:	4770      	bx	lr
    8d56:	bf00      	nop
    8d58:	e000e100 	.word	0xe000e100

00008d5c <__NVIC_DisableIRQ>:
{
    8d5c:	b480      	push	{r7}
    8d5e:	b083      	sub	sp, #12
    8d60:	af00      	add	r7, sp, #0
    8d62:	4603      	mov	r3, r0
    8d64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	db10      	blt.n	8d90 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d6e:	490b      	ldr	r1, [pc, #44]	; (8d9c <__NVIC_DisableIRQ+0x40>)
    8d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d74:	095b      	lsrs	r3, r3, #5
    8d76:	88fa      	ldrh	r2, [r7, #6]
    8d78:	f002 021f 	and.w	r2, r2, #31
    8d7c:	2001      	movs	r0, #1
    8d7e:	fa00 f202 	lsl.w	r2, r0, r2
    8d82:	3320      	adds	r3, #32
    8d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8d88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8d8c:	f3bf 8f6f 	isb	sy
}
    8d90:	bf00      	nop
    8d92:	370c      	adds	r7, #12
    8d94:	46bd      	mov	sp, r7
    8d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d9a:	4770      	bx	lr
    8d9c:	e000e100 	.word	0xe000e100

00008da0 <__NVIC_ClearPendingIRQ>:
{
    8da0:	b480      	push	{r7}
    8da2:	b083      	sub	sp, #12
    8da4:	af00      	add	r7, sp, #0
    8da6:	4603      	mov	r3, r0
    8da8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8dae:	2b00      	cmp	r3, #0
    8db0:	db0c      	blt.n	8dcc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8db2:	4909      	ldr	r1, [pc, #36]	; (8dd8 <__NVIC_ClearPendingIRQ+0x38>)
    8db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8db8:	095b      	lsrs	r3, r3, #5
    8dba:	88fa      	ldrh	r2, [r7, #6]
    8dbc:	f002 021f 	and.w	r2, r2, #31
    8dc0:	2001      	movs	r0, #1
    8dc2:	fa00 f202 	lsl.w	r2, r0, r2
    8dc6:	3360      	adds	r3, #96	; 0x60
    8dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8dcc:	bf00      	nop
    8dce:	370c      	adds	r7, #12
    8dd0:	46bd      	mov	sp, r7
    8dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dd6:	4770      	bx	lr
    8dd8:	e000e100 	.word	0xe000e100

00008ddc <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8ddc:	b480      	push	{r7}
    8dde:	b083      	sub	sp, #12
    8de0:	af00      	add	r7, sp, #0
    8de2:	6078      	str	r0, [r7, #4]
    8de4:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    8de6:	bf00      	nop
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	689a      	ldr	r2, [r3, #8]
    8dec:	683b      	ldr	r3, [r7, #0]
    8dee:	4013      	ands	r3, r2
    8df0:	2b00      	cmp	r3, #0
    8df2:	d1f9      	bne.n	8de8 <hri_tcc_wait_for_sync+0xc>
	};
}
    8df4:	bf00      	nop
    8df6:	370c      	adds	r7, #12
    8df8:	46bd      	mov	sp, r7
    8dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dfe:	4770      	bx	lr

00008e00 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8e00:	b480      	push	{r7}
    8e02:	b083      	sub	sp, #12
    8e04:	af00      	add	r7, sp, #0
    8e06:	6078      	str	r0, [r7, #4]
    8e08:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	689a      	ldr	r2, [r3, #8]
    8e0e:	683b      	ldr	r3, [r7, #0]
    8e10:	4013      	ands	r3, r2
    8e12:	2b00      	cmp	r3, #0
    8e14:	bf14      	ite	ne
    8e16:	2301      	movne	r3, #1
    8e18:	2300      	moveq	r3, #0
    8e1a:	b2db      	uxtb	r3, r3
}
    8e1c:	4618      	mov	r0, r3
    8e1e:	370c      	adds	r7, #12
    8e20:	46bd      	mov	sp, r7
    8e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e26:	4770      	bx	lr

00008e28 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    8e28:	b480      	push	{r7}
    8e2a:	b083      	sub	sp, #12
    8e2c:	af00      	add	r7, sp, #0
    8e2e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8e34:	f003 0301 	and.w	r3, r3, #1
    8e38:	2b00      	cmp	r3, #0
    8e3a:	bf14      	ite	ne
    8e3c:	2301      	movne	r3, #1
    8e3e:	2300      	moveq	r3, #0
    8e40:	b2db      	uxtb	r3, r3
}
    8e42:	4618      	mov	r0, r3
    8e44:	370c      	adds	r7, #12
    8e46:	46bd      	mov	sp, r7
    8e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e4c:	4770      	bx	lr

00008e4e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    8e4e:	b480      	push	{r7}
    8e50:	b083      	sub	sp, #12
    8e52:	af00      	add	r7, sp, #0
    8e54:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    8e56:	687b      	ldr	r3, [r7, #4]
    8e58:	2201      	movs	r2, #1
    8e5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    8e5c:	bf00      	nop
    8e5e:	370c      	adds	r7, #12
    8e60:	46bd      	mov	sp, r7
    8e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e66:	4770      	bx	lr

00008e68 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    8e68:	b480      	push	{r7}
    8e6a:	b083      	sub	sp, #12
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	6078      	str	r0, [r7, #4]
    8e70:	460b      	mov	r3, r1
    8e72:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    8e74:	687b      	ldr	r3, [r7, #4]
    8e76:	78fa      	ldrb	r2, [r7, #3]
    8e78:	715a      	strb	r2, [r3, #5]
}
    8e7a:	bf00      	nop
    8e7c:	370c      	adds	r7, #12
    8e7e:	46bd      	mov	sp, r7
    8e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e84:	4770      	bx	lr

00008e86 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    8e86:	b480      	push	{r7}
    8e88:	b083      	sub	sp, #12
    8e8a:	af00      	add	r7, sp, #0
    8e8c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	2201      	movs	r2, #1
    8e92:	629a      	str	r2, [r3, #40]	; 0x28
}
    8e94:	bf00      	nop
    8e96:	370c      	adds	r7, #12
    8e98:	46bd      	mov	sp, r7
    8e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e9e:	4770      	bx	lr

00008ea0 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8ea0:	b580      	push	{r7, lr}
    8ea2:	b082      	sub	sp, #8
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    8ea8:	687b      	ldr	r3, [r7, #4]
    8eaa:	681b      	ldr	r3, [r3, #0]
    8eac:	f043 0201 	orr.w	r2, r3, #1
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8eb4:	2101      	movs	r1, #1
    8eb6:	6878      	ldr	r0, [r7, #4]
    8eb8:	4b02      	ldr	r3, [pc, #8]	; (8ec4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    8eba:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8ebc:	bf00      	nop
    8ebe:	3708      	adds	r7, #8
    8ec0:	46bd      	mov	sp, r7
    8ec2:	bd80      	pop	{r7, pc}
    8ec4:	00008ddd 	.word	0x00008ddd

00008ec8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8ec8:	b580      	push	{r7, lr}
    8eca:	b082      	sub	sp, #8
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    8ed0:	687b      	ldr	r3, [r7, #4]
    8ed2:	681b      	ldr	r3, [r3, #0]
    8ed4:	f043 0202 	orr.w	r2, r3, #2
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8edc:	2103      	movs	r1, #3
    8ede:	6878      	ldr	r0, [r7, #4]
    8ee0:	4b02      	ldr	r3, [pc, #8]	; (8eec <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    8ee2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8ee4:	bf00      	nop
    8ee6:	3708      	adds	r7, #8
    8ee8:	46bd      	mov	sp, r7
    8eea:	bd80      	pop	{r7, pc}
    8eec:	00008ddd 	.word	0x00008ddd

00008ef0 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8ef0:	b580      	push	{r7, lr}
    8ef2:	b084      	sub	sp, #16
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8ef8:	2103      	movs	r1, #3
    8efa:	6878      	ldr	r0, [r7, #4]
    8efc:	4b09      	ldr	r3, [pc, #36]	; (8f24 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    8efe:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	681b      	ldr	r3, [r3, #0]
    8f04:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    8f06:	68fb      	ldr	r3, [r7, #12]
    8f08:	085b      	lsrs	r3, r3, #1
    8f0a:	f003 0301 	and.w	r3, r3, #1
    8f0e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8f10:	68fb      	ldr	r3, [r7, #12]
    8f12:	2b00      	cmp	r3, #0
    8f14:	bf14      	ite	ne
    8f16:	2301      	movne	r3, #1
    8f18:	2300      	moveq	r3, #0
    8f1a:	b2db      	uxtb	r3, r3
}
    8f1c:	4618      	mov	r0, r3
    8f1e:	3710      	adds	r7, #16
    8f20:	46bd      	mov	sp, r7
    8f22:	bd80      	pop	{r7, pc}
    8f24:	00008ddd 	.word	0x00008ddd

00008f28 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8f28:	b580      	push	{r7, lr}
    8f2a:	b082      	sub	sp, #8
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	681b      	ldr	r3, [r3, #0]
    8f34:	f023 0202 	bic.w	r2, r3, #2
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8f3c:	2103      	movs	r1, #3
    8f3e:	6878      	ldr	r0, [r7, #4]
    8f40:	4b02      	ldr	r3, [pc, #8]	; (8f4c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    8f42:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8f44:	bf00      	nop
    8f46:	3708      	adds	r7, #8
    8f48:	46bd      	mov	sp, r7
    8f4a:	bd80      	pop	{r7, pc}
    8f4c:	00008ddd 	.word	0x00008ddd

00008f50 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    8f50:	b580      	push	{r7, lr}
    8f52:	b084      	sub	sp, #16
    8f54:	af00      	add	r7, sp, #0
    8f56:	6078      	str	r0, [r7, #4]
    8f58:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8f5a:	2103      	movs	r1, #3
    8f5c:	6878      	ldr	r0, [r7, #4]
    8f5e:	4b07      	ldr	r3, [pc, #28]	; (8f7c <hri_tcc_get_CTRLA_reg+0x2c>)
    8f60:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	681b      	ldr	r3, [r3, #0]
    8f66:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8f68:	68fa      	ldr	r2, [r7, #12]
    8f6a:	683b      	ldr	r3, [r7, #0]
    8f6c:	4013      	ands	r3, r2
    8f6e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8f70:	68fb      	ldr	r3, [r7, #12]
}
    8f72:	4618      	mov	r0, r3
    8f74:	3710      	adds	r7, #16
    8f76:	46bd      	mov	sp, r7
    8f78:	bd80      	pop	{r7, pc}
    8f7a:	bf00      	nop
    8f7c:	00008ddd 	.word	0x00008ddd

00008f80 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    8f80:	b580      	push	{r7, lr}
    8f82:	b082      	sub	sp, #8
    8f84:	af00      	add	r7, sp, #0
    8f86:	6078      	str	r0, [r7, #4]
    8f88:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	683a      	ldr	r2, [r7, #0]
    8f8e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8f90:	2103      	movs	r1, #3
    8f92:	6878      	ldr	r0, [r7, #4]
    8f94:	4b02      	ldr	r3, [pc, #8]	; (8fa0 <hri_tcc_write_CTRLA_reg+0x20>)
    8f96:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8f98:	bf00      	nop
    8f9a:	3708      	adds	r7, #8
    8f9c:	46bd      	mov	sp, r7
    8f9e:	bd80      	pop	{r7, pc}
    8fa0:	00008ddd 	.word	0x00008ddd

00008fa4 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    8fa4:	b480      	push	{r7}
    8fa6:	b083      	sub	sp, #12
    8fa8:	af00      	add	r7, sp, #0
    8faa:	6078      	str	r0, [r7, #4]
    8fac:	460b      	mov	r3, r1
    8fae:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	78fa      	ldrb	r2, [r7, #3]
    8fb4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8fb6:	bf00      	nop
    8fb8:	370c      	adds	r7, #12
    8fba:	46bd      	mov	sp, r7
    8fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fc0:	4770      	bx	lr

00008fc2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    8fc2:	b480      	push	{r7}
    8fc4:	b083      	sub	sp, #12
    8fc6:	af00      	add	r7, sp, #0
    8fc8:	6078      	str	r0, [r7, #4]
    8fca:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	683a      	ldr	r2, [r7, #0]
    8fd0:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8fd2:	bf00      	nop
    8fd4:	370c      	adds	r7, #12
    8fd6:	46bd      	mov	sp, r7
    8fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fdc:	4770      	bx	lr
	...

00008fe0 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    8fe0:	b580      	push	{r7, lr}
    8fe2:	b082      	sub	sp, #8
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	6078      	str	r0, [r7, #4]
    8fe8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    8fea:	687b      	ldr	r3, [r7, #4]
    8fec:	683a      	ldr	r2, [r7, #0]
    8fee:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8ff0:	2180      	movs	r1, #128	; 0x80
    8ff2:	6878      	ldr	r0, [r7, #4]
    8ff4:	4b02      	ldr	r3, [pc, #8]	; (9000 <hri_tcc_write_PER_reg+0x20>)
    8ff6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8ff8:	bf00      	nop
    8ffa:	3708      	adds	r7, #8
    8ffc:	46bd      	mov	sp, r7
    8ffe:	bd80      	pop	{r7, pc}
    9000:	00008ddd 	.word	0x00008ddd

00009004 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    9004:	b580      	push	{r7, lr}
    9006:	b082      	sub	sp, #8
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    900c:	2180      	movs	r1, #128	; 0x80
    900e:	6878      	ldr	r0, [r7, #4]
    9010:	4b03      	ldr	r3, [pc, #12]	; (9020 <hri_tcc_read_PER_reg+0x1c>)
    9012:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    9018:	4618      	mov	r0, r3
    901a:	3708      	adds	r7, #8
    901c:	46bd      	mov	sp, r7
    901e:	bd80      	pop	{r7, pc}
    9020:	00008ddd 	.word	0x00008ddd

00009024 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    9024:	b480      	push	{r7}
    9026:	b083      	sub	sp, #12
    9028:	af00      	add	r7, sp, #0
    902a:	6078      	str	r0, [r7, #4]
    902c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	4a0c      	ldr	r2, [pc, #48]	; (9064 <_tcc_init_irq_param+0x40>)
    9032:	4293      	cmp	r3, r2
    9034:	d102      	bne.n	903c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    9036:	4a0c      	ldr	r2, [pc, #48]	; (9068 <_tcc_init_irq_param+0x44>)
    9038:	683b      	ldr	r3, [r7, #0]
    903a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	4a0b      	ldr	r2, [pc, #44]	; (906c <_tcc_init_irq_param+0x48>)
    9040:	4293      	cmp	r3, r2
    9042:	d102      	bne.n	904a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    9044:	4a0a      	ldr	r2, [pc, #40]	; (9070 <_tcc_init_irq_param+0x4c>)
    9046:	683b      	ldr	r3, [r7, #0]
    9048:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    904a:	687b      	ldr	r3, [r7, #4]
    904c:	4a09      	ldr	r2, [pc, #36]	; (9074 <_tcc_init_irq_param+0x50>)
    904e:	4293      	cmp	r3, r2
    9050:	d102      	bne.n	9058 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    9052:	4a09      	ldr	r2, [pc, #36]	; (9078 <_tcc_init_irq_param+0x54>)
    9054:	683b      	ldr	r3, [r7, #0]
    9056:	6013      	str	r3, [r2, #0]
	}
}
    9058:	bf00      	nop
    905a:	370c      	adds	r7, #12
    905c:	46bd      	mov	sp, r7
    905e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9062:	4770      	bx	lr
    9064:	41016000 	.word	0x41016000
    9068:	20002314 	.word	0x20002314
    906c:	41018000 	.word	0x41018000
    9070:	20002318 	.word	0x20002318
    9074:	42000c00 	.word	0x42000c00
    9078:	2000231c 	.word	0x2000231c

0000907c <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    907c:	b580      	push	{r7, lr}
    907e:	b084      	sub	sp, #16
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
    9084:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    9086:	6838      	ldr	r0, [r7, #0]
    9088:	4b33      	ldr	r3, [pc, #204]	; (9158 <_tcc_timer_init+0xdc>)
    908a:	4798      	blx	r3
    908c:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    908e:	68fb      	ldr	r3, [r7, #12]
    9090:	2b00      	cmp	r3, #0
    9092:	d102      	bne.n	909a <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    9094:	f06f 0309 	mvn.w	r3, #9
    9098:	e05a      	b.n	9150 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	683a      	ldr	r2, [r7, #0]
    909e:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    90a0:	2101      	movs	r1, #1
    90a2:	6838      	ldr	r0, [r7, #0]
    90a4:	4b2d      	ldr	r3, [pc, #180]	; (915c <_tcc_timer_init+0xe0>)
    90a6:	4798      	blx	r3
    90a8:	4603      	mov	r3, r0
    90aa:	f083 0301 	eor.w	r3, r3, #1
    90ae:	b2db      	uxtb	r3, r3
    90b0:	2b00      	cmp	r3, #0
    90b2:	d011      	beq.n	90d8 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    90b4:	2102      	movs	r1, #2
    90b6:	6838      	ldr	r0, [r7, #0]
    90b8:	4b29      	ldr	r3, [pc, #164]	; (9160 <_tcc_timer_init+0xe4>)
    90ba:	4798      	blx	r3
    90bc:	4603      	mov	r3, r0
    90be:	2b00      	cmp	r3, #0
    90c0:	d006      	beq.n	90d0 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    90c2:	6838      	ldr	r0, [r7, #0]
    90c4:	4b27      	ldr	r3, [pc, #156]	; (9164 <_tcc_timer_init+0xe8>)
    90c6:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    90c8:	2102      	movs	r1, #2
    90ca:	6838      	ldr	r0, [r7, #0]
    90cc:	4b26      	ldr	r3, [pc, #152]	; (9168 <_tcc_timer_init+0xec>)
    90ce:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    90d0:	2101      	movs	r1, #1
    90d2:	6838      	ldr	r0, [r7, #0]
    90d4:	4b25      	ldr	r3, [pc, #148]	; (916c <_tcc_timer_init+0xf0>)
    90d6:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    90d8:	2101      	movs	r1, #1
    90da:	6838      	ldr	r0, [r7, #0]
    90dc:	4b22      	ldr	r3, [pc, #136]	; (9168 <_tcc_timer_init+0xec>)
    90de:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    90e0:	68fb      	ldr	r3, [r7, #12]
    90e2:	689b      	ldr	r3, [r3, #8]
    90e4:	4619      	mov	r1, r3
    90e6:	6838      	ldr	r0, [r7, #0]
    90e8:	4b20      	ldr	r3, [pc, #128]	; (916c <_tcc_timer_init+0xf0>)
    90ea:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    90ec:	68fb      	ldr	r3, [r7, #12]
    90ee:	7b1b      	ldrb	r3, [r3, #12]
    90f0:	4619      	mov	r1, r3
    90f2:	6838      	ldr	r0, [r7, #0]
    90f4:	4b1e      	ldr	r3, [pc, #120]	; (9170 <_tcc_timer_init+0xf4>)
    90f6:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    90f8:	68fb      	ldr	r3, [r7, #12]
    90fa:	7b5b      	ldrb	r3, [r3, #13]
    90fc:	4619      	mov	r1, r3
    90fe:	6838      	ldr	r0, [r7, #0]
    9100:	4b1c      	ldr	r3, [pc, #112]	; (9174 <_tcc_timer_init+0xf8>)
    9102:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    9104:	68fb      	ldr	r3, [r7, #12]
    9106:	691b      	ldr	r3, [r3, #16]
    9108:	4619      	mov	r1, r3
    910a:	6838      	ldr	r0, [r7, #0]
    910c:	4b1a      	ldr	r3, [pc, #104]	; (9178 <_tcc_timer_init+0xfc>)
    910e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9114:	4619      	mov	r1, r3
    9116:	6838      	ldr	r0, [r7, #0]
    9118:	4b18      	ldr	r3, [pc, #96]	; (917c <_tcc_timer_init+0x100>)
    911a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    911c:	6838      	ldr	r0, [r7, #0]
    911e:	4b18      	ldr	r3, [pc, #96]	; (9180 <_tcc_timer_init+0x104>)
    9120:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    9122:	6879      	ldr	r1, [r7, #4]
    9124:	6838      	ldr	r0, [r7, #0]
    9126:	4b17      	ldr	r3, [pc, #92]	; (9184 <_tcc_timer_init+0x108>)
    9128:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    912a:	68fb      	ldr	r3, [r7, #12]
    912c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9130:	4618      	mov	r0, r3
    9132:	4b15      	ldr	r3, [pc, #84]	; (9188 <_tcc_timer_init+0x10c>)
    9134:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    9136:	68fb      	ldr	r3, [r7, #12]
    9138:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    913c:	4618      	mov	r0, r3
    913e:	4b13      	ldr	r3, [pc, #76]	; (918c <_tcc_timer_init+0x110>)
    9140:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    9142:	68fb      	ldr	r3, [r7, #12]
    9144:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9148:	4618      	mov	r0, r3
    914a:	4b11      	ldr	r3, [pc, #68]	; (9190 <_tcc_timer_init+0x114>)
    914c:	4798      	blx	r3

	return ERR_NONE;
    914e:	2300      	movs	r3, #0
}
    9150:	4618      	mov	r0, r3
    9152:	3710      	adds	r7, #16
    9154:	46bd      	mov	sp, r7
    9156:	bd80      	pop	{r7, pc}
    9158:	00009361 	.word	0x00009361
    915c:	00008e01 	.word	0x00008e01
    9160:	00008f51 	.word	0x00008f51
    9164:	00008f29 	.word	0x00008f29
    9168:	00008ddd 	.word	0x00008ddd
    916c:	00008f81 	.word	0x00008f81
    9170:	00008e69 	.word	0x00008e69
    9174:	00008fa5 	.word	0x00008fa5
    9178:	00008fc3 	.word	0x00008fc3
    917c:	00008fe1 	.word	0x00008fe1
    9180:	00008e87 	.word	0x00008e87
    9184:	00009025 	.word	0x00009025
    9188:	00008d5d 	.word	0x00008d5d
    918c:	00008da1 	.word	0x00008da1
    9190:	00008d21 	.word	0x00008d21

00009194 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    9194:	b580      	push	{r7, lr}
    9196:	b084      	sub	sp, #16
    9198:	af00      	add	r7, sp, #0
    919a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	68db      	ldr	r3, [r3, #12]
    91a0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    91a2:	68f8      	ldr	r0, [r7, #12]
    91a4:	4b0a      	ldr	r3, [pc, #40]	; (91d0 <_tcc_timer_deinit+0x3c>)
    91a6:	4798      	blx	r3
    91a8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    91aa:	68bb      	ldr	r3, [r7, #8]
    91ac:	2b00      	cmp	r3, #0
    91ae:	d00b      	beq.n	91c8 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    91b0:	68bb      	ldr	r3, [r7, #8]
    91b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    91b6:	4618      	mov	r0, r3
    91b8:	4b06      	ldr	r3, [pc, #24]	; (91d4 <_tcc_timer_deinit+0x40>)
    91ba:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    91bc:	68f8      	ldr	r0, [r7, #12]
    91be:	4b06      	ldr	r3, [pc, #24]	; (91d8 <_tcc_timer_deinit+0x44>)
    91c0:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    91c2:	68f8      	ldr	r0, [r7, #12]
    91c4:	4b05      	ldr	r3, [pc, #20]	; (91dc <_tcc_timer_deinit+0x48>)
    91c6:	4798      	blx	r3
	}
}
    91c8:	bf00      	nop
    91ca:	3710      	adds	r7, #16
    91cc:	46bd      	mov	sp, r7
    91ce:	bd80      	pop	{r7, pc}
    91d0:	00009361 	.word	0x00009361
    91d4:	00008d5d 	.word	0x00008d5d
    91d8:	00008f29 	.word	0x00008f29
    91dc:	00008ea1 	.word	0x00008ea1

000091e0 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    91e0:	b580      	push	{r7, lr}
    91e2:	b082      	sub	sp, #8
    91e4:	af00      	add	r7, sp, #0
    91e6:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    91e8:	687b      	ldr	r3, [r7, #4]
    91ea:	68db      	ldr	r3, [r3, #12]
    91ec:	4618      	mov	r0, r3
    91ee:	4b03      	ldr	r3, [pc, #12]	; (91fc <_tcc_timer_start+0x1c>)
    91f0:	4798      	blx	r3
}
    91f2:	bf00      	nop
    91f4:	3708      	adds	r7, #8
    91f6:	46bd      	mov	sp, r7
    91f8:	bd80      	pop	{r7, pc}
    91fa:	bf00      	nop
    91fc:	00008ec9 	.word	0x00008ec9

00009200 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    9200:	b580      	push	{r7, lr}
    9202:	b082      	sub	sp, #8
    9204:	af00      	add	r7, sp, #0
    9206:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    9208:	687b      	ldr	r3, [r7, #4]
    920a:	68db      	ldr	r3, [r3, #12]
    920c:	4618      	mov	r0, r3
    920e:	4b03      	ldr	r3, [pc, #12]	; (921c <_tcc_timer_stop+0x1c>)
    9210:	4798      	blx	r3
}
    9212:	bf00      	nop
    9214:	3708      	adds	r7, #8
    9216:	46bd      	mov	sp, r7
    9218:	bd80      	pop	{r7, pc}
    921a:	bf00      	nop
    921c:	00008f29 	.word	0x00008f29

00009220 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9220:	b580      	push	{r7, lr}
    9222:	b082      	sub	sp, #8
    9224:	af00      	add	r7, sp, #0
    9226:	6078      	str	r0, [r7, #4]
    9228:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	68db      	ldr	r3, [r3, #12]
    922e:	6839      	ldr	r1, [r7, #0]
    9230:	4618      	mov	r0, r3
    9232:	4b03      	ldr	r3, [pc, #12]	; (9240 <_tcc_timer_set_period+0x20>)
    9234:	4798      	blx	r3
}
    9236:	bf00      	nop
    9238:	3708      	adds	r7, #8
    923a:	46bd      	mov	sp, r7
    923c:	bd80      	pop	{r7, pc}
    923e:	bf00      	nop
    9240:	00008fe1 	.word	0x00008fe1

00009244 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    9244:	b580      	push	{r7, lr}
    9246:	b082      	sub	sp, #8
    9248:	af00      	add	r7, sp, #0
    924a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    924c:	687b      	ldr	r3, [r7, #4]
    924e:	68db      	ldr	r3, [r3, #12]
    9250:	4618      	mov	r0, r3
    9252:	4b03      	ldr	r3, [pc, #12]	; (9260 <_tcc_timer_get_period+0x1c>)
    9254:	4798      	blx	r3
    9256:	4603      	mov	r3, r0
}
    9258:	4618      	mov	r0, r3
    925a:	3708      	adds	r7, #8
    925c:	46bd      	mov	sp, r7
    925e:	bd80      	pop	{r7, pc}
    9260:	00009005 	.word	0x00009005

00009264 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    9264:	b580      	push	{r7, lr}
    9266:	b082      	sub	sp, #8
    9268:	af00      	add	r7, sp, #0
    926a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	68db      	ldr	r3, [r3, #12]
    9270:	4618      	mov	r0, r3
    9272:	4b03      	ldr	r3, [pc, #12]	; (9280 <_tcc_timer_is_started+0x1c>)
    9274:	4798      	blx	r3
    9276:	4603      	mov	r3, r0
}
    9278:	4618      	mov	r0, r3
    927a:	3708      	adds	r7, #8
    927c:	46bd      	mov	sp, r7
    927e:	bd80      	pop	{r7, pc}
    9280:	00008ef1 	.word	0x00008ef1

00009284 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    9284:	b480      	push	{r7}
    9286:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    9288:	4b02      	ldr	r3, [pc, #8]	; (9294 <_tcc_get_timer+0x10>)
}
    928a:	4618      	mov	r0, r3
    928c:	46bd      	mov	sp, r7
    928e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9292:	4770      	bx	lr
    9294:	200000f0 	.word	0x200000f0

00009298 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    9298:	b580      	push	{r7, lr}
    929a:	b084      	sub	sp, #16
    929c:	af00      	add	r7, sp, #0
    929e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	68db      	ldr	r3, [r3, #12]
    92a4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    92a6:	68f8      	ldr	r0, [r7, #12]
    92a8:	4b08      	ldr	r3, [pc, #32]	; (92cc <_tcc_timer_set_irq+0x34>)
    92aa:	4798      	blx	r3
    92ac:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    92ae:	68bb      	ldr	r3, [r7, #8]
    92b0:	2b00      	cmp	r3, #0
    92b2:	d006      	beq.n	92c2 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    92b4:	68bb      	ldr	r3, [r7, #8]
    92b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    92ba:	b2db      	uxtb	r3, r3
    92bc:	4618      	mov	r0, r3
    92be:	4b04      	ldr	r3, [pc, #16]	; (92d0 <_tcc_timer_set_irq+0x38>)
    92c0:	4798      	blx	r3
	}
}
    92c2:	bf00      	nop
    92c4:	3710      	adds	r7, #16
    92c6:	46bd      	mov	sp, r7
    92c8:	bd80      	pop	{r7, pc}
    92ca:	bf00      	nop
    92cc:	00009361 	.word	0x00009361
    92d0:	00005a55 	.word	0x00005a55

000092d4 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	b084      	sub	sp, #16
    92d8:	af00      	add	r7, sp, #0
    92da:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	68db      	ldr	r3, [r3, #12]
    92e0:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    92e2:	68f8      	ldr	r0, [r7, #12]
    92e4:	4b07      	ldr	r3, [pc, #28]	; (9304 <tcc_interrupt_handler+0x30>)
    92e6:	4798      	blx	r3
    92e8:	4603      	mov	r3, r0
    92ea:	2b00      	cmp	r3, #0
    92ec:	d006      	beq.n	92fc <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    92ee:	68f8      	ldr	r0, [r7, #12]
    92f0:	4b05      	ldr	r3, [pc, #20]	; (9308 <tcc_interrupt_handler+0x34>)
    92f2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	681b      	ldr	r3, [r3, #0]
    92f8:	6878      	ldr	r0, [r7, #4]
    92fa:	4798      	blx	r3
	}
}
    92fc:	bf00      	nop
    92fe:	3710      	adds	r7, #16
    9300:	46bd      	mov	sp, r7
    9302:	bd80      	pop	{r7, pc}
    9304:	00008e29 	.word	0x00008e29
    9308:	00008e4f 	.word	0x00008e4f

0000930c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    930c:	b580      	push	{r7, lr}
    930e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    9310:	4b03      	ldr	r3, [pc, #12]	; (9320 <TCC0_0_Handler+0x14>)
    9312:	681b      	ldr	r3, [r3, #0]
    9314:	4618      	mov	r0, r3
    9316:	4b03      	ldr	r3, [pc, #12]	; (9324 <TCC0_0_Handler+0x18>)
    9318:	4798      	blx	r3
}
    931a:	bf00      	nop
    931c:	bd80      	pop	{r7, pc}
    931e:	bf00      	nop
    9320:	20002314 	.word	0x20002314
    9324:	000092d5 	.word	0x000092d5

00009328 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    9328:	b580      	push	{r7, lr}
    932a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    932c:	4b03      	ldr	r3, [pc, #12]	; (933c <TCC1_0_Handler+0x14>)
    932e:	681b      	ldr	r3, [r3, #0]
    9330:	4618      	mov	r0, r3
    9332:	4b03      	ldr	r3, [pc, #12]	; (9340 <TCC1_0_Handler+0x18>)
    9334:	4798      	blx	r3
}
    9336:	bf00      	nop
    9338:	bd80      	pop	{r7, pc}
    933a:	bf00      	nop
    933c:	20002318 	.word	0x20002318
    9340:	000092d5 	.word	0x000092d5

00009344 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    9344:	b580      	push	{r7, lr}
    9346:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    9348:	4b03      	ldr	r3, [pc, #12]	; (9358 <TCC2_0_Handler+0x14>)
    934a:	681b      	ldr	r3, [r3, #0]
    934c:	4618      	mov	r0, r3
    934e:	4b03      	ldr	r3, [pc, #12]	; (935c <TCC2_0_Handler+0x18>)
    9350:	4798      	blx	r3
}
    9352:	bf00      	nop
    9354:	bd80      	pop	{r7, pc}
    9356:	bf00      	nop
    9358:	2000231c 	.word	0x2000231c
    935c:	000092d5 	.word	0x000092d5

00009360 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    9360:	b480      	push	{r7}
    9362:	b085      	sub	sp, #20
    9364:	af00      	add	r7, sp, #0
    9366:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    9368:	2300      	movs	r3, #0
    936a:	73fb      	strb	r3, [r7, #15]
    936c:	e015      	b.n	939a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    936e:	7bfa      	ldrb	r2, [r7, #15]
    9370:	490f      	ldr	r1, [pc, #60]	; (93b0 <_get_tcc_cfg+0x50>)
    9372:	4613      	mov	r3, r2
    9374:	005b      	lsls	r3, r3, #1
    9376:	4413      	add	r3, r2
    9378:	011b      	lsls	r3, r3, #4
    937a:	440b      	add	r3, r1
    937c:	681a      	ldr	r2, [r3, #0]
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	429a      	cmp	r2, r3
    9382:	d107      	bne.n	9394 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    9384:	7bfa      	ldrb	r2, [r7, #15]
    9386:	4613      	mov	r3, r2
    9388:	005b      	lsls	r3, r3, #1
    938a:	4413      	add	r3, r2
    938c:	011b      	lsls	r3, r3, #4
    938e:	4a08      	ldr	r2, [pc, #32]	; (93b0 <_get_tcc_cfg+0x50>)
    9390:	4413      	add	r3, r2
    9392:	e006      	b.n	93a2 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    9394:	7bfb      	ldrb	r3, [r7, #15]
    9396:	3301      	adds	r3, #1
    9398:	73fb      	strb	r3, [r7, #15]
    939a:	7bfb      	ldrb	r3, [r7, #15]
    939c:	2b02      	cmp	r3, #2
    939e:	d9e6      	bls.n	936e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    93a0:	2300      	movs	r3, #0
}
    93a2:	4618      	mov	r0, r3
    93a4:	3714      	adds	r7, #20
    93a6:	46bd      	mov	sp, r7
    93a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ac:	4770      	bx	lr
    93ae:	bf00      	nop
    93b0:	20000060 	.word	0x20000060

000093b4 <__NVIC_EnableIRQ>:
{
    93b4:	b480      	push	{r7}
    93b6:	b083      	sub	sp, #12
    93b8:	af00      	add	r7, sp, #0
    93ba:	4603      	mov	r3, r0
    93bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    93be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93c2:	2b00      	cmp	r3, #0
    93c4:	db0b      	blt.n	93de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    93c6:	4909      	ldr	r1, [pc, #36]	; (93ec <__NVIC_EnableIRQ+0x38>)
    93c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93cc:	095b      	lsrs	r3, r3, #5
    93ce:	88fa      	ldrh	r2, [r7, #6]
    93d0:	f002 021f 	and.w	r2, r2, #31
    93d4:	2001      	movs	r0, #1
    93d6:	fa00 f202 	lsl.w	r2, r0, r2
    93da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93de:	bf00      	nop
    93e0:	370c      	adds	r7, #12
    93e2:	46bd      	mov	sp, r7
    93e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e8:	4770      	bx	lr
    93ea:	bf00      	nop
    93ec:	e000e100 	.word	0xe000e100

000093f0 <__NVIC_DisableIRQ>:
{
    93f0:	b480      	push	{r7}
    93f2:	b083      	sub	sp, #12
    93f4:	af00      	add	r7, sp, #0
    93f6:	4603      	mov	r3, r0
    93f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    93fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93fe:	2b00      	cmp	r3, #0
    9400:	db10      	blt.n	9424 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9402:	490b      	ldr	r1, [pc, #44]	; (9430 <__NVIC_DisableIRQ+0x40>)
    9404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9408:	095b      	lsrs	r3, r3, #5
    940a:	88fa      	ldrh	r2, [r7, #6]
    940c:	f002 021f 	and.w	r2, r2, #31
    9410:	2001      	movs	r0, #1
    9412:	fa00 f202 	lsl.w	r2, r0, r2
    9416:	3320      	adds	r3, #32
    9418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    941c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9420:	f3bf 8f6f 	isb	sy
}
    9424:	bf00      	nop
    9426:	370c      	adds	r7, #12
    9428:	46bd      	mov	sp, r7
    942a:	f85d 7b04 	ldr.w	r7, [sp], #4
    942e:	4770      	bx	lr
    9430:	e000e100 	.word	0xe000e100

00009434 <__NVIC_ClearPendingIRQ>:
{
    9434:	b480      	push	{r7}
    9436:	b083      	sub	sp, #12
    9438:	af00      	add	r7, sp, #0
    943a:	4603      	mov	r3, r0
    943c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    943e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9442:	2b00      	cmp	r3, #0
    9444:	db0c      	blt.n	9460 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9446:	4909      	ldr	r1, [pc, #36]	; (946c <__NVIC_ClearPendingIRQ+0x38>)
    9448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    944c:	095b      	lsrs	r3, r3, #5
    944e:	88fa      	ldrh	r2, [r7, #6]
    9450:	f002 021f 	and.w	r2, r2, #31
    9454:	2001      	movs	r0, #1
    9456:	fa00 f202 	lsl.w	r2, r0, r2
    945a:	3360      	adds	r3, #96	; 0x60
    945c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9460:	bf00      	nop
    9462:	370c      	adds	r7, #12
    9464:	46bd      	mov	sp, r7
    9466:	f85d 7b04 	ldr.w	r7, [sp], #4
    946a:	4770      	bx	lr
    946c:	e000e100 	.word	0xe000e100

00009470 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9470:	b480      	push	{r7}
    9472:	b083      	sub	sp, #12
    9474:	af00      	add	r7, sp, #0
    9476:	6078      	str	r0, [r7, #4]
    9478:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    947a:	bf00      	nop
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	691a      	ldr	r2, [r3, #16]
    9480:	683b      	ldr	r3, [r7, #0]
    9482:	4013      	ands	r3, r2
    9484:	2b00      	cmp	r3, #0
    9486:	d1f9      	bne.n	947c <hri_tc_wait_for_sync+0xc>
	};
}
    9488:	bf00      	nop
    948a:	370c      	adds	r7, #12
    948c:	46bd      	mov	sp, r7
    948e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9492:	4770      	bx	lr

00009494 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9494:	b480      	push	{r7}
    9496:	b083      	sub	sp, #12
    9498:	af00      	add	r7, sp, #0
    949a:	6078      	str	r0, [r7, #4]
    949c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    949e:	687b      	ldr	r3, [r7, #4]
    94a0:	691a      	ldr	r2, [r3, #16]
    94a2:	683b      	ldr	r3, [r7, #0]
    94a4:	4013      	ands	r3, r2
    94a6:	2b00      	cmp	r3, #0
    94a8:	bf14      	ite	ne
    94aa:	2301      	movne	r3, #1
    94ac:	2300      	moveq	r3, #0
    94ae:	b2db      	uxtb	r3, r3
}
    94b0:	4618      	mov	r0, r3
    94b2:	370c      	adds	r7, #12
    94b4:	46bd      	mov	sp, r7
    94b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ba:	4770      	bx	lr

000094bc <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    94bc:	b480      	push	{r7}
    94be:	b083      	sub	sp, #12
    94c0:	af00      	add	r7, sp, #0
    94c2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    94c4:	687b      	ldr	r3, [r7, #4]
    94c6:	7a9b      	ldrb	r3, [r3, #10]
    94c8:	b2db      	uxtb	r3, r3
    94ca:	f003 0301 	and.w	r3, r3, #1
    94ce:	2b00      	cmp	r3, #0
    94d0:	bf14      	ite	ne
    94d2:	2301      	movne	r3, #1
    94d4:	2300      	moveq	r3, #0
    94d6:	b2db      	uxtb	r3, r3
}
    94d8:	4618      	mov	r0, r3
    94da:	370c      	adds	r7, #12
    94dc:	46bd      	mov	sp, r7
    94de:	f85d 7b04 	ldr.w	r7, [sp], #4
    94e2:	4770      	bx	lr

000094e4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    94e4:	b480      	push	{r7}
    94e6:	b083      	sub	sp, #12
    94e8:	af00      	add	r7, sp, #0
    94ea:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	2201      	movs	r2, #1
    94f0:	729a      	strb	r2, [r3, #10]
}
    94f2:	bf00      	nop
    94f4:	370c      	adds	r7, #12
    94f6:	46bd      	mov	sp, r7
    94f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    94fc:	4770      	bx	lr

000094fe <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    94fe:	b480      	push	{r7}
    9500:	b083      	sub	sp, #12
    9502:	af00      	add	r7, sp, #0
    9504:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    9506:	687b      	ldr	r3, [r7, #4]
    9508:	2202      	movs	r2, #2
    950a:	729a      	strb	r2, [r3, #10]
}
    950c:	bf00      	nop
    950e:	370c      	adds	r7, #12
    9510:	46bd      	mov	sp, r7
    9512:	f85d 7b04 	ldr.w	r7, [sp], #4
    9516:	4770      	bx	lr

00009518 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    9518:	b480      	push	{r7}
    951a:	b083      	sub	sp, #12
    951c:	af00      	add	r7, sp, #0
    951e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	2201      	movs	r2, #1
    9524:	725a      	strb	r2, [r3, #9]
}
    9526:	bf00      	nop
    9528:	370c      	adds	r7, #12
    952a:	46bd      	mov	sp, r7
    952c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9530:	4770      	bx	lr

00009532 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    9532:	b480      	push	{r7}
    9534:	b083      	sub	sp, #12
    9536:	af00      	add	r7, sp, #0
    9538:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	7a5b      	ldrb	r3, [r3, #9]
    953e:	b2db      	uxtb	r3, r3
    9540:	085b      	lsrs	r3, r3, #1
    9542:	f003 0301 	and.w	r3, r3, #1
    9546:	2b00      	cmp	r3, #0
    9548:	bf14      	ite	ne
    954a:	2301      	movne	r3, #1
    954c:	2300      	moveq	r3, #0
    954e:	b2db      	uxtb	r3, r3
}
    9550:	4618      	mov	r0, r3
    9552:	370c      	adds	r7, #12
    9554:	46bd      	mov	sp, r7
    9556:	f85d 7b04 	ldr.w	r7, [sp], #4
    955a:	4770      	bx	lr

0000955c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    955c:	b580      	push	{r7, lr}
    955e:	b082      	sub	sp, #8
    9560:	af00      	add	r7, sp, #0
    9562:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    9564:	687b      	ldr	r3, [r7, #4]
    9566:	681b      	ldr	r3, [r3, #0]
    9568:	f043 0201 	orr.w	r2, r3, #1
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9570:	2101      	movs	r1, #1
    9572:	6878      	ldr	r0, [r7, #4]
    9574:	4b02      	ldr	r3, [pc, #8]	; (9580 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    9576:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9578:	bf00      	nop
    957a:	3708      	adds	r7, #8
    957c:	46bd      	mov	sp, r7
    957e:	bd80      	pop	{r7, pc}
    9580:	00009471 	.word	0x00009471

00009584 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9584:	b580      	push	{r7, lr}
    9586:	b082      	sub	sp, #8
    9588:	af00      	add	r7, sp, #0
    958a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    958c:	687b      	ldr	r3, [r7, #4]
    958e:	681b      	ldr	r3, [r3, #0]
    9590:	f043 0202 	orr.w	r2, r3, #2
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9598:	2103      	movs	r1, #3
    959a:	6878      	ldr	r0, [r7, #4]
    959c:	4b02      	ldr	r3, [pc, #8]	; (95a8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    959e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    95a0:	bf00      	nop
    95a2:	3708      	adds	r7, #8
    95a4:	46bd      	mov	sp, r7
    95a6:	bd80      	pop	{r7, pc}
    95a8:	00009471 	.word	0x00009471

000095ac <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    95ac:	b580      	push	{r7, lr}
    95ae:	b084      	sub	sp, #16
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    95b4:	2103      	movs	r1, #3
    95b6:	6878      	ldr	r0, [r7, #4]
    95b8:	4b09      	ldr	r3, [pc, #36]	; (95e0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    95ba:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    95c2:	68fb      	ldr	r3, [r7, #12]
    95c4:	085b      	lsrs	r3, r3, #1
    95c6:	f003 0301 	and.w	r3, r3, #1
    95ca:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    95cc:	68fb      	ldr	r3, [r7, #12]
    95ce:	2b00      	cmp	r3, #0
    95d0:	bf14      	ite	ne
    95d2:	2301      	movne	r3, #1
    95d4:	2300      	moveq	r3, #0
    95d6:	b2db      	uxtb	r3, r3
}
    95d8:	4618      	mov	r0, r3
    95da:	3710      	adds	r7, #16
    95dc:	46bd      	mov	sp, r7
    95de:	bd80      	pop	{r7, pc}
    95e0:	00009471 	.word	0x00009471

000095e4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    95e4:	b580      	push	{r7, lr}
    95e6:	b082      	sub	sp, #8
    95e8:	af00      	add	r7, sp, #0
    95ea:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    95ec:	687b      	ldr	r3, [r7, #4]
    95ee:	681b      	ldr	r3, [r3, #0]
    95f0:	f023 0202 	bic.w	r2, r3, #2
    95f4:	687b      	ldr	r3, [r7, #4]
    95f6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    95f8:	2103      	movs	r1, #3
    95fa:	6878      	ldr	r0, [r7, #4]
    95fc:	4b02      	ldr	r3, [pc, #8]	; (9608 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    95fe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9600:	bf00      	nop
    9602:	3708      	adds	r7, #8
    9604:	46bd      	mov	sp, r7
    9606:	bd80      	pop	{r7, pc}
    9608:	00009471 	.word	0x00009471

0000960c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    960c:	b480      	push	{r7}
    960e:	b085      	sub	sp, #20
    9610:	af00      	add	r7, sp, #0
    9612:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9614:	687b      	ldr	r3, [r7, #4]
    9616:	681b      	ldr	r3, [r3, #0]
    9618:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    961a:	68fb      	ldr	r3, [r7, #12]
    961c:	089b      	lsrs	r3, r3, #2
    961e:	f003 0303 	and.w	r3, r3, #3
    9622:	60fb      	str	r3, [r7, #12]
	return tmp;
    9624:	68fb      	ldr	r3, [r7, #12]
}
    9626:	4618      	mov	r0, r3
    9628:	3714      	adds	r7, #20
    962a:	46bd      	mov	sp, r7
    962c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9630:	4770      	bx	lr
	...

00009634 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    9634:	b580      	push	{r7, lr}
    9636:	b084      	sub	sp, #16
    9638:	af00      	add	r7, sp, #0
    963a:	6078      	str	r0, [r7, #4]
    963c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    963e:	2103      	movs	r1, #3
    9640:	6878      	ldr	r0, [r7, #4]
    9642:	4b07      	ldr	r3, [pc, #28]	; (9660 <hri_tc_get_CTRLA_reg+0x2c>)
    9644:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	681b      	ldr	r3, [r3, #0]
    964a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    964c:	68fa      	ldr	r2, [r7, #12]
    964e:	683b      	ldr	r3, [r7, #0]
    9650:	4013      	ands	r3, r2
    9652:	60fb      	str	r3, [r7, #12]
	return tmp;
    9654:	68fb      	ldr	r3, [r7, #12]
}
    9656:	4618      	mov	r0, r3
    9658:	3710      	adds	r7, #16
    965a:	46bd      	mov	sp, r7
    965c:	bd80      	pop	{r7, pc}
    965e:	bf00      	nop
    9660:	00009471 	.word	0x00009471

00009664 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    9664:	b580      	push	{r7, lr}
    9666:	b082      	sub	sp, #8
    9668:	af00      	add	r7, sp, #0
    966a:	6078      	str	r0, [r7, #4]
    966c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    966e:	687b      	ldr	r3, [r7, #4]
    9670:	683a      	ldr	r2, [r7, #0]
    9672:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9674:	2103      	movs	r1, #3
    9676:	6878      	ldr	r0, [r7, #4]
    9678:	4b02      	ldr	r3, [pc, #8]	; (9684 <hri_tc_write_CTRLA_reg+0x20>)
    967a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    967c:	bf00      	nop
    967e:	3708      	adds	r7, #8
    9680:	46bd      	mov	sp, r7
    9682:	bd80      	pop	{r7, pc}
    9684:	00009471 	.word	0x00009471

00009688 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    9688:	b480      	push	{r7}
    968a:	b083      	sub	sp, #12
    968c:	af00      	add	r7, sp, #0
    968e:	6078      	str	r0, [r7, #4]
    9690:	460b      	mov	r3, r1
    9692:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9694:	687b      	ldr	r3, [r7, #4]
    9696:	887a      	ldrh	r2, [r7, #2]
    9698:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    969a:	bf00      	nop
    969c:	370c      	adds	r7, #12
    969e:	46bd      	mov	sp, r7
    96a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a4:	4770      	bx	lr

000096a6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    96a6:	b480      	push	{r7}
    96a8:	b083      	sub	sp, #12
    96aa:	af00      	add	r7, sp, #0
    96ac:	6078      	str	r0, [r7, #4]
    96ae:	460b      	mov	r3, r1
    96b0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	78fa      	ldrb	r2, [r7, #3]
    96b6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    96b8:	bf00      	nop
    96ba:	370c      	adds	r7, #12
    96bc:	46bd      	mov	sp, r7
    96be:	f85d 7b04 	ldr.w	r7, [sp], #4
    96c2:	4770      	bx	lr

000096c4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    96c4:	b480      	push	{r7}
    96c6:	b083      	sub	sp, #12
    96c8:	af00      	add	r7, sp, #0
    96ca:	6078      	str	r0, [r7, #4]
    96cc:	460b      	mov	r3, r1
    96ce:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    96d0:	687b      	ldr	r3, [r7, #4]
    96d2:	78fa      	ldrb	r2, [r7, #3]
    96d4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    96d6:	bf00      	nop
    96d8:	370c      	adds	r7, #12
    96da:	46bd      	mov	sp, r7
    96dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    96e0:	4770      	bx	lr
	...

000096e4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    96e4:	b580      	push	{r7, lr}
    96e6:	b082      	sub	sp, #8
    96e8:	af00      	add	r7, sp, #0
    96ea:	6078      	str	r0, [r7, #4]
    96ec:	460b      	mov	r3, r1
    96ee:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	78fa      	ldrb	r2, [r7, #3]
    96f4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    96f6:	2120      	movs	r1, #32
    96f8:	6878      	ldr	r0, [r7, #4]
    96fa:	4b03      	ldr	r3, [pc, #12]	; (9708 <hri_tccount8_write_PER_reg+0x24>)
    96fc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    96fe:	bf00      	nop
    9700:	3708      	adds	r7, #8
    9702:	46bd      	mov	sp, r7
    9704:	bd80      	pop	{r7, pc}
    9706:	bf00      	nop
    9708:	00009471 	.word	0x00009471

0000970c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    970c:	b580      	push	{r7, lr}
    970e:	b082      	sub	sp, #8
    9710:	af00      	add	r7, sp, #0
    9712:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9714:	2120      	movs	r1, #32
    9716:	6878      	ldr	r0, [r7, #4]
    9718:	4b04      	ldr	r3, [pc, #16]	; (972c <hri_tccount8_read_PER_reg+0x20>)
    971a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    971c:	687b      	ldr	r3, [r7, #4]
    971e:	7edb      	ldrb	r3, [r3, #27]
    9720:	b2db      	uxtb	r3, r3
}
    9722:	4618      	mov	r0, r3
    9724:	3708      	adds	r7, #8
    9726:	46bd      	mov	sp, r7
    9728:	bd80      	pop	{r7, pc}
    972a:	bf00      	nop
    972c:	00009471 	.word	0x00009471

00009730 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    9730:	b580      	push	{r7, lr}
    9732:	b082      	sub	sp, #8
    9734:	af00      	add	r7, sp, #0
    9736:	6078      	str	r0, [r7, #4]
    9738:	460b      	mov	r3, r1
    973a:	70fb      	strb	r3, [r7, #3]
    973c:	4613      	mov	r3, r2
    973e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9740:	78fb      	ldrb	r3, [r7, #3]
    9742:	687a      	ldr	r2, [r7, #4]
    9744:	4413      	add	r3, r2
    9746:	78ba      	ldrb	r2, [r7, #2]
    9748:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    974a:	21c0      	movs	r1, #192	; 0xc0
    974c:	6878      	ldr	r0, [r7, #4]
    974e:	4b03      	ldr	r3, [pc, #12]	; (975c <hri_tccount8_write_CC_reg+0x2c>)
    9750:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9752:	bf00      	nop
    9754:	3708      	adds	r7, #8
    9756:	46bd      	mov	sp, r7
    9758:	bd80      	pop	{r7, pc}
    975a:	bf00      	nop
    975c:	00009471 	.word	0x00009471

00009760 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    9760:	b580      	push	{r7, lr}
    9762:	b082      	sub	sp, #8
    9764:	af00      	add	r7, sp, #0
    9766:	6078      	str	r0, [r7, #4]
    9768:	460b      	mov	r3, r1
    976a:	70fb      	strb	r3, [r7, #3]
    976c:	4613      	mov	r3, r2
    976e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9770:	78fb      	ldrb	r3, [r7, #3]
    9772:	687a      	ldr	r2, [r7, #4]
    9774:	330c      	adds	r3, #12
    9776:	005b      	lsls	r3, r3, #1
    9778:	4413      	add	r3, r2
    977a:	883a      	ldrh	r2, [r7, #0]
    977c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    977e:	21c0      	movs	r1, #192	; 0xc0
    9780:	6878      	ldr	r0, [r7, #4]
    9782:	4b03      	ldr	r3, [pc, #12]	; (9790 <hri_tccount16_write_CC_reg+0x30>)
    9784:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9786:	bf00      	nop
    9788:	3708      	adds	r7, #8
    978a:	46bd      	mov	sp, r7
    978c:	bd80      	pop	{r7, pc}
    978e:	bf00      	nop
    9790:	00009471 	.word	0x00009471

00009794 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    9794:	b580      	push	{r7, lr}
    9796:	b082      	sub	sp, #8
    9798:	af00      	add	r7, sp, #0
    979a:	6078      	str	r0, [r7, #4]
    979c:	460b      	mov	r3, r1
    979e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    97a0:	21c0      	movs	r1, #192	; 0xc0
    97a2:	6878      	ldr	r0, [r7, #4]
    97a4:	4b06      	ldr	r3, [pc, #24]	; (97c0 <hri_tccount16_read_CC_reg+0x2c>)
    97a6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    97a8:	78fb      	ldrb	r3, [r7, #3]
    97aa:	687a      	ldr	r2, [r7, #4]
    97ac:	330c      	adds	r3, #12
    97ae:	005b      	lsls	r3, r3, #1
    97b0:	4413      	add	r3, r2
    97b2:	889b      	ldrh	r3, [r3, #4]
    97b4:	b29b      	uxth	r3, r3
}
    97b6:	4618      	mov	r0, r3
    97b8:	3708      	adds	r7, #8
    97ba:	46bd      	mov	sp, r7
    97bc:	bd80      	pop	{r7, pc}
    97be:	bf00      	nop
    97c0:	00009471 	.word	0x00009471

000097c4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    97c4:	b580      	push	{r7, lr}
    97c6:	b084      	sub	sp, #16
    97c8:	af00      	add	r7, sp, #0
    97ca:	60f8      	str	r0, [r7, #12]
    97cc:	460b      	mov	r3, r1
    97ce:	607a      	str	r2, [r7, #4]
    97d0:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    97d2:	7afb      	ldrb	r3, [r7, #11]
    97d4:	68fa      	ldr	r2, [r7, #12]
    97d6:	3306      	adds	r3, #6
    97d8:	009b      	lsls	r3, r3, #2
    97da:	4413      	add	r3, r2
    97dc:	687a      	ldr	r2, [r7, #4]
    97de:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    97e0:	21c0      	movs	r1, #192	; 0xc0
    97e2:	68f8      	ldr	r0, [r7, #12]
    97e4:	4b02      	ldr	r3, [pc, #8]	; (97f0 <hri_tccount32_write_CC_reg+0x2c>)
    97e6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97e8:	bf00      	nop
    97ea:	3710      	adds	r7, #16
    97ec:	46bd      	mov	sp, r7
    97ee:	bd80      	pop	{r7, pc}
    97f0:	00009471 	.word	0x00009471

000097f4 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    97f4:	b580      	push	{r7, lr}
    97f6:	b082      	sub	sp, #8
    97f8:	af00      	add	r7, sp, #0
    97fa:	6078      	str	r0, [r7, #4]
    97fc:	460b      	mov	r3, r1
    97fe:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9800:	21c0      	movs	r1, #192	; 0xc0
    9802:	6878      	ldr	r0, [r7, #4]
    9804:	4b05      	ldr	r3, [pc, #20]	; (981c <hri_tccount32_read_CC_reg+0x28>)
    9806:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    9808:	78fb      	ldrb	r3, [r7, #3]
    980a:	687a      	ldr	r2, [r7, #4]
    980c:	3306      	adds	r3, #6
    980e:	009b      	lsls	r3, r3, #2
    9810:	4413      	add	r3, r2
    9812:	685b      	ldr	r3, [r3, #4]
}
    9814:	4618      	mov	r0, r3
    9816:	3708      	adds	r7, #8
    9818:	46bd      	mov	sp, r7
    981a:	bd80      	pop	{r7, pc}
    981c:	00009471 	.word	0x00009471

00009820 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    9820:	b580      	push	{r7, lr}
    9822:	b084      	sub	sp, #16
    9824:	af00      	add	r7, sp, #0
    9826:	6078      	str	r0, [r7, #4]
    9828:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    982a:	6838      	ldr	r0, [r7, #0]
    982c:	4b93      	ldr	r3, [pc, #588]	; (9a7c <_tc_timer_init+0x25c>)
    982e:	4798      	blx	r3
    9830:	4603      	mov	r3, r0
    9832:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	683a      	ldr	r2, [r7, #0]
    9838:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    983a:	22a4      	movs	r2, #164	; 0xa4
    983c:	4990      	ldr	r1, [pc, #576]	; (9a80 <_tc_timer_init+0x260>)
    983e:	2001      	movs	r0, #1
    9840:	4b90      	ldr	r3, [pc, #576]	; (9a84 <_tc_timer_init+0x264>)
    9842:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9844:	2101      	movs	r1, #1
    9846:	6838      	ldr	r0, [r7, #0]
    9848:	4b8f      	ldr	r3, [pc, #572]	; (9a88 <_tc_timer_init+0x268>)
    984a:	4798      	blx	r3
    984c:	4603      	mov	r3, r0
    984e:	f083 0301 	eor.w	r3, r3, #1
    9852:	b2db      	uxtb	r3, r3
    9854:	2b00      	cmp	r3, #0
    9856:	d011      	beq.n	987c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9858:	2102      	movs	r1, #2
    985a:	6838      	ldr	r0, [r7, #0]
    985c:	4b8b      	ldr	r3, [pc, #556]	; (9a8c <_tc_timer_init+0x26c>)
    985e:	4798      	blx	r3
    9860:	4603      	mov	r3, r0
    9862:	2b00      	cmp	r3, #0
    9864:	d006      	beq.n	9874 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9866:	6838      	ldr	r0, [r7, #0]
    9868:	4b89      	ldr	r3, [pc, #548]	; (9a90 <_tc_timer_init+0x270>)
    986a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    986c:	2102      	movs	r1, #2
    986e:	6838      	ldr	r0, [r7, #0]
    9870:	4b88      	ldr	r3, [pc, #544]	; (9a94 <_tc_timer_init+0x274>)
    9872:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9874:	2101      	movs	r1, #1
    9876:	6838      	ldr	r0, [r7, #0]
    9878:	4b87      	ldr	r3, [pc, #540]	; (9a98 <_tc_timer_init+0x278>)
    987a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    987c:	2101      	movs	r1, #1
    987e:	6838      	ldr	r0, [r7, #0]
    9880:	4b84      	ldr	r3, [pc, #528]	; (9a94 <_tc_timer_init+0x274>)
    9882:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9884:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9888:	4984      	ldr	r1, [pc, #528]	; (9a9c <_tc_timer_init+0x27c>)
    988a:	4613      	mov	r3, r2
    988c:	009b      	lsls	r3, r3, #2
    988e:	4413      	add	r3, r2
    9890:	009b      	lsls	r3, r3, #2
    9892:	440b      	add	r3, r1
    9894:	3304      	adds	r3, #4
    9896:	681b      	ldr	r3, [r3, #0]
    9898:	4619      	mov	r1, r3
    989a:	6838      	ldr	r0, [r7, #0]
    989c:	4b7e      	ldr	r3, [pc, #504]	; (9a98 <_tc_timer_init+0x278>)
    989e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    98a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98a4:	497d      	ldr	r1, [pc, #500]	; (9a9c <_tc_timer_init+0x27c>)
    98a6:	4613      	mov	r3, r2
    98a8:	009b      	lsls	r3, r3, #2
    98aa:	4413      	add	r3, r2
    98ac:	009b      	lsls	r3, r3, #2
    98ae:	440b      	add	r3, r1
    98b0:	330a      	adds	r3, #10
    98b2:	781b      	ldrb	r3, [r3, #0]
    98b4:	4619      	mov	r1, r3
    98b6:	6838      	ldr	r0, [r7, #0]
    98b8:	4b79      	ldr	r3, [pc, #484]	; (9aa0 <_tc_timer_init+0x280>)
    98ba:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    98bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98c0:	4976      	ldr	r1, [pc, #472]	; (9a9c <_tc_timer_init+0x27c>)
    98c2:	4613      	mov	r3, r2
    98c4:	009b      	lsls	r3, r3, #2
    98c6:	4413      	add	r3, r2
    98c8:	009b      	lsls	r3, r3, #2
    98ca:	440b      	add	r3, r1
    98cc:	3308      	adds	r3, #8
    98ce:	881b      	ldrh	r3, [r3, #0]
    98d0:	4619      	mov	r1, r3
    98d2:	6838      	ldr	r0, [r7, #0]
    98d4:	4b73      	ldr	r3, [pc, #460]	; (9aa4 <_tc_timer_init+0x284>)
    98d6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    98d8:	2101      	movs	r1, #1
    98da:	6838      	ldr	r0, [r7, #0]
    98dc:	4b72      	ldr	r3, [pc, #456]	; (9aa8 <_tc_timer_init+0x288>)
    98de:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    98e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98e4:	496d      	ldr	r1, [pc, #436]	; (9a9c <_tc_timer_init+0x27c>)
    98e6:	4613      	mov	r3, r2
    98e8:	009b      	lsls	r3, r3, #2
    98ea:	4413      	add	r3, r2
    98ec:	009b      	lsls	r3, r3, #2
    98ee:	440b      	add	r3, r1
    98f0:	3304      	adds	r3, #4
    98f2:	681b      	ldr	r3, [r3, #0]
    98f4:	f003 030c 	and.w	r3, r3, #12
    98f8:	2b08      	cmp	r3, #8
    98fa:	d11e      	bne.n	993a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    98fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9900:	4966      	ldr	r1, [pc, #408]	; (9a9c <_tc_timer_init+0x27c>)
    9902:	4613      	mov	r3, r2
    9904:	009b      	lsls	r3, r3, #2
    9906:	4413      	add	r3, r2
    9908:	009b      	lsls	r3, r3, #2
    990a:	440b      	add	r3, r1
    990c:	330c      	adds	r3, #12
    990e:	681b      	ldr	r3, [r3, #0]
    9910:	461a      	mov	r2, r3
    9912:	2100      	movs	r1, #0
    9914:	6838      	ldr	r0, [r7, #0]
    9916:	4b65      	ldr	r3, [pc, #404]	; (9aac <_tc_timer_init+0x28c>)
    9918:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    991a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    991e:	495f      	ldr	r1, [pc, #380]	; (9a9c <_tc_timer_init+0x27c>)
    9920:	4613      	mov	r3, r2
    9922:	009b      	lsls	r3, r3, #2
    9924:	4413      	add	r3, r2
    9926:	009b      	lsls	r3, r3, #2
    9928:	440b      	add	r3, r1
    992a:	3310      	adds	r3, #16
    992c:	681b      	ldr	r3, [r3, #0]
    992e:	461a      	mov	r2, r3
    9930:	2101      	movs	r1, #1
    9932:	6838      	ldr	r0, [r7, #0]
    9934:	4b5d      	ldr	r3, [pc, #372]	; (9aac <_tc_timer_init+0x28c>)
    9936:	4798      	blx	r3
    9938:	e06a      	b.n	9a10 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    993a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    993e:	4957      	ldr	r1, [pc, #348]	; (9a9c <_tc_timer_init+0x27c>)
    9940:	4613      	mov	r3, r2
    9942:	009b      	lsls	r3, r3, #2
    9944:	4413      	add	r3, r2
    9946:	009b      	lsls	r3, r3, #2
    9948:	440b      	add	r3, r1
    994a:	3304      	adds	r3, #4
    994c:	681b      	ldr	r3, [r3, #0]
    994e:	f003 030c 	and.w	r3, r3, #12
    9952:	2b00      	cmp	r3, #0
    9954:	d120      	bne.n	9998 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9956:	f997 200f 	ldrsb.w	r2, [r7, #15]
    995a:	4950      	ldr	r1, [pc, #320]	; (9a9c <_tc_timer_init+0x27c>)
    995c:	4613      	mov	r3, r2
    995e:	009b      	lsls	r3, r3, #2
    9960:	4413      	add	r3, r2
    9962:	009b      	lsls	r3, r3, #2
    9964:	440b      	add	r3, r1
    9966:	330c      	adds	r3, #12
    9968:	681b      	ldr	r3, [r3, #0]
    996a:	b29b      	uxth	r3, r3
    996c:	461a      	mov	r2, r3
    996e:	2100      	movs	r1, #0
    9970:	6838      	ldr	r0, [r7, #0]
    9972:	4b4f      	ldr	r3, [pc, #316]	; (9ab0 <_tc_timer_init+0x290>)
    9974:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9976:	f997 200f 	ldrsb.w	r2, [r7, #15]
    997a:	4948      	ldr	r1, [pc, #288]	; (9a9c <_tc_timer_init+0x27c>)
    997c:	4613      	mov	r3, r2
    997e:	009b      	lsls	r3, r3, #2
    9980:	4413      	add	r3, r2
    9982:	009b      	lsls	r3, r3, #2
    9984:	440b      	add	r3, r1
    9986:	3310      	adds	r3, #16
    9988:	681b      	ldr	r3, [r3, #0]
    998a:	b29b      	uxth	r3, r3
    998c:	461a      	mov	r2, r3
    998e:	2101      	movs	r1, #1
    9990:	6838      	ldr	r0, [r7, #0]
    9992:	4b47      	ldr	r3, [pc, #284]	; (9ab0 <_tc_timer_init+0x290>)
    9994:	4798      	blx	r3
    9996:	e03b      	b.n	9a10 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9998:	f997 200f 	ldrsb.w	r2, [r7, #15]
    999c:	493f      	ldr	r1, [pc, #252]	; (9a9c <_tc_timer_init+0x27c>)
    999e:	4613      	mov	r3, r2
    99a0:	009b      	lsls	r3, r3, #2
    99a2:	4413      	add	r3, r2
    99a4:	009b      	lsls	r3, r3, #2
    99a6:	440b      	add	r3, r1
    99a8:	3304      	adds	r3, #4
    99aa:	681b      	ldr	r3, [r3, #0]
    99ac:	f003 030c 	and.w	r3, r3, #12
    99b0:	2b04      	cmp	r3, #4
    99b2:	d12d      	bne.n	9a10 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    99b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99b8:	4938      	ldr	r1, [pc, #224]	; (9a9c <_tc_timer_init+0x27c>)
    99ba:	4613      	mov	r3, r2
    99bc:	009b      	lsls	r3, r3, #2
    99be:	4413      	add	r3, r2
    99c0:	009b      	lsls	r3, r3, #2
    99c2:	440b      	add	r3, r1
    99c4:	330c      	adds	r3, #12
    99c6:	681b      	ldr	r3, [r3, #0]
    99c8:	b2db      	uxtb	r3, r3
    99ca:	461a      	mov	r2, r3
    99cc:	2100      	movs	r1, #0
    99ce:	6838      	ldr	r0, [r7, #0]
    99d0:	4b38      	ldr	r3, [pc, #224]	; (9ab4 <_tc_timer_init+0x294>)
    99d2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    99d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99d8:	4930      	ldr	r1, [pc, #192]	; (9a9c <_tc_timer_init+0x27c>)
    99da:	4613      	mov	r3, r2
    99dc:	009b      	lsls	r3, r3, #2
    99de:	4413      	add	r3, r2
    99e0:	009b      	lsls	r3, r3, #2
    99e2:	440b      	add	r3, r1
    99e4:	3310      	adds	r3, #16
    99e6:	681b      	ldr	r3, [r3, #0]
    99e8:	b2db      	uxtb	r3, r3
    99ea:	461a      	mov	r2, r3
    99ec:	2101      	movs	r1, #1
    99ee:	6838      	ldr	r0, [r7, #0]
    99f0:	4b30      	ldr	r3, [pc, #192]	; (9ab4 <_tc_timer_init+0x294>)
    99f2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    99f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99f8:	4928      	ldr	r1, [pc, #160]	; (9a9c <_tc_timer_init+0x27c>)
    99fa:	4613      	mov	r3, r2
    99fc:	009b      	lsls	r3, r3, #2
    99fe:	4413      	add	r3, r2
    9a00:	009b      	lsls	r3, r3, #2
    9a02:	440b      	add	r3, r1
    9a04:	330b      	adds	r3, #11
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	4619      	mov	r1, r3
    9a0a:	6838      	ldr	r0, [r7, #0]
    9a0c:	4b2a      	ldr	r3, [pc, #168]	; (9ab8 <_tc_timer_init+0x298>)
    9a0e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9a10:	6838      	ldr	r0, [r7, #0]
    9a12:	4b2a      	ldr	r3, [pc, #168]	; (9abc <_tc_timer_init+0x29c>)
    9a14:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    9a16:	6879      	ldr	r1, [r7, #4]
    9a18:	6838      	ldr	r0, [r7, #0]
    9a1a:	4b29      	ldr	r3, [pc, #164]	; (9ac0 <_tc_timer_init+0x2a0>)
    9a1c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9a1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a22:	491e      	ldr	r1, [pc, #120]	; (9a9c <_tc_timer_init+0x27c>)
    9a24:	4613      	mov	r3, r2
    9a26:	009b      	lsls	r3, r3, #2
    9a28:	4413      	add	r3, r2
    9a2a:	009b      	lsls	r3, r3, #2
    9a2c:	440b      	add	r3, r1
    9a2e:	3302      	adds	r3, #2
    9a30:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a34:	4618      	mov	r0, r3
    9a36:	4b23      	ldr	r3, [pc, #140]	; (9ac4 <_tc_timer_init+0x2a4>)
    9a38:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9a3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a3e:	4917      	ldr	r1, [pc, #92]	; (9a9c <_tc_timer_init+0x27c>)
    9a40:	4613      	mov	r3, r2
    9a42:	009b      	lsls	r3, r3, #2
    9a44:	4413      	add	r3, r2
    9a46:	009b      	lsls	r3, r3, #2
    9a48:	440b      	add	r3, r1
    9a4a:	3302      	adds	r3, #2
    9a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a50:	4618      	mov	r0, r3
    9a52:	4b1d      	ldr	r3, [pc, #116]	; (9ac8 <_tc_timer_init+0x2a8>)
    9a54:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9a56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a5a:	4910      	ldr	r1, [pc, #64]	; (9a9c <_tc_timer_init+0x27c>)
    9a5c:	4613      	mov	r3, r2
    9a5e:	009b      	lsls	r3, r3, #2
    9a60:	4413      	add	r3, r2
    9a62:	009b      	lsls	r3, r3, #2
    9a64:	440b      	add	r3, r1
    9a66:	3302      	adds	r3, #2
    9a68:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a6c:	4618      	mov	r0, r3
    9a6e:	4b17      	ldr	r3, [pc, #92]	; (9acc <_tc_timer_init+0x2ac>)
    9a70:	4798      	blx	r3

	return ERR_NONE;
    9a72:	2300      	movs	r3, #0
}
    9a74:	4618      	mov	r0, r3
    9a76:	3710      	adds	r7, #16
    9a78:	46bd      	mov	sp, r7
    9a7a:	bd80      	pop	{r7, pc}
    9a7c:	0000a071 	.word	0x0000a071
    9a80:	0001adfc 	.word	0x0001adfc
    9a84:	00004bbd 	.word	0x00004bbd
    9a88:	00009495 	.word	0x00009495
    9a8c:	00009635 	.word	0x00009635
    9a90:	000095e5 	.word	0x000095e5
    9a94:	00009471 	.word	0x00009471
    9a98:	00009665 	.word	0x00009665
    9a9c:	20000110 	.word	0x20000110
    9aa0:	000096c5 	.word	0x000096c5
    9aa4:	00009689 	.word	0x00009689
    9aa8:	000096a7 	.word	0x000096a7
    9aac:	000097c5 	.word	0x000097c5
    9ab0:	00009761 	.word	0x00009761
    9ab4:	00009731 	.word	0x00009731
    9ab8:	000096e5 	.word	0x000096e5
    9abc:	00009519 	.word	0x00009519
    9ac0:	0000a0d9 	.word	0x0000a0d9
    9ac4:	000093f1 	.word	0x000093f1
    9ac8:	00009435 	.word	0x00009435
    9acc:	000093b5 	.word	0x000093b5

00009ad0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9ad0:	b580      	push	{r7, lr}
    9ad2:	b084      	sub	sp, #16
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	6078      	str	r0, [r7, #4]
    9ad8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9ada:	6838      	ldr	r0, [r7, #0]
    9adc:	4b73      	ldr	r3, [pc, #460]	; (9cac <_pwm_init+0x1dc>)
    9ade:	4798      	blx	r3
    9ae0:	4603      	mov	r3, r0
    9ae2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9ae4:	687b      	ldr	r3, [r7, #4]
    9ae6:	683a      	ldr	r2, [r7, #0]
    9ae8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9aea:	2101      	movs	r1, #1
    9aec:	6838      	ldr	r0, [r7, #0]
    9aee:	4b70      	ldr	r3, [pc, #448]	; (9cb0 <_pwm_init+0x1e0>)
    9af0:	4798      	blx	r3
    9af2:	4603      	mov	r3, r0
    9af4:	f083 0301 	eor.w	r3, r3, #1
    9af8:	b2db      	uxtb	r3, r3
    9afa:	2b00      	cmp	r3, #0
    9afc:	d011      	beq.n	9b22 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9afe:	2102      	movs	r1, #2
    9b00:	6838      	ldr	r0, [r7, #0]
    9b02:	4b6c      	ldr	r3, [pc, #432]	; (9cb4 <_pwm_init+0x1e4>)
    9b04:	4798      	blx	r3
    9b06:	4603      	mov	r3, r0
    9b08:	2b00      	cmp	r3, #0
    9b0a:	d006      	beq.n	9b1a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9b0c:	6838      	ldr	r0, [r7, #0]
    9b0e:	4b6a      	ldr	r3, [pc, #424]	; (9cb8 <_pwm_init+0x1e8>)
    9b10:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9b12:	2102      	movs	r1, #2
    9b14:	6838      	ldr	r0, [r7, #0]
    9b16:	4b69      	ldr	r3, [pc, #420]	; (9cbc <_pwm_init+0x1ec>)
    9b18:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9b1a:	2101      	movs	r1, #1
    9b1c:	6838      	ldr	r0, [r7, #0]
    9b1e:	4b68      	ldr	r3, [pc, #416]	; (9cc0 <_pwm_init+0x1f0>)
    9b20:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9b22:	2101      	movs	r1, #1
    9b24:	6838      	ldr	r0, [r7, #0]
    9b26:	4b65      	ldr	r3, [pc, #404]	; (9cbc <_pwm_init+0x1ec>)
    9b28:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9b2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b2e:	4965      	ldr	r1, [pc, #404]	; (9cc4 <_pwm_init+0x1f4>)
    9b30:	4613      	mov	r3, r2
    9b32:	009b      	lsls	r3, r3, #2
    9b34:	4413      	add	r3, r2
    9b36:	009b      	lsls	r3, r3, #2
    9b38:	440b      	add	r3, r1
    9b3a:	3304      	adds	r3, #4
    9b3c:	681b      	ldr	r3, [r3, #0]
    9b3e:	4619      	mov	r1, r3
    9b40:	6838      	ldr	r0, [r7, #0]
    9b42:	4b5f      	ldr	r3, [pc, #380]	; (9cc0 <_pwm_init+0x1f0>)
    9b44:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9b46:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b4a:	495e      	ldr	r1, [pc, #376]	; (9cc4 <_pwm_init+0x1f4>)
    9b4c:	4613      	mov	r3, r2
    9b4e:	009b      	lsls	r3, r3, #2
    9b50:	4413      	add	r3, r2
    9b52:	009b      	lsls	r3, r3, #2
    9b54:	440b      	add	r3, r1
    9b56:	330a      	adds	r3, #10
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	4619      	mov	r1, r3
    9b5c:	6838      	ldr	r0, [r7, #0]
    9b5e:	4b5a      	ldr	r3, [pc, #360]	; (9cc8 <_pwm_init+0x1f8>)
    9b60:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9b62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b66:	4957      	ldr	r1, [pc, #348]	; (9cc4 <_pwm_init+0x1f4>)
    9b68:	4613      	mov	r3, r2
    9b6a:	009b      	lsls	r3, r3, #2
    9b6c:	4413      	add	r3, r2
    9b6e:	009b      	lsls	r3, r3, #2
    9b70:	440b      	add	r3, r1
    9b72:	3308      	adds	r3, #8
    9b74:	881b      	ldrh	r3, [r3, #0]
    9b76:	4619      	mov	r1, r3
    9b78:	6838      	ldr	r0, [r7, #0]
    9b7a:	4b54      	ldr	r3, [pc, #336]	; (9ccc <_pwm_init+0x1fc>)
    9b7c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    9b7e:	2103      	movs	r1, #3
    9b80:	6838      	ldr	r0, [r7, #0]
    9b82:	4b53      	ldr	r3, [pc, #332]	; (9cd0 <_pwm_init+0x200>)
    9b84:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9b86:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b8a:	494e      	ldr	r1, [pc, #312]	; (9cc4 <_pwm_init+0x1f4>)
    9b8c:	4613      	mov	r3, r2
    9b8e:	009b      	lsls	r3, r3, #2
    9b90:	4413      	add	r3, r2
    9b92:	009b      	lsls	r3, r3, #2
    9b94:	440b      	add	r3, r1
    9b96:	3304      	adds	r3, #4
    9b98:	681b      	ldr	r3, [r3, #0]
    9b9a:	f003 030c 	and.w	r3, r3, #12
    9b9e:	2b08      	cmp	r3, #8
    9ba0:	d11e      	bne.n	9be0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9ba2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ba6:	4947      	ldr	r1, [pc, #284]	; (9cc4 <_pwm_init+0x1f4>)
    9ba8:	4613      	mov	r3, r2
    9baa:	009b      	lsls	r3, r3, #2
    9bac:	4413      	add	r3, r2
    9bae:	009b      	lsls	r3, r3, #2
    9bb0:	440b      	add	r3, r1
    9bb2:	330c      	adds	r3, #12
    9bb4:	681b      	ldr	r3, [r3, #0]
    9bb6:	461a      	mov	r2, r3
    9bb8:	2100      	movs	r1, #0
    9bba:	6838      	ldr	r0, [r7, #0]
    9bbc:	4b45      	ldr	r3, [pc, #276]	; (9cd4 <_pwm_init+0x204>)
    9bbe:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9bc0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bc4:	493f      	ldr	r1, [pc, #252]	; (9cc4 <_pwm_init+0x1f4>)
    9bc6:	4613      	mov	r3, r2
    9bc8:	009b      	lsls	r3, r3, #2
    9bca:	4413      	add	r3, r2
    9bcc:	009b      	lsls	r3, r3, #2
    9bce:	440b      	add	r3, r1
    9bd0:	3310      	adds	r3, #16
    9bd2:	681b      	ldr	r3, [r3, #0]
    9bd4:	461a      	mov	r2, r3
    9bd6:	2101      	movs	r1, #1
    9bd8:	6838      	ldr	r0, [r7, #0]
    9bda:	4b3e      	ldr	r3, [pc, #248]	; (9cd4 <_pwm_init+0x204>)
    9bdc:	4798      	blx	r3
    9bde:	e031      	b.n	9c44 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9be0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9be4:	4937      	ldr	r1, [pc, #220]	; (9cc4 <_pwm_init+0x1f4>)
    9be6:	4613      	mov	r3, r2
    9be8:	009b      	lsls	r3, r3, #2
    9bea:	4413      	add	r3, r2
    9bec:	009b      	lsls	r3, r3, #2
    9bee:	440b      	add	r3, r1
    9bf0:	3304      	adds	r3, #4
    9bf2:	681b      	ldr	r3, [r3, #0]
    9bf4:	f003 030c 	and.w	r3, r3, #12
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d120      	bne.n	9c3e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9bfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c00:	4930      	ldr	r1, [pc, #192]	; (9cc4 <_pwm_init+0x1f4>)
    9c02:	4613      	mov	r3, r2
    9c04:	009b      	lsls	r3, r3, #2
    9c06:	4413      	add	r3, r2
    9c08:	009b      	lsls	r3, r3, #2
    9c0a:	440b      	add	r3, r1
    9c0c:	330c      	adds	r3, #12
    9c0e:	681b      	ldr	r3, [r3, #0]
    9c10:	b29b      	uxth	r3, r3
    9c12:	461a      	mov	r2, r3
    9c14:	2100      	movs	r1, #0
    9c16:	6838      	ldr	r0, [r7, #0]
    9c18:	4b2f      	ldr	r3, [pc, #188]	; (9cd8 <_pwm_init+0x208>)
    9c1a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9c1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c20:	4928      	ldr	r1, [pc, #160]	; (9cc4 <_pwm_init+0x1f4>)
    9c22:	4613      	mov	r3, r2
    9c24:	009b      	lsls	r3, r3, #2
    9c26:	4413      	add	r3, r2
    9c28:	009b      	lsls	r3, r3, #2
    9c2a:	440b      	add	r3, r1
    9c2c:	3310      	adds	r3, #16
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	b29b      	uxth	r3, r3
    9c32:	461a      	mov	r2, r3
    9c34:	2101      	movs	r1, #1
    9c36:	6838      	ldr	r0, [r7, #0]
    9c38:	4b27      	ldr	r3, [pc, #156]	; (9cd8 <_pwm_init+0x208>)
    9c3a:	4798      	blx	r3
    9c3c:	e002      	b.n	9c44 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9c3e:	f04f 33ff 	mov.w	r3, #4294967295
    9c42:	e02e      	b.n	9ca2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9c44:	6879      	ldr	r1, [r7, #4]
    9c46:	6838      	ldr	r0, [r7, #0]
    9c48:	4b24      	ldr	r3, [pc, #144]	; (9cdc <_pwm_init+0x20c>)
    9c4a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9c4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c50:	491c      	ldr	r1, [pc, #112]	; (9cc4 <_pwm_init+0x1f4>)
    9c52:	4613      	mov	r3, r2
    9c54:	009b      	lsls	r3, r3, #2
    9c56:	4413      	add	r3, r2
    9c58:	009b      	lsls	r3, r3, #2
    9c5a:	440b      	add	r3, r1
    9c5c:	3302      	adds	r3, #2
    9c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c62:	4618      	mov	r0, r3
    9c64:	4b1e      	ldr	r3, [pc, #120]	; (9ce0 <_pwm_init+0x210>)
    9c66:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9c68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c6c:	4915      	ldr	r1, [pc, #84]	; (9cc4 <_pwm_init+0x1f4>)
    9c6e:	4613      	mov	r3, r2
    9c70:	009b      	lsls	r3, r3, #2
    9c72:	4413      	add	r3, r2
    9c74:	009b      	lsls	r3, r3, #2
    9c76:	440b      	add	r3, r1
    9c78:	3302      	adds	r3, #2
    9c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c7e:	4618      	mov	r0, r3
    9c80:	4b18      	ldr	r3, [pc, #96]	; (9ce4 <_pwm_init+0x214>)
    9c82:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9c84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c88:	490e      	ldr	r1, [pc, #56]	; (9cc4 <_pwm_init+0x1f4>)
    9c8a:	4613      	mov	r3, r2
    9c8c:	009b      	lsls	r3, r3, #2
    9c8e:	4413      	add	r3, r2
    9c90:	009b      	lsls	r3, r3, #2
    9c92:	440b      	add	r3, r1
    9c94:	3302      	adds	r3, #2
    9c96:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c9a:	4618      	mov	r0, r3
    9c9c:	4b12      	ldr	r3, [pc, #72]	; (9ce8 <_pwm_init+0x218>)
    9c9e:	4798      	blx	r3

	return 0;
    9ca0:	2300      	movs	r3, #0
}
    9ca2:	4618      	mov	r0, r3
    9ca4:	3710      	adds	r7, #16
    9ca6:	46bd      	mov	sp, r7
    9ca8:	bd80      	pop	{r7, pc}
    9caa:	bf00      	nop
    9cac:	0000a071 	.word	0x0000a071
    9cb0:	00009495 	.word	0x00009495
    9cb4:	00009635 	.word	0x00009635
    9cb8:	000095e5 	.word	0x000095e5
    9cbc:	00009471 	.word	0x00009471
    9cc0:	00009665 	.word	0x00009665
    9cc4:	20000110 	.word	0x20000110
    9cc8:	000096c5 	.word	0x000096c5
    9ccc:	00009689 	.word	0x00009689
    9cd0:	000096a7 	.word	0x000096a7
    9cd4:	000097c5 	.word	0x000097c5
    9cd8:	00009761 	.word	0x00009761
    9cdc:	0000a0d9 	.word	0x0000a0d9
    9ce0:	000093f1 	.word	0x000093f1
    9ce4:	00009435 	.word	0x00009435
    9ce8:	000093b5 	.word	0x000093b5

00009cec <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    9cec:	b580      	push	{r7, lr}
    9cee:	b084      	sub	sp, #16
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9cf4:	687b      	ldr	r3, [r7, #4]
    9cf6:	68db      	ldr	r3, [r3, #12]
    9cf8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9cfa:	68f8      	ldr	r0, [r7, #12]
    9cfc:	4b10      	ldr	r3, [pc, #64]	; (9d40 <_tc_timer_deinit+0x54>)
    9cfe:	4798      	blx	r3
    9d00:	4603      	mov	r3, r0
    9d02:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9d04:	22f9      	movs	r2, #249	; 0xf9
    9d06:	490f      	ldr	r1, [pc, #60]	; (9d44 <_tc_timer_deinit+0x58>)
    9d08:	2001      	movs	r0, #1
    9d0a:	4b0f      	ldr	r3, [pc, #60]	; (9d48 <_tc_timer_deinit+0x5c>)
    9d0c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    9d0e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9d12:	490e      	ldr	r1, [pc, #56]	; (9d4c <_tc_timer_deinit+0x60>)
    9d14:	4613      	mov	r3, r2
    9d16:	009b      	lsls	r3, r3, #2
    9d18:	4413      	add	r3, r2
    9d1a:	009b      	lsls	r3, r3, #2
    9d1c:	440b      	add	r3, r1
    9d1e:	3302      	adds	r3, #2
    9d20:	f9b3 3000 	ldrsh.w	r3, [r3]
    9d24:	4618      	mov	r0, r3
    9d26:	4b0a      	ldr	r3, [pc, #40]	; (9d50 <_tc_timer_deinit+0x64>)
    9d28:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9d2a:	68f8      	ldr	r0, [r7, #12]
    9d2c:	4b09      	ldr	r3, [pc, #36]	; (9d54 <_tc_timer_deinit+0x68>)
    9d2e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    9d30:	68f8      	ldr	r0, [r7, #12]
    9d32:	4b09      	ldr	r3, [pc, #36]	; (9d58 <_tc_timer_deinit+0x6c>)
    9d34:	4798      	blx	r3
}
    9d36:	bf00      	nop
    9d38:	3710      	adds	r7, #16
    9d3a:	46bd      	mov	sp, r7
    9d3c:	bd80      	pop	{r7, pc}
    9d3e:	bf00      	nop
    9d40:	0000a071 	.word	0x0000a071
    9d44:	0001adfc 	.word	0x0001adfc
    9d48:	00004bbd 	.word	0x00004bbd
    9d4c:	20000110 	.word	0x20000110
    9d50:	000093f1 	.word	0x000093f1
    9d54:	000095e5 	.word	0x000095e5
    9d58:	0000955d 	.word	0x0000955d

00009d5c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    9d5c:	b580      	push	{r7, lr}
    9d5e:	b082      	sub	sp, #8
    9d60:	af00      	add	r7, sp, #0
    9d62:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	68db      	ldr	r3, [r3, #12]
    9d68:	4618      	mov	r0, r3
    9d6a:	4b03      	ldr	r3, [pc, #12]	; (9d78 <_tc_timer_start+0x1c>)
    9d6c:	4798      	blx	r3
}
    9d6e:	bf00      	nop
    9d70:	3708      	adds	r7, #8
    9d72:	46bd      	mov	sp, r7
    9d74:	bd80      	pop	{r7, pc}
    9d76:	bf00      	nop
    9d78:	00009585 	.word	0x00009585

00009d7c <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    9d7c:	b580      	push	{r7, lr}
    9d7e:	b082      	sub	sp, #8
    9d80:	af00      	add	r7, sp, #0
    9d82:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9d84:	687b      	ldr	r3, [r7, #4]
    9d86:	68db      	ldr	r3, [r3, #12]
    9d88:	4618      	mov	r0, r3
    9d8a:	4b03      	ldr	r3, [pc, #12]	; (9d98 <_tc_timer_stop+0x1c>)
    9d8c:	4798      	blx	r3
}
    9d8e:	bf00      	nop
    9d90:	3708      	adds	r7, #8
    9d92:	46bd      	mov	sp, r7
    9d94:	bd80      	pop	{r7, pc}
    9d96:	bf00      	nop
    9d98:	000095e5 	.word	0x000095e5

00009d9c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9d9c:	b580      	push	{r7, lr}
    9d9e:	b084      	sub	sp, #16
    9da0:	af00      	add	r7, sp, #0
    9da2:	6078      	str	r0, [r7, #4]
    9da4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	68db      	ldr	r3, [r3, #12]
    9daa:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9dac:	68f8      	ldr	r0, [r7, #12]
    9dae:	4b14      	ldr	r3, [pc, #80]	; (9e00 <_tc_timer_set_period+0x64>)
    9db0:	4798      	blx	r3
    9db2:	4603      	mov	r3, r0
    9db4:	2b02      	cmp	r3, #2
    9db6:	d105      	bne.n	9dc4 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    9db8:	683a      	ldr	r2, [r7, #0]
    9dba:	2100      	movs	r1, #0
    9dbc:	68f8      	ldr	r0, [r7, #12]
    9dbe:	4b11      	ldr	r3, [pc, #68]	; (9e04 <_tc_timer_set_period+0x68>)
    9dc0:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    9dc2:	e019      	b.n	9df8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9dc4:	68f8      	ldr	r0, [r7, #12]
    9dc6:	4b0e      	ldr	r3, [pc, #56]	; (9e00 <_tc_timer_set_period+0x64>)
    9dc8:	4798      	blx	r3
    9dca:	4603      	mov	r3, r0
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d107      	bne.n	9de0 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    9dd0:	683b      	ldr	r3, [r7, #0]
    9dd2:	b29b      	uxth	r3, r3
    9dd4:	461a      	mov	r2, r3
    9dd6:	2100      	movs	r1, #0
    9dd8:	68f8      	ldr	r0, [r7, #12]
    9dda:	4b0b      	ldr	r3, [pc, #44]	; (9e08 <_tc_timer_set_period+0x6c>)
    9ddc:	4798      	blx	r3
}
    9dde:	e00b      	b.n	9df8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9de0:	68f8      	ldr	r0, [r7, #12]
    9de2:	4b07      	ldr	r3, [pc, #28]	; (9e00 <_tc_timer_set_period+0x64>)
    9de4:	4798      	blx	r3
    9de6:	4603      	mov	r3, r0
    9de8:	2b01      	cmp	r3, #1
    9dea:	d105      	bne.n	9df8 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    9dec:	683b      	ldr	r3, [r7, #0]
    9dee:	b2db      	uxtb	r3, r3
    9df0:	4619      	mov	r1, r3
    9df2:	68f8      	ldr	r0, [r7, #12]
    9df4:	4b05      	ldr	r3, [pc, #20]	; (9e0c <_tc_timer_set_period+0x70>)
    9df6:	4798      	blx	r3
}
    9df8:	bf00      	nop
    9dfa:	3710      	adds	r7, #16
    9dfc:	46bd      	mov	sp, r7
    9dfe:	bd80      	pop	{r7, pc}
    9e00:	0000960d 	.word	0x0000960d
    9e04:	000097c5 	.word	0x000097c5
    9e08:	00009761 	.word	0x00009761
    9e0c:	000096e5 	.word	0x000096e5

00009e10 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    9e10:	b580      	push	{r7, lr}
    9e12:	b084      	sub	sp, #16
    9e14:	af00      	add	r7, sp, #0
    9e16:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e18:	687b      	ldr	r3, [r7, #4]
    9e1a:	68db      	ldr	r3, [r3, #12]
    9e1c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9e1e:	68f8      	ldr	r0, [r7, #12]
    9e20:	4b13      	ldr	r3, [pc, #76]	; (9e70 <_tc_timer_get_period+0x60>)
    9e22:	4798      	blx	r3
    9e24:	4603      	mov	r3, r0
    9e26:	2b02      	cmp	r3, #2
    9e28:	d105      	bne.n	9e36 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    9e2a:	2100      	movs	r1, #0
    9e2c:	68f8      	ldr	r0, [r7, #12]
    9e2e:	4b11      	ldr	r3, [pc, #68]	; (9e74 <_tc_timer_get_period+0x64>)
    9e30:	4798      	blx	r3
    9e32:	4603      	mov	r3, r0
    9e34:	e017      	b.n	9e66 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9e36:	68f8      	ldr	r0, [r7, #12]
    9e38:	4b0d      	ldr	r3, [pc, #52]	; (9e70 <_tc_timer_get_period+0x60>)
    9e3a:	4798      	blx	r3
    9e3c:	4603      	mov	r3, r0
    9e3e:	2b00      	cmp	r3, #0
    9e40:	d105      	bne.n	9e4e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    9e42:	2100      	movs	r1, #0
    9e44:	68f8      	ldr	r0, [r7, #12]
    9e46:	4b0c      	ldr	r3, [pc, #48]	; (9e78 <_tc_timer_get_period+0x68>)
    9e48:	4798      	blx	r3
    9e4a:	4603      	mov	r3, r0
    9e4c:	e00b      	b.n	9e66 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9e4e:	68f8      	ldr	r0, [r7, #12]
    9e50:	4b07      	ldr	r3, [pc, #28]	; (9e70 <_tc_timer_get_period+0x60>)
    9e52:	4798      	blx	r3
    9e54:	4603      	mov	r3, r0
    9e56:	2b01      	cmp	r3, #1
    9e58:	d104      	bne.n	9e64 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    9e5a:	68f8      	ldr	r0, [r7, #12]
    9e5c:	4b07      	ldr	r3, [pc, #28]	; (9e7c <_tc_timer_get_period+0x6c>)
    9e5e:	4798      	blx	r3
    9e60:	4603      	mov	r3, r0
    9e62:	e000      	b.n	9e66 <_tc_timer_get_period+0x56>
	}

	return 0;
    9e64:	2300      	movs	r3, #0
}
    9e66:	4618      	mov	r0, r3
    9e68:	3710      	adds	r7, #16
    9e6a:	46bd      	mov	sp, r7
    9e6c:	bd80      	pop	{r7, pc}
    9e6e:	bf00      	nop
    9e70:	0000960d 	.word	0x0000960d
    9e74:	000097f5 	.word	0x000097f5
    9e78:	00009795 	.word	0x00009795
    9e7c:	0000970d 	.word	0x0000970d

00009e80 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    9e80:	b580      	push	{r7, lr}
    9e82:	b082      	sub	sp, #8
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9e88:	687b      	ldr	r3, [r7, #4]
    9e8a:	68db      	ldr	r3, [r3, #12]
    9e8c:	4618      	mov	r0, r3
    9e8e:	4b03      	ldr	r3, [pc, #12]	; (9e9c <_tc_timer_is_started+0x1c>)
    9e90:	4798      	blx	r3
    9e92:	4603      	mov	r3, r0
}
    9e94:	4618      	mov	r0, r3
    9e96:	3708      	adds	r7, #8
    9e98:	46bd      	mov	sp, r7
    9e9a:	bd80      	pop	{r7, pc}
    9e9c:	000095ad 	.word	0x000095ad

00009ea0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9ea0:	b480      	push	{r7}
    9ea2:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    9ea4:	4b02      	ldr	r3, [pc, #8]	; (9eb0 <_tc_get_timer+0x10>)
}
    9ea6:	4618      	mov	r0, r3
    9ea8:	46bd      	mov	sp, r7
    9eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eae:	4770      	bx	lr
    9eb0:	20000188 	.word	0x20000188

00009eb4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9eb4:	b480      	push	{r7}
    9eb6:	af00      	add	r7, sp, #0
	return NULL;
    9eb8:	2300      	movs	r3, #0
}
    9eba:	4618      	mov	r0, r3
    9ebc:	46bd      	mov	sp, r7
    9ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ec2:	4770      	bx	lr

00009ec4 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    9ec4:	b580      	push	{r7, lr}
    9ec6:	b084      	sub	sp, #16
    9ec8:	af00      	add	r7, sp, #0
    9eca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9ecc:	687b      	ldr	r3, [r7, #4]
    9ece:	68db      	ldr	r3, [r3, #12]
    9ed0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9ed2:	68f8      	ldr	r0, [r7, #12]
    9ed4:	4b0e      	ldr	r3, [pc, #56]	; (9f10 <_tc_timer_set_irq+0x4c>)
    9ed6:	4798      	blx	r3
    9ed8:	4603      	mov	r3, r0
    9eda:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9edc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    9ee0:	490c      	ldr	r1, [pc, #48]	; (9f14 <_tc_timer_set_irq+0x50>)
    9ee2:	2001      	movs	r0, #1
    9ee4:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <_tc_timer_set_irq+0x54>)
    9ee6:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    9ee8:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9eec:	490b      	ldr	r1, [pc, #44]	; (9f1c <_tc_timer_set_irq+0x58>)
    9eee:	4613      	mov	r3, r2
    9ef0:	009b      	lsls	r3, r3, #2
    9ef2:	4413      	add	r3, r2
    9ef4:	009b      	lsls	r3, r3, #2
    9ef6:	440b      	add	r3, r1
    9ef8:	3302      	adds	r3, #2
    9efa:	f9b3 3000 	ldrsh.w	r3, [r3]
    9efe:	b2db      	uxtb	r3, r3
    9f00:	4618      	mov	r0, r3
    9f02:	4b07      	ldr	r3, [pc, #28]	; (9f20 <_tc_timer_set_irq+0x5c>)
    9f04:	4798      	blx	r3
}
    9f06:	bf00      	nop
    9f08:	3710      	adds	r7, #16
    9f0a:	46bd      	mov	sp, r7
    9f0c:	bd80      	pop	{r7, pc}
    9f0e:	bf00      	nop
    9f10:	0000a071 	.word	0x0000a071
    9f14:	0001adfc 	.word	0x0001adfc
    9f18:	00004bbd 	.word	0x00004bbd
    9f1c:	20000110 	.word	0x20000110
    9f20:	00005a55 	.word	0x00005a55

00009f24 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	b084      	sub	sp, #16
    9f28:	af00      	add	r7, sp, #0
    9f2a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	68db      	ldr	r3, [r3, #12]
    9f30:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9f32:	68f8      	ldr	r0, [r7, #12]
    9f34:	4b07      	ldr	r3, [pc, #28]	; (9f54 <tc_interrupt_handler+0x30>)
    9f36:	4798      	blx	r3
    9f38:	4603      	mov	r3, r0
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d006      	beq.n	9f4c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9f3e:	68f8      	ldr	r0, [r7, #12]
    9f40:	4b05      	ldr	r3, [pc, #20]	; (9f58 <tc_interrupt_handler+0x34>)
    9f42:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	681b      	ldr	r3, [r3, #0]
    9f48:	6878      	ldr	r0, [r7, #4]
    9f4a:	4798      	blx	r3
	}
}
    9f4c:	bf00      	nop
    9f4e:	3710      	adds	r7, #16
    9f50:	46bd      	mov	sp, r7
    9f52:	bd80      	pop	{r7, pc}
    9f54:	000094bd 	.word	0x000094bd
    9f58:	000094e5 	.word	0x000094e5

00009f5c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    9f5c:	b580      	push	{r7, lr}
    9f5e:	b084      	sub	sp, #16
    9f60:	af00      	add	r7, sp, #0
    9f62:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9f64:	687b      	ldr	r3, [r7, #4]
    9f66:	691b      	ldr	r3, [r3, #16]
    9f68:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9f6a:	68f8      	ldr	r0, [r7, #12]
    9f6c:	4b12      	ldr	r3, [pc, #72]	; (9fb8 <tc_pwm_interrupt_handler+0x5c>)
    9f6e:	4798      	blx	r3
    9f70:	4603      	mov	r3, r0
    9f72:	2b00      	cmp	r3, #0
    9f74:	d00a      	beq.n	9f8c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9f76:	68f8      	ldr	r0, [r7, #12]
    9f78:	4b10      	ldr	r3, [pc, #64]	; (9fbc <tc_pwm_interrupt_handler+0x60>)
    9f7a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    9f7c:	687b      	ldr	r3, [r7, #4]
    9f7e:	681b      	ldr	r3, [r3, #0]
    9f80:	2b00      	cmp	r3, #0
    9f82:	d003      	beq.n	9f8c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	681b      	ldr	r3, [r3, #0]
    9f88:	6878      	ldr	r0, [r7, #4]
    9f8a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    9f8c:	68f8      	ldr	r0, [r7, #12]
    9f8e:	4b0c      	ldr	r3, [pc, #48]	; (9fc0 <tc_pwm_interrupt_handler+0x64>)
    9f90:	4798      	blx	r3
    9f92:	4603      	mov	r3, r0
    9f94:	2b00      	cmp	r3, #0
    9f96:	d00a      	beq.n	9fae <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    9f98:	68f8      	ldr	r0, [r7, #12]
    9f9a:	4b0a      	ldr	r3, [pc, #40]	; (9fc4 <tc_pwm_interrupt_handler+0x68>)
    9f9c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    9f9e:	687b      	ldr	r3, [r7, #4]
    9fa0:	685b      	ldr	r3, [r3, #4]
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	d003      	beq.n	9fae <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    9fa6:	687b      	ldr	r3, [r7, #4]
    9fa8:	685b      	ldr	r3, [r3, #4]
    9faa:	6878      	ldr	r0, [r7, #4]
    9fac:	4798      	blx	r3
		}
	}
}
    9fae:	bf00      	nop
    9fb0:	3710      	adds	r7, #16
    9fb2:	46bd      	mov	sp, r7
    9fb4:	bd80      	pop	{r7, pc}
    9fb6:	bf00      	nop
    9fb8:	000094bd 	.word	0x000094bd
    9fbc:	000094e5 	.word	0x000094e5
    9fc0:	00009533 	.word	0x00009533
    9fc4:	000094ff 	.word	0x000094ff

00009fc8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    9fc8:	b580      	push	{r7, lr}
    9fca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    9fcc:	4b03      	ldr	r3, [pc, #12]	; (9fdc <TC0_Handler+0x14>)
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	4618      	mov	r0, r3
    9fd2:	4b03      	ldr	r3, [pc, #12]	; (9fe0 <TC0_Handler+0x18>)
    9fd4:	4798      	blx	r3
}
    9fd6:	bf00      	nop
    9fd8:	bd80      	pop	{r7, pc}
    9fda:	bf00      	nop
    9fdc:	20002320 	.word	0x20002320
    9fe0:	00009f25 	.word	0x00009f25

00009fe4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9fe4:	b580      	push	{r7, lr}
    9fe6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9fe8:	4b03      	ldr	r3, [pc, #12]	; (9ff8 <TC2_Handler+0x14>)
    9fea:	681b      	ldr	r3, [r3, #0]
    9fec:	4618      	mov	r0, r3
    9fee:	4b03      	ldr	r3, [pc, #12]	; (9ffc <TC2_Handler+0x18>)
    9ff0:	4798      	blx	r3
}
    9ff2:	bf00      	nop
    9ff4:	bd80      	pop	{r7, pc}
    9ff6:	bf00      	nop
    9ff8:	20002324 	.word	0x20002324
    9ffc:	00009f25 	.word	0x00009f25

0000a000 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    a000:	b580      	push	{r7, lr}
    a002:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    a004:	4b03      	ldr	r3, [pc, #12]	; (a014 <TC4_Handler+0x14>)
    a006:	681b      	ldr	r3, [r3, #0]
    a008:	4618      	mov	r0, r3
    a00a:	4b03      	ldr	r3, [pc, #12]	; (a018 <TC4_Handler+0x18>)
    a00c:	4798      	blx	r3
}
    a00e:	bf00      	nop
    a010:	bd80      	pop	{r7, pc}
    a012:	bf00      	nop
    a014:	20002328 	.word	0x20002328
    a018:	00009f25 	.word	0x00009f25

0000a01c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    a01c:	b580      	push	{r7, lr}
    a01e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    a020:	4b03      	ldr	r3, [pc, #12]	; (a030 <TC5_Handler+0x14>)
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	4618      	mov	r0, r3
    a026:	4b03      	ldr	r3, [pc, #12]	; (a034 <TC5_Handler+0x18>)
    a028:	4798      	blx	r3
}
    a02a:	bf00      	nop
    a02c:	bd80      	pop	{r7, pc}
    a02e:	bf00      	nop
    a030:	2000232c 	.word	0x2000232c
    a034:	00009f25 	.word	0x00009f25

0000a038 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    a038:	b580      	push	{r7, lr}
    a03a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    a03c:	4b03      	ldr	r3, [pc, #12]	; (a04c <TC6_Handler+0x14>)
    a03e:	681b      	ldr	r3, [r3, #0]
    a040:	4618      	mov	r0, r3
    a042:	4b03      	ldr	r3, [pc, #12]	; (a050 <TC6_Handler+0x18>)
    a044:	4798      	blx	r3
}
    a046:	bf00      	nop
    a048:	bd80      	pop	{r7, pc}
    a04a:	bf00      	nop
    a04c:	20002330 	.word	0x20002330
    a050:	00009f25 	.word	0x00009f25

0000a054 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    a054:	b580      	push	{r7, lr}
    a056:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    a058:	4b03      	ldr	r3, [pc, #12]	; (a068 <TC7_Handler+0x14>)
    a05a:	681b      	ldr	r3, [r3, #0]
    a05c:	4618      	mov	r0, r3
    a05e:	4b03      	ldr	r3, [pc, #12]	; (a06c <TC7_Handler+0x18>)
    a060:	4798      	blx	r3
}
    a062:	bf00      	nop
    a064:	bd80      	pop	{r7, pc}
    a066:	bf00      	nop
    a068:	20002334 	.word	0x20002334
    a06c:	00009f5d 	.word	0x00009f5d

0000a070 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a070:	b580      	push	{r7, lr}
    a072:	b084      	sub	sp, #16
    a074:	af00      	add	r7, sp, #0
    a076:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    a078:	6878      	ldr	r0, [r7, #4]
    a07a:	4b13      	ldr	r3, [pc, #76]	; (a0c8 <get_tc_index+0x58>)
    a07c:	4798      	blx	r3
    a07e:	4603      	mov	r3, r0
    a080:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a082:	2300      	movs	r3, #0
    a084:	73fb      	strb	r3, [r7, #15]
    a086:	e010      	b.n	a0aa <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    a088:	7bfa      	ldrb	r2, [r7, #15]
    a08a:	4910      	ldr	r1, [pc, #64]	; (a0cc <get_tc_index+0x5c>)
    a08c:	4613      	mov	r3, r2
    a08e:	009b      	lsls	r3, r3, #2
    a090:	4413      	add	r3, r2
    a092:	009b      	lsls	r3, r3, #2
    a094:	440b      	add	r3, r1
    a096:	781b      	ldrb	r3, [r3, #0]
    a098:	7bba      	ldrb	r2, [r7, #14]
    a09a:	429a      	cmp	r2, r3
    a09c:	d102      	bne.n	a0a4 <get_tc_index+0x34>
			return i;
    a09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a0a2:	e00d      	b.n	a0c0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a0a4:	7bfb      	ldrb	r3, [r7, #15]
    a0a6:	3301      	adds	r3, #1
    a0a8:	73fb      	strb	r3, [r7, #15]
    a0aa:	7bfb      	ldrb	r3, [r7, #15]
    a0ac:	2b05      	cmp	r3, #5
    a0ae:	d9eb      	bls.n	a088 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    a0b0:	f240 221d 	movw	r2, #541	; 0x21d
    a0b4:	4906      	ldr	r1, [pc, #24]	; (a0d0 <get_tc_index+0x60>)
    a0b6:	2000      	movs	r0, #0
    a0b8:	4b06      	ldr	r3, [pc, #24]	; (a0d4 <get_tc_index+0x64>)
    a0ba:	4798      	blx	r3
	return -1;
    a0bc:	f04f 33ff 	mov.w	r3, #4294967295
}
    a0c0:	4618      	mov	r0, r3
    a0c2:	3710      	adds	r7, #16
    a0c4:	46bd      	mov	sp, r7
    a0c6:	bd80      	pop	{r7, pc}
    a0c8:	0000a175 	.word	0x0000a175
    a0cc:	20000110 	.word	0x20000110
    a0d0:	0001adfc 	.word	0x0001adfc
    a0d4:	00004bbd 	.word	0x00004bbd

0000a0d8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    a0d8:	b480      	push	{r7}
    a0da:	b083      	sub	sp, #12
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
    a0e0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    a0e2:	687b      	ldr	r3, [r7, #4]
    a0e4:	4a17      	ldr	r2, [pc, #92]	; (a144 <_tc_init_irq_param+0x6c>)
    a0e6:	4293      	cmp	r3, r2
    a0e8:	d102      	bne.n	a0f0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    a0ea:	4a17      	ldr	r2, [pc, #92]	; (a148 <_tc_init_irq_param+0x70>)
    a0ec:	683b      	ldr	r3, [r7, #0]
    a0ee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	4a16      	ldr	r2, [pc, #88]	; (a14c <_tc_init_irq_param+0x74>)
    a0f4:	4293      	cmp	r3, r2
    a0f6:	d102      	bne.n	a0fe <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    a0f8:	4a15      	ldr	r2, [pc, #84]	; (a150 <_tc_init_irq_param+0x78>)
    a0fa:	683b      	ldr	r3, [r7, #0]
    a0fc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    a0fe:	687b      	ldr	r3, [r7, #4]
    a100:	4a14      	ldr	r2, [pc, #80]	; (a154 <_tc_init_irq_param+0x7c>)
    a102:	4293      	cmp	r3, r2
    a104:	d102      	bne.n	a10c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    a106:	4a14      	ldr	r2, [pc, #80]	; (a158 <_tc_init_irq_param+0x80>)
    a108:	683b      	ldr	r3, [r7, #0]
    a10a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	4a13      	ldr	r2, [pc, #76]	; (a15c <_tc_init_irq_param+0x84>)
    a110:	4293      	cmp	r3, r2
    a112:	d102      	bne.n	a11a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    a114:	4a12      	ldr	r2, [pc, #72]	; (a160 <_tc_init_irq_param+0x88>)
    a116:	683b      	ldr	r3, [r7, #0]
    a118:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    a11a:	687b      	ldr	r3, [r7, #4]
    a11c:	4a11      	ldr	r2, [pc, #68]	; (a164 <_tc_init_irq_param+0x8c>)
    a11e:	4293      	cmp	r3, r2
    a120:	d102      	bne.n	a128 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    a122:	4a11      	ldr	r2, [pc, #68]	; (a168 <_tc_init_irq_param+0x90>)
    a124:	683b      	ldr	r3, [r7, #0]
    a126:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	4a10      	ldr	r2, [pc, #64]	; (a16c <_tc_init_irq_param+0x94>)
    a12c:	4293      	cmp	r3, r2
    a12e:	d102      	bne.n	a136 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    a130:	4a0f      	ldr	r2, [pc, #60]	; (a170 <_tc_init_irq_param+0x98>)
    a132:	683b      	ldr	r3, [r7, #0]
    a134:	6013      	str	r3, [r2, #0]
	}
}
    a136:	bf00      	nop
    a138:	370c      	adds	r7, #12
    a13a:	46bd      	mov	sp, r7
    a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a140:	4770      	bx	lr
    a142:	bf00      	nop
    a144:	40003800 	.word	0x40003800
    a148:	20002320 	.word	0x20002320
    a14c:	4101a000 	.word	0x4101a000
    a150:	20002324 	.word	0x20002324
    a154:	42001400 	.word	0x42001400
    a158:	20002328 	.word	0x20002328
    a15c:	42001800 	.word	0x42001800
    a160:	2000232c 	.word	0x2000232c
    a164:	43001400 	.word	0x43001400
    a168:	20002330 	.word	0x20002330
    a16c:	43001800 	.word	0x43001800
    a170:	20002334 	.word	0x20002334

0000a174 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a174:	b4b0      	push	{r4, r5, r7}
    a176:	b08d      	sub	sp, #52	; 0x34
    a178:	af00      	add	r7, sp, #0
    a17a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a17c:	4b13      	ldr	r3, [pc, #76]	; (a1cc <_get_hardware_offset+0x58>)
    a17e:	f107 040c 	add.w	r4, r7, #12
    a182:	461d      	mov	r5, r3
    a184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a18c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a190:	2300      	movs	r3, #0
    a192:	62fb      	str	r3, [r7, #44]	; 0x2c
    a194:	e010      	b.n	a1b8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a198:	009b      	lsls	r3, r3, #2
    a19a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a19e:	4413      	add	r3, r2
    a1a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a1a4:	461a      	mov	r2, r3
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	429a      	cmp	r2, r3
    a1aa:	d102      	bne.n	a1b2 <_get_hardware_offset+0x3e>
			return i;
    a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1ae:	b2db      	uxtb	r3, r3
    a1b0:	e006      	b.n	a1c0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1b4:	3301      	adds	r3, #1
    a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1ba:	2b07      	cmp	r3, #7
    a1bc:	d9eb      	bls.n	a196 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a1be:	2300      	movs	r3, #0
}
    a1c0:	4618      	mov	r0, r3
    a1c2:	3734      	adds	r7, #52	; 0x34
    a1c4:	46bd      	mov	sp, r7
    a1c6:	bcb0      	pop	{r4, r5, r7}
    a1c8:	4770      	bx	lr
    a1ca:	bf00      	nop
    a1cc:	0001ae10 	.word	0x0001ae10

0000a1d0 <__NVIC_EnableIRQ>:
{
    a1d0:	b480      	push	{r7}
    a1d2:	b083      	sub	sp, #12
    a1d4:	af00      	add	r7, sp, #0
    a1d6:	4603      	mov	r3, r0
    a1d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a1de:	2b00      	cmp	r3, #0
    a1e0:	db0b      	blt.n	a1fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a1e2:	4909      	ldr	r1, [pc, #36]	; (a208 <__NVIC_EnableIRQ+0x38>)
    a1e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a1e8:	095b      	lsrs	r3, r3, #5
    a1ea:	88fa      	ldrh	r2, [r7, #6]
    a1ec:	f002 021f 	and.w	r2, r2, #31
    a1f0:	2001      	movs	r0, #1
    a1f2:	fa00 f202 	lsl.w	r2, r0, r2
    a1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1fa:	bf00      	nop
    a1fc:	370c      	adds	r7, #12
    a1fe:	46bd      	mov	sp, r7
    a200:	f85d 7b04 	ldr.w	r7, [sp], #4
    a204:	4770      	bx	lr
    a206:	bf00      	nop
    a208:	e000e100 	.word	0xe000e100

0000a20c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a20c:	b480      	push	{r7}
    a20e:	b087      	sub	sp, #28
    a210:	af00      	add	r7, sp, #0
    a212:	60f8      	str	r0, [r7, #12]
    a214:	460b      	mov	r3, r1
    a216:	607a      	str	r2, [r7, #4]
    a218:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a21a:	7afa      	ldrb	r2, [r7, #11]
    a21c:	68f9      	ldr	r1, [r7, #12]
    a21e:	4613      	mov	r3, r2
    a220:	009b      	lsls	r3, r3, #2
    a222:	4413      	add	r3, r2
    a224:	009b      	lsls	r3, r3, #2
    a226:	440b      	add	r3, r1
    a228:	3340      	adds	r3, #64	; 0x40
    a22a:	681b      	ldr	r3, [r3, #0]
    a22c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a22e:	697a      	ldr	r2, [r7, #20]
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	4013      	ands	r3, r2
    a234:	617b      	str	r3, [r7, #20]
	return tmp;
    a236:	697b      	ldr	r3, [r7, #20]
}
    a238:	4618      	mov	r0, r3
    a23a:	371c      	adds	r7, #28
    a23c:	46bd      	mov	sp, r7
    a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a242:	4770      	bx	lr

0000a244 <hri_oscctrl_get_STATUS_reg>:
{
    a244:	b480      	push	{r7}
    a246:	b085      	sub	sp, #20
    a248:	af00      	add	r7, sp, #0
    a24a:	6078      	str	r0, [r7, #4]
    a24c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	691b      	ldr	r3, [r3, #16]
    a252:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a254:	68fa      	ldr	r2, [r7, #12]
    a256:	683b      	ldr	r3, [r7, #0]
    a258:	4013      	ands	r3, r2
    a25a:	60fb      	str	r3, [r7, #12]
	return tmp;
    a25c:	68fb      	ldr	r3, [r7, #12]
}
    a25e:	4618      	mov	r0, r3
    a260:	3714      	adds	r7, #20
    a262:	46bd      	mov	sp, r7
    a264:	f85d 7b04 	ldr.w	r7, [sp], #4
    a268:	4770      	bx	lr

0000a26a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a26a:	b480      	push	{r7}
    a26c:	b085      	sub	sp, #20
    a26e:	af00      	add	r7, sp, #0
    a270:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a272:	687b      	ldr	r3, [r7, #4]
    a274:	f893 3020 	ldrb.w	r3, [r3, #32]
    a278:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a27a:	7bfb      	ldrb	r3, [r7, #15]
    a27c:	f003 0301 	and.w	r3, r3, #1
    a280:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a282:	7bfb      	ldrb	r3, [r7, #15]
    a284:	2b00      	cmp	r3, #0
    a286:	bf14      	ite	ne
    a288:	2301      	movne	r3, #1
    a28a:	2300      	moveq	r3, #0
    a28c:	b2db      	uxtb	r3, r3
}
    a28e:	4618      	mov	r0, r3
    a290:	3714      	adds	r7, #20
    a292:	46bd      	mov	sp, r7
    a294:	f85d 7b04 	ldr.w	r7, [sp], #4
    a298:	4770      	bx	lr

0000a29a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a29a:	b480      	push	{r7}
    a29c:	b083      	sub	sp, #12
    a29e:	af00      	add	r7, sp, #0
    a2a0:	6078      	str	r0, [r7, #4]
    a2a2:	460b      	mov	r3, r1
    a2a4:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a2a6:	bf00      	nop
    a2a8:	687b      	ldr	r3, [r7, #4]
    a2aa:	789b      	ldrb	r3, [r3, #2]
    a2ac:	b2da      	uxtb	r2, r3
    a2ae:	78fb      	ldrb	r3, [r7, #3]
    a2b0:	4013      	ands	r3, r2
    a2b2:	b2db      	uxtb	r3, r3
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d1f7      	bne.n	a2a8 <hri_usb_wait_for_sync+0xe>
	};
}
    a2b8:	bf00      	nop
    a2ba:	370c      	adds	r7, #12
    a2bc:	46bd      	mov	sp, r7
    a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2c2:	4770      	bx	lr

0000a2c4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a2c4:	b480      	push	{r7}
    a2c6:	b083      	sub	sp, #12
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	6078      	str	r0, [r7, #4]
    a2cc:	460b      	mov	r3, r1
    a2ce:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	789b      	ldrb	r3, [r3, #2]
    a2d4:	b2da      	uxtb	r2, r3
    a2d6:	78fb      	ldrb	r3, [r7, #3]
    a2d8:	4013      	ands	r3, r2
    a2da:	b2db      	uxtb	r3, r3
    a2dc:	2b00      	cmp	r3, #0
    a2de:	bf14      	ite	ne
    a2e0:	2301      	movne	r3, #1
    a2e2:	2300      	moveq	r3, #0
    a2e4:	b2db      	uxtb	r3, r3
}
    a2e6:	4618      	mov	r0, r3
    a2e8:	370c      	adds	r7, #12
    a2ea:	46bd      	mov	sp, r7
    a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2f0:	4770      	bx	lr

0000a2f2 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a2f2:	b480      	push	{r7}
    a2f4:	b085      	sub	sp, #20
    a2f6:	af00      	add	r7, sp, #0
    a2f8:	6078      	str	r0, [r7, #4]
    a2fa:	460b      	mov	r3, r1
    a2fc:	70fb      	strb	r3, [r7, #3]
    a2fe:	4613      	mov	r3, r2
    a300:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a302:	78fb      	ldrb	r3, [r7, #3]
    a304:	687a      	ldr	r2, [r7, #4]
    a306:	3308      	adds	r3, #8
    a308:	015b      	lsls	r3, r3, #5
    a30a:	4413      	add	r3, r2
    a30c:	3307      	adds	r3, #7
    a30e:	781b      	ldrb	r3, [r3, #0]
    a310:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a312:	7bfa      	ldrb	r2, [r7, #15]
    a314:	78bb      	ldrb	r3, [r7, #2]
    a316:	4013      	ands	r3, r2
    a318:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a31a:	7bfb      	ldrb	r3, [r7, #15]
}
    a31c:	4618      	mov	r0, r3
    a31e:	3714      	adds	r7, #20
    a320:	46bd      	mov	sp, r7
    a322:	f85d 7b04 	ldr.w	r7, [sp], #4
    a326:	4770      	bx	lr

0000a328 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a328:	b480      	push	{r7}
    a32a:	b083      	sub	sp, #12
    a32c:	af00      	add	r7, sp, #0
    a32e:	6078      	str	r0, [r7, #4]
    a330:	460b      	mov	r3, r1
    a332:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a334:	78fb      	ldrb	r3, [r7, #3]
    a336:	687a      	ldr	r2, [r7, #4]
    a338:	3308      	adds	r3, #8
    a33a:	015b      	lsls	r3, r3, #5
    a33c:	4413      	add	r3, r2
    a33e:	3307      	adds	r3, #7
    a340:	781b      	ldrb	r3, [r3, #0]
    a342:	b2db      	uxtb	r3, r3
}
    a344:	4618      	mov	r0, r3
    a346:	370c      	adds	r7, #12
    a348:	46bd      	mov	sp, r7
    a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a34e:	4770      	bx	lr

0000a350 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a350:	b480      	push	{r7}
    a352:	b083      	sub	sp, #12
    a354:	af00      	add	r7, sp, #0
    a356:	6078      	str	r0, [r7, #4]
    a358:	460b      	mov	r3, r1
    a35a:	70fb      	strb	r3, [r7, #3]
    a35c:	4613      	mov	r3, r2
    a35e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a360:	78fb      	ldrb	r3, [r7, #3]
    a362:	687a      	ldr	r2, [r7, #4]
    a364:	3308      	adds	r3, #8
    a366:	015b      	lsls	r3, r3, #5
    a368:	4413      	add	r3, r2
    a36a:	3307      	adds	r3, #7
    a36c:	78ba      	ldrb	r2, [r7, #2]
    a36e:	701a      	strb	r2, [r3, #0]
}
    a370:	bf00      	nop
    a372:	370c      	adds	r7, #12
    a374:	46bd      	mov	sp, r7
    a376:	f85d 7b04 	ldr.w	r7, [sp], #4
    a37a:	4770      	bx	lr

0000a37c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a37c:	b480      	push	{r7}
    a37e:	b083      	sub	sp, #12
    a380:	af00      	add	r7, sp, #0
    a382:	6078      	str	r0, [r7, #4]
    a384:	460b      	mov	r3, r1
    a386:	70fb      	strb	r3, [r7, #3]
    a388:	4613      	mov	r3, r2
    a38a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a38c:	78fb      	ldrb	r3, [r7, #3]
    a38e:	687a      	ldr	r2, [r7, #4]
    a390:	3308      	adds	r3, #8
    a392:	015b      	lsls	r3, r3, #5
    a394:	4413      	add	r3, r2
    a396:	3305      	adds	r3, #5
    a398:	78ba      	ldrb	r2, [r7, #2]
    a39a:	701a      	strb	r2, [r3, #0]
}
    a39c:	bf00      	nop
    a39e:	370c      	adds	r7, #12
    a3a0:	46bd      	mov	sp, r7
    a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3a6:	4770      	bx	lr

0000a3a8 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a3a8:	b480      	push	{r7}
    a3aa:	b083      	sub	sp, #12
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
    a3b0:	460b      	mov	r3, r1
    a3b2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a3b4:	78fb      	ldrb	r3, [r7, #3]
    a3b6:	687a      	ldr	r2, [r7, #4]
    a3b8:	3308      	adds	r3, #8
    a3ba:	015b      	lsls	r3, r3, #5
    a3bc:	4413      	add	r3, r2
    a3be:	3306      	adds	r3, #6
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	b2db      	uxtb	r3, r3
}
    a3c4:	4618      	mov	r0, r3
    a3c6:	370c      	adds	r7, #12
    a3c8:	46bd      	mov	sp, r7
    a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ce:	4770      	bx	lr

0000a3d0 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a3d0:	b480      	push	{r7}
    a3d2:	b083      	sub	sp, #12
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	6078      	str	r0, [r7, #4]
    a3d8:	460b      	mov	r3, r1
    a3da:	70fb      	strb	r3, [r7, #3]
    a3dc:	4613      	mov	r3, r2
    a3de:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a3e0:	78fb      	ldrb	r3, [r7, #3]
    a3e2:	687a      	ldr	r2, [r7, #4]
    a3e4:	3308      	adds	r3, #8
    a3e6:	015b      	lsls	r3, r3, #5
    a3e8:	4413      	add	r3, r2
    a3ea:	3304      	adds	r3, #4
    a3ec:	78ba      	ldrb	r2, [r7, #2]
    a3ee:	701a      	strb	r2, [r3, #0]
}
    a3f0:	bf00      	nop
    a3f2:	370c      	adds	r7, #12
    a3f4:	46bd      	mov	sp, r7
    a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3fa:	4770      	bx	lr

0000a3fc <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a3fc:	b480      	push	{r7}
    a3fe:	b083      	sub	sp, #12
    a400:	af00      	add	r7, sp, #0
    a402:	6078      	str	r0, [r7, #4]
    a404:	460b      	mov	r3, r1
    a406:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a408:	78fb      	ldrb	r3, [r7, #3]
    a40a:	687a      	ldr	r2, [r7, #4]
    a40c:	015b      	lsls	r3, r3, #5
    a40e:	4413      	add	r3, r2
    a410:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a414:	2210      	movs	r2, #16
    a416:	701a      	strb	r2, [r3, #0]
}
    a418:	bf00      	nop
    a41a:	370c      	adds	r7, #12
    a41c:	46bd      	mov	sp, r7
    a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a422:	4770      	bx	lr

0000a424 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a424:	b480      	push	{r7}
    a426:	b083      	sub	sp, #12
    a428:	af00      	add	r7, sp, #0
    a42a:	6078      	str	r0, [r7, #4]
    a42c:	460b      	mov	r3, r1
    a42e:	70fb      	strb	r3, [r7, #3]
    a430:	4613      	mov	r3, r2
    a432:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a434:	78fb      	ldrb	r3, [r7, #3]
    a436:	687a      	ldr	r2, [r7, #4]
    a438:	015b      	lsls	r3, r3, #5
    a43a:	4413      	add	r3, r2
    a43c:	f203 1309 	addw	r3, r3, #265	; 0x109
    a440:	78ba      	ldrb	r2, [r7, #2]
    a442:	701a      	strb	r2, [r3, #0]
}
    a444:	bf00      	nop
    a446:	370c      	adds	r7, #12
    a448:	46bd      	mov	sp, r7
    a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a44e:	4770      	bx	lr

0000a450 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a450:	b480      	push	{r7}
    a452:	b083      	sub	sp, #12
    a454:	af00      	add	r7, sp, #0
    a456:	6078      	str	r0, [r7, #4]
    a458:	460b      	mov	r3, r1
    a45a:	70fb      	strb	r3, [r7, #3]
    a45c:	4613      	mov	r3, r2
    a45e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a460:	78fb      	ldrb	r3, [r7, #3]
    a462:	687a      	ldr	r2, [r7, #4]
    a464:	015b      	lsls	r3, r3, #5
    a466:	4413      	add	r3, r2
    a468:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a46c:	78ba      	ldrb	r2, [r7, #2]
    a46e:	701a      	strb	r2, [r3, #0]
}
    a470:	bf00      	nop
    a472:	370c      	adds	r7, #12
    a474:	46bd      	mov	sp, r7
    a476:	f85d 7b04 	ldr.w	r7, [sp], #4
    a47a:	4770      	bx	lr

0000a47c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a47c:	b480      	push	{r7}
    a47e:	b085      	sub	sp, #20
    a480:	af00      	add	r7, sp, #0
    a482:	6078      	str	r0, [r7, #4]
    a484:	460b      	mov	r3, r1
    a486:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a488:	78fb      	ldrb	r3, [r7, #3]
    a48a:	687a      	ldr	r2, [r7, #4]
    a48c:	3308      	adds	r3, #8
    a48e:	015b      	lsls	r3, r3, #5
    a490:	4413      	add	r3, r2
    a492:	781b      	ldrb	r3, [r3, #0]
    a494:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a496:	7bfb      	ldrb	r3, [r7, #15]
    a498:	f003 0307 	and.w	r3, r3, #7
    a49c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a49e:	7bfb      	ldrb	r3, [r7, #15]
}
    a4a0:	4618      	mov	r0, r3
    a4a2:	3714      	adds	r7, #20
    a4a4:	46bd      	mov	sp, r7
    a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4aa:	4770      	bx	lr

0000a4ac <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a4ac:	b480      	push	{r7}
    a4ae:	b085      	sub	sp, #20
    a4b0:	af00      	add	r7, sp, #0
    a4b2:	6078      	str	r0, [r7, #4]
    a4b4:	460b      	mov	r3, r1
    a4b6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a4b8:	78fb      	ldrb	r3, [r7, #3]
    a4ba:	687a      	ldr	r2, [r7, #4]
    a4bc:	3308      	adds	r3, #8
    a4be:	015b      	lsls	r3, r3, #5
    a4c0:	4413      	add	r3, r2
    a4c2:	781b      	ldrb	r3, [r3, #0]
    a4c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a4c6:	7bfb      	ldrb	r3, [r7, #15]
    a4c8:	091b      	lsrs	r3, r3, #4
    a4ca:	b2db      	uxtb	r3, r3
    a4cc:	f003 0307 	and.w	r3, r3, #7
    a4d0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a4d2:	7bfb      	ldrb	r3, [r7, #15]
}
    a4d4:	4618      	mov	r0, r3
    a4d6:	3714      	adds	r7, #20
    a4d8:	46bd      	mov	sp, r7
    a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4de:	4770      	bx	lr

0000a4e0 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a4e0:	b480      	push	{r7}
    a4e2:	b083      	sub	sp, #12
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	6078      	str	r0, [r7, #4]
    a4e8:	460b      	mov	r3, r1
    a4ea:	70fb      	strb	r3, [r7, #3]
    a4ec:	4613      	mov	r3, r2
    a4ee:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a4f0:	78fb      	ldrb	r3, [r7, #3]
    a4f2:	687a      	ldr	r2, [r7, #4]
    a4f4:	3308      	adds	r3, #8
    a4f6:	015b      	lsls	r3, r3, #5
    a4f8:	4413      	add	r3, r2
    a4fa:	78ba      	ldrb	r2, [r7, #2]
    a4fc:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a4fe:	bf00      	nop
    a500:	370c      	adds	r7, #12
    a502:	46bd      	mov	sp, r7
    a504:	f85d 7b04 	ldr.w	r7, [sp], #4
    a508:	4770      	bx	lr

0000a50a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a50a:	b480      	push	{r7}
    a50c:	b083      	sub	sp, #12
    a50e:	af00      	add	r7, sp, #0
    a510:	6078      	str	r0, [r7, #4]
    a512:	460b      	mov	r3, r1
    a514:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a516:	78fb      	ldrb	r3, [r7, #3]
    a518:	687a      	ldr	r2, [r7, #4]
    a51a:	3308      	adds	r3, #8
    a51c:	015b      	lsls	r3, r3, #5
    a51e:	4413      	add	r3, r2
    a520:	781b      	ldrb	r3, [r3, #0]
    a522:	b2db      	uxtb	r3, r3
}
    a524:	4618      	mov	r0, r3
    a526:	370c      	adds	r7, #12
    a528:	46bd      	mov	sp, r7
    a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a52e:	4770      	bx	lr

0000a530 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a530:	b480      	push	{r7}
    a532:	b083      	sub	sp, #12
    a534:	af00      	add	r7, sp, #0
    a536:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a538:	687b      	ldr	r3, [r7, #4]
    a53a:	8b9b      	ldrh	r3, [r3, #28]
    a53c:	b29b      	uxth	r3, r3
}
    a53e:	4618      	mov	r0, r3
    a540:	370c      	adds	r7, #12
    a542:	46bd      	mov	sp, r7
    a544:	f85d 7b04 	ldr.w	r7, [sp], #4
    a548:	4770      	bx	lr

0000a54a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a54a:	b480      	push	{r7}
    a54c:	b083      	sub	sp, #12
    a54e:	af00      	add	r7, sp, #0
    a550:	6078      	str	r0, [r7, #4]
    a552:	460b      	mov	r3, r1
    a554:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a556:	687b      	ldr	r3, [r7, #4]
    a558:	887a      	ldrh	r2, [r7, #2]
    a55a:	839a      	strh	r2, [r3, #28]
}
    a55c:	bf00      	nop
    a55e:	370c      	adds	r7, #12
    a560:	46bd      	mov	sp, r7
    a562:	f85d 7b04 	ldr.w	r7, [sp], #4
    a566:	4770      	bx	lr

0000a568 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a568:	b480      	push	{r7}
    a56a:	b083      	sub	sp, #12
    a56c:	af00      	add	r7, sp, #0
    a56e:	6078      	str	r0, [r7, #4]
    a570:	460b      	mov	r3, r1
    a572:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	887a      	ldrh	r2, [r7, #2]
    a578:	831a      	strh	r2, [r3, #24]
}
    a57a:	bf00      	nop
    a57c:	370c      	adds	r7, #12
    a57e:	46bd      	mov	sp, r7
    a580:	f85d 7b04 	ldr.w	r7, [sp], #4
    a584:	4770      	bx	lr

0000a586 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a586:	b480      	push	{r7}
    a588:	b083      	sub	sp, #12
    a58a:	af00      	add	r7, sp, #0
    a58c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	8b1b      	ldrh	r3, [r3, #24]
    a592:	b29b      	uxth	r3, r3
}
    a594:	4618      	mov	r0, r3
    a596:	370c      	adds	r7, #12
    a598:	46bd      	mov	sp, r7
    a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a59e:	4770      	bx	lr

0000a5a0 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a5a0:	b480      	push	{r7}
    a5a2:	b083      	sub	sp, #12
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	6078      	str	r0, [r7, #4]
    a5a8:	460b      	mov	r3, r1
    a5aa:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a5ac:	687b      	ldr	r3, [r7, #4]
    a5ae:	887a      	ldrh	r2, [r7, #2]
    a5b0:	829a      	strh	r2, [r3, #20]
}
    a5b2:	bf00      	nop
    a5b4:	370c      	adds	r7, #12
    a5b6:	46bd      	mov	sp, r7
    a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5bc:	4770      	bx	lr

0000a5be <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a5be:	b480      	push	{r7}
    a5c0:	b085      	sub	sp, #20
    a5c2:	af00      	add	r7, sp, #0
    a5c4:	6078      	str	r0, [r7, #4]
    a5c6:	460b      	mov	r3, r1
    a5c8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a5ca:	687b      	ldr	r3, [r7, #4]
    a5cc:	789b      	ldrb	r3, [r3, #2]
    a5ce:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a5d0:	7bfa      	ldrb	r2, [r7, #15]
    a5d2:	78fb      	ldrb	r3, [r7, #3]
    a5d4:	4013      	ands	r3, r2
    a5d6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
    a5da:	4618      	mov	r0, r3
    a5dc:	3714      	adds	r7, #20
    a5de:	46bd      	mov	sp, r7
    a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5e4:	4770      	bx	lr
	...

0000a5e8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a5e8:	b580      	push	{r7, lr}
    a5ea:	b082      	sub	sp, #8
    a5ec:	af00      	add	r7, sp, #0
    a5ee:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a5f0:	687b      	ldr	r3, [r7, #4]
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	b2db      	uxtb	r3, r3
    a5f6:	f023 0302 	bic.w	r3, r3, #2
    a5fa:	b2da      	uxtb	r2, r3
    a5fc:	687b      	ldr	r3, [r7, #4]
    a5fe:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a600:	2103      	movs	r1, #3
    a602:	6878      	ldr	r0, [r7, #4]
    a604:	4b02      	ldr	r3, [pc, #8]	; (a610 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a606:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a608:	bf00      	nop
    a60a:	3708      	adds	r7, #8
    a60c:	46bd      	mov	sp, r7
    a60e:	bd80      	pop	{r7, pc}
    a610:	0000a29b 	.word	0x0000a29b

0000a614 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a614:	b580      	push	{r7, lr}
    a616:	b084      	sub	sp, #16
    a618:	af00      	add	r7, sp, #0
    a61a:	6078      	str	r0, [r7, #4]
    a61c:	460b      	mov	r3, r1
    a61e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a620:	2103      	movs	r1, #3
    a622:	6878      	ldr	r0, [r7, #4]
    a624:	4b06      	ldr	r3, [pc, #24]	; (a640 <hri_usb_get_CTRLA_reg+0x2c>)
    a626:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	781b      	ldrb	r3, [r3, #0]
    a62c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a62e:	7bfa      	ldrb	r2, [r7, #15]
    a630:	78fb      	ldrb	r3, [r7, #3]
    a632:	4013      	ands	r3, r2
    a634:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a636:	7bfb      	ldrb	r3, [r7, #15]
}
    a638:	4618      	mov	r0, r3
    a63a:	3710      	adds	r7, #16
    a63c:	46bd      	mov	sp, r7
    a63e:	bd80      	pop	{r7, pc}
    a640:	0000a29b 	.word	0x0000a29b

0000a644 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a644:	b580      	push	{r7, lr}
    a646:	b082      	sub	sp, #8
    a648:	af00      	add	r7, sp, #0
    a64a:	6078      	str	r0, [r7, #4]
    a64c:	460b      	mov	r3, r1
    a64e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	78fa      	ldrb	r2, [r7, #3]
    a654:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a656:	2103      	movs	r1, #3
    a658:	6878      	ldr	r0, [r7, #4]
    a65a:	4b03      	ldr	r3, [pc, #12]	; (a668 <hri_usb_write_CTRLA_reg+0x24>)
    a65c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a65e:	bf00      	nop
    a660:	3708      	adds	r7, #8
    a662:	46bd      	mov	sp, r7
    a664:	bd80      	pop	{r7, pc}
    a666:	bf00      	nop
    a668:	0000a29b 	.word	0x0000a29b

0000a66c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a66c:	b580      	push	{r7, lr}
    a66e:	b082      	sub	sp, #8
    a670:	af00      	add	r7, sp, #0
    a672:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a674:	2103      	movs	r1, #3
    a676:	6878      	ldr	r0, [r7, #4]
    a678:	4b04      	ldr	r3, [pc, #16]	; (a68c <hri_usb_read_CTRLA_reg+0x20>)
    a67a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a67c:	687b      	ldr	r3, [r7, #4]
    a67e:	781b      	ldrb	r3, [r3, #0]
    a680:	b2db      	uxtb	r3, r3
}
    a682:	4618      	mov	r0, r3
    a684:	3708      	adds	r7, #8
    a686:	46bd      	mov	sp, r7
    a688:	bd80      	pop	{r7, pc}
    a68a:	bf00      	nop
    a68c:	0000a29b 	.word	0x0000a29b

0000a690 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a690:	b480      	push	{r7}
    a692:	b083      	sub	sp, #12
    a694:	af00      	add	r7, sp, #0
    a696:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	891b      	ldrh	r3, [r3, #8]
    a69c:	b29b      	uxth	r3, r3
    a69e:	f023 0301 	bic.w	r3, r3, #1
    a6a2:	b29a      	uxth	r2, r3
    a6a4:	687b      	ldr	r3, [r7, #4]
    a6a6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a6a8:	bf00      	nop
    a6aa:	370c      	adds	r7, #12
    a6ac:	46bd      	mov	sp, r7
    a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6b2:	4770      	bx	lr

0000a6b4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a6b4:	b480      	push	{r7}
    a6b6:	b083      	sub	sp, #12
    a6b8:	af00      	add	r7, sp, #0
    a6ba:	6078      	str	r0, [r7, #4]
    a6bc:	460b      	mov	r3, r1
    a6be:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a6c0:	687b      	ldr	r3, [r7, #4]
    a6c2:	887a      	ldrh	r2, [r7, #2]
    a6c4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a6c6:	bf00      	nop
    a6c8:	370c      	adds	r7, #12
    a6ca:	46bd      	mov	sp, r7
    a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6d0:	4770      	bx	lr

0000a6d2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a6d2:	b480      	push	{r7}
    a6d4:	b083      	sub	sp, #12
    a6d6:	af00      	add	r7, sp, #0
    a6d8:	6078      	str	r0, [r7, #4]
    a6da:	460b      	mov	r3, r1
    a6dc:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a6de:	687b      	ldr	r3, [r7, #4]
    a6e0:	78fa      	ldrb	r2, [r7, #3]
    a6e2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a6e4:	bf00      	nop
    a6e6:	370c      	adds	r7, #12
    a6e8:	46bd      	mov	sp, r7
    a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6ee:	4770      	bx	lr

0000a6f0 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a6f0:	b480      	push	{r7}
    a6f2:	b083      	sub	sp, #12
    a6f4:	af00      	add	r7, sp, #0
    a6f6:	6078      	str	r0, [r7, #4]
    a6f8:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	683a      	ldr	r2, [r7, #0]
    a6fe:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a700:	bf00      	nop
    a702:	370c      	adds	r7, #12
    a704:	46bd      	mov	sp, r7
    a706:	f85d 7b04 	ldr.w	r7, [sp], #4
    a70a:	4770      	bx	lr

0000a70c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a70c:	b480      	push	{r7}
    a70e:	b083      	sub	sp, #12
    a710:	af00      	add	r7, sp, #0
    a712:	6078      	str	r0, [r7, #4]
    a714:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a716:	2300      	movs	r3, #0
}
    a718:	4618      	mov	r0, r3
    a71a:	370c      	adds	r7, #12
    a71c:	46bd      	mov	sp, r7
    a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a722:	4770      	bx	lr

0000a724 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a724:	b480      	push	{r7}
    a726:	b085      	sub	sp, #20
    a728:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a72a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a72e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a730:	4b28      	ldr	r3, [pc, #160]	; (a7d4 <_usb_load_calib+0xb0>)
    a732:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a734:	f003 031f 	and.w	r3, r3, #31
    a738:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a73a:	4b26      	ldr	r3, [pc, #152]	; (a7d4 <_usb_load_calib+0xb0>)
    a73c:	681b      	ldr	r3, [r3, #0]
    a73e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a740:	f003 031f 	and.w	r3, r3, #31
    a744:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a746:	4b23      	ldr	r3, [pc, #140]	; (a7d4 <_usb_load_calib+0xb0>)
    a748:	681b      	ldr	r3, [r3, #0]
    a74a:	0a9b      	lsrs	r3, r3, #10
    a74c:	f003 0307 	and.w	r3, r3, #7
    a750:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a752:	68fb      	ldr	r3, [r7, #12]
    a754:	2b00      	cmp	r3, #0
    a756:	d002      	beq.n	a75e <_usb_load_calib+0x3a>
    a758:	68fb      	ldr	r3, [r7, #12]
    a75a:	2b1f      	cmp	r3, #31
    a75c:	d101      	bne.n	a762 <_usb_load_calib+0x3e>
		pad_transn = 9;
    a75e:	2309      	movs	r3, #9
    a760:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a762:	68bb      	ldr	r3, [r7, #8]
    a764:	2b00      	cmp	r3, #0
    a766:	d002      	beq.n	a76e <_usb_load_calib+0x4a>
    a768:	68bb      	ldr	r3, [r7, #8]
    a76a:	2b1f      	cmp	r3, #31
    a76c:	d101      	bne.n	a772 <_usb_load_calib+0x4e>
		pad_transp = 25;
    a76e:	2319      	movs	r3, #25
    a770:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	2b00      	cmp	r3, #0
    a776:	d002      	beq.n	a77e <_usb_load_calib+0x5a>
    a778:	687b      	ldr	r3, [r7, #4]
    a77a:	2b07      	cmp	r3, #7
    a77c:	d101      	bne.n	a782 <_usb_load_calib+0x5e>
		pad_trim = 6;
    a77e:	2306      	movs	r3, #6
    a780:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a782:	68fb      	ldr	r3, [r7, #12]
    a784:	b29b      	uxth	r3, r3
    a786:	019b      	lsls	r3, r3, #6
    a788:	b29b      	uxth	r3, r3
    a78a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a78e:	b29a      	uxth	r2, r3
    a790:	68bb      	ldr	r3, [r7, #8]
    a792:	b29b      	uxth	r3, r3
    a794:	f003 031f 	and.w	r3, r3, #31
    a798:	b29b      	uxth	r3, r3
    a79a:	4313      	orrs	r3, r2
    a79c:	b29a      	uxth	r2, r3
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	b29b      	uxth	r3, r3
    a7a2:	031b      	lsls	r3, r3, #12
    a7a4:	b29b      	uxth	r3, r3
    a7a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a7aa:	b29b      	uxth	r3, r3
    a7ac:	4313      	orrs	r3, r2
    a7ae:	b29a      	uxth	r2, r3
    a7b0:	683b      	ldr	r3, [r7, #0]
    a7b2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a7b4:	683a      	ldr	r2, [r7, #0]
    a7b6:	78d3      	ldrb	r3, [r2, #3]
    a7b8:	f043 0303 	orr.w	r3, r3, #3
    a7bc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a7be:	683a      	ldr	r2, [r7, #0]
    a7c0:	78d3      	ldrb	r3, [r2, #3]
    a7c2:	f043 030c 	orr.w	r3, r3, #12
    a7c6:	70d3      	strb	r3, [r2, #3]
}
    a7c8:	bf00      	nop
    a7ca:	3714      	adds	r7, #20
    a7cc:	46bd      	mov	sp, r7
    a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7d2:	4770      	bx	lr
    a7d4:	00800084 	.word	0x00800084

0000a7d8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a7d8:	b580      	push	{r7, lr}
    a7da:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a7dc:	bf00      	nop
    a7de:	2203      	movs	r2, #3
    a7e0:	2100      	movs	r1, #0
    a7e2:	4804      	ldr	r0, [pc, #16]	; (a7f4 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a7e4:	4b04      	ldr	r3, [pc, #16]	; (a7f8 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a7e6:	4798      	blx	r3
    a7e8:	4603      	mov	r3, r0
    a7ea:	2b03      	cmp	r3, #3
    a7ec:	d1f7      	bne.n	a7de <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a7ee:	bf00      	nop
    a7f0:	bd80      	pop	{r7, pc}
    a7f2:	bf00      	nop
    a7f4:	40001000 	.word	0x40001000
    a7f8:	0000a20d 	.word	0x0000a20d

0000a7fc <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a7fc:	b580      	push	{r7, lr}
    a7fe:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a800:	480e      	ldr	r0, [pc, #56]	; (a83c <_usb_d_dev_wait_dfll_rdy+0x40>)
    a802:	4b0f      	ldr	r3, [pc, #60]	; (a840 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a804:	4798      	blx	r3
    a806:	4603      	mov	r3, r0
    a808:	2b00      	cmp	r3, #0
    a80a:	d00a      	beq.n	a822 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a80c:	bf00      	nop
    a80e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a812:	480a      	ldr	r0, [pc, #40]	; (a83c <_usb_d_dev_wait_dfll_rdy+0x40>)
    a814:	4b0b      	ldr	r3, [pc, #44]	; (a844 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a816:	4798      	blx	r3
    a818:	4603      	mov	r3, r0
    a81a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a81e:	d1f6      	bne.n	a80e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a820:	e009      	b.n	a836 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a822:	bf00      	nop
    a824:	f44f 7180 	mov.w	r1, #256	; 0x100
    a828:	4804      	ldr	r0, [pc, #16]	; (a83c <_usb_d_dev_wait_dfll_rdy+0x40>)
    a82a:	4b06      	ldr	r3, [pc, #24]	; (a844 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a82c:	4798      	blx	r3
    a82e:	4603      	mov	r3, r0
    a830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a834:	d1f6      	bne.n	a824 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a836:	bf00      	nop
    a838:	bd80      	pop	{r7, pc}
    a83a:	bf00      	nop
    a83c:	40001000 	.word	0x40001000
    a840:	0000a26b 	.word	0x0000a26b
    a844:	0000a245 	.word	0x0000a245

0000a848 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a848:	b580      	push	{r7, lr}
    a84a:	b082      	sub	sp, #8
    a84c:	af00      	add	r7, sp, #0
    a84e:	4603      	mov	r3, r0
    a850:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a852:	79fb      	ldrb	r3, [r7, #7]
    a854:	2b00      	cmp	r3, #0
    a856:	d102      	bne.n	a85e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a858:	4b05      	ldr	r3, [pc, #20]	; (a870 <_usb_d_dev_wait_clk_rdy+0x28>)
    a85a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a85c:	e004      	b.n	a868 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a85e:	79fb      	ldrb	r3, [r7, #7]
    a860:	2b01      	cmp	r3, #1
    a862:	d101      	bne.n	a868 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a864:	4b03      	ldr	r3, [pc, #12]	; (a874 <_usb_d_dev_wait_clk_rdy+0x2c>)
    a866:	4798      	blx	r3
}
    a868:	bf00      	nop
    a86a:	3708      	adds	r7, #8
    a86c:	46bd      	mov	sp, r7
    a86e:	bd80      	pop	{r7, pc}
    a870:	0000a7fd 	.word	0x0000a7fd
    a874:	0000a7d9 	.word	0x0000a7d9

0000a878 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a878:	b580      	push	{r7, lr}
    a87a:	b082      	sub	sp, #8
    a87c:	af00      	add	r7, sp, #0
    a87e:	4603      	mov	r3, r0
    a880:	6039      	str	r1, [r7, #0]
    a882:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a884:	683b      	ldr	r3, [r7, #0]
    a886:	b2da      	uxtb	r2, r3
    a888:	79fb      	ldrb	r3, [r7, #7]
    a88a:	4619      	mov	r1, r3
    a88c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a890:	4b02      	ldr	r3, [pc, #8]	; (a89c <_usbd_ep_int_ack+0x24>)
    a892:	4798      	blx	r3
}
    a894:	bf00      	nop
    a896:	3708      	adds	r7, #8
    a898:	46bd      	mov	sp, r7
    a89a:	bd80      	pop	{r7, pc}
    a89c:	0000a351 	.word	0x0000a351

0000a8a0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a8a0:	b580      	push	{r7, lr}
    a8a2:	b082      	sub	sp, #8
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	4603      	mov	r3, r0
    a8a8:	6039      	str	r1, [r7, #0]
    a8aa:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a8ac:	683b      	ldr	r3, [r7, #0]
    a8ae:	b2da      	uxtb	r2, r3
    a8b0:	79fb      	ldrb	r3, [r7, #7]
    a8b2:	4619      	mov	r1, r3
    a8b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8b8:	4b02      	ldr	r3, [pc, #8]	; (a8c4 <_usbd_ep_int_en+0x24>)
    a8ba:	4798      	blx	r3
}
    a8bc:	bf00      	nop
    a8be:	3708      	adds	r7, #8
    a8c0:	46bd      	mov	sp, r7
    a8c2:	bd80      	pop	{r7, pc}
    a8c4:	0000a425 	.word	0x0000a425

0000a8c8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    a8c8:	b580      	push	{r7, lr}
    a8ca:	b082      	sub	sp, #8
    a8cc:	af00      	add	r7, sp, #0
    a8ce:	4603      	mov	r3, r0
    a8d0:	6039      	str	r1, [r7, #0]
    a8d2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a8d4:	683b      	ldr	r3, [r7, #0]
    a8d6:	b2da      	uxtb	r2, r3
    a8d8:	79fb      	ldrb	r3, [r7, #7]
    a8da:	4619      	mov	r1, r3
    a8dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8e0:	4b02      	ldr	r3, [pc, #8]	; (a8ec <_usbd_ep_int_dis+0x24>)
    a8e2:	4798      	blx	r3
}
    a8e4:	bf00      	nop
    a8e6:	3708      	adds	r7, #8
    a8e8:	46bd      	mov	sp, r7
    a8ea:	bd80      	pop	{r7, pc}
    a8ec:	0000a451 	.word	0x0000a451

0000a8f0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	b082      	sub	sp, #8
    a8f4:	af00      	add	r7, sp, #0
    a8f6:	4603      	mov	r3, r0
    a8f8:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    a8fa:	79fb      	ldrb	r3, [r7, #7]
    a8fc:	4619      	mov	r1, r3
    a8fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a902:	4b06      	ldr	r3, [pc, #24]	; (a91c <_usbd_ep_is_ctrl+0x2c>)
    a904:	4798      	blx	r3
    a906:	4603      	mov	r3, r0
    a908:	2b11      	cmp	r3, #17
    a90a:	bf0c      	ite	eq
    a90c:	2301      	moveq	r3, #1
    a90e:	2300      	movne	r3, #0
    a910:	b2db      	uxtb	r3, r3
}
    a912:	4618      	mov	r0, r3
    a914:	3708      	adds	r7, #8
    a916:	46bd      	mov	sp, r7
    a918:	bd80      	pop	{r7, pc}
    a91a:	bf00      	nop
    a91c:	0000a50b 	.word	0x0000a50b

0000a920 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    a920:	b580      	push	{r7, lr}
    a922:	b082      	sub	sp, #8
    a924:	af00      	add	r7, sp, #0
    a926:	4603      	mov	r3, r0
    a928:	71fb      	strb	r3, [r7, #7]
    a92a:	460b      	mov	r3, r1
    a92c:	71bb      	strb	r3, [r7, #6]
    a92e:	4613      	mov	r3, r2
    a930:	717b      	strb	r3, [r7, #5]
	if (st) {
    a932:	797b      	ldrb	r3, [r7, #5]
    a934:	2b00      	cmp	r3, #0
    a936:	d00b      	beq.n	a950 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a938:	79bb      	ldrb	r3, [r7, #6]
    a93a:	2210      	movs	r2, #16
    a93c:	fa02 f303 	lsl.w	r3, r2, r3
    a940:	b2da      	uxtb	r2, r3
    a942:	79fb      	ldrb	r3, [r7, #7]
    a944:	4619      	mov	r1, r3
    a946:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a94a:	4b09      	ldr	r3, [pc, #36]	; (a970 <_usbd_ep_set_stall+0x50>)
    a94c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    a94e:	e00a      	b.n	a966 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a950:	79bb      	ldrb	r3, [r7, #6]
    a952:	2210      	movs	r2, #16
    a954:	fa02 f303 	lsl.w	r3, r2, r3
    a958:	b2da      	uxtb	r2, r3
    a95a:	79fb      	ldrb	r3, [r7, #7]
    a95c:	4619      	mov	r1, r3
    a95e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a962:	4b04      	ldr	r3, [pc, #16]	; (a974 <_usbd_ep_set_stall+0x54>)
    a964:	4798      	blx	r3
}
    a966:	bf00      	nop
    a968:	3708      	adds	r7, #8
    a96a:	46bd      	mov	sp, r7
    a96c:	bd80      	pop	{r7, pc}
    a96e:	bf00      	nop
    a970:	0000a37d 	.word	0x0000a37d
    a974:	0000a3d1 	.word	0x0000a3d1

0000a978 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b084      	sub	sp, #16
    a97c:	af00      	add	r7, sp, #0
    a97e:	4603      	mov	r3, r0
    a980:	460a      	mov	r2, r1
    a982:	71fb      	strb	r3, [r7, #7]
    a984:	4613      	mov	r3, r2
    a986:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a988:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a98c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a98e:	79fb      	ldrb	r3, [r7, #7]
    a990:	4619      	mov	r1, r3
    a992:	68f8      	ldr	r0, [r7, #12]
    a994:	4b08      	ldr	r3, [pc, #32]	; (a9b8 <_usbd_ep_is_stalled+0x40>)
    a996:	4798      	blx	r3
    a998:	4603      	mov	r3, r0
    a99a:	4619      	mov	r1, r3
    a99c:	79bb      	ldrb	r3, [r7, #6]
    a99e:	2210      	movs	r2, #16
    a9a0:	fa02 f303 	lsl.w	r3, r2, r3
    a9a4:	400b      	ands	r3, r1
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	bf14      	ite	ne
    a9aa:	2301      	movne	r3, #1
    a9ac:	2300      	moveq	r3, #0
    a9ae:	b2db      	uxtb	r3, r3
}
    a9b0:	4618      	mov	r0, r3
    a9b2:	3710      	adds	r7, #16
    a9b4:	46bd      	mov	sp, r7
    a9b6:	bd80      	pop	{r7, pc}
    a9b8:	0000a3a9 	.word	0x0000a3a9

0000a9bc <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    a9bc:	b580      	push	{r7, lr}
    a9be:	b084      	sub	sp, #16
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	4603      	mov	r3, r0
    a9c4:	460a      	mov	r2, r1
    a9c6:	71fb      	strb	r3, [r7, #7]
    a9c8:	4613      	mov	r3, r2
    a9ca:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a9cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a9d0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a9d2:	79fb      	ldrb	r3, [r7, #7]
    a9d4:	4619      	mov	r1, r3
    a9d6:	68f8      	ldr	r0, [r7, #12]
    a9d8:	4b08      	ldr	r3, [pc, #32]	; (a9fc <_usbd_ep_is_stall_sent+0x40>)
    a9da:	4798      	blx	r3
    a9dc:	4603      	mov	r3, r0
    a9de:	4619      	mov	r1, r3
    a9e0:	79bb      	ldrb	r3, [r7, #6]
    a9e2:	2220      	movs	r2, #32
    a9e4:	fa02 f303 	lsl.w	r3, r2, r3
    a9e8:	400b      	ands	r3, r1
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	bf14      	ite	ne
    a9ee:	2301      	movne	r3, #1
    a9f0:	2300      	moveq	r3, #0
    a9f2:	b2db      	uxtb	r3, r3
}
    a9f4:	4618      	mov	r0, r3
    a9f6:	3710      	adds	r7, #16
    a9f8:	46bd      	mov	sp, r7
    a9fa:	bd80      	pop	{r7, pc}
    a9fc:	0000a329 	.word	0x0000a329

0000aa00 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    aa00:	b580      	push	{r7, lr}
    aa02:	b082      	sub	sp, #8
    aa04:	af00      	add	r7, sp, #0
    aa06:	4603      	mov	r3, r0
    aa08:	460a      	mov	r2, r1
    aa0a:	71fb      	strb	r3, [r7, #7]
    aa0c:	4613      	mov	r3, r2
    aa0e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    aa10:	79bb      	ldrb	r3, [r7, #6]
    aa12:	2220      	movs	r2, #32
    aa14:	409a      	lsls	r2, r3
    aa16:	79fb      	ldrb	r3, [r7, #7]
    aa18:	4611      	mov	r1, r2
    aa1a:	4618      	mov	r0, r3
    aa1c:	4b02      	ldr	r3, [pc, #8]	; (aa28 <_usbd_ep_ack_stall+0x28>)
    aa1e:	4798      	blx	r3
}
    aa20:	bf00      	nop
    aa22:	3708      	adds	r7, #8
    aa24:	46bd      	mov	sp, r7
    aa26:	bd80      	pop	{r7, pc}
    aa28:	0000a879 	.word	0x0000a879

0000aa2c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    aa2c:	b580      	push	{r7, lr}
    aa2e:	b082      	sub	sp, #8
    aa30:	af00      	add	r7, sp, #0
    aa32:	4603      	mov	r3, r0
    aa34:	71fb      	strb	r3, [r7, #7]
    aa36:	460b      	mov	r3, r1
    aa38:	71bb      	strb	r3, [r7, #6]
    aa3a:	4613      	mov	r3, r2
    aa3c:	717b      	strb	r3, [r7, #5]
	if (en) {
    aa3e:	797b      	ldrb	r3, [r7, #5]
    aa40:	2b00      	cmp	r3, #0
    aa42:	d008      	beq.n	aa56 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    aa44:	79bb      	ldrb	r3, [r7, #6]
    aa46:	2220      	movs	r2, #32
    aa48:	409a      	lsls	r2, r3
    aa4a:	79fb      	ldrb	r3, [r7, #7]
    aa4c:	4611      	mov	r1, r2
    aa4e:	4618      	mov	r0, r3
    aa50:	4b07      	ldr	r3, [pc, #28]	; (aa70 <_usbd_ep_int_stall_en+0x44>)
    aa52:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    aa54:	e007      	b.n	aa66 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    aa56:	79bb      	ldrb	r3, [r7, #6]
    aa58:	2220      	movs	r2, #32
    aa5a:	409a      	lsls	r2, r3
    aa5c:	79fb      	ldrb	r3, [r7, #7]
    aa5e:	4611      	mov	r1, r2
    aa60:	4618      	mov	r0, r3
    aa62:	4b04      	ldr	r3, [pc, #16]	; (aa74 <_usbd_ep_int_stall_en+0x48>)
    aa64:	4798      	blx	r3
}
    aa66:	bf00      	nop
    aa68:	3708      	adds	r7, #8
    aa6a:	46bd      	mov	sp, r7
    aa6c:	bd80      	pop	{r7, pc}
    aa6e:	bf00      	nop
    aa70:	0000a8a1 	.word	0x0000a8a1
    aa74:	0000a8c9 	.word	0x0000a8c9

0000aa78 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    aa78:	b580      	push	{r7, lr}
    aa7a:	b082      	sub	sp, #8
    aa7c:	af00      	add	r7, sp, #0
    aa7e:	4603      	mov	r3, r0
    aa80:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    aa82:	79fb      	ldrb	r3, [r7, #7]
    aa84:	4619      	mov	r1, r3
    aa86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa8a:	4b03      	ldr	r3, [pc, #12]	; (aa98 <_usbd_ep_stop_setup+0x20>)
    aa8c:	4798      	blx	r3
}
    aa8e:	bf00      	nop
    aa90:	3708      	adds	r7, #8
    aa92:	46bd      	mov	sp, r7
    aa94:	bd80      	pop	{r7, pc}
    aa96:	bf00      	nop
    aa98:	0000a3fd 	.word	0x0000a3fd

0000aa9c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    aa9c:	b580      	push	{r7, lr}
    aa9e:	b082      	sub	sp, #8
    aaa0:	af00      	add	r7, sp, #0
    aaa2:	4603      	mov	r3, r0
    aaa4:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    aaa6:	79fb      	ldrb	r3, [r7, #7]
    aaa8:	2210      	movs	r2, #16
    aaaa:	4619      	mov	r1, r3
    aaac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aab0:	4b05      	ldr	r3, [pc, #20]	; (aac8 <_usbd_ep_is_setup+0x2c>)
    aab2:	4798      	blx	r3
    aab4:	4603      	mov	r3, r0
    aab6:	2b00      	cmp	r3, #0
    aab8:	bf14      	ite	ne
    aaba:	2301      	movne	r3, #1
    aabc:	2300      	moveq	r3, #0
    aabe:	b2db      	uxtb	r3, r3
}
    aac0:	4618      	mov	r0, r3
    aac2:	3708      	adds	r7, #8
    aac4:	46bd      	mov	sp, r7
    aac6:	bd80      	pop	{r7, pc}
    aac8:	0000a2f3 	.word	0x0000a2f3

0000aacc <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    aacc:	b580      	push	{r7, lr}
    aace:	b082      	sub	sp, #8
    aad0:	af00      	add	r7, sp, #0
    aad2:	4603      	mov	r3, r0
    aad4:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    aad6:	79fb      	ldrb	r3, [r7, #7]
    aad8:	2110      	movs	r1, #16
    aada:	4618      	mov	r0, r3
    aadc:	4b02      	ldr	r3, [pc, #8]	; (aae8 <_usbd_ep_ack_setup+0x1c>)
    aade:	4798      	blx	r3
}
    aae0:	bf00      	nop
    aae2:	3708      	adds	r7, #8
    aae4:	46bd      	mov	sp, r7
    aae6:	bd80      	pop	{r7, pc}
    aae8:	0000a879 	.word	0x0000a879

0000aaec <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    aaec:	b580      	push	{r7, lr}
    aaee:	b082      	sub	sp, #8
    aaf0:	af00      	add	r7, sp, #0
    aaf2:	4603      	mov	r3, r0
    aaf4:	71fb      	strb	r3, [r7, #7]
    aaf6:	460b      	mov	r3, r1
    aaf8:	71bb      	strb	r3, [r7, #6]
    aafa:	4613      	mov	r3, r2
    aafc:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    aafe:	797b      	ldrb	r3, [r7, #5]
    ab00:	2b00      	cmp	r3, #0
    ab02:	d00b      	beq.n	ab1c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ab04:	79bb      	ldrb	r3, [r7, #6]
    ab06:	2201      	movs	r2, #1
    ab08:	fa02 f303 	lsl.w	r3, r2, r3
    ab0c:	b2da      	uxtb	r2, r3
    ab0e:	79fb      	ldrb	r3, [r7, #7]
    ab10:	4619      	mov	r1, r3
    ab12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab16:	4b09      	ldr	r3, [pc, #36]	; (ab3c <_usbd_ep_set_toggle+0x50>)
    ab18:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    ab1a:	e00a      	b.n	ab32 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ab1c:	79bb      	ldrb	r3, [r7, #6]
    ab1e:	2201      	movs	r2, #1
    ab20:	fa02 f303 	lsl.w	r3, r2, r3
    ab24:	b2da      	uxtb	r2, r3
    ab26:	79fb      	ldrb	r3, [r7, #7]
    ab28:	4619      	mov	r1, r3
    ab2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab2e:	4b04      	ldr	r3, [pc, #16]	; (ab40 <_usbd_ep_set_toggle+0x54>)
    ab30:	4798      	blx	r3
}
    ab32:	bf00      	nop
    ab34:	3708      	adds	r7, #8
    ab36:	46bd      	mov	sp, r7
    ab38:	bd80      	pop	{r7, pc}
    ab3a:	bf00      	nop
    ab3c:	0000a37d 	.word	0x0000a37d
    ab40:	0000a3d1 	.word	0x0000a3d1

0000ab44 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    ab44:	b580      	push	{r7, lr}
    ab46:	b082      	sub	sp, #8
    ab48:	af00      	add	r7, sp, #0
    ab4a:	4603      	mov	r3, r0
    ab4c:	460a      	mov	r2, r1
    ab4e:	71fb      	strb	r3, [r7, #7]
    ab50:	4613      	mov	r3, r2
    ab52:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    ab54:	79bb      	ldrb	r3, [r7, #6]
    ab56:	2201      	movs	r2, #1
    ab58:	409a      	lsls	r2, r3
    ab5a:	79fb      	ldrb	r3, [r7, #7]
    ab5c:	4611      	mov	r1, r2
    ab5e:	4618      	mov	r0, r3
    ab60:	4b02      	ldr	r3, [pc, #8]	; (ab6c <_usbd_ep_ack_io_cpt+0x28>)
    ab62:	4798      	blx	r3
}
    ab64:	bf00      	nop
    ab66:	3708      	adds	r7, #8
    ab68:	46bd      	mov	sp, r7
    ab6a:	bd80      	pop	{r7, pc}
    ab6c:	0000a879 	.word	0x0000a879

0000ab70 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    ab70:	b480      	push	{r7}
    ab72:	b085      	sub	sp, #20
    ab74:	af00      	add	r7, sp, #0
    ab76:	4603      	mov	r3, r0
    ab78:	603a      	str	r2, [r7, #0]
    ab7a:	71fb      	strb	r3, [r7, #7]
    ab7c:	460b      	mov	r3, r1
    ab7e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ab80:	79fa      	ldrb	r2, [r7, #7]
    ab82:	79bb      	ldrb	r3, [r7, #6]
    ab84:	0052      	lsls	r2, r2, #1
    ab86:	4413      	add	r3, r2
    ab88:	011b      	lsls	r3, r3, #4
    ab8a:	4a06      	ldr	r2, [pc, #24]	; (aba4 <_usbd_ep_set_buf+0x34>)
    ab8c:	4413      	add	r3, r2
    ab8e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    ab90:	68fb      	ldr	r3, [r7, #12]
    ab92:	683a      	ldr	r2, [r7, #0]
    ab94:	601a      	str	r2, [r3, #0]
}
    ab96:	bf00      	nop
    ab98:	3714      	adds	r7, #20
    ab9a:	46bd      	mov	sp, r7
    ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aba0:	4770      	bx	lr
    aba2:	bf00      	nop
    aba4:	20002640 	.word	0x20002640

0000aba8 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    aba8:	b480      	push	{r7}
    abaa:	b085      	sub	sp, #20
    abac:	af00      	add	r7, sp, #0
    abae:	4603      	mov	r3, r0
    abb0:	71fb      	strb	r3, [r7, #7]
    abb2:	460b      	mov	r3, r1
    abb4:	71bb      	strb	r3, [r7, #6]
    abb6:	4613      	mov	r3, r2
    abb8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    abba:	79fa      	ldrb	r2, [r7, #7]
    abbc:	79bb      	ldrb	r3, [r7, #6]
    abbe:	0052      	lsls	r2, r2, #1
    abc0:	4413      	add	r3, r2
    abc2:	011b      	lsls	r3, r3, #4
    abc4:	4a08      	ldr	r2, [pc, #32]	; (abe8 <_usbd_ep_set_in_count+0x40>)
    abc6:	4413      	add	r3, r2
    abc8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    abca:	88bb      	ldrh	r3, [r7, #4]
    abcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    abd0:	b299      	uxth	r1, r3
    abd2:	68fa      	ldr	r2, [r7, #12]
    abd4:	6853      	ldr	r3, [r2, #4]
    abd6:	f361 339b 	bfi	r3, r1, #14, #14
    abda:	6053      	str	r3, [r2, #4]
}
    abdc:	bf00      	nop
    abde:	3714      	adds	r7, #20
    abe0:	46bd      	mov	sp, r7
    abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    abe6:	4770      	bx	lr
    abe8:	20002640 	.word	0x20002640

0000abec <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    abec:	b480      	push	{r7}
    abee:	b085      	sub	sp, #20
    abf0:	af00      	add	r7, sp, #0
    abf2:	4603      	mov	r3, r0
    abf4:	71fb      	strb	r3, [r7, #7]
    abf6:	460b      	mov	r3, r1
    abf8:	71bb      	strb	r3, [r7, #6]
    abfa:	4613      	mov	r3, r2
    abfc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    abfe:	79fa      	ldrb	r2, [r7, #7]
    ac00:	79bb      	ldrb	r3, [r7, #6]
    ac02:	0052      	lsls	r2, r2, #1
    ac04:	4413      	add	r3, r2
    ac06:	011b      	lsls	r3, r3, #4
    ac08:	4a08      	ldr	r2, [pc, #32]	; (ac2c <_usbd_ep_set_in_size+0x40>)
    ac0a:	4413      	add	r3, r2
    ac0c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    ac0e:	88bb      	ldrh	r3, [r7, #4]
    ac10:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ac14:	b299      	uxth	r1, r3
    ac16:	68fa      	ldr	r2, [r7, #12]
    ac18:	6853      	ldr	r3, [r2, #4]
    ac1a:	f361 030d 	bfi	r3, r1, #0, #14
    ac1e:	6053      	str	r3, [r2, #4]
}
    ac20:	bf00      	nop
    ac22:	3714      	adds	r7, #20
    ac24:	46bd      	mov	sp, r7
    ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac2a:	4770      	bx	lr
    ac2c:	20002640 	.word	0x20002640

0000ac30 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ac30:	b480      	push	{r7}
    ac32:	b085      	sub	sp, #20
    ac34:	af00      	add	r7, sp, #0
    ac36:	4603      	mov	r3, r0
    ac38:	71fb      	strb	r3, [r7, #7]
    ac3a:	460b      	mov	r3, r1
    ac3c:	71bb      	strb	r3, [r7, #6]
    ac3e:	4613      	mov	r3, r2
    ac40:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ac42:	79fa      	ldrb	r2, [r7, #7]
    ac44:	79bb      	ldrb	r3, [r7, #6]
    ac46:	0052      	lsls	r2, r2, #1
    ac48:	4413      	add	r3, r2
    ac4a:	011b      	lsls	r3, r3, #4
    ac4c:	4a08      	ldr	r2, [pc, #32]	; (ac70 <_usbd_ep_set_out_count+0x40>)
    ac4e:	4413      	add	r3, r2
    ac50:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ac52:	88bb      	ldrh	r3, [r7, #4]
    ac54:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ac58:	b299      	uxth	r1, r3
    ac5a:	68fa      	ldr	r2, [r7, #12]
    ac5c:	6853      	ldr	r3, [r2, #4]
    ac5e:	f361 030d 	bfi	r3, r1, #0, #14
    ac62:	6053      	str	r3, [r2, #4]
}
    ac64:	bf00      	nop
    ac66:	3714      	adds	r7, #20
    ac68:	46bd      	mov	sp, r7
    ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac6e:	4770      	bx	lr
    ac70:	20002640 	.word	0x20002640

0000ac74 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ac74:	b480      	push	{r7}
    ac76:	b085      	sub	sp, #20
    ac78:	af00      	add	r7, sp, #0
    ac7a:	4603      	mov	r3, r0
    ac7c:	71fb      	strb	r3, [r7, #7]
    ac7e:	460b      	mov	r3, r1
    ac80:	71bb      	strb	r3, [r7, #6]
    ac82:	4613      	mov	r3, r2
    ac84:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ac86:	79fa      	ldrb	r2, [r7, #7]
    ac88:	79bb      	ldrb	r3, [r7, #6]
    ac8a:	0052      	lsls	r2, r2, #1
    ac8c:	4413      	add	r3, r2
    ac8e:	011b      	lsls	r3, r3, #4
    ac90:	4a08      	ldr	r2, [pc, #32]	; (acb4 <_usbd_ep_set_out_size+0x40>)
    ac92:	4413      	add	r3, r2
    ac94:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ac96:	88bb      	ldrh	r3, [r7, #4]
    ac98:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ac9c:	b299      	uxth	r1, r3
    ac9e:	68fa      	ldr	r2, [r7, #12]
    aca0:	6853      	ldr	r3, [r2, #4]
    aca2:	f361 339b 	bfi	r3, r1, #14, #14
    aca6:	6053      	str	r3, [r2, #4]
}
    aca8:	bf00      	nop
    acaa:	3714      	adds	r7, #20
    acac:	46bd      	mov	sp, r7
    acae:	f85d 7b04 	ldr.w	r7, [sp], #4
    acb2:	4770      	bx	lr
    acb4:	20002640 	.word	0x20002640

0000acb8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    acb8:	b580      	push	{r7, lr}
    acba:	b084      	sub	sp, #16
    acbc:	af00      	add	r7, sp, #0
    acbe:	60ba      	str	r2, [r7, #8]
    acc0:	607b      	str	r3, [r7, #4]
    acc2:	4603      	mov	r3, r0
    acc4:	73fb      	strb	r3, [r7, #15]
    acc6:	460b      	mov	r3, r1
    acc8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    acca:	68bb      	ldr	r3, [r7, #8]
    accc:	b29a      	uxth	r2, r3
    acce:	7bb9      	ldrb	r1, [r7, #14]
    acd0:	7bfb      	ldrb	r3, [r7, #15]
    acd2:	4618      	mov	r0, r3
    acd4:	4b06      	ldr	r3, [pc, #24]	; (acf0 <_usbd_ep_set_in_trans+0x38>)
    acd6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    acd8:	687b      	ldr	r3, [r7, #4]
    acda:	b29a      	uxth	r2, r3
    acdc:	7bb9      	ldrb	r1, [r7, #14]
    acde:	7bfb      	ldrb	r3, [r7, #15]
    ace0:	4618      	mov	r0, r3
    ace2:	4b04      	ldr	r3, [pc, #16]	; (acf4 <_usbd_ep_set_in_trans+0x3c>)
    ace4:	4798      	blx	r3
}
    ace6:	bf00      	nop
    ace8:	3710      	adds	r7, #16
    acea:	46bd      	mov	sp, r7
    acec:	bd80      	pop	{r7, pc}
    acee:	bf00      	nop
    acf0:	0000abed 	.word	0x0000abed
    acf4:	0000aba9 	.word	0x0000aba9

0000acf8 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    acf8:	b580      	push	{r7, lr}
    acfa:	b084      	sub	sp, #16
    acfc:	af00      	add	r7, sp, #0
    acfe:	60ba      	str	r2, [r7, #8]
    ad00:	607b      	str	r3, [r7, #4]
    ad02:	4603      	mov	r3, r0
    ad04:	73fb      	strb	r3, [r7, #15]
    ad06:	460b      	mov	r3, r1
    ad08:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    ad0a:	68bb      	ldr	r3, [r7, #8]
    ad0c:	b29a      	uxth	r2, r3
    ad0e:	7bb9      	ldrb	r1, [r7, #14]
    ad10:	7bfb      	ldrb	r3, [r7, #15]
    ad12:	4618      	mov	r0, r3
    ad14:	4b06      	ldr	r3, [pc, #24]	; (ad30 <_usbd_ep_set_out_trans+0x38>)
    ad16:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    ad18:	687b      	ldr	r3, [r7, #4]
    ad1a:	b29a      	uxth	r2, r3
    ad1c:	7bb9      	ldrb	r1, [r7, #14]
    ad1e:	7bfb      	ldrb	r3, [r7, #15]
    ad20:	4618      	mov	r0, r3
    ad22:	4b04      	ldr	r3, [pc, #16]	; (ad34 <_usbd_ep_set_out_trans+0x3c>)
    ad24:	4798      	blx	r3
}
    ad26:	bf00      	nop
    ad28:	3710      	adds	r7, #16
    ad2a:	46bd      	mov	sp, r7
    ad2c:	bd80      	pop	{r7, pc}
    ad2e:	bf00      	nop
    ad30:	0000ac75 	.word	0x0000ac75
    ad34:	0000ac31 	.word	0x0000ac31

0000ad38 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ad38:	b480      	push	{r7}
    ad3a:	b085      	sub	sp, #20
    ad3c:	af00      	add	r7, sp, #0
    ad3e:	4603      	mov	r3, r0
    ad40:	460a      	mov	r2, r1
    ad42:	71fb      	strb	r3, [r7, #7]
    ad44:	4613      	mov	r3, r2
    ad46:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad48:	79fa      	ldrb	r2, [r7, #7]
    ad4a:	79bb      	ldrb	r3, [r7, #6]
    ad4c:	0052      	lsls	r2, r2, #1
    ad4e:	4413      	add	r3, r2
    ad50:	011b      	lsls	r3, r3, #4
    ad52:	4a06      	ldr	r2, [pc, #24]	; (ad6c <_usbd_ep_clear_bank_status+0x34>)
    ad54:	4413      	add	r3, r2
    ad56:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ad58:	68fb      	ldr	r3, [r7, #12]
    ad5a:	2200      	movs	r2, #0
    ad5c:	729a      	strb	r2, [r3, #10]
}
    ad5e:	bf00      	nop
    ad60:	3714      	adds	r7, #20
    ad62:	46bd      	mov	sp, r7
    ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad68:	4770      	bx	lr
    ad6a:	bf00      	nop
    ad6c:	20002640 	.word	0x20002640

0000ad70 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ad70:	b580      	push	{r7, lr}
    ad72:	b082      	sub	sp, #8
    ad74:	af00      	add	r7, sp, #0
    ad76:	4603      	mov	r3, r0
    ad78:	71fb      	strb	r3, [r7, #7]
    ad7a:	460b      	mov	r3, r1
    ad7c:	71bb      	strb	r3, [r7, #6]
    ad7e:	4613      	mov	r3, r2
    ad80:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ad82:	797b      	ldrb	r3, [r7, #5]
    ad84:	2b00      	cmp	r3, #0
    ad86:	d00b      	beq.n	ada0 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ad88:	79bb      	ldrb	r3, [r7, #6]
    ad8a:	2240      	movs	r2, #64	; 0x40
    ad8c:	fa02 f303 	lsl.w	r3, r2, r3
    ad90:	b2da      	uxtb	r2, r3
    ad92:	79fb      	ldrb	r3, [r7, #7]
    ad94:	4619      	mov	r1, r3
    ad96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad9a:	4b09      	ldr	r3, [pc, #36]	; (adc0 <_usbd_ep_set_in_rdy+0x50>)
    ad9c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ad9e:	e00a      	b.n	adb6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ada0:	79bb      	ldrb	r3, [r7, #6]
    ada2:	2240      	movs	r2, #64	; 0x40
    ada4:	fa02 f303 	lsl.w	r3, r2, r3
    ada8:	b2da      	uxtb	r2, r3
    adaa:	79fb      	ldrb	r3, [r7, #7]
    adac:	4619      	mov	r1, r3
    adae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adb2:	4b04      	ldr	r3, [pc, #16]	; (adc4 <_usbd_ep_set_in_rdy+0x54>)
    adb4:	4798      	blx	r3
}
    adb6:	bf00      	nop
    adb8:	3708      	adds	r7, #8
    adba:	46bd      	mov	sp, r7
    adbc:	bd80      	pop	{r7, pc}
    adbe:	bf00      	nop
    adc0:	0000a37d 	.word	0x0000a37d
    adc4:	0000a3d1 	.word	0x0000a3d1

0000adc8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b082      	sub	sp, #8
    adcc:	af00      	add	r7, sp, #0
    adce:	4603      	mov	r3, r0
    add0:	71fb      	strb	r3, [r7, #7]
    add2:	460b      	mov	r3, r1
    add4:	71bb      	strb	r3, [r7, #6]
    add6:	4613      	mov	r3, r2
    add8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    adda:	797b      	ldrb	r3, [r7, #5]
    addc:	2b00      	cmp	r3, #0
    adde:	d00b      	beq.n	adf8 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ade0:	79bb      	ldrb	r3, [r7, #6]
    ade2:	2240      	movs	r2, #64	; 0x40
    ade4:	fa02 f303 	lsl.w	r3, r2, r3
    ade8:	b2da      	uxtb	r2, r3
    adea:	79fb      	ldrb	r3, [r7, #7]
    adec:	4619      	mov	r1, r3
    adee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adf2:	4b09      	ldr	r3, [pc, #36]	; (ae18 <_usbd_ep_set_out_rdy+0x50>)
    adf4:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    adf6:	e00a      	b.n	ae0e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    adf8:	79bb      	ldrb	r3, [r7, #6]
    adfa:	2240      	movs	r2, #64	; 0x40
    adfc:	fa02 f303 	lsl.w	r3, r2, r3
    ae00:	b2da      	uxtb	r2, r3
    ae02:	79fb      	ldrb	r3, [r7, #7]
    ae04:	4619      	mov	r1, r3
    ae06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae0a:	4b04      	ldr	r3, [pc, #16]	; (ae1c <_usbd_ep_set_out_rdy+0x54>)
    ae0c:	4798      	blx	r3
}
    ae0e:	bf00      	nop
    ae10:	3708      	adds	r7, #8
    ae12:	46bd      	mov	sp, r7
    ae14:	bd80      	pop	{r7, pc}
    ae16:	bf00      	nop
    ae18:	0000a3d1 	.word	0x0000a3d1
    ae1c:	0000a37d 	.word	0x0000a37d

0000ae20 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    ae20:	b480      	push	{r7}
    ae22:	b083      	sub	sp, #12
    ae24:	af00      	add	r7, sp, #0
    ae26:	4603      	mov	r3, r0
    ae28:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ae2a:	88fb      	ldrh	r3, [r7, #6]
    ae2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ae30:	d820      	bhi.n	ae74 <_usbd_ep_pcksize_size+0x54>
    ae32:	88fb      	ldrh	r3, [r7, #6]
    ae34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ae38:	d81a      	bhi.n	ae70 <_usbd_ep_pcksize_size+0x50>
    ae3a:	88fb      	ldrh	r3, [r7, #6]
    ae3c:	2b80      	cmp	r3, #128	; 0x80
    ae3e:	d815      	bhi.n	ae6c <_usbd_ep_pcksize_size+0x4c>
    ae40:	88fb      	ldrh	r3, [r7, #6]
    ae42:	2b40      	cmp	r3, #64	; 0x40
    ae44:	d810      	bhi.n	ae68 <_usbd_ep_pcksize_size+0x48>
    ae46:	88fb      	ldrh	r3, [r7, #6]
    ae48:	2b20      	cmp	r3, #32
    ae4a:	d80b      	bhi.n	ae64 <_usbd_ep_pcksize_size+0x44>
    ae4c:	88fb      	ldrh	r3, [r7, #6]
    ae4e:	2b10      	cmp	r3, #16
    ae50:	d806      	bhi.n	ae60 <_usbd_ep_pcksize_size+0x40>
    ae52:	88fb      	ldrh	r3, [r7, #6]
    ae54:	2b08      	cmp	r3, #8
    ae56:	bf8c      	ite	hi
    ae58:	2301      	movhi	r3, #1
    ae5a:	2300      	movls	r3, #0
    ae5c:	b2db      	uxtb	r3, r3
    ae5e:	e00a      	b.n	ae76 <_usbd_ep_pcksize_size+0x56>
    ae60:	2302      	movs	r3, #2
    ae62:	e008      	b.n	ae76 <_usbd_ep_pcksize_size+0x56>
    ae64:	2303      	movs	r3, #3
    ae66:	e006      	b.n	ae76 <_usbd_ep_pcksize_size+0x56>
    ae68:	2304      	movs	r3, #4
    ae6a:	e004      	b.n	ae76 <_usbd_ep_pcksize_size+0x56>
    ae6c:	2305      	movs	r3, #5
    ae6e:	e002      	b.n	ae76 <_usbd_ep_pcksize_size+0x56>
    ae70:	2306      	movs	r3, #6
    ae72:	e000      	b.n	ae76 <_usbd_ep_pcksize_size+0x56>
    ae74:	2307      	movs	r3, #7
}
    ae76:	4618      	mov	r0, r3
    ae78:	370c      	adds	r7, #12
    ae7a:	46bd      	mov	sp, r7
    ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae80:	4770      	bx	lr
	...

0000ae84 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    ae84:	b480      	push	{r7}
    ae86:	b085      	sub	sp, #20
    ae88:	af00      	add	r7, sp, #0
    ae8a:	4603      	mov	r3, r0
    ae8c:	460a      	mov	r2, r1
    ae8e:	71fb      	strb	r3, [r7, #7]
    ae90:	4613      	mov	r3, r2
    ae92:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    ae94:	79fb      	ldrb	r3, [r7, #7]
    ae96:	2b00      	cmp	r3, #0
    ae98:	d008      	beq.n	aeac <_usb_d_dev_ept+0x28>
    ae9a:	79bb      	ldrb	r3, [r7, #6]
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d003      	beq.n	aea8 <_usb_d_dev_ept+0x24>
    aea0:	79fb      	ldrb	r3, [r7, #7]
    aea2:	3304      	adds	r3, #4
    aea4:	b2db      	uxtb	r3, r3
    aea6:	e002      	b.n	aeae <_usb_d_dev_ept+0x2a>
    aea8:	79fb      	ldrb	r3, [r7, #7]
    aeaa:	e000      	b.n	aeae <_usb_d_dev_ept+0x2a>
    aeac:	2300      	movs	r3, #0
    aeae:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    aeb0:	7bfa      	ldrb	r2, [r7, #15]
    aeb2:	4613      	mov	r3, r2
    aeb4:	009b      	lsls	r3, r3, #2
    aeb6:	4413      	add	r3, r2
    aeb8:	009b      	lsls	r3, r3, #2
    aeba:	3310      	adds	r3, #16
    aebc:	4a04      	ldr	r2, [pc, #16]	; (aed0 <_usb_d_dev_ept+0x4c>)
    aebe:	4413      	add	r3, r2
    aec0:	3304      	adds	r3, #4
}
    aec2:	4618      	mov	r0, r3
    aec4:	3714      	adds	r7, #20
    aec6:	46bd      	mov	sp, r7
    aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aecc:	4770      	bx	lr
    aece:	bf00      	nop
    aed0:	20002578 	.word	0x20002578

0000aed4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    aed4:	b580      	push	{r7, lr}
    aed6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    aed8:	2104      	movs	r1, #4
    aeda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aede:	4b03      	ldr	r3, [pc, #12]	; (aeec <_usb_d_dev_sof+0x18>)
    aee0:	4798      	blx	r3
	dev_inst.callbacks.sof();
    aee2:	4b03      	ldr	r3, [pc, #12]	; (aef0 <_usb_d_dev_sof+0x1c>)
    aee4:	681b      	ldr	r3, [r3, #0]
    aee6:	4798      	blx	r3
}
    aee8:	bf00      	nop
    aeea:	bd80      	pop	{r7, pc}
    aeec:	0000a54b 	.word	0x0000a54b
    aef0:	20002578 	.word	0x20002578

0000aef4 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	b084      	sub	sp, #16
    aef8:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    aefa:	2300      	movs	r3, #0
    aefc:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    aefe:	f240 2101 	movw	r1, #513	; 0x201
    af02:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af06:	4b1a      	ldr	r3, [pc, #104]	; (af70 <_usb_d_dev_lpmsusp+0x7c>)
    af08:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    af0a:	f240 2101 	movw	r1, #513	; 0x201
    af0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af12:	4b18      	ldr	r3, [pc, #96]	; (af74 <_usb_d_dev_lpmsusp+0x80>)
    af14:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    af16:	2170      	movs	r1, #112	; 0x70
    af18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af1c:	4b16      	ldr	r3, [pc, #88]	; (af78 <_usb_d_dev_lpmsusp+0x84>)
    af1e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    af20:	2300      	movs	r3, #0
    af22:	73fb      	strb	r3, [r7, #15]
    af24:	e018      	b.n	af58 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    af26:	7bfb      	ldrb	r3, [r7, #15]
    af28:	015b      	lsls	r3, r3, #5
    af2a:	4a14      	ldr	r2, [pc, #80]	; (af7c <_usb_d_dev_lpmsusp+0x88>)
    af2c:	4413      	add	r3, r2
    af2e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	891b      	ldrh	r3, [r3, #8]
    af34:	f3c3 0303 	ubfx	r3, r3, #0, #4
    af38:	b2db      	uxtb	r3, r3
    af3a:	2b03      	cmp	r3, #3
    af3c:	d109      	bne.n	af52 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    af3e:	687b      	ldr	r3, [r7, #4]
    af40:	891b      	ldrh	r3, [r3, #8]
    af42:	f3c3 130a 	ubfx	r3, r3, #4, #11
    af46:	b29b      	uxth	r3, r3
    af48:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    af4a:	687b      	ldr	r3, [r7, #4]
    af4c:	2200      	movs	r2, #0
    af4e:	811a      	strh	r2, [r3, #8]
			break;
    af50:	e005      	b.n	af5e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    af52:	7bfb      	ldrb	r3, [r7, #15]
    af54:	3301      	adds	r3, #1
    af56:	73fb      	strb	r3, [r7, #15]
    af58:	7bfb      	ldrb	r3, [r7, #15]
    af5a:	2b03      	cmp	r3, #3
    af5c:	d9e3      	bls.n	af26 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    af5e:	4b08      	ldr	r3, [pc, #32]	; (af80 <_usb_d_dev_lpmsusp+0x8c>)
    af60:	685b      	ldr	r3, [r3, #4]
    af62:	68b9      	ldr	r1, [r7, #8]
    af64:	2003      	movs	r0, #3
    af66:	4798      	blx	r3
}
    af68:	bf00      	nop
    af6a:	3710      	adds	r7, #16
    af6c:	46bd      	mov	sp, r7
    af6e:	bd80      	pop	{r7, pc}
    af70:	0000a54b 	.word	0x0000a54b
    af74:	0000a5a1 	.word	0x0000a5a1
    af78:	0000a569 	.word	0x0000a569
    af7c:	20002640 	.word	0x20002640
    af80:	20002578 	.word	0x20002578

0000af84 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    af84:	b580      	push	{r7, lr}
    af86:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    af88:	2180      	movs	r1, #128	; 0x80
    af8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af8e:	4b04      	ldr	r3, [pc, #16]	; (afa0 <_usb_d_dev_ramerr+0x1c>)
    af90:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    af92:	4b04      	ldr	r3, [pc, #16]	; (afa4 <_usb_d_dev_ramerr+0x20>)
    af94:	685b      	ldr	r3, [r3, #4]
    af96:	2100      	movs	r1, #0
    af98:	2005      	movs	r0, #5
    af9a:	4798      	blx	r3
}
    af9c:	bf00      	nop
    af9e:	bd80      	pop	{r7, pc}
    afa0:	0000a54b 	.word	0x0000a54b
    afa4:	20002578 	.word	0x20002578

0000afa8 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    afa8:	b580      	push	{r7, lr}
    afaa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    afac:	2170      	movs	r1, #112	; 0x70
    afae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afb2:	4b0b      	ldr	r3, [pc, #44]	; (afe0 <_usb_d_dev_wakeup+0x38>)
    afb4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    afb6:	2170      	movs	r1, #112	; 0x70
    afb8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afbc:	4b09      	ldr	r3, [pc, #36]	; (afe4 <_usb_d_dev_wakeup+0x3c>)
    afbe:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    afc0:	f240 2101 	movw	r1, #513	; 0x201
    afc4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afc8:	4b07      	ldr	r3, [pc, #28]	; (afe8 <_usb_d_dev_wakeup+0x40>)
    afca:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    afcc:	2000      	movs	r0, #0
    afce:	4b07      	ldr	r3, [pc, #28]	; (afec <_usb_d_dev_wakeup+0x44>)
    afd0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    afd2:	4b07      	ldr	r3, [pc, #28]	; (aff0 <_usb_d_dev_wakeup+0x48>)
    afd4:	685b      	ldr	r3, [r3, #4]
    afd6:	2100      	movs	r1, #0
    afd8:	2002      	movs	r0, #2
    afda:	4798      	blx	r3
}
    afdc:	bf00      	nop
    afde:	bd80      	pop	{r7, pc}
    afe0:	0000a54b 	.word	0x0000a54b
    afe4:	0000a5a1 	.word	0x0000a5a1
    afe8:	0000a569 	.word	0x0000a569
    afec:	0000a849 	.word	0x0000a849
    aff0:	20002578 	.word	0x20002578

0000aff4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    aff4:	b580      	push	{r7, lr}
    aff6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    aff8:	2200      	movs	r2, #0
    affa:	2100      	movs	r1, #0
    affc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b000:	4b0d      	ldr	r3, [pc, #52]	; (b038 <_usb_d_dev_reset+0x44>)
    b002:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    b004:	2108      	movs	r1, #8
    b006:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b00a:	4b0c      	ldr	r3, [pc, #48]	; (b03c <_usb_d_dev_reset+0x48>)
    b00c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b00e:	2170      	movs	r1, #112	; 0x70
    b010:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b014:	4b0a      	ldr	r3, [pc, #40]	; (b040 <_usb_d_dev_reset+0x4c>)
    b016:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b018:	f240 2101 	movw	r1, #513	; 0x201
    b01c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b020:	4b08      	ldr	r3, [pc, #32]	; (b044 <_usb_d_dev_reset+0x50>)
    b022:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    b024:	4b08      	ldr	r3, [pc, #32]	; (b048 <_usb_d_dev_reset+0x54>)
    b026:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    b028:	4b08      	ldr	r3, [pc, #32]	; (b04c <_usb_d_dev_reset+0x58>)
    b02a:	685b      	ldr	r3, [r3, #4]
    b02c:	2100      	movs	r1, #0
    b02e:	2001      	movs	r0, #1
    b030:	4798      	blx	r3
}
    b032:	bf00      	nop
    b034:	bd80      	pop	{r7, pc}
    b036:	bf00      	nop
    b038:	0000a4e1 	.word	0x0000a4e1
    b03c:	0000a54b 	.word	0x0000a54b
    b040:	0000a5a1 	.word	0x0000a5a1
    b044:	0000a569 	.word	0x0000a569
    b048:	0000bbb1 	.word	0x0000bbb1
    b04c:	20002578 	.word	0x20002578

0000b050 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    b050:	b580      	push	{r7, lr}
    b052:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b054:	f240 2101 	movw	r1, #513	; 0x201
    b058:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b05c:	4b09      	ldr	r3, [pc, #36]	; (b084 <_usb_d_dev_suspend+0x34>)
    b05e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b060:	f240 2101 	movw	r1, #513	; 0x201
    b064:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b068:	4b07      	ldr	r3, [pc, #28]	; (b088 <_usb_d_dev_suspend+0x38>)
    b06a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b06c:	2170      	movs	r1, #112	; 0x70
    b06e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b072:	4b06      	ldr	r3, [pc, #24]	; (b08c <_usb_d_dev_suspend+0x3c>)
    b074:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    b076:	4b06      	ldr	r3, [pc, #24]	; (b090 <_usb_d_dev_suspend+0x40>)
    b078:	685b      	ldr	r3, [r3, #4]
    b07a:	2100      	movs	r1, #0
    b07c:	2004      	movs	r0, #4
    b07e:	4798      	blx	r3
}
    b080:	bf00      	nop
    b082:	bd80      	pop	{r7, pc}
    b084:	0000a54b 	.word	0x0000a54b
    b088:	0000a5a1 	.word	0x0000a5a1
    b08c:	0000a569 	.word	0x0000a569
    b090:	20002578 	.word	0x20002578

0000b094 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    b094:	b580      	push	{r7, lr}
    b096:	b082      	sub	sp, #8
    b098:	af00      	add	r7, sp, #0
	bool     rc    = true;
    b09a:	2301      	movs	r3, #1
    b09c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    b09e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0a2:	4b22      	ldr	r3, [pc, #136]	; (b12c <_usb_d_dev_handle_nep+0x98>)
    b0a4:	4798      	blx	r3
    b0a6:	4603      	mov	r3, r0
    b0a8:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    b0aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0ae:	4b20      	ldr	r3, [pc, #128]	; (b130 <_usb_d_dev_handle_nep+0x9c>)
    b0b0:	4798      	blx	r3
    b0b2:	4603      	mov	r3, r0
    b0b4:	461a      	mov	r2, r3
    b0b6:	88bb      	ldrh	r3, [r7, #4]
    b0b8:	4013      	ands	r3, r2
    b0ba:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    b0bc:	88bb      	ldrh	r3, [r7, #4]
    b0be:	f003 0304 	and.w	r3, r3, #4
    b0c2:	2b00      	cmp	r3, #0
    b0c4:	d003      	beq.n	b0ce <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    b0c6:	4b1b      	ldr	r3, [pc, #108]	; (b134 <_usb_d_dev_handle_nep+0xa0>)
    b0c8:	4798      	blx	r3
		return true;
    b0ca:	2301      	movs	r3, #1
    b0cc:	e02a      	b.n	b124 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    b0ce:	88bb      	ldrh	r3, [r7, #4]
    b0d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d002      	beq.n	b0de <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    b0d8:	4b17      	ldr	r3, [pc, #92]	; (b138 <_usb_d_dev_handle_nep+0xa4>)
    b0da:	4798      	blx	r3
    b0dc:	e021      	b.n	b122 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    b0de:	88bb      	ldrh	r3, [r7, #4]
    b0e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d002      	beq.n	b0ee <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    b0e8:	4b14      	ldr	r3, [pc, #80]	; (b13c <_usb_d_dev_handle_nep+0xa8>)
    b0ea:	4798      	blx	r3
    b0ec:	e019      	b.n	b122 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    b0ee:	88bb      	ldrh	r3, [r7, #4]
    b0f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d002      	beq.n	b0fe <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    b0f8:	4b11      	ldr	r3, [pc, #68]	; (b140 <_usb_d_dev_handle_nep+0xac>)
    b0fa:	4798      	blx	r3
    b0fc:	e011      	b.n	b122 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    b0fe:	88bb      	ldrh	r3, [r7, #4]
    b100:	f003 0308 	and.w	r3, r3, #8
    b104:	2b00      	cmp	r3, #0
    b106:	d002      	beq.n	b10e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    b108:	4b0e      	ldr	r3, [pc, #56]	; (b144 <_usb_d_dev_handle_nep+0xb0>)
    b10a:	4798      	blx	r3
    b10c:	e009      	b.n	b122 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    b10e:	88bb      	ldrh	r3, [r7, #4]
    b110:	f003 0301 	and.w	r3, r3, #1
    b114:	2b00      	cmp	r3, #0
    b116:	d002      	beq.n	b11e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    b118:	4b0b      	ldr	r3, [pc, #44]	; (b148 <_usb_d_dev_handle_nep+0xb4>)
    b11a:	4798      	blx	r3
    b11c:	e001      	b.n	b122 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    b11e:	2300      	movs	r3, #0
    b120:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b122:	79fb      	ldrb	r3, [r7, #7]
}
    b124:	4618      	mov	r0, r3
    b126:	3708      	adds	r7, #8
    b128:	46bd      	mov	sp, r7
    b12a:	bd80      	pop	{r7, pc}
    b12c:	0000a531 	.word	0x0000a531
    b130:	0000a587 	.word	0x0000a587
    b134:	0000aed5 	.word	0x0000aed5
    b138:	0000aef5 	.word	0x0000aef5
    b13c:	0000af85 	.word	0x0000af85
    b140:	0000afa9 	.word	0x0000afa9
    b144:	0000aff5 	.word	0x0000aff5
    b148:	0000b051 	.word	0x0000b051

0000b14c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b14c:	b590      	push	{r4, r7, lr}
    b14e:	b089      	sub	sp, #36	; 0x24
    b150:	af00      	add	r7, sp, #0
    b152:	6078      	str	r0, [r7, #4]
    b154:	460b      	mov	r3, r1
    b156:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b158:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b15c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	7c9b      	ldrb	r3, [r3, #18]
    b162:	f003 030f 	and.w	r3, r3, #15
    b166:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b168:	7dfb      	ldrb	r3, [r7, #23]
    b16a:	015b      	lsls	r3, r3, #5
    b16c:	4a73      	ldr	r2, [pc, #460]	; (b33c <_usb_d_dev_in_next+0x1f0>)
    b16e:	4413      	add	r3, r2
    b170:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b172:	78fb      	ldrb	r3, [r7, #3]
    b174:	2b00      	cmp	r3, #0
    b176:	d006      	beq.n	b186 <_usb_d_dev_in_next+0x3a>
    b178:	693b      	ldr	r3, [r7, #16]
    b17a:	3310      	adds	r3, #16
    b17c:	685b      	ldr	r3, [r3, #4]
    b17e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b182:	b29b      	uxth	r3, r3
    b184:	e000      	b.n	b188 <_usb_d_dev_in_next+0x3c>
    b186:	2300      	movs	r3, #0
    b188:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b18a:	687b      	ldr	r3, [r7, #4]
    b18c:	8a1b      	ldrh	r3, [r3, #16]
    b18e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b192:	4293      	cmp	r3, r2
    b194:	d103      	bne.n	b19e <_usb_d_dev_in_next+0x52>
    b196:	687b      	ldr	r3, [r7, #4]
    b198:	8a1b      	ldrh	r3, [r3, #16]
    b19a:	b21b      	sxth	r3, r3
    b19c:	e004      	b.n	b1a8 <_usb_d_dev_in_next+0x5c>
    b19e:	687b      	ldr	r3, [r7, #4]
    b1a0:	8a1b      	ldrh	r3, [r3, #16]
    b1a2:	3b01      	subs	r3, #1
    b1a4:	b29b      	uxth	r3, r3
    b1a6:	b21b      	sxth	r3, r3
    b1a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b1ac:	4013      	ands	r3, r2
    b1ae:	b21b      	sxth	r3, r3
    b1b0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b1b2:	2300      	movs	r3, #0
    b1b4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b1b6:	687b      	ldr	r3, [r7, #4]
    b1b8:	7cdb      	ldrb	r3, [r3, #19]
    b1ba:	f003 0307 	and.w	r3, r3, #7
    b1be:	b2db      	uxtb	r3, r3
    b1c0:	2b01      	cmp	r3, #1
    b1c2:	bf0c      	ite	eq
    b1c4:	2301      	moveq	r3, #1
    b1c6:	2300      	movne	r3, #0
    b1c8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b1ca:	78fb      	ldrb	r3, [r7, #3]
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	d004      	beq.n	b1da <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b1d0:	7dfb      	ldrb	r3, [r7, #23]
    b1d2:	2101      	movs	r1, #1
    b1d4:	4618      	mov	r0, r3
    b1d6:	4b5a      	ldr	r3, [pc, #360]	; (b340 <_usb_d_dev_in_next+0x1f4>)
    b1d8:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b1da:	687b      	ldr	r3, [r7, #4]
    b1dc:	689a      	ldr	r2, [r3, #8]
    b1de:	89fb      	ldrh	r3, [r7, #14]
    b1e0:	441a      	add	r2, r3
    b1e2:	687b      	ldr	r3, [r7, #4]
    b1e4:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	689a      	ldr	r2, [r3, #8]
    b1ea:	687b      	ldr	r3, [r7, #4]
    b1ec:	685b      	ldr	r3, [r3, #4]
    b1ee:	429a      	cmp	r2, r3
    b1f0:	d243      	bcs.n	b27a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b1f2:	687b      	ldr	r3, [r7, #4]
    b1f4:	685b      	ldr	r3, [r3, #4]
    b1f6:	b29a      	uxth	r2, r3
    b1f8:	687b      	ldr	r3, [r7, #4]
    b1fa:	689b      	ldr	r3, [r3, #8]
    b1fc:	b29b      	uxth	r3, r3
    b1fe:	1ad3      	subs	r3, r2, r3
    b200:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b202:	687b      	ldr	r3, [r7, #4]
    b204:	7cdb      	ldrb	r3, [r3, #19]
    b206:	f003 0320 	and.w	r3, r3, #32
    b20a:	b2db      	uxtb	r3, r3
    b20c:	2b00      	cmp	r3, #0
    b20e:	d01b      	beq.n	b248 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b210:	687b      	ldr	r3, [r7, #4]
    b212:	8a1b      	ldrh	r3, [r3, #16]
    b214:	8bfa      	ldrh	r2, [r7, #30]
    b216:	429a      	cmp	r2, r3
    b218:	d902      	bls.n	b220 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b21a:	687b      	ldr	r3, [r7, #4]
    b21c:	8a1b      	ldrh	r3, [r3, #16]
    b21e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b220:	687b      	ldr	r3, [r7, #4]
    b222:	68d8      	ldr	r0, [r3, #12]
    b224:	687b      	ldr	r3, [r7, #4]
    b226:	681a      	ldr	r2, [r3, #0]
    b228:	687b      	ldr	r3, [r7, #4]
    b22a:	689b      	ldr	r3, [r3, #8]
    b22c:	4413      	add	r3, r2
    b22e:	8bfa      	ldrh	r2, [r7, #30]
    b230:	4619      	mov	r1, r3
    b232:	4b44      	ldr	r3, [pc, #272]	; (b344 <_usb_d_dev_in_next+0x1f8>)
    b234:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b236:	687b      	ldr	r3, [r7, #4]
    b238:	68db      	ldr	r3, [r3, #12]
    b23a:	461a      	mov	r2, r3
    b23c:	7dfb      	ldrb	r3, [r7, #23]
    b23e:	2101      	movs	r1, #1
    b240:	4618      	mov	r0, r3
    b242:	4b41      	ldr	r3, [pc, #260]	; (b348 <_usb_d_dev_in_next+0x1fc>)
    b244:	4798      	blx	r3
    b246:	e011      	b.n	b26c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b248:	8bfb      	ldrh	r3, [r7, #30]
    b24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b24e:	d902      	bls.n	b256 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b254:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b256:	687b      	ldr	r3, [r7, #4]
    b258:	681a      	ldr	r2, [r3, #0]
    b25a:	687b      	ldr	r3, [r7, #4]
    b25c:	689b      	ldr	r3, [r3, #8]
    b25e:	4413      	add	r3, r2
    b260:	461a      	mov	r2, r3
    b262:	7dfb      	ldrb	r3, [r7, #23]
    b264:	2101      	movs	r1, #1
    b266:	4618      	mov	r0, r3
    b268:	4b37      	ldr	r3, [pc, #220]	; (b348 <_usb_d_dev_in_next+0x1fc>)
    b26a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b26c:	8bfa      	ldrh	r2, [r7, #30]
    b26e:	7df8      	ldrb	r0, [r7, #23]
    b270:	2300      	movs	r3, #0
    b272:	2101      	movs	r1, #1
    b274:	4c35      	ldr	r4, [pc, #212]	; (b34c <_usb_d_dev_in_next+0x200>)
    b276:	47a0      	blx	r4
		goto _in_tx_exec;
    b278:	e041      	b.n	b2fe <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b27a:	687b      	ldr	r3, [r7, #4]
    b27c:	7cdb      	ldrb	r3, [r3, #19]
    b27e:	f003 0310 	and.w	r3, r3, #16
    b282:	b2db      	uxtb	r3, r3
    b284:	2b00      	cmp	r3, #0
    b286:	d00b      	beq.n	b2a0 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b288:	687a      	ldr	r2, [r7, #4]
    b28a:	7cd3      	ldrb	r3, [r2, #19]
    b28c:	f36f 1304 	bfc	r3, #4, #1
    b290:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b292:	7df8      	ldrb	r0, [r7, #23]
    b294:	2300      	movs	r3, #0
    b296:	2200      	movs	r2, #0
    b298:	2101      	movs	r1, #1
    b29a:	4c2c      	ldr	r4, [pc, #176]	; (b34c <_usb_d_dev_in_next+0x200>)
    b29c:	47a0      	blx	r4
		goto _in_tx_exec;
    b29e:	e02e      	b.n	b2fe <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b2a0:	7afb      	ldrb	r3, [r7, #11]
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	d006      	beq.n	b2b4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b2a6:	7dfb      	ldrb	r3, [r7, #23]
    b2a8:	224b      	movs	r2, #75	; 0x4b
    b2aa:	4619      	mov	r1, r3
    b2ac:	69b8      	ldr	r0, [r7, #24]
    b2ae:	4b28      	ldr	r3, [pc, #160]	; (b350 <_usb_d_dev_in_next+0x204>)
    b2b0:	4798      	blx	r3
    b2b2:	e005      	b.n	b2c0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b2b4:	7dfb      	ldrb	r3, [r7, #23]
    b2b6:	224a      	movs	r2, #74	; 0x4a
    b2b8:	4619      	mov	r1, r3
    b2ba:	69b8      	ldr	r0, [r7, #24]
    b2bc:	4b24      	ldr	r3, [pc, #144]	; (b350 <_usb_d_dev_in_next+0x204>)
    b2be:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	8a1b      	ldrh	r3, [r3, #16]
    b2c4:	89ba      	ldrh	r2, [r7, #12]
    b2c6:	429a      	cmp	r2, r3
    b2c8:	d114      	bne.n	b2f4 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b2ca:	687a      	ldr	r2, [r7, #4]
    b2cc:	7cd3      	ldrb	r3, [r2, #19]
    b2ce:	f36f 1386 	bfc	r3, #6, #1
    b2d2:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b2d4:	4b1f      	ldr	r3, [pc, #124]	; (b354 <_usb_d_dev_in_next+0x208>)
    b2d6:	68db      	ldr	r3, [r3, #12]
    b2d8:	687a      	ldr	r2, [r7, #4]
    b2da:	7c90      	ldrb	r0, [r2, #18]
    b2dc:	687a      	ldr	r2, [r7, #4]
    b2de:	6892      	ldr	r2, [r2, #8]
    b2e0:	4611      	mov	r1, r2
    b2e2:	4798      	blx	r3
    b2e4:	4603      	mov	r3, r0
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d124      	bne.n	b334 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b2ea:	687a      	ldr	r2, [r7, #4]
    b2ec:	7cd3      	ldrb	r3, [r2, #19]
    b2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b2f2:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b2f4:	2100      	movs	r1, #0
    b2f6:	6878      	ldr	r0, [r7, #4]
    b2f8:	4b17      	ldr	r3, [pc, #92]	; (b358 <_usb_d_dev_in_next+0x20c>)
    b2fa:	4798      	blx	r3
	return;
    b2fc:	e01b      	b.n	b336 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b2fe:	78fb      	ldrb	r3, [r7, #3]
    b300:	f083 0301 	eor.w	r3, r3, #1
    b304:	b2db      	uxtb	r3, r3
    b306:	2b00      	cmp	r3, #0
    b308:	d00d      	beq.n	b326 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b30a:	7afb      	ldrb	r3, [r7, #11]
    b30c:	2b00      	cmp	r3, #0
    b30e:	d002      	beq.n	b316 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b310:	234e      	movs	r3, #78	; 0x4e
    b312:	777b      	strb	r3, [r7, #29]
    b314:	e001      	b.n	b31a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b316:	234a      	movs	r3, #74	; 0x4a
    b318:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b31a:	7f7a      	ldrb	r2, [r7, #29]
    b31c:	7dfb      	ldrb	r3, [r7, #23]
    b31e:	4619      	mov	r1, r3
    b320:	69b8      	ldr	r0, [r7, #24]
    b322:	4b0e      	ldr	r3, [pc, #56]	; (b35c <_usb_d_dev_in_next+0x210>)
    b324:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b326:	7dfb      	ldrb	r3, [r7, #23]
    b328:	2201      	movs	r2, #1
    b32a:	2101      	movs	r1, #1
    b32c:	4618      	mov	r0, r3
    b32e:	4b0c      	ldr	r3, [pc, #48]	; (b360 <_usb_d_dev_in_next+0x214>)
    b330:	4798      	blx	r3
    b332:	e000      	b.n	b336 <_usb_d_dev_in_next+0x1ea>
			return;
    b334:	bf00      	nop
}
    b336:	3724      	adds	r7, #36	; 0x24
    b338:	46bd      	mov	sp, r7
    b33a:	bd90      	pop	{r4, r7, pc}
    b33c:	20002640 	.word	0x20002640
    b340:	0000ab45 	.word	0x0000ab45
    b344:	0001a539 	.word	0x0001a539
    b348:	0000ab71 	.word	0x0000ab71
    b34c:	0000acb9 	.word	0x0000acb9
    b350:	0000a451 	.word	0x0000a451
    b354:	20002578 	.word	0x20002578
    b358:	0000c475 	.word	0x0000c475
    b35c:	0000a425 	.word	0x0000a425
    b360:	0000ad71 	.word	0x0000ad71

0000b364 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b364:	b590      	push	{r4, r7, lr}
    b366:	b08b      	sub	sp, #44	; 0x2c
    b368:	af00      	add	r7, sp, #0
    b36a:	6078      	str	r0, [r7, #4]
    b36c:	460b      	mov	r3, r1
    b36e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b370:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b374:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b376:	687b      	ldr	r3, [r7, #4]
    b378:	7c9b      	ldrb	r3, [r3, #18]
    b37a:	f003 030f 	and.w	r3, r3, #15
    b37e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b380:	7ffb      	ldrb	r3, [r7, #31]
    b382:	015b      	lsls	r3, r3, #5
    b384:	4a94      	ldr	r2, [pc, #592]	; (b5d8 <_usb_d_dev_out_next+0x274>)
    b386:	4413      	add	r3, r2
    b388:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b38a:	78fb      	ldrb	r3, [r7, #3]
    b38c:	2b00      	cmp	r3, #0
    b38e:	d005      	beq.n	b39c <_usb_d_dev_out_next+0x38>
    b390:	69bb      	ldr	r3, [r7, #24]
    b392:	685b      	ldr	r3, [r3, #4]
    b394:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b398:	b29b      	uxth	r3, r3
    b39a:	e000      	b.n	b39e <_usb_d_dev_out_next+0x3a>
    b39c:	2300      	movs	r3, #0
    b39e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b3a0:	78fb      	ldrb	r3, [r7, #3]
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d005      	beq.n	b3b2 <_usb_d_dev_out_next+0x4e>
    b3a6:	69bb      	ldr	r3, [r7, #24]
    b3a8:	685b      	ldr	r3, [r3, #4]
    b3aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b3ae:	b29b      	uxth	r3, r3
    b3b0:	e000      	b.n	b3b4 <_usb_d_dev_out_next+0x50>
    b3b2:	2300      	movs	r3, #0
    b3b4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b3b6:	687b      	ldr	r3, [r7, #4]
    b3b8:	8a1b      	ldrh	r3, [r3, #16]
    b3ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b3be:	4293      	cmp	r3, r2
    b3c0:	d004      	beq.n	b3cc <_usb_d_dev_out_next+0x68>
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	8a1b      	ldrh	r3, [r3, #16]
    b3c6:	3b01      	subs	r3, #1
    b3c8:	b29b      	uxth	r3, r3
    b3ca:	e001      	b.n	b3d0 <_usb_d_dev_out_next+0x6c>
    b3cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b3d0:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b3d2:	8aba      	ldrh	r2, [r7, #20]
    b3d4:	8a7b      	ldrh	r3, [r7, #18]
    b3d6:	4013      	ands	r3, r2
    b3d8:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	7cdb      	ldrb	r3, [r3, #19]
    b3de:	f003 0307 	and.w	r3, r3, #7
    b3e2:	b2db      	uxtb	r3, r3
    b3e4:	2b01      	cmp	r3, #1
    b3e6:	bf0c      	ite	eq
    b3e8:	2301      	moveq	r3, #1
    b3ea:	2300      	movne	r3, #0
    b3ec:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b3ee:	78fb      	ldrb	r3, [r7, #3]
    b3f0:	2b00      	cmp	r3, #0
    b3f2:	d004      	beq.n	b3fe <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b3f4:	7ffb      	ldrb	r3, [r7, #31]
    b3f6:	2100      	movs	r1, #0
    b3f8:	4618      	mov	r0, r3
    b3fa:	4b78      	ldr	r3, [pc, #480]	; (b5dc <_usb_d_dev_out_next+0x278>)
    b3fc:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b3fe:	687b      	ldr	r3, [r7, #4]
    b400:	7cdb      	ldrb	r3, [r3, #19]
    b402:	f003 0320 	and.w	r3, r3, #32
    b406:	b2db      	uxtb	r3, r3
    b408:	2b00      	cmp	r3, #0
    b40a:	d01c      	beq.n	b446 <_usb_d_dev_out_next+0xe2>
    b40c:	687b      	ldr	r3, [r7, #4]
    b40e:	685b      	ldr	r3, [r3, #4]
    b410:	2b00      	cmp	r3, #0
    b412:	d018      	beq.n	b446 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b414:	687b      	ldr	r3, [r7, #4]
    b416:	685b      	ldr	r3, [r3, #4]
    b418:	b29a      	uxth	r2, r3
    b41a:	687b      	ldr	r3, [r7, #4]
    b41c:	689b      	ldr	r3, [r3, #8]
    b41e:	b29b      	uxth	r3, r3
    b420:	1ad3      	subs	r3, r2, r3
    b422:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b424:	687b      	ldr	r3, [r7, #4]
    b426:	681a      	ldr	r2, [r3, #0]
    b428:	687b      	ldr	r3, [r7, #4]
    b42a:	689b      	ldr	r3, [r3, #8]
    b42c:	18d0      	adds	r0, r2, r3
    b42e:	687b      	ldr	r3, [r7, #4]
    b430:	68d9      	ldr	r1, [r3, #12]
    b432:	89ba      	ldrh	r2, [r7, #12]
    b434:	8a3b      	ldrh	r3, [r7, #16]
    b436:	429a      	cmp	r2, r3
    b438:	d901      	bls.n	b43e <_usb_d_dev_out_next+0xda>
    b43a:	8a3b      	ldrh	r3, [r7, #16]
    b43c:	e000      	b.n	b440 <_usb_d_dev_out_next+0xdc>
    b43e:	89bb      	ldrh	r3, [r7, #12]
    b440:	461a      	mov	r2, r3
    b442:	4b67      	ldr	r3, [pc, #412]	; (b5e0 <_usb_d_dev_out_next+0x27c>)
    b444:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b446:	687b      	ldr	r3, [r7, #4]
    b448:	685b      	ldr	r3, [r3, #4]
    b44a:	2b00      	cmp	r3, #0
    b44c:	d121      	bne.n	b492 <_usb_d_dev_out_next+0x12e>
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	7cdb      	ldrb	r3, [r3, #19]
    b452:	f003 0310 	and.w	r3, r3, #16
    b456:	b2db      	uxtb	r3, r3
    b458:	2b00      	cmp	r3, #0
    b45a:	d01a      	beq.n	b492 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b45c:	687a      	ldr	r2, [r7, #4]
    b45e:	7cd3      	ldrb	r3, [r2, #19]
    b460:	f36f 1304 	bfc	r3, #4, #1
    b464:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b466:	687a      	ldr	r2, [r7, #4]
    b468:	7cd3      	ldrb	r3, [r2, #19]
    b46a:	f043 0320 	orr.w	r3, r3, #32
    b46e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b470:	687b      	ldr	r3, [r7, #4]
    b472:	68db      	ldr	r3, [r3, #12]
    b474:	461a      	mov	r2, r3
    b476:	7ffb      	ldrb	r3, [r7, #31]
    b478:	2100      	movs	r1, #0
    b47a:	4618      	mov	r0, r3
    b47c:	4b59      	ldr	r3, [pc, #356]	; (b5e4 <_usb_d_dev_out_next+0x280>)
    b47e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	8a1b      	ldrh	r3, [r3, #16]
    b484:	461a      	mov	r2, r3
    b486:	7ff8      	ldrb	r0, [r7, #31]
    b488:	2300      	movs	r3, #0
    b48a:	2100      	movs	r1, #0
    b48c:	4c56      	ldr	r4, [pc, #344]	; (b5e8 <_usb_d_dev_out_next+0x284>)
    b48e:	47a0      	blx	r4
		goto _out_rx_exec;
    b490:	e090      	b.n	b5b4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b492:	78fb      	ldrb	r3, [r7, #3]
    b494:	2b00      	cmp	r3, #0
    b496:	d010      	beq.n	b4ba <_usb_d_dev_out_next+0x156>
    b498:	687b      	ldr	r3, [r7, #4]
    b49a:	8a1b      	ldrh	r3, [r3, #16]
    b49c:	8a3a      	ldrh	r2, [r7, #16]
    b49e:	429a      	cmp	r2, r3
    b4a0:	d20b      	bcs.n	b4ba <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b4a2:	687a      	ldr	r2, [r7, #4]
    b4a4:	7cd3      	ldrb	r3, [r2, #19]
    b4a6:	f36f 1304 	bfc	r3, #4, #1
    b4aa:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	689a      	ldr	r2, [r3, #8]
    b4b0:	8abb      	ldrh	r3, [r7, #20]
    b4b2:	441a      	add	r2, r3
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	609a      	str	r2, [r3, #8]
    b4b8:	e05c      	b.n	b574 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	689a      	ldr	r2, [r3, #8]
    b4be:	8afb      	ldrh	r3, [r7, #22]
    b4c0:	441a      	add	r2, r3
    b4c2:	687b      	ldr	r3, [r7, #4]
    b4c4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	689a      	ldr	r2, [r3, #8]
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	685b      	ldr	r3, [r3, #4]
    b4ce:	429a      	cmp	r2, r3
    b4d0:	d250      	bcs.n	b574 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	685b      	ldr	r3, [r3, #4]
    b4d6:	b29a      	uxth	r2, r3
    b4d8:	687b      	ldr	r3, [r7, #4]
    b4da:	689b      	ldr	r3, [r3, #8]
    b4dc:	b29b      	uxth	r3, r3
    b4de:	1ad3      	subs	r3, r2, r3
    b4e0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	7cdb      	ldrb	r3, [r3, #19]
    b4e6:	f003 0320 	and.w	r3, r3, #32
    b4ea:	b2db      	uxtb	r3, r3
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	d010      	beq.n	b512 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	8a1b      	ldrh	r3, [r3, #16]
    b4f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b4f6:	429a      	cmp	r2, r3
    b4f8:	d902      	bls.n	b500 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b4fa:	687b      	ldr	r3, [r7, #4]
    b4fc:	8a1b      	ldrh	r3, [r3, #16]
    b4fe:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b500:	687b      	ldr	r3, [r7, #4]
    b502:	68db      	ldr	r3, [r3, #12]
    b504:	461a      	mov	r2, r3
    b506:	7ffb      	ldrb	r3, [r7, #31]
    b508:	2100      	movs	r1, #0
    b50a:	4618      	mov	r0, r3
    b50c:	4b35      	ldr	r3, [pc, #212]	; (b5e4 <_usb_d_dev_out_next+0x280>)
    b50e:	4798      	blx	r3
    b510:	e029      	b.n	b566 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b512:	687b      	ldr	r3, [r7, #4]
    b514:	8a1b      	ldrh	r3, [r3, #16]
    b516:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b518:	429a      	cmp	r2, r3
    b51a:	d90f      	bls.n	b53c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b51c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b522:	d903      	bls.n	b52c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b528:	84fb      	strh	r3, [r7, #38]	; 0x26
    b52a:	e011      	b.n	b550 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b52c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b52e:	8a7b      	ldrh	r3, [r7, #18]
    b530:	4013      	ands	r3, r2
    b532:	b29b      	uxth	r3, r3
    b534:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b536:	1ad3      	subs	r3, r2, r3
    b538:	84fb      	strh	r3, [r7, #38]	; 0x26
    b53a:	e009      	b.n	b550 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b53c:	687b      	ldr	r3, [r7, #4]
    b53e:	8a1b      	ldrh	r3, [r3, #16]
    b540:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b542:	429a      	cmp	r2, r3
    b544:	d204      	bcs.n	b550 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b546:	687a      	ldr	r2, [r7, #4]
    b548:	7cd3      	ldrb	r3, [r2, #19]
    b54a:	f043 0320 	orr.w	r3, r3, #32
    b54e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	681a      	ldr	r2, [r3, #0]
    b554:	687b      	ldr	r3, [r7, #4]
    b556:	689b      	ldr	r3, [r3, #8]
    b558:	4413      	add	r3, r2
    b55a:	461a      	mov	r2, r3
    b55c:	7ffb      	ldrb	r3, [r7, #31]
    b55e:	2100      	movs	r1, #0
    b560:	4618      	mov	r0, r3
    b562:	4b20      	ldr	r3, [pc, #128]	; (b5e4 <_usb_d_dev_out_next+0x280>)
    b564:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b566:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b568:	7ff8      	ldrb	r0, [r7, #31]
    b56a:	2300      	movs	r3, #0
    b56c:	2100      	movs	r1, #0
    b56e:	4c1e      	ldr	r4, [pc, #120]	; (b5e8 <_usb_d_dev_out_next+0x284>)
    b570:	47a0      	blx	r4
			goto _out_rx_exec;
    b572:	e01f      	b.n	b5b4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b574:	7bfb      	ldrb	r3, [r7, #15]
    b576:	2b00      	cmp	r3, #0
    b578:	d006      	beq.n	b588 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b57a:	7ffb      	ldrb	r3, [r7, #31]
    b57c:	222d      	movs	r2, #45	; 0x2d
    b57e:	4619      	mov	r1, r3
    b580:	6a38      	ldr	r0, [r7, #32]
    b582:	4b1a      	ldr	r3, [pc, #104]	; (b5ec <_usb_d_dev_out_next+0x288>)
    b584:	4798      	blx	r3
    b586:	e005      	b.n	b594 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b588:	7ffb      	ldrb	r3, [r7, #31]
    b58a:	2225      	movs	r2, #37	; 0x25
    b58c:	4619      	mov	r1, r3
    b58e:	6a38      	ldr	r0, [r7, #32]
    b590:	4b16      	ldr	r3, [pc, #88]	; (b5ec <_usb_d_dev_out_next+0x288>)
    b592:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b594:	7ffb      	ldrb	r3, [r7, #31]
    b596:	2b00      	cmp	r3, #0
    b598:	d107      	bne.n	b5aa <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b59a:	687b      	ldr	r3, [r7, #4]
    b59c:	68db      	ldr	r3, [r3, #12]
    b59e:	461a      	mov	r2, r3
    b5a0:	7ffb      	ldrb	r3, [r7, #31]
    b5a2:	2100      	movs	r1, #0
    b5a4:	4618      	mov	r0, r3
    b5a6:	4b0f      	ldr	r3, [pc, #60]	; (b5e4 <_usb_d_dev_out_next+0x280>)
    b5a8:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b5aa:	2100      	movs	r1, #0
    b5ac:	6878      	ldr	r0, [r7, #4]
    b5ae:	4b10      	ldr	r3, [pc, #64]	; (b5f0 <_usb_d_dev_out_next+0x28c>)
    b5b0:	4798      	blx	r3
	return;
    b5b2:	e031      	b.n	b618 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b5b4:	78fb      	ldrb	r3, [r7, #3]
    b5b6:	f083 0301 	eor.w	r3, r3, #1
    b5ba:	b2db      	uxtb	r3, r3
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d025      	beq.n	b60c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b5c0:	7bfb      	ldrb	r3, [r7, #15]
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	d018      	beq.n	b5f8 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b5c6:	7ffb      	ldrb	r3, [r7, #31]
    b5c8:	2101      	movs	r1, #1
    b5ca:	4618      	mov	r0, r3
    b5cc:	4b09      	ldr	r3, [pc, #36]	; (b5f4 <_usb_d_dev_out_next+0x290>)
    b5ce:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b5d0:	232d      	movs	r3, #45	; 0x2d
    b5d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b5d6:	e012      	b.n	b5fe <_usb_d_dev_out_next+0x29a>
    b5d8:	20002640 	.word	0x20002640
    b5dc:	0000ab45 	.word	0x0000ab45
    b5e0:	0001a539 	.word	0x0001a539
    b5e4:	0000ab71 	.word	0x0000ab71
    b5e8:	0000acf9 	.word	0x0000acf9
    b5ec:	0000a451 	.word	0x0000a451
    b5f0:	0000c475 	.word	0x0000c475
    b5f4:	0000ad39 	.word	0x0000ad39
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b5f8:	2325      	movs	r3, #37	; 0x25
    b5fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b5fe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b602:	7ffb      	ldrb	r3, [r7, #31]
    b604:	4619      	mov	r1, r3
    b606:	6a38      	ldr	r0, [r7, #32]
    b608:	4b05      	ldr	r3, [pc, #20]	; (b620 <_usb_d_dev_out_next+0x2bc>)
    b60a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b60c:	7ffb      	ldrb	r3, [r7, #31]
    b60e:	2201      	movs	r2, #1
    b610:	2100      	movs	r1, #0
    b612:	4618      	mov	r0, r3
    b614:	4b03      	ldr	r3, [pc, #12]	; (b624 <_usb_d_dev_out_next+0x2c0>)
    b616:	4798      	blx	r3
}
    b618:	372c      	adds	r7, #44	; 0x2c
    b61a:	46bd      	mov	sp, r7
    b61c:	bd90      	pop	{r4, r7, pc}
    b61e:	bf00      	nop
    b620:	0000a425 	.word	0x0000a425
    b624:	0000adc9 	.word	0x0000adc9

0000b628 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b628:	b580      	push	{r7, lr}
    b62a:	b084      	sub	sp, #16
    b62c:	af00      	add	r7, sp, #0
    b62e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b630:	687b      	ldr	r3, [r7, #4]
    b632:	7c9b      	ldrb	r3, [r3, #18]
    b634:	f003 030f 	and.w	r3, r3, #15
    b638:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b63a:	687b      	ldr	r3, [r7, #4]
    b63c:	7cdb      	ldrb	r3, [r3, #19]
    b63e:	f003 0307 	and.w	r3, r3, #7
    b642:	b2db      	uxtb	r3, r3
    b644:	2b01      	cmp	r3, #1
    b646:	bf0c      	ite	eq
    b648:	2301      	moveq	r3, #1
    b64a:	2300      	movne	r3, #0
    b64c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b64e:	7bbb      	ldrb	r3, [r7, #14]
    b650:	f083 0301 	eor.w	r3, r3, #1
    b654:	b2db      	uxtb	r3, r3
    b656:	2b00      	cmp	r3, #0
    b658:	d008      	beq.n	b66c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b65a:	7bfb      	ldrb	r3, [r7, #15]
    b65c:	4618      	mov	r0, r3
    b65e:	4b20      	ldr	r3, [pc, #128]	; (b6e0 <_usb_d_dev_handle_setup+0xb8>)
    b660:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b662:	7bfb      	ldrb	r3, [r7, #15]
    b664:	4618      	mov	r0, r3
    b666:	4b1f      	ldr	r3, [pc, #124]	; (b6e4 <_usb_d_dev_handle_setup+0xbc>)
    b668:	4798      	blx	r3
		return;
    b66a:	e036      	b.n	b6da <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b66c:	687b      	ldr	r3, [r7, #4]
    b66e:	7cdb      	ldrb	r3, [r3, #19]
    b670:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b674:	b2db      	uxtb	r3, r3
    b676:	2b00      	cmp	r3, #0
    b678:	d010      	beq.n	b69c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b67a:	687a      	ldr	r2, [r7, #4]
    b67c:	7cd3      	ldrb	r3, [r2, #19]
    b67e:	f36f 1386 	bfc	r3, #6, #1
    b682:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b684:	7bfb      	ldrb	r3, [r7, #15]
    b686:	2200      	movs	r2, #0
    b688:	2101      	movs	r1, #1
    b68a:	4618      	mov	r0, r3
    b68c:	4b16      	ldr	r3, [pc, #88]	; (b6e8 <_usb_d_dev_handle_setup+0xc0>)
    b68e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b690:	7bfb      	ldrb	r3, [r7, #15]
    b692:	2200      	movs	r2, #0
    b694:	2100      	movs	r1, #0
    b696:	4618      	mov	r0, r3
    b698:	4b14      	ldr	r3, [pc, #80]	; (b6ec <_usb_d_dev_handle_setup+0xc4>)
    b69a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b69c:	687a      	ldr	r2, [r7, #4]
    b69e:	7cd3      	ldrb	r3, [r2, #19]
    b6a0:	f36f 03c3 	bfc	r3, #3, #1
    b6a4:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b6a6:	7bfb      	ldrb	r3, [r7, #15]
    b6a8:	2100      	movs	r1, #0
    b6aa:	4618      	mov	r0, r3
    b6ac:	4b10      	ldr	r3, [pc, #64]	; (b6f0 <_usb_d_dev_handle_setup+0xc8>)
    b6ae:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b6b0:	7bfb      	ldrb	r3, [r7, #15]
    b6b2:	2101      	movs	r1, #1
    b6b4:	4618      	mov	r0, r3
    b6b6:	4b0e      	ldr	r3, [pc, #56]	; (b6f0 <_usb_d_dev_handle_setup+0xc8>)
    b6b8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b6ba:	7bfb      	ldrb	r3, [r7, #15]
    b6bc:	216f      	movs	r1, #111	; 0x6f
    b6be:	4618      	mov	r0, r3
    b6c0:	4b0c      	ldr	r3, [pc, #48]	; (b6f4 <_usb_d_dev_handle_setup+0xcc>)
    b6c2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b6c4:	7bfb      	ldrb	r3, [r7, #15]
    b6c6:	216f      	movs	r1, #111	; 0x6f
    b6c8:	4618      	mov	r0, r3
    b6ca:	4b0b      	ldr	r3, [pc, #44]	; (b6f8 <_usb_d_dev_handle_setup+0xd0>)
    b6cc:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b6ce:	4b0b      	ldr	r3, [pc, #44]	; (b6fc <_usb_d_dev_handle_setup+0xd4>)
    b6d0:	689b      	ldr	r3, [r3, #8]
    b6d2:	687a      	ldr	r2, [r7, #4]
    b6d4:	7c92      	ldrb	r2, [r2, #18]
    b6d6:	4610      	mov	r0, r2
    b6d8:	4798      	blx	r3
}
    b6da:	3710      	adds	r7, #16
    b6dc:	46bd      	mov	sp, r7
    b6de:	bd80      	pop	{r7, pc}
    b6e0:	0000aacd 	.word	0x0000aacd
    b6e4:	0000aa79 	.word	0x0000aa79
    b6e8:	0000ad71 	.word	0x0000ad71
    b6ec:	0000adc9 	.word	0x0000adc9
    b6f0:	0000ad39 	.word	0x0000ad39
    b6f4:	0000a879 	.word	0x0000a879
    b6f8:	0000a8c9 	.word	0x0000a8c9
    b6fc:	20002578 	.word	0x20002578

0000b700 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b700:	b580      	push	{r7, lr}
    b702:	b084      	sub	sp, #16
    b704:	af00      	add	r7, sp, #0
    b706:	6078      	str	r0, [r7, #4]
    b708:	460b      	mov	r3, r1
    b70a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b70c:	687b      	ldr	r3, [r7, #4]
    b70e:	7c9b      	ldrb	r3, [r3, #18]
    b710:	f003 030f 	and.w	r3, r3, #15
    b714:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b716:	78f9      	ldrb	r1, [r7, #3]
    b718:	7bfb      	ldrb	r3, [r7, #15]
    b71a:	2200      	movs	r2, #0
    b71c:	4618      	mov	r0, r3
    b71e:	4b07      	ldr	r3, [pc, #28]	; (b73c <_usb_d_dev_handle_stall+0x3c>)
    b720:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b722:	4b07      	ldr	r3, [pc, #28]	; (b740 <_usb_d_dev_handle_stall+0x40>)
    b724:	691b      	ldr	r3, [r3, #16]
    b726:	687a      	ldr	r2, [r7, #4]
    b728:	7c90      	ldrb	r0, [r2, #18]
    b72a:	687a      	ldr	r2, [r7, #4]
    b72c:	6892      	ldr	r2, [r2, #8]
    b72e:	2101      	movs	r1, #1
    b730:	4798      	blx	r3
}
    b732:	bf00      	nop
    b734:	3710      	adds	r7, #16
    b736:	46bd      	mov	sp, r7
    b738:	bd80      	pop	{r7, pc}
    b73a:	bf00      	nop
    b73c:	0000aa2d 	.word	0x0000aa2d
    b740:	20002578 	.word	0x20002578

0000b744 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b744:	b580      	push	{r7, lr}
    b746:	b088      	sub	sp, #32
    b748:	af00      	add	r7, sp, #0
    b74a:	6078      	str	r0, [r7, #4]
    b74c:	460b      	mov	r3, r1
    b74e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b750:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b754:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b756:	687b      	ldr	r3, [r7, #4]
    b758:	7c9b      	ldrb	r3, [r3, #18]
    b75a:	f003 030f 	and.w	r3, r3, #15
    b75e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b760:	4b61      	ldr	r3, [pc, #388]	; (b8e8 <_usb_d_dev_handle_trfail+0x1a4>)
    b762:	881b      	ldrh	r3, [r3, #0]
    b764:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b766:	7efb      	ldrb	r3, [r7, #27]
    b768:	015b      	lsls	r3, r3, #5
    b76a:	4a60      	ldr	r2, [pc, #384]	; (b8ec <_usb_d_dev_handle_trfail+0x1a8>)
    b76c:	4413      	add	r3, r2
    b76e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b770:	78fb      	ldrb	r3, [r7, #3]
    b772:	2b00      	cmp	r3, #0
    b774:	d006      	beq.n	b784 <_usb_d_dev_handle_trfail+0x40>
    b776:	7efb      	ldrb	r3, [r7, #27]
    b778:	4619      	mov	r1, r3
    b77a:	69f8      	ldr	r0, [r7, #28]
    b77c:	4b5c      	ldr	r3, [pc, #368]	; (b8f0 <_usb_d_dev_handle_trfail+0x1ac>)
    b77e:	4798      	blx	r3
    b780:	4603      	mov	r3, r0
    b782:	e005      	b.n	b790 <_usb_d_dev_handle_trfail+0x4c>
    b784:	7efb      	ldrb	r3, [r7, #27]
    b786:	4619      	mov	r1, r3
    b788:	69f8      	ldr	r0, [r7, #28]
    b78a:	4b5a      	ldr	r3, [pc, #360]	; (b8f4 <_usb_d_dev_handle_trfail+0x1b0>)
    b78c:	4798      	blx	r3
    b78e:	4603      	mov	r3, r0
    b790:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b792:	687b      	ldr	r3, [r7, #4]
    b794:	7cdb      	ldrb	r3, [r3, #19]
    b796:	f003 0307 	and.w	r3, r3, #7
    b79a:	b2db      	uxtb	r3, r3
    b79c:	2b01      	cmp	r3, #1
    b79e:	bf0c      	ite	eq
    b7a0:	2301      	moveq	r3, #1
    b7a2:	2300      	movne	r3, #0
    b7a4:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b7a6:	78fb      	ldrb	r3, [r7, #3]
    b7a8:	011b      	lsls	r3, r3, #4
    b7aa:	697a      	ldr	r2, [r7, #20]
    b7ac:	4413      	add	r3, r2
    b7ae:	7a9b      	ldrb	r3, [r3, #10]
    b7b0:	b2db      	uxtb	r3, r3
    b7b2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b7b4:	7cfb      	ldrb	r3, [r7, #19]
    b7b6:	2b02      	cmp	r3, #2
    b7b8:	d12f      	bne.n	b81a <_usb_d_dev_handle_trfail+0xd6>
    b7ba:	7b3b      	ldrb	r3, [r7, #12]
    b7bc:	f003 0301 	and.w	r3, r3, #1
    b7c0:	b2db      	uxtb	r3, r3
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d029      	beq.n	b81a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b7c6:	78fb      	ldrb	r3, [r7, #3]
    b7c8:	011b      	lsls	r3, r3, #4
    b7ca:	697a      	ldr	r2, [r7, #20]
    b7cc:	441a      	add	r2, r3
    b7ce:	7a93      	ldrb	r3, [r2, #10]
    b7d0:	f36f 0300 	bfc	r3, #0, #1
    b7d4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b7d6:	78fb      	ldrb	r3, [r7, #3]
    b7d8:	f107 0220 	add.w	r2, r7, #32
    b7dc:	4413      	add	r3, r2
    b7de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b7e2:	7efb      	ldrb	r3, [r7, #27]
    b7e4:	4619      	mov	r1, r3
    b7e6:	69f8      	ldr	r0, [r7, #28]
    b7e8:	4b43      	ldr	r3, [pc, #268]	; (b8f8 <_usb_d_dev_handle_trfail+0x1b4>)
    b7ea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b7ec:	78fb      	ldrb	r3, [r7, #3]
    b7ee:	f107 0220 	add.w	r2, r7, #32
    b7f2:	4413      	add	r3, r2
    b7f4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b7f8:	7efb      	ldrb	r3, [r7, #27]
    b7fa:	4619      	mov	r1, r3
    b7fc:	69f8      	ldr	r0, [r7, #28]
    b7fe:	4b3f      	ldr	r3, [pc, #252]	; (b8fc <_usb_d_dev_handle_trfail+0x1b8>)
    b800:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b802:	78fb      	ldrb	r3, [r7, #3]
    b804:	2b00      	cmp	r3, #0
    b806:	bf14      	ite	ne
    b808:	2301      	movne	r3, #1
    b80a:	2300      	moveq	r3, #0
    b80c:	b2db      	uxtb	r3, r3
    b80e:	2204      	movs	r2, #4
    b810:	4619      	mov	r1, r3
    b812:	6878      	ldr	r0, [r7, #4]
    b814:	4b3a      	ldr	r3, [pc, #232]	; (b900 <_usb_d_dev_handle_trfail+0x1bc>)
    b816:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b818:	e062      	b.n	b8e0 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b81a:	7b3b      	ldrb	r3, [r7, #12]
    b81c:	f003 0302 	and.w	r3, r3, #2
    b820:	b2db      	uxtb	r3, r3
    b822:	2b00      	cmp	r3, #0
    b824:	d040      	beq.n	b8a8 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b826:	78fb      	ldrb	r3, [r7, #3]
    b828:	011b      	lsls	r3, r3, #4
    b82a:	697a      	ldr	r2, [r7, #20]
    b82c:	441a      	add	r2, r3
    b82e:	7a93      	ldrb	r3, [r2, #10]
    b830:	f36f 0341 	bfc	r3, #1, #1
    b834:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b836:	78fb      	ldrb	r3, [r7, #3]
    b838:	f107 0220 	add.w	r2, r7, #32
    b83c:	4413      	add	r3, r2
    b83e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b842:	7efb      	ldrb	r3, [r7, #27]
    b844:	4619      	mov	r1, r3
    b846:	69f8      	ldr	r0, [r7, #28]
    b848:	4b2b      	ldr	r3, [pc, #172]	; (b8f8 <_usb_d_dev_handle_trfail+0x1b4>)
    b84a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b84c:	78fb      	ldrb	r3, [r7, #3]
    b84e:	f107 0220 	add.w	r2, r7, #32
    b852:	4413      	add	r3, r2
    b854:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b858:	7efb      	ldrb	r3, [r7, #27]
    b85a:	4619      	mov	r1, r3
    b85c:	69f8      	ldr	r0, [r7, #28]
    b85e:	4b27      	ldr	r3, [pc, #156]	; (b8fc <_usb_d_dev_handle_trfail+0x1b8>)
    b860:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b862:	7cbb      	ldrb	r3, [r7, #18]
    b864:	2b00      	cmp	r3, #0
    b866:	d03b      	beq.n	b8e0 <_usb_d_dev_handle_trfail+0x19c>
    b868:	687b      	ldr	r3, [r7, #4]
    b86a:	7cdb      	ldrb	r3, [r3, #19]
    b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b870:	b2db      	uxtb	r3, r3
    b872:	2b00      	cmp	r3, #0
    b874:	d034      	beq.n	b8e0 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	7cdb      	ldrb	r3, [r3, #19]
    b87a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b87e:	b2db      	uxtb	r3, r3
    b880:	461a      	mov	r2, r3
    b882:	78fb      	ldrb	r3, [r7, #3]
    b884:	4293      	cmp	r3, r2
    b886:	d02b      	beq.n	b8e0 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b888:	687b      	ldr	r3, [r7, #4]
    b88a:	7cdb      	ldrb	r3, [r3, #19]
    b88c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b890:	b2db      	uxtb	r3, r3
    b892:	2b00      	cmp	r3, #0
    b894:	bf14      	ite	ne
    b896:	2301      	movne	r3, #1
    b898:	2300      	moveq	r3, #0
    b89a:	b2db      	uxtb	r3, r3
    b89c:	2200      	movs	r2, #0
    b89e:	4619      	mov	r1, r3
    b8a0:	6878      	ldr	r0, [r7, #4]
    b8a2:	4b17      	ldr	r3, [pc, #92]	; (b900 <_usb_d_dev_handle_trfail+0x1bc>)
    b8a4:	4798      	blx	r3
}
    b8a6:	e01b      	b.n	b8e0 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b8a8:	78fa      	ldrb	r2, [r7, #3]
    b8aa:	7efb      	ldrb	r3, [r7, #27]
    b8ac:	4611      	mov	r1, r2
    b8ae:	4618      	mov	r0, r3
    b8b0:	4b14      	ldr	r3, [pc, #80]	; (b904 <_usb_d_dev_handle_trfail+0x1c0>)
    b8b2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b8b4:	78fb      	ldrb	r3, [r7, #3]
    b8b6:	f107 0220 	add.w	r2, r7, #32
    b8ba:	4413      	add	r3, r2
    b8bc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b8c0:	7efb      	ldrb	r3, [r7, #27]
    b8c2:	4619      	mov	r1, r3
    b8c4:	69f8      	ldr	r0, [r7, #28]
    b8c6:	4b0c      	ldr	r3, [pc, #48]	; (b8f8 <_usb_d_dev_handle_trfail+0x1b4>)
    b8c8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b8ca:	78fb      	ldrb	r3, [r7, #3]
    b8cc:	f107 0220 	add.w	r2, r7, #32
    b8d0:	4413      	add	r3, r2
    b8d2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b8d6:	7efb      	ldrb	r3, [r7, #27]
    b8d8:	4619      	mov	r1, r3
    b8da:	69f8      	ldr	r0, [r7, #28]
    b8dc:	4b07      	ldr	r3, [pc, #28]	; (b8fc <_usb_d_dev_handle_trfail+0x1b8>)
    b8de:	4798      	blx	r3
}
    b8e0:	bf00      	nop
    b8e2:	3720      	adds	r7, #32
    b8e4:	46bd      	mov	sp, r7
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	0001ae6c 	.word	0x0001ae6c
    b8ec:	20002640 	.word	0x20002640
    b8f0:	0000a4ad 	.word	0x0000a4ad
    b8f4:	0000a47d 	.word	0x0000a47d
    b8f8:	0000a351 	.word	0x0000a351
    b8fc:	0000a451 	.word	0x0000a451
    b900:	0000c4bd 	.word	0x0000c4bd
    b904:	0000ad39 	.word	0x0000ad39

0000b908 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b908:	b580      	push	{r7, lr}
    b90a:	b082      	sub	sp, #8
    b90c:	af00      	add	r7, sp, #0
    b90e:	6078      	str	r0, [r7, #4]
    b910:	460b      	mov	r3, r1
    b912:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b914:	78fb      	ldrb	r3, [r7, #3]
    b916:	f003 0310 	and.w	r3, r3, #16
    b91a:	2b00      	cmp	r3, #0
    b91c:	d003      	beq.n	b926 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    b91e:	6878      	ldr	r0, [r7, #4]
    b920:	4b0c      	ldr	r3, [pc, #48]	; (b954 <_usb_d_dev_trans_setup_isr+0x4c>)
    b922:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    b924:	e012      	b.n	b94c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b926:	78fb      	ldrb	r3, [r7, #3]
    b928:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b92c:	2b00      	cmp	r3, #0
    b92e:	d004      	beq.n	b93a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    b930:	2101      	movs	r1, #1
    b932:	6878      	ldr	r0, [r7, #4]
    b934:	4b08      	ldr	r3, [pc, #32]	; (b958 <_usb_d_dev_trans_setup_isr+0x50>)
    b936:	4798      	blx	r3
}
    b938:	e008      	b.n	b94c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b93a:	78fb      	ldrb	r3, [r7, #3]
    b93c:	f003 0320 	and.w	r3, r3, #32
    b940:	2b00      	cmp	r3, #0
    b942:	d003      	beq.n	b94c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    b944:	2100      	movs	r1, #0
    b946:	6878      	ldr	r0, [r7, #4]
    b948:	4b03      	ldr	r3, [pc, #12]	; (b958 <_usb_d_dev_trans_setup_isr+0x50>)
    b94a:	4798      	blx	r3
}
    b94c:	bf00      	nop
    b94e:	3708      	adds	r7, #8
    b950:	46bd      	mov	sp, r7
    b952:	bd80      	pop	{r7, pc}
    b954:	0000b629 	.word	0x0000b629
    b958:	0000b701 	.word	0x0000b701

0000b95c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b95c:	b580      	push	{r7, lr}
    b95e:	b082      	sub	sp, #8
    b960:	af00      	add	r7, sp, #0
    b962:	6078      	str	r0, [r7, #4]
    b964:	460b      	mov	r3, r1
    b966:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b968:	78fb      	ldrb	r3, [r7, #3]
    b96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b96e:	2b00      	cmp	r3, #0
    b970:	d004      	beq.n	b97c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    b972:	2101      	movs	r1, #1
    b974:	6878      	ldr	r0, [r7, #4]
    b976:	4b1a      	ldr	r3, [pc, #104]	; (b9e0 <_usb_d_dev_trans_in_isr+0x84>)
    b978:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b97a:	e02c      	b.n	b9d6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b97c:	78fb      	ldrb	r3, [r7, #3]
    b97e:	f003 0308 	and.w	r3, r3, #8
    b982:	2b00      	cmp	r3, #0
    b984:	d004      	beq.n	b990 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    b986:	2101      	movs	r1, #1
    b988:	6878      	ldr	r0, [r7, #4]
    b98a:	4b16      	ldr	r3, [pc, #88]	; (b9e4 <_usb_d_dev_trans_in_isr+0x88>)
    b98c:	4798      	blx	r3
}
    b98e:	e022      	b.n	b9d6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    b990:	78fb      	ldrb	r3, [r7, #3]
    b992:	f003 0302 	and.w	r3, r3, #2
    b996:	2b00      	cmp	r3, #0
    b998:	d004      	beq.n	b9a4 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    b99a:	2101      	movs	r1, #1
    b99c:	6878      	ldr	r0, [r7, #4]
    b99e:	4b12      	ldr	r3, [pc, #72]	; (b9e8 <_usb_d_dev_trans_in_isr+0x8c>)
    b9a0:	4798      	blx	r3
}
    b9a2:	e018      	b.n	b9d6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b9a4:	687b      	ldr	r3, [r7, #4]
    b9a6:	7cdb      	ldrb	r3, [r3, #19]
    b9a8:	f003 0307 	and.w	r3, r3, #7
    b9ac:	b2db      	uxtb	r3, r3
    b9ae:	2b01      	cmp	r3, #1
    b9b0:	d111      	bne.n	b9d6 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b9b2:	78fb      	ldrb	r3, [r7, #3]
    b9b4:	f003 0304 	and.w	r3, r3, #4
    b9b8:	2b00      	cmp	r3, #0
    b9ba:	d004      	beq.n	b9c6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    b9bc:	2100      	movs	r1, #0
    b9be:	6878      	ldr	r0, [r7, #4]
    b9c0:	4b08      	ldr	r3, [pc, #32]	; (b9e4 <_usb_d_dev_trans_in_isr+0x88>)
    b9c2:	4798      	blx	r3
}
    b9c4:	e007      	b.n	b9d6 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b9c6:	78fb      	ldrb	r3, [r7, #3]
    b9c8:	f003 0310 	and.w	r3, r3, #16
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d002      	beq.n	b9d6 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b9d0:	6878      	ldr	r0, [r7, #4]
    b9d2:	4b06      	ldr	r3, [pc, #24]	; (b9ec <_usb_d_dev_trans_in_isr+0x90>)
    b9d4:	4798      	blx	r3
}
    b9d6:	bf00      	nop
    b9d8:	3708      	adds	r7, #8
    b9da:	46bd      	mov	sp, r7
    b9dc:	bd80      	pop	{r7, pc}
    b9de:	bf00      	nop
    b9e0:	0000b701 	.word	0x0000b701
    b9e4:	0000b745 	.word	0x0000b745
    b9e8:	0000b14d 	.word	0x0000b14d
    b9ec:	0000b629 	.word	0x0000b629

0000b9f0 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b9f0:	b580      	push	{r7, lr}
    b9f2:	b082      	sub	sp, #8
    b9f4:	af00      	add	r7, sp, #0
    b9f6:	6078      	str	r0, [r7, #4]
    b9f8:	460b      	mov	r3, r1
    b9fa:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b9fc:	78fb      	ldrb	r3, [r7, #3]
    b9fe:	f003 0320 	and.w	r3, r3, #32
    ba02:	2b00      	cmp	r3, #0
    ba04:	d004      	beq.n	ba10 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    ba06:	2100      	movs	r1, #0
    ba08:	6878      	ldr	r0, [r7, #4]
    ba0a:	4b1a      	ldr	r3, [pc, #104]	; (ba74 <_usb_d_dev_trans_out_isr+0x84>)
    ba0c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ba0e:	e02c      	b.n	ba6a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ba10:	78fb      	ldrb	r3, [r7, #3]
    ba12:	f003 0304 	and.w	r3, r3, #4
    ba16:	2b00      	cmp	r3, #0
    ba18:	d004      	beq.n	ba24 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    ba1a:	2100      	movs	r1, #0
    ba1c:	6878      	ldr	r0, [r7, #4]
    ba1e:	4b16      	ldr	r3, [pc, #88]	; (ba78 <_usb_d_dev_trans_out_isr+0x88>)
    ba20:	4798      	blx	r3
}
    ba22:	e022      	b.n	ba6a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    ba24:	78fb      	ldrb	r3, [r7, #3]
    ba26:	f003 0301 	and.w	r3, r3, #1
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d004      	beq.n	ba38 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    ba2e:	2101      	movs	r1, #1
    ba30:	6878      	ldr	r0, [r7, #4]
    ba32:	4b12      	ldr	r3, [pc, #72]	; (ba7c <_usb_d_dev_trans_out_isr+0x8c>)
    ba34:	4798      	blx	r3
}
    ba36:	e018      	b.n	ba6a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    ba38:	687b      	ldr	r3, [r7, #4]
    ba3a:	7cdb      	ldrb	r3, [r3, #19]
    ba3c:	f003 0307 	and.w	r3, r3, #7
    ba40:	b2db      	uxtb	r3, r3
    ba42:	2b01      	cmp	r3, #1
    ba44:	d111      	bne.n	ba6a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ba46:	78fb      	ldrb	r3, [r7, #3]
    ba48:	f003 0308 	and.w	r3, r3, #8
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	d004      	beq.n	ba5a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    ba50:	2101      	movs	r1, #1
    ba52:	6878      	ldr	r0, [r7, #4]
    ba54:	4b08      	ldr	r3, [pc, #32]	; (ba78 <_usb_d_dev_trans_out_isr+0x88>)
    ba56:	4798      	blx	r3
}
    ba58:	e007      	b.n	ba6a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ba5a:	78fb      	ldrb	r3, [r7, #3]
    ba5c:	f003 0310 	and.w	r3, r3, #16
    ba60:	2b00      	cmp	r3, #0
    ba62:	d002      	beq.n	ba6a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    ba64:	6878      	ldr	r0, [r7, #4]
    ba66:	4b06      	ldr	r3, [pc, #24]	; (ba80 <_usb_d_dev_trans_out_isr+0x90>)
    ba68:	4798      	blx	r3
}
    ba6a:	bf00      	nop
    ba6c:	3708      	adds	r7, #8
    ba6e:	46bd      	mov	sp, r7
    ba70:	bd80      	pop	{r7, pc}
    ba72:	bf00      	nop
    ba74:	0000b701 	.word	0x0000b701
    ba78:	0000b745 	.word	0x0000b745
    ba7c:	0000b365 	.word	0x0000b365
    ba80:	0000b629 	.word	0x0000b629

0000ba84 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    ba84:	b580      	push	{r7, lr}
    ba86:	b084      	sub	sp, #16
    ba88:	af00      	add	r7, sp, #0
    ba8a:	6078      	str	r0, [r7, #4]
    ba8c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    ba8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ba92:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ba94:	683b      	ldr	r3, [r7, #0]
    ba96:	7c9b      	ldrb	r3, [r3, #18]
    ba98:	f003 030f 	and.w	r3, r3, #15
    ba9c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    ba9e:	7afb      	ldrb	r3, [r7, #11]
    baa0:	2201      	movs	r2, #1
    baa2:	409a      	lsls	r2, r3
    baa4:	687b      	ldr	r3, [r7, #4]
    baa6:	4013      	ands	r3, r2
    baa8:	2b00      	cmp	r3, #0
    baaa:	d03d      	beq.n	bb28 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    baac:	7afb      	ldrb	r3, [r7, #11]
    baae:	68fa      	ldr	r2, [r7, #12]
    bab0:	3308      	adds	r3, #8
    bab2:	015b      	lsls	r3, r3, #5
    bab4:	4413      	add	r3, r2
    bab6:	3307      	adds	r3, #7
    bab8:	781b      	ldrb	r3, [r3, #0]
    baba:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    babc:	7afb      	ldrb	r3, [r7, #11]
    babe:	68fa      	ldr	r2, [r7, #12]
    bac0:	015b      	lsls	r3, r3, #5
    bac2:	4413      	add	r3, r2
    bac4:	f203 1309 	addw	r3, r3, #265	; 0x109
    bac8:	781b      	ldrb	r3, [r3, #0]
    baca:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    bacc:	7aba      	ldrb	r2, [r7, #10]
    bace:	7a7b      	ldrb	r3, [r7, #9]
    bad0:	4013      	ands	r3, r2
    bad2:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    bad4:	7abb      	ldrb	r3, [r7, #10]
    bad6:	2b00      	cmp	r3, #0
    bad8:	d027      	beq.n	bb2a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    bada:	683b      	ldr	r3, [r7, #0]
    badc:	7cdb      	ldrb	r3, [r3, #19]
    bade:	f003 0307 	and.w	r3, r3, #7
    bae2:	b2db      	uxtb	r3, r3
    bae4:	2b01      	cmp	r3, #1
    bae6:	d10c      	bne.n	bb02 <_usb_d_dev_handle_eps+0x7e>
    bae8:	683b      	ldr	r3, [r7, #0]
    baea:	7cdb      	ldrb	r3, [r3, #19]
    baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    baf0:	b2db      	uxtb	r3, r3
    baf2:	2b00      	cmp	r3, #0
    baf4:	d105      	bne.n	bb02 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    baf6:	7abb      	ldrb	r3, [r7, #10]
    baf8:	4619      	mov	r1, r3
    bafa:	6838      	ldr	r0, [r7, #0]
    bafc:	4b0c      	ldr	r3, [pc, #48]	; (bb30 <_usb_d_dev_handle_eps+0xac>)
    bafe:	4798      	blx	r3
    bb00:	e013      	b.n	bb2a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    bb02:	683b      	ldr	r3, [r7, #0]
    bb04:	7cdb      	ldrb	r3, [r3, #19]
    bb06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    bb0a:	b2db      	uxtb	r3, r3
    bb0c:	2b00      	cmp	r3, #0
    bb0e:	d005      	beq.n	bb1c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    bb10:	7abb      	ldrb	r3, [r7, #10]
    bb12:	4619      	mov	r1, r3
    bb14:	6838      	ldr	r0, [r7, #0]
    bb16:	4b07      	ldr	r3, [pc, #28]	; (bb34 <_usb_d_dev_handle_eps+0xb0>)
    bb18:	4798      	blx	r3
    bb1a:	e006      	b.n	bb2a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    bb1c:	7abb      	ldrb	r3, [r7, #10]
    bb1e:	4619      	mov	r1, r3
    bb20:	6838      	ldr	r0, [r7, #0]
    bb22:	4b05      	ldr	r3, [pc, #20]	; (bb38 <_usb_d_dev_handle_eps+0xb4>)
    bb24:	4798      	blx	r3
    bb26:	e000      	b.n	bb2a <_usb_d_dev_handle_eps+0xa6>
		return;
    bb28:	bf00      	nop
		}
	}
}
    bb2a:	3710      	adds	r7, #16
    bb2c:	46bd      	mov	sp, r7
    bb2e:	bd80      	pop	{r7, pc}
    bb30:	0000b909 	.word	0x0000b909
    bb34:	0000b95d 	.word	0x0000b95d
    bb38:	0000b9f1 	.word	0x0000b9f1

0000bb3c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    bb3c:	b580      	push	{r7, lr}
    bb3e:	b084      	sub	sp, #16
    bb40:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bb42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bb46:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bb48:	68bb      	ldr	r3, [r7, #8]
    bb4a:	8c1b      	ldrh	r3, [r3, #32]
    bb4c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    bb4e:	88fb      	ldrh	r3, [r7, #6]
    bb50:	2b00      	cmp	r3, #0
    bb52:	d104      	bne.n	bb5e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    bb54:	4b13      	ldr	r3, [pc, #76]	; (bba4 <_usb_d_dev_handler+0x68>)
    bb56:	4798      	blx	r3
    bb58:	4603      	mov	r3, r0
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d11e      	bne.n	bb9c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    bb5e:	2300      	movs	r3, #0
    bb60:	73fb      	strb	r3, [r7, #15]
    bb62:	e017      	b.n	bb94 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    bb64:	7bfa      	ldrb	r2, [r7, #15]
    bb66:	4613      	mov	r3, r2
    bb68:	009b      	lsls	r3, r3, #2
    bb6a:	4413      	add	r3, r2
    bb6c:	009b      	lsls	r3, r3, #2
    bb6e:	3310      	adds	r3, #16
    bb70:	4a0d      	ldr	r2, [pc, #52]	; (bba8 <_usb_d_dev_handler+0x6c>)
    bb72:	4413      	add	r3, r2
    bb74:	3304      	adds	r3, #4
    bb76:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    bb78:	683b      	ldr	r3, [r7, #0]
    bb7a:	7c9b      	ldrb	r3, [r3, #18]
    bb7c:	2bff      	cmp	r3, #255	; 0xff
    bb7e:	d005      	beq.n	bb8c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    bb80:	88fb      	ldrh	r3, [r7, #6]
    bb82:	6839      	ldr	r1, [r7, #0]
    bb84:	4618      	mov	r0, r3
    bb86:	4b09      	ldr	r3, [pc, #36]	; (bbac <_usb_d_dev_handler+0x70>)
    bb88:	4798      	blx	r3
    bb8a:	e000      	b.n	bb8e <_usb_d_dev_handler+0x52>
			continue;
    bb8c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    bb8e:	7bfb      	ldrb	r3, [r7, #15]
    bb90:	3301      	adds	r3, #1
    bb92:	73fb      	strb	r3, [r7, #15]
    bb94:	7bfb      	ldrb	r3, [r7, #15]
    bb96:	2b08      	cmp	r3, #8
    bb98:	d9e4      	bls.n	bb64 <_usb_d_dev_handler+0x28>
    bb9a:	e000      	b.n	bb9e <_usb_d_dev_handler+0x62>
			return;
    bb9c:	bf00      	nop
	}
}
    bb9e:	3710      	adds	r7, #16
    bba0:	46bd      	mov	sp, r7
    bba2:	bd80      	pop	{r7, pc}
    bba4:	0000b095 	.word	0x0000b095
    bba8:	20002578 	.word	0x20002578
    bbac:	0000ba85 	.word	0x0000ba85

0000bbb0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    bbb0:	b580      	push	{r7, lr}
    bbb2:	b082      	sub	sp, #8
    bbb4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    bbb6:	2300      	movs	r3, #0
    bbb8:	71fb      	strb	r3, [r7, #7]
    bbba:	e023      	b.n	bc04 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    bbbc:	79fa      	ldrb	r2, [r7, #7]
    bbbe:	4613      	mov	r3, r2
    bbc0:	009b      	lsls	r3, r3, #2
    bbc2:	4413      	add	r3, r2
    bbc4:	009b      	lsls	r3, r3, #2
    bbc6:	3310      	adds	r3, #16
    bbc8:	4a14      	ldr	r2, [pc, #80]	; (bc1c <_usb_d_dev_reset_epts+0x6c>)
    bbca:	4413      	add	r3, r2
    bbcc:	3304      	adds	r3, #4
    bbce:	2103      	movs	r1, #3
    bbd0:	4618      	mov	r0, r3
    bbd2:	4b13      	ldr	r3, [pc, #76]	; (bc20 <_usb_d_dev_reset_epts+0x70>)
    bbd4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    bbd6:	79fa      	ldrb	r2, [r7, #7]
    bbd8:	4910      	ldr	r1, [pc, #64]	; (bc1c <_usb_d_dev_reset_epts+0x6c>)
    bbda:	4613      	mov	r3, r2
    bbdc:	009b      	lsls	r3, r3, #2
    bbde:	4413      	add	r3, r2
    bbe0:	009b      	lsls	r3, r3, #2
    bbe2:	440b      	add	r3, r1
    bbe4:	3326      	adds	r3, #38	; 0x26
    bbe6:	22ff      	movs	r2, #255	; 0xff
    bbe8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    bbea:	79fa      	ldrb	r2, [r7, #7]
    bbec:	490b      	ldr	r1, [pc, #44]	; (bc1c <_usb_d_dev_reset_epts+0x6c>)
    bbee:	4613      	mov	r3, r2
    bbf0:	009b      	lsls	r3, r3, #2
    bbf2:	4413      	add	r3, r2
    bbf4:	009b      	lsls	r3, r3, #2
    bbf6:	440b      	add	r3, r1
    bbf8:	3327      	adds	r3, #39	; 0x27
    bbfa:	2200      	movs	r2, #0
    bbfc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    bbfe:	79fb      	ldrb	r3, [r7, #7]
    bc00:	3301      	adds	r3, #1
    bc02:	71fb      	strb	r3, [r7, #7]
    bc04:	79fb      	ldrb	r3, [r7, #7]
    bc06:	2b08      	cmp	r3, #8
    bc08:	d9d8      	bls.n	bbbc <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    bc0a:	22a0      	movs	r2, #160	; 0xa0
    bc0c:	2100      	movs	r1, #0
    bc0e:	4805      	ldr	r0, [pc, #20]	; (bc24 <_usb_d_dev_reset_epts+0x74>)
    bc10:	4b05      	ldr	r3, [pc, #20]	; (bc28 <_usb_d_dev_reset_epts+0x78>)
    bc12:	4798      	blx	r3
}
    bc14:	bf00      	nop
    bc16:	3708      	adds	r7, #8
    bc18:	46bd      	mov	sp, r7
    bc1a:	bd80      	pop	{r7, pc}
    bc1c:	20002578 	.word	0x20002578
    bc20:	0000c475 	.word	0x0000c475
    bc24:	20002640 	.word	0x20002640
    bc28:	0001a66d 	.word	0x0001a66d

0000bc2c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    bc2c:	b580      	push	{r7, lr}
    bc2e:	b084      	sub	sp, #16
    bc30:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    bc32:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc36:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    bc38:	2301      	movs	r3, #1
    bc3a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    bc3c:	2304      	movs	r3, #4
    bc3e:	713b      	strb	r3, [r7, #4]
    bc40:	2300      	movs	r3, #0
    bc42:	717b      	strb	r3, [r7, #5]
    bc44:	2300      	movs	r3, #0
    bc46:	71bb      	strb	r3, [r7, #6]
    bc48:	2300      	movs	r3, #0
    bc4a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    bc4c:	2101      	movs	r1, #1
    bc4e:	68f8      	ldr	r0, [r7, #12]
    bc50:	4b26      	ldr	r3, [pc, #152]	; (bcec <_usb_d_dev_init+0xc0>)
    bc52:	4798      	blx	r3
    bc54:	4603      	mov	r3, r0
    bc56:	f083 0301 	eor.w	r3, r3, #1
    bc5a:	b2db      	uxtb	r3, r3
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d011      	beq.n	bc84 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    bc60:	2102      	movs	r1, #2
    bc62:	68f8      	ldr	r0, [r7, #12]
    bc64:	4b22      	ldr	r3, [pc, #136]	; (bcf0 <_usb_d_dev_init+0xc4>)
    bc66:	4798      	blx	r3
    bc68:	4603      	mov	r3, r0
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	d006      	beq.n	bc7c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    bc6e:	68f8      	ldr	r0, [r7, #12]
    bc70:	4b20      	ldr	r3, [pc, #128]	; (bcf4 <_usb_d_dev_init+0xc8>)
    bc72:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    bc74:	2102      	movs	r1, #2
    bc76:	68f8      	ldr	r0, [r7, #12]
    bc78:	4b1f      	ldr	r3, [pc, #124]	; (bcf8 <_usb_d_dev_init+0xcc>)
    bc7a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    bc7c:	2101      	movs	r1, #1
    bc7e:	68f8      	ldr	r0, [r7, #12]
    bc80:	4b1e      	ldr	r3, [pc, #120]	; (bcfc <_usb_d_dev_init+0xd0>)
    bc82:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    bc84:	2101      	movs	r1, #1
    bc86:	68f8      	ldr	r0, [r7, #12]
    bc88:	4b1b      	ldr	r3, [pc, #108]	; (bcf8 <_usb_d_dev_init+0xcc>)
    bc8a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    bc8c:	4b1c      	ldr	r3, [pc, #112]	; (bd00 <_usb_d_dev_init+0xd4>)
    bc8e:	4a1d      	ldr	r2, [pc, #116]	; (bd04 <_usb_d_dev_init+0xd8>)
    bc90:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    bc92:	4b1b      	ldr	r3, [pc, #108]	; (bd00 <_usb_d_dev_init+0xd4>)
    bc94:	4a1b      	ldr	r2, [pc, #108]	; (bd04 <_usb_d_dev_init+0xd8>)
    bc96:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    bc98:	4b19      	ldr	r3, [pc, #100]	; (bd00 <_usb_d_dev_init+0xd4>)
    bc9a:	4a1a      	ldr	r2, [pc, #104]	; (bd04 <_usb_d_dev_init+0xd8>)
    bc9c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    bc9e:	4b18      	ldr	r3, [pc, #96]	; (bd00 <_usb_d_dev_init+0xd4>)
    bca0:	4a18      	ldr	r2, [pc, #96]	; (bd04 <_usb_d_dev_init+0xd8>)
    bca2:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    bca4:	4b16      	ldr	r3, [pc, #88]	; (bd00 <_usb_d_dev_init+0xd4>)
    bca6:	4a17      	ldr	r2, [pc, #92]	; (bd04 <_usb_d_dev_init+0xd8>)
    bca8:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    bcaa:	4b17      	ldr	r3, [pc, #92]	; (bd08 <_usb_d_dev_init+0xdc>)
    bcac:	4798      	blx	r3

	_usb_load_calib();
    bcae:	4b17      	ldr	r3, [pc, #92]	; (bd0c <_usb_d_dev_init+0xe0>)
    bcb0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    bcb2:	2104      	movs	r1, #4
    bcb4:	68f8      	ldr	r0, [r7, #12]
    bcb6:	4b11      	ldr	r3, [pc, #68]	; (bcfc <_usb_d_dev_init+0xd0>)
    bcb8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    bcba:	4b15      	ldr	r3, [pc, #84]	; (bd10 <_usb_d_dev_init+0xe4>)
    bcbc:	4619      	mov	r1, r3
    bcbe:	68f8      	ldr	r0, [r7, #12]
    bcc0:	4b14      	ldr	r3, [pc, #80]	; (bd14 <_usb_d_dev_init+0xe8>)
    bcc2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    bcc4:	7afb      	ldrb	r3, [r7, #11]
    bcc6:	f107 0210 	add.w	r2, r7, #16
    bcca:	4413      	add	r3, r2
    bccc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    bcd0:	f043 0301 	orr.w	r3, r3, #1
    bcd4:	b2db      	uxtb	r3, r3
    bcd6:	b29b      	uxth	r3, r3
    bcd8:	4619      	mov	r1, r3
    bcda:	68f8      	ldr	r0, [r7, #12]
    bcdc:	4b0e      	ldr	r3, [pc, #56]	; (bd18 <_usb_d_dev_init+0xec>)
    bcde:	4798      	blx	r3

	return ERR_NONE;
    bce0:	2300      	movs	r3, #0
}
    bce2:	4618      	mov	r0, r3
    bce4:	3710      	adds	r7, #16
    bce6:	46bd      	mov	sp, r7
    bce8:	bd80      	pop	{r7, pc}
    bcea:	bf00      	nop
    bcec:	0000a2c5 	.word	0x0000a2c5
    bcf0:	0000a615 	.word	0x0000a615
    bcf4:	0000a5e9 	.word	0x0000a5e9
    bcf8:	0000a29b 	.word	0x0000a29b
    bcfc:	0000a645 	.word	0x0000a645
    bd00:	20002578 	.word	0x20002578
    bd04:	0000a70d 	.word	0x0000a70d
    bd08:	0000bbb1 	.word	0x0000bbb1
    bd0c:	0000a725 	.word	0x0000a725
    bd10:	20002640 	.word	0x20002640
    bd14:	0000a6f1 	.word	0x0000a6f1
    bd18:	0000a6b5 	.word	0x0000a6b5

0000bd1c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    bd1c:	b580      	push	{r7, lr}
    bd1e:	b082      	sub	sp, #8
    bd20:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bd22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bd26:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    bd28:	2103      	movs	r1, #3
    bd2a:	6878      	ldr	r0, [r7, #4]
    bd2c:	4b17      	ldr	r3, [pc, #92]	; (bd8c <_usb_d_dev_enable+0x70>)
    bd2e:	4798      	blx	r3
    bd30:	4603      	mov	r3, r0
    bd32:	2b00      	cmp	r3, #0
    bd34:	d002      	beq.n	bd3c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    bd36:	f06f 0310 	mvn.w	r3, #16
    bd3a:	e023      	b.n	bd84 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    bd3c:	6878      	ldr	r0, [r7, #4]
    bd3e:	4b14      	ldr	r3, [pc, #80]	; (bd90 <_usb_d_dev_enable+0x74>)
    bd40:	4798      	blx	r3
    bd42:	4603      	mov	r3, r0
    bd44:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    bd46:	78fb      	ldrb	r3, [r7, #3]
    bd48:	f003 0302 	and.w	r3, r3, #2
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d107      	bne.n	bd60 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    bd50:	78fb      	ldrb	r3, [r7, #3]
    bd52:	f043 0302 	orr.w	r3, r3, #2
    bd56:	b2db      	uxtb	r3, r3
    bd58:	4619      	mov	r1, r3
    bd5a:	6878      	ldr	r0, [r7, #4]
    bd5c:	4b0d      	ldr	r3, [pc, #52]	; (bd94 <_usb_d_dev_enable+0x78>)
    bd5e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    bd60:	2050      	movs	r0, #80	; 0x50
    bd62:	4b0d      	ldr	r3, [pc, #52]	; (bd98 <_usb_d_dev_enable+0x7c>)
    bd64:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    bd66:	2051      	movs	r0, #81	; 0x51
    bd68:	4b0b      	ldr	r3, [pc, #44]	; (bd98 <_usb_d_dev_enable+0x7c>)
    bd6a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    bd6c:	2052      	movs	r0, #82	; 0x52
    bd6e:	4b0a      	ldr	r3, [pc, #40]	; (bd98 <_usb_d_dev_enable+0x7c>)
    bd70:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    bd72:	2053      	movs	r0, #83	; 0x53
    bd74:	4b08      	ldr	r3, [pc, #32]	; (bd98 <_usb_d_dev_enable+0x7c>)
    bd76:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    bd78:	f240 218d 	movw	r1, #653	; 0x28d
    bd7c:	6878      	ldr	r0, [r7, #4]
    bd7e:	4b07      	ldr	r3, [pc, #28]	; (bd9c <_usb_d_dev_enable+0x80>)
    bd80:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    bd82:	2300      	movs	r3, #0
}
    bd84:	4618      	mov	r0, r3
    bd86:	3708      	adds	r7, #8
    bd88:	46bd      	mov	sp, r7
    bd8a:	bd80      	pop	{r7, pc}
    bd8c:	0000a5bf 	.word	0x0000a5bf
    bd90:	0000a66d 	.word	0x0000a66d
    bd94:	0000a645 	.word	0x0000a645
    bd98:	0000a1d1 	.word	0x0000a1d1
    bd9c:	0000a569 	.word	0x0000a569

0000bda0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    bda0:	b580      	push	{r7, lr}
    bda2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    bda4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bda8:	4b01      	ldr	r3, [pc, #4]	; (bdb0 <_usb_d_dev_attach+0x10>)
    bdaa:	4798      	blx	r3
}
    bdac:	bf00      	nop
    bdae:	bd80      	pop	{r7, pc}
    bdb0:	0000a691 	.word	0x0000a691

0000bdb4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b082      	sub	sp, #8
    bdb8:	af00      	add	r7, sp, #0
    bdba:	4603      	mov	r3, r0
    bdbc:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    bdbe:	79fb      	ldrb	r3, [r7, #7]
    bdc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bdc4:	b2db      	uxtb	r3, r3
    bdc6:	4619      	mov	r1, r3
    bdc8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bdcc:	4b02      	ldr	r3, [pc, #8]	; (bdd8 <_usb_d_dev_set_address+0x24>)
    bdce:	4798      	blx	r3
}
    bdd0:	bf00      	nop
    bdd2:	3708      	adds	r7, #8
    bdd4:	46bd      	mov	sp, r7
    bdd6:	bd80      	pop	{r7, pc}
    bdd8:	0000a6d3 	.word	0x0000a6d3

0000bddc <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bddc:	b590      	push	{r4, r7, lr}
    bdde:	b085      	sub	sp, #20
    bde0:	af00      	add	r7, sp, #0
    bde2:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    bde4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bde8:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bdea:	687b      	ldr	r3, [r7, #4]
    bdec:	7c9b      	ldrb	r3, [r3, #18]
    bdee:	f003 030f 	and.w	r3, r3, #15
    bdf2:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	68db      	ldr	r3, [r3, #12]
    bdf8:	461a      	mov	r2, r3
    bdfa:	7afb      	ldrb	r3, [r7, #11]
    bdfc:	2100      	movs	r1, #0
    bdfe:	4618      	mov	r0, r3
    be00:	4b0f      	ldr	r3, [pc, #60]	; (be40 <_usb_d_dev_trans_setup+0x64>)
    be02:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	8a1b      	ldrh	r3, [r3, #16]
    be08:	461a      	mov	r2, r3
    be0a:	7af8      	ldrb	r0, [r7, #11]
    be0c:	2300      	movs	r3, #0
    be0e:	2100      	movs	r1, #0
    be10:	4c0c      	ldr	r4, [pc, #48]	; (be44 <_usb_d_dev_trans_setup+0x68>)
    be12:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    be14:	7afb      	ldrb	r3, [r7, #11]
    be16:	22b0      	movs	r2, #176	; 0xb0
    be18:	4619      	mov	r1, r3
    be1a:	68f8      	ldr	r0, [r7, #12]
    be1c:	4b0a      	ldr	r3, [pc, #40]	; (be48 <_usb_d_dev_trans_setup+0x6c>)
    be1e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    be20:	7afb      	ldrb	r3, [r7, #11]
    be22:	2200      	movs	r2, #0
    be24:	2100      	movs	r1, #0
    be26:	4618      	mov	r0, r3
    be28:	4b08      	ldr	r3, [pc, #32]	; (be4c <_usb_d_dev_trans_setup+0x70>)
    be2a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    be2c:	7afb      	ldrb	r3, [r7, #11]
    be2e:	2210      	movs	r2, #16
    be30:	4619      	mov	r1, r3
    be32:	68f8      	ldr	r0, [r7, #12]
    be34:	4b06      	ldr	r3, [pc, #24]	; (be50 <_usb_d_dev_trans_setup+0x74>)
    be36:	4798      	blx	r3
}
    be38:	bf00      	nop
    be3a:	3714      	adds	r7, #20
    be3c:	46bd      	mov	sp, r7
    be3e:	bd90      	pop	{r4, r7, pc}
    be40:	0000ab71 	.word	0x0000ab71
    be44:	0000acf9 	.word	0x0000acf9
    be48:	0000a3d1 	.word	0x0000a3d1
    be4c:	0000adc9 	.word	0x0000adc9
    be50:	0000a425 	.word	0x0000a425

0000be54 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    be54:	b580      	push	{r7, lr}
    be56:	b088      	sub	sp, #32
    be58:	af00      	add	r7, sp, #0
    be5a:	4603      	mov	r3, r0
    be5c:	71fb      	strb	r3, [r7, #7]
    be5e:	460b      	mov	r3, r1
    be60:	71bb      	strb	r3, [r7, #6]
    be62:	4613      	mov	r3, r2
    be64:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    be66:	79fb      	ldrb	r3, [r7, #7]
    be68:	f003 030f 	and.w	r3, r3, #15
    be6c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    be6e:	79fb      	ldrb	r3, [r7, #7]
    be70:	f003 0380 	and.w	r3, r3, #128	; 0x80
    be74:	2b00      	cmp	r3, #0
    be76:	bf14      	ite	ne
    be78:	2301      	movne	r3, #1
    be7a:	2300      	moveq	r3, #0
    be7c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    be7e:	7fba      	ldrb	r2, [r7, #30]
    be80:	7ffb      	ldrb	r3, [r7, #31]
    be82:	4611      	mov	r1, r2
    be84:	4618      	mov	r0, r3
    be86:	4b3e      	ldr	r3, [pc, #248]	; (bf80 <_usb_d_dev_ep_init+0x12c>)
    be88:	4798      	blx	r3
    be8a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    be8c:	79bb      	ldrb	r3, [r7, #6]
    be8e:	f003 0303 	and.w	r3, r3, #3
    be92:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    be94:	7ffa      	ldrb	r2, [r7, #31]
    be96:	4613      	mov	r3, r2
    be98:	005b      	lsls	r3, r3, #1
    be9a:	4413      	add	r3, r2
    be9c:	009b      	lsls	r3, r3, #2
    be9e:	4a39      	ldr	r2, [pc, #228]	; (bf84 <_usb_d_dev_ep_init+0x130>)
    bea0:	4413      	add	r3, r2
    bea2:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    bea4:	7ffb      	ldrb	r3, [r7, #31]
    bea6:	2b04      	cmp	r3, #4
    bea8:	d902      	bls.n	beb0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    beaa:	f06f 0311 	mvn.w	r3, #17
    beae:	e063      	b.n	bf78 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    beb0:	69bb      	ldr	r3, [r7, #24]
    beb2:	7c9b      	ldrb	r3, [r3, #18]
    beb4:	2bff      	cmp	r3, #255	; 0xff
    beb6:	d002      	beq.n	bebe <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    beb8:	f06f 0313 	mvn.w	r3, #19
    bebc:	e05c      	b.n	bf78 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    bebe:	7dfb      	ldrb	r3, [r7, #23]
    bec0:	2b00      	cmp	r3, #0
    bec2:	d11f      	bne.n	bf04 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    bec4:	7fbb      	ldrb	r3, [r7, #30]
    bec6:	2b00      	cmp	r3, #0
    bec8:	bf14      	ite	ne
    beca:	2301      	movne	r3, #1
    becc:	2300      	moveq	r3, #0
    bece:	b2db      	uxtb	r3, r3
    bed0:	f083 0301 	eor.w	r3, r3, #1
    bed4:	b2db      	uxtb	r3, r3
    bed6:	f003 0301 	and.w	r3, r3, #1
    beda:	b2da      	uxtb	r2, r3
    bedc:	7ffb      	ldrb	r3, [r7, #31]
    bede:	4611      	mov	r1, r2
    bee0:	4618      	mov	r0, r3
    bee2:	4b27      	ldr	r3, [pc, #156]	; (bf80 <_usb_d_dev_ep_init+0x12c>)
    bee4:	4798      	blx	r3
    bee6:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    bee8:	68fb      	ldr	r3, [r7, #12]
    beea:	7c9b      	ldrb	r3, [r3, #18]
    beec:	2bff      	cmp	r3, #255	; 0xff
    beee:	d002      	beq.n	bef6 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    bef0:	f06f 0313 	mvn.w	r3, #19
    bef4:	e040      	b.n	bf78 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    bef6:	693b      	ldr	r3, [r7, #16]
    bef8:	681b      	ldr	r3, [r3, #0]
    befa:	2b00      	cmp	r3, #0
    befc:	d102      	bne.n	bf04 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    befe:	f06f 0312 	mvn.w	r3, #18
    bf02:	e039      	b.n	bf78 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    bf04:	7fbb      	ldrb	r3, [r7, #30]
    bf06:	2b00      	cmp	r3, #0
    bf08:	d007      	beq.n	bf1a <_usb_d_dev_ep_init+0xc6>
    bf0a:	693b      	ldr	r3, [r7, #16]
    bf0c:	685b      	ldr	r3, [r3, #4]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	bf14      	ite	ne
    bf12:	2301      	movne	r3, #1
    bf14:	2300      	moveq	r3, #0
    bf16:	b2db      	uxtb	r3, r3
    bf18:	e006      	b.n	bf28 <_usb_d_dev_ep_init+0xd4>
    bf1a:	693b      	ldr	r3, [r7, #16]
    bf1c:	681b      	ldr	r3, [r3, #0]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	bf14      	ite	ne
    bf22:	2301      	movne	r3, #1
    bf24:	2300      	moveq	r3, #0
    bf26:	b2db      	uxtb	r3, r3
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d00f      	beq.n	bf4c <_usb_d_dev_ep_init+0xf8>
    bf2c:	7fbb      	ldrb	r3, [r7, #30]
    bf2e:	2b00      	cmp	r3, #0
    bf30:	d003      	beq.n	bf3a <_usb_d_dev_ep_init+0xe6>
    bf32:	693b      	ldr	r3, [r7, #16]
    bf34:	895b      	ldrh	r3, [r3, #10]
    bf36:	461a      	mov	r2, r3
    bf38:	e002      	b.n	bf40 <_usb_d_dev_ep_init+0xec>
    bf3a:	693b      	ldr	r3, [r7, #16]
    bf3c:	891b      	ldrh	r3, [r3, #8]
    bf3e:	461a      	mov	r2, r3
    bf40:	88bb      	ldrh	r3, [r7, #4]
    bf42:	429a      	cmp	r2, r3
    bf44:	da02      	bge.n	bf4c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    bf46:	f06f 0312 	mvn.w	r3, #18
    bf4a:	e015      	b.n	bf78 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    bf4c:	7fbb      	ldrb	r3, [r7, #30]
    bf4e:	2b00      	cmp	r3, #0
    bf50:	d002      	beq.n	bf58 <_usb_d_dev_ep_init+0x104>
    bf52:	693b      	ldr	r3, [r7, #16]
    bf54:	685b      	ldr	r3, [r3, #4]
    bf56:	e001      	b.n	bf5c <_usb_d_dev_ep_init+0x108>
    bf58:	693b      	ldr	r3, [r7, #16]
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	69ba      	ldr	r2, [r7, #24]
    bf5e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    bf60:	69bb      	ldr	r3, [r7, #24]
    bf62:	88ba      	ldrh	r2, [r7, #4]
    bf64:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    bf66:	7dfb      	ldrb	r3, [r7, #23]
    bf68:	3301      	adds	r3, #1
    bf6a:	b2da      	uxtb	r2, r3
    bf6c:	69bb      	ldr	r3, [r7, #24]
    bf6e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    bf70:	69bb      	ldr	r3, [r7, #24]
    bf72:	79fa      	ldrb	r2, [r7, #7]
    bf74:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    bf76:	2300      	movs	r3, #0
}
    bf78:	4618      	mov	r0, r3
    bf7a:	3720      	adds	r7, #32
    bf7c:	46bd      	mov	sp, r7
    bf7e:	bd80      	pop	{r7, pc}
    bf80:	0000ae85 	.word	0x0000ae85
    bf84:	0001ae30 	.word	0x0001ae30

0000bf88 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    bf88:	b580      	push	{r7, lr}
    bf8a:	b086      	sub	sp, #24
    bf8c:	af00      	add	r7, sp, #0
    bf8e:	4603      	mov	r3, r0
    bf90:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    bf92:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf96:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    bf98:	79fb      	ldrb	r3, [r7, #7]
    bf9a:	f003 030f 	and.w	r3, r3, #15
    bf9e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    bfa0:	79fb      	ldrb	r3, [r7, #7]
    bfa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	bf14      	ite	ne
    bfaa:	2301      	movne	r3, #1
    bfac:	2300      	moveq	r3, #0
    bfae:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bfb0:	7cba      	ldrb	r2, [r7, #18]
    bfb2:	7cfb      	ldrb	r3, [r7, #19]
    bfb4:	4611      	mov	r1, r2
    bfb6:	4618      	mov	r0, r3
    bfb8:	4b2a      	ldr	r3, [pc, #168]	; (c064 <_usb_d_dev_ep_deinit+0xdc>)
    bfba:	4798      	blx	r3
    bfbc:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    bfbe:	7cfb      	ldrb	r3, [r7, #19]
    bfc0:	2b04      	cmp	r3, #4
    bfc2:	d84a      	bhi.n	c05a <_usb_d_dev_ep_deinit+0xd2>
    bfc4:	68fb      	ldr	r3, [r7, #12]
    bfc6:	7c9b      	ldrb	r3, [r3, #18]
    bfc8:	2bff      	cmp	r3, #255	; 0xff
    bfca:	d046      	beq.n	c05a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    bfcc:	7cbb      	ldrb	r3, [r7, #18]
    bfce:	2203      	movs	r2, #3
    bfd0:	4619      	mov	r1, r3
    bfd2:	68f8      	ldr	r0, [r7, #12]
    bfd4:	4b24      	ldr	r3, [pc, #144]	; (c068 <_usb_d_dev_ep_deinit+0xe0>)
    bfd6:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    bfd8:	68fb      	ldr	r3, [r7, #12]
    bfda:	7cdb      	ldrb	r3, [r3, #19]
    bfdc:	f003 0307 	and.w	r3, r3, #7
    bfe0:	b2db      	uxtb	r3, r3
    bfe2:	2b01      	cmp	r3, #1
    bfe4:	d107      	bne.n	bff6 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    bfe6:	79fb      	ldrb	r3, [r7, #7]
    bfe8:	697a      	ldr	r2, [r7, #20]
    bfea:	3308      	adds	r3, #8
    bfec:	015b      	lsls	r3, r3, #5
    bfee:	4413      	add	r3, r2
    bff0:	2200      	movs	r2, #0
    bff2:	701a      	strb	r2, [r3, #0]
    bff4:	e02a      	b.n	c04c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    bff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bffa:	2b00      	cmp	r3, #0
    bffc:	da15      	bge.n	c02a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    bffe:	79fb      	ldrb	r3, [r7, #7]
    c000:	f003 030f 	and.w	r3, r3, #15
    c004:	79fa      	ldrb	r2, [r7, #7]
    c006:	f002 020f 	and.w	r2, r2, #15
    c00a:	6979      	ldr	r1, [r7, #20]
    c00c:	3208      	adds	r2, #8
    c00e:	0152      	lsls	r2, r2, #5
    c010:	440a      	add	r2, r1
    c012:	7812      	ldrb	r2, [r2, #0]
    c014:	b2d2      	uxtb	r2, r2
    c016:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    c01a:	b2d1      	uxtb	r1, r2
    c01c:	697a      	ldr	r2, [r7, #20]
    c01e:	3308      	adds	r3, #8
    c020:	015b      	lsls	r3, r3, #5
    c022:	4413      	add	r3, r2
    c024:	460a      	mov	r2, r1
    c026:	701a      	strb	r2, [r3, #0]
    c028:	e010      	b.n	c04c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c02a:	79fb      	ldrb	r3, [r7, #7]
    c02c:	79fa      	ldrb	r2, [r7, #7]
    c02e:	6979      	ldr	r1, [r7, #20]
    c030:	3208      	adds	r2, #8
    c032:	0152      	lsls	r2, r2, #5
    c034:	440a      	add	r2, r1
    c036:	7812      	ldrb	r2, [r2, #0]
    c038:	b2d2      	uxtb	r2, r2
    c03a:	f022 0207 	bic.w	r2, r2, #7
    c03e:	b2d1      	uxtb	r1, r2
    c040:	697a      	ldr	r2, [r7, #20]
    c042:	3308      	adds	r3, #8
    c044:	015b      	lsls	r3, r3, #5
    c046:	4413      	add	r3, r2
    c048:	460a      	mov	r2, r1
    c04a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    c04c:	68fb      	ldr	r3, [r7, #12]
    c04e:	2200      	movs	r2, #0
    c050:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    c052:	68fb      	ldr	r3, [r7, #12]
    c054:	22ff      	movs	r2, #255	; 0xff
    c056:	749a      	strb	r2, [r3, #18]
    c058:	e000      	b.n	c05c <_usb_d_dev_ep_deinit+0xd4>
		return;
    c05a:	bf00      	nop
}
    c05c:	3718      	adds	r7, #24
    c05e:	46bd      	mov	sp, r7
    c060:	bd80      	pop	{r7, pc}
    c062:	bf00      	nop
    c064:	0000ae85 	.word	0x0000ae85
    c068:	0000c4bd 	.word	0x0000c4bd

0000c06c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    c06c:	b5b0      	push	{r4, r5, r7, lr}
    c06e:	b088      	sub	sp, #32
    c070:	af00      	add	r7, sp, #0
    c072:	4603      	mov	r3, r0
    c074:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    c076:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c07a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    c07c:	79fb      	ldrb	r3, [r7, #7]
    c07e:	f003 030f 	and.w	r3, r3, #15
    c082:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    c084:	79fb      	ldrb	r3, [r7, #7]
    c086:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c08a:	2b00      	cmp	r3, #0
    c08c:	bf14      	ite	ne
    c08e:	2301      	movne	r3, #1
    c090:	2300      	moveq	r3, #0
    c092:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c094:	7eba      	ldrb	r2, [r7, #26]
    c096:	7efb      	ldrb	r3, [r7, #27]
    c098:	4611      	mov	r1, r2
    c09a:	4618      	mov	r0, r3
    c09c:	4b70      	ldr	r3, [pc, #448]	; (c260 <_usb_d_dev_ep_enable+0x1f4>)
    c09e:	4798      	blx	r3
    c0a0:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    c0a2:	7efb      	ldrb	r3, [r7, #27]
    c0a4:	4619      	mov	r1, r3
    c0a6:	69f8      	ldr	r0, [r7, #28]
    c0a8:	4b6e      	ldr	r3, [pc, #440]	; (c264 <_usb_d_dev_ep_enable+0x1f8>)
    c0aa:	4798      	blx	r3
    c0ac:	4603      	mov	r3, r0
    c0ae:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c0b0:	7efb      	ldrb	r3, [r7, #27]
    c0b2:	2b04      	cmp	r3, #4
    c0b4:	d803      	bhi.n	c0be <_usb_d_dev_ep_enable+0x52>
    c0b6:	697b      	ldr	r3, [r7, #20]
    c0b8:	7c9b      	ldrb	r3, [r3, #18]
    c0ba:	2bff      	cmp	r3, #255	; 0xff
    c0bc:	d102      	bne.n	c0c4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    c0be:	f06f 0311 	mvn.w	r3, #17
    c0c2:	e0c8      	b.n	c256 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c0c4:	7efb      	ldrb	r3, [r7, #27]
    c0c6:	015b      	lsls	r3, r3, #5
    c0c8:	4a67      	ldr	r2, [pc, #412]	; (c268 <_usb_d_dev_ep_enable+0x1fc>)
    c0ca:	4413      	add	r3, r2
    c0cc:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c0ce:	697b      	ldr	r3, [r7, #20]
    c0d0:	7cdb      	ldrb	r3, [r3, #19]
    c0d2:	f003 0307 	and.w	r3, r3, #7
    c0d6:	b2db      	uxtb	r3, r3
    c0d8:	2b01      	cmp	r3, #1
    c0da:	d14b      	bne.n	c174 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c0dc:	7cfb      	ldrb	r3, [r7, #19]
    c0de:	f003 0377 	and.w	r3, r3, #119	; 0x77
    c0e2:	2b00      	cmp	r3, #0
    c0e4:	d002      	beq.n	c0ec <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    c0e6:	f06f 0313 	mvn.w	r3, #19
    c0ea:	e0b4      	b.n	c256 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    c0ec:	7efb      	ldrb	r3, [r7, #27]
    c0ee:	2211      	movs	r2, #17
    c0f0:	4619      	mov	r1, r3
    c0f2:	69f8      	ldr	r0, [r7, #28]
    c0f4:	4b5d      	ldr	r3, [pc, #372]	; (c26c <_usb_d_dev_ep_enable+0x200>)
    c0f6:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c0f8:	697b      	ldr	r3, [r7, #20]
    c0fa:	8a1b      	ldrh	r3, [r3, #16]
    c0fc:	039b      	lsls	r3, r3, #14
    c0fe:	4c5c      	ldr	r4, [pc, #368]	; (c270 <_usb_d_dev_ep_enable+0x204>)
    c100:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c102:	697b      	ldr	r3, [r7, #20]
    c104:	8a1b      	ldrh	r3, [r3, #16]
    c106:	4618      	mov	r0, r3
    c108:	4b5a      	ldr	r3, [pc, #360]	; (c274 <_usb_d_dev_ep_enable+0x208>)
    c10a:	4798      	blx	r3
    c10c:	4603      	mov	r3, r0
    c10e:	071b      	lsls	r3, r3, #28
    c110:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c114:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c118:	68fb      	ldr	r3, [r7, #12]
    c11a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    c11c:	68fb      	ldr	r3, [r7, #12]
    c11e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c122:	697b      	ldr	r3, [r7, #20]
    c124:	8a1b      	ldrh	r3, [r3, #16]
    c126:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c12a:	697b      	ldr	r3, [r7, #20]
    c12c:	8a1b      	ldrh	r3, [r3, #16]
    c12e:	4618      	mov	r0, r3
    c130:	4b50      	ldr	r3, [pc, #320]	; (c274 <_usb_d_dev_ep_enable+0x208>)
    c132:	4798      	blx	r3
    c134:	4603      	mov	r3, r0
    c136:	071b      	lsls	r3, r3, #28
    c138:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c13c:	432b      	orrs	r3, r5
    c13e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c140:	7efb      	ldrb	r3, [r7, #27]
    c142:	2200      	movs	r2, #0
    c144:	2100      	movs	r1, #0
    c146:	4618      	mov	r0, r3
    c148:	4b4b      	ldr	r3, [pc, #300]	; (c278 <_usb_d_dev_ep_enable+0x20c>)
    c14a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c14c:	7efb      	ldrb	r3, [r7, #27]
    c14e:	2200      	movs	r2, #0
    c150:	2101      	movs	r1, #1
    c152:	4618      	mov	r0, r3
    c154:	4b49      	ldr	r3, [pc, #292]	; (c27c <_usb_d_dev_ep_enable+0x210>)
    c156:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c158:	7efb      	ldrb	r3, [r7, #27]
    c15a:	2100      	movs	r1, #0
    c15c:	4618      	mov	r0, r3
    c15e:	4b48      	ldr	r3, [pc, #288]	; (c280 <_usb_d_dev_ep_enable+0x214>)
    c160:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c162:	7efb      	ldrb	r3, [r7, #27]
    c164:	2101      	movs	r1, #1
    c166:	4618      	mov	r0, r3
    c168:	4b45      	ldr	r3, [pc, #276]	; (c280 <_usb_d_dev_ep_enable+0x214>)
    c16a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c16c:	6978      	ldr	r0, [r7, #20]
    c16e:	4b45      	ldr	r3, [pc, #276]	; (c284 <_usb_d_dev_ep_enable+0x218>)
    c170:	4798      	blx	r3
    c172:	e06f      	b.n	c254 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c174:	7ebb      	ldrb	r3, [r7, #26]
    c176:	2b00      	cmp	r3, #0
    c178:	d038      	beq.n	c1ec <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c17a:	7cfb      	ldrb	r3, [r7, #19]
    c17c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c180:	2b00      	cmp	r3, #0
    c182:	d002      	beq.n	c18a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c184:	f06f 0313 	mvn.w	r3, #19
    c188:	e065      	b.n	c256 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c18a:	697b      	ldr	r3, [r7, #20]
    c18c:	7cdb      	ldrb	r3, [r3, #19]
    c18e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c192:	b2db      	uxtb	r3, r3
    c194:	011b      	lsls	r3, r3, #4
    c196:	b2db      	uxtb	r3, r3
    c198:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c19c:	b2da      	uxtb	r2, r3
    c19e:	7cfb      	ldrb	r3, [r7, #19]
    c1a0:	4313      	orrs	r3, r2
    c1a2:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c1a4:	7cfa      	ldrb	r2, [r7, #19]
    c1a6:	7efb      	ldrb	r3, [r7, #27]
    c1a8:	4619      	mov	r1, r3
    c1aa:	69f8      	ldr	r0, [r7, #28]
    c1ac:	4b2f      	ldr	r3, [pc, #188]	; (c26c <_usb_d_dev_ep_enable+0x200>)
    c1ae:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c1b0:	68fb      	ldr	r3, [r7, #12]
    c1b2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c1b6:	697b      	ldr	r3, [r7, #20]
    c1b8:	8a1b      	ldrh	r3, [r3, #16]
    c1ba:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c1be:	697b      	ldr	r3, [r7, #20]
    c1c0:	8a1b      	ldrh	r3, [r3, #16]
    c1c2:	4618      	mov	r0, r3
    c1c4:	4b2b      	ldr	r3, [pc, #172]	; (c274 <_usb_d_dev_ep_enable+0x208>)
    c1c6:	4798      	blx	r3
    c1c8:	4603      	mov	r3, r0
    c1ca:	071b      	lsls	r3, r3, #28
    c1cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c1d0:	432b      	orrs	r3, r5
    c1d2:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c1d4:	7efb      	ldrb	r3, [r7, #27]
    c1d6:	2200      	movs	r2, #0
    c1d8:	2101      	movs	r1, #1
    c1da:	4618      	mov	r0, r3
    c1dc:	4b27      	ldr	r3, [pc, #156]	; (c27c <_usb_d_dev_ep_enable+0x210>)
    c1de:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c1e0:	7efb      	ldrb	r3, [r7, #27]
    c1e2:	2101      	movs	r1, #1
    c1e4:	4618      	mov	r0, r3
    c1e6:	4b26      	ldr	r3, [pc, #152]	; (c280 <_usb_d_dev_ep_enable+0x214>)
    c1e8:	4798      	blx	r3
    c1ea:	e033      	b.n	c254 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c1ec:	7cfb      	ldrb	r3, [r7, #19]
    c1ee:	f003 0307 	and.w	r3, r3, #7
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d002      	beq.n	c1fc <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c1f6:	f06f 0313 	mvn.w	r3, #19
    c1fa:	e02c      	b.n	c256 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c1fc:	697b      	ldr	r3, [r7, #20]
    c1fe:	7cdb      	ldrb	r3, [r3, #19]
    c200:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c204:	b2db      	uxtb	r3, r3
    c206:	461a      	mov	r2, r3
    c208:	7cfb      	ldrb	r3, [r7, #19]
    c20a:	4313      	orrs	r3, r2
    c20c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c20e:	7cfa      	ldrb	r2, [r7, #19]
    c210:	7efb      	ldrb	r3, [r7, #27]
    c212:	4619      	mov	r1, r3
    c214:	69f8      	ldr	r0, [r7, #28]
    c216:	4b15      	ldr	r3, [pc, #84]	; (c26c <_usb_d_dev_ep_enable+0x200>)
    c218:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c21a:	697b      	ldr	r3, [r7, #20]
    c21c:	8a1b      	ldrh	r3, [r3, #16]
    c21e:	039b      	lsls	r3, r3, #14
    c220:	4c13      	ldr	r4, [pc, #76]	; (c270 <_usb_d_dev_ep_enable+0x204>)
    c222:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c224:	697b      	ldr	r3, [r7, #20]
    c226:	8a1b      	ldrh	r3, [r3, #16]
    c228:	4618      	mov	r0, r3
    c22a:	4b12      	ldr	r3, [pc, #72]	; (c274 <_usb_d_dev_ep_enable+0x208>)
    c22c:	4798      	blx	r3
    c22e:	4603      	mov	r3, r0
    c230:	071b      	lsls	r3, r3, #28
    c232:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c236:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c23a:	68fb      	ldr	r3, [r7, #12]
    c23c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c23e:	7efb      	ldrb	r3, [r7, #27]
    c240:	2200      	movs	r2, #0
    c242:	2100      	movs	r1, #0
    c244:	4618      	mov	r0, r3
    c246:	4b0c      	ldr	r3, [pc, #48]	; (c278 <_usb_d_dev_ep_enable+0x20c>)
    c248:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c24a:	7efb      	ldrb	r3, [r7, #27]
    c24c:	2100      	movs	r1, #0
    c24e:	4618      	mov	r0, r3
    c250:	4b0b      	ldr	r3, [pc, #44]	; (c280 <_usb_d_dev_ep_enable+0x214>)
    c252:	4798      	blx	r3
	}

	return USB_OK;
    c254:	2300      	movs	r3, #0
}
    c256:	4618      	mov	r0, r3
    c258:	3720      	adds	r7, #32
    c25a:	46bd      	mov	sp, r7
    c25c:	bdb0      	pop	{r4, r5, r7, pc}
    c25e:	bf00      	nop
    c260:	0000ae85 	.word	0x0000ae85
    c264:	0000a50b 	.word	0x0000a50b
    c268:	20002640 	.word	0x20002640
    c26c:	0000a4e1 	.word	0x0000a4e1
    c270:	0fffc000 	.word	0x0fffc000
    c274:	0000ae21 	.word	0x0000ae21
    c278:	0000adc9 	.word	0x0000adc9
    c27c:	0000ad71 	.word	0x0000ad71
    c280:	0000ad39 	.word	0x0000ad39
    c284:	0000bddd 	.word	0x0000bddd

0000c288 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c288:	b580      	push	{r7, lr}
    c28a:	b084      	sub	sp, #16
    c28c:	af00      	add	r7, sp, #0
    c28e:	6078      	str	r0, [r7, #4]
    c290:	460b      	mov	r3, r1
    c292:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c294:	687b      	ldr	r3, [r7, #4]
    c296:	7c9b      	ldrb	r3, [r3, #18]
    c298:	f003 030f 	and.w	r3, r3, #15
    c29c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c29e:	78fa      	ldrb	r2, [r7, #3]
    c2a0:	7bfb      	ldrb	r3, [r7, #15]
    c2a2:	4611      	mov	r1, r2
    c2a4:	4618      	mov	r0, r3
    c2a6:	4b03      	ldr	r3, [pc, #12]	; (c2b4 <_usb_d_dev_ep_stall_get+0x2c>)
    c2a8:	4798      	blx	r3
    c2aa:	4603      	mov	r3, r0
}
    c2ac:	4618      	mov	r0, r3
    c2ae:	3710      	adds	r7, #16
    c2b0:	46bd      	mov	sp, r7
    c2b2:	bd80      	pop	{r7, pc}
    c2b4:	0000a979 	.word	0x0000a979

0000c2b8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c2b8:	b580      	push	{r7, lr}
    c2ba:	b084      	sub	sp, #16
    c2bc:	af00      	add	r7, sp, #0
    c2be:	6078      	str	r0, [r7, #4]
    c2c0:	460b      	mov	r3, r1
    c2c2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c2c4:	687b      	ldr	r3, [r7, #4]
    c2c6:	7c9b      	ldrb	r3, [r3, #18]
    c2c8:	f003 030f 	and.w	r3, r3, #15
    c2cc:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c2ce:	78f9      	ldrb	r1, [r7, #3]
    c2d0:	7bfb      	ldrb	r3, [r7, #15]
    c2d2:	2201      	movs	r2, #1
    c2d4:	4618      	mov	r0, r3
    c2d6:	4b0a      	ldr	r3, [pc, #40]	; (c300 <_usb_d_dev_ep_stall_set+0x48>)
    c2d8:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c2da:	78fb      	ldrb	r3, [r7, #3]
    c2dc:	2220      	movs	r2, #32
    c2de:	409a      	lsls	r2, r3
    c2e0:	7bfb      	ldrb	r3, [r7, #15]
    c2e2:	4611      	mov	r1, r2
    c2e4:	4618      	mov	r0, r3
    c2e6:	4b07      	ldr	r3, [pc, #28]	; (c304 <_usb_d_dev_ep_stall_set+0x4c>)
    c2e8:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c2ea:	687a      	ldr	r2, [r7, #4]
    c2ec:	7cd3      	ldrb	r3, [r2, #19]
    c2ee:	f043 0308 	orr.w	r3, r3, #8
    c2f2:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c2f4:	2300      	movs	r3, #0
}
    c2f6:	4618      	mov	r0, r3
    c2f8:	3710      	adds	r7, #16
    c2fa:	46bd      	mov	sp, r7
    c2fc:	bd80      	pop	{r7, pc}
    c2fe:	bf00      	nop
    c300:	0000a921 	.word	0x0000a921
    c304:	0000a8a1 	.word	0x0000a8a1

0000c308 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c308:	b580      	push	{r7, lr}
    c30a:	b084      	sub	sp, #16
    c30c:	af00      	add	r7, sp, #0
    c30e:	6078      	str	r0, [r7, #4]
    c310:	460b      	mov	r3, r1
    c312:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c314:	687b      	ldr	r3, [r7, #4]
    c316:	7c9b      	ldrb	r3, [r3, #18]
    c318:	f003 030f 	and.w	r3, r3, #15
    c31c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c31e:	78fa      	ldrb	r2, [r7, #3]
    c320:	7bfb      	ldrb	r3, [r7, #15]
    c322:	4611      	mov	r1, r2
    c324:	4618      	mov	r0, r3
    c326:	4b28      	ldr	r3, [pc, #160]	; (c3c8 <_usb_d_dev_ep_stall_clr+0xc0>)
    c328:	4798      	blx	r3
    c32a:	4603      	mov	r3, r0
    c32c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c32e:	7bbb      	ldrb	r3, [r7, #14]
    c330:	f083 0301 	eor.w	r3, r3, #1
    c334:	b2db      	uxtb	r3, r3
    c336:	2b00      	cmp	r3, #0
    c338:	d001      	beq.n	c33e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c33a:	2300      	movs	r3, #0
    c33c:	e040      	b.n	c3c0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c33e:	78f9      	ldrb	r1, [r7, #3]
    c340:	7bfb      	ldrb	r3, [r7, #15]
    c342:	2200      	movs	r2, #0
    c344:	4618      	mov	r0, r3
    c346:	4b21      	ldr	r3, [pc, #132]	; (c3cc <_usb_d_dev_ep_stall_clr+0xc4>)
    c348:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c34a:	78fb      	ldrb	r3, [r7, #3]
    c34c:	2220      	movs	r2, #32
    c34e:	409a      	lsls	r2, r3
    c350:	7bfb      	ldrb	r3, [r7, #15]
    c352:	4611      	mov	r1, r2
    c354:	4618      	mov	r0, r3
    c356:	4b1e      	ldr	r3, [pc, #120]	; (c3d0 <_usb_d_dev_ep_stall_clr+0xc8>)
    c358:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c35a:	78fa      	ldrb	r2, [r7, #3]
    c35c:	7bfb      	ldrb	r3, [r7, #15]
    c35e:	4611      	mov	r1, r2
    c360:	4618      	mov	r0, r3
    c362:	4b1c      	ldr	r3, [pc, #112]	; (c3d4 <_usb_d_dev_ep_stall_clr+0xcc>)
    c364:	4798      	blx	r3
    c366:	4603      	mov	r3, r0
    c368:	2b00      	cmp	r3, #0
    c36a:	d00b      	beq.n	c384 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c36c:	78fa      	ldrb	r2, [r7, #3]
    c36e:	7bfb      	ldrb	r3, [r7, #15]
    c370:	4611      	mov	r1, r2
    c372:	4618      	mov	r0, r3
    c374:	4b18      	ldr	r3, [pc, #96]	; (c3d8 <_usb_d_dev_ep_stall_clr+0xd0>)
    c376:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c378:	78f9      	ldrb	r1, [r7, #3]
    c37a:	7bfb      	ldrb	r3, [r7, #15]
    c37c:	2200      	movs	r2, #0
    c37e:	4618      	mov	r0, r3
    c380:	4b16      	ldr	r3, [pc, #88]	; (c3dc <_usb_d_dev_ep_stall_clr+0xd4>)
    c382:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c384:	687b      	ldr	r3, [r7, #4]
    c386:	7cdb      	ldrb	r3, [r3, #19]
    c388:	f003 0307 	and.w	r3, r3, #7
    c38c:	b2db      	uxtb	r3, r3
    c38e:	2b01      	cmp	r3, #1
    c390:	d110      	bne.n	c3b4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c392:	7bfb      	ldrb	r3, [r7, #15]
    c394:	4619      	mov	r1, r3
    c396:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c39a:	4b11      	ldr	r3, [pc, #68]	; (c3e0 <_usb_d_dev_ep_stall_clr+0xd8>)
    c39c:	4798      	blx	r3
    c39e:	4603      	mov	r3, r0
    c3a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d10a      	bne.n	c3be <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c3a8:	687a      	ldr	r2, [r7, #4]
    c3aa:	7cd3      	ldrb	r3, [r2, #19]
    c3ac:	f36f 03c3 	bfc	r3, #3, #1
    c3b0:	74d3      	strb	r3, [r2, #19]
    c3b2:	e004      	b.n	c3be <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c3b4:	687a      	ldr	r2, [r7, #4]
    c3b6:	7cd3      	ldrb	r3, [r2, #19]
    c3b8:	f36f 03c3 	bfc	r3, #3, #1
    c3bc:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c3be:	2300      	movs	r3, #0
}
    c3c0:	4618      	mov	r0, r3
    c3c2:	3710      	adds	r7, #16
    c3c4:	46bd      	mov	sp, r7
    c3c6:	bd80      	pop	{r7, pc}
    c3c8:	0000a979 	.word	0x0000a979
    c3cc:	0000a921 	.word	0x0000a921
    c3d0:	0000a8c9 	.word	0x0000a8c9
    c3d4:	0000a9bd 	.word	0x0000a9bd
    c3d8:	0000aa01 	.word	0x0000aa01
    c3dc:	0000aaed 	.word	0x0000aaed
    c3e0:	0000a3a9 	.word	0x0000a3a9

0000c3e4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c3e4:	b580      	push	{r7, lr}
    c3e6:	b086      	sub	sp, #24
    c3e8:	af00      	add	r7, sp, #0
    c3ea:	4603      	mov	r3, r0
    c3ec:	460a      	mov	r2, r1
    c3ee:	71fb      	strb	r3, [r7, #7]
    c3f0:	4613      	mov	r3, r2
    c3f2:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c3f4:	79fb      	ldrb	r3, [r7, #7]
    c3f6:	f003 030f 	and.w	r3, r3, #15
    c3fa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c3fc:	79fb      	ldrb	r3, [r7, #7]
    c3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c402:	2b00      	cmp	r3, #0
    c404:	bf14      	ite	ne
    c406:	2301      	movne	r3, #1
    c408:	2300      	moveq	r3, #0
    c40a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c40c:	7cba      	ldrb	r2, [r7, #18]
    c40e:	7cfb      	ldrb	r3, [r7, #19]
    c410:	4611      	mov	r1, r2
    c412:	4618      	mov	r0, r3
    c414:	4b13      	ldr	r3, [pc, #76]	; (c464 <_usb_d_dev_ep_stall+0x80>)
    c416:	4798      	blx	r3
    c418:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c41a:	7cfb      	ldrb	r3, [r7, #19]
    c41c:	2b04      	cmp	r3, #4
    c41e:	d902      	bls.n	c426 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c420:	f06f 0311 	mvn.w	r3, #17
    c424:	e01a      	b.n	c45c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c426:	79bb      	ldrb	r3, [r7, #6]
    c428:	2b01      	cmp	r3, #1
    c42a:	d106      	bne.n	c43a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c42c:	7cbb      	ldrb	r3, [r7, #18]
    c42e:	4619      	mov	r1, r3
    c430:	68f8      	ldr	r0, [r7, #12]
    c432:	4b0d      	ldr	r3, [pc, #52]	; (c468 <_usb_d_dev_ep_stall+0x84>)
    c434:	4798      	blx	r3
    c436:	6178      	str	r0, [r7, #20]
    c438:	e00f      	b.n	c45a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c43a:	79bb      	ldrb	r3, [r7, #6]
    c43c:	2b00      	cmp	r3, #0
    c43e:	d106      	bne.n	c44e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c440:	7cbb      	ldrb	r3, [r7, #18]
    c442:	4619      	mov	r1, r3
    c444:	68f8      	ldr	r0, [r7, #12]
    c446:	4b09      	ldr	r3, [pc, #36]	; (c46c <_usb_d_dev_ep_stall+0x88>)
    c448:	4798      	blx	r3
    c44a:	6178      	str	r0, [r7, #20]
    c44c:	e005      	b.n	c45a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c44e:	7cbb      	ldrb	r3, [r7, #18]
    c450:	4619      	mov	r1, r3
    c452:	68f8      	ldr	r0, [r7, #12]
    c454:	4b06      	ldr	r3, [pc, #24]	; (c470 <_usb_d_dev_ep_stall+0x8c>)
    c456:	4798      	blx	r3
    c458:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c45a:	697b      	ldr	r3, [r7, #20]
}
    c45c:	4618      	mov	r0, r3
    c45e:	3718      	adds	r7, #24
    c460:	46bd      	mov	sp, r7
    c462:	bd80      	pop	{r7, pc}
    c464:	0000ae85 	.word	0x0000ae85
    c468:	0000c2b9 	.word	0x0000c2b9
    c46c:	0000c309 	.word	0x0000c309
    c470:	0000c289 	.word	0x0000c289

0000c474 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c474:	b580      	push	{r7, lr}
    c476:	b082      	sub	sp, #8
    c478:	af00      	add	r7, sp, #0
    c47a:	6078      	str	r0, [r7, #4]
    c47c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c47e:	687b      	ldr	r3, [r7, #4]
    c480:	7c9b      	ldrb	r3, [r3, #18]
    c482:	2bff      	cmp	r3, #255	; 0xff
    c484:	d014      	beq.n	c4b0 <_usb_d_dev_trans_done+0x3c>
    c486:	687b      	ldr	r3, [r7, #4]
    c488:	7cdb      	ldrb	r3, [r3, #19]
    c48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c48e:	b2db      	uxtb	r3, r3
    c490:	2b00      	cmp	r3, #0
    c492:	d00d      	beq.n	c4b0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c494:	687a      	ldr	r2, [r7, #4]
    c496:	7cd3      	ldrb	r3, [r2, #19]
    c498:	f36f 1386 	bfc	r3, #6, #1
    c49c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c49e:	4b06      	ldr	r3, [pc, #24]	; (c4b8 <_usb_d_dev_trans_done+0x44>)
    c4a0:	691b      	ldr	r3, [r3, #16]
    c4a2:	687a      	ldr	r2, [r7, #4]
    c4a4:	7c90      	ldrb	r0, [r2, #18]
    c4a6:	687a      	ldr	r2, [r7, #4]
    c4a8:	6892      	ldr	r2, [r2, #8]
    c4aa:	6839      	ldr	r1, [r7, #0]
    c4ac:	4798      	blx	r3
    c4ae:	e000      	b.n	c4b2 <_usb_d_dev_trans_done+0x3e>
		return;
    c4b0:	bf00      	nop
}
    c4b2:	3708      	adds	r7, #8
    c4b4:	46bd      	mov	sp, r7
    c4b6:	bd80      	pop	{r7, pc}
    c4b8:	20002578 	.word	0x20002578

0000c4bc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c4bc:	b580      	push	{r7, lr}
    c4be:	b086      	sub	sp, #24
    c4c0:	af00      	add	r7, sp, #0
    c4c2:	60f8      	str	r0, [r7, #12]
    c4c4:	460b      	mov	r3, r1
    c4c6:	607a      	str	r2, [r7, #4]
    c4c8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c4ca:	68fb      	ldr	r3, [r7, #12]
    c4cc:	7c9b      	ldrb	r3, [r3, #18]
    c4ce:	f003 030f 	and.w	r3, r3, #15
    c4d2:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c4d4:	4b1f      	ldr	r3, [pc, #124]	; (c554 <_usb_d_dev_trans_stop+0x98>)
    c4d6:	881b      	ldrh	r3, [r3, #0]
    c4d8:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c4da:	68fb      	ldr	r3, [r7, #12]
    c4dc:	7c9b      	ldrb	r3, [r3, #18]
    c4de:	2bff      	cmp	r3, #255	; 0xff
    c4e0:	d033      	beq.n	c54a <_usb_d_dev_trans_stop+0x8e>
    c4e2:	68fb      	ldr	r3, [r7, #12]
    c4e4:	7cdb      	ldrb	r3, [r3, #19]
    c4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c4ea:	b2db      	uxtb	r3, r3
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	d02c      	beq.n	c54a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c4f0:	7afb      	ldrb	r3, [r7, #11]
    c4f2:	2b00      	cmp	r3, #0
    c4f4:	d006      	beq.n	c504 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c4f6:	7dfb      	ldrb	r3, [r7, #23]
    c4f8:	2200      	movs	r2, #0
    c4fa:	2101      	movs	r1, #1
    c4fc:	4618      	mov	r0, r3
    c4fe:	4b16      	ldr	r3, [pc, #88]	; (c558 <_usb_d_dev_trans_stop+0x9c>)
    c500:	4798      	blx	r3
    c502:	e005      	b.n	c510 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c504:	7dfb      	ldrb	r3, [r7, #23]
    c506:	2200      	movs	r2, #0
    c508:	2100      	movs	r1, #0
    c50a:	4618      	mov	r0, r3
    c50c:	4b13      	ldr	r3, [pc, #76]	; (c55c <_usb_d_dev_trans_stop+0xa0>)
    c50e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c510:	7afb      	ldrb	r3, [r7, #11]
    c512:	f107 0218 	add.w	r2, r7, #24
    c516:	4413      	add	r3, r2
    c518:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c51c:	461a      	mov	r2, r3
    c51e:	7dfb      	ldrb	r3, [r7, #23]
    c520:	4611      	mov	r1, r2
    c522:	4618      	mov	r0, r3
    c524:	4b0e      	ldr	r3, [pc, #56]	; (c560 <_usb_d_dev_trans_stop+0xa4>)
    c526:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c528:	7afb      	ldrb	r3, [r7, #11]
    c52a:	f107 0218 	add.w	r2, r7, #24
    c52e:	4413      	add	r3, r2
    c530:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c534:	461a      	mov	r2, r3
    c536:	7dfb      	ldrb	r3, [r7, #23]
    c538:	4611      	mov	r1, r2
    c53a:	4618      	mov	r0, r3
    c53c:	4b09      	ldr	r3, [pc, #36]	; (c564 <_usb_d_dev_trans_stop+0xa8>)
    c53e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c540:	6879      	ldr	r1, [r7, #4]
    c542:	68f8      	ldr	r0, [r7, #12]
    c544:	4b08      	ldr	r3, [pc, #32]	; (c568 <_usb_d_dev_trans_stop+0xac>)
    c546:	4798      	blx	r3
    c548:	e000      	b.n	c54c <_usb_d_dev_trans_stop+0x90>
		return;
    c54a:	bf00      	nop
}
    c54c:	3718      	adds	r7, #24
    c54e:	46bd      	mov	sp, r7
    c550:	bd80      	pop	{r7, pc}
    c552:	bf00      	nop
    c554:	0001ae70 	.word	0x0001ae70
    c558:	0000ad71 	.word	0x0000ad71
    c55c:	0000adc9 	.word	0x0000adc9
    c560:	0000a879 	.word	0x0000a879
    c564:	0000a8c9 	.word	0x0000a8c9
    c568:	0000c475 	.word	0x0000c475

0000c56c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c56c:	b580      	push	{r7, lr}
    c56e:	b086      	sub	sp, #24
    c570:	af00      	add	r7, sp, #0
    c572:	4603      	mov	r3, r0
    c574:	6039      	str	r1, [r7, #0]
    c576:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c578:	79fb      	ldrb	r3, [r7, #7]
    c57a:	f003 030f 	and.w	r3, r3, #15
    c57e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c580:	7dfb      	ldrb	r3, [r7, #23]
    c582:	015b      	lsls	r3, r3, #5
    c584:	4a1e      	ldr	r2, [pc, #120]	; (c600 <_usb_d_dev_ep_read_req+0x94>)
    c586:	4413      	add	r3, r2
    c588:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c58a:	693b      	ldr	r3, [r7, #16]
    c58c:	681b      	ldr	r3, [r3, #0]
    c58e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c590:	693b      	ldr	r3, [r7, #16]
    c592:	685b      	ldr	r3, [r3, #4]
    c594:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c598:	b29b      	uxth	r3, r3
    c59a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c59c:	7dfb      	ldrb	r3, [r7, #23]
    c59e:	2b04      	cmp	r3, #4
    c5a0:	d802      	bhi.n	c5a8 <_usb_d_dev_ep_read_req+0x3c>
    c5a2:	683b      	ldr	r3, [r7, #0]
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d102      	bne.n	c5ae <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c5a8:	f06f 0311 	mvn.w	r3, #17
    c5ac:	e023      	b.n	c5f6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c5ae:	7dfb      	ldrb	r3, [r7, #23]
    c5b0:	4618      	mov	r0, r3
    c5b2:	4b14      	ldr	r3, [pc, #80]	; (c604 <_usb_d_dev_ep_read_req+0x98>)
    c5b4:	4798      	blx	r3
    c5b6:	4603      	mov	r3, r0
    c5b8:	f083 0301 	eor.w	r3, r3, #1
    c5bc:	b2db      	uxtb	r3, r3
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d002      	beq.n	c5c8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c5c2:	f06f 0312 	mvn.w	r3, #18
    c5c6:	e016      	b.n	c5f6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c5c8:	7dfb      	ldrb	r3, [r7, #23]
    c5ca:	4618      	mov	r0, r3
    c5cc:	4b0e      	ldr	r3, [pc, #56]	; (c608 <_usb_d_dev_ep_read_req+0x9c>)
    c5ce:	4798      	blx	r3
    c5d0:	4603      	mov	r3, r0
    c5d2:	f083 0301 	eor.w	r3, r3, #1
    c5d6:	b2db      	uxtb	r3, r3
    c5d8:	2b00      	cmp	r3, #0
    c5da:	d001      	beq.n	c5e0 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c5dc:	2300      	movs	r3, #0
    c5de:	e00a      	b.n	c5f6 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c5e0:	68fb      	ldr	r3, [r7, #12]
    c5e2:	2208      	movs	r2, #8
    c5e4:	4619      	mov	r1, r3
    c5e6:	6838      	ldr	r0, [r7, #0]
    c5e8:	4b08      	ldr	r3, [pc, #32]	; (c60c <_usb_d_dev_ep_read_req+0xa0>)
    c5ea:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c5ec:	7dfb      	ldrb	r3, [r7, #23]
    c5ee:	4618      	mov	r0, r3
    c5f0:	4b07      	ldr	r3, [pc, #28]	; (c610 <_usb_d_dev_ep_read_req+0xa4>)
    c5f2:	4798      	blx	r3

	return bytes;
    c5f4:	897b      	ldrh	r3, [r7, #10]
}
    c5f6:	4618      	mov	r0, r3
    c5f8:	3718      	adds	r7, #24
    c5fa:	46bd      	mov	sp, r7
    c5fc:	bd80      	pop	{r7, pc}
    c5fe:	bf00      	nop
    c600:	20002640 	.word	0x20002640
    c604:	0000a8f1 	.word	0x0000a8f1
    c608:	0000aa9d 	.word	0x0000aa9d
    c60c:	0001a539 	.word	0x0001a539
    c610:	0000aacd 	.word	0x0000aacd

0000c614 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c614:	b580      	push	{r7, lr}
    c616:	b086      	sub	sp, #24
    c618:	af00      	add	r7, sp, #0
    c61a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c61c:	687b      	ldr	r3, [r7, #4]
    c61e:	7a1b      	ldrb	r3, [r3, #8]
    c620:	f003 030f 	and.w	r3, r3, #15
    c624:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c626:	687b      	ldr	r3, [r7, #4]
    c628:	7a1b      	ldrb	r3, [r3, #8]
    c62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c62e:	2b00      	cmp	r3, #0
    c630:	bf14      	ite	ne
    c632:	2301      	movne	r3, #1
    c634:	2300      	moveq	r3, #0
    c636:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c638:	7d7a      	ldrb	r2, [r7, #21]
    c63a:	7dbb      	ldrb	r3, [r7, #22]
    c63c:	4611      	mov	r1, r2
    c63e:	4618      	mov	r0, r3
    c640:	4b5f      	ldr	r3, [pc, #380]	; (c7c0 <_usb_d_dev_ep_trans+0x1ac>)
    c642:	4798      	blx	r3
    c644:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c646:	693b      	ldr	r3, [r7, #16]
    c648:	8a1b      	ldrh	r3, [r3, #16]
    c64a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c64e:	4293      	cmp	r3, r2
    c650:	d004      	beq.n	c65c <_usb_d_dev_ep_trans+0x48>
    c652:	693b      	ldr	r3, [r7, #16]
    c654:	8a1b      	ldrh	r3, [r3, #16]
    c656:	3b01      	subs	r3, #1
    c658:	b29b      	uxth	r3, r3
    c65a:	e001      	b.n	c660 <_usb_d_dev_ep_trans+0x4c>
    c65c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c660:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	685a      	ldr	r2, [r3, #4]
    c666:	89fb      	ldrh	r3, [r7, #14]
    c668:	4013      	ands	r3, r2
    c66a:	2b00      	cmp	r3, #0
    c66c:	bf14      	ite	ne
    c66e:	2301      	movne	r3, #1
    c670:	2300      	moveq	r3, #0
    c672:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c674:	2300      	movs	r3, #0
    c676:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c678:	7dbb      	ldrb	r3, [r7, #22]
    c67a:	2b04      	cmp	r3, #4
    c67c:	d902      	bls.n	c684 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c67e:	f06f 0311 	mvn.w	r3, #17
    c682:	e098      	b.n	c7b6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c684:	687b      	ldr	r3, [r7, #4]
    c686:	681b      	ldr	r3, [r3, #0]
    c688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c68c:	d31a      	bcc.n	c6c4 <_usb_d_dev_ep_trans+0xb0>
    c68e:	687b      	ldr	r3, [r7, #4]
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	461a      	mov	r2, r3
    c694:	687b      	ldr	r3, [r7, #4]
    c696:	685b      	ldr	r3, [r3, #4]
    c698:	4413      	add	r3, r2
    c69a:	4a4a      	ldr	r2, [pc, #296]	; (c7c4 <_usb_d_dev_ep_trans+0x1b0>)
    c69c:	4293      	cmp	r3, r2
    c69e:	d811      	bhi.n	c6c4 <_usb_d_dev_ep_trans+0xb0>
    c6a0:	687b      	ldr	r3, [r7, #4]
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	f003 0303 	and.w	r3, r3, #3
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d10b      	bne.n	c6c4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c6ac:	7d7b      	ldrb	r3, [r7, #21]
    c6ae:	f083 0301 	eor.w	r3, r3, #1
    c6b2:	b2db      	uxtb	r3, r3
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d00e      	beq.n	c6d6 <_usb_d_dev_ep_trans+0xc2>
    c6b8:	687b      	ldr	r3, [r7, #4]
    c6ba:	685b      	ldr	r3, [r3, #4]
    c6bc:	693a      	ldr	r2, [r7, #16]
    c6be:	8a12      	ldrh	r2, [r2, #16]
    c6c0:	4293      	cmp	r3, r2
    c6c2:	d208      	bcs.n	c6d6 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c6c4:	693b      	ldr	r3, [r7, #16]
    c6c6:	68db      	ldr	r3, [r3, #12]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d102      	bne.n	c6d2 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c6cc:	f06f 0312 	mvn.w	r3, #18
    c6d0:	e071      	b.n	c7b6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c6d2:	2301      	movs	r3, #1
    c6d4:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c6d6:	7d7b      	ldrb	r3, [r7, #21]
    c6d8:	f083 0301 	eor.w	r3, r3, #1
    c6dc:	b2db      	uxtb	r3, r3
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d009      	beq.n	c6f6 <_usb_d_dev_ep_trans+0xe2>
    c6e2:	7b7b      	ldrb	r3, [r7, #13]
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d006      	beq.n	c6f6 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c6e8:	693b      	ldr	r3, [r7, #16]
    c6ea:	68db      	ldr	r3, [r3, #12]
    c6ec:	2b00      	cmp	r3, #0
    c6ee:	d102      	bne.n	c6f6 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c6f0:	f06f 0311 	mvn.w	r3, #17
    c6f4:	e05f      	b.n	c7b6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c6f6:	693b      	ldr	r3, [r7, #16]
    c6f8:	7cdb      	ldrb	r3, [r3, #19]
    c6fa:	f003 0308 	and.w	r3, r3, #8
    c6fe:	b2db      	uxtb	r3, r3
    c700:	2b00      	cmp	r3, #0
    c702:	d001      	beq.n	c708 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c704:	2302      	movs	r3, #2
    c706:	e056      	b.n	c7b6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c708:	f107 0308 	add.w	r3, r7, #8
    c70c:	4618      	mov	r0, r3
    c70e:	4b2e      	ldr	r3, [pc, #184]	; (c7c8 <_usb_d_dev_ep_trans+0x1b4>)
    c710:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c712:	693b      	ldr	r3, [r7, #16]
    c714:	7cdb      	ldrb	r3, [r3, #19]
    c716:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c71a:	b2db      	uxtb	r3, r3
    c71c:	2b00      	cmp	r3, #0
    c71e:	d006      	beq.n	c72e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c720:	f107 0308 	add.w	r3, r7, #8
    c724:	4618      	mov	r0, r3
    c726:	4b29      	ldr	r3, [pc, #164]	; (c7cc <_usb_d_dev_ep_trans+0x1b8>)
    c728:	4798      	blx	r3
		return USB_BUSY;
    c72a:	2301      	movs	r3, #1
    c72c:	e043      	b.n	c7b6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c72e:	693a      	ldr	r2, [r7, #16]
    c730:	7cd3      	ldrb	r3, [r2, #19]
    c732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c736:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c738:	f107 0308 	add.w	r3, r7, #8
    c73c:	4618      	mov	r0, r3
    c73e:	4b23      	ldr	r3, [pc, #140]	; (c7cc <_usb_d_dev_ep_trans+0x1b8>)
    c740:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	681a      	ldr	r2, [r3, #0]
    c746:	693b      	ldr	r3, [r7, #16]
    c748:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	685a      	ldr	r2, [r3, #4]
    c74e:	693b      	ldr	r3, [r7, #16]
    c750:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c752:	693b      	ldr	r3, [r7, #16]
    c754:	2200      	movs	r2, #0
    c756:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c758:	693a      	ldr	r2, [r7, #16]
    c75a:	7cd3      	ldrb	r3, [r2, #19]
    c75c:	7d79      	ldrb	r1, [r7, #21]
    c75e:	f361 13c7 	bfi	r3, r1, #7, #1
    c762:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c764:	693a      	ldr	r2, [r7, #16]
    c766:	7cd3      	ldrb	r3, [r2, #19]
    c768:	7df9      	ldrb	r1, [r7, #23]
    c76a:	f361 1345 	bfi	r3, r1, #5, #1
    c76e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c770:	687b      	ldr	r3, [r7, #4]
    c772:	7a5b      	ldrb	r3, [r3, #9]
    c774:	2b00      	cmp	r3, #0
    c776:	d007      	beq.n	c788 <_usb_d_dev_ep_trans+0x174>
    c778:	7b7b      	ldrb	r3, [r7, #13]
    c77a:	f083 0301 	eor.w	r3, r3, #1
    c77e:	b2db      	uxtb	r3, r3
    c780:	2b00      	cmp	r3, #0
    c782:	d001      	beq.n	c788 <_usb_d_dev_ep_trans+0x174>
    c784:	2301      	movs	r3, #1
    c786:	e000      	b.n	c78a <_usb_d_dev_ep_trans+0x176>
    c788:	2300      	movs	r3, #0
    c78a:	b2db      	uxtb	r3, r3
    c78c:	f003 0301 	and.w	r3, r3, #1
    c790:	b2d9      	uxtb	r1, r3
    c792:	693a      	ldr	r2, [r7, #16]
    c794:	7cd3      	ldrb	r3, [r2, #19]
    c796:	f361 1304 	bfi	r3, r1, #4, #1
    c79a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c79c:	7d7b      	ldrb	r3, [r7, #21]
    c79e:	2b00      	cmp	r3, #0
    c7a0:	d004      	beq.n	c7ac <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c7a2:	2100      	movs	r1, #0
    c7a4:	6938      	ldr	r0, [r7, #16]
    c7a6:	4b0a      	ldr	r3, [pc, #40]	; (c7d0 <_usb_d_dev_ep_trans+0x1bc>)
    c7a8:	4798      	blx	r3
    c7aa:	e003      	b.n	c7b4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c7ac:	2100      	movs	r1, #0
    c7ae:	6938      	ldr	r0, [r7, #16]
    c7b0:	4b08      	ldr	r3, [pc, #32]	; (c7d4 <_usb_d_dev_ep_trans+0x1c0>)
    c7b2:	4798      	blx	r3
	}

	return ERR_NONE;
    c7b4:	2300      	movs	r3, #0
}
    c7b6:	4618      	mov	r0, r3
    c7b8:	3718      	adds	r7, #24
    c7ba:	46bd      	mov	sp, r7
    c7bc:	bd80      	pop	{r7, pc}
    c7be:	bf00      	nop
    c7c0:	0000ae85 	.word	0x0000ae85
    c7c4:	20041fff 	.word	0x20041fff
    c7c8:	0000cfe1 	.word	0x0000cfe1
    c7cc:	0000d007 	.word	0x0000d007
    c7d0:	0000b14d 	.word	0x0000b14d
    c7d4:	0000b365 	.word	0x0000b365

0000c7d8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c7d8:	b580      	push	{r7, lr}
    c7da:	b084      	sub	sp, #16
    c7dc:	af00      	add	r7, sp, #0
    c7de:	4603      	mov	r3, r0
    c7e0:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c7e2:	79fb      	ldrb	r3, [r7, #7]
    c7e4:	f003 030f 	and.w	r3, r3, #15
    c7e8:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c7ea:	79fb      	ldrb	r3, [r7, #7]
    c7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	bf14      	ite	ne
    c7f4:	2301      	movne	r3, #1
    c7f6:	2300      	moveq	r3, #0
    c7f8:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c7fa:	7bba      	ldrb	r2, [r7, #14]
    c7fc:	7bfb      	ldrb	r3, [r7, #15]
    c7fe:	4611      	mov	r1, r2
    c800:	4618      	mov	r0, r3
    c802:	4b08      	ldr	r3, [pc, #32]	; (c824 <_usb_d_dev_ep_abort+0x4c>)
    c804:	4798      	blx	r3
    c806:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c808:	7bfb      	ldrb	r3, [r7, #15]
    c80a:	2b04      	cmp	r3, #4
    c80c:	d806      	bhi.n	c81c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c80e:	7bbb      	ldrb	r3, [r7, #14]
    c810:	2202      	movs	r2, #2
    c812:	4619      	mov	r1, r3
    c814:	68b8      	ldr	r0, [r7, #8]
    c816:	4b04      	ldr	r3, [pc, #16]	; (c828 <_usb_d_dev_ep_abort+0x50>)
    c818:	4798      	blx	r3
    c81a:	e000      	b.n	c81e <_usb_d_dev_ep_abort+0x46>
		return;
    c81c:	bf00      	nop
}
    c81e:	3710      	adds	r7, #16
    c820:	46bd      	mov	sp, r7
    c822:	bd80      	pop	{r7, pc}
    c824:	0000ae85 	.word	0x0000ae85
    c828:	0000c4bd 	.word	0x0000c4bd

0000c82c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c82c:	b480      	push	{r7}
    c82e:	b085      	sub	sp, #20
    c830:	af00      	add	r7, sp, #0
    c832:	4603      	mov	r3, r0
    c834:	6039      	str	r1, [r7, #0]
    c836:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c838:	683b      	ldr	r3, [r7, #0]
    c83a:	2b00      	cmp	r3, #0
    c83c:	d001      	beq.n	c842 <_usb_d_dev_register_callback+0x16>
    c83e:	683b      	ldr	r3, [r7, #0]
    c840:	e000      	b.n	c844 <_usb_d_dev_register_callback+0x18>
    c842:	4b0a      	ldr	r3, [pc, #40]	; (c86c <_usb_d_dev_register_callback+0x40>)
    c844:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c846:	79fb      	ldrb	r3, [r7, #7]
    c848:	2b01      	cmp	r3, #1
    c84a:	d103      	bne.n	c854 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c84c:	4a08      	ldr	r2, [pc, #32]	; (c870 <_usb_d_dev_register_callback+0x44>)
    c84e:	68fb      	ldr	r3, [r7, #12]
    c850:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c852:	e005      	b.n	c860 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c854:	79fb      	ldrb	r3, [r7, #7]
    c856:	2b00      	cmp	r3, #0
    c858:	d102      	bne.n	c860 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c85a:	4a05      	ldr	r2, [pc, #20]	; (c870 <_usb_d_dev_register_callback+0x44>)
    c85c:	68fb      	ldr	r3, [r7, #12]
    c85e:	6013      	str	r3, [r2, #0]
}
    c860:	bf00      	nop
    c862:	3714      	adds	r7, #20
    c864:	46bd      	mov	sp, r7
    c866:	f85d 7b04 	ldr.w	r7, [sp], #4
    c86a:	4770      	bx	lr
    c86c:	0000a70d 	.word	0x0000a70d
    c870:	20002578 	.word	0x20002578

0000c874 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c874:	b480      	push	{r7}
    c876:	b085      	sub	sp, #20
    c878:	af00      	add	r7, sp, #0
    c87a:	4603      	mov	r3, r0
    c87c:	6039      	str	r1, [r7, #0]
    c87e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c880:	683b      	ldr	r3, [r7, #0]
    c882:	2b00      	cmp	r3, #0
    c884:	d001      	beq.n	c88a <_usb_d_dev_register_ep_callback+0x16>
    c886:	683b      	ldr	r3, [r7, #0]
    c888:	e000      	b.n	c88c <_usb_d_dev_register_ep_callback+0x18>
    c88a:	4b0e      	ldr	r3, [pc, #56]	; (c8c4 <_usb_d_dev_register_ep_callback+0x50>)
    c88c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c88e:	79fb      	ldrb	r3, [r7, #7]
    c890:	2b00      	cmp	r3, #0
    c892:	d103      	bne.n	c89c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c894:	4a0c      	ldr	r2, [pc, #48]	; (c8c8 <_usb_d_dev_register_ep_callback+0x54>)
    c896:	68fb      	ldr	r3, [r7, #12]
    c898:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c89a:	e00c      	b.n	c8b6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c89c:	79fb      	ldrb	r3, [r7, #7]
    c89e:	2b01      	cmp	r3, #1
    c8a0:	d103      	bne.n	c8aa <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c8a2:	4a09      	ldr	r2, [pc, #36]	; (c8c8 <_usb_d_dev_register_ep_callback+0x54>)
    c8a4:	68fb      	ldr	r3, [r7, #12]
    c8a6:	60d3      	str	r3, [r2, #12]
}
    c8a8:	e005      	b.n	c8b6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c8aa:	79fb      	ldrb	r3, [r7, #7]
    c8ac:	2b02      	cmp	r3, #2
    c8ae:	d102      	bne.n	c8b6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c8b0:	4a05      	ldr	r2, [pc, #20]	; (c8c8 <_usb_d_dev_register_ep_callback+0x54>)
    c8b2:	68fb      	ldr	r3, [r7, #12]
    c8b4:	6113      	str	r3, [r2, #16]
}
    c8b6:	bf00      	nop
    c8b8:	3714      	adds	r7, #20
    c8ba:	46bd      	mov	sp, r7
    c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8c0:	4770      	bx	lr
    c8c2:	bf00      	nop
    c8c4:	0000a70d 	.word	0x0000a70d
    c8c8:	20002578 	.word	0x20002578

0000c8cc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    c8cc:	b580      	push	{r7, lr}
    c8ce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c8d0:	4b01      	ldr	r3, [pc, #4]	; (c8d8 <USB_0_Handler+0xc>)
    c8d2:	4798      	blx	r3
}
    c8d4:	bf00      	nop
    c8d6:	bd80      	pop	{r7, pc}
    c8d8:	0000bb3d 	.word	0x0000bb3d

0000c8dc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c8e0:	4b01      	ldr	r3, [pc, #4]	; (c8e8 <USB_1_Handler+0xc>)
    c8e2:	4798      	blx	r3
}
    c8e4:	bf00      	nop
    c8e6:	bd80      	pop	{r7, pc}
    c8e8:	0000bb3d 	.word	0x0000bb3d

0000c8ec <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    c8ec:	b580      	push	{r7, lr}
    c8ee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c8f0:	4b01      	ldr	r3, [pc, #4]	; (c8f8 <USB_2_Handler+0xc>)
    c8f2:	4798      	blx	r3
}
    c8f4:	bf00      	nop
    c8f6:	bd80      	pop	{r7, pc}
    c8f8:	0000bb3d 	.word	0x0000bb3d

0000c8fc <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    c8fc:	b580      	push	{r7, lr}
    c8fe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c900:	4b01      	ldr	r3, [pc, #4]	; (c908 <USB_3_Handler+0xc>)
    c902:	4798      	blx	r3
}
    c904:	bf00      	nop
    c906:	bd80      	pop	{r7, pc}
    c908:	0000bb3d 	.word	0x0000bb3d

0000c90c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    c90c:	b480      	push	{r7}
    c90e:	b083      	sub	sp, #12
    c910:	af00      	add	r7, sp, #0
    c912:	6078      	str	r0, [r7, #4]
    c914:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    c916:	bf00      	nop
    c918:	687b      	ldr	r3, [r7, #4]
    c91a:	689a      	ldr	r2, [r3, #8]
    c91c:	683b      	ldr	r3, [r7, #0]
    c91e:	4013      	ands	r3, r2
    c920:	2b00      	cmp	r3, #0
    c922:	d1f9      	bne.n	c918 <hri_wdt_wait_for_sync+0xc>
	};
}
    c924:	bf00      	nop
    c926:	370c      	adds	r7, #12
    c928:	46bd      	mov	sp, r7
    c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c92e:	4770      	bx	lr

0000c930 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c930:	b580      	push	{r7, lr}
    c932:	b084      	sub	sp, #16
    c934:	af00      	add	r7, sp, #0
    c936:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c938:	210e      	movs	r1, #14
    c93a:	6878      	ldr	r0, [r7, #4]
    c93c:	4b0a      	ldr	r3, [pc, #40]	; (c968 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    c93e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c940:	687b      	ldr	r3, [r7, #4]
    c942:	781b      	ldrb	r3, [r3, #0]
    c944:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    c946:	7bfb      	ldrb	r3, [r7, #15]
    c948:	085b      	lsrs	r3, r3, #1
    c94a:	b2db      	uxtb	r3, r3
    c94c:	f003 0301 	and.w	r3, r3, #1
    c950:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c952:	7bfb      	ldrb	r3, [r7, #15]
    c954:	2b00      	cmp	r3, #0
    c956:	bf14      	ite	ne
    c958:	2301      	movne	r3, #1
    c95a:	2300      	moveq	r3, #0
    c95c:	b2db      	uxtb	r3, r3
}
    c95e:	4618      	mov	r0, r3
    c960:	3710      	adds	r7, #16
    c962:	46bd      	mov	sp, r7
    c964:	bd80      	pop	{r7, pc}
    c966:	bf00      	nop
    c968:	0000c90d 	.word	0x0000c90d

0000c96c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    c96c:	b580      	push	{r7, lr}
    c96e:	b082      	sub	sp, #8
    c970:	af00      	add	r7, sp, #0
    c972:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    c974:	687b      	ldr	r3, [r7, #4]
    c976:	781b      	ldrb	r3, [r3, #0]
    c978:	b2db      	uxtb	r3, r3
    c97a:	f023 0304 	bic.w	r3, r3, #4
    c97e:	b2da      	uxtb	r2, r3
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c984:	210e      	movs	r1, #14
    c986:	6878      	ldr	r0, [r7, #4]
    c988:	4b02      	ldr	r3, [pc, #8]	; (c994 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    c98a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    c98c:	bf00      	nop
    c98e:	3708      	adds	r7, #8
    c990:	46bd      	mov	sp, r7
    c992:	bd80      	pop	{r7, pc}
    c994:	0000c90d 	.word	0x0000c90d

0000c998 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    c998:	b580      	push	{r7, lr}
    c99a:	b084      	sub	sp, #16
    c99c:	af00      	add	r7, sp, #0
    c99e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c9a0:	210e      	movs	r1, #14
    c9a2:	6878      	ldr	r0, [r7, #4]
    c9a4:	4b08      	ldr	r3, [pc, #32]	; (c9c8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    c9a6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c9a8:	687b      	ldr	r3, [r7, #4]
    c9aa:	781b      	ldrb	r3, [r3, #0]
    c9ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    c9ae:	7bfb      	ldrb	r3, [r7, #15]
    c9b0:	09db      	lsrs	r3, r3, #7
    c9b2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c9b4:	7bfb      	ldrb	r3, [r7, #15]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	bf14      	ite	ne
    c9ba:	2301      	movne	r3, #1
    c9bc:	2300      	moveq	r3, #0
    c9be:	b2db      	uxtb	r3, r3
}
    c9c0:	4618      	mov	r0, r3
    c9c2:	3710      	adds	r7, #16
    c9c4:	46bd      	mov	sp, r7
    c9c6:	bd80      	pop	{r7, pc}
    c9c8:	0000c90d 	.word	0x0000c90d

0000c9cc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    c9cc:	b480      	push	{r7}
    c9ce:	b085      	sub	sp, #20
    c9d0:	af00      	add	r7, sp, #0
    c9d2:	6078      	str	r0, [r7, #4]
    c9d4:	460b      	mov	r3, r1
    c9d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    c9d8:	687b      	ldr	r3, [r7, #4]
    c9da:	785b      	ldrb	r3, [r3, #1]
    c9dc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    c9de:	7bfb      	ldrb	r3, [r7, #15]
    c9e0:	f023 030f 	bic.w	r3, r3, #15
    c9e4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    c9e6:	78fb      	ldrb	r3, [r7, #3]
    c9e8:	f003 030f 	and.w	r3, r3, #15
    c9ec:	b2da      	uxtb	r2, r3
    c9ee:	7bfb      	ldrb	r3, [r7, #15]
    c9f0:	4313      	orrs	r3, r2
    c9f2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    c9f4:	687b      	ldr	r3, [r7, #4]
    c9f6:	7bfa      	ldrb	r2, [r7, #15]
    c9f8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    c9fa:	bf00      	nop
    c9fc:	3714      	adds	r7, #20
    c9fe:	46bd      	mov	sp, r7
    ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca04:	4770      	bx	lr
	...

0000ca08 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ca08:	b580      	push	{r7, lr}
    ca0a:	b082      	sub	sp, #8
    ca0c:	af00      	add	r7, sp, #0
    ca0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d005      	beq.n	ca22 <_wdt_init+0x1a>
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	681b      	ldr	r3, [r3, #0]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d001      	beq.n	ca22 <_wdt_init+0x1a>
    ca1e:	2301      	movs	r3, #1
    ca20:	e000      	b.n	ca24 <_wdt_init+0x1c>
    ca22:	2300      	movs	r3, #0
    ca24:	f003 0301 	and.w	r3, r3, #1
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	2250      	movs	r2, #80	; 0x50
    ca2c:	4913      	ldr	r1, [pc, #76]	; (ca7c <_wdt_init+0x74>)
    ca2e:	4618      	mov	r0, r3
    ca30:	4b13      	ldr	r3, [pc, #76]	; (ca80 <_wdt_init+0x78>)
    ca32:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ca34:	687b      	ldr	r3, [r7, #4]
    ca36:	681b      	ldr	r3, [r3, #0]
    ca38:	4618      	mov	r0, r3
    ca3a:	4b12      	ldr	r3, [pc, #72]	; (ca84 <_wdt_init+0x7c>)
    ca3c:	4798      	blx	r3
    ca3e:	4603      	mov	r3, r0
    ca40:	2b00      	cmp	r3, #0
    ca42:	d107      	bne.n	ca54 <_wdt_init+0x4c>
    ca44:	687b      	ldr	r3, [r7, #4]
    ca46:	681b      	ldr	r3, [r3, #0]
    ca48:	4618      	mov	r0, r3
    ca4a:	4b0f      	ldr	r3, [pc, #60]	; (ca88 <_wdt_init+0x80>)
    ca4c:	4798      	blx	r3
    ca4e:	4603      	mov	r3, r0
    ca50:	2b00      	cmp	r3, #0
    ca52:	d002      	beq.n	ca5a <_wdt_init+0x52>
		return ERR_DENIED;
    ca54:	f06f 0310 	mvn.w	r3, #16
    ca58:	e00b      	b.n	ca72 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ca5a:	687b      	ldr	r3, [r7, #4]
    ca5c:	681b      	ldr	r3, [r3, #0]
    ca5e:	4618      	mov	r0, r3
    ca60:	4b0a      	ldr	r3, [pc, #40]	; (ca8c <_wdt_init+0x84>)
    ca62:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ca64:	687b      	ldr	r3, [r7, #4]
    ca66:	681b      	ldr	r3, [r3, #0]
    ca68:	210b      	movs	r1, #11
    ca6a:	4618      	mov	r0, r3
    ca6c:	4b08      	ldr	r3, [pc, #32]	; (ca90 <_wdt_init+0x88>)
    ca6e:	4798      	blx	r3
	}

	return ERR_NONE;
    ca70:	2300      	movs	r3, #0
}
    ca72:	4618      	mov	r0, r3
    ca74:	3708      	adds	r7, #8
    ca76:	46bd      	mov	sp, r7
    ca78:	bd80      	pop	{r7, pc}
    ca7a:	bf00      	nop
    ca7c:	0001ae74 	.word	0x0001ae74
    ca80:	00004bbd 	.word	0x00004bbd
    ca84:	0000c999 	.word	0x0000c999
    ca88:	0000c931 	.word	0x0000c931
    ca8c:	0000c96d 	.word	0x0000c96d
    ca90:	0000c9cd 	.word	0x0000c9cd

0000ca94 <hri_port_set_DIR_reg>:
{
    ca94:	b480      	push	{r7}
    ca96:	b085      	sub	sp, #20
    ca98:	af00      	add	r7, sp, #0
    ca9a:	60f8      	str	r0, [r7, #12]
    ca9c:	460b      	mov	r3, r1
    ca9e:	607a      	str	r2, [r7, #4]
    caa0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    caa2:	7afb      	ldrb	r3, [r7, #11]
    caa4:	68fa      	ldr	r2, [r7, #12]
    caa6:	01db      	lsls	r3, r3, #7
    caa8:	4413      	add	r3, r2
    caaa:	3308      	adds	r3, #8
    caac:	687a      	ldr	r2, [r7, #4]
    caae:	601a      	str	r2, [r3, #0]
}
    cab0:	bf00      	nop
    cab2:	3714      	adds	r7, #20
    cab4:	46bd      	mov	sp, r7
    cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    caba:	4770      	bx	lr

0000cabc <hri_port_clear_DIR_reg>:
{
    cabc:	b480      	push	{r7}
    cabe:	b085      	sub	sp, #20
    cac0:	af00      	add	r7, sp, #0
    cac2:	60f8      	str	r0, [r7, #12]
    cac4:	460b      	mov	r3, r1
    cac6:	607a      	str	r2, [r7, #4]
    cac8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    caca:	7afb      	ldrb	r3, [r7, #11]
    cacc:	68fa      	ldr	r2, [r7, #12]
    cace:	01db      	lsls	r3, r3, #7
    cad0:	4413      	add	r3, r2
    cad2:	3304      	adds	r3, #4
    cad4:	687a      	ldr	r2, [r7, #4]
    cad6:	601a      	str	r2, [r3, #0]
}
    cad8:	bf00      	nop
    cada:	3714      	adds	r7, #20
    cadc:	46bd      	mov	sp, r7
    cade:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae2:	4770      	bx	lr

0000cae4 <hri_port_set_OUT_reg>:
{
    cae4:	b480      	push	{r7}
    cae6:	b085      	sub	sp, #20
    cae8:	af00      	add	r7, sp, #0
    caea:	60f8      	str	r0, [r7, #12]
    caec:	460b      	mov	r3, r1
    caee:	607a      	str	r2, [r7, #4]
    caf0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    caf2:	7afb      	ldrb	r3, [r7, #11]
    caf4:	68fa      	ldr	r2, [r7, #12]
    caf6:	01db      	lsls	r3, r3, #7
    caf8:	4413      	add	r3, r2
    cafa:	3318      	adds	r3, #24
    cafc:	687a      	ldr	r2, [r7, #4]
    cafe:	601a      	str	r2, [r3, #0]
}
    cb00:	bf00      	nop
    cb02:	3714      	adds	r7, #20
    cb04:	46bd      	mov	sp, r7
    cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb0a:	4770      	bx	lr

0000cb0c <hri_port_clear_OUT_reg>:
{
    cb0c:	b480      	push	{r7}
    cb0e:	b085      	sub	sp, #20
    cb10:	af00      	add	r7, sp, #0
    cb12:	60f8      	str	r0, [r7, #12]
    cb14:	460b      	mov	r3, r1
    cb16:	607a      	str	r2, [r7, #4]
    cb18:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    cb1a:	7afb      	ldrb	r3, [r7, #11]
    cb1c:	68fa      	ldr	r2, [r7, #12]
    cb1e:	01db      	lsls	r3, r3, #7
    cb20:	4413      	add	r3, r2
    cb22:	3314      	adds	r3, #20
    cb24:	687a      	ldr	r2, [r7, #4]
    cb26:	601a      	str	r2, [r3, #0]
}
    cb28:	bf00      	nop
    cb2a:	3714      	adds	r7, #20
    cb2c:	46bd      	mov	sp, r7
    cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb32:	4770      	bx	lr

0000cb34 <hri_port_write_PMUX_PMUXE_bf>:
{
    cb34:	b480      	push	{r7}
    cb36:	b085      	sub	sp, #20
    cb38:	af00      	add	r7, sp, #0
    cb3a:	6078      	str	r0, [r7, #4]
    cb3c:	4608      	mov	r0, r1
    cb3e:	4611      	mov	r1, r2
    cb40:	461a      	mov	r2, r3
    cb42:	4603      	mov	r3, r0
    cb44:	70fb      	strb	r3, [r7, #3]
    cb46:	460b      	mov	r3, r1
    cb48:	70bb      	strb	r3, [r7, #2]
    cb4a:	4613      	mov	r3, r2
    cb4c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cb4e:	78fa      	ldrb	r2, [r7, #3]
    cb50:	78bb      	ldrb	r3, [r7, #2]
    cb52:	6879      	ldr	r1, [r7, #4]
    cb54:	01d2      	lsls	r2, r2, #7
    cb56:	440a      	add	r2, r1
    cb58:	4413      	add	r3, r2
    cb5a:	3330      	adds	r3, #48	; 0x30
    cb5c:	781b      	ldrb	r3, [r3, #0]
    cb5e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    cb60:	7bfb      	ldrb	r3, [r7, #15]
    cb62:	f023 030f 	bic.w	r3, r3, #15
    cb66:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    cb68:	787b      	ldrb	r3, [r7, #1]
    cb6a:	f003 030f 	and.w	r3, r3, #15
    cb6e:	b2da      	uxtb	r2, r3
    cb70:	7bfb      	ldrb	r3, [r7, #15]
    cb72:	4313      	orrs	r3, r2
    cb74:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cb76:	78fa      	ldrb	r2, [r7, #3]
    cb78:	78bb      	ldrb	r3, [r7, #2]
    cb7a:	6879      	ldr	r1, [r7, #4]
    cb7c:	01d2      	lsls	r2, r2, #7
    cb7e:	440a      	add	r2, r1
    cb80:	4413      	add	r3, r2
    cb82:	3330      	adds	r3, #48	; 0x30
    cb84:	7bfa      	ldrb	r2, [r7, #15]
    cb86:	701a      	strb	r2, [r3, #0]
}
    cb88:	bf00      	nop
    cb8a:	3714      	adds	r7, #20
    cb8c:	46bd      	mov	sp, r7
    cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb92:	4770      	bx	lr

0000cb94 <hri_port_write_PMUX_PMUXO_bf>:
{
    cb94:	b480      	push	{r7}
    cb96:	b085      	sub	sp, #20
    cb98:	af00      	add	r7, sp, #0
    cb9a:	6078      	str	r0, [r7, #4]
    cb9c:	4608      	mov	r0, r1
    cb9e:	4611      	mov	r1, r2
    cba0:	461a      	mov	r2, r3
    cba2:	4603      	mov	r3, r0
    cba4:	70fb      	strb	r3, [r7, #3]
    cba6:	460b      	mov	r3, r1
    cba8:	70bb      	strb	r3, [r7, #2]
    cbaa:	4613      	mov	r3, r2
    cbac:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cbae:	78fa      	ldrb	r2, [r7, #3]
    cbb0:	78bb      	ldrb	r3, [r7, #2]
    cbb2:	6879      	ldr	r1, [r7, #4]
    cbb4:	01d2      	lsls	r2, r2, #7
    cbb6:	440a      	add	r2, r1
    cbb8:	4413      	add	r3, r2
    cbba:	3330      	adds	r3, #48	; 0x30
    cbbc:	781b      	ldrb	r3, [r3, #0]
    cbbe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    cbc0:	7bfb      	ldrb	r3, [r7, #15]
    cbc2:	f003 030f 	and.w	r3, r3, #15
    cbc6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    cbc8:	787b      	ldrb	r3, [r7, #1]
    cbca:	011b      	lsls	r3, r3, #4
    cbcc:	b2da      	uxtb	r2, r3
    cbce:	7bfb      	ldrb	r3, [r7, #15]
    cbd0:	4313      	orrs	r3, r2
    cbd2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cbd4:	78fa      	ldrb	r2, [r7, #3]
    cbd6:	78bb      	ldrb	r3, [r7, #2]
    cbd8:	6879      	ldr	r1, [r7, #4]
    cbda:	01d2      	lsls	r2, r2, #7
    cbdc:	440a      	add	r2, r1
    cbde:	4413      	add	r3, r2
    cbe0:	3330      	adds	r3, #48	; 0x30
    cbe2:	7bfa      	ldrb	r2, [r7, #15]
    cbe4:	701a      	strb	r2, [r3, #0]
}
    cbe6:	bf00      	nop
    cbe8:	3714      	adds	r7, #20
    cbea:	46bd      	mov	sp, r7
    cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbf0:	4770      	bx	lr

0000cbf2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    cbf2:	b480      	push	{r7}
    cbf4:	b085      	sub	sp, #20
    cbf6:	af00      	add	r7, sp, #0
    cbf8:	6078      	str	r0, [r7, #4]
    cbfa:	4608      	mov	r0, r1
    cbfc:	4611      	mov	r1, r2
    cbfe:	461a      	mov	r2, r3
    cc00:	4603      	mov	r3, r0
    cc02:	70fb      	strb	r3, [r7, #3]
    cc04:	460b      	mov	r3, r1
    cc06:	70bb      	strb	r3, [r7, #2]
    cc08:	4613      	mov	r3, r2
    cc0a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    cc0c:	78fa      	ldrb	r2, [r7, #3]
    cc0e:	78bb      	ldrb	r3, [r7, #2]
    cc10:	6879      	ldr	r1, [r7, #4]
    cc12:	01d2      	lsls	r2, r2, #7
    cc14:	440a      	add	r2, r1
    cc16:	4413      	add	r3, r2
    cc18:	3340      	adds	r3, #64	; 0x40
    cc1a:	781b      	ldrb	r3, [r3, #0]
    cc1c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    cc1e:	7bfb      	ldrb	r3, [r7, #15]
    cc20:	f023 0301 	bic.w	r3, r3, #1
    cc24:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    cc26:	787a      	ldrb	r2, [r7, #1]
    cc28:	7bfb      	ldrb	r3, [r7, #15]
    cc2a:	4313      	orrs	r3, r2
    cc2c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    cc2e:	78fa      	ldrb	r2, [r7, #3]
    cc30:	78bb      	ldrb	r3, [r7, #2]
    cc32:	6879      	ldr	r1, [r7, #4]
    cc34:	01d2      	lsls	r2, r2, #7
    cc36:	440a      	add	r2, r1
    cc38:	4413      	add	r3, r2
    cc3a:	3340      	adds	r3, #64	; 0x40
    cc3c:	7bfa      	ldrb	r2, [r7, #15]
    cc3e:	701a      	strb	r2, [r3, #0]
}
    cc40:	bf00      	nop
    cc42:	3714      	adds	r7, #20
    cc44:	46bd      	mov	sp, r7
    cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc4a:	4770      	bx	lr

0000cc4c <hri_port_write_WRCONFIG_reg>:
{
    cc4c:	b480      	push	{r7}
    cc4e:	b085      	sub	sp, #20
    cc50:	af00      	add	r7, sp, #0
    cc52:	60f8      	str	r0, [r7, #12]
    cc54:	460b      	mov	r3, r1
    cc56:	607a      	str	r2, [r7, #4]
    cc58:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    cc5a:	7afb      	ldrb	r3, [r7, #11]
    cc5c:	68fa      	ldr	r2, [r7, #12]
    cc5e:	01db      	lsls	r3, r3, #7
    cc60:	4413      	add	r3, r2
    cc62:	3328      	adds	r3, #40	; 0x28
    cc64:	687a      	ldr	r2, [r7, #4]
    cc66:	601a      	str	r2, [r3, #0]
}
    cc68:	bf00      	nop
    cc6a:	3714      	adds	r7, #20
    cc6c:	46bd      	mov	sp, r7
    cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc72:	4770      	bx	lr

0000cc74 <_gpio_set_direction>:
{
    cc74:	b580      	push	{r7, lr}
    cc76:	b082      	sub	sp, #8
    cc78:	af00      	add	r7, sp, #0
    cc7a:	4603      	mov	r3, r0
    cc7c:	6039      	str	r1, [r7, #0]
    cc7e:	71fb      	strb	r3, [r7, #7]
    cc80:	4613      	mov	r3, r2
    cc82:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    cc84:	79bb      	ldrb	r3, [r7, #6]
    cc86:	2b01      	cmp	r3, #1
    cc88:	d01c      	beq.n	ccc4 <_gpio_set_direction+0x50>
    cc8a:	2b02      	cmp	r3, #2
    cc8c:	d037      	beq.n	ccfe <_gpio_set_direction+0x8a>
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d14e      	bne.n	cd30 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    cc92:	79fb      	ldrb	r3, [r7, #7]
    cc94:	683a      	ldr	r2, [r7, #0]
    cc96:	4619      	mov	r1, r3
    cc98:	482a      	ldr	r0, [pc, #168]	; (cd44 <_gpio_set_direction+0xd0>)
    cc9a:	4b2b      	ldr	r3, [pc, #172]	; (cd48 <_gpio_set_direction+0xd4>)
    cc9c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    cc9e:	683b      	ldr	r3, [r7, #0]
    cca0:	b29b      	uxth	r3, r3
    cca2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cca6:	79fb      	ldrb	r3, [r7, #7]
    cca8:	4619      	mov	r1, r3
    ccaa:	4826      	ldr	r0, [pc, #152]	; (cd44 <_gpio_set_direction+0xd0>)
    ccac:	4b27      	ldr	r3, [pc, #156]	; (cd4c <_gpio_set_direction+0xd8>)
    ccae:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ccb0:	683b      	ldr	r3, [r7, #0]
    ccb2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ccb4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ccb8:	79fb      	ldrb	r3, [r7, #7]
    ccba:	4619      	mov	r1, r3
    ccbc:	4821      	ldr	r0, [pc, #132]	; (cd44 <_gpio_set_direction+0xd0>)
    ccbe:	4b23      	ldr	r3, [pc, #140]	; (cd4c <_gpio_set_direction+0xd8>)
    ccc0:	4798      	blx	r3
		break;
    ccc2:	e03a      	b.n	cd3a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ccc4:	79fb      	ldrb	r3, [r7, #7]
    ccc6:	683a      	ldr	r2, [r7, #0]
    ccc8:	4619      	mov	r1, r3
    ccca:	481e      	ldr	r0, [pc, #120]	; (cd44 <_gpio_set_direction+0xd0>)
    cccc:	4b1e      	ldr	r3, [pc, #120]	; (cd48 <_gpio_set_direction+0xd4>)
    ccce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ccd0:	683b      	ldr	r3, [r7, #0]
    ccd2:	b29b      	uxth	r3, r3
    ccd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ccd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ccdc:	79f9      	ldrb	r1, [r7, #7]
    ccde:	461a      	mov	r2, r3
    cce0:	4818      	ldr	r0, [pc, #96]	; (cd44 <_gpio_set_direction+0xd0>)
    cce2:	4b1a      	ldr	r3, [pc, #104]	; (cd4c <_gpio_set_direction+0xd8>)
    cce4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    cce6:	683b      	ldr	r3, [r7, #0]
    cce8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ccea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ccee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ccf2:	79f9      	ldrb	r1, [r7, #7]
    ccf4:	461a      	mov	r2, r3
    ccf6:	4813      	ldr	r0, [pc, #76]	; (cd44 <_gpio_set_direction+0xd0>)
    ccf8:	4b14      	ldr	r3, [pc, #80]	; (cd4c <_gpio_set_direction+0xd8>)
    ccfa:	4798      	blx	r3
		break;
    ccfc:	e01d      	b.n	cd3a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ccfe:	79fb      	ldrb	r3, [r7, #7]
    cd00:	683a      	ldr	r2, [r7, #0]
    cd02:	4619      	mov	r1, r3
    cd04:	480f      	ldr	r0, [pc, #60]	; (cd44 <_gpio_set_direction+0xd0>)
    cd06:	4b12      	ldr	r3, [pc, #72]	; (cd50 <_gpio_set_direction+0xdc>)
    cd08:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    cd0a:	683b      	ldr	r3, [r7, #0]
    cd0c:	b29b      	uxth	r3, r3
    cd0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cd12:	79fb      	ldrb	r3, [r7, #7]
    cd14:	4619      	mov	r1, r3
    cd16:	480b      	ldr	r0, [pc, #44]	; (cd44 <_gpio_set_direction+0xd0>)
    cd18:	4b0c      	ldr	r3, [pc, #48]	; (cd4c <_gpio_set_direction+0xd8>)
    cd1a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    cd1c:	683b      	ldr	r3, [r7, #0]
    cd1e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    cd20:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    cd24:	79fb      	ldrb	r3, [r7, #7]
    cd26:	4619      	mov	r1, r3
    cd28:	4806      	ldr	r0, [pc, #24]	; (cd44 <_gpio_set_direction+0xd0>)
    cd2a:	4b08      	ldr	r3, [pc, #32]	; (cd4c <_gpio_set_direction+0xd8>)
    cd2c:	4798      	blx	r3
		break;
    cd2e:	e004      	b.n	cd3a <_gpio_set_direction+0xc6>
		ASSERT(false);
    cd30:	2246      	movs	r2, #70	; 0x46
    cd32:	4908      	ldr	r1, [pc, #32]	; (cd54 <_gpio_set_direction+0xe0>)
    cd34:	2000      	movs	r0, #0
    cd36:	4b08      	ldr	r3, [pc, #32]	; (cd58 <_gpio_set_direction+0xe4>)
    cd38:	4798      	blx	r3
}
    cd3a:	bf00      	nop
    cd3c:	3708      	adds	r7, #8
    cd3e:	46bd      	mov	sp, r7
    cd40:	bd80      	pop	{r7, pc}
    cd42:	bf00      	nop
    cd44:	41008000 	.word	0x41008000
    cd48:	0000cabd 	.word	0x0000cabd
    cd4c:	0000cc4d 	.word	0x0000cc4d
    cd50:	0000ca95 	.word	0x0000ca95
    cd54:	0001ae8c 	.word	0x0001ae8c
    cd58:	00004bbd 	.word	0x00004bbd

0000cd5c <_gpio_set_level>:
{
    cd5c:	b580      	push	{r7, lr}
    cd5e:	b082      	sub	sp, #8
    cd60:	af00      	add	r7, sp, #0
    cd62:	4603      	mov	r3, r0
    cd64:	6039      	str	r1, [r7, #0]
    cd66:	71fb      	strb	r3, [r7, #7]
    cd68:	4613      	mov	r3, r2
    cd6a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    cd6c:	79bb      	ldrb	r3, [r7, #6]
    cd6e:	2b00      	cmp	r3, #0
    cd70:	d006      	beq.n	cd80 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    cd72:	79fb      	ldrb	r3, [r7, #7]
    cd74:	683a      	ldr	r2, [r7, #0]
    cd76:	4619      	mov	r1, r3
    cd78:	4806      	ldr	r0, [pc, #24]	; (cd94 <_gpio_set_level+0x38>)
    cd7a:	4b07      	ldr	r3, [pc, #28]	; (cd98 <_gpio_set_level+0x3c>)
    cd7c:	4798      	blx	r3
}
    cd7e:	e005      	b.n	cd8c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    cd80:	79fb      	ldrb	r3, [r7, #7]
    cd82:	683a      	ldr	r2, [r7, #0]
    cd84:	4619      	mov	r1, r3
    cd86:	4803      	ldr	r0, [pc, #12]	; (cd94 <_gpio_set_level+0x38>)
    cd88:	4b04      	ldr	r3, [pc, #16]	; (cd9c <_gpio_set_level+0x40>)
    cd8a:	4798      	blx	r3
}
    cd8c:	bf00      	nop
    cd8e:	3708      	adds	r7, #8
    cd90:	46bd      	mov	sp, r7
    cd92:	bd80      	pop	{r7, pc}
    cd94:	41008000 	.word	0x41008000
    cd98:	0000cae5 	.word	0x0000cae5
    cd9c:	0000cb0d 	.word	0x0000cb0d

0000cda0 <_gpio_set_pin_function>:
{
    cda0:	b590      	push	{r4, r7, lr}
    cda2:	b085      	sub	sp, #20
    cda4:	af00      	add	r7, sp, #0
    cda6:	6078      	str	r0, [r7, #4]
    cda8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    cdaa:	687b      	ldr	r3, [r7, #4]
    cdac:	095b      	lsrs	r3, r3, #5
    cdae:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    cdb0:	687b      	ldr	r3, [r7, #4]
    cdb2:	b2db      	uxtb	r3, r3
    cdb4:	f003 031f 	and.w	r3, r3, #31
    cdb8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    cdba:	683b      	ldr	r3, [r7, #0]
    cdbc:	f1b3 3fff 	cmp.w	r3, #4294967295
    cdc0:	d106      	bne.n	cdd0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    cdc2:	7bba      	ldrb	r2, [r7, #14]
    cdc4:	7bf9      	ldrb	r1, [r7, #15]
    cdc6:	2300      	movs	r3, #0
    cdc8:	4812      	ldr	r0, [pc, #72]	; (ce14 <_gpio_set_pin_function+0x74>)
    cdca:	4c13      	ldr	r4, [pc, #76]	; (ce18 <_gpio_set_pin_function+0x78>)
    cdcc:	47a0      	blx	r4
}
    cdce:	e01d      	b.n	ce0c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    cdd0:	7bba      	ldrb	r2, [r7, #14]
    cdd2:	7bf9      	ldrb	r1, [r7, #15]
    cdd4:	2301      	movs	r3, #1
    cdd6:	480f      	ldr	r0, [pc, #60]	; (ce14 <_gpio_set_pin_function+0x74>)
    cdd8:	4c0f      	ldr	r4, [pc, #60]	; (ce18 <_gpio_set_pin_function+0x78>)
    cdda:	47a0      	blx	r4
		if (pin & 1) {
    cddc:	7bbb      	ldrb	r3, [r7, #14]
    cdde:	f003 0301 	and.w	r3, r3, #1
    cde2:	2b00      	cmp	r3, #0
    cde4:	d009      	beq.n	cdfa <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    cde6:	7bbb      	ldrb	r3, [r7, #14]
    cde8:	085b      	lsrs	r3, r3, #1
    cdea:	b2da      	uxtb	r2, r3
    cdec:	683b      	ldr	r3, [r7, #0]
    cdee:	b2db      	uxtb	r3, r3
    cdf0:	7bf9      	ldrb	r1, [r7, #15]
    cdf2:	4808      	ldr	r0, [pc, #32]	; (ce14 <_gpio_set_pin_function+0x74>)
    cdf4:	4c09      	ldr	r4, [pc, #36]	; (ce1c <_gpio_set_pin_function+0x7c>)
    cdf6:	47a0      	blx	r4
}
    cdf8:	e008      	b.n	ce0c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    cdfa:	7bbb      	ldrb	r3, [r7, #14]
    cdfc:	085b      	lsrs	r3, r3, #1
    cdfe:	b2da      	uxtb	r2, r3
    ce00:	683b      	ldr	r3, [r7, #0]
    ce02:	b2db      	uxtb	r3, r3
    ce04:	7bf9      	ldrb	r1, [r7, #15]
    ce06:	4803      	ldr	r0, [pc, #12]	; (ce14 <_gpio_set_pin_function+0x74>)
    ce08:	4c05      	ldr	r4, [pc, #20]	; (ce20 <_gpio_set_pin_function+0x80>)
    ce0a:	47a0      	blx	r4
}
    ce0c:	bf00      	nop
    ce0e:	3714      	adds	r7, #20
    ce10:	46bd      	mov	sp, r7
    ce12:	bd90      	pop	{r4, r7, pc}
    ce14:	41008000 	.word	0x41008000
    ce18:	0000cbf3 	.word	0x0000cbf3
    ce1c:	0000cb95 	.word	0x0000cb95
    ce20:	0000cb35 	.word	0x0000cb35

0000ce24 <gpio_set_pin_function>:
{
    ce24:	b580      	push	{r7, lr}
    ce26:	b082      	sub	sp, #8
    ce28:	af00      	add	r7, sp, #0
    ce2a:	6078      	str	r0, [r7, #4]
    ce2c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ce2e:	6839      	ldr	r1, [r7, #0]
    ce30:	6878      	ldr	r0, [r7, #4]
    ce32:	4b03      	ldr	r3, [pc, #12]	; (ce40 <gpio_set_pin_function+0x1c>)
    ce34:	4798      	blx	r3
}
    ce36:	bf00      	nop
    ce38:	3708      	adds	r7, #8
    ce3a:	46bd      	mov	sp, r7
    ce3c:	bd80      	pop	{r7, pc}
    ce3e:	bf00      	nop
    ce40:	0000cda1 	.word	0x0000cda1

0000ce44 <gpio_set_pin_direction>:
{
    ce44:	b580      	push	{r7, lr}
    ce46:	b082      	sub	sp, #8
    ce48:	af00      	add	r7, sp, #0
    ce4a:	4603      	mov	r3, r0
    ce4c:	460a      	mov	r2, r1
    ce4e:	71fb      	strb	r3, [r7, #7]
    ce50:	4613      	mov	r3, r2
    ce52:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ce54:	79fb      	ldrb	r3, [r7, #7]
    ce56:	095b      	lsrs	r3, r3, #5
    ce58:	b2d8      	uxtb	r0, r3
    ce5a:	79fb      	ldrb	r3, [r7, #7]
    ce5c:	f003 031f 	and.w	r3, r3, #31
    ce60:	2201      	movs	r2, #1
    ce62:	fa02 f303 	lsl.w	r3, r2, r3
    ce66:	79ba      	ldrb	r2, [r7, #6]
    ce68:	4619      	mov	r1, r3
    ce6a:	4b03      	ldr	r3, [pc, #12]	; (ce78 <gpio_set_pin_direction+0x34>)
    ce6c:	4798      	blx	r3
}
    ce6e:	bf00      	nop
    ce70:	3708      	adds	r7, #8
    ce72:	46bd      	mov	sp, r7
    ce74:	bd80      	pop	{r7, pc}
    ce76:	bf00      	nop
    ce78:	0000cc75 	.word	0x0000cc75

0000ce7c <gpio_set_pin_level>:
{
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b082      	sub	sp, #8
    ce80:	af00      	add	r7, sp, #0
    ce82:	4603      	mov	r3, r0
    ce84:	460a      	mov	r2, r1
    ce86:	71fb      	strb	r3, [r7, #7]
    ce88:	4613      	mov	r3, r2
    ce8a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    ce8c:	79fb      	ldrb	r3, [r7, #7]
    ce8e:	095b      	lsrs	r3, r3, #5
    ce90:	b2d8      	uxtb	r0, r3
    ce92:	79fb      	ldrb	r3, [r7, #7]
    ce94:	f003 031f 	and.w	r3, r3, #31
    ce98:	2201      	movs	r2, #1
    ce9a:	fa02 f303 	lsl.w	r3, r2, r3
    ce9e:	79ba      	ldrb	r2, [r7, #6]
    cea0:	4619      	mov	r1, r3
    cea2:	4b03      	ldr	r3, [pc, #12]	; (ceb0 <gpio_set_pin_level+0x34>)
    cea4:	4798      	blx	r3
}
    cea6:	bf00      	nop
    cea8:	3708      	adds	r7, #8
    ceaa:	46bd      	mov	sp, r7
    ceac:	bd80      	pop	{r7, pc}
    ceae:	bf00      	nop
    ceb0:	0000cd5d 	.word	0x0000cd5d

0000ceb4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ceb4:	b580      	push	{r7, lr}
    ceb6:	b082      	sub	sp, #8
    ceb8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ceba:	2100      	movs	r1, #0
    cebc:	2008      	movs	r0, #8
    cebe:	4b24      	ldr	r3, [pc, #144]	; (cf50 <QSPI_N25Q256_exit_xip+0x9c>)
    cec0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    cec2:	2100      	movs	r1, #0
    cec4:	202b      	movs	r0, #43	; 0x2b
    cec6:	4b22      	ldr	r3, [pc, #136]	; (cf50 <QSPI_N25Q256_exit_xip+0x9c>)
    cec8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ceca:	2100      	movs	r1, #0
    cecc:	202a      	movs	r0, #42	; 0x2a
    cece:	4b20      	ldr	r3, [pc, #128]	; (cf50 <QSPI_N25Q256_exit_xip+0x9c>)
    ced0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ced2:	2102      	movs	r1, #2
    ced4:	2008      	movs	r0, #8
    ced6:	4b1f      	ldr	r3, [pc, #124]	; (cf54 <QSPI_N25Q256_exit_xip+0xa0>)
    ced8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ceda:	2102      	movs	r1, #2
    cedc:	202b      	movs	r0, #43	; 0x2b
    cede:	4b1d      	ldr	r3, [pc, #116]	; (cf54 <QSPI_N25Q256_exit_xip+0xa0>)
    cee0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    cee2:	2102      	movs	r1, #2
    cee4:	202a      	movs	r0, #42	; 0x2a
    cee6:	4b1b      	ldr	r3, [pc, #108]	; (cf54 <QSPI_N25Q256_exit_xip+0xa0>)
    cee8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ceea:	2101      	movs	r1, #1
    ceec:	2008      	movs	r0, #8
    ceee:	4b1a      	ldr	r3, [pc, #104]	; (cf58 <QSPI_N25Q256_exit_xip+0xa4>)
    cef0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    cef2:	2100      	movs	r1, #0
    cef4:	202b      	movs	r0, #43	; 0x2b
    cef6:	4b18      	ldr	r3, [pc, #96]	; (cf58 <QSPI_N25Q256_exit_xip+0xa4>)
    cef8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    cefa:	2100      	movs	r1, #0
    cefc:	202a      	movs	r0, #42	; 0x2a
    cefe:	4b16      	ldr	r3, [pc, #88]	; (cf58 <QSPI_N25Q256_exit_xip+0xa4>)
    cf00:	4798      	blx	r3

	delay_us(1);
    cf02:	2001      	movs	r0, #1
    cf04:	4b15      	ldr	r3, [pc, #84]	; (cf5c <QSPI_N25Q256_exit_xip+0xa8>)
    cf06:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    cf08:	2300      	movs	r3, #0
    cf0a:	607b      	str	r3, [r7, #4]
    cf0c:	e010      	b.n	cf30 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    cf0e:	2101      	movs	r1, #1
    cf10:	202a      	movs	r0, #42	; 0x2a
    cf12:	4b11      	ldr	r3, [pc, #68]	; (cf58 <QSPI_N25Q256_exit_xip+0xa4>)
    cf14:	4798      	blx	r3
		delay_us(1);
    cf16:	2001      	movs	r0, #1
    cf18:	4b10      	ldr	r3, [pc, #64]	; (cf5c <QSPI_N25Q256_exit_xip+0xa8>)
    cf1a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    cf1c:	2100      	movs	r1, #0
    cf1e:	202a      	movs	r0, #42	; 0x2a
    cf20:	4b0d      	ldr	r3, [pc, #52]	; (cf58 <QSPI_N25Q256_exit_xip+0xa4>)
    cf22:	4798      	blx	r3
		delay_us(1);
    cf24:	2001      	movs	r0, #1
    cf26:	4b0d      	ldr	r3, [pc, #52]	; (cf5c <QSPI_N25Q256_exit_xip+0xa8>)
    cf28:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    cf2a:	687b      	ldr	r3, [r7, #4]
    cf2c:	3301      	adds	r3, #1
    cf2e:	607b      	str	r3, [r7, #4]
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	2b06      	cmp	r3, #6
    cf34:	ddeb      	ble.n	cf0e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    cf36:	2101      	movs	r1, #1
    cf38:	202b      	movs	r0, #43	; 0x2b
    cf3a:	4b07      	ldr	r3, [pc, #28]	; (cf58 <QSPI_N25Q256_exit_xip+0xa4>)
    cf3c:	4798      	blx	r3
	delay_us(1);
    cf3e:	2001      	movs	r0, #1
    cf40:	4b06      	ldr	r3, [pc, #24]	; (cf5c <QSPI_N25Q256_exit_xip+0xa8>)
    cf42:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    cf44:	4b06      	ldr	r3, [pc, #24]	; (cf60 <QSPI_N25Q256_exit_xip+0xac>)
    cf46:	4798      	blx	r3
}
    cf48:	bf00      	nop
    cf4a:	3708      	adds	r7, #8
    cf4c:	46bd      	mov	sp, r7
    cf4e:	bd80      	pop	{r7, pc}
    cf50:	0000ce25 	.word	0x0000ce25
    cf54:	0000ce45 	.word	0x0000ce45
    cf58:	0000ce7d 	.word	0x0000ce7d
    cf5c:	0000352d 	.word	0x0000352d
    cf60:	00002225 	.word	0x00002225

0000cf64 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    cf64:	b598      	push	{r3, r4, r7, lr}
    cf66:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    cf68:	4806      	ldr	r0, [pc, #24]	; (cf84 <spi_nor_flash_init+0x20>)
    cf6a:	4b07      	ldr	r3, [pc, #28]	; (cf88 <spi_nor_flash_init+0x24>)
    cf6c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    cf6e:	2300      	movs	r3, #0
    cf70:	4a06      	ldr	r2, [pc, #24]	; (cf8c <spi_nor_flash_init+0x28>)
    cf72:	4904      	ldr	r1, [pc, #16]	; (cf84 <spi_nor_flash_init+0x20>)
    cf74:	4806      	ldr	r0, [pc, #24]	; (cf90 <spi_nor_flash_init+0x2c>)
    cf76:	4c07      	ldr	r4, [pc, #28]	; (cf94 <spi_nor_flash_init+0x30>)
    cf78:	47a0      	blx	r4
    cf7a:	4602      	mov	r2, r0
    cf7c:	4b06      	ldr	r3, [pc, #24]	; (cf98 <spi_nor_flash_init+0x34>)
    cf7e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    cf80:	bf00      	nop
    cf82:	bd98      	pop	{r3, r4, r7, pc}
    cf84:	2000df40 	.word	0x2000df40
    cf88:	00003a65 	.word	0x00003a65
    cf8c:	0000ceb5 	.word	0x0000ceb5
    cf90:	200026e0 	.word	0x200026e0
    cf94:	0000d3d1 	.word	0x0000d3d1
    cf98:	2000e140 	.word	0x2000e140

0000cf9c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    cf9c:	b580      	push	{r7, lr}
    cf9e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    cfa0:	4805      	ldr	r0, [pc, #20]	; (cfb8 <cdc_device_acm_init+0x1c>)
    cfa2:	4b06      	ldr	r3, [pc, #24]	; (cfbc <cdc_device_acm_init+0x20>)
    cfa4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    cfa6:	4b06      	ldr	r3, [pc, #24]	; (cfc0 <cdc_device_acm_init+0x24>)
    cfa8:	4798      	blx	r3

	usbdc_start(single_desc);
    cfaa:	4806      	ldr	r0, [pc, #24]	; (cfc4 <cdc_device_acm_init+0x28>)
    cfac:	4b06      	ldr	r3, [pc, #24]	; (cfc8 <cdc_device_acm_init+0x2c>)
    cfae:	4798      	blx	r3
	usbdc_attach();
    cfb0:	4b06      	ldr	r3, [pc, #24]	; (cfcc <cdc_device_acm_init+0x30>)
    cfb2:	4798      	blx	r3
}
    cfb4:	bf00      	nop
    cfb6:	bd80      	pop	{r7, pc}
    cfb8:	20002730 	.word	0x20002730
    cfbc:	0000eaf9 	.word	0x0000eaf9
    cfc0:	0000dd71 	.word	0x0000dd71
    cfc4:	20000200 	.word	0x20000200
    cfc8:	0000eb95 	.word	0x0000eb95
    cfcc:	0000ebe5 	.word	0x0000ebe5

0000cfd0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    cfd4:	4b01      	ldr	r3, [pc, #4]	; (cfdc <usb_init+0xc>)
    cfd6:	4798      	blx	r3
}
    cfd8:	bf00      	nop
    cfda:	bd80      	pop	{r7, pc}
    cfdc:	0000cf9d 	.word	0x0000cf9d

0000cfe0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    cfe0:	b480      	push	{r7}
    cfe2:	b085      	sub	sp, #20
    cfe4:	af00      	add	r7, sp, #0
    cfe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cfe8:	f3ef 8310 	mrs	r3, PRIMASK
    cfec:	60fb      	str	r3, [r7, #12]
  return(result);
    cfee:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    cff0:	687b      	ldr	r3, [r7, #4]
    cff2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    cff4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    cff6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    cffa:	bf00      	nop
    cffc:	3714      	adds	r7, #20
    cffe:	46bd      	mov	sp, r7
    d000:	f85d 7b04 	ldr.w	r7, [sp], #4
    d004:	4770      	bx	lr

0000d006 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    d006:	b480      	push	{r7}
    d008:	b085      	sub	sp, #20
    d00a:	af00      	add	r7, sp, #0
    d00c:	6078      	str	r0, [r7, #4]
    d00e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    d012:	687b      	ldr	r3, [r7, #4]
    d014:	681b      	ldr	r3, [r3, #0]
    d016:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d018:	68fb      	ldr	r3, [r7, #12]
    d01a:	f383 8810 	msr	PRIMASK, r3
}
    d01e:	bf00      	nop
    d020:	3714      	adds	r7, #20
    d022:	46bd      	mov	sp, r7
    d024:	f85d 7b04 	ldr.w	r7, [sp], #4
    d028:	4770      	bx	lr
	...

0000d02c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d02c:	b580      	push	{r7, lr}
    d02e:	b08c      	sub	sp, #48	; 0x30
    d030:	af00      	add	r7, sp, #0
    d032:	6078      	str	r0, [r7, #4]
    d034:	460b      	mov	r3, r1
    d036:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d038:	687b      	ldr	r3, [r7, #4]
    d03a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d03c:	687b      	ldr	r3, [r7, #4]
    d03e:	681b      	ldr	r3, [r3, #0]
    d040:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d042:	f107 030c 	add.w	r3, r7, #12
    d046:	2200      	movs	r2, #0
    d048:	601a      	str	r2, [r3, #0]
    d04a:	605a      	str	r2, [r3, #4]
    d04c:	609a      	str	r2, [r3, #8]
    d04e:	60da      	str	r2, [r3, #12]
    d050:	611a      	str	r2, [r3, #16]
    d052:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d056:	7b1b      	ldrb	r3, [r3, #12]
    d058:	2b00      	cmp	r3, #0
    d05a:	d001      	beq.n	d060 <n25q256a_xip_confirm+0x34>
    d05c:	2206      	movs	r2, #6
    d05e:	e000      	b.n	d062 <n25q256a_xip_confirm+0x36>
    d060:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d062:	7b3b      	ldrb	r3, [r7, #12]
    d064:	f362 0302 	bfi	r3, r2, #0, #3
    d068:	733b      	strb	r3, [r7, #12]
    d06a:	7b3b      	ldrb	r3, [r7, #12]
    d06c:	f043 0310 	orr.w	r3, r3, #16
    d070:	733b      	strb	r3, [r7, #12]
    d072:	7b3b      	ldrb	r3, [r7, #12]
    d074:	f043 0320 	orr.w	r3, r3, #32
    d078:	733b      	strb	r3, [r7, #12]
    d07a:	7b3b      	ldrb	r3, [r7, #12]
    d07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d080:	733b      	strb	r3, [r7, #12]
    d082:	7b3b      	ldrb	r3, [r7, #12]
    d084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d088:	733b      	strb	r3, [r7, #12]
    d08a:	7b7b      	ldrb	r3, [r7, #13]
    d08c:	f043 0303 	orr.w	r3, r3, #3
    d090:	737b      	strb	r3, [r7, #13]
    d092:	7b7b      	ldrb	r3, [r7, #13]
    d094:	2201      	movs	r2, #1
    d096:	f362 1305 	bfi	r3, r2, #4, #2
    d09a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d09e:	7b1b      	ldrb	r3, [r3, #12]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d001      	beq.n	d0a8 <n25q256a_xip_confirm+0x7c>
    d0a4:	2208      	movs	r2, #8
    d0a6:	e000      	b.n	d0aa <n25q256a_xip_confirm+0x7e>
    d0a8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d0aa:	7bbb      	ldrb	r3, [r7, #14]
    d0ac:	f362 0304 	bfi	r3, r2, #0, #5
    d0b0:	73bb      	strb	r3, [r7, #14]
    d0b2:	230b      	movs	r3, #11
    d0b4:	743b      	strb	r3, [r7, #16]
    d0b6:	78fb      	ldrb	r3, [r7, #3]
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d001      	beq.n	d0c0 <n25q256a_xip_confirm+0x94>
    d0bc:	2300      	movs	r3, #0
    d0be:	e000      	b.n	d0c2 <n25q256a_xip_confirm+0x96>
    d0c0:	23ff      	movs	r3, #255	; 0xff
    d0c2:	747b      	strb	r3, [r7, #17]
    d0c4:	2301      	movs	r3, #1
    d0c6:	61bb      	str	r3, [r7, #24]
    d0c8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d0cc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d0ce:	f107 030c 	add.w	r3, r7, #12
    d0d2:	4619      	mov	r1, r3
    d0d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d0d6:	4b07      	ldr	r3, [pc, #28]	; (d0f4 <n25q256a_xip_confirm+0xc8>)
    d0d8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d0da:	78fb      	ldrb	r3, [r7, #3]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d001      	beq.n	d0e4 <n25q256a_xip_confirm+0xb8>
    d0e0:	2202      	movs	r2, #2
    d0e2:	e000      	b.n	d0e6 <n25q256a_xip_confirm+0xba>
    d0e4:	2201      	movs	r2, #1
    d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0e8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d0ea:	2300      	movs	r3, #0
}
    d0ec:	4618      	mov	r0, r3
    d0ee:	3730      	adds	r7, #48	; 0x30
    d0f0:	46bd      	mov	sp, r7
    d0f2:	bd80      	pop	{r7, pc}
    d0f4:	00003add 	.word	0x00003add

0000d0f8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b08c      	sub	sp, #48	; 0x30
    d0fc:	af00      	add	r7, sp, #0
    d0fe:	6078      	str	r0, [r7, #4]
    d100:	460b      	mov	r3, r1
    d102:	70fb      	strb	r3, [r7, #3]
    d104:	4613      	mov	r3, r2
    d106:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d108:	2300      	movs	r3, #0
    d10a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d110:	687b      	ldr	r3, [r7, #4]
    d112:	681b      	ldr	r3, [r3, #0]
    d114:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d116:	f107 030c 	add.w	r3, r7, #12
    d11a:	2200      	movs	r2, #0
    d11c:	601a      	str	r2, [r3, #0]
    d11e:	605a      	str	r2, [r3, #4]
    d120:	609a      	str	r2, [r3, #8]
    d122:	60da      	str	r2, [r3, #12]
    d124:	611a      	str	r2, [r3, #16]
    d126:	615a      	str	r2, [r3, #20]
    d128:	78fb      	ldrb	r3, [r7, #3]
    d12a:	f003 0307 	and.w	r3, r3, #7
    d12e:	b2da      	uxtb	r2, r3
    d130:	7b3b      	ldrb	r3, [r7, #12]
    d132:	f362 0302 	bfi	r3, r2, #0, #3
    d136:	733b      	strb	r3, [r7, #12]
    d138:	7b3b      	ldrb	r3, [r7, #12]
    d13a:	f043 0310 	orr.w	r3, r3, #16
    d13e:	733b      	strb	r3, [r7, #12]
    d140:	7b3b      	ldrb	r3, [r7, #12]
    d142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d146:	733b      	strb	r3, [r7, #12]
    d148:	78bb      	ldrb	r3, [r7, #2]
    d14a:	743b      	strb	r3, [r7, #16]
    d14c:	2301      	movs	r3, #1
    d14e:	61bb      	str	r3, [r7, #24]
    d150:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d154:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d158:	7b5b      	ldrb	r3, [r3, #13]
    d15a:	2b00      	cmp	r3, #0
    d15c:	d003      	beq.n	d166 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d15e:	2100      	movs	r1, #0
    d160:	6878      	ldr	r0, [r7, #4]
    d162:	4b0a      	ldr	r3, [pc, #40]	; (d18c <n25q256a_read_reg+0x94>)
    d164:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d166:	f107 030c 	add.w	r3, r7, #12
    d16a:	4619      	mov	r1, r3
    d16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d16e:	4b08      	ldr	r3, [pc, #32]	; (d190 <n25q256a_read_reg+0x98>)
    d170:	4798      	blx	r3
	if (n25q->xip_mode) {
    d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d174:	7b5b      	ldrb	r3, [r3, #13]
    d176:	2b00      	cmp	r3, #0
    d178:	d003      	beq.n	d182 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d17a:	2101      	movs	r1, #1
    d17c:	6878      	ldr	r0, [r7, #4]
    d17e:	4b03      	ldr	r3, [pc, #12]	; (d18c <n25q256a_read_reg+0x94>)
    d180:	4798      	blx	r3
	}
	return status;
    d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d184:	4618      	mov	r0, r3
    d186:	3730      	adds	r7, #48	; 0x30
    d188:	46bd      	mov	sp, r7
    d18a:	bd80      	pop	{r7, pc}
    d18c:	0000d02d 	.word	0x0000d02d
    d190:	00003add 	.word	0x00003add

0000d194 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d194:	b580      	push	{r7, lr}
    d196:	b08c      	sub	sp, #48	; 0x30
    d198:	af00      	add	r7, sp, #0
    d19a:	60f8      	str	r0, [r7, #12]
    d19c:	607b      	str	r3, [r7, #4]
    d19e:	460b      	mov	r3, r1
    d1a0:	72fb      	strb	r3, [r7, #11]
    d1a2:	4613      	mov	r3, r2
    d1a4:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d1a6:	68fb      	ldr	r3, [r7, #12]
    d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d1aa:	68fb      	ldr	r3, [r7, #12]
    d1ac:	681b      	ldr	r3, [r3, #0]
    d1ae:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d1b0:	f107 0310 	add.w	r3, r7, #16
    d1b4:	2200      	movs	r2, #0
    d1b6:	601a      	str	r2, [r3, #0]
    d1b8:	605a      	str	r2, [r3, #4]
    d1ba:	609a      	str	r2, [r3, #8]
    d1bc:	60da      	str	r2, [r3, #12]
    d1be:	611a      	str	r2, [r3, #16]
    d1c0:	615a      	str	r2, [r3, #20]
    d1c2:	7afb      	ldrb	r3, [r7, #11]
    d1c4:	f003 0307 	and.w	r3, r3, #7
    d1c8:	b2da      	uxtb	r2, r3
    d1ca:	7c3b      	ldrb	r3, [r7, #16]
    d1cc:	f362 0302 	bfi	r3, r2, #0, #3
    d1d0:	743b      	strb	r3, [r7, #16]
    d1d2:	7c3b      	ldrb	r3, [r7, #16]
    d1d4:	f043 0310 	orr.w	r3, r3, #16
    d1d8:	743b      	strb	r3, [r7, #16]
    d1da:	7c3b      	ldrb	r3, [r7, #16]
    d1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d1e0:	743b      	strb	r3, [r7, #16]
    d1e2:	7c7b      	ldrb	r3, [r7, #17]
    d1e4:	2202      	movs	r2, #2
    d1e6:	f362 1305 	bfi	r3, r2, #4, #2
    d1ea:	747b      	strb	r3, [r7, #17]
    d1ec:	7abb      	ldrb	r3, [r7, #10]
    d1ee:	753b      	strb	r3, [r7, #20]
    d1f0:	2301      	movs	r3, #1
    d1f2:	61fb      	str	r3, [r7, #28]
    d1f4:	1d3b      	adds	r3, r7, #4
    d1f6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1fa:	7b5b      	ldrb	r3, [r3, #13]
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	d003      	beq.n	d208 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d200:	2100      	movs	r1, #0
    d202:	68f8      	ldr	r0, [r7, #12]
    d204:	4b09      	ldr	r3, [pc, #36]	; (d22c <n25q256a_write_reg+0x98>)
    d206:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d208:	f107 0310 	add.w	r3, r7, #16
    d20c:	4619      	mov	r1, r3
    d20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d210:	4b07      	ldr	r3, [pc, #28]	; (d230 <n25q256a_write_reg+0x9c>)
    d212:	4798      	blx	r3
	if (n25q->xip_mode) {
    d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d216:	7b5b      	ldrb	r3, [r3, #13]
    d218:	2b00      	cmp	r3, #0
    d21a:	d003      	beq.n	d224 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d21c:	2101      	movs	r1, #1
    d21e:	68f8      	ldr	r0, [r7, #12]
    d220:	4b02      	ldr	r3, [pc, #8]	; (d22c <n25q256a_write_reg+0x98>)
    d222:	4798      	blx	r3
	}
}
    d224:	bf00      	nop
    d226:	3730      	adds	r7, #48	; 0x30
    d228:	46bd      	mov	sp, r7
    d22a:	bd80      	pop	{r7, pc}
    d22c:	0000d02d 	.word	0x0000d02d
    d230:	00003add 	.word	0x00003add

0000d234 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d234:	b580      	push	{r7, lr}
    d236:	b090      	sub	sp, #64	; 0x40
    d238:	af00      	add	r7, sp, #0
    d23a:	6078      	str	r0, [r7, #4]
    d23c:	460b      	mov	r3, r1
    d23e:	70fb      	strb	r3, [r7, #3]
    d240:	4613      	mov	r3, r2
    d242:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d244:	687b      	ldr	r3, [r7, #4]
    d246:	681b      	ldr	r3, [r3, #0]
    d248:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d24a:	78bb      	ldrb	r3, [r7, #2]
    d24c:	2b00      	cmp	r3, #0
    d24e:	d001      	beq.n	d254 <n25q256a_write_enable+0x20>
    d250:	2306      	movs	r3, #6
    d252:	e000      	b.n	d256 <n25q256a_write_enable+0x22>
    d254:	2304      	movs	r3, #4
    d256:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d25a:	f107 0320 	add.w	r3, r7, #32
    d25e:	2200      	movs	r2, #0
    d260:	601a      	str	r2, [r3, #0]
    d262:	605a      	str	r2, [r3, #4]
    d264:	609a      	str	r2, [r3, #8]
    d266:	60da      	str	r2, [r3, #12]
    d268:	611a      	str	r2, [r3, #16]
    d26a:	615a      	str	r2, [r3, #20]
    d26c:	78fb      	ldrb	r3, [r7, #3]
    d26e:	f003 0307 	and.w	r3, r3, #7
    d272:	b2da      	uxtb	r2, r3
    d274:	f897 3020 	ldrb.w	r3, [r7, #32]
    d278:	f362 0302 	bfi	r3, r2, #0, #3
    d27c:	f887 3020 	strb.w	r3, [r7, #32]
    d280:	f897 3020 	ldrb.w	r3, [r7, #32]
    d284:	f043 0310 	orr.w	r3, r3, #16
    d288:	f887 3020 	strb.w	r3, [r7, #32]
    d28c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d290:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d294:	f107 0308 	add.w	r3, r7, #8
    d298:	2200      	movs	r2, #0
    d29a:	601a      	str	r2, [r3, #0]
    d29c:	605a      	str	r2, [r3, #4]
    d29e:	609a      	str	r2, [r3, #8]
    d2a0:	60da      	str	r2, [r3, #12]
    d2a2:	611a      	str	r2, [r3, #16]
    d2a4:	615a      	str	r2, [r3, #20]
    d2a6:	78fb      	ldrb	r3, [r7, #3]
    d2a8:	f003 0307 	and.w	r3, r3, #7
    d2ac:	b2da      	uxtb	r2, r3
    d2ae:	7a3b      	ldrb	r3, [r7, #8]
    d2b0:	f362 0302 	bfi	r3, r2, #0, #3
    d2b4:	723b      	strb	r3, [r7, #8]
    d2b6:	7a3b      	ldrb	r3, [r7, #8]
    d2b8:	f043 0310 	orr.w	r3, r3, #16
    d2bc:	723b      	strb	r3, [r7, #8]
    d2be:	7a3b      	ldrb	r3, [r7, #8]
    d2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d2c4:	723b      	strb	r3, [r7, #8]
    d2c6:	2305      	movs	r3, #5
    d2c8:	733b      	strb	r3, [r7, #12]
    d2ca:	2301      	movs	r3, #1
    d2cc:	617b      	str	r3, [r7, #20]
    d2ce:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    d2d2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    d2d4:	f107 0320 	add.w	r3, r7, #32
    d2d8:	4619      	mov	r1, r3
    d2da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d2dc:	4b08      	ldr	r3, [pc, #32]	; (d300 <n25q256a_write_enable+0xcc>)
    d2de:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    d2e0:	f107 0308 	add.w	r3, r7, #8
    d2e4:	4619      	mov	r1, r3
    d2e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d2e8:	4b05      	ldr	r3, [pc, #20]	; (d300 <n25q256a_write_enable+0xcc>)
    d2ea:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    d2ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    d2f0:	f003 0302 	and.w	r3, r3, #2
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d0ed      	beq.n	d2d4 <n25q256a_write_enable+0xa0>
}
    d2f8:	bf00      	nop
    d2fa:	3740      	adds	r7, #64	; 0x40
    d2fc:	46bd      	mov	sp, r7
    d2fe:	bd80      	pop	{r7, pc}
    d300:	00003add 	.word	0x00003add

0000d304 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    d304:	b590      	push	{r4, r7, lr}
    d306:	b087      	sub	sp, #28
    d308:	af00      	add	r7, sp, #0
    d30a:	6078      	str	r0, [r7, #4]
    d30c:	460b      	mov	r3, r1
    d30e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d314:	68fb      	ldr	r3, [r7, #12]
    d316:	7b1b      	ldrb	r3, [r3, #12]
    d318:	2b00      	cmp	r3, #0
    d31a:	d001      	beq.n	d320 <n25q256a_switch_mode+0x1c>
    d31c:	2306      	movs	r3, #6
    d31e:	e000      	b.n	d322 <n25q256a_switch_mode+0x1e>
    d320:	2300      	movs	r3, #0
    d322:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d324:	7afb      	ldrb	r3, [r7, #11]
    d326:	2265      	movs	r2, #101	; 0x65
    d328:	4619      	mov	r1, r3
    d32a:	6878      	ldr	r0, [r7, #4]
    d32c:	4b25      	ldr	r3, [pc, #148]	; (d3c4 <n25q256a_switch_mode+0xc0>)
    d32e:	4798      	blx	r3
    d330:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    d332:	2300      	movs	r3, #0
    d334:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    d336:	68fb      	ldr	r3, [r7, #12]
    d338:	7b1b      	ldrb	r3, [r3, #12]
    d33a:	78fa      	ldrb	r2, [r7, #3]
    d33c:	429a      	cmp	r2, r3
    d33e:	d03d      	beq.n	d3bc <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    d340:	78fb      	ldrb	r3, [r7, #3]
    d342:	2b00      	cmp	r3, #0
    d344:	d00b      	beq.n	d35e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    d346:	697b      	ldr	r3, [r7, #20]
    d348:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d34c:	2b00      	cmp	r3, #0
    d34e:	d011      	beq.n	d374 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    d350:	697b      	ldr	r3, [r7, #20]
    d352:	f003 031f 	and.w	r3, r3, #31
    d356:	617b      	str	r3, [r7, #20]
			modify = 1;
    d358:	2301      	movs	r3, #1
    d35a:	74fb      	strb	r3, [r7, #19]
    d35c:	e00a      	b.n	d374 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    d35e:	697b      	ldr	r3, [r7, #20]
    d360:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d364:	2b00      	cmp	r3, #0
    d366:	d105      	bne.n	d374 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d368:	697b      	ldr	r3, [r7, #20]
    d36a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d36e:	617b      	str	r3, [r7, #20]
			modify = 1;
    d370:	2301      	movs	r3, #1
    d372:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d374:	7cfb      	ldrb	r3, [r7, #19]
    d376:	2b00      	cmp	r3, #0
    d378:	d021      	beq.n	d3be <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d37a:	68fb      	ldr	r3, [r7, #12]
    d37c:	78fa      	ldrb	r2, [r7, #3]
    d37e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d380:	7afb      	ldrb	r3, [r7, #11]
    d382:	2201      	movs	r2, #1
    d384:	4619      	mov	r1, r3
    d386:	6878      	ldr	r0, [r7, #4]
    d388:	4b0f      	ldr	r3, [pc, #60]	; (d3c8 <n25q256a_switch_mode+0xc4>)
    d38a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d38c:	7af9      	ldrb	r1, [r7, #11]
    d38e:	697b      	ldr	r3, [r7, #20]
    d390:	2261      	movs	r2, #97	; 0x61
    d392:	6878      	ldr	r0, [r7, #4]
    d394:	4c0d      	ldr	r4, [pc, #52]	; (d3cc <n25q256a_switch_mode+0xc8>)
    d396:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d398:	78fb      	ldrb	r3, [r7, #3]
    d39a:	2b00      	cmp	r3, #0
    d39c:	d001      	beq.n	d3a2 <n25q256a_switch_mode+0x9e>
    d39e:	2306      	movs	r3, #6
    d3a0:	e000      	b.n	d3a4 <n25q256a_switch_mode+0xa0>
    d3a2:	2300      	movs	r3, #0
    d3a4:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d3a6:	7afb      	ldrb	r3, [r7, #11]
    d3a8:	2265      	movs	r2, #101	; 0x65
    d3aa:	4619      	mov	r1, r3
    d3ac:	6878      	ldr	r0, [r7, #4]
    d3ae:	4b05      	ldr	r3, [pc, #20]	; (d3c4 <n25q256a_switch_mode+0xc0>)
    d3b0:	4798      	blx	r3
    d3b2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d3b4:	68fb      	ldr	r3, [r7, #12]
    d3b6:	78fa      	ldrb	r2, [r7, #3]
    d3b8:	731a      	strb	r2, [r3, #12]
    d3ba:	e000      	b.n	d3be <n25q256a_switch_mode+0xba>
		return;
    d3bc:	bf00      	nop
	}
}
    d3be:	371c      	adds	r7, #28
    d3c0:	46bd      	mov	sp, r7
    d3c2:	bd90      	pop	{r4, r7, pc}
    d3c4:	0000d0f9 	.word	0x0000d0f9
    d3c8:	0000d235 	.word	0x0000d235
    d3cc:	0000d195 	.word	0x0000d195

0000d3d0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d3d0:	b580      	push	{r7, lr}
    d3d2:	b086      	sub	sp, #24
    d3d4:	af00      	add	r7, sp, #0
    d3d6:	60f8      	str	r0, [r7, #12]
    d3d8:	60b9      	str	r1, [r7, #8]
    d3da:	607a      	str	r2, [r7, #4]
    d3dc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d3de:	68fb      	ldr	r3, [r7, #12]
    d3e0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d3e2:	4a0c      	ldr	r2, [pc, #48]	; (d414 <n25q256a_construct+0x44>)
    d3e4:	68b9      	ldr	r1, [r7, #8]
    d3e6:	68f8      	ldr	r0, [r7, #12]
    d3e8:	4b0b      	ldr	r3, [pc, #44]	; (d418 <n25q256a_construct+0x48>)
    d3ea:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d3ec:	697b      	ldr	r3, [r7, #20]
    d3ee:	2200      	movs	r2, #0
    d3f0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d3f2:	697b      	ldr	r3, [r7, #20]
    d3f4:	2200      	movs	r2, #0
    d3f6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d3f8:	697b      	ldr	r3, [r7, #20]
    d3fa:	687a      	ldr	r2, [r7, #4]
    d3fc:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d3fe:	78fb      	ldrb	r3, [r7, #3]
    d400:	4619      	mov	r1, r3
    d402:	68f8      	ldr	r0, [r7, #12]
    d404:	4b05      	ldr	r3, [pc, #20]	; (d41c <n25q256a_construct+0x4c>)
    d406:	4798      	blx	r3
	return me;
    d408:	68fb      	ldr	r3, [r7, #12]
}
    d40a:	4618      	mov	r0, r3
    d40c:	3718      	adds	r7, #24
    d40e:	46bd      	mov	sp, r7
    d410:	bd80      	pop	{r7, pc}
    d412:	bf00      	nop
    d414:	0001aea8 	.word	0x0001aea8
    d418:	0000d8ad 	.word	0x0000d8ad
    d41c:	0000d305 	.word	0x0000d305

0000d420 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d420:	b580      	push	{r7, lr}
    d422:	b08c      	sub	sp, #48	; 0x30
    d424:	af00      	add	r7, sp, #0
    d426:	60f8      	str	r0, [r7, #12]
    d428:	60b9      	str	r1, [r7, #8]
    d42a:	607a      	str	r2, [r7, #4]
    d42c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d42e:	68fb      	ldr	r3, [r7, #12]
    d430:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d432:	68fb      	ldr	r3, [r7, #12]
    d434:	681b      	ldr	r3, [r3, #0]
    d436:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d438:	f107 0310 	add.w	r3, r7, #16
    d43c:	2200      	movs	r2, #0
    d43e:	601a      	str	r2, [r3, #0]
    d440:	605a      	str	r2, [r3, #4]
    d442:	609a      	str	r2, [r3, #8]
    d444:	60da      	str	r2, [r3, #12]
    d446:	611a      	str	r2, [r3, #16]
    d448:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d44c:	7b1b      	ldrb	r3, [r3, #12]
    d44e:	2b00      	cmp	r3, #0
    d450:	d001      	beq.n	d456 <n25q256a_read+0x36>
    d452:	2206      	movs	r2, #6
    d454:	e000      	b.n	d458 <n25q256a_read+0x38>
    d456:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d458:	7c3b      	ldrb	r3, [r7, #16]
    d45a:	f362 0302 	bfi	r3, r2, #0, #3
    d45e:	743b      	strb	r3, [r7, #16]
    d460:	7c3b      	ldrb	r3, [r7, #16]
    d462:	f043 0310 	orr.w	r3, r3, #16
    d466:	743b      	strb	r3, [r7, #16]
    d468:	7c3b      	ldrb	r3, [r7, #16]
    d46a:	f043 0320 	orr.w	r3, r3, #32
    d46e:	743b      	strb	r3, [r7, #16]
    d470:	7c3b      	ldrb	r3, [r7, #16]
    d472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d476:	743b      	strb	r3, [r7, #16]
    d478:	7c7b      	ldrb	r3, [r7, #17]
    d47a:	2201      	movs	r2, #1
    d47c:	f362 1305 	bfi	r3, r2, #4, #2
    d480:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d484:	7b1b      	ldrb	r3, [r3, #12]
    d486:	2b00      	cmp	r3, #0
    d488:	d001      	beq.n	d48e <n25q256a_read+0x6e>
    d48a:	220a      	movs	r2, #10
    d48c:	e000      	b.n	d490 <n25q256a_read+0x70>
    d48e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d490:	7cbb      	ldrb	r3, [r7, #18]
    d492:	f362 0304 	bfi	r3, r2, #0, #5
    d496:	74bb      	strb	r3, [r7, #18]
    d498:	230b      	movs	r3, #11
    d49a:	753b      	strb	r3, [r7, #20]
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	61bb      	str	r3, [r7, #24]
    d4a0:	683b      	ldr	r3, [r7, #0]
    d4a2:	61fb      	str	r3, [r7, #28]
    d4a4:	68bb      	ldr	r3, [r7, #8]
    d4a6:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d4a8:	f107 0310 	add.w	r3, r7, #16
    d4ac:	4619      	mov	r1, r3
    d4ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d4b0:	4b03      	ldr	r3, [pc, #12]	; (d4c0 <n25q256a_read+0xa0>)
    d4b2:	4798      	blx	r3
	return ERR_NONE;
    d4b4:	2300      	movs	r3, #0
}
    d4b6:	4618      	mov	r0, r3
    d4b8:	3730      	adds	r7, #48	; 0x30
    d4ba:	46bd      	mov	sp, r7
    d4bc:	bd80      	pop	{r7, pc}
    d4be:	bf00      	nop
    d4c0:	00003add 	.word	0x00003add

0000d4c4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d4c4:	b580      	push	{r7, lr}
    d4c6:	b08c      	sub	sp, #48	; 0x30
    d4c8:	af00      	add	r7, sp, #0
    d4ca:	60f8      	str	r0, [r7, #12]
    d4cc:	60b9      	str	r1, [r7, #8]
    d4ce:	607a      	str	r2, [r7, #4]
    d4d0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d4d2:	68fb      	ldr	r3, [r7, #12]
    d4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	681b      	ldr	r3, [r3, #0]
    d4da:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d4dc:	f107 0310 	add.w	r3, r7, #16
    d4e0:	2200      	movs	r2, #0
    d4e2:	601a      	str	r2, [r3, #0]
    d4e4:	605a      	str	r2, [r3, #4]
    d4e6:	609a      	str	r2, [r3, #8]
    d4e8:	60da      	str	r2, [r3, #12]
    d4ea:	611a      	str	r2, [r3, #16]
    d4ec:	615a      	str	r2, [r3, #20]
    d4ee:	7c3b      	ldrb	r3, [r7, #16]
    d4f0:	f043 0310 	orr.w	r3, r3, #16
    d4f4:	743b      	strb	r3, [r7, #16]
    d4f6:	7c3b      	ldrb	r3, [r7, #16]
    d4f8:	f043 0320 	orr.w	r3, r3, #32
    d4fc:	743b      	strb	r3, [r7, #16]
    d4fe:	7c3b      	ldrb	r3, [r7, #16]
    d500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d504:	743b      	strb	r3, [r7, #16]
    d506:	7c7b      	ldrb	r3, [r7, #17]
    d508:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d50c:	747b      	strb	r3, [r7, #17]
    d50e:	2302      	movs	r3, #2
    d510:	753b      	strb	r3, [r7, #20]
    d512:	687b      	ldr	r3, [r7, #4]
    d514:	61bb      	str	r3, [r7, #24]
    d516:	683b      	ldr	r3, [r7, #0]
    d518:	61fb      	str	r3, [r7, #28]
    d51a:	68bb      	ldr	r3, [r7, #8]
    d51c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d520:	7b1b      	ldrb	r3, [r3, #12]
    d522:	2b00      	cmp	r3, #0
    d524:	d001      	beq.n	d52a <n25q256a_write+0x66>
    d526:	2206      	movs	r2, #6
    d528:	e000      	b.n	d52c <n25q256a_write+0x68>
    d52a:	2200      	movs	r2, #0
    d52c:	7c3b      	ldrb	r3, [r7, #16]
    d52e:	f362 0302 	bfi	r3, r2, #0, #3
    d532:	743b      	strb	r3, [r7, #16]
	while (length) {
    d534:	e035      	b.n	d5a2 <n25q256a_write+0xde>
		cmd.address = address;
    d536:	687b      	ldr	r3, [r7, #4]
    d538:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    d53a:	683b      	ldr	r3, [r7, #0]
    d53c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d540:	d802      	bhi.n	d548 <n25q256a_write+0x84>
			cmd.buf_len = length;
    d542:	683b      	ldr	r3, [r7, #0]
    d544:	61fb      	str	r3, [r7, #28]
    d546:	e002      	b.n	d54e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    d548:	f44f 7380 	mov.w	r3, #256	; 0x100
    d54c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d54e:	7c3b      	ldrb	r3, [r7, #16]
    d550:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d554:	b2db      	uxtb	r3, r3
    d556:	2201      	movs	r2, #1
    d558:	4619      	mov	r1, r3
    d55a:	68f8      	ldr	r0, [r7, #12]
    d55c:	4b19      	ldr	r3, [pc, #100]	; (d5c4 <n25q256a_write+0x100>)
    d55e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    d560:	f107 0310 	add.w	r3, r7, #16
    d564:	4619      	mov	r1, r3
    d566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d568:	4b17      	ldr	r3, [pc, #92]	; (d5c8 <n25q256a_write+0x104>)
    d56a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d56c:	bf00      	nop
    d56e:	7c3b      	ldrb	r3, [r7, #16]
    d570:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d574:	b2db      	uxtb	r3, r3
    d576:	2270      	movs	r2, #112	; 0x70
    d578:	4619      	mov	r1, r3
    d57a:	68f8      	ldr	r0, [r7, #12]
    d57c:	4b13      	ldr	r3, [pc, #76]	; (d5cc <n25q256a_write+0x108>)
    d57e:	4798      	blx	r3
    d580:	4603      	mov	r3, r0
    d582:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d586:	2b00      	cmp	r3, #0
    d588:	d0f1      	beq.n	d56e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    d58a:	6a3a      	ldr	r2, [r7, #32]
    d58c:	69fb      	ldr	r3, [r7, #28]
    d58e:	4413      	add	r3, r2
    d590:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    d592:	69fb      	ldr	r3, [r7, #28]
    d594:	683a      	ldr	r2, [r7, #0]
    d596:	1ad3      	subs	r3, r2, r3
    d598:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    d59a:	69fb      	ldr	r3, [r7, #28]
    d59c:	687a      	ldr	r2, [r7, #4]
    d59e:	4413      	add	r3, r2
    d5a0:	607b      	str	r3, [r7, #4]
	while (length) {
    d5a2:	683b      	ldr	r3, [r7, #0]
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	d1c6      	bne.n	d536 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5aa:	7b5b      	ldrb	r3, [r3, #13]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d003      	beq.n	d5b8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    d5b0:	2101      	movs	r1, #1
    d5b2:	68f8      	ldr	r0, [r7, #12]
    d5b4:	4b06      	ldr	r3, [pc, #24]	; (d5d0 <n25q256a_write+0x10c>)
    d5b6:	4798      	blx	r3
	}
	return ERR_NONE;
    d5b8:	2300      	movs	r3, #0
}
    d5ba:	4618      	mov	r0, r3
    d5bc:	3730      	adds	r7, #48	; 0x30
    d5be:	46bd      	mov	sp, r7
    d5c0:	bd80      	pop	{r7, pc}
    d5c2:	bf00      	nop
    d5c4:	0000d235 	.word	0x0000d235
    d5c8:	00003add 	.word	0x00003add
    d5cc:	0000d0f9 	.word	0x0000d0f9
    d5d0:	0000d02d 	.word	0x0000d02d

0000d5d4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    d5d4:	b580      	push	{r7, lr}
    d5d6:	b090      	sub	sp, #64	; 0x40
    d5d8:	af00      	add	r7, sp, #0
    d5da:	60f8      	str	r0, [r7, #12]
    d5dc:	60b9      	str	r1, [r7, #8]
    d5de:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d5e0:	68fb      	ldr	r3, [r7, #12]
    d5e2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d5e4:	68fb      	ldr	r3, [r7, #12]
    d5e6:	681b      	ldr	r3, [r3, #0]
    d5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    d5ea:	f107 0314 	add.w	r3, r7, #20
    d5ee:	2200      	movs	r2, #0
    d5f0:	601a      	str	r2, [r3, #0]
    d5f2:	605a      	str	r2, [r3, #4]
    d5f4:	609a      	str	r2, [r3, #8]
    d5f6:	60da      	str	r2, [r3, #12]
    d5f8:	611a      	str	r2, [r3, #16]
    d5fa:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d5fe:	7b1b      	ldrb	r3, [r3, #12]
    d600:	2b00      	cmp	r3, #0
    d602:	d001      	beq.n	d608 <n25q256a_erase+0x34>
    d604:	2206      	movs	r2, #6
    d606:	e000      	b.n	d60a <n25q256a_erase+0x36>
    d608:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    d60a:	7d3b      	ldrb	r3, [r7, #20]
    d60c:	f362 0302 	bfi	r3, r2, #0, #3
    d610:	753b      	strb	r3, [r7, #20]
    d612:	7d3b      	ldrb	r3, [r7, #20]
    d614:	f043 0310 	orr.w	r3, r3, #16
    d618:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    d61a:	687b      	ldr	r3, [r7, #4]
    d61c:	4a56      	ldr	r2, [pc, #344]	; (d778 <n25q256a_erase+0x1a4>)
    d61e:	4293      	cmp	r3, r2
    d620:	bf94      	ite	ls
    d622:	2301      	movls	r3, #1
    d624:	2300      	movhi	r3, #0
    d626:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    d628:	7d3b      	ldrb	r3, [r7, #20]
    d62a:	f362 1345 	bfi	r3, r2, #5, #1
    d62e:	753b      	strb	r3, [r7, #20]
    d630:	7d7b      	ldrb	r3, [r7, #21]
    d632:	2202      	movs	r2, #2
    d634:	f362 1305 	bfi	r3, r2, #4, #2
    d638:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    d63a:	68bb      	ldr	r3, [r7, #8]
    d63c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    d642:	2300      	movs	r3, #0
    d644:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    d646:	687b      	ldr	r3, [r7, #4]
    d648:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d64c:	2b00      	cmp	r3, #0
    d64e:	d104      	bne.n	d65a <n25q256a_erase+0x86>
    d650:	68bb      	ldr	r3, [r7, #8]
    d652:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d656:	2b00      	cmp	r3, #0
    d658:	d002      	beq.n	d660 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    d65a:	f06f 030c 	mvn.w	r3, #12
    d65e:	e087      	b.n	d770 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    d660:	687b      	ldr	r3, [r7, #4]
    d662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    d666:	d368      	bcc.n	d73a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    d668:	23c7      	movs	r3, #199	; 0xc7
    d66a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d66c:	7d3b      	ldrb	r3, [r7, #20]
    d66e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d672:	b2db      	uxtb	r3, r3
    d674:	2201      	movs	r2, #1
    d676:	4619      	mov	r1, r3
    d678:	68f8      	ldr	r0, [r7, #12]
    d67a:	4b40      	ldr	r3, [pc, #256]	; (d77c <n25q256a_erase+0x1a8>)
    d67c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    d67e:	f107 0314 	add.w	r3, r7, #20
    d682:	4619      	mov	r1, r3
    d684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d686:	4b3e      	ldr	r3, [pc, #248]	; (d780 <n25q256a_erase+0x1ac>)
    d688:	4798      	blx	r3
    d68a:	e059      	b.n	d740 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    d68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d68e:	b29b      	uxth	r3, r3
    d690:	2b00      	cmp	r3, #0
    d692:	d11f      	bne.n	d6d4 <n25q256a_erase+0x100>
    d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d69a:	d31b      	bcc.n	d6d4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    d69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d69e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    d6a0:	23d8      	movs	r3, #216	; 0xd8
    d6a2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d6a4:	7d3b      	ldrb	r3, [r7, #20]
    d6a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6aa:	b2db      	uxtb	r3, r3
    d6ac:	2201      	movs	r2, #1
    d6ae:	4619      	mov	r1, r3
    d6b0:	68f8      	ldr	r0, [r7, #12]
    d6b2:	4b32      	ldr	r3, [pc, #200]	; (d77c <n25q256a_erase+0x1a8>)
    d6b4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d6b6:	f107 0314 	add.w	r3, r7, #20
    d6ba:	4619      	mov	r1, r3
    d6bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d6be:	4b30      	ldr	r3, [pc, #192]	; (d780 <n25q256a_erase+0x1ac>)
    d6c0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d6c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6cc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d6d0:	63bb      	str	r3, [r7, #56]	; 0x38
    d6d2:	e023      	b.n	d71c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d6da:	d31b      	bcc.n	d714 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d6de:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d6e0:	2320      	movs	r3, #32
    d6e2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d6e4:	7d3b      	ldrb	r3, [r7, #20]
    d6e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6ea:	b2db      	uxtb	r3, r3
    d6ec:	2201      	movs	r2, #1
    d6ee:	4619      	mov	r1, r3
    d6f0:	68f8      	ldr	r0, [r7, #12]
    d6f2:	4b22      	ldr	r3, [pc, #136]	; (d77c <n25q256a_erase+0x1a8>)
    d6f4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d6f6:	f107 0314 	add.w	r3, r7, #20
    d6fa:	4619      	mov	r1, r3
    d6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d6fe:	4b20      	ldr	r3, [pc, #128]	; (d780 <n25q256a_erase+0x1ac>)
    d700:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d708:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d70c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d710:	63bb      	str	r3, [r7, #56]	; 0x38
    d712:	e003      	b.n	d71c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d714:	f06f 030c 	mvn.w	r3, #12
    d718:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d71a:	e011      	b.n	d740 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d71c:	bf00      	nop
    d71e:	7d3b      	ldrb	r3, [r7, #20]
    d720:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d724:	b2db      	uxtb	r3, r3
    d726:	2270      	movs	r2, #112	; 0x70
    d728:	4619      	mov	r1, r3
    d72a:	68f8      	ldr	r0, [r7, #12]
    d72c:	4b15      	ldr	r3, [pc, #84]	; (d784 <n25q256a_erase+0x1b0>)
    d72e:	4798      	blx	r3
    d730:	4603      	mov	r3, r0
    d732:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d736:	2b00      	cmp	r3, #0
    d738:	d0f1      	beq.n	d71e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d73c:	2b00      	cmp	r3, #0
    d73e:	d1a5      	bne.n	d68c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d740:	bf00      	nop
    d742:	7d3b      	ldrb	r3, [r7, #20]
    d744:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d748:	b2db      	uxtb	r3, r3
    d74a:	2270      	movs	r2, #112	; 0x70
    d74c:	4619      	mov	r1, r3
    d74e:	68f8      	ldr	r0, [r7, #12]
    d750:	4b0c      	ldr	r3, [pc, #48]	; (d784 <n25q256a_erase+0x1b0>)
    d752:	4798      	blx	r3
    d754:	4603      	mov	r3, r0
    d756:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d75a:	2b00      	cmp	r3, #0
    d75c:	d0f1      	beq.n	d742 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d760:	7b5b      	ldrb	r3, [r3, #13]
    d762:	2b00      	cmp	r3, #0
    d764:	d003      	beq.n	d76e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d766:	2101      	movs	r1, #1
    d768:	68f8      	ldr	r0, [r7, #12]
    d76a:	4b07      	ldr	r3, [pc, #28]	; (d788 <n25q256a_erase+0x1b4>)
    d76c:	4798      	blx	r3
	}
	return rc;
    d76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d770:	4618      	mov	r0, r3
    d772:	3740      	adds	r7, #64	; 0x40
    d774:	46bd      	mov	sp, r7
    d776:	bd80      	pop	{r7, pc}
    d778:	001fffff 	.word	0x001fffff
    d77c:	0000d235 	.word	0x0000d235
    d780:	00003add 	.word	0x00003add
    d784:	0000d0f9 	.word	0x0000d0f9
    d788:	0000d02d 	.word	0x0000d02d

0000d78c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d78c:	b590      	push	{r4, r7, lr}
    d78e:	b085      	sub	sp, #20
    d790:	af00      	add	r7, sp, #0
    d792:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d794:	687b      	ldr	r3, [r7, #4]
    d796:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d798:	68fb      	ldr	r3, [r7, #12]
    d79a:	7b1b      	ldrb	r3, [r3, #12]
    d79c:	2b00      	cmp	r3, #0
    d79e:	d001      	beq.n	d7a4 <n25q256a_enable_xip+0x18>
    d7a0:	2306      	movs	r3, #6
    d7a2:	e000      	b.n	d7a6 <n25q256a_enable_xip+0x1a>
    d7a4:	2300      	movs	r3, #0
    d7a6:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d7a8:	68fb      	ldr	r3, [r7, #12]
    d7aa:	7b5b      	ldrb	r3, [r3, #13]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d129      	bne.n	d804 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d7b0:	7afb      	ldrb	r3, [r7, #11]
    d7b2:	2285      	movs	r2, #133	; 0x85
    d7b4:	4619      	mov	r1, r3
    d7b6:	6878      	ldr	r0, [r7, #4]
    d7b8:	4b15      	ldr	r3, [pc, #84]	; (d810 <n25q256a_enable_xip+0x84>)
    d7ba:	4798      	blx	r3
    d7bc:	4603      	mov	r3, r0
    d7be:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d7c0:	7abb      	ldrb	r3, [r7, #10]
    d7c2:	f003 0308 	and.w	r3, r3, #8
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d015      	beq.n	d7f6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d7ca:	7abb      	ldrb	r3, [r7, #10]
    d7cc:	f023 0308 	bic.w	r3, r3, #8
    d7d0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d7d2:	7abb      	ldrb	r3, [r7, #10]
    d7d4:	7af9      	ldrb	r1, [r7, #11]
    d7d6:	2281      	movs	r2, #129	; 0x81
    d7d8:	6878      	ldr	r0, [r7, #4]
    d7da:	4c0e      	ldr	r4, [pc, #56]	; (d814 <n25q256a_enable_xip+0x88>)
    d7dc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d7de:	bf00      	nop
    d7e0:	7afb      	ldrb	r3, [r7, #11]
    d7e2:	2270      	movs	r2, #112	; 0x70
    d7e4:	4619      	mov	r1, r3
    d7e6:	6878      	ldr	r0, [r7, #4]
    d7e8:	4b09      	ldr	r3, [pc, #36]	; (d810 <n25q256a_enable_xip+0x84>)
    d7ea:	4798      	blx	r3
    d7ec:	4603      	mov	r3, r0
    d7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d7f2:	2b00      	cmp	r3, #0
    d7f4:	d0f4      	beq.n	d7e0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d7f6:	68fb      	ldr	r3, [r7, #12]
    d7f8:	2201      	movs	r2, #1
    d7fa:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d7fc:	2101      	movs	r1, #1
    d7fe:	6878      	ldr	r0, [r7, #4]
    d800:	4b05      	ldr	r3, [pc, #20]	; (d818 <n25q256a_enable_xip+0x8c>)
    d802:	4798      	blx	r3
	}
	return ERR_NONE;
    d804:	2300      	movs	r3, #0
}
    d806:	4618      	mov	r0, r3
    d808:	3714      	adds	r7, #20
    d80a:	46bd      	mov	sp, r7
    d80c:	bd90      	pop	{r4, r7, pc}
    d80e:	bf00      	nop
    d810:	0000d0f9 	.word	0x0000d0f9
    d814:	0000d195 	.word	0x0000d195
    d818:	0000d02d 	.word	0x0000d02d

0000d81c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d81c:	b580      	push	{r7, lr}
    d81e:	b086      	sub	sp, #24
    d820:	af00      	add	r7, sp, #0
    d822:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d824:	687b      	ldr	r3, [r7, #4]
    d826:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d828:	687b      	ldr	r3, [r7, #4]
    d82a:	681b      	ldr	r3, [r3, #0]
    d82c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d82e:	697b      	ldr	r3, [r7, #20]
    d830:	7b1b      	ldrb	r3, [r3, #12]
    d832:	2b00      	cmp	r3, #0
    d834:	d001      	beq.n	d83a <n25q256a_disable_xip+0x1e>
    d836:	2306      	movs	r3, #6
    d838:	e000      	b.n	d83c <n25q256a_disable_xip+0x20>
    d83a:	2300      	movs	r3, #0
    d83c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d83e:	2100      	movs	r1, #0
    d840:	6878      	ldr	r0, [r7, #4]
    d842:	4b15      	ldr	r3, [pc, #84]	; (d898 <n25q256a_disable_xip+0x7c>)
    d844:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d846:	7bfb      	ldrb	r3, [r7, #15]
    d848:	2285      	movs	r2, #133	; 0x85
    d84a:	4619      	mov	r1, r3
    d84c:	6878      	ldr	r0, [r7, #4]
    d84e:	4b13      	ldr	r3, [pc, #76]	; (d89c <n25q256a_disable_xip+0x80>)
    d850:	4798      	blx	r3
    d852:	4603      	mov	r3, r0
    d854:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d856:	7bbb      	ldrb	r3, [r7, #14]
    d858:	f003 0308 	and.w	r3, r3, #8
    d85c:	2b00      	cmp	r3, #0
    d85e:	d113      	bne.n	d888 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d860:	697b      	ldr	r3, [r7, #20]
    d862:	689b      	ldr	r3, [r3, #8]
    d864:	2b00      	cmp	r3, #0
    d866:	d00f      	beq.n	d888 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d868:	693b      	ldr	r3, [r7, #16]
    d86a:	681b      	ldr	r3, [r3, #0]
    d86c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d86e:	6938      	ldr	r0, [r7, #16]
    d870:	4b0b      	ldr	r3, [pc, #44]	; (d8a0 <n25q256a_disable_xip+0x84>)
    d872:	4798      	blx	r3
			n25q->pin_exit_xip();
    d874:	697b      	ldr	r3, [r7, #20]
    d876:	689b      	ldr	r3, [r3, #8]
    d878:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d87a:	68b9      	ldr	r1, [r7, #8]
    d87c:	6938      	ldr	r0, [r7, #16]
    d87e:	4b09      	ldr	r3, [pc, #36]	; (d8a4 <n25q256a_disable_xip+0x88>)
    d880:	4798      	blx	r3
			qspi_sync_enable(descr);
    d882:	6938      	ldr	r0, [r7, #16]
    d884:	4b08      	ldr	r3, [pc, #32]	; (d8a8 <n25q256a_disable_xip+0x8c>)
    d886:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d888:	697b      	ldr	r3, [r7, #20]
    d88a:	2200      	movs	r2, #0
    d88c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d88e:	2300      	movs	r3, #0
}
    d890:	4618      	mov	r0, r3
    d892:	3718      	adds	r7, #24
    d894:	46bd      	mov	sp, r7
    d896:	bd80      	pop	{r7, pc}
    d898:	0000d02d 	.word	0x0000d02d
    d89c:	0000d0f9 	.word	0x0000d0f9
    d8a0:	00003aa1 	.word	0x00003aa1
    d8a4:	00003a19 	.word	0x00003a19
    d8a8:	00003a65 	.word	0x00003a65

0000d8ac <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d8ac:	b480      	push	{r7}
    d8ae:	b085      	sub	sp, #20
    d8b0:	af00      	add	r7, sp, #0
    d8b2:	60f8      	str	r0, [r7, #12]
    d8b4:	60b9      	str	r1, [r7, #8]
    d8b6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d8b8:	68fb      	ldr	r3, [r7, #12]
    d8ba:	68ba      	ldr	r2, [r7, #8]
    d8bc:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    d8be:	68fb      	ldr	r3, [r7, #12]
    d8c0:	687a      	ldr	r2, [r7, #4]
    d8c2:	605a      	str	r2, [r3, #4]

	return me;
    d8c4:	68fb      	ldr	r3, [r7, #12]
}
    d8c6:	4618      	mov	r0, r3
    d8c8:	3714      	adds	r7, #20
    d8ca:	46bd      	mov	sp, r7
    d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8d0:	4770      	bx	lr

0000d8d2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    d8d2:	b480      	push	{r7}
    d8d4:	b083      	sub	sp, #12
    d8d6:	af00      	add	r7, sp, #0
    d8d8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d8da:	687b      	ldr	r3, [r7, #4]
    d8dc:	781b      	ldrb	r3, [r3, #0]
    d8de:	b29a      	uxth	r2, r3
    d8e0:	687b      	ldr	r3, [r7, #4]
    d8e2:	3301      	adds	r3, #1
    d8e4:	781b      	ldrb	r3, [r3, #0]
    d8e6:	b29b      	uxth	r3, r3
    d8e8:	021b      	lsls	r3, r3, #8
    d8ea:	b29b      	uxth	r3, r3
    d8ec:	4413      	add	r3, r2
    d8ee:	b29b      	uxth	r3, r3
}
    d8f0:	4618      	mov	r0, r3
    d8f2:	370c      	adds	r7, #12
    d8f4:	46bd      	mov	sp, r7
    d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8fa:	4770      	bx	lr

0000d8fc <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    d8fc:	b480      	push	{r7}
    d8fe:	b083      	sub	sp, #12
    d900:	af00      	add	r7, sp, #0
    d902:	6078      	str	r0, [r7, #4]
	return desc[0];
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	781b      	ldrb	r3, [r3, #0]
}
    d908:	4618      	mov	r0, r3
    d90a:	370c      	adds	r7, #12
    d90c:	46bd      	mov	sp, r7
    d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d912:	4770      	bx	lr

0000d914 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    d914:	b580      	push	{r7, lr}
    d916:	b082      	sub	sp, #8
    d918:	af00      	add	r7, sp, #0
    d91a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d91c:	6878      	ldr	r0, [r7, #4]
    d91e:	4b05      	ldr	r3, [pc, #20]	; (d934 <usb_desc_next+0x20>)
    d920:	4798      	blx	r3
    d922:	4603      	mov	r3, r0
    d924:	461a      	mov	r2, r3
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	4413      	add	r3, r2
}
    d92a:	4618      	mov	r0, r3
    d92c:	3708      	adds	r7, #8
    d92e:	46bd      	mov	sp, r7
    d930:	bd80      	pop	{r7, pc}
    d932:	bf00      	nop
    d934:	0000d8fd 	.word	0x0000d8fd

0000d938 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d938:	b580      	push	{r7, lr}
    d93a:	b08c      	sub	sp, #48	; 0x30
    d93c:	af00      	add	r7, sp, #0
    d93e:	6078      	str	r0, [r7, #4]
    d940:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	689b      	ldr	r3, [r3, #8]
    d946:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    d948:	683b      	ldr	r3, [r7, #0]
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d94e:	2300      	movs	r3, #0
    d950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d954:	e08f      	b.n	da76 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    d956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d958:	2b00      	cmp	r3, #0
    d95a:	d102      	bne.n	d962 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    d95c:	f06f 0309 	mvn.w	r3, #9
    d960:	e092      	b.n	da88 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    d962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d964:	789b      	ldrb	r3, [r3, #2]
    d966:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d96a:	795b      	ldrb	r3, [r3, #5]
    d96c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d96e:	7c7b      	ldrb	r3, [r7, #17]
    d970:	2b02      	cmp	r3, #2
    d972:	d002      	beq.n	d97a <cdcdf_acm_enable+0x42>
    d974:	7c7b      	ldrb	r3, [r7, #17]
    d976:	2b0a      	cmp	r3, #10
    d978:	d121      	bne.n	d9be <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d97e:	6a3a      	ldr	r2, [r7, #32]
    d980:	5cd2      	ldrb	r2, [r2, r3]
    d982:	7bbb      	ldrb	r3, [r7, #14]
    d984:	429a      	cmp	r2, r3
    d986:	d102      	bne.n	d98e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    d988:	f06f 0311 	mvn.w	r3, #17
    d98c:	e07c      	b.n	da88 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d98e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d992:	6a3a      	ldr	r2, [r7, #32]
    d994:	5cd3      	ldrb	r3, [r2, r3]
    d996:	2bff      	cmp	r3, #255	; 0xff
    d998:	d002      	beq.n	d9a0 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    d99a:	f06f 031b 	mvn.w	r3, #27
    d99e:	e073      	b.n	da88 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d9a4:	7bb9      	ldrb	r1, [r7, #14]
    d9a6:	6a3a      	ldr	r2, [r7, #32]
    d9a8:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d9aa:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d9ac:	683b      	ldr	r3, [r7, #0]
    d9ae:	685b      	ldr	r3, [r3, #4]
    d9b0:	2205      	movs	r2, #5
    d9b2:	4619      	mov	r1, r3
    d9b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d9b6:	4b36      	ldr	r3, [pc, #216]	; (da90 <cdcdf_acm_enable+0x158>)
    d9b8:	4798      	blx	r3
    d9ba:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d9bc:	e047      	b.n	da4e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    d9be:	f06f 0309 	mvn.w	r3, #9
    d9c2:	e061      	b.n	da88 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d9c6:	789b      	ldrb	r3, [r3, #2]
    d9c8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d9cc:	78db      	ldrb	r3, [r3, #3]
    d9ce:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    d9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d9d2:	3304      	adds	r3, #4
    d9d4:	4618      	mov	r0, r3
    d9d6:	4b2f      	ldr	r3, [pc, #188]	; (da94 <cdcdf_acm_enable+0x15c>)
    d9d8:	4798      	blx	r3
    d9da:	4603      	mov	r3, r0
    d9dc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d9de:	7ebb      	ldrb	r3, [r7, #26]
    d9e0:	7ef9      	ldrb	r1, [r7, #27]
    d9e2:	8bba      	ldrh	r2, [r7, #28]
    d9e4:	4618      	mov	r0, r3
    d9e6:	4b2c      	ldr	r3, [pc, #176]	; (da98 <cdcdf_acm_enable+0x160>)
    d9e8:	4798      	blx	r3
    d9ea:	4603      	mov	r3, r0
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	d002      	beq.n	d9f6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    d9f0:	f06f 0313 	mvn.w	r3, #19
    d9f4:	e048      	b.n	da88 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d9f6:	7ebb      	ldrb	r3, [r7, #26]
    d9f8:	b25b      	sxtb	r3, r3
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	da0f      	bge.n	da1e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d9fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da02:	7eb9      	ldrb	r1, [r7, #26]
    da04:	6a3a      	ldr	r2, [r7, #32]
    da06:	4413      	add	r3, r2
    da08:	460a      	mov	r2, r1
    da0a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    da0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da10:	6a3a      	ldr	r2, [r7, #32]
    da12:	4413      	add	r3, r2
    da14:	789b      	ldrb	r3, [r3, #2]
    da16:	4618      	mov	r0, r3
    da18:	4b20      	ldr	r3, [pc, #128]	; (da9c <cdcdf_acm_enable+0x164>)
    da1a:	4798      	blx	r3
    da1c:	e007      	b.n	da2e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    da1e:	7eba      	ldrb	r2, [r7, #26]
    da20:	6a3b      	ldr	r3, [r7, #32]
    da22:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    da24:	6a3b      	ldr	r3, [r7, #32]
    da26:	791b      	ldrb	r3, [r3, #4]
    da28:	4618      	mov	r0, r3
    da2a:	4b1c      	ldr	r3, [pc, #112]	; (da9c <cdcdf_acm_enable+0x164>)
    da2c:	4798      	blx	r3
			}
			desc->sod = ep;
    da2e:	683b      	ldr	r3, [r7, #0]
    da30:	6aba      	ldr	r2, [r7, #40]	; 0x28
    da32:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    da34:	683b      	ldr	r3, [r7, #0]
    da36:	681b      	ldr	r3, [r3, #0]
    da38:	4618      	mov	r0, r3
    da3a:	4b19      	ldr	r3, [pc, #100]	; (daa0 <cdcdf_acm_enable+0x168>)
    da3c:	4798      	blx	r3
    da3e:	4602      	mov	r2, r0
    da40:	683b      	ldr	r3, [r7, #0]
    da42:	685b      	ldr	r3, [r3, #4]
    da44:	4619      	mov	r1, r3
    da46:	4610      	mov	r0, r2
    da48:	4b16      	ldr	r3, [pc, #88]	; (daa4 <cdcdf_acm_enable+0x16c>)
    da4a:	4798      	blx	r3
    da4c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    da4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da50:	2b00      	cmp	r3, #0
    da52:	d1b7      	bne.n	d9c4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    da54:	683b      	ldr	r3, [r7, #0]
    da56:	681b      	ldr	r3, [r3, #0]
    da58:	4618      	mov	r0, r3
    da5a:	4b11      	ldr	r3, [pc, #68]	; (daa0 <cdcdf_acm_enable+0x168>)
    da5c:	4798      	blx	r3
    da5e:	683b      	ldr	r3, [r7, #0]
    da60:	685b      	ldr	r3, [r3, #4]
    da62:	2204      	movs	r2, #4
    da64:	4619      	mov	r1, r3
    da66:	4b0a      	ldr	r3, [pc, #40]	; (da90 <cdcdf_acm_enable+0x158>)
    da68:	4798      	blx	r3
    da6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da70:	3301      	adds	r3, #1
    da72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    da76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da7a:	2b01      	cmp	r3, #1
    da7c:	f67f af6b 	bls.w	d956 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    da80:	4b09      	ldr	r3, [pc, #36]	; (daa8 <cdcdf_acm_enable+0x170>)
    da82:	2201      	movs	r2, #1
    da84:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    da86:	2300      	movs	r3, #0
}
    da88:	4618      	mov	r0, r3
    da8a:	3730      	adds	r7, #48	; 0x30
    da8c:	46bd      	mov	sp, r7
    da8e:	bd80      	pop	{r7, pc}
    da90:	0000ecf9 	.word	0x0000ecf9
    da94:	0000d8d3 	.word	0x0000d8d3
    da98:	00004751 	.word	0x00004751
    da9c:	0000483d 	.word	0x0000483d
    daa0:	0000d915 	.word	0x0000d915
    daa4:	0000ed55 	.word	0x0000ed55
    daa8:	2000277c 	.word	0x2000277c

0000daac <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    daac:	b580      	push	{r7, lr}
    daae:	b088      	sub	sp, #32
    dab0:	af00      	add	r7, sp, #0
    dab2:	6078      	str	r0, [r7, #4]
    dab4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    dab6:	687b      	ldr	r3, [r7, #4]
    dab8:	689b      	ldr	r3, [r3, #8]
    daba:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    dabc:	683b      	ldr	r3, [r7, #0]
    dabe:	2b00      	cmp	r3, #0
    dac0:	d00c      	beq.n	dadc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    dac2:	683b      	ldr	r3, [r7, #0]
    dac4:	681b      	ldr	r3, [r3, #0]
    dac6:	795b      	ldrb	r3, [r3, #5]
    dac8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    daca:	7c7b      	ldrb	r3, [r7, #17]
    dacc:	2b02      	cmp	r3, #2
    dace:	d005      	beq.n	dadc <cdcdf_acm_disable+0x30>
    dad0:	7c7b      	ldrb	r3, [r7, #17]
    dad2:	2b0a      	cmp	r3, #10
    dad4:	d002      	beq.n	dadc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    dad6:	f06f 0309 	mvn.w	r3, #9
    dada:	e035      	b.n	db48 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    dadc:	2300      	movs	r3, #0
    dade:	77fb      	strb	r3, [r7, #31]
    dae0:	e01f      	b.n	db22 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    dae2:	7ffb      	ldrb	r3, [r7, #31]
    dae4:	69ba      	ldr	r2, [r7, #24]
    dae6:	5cd3      	ldrb	r3, [r2, r3]
    dae8:	2bff      	cmp	r3, #255	; 0xff
    daea:	d016      	beq.n	db1a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    daec:	7ffb      	ldrb	r3, [r7, #31]
    daee:	69ba      	ldr	r2, [r7, #24]
    daf0:	21ff      	movs	r1, #255	; 0xff
    daf2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    daf4:	7ffb      	ldrb	r3, [r7, #31]
    daf6:	69ba      	ldr	r2, [r7, #24]
    daf8:	4413      	add	r3, r2
    dafa:	789b      	ldrb	r3, [r3, #2]
    dafc:	2bff      	cmp	r3, #255	; 0xff
    dafe:	d00d      	beq.n	db1c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    db00:	7ffb      	ldrb	r3, [r7, #31]
    db02:	69ba      	ldr	r2, [r7, #24]
    db04:	4413      	add	r3, r2
    db06:	789b      	ldrb	r3, [r3, #2]
    db08:	4618      	mov	r0, r3
    db0a:	4b11      	ldr	r3, [pc, #68]	; (db50 <cdcdf_acm_disable+0xa4>)
    db0c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    db0e:	7ffb      	ldrb	r3, [r7, #31]
    db10:	69ba      	ldr	r2, [r7, #24]
    db12:	4413      	add	r3, r2
    db14:	22ff      	movs	r2, #255	; 0xff
    db16:	709a      	strb	r2, [r3, #2]
    db18:	e000      	b.n	db1c <cdcdf_acm_disable+0x70>
			continue;
    db1a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    db1c:	7ffb      	ldrb	r3, [r7, #31]
    db1e:	3301      	adds	r3, #1
    db20:	77fb      	strb	r3, [r7, #31]
    db22:	7ffb      	ldrb	r3, [r7, #31]
    db24:	2b01      	cmp	r3, #1
    db26:	d9dc      	bls.n	dae2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    db28:	69bb      	ldr	r3, [r7, #24]
    db2a:	791b      	ldrb	r3, [r3, #4]
    db2c:	2bff      	cmp	r3, #255	; 0xff
    db2e:	d007      	beq.n	db40 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    db30:	69bb      	ldr	r3, [r7, #24]
    db32:	791b      	ldrb	r3, [r3, #4]
    db34:	4618      	mov	r0, r3
    db36:	4b06      	ldr	r3, [pc, #24]	; (db50 <cdcdf_acm_disable+0xa4>)
    db38:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    db3a:	69bb      	ldr	r3, [r7, #24]
    db3c:	22ff      	movs	r2, #255	; 0xff
    db3e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    db40:	4b04      	ldr	r3, [pc, #16]	; (db54 <cdcdf_acm_disable+0xa8>)
    db42:	2200      	movs	r2, #0
    db44:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    db46:	2300      	movs	r3, #0
}
    db48:	4618      	mov	r0, r3
    db4a:	3720      	adds	r7, #32
    db4c:	46bd      	mov	sp, r7
    db4e:	bd80      	pop	{r7, pc}
    db50:	000047ed 	.word	0x000047ed
    db54:	2000277c 	.word	0x2000277c

0000db58 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    db58:	b580      	push	{r7, lr}
    db5a:	b084      	sub	sp, #16
    db5c:	af00      	add	r7, sp, #0
    db5e:	60f8      	str	r0, [r7, #12]
    db60:	460b      	mov	r3, r1
    db62:	607a      	str	r2, [r7, #4]
    db64:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    db66:	7afb      	ldrb	r3, [r7, #11]
    db68:	2b01      	cmp	r3, #1
    db6a:	d009      	beq.n	db80 <cdcdf_acm_ctrl+0x28>
    db6c:	2b02      	cmp	r3, #2
    db6e:	d00d      	beq.n	db8c <cdcdf_acm_ctrl+0x34>
    db70:	2b00      	cmp	r3, #0
    db72:	d10e      	bne.n	db92 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    db74:	6879      	ldr	r1, [r7, #4]
    db76:	68f8      	ldr	r0, [r7, #12]
    db78:	4b09      	ldr	r3, [pc, #36]	; (dba0 <cdcdf_acm_ctrl+0x48>)
    db7a:	4798      	blx	r3
    db7c:	4603      	mov	r3, r0
    db7e:	e00a      	b.n	db96 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    db80:	6879      	ldr	r1, [r7, #4]
    db82:	68f8      	ldr	r0, [r7, #12]
    db84:	4b07      	ldr	r3, [pc, #28]	; (dba4 <cdcdf_acm_ctrl+0x4c>)
    db86:	4798      	blx	r3
    db88:	4603      	mov	r3, r0
    db8a:	e004      	b.n	db96 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    db8c:	f06f 031a 	mvn.w	r3, #26
    db90:	e001      	b.n	db96 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    db92:	f06f 030c 	mvn.w	r3, #12
	}
}
    db96:	4618      	mov	r0, r3
    db98:	3710      	adds	r7, #16
    db9a:	46bd      	mov	sp, r7
    db9c:	bd80      	pop	{r7, pc}
    db9e:	bf00      	nop
    dba0:	0000d939 	.word	0x0000d939
    dba4:	0000daad 	.word	0x0000daad

0000dba8 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dba8:	b590      	push	{r4, r7, lr}
    dbaa:	b087      	sub	sp, #28
    dbac:	af00      	add	r7, sp, #0
    dbae:	4603      	mov	r3, r0
    dbb0:	6039      	str	r1, [r7, #0]
    dbb2:	71fb      	strb	r3, [r7, #7]
    dbb4:	4613      	mov	r3, r2
    dbb6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    dbb8:	683b      	ldr	r3, [r7, #0]
    dbba:	799a      	ldrb	r2, [r3, #6]
    dbbc:	79db      	ldrb	r3, [r3, #7]
    dbbe:	021b      	lsls	r3, r3, #8
    dbc0:	4313      	orrs	r3, r2
    dbc2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    dbc4:	4b2b      	ldr	r3, [pc, #172]	; (dc74 <cdcdf_acm_set_req+0xcc>)
    dbc6:	4798      	blx	r3
    dbc8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    dbca:	683b      	ldr	r3, [r7, #0]
    dbcc:	785b      	ldrb	r3, [r3, #1]
    dbce:	2b20      	cmp	r3, #32
    dbd0:	d002      	beq.n	dbd8 <cdcdf_acm_set_req+0x30>
    dbd2:	2b22      	cmp	r3, #34	; 0x22
    dbd4:	d034      	beq.n	dc40 <cdcdf_acm_set_req+0x98>
    dbd6:	e046      	b.n	dc66 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    dbd8:	8afb      	ldrh	r3, [r7, #22]
    dbda:	2b07      	cmp	r3, #7
    dbdc:	d002      	beq.n	dbe4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    dbde:	f04f 33ff 	mov.w	r3, #4294967295
    dbe2:	e042      	b.n	dc6a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    dbe4:	79bb      	ldrb	r3, [r7, #6]
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d107      	bne.n	dbfa <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    dbea:	8afa      	ldrh	r2, [r7, #22]
    dbec:	79f8      	ldrb	r0, [r7, #7]
    dbee:	2300      	movs	r3, #0
    dbf0:	6939      	ldr	r1, [r7, #16]
    dbf2:	4c21      	ldr	r4, [pc, #132]	; (dc78 <cdcdf_acm_set_req+0xd0>)
    dbf4:	47a0      	blx	r4
    dbf6:	4603      	mov	r3, r0
    dbf8:	e037      	b.n	dc6a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    dbfa:	693a      	ldr	r2, [r7, #16]
    dbfc:	f107 0308 	add.w	r3, r7, #8
    dc00:	6810      	ldr	r0, [r2, #0]
    dc02:	6018      	str	r0, [r3, #0]
    dc04:	8891      	ldrh	r1, [r2, #4]
    dc06:	7992      	ldrb	r2, [r2, #6]
    dc08:	8099      	strh	r1, [r3, #4]
    dc0a:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    dc0c:	4b1b      	ldr	r3, [pc, #108]	; (dc7c <cdcdf_acm_set_req+0xd4>)
    dc0e:	681b      	ldr	r3, [r3, #0]
    dc10:	2b00      	cmp	r3, #0
    dc12:	d008      	beq.n	dc26 <cdcdf_acm_set_req+0x7e>
    dc14:	4b19      	ldr	r3, [pc, #100]	; (dc7c <cdcdf_acm_set_req+0xd4>)
    dc16:	681b      	ldr	r3, [r3, #0]
    dc18:	f107 0208 	add.w	r2, r7, #8
    dc1c:	4610      	mov	r0, r2
    dc1e:	4798      	blx	r3
    dc20:	4603      	mov	r3, r0
    dc22:	2b00      	cmp	r3, #0
    dc24:	d00a      	beq.n	dc3c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    dc26:	4b16      	ldr	r3, [pc, #88]	; (dc80 <cdcdf_acm_set_req+0xd8>)
    dc28:	f107 0208 	add.w	r2, r7, #8
    dc2c:	e892 0003 	ldmia.w	r2, {r0, r1}
    dc30:	6018      	str	r0, [r3, #0]
    dc32:	3304      	adds	r3, #4
    dc34:	8019      	strh	r1, [r3, #0]
    dc36:	3302      	adds	r3, #2
    dc38:	0c0a      	lsrs	r2, r1, #16
    dc3a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    dc3c:	2300      	movs	r3, #0
    dc3e:	e014      	b.n	dc6a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    dc40:	2300      	movs	r3, #0
    dc42:	2200      	movs	r2, #0
    dc44:	2100      	movs	r1, #0
    dc46:	2000      	movs	r0, #0
    dc48:	4c0b      	ldr	r4, [pc, #44]	; (dc78 <cdcdf_acm_set_req+0xd0>)
    dc4a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    dc4c:	4b0d      	ldr	r3, [pc, #52]	; (dc84 <cdcdf_acm_set_req+0xdc>)
    dc4e:	681b      	ldr	r3, [r3, #0]
    dc50:	2b00      	cmp	r3, #0
    dc52:	d006      	beq.n	dc62 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    dc54:	4b0b      	ldr	r3, [pc, #44]	; (dc84 <cdcdf_acm_set_req+0xdc>)
    dc56:	681b      	ldr	r3, [r3, #0]
    dc58:	683a      	ldr	r2, [r7, #0]
    dc5a:	8852      	ldrh	r2, [r2, #2]
    dc5c:	b292      	uxth	r2, r2
    dc5e:	4610      	mov	r0, r2
    dc60:	4798      	blx	r3
		}
		return ERR_NONE;
    dc62:	2300      	movs	r3, #0
    dc64:	e001      	b.n	dc6a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    dc66:	f06f 030c 	mvn.w	r3, #12
	}
}
    dc6a:	4618      	mov	r0, r3
    dc6c:	371c      	adds	r7, #28
    dc6e:	46bd      	mov	sp, r7
    dc70:	bd90      	pop	{r4, r7, pc}
    dc72:	bf00      	nop
    dc74:	0000ebf5 	.word	0x0000ebf5
    dc78:	0000ea69 	.word	0x0000ea69
    dc7c:	20002790 	.word	0x20002790
    dc80:	20002784 	.word	0x20002784
    dc84:	2000278c 	.word	0x2000278c

0000dc88 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dc88:	b590      	push	{r4, r7, lr}
    dc8a:	b085      	sub	sp, #20
    dc8c:	af00      	add	r7, sp, #0
    dc8e:	4603      	mov	r3, r0
    dc90:	6039      	str	r1, [r7, #0]
    dc92:	71fb      	strb	r3, [r7, #7]
    dc94:	4613      	mov	r3, r2
    dc96:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    dc98:	683b      	ldr	r3, [r7, #0]
    dc9a:	799a      	ldrb	r2, [r3, #6]
    dc9c:	79db      	ldrb	r3, [r3, #7]
    dc9e:	021b      	lsls	r3, r3, #8
    dca0:	4313      	orrs	r3, r2
    dca2:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    dca4:	79bb      	ldrb	r3, [r7, #6]
    dca6:	2b01      	cmp	r3, #1
    dca8:	d101      	bne.n	dcae <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    dcaa:	2300      	movs	r3, #0
    dcac:	e013      	b.n	dcd6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    dcae:	683b      	ldr	r3, [r7, #0]
    dcb0:	785b      	ldrb	r3, [r3, #1]
    dcb2:	2b21      	cmp	r3, #33	; 0x21
    dcb4:	d10d      	bne.n	dcd2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    dcb6:	89fb      	ldrh	r3, [r7, #14]
    dcb8:	2b07      	cmp	r3, #7
    dcba:	d002      	beq.n	dcc2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    dcbc:	f04f 33ff 	mov.w	r3, #4294967295
    dcc0:	e009      	b.n	dcd6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    dcc2:	89fa      	ldrh	r2, [r7, #14]
    dcc4:	79f8      	ldrb	r0, [r7, #7]
    dcc6:	2300      	movs	r3, #0
    dcc8:	4905      	ldr	r1, [pc, #20]	; (dce0 <cdcdf_acm_get_req+0x58>)
    dcca:	4c06      	ldr	r4, [pc, #24]	; (dce4 <cdcdf_acm_get_req+0x5c>)
    dccc:	47a0      	blx	r4
    dcce:	4603      	mov	r3, r0
    dcd0:	e001      	b.n	dcd6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    dcd2:	f06f 030c 	mvn.w	r3, #12
	}
}
    dcd6:	4618      	mov	r0, r3
    dcd8:	3714      	adds	r7, #20
    dcda:	46bd      	mov	sp, r7
    dcdc:	bd90      	pop	{r4, r7, pc}
    dcde:	bf00      	nop
    dce0:	20002784 	.word	0x20002784
    dce4:	0000ea69 	.word	0x0000ea69

0000dce8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dce8:	b580      	push	{r7, lr}
    dcea:	b082      	sub	sp, #8
    dcec:	af00      	add	r7, sp, #0
    dcee:	4603      	mov	r3, r0
    dcf0:	6039      	str	r1, [r7, #0]
    dcf2:	71fb      	strb	r3, [r7, #7]
    dcf4:	4613      	mov	r3, r2
    dcf6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    dcf8:	683b      	ldr	r3, [r7, #0]
    dcfa:	781b      	ldrb	r3, [r3, #0]
    dcfc:	095b      	lsrs	r3, r3, #5
    dcfe:	b2db      	uxtb	r3, r3
    dd00:	f003 0303 	and.w	r3, r3, #3
    dd04:	2b01      	cmp	r3, #1
    dd06:	d002      	beq.n	dd0e <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    dd08:	f06f 0309 	mvn.w	r3, #9
    dd0c:	e026      	b.n	dd5c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    dd0e:	683b      	ldr	r3, [r7, #0]
    dd10:	889b      	ldrh	r3, [r3, #4]
    dd12:	b29a      	uxth	r2, r3
    dd14:	4b13      	ldr	r3, [pc, #76]	; (dd64 <cdcdf_acm_req+0x7c>)
    dd16:	781b      	ldrb	r3, [r3, #0]
    dd18:	b29b      	uxth	r3, r3
    dd1a:	429a      	cmp	r2, r3
    dd1c:	d007      	beq.n	dd2e <cdcdf_acm_req+0x46>
    dd1e:	683b      	ldr	r3, [r7, #0]
    dd20:	889b      	ldrh	r3, [r3, #4]
    dd22:	b29a      	uxth	r2, r3
    dd24:	4b0f      	ldr	r3, [pc, #60]	; (dd64 <cdcdf_acm_req+0x7c>)
    dd26:	785b      	ldrb	r3, [r3, #1]
    dd28:	b29b      	uxth	r3, r3
    dd2a:	429a      	cmp	r2, r3
    dd2c:	d114      	bne.n	dd58 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    dd2e:	683b      	ldr	r3, [r7, #0]
    dd30:	781b      	ldrb	r3, [r3, #0]
    dd32:	b25b      	sxtb	r3, r3
    dd34:	2b00      	cmp	r3, #0
    dd36:	da07      	bge.n	dd48 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    dd38:	79ba      	ldrb	r2, [r7, #6]
    dd3a:	79fb      	ldrb	r3, [r7, #7]
    dd3c:	6839      	ldr	r1, [r7, #0]
    dd3e:	4618      	mov	r0, r3
    dd40:	4b09      	ldr	r3, [pc, #36]	; (dd68 <cdcdf_acm_req+0x80>)
    dd42:	4798      	blx	r3
    dd44:	4603      	mov	r3, r0
    dd46:	e009      	b.n	dd5c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    dd48:	79ba      	ldrb	r2, [r7, #6]
    dd4a:	79fb      	ldrb	r3, [r7, #7]
    dd4c:	6839      	ldr	r1, [r7, #0]
    dd4e:	4618      	mov	r0, r3
    dd50:	4b06      	ldr	r3, [pc, #24]	; (dd6c <cdcdf_acm_req+0x84>)
    dd52:	4798      	blx	r3
    dd54:	4603      	mov	r3, r0
    dd56:	e001      	b.n	dd5c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    dd58:	f06f 0309 	mvn.w	r3, #9
	}
}
    dd5c:	4618      	mov	r0, r3
    dd5e:	3708      	adds	r7, #8
    dd60:	46bd      	mov	sp, r7
    dd62:	bd80      	pop	{r7, pc}
    dd64:	2000277c 	.word	0x2000277c
    dd68:	0000dc89 	.word	0x0000dc89
    dd6c:	0000dba9 	.word	0x0000dba9

0000dd70 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    dd70:	b580      	push	{r7, lr}
    dd72:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    dd74:	4b0b      	ldr	r3, [pc, #44]	; (dda4 <cdcdf_acm_init+0x34>)
    dd76:	4798      	blx	r3
    dd78:	4603      	mov	r3, r0
    dd7a:	2b01      	cmp	r3, #1
    dd7c:	d902      	bls.n	dd84 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    dd7e:	f06f 0310 	mvn.w	r3, #16
    dd82:	e00d      	b.n	dda0 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    dd84:	4b08      	ldr	r3, [pc, #32]	; (dda8 <cdcdf_acm_init+0x38>)
    dd86:	4a09      	ldr	r2, [pc, #36]	; (ddac <cdcdf_acm_init+0x3c>)
    dd88:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    dd8a:	4b07      	ldr	r3, [pc, #28]	; (dda8 <cdcdf_acm_init+0x38>)
    dd8c:	4a08      	ldr	r2, [pc, #32]	; (ddb0 <cdcdf_acm_init+0x40>)
    dd8e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    dd90:	4805      	ldr	r0, [pc, #20]	; (dda8 <cdcdf_acm_init+0x38>)
    dd92:	4b08      	ldr	r3, [pc, #32]	; (ddb4 <cdcdf_acm_init+0x44>)
    dd94:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    dd96:	4908      	ldr	r1, [pc, #32]	; (ddb8 <cdcdf_acm_init+0x48>)
    dd98:	2001      	movs	r0, #1
    dd9a:	4b08      	ldr	r3, [pc, #32]	; (ddbc <cdcdf_acm_init+0x4c>)
    dd9c:	4798      	blx	r3
	return ERR_NONE;
    dd9e:	2300      	movs	r3, #0
}
    dda0:	4618      	mov	r0, r3
    dda2:	bd80      	pop	{r7, pc}
    dda4:	0000ec0d 	.word	0x0000ec0d
    dda8:	20002770 	.word	0x20002770
    ddac:	0000db59 	.word	0x0000db59
    ddb0:	2000277c 	.word	0x2000277c
    ddb4:	0000eb75 	.word	0x0000eb75
    ddb8:	20000208 	.word	0x20000208
    ddbc:	0000eaa5 	.word	0x0000eaa5

0000ddc0 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    ddc0:	b590      	push	{r4, r7, lr}
    ddc2:	b083      	sub	sp, #12
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	6078      	str	r0, [r7, #4]
    ddc8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ddca:	4b0b      	ldr	r3, [pc, #44]	; (ddf8 <cdcdf_acm_read+0x38>)
    ddcc:	4798      	blx	r3
    ddce:	4603      	mov	r3, r0
    ddd0:	f083 0301 	eor.w	r3, r3, #1
    ddd4:	b2db      	uxtb	r3, r3
    ddd6:	2b00      	cmp	r3, #0
    ddd8:	d002      	beq.n	dde0 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    ddda:	f06f 0310 	mvn.w	r3, #16
    ddde:	e007      	b.n	ddf0 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    dde0:	4b06      	ldr	r3, [pc, #24]	; (ddfc <cdcdf_acm_read+0x3c>)
    dde2:	7918      	ldrb	r0, [r3, #4]
    dde4:	2300      	movs	r3, #0
    dde6:	683a      	ldr	r2, [r7, #0]
    dde8:	6879      	ldr	r1, [r7, #4]
    ddea:	4c05      	ldr	r4, [pc, #20]	; (de00 <cdcdf_acm_read+0x40>)
    ddec:	47a0      	blx	r4
    ddee:	4603      	mov	r3, r0
}
    ddf0:	4618      	mov	r0, r3
    ddf2:	370c      	adds	r7, #12
    ddf4:	46bd      	mov	sp, r7
    ddf6:	bd90      	pop	{r4, r7, pc}
    ddf8:	0000dee5 	.word	0x0000dee5
    ddfc:	2000277c 	.word	0x2000277c
    de00:	0000ea69 	.word	0x0000ea69

0000de04 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    de04:	b590      	push	{r4, r7, lr}
    de06:	b083      	sub	sp, #12
    de08:	af00      	add	r7, sp, #0
    de0a:	6078      	str	r0, [r7, #4]
    de0c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    de0e:	4b0b      	ldr	r3, [pc, #44]	; (de3c <cdcdf_acm_write+0x38>)
    de10:	4798      	blx	r3
    de12:	4603      	mov	r3, r0
    de14:	f083 0301 	eor.w	r3, r3, #1
    de18:	b2db      	uxtb	r3, r3
    de1a:	2b00      	cmp	r3, #0
    de1c:	d002      	beq.n	de24 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    de1e:	f06f 0310 	mvn.w	r3, #16
    de22:	e007      	b.n	de34 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    de24:	4b06      	ldr	r3, [pc, #24]	; (de40 <cdcdf_acm_write+0x3c>)
    de26:	78d8      	ldrb	r0, [r3, #3]
    de28:	2301      	movs	r3, #1
    de2a:	683a      	ldr	r2, [r7, #0]
    de2c:	6879      	ldr	r1, [r7, #4]
    de2e:	4c05      	ldr	r4, [pc, #20]	; (de44 <cdcdf_acm_write+0x40>)
    de30:	47a0      	blx	r4
    de32:	4603      	mov	r3, r0
}
    de34:	4618      	mov	r0, r3
    de36:	370c      	adds	r7, #12
    de38:	46bd      	mov	sp, r7
    de3a:	bd90      	pop	{r4, r7, pc}
    de3c:	0000dee5 	.word	0x0000dee5
    de40:	2000277c 	.word	0x2000277c
    de44:	0000ea69 	.word	0x0000ea69

0000de48 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    de48:	b580      	push	{r7, lr}
    de4a:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    de4c:	4b05      	ldr	r3, [pc, #20]	; (de64 <cdcdf_acm_stop_xfer+0x1c>)
    de4e:	78db      	ldrb	r3, [r3, #3]
    de50:	4618      	mov	r0, r3
    de52:	4b05      	ldr	r3, [pc, #20]	; (de68 <cdcdf_acm_stop_xfer+0x20>)
    de54:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    de56:	4b03      	ldr	r3, [pc, #12]	; (de64 <cdcdf_acm_stop_xfer+0x1c>)
    de58:	791b      	ldrb	r3, [r3, #4]
    de5a:	4618      	mov	r0, r3
    de5c:	4b02      	ldr	r3, [pc, #8]	; (de68 <cdcdf_acm_stop_xfer+0x20>)
    de5e:	4798      	blx	r3
}
    de60:	bf00      	nop
    de62:	bd80      	pop	{r7, pc}
    de64:	2000277c 	.word	0x2000277c
    de68:	00004a15 	.word	0x00004a15

0000de6c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    de6c:	b580      	push	{r7, lr}
    de6e:	b082      	sub	sp, #8
    de70:	af00      	add	r7, sp, #0
    de72:	4603      	mov	r3, r0
    de74:	6039      	str	r1, [r7, #0]
    de76:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    de78:	79fb      	ldrb	r3, [r7, #7]
    de7a:	2b03      	cmp	r3, #3
    de7c:	d822      	bhi.n	dec4 <cdcdf_acm_register_callback+0x58>
    de7e:	a201      	add	r2, pc, #4	; (adr r2, de84 <cdcdf_acm_register_callback+0x18>)
    de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    de84:	0000de95 	.word	0x0000de95
    de88:	0000dea5 	.word	0x0000dea5
    de8c:	0000deb5 	.word	0x0000deb5
    de90:	0000debd 	.word	0x0000debd
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    de94:	4b0f      	ldr	r3, [pc, #60]	; (ded4 <cdcdf_acm_register_callback+0x68>)
    de96:	791b      	ldrb	r3, [r3, #4]
    de98:	683a      	ldr	r2, [r7, #0]
    de9a:	2102      	movs	r1, #2
    de9c:	4618      	mov	r0, r3
    de9e:	4b0e      	ldr	r3, [pc, #56]	; (ded8 <cdcdf_acm_register_callback+0x6c>)
    dea0:	4798      	blx	r3
		break;
    dea2:	e012      	b.n	deca <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    dea4:	4b0b      	ldr	r3, [pc, #44]	; (ded4 <cdcdf_acm_register_callback+0x68>)
    dea6:	78db      	ldrb	r3, [r3, #3]
    dea8:	683a      	ldr	r2, [r7, #0]
    deaa:	2102      	movs	r1, #2
    deac:	4618      	mov	r0, r3
    deae:	4b0a      	ldr	r3, [pc, #40]	; (ded8 <cdcdf_acm_register_callback+0x6c>)
    deb0:	4798      	blx	r3
		break;
    deb2:	e00a      	b.n	deca <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    deb4:	4a09      	ldr	r2, [pc, #36]	; (dedc <cdcdf_acm_register_callback+0x70>)
    deb6:	683b      	ldr	r3, [r7, #0]
    deb8:	6013      	str	r3, [r2, #0]
		break;
    deba:	e006      	b.n	deca <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    debc:	4a08      	ldr	r2, [pc, #32]	; (dee0 <cdcdf_acm_register_callback+0x74>)
    debe:	683b      	ldr	r3, [r7, #0]
    dec0:	6013      	str	r3, [r2, #0]
		break;
    dec2:	e002      	b.n	deca <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    dec4:	f06f 030c 	mvn.w	r3, #12
    dec8:	e000      	b.n	decc <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    deca:	2300      	movs	r3, #0
}
    decc:	4618      	mov	r0, r3
    dece:	3708      	adds	r7, #8
    ded0:	46bd      	mov	sp, r7
    ded2:	bd80      	pop	{r7, pc}
    ded4:	2000277c 	.word	0x2000277c
    ded8:	00004b41 	.word	0x00004b41
    dedc:	20002790 	.word	0x20002790
    dee0:	2000278c 	.word	0x2000278c

0000dee4 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    dee4:	b480      	push	{r7}
    dee6:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    dee8:	4b03      	ldr	r3, [pc, #12]	; (def8 <cdcdf_acm_is_enabled+0x14>)
    deea:	795b      	ldrb	r3, [r3, #5]
}
    deec:	4618      	mov	r0, r3
    deee:	46bd      	mov	sp, r7
    def0:	f85d 7b04 	ldr.w	r7, [sp], #4
    def4:	4770      	bx	lr
    def6:	bf00      	nop
    def8:	2000277c 	.word	0x2000277c

0000defc <usb_get_u16>:
{
    defc:	b480      	push	{r7}
    defe:	b083      	sub	sp, #12
    df00:	af00      	add	r7, sp, #0
    df02:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	b29a      	uxth	r2, r3
    df0a:	687b      	ldr	r3, [r7, #4]
    df0c:	3301      	adds	r3, #1
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	b29b      	uxth	r3, r3
    df12:	021b      	lsls	r3, r3, #8
    df14:	b29b      	uxth	r3, r3
    df16:	4413      	add	r3, r2
    df18:	b29b      	uxth	r3, r3
}
    df1a:	4618      	mov	r0, r3
    df1c:	370c      	adds	r7, #12
    df1e:	46bd      	mov	sp, r7
    df20:	f85d 7b04 	ldr.w	r7, [sp], #4
    df24:	4770      	bx	lr

0000df26 <usb_desc_len>:
{
    df26:	b480      	push	{r7}
    df28:	b083      	sub	sp, #12
    df2a:	af00      	add	r7, sp, #0
    df2c:	6078      	str	r0, [r7, #4]
	return desc[0];
    df2e:	687b      	ldr	r3, [r7, #4]
    df30:	781b      	ldrb	r3, [r3, #0]
}
    df32:	4618      	mov	r0, r3
    df34:	370c      	adds	r7, #12
    df36:	46bd      	mov	sp, r7
    df38:	f85d 7b04 	ldr.w	r7, [sp], #4
    df3c:	4770      	bx	lr
	...

0000df40 <usb_desc_next>:
{
    df40:	b580      	push	{r7, lr}
    df42:	b082      	sub	sp, #8
    df44:	af00      	add	r7, sp, #0
    df46:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    df48:	6878      	ldr	r0, [r7, #4]
    df4a:	4b05      	ldr	r3, [pc, #20]	; (df60 <usb_desc_next+0x20>)
    df4c:	4798      	blx	r3
    df4e:	4603      	mov	r3, r0
    df50:	461a      	mov	r2, r3
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	4413      	add	r3, r2
}
    df56:	4618      	mov	r0, r3
    df58:	3708      	adds	r7, #8
    df5a:	46bd      	mov	sp, r7
    df5c:	bd80      	pop	{r7, pc}
    df5e:	bf00      	nop
    df60:	0000df27 	.word	0x0000df27

0000df64 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    df64:	b580      	push	{r7, lr}
    df66:	b082      	sub	sp, #8
    df68:	af00      	add	r7, sp, #0
    df6a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    df6c:	687b      	ldr	r3, [r7, #4]
    df6e:	3302      	adds	r3, #2
    df70:	4618      	mov	r0, r3
    df72:	4b03      	ldr	r3, [pc, #12]	; (df80 <usb_cfg_desc_total_len+0x1c>)
    df74:	4798      	blx	r3
    df76:	4603      	mov	r3, r0
}
    df78:	4618      	mov	r0, r3
    df7a:	3708      	adds	r7, #8
    df7c:	46bd      	mov	sp, r7
    df7e:	bd80      	pop	{r7, pc}
    df80:	0000defd 	.word	0x0000defd

0000df84 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    df84:	b590      	push	{r4, r7, lr}
    df86:	b085      	sub	sp, #20
    df88:	af00      	add	r7, sp, #0
    df8a:	4603      	mov	r3, r0
    df8c:	6039      	str	r1, [r7, #0]
    df8e:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    df90:	2300      	movs	r3, #0
    df92:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    df94:	683b      	ldr	r3, [r7, #0]
    df96:	799a      	ldrb	r2, [r3, #6]
    df98:	79db      	ldrb	r3, [r3, #7]
    df9a:	021b      	lsls	r3, r3, #8
    df9c:	4313      	orrs	r3, r2
    df9e:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    dfa0:	897b      	ldrh	r3, [r7, #10]
    dfa2:	2b12      	cmp	r3, #18
    dfa4:	d901      	bls.n	dfaa <usbdc_get_dev_desc+0x26>
		length = 0x12;
    dfa6:	2312      	movs	r3, #18
    dfa8:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    dfaa:	68fb      	ldr	r3, [r7, #12]
    dfac:	2b00      	cmp	r3, #0
    dfae:	d10a      	bne.n	dfc6 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    dfb0:	4b0f      	ldr	r3, [pc, #60]	; (dff0 <usbdc_get_dev_desc+0x6c>)
    dfb2:	681b      	ldr	r3, [r3, #0]
    dfb4:	6818      	ldr	r0, [r3, #0]
    dfb6:	4b0e      	ldr	r3, [pc, #56]	; (dff0 <usbdc_get_dev_desc+0x6c>)
    dfb8:	681b      	ldr	r3, [r3, #0]
    dfba:	685b      	ldr	r3, [r3, #4]
    dfbc:	2201      	movs	r2, #1
    dfbe:	4619      	mov	r1, r3
    dfc0:	4b0c      	ldr	r3, [pc, #48]	; (dff4 <usbdc_get_dev_desc+0x70>)
    dfc2:	4798      	blx	r3
    dfc4:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    dfc6:	68fb      	ldr	r3, [r7, #12]
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d101      	bne.n	dfd0 <usbdc_get_dev_desc+0x4c>
		return false;
    dfcc:	2300      	movs	r3, #0
    dfce:	e00b      	b.n	dfe8 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    dfd0:	897a      	ldrh	r2, [r7, #10]
    dfd2:	79f8      	ldrb	r0, [r7, #7]
    dfd4:	2300      	movs	r3, #0
    dfd6:	68f9      	ldr	r1, [r7, #12]
    dfd8:	4c07      	ldr	r4, [pc, #28]	; (dff8 <usbdc_get_dev_desc+0x74>)
    dfda:	47a0      	blx	r4
    dfdc:	4603      	mov	r3, r0
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d001      	beq.n	dfe6 <usbdc_get_dev_desc+0x62>
		return false;
    dfe2:	2300      	movs	r3, #0
    dfe4:	e000      	b.n	dfe8 <usbdc_get_dev_desc+0x64>
	}
	return true;
    dfe6:	2301      	movs	r3, #1
}
    dfe8:	4618      	mov	r0, r3
    dfea:	3714      	adds	r7, #20
    dfec:	46bd      	mov	sp, r7
    dfee:	bd90      	pop	{r4, r7, pc}
    dff0:	20002794 	.word	0x20002794
    dff4:	0000ecf9 	.word	0x0000ecf9
    dff8:	0000ea69 	.word	0x0000ea69

0000dffc <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    dffc:	b590      	push	{r4, r7, lr}
    dffe:	b087      	sub	sp, #28
    e000:	af00      	add	r7, sp, #0
    e002:	4603      	mov	r3, r0
    e004:	6039      	str	r1, [r7, #0]
    e006:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    e008:	2300      	movs	r3, #0
    e00a:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    e00c:	683b      	ldr	r3, [r7, #0]
    e00e:	799a      	ldrb	r2, [r3, #6]
    e010:	79db      	ldrb	r3, [r3, #7]
    e012:	021b      	lsls	r3, r3, #8
    e014:	4313      	orrs	r3, r2
    e016:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    e018:	683b      	ldr	r3, [r7, #0]
    e01a:	885b      	ldrh	r3, [r3, #2]
    e01c:	b29b      	uxth	r3, r3
    e01e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e020:	8a7a      	ldrh	r2, [r7, #18]
    e022:	4b1e      	ldr	r3, [pc, #120]	; (e09c <usbdc_get_cfg_desc+0xa0>)
    e024:	7f1b      	ldrb	r3, [r3, #28]
    e026:	3b01      	subs	r3, #1
    e028:	4013      	ands	r3, r2
    e02a:	2b00      	cmp	r3, #0
    e02c:	bf0c      	ite	eq
    e02e:	2301      	moveq	r3, #1
    e030:	2300      	movne	r3, #0
    e032:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e034:	697b      	ldr	r3, [r7, #20]
    e036:	2b00      	cmp	r3, #0
    e038:	d10c      	bne.n	e054 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    e03a:	4b18      	ldr	r3, [pc, #96]	; (e09c <usbdc_get_cfg_desc+0xa0>)
    e03c:	681b      	ldr	r3, [r3, #0]
    e03e:	6818      	ldr	r0, [r3, #0]
    e040:	4b16      	ldr	r3, [pc, #88]	; (e09c <usbdc_get_cfg_desc+0xa0>)
    e042:	681b      	ldr	r3, [r3, #0]
    e044:	6859      	ldr	r1, [r3, #4]
    e046:	7c3b      	ldrb	r3, [r7, #16]
    e048:	3301      	adds	r3, #1
    e04a:	b2db      	uxtb	r3, r3
    e04c:	461a      	mov	r2, r3
    e04e:	4b14      	ldr	r3, [pc, #80]	; (e0a0 <usbdc_get_cfg_desc+0xa4>)
    e050:	4798      	blx	r3
    e052:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    e054:	697b      	ldr	r3, [r7, #20]
    e056:	2b00      	cmp	r3, #0
    e058:	d101      	bne.n	e05e <usbdc_get_cfg_desc+0x62>
		return false;
    e05a:	2300      	movs	r3, #0
    e05c:	e019      	b.n	e092 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    e05e:	6978      	ldr	r0, [r7, #20]
    e060:	4b10      	ldr	r3, [pc, #64]	; (e0a4 <usbdc_get_cfg_desc+0xa8>)
    e062:	4798      	blx	r3
    e064:	4603      	mov	r3, r0
    e066:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    e068:	8a7a      	ldrh	r2, [r7, #18]
    e06a:	89fb      	ldrh	r3, [r7, #14]
    e06c:	429a      	cmp	r2, r3
    e06e:	d802      	bhi.n	e076 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    e070:	2300      	movs	r3, #0
    e072:	747b      	strb	r3, [r7, #17]
    e074:	e001      	b.n	e07a <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    e076:	89fb      	ldrh	r3, [r7, #14]
    e078:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    e07a:	8a7a      	ldrh	r2, [r7, #18]
    e07c:	7c7b      	ldrb	r3, [r7, #17]
    e07e:	79f8      	ldrb	r0, [r7, #7]
    e080:	6979      	ldr	r1, [r7, #20]
    e082:	4c09      	ldr	r4, [pc, #36]	; (e0a8 <usbdc_get_cfg_desc+0xac>)
    e084:	47a0      	blx	r4
    e086:	4603      	mov	r3, r0
    e088:	2b00      	cmp	r3, #0
    e08a:	d001      	beq.n	e090 <usbdc_get_cfg_desc+0x94>
		return false;
    e08c:	2300      	movs	r3, #0
    e08e:	e000      	b.n	e092 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    e090:	2301      	movs	r3, #1
}
    e092:	4618      	mov	r0, r3
    e094:	371c      	adds	r7, #28
    e096:	46bd      	mov	sp, r7
    e098:	bd90      	pop	{r4, r7, pc}
    e09a:	bf00      	nop
    e09c:	20002794 	.word	0x20002794
    e0a0:	0000edb9 	.word	0x0000edb9
    e0a4:	0000df65 	.word	0x0000df65
    e0a8:	0000ea69 	.word	0x0000ea69

0000e0ac <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    e0ac:	b590      	push	{r4, r7, lr}
    e0ae:	b085      	sub	sp, #20
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	4603      	mov	r3, r0
    e0b4:	6039      	str	r1, [r7, #0]
    e0b6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    e0b8:	683b      	ldr	r3, [r7, #0]
    e0ba:	799a      	ldrb	r2, [r3, #6]
    e0bc:	79db      	ldrb	r3, [r3, #7]
    e0be:	021b      	lsls	r3, r3, #8
    e0c0:	4313      	orrs	r3, r2
    e0c2:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    e0c4:	683b      	ldr	r3, [r7, #0]
    e0c6:	885b      	ldrh	r3, [r3, #2]
    e0c8:	b29b      	uxth	r3, r3
    e0ca:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e0cc:	89fa      	ldrh	r2, [r7, #14]
    e0ce:	4b1a      	ldr	r3, [pc, #104]	; (e138 <usbdc_get_str_desc+0x8c>)
    e0d0:	7f1b      	ldrb	r3, [r3, #28]
    e0d2:	3b01      	subs	r3, #1
    e0d4:	4013      	ands	r3, r2
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	bf0c      	ite	eq
    e0da:	2301      	moveq	r3, #1
    e0dc:	2300      	movne	r3, #0
    e0de:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    e0e0:	4b15      	ldr	r3, [pc, #84]	; (e138 <usbdc_get_str_desc+0x8c>)
    e0e2:	681b      	ldr	r3, [r3, #0]
    e0e4:	6818      	ldr	r0, [r3, #0]
    e0e6:	4b14      	ldr	r3, [pc, #80]	; (e138 <usbdc_get_str_desc+0x8c>)
    e0e8:	681b      	ldr	r3, [r3, #0]
    e0ea:	685b      	ldr	r3, [r3, #4]
    e0ec:	7b3a      	ldrb	r2, [r7, #12]
    e0ee:	4619      	mov	r1, r3
    e0f0:	4b12      	ldr	r3, [pc, #72]	; (e13c <usbdc_get_str_desc+0x90>)
    e0f2:	4798      	blx	r3
    e0f4:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    e0f6:	68bb      	ldr	r3, [r7, #8]
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d101      	bne.n	e100 <usbdc_get_str_desc+0x54>
		return false;
    e0fc:	2300      	movs	r3, #0
    e0fe:	e017      	b.n	e130 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    e100:	68bb      	ldr	r3, [r7, #8]
    e102:	781b      	ldrb	r3, [r3, #0]
    e104:	b29b      	uxth	r3, r3
    e106:	89fa      	ldrh	r2, [r7, #14]
    e108:	429a      	cmp	r2, r3
    e10a:	d802      	bhi.n	e112 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    e10c:	2300      	movs	r3, #0
    e10e:	737b      	strb	r3, [r7, #13]
    e110:	e002      	b.n	e118 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    e112:	68bb      	ldr	r3, [r7, #8]
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    e118:	89fa      	ldrh	r2, [r7, #14]
    e11a:	7b7b      	ldrb	r3, [r7, #13]
    e11c:	79f8      	ldrb	r0, [r7, #7]
    e11e:	68b9      	ldr	r1, [r7, #8]
    e120:	4c07      	ldr	r4, [pc, #28]	; (e140 <usbdc_get_str_desc+0x94>)
    e122:	47a0      	blx	r4
    e124:	4603      	mov	r3, r0
    e126:	2b00      	cmp	r3, #0
    e128:	d001      	beq.n	e12e <usbdc_get_str_desc+0x82>
		return false;
    e12a:	2300      	movs	r3, #0
    e12c:	e000      	b.n	e130 <usbdc_get_str_desc+0x84>
	}
	return true;
    e12e:	2301      	movs	r3, #1
}
    e130:	4618      	mov	r0, r3
    e132:	3714      	adds	r7, #20
    e134:	46bd      	mov	sp, r7
    e136:	bd90      	pop	{r4, r7, pc}
    e138:	20002794 	.word	0x20002794
    e13c:	0000ee31 	.word	0x0000ee31
    e140:	0000ea69 	.word	0x0000ea69

0000e144 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    e144:	b580      	push	{r7, lr}
    e146:	b084      	sub	sp, #16
    e148:	af00      	add	r7, sp, #0
    e14a:	4603      	mov	r3, r0
    e14c:	6039      	str	r1, [r7, #0]
    e14e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    e150:	683b      	ldr	r3, [r7, #0]
    e152:	885b      	ldrh	r3, [r3, #2]
    e154:	b29b      	uxth	r3, r3
    e156:	0a1b      	lsrs	r3, r3, #8
    e158:	b29b      	uxth	r3, r3
    e15a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    e15c:	7bfb      	ldrb	r3, [r7, #15]
    e15e:	2b02      	cmp	r3, #2
    e160:	d00d      	beq.n	e17e <usbdc_get_desc_req+0x3a>
    e162:	2b03      	cmp	r3, #3
    e164:	d012      	beq.n	e18c <usbdc_get_desc_req+0x48>
    e166:	2b01      	cmp	r3, #1
    e168:	d002      	beq.n	e170 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    e16a:	bf00      	nop
	}
	return false;
    e16c:	2300      	movs	r3, #0
    e16e:	e013      	b.n	e198 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    e170:	79fb      	ldrb	r3, [r7, #7]
    e172:	6839      	ldr	r1, [r7, #0]
    e174:	4618      	mov	r0, r3
    e176:	4b0a      	ldr	r3, [pc, #40]	; (e1a0 <usbdc_get_desc_req+0x5c>)
    e178:	4798      	blx	r3
    e17a:	4603      	mov	r3, r0
    e17c:	e00c      	b.n	e198 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    e17e:	79fb      	ldrb	r3, [r7, #7]
    e180:	6839      	ldr	r1, [r7, #0]
    e182:	4618      	mov	r0, r3
    e184:	4b07      	ldr	r3, [pc, #28]	; (e1a4 <usbdc_get_desc_req+0x60>)
    e186:	4798      	blx	r3
    e188:	4603      	mov	r3, r0
    e18a:	e005      	b.n	e198 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    e18c:	79fb      	ldrb	r3, [r7, #7]
    e18e:	6839      	ldr	r1, [r7, #0]
    e190:	4618      	mov	r0, r3
    e192:	4b05      	ldr	r3, [pc, #20]	; (e1a8 <usbdc_get_desc_req+0x64>)
    e194:	4798      	blx	r3
    e196:	4603      	mov	r3, r0
}
    e198:	4618      	mov	r0, r3
    e19a:	3710      	adds	r7, #16
    e19c:	46bd      	mov	sp, r7
    e19e:	bd80      	pop	{r7, pc}
    e1a0:	0000df85 	.word	0x0000df85
    e1a4:	0000dffd 	.word	0x0000dffd
    e1a8:	0000e0ad 	.word	0x0000e0ad

0000e1ac <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    e1ac:	b590      	push	{r4, r7, lr}
    e1ae:	b085      	sub	sp, #20
    e1b0:	af00      	add	r7, sp, #0
    e1b2:	4603      	mov	r3, r0
    e1b4:	6039      	str	r1, [r7, #0]
    e1b6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e1b8:	683b      	ldr	r3, [r7, #0]
    e1ba:	781b      	ldrb	r3, [r3, #0]
    e1bc:	f003 031f 	and.w	r3, r3, #31
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	db1b      	blt.n	e1fc <usbdc_get_status_req+0x50>
    e1c4:	2b01      	cmp	r3, #1
    e1c6:	dd02      	ble.n	e1ce <usbdc_get_status_req+0x22>
    e1c8:	2b02      	cmp	r3, #2
    e1ca:	d003      	beq.n	e1d4 <usbdc_get_status_req+0x28>
    e1cc:	e016      	b.n	e1fc <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e1ce:	2300      	movs	r3, #0
    e1d0:	60fb      	str	r3, [r7, #12]
		break;
    e1d2:	e015      	b.n	e200 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e1d4:	683b      	ldr	r3, [r7, #0]
    e1d6:	889b      	ldrh	r3, [r3, #4]
    e1d8:	b29b      	uxth	r3, r3
    e1da:	b2db      	uxtb	r3, r3
    e1dc:	2102      	movs	r1, #2
    e1de:	4618      	mov	r0, r3
    e1e0:	4b0f      	ldr	r3, [pc, #60]	; (e220 <usbdc_get_status_req+0x74>)
    e1e2:	4798      	blx	r3
    e1e4:	4603      	mov	r3, r0
    e1e6:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e1e8:	68fb      	ldr	r3, [r7, #12]
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	da01      	bge.n	e1f2 <usbdc_get_status_req+0x46>
			return false;
    e1ee:	2300      	movs	r3, #0
    e1f0:	e012      	b.n	e218 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e1f2:	68fb      	ldr	r3, [r7, #12]
    e1f4:	f003 0301 	and.w	r3, r3, #1
    e1f8:	60fb      	str	r3, [r7, #12]
		break;
    e1fa:	e001      	b.n	e200 <usbdc_get_status_req+0x54>
	default:
		return false;
    e1fc:	2300      	movs	r3, #0
    e1fe:	e00b      	b.n	e218 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e200:	4b08      	ldr	r3, [pc, #32]	; (e224 <usbdc_get_status_req+0x78>)
    e202:	695b      	ldr	r3, [r3, #20]
    e204:	89ba      	ldrh	r2, [r7, #12]
    e206:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e208:	4b06      	ldr	r3, [pc, #24]	; (e224 <usbdc_get_status_req+0x78>)
    e20a:	6959      	ldr	r1, [r3, #20]
    e20c:	79f8      	ldrb	r0, [r7, #7]
    e20e:	2300      	movs	r3, #0
    e210:	2202      	movs	r2, #2
    e212:	4c05      	ldr	r4, [pc, #20]	; (e228 <usbdc_get_status_req+0x7c>)
    e214:	47a0      	blx	r4
	return true;
    e216:	2301      	movs	r3, #1
}
    e218:	4618      	mov	r0, r3
    e21a:	3714      	adds	r7, #20
    e21c:	46bd      	mov	sp, r7
    e21e:	bd90      	pop	{r4, r7, pc}
    e220:	00004aed 	.word	0x00004aed
    e224:	20002794 	.word	0x20002794
    e228:	0000ea69 	.word	0x0000ea69

0000e22c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e22c:	b590      	push	{r4, r7, lr}
    e22e:	b085      	sub	sp, #20
    e230:	af00      	add	r7, sp, #0
    e232:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e234:	4b1f      	ldr	r3, [pc, #124]	; (e2b4 <usbdc_get_interface+0x88>)
    e236:	691b      	ldr	r3, [r3, #16]
    e238:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e23a:	4b1e      	ldr	r3, [pc, #120]	; (e2b4 <usbdc_get_interface+0x88>)
    e23c:	7f5b      	ldrb	r3, [r3, #29]
    e23e:	461a      	mov	r2, r3
    e240:	687b      	ldr	r3, [r7, #4]
    e242:	889b      	ldrh	r3, [r3, #4]
    e244:	b29b      	uxth	r3, r3
    e246:	fa42 f303 	asr.w	r3, r2, r3
    e24a:	f003 0301 	and.w	r3, r3, #1
    e24e:	2b00      	cmp	r3, #0
    e250:	d128      	bne.n	e2a4 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e252:	4b18      	ldr	r3, [pc, #96]	; (e2b4 <usbdc_get_interface+0x88>)
    e254:	695b      	ldr	r3, [r3, #20]
    e256:	2200      	movs	r2, #0
    e258:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e25a:	4b16      	ldr	r3, [pc, #88]	; (e2b4 <usbdc_get_interface+0x88>)
    e25c:	6959      	ldr	r1, [r3, #20]
    e25e:	2300      	movs	r3, #0
    e260:	2201      	movs	r2, #1
    e262:	2000      	movs	r0, #0
    e264:	4c14      	ldr	r4, [pc, #80]	; (e2b8 <usbdc_get_interface+0x8c>)
    e266:	47a0      	blx	r4
		return true;
    e268:	2301      	movs	r3, #1
    e26a:	e01f      	b.n	e2ac <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e26c:	68fb      	ldr	r3, [r7, #12]
    e26e:	685b      	ldr	r3, [r3, #4]
    e270:	687a      	ldr	r2, [r7, #4]
    e272:	2102      	movs	r1, #2
    e274:	68f8      	ldr	r0, [r7, #12]
    e276:	4798      	blx	r3
    e278:	60b8      	str	r0, [r7, #8]
    e27a:	68bb      	ldr	r3, [r7, #8]
    e27c:	2b00      	cmp	r3, #0
    e27e:	da03      	bge.n	e288 <usbdc_get_interface+0x5c>
			func = func->next;
    e280:	68fb      	ldr	r3, [r7, #12]
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	60fb      	str	r3, [r7, #12]
    e286:	e00d      	b.n	e2a4 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e288:	4b0a      	ldr	r3, [pc, #40]	; (e2b4 <usbdc_get_interface+0x88>)
    e28a:	695b      	ldr	r3, [r3, #20]
    e28c:	68ba      	ldr	r2, [r7, #8]
    e28e:	b2d2      	uxtb	r2, r2
    e290:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e292:	4b08      	ldr	r3, [pc, #32]	; (e2b4 <usbdc_get_interface+0x88>)
    e294:	6959      	ldr	r1, [r3, #20]
    e296:	2300      	movs	r3, #0
    e298:	2201      	movs	r2, #1
    e29a:	2000      	movs	r0, #0
    e29c:	4c06      	ldr	r4, [pc, #24]	; (e2b8 <usbdc_get_interface+0x8c>)
    e29e:	47a0      	blx	r4
			return true;
    e2a0:	2301      	movs	r3, #1
    e2a2:	e003      	b.n	e2ac <usbdc_get_interface+0x80>
	while (NULL != func) {
    e2a4:	68fb      	ldr	r3, [r7, #12]
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d1e0      	bne.n	e26c <usbdc_get_interface+0x40>
		}
	}
	return false;
    e2aa:	2300      	movs	r3, #0
}
    e2ac:	4618      	mov	r0, r3
    e2ae:	3714      	adds	r7, #20
    e2b0:	46bd      	mov	sp, r7
    e2b2:	bd90      	pop	{r4, r7, pc}
    e2b4:	20002794 	.word	0x20002794
    e2b8:	0000ea69 	.word	0x0000ea69

0000e2bc <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e2bc:	b590      	push	{r4, r7, lr}
    e2be:	b083      	sub	sp, #12
    e2c0:	af00      	add	r7, sp, #0
    e2c2:	4603      	mov	r3, r0
    e2c4:	6039      	str	r1, [r7, #0]
    e2c6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e2c8:	683b      	ldr	r3, [r7, #0]
    e2ca:	785b      	ldrb	r3, [r3, #1]
    e2cc:	2b0a      	cmp	r3, #10
    e2ce:	d83a      	bhi.n	e346 <usbdc_get_req+0x8a>
    e2d0:	a201      	add	r2, pc, #4	; (adr r2, e2d8 <usbdc_get_req+0x1c>)
    e2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e2d6:	bf00      	nop
    e2d8:	0000e32f 	.word	0x0000e32f
    e2dc:	0000e347 	.word	0x0000e347
    e2e0:	0000e347 	.word	0x0000e347
    e2e4:	0000e347 	.word	0x0000e347
    e2e8:	0000e347 	.word	0x0000e347
    e2ec:	0000e347 	.word	0x0000e347
    e2f0:	0000e305 	.word	0x0000e305
    e2f4:	0000e347 	.word	0x0000e347
    e2f8:	0000e313 	.word	0x0000e313
    e2fc:	0000e347 	.word	0x0000e347
    e300:	0000e33d 	.word	0x0000e33d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e304:	79fb      	ldrb	r3, [r7, #7]
    e306:	6839      	ldr	r1, [r7, #0]
    e308:	4618      	mov	r0, r3
    e30a:	4b11      	ldr	r3, [pc, #68]	; (e350 <usbdc_get_req+0x94>)
    e30c:	4798      	blx	r3
    e30e:	4603      	mov	r3, r0
    e310:	e01a      	b.n	e348 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e312:	4b10      	ldr	r3, [pc, #64]	; (e354 <usbdc_get_req+0x98>)
    e314:	695b      	ldr	r3, [r3, #20]
    e316:	4a0f      	ldr	r2, [pc, #60]	; (e354 <usbdc_get_req+0x98>)
    e318:	7ed2      	ldrb	r2, [r2, #27]
    e31a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e31c:	4b0d      	ldr	r3, [pc, #52]	; (e354 <usbdc_get_req+0x98>)
    e31e:	6959      	ldr	r1, [r3, #20]
    e320:	79f8      	ldrb	r0, [r7, #7]
    e322:	2300      	movs	r3, #0
    e324:	2201      	movs	r2, #1
    e326:	4c0c      	ldr	r4, [pc, #48]	; (e358 <usbdc_get_req+0x9c>)
    e328:	47a0      	blx	r4
		return true;
    e32a:	2301      	movs	r3, #1
    e32c:	e00c      	b.n	e348 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e32e:	79fb      	ldrb	r3, [r7, #7]
    e330:	6839      	ldr	r1, [r7, #0]
    e332:	4618      	mov	r0, r3
    e334:	4b09      	ldr	r3, [pc, #36]	; (e35c <usbdc_get_req+0xa0>)
    e336:	4798      	blx	r3
    e338:	4603      	mov	r3, r0
    e33a:	e005      	b.n	e348 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e33c:	6838      	ldr	r0, [r7, #0]
    e33e:	4b08      	ldr	r3, [pc, #32]	; (e360 <usbdc_get_req+0xa4>)
    e340:	4798      	blx	r3
    e342:	4603      	mov	r3, r0
    e344:	e000      	b.n	e348 <usbdc_get_req+0x8c>
	default:
		return false;
    e346:	2300      	movs	r3, #0
	}
}
    e348:	4618      	mov	r0, r3
    e34a:	370c      	adds	r7, #12
    e34c:	46bd      	mov	sp, r7
    e34e:	bd90      	pop	{r4, r7, pc}
    e350:	0000e145 	.word	0x0000e145
    e354:	20002794 	.word	0x20002794
    e358:	0000ea69 	.word	0x0000ea69
    e35c:	0000e1ad 	.word	0x0000e1ad
    e360:	0000e22d 	.word	0x0000e22d

0000e364 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e364:	b590      	push	{r4, r7, lr}
    e366:	b083      	sub	sp, #12
    e368:	af00      	add	r7, sp, #0
    e36a:	4603      	mov	r3, r0
    e36c:	6039      	str	r1, [r7, #0]
    e36e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e370:	683b      	ldr	r3, [r7, #0]
    e372:	781b      	ldrb	r3, [r3, #0]
    e374:	f003 031f 	and.w	r3, r3, #31
    e378:	2b02      	cmp	r3, #2
    e37a:	d116      	bne.n	e3aa <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e37c:	683b      	ldr	r3, [r7, #0]
    e37e:	88db      	ldrh	r3, [r3, #6]
    e380:	b29b      	uxth	r3, r3
    e382:	2b00      	cmp	r3, #0
    e384:	d001      	beq.n	e38a <usbdc_clear_ftr_req+0x26>
			return false;
    e386:	2300      	movs	r3, #0
    e388:	e010      	b.n	e3ac <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e38a:	683b      	ldr	r3, [r7, #0]
    e38c:	889b      	ldrh	r3, [r3, #4]
    e38e:	b29b      	uxth	r3, r3
    e390:	b2db      	uxtb	r3, r3
    e392:	2100      	movs	r1, #0
    e394:	4618      	mov	r0, r3
    e396:	4b07      	ldr	r3, [pc, #28]	; (e3b4 <usbdc_clear_ftr_req+0x50>)
    e398:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e39a:	79f8      	ldrb	r0, [r7, #7]
    e39c:	2301      	movs	r3, #1
    e39e:	2200      	movs	r2, #0
    e3a0:	2100      	movs	r1, #0
    e3a2:	4c05      	ldr	r4, [pc, #20]	; (e3b8 <usbdc_clear_ftr_req+0x54>)
    e3a4:	47a0      	blx	r4
		return true;
    e3a6:	2301      	movs	r3, #1
    e3a8:	e000      	b.n	e3ac <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e3aa:	2300      	movs	r3, #0
	}
}
    e3ac:	4618      	mov	r0, r3
    e3ae:	370c      	adds	r7, #12
    e3b0:	46bd      	mov	sp, r7
    e3b2:	bd90      	pop	{r4, r7, pc}
    e3b4:	00004aed 	.word	0x00004aed
    e3b8:	0000ea69 	.word	0x0000ea69

0000e3bc <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e3bc:	b590      	push	{r4, r7, lr}
    e3be:	b083      	sub	sp, #12
    e3c0:	af00      	add	r7, sp, #0
    e3c2:	4603      	mov	r3, r0
    e3c4:	6039      	str	r1, [r7, #0]
    e3c6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e3c8:	683b      	ldr	r3, [r7, #0]
    e3ca:	781b      	ldrb	r3, [r3, #0]
    e3cc:	f003 031f 	and.w	r3, r3, #31
    e3d0:	2b02      	cmp	r3, #2
    e3d2:	d116      	bne.n	e402 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e3d4:	683b      	ldr	r3, [r7, #0]
    e3d6:	88db      	ldrh	r3, [r3, #6]
    e3d8:	b29b      	uxth	r3, r3
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d001      	beq.n	e3e2 <usbdc_set_ftr_req+0x26>
			return false;
    e3de:	2300      	movs	r3, #0
    e3e0:	e010      	b.n	e404 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e3e2:	683b      	ldr	r3, [r7, #0]
    e3e4:	889b      	ldrh	r3, [r3, #4]
    e3e6:	b29b      	uxth	r3, r3
    e3e8:	b2db      	uxtb	r3, r3
    e3ea:	2101      	movs	r1, #1
    e3ec:	4618      	mov	r0, r3
    e3ee:	4b07      	ldr	r3, [pc, #28]	; (e40c <usbdc_set_ftr_req+0x50>)
    e3f0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e3f2:	79f8      	ldrb	r0, [r7, #7]
    e3f4:	2301      	movs	r3, #1
    e3f6:	2200      	movs	r2, #0
    e3f8:	2100      	movs	r1, #0
    e3fa:	4c05      	ldr	r4, [pc, #20]	; (e410 <usbdc_set_ftr_req+0x54>)
    e3fc:	47a0      	blx	r4
		return true;
    e3fe:	2301      	movs	r3, #1
    e400:	e000      	b.n	e404 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e402:	2300      	movs	r3, #0
	}
}
    e404:	4618      	mov	r0, r3
    e406:	370c      	adds	r7, #12
    e408:	46bd      	mov	sp, r7
    e40a:	bd90      	pop	{r4, r7, pc}
    e40c:	00004aed 	.word	0x00004aed
    e410:	0000ea69 	.word	0x0000ea69

0000e414 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e414:	b580      	push	{r7, lr}
    e416:	b082      	sub	sp, #8
    e418:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e41a:	4b0a      	ldr	r3, [pc, #40]	; (e444 <usbdc_unconfig+0x30>)
    e41c:	691b      	ldr	r3, [r3, #16]
    e41e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e420:	e008      	b.n	e434 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e422:	687b      	ldr	r3, [r7, #4]
    e424:	685b      	ldr	r3, [r3, #4]
    e426:	2200      	movs	r2, #0
    e428:	2101      	movs	r1, #1
    e42a:	6878      	ldr	r0, [r7, #4]
    e42c:	4798      	blx	r3
		func = func->next;
    e42e:	687b      	ldr	r3, [r7, #4]
    e430:	681b      	ldr	r3, [r3, #0]
    e432:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e434:	687b      	ldr	r3, [r7, #4]
    e436:	2b00      	cmp	r3, #0
    e438:	d1f3      	bne.n	e422 <usbdc_unconfig+0xe>
	}
}
    e43a:	bf00      	nop
    e43c:	3708      	adds	r7, #8
    e43e:	46bd      	mov	sp, r7
    e440:	bd80      	pop	{r7, pc}
    e442:	bf00      	nop
    e444:	20002794 	.word	0x20002794

0000e448 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    e448:	b580      	push	{r7, lr}
    e44a:	b088      	sub	sp, #32
    e44c:	af00      	add	r7, sp, #0
    e44e:	4603      	mov	r3, r0
    e450:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    e452:	2300      	movs	r3, #0
    e454:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    e456:	23ff      	movs	r3, #255	; 0xff
    e458:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    e45a:	79fb      	ldrb	r3, [r7, #7]
    e45c:	2b00      	cmp	r3, #0
    e45e:	d103      	bne.n	e468 <usbdc_set_config+0x20>
		usbdc_unconfig();
    e460:	4b2e      	ldr	r3, [pc, #184]	; (e51c <usbdc_set_config+0xd4>)
    e462:	4798      	blx	r3
		return true;
    e464:	2301      	movs	r3, #1
    e466:	e055      	b.n	e514 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e468:	69bb      	ldr	r3, [r7, #24]
    e46a:	2b00      	cmp	r3, #0
    e46c:	d10a      	bne.n	e484 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    e46e:	4b2c      	ldr	r3, [pc, #176]	; (e520 <usbdc_set_config+0xd8>)
    e470:	681b      	ldr	r3, [r3, #0]
    e472:	6818      	ldr	r0, [r3, #0]
    e474:	4b2a      	ldr	r3, [pc, #168]	; (e520 <usbdc_set_config+0xd8>)
    e476:	681b      	ldr	r3, [r3, #0]
    e478:	685b      	ldr	r3, [r3, #4]
    e47a:	79fa      	ldrb	r2, [r7, #7]
    e47c:	4619      	mov	r1, r3
    e47e:	4b29      	ldr	r3, [pc, #164]	; (e524 <usbdc_set_config+0xdc>)
    e480:	4798      	blx	r3
    e482:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    e484:	69bb      	ldr	r3, [r7, #24]
    e486:	2b00      	cmp	r3, #0
    e488:	d101      	bne.n	e48e <usbdc_set_config+0x46>
		return false;
    e48a:	2300      	movs	r3, #0
    e48c:	e042      	b.n	e514 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    e48e:	69b8      	ldr	r0, [r7, #24]
    e490:	4b25      	ldr	r3, [pc, #148]	; (e528 <usbdc_set_config+0xe0>)
    e492:	4798      	blx	r3
    e494:	4603      	mov	r3, r0
    e496:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    e498:	8abb      	ldrh	r3, [r7, #20]
    e49a:	69ba      	ldr	r2, [r7, #24]
    e49c:	4413      	add	r3, r2
    e49e:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    e4a0:	693b      	ldr	r3, [r7, #16]
    e4a2:	2204      	movs	r2, #4
    e4a4:	4619      	mov	r1, r3
    e4a6:	69b8      	ldr	r0, [r7, #24]
    e4a8:	4b20      	ldr	r3, [pc, #128]	; (e52c <usbdc_set_config+0xe4>)
    e4aa:	4798      	blx	r3
    e4ac:	4603      	mov	r3, r0
    e4ae:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e4b0:	e02c      	b.n	e50c <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e4b2:	68fb      	ldr	r3, [r7, #12]
    e4b4:	3302      	adds	r3, #2
    e4b6:	781b      	ldrb	r3, [r3, #0]
    e4b8:	7dfa      	ldrb	r2, [r7, #23]
    e4ba:	429a      	cmp	r2, r3
    e4bc:	d018      	beq.n	e4f0 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e4be:	68fb      	ldr	r3, [r7, #12]
    e4c0:	789b      	ldrb	r3, [r3, #2]
    e4c2:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e4c4:	4b16      	ldr	r3, [pc, #88]	; (e520 <usbdc_set_config+0xd8>)
    e4c6:	691b      	ldr	r3, [r3, #16]
    e4c8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e4ca:	e00c      	b.n	e4e6 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e4cc:	69fb      	ldr	r3, [r7, #28]
    e4ce:	685b      	ldr	r3, [r3, #4]
    e4d0:	f107 020c 	add.w	r2, r7, #12
    e4d4:	2100      	movs	r1, #0
    e4d6:	69f8      	ldr	r0, [r7, #28]
    e4d8:	4798      	blx	r3
    e4da:	4603      	mov	r3, r0
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d006      	beq.n	e4ee <usbdc_set_config+0xa6>
					func = func->next;
    e4e0:	69fb      	ldr	r3, [r7, #28]
    e4e2:	681b      	ldr	r3, [r3, #0]
    e4e4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e4e6:	69fb      	ldr	r3, [r7, #28]
    e4e8:	2b00      	cmp	r3, #0
    e4ea:	d1ef      	bne.n	e4cc <usbdc_set_config+0x84>
    e4ec:	e000      	b.n	e4f0 <usbdc_set_config+0xa8>
				} else {
					break;
    e4ee:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e4f0:	68fb      	ldr	r3, [r7, #12]
    e4f2:	4618      	mov	r0, r3
    e4f4:	4b0e      	ldr	r3, [pc, #56]	; (e530 <usbdc_set_config+0xe8>)
    e4f6:	4798      	blx	r3
    e4f8:	4603      	mov	r3, r0
    e4fa:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e4fc:	68fb      	ldr	r3, [r7, #12]
    e4fe:	6939      	ldr	r1, [r7, #16]
    e500:	2204      	movs	r2, #4
    e502:	4618      	mov	r0, r3
    e504:	4b09      	ldr	r3, [pc, #36]	; (e52c <usbdc_set_config+0xe4>)
    e506:	4798      	blx	r3
    e508:	4603      	mov	r3, r0
    e50a:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e50c:	68fb      	ldr	r3, [r7, #12]
    e50e:	2b00      	cmp	r3, #0
    e510:	d1cf      	bne.n	e4b2 <usbdc_set_config+0x6a>
	}
	return true;
    e512:	2301      	movs	r3, #1
}
    e514:	4618      	mov	r0, r3
    e516:	3720      	adds	r7, #32
    e518:	46bd      	mov	sp, r7
    e51a:	bd80      	pop	{r7, pc}
    e51c:	0000e415 	.word	0x0000e415
    e520:	20002794 	.word	0x20002794
    e524:	0000edb9 	.word	0x0000edb9
    e528:	0000df65 	.word	0x0000df65
    e52c:	0000ecf9 	.word	0x0000ecf9
    e530:	0000df41 	.word	0x0000df41

0000e534 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e534:	b580      	push	{r7, lr}
    e536:	b082      	sub	sp, #8
    e538:	af00      	add	r7, sp, #0
    e53a:	4603      	mov	r3, r0
    e53c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e53e:	79fb      	ldrb	r3, [r7, #7]
    e540:	4618      	mov	r0, r3
    e542:	4b03      	ldr	r3, [pc, #12]	; (e550 <usbdc_set_address+0x1c>)
    e544:	4798      	blx	r3
}
    e546:	bf00      	nop
    e548:	3708      	adds	r7, #8
    e54a:	46bd      	mov	sp, r7
    e54c:	bd80      	pop	{r7, pc}
    e54e:	bf00      	nop
    e550:	00004709 	.word	0x00004709

0000e554 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e554:	b590      	push	{r4, r7, lr}
    e556:	b087      	sub	sp, #28
    e558:	af00      	add	r7, sp, #0
    e55a:	4603      	mov	r3, r0
    e55c:	460a      	mov	r2, r1
    e55e:	80fb      	strh	r3, [r7, #6]
    e560:	4613      	mov	r3, r2
    e562:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e564:	2300      	movs	r3, #0
    e566:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e568:	693b      	ldr	r3, [r7, #16]
    e56a:	2b00      	cmp	r3, #0
    e56c:	d10b      	bne.n	e586 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e56e:	4b43      	ldr	r3, [pc, #268]	; (e67c <usbdc_set_interface+0x128>)
    e570:	681b      	ldr	r3, [r3, #0]
    e572:	6818      	ldr	r0, [r3, #0]
    e574:	4b41      	ldr	r3, [pc, #260]	; (e67c <usbdc_set_interface+0x128>)
    e576:	681b      	ldr	r3, [r3, #0]
    e578:	6859      	ldr	r1, [r3, #4]
    e57a:	4b40      	ldr	r3, [pc, #256]	; (e67c <usbdc_set_interface+0x128>)
    e57c:	7edb      	ldrb	r3, [r3, #27]
    e57e:	461a      	mov	r2, r3
    e580:	4b3f      	ldr	r3, [pc, #252]	; (e680 <usbdc_set_interface+0x12c>)
    e582:	4798      	blx	r3
    e584:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e586:	693b      	ldr	r3, [r7, #16]
    e588:	2b00      	cmp	r3, #0
    e58a:	d101      	bne.n	e590 <usbdc_set_interface+0x3c>
		return false;
    e58c:	2300      	movs	r3, #0
    e58e:	e071      	b.n	e674 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e590:	693b      	ldr	r3, [r7, #16]
    e592:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e594:	6938      	ldr	r0, [r7, #16]
    e596:	4b3b      	ldr	r3, [pc, #236]	; (e684 <usbdc_set_interface+0x130>)
    e598:	4798      	blx	r3
    e59a:	4603      	mov	r3, r0
    e59c:	461a      	mov	r2, r3
    e59e:	693b      	ldr	r3, [r7, #16]
    e5a0:	4413      	add	r3, r2
    e5a2:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e5a4:	68bb      	ldr	r3, [r7, #8]
    e5a6:	68f9      	ldr	r1, [r7, #12]
    e5a8:	2204      	movs	r2, #4
    e5aa:	4618      	mov	r0, r3
    e5ac:	4b36      	ldr	r3, [pc, #216]	; (e688 <usbdc_set_interface+0x134>)
    e5ae:	4798      	blx	r3
    e5b0:	6138      	str	r0, [r7, #16]
    e5b2:	693b      	ldr	r3, [r7, #16]
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d113      	bne.n	e5e0 <usbdc_set_interface+0x8c>
		return false;
    e5b8:	2300      	movs	r3, #0
    e5ba:	e05b      	b.n	e674 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e5bc:	68bb      	ldr	r3, [r7, #8]
    e5be:	4618      	mov	r0, r3
    e5c0:	4b32      	ldr	r3, [pc, #200]	; (e68c <usbdc_set_interface+0x138>)
    e5c2:	4798      	blx	r3
    e5c4:	4603      	mov	r3, r0
    e5c6:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e5c8:	68bb      	ldr	r3, [r7, #8]
    e5ca:	68f9      	ldr	r1, [r7, #12]
    e5cc:	2204      	movs	r2, #4
    e5ce:	4618      	mov	r0, r3
    e5d0:	4b2d      	ldr	r3, [pc, #180]	; (e688 <usbdc_set_interface+0x134>)
    e5d2:	4798      	blx	r3
    e5d4:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e5d6:	693b      	ldr	r3, [r7, #16]
    e5d8:	2b00      	cmp	r3, #0
    e5da:	d101      	bne.n	e5e0 <usbdc_set_interface+0x8c>
			return false;
    e5dc:	2300      	movs	r3, #0
    e5de:	e049      	b.n	e674 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e5e0:	693b      	ldr	r3, [r7, #16]
    e5e2:	3302      	adds	r3, #2
    e5e4:	781b      	ldrb	r3, [r3, #0]
    e5e6:	b29b      	uxth	r3, r3
    e5e8:	88ba      	ldrh	r2, [r7, #4]
    e5ea:	429a      	cmp	r2, r3
    e5ec:	d1e6      	bne.n	e5bc <usbdc_set_interface+0x68>
    e5ee:	693b      	ldr	r3, [r7, #16]
    e5f0:	3303      	adds	r3, #3
    e5f2:	781b      	ldrb	r3, [r3, #0]
    e5f4:	b29b      	uxth	r3, r3
    e5f6:	88fa      	ldrh	r2, [r7, #6]
    e5f8:	429a      	cmp	r2, r3
    e5fa:	d1df      	bne.n	e5bc <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e5fc:	693b      	ldr	r3, [r7, #16]
    e5fe:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e600:	4b1e      	ldr	r3, [pc, #120]	; (e67c <usbdc_set_interface+0x128>)
    e602:	691b      	ldr	r3, [r3, #16]
    e604:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e606:	e031      	b.n	e66c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e608:	697b      	ldr	r3, [r7, #20]
    e60a:	685b      	ldr	r3, [r3, #4]
    e60c:	f107 0208 	add.w	r2, r7, #8
    e610:	2101      	movs	r1, #1
    e612:	6978      	ldr	r0, [r7, #20]
    e614:	4798      	blx	r3
    e616:	4603      	mov	r3, r0
    e618:	2b00      	cmp	r3, #0
    e61a:	d003      	beq.n	e624 <usbdc_set_interface+0xd0>
			func = func->next;
    e61c:	697b      	ldr	r3, [r7, #20]
    e61e:	681b      	ldr	r3, [r3, #0]
    e620:	617b      	str	r3, [r7, #20]
    e622:	e023      	b.n	e66c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e624:	697b      	ldr	r3, [r7, #20]
    e626:	685b      	ldr	r3, [r3, #4]
    e628:	f107 0208 	add.w	r2, r7, #8
    e62c:	2100      	movs	r1, #0
    e62e:	6978      	ldr	r0, [r7, #20]
    e630:	4798      	blx	r3
    e632:	4603      	mov	r3, r0
    e634:	2b00      	cmp	r3, #0
    e636:	d117      	bne.n	e668 <usbdc_set_interface+0x114>
			if (alt_set) {
    e638:	88fb      	ldrh	r3, [r7, #6]
    e63a:	2b00      	cmp	r3, #0
    e63c:	d00c      	beq.n	e658 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e63e:	4b0f      	ldr	r3, [pc, #60]	; (e67c <usbdc_set_interface+0x128>)
    e640:	7f5b      	ldrb	r3, [r3, #29]
    e642:	b25a      	sxtb	r2, r3
    e644:	88bb      	ldrh	r3, [r7, #4]
    e646:	2101      	movs	r1, #1
    e648:	fa01 f303 	lsl.w	r3, r1, r3
    e64c:	b25b      	sxtb	r3, r3
    e64e:	4313      	orrs	r3, r2
    e650:	b25b      	sxtb	r3, r3
    e652:	b2da      	uxtb	r2, r3
    e654:	4b09      	ldr	r3, [pc, #36]	; (e67c <usbdc_set_interface+0x128>)
    e656:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e658:	2300      	movs	r3, #0
    e65a:	2200      	movs	r2, #0
    e65c:	2100      	movs	r1, #0
    e65e:	2000      	movs	r0, #0
    e660:	4c0b      	ldr	r4, [pc, #44]	; (e690 <usbdc_set_interface+0x13c>)
    e662:	47a0      	blx	r4
			return true;
    e664:	2301      	movs	r3, #1
    e666:	e005      	b.n	e674 <usbdc_set_interface+0x120>
		} else {
			return false;
    e668:	2300      	movs	r3, #0
    e66a:	e003      	b.n	e674 <usbdc_set_interface+0x120>
	while (NULL != func) {
    e66c:	697b      	ldr	r3, [r7, #20]
    e66e:	2b00      	cmp	r3, #0
    e670:	d1ca      	bne.n	e608 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e672:	2300      	movs	r3, #0
}
    e674:	4618      	mov	r0, r3
    e676:	371c      	adds	r7, #28
    e678:	46bd      	mov	sp, r7
    e67a:	bd90      	pop	{r4, r7, pc}
    e67c:	20002794 	.word	0x20002794
    e680:	0000edb9 	.word	0x0000edb9
    e684:	0000df65 	.word	0x0000df65
    e688:	0000ecf9 	.word	0x0000ecf9
    e68c:	0000df41 	.word	0x0000df41
    e690:	0000ea69 	.word	0x0000ea69

0000e694 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e694:	b590      	push	{r4, r7, lr}
    e696:	b083      	sub	sp, #12
    e698:	af00      	add	r7, sp, #0
    e69a:	4603      	mov	r3, r0
    e69c:	6039      	str	r1, [r7, #0]
    e69e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e6a0:	683b      	ldr	r3, [r7, #0]
    e6a2:	785b      	ldrb	r3, [r3, #1]
    e6a4:	3b01      	subs	r3, #1
    e6a6:	2b0a      	cmp	r3, #10
    e6a8:	d85b      	bhi.n	e762 <usbdc_set_req+0xce>
    e6aa:	a201      	add	r2, pc, #4	; (adr r2, e6b0 <usbdc_set_req+0x1c>)
    e6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e6b0:	0000e72f 	.word	0x0000e72f
    e6b4:	0000e763 	.word	0x0000e763
    e6b8:	0000e73d 	.word	0x0000e73d
    e6bc:	0000e763 	.word	0x0000e763
    e6c0:	0000e6dd 	.word	0x0000e6dd
    e6c4:	0000e763 	.word	0x0000e763
    e6c8:	0000e763 	.word	0x0000e763
    e6cc:	0000e763 	.word	0x0000e763
    e6d0:	0000e6f7 	.word	0x0000e6f7
    e6d4:	0000e763 	.word	0x0000e763
    e6d8:	0000e74b 	.word	0x0000e74b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e6dc:	79f8      	ldrb	r0, [r7, #7]
    e6de:	2301      	movs	r3, #1
    e6e0:	2200      	movs	r2, #0
    e6e2:	2100      	movs	r1, #0
    e6e4:	4c21      	ldr	r4, [pc, #132]	; (e76c <usbdc_set_req+0xd8>)
    e6e6:	47a0      	blx	r4
    e6e8:	4603      	mov	r3, r0
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	bf0c      	ite	eq
    e6ee:	2301      	moveq	r3, #1
    e6f0:	2300      	movne	r3, #0
    e6f2:	b2db      	uxtb	r3, r3
    e6f4:	e036      	b.n	e764 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e6f6:	683b      	ldr	r3, [r7, #0]
    e6f8:	885b      	ldrh	r3, [r3, #2]
    e6fa:	b29b      	uxth	r3, r3
    e6fc:	b2db      	uxtb	r3, r3
    e6fe:	4618      	mov	r0, r3
    e700:	4b1b      	ldr	r3, [pc, #108]	; (e770 <usbdc_set_req+0xdc>)
    e702:	4798      	blx	r3
    e704:	4603      	mov	r3, r0
    e706:	f083 0301 	eor.w	r3, r3, #1
    e70a:	b2db      	uxtb	r3, r3
    e70c:	2b00      	cmp	r3, #0
    e70e:	d001      	beq.n	e714 <usbdc_set_req+0x80>
			return false;
    e710:	2300      	movs	r3, #0
    e712:	e027      	b.n	e764 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e714:	79f8      	ldrb	r0, [r7, #7]
    e716:	2301      	movs	r3, #1
    e718:	2200      	movs	r2, #0
    e71a:	2100      	movs	r1, #0
    e71c:	4c13      	ldr	r4, [pc, #76]	; (e76c <usbdc_set_req+0xd8>)
    e71e:	47a0      	blx	r4
    e720:	4603      	mov	r3, r0
    e722:	2b00      	cmp	r3, #0
    e724:	bf0c      	ite	eq
    e726:	2301      	moveq	r3, #1
    e728:	2300      	movne	r3, #0
    e72a:	b2db      	uxtb	r3, r3
    e72c:	e01a      	b.n	e764 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e72e:	79fb      	ldrb	r3, [r7, #7]
    e730:	6839      	ldr	r1, [r7, #0]
    e732:	4618      	mov	r0, r3
    e734:	4b0f      	ldr	r3, [pc, #60]	; (e774 <usbdc_set_req+0xe0>)
    e736:	4798      	blx	r3
    e738:	4603      	mov	r3, r0
    e73a:	e013      	b.n	e764 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e73c:	79fb      	ldrb	r3, [r7, #7]
    e73e:	6839      	ldr	r1, [r7, #0]
    e740:	4618      	mov	r0, r3
    e742:	4b0d      	ldr	r3, [pc, #52]	; (e778 <usbdc_set_req+0xe4>)
    e744:	4798      	blx	r3
    e746:	4603      	mov	r3, r0
    e748:	e00c      	b.n	e764 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e74a:	683b      	ldr	r3, [r7, #0]
    e74c:	885b      	ldrh	r3, [r3, #2]
    e74e:	b29a      	uxth	r2, r3
    e750:	683b      	ldr	r3, [r7, #0]
    e752:	889b      	ldrh	r3, [r3, #4]
    e754:	b29b      	uxth	r3, r3
    e756:	4619      	mov	r1, r3
    e758:	4610      	mov	r0, r2
    e75a:	4b08      	ldr	r3, [pc, #32]	; (e77c <usbdc_set_req+0xe8>)
    e75c:	4798      	blx	r3
    e75e:	4603      	mov	r3, r0
    e760:	e000      	b.n	e764 <usbdc_set_req+0xd0>
	default:
		return false;
    e762:	2300      	movs	r3, #0
	}
}
    e764:	4618      	mov	r0, r3
    e766:	370c      	adds	r7, #12
    e768:	46bd      	mov	sp, r7
    e76a:	bd90      	pop	{r4, r7, pc}
    e76c:	0000ea69 	.word	0x0000ea69
    e770:	0000e449 	.word	0x0000e449
    e774:	0000e365 	.word	0x0000e365
    e778:	0000e3bd 	.word	0x0000e3bd
    e77c:	0000e555 	.word	0x0000e555

0000e780 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e780:	b580      	push	{r7, lr}
    e782:	b082      	sub	sp, #8
    e784:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e786:	4b0a      	ldr	r3, [pc, #40]	; (e7b0 <usbdc_sof_notify+0x30>)
    e788:	685b      	ldr	r3, [r3, #4]
    e78a:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e78c:	e009      	b.n	e7a2 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e78e:	687b      	ldr	r3, [r7, #4]
    e790:	685b      	ldr	r3, [r3, #4]
    e792:	2b00      	cmp	r3, #0
    e794:	d002      	beq.n	e79c <usbdc_sof_notify+0x1c>
			sof->cb();
    e796:	687b      	ldr	r3, [r7, #4]
    e798:	685b      	ldr	r3, [r3, #4]
    e79a:	4798      	blx	r3
		}
		sof = sof->next;
    e79c:	687b      	ldr	r3, [r7, #4]
    e79e:	681b      	ldr	r3, [r3, #0]
    e7a0:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e7a2:	687b      	ldr	r3, [r7, #4]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d1f2      	bne.n	e78e <usbdc_sof_notify+0xe>
	}
}
    e7a8:	bf00      	nop
    e7aa:	3708      	adds	r7, #8
    e7ac:	46bd      	mov	sp, r7
    e7ae:	bd80      	pop	{r7, pc}
    e7b0:	20002794 	.word	0x20002794

0000e7b4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e7b4:	b580      	push	{r7, lr}
    e7b6:	b084      	sub	sp, #16
    e7b8:	af00      	add	r7, sp, #0
    e7ba:	4603      	mov	r3, r0
    e7bc:	6039      	str	r1, [r7, #0]
    e7be:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e7c0:	4b0b      	ldr	r3, [pc, #44]	; (e7f0 <usbdc_change_notify+0x3c>)
    e7c2:	68db      	ldr	r3, [r3, #12]
    e7c4:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e7c6:	e00c      	b.n	e7e2 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e7c8:	68fb      	ldr	r3, [r7, #12]
    e7ca:	685b      	ldr	r3, [r3, #4]
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d005      	beq.n	e7dc <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e7d0:	68fb      	ldr	r3, [r7, #12]
    e7d2:	685b      	ldr	r3, [r3, #4]
    e7d4:	79fa      	ldrb	r2, [r7, #7]
    e7d6:	6839      	ldr	r1, [r7, #0]
    e7d8:	4610      	mov	r0, r2
    e7da:	4798      	blx	r3
		}
		cg = cg->next;
    e7dc:	68fb      	ldr	r3, [r7, #12]
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e7e2:	68fb      	ldr	r3, [r7, #12]
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	d1ef      	bne.n	e7c8 <usbdc_change_notify+0x14>
	}
}
    e7e8:	bf00      	nop
    e7ea:	3710      	adds	r7, #16
    e7ec:	46bd      	mov	sp, r7
    e7ee:	bd80      	pop	{r7, pc}
    e7f0:	20002794 	.word	0x20002794

0000e7f4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e7f4:	b580      	push	{r7, lr}
    e7f6:	b084      	sub	sp, #16
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	4603      	mov	r3, r0
    e7fc:	6039      	str	r1, [r7, #0]
    e7fe:	71fb      	strb	r3, [r7, #7]
    e800:	4613      	mov	r3, r2
    e802:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e804:	4b12      	ldr	r3, [pc, #72]	; (e850 <usbdc_request_handler+0x5c>)
    e806:	689b      	ldr	r3, [r3, #8]
    e808:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e80a:	e019      	b.n	e840 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e80c:	68fb      	ldr	r3, [r7, #12]
    e80e:	685b      	ldr	r3, [r3, #4]
    e810:	2b00      	cmp	r3, #0
    e812:	d012      	beq.n	e83a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e814:	68fb      	ldr	r3, [r7, #12]
    e816:	685b      	ldr	r3, [r3, #4]
    e818:	79ba      	ldrb	r2, [r7, #6]
    e81a:	79f8      	ldrb	r0, [r7, #7]
    e81c:	6839      	ldr	r1, [r7, #0]
    e81e:	4798      	blx	r3
    e820:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e822:	68bb      	ldr	r3, [r7, #8]
    e824:	2b00      	cmp	r3, #0
    e826:	d101      	bne.n	e82c <usbdc_request_handler+0x38>
				return true;
    e828:	2301      	movs	r3, #1
    e82a:	e00d      	b.n	e848 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e82c:	68bb      	ldr	r3, [r7, #8]
    e82e:	f113 0f0a 	cmn.w	r3, #10
    e832:	d002      	beq.n	e83a <usbdc_request_handler+0x46>
				return -1;
    e834:	f04f 33ff 	mov.w	r3, #4294967295
    e838:	e006      	b.n	e848 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e83a:	68fb      	ldr	r3, [r7, #12]
    e83c:	681b      	ldr	r3, [r3, #0]
    e83e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e840:	68fb      	ldr	r3, [r7, #12]
    e842:	2b00      	cmp	r3, #0
    e844:	d1e2      	bne.n	e80c <usbdc_request_handler+0x18>
	}
	return false;
    e846:	2300      	movs	r3, #0
}
    e848:	4618      	mov	r0, r3
    e84a:	3710      	adds	r7, #16
    e84c:	46bd      	mov	sp, r7
    e84e:	bd80      	pop	{r7, pc}
    e850:	20002794 	.word	0x20002794

0000e854 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e854:	b580      	push	{r7, lr}
    e856:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e858:	4b01      	ldr	r3, [pc, #4]	; (e860 <usbd_sof_cb+0xc>)
    e85a:	4798      	blx	r3
}
    e85c:	bf00      	nop
    e85e:	bd80      	pop	{r7, pc}
    e860:	0000e781 	.word	0x0000e781

0000e864 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e864:	b580      	push	{r7, lr}
    e866:	b082      	sub	sp, #8
    e868:	af00      	add	r7, sp, #0
    e86a:	4603      	mov	r3, r0
    e86c:	6039      	str	r1, [r7, #0]
    e86e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e870:	79fb      	ldrb	r3, [r7, #7]
    e872:	2200      	movs	r2, #0
    e874:	6839      	ldr	r1, [r7, #0]
    e876:	4618      	mov	r0, r3
    e878:	4b14      	ldr	r3, [pc, #80]	; (e8cc <usbdc_cb_ctl_req+0x68>)
    e87a:	4798      	blx	r3
    e87c:	4603      	mov	r3, r0
    e87e:	f1b3 3fff 	cmp.w	r3, #4294967295
    e882:	d00b      	beq.n	e89c <usbdc_cb_ctl_req+0x38>
    e884:	2b01      	cmp	r3, #1
    e886:	d007      	beq.n	e898 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e888:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e88a:	683b      	ldr	r3, [r7, #0]
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e892:	2b00      	cmp	r3, #0
    e894:	d007      	beq.n	e8a6 <usbdc_cb_ctl_req+0x42>
    e896:	e003      	b.n	e8a0 <usbdc_cb_ctl_req+0x3c>
		return true;
    e898:	2301      	movs	r3, #1
    e89a:	e013      	b.n	e8c4 <usbdc_cb_ctl_req+0x60>
		return false;
    e89c:	2300      	movs	r3, #0
    e89e:	e011      	b.n	e8c4 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e8a0:	2b80      	cmp	r3, #128	; 0x80
    e8a2:	d007      	beq.n	e8b4 <usbdc_cb_ctl_req+0x50>
    e8a4:	e00d      	b.n	e8c2 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e8a6:	79fb      	ldrb	r3, [r7, #7]
    e8a8:	6839      	ldr	r1, [r7, #0]
    e8aa:	4618      	mov	r0, r3
    e8ac:	4b08      	ldr	r3, [pc, #32]	; (e8d0 <usbdc_cb_ctl_req+0x6c>)
    e8ae:	4798      	blx	r3
    e8b0:	4603      	mov	r3, r0
    e8b2:	e007      	b.n	e8c4 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e8b4:	79fb      	ldrb	r3, [r7, #7]
    e8b6:	6839      	ldr	r1, [r7, #0]
    e8b8:	4618      	mov	r0, r3
    e8ba:	4b06      	ldr	r3, [pc, #24]	; (e8d4 <usbdc_cb_ctl_req+0x70>)
    e8bc:	4798      	blx	r3
    e8be:	4603      	mov	r3, r0
    e8c0:	e000      	b.n	e8c4 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    e8c2:	2300      	movs	r3, #0
	}
}
    e8c4:	4618      	mov	r0, r3
    e8c6:	3708      	adds	r7, #8
    e8c8:	46bd      	mov	sp, r7
    e8ca:	bd80      	pop	{r7, pc}
    e8cc:	0000e7f5 	.word	0x0000e7f5
    e8d0:	0000e695 	.word	0x0000e695
    e8d4:	0000e2bd 	.word	0x0000e2bd

0000e8d8 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    e8d8:	b580      	push	{r7, lr}
    e8da:	b082      	sub	sp, #8
    e8dc:	af00      	add	r7, sp, #0
    e8de:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	781b      	ldrb	r3, [r3, #0]
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d135      	bne.n	e954 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    e8e8:	687b      	ldr	r3, [r7, #4]
    e8ea:	785b      	ldrb	r3, [r3, #1]
    e8ec:	2b05      	cmp	r3, #5
    e8ee:	d019      	beq.n	e924 <usbdc_ctrl_status_end+0x4c>
    e8f0:	2b09      	cmp	r3, #9
    e8f2:	d000      	beq.n	e8f6 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    e8f4:	e02f      	b.n	e956 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    e8f6:	687b      	ldr	r3, [r7, #4]
    e8f8:	885b      	ldrh	r3, [r3, #2]
    e8fa:	b29b      	uxth	r3, r3
    e8fc:	b2da      	uxtb	r2, r3
    e8fe:	4b17      	ldr	r3, [pc, #92]	; (e95c <usbdc_ctrl_status_end+0x84>)
    e900:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    e902:	687b      	ldr	r3, [r7, #4]
    e904:	885b      	ldrh	r3, [r3, #2]
    e906:	b29b      	uxth	r3, r3
    e908:	2b00      	cmp	r3, #0
    e90a:	d001      	beq.n	e910 <usbdc_ctrl_status_end+0x38>
    e90c:	2204      	movs	r2, #4
    e90e:	e000      	b.n	e912 <usbdc_ctrl_status_end+0x3a>
    e910:	2203      	movs	r2, #3
    e912:	4b12      	ldr	r3, [pc, #72]	; (e95c <usbdc_ctrl_status_end+0x84>)
    e914:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e916:	4b11      	ldr	r3, [pc, #68]	; (e95c <usbdc_ctrl_status_end+0x84>)
    e918:	7e9b      	ldrb	r3, [r3, #26]
    e91a:	4619      	mov	r1, r3
    e91c:	2001      	movs	r0, #1
    e91e:	4b10      	ldr	r3, [pc, #64]	; (e960 <usbdc_ctrl_status_end+0x88>)
    e920:	4798      	blx	r3
		break;
    e922:	e018      	b.n	e956 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	885b      	ldrh	r3, [r3, #2]
    e928:	b29b      	uxth	r3, r3
    e92a:	b2db      	uxtb	r3, r3
    e92c:	4618      	mov	r0, r3
    e92e:	4b0d      	ldr	r3, [pc, #52]	; (e964 <usbdc_ctrl_status_end+0x8c>)
    e930:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    e932:	687b      	ldr	r3, [r7, #4]
    e934:	885b      	ldrh	r3, [r3, #2]
    e936:	b29b      	uxth	r3, r3
    e938:	2b00      	cmp	r3, #0
    e93a:	d001      	beq.n	e940 <usbdc_ctrl_status_end+0x68>
    e93c:	2203      	movs	r2, #3
    e93e:	e000      	b.n	e942 <usbdc_ctrl_status_end+0x6a>
    e940:	2202      	movs	r2, #2
    e942:	4b06      	ldr	r3, [pc, #24]	; (e95c <usbdc_ctrl_status_end+0x84>)
    e944:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e946:	4b05      	ldr	r3, [pc, #20]	; (e95c <usbdc_ctrl_status_end+0x84>)
    e948:	7e9b      	ldrb	r3, [r3, #26]
    e94a:	4619      	mov	r1, r3
    e94c:	2001      	movs	r0, #1
    e94e:	4b04      	ldr	r3, [pc, #16]	; (e960 <usbdc_ctrl_status_end+0x88>)
    e950:	4798      	blx	r3
		break;
    e952:	e000      	b.n	e956 <usbdc_ctrl_status_end+0x7e>
		return;
    e954:	bf00      	nop
	}
}
    e956:	3708      	adds	r7, #8
    e958:	46bd      	mov	sp, r7
    e95a:	bd80      	pop	{r7, pc}
    e95c:	20002794 	.word	0x20002794
    e960:	0000e7b5 	.word	0x0000e7b5
    e964:	0000e535 	.word	0x0000e535

0000e968 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    e968:	b580      	push	{r7, lr}
    e96a:	b082      	sub	sp, #8
    e96c:	af00      	add	r7, sp, #0
    e96e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    e970:	2201      	movs	r2, #1
    e972:	6879      	ldr	r1, [r7, #4]
    e974:	2000      	movs	r0, #0
    e976:	4b03      	ldr	r3, [pc, #12]	; (e984 <usbdc_ctrl_data_end+0x1c>)
    e978:	4798      	blx	r3
	return false;
    e97a:	2300      	movs	r3, #0
}
    e97c:	4618      	mov	r0, r3
    e97e:	3708      	adds	r7, #8
    e980:	46bd      	mov	sp, r7
    e982:	bd80      	pop	{r7, pc}
    e984:	0000e7f5 	.word	0x0000e7f5

0000e988 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    e988:	b580      	push	{r7, lr}
    e98a:	b082      	sub	sp, #8
    e98c:	af00      	add	r7, sp, #0
    e98e:	4603      	mov	r3, r0
    e990:	603a      	str	r2, [r7, #0]
    e992:	71fb      	strb	r3, [r7, #7]
    e994:	460b      	mov	r3, r1
    e996:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    e998:	79bb      	ldrb	r3, [r7, #6]
    e99a:	2b00      	cmp	r3, #0
    e99c:	d002      	beq.n	e9a4 <usbdc_cb_ctl_done+0x1c>
    e99e:	2b01      	cmp	r3, #1
    e9a0:	d004      	beq.n	e9ac <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    e9a2:	e008      	b.n	e9b6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    e9a4:	6838      	ldr	r0, [r7, #0]
    e9a6:	4b06      	ldr	r3, [pc, #24]	; (e9c0 <usbdc_cb_ctl_done+0x38>)
    e9a8:	4798      	blx	r3
		break;
    e9aa:	e004      	b.n	e9b6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    e9ac:	6838      	ldr	r0, [r7, #0]
    e9ae:	4b05      	ldr	r3, [pc, #20]	; (e9c4 <usbdc_cb_ctl_done+0x3c>)
    e9b0:	4798      	blx	r3
    e9b2:	4603      	mov	r3, r0
    e9b4:	e000      	b.n	e9b8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    e9b6:	2300      	movs	r3, #0
}
    e9b8:	4618      	mov	r0, r3
    e9ba:	3708      	adds	r7, #8
    e9bc:	46bd      	mov	sp, r7
    e9be:	bd80      	pop	{r7, pc}
    e9c0:	0000e8d9 	.word	0x0000e8d9
    e9c4:	0000e969 	.word	0x0000e969

0000e9c8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    e9c8:	b580      	push	{r7, lr}
    e9ca:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    e9cc:	4b10      	ldr	r3, [pc, #64]	; (ea10 <usbdc_reset+0x48>)
    e9ce:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    e9d0:	4b10      	ldr	r3, [pc, #64]	; (ea14 <usbdc_reset+0x4c>)
    e9d2:	2202      	movs	r2, #2
    e9d4:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    e9d6:	4b0f      	ldr	r3, [pc, #60]	; (ea14 <usbdc_reset+0x4c>)
    e9d8:	2200      	movs	r2, #0
    e9da:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    e9dc:	4b0d      	ldr	r3, [pc, #52]	; (ea14 <usbdc_reset+0x4c>)
    e9de:	2200      	movs	r2, #0
    e9e0:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    e9e2:	2000      	movs	r0, #0
    e9e4:	4b0c      	ldr	r3, [pc, #48]	; (ea18 <usbdc_reset+0x50>)
    e9e6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    e9e8:	4b0a      	ldr	r3, [pc, #40]	; (ea14 <usbdc_reset+0x4c>)
    e9ea:	7f1b      	ldrb	r3, [r3, #28]
    e9ec:	4618      	mov	r0, r3
    e9ee:	4b0b      	ldr	r3, [pc, #44]	; (ea1c <usbdc_reset+0x54>)
    e9f0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    e9f2:	4a0b      	ldr	r2, [pc, #44]	; (ea20 <usbdc_reset+0x58>)
    e9f4:	2100      	movs	r1, #0
    e9f6:	2000      	movs	r0, #0
    e9f8:	4b0a      	ldr	r3, [pc, #40]	; (ea24 <usbdc_reset+0x5c>)
    e9fa:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    e9fc:	4a0a      	ldr	r2, [pc, #40]	; (ea28 <usbdc_reset+0x60>)
    e9fe:	2102      	movs	r1, #2
    ea00:	2000      	movs	r0, #0
    ea02:	4b08      	ldr	r3, [pc, #32]	; (ea24 <usbdc_reset+0x5c>)
    ea04:	4798      	blx	r3
	usb_d_ep_enable(0);
    ea06:	2000      	movs	r0, #0
    ea08:	4b08      	ldr	r3, [pc, #32]	; (ea2c <usbdc_reset+0x64>)
    ea0a:	4798      	blx	r3
}
    ea0c:	bf00      	nop
    ea0e:	bd80      	pop	{r7, pc}
    ea10:	0000e415 	.word	0x0000e415
    ea14:	20002794 	.word	0x20002794
    ea18:	000047ed 	.word	0x000047ed
    ea1c:	00004729 	.word	0x00004729
    ea20:	0000e865 	.word	0x0000e865
    ea24:	00004b41 	.word	0x00004b41
    ea28:	0000e989 	.word	0x0000e989
    ea2c:	0000483d 	.word	0x0000483d

0000ea30 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ea30:	b580      	push	{r7, lr}
    ea32:	b082      	sub	sp, #8
    ea34:	af00      	add	r7, sp, #0
    ea36:	4603      	mov	r3, r0
    ea38:	6039      	str	r1, [r7, #0]
    ea3a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    ea3c:	79fb      	ldrb	r3, [r7, #7]
    ea3e:	2b00      	cmp	r3, #0
    ea40:	d002      	beq.n	ea48 <usbd_event_cb+0x18>
    ea42:	2b01      	cmp	r3, #1
    ea44:	d005      	beq.n	ea52 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    ea46:	e007      	b.n	ea58 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    ea48:	6839      	ldr	r1, [r7, #0]
    ea4a:	2000      	movs	r0, #0
    ea4c:	4b04      	ldr	r3, [pc, #16]	; (ea60 <usbd_event_cb+0x30>)
    ea4e:	4798      	blx	r3
		break;
    ea50:	e002      	b.n	ea58 <usbd_event_cb+0x28>
		usbdc_reset();
    ea52:	4b04      	ldr	r3, [pc, #16]	; (ea64 <usbd_event_cb+0x34>)
    ea54:	4798      	blx	r3
		break;
    ea56:	bf00      	nop
	}
}
    ea58:	bf00      	nop
    ea5a:	3708      	adds	r7, #8
    ea5c:	46bd      	mov	sp, r7
    ea5e:	bd80      	pop	{r7, pc}
    ea60:	0000e7b5 	.word	0x0000e7b5
    ea64:	0000e9c9 	.word	0x0000e9c9

0000ea68 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ea68:	b580      	push	{r7, lr}
    ea6a:	b088      	sub	sp, #32
    ea6c:	af00      	add	r7, sp, #0
    ea6e:	60b9      	str	r1, [r7, #8]
    ea70:	607a      	str	r2, [r7, #4]
    ea72:	461a      	mov	r2, r3
    ea74:	4603      	mov	r3, r0
    ea76:	73fb      	strb	r3, [r7, #15]
    ea78:	4613      	mov	r3, r2
    ea7a:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ea7c:	68bb      	ldr	r3, [r7, #8]
    ea7e:	617b      	str	r3, [r7, #20]
    ea80:	687b      	ldr	r3, [r7, #4]
    ea82:	61bb      	str	r3, [r7, #24]
    ea84:	7bfb      	ldrb	r3, [r7, #15]
    ea86:	773b      	strb	r3, [r7, #28]
    ea88:	7bbb      	ldrb	r3, [r7, #14]
    ea8a:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ea8c:	f107 0314 	add.w	r3, r7, #20
    ea90:	4618      	mov	r0, r3
    ea92:	4b03      	ldr	r3, [pc, #12]	; (eaa0 <usbdc_xfer+0x38>)
    ea94:	4798      	blx	r3
    ea96:	4603      	mov	r3, r0
}
    ea98:	4618      	mov	r0, r3
    ea9a:	3720      	adds	r7, #32
    ea9c:	46bd      	mov	sp, r7
    ea9e:	bd80      	pop	{r7, pc}
    eaa0:	000048ad 	.word	0x000048ad

0000eaa4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    eaa4:	b580      	push	{r7, lr}
    eaa6:	b082      	sub	sp, #8
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	4603      	mov	r3, r0
    eaac:	6039      	str	r1, [r7, #0]
    eaae:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    eab0:	79fb      	ldrb	r3, [r7, #7]
    eab2:	2b01      	cmp	r3, #1
    eab4:	d009      	beq.n	eaca <usbdc_register_handler+0x26>
    eab6:	2b02      	cmp	r3, #2
    eab8:	d00c      	beq.n	ead4 <usbdc_register_handler+0x30>
    eaba:	2b00      	cmp	r3, #0
    eabc:	d000      	beq.n	eac0 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    eabe:	e00e      	b.n	eade <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    eac0:	6839      	ldr	r1, [r7, #0]
    eac2:	4809      	ldr	r0, [pc, #36]	; (eae8 <usbdc_register_handler+0x44>)
    eac4:	4b09      	ldr	r3, [pc, #36]	; (eaec <usbdc_register_handler+0x48>)
    eac6:	4798      	blx	r3
		break;
    eac8:	e009      	b.n	eade <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    eaca:	6839      	ldr	r1, [r7, #0]
    eacc:	4808      	ldr	r0, [pc, #32]	; (eaf0 <usbdc_register_handler+0x4c>)
    eace:	4b07      	ldr	r3, [pc, #28]	; (eaec <usbdc_register_handler+0x48>)
    ead0:	4798      	blx	r3
		break;
    ead2:	e004      	b.n	eade <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ead4:	6839      	ldr	r1, [r7, #0]
    ead6:	4807      	ldr	r0, [pc, #28]	; (eaf4 <usbdc_register_handler+0x50>)
    ead8:	4b04      	ldr	r3, [pc, #16]	; (eaec <usbdc_register_handler+0x48>)
    eada:	4798      	blx	r3
		break;
    eadc:	bf00      	nop
	}
}
    eade:	bf00      	nop
    eae0:	3708      	adds	r7, #8
    eae2:	46bd      	mov	sp, r7
    eae4:	bd80      	pop	{r7, pc}
    eae6:	bf00      	nop
    eae8:	20002798 	.word	0x20002798
    eaec:	00004c99 	.word	0x00004c99
    eaf0:	2000279c 	.word	0x2000279c
    eaf4:	200027a0 	.word	0x200027a0

0000eaf8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    eaf8:	b580      	push	{r7, lr}
    eafa:	b084      	sub	sp, #16
    eafc:	af00      	add	r7, sp, #0
    eafe:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    eb00:	687b      	ldr	r3, [r7, #4]
    eb02:	2b00      	cmp	r3, #0
    eb04:	bf14      	ite	ne
    eb06:	2301      	movne	r3, #1
    eb08:	2300      	moveq	r3, #0
    eb0a:	b2db      	uxtb	r3, r3
    eb0c:	f240 3255 	movw	r2, #853	; 0x355
    eb10:	4910      	ldr	r1, [pc, #64]	; (eb54 <usbdc_init+0x5c>)
    eb12:	4618      	mov	r0, r3
    eb14:	4b10      	ldr	r3, [pc, #64]	; (eb58 <usbdc_init+0x60>)
    eb16:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    eb18:	4b10      	ldr	r3, [pc, #64]	; (eb5c <usbdc_init+0x64>)
    eb1a:	4798      	blx	r3
    eb1c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    eb1e:	68fb      	ldr	r3, [r7, #12]
    eb20:	2b00      	cmp	r3, #0
    eb22:	da01      	bge.n	eb28 <usbdc_init+0x30>
		return rc;
    eb24:	68fb      	ldr	r3, [r7, #12]
    eb26:	e010      	b.n	eb4a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    eb28:	2220      	movs	r2, #32
    eb2a:	2100      	movs	r1, #0
    eb2c:	480c      	ldr	r0, [pc, #48]	; (eb60 <usbdc_init+0x68>)
    eb2e:	4b0d      	ldr	r3, [pc, #52]	; (eb64 <usbdc_init+0x6c>)
    eb30:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    eb32:	4a0b      	ldr	r2, [pc, #44]	; (eb60 <usbdc_init+0x68>)
    eb34:	687b      	ldr	r3, [r7, #4]
    eb36:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    eb38:	490b      	ldr	r1, [pc, #44]	; (eb68 <usbdc_init+0x70>)
    eb3a:	2000      	movs	r0, #0
    eb3c:	4b0b      	ldr	r3, [pc, #44]	; (eb6c <usbdc_init+0x74>)
    eb3e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    eb40:	490b      	ldr	r1, [pc, #44]	; (eb70 <usbdc_init+0x78>)
    eb42:	2001      	movs	r0, #1
    eb44:	4b09      	ldr	r3, [pc, #36]	; (eb6c <usbdc_init+0x74>)
    eb46:	4798      	blx	r3

	return 0;
    eb48:	2300      	movs	r3, #0
}
    eb4a:	4618      	mov	r0, r3
    eb4c:	3710      	adds	r7, #16
    eb4e:	46bd      	mov	sp, r7
    eb50:	bd80      	pop	{r7, pc}
    eb52:	bf00      	nop
    eb54:	0001aebc 	.word	0x0001aebc
    eb58:	00004bbd 	.word	0x00004bbd
    eb5c:	00004615 	.word	0x00004615
    eb60:	20002794 	.word	0x20002794
    eb64:	0001a66d 	.word	0x0001a66d
    eb68:	0000e855 	.word	0x0000e855
    eb6c:	000046c1 	.word	0x000046c1
    eb70:	0000ea31 	.word	0x0000ea31

0000eb74 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    eb74:	b580      	push	{r7, lr}
    eb76:	b082      	sub	sp, #8
    eb78:	af00      	add	r7, sp, #0
    eb7a:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    eb7c:	6879      	ldr	r1, [r7, #4]
    eb7e:	4803      	ldr	r0, [pc, #12]	; (eb8c <usbdc_register_function+0x18>)
    eb80:	4b03      	ldr	r3, [pc, #12]	; (eb90 <usbdc_register_function+0x1c>)
    eb82:	4798      	blx	r3
}
    eb84:	bf00      	nop
    eb86:	3708      	adds	r7, #8
    eb88:	46bd      	mov	sp, r7
    eb8a:	bd80      	pop	{r7, pc}
    eb8c:	200027a4 	.word	0x200027a4
    eb90:	00004c99 	.word	0x00004c99

0000eb94 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    eb94:	b580      	push	{r7, lr}
    eb96:	b082      	sub	sp, #8
    eb98:	af00      	add	r7, sp, #0
    eb9a:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    eb9c:	4b0f      	ldr	r3, [pc, #60]	; (ebdc <usbdc_start+0x48>)
    eb9e:	7e9b      	ldrb	r3, [r3, #26]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d002      	beq.n	ebaa <usbdc_start+0x16>
		return ERR_BUSY;
    eba4:	f06f 0303 	mvn.w	r3, #3
    eba8:	e013      	b.n	ebd2 <usbdc_start+0x3e>
	}

	if (desces) {
    ebaa:	687b      	ldr	r3, [r7, #4]
    ebac:	2b00      	cmp	r3, #0
    ebae:	d00e      	beq.n	ebce <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ebb0:	4a0a      	ldr	r2, [pc, #40]	; (ebdc <usbdc_start+0x48>)
    ebb2:	687b      	ldr	r3, [r7, #4]
    ebb4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ebb6:	687b      	ldr	r3, [r7, #4]
    ebb8:	681b      	ldr	r3, [r3, #0]
    ebba:	79da      	ldrb	r2, [r3, #7]
    ebbc:	4b07      	ldr	r3, [pc, #28]	; (ebdc <usbdc_start+0x48>)
    ebbe:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ebc0:	4b06      	ldr	r3, [pc, #24]	; (ebdc <usbdc_start+0x48>)
    ebc2:	2201      	movs	r2, #1
    ebc4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ebc6:	4b06      	ldr	r3, [pc, #24]	; (ebe0 <usbdc_start+0x4c>)
    ebc8:	4798      	blx	r3
	return ERR_NONE;
    ebca:	2300      	movs	r3, #0
    ebcc:	e001      	b.n	ebd2 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ebce:	f06f 0308 	mvn.w	r3, #8
}
    ebd2:	4618      	mov	r0, r3
    ebd4:	3708      	adds	r7, #8
    ebd6:	46bd      	mov	sp, r7
    ebd8:	bd80      	pop	{r7, pc}
    ebda:	bf00      	nop
    ebdc:	20002794 	.word	0x20002794
    ebe0:	000046e5 	.word	0x000046e5

0000ebe4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ebe4:	b580      	push	{r7, lr}
    ebe6:	af00      	add	r7, sp, #0
	usb_d_attach();
    ebe8:	4b01      	ldr	r3, [pc, #4]	; (ebf0 <usbdc_attach+0xc>)
    ebea:	4798      	blx	r3
}
    ebec:	bf00      	nop
    ebee:	bd80      	pop	{r7, pc}
    ebf0:	000046f9 	.word	0x000046f9

0000ebf4 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ebf4:	b480      	push	{r7}
    ebf6:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ebf8:	4b03      	ldr	r3, [pc, #12]	; (ec08 <usbdc_get_ctrl_buffer+0x14>)
    ebfa:	695b      	ldr	r3, [r3, #20]
}
    ebfc:	4618      	mov	r0, r3
    ebfe:	46bd      	mov	sp, r7
    ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec04:	4770      	bx	lr
    ec06:	bf00      	nop
    ec08:	20002794 	.word	0x20002794

0000ec0c <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ec0c:	b480      	push	{r7}
    ec0e:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ec10:	4b07      	ldr	r3, [pc, #28]	; (ec30 <usbdc_get_state+0x24>)
    ec12:	7e9b      	ldrb	r3, [r3, #26]
    ec14:	f003 0310 	and.w	r3, r3, #16
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d001      	beq.n	ec20 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ec1c:	2310      	movs	r3, #16
    ec1e:	e001      	b.n	ec24 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ec20:	4b03      	ldr	r3, [pc, #12]	; (ec30 <usbdc_get_state+0x24>)
    ec22:	7e9b      	ldrb	r3, [r3, #26]
}
    ec24:	4618      	mov	r0, r3
    ec26:	46bd      	mov	sp, r7
    ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec2c:	4770      	bx	lr
    ec2e:	bf00      	nop
    ec30:	20002794 	.word	0x20002794

0000ec34 <usb_get_u16>:
{
    ec34:	b480      	push	{r7}
    ec36:	b083      	sub	sp, #12
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ec3c:	687b      	ldr	r3, [r7, #4]
    ec3e:	781b      	ldrb	r3, [r3, #0]
    ec40:	b29a      	uxth	r2, r3
    ec42:	687b      	ldr	r3, [r7, #4]
    ec44:	3301      	adds	r3, #1
    ec46:	781b      	ldrb	r3, [r3, #0]
    ec48:	b29b      	uxth	r3, r3
    ec4a:	021b      	lsls	r3, r3, #8
    ec4c:	b29b      	uxth	r3, r3
    ec4e:	4413      	add	r3, r2
    ec50:	b29b      	uxth	r3, r3
}
    ec52:	4618      	mov	r0, r3
    ec54:	370c      	adds	r7, #12
    ec56:	46bd      	mov	sp, r7
    ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec5c:	4770      	bx	lr

0000ec5e <usb_desc_len>:
{
    ec5e:	b480      	push	{r7}
    ec60:	b083      	sub	sp, #12
    ec62:	af00      	add	r7, sp, #0
    ec64:	6078      	str	r0, [r7, #4]
	return desc[0];
    ec66:	687b      	ldr	r3, [r7, #4]
    ec68:	781b      	ldrb	r3, [r3, #0]
}
    ec6a:	4618      	mov	r0, r3
    ec6c:	370c      	adds	r7, #12
    ec6e:	46bd      	mov	sp, r7
    ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec74:	4770      	bx	lr

0000ec76 <usb_desc_type>:
{
    ec76:	b480      	push	{r7}
    ec78:	b083      	sub	sp, #12
    ec7a:	af00      	add	r7, sp, #0
    ec7c:	6078      	str	r0, [r7, #4]
	return desc[1];
    ec7e:	687b      	ldr	r3, [r7, #4]
    ec80:	3301      	adds	r3, #1
    ec82:	781b      	ldrb	r3, [r3, #0]
}
    ec84:	4618      	mov	r0, r3
    ec86:	370c      	adds	r7, #12
    ec88:	46bd      	mov	sp, r7
    ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec8e:	4770      	bx	lr

0000ec90 <usb_desc_next>:
{
    ec90:	b580      	push	{r7, lr}
    ec92:	b082      	sub	sp, #8
    ec94:	af00      	add	r7, sp, #0
    ec96:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ec98:	6878      	ldr	r0, [r7, #4]
    ec9a:	4b05      	ldr	r3, [pc, #20]	; (ecb0 <usb_desc_next+0x20>)
    ec9c:	4798      	blx	r3
    ec9e:	4603      	mov	r3, r0
    eca0:	461a      	mov	r2, r3
    eca2:	687b      	ldr	r3, [r7, #4]
    eca4:	4413      	add	r3, r2
}
    eca6:	4618      	mov	r0, r3
    eca8:	3708      	adds	r7, #8
    ecaa:	46bd      	mov	sp, r7
    ecac:	bd80      	pop	{r7, pc}
    ecae:	bf00      	nop
    ecb0:	0000ec5f 	.word	0x0000ec5f

0000ecb4 <usb_cfg_desc_total_len>:
{
    ecb4:	b580      	push	{r7, lr}
    ecb6:	b082      	sub	sp, #8
    ecb8:	af00      	add	r7, sp, #0
    ecba:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ecbc:	687b      	ldr	r3, [r7, #4]
    ecbe:	3302      	adds	r3, #2
    ecc0:	4618      	mov	r0, r3
    ecc2:	4b03      	ldr	r3, [pc, #12]	; (ecd0 <usb_cfg_desc_total_len+0x1c>)
    ecc4:	4798      	blx	r3
    ecc6:	4603      	mov	r3, r0
}
    ecc8:	4618      	mov	r0, r3
    ecca:	3708      	adds	r7, #8
    eccc:	46bd      	mov	sp, r7
    ecce:	bd80      	pop	{r7, pc}
    ecd0:	0000ec35 	.word	0x0000ec35

0000ecd4 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    ecd4:	b580      	push	{r7, lr}
    ecd6:	b082      	sub	sp, #8
    ecd8:	af00      	add	r7, sp, #0
    ecda:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ecdc:	6878      	ldr	r0, [r7, #4]
    ecde:	4b05      	ldr	r3, [pc, #20]	; (ecf4 <usb_cfg_desc_next+0x20>)
    ece0:	4798      	blx	r3
    ece2:	4603      	mov	r3, r0
    ece4:	461a      	mov	r2, r3
    ece6:	687b      	ldr	r3, [r7, #4]
    ece8:	4413      	add	r3, r2
}
    ecea:	4618      	mov	r0, r3
    ecec:	3708      	adds	r7, #8
    ecee:	46bd      	mov	sp, r7
    ecf0:	bd80      	pop	{r7, pc}
    ecf2:	bf00      	nop
    ecf4:	0000ecb5 	.word	0x0000ecb5

0000ecf8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    ecf8:	b580      	push	{r7, lr}
    ecfa:	b084      	sub	sp, #16
    ecfc:	af00      	add	r7, sp, #0
    ecfe:	60f8      	str	r0, [r7, #12]
    ed00:	60b9      	str	r1, [r7, #8]
    ed02:	4613      	mov	r3, r2
    ed04:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ed06:	e015      	b.n	ed34 <usb_find_desc+0x3c>
		_desc_len_check();
    ed08:	68f8      	ldr	r0, [r7, #12]
    ed0a:	4b0f      	ldr	r3, [pc, #60]	; (ed48 <usb_find_desc+0x50>)
    ed0c:	4798      	blx	r3
    ed0e:	4603      	mov	r3, r0
    ed10:	2b01      	cmp	r3, #1
    ed12:	d801      	bhi.n	ed18 <usb_find_desc+0x20>
    ed14:	2300      	movs	r3, #0
    ed16:	e012      	b.n	ed3e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    ed18:	68f8      	ldr	r0, [r7, #12]
    ed1a:	4b0c      	ldr	r3, [pc, #48]	; (ed4c <usb_find_desc+0x54>)
    ed1c:	4798      	blx	r3
    ed1e:	4603      	mov	r3, r0
    ed20:	461a      	mov	r2, r3
    ed22:	79fb      	ldrb	r3, [r7, #7]
    ed24:	4293      	cmp	r3, r2
    ed26:	d101      	bne.n	ed2c <usb_find_desc+0x34>
			return desc;
    ed28:	68fb      	ldr	r3, [r7, #12]
    ed2a:	e008      	b.n	ed3e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    ed2c:	68f8      	ldr	r0, [r7, #12]
    ed2e:	4b08      	ldr	r3, [pc, #32]	; (ed50 <usb_find_desc+0x58>)
    ed30:	4798      	blx	r3
    ed32:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ed34:	68fa      	ldr	r2, [r7, #12]
    ed36:	68bb      	ldr	r3, [r7, #8]
    ed38:	429a      	cmp	r2, r3
    ed3a:	d3e5      	bcc.n	ed08 <usb_find_desc+0x10>
	}
	return NULL;
    ed3c:	2300      	movs	r3, #0
}
    ed3e:	4618      	mov	r0, r3
    ed40:	3710      	adds	r7, #16
    ed42:	46bd      	mov	sp, r7
    ed44:	bd80      	pop	{r7, pc}
    ed46:	bf00      	nop
    ed48:	0000ec5f 	.word	0x0000ec5f
    ed4c:	0000ec77 	.word	0x0000ec77
    ed50:	0000ec91 	.word	0x0000ec91

0000ed54 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    ed54:	b580      	push	{r7, lr}
    ed56:	b082      	sub	sp, #8
    ed58:	af00      	add	r7, sp, #0
    ed5a:	6078      	str	r0, [r7, #4]
    ed5c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ed5e:	e019      	b.n	ed94 <usb_find_ep_desc+0x40>
		_desc_len_check();
    ed60:	6878      	ldr	r0, [r7, #4]
    ed62:	4b12      	ldr	r3, [pc, #72]	; (edac <usb_find_ep_desc+0x58>)
    ed64:	4798      	blx	r3
    ed66:	4603      	mov	r3, r0
    ed68:	2b01      	cmp	r3, #1
    ed6a:	d801      	bhi.n	ed70 <usb_find_ep_desc+0x1c>
    ed6c:	2300      	movs	r3, #0
    ed6e:	e018      	b.n	eda2 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ed70:	6878      	ldr	r0, [r7, #4]
    ed72:	4b0f      	ldr	r3, [pc, #60]	; (edb0 <usb_find_ep_desc+0x5c>)
    ed74:	4798      	blx	r3
    ed76:	4603      	mov	r3, r0
    ed78:	2b04      	cmp	r3, #4
    ed7a:	d010      	beq.n	ed9e <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ed7c:	6878      	ldr	r0, [r7, #4]
    ed7e:	4b0c      	ldr	r3, [pc, #48]	; (edb0 <usb_find_ep_desc+0x5c>)
    ed80:	4798      	blx	r3
    ed82:	4603      	mov	r3, r0
    ed84:	2b05      	cmp	r3, #5
    ed86:	d101      	bne.n	ed8c <usb_find_ep_desc+0x38>
			return desc;
    ed88:	687b      	ldr	r3, [r7, #4]
    ed8a:	e00a      	b.n	eda2 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ed8c:	6878      	ldr	r0, [r7, #4]
    ed8e:	4b09      	ldr	r3, [pc, #36]	; (edb4 <usb_find_ep_desc+0x60>)
    ed90:	4798      	blx	r3
    ed92:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ed94:	687a      	ldr	r2, [r7, #4]
    ed96:	683b      	ldr	r3, [r7, #0]
    ed98:	429a      	cmp	r2, r3
    ed9a:	d3e1      	bcc.n	ed60 <usb_find_ep_desc+0xc>
    ed9c:	e000      	b.n	eda0 <usb_find_ep_desc+0x4c>
			break;
    ed9e:	bf00      	nop
	}
	return NULL;
    eda0:	2300      	movs	r3, #0
}
    eda2:	4618      	mov	r0, r3
    eda4:	3708      	adds	r7, #8
    eda6:	46bd      	mov	sp, r7
    eda8:	bd80      	pop	{r7, pc}
    edaa:	bf00      	nop
    edac:	0000ec5f 	.word	0x0000ec5f
    edb0:	0000ec77 	.word	0x0000ec77
    edb4:	0000ec91 	.word	0x0000ec91

0000edb8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    edb8:	b580      	push	{r7, lr}
    edba:	b084      	sub	sp, #16
    edbc:	af00      	add	r7, sp, #0
    edbe:	60f8      	str	r0, [r7, #12]
    edc0:	60b9      	str	r1, [r7, #8]
    edc2:	4613      	mov	r3, r2
    edc4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    edc6:	2202      	movs	r2, #2
    edc8:	68b9      	ldr	r1, [r7, #8]
    edca:	68f8      	ldr	r0, [r7, #12]
    edcc:	4b15      	ldr	r3, [pc, #84]	; (ee24 <usb_find_cfg_desc+0x6c>)
    edce:	4798      	blx	r3
    edd0:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    edd2:	68fb      	ldr	r3, [r7, #12]
    edd4:	2b00      	cmp	r3, #0
    edd6:	d11a      	bne.n	ee0e <usb_find_cfg_desc+0x56>
		return NULL;
    edd8:	2300      	movs	r3, #0
    edda:	e01f      	b.n	ee1c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    eddc:	68f8      	ldr	r0, [r7, #12]
    edde:	4b12      	ldr	r3, [pc, #72]	; (ee28 <usb_find_cfg_desc+0x70>)
    ede0:	4798      	blx	r3
    ede2:	4603      	mov	r3, r0
    ede4:	2b01      	cmp	r3, #1
    ede6:	d801      	bhi.n	edec <usb_find_cfg_desc+0x34>
    ede8:	2300      	movs	r3, #0
    edea:	e017      	b.n	ee1c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    edec:	68fb      	ldr	r3, [r7, #12]
    edee:	3301      	adds	r3, #1
    edf0:	781b      	ldrb	r3, [r3, #0]
    edf2:	2b02      	cmp	r3, #2
    edf4:	d110      	bne.n	ee18 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    edf6:	68fb      	ldr	r3, [r7, #12]
    edf8:	3305      	adds	r3, #5
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	79fa      	ldrb	r2, [r7, #7]
    edfe:	429a      	cmp	r2, r3
    ee00:	d101      	bne.n	ee06 <usb_find_cfg_desc+0x4e>
			return desc;
    ee02:	68fb      	ldr	r3, [r7, #12]
    ee04:	e00a      	b.n	ee1c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ee06:	68f8      	ldr	r0, [r7, #12]
    ee08:	4b08      	ldr	r3, [pc, #32]	; (ee2c <usb_find_cfg_desc+0x74>)
    ee0a:	4798      	blx	r3
    ee0c:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ee0e:	68fa      	ldr	r2, [r7, #12]
    ee10:	68bb      	ldr	r3, [r7, #8]
    ee12:	429a      	cmp	r2, r3
    ee14:	d3e2      	bcc.n	eddc <usb_find_cfg_desc+0x24>
    ee16:	e000      	b.n	ee1a <usb_find_cfg_desc+0x62>
			break;
    ee18:	bf00      	nop
	}
	return NULL;
    ee1a:	2300      	movs	r3, #0
}
    ee1c:	4618      	mov	r0, r3
    ee1e:	3710      	adds	r7, #16
    ee20:	46bd      	mov	sp, r7
    ee22:	bd80      	pop	{r7, pc}
    ee24:	0000ecf9 	.word	0x0000ecf9
    ee28:	0000ec5f 	.word	0x0000ec5f
    ee2c:	0000ecd5 	.word	0x0000ecd5

0000ee30 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    ee30:	b580      	push	{r7, lr}
    ee32:	b086      	sub	sp, #24
    ee34:	af00      	add	r7, sp, #0
    ee36:	60f8      	str	r0, [r7, #12]
    ee38:	60b9      	str	r1, [r7, #8]
    ee3a:	4613      	mov	r3, r2
    ee3c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ee3e:	2300      	movs	r3, #0
    ee40:	75fb      	strb	r3, [r7, #23]
    ee42:	e020      	b.n	ee86 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ee44:	2203      	movs	r2, #3
    ee46:	68b9      	ldr	r1, [r7, #8]
    ee48:	68f8      	ldr	r0, [r7, #12]
    ee4a:	4b13      	ldr	r3, [pc, #76]	; (ee98 <usb_find_str_desc+0x68>)
    ee4c:	4798      	blx	r3
    ee4e:	60f8      	str	r0, [r7, #12]
		if (desc) {
    ee50:	68fb      	ldr	r3, [r7, #12]
    ee52:	2b00      	cmp	r3, #0
    ee54:	d015      	beq.n	ee82 <usb_find_str_desc+0x52>
			_desc_len_check();
    ee56:	68f8      	ldr	r0, [r7, #12]
    ee58:	4b10      	ldr	r3, [pc, #64]	; (ee9c <usb_find_str_desc+0x6c>)
    ee5a:	4798      	blx	r3
    ee5c:	4603      	mov	r3, r0
    ee5e:	2b01      	cmp	r3, #1
    ee60:	d801      	bhi.n	ee66 <usb_find_str_desc+0x36>
    ee62:	2300      	movs	r3, #0
    ee64:	e014      	b.n	ee90 <usb_find_str_desc+0x60>
			if (i == str_index) {
    ee66:	7dfa      	ldrb	r2, [r7, #23]
    ee68:	79fb      	ldrb	r3, [r7, #7]
    ee6a:	429a      	cmp	r2, r3
    ee6c:	d101      	bne.n	ee72 <usb_find_str_desc+0x42>
				return desc;
    ee6e:	68fb      	ldr	r3, [r7, #12]
    ee70:	e00e      	b.n	ee90 <usb_find_str_desc+0x60>
			}
			i++;
    ee72:	7dfb      	ldrb	r3, [r7, #23]
    ee74:	3301      	adds	r3, #1
    ee76:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    ee78:	68f8      	ldr	r0, [r7, #12]
    ee7a:	4b09      	ldr	r3, [pc, #36]	; (eea0 <usb_find_str_desc+0x70>)
    ee7c:	4798      	blx	r3
    ee7e:	60f8      	str	r0, [r7, #12]
    ee80:	e001      	b.n	ee86 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    ee82:	2300      	movs	r3, #0
    ee84:	e004      	b.n	ee90 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    ee86:	68fa      	ldr	r2, [r7, #12]
    ee88:	68bb      	ldr	r3, [r7, #8]
    ee8a:	429a      	cmp	r2, r3
    ee8c:	d3da      	bcc.n	ee44 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    ee8e:	2300      	movs	r3, #0
}
    ee90:	4618      	mov	r0, r3
    ee92:	3718      	adds	r7, #24
    ee94:	46bd      	mov	sp, r7
    ee96:	bd80      	pop	{r7, pc}
    ee98:	0000ecf9 	.word	0x0000ecf9
    ee9c:	0000ec5f 	.word	0x0000ec5f
    eea0:	0000ec91 	.word	0x0000ec91

0000eea4 <_ZN28Compressor_CANOpen_Interface15GetCurrentSpeedEv>:
	bool	InitCANOpen(void);
	int	Comporesor_Process(void);
	void	Periodic_Task(void);
	bool	Set_CAN_Enable(bool *st);
	void	Set_Motor_Speed(uint16_t sp);
	uint16_t GetCurrentSpeed(void){return current_speed;};
    eea4:	b480      	push	{r7}
    eea6:	b083      	sub	sp, #12
    eea8:	af00      	add	r7, sp, #0
    eeaa:	6078      	str	r0, [r7, #4]
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
    eeb2:	4618      	mov	r0, r3
    eeb4:	370c      	adds	r7, #12
    eeb6:	46bd      	mov	sp, r7
    eeb8:	bc80      	pop	{r7}
    eeba:	4770      	bx	lr

0000eebc <_ZN20Compresor_ControllerC1Ev>:
#include "Compresor_Controller.h"
#include "CO_Driver_Class.h"
static uint8_t local_data_array[COMPRESSOR_CONTROLLER_DATA_SIZE];

// default constructor
Compresor_Controller::Compresor_Controller()
    eebc:	b580      	push	{r7, lr}
    eebe:	b082      	sub	sp, #8
    eec0:	af00      	add	r7, sp, #0
    eec2:	6078      	str	r0, [r7, #4]
    eec4:	687b      	ldr	r3, [r7, #4]
    eec6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    eeca:	4618      	mov	r0, r3
    eecc:	4b06      	ldr	r3, [pc, #24]	; (eee8 <_ZN20Compresor_ControllerC1Ev+0x2c>)
    eece:	4798      	blx	r3
    eed0:	687b      	ldr	r3, [r7, #4]
    eed2:	4618      	mov	r0, r3
    eed4:	4b05      	ldr	r3, [pc, #20]	; (eeec <_ZN20Compresor_ControllerC1Ev+0x30>)
    eed6:	4798      	blx	r3
    eed8:	4a05      	ldr	r2, [pc, #20]	; (eef0 <_ZN20Compresor_ControllerC1Ev+0x34>)
    eeda:	687b      	ldr	r3, [r7, #4]
    eedc:	601a      	str	r2, [r3, #0]
{
} //Compresor_Controller
    eede:	687b      	ldr	r3, [r7, #4]
    eee0:	4618      	mov	r0, r3
    eee2:	3708      	adds	r7, #8
    eee4:	46bd      	mov	sp, r7
    eee6:	bd80      	pop	{r7, pc}
    eee8:	0000f1cd 	.word	0x0000f1cd
    eeec:	0000f4a5 	.word	0x0000f4a5
    eef0:	0001aedc 	.word	0x0001aedc

0000eef4 <_ZN20Compresor_ControllerD1Ev>:

// default destructor
Compresor_Controller::~Compresor_Controller()
    eef4:	b580      	push	{r7, lr}
    eef6:	b082      	sub	sp, #8
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
    eefc:	4a08      	ldr	r2, [pc, #32]	; (ef20 <_ZN20Compresor_ControllerD1Ev+0x2c>)
    eefe:	687b      	ldr	r3, [r7, #4]
    ef00:	601a      	str	r2, [r3, #0]
    ef02:	687b      	ldr	r3, [r7, #4]
    ef04:	4618      	mov	r0, r3
    ef06:	4b07      	ldr	r3, [pc, #28]	; (ef24 <_ZN20Compresor_ControllerD1Ev+0x30>)
    ef08:	4798      	blx	r3
    ef0a:	687b      	ldr	r3, [r7, #4]
    ef0c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    ef10:	4618      	mov	r0, r3
    ef12:	4b05      	ldr	r3, [pc, #20]	; (ef28 <_ZN20Compresor_ControllerD1Ev+0x34>)
    ef14:	4798      	blx	r3
{
} //~Compresor_Controller
    ef16:	687b      	ldr	r3, [r7, #4]
    ef18:	4618      	mov	r0, r3
    ef1a:	3708      	adds	r7, #8
    ef1c:	46bd      	mov	sp, r7
    ef1e:	bd80      	pop	{r7, pc}
    ef20:	0001aedc 	.word	0x0001aedc
    ef24:	0000f4e1 	.word	0x0000f4e1
    ef28:	0000f1f1 	.word	0x0000f1f1

0000ef2c <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
    ef2c:	b590      	push	{r4, r7, lr}
    ef2e:	b083      	sub	sp, #12
    ef30:	af00      	add	r7, sp, #0
    ef32:	6078      	str	r0, [r7, #4]
	data_array=local_data_array;
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	4a1e      	ldr	r2, [pc, #120]	; (efb0 <_ZN20Compresor_Controller4InitEv+0x84>)
    ef38:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	isOK=InitExpander();
    ef3c:	687b      	ldr	r3, [r7, #4]
    ef3e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    ef42:	4618      	mov	r0, r3
    ef44:	4b1b      	ldr	r3, [pc, #108]	; (efb4 <_ZN20Compresor_Controller4InitEv+0x88>)
    ef46:	4798      	blx	r3
    ef48:	4603      	mov	r3, r0
    ef4a:	461a      	mov	r2, r3
    ef4c:	687b      	ldr	r3, [r7, #4]
    ef4e:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	if (isOK)
    ef52:	687b      	ldr	r3, [r7, #4]
    ef54:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
    ef58:	b2db      	uxtb	r3, r3
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d01f      	beq.n	ef9e <_ZN20Compresor_Controller4InitEv+0x72>
	{
		if (InitCANOpen())
    ef5e:	687b      	ldr	r3, [r7, #4]
    ef60:	4618      	mov	r0, r3
    ef62:	4b15      	ldr	r3, [pc, #84]	; (efb8 <_ZN20Compresor_Controller4InitEv+0x8c>)
    ef64:	4798      	blx	r3
    ef66:	4603      	mov	r3, r0
    ef68:	2b00      	cmp	r3, #0
    ef6a:	d018      	beq.n	ef9e <_ZN20Compresor_Controller4InitEv+0x72>
		{
			canopen_driver->canopen_ready=true;
    ef6c:	4b13      	ldr	r3, [pc, #76]	; (efbc <_ZN20Compresor_Controller4InitEv+0x90>)
    ef6e:	681b      	ldr	r3, [r3, #0]
    ef70:	2201      	movs	r2, #1
    ef72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			Set_CAN_Enable(IsEnabledPointer());
    ef76:	687c      	ldr	r4, [r7, #4]
    ef78:	687b      	ldr	r3, [r7, #4]
    ef7a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    ef7e:	4618      	mov	r0, r3
    ef80:	4b0f      	ldr	r3, [pc, #60]	; (efc0 <_ZN20Compresor_Controller4InitEv+0x94>)
    ef82:	4798      	blx	r3
    ef84:	4603      	mov	r3, r0
    ef86:	4619      	mov	r1, r3
    ef88:	4620      	mov	r0, r4
    ef8a:	4b0e      	ldr	r3, [pc, #56]	; (efc4 <_ZN20Compresor_Controller4InitEv+0x98>)
    ef8c:	4798      	blx	r3
			Set_Slave_ID(CCU_CANOPEN_NODE);
    ef8e:	2102      	movs	r1, #2
    ef90:	6878      	ldr	r0, [r7, #4]
    ef92:	4b0d      	ldr	r3, [pc, #52]	; (efc8 <_ZN20Compresor_Controller4InitEv+0x9c>)
    ef94:	4798      	blx	r3
			isOK=true;
    ef96:	687b      	ldr	r3, [r7, #4]
    ef98:	2201      	movs	r2, #1
    ef9a:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
		}
	} 
	else
	{
	}
	return isOK;
    ef9e:	687b      	ldr	r3, [r7, #4]
    efa0:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
    efa4:	b2db      	uxtb	r3, r3
}
    efa6:	4618      	mov	r0, r3
    efa8:	370c      	adds	r7, #12
    efaa:	46bd      	mov	sp, r7
    efac:	bd90      	pop	{r4, r7, pc}
    efae:	bf00      	nop
    efb0:	200028cc 	.word	0x200028cc
    efb4:	0000f205 	.word	0x0000f205
    efb8:	0000f509 	.word	0x0000f509
    efbc:	2000d9f4 	.word	0x2000d9f4
    efc0:	0000f365 	.word	0x0000f365
    efc4:	0000f71d 	.word	0x0000f71d
    efc8:	0000efcd 	.word	0x0000efcd

0000efcc <_ZN20Compresor_Controller12Set_Slave_IDEh>:
uint8_t Compresor_Controller::Set_Slave_ID (uint8_t sn){
    efcc:	b580      	push	{r7, lr}
    efce:	b082      	sub	sp, #8
    efd0:	af00      	add	r7, sp, #0
    efd2:	6078      	str	r0, [r7, #4]
    efd4:	460b      	mov	r3, r1
    efd6:	70fb      	strb	r3, [r7, #3]
	return	canopen_driver->Set_Slave_Node(sn);
    efd8:	4b05      	ldr	r3, [pc, #20]	; (eff0 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x24>)
    efda:	681b      	ldr	r3, [r3, #0]
    efdc:	78fa      	ldrb	r2, [r7, #3]
    efde:	4611      	mov	r1, r2
    efe0:	4618      	mov	r0, r3
    efe2:	4b04      	ldr	r3, [pc, #16]	; (eff4 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x28>)
    efe4:	4798      	blx	r3
    efe6:	4603      	mov	r3, r0
}
    efe8:	4618      	mov	r0, r3
    efea:	3708      	adds	r7, #8
    efec:	46bd      	mov	sp, r7
    efee:	bd80      	pop	{r7, pc}
    eff0:	2000d9f4 	.word	0x2000d9f4
    eff4:	0001569f 	.word	0x0001569f

0000eff8 <_ZN20Compresor_Controller19GetCompressorStatusEPh>:
void Compresor_Controller::GetCompressorStatus(uint8_t *arr){
    eff8:	b590      	push	{r4, r7, lr}
    effa:	b083      	sub	sp, #12
    effc:	af00      	add	r7, sp, #0
    effe:	6078      	str	r0, [r7, #4]
    f000:	6039      	str	r1, [r7, #0]
	data_array[0]=ReadStatus();
    f002:	687b      	ldr	r3, [r7, #4]
    f004:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
    f008:	687b      	ldr	r3, [r7, #4]
    f00a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    f00e:	4618      	mov	r0, r3
    f010:	4b16      	ldr	r3, [pc, #88]	; (f06c <_ZN20Compresor_Controller19GetCompressorStatusEPh+0x74>)
    f012:	4798      	blx	r3
    f014:	4603      	mov	r3, r0
    f016:	7023      	strb	r3, [r4, #0]
	current_speed=GetCurrentSpeed();
    f018:	687b      	ldr	r3, [r7, #4]
    f01a:	4618      	mov	r0, r3
    f01c:	4b14      	ldr	r3, [pc, #80]	; (f070 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0x78>)
    f01e:	4798      	blx	r3
    f020:	4603      	mov	r3, r0
    f022:	461a      	mov	r2, r3
    f024:	687b      	ldr	r3, [r7, #4]
    f026:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
	memcpy(&data_array[1],&current_speed,2);
    f02a:	687b      	ldr	r3, [r7, #4]
    f02c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
    f030:	3301      	adds	r3, #1
    f032:	687a      	ldr	r2, [r7, #4]
    f034:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
    f038:	8812      	ldrh	r2, [r2, #0]
    f03a:	b292      	uxth	r2, r2
    f03c:	801a      	strh	r2, [r3, #0]
	data_array[3]=ReadPressureLimits();
    f03e:	687b      	ldr	r3, [r7, #4]
    f040:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
    f044:	1cdc      	adds	r4, r3, #3
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    f04c:	4618      	mov	r0, r3
    f04e:	4b09      	ldr	r3, [pc, #36]	; (f074 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0x7c>)
    f050:	4798      	blx	r3
    f052:	4603      	mov	r3, r0
    f054:	7023      	strb	r3, [r4, #0]
	memcpy(arr,data_array,4);
    f056:	687b      	ldr	r3, [r7, #4]
    f058:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
    f05c:	681b      	ldr	r3, [r3, #0]
    f05e:	461a      	mov	r2, r3
    f060:	683b      	ldr	r3, [r7, #0]
    f062:	601a      	str	r2, [r3, #0]
}
    f064:	bf00      	nop
    f066:	370c      	adds	r7, #12
    f068:	46bd      	mov	sp, r7
    f06a:	bd90      	pop	{r4, r7, pc}
    f06c:	0000f2ad 	.word	0x0000f2ad
    f070:	0000eea5 	.word	0x0000eea5
    f074:	0000f2d1 	.word	0x0000f2d1

0000f078 <_Z41__static_initialization_and_destruction_0ii>:
    f078:	b580      	push	{r7, lr}
    f07a:	b082      	sub	sp, #8
    f07c:	af00      	add	r7, sp, #0
    f07e:	6078      	str	r0, [r7, #4]
    f080:	6039      	str	r1, [r7, #0]
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	2b01      	cmp	r3, #1
    f086:	d15d      	bne.n	f144 <_Z41__static_initialization_and_destruction_0ii+0xcc>
    f088:	683b      	ldr	r3, [r7, #0]
    f08a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f08e:	4293      	cmp	r3, r2
    f090:	d158      	bne.n	f144 <_Z41__static_initialization_and_destruction_0ii+0xcc>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f092:	492e      	ldr	r1, [pc, #184]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f094:	482e      	ldr	r0, [pc, #184]	; (f150 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f096:	4b2f      	ldr	r3, [pc, #188]	; (f154 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f098:	4798      	blx	r3
    f09a:	4a2f      	ldr	r2, [pc, #188]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f09c:	492f      	ldr	r1, [pc, #188]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f09e:	482c      	ldr	r0, [pc, #176]	; (f150 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0a0:	4b2f      	ldr	r3, [pc, #188]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0a2:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f0a4:	492f      	ldr	r1, [pc, #188]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f0a6:	4830      	ldr	r0, [pc, #192]	; (f168 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f0a8:	4b30      	ldr	r3, [pc, #192]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0aa:	4798      	blx	r3
    f0ac:	4a2a      	ldr	r2, [pc, #168]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0ae:	4930      	ldr	r1, [pc, #192]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0b0:	482d      	ldr	r0, [pc, #180]	; (f168 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f0b2:	4b2b      	ldr	r3, [pc, #172]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0b4:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f0b6:	492f      	ldr	r1, [pc, #188]	; (f174 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f0b8:	482f      	ldr	r0, [pc, #188]	; (f178 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f0ba:	4b2c      	ldr	r3, [pc, #176]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0bc:	4798      	blx	r3
    f0be:	4a26      	ldr	r2, [pc, #152]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0c0:	492b      	ldr	r1, [pc, #172]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0c2:	482d      	ldr	r0, [pc, #180]	; (f178 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f0c4:	4b26      	ldr	r3, [pc, #152]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0c6:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f0c8:	492c      	ldr	r1, [pc, #176]	; (f17c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f0ca:	482d      	ldr	r0, [pc, #180]	; (f180 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f0cc:	4b27      	ldr	r3, [pc, #156]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0ce:	4798      	blx	r3
    f0d0:	4a21      	ldr	r2, [pc, #132]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0d2:	4927      	ldr	r1, [pc, #156]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0d4:	482a      	ldr	r0, [pc, #168]	; (f180 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f0d6:	4b22      	ldr	r3, [pc, #136]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0d8:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f0da:	492a      	ldr	r1, [pc, #168]	; (f184 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f0dc:	482a      	ldr	r0, [pc, #168]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f0de:	4b23      	ldr	r3, [pc, #140]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0e0:	4798      	blx	r3
    f0e2:	4a1d      	ldr	r2, [pc, #116]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0e4:	4922      	ldr	r1, [pc, #136]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0e6:	4828      	ldr	r0, [pc, #160]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f0e8:	4b1d      	ldr	r3, [pc, #116]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0ea:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f0ec:	4927      	ldr	r1, [pc, #156]	; (f18c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f0ee:	4828      	ldr	r0, [pc, #160]	; (f190 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f0f0:	4b1e      	ldr	r3, [pc, #120]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0f2:	4798      	blx	r3
    f0f4:	4a18      	ldr	r2, [pc, #96]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0f6:	491e      	ldr	r1, [pc, #120]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0f8:	4825      	ldr	r0, [pc, #148]	; (f190 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f0fa:	4b19      	ldr	r3, [pc, #100]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0fc:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f0fe:	4925      	ldr	r1, [pc, #148]	; (f194 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f100:	4825      	ldr	r0, [pc, #148]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f102:	4b1a      	ldr	r3, [pc, #104]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f104:	4798      	blx	r3
    f106:	4a14      	ldr	r2, [pc, #80]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f108:	4919      	ldr	r1, [pc, #100]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f10a:	4823      	ldr	r0, [pc, #140]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f10c:	4b14      	ldr	r3, [pc, #80]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f10e:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f110:	4922      	ldr	r1, [pc, #136]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f112:	4823      	ldr	r0, [pc, #140]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f114:	4b15      	ldr	r3, [pc, #84]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f116:	4798      	blx	r3
    f118:	4a0f      	ldr	r2, [pc, #60]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f11a:	4915      	ldr	r1, [pc, #84]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f11c:	4820      	ldr	r0, [pc, #128]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f11e:	4b10      	ldr	r3, [pc, #64]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f120:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f122:	4920      	ldr	r1, [pc, #128]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f124:	4820      	ldr	r0, [pc, #128]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f126:	4b11      	ldr	r3, [pc, #68]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f128:	4798      	blx	r3
    f12a:	4a0b      	ldr	r2, [pc, #44]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f12c:	4910      	ldr	r1, [pc, #64]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f12e:	481e      	ldr	r0, [pc, #120]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f130:	4b0b      	ldr	r3, [pc, #44]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f132:	4798      	blx	r3
    f134:	481d      	ldr	r0, [pc, #116]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f136:	4b1e      	ldr	r3, [pc, #120]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f138:	4798      	blx	r3
    f13a:	4a07      	ldr	r2, [pc, #28]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f13c:	491d      	ldr	r1, [pc, #116]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f13e:	481b      	ldr	r0, [pc, #108]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f140:	4b07      	ldr	r3, [pc, #28]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f142:	4798      	blx	r3
    f144:	bf00      	nop
    f146:	3708      	adds	r7, #8
    f148:	46bd      	mov	sp, r7
    f14a:	bd80      	pop	{r7, pc}
    f14c:	2000dfe0 	.word	0x2000dfe0
    f150:	200027b4 	.word	0x200027b4
    f154:	0000fa29 	.word	0x0000fa29
    f158:	20000000 	.word	0x20000000
    f15c:	0000fa45 	.word	0x0000fa45
    f160:	00019fb9 	.word	0x00019fb9
    f164:	2000deb0 	.word	0x2000deb0
    f168:	200027cc 	.word	0x200027cc
    f16c:	000100e1 	.word	0x000100e1
    f170:	00010119 	.word	0x00010119
    f174:	2000df44 	.word	0x2000df44
    f178:	200027ec 	.word	0x200027ec
    f17c:	2000e068 	.word	0x2000e068
    f180:	2000280c 	.word	0x2000280c
    f184:	2000df64 	.word	0x2000df64
    f188:	2000282c 	.word	0x2000282c
    f18c:	2000e028 	.word	0x2000e028
    f190:	2000284c 	.word	0x2000284c
    f194:	2000e048 	.word	0x2000e048
    f198:	2000286c 	.word	0x2000286c
    f19c:	2000df20 	.word	0x2000df20
    f1a0:	2000288c 	.word	0x2000288c
    f1a4:	2000dfc0 	.word	0x2000dfc0
    f1a8:	200028ac 	.word	0x200028ac
    f1ac:	200028d8 	.word	0x200028d8
    f1b0:	0000eebd 	.word	0x0000eebd
    f1b4:	0000eef5 	.word	0x0000eef5

0000f1b8 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
    f1b8:	b580      	push	{r7, lr}
    f1ba:	af00      	add	r7, sp, #0
    f1bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f1c0:	2001      	movs	r0, #1
    f1c2:	4b01      	ldr	r3, [pc, #4]	; (f1c8 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10>)
    f1c4:	4798      	blx	r3
    f1c6:	bd80      	pop	{r7, pc}
    f1c8:	0000f079 	.word	0x0000f079

0000f1cc <_ZN23Compresor_I2C_InterfaceC1Ev>:
#include "Compresor_I2C_Interface.h"

//static	MCP23008_Class expandersCompresorStatic;
static	MCP23008_Class local_expanders_compressor[2];
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
    f1cc:	b480      	push	{r7}
    f1ce:	b083      	sub	sp, #12
    f1d0:	af00      	add	r7, sp, #0
    f1d2:	6078      	str	r0, [r7, #4]
{
	i2c=&i2cSharedStatic;
    f1d4:	687b      	ldr	r3, [r7, #4]
    f1d6:	4a05      	ldr	r2, [pc, #20]	; (f1ec <_ZN23Compresor_I2C_InterfaceC1Ev+0x20>)
    f1d8:	609a      	str	r2, [r3, #8]
	isOK=false;
    f1da:	687b      	ldr	r3, [r7, #4]
    f1dc:	2200      	movs	r2, #0
    f1de:	731a      	strb	r2, [r3, #12]
} //Compresor_I2C_Interface
    f1e0:	687b      	ldr	r3, [r7, #4]
    f1e2:	4618      	mov	r0, r3
    f1e4:	370c      	adds	r7, #12
    f1e6:	46bd      	mov	sp, r7
    f1e8:	bc80      	pop	{r7}
    f1ea:	4770      	bx	lr
    f1ec:	20002a98 	.word	0x20002a98

0000f1f0 <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
    f1f0:	b480      	push	{r7}
    f1f2:	b083      	sub	sp, #12
    f1f4:	af00      	add	r7, sp, #0
    f1f6:	6078      	str	r0, [r7, #4]
{
} //~Compresor_I2C_Interface
    f1f8:	687b      	ldr	r3, [r7, #4]
    f1fa:	4618      	mov	r0, r3
    f1fc:	370c      	adds	r7, #12
    f1fe:	46bd      	mov	sp, r7
    f200:	bc80      	pop	{r7}
    f202:	4770      	bx	lr

0000f204 <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
    f204:	b580      	push	{r7, lr}
    f206:	b082      	sub	sp, #8
    f208:	af00      	add	r7, sp, #0
    f20a:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
    f20c:	687b      	ldr	r3, [r7, #4]
    f20e:	689b      	ldr	r3, [r3, #8]
    f210:	7a1b      	ldrb	r3, [r3, #8]
    f212:	b2db      	uxtb	r3, r3
    f214:	2b00      	cmp	r3, #0
    f216:	d104      	bne.n	f222 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1e>
	{
	} 
	else
	{
		
		i2c->Init();
    f218:	687b      	ldr	r3, [r7, #4]
    f21a:	689b      	ldr	r3, [r3, #8]
    f21c:	4618      	mov	r0, r3
    f21e:	4b1c      	ldr	r3, [pc, #112]	; (f290 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x8c>)
    f220:	4798      	blx	r3
	}
	if (i2c->isOK)
    f222:	687b      	ldr	r3, [r7, #4]
    f224:	689b      	ldr	r3, [r3, #8]
    f226:	7a5b      	ldrb	r3, [r3, #9]
    f228:	b2db      	uxtb	r3, r3
    f22a:	2b00      	cmp	r3, #0
    f22c:	d028      	beq.n	f280 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7c>
	{
		expander[0]=&local_expanders_compressor[0];
    f22e:	687b      	ldr	r3, [r7, #4]
    f230:	4a18      	ldr	r2, [pc, #96]	; (f294 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x90>)
    f232:	611a      	str	r2, [r3, #16]
		expander[0]->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
    f234:	687b      	ldr	r3, [r7, #4]
    f236:	6918      	ldr	r0, [r3, #16]
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	689b      	ldr	r3, [r3, #8]
    f23c:	461a      	mov	r2, r3
    f23e:	2125      	movs	r1, #37	; 0x25
    f240:	4b15      	ldr	r3, [pc, #84]	; (f298 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f242:	4798      	blx	r3
		expander[0]->SetPortInput(0xf0);
    f244:	687b      	ldr	r3, [r7, #4]
    f246:	691b      	ldr	r3, [r3, #16]
    f248:	21f0      	movs	r1, #240	; 0xf0
    f24a:	4618      	mov	r0, r3
    f24c:	4b13      	ldr	r3, [pc, #76]	; (f29c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x98>)
    f24e:	4798      	blx	r3
				expander[1]=&local_expanders_compressor[1];
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	4a13      	ldr	r2, [pc, #76]	; (f2a0 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x9c>)
    f254:	615a      	str	r2, [r3, #20]
				expander[1]->Init(COMPRESOR_MCP23008_ADDRESS+1,i2c);
    f256:	687b      	ldr	r3, [r7, #4]
    f258:	6958      	ldr	r0, [r3, #20]
    f25a:	687b      	ldr	r3, [r7, #4]
    f25c:	689b      	ldr	r3, [r3, #8]
    f25e:	461a      	mov	r2, r3
    f260:	2126      	movs	r1, #38	; 0x26
    f262:	4b0d      	ldr	r3, [pc, #52]	; (f298 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f264:	4798      	blx	r3
				expander[1]->SetPortInput();
    f266:	687b      	ldr	r3, [r7, #4]
    f268:	695b      	ldr	r3, [r3, #20]
    f26a:	4618      	mov	r0, r3
    f26c:	4b0d      	ldr	r3, [pc, #52]	; (f2a4 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa0>)
    f26e:	4798      	blx	r3
	//	expander->SetPortOutput();
		isOK=SelfTest();
    f270:	6878      	ldr	r0, [r7, #4]
    f272:	4b0d      	ldr	r3, [pc, #52]	; (f2a8 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa4>)
    f274:	4798      	blx	r3
    f276:	4603      	mov	r3, r0
    f278:	461a      	mov	r2, r3
    f27a:	687b      	ldr	r3, [r7, #4]
    f27c:	731a      	strb	r2, [r3, #12]
    f27e:	e000      	b.n	f282 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7e>
	}
	else
	{
		asm("nop");
    f280:	bf00      	nop
	}
	//isOK=i2c->isOK;
		return isOK;
    f282:	687b      	ldr	r3, [r7, #4]
    f284:	7b1b      	ldrb	r3, [r3, #12]
}
    f286:	4618      	mov	r0, r3
    f288:	3708      	adds	r7, #8
    f28a:	46bd      	mov	sp, r7
    f28c:	bd80      	pop	{r7, pc}
    f28e:	bf00      	nop
    f290:	0000fa59 	.word	0x0000fa59
    f294:	20002ab0 	.word	0x20002ab0
    f298:	0000fc0d 	.word	0x0000fc0d
    f29c:	0000fdf5 	.word	0x0000fdf5
    f2a0:	20002acc 	.word	0x20002acc
    f2a4:	0000fdb1 	.word	0x0000fdb1
    f2a8:	0000f3a1 	.word	0x0000f3a1

0000f2ac <_ZN23Compresor_I2C_Interface10ReadStatusEv>:

uint8_t	Compresor_I2C_Interface::ReadStatus(void){
    f2ac:	b580      	push	{r7, lr}
    f2ae:	b084      	sub	sp, #16
    f2b0:	af00      	add	r7, sp, #0
    f2b2:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[0]->ReadGPIORegister();
    f2b4:	687b      	ldr	r3, [r7, #4]
    f2b6:	691b      	ldr	r3, [r3, #16]
    f2b8:	4618      	mov	r0, r3
    f2ba:	4b04      	ldr	r3, [pc, #16]	; (f2cc <_ZN23Compresor_I2C_Interface10ReadStatusEv+0x20>)
    f2bc:	4798      	blx	r3
    f2be:	4603      	mov	r3, r0
    f2c0:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f2c2:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f2c4:	4618      	mov	r0, r3
    f2c6:	3710      	adds	r7, #16
    f2c8:	46bd      	mov	sp, r7
    f2ca:	bd80      	pop	{r7, pc}
    f2cc:	0000fcf1 	.word	0x0000fcf1

0000f2d0 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv>:
uint8_t	Compresor_I2C_Interface::ReadPressureLimits(void){
    f2d0:	b580      	push	{r7, lr}
    f2d2:	b084      	sub	sp, #16
    f2d4:	af00      	add	r7, sp, #0
    f2d6:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[1]->ReadGPIORegister();
    f2d8:	687b      	ldr	r3, [r7, #4]
    f2da:	695b      	ldr	r3, [r3, #20]
    f2dc:	4618      	mov	r0, r3
    f2de:	4b04      	ldr	r3, [pc, #16]	; (f2f0 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv+0x20>)
    f2e0:	4798      	blx	r3
    f2e2:	4603      	mov	r3, r0
    f2e4:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f2e6:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f2e8:	4618      	mov	r0, r3
    f2ea:	3710      	adds	r7, #16
    f2ec:	46bd      	mov	sp, r7
    f2ee:	bd80      	pop	{r7, pc}
    f2f0:	0000fcf1 	.word	0x0000fcf1

0000f2f4 <_ZN23Compresor_I2C_Interface9SetEnableEb>:
uint8_t	Compresor_I2C_Interface::SetEnable(bool state){
    f2f4:	b580      	push	{r7, lr}
    f2f6:	b082      	sub	sp, #8
    f2f8:	af00      	add	r7, sp, #0
    f2fa:	6078      	str	r0, [r7, #4]
    f2fc:	460b      	mov	r3, r1
    f2fe:	70fb      	strb	r3, [r7, #3]

	enabled=expander[0]->WriteDigit(0,state);
    f300:	687b      	ldr	r3, [r7, #4]
    f302:	691b      	ldr	r3, [r3, #16]
    f304:	78fa      	ldrb	r2, [r7, #3]
    f306:	2100      	movs	r1, #0
    f308:	4618      	mov	r0, r3
    f30a:	4b06      	ldr	r3, [pc, #24]	; (f324 <_ZN23Compresor_I2C_Interface9SetEnableEb+0x30>)
    f30c:	4798      	blx	r3
    f30e:	4603      	mov	r3, r0
    f310:	461a      	mov	r2, r3
    f312:	687b      	ldr	r3, [r7, #4]
    f314:	735a      	strb	r2, [r3, #13]
	return uint8_t(enabled);
    f316:	687b      	ldr	r3, [r7, #4]
    f318:	7b5b      	ldrb	r3, [r3, #13]
}
    f31a:	4618      	mov	r0, r3
    f31c:	3708      	adds	r7, #8
    f31e:	46bd      	mov	sp, r7
    f320:	bd80      	pop	{r7, pc}
    f322:	bf00      	nop
    f324:	0000ffa9 	.word	0x0000ffa9

0000f328 <_ZN23Compresor_I2C_Interface9IsEnabledEv>:

	enabled=expander[0]->WriteDigit(2,!state);
	return uint8_t(enabled);
}

bool Compresor_I2C_Interface::IsEnabled(void){
    f328:	b580      	push	{r7, lr}
    f32a:	b084      	sub	sp, #16
    f32c:	af00      	add	r7, sp, #0
    f32e:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f330:	687b      	ldr	r3, [r7, #4]
    f332:	691b      	ldr	r3, [r3, #16]
    f334:	4618      	mov	r0, r3
    f336:	4b0a      	ldr	r3, [pc, #40]	; (f360 <_ZN23Compresor_I2C_Interface9IsEnabledEv+0x38>)
    f338:	4798      	blx	r3
    f33a:	4603      	mov	r3, r0
    f33c:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f33e:	7bfb      	ldrb	r3, [r7, #15]
    f340:	f003 0301 	and.w	r3, r3, #1
    f344:	2b00      	cmp	r3, #0
    f346:	bf14      	ite	ne
    f348:	2301      	movne	r3, #1
    f34a:	2300      	moveq	r3, #0
    f34c:	b2da      	uxtb	r2, r3
    f34e:	687b      	ldr	r3, [r7, #4]
    f350:	735a      	strb	r2, [r3, #13]
	return enabled;
    f352:	687b      	ldr	r3, [r7, #4]
    f354:	7b5b      	ldrb	r3, [r3, #13]
}
    f356:	4618      	mov	r0, r3
    f358:	3710      	adds	r7, #16
    f35a:	46bd      	mov	sp, r7
    f35c:	bd80      	pop	{r7, pc}
    f35e:	bf00      	nop
    f360:	0000fcf1 	.word	0x0000fcf1

0000f364 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv>:
bool* Compresor_I2C_Interface::IsEnabledPointer(void){
    f364:	b580      	push	{r7, lr}
    f366:	b084      	sub	sp, #16
    f368:	af00      	add	r7, sp, #0
    f36a:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f36c:	687b      	ldr	r3, [r7, #4]
    f36e:	691b      	ldr	r3, [r3, #16]
    f370:	4618      	mov	r0, r3
    f372:	4b0a      	ldr	r3, [pc, #40]	; (f39c <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv+0x38>)
    f374:	4798      	blx	r3
    f376:	4603      	mov	r3, r0
    f378:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f37a:	7bfb      	ldrb	r3, [r7, #15]
    f37c:	f003 0301 	and.w	r3, r3, #1
    f380:	2b00      	cmp	r3, #0
    f382:	bf14      	ite	ne
    f384:	2301      	movne	r3, #1
    f386:	2300      	moveq	r3, #0
    f388:	b2da      	uxtb	r2, r3
    f38a:	687b      	ldr	r3, [r7, #4]
    f38c:	735a      	strb	r2, [r3, #13]
	return &enabled;
    f38e:	687b      	ldr	r3, [r7, #4]
    f390:	330d      	adds	r3, #13
}
    f392:	4618      	mov	r0, r3
    f394:	3710      	adds	r7, #16
    f396:	46bd      	mov	sp, r7
    f398:	bd80      	pop	{r7, pc}
    f39a:	bf00      	nop
    f39c:	0000fcf1 	.word	0x0000fcf1

0000f3a0 <_ZN23Compresor_I2C_Interface8SelfTestEv>:

bool Compresor_I2C_Interface::SelfTest(void){
    f3a0:	b480      	push	{r7}
    f3a2:	b085      	sub	sp, #20
    f3a4:	af00      	add	r7, sp, #0
    f3a6:	6078      	str	r0, [r7, #4]
	bool result=true;
    f3a8:	2301      	movs	r3, #1
    f3aa:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
    f3ac:	2300      	movs	r3, #0
    f3ae:	73fb      	strb	r3, [r7, #15]
    f3b0:	7bfb      	ldrb	r3, [r7, #15]
    f3b2:	2b03      	cmp	r3, #3
    f3b4:	dc03      	bgt.n	f3be <_ZN23Compresor_I2C_Interface8SelfTestEv+0x1e>
    f3b6:	7bfb      	ldrb	r3, [r7, #15]
    f3b8:	3301      	adds	r3, #1
    f3ba:	73fb      	strb	r3, [r7, #15]
    f3bc:	e7f8      	b.n	f3b0 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x10>
		
		
	}
	

	return result;
    f3be:	7bbb      	ldrb	r3, [r7, #14]
    f3c0:	4618      	mov	r0, r3
    f3c2:	3714      	adds	r7, #20
    f3c4:	46bd      	mov	sp, r7
    f3c6:	bc80      	pop	{r7}
    f3c8:	4770      	bx	lr
	...

0000f3cc <__tcf_0>:
static	MCP23008_Class local_expanders_compressor[2];
    f3cc:	b590      	push	{r4, r7, lr}
    f3ce:	b083      	sub	sp, #12
    f3d0:	af00      	add	r7, sp, #0
    f3d2:	6078      	str	r0, [r7, #4]
    f3d4:	4c05      	ldr	r4, [pc, #20]	; (f3ec <__tcf_0+0x20>)
    f3d6:	4b06      	ldr	r3, [pc, #24]	; (f3f0 <__tcf_0+0x24>)
    f3d8:	429c      	cmp	r4, r3
    f3da:	d004      	beq.n	f3e6 <__tcf_0+0x1a>
    f3dc:	3c1c      	subs	r4, #28
    f3de:	4620      	mov	r0, r4
    f3e0:	4b04      	ldr	r3, [pc, #16]	; (f3f4 <__tcf_0+0x28>)
    f3e2:	4798      	blx	r3
    f3e4:	e7f7      	b.n	f3d6 <__tcf_0+0xa>
    f3e6:	370c      	adds	r7, #12
    f3e8:	46bd      	mov	sp, r7
    f3ea:	bd90      	pop	{r4, r7, pc}
    f3ec:	20002ae8 	.word	0x20002ae8
    f3f0:	20002ab0 	.word	0x20002ab0
    f3f4:	0000fbf9 	.word	0x0000fbf9

0000f3f8 <_Z41__static_initialization_and_destruction_0ii>:
    f3f8:	b5b0      	push	{r4, r5, r7, lr}
    f3fa:	b082      	sub	sp, #8
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	6078      	str	r0, [r7, #4]
    f400:	6039      	str	r1, [r7, #0]
    f402:	687b      	ldr	r3, [r7, #4]
    f404:	2b01      	cmp	r3, #1
    f406:	d11d      	bne.n	f444 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f408:	683b      	ldr	r3, [r7, #0]
    f40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f40e:	4293      	cmp	r3, r2
    f410:	d118      	bne.n	f444 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f412:	490e      	ldr	r1, [pc, #56]	; (f44c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f414:	480e      	ldr	r0, [pc, #56]	; (f450 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f416:	4b0f      	ldr	r3, [pc, #60]	; (f454 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f418:	4798      	blx	r3
    f41a:	4a0f      	ldr	r2, [pc, #60]	; (f458 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f41c:	490f      	ldr	r1, [pc, #60]	; (f45c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f41e:	480c      	ldr	r0, [pc, #48]	; (f450 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f420:	4b0f      	ldr	r3, [pc, #60]	; (f460 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f422:	4798      	blx	r3
static	MCP23008_Class local_expanders_compressor[2];
    f424:	4b0f      	ldr	r3, [pc, #60]	; (f464 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    f426:	2401      	movs	r4, #1
    f428:	461d      	mov	r5, r3
    f42a:	2c00      	cmp	r4, #0
    f42c:	db05      	blt.n	f43a <_Z41__static_initialization_and_destruction_0ii+0x42>
    f42e:	4628      	mov	r0, r5
    f430:	4b0d      	ldr	r3, [pc, #52]	; (f468 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    f432:	4798      	blx	r3
    f434:	351c      	adds	r5, #28
    f436:	3c01      	subs	r4, #1
    f438:	e7f7      	b.n	f42a <_Z41__static_initialization_and_destruction_0ii+0x32>
    f43a:	4a07      	ldr	r2, [pc, #28]	; (f458 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f43c:	490b      	ldr	r1, [pc, #44]	; (f46c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    f43e:	2000      	movs	r0, #0
    f440:	4b07      	ldr	r3, [pc, #28]	; (f460 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f442:	4798      	blx	r3
    f444:	bf00      	nop
    f446:	3708      	adds	r7, #8
    f448:	46bd      	mov	sp, r7
    f44a:	bdb0      	pop	{r4, r5, r7, pc}
    f44c:	2000dfe0 	.word	0x2000dfe0
    f450:	20002a98 	.word	0x20002a98
    f454:	0000fa29 	.word	0x0000fa29
    f458:	20000000 	.word	0x20000000
    f45c:	0000fa45 	.word	0x0000fa45
    f460:	00019fb9 	.word	0x00019fb9
    f464:	20002ab0 	.word	0x20002ab0
    f468:	0000fbe5 	.word	0x0000fbe5
    f46c:	0000f3cd 	.word	0x0000f3cd

0000f470 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
    f470:	b580      	push	{r7, lr}
    f472:	af00      	add	r7, sp, #0
    f474:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f478:	2001      	movs	r0, #1
    f47a:	4b01      	ldr	r3, [pc, #4]	; (f480 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x10>)
    f47c:	4798      	blx	r3
    f47e:	bd80      	pop	{r7, pc}
    f480:	0000f3f9 	.word	0x0000f3f9

0000f484 <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	uint8_t local_tx_data[8];
static bool syncCANOpenTimeoutStatic=false;
static uint16_t local_speed;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
    f484:	b480      	push	{r7}
    f486:	b083      	sub	sp, #12
    f488:	af00      	add	r7, sp, #0
    f48a:	6078      	str	r0, [r7, #4]
	syncCANOpenTimeoutStatic=true;
    f48c:	4b04      	ldr	r3, [pc, #16]	; (f4a0 <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0x1c>)
    f48e:	2201      	movs	r2, #1
    f490:	701a      	strb	r2, [r3, #0]
	asm("nop" );
    f492:	bf00      	nop
}
    f494:	bf00      	nop
    f496:	370c      	adds	r7, #12
    f498:	46bd      	mov	sp, r7
    f49a:	bc80      	pop	{r7}
    f49c:	4770      	bx	lr
    f49e:	bf00      	nop
    f4a0:	20002d7c 	.word	0x20002d7c

0000f4a4 <_ZN28Compressor_CANOpen_InterfaceC1Ev>:

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
    f4a4:	b580      	push	{r7, lr}
    f4a6:	b082      	sub	sp, #8
    f4a8:	af00      	add	r7, sp, #0
    f4aa:	6078      	str	r0, [r7, #4]
    f4ac:	687b      	ldr	r3, [r7, #4]
    f4ae:	4618      	mov	r0, r3
    f4b0:	4b08      	ldr	r3, [pc, #32]	; (f4d4 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x30>)
    f4b2:	4798      	blx	r3
    f4b4:	4a08      	ldr	r2, [pc, #32]	; (f4d8 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x34>)
    f4b6:	687b      	ldr	r3, [r7, #4]
    f4b8:	601a      	str	r2, [r3, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f4ba:	687b      	ldr	r3, [r7, #4]
    f4bc:	4a07      	ldr	r2, [pc, #28]	; (f4dc <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x38>)
    f4be:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f4c2:	687b      	ldr	r3, [r7, #4]
    f4c4:	2201      	movs	r2, #1
    f4c6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
} //Compressor_Can_Interface
    f4ca:	687b      	ldr	r3, [r7, #4]
    f4cc:	4618      	mov	r0, r3
    f4ce:	3708      	adds	r7, #8
    f4d0:	46bd      	mov	sp, r7
    f4d2:	bd80      	pop	{r7, pc}
    f4d4:	000147b9 	.word	0x000147b9
    f4d8:	0001aee8 	.word	0x0001aee8
    f4dc:	20002d7c 	.word	0x20002d7c

0000f4e0 <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
    f4e0:	b580      	push	{r7, lr}
    f4e2:	b082      	sub	sp, #8
    f4e4:	af00      	add	r7, sp, #0
    f4e6:	6078      	str	r0, [r7, #4]
    f4e8:	4a05      	ldr	r2, [pc, #20]	; (f500 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x20>)
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	601a      	str	r2, [r3, #0]
    f4ee:	687b      	ldr	r3, [r7, #4]
    f4f0:	4618      	mov	r0, r3
    f4f2:	4b04      	ldr	r3, [pc, #16]	; (f504 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x24>)
    f4f4:	4798      	blx	r3
{
} //~Compressor_Can_Interface
    f4f6:	687b      	ldr	r3, [r7, #4]
    f4f8:	4618      	mov	r0, r3
    f4fa:	3708      	adds	r7, #8
    f4fc:	46bd      	mov	sp, r7
    f4fe:	bd80      	pop	{r7, pc}
    f500:	0001aee8 	.word	0x0001aee8
    f504:	00014829 	.word	0x00014829

0000f508 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
    f508:	b580      	push	{r7, lr}
    f50a:	b082      	sub	sp, #8
    f50c:	af00      	add	r7, sp, #0
    f50e:	6078      	str	r0, [r7, #4]
	tx_can_buffer=local_tx_data;
    f510:	687b      	ldr	r3, [r7, #4]
    f512:	4a1e      	ldr	r2, [pc, #120]	; (f58c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x84>)
    f514:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	speed=&local_speed;
    f518:	687b      	ldr	r3, [r7, #4]
    f51a:	4a1d      	ldr	r2, [pc, #116]	; (f590 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x88>)
    f51c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	4a1c      	ldr	r2, [pc, #112]	; (f594 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x8c>)
    f524:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f528:	687b      	ldr	r3, [r7, #4]
    f52a:	2201      	movs	r2, #1
    f52c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	cano=&canoStatic;
    f530:	687b      	ldr	r3, [r7, #4]
    f532:	4a19      	ldr	r2, [pc, #100]	; (f598 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x90>)
    f534:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	int_result=cano->Init_CO_CLASS(NMT_MASTER_NODE);
    f538:	687b      	ldr	r3, [r7, #4]
    f53a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f53e:	2101      	movs	r1, #1
    f540:	4618      	mov	r0, r3
    f542:	4b16      	ldr	r3, [pc, #88]	; (f59c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x94>)
    f544:	4798      	blx	r3
    f546:	4602      	mov	r2, r0
    f548:	687b      	ldr	r3, [r7, #4]
    f54a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	if (int_result==0)
    f54e:	687b      	ldr	r3, [r7, #4]
    f550:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    f554:	2b00      	cmp	r3, #0
    f556:	d10b      	bne.n	f570 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x68>
	{
	//	cano->SetInitialMode();
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
    f558:	687b      	ldr	r3, [r7, #4]
    f55a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f55e:	2102      	movs	r1, #2
    f560:	4618      	mov	r0, r3
    f562:	4b0f      	ldr	r3, [pc, #60]	; (f5a0 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x98>)
    f564:	4798      	blx	r3
    f566:	4603      	mov	r3, r0
    f568:	461a      	mov	r2, r3
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
    f570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f574:	490b      	ldr	r1, [pc, #44]	; (f5a4 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x9c>)
    f576:	480c      	ldr	r0, [pc, #48]	; (f5a8 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa0>)
    f578:	4b0c      	ldr	r3, [pc, #48]	; (f5ac <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa4>)
    f57a:	4798      	blx	r3
	
	return boolResult;
    f57c:	687b      	ldr	r3, [r7, #4]
    f57e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
	
}
    f582:	4618      	mov	r0, r3
    f584:	3708      	adds	r7, #8
    f586:	46bd      	mov	sp, r7
    f588:	bd80      	pop	{r7, pc}
    f58a:	bf00      	nop
    f58c:	20002d74 	.word	0x20002d74
    f590:	20002d7e 	.word	0x20002d7e
    f594:	20002d7c 	.word	0x20002d7c
    f598:	20002c00 	.word	0x20002c00
    f59c:	00014851 	.word	0x00014851
    f5a0:	00014915 	.word	0x00014915
    f5a4:	0000f485 	.word	0x0000f485
    f5a8:	20002be0 	.word	0x20002be0
    f5ac:	000103b5 	.word	0x000103b5

0000f5b0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:
	

		return (int)reset;
}

void Compressor_CANOpen_Interface::Periodic_Task(void){
    f5b0:	b580      	push	{r7, lr}
    f5b2:	b082      	sub	sp, #8
    f5b4:	af00      	add	r7, sp, #0
    f5b6:	6078      	str	r0, [r7, #4]
	
	if (syncCANOpenTimeoutStatic)
    f5b8:	4b37      	ldr	r3, [pc, #220]	; (f698 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d066      	beq.n	f68e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xde>
	{
		//Comporesor_Process();
		if ( cano->ptrCO->CANmodule[0]->CANnormal)
    f5c0:	687b      	ldr	r3, [r7, #4]
    f5c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f5c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    f5ca:	681b      	ldr	r3, [r3, #0]
    f5cc:	7d1b      	ldrb	r3, [r3, #20]
    f5ce:	b2db      	uxtb	r3, r3
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	bf14      	ite	ne
    f5d4:	2301      	movne	r3, #1
    f5d6:	2300      	moveq	r3, #0
    f5d8:	b2db      	uxtb	r3, r3
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d04f      	beq.n	f67e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xce>
		{
				syncWas=cano->Send_SYNC_Signal();
    f5de:	687b      	ldr	r3, [r7, #4]
    f5e0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f5e4:	330c      	adds	r3, #12
    f5e6:	4618      	mov	r0, r3
    f5e8:	4b2c      	ldr	r3, [pc, #176]	; (f69c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xec>)
    f5ea:	4798      	blx	r3
    f5ec:	4603      	mov	r3, r0
    f5ee:	461a      	mov	r2, r3
    f5f0:	687b      	ldr	r3, [r7, #4]
    f5f2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
				if (syncWas==0)
    f5f6:	687b      	ldr	r3, [r7, #4]
    f5f8:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
    f5fc:	2b00      	cmp	r3, #0
    f5fe:	d107      	bne.n	f610 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x60>
				{
					//cano->Pass_Temperature_To_voltage();
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    f606:	4a26      	ldr	r2, [pc, #152]	; (f6a0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f608:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f60c:	801a      	strh	r2, [r3, #0]
    f60e:	e006      	b.n	f61e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x6e>
				//	current_speed=(uint16_t)(CO_OD_RAM.voltage)
				} 
				else
				{
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f610:	687b      	ldr	r3, [r7, #4]
    f612:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    f616:	4a22      	ldr	r2, [pc, #136]	; (f6a0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f618:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f61c:	801a      	strh	r2, [r3, #0]
				}
				is_enabled=ccu.IsEnabled();
    f61e:	4821      	ldr	r0, [pc, #132]	; (f6a4 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf4>)
    f620:	4b21      	ldr	r3, [pc, #132]	; (f6a8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf8>)
    f622:	4798      	blx	r3
    f624:	4603      	mov	r3, r0
    f626:	461a      	mov	r2, r3
    f628:	687b      	ldr	r3, [r7, #4]
    f62a:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
				if ((is_enabled))
    f62e:	687b      	ldr	r3, [r7, #4]
    f630:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
    f634:	2b00      	cmp	r3, #0
    f636:	d00b      	beq.n	f650 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xa0>
				{
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f638:	687b      	ldr	r3, [r7, #4]
    f63a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f63e:	8819      	ldrh	r1, [r3, #0]
    f640:	687b      	ldr	r3, [r7, #4]
    f642:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    f646:	461a      	mov	r2, r3
    f648:	6878      	ldr	r0, [r7, #4]
    f64a:	4b18      	ldr	r3, [pc, #96]	; (f6ac <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f64c:	4798      	blx	r3
    f64e:	e00a      	b.n	f666 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xb6>
					
				}else{
					
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f656:	8819      	ldrh	r1, [r3, #0]
    f658:	687b      	ldr	r3, [r7, #4]
    f65a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    f65e:	461a      	mov	r2, r3
    f660:	6878      	ldr	r0, [r7, #4]
    f662:	4b12      	ldr	r3, [pc, #72]	; (f6ac <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f664:	4798      	blx	r3
				}
				cano->Send_Simple_Run_Command(tx_can_buffer,CCU_CANOPEN_NODE);
    f666:	687b      	ldr	r3, [r7, #4]
    f668:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f66c:	f103 0014 	add.w	r0, r3, #20
    f670:	687b      	ldr	r3, [r7, #4]
    f672:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    f676:	2202      	movs	r2, #2
    f678:	4619      	mov	r1, r3
    f67a:	4b0d      	ldr	r3, [pc, #52]	; (f6b0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x100>)
    f67c:	4798      	blx	r3
			//	cano->CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
    f67e:	4b06      	ldr	r3, [pc, #24]	; (f698 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f680:	2200      	movs	r2, #0
    f682:	701a      	strb	r2, [r3, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),100);
    f684:	2264      	movs	r2, #100	; 0x64
    f686:	490b      	ldr	r1, [pc, #44]	; (f6b4 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x104>)
    f688:	480b      	ldr	r0, [pc, #44]	; (f6b8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x108>)
    f68a:	4b0c      	ldr	r3, [pc, #48]	; (f6bc <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x10c>)
    f68c:	4798      	blx	r3
	} 
	else
	{
	}

}
    f68e:	bf00      	nop
    f690:	3708      	adds	r7, #8
    f692:	46bd      	mov	sp, r7
    f694:	bd80      	pop	{r7, pc}
    f696:	bf00      	nop
    f698:	20002d7c 	.word	0x20002d7c
    f69c:	00017e99 	.word	0x00017e99
    f6a0:	20000220 	.word	0x20000220
    f6a4:	20002a74 	.word	0x20002a74
    f6a8:	0000f329 	.word	0x0000f329
    f6ac:	0000f6c1 	.word	0x0000f6c1
    f6b0:	00017191 	.word	0x00017191
    f6b4:	0000f485 	.word	0x0000f485
    f6b8:	20002be0 	.word	0x20002be0
    f6bc:	000103b5 	.word	0x000103b5

0000f6c0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh>:

void	Compressor_CANOpen_Interface::Convert_Uint16_Array(uint16_t sp, uint8_t * arr){
    f6c0:	b480      	push	{r7}
    f6c2:	b087      	sub	sp, #28
    f6c4:	af00      	add	r7, sp, #0
    f6c6:	60f8      	str	r0, [r7, #12]
    f6c8:	460b      	mov	r3, r1
    f6ca:	607a      	str	r2, [r7, #4]
    f6cc:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++)
    f6ce:	2300      	movs	r3, #0
    f6d0:	75fb      	strb	r3, [r7, #23]
    f6d2:	7dfb      	ldrb	r3, [r7, #23]
    f6d4:	2b07      	cmp	r3, #7
    f6d6:	dc18      	bgt.n	f70a <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x4a>
	{
		if (i<2)
    f6d8:	7dfb      	ldrb	r3, [r7, #23]
    f6da:	2b01      	cmp	r3, #1
    f6dc:	dc0d      	bgt.n	f6fa <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x3a>
		{
			local_tx_data[i]=(uint8_t)(((*speed)>>8*i)&0x00ff);
    f6de:	7dfb      	ldrb	r3, [r7, #23]
    f6e0:	68fa      	ldr	r2, [r7, #12]
    f6e2:	f8d2 2190 	ldr.w	r2, [r2, #400]	; 0x190
    f6e6:	8812      	ldrh	r2, [r2, #0]
    f6e8:	4611      	mov	r1, r2
    f6ea:	7dfa      	ldrb	r2, [r7, #23]
    f6ec:	00d2      	lsls	r2, r2, #3
    f6ee:	fa41 f202 	asr.w	r2, r1, r2
    f6f2:	b2d1      	uxtb	r1, r2
    f6f4:	4a08      	ldr	r2, [pc, #32]	; (f718 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f6f6:	54d1      	strb	r1, [r2, r3]
    f6f8:	e003      	b.n	f702 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x42>
		}else{
			local_tx_data[i]=0;
    f6fa:	7dfb      	ldrb	r3, [r7, #23]
    f6fc:	4a06      	ldr	r2, [pc, #24]	; (f718 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f6fe:	2100      	movs	r1, #0
    f700:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
    f702:	7dfb      	ldrb	r3, [r7, #23]
    f704:	3301      	adds	r3, #1
    f706:	75fb      	strb	r3, [r7, #23]
    f708:	e7e3      	b.n	f6d2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x12>
		}
		
	}
	arr=local_tx_data;
    f70a:	4b03      	ldr	r3, [pc, #12]	; (f718 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f70c:	607b      	str	r3, [r7, #4]
}
    f70e:	bf00      	nop
    f710:	371c      	adds	r7, #28
    f712:	46bd      	mov	sp, r7
    f714:	bc80      	pop	{r7}
    f716:	4770      	bx	lr
    f718:	20002d74 	.word	0x20002d74

0000f71c <_ZN28Compressor_CANOpen_Interface14Set_CAN_EnableEPb>:

bool Compressor_CANOpen_Interface::Set_CAN_Enable(bool *st){
    f71c:	b480      	push	{r7}
    f71e:	b083      	sub	sp, #12
    f720:	af00      	add	r7, sp, #0
    f722:	6078      	str	r0, [r7, #4]
    f724:	6039      	str	r1, [r7, #0]
	enable=st;
    f726:	687b      	ldr	r3, [r7, #4]
    f728:	683a      	ldr	r2, [r7, #0]
    f72a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	return  *enable;
    f72e:	687b      	ldr	r3, [r7, #4]
    f730:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    f734:	781b      	ldrb	r3, [r3, #0]
}
    f736:	4618      	mov	r0, r3
    f738:	370c      	adds	r7, #12
    f73a:	46bd      	mov	sp, r7
    f73c:	bc80      	pop	{r7}
    f73e:	4770      	bx	lr

0000f740 <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt>:

void	Compressor_CANOpen_Interface::Set_Motor_Speed(uint16_t sp){
    f740:	b480      	push	{r7}
    f742:	b083      	sub	sp, #12
    f744:	af00      	add	r7, sp, #0
    f746:	6078      	str	r0, [r7, #4]
    f748:	460b      	mov	r3, r1
    f74a:	807b      	strh	r3, [r7, #2]
	*speed=sp;
    f74c:	687b      	ldr	r3, [r7, #4]
    f74e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f752:	887a      	ldrh	r2, [r7, #2]
    f754:	801a      	strh	r2, [r3, #0]
}
    f756:	bf00      	nop
    f758:	370c      	adds	r7, #12
    f75a:	46bd      	mov	sp, r7
    f75c:	bc80      	pop	{r7}
    f75e:	4770      	bx	lr

0000f760 <_Z41__static_initialization_and_destruction_0ii>:
    f760:	b580      	push	{r7, lr}
    f762:	b082      	sub	sp, #8
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	6039      	str	r1, [r7, #0]
    f76a:	687b      	ldr	r3, [r7, #4]
    f76c:	2b01      	cmp	r3, #1
    f76e:	d15e      	bne.n	f82e <_Z41__static_initialization_and_destruction_0ii+0xce>
    f770:	683b      	ldr	r3, [r7, #0]
    f772:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f776:	4293      	cmp	r3, r2
    f778:	d159      	bne.n	f82e <_Z41__static_initialization_and_destruction_0ii+0xce>
    f77a:	492f      	ldr	r1, [pc, #188]	; (f838 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f77c:	482f      	ldr	r0, [pc, #188]	; (f83c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f77e:	4b30      	ldr	r3, [pc, #192]	; (f840 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f780:	4798      	blx	r3
    f782:	4a30      	ldr	r2, [pc, #192]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f784:	4930      	ldr	r1, [pc, #192]	; (f848 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f786:	482d      	ldr	r0, [pc, #180]	; (f83c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f788:	4b30      	ldr	r3, [pc, #192]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f78a:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f78c:	4930      	ldr	r1, [pc, #192]	; (f850 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f78e:	4831      	ldr	r0, [pc, #196]	; (f854 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f790:	4b31      	ldr	r3, [pc, #196]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f792:	4798      	blx	r3
    f794:	4a2b      	ldr	r2, [pc, #172]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f796:	4931      	ldr	r1, [pc, #196]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f798:	482e      	ldr	r0, [pc, #184]	; (f854 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f79a:	4b2c      	ldr	r3, [pc, #176]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f79c:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f79e:	4930      	ldr	r1, [pc, #192]	; (f860 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f7a0:	4830      	ldr	r0, [pc, #192]	; (f864 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f7a2:	4b2d      	ldr	r3, [pc, #180]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f7a4:	4798      	blx	r3
    f7a6:	4a27      	ldr	r2, [pc, #156]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f7a8:	492c      	ldr	r1, [pc, #176]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f7aa:	482e      	ldr	r0, [pc, #184]	; (f864 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f7ac:	4b27      	ldr	r3, [pc, #156]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f7ae:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f7b0:	492d      	ldr	r1, [pc, #180]	; (f868 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f7b2:	482e      	ldr	r0, [pc, #184]	; (f86c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f7b4:	4b28      	ldr	r3, [pc, #160]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f7b6:	4798      	blx	r3
    f7b8:	4a22      	ldr	r2, [pc, #136]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f7ba:	4928      	ldr	r1, [pc, #160]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f7bc:	482b      	ldr	r0, [pc, #172]	; (f86c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f7be:	4b23      	ldr	r3, [pc, #140]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f7c0:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f7c2:	492b      	ldr	r1, [pc, #172]	; (f870 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f7c4:	482b      	ldr	r0, [pc, #172]	; (f874 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f7c6:	4b24      	ldr	r3, [pc, #144]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f7c8:	4798      	blx	r3
    f7ca:	4a1e      	ldr	r2, [pc, #120]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f7cc:	4923      	ldr	r1, [pc, #140]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f7ce:	4829      	ldr	r0, [pc, #164]	; (f874 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f7d0:	4b1e      	ldr	r3, [pc, #120]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f7d2:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f7d4:	4928      	ldr	r1, [pc, #160]	; (f878 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f7d6:	4829      	ldr	r0, [pc, #164]	; (f87c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f7d8:	4b1f      	ldr	r3, [pc, #124]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f7da:	4798      	blx	r3
    f7dc:	4a19      	ldr	r2, [pc, #100]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f7de:	491f      	ldr	r1, [pc, #124]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f7e0:	4826      	ldr	r0, [pc, #152]	; (f87c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f7e2:	4b1a      	ldr	r3, [pc, #104]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f7e4:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f7e6:	4926      	ldr	r1, [pc, #152]	; (f880 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f7e8:	4826      	ldr	r0, [pc, #152]	; (f884 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f7ea:	4b1b      	ldr	r3, [pc, #108]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f7ec:	4798      	blx	r3
    f7ee:	4a15      	ldr	r2, [pc, #84]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f7f0:	491a      	ldr	r1, [pc, #104]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f7f2:	4824      	ldr	r0, [pc, #144]	; (f884 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f7f4:	4b15      	ldr	r3, [pc, #84]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f7f6:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f7f8:	4923      	ldr	r1, [pc, #140]	; (f888 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f7fa:	4824      	ldr	r0, [pc, #144]	; (f88c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f7fc:	4b16      	ldr	r3, [pc, #88]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f7fe:	4798      	blx	r3
    f800:	4a10      	ldr	r2, [pc, #64]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f802:	4916      	ldr	r1, [pc, #88]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f804:	4821      	ldr	r0, [pc, #132]	; (f88c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f806:	4b11      	ldr	r3, [pc, #68]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f808:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f80a:	4921      	ldr	r1, [pc, #132]	; (f890 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f80c:	4821      	ldr	r0, [pc, #132]	; (f894 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f80e:	4b12      	ldr	r3, [pc, #72]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f810:	4798      	blx	r3
    f812:	4a0c      	ldr	r2, [pc, #48]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f814:	4911      	ldr	r1, [pc, #68]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f816:	481f      	ldr	r0, [pc, #124]	; (f894 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f818:	4b0c      	ldr	r3, [pc, #48]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f81a:	4798      	blx	r3
static	CANOpen_Class canoStatic(&CAN_CCU);
    f81c:	491e      	ldr	r1, [pc, #120]	; (f898 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f81e:	481f      	ldr	r0, [pc, #124]	; (f89c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f820:	4b1f      	ldr	r3, [pc, #124]	; (f8a0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f822:	4798      	blx	r3
    f824:	4a07      	ldr	r2, [pc, #28]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f826:	491f      	ldr	r1, [pc, #124]	; (f8a4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
    f828:	481c      	ldr	r0, [pc, #112]	; (f89c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f82a:	4b08      	ldr	r3, [pc, #32]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f82c:	4798      	blx	r3
}
    f82e:	bf00      	nop
    f830:	3708      	adds	r7, #8
    f832:	46bd      	mov	sp, r7
    f834:	bd80      	pop	{r7, pc}
    f836:	bf00      	nop
    f838:	2000dfe0 	.word	0x2000dfe0
    f83c:	20002ae8 	.word	0x20002ae8
    f840:	0000fa29 	.word	0x0000fa29
    f844:	20000000 	.word	0x20000000
    f848:	0000fa45 	.word	0x0000fa45
    f84c:	00019fb9 	.word	0x00019fb9
    f850:	2000deb0 	.word	0x2000deb0
    f854:	20002b00 	.word	0x20002b00
    f858:	000100e1 	.word	0x000100e1
    f85c:	00010119 	.word	0x00010119
    f860:	2000df44 	.word	0x2000df44
    f864:	20002b20 	.word	0x20002b20
    f868:	2000e068 	.word	0x2000e068
    f86c:	20002b40 	.word	0x20002b40
    f870:	2000df64 	.word	0x2000df64
    f874:	20002b60 	.word	0x20002b60
    f878:	2000e028 	.word	0x2000e028
    f87c:	20002b80 	.word	0x20002b80
    f880:	2000e048 	.word	0x2000e048
    f884:	20002ba0 	.word	0x20002ba0
    f888:	2000df20 	.word	0x2000df20
    f88c:	20002bc0 	.word	0x20002bc0
    f890:	2000dfc0 	.word	0x2000dfc0
    f894:	20002be0 	.word	0x20002be0
    f898:	2000e000 	.word	0x2000e000
    f89c:	20002c00 	.word	0x20002c00
    f8a0:	000147ed 	.word	0x000147ed
    f8a4:	00014829 	.word	0x00014829

0000f8a8 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
    f8a8:	b580      	push	{r7, lr}
    f8aa:	af00      	add	r7, sp, #0
    f8ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f8b0:	2001      	movs	r0, #1
    f8b2:	4b01      	ldr	r3, [pc, #4]	; (f8b8 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0x10>)
    f8b4:	4798      	blx	r3
    f8b6:	bd80      	pop	{r7, pc}
    f8b8:	0000f761 	.word	0x0000f761

0000f8bc <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
    f8bc:	b510      	push	{r4, lr}
    f8be:	4604      	mov	r4, r0
    f8c0:	4b01      	ldr	r3, [pc, #4]	; (f8c8 <_ZN15HEATERS_HANDLERD1Ev+0xc>)
    f8c2:	4798      	blx	r3
{
} //~HEATERS_HANDLER
    f8c4:	4620      	mov	r0, r4
    f8c6:	bd10      	pop	{r4, pc}
    f8c8:	00013b89 	.word	0x00013b89

0000f8cc <__tcf_1>:
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    f8cc:	b570      	push	{r4, r5, r6, lr}
    f8ce:	4c05      	ldr	r4, [pc, #20]	; (f8e4 <__tcf_1+0x18>)
    f8d0:	4e05      	ldr	r6, [pc, #20]	; (f8e8 <__tcf_1+0x1c>)
    f8d2:	f1a4 0570 	sub.w	r5, r4, #112	; 0x70
    f8d6:	3c1c      	subs	r4, #28
    f8d8:	4620      	mov	r0, r4
    f8da:	47b0      	blx	r6
    f8dc:	42ac      	cmp	r4, r5
    f8de:	d1fa      	bne.n	f8d6 <__tcf_1+0xa>
    f8e0:	bd70      	pop	{r4, r5, r6, pc}
    f8e2:	bf00      	nop
    f8e4:	20002df0 	.word	0x20002df0
    f8e8:	0000fbf9 	.word	0x0000fbf9

0000f8ec <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    f8ec:	b510      	push	{r4, lr}
    f8ee:	4803      	ldr	r0, [pc, #12]	; (f8fc <__tcf_0+0x10>)
    f8f0:	4c03      	ldr	r4, [pc, #12]	; (f900 <__tcf_0+0x14>)
    f8f2:	47a0      	blx	r4
    f8f4:	4803      	ldr	r0, [pc, #12]	; (f904 <__tcf_0+0x18>)
    f8f6:	47a0      	blx	r4
    f8f8:	bd10      	pop	{r4, pc}
    f8fa:	bf00      	nop
    f8fc:	20002e14 	.word	0x20002e14
    f900:	00013b89 	.word	0x00013b89
    f904:	20002df0 	.word	0x20002df0

0000f908 <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
    f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f90a:	4604      	mov	r4, r0

	//InitHeaterExpanders();

	heater_expanders=local_heater_expanders;
    f90c:	4b16      	ldr	r3, [pc, #88]	; (f968 <_ZN15HEATERS_HANDLER4InitEv+0x60>)
    f90e:	6303      	str	r3, [r0, #48]	; 0x30
	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
    f910:	3370      	adds	r3, #112	; 0x70
    f912:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i,heater_expanders))
    f914:	4d15      	ldr	r5, [pc, #84]	; (f96c <_ZN15HEATERS_HANDLER4InitEv+0x64>)
		{
			delay_ms(200);
    f916:	4f16      	ldr	r7, [pc, #88]	; (f970 <_ZN15HEATERS_HANDLER4InitEv+0x68>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    f918:	4e16      	ldr	r6, [pc, #88]	; (f974 <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
    f91a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f91c:	2100      	movs	r1, #0
    f91e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f920:	47a8      	blx	r5
    f922:	b930      	cbnz	r0, f932 <_ZN15HEATERS_HANDLER4InitEv+0x2a>
			delay_ms(200);
    f924:	20c8      	movs	r0, #200	; 0xc8
    f926:	47b8      	blx	r7
    f928:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    f92c:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    f930:	e7f3      	b.n	f91a <_ZN15HEATERS_HANDLER4InitEv+0x12>
		module[i]=&local_heaters[i];
    f932:	4b11      	ldr	r3, [pc, #68]	; (f978 <_ZN15HEATERS_HANDLER4InitEv+0x70>)
    f934:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i,heater_expanders))
    f936:	4d0d      	ldr	r5, [pc, #52]	; (f96c <_ZN15HEATERS_HANDLER4InitEv+0x64>)
			delay_ms(200);
    f938:	4f0d      	ldr	r7, [pc, #52]	; (f970 <_ZN15HEATERS_HANDLER4InitEv+0x68>)
    f93a:	4e0e      	ldr	r6, [pc, #56]	; (f974 <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
    f93c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f93e:	2101      	movs	r1, #1
    f940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f942:	47a8      	blx	r5
    f944:	b930      	cbnz	r0, f954 <_ZN15HEATERS_HANDLER4InitEv+0x4c>
			delay_ms(200);
    f946:	20c8      	movs	r0, #200	; 0xc8
    f948:	47b8      	blx	r7
    f94a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    f94e:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    f952:	e7f3      	b.n	f93c <_ZN15HEATERS_HANDLER4InitEv+0x34>
			
		}
	}

	
	isOK=(module[0]->isOK)&(module[1]->isOK);
    f954:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f956:	781a      	ldrb	r2, [r3, #0]
    f958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f95a:	781b      	ldrb	r3, [r3, #0]
    f95c:	4013      	ands	r3, r2
    f95e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
    f962:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
    f966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f968:	20002d80 	.word	0x20002d80
    f96c:	00013b9d 	.word	0x00013b9d
    f970:	00003561 	.word	0x00003561
    f974:	41008000 	.word	0x41008000
    f978:	20002e14 	.word	0x20002e14

0000f97c <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh>:
			heater_expanders=&local_heater_expanders[2*i+j];
		}
	}
}

void	HEATERS_HANDLER::ReadAllGPIOs(uint8_t *buffer){
    f97c:	b570      	push	{r4, r5, r6, lr}
    f97e:	4605      	mov	r5, r0
    f980:	460e      	mov	r6, r1
	for (uint8_t i = 0; i < 2; i++)
	{
	//	heater_data_array[i]=local_heater_expanders[i].ReadGPIORegister();
		module[i]->ReadGPIOs(&buffer[i*2]);
    f982:	6a40      	ldr	r0, [r0, #36]	; 0x24
    f984:	4c02      	ldr	r4, [pc, #8]	; (f990 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh+0x14>)
    f986:	47a0      	blx	r4
    f988:	1cb1      	adds	r1, r6, #2
    f98a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    f98c:	47a0      	blx	r4
    f98e:	bd70      	pop	{r4, r5, r6, pc}
    f990:	00013d29 	.word	0x00013d29

0000f994 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
		//heater_data_array=buffer;
	}
	
}
    f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f996:	4c18      	ldr	r4, [pc, #96]	; (f9f8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x64>)
    f998:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    f99c:	4917      	ldr	r1, [pc, #92]	; (f9fc <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
    f99e:	4628      	mov	r0, r5
    f9a0:	4b17      	ldr	r3, [pc, #92]	; (fa00 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x6c>)
    f9a2:	4798      	blx	r3
    f9a4:	4e17      	ldr	r6, [pc, #92]	; (fa04 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x70>)
    f9a6:	4632      	mov	r2, r6
    f9a8:	4917      	ldr	r1, [pc, #92]	; (fa08 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x74>)
    f9aa:	4628      	mov	r0, r5
    f9ac:	4d17      	ldr	r5, [pc, #92]	; (fa0c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x78>)
    f9ae:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    f9b0:	f104 0070 	add.w	r0, r4, #112	; 0x70
    f9b4:	4f16      	ldr	r7, [pc, #88]	; (fa10 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x7c>)
    f9b6:	47b8      	blx	r7
    f9b8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f9bc:	47b8      	blx	r7
    f9be:	4632      	mov	r2, r6
    f9c0:	4914      	ldr	r1, [pc, #80]	; (fa14 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x80>)
    f9c2:	2000      	movs	r0, #0
    f9c4:	47a8      	blx	r5
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    f9c6:	4620      	mov	r0, r4
    f9c8:	4f13      	ldr	r7, [pc, #76]	; (fa18 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x84>)
    f9ca:	47b8      	blx	r7
    f9cc:	f104 001c 	add.w	r0, r4, #28
    f9d0:	47b8      	blx	r7
    f9d2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f9d6:	47b8      	blx	r7
    f9d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
    f9dc:	47b8      	blx	r7
    f9de:	4632      	mov	r2, r6
    f9e0:	490e      	ldr	r1, [pc, #56]	; (fa1c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x88>)
    f9e2:	2000      	movs	r0, #0
    f9e4:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
    f9e6:	34d0      	adds	r4, #208	; 0xd0
    f9e8:	4620      	mov	r0, r4
    f9ea:	4b0d      	ldr	r3, [pc, #52]	; (fa20 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x8c>)
    f9ec:	4798      	blx	r3
    f9ee:	4632      	mov	r2, r6
    f9f0:	490c      	ldr	r1, [pc, #48]	; (fa24 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x90>)
    f9f2:	4620      	mov	r0, r4
    f9f4:	47a8      	blx	r5
    f9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9f8:	20002d80 	.word	0x20002d80
    f9fc:	2000dfe0 	.word	0x2000dfe0
    fa00:	0000fa29 	.word	0x0000fa29
    fa04:	20000000 	.word	0x20000000
    fa08:	0000fa45 	.word	0x0000fa45
    fa0c:	00019fb9 	.word	0x00019fb9
    fa10:	00013b59 	.word	0x00013b59
    fa14:	0000f8ed 	.word	0x0000f8ed
    fa18:	0000fbe5 	.word	0x0000fbe5
    fa1c:	0000f8cd 	.word	0x0000f8cd
    fa20:	00013b59 	.word	0x00013b59
    fa24:	0000f8bd 	.word	0x0000f8bd

0000fa28 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    fa28:	b480      	push	{r7}
    fa2a:	b083      	sub	sp, #12
    fa2c:	af00      	add	r7, sp, #0
    fa2e:	6078      	str	r0, [r7, #4]
    fa30:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	683a      	ldr	r2, [r7, #0]
    fa36:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    fa38:	687b      	ldr	r3, [r7, #4]
    fa3a:	4618      	mov	r0, r3
    fa3c:	370c      	adds	r7, #12
    fa3e:	46bd      	mov	sp, r7
    fa40:	bc80      	pop	{r7}
    fa42:	4770      	bx	lr

0000fa44 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    fa44:	b480      	push	{r7}
    fa46:	b083      	sub	sp, #12
    fa48:	af00      	add	r7, sp, #0
    fa4a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    fa4c:	687b      	ldr	r3, [r7, #4]
    fa4e:	4618      	mov	r0, r3
    fa50:	370c      	adds	r7, #12
    fa52:	46bd      	mov	sp, r7
    fa54:	bc80      	pop	{r7}
    fa56:	4770      	bx	lr

0000fa58 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    fa58:	b580      	push	{r7, lr}
    fa5a:	b082      	sub	sp, #8
    fa5c:	af00      	add	r7, sp, #0
    fa5e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    fa60:	687b      	ldr	r3, [r7, #4]
    fa62:	4a23      	ldr	r2, [pc, #140]	; (faf0 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fa64:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    fa66:	687b      	ldr	r3, [r7, #4]
    fa68:	4a21      	ldr	r2, [pc, #132]	; (faf0 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fa6a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    fa6c:	687b      	ldr	r3, [r7, #4]
    fa6e:	691a      	ldr	r2, [r3, #16]
    fa70:	687b      	ldr	r3, [r7, #4]
    fa72:	330c      	adds	r3, #12
    fa74:	4619      	mov	r1, r3
    fa76:	4610      	mov	r0, r2
    fa78:	4b1e      	ldr	r3, [pc, #120]	; (faf4 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    fa7a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fa7c:	687b      	ldr	r3, [r7, #4]
    fa7e:	691b      	ldr	r3, [r3, #16]
    fa80:	4618      	mov	r0, r3
    fa82:	4b1d      	ldr	r3, [pc, #116]	; (faf8 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fa84:	4798      	blx	r3
    fa86:	4603      	mov	r3, r0
    fa88:	b2da      	uxtb	r2, r3
    fa8a:	687b      	ldr	r3, [r7, #4]
    fa8c:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    fa8e:	687b      	ldr	r3, [r7, #4]
    fa90:	7d1b      	ldrb	r3, [r3, #20]
    fa92:	2b00      	cmp	r3, #0
    fa94:	bf0c      	ite	eq
    fa96:	2301      	moveq	r3, #1
    fa98:	2300      	movne	r3, #0
    fa9a:	b2da      	uxtb	r2, r3
    fa9c:	687b      	ldr	r3, [r7, #4]
    fa9e:	725a      	strb	r2, [r3, #9]
	if (isOK)
    faa0:	687b      	ldr	r3, [r7, #4]
    faa2:	7a5b      	ldrb	r3, [r3, #9]
    faa4:	b2db      	uxtb	r3, r3
    faa6:	2b00      	cmp	r3, #0
    faa8:	d116      	bne.n	fad8 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	691b      	ldr	r3, [r3, #16]
    faae:	4618      	mov	r0, r3
    fab0:	4b12      	ldr	r3, [pc, #72]	; (fafc <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    fab2:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fab4:	687b      	ldr	r3, [r7, #4]
    fab6:	691b      	ldr	r3, [r3, #16]
    fab8:	4618      	mov	r0, r3
    faba:	4b0f      	ldr	r3, [pc, #60]	; (faf8 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fabc:	4798      	blx	r3
    fabe:	4603      	mov	r3, r0
    fac0:	b2da      	uxtb	r2, r3
    fac2:	687b      	ldr	r3, [r7, #4]
    fac4:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    fac6:	687b      	ldr	r3, [r7, #4]
    fac8:	7d1b      	ldrb	r3, [r3, #20]
    faca:	2b00      	cmp	r3, #0
    facc:	bf0c      	ite	eq
    face:	2301      	moveq	r3, #1
    fad0:	2300      	movne	r3, #0
    fad2:	b2da      	uxtb	r2, r3
    fad4:	687b      	ldr	r3, [r7, #4]
    fad6:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    fad8:	687b      	ldr	r3, [r7, #4]
    fada:	7a5b      	ldrb	r3, [r3, #9]
    fadc:	b2da      	uxtb	r2, r3
    fade:	687b      	ldr	r3, [r7, #4]
    fae0:	721a      	strb	r2, [r3, #8]
	return isOK;
    fae2:	687b      	ldr	r3, [r7, #4]
    fae4:	7a5b      	ldrb	r3, [r3, #9]
    fae6:	b2db      	uxtb	r3, r3
	
}
    fae8:	4618      	mov	r0, r3
    faea:	3708      	adds	r7, #8
    faec:	46bd      	mov	sp, r7
    faee:	bd80      	pop	{r7, pc}
    faf0:	20002ea0 	.word	0x20002ea0
    faf4:	0000394b 	.word	0x0000394b
    faf8:	000038d1 	.word	0x000038d1
    fafc:	000038f1 	.word	0x000038f1

0000fb00 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    fb00:	b580      	push	{r7, lr}
    fb02:	b082      	sub	sp, #8
    fb04:	af00      	add	r7, sp, #0
    fb06:	6078      	str	r0, [r7, #4]
    fb08:	460b      	mov	r3, r1
    fb0a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    fb0c:	687b      	ldr	r3, [r7, #4]
    fb0e:	691b      	ldr	r3, [r3, #16]
    fb10:	78fa      	ldrb	r2, [r7, #3]
    fb12:	b211      	sxth	r1, r2
    fb14:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fb18:	4618      	mov	r0, r3
    fb1a:	4b03      	ldr	r3, [pc, #12]	; (fb28 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    fb1c:	4798      	blx	r3
    fb1e:	4603      	mov	r3, r0
}
    fb20:	4618      	mov	r0, r3
    fb22:	3708      	adds	r7, #8
    fb24:	46bd      	mov	sp, r7
    fb26:	bd80      	pop	{r7, pc}
    fb28:	00003911 	.word	0x00003911

0000fb2c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    fb2c:	b580      	push	{r7, lr}
    fb2e:	b086      	sub	sp, #24
    fb30:	af00      	add	r7, sp, #0
    fb32:	60f8      	str	r0, [r7, #12]
    fb34:	60b9      	str	r1, [r7, #8]
    fb36:	4613      	mov	r3, r2
    fb38:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    fb3a:	68fb      	ldr	r3, [r7, #12]
    fb3c:	68db      	ldr	r3, [r3, #12]
    fb3e:	88fa      	ldrh	r2, [r7, #6]
    fb40:	68b9      	ldr	r1, [r7, #8]
    fb42:	4618      	mov	r0, r3
    fb44:	4b03      	ldr	r3, [pc, #12]	; (fb54 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    fb46:	4798      	blx	r3
    fb48:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    fb4a:	697b      	ldr	r3, [r7, #20]
}
    fb4c:	4618      	mov	r0, r3
    fb4e:	3718      	adds	r7, #24
    fb50:	46bd      	mov	sp, r7
    fb52:	bd80      	pop	{r7, pc}
    fb54:	00017eed 	.word	0x00017eed

0000fb58 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    fb58:	b580      	push	{r7, lr}
    fb5a:	b086      	sub	sp, #24
    fb5c:	af00      	add	r7, sp, #0
    fb5e:	60f8      	str	r0, [r7, #12]
    fb60:	60b9      	str	r1, [r7, #8]
    fb62:	4613      	mov	r3, r2
    fb64:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    fb66:	68fb      	ldr	r3, [r7, #12]
    fb68:	68db      	ldr	r3, [r3, #12]
    fb6a:	88fa      	ldrh	r2, [r7, #6]
    fb6c:	68b9      	ldr	r1, [r7, #8]
    fb6e:	4618      	mov	r0, r3
    fb70:	4b03      	ldr	r3, [pc, #12]	; (fb80 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    fb72:	4798      	blx	r3
    fb74:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    fb76:	697b      	ldr	r3, [r7, #20]
}
    fb78:	4618      	mov	r0, r3
    fb7a:	3718      	adds	r7, #24
    fb7c:	46bd      	mov	sp, r7
    fb7e:	bd80      	pop	{r7, pc}
    fb80:	00017f3d 	.word	0x00017f3d

0000fb84 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    fb84:	b580      	push	{r7, lr}
    fb86:	b082      	sub	sp, #8
    fb88:	af00      	add	r7, sp, #0
    fb8a:	6078      	str	r0, [r7, #4]
    fb8c:	6039      	str	r1, [r7, #0]
    fb8e:	687b      	ldr	r3, [r7, #4]
    fb90:	2b01      	cmp	r3, #1
    fb92:	d10d      	bne.n	fbb0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fb94:	683b      	ldr	r3, [r7, #0]
    fb96:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fb9a:	4293      	cmp	r3, r2
    fb9c:	d108      	bne.n	fbb0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fb9e:	4906      	ldr	r1, [pc, #24]	; (fbb8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    fba0:	4806      	ldr	r0, [pc, #24]	; (fbbc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fba2:	4b07      	ldr	r3, [pc, #28]	; (fbc0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    fba4:	4798      	blx	r3
    fba6:	4a07      	ldr	r2, [pc, #28]	; (fbc4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    fba8:	4907      	ldr	r1, [pc, #28]	; (fbc8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fbaa:	4804      	ldr	r0, [pc, #16]	; (fbbc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fbac:	4b07      	ldr	r3, [pc, #28]	; (fbcc <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fbae:	4798      	blx	r3
    fbb0:	bf00      	nop
    fbb2:	3708      	adds	r7, #8
    fbb4:	46bd      	mov	sp, r7
    fbb6:	bd80      	pop	{r7, pc}
    fbb8:	2000dfe0 	.word	0x2000dfe0
    fbbc:	20002e88 	.word	0x20002e88
    fbc0:	0000fa29 	.word	0x0000fa29
    fbc4:	20000000 	.word	0x20000000
    fbc8:	0000fa45 	.word	0x0000fa45
    fbcc:	00019fb9 	.word	0x00019fb9

0000fbd0 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    fbd0:	b580      	push	{r7, lr}
    fbd2:	af00      	add	r7, sp, #0
    fbd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fbd8:	2001      	movs	r0, #1
    fbda:	4b01      	ldr	r3, [pc, #4]	; (fbe0 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    fbdc:	4798      	blx	r3
    fbde:	bd80      	pop	{r7, pc}
    fbe0:	0000fb85 	.word	0x0000fb85

0000fbe4 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    fbe4:	b480      	push	{r7}
    fbe6:	b083      	sub	sp, #12
    fbe8:	af00      	add	r7, sp, #0
    fbea:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    fbec:	687b      	ldr	r3, [r7, #4]
    fbee:	4618      	mov	r0, r3
    fbf0:	370c      	adds	r7, #12
    fbf2:	46bd      	mov	sp, r7
    fbf4:	bc80      	pop	{r7}
    fbf6:	4770      	bx	lr

0000fbf8 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    fbf8:	b480      	push	{r7}
    fbfa:	b083      	sub	sp, #12
    fbfc:	af00      	add	r7, sp, #0
    fbfe:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    fc00:	687b      	ldr	r3, [r7, #4]
    fc02:	4618      	mov	r0, r3
    fc04:	370c      	adds	r7, #12
    fc06:	46bd      	mov	sp, r7
    fc08:	bc80      	pop	{r7}
    fc0a:	4770      	bx	lr

0000fc0c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    fc0c:	b480      	push	{r7}
    fc0e:	b085      	sub	sp, #20
    fc10:	af00      	add	r7, sp, #0
    fc12:	60f8      	str	r0, [r7, #12]
    fc14:	460b      	mov	r3, r1
    fc16:	607a      	str	r2, [r7, #4]
    fc18:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    fc1a:	687b      	ldr	r3, [r7, #4]
    fc1c:	681a      	ldr	r2, [r3, #0]
    fc1e:	68fb      	ldr	r3, [r7, #12]
    fc20:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    fc22:	687b      	ldr	r3, [r7, #4]
    fc24:	685a      	ldr	r2, [r3, #4]
    fc26:	68fb      	ldr	r3, [r7, #12]
    fc28:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    fc2a:	68fb      	ldr	r3, [r7, #12]
    fc2c:	7afa      	ldrb	r2, [r7, #11]
    fc2e:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    fc30:	68fb      	ldr	r3, [r7, #12]
    fc32:	687a      	ldr	r2, [r7, #4]
    fc34:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    fc36:	68fb      	ldr	r3, [r7, #12]
    fc38:	68db      	ldr	r3, [r3, #12]
    fc3a:	7a5b      	ldrb	r3, [r3, #9]
    fc3c:	b2da      	uxtb	r2, r3
    fc3e:	68fb      	ldr	r3, [r7, #12]
    fc40:	719a      	strb	r2, [r3, #6]
	return isOK;
    fc42:	68fb      	ldr	r3, [r7, #12]
    fc44:	799b      	ldrb	r3, [r3, #6]
    fc46:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    fc48:	4618      	mov	r0, r3
    fc4a:	3714      	adds	r7, #20
    fc4c:	46bd      	mov	sp, r7
    fc4e:	bc80      	pop	{r7}
    fc50:	4770      	bx	lr

0000fc52 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    fc52:	b480      	push	{r7}
    fc54:	b083      	sub	sp, #12
    fc56:	af00      	add	r7, sp, #0
    fc58:	6078      	str	r0, [r7, #4]
    fc5a:	460b      	mov	r3, r1
    fc5c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    fc5e:	78fb      	ldrb	r3, [r7, #3]
    fc60:	f003 0307 	and.w	r3, r3, #7
    fc64:	b2db      	uxtb	r3, r3
}
    fc66:	4618      	mov	r0, r3
    fc68:	370c      	adds	r7, #12
    fc6a:	46bd      	mov	sp, r7
    fc6c:	bc80      	pop	{r7}
    fc6e:	4770      	bx	lr

0000fc70 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    fc70:	b480      	push	{r7}
    fc72:	b083      	sub	sp, #12
    fc74:	af00      	add	r7, sp, #0
    fc76:	6078      	str	r0, [r7, #4]
    fc78:	4608      	mov	r0, r1
    fc7a:	4611      	mov	r1, r2
    fc7c:	461a      	mov	r2, r3
    fc7e:	4603      	mov	r3, r0
    fc80:	70fb      	strb	r3, [r7, #3]
    fc82:	460b      	mov	r3, r1
    fc84:	70bb      	strb	r3, [r7, #2]
    fc86:	4613      	mov	r3, r2
    fc88:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    fc8a:	78fb      	ldrb	r3, [r7, #3]
    fc8c:	2b07      	cmp	r3, #7
    fc8e:	dc01      	bgt.n	fc94 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    fc90:	78bb      	ldrb	r3, [r7, #2]
    fc92:	e000      	b.n	fc96 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    fc94:	787b      	ldrb	r3, [r7, #1]
}
    fc96:	4618      	mov	r0, r3
    fc98:	370c      	adds	r7, #12
    fc9a:	46bd      	mov	sp, r7
    fc9c:	bc80      	pop	{r7}
    fc9e:	4770      	bx	lr

0000fca0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    fca0:	b580      	push	{r7, lr}
    fca2:	b082      	sub	sp, #8
    fca4:	af00      	add	r7, sp, #0
    fca6:	6078      	str	r0, [r7, #4]
    fca8:	460b      	mov	r3, r1
    fcaa:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    fcac:	687b      	ldr	r3, [r7, #4]
    fcae:	68da      	ldr	r2, [r3, #12]
    fcb0:	687b      	ldr	r3, [r7, #4]
    fcb2:	7a1b      	ldrb	r3, [r3, #8]
    fcb4:	4619      	mov	r1, r3
    fcb6:	4610      	mov	r0, r2
    fcb8:	4b0a      	ldr	r3, [pc, #40]	; (fce4 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    fcba:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    fcbc:	687b      	ldr	r3, [r7, #4]
    fcbe:	68db      	ldr	r3, [r3, #12]
    fcc0:	1cf9      	adds	r1, r7, #3
    fcc2:	2201      	movs	r2, #1
    fcc4:	4618      	mov	r0, r3
    fcc6:	4b08      	ldr	r3, [pc, #32]	; (fce8 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    fcc8:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    fcca:	687b      	ldr	r3, [r7, #4]
    fccc:	68db      	ldr	r3, [r3, #12]
    fcce:	6879      	ldr	r1, [r7, #4]
    fcd0:	2201      	movs	r2, #1
    fcd2:	4618      	mov	r0, r3
    fcd4:	4b05      	ldr	r3, [pc, #20]	; (fcec <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    fcd6:	4798      	blx	r3

	return registerValue;
    fcd8:	687b      	ldr	r3, [r7, #4]
    fcda:	781b      	ldrb	r3, [r3, #0]
}
    fcdc:	4618      	mov	r0, r3
    fcde:	3708      	adds	r7, #8
    fce0:	46bd      	mov	sp, r7
    fce2:	bd80      	pop	{r7, pc}
    fce4:	0000fb01 	.word	0x0000fb01
    fce8:	0000fb2d 	.word	0x0000fb2d
    fcec:	0000fb59 	.word	0x0000fb59

0000fcf0 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    fcf0:	b580      	push	{r7, lr}
    fcf2:	b084      	sub	sp, #16
    fcf4:	af00      	add	r7, sp, #0
    fcf6:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    fcf8:	687b      	ldr	r3, [r7, #4]
    fcfa:	68da      	ldr	r2, [r3, #12]
    fcfc:	687b      	ldr	r3, [r7, #4]
    fcfe:	7a1b      	ldrb	r3, [r3, #8]
    fd00:	4619      	mov	r1, r3
    fd02:	4610      	mov	r0, r2
    fd04:	4b06      	ldr	r3, [pc, #24]	; (fd20 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    fd06:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    fd08:	2109      	movs	r1, #9
    fd0a:	6878      	ldr	r0, [r7, #4]
    fd0c:	4b05      	ldr	r3, [pc, #20]	; (fd24 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    fd0e:	4798      	blx	r3
    fd10:	4603      	mov	r3, r0
    fd12:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    fd14:	7bfb      	ldrb	r3, [r7, #15]
}
    fd16:	4618      	mov	r0, r3
    fd18:	3710      	adds	r7, #16
    fd1a:	46bd      	mov	sp, r7
    fd1c:	bd80      	pop	{r7, pc}
    fd1e:	bf00      	nop
    fd20:	0000fb01 	.word	0x0000fb01
    fd24:	0000fca1 	.word	0x0000fca1

0000fd28 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    fd28:	b580      	push	{r7, lr}
    fd2a:	b084      	sub	sp, #16
    fd2c:	af00      	add	r7, sp, #0
    fd2e:	6078      	str	r0, [r7, #4]
    fd30:	460b      	mov	r3, r1
    fd32:	70fb      	strb	r3, [r7, #3]
    fd34:	4613      	mov	r3, r2
    fd36:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	68da      	ldr	r2, [r3, #12]
    fd3c:	687b      	ldr	r3, [r7, #4]
    fd3e:	7a1b      	ldrb	r3, [r3, #8]
    fd40:	4619      	mov	r1, r3
    fd42:	4610      	mov	r0, r2
    fd44:	4b09      	ldr	r3, [pc, #36]	; (fd6c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    fd46:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    fd48:	78fb      	ldrb	r3, [r7, #3]
    fd4a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    fd4c:	78bb      	ldrb	r3, [r7, #2]
    fd4e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    fd50:	687b      	ldr	r3, [r7, #4]
    fd52:	68db      	ldr	r3, [r3, #12]
    fd54:	f107 010c 	add.w	r1, r7, #12
    fd58:	2202      	movs	r2, #2
    fd5a:	4618      	mov	r0, r3
    fd5c:	4b04      	ldr	r3, [pc, #16]	; (fd70 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    fd5e:	4798      	blx	r3
    fd60:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    fd62:	4618      	mov	r0, r3
    fd64:	3710      	adds	r7, #16
    fd66:	46bd      	mov	sp, r7
    fd68:	bd80      	pop	{r7, pc}
    fd6a:	bf00      	nop
    fd6c:	0000fb01 	.word	0x0000fb01
    fd70:	0000fb2d 	.word	0x0000fb2d

0000fd74 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    fd74:	b580      	push	{r7, lr}
    fd76:	b082      	sub	sp, #8
    fd78:	af00      	add	r7, sp, #0
    fd7a:	6078      	str	r0, [r7, #4]
    fd7c:	460b      	mov	r3, r1
    fd7e:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    fd80:	687b      	ldr	r3, [r7, #4]
    fd82:	68da      	ldr	r2, [r3, #12]
    fd84:	687b      	ldr	r3, [r7, #4]
    fd86:	7a1b      	ldrb	r3, [r3, #8]
    fd88:	4619      	mov	r1, r3
    fd8a:	4610      	mov	r0, r2
    fd8c:	4b06      	ldr	r3, [pc, #24]	; (fda8 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    fd8e:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    fd90:	78fb      	ldrb	r3, [r7, #3]
    fd92:	461a      	mov	r2, r3
    fd94:	2109      	movs	r1, #9
    fd96:	6878      	ldr	r0, [r7, #4]
    fd98:	4b04      	ldr	r3, [pc, #16]	; (fdac <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    fd9a:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    fd9c:	78fb      	ldrb	r3, [r7, #3]
}
    fd9e:	4618      	mov	r0, r3
    fda0:	3708      	adds	r7, #8
    fda2:	46bd      	mov	sp, r7
    fda4:	bd80      	pop	{r7, pc}
    fda6:	bf00      	nop
    fda8:	0000fb01 	.word	0x0000fb01
    fdac:	0000fd29 	.word	0x0000fd29

0000fdb0 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    fdb0:	b580      	push	{r7, lr}
    fdb2:	b084      	sub	sp, #16
    fdb4:	af00      	add	r7, sp, #0
    fdb6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    fdb8:	2300      	movs	r3, #0
    fdba:	73fb      	strb	r3, [r7, #15]
    fdbc:	7bfb      	ldrb	r3, [r7, #15]
    fdbe:	2b07      	cmp	r3, #7
    fdc0:	dc0f      	bgt.n	fde2 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    fdc2:	7bfb      	ldrb	r3, [r7, #15]
    fdc4:	2201      	movs	r2, #1
    fdc6:	4619      	mov	r1, r3
    fdc8:	6878      	ldr	r0, [r7, #4]
    fdca:	4b08      	ldr	r3, [pc, #32]	; (fdec <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    fdcc:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    fdce:	7bfb      	ldrb	r3, [r7, #15]
    fdd0:	2201      	movs	r2, #1
    fdd2:	4619      	mov	r1, r3
    fdd4:	6878      	ldr	r0, [r7, #4]
    fdd6:	4b06      	ldr	r3, [pc, #24]	; (fdf0 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    fdd8:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    fdda:	7bfb      	ldrb	r3, [r7, #15]
    fddc:	3301      	adds	r3, #1
    fdde:	73fb      	strb	r3, [r7, #15]
    fde0:	e7ec      	b.n	fdbc <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    fde2:	bf00      	nop
    fde4:	3710      	adds	r7, #16
    fde6:	46bd      	mov	sp, r7
    fde8:	bd80      	pop	{r7, pc}
    fdea:	bf00      	nop
    fdec:	0000ff71 	.word	0x0000ff71
    fdf0:	00010055 	.word	0x00010055

0000fdf4 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    fdf4:	b580      	push	{r7, lr}
    fdf6:	b084      	sub	sp, #16
    fdf8:	af00      	add	r7, sp, #0
    fdfa:	6078      	str	r0, [r7, #4]
    fdfc:	460b      	mov	r3, r1
    fdfe:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    fe00:	78fb      	ldrb	r3, [r7, #3]
    fe02:	2b00      	cmp	r3, #0
    fe04:	dd23      	ble.n	fe4e <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    fe06:	2300      	movs	r3, #0
    fe08:	73fb      	strb	r3, [r7, #15]
    fe0a:	7bfb      	ldrb	r3, [r7, #15]
    fe0c:	2b07      	cmp	r3, #7
    fe0e:	dc21      	bgt.n	fe54 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    fe10:	78fa      	ldrb	r2, [r7, #3]
    fe12:	7bfb      	ldrb	r3, [r7, #15]
    fe14:	fa42 f303 	asr.w	r3, r2, r3
    fe18:	f003 0301 	and.w	r3, r3, #1
    fe1c:	2b00      	cmp	r3, #0
    fe1e:	d00c      	beq.n	fe3a <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    fe20:	7bfb      	ldrb	r3, [r7, #15]
    fe22:	2201      	movs	r2, #1
    fe24:	4619      	mov	r1, r3
    fe26:	6878      	ldr	r0, [r7, #4]
    fe28:	4b0c      	ldr	r3, [pc, #48]	; (fe5c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    fe2a:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    fe2c:	7bfb      	ldrb	r3, [r7, #15]
    fe2e:	2201      	movs	r2, #1
    fe30:	4619      	mov	r1, r3
    fe32:	6878      	ldr	r0, [r7, #4]
    fe34:	4b0a      	ldr	r3, [pc, #40]	; (fe60 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    fe36:	4798      	blx	r3
    fe38:	e005      	b.n	fe46 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    fe3a:	7bfb      	ldrb	r3, [r7, #15]
    fe3c:	2200      	movs	r2, #0
    fe3e:	4619      	mov	r1, r3
    fe40:	6878      	ldr	r0, [r7, #4]
    fe42:	4b06      	ldr	r3, [pc, #24]	; (fe5c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    fe44:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    fe46:	7bfb      	ldrb	r3, [r7, #15]
    fe48:	3301      	adds	r3, #1
    fe4a:	73fb      	strb	r3, [r7, #15]
    fe4c:	e7dd      	b.n	fe0a <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    fe4e:	6878      	ldr	r0, [r7, #4]
    fe50:	4b04      	ldr	r3, [pc, #16]	; (fe64 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    fe52:	4798      	blx	r3
	}
	
}
    fe54:	bf00      	nop
    fe56:	3710      	adds	r7, #16
    fe58:	46bd      	mov	sp, r7
    fe5a:	bd80      	pop	{r7, pc}
    fe5c:	0000ff71 	.word	0x0000ff71
    fe60:	00010055 	.word	0x00010055
    fe64:	0000fe69 	.word	0x0000fe69

0000fe68 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    fe68:	b580      	push	{r7, lr}
    fe6a:	b084      	sub	sp, #16
    fe6c:	af00      	add	r7, sp, #0
    fe6e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    fe70:	2300      	movs	r3, #0
    fe72:	73fb      	strb	r3, [r7, #15]
    fe74:	7bfb      	ldrb	r3, [r7, #15]
    fe76:	2b07      	cmp	r3, #7
    fe78:	dc09      	bgt.n	fe8e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    fe7a:	7bfb      	ldrb	r3, [r7, #15]
    fe7c:	2200      	movs	r2, #0
    fe7e:	4619      	mov	r1, r3
    fe80:	6878      	ldr	r0, [r7, #4]
    fe82:	4b05      	ldr	r3, [pc, #20]	; (fe98 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    fe84:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    fe86:	7bfb      	ldrb	r3, [r7, #15]
    fe88:	3301      	adds	r3, #1
    fe8a:	73fb      	strb	r3, [r7, #15]
    fe8c:	e7f2      	b.n	fe74 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    fe8e:	bf00      	nop
    fe90:	3710      	adds	r7, #16
    fe92:	46bd      	mov	sp, r7
    fe94:	bd80      	pop	{r7, pc}
    fe96:	bf00      	nop
    fe98:	0000ff71 	.word	0x0000ff71

0000fe9c <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
    fe9c:	b580      	push	{r7, lr}
    fe9e:	b084      	sub	sp, #16
    fea0:	af00      	add	r7, sp, #0
    fea2:	6078      	str	r0, [r7, #4]
    fea4:	460b      	mov	r3, r1
    fea6:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
    fea8:	2300      	movs	r3, #0
    feaa:	73fb      	strb	r3, [r7, #15]
    feac:	7bfb      	ldrb	r3, [r7, #15]
    feae:	2b07      	cmp	r3, #7
    feb0:	dc11      	bgt.n	fed6 <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
    feb2:	78fa      	ldrb	r2, [r7, #3]
    feb4:	7bfb      	ldrb	r3, [r7, #15]
    feb6:	fa42 f303 	asr.w	r3, r2, r3
    feba:	f003 0301 	and.w	r3, r3, #1
    febe:	2b00      	cmp	r3, #0
    fec0:	d005      	beq.n	fece <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
    fec2:	7bfb      	ldrb	r3, [r7, #15]
    fec4:	2200      	movs	r2, #0
    fec6:	4619      	mov	r1, r3
    fec8:	6878      	ldr	r0, [r7, #4]
    feca:	4b05      	ldr	r3, [pc, #20]	; (fee0 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
    fecc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    fece:	7bfb      	ldrb	r3, [r7, #15]
    fed0:	3301      	adds	r3, #1
    fed2:	73fb      	strb	r3, [r7, #15]
    fed4:	e7ea      	b.n	feac <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
    fed6:	bf00      	nop
    fed8:	3710      	adds	r7, #16
    feda:	46bd      	mov	sp, r7
    fedc:	bd80      	pop	{r7, pc}
    fede:	bf00      	nop
    fee0:	0000ff71 	.word	0x0000ff71

0000fee4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    fee4:	b580      	push	{r7, lr}
    fee6:	b084      	sub	sp, #16
    fee8:	af00      	add	r7, sp, #0
    feea:	6078      	str	r0, [r7, #4]
    feec:	4608      	mov	r0, r1
    feee:	4611      	mov	r1, r2
    fef0:	461a      	mov	r2, r3
    fef2:	4603      	mov	r3, r0
    fef4:	70fb      	strb	r3, [r7, #3]
    fef6:	460b      	mov	r3, r1
    fef8:	70bb      	strb	r3, [r7, #2]
    fefa:	4613      	mov	r3, r2
    fefc:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    fefe:	787b      	ldrb	r3, [r7, #1]
    ff00:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    ff02:	78fb      	ldrb	r3, [r7, #3]
    ff04:	4619      	mov	r1, r3
    ff06:	6878      	ldr	r0, [r7, #4]
    ff08:	4b16      	ldr	r3, [pc, #88]	; (ff64 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    ff0a:	4798      	blx	r3
    ff0c:	4603      	mov	r3, r0
    ff0e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    ff10:	7bfb      	ldrb	r3, [r7, #15]
    ff12:	4619      	mov	r1, r3
    ff14:	6878      	ldr	r0, [r7, #4]
    ff16:	4b14      	ldr	r3, [pc, #80]	; (ff68 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    ff18:	4798      	blx	r3
    ff1a:	4603      	mov	r3, r0
    ff1c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    ff1e:	78bb      	ldrb	r3, [r7, #2]
    ff20:	2b00      	cmp	r3, #0
    ff22:	d009      	beq.n	ff38 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    ff24:	7bba      	ldrb	r2, [r7, #14]
    ff26:	7b7b      	ldrb	r3, [r7, #13]
    ff28:	4619      	mov	r1, r3
    ff2a:	2301      	movs	r3, #1
    ff2c:	408b      	lsls	r3, r1
    ff2e:	b2db      	uxtb	r3, r3
    ff30:	4313      	orrs	r3, r2
    ff32:	b2db      	uxtb	r3, r3
    ff34:	73bb      	strb	r3, [r7, #14]
    ff36:	e00a      	b.n	ff4e <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    ff38:	7bba      	ldrb	r2, [r7, #14]
    ff3a:	7b7b      	ldrb	r3, [r7, #13]
    ff3c:	4619      	mov	r1, r3
    ff3e:	2301      	movs	r3, #1
    ff40:	408b      	lsls	r3, r1
    ff42:	b2db      	uxtb	r3, r3
    ff44:	43db      	mvns	r3, r3
    ff46:	b2db      	uxtb	r3, r3
    ff48:	4013      	ands	r3, r2
    ff4a:	b2db      	uxtb	r3, r3
    ff4c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    ff4e:	7bba      	ldrb	r2, [r7, #14]
    ff50:	7bfb      	ldrb	r3, [r7, #15]
    ff52:	4619      	mov	r1, r3
    ff54:	6878      	ldr	r0, [r7, #4]
    ff56:	4b05      	ldr	r3, [pc, #20]	; (ff6c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    ff58:	4798      	blx	r3
}
    ff5a:	bf00      	nop
    ff5c:	3710      	adds	r7, #16
    ff5e:	46bd      	mov	sp, r7
    ff60:	bd80      	pop	{r7, pc}
    ff62:	bf00      	nop
    ff64:	0000fc53 	.word	0x0000fc53
    ff68:	0000fca1 	.word	0x0000fca1
    ff6c:	0000fd29 	.word	0x0000fd29

0000ff70 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    ff70:	b590      	push	{r4, r7, lr}
    ff72:	b085      	sub	sp, #20
    ff74:	af02      	add	r7, sp, #8
    ff76:	6078      	str	r0, [r7, #4]
    ff78:	460b      	mov	r3, r1
    ff7a:	70fb      	strb	r3, [r7, #3]
    ff7c:	4613      	mov	r3, r2
    ff7e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    ff80:	78bb      	ldrb	r3, [r7, #2]
    ff82:	2b01      	cmp	r3, #1
    ff84:	bf0c      	ite	eq
    ff86:	2301      	moveq	r3, #1
    ff88:	2300      	movne	r3, #0
    ff8a:	b2db      	uxtb	r3, r3
    ff8c:	461a      	mov	r2, r3
    ff8e:	78f9      	ldrb	r1, [r7, #3]
    ff90:	2300      	movs	r3, #0
    ff92:	9300      	str	r3, [sp, #0]
    ff94:	2300      	movs	r3, #0
    ff96:	6878      	ldr	r0, [r7, #4]
    ff98:	4c02      	ldr	r4, [pc, #8]	; (ffa4 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    ff9a:	47a0      	blx	r4
}
    ff9c:	bf00      	nop
    ff9e:	370c      	adds	r7, #12
    ffa0:	46bd      	mov	sp, r7
    ffa2:	bd90      	pop	{r4, r7, pc}
    ffa4:	0000fee5 	.word	0x0000fee5

0000ffa8 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    ffa8:	b590      	push	{r4, r7, lr}
    ffaa:	b085      	sub	sp, #20
    ffac:	af00      	add	r7, sp, #0
    ffae:	6078      	str	r0, [r7, #4]
    ffb0:	460b      	mov	r3, r1
    ffb2:	70fb      	strb	r3, [r7, #3]
    ffb4:	4613      	mov	r3, r2
    ffb6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    ffb8:	78fb      	ldrb	r3, [r7, #3]
    ffba:	4619      	mov	r1, r3
    ffbc:	6878      	ldr	r0, [r7, #4]
    ffbe:	4b21      	ldr	r3, [pc, #132]	; (10044 <STACK_SIZE+0x44>)
    ffc0:	4798      	blx	r3
    ffc2:	4603      	mov	r3, r0
    ffc4:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    ffc6:	78f9      	ldrb	r1, [r7, #3]
    ffc8:	230a      	movs	r3, #10
    ffca:	220a      	movs	r2, #10
    ffcc:	6878      	ldr	r0, [r7, #4]
    ffce:	4c1e      	ldr	r4, [pc, #120]	; (10048 <STACK_SIZE+0x48>)
    ffd0:	47a0      	blx	r4
    ffd2:	4603      	mov	r3, r0
    ffd4:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    ffd6:	7bfb      	ldrb	r3, [r7, #15]
    ffd8:	4619      	mov	r1, r3
    ffda:	6878      	ldr	r0, [r7, #4]
    ffdc:	4b1b      	ldr	r3, [pc, #108]	; (1004c <STACK_SIZE+0x4c>)
    ffde:	4798      	blx	r3
    ffe0:	4603      	mov	r3, r0
    ffe2:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    ffe4:	78bb      	ldrb	r3, [r7, #2]
    ffe6:	2b00      	cmp	r3, #0
    ffe8:	d009      	beq.n	fffe <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    ffea:	7bba      	ldrb	r2, [r7, #14]
    ffec:	7b7b      	ldrb	r3, [r7, #13]
    ffee:	4619      	mov	r1, r3
    fff0:	2301      	movs	r3, #1
    fff2:	408b      	lsls	r3, r1
    fff4:	b2db      	uxtb	r3, r3
    fff6:	4313      	orrs	r3, r2
    fff8:	b2db      	uxtb	r3, r3
    fffa:	73bb      	strb	r3, [r7, #14]
    fffc:	e00a      	b.n	10014 <STACK_SIZE+0x14>
    fffe:	7bba      	ldrb	r2, [r7, #14]
   10000:	7b7b      	ldrb	r3, [r7, #13]
   10002:	4619      	mov	r1, r3
   10004:	2301      	movs	r3, #1
   10006:	408b      	lsls	r3, r1
   10008:	b2db      	uxtb	r3, r3
   1000a:	43db      	mvns	r3, r3
   1000c:	b2db      	uxtb	r3, r3
   1000e:	4013      	ands	r3, r2
   10010:	b2db      	uxtb	r3, r3
   10012:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   10014:	78f9      	ldrb	r1, [r7, #3]
   10016:	2309      	movs	r3, #9
   10018:	2209      	movs	r2, #9
   1001a:	6878      	ldr	r0, [r7, #4]
   1001c:	4c0a      	ldr	r4, [pc, #40]	; (10048 <STACK_SIZE+0x48>)
   1001e:	47a0      	blx	r4
   10020:	4603      	mov	r3, r0
   10022:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   10024:	7bba      	ldrb	r2, [r7, #14]
   10026:	7bfb      	ldrb	r3, [r7, #15]
   10028:	4619      	mov	r1, r3
   1002a:	6878      	ldr	r0, [r7, #4]
   1002c:	4b08      	ldr	r3, [pc, #32]	; (10050 <STACK_SIZE+0x50>)
   1002e:	4798      	blx	r3
   10030:	4603      	mov	r3, r0
   10032:	2b00      	cmp	r3, #0
   10034:	bf0c      	ite	eq
   10036:	2301      	moveq	r3, #1
   10038:	2300      	movne	r3, #0
   1003a:	b2db      	uxtb	r3, r3
}
   1003c:	4618      	mov	r0, r3
   1003e:	3714      	adds	r7, #20
   10040:	46bd      	mov	sp, r7
   10042:	bd90      	pop	{r4, r7, pc}
   10044:	0000fc53 	.word	0x0000fc53
   10048:	0000fc71 	.word	0x0000fc71
   1004c:	0000fca1 	.word	0x0000fca1
   10050:	0000fd29 	.word	0x0000fd29

00010054 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   10054:	b590      	push	{r4, r7, lr}
   10056:	b085      	sub	sp, #20
   10058:	af02      	add	r7, sp, #8
   1005a:	6078      	str	r0, [r7, #4]
   1005c:	460b      	mov	r3, r1
   1005e:	70fb      	strb	r3, [r7, #3]
   10060:	4613      	mov	r3, r2
   10062:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   10064:	78ba      	ldrb	r2, [r7, #2]
   10066:	78f9      	ldrb	r1, [r7, #3]
   10068:	2306      	movs	r3, #6
   1006a:	9300      	str	r3, [sp, #0]
   1006c:	2306      	movs	r3, #6
   1006e:	6878      	ldr	r0, [r7, #4]
   10070:	4c02      	ldr	r4, [pc, #8]	; (1007c <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   10072:	47a0      	blx	r4
}
   10074:	bf00      	nop
   10076:	370c      	adds	r7, #12
   10078:	46bd      	mov	sp, r7
   1007a:	bd90      	pop	{r4, r7, pc}
   1007c:	0000fee5 	.word	0x0000fee5

00010080 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   10080:	b580      	push	{r7, lr}
   10082:	b082      	sub	sp, #8
   10084:	af00      	add	r7, sp, #0
   10086:	6078      	str	r0, [r7, #4]
   10088:	6039      	str	r1, [r7, #0]
   1008a:	687b      	ldr	r3, [r7, #4]
   1008c:	2b01      	cmp	r3, #1
   1008e:	d10d      	bne.n	100ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10090:	683b      	ldr	r3, [r7, #0]
   10092:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10096:	4293      	cmp	r3, r2
   10098:	d108      	bne.n	100ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1009a:	4906      	ldr	r1, [pc, #24]	; (100b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1009c:	4806      	ldr	r0, [pc, #24]	; (100b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1009e:	4b07      	ldr	r3, [pc, #28]	; (100bc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   100a0:	4798      	blx	r3
   100a2:	4a07      	ldr	r2, [pc, #28]	; (100c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   100a4:	4907      	ldr	r1, [pc, #28]	; (100c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   100a6:	4804      	ldr	r0, [pc, #16]	; (100b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   100a8:	4b07      	ldr	r3, [pc, #28]	; (100c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   100aa:	4798      	blx	r3
   100ac:	bf00      	nop
   100ae:	3708      	adds	r7, #8
   100b0:	46bd      	mov	sp, r7
   100b2:	bd80      	pop	{r7, pc}
   100b4:	2000dfe0 	.word	0x2000dfe0
   100b8:	20002f20 	.word	0x20002f20
   100bc:	0000fa29 	.word	0x0000fa29
   100c0:	20000000 	.word	0x20000000
   100c4:	0000fa45 	.word	0x0000fa45
   100c8:	00019fb9 	.word	0x00019fb9

000100cc <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   100cc:	b580      	push	{r7, lr}
   100ce:	af00      	add	r7, sp, #0
   100d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   100d4:	2001      	movs	r0, #1
   100d6:	4b01      	ldr	r3, [pc, #4]	; (100dc <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   100d8:	4798      	blx	r3
   100da:	bd80      	pop	{r7, pc}
   100dc:	00010081 	.word	0x00010081

000100e0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   100e0:	b480      	push	{r7}
   100e2:	b083      	sub	sp, #12
   100e4:	af00      	add	r7, sp, #0
   100e6:	6078      	str	r0, [r7, #4]
   100e8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   100ea:	687b      	ldr	r3, [r7, #4]
   100ec:	683a      	ldr	r2, [r7, #0]
   100ee:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   100f0:	687b      	ldr	r3, [r7, #4]
   100f2:	68db      	ldr	r3, [r3, #12]
   100f4:	2200      	movs	r2, #0
   100f6:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   100f8:	4a06      	ldr	r2, [pc, #24]	; (10114 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   100fa:	687b      	ldr	r3, [r7, #4]
   100fc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   100fe:	687b      	ldr	r3, [r7, #4]
   10100:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10104:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   10106:	687b      	ldr	r3, [r7, #4]
   10108:	4618      	mov	r0, r3
   1010a:	370c      	adds	r7, #12
   1010c:	46bd      	mov	sp, r7
   1010e:	bc80      	pop	{r7}
   10110:	4770      	bx	lr
   10112:	bf00      	nop
   10114:	20003038 	.word	0x20003038

00010118 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   10118:	b480      	push	{r7}
   1011a:	b083      	sub	sp, #12
   1011c:	af00      	add	r7, sp, #0
   1011e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   10120:	687b      	ldr	r3, [r7, #4]
   10122:	2200      	movs	r2, #0
   10124:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   10126:	687b      	ldr	r3, [r7, #4]
   10128:	4618      	mov	r0, r3
   1012a:	370c      	adds	r7, #12
   1012c:	46bd      	mov	sp, r7
   1012e:	bc80      	pop	{r7}
   10130:	4770      	bx	lr
	...

00010134 <_ZL9InitArrayv>:


static void InitArray(){
   10134:	b480      	push	{r7}
   10136:	b083      	sub	sp, #12
   10138:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   1013a:	2301      	movs	r3, #1
   1013c:	607b      	str	r3, [r7, #4]
   1013e:	687b      	ldr	r3, [r7, #4]
   10140:	2b1f      	cmp	r3, #31
   10142:	dc34      	bgt.n	101ae <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   10144:	491e      	ldr	r1, [pc, #120]	; (101c0 <_ZL9InitArrayv+0x8c>)
   10146:	687a      	ldr	r2, [r7, #4]
   10148:	4613      	mov	r3, r2
   1014a:	009b      	lsls	r3, r3, #2
   1014c:	4413      	add	r3, r2
   1014e:	009b      	lsls	r3, r3, #2
   10150:	440b      	add	r3, r1
   10152:	2200      	movs	r2, #0
   10154:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   10156:	491a      	ldr	r1, [pc, #104]	; (101c0 <_ZL9InitArrayv+0x8c>)
   10158:	687a      	ldr	r2, [r7, #4]
   1015a:	4613      	mov	r3, r2
   1015c:	009b      	lsls	r3, r3, #2
   1015e:	4413      	add	r3, r2
   10160:	009b      	lsls	r3, r3, #2
   10162:	440b      	add	r3, r1
   10164:	330c      	adds	r3, #12
   10166:	2200      	movs	r2, #0
   10168:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   1016a:	687b      	ldr	r3, [r7, #4]
   1016c:	1e5a      	subs	r2, r3, #1
   1016e:	6879      	ldr	r1, [r7, #4]
   10170:	460b      	mov	r3, r1
   10172:	009b      	lsls	r3, r3, #2
   10174:	440b      	add	r3, r1
   10176:	009b      	lsls	r3, r3, #2
   10178:	4911      	ldr	r1, [pc, #68]	; (101c0 <_ZL9InitArrayv+0x8c>)
   1017a:	4419      	add	r1, r3
   1017c:	4810      	ldr	r0, [pc, #64]	; (101c0 <_ZL9InitArrayv+0x8c>)
   1017e:	4613      	mov	r3, r2
   10180:	009b      	lsls	r3, r3, #2
   10182:	4413      	add	r3, r2
   10184:	009b      	lsls	r3, r3, #2
   10186:	4403      	add	r3, r0
   10188:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
   1018a:	4a0e      	ldr	r2, [pc, #56]	; (101c4 <_ZL9InitArrayv+0x90>)
   1018c:	687b      	ldr	r3, [r7, #4]
   1018e:	2100      	movs	r1, #0
   10190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
   10194:	687b      	ldr	r3, [r7, #4]
   10196:	3b01      	subs	r3, #1
   10198:	687a      	ldr	r2, [r7, #4]
   1019a:	0092      	lsls	r2, r2, #2
   1019c:	4909      	ldr	r1, [pc, #36]	; (101c4 <_ZL9InitArrayv+0x90>)
   1019e:	440a      	add	r2, r1
   101a0:	4908      	ldr	r1, [pc, #32]	; (101c4 <_ZL9InitArrayv+0x90>)
   101a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
   101a6:	687b      	ldr	r3, [r7, #4]
   101a8:	3301      	adds	r3, #1
   101aa:	607b      	str	r3, [r7, #4]
   101ac:	e7c7      	b.n	1013e <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
   101ae:	4b06      	ldr	r3, [pc, #24]	; (101c8 <_ZL9InitArrayv+0x94>)
   101b0:	2201      	movs	r2, #1
   101b2:	701a      	strb	r2, [r3, #0]
		
}
   101b4:	bf00      	nop
   101b6:	370c      	adds	r7, #12
   101b8:	46bd      	mov	sp, r7
   101ba:	bc80      	pop	{r7}
   101bc:	4770      	bx	lr
   101be:	bf00      	nop
   101c0:	2000303c 	.word	0x2000303c
   101c4:	200032bc 	.word	0x200032bc
   101c8:	2000333c 	.word	0x2000333c

000101cc <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   101cc:	b580      	push	{r7, lr}
   101ce:	b082      	sub	sp, #8
   101d0:	af00      	add	r7, sp, #0
   101d2:	6078      	str	r0, [r7, #4]
	ticks=0;
   101d4:	687b      	ldr	r3, [r7, #4]
   101d6:	2200      	movs	r2, #0
   101d8:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   101da:	4b0d      	ldr	r3, [pc, #52]	; (10210 <_ZN11Timer_Class4InitEv+0x44>)
   101dc:	781b      	ldrb	r3, [r3, #0]
   101de:	f083 0301 	eor.w	r3, r3, #1
   101e2:	b2db      	uxtb	r3, r3
   101e4:	2b00      	cmp	r3, #0
   101e6:	d001      	beq.n	101ec <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   101e8:	4b0a      	ldr	r3, [pc, #40]	; (10214 <_ZN11Timer_Class4InitEv+0x48>)
   101ea:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
   101ec:	6878      	ldr	r0, [r7, #4]
   101ee:	4b0a      	ldr	r3, [pc, #40]	; (10218 <_ZN11Timer_Class4InitEv+0x4c>)
   101f0:	4798      	blx	r3
   101f2:	4603      	mov	r3, r0
   101f4:	2b00      	cmp	r3, #0
   101f6:	bf0c      	ite	eq
   101f8:	2301      	moveq	r3, #1
   101fa:	2300      	movne	r3, #0
   101fc:	b2da      	uxtb	r2, r3
   101fe:	687b      	ldr	r3, [r7, #4]
   10200:	709a      	strb	r2, [r3, #2]
	return isOK;
   10202:	687b      	ldr	r3, [r7, #4]
   10204:	789b      	ldrb	r3, [r3, #2]
   10206:	b2db      	uxtb	r3, r3
}
   10208:	4618      	mov	r0, r3
   1020a:	3708      	adds	r7, #8
   1020c:	46bd      	mov	sp, r7
   1020e:	bd80      	pop	{r7, pc}
   10210:	2000333c 	.word	0x2000333c
   10214:	00010135 	.word	0x00010135
   10218:	0001021d 	.word	0x0001021d

0001021c <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
   1021c:	b580      	push	{r7, lr}
   1021e:	b084      	sub	sp, #16
   10220:	af00      	add	r7, sp, #0
   10222:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   10224:	687b      	ldr	r3, [r7, #4]
   10226:	68db      	ldr	r3, [r3, #12]
   10228:	4618      	mov	r0, r3
   1022a:	4b04      	ldr	r3, [pc, #16]	; (1023c <_ZN11Timer_Class5StartEv+0x20>)
   1022c:	4798      	blx	r3
   1022e:	60f8      	str	r0, [r7, #12]
	return status;
   10230:	68fb      	ldr	r3, [r7, #12]
	
}
   10232:	4618      	mov	r0, r3
   10234:	3710      	adds	r7, #16
   10236:	46bd      	mov	sp, r7
   10238:	bd80      	pop	{r7, pc}
   1023a:	bf00      	nop
   1023c:	00003e25 	.word	0x00003e25

00010240 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
   10240:	b580      	push	{r7, lr}
   10242:	b084      	sub	sp, #16
   10244:	af00      	add	r7, sp, #0
   10246:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   10248:	687b      	ldr	r3, [r7, #4]
   1024a:	68db      	ldr	r3, [r3, #12]
   1024c:	4618      	mov	r0, r3
   1024e:	4b05      	ldr	r3, [pc, #20]	; (10264 <_ZN11Timer_Class4StopEv+0x24>)
   10250:	4798      	blx	r3
   10252:	60f8      	str	r0, [r7, #12]
	timeout=0;
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	2200      	movs	r2, #0
   10258:	705a      	strb	r2, [r3, #1]
	return status;
   1025a:	68fb      	ldr	r3, [r7, #12]
}
   1025c:	4618      	mov	r0, r3
   1025e:	3710      	adds	r7, #16
   10260:	46bd      	mov	sp, r7
   10262:	bd80      	pop	{r7, pc}
   10264:	00003e8d 	.word	0x00003e8d

00010268 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   10268:	b580      	push	{r7, lr}
   1026a:	b086      	sub	sp, #24
   1026c:	af00      	add	r7, sp, #0
   1026e:	60f8      	str	r0, [r7, #12]
   10270:	60b9      	str	r1, [r7, #8]
   10272:	607a      	str	r2, [r7, #4]
   10274:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   10276:	68b9      	ldr	r1, [r7, #8]
   10278:	68f8      	ldr	r0, [r7, #12]
   1027a:	4b0e      	ldr	r3, [pc, #56]	; (102b4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   1027c:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   1027e:	68fb      	ldr	r3, [r7, #12]
   10280:	699b      	ldr	r3, [r3, #24]
   10282:	687a      	ldr	r2, [r7, #4]
   10284:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   10286:	68fb      	ldr	r3, [r7, #12]
   10288:	699b      	ldr	r3, [r3, #24]
   1028a:	68ba      	ldr	r2, [r7, #8]
   1028c:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   1028e:	68fb      	ldr	r3, [r7, #12]
   10290:	699b      	ldr	r3, [r3, #24]
   10292:	78fa      	ldrb	r2, [r7, #3]
   10294:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   10296:	68fb      	ldr	r3, [r7, #12]
   10298:	68da      	ldr	r2, [r3, #12]
   1029a:	68fb      	ldr	r3, [r7, #12]
   1029c:	699b      	ldr	r3, [r3, #24]
   1029e:	4619      	mov	r1, r3
   102a0:	4610      	mov	r0, r2
   102a2:	4b05      	ldr	r3, [pc, #20]	; (102b8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   102a4:	4798      	blx	r3
   102a6:	6178      	str	r0, [r7, #20]
	
	return status;
   102a8:	697b      	ldr	r3, [r7, #20]
}
   102aa:	4618      	mov	r0, r3
   102ac:	3718      	adds	r7, #24
   102ae:	46bd      	mov	sp, r7
   102b0:	bd80      	pop	{r7, pc}
   102b2:	bf00      	nop
   102b4:	00010471 	.word	0x00010471
   102b8:	00003ef9 	.word	0x00003ef9

000102bc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   102bc:	b580      	push	{r7, lr}
   102be:	b086      	sub	sp, #24
   102c0:	af00      	add	r7, sp, #0
   102c2:	60f8      	str	r0, [r7, #12]
   102c4:	60b9      	str	r1, [r7, #8]
   102c6:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   102c8:	687a      	ldr	r2, [r7, #4]
   102ca:	68b9      	ldr	r1, [r7, #8]
   102cc:	68f8      	ldr	r0, [r7, #12]
   102ce:	4b0c      	ldr	r3, [pc, #48]	; (10300 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   102d0:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   102d2:	68fb      	ldr	r3, [r7, #12]
   102d4:	68db      	ldr	r3, [r3, #12]
   102d6:	681b      	ldr	r3, [r3, #0]
   102d8:	699b      	ldr	r3, [r3, #24]
   102da:	68fa      	ldr	r2, [r7, #12]
   102dc:	68d2      	ldr	r2, [r2, #12]
   102de:	3204      	adds	r2, #4
   102e0:	4610      	mov	r0, r2
   102e2:	4798      	blx	r3
   102e4:	4603      	mov	r3, r0
   102e6:	2b00      	cmp	r3, #0
   102e8:	d105      	bne.n	102f6 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   102ea:	68fb      	ldr	r3, [r7, #12]
   102ec:	68db      	ldr	r3, [r3, #12]
   102ee:	4618      	mov	r0, r3
   102f0:	4b04      	ldr	r3, [pc, #16]	; (10304 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   102f2:	4798      	blx	r3
   102f4:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   102f6:	697b      	ldr	r3, [r7, #20]
}
   102f8:	4618      	mov	r0, r3
   102fa:	3718      	adds	r7, #24
   102fc:	46bd      	mov	sp, r7
   102fe:	bd80      	pop	{r7, pc}
   10300:	00010309 	.word	0x00010309
   10304:	00003e25 	.word	0x00003e25

00010308 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   10308:	b590      	push	{r4, r7, lr}
   1030a:	b087      	sub	sp, #28
   1030c:	af00      	add	r7, sp, #0
   1030e:	60f8      	str	r0, [r7, #12]
   10310:	60b9      	str	r1, [r7, #8]
   10312:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   10314:	2301      	movs	r3, #1
   10316:	687a      	ldr	r2, [r7, #4]
   10318:	68b9      	ldr	r1, [r7, #8]
   1031a:	68f8      	ldr	r0, [r7, #12]
   1031c:	4c03      	ldr	r4, [pc, #12]	; (1032c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   1031e:	47a0      	blx	r4
   10320:	6178      	str	r0, [r7, #20]
		return status;
   10322:	697b      	ldr	r3, [r7, #20]
}
   10324:	4618      	mov	r0, r3
   10326:	371c      	adds	r7, #28
   10328:	46bd      	mov	sp, r7
   1032a:	bd90      	pop	{r4, r7, pc}
   1032c:	00010269 	.word	0x00010269

00010330 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
   10330:	b580      	push	{r7, lr}
   10332:	b082      	sub	sp, #8
   10334:	af00      	add	r7, sp, #0
   10336:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   10338:	687b      	ldr	r3, [r7, #4]
   1033a:	68da      	ldr	r2, [r3, #12]
   1033c:	687b      	ldr	r3, [r7, #4]
   1033e:	699b      	ldr	r3, [r3, #24]
   10340:	4619      	mov	r1, r3
   10342:	4610      	mov	r0, r2
   10344:	4b04      	ldr	r3, [pc, #16]	; (10358 <_ZN11Timer_Class11Remove_taskEv+0x28>)
   10346:	4798      	blx	r3
	task->cb=NULL;
   10348:	687b      	ldr	r3, [r7, #4]
   1034a:	699b      	ldr	r3, [r3, #24]
   1034c:	2200      	movs	r2, #0
   1034e:	60da      	str	r2, [r3, #12]
}
   10350:	bf00      	nop
   10352:	3708      	adds	r7, #8
   10354:	46bd      	mov	sp, r7
   10356:	bd80      	pop	{r7, pc}
   10358:	00003ffd 	.word	0x00003ffd

0001035c <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
   1035c:	b580      	push	{r7, lr}
   1035e:	b082      	sub	sp, #8
   10360:	af00      	add	r7, sp, #0
   10362:	6078      	str	r0, [r7, #4]
   10364:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   10366:	6839      	ldr	r1, [r7, #0]
   10368:	6878      	ldr	r0, [r7, #4]
   1036a:	4b0f      	ldr	r3, [pc, #60]	; (103a8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   1036c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   1036e:	687b      	ldr	r3, [r7, #4]
   10370:	68db      	ldr	r3, [r3, #12]
   10372:	f103 0218 	add.w	r2, r3, #24
   10376:	687b      	ldr	r3, [r7, #4]
   10378:	699b      	ldr	r3, [r3, #24]
   1037a:	4619      	mov	r1, r3
   1037c:	4610      	mov	r0, r2
   1037e:	4b0b      	ldr	r3, [pc, #44]	; (103ac <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   10380:	4798      	blx	r3
   10382:	4603      	mov	r3, r0
   10384:	2b00      	cmp	r3, #0
   10386:	d007      	beq.n	10398 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   10388:	687b      	ldr	r3, [r7, #4]
   1038a:	68da      	ldr	r2, [r3, #12]
   1038c:	687b      	ldr	r3, [r7, #4]
   1038e:	699b      	ldr	r3, [r3, #24]
   10390:	4619      	mov	r1, r3
   10392:	4610      	mov	r0, r2
   10394:	4b06      	ldr	r3, [pc, #24]	; (103b0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   10396:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   10398:	687b      	ldr	r3, [r7, #4]
   1039a:	699b      	ldr	r3, [r3, #24]
   1039c:	2200      	movs	r2, #0
   1039e:	60da      	str	r2, [r3, #12]
}
   103a0:	bf00      	nop
   103a2:	3708      	adds	r7, #8
   103a4:	46bd      	mov	sp, r7
   103a6:	bd80      	pop	{r7, pc}
   103a8:	000104f1 	.word	0x000104f1
   103ac:	00004be5 	.word	0x00004be5
   103b0:	00003ffd 	.word	0x00003ffd

000103b4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   103b4:	b590      	push	{r4, r7, lr}
   103b6:	b087      	sub	sp, #28
   103b8:	af00      	add	r7, sp, #0
   103ba:	60f8      	str	r0, [r7, #12]
   103bc:	60b9      	str	r1, [r7, #8]
   103be:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   103c0:	2300      	movs	r3, #0
   103c2:	687a      	ldr	r2, [r7, #4]
   103c4:	68b9      	ldr	r1, [r7, #8]
   103c6:	68f8      	ldr	r0, [r7, #12]
   103c8:	4c0c      	ldr	r4, [pc, #48]	; (103fc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   103ca:	47a0      	blx	r4
   103cc:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   103ce:	68fb      	ldr	r3, [r7, #12]
   103d0:	68db      	ldr	r3, [r3, #12]
   103d2:	681b      	ldr	r3, [r3, #0]
   103d4:	699b      	ldr	r3, [r3, #24]
   103d6:	68fa      	ldr	r2, [r7, #12]
   103d8:	68d2      	ldr	r2, [r2, #12]
   103da:	3204      	adds	r2, #4
   103dc:	4610      	mov	r0, r2
   103de:	4798      	blx	r3
   103e0:	4603      	mov	r3, r0
   103e2:	2b00      	cmp	r3, #0
   103e4:	d105      	bne.n	103f2 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   103e6:	68fb      	ldr	r3, [r7, #12]
   103e8:	68db      	ldr	r3, [r3, #12]
   103ea:	4618      	mov	r0, r3
   103ec:	4b04      	ldr	r3, [pc, #16]	; (10400 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   103ee:	4798      	blx	r3
   103f0:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   103f2:	697b      	ldr	r3, [r7, #20]
}
   103f4:	4618      	mov	r0, r3
   103f6:	371c      	adds	r7, #28
   103f8:	46bd      	mov	sp, r7
   103fa:	bd90      	pop	{r4, r7, pc}
   103fc:	00010269 	.word	0x00010269
   10400:	00003e25 	.word	0x00003e25

00010404 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   10404:	b480      	push	{r7}
   10406:	b085      	sub	sp, #20
   10408:	af00      	add	r7, sp, #0
   1040a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1040c:	2300      	movs	r3, #0
   1040e:	73fb      	strb	r3, [r7, #15]
   10410:	7bfb      	ldrb	r3, [r7, #15]
   10412:	2b1f      	cmp	r3, #31
   10414:	dc23      	bgt.n	1045e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   10416:	687b      	ldr	r3, [r7, #4]
   10418:	7f1a      	ldrb	r2, [r3, #28]
   1041a:	7bfb      	ldrb	r3, [r7, #15]
   1041c:	4413      	add	r3, r2
   1041e:	b2db      	uxtb	r3, r3
   10420:	f003 031f 	and.w	r3, r3, #31
   10424:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   10426:	7bba      	ldrb	r2, [r7, #14]
   10428:	4910      	ldr	r1, [pc, #64]	; (1046c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   1042a:	4613      	mov	r3, r2
   1042c:	009b      	lsls	r3, r3, #2
   1042e:	4413      	add	r3, r2
   10430:	009b      	lsls	r3, r3, #2
   10432:	440b      	add	r3, r1
   10434:	330c      	adds	r3, #12
   10436:	681b      	ldr	r3, [r3, #0]
   10438:	2b00      	cmp	r3, #0
   1043a:	d10c      	bne.n	10456 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   1043c:	7bba      	ldrb	r2, [r7, #14]
   1043e:	4613      	mov	r3, r2
   10440:	009b      	lsls	r3, r3, #2
   10442:	4413      	add	r3, r2
   10444:	009b      	lsls	r3, r3, #2
   10446:	4a09      	ldr	r2, [pc, #36]	; (1046c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   10448:	441a      	add	r2, r3
   1044a:	687b      	ldr	r3, [r7, #4]
   1044c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   1044e:	687b      	ldr	r3, [r7, #4]
   10450:	7bba      	ldrb	r2, [r7, #14]
   10452:	771a      	strb	r2, [r3, #28]
			return;
   10454:	e006      	b.n	10464 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10456:	7bfb      	ldrb	r3, [r7, #15]
   10458:	3301      	adds	r3, #1
   1045a:	73fb      	strb	r3, [r7, #15]
   1045c:	e7d8      	b.n	10410 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   1045e:	687b      	ldr	r3, [r7, #4]
   10460:	4a02      	ldr	r2, [pc, #8]	; (1046c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   10462:	619a      	str	r2, [r3, #24]

}
   10464:	3714      	adds	r7, #20
   10466:	46bd      	mov	sp, r7
   10468:	bc80      	pop	{r7}
   1046a:	4770      	bx	lr
   1046c:	2000303c 	.word	0x2000303c

00010470 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   10470:	b580      	push	{r7, lr}
   10472:	b084      	sub	sp, #16
   10474:	af00      	add	r7, sp, #0
   10476:	6078      	str	r0, [r7, #4]
   10478:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1047a:	2300      	movs	r3, #0
   1047c:	73fb      	strb	r3, [r7, #15]
   1047e:	7bfb      	ldrb	r3, [r7, #15]
   10480:	2b1f      	cmp	r3, #31
   10482:	dc28      	bgt.n	104d6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   10484:	687b      	ldr	r3, [r7, #4]
   10486:	7f1a      	ldrb	r2, [r3, #28]
   10488:	7bfb      	ldrb	r3, [r7, #15]
   1048a:	4413      	add	r3, r2
   1048c:	b2db      	uxtb	r3, r3
   1048e:	f003 031f 	and.w	r3, r3, #31
   10492:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   10494:	7bba      	ldrb	r2, [r7, #14]
   10496:	4913      	ldr	r1, [pc, #76]	; (104e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   10498:	4613      	mov	r3, r2
   1049a:	009b      	lsls	r3, r3, #2
   1049c:	4413      	add	r3, r2
   1049e:	009b      	lsls	r3, r3, #2
   104a0:	440b      	add	r3, r1
   104a2:	330c      	adds	r3, #12
   104a4:	681a      	ldr	r2, [r3, #0]
   104a6:	683b      	ldr	r3, [r7, #0]
   104a8:	429a      	cmp	r2, r3
   104aa:	d110      	bne.n	104ce <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   104ac:	6839      	ldr	r1, [r7, #0]
   104ae:	6878      	ldr	r0, [r7, #4]
   104b0:	4b0d      	ldr	r3, [pc, #52]	; (104e8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   104b2:	4798      	blx	r3
			task=&taskArray[j];
   104b4:	7bba      	ldrb	r2, [r7, #14]
   104b6:	4613      	mov	r3, r2
   104b8:	009b      	lsls	r3, r3, #2
   104ba:	4413      	add	r3, r2
   104bc:	009b      	lsls	r3, r3, #2
   104be:	4a09      	ldr	r2, [pc, #36]	; (104e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   104c0:	441a      	add	r2, r3
   104c2:	687b      	ldr	r3, [r7, #4]
   104c4:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   104c6:	687b      	ldr	r3, [r7, #4]
   104c8:	7bba      	ldrb	r2, [r7, #14]
   104ca:	771a      	strb	r2, [r3, #28]
			return;
   104cc:	e006      	b.n	104dc <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   104ce:	7bfb      	ldrb	r3, [r7, #15]
   104d0:	3301      	adds	r3, #1
   104d2:	73fb      	strb	r3, [r7, #15]
   104d4:	e7d3      	b.n	1047e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   104d6:	6878      	ldr	r0, [r7, #4]
   104d8:	4b04      	ldr	r3, [pc, #16]	; (104ec <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   104da:	4798      	blx	r3
	//task=&taskArray[0];

}
   104dc:	3710      	adds	r7, #16
   104de:	46bd      	mov	sp, r7
   104e0:	bd80      	pop	{r7, pc}
   104e2:	bf00      	nop
   104e4:	2000303c 	.word	0x2000303c
   104e8:	0001035d 	.word	0x0001035d
   104ec:	00010405 	.word	0x00010405

000104f0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   104f0:	b480      	push	{r7}
   104f2:	b085      	sub	sp, #20
   104f4:	af00      	add	r7, sp, #0
   104f6:	6078      	str	r0, [r7, #4]
   104f8:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   104fa:	2300      	movs	r3, #0
   104fc:	73fb      	strb	r3, [r7, #15]
   104fe:	7bfb      	ldrb	r3, [r7, #15]
   10500:	2b1f      	cmp	r3, #31
   10502:	dc19      	bgt.n	10538 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   10504:	7bfa      	ldrb	r2, [r7, #15]
   10506:	490f      	ldr	r1, [pc, #60]	; (10544 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   10508:	4613      	mov	r3, r2
   1050a:	009b      	lsls	r3, r3, #2
   1050c:	4413      	add	r3, r2
   1050e:	009b      	lsls	r3, r3, #2
   10510:	440b      	add	r3, r1
   10512:	330c      	adds	r3, #12
   10514:	681a      	ldr	r2, [r3, #0]
   10516:	683b      	ldr	r3, [r7, #0]
   10518:	429a      	cmp	r2, r3
   1051a:	d109      	bne.n	10530 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   1051c:	7bfa      	ldrb	r2, [r7, #15]
   1051e:	4613      	mov	r3, r2
   10520:	009b      	lsls	r3, r3, #2
   10522:	4413      	add	r3, r2
   10524:	009b      	lsls	r3, r3, #2
   10526:	4a07      	ldr	r2, [pc, #28]	; (10544 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   10528:	441a      	add	r2, r3
   1052a:	687b      	ldr	r3, [r7, #4]
   1052c:	619a      	str	r2, [r3, #24]
			return;
   1052e:	e004      	b.n	1053a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10530:	7bfb      	ldrb	r3, [r7, #15]
   10532:	3301      	adds	r3, #1
   10534:	73fb      	strb	r3, [r7, #15]
   10536:	e7e2      	b.n	104fe <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   10538:	bf00      	nop
}
   1053a:	3714      	adds	r7, #20
   1053c:	46bd      	mov	sp, r7
   1053e:	bc80      	pop	{r7}
   10540:	4770      	bx	lr
   10542:	bf00      	nop
   10544:	2000303c 	.word	0x2000303c

00010548 <_Z41__static_initialization_and_destruction_0ii>:
   10548:	b580      	push	{r7, lr}
   1054a:	b082      	sub	sp, #8
   1054c:	af00      	add	r7, sp, #0
   1054e:	6078      	str	r0, [r7, #4]
   10550:	6039      	str	r1, [r7, #0]
   10552:	687b      	ldr	r3, [r7, #4]
   10554:	2b01      	cmp	r3, #1
   10556:	d14c      	bne.n	105f2 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   10558:	683b      	ldr	r3, [r7, #0]
   1055a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1055e:	4293      	cmp	r3, r2
   10560:	d147      	bne.n	105f2 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10562:	4926      	ldr	r1, [pc, #152]	; (105fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   10564:	4826      	ldr	r0, [pc, #152]	; (10600 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   10566:	4b27      	ldr	r3, [pc, #156]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10568:	4798      	blx	r3
   1056a:	4a27      	ldr	r2, [pc, #156]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1056c:	4927      	ldr	r1, [pc, #156]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1056e:	4824      	ldr	r0, [pc, #144]	; (10600 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   10570:	4b27      	ldr	r3, [pc, #156]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10572:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10574:	4927      	ldr	r1, [pc, #156]	; (10614 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10576:	4828      	ldr	r0, [pc, #160]	; (10618 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10578:	4b22      	ldr	r3, [pc, #136]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1057a:	4798      	blx	r3
   1057c:	4a22      	ldr	r2, [pc, #136]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1057e:	4923      	ldr	r1, [pc, #140]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10580:	4825      	ldr	r0, [pc, #148]	; (10618 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10582:	4b23      	ldr	r3, [pc, #140]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10584:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10586:	4925      	ldr	r1, [pc, #148]	; (1061c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10588:	4825      	ldr	r0, [pc, #148]	; (10620 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1058a:	4b1e      	ldr	r3, [pc, #120]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1058c:	4798      	blx	r3
   1058e:	4a1e      	ldr	r2, [pc, #120]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10590:	491e      	ldr	r1, [pc, #120]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10592:	4823      	ldr	r0, [pc, #140]	; (10620 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10594:	4b1e      	ldr	r3, [pc, #120]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10596:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10598:	4922      	ldr	r1, [pc, #136]	; (10624 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1059a:	4823      	ldr	r0, [pc, #140]	; (10628 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1059c:	4b19      	ldr	r3, [pc, #100]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1059e:	4798      	blx	r3
   105a0:	4a19      	ldr	r2, [pc, #100]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   105a2:	491a      	ldr	r1, [pc, #104]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   105a4:	4820      	ldr	r0, [pc, #128]	; (10628 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   105a6:	4b1a      	ldr	r3, [pc, #104]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   105a8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   105aa:	4920      	ldr	r1, [pc, #128]	; (1062c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   105ac:	4820      	ldr	r0, [pc, #128]	; (10630 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   105ae:	4b15      	ldr	r3, [pc, #84]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   105b0:	4798      	blx	r3
   105b2:	4a15      	ldr	r2, [pc, #84]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   105b4:	4915      	ldr	r1, [pc, #84]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   105b6:	481e      	ldr	r0, [pc, #120]	; (10630 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   105b8:	4b15      	ldr	r3, [pc, #84]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   105ba:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   105bc:	491d      	ldr	r1, [pc, #116]	; (10634 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   105be:	481e      	ldr	r0, [pc, #120]	; (10638 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   105c0:	4b10      	ldr	r3, [pc, #64]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   105c2:	4798      	blx	r3
   105c4:	4a10      	ldr	r2, [pc, #64]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   105c6:	4911      	ldr	r1, [pc, #68]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   105c8:	481b      	ldr	r0, [pc, #108]	; (10638 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   105ca:	4b11      	ldr	r3, [pc, #68]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   105cc:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   105ce:	491b      	ldr	r1, [pc, #108]	; (1063c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   105d0:	481b      	ldr	r0, [pc, #108]	; (10640 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   105d2:	4b0c      	ldr	r3, [pc, #48]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   105d4:	4798      	blx	r3
   105d6:	4a0c      	ldr	r2, [pc, #48]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   105d8:	490c      	ldr	r1, [pc, #48]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   105da:	4819      	ldr	r0, [pc, #100]	; (10640 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   105dc:	4b0c      	ldr	r3, [pc, #48]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   105de:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   105e0:	4918      	ldr	r1, [pc, #96]	; (10644 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   105e2:	4819      	ldr	r0, [pc, #100]	; (10648 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   105e4:	4b07      	ldr	r3, [pc, #28]	; (10604 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   105e6:	4798      	blx	r3
   105e8:	4a07      	ldr	r2, [pc, #28]	; (10608 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   105ea:	4908      	ldr	r1, [pc, #32]	; (1060c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   105ec:	4816      	ldr	r0, [pc, #88]	; (10648 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   105ee:	4b08      	ldr	r3, [pc, #32]	; (10610 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   105f0:	4798      	blx	r3
   105f2:	bf00      	nop
   105f4:	3708      	adds	r7, #8
   105f6:	46bd      	mov	sp, r7
   105f8:	bd80      	pop	{r7, pc}
   105fa:	bf00      	nop
   105fc:	2000deb0 	.word	0x2000deb0
   10600:	20002f38 	.word	0x20002f38
   10604:	000100e1 	.word	0x000100e1
   10608:	20000000 	.word	0x20000000
   1060c:	00010119 	.word	0x00010119
   10610:	00019fb9 	.word	0x00019fb9
   10614:	2000df44 	.word	0x2000df44
   10618:	20002f58 	.word	0x20002f58
   1061c:	2000e068 	.word	0x2000e068
   10620:	20002f78 	.word	0x20002f78
   10624:	2000df64 	.word	0x2000df64
   10628:	20002f98 	.word	0x20002f98
   1062c:	2000e028 	.word	0x2000e028
   10630:	20002fb8 	.word	0x20002fb8
   10634:	2000e048 	.word	0x2000e048
   10638:	20002fd8 	.word	0x20002fd8
   1063c:	2000df20 	.word	0x2000df20
   10640:	20002ff8 	.word	0x20002ff8
   10644:	2000dfc0 	.word	0x2000dfc0
   10648:	20003018 	.word	0x20003018

0001064c <_GLOBAL__sub_I_ptrTimerClass>:
   1064c:	b580      	push	{r7, lr}
   1064e:	af00      	add	r7, sp, #0
   10650:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10654:	2001      	movs	r0, #1
   10656:	4b01      	ldr	r3, [pc, #4]	; (1065c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   10658:	4798      	blx	r3
   1065a:	bd80      	pop	{r7, pc}
   1065c:	00010549 	.word	0x00010549

00010660 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10660:	b480      	push	{r7}
   10662:	b083      	sub	sp, #12
   10664:	af00      	add	r7, sp, #0
   10666:	6078      	str	r0, [r7, #4]
   10668:	4a05      	ldr	r2, [pc, #20]	; (10680 <_ZN5PrintC1Ev+0x20>)
   1066a:	687b      	ldr	r3, [r7, #4]
   1066c:	601a      	str	r2, [r3, #0]
   1066e:	687b      	ldr	r3, [r7, #4]
   10670:	2200      	movs	r2, #0
   10672:	605a      	str	r2, [r3, #4]
   10674:	687b      	ldr	r3, [r7, #4]
   10676:	4618      	mov	r0, r3
   10678:	370c      	adds	r7, #12
   1067a:	46bd      	mov	sp, r7
   1067c:	bc80      	pop	{r7}
   1067e:	4770      	bx	lr
   10680:	0001af60 	.word	0x0001af60

00010684 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   10684:	b480      	push	{r7}
   10686:	b083      	sub	sp, #12
   10688:	af00      	add	r7, sp, #0
   1068a:	6078      	str	r0, [r7, #4]
   1068c:	2300      	movs	r3, #0
   1068e:	4618      	mov	r0, r3
   10690:	370c      	adds	r7, #12
   10692:	46bd      	mov	sp, r7
   10694:	bc80      	pop	{r7}
   10696:	4770      	bx	lr

00010698 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   10698:	b480      	push	{r7}
   1069a:	b083      	sub	sp, #12
   1069c:	af00      	add	r7, sp, #0
   1069e:	6078      	str	r0, [r7, #4]
   106a0:	bf00      	nop
   106a2:	370c      	adds	r7, #12
   106a4:	46bd      	mov	sp, r7
   106a6:	bc80      	pop	{r7}
   106a8:	4770      	bx	lr
	...

000106ac <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   106ac:	b580      	push	{r7, lr}
   106ae:	b082      	sub	sp, #8
   106b0:	af00      	add	r7, sp, #0
   106b2:	6078      	str	r0, [r7, #4]
   106b4:	687b      	ldr	r3, [r7, #4]
   106b6:	4618      	mov	r0, r3
   106b8:	4b06      	ldr	r3, [pc, #24]	; (106d4 <_ZN6StreamC1Ev+0x28>)
   106ba:	4798      	blx	r3
   106bc:	4a06      	ldr	r2, [pc, #24]	; (106d8 <_ZN6StreamC1Ev+0x2c>)
   106be:	687b      	ldr	r3, [r7, #4]
   106c0:	601a      	str	r2, [r3, #0]
   106c2:	687b      	ldr	r3, [r7, #4]
   106c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106c8:	609a      	str	r2, [r3, #8]
   106ca:	687b      	ldr	r3, [r7, #4]
   106cc:	4618      	mov	r0, r3
   106ce:	3708      	adds	r7, #8
   106d0:	46bd      	mov	sp, r7
   106d2:	bd80      	pop	{r7, pc}
   106d4:	00010661 	.word	0x00010661
   106d8:	0001af24 	.word	0x0001af24

000106dc <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   106dc:	b480      	push	{r7}
   106de:	b083      	sub	sp, #12
   106e0:	af00      	add	r7, sp, #0
   106e2:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   106e4:	4b06      	ldr	r3, [pc, #24]	; (10700 <_ZL10USBTimeoutPK10timer_task+0x24>)
   106e6:	681b      	ldr	r3, [r3, #0]
   106e8:	2201      	movs	r2, #1
   106ea:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   106ec:	4b04      	ldr	r3, [pc, #16]	; (10700 <_ZL10USBTimeoutPK10timer_task+0x24>)
   106ee:	681b      	ldr	r3, [r3, #0]
   106f0:	2200      	movs	r2, #0
   106f2:	741a      	strb	r2, [r3, #16]
	
}
   106f4:	bf00      	nop
   106f6:	370c      	adds	r7, #12
   106f8:	46bd      	mov	sp, r7
   106fa:	bc80      	pop	{r7}
   106fc:	4770      	bx	lr
   106fe:	bf00      	nop
   10700:	20003440 	.word	0x20003440

00010704 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   10704:	b480      	push	{r7}
   10706:	b083      	sub	sp, #12
   10708:	af00      	add	r7, sp, #0
   1070a:	4603      	mov	r3, r0
   1070c:	603a      	str	r2, [r7, #0]
   1070e:	71fb      	strb	r3, [r7, #7]
   10710:	460b      	mov	r3, r1
   10712:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   10714:	4b08      	ldr	r3, [pc, #32]	; (10738 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10716:	681b      	ldr	r3, [r3, #0]
   10718:	2201      	movs	r2, #1
   1071a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   1071c:	4b06      	ldr	r3, [pc, #24]	; (10738 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1071e:	681b      	ldr	r3, [r3, #0]
   10720:	2201      	movs	r2, #1
   10722:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   10724:	4b04      	ldr	r3, [pc, #16]	; (10738 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10726:	681b      	ldr	r3, [r3, #0]
   10728:	2201      	movs	r2, #1
   1072a:	741a      	strb	r2, [r3, #16]


	return false;
   1072c:	2300      	movs	r3, #0
}
   1072e:	4618      	mov	r0, r3
   10730:	370c      	adds	r7, #12
   10732:	46bd      	mov	sp, r7
   10734:	bc80      	pop	{r7}
   10736:	4770      	bx	lr
   10738:	20003440 	.word	0x20003440

0001073c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1073c:	b480      	push	{r7}
   1073e:	b083      	sub	sp, #12
   10740:	af00      	add	r7, sp, #0
   10742:	4603      	mov	r3, r0
   10744:	603a      	str	r2, [r7, #0]
   10746:	71fb      	strb	r3, [r7, #7]
   10748:	460b      	mov	r3, r1
   1074a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1074c:	4b08      	ldr	r3, [pc, #32]	; (10770 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1074e:	681b      	ldr	r3, [r3, #0]
   10750:	2201      	movs	r2, #1
   10752:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   10754:	4b06      	ldr	r3, [pc, #24]	; (10770 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10756:	681b      	ldr	r3, [r3, #0]
   10758:	2201      	movs	r2, #1
   1075a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   1075c:	4b04      	ldr	r3, [pc, #16]	; (10770 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1075e:	681b      	ldr	r3, [r3, #0]
   10760:	2201      	movs	r2, #1
   10762:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   10764:	2300      	movs	r3, #0
}
   10766:	4618      	mov	r0, r3
   10768:	370c      	adds	r7, #12
   1076a:	46bd      	mov	sp, r7
   1076c:	bc80      	pop	{r7}
   1076e:	4770      	bx	lr
   10770:	20003440 	.word	0x20003440

00010774 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   10774:	b580      	push	{r7, lr}
   10776:	b082      	sub	sp, #8
   10778:	af00      	add	r7, sp, #0
   1077a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1077c:	793b      	ldrb	r3, [r7, #4]
   1077e:	f003 0301 	and.w	r3, r3, #1
   10782:	b2db      	uxtb	r3, r3
   10784:	2b00      	cmp	r3, #0
   10786:	d013      	beq.n	107b0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   10788:	490c      	ldr	r1, [pc, #48]	; (107bc <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   1078a:	2000      	movs	r0, #0
   1078c:	4b0c      	ldr	r3, [pc, #48]	; (107c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1078e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   10790:	490c      	ldr	r1, [pc, #48]	; (107c4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   10792:	2001      	movs	r0, #1
   10794:	4b0a      	ldr	r3, [pc, #40]	; (107c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   10796:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   10798:	4b0b      	ldr	r3, [pc, #44]	; (107c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1079a:	681b      	ldr	r3, [r3, #0]
   1079c:	2201      	movs	r2, #1
   1079e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   107a0:	4b09      	ldr	r3, [pc, #36]	; (107c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   107a2:	681b      	ldr	r3, [r3, #0]
   107a4:	2201      	movs	r2, #1
   107a6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   107a8:	4b07      	ldr	r3, [pc, #28]	; (107c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   107aa:	681b      	ldr	r3, [r3, #0]
   107ac:	2201      	movs	r2, #1
   107ae:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   107b0:	2300      	movs	r3, #0
}
   107b2:	4618      	mov	r0, r3
   107b4:	3708      	adds	r7, #8
   107b6:	46bd      	mov	sp, r7
   107b8:	bd80      	pop	{r7, pc}
   107ba:	bf00      	nop
   107bc:	00010705 	.word	0x00010705
   107c0:	0000de6d 	.word	0x0000de6d
   107c4:	0001073d 	.word	0x0001073d
   107c8:	20003440 	.word	0x20003440

000107cc <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   107cc:	b580      	push	{r7, lr}
   107ce:	b082      	sub	sp, #8
   107d0:	af00      	add	r7, sp, #0
   107d2:	6078      	str	r0, [r7, #4]
   107d4:	687b      	ldr	r3, [r7, #4]
   107d6:	4618      	mov	r0, r3
   107d8:	4b0a      	ldr	r3, [pc, #40]	; (10804 <_ZN9CDC_ClassC1Ev+0x38>)
   107da:	4798      	blx	r3
   107dc:	687b      	ldr	r3, [r7, #4]
   107de:	3310      	adds	r3, #16
   107e0:	4618      	mov	r0, r3
   107e2:	4b09      	ldr	r3, [pc, #36]	; (10808 <_ZN9CDC_ClassC1Ev+0x3c>)
   107e4:	4798      	blx	r3
   107e6:	4a09      	ldr	r2, [pc, #36]	; (1080c <_ZN9CDC_ClassC1Ev+0x40>)
   107e8:	687b      	ldr	r3, [r7, #4]
   107ea:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   107ec:	687b      	ldr	r3, [r7, #4]
   107ee:	f04f 32ff 	mov.w	r2, #4294967295
   107f2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   107f4:	4a06      	ldr	r2, [pc, #24]	; (10810 <_ZN9CDC_ClassC1Ev+0x44>)
   107f6:	687b      	ldr	r3, [r7, #4]
   107f8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   107fa:	687b      	ldr	r3, [r7, #4]
   107fc:	4618      	mov	r0, r3
   107fe:	3708      	adds	r7, #8
   10800:	46bd      	mov	sp, r7
   10802:	bd80      	pop	{r7, pc}
   10804:	000106ad 	.word	0x000106ad
   10808:	00010ee9 	.word	0x00010ee9
   1080c:	0001aef4 	.word	0x0001aef4
   10810:	20003440 	.word	0x20003440

00010814 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   10814:	b580      	push	{r7, lr}
   10816:	b082      	sub	sp, #8
   10818:	af00      	add	r7, sp, #0
   1081a:	6078      	str	r0, [r7, #4]
   1081c:	4a06      	ldr	r2, [pc, #24]	; (10838 <_ZN9CDC_ClassD1Ev+0x24>)
   1081e:	687b      	ldr	r3, [r7, #4]
   10820:	601a      	str	r2, [r3, #0]
   10822:	687b      	ldr	r3, [r7, #4]
   10824:	3310      	adds	r3, #16
   10826:	4618      	mov	r0, r3
   10828:	4b04      	ldr	r3, [pc, #16]	; (1083c <_ZN9CDC_ClassD1Ev+0x28>)
   1082a:	4798      	blx	r3
{
} //~CDC_Class
   1082c:	687b      	ldr	r3, [r7, #4]
   1082e:	4618      	mov	r0, r3
   10830:	3708      	adds	r7, #8
   10832:	46bd      	mov	sp, r7
   10834:	bd80      	pop	{r7, pc}
   10836:	bf00      	nop
   10838:	0001aef4 	.word	0x0001aef4
   1083c:	00010f09 	.word	0x00010f09

00010840 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   10840:	b580      	push	{r7, lr}
   10842:	b082      	sub	sp, #8
   10844:	af00      	add	r7, sp, #0
   10846:	6078      	str	r0, [r7, #4]
	
	OnInit();
   10848:	687b      	ldr	r3, [r7, #4]
   1084a:	3310      	adds	r3, #16
   1084c:	4618      	mov	r0, r3
   1084e:	4b09      	ldr	r3, [pc, #36]	; (10874 <_ZN9CDC_Class4InitEv+0x34>)
   10850:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   10852:	4909      	ldr	r1, [pc, #36]	; (10878 <_ZN9CDC_Class4InitEv+0x38>)
   10854:	2003      	movs	r0, #3
   10856:	4b09      	ldr	r3, [pc, #36]	; (1087c <_ZN9CDC_Class4InitEv+0x3c>)
   10858:	4798      	blx	r3
	delay_ms(100);
   1085a:	2064      	movs	r0, #100	; 0x64
   1085c:	4b08      	ldr	r3, [pc, #32]	; (10880 <_ZN9CDC_Class4InitEv+0x40>)
   1085e:	4798      	blx	r3
		
	if (connected)
   10860:	687b      	ldr	r3, [r7, #4]
   10862:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   10864:	2064      	movs	r0, #100	; 0x64
   10866:	4b06      	ldr	r3, [pc, #24]	; (10880 <_ZN9CDC_Class4InitEv+0x40>)
   10868:	4798      	blx	r3

	

}
   1086a:	bf00      	nop
   1086c:	3708      	adds	r7, #8
   1086e:	46bd      	mov	sp, r7
   10870:	bd80      	pop	{r7, pc}
   10872:	bf00      	nop
   10874:	00010f1d 	.word	0x00010f1d
   10878:	00010775 	.word	0x00010775
   1087c:	0000de6d 	.word	0x0000de6d
   10880:	00003561 	.word	0x00003561

00010884 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   10884:	b580      	push	{r7, lr}
   10886:	b082      	sub	sp, #8
   10888:	af00      	add	r7, sp, #0
   1088a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   1088c:	4b03      	ldr	r3, [pc, #12]	; (1089c <_ZN9CDC_Class9IsEnabledEv+0x18>)
   1088e:	4798      	blx	r3
   10890:	4603      	mov	r3, r0
	
}
   10892:	4618      	mov	r0, r3
   10894:	3708      	adds	r7, #8
   10896:	46bd      	mov	sp, r7
   10898:	bd80      	pop	{r7, pc}
   1089a:	bf00      	nop
   1089c:	0000dee5 	.word	0x0000dee5

000108a0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   108a0:	b580      	push	{r7, lr}
   108a2:	b084      	sub	sp, #16
   108a4:	af00      	add	r7, sp, #0
   108a6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   108a8:	687b      	ldr	r3, [r7, #4]
   108aa:	699b      	ldr	r3, [r3, #24]
   108ac:	f1b3 3fff 	cmp.w	r3, #4294967295
   108b0:	bf14      	ite	ne
   108b2:	2301      	movne	r3, #1
   108b4:	2300      	moveq	r3, #0
   108b6:	b2db      	uxtb	r3, r3
   108b8:	2b00      	cmp	r3, #0
   108ba:	d002      	beq.n	108c2 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   108bc:	687b      	ldr	r3, [r7, #4]
   108be:	699b      	ldr	r3, [r3, #24]
   108c0:	e011      	b.n	108e6 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   108c2:	687b      	ldr	r3, [r7, #4]
   108c4:	681b      	ldr	r3, [r3, #0]
   108c6:	331c      	adds	r3, #28
   108c8:	681b      	ldr	r3, [r3, #0]
   108ca:	f107 010f 	add.w	r1, r7, #15
   108ce:	2201      	movs	r2, #1
   108d0:	6878      	ldr	r0, [r7, #4]
   108d2:	4798      	blx	r3
   108d4:	4602      	mov	r2, r0
   108d6:	687b      	ldr	r3, [r7, #4]
   108d8:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   108da:	7bfb      	ldrb	r3, [r7, #15]
   108dc:	461a      	mov	r2, r3
   108de:	687b      	ldr	r3, [r7, #4]
   108e0:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   108e2:	687b      	ldr	r3, [r7, #4]
   108e4:	699b      	ldr	r3, [r3, #24]
}
   108e6:	4618      	mov	r0, r3
   108e8:	3710      	adds	r7, #16
   108ea:	46bd      	mov	sp, r7
   108ec:	bd80      	pop	{r7, pc}
	...

000108f0 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   108f0:	b580      	push	{r7, lr}
   108f2:	b086      	sub	sp, #24
   108f4:	af00      	add	r7, sp, #0
   108f6:	60f8      	str	r0, [r7, #12]
   108f8:	60b9      	str	r1, [r7, #8]
   108fa:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   108fc:	68fb      	ldr	r3, [r7, #12]
   108fe:	7c1b      	ldrb	r3, [r3, #16]
   10900:	b2db      	uxtb	r3, r3
   10902:	2b00      	cmp	r3, #0
   10904:	d02e      	beq.n	10964 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10906:	687a      	ldr	r2, [r7, #4]
   10908:	4613      	mov	r3, r2
   1090a:	009b      	lsls	r3, r3, #2
   1090c:	4413      	add	r3, r2
   1090e:	005b      	lsls	r3, r3, #1
   10910:	461a      	mov	r2, r3
   10912:	4918      	ldr	r1, [pc, #96]	; (10974 <_ZN9CDC_Class8readDataEPvl+0x84>)
   10914:	4818      	ldr	r0, [pc, #96]	; (10978 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10916:	4b19      	ldr	r3, [pc, #100]	; (1097c <_ZN9CDC_Class8readDataEPvl+0x8c>)
   10918:	4798      	blx	r3
		rxReady=false;
   1091a:	68fb      	ldr	r3, [r7, #12]
   1091c:	2200      	movs	r2, #0
   1091e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   10920:	687b      	ldr	r3, [r7, #4]
   10922:	4619      	mov	r1, r3
   10924:	68b8      	ldr	r0, [r7, #8]
   10926:	4b16      	ldr	r3, [pc, #88]	; (10980 <_ZN9CDC_Class8readDataEPvl+0x90>)
   10928:	4798      	blx	r3
   1092a:	4603      	mov	r3, r0
   1092c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   1092e:	68fb      	ldr	r3, [r7, #12]
   10930:	7d5b      	ldrb	r3, [r3, #21]
   10932:	b2db      	uxtb	r3, r3
   10934:	f083 0301 	eor.w	r3, r3, #1
   10938:	b2db      	uxtb	r3, r3
   1093a:	2b00      	cmp	r3, #0
   1093c:	d006      	beq.n	1094c <_ZN9CDC_Class8readDataEPvl+0x5c>
   1093e:	68fb      	ldr	r3, [r7, #12]
   10940:	7c1b      	ldrb	r3, [r3, #16]
   10942:	b2db      	uxtb	r3, r3
   10944:	2b00      	cmp	r3, #0
   10946:	d001      	beq.n	1094c <_ZN9CDC_Class8readDataEPvl+0x5c>
   10948:	2301      	movs	r3, #1
   1094a:	e000      	b.n	1094e <_ZN9CDC_Class8readDataEPvl+0x5e>
   1094c:	2300      	movs	r3, #0
   1094e:	2b00      	cmp	r3, #0
   10950:	d000      	beq.n	10954 <_ZN9CDC_Class8readDataEPvl+0x64>
   10952:	e7ec      	b.n	1092e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   10954:	4808      	ldr	r0, [pc, #32]	; (10978 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10956:	4b0b      	ldr	r3, [pc, #44]	; (10984 <_ZN9CDC_Class8readDataEPvl+0x94>)
   10958:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1095a:	4906      	ldr	r1, [pc, #24]	; (10974 <_ZN9CDC_Class8readDataEPvl+0x84>)
   1095c:	4806      	ldr	r0, [pc, #24]	; (10978 <_ZN9CDC_Class8readDataEPvl+0x88>)
   1095e:	4b0a      	ldr	r3, [pc, #40]	; (10988 <_ZN9CDC_Class8readDataEPvl+0x98>)
   10960:	4798      	blx	r3
   10962:	e001      	b.n	10968 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   10964:	2300      	movs	r3, #0
   10966:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   10968:	7dfb      	ldrb	r3, [r7, #23]
}
   1096a:	4618      	mov	r0, r3
   1096c:	3718      	adds	r7, #24
   1096e:	46bd      	mov	sp, r7
   10970:	bd80      	pop	{r7, pc}
   10972:	bf00      	nop
   10974:	000106dd 	.word	0x000106dd
   10978:	200033e0 	.word	0x200033e0
   1097c:	000103b5 	.word	0x000103b5
   10980:	0000ddc1 	.word	0x0000ddc1
   10984:	00010241 	.word	0x00010241
   10988:	0001035d 	.word	0x0001035d

0001098c <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   1098c:	b580      	push	{r7, lr}
   1098e:	b086      	sub	sp, #24
   10990:	af00      	add	r7, sp, #0
   10992:	60f8      	str	r0, [r7, #12]
   10994:	60b9      	str	r1, [r7, #8]
   10996:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   10998:	68fb      	ldr	r3, [r7, #12]
   1099a:	2200      	movs	r2, #0
   1099c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   1099e:	687b      	ldr	r3, [r7, #4]
   109a0:	4619      	mov	r1, r3
   109a2:	68b8      	ldr	r0, [r7, #8]
   109a4:	4b04      	ldr	r3, [pc, #16]	; (109b8 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   109a6:	4798      	blx	r3
   109a8:	4603      	mov	r3, r0
   109aa:	617b      	str	r3, [r7, #20]
	return r;
   109ac:	697b      	ldr	r3, [r7, #20]
}
   109ae:	4618      	mov	r0, r3
   109b0:	3718      	adds	r7, #24
   109b2:	46bd      	mov	sp, r7
   109b4:	bd80      	pop	{r7, pc}
   109b6:	bf00      	nop
   109b8:	0000ddc1 	.word	0x0000ddc1

000109bc <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   109bc:	b580      	push	{r7, lr}
   109be:	b084      	sub	sp, #16
   109c0:	af00      	add	r7, sp, #0
   109c2:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   109c4:	687b      	ldr	r3, [r7, #4]
   109c6:	2200      	movs	r2, #0
   109c8:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   109ca:	f107 030f 	add.w	r3, r7, #15
   109ce:	2101      	movs	r1, #1
   109d0:	4618      	mov	r0, r3
   109d2:	4b08      	ldr	r3, [pc, #32]	; (109f4 <_ZN9CDC_Class4readEv+0x38>)
   109d4:	4798      	blx	r3
	while(!rxReady);
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	7d5b      	ldrb	r3, [r3, #21]
   109da:	b2db      	uxtb	r3, r3
   109dc:	f083 0301 	eor.w	r3, r3, #1
   109e0:	b2db      	uxtb	r3, r3
   109e2:	2b00      	cmp	r3, #0
   109e4:	d000      	beq.n	109e8 <_ZN9CDC_Class4readEv+0x2c>
   109e6:	e7f6      	b.n	109d6 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   109e8:	7bfb      	ldrb	r3, [r7, #15]
}
   109ea:	4618      	mov	r0, r3
   109ec:	3710      	adds	r7, #16
   109ee:	46bd      	mov	sp, r7
   109f0:	bd80      	pop	{r7, pc}
   109f2:	bf00      	nop
   109f4:	0000ddc1 	.word	0x0000ddc1

000109f8 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   109f8:	b580      	push	{r7, lr}
   109fa:	b082      	sub	sp, #8
   109fc:	af00      	add	r7, sp, #0
   109fe:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   10a00:	687b      	ldr	r3, [r7, #4]
   10a02:	331c      	adds	r3, #28
   10a04:	2140      	movs	r1, #64	; 0x40
   10a06:	4618      	mov	r0, r3
   10a08:	4b02      	ldr	r3, [pc, #8]	; (10a14 <_ZN9CDC_Class5flushEv+0x1c>)
   10a0a:	4798      	blx	r3
}
   10a0c:	bf00      	nop
   10a0e:	3708      	adds	r7, #8
   10a10:	46bd      	mov	sp, r7
   10a12:	bd80      	pop	{r7, pc}
   10a14:	0000de05 	.word	0x0000de05

00010a18 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   10a18:	b580      	push	{r7, lr}
   10a1a:	b082      	sub	sp, #8
   10a1c:	af00      	add	r7, sp, #0
   10a1e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   10a20:	4b02      	ldr	r3, [pc, #8]	; (10a2c <_ZN9CDC_Class5clearEv+0x14>)
   10a22:	4798      	blx	r3
}
   10a24:	bf00      	nop
   10a26:	3708      	adds	r7, #8
   10a28:	46bd      	mov	sp, r7
   10a2a:	bd80      	pop	{r7, pc}
   10a2c:	0000de49 	.word	0x0000de49

00010a30 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   10a30:	b580      	push	{r7, lr}
   10a32:	b082      	sub	sp, #8
   10a34:	af00      	add	r7, sp, #0
   10a36:	6078      	str	r0, [r7, #4]
   10a38:	460b      	mov	r3, r1
   10a3a:	70fb      	strb	r3, [r7, #3]
	if (connected){
   10a3c:	687b      	ldr	r3, [r7, #4]
   10a3e:	7c1b      	ldrb	r3, [r3, #16]
   10a40:	b2db      	uxtb	r3, r3
   10a42:	2b00      	cmp	r3, #0
   10a44:	d012      	beq.n	10a6c <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   10a46:	687b      	ldr	r3, [r7, #4]
   10a48:	7d1b      	ldrb	r3, [r3, #20]
   10a4a:	b2db      	uxtb	r3, r3
   10a4c:	f083 0301 	eor.w	r3, r3, #1
   10a50:	b2db      	uxtb	r3, r3
   10a52:	2b00      	cmp	r3, #0
   10a54:	d000      	beq.n	10a58 <_ZN9CDC_Class5writeEh+0x28>
   10a56:	e7f6      	b.n	10a46 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   10a58:	687b      	ldr	r3, [r7, #4]
   10a5a:	681b      	ldr	r3, [r3, #0]
   10a5c:	3324      	adds	r3, #36	; 0x24
   10a5e:	681b      	ldr	r3, [r3, #0]
   10a60:	1cf9      	adds	r1, r7, #3
   10a62:	2201      	movs	r2, #1
   10a64:	6878      	ldr	r0, [r7, #4]
   10a66:	4798      	blx	r3
   10a68:	4603      	mov	r3, r0
   10a6a:	e000      	b.n	10a6e <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   10a6c:	2300      	movs	r3, #0
	}
		
}
   10a6e:	4618      	mov	r0, r3
   10a70:	3708      	adds	r7, #8
   10a72:	46bd      	mov	sp, r7
   10a74:	bd80      	pop	{r7, pc}
	...

00010a78 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   10a78:	b580      	push	{r7, lr}
   10a7a:	b086      	sub	sp, #24
   10a7c:	af00      	add	r7, sp, #0
   10a7e:	60f8      	str	r0, [r7, #12]
   10a80:	60b9      	str	r1, [r7, #8]
   10a82:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   10a84:	68fb      	ldr	r3, [r7, #12]
   10a86:	7c1b      	ldrb	r3, [r3, #16]
   10a88:	b2db      	uxtb	r3, r3
   10a8a:	2b00      	cmp	r3, #0
   10a8c:	d02f      	beq.n	10aee <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10a8e:	687a      	ldr	r2, [r7, #4]
   10a90:	4613      	mov	r3, r2
   10a92:	009b      	lsls	r3, r3, #2
   10a94:	4413      	add	r3, r2
   10a96:	005b      	lsls	r3, r3, #1
   10a98:	461a      	mov	r2, r3
   10a9a:	4917      	ldr	r1, [pc, #92]	; (10af8 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10a9c:	4817      	ldr	r0, [pc, #92]	; (10afc <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10a9e:	4b18      	ldr	r3, [pc, #96]	; (10b00 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   10aa0:	4798      	blx	r3
		txReady=false;
   10aa2:	68fb      	ldr	r3, [r7, #12]
   10aa4:	2200      	movs	r2, #0
   10aa6:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10aa8:	687b      	ldr	r3, [r7, #4]
   10aaa:	4619      	mov	r1, r3
   10aac:	68b8      	ldr	r0, [r7, #8]
   10aae:	4b15      	ldr	r3, [pc, #84]	; (10b04 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   10ab0:	4798      	blx	r3
   10ab2:	4603      	mov	r3, r0
   10ab4:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   10ab6:	68fb      	ldr	r3, [r7, #12]
   10ab8:	7d1b      	ldrb	r3, [r3, #20]
   10aba:	b2db      	uxtb	r3, r3
   10abc:	f083 0301 	eor.w	r3, r3, #1
   10ac0:	b2db      	uxtb	r3, r3
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	d006      	beq.n	10ad4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10ac6:	68fb      	ldr	r3, [r7, #12]
   10ac8:	7c1b      	ldrb	r3, [r3, #16]
   10aca:	b2db      	uxtb	r3, r3
   10acc:	2b00      	cmp	r3, #0
   10ace:	d001      	beq.n	10ad4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10ad0:	2301      	movs	r3, #1
   10ad2:	e000      	b.n	10ad6 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   10ad4:	2300      	movs	r3, #0
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d000      	beq.n	10adc <_ZN9CDC_Class9writeDataEPKvl+0x64>
   10ada:	e7ec      	b.n	10ab6 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   10adc:	4807      	ldr	r0, [pc, #28]	; (10afc <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10ade:	4b0a      	ldr	r3, [pc, #40]	; (10b08 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   10ae0:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10ae2:	4905      	ldr	r1, [pc, #20]	; (10af8 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10ae4:	4805      	ldr	r0, [pc, #20]	; (10afc <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10ae6:	4b09      	ldr	r3, [pc, #36]	; (10b0c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   10ae8:	4798      	blx	r3
		return r;
   10aea:	697b      	ldr	r3, [r7, #20]
   10aec:	e000      	b.n	10af0 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   10aee:	2300      	movs	r3, #0
	}
	

}
   10af0:	4618      	mov	r0, r3
   10af2:	3718      	adds	r7, #24
   10af4:	46bd      	mov	sp, r7
   10af6:	bd80      	pop	{r7, pc}
   10af8:	000106dd 	.word	0x000106dd
   10afc:	200033e0 	.word	0x200033e0
   10b00:	000103b5 	.word	0x000103b5
   10b04:	0000de05 	.word	0x0000de05
   10b08:	00010241 	.word	0x00010241
   10b0c:	0001035d 	.word	0x0001035d

00010b10 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   10b10:	b580      	push	{r7, lr}
   10b12:	b086      	sub	sp, #24
   10b14:	af00      	add	r7, sp, #0
   10b16:	60f8      	str	r0, [r7, #12]
   10b18:	60b9      	str	r1, [r7, #8]
   10b1a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   10b1c:	68fb      	ldr	r3, [r7, #12]
   10b1e:	2200      	movs	r2, #0
   10b20:	751a      	strb	r2, [r3, #20]

 	if (connected){
   10b22:	68fb      	ldr	r3, [r7, #12]
   10b24:	7c1b      	ldrb	r3, [r3, #16]
   10b26:	b2db      	uxtb	r3, r3
   10b28:	2b00      	cmp	r3, #0
   10b2a:	d02a      	beq.n	10b82 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10b2c:	687a      	ldr	r2, [r7, #4]
   10b2e:	4613      	mov	r3, r2
   10b30:	009b      	lsls	r3, r3, #2
   10b32:	4413      	add	r3, r2
   10b34:	005b      	lsls	r3, r3, #1
   10b36:	461a      	mov	r2, r3
   10b38:	4915      	ldr	r1, [pc, #84]	; (10b90 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10b3a:	4816      	ldr	r0, [pc, #88]	; (10b94 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10b3c:	4b16      	ldr	r3, [pc, #88]	; (10b98 <_ZN9CDC_Class5writeEPKhj+0x88>)
   10b3e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10b40:	6879      	ldr	r1, [r7, #4]
   10b42:	68b8      	ldr	r0, [r7, #8]
   10b44:	4b15      	ldr	r3, [pc, #84]	; (10b9c <_ZN9CDC_Class5writeEPKhj+0x8c>)
   10b46:	4798      	blx	r3
   10b48:	4603      	mov	r3, r0
   10b4a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   10b4c:	68fb      	ldr	r3, [r7, #12]
   10b4e:	7d1b      	ldrb	r3, [r3, #20]
   10b50:	b2db      	uxtb	r3, r3
   10b52:	f083 0301 	eor.w	r3, r3, #1
   10b56:	b2db      	uxtb	r3, r3
   10b58:	2b00      	cmp	r3, #0
   10b5a:	d006      	beq.n	10b6a <_ZN9CDC_Class5writeEPKhj+0x5a>
   10b5c:	68fb      	ldr	r3, [r7, #12]
   10b5e:	7c1b      	ldrb	r3, [r3, #16]
   10b60:	b2db      	uxtb	r3, r3
   10b62:	2b00      	cmp	r3, #0
   10b64:	d001      	beq.n	10b6a <_ZN9CDC_Class5writeEPKhj+0x5a>
   10b66:	2301      	movs	r3, #1
   10b68:	e000      	b.n	10b6c <_ZN9CDC_Class5writeEPKhj+0x5c>
   10b6a:	2300      	movs	r3, #0
   10b6c:	2b00      	cmp	r3, #0
   10b6e:	d000      	beq.n	10b72 <_ZN9CDC_Class5writeEPKhj+0x62>
   10b70:	e7ec      	b.n	10b4c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   10b72:	4808      	ldr	r0, [pc, #32]	; (10b94 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10b74:	4b0a      	ldr	r3, [pc, #40]	; (10ba0 <_ZN9CDC_Class5writeEPKhj+0x90>)
   10b76:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10b78:	4905      	ldr	r1, [pc, #20]	; (10b90 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10b7a:	4806      	ldr	r0, [pc, #24]	; (10b94 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10b7c:	4b09      	ldr	r3, [pc, #36]	; (10ba4 <_ZN9CDC_Class5writeEPKhj+0x94>)
   10b7e:	4798      	blx	r3
   10b80:	e001      	b.n	10b86 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   10b82:	2300      	movs	r3, #0
   10b84:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   10b86:	697b      	ldr	r3, [r7, #20]
}
   10b88:	4618      	mov	r0, r3
   10b8a:	3718      	adds	r7, #24
   10b8c:	46bd      	mov	sp, r7
   10b8e:	bd80      	pop	{r7, pc}
   10b90:	000106dd 	.word	0x000106dd
   10b94:	200033e0 	.word	0x200033e0
   10b98:	000103b5 	.word	0x000103b5
   10b9c:	0000de05 	.word	0x0000de05
   10ba0:	00010241 	.word	0x00010241
   10ba4:	0001035d 	.word	0x0001035d

00010ba8 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   10ba8:	b480      	push	{r7}
   10baa:	b083      	sub	sp, #12
   10bac:	af00      	add	r7, sp, #0
   10bae:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   10bb0:	687b      	ldr	r3, [r7, #4]
   10bb2:	7d5b      	ldrb	r3, [r3, #21]
   10bb4:	b2db      	uxtb	r3, r3
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d006      	beq.n	10bc8 <_ZN9CDC_Class9availableEv+0x20>
   10bba:	687b      	ldr	r3, [r7, #4]
   10bbc:	7d1b      	ldrb	r3, [r3, #20]
   10bbe:	b2db      	uxtb	r3, r3
   10bc0:	2b00      	cmp	r3, #0
   10bc2:	d001      	beq.n	10bc8 <_ZN9CDC_Class9availableEv+0x20>
   10bc4:	2301      	movs	r3, #1
   10bc6:	e000      	b.n	10bca <_ZN9CDC_Class9availableEv+0x22>
   10bc8:	2300      	movs	r3, #0
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d001      	beq.n	10bd2 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   10bce:	2301      	movs	r3, #1
   10bd0:	e000      	b.n	10bd4 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   10bd2:	2300      	movs	r3, #0
	}
	
}
   10bd4:	4618      	mov	r0, r3
   10bd6:	370c      	adds	r7, #12
   10bd8:	46bd      	mov	sp, r7
   10bda:	bc80      	pop	{r7}
   10bdc:	4770      	bx	lr
	...

00010be0 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   10be0:	b580      	push	{r7, lr}
   10be2:	b082      	sub	sp, #8
   10be4:	af00      	add	r7, sp, #0
   10be6:	6078      	str	r0, [r7, #4]
   10be8:	6039      	str	r1, [r7, #0]
   10bea:	687b      	ldr	r3, [r7, #4]
   10bec:	2b01      	cmp	r3, #1
   10bee:	d154      	bne.n	10c9a <_Z41__static_initialization_and_destruction_0ii+0xba>
   10bf0:	683b      	ldr	r3, [r7, #0]
   10bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10bf6:	4293      	cmp	r3, r2
   10bf8:	d14f      	bne.n	10c9a <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10bfa:	492a      	ldr	r1, [pc, #168]	; (10ca4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10bfc:	482a      	ldr	r0, [pc, #168]	; (10ca8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10bfe:	4b2b      	ldr	r3, [pc, #172]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c00:	4798      	blx	r3
   10c02:	4a2b      	ldr	r2, [pc, #172]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c04:	492b      	ldr	r1, [pc, #172]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c06:	4828      	ldr	r0, [pc, #160]	; (10ca8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10c08:	4b2b      	ldr	r3, [pc, #172]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c0a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10c0c:	492b      	ldr	r1, [pc, #172]	; (10cbc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   10c0e:	482c      	ldr	r0, [pc, #176]	; (10cc0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10c10:	4b26      	ldr	r3, [pc, #152]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c12:	4798      	blx	r3
   10c14:	4a26      	ldr	r2, [pc, #152]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c16:	4927      	ldr	r1, [pc, #156]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c18:	4829      	ldr	r0, [pc, #164]	; (10cc0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10c1a:	4b27      	ldr	r3, [pc, #156]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c1c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10c1e:	4929      	ldr	r1, [pc, #164]	; (10cc4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   10c20:	4829      	ldr	r0, [pc, #164]	; (10cc8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10c22:	4b22      	ldr	r3, [pc, #136]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c24:	4798      	blx	r3
   10c26:	4a22      	ldr	r2, [pc, #136]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c28:	4922      	ldr	r1, [pc, #136]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c2a:	4827      	ldr	r0, [pc, #156]	; (10cc8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10c2c:	4b22      	ldr	r3, [pc, #136]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c2e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10c30:	4926      	ldr	r1, [pc, #152]	; (10ccc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10c32:	4827      	ldr	r0, [pc, #156]	; (10cd0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10c34:	4b1d      	ldr	r3, [pc, #116]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c36:	4798      	blx	r3
   10c38:	4a1d      	ldr	r2, [pc, #116]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c3a:	491e      	ldr	r1, [pc, #120]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c3c:	4824      	ldr	r0, [pc, #144]	; (10cd0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10c3e:	4b1e      	ldr	r3, [pc, #120]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c40:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10c42:	4924      	ldr	r1, [pc, #144]	; (10cd4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10c44:	4824      	ldr	r0, [pc, #144]	; (10cd8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10c46:	4b19      	ldr	r3, [pc, #100]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c48:	4798      	blx	r3
   10c4a:	4a19      	ldr	r2, [pc, #100]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c4c:	4919      	ldr	r1, [pc, #100]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c4e:	4822      	ldr	r0, [pc, #136]	; (10cd8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10c50:	4b19      	ldr	r3, [pc, #100]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c52:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10c54:	4921      	ldr	r1, [pc, #132]	; (10cdc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10c56:	4822      	ldr	r0, [pc, #136]	; (10ce0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10c58:	4b14      	ldr	r3, [pc, #80]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c5a:	4798      	blx	r3
   10c5c:	4a14      	ldr	r2, [pc, #80]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c5e:	4915      	ldr	r1, [pc, #84]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c60:	481f      	ldr	r0, [pc, #124]	; (10ce0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10c62:	4b15      	ldr	r3, [pc, #84]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c64:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10c66:	491f      	ldr	r1, [pc, #124]	; (10ce4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10c68:	481f      	ldr	r0, [pc, #124]	; (10ce8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10c6a:	4b10      	ldr	r3, [pc, #64]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c6c:	4798      	blx	r3
   10c6e:	4a10      	ldr	r2, [pc, #64]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c70:	4910      	ldr	r1, [pc, #64]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c72:	481d      	ldr	r0, [pc, #116]	; (10ce8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10c74:	4b10      	ldr	r3, [pc, #64]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c76:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10c78:	491c      	ldr	r1, [pc, #112]	; (10cec <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10c7a:	481d      	ldr	r0, [pc, #116]	; (10cf0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10c7c:	4b0b      	ldr	r3, [pc, #44]	; (10cac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10c7e:	4798      	blx	r3
   10c80:	4a0b      	ldr	r2, [pc, #44]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c82:	490c      	ldr	r1, [pc, #48]	; (10cb4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10c84:	481a      	ldr	r0, [pc, #104]	; (10cf0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10c86:	4b0c      	ldr	r3, [pc, #48]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c88:	4798      	blx	r3
   10c8a:	481a      	ldr	r0, [pc, #104]	; (10cf4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10c8c:	4b1a      	ldr	r3, [pc, #104]	; (10cf8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10c8e:	4798      	blx	r3
   10c90:	4a07      	ldr	r2, [pc, #28]	; (10cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10c92:	491a      	ldr	r1, [pc, #104]	; (10cfc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10c94:	4817      	ldr	r0, [pc, #92]	; (10cf4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10c96:	4b08      	ldr	r3, [pc, #32]	; (10cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10c98:	4798      	blx	r3
   10c9a:	bf00      	nop
   10c9c:	3708      	adds	r7, #8
   10c9e:	46bd      	mov	sp, r7
   10ca0:	bd80      	pop	{r7, pc}
   10ca2:	bf00      	nop
   10ca4:	2000deb0 	.word	0x2000deb0
   10ca8:	20003340 	.word	0x20003340
   10cac:	000100e1 	.word	0x000100e1
   10cb0:	20000000 	.word	0x20000000
   10cb4:	00010119 	.word	0x00010119
   10cb8:	00019fb9 	.word	0x00019fb9
   10cbc:	2000df44 	.word	0x2000df44
   10cc0:	20003360 	.word	0x20003360
   10cc4:	2000e068 	.word	0x2000e068
   10cc8:	20003380 	.word	0x20003380
   10ccc:	2000df64 	.word	0x2000df64
   10cd0:	200033a0 	.word	0x200033a0
   10cd4:	2000e028 	.word	0x2000e028
   10cd8:	200033c0 	.word	0x200033c0
   10cdc:	2000e048 	.word	0x2000e048
   10ce0:	200033e0 	.word	0x200033e0
   10ce4:	2000df20 	.word	0x2000df20
   10ce8:	20003400 	.word	0x20003400
   10cec:	2000dfc0 	.word	0x2000dfc0
   10cf0:	20003420 	.word	0x20003420
   10cf4:	20003444 	.word	0x20003444
   10cf8:	000107cd 	.word	0x000107cd
   10cfc:	00010815 	.word	0x00010815

00010d00 <_GLOBAL__sub_I_ptrCDCClass>:
   10d00:	b580      	push	{r7, lr}
   10d02:	af00      	add	r7, sp, #0
   10d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10d08:	2001      	movs	r0, #1
   10d0a:	4b01      	ldr	r3, [pc, #4]	; (10d10 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   10d0c:	4798      	blx	r3
   10d0e:	bd80      	pop	{r7, pc}
   10d10:	00010be1 	.word	0x00010be1

00010d14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   10d14:	b580      	push	{r7, lr}
   10d16:	b086      	sub	sp, #24
   10d18:	af00      	add	r7, sp, #0
   10d1a:	60f8      	str	r0, [r7, #12]
   10d1c:	60b9      	str	r1, [r7, #8]
   10d1e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   10d20:	2300      	movs	r3, #0
   10d22:	617b      	str	r3, [r7, #20]
  while (size--) {
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	1e5a      	subs	r2, r3, #1
   10d28:	607a      	str	r2, [r7, #4]
   10d2a:	2b00      	cmp	r3, #0
   10d2c:	bf14      	ite	ne
   10d2e:	2301      	movne	r3, #1
   10d30:	2300      	moveq	r3, #0
   10d32:	b2db      	uxtb	r3, r3
   10d34:	2b00      	cmp	r3, #0
   10d36:	d016      	beq.n	10d66 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   10d38:	68fb      	ldr	r3, [r7, #12]
   10d3a:	681b      	ldr	r3, [r3, #0]
   10d3c:	681a      	ldr	r2, [r3, #0]
   10d3e:	68bb      	ldr	r3, [r7, #8]
   10d40:	1c59      	adds	r1, r3, #1
   10d42:	60b9      	str	r1, [r7, #8]
   10d44:	781b      	ldrb	r3, [r3, #0]
   10d46:	4619      	mov	r1, r3
   10d48:	68f8      	ldr	r0, [r7, #12]
   10d4a:	4790      	blx	r2
   10d4c:	4603      	mov	r3, r0
   10d4e:	2b00      	cmp	r3, #0
   10d50:	bf14      	ite	ne
   10d52:	2301      	movne	r3, #1
   10d54:	2300      	moveq	r3, #0
   10d56:	b2db      	uxtb	r3, r3
   10d58:	2b00      	cmp	r3, #0
   10d5a:	d003      	beq.n	10d64 <_ZN5Print5writeEPKhj+0x50>
   10d5c:	697b      	ldr	r3, [r7, #20]
   10d5e:	3301      	adds	r3, #1
   10d60:	617b      	str	r3, [r7, #20]
  while (size--) {
   10d62:	e7df      	b.n	10d24 <_ZN5Print5writeEPKhj+0x10>
    else break;
   10d64:	bf00      	nop
  }
  return n;
   10d66:	697b      	ldr	r3, [r7, #20]
}
   10d68:	4618      	mov	r0, r3
   10d6a:	3718      	adds	r7, #24
   10d6c:	46bd      	mov	sp, r7
   10d6e:	bd80      	pop	{r7, pc}

00010d70 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   10d70:	b480      	push	{r7}
   10d72:	b083      	sub	sp, #12
   10d74:	af00      	add	r7, sp, #0
   10d76:	6078      	str	r0, [r7, #4]
   10d78:	460b      	mov	r3, r1
   10d7a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   10d7c:	78fb      	ldrb	r3, [r7, #3]
   10d7e:	687a      	ldr	r2, [r7, #4]
   10d80:	01db      	lsls	r3, r3, #7
   10d82:	4413      	add	r3, r2
   10d84:	681b      	ldr	r3, [r3, #0]
}
   10d86:	4618      	mov	r0, r3
   10d88:	370c      	adds	r7, #12
   10d8a:	46bd      	mov	sp, r7
   10d8c:	bc80      	pop	{r7}
   10d8e:	4770      	bx	lr

00010d90 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   10d90:	b480      	push	{r7}
   10d92:	b083      	sub	sp, #12
   10d94:	af00      	add	r7, sp, #0
   10d96:	6078      	str	r0, [r7, #4]
   10d98:	460b      	mov	r3, r1
   10d9a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   10d9c:	78fb      	ldrb	r3, [r7, #3]
   10d9e:	687a      	ldr	r2, [r7, #4]
   10da0:	01db      	lsls	r3, r3, #7
   10da2:	4413      	add	r3, r2
   10da4:	3310      	adds	r3, #16
   10da6:	681b      	ldr	r3, [r3, #0]
}
   10da8:	4618      	mov	r0, r3
   10daa:	370c      	adds	r7, #12
   10dac:	46bd      	mov	sp, r7
   10dae:	bc80      	pop	{r7}
   10db0:	4770      	bx	lr

00010db2 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   10db2:	b480      	push	{r7}
   10db4:	b083      	sub	sp, #12
   10db6:	af00      	add	r7, sp, #0
   10db8:	6078      	str	r0, [r7, #4]
   10dba:	460b      	mov	r3, r1
   10dbc:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   10dbe:	78fb      	ldrb	r3, [r7, #3]
   10dc0:	687a      	ldr	r2, [r7, #4]
   10dc2:	01db      	lsls	r3, r3, #7
   10dc4:	4413      	add	r3, r2
   10dc6:	3320      	adds	r3, #32
   10dc8:	681b      	ldr	r3, [r3, #0]
}
   10dca:	4618      	mov	r0, r3
   10dcc:	370c      	adds	r7, #12
   10dce:	46bd      	mov	sp, r7
   10dd0:	bc80      	pop	{r7}
   10dd2:	4770      	bx	lr

00010dd4 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   10dd4:	b580      	push	{r7, lr}
   10dd6:	b086      	sub	sp, #24
   10dd8:	af00      	add	r7, sp, #0
   10dda:	4603      	mov	r3, r0
   10ddc:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   10dde:	f107 030c 	add.w	r3, r7, #12
   10de2:	4618      	mov	r0, r3
   10de4:	4b13      	ldr	r3, [pc, #76]	; (10e34 <_gpio_get_level+0x60>)
   10de6:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   10de8:	79fb      	ldrb	r3, [r7, #7]
   10dea:	4619      	mov	r1, r3
   10dec:	4812      	ldr	r0, [pc, #72]	; (10e38 <_gpio_get_level+0x64>)
   10dee:	4b13      	ldr	r3, [pc, #76]	; (10e3c <_gpio_get_level+0x68>)
   10df0:	4798      	blx	r3
   10df2:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   10df4:	79fb      	ldrb	r3, [r7, #7]
   10df6:	4619      	mov	r1, r3
   10df8:	480f      	ldr	r0, [pc, #60]	; (10e38 <_gpio_get_level+0x64>)
   10dfa:	4b11      	ldr	r3, [pc, #68]	; (10e40 <_gpio_get_level+0x6c>)
   10dfc:	4798      	blx	r3
   10dfe:	4602      	mov	r2, r0
   10e00:	697b      	ldr	r3, [r7, #20]
   10e02:	43db      	mvns	r3, r3
   10e04:	4013      	ands	r3, r2
   10e06:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   10e08:	79fb      	ldrb	r3, [r7, #7]
   10e0a:	4619      	mov	r1, r3
   10e0c:	480a      	ldr	r0, [pc, #40]	; (10e38 <_gpio_get_level+0x64>)
   10e0e:	4b0d      	ldr	r3, [pc, #52]	; (10e44 <_gpio_get_level+0x70>)
   10e10:	4798      	blx	r3
   10e12:	4602      	mov	r2, r0
   10e14:	697b      	ldr	r3, [r7, #20]
   10e16:	4013      	ands	r3, r2
   10e18:	693a      	ldr	r2, [r7, #16]
   10e1a:	4313      	orrs	r3, r2
   10e1c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   10e1e:	f107 030c 	add.w	r3, r7, #12
   10e22:	4618      	mov	r0, r3
   10e24:	4b08      	ldr	r3, [pc, #32]	; (10e48 <_gpio_get_level+0x74>)
   10e26:	4798      	blx	r3

	return tmp;
   10e28:	693b      	ldr	r3, [r7, #16]
}
   10e2a:	4618      	mov	r0, r3
   10e2c:	3718      	adds	r7, #24
   10e2e:	46bd      	mov	sp, r7
   10e30:	bd80      	pop	{r7, pc}
   10e32:	bf00      	nop
   10e34:	0000cfe1 	.word	0x0000cfe1
   10e38:	41008000 	.word	0x41008000
   10e3c:	00010d71 	.word	0x00010d71
   10e40:	00010db3 	.word	0x00010db3
   10e44:	00010d91 	.word	0x00010d91
   10e48:	0000d007 	.word	0x0000d007

00010e4c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   10e4c:	b580      	push	{r7, lr}
   10e4e:	b082      	sub	sp, #8
   10e50:	af00      	add	r7, sp, #0
   10e52:	4603      	mov	r3, r0
   10e54:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   10e56:	79fb      	ldrb	r3, [r7, #7]
   10e58:	115b      	asrs	r3, r3, #5
   10e5a:	b2db      	uxtb	r3, r3
   10e5c:	4618      	mov	r0, r3
   10e5e:	4b09      	ldr	r3, [pc, #36]	; (10e84 <gpio_get_pin_level+0x38>)
   10e60:	4798      	blx	r3
   10e62:	4601      	mov	r1, r0
   10e64:	79fb      	ldrb	r3, [r7, #7]
   10e66:	f003 031f 	and.w	r3, r3, #31
   10e6a:	2201      	movs	r2, #1
   10e6c:	fa02 f303 	lsl.w	r3, r2, r3
   10e70:	400b      	ands	r3, r1
   10e72:	2b00      	cmp	r3, #0
   10e74:	bf14      	ite	ne
   10e76:	2301      	movne	r3, #1
   10e78:	2300      	moveq	r3, #0
   10e7a:	b2db      	uxtb	r3, r3
}
   10e7c:	4618      	mov	r0, r3
   10e7e:	3708      	adds	r7, #8
   10e80:	46bd      	mov	sp, r7
   10e82:	bd80      	pop	{r7, pc}
   10e84:	00010dd5 	.word	0x00010dd5

00010e88 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   10e88:	b480      	push	{r7}
   10e8a:	b083      	sub	sp, #12
   10e8c:	af00      	add	r7, sp, #0
   10e8e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   10e90:	4b06      	ldr	r3, [pc, #24]	; (10eac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   10e92:	681b      	ldr	r3, [r3, #0]
   10e94:	2201      	movs	r2, #1
   10e96:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   10e98:	4b04      	ldr	r3, [pc, #16]	; (10eac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   10e9a:	681b      	ldr	r3, [r3, #0]
   10e9c:	2200      	movs	r2, #0
   10e9e:	705a      	strb	r2, [r3, #1]
}
   10ea0:	bf00      	nop
   10ea2:	370c      	adds	r7, #12
   10ea4:	46bd      	mov	sp, r7
   10ea6:	bc80      	pop	{r7}
   10ea8:	4770      	bx	lr
   10eaa:	bf00      	nop
   10eac:	200035a4 	.word	0x200035a4

00010eb0 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   10eb0:	b580      	push	{r7, lr}
   10eb2:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   10eb4:	2040      	movs	r0, #64	; 0x40
   10eb6:	4b0a      	ldr	r3, [pc, #40]	; (10ee0 <_ZL10USBPluggedv+0x30>)
   10eb8:	4798      	blx	r3
   10eba:	4603      	mov	r3, r0
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	d004      	beq.n	10eca <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   10ec0:	4b08      	ldr	r3, [pc, #32]	; (10ee4 <_ZL10USBPluggedv+0x34>)
   10ec2:	681b      	ldr	r3, [r3, #0]
   10ec4:	2201      	movs	r2, #1
   10ec6:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   10ec8:	e007      	b.n	10eda <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   10eca:	4b06      	ldr	r3, [pc, #24]	; (10ee4 <_ZL10USBPluggedv+0x34>)
   10ecc:	681b      	ldr	r3, [r3, #0]
   10ece:	2200      	movs	r2, #0
   10ed0:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   10ed2:	4b04      	ldr	r3, [pc, #16]	; (10ee4 <_ZL10USBPluggedv+0x34>)
   10ed4:	681b      	ldr	r3, [r3, #0]
   10ed6:	2200      	movs	r2, #0
   10ed8:	701a      	strb	r2, [r3, #0]
}
   10eda:	bf00      	nop
   10edc:	bd80      	pop	{r7, pc}
   10ede:	bf00      	nop
   10ee0:	00010e4d 	.word	0x00010e4d
   10ee4:	200035a4 	.word	0x200035a4

00010ee8 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   10ee8:	b480      	push	{r7}
   10eea:	b083      	sub	sp, #12
   10eec:	af00      	add	r7, sp, #0
   10eee:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   10ef0:	4a04      	ldr	r2, [pc, #16]	; (10f04 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   10ef2:	687b      	ldr	r3, [r7, #4]
   10ef4:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   10ef6:	687b      	ldr	r3, [r7, #4]
   10ef8:	4618      	mov	r0, r3
   10efa:	370c      	adds	r7, #12
   10efc:	46bd      	mov	sp, r7
   10efe:	bc80      	pop	{r7}
   10f00:	4770      	bx	lr
   10f02:	bf00      	nop
   10f04:	200035a4 	.word	0x200035a4

00010f08 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   10f08:	b480      	push	{r7}
   10f0a:	b083      	sub	sp, #12
   10f0c:	af00      	add	r7, sp, #0
   10f0e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	4618      	mov	r0, r3
   10f14:	370c      	adds	r7, #12
   10f16:	46bd      	mov	sp, r7
   10f18:	bc80      	pop	{r7}
   10f1a:	4770      	bx	lr

00010f1c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   10f1c:	b580      	push	{r7, lr}
   10f1e:	b082      	sub	sp, #8
   10f20:	af00      	add	r7, sp, #0
   10f22:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   10f24:	491e      	ldr	r1, [pc, #120]	; (10fa0 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   10f26:	2040      	movs	r0, #64	; 0x40
   10f28:	4b1e      	ldr	r3, [pc, #120]	; (10fa4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   10f2a:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   10f2c:	481e      	ldr	r0, [pc, #120]	; (10fa8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   10f2e:	4b1f      	ldr	r3, [pc, #124]	; (10fac <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   10f30:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   10f32:	2040      	movs	r0, #64	; 0x40
   10f34:	4b1e      	ldr	r3, [pc, #120]	; (10fb0 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   10f36:	4798      	blx	r3
   10f38:	4603      	mov	r3, r0
   10f3a:	461a      	mov	r2, r3
   10f3c:	687b      	ldr	r3, [r7, #4]
   10f3e:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   10f40:	687b      	ldr	r3, [r7, #4]
   10f42:	78db      	ldrb	r3, [r3, #3]
   10f44:	2b00      	cmp	r3, #0
   10f46:	d021      	beq.n	10f8c <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   10f48:	687b      	ldr	r3, [r7, #4]
   10f4a:	2200      	movs	r2, #0
   10f4c:	709a      	strb	r2, [r3, #2]
			plugged=true;
   10f4e:	687b      	ldr	r3, [r7, #4]
   10f50:	2201      	movs	r2, #1
   10f52:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   10f54:	f44f 7216 	mov.w	r2, #600	; 0x258
   10f58:	4916      	ldr	r1, [pc, #88]	; (10fb4 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   10f5a:	4813      	ldr	r0, [pc, #76]	; (10fa8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   10f5c:	4b16      	ldr	r3, [pc, #88]	; (10fb8 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   10f5e:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   10f60:	4816      	ldr	r0, [pc, #88]	; (10fbc <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   10f62:	4b17      	ldr	r3, [pc, #92]	; (10fc0 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   10f64:	4798      	blx	r3
   10f66:	4603      	mov	r3, r0
   10f68:	f083 0301 	eor.w	r3, r3, #1
   10f6c:	b2db      	uxtb	r3, r3
   10f6e:	2b00      	cmp	r3, #0
   10f70:	d008      	beq.n	10f84 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   10f72:	687b      	ldr	r3, [r7, #4]
   10f74:	789b      	ldrb	r3, [r3, #2]
   10f76:	b2db      	uxtb	r3, r3
   10f78:	2b00      	cmp	r3, #0
   10f7a:	d0f1      	beq.n	10f60 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   10f7c:	687b      	ldr	r3, [r7, #4]
   10f7e:	2200      	movs	r2, #0
   10f80:	701a      	strb	r2, [r3, #0]
					return;
   10f82:	e009      	b.n	10f98 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   10f84:	4808      	ldr	r0, [pc, #32]	; (10fa8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   10f86:	4b0f      	ldr	r3, [pc, #60]	; (10fc4 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   10f88:	4798      	blx	r3
   10f8a:	e005      	b.n	10f98 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   10f8c:	687b      	ldr	r3, [r7, #4]
   10f8e:	2200      	movs	r2, #0
   10f90:	701a      	strb	r2, [r3, #0]
			plugged=false;
   10f92:	687b      	ldr	r3, [r7, #4]
   10f94:	2200      	movs	r2, #0
   10f96:	705a      	strb	r2, [r3, #1]
		}
		
}
   10f98:	3708      	adds	r7, #8
   10f9a:	46bd      	mov	sp, r7
   10f9c:	bd80      	pop	{r7, pc}
   10f9e:	bf00      	nop
   10fa0:	00010eb1 	.word	0x00010eb1
   10fa4:	000035f5 	.word	0x000035f5
   10fa8:	20003544 	.word	0x20003544
   10fac:	000101cd 	.word	0x000101cd
   10fb0:	00010e4d 	.word	0x00010e4d
   10fb4:	00010e89 	.word	0x00010e89
   10fb8:	000103b5 	.word	0x000103b5
   10fbc:	20003444 	.word	0x20003444
   10fc0:	00010885 	.word	0x00010885
   10fc4:	00010241 	.word	0x00010241

00010fc8 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
   10fc8:	b580      	push	{r7, lr}
   10fca:	b082      	sub	sp, #8
   10fcc:	af00      	add	r7, sp, #0
   10fce:	6078      	str	r0, [r7, #4]
   10fd0:	6039      	str	r1, [r7, #0]
   10fd2:	687b      	ldr	r3, [r7, #4]
   10fd4:	2b01      	cmp	r3, #1
   10fd6:	d14c      	bne.n	11072 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   10fd8:	683b      	ldr	r3, [r7, #0]
   10fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10fde:	4293      	cmp	r3, r2
   10fe0:	d147      	bne.n	11072 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10fe2:	4926      	ldr	r1, [pc, #152]	; (1107c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   10fe4:	4826      	ldr	r0, [pc, #152]	; (11080 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   10fe6:	4b27      	ldr	r3, [pc, #156]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10fe8:	4798      	blx	r3
   10fea:	4a27      	ldr	r2, [pc, #156]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10fec:	4927      	ldr	r1, [pc, #156]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10fee:	4824      	ldr	r0, [pc, #144]	; (11080 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   10ff0:	4b27      	ldr	r3, [pc, #156]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10ff2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10ff4:	4927      	ldr	r1, [pc, #156]	; (11094 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10ff6:	4828      	ldr	r0, [pc, #160]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10ff8:	4b22      	ldr	r3, [pc, #136]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10ffa:	4798      	blx	r3
   10ffc:	4a22      	ldr	r2, [pc, #136]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10ffe:	4923      	ldr	r1, [pc, #140]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11000:	4825      	ldr	r0, [pc, #148]	; (11098 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11002:	4b23      	ldr	r3, [pc, #140]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11004:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   11006:	4925      	ldr	r1, [pc, #148]	; (1109c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11008:	4825      	ldr	r0, [pc, #148]	; (110a0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1100a:	4b1e      	ldr	r3, [pc, #120]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1100c:	4798      	blx	r3
   1100e:	4a1e      	ldr	r2, [pc, #120]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11010:	491e      	ldr	r1, [pc, #120]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11012:	4823      	ldr	r0, [pc, #140]	; (110a0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11014:	4b1e      	ldr	r3, [pc, #120]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11016:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11018:	4922      	ldr	r1, [pc, #136]	; (110a4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1101a:	4823      	ldr	r0, [pc, #140]	; (110a8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1101c:	4b19      	ldr	r3, [pc, #100]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1101e:	4798      	blx	r3
   11020:	4a19      	ldr	r2, [pc, #100]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11022:	491a      	ldr	r1, [pc, #104]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11024:	4820      	ldr	r0, [pc, #128]	; (110a8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11026:	4b1a      	ldr	r3, [pc, #104]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11028:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1102a:	4920      	ldr	r1, [pc, #128]	; (110ac <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1102c:	4820      	ldr	r0, [pc, #128]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1102e:	4b15      	ldr	r3, [pc, #84]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11030:	4798      	blx	r3
   11032:	4a15      	ldr	r2, [pc, #84]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11034:	4915      	ldr	r1, [pc, #84]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11036:	481e      	ldr	r0, [pc, #120]	; (110b0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11038:	4b15      	ldr	r3, [pc, #84]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1103a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1103c:	491d      	ldr	r1, [pc, #116]	; (110b4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1103e:	481e      	ldr	r0, [pc, #120]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11040:	4b10      	ldr	r3, [pc, #64]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11042:	4798      	blx	r3
   11044:	4a10      	ldr	r2, [pc, #64]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11046:	4911      	ldr	r1, [pc, #68]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11048:	481b      	ldr	r0, [pc, #108]	; (110b8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1104a:	4b11      	ldr	r3, [pc, #68]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1104c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1104e:	491b      	ldr	r1, [pc, #108]	; (110bc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   11050:	481b      	ldr	r0, [pc, #108]	; (110c0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11052:	4b0c      	ldr	r3, [pc, #48]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11054:	4798      	blx	r3
   11056:	4a0c      	ldr	r2, [pc, #48]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11058:	490c      	ldr	r1, [pc, #48]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1105a:	4819      	ldr	r0, [pc, #100]	; (110c0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1105c:	4b0c      	ldr	r3, [pc, #48]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1105e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   11060:	4918      	ldr	r1, [pc, #96]	; (110c4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   11062:	4819      	ldr	r0, [pc, #100]	; (110c8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11064:	4b07      	ldr	r3, [pc, #28]	; (11084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11066:	4798      	blx	r3
   11068:	4a07      	ldr	r2, [pc, #28]	; (11088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1106a:	4908      	ldr	r1, [pc, #32]	; (1108c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1106c:	4816      	ldr	r0, [pc, #88]	; (110c8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1106e:	4b08      	ldr	r3, [pc, #32]	; (11090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11070:	4798      	blx	r3
   11072:	bf00      	nop
   11074:	3708      	adds	r7, #8
   11076:	46bd      	mov	sp, r7
   11078:	bd80      	pop	{r7, pc}
   1107a:	bf00      	nop
   1107c:	2000deb0 	.word	0x2000deb0
   11080:	200034a4 	.word	0x200034a4
   11084:	000100e1 	.word	0x000100e1
   11088:	20000000 	.word	0x20000000
   1108c:	00010119 	.word	0x00010119
   11090:	00019fb9 	.word	0x00019fb9
   11094:	2000df44 	.word	0x2000df44
   11098:	200034c4 	.word	0x200034c4
   1109c:	2000e068 	.word	0x2000e068
   110a0:	200034e4 	.word	0x200034e4
   110a4:	2000df64 	.word	0x2000df64
   110a8:	20003504 	.word	0x20003504
   110ac:	2000e028 	.word	0x2000e028
   110b0:	20003524 	.word	0x20003524
   110b4:	2000e048 	.word	0x2000e048
   110b8:	20003544 	.word	0x20003544
   110bc:	2000df20 	.word	0x2000df20
   110c0:	20003564 	.word	0x20003564
   110c4:	2000dfc0 	.word	0x2000dfc0
   110c8:	20003584 	.word	0x20003584

000110cc <_GLOBAL__sub_I_ptrSerialTerminalClass>:
   110cc:	b580      	push	{r7, lr}
   110ce:	af00      	add	r7, sp, #0
   110d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   110d4:	2001      	movs	r0, #1
   110d6:	4b01      	ldr	r3, [pc, #4]	; (110dc <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
   110d8:	4798      	blx	r3
   110da:	bd80      	pop	{r7, pc}
   110dc:	00010fc9 	.word	0x00010fc9

000110e0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   110e0:	b480      	push	{r7}
   110e2:	b083      	sub	sp, #12
   110e4:	af00      	add	r7, sp, #0
   110e6:	6078      	str	r0, [r7, #4]
    return (void *)0;
   110e8:	2300      	movs	r3, #0
	}
   110ea:	4618      	mov	r0, r3
   110ec:	370c      	adds	r7, #12
   110ee:	46bd      	mov	sp, r7
   110f0:	bc80      	pop	{r7}
   110f2:	4770      	bx	lr

000110f4 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   110f4:	b480      	push	{r7}
   110f6:	af00      	add	r7, sp, #0
		}
   110f8:	bf00      	nop
   110fa:	46bd      	mov	sp, r7
   110fc:	bc80      	pop	{r7}
   110fe:	4770      	bx	lr

00011100 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
   11100:	4770      	bx	lr

00011102 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
   11102:	4770      	bx	lr

00011104 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
   11104:	1f0b      	subs	r3, r1, #4
   11106:	300c      	adds	r0, #12
   11108:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
   1110a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1110e:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11112:	428b      	cmp	r3, r1
   11114:	d1f9      	bne.n	1110a <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
   11116:	2000      	movs	r0, #0
   11118:	4770      	bx	lr
	...

0001111c <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
   1111c:	b510      	push	{r4, lr}
   1111e:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
   11120:	68c0      	ldr	r0, [r0, #12]
   11122:	4b0a      	ldr	r3, [pc, #40]	; (1114c <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
   11124:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
   11126:	f3c0 1200 	ubfx	r2, r0, #4, #1
   1112a:	78e3      	ldrb	r3, [r4, #3]
   1112c:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
   11130:	f3c0 1240 	ubfx	r2, r0, #5, #1
   11134:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
   11138:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1113c:	f362 0300 	bfi	r3, r2, #0, #1
   11140:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
   11142:	f000 0070 	and.w	r0, r0, #112	; 0x70
   11146:	7120      	strb	r0, [r4, #4]
	return faults;
}
   11148:	bd10      	pop	{r4, pc}
   1114a:	bf00      	nop
   1114c:	0000fcf1 	.word	0x0000fcf1

00011150 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
   11150:	b510      	push	{r4, lr}
   11152:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
   11154:	f081 0201 	eor.w	r2, r1, #1
   11158:	2100      	movs	r1, #0
   1115a:	68c0      	ldr	r0, [r0, #12]
   1115c:	4b01      	ldr	r3, [pc, #4]	; (11164 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
   1115e:	4798      	blx	r3
   11160:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
   11162:	bd10      	pop	{r4, pc}
   11164:	0000ffa9 	.word	0x0000ffa9

00011168 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
   11168:	b510      	push	{r4, lr}
   1116a:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
   1116c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1116e:	4b02      	ldr	r3, [pc, #8]	; (11178 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
   11170:	4798      	blx	r3
   11172:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
   11174:	bd10      	pop	{r4, pc}
   11176:	bf00      	nop
   11178:	0000fd75 	.word	0x0000fd75

0001117c <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
   1117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11180:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
   11182:	2100      	movs	r1, #0
   11184:	4c0f      	ldr	r4, [pc, #60]	; (111c4 <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
   11186:	47a0      	blx	r4
		SetPWM(0xff);
   11188:	21ff      	movs	r1, #255	; 0xff
   1118a:	4628      	mov	r0, r5
   1118c:	4b0e      	ldr	r3, [pc, #56]	; (111c8 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
   1118e:	4798      	blx	r3
		SetEnable(true);
   11190:	2101      	movs	r1, #1
   11192:	4628      	mov	r0, r5
   11194:	47a0      	blx	r4
   11196:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
   11198:	4f0b      	ldr	r7, [pc, #44]	; (111c8 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
   1119a:	f04f 080a 	mov.w	r8, #10
   1119e:	4e0b      	ldr	r6, [pc, #44]	; (111cc <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
   111a0:	4621      	mov	r1, r4
   111a2:	4628      	mov	r0, r5
   111a4:	47b8      	blx	r7
			delay_us(10);
   111a6:	4640      	mov	r0, r8
   111a8:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
   111aa:	3c01      	subs	r4, #1
   111ac:	b2e4      	uxtb	r4, r4
   111ae:	2c10      	cmp	r4, #16
   111b0:	d1f6      	bne.n	111a0 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
   111b2:	4628      	mov	r0, r5
   111b4:	4b06      	ldr	r3, [pc, #24]	; (111d0 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
   111b6:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
   111b8:	78e8      	ldrb	r0, [r5, #3]
		return result;
   111ba:	f3c0 0080 	ubfx	r0, r0, #2, #1
   111be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111c2:	bf00      	nop
   111c4:	00011151 	.word	0x00011151
   111c8:	00011169 	.word	0x00011169
   111cc:	0000352d 	.word	0x0000352d
   111d0:	0001111d 	.word	0x0001111d

000111d4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
   111d4:	b510      	push	{r4, lr}
   111d6:	4604      	mov	r4, r0
	i2c=i2cClass;
   111d8:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
   111da:	7a4b      	ldrb	r3, [r1, #9]
   111dc:	b90b      	cbnz	r3, 111e2 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
   111de:	78a0      	ldrb	r0, [r4, #2]
   111e0:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
   111e2:	4611      	mov	r1, r2
   111e4:	4b04      	ldr	r3, [pc, #16]	; (111f8 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
   111e6:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
   111e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   111ea:	4b04      	ldr	r3, [pc, #16]	; (111fc <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
   111ec:	4798      	blx	r3
		isOK=SelfTest();
   111ee:	4620      	mov	r0, r4
   111f0:	4b03      	ldr	r3, [pc, #12]	; (11200 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
   111f2:	4798      	blx	r3
   111f4:	70a0      	strb	r0, [r4, #2]
   111f6:	e7f2      	b.n	111de <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
   111f8:	00011105 	.word	0x00011105
   111fc:	0000fe69 	.word	0x0000fe69
   11200:	0001117d 	.word	0x0001117d

00011204 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev>:
   11204:	b510      	push	{r4, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11206:	4c05      	ldr	r4, [pc, #20]	; (1121c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x18>)
   11208:	4905      	ldr	r1, [pc, #20]	; (11220 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x1c>)
   1120a:	4620      	mov	r0, r4
   1120c:	4b05      	ldr	r3, [pc, #20]	; (11224 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x20>)
   1120e:	4798      	blx	r3
   11210:	4a05      	ldr	r2, [pc, #20]	; (11228 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x24>)
   11212:	4906      	ldr	r1, [pc, #24]	; (1122c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x28>)
   11214:	4620      	mov	r0, r4
   11216:	4b06      	ldr	r3, [pc, #24]	; (11230 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x2c>)
   11218:	4798      	blx	r3
   1121a:	bd10      	pop	{r4, pc}
   1121c:	200035a8 	.word	0x200035a8
   11220:	2000dfe0 	.word	0x2000dfe0
   11224:	0000fa29 	.word	0x0000fa29
   11228:	20000000 	.word	0x20000000
   1122c:	0000fa45 	.word	0x0000fa45
   11230:	00019fb9 	.word	0x00019fb9

00011234 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
   11234:	b510      	push	{r4, lr}
   11236:	4604      	mov	r4, r0
   11238:	302c      	adds	r0, #44	; 0x2c
   1123a:	4b03      	ldr	r3, [pc, #12]	; (11248 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
   1123c:	4798      	blx	r3
   1123e:	4620      	mov	r0, r4
   11240:	4b02      	ldr	r3, [pc, #8]	; (1124c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
   11242:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
   11244:	4620      	mov	r0, r4
   11246:	bd10      	pop	{r4, pc}
   11248:	00011103 	.word	0x00011103
   1124c:	00011499 	.word	0x00011499

00011250 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   11250:	b570      	push	{r4, r5, r6, lr}
   11252:	4c05      	ldr	r4, [pc, #20]	; (11268 <__tcf_1+0x18>)
   11254:	4e05      	ldr	r6, [pc, #20]	; (1126c <__tcf_1+0x1c>)
   11256:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
   1125a:	3c1c      	subs	r4, #28
   1125c:	4620      	mov	r0, r4
   1125e:	47b0      	blx	r6
   11260:	42ac      	cmp	r4, r5
   11262:	d1fa      	bne.n	1125a <__tcf_1+0xa>
   11264:	bd70      	pop	{r4, r5, r6, pc}
   11266:	bf00      	nop
   11268:	20003684 	.word	0x20003684
   1126c:	0000fbf9 	.word	0x0000fbf9

00011270 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
   11270:	b510      	push	{r4, lr}
   11272:	4803      	ldr	r0, [pc, #12]	; (11280 <__tcf_0+0x10>)
   11274:	4c03      	ldr	r4, [pc, #12]	; (11284 <__tcf_0+0x14>)
   11276:	47a0      	blx	r4
   11278:	4803      	ldr	r0, [pc, #12]	; (11288 <__tcf_0+0x18>)
   1127a:	47a0      	blx	r4
   1127c:	bd10      	pop	{r4, pc}
   1127e:	bf00      	nop
   11280:	200036b0 	.word	0x200036b0
   11284:	00011499 	.word	0x00011499
   11288:	20003684 	.word	0x20003684

0001128c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
   1128c:	b510      	push	{r4, lr}
   1128e:	4604      	mov	r4, r0
   11290:	4b0d      	ldr	r3, [pc, #52]	; (112c8 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
   11292:	4798      	blx	r3
   11294:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   11298:	4b0c      	ldr	r3, [pc, #48]	; (112cc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
   1129a:	4798      	blx	r3
	i2c=&i2cFansStatic;
   1129c:	4b0c      	ldr	r3, [pc, #48]	; (112d0 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
   1129e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
   112a2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
   112a6:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
   112aa:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
   112ac:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   112b0:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
   112b2:	f503 729a 	add.w	r2, r3, #308	; 0x134
   112b6:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
   112b8:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
   112bc:	2300      	movs	r3, #0
   112be:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
   112c2:	4620      	mov	r0, r4
   112c4:	bd10      	pop	{r4, pc}
   112c6:	bf00      	nop
   112c8:	00011481 	.word	0x00011481
   112cc:	00011101 	.word	0x00011101
   112d0:	200035c0 	.word	0x200035c0

000112d4 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
   112d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112d8:	4606      	mov	r6, r0
   112da:	4c0c      	ldr	r4, [pc, #48]	; (1130c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
   112dc:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   112e0:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   112e2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 11310 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
   112e6:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
   112ea:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   112ee:	f045 0120 	orr.w	r1, r5, #32
   112f2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   112f6:	b2c9      	uxtb	r1, r1
   112f8:	4620      	mov	r0, r4
   112fa:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   112fc:	3501      	adds	r5, #1
   112fe:	341c      	adds	r4, #28
   11300:	2d07      	cmp	r5, #7
   11302:	d1f0      	bne.n	112e6 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
   11304:	2000      	movs	r0, #0
   11306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1130a:	bf00      	nop
   1130c:	200035c0 	.word	0x200035c0
   11310:	0000fc0d 	.word	0x0000fc0d

00011314 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
   11314:	b570      	push	{r4, r5, r6, lr}
   11316:	4604      	mov	r4, r0
	i2c->Init();
   11318:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   1131c:	4b17      	ldr	r3, [pc, #92]	; (1137c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
   1131e:	4798      	blx	r3
	if (i2c->isOK)
   11320:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   11324:	7a5b      	ldrb	r3, [r3, #9]
   11326:	b943      	cbnz	r3, 1133a <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
   11328:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1132c:	7a5b      	ldrb	r3, [r3, #9]
   1132e:	b2db      	uxtb	r3, r3
   11330:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
   11334:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
   11338:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
   1133a:	4620      	mov	r0, r4
   1133c:	4b10      	ldr	r3, [pc, #64]	; (11380 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
   1133e:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
   11340:	f104 0568 	add.w	r5, r4, #104	; 0x68
   11344:	462b      	mov	r3, r5
   11346:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1134a:	2100      	movs	r1, #0
   1134c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1134e:	4e0d      	ldr	r6, [pc, #52]	; (11384 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
   11350:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
   11352:	462b      	mov	r3, r5
   11354:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   11358:	2101      	movs	r1, #1
   1135a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1135c:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
   1135e:	462a      	mov	r2, r5
   11360:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   11364:	6e60      	ldr	r0, [r4, #100]	; 0x64
   11366:	4b08      	ldr	r3, [pc, #32]	; (11388 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
   11368:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
   1136a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1136c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1136e:	791b      	ldrb	r3, [r3, #4]
   11370:	7912      	ldrb	r2, [r2, #4]
   11372:	4013      	ands	r3, r2
   11374:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   11378:	e7d6      	b.n	11328 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
   1137a:	bf00      	nop
   1137c:	0000fa59 	.word	0x0000fa59
   11380:	000112d5 	.word	0x000112d5
   11384:	000115a5 	.word	0x000115a5
   11388:	000111d5 	.word	0x000111d5

0001138c <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
   1138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1138e:	f100 0468 	add.w	r4, r0, #104	; 0x68
   11392:	1e4d      	subs	r5, r1, #1
   11394:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
   11398:	4f04      	ldr	r7, [pc, #16]	; (113ac <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
   1139a:	f854 0b04 	ldr.w	r0, [r4], #4
   1139e:	47b8      	blx	r7
   113a0:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   113a4:	42b4      	cmp	r4, r6
   113a6:	d1f8      	bne.n	1139a <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
   113a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113aa:	bf00      	nop
   113ac:	0000fcf1 	.word	0x0000fcf1

000113b0 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
   113b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   113b4:	4c22      	ldr	r4, [pc, #136]	; (11440 <_GLOBAL__sub_I_ptrFansClass+0x90>)
   113b6:	f504 75b2 	add.w	r5, r4, #356	; 0x164
   113ba:	4922      	ldr	r1, [pc, #136]	; (11444 <_GLOBAL__sub_I_ptrFansClass+0x94>)
   113bc:	4628      	mov	r0, r5
   113be:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 11474 <_GLOBAL__sub_I_ptrFansClass+0xc4>
   113c2:	47c8      	blx	r9
   113c4:	4f20      	ldr	r7, [pc, #128]	; (11448 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   113c6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11478 <_GLOBAL__sub_I_ptrFansClass+0xc8>
   113ca:	463a      	mov	r2, r7
   113cc:	4641      	mov	r1, r8
   113ce:	4628      	mov	r0, r5
   113d0:	4e1e      	ldr	r6, [pc, #120]	; (1144c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   113d2:	47b0      	blx	r6
static I2C_Sync_Class	i2cFansStatic(&I2C_FANS);
   113d4:	f504 758e 	add.w	r5, r4, #284	; 0x11c
   113d8:	491d      	ldr	r1, [pc, #116]	; (11450 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
   113da:	4628      	mov	r0, r5
   113dc:	47c8      	blx	r9
   113de:	463a      	mov	r2, r7
   113e0:	4641      	mov	r1, r8
   113e2:	4628      	mov	r0, r5
   113e4:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
   113e6:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
   113ea:	4628      	mov	r0, r5
   113ec:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1147c <_GLOBAL__sub_I_ptrFansClass+0xcc>
   113f0:	47c0      	blx	r8
   113f2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   113f6:	47c0      	blx	r8
   113f8:	463a      	mov	r2, r7
   113fa:	4916      	ldr	r1, [pc, #88]	; (11454 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
   113fc:	2000      	movs	r0, #0
   113fe:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
   11400:	f504 789a 	add.w	r8, r4, #308	; 0x134
   11404:	4640      	mov	r0, r8
   11406:	4b14      	ldr	r3, [pc, #80]	; (11458 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
   11408:	4798      	blx	r3
   1140a:	463a      	mov	r2, r7
   1140c:	4913      	ldr	r1, [pc, #76]	; (1145c <_GLOBAL__sub_I_ptrFansClass+0xac>)
   1140e:	4640      	mov	r0, r8
   11410:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   11412:	4e13      	ldr	r6, [pc, #76]	; (11460 <_GLOBAL__sub_I_ptrFansClass+0xb0>)
   11414:	4620      	mov	r0, r4
   11416:	47b0      	blx	r6
   11418:	341c      	adds	r4, #28
   1141a:	42a5      	cmp	r5, r4
   1141c:	d1fa      	bne.n	11414 <_GLOBAL__sub_I_ptrFansClass+0x64>
   1141e:	4e0a      	ldr	r6, [pc, #40]	; (11448 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   11420:	4632      	mov	r2, r6
   11422:	4910      	ldr	r1, [pc, #64]	; (11464 <_GLOBAL__sub_I_ptrFansClass+0xb4>)
   11424:	2000      	movs	r0, #0
   11426:	4c09      	ldr	r4, [pc, #36]	; (1144c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   11428:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
   1142a:	4d0f      	ldr	r5, [pc, #60]	; (11468 <_GLOBAL__sub_I_ptrFansClass+0xb8>)
   1142c:	4628      	mov	r0, r5
   1142e:	4b0f      	ldr	r3, [pc, #60]	; (1146c <_GLOBAL__sub_I_ptrFansClass+0xbc>)
   11430:	4798      	blx	r3
   11432:	4632      	mov	r2, r6
   11434:	490e      	ldr	r1, [pc, #56]	; (11470 <_GLOBAL__sub_I_ptrFansClass+0xc0>)
   11436:	4628      	mov	r0, r5
   11438:	47a0      	blx	r4
   1143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1143e:	bf00      	nop
   11440:	200035c0 	.word	0x200035c0
   11444:	2000dfe0 	.word	0x2000dfe0
   11448:	20000000 	.word	0x20000000
   1144c:	00019fb9 	.word	0x00019fb9
   11450:	2000df00 	.word	0x2000df00
   11454:	00011271 	.word	0x00011271
   11458:	00011101 	.word	0x00011101
   1145c:	00011103 	.word	0x00011103
   11460:	0000fbe5 	.word	0x0000fbe5
   11464:	00011251 	.word	0x00011251
   11468:	2000373c 	.word	0x2000373c
   1146c:	0001128d 	.word	0x0001128d
   11470:	00011235 	.word	0x00011235
   11474:	0000fa29 	.word	0x0000fa29
   11478:	0000fa45 	.word	0x0000fa45
   1147c:	00011481 	.word	0x00011481

00011480 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
   11480:	b510      	push	{r4, lr}
   11482:	4604      	mov	r4, r0
   11484:	4b02      	ldr	r3, [pc, #8]	; (11490 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
   11486:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
   11488:	4b02      	ldr	r3, [pc, #8]	; (11494 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
   1148a:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
   1148c:	4620      	mov	r0, r4
   1148e:	bd10      	pop	{r4, pc}
   11490:	0001163d 	.word	0x0001163d
   11494:	200037c8 	.word	0x200037c8

00011498 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
   11498:	b510      	push	{r4, lr}
   1149a:	4604      	mov	r4, r0
   1149c:	4b01      	ldr	r3, [pc, #4]	; (114a4 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
   1149e:	4798      	blx	r3
{
} //~EvaporatorFan_Class
   114a0:	4620      	mov	r0, r4
   114a2:	bd10      	pop	{r4, pc}
   114a4:	0001163f 	.word	0x0001163f

000114a8 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
   114a8:	1f0b      	subs	r3, r1, #4
   114aa:	300c      	adds	r0, #12
   114ac:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
   114ae:	f853 2f04 	ldr.w	r2, [r3, #4]!
   114b2:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
   114b6:	428b      	cmp	r3, r1
   114b8:	d1f9      	bne.n	114ae <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
   114ba:	2000      	movs	r0, #0
   114bc:	4770      	bx	lr
	...

000114c0 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
   114c0:	b538      	push	{r3, r4, r5, lr}
   114c2:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
   114c4:	6900      	ldr	r0, [r0, #16]
   114c6:	4b10      	ldr	r3, [pc, #64]	; (11508 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
   114c8:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
   114ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   114ce:	0099      	lsls	r1, r3, #2
   114d0:	fa40 f501 	asr.w	r5, r0, r1
   114d4:	5ce2      	ldrb	r2, [r4, r3]
   114d6:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
   114da:	2502      	movs	r5, #2
   114dc:	408d      	lsls	r5, r1
   114de:	4205      	tst	r5, r0
   114e0:	bf14      	ite	ne
   114e2:	2501      	movne	r5, #1
   114e4:	2500      	moveq	r5, #0
   114e6:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
   114ea:	2504      	movs	r5, #4
   114ec:	408d      	lsls	r5, r1
   114ee:	4205      	tst	r5, r0
   114f0:	bf14      	ite	ne
   114f2:	2501      	movne	r5, #1
   114f4:	2500      	moveq	r5, #0
   114f6:	f365 0200 	bfi	r2, r5, #0, #1
   114fa:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
   114fc:	2307      	movs	r3, #7
   114fe:	408b      	lsls	r3, r1
   11500:	4018      	ands	r0, r3
   11502:	b2c0      	uxtb	r0, r0
   11504:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
   11506:	bd38      	pop	{r3, r4, r5, pc}
   11508:	0000fcf1 	.word	0x0000fcf1

0001150c <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
   1150c:	b510      	push	{r4, lr}
   1150e:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   11510:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11514:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
   11516:	f081 0201 	eor.w	r2, r1, #1
   1151a:	bf0c      	ite	eq
   1151c:	2102      	moveq	r1, #2
   1151e:	2101      	movne	r1, #1
   11520:	68c0      	ldr	r0, [r0, #12]
   11522:	4b02      	ldr	r3, [pc, #8]	; (1152c <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
   11524:	4798      	blx	r3
   11526:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
   11528:	bd10      	pop	{r4, pc}
   1152a:	bf00      	nop
   1152c:	0000ffa9 	.word	0x0000ffa9

00011530 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
   11530:	b510      	push	{r4, lr}
   11532:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
   11534:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11538:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1153c:	69d8      	ldr	r0, [r3, #28]
   1153e:	4b02      	ldr	r3, [pc, #8]	; (11548 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
   11540:	4798      	blx	r3
   11542:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
   11546:	bd10      	pop	{r4, pc}
   11548:	0000fd75 	.word	0x0000fd75

0001154c <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
   1154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11550:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
   11552:	2100      	movs	r1, #0
   11554:	4c0f      	ldr	r4, [pc, #60]	; (11594 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
   11556:	47a0      	blx	r4
	SetPWM(0xff);
   11558:	21ff      	movs	r1, #255	; 0xff
   1155a:	4628      	mov	r0, r5
   1155c:	4b0e      	ldr	r3, [pc, #56]	; (11598 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
   1155e:	4798      	blx	r3
	SetEnable(true);
   11560:	2101      	movs	r1, #1
   11562:	4628      	mov	r0, r5
   11564:	47a0      	blx	r4
   11566:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
   11568:	4f0b      	ldr	r7, [pc, #44]	; (11598 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
   1156a:	f04f 080a 	mov.w	r8, #10
   1156e:	4e0b      	ldr	r6, [pc, #44]	; (1159c <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
   11570:	4621      	mov	r1, r4
   11572:	4628      	mov	r0, r5
   11574:	47b8      	blx	r7
		delay_us(10);
   11576:	4640      	mov	r0, r8
   11578:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
   1157a:	3c01      	subs	r4, #1
   1157c:	b2e4      	uxtb	r4, r4
   1157e:	2c0c      	cmp	r4, #12
   11580:	d1f6      	bne.n	11570 <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
   11582:	4628      	mov	r0, r5
   11584:	4b06      	ldr	r3, [pc, #24]	; (115a0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
   11586:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
   11588:	7828      	ldrb	r0, [r5, #0]
	return result;
}
   1158a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11592:	bf00      	nop
   11594:	0001150d 	.word	0x0001150d
   11598:	00011531 	.word	0x00011531
   1159c:	0000352d 	.word	0x0000352d
   115a0:	000114c1 	.word	0x000114c1

000115a4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
   115a4:	b510      	push	{r4, lr}
   115a6:	4604      	mov	r4, r0
	i2c=i2cClass;
   115a8:	6082      	str	r2, [r0, #8]
	fanNumber=number;
   115aa:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
   115ae:	7a52      	ldrb	r2, [r2, #9]
   115b0:	b90a      	cbnz	r2, 115b6 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
   115b2:	7920      	ldrb	r0, [r4, #4]
   115b4:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
   115b6:	4619      	mov	r1, r3
   115b8:	4b0e      	ldr	r3, [pc, #56]	; (115f4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
   115ba:	4798      	blx	r3
			if (fanNumber==0)
   115bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   115c0:	b15b      	cbz	r3, 115da <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
   115c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   115c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   115ca:	69d8      	ldr	r0, [r3, #28]
   115cc:	4b0a      	ldr	r3, [pc, #40]	; (115f8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
   115ce:	4798      	blx	r3
			isOK=SelfTest();
   115d0:	4620      	mov	r0, r4
   115d2:	4b0a      	ldr	r3, [pc, #40]	; (115fc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
   115d4:	4798      	blx	r3
   115d6:	7120      	strb	r0, [r4, #4]
   115d8:	e7eb      	b.n	115b2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
   115da:	2170      	movs	r1, #112	; 0x70
   115dc:	68e0      	ldr	r0, [r4, #12]
   115de:	4b08      	ldr	r3, [pc, #32]	; (11600 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
   115e0:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
   115e2:	2107      	movs	r1, #7
   115e4:	68e0      	ldr	r0, [r4, #12]
   115e6:	4b07      	ldr	r3, [pc, #28]	; (11604 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
   115e8:	4798      	blx	r3
				expanders[1]->SetPortInput();
   115ea:	6920      	ldr	r0, [r4, #16]
   115ec:	4b06      	ldr	r3, [pc, #24]	; (11608 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
   115ee:	4798      	blx	r3
   115f0:	e7e7      	b.n	115c2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
   115f2:	bf00      	nop
   115f4:	000114a9 	.word	0x000114a9
   115f8:	0000fe69 	.word	0x0000fe69
   115fc:	0001154d 	.word	0x0001154d
   11600:	0000fdf5 	.word	0x0000fdf5
   11604:	0000fe9d 	.word	0x0000fe9d
   11608:	0000fdb1 	.word	0x0000fdb1

0001160c <_GLOBAL__sub_I_ptrEvaFanClass>:
}
   1160c:	b510      	push	{r4, lr}
   1160e:	4c05      	ldr	r4, [pc, #20]	; (11624 <_GLOBAL__sub_I_ptrEvaFanClass+0x18>)
   11610:	4905      	ldr	r1, [pc, #20]	; (11628 <_GLOBAL__sub_I_ptrEvaFanClass+0x1c>)
   11612:	4620      	mov	r0, r4
   11614:	4b05      	ldr	r3, [pc, #20]	; (1162c <_GLOBAL__sub_I_ptrEvaFanClass+0x20>)
   11616:	4798      	blx	r3
   11618:	4a05      	ldr	r2, [pc, #20]	; (11630 <_GLOBAL__sub_I_ptrEvaFanClass+0x24>)
   1161a:	4906      	ldr	r1, [pc, #24]	; (11634 <_GLOBAL__sub_I_ptrEvaFanClass+0x28>)
   1161c:	4620      	mov	r0, r4
   1161e:	4b06      	ldr	r3, [pc, #24]	; (11638 <_GLOBAL__sub_I_ptrEvaFanClass+0x2c>)
   11620:	4798      	blx	r3
   11622:	bd10      	pop	{r4, pc}
   11624:	200037cc 	.word	0x200037cc
   11628:	2000dfe0 	.word	0x2000dfe0
   1162c:	0000fa29 	.word	0x0000fa29
   11630:	20000000 	.word	0x20000000
   11634:	0000fa45 	.word	0x0000fa45
   11638:	00019fb9 	.word	0x00019fb9

0001163c <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
   1163c:	4770      	bx	lr

0001163e <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
   1163e:	4770      	bx	lr

00011640 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   11640:	b510      	push	{r4, lr}
   11642:	4604      	mov	r4, r0
   11644:	4b06      	ldr	r3, [pc, #24]	; (11660 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   11646:	f840 3bb4 	str.w	r3, [r0], #180
   1164a:	4b06      	ldr	r3, [pc, #24]	; (11664 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   1164c:	4798      	blx	r3
   1164e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11652:	4b05      	ldr	r3, [pc, #20]	; (11668 <_ZN18Event_Logger_ClassD1Ev+0x28>)
   11654:	4798      	blx	r3
   11656:	4620      	mov	r0, r4
   11658:	4b04      	ldr	r3, [pc, #16]	; (1166c <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   1165a:	4798      	blx	r3
{
} //~Event_Logger_Class
   1165c:	4620      	mov	r0, r4
   1165e:	bd10      	pop	{r4, pc}
   11660:	0001af78 	.word	0x0001af78
   11664:	00011bb5 	.word	0x00011bb5
   11668:	00011b23 	.word	0x00011b23
   1166c:	0001989d 	.word	0x0001989d

00011670 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   11670:	b510      	push	{r4, lr}
   11672:	4604      	mov	r4, r0
   11674:	4b11      	ldr	r3, [pc, #68]	; (116bc <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   11676:	4798      	blx	r3
   11678:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   1167c:	4b10      	ldr	r3, [pc, #64]	; (116c0 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   1167e:	4798      	blx	r3
   11680:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11684:	4b0f      	ldr	r3, [pc, #60]	; (116c4 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   11686:	4798      	blx	r3
   11688:	4b0f      	ldr	r3, [pc, #60]	; (116c8 <_ZN18Event_Logger_ClassC1Ev+0x58>)
   1168a:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   1168c:	230a      	movs	r3, #10
   1168e:	f884 36f7 	strb.w	r3, [r4, #1783]	; 0x6f7
	cal=&staticClock;
   11692:	4b0e      	ldr	r3, [pc, #56]	; (116cc <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   11694:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
   11698:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   1169c:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
   116a0:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   116a4:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
   116a8:	f503 7388 	add.w	r3, r3, #272	; 0x110
   116ac:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
   116b0:	4b07      	ldr	r3, [pc, #28]	; (116d0 <_ZN18Event_Logger_ClassC1Ev+0x60>)
   116b2:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
   116b6:	4620      	mov	r0, r4
   116b8:	bd10      	pop	{r4, pc}
   116ba:	bf00      	nop
   116bc:	0001982d 	.word	0x0001982d
   116c0:	00011b21 	.word	0x00011b21
   116c4:	00011b65 	.word	0x00011b65
   116c8:	0001af78 	.word	0x0001af78
   116cc:	200037e8 	.word	0x200037e8
   116d0:	20000210 	.word	0x20000210

000116d4 <_ZN18Event_Logger_Class16MakeNullDateTimeEv>:
	SetStackValue(stackLocalArray);
	memset(event_buffer_arrray,0,QSPI_ERBLK);
}

void Event_Logger_Class::MakeNullDateTime(void){
	nullDateTime.date.year  = 0x0;
   116d4:	2300      	movs	r3, #0
   116d6:	f8a0 360e 	strh.w	r3, [r0, #1550]	; 0x60e
	nullDateTime.date.month = 0x0;
   116da:	f880 360d 	strb.w	r3, [r0, #1549]	; 0x60d
	nullDateTime.date.day   = 0x0;
   116de:	f880 360c 	strb.w	r3, [r0, #1548]	; 0x60c

	nullDateTime.time.hour = 0x0;
   116e2:	f880 360a 	strb.w	r3, [r0, #1546]	; 0x60a
	nullDateTime.time.min  = 0x0;
   116e6:	f880 3609 	strb.w	r3, [r0, #1545]	; 0x609
	nullDateTime.time.sec  = 0x0;
   116ea:	f880 3608 	strb.w	r3, [r0, #1544]	; 0x608
   116ee:	4770      	bx	lr

000116f0 <_ZN18Event_Logger_Class4InitEv>:
bool Event_Logger_Class::Init(void){
   116f0:	b538      	push	{r3, r4, r5, lr}
   116f2:	4604      	mov	r4, r0
	MakeNullDateTime();
   116f4:	4b0c      	ldr	r3, [pc, #48]	; (11728 <_ZN18Event_Logger_Class4InitEv+0x38>)
   116f6:	4798      	blx	r3
	cal->Init(nullDateTime);
   116f8:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
   116fc:	e893 0006 	ldmia.w	r3, {r1, r2}
   11700:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   11704:	4b09      	ldr	r3, [pc, #36]	; (1172c <_ZN18Event_Logger_Class4InitEv+0x3c>)
   11706:	4798      	blx	r3
	stackLocalArray=0;
   11708:	2500      	movs	r5, #0
   1170a:	f8c4 56fc 	str.w	r5, [r4, #1788]	; 0x6fc
	SetStackValue(stackLocalArray);
   1170e:	4629      	mov	r1, r5
   11710:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11714:	4b06      	ldr	r3, [pc, #24]	; (11730 <_ZN18Event_Logger_Class4InitEv+0x40>)
   11716:	4798      	blx	r3
	memset(event_buffer_arrray,0,QSPI_ERBLK);
   11718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1171c:	4629      	mov	r1, r5
   1171e:	f8d4 05f0 	ldr.w	r0, [r4, #1520]	; 0x5f0
   11722:	4b04      	ldr	r3, [pc, #16]	; (11734 <_ZN18Event_Logger_Class4InitEv+0x44>)
   11724:	4798      	blx	r3
}
   11726:	bd38      	pop	{r3, r4, r5, pc}
   11728:	000116d5 	.word	0x000116d5
   1172c:	000198c5 	.word	0x000198c5
   11730:	00011bc5 	.word	0x00011bc5
   11734:	0001a66d 	.word	0x0001a66d

00011738 <_ZN18Event_Logger_Class9SaveEventEPh>:
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   11738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1173c:	4604      	mov	r4, r0
   1173e:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   11740:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
   11744:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
   11748:	6803      	ldr	r3, [r0, #0]
   1174a:	681b      	ldr	r3, [r3, #0]
   1174c:	4631      	mov	r1, r6
   1174e:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11750:	f204 67bc 	addw	r7, r4, #1724	; 0x6bc
   11754:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
   11758:	681a      	ldr	r2, [r3, #0]
   1175a:	685b      	ldr	r3, [r3, #4]
   1175c:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   11760:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   11762:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   11766:	4629      	mov	r1, r5
   11768:	4640      	mov	r0, r8
   1176a:	4b32      	ldr	r3, [pc, #200]	; (11834 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   1176c:	4798      	blx	r3
   1176e:	f884 06f8 	strb.w	r0, [r4, #1784]	; 0x6f8
	if (semiColonPosition>0)
   11772:	b130      	cbz	r0, 11782 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   11774:	2807      	cmp	r0, #7
   11776:	dc2d      	bgt.n	117d4 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   11778:	4602      	mov	r2, r0
   1177a:	4629      	mov	r1, r5
   1177c:	4638      	mov	r0, r7
   1177e:	4b2e      	ldr	r3, [pc, #184]	; (11838 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11780:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   11782:	4628      	mov	r0, r5
   11784:	4b2d      	ldr	r3, [pc, #180]	; (1183c <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   11786:	4798      	blx	r3
   11788:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
   1178c:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   1178e:	2a33      	cmp	r2, #51	; 0x33
   11790:	dd26      	ble.n	117e0 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   11792:	4629      	mov	r1, r5
   11794:	4640      	mov	r0, r8
   11796:	4b2a      	ldr	r3, [pc, #168]	; (11840 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   11798:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   1179a:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   1179e:	4429      	add	r1, r5
   117a0:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
   117a4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   117a8:	f8d1 e000 	ldr.w	lr, [r1]
   117ac:	684f      	ldr	r7, [r1, #4]
   117ae:	688d      	ldr	r5, [r1, #8]
   117b0:	68c8      	ldr	r0, [r1, #12]
   117b2:	f8c3 e000 	str.w	lr, [r3]
   117b6:	605f      	str	r7, [r3, #4]
   117b8:	609d      	str	r5, [r3, #8]
   117ba:	60d8      	str	r0, [r3, #12]
   117bc:	3110      	adds	r1, #16
   117be:	3310      	adds	r3, #16
   117c0:	4291      	cmp	r1, r2
   117c2:	d1f1      	bne.n	117a8 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   117c4:	8808      	ldrh	r0, [r1, #0]
   117c6:	788a      	ldrb	r2, [r1, #2]
   117c8:	8018      	strh	r0, [r3, #0]
   117ca:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   117cc:	2333      	movs	r3, #51	; 0x33
   117ce:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
   117d2:	e012      	b.n	117fa <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   117d4:	682a      	ldr	r2, [r5, #0]
   117d6:	686b      	ldr	r3, [r5, #4]
   117d8:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   117dc:	607b      	str	r3, [r7, #4]
   117de:	e7d0      	b.n	11782 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   117e0:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   117e4:	4429      	add	r1, r5
   117e6:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
   117ea:	4b13      	ldr	r3, [pc, #76]	; (11838 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   117ec:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   117ee:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
   117f2:	4423      	add	r3, r4
   117f4:	220a      	movs	r2, #10
   117f6:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   117fa:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   117fe:	6803      	ldr	r3, [r0, #0]
   11800:	685b      	ldr	r3, [r3, #4]
   11802:	4631      	mov	r1, r6
   11804:	4798      	blx	r3
   11806:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
   1180a:	b978      	cbnz	r0, 1182c <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   1180c:	f04f 33ff 	mov.w	r3, #4294967295
   11810:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,text_length+1);
   11814:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
   11818:	3201      	adds	r2, #1
   1181a:	b2d2      	uxtb	r2, r2
   1181c:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
   11820:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11824:	4b07      	ldr	r3, [pc, #28]	; (11844 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   11826:	4798      	blx	r3
   11828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   1182c:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
   11830:	e7f0      	b.n	11814 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   11832:	bf00      	nop
   11834:	00011b45 	.word	0x00011b45
   11838:	0001a539 	.word	0x0001a539
   1183c:	0001a881 	.word	0x0001a881
   11840:	00011b25 	.word	0x00011b25
   11844:	00011bed 	.word	0x00011bed

00011848 <_ZN18Event_Logger_Class16SaveInstationLogEv>:
	

}

void Event_Logger_Class::SaveInstationLog(void){
   11848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1184c:	b086      	sub	sp, #24
   1184e:	4604      	mov	r4, r0
	
	uint8_t text[]="Initialization Finished";
   11850:	466d      	mov	r5, sp
   11852:	4e30      	ldr	r6, [pc, #192]	; (11914 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xcc>)
   11854:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11858:	e896 0003 	ldmia.w	r6, {r0, r1}
   1185c:	e885 0003 	stmia.w	r5, {r0, r1}
	
	cal->GetDateTime(&currentDateTime);
   11860:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   11864:	f504 68c0 	add.w	r8, r4, #1536	; 0x600
   11868:	6803      	ldr	r3, [r0, #0]
   1186a:	681b      	ldr	r3, [r3, #0]
   1186c:	4641      	mov	r1, r8
   1186e:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11870:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
   11874:	681a      	ldr	r2, [r3, #0]
   11876:	685b      	ldr	r3, [r3, #4]
   11878:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   1187c:	f8c4 36c0 	str.w	r3, [r4, #1728]	; 0x6c0

	text_length=(uint8_t)strlen((char*)text);
   11880:	4668      	mov	r0, sp
   11882:	4b25      	ldr	r3, [pc, #148]	; (11918 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd0>)
   11884:	4798      	blx	r3
   11886:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
   1188a:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   1188c:	2a33      	cmp	r2, #51	; 0x33
   1188e:	dd1b      	ble.n	118c8 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x80>
	{
		ChopStringDescription(text);
   11890:	4669      	mov	r1, sp
   11892:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11896:	4b21      	ldr	r3, [pc, #132]	; (1191c <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd4>)
   11898:	4798      	blx	r3
		memcpy(&entry.description,text,DESCRIPTION_LENGHT_TEXT);
   1189a:	466d      	mov	r5, sp
   1189c:	f204 66c4 	addw	r6, r4, #1732	; 0x6c4
   118a0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   118a4:	462f      	mov	r7, r5
   118a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   118a8:	6030      	str	r0, [r6, #0]
   118aa:	6071      	str	r1, [r6, #4]
   118ac:	60b2      	str	r2, [r6, #8]
   118ae:	60f3      	str	r3, [r6, #12]
   118b0:	463d      	mov	r5, r7
   118b2:	3610      	adds	r6, #16
   118b4:	4577      	cmp	r7, lr
   118b6:	d1f5      	bne.n	118a4 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x5c>
   118b8:	883a      	ldrh	r2, [r7, #0]
   118ba:	78bb      	ldrb	r3, [r7, #2]
   118bc:	8032      	strh	r2, [r6, #0]
   118be:	70b3      	strb	r3, [r6, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   118c0:	2333      	movs	r3, #51	; 0x33
   118c2:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
   118c6:	e00a      	b.n	118de <_ZN18Event_Logger_Class16SaveInstationLogEv+0x96>
	}
	else
	{
		memcpy(&entry.description,text,(uint32_t)text_length);
   118c8:	4669      	mov	r1, sp
   118ca:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
   118ce:	4b14      	ldr	r3, [pc, #80]	; (11920 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd8>)
   118d0:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   118d2:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
   118d6:	4423      	add	r3, r4
   118d8:	220a      	movs	r2, #10
   118da:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   118de:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   118e2:	6803      	ldr	r3, [r0, #0]
   118e4:	685b      	ldr	r3, [r3, #4]
   118e6:	4641      	mov	r1, r8
   118e8:	4798      	blx	r3
   118ea:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
   118ee:	b968      	cbnz	r0, 1190c <_ZN18Event_Logger_Class16SaveInstationLogEv+0xc4>
	{
		entry.timestamp=currentTimestamp;
	}
	else
	{
		entry.timestamp=0xffffffff;
   118f0:	f04f 33ff 	mov.w	r3, #4294967295
   118f4:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,0xff);
   118f8:	22ff      	movs	r2, #255	; 0xff
   118fa:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
   118fe:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11902:	4b08      	ldr	r3, [pc, #32]	; (11924 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xdc>)
   11904:	4798      	blx	r3
	

}
   11906:	b006      	add	sp, #24
   11908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   1190c:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
   11910:	e7f2      	b.n	118f8 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xb0>
   11912:	bf00      	nop
   11914:	0001af80 	.word	0x0001af80
   11918:	0001a881 	.word	0x0001a881
   1191c:	00011b25 	.word	0x00011b25
   11920:	0001a539 	.word	0x0001a539
   11924:	00011bed 	.word	0x00011bed

00011928 <_ZN18Event_Logger_Class19GetCurrentTimeStampEv>:

uint32_t Event_Logger_Class::GetCurrentTimeStamp(void){
   11928:	b538      	push	{r3, r4, r5, lr}
   1192a:	4604      	mov	r4, r0
	cal->GetDateTime(&currentDateTime);
   1192c:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
   11930:	f504 65c0 	add.w	r5, r4, #1536	; 0x600
   11934:	6803      	ldr	r3, [r0, #0]
   11936:	681b      	ldr	r3, [r3, #0]
   11938:	4629      	mov	r1, r5
   1193a:	4798      	blx	r3
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   1193c:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   11940:	6803      	ldr	r3, [r0, #0]
   11942:	685b      	ldr	r3, [r3, #4]
   11944:	4629      	mov	r1, r5
   11946:	4798      	blx	r3
   11948:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	return currentTimestamp;
}
   1194c:	bd38      	pop	{r3, r4, r5, pc}
	...

00011950 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh>:

void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, uint8_t result){
   11950:	b570      	push	{r4, r5, r6, lr}
   11952:	4604      	mov	r4, r0
   11954:	460d      	mov	r5, r1
   11956:	4610      	mov	r0, r2
	task_result	=(TaskResult)result;
   11958:	f884 3704 	strb.w	r3, [r4, #1796]	; 0x704

	itoa(index,logger_number,10);
   1195c:	220a      	movs	r2, #10
   1195e:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   11962:	4b20      	ldr	r3, [pc, #128]	; (119e4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x94>)
   11964:	4798      	blx	r3
	strcpy(logger_text,text);
   11966:	4629      	mov	r1, r5
   11968:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
   1196c:	4b1e      	ldr	r3, [pc, #120]	; (119e8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x98>)
   1196e:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
   11970:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   11974:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
   11978:	4b1c      	ldr	r3, [pc, #112]	; (119ec <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x9c>)
   1197a:	4798      	blx	r3
   1197c:	4605      	mov	r5, r0
   1197e:	f8c4 070c 	str.w	r0, [r4, #1804]	; 0x70c
	switch (task_result)
   11982:	f894 3704 	ldrb.w	r3, [r4, #1796]	; 0x704
   11986:	b173      	cbz	r3, 119a6 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x56>
   11988:	2b01      	cmp	r3, #1
   1198a:	d01e      	beq.n	119ca <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x7a>
		case FAILLED :
			logger_module=strcat(logger_module," FAILLED");
		
		break;
		default:
			logger_module=strcat(logger_module," UNKNOWN");
   1198c:	4b18      	ldr	r3, [pc, #96]	; (119f0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   1198e:	4798      	blx	r3
   11990:	4606      	mov	r6, r0
   11992:	182a      	adds	r2, r5, r0
   11994:	4b17      	ldr	r3, [pc, #92]	; (119f4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa4>)
   11996:	cb03      	ldmia	r3!, {r0, r1}
   11998:	51a8      	str	r0, [r5, r6]
   1199a:	6051      	str	r1, [r2, #4]
   1199c:	781b      	ldrb	r3, [r3, #0]
   1199e:	7213      	strb	r3, [r2, #8]
   119a0:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
		/* Your code here */
		break;
   119a4:	e00b      	b.n	119be <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
			logger_module=strcat(logger_module," SUCCESS");
   119a6:	4b12      	ldr	r3, [pc, #72]	; (119f0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   119a8:	4798      	blx	r3
   119aa:	4606      	mov	r6, r0
   119ac:	182a      	adds	r2, r5, r0
   119ae:	4b12      	ldr	r3, [pc, #72]	; (119f8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa8>)
   119b0:	cb03      	ldmia	r3!, {r0, r1}
   119b2:	51a8      	str	r0, [r5, r6]
   119b4:	6051      	str	r1, [r2, #4]
   119b6:	781b      	ldrb	r3, [r3, #0]
   119b8:	7213      	strb	r3, [r2, #8]
   119ba:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
	
}

void Event_Logger_Class::SaveEvent(char const * text){
	
	SaveEvent((uint8_t*)text);
   119be:	f8d4 170c 	ldr.w	r1, [r4, #1804]	; 0x70c
   119c2:	4620      	mov	r0, r4
   119c4:	4b0d      	ldr	r3, [pc, #52]	; (119fc <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xac>)
   119c6:	4798      	blx	r3
   119c8:	bd70      	pop	{r4, r5, r6, pc}
			logger_module=strcat(logger_module," FAILLED");
   119ca:	4b09      	ldr	r3, [pc, #36]	; (119f0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   119cc:	4798      	blx	r3
   119ce:	4606      	mov	r6, r0
   119d0:	182a      	adds	r2, r5, r0
   119d2:	4b0b      	ldr	r3, [pc, #44]	; (11a00 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xb0>)
   119d4:	cb03      	ldmia	r3!, {r0, r1}
   119d6:	51a8      	str	r0, [r5, r6]
   119d8:	6051      	str	r1, [r2, #4]
   119da:	781b      	ldrb	r3, [r3, #0]
   119dc:	7213      	strb	r3, [r2, #8]
   119de:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
		break;
   119e2:	e7ec      	b.n	119be <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
   119e4:	00017f8d 	.word	0x00017f8d
   119e8:	0001a789 	.word	0x0001a789
   119ec:	0001a749 	.word	0x0001a749
   119f0:	0001a881 	.word	0x0001a881
   119f4:	0001afb0 	.word	0x0001afb0
   119f8:	0001af98 	.word	0x0001af98
   119fc:	00011739 	.word	0x00011739
   11a00:	0001afa4 	.word	0x0001afa4

00011a04 <_ZN18Event_Logger_Class9SaveEventEPKc>:
void Event_Logger_Class::SaveEvent(char const * text){
   11a04:	b508      	push	{r3, lr}
	SaveEvent((uint8_t*)text);
   11a06:	4b01      	ldr	r3, [pc, #4]	; (11a0c <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   11a08:	4798      	blx	r3
   11a0a:	bd08      	pop	{r3, pc}
   11a0c:	00011739 	.word	0x00011739

00011a10 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   11a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11a14:	4c30      	ldr	r4, [pc, #192]	; (11ad8 <_GLOBAL__sub_I_local_info_text+0xc8>)
   11a16:	f504 758c 	add.w	r5, r4, #280	; 0x118
   11a1a:	4930      	ldr	r1, [pc, #192]	; (11adc <_GLOBAL__sub_I_local_info_text+0xcc>)
   11a1c:	4628      	mov	r0, r5
   11a1e:	4f30      	ldr	r7, [pc, #192]	; (11ae0 <_GLOBAL__sub_I_local_info_text+0xd0>)
   11a20:	47b8      	blx	r7
   11a22:	4e30      	ldr	r6, [pc, #192]	; (11ae4 <_GLOBAL__sub_I_local_info_text+0xd4>)
   11a24:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11b1c <_GLOBAL__sub_I_local_info_text+0x10c>
   11a28:	4632      	mov	r2, r6
   11a2a:	4641      	mov	r1, r8
   11a2c:	4628      	mov	r0, r5
   11a2e:	4d2e      	ldr	r5, [pc, #184]	; (11ae8 <_GLOBAL__sub_I_local_info_text+0xd8>)
   11a30:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11a32:	f504 799c 	add.w	r9, r4, #312	; 0x138
   11a36:	492d      	ldr	r1, [pc, #180]	; (11aec <_GLOBAL__sub_I_local_info_text+0xdc>)
   11a38:	4648      	mov	r0, r9
   11a3a:	47b8      	blx	r7
   11a3c:	4632      	mov	r2, r6
   11a3e:	4641      	mov	r1, r8
   11a40:	4648      	mov	r0, r9
   11a42:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11a44:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   11a48:	4929      	ldr	r1, [pc, #164]	; (11af0 <_GLOBAL__sub_I_local_info_text+0xe0>)
   11a4a:	4648      	mov	r0, r9
   11a4c:	47b8      	blx	r7
   11a4e:	4632      	mov	r2, r6
   11a50:	4641      	mov	r1, r8
   11a52:	4648      	mov	r0, r9
   11a54:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11a56:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   11a5a:	4926      	ldr	r1, [pc, #152]	; (11af4 <_GLOBAL__sub_I_local_info_text+0xe4>)
   11a5c:	4648      	mov	r0, r9
   11a5e:	47b8      	blx	r7
   11a60:	4632      	mov	r2, r6
   11a62:	4641      	mov	r1, r8
   11a64:	4648      	mov	r0, r9
   11a66:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   11a68:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   11a6c:	4922      	ldr	r1, [pc, #136]	; (11af8 <_GLOBAL__sub_I_local_info_text+0xe8>)
   11a6e:	4648      	mov	r0, r9
   11a70:	47b8      	blx	r7
   11a72:	4632      	mov	r2, r6
   11a74:	4641      	mov	r1, r8
   11a76:	4648      	mov	r0, r9
   11a78:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11a7a:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   11a7e:	491f      	ldr	r1, [pc, #124]	; (11afc <_GLOBAL__sub_I_local_info_text+0xec>)
   11a80:	4648      	mov	r0, r9
   11a82:	47b8      	blx	r7
   11a84:	4632      	mov	r2, r6
   11a86:	4641      	mov	r1, r8
   11a88:	4648      	mov	r0, r9
   11a8a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11a8c:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   11a90:	491b      	ldr	r1, [pc, #108]	; (11b00 <_GLOBAL__sub_I_local_info_text+0xf0>)
   11a92:	4648      	mov	r0, r9
   11a94:	47b8      	blx	r7
   11a96:	4632      	mov	r2, r6
   11a98:	4641      	mov	r1, r8
   11a9a:	4648      	mov	r0, r9
   11a9c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   11a9e:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   11aa2:	4918      	ldr	r1, [pc, #96]	; (11b04 <_GLOBAL__sub_I_local_info_text+0xf4>)
   11aa4:	4648      	mov	r0, r9
   11aa6:	47b8      	blx	r7
   11aa8:	4632      	mov	r2, r6
   11aaa:	4641      	mov	r1, r8
   11aac:	4648      	mov	r0, r9
   11aae:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   11ab0:	4915      	ldr	r1, [pc, #84]	; (11b08 <_GLOBAL__sub_I_local_info_text+0xf8>)
   11ab2:	4620      	mov	r0, r4
   11ab4:	4b15      	ldr	r3, [pc, #84]	; (11b0c <_GLOBAL__sub_I_local_info_text+0xfc>)
   11ab6:	4798      	blx	r3
   11ab8:	4632      	mov	r2, r6
   11aba:	4915      	ldr	r1, [pc, #84]	; (11b10 <_GLOBAL__sub_I_local_info_text+0x100>)
   11abc:	4620      	mov	r0, r4
   11abe:	47a8      	blx	r5
 Event_Logger_Class	logger;
   11ac0:	f504 7406 	add.w	r4, r4, #536	; 0x218
   11ac4:	4620      	mov	r0, r4
   11ac6:	4b13      	ldr	r3, [pc, #76]	; (11b14 <_GLOBAL__sub_I_local_info_text+0x104>)
   11ac8:	4798      	blx	r3
   11aca:	4632      	mov	r2, r6
   11acc:	4912      	ldr	r1, [pc, #72]	; (11b18 <_GLOBAL__sub_I_local_info_text+0x108>)
   11ace:	4620      	mov	r0, r4
   11ad0:	47a8      	blx	r5
   11ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ad6:	bf00      	nop
   11ad8:	200037e8 	.word	0x200037e8
   11adc:	2000deb0 	.word	0x2000deb0
   11ae0:	000100e1 	.word	0x000100e1
   11ae4:	20000000 	.word	0x20000000
   11ae8:	00019fb9 	.word	0x00019fb9
   11aec:	2000df44 	.word	0x2000df44
   11af0:	2000e068 	.word	0x2000e068
   11af4:	2000df64 	.word	0x2000df64
   11af8:	2000e028 	.word	0x2000e028
   11afc:	2000e048 	.word	0x2000e048
   11b00:	2000df20 	.word	0x2000df20
   11b04:	2000dfc0 	.word	0x2000dfc0
   11b08:	2000e088 	.word	0x2000e088
   11b0c:	00019861 	.word	0x00019861
   11b10:	0001989d 	.word	0x0001989d
   11b14:	00011671 	.word	0x00011671
   11b18:	00011641 	.word	0x00011641
   11b1c:	00010119 	.word	0x00010119

00011b20 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   11b20:	4770      	bx	lr

00011b22 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   11b22:	4770      	bx	lr

00011b24 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   11b24:	b538      	push	{r3, r4, r5, lr}
   11b26:	4605      	mov	r5, r0
   11b28:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   11b2a:	4608      	mov	r0, r1
   11b2c:	4b04      	ldr	r3, [pc, #16]	; (11b40 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   11b2e:	4798      	blx	r3
   11b30:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   11b32:	b2c0      	uxtb	r0, r0
   11b34:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   11b36:	bfc4      	itt	gt
   11b38:	230a      	movgt	r3, #10
   11b3a:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   11b3e:	bd38      	pop	{r3, r4, r5, pc}
   11b40:	0001a881 	.word	0x0001a881

00011b44 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   11b44:	7808      	ldrb	r0, [r1, #0]
   11b46:	b148      	cbz	r0, 11b5c <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   11b48:	283a      	cmp	r0, #58	; 0x3a
   11b4a:	d009      	beq.n	11b60 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   11b4c:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   11b4e:	3301      	adds	r3, #1
   11b50:	b2db      	uxtb	r3, r3
   11b52:	5cc8      	ldrb	r0, [r1, r3]
   11b54:	b118      	cbz	r0, 11b5e <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   11b56:	283a      	cmp	r0, #58	; 0x3a
   11b58:	d1f9      	bne.n	11b4e <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   11b5a:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   11b5c:	4770      	bx	lr
   11b5e:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   11b60:	2000      	movs	r0, #0
   11b62:	4770      	bx	lr

00011b64 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   11b64:	b510      	push	{r4, lr}
   11b66:	4604      	mov	r4, r0
   11b68:	4b0d      	ldr	r3, [pc, #52]	; (11ba0 <_ZN15DataLoger_ClassC1Ev+0x3c>)
   11b6a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   11b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   11b70:	2100      	movs	r1, #0
   11b72:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   11b76:	4b0b      	ldr	r3, [pc, #44]	; (11ba4 <_ZN15DataLoger_ClassC1Ev+0x40>)
   11b78:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   11b7a:	2300      	movs	r3, #0
   11b7c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   11b80:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   11b84:	230a      	movs	r3, #10
   11b86:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   11b8a:	4a07      	ldr	r2, [pc, #28]	; (11ba8 <_ZN15DataLoger_ClassC1Ev+0x44>)
   11b8c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   11b90:	4b06      	ldr	r3, [pc, #24]	; (11bac <_ZN15DataLoger_ClassC1Ev+0x48>)
   11b92:	4907      	ldr	r1, [pc, #28]	; (11bb0 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   11b94:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   11b98:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
   11b9c:	4620      	mov	r0, r4
   11b9e:	bd10      	pop	{r4, pc}
   11ba0:	000193e1 	.word	0x000193e1
   11ba4:	0001a66d 	.word	0x0001a66d
   11ba8:	20004120 	.word	0x20004120
   11bac:	20003a00 	.word	0x20003a00
   11bb0:	20005120 	.word	0x20005120

00011bb4 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   11bb4:	b510      	push	{r4, lr}
   11bb6:	4604      	mov	r4, r0
   11bb8:	4b01      	ldr	r3, [pc, #4]	; (11bc0 <_ZN15DataLoger_ClassD1Ev+0xc>)
   11bba:	4798      	blx	r3
{
} //~DataLoger_Class
   11bbc:	4620      	mov	r0, r4
   11bbe:	bd10      	pop	{r4, pc}
   11bc0:	0001941d 	.word	0x0001941d

00011bc4 <_ZN15DataLoger_Class13SetStackValueEm>:
	return 0;
}

void	DataLoger_Class::SetStackValue(uint32_t stk){
	
	if (stk==0)
   11bc4:	460b      	mov	r3, r1
   11bc6:	b911      	cbnz	r1, 11bce <_ZN15DataLoger_Class13SetStackValueEm+0xa>
	{
		stackPointer=&staticEventLogs[stk];
   11bc8:	4a02      	ldr	r2, [pc, #8]	; (11bd4 <_ZN15DataLoger_Class13SetStackValueEm+0x10>)
   11bca:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
	} 
	else
	{
	}
	stackValue=stk;
   11bce:	f8c0 34f0 	str.w	r3, [r0, #1264]	; 0x4f0
   11bd2:	4770      	bx	lr
   11bd4:	20004120 	.word	0x20004120

00011bd8 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   11bd8:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   11bdc:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   11bde:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11be2:	bf94      	ite	ls
   11be4:	2000      	movls	r0, #0
   11be6:	2001      	movhi	r0, #1
   11be8:	4770      	bx	lr
	...

00011bec <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   11bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bee:	b087      	sub	sp, #28
   11bf0:	4604      	mov	r4, r0
   11bf2:	460e      	mov	r6, r1
	if (len==0xff)
   11bf4:	2aff      	cmp	r2, #255	; 0xff
   11bf6:	d018      	beq.n	11c2a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   11bf8:	4615      	mov	r5, r2
		if (IsStackFull())
   11bfa:	4b29      	ldr	r3, [pc, #164]	; (11ca0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   11bfc:	4798      	blx	r3
   11bfe:	2800      	cmp	r0, #0
   11c00:	d13b      	bne.n	11c7a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   11c02:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   11c06:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   11c0a:	f105 020c 	add.w	r2, r5, #12
   11c0e:	4631      	mov	r1, r6
   11c10:	4418      	add	r0, r3
   11c12:	4b24      	ldr	r3, [pc, #144]	; (11ca4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   11c14:	4798      	blx	r3
		stackValue+=12+len;
   11c16:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   11c1a:	320c      	adds	r2, #12
   11c1c:	442a      	add	r2, r5
   11c1e:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   11c22:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   11c26:	b007      	add	sp, #28
   11c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   11c2a:	466d      	mov	r5, sp
   11c2c:	4f1e      	ldr	r7, [pc, #120]	; (11ca8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   11c2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11c32:	e897 0003 	ldmia.w	r7, {r0, r1}
   11c36:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   11c3a:	4668      	mov	r0, sp
   11c3c:	4b1b      	ldr	r3, [pc, #108]	; (11cac <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   11c3e:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   11c40:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   11c44:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   11c48:	b2c2      	uxtb	r2, r0
   11c4a:	320d      	adds	r2, #13
   11c4c:	4631      	mov	r1, r6
   11c4e:	18e8      	adds	r0, r5, r3
   11c50:	4b14      	ldr	r3, [pc, #80]	; (11ca4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   11c52:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   11c54:	4d16      	ldr	r5, [pc, #88]	; (11cb0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   11c56:	4629      	mov	r1, r5
   11c58:	4816      	ldr	r0, [pc, #88]	; (11cb4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   11c5a:	4b17      	ldr	r3, [pc, #92]	; (11cb8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   11c5c:	4798      	blx	r3
   11c5e:	4b17      	ldr	r3, [pc, #92]	; (11cbc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   11c60:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   11c64:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   11c68:	2100      	movs	r1, #0
   11c6a:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   11c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11c72:	4628      	mov	r0, r5
   11c74:	4b12      	ldr	r3, [pc, #72]	; (11cc0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   11c76:	4798      	blx	r3
   11c78:	e7d3      	b.n	11c22 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   11c7a:	4f0d      	ldr	r7, [pc, #52]	; (11cb0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   11c7c:	4639      	mov	r1, r7
   11c7e:	480d      	ldr	r0, [pc, #52]	; (11cb4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   11c80:	4b0d      	ldr	r3, [pc, #52]	; (11cb8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   11c82:	4798      	blx	r3
   11c84:	4b0d      	ldr	r3, [pc, #52]	; (11cbc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   11c86:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   11c8a:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   11c8e:	2100      	movs	r1, #0
   11c90:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   11c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11c98:	4638      	mov	r0, r7
   11c9a:	4b09      	ldr	r3, [pc, #36]	; (11cc0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   11c9c:	4798      	blx	r3
   11c9e:	e7b0      	b.n	11c02 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   11ca0:	00011bd9 	.word	0x00011bd9
   11ca4:	0001a539 	.word	0x0001a539
   11ca8:	0001af80 	.word	0x0001af80
   11cac:	0001a881 	.word	0x0001a881
   11cb0:	20004120 	.word	0x20004120
   11cb4:	20006a80 	.word	0x20006a80
   11cb8:	00014145 	.word	0x00014145
   11cbc:	20005218 	.word	0x20005218
   11cc0:	0001a66d 	.word	0x0001a66d

00011cc4 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
   11cc4:	b510      	push	{r4, lr}
   11cc6:	4604      	mov	r4, r0
   11cc8:	4b01      	ldr	r3, [pc, #4]	; (11cd0 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
   11cca:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
   11ccc:	4620      	mov	r0, r4
   11cce:	bd10      	pop	{r4, pc}
   11cd0:	000121b5 	.word	0x000121b5

00011cd4 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   11cd4:	b538      	push	{r3, r4, r5, lr}
   11cd6:	4d04      	ldr	r5, [pc, #16]	; (11ce8 <__tcf_0+0x14>)
   11cd8:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
   11cdc:	4c03      	ldr	r4, [pc, #12]	; (11cec <__tcf_0+0x18>)
   11cde:	47a0      	blx	r4
   11ce0:	4628      	mov	r0, r5
   11ce2:	47a0      	blx	r4
   11ce4:	bd38      	pop	{r3, r4, r5, pc}
   11ce6:	bf00      	nop
   11ce8:	20005124 	.word	0x20005124
   11cec:	000121b5 	.word	0x000121b5

00011cf0 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
   11cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cf2:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
   11cf4:	4d17      	ldr	r5, [pc, #92]	; (11d54 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x64>)
   11cf6:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
		valve[i]->InitController(i);
   11cfa:	2100      	movs	r1, #0
   11cfc:	4628      	mov	r0, r5
   11cfe:	4f16      	ldr	r7, [pc, #88]	; (11d58 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x68>)
   11d00:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   11d02:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   11d06:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   11d0a:	4e14      	ldr	r6, [pc, #80]	; (11d5c <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x6c>)
   11d0c:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
   11d0e:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
   11d12:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
   11d16:	2101      	movs	r1, #1
   11d18:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   11d1a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   11d1e:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   11d22:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
   11d24:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   11d28:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   11d2c:	47b0      	blx	r6
   11d2e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   11d32:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   11d36:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
   11d38:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   11d3c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	valve2=valve[1]; 
   11d40:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   11d44:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (valve1->isOK)|(valve2->isOK);
   11d48:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
   11d4c:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   11d50:	4310      	orrs	r0, r2
   11d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d54:	20005124 	.word	0x20005124
   11d58:	000121d5 	.word	0x000121d5
   11d5c:	000125ab 	.word	0x000125ab

00011d60 <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv>:
		boolResult=	!valve1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
   11d60:	b570      	push	{r4, r5, r6, lr}
   11d62:	4605      	mov	r5, r0
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
   11d64:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   11d68:	4e05      	ldr	r6, [pc, #20]	; (11d80 <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv+0x20>)
   11d6a:	47b0      	blx	r6
   11d6c:	4604      	mov	r4, r0
   11d6e:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
   11d72:	47b0      	blx	r6
   11d74:	4320      	orrs	r0, r4
   11d76:	b2c0      	uxtb	r0, r0
   11d78:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	return is_stand_alone;
}
   11d7c:	bd70      	pop	{r4, r5, r6, pc}
   11d7e:	bf00      	nop
   11d80:	00012571 	.word	0x00012571

00011d84 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:

Dual_Flapper_Valve_Controller flapper;
   11d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11d86:	4c10      	ldr	r4, [pc, #64]	; (11dc8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
   11d88:	f504 75dc 	add.w	r5, r4, #440	; 0x1b8
   11d8c:	490f      	ldr	r1, [pc, #60]	; (11dcc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
   11d8e:	4628      	mov	r0, r5
   11d90:	4b0f      	ldr	r3, [pc, #60]	; (11dd0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x4c>)
   11d92:	4798      	blx	r3
   11d94:	4e0f      	ldr	r6, [pc, #60]	; (11dd4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x50>)
   11d96:	4632      	mov	r2, r6
   11d98:	490f      	ldr	r1, [pc, #60]	; (11dd8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x54>)
   11d9a:	4628      	mov	r0, r5
   11d9c:	4d0f      	ldr	r5, [pc, #60]	; (11ddc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x58>)
   11d9e:	47a8      	blx	r5
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   11da0:	4620      	mov	r0, r4
   11da2:	4f0f      	ldr	r7, [pc, #60]	; (11de0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x5c>)
   11da4:	47b8      	blx	r7
   11da6:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   11daa:	47b8      	blx	r7
   11dac:	4632      	mov	r2, r6
   11dae:	490d      	ldr	r1, [pc, #52]	; (11de4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x60>)
   11db0:	2000      	movs	r0, #0
   11db2:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
   11db4:	f504 74e8 	add.w	r4, r4, #464	; 0x1d0
   11db8:	4620      	mov	r0, r4
   11dba:	4b0b      	ldr	r3, [pc, #44]	; (11de8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x64>)
   11dbc:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
   11dbe:	4632      	mov	r2, r6
   11dc0:	490a      	ldr	r1, [pc, #40]	; (11dec <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x68>)
   11dc2:	4620      	mov	r0, r4
   11dc4:	47a8      	blx	r5
   11dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dc8:	20005124 	.word	0x20005124
   11dcc:	2000dfe0 	.word	0x2000dfe0
   11dd0:	0000fa29 	.word	0x0000fa29
   11dd4:	20000000 	.word	0x20000000
   11dd8:	0000fa45 	.word	0x0000fa45
   11ddc:	00019fb9 	.word	0x00019fb9
   11de0:	00012129 	.word	0x00012129
   11de4:	00011cd5 	.word	0x00011cd5
   11de8:	00012129 	.word	0x00012129
   11dec:	00011cc5 	.word	0x00011cc5

00011df0 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   11df0:	b480      	push	{r7}
   11df2:	b083      	sub	sp, #12
   11df4:	af00      	add	r7, sp, #0
   11df6:	6078      	str	r0, [r7, #4]
   11df8:	460b      	mov	r3, r1
   11dfa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   11dfc:	78fb      	ldrb	r3, [r7, #3]
   11dfe:	687a      	ldr	r2, [r7, #4]
   11e00:	01db      	lsls	r3, r3, #7
   11e02:	4413      	add	r3, r2
   11e04:	681b      	ldr	r3, [r3, #0]
}
   11e06:	4618      	mov	r0, r3
   11e08:	370c      	adds	r7, #12
   11e0a:	46bd      	mov	sp, r7
   11e0c:	bc80      	pop	{r7}
   11e0e:	4770      	bx	lr

00011e10 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   11e10:	b480      	push	{r7}
   11e12:	b085      	sub	sp, #20
   11e14:	af00      	add	r7, sp, #0
   11e16:	60f8      	str	r0, [r7, #12]
   11e18:	460b      	mov	r3, r1
   11e1a:	607a      	str	r2, [r7, #4]
   11e1c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   11e1e:	7afb      	ldrb	r3, [r7, #11]
   11e20:	68fa      	ldr	r2, [r7, #12]
   11e22:	01db      	lsls	r3, r3, #7
   11e24:	4413      	add	r3, r2
   11e26:	3318      	adds	r3, #24
   11e28:	687a      	ldr	r2, [r7, #4]
   11e2a:	601a      	str	r2, [r3, #0]
}
   11e2c:	bf00      	nop
   11e2e:	3714      	adds	r7, #20
   11e30:	46bd      	mov	sp, r7
   11e32:	bc80      	pop	{r7}
   11e34:	4770      	bx	lr

00011e36 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   11e36:	b480      	push	{r7}
   11e38:	b083      	sub	sp, #12
   11e3a:	af00      	add	r7, sp, #0
   11e3c:	6078      	str	r0, [r7, #4]
   11e3e:	460b      	mov	r3, r1
   11e40:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   11e42:	78fb      	ldrb	r3, [r7, #3]
   11e44:	687a      	ldr	r2, [r7, #4]
   11e46:	01db      	lsls	r3, r3, #7
   11e48:	4413      	add	r3, r2
   11e4a:	3310      	adds	r3, #16
   11e4c:	681b      	ldr	r3, [r3, #0]
}
   11e4e:	4618      	mov	r0, r3
   11e50:	370c      	adds	r7, #12
   11e52:	46bd      	mov	sp, r7
   11e54:	bc80      	pop	{r7}
   11e56:	4770      	bx	lr

00011e58 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   11e58:	b480      	push	{r7}
   11e5a:	b085      	sub	sp, #20
   11e5c:	af00      	add	r7, sp, #0
   11e5e:	60f8      	str	r0, [r7, #12]
   11e60:	460b      	mov	r3, r1
   11e62:	607a      	str	r2, [r7, #4]
   11e64:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11e66:	7afb      	ldrb	r3, [r7, #11]
   11e68:	68fa      	ldr	r2, [r7, #12]
   11e6a:	01db      	lsls	r3, r3, #7
   11e6c:	4413      	add	r3, r2
   11e6e:	3314      	adds	r3, #20
   11e70:	687a      	ldr	r2, [r7, #4]
   11e72:	601a      	str	r2, [r3, #0]
}
   11e74:	bf00      	nop
   11e76:	3714      	adds	r7, #20
   11e78:	46bd      	mov	sp, r7
   11e7a:	bc80      	pop	{r7}
   11e7c:	4770      	bx	lr

00011e7e <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   11e7e:	b480      	push	{r7}
   11e80:	b085      	sub	sp, #20
   11e82:	af00      	add	r7, sp, #0
   11e84:	60f8      	str	r0, [r7, #12]
   11e86:	460b      	mov	r3, r1
   11e88:	607a      	str	r2, [r7, #4]
   11e8a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   11e8c:	7afb      	ldrb	r3, [r7, #11]
   11e8e:	68fa      	ldr	r2, [r7, #12]
   11e90:	01db      	lsls	r3, r3, #7
   11e92:	4413      	add	r3, r2
   11e94:	331c      	adds	r3, #28
   11e96:	687a      	ldr	r2, [r7, #4]
   11e98:	601a      	str	r2, [r3, #0]
}
   11e9a:	bf00      	nop
   11e9c:	3714      	adds	r7, #20
   11e9e:	46bd      	mov	sp, r7
   11ea0:	bc80      	pop	{r7}
   11ea2:	4770      	bx	lr

00011ea4 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   11ea4:	b480      	push	{r7}
   11ea6:	b083      	sub	sp, #12
   11ea8:	af00      	add	r7, sp, #0
   11eaa:	6078      	str	r0, [r7, #4]
   11eac:	460b      	mov	r3, r1
   11eae:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   11eb0:	78fb      	ldrb	r3, [r7, #3]
   11eb2:	687a      	ldr	r2, [r7, #4]
   11eb4:	01db      	lsls	r3, r3, #7
   11eb6:	4413      	add	r3, r2
   11eb8:	3320      	adds	r3, #32
   11eba:	681b      	ldr	r3, [r3, #0]
}
   11ebc:	4618      	mov	r0, r3
   11ebe:	370c      	adds	r7, #12
   11ec0:	46bd      	mov	sp, r7
   11ec2:	bc80      	pop	{r7}
   11ec4:	4770      	bx	lr
	...

00011ec8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   11ec8:	b580      	push	{r7, lr}
   11eca:	b082      	sub	sp, #8
   11ecc:	af00      	add	r7, sp, #0
   11ece:	4603      	mov	r3, r0
   11ed0:	6039      	str	r1, [r7, #0]
   11ed2:	71fb      	strb	r3, [r7, #7]
   11ed4:	4613      	mov	r3, r2
   11ed6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11ed8:	79bb      	ldrb	r3, [r7, #6]
   11eda:	2b00      	cmp	r3, #0
   11edc:	d006      	beq.n	11eec <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11ede:	79fb      	ldrb	r3, [r7, #7]
   11ee0:	683a      	ldr	r2, [r7, #0]
   11ee2:	4619      	mov	r1, r3
   11ee4:	4806      	ldr	r0, [pc, #24]	; (11f00 <_gpio_set_level+0x38>)
   11ee6:	4b07      	ldr	r3, [pc, #28]	; (11f04 <_gpio_set_level+0x3c>)
   11ee8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   11eea:	e005      	b.n	11ef8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   11eec:	79fb      	ldrb	r3, [r7, #7]
   11eee:	683a      	ldr	r2, [r7, #0]
   11ef0:	4619      	mov	r1, r3
   11ef2:	4803      	ldr	r0, [pc, #12]	; (11f00 <_gpio_set_level+0x38>)
   11ef4:	4b04      	ldr	r3, [pc, #16]	; (11f08 <_gpio_set_level+0x40>)
   11ef6:	4798      	blx	r3
}
   11ef8:	bf00      	nop
   11efa:	3708      	adds	r7, #8
   11efc:	46bd      	mov	sp, r7
   11efe:	bd80      	pop	{r7, pc}
   11f00:	41008000 	.word	0x41008000
   11f04:	00011e11 	.word	0x00011e11
   11f08:	00011e59 	.word	0x00011e59

00011f0c <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   11f0c:	b580      	push	{r7, lr}
   11f0e:	b082      	sub	sp, #8
   11f10:	af00      	add	r7, sp, #0
   11f12:	4603      	mov	r3, r0
   11f14:	6039      	str	r1, [r7, #0]
   11f16:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   11f18:	79fb      	ldrb	r3, [r7, #7]
   11f1a:	683a      	ldr	r2, [r7, #0]
   11f1c:	4619      	mov	r1, r3
   11f1e:	4803      	ldr	r0, [pc, #12]	; (11f2c <_gpio_toggle_level+0x20>)
   11f20:	4b03      	ldr	r3, [pc, #12]	; (11f30 <_gpio_toggle_level+0x24>)
   11f22:	4798      	blx	r3
}
   11f24:	bf00      	nop
   11f26:	3708      	adds	r7, #8
   11f28:	46bd      	mov	sp, r7
   11f2a:	bd80      	pop	{r7, pc}
   11f2c:	41008000 	.word	0x41008000
   11f30:	00011e7f 	.word	0x00011e7f

00011f34 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   11f34:	b580      	push	{r7, lr}
   11f36:	b086      	sub	sp, #24
   11f38:	af00      	add	r7, sp, #0
   11f3a:	4603      	mov	r3, r0
   11f3c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   11f3e:	f107 030c 	add.w	r3, r7, #12
   11f42:	4618      	mov	r0, r3
   11f44:	4b13      	ldr	r3, [pc, #76]	; (11f94 <_gpio_get_level+0x60>)
   11f46:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   11f48:	79fb      	ldrb	r3, [r7, #7]
   11f4a:	4619      	mov	r1, r3
   11f4c:	4812      	ldr	r0, [pc, #72]	; (11f98 <_gpio_get_level+0x64>)
   11f4e:	4b13      	ldr	r3, [pc, #76]	; (11f9c <_gpio_get_level+0x68>)
   11f50:	4798      	blx	r3
   11f52:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   11f54:	79fb      	ldrb	r3, [r7, #7]
   11f56:	4619      	mov	r1, r3
   11f58:	480f      	ldr	r0, [pc, #60]	; (11f98 <_gpio_get_level+0x64>)
   11f5a:	4b11      	ldr	r3, [pc, #68]	; (11fa0 <_gpio_get_level+0x6c>)
   11f5c:	4798      	blx	r3
   11f5e:	4602      	mov	r2, r0
   11f60:	697b      	ldr	r3, [r7, #20]
   11f62:	43db      	mvns	r3, r3
   11f64:	4013      	ands	r3, r2
   11f66:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   11f68:	79fb      	ldrb	r3, [r7, #7]
   11f6a:	4619      	mov	r1, r3
   11f6c:	480a      	ldr	r0, [pc, #40]	; (11f98 <_gpio_get_level+0x64>)
   11f6e:	4b0d      	ldr	r3, [pc, #52]	; (11fa4 <_gpio_get_level+0x70>)
   11f70:	4798      	blx	r3
   11f72:	4602      	mov	r2, r0
   11f74:	697b      	ldr	r3, [r7, #20]
   11f76:	4013      	ands	r3, r2
   11f78:	693a      	ldr	r2, [r7, #16]
   11f7a:	4313      	orrs	r3, r2
   11f7c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   11f7e:	f107 030c 	add.w	r3, r7, #12
   11f82:	4618      	mov	r0, r3
   11f84:	4b08      	ldr	r3, [pc, #32]	; (11fa8 <_gpio_get_level+0x74>)
   11f86:	4798      	blx	r3

	return tmp;
   11f88:	693b      	ldr	r3, [r7, #16]
}
   11f8a:	4618      	mov	r0, r3
   11f8c:	3718      	adds	r7, #24
   11f8e:	46bd      	mov	sp, r7
   11f90:	bd80      	pop	{r7, pc}
   11f92:	bf00      	nop
   11f94:	0000cfe1 	.word	0x0000cfe1
   11f98:	41008000 	.word	0x41008000
   11f9c:	00011df1 	.word	0x00011df1
   11fa0:	00011ea5 	.word	0x00011ea5
   11fa4:	00011e37 	.word	0x00011e37
   11fa8:	0000d007 	.word	0x0000d007

00011fac <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   11fac:	b580      	push	{r7, lr}
   11fae:	b082      	sub	sp, #8
   11fb0:	af00      	add	r7, sp, #0
   11fb2:	4603      	mov	r3, r0
   11fb4:	460a      	mov	r2, r1
   11fb6:	71fb      	strb	r3, [r7, #7]
   11fb8:	4613      	mov	r3, r2
   11fba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   11fbc:	79fb      	ldrb	r3, [r7, #7]
   11fbe:	115b      	asrs	r3, r3, #5
   11fc0:	b2d8      	uxtb	r0, r3
   11fc2:	79fb      	ldrb	r3, [r7, #7]
   11fc4:	f003 031f 	and.w	r3, r3, #31
   11fc8:	2201      	movs	r2, #1
   11fca:	fa02 f303 	lsl.w	r3, r2, r3
   11fce:	79ba      	ldrb	r2, [r7, #6]
   11fd0:	4619      	mov	r1, r3
   11fd2:	4b03      	ldr	r3, [pc, #12]	; (11fe0 <gpio_set_pin_level+0x34>)
   11fd4:	4798      	blx	r3
}
   11fd6:	bf00      	nop
   11fd8:	3708      	adds	r7, #8
   11fda:	46bd      	mov	sp, r7
   11fdc:	bd80      	pop	{r7, pc}
   11fde:	bf00      	nop
   11fe0:	00011ec9 	.word	0x00011ec9

00011fe4 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   11fe4:	b580      	push	{r7, lr}
   11fe6:	b082      	sub	sp, #8
   11fe8:	af00      	add	r7, sp, #0
   11fea:	4603      	mov	r3, r0
   11fec:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   11fee:	79fb      	ldrb	r3, [r7, #7]
   11ff0:	115b      	asrs	r3, r3, #5
   11ff2:	b2d8      	uxtb	r0, r3
   11ff4:	79fb      	ldrb	r3, [r7, #7]
   11ff6:	f003 031f 	and.w	r3, r3, #31
   11ffa:	2201      	movs	r2, #1
   11ffc:	fa02 f303 	lsl.w	r3, r2, r3
   12000:	4619      	mov	r1, r3
   12002:	4b03      	ldr	r3, [pc, #12]	; (12010 <gpio_toggle_pin_level+0x2c>)
   12004:	4798      	blx	r3
}
   12006:	bf00      	nop
   12008:	3708      	adds	r7, #8
   1200a:	46bd      	mov	sp, r7
   1200c:	bd80      	pop	{r7, pc}
   1200e:	bf00      	nop
   12010:	00011f0d 	.word	0x00011f0d

00012014 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   12014:	b580      	push	{r7, lr}
   12016:	b082      	sub	sp, #8
   12018:	af00      	add	r7, sp, #0
   1201a:	4603      	mov	r3, r0
   1201c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   1201e:	79fb      	ldrb	r3, [r7, #7]
   12020:	115b      	asrs	r3, r3, #5
   12022:	b2db      	uxtb	r3, r3
   12024:	4618      	mov	r0, r3
   12026:	4b09      	ldr	r3, [pc, #36]	; (1204c <gpio_get_pin_level+0x38>)
   12028:	4798      	blx	r3
   1202a:	4601      	mov	r1, r0
   1202c:	79fb      	ldrb	r3, [r7, #7]
   1202e:	f003 031f 	and.w	r3, r3, #31
   12032:	2201      	movs	r2, #1
   12034:	fa02 f303 	lsl.w	r3, r2, r3
   12038:	400b      	ands	r3, r1
   1203a:	2b00      	cmp	r3, #0
   1203c:	bf14      	ite	ne
   1203e:	2301      	movne	r3, #1
   12040:	2300      	moveq	r3, #0
   12042:	b2db      	uxtb	r3, r3
}
   12044:	4618      	mov	r0, r3
   12046:	3708      	adds	r7, #8
   12048:	46bd      	mov	sp, r7
   1204a:	bd80      	pop	{r7, pc}
   1204c:	00011f35 	.word	0x00011f35

00012050 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
   12050:	b480      	push	{r7}
   12052:	b083      	sub	sp, #12
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
   12058:	4b07      	ldr	r3, [pc, #28]	; (12078 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   1205a:	681b      	ldr	r3, [r3, #0]
   1205c:	2201      	movs	r2, #1
   1205e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
   12062:	4b05      	ldr	r3, [pc, #20]	; (12078 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   12064:	681b      	ldr	r3, [r3, #0]
   12066:	2201      	movs	r2, #1
   12068:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
   1206c:	bf00      	nop
   1206e:	370c      	adds	r7, #12
   12070:	46bd      	mov	sp, r7
   12072:	bc80      	pop	{r7}
   12074:	4770      	bx	lr
   12076:	bf00      	nop
   12078:	2000551c 	.word	0x2000551c

0001207c <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
   1207c:	b480      	push	{r7}
   1207e:	b083      	sub	sp, #12
   12080:	af00      	add	r7, sp, #0
   12082:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
   12084:	4b07      	ldr	r3, [pc, #28]	; (120a4 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   12086:	685b      	ldr	r3, [r3, #4]
   12088:	2201      	movs	r2, #1
   1208a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
   1208e:	4b05      	ldr	r3, [pc, #20]	; (120a4 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   12090:	685b      	ldr	r3, [r3, #4]
   12092:	2201      	movs	r2, #1
   12094:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
   12098:	bf00      	nop
   1209a:	370c      	adds	r7, #12
   1209c:	46bd      	mov	sp, r7
   1209e:	bc80      	pop	{r7}
   120a0:	4770      	bx	lr
   120a2:	bf00      	nop
   120a4:	2000551c 	.word	0x2000551c

000120a8 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
   120a8:	b480      	push	{r7}
   120aa:	b083      	sub	sp, #12
   120ac:	af00      	add	r7, sp, #0
   120ae:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
   120b0:	4b04      	ldr	r3, [pc, #16]	; (120c4 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
   120b2:	681b      	ldr	r3, [r3, #0]
   120b4:	2201      	movs	r2, #1
   120b6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
   120ba:	bf00      	nop
   120bc:	370c      	adds	r7, #12
   120be:	46bd      	mov	sp, r7
   120c0:	bc80      	pop	{r7}
   120c2:	4770      	bx	lr
   120c4:	2000551c 	.word	0x2000551c

000120c8 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
   120c8:	b480      	push	{r7}
   120ca:	b083      	sub	sp, #12
   120cc:	af00      	add	r7, sp, #0
   120ce:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
   120d0:	4b04      	ldr	r3, [pc, #16]	; (120e4 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
   120d2:	685b      	ldr	r3, [r3, #4]
   120d4:	2201      	movs	r2, #1
   120d6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
   120da:	bf00      	nop
   120dc:	370c      	adds	r7, #12
   120de:	46bd      	mov	sp, r7
   120e0:	bc80      	pop	{r7}
   120e2:	4770      	bx	lr
   120e4:	2000551c 	.word	0x2000551c

000120e8 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
   120e8:	b480      	push	{r7}
   120ea:	b083      	sub	sp, #12
   120ec:	af00      	add	r7, sp, #0
   120ee:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
   120f0:	4b04      	ldr	r3, [pc, #16]	; (12104 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
   120f2:	681b      	ldr	r3, [r3, #0]
   120f4:	2201      	movs	r2, #1
   120f6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   120fa:	bf00      	nop
   120fc:	370c      	adds	r7, #12
   120fe:	46bd      	mov	sp, r7
   12100:	bc80      	pop	{r7}
   12102:	4770      	bx	lr
   12104:	2000551c 	.word	0x2000551c

00012108 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
   12108:	b480      	push	{r7}
   1210a:	b083      	sub	sp, #12
   1210c:	af00      	add	r7, sp, #0
   1210e:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
   12110:	4b04      	ldr	r3, [pc, #16]	; (12124 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
   12112:	685b      	ldr	r3, [r3, #4]
   12114:	2201      	movs	r2, #1
   12116:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   1211a:	bf00      	nop
   1211c:	370c      	adds	r7, #12
   1211e:	46bd      	mov	sp, r7
   12120:	bc80      	pop	{r7}
   12122:	4770      	bx	lr
   12124:	2000551c 	.word	0x2000551c

00012128 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
   12128:	b580      	push	{r7, lr}
   1212a:	b082      	sub	sp, #8
   1212c:	af00      	add	r7, sp, #0
   1212e:	6078      	str	r0, [r7, #4]
   12130:	687b      	ldr	r3, [r7, #4]
   12132:	4618      	mov	r0, r3
   12134:	4b1d      	ldr	r3, [pc, #116]	; (121ac <_ZN22FlapperValveControllerC1Ev+0x84>)
   12136:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
   12138:	687b      	ldr	r3, [r7, #4]
   1213a:	4a1d      	ldr	r2, [pc, #116]	; (121b0 <_ZN22FlapperValveControllerC1Ev+0x88>)
   1213c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
   12140:	687b      	ldr	r3, [r7, #4]
   12142:	2200      	movs	r2, #0
   12144:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
   12148:	687b      	ldr	r3, [r7, #4]
   1214a:	2200      	movs	r2, #0
   1214c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
   12150:	687b      	ldr	r3, [r7, #4]
   12152:	2200      	movs	r2, #0
   12154:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
   12158:	687b      	ldr	r3, [r7, #4]
   1215a:	2200      	movs	r2, #0
   1215c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
   12160:	687b      	ldr	r3, [r7, #4]
   12162:	2200      	movs	r2, #0
   12164:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
   12168:	687b      	ldr	r3, [r7, #4]
   1216a:	22da      	movs	r2, #218	; 0xda
   1216c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
   12170:	687b      	ldr	r3, [r7, #4]
   12172:	2200      	movs	r2, #0
   12174:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
   12178:	687b      	ldr	r3, [r7, #4]
   1217a:	2200      	movs	r2, #0
   1217c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
   12180:	687b      	ldr	r3, [r7, #4]
   12182:	2200      	movs	r2, #0
   12184:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
   12188:	687b      	ldr	r3, [r7, #4]
   1218a:	2200      	movs	r2, #0
   1218c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
   12190:	687b      	ldr	r3, [r7, #4]
   12192:	2200      	movs	r2, #0
   12194:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
   12198:	687b      	ldr	r3, [r7, #4]
   1219a:	2200      	movs	r2, #0
   1219c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	
} //FlapperValveController
   121a0:	687b      	ldr	r3, [r7, #4]
   121a2:	4618      	mov	r0, r3
   121a4:	3708      	adds	r7, #8
   121a6:	46bd      	mov	sp, r7
   121a8:	bd80      	pop	{r7, pc}
   121aa:	bf00      	nop
   121ac:	00013499 	.word	0x00013499
   121b0:	20005524 	.word	0x20005524

000121b4 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   121b4:	b580      	push	{r7, lr}
   121b6:	b082      	sub	sp, #8
   121b8:	af00      	add	r7, sp, #0
   121ba:	6078      	str	r0, [r7, #4]
   121bc:	687b      	ldr	r3, [r7, #4]
   121be:	4618      	mov	r0, r3
   121c0:	4b03      	ldr	r3, [pc, #12]	; (121d0 <_ZN22FlapperValveControllerD1Ev+0x1c>)
   121c2:	4798      	blx	r3
{
} //~FlapperValveController
   121c4:	687b      	ldr	r3, [r7, #4]
   121c6:	4618      	mov	r0, r3
   121c8:	3708      	adds	r7, #8
   121ca:	46bd      	mov	sp, r7
   121cc:	bd80      	pop	{r7, pc}
   121ce:	bf00      	nop
   121d0:	000134e5 	.word	0x000134e5

000121d4 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
   121d4:	b580      	push	{r7, lr}
   121d6:	b082      	sub	sp, #8
   121d8:	af00      	add	r7, sp, #0
   121da:	6078      	str	r0, [r7, #4]
   121dc:	460b      	mov	r3, r1
   121de:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
   121e0:	78fb      	ldrb	r3, [r7, #3]
   121e2:	491b      	ldr	r1, [pc, #108]	; (12250 <_ZN22FlapperValveController14InitControllerEh+0x7c>)
   121e4:	687a      	ldr	r2, [r7, #4]
   121e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
   121ea:	687b      	ldr	r3, [r7, #4]
   121ec:	78fa      	ldrb	r2, [r7, #3]
   121ee:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
   121f2:	78fa      	ldrb	r2, [r7, #3]
   121f4:	4613      	mov	r3, r2
   121f6:	011b      	lsls	r3, r3, #4
   121f8:	1a9b      	subs	r3, r3, r2
   121fa:	00db      	lsls	r3, r3, #3
   121fc:	4a15      	ldr	r2, [pc, #84]	; (12254 <_ZN22FlapperValveController14InitControllerEh+0x80>)
   121fe:	441a      	add	r2, r3
   12200:	687b      	ldr	r3, [r7, #4]
   12202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
   12206:	78fb      	ldrb	r3, [r7, #3]
   12208:	78fa      	ldrb	r2, [r7, #3]
   1220a:	0112      	lsls	r2, r2, #4
   1220c:	4912      	ldr	r1, [pc, #72]	; (12258 <_ZN22FlapperValveController14InitControllerEh+0x84>)
   1220e:	440a      	add	r2, r1
   12210:	6879      	ldr	r1, [r7, #4]
   12212:	3332      	adds	r3, #50	; 0x32
   12214:	009b      	lsls	r3, r3, #2
   12216:	440b      	add	r3, r1
   12218:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
   1221a:	687b      	ldr	r3, [r7, #4]
   1221c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12220:	78fa      	ldrb	r2, [r7, #3]
   12222:	4611      	mov	r1, r2
   12224:	4618      	mov	r0, r3
   12226:	4b0d      	ldr	r3, [pc, #52]	; (1225c <_ZN22FlapperValveController14InitControllerEh+0x88>)
   12228:	4798      	blx	r3
   1222a:	4603      	mov	r3, r0
   1222c:	2b00      	cmp	r3, #0
   1222e:	d007      	beq.n	12240 <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
   12230:	6878      	ldr	r0, [r7, #4]
   12232:	4b0b      	ldr	r3, [pc, #44]	; (12260 <_ZN22FlapperValveController14InitControllerEh+0x8c>)
   12234:	4798      	blx	r3
   12236:	4603      	mov	r3, r0
   12238:	461a      	mov	r2, r3
   1223a:	687b      	ldr	r3, [r7, #4]
   1223c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
   12240:	687b      	ldr	r3, [r7, #4]
   12242:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   12246:	b2db      	uxtb	r3, r3
}
   12248:	4618      	mov	r0, r3
   1224a:	3708      	adds	r7, #8
   1224c:	46bd      	mov	sp, r7
   1224e:	bd80      	pop	{r7, pc}
   12250:	2000551c 	.word	0x2000551c
   12254:	20005524 	.word	0x20005524
   12258:	200054fc 	.word	0x200054fc
   1225c:	00013599 	.word	0x00013599
   12260:	00013105 	.word	0x00013105

00012264 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   12264:	b480      	push	{r7}
   12266:	b083      	sub	sp, #12
   12268:	af00      	add	r7, sp, #0
   1226a:	6078      	str	r0, [r7, #4]
   1226c:	460b      	mov	r3, r1
   1226e:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
   12276:	687b      	ldr	r3, [r7, #4]
   12278:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12282:	461a      	mov	r2, r3
   12284:	78fb      	ldrb	r3, [r7, #3]
   12286:	429a      	cmp	r2, r3
   12288:	bfcc      	ite	gt
   1228a:	2301      	movgt	r3, #1
   1228c:	2300      	movle	r3, #0
   1228e:	b2da      	uxtb	r2, r3
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
   12296:	687b      	ldr	r3, [r7, #4]
   12298:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
   1229c:	4618      	mov	r0, r3
   1229e:	370c      	adds	r7, #12
   122a0:	46bd      	mov	sp, r7
   122a2:	bc80      	pop	{r7}
   122a4:	4770      	bx	lr
	...

000122a8 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   122a8:	b580      	push	{r7, lr}
   122aa:	b082      	sub	sp, #8
   122ac:	af00      	add	r7, sp, #0
   122ae:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   122b0:	687b      	ldr	r3, [r7, #4]
   122b2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   122b6:	4619      	mov	r1, r3
   122b8:	6878      	ldr	r0, [r7, #4]
   122ba:	4b03      	ldr	r3, [pc, #12]	; (122c8 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   122bc:	4798      	blx	r3
   122be:	4603      	mov	r3, r0
	
}
   122c0:	4618      	mov	r0, r3
   122c2:	3708      	adds	r7, #8
   122c4:	46bd      	mov	sp, r7
   122c6:	bd80      	pop	{r7, pc}
   122c8:	00012265 	.word	0x00012265

000122cc <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   122cc:	b590      	push	{r4, r7, lr}
   122ce:	b083      	sub	sp, #12
   122d0:	af00      	add	r7, sp, #0
   122d2:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   122d4:	687b      	ldr	r3, [r7, #4]
   122d6:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   122da:	687b      	ldr	r3, [r7, #4]
   122dc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   122e0:	687b      	ldr	r3, [r7, #4]
   122e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   122e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   122ea:	2b00      	cmp	r3, #0
   122ec:	d009      	beq.n	12302 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
   122ee:	687b      	ldr	r3, [r7, #4]
   122f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   122f4:	2100      	movs	r1, #0
   122f6:	4618      	mov	r0, r3
   122f8:	4b0b      	ldr	r3, [pc, #44]	; (12328 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   122fa:	4798      	blx	r3
		delay_ms(10);
   122fc:	200a      	movs	r0, #10
   122fe:	4b0b      	ldr	r3, [pc, #44]	; (1232c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   12300:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
   12302:	687b      	ldr	r3, [r7, #4]
   12304:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
   12308:	6878      	ldr	r0, [r7, #4]
   1230a:	4b09      	ldr	r3, [pc, #36]	; (12330 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   1230c:	4798      	blx	r3
   1230e:	4603      	mov	r3, r0
   12310:	4619      	mov	r1, r3
   12312:	4620      	mov	r0, r4
   12314:	4b07      	ldr	r3, [pc, #28]	; (12334 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   12316:	4798      	blx	r3
	StartMotor();
   12318:	6878      	ldr	r0, [r7, #4]
   1231a:	4b07      	ldr	r3, [pc, #28]	; (12338 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
   1231c:	4798      	blx	r3
	return 0;
   1231e:	2300      	movs	r3, #0
}
   12320:	4618      	mov	r0, r3
   12322:	370c      	adds	r7, #12
   12324:	46bd      	mov	sp, r7
   12326:	bd90      	pop	{r4, r7, pc}
   12328:	000136f9 	.word	0x000136f9
   1232c:	00003561 	.word	0x00003561
   12330:	000122a9 	.word	0x000122a9
   12334:	00013779 	.word	0x00013779
   12338:	00012d05 	.word	0x00012d05

0001233c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   1233c:	b580      	push	{r7, lr}
   1233e:	b082      	sub	sp, #8
   12340:	af00      	add	r7, sp, #0
   12342:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   12344:	6878      	ldr	r0, [r7, #4]
   12346:	4b13      	ldr	r3, [pc, #76]	; (12394 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   12348:	4798      	blx	r3
   1234a:	4603      	mov	r3, r0
   1234c:	2b00      	cmp	r3, #0
   1234e:	d003      	beq.n	12358 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   12350:	6878      	ldr	r0, [r7, #4]
   12352:	4b11      	ldr	r3, [pc, #68]	; (12398 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   12354:	4798      	blx	r3
   12356:	e013      	b.n	12380 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   12358:	687b      	ldr	r3, [r7, #4]
   1235a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   1235e:	2b00      	cmp	r3, #0
   12360:	d00b      	beq.n	1237a <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   12362:	687b      	ldr	r3, [r7, #4]
   12364:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12368:	4619      	mov	r1, r3
   1236a:	6878      	ldr	r0, [r7, #4]
   1236c:	4b0b      	ldr	r3, [pc, #44]	; (1239c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   1236e:	4798      	blx	r3
			NBC_Activated=false;
   12370:	687b      	ldr	r3, [r7, #4]
   12372:	2200      	movs	r2, #0
   12374:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12378:	e002      	b.n	12380 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   1237a:	6878      	ldr	r0, [r7, #4]
   1237c:	4b08      	ldr	r3, [pc, #32]	; (123a0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   1237e:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   12380:	687b      	ldr	r3, [r7, #4]
   12382:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   12386:	f083 0301 	eor.w	r3, r3, #1
   1238a:	b2db      	uxtb	r3, r3
}
   1238c:	4618      	mov	r0, r3
   1238e:	3708      	adds	r7, #8
   12390:	46bd      	mov	sp, r7
   12392:	bd80      	pop	{r7, pc}
   12394:	00012a9d 	.word	0x00012a9d
   12398:	00012a3d 	.word	0x00012a3d
   1239c:	00012d9d 	.word	0x00012d9d
   123a0:	000126a5 	.word	0x000126a5

000123a4 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   123a4:	b590      	push	{r4, r7, lr}
   123a6:	b085      	sub	sp, #20
   123a8:	af00      	add	r7, sp, #0
   123aa:	6078      	str	r0, [r7, #4]
	bool result=false;
   123ac:	2300      	movs	r3, #0
   123ae:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   123b0:	687b      	ldr	r3, [r7, #4]
   123b2:	33c7      	adds	r3, #199	; 0xc7
   123b4:	4619      	mov	r1, r3
   123b6:	4817      	ldr	r0, [pc, #92]	; (12414 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   123b8:	4b17      	ldr	r3, [pc, #92]	; (12418 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   123ba:	4798      	blx	r3
	UpdateFlapperValveData();
   123bc:	6878      	ldr	r0, [r7, #4]
   123be:	4b17      	ldr	r3, [pc, #92]	; (1241c <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   123c0:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   123c2:	687b      	ldr	r3, [r7, #4]
   123c4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
   123c8:	f083 0301 	eor.w	r3, r3, #1
   123cc:	b2db      	uxtb	r3, r3
   123ce:	461c      	mov	r4, r3
   123d0:	6878      	ldr	r0, [r7, #4]
   123d2:	4b13      	ldr	r3, [pc, #76]	; (12420 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   123d4:	4798      	blx	r3
   123d6:	4603      	mov	r3, r0
   123d8:	f083 0301 	eor.w	r3, r3, #1
   123dc:	b2db      	uxtb	r3, r3
   123de:	4023      	ands	r3, r4
   123e0:	2b00      	cmp	r3, #0
   123e2:	bf14      	ite	ne
   123e4:	2301      	movne	r3, #1
   123e6:	2300      	moveq	r3, #0
   123e8:	b2db      	uxtb	r3, r3
   123ea:	2b00      	cmp	r3, #0
   123ec:	d00d      	beq.n	1240a <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   123ee:	687b      	ldr	r3, [r7, #4]
   123f0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   123f4:	461a      	mov	r2, r3
   123f6:	687b      	ldr	r3, [r7, #4]
   123f8:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   123fc:	429a      	cmp	r2, r3
   123fe:	dd02      	ble.n	12406 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   12400:	2301      	movs	r3, #1
   12402:	73fb      	strb	r3, [r7, #15]
   12404:	e001      	b.n	1240a <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   12406:	2300      	movs	r3, #0
   12408:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   1240a:	7bfb      	ldrb	r3, [r7, #15]
}
   1240c:	4618      	mov	r0, r3
   1240e:	3714      	adds	r7, #20
   12410:	46bd      	mov	sp, r7
   12412:	bd90      	pop	{r4, r7, pc}
   12414:	20006a80 	.word	0x20006a80
   12418:	00013fbd 	.word	0x00013fbd
   1241c:	00012f99 	.word	0x00012f99
   12420:	00012a9d 	.word	0x00012a9d

00012424 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   12424:	b580      	push	{r7, lr}
   12426:	b082      	sub	sp, #8
   12428:	af00      	add	r7, sp, #0
   1242a:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   1242c:	6878      	ldr	r0, [r7, #4]
   1242e:	4b1c      	ldr	r3, [pc, #112]	; (124a0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
   12430:	4798      	blx	r3
   12432:	4603      	mov	r3, r0
   12434:	461a      	mov	r2, r3
   12436:	687b      	ldr	r3, [r7, #4]
   12438:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1243c:	b2db      	uxtb	r3, r3
   1243e:	f083 0301 	eor.w	r3, r3, #1
   12442:	b2db      	uxtb	r3, r3
   12444:	4013      	ands	r3, r2
   12446:	2b00      	cmp	r3, #0
   12448:	bf14      	ite	ne
   1244a:	2301      	movne	r3, #1
   1244c:	2300      	moveq	r3, #0
   1244e:	b2db      	uxtb	r3, r3
   12450:	2b00      	cmp	r3, #0
   12452:	d003      	beq.n	1245c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   12454:	6878      	ldr	r0, [r7, #4]
   12456:	4b13      	ldr	r3, [pc, #76]	; (124a4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
   12458:	4798      	blx	r3
   1245a:	e019      	b.n	12490 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
   1245c:	687b      	ldr	r3, [r7, #4]
   1245e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   12462:	2b00      	cmp	r3, #0
   12464:	d011      	beq.n	1248a <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
   12466:	687b      	ldr	r3, [r7, #4]
   12468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1246c:	2100      	movs	r1, #0
   1246e:	4618      	mov	r0, r3
   12470:	4b0d      	ldr	r3, [pc, #52]	; (124a8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   12472:	4798      	blx	r3
			delay_us(10);
   12474:	200a      	movs	r0, #10
   12476:	4b0d      	ldr	r3, [pc, #52]	; (124ac <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
   12478:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
   1247a:	687b      	ldr	r3, [r7, #4]
   1247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12480:	2101      	movs	r1, #1
   12482:	4618      	mov	r0, r3
   12484:	4b08      	ldr	r3, [pc, #32]	; (124a8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   12486:	4798      	blx	r3
   12488:	e002      	b.n	12490 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
   1248a:	6878      	ldr	r0, [r7, #4]
   1248c:	4b08      	ldr	r3, [pc, #32]	; (124b0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
   1248e:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
   12490:	687b      	ldr	r3, [r7, #4]
   12492:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   12496:	b2db      	uxtb	r3, r3
}
   12498:	4618      	mov	r0, r3
   1249a:	3708      	adds	r7, #8
   1249c:	46bd      	mov	sp, r7
   1249e:	bd80      	pop	{r7, pc}
   124a0:	000123a5 	.word	0x000123a5
   124a4:	00012875 	.word	0x00012875
   124a8:	000137f1 	.word	0x000137f1
   124ac:	0000352d 	.word	0x0000352d
   124b0:	000124b5 	.word	0x000124b5

000124b4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   124b4:	b580      	push	{r7, lr}
   124b6:	b082      	sub	sp, #8
   124b8:	af00      	add	r7, sp, #0
   124ba:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   124bc:	6878      	ldr	r0, [r7, #4]
   124be:	4b29      	ldr	r3, [pc, #164]	; (12564 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
   124c0:	4798      	blx	r3
   124c2:	4603      	mov	r3, r0
   124c4:	2b00      	cmp	r3, #0
   124c6:	d031      	beq.n	1252c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
   124c8:	687b      	ldr	r3, [r7, #4]
   124ca:	2201      	movs	r2, #1
   124cc:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
   124d0:	687b      	ldr	r3, [r7, #4]
   124d2:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   124d6:	2b00      	cmp	r3, #0
   124d8:	d003      	beq.n	124e2 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   124da:	6878      	ldr	r0, [r7, #4]
   124dc:	4b22      	ldr	r3, [pc, #136]	; (12568 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   124de:	4798      	blx	r3
   124e0:	e038      	b.n	12554 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
   124e2:	687b      	ldr	r3, [r7, #4]
   124e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   124e8:	461a      	mov	r2, r3
   124ea:	687b      	ldr	r3, [r7, #4]
   124ec:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   124f0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   124f4:	429a      	cmp	r2, r3
   124f6:	dd0c      	ble.n	12512 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
   124f8:	687b      	ldr	r3, [r7, #4]
   124fa:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   124fe:	43db      	mvns	r3, r3
   12500:	b2db      	uxtb	r3, r3
   12502:	4619      	mov	r1, r3
   12504:	6878      	ldr	r0, [r7, #4]
   12506:	4b19      	ldr	r3, [pc, #100]	; (1256c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
   12508:	4798      	blx	r3
					standAloneReturning=true;
   1250a:	687b      	ldr	r3, [r7, #4]
   1250c:	2201      	movs	r2, #1
   1250e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   12512:	687b      	ldr	r3, [r7, #4]
   12514:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   12518:	43db      	mvns	r3, r3
   1251a:	b2da      	uxtb	r2, r3
   1251c:	687b      	ldr	r3, [r7, #4]
   1251e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
   12522:	687b      	ldr	r3, [r7, #4]
   12524:	2201      	movs	r2, #1
   12526:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
   1252a:	e013      	b.n	12554 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
   1252c:	687b      	ldr	r3, [r7, #4]
   1252e:	2200      	movs	r2, #0
   12530:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
   12534:	687b      	ldr	r3, [r7, #4]
   12536:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   1253a:	2b00      	cmp	r3, #0
   1253c:	d007      	beq.n	1254e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   1253e:	687b      	ldr	r3, [r7, #4]
   12540:	2200      	movs	r2, #0
   12542:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
   12546:	687b      	ldr	r3, [r7, #4]
   12548:	2200      	movs	r2, #0
   1254a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   1254e:	6878      	ldr	r0, [r7, #4]
   12550:	4b05      	ldr	r3, [pc, #20]	; (12568 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   12552:	4798      	blx	r3
		
	}
	return standAloneMode;
   12554:	687b      	ldr	r3, [r7, #4]
   12556:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
   1255a:	4618      	mov	r0, r3
   1255c:	3708      	adds	r7, #8
   1255e:	46bd      	mov	sp, r7
   12560:	bd80      	pop	{r7, pc}
   12562:	bf00      	nop
   12564:	00012571 	.word	0x00012571
   12568:	0001233d 	.word	0x0001233d
   1256c:	00012d9d 	.word	0x00012d9d

00012570 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   12570:	b480      	push	{r7}
   12572:	b085      	sub	sp, #20
   12574:	af00      	add	r7, sp, #0
   12576:	6078      	str	r0, [r7, #4]
	
	bool result=false;
   12578:	2300      	movs	r3, #0
   1257a:	73fb      	strb	r3, [r7, #15]
	if (partner->isOK)
   1257c:	687b      	ldr	r3, [r7, #4]
   1257e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   12582:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   12586:	b2db      	uxtb	r3, r3
   12588:	2b00      	cmp	r3, #0
   1258a:	d006      	beq.n	1259a <_ZN22FlapperValveController16IsStandAloneModeEv+0x2a>
	{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
   1258c:	687b      	ldr	r3, [r7, #4]
   1258e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   12592:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   12596:	73fb      	strb	r3, [r7, #15]
   12598:	e001      	b.n	1259e <_ZN22FlapperValveController16IsStandAloneModeEv+0x2e>
	} 
	else
	{
		result=true;
   1259a:	2301      	movs	r3, #1
   1259c:	73fb      	strb	r3, [r7, #15]
	}


	return result;
   1259e:	7bfb      	ldrb	r3, [r7, #15]
}
   125a0:	4618      	mov	r0, r3
   125a2:	3714      	adds	r7, #20
   125a4:	46bd      	mov	sp, r7
   125a6:	bc80      	pop	{r7}
   125a8:	4770      	bx	lr

000125aa <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
   125aa:	b480      	push	{r7}
   125ac:	b083      	sub	sp, #12
   125ae:	af00      	add	r7, sp, #0
   125b0:	6078      	str	r0, [r7, #4]
   125b2:	6039      	str	r1, [r7, #0]
	partner=part;
   125b4:	687b      	ldr	r3, [r7, #4]
   125b6:	683a      	ldr	r2, [r7, #0]
   125b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   125bc:	bf00      	nop
   125be:	370c      	adds	r7, #12
   125c0:	46bd      	mov	sp, r7
   125c2:	bc80      	pop	{r7}
   125c4:	4770      	bx	lr
	...

000125c8 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
   125c8:	b580      	push	{r7, lr}
   125ca:	b082      	sub	sp, #8
   125cc:	af00      	add	r7, sp, #0
   125ce:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
   125d0:	687b      	ldr	r3, [r7, #4]
   125d2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   125d6:	2b05      	cmp	r3, #5
   125d8:	bfd4      	ite	le
   125da:	2301      	movle	r3, #1
   125dc:	2300      	movgt	r3, #0
   125de:	b2da      	uxtb	r2, r3
   125e0:	687b      	ldr	r3, [r7, #4]
   125e2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   125e6:	2b05      	cmp	r3, #5
   125e8:	bfd4      	ite	le
   125ea:	2301      	movle	r3, #1
   125ec:	2300      	movgt	r3, #0
   125ee:	b2db      	uxtb	r3, r3
   125f0:	4013      	ands	r3, r2
   125f2:	b2da      	uxtb	r2, r3
   125f4:	687b      	ldr	r3, [r7, #4]
   125f6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   125fa:	2bfa      	cmp	r3, #250	; 0xfa
   125fc:	bfcc      	ite	gt
   125fe:	2301      	movgt	r3, #1
   12600:	2300      	movle	r3, #0
   12602:	b2d9      	uxtb	r1, r3
   12604:	687b      	ldr	r3, [r7, #4]
   12606:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1260a:	2bf5      	cmp	r3, #245	; 0xf5
   1260c:	bfcc      	ite	gt
   1260e:	2301      	movgt	r3, #1
   12610:	2300      	movle	r3, #0
   12612:	b2db      	uxtb	r3, r3
   12614:	400b      	ands	r3, r1
   12616:	b2db      	uxtb	r3, r3
   12618:	4313      	orrs	r3, r2
   1261a:	b2db      	uxtb	r3, r3
   1261c:	461a      	mov	r2, r3
   1261e:	687b      	ldr	r3, [r7, #4]
   12620:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12624:	f083 0301 	eor.w	r3, r3, #1
   12628:	b2db      	uxtb	r3, r3
   1262a:	4619      	mov	r1, r3
   1262c:	687b      	ldr	r3, [r7, #4]
   1262e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12632:	b2db      	uxtb	r3, r3
   12634:	400b      	ands	r3, r1
   12636:	4013      	ands	r3, r2
   12638:	2b00      	cmp	r3, #0
   1263a:	bf14      	ite	ne
   1263c:	2301      	movne	r3, #1
   1263e:	2300      	moveq	r3, #0
   12640:	b2db      	uxtb	r3, r3
   12642:	2b00      	cmp	r3, #0
   12644:	d01f      	beq.n	12686 <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
   12646:	687b      	ldr	r3, [r7, #4]
   12648:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   1264c:	2b00      	cmp	r3, #0
   1264e:	d105      	bne.n	1265c <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12650:	22c8      	movs	r2, #200	; 0xc8
   12652:	4910      	ldr	r1, [pc, #64]	; (12694 <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
   12654:	4810      	ldr	r0, [pc, #64]	; (12698 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   12656:	4b11      	ldr	r3, [pc, #68]	; (1269c <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   12658:	4798      	blx	r3
   1265a:	e004      	b.n	12666 <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   1265c:	22c8      	movs	r2, #200	; 0xc8
   1265e:	4910      	ldr	r1, [pc, #64]	; (126a0 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
   12660:	480d      	ldr	r0, [pc, #52]	; (12698 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   12662:	4b0e      	ldr	r3, [pc, #56]	; (1269c <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   12664:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
   12666:	687b      	ldr	r3, [r7, #4]
   12668:	2200      	movs	r2, #0
   1266a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	2200      	movs	r2, #0
   12672:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
   12676:	687b      	ldr	r3, [r7, #4]
   12678:	2201      	movs	r2, #1
   1267a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
   1267e:	687b      	ldr	r3, [r7, #4]
   12680:	2201      	movs	r2, #1
   12682:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
   12686:	687b      	ldr	r3, [r7, #4]
   12688:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
   1268c:	4618      	mov	r0, r3
   1268e:	3708      	adds	r7, #8
   12690:	46bd      	mov	sp, r7
   12692:	bd80      	pop	{r7, pc}
   12694:	000120a9 	.word	0x000120a9
   12698:	2000543c 	.word	0x2000543c
   1269c:	000103b5 	.word	0x000103b5
   126a0:	000120c9 	.word	0x000120c9

000126a4 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   126a4:	b590      	push	{r4, r7, lr}
   126a6:	b083      	sub	sp, #12
   126a8:	af00      	add	r7, sp, #0
   126aa:	6078      	str	r0, [r7, #4]
	if (isControlling)
   126ac:	687b      	ldr	r3, [r7, #4]
   126ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   126b2:	2b00      	cmp	r3, #0
   126b4:	f000 80c9 	beq.w	1284a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   126b8:	687b      	ldr	r3, [r7, #4]
   126ba:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
   126be:	687b      	ldr	r3, [r7, #4]
   126c0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
   126c4:	4313      	orrs	r3, r2
   126c6:	b2db      	uxtb	r3, r3
   126c8:	461a      	mov	r2, r3
   126ca:	687b      	ldr	r3, [r7, #4]
   126cc:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   126d0:	4013      	ands	r3, r2
   126d2:	687a      	ldr	r2, [r7, #4]
   126d4:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
   126d8:	b2d2      	uxtb	r2, r2
   126da:	4013      	ands	r3, r2
   126dc:	2b00      	cmp	r3, #0
   126de:	bf14      	ite	ne
   126e0:	2301      	movne	r3, #1
   126e2:	2300      	moveq	r3, #0
   126e4:	b2db      	uxtb	r3, r3
   126e6:	2b00      	cmp	r3, #0
   126e8:	d003      	beq.n	126f2 <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   126ea:	6878      	ldr	r0, [r7, #4]
   126ec:	4b59      	ldr	r3, [pc, #356]	; (12854 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   126ee:	4798      	blx	r3
   126f0:	e0ab      	b.n	1284a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
   126f2:	6878      	ldr	r0, [r7, #4]
   126f4:	4b58      	ldr	r3, [pc, #352]	; (12858 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
   126f6:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   126fe:	461a      	mov	r2, r3
   12700:	687b      	ldr	r3, [r7, #4]
   12702:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12706:	1ad3      	subs	r3, r2, r3
   12708:	2b00      	cmp	r3, #0
   1270a:	bfb8      	it	lt
   1270c:	425b      	neglt	r3, r3
   1270e:	687a      	ldr	r2, [r7, #4]
   12710:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   12714:	4293      	cmp	r3, r2
   12716:	bfcc      	ite	gt
   12718:	2301      	movgt	r3, #1
   1271a:	2300      	movle	r3, #0
   1271c:	b2db      	uxtb	r3, r3
   1271e:	461a      	mov	r2, r3
   12720:	687b      	ldr	r3, [r7, #4]
   12722:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12726:	4313      	orrs	r3, r2
   12728:	2b00      	cmp	r3, #0
   1272a:	d078      	beq.n	1281e <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
   1272c:	6878      	ldr	r0, [r7, #4]
   1272e:	4b4b      	ldr	r3, [pc, #300]	; (1285c <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
   12730:	4798      	blx	r3
   12732:	4603      	mov	r3, r0
   12734:	2b00      	cmp	r3, #0
   12736:	d04a      	beq.n	127ce <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
   12738:	687b      	ldr	r3, [r7, #4]
   1273a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   1273e:	2b00      	cmp	r3, #0
   12740:	d00e      	beq.n	12760 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   12748:	2b00      	cmp	r3, #0
   1274a:	d053      	beq.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   12752:	b2db      	uxtb	r3, r3
   12754:	2b00      	cmp	r3, #0
   12756:	d04d      	beq.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
   12758:	6878      	ldr	r0, [r7, #4]
   1275a:	4b3e      	ldr	r3, [pc, #248]	; (12854 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   1275c:	4798      	blx	r3
   1275e:	e049      	b.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   12760:	687b      	ldr	r3, [r7, #4]
   12762:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
   12766:	6878      	ldr	r0, [r7, #4]
   12768:	4b3d      	ldr	r3, [pc, #244]	; (12860 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
   1276a:	4798      	blx	r3
   1276c:	4603      	mov	r3, r0
   1276e:	429c      	cmp	r4, r3
   12770:	bf14      	ite	ne
   12772:	2301      	movne	r3, #1
   12774:	2300      	moveq	r3, #0
   12776:	b2db      	uxtb	r3, r3
   12778:	2b00      	cmp	r3, #0
   1277a:	d00a      	beq.n	12792 <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
   1277c:	6878      	ldr	r0, [r7, #4]
   1277e:	4b39      	ldr	r3, [pc, #228]	; (12864 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   12780:	4798      	blx	r3
							RemoveTimeoutTask();
   12782:	6878      	ldr	r0, [r7, #4]
   12784:	4b38      	ldr	r3, [pc, #224]	; (12868 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
   12786:	4798      	blx	r3
							keepControlling=true;
   12788:	687b      	ldr	r3, [r7, #4]
   1278a:	2201      	movs	r2, #1
   1278c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
   12790:	e030      	b.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
   12792:	687b      	ldr	r3, [r7, #4]
   12794:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   12798:	b2db      	uxtb	r3, r3
   1279a:	2b00      	cmp	r3, #0
   1279c:	d003      	beq.n	127a6 <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
   1279e:	6878      	ldr	r0, [r7, #4]
   127a0:	4b30      	ldr	r3, [pc, #192]	; (12864 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   127a2:	4798      	blx	r3
   127a4:	e026      	b.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
   127a6:	687b      	ldr	r3, [r7, #4]
   127a8:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   127ac:	2b00      	cmp	r3, #0
   127ae:	d021      	beq.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
   127b0:	687b      	ldr	r3, [r7, #4]
   127b2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   127b6:	b2db      	uxtb	r3, r3
   127b8:	2b00      	cmp	r3, #0
   127ba:	d003      	beq.n	127c4 <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
   127bc:	6878      	ldr	r0, [r7, #4]
   127be:	4b29      	ldr	r3, [pc, #164]	; (12864 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   127c0:	4798      	blx	r3
   127c2:	e017      	b.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
   127c4:	2100      	movs	r1, #0
   127c6:	6878      	ldr	r0, [r7, #4]
   127c8:	4b28      	ldr	r3, [pc, #160]	; (1286c <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   127ca:	4798      	blx	r3
   127cc:	e012      	b.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
   127ce:	687b      	ldr	r3, [r7, #4]
   127d0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   127d4:	2b00      	cmp	r3, #0
   127d6:	d00d      	beq.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   127de:	b2db      	uxtb	r3, r3
   127e0:	2b00      	cmp	r3, #0
   127e2:	d003      	beq.n	127ec <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
   127e4:	6878      	ldr	r0, [r7, #4]
   127e6:	4b22      	ldr	r3, [pc, #136]	; (12870 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   127e8:	4798      	blx	r3
   127ea:	e003      	b.n	127f4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
   127ec:	2100      	movs	r1, #0
   127ee:	6878      	ldr	r0, [r7, #4]
   127f0:	4b1e      	ldr	r3, [pc, #120]	; (1286c <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   127f2:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   127f4:	687b      	ldr	r3, [r7, #4]
   127f6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   127fa:	461a      	mov	r2, r3
   127fc:	687b      	ldr	r3, [r7, #4]
   127fe:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12802:	1ad3      	subs	r3, r2, r3
   12804:	2b00      	cmp	r3, #0
   12806:	bfb8      	it	lt
   12808:	425b      	neglt	r3, r3
   1280a:	687a      	ldr	r2, [r7, #4]
   1280c:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   12810:	4293      	cmp	r3, r2
   12812:	dd1a      	ble.n	1284a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	2200      	movs	r2, #0
   12818:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
   1281c:	e015      	b.n	1284a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12824:	2b00      	cmp	r3, #0
   12826:	d009      	beq.n	1283c <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
   12828:	687b      	ldr	r3, [r7, #4]
   1282a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1282e:	b2db      	uxtb	r3, r3
   12830:	2b00      	cmp	r3, #0
   12832:	d00a      	beq.n	1284a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
   12834:	6878      	ldr	r0, [r7, #4]
   12836:	4b07      	ldr	r3, [pc, #28]	; (12854 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   12838:	4798      	blx	r3
   1283a:	e006      	b.n	1284a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
   1283c:	6878      	ldr	r0, [r7, #4]
   1283e:	4b0c      	ldr	r3, [pc, #48]	; (12870 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   12840:	4798      	blx	r3
					gotSetpoint=true;
   12842:	687b      	ldr	r3, [r7, #4]
   12844:	2201      	movs	r2, #1
   12846:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
   1284a:	2300      	movs	r3, #0
	
}
   1284c:	4618      	mov	r0, r3
   1284e:	370c      	adds	r7, #12
   12850:	46bd      	mov	sp, r7
   12852:	bd90      	pop	{r4, r7, pc}
   12854:	00012bb9 	.word	0x00012bb9
   12858:	000125c9 	.word	0x000125c9
   1285c:	00012b11 	.word	0x00012b11
   12860:	000122a9 	.word	0x000122a9
   12864:	00012ae5 	.word	0x00012ae5
   12868:	000132b1 	.word	0x000132b1
   1286c:	00012f61 	.word	0x00012f61
   12870:	00012c51 	.word	0x00012c51

00012874 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   12874:	b580      	push	{r7, lr}
   12876:	b084      	sub	sp, #16
   12878:	af00      	add	r7, sp, #0
   1287a:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   1287c:	2052      	movs	r0, #82	; 0x52
   1287e:	4b60      	ldr	r3, [pc, #384]	; (12a00 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   12880:	4798      	blx	r3
   12882:	4603      	mov	r3, r0
   12884:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   12886:	6878      	ldr	r0, [r7, #4]
   12888:	4b5e      	ldr	r3, [pc, #376]	; (12a04 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   1288a:	4798      	blx	r3
   1288c:	4603      	mov	r3, r0
   1288e:	2b00      	cmp	r3, #0
   12890:	f000 80b2 	beq.w	129f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   1289a:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   128a2:	2100      	movs	r1, #0
   128a4:	4618      	mov	r0, r3
   128a6:	4b58      	ldr	r3, [pc, #352]	; (12a08 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   128a8:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   128b0:	2100      	movs	r1, #0
   128b2:	4618      	mov	r0, r3
   128b4:	4b55      	ldr	r3, [pc, #340]	; (12a0c <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   128b6:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
   128b8:	687b      	ldr	r3, [r7, #4]
   128ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   128be:	2100      	movs	r1, #0
   128c0:	4618      	mov	r0, r3
   128c2:	4b53      	ldr	r3, [pc, #332]	; (12a10 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   128c4:	4798      	blx	r3
		delay_ms(100);
   128c6:	2064      	movs	r0, #100	; 0x64
   128c8:	4b52      	ldr	r3, [pc, #328]	; (12a14 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
   128ca:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
   128cc:	687b      	ldr	r3, [r7, #4]
   128ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   128d2:	4618      	mov	r0, r3
   128d4:	4b50      	ldr	r3, [pc, #320]	; (12a18 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   128d6:	4798      	blx	r3
   128d8:	4603      	mov	r3, r0
   128da:	461a      	mov	r2, r3
   128dc:	7bbb      	ldrb	r3, [r7, #14]
   128de:	429a      	cmp	r2, r3
   128e0:	bfcc      	ite	gt
   128e2:	2301      	movgt	r3, #1
   128e4:	2300      	movle	r3, #0
   128e6:	b2db      	uxtb	r3, r3
   128e8:	2b00      	cmp	r3, #0
   128ea:	d007      	beq.n	128fc <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   128f2:	2101      	movs	r1, #1
   128f4:	4618      	mov	r0, r3
   128f6:	4b49      	ldr	r3, [pc, #292]	; (12a1c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   128f8:	4798      	blx	r3
   128fa:	e006      	b.n	1290a <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
   128fc:	687b      	ldr	r3, [r7, #4]
   128fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12902:	2100      	movs	r1, #0
   12904:	4618      	mov	r0, r3
   12906:	4b45      	ldr	r3, [pc, #276]	; (12a1c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   12908:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
   1290a:	687b      	ldr	r3, [r7, #4]
   1290c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12910:	2101      	movs	r1, #1
   12912:	4618      	mov	r0, r3
   12914:	4b3d      	ldr	r3, [pc, #244]	; (12a0c <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   12916:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
   12918:	687b      	ldr	r3, [r7, #4]
   1291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1291e:	2101      	movs	r1, #1
   12920:	4618      	mov	r0, r3
   12922:	4b3b      	ldr	r3, [pc, #236]	; (12a10 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   12924:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
   12926:	687b      	ldr	r3, [r7, #4]
   12928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1292c:	7bba      	ldrb	r2, [r7, #14]
   1292e:	4611      	mov	r1, r2
   12930:	4618      	mov	r0, r3
   12932:	4b3b      	ldr	r3, [pc, #236]	; (12a20 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
   12934:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
   12936:	687b      	ldr	r3, [r7, #4]
   12938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1293c:	4618      	mov	r0, r3
   1293e:	4b36      	ldr	r3, [pc, #216]	; (12a18 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   12940:	4798      	blx	r3
   12942:	4603      	mov	r3, r0
   12944:	461a      	mov	r2, r3
   12946:	687b      	ldr	r3, [r7, #4]
   12948:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
   1294c:	687b      	ldr	r3, [r7, #4]
   1294e:	2200      	movs	r2, #0
   12950:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
   12954:	687b      	ldr	r3, [r7, #4]
   12956:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   1295a:	2b00      	cmp	r3, #0
   1295c:	d106      	bne.n	1296c <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
   1295e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12962:	4930      	ldr	r1, [pc, #192]	; (12a24 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
   12964:	4830      	ldr	r0, [pc, #192]	; (12a28 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   12966:	4b31      	ldr	r3, [pc, #196]	; (12a2c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   12968:	4798      	blx	r3
   1296a:	e005      	b.n	12978 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
   1296c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12970:	492f      	ldr	r1, [pc, #188]	; (12a30 <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
   12972:	482d      	ldr	r0, [pc, #180]	; (12a28 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   12974:	4b2d      	ldr	r3, [pc, #180]	; (12a2c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   12976:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1297e:	2101      	movs	r1, #1
   12980:	4618      	mov	r0, r3
   12982:	4b21      	ldr	r3, [pc, #132]	; (12a08 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12984:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   12986:	687b      	ldr	r3, [r7, #4]
   12988:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1298c:	461a      	mov	r2, r3
   1298e:	7bbb      	ldrb	r3, [r7, #14]
   12990:	1ad3      	subs	r3, r2, r3
   12992:	2b00      	cmp	r3, #0
   12994:	bfb8      	it	lt
   12996:	425b      	neglt	r3, r3
   12998:	2b06      	cmp	r3, #6
   1299a:	bfcc      	ite	gt
   1299c:	2301      	movgt	r3, #1
   1299e:	2300      	movle	r3, #0
   129a0:	b2db      	uxtb	r3, r3
   129a2:	461a      	mov	r2, r3
   129a4:	687b      	ldr	r3, [r7, #4]
   129a6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   129aa:	b2db      	uxtb	r3, r3
   129ac:	f083 0301 	eor.w	r3, r3, #1
   129b0:	b2db      	uxtb	r3, r3
   129b2:	4013      	ands	r3, r2
   129b4:	2b00      	cmp	r3, #0
   129b6:	bf14      	ite	ne
   129b8:	2301      	movne	r3, #1
   129ba:	2300      	moveq	r3, #0
   129bc:	b2db      	uxtb	r3, r3
   129be:	2b00      	cmp	r3, #0
   129c0:	d00e      	beq.n	129e0 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
   129c2:	2052      	movs	r0, #82	; 0x52
   129c4:	4b1b      	ldr	r3, [pc, #108]	; (12a34 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
   129c6:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
   129c8:	687b      	ldr	r3, [r7, #4]
   129ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129ce:	4618      	mov	r0, r3
   129d0:	4b11      	ldr	r3, [pc, #68]	; (12a18 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   129d2:	4798      	blx	r3
   129d4:	4603      	mov	r3, r0
   129d6:	461a      	mov	r2, r3
   129d8:	687b      	ldr	r3, [r7, #4]
   129da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   129de:	e7d2      	b.n	12986 <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
   129e0:	687b      	ldr	r3, [r7, #4]
   129e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129e6:	2100      	movs	r1, #0
   129e8:	4618      	mov	r0, r3
   129ea:	4b07      	ldr	r3, [pc, #28]	; (12a08 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   129ec:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   129ee:	7bfb      	ldrb	r3, [r7, #15]
   129f0:	4619      	mov	r1, r3
   129f2:	2052      	movs	r0, #82	; 0x52
   129f4:	4b10      	ldr	r3, [pc, #64]	; (12a38 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
   129f6:	4798      	blx	r3
	} 
	else
	{
	}
}
   129f8:	bf00      	nop
   129fa:	3710      	adds	r7, #16
   129fc:	46bd      	mov	sp, r7
   129fe:	bd80      	pop	{r7, pc}
   12a00:	00012015 	.word	0x00012015
   12a04:	000123a5 	.word	0x000123a5
   12a08:	000136f9 	.word	0x000136f9
   12a0c:	00013869 	.word	0x00013869
   12a10:	000137f1 	.word	0x000137f1
   12a14:	00003561 	.word	0x00003561
   12a18:	00013919 	.word	0x00013919
   12a1c:	00013779 	.word	0x00013779
   12a20:	000138e1 	.word	0x000138e1
   12a24:	000120e9 	.word	0x000120e9
   12a28:	2000543c 	.word	0x2000543c
   12a2c:	000103b5 	.word	0x000103b5
   12a30:	00012109 	.word	0x00012109
   12a34:	00011fe5 	.word	0x00011fe5
   12a38:	00011fad 	.word	0x00011fad

00012a3c <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   12a3c:	b580      	push	{r7, lr}
   12a3e:	b082      	sub	sp, #8
   12a40:	af00      	add	r7, sp, #0
   12a42:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   12a44:	687b      	ldr	r3, [r7, #4]
   12a46:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d014      	beq.n	12a78 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   12a4e:	687b      	ldr	r3, [r7, #4]
   12a50:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   12a54:	2b00      	cmp	r3, #0
   12a56:	d003      	beq.n	12a60 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   12a58:	6878      	ldr	r0, [r7, #4]
   12a5a:	4b0e      	ldr	r3, [pc, #56]	; (12a94 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   12a5c:	4798      	blx	r3
   12a5e:	e013      	b.n	12a88 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   12a60:	687b      	ldr	r3, [r7, #4]
   12a62:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12a66:	4619      	mov	r1, r3
   12a68:	6878      	ldr	r0, [r7, #4]
   12a6a:	4b0b      	ldr	r3, [pc, #44]	; (12a98 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   12a6c:	4798      	blx	r3
			NBC_Activated=false;
   12a6e:	687b      	ldr	r3, [r7, #4]
   12a70:	2200      	movs	r2, #0
   12a72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12a76:	e007      	b.n	12a88 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   12a78:	21ff      	movs	r1, #255	; 0xff
   12a7a:	6878      	ldr	r0, [r7, #4]
   12a7c:	4b06      	ldr	r3, [pc, #24]	; (12a98 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   12a7e:	4798      	blx	r3
			NBC_Activated=true;
   12a80:	687b      	ldr	r3, [r7, #4]
   12a82:	2201      	movs	r2, #1
   12a84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
   12a88:	2300      	movs	r3, #0
	
}
   12a8a:	4618      	mov	r0, r3
   12a8c:	3708      	adds	r7, #8
   12a8e:	46bd      	mov	sp, r7
   12a90:	bd80      	pop	{r7, pc}
   12a92:	bf00      	nop
   12a94:	000126a5 	.word	0x000126a5
   12a98:	00012d9d 	.word	0x00012d9d

00012a9c <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   12a9c:	b480      	push	{r7}
   12a9e:	b083      	sub	sp, #12
   12aa0:	af00      	add	r7, sp, #0
   12aa2:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   12aa4:	687b      	ldr	r3, [r7, #4]
   12aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   12aaa:	461a      	mov	r2, r3
   12aac:	687b      	ldr	r3, [r7, #4]
   12aae:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
   12ab2:	4013      	ands	r3, r2
   12ab4:	687a      	ldr	r2, [r7, #4]
   12ab6:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   12aba:	4313      	orrs	r3, r2
   12abc:	2b00      	cmp	r3, #0
   12abe:	bf14      	ite	ne
   12ac0:	2301      	movne	r3, #1
   12ac2:	2300      	moveq	r3, #0
   12ac4:	b2da      	uxtb	r2, r3
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
   12acc:	687b      	ldr	r3, [r7, #4]
   12ace:	22ff      	movs	r2, #255	; 0xff
   12ad0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
   12ad4:	687b      	ldr	r3, [r7, #4]
   12ad6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
   12ada:	4618      	mov	r0, r3
   12adc:	370c      	adds	r7, #12
   12ade:	46bd      	mov	sp, r7
   12ae0:	bc80      	pop	{r7}
   12ae2:	4770      	bx	lr

00012ae4 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b082      	sub	sp, #8
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12af2:	2100      	movs	r1, #0
   12af4:	4618      	mov	r0, r3
   12af6:	4b05      	ldr	r3, [pc, #20]	; (12b0c <_ZN22FlapperValveController9StopMotorEv+0x28>)
   12af8:	4798      	blx	r3
	flapperValveIsMoving=false;
   12afa:	687b      	ldr	r3, [r7, #4]
   12afc:	2200      	movs	r2, #0
   12afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
   12b02:	2300      	movs	r3, #0
}
   12b04:	4618      	mov	r0, r3
   12b06:	3708      	adds	r7, #8
   12b08:	46bd      	mov	sp, r7
   12b0a:	bd80      	pop	{r7, pc}
   12b0c:	000136f9 	.word	0x000136f9

00012b10 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
   12b10:	b480      	push	{r7}
   12b12:	b085      	sub	sp, #20
   12b14:	af00      	add	r7, sp, #0
   12b16:	6078      	str	r0, [r7, #4]
	bool_result=true;
   12b18:	687b      	ldr	r3, [r7, #4]
   12b1a:	2201      	movs	r2, #1
   12b1c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
   12b20:	687b      	ldr	r3, [r7, #4]
   12b22:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12b26:	b2db      	uxtb	r3, r3
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d03c      	beq.n	12ba6 <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   12b2c:	2300      	movs	r3, #0
   12b2e:	73fb      	strb	r3, [r7, #15]
   12b30:	7bfb      	ldrb	r3, [r7, #15]
   12b32:	2b0e      	cmp	r3, #14
   12b34:	dc26      	bgt.n	12b84 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   12b36:	687b      	ldr	r3, [r7, #4]
   12b38:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12b3c:	687a      	ldr	r2, [r7, #4]
   12b3e:	3332      	adds	r3, #50	; 0x32
   12b40:	009b      	lsls	r3, r3, #2
   12b42:	4413      	add	r3, r2
   12b44:	685a      	ldr	r2, [r3, #4]
   12b46:	7bfb      	ldrb	r3, [r7, #15]
   12b48:	4413      	add	r3, r2
   12b4a:	781a      	ldrb	r2, [r3, #0]
   12b4c:	687b      	ldr	r3, [r7, #4]
   12b4e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12b52:	6879      	ldr	r1, [r7, #4]
   12b54:	3332      	adds	r3, #50	; 0x32
   12b56:	009b      	lsls	r3, r3, #2
   12b58:	440b      	add	r3, r1
   12b5a:	6859      	ldr	r1, [r3, #4]
   12b5c:	7bfb      	ldrb	r3, [r7, #15]
   12b5e:	3301      	adds	r3, #1
   12b60:	440b      	add	r3, r1
   12b62:	781b      	ldrb	r3, [r3, #0]
   12b64:	429a      	cmp	r2, r3
   12b66:	d104      	bne.n	12b72 <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
   12b68:	687b      	ldr	r3, [r7, #4]
   12b6a:	2200      	movs	r2, #0
   12b6c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   12b70:	e004      	b.n	12b7c <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
   12b72:	687b      	ldr	r3, [r7, #4]
   12b74:	2201      	movs	r2, #1
   12b76:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
   12b7a:	e003      	b.n	12b84 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   12b7c:	7bfb      	ldrb	r3, [r7, #15]
   12b7e:	3301      	adds	r3, #1
   12b80:	73fb      	strb	r3, [r7, #15]
   12b82:	e7d5      	b.n	12b30 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   12b84:	687b      	ldr	r3, [r7, #4]
   12b86:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12b8a:	b2db      	uxtb	r3, r3
   12b8c:	461a      	mov	r2, r3
   12b8e:	687b      	ldr	r3, [r7, #4]
   12b90:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   12b94:	4013      	ands	r3, r2
   12b96:	2b00      	cmp	r3, #0
   12b98:	bf14      	ite	ne
   12b9a:	2301      	movne	r3, #1
   12b9c:	2300      	moveq	r3, #0
   12b9e:	b2da      	uxtb	r2, r3
   12ba0:	687b      	ldr	r3, [r7, #4]
   12ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
   12ba6:	687b      	ldr	r3, [r7, #4]
   12ba8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12bac:	b2db      	uxtb	r3, r3
	
}
   12bae:	4618      	mov	r0, r3
   12bb0:	3714      	adds	r7, #20
   12bb2:	46bd      	mov	sp, r7
   12bb4:	bc80      	pop	{r7}
   12bb6:	4770      	bx	lr

00012bb8 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   12bb8:	b580      	push	{r7, lr}
   12bba:	b082      	sub	sp, #8
   12bbc:	af00      	add	r7, sp, #0
   12bbe:	6078      	str	r0, [r7, #4]
		if (closing)
   12bc0:	687b      	ldr	r3, [r7, #4]
   12bc2:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12bc6:	2b00      	cmp	r3, #0
   12bc8:	d003      	beq.n	12bd2 <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   12bca:	687b      	ldr	r3, [r7, #4]
   12bcc:	2200      	movs	r2, #0
   12bce:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
   12bd2:	6878      	ldr	r0, [r7, #4]
   12bd4:	4b17      	ldr	r3, [pc, #92]	; (12c34 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   12bd6:	4798      	blx	r3
		if (valve_ID==0)
   12bd8:	687b      	ldr	r3, [r7, #4]
   12bda:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12bde:	2b00      	cmp	r3, #0
   12be0:	d108      	bne.n	12bf4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   12be2:	4915      	ldr	r1, [pc, #84]	; (12c38 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   12be4:	4815      	ldr	r0, [pc, #84]	; (12c3c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12be6:	4b16      	ldr	r3, [pc, #88]	; (12c40 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12be8:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   12bea:	4916      	ldr	r1, [pc, #88]	; (12c44 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   12bec:	4813      	ldr	r0, [pc, #76]	; (12c3c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12bee:	4b14      	ldr	r3, [pc, #80]	; (12c40 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12bf0:	4798      	blx	r3
   12bf2:	e007      	b.n	12c04 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   12bf4:	4914      	ldr	r1, [pc, #80]	; (12c48 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   12bf6:	4811      	ldr	r0, [pc, #68]	; (12c3c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12bf8:	4b11      	ldr	r3, [pc, #68]	; (12c40 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12bfa:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   12bfc:	4913      	ldr	r1, [pc, #76]	; (12c4c <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   12bfe:	480f      	ldr	r0, [pc, #60]	; (12c3c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12c00:	4b0f      	ldr	r3, [pc, #60]	; (12c40 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12c02:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	2200      	movs	r2, #0
   12c08:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   12c0c:	687b      	ldr	r3, [r7, #4]
   12c0e:	2200      	movs	r2, #0
   12c10:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
   12c14:	687b      	ldr	r3, [r7, #4]
   12c16:	2200      	movs	r2, #0
   12c18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
   12c1c:	687b      	ldr	r3, [r7, #4]
   12c1e:	2200      	movs	r2, #0
   12c20:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
   12c24:	687b      	ldr	r3, [r7, #4]
   12c26:	2200      	movs	r2, #0
   12c28:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   12c2c:	bf00      	nop
   12c2e:	3708      	adds	r7, #8
   12c30:	46bd      	mov	sp, r7
   12c32:	bd80      	pop	{r7, pc}
   12c34:	00012ae5 	.word	0x00012ae5
   12c38:	00012051 	.word	0x00012051
   12c3c:	2000543c 	.word	0x2000543c
   12c40:	0001035d 	.word	0x0001035d
   12c44:	000120a9 	.word	0x000120a9
   12c48:	0001207d 	.word	0x0001207d
   12c4c:	000120c9 	.word	0x000120c9

00012c50 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   12c50:	b580      	push	{r7, lr}
   12c52:	b082      	sub	sp, #8
   12c54:	af00      	add	r7, sp, #0
   12c56:	6078      	str	r0, [r7, #4]
		StopMotor();
   12c58:	6878      	ldr	r0, [r7, #4]
   12c5a:	4b0c      	ldr	r3, [pc, #48]	; (12c8c <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
   12c5c:	4798      	blx	r3
		RemoveTimeoutTask();
   12c5e:	6878      	ldr	r0, [r7, #4]
   12c60:	4b0b      	ldr	r3, [pc, #44]	; (12c90 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   12c62:	4798      	blx	r3
		timeoutFlapperValveController=false;
   12c64:	687b      	ldr	r3, [r7, #4]
   12c66:	2200      	movs	r2, #0
   12c68:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
   12c6c:	687b      	ldr	r3, [r7, #4]
   12c6e:	2200      	movs	r2, #0
   12c70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
   12c74:	687b      	ldr	r3, [r7, #4]
   12c76:	2200      	movs	r2, #0
   12c78:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
   12c7c:	687b      	ldr	r3, [r7, #4]
   12c7e:	2201      	movs	r2, #1
   12c80:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   12c84:	bf00      	nop
   12c86:	3708      	adds	r7, #8
   12c88:	46bd      	mov	sp, r7
   12c8a:	bd80      	pop	{r7, pc}
   12c8c:	00012ae5 	.word	0x00012ae5
   12c90:	000132b1 	.word	0x000132b1

00012c94 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   12c94:	b580      	push	{r7, lr}
   12c96:	b084      	sub	sp, #16
   12c98:	af00      	add	r7, sp, #0
   12c9a:	6078      	str	r0, [r7, #4]
   12c9c:	460b      	mov	r3, r1
   12c9e:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   12ca0:	78fb      	ldrb	r3, [r7, #3]
   12ca2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	dd0c      	ble.n	12cc4 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   12caa:	78fb      	ldrb	r3, [r7, #3]
   12cac:	43db      	mvns	r3, r3
   12cae:	009b      	lsls	r3, r3, #2
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	da00      	bge.n	12cb6 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   12cb4:	33ff      	adds	r3, #255	; 0xff
   12cb6:	121b      	asrs	r3, r3, #8
   12cb8:	461a      	mov	r2, r3
   12cba:	4b10      	ldr	r3, [pc, #64]	; (12cfc <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   12cbc:	4610      	mov	r0, r2
   12cbe:	4798      	blx	r3
   12cc0:	4603      	mov	r3, r0
   12cc2:	e00b      	b.n	12cdc <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   12cc4:	78fb      	ldrb	r3, [r7, #3]
   12cc6:	3bff      	subs	r3, #255	; 0xff
   12cc8:	009b      	lsls	r3, r3, #2
   12cca:	2b00      	cmp	r3, #0
   12ccc:	da00      	bge.n	12cd0 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   12cce:	33ff      	adds	r3, #255	; 0xff
   12cd0:	121b      	asrs	r3, r3, #8
   12cd2:	461a      	mov	r2, r3
   12cd4:	4b09      	ldr	r3, [pc, #36]	; (12cfc <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   12cd6:	4610      	mov	r0, r2
   12cd8:	4798      	blx	r3
   12cda:	4603      	mov	r3, r0
   12cdc:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   12cde:	4b08      	ldr	r3, [pc, #32]	; (12d00 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
   12ce0:	68f8      	ldr	r0, [r7, #12]
   12ce2:	4798      	blx	r3
   12ce4:	4603      	mov	r3, r0
   12ce6:	b2da      	uxtb	r2, r3
   12ce8:	687b      	ldr	r3, [r7, #4]
   12cea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return tolerance;
   12cee:	687b      	ldr	r3, [r7, #4]
   12cf0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
   12cf4:	4618      	mov	r0, r3
   12cf6:	3710      	adds	r7, #16
   12cf8:	46bd      	mov	sp, r7
   12cfa:	bd80      	pop	{r7, pc}
   12cfc:	0001a139 	.word	0x0001a139
   12d00:	0001a481 	.word	0x0001a481

00012d04 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   12d04:	b580      	push	{r7, lr}
   12d06:	b082      	sub	sp, #8
   12d08:	af00      	add	r7, sp, #0
   12d0a:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   12d16:	2b00      	cmp	r3, #0
   12d18:	d009      	beq.n	12d2e <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
   12d1a:	687b      	ldr	r3, [r7, #4]
   12d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d20:	2100      	movs	r1, #0
   12d22:	4618      	mov	r0, r3
   12d24:	4b0a      	ldr	r3, [pc, #40]	; (12d50 <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   12d26:	4798      	blx	r3
		delay_ms(10);
   12d28:	200a      	movs	r0, #10
   12d2a:	4b0a      	ldr	r3, [pc, #40]	; (12d54 <_ZN22FlapperValveController10StartMotorEv+0x50>)
   12d2c:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   12d2e:	687b      	ldr	r3, [r7, #4]
   12d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d34:	2101      	movs	r1, #1
   12d36:	4618      	mov	r0, r3
   12d38:	4b05      	ldr	r3, [pc, #20]	; (12d50 <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   12d3a:	4798      	blx	r3
	flapperValveIsMoving=true;
   12d3c:	687b      	ldr	r3, [r7, #4]
   12d3e:	2201      	movs	r2, #1
   12d40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
   12d44:	2300      	movs	r3, #0
}
   12d46:	4618      	mov	r0, r3
   12d48:	3708      	adds	r7, #8
   12d4a:	46bd      	mov	sp, r7
   12d4c:	bd80      	pop	{r7, pc}
   12d4e:	bf00      	nop
   12d50:	000136f9 	.word	0x000136f9
   12d54:	00003561 	.word	0x00003561

00012d58 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   12d58:	b580      	push	{r7, lr}
   12d5a:	b082      	sub	sp, #8
   12d5c:	af00      	add	r7, sp, #0
   12d5e:	6078      	str	r0, [r7, #4]
	StopMotor();
   12d60:	6878      	ldr	r0, [r7, #4]
   12d62:	4b0d      	ldr	r3, [pc, #52]	; (12d98 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   12d64:	4798      	blx	r3
	timeoutKeepControlling=false;
   12d66:	687b      	ldr	r3, [r7, #4]
   12d68:	2200      	movs	r2, #0
   12d6a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	timeoutFlapperValveController=false;
   12d6e:	687b      	ldr	r3, [r7, #4]
   12d70:	2200      	movs	r2, #0
   12d72:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	isControlling=false;
   12d76:	687b      	ldr	r3, [r7, #4]
   12d78:	2200      	movs	r2, #0
   12d7a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	keepControlling=false;
   12d7e:	687b      	ldr	r3, [r7, #4]
   12d80:	2200      	movs	r2, #0
   12d82:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	controllerEnabled=false;
   12d86:	687b      	ldr	r3, [r7, #4]
   12d88:	2200      	movs	r2, #0
   12d8a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	return 0;
   12d8e:	2300      	movs	r3, #0
}
   12d90:	4618      	mov	r0, r3
   12d92:	3708      	adds	r7, #8
   12d94:	46bd      	mov	sp, r7
   12d96:	bd80      	pop	{r7, pc}
   12d98:	00012ae5 	.word	0x00012ae5

00012d9c <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   12d9c:	b580      	push	{r7, lr}
   12d9e:	b082      	sub	sp, #8
   12da0:	af00      	add	r7, sp, #0
   12da2:	6078      	str	r0, [r7, #4]
   12da4:	460b      	mov	r3, r1
   12da6:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   12da8:	78fb      	ldrb	r3, [r7, #3]
   12daa:	4619      	mov	r1, r3
   12dac:	6878      	ldr	r0, [r7, #4]
   12dae:	4b2b      	ldr	r3, [pc, #172]	; (12e5c <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   12db0:	4798      	blx	r3
   12db2:	4603      	mov	r3, r0
   12db4:	461a      	mov	r2, r3
   12db6:	687b      	ldr	r3, [r7, #4]
   12db8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
   12dbc:	687b      	ldr	r3, [r7, #4]
   12dbe:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12dc2:	4619      	mov	r1, r3
   12dc4:	6878      	ldr	r0, [r7, #4]
   12dc6:	4b26      	ldr	r3, [pc, #152]	; (12e60 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   12dc8:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   12dca:	687b      	ldr	r3, [r7, #4]
   12dcc:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   12dd0:	4b24      	ldr	r3, [pc, #144]	; (12e64 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   12dd2:	4610      	mov	r0, r2
   12dd4:	4798      	blx	r3
   12dd6:	4602      	mov	r2, r0
   12dd8:	687b      	ldr	r3, [r7, #4]
   12dda:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
   12dde:	687b      	ldr	r3, [r7, #4]
   12de0:	2200      	movs	r2, #0
   12de2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   12de6:	687b      	ldr	r3, [r7, #4]
   12de8:	2200      	movs	r2, #0
   12dea:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
   12dee:	687b      	ldr	r3, [r7, #4]
   12df0:	2200      	movs	r2, #0
   12df2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
   12df6:	687b      	ldr	r3, [r7, #4]
   12df8:	2201      	movs	r2, #1
   12dfa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
   12dfe:	687b      	ldr	r3, [r7, #4]
   12e00:	2200      	movs	r2, #0
   12e02:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
   12e06:	687b      	ldr	r3, [r7, #4]
   12e08:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d106      	bne.n	12e1e <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   12e10:	f242 7210 	movw	r2, #10000	; 0x2710
   12e14:	4914      	ldr	r1, [pc, #80]	; (12e68 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   12e16:	4815      	ldr	r0, [pc, #84]	; (12e6c <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   12e18:	4b15      	ldr	r3, [pc, #84]	; (12e70 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   12e1a:	4798      	blx	r3
   12e1c:	e005      	b.n	12e2a <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   12e1e:	f242 7210 	movw	r2, #10000	; 0x2710
   12e22:	4914      	ldr	r1, [pc, #80]	; (12e74 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   12e24:	4811      	ldr	r0, [pc, #68]	; (12e6c <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   12e26:	4b12      	ldr	r3, [pc, #72]	; (12e70 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   12e28:	4798      	blx	r3
		}
		
		isControlling=true;
   12e2a:	687b      	ldr	r3, [r7, #4]
   12e2c:	2201      	movs	r2, #1
   12e2e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   12e32:	6878      	ldr	r0, [r7, #4]
   12e34:	4b10      	ldr	r3, [pc, #64]	; (12e78 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   12e36:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   12e38:	6878      	ldr	r0, [r7, #4]
   12e3a:	4b10      	ldr	r3, [pc, #64]	; (12e7c <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   12e3c:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   12e3e:	687b      	ldr	r3, [r7, #4]
   12e40:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   12e44:	b2db      	uxtb	r3, r3
   12e46:	2b00      	cmp	r3, #0
   12e48:	d003      	beq.n	12e52 <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
   12e4a:	687b      	ldr	r3, [r7, #4]
   12e4c:	2201      	movs	r2, #1
   12e4e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
   12e52:	2300      	movs	r3, #0
	
}
   12e54:	4618      	mov	r0, r3
   12e56:	3708      	adds	r7, #8
   12e58:	46bd      	mov	sp, r7
   12e5a:	bd80      	pop	{r7, pc}
   12e5c:	00012e81 	.word	0x00012e81
   12e60:	00012c95 	.word	0x00012c95
   12e64:	0001a131 	.word	0x0001a131
   12e68:	00012051 	.word	0x00012051
   12e6c:	2000543c 	.word	0x2000543c
   12e70:	000103b5 	.word	0x000103b5
   12e74:	0001207d 	.word	0x0001207d
   12e78:	000122cd 	.word	0x000122cd
   12e7c:	000126a5 	.word	0x000126a5

00012e80 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   12e80:	b580      	push	{r7, lr}
   12e82:	b082      	sub	sp, #8
   12e84:	af00      	add	r7, sp, #0
   12e86:	6078      	str	r0, [r7, #4]
   12e88:	460b      	mov	r3, r1
   12e8a:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   12e8c:	6878      	ldr	r0, [r7, #4]
   12e8e:	4b2a      	ldr	r3, [pc, #168]	; (12f38 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   12e90:	4798      	blx	r3
   12e92:	4603      	mov	r3, r0
   12e94:	2b00      	cmp	r3, #0
   12e96:	d004      	beq.n	12ea2 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   12e98:	687b      	ldr	r3, [r7, #4]
   12e9a:	78fa      	ldrb	r2, [r7, #3]
   12e9c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   12ea0:	e043      	b.n	12f2a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12ea8:	2b00      	cmp	r3, #0
   12eaa:	d01f      	beq.n	12eec <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   12eb2:	43db      	mvns	r3, r3
   12eb4:	b2da      	uxtb	r2, r3
   12eb6:	687b      	ldr	r3, [r7, #4]
   12eb8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
   12ebc:	78fb      	ldrb	r3, [r7, #3]
   12ebe:	687a      	ldr	r2, [r7, #4]
   12ec0:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
   12ec4:	4293      	cmp	r3, r2
   12ec6:	dd0c      	ble.n	12ee2 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   12ec8:	687b      	ldr	r3, [r7, #4]
   12eca:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   12ece:	687b      	ldr	r3, [r7, #4]
   12ed0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
   12ed4:	687b      	ldr	r3, [r7, #4]
   12ed6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   12eda:	687b      	ldr	r3, [r7, #4]
   12edc:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   12ee0:	e023      	b.n	12f2a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   12ee2:	687b      	ldr	r3, [r7, #4]
   12ee4:	78fa      	ldrb	r2, [r7, #3]
   12ee6:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   12eea:	e01e      	b.n	12f2a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   12eec:	687b      	ldr	r3, [r7, #4]
   12eee:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   12ef2:	43db      	mvns	r3, r3
   12ef4:	b2da      	uxtb	r2, r3
   12ef6:	687b      	ldr	r3, [r7, #4]
   12ef8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
   12efc:	78fb      	ldrb	r3, [r7, #3]
   12efe:	687a      	ldr	r2, [r7, #4]
   12f00:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
   12f04:	4293      	cmp	r3, r2
   12f06:	dd0c      	ble.n	12f22 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   12f08:	687b      	ldr	r3, [r7, #4]
   12f0a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   12f0e:	687b      	ldr	r3, [r7, #4]
   12f10:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
   12f14:	687b      	ldr	r3, [r7, #4]
   12f16:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   12f1a:	687b      	ldr	r3, [r7, #4]
   12f1c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   12f20:	e003      	b.n	12f2a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   12f22:	687b      	ldr	r3, [r7, #4]
   12f24:	78fa      	ldrb	r2, [r7, #3]
   12f26:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
   12f2a:	687b      	ldr	r3, [r7, #4]
   12f2c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
   12f30:	4618      	mov	r0, r3
   12f32:	3708      	adds	r7, #8
   12f34:	46bd      	mov	sp, r7
   12f36:	bd80      	pop	{r7, pc}
   12f38:	00012a9d 	.word	0x00012a9d

00012f3c <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   12f3c:	b580      	push	{r7, lr}
   12f3e:	b082      	sub	sp, #8
   12f40:	af00      	add	r7, sp, #0
   12f42:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   12f44:	687b      	ldr	r3, [r7, #4]
   12f46:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12f4a:	4619      	mov	r1, r3
   12f4c:	6878      	ldr	r0, [r7, #4]
   12f4e:	4b03      	ldr	r3, [pc, #12]	; (12f5c <_ZN22FlapperValveController16StartControllingEv+0x20>)
   12f50:	4798      	blx	r3
   12f52:	4603      	mov	r3, r0
	
}
   12f54:	4618      	mov	r0, r3
   12f56:	3708      	adds	r7, #8
   12f58:	46bd      	mov	sp, r7
   12f5a:	bd80      	pop	{r7, pc}
   12f5c:	00012d9d 	.word	0x00012d9d

00012f60 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   12f60:	b580      	push	{r7, lr}
   12f62:	b082      	sub	sp, #8
   12f64:	af00      	add	r7, sp, #0
   12f66:	6078      	str	r0, [r7, #4]
   12f68:	460b      	mov	r3, r1
   12f6a:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   12f6c:	687b      	ldr	r3, [r7, #4]
   12f6e:	2200      	movs	r2, #0
   12f70:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	2201      	movs	r2, #1
   12f78:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   12f7c:	6878      	ldr	r0, [r7, #4]
   12f7e:	4b05      	ldr	r3, [pc, #20]	; (12f94 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   12f80:	4798      	blx	r3
		keepControlling=false;
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	2200      	movs	r2, #0
   12f86:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
   12f8a:	2300      	movs	r3, #0
	
}
   12f8c:	4618      	mov	r0, r3
   12f8e:	3708      	adds	r7, #8
   12f90:	46bd      	mov	sp, r7
   12f92:	bd80      	pop	{r7, pc}
   12f94:	000122cd 	.word	0x000122cd

00012f98 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   12f98:	b590      	push	{r4, r7, lr}
   12f9a:	b085      	sub	sp, #20
   12f9c:	af00      	add	r7, sp, #0
   12f9e:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   12fa0:	68fb      	ldr	r3, [r7, #12]
   12fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12fa6:	4618      	mov	r0, r3
   12fa8:	4b36      	ldr	r3, [pc, #216]	; (13084 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
   12faa:	4798      	blx	r3
   12fac:	4603      	mov	r3, r0
   12fae:	461a      	mov	r2, r3
   12fb0:	68fb      	ldr	r3, [r7, #12]
   12fb2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   12fbc:	68fb      	ldr	r3, [r7, #12]
   12fbe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
   12fc2:	68fb      	ldr	r3, [r7, #12]
   12fc4:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   12fc8:	68fb      	ldr	r3, [r7, #12]
   12fca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   12fce:	68fb      	ldr	r3, [r7, #12]
   12fd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   12fd4:	68fc      	ldr	r4, [r7, #12]
   12fd6:	463b      	mov	r3, r7
   12fd8:	4611      	mov	r1, r2
   12fda:	4618      	mov	r0, r3
   12fdc:	4b2a      	ldr	r3, [pc, #168]	; (13088 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
   12fde:	4798      	blx	r3
   12fe0:	f104 0384 	add.w	r3, r4, #132	; 0x84
   12fe4:	463a      	mov	r2, r7
   12fe6:	6810      	ldr	r0, [r2, #0]
   12fe8:	6018      	str	r0, [r3, #0]
   12fea:	8892      	ldrh	r2, [r2, #4]
   12fec:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   12fee:	68fb      	ldr	r3, [r7, #12]
   12ff0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   12ff4:	68fc      	ldr	r4, [r7, #12]
   12ff6:	463b      	mov	r3, r7
   12ff8:	4611      	mov	r1, r2
   12ffa:	4618      	mov	r0, r3
   12ffc:	4b23      	ldr	r3, [pc, #140]	; (1308c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
   12ffe:	4798      	blx	r3
   13000:	f104 038a 	add.w	r3, r4, #138	; 0x8a
   13004:	463a      	mov	r2, r7
   13006:	6811      	ldr	r1, [r2, #0]
   13008:	6852      	ldr	r2, [r2, #4]
   1300a:	6019      	str	r1, [r3, #0]
   1300c:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   1300e:	68fb      	ldr	r3, [r7, #12]
   13010:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   13014:	b2da      	uxtb	r2, r3
   13016:	68fb      	ldr	r3, [r7, #12]
   13018:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
   1301c:	68fb      	ldr	r3, [r7, #12]
   1301e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   13022:	68fb      	ldr	r3, [r7, #12]
   13024:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   13028:	68fb      	ldr	r3, [r7, #12]
   1302a:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   1302e:	68fb      	ldr	r3, [r7, #12]
   13030:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
   13034:	68fb      	ldr	r3, [r7, #12]
   13036:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1303a:	b2da      	uxtb	r2, r3
   1303c:	68fb      	ldr	r3, [r7, #12]
   1303e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
   13042:	68fb      	ldr	r3, [r7, #12]
   13044:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   13048:	2b00      	cmp	r3, #0
   1304a:	d008      	beq.n	1305e <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   1304c:	68fb      	ldr	r3, [r7, #12]
   1304e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   13052:	43db      	mvns	r3, r3
   13054:	b2da      	uxtb	r2, r3
   13056:	68fb      	ldr	r3, [r7, #12]
   13058:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   1305c:	e007      	b.n	1306e <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   1305e:	68fb      	ldr	r3, [r7, #12]
   13060:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   13064:	43db      	mvns	r3, r3
   13066:	b2da      	uxtb	r2, r3
   13068:	68fb      	ldr	r3, [r7, #12]
   1306a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
   1306e:	68fb      	ldr	r3, [r7, #12]
   13070:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   13074:	4619      	mov	r1, r3
   13076:	68f8      	ldr	r0, [r7, #12]
   13078:	4b05      	ldr	r3, [pc, #20]	; (13090 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
   1307a:	4798      	blx	r3
}
   1307c:	bf00      	nop
   1307e:	3714      	adds	r7, #20
   13080:	46bd      	mov	sp, r7
   13082:	bd90      	pop	{r4, r7, pc}
   13084:	00013919 	.word	0x00013919
   13088:	0001369d 	.word	0x0001369d
   1308c:	00013645 	.word	0x00013645
   13090:	00013095 	.word	0x00013095

00013094 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   13094:	b480      	push	{r7}
   13096:	b085      	sub	sp, #20
   13098:	af00      	add	r7, sp, #0
   1309a:	6078      	str	r0, [r7, #4]
   1309c:	460b      	mov	r3, r1
   1309e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   130a0:	2300      	movs	r3, #0
   130a2:	73fb      	strb	r3, [r7, #15]
   130a4:	7bfb      	ldrb	r3, [r7, #15]
   130a6:	2b0e      	cmp	r3, #14
   130a8:	dc1d      	bgt.n	130e6 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   130aa:	687b      	ldr	r3, [r7, #4]
   130ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	3332      	adds	r3, #50	; 0x32
   130b4:	009b      	lsls	r3, r3, #2
   130b6:	4413      	add	r3, r2
   130b8:	685b      	ldr	r3, [r3, #4]
   130ba:	7bfa      	ldrb	r2, [r7, #15]
   130bc:	f1c2 020f 	rsb	r2, r2, #15
   130c0:	441a      	add	r2, r3
   130c2:	687b      	ldr	r3, [r7, #4]
   130c4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   130c8:	6879      	ldr	r1, [r7, #4]
   130ca:	3332      	adds	r3, #50	; 0x32
   130cc:	009b      	lsls	r3, r3, #2
   130ce:	440b      	add	r3, r1
   130d0:	685b      	ldr	r3, [r3, #4]
   130d2:	7bf9      	ldrb	r1, [r7, #15]
   130d4:	f1c1 010e 	rsb	r1, r1, #14
   130d8:	440b      	add	r3, r1
   130da:	781b      	ldrb	r3, [r3, #0]
   130dc:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   130de:	7bfb      	ldrb	r3, [r7, #15]
   130e0:	3301      	adds	r3, #1
   130e2:	73fb      	strb	r3, [r7, #15]
   130e4:	e7de      	b.n	130a4 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   130e6:	687b      	ldr	r3, [r7, #4]
   130e8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   130ec:	687a      	ldr	r2, [r7, #4]
   130ee:	3332      	adds	r3, #50	; 0x32
   130f0:	009b      	lsls	r3, r3, #2
   130f2:	4413      	add	r3, r2
   130f4:	685b      	ldr	r3, [r3, #4]
   130f6:	78fa      	ldrb	r2, [r7, #3]
   130f8:	701a      	strb	r2, [r3, #0]
}
   130fa:	bf00      	nop
   130fc:	3714      	adds	r7, #20
   130fe:	46bd      	mov	sp, r7
   13100:	bc80      	pop	{r7}
   13102:	4770      	bx	lr

00013104 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   13104:	b580      	push	{r7, lr}
   13106:	b084      	sub	sp, #16
   13108:	af00      	add	r7, sp, #0
   1310a:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   1310c:	23b4      	movs	r3, #180	; 0xb4
   1310e:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   13110:	687b      	ldr	r3, [r7, #4]
   13112:	4a59      	ldr	r2, [pc, #356]	; (13278 <_ZN22FlapperValveController8SelftestEv+0x174>)
   13114:	33c7      	adds	r3, #199	; 0xc7
   13116:	8812      	ldrh	r2, [r2, #0]
   13118:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   1311a:	6878      	ldr	r0, [r7, #4]
   1311c:	4b57      	ldr	r3, [pc, #348]	; (1327c <_ZN22FlapperValveController8SelftestEv+0x178>)
   1311e:	4798      	blx	r3
	singlefv->SetEnable(false);
   13120:	687b      	ldr	r3, [r7, #4]
   13122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13126:	2100      	movs	r1, #0
   13128:	4618      	mov	r0, r3
   1312a:	4b55      	ldr	r3, [pc, #340]	; (13280 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   1312c:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13134:	2100      	movs	r1, #0
   13136:	4618      	mov	r0, r3
   13138:	4b52      	ldr	r3, [pc, #328]	; (13284 <_ZN22FlapperValveController8SelftestEv+0x180>)
   1313a:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   1313c:	687b      	ldr	r3, [r7, #4]
   1313e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13142:	2100      	movs	r1, #0
   13144:	4618      	mov	r0, r3
   13146:	4b50      	ldr	r3, [pc, #320]	; (13288 <_ZN22FlapperValveController8SelftestEv+0x184>)
   13148:	4798      	blx	r3
	delay_ms(10);
   1314a:	200a      	movs	r0, #10
   1314c:	4b4f      	ldr	r3, [pc, #316]	; (1328c <_ZN22FlapperValveController8SelftestEv+0x188>)
   1314e:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   13150:	687b      	ldr	r3, [r7, #4]
   13152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13156:	2101      	movs	r1, #1
   13158:	4618      	mov	r0, r3
   1315a:	4b4b      	ldr	r3, [pc, #300]	; (13288 <_ZN22FlapperValveController8SelftestEv+0x184>)
   1315c:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   1315e:	687b      	ldr	r3, [r7, #4]
   13160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13164:	7bba      	ldrb	r2, [r7, #14]
   13166:	4611      	mov	r1, r2
   13168:	4618      	mov	r0, r3
   1316a:	4b49      	ldr	r3, [pc, #292]	; (13290 <_ZN22FlapperValveController8SelftestEv+0x18c>)
   1316c:	4798      	blx	r3
	singlefv->SetDirection(false);
   1316e:	687b      	ldr	r3, [r7, #4]
   13170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13174:	2100      	movs	r1, #0
   13176:	4618      	mov	r0, r3
   13178:	4b46      	ldr	r3, [pc, #280]	; (13294 <_ZN22FlapperValveController8SelftestEv+0x190>)
   1317a:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
   1317c:	687b      	ldr	r3, [r7, #4]
   1317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13182:	4618      	mov	r0, r3
   13184:	4b44      	ldr	r3, [pc, #272]	; (13298 <_ZN22FlapperValveController8SelftestEv+0x194>)
   13186:	4798      	blx	r3
   13188:	4603      	mov	r3, r0
   1318a:	461a      	mov	r2, r3
   1318c:	7bbb      	ldrb	r3, [r7, #14]
   1318e:	429a      	cmp	r2, r3
   13190:	bfcc      	ite	gt
   13192:	2301      	movgt	r3, #1
   13194:	2300      	movle	r3, #0
   13196:	b2db      	uxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d007      	beq.n	131ac <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   131a2:	2101      	movs	r1, #1
   131a4:	4618      	mov	r0, r3
   131a6:	4b3b      	ldr	r3, [pc, #236]	; (13294 <_ZN22FlapperValveController8SelftestEv+0x190>)
   131a8:	4798      	blx	r3
   131aa:	e006      	b.n	131ba <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
   131ac:	687b      	ldr	r3, [r7, #4]
   131ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   131b2:	2100      	movs	r1, #0
   131b4:	4618      	mov	r0, r3
   131b6:	4b37      	ldr	r3, [pc, #220]	; (13294 <_ZN22FlapperValveController8SelftestEv+0x190>)
   131b8:	4798      	blx	r3
	}
	
		if (valve_ID==0)
   131ba:	687b      	ldr	r3, [r7, #4]
   131bc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   131c0:	2b00      	cmp	r3, #0
   131c2:	d106      	bne.n	131d2 <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   131c4:	f242 7210 	movw	r2, #10000	; 0x2710
   131c8:	4934      	ldr	r1, [pc, #208]	; (1329c <_ZN22FlapperValveController8SelftestEv+0x198>)
   131ca:	4835      	ldr	r0, [pc, #212]	; (132a0 <_ZN22FlapperValveController8SelftestEv+0x19c>)
   131cc:	4b35      	ldr	r3, [pc, #212]	; (132a4 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   131ce:	4798      	blx	r3
   131d0:	e005      	b.n	131de <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   131d2:	f242 7210 	movw	r2, #10000	; 0x2710
   131d6:	4934      	ldr	r1, [pc, #208]	; (132a8 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
   131d8:	4831      	ldr	r0, [pc, #196]	; (132a0 <_ZN22FlapperValveController8SelftestEv+0x19c>)
   131da:	4b32      	ldr	r3, [pc, #200]	; (132a4 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   131dc:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
   131de:	687b      	ldr	r3, [r7, #4]
   131e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   131e4:	2101      	movs	r1, #1
   131e6:	4618      	mov	r0, r3
   131e8:	4b25      	ldr	r3, [pc, #148]	; (13280 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   131ea:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
   131ec:	687b      	ldr	r3, [r7, #4]
   131ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   131f2:	4618      	mov	r0, r3
   131f4:	4b28      	ldr	r3, [pc, #160]	; (13298 <_ZN22FlapperValveController8SelftestEv+0x194>)
   131f6:	4798      	blx	r3
   131f8:	4603      	mov	r3, r0
   131fa:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	2200      	movs	r2, #0
   13200:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   13204:	7bfa      	ldrb	r2, [r7, #15]
   13206:	7bbb      	ldrb	r3, [r7, #14]
   13208:	1ad3      	subs	r3, r2, r3
   1320a:	2b00      	cmp	r3, #0
   1320c:	bfb8      	it	lt
   1320e:	425b      	neglt	r3, r3
   13210:	2b0c      	cmp	r3, #12
   13212:	bfcc      	ite	gt
   13214:	2301      	movgt	r3, #1
   13216:	2300      	movle	r3, #0
   13218:	b2db      	uxtb	r3, r3
   1321a:	461a      	mov	r2, r3
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   13222:	b2db      	uxtb	r3, r3
   13224:	f083 0301 	eor.w	r3, r3, #1
   13228:	b2db      	uxtb	r3, r3
   1322a:	4013      	ands	r3, r2
   1322c:	2b00      	cmp	r3, #0
   1322e:	bf14      	ite	ne
   13230:	2301      	movne	r3, #1
   13232:	2300      	moveq	r3, #0
   13234:	b2db      	uxtb	r3, r3
   13236:	2b00      	cmp	r3, #0
   13238:	d008      	beq.n	1324c <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13240:	4618      	mov	r0, r3
   13242:	4b15      	ldr	r3, [pc, #84]	; (13298 <_ZN22FlapperValveController8SelftestEv+0x194>)
   13244:	4798      	blx	r3
   13246:	4603      	mov	r3, r0
   13248:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   1324a:	e7db      	b.n	13204 <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
   1324c:	6878      	ldr	r0, [r7, #4]
   1324e:	4b17      	ldr	r3, [pc, #92]	; (132ac <_ZN22FlapperValveController8SelftestEv+0x1a8>)
   13250:	4798      	blx	r3

	singlefv->SetEnable(false);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13258:	2100      	movs	r1, #0
   1325a:	4618      	mov	r0, r3
   1325c:	4b08      	ldr	r3, [pc, #32]	; (13280 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   1325e:	4798      	blx	r3
	return !timeoutFlapperValveController;
   13260:	687b      	ldr	r3, [r7, #4]
   13262:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   13266:	b2db      	uxtb	r3, r3
   13268:	f083 0301 	eor.w	r3, r3, #1
   1326c:	b2db      	uxtb	r3, r3
}
   1326e:	4618      	mov	r0, r3
   13270:	3710      	adds	r7, #16
   13272:	46bd      	mov	sp, r7
   13274:	bd80      	pop	{r7, pc}
   13276:	bf00      	nop
   13278:	0001bb0c 	.word	0x0001bb0c
   1327c:	00012f99 	.word	0x00012f99
   13280:	000136f9 	.word	0x000136f9
   13284:	00013869 	.word	0x00013869
   13288:	000137f1 	.word	0x000137f1
   1328c:	00003561 	.word	0x00003561
   13290:	000138e1 	.word	0x000138e1
   13294:	00013779 	.word	0x00013779
   13298:	00013919 	.word	0x00013919
   1329c:	00012051 	.word	0x00012051
   132a0:	2000543c 	.word	0x2000543c
   132a4:	000103b5 	.word	0x000103b5
   132a8:	0001207d 	.word	0x0001207d
   132ac:	000132b1 	.word	0x000132b1

000132b0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
   132b0:	b580      	push	{r7, lr}
   132b2:	b082      	sub	sp, #8
   132b4:	af00      	add	r7, sp, #0
   132b6:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   132b8:	687b      	ldr	r3, [r7, #4]
   132ba:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   132be:	2b00      	cmp	r3, #0
   132c0:	d104      	bne.n	132cc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   132c2:	4906      	ldr	r1, [pc, #24]	; (132dc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   132c4:	4806      	ldr	r0, [pc, #24]	; (132e0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   132c6:	4b07      	ldr	r3, [pc, #28]	; (132e4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   132c8:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   132ca:	e003      	b.n	132d4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   132cc:	4906      	ldr	r1, [pc, #24]	; (132e8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   132ce:	4804      	ldr	r0, [pc, #16]	; (132e0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   132d0:	4b04      	ldr	r3, [pc, #16]	; (132e4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   132d2:	4798      	blx	r3
}
   132d4:	bf00      	nop
   132d6:	3708      	adds	r7, #8
   132d8:	46bd      	mov	sp, r7
   132da:	bd80      	pop	{r7, pc}
   132dc:	00012051 	.word	0x00012051
   132e0:	2000543c 	.word	0x2000543c
   132e4:	0001035d 	.word	0x0001035d
   132e8:	0001207d 	.word	0x0001207d

000132ec <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   132ec:	b590      	push	{r4, r7, lr}
   132ee:	b083      	sub	sp, #12
   132f0:	af00      	add	r7, sp, #0
   132f2:	6078      	str	r0, [r7, #4]
   132f4:	4c05      	ldr	r4, [pc, #20]	; (1330c <__tcf_0+0x20>)
   132f6:	4b06      	ldr	r3, [pc, #24]	; (13310 <__tcf_0+0x24>)
   132f8:	429c      	cmp	r4, r3
   132fa:	d004      	beq.n	13306 <__tcf_0+0x1a>
   132fc:	3c78      	subs	r4, #120	; 0x78
   132fe:	4620      	mov	r0, r4
   13300:	4b04      	ldr	r3, [pc, #16]	; (13314 <__tcf_0+0x28>)
   13302:	4798      	blx	r3
   13304:	e7f7      	b.n	132f6 <__tcf_0+0xa>
   13306:	370c      	adds	r7, #12
   13308:	46bd      	mov	sp, r7
   1330a:	bd90      	pop	{r4, r7, pc}
   1330c:	20005614 	.word	0x20005614
   13310:	20005524 	.word	0x20005524
   13314:	000134e5 	.word	0x000134e5

00013318 <_Z41__static_initialization_and_destruction_0ii>:

   13318:	b5b0      	push	{r4, r5, r7, lr}
   1331a:	b082      	sub	sp, #8
   1331c:	af00      	add	r7, sp, #0
   1331e:	6078      	str	r0, [r7, #4]
   13320:	6039      	str	r1, [r7, #0]
   13322:	687b      	ldr	r3, [r7, #4]
   13324:	2b01      	cmp	r3, #1
   13326:	d16d      	bne.n	13404 <_Z41__static_initialization_and_destruction_0ii+0xec>
   13328:	683b      	ldr	r3, [r7, #0]
   1332a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1332e:	4293      	cmp	r3, r2
   13330:	d168      	bne.n	13404 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   13332:	4936      	ldr	r1, [pc, #216]	; (1340c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   13334:	4836      	ldr	r0, [pc, #216]	; (13410 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13336:	4b37      	ldr	r3, [pc, #220]	; (13414 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   13338:	4798      	blx	r3
   1333a:	4a37      	ldr	r2, [pc, #220]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1333c:	4937      	ldr	r1, [pc, #220]	; (1341c <_Z41__static_initialization_and_destruction_0ii+0x104>)
   1333e:	4834      	ldr	r0, [pc, #208]	; (13410 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13340:	4b37      	ldr	r3, [pc, #220]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13342:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   13344:	4937      	ldr	r1, [pc, #220]	; (13424 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   13346:	4838      	ldr	r0, [pc, #224]	; (13428 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13348:	4b38      	ldr	r3, [pc, #224]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1334a:	4798      	blx	r3
   1334c:	4a32      	ldr	r2, [pc, #200]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1334e:	4938      	ldr	r1, [pc, #224]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13350:	4835      	ldr	r0, [pc, #212]	; (13428 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13352:	4b33      	ldr	r3, [pc, #204]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13354:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13356:	4937      	ldr	r1, [pc, #220]	; (13434 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13358:	4837      	ldr	r0, [pc, #220]	; (13438 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1335a:	4b34      	ldr	r3, [pc, #208]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1335c:	4798      	blx	r3
   1335e:	4a2e      	ldr	r2, [pc, #184]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13360:	4933      	ldr	r1, [pc, #204]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13362:	4835      	ldr	r0, [pc, #212]	; (13438 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13364:	4b2e      	ldr	r3, [pc, #184]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13366:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13368:	4934      	ldr	r1, [pc, #208]	; (1343c <_Z41__static_initialization_and_destruction_0ii+0x124>)
   1336a:	4835      	ldr	r0, [pc, #212]	; (13440 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   1336c:	4b2f      	ldr	r3, [pc, #188]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1336e:	4798      	blx	r3
   13370:	4a29      	ldr	r2, [pc, #164]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13372:	492f      	ldr	r1, [pc, #188]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13374:	4832      	ldr	r0, [pc, #200]	; (13440 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13376:	4b2a      	ldr	r3, [pc, #168]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13378:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1337a:	4932      	ldr	r1, [pc, #200]	; (13444 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1337c:	4832      	ldr	r0, [pc, #200]	; (13448 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1337e:	4b2b      	ldr	r3, [pc, #172]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13380:	4798      	blx	r3
   13382:	4a25      	ldr	r2, [pc, #148]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13384:	492a      	ldr	r1, [pc, #168]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13386:	4830      	ldr	r0, [pc, #192]	; (13448 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13388:	4b25      	ldr	r3, [pc, #148]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1338a:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1338c:	492f      	ldr	r1, [pc, #188]	; (1344c <_Z41__static_initialization_and_destruction_0ii+0x134>)
   1338e:	4830      	ldr	r0, [pc, #192]	; (13450 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13390:	4b26      	ldr	r3, [pc, #152]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13392:	4798      	blx	r3
   13394:	4a20      	ldr	r2, [pc, #128]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13396:	4926      	ldr	r1, [pc, #152]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13398:	482d      	ldr	r0, [pc, #180]	; (13450 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   1339a:	4b21      	ldr	r3, [pc, #132]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1339c:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1339e:	492d      	ldr	r1, [pc, #180]	; (13454 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   133a0:	482d      	ldr	r0, [pc, #180]	; (13458 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   133a2:	4b22      	ldr	r3, [pc, #136]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   133a4:	4798      	blx	r3
   133a6:	4a1c      	ldr	r2, [pc, #112]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   133a8:	4921      	ldr	r1, [pc, #132]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   133aa:	482b      	ldr	r0, [pc, #172]	; (13458 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   133ac:	4b1c      	ldr	r3, [pc, #112]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   133ae:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   133b0:	492a      	ldr	r1, [pc, #168]	; (1345c <_Z41__static_initialization_and_destruction_0ii+0x144>)
   133b2:	482b      	ldr	r0, [pc, #172]	; (13460 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   133b4:	4b1d      	ldr	r3, [pc, #116]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   133b6:	4798      	blx	r3
   133b8:	4a17      	ldr	r2, [pc, #92]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   133ba:	491d      	ldr	r1, [pc, #116]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   133bc:	4828      	ldr	r0, [pc, #160]	; (13460 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   133be:	4b18      	ldr	r3, [pc, #96]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   133c0:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   133c2:	4928      	ldr	r1, [pc, #160]	; (13464 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   133c4:	4828      	ldr	r0, [pc, #160]	; (13468 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   133c6:	4b19      	ldr	r3, [pc, #100]	; (1342c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   133c8:	4798      	blx	r3
   133ca:	4a13      	ldr	r2, [pc, #76]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   133cc:	4918      	ldr	r1, [pc, #96]	; (13430 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   133ce:	4826      	ldr	r0, [pc, #152]	; (13468 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   133d0:	4b13      	ldr	r3, [pc, #76]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   133d2:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   133d4:	4b25      	ldr	r3, [pc, #148]	; (1346c <_Z41__static_initialization_and_destruction_0ii+0x154>)
   133d6:	2401      	movs	r4, #1
   133d8:	461d      	mov	r5, r3
   133da:	2c00      	cmp	r4, #0
   133dc:	db05      	blt.n	133ea <_Z41__static_initialization_and_destruction_0ii+0xd2>
   133de:	4628      	mov	r0, r5
   133e0:	4b23      	ldr	r3, [pc, #140]	; (13470 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   133e2:	4798      	blx	r3
   133e4:	3578      	adds	r5, #120	; 0x78
   133e6:	3c01      	subs	r4, #1
   133e8:	e7f7      	b.n	133da <_Z41__static_initialization_and_destruction_0ii+0xc2>
   133ea:	4a0b      	ldr	r2, [pc, #44]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   133ec:	4921      	ldr	r1, [pc, #132]	; (13474 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   133ee:	2000      	movs	r0, #0
   133f0:	4b0b      	ldr	r3, [pc, #44]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   133f2:	4798      	blx	r3
   133f4:	4820      	ldr	r0, [pc, #128]	; (13478 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   133f6:	4b21      	ldr	r3, [pc, #132]	; (1347c <_Z41__static_initialization_and_destruction_0ii+0x164>)
   133f8:	4798      	blx	r3
   133fa:	4a07      	ldr	r2, [pc, #28]	; (13418 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   133fc:	4920      	ldr	r1, [pc, #128]	; (13480 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   133fe:	481e      	ldr	r0, [pc, #120]	; (13478 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13400:	4b07      	ldr	r3, [pc, #28]	; (13420 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13402:	4798      	blx	r3
   13404:	bf00      	nop
   13406:	3708      	adds	r7, #8
   13408:	46bd      	mov	sp, r7
   1340a:	bdb0      	pop	{r4, r5, r7, pc}
   1340c:	2000dfe0 	.word	0x2000dfe0
   13410:	200053e4 	.word	0x200053e4
   13414:	0000fa29 	.word	0x0000fa29
   13418:	20000000 	.word	0x20000000
   1341c:	0000fa45 	.word	0x0000fa45
   13420:	00019fb9 	.word	0x00019fb9
   13424:	2000deb0 	.word	0x2000deb0
   13428:	200053fc 	.word	0x200053fc
   1342c:	000100e1 	.word	0x000100e1
   13430:	00010119 	.word	0x00010119
   13434:	2000df44 	.word	0x2000df44
   13438:	2000541c 	.word	0x2000541c
   1343c:	2000e068 	.word	0x2000e068
   13440:	2000543c 	.word	0x2000543c
   13444:	2000df64 	.word	0x2000df64
   13448:	2000545c 	.word	0x2000545c
   1344c:	2000e028 	.word	0x2000e028
   13450:	2000547c 	.word	0x2000547c
   13454:	2000e048 	.word	0x2000e048
   13458:	2000549c 	.word	0x2000549c
   1345c:	2000df20 	.word	0x2000df20
   13460:	200054bc 	.word	0x200054bc
   13464:	2000dfc0 	.word	0x2000dfc0
   13468:	200054dc 	.word	0x200054dc
   1346c:	20005524 	.word	0x20005524
   13470:	00013499 	.word	0x00013499
   13474:	000132ed 	.word	0x000132ed
   13478:	20005614 	.word	0x20005614
   1347c:	00012129 	.word	0x00012129
   13480:	000121b5 	.word	0x000121b5

00013484 <_GLOBAL__sub_I_ptrFlapperValveController>:
   13484:	b580      	push	{r7, lr}
   13486:	af00      	add	r7, sp, #0
   13488:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1348c:	2001      	movs	r0, #1
   1348e:	4b01      	ldr	r3, [pc, #4]	; (13494 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   13490:	4798      	blx	r3
   13492:	bd80      	pop	{r7, pc}
   13494:	00013319 	.word	0x00013319

00013498 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   13498:	b580      	push	{r7, lr}
   1349a:	b082      	sub	sp, #8
   1349c:	af00      	add	r7, sp, #0
   1349e:	6078      	str	r0, [r7, #4]
   134a0:	687b      	ldr	r3, [r7, #4]
   134a2:	4618      	mov	r0, r3
   134a4:	4b0c      	ldr	r3, [pc, #48]	; (134d8 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   134a6:	4798      	blx	r3
{
	valveID=0;
   134a8:	687b      	ldr	r3, [r7, #4]
   134aa:	2200      	movs	r2, #0
   134ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
   134b0:	687b      	ldr	r3, [r7, #4]
   134b2:	4a0a      	ldr	r2, [pc, #40]	; (134dc <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   134b4:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
   134b6:	687b      	ldr	r3, [r7, #4]
   134b8:	2200      	movs	r2, #0
   134ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
   134be:	4a08      	ldr	r2, [pc, #32]	; (134e0 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   134c0:	687b      	ldr	r3, [r7, #4]
   134c2:	6013      	str	r3, [r2, #0]
	isOK=false;
   134c4:	687b      	ldr	r3, [r7, #4]
   134c6:	2200      	movs	r2, #0
   134c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
   134cc:	687b      	ldr	r3, [r7, #4]
   134ce:	4618      	mov	r0, r3
   134d0:	3708      	adds	r7, #8
   134d2:	46bd      	mov	sp, r7
   134d4:	bd80      	pop	{r7, pc}
   134d6:	bf00      	nop
   134d8:	0001809b 	.word	0x0001809b
   134dc:	2000580c 	.word	0x2000580c
   134e0:	20005808 	.word	0x20005808

000134e4 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   134e4:	b580      	push	{r7, lr}
   134e6:	b082      	sub	sp, #8
   134e8:	af00      	add	r7, sp, #0
   134ea:	6078      	str	r0, [r7, #4]
   134ec:	687b      	ldr	r3, [r7, #4]
   134ee:	4618      	mov	r0, r3
   134f0:	4b03      	ldr	r3, [pc, #12]	; (13500 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   134f2:	4798      	blx	r3
{
} //~FlapperValve_Class
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	4618      	mov	r0, r3
   134f8:	3708      	adds	r7, #8
   134fa:	46bd      	mov	sp, r7
   134fc:	bd80      	pop	{r7, pc}
   134fe:	bf00      	nop
   13500:	000180af 	.word	0x000180af

00013504 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   13504:	b580      	push	{r7, lr}
   13506:	b082      	sub	sp, #8
   13508:	af00      	add	r7, sp, #0
   1350a:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
   1350c:	687b      	ldr	r3, [r7, #4]
   1350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13510:	7a1b      	ldrb	r3, [r3, #8]
   13512:	b2db      	uxtb	r3, r3
   13514:	2b00      	cmp	r3, #0
   13516:	d104      	bne.n	13522 <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1351c:	4618      	mov	r0, r3
   1351e:	4b19      	ldr	r3, [pc, #100]	; (13584 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   13520:	4798      	blx	r3
	}
		

		if (i2c->isOK)
   13522:	687b      	ldr	r3, [r7, #4]
   13524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13526:	7a5b      	ldrb	r3, [r3, #9]
   13528:	b2db      	uxtb	r3, r3
   1352a:	2b00      	cmp	r3, #0
   1352c:	d01b      	beq.n	13566 <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   13534:	4619      	mov	r1, r3
   13536:	6878      	ldr	r0, [r7, #4]
   13538:	4b13      	ldr	r3, [pc, #76]	; (13588 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   1353a:	4798      	blx	r3
			expanders[0]->SetPortInput();
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13540:	4618      	mov	r0, r3
   13542:	4b12      	ldr	r3, [pc, #72]	; (1358c <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   13544:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
   13546:	687b      	ldr	r3, [r7, #4]
   13548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1354a:	2182      	movs	r1, #130	; 0x82
   1354c:	4618      	mov	r0, r3
   1354e:	4b10      	ldr	r3, [pc, #64]	; (13590 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
   13550:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13556:	4618      	mov	r0, r3
   13558:	4b0e      	ldr	r3, [pc, #56]	; (13594 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
   1355a:	4798      	blx	r3
			expanders[3]->SetPortInput();
   1355c:	687b      	ldr	r3, [r7, #4]
   1355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13560:	4618      	mov	r0, r3
   13562:	4b0a      	ldr	r3, [pc, #40]	; (1358c <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   13564:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   13566:	687b      	ldr	r3, [r7, #4]
   13568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1356a:	7a5b      	ldrb	r3, [r3, #9]
   1356c:	b2da      	uxtb	r2, r3
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
   13574:	687b      	ldr	r3, [r7, #4]
   13576:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1357a:	b2db      	uxtb	r3, r3


}
   1357c:	4618      	mov	r0, r3
   1357e:	3708      	adds	r7, #8
   13580:	46bd      	mov	sp, r7
   13582:	bd80      	pop	{r7, pc}
   13584:	0000fa59 	.word	0x0000fa59
   13588:	000135c1 	.word	0x000135c1
   1358c:	0000fdb1 	.word	0x0000fdb1
   13590:	0000fdf5 	.word	0x0000fdf5
   13594:	0000fe69 	.word	0x0000fe69

00013598 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   13598:	b580      	push	{r7, lr}
   1359a:	b082      	sub	sp, #8
   1359c:	af00      	add	r7, sp, #0
   1359e:	6078      	str	r0, [r7, #4]
   135a0:	460b      	mov	r3, r1
   135a2:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	78fa      	ldrb	r2, [r7, #3]
   135a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
   135ac:	6878      	ldr	r0, [r7, #4]
   135ae:	4b03      	ldr	r3, [pc, #12]	; (135bc <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   135b0:	4798      	blx	r3
   135b2:	4603      	mov	r3, r0
}
   135b4:	4618      	mov	r0, r3
   135b6:	3708      	adds	r7, #8
   135b8:	46bd      	mov	sp, r7
   135ba:	bd80      	pop	{r7, pc}
   135bc:	00013505 	.word	0x00013505

000135c0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   135c0:	b580      	push	{r7, lr}
   135c2:	b084      	sub	sp, #16
   135c4:	af00      	add	r7, sp, #0
   135c6:	6078      	str	r0, [r7, #4]
   135c8:	460b      	mov	r3, r1
   135ca:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   135cc:	2300      	movs	r3, #0
   135ce:	60fb      	str	r3, [r7, #12]
   135d0:	68fb      	ldr	r3, [r7, #12]
   135d2:	2b03      	cmp	r3, #3
   135d4:	dc2d      	bgt.n	13632 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   135d6:	687b      	ldr	r3, [r7, #4]
   135d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   135dc:	4619      	mov	r1, r3
   135de:	68fb      	ldr	r3, [r7, #12]
   135e0:	461a      	mov	r2, r3
   135e2:	00d2      	lsls	r2, r2, #3
   135e4:	1ad2      	subs	r2, r2, r3
   135e6:	0093      	lsls	r3, r2, #2
   135e8:	461a      	mov	r2, r3
   135ea:	460b      	mov	r3, r1
   135ec:	00db      	lsls	r3, r3, #3
   135ee:	1a5b      	subs	r3, r3, r1
   135f0:	011b      	lsls	r3, r3, #4
   135f2:	4413      	add	r3, r2
   135f4:	4a11      	ldr	r2, [pc, #68]	; (1363c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
   135f6:	441a      	add	r2, r3
   135f8:	687b      	ldr	r3, [r7, #4]
   135fa:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   135fc:	687b      	ldr	r3, [r7, #4]
   135fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
   13600:	68fb      	ldr	r3, [r7, #12]
   13602:	b2da      	uxtb	r2, r3
   13604:	78fb      	ldrb	r3, [r7, #3]
   13606:	009b      	lsls	r3, r3, #2
   13608:	b2db      	uxtb	r3, r3
   1360a:	4413      	add	r3, r2
   1360c:	b2db      	uxtb	r3, r3
   1360e:	3320      	adds	r3, #32
   13610:	b2d9      	uxtb	r1, r3
   13612:	687b      	ldr	r3, [r7, #4]
   13614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13616:	461a      	mov	r2, r3
   13618:	4b09      	ldr	r3, [pc, #36]	; (13640 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   1361a:	4798      	blx	r3
		expanders[i]=currentExpander;
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	6e99      	ldr	r1, [r3, #104]	; 0x68
   13620:	687b      	ldr	r3, [r7, #4]
   13622:	68fa      	ldr	r2, [r7, #12]
   13624:	3216      	adds	r2, #22
   13626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   1362a:	68fb      	ldr	r3, [r7, #12]
   1362c:	3301      	adds	r3, #1
   1362e:	60fb      	str	r3, [r7, #12]
   13630:	e7ce      	b.n	135d0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   13632:	2300      	movs	r3, #0
}
   13634:	4618      	mov	r0, r3
   13636:	3710      	adds	r7, #16
   13638:	46bd      	mov	sp, r7
   1363a:	bd80      	pop	{r7, pc}
   1363c:	20005824 	.word	0x20005824
   13640:	0000fc0d 	.word	0x0000fc0d

00013644 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   13644:	b590      	push	{r4, r7, lr}
   13646:	b085      	sub	sp, #20
   13648:	af00      	add	r7, sp, #0
   1364a:	60f8      	str	r0, [r7, #12]
   1364c:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   1364e:	68bb      	ldr	r3, [r7, #8]
   13650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13652:	4618      	mov	r0, r3
   13654:	4b0f      	ldr	r3, [pc, #60]	; (13694 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
   13656:	4798      	blx	r3
   13658:	4603      	mov	r3, r0
   1365a:	461a      	mov	r2, r3
   1365c:	68bb      	ldr	r3, [r7, #8]
   1365e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
   13662:	68b9      	ldr	r1, [r7, #8]
   13664:	68bb      	ldr	r3, [r7, #8]
   13666:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   1366a:	68bc      	ldr	r4, [r7, #8]
   1366c:	463b      	mov	r3, r7
   1366e:	4618      	mov	r0, r3
   13670:	4b09      	ldr	r3, [pc, #36]	; (13698 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   13672:	4798      	blx	r3
   13674:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   13678:	463a      	mov	r2, r7
   1367a:	6810      	ldr	r0, [r2, #0]
   1367c:	6851      	ldr	r1, [r2, #4]
   1367e:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
   13680:	68fa      	ldr	r2, [r7, #12]
   13682:	68bb      	ldr	r3, [r7, #8]
   13684:	333c      	adds	r3, #60	; 0x3c
   13686:	cb03      	ldmia	r3!, {r0, r1}
   13688:	6010      	str	r0, [r2, #0]
   1368a:	6051      	str	r1, [r2, #4]
}
   1368c:	68f8      	ldr	r0, [r7, #12]
   1368e:	3714      	adds	r7, #20
   13690:	46bd      	mov	sp, r7
   13692:	bd90      	pop	{r4, r7, pc}
   13694:	0000fcf1 	.word	0x0000fcf1
   13698:	000181ad 	.word	0x000181ad

0001369c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   1369c:	b590      	push	{r4, r7, lr}
   1369e:	b085      	sub	sp, #20
   136a0:	af00      	add	r7, sp, #0
   136a2:	60f8      	str	r0, [r7, #12]
   136a4:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   136a6:	68bb      	ldr	r3, [r7, #8]
   136a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   136aa:	4618      	mov	r0, r3
   136ac:	4b10      	ldr	r3, [pc, #64]	; (136f0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   136ae:	4798      	blx	r3
   136b0:	4603      	mov	r3, r0
   136b2:	461a      	mov	r2, r3
   136b4:	68bb      	ldr	r3, [r7, #8]
   136b6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
   136ba:	68b9      	ldr	r1, [r7, #8]
   136bc:	68bb      	ldr	r3, [r7, #8]
   136be:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   136c2:	68bc      	ldr	r4, [r7, #8]
   136c4:	463b      	mov	r3, r7
   136c6:	4618      	mov	r0, r3
   136c8:	4b0a      	ldr	r3, [pc, #40]	; (136f4 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   136ca:	4798      	blx	r3
   136cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   136d0:	463a      	mov	r2, r7
   136d2:	6810      	ldr	r0, [r2, #0]
   136d4:	6018      	str	r0, [r3, #0]
   136d6:	8892      	ldrh	r2, [r2, #4]
   136d8:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   136da:	68fa      	ldr	r2, [r7, #12]
   136dc:	68bb      	ldr	r3, [r7, #8]
   136de:	3344      	adds	r3, #68	; 0x44
   136e0:	6818      	ldr	r0, [r3, #0]
   136e2:	6010      	str	r0, [r2, #0]
   136e4:	889b      	ldrh	r3, [r3, #4]
   136e6:	8093      	strh	r3, [r2, #4]
}
   136e8:	68f8      	ldr	r0, [r7, #12]
   136ea:	3714      	adds	r7, #20
   136ec:	46bd      	mov	sp, r7
   136ee:	bd90      	pop	{r4, r7, pc}
   136f0:	0000fcf1 	.word	0x0000fcf1
   136f4:	00018159 	.word	0x00018159

000136f8 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   136f8:	b580      	push	{r7, lr}
   136fa:	b082      	sub	sp, #8
   136fc:	af00      	add	r7, sp, #0
   136fe:	6078      	str	r0, [r7, #4]
   13700:	460b      	mov	r3, r1
   13702:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13708:	4618      	mov	r0, r3
   1370a:	4b19      	ldr	r3, [pc, #100]	; (13770 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   1370c:	4798      	blx	r3
   1370e:	4603      	mov	r3, r0
   13710:	461a      	mov	r2, r3
   13712:	687b      	ldr	r3, [r7, #4]
   13714:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
   13718:	78fb      	ldrb	r3, [r7, #3]
   1371a:	2b00      	cmp	r3, #0
   1371c:	d006      	beq.n	1372c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   1371e:	687b      	ldr	r3, [r7, #4]
   13720:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13724:	f043 0301 	orr.w	r3, r3, #1
   13728:	b2db      	uxtb	r3, r3
   1372a:	e005      	b.n	13738 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   1372c:	687b      	ldr	r3, [r7, #4]
   1372e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13732:	f023 0301 	bic.w	r3, r3, #1
   13736:	b2db      	uxtb	r3, r3
   13738:	687a      	ldr	r2, [r7, #4]
   1373a:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
   1373e:	687b      	ldr	r3, [r7, #4]
   13740:	78fa      	ldrb	r2, [r7, #3]
   13742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
   13746:	687b      	ldr	r3, [r7, #4]
   13748:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1374a:	687b      	ldr	r3, [r7, #4]
   1374c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13750:	4619      	mov	r1, r3
   13752:	4610      	mov	r0, r2
   13754:	4b07      	ldr	r3, [pc, #28]	; (13774 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   13756:	4798      	blx	r3
   13758:	4603      	mov	r3, r0
   1375a:	461a      	mov	r2, r3
   1375c:	687b      	ldr	r3, [r7, #4]
   1375e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   13762:	687b      	ldr	r3, [r7, #4]
   13764:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13768:	4618      	mov	r0, r3
   1376a:	3708      	adds	r7, #8
   1376c:	46bd      	mov	sp, r7
   1376e:	bd80      	pop	{r7, pc}
   13770:	0000fcf1 	.word	0x0000fcf1
   13774:	0000fd75 	.word	0x0000fd75

00013778 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   13778:	b580      	push	{r7, lr}
   1377a:	b082      	sub	sp, #8
   1377c:	af00      	add	r7, sp, #0
   1377e:	6078      	str	r0, [r7, #4]
   13780:	460b      	mov	r3, r1
   13782:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13788:	4618      	mov	r0, r3
   1378a:	4b17      	ldr	r3, [pc, #92]	; (137e8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   1378c:	4798      	blx	r3
   1378e:	4603      	mov	r3, r0
   13790:	461a      	mov	r2, r3
   13792:	687b      	ldr	r3, [r7, #4]
   13794:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
   13798:	78fb      	ldrb	r3, [r7, #3]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d006      	beq.n	137ac <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   1379e:	687b      	ldr	r3, [r7, #4]
   137a0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   137a4:	f043 0320 	orr.w	r3, r3, #32
   137a8:	b2db      	uxtb	r3, r3
   137aa:	e005      	b.n	137b8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   137b2:	f023 0320 	bic.w	r3, r3, #32
   137b6:	b2db      	uxtb	r3, r3
   137b8:	687a      	ldr	r2, [r7, #4]
   137ba:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   137be:	687b      	ldr	r3, [r7, #4]
   137c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   137c2:	687b      	ldr	r3, [r7, #4]
   137c4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   137c8:	4619      	mov	r1, r3
   137ca:	4610      	mov	r0, r2
   137cc:	4b07      	ldr	r3, [pc, #28]	; (137ec <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   137ce:	4798      	blx	r3
   137d0:	4603      	mov	r3, r0
   137d2:	461a      	mov	r2, r3
   137d4:	687b      	ldr	r3, [r7, #4]
   137d6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   137da:	687b      	ldr	r3, [r7, #4]
   137dc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   137e0:	4618      	mov	r0, r3
   137e2:	3708      	adds	r7, #8
   137e4:	46bd      	mov	sp, r7
   137e6:	bd80      	pop	{r7, pc}
   137e8:	0000fcf1 	.word	0x0000fcf1
   137ec:	0000fd75 	.word	0x0000fd75

000137f0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   137f0:	b580      	push	{r7, lr}
   137f2:	b082      	sub	sp, #8
   137f4:	af00      	add	r7, sp, #0
   137f6:	6078      	str	r0, [r7, #4]
   137f8:	460b      	mov	r3, r1
   137fa:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   137fc:	687b      	ldr	r3, [r7, #4]
   137fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13800:	4618      	mov	r0, r3
   13802:	4b17      	ldr	r3, [pc, #92]	; (13860 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   13804:	4798      	blx	r3
   13806:	4603      	mov	r3, r0
   13808:	461a      	mov	r2, r3
   1380a:	687b      	ldr	r3, [r7, #4]
   1380c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
   13810:	78fb      	ldrb	r3, [r7, #3]
   13812:	2b00      	cmp	r3, #0
   13814:	d006      	beq.n	13824 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   13816:	687b      	ldr	r3, [r7, #4]
   13818:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1381c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13820:	b2db      	uxtb	r3, r3
   13822:	e005      	b.n	13830 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   13824:	687b      	ldr	r3, [r7, #4]
   13826:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1382a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1382e:	b2db      	uxtb	r3, r3
   13830:	687a      	ldr	r2, [r7, #4]
   13832:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   13836:	687b      	ldr	r3, [r7, #4]
   13838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13840:	4619      	mov	r1, r3
   13842:	4610      	mov	r0, r2
   13844:	4b07      	ldr	r3, [pc, #28]	; (13864 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   13846:	4798      	blx	r3
   13848:	4603      	mov	r3, r0
   1384a:	461a      	mov	r2, r3
   1384c:	687b      	ldr	r3, [r7, #4]
   1384e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   13852:	687b      	ldr	r3, [r7, #4]
   13854:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13858:	4618      	mov	r0, r3
   1385a:	3708      	adds	r7, #8
   1385c:	46bd      	mov	sp, r7
   1385e:	bd80      	pop	{r7, pc}
   13860:	0000fcf1 	.word	0x0000fcf1
   13864:	0000fd75 	.word	0x0000fd75

00013868 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   13868:	b580      	push	{r7, lr}
   1386a:	b082      	sub	sp, #8
   1386c:	af00      	add	r7, sp, #0
   1386e:	6078      	str	r0, [r7, #4]
   13870:	460b      	mov	r3, r1
   13872:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13874:	687b      	ldr	r3, [r7, #4]
   13876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13878:	4618      	mov	r0, r3
   1387a:	4b17      	ldr	r3, [pc, #92]	; (138d8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   1387c:	4798      	blx	r3
   1387e:	4603      	mov	r3, r0
   13880:	461a      	mov	r2, r3
   13882:	687b      	ldr	r3, [r7, #4]
   13884:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
   13888:	78fb      	ldrb	r3, [r7, #3]
   1388a:	2b00      	cmp	r3, #0
   1388c:	d006      	beq.n	1389c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13894:	f043 0304 	orr.w	r3, r3, #4
   13898:	b2db      	uxtb	r3, r3
   1389a:	e005      	b.n	138a8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   1389c:	687b      	ldr	r3, [r7, #4]
   1389e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   138a2:	f023 0304 	bic.w	r3, r3, #4
   138a6:	b2db      	uxtb	r3, r3
   138a8:	687a      	ldr	r2, [r7, #4]
   138aa:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   138b2:	687b      	ldr	r3, [r7, #4]
   138b4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   138b8:	4619      	mov	r1, r3
   138ba:	4610      	mov	r0, r2
   138bc:	4b07      	ldr	r3, [pc, #28]	; (138dc <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   138be:	4798      	blx	r3
   138c0:	4603      	mov	r3, r0
   138c2:	461a      	mov	r2, r3
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   138ca:	687b      	ldr	r3, [r7, #4]
   138cc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   138d0:	4618      	mov	r0, r3
   138d2:	3708      	adds	r7, #8
   138d4:	46bd      	mov	sp, r7
   138d6:	bd80      	pop	{r7, pc}
   138d8:	0000fcf1 	.word	0x0000fcf1
   138dc:	0000fd75 	.word	0x0000fd75

000138e0 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   138e0:	b580      	push	{r7, lr}
   138e2:	b082      	sub	sp, #8
   138e4:	af00      	add	r7, sp, #0
   138e6:	6078      	str	r0, [r7, #4]
   138e8:	460b      	mov	r3, r1
   138ea:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   138f0:	78fa      	ldrb	r2, [r7, #3]
   138f2:	4611      	mov	r1, r2
   138f4:	4618      	mov	r0, r3
   138f6:	4b07      	ldr	r3, [pc, #28]	; (13914 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   138f8:	4798      	blx	r3
   138fa:	4603      	mov	r3, r0
   138fc:	461a      	mov	r2, r3
   138fe:	687b      	ldr	r3, [r7, #4]
   13900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   13904:	687b      	ldr	r3, [r7, #4]
   13906:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
   1390a:	4618      	mov	r0, r3
   1390c:	3708      	adds	r7, #8
   1390e:	46bd      	mov	sp, r7
   13910:	bd80      	pop	{r7, pc}
   13912:	bf00      	nop
   13914:	0000fd75 	.word	0x0000fd75

00013918 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   13918:	b580      	push	{r7, lr}
   1391a:	b082      	sub	sp, #8
   1391c:	af00      	add	r7, sp, #0
   1391e:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   13920:	687b      	ldr	r3, [r7, #4]
   13922:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   13926:	687b      	ldr	r3, [r7, #4]
   13928:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   1392c:	687b      	ldr	r3, [r7, #4]
   1392e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13930:	4618      	mov	r0, r3
   13932:	4b18      	ldr	r3, [pc, #96]	; (13994 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   13934:	4798      	blx	r3
   13936:	4603      	mov	r3, r0
   13938:	461a      	mov	r2, r3
   1393a:	687b      	ldr	r3, [r7, #4]
   1393c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   13940:	687b      	ldr	r3, [r7, #4]
   13942:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13946:	2bda      	cmp	r3, #218	; 0xda
   13948:	dd04      	ble.n	13954 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   1394a:	687b      	ldr	r3, [r7, #4]
   1394c:	2203      	movs	r2, #3
   1394e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13952:	e017      	b.n	13984 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   13954:	687b      	ldr	r3, [r7, #4]
   13956:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1395a:	2b6d      	cmp	r3, #109	; 0x6d
   1395c:	dd04      	ble.n	13968 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   1395e:	687b      	ldr	r3, [r7, #4]
   13960:	2202      	movs	r2, #2
   13962:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13966:	e00d      	b.n	13984 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   13968:	687b      	ldr	r3, [r7, #4]
   1396a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1396e:	2b36      	cmp	r3, #54	; 0x36
   13970:	dd04      	ble.n	1397c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	2201      	movs	r2, #1
   13976:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   1397a:	e003      	b.n	13984 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	2200      	movs	r2, #0
   13980:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
   13984:	687b      	ldr	r3, [r7, #4]
   13986:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
   1398a:	4618      	mov	r0, r3
   1398c:	3708      	adds	r7, #8
   1398e:	46bd      	mov	sp, r7
   13990:	bd80      	pop	{r7, pc}
   13992:	bf00      	nop
   13994:	0000fcf1 	.word	0x0000fcf1

00013998 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   13998:	b590      	push	{r4, r7, lr}
   1399a:	b083      	sub	sp, #12
   1399c:	af00      	add	r7, sp, #0
   1399e:	6078      	str	r0, [r7, #4]
   139a0:	4c05      	ldr	r4, [pc, #20]	; (139b8 <__tcf_0+0x20>)
   139a2:	4b06      	ldr	r3, [pc, #24]	; (139bc <__tcf_0+0x24>)
   139a4:	429c      	cmp	r4, r3
   139a6:	d004      	beq.n	139b2 <__tcf_0+0x1a>
   139a8:	3c1c      	subs	r4, #28
   139aa:	4620      	mov	r0, r4
   139ac:	4b04      	ldr	r3, [pc, #16]	; (139c0 <__tcf_0+0x28>)
   139ae:	4798      	blx	r3
   139b0:	e7f7      	b.n	139a2 <__tcf_0+0xa>
   139b2:	370c      	adds	r7, #12
   139b4:	46bd      	mov	sp, r7
   139b6:	bd90      	pop	{r4, r7, pc}
   139b8:	20005904 	.word	0x20005904
   139bc:	20005824 	.word	0x20005824
   139c0:	0000fbf9 	.word	0x0000fbf9

000139c4 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   139c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139c8:	b082      	sub	sp, #8
   139ca:	af00      	add	r7, sp, #0
   139cc:	6078      	str	r0, [r7, #4]
   139ce:	6039      	str	r1, [r7, #0]
   139d0:	687b      	ldr	r3, [r7, #4]
   139d2:	2b01      	cmp	r3, #1
   139d4:	d177      	bne.n	13ac6 <_Z41__static_initialization_and_destruction_0ii+0x102>
   139d6:	683b      	ldr	r3, [r7, #0]
   139d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   139dc:	4293      	cmp	r3, r2
   139de:	d172      	bne.n	13ac6 <_Z41__static_initialization_and_destruction_0ii+0x102>
   139e0:	493b      	ldr	r1, [pc, #236]	; (13ad0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   139e2:	483c      	ldr	r0, [pc, #240]	; (13ad4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   139e4:	4b3c      	ldr	r3, [pc, #240]	; (13ad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   139e6:	4798      	blx	r3
   139e8:	4a3c      	ldr	r2, [pc, #240]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   139ea:	493d      	ldr	r1, [pc, #244]	; (13ae0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   139ec:	4839      	ldr	r0, [pc, #228]	; (13ad4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   139ee:	4b3d      	ldr	r3, [pc, #244]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   139f0:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   139f2:	493d      	ldr	r1, [pc, #244]	; (13ae8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   139f4:	483d      	ldr	r0, [pc, #244]	; (13aec <_Z41__static_initialization_and_destruction_0ii+0x128>)
   139f6:	4b3e      	ldr	r3, [pc, #248]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   139f8:	4798      	blx	r3
   139fa:	4a38      	ldr	r2, [pc, #224]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   139fc:	493d      	ldr	r1, [pc, #244]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   139fe:	483b      	ldr	r0, [pc, #236]	; (13aec <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13a00:	4b38      	ldr	r3, [pc, #224]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a02:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13a04:	493c      	ldr	r1, [pc, #240]	; (13af8 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   13a06:	483d      	ldr	r0, [pc, #244]	; (13afc <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13a08:	4b39      	ldr	r3, [pc, #228]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a0a:	4798      	blx	r3
   13a0c:	4a33      	ldr	r2, [pc, #204]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a0e:	4939      	ldr	r1, [pc, #228]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a10:	483a      	ldr	r0, [pc, #232]	; (13afc <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13a12:	4b34      	ldr	r3, [pc, #208]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a14:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13a16:	493a      	ldr	r1, [pc, #232]	; (13b00 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   13a18:	483a      	ldr	r0, [pc, #232]	; (13b04 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13a1a:	4b35      	ldr	r3, [pc, #212]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a1c:	4798      	blx	r3
   13a1e:	4a2f      	ldr	r2, [pc, #188]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a20:	4934      	ldr	r1, [pc, #208]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a22:	4838      	ldr	r0, [pc, #224]	; (13b04 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13a24:	4b2f      	ldr	r3, [pc, #188]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a26:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   13a28:	4937      	ldr	r1, [pc, #220]	; (13b08 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   13a2a:	4838      	ldr	r0, [pc, #224]	; (13b0c <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13a2c:	4b30      	ldr	r3, [pc, #192]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a2e:	4798      	blx	r3
   13a30:	4a2a      	ldr	r2, [pc, #168]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a32:	4930      	ldr	r1, [pc, #192]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a34:	4835      	ldr	r0, [pc, #212]	; (13b0c <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13a36:	4b2b      	ldr	r3, [pc, #172]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a38:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   13a3a:	4935      	ldr	r1, [pc, #212]	; (13b10 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   13a3c:	4835      	ldr	r0, [pc, #212]	; (13b14 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13a3e:	4b2c      	ldr	r3, [pc, #176]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a40:	4798      	blx	r3
   13a42:	4a26      	ldr	r2, [pc, #152]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a44:	492b      	ldr	r1, [pc, #172]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a46:	4833      	ldr	r0, [pc, #204]	; (13b14 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13a48:	4b26      	ldr	r3, [pc, #152]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a4a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   13a4c:	4932      	ldr	r1, [pc, #200]	; (13b18 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   13a4e:	4833      	ldr	r0, [pc, #204]	; (13b1c <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13a50:	4b27      	ldr	r3, [pc, #156]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a52:	4798      	blx	r3
   13a54:	4a21      	ldr	r2, [pc, #132]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a56:	4927      	ldr	r1, [pc, #156]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a58:	4830      	ldr	r0, [pc, #192]	; (13b1c <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13a5a:	4b22      	ldr	r3, [pc, #136]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a5c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   13a5e:	4930      	ldr	r1, [pc, #192]	; (13b20 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   13a60:	4830      	ldr	r0, [pc, #192]	; (13b24 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13a62:	4b23      	ldr	r3, [pc, #140]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a64:	4798      	blx	r3
   13a66:	4a1d      	ldr	r2, [pc, #116]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a68:	4922      	ldr	r1, [pc, #136]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a6a:	482e      	ldr	r0, [pc, #184]	; (13b24 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13a6c:	4b1d      	ldr	r3, [pc, #116]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a6e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   13a70:	492d      	ldr	r1, [pc, #180]	; (13b28 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   13a72:	482e      	ldr	r0, [pc, #184]	; (13b2c <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13a74:	4b1e      	ldr	r3, [pc, #120]	; (13af0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13a76:	4798      	blx	r3
   13a78:	4a18      	ldr	r2, [pc, #96]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a7a:	491e      	ldr	r1, [pc, #120]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13a7c:	482b      	ldr	r0, [pc, #172]	; (13b2c <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13a7e:	4b19      	ldr	r3, [pc, #100]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a80:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   13a82:	492b      	ldr	r1, [pc, #172]	; (13b30 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
   13a84:	482b      	ldr	r0, [pc, #172]	; (13b34 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   13a86:	4b14      	ldr	r3, [pc, #80]	; (13ad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13a88:	4798      	blx	r3
   13a8a:	4a14      	ldr	r2, [pc, #80]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13a8c:	4914      	ldr	r1, [pc, #80]	; (13ae0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13a8e:	4829      	ldr	r0, [pc, #164]	; (13b34 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   13a90:	4b14      	ldr	r3, [pc, #80]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13a92:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   13a94:	4b28      	ldr	r3, [pc, #160]	; (13b38 <_Z41__static_initialization_and_destruction_0ii+0x174>)
   13a96:	2401      	movs	r4, #1
   13a98:	461e      	mov	r6, r3
   13a9a:	2c00      	cmp	r4, #0
   13a9c:	db0e      	blt.n	13abc <_Z41__static_initialization_and_destruction_0ii+0xf8>
   13a9e:	4633      	mov	r3, r6
   13aa0:	2503      	movs	r5, #3
   13aa2:	4698      	mov	r8, r3
   13aa4:	2d00      	cmp	r5, #0
   13aa6:	db06      	blt.n	13ab6 <_Z41__static_initialization_and_destruction_0ii+0xf2>
   13aa8:	4640      	mov	r0, r8
   13aaa:	4b24      	ldr	r3, [pc, #144]	; (13b3c <_Z41__static_initialization_and_destruction_0ii+0x178>)
   13aac:	4798      	blx	r3
   13aae:	f108 081c 	add.w	r8, r8, #28
   13ab2:	3d01      	subs	r5, #1
   13ab4:	e7f6      	b.n	13aa4 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   13ab6:	3670      	adds	r6, #112	; 0x70
   13ab8:	3c01      	subs	r4, #1
   13aba:	e7ee      	b.n	13a9a <_Z41__static_initialization_and_destruction_0ii+0xd6>
   13abc:	4a07      	ldr	r2, [pc, #28]	; (13adc <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13abe:	4920      	ldr	r1, [pc, #128]	; (13b40 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
   13ac0:	2000      	movs	r0, #0
   13ac2:	4b08      	ldr	r3, [pc, #32]	; (13ae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13ac4:	4798      	blx	r3
}
   13ac6:	bf00      	nop
   13ac8:	3708      	adds	r7, #8
   13aca:	46bd      	mov	sp, r7
   13acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ad0:	2000dfe0 	.word	0x2000dfe0
   13ad4:	200056f0 	.word	0x200056f0
   13ad8:	0000fa29 	.word	0x0000fa29
   13adc:	20000000 	.word	0x20000000
   13ae0:	0000fa45 	.word	0x0000fa45
   13ae4:	00019fb9 	.word	0x00019fb9
   13ae8:	2000deb0 	.word	0x2000deb0
   13aec:	20005708 	.word	0x20005708
   13af0:	000100e1 	.word	0x000100e1
   13af4:	00010119 	.word	0x00010119
   13af8:	2000df44 	.word	0x2000df44
   13afc:	20005728 	.word	0x20005728
   13b00:	2000e068 	.word	0x2000e068
   13b04:	20005748 	.word	0x20005748
   13b08:	2000df64 	.word	0x2000df64
   13b0c:	20005768 	.word	0x20005768
   13b10:	2000e028 	.word	0x2000e028
   13b14:	20005788 	.word	0x20005788
   13b18:	2000e048 	.word	0x2000e048
   13b1c:	200057a8 	.word	0x200057a8
   13b20:	2000df20 	.word	0x2000df20
   13b24:	200057c8 	.word	0x200057c8
   13b28:	2000dfc0 	.word	0x2000dfc0
   13b2c:	200057e8 	.word	0x200057e8
   13b30:	2000df84 	.word	0x2000df84
   13b34:	2000580c 	.word	0x2000580c
   13b38:	20005824 	.word	0x20005824
   13b3c:	0000fbe5 	.word	0x0000fbe5
   13b40:	00013999 	.word	0x00013999

00013b44 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   13b44:	b580      	push	{r7, lr}
   13b46:	af00      	add	r7, sp, #0
   13b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13b4c:	2001      	movs	r0, #1
   13b4e:	4b01      	ldr	r3, [pc, #4]	; (13b54 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   13b50:	4798      	blx	r3
   13b52:	bd80      	pop	{r7, pc}
   13b54:	000139c5 	.word	0x000139c5

00013b58 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   13b58:	b480      	push	{r7}
   13b5a:	b083      	sub	sp, #12
   13b5c:	af00      	add	r7, sp, #0
   13b5e:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   13b60:	4a07      	ldr	r2, [pc, #28]	; (13b80 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   13b62:	687b      	ldr	r3, [r7, #4]
   13b64:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   13b66:	687b      	ldr	r3, [r7, #4]
   13b68:	4a06      	ldr	r2, [pc, #24]	; (13b84 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   13b6a:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   13b6c:	687b      	ldr	r3, [r7, #4]
   13b6e:	2200      	movs	r2, #0
   13b70:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   13b72:	687b      	ldr	r3, [r7, #4]
   13b74:	4618      	mov	r0, r3
   13b76:	370c      	adds	r7, #12
   13b78:	46bd      	mov	sp, r7
   13b7a:	bc80      	pop	{r7}
   13b7c:	4770      	bx	lr
   13b7e:	bf00      	nop
   13b80:	2000591c 	.word	0x2000591c
   13b84:	20005904 	.word	0x20005904

00013b88 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   13b88:	b480      	push	{r7}
   13b8a:	b083      	sub	sp, #12
   13b8c:	af00      	add	r7, sp, #0
   13b8e:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   13b90:	687b      	ldr	r3, [r7, #4]
   13b92:	4618      	mov	r0, r3
   13b94:	370c      	adds	r7, #12
   13b96:	46bd      	mov	sp, r7
   13b98:	bc80      	pop	{r7}
   13b9a:	4770      	bx	lr

00013b9c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id,MCP23008_Class *heater_expanders){
   13b9c:	b580      	push	{r7, lr}
   13b9e:	b084      	sub	sp, #16
   13ba0:	af00      	add	r7, sp, #0
   13ba2:	60f8      	str	r0, [r7, #12]
   13ba4:	460b      	mov	r3, r1
   13ba6:	607a      	str	r2, [r7, #4]
   13ba8:	72fb      	strb	r3, [r7, #11]
	heater_id=id;
   13baa:	68fb      	ldr	r3, [r7, #12]
   13bac:	7afa      	ldrb	r2, [r7, #11]
   13bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->initiated)
   13bb2:	68fb      	ldr	r3, [r7, #12]
   13bb4:	699b      	ldr	r3, [r3, #24]
   13bb6:	7a1b      	ldrb	r3, [r3, #8]
   13bb8:	b2db      	uxtb	r3, r3
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d104      	bne.n	13bc8 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x2c>
	{
		
	} 
	else{
		i2c->Init();
   13bbe:	68fb      	ldr	r3, [r7, #12]
   13bc0:	699b      	ldr	r3, [r3, #24]
   13bc2:	4618      	mov	r0, r3
   13bc4:	4b15      	ldr	r3, [pc, #84]	; (13c1c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x80>)
   13bc6:	4798      	blx	r3
	}
	
	if (i2c->isOK)
   13bc8:	68fb      	ldr	r3, [r7, #12]
   13bca:	699b      	ldr	r3, [r3, #24]
   13bcc:	7a5b      	ldrb	r3, [r3, #9]
   13bce:	b2db      	uxtb	r3, r3
   13bd0:	2b00      	cmp	r3, #0
   13bd2:	d015      	beq.n	13c00 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x64>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray(heater_expanders);
   13bd4:	6879      	ldr	r1, [r7, #4]
   13bd6:	68f8      	ldr	r0, [r7, #12]
   13bd8:	4b11      	ldr	r3, [pc, #68]	; (13c20 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x84>)
   13bda:	4798      	blx	r3
		expanders[0]->SetPortInput();
   13bdc:	68fb      	ldr	r3, [r7, #12]
   13bde:	68db      	ldr	r3, [r3, #12]
   13be0:	4618      	mov	r0, r3
   13be2:	4b10      	ldr	r3, [pc, #64]	; (13c24 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x88>)
   13be4:	4798      	blx	r3
		expanders[1]->SetPortOutput();
   13be6:	68fb      	ldr	r3, [r7, #12]
   13be8:	691b      	ldr	r3, [r3, #16]
   13bea:	4618      	mov	r0, r3
   13bec:	4b0e      	ldr	r3, [pc, #56]	; (13c28 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x8c>)
   13bee:	4798      	blx	r3
		isOK=SelfTest();
   13bf0:	68f8      	ldr	r0, [r7, #12]
   13bf2:	4b0e      	ldr	r3, [pc, #56]	; (13c2c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x90>)
   13bf4:	4798      	blx	r3
   13bf6:	4603      	mov	r3, r0
   13bf8:	461a      	mov	r2, r3
   13bfa:	68fb      	ldr	r3, [r7, #12]
   13bfc:	701a      	strb	r2, [r3, #0]
   13bfe:	e000      	b.n	13c02 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x66>
	}
	else
	{
		asm("nop");
   13c00:	bf00      	nop
	}
	isOK=i2c->isOK;
   13c02:	68fb      	ldr	r3, [r7, #12]
   13c04:	699b      	ldr	r3, [r3, #24]
   13c06:	7a5b      	ldrb	r3, [r3, #9]
   13c08:	b2da      	uxtb	r2, r3
   13c0a:	68fb      	ldr	r3, [r7, #12]
   13c0c:	701a      	strb	r2, [r3, #0]
	return isOK;
   13c0e:	68fb      	ldr	r3, [r7, #12]
   13c10:	781b      	ldrb	r3, [r3, #0]
   13c12:	b2db      	uxtb	r3, r3
}
   13c14:	4618      	mov	r0, r3
   13c16:	3710      	adds	r7, #16
   13c18:	46bd      	mov	sp, r7
   13c1a:	bd80      	pop	{r7, pc}
   13c1c:	0000fa59 	.word	0x0000fa59
   13c20:	00013c31 	.word	0x00013c31
   13c24:	0000fdb1 	.word	0x0000fdb1
   13c28:	0000fe69 	.word	0x0000fe69
   13c2c:	00013e19 	.word	0x00013e19

00013c30 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t SingleHeater_Class::InitExpanderArray(MCP23008_Class *heater_expanders){
   13c30:	b580      	push	{r7, lr}
   13c32:	b084      	sub	sp, #16
   13c34:	af00      	add	r7, sp, #0
   13c36:	6078      	str	r0, [r7, #4]
   13c38:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   13c3a:	2300      	movs	r3, #0
   13c3c:	60fb      	str	r3, [r7, #12]
   13c3e:	68fb      	ldr	r3, [r7, #12]
   13c40:	2b01      	cmp	r3, #1
   13c42:	dc34      	bgt.n	13cae <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x7e>
	{
		expanders[i]=&heater_expanders[2*heater_id+i];
   13c44:	687b      	ldr	r3, [r7, #4]
   13c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   13c4a:	005a      	lsls	r2, r3, #1
   13c4c:	68fb      	ldr	r3, [r7, #12]
   13c4e:	4413      	add	r3, r2
   13c50:	461a      	mov	r2, r3
   13c52:	4613      	mov	r3, r2
   13c54:	00db      	lsls	r3, r3, #3
   13c56:	1a9b      	subs	r3, r3, r2
   13c58:	009b      	lsls	r3, r3, #2
   13c5a:	461a      	mov	r2, r3
   13c5c:	683b      	ldr	r3, [r7, #0]
   13c5e:	441a      	add	r2, r3
   13c60:	6879      	ldr	r1, [r7, #4]
   13c62:	68fb      	ldr	r3, [r7, #12]
   13c64:	3302      	adds	r3, #2
   13c66:	009b      	lsls	r3, r3, #2
   13c68:	440b      	add	r3, r1
   13c6a:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   13c6c:	687a      	ldr	r2, [r7, #4]
   13c6e:	68fb      	ldr	r3, [r7, #12]
   13c70:	3302      	adds	r3, #2
   13c72:	009b      	lsls	r3, r3, #2
   13c74:	4413      	add	r3, r2
   13c76:	685a      	ldr	r2, [r3, #4]
   13c78:	687b      	ldr	r3, [r7, #4]
   13c7a:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
   13c7c:	687b      	ldr	r3, [r7, #4]
   13c7e:	6958      	ldr	r0, [r3, #20]
   13c80:	68fb      	ldr	r3, [r7, #12]
   13c82:	b2da      	uxtb	r2, r3
   13c84:	687b      	ldr	r3, [r7, #4]
   13c86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   13c8a:	005b      	lsls	r3, r3, #1
   13c8c:	b2db      	uxtb	r3, r3
   13c8e:	4313      	orrs	r3, r2
   13c90:	b2db      	uxtb	r3, r3
   13c92:	f043 0320 	orr.w	r3, r3, #32
   13c96:	b2db      	uxtb	r3, r3
   13c98:	b25b      	sxtb	r3, r3
   13c9a:	b2d9      	uxtb	r1, r3
   13c9c:	687b      	ldr	r3, [r7, #4]
   13c9e:	699b      	ldr	r3, [r3, #24]
   13ca0:	461a      	mov	r2, r3
   13ca2:	4b05      	ldr	r3, [pc, #20]	; (13cb8 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x88>)
   13ca4:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   13ca6:	68fb      	ldr	r3, [r7, #12]
   13ca8:	3301      	adds	r3, #1
   13caa:	60fb      	str	r3, [r7, #12]
   13cac:	e7c7      	b.n	13c3e <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0xe>
	}
	
}
   13cae:	bf00      	nop
   13cb0:	4618      	mov	r0, r3
   13cb2:	3710      	adds	r7, #16
   13cb4:	46bd      	mov	sp, r7
   13cb6:	bd80      	pop	{r7, pc}
   13cb8:	0000fc0d 	.word	0x0000fc0d

00013cbc <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   13cbc:	b580      	push	{r7, lr}
   13cbe:	b084      	sub	sp, #16
   13cc0:	af00      	add	r7, sp, #0
   13cc2:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	68db      	ldr	r3, [r3, #12]
   13cc8:	4618      	mov	r0, r3
   13cca:	4b16      	ldr	r3, [pc, #88]	; (13d24 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   13ccc:	4798      	blx	r3
   13cce:	4603      	mov	r3, r0
   13cd0:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   13cd2:	7bbb      	ldrb	r3, [r7, #14]
   13cd4:	f003 0301 	and.w	r3, r3, #1
   13cd8:	2b00      	cmp	r3, #0
   13cda:	bf14      	ite	ne
   13cdc:	2301      	movne	r3, #1
   13cde:	2300      	moveq	r3, #0
   13ce0:	b2da      	uxtb	r2, r3
   13ce2:	687b      	ldr	r3, [r7, #4]
   13ce4:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   13ce6:	2300      	movs	r3, #0
   13ce8:	73fb      	strb	r3, [r7, #15]
   13cea:	7bfb      	ldrb	r3, [r7, #15]
   13cec:	2b03      	cmp	r3, #3
   13cee:	dc14      	bgt.n	13d1a <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   13cf0:	7bfb      	ldrb	r3, [r7, #15]
   13cf2:	7bb9      	ldrb	r1, [r7, #14]
   13cf4:	7bfa      	ldrb	r2, [r7, #15]
   13cf6:	3201      	adds	r2, #1
   13cf8:	fa41 f202 	asr.w	r2, r1, r2
   13cfc:	f002 0201 	and.w	r2, r2, #1
   13d00:	2a00      	cmp	r2, #0
   13d02:	bf14      	ite	ne
   13d04:	2201      	movne	r2, #1
   13d06:	2200      	moveq	r2, #0
   13d08:	b2d1      	uxtb	r1, r2
   13d0a:	687a      	ldr	r2, [r7, #4]
   13d0c:	4413      	add	r3, r2
   13d0e:	460a      	mov	r2, r1
   13d10:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   13d12:	7bfb      	ldrb	r3, [r7, #15]
   13d14:	3301      	adds	r3, #1
   13d16:	73fb      	strb	r3, [r7, #15]
   13d18:	e7e7      	b.n	13cea <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   13d1a:	7bbb      	ldrb	r3, [r7, #14]
}
   13d1c:	4618      	mov	r0, r3
   13d1e:	3710      	adds	r7, #16
   13d20:	46bd      	mov	sp, r7
   13d22:	bd80      	pop	{r7, pc}
   13d24:	0000fcf1 	.word	0x0000fcf1

00013d28 <_ZN18SingleHeater_Class9ReadGPIOsEPh>:
void	SingleHeater_Class::ReadGPIOs(uint8_t *buffer){
   13d28:	b590      	push	{r4, r7, lr}
   13d2a:	b085      	sub	sp, #20
   13d2c:	af00      	add	r7, sp, #0
   13d2e:	6078      	str	r0, [r7, #4]
   13d30:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < 2; i++)
   13d32:	2300      	movs	r3, #0
   13d34:	73fb      	strb	r3, [r7, #15]
   13d36:	7bfb      	ldrb	r3, [r7, #15]
   13d38:	2b01      	cmp	r3, #1
   13d3a:	dc11      	bgt.n	13d60 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x38>
	{
		buffer[i]=expanders[i]->ReadGPIORegister();
   13d3c:	7bfb      	ldrb	r3, [r7, #15]
   13d3e:	683a      	ldr	r2, [r7, #0]
   13d40:	18d4      	adds	r4, r2, r3
   13d42:	7bfb      	ldrb	r3, [r7, #15]
   13d44:	687a      	ldr	r2, [r7, #4]
   13d46:	3302      	adds	r3, #2
   13d48:	009b      	lsls	r3, r3, #2
   13d4a:	4413      	add	r3, r2
   13d4c:	685b      	ldr	r3, [r3, #4]
   13d4e:	4618      	mov	r0, r3
   13d50:	4b05      	ldr	r3, [pc, #20]	; (13d68 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x40>)
   13d52:	4798      	blx	r3
   13d54:	4603      	mov	r3, r0
   13d56:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++)
   13d58:	7bfb      	ldrb	r3, [r7, #15]
   13d5a:	3301      	adds	r3, #1
   13d5c:	73fb      	strb	r3, [r7, #15]
   13d5e:	e7ea      	b.n	13d36 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0xe>
		
	}
	
}
   13d60:	bf00      	nop
   13d62:	3714      	adds	r7, #20
   13d64:	46bd      	mov	sp, r7
   13d66:	bd90      	pop	{r4, r7, pc}
   13d68:	0000fcf1 	.word	0x0000fcf1

00013d6c <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   13d6c:	b580      	push	{r7, lr}
   13d6e:	b082      	sub	sp, #8
   13d70:	af00      	add	r7, sp, #0
   13d72:	6078      	str	r0, [r7, #4]
   13d74:	460b      	mov	r3, r1
   13d76:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   13d78:	687b      	ldr	r3, [r7, #4]
   13d7a:	691b      	ldr	r3, [r3, #16]
   13d7c:	78f9      	ldrb	r1, [r7, #3]
   13d7e:	2200      	movs	r2, #0
   13d80:	4618      	mov	r0, r3
   13d82:	4b06      	ldr	r3, [pc, #24]	; (13d9c <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   13d84:	4798      	blx	r3
   13d86:	4603      	mov	r3, r0
   13d88:	461a      	mov	r2, r3
   13d8a:	687b      	ldr	r3, [r7, #4]
   13d8c:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   13d8e:	687b      	ldr	r3, [r7, #4]
   13d90:	7adb      	ldrb	r3, [r3, #11]
}
   13d92:	4618      	mov	r0, r3
   13d94:	3708      	adds	r7, #8
   13d96:	46bd      	mov	sp, r7
   13d98:	bd80      	pop	{r7, pc}
   13d9a:	bf00      	nop
   13d9c:	0000ffa9 	.word	0x0000ffa9

00013da0 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   13da0:	b580      	push	{r7, lr}
   13da2:	b082      	sub	sp, #8
   13da4:	af00      	add	r7, sp, #0
   13da6:	6078      	str	r0, [r7, #4]
   13da8:	460b      	mov	r3, r1
   13daa:	70fb      	strb	r3, [r7, #3]
   13dac:	4613      	mov	r3, r2
   13dae:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   13db0:	687b      	ldr	r3, [r7, #4]
   13db2:	6918      	ldr	r0, [r3, #16]
   13db4:	78bb      	ldrb	r3, [r7, #2]
   13db6:	f083 0301 	eor.w	r3, r3, #1
   13dba:	b2da      	uxtb	r2, r3
   13dbc:	78fb      	ldrb	r3, [r7, #3]
   13dbe:	4619      	mov	r1, r3
   13dc0:	4b05      	ldr	r3, [pc, #20]	; (13dd8 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   13dc2:	4798      	blx	r3
   13dc4:	4603      	mov	r3, r0
   13dc6:	461a      	mov	r2, r3
   13dc8:	687b      	ldr	r3, [r7, #4]
   13dca:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   13dcc:	687b      	ldr	r3, [r7, #4]
   13dce:	7adb      	ldrb	r3, [r3, #11]
}
   13dd0:	4618      	mov	r0, r3
   13dd2:	3708      	adds	r7, #8
   13dd4:	46bd      	mov	sp, r7
   13dd6:	bd80      	pop	{r7, pc}
   13dd8:	0000ffa9 	.word	0x0000ffa9

00013ddc <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   13ddc:	b580      	push	{r7, lr}
   13dde:	b082      	sub	sp, #8
   13de0:	af00      	add	r7, sp, #0
   13de2:	6078      	str	r0, [r7, #4]
   13de4:	460b      	mov	r3, r1
   13de6:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   13de8:	687b      	ldr	r3, [r7, #4]
   13dea:	691b      	ldr	r3, [r3, #16]
   13dec:	78f9      	ldrb	r1, [r7, #3]
   13dee:	2201      	movs	r2, #1
   13df0:	4618      	mov	r0, r3
   13df2:	4b08      	ldr	r3, [pc, #32]	; (13e14 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   13df4:	4798      	blx	r3
   13df6:	4603      	mov	r3, r0
   13df8:	2b00      	cmp	r3, #0
   13dfa:	d001      	beq.n	13e00 <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   13dfc:	2200      	movs	r2, #0
   13dfe:	e000      	b.n	13e02 <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   13e00:	2201      	movs	r2, #1
   13e02:	687b      	ldr	r3, [r7, #4]
   13e04:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   13e06:	687b      	ldr	r3, [r7, #4]
   13e08:	7adb      	ldrb	r3, [r3, #11]
}
   13e0a:	4618      	mov	r0, r3
   13e0c:	3708      	adds	r7, #8
   13e0e:	46bd      	mov	sp, r7
   13e10:	bd80      	pop	{r7, pc}
   13e12:	bf00      	nop
   13e14:	0000ffa9 	.word	0x0000ffa9

00013e18 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
   13e18:	b580      	push	{r7, lr}
   13e1a:	b084      	sub	sp, #16
   13e1c:	af00      	add	r7, sp, #0
   13e1e:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   13e20:	2300      	movs	r3, #0
   13e22:	73bb      	strb	r3, [r7, #14]
   13e24:	7bbb      	ldrb	r3, [r7, #14]
   13e26:	2b03      	cmp	r3, #3
   13e28:	dc1f      	bgt.n	13e6a <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
   13e2a:	7bbb      	ldrb	r3, [r7, #14]
   13e2c:	4619      	mov	r1, r3
   13e2e:	6878      	ldr	r0, [r7, #4]
   13e30:	4b10      	ldr	r3, [pc, #64]	; (13e74 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   13e32:	4798      	blx	r3
		delay_ms(100);
   13e34:	2064      	movs	r0, #100	; 0x64
   13e36:	4b10      	ldr	r3, [pc, #64]	; (13e78 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   13e38:	4798      	blx	r3
		DisableIndex(i);
   13e3a:	7bbb      	ldrb	r3, [r7, #14]
   13e3c:	4619      	mov	r1, r3
   13e3e:	6878      	ldr	r0, [r7, #4]
   13e40:	4b0e      	ldr	r3, [pc, #56]	; (13e7c <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   13e42:	4798      	blx	r3
		ReadStatus();
   13e44:	6878      	ldr	r0, [r7, #4]
   13e46:	4b0e      	ldr	r3, [pc, #56]	; (13e80 <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   13e48:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   13e4a:	7bbb      	ldrb	r3, [r7, #14]
   13e4c:	687a      	ldr	r2, [r7, #4]
   13e4e:	4413      	add	r3, r2
   13e50:	78db      	ldrb	r3, [r3, #3]
   13e52:	2b00      	cmp	r3, #0
   13e54:	d002      	beq.n	13e5c <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
   13e56:	2301      	movs	r3, #1
   13e58:	73fb      	strb	r3, [r7, #15]
   13e5a:	e002      	b.n	13e62 <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
   13e5c:	2300      	movs	r3, #0
   13e5e:	73fb      	strb	r3, [r7, #15]
			break;
   13e60:	e003      	b.n	13e6a <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   13e62:	7bbb      	ldrb	r3, [r7, #14]
   13e64:	3301      	adds	r3, #1
   13e66:	73bb      	strb	r3, [r7, #14]
   13e68:	e7dc      	b.n	13e24 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
   13e6a:	7bfb      	ldrb	r3, [r7, #15]
}
   13e6c:	4618      	mov	r0, r3
   13e6e:	3710      	adds	r7, #16
   13e70:	46bd      	mov	sp, r7
   13e72:	bd80      	pop	{r7, pc}
   13e74:	00013d6d 	.word	0x00013d6d
   13e78:	00003561 	.word	0x00003561
   13e7c:	00013ddd 	.word	0x00013ddd
   13e80:	00013cbd 	.word	0x00013cbd

00013e84 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   13e84:	b590      	push	{r4, r7, lr}
   13e86:	b083      	sub	sp, #12
   13e88:	af00      	add	r7, sp, #0
   13e8a:	6078      	str	r0, [r7, #4]
   13e8c:	4c05      	ldr	r4, [pc, #20]	; (13ea4 <__tcf_0+0x20>)
   13e8e:	4b06      	ldr	r3, [pc, #24]	; (13ea8 <__tcf_0+0x24>)
   13e90:	429c      	cmp	r4, r3
   13e92:	d004      	beq.n	13e9e <__tcf_0+0x1a>
   13e94:	3c1c      	subs	r4, #28
   13e96:	4620      	mov	r0, r4
   13e98:	4b04      	ldr	r3, [pc, #16]	; (13eac <__tcf_0+0x28>)
   13e9a:	4798      	blx	r3
   13e9c:	e7f7      	b.n	13e8e <__tcf_0+0xa>
   13e9e:	370c      	adds	r7, #12
   13ea0:	46bd      	mov	sp, r7
   13ea2:	bd90      	pop	{r4, r7, pc}
   13ea4:	20005958 	.word	0x20005958
   13ea8:	20005920 	.word	0x20005920
   13eac:	0000fbf9 	.word	0x0000fbf9

00013eb0 <_Z41__static_initialization_and_destruction_0ii>:

   13eb0:	b5b0      	push	{r4, r5, r7, lr}
   13eb2:	b082      	sub	sp, #8
   13eb4:	af00      	add	r7, sp, #0
   13eb6:	6078      	str	r0, [r7, #4]
   13eb8:	6039      	str	r1, [r7, #0]
   13eba:	687b      	ldr	r3, [r7, #4]
   13ebc:	2b01      	cmp	r3, #1
   13ebe:	d125      	bne.n	13f0c <_Z41__static_initialization_and_destruction_0ii+0x5c>
   13ec0:	683b      	ldr	r3, [r7, #0]
   13ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ec6:	4293      	cmp	r3, r2
   13ec8:	d120      	bne.n	13f0c <_Z41__static_initialization_and_destruction_0ii+0x5c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   13eca:	4912      	ldr	r1, [pc, #72]	; (13f14 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   13ecc:	4812      	ldr	r0, [pc, #72]	; (13f18 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   13ece:	4b13      	ldr	r3, [pc, #76]	; (13f1c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13ed0:	4798      	blx	r3
   13ed2:	4a13      	ldr	r2, [pc, #76]	; (13f20 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13ed4:	4913      	ldr	r1, [pc, #76]	; (13f24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   13ed6:	4810      	ldr	r0, [pc, #64]	; (13f18 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   13ed8:	4b13      	ldr	r3, [pc, #76]	; (13f28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13eda:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   13edc:	4b13      	ldr	r3, [pc, #76]	; (13f2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13ede:	2401      	movs	r4, #1
   13ee0:	461d      	mov	r5, r3
   13ee2:	2c00      	cmp	r4, #0
   13ee4:	db05      	blt.n	13ef2 <_Z41__static_initialization_and_destruction_0ii+0x42>
   13ee6:	4628      	mov	r0, r5
   13ee8:	4b11      	ldr	r3, [pc, #68]	; (13f30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   13eea:	4798      	blx	r3
   13eec:	351c      	adds	r5, #28
   13eee:	3c01      	subs	r4, #1
   13ef0:	e7f7      	b.n	13ee2 <_Z41__static_initialization_and_destruction_0ii+0x32>
   13ef2:	4a0b      	ldr	r2, [pc, #44]	; (13f20 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13ef4:	490f      	ldr	r1, [pc, #60]	; (13f34 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   13ef6:	2000      	movs	r0, #0
   13ef8:	4b0b      	ldr	r3, [pc, #44]	; (13f28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13efa:	4798      	blx	r3
   13efc:	480e      	ldr	r0, [pc, #56]	; (13f38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   13efe:	4b0f      	ldr	r3, [pc, #60]	; (13f3c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   13f00:	4798      	blx	r3
   13f02:	4a07      	ldr	r2, [pc, #28]	; (13f20 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13f04:	490e      	ldr	r1, [pc, #56]	; (13f40 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   13f06:	480c      	ldr	r0, [pc, #48]	; (13f38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   13f08:	4b07      	ldr	r3, [pc, #28]	; (13f28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13f0a:	4798      	blx	r3
   13f0c:	bf00      	nop
   13f0e:	3708      	adds	r7, #8
   13f10:	46bd      	mov	sp, r7
   13f12:	bdb0      	pop	{r4, r5, r7, pc}
   13f14:	2000dfe0 	.word	0x2000dfe0
   13f18:	20005904 	.word	0x20005904
   13f1c:	0000fa29 	.word	0x0000fa29
   13f20:	20000000 	.word	0x20000000
   13f24:	0000fa45 	.word	0x0000fa45
   13f28:	00019fb9 	.word	0x00019fb9
   13f2c:	20005920 	.word	0x20005920
   13f30:	0000fbe5 	.word	0x0000fbe5
   13f34:	00013e85 	.word	0x00013e85
   13f38:	20005958 	.word	0x20005958
   13f3c:	00013b59 	.word	0x00013b59
   13f40:	00013b89 	.word	0x00013b89

00013f44 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   13f44:	b580      	push	{r7, lr}
   13f46:	af00      	add	r7, sp, #0
   13f48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f4c:	2001      	movs	r0, #1
   13f4e:	4b01      	ldr	r3, [pc, #4]	; (13f54 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   13f50:	4798      	blx	r3
   13f52:	bd80      	pop	{r7, pc}
   13f54:	00013eb1 	.word	0x00013eb1

00013f58 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   13f58:	4770      	bx	lr

00013f5a <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   13f5a:	4770      	bx	lr

00013f5c <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadEventLogSector(uint32_t add, uint8_t *buffer){
   13f5c:	b570      	push	{r4, r5, r6, lr}
   13f5e:	4604      	mov	r4, r0
	if (add>(uint32_t)&flashMap->EventsLogStateSector)
   13f60:	4b0d      	ldr	r3, [pc, #52]	; (13f98 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x3c>)
   13f62:	681b      	ldr	r3, [r3, #0]
   13f64:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   13f68:	428b      	cmp	r3, r1
   13f6a:	d305      	bcc.n	13f78 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x1c>
		qspiFlash.WaitOnBusy();
		
	} 
	else
	{
		read_result=1;
   13f6c:	2301      	movs	r3, #1
   13f6e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	}

	return	read_result;
}
   13f72:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   13f76:	bd70      	pop	{r4, r5, r6, pc}
   13f78:	4610      	mov	r0, r2
		read_result=qspiFlash.ReadAddress(buffer,add,QSPI_ERBLK);
   13f7a:	4d08      	ldr	r5, [pc, #32]	; (13f9c <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x40>)
   13f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13f80:	460a      	mov	r2, r1
   13f82:	4601      	mov	r1, r0
   13f84:	4628      	mov	r0, r5
   13f86:	4e06      	ldr	r6, [pc, #24]	; (13fa0 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x44>)
   13f88:	47b0      	blx	r6
   13f8a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		qspiFlash.WaitOnBusy();
   13f8e:	4628      	mov	r0, r5
   13f90:	4b04      	ldr	r3, [pc, #16]	; (13fa4 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x48>)
   13f92:	4798      	blx	r3
   13f94:	e7ed      	b.n	13f72 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x16>
   13f96:	bf00      	nop
   13f98:	2000597c 	.word	0x2000597c
   13f9c:	2000dbc4 	.word	0x2000dbc4
   13fa0:	00019501 	.word	0x00019501
   13fa4:	000195b1 	.word	0x000195b1

00013fa8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   13fa8:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   13faa:	2302      	movs	r3, #2
   13fac:	4801      	ldr	r0, [pc, #4]	; (13fb4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   13fae:	4c02      	ldr	r4, [pc, #8]	; (13fb8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   13fb0:	47a0      	blx	r4
	return	r;
}
   13fb2:	bd10      	pop	{r4, pc}
   13fb4:	2000dbc4 	.word	0x2000dbc4
   13fb8:	00019501 	.word	0x00019501

00013fbc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   13fbc:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   13fbe:	4b03      	ldr	r3, [pc, #12]	; (13fcc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   13fc0:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   13fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13fc6:	4b02      	ldr	r3, [pc, #8]	; (13fd0 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   13fc8:	4798      	blx	r3
}
   13fca:	bd08      	pop	{r3, pc}
   13fcc:	2000597c 	.word	0x2000597c
   13fd0:	00013fa9 	.word	0x00013fa9

00013fd4 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   13fd4:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   13fd6:	2302      	movs	r3, #2
   13fd8:	4801      	ldr	r0, [pc, #4]	; (13fe0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   13fda:	4c02      	ldr	r4, [pc, #8]	; (13fe4 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   13fdc:	47a0      	blx	r4
	return	w;
}
   13fde:	bd10      	pop	{r4, pc}
   13fe0:	2000dbc4 	.word	0x2000dbc4
   13fe4:	000194cd 	.word	0x000194cd

00013fe8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   13fe8:	b500      	push	{lr}
   13fea:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   13fec:	4b07      	ldr	r3, [pc, #28]	; (1400c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   13fee:	881b      	ldrh	r3, [r3, #0]
   13ff0:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   13ff4:	4b06      	ldr	r3, [pc, #24]	; (14010 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   13ff6:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   13ff8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13ffc:	3202      	adds	r2, #2
   13ffe:	a901      	add	r1, sp, #4
   14000:	4b04      	ldr	r3, [pc, #16]	; (14014 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   14002:	4798      	blx	r3
	return	w;
}
   14004:	b003      	add	sp, #12
   14006:	f85d fb04 	ldr.w	pc, [sp], #4
   1400a:	bf00      	nop
   1400c:	0001bb0c 	.word	0x0001bb0c
   14010:	2000597c 	.word	0x2000597c
   14014:	00013fd5 	.word	0x00013fd5

00014018 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   14018:	b510      	push	{r4, lr}
   1401a:	4604      	mov	r4, r0
   1401c:	30c0      	adds	r0, #192	; 0xc0
   1401e:	4b03      	ldr	r3, [pc, #12]	; (1402c <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   14020:	4798      	blx	r3
   14022:	4620      	mov	r0, r4
   14024:	4b02      	ldr	r3, [pc, #8]	; (14030 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   14026:	4798      	blx	r3
{
} //~MemoryManagment_Class
   14028:	4620      	mov	r0, r4
   1402a:	bd10      	pop	{r4, pc}
   1402c:	000142b7 	.word	0x000142b7
   14030:	00013f5b 	.word	0x00013f5b

00014034 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   14034:	b538      	push	{r3, r4, r5, lr}
   14036:	4604      	mov	r4, r0
   14038:	4b14      	ldr	r3, [pc, #80]	; (1408c <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   1403a:	4798      	blx	r3
   1403c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14040:	4b13      	ldr	r3, [pc, #76]	; (14090 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   14042:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   14044:	f44f 7500 	mov.w	r5, #512	; 0x200
   14048:	462a      	mov	r2, r5
   1404a:	2100      	movs	r1, #0
   1404c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   14050:	4b10      	ldr	r3, [pc, #64]	; (14094 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   14052:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   14054:	2300      	movs	r3, #0
   14056:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
   1405a:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
   1405e:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
   14062:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
   14066:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
   1406a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
   1406e:	490a      	ldr	r1, [pc, #40]	; (14098 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   14070:	f246 3214 	movw	r2, #25364	; 0x6314
   14074:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   14076:	4a09      	ldr	r2, [pc, #36]	; (1409c <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   14078:	6812      	ldr	r2, [r2, #0]
   1407a:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
   1407e:	f246 3118 	movw	r1, #25368	; 0x6318
   14082:	5062      	str	r2, [r4, r1]
	initiated=false;
   14084:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
   14088:	4620      	mov	r0, r4
   1408a:	bd38      	pop	{r3, r4, r5, pc}
   1408c:	00013f59 	.word	0x00013f59
   14090:	000142b5 	.word	0x000142b5
   14094:	0001a66d 	.word	0x0001a66d
   14098:	20005980 	.word	0x20005980
   1409c:	2000597c 	.word	0x2000597c

000140a0 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   140a0:	b510      	push	{r4, lr}
   140a2:	4604      	mov	r4, r0
		if (qspiFlash.Init())
   140a4:	480a      	ldr	r0, [pc, #40]	; (140d0 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   140a6:	4b0b      	ldr	r3, [pc, #44]	; (140d4 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   140a8:	4798      	blx	r3
   140aa:	b948      	cbnz	r0, 140c0 <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
   140ac:	490a      	ldr	r1, [pc, #40]	; (140d8 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   140ae:	480b      	ldr	r0, [pc, #44]	; (140dc <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   140b0:	4b0b      	ldr	r3, [pc, #44]	; (140e0 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   140b2:	4798      	blx	r3
			initiated=false;
   140b4:	2300      	movs	r3, #0
   140b6:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
   140ba:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
   140be:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
   140c0:	4908      	ldr	r1, [pc, #32]	; (140e4 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   140c2:	4806      	ldr	r0, [pc, #24]	; (140dc <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   140c4:	4b06      	ldr	r3, [pc, #24]	; (140e0 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   140c6:	4798      	blx	r3
			initiated=true;
   140c8:	2301      	movs	r3, #1
   140ca:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
   140ce:	e7f4      	b.n	140ba <_ZN17MemoryFlash_Class4InitEm+0x1a>
   140d0:	2000dbc4 	.word	0x2000dbc4
   140d4:	00019431 	.word	0x00019431
   140d8:	0001afdc 	.word	0x0001afdc
   140dc:	20003a00 	.word	0x20003a00
   140e0:	00011a05 	.word	0x00011a05
   140e4:	0001afbc 	.word	0x0001afbc

000140e8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   140e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140ea:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   140ec:	4b10      	ldr	r3, [pc, #64]	; (14130 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   140ee:	681c      	ldr	r4, [r3, #0]
   140f0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   140f4:	f246 3314 	movw	r3, #25364	; 0x6314
   140f8:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   140fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   140fe:	4622      	mov	r2, r4
   14100:	4629      	mov	r1, r5
   14102:	480c      	ldr	r0, [pc, #48]	; (14134 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   14104:	4e0c      	ldr	r6, [pc, #48]	; (14138 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   14106:	47b0      	blx	r6
	  if (r==0)
   14108:	4603      	mov	r3, r0
   1410a:	b108      	cbz	r0, 14110 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   1410c:	4618      	mov	r0, r3
   1410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   14110:	883b      	ldrh	r3, [r7, #0]
   14112:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   14114:	4e07      	ldr	r6, [pc, #28]	; (14134 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   14116:	4621      	mov	r1, r4
   14118:	4630      	mov	r0, r6
   1411a:	4b08      	ldr	r3, [pc, #32]	; (1413c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   1411c:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1411e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14122:	4622      	mov	r2, r4
   14124:	4629      	mov	r1, r5
   14126:	4630      	mov	r0, r6
   14128:	4c05      	ldr	r4, [pc, #20]	; (14140 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   1412a:	47a0      	blx	r4
   1412c:	4603      	mov	r3, r0
		  return	w;
   1412e:	e7ed      	b.n	1410c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   14130:	2000597c 	.word	0x2000597c
   14134:	2000dbc4 	.word	0x2000dbc4
   14138:	00019501 	.word	0x00019501
   1413c:	0001949d 	.word	0x0001949d
   14140:	000194cd 	.word	0x000194cd

00014144 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
   14144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14148:	4604      	mov	r4, r0
   1414a:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
   1414c:	f246 3318 	movw	r3, #25368	; 0x6318
   14150:	58c3      	ldr	r3, [r0, r3]
   14152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   14156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   1415a:	d906      	bls.n	1416a <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
   1415c:	4b14      	ldr	r3, [pc, #80]	; (141b0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   1415e:	681b      	ldr	r3, [r3, #0]
   14160:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
   14164:	f246 3218 	movw	r2, #25368	; 0x6318
   14168:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
   1416a:	f246 3618 	movw	r6, #25368	; 0x6318
   1416e:	59a1      	ldr	r1, [r4, r6]
   14170:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   14174:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
   14176:	4d0f      	ldr	r5, [pc, #60]	; (141b4 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
   14178:	4628      	mov	r0, r5
   1417a:	4b0f      	ldr	r3, [pc, #60]	; (141b8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
   1417c:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
   1417e:	4628      	mov	r0, r5
   14180:	4f0e      	ldr	r7, [pc, #56]	; (141bc <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
   14182:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
   14184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14188:	59a2      	ldr	r2, [r4, r6]
   1418a:	4641      	mov	r1, r8
   1418c:	4628      	mov	r0, r5
   1418e:	4e0c      	ldr	r6, [pc, #48]	; (141c0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
   14190:	47b0      	blx	r6
   14192:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
   14194:	4628      	mov	r0, r5
   14196:	47b8      	blx	r7
		   if (w==0)
   14198:	b12e      	cbz	r6, 141a6 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
   1419a:	4b05      	ldr	r3, [pc, #20]	; (141b0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   1419c:	6818      	ldr	r0, [r3, #0]
   1419e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
   141a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
   141a6:	f246 3318 	movw	r3, #25368	; 0x6318
   141aa:	58e0      	ldr	r0, [r4, r3]
   141ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141b0:	2000597c 	.word	0x2000597c
   141b4:	2000dbc4 	.word	0x2000dbc4
   141b8:	0001949d 	.word	0x0001949d
   141bc:	000195b1 	.word	0x000195b1
   141c0:	000194cd 	.word	0x000194cd

000141c4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   141c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   141c8:	4c2b      	ldr	r4, [pc, #172]	; (14278 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   141ca:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   141ce:	492b      	ldr	r1, [pc, #172]	; (1427c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   141d0:	4628      	mov	r0, r5
   141d2:	4f2b      	ldr	r7, [pc, #172]	; (14280 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   141d4:	47b8      	blx	r7
   141d6:	4e2b      	ldr	r6, [pc, #172]	; (14284 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   141d8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 142b0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   141dc:	4632      	mov	r2, r6
   141de:	4641      	mov	r1, r8
   141e0:	4628      	mov	r0, r5
   141e2:	4d29      	ldr	r5, [pc, #164]	; (14288 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   141e4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   141e6:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   141ea:	4928      	ldr	r1, [pc, #160]	; (1428c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   141ec:	4648      	mov	r0, r9
   141ee:	47b8      	blx	r7
   141f0:	4632      	mov	r2, r6
   141f2:	4641      	mov	r1, r8
   141f4:	4648      	mov	r0, r9
   141f6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   141f8:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   141fc:	4924      	ldr	r1, [pc, #144]	; (14290 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   141fe:	4648      	mov	r0, r9
   14200:	47b8      	blx	r7
   14202:	4632      	mov	r2, r6
   14204:	4641      	mov	r1, r8
   14206:	4648      	mov	r0, r9
   14208:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1420a:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   1420e:	4921      	ldr	r1, [pc, #132]	; (14294 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   14210:	4648      	mov	r0, r9
   14212:	47b8      	blx	r7
   14214:	4632      	mov	r2, r6
   14216:	4641      	mov	r1, r8
   14218:	4648      	mov	r0, r9
   1421a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1421c:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   14220:	491d      	ldr	r1, [pc, #116]	; (14298 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   14222:	4648      	mov	r0, r9
   14224:	47b8      	blx	r7
   14226:	4632      	mov	r2, r6
   14228:	4641      	mov	r1, r8
   1422a:	4648      	mov	r0, r9
   1422c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1422e:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   14232:	491a      	ldr	r1, [pc, #104]	; (1429c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   14234:	4648      	mov	r0, r9
   14236:	47b8      	blx	r7
   14238:	4632      	mov	r2, r6
   1423a:	4641      	mov	r1, r8
   1423c:	4648      	mov	r0, r9
   1423e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   14240:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   14244:	4916      	ldr	r1, [pc, #88]	; (142a0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   14246:	4648      	mov	r0, r9
   14248:	47b8      	blx	r7
   1424a:	4632      	mov	r2, r6
   1424c:	4641      	mov	r1, r8
   1424e:	4648      	mov	r0, r9
   14250:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   14252:	f1a4 0918 	sub.w	r9, r4, #24
   14256:	4913      	ldr	r1, [pc, #76]	; (142a4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   14258:	4648      	mov	r0, r9
   1425a:	47b8      	blx	r7
   1425c:	4632      	mov	r2, r6
   1425e:	4641      	mov	r1, r8
   14260:	4648      	mov	r0, r9
   14262:	47a8      	blx	r5
   14264:	3408      	adds	r4, #8
   14266:	4620      	mov	r0, r4
   14268:	4b0f      	ldr	r3, [pc, #60]	; (142a8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   1426a:	4798      	blx	r3
   1426c:	4632      	mov	r2, r6
   1426e:	490f      	ldr	r1, [pc, #60]	; (142ac <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   14270:	4620      	mov	r0, r4
   14272:	47a8      	blx	r5
   14274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14278:	20006a78 	.word	0x20006a78
   1427c:	2000deb0 	.word	0x2000deb0
   14280:	000100e1 	.word	0x000100e1
   14284:	20000000 	.word	0x20000000
   14288:	00019fb9 	.word	0x00019fb9
   1428c:	2000df44 	.word	0x2000df44
   14290:	2000e068 	.word	0x2000e068
   14294:	2000df64 	.word	0x2000df64
   14298:	2000e028 	.word	0x2000e028
   1429c:	2000e048 	.word	0x2000e048
   142a0:	2000df20 	.word	0x2000df20
   142a4:	2000dfc0 	.word	0x2000dfc0
   142a8:	00014035 	.word	0x00014035
   142ac:	00014019 	.word	0x00014019
   142b0:	00010119 	.word	0x00010119

000142b4 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   142b4:	4770      	bx	lr

000142b6 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   142b6:	4770      	bx	lr

000142b8 <_ZN12Scavenge_FanD1Ev>:
} //Scavenge_Fan

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
   142b8:	4770      	bx	lr
	...

000142bc <_ZN12Scavenge_Fan10ReadStatusEv>:
	{
	}
	return isOK;
}

uint8_t	Scavenge_Fan::ReadStatus(void){
   142bc:	b510      	push	{r4, lr}
   142be:	4604      	mov	r4, r0
	uint8_t r=expander->ReadGPIORegister();
   142c0:	6880      	ldr	r0, [r0, #8]
   142c2:	4b06      	ldr	r3, [pc, #24]	; (142dc <_ZN12Scavenge_Fan10ReadStatusEv+0x20>)
   142c4:	4798      	blx	r3
	
	
	scavengeData.tempFault=r&(0x01<<(7));
   142c6:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   142ca:	70e2      	strb	r2, [r4, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
   142cc:	f3c0 1280 	ubfx	r2, r0, #6, #1
   142d0:	7122      	strb	r2, [r4, #4]
	scavengeData.relayFault=r&(0x01<<(4));
   142d2:	f3c0 1300 	ubfx	r3, r0, #4, #1
   142d6:	7163      	strb	r3, [r4, #5]
	return r;
	
}
   142d8:	bd10      	pop	{r4, pc}
   142da:	bf00      	nop
   142dc:	0000fcf1 	.word	0x0000fcf1

000142e0 <_ZN12Scavenge_Fan9SetEnableEb>:
uint8_t	Scavenge_Fan::SetEnable(bool state){
   142e0:	b510      	push	{r4, lr}
   142e2:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
   142e4:	f081 0201 	eor.w	r2, r1, #1
   142e8:	2101      	movs	r1, #1
   142ea:	6880      	ldr	r0, [r0, #8]
   142ec:	4b01      	ldr	r3, [pc, #4]	; (142f4 <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
   142ee:	4798      	blx	r3
   142f0:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
   142f2:	bd10      	pop	{r4, pc}
   142f4:	0000ffa9 	.word	0x0000ffa9

000142f8 <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
   142f8:	b510      	push	{r4, lr}
   142fa:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
   142fc:	4b05      	ldr	r3, [pc, #20]	; (14314 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
   142fe:	4798      	blx	r3
   14300:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
   14304:	280c      	cmp	r0, #12
	{
		bool_result=false;
   14306:	bfd4      	ite	le
   14308:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
   1430a:	2301      	movgt	r3, #1
   1430c:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
}
   1430e:	7c20      	ldrb	r0, [r4, #16]
   14310:	bd10      	pop	{r4, pc}
   14312:	bf00      	nop
   14314:	000142bd 	.word	0x000142bd

00014318 <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
   14318:	b510      	push	{r4, lr}
   1431a:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
   1431c:	4a0d      	ldr	r2, [pc, #52]	; (14354 <_ZN12Scavenge_Fan4InitEv+0x3c>)
   1431e:	60c2      	str	r2, [r0, #12]
	expander=&local_expander;
   14320:	f102 0018 	add.w	r0, r2, #24
   14324:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
   14326:	2124      	movs	r1, #36	; 0x24
   14328:	4b0b      	ldr	r3, [pc, #44]	; (14358 <_ZN12Scavenge_Fan4InitEv+0x40>)
   1432a:	4798      	blx	r3
	if (i2c->initiated)
   1432c:	68e0      	ldr	r0, [r4, #12]
   1432e:	7a03      	ldrb	r3, [r0, #8]
   14330:	b123      	cbz	r3, 1433c <_ZN12Scavenge_Fan4InitEv+0x24>
	if (i2c->isOK)
   14332:	68e3      	ldr	r3, [r4, #12]
   14334:	7a5b      	ldrb	r3, [r3, #9]
   14336:	b923      	cbnz	r3, 14342 <_ZN12Scavenge_Fan4InitEv+0x2a>
}
   14338:	78a0      	ldrb	r0, [r4, #2]
   1433a:	bd10      	pop	{r4, pc}
		i2c->Init();
   1433c:	4b07      	ldr	r3, [pc, #28]	; (1435c <_ZN12Scavenge_Fan4InitEv+0x44>)
   1433e:	4798      	blx	r3
   14340:	e7f7      	b.n	14332 <_ZN12Scavenge_Fan4InitEv+0x1a>
		expander->SetPortInput(0xf0);
   14342:	21f0      	movs	r1, #240	; 0xf0
   14344:	68a0      	ldr	r0, [r4, #8]
   14346:	4b06      	ldr	r3, [pc, #24]	; (14360 <_ZN12Scavenge_Fan4InitEv+0x48>)
   14348:	4798      	blx	r3
		isOK=SelfTest();
   1434a:	4620      	mov	r0, r4
   1434c:	4b05      	ldr	r3, [pc, #20]	; (14364 <_ZN12Scavenge_Fan4InitEv+0x4c>)
   1434e:	4798      	blx	r3
   14350:	70a0      	strb	r0, [r4, #2]
   14352:	e7f1      	b.n	14338 <_ZN12Scavenge_Fan4InitEv+0x20>
   14354:	2000cd9c 	.word	0x2000cd9c
   14358:	0000fc0d 	.word	0x0000fc0d
   1435c:	0000fa59 	.word	0x0000fa59
   14360:	0000fdf5 	.word	0x0000fdf5
   14364:	000142f9 	.word	0x000142f9

00014368 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
   14368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1436a:	4c0e      	ldr	r4, [pc, #56]	; (143a4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x3c>)
   1436c:	490e      	ldr	r1, [pc, #56]	; (143a8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
   1436e:	4620      	mov	r0, r4
   14370:	4b0e      	ldr	r3, [pc, #56]	; (143ac <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
   14372:	4798      	blx	r3
   14374:	4e0e      	ldr	r6, [pc, #56]	; (143b0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
   14376:	4632      	mov	r2, r6
   14378:	490e      	ldr	r1, [pc, #56]	; (143b4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x4c>)
   1437a:	4620      	mov	r0, r4
   1437c:	4d0e      	ldr	r5, [pc, #56]	; (143b8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x50>)
   1437e:	47a8      	blx	r5
static MCP23008_Class local_expander;
   14380:	f104 0718 	add.w	r7, r4, #24
   14384:	4638      	mov	r0, r7
   14386:	4b0d      	ldr	r3, [pc, #52]	; (143bc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x54>)
   14388:	4798      	blx	r3
   1438a:	4632      	mov	r2, r6
   1438c:	490c      	ldr	r1, [pc, #48]	; (143c0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x58>)
   1438e:	4638      	mov	r0, r7
   14390:	47a8      	blx	r5
	isOK=false;
   14392:	2300      	movs	r3, #0
   14394:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   14398:	4632      	mov	r2, r6
   1439a:	490a      	ldr	r1, [pc, #40]	; (143c4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x5c>)
   1439c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   143a0:	47a8      	blx	r5
   143a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143a4:	2000cd9c 	.word	0x2000cd9c
   143a8:	2000dfe0 	.word	0x2000dfe0
   143ac:	0000fa29 	.word	0x0000fa29
   143b0:	20000000 	.word	0x20000000
   143b4:	0000fa45 	.word	0x0000fa45
   143b8:	00019fb9 	.word	0x00019fb9
   143bc:	0000fbe5 	.word	0x0000fbe5
   143c0:	0000fbf9 	.word	0x0000fbf9
   143c4:	000142b9 	.word	0x000142b9

000143c8 <_ZL17ConversionTimeoutPK10timer_task>:
	temperatures.converterReady[2]=true;
	temperatures.SetModuleReady(2);
	temperatures.converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	temperatures.converterTimeout=true;
   143c8:	2201      	movs	r2, #1
   143ca:	4b02      	ldr	r3, [pc, #8]	; (143d4 <_ZL17ConversionTimeoutPK10timer_task+0xc>)
   143cc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   143d0:	bf00      	nop
   143d2:	4770      	bx	lr
   143d4:	2000cde4 	.word	0x2000cde4

000143d8 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   143d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143da:	4607      	mov	r7, r0
   143dc:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   143e0:	d007      	beq.n	143f2 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   143e2:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   143e6:	4e05      	ldr	r6, [pc, #20]	; (143fc <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   143e8:	3c68      	subs	r4, #104	; 0x68
   143ea:	4620      	mov	r0, r4
   143ec:	47b0      	blx	r6
   143ee:	42a5      	cmp	r5, r4
   143f0:	d1fa      	bne.n	143e8 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   143f2:	4638      	mov	r0, r7
   143f4:	4b02      	ldr	r3, [pc, #8]	; (14400 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   143f6:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   143f8:	4638      	mov	r0, r7
   143fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143fc:	000182ad 	.word	0x000182ad
   14400:	000182ad 	.word	0x000182ad

00014404 <_ZL15Converter1Readyv>:
	temperatures.converterReady[0]=true;
   14404:	4b05      	ldr	r3, [pc, #20]	; (1441c <_ZL15Converter1Readyv+0x18>)
   14406:	2201      	movs	r2, #1
   14408:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsOneConversionFinished(){
	return converterReady[0]|converterReady[1]|converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   1440c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   14410:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	temperatures.converterTimeout=false;
   14414:	2200      	movs	r2, #0
   14416:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   1441a:	4770      	bx	lr
   1441c:	2000cde4 	.word	0x2000cde4

00014420 <_ZL15Converter2Readyv>:
	temperatures.converterReady[1]=true;
   14420:	4b05      	ldr	r3, [pc, #20]	; (14438 <_ZL15Converter2Readyv+0x18>)
   14422:	2201      	movs	r2, #1
   14424:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   14428:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   1442c:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	temperatures.converterTimeout=false;
   14430:	2200      	movs	r2, #0
   14432:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14436:	4770      	bx	lr
   14438:	2000cde4 	.word	0x2000cde4

0001443c <_ZL15Converter3Readyv>:
	temperatures.converterReady[2]=true;
   1443c:	4b05      	ldr	r3, [pc, #20]	; (14454 <_ZL15Converter3Readyv+0x18>)
   1443e:	2201      	movs	r2, #1
   14440:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   14444:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   14448:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	temperatures.converterTimeout=false;
   1444c:	2200      	movs	r2, #0
   1444e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14452:	4770      	bx	lr
   14454:	2000cde4 	.word	0x2000cde4

00014458 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   14458:	b570      	push	{r4, r5, r6, lr}
   1445a:	4604      	mov	r4, r0
   1445c:	460e      	mov	r6, r1
   1445e:	4b0b      	ldr	r3, [pc, #44]	; (1448c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   14460:	4798      	blx	r3
   14462:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   14466:	4d0a      	ldr	r5, [pc, #40]	; (14490 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   14468:	47a8      	blx	r5
   1446a:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1446e:	47a8      	blx	r5
   14470:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   14474:	47a8      	blx	r5
		spiLite=&ltSPI;
   14476:	4b07      	ldr	r3, [pc, #28]	; (14494 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x3c>)
   14478:	f503 7201 	add.w	r2, r3, #516	; 0x204
   1447c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   14480:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
		SPIA=SPI_LTC;
   14484:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   14488:	4620      	mov	r0, r4
   1448a:	bd70      	pop	{r4, r5, r6, pc}
   1448c:	00018299 	.word	0x00018299
   14490:	00018299 	.word	0x00018299
   14494:	2000cde4 	.word	0x2000cde4

00014498 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   14498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1449c:	4605      	mov	r5, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1449e:	233d      	movs	r3, #61	; 0x3d
   144a0:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   144a4:	231b      	movs	r3, #27
   144a6:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   144aa:	2327      	movs	r3, #39	; 0x27
   144ac:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   144b0:	f500 77f0 	add.w	r7, r0, #480	; 0x1e0
   144b4:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
   144b8:	2400      	movs	r4, #0
		module[ii].Init(csPins[ii],spiLite);
   144ba:	f8df b038 	ldr.w	fp, [pc, #56]	; 144f4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   144be:	f8df a038 	ldr.w	sl, [pc, #56]	; 144f8 <_ZN24TemperatureSensors_Class11InitModulesEv+0x60>
   144c2:	f8df 9038 	ldr.w	r9, [pc, #56]	; 144fc <_ZN24TemperatureSensors_Class11InitModulesEv+0x64>
		module[ii].Init(csPins[ii],spiLite);
   144c6:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   144ca:	f857 1b04 	ldr.w	r1, [r7], #4
   144ce:	4630      	mov	r0, r6
   144d0:	47d8      	blx	fp
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   144d2:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
   144d6:	f083 0301 	eor.w	r3, r3, #1
   144da:	b2e2      	uxtb	r2, r4
   144dc:	4651      	mov	r1, sl
   144de:	4648      	mov	r0, r9
   144e0:	f8df 801c 	ldr.w	r8, [pc, #28]	; 14500 <_ZN24TemperatureSensors_Class11InitModulesEv+0x68>
   144e4:	47c0      	blx	r8
   144e6:	3401      	adds	r4, #1
   144e8:	3668      	adds	r6, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   144ea:	2c03      	cmp	r4, #3
   144ec:	d1eb      	bne.n	144c6 <_ZN24TemperatureSensors_Class11InitModulesEv+0x2e>
}
   144ee:	2001      	movs	r0, #1
   144f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f4:	000182c1 	.word	0x000182c1
   144f8:	0001affc 	.word	0x0001affc
   144fc:	20003a00 	.word	0x20003a00
   14500:	00011951 	.word	0x00011951

00014504 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   14504:	b538      	push	{r3, r4, r5, lr}
   14506:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   14508:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   1450c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   14510:	4b1d      	ldr	r3, [pc, #116]	; (14588 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   14512:	4798      	blx	r3
	spiLite->init();
   14514:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   14518:	4b1c      	ldr	r3, [pc, #112]	; (1458c <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   1451a:	4798      	blx	r3
	if (spiLite->ready)
   1451c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   14520:	781b      	ldrb	r3, [r3, #0]
   14522:	bb63      	cbnz	r3, 1457e <_ZN24TemperatureSensors_Class4InitEv+0x7a>
		logger.SaveEvent("SPI Temperatures Failed");
   14524:	491a      	ldr	r1, [pc, #104]	; (14590 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   14526:	481b      	ldr	r0, [pc, #108]	; (14594 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   14528:	4b1b      	ldr	r3, [pc, #108]	; (14598 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   1452a:	4798      	blx	r3
	ptrTemperaturesClass=this;
   1452c:	4b1b      	ldr	r3, [pc, #108]	; (1459c <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   1452e:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	ext_irq_register(PIN_PB08, Converter1Ready);
   14532:	491b      	ldr	r1, [pc, #108]	; (145a0 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   14534:	2028      	movs	r0, #40	; 0x28
   14536:	4d1b      	ldr	r5, [pc, #108]	; (145a4 <_ZN24TemperatureSensors_Class4InitEv+0xa0>)
   14538:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   1453a:	491b      	ldr	r1, [pc, #108]	; (145a8 <_ZN24TemperatureSensors_Class4InitEv+0xa4>)
   1453c:	2029      	movs	r0, #41	; 0x29
   1453e:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   14540:	491a      	ldr	r1, [pc, #104]	; (145ac <_ZN24TemperatureSensors_Class4InitEv+0xa8>)
   14542:	2021      	movs	r0, #33	; 0x21
   14544:	47a8      	blx	r5
	InitModules();
   14546:	4620      	mov	r0, r4
   14548:	4b19      	ldr	r3, [pc, #100]	; (145b0 <_ZN24TemperatureSensors_Class4InitEv+0xac>)
   1454a:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   1454c:	2301      	movs	r3, #1
   1454e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   14552:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   14556:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   1455a:	2300      	movs	r3, #0
   1455c:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
   14560:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
   14564:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   14568:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   1456c:	4013      	ands	r3, r2
   1456e:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   14572:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   14574:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   14578:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   1457c:	bd38      	pop	{r3, r4, r5, pc}
		logger.SaveEvent("SPI Temperatures Started");
   1457e:	490d      	ldr	r1, [pc, #52]	; (145b4 <_ZN24TemperatureSensors_Class4InitEv+0xb0>)
   14580:	4804      	ldr	r0, [pc, #16]	; (14594 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   14582:	4b05      	ldr	r3, [pc, #20]	; (14598 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   14584:	4798      	blx	r3
   14586:	e7d1      	b.n	1452c <_ZN24TemperatureSensors_Class4InitEv+0x28>
   14588:	00018bcd 	.word	0x00018bcd
   1458c:	00018b71 	.word	0x00018b71
   14590:	0001b020 	.word	0x0001b020
   14594:	20003a00 	.word	0x20003a00
   14598:	00011a05 	.word	0x00011a05
   1459c:	2000cde4 	.word	0x2000cde4
   145a0:	00014405 	.word	0x00014405
   145a4:	000035f5 	.word	0x000035f5
   145a8:	00014421 	.word	0x00014421
   145ac:	0001443d 	.word	0x0001443d
   145b0:	00014499 	.word	0x00014499
   145b4:	0001b004 	.word	0x0001b004

000145b8 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   145b8:	b510      	push	{r4, lr}
   145ba:	4604      	mov	r4, r0
	converterTimeout=false;
   145bc:	2200      	movs	r2, #0
   145be:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   145c2:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
   145c6:	4403      	add	r3, r0
   145c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   145cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   145d0:	4907      	ldr	r1, [pc, #28]	; (145f0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   145d2:	4808      	ldr	r0, [pc, #32]	; (145f4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   145d4:	4b08      	ldr	r3, [pc, #32]	; (145f8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   145d6:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   145d8:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   145dc:	2368      	movs	r3, #104	; 0x68
   145de:	fb03 4000 	mla	r0, r3, r0, r4
   145e2:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   145e6:	30a8      	adds	r0, #168	; 0xa8
   145e8:	4b04      	ldr	r3, [pc, #16]	; (145fc <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   145ea:	4798      	blx	r3
   145ec:	bd10      	pop	{r4, pc}
   145ee:	bf00      	nop
   145f0:	000143c9 	.word	0x000143c9
   145f4:	2000d000 	.word	0x2000d000
   145f8:	000103b5 	.word	0x000103b5
   145fc:	000183b5 	.word	0x000183b5

00014600 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   14600:	b538      	push	{r3, r4, r5, lr}
   14602:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   14604:	491e      	ldr	r1, [pc, #120]	; (14680 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   14606:	481f      	ldr	r0, [pc, #124]	; (14684 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   14608:	4b1f      	ldr	r3, [pc, #124]	; (14688 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   1460a:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   1460c:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   14610:	2568      	movs	r5, #104	; 0x68
   14612:	fb05 4000 	mla	r0, r5, r0, r4
   14616:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   1461a:	30a8      	adds	r0, #168	; 0xa8
   1461c:	4b1b      	ldr	r3, [pc, #108]	; (1468c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   1461e:	4798      	blx	r3
   14620:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   14624:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
   14628:	fb05 4502 	mla	r5, r5, r2, r4
   1462c:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   14630:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   14634:	2b01      	cmp	r3, #1
   14636:	d00d      	beq.n	14654 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   14638:	4b15      	ldr	r3, [pc, #84]	; (14690 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   1463a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   1463e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   14642:	3301      	adds	r3, #1
   14644:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   14646:	2b04      	cmp	r3, #4
   14648:	d00c      	beq.n	14664 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   1464a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
   1464e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   14652:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   14654:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   14658:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1465c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   14660:	66d8      	str	r0, [r3, #108]	; 0x6c
   14662:	e7ec      	b.n	1463e <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   14664:	2300      	movs	r3, #0
   14666:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
		currentModule++;
   1466a:	3201      	adds	r2, #1
   1466c:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   1466e:	2a03      	cmp	r2, #3
		currentModule++;
   14670:	bf12      	itee	ne
   14672:	f884 21ff 	strbne.w	r2, [r4, #511]	; 0x1ff
			currentModule=0;
   14676:	2300      	moveq	r3, #0
   14678:	f884 31ff 	strbeq.w	r3, [r4, #511]	; 0x1ff
   1467c:	e7e7      	b.n	1464e <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   1467e:	bf00      	nop
   14680:	000143c9 	.word	0x000143c9
   14684:	2000d000 	.word	0x2000d000
   14688:	0001035d 	.word	0x0001035d
   1468c:	000184bd 	.word	0x000184bd
   14690:	c479c000 	.word	0xc479c000

00014694 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   14694:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   14698:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   1469c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   146a0:	4013      	ands	r3, r2
}
   146a2:	4018      	ands	r0, r3
   146a4:	4770      	bx	lr
	...

000146a8 <_GLOBAL__sub_I_ptrTemperaturesClass>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   146a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   146ac:	4c30      	ldr	r4, [pc, #192]	; (14770 <_GLOBAL__sub_I_ptrTemperaturesClass+0xc8>)
   146ae:	f504 7507 	add.w	r5, r4, #540	; 0x21c
   146b2:	4930      	ldr	r1, [pc, #192]	; (14774 <_GLOBAL__sub_I_ptrTemperaturesClass+0xcc>)
   146b4:	4628      	mov	r0, r5
   146b6:	4f30      	ldr	r7, [pc, #192]	; (14778 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd0>)
   146b8:	47b8      	blx	r7
   146ba:	4e30      	ldr	r6, [pc, #192]	; (1477c <_GLOBAL__sub_I_ptrTemperaturesClass+0xd4>)
   146bc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 147b4 <_GLOBAL__sub_I_ptrTemperaturesClass+0x10c>
   146c0:	4632      	mov	r2, r6
   146c2:	4641      	mov	r1, r8
   146c4:	4628      	mov	r0, r5
   146c6:	4d2e      	ldr	r5, [pc, #184]	; (14780 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd8>)
   146c8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   146ca:	f504 790f 	add.w	r9, r4, #572	; 0x23c
   146ce:	492d      	ldr	r1, [pc, #180]	; (14784 <_GLOBAL__sub_I_ptrTemperaturesClass+0xdc>)
   146d0:	4648      	mov	r0, r9
   146d2:	47b8      	blx	r7
   146d4:	4632      	mov	r2, r6
   146d6:	4641      	mov	r1, r8
   146d8:	4648      	mov	r0, r9
   146da:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   146dc:	f504 7917 	add.w	r9, r4, #604	; 0x25c
   146e0:	4929      	ldr	r1, [pc, #164]	; (14788 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe0>)
   146e2:	4648      	mov	r0, r9
   146e4:	47b8      	blx	r7
   146e6:	4632      	mov	r2, r6
   146e8:	4641      	mov	r1, r8
   146ea:	4648      	mov	r0, r9
   146ec:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   146ee:	f504 791f 	add.w	r9, r4, #636	; 0x27c
   146f2:	4926      	ldr	r1, [pc, #152]	; (1478c <_GLOBAL__sub_I_ptrTemperaturesClass+0xe4>)
   146f4:	4648      	mov	r0, r9
   146f6:	47b8      	blx	r7
   146f8:	4632      	mov	r2, r6
   146fa:	4641      	mov	r1, r8
   146fc:	4648      	mov	r0, r9
   146fe:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   14700:	f504 7927 	add.w	r9, r4, #668	; 0x29c
   14704:	4922      	ldr	r1, [pc, #136]	; (14790 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe8>)
   14706:	4648      	mov	r0, r9
   14708:	47b8      	blx	r7
   1470a:	4632      	mov	r2, r6
   1470c:	4641      	mov	r1, r8
   1470e:	4648      	mov	r0, r9
   14710:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   14712:	f504 792f 	add.w	r9, r4, #700	; 0x2bc
   14716:	491f      	ldr	r1, [pc, #124]	; (14794 <_GLOBAL__sub_I_ptrTemperaturesClass+0xec>)
   14718:	4648      	mov	r0, r9
   1471a:	47b8      	blx	r7
   1471c:	4632      	mov	r2, r6
   1471e:	4641      	mov	r1, r8
   14720:	4648      	mov	r0, r9
   14722:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   14724:	f504 7937 	add.w	r9, r4, #732	; 0x2dc
   14728:	491b      	ldr	r1, [pc, #108]	; (14798 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf0>)
   1472a:	4648      	mov	r0, r9
   1472c:	47b8      	blx	r7
   1472e:	4632      	mov	r2, r6
   14730:	4641      	mov	r1, r8
   14732:	4648      	mov	r0, r9
   14734:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   14736:	f504 793f 	add.w	r9, r4, #764	; 0x2fc
   1473a:	4918      	ldr	r1, [pc, #96]	; (1479c <_GLOBAL__sub_I_ptrTemperaturesClass+0xf4>)
   1473c:	4648      	mov	r0, r9
   1473e:	47b8      	blx	r7
   14740:	4632      	mov	r2, r6
   14742:	4641      	mov	r1, r8
   14744:	4648      	mov	r0, r9
   14746:	47a8      	blx	r5
static LT_SPI	ltSPI;
   14748:	f504 7701 	add.w	r7, r4, #516	; 0x204
   1474c:	4638      	mov	r0, r7
   1474e:	4b14      	ldr	r3, [pc, #80]	; (147a0 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf8>)
   14750:	4798      	blx	r3
   14752:	4632      	mov	r2, r6
   14754:	4913      	ldr	r1, [pc, #76]	; (147a4 <_GLOBAL__sub_I_ptrTemperaturesClass+0xfc>)
   14756:	4638      	mov	r0, r7
   14758:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   1475a:	4913      	ldr	r1, [pc, #76]	; (147a8 <_GLOBAL__sub_I_ptrTemperaturesClass+0x100>)
   1475c:	4620      	mov	r0, r4
   1475e:	4b13      	ldr	r3, [pc, #76]	; (147ac <_GLOBAL__sub_I_ptrTemperaturesClass+0x104>)
   14760:	4798      	blx	r3
   14762:	4632      	mov	r2, r6
   14764:	4912      	ldr	r1, [pc, #72]	; (147b0 <_GLOBAL__sub_I_ptrTemperaturesClass+0x108>)
   14766:	4620      	mov	r0, r4
   14768:	47a8      	blx	r5
   1476a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1476e:	bf00      	nop
   14770:	2000cde4 	.word	0x2000cde4
   14774:	2000deb0 	.word	0x2000deb0
   14778:	000100e1 	.word	0x000100e1
   1477c:	20000000 	.word	0x20000000
   14780:	00019fb9 	.word	0x00019fb9
   14784:	2000df44 	.word	0x2000df44
   14788:	2000e068 	.word	0x2000e068
   1478c:	2000df64 	.word	0x2000df64
   14790:	2000e028 	.word	0x2000e028
   14794:	2000e048 	.word	0x2000e048
   14798:	2000df20 	.word	0x2000df20
   1479c:	2000dfc0 	.word	0x2000dfc0
   147a0:	00018b35 	.word	0x00018b35
   147a4:	00018b5d 	.word	0x00018b5d
   147a8:	2000dee8 	.word	0x2000dee8
   147ac:	00014459 	.word	0x00014459
   147b0:	000143d9 	.word	0x000143d9
   147b4:	00010119 	.word	0x00010119

000147b8 <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
   147b8:	b580      	push	{r7, lr}
   147ba:	b082      	sub	sp, #8
   147bc:	af00      	add	r7, sp, #0
   147be:	6078      	str	r0, [r7, #4]
   147c0:	687b      	ldr	r3, [r7, #4]
   147c2:	4618      	mov	r0, r3
   147c4:	4b06      	ldr	r3, [pc, #24]	; (147e0 <_ZN13CANOpen_ClassC1Ev+0x28>)
   147c6:	4798      	blx	r3
   147c8:	4a06      	ldr	r2, [pc, #24]	; (147e4 <_ZN13CANOpen_ClassC1Ev+0x2c>)
   147ca:	687b      	ldr	r3, [r7, #4]
   147cc:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   147ce:	4a06      	ldr	r2, [pc, #24]	; (147e8 <_ZN13CANOpen_ClassC1Ev+0x30>)
   147d0:	687b      	ldr	r3, [r7, #4]
   147d2:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
   147d4:	687b      	ldr	r3, [r7, #4]
   147d6:	4618      	mov	r0, r3
   147d8:	3708      	adds	r7, #8
   147da:	46bd      	mov	sp, r7
   147dc:	bd80      	pop	{r7, pc}
   147de:	bf00      	nop
   147e0:	0001496d 	.word	0x0001496d
   147e4:	0001b040 	.word	0x0001b040
   147e8:	2000d100 	.word	0x2000d100

000147ec <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
   147ec:	b580      	push	{r7, lr}
   147ee:	b082      	sub	sp, #8
   147f0:	af00      	add	r7, sp, #0
   147f2:	6078      	str	r0, [r7, #4]
   147f4:	6039      	str	r1, [r7, #0]
   147f6:	687b      	ldr	r3, [r7, #4]
   147f8:	4618      	mov	r0, r3
   147fa:	4b08      	ldr	r3, [pc, #32]	; (1481c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
   147fc:	4798      	blx	r3
   147fe:	4a08      	ldr	r2, [pc, #32]	; (14820 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
   14800:	687b      	ldr	r3, [r7, #4]
   14802:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   14804:	4a07      	ldr	r2, [pc, #28]	; (14824 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
   14806:	687b      	ldr	r3, [r7, #4]
   14808:	6013      	str	r3, [r2, #0]
	canDescr=descr;
   1480a:	687b      	ldr	r3, [r7, #4]
   1480c:	683a      	ldr	r2, [r7, #0]
   1480e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
} //CANOpen_Class
   14812:	687b      	ldr	r3, [r7, #4]
   14814:	4618      	mov	r0, r3
   14816:	3708      	adds	r7, #8
   14818:	46bd      	mov	sp, r7
   1481a:	bd80      	pop	{r7, pc}
   1481c:	0001496d 	.word	0x0001496d
   14820:	0001b040 	.word	0x0001b040
   14824:	2000d100 	.word	0x2000d100

00014828 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
   14828:	b580      	push	{r7, lr}
   1482a:	b082      	sub	sp, #8
   1482c:	af00      	add	r7, sp, #0
   1482e:	6078      	str	r0, [r7, #4]
   14830:	4a05      	ldr	r2, [pc, #20]	; (14848 <_ZN13CANOpen_ClassD1Ev+0x20>)
   14832:	687b      	ldr	r3, [r7, #4]
   14834:	601a      	str	r2, [r3, #0]
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	4618      	mov	r0, r3
   1483a:	4b04      	ldr	r3, [pc, #16]	; (1484c <_ZN13CANOpen_ClassD1Ev+0x24>)
   1483c:	4798      	blx	r3
{
} //~CANOpen_Class
   1483e:	687b      	ldr	r3, [r7, #4]
   14840:	4618      	mov	r0, r3
   14842:	3708      	adds	r7, #8
   14844:	46bd      	mov	sp, r7
   14846:	bd80      	pop	{r7, pc}
   14848:	0001b040 	.word	0x0001b040
   1484c:	000149cd 	.word	0x000149cd

00014850 <_ZN13CANOpen_Class13Init_CO_CLASSEh>:

int	CANOpen_Class::Init_CO_CLASS(uint8_t node){
   14850:	b590      	push	{r4, r7, lr}
   14852:	b083      	sub	sp, #12
   14854:	af00      	add	r7, sp, #0
   14856:	6078      	str	r0, [r7, #4]
   14858:	460b      	mov	r3, r1
   1485a:	70fb      	strb	r3, [r7, #3]
	coNode=node;
   1485c:	687b      	ldr	r3, [r7, #4]
   1485e:	78fa      	ldrb	r2, [r7, #3]
   14860:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
   14864:	6878      	ldr	r0, [r7, #4]
   14866:	687b      	ldr	r3, [r7, #4]
   14868:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
   1486c:	78fa      	ldrb	r2, [r7, #3]
   1486e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14872:	4c17      	ldr	r4, [pc, #92]	; (148d0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x80>)
   14874:	47a0      	blx	r4
   14876:	4603      	mov	r3, r0
   14878:	461a      	mov	r2, r3
   1487a:	687b      	ldr	r3, [r7, #4]
   1487c:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	
	if (err==0)
   14880:	687b      	ldr	r3, [r7, #4]
   14882:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
   14886:	2b00      	cmp	r3, #0
   14888:	d116      	bne.n	148b8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x68>
	{
		canopen_driver->canopen_ready=true;
   1488a:	4b12      	ldr	r3, [pc, #72]	; (148d4 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x84>)
   1488c:	681b      	ldr	r3, [r3, #0]
   1488e:	2201      	movs	r2, #1
   14890:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
   14894:	6878      	ldr	r0, [r7, #4]
   14896:	4b10      	ldr	r3, [pc, #64]	; (148d8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x88>)
   14898:	4798      	blx	r3
   1489a:	4603      	mov	r3, r0
   1489c:	b25a      	sxtb	r2, r3
   1489e:	687b      	ldr	r3, [r7, #4]
   148a0:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
		if (node==1)
   148a4:	78fb      	ldrb	r3, [r7, #3]
   148a6:	2b01      	cmp	r3, #1
   148a8:	d10a      	bne.n	148c0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		{
			CO_sendNMTcommand(1,0);
   148aa:	687b      	ldr	r3, [r7, #4]
   148ac:	2200      	movs	r2, #0
   148ae:	2101      	movs	r1, #1
   148b0:	4618      	mov	r0, r3
   148b2:	4b0a      	ldr	r3, [pc, #40]	; (148dc <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x8c>)
   148b4:	4798      	blx	r3
   148b6:	e003      	b.n	148c0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		}
			

		
	}else{
		return	(int)err;
   148b8:	687b      	ldr	r3, [r7, #4]
   148ba:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
   148be:	e002      	b.n	148c6 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x76>
	}
	return	(int)err;
   148c0:	687b      	ldr	r3, [r7, #4]
   148c2:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
}
   148c6:	4618      	mov	r0, r3
   148c8:	370c      	adds	r7, #12
   148ca:	46bd      	mov	sp, r7
   148cc:	bd90      	pop	{r4, r7, pc}
   148ce:	bf00      	nop
   148d0:	00014add 	.word	0x00014add
   148d4:	2000d9f4 	.word	0x2000d9f4
   148d8:	000148e1 	.word	0x000148e1
   148dc:	00014a05 	.word	0x00014a05

000148e0 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
   148e0:	b580      	push	{r7, lr}
   148e2:	b082      	sub	sp, #8
   148e4:	af00      	add	r7, sp, #0
   148e6:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
   148e8:	687b      	ldr	r3, [r7, #4]
   148ea:	4618      	mov	r0, r3
   148ec:	4b08      	ldr	r3, [pc, #32]	; (14910 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
   148ee:	4798      	blx	r3
   148f0:	4603      	mov	r3, r0
   148f2:	461a      	mov	r2, r3
   148f4:	687b      	ldr	r3, [r7, #4]
   148f6:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
   148fa:	687b      	ldr	r3, [r7, #4]
   148fc:	2200      	movs	r2, #0
   148fe:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	return	(int)err;
   14902:	687b      	ldr	r3, [r7, #4]
   14904:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
}
   14908:	4618      	mov	r0, r3
   1490a:	3708      	adds	r7, #8
   1490c:	46bd      	mov	sp, r7
   1490e:	bd80      	pop	{r7, pc}
   14910:	000154ed 	.word	0x000154ed

00014914 <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
   14914:	b580      	push	{r7, lr}
   14916:	b084      	sub	sp, #16
   14918:	af00      	add	r7, sp, #0
   1491a:	6078      	str	r0, [r7, #4]
   1491c:	460b      	mov	r3, r1
   1491e:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
   14920:	2300      	movs	r3, #0
   14922:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
   14924:	687b      	ldr	r3, [r7, #4]
   14926:	78fa      	ldrb	r2, [r7, #3]
   14928:	2101      	movs	r1, #1
   1492a:	4618      	mov	r0, r3
   1492c:	4b0d      	ldr	r3, [pc, #52]	; (14964 <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
   1492e:	4798      	blx	r3
		delay_ms(100);
   14930:	2064      	movs	r0, #100	; 0x64
   14932:	4b0d      	ldr	r3, [pc, #52]	; (14968 <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
   14934:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
   14936:	687b      	ldr	r3, [r7, #4]
   14938:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
   1493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1493e:	689a      	ldr	r2, [r3, #8]
   14940:	78fb      	ldrb	r3, [r7, #3]
   14942:	011b      	lsls	r3, r3, #4
   14944:	4413      	add	r3, r2
   14946:	781b      	ldrb	r3, [r3, #0]
   14948:	2b05      	cmp	r3, #5
   1494a:	bf0c      	ite	eq
   1494c:	2301      	moveq	r3, #1
   1494e:	2300      	movne	r3, #0
   14950:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
   14952:	687b      	ldr	r3, [r7, #4]
   14954:	7bfa      	ldrb	r2, [r7, #15]
   14956:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
//	}
	return	localOperational;
   1495a:	7bfb      	ldrb	r3, [r7, #15]
}
   1495c:	4618      	mov	r0, r3
   1495e:	3710      	adds	r7, #16
   14960:	46bd      	mov	sp, r7
   14962:	bd80      	pop	{r7, pc}
   14964:	00014a05 	.word	0x00014a05
   14968:	00003561 	.word	0x00003561

0001496c <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
   1496c:	b580      	push	{r7, lr}
   1496e:	b082      	sub	sp, #8
   14970:	af00      	add	r7, sp, #0
   14972:	6078      	str	r0, [r7, #4]
   14974:	687b      	ldr	r3, [r7, #4]
   14976:	4618      	mov	r0, r3
   14978:	4b10      	ldr	r3, [pc, #64]	; (149bc <_ZN8CO_ClassC1Ev+0x50>)
   1497a:	4798      	blx	r3
   1497c:	687b      	ldr	r3, [r7, #4]
   1497e:	f503 739c 	add.w	r3, r3, #312	; 0x138
   14982:	4618      	mov	r0, r3
   14984:	4b0e      	ldr	r3, [pc, #56]	; (149c0 <_ZN8CO_ClassC1Ev+0x54>)
   14986:	4798      	blx	r3
   14988:	4a0e      	ldr	r2, [pc, #56]	; (149c4 <_ZN8CO_ClassC1Ev+0x58>)
   1498a:	687b      	ldr	r3, [r7, #4]
   1498c:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
   1498e:	4b0e      	ldr	r3, [pc, #56]	; (149c8 <_ZN8CO_ClassC1Ev+0x5c>)
   14990:	681a      	ldr	r2, [r3, #0]
   14992:	687b      	ldr	r3, [r7, #4]
   14994:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	coCanDescr=NULL;
   14998:	687b      	ldr	r3, [r7, #4]
   1499a:	2200      	movs	r2, #0
   1499c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	CO_memoryUsed=sizeof(COO);
   149a0:	687b      	ldr	r3, [r7, #4]
   149a2:	223c      	movs	r2, #60	; 0x3c
   149a4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	timer_next=NULL;
   149a8:	687b      	ldr	r3, [r7, #4]
   149aa:	2200      	movs	r2, #0
   149ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
} //CO_Class
   149b0:	687b      	ldr	r3, [r7, #4]
   149b2:	4618      	mov	r0, r3
   149b4:	3708      	adds	r7, #8
   149b6:	46bd      	mov	sp, r7
   149b8:	bd80      	pop	{r7, pc}
   149ba:	bf00      	nop
   149bc:	00015365 	.word	0x00015365
   149c0:	00016351 	.word	0x00016351
   149c4:	0001b04c 	.word	0x0001b04c
   149c8:	2000d140 	.word	0x2000d140

000149cc <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
   149cc:	b580      	push	{r7, lr}
   149ce:	b082      	sub	sp, #8
   149d0:	af00      	add	r7, sp, #0
   149d2:	6078      	str	r0, [r7, #4]
   149d4:	4a08      	ldr	r2, [pc, #32]	; (149f8 <_ZN8CO_ClassD1Ev+0x2c>)
   149d6:	687b      	ldr	r3, [r7, #4]
   149d8:	601a      	str	r2, [r3, #0]
   149da:	687b      	ldr	r3, [r7, #4]
   149dc:	f503 739c 	add.w	r3, r3, #312	; 0x138
   149e0:	4618      	mov	r0, r3
   149e2:	4b06      	ldr	r3, [pc, #24]	; (149fc <_ZN8CO_ClassD1Ev+0x30>)
   149e4:	4798      	blx	r3
   149e6:	687b      	ldr	r3, [r7, #4]
   149e8:	4618      	mov	r0, r3
   149ea:	4b05      	ldr	r3, [pc, #20]	; (14a00 <_ZN8CO_ClassD1Ev+0x34>)
   149ec:	4798      	blx	r3
{
} //~CO_Class
   149ee:	687b      	ldr	r3, [r7, #4]
   149f0:	4618      	mov	r0, r3
   149f2:	3708      	adds	r7, #8
   149f4:	46bd      	mov	sp, r7
   149f6:	bd80      	pop	{r7, pc}
   149f8:	0001b04c 	.word	0x0001b04c
   149fc:	00016365 	.word	0x00016365
   14a00:	000153dd 	.word	0x000153dd

00014a04 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
   14a04:	b580      	push	{r7, lr}
   14a06:	b082      	sub	sp, #8
   14a08:	af00      	add	r7, sp, #0
   14a0a:	6078      	str	r0, [r7, #4]
   14a0c:	460b      	mov	r3, r1
   14a0e:	70fb      	strb	r3, [r7, #3]
   14a10:	4613      	mov	r3, r2
   14a12:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
   14a14:	687b      	ldr	r3, [r7, #4]
   14a16:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14a1a:	2b00      	cmp	r3, #0
   14a1c:	d101      	bne.n	14a22 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
   14a1e:	23f5      	movs	r3, #245	; 0xf5
   14a20:	e053      	b.n	14aca <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
   14a22:	687b      	ldr	r3, [r7, #4]
   14a24:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14a28:	78fa      	ldrb	r2, [r7, #3]
   14a2a:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
   14a2c:	687b      	ldr	r3, [r7, #4]
   14a2e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14a32:	78ba      	ldrb	r2, [r7, #2]
   14a34:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
   14a36:	78bb      	ldrb	r3, [r7, #2]
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d006      	beq.n	14a4a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
   14a3c:	4b25      	ldr	r3, [pc, #148]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14a3e:	681b      	ldr	r3, [r3, #0]
   14a40:	691b      	ldr	r3, [r3, #16]
   14a42:	7a9b      	ldrb	r3, [r3, #10]
   14a44:	78ba      	ldrb	r2, [r7, #2]
   14a46:	429a      	cmp	r2, r3
   14a48:	d135      	bne.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
   14a4a:	78fb      	ldrb	r3, [r7, #3]
   14a4c:	2b80      	cmp	r3, #128	; 0x80
   14a4e:	d01f      	beq.n	14a90 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
   14a50:	2b80      	cmp	r3, #128	; 0x80
   14a52:	dc04      	bgt.n	14a5e <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
   14a54:	2b01      	cmp	r3, #1
   14a56:	d007      	beq.n	14a68 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
   14a58:	2b02      	cmp	r3, #2
   14a5a:	d013      	beq.n	14a84 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
   14a5c:	e02b      	b.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
   14a5e:	2b81      	cmp	r3, #129	; 0x81
   14a60:	d01c      	beq.n	14a9c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
   14a62:	2b82      	cmp	r3, #130	; 0x82
   14a64:	d020      	beq.n	14aa8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
   14a66:	e026      	b.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
   14a68:	4b1a      	ldr	r3, [pc, #104]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14a6a:	681b      	ldr	r3, [r3, #0]
   14a6c:	691b      	ldr	r3, [r3, #16]
   14a6e:	695b      	ldr	r3, [r3, #20]
   14a70:	681b      	ldr	r3, [r3, #0]
   14a72:	781b      	ldrb	r3, [r3, #0]
   14a74:	2b00      	cmp	r3, #0
   14a76:	d11d      	bne.n	14ab4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
   14a78:	4b16      	ldr	r3, [pc, #88]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14a7a:	681b      	ldr	r3, [r3, #0]
   14a7c:	691b      	ldr	r3, [r3, #16]
   14a7e:	2205      	movs	r2, #5
   14a80:	701a      	strb	r2, [r3, #0]
			}
			break;
   14a82:	e017      	b.n	14ab4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
   14a84:	4b13      	ldr	r3, [pc, #76]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	691b      	ldr	r3, [r3, #16]
   14a8a:	2204      	movs	r2, #4
   14a8c:	701a      	strb	r2, [r3, #0]
			break;
   14a8e:	e012      	b.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   14a90:	4b10      	ldr	r3, [pc, #64]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14a92:	681b      	ldr	r3, [r3, #0]
   14a94:	691b      	ldr	r3, [r3, #16]
   14a96:	227f      	movs	r2, #127	; 0x7f
   14a98:	701a      	strb	r2, [r3, #0]
			break;
   14a9a:	e00c      	b.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
   14a9c:	4b0d      	ldr	r3, [pc, #52]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14a9e:	681b      	ldr	r3, [r3, #0]
   14aa0:	691b      	ldr	r3, [r3, #16]
   14aa2:	2202      	movs	r2, #2
   14aa4:	725a      	strb	r2, [r3, #9]
			break;
   14aa6:	e006      	b.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
   14aa8:	4b0a      	ldr	r3, [pc, #40]	; (14ad4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14aaa:	681b      	ldr	r3, [r3, #0]
   14aac:	691b      	ldr	r3, [r3, #16]
   14aae:	2201      	movs	r2, #1
   14ab0:	725a      	strb	r2, [r3, #9]
			break;
   14ab2:	e000      	b.n	14ab6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
   14ab4:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
   14ab6:	687a      	ldr	r2, [r7, #4]
   14ab8:	687b      	ldr	r3, [r7, #4]
   14aba:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14abe:	4619      	mov	r1, r3
   14ac0:	4610      	mov	r0, r2
   14ac2:	4b05      	ldr	r3, [pc, #20]	; (14ad8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
   14ac4:	4798      	blx	r3
   14ac6:	4603      	mov	r3, r0
   14ac8:	b2db      	uxtb	r3, r3
}
   14aca:	4618      	mov	r0, r3
   14acc:	3708      	adds	r7, #8
   14ace:	46bd      	mov	sp, r7
   14ad0:	bd80      	pop	{r7, pc}
   14ad2:	bf00      	nop
   14ad4:	2000d140 	.word	0x2000d140
   14ad8:	00015871 	.word	0x00015871

00014adc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
   14adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ade:	b099      	sub	sp, #100	; 0x64
   14ae0:	af0c      	add	r7, sp, #48	; 0x30
   14ae2:	61f8      	str	r0, [r7, #28]
   14ae4:	61b9      	str	r1, [r7, #24]
   14ae6:	613b      	str	r3, [r7, #16]
   14ae8:	4613      	mov	r3, r2
   14aea:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
   14aec:	69fb      	ldr	r3, [r7, #28]
   14aee:	69ba      	ldr	r2, [r7, #24]
   14af0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	coNode=nodeId;
   14af4:	69fb      	ldr	r3, [r7, #28]
   14af6:	7dfa      	ldrb	r2, [r7, #23]
   14af8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
   14afc:	4ba3      	ldr	r3, [pc, #652]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14afe:	4aa4      	ldr	r2, [pc, #656]	; (14d90 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
   14b00:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
   14b02:	4ba2      	ldr	r3, [pc, #648]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b04:	681b      	ldr	r3, [r3, #0]
   14b06:	4aa3      	ldr	r2, [pc, #652]	; (14d94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
   14b08:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
   14b0a:	4ba3      	ldr	r3, [pc, #652]	; (14d98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   14b0c:	4aa3      	ldr	r2, [pc, #652]	; (14d9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
   14b0e:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
   14b10:	4ba3      	ldr	r3, [pc, #652]	; (14da0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   14b12:	4aa4      	ldr	r2, [pc, #656]	; (14da4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
   14b14:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   14b16:	69fb      	ldr	r3, [r7, #28]
   14b18:	2200      	movs	r2, #0
   14b1a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14b1e:	69fb      	ldr	r3, [r7, #28]
   14b20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14b24:	2b00      	cmp	r3, #0
   14b26:	d118      	bne.n	14b5a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
   14b28:	4b98      	ldr	r3, [pc, #608]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b2a:	6819      	ldr	r1, [r3, #0]
   14b2c:	69fb      	ldr	r3, [r7, #28]
   14b2e:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
   14b32:	69fb      	ldr	r3, [r7, #28]
   14b34:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14b38:	4613      	mov	r3, r2
   14b3a:	011b      	lsls	r3, r3, #4
   14b3c:	4413      	add	r3, r2
   14b3e:	00db      	lsls	r3, r3, #3
   14b40:	4a99      	ldr	r2, [pc, #612]	; (14da8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
   14b42:	441a      	add	r2, r3
   14b44:	0083      	lsls	r3, r0, #2
   14b46:	440b      	add	r3, r1
   14b48:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   14b4a:	69fb      	ldr	r3, [r7, #28]
   14b4c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14b50:	1c5a      	adds	r2, r3, #1
   14b52:	69fb      	ldr	r3, [r7, #28]
   14b54:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14b58:	e7e1      	b.n	14b1e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
   14b5a:	4b94      	ldr	r3, [pc, #592]	; (14dac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   14b5c:	4a94      	ldr	r2, [pc, #592]	; (14db0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
   14b5e:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
   14b60:	4b8a      	ldr	r3, [pc, #552]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b62:	681b      	ldr	r3, [r3, #0]
   14b64:	4a93      	ldr	r2, [pc, #588]	; (14db4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
   14b66:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
   14b68:	4b88      	ldr	r3, [pc, #544]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b6a:	681b      	ldr	r3, [r3, #0]
   14b6c:	4a92      	ldr	r2, [pc, #584]	; (14db8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
   14b6e:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
   14b70:	4b86      	ldr	r3, [pc, #536]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b72:	681b      	ldr	r3, [r3, #0]
   14b74:	4a91      	ldr	r2, [pc, #580]	; (14dbc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
   14b76:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
   14b78:	4b84      	ldr	r3, [pc, #528]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b7a:	681b      	ldr	r3, [r3, #0]
   14b7c:	4a90      	ldr	r2, [pc, #576]	; (14dc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
   14b7e:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
   14b80:	69fb      	ldr	r3, [r7, #28]
   14b82:	2200      	movs	r2, #0
   14b84:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14b88:	69fb      	ldr	r3, [r7, #28]
   14b8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14b8e:	2b03      	cmp	r3, #3
   14b90:	d818      	bhi.n	14bc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
   14b92:	4b7e      	ldr	r3, [pc, #504]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14b94:	6819      	ldr	r1, [r3, #0]
   14b96:	69fb      	ldr	r3, [r7, #28]
   14b98:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
   14b9c:	69fb      	ldr	r3, [r7, #28]
   14b9e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14ba2:	4613      	mov	r3, r2
   14ba4:	005b      	lsls	r3, r3, #1
   14ba6:	4413      	add	r3, r2
   14ba8:	015b      	lsls	r3, r3, #5
   14baa:	4a86      	ldr	r2, [pc, #536]	; (14dc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
   14bac:	441a      	add	r2, r3
   14bae:	1d83      	adds	r3, r0, #6
   14bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
   14bb4:	69fb      	ldr	r3, [r7, #28]
   14bb6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14bba:	1c5a      	adds	r2, r3, #1
   14bbc:	69fb      	ldr	r3, [r7, #28]
   14bbe:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14bc2:	e7e1      	b.n	14b88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
   14bc4:	69fb      	ldr	r3, [r7, #28]
   14bc6:	2200      	movs	r2, #0
   14bc8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14bcc:	69fb      	ldr	r3, [r7, #28]
   14bce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14bd2:	2b03      	cmp	r3, #3
   14bd4:	d817      	bhi.n	14c06 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
   14bd6:	4b6d      	ldr	r3, [pc, #436]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14bd8:	681b      	ldr	r3, [r3, #0]
   14bda:	69fa      	ldr	r2, [r7, #28]
   14bdc:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
   14be0:	69f9      	ldr	r1, [r7, #28]
   14be2:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
   14be6:	2058      	movs	r0, #88	; 0x58
   14be8:	fb00 f101 	mul.w	r1, r0, r1
   14bec:	4876      	ldr	r0, [pc, #472]	; (14dc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
   14bee:	4401      	add	r1, r0
   14bf0:	320a      	adds	r2, #10
   14bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
   14bf6:	69fb      	ldr	r3, [r7, #28]
   14bf8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14bfc:	1c5a      	adds	r2, r3, #1
   14bfe:	69fb      	ldr	r3, [r7, #28]
   14c00:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14c04:	e7e2      	b.n	14bcc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
   14c06:	4b61      	ldr	r3, [pc, #388]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c08:	681b      	ldr	r3, [r3, #0]
   14c0a:	4a70      	ldr	r2, [pc, #448]	; (14dcc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
   14c0c:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
   14c0e:	4b70      	ldr	r3, [pc, #448]	; (14dd0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
   14c10:	4a70      	ldr	r2, [pc, #448]	; (14dd4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
   14c12:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
   14c14:	4b5d      	ldr	r3, [pc, #372]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c16:	681b      	ldr	r3, [r3, #0]
   14c18:	681b      	ldr	r3, [r3, #0]
   14c1a:	2200      	movs	r2, #0
   14c1c:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
   14c1e:	69fa      	ldr	r2, [r7, #28]
   14c20:	69fb      	ldr	r3, [r7, #28]
   14c22:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   14c26:	4619      	mov	r1, r3
   14c28:	4610      	mov	r0, r2
   14c2a:	4b6b      	ldr	r3, [pc, #428]	; (14dd8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
   14c2c:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
   14c2e:	7dfb      	ldrb	r3, [r7, #23]
   14c30:	2b00      	cmp	r3, #0
   14c32:	dd02      	ble.n	14c3a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
   14c34:	7dfb      	ldrb	r3, [r7, #23]
   14c36:	2b7f      	cmp	r3, #127	; 0x7f
   14c38:	dd05      	ble.n	14c46 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
   14c3a:	69f8      	ldr	r0, [r7, #28]
   14c3c:	4b67      	ldr	r3, [pc, #412]	; (14ddc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   14c3e:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
   14c40:	f06f 030b 	mvn.w	r3, #11
   14c44:	e2fc      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
   14c46:	69f8      	ldr	r0, [r7, #28]
   14c48:	4b50      	ldr	r3, [pc, #320]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c4a:	681b      	ldr	r3, [r3, #0]
   14c4c:	6819      	ldr	r1, [r3, #0]
   14c4e:	69fb      	ldr	r3, [r7, #28]
   14c50:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   14c54:	4b50      	ldr	r3, [pc, #320]	; (14d98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   14c56:	681d      	ldr	r5, [r3, #0]
   14c58:	4b51      	ldr	r3, [pc, #324]	; (14da0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   14c5a:	681b      	ldr	r3, [r3, #0]
   14c5c:	693a      	ldr	r2, [r7, #16]
   14c5e:	9203      	str	r2, [sp, #12]
   14c60:	2209      	movs	r2, #9
   14c62:	9202      	str	r2, [sp, #8]
   14c64:	9301      	str	r3, [sp, #4]
   14c66:	230b      	movs	r3, #11
   14c68:	9300      	str	r3, [sp, #0]
   14c6a:	462b      	mov	r3, r5
   14c6c:	4622      	mov	r2, r4
   14c6e:	4c5c      	ldr	r4, [pc, #368]	; (14de0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
   14c70:	47a0      	blx	r4
   14c72:	4603      	mov	r3, r0
   14c74:	461a      	mov	r2, r3
   14c76:	69fb      	ldr	r3, [r7, #28]
   14c78:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
   14c7c:	69fb      	ldr	r3, [r7, #28]
   14c7e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14c82:	2b00      	cmp	r3, #0
   14c84:	d006      	beq.n	14c94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
   14c86:	69f8      	ldr	r0, [r7, #28]
   14c88:	4b54      	ldr	r3, [pc, #336]	; (14ddc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   14c8a:	4798      	blx	r3
   14c8c:	69fb      	ldr	r3, [r7, #28]
   14c8e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14c92:	e2d5      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
   14c94:	69fb      	ldr	r3, [r7, #28]
   14c96:	2200      	movs	r2, #0
   14c98:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14c9c:	69fb      	ldr	r3, [r7, #28]
   14c9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	f040 80a4 	bne.w	14df0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
   14ca8:	69fb      	ldr	r3, [r7, #28]
   14caa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14cae:	2b00      	cmp	r3, #0
   14cb0:	d108      	bne.n	14cc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
   14cb2:	7dfb      	ldrb	r3, [r7, #23]
   14cb4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   14cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
   14cba:	7dfb      	ldrb	r3, [r7, #23]
   14cbc:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
   14cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   14cc2:	e017      	b.n	14cf4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
   14cc4:	69fb      	ldr	r3, [r7, #28]
   14cc6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14cca:	4946      	ldr	r1, [pc, #280]	; (14de4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   14ccc:	4613      	mov	r3, r2
   14cce:	005b      	lsls	r3, r3, #1
   14cd0:	4413      	add	r3, r2
   14cd2:	009b      	lsls	r3, r3, #2
   14cd4:	440b      	add	r3, r1
   14cd6:	3364      	adds	r3, #100	; 0x64
   14cd8:	681b      	ldr	r3, [r3, #0]
   14cda:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
   14cdc:	69fb      	ldr	r3, [r7, #28]
   14cde:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14ce2:	4940      	ldr	r1, [pc, #256]	; (14de4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   14ce4:	4613      	mov	r3, r2
   14ce6:	005b      	lsls	r3, r3, #1
   14ce8:	4413      	add	r3, r2
   14cea:	009b      	lsls	r3, r3, #2
   14cec:	440b      	add	r3, r1
   14cee:	3368      	adds	r3, #104	; 0x68
   14cf0:	681b      	ldr	r3, [r3, #0]
   14cf2:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
   14cf4:	69fb      	ldr	r3, [r7, #28]
   14cf6:	f103 0e04 	add.w	lr, r3, #4
   14cfa:	4b24      	ldr	r3, [pc, #144]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14cfc:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
   14cfe:	69fb      	ldr	r3, [r7, #28]
   14d00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
   14d04:	009b      	lsls	r3, r3, #2
   14d06:	4413      	add	r3, r2
   14d08:	685b      	ldr	r3, [r3, #4]
   14d0a:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
   14d0c:	69fb      	ldr	r3, [r7, #28]
   14d0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
   14d12:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
   14d16:	69fb      	ldr	r3, [r7, #28]
   14d18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d003      	beq.n	14d28 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
   14d20:	4b1a      	ldr	r3, [pc, #104]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14d22:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
   14d24:	685b      	ldr	r3, [r3, #4]
   14d26:	e000      	b.n	14d2a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
   14d28:	2300      	movs	r3, #0
   14d2a:	4920      	ldr	r1, [pc, #128]	; (14dac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   14d2c:	6809      	ldr	r1, [r1, #0]
   14d2e:	4817      	ldr	r0, [pc, #92]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14d30:	6800      	ldr	r0, [r0, #0]
   14d32:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
   14d34:	69fc      	ldr	r4, [r7, #28]
   14d36:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
		err = CO_SDO_init(
   14d3a:	3406      	adds	r4, #6
   14d3c:	4d13      	ldr	r5, [pc, #76]	; (14d8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14d3e:	682d      	ldr	r5, [r5, #0]
   14d40:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
   14d42:	69fe      	ldr	r6, [r7, #28]
   14d44:	f8d6 6154 	ldr.w	r6, [r6, #340]	; 0x154
		err = CO_SDO_init(
   14d48:	3607      	adds	r6, #7
   14d4a:	9609      	str	r6, [sp, #36]	; 0x24
   14d4c:	9508      	str	r5, [sp, #32]
   14d4e:	9407      	str	r4, [sp, #28]
   14d50:	9006      	str	r0, [sp, #24]
   14d52:	7df8      	ldrb	r0, [r7, #23]
   14d54:	9005      	str	r0, [sp, #20]
   14d56:	9104      	str	r1, [sp, #16]
   14d58:	2137      	movs	r1, #55	; 0x37
   14d5a:	9103      	str	r1, [sp, #12]
   14d5c:	4922      	ldr	r1, [pc, #136]	; (14de8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
   14d5e:	9102      	str	r1, [sp, #8]
   14d60:	9301      	str	r3, [sp, #4]
   14d62:	9200      	str	r2, [sp, #0]
   14d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14d68:	68f9      	ldr	r1, [r7, #12]
   14d6a:	4670      	mov	r0, lr
   14d6c:	4c1f      	ldr	r4, [pc, #124]	; (14dec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
   14d6e:	47a0      	blx	r4
   14d70:	4603      	mov	r3, r0
   14d72:	461a      	mov	r2, r3
   14d74:	69fb      	ldr	r3, [r7, #28]
   14d76:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	for (i=0; i<CO_NO_SDO_SERVER; i++)
   14d7a:	69fb      	ldr	r3, [r7, #28]
   14d7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14d80:	1c5a      	adds	r2, r3, #1
   14d82:	69fb      	ldr	r3, [r7, #28]
   14d84:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14d88:	e788      	b.n	14c9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
   14d8a:	bf00      	nop
   14d8c:	2000d140 	.word	0x2000d140
   14d90:	2000d104 	.word	0x2000d104
   14d94:	2000d154 	.word	0x2000d154
   14d98:	2000d144 	.word	0x2000d144
   14d9c:	2000d178 	.word	0x2000d178
   14da0:	2000d148 	.word	0x2000d148
   14da4:	2000d228 	.word	0x2000d228
   14da8:	2000d2b8 	.word	0x2000d2b8
   14dac:	2000d14c 	.word	0x2000d14c
   14db0:	2000d340 	.word	0x2000d340
   14db4:	2000d5d4 	.word	0x2000d5d4
   14db8:	2000d640 	.word	0x2000d640
   14dbc:	2000d65c 	.word	0x2000d65c
   14dc0:	2000d680 	.word	0x2000d680
   14dc4:	2000d6bc 	.word	0x2000d6bc
   14dc8:	2000d83c 	.word	0x2000d83c
   14dcc:	2000d99c 	.word	0x2000d99c
   14dd0:	2000d150 	.word	0x2000d150
   14dd4:	2000d9b4 	.word	0x2000d9b4
   14dd8:	000154d1 	.word	0x000154d1
   14ddc:	0001526d 	.word	0x0001526d
   14de0:	00015535 	.word	0x00015535
   14de4:	2000039c 	.word	0x2000039c
   14de8:	0001b674 	.word	0x0001b674
   14dec:	0001752d 	.word	0x0001752d
	}

	if(err){CO_delete(); return err;}
   14df0:	69fb      	ldr	r3, [r7, #28]
   14df2:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14df6:	2b00      	cmp	r3, #0
   14df8:	d006      	beq.n	14e08 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
   14dfa:	69f8      	ldr	r0, [r7, #28]
   14dfc:	4b7c      	ldr	r3, [pc, #496]	; (14ff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14dfe:	4798      	blx	r3
   14e00:	69fb      	ldr	r3, [r7, #28]
   14e02:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14e06:	e21b      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
   14e08:	69fb      	ldr	r3, [r7, #28]
   14e0a:	1d18      	adds	r0, r3, #4
   14e0c:	4b79      	ldr	r3, [pc, #484]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e0e:	681b      	ldr	r3, [r3, #0]
   14e10:	6899      	ldr	r1, [r3, #8]
   14e12:	4b78      	ldr	r3, [pc, #480]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e14:	681b      	ldr	r3, [r3, #0]
   14e16:	68dc      	ldr	r4, [r3, #12]
   14e18:	4b76      	ldr	r3, [pc, #472]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e1a:	681b      	ldr	r3, [r3, #0]
   14e1c:	685d      	ldr	r5, [r3, #4]
   14e1e:	4b75      	ldr	r3, [pc, #468]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e20:	681b      	ldr	r3, [r3, #0]
   14e22:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
   14e24:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
   14e26:	3280      	adds	r2, #128	; 0x80
   14e28:	9207      	str	r2, [sp, #28]
   14e2a:	2202      	movs	r2, #2
   14e2c:	9206      	str	r2, [sp, #24]
   14e2e:	9305      	str	r3, [sp, #20]
   14e30:	2308      	movs	r3, #8
   14e32:	9304      	str	r3, [sp, #16]
   14e34:	4b70      	ldr	r3, [pc, #448]	; (14ff8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
   14e36:	9303      	str	r3, [sp, #12]
   14e38:	4b70      	ldr	r3, [pc, #448]	; (14ffc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
   14e3a:	9302      	str	r3, [sp, #8]
   14e3c:	230a      	movs	r3, #10
   14e3e:	9301      	str	r3, [sp, #4]
   14e40:	4b6f      	ldr	r3, [pc, #444]	; (15000 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
   14e42:	9300      	str	r3, [sp, #0]
   14e44:	462b      	mov	r3, r5
   14e46:	4622      	mov	r2, r4
   14e48:	4c6e      	ldr	r4, [pc, #440]	; (15004 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
   14e4a:	47a0      	blx	r4
   14e4c:	4603      	mov	r3, r0
   14e4e:	461a      	mov	r2, r3
   14e50:	69fb      	ldr	r3, [r7, #28]
   14e52:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	if(err){CO_delete(); return err;}
   14e56:	69fb      	ldr	r3, [r7, #28]
   14e58:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14e5c:	2b00      	cmp	r3, #0
   14e5e:	d006      	beq.n	14e6e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
   14e60:	69f8      	ldr	r0, [r7, #28]
   14e62:	4b63      	ldr	r3, [pc, #396]	; (14ff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14e64:	4798      	blx	r3
   14e66:	69fb      	ldr	r3, [r7, #28]
   14e68:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14e6c:	e1e8      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
   14e6e:	4b61      	ldr	r3, [pc, #388]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e70:	681b      	ldr	r3, [r3, #0]
   14e72:	6918      	ldr	r0, [r3, #16]
   14e74:	4b5f      	ldr	r3, [pc, #380]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e76:	681b      	ldr	r3, [r3, #0]
   14e78:	68dc      	ldr	r4, [r3, #12]
   14e7a:	4b5e      	ldr	r3, [pc, #376]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e7c:	681b      	ldr	r3, [r3, #0]
   14e7e:	681b      	ldr	r3, [r3, #0]
   14e80:	4a5c      	ldr	r2, [pc, #368]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14e82:	6812      	ldr	r2, [r2, #0]
   14e84:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
   14e86:	7df9      	ldrb	r1, [r7, #23]
   14e88:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
   14e8c:	7dfd      	ldrb	r5, [r7, #23]
   14e8e:	9106      	str	r1, [sp, #24]
   14e90:	2108      	movs	r1, #8
   14e92:	9105      	str	r1, [sp, #20]
   14e94:	9204      	str	r2, [sp, #16]
   14e96:	2200      	movs	r2, #0
   14e98:	9203      	str	r2, [sp, #12]
   14e9a:	2200      	movs	r2, #0
   14e9c:	9202      	str	r2, [sp, #8]
   14e9e:	9301      	str	r3, [sp, #4]
   14ea0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   14ea4:	9300      	str	r3, [sp, #0]
   14ea6:	462b      	mov	r3, r5
   14ea8:	4622      	mov	r2, r4
   14eaa:	4601      	mov	r1, r0
   14eac:	69f8      	ldr	r0, [r7, #28]
   14eae:	4c56      	ldr	r4, [pc, #344]	; (15008 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
   14eb0:	47a0      	blx	r4
   14eb2:	4603      	mov	r3, r0
   14eb4:	461a      	mov	r2, r3
   14eb6:	69fb      	ldr	r3, [r7, #28]
   14eb8:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	if(err){CO_delete(); return err;}
   14ebc:	69fb      	ldr	r3, [r7, #28]
   14ebe:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d006      	beq.n	14ed4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
   14ec6:	69f8      	ldr	r0, [r7, #28]
   14ec8:	4b49      	ldr	r3, [pc, #292]	; (14ff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14eca:	4798      	blx	r3
   14ecc:	69fb      	ldr	r3, [r7, #28]
   14ece:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14ed2:	e1b5      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
   14ed4:	7dfb      	ldrb	r3, [r7, #23]
   14ed6:	2b01      	cmp	r3, #1
   14ed8:	d10d      	bne.n	14ef6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
   14eda:	69f8      	ldr	r0, [r7, #28]
   14edc:	2300      	movs	r3, #0
   14ede:	9301      	str	r3, [sp, #4]
   14ee0:	2302      	movs	r3, #2
   14ee2:	9300      	str	r3, [sp, #0]
   14ee4:	2300      	movs	r3, #0
   14ee6:	2200      	movs	r2, #0
   14ee8:	2100      	movs	r1, #0
   14eea:	4c48      	ldr	r4, [pc, #288]	; (1500c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
   14eec:	47a0      	blx	r4
   14eee:	4602      	mov	r2, r0
   14ef0:	69fb      	ldr	r3, [r7, #28]
   14ef2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	}else{

	}
       
	err = SYNC_Init(
   14ef6:	69fb      	ldr	r3, [r7, #28]
   14ef8:	f103 060c 	add.w	r6, r3, #12
   14efc:	4b3d      	ldr	r3, [pc, #244]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14efe:	681b      	ldr	r3, [r3, #0]
   14f00:	695b      	ldr	r3, [r3, #20]
   14f02:	60fb      	str	r3, [r7, #12]
   14f04:	4b3b      	ldr	r3, [pc, #236]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f06:	681b      	ldr	r3, [r3, #0]
   14f08:	689a      	ldr	r2, [r3, #8]
   14f0a:	60ba      	str	r2, [r7, #8]
   14f0c:	4b39      	ldr	r3, [pc, #228]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f0e:	681b      	ldr	r3, [r3, #0]
   14f10:	6858      	ldr	r0, [r3, #4]
   14f12:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
   14f14:	4b37      	ldr	r3, [pc, #220]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f16:	681b      	ldr	r3, [r3, #0]
   14f18:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
   14f1a:	603b      	str	r3, [r7, #0]
   14f1c:	4b3c      	ldr	r3, [pc, #240]	; (15010 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   14f1e:	689b      	ldr	r3, [r3, #8]
   14f20:	4a3b      	ldr	r2, [pc, #236]	; (15010 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   14f22:	68d2      	ldr	r2, [r2, #12]
   14f24:	493a      	ldr	r1, [pc, #232]	; (15010 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   14f26:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
   14f2a:	4832      	ldr	r0, [pc, #200]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f2c:	6800      	ldr	r0, [r0, #0]
   14f2e:	6800      	ldr	r0, [r0, #0]
   14f30:	4c30      	ldr	r4, [pc, #192]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f32:	6824      	ldr	r4, [r4, #0]
   14f34:	6824      	ldr	r4, [r4, #0]
   14f36:	2501      	movs	r5, #1
   14f38:	9507      	str	r5, [sp, #28]
   14f3a:	9406      	str	r4, [sp, #24]
   14f3c:	2401      	movs	r4, #1
   14f3e:	9405      	str	r4, [sp, #20]
   14f40:	9004      	str	r0, [sp, #16]
   14f42:	9103      	str	r1, [sp, #12]
   14f44:	9202      	str	r2, [sp, #8]
   14f46:	9301      	str	r3, [sp, #4]
   14f48:	683c      	ldr	r4, [r7, #0]
   14f4a:	9400      	str	r4, [sp, #0]
   14f4c:	687b      	ldr	r3, [r7, #4]
   14f4e:	68ba      	ldr	r2, [r7, #8]
   14f50:	68f9      	ldr	r1, [r7, #12]
   14f52:	4630      	mov	r0, r6
   14f54:	4c2f      	ldr	r4, [pc, #188]	; (15014 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
   14f56:	47a0      	blx	r4
   14f58:	4603      	mov	r3, r0
   14f5a:	461a      	mov	r2, r3
   14f5c:	69fb      	ldr	r3, [r7, #28]
   14f5e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
   14f62:	69fb      	ldr	r3, [r7, #28]
   14f64:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14f68:	2b00      	cmp	r3, #0
   14f6a:	d006      	beq.n	14f7a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
   14f6c:	69f8      	ldr	r0, [r7, #28]
   14f6e:	4b20      	ldr	r3, [pc, #128]	; (14ff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14f70:	4798      	blx	r3
   14f72:	69fb      	ldr	r3, [r7, #28]
   14f74:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14f78:	e162      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
   14f7a:	69fb      	ldr	r3, [r7, #28]
   14f7c:	2200      	movs	r2, #0
   14f7e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14f82:	69fb      	ldr	r3, [r7, #28]
   14f84:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14f88:	2b03      	cmp	r3, #3
   14f8a:	f200 8097 	bhi.w	150bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
   14f8e:	4b19      	ldr	r3, [pc, #100]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f90:	681b      	ldr	r3, [r3, #0]
   14f92:	681b      	ldr	r3, [r3, #0]
   14f94:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
   14f96:	69fb      	ldr	r3, [r7, #28]
   14f98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14f9c:	1c9a      	adds	r2, r3, #2
   14f9e:	69fb      	ldr	r3, [r7, #28]
   14fa0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

		err = CO_RPDO_init(
   14fa4:	69fb      	ldr	r3, [r7, #28]
   14fa6:	f103 0e14 	add.w	lr, r3, #20
   14faa:	4b12      	ldr	r3, [pc, #72]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14fac:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
   14fae:	69fa      	ldr	r2, [r7, #28]
   14fb0:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
		err = CO_RPDO_init(
   14fb4:	3206      	adds	r2, #6
   14fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14fba:	60fb      	str	r3, [r7, #12]
   14fbc:	4b0d      	ldr	r3, [pc, #52]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14fbe:	681b      	ldr	r3, [r3, #0]
   14fc0:	689b      	ldr	r3, [r3, #8]
   14fc2:	60bb      	str	r3, [r7, #8]
   14fc4:	4b0b      	ldr	r3, [pc, #44]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14fc6:	681b      	ldr	r3, [r3, #0]
   14fc8:	685b      	ldr	r3, [r3, #4]
   14fca:	607b      	str	r3, [r7, #4]
   14fcc:	4b09      	ldr	r3, [pc, #36]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14fce:	681b      	ldr	r3, [r3, #0]
   14fd0:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
   14fd2:	4b08      	ldr	r3, [pc, #32]	; (14ff4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14fd4:	681b      	ldr	r3, [r3, #0]
   14fd6:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
   14fd8:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   14fda:	69fb      	ldr	r3, [r7, #28]
   14fdc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_RPDO_init(
   14fe0:	2b03      	cmp	r3, #3
   14fe2:	d819      	bhi.n	15018 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   14fe4:	69fb      	ldr	r3, [r7, #28]
   14fe6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_RPDO_init(
   14fea:	3302      	adds	r3, #2
   14fec:	021a      	lsls	r2, r3, #8
   14fee:	e014      	b.n	1501a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
   14ff0:	0001526d 	.word	0x0001526d
   14ff4:	2000d140 	.word	0x2000d140
   14ff8:	2000022c 	.word	0x2000022c
   14ffc:	20000224 	.word	0x20000224
   15000:	20000254 	.word	0x20000254
   15004:	00015bed 	.word	0x00015bed
   15008:	00016241 	.word	0x00016241
   1500c:	000157c5 	.word	0x000157c5
   15010:	2000039c 	.word	0x2000039c
   15014:	00017cfd 	.word	0x00017cfd
   15018:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
   1501a:	69fb      	ldr	r3, [r7, #28]
   1501c:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   15020:	460b      	mov	r3, r1
   15022:	005b      	lsls	r3, r3, #1
   15024:	440b      	add	r3, r1
   15026:	009b      	lsls	r3, r3, #2
   15028:	3368      	adds	r3, #104	; 0x68
   1502a:	4987      	ldr	r1, [pc, #540]	; (15248 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   1502c:	440b      	add	r3, r1
   1502e:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
   15030:	69fb      	ldr	r3, [r7, #28]
   15032:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   15036:	460b      	mov	r3, r1
   15038:	00db      	lsls	r3, r3, #3
   1503a:	440b      	add	r3, r1
   1503c:	009b      	lsls	r3, r3, #2
   1503e:	3398      	adds	r3, #152	; 0x98
   15040:	4981      	ldr	r1, [pc, #516]	; (15248 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15042:	440b      	add	r3, r1
   15044:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
   15046:	69f9      	ldr	r1, [r7, #28]
   15048:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
		err = CO_RPDO_init(
   1504c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
   15050:	69fd      	ldr	r5, [r7, #28]
   15052:	f8d5 5154 	ldr.w	r5, [r5, #340]	; 0x154
		err = CO_RPDO_init(
   15056:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
   1505a:	69fe      	ldr	r6, [r7, #28]
   1505c:	f8d6 614c 	ldr.w	r6, [r6, #332]	; 0x14c
   15060:	960a      	str	r6, [sp, #40]	; 0x28
   15062:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   15064:	9609      	str	r6, [sp, #36]	; 0x24
   15066:	9508      	str	r5, [sp, #32]
   15068:	9107      	str	r1, [sp, #28]
   1506a:	9306      	str	r3, [sp, #24]
   1506c:	9405      	str	r4, [sp, #20]
   1506e:	2300      	movs	r3, #0
   15070:	9304      	str	r3, [sp, #16]
   15072:	9203      	str	r2, [sp, #12]
   15074:	7dfb      	ldrb	r3, [r7, #23]
   15076:	9302      	str	r3, [sp, #8]
   15078:	683b      	ldr	r3, [r7, #0]
   1507a:	9301      	str	r3, [sp, #4]
   1507c:	9000      	str	r0, [sp, #0]
   1507e:	687b      	ldr	r3, [r7, #4]
   15080:	68ba      	ldr	r2, [r7, #8]
   15082:	68f9      	ldr	r1, [r7, #12]
   15084:	4670      	mov	r0, lr
   15086:	4c71      	ldr	r4, [pc, #452]	; (1524c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
   15088:	47a0      	blx	r4
   1508a:	4603      	mov	r3, r0
   1508c:	461a      	mov	r2, r3
   1508e:	69fb      	ldr	r3, [r7, #28]
   15090:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
   15094:	69fb      	ldr	r3, [r7, #28]
   15096:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   1509a:	2b00      	cmp	r3, #0
   1509c:	d006      	beq.n	150ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
   1509e:	69f8      	ldr	r0, [r7, #28]
   150a0:	4b6b      	ldr	r3, [pc, #428]	; (15250 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   150a2:	4798      	blx	r3
   150a4:	69fb      	ldr	r3, [r7, #28]
   150a6:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   150aa:	e0c9      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
   150ac:	69fb      	ldr	r3, [r7, #28]
   150ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   150b2:	1c5a      	adds	r2, r3, #1
   150b4:	69fb      	ldr	r3, [r7, #28]
   150b6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   150ba:	e762      	b.n	14f82 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
   150bc:	69fb      	ldr	r3, [r7, #28]
   150be:	2200      	movs	r2, #0
   150c0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   150c4:	69fb      	ldr	r3, [r7, #28]
   150c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   150ca:	2b03      	cmp	r3, #3
   150cc:	d879      	bhi.n	151c2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
   150ce:	69fb      	ldr	r3, [r7, #28]
   150d0:	f103 0e14 	add.w	lr, r3, #20
   150d4:	4b5f      	ldr	r3, [pc, #380]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   150d6:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
   150d8:	69fa      	ldr	r2, [r7, #28]
   150da:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
		err = CO_TPDO_init(
   150de:	320a      	adds	r2, #10
   150e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   150e4:	60fb      	str	r3, [r7, #12]
   150e6:	4b5b      	ldr	r3, [pc, #364]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   150e8:	681b      	ldr	r3, [r3, #0]
   150ea:	689b      	ldr	r3, [r3, #8]
   150ec:	60bb      	str	r3, [r7, #8]
   150ee:	4b59      	ldr	r3, [pc, #356]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   150f0:	681b      	ldr	r3, [r3, #0]
   150f2:	685b      	ldr	r3, [r3, #4]
   150f4:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
   150f6:	4b57      	ldr	r3, [pc, #348]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   150f8:	681b      	ldr	r3, [r3, #0]
   150fa:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
   150fc:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   150fe:	69fb      	ldr	r3, [r7, #28]
   15100:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_TPDO_init(
   15104:	2b03      	cmp	r3, #3
   15106:	d806      	bhi.n	15116 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   15108:	69fb      	ldr	r3, [r7, #28]
   1510a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1510e:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
   15110:	f503 72c0 	add.w	r2, r3, #384	; 0x180
   15114:	e000      	b.n	15118 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
   15116:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
   15118:	69fb      	ldr	r3, [r7, #28]
   1511a:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   1511e:	460b      	mov	r3, r1
   15120:	00db      	lsls	r3, r3, #3
   15122:	1a5b      	subs	r3, r3, r1
   15124:	009b      	lsls	r3, r3, #2
   15126:	f503 7394 	add.w	r3, r3, #296	; 0x128
   1512a:	4947      	ldr	r1, [pc, #284]	; (15248 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   1512c:	440b      	add	r3, r1
   1512e:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
   15130:	69fb      	ldr	r3, [r7, #28]
   15132:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   15136:	460b      	mov	r3, r1
   15138:	00db      	lsls	r3, r3, #3
   1513a:	440b      	add	r3, r1
   1513c:	009b      	lsls	r3, r3, #2
   1513e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
   15142:	4941      	ldr	r1, [pc, #260]	; (15248 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15144:	440b      	add	r3, r1
   15146:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
   15148:	69f9      	ldr	r1, [r7, #28]
   1514a:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
		err = CO_TPDO_init(
   1514e:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
   15152:	69fc      	ldr	r4, [r7, #28]
   15154:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
		err = CO_TPDO_init(
   15158:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
   1515c:	4d3d      	ldr	r5, [pc, #244]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   1515e:	682d      	ldr	r5, [r5, #0]
   15160:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
   15162:	69fe      	ldr	r6, [r7, #28]
   15164:	f8d6 6154 	ldr.w	r6, [r6, #340]	; 0x154
		err = CO_TPDO_init(
   15168:	3603      	adds	r6, #3
   1516a:	9609      	str	r6, [sp, #36]	; 0x24
   1516c:	9508      	str	r5, [sp, #32]
   1516e:	9407      	str	r4, [sp, #28]
   15170:	9106      	str	r1, [sp, #24]
   15172:	9305      	str	r3, [sp, #20]
   15174:	9004      	str	r0, [sp, #16]
   15176:	2300      	movs	r3, #0
   15178:	9303      	str	r3, [sp, #12]
   1517a:	9202      	str	r2, [sp, #8]
   1517c:	7dfb      	ldrb	r3, [r7, #23]
   1517e:	9301      	str	r3, [sp, #4]
   15180:	683b      	ldr	r3, [r7, #0]
   15182:	9300      	str	r3, [sp, #0]
   15184:	687b      	ldr	r3, [r7, #4]
   15186:	68ba      	ldr	r2, [r7, #8]
   15188:	68f9      	ldr	r1, [r7, #12]
   1518a:	4670      	mov	r0, lr
   1518c:	4c32      	ldr	r4, [pc, #200]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
   1518e:	47a0      	blx	r4
   15190:	4603      	mov	r3, r0
   15192:	461a      	mov	r2, r3
   15194:	69fb      	ldr	r3, [r7, #28]
   15196:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		if(err){CO_delete(); return err;}
   1519a:	69fb      	ldr	r3, [r7, #28]
   1519c:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   151a0:	2b00      	cmp	r3, #0
   151a2:	d006      	beq.n	151b2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
   151a4:	69f8      	ldr	r0, [r7, #28]
   151a6:	4b2a      	ldr	r3, [pc, #168]	; (15250 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   151a8:	4798      	blx	r3
   151aa:	69fb      	ldr	r3, [r7, #28]
   151ac:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   151b0:	e046      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
   151b2:	69fb      	ldr	r3, [r7, #28]
   151b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   151b8:	1c5a      	adds	r2, r3, #1
   151ba:	69fb      	ldr	r3, [r7, #28]
   151bc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   151c0:	e780      	b.n	150c4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
   151c2:	69fb      	ldr	r3, [r7, #28]
   151c4:	f103 0220 	add.w	r2, r3, #32
   151c8:	69fb      	ldr	r3, [r7, #28]
   151ca:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
   151ce:	4619      	mov	r1, r3
   151d0:	4610      	mov	r0, r2
   151d2:	4b22      	ldr	r3, [pc, #136]	; (1525c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
   151d4:	4798      	blx	r3
	err = CO_HBconsumer_init(
   151d6:	69fb      	ldr	r3, [r7, #28]
   151d8:	f103 0020 	add.w	r0, r3, #32
   151dc:	4b1d      	ldr	r3, [pc, #116]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151de:	681b      	ldr	r3, [r3, #0]
   151e0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   151e2:	4b1c      	ldr	r3, [pc, #112]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151e4:	681b      	ldr	r3, [r3, #0]
   151e6:	689d      	ldr	r5, [r3, #8]
   151e8:	4b1a      	ldr	r3, [pc, #104]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151ea:	681b      	ldr	r3, [r3, #0]
   151ec:	685e      	ldr	r6, [r3, #4]
   151ee:	4b1c      	ldr	r3, [pc, #112]	; (15260 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
   151f0:	681b      	ldr	r3, [r3, #0]
   151f2:	4a18      	ldr	r2, [pc, #96]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151f4:	6812      	ldr	r2, [r2, #0]
   151f6:	6812      	ldr	r2, [r2, #0]
   151f8:	2107      	movs	r1, #7
   151fa:	9104      	str	r1, [sp, #16]
   151fc:	9203      	str	r2, [sp, #12]
   151fe:	2204      	movs	r2, #4
   15200:	9202      	str	r2, [sp, #8]
   15202:	9301      	str	r3, [sp, #4]
   15204:	4b17      	ldr	r3, [pc, #92]	; (15264 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
   15206:	9300      	str	r3, [sp, #0]
   15208:	4633      	mov	r3, r6
   1520a:	462a      	mov	r2, r5
   1520c:	4621      	mov	r1, r4
   1520e:	4c16      	ldr	r4, [pc, #88]	; (15268 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
   15210:	47a0      	blx	r4
   15212:	4603      	mov	r3, r0
   15214:	461a      	mov	r2, r3
   15216:	69fb      	ldr	r3, [r7, #28]
   15218:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
   1521c:	69fb      	ldr	r3, [r7, #28]
   1521e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   15222:	2b00      	cmp	r3, #0
   15224:	d006      	beq.n	15234 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
   15226:	69f8      	ldr	r0, [r7, #28]
   15228:	4b09      	ldr	r3, [pc, #36]	; (15250 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   1522a:	4798      	blx	r3
   1522c:	69fb      	ldr	r3, [r7, #28]
   1522e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   15232:	e005      	b.n	15240 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
   15234:	4b07      	ldr	r3, [pc, #28]	; (15254 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15236:	681a      	ldr	r2, [r3, #0]
   15238:	69fb      	ldr	r3, [r7, #28]
   1523a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	return CO_ERROR_NO;
   1523e:	2300      	movs	r3, #0
}
   15240:	4618      	mov	r0, r3
   15242:	3734      	adds	r7, #52	; 0x34
   15244:	46bd      	mov	sp, r7
   15246:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15248:	2000039c 	.word	0x2000039c
   1524c:	00016f25 	.word	0x00016f25
   15250:	0001526d 	.word	0x0001526d
   15254:	2000d140 	.word	0x2000d140
   15258:	0001702d 	.word	0x0001702d
   1525c:	00016149 	.word	0x00016149
   15260:	2000d150 	.word	0x2000d150
   15264:	200003cc 	.word	0x200003cc
   15268:	00016079 	.word	0x00016079

0001526c <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
   1526c:	b580      	push	{r7, lr}
   1526e:	b082      	sub	sp, #8
   15270:	af00      	add	r7, sp, #0
   15272:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
   15274:	687a      	ldr	r2, [r7, #4]
   15276:	687b      	ldr	r3, [r7, #4]
   15278:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   1527c:	4619      	mov	r1, r3
   1527e:	4610      	mov	r0, r2
   15280:	4b04      	ldr	r3, [pc, #16]	; (15294 <_ZN8CO_Class9CO_deleteEv+0x28>)
   15282:	4798      	blx	r3
	CANmodule_Disable();
   15284:	687b      	ldr	r3, [r7, #4]
   15286:	4618      	mov	r0, r3
   15288:	4b03      	ldr	r3, [pc, #12]	; (15298 <_ZN8CO_Class9CO_deleteEv+0x2c>)
   1528a:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
   1528c:	bf00      	nop
   1528e:	3708      	adds	r7, #8
   15290:	46bd      	mov	sp, r7
   15292:	bd80      	pop	{r7, pc}
   15294:	000154d1 	.word	0x000154d1
   15298:	0001568d 	.word	0x0001568d

0001529c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
   1529c:	b480      	push	{r7}
   1529e:	b083      	sub	sp, #12
   152a0:	af00      	add	r7, sp, #0
   152a2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
   152a4:	687b      	ldr	r3, [r7, #4]
   152a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   152a8:	4618      	mov	r0, r3
   152aa:	370c      	adds	r7, #12
   152ac:	46bd      	mov	sp, r7
   152ae:	bc80      	pop	{r7}
   152b0:	4770      	bx	lr
	...

000152b4 <_ZL14CO_rx_callbackP20can_async_descriptor>:

CO_Driver_Class		*canopen_driver;


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
   152b4:	b580      	push	{r7, lr}
   152b6:	b082      	sub	sp, #8
   152b8:	af00      	add	r7, sp, #0
   152ba:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
   152bc:	4b12      	ldr	r3, [pc, #72]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152be:	681b      	ldr	r3, [r3, #0]
   152c0:	4a11      	ldr	r2, [pc, #68]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152c2:	6812      	ldr	r2, [r2, #0]
   152c4:	3230      	adds	r2, #48	; 0x30
   152c6:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
   152c8:	4b0f      	ldr	r3, [pc, #60]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152ca:	681b      	ldr	r3, [r3, #0]
   152cc:	3370      	adds	r3, #112	; 0x70
   152ce:	4619      	mov	r1, r3
   152d0:	6878      	ldr	r0, [r7, #4]
   152d2:	4b0e      	ldr	r3, [pc, #56]	; (1530c <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
   152d4:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
   152d6:	4b0c      	ldr	r3, [pc, #48]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152d8:	681b      	ldr	r3, [r3, #0]
   152da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   152de:	b2db      	uxtb	r3, r3
   152e0:	2b00      	cmp	r3, #0
   152e2:	d007      	beq.n	152f4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
   152e4:	4b08      	ldr	r3, [pc, #32]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152e6:	681b      	ldr	r3, [r3, #0]
   152e8:	681b      	ldr	r3, [r3, #0]
   152ea:	681b      	ldr	r3, [r3, #0]
   152ec:	4a06      	ldr	r2, [pc, #24]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152ee:	6812      	ldr	r2, [r2, #0]
   152f0:	4610      	mov	r0, r2
   152f2:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
   152f4:	4b04      	ldr	r3, [pc, #16]	; (15308 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   152f6:	681b      	ldr	r3, [r3, #0]
   152f8:	2201      	movs	r2, #1
   152fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
   152fe:	bf00      	nop
   15300:	3708      	adds	r7, #8
   15302:	46bd      	mov	sp, r7
   15304:	bd80      	pop	{r7, pc}
   15306:	bf00      	nop
   15308:	2000d9f4 	.word	0x2000d9f4
   1530c:	0000330d 	.word	0x0000330d

00015310 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
   15310:	b590      	push	{r4, r7, lr}
   15312:	b083      	sub	sp, #12
   15314:	af00      	add	r7, sp, #0
   15316:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
   15318:	4b08      	ldr	r3, [pc, #32]	; (1533c <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   1531a:	681c      	ldr	r4, [r3, #0]
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	681b      	ldr	r3, [r3, #0]
   15320:	4618      	mov	r0, r3
   15322:	4b07      	ldr	r3, [pc, #28]	; (15340 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
   15324:	4798      	blx	r3
   15326:	4603      	mov	r3, r0
   15328:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
   1532a:	4b04      	ldr	r3, [pc, #16]	; (1533c <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   1532c:	681b      	ldr	r3, [r3, #0]
   1532e:	2201      	movs	r2, #1
   15330:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   15334:	bf00      	nop
   15336:	370c      	adds	r7, #12
   15338:	46bd      	mov	sp, r7
   1533a:	bd90      	pop	{r4, r7, pc}
   1533c:	2000d9f4 	.word	0x2000d9f4
   15340:	0001529d 	.word	0x0001529d

00015344 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
   15344:	b480      	push	{r7}
   15346:	b083      	sub	sp, #12
   15348:	af00      	add	r7, sp, #0
   1534a:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
   1534c:	4b04      	ldr	r3, [pc, #16]	; (15360 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
   1534e:	681b      	ldr	r3, [r3, #0]
   15350:	2201      	movs	r2, #1
   15352:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
   15356:	bf00      	nop
   15358:	370c      	adds	r7, #12
   1535a:	46bd      	mov	sp, r7
   1535c:	bc80      	pop	{r7}
   1535e:	4770      	bx	lr
   15360:	2000d9f4 	.word	0x2000d9f4

00015364 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
   15364:	b580      	push	{r7, lr}
   15366:	b082      	sub	sp, #8
   15368:	af00      	add	r7, sp, #0
   1536a:	6078      	str	r0, [r7, #4]
   1536c:	687b      	ldr	r3, [r7, #4]
   1536e:	3304      	adds	r3, #4
   15370:	4618      	mov	r0, r3
   15372:	4b13      	ldr	r3, [pc, #76]	; (153c0 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
   15374:	4798      	blx	r3
   15376:	6878      	ldr	r0, [r7, #4]
   15378:	4b12      	ldr	r3, [pc, #72]	; (153c4 <_ZN15CO_Driver_ClassC1Ev+0x60>)
   1537a:	4798      	blx	r3
   1537c:	687b      	ldr	r3, [r7, #4]
   1537e:	330c      	adds	r3, #12
   15380:	4618      	mov	r0, r3
   15382:	4b11      	ldr	r3, [pc, #68]	; (153c8 <_ZN15CO_Driver_ClassC1Ev+0x64>)
   15384:	4798      	blx	r3
   15386:	687b      	ldr	r3, [r7, #4]
   15388:	3314      	adds	r3, #20
   1538a:	4618      	mov	r0, r3
   1538c:	4b0f      	ldr	r3, [pc, #60]	; (153cc <_ZN15CO_Driver_ClassC1Ev+0x68>)
   1538e:	4798      	blx	r3
   15390:	687b      	ldr	r3, [r7, #4]
   15392:	3320      	adds	r3, #32
   15394:	4618      	mov	r0, r3
   15396:	4b0e      	ldr	r3, [pc, #56]	; (153d0 <_ZN15CO_Driver_ClassC1Ev+0x6c>)
   15398:	4798      	blx	r3
   1539a:	4a0e      	ldr	r2, [pc, #56]	; (153d4 <_ZN15CO_Driver_ClassC1Ev+0x70>)
   1539c:	687b      	ldr	r3, [r7, #4]
   1539e:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
   153a0:	687b      	ldr	r3, [r7, #4]
   153a2:	2200      	movs	r2, #0
   153a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
   153a8:	4a0b      	ldr	r2, [pc, #44]	; (153d8 <_ZN15CO_Driver_ClassC1Ev+0x74>)
   153aa:	687b      	ldr	r3, [r7, #4]
   153ac:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
   153ae:	687b      	ldr	r3, [r7, #4]
   153b0:	2200      	movs	r2, #0
   153b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
} //CO_Driver_Class
   153b6:	687b      	ldr	r3, [r7, #4]
   153b8:	4618      	mov	r0, r3
   153ba:	3708      	adds	r7, #8
   153bc:	46bd      	mov	sp, r7
   153be:	bd80      	pop	{r7, pc}
   153c0:	00015ac1 	.word	0x00015ac1
   153c4:	00016217 	.word	0x00016217
   153c8:	00017a25 	.word	0x00017a25
   153cc:	00016379 	.word	0x00016379
   153d0:	00016045 	.word	0x00016045
   153d4:	0001b058 	.word	0x0001b058
   153d8:	2000d9f4 	.word	0x2000d9f4

000153dc <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
   153dc:	b580      	push	{r7, lr}
   153de:	b082      	sub	sp, #8
   153e0:	af00      	add	r7, sp, #0
   153e2:	6078      	str	r0, [r7, #4]
   153e4:	4a0f      	ldr	r2, [pc, #60]	; (15424 <_ZN15CO_Driver_ClassD1Ev+0x48>)
   153e6:	687b      	ldr	r3, [r7, #4]
   153e8:	601a      	str	r2, [r3, #0]
   153ea:	687b      	ldr	r3, [r7, #4]
   153ec:	3320      	adds	r3, #32
   153ee:	4618      	mov	r0, r3
   153f0:	4b0d      	ldr	r3, [pc, #52]	; (15428 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
   153f2:	4798      	blx	r3
   153f4:	687b      	ldr	r3, [r7, #4]
   153f6:	3314      	adds	r3, #20
   153f8:	4618      	mov	r0, r3
   153fa:	4b0c      	ldr	r3, [pc, #48]	; (1542c <_ZN15CO_Driver_ClassD1Ev+0x50>)
   153fc:	4798      	blx	r3
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	330c      	adds	r3, #12
   15402:	4618      	mov	r0, r3
   15404:	4b0a      	ldr	r3, [pc, #40]	; (15430 <_ZN15CO_Driver_ClassD1Ev+0x54>)
   15406:	4798      	blx	r3
   15408:	6878      	ldr	r0, [r7, #4]
   1540a:	4b0a      	ldr	r3, [pc, #40]	; (15434 <_ZN15CO_Driver_ClassD1Ev+0x58>)
   1540c:	4798      	blx	r3
   1540e:	687b      	ldr	r3, [r7, #4]
   15410:	3304      	adds	r3, #4
   15412:	4618      	mov	r0, r3
   15414:	4b08      	ldr	r3, [pc, #32]	; (15438 <_ZN15CO_Driver_ClassD1Ev+0x5c>)
   15416:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
   15418:	687b      	ldr	r3, [r7, #4]
   1541a:	4618      	mov	r0, r3
   1541c:	3708      	adds	r7, #8
   1541e:	46bd      	mov	sp, r7
   15420:	bd80      	pop	{r7, pc}
   15422:	bf00      	nop
   15424:	0001b058 	.word	0x0001b058
   15428:	00016065 	.word	0x00016065
   1542c:	0001638d 	.word	0x0001638d
   15430:	00017a39 	.word	0x00017a39
   15434:	0001622b 	.word	0x0001622b
   15438:	00015ae9 	.word	0x00015ae9

0001543c <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
   1543c:	b480      	push	{r7}
   1543e:	b085      	sub	sp, #20
   15440:	af00      	add	r7, sp, #0
   15442:	60f8      	str	r0, [r7, #12]
   15444:	60b9      	str	r1, [r7, #8]
   15446:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
   15448:	68bb      	ldr	r3, [r7, #8]
   1544a:	2200      	movs	r2, #0
   1544c:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
   1544e:	68bb      	ldr	r3, [r7, #8]
   15450:	2200      	movs	r2, #0
   15452:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
   15454:	687b      	ldr	r3, [r7, #4]
   15456:	791a      	ldrb	r2, [r3, #4]
   15458:	68bb      	ldr	r3, [r7, #8]
   1545a:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
   1545c:	687b      	ldr	r3, [r7, #4]
   1545e:	681b      	ldr	r3, [r3, #0]
   15460:	089a      	lsrs	r2, r3, #2
   15462:	68bb      	ldr	r3, [r7, #8]
   15464:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
   15466:	687b      	ldr	r3, [r7, #4]
   15468:	681b      	ldr	r3, [r3, #0]
   1546a:	b2db      	uxtb	r3, r3
   1546c:	f003 0302 	and.w	r3, r3, #2
   15470:	b2da      	uxtb	r2, r3
   15472:	68bb      	ldr	r3, [r7, #8]
   15474:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
   15476:	687b      	ldr	r3, [r7, #4]
   15478:	1d5a      	adds	r2, r3, #5
   1547a:	68bb      	ldr	r3, [r7, #8]
   1547c:	609a      	str	r2, [r3, #8]
}
   1547e:	bf00      	nop
   15480:	3714      	adds	r7, #20
   15482:	46bd      	mov	sp, r7
   15484:	bc80      	pop	{r7}
   15486:	4770      	bx	lr

00015488 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
   15488:	b590      	push	{r4, r7, lr}
   1548a:	b085      	sub	sp, #20
   1548c:	af00      	add	r7, sp, #0
   1548e:	60f8      	str	r0, [r7, #12]
   15490:	60b9      	str	r1, [r7, #8]
   15492:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
   15494:	687a      	ldr	r2, [r7, #4]
   15496:	68bb      	ldr	r3, [r7, #8]
   15498:	4614      	mov	r4, r2
   1549a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1549c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
   154a0:	68bb      	ldr	r3, [r7, #8]
   154a2:	7b1a      	ldrb	r2, [r3, #12]
   154a4:	687b      	ldr	r3, [r7, #4]
   154a6:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
   154a8:	68bb      	ldr	r3, [r7, #8]
   154aa:	681a      	ldr	r2, [r3, #0]
   154ac:	687b      	ldr	r3, [r7, #4]
   154ae:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
   154b0:	687b      	ldr	r3, [r7, #4]
   154b2:	f103 0015 	add.w	r0, r3, #21
   154b6:	68bb      	ldr	r3, [r7, #8]
   154b8:	6899      	ldr	r1, [r3, #8]
   154ba:	68bb      	ldr	r3, [r7, #8]
   154bc:	7b1b      	ldrb	r3, [r3, #12]
   154be:	461a      	mov	r2, r3
   154c0:	4b02      	ldr	r3, [pc, #8]	; (154cc <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
   154c2:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
   154c4:	bf00      	nop
   154c6:	3714      	adds	r7, #20
   154c8:	46bd      	mov	sp, r7
   154ca:	bd90      	pop	{r4, r7, pc}
   154cc:	0001a539 	.word	0x0001a539

000154d0 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
   154d0:	b480      	push	{r7}
   154d2:	b083      	sub	sp, #12
   154d4:	af00      	add	r7, sp, #0
   154d6:	6078      	str	r0, [r7, #4]
   154d8:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
   154da:	687b      	ldr	r3, [r7, #4]
   154dc:	683a      	ldr	r2, [r7, #0]
   154de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
   154e2:	bf00      	nop
   154e4:	370c      	adds	r7, #12
   154e6:	46bd      	mov	sp, r7
   154e8:	bc80      	pop	{r7}
   154ea:	4770      	bx	lr

000154ec <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
   154ec:	b580      	push	{r7, lr}
   154ee:	b084      	sub	sp, #16
   154f0:	af00      	add	r7, sp, #0
   154f2:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
   154f4:	687b      	ldr	r3, [r7, #4]
   154f6:	2200      	movs	r2, #0
   154f8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
   154fc:	687b      	ldr	r3, [r7, #4]
   154fe:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15502:	681b      	ldr	r3, [r3, #0]
   15504:	4618      	mov	r0, r3
   15506:	4b0a      	ldr	r3, [pc, #40]	; (15530 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
   15508:	4798      	blx	r3
   1550a:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
   1550c:	68fb      	ldr	r3, [r7, #12]
   1550e:	2b00      	cmp	r3, #0
   15510:	d002      	beq.n	15518 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   15512:	f06f 030e 	mvn.w	r3, #14
   15516:	e007      	b.n	15528 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
   15518:	687b      	ldr	r3, [r7, #4]
   1551a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1551e:	2201      	movs	r2, #1
   15520:	751a      	strb	r2, [r3, #20]
	return Error;
   15522:	687b      	ldr	r3, [r7, #4]
   15524:	f993 30a8 	ldrsb.w	r3, [r3, #168]	; 0xa8
}
   15528:	4618      	mov	r0, r3
   1552a:	3710      	adds	r7, #16
   1552c:	46bd      	mov	sp, r7
   1552e:	bd80      	pop	{r7, pc}
   15530:	000032d1 	.word	0x000032d1

00015534 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
   15534:	b580      	push	{r7, lr}
   15536:	b086      	sub	sp, #24
   15538:	af00      	add	r7, sp, #0
   1553a:	60f8      	str	r0, [r7, #12]
   1553c:	60b9      	str	r1, [r7, #8]
   1553e:	607a      	str	r2, [r7, #4]
   15540:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
   15542:	68fb      	ldr	r3, [r7, #12]
   15544:	687a      	ldr	r2, [r7, #4]
   15546:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
   1554a:	68bb      	ldr	r3, [r7, #8]
   1554c:	2b00      	cmp	r3, #0
   1554e:	d005      	beq.n	1555c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15550:	683b      	ldr	r3, [r7, #0]
   15552:	2b00      	cmp	r3, #0
   15554:	d002      	beq.n	1555c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15558:	2b00      	cmp	r3, #0
   1555a:	d102      	bne.n	15562 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
   1555c:	f04f 33ff 	mov.w	r3, #4294967295
   15560:	e085      	b.n	1566e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
   15562:	68fb      	ldr	r3, [r7, #12]
   15564:	68ba      	ldr	r2, [r7, #8]
   15566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
   1556a:	68bb      	ldr	r3, [r7, #8]
   1556c:	687a      	ldr	r2, [r7, #4]
   1556e:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
   15570:	68bb      	ldr	r3, [r7, #8]
   15572:	683a      	ldr	r2, [r7, #0]
   15574:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
   15576:	68bb      	ldr	r3, [r7, #8]
   15578:	6a3a      	ldr	r2, [r7, #32]
   1557a:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
   1557c:	68bb      	ldr	r3, [r7, #8]
   1557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15580:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
   15582:	68bb      	ldr	r3, [r7, #8]
   15584:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15586:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
   15588:	68bb      	ldr	r3, [r7, #8]
   1558a:	2200      	movs	r2, #0
   1558c:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
   1558e:	68bb      	ldr	r3, [r7, #8]
   15590:	2200      	movs	r2, #0
   15592:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
   15594:	68bb      	ldr	r3, [r7, #8]
   15596:	2200      	movs	r2, #0
   15598:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
   1559a:	68bb      	ldr	r3, [r7, #8]
   1559c:	2201      	movs	r2, #1
   1559e:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
   155a0:	68bb      	ldr	r3, [r7, #8]
   155a2:	2200      	movs	r2, #0
   155a4:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
   155a6:	68bb      	ldr	r3, [r7, #8]
   155a8:	2200      	movs	r2, #0
   155aa:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
   155ac:	68bb      	ldr	r3, [r7, #8]
   155ae:	2200      	movs	r2, #0
   155b0:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
   155b2:	68fb      	ldr	r3, [r7, #12]
   155b4:	2200      	movs	r2, #0
   155b6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   155ba:	68fb      	ldr	r3, [r7, #12]
   155bc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   155c0:	6a3b      	ldr	r3, [r7, #32]
   155c2:	429a      	cmp	r2, r3
   155c4:	d217      	bcs.n	155f6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
   155c6:	68fb      	ldr	r3, [r7, #12]
   155c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   155cc:	011b      	lsls	r3, r3, #4
   155ce:	683a      	ldr	r2, [r7, #0]
   155d0:	4413      	add	r3, r2
   155d2:	2200      	movs	r2, #0
   155d4:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
   155d6:	68fb      	ldr	r3, [r7, #12]
   155d8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   155dc:	011b      	lsls	r3, r3, #4
   155de:	683a      	ldr	r2, [r7, #0]
   155e0:	4413      	add	r3, r2
   155e2:	2200      	movs	r2, #0
   155e4:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
   155e6:	68fb      	ldr	r3, [r7, #12]
   155e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   155ec:	1c5a      	adds	r2, r3, #1
   155ee:	68fb      	ldr	r3, [r7, #12]
   155f0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   155f4:	e7e1      	b.n	155ba <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
   155f6:	68fb      	ldr	r3, [r7, #12]
   155f8:	2200      	movs	r2, #0
   155fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   155fe:	68fb      	ldr	r3, [r7, #12]
   15600:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   15604:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15606:	429a      	cmp	r2, r3
   15608:	d20f      	bcs.n	1562a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
   1560a:	68fb      	ldr	r3, [r7, #12]
   1560c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   15610:	011b      	lsls	r3, r3, #4
   15612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15614:	4413      	add	r3, r2
   15616:	2200      	movs	r2, #0
   15618:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
   1561a:	68fb      	ldr	r3, [r7, #12]
   1561c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   15620:	1c5a      	adds	r2, r3, #1
   15622:	68fb      	ldr	r3, [r7, #12]
   15624:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15628:	e7e9      	b.n	155fe <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
   1562a:	68f8      	ldr	r0, [r7, #12]
   1562c:	4b12      	ldr	r3, [pc, #72]	; (15678 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
   1562e:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
   15630:	68fb      	ldr	r3, [r7, #12]
   15632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   15636:	4a11      	ldr	r2, [pc, #68]	; (1567c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
   15638:	2100      	movs	r1, #0
   1563a:	4618      	mov	r0, r3
   1563c:	4b10      	ldr	r3, [pc, #64]	; (15680 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
   1563e:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
   15640:	68fb      	ldr	r3, [r7, #12]
   15642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   15646:	4a0f      	ldr	r2, [pc, #60]	; (15684 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
   15648:	2102      	movs	r1, #2
   1564a:	4618      	mov	r0, r3
   1564c:	4b0c      	ldr	r3, [pc, #48]	; (15680 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
   1564e:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
   15650:	6878      	ldr	r0, [r7, #4]
   15652:	4b0d      	ldr	r3, [pc, #52]	; (15688 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
   15654:	4798      	blx	r3
   15656:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
   15658:	697b      	ldr	r3, [r7, #20]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d002      	beq.n	15664 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   1565e:	f06f 030e 	mvn.w	r3, #14
   15662:	e004      	b.n	1566e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	}
	CAN_Module=CANmodule;
   15664:	68fb      	ldr	r3, [r7, #12]
   15666:	68ba      	ldr	r2, [r7, #8]
   15668:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
   1566c:	2300      	movs	r3, #0
}
   1566e:	4618      	mov	r0, r3
   15670:	3718      	adds	r7, #24
   15672:	46bd      	mov	sp, r7
   15674:	bd80      	pop	{r7, pc}
   15676:	bf00      	nop
   15678:	0001568d 	.word	0x0001568d
   1567c:	000152b5 	.word	0x000152b5
   15680:	000033a5 	.word	0x000033a5
   15684:	00015311 	.word	0x00015311
   15688:	000032d1 	.word	0x000032d1

0001568c <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
   1568c:	b480      	push	{r7}
   1568e:	b083      	sub	sp, #12
   15690:	af00      	add	r7, sp, #0
   15692:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
   15694:	bf00      	nop
   15696:	370c      	adds	r7, #12
   15698:	46bd      	mov	sp, r7
   1569a:	bc80      	pop	{r7}
   1569c:	4770      	bx	lr

0001569e <_ZN15CO_Driver_Class14Set_Slave_NodeEh>:
uint8_t CO_Driver_Class::Set_Slave_Node(uint8_t sn){
   1569e:	b480      	push	{r7}
   156a0:	b083      	sub	sp, #12
   156a2:	af00      	add	r7, sp, #0
   156a4:	6078      	str	r0, [r7, #4]
   156a6:	460b      	mov	r3, r1
   156a8:	70fb      	strb	r3, [r7, #3]
	slave_node=sn;
   156aa:	687b      	ldr	r3, [r7, #4]
   156ac:	78fa      	ldrb	r2, [r7, #3]
   156ae:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	return slave_node;
   156b2:	687b      	ldr	r3, [r7, #4]
   156b4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
}
   156b8:	4618      	mov	r0, r3
   156ba:	370c      	adds	r7, #12
   156bc:	46bd      	mov	sp, r7
   156be:	bc80      	pop	{r7}
   156c0:	4770      	bx	lr
	...

000156c4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
   156c4:	b590      	push	{r4, r7, lr}
   156c6:	b087      	sub	sp, #28
   156c8:	af00      	add	r7, sp, #0
   156ca:	60f8      	str	r0, [r7, #12]
   156cc:	60b9      	str	r1, [r7, #8]
   156ce:	607a      	str	r2, [r7, #4]
   156d0:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
   156d2:	68fb      	ldr	r3, [r7, #12]
   156d4:	2200      	movs	r2, #0
   156d6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
   156da:	68fb      	ldr	r3, [r7, #12]
   156dc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   156e0:	2b00      	cmp	r3, #0
   156e2:	d060      	beq.n	157a6 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   156e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156e6:	2b00      	cmp	r3, #0
   156e8:	d05d      	beq.n	157a6 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   156ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   156ec:	2b00      	cmp	r3, #0
   156ee:	d05a      	beq.n	157a6 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   156f0:	68fb      	ldr	r3, [r7, #12]
   156f2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   156f6:	689a      	ldr	r2, [r3, #8]
   156f8:	68bb      	ldr	r3, [r7, #8]
   156fa:	429a      	cmp	r2, r3
   156fc:	d953      	bls.n	157a6 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
   156fe:	68fb      	ldr	r3, [r7, #12]
   15700:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15704:	685a      	ldr	r2, [r3, #4]
   15706:	68bb      	ldr	r3, [r7, #8]
   15708:	011b      	lsls	r3, r3, #4
   1570a:	4413      	add	r3, r2
   1570c:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
   1570e:	697b      	ldr	r3, [r7, #20]
   15710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15712:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
   15714:	697b      	ldr	r3, [r7, #20]
   15716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   15718:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
   1571a:	687b      	ldr	r3, [r7, #4]
   1571c:	009a      	lsls	r2, r3, #2
   1571e:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   15722:	4013      	ands	r3, r2
   15724:	697a      	ldr	r2, [r7, #20]
   15726:	6013      	str	r3, [r2, #0]
		if (rtr)
   15728:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1572c:	2b00      	cmp	r3, #0
   1572e:	d005      	beq.n	1573c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
   15730:	697b      	ldr	r3, [r7, #20]
   15732:	681b      	ldr	r3, [r3, #0]
   15734:	f043 0202 	orr.w	r2, r3, #2
   15738:	697b      	ldr	r3, [r7, #20]
   1573a:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
   1573c:	683b      	ldr	r3, [r7, #0]
   1573e:	009a      	lsls	r2, r3, #2
   15740:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   15744:	4013      	ands	r3, r2
   15746:	697a      	ldr	r2, [r7, #20]
   15748:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
   1574a:	697b      	ldr	r3, [r7, #20]
   1574c:	685b      	ldr	r3, [r3, #4]
   1574e:	f043 0202 	orr.w	r2, r3, #2
   15752:	697b      	ldr	r3, [r7, #20]
   15754:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
   15756:	68fb      	ldr	r3, [r7, #12]
   15758:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1575c:	7d5b      	ldrb	r3, [r3, #21]
   1575e:	b2db      	uxtb	r3, r3
   15760:	2b00      	cmp	r3, #0
   15762:	bf14      	ite	ne
   15764:	2301      	movne	r3, #1
   15766:	2300      	moveq	r3, #0
   15768:	b2db      	uxtb	r3, r3
   1576a:	2b00      	cmp	r3, #0
   1576c:	d120      	bne.n	157b0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
   1576e:	697b      	ldr	r3, [r7, #20]
   15770:	681a      	ldr	r2, [r3, #0]
   15772:	68fb      	ldr	r3, [r7, #12]
   15774:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			CO_Filter.mask = buffer->mask;
   15778:	697b      	ldr	r3, [r7, #20]
   1577a:	685a      	ldr	r2, [r3, #4]
   1577c:	68fb      	ldr	r3, [r7, #12]
   1577e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
   15782:	68fb      	ldr	r3, [r7, #12]
   15784:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15788:	6818      	ldr	r0, [r3, #0]
   1578a:	68bb      	ldr	r3, [r7, #8]
   1578c:	b2d9      	uxtb	r1, r3
   1578e:	68fb      	ldr	r3, [r7, #12]
   15790:	f503 7396 	add.w	r3, r3, #300	; 0x12c
   15794:	2200      	movs	r2, #0
   15796:	4c0a      	ldr	r4, [pc, #40]	; (157c0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
   15798:	47a0      	blx	r4
   1579a:	4603      	mov	r3, r0
   1579c:	b25a      	sxtb	r2, r3
   1579e:	68fb      	ldr	r3, [r7, #12]
   157a0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		}
   157a4:	e004      	b.n	157b0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
   157a6:	68fb      	ldr	r3, [r7, #12]
   157a8:	22ff      	movs	r2, #255	; 0xff
   157aa:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
   157ae:	e000      	b.n	157b2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
   157b0:	bf00      	nop
	}
	return ret;
   157b2:	68fb      	ldr	r3, [r7, #12]
   157b4:	f993 30a9 	ldrsb.w	r3, [r3, #169]	; 0xa9
}
   157b8:	4618      	mov	r0, r3
   157ba:	371c      	adds	r7, #28
   157bc:	46bd      	mov	sp, r7
   157be:	bd90      	pop	{r4, r7, pc}
   157c0:	00003421 	.word	0x00003421

000157c4 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
   157c4:	b480      	push	{r7}
   157c6:	b085      	sub	sp, #20
   157c8:	af00      	add	r7, sp, #0
   157ca:	60f8      	str	r0, [r7, #12]
   157cc:	60b9      	str	r1, [r7, #8]
   157ce:	607a      	str	r2, [r7, #4]
   157d0:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
   157d2:	68fb      	ldr	r3, [r7, #12]
   157d4:	2200      	movs	r2, #0
   157d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
   157da:	68fb      	ldr	r3, [r7, #12]
   157dc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   157e0:	2b00      	cmp	r3, #0
   157e2:	d03c      	beq.n	1585e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
   157e4:	68fb      	ldr	r3, [r7, #12]
   157e6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   157ea:	691a      	ldr	r2, [r3, #16]
   157ec:	68bb      	ldr	r3, [r7, #8]
   157ee:	429a      	cmp	r2, r3
   157f0:	d935      	bls.n	1585e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
   157f2:	68fb      	ldr	r3, [r7, #12]
   157f4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   157f8:	68da      	ldr	r2, [r3, #12]
   157fa:	68bb      	ldr	r3, [r7, #8]
   157fc:	011b      	lsls	r3, r3, #4
   157fe:	441a      	add	r2, r3
   15800:	68fb      	ldr	r3, [r7, #12]
   15802:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
   15806:	68fb      	ldr	r3, [r7, #12]
   15808:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   1580c:	68fa      	ldr	r2, [r7, #12]
   1580e:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
   15812:	6812      	ldr	r2, [r2, #0]
   15814:	f3c2 020a 	ubfx	r2, r2, #0, #11
   15818:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
   1581a:	68fb      	ldr	r3, [r7, #12]
   1581c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15820:	687a      	ldr	r2, [r7, #4]
   15822:	0092      	lsls	r2, r2, #2
   15824:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
   15826:	78fb      	ldrb	r3, [r7, #3]
   15828:	2b00      	cmp	r3, #0
   1582a:	d009      	beq.n	15840 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
   1582c:	68fb      	ldr	r3, [r7, #12]
   1582e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15832:	68fa      	ldr	r2, [r7, #12]
   15834:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
   15838:	6812      	ldr	r2, [r2, #0]
   1583a:	f042 0202 	orr.w	r2, r2, #2
   1583e:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
   15840:	68fb      	ldr	r3, [r7, #12]
   15842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15846:	7e3a      	ldrb	r2, [r7, #24]
   15848:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
   1584a:	68fb      	ldr	r3, [r7, #12]
   1584c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15850:	2200      	movs	r2, #0
   15852:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
   15854:	68fb      	ldr	r3, [r7, #12]
   15856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   1585a:	7f3a      	ldrb	r2, [r7, #28]
   1585c:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
   1585e:	68fb      	ldr	r3, [r7, #12]
   15860:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
   15864:	4618      	mov	r0, r3
   15866:	3714      	adds	r7, #20
   15868:	46bd      	mov	sp, r7
   1586a:	bc80      	pop	{r7}
   1586c:	4770      	bx	lr
	...

00015870 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
   15870:	b590      	push	{r4, r7, lr}
   15872:	b089      	sub	sp, #36	; 0x24
   15874:	af02      	add	r7, sp, #8
   15876:	6078      	str	r0, [r7, #4]
   15878:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
   1587a:	687b      	ldr	r3, [r7, #4]
   1587c:	2200      	movs	r2, #0
   1587e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	if(buffer->bufferFull){
   15882:	683b      	ldr	r3, [r7, #0]
   15884:	7b5b      	ldrb	r3, [r3, #13]
   15886:	b2db      	uxtb	r3, r3
   15888:	2b00      	cmp	r3, #0
   1588a:	bf14      	ite	ne
   1588c:	2301      	movne	r3, #1
   1588e:	2300      	moveq	r3, #0
   15890:	b2db      	uxtb	r3, r3
   15892:	2b00      	cmp	r3, #0
   15894:	d01d      	beq.n	158d2 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
   15896:	687b      	ldr	r3, [r7, #4]
   15898:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1589c:	7ddb      	ldrb	r3, [r3, #23]
   1589e:	b2db      	uxtb	r3, r3
   158a0:	2b00      	cmp	r3, #0
   158a2:	bf0c      	ite	eq
   158a4:	2301      	moveq	r3, #1
   158a6:	2300      	movne	r3, #0
   158a8:	b2db      	uxtb	r3, r3
   158aa:	2b00      	cmp	r3, #0
   158ac:	d00d      	beq.n	158ca <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
   158ae:	687b      	ldr	r3, [r7, #4]
   158b0:	1d18      	adds	r0, r3, #4
   158b2:	687b      	ldr	r3, [r7, #4]
   158b4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   158b8:	6a19      	ldr	r1, [r3, #32]
   158ba:	683b      	ldr	r3, [r7, #0]
   158bc:	681b      	ldr	r3, [r3, #0]
   158be:	9300      	str	r3, [sp, #0]
   158c0:	f248 1310 	movw	r3, #33040	; 0x8110
   158c4:	2214      	movs	r2, #20
   158c6:	4c35      	ldr	r4, [pc, #212]	; (1599c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
   158c8:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
   158ca:	687b      	ldr	r3, [r7, #4]
   158cc:	22f7      	movs	r2, #247	; 0xf7
   158ce:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	}

	

	PrepareTxMessage(&msgHeader, buffer);
   158d2:	687b      	ldr	r3, [r7, #4]
   158d4:	3384      	adds	r3, #132	; 0x84
   158d6:	683a      	ldr	r2, [r7, #0]
   158d8:	4619      	mov	r1, r3
   158da:	6878      	ldr	r0, [r7, #4]
   158dc:	4b30      	ldr	r3, [pc, #192]	; (159a0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
   158de:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
   158e0:	687b      	ldr	r3, [r7, #4]
   158e2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   158e6:	699b      	ldr	r3, [r3, #24]
   158e8:	2b00      	cmp	r3, #0
   158ea:	bf0c      	ite	eq
   158ec:	2301      	moveq	r3, #1
   158ee:	2300      	movne	r3, #0
   158f0:	b2db      	uxtb	r3, r3
   158f2:	2b00      	cmp	r3, #0
   158f4:	d041      	beq.n	1597a <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
   158f6:	687b      	ldr	r3, [r7, #4]
   158f8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   158fc:	683a      	ldr	r2, [r7, #0]
   158fe:	7b92      	ldrb	r2, [r2, #14]
   15900:	b2d2      	uxtb	r2, r2
   15902:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
   15904:	687b      	ldr	r3, [r7, #4]
   15906:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1590a:	681b      	ldr	r3, [r3, #0]
   1590c:	4a25      	ldr	r2, [pc, #148]	; (159a4 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
   1590e:	2101      	movs	r1, #1
   15910:	4618      	mov	r0, r3
   15912:	4b25      	ldr	r3, [pc, #148]	; (159a8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
   15914:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
   15916:	687b      	ldr	r3, [r7, #4]
   15918:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1591c:	681b      	ldr	r3, [r3, #0]
   1591e:	4618      	mov	r0, r3
   15920:	4b22      	ldr	r3, [pc, #136]	; (159ac <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
   15922:	4798      	blx	r3
		receivedtxCOCallback=false;
   15924:	687b      	ldr	r3, [r7, #4]
   15926:	2200      	movs	r2, #0
   15928:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1592c:	f3ef 8310 	mrs	r3, PRIMASK
   15930:	60fb      	str	r3, [r7, #12]
  return(result);
   15932:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
   15934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   15936:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
   15938:	687b      	ldr	r3, [r7, #4]
   1593a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1593e:	681a      	ldr	r2, [r3, #0]
   15940:	687b      	ldr	r3, [r7, #4]
   15942:	3384      	adds	r3, #132	; 0x84
   15944:	4619      	mov	r1, r3
   15946:	4610      	mov	r0, r2
   15948:	4b19      	ldr	r3, [pc, #100]	; (159b0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
   1594a:	4798      	blx	r3
   1594c:	4603      	mov	r3, r0
   1594e:	461a      	mov	r2, r3
   15950:	687b      	ldr	r3, [r7, #4]
   15952:	629a      	str	r2, [r3, #40]	; 0x28
   15954:	697b      	ldr	r3, [r7, #20]
   15956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15958:	693b      	ldr	r3, [r7, #16]
   1595a:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
   1595e:	687b      	ldr	r3, [r7, #4]
   15960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15962:	2b00      	cmp	r3, #0
   15964:	bf14      	ite	ne
   15966:	2301      	movne	r3, #1
   15968:	2300      	moveq	r3, #0
   1596a:	b2db      	uxtb	r3, r3
   1596c:	2b00      	cmp	r3, #0
   1596e:	d00d      	beq.n	1598c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
   15970:	687b      	ldr	r3, [r7, #4]
   15972:	22f1      	movs	r2, #241	; 0xf1
   15974:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   15978:	e008      	b.n	1598c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
   1597a:	683b      	ldr	r3, [r7, #0]
   1597c:	2201      	movs	r2, #1
   1597e:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
   15980:	687b      	ldr	r3, [r7, #4]
   15982:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15986:	699a      	ldr	r2, [r3, #24]
   15988:	3201      	adds	r2, #1
   1598a:	619a      	str	r2, [r3, #24]
	}
	

	return err;
   1598c:	687b      	ldr	r3, [r7, #4]
   1598e:	f993 30aa 	ldrsb.w	r3, [r3, #170]	; 0xaa
}
   15992:	4618      	mov	r0, r3
   15994:	371c      	adds	r7, #28
   15996:	46bd      	mov	sp, r7
   15998:	bd90      	pop	{r4, r7, pc}
   1599a:	bf00      	nop
   1599c:	00015d35 	.word	0x00015d35
   159a0:	0001543d 	.word	0x0001543d
   159a4:	00015345 	.word	0x00015345
   159a8:	000033a5 	.word	0x000033a5
   159ac:	000032d1 	.word	0x000032d1
   159b0:	00003359 	.word	0x00003359

000159b4 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
   159b4:	b580      	push	{r7, lr}
   159b6:	b084      	sub	sp, #16
   159b8:	af00      	add	r7, sp, #0
   159ba:	6078      	str	r0, [r7, #4]

	msgMatched = false;
   159bc:	687b      	ldr	r3, [r7, #4]
   159be:	2200      	movs	r2, #0
   159c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
   159c4:	687b      	ldr	r3, [r7, #4]
   159c6:	f103 0170 	add.w	r1, r3, #112	; 0x70
   159ca:	687b      	ldr	r3, [r7, #4]
   159cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
   159d0:	461a      	mov	r2, r3
   159d2:	6878      	ldr	r0, [r7, #4]
   159d4:	4b38      	ldr	r3, [pc, #224]	; (15ab8 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x104>)
   159d6:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
   159d8:	687b      	ldr	r3, [r7, #4]
   159da:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   159de:	685a      	ldr	r2, [r3, #4]
   159e0:	687b      	ldr	r3, [r7, #4]
   159e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
   159e6:	687b      	ldr	r3, [r7, #4]
   159e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   159ec:	009b      	lsls	r3, r3, #2
   159ee:	687a      	ldr	r2, [r7, #4]
   159f0:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
   159f4:	4313      	orrs	r3, r2
   159f6:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   159f8:	687b      	ldr	r3, [r7, #4]
   159fa:	2200      	movs	r2, #0
   159fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   15a06:	687b      	ldr	r3, [r7, #4]
   15a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15a0c:	689b      	ldr	r3, [r3, #8]
   15a0e:	429a      	cmp	r2, r3
   15a10:	d221      	bcs.n	15a56 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
   15a12:	687b      	ldr	r3, [r7, #4]
   15a14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15a18:	681a      	ldr	r2, [r3, #0]
   15a1a:	68fb      	ldr	r3, [r7, #12]
   15a1c:	405a      	eors	r2, r3
   15a1e:	687b      	ldr	r3, [r7, #4]
   15a20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15a24:	685b      	ldr	r3, [r3, #4]
   15a26:	4013      	ands	r3, r2
   15a28:	2b00      	cmp	r3, #0
   15a2a:	d104      	bne.n	15a36 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x82>
		{
			msgMatched = true;
   15a2c:	687b      	ldr	r3, [r7, #4]
   15a2e:	2201      	movs	r2, #1
   15a30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			break;
   15a34:	e00f      	b.n	15a56 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
		}
		MsgBuff++;
   15a36:	687b      	ldr	r3, [r7, #4]
   15a38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15a3c:	f103 0210 	add.w	r2, r3, #16
   15a40:	687b      	ldr	r3, [r7, #4]
   15a42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   15a46:	687b      	ldr	r3, [r7, #4]
   15a48:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   15a4c:	1c5a      	adds	r2, r3, #1
   15a4e:	687b      	ldr	r3, [r7, #4]
   15a50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15a54:	e7d4      	b.n	15a00 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x4c>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
   15a56:	687b      	ldr	r3, [r7, #4]
   15a58:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d018      	beq.n	15a92 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   15a60:	687b      	ldr	r3, [r7, #4]
   15a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15a66:	2b00      	cmp	r3, #0
   15a68:	d013      	beq.n	15a92 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   15a6a:	687b      	ldr	r3, [r7, #4]
   15a6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15a70:	68db      	ldr	r3, [r3, #12]
   15a72:	2b00      	cmp	r3, #0
   15a74:	d00d      	beq.n	15a92 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
   15a76:	687b      	ldr	r3, [r7, #4]
   15a78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15a7c:	68db      	ldr	r3, [r3, #12]
   15a7e:	687a      	ldr	r2, [r7, #4]
   15a80:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
   15a84:	6890      	ldr	r0, [r2, #8]
   15a86:	687a      	ldr	r2, [r7, #4]
   15a88:	f502 7280 	add.w	r2, r2, #256	; 0x100
   15a8c:	4611      	mov	r1, r2
   15a8e:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
   15a90:	e00d      	b.n	15aae <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xfa>
		if (CANmessage.ident==(CO_CAN_ID_TPDO_1+CCU_CANOPEN_NODE))
   15a92:	687b      	ldr	r3, [r7, #4]
   15a94:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15a98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
   15a9c:	d107      	bne.n	15aae <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xfa>
			memcpy((void*)CO_OD_RAM.voltage,(void*)CANmessage.data,2);
   15a9e:	687b      	ldr	r3, [r7, #4]
   15aa0:	f203 1315 	addw	r3, r3, #277	; 0x115
   15aa4:	881b      	ldrh	r3, [r3, #0]
   15aa6:	b29a      	uxth	r2, r3
   15aa8:	4b04      	ldr	r3, [pc, #16]	; (15abc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x108>)
   15aaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
   15aae:	bf00      	nop
   15ab0:	3710      	adds	r7, #16
   15ab2:	46bd      	mov	sp, r7
   15ab4:	bd80      	pop	{r7, pc}
   15ab6:	bf00      	nop
   15ab8:	00015489 	.word	0x00015489
   15abc:	20000220 	.word	0x20000220

00015ac0 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
   15ac0:	b580      	push	{r7, lr}
   15ac2:	b082      	sub	sp, #8
   15ac4:	af00      	add	r7, sp, #0
   15ac6:	6078      	str	r0, [r7, #4]
   15ac8:	6878      	ldr	r0, [r7, #4]
   15aca:	4b05      	ldr	r3, [pc, #20]	; (15ae0 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
   15acc:	4798      	blx	r3
{
	ptrCOEMClass=this;
   15ace:	4a05      	ldr	r2, [pc, #20]	; (15ae4 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
   15ad0:	687b      	ldr	r3, [r7, #4]
   15ad2:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
   15ad4:	687b      	ldr	r3, [r7, #4]
   15ad6:	4618      	mov	r0, r3
   15ad8:	3708      	adds	r7, #8
   15ada:	46bd      	mov	sp, r7
   15adc:	bd80      	pop	{r7, pc}
   15ade:	bf00      	nop
   15ae0:	000171fd 	.word	0x000171fd
   15ae4:	2000d9f8 	.word	0x2000d9f8

00015ae8 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
   15ae8:	b580      	push	{r7, lr}
   15aea:	b082      	sub	sp, #8
   15aec:	af00      	add	r7, sp, #0
   15aee:	6078      	str	r0, [r7, #4]
   15af0:	6878      	ldr	r0, [r7, #4]
   15af2:	4b03      	ldr	r3, [pc, #12]	; (15b00 <_ZN18CO_Emergency_ClassD1Ev+0x18>)
   15af4:	4798      	blx	r3
{
} //~CO_Emergency_Class
   15af6:	687b      	ldr	r3, [r7, #4]
   15af8:	4618      	mov	r0, r3
   15afa:	3708      	adds	r7, #8
   15afc:	46bd      	mov	sp, r7
   15afe:	bd80      	pop	{r7, pc}
   15b00:	00017225 	.word	0x00017225

00015b04 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
   15b04:	b480      	push	{r7}
   15b06:	b087      	sub	sp, #28
   15b08:	af00      	add	r7, sp, #0
   15b0a:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   15b0c:	2300      	movs	r3, #0
   15b0e:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
   15b10:	687b      	ldr	r3, [r7, #4]
   15b12:	681b      	ldr	r3, [r3, #0]
   15b14:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
   15b16:	687b      	ldr	r3, [r7, #4]
   15b18:	685b      	ldr	r3, [r3, #4]
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
   15b1e:	687b      	ldr	r3, [r7, #4]
   15b20:	7f5b      	ldrb	r3, [r3, #29]
   15b22:	2b00      	cmp	r3, #0
   15b24:	d017      	beq.n	15b56 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
   15b26:	693b      	ldr	r3, [r7, #16]
   15b28:	7a5b      	ldrb	r3, [r3, #9]
   15b2a:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
   15b2c:	687b      	ldr	r3, [r7, #4]
   15b2e:	7f1b      	ldrb	r3, [r3, #28]
   15b30:	2b00      	cmp	r3, #0
   15b32:	d104      	bne.n	15b3e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
   15b34:	687b      	ldr	r3, [r7, #4]
   15b36:	685b      	ldr	r3, [r3, #4]
   15b38:	7bba      	ldrb	r2, [r7, #14]
   15b3a:	701a      	strb	r2, [r3, #0]
   15b3c:	e01b      	b.n	15b76 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
   15b3e:	687b      	ldr	r3, [r7, #4]
   15b40:	7f1b      	ldrb	r3, [r3, #28]
   15b42:	461a      	mov	r2, r3
   15b44:	7bbb      	ldrb	r3, [r7, #14]
   15b46:	429a      	cmp	r2, r3
   15b48:	dd02      	ble.n	15b50 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
   15b4a:	4b0e      	ldr	r3, [pc, #56]	; (15b84 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
   15b4c:	617b      	str	r3, [r7, #20]
   15b4e:	e012      	b.n	15b76 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
   15b50:	2300      	movs	r3, #0
   15b52:	617b      	str	r3, [r7, #20]
   15b54:	e00f      	b.n	15b76 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
   15b56:	687b      	ldr	r3, [r7, #4]
   15b58:	7f1b      	ldrb	r3, [r3, #28]
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	d109      	bne.n	15b72 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
   15b5e:	7bfb      	ldrb	r3, [r7, #15]
   15b60:	2b00      	cmp	r3, #0
   15b62:	d103      	bne.n	15b6c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
   15b64:	693b      	ldr	r3, [r7, #16]
   15b66:	2200      	movs	r2, #0
   15b68:	725a      	strb	r2, [r3, #9]
   15b6a:	e004      	b.n	15b76 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
   15b6c:	4b06      	ldr	r3, [pc, #24]	; (15b88 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
   15b6e:	617b      	str	r3, [r7, #20]
   15b70:	e001      	b.n	15b76 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
   15b72:	4b06      	ldr	r3, [pc, #24]	; (15b8c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
   15b74:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
   15b76:	697b      	ldr	r3, [r7, #20]
}
   15b78:	4618      	mov	r0, r3
   15b7a:	371c      	adds	r7, #28
   15b7c:	46bd      	mov	sp, r7
   15b7e:	bc80      	pop	{r7}
   15b80:	4770      	bx	lr
   15b82:	bf00      	nop
   15b84:	08000024 	.word	0x08000024
   15b88:	06090030 	.word	0x06090030
   15b8c:	06010002 	.word	0x06010002

00015b90 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
   15b90:	b580      	push	{r7, lr}
   15b92:	b086      	sub	sp, #24
   15b94:	af00      	add	r7, sp, #0
   15b96:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   15b98:	2300      	movs	r3, #0
   15b9a:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
   15b9c:	687b      	ldr	r3, [r7, #4]
   15b9e:	681b      	ldr	r3, [r3, #0]
   15ba0:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
   15ba2:	4b0f      	ldr	r3, [pc, #60]	; (15be0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   15ba4:	681a      	ldr	r2, [r3, #0]
   15ba6:	687b      	ldr	r3, [r7, #4]
   15ba8:	685b      	ldr	r3, [r3, #4]
   15baa:	4619      	mov	r1, r3
   15bac:	4610      	mov	r0, r2
   15bae:	4b0d      	ldr	r3, [pc, #52]	; (15be4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
   15bb0:	4798      	blx	r3
   15bb2:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
   15bb4:	687b      	ldr	r3, [r7, #4]
   15bb6:	7f5b      	ldrb	r3, [r3, #29]
   15bb8:	2b00      	cmp	r3, #0
   15bba:	d00b      	beq.n	15bd4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   15bbc:	4b08      	ldr	r3, [pc, #32]	; (15be0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   15bbe:	6818      	ldr	r0, [r3, #0]
   15bc0:	687b      	ldr	r3, [r7, #4]
   15bc2:	6859      	ldr	r1, [r3, #4]
   15bc4:	693b      	ldr	r3, [r7, #16]
   15bc6:	781b      	ldrb	r3, [r3, #0]
   15bc8:	461a      	mov	r2, r3
   15bca:	68fb      	ldr	r3, [r7, #12]
   15bcc:	4413      	add	r3, r2
   15bce:	461a      	mov	r2, r3
   15bd0:	4b05      	ldr	r3, [pc, #20]	; (15be8 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
   15bd2:	4798      	blx	r3
    }

    return ret;
   15bd4:	697b      	ldr	r3, [r7, #20]
}
   15bd6:	4618      	mov	r0, r3
   15bd8:	3718      	adds	r7, #24
   15bda:	46bd      	mov	sp, r7
   15bdc:	bd80      	pop	{r7, pc}
   15bde:	bf00      	nop
   15be0:	2000d9f8 	.word	0x2000d9f8
   15be4:	0001727d 	.word	0x0001727d
   15be8:	000172b1 	.word	0x000172b1

00015bec <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
   15bec:	b590      	push	{r4, r7, lr}
   15bee:	b089      	sub	sp, #36	; 0x24
   15bf0:	af02      	add	r7, sp, #8
   15bf2:	60f8      	str	r0, [r7, #12]
   15bf4:	60b9      	str	r1, [r7, #8]
   15bf6:	607a      	str	r2, [r7, #4]
   15bf8:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
   15bfa:	68bb      	ldr	r3, [r7, #8]
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d015      	beq.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15c00:	687b      	ldr	r3, [r7, #4]
   15c02:	2b00      	cmp	r3, #0
   15c04:	d012      	beq.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15c06:	683b      	ldr	r3, [r7, #0]
   15c08:	2b00      	cmp	r3, #0
   15c0a:	d00f      	beq.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15c0e:	2b00      	cmp	r3, #0
   15c10:	d00c      	beq.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   15c16:	2b05      	cmp	r3, #5
   15c18:	d908      	bls.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
   15c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d005      	beq.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15c22:	2b00      	cmp	r3, #0
   15c24:	d002      	beq.n	15c2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15c28:	2b00      	cmp	r3, #0
   15c2a:	d102      	bne.n	15c32 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   15c2c:	f04f 33ff 	mov.w	r3, #4294967295
   15c30:	e072      	b.n	15d18 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
   15c32:	68bb      	ldr	r3, [r7, #8]
   15c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15c36:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
   15c38:	68bb      	ldr	r3, [r7, #8]
   15c3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   15c3e:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
   15c40:	68bb      	ldr	r3, [r7, #8]
   15c42:	3305      	adds	r3, #5
   15c44:	f103 0250 	add.w	r2, r3, #80	; 0x50
   15c48:	68bb      	ldr	r3, [r7, #8]
   15c4a:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
   15c4c:	68bb      	ldr	r3, [r7, #8]
   15c4e:	1d5a      	adds	r2, r3, #5
   15c50:	68bb      	ldr	r3, [r7, #8]
   15c52:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
   15c54:	68bb      	ldr	r3, [r7, #8]
   15c56:	1d5a      	adds	r2, r3, #5
   15c58:	68bb      	ldr	r3, [r7, #8]
   15c5a:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
   15c5c:	68bb      	ldr	r3, [r7, #8]
   15c5e:	2200      	movs	r2, #0
   15c60:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
   15c64:	68bb      	ldr	r3, [r7, #8]
   15c66:	2200      	movs	r2, #0
   15c68:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
   15c6c:	68bb      	ldr	r3, [r7, #8]
   15c6e:	2200      	movs	r2, #0
   15c70:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
   15c72:	687b      	ldr	r3, [r7, #4]
   15c74:	68ba      	ldr	r2, [r7, #8]
   15c76:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
   15c78:	687b      	ldr	r3, [r7, #4]
   15c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   15c7c:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
   15c7e:	687b      	ldr	r3, [r7, #4]
   15c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15c82:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
   15c84:	687b      	ldr	r3, [r7, #4]
   15c86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
   15c8a:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
   15c8c:	687b      	ldr	r3, [r7, #4]
   15c8e:	2200      	movs	r2, #0
   15c90:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	2200      	movs	r2, #0
   15c96:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
   15c98:	2300      	movs	r3, #0
   15c9a:	75fb      	strb	r3, [r7, #23]
   15c9c:	7dfa      	ldrb	r2, [r7, #23]
   15c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   15ca2:	429a      	cmp	r2, r3
   15ca4:	da09      	bge.n	15cba <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
   15ca6:	68bb      	ldr	r3, [r7, #8]
   15ca8:	681a      	ldr	r2, [r3, #0]
   15caa:	7dfb      	ldrb	r3, [r7, #23]
   15cac:	4413      	add	r3, r2
   15cae:	2200      	movs	r2, #0
   15cb0:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
   15cb2:	7dfb      	ldrb	r3, [r7, #23]
   15cb4:	3301      	adds	r3, #1
   15cb6:	75fb      	strb	r3, [r7, #23]
   15cb8:	e7f0      	b.n	15c9c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
   15cba:	2300      	movs	r3, #0
   15cbc:	9301      	str	r3, [sp, #4]
   15cbe:	2300      	movs	r3, #0
   15cc0:	9300      	str	r3, [sp, #0]
   15cc2:	687b      	ldr	r3, [r7, #4]
   15cc4:	4a16      	ldr	r2, [pc, #88]	; (15d20 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
   15cc6:	f241 0103 	movw	r1, #4099	; 0x1003
   15cca:	68f8      	ldr	r0, [r7, #12]
   15ccc:	4c15      	ldr	r4, [pc, #84]	; (15d24 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   15cce:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
   15cd0:	683b      	ldr	r3, [r7, #0]
   15cd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
   15cd6:	2300      	movs	r3, #0
   15cd8:	9301      	str	r3, [sp, #4]
   15cda:	2300      	movs	r3, #0
   15cdc:	9300      	str	r3, [sp, #0]
   15cde:	4613      	mov	r3, r2
   15ce0:	4a11      	ldr	r2, [pc, #68]	; (15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
   15ce2:	f241 0114 	movw	r1, #4116	; 0x1014
   15ce6:	68f8      	ldr	r0, [r7, #12]
   15ce8:	4c0e      	ldr	r4, [pc, #56]	; (15d24 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   15cea:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
   15cec:	687b      	ldr	r3, [r7, #4]
   15cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15cf0:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
   15cf2:	687b      	ldr	r3, [r7, #4]
   15cf4:	695b      	ldr	r3, [r3, #20]
   15cf6:	68ba      	ldr	r2, [r7, #8]
   15cf8:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   15cfa:	4b0c      	ldr	r3, [pc, #48]	; (15d2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
   15cfc:	6818      	ldr	r0, [r3, #0]
   15cfe:	2300      	movs	r3, #0
   15d00:	9301      	str	r3, [sp, #4]
   15d02:	2308      	movs	r3, #8
   15d04:	9300      	str	r3, [sp, #0]
   15d06:	2300      	movs	r3, #0
   15d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15d0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   15d0c:	4c08      	ldr	r4, [pc, #32]	; (15d30 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
   15d0e:	47a0      	blx	r4
   15d10:	4602      	mov	r2, r0
   15d12:	687b      	ldr	r3, [r7, #4]
   15d14:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   15d16:	2300      	movs	r3, #0
}
   15d18:	4618      	mov	r0, r3
   15d1a:	371c      	adds	r7, #28
   15d1c:	46bd      	mov	sp, r7
   15d1e:	bd90      	pop	{r4, r7, pc}
   15d20:	00015b05 	.word	0x00015b05
   15d24:	000176d1 	.word	0x000176d1
   15d28:	00015b91 	.word	0x00015b91
   15d2c:	2000d9f4 	.word	0x2000d9f4
   15d30:	000157c5 	.word	0x000157c5

00015d34 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:
    return;
}


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
   15d34:	b590      	push	{r4, r7, lr}
   15d36:	b08d      	sub	sp, #52	; 0x34
   15d38:	af00      	add	r7, sp, #0
   15d3a:	60f8      	str	r0, [r7, #12]
   15d3c:	60b9      	str	r1, [r7, #8]
   15d3e:	603b      	str	r3, [r7, #0]
   15d40:	4613      	mov	r3, r2
   15d42:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
   15d44:	79fb      	ldrb	r3, [r7, #7]
   15d46:	10db      	asrs	r3, r3, #3
   15d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
   15d4c:	79fb      	ldrb	r3, [r7, #7]
   15d4e:	f003 0307 	and.w	r3, r3, #7
   15d52:	2201      	movs	r2, #1
   15d54:	fa02 f303 	lsl.w	r3, r2, r3
   15d58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
   15d5c:	2300      	movs	r3, #0
   15d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
   15d60:	2301      	movs	r3, #1
   15d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
   15d66:	68bb      	ldr	r3, [r7, #8]
   15d68:	2b00      	cmp	r3, #0
   15d6a:	d103      	bne.n	15d74 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
   15d6c:	2300      	movs	r3, #0
   15d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15d72:	e01e      	b.n	15db2 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
   15d74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   15d78:	68ba      	ldr	r2, [r7, #8]
   15d7a:	7912      	ldrb	r2, [r2, #4]
   15d7c:	4293      	cmp	r3, r2
   15d7e:	db07      	blt.n	15d90 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
   15d80:	68bb      	ldr	r3, [r7, #8]
   15d82:	79fa      	ldrb	r2, [r7, #7]
   15d84:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
   15d88:	2300      	movs	r3, #0
   15d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15d8e:	e010      	b.n	15db2 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
   15d90:	68bb      	ldr	r3, [r7, #8]
   15d92:	681a      	ldr	r2, [r3, #0]
   15d94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   15d98:	4413      	add	r3, r2
   15d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
   15d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d9e:	781a      	ldrb	r2, [r3, #0]
   15da0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   15da4:	4013      	ands	r3, r2
   15da6:	b2db      	uxtb	r3, r3
   15da8:	2b00      	cmp	r3, #0
   15daa:	d002      	beq.n	15db2 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
   15dac:	2300      	movs	r3, #0
   15dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
   15db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15db6:	2b00      	cmp	r3, #0
   15db8:	d05c      	beq.n	15e74 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
   15dba:	79fb      	ldrb	r3, [r7, #7]
   15dbc:	2b00      	cmp	r3, #0
   15dbe:	d007      	beq.n	15dd0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
   15dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15dc2:	781a      	ldrb	r2, [r3, #0]
   15dc4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   15dc8:	4313      	orrs	r3, r2
   15dca:	b2da      	uxtb	r2, r3
   15dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15dce:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
   15dd0:	68bb      	ldr	r3, [r7, #8]
   15dd2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   15dd6:	2b00      	cmp	r3, #0
   15dd8:	d004      	beq.n	15de4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
   15dda:	68bb      	ldr	r3, [r7, #8]
   15ddc:	2202      	movs	r2, #2
   15dde:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
   15de2:	e047      	b.n	15e74 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
   15de4:	463a      	mov	r2, r7
   15de6:	f107 0318 	add.w	r3, r7, #24
   15dea:	4619      	mov	r1, r3
   15dec:	68f8      	ldr	r0, [r7, #12]
   15dee:	4b23      	ldr	r3, [pc, #140]	; (15e7c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
   15df0:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
   15df2:	2300      	movs	r3, #0
   15df4:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
   15df6:	79fb      	ldrb	r3, [r7, #7]
   15df8:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
   15dfa:	f107 0318 	add.w	r3, r7, #24
   15dfe:	3304      	adds	r3, #4
   15e00:	f107 0240 	add.w	r2, r7, #64	; 0x40
   15e04:	4619      	mov	r1, r3
   15e06:	68f8      	ldr	r0, [r7, #12]
   15e08:	4b1d      	ldr	r3, [pc, #116]	; (15e80 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
   15e0a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15e0c:	f3ef 8310 	mrs	r3, PRIMASK
   15e10:	617b      	str	r3, [r7, #20]
  return(result);
   15e12:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
   15e14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
   15e16:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
   15e18:	68bb      	ldr	r3, [r7, #8]
   15e1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   15e1c:	f107 0218 	add.w	r2, r7, #24
   15e20:	2308      	movs	r3, #8
   15e22:	68f8      	ldr	r0, [r7, #12]
   15e24:	4c17      	ldr	r4, [pc, #92]	; (15e84 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
   15e26:	47a0      	blx	r4
            em->bufWritePtr += 8;
   15e28:	68bb      	ldr	r3, [r7, #8]
   15e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   15e2c:	f103 0208 	add.w	r2, r3, #8
   15e30:	68bb      	ldr	r3, [r7, #8]
   15e32:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
   15e34:	68bb      	ldr	r3, [r7, #8]
   15e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   15e38:	68bb      	ldr	r3, [r7, #8]
   15e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   15e3c:	429a      	cmp	r2, r3
   15e3e:	d103      	bne.n	15e48 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
   15e40:	68bb      	ldr	r3, [r7, #8]
   15e42:	1d5a      	adds	r2, r3, #5
   15e44:	68bb      	ldr	r3, [r7, #8]
   15e46:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
   15e48:	68bb      	ldr	r3, [r7, #8]
   15e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   15e4c:	68bb      	ldr	r3, [r7, #8]
   15e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   15e50:	429a      	cmp	r2, r3
   15e52:	d103      	bne.n	15e5c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
   15e54:	68bb      	ldr	r3, [r7, #8]
   15e56:	2201      	movs	r2, #1
   15e58:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   15e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15e60:	6a3b      	ldr	r3, [r7, #32]
   15e62:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
   15e66:	68bb      	ldr	r3, [r7, #8]
   15e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   15e6a:	2b00      	cmp	r3, #0
   15e6c:	d002      	beq.n	15e74 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
   15e6e:	68bb      	ldr	r3, [r7, #8]
   15e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   15e72:	4798      	blx	r3
}
   15e74:	bf00      	nop
   15e76:	3734      	adds	r7, #52	; 0x34
   15e78:	46bd      	mov	sp, r7
   15e7a:	bd90      	pop	{r4, r7, pc}
   15e7c:	000172e9 	.word	0x000172e9
   15e80:	00017319 	.word	0x00017319
   15e84:	00017241 	.word	0x00017241

00015e88 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "string.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
   15e88:	b480      	push	{r7}
   15e8a:	b085      	sub	sp, #20
   15e8c:	af00      	add	r7, sp, #0
   15e8e:	6078      	str	r0, [r7, #4]
   15e90:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
   15e92:	687b      	ldr	r3, [r7, #4]
   15e94:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
   15e96:	683b      	ldr	r3, [r7, #0]
   15e98:	7d1b      	ldrb	r3, [r3, #20]
   15e9a:	2b01      	cmp	r3, #1
   15e9c:	d106      	bne.n	15eac <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
   15e9e:	683b      	ldr	r3, [r7, #0]
   15ea0:	7d5a      	ldrb	r2, [r3, #21]
   15ea2:	68fb      	ldr	r3, [r7, #12]
   15ea4:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
   15ea6:	68fb      	ldr	r3, [r7, #12]
   15ea8:	2201      	movs	r2, #1
   15eaa:	731a      	strb	r2, [r3, #12]
	}
	
	
	
}
   15eac:	bf00      	nop
   15eae:	3714      	adds	r7, #20
   15eb0:	46bd      	mov	sp, r7
   15eb2:	bc80      	pop	{r7}
   15eb4:	4770      	bx	lr
	...

00015eb8 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
   15eb8:	b590      	push	{r4, r7, lr}
   15eba:	b08d      	sub	sp, #52	; 0x34
   15ebc:	af04      	add	r7, sp, #16
   15ebe:	60f8      	str	r0, [r7, #12]
   15ec0:	460b      	mov	r3, r1
   15ec2:	607a      	str	r2, [r7, #4]
   15ec4:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
   15ec6:	7afb      	ldrb	r3, [r7, #11]
   15ec8:	461a      	mov	r2, r3
   15eca:	68fb      	ldr	r3, [r7, #12]
   15ecc:	7b1b      	ldrb	r3, [r3, #12]
   15ece:	429a      	cmp	r2, r3
   15ed0:	da37      	bge.n	15f42 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
   15ed2:	7afb      	ldrb	r3, [r7, #11]
   15ed4:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
   15ed6:	68fb      	ldr	r3, [r7, #12]
   15ed8:	689a      	ldr	r2, [r3, #8]
   15eda:	7afb      	ldrb	r3, [r7, #11]
   15edc:	011b      	lsls	r3, r3, #4
   15ede:	4413      	add	r3, r2
   15ee0:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
   15ee2:	697b      	ldr	r3, [r7, #20]
   15ee4:	687a      	ldr	r2, [r7, #4]
   15ee6:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
   15ee8:	697b      	ldr	r3, [r7, #20]
   15eea:	2200      	movs	r2, #0
   15eec:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
   15eee:	697b      	ldr	r3, [r7, #20]
   15ef0:	2200      	movs	r2, #0
   15ef2:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
   15ef4:	69bb      	ldr	r3, [r7, #24]
   15ef6:	2b00      	cmp	r3, #0
   15ef8:	d008      	beq.n	15f0c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
   15efa:	697b      	ldr	r3, [r7, #20]
   15efc:	689b      	ldr	r3, [r3, #8]
   15efe:	2b00      	cmp	r3, #0
   15f00:	d004      	beq.n	15f0c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
   15f02:	69bb      	ldr	r3, [r7, #24]
   15f04:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
   15f08:	61fb      	str	r3, [r7, #28]
   15f0a:	e004      	b.n	15f16 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
   15f0c:	2300      	movs	r3, #0
   15f0e:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
   15f10:	697b      	ldr	r3, [r7, #20]
   15f12:	2200      	movs	r2, #0
   15f14:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
   15f16:	4b0d      	ldr	r3, [pc, #52]	; (15f4c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
   15f18:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
   15f1a:	68fb      	ldr	r3, [r7, #12]
   15f1c:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
   15f1e:	7afa      	ldrb	r2, [r7, #11]
   15f20:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
   15f22:	68fb      	ldr	r3, [r7, #12]
   15f24:	689a      	ldr	r2, [r3, #8]
   15f26:	7afb      	ldrb	r3, [r7, #11]
   15f28:	011b      	lsls	r3, r3, #4
   15f2a:	4413      	add	r3, r2
	CO_HBcons_receive);
   15f2c:	4a08      	ldr	r2, [pc, #32]	; (15f50 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
   15f2e:	9202      	str	r2, [sp, #8]
   15f30:	9301      	str	r3, [sp, #4]
   15f32:	2300      	movs	r3, #0
   15f34:	9300      	str	r3, [sp, #0]
   15f36:	f240 73ff 	movw	r3, #2047	; 0x7ff
   15f3a:	69fa      	ldr	r2, [r7, #28]
   15f3c:	4c05      	ldr	r4, [pc, #20]	; (15f54 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
   15f3e:	47a0      	blx	r4
   15f40:	e000      	b.n	15f44 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
   15f42:	bf00      	nop
}
   15f44:	3724      	adds	r7, #36	; 0x24
   15f46:	46bd      	mov	sp, r7
   15f48:	bd90      	pop	{r4, r7, pc}
   15f4a:	bf00      	nop
   15f4c:	2000d9f4 	.word	0x2000d9f4
   15f50:	00015e89 	.word	0x00015e89
   15f54:	000156c5 	.word	0x000156c5

00015f58 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
   15f58:	b580      	push	{r7, lr}
   15f5a:	b08c      	sub	sp, #48	; 0x30
   15f5c:	af00      	add	r7, sp, #0
   15f5e:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   15f60:	2300      	movs	r3, #0
   15f62:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	681b      	ldr	r3, [r3, #0]
   15f68:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
   15f6a:	4b32      	ldr	r3, [pc, #200]	; (16034 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	1d1a      	adds	r2, r3, #4
   15f70:	687b      	ldr	r3, [r7, #4]
   15f72:	685b      	ldr	r3, [r3, #4]
   15f74:	4619      	mov	r1, r3
   15f76:	4610      	mov	r0, r2
   15f78:	4b2f      	ldr	r3, [pc, #188]	; (16038 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
   15f7a:	4798      	blx	r3
   15f7c:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	7f5b      	ldrb	r3, [r3, #29]
   15f82:	2b00      	cmp	r3, #0
   15f84:	d150      	bne.n	16028 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
   15f86:	6a3b      	ldr	r3, [r7, #32]
   15f88:	0c1b      	lsrs	r3, r3, #16
   15f8a:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
   15f8c:	6a3b      	ldr	r3, [r7, #32]
   15f8e:	b29b      	uxth	r3, r3
   15f90:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
   15f92:	6a3b      	ldr	r3, [r7, #32]
   15f94:	0ddb      	lsrs	r3, r3, #23
   15f96:	05db      	lsls	r3, r3, #23
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d002      	beq.n	15fa2 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
   15f9c:	4b27      	ldr	r3, [pc, #156]	; (1603c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   15f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   15fa0:	e036      	b.n	16010 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
   15fa2:	69bb      	ldr	r3, [r7, #24]
   15fa4:	2b00      	cmp	r3, #0
   15fa6:	d02f      	beq.n	16008 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
   15fa8:	7ffb      	ldrb	r3, [r7, #31]
   15faa:	2b00      	cmp	r3, #0
   15fac:	d02c      	beq.n	16008 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   15fae:	2300      	movs	r3, #0
   15fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15fba:	7b12      	ldrb	r2, [r2, #12]
   15fbc:	4293      	cmp	r3, r2
   15fbe:	da26      	bge.n	1600e <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
   15fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15fc2:	685a      	ldr	r2, [r3, #4]
   15fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15fc8:	009b      	lsls	r3, r3, #2
   15fca:	4413      	add	r3, r2
   15fcc:	681b      	ldr	r3, [r3, #0]
   15fce:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
   15fd0:	697b      	ldr	r3, [r7, #20]
   15fd2:	0c1b      	lsrs	r3, r3, #16
   15fd4:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
   15fd6:	697b      	ldr	r3, [r7, #20]
   15fd8:	b29b      	uxth	r3, r3
   15fda:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	7f1b      	ldrb	r3, [r3, #28]
   15fe0:	1e5a      	subs	r2, r3, #1
   15fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15fe6:	429a      	cmp	r2, r3
   15fe8:	d008      	beq.n	15ffc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   15fea:	68fb      	ldr	r3, [r7, #12]
   15fec:	2b00      	cmp	r3, #0
   15fee:	d005      	beq.n	15ffc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   15ff0:	7ffa      	ldrb	r2, [r7, #31]
   15ff2:	7cfb      	ldrb	r3, [r7, #19]
   15ff4:	429a      	cmp	r2, r3
   15ff6:	d101      	bne.n	15ffc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
   15ff8:	4b10      	ldr	r3, [pc, #64]	; (1603c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   15ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   15ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16000:	3301      	adds	r3, #1
   16002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16006:	e7d5      	b.n	15fb4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
   16008:	2300      	movs	r3, #0
   1600a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1600c:	e000      	b.n	16010 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
   1600e:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
   16010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16012:	2b00      	cmp	r3, #0
   16014:	d108      	bne.n	16028 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
   16016:	687b      	ldr	r3, [r7, #4]
   16018:	7f1b      	ldrb	r3, [r3, #28]
   1601a:	3b01      	subs	r3, #1
   1601c:	b2db      	uxtb	r3, r3
   1601e:	6a3a      	ldr	r2, [r7, #32]
   16020:	4619      	mov	r1, r3
   16022:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16024:	4b06      	ldr	r3, [pc, #24]	; (16040 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
   16026:	4798      	blx	r3
		}
	}

	return ret;
   16028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1602a:	4618      	mov	r0, r3
   1602c:	3730      	adds	r7, #48	; 0x30
   1602e:	46bd      	mov	sp, r7
   16030:	bd80      	pop	{r7, pc}
   16032:	bf00      	nop
   16034:	2000d9f4 	.word	0x2000d9f4
   16038:	0001727d 	.word	0x0001727d
   1603c:	06040043 	.word	0x06040043
   16040:	00015eb9 	.word	0x00015eb9

00016044 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
   16044:	b480      	push	{r7}
   16046:	b083      	sub	sp, #12
   16048:	af00      	add	r7, sp, #0
   1604a:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
   1604c:	4a04      	ldr	r2, [pc, #16]	; (16060 <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
   1604e:	687b      	ldr	r3, [r7, #4]
   16050:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
   16052:	687b      	ldr	r3, [r7, #4]
   16054:	4618      	mov	r0, r3
   16056:	370c      	adds	r7, #12
   16058:	46bd      	mov	sp, r7
   1605a:	bc80      	pop	{r7}
   1605c:	4770      	bx	lr
   1605e:	bf00      	nop
   16060:	2000d9fc 	.word	0x2000d9fc

00016064 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
   16064:	b480      	push	{r7}
   16066:	b083      	sub	sp, #12
   16068:	af00      	add	r7, sp, #0
   1606a:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
   1606c:	687b      	ldr	r3, [r7, #4]
   1606e:	4618      	mov	r0, r3
   16070:	370c      	adds	r7, #12
   16072:	46bd      	mov	sp, r7
   16074:	bc80      	pop	{r7}
   16076:	4770      	bx	lr

00016078 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
   16078:	b590      	push	{r4, r7, lr}
   1607a:	b089      	sub	sp, #36	; 0x24
   1607c:	af02      	add	r7, sp, #8
   1607e:	60f8      	str	r0, [r7, #12]
   16080:	60b9      	str	r1, [r7, #8]
   16082:	607a      	str	r2, [r7, #4]
   16084:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
   16086:	4a2b      	ldr	r2, [pc, #172]	; (16134 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
   16088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1608a:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
   1608c:	68bb      	ldr	r3, [r7, #8]
   1608e:	2b00      	cmp	r3, #0
   16090:	d00e      	beq.n	160b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16092:	687b      	ldr	r3, [r7, #4]
   16094:	2b00      	cmp	r3, #0
   16096:	d00b      	beq.n	160b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16098:	683b      	ldr	r3, [r7, #0]
   1609a:	2b00      	cmp	r3, #0
   1609c:	d008      	beq.n	160b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   1609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160a0:	2b00      	cmp	r3, #0
   160a2:	d005      	beq.n	160b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   160a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160a6:	2b00      	cmp	r3, #0
   160a8:	d002      	beq.n	160b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
   160aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   160ac:	2b00      	cmp	r3, #0
   160ae:	d102      	bne.n	160b6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
   160b0:	f04f 33ff 	mov.w	r3, #4294967295
   160b4:	e039      	b.n	1612a <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
   160b6:	68bb      	ldr	r3, [r7, #8]
   160b8:	687a      	ldr	r2, [r7, #4]
   160ba:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
   160bc:	68bb      	ldr	r3, [r7, #8]
   160be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   160c0:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
   160c2:	68bb      	ldr	r3, [r7, #8]
   160c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   160c6:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
   160c8:	68bb      	ldr	r3, [r7, #8]
   160ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   160ce:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
   160d0:	68bb      	ldr	r3, [r7, #8]
   160d2:	2200      	movs	r2, #0
   160d4:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
   160d6:	68bb      	ldr	r3, [r7, #8]
   160d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   160da:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
   160dc:	68bb      	ldr	r3, [r7, #8]
   160de:	6bba      	ldr	r2, [r7, #56]	; 0x38
   160e0:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   160e2:	2300      	movs	r3, #0
   160e4:	75fb      	strb	r3, [r7, #23]
   160e6:	7dfb      	ldrb	r3, [r7, #23]
   160e8:	68ba      	ldr	r2, [r7, #8]
   160ea:	7b12      	ldrb	r2, [r2, #12]
   160ec:	4293      	cmp	r3, r2
   160ee:	da0e      	bge.n	1610e <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
   160f0:	68bb      	ldr	r3, [r7, #8]
   160f2:	685a      	ldr	r2, [r3, #4]
   160f4:	7dfb      	ldrb	r3, [r7, #23]
   160f6:	009b      	lsls	r3, r3, #2
   160f8:	4413      	add	r3, r2
   160fa:	681a      	ldr	r2, [r3, #0]
   160fc:	7dfb      	ldrb	r3, [r7, #23]
   160fe:	4619      	mov	r1, r3
   16100:	68b8      	ldr	r0, [r7, #8]
   16102:	4b0d      	ldr	r3, [pc, #52]	; (16138 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
   16104:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   16106:	7dfb      	ldrb	r3, [r7, #23]
   16108:	3301      	adds	r3, #1
   1610a:	75fb      	strb	r3, [r7, #23]
   1610c:	e7eb      	b.n	160e6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
   1610e:	4b0b      	ldr	r3, [pc, #44]	; (1613c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
   16110:	681b      	ldr	r3, [r3, #0]
   16112:	1d18      	adds	r0, r3, #4
   16114:	2300      	movs	r3, #0
   16116:	9301      	str	r3, [sp, #4]
   16118:	2300      	movs	r3, #0
   1611a:	9300      	str	r3, [sp, #0]
   1611c:	68bb      	ldr	r3, [r7, #8]
   1611e:	4a08      	ldr	r2, [pc, #32]	; (16140 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
   16120:	f241 0116 	movw	r1, #4118	; 0x1016
   16124:	4c07      	ldr	r4, [pc, #28]	; (16144 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
   16126:	47a0      	blx	r4

	return CO_ERROR_NO;
   16128:	2300      	movs	r3, #0
}
   1612a:	4618      	mov	r0, r3
   1612c:	371c      	adds	r7, #28
   1612e:	46bd      	mov	sp, r7
   16130:	bd90      	pop	{r4, r7, pc}
   16132:	bf00      	nop
   16134:	2000da00 	.word	0x2000da00
   16138:	00015eb9 	.word	0x00015eb9
   1613c:	2000d9f4 	.word	0x2000d9f4
   16140:	00015f59 	.word	0x00015f59
   16144:	000176d1 	.word	0x000176d1

00016148 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:
		AllMonitoredOperationalCopy = 0;
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
}

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
   16148:	b480      	push	{r7}
   1614a:	b083      	sub	sp, #12
   1614c:	af00      	add	r7, sp, #0
   1614e:	6078      	str	r0, [r7, #4]
   16150:	460b      	mov	r3, r1
   16152:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
   16154:	687b      	ldr	r3, [r7, #4]
   16156:	78fa      	ldrb	r2, [r7, #3]
   16158:	711a      	strb	r2, [r3, #4]
}
   1615a:	bf00      	nop
   1615c:	370c      	adds	r7, #12
   1615e:	46bd      	mov	sp, r7
   16160:	bc80      	pop	{r7}
   16162:	4770      	bx	lr

00016164 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
   16164:	b580      	push	{r7, lr}
   16166:	b084      	sub	sp, #16
   16168:	af00      	add	r7, sp, #0
   1616a:	6078      	str	r0, [r7, #4]
   1616c:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
   1616e:	687b      	ldr	r3, [r7, #4]
   16170:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
   16172:	683b      	ldr	r3, [r7, #0]
   16174:	7d9b      	ldrb	r3, [r3, #22]
   16176:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
   16178:	683b      	ldr	r3, [r7, #0]
   1617a:	7d1b      	ldrb	r3, [r3, #20]
   1617c:	2b02      	cmp	r3, #2
   1617e:	d146      	bne.n	1620e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   16180:	7afb      	ldrb	r3, [r7, #11]
   16182:	2b00      	cmp	r3, #0
   16184:	d004      	beq.n	16190 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
   16186:	68fb      	ldr	r3, [r7, #12]
   16188:	7a9b      	ldrb	r3, [r3, #10]
   1618a:	7afa      	ldrb	r2, [r7, #11]
   1618c:	429a      	cmp	r2, r3
   1618e:	d13e      	bne.n	1620e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
   16190:	683b      	ldr	r3, [r7, #0]
   16192:	7d5b      	ldrb	r3, [r3, #21]
   16194:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
   16196:	68fb      	ldr	r3, [r7, #12]
   16198:	781b      	ldrb	r3, [r3, #0]
   1619a:	727b      	strb	r3, [r7, #9]

        switch(command){
   1619c:	7abb      	ldrb	r3, [r7, #10]
   1619e:	2b80      	cmp	r3, #128	; 0x80
   161a0:	d019      	beq.n	161d6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
   161a2:	2b80      	cmp	r3, #128	; 0x80
   161a4:	dc04      	bgt.n	161b0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
   161a6:	2b01      	cmp	r3, #1
   161a8:	d007      	beq.n	161ba <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
   161aa:	2b02      	cmp	r3, #2
   161ac:	d00f      	beq.n	161ce <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
   161ae:	e01f      	b.n	161f0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
   161b0:	2b81      	cmp	r3, #129	; 0x81
   161b2:	d014      	beq.n	161de <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
   161b4:	2b82      	cmp	r3, #130	; 0x82
   161b6:	d016      	beq.n	161e6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
   161b8:	e01a      	b.n	161f0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
   161ba:	68fb      	ldr	r3, [r7, #12]
   161bc:	695b      	ldr	r3, [r3, #20]
   161be:	681b      	ldr	r3, [r3, #0]
   161c0:	781b      	ldrb	r3, [r3, #0]
   161c2:	2b00      	cmp	r3, #0
   161c4:	d113      	bne.n	161ee <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
   161c6:	68fb      	ldr	r3, [r7, #12]
   161c8:	2205      	movs	r2, #5
   161ca:	701a      	strb	r2, [r3, #0]
                }
                break;
   161cc:	e00f      	b.n	161ee <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
   161ce:	68fb      	ldr	r3, [r7, #12]
   161d0:	2204      	movs	r2, #4
   161d2:	701a      	strb	r2, [r3, #0]
                break;
   161d4:	e00c      	b.n	161f0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   161d6:	68fb      	ldr	r3, [r7, #12]
   161d8:	227f      	movs	r2, #127	; 0x7f
   161da:	701a      	strb	r2, [r3, #0]
                break;
   161dc:	e008      	b.n	161f0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
   161de:	68fb      	ldr	r3, [r7, #12]
   161e0:	2202      	movs	r2, #2
   161e2:	725a      	strb	r2, [r3, #9]
                break;
   161e4:	e004      	b.n	161f0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
   161e6:	68fb      	ldr	r3, [r7, #12]
   161e8:	2201      	movs	r2, #1
   161ea:	725a      	strb	r2, [r3, #9]
                break;
   161ec:	e000      	b.n	161f0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
   161ee:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
   161f0:	68fb      	ldr	r3, [r7, #12]
   161f2:	69db      	ldr	r3, [r3, #28]
   161f4:	2b00      	cmp	r3, #0
   161f6:	d00a      	beq.n	1620e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   161f8:	68fb      	ldr	r3, [r7, #12]
   161fa:	781b      	ldrb	r3, [r3, #0]
   161fc:	7a7a      	ldrb	r2, [r7, #9]
   161fe:	429a      	cmp	r2, r3
   16200:	d005      	beq.n	1620e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
   16202:	68fb      	ldr	r3, [r7, #12]
   16204:	69db      	ldr	r3, [r3, #28]
   16206:	68fa      	ldr	r2, [r7, #12]
   16208:	7812      	ldrb	r2, [r2, #0]
   1620a:	4610      	mov	r0, r2
   1620c:	4798      	blx	r3
        }
    }
}
   1620e:	bf00      	nop
   16210:	3710      	adds	r7, #16
   16212:	46bd      	mov	sp, r7
   16214:	bd80      	pop	{r7, pc}

00016216 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
   16216:	b480      	push	{r7}
   16218:	b083      	sub	sp, #12
   1621a:	af00      	add	r7, sp, #0
   1621c:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
   1621e:	687b      	ldr	r3, [r7, #4]
   16220:	4618      	mov	r0, r3
   16222:	370c      	adds	r7, #12
   16224:	46bd      	mov	sp, r7
   16226:	bc80      	pop	{r7}
   16228:	4770      	bx	lr

0001622a <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
   1622a:	b480      	push	{r7}
   1622c:	b083      	sub	sp, #12
   1622e:	af00      	add	r7, sp, #0
   16230:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
   16232:	687b      	ldr	r3, [r7, #4]
   16234:	4618      	mov	r0, r3
   16236:	370c      	adds	r7, #12
   16238:	46bd      	mov	sp, r7
   1623a:	bc80      	pop	{r7}
   1623c:	4770      	bx	lr
	...

00016240 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
   16240:	b5b0      	push	{r4, r5, r7, lr}
   16242:	b088      	sub	sp, #32
   16244:	af04      	add	r7, sp, #16
   16246:	60f8      	str	r0, [r7, #12]
   16248:	60b9      	str	r1, [r7, #8]
   1624a:	607a      	str	r2, [r7, #4]
   1624c:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
   1624e:	68bb      	ldr	r3, [r7, #8]
   16250:	2b00      	cmp	r3, #0
   16252:	d008      	beq.n	16266 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16254:	687b      	ldr	r3, [r7, #4]
   16256:	2b00      	cmp	r3, #0
   16258:	d005      	beq.n	16266 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   1625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1625c:	2b00      	cmp	r3, #0
   1625e:	d002      	beq.n	16266 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16262:	2b00      	cmp	r3, #0
   16264:	d102      	bne.n	1626c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   16266:	f04f 33ff 	mov.w	r3, #4294967295
   1626a:	e062      	b.n	16332 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
   1626c:	4a33      	ldr	r2, [pc, #204]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1626e:	68bb      	ldr	r3, [r7, #8]
   16270:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
   16272:	4b32      	ldr	r3, [pc, #200]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16274:	681b      	ldr	r3, [r3, #0]
   16276:	2200      	movs	r2, #0
   16278:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
   1627a:	4b30      	ldr	r3, [pc, #192]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1627c:	681b      	ldr	r3, [r3, #0]
   1627e:	2200      	movs	r2, #0
   16280:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
   16282:	4b2e      	ldr	r3, [pc, #184]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16284:	681b      	ldr	r3, [r3, #0]
   16286:	2200      	movs	r2, #0
   16288:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
   1628a:	4b2c      	ldr	r3, [pc, #176]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1628c:	681b      	ldr	r3, [r3, #0]
   1628e:	2200      	movs	r2, #0
   16290:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
   16292:	4b2a      	ldr	r3, [pc, #168]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16294:	681b      	ldr	r3, [r3, #0]
   16296:	2200      	movs	r2, #0
   16298:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
   1629a:	4b28      	ldr	r3, [pc, #160]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1629c:	681b      	ldr	r3, [r3, #0]
   1629e:	2200      	movs	r2, #0
   162a0:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
   162a2:	4b26      	ldr	r3, [pc, #152]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162a4:	681b      	ldr	r3, [r3, #0]
   162a6:	2200      	movs	r2, #0
   162a8:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
   162aa:	4b24      	ldr	r3, [pc, #144]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	22ff      	movs	r2, #255	; 0xff
   162b0:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
   162b2:	4b22      	ldr	r3, [pc, #136]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162b4:	681b      	ldr	r3, [r3, #0]
   162b6:	2201      	movs	r2, #1
   162b8:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
   162ba:	4b20      	ldr	r3, [pc, #128]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162bc:	681b      	ldr	r3, [r3, #0]
   162be:	78fa      	ldrb	r2, [r7, #3]
   162c0:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
   162c2:	4b1e      	ldr	r3, [pc, #120]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162c4:	681b      	ldr	r3, [r3, #0]
   162c6:	6a3a      	ldr	r2, [r7, #32]
   162c8:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
   162ca:	4b1c      	ldr	r3, [pc, #112]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162cc:	681b      	ldr	r3, [r3, #0]
   162ce:	2200      	movs	r2, #0
   162d0:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
   162d2:	4b1a      	ldr	r3, [pc, #104]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162d4:	681b      	ldr	r3, [r3, #0]
   162d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   162da:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
   162dc:	4b17      	ldr	r3, [pc, #92]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162de:	681b      	ldr	r3, [r3, #0]
   162e0:	687a      	ldr	r2, [r7, #4]
   162e2:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
   162e4:	4b15      	ldr	r3, [pc, #84]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162e6:	681b      	ldr	r3, [r3, #0]
   162e8:	2200      	movs	r2, #0
   162ea:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
   162ec:	4b14      	ldr	r3, [pc, #80]	; (16340 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   162ee:	6818      	ldr	r0, [r3, #0]
   162f0:	4b12      	ldr	r3, [pc, #72]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   162f2:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
   162f4:	4a13      	ldr	r2, [pc, #76]	; (16344 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
   162f6:	9202      	str	r2, [sp, #8]
   162f8:	9301      	str	r3, [sp, #4]
   162fa:	2300      	movs	r3, #0
   162fc:	9300      	str	r3, [sp, #0]
   162fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
   16302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16306:	4c10      	ldr	r4, [pc, #64]	; (16348 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
   16308:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
   1630a:	4b0c      	ldr	r3, [pc, #48]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1630c:	681b      	ldr	r3, [r3, #0]
   1630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16310:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
   16312:	4b0a      	ldr	r3, [pc, #40]	; (1633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16314:	681c      	ldr	r4, [r3, #0]
   16316:	4b0a      	ldr	r3, [pc, #40]	; (16340 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   16318:	6818      	ldr	r0, [r3, #0]
   1631a:	2300      	movs	r3, #0
   1631c:	9301      	str	r3, [sp, #4]
   1631e:	2301      	movs	r3, #1
   16320:	9300      	str	r3, [sp, #0]
   16322:	2300      	movs	r3, #0
   16324:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16326:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16328:	4d08      	ldr	r5, [pc, #32]	; (1634c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
   1632a:	47a8      	blx	r5
   1632c:	4603      	mov	r3, r0
   1632e:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   16330:	2300      	movs	r3, #0
}
   16332:	4618      	mov	r0, r3
   16334:	3710      	adds	r7, #16
   16336:	46bd      	mov	sp, r7
   16338:	bdb0      	pop	{r4, r5, r7, pc}
   1633a:	bf00      	nop
   1633c:	2000da04 	.word	0x2000da04
   16340:	2000d9f4 	.word	0x2000d9f4
   16344:	00016165 	.word	0x00016165
   16348:	000156c5 	.word	0x000156c5
   1634c:	000157c5 	.word	0x000157c5

00016350 <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
   16350:	b480      	push	{r7}
   16352:	b083      	sub	sp, #12
   16354:	af00      	add	r7, sp, #0
   16356:	6078      	str	r0, [r7, #4]
{
} //CO_OD
   16358:	687b      	ldr	r3, [r7, #4]
   1635a:	4618      	mov	r0, r3
   1635c:	370c      	adds	r7, #12
   1635e:	46bd      	mov	sp, r7
   16360:	bc80      	pop	{r7}
   16362:	4770      	bx	lr

00016364 <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
   16364:	b480      	push	{r7}
   16366:	b083      	sub	sp, #12
   16368:	af00      	add	r7, sp, #0
   1636a:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
   1636c:	687b      	ldr	r3, [r7, #4]
   1636e:	4618      	mov	r0, r3
   16370:	370c      	adds	r7, #12
   16372:	46bd      	mov	sp, r7
   16374:	bc80      	pop	{r7}
   16376:	4770      	bx	lr

00016378 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
   16378:	b480      	push	{r7}
   1637a:	b083      	sub	sp, #12
   1637c:	af00      	add	r7, sp, #0
   1637e:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
   16380:	687b      	ldr	r3, [r7, #4]
   16382:	4618      	mov	r0, r3
   16384:	370c      	adds	r7, #12
   16386:	46bd      	mov	sp, r7
   16388:	bc80      	pop	{r7}
   1638a:	4770      	bx	lr

0001638c <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
   1638c:	b480      	push	{r7}
   1638e:	b083      	sub	sp, #12
   16390:	af00      	add	r7, sp, #0
   16392:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
   16394:	687b      	ldr	r3, [r7, #4]
   16396:	4618      	mov	r0, r3
   16398:	370c      	adds	r7, #12
   1639a:	46bd      	mov	sp, r7
   1639c:	bc80      	pop	{r7}
   1639e:	4770      	bx	lr

000163a0 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
   163a0:	b580      	push	{r7, lr}
   163a2:	b084      	sub	sp, #16
   163a4:	af00      	add	r7, sp, #0
   163a6:	6078      	str	r0, [r7, #4]
   163a8:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
   163aa:	687b      	ldr	r3, [r7, #4]
   163ac:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
   163ae:	68fb      	ldr	r3, [r7, #12]
   163b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   163b4:	2b00      	cmp	r3, #0
   163b6:	d076      	beq.n	164a6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   163b8:	68fb      	ldr	r3, [r7, #12]
   163ba:	695b      	ldr	r3, [r3, #20]
   163bc:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
   163be:	2b05      	cmp	r3, #5
   163c0:	d171      	bne.n	164a6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
   163c2:	683b      	ldr	r3, [r7, #0]
   163c4:	7d1b      	ldrb	r3, [r3, #20]
   163c6:	461a      	mov	r2, r3
   163c8:	68fb      	ldr	r3, [r7, #12]
   163ca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   163ce:	429a      	cmp	r2, r3
   163d0:	db69      	blt.n	164a6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
   163d2:	68fb      	ldr	r3, [r7, #12]
   163d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   163d8:	2b00      	cmp	r3, #0
   163da:	d031      	beq.n	16440 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
   163dc:	68fb      	ldr	r3, [r7, #12]
   163de:	689b      	ldr	r3, [r3, #8]
   163e0:	7edb      	ldrb	r3, [r3, #27]
   163e2:	2b00      	cmp	r3, #0
   163e4:	d02c      	beq.n	16440 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
   163e6:	683b      	ldr	r3, [r7, #0]
   163e8:	7d5a      	ldrb	r2, [r3, #21]
   163ea:	68fb      	ldr	r3, [r7, #12]
   163ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
   163f0:	683b      	ldr	r3, [r7, #0]
   163f2:	7d9a      	ldrb	r2, [r3, #22]
   163f4:	68fb      	ldr	r3, [r7, #12]
   163f6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
   163fa:	683b      	ldr	r3, [r7, #0]
   163fc:	7dda      	ldrb	r2, [r3, #23]
   163fe:	68fb      	ldr	r3, [r7, #12]
   16400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
   16404:	683b      	ldr	r3, [r7, #0]
   16406:	7e1a      	ldrb	r2, [r3, #24]
   16408:	68fb      	ldr	r3, [r7, #12]
   1640a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
   1640e:	683b      	ldr	r3, [r7, #0]
   16410:	7e5a      	ldrb	r2, [r3, #25]
   16412:	68fb      	ldr	r3, [r7, #12]
   16414:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
   16418:	683b      	ldr	r3, [r7, #0]
   1641a:	7e9a      	ldrb	r2, [r3, #26]
   1641c:	68fb      	ldr	r3, [r7, #12]
   1641e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
   16422:	683b      	ldr	r3, [r7, #0]
   16424:	7eda      	ldrb	r2, [r3, #27]
   16426:	68fb      	ldr	r3, [r7, #12]
   16428:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
   1642c:	683b      	ldr	r3, [r7, #0]
   1642e:	7f1a      	ldrb	r2, [r3, #28]
   16430:	68fb      	ldr	r3, [r7, #12]
   16432:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
   16436:	68fb      	ldr	r3, [r7, #12]
   16438:	2201      	movs	r2, #1
   1643a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1643e:	e02b      	b.n	16498 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
   16440:	683b      	ldr	r3, [r7, #0]
   16442:	7d5a      	ldrb	r2, [r3, #21]
   16444:	68fb      	ldr	r3, [r7, #12]
   16446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
   1644a:	683b      	ldr	r3, [r7, #0]
   1644c:	7d9a      	ldrb	r2, [r3, #22]
   1644e:	68fb      	ldr	r3, [r7, #12]
   16450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
   16454:	683b      	ldr	r3, [r7, #0]
   16456:	7dda      	ldrb	r2, [r3, #23]
   16458:	68fb      	ldr	r3, [r7, #12]
   1645a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
   1645e:	683b      	ldr	r3, [r7, #0]
   16460:	7e1a      	ldrb	r2, [r3, #24]
   16462:	68fb      	ldr	r3, [r7, #12]
   16464:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
   16468:	683b      	ldr	r3, [r7, #0]
   1646a:	7e5a      	ldrb	r2, [r3, #25]
   1646c:	68fb      	ldr	r3, [r7, #12]
   1646e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
   16472:	683b      	ldr	r3, [r7, #0]
   16474:	7e9a      	ldrb	r2, [r3, #26]
   16476:	68fb      	ldr	r3, [r7, #12]
   16478:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
   1647c:	683b      	ldr	r3, [r7, #0]
   1647e:	7eda      	ldrb	r2, [r3, #27]
   16480:	68fb      	ldr	r3, [r7, #12]
   16482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
   16486:	683b      	ldr	r3, [r7, #0]
   16488:	7f1a      	ldrb	r2, [r3, #28]
   1648a:	68fb      	ldr	r3, [r7, #12]
   1648c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
   16490:	68fb      	ldr	r3, [r7, #12]
   16492:	2201      	movs	r2, #1
   16494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
   16498:	683b      	ldr	r3, [r7, #0]
   1649a:	3315      	adds	r3, #21
   1649c:	2208      	movs	r2, #8
   1649e:	4619      	mov	r1, r3
   164a0:	4803      	ldr	r0, [pc, #12]	; (164b0 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
   164a2:	4b04      	ldr	r3, [pc, #16]	; (164b4 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
   164a4:	4798      	blx	r3
    }
}
   164a6:	bf00      	nop
   164a8:	3710      	adds	r7, #16
   164aa:	46bd      	mov	sp, r7
   164ac:	bd80      	pop	{r7, pc}
   164ae:	bf00      	nop
   164b0:	2000da1d 	.word	0x2000da1d
   164b4:	0001a539 	.word	0x0001a539

000164b8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
   164b8:	b590      	push	{r4, r7, lr}
   164ba:	b089      	sub	sp, #36	; 0x24
   164bc:	af04      	add	r7, sp, #16
   164be:	6078      	str	r0, [r7, #4]
   164c0:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
   164c2:	683b      	ldr	r3, [r7, #0]
   164c4:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
   164c6:	683a      	ldr	r2, [r7, #0]
   164c8:	4b2d      	ldr	r3, [pc, #180]	; (16580 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
   164ca:	4013      	ands	r3, r2
   164cc:	2b00      	cmp	r3, #0
   164ce:	d123      	bne.n	16518 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   164d0:	687b      	ldr	r3, [r7, #4]
   164d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   164d6:	2b00      	cmp	r3, #0
   164d8:	d01e      	beq.n	16518 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   164da:	68fb      	ldr	r3, [r7, #12]
   164dc:	2b00      	cmp	r3, #0
   164de:	d01b      	beq.n	16518 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
   164e0:	687b      	ldr	r3, [r7, #4]
   164e2:	69da      	ldr	r2, [r3, #28]
   164e4:	68fb      	ldr	r3, [r7, #12]
   164e6:	429a      	cmp	r2, r3
   164e8:	d105      	bne.n	164f6 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
   164ea:	687b      	ldr	r3, [r7, #4]
   164ec:	7e1b      	ldrb	r3, [r3, #24]
   164ee:	461a      	mov	r2, r3
   164f0:	68fb      	ldr	r3, [r7, #12]
   164f2:	4413      	add	r3, r2
   164f4:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
   164f6:	687b      	ldr	r3, [r7, #4]
   164f8:	2201      	movs	r2, #1
   164fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
   164fe:	687b      	ldr	r3, [r7, #4]
   16500:	68db      	ldr	r3, [r3, #12]
   16502:	7a1b      	ldrb	r3, [r3, #8]
   16504:	2bf0      	cmp	r3, #240	; 0xf0
   16506:	bfd4      	ite	le
   16508:	2301      	movle	r3, #1
   1650a:	2300      	movgt	r3, #0
   1650c:	b2db      	uxtb	r3, r3
   1650e:	461a      	mov	r2, r3
   16510:	687b      	ldr	r3, [r7, #4]
   16512:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   16516:	e00d      	b.n	16534 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
   16518:	2300      	movs	r3, #0
   1651a:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
   1651c:	687b      	ldr	r3, [r7, #4]
   1651e:	2200      	movs	r2, #0
   16520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16524:	687b      	ldr	r3, [r7, #4]
   16526:	2200      	movs	r2, #0
   16528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1652c:	687b      	ldr	r3, [r7, #4]
   1652e:	2200      	movs	r2, #0
   16530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
   16534:	4b13      	ldr	r3, [pc, #76]	; (16584 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
   16536:	6818      	ldr	r0, [r3, #0]
   16538:	687b      	ldr	r3, [r7, #4]
   1653a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
   1653c:	4b12      	ldr	r3, [pc, #72]	; (16588 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
   1653e:	9302      	str	r3, [sp, #8]
   16540:	687b      	ldr	r3, [r7, #4]
   16542:	9301      	str	r3, [sp, #4]
   16544:	2300      	movs	r3, #0
   16546:	9300      	str	r3, [sp, #0]
   16548:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1654c:	68fa      	ldr	r2, [r7, #12]
   1654e:	4c0f      	ldr	r4, [pc, #60]	; (1658c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
   16550:	47a0      	blx	r4
   16552:	4603      	mov	r3, r0
   16554:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
   16556:	f997 300b 	ldrsb.w	r3, [r7, #11]
   1655a:	2b00      	cmp	r3, #0
   1655c:	d00b      	beq.n	16576 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
   1655e:	687b      	ldr	r3, [r7, #4]
   16560:	2200      	movs	r2, #0
   16562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16566:	687b      	ldr	r3, [r7, #4]
   16568:	2200      	movs	r2, #0
   1656a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1656e:	687b      	ldr	r3, [r7, #4]
   16570:	2200      	movs	r2, #0
   16572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
   16576:	bf00      	nop
   16578:	3714      	adds	r7, #20
   1657a:	46bd      	mov	sp, r7
   1657c:	bd90      	pop	{r4, r7, pc}
   1657e:	bf00      	nop
   16580:	bffff800 	.word	0xbffff800
   16584:	2000d9f4 	.word	0x2000d9f4
   16588:	000163a1 	.word	0x000163a1
   1658c:	000156c5 	.word	0x000156c5

00016590 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
   16590:	b590      	push	{r4, r7, lr}
   16592:	b089      	sub	sp, #36	; 0x24
   16594:	af02      	add	r7, sp, #8
   16596:	60f8      	str	r0, [r7, #12]
   16598:	60b9      	str	r1, [r7, #8]
   1659a:	4613      	mov	r3, r2
   1659c:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
   1659e:	68bb      	ldr	r3, [r7, #8]
   165a0:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
   165a2:	68ba      	ldr	r2, [r7, #8]
   165a4:	4b1c      	ldr	r3, [pc, #112]	; (16618 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
   165a6:	4013      	ands	r3, r2
   165a8:	2b00      	cmp	r3, #0
   165aa:	d115      	bne.n	165d8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   165ac:	68fb      	ldr	r3, [r7, #12]
   165ae:	7f9b      	ldrb	r3, [r3, #30]
   165b0:	2b00      	cmp	r3, #0
   165b2:	d011      	beq.n	165d8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   165b4:	697b      	ldr	r3, [r7, #20]
   165b6:	2b00      	cmp	r3, #0
   165b8:	d00e      	beq.n	165d8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
   165ba:	68fb      	ldr	r3, [r7, #12]
   165bc:	699a      	ldr	r2, [r3, #24]
   165be:	697b      	ldr	r3, [r7, #20]
   165c0:	429a      	cmp	r2, r3
   165c2:	d105      	bne.n	165d0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
   165c4:	68fb      	ldr	r3, [r7, #12]
   165c6:	7d1b      	ldrb	r3, [r3, #20]
   165c8:	461a      	mov	r2, r3
   165ca:	697b      	ldr	r3, [r7, #20]
   165cc:	4413      	add	r3, r2
   165ce:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
   165d0:	68fb      	ldr	r3, [r7, #12]
   165d2:	2201      	movs	r2, #1
   165d4:	775a      	strb	r2, [r3, #29]
   165d6:	e004      	b.n	165e2 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
   165d8:	2300      	movs	r3, #0
   165da:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
   165dc:	68fb      	ldr	r3, [r7, #12]
   165de:	2200      	movs	r2, #0
   165e0:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   165e2:	4b0e      	ldr	r3, [pc, #56]	; (1661c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
   165e4:	6818      	ldr	r0, [r3, #0]
   165e6:	68fb      	ldr	r3, [r7, #12]
   165e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
   165ea:	68fb      	ldr	r3, [r7, #12]
   165ec:	7f9b      	ldrb	r3, [r3, #30]
   165ee:	79fa      	ldrb	r2, [r7, #7]
   165f0:	9201      	str	r2, [sp, #4]
   165f2:	9300      	str	r3, [sp, #0]
   165f4:	2300      	movs	r3, #0
   165f6:	697a      	ldr	r2, [r7, #20]
   165f8:	4c09      	ldr	r4, [pc, #36]	; (16620 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
   165fa:	47a0      	blx	r4
   165fc:	4602      	mov	r2, r0
   165fe:	68fb      	ldr	r3, [r7, #12]
   16600:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
   16602:	68fb      	ldr	r3, [r7, #12]
   16604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16606:	2b00      	cmp	r3, #0
   16608:	d102      	bne.n	16610 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
   1660a:	68fb      	ldr	r3, [r7, #12]
   1660c:	2200      	movs	r2, #0
   1660e:	775a      	strb	r2, [r3, #29]
    }
}
   16610:	bf00      	nop
   16612:	371c      	adds	r7, #28
   16614:	46bd      	mov	sp, r7
   16616:	bd90      	pop	{r4, r7, pc}
   16618:	bffff800 	.word	0xbffff800
   1661c:	2000d9f4 	.word	0x2000d9f4
   16620:	000157c5 	.word	0x000157c5

00016624 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
   16624:	b580      	push	{r7, lr}
   16626:	b08a      	sub	sp, #40	; 0x28
   16628:	af00      	add	r7, sp, #0
   1662a:	60f8      	str	r0, [r7, #12]
   1662c:	60b9      	str	r1, [r7, #8]
   1662e:	603b      	str	r3, [r7, #0]
   16630:	4613      	mov	r3, r2
   16632:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
   16634:	68bb      	ldr	r3, [r7, #8]
   16636:	0c1b      	lsrs	r3, r3, #16
   16638:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
   1663a:	68bb      	ldr	r3, [r7, #8]
   1663c:	0a1b      	lsrs	r3, r3, #8
   1663e:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
   16640:	68bb      	ldr	r3, [r7, #8]
   16642:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16644:	7ebb      	ldrb	r3, [r7, #26]
   16646:	f003 0307 	and.w	r3, r3, #7
   1664a:	2b00      	cmp	r3, #0
   1664c:	d001      	beq.n	16652 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
   1664e:	4b6b      	ldr	r3, [pc, #428]	; (167fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16650:	e0cf      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
   16652:	7ebb      	ldrb	r3, [r7, #26]
   16654:	10db      	asrs	r3, r3, #3
   16656:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
   16658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1665a:	781a      	ldrb	r2, [r3, #0]
   1665c:	7ebb      	ldrb	r3, [r7, #26]
   1665e:	4413      	add	r3, r2
   16660:	b2da      	uxtb	r2, r3
   16662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16664:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
   16666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16668:	781b      	ldrb	r3, [r3, #0]
   1666a:	2b08      	cmp	r3, #8
   1666c:	dd01      	ble.n	16672 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
   1666e:	4b64      	ldr	r3, [pc, #400]	; (16800 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
   16670:	e0bf      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
   16672:	69fb      	ldr	r3, [r7, #28]
   16674:	2b07      	cmp	r3, #7
   16676:	d832      	bhi.n	166de <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
   16678:	7efb      	ldrb	r3, [r7, #27]
   1667a:	2b00      	cmp	r3, #0
   1667c:	d12f      	bne.n	166de <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
   1667e:	2304      	movs	r3, #4
   16680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
   16684:	69fb      	ldr	r3, [r7, #28]
   16686:	2b01      	cmp	r3, #1
   16688:	d803      	bhi.n	16692 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
   1668a:	2300      	movs	r3, #0
   1668c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   16690:	e012      	b.n	166b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
   16692:	69fb      	ldr	r3, [r7, #28]
   16694:	2b02      	cmp	r3, #2
   16696:	d002      	beq.n	1669e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
   16698:	69fb      	ldr	r3, [r7, #28]
   1669a:	2b05      	cmp	r3, #5
   1669c:	d103      	bne.n	166a6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
   1669e:	2301      	movs	r3, #1
   166a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   166a4:	e008      	b.n	166b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
   166a6:	69fb      	ldr	r3, [r7, #28]
   166a8:	2b03      	cmp	r3, #3
   166aa:	d002      	beq.n	166b2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
   166ac:	69fb      	ldr	r3, [r7, #28]
   166ae:	2b06      	cmp	r3, #6
   166b0:	d102      	bne.n	166b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
   166b2:	2302      	movs	r3, #2
   166b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   166b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   166bc:	7ebb      	ldrb	r3, [r7, #26]
   166be:	429a      	cmp	r2, r3
   166c0:	da01      	bge.n	166c6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
   166c2:	4b4e      	ldr	r3, [pc, #312]	; (167fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   166c4:	e095      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
   166c6:	79fb      	ldrb	r3, [r7, #7]
   166c8:	2b00      	cmp	r3, #0
   166ca:	d103      	bne.n	166d4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
   166cc:	683b      	ldr	r3, [r7, #0]
   166ce:	4a4d      	ldr	r2, [pc, #308]	; (16804 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
   166d0:	601a      	str	r2, [r3, #0]
   166d2:	e002      	b.n	166da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
   166d4:	683b      	ldr	r3, [r7, #0]
   166d6:	4a4c      	ldr	r2, [pc, #304]	; (16808 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
   166d8:	601a      	str	r2, [r3, #0]

        return 0;
   166da:	2300      	movs	r3, #0
   166dc:	e089      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
   166de:	4b4b      	ldr	r3, [pc, #300]	; (1680c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   166e0:	681b      	ldr	r3, [r3, #0]
   166e2:	3304      	adds	r3, #4
   166e4:	69f9      	ldr	r1, [r7, #28]
   166e6:	4618      	mov	r0, r3
   166e8:	4b49      	ldr	r3, [pc, #292]	; (16810 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
   166ea:	4798      	blx	r3
   166ec:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
   166ee:	697b      	ldr	r3, [r7, #20]
   166f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   166f4:	4293      	cmp	r3, r2
   166f6:	d00b      	beq.n	16710 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
   166f8:	7ef9      	ldrb	r1, [r7, #27]
   166fa:	68fb      	ldr	r3, [r7, #12]
   166fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   166fe:	697a      	ldr	r2, [r7, #20]
   16700:	4613      	mov	r3, r2
   16702:	009b      	lsls	r3, r3, #2
   16704:	4413      	add	r3, r2
   16706:	009b      	lsls	r3, r3, #2
   16708:	4403      	add	r3, r0
   1670a:	791b      	ldrb	r3, [r3, #4]
   1670c:	4299      	cmp	r1, r3
   1670e:	dd01      	ble.n	16714 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
   16710:	4b40      	ldr	r3, [pc, #256]	; (16814 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
   16712:	e06e      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
   16714:	4b3d      	ldr	r3, [pc, #244]	; (1680c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16716:	681b      	ldr	r3, [r3, #0]
   16718:	3304      	adds	r3, #4
   1671a:	7efa      	ldrb	r2, [r7, #27]
   1671c:	6979      	ldr	r1, [r7, #20]
   1671e:	4618      	mov	r0, r3
   16720:	4b3d      	ldr	r3, [pc, #244]	; (16818 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
   16722:	4798      	blx	r3
   16724:	4603      	mov	r3, r0
   16726:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16728:	79fb      	ldrb	r3, [r7, #7]
   1672a:	2b00      	cmp	r3, #0
   1672c:	d10b      	bne.n	16746 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   1672e:	7cfb      	ldrb	r3, [r7, #19]
   16730:	f003 0310 	and.w	r3, r3, #16
   16734:	2b00      	cmp	r3, #0
   16736:	d004      	beq.n	16742 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
   16738:	7cfb      	ldrb	r3, [r7, #19]
   1673a:	f003 0308 	and.w	r3, r3, #8
   1673e:	2b00      	cmp	r3, #0
   16740:	d101      	bne.n	16746 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   16742:	4b2e      	ldr	r3, [pc, #184]	; (167fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16744:	e055      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16746:	79fb      	ldrb	r3, [r7, #7]
   16748:	2b00      	cmp	r3, #0
   1674a:	d00b      	beq.n	16764 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   1674c:	7cfb      	ldrb	r3, [r7, #19]
   1674e:	f003 0320 	and.w	r3, r3, #32
   16752:	2b00      	cmp	r3, #0
   16754:	d004      	beq.n	16760 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
   16756:	7cfb      	ldrb	r3, [r7, #19]
   16758:	f003 0304 	and.w	r3, r3, #4
   1675c:	2b00      	cmp	r3, #0
   1675e:	d101      	bne.n	16764 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   16760:	4b26      	ldr	r3, [pc, #152]	; (167fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16762:	e046      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
   16764:	4b29      	ldr	r3, [pc, #164]	; (1680c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16766:	681b      	ldr	r3, [r3, #0]
   16768:	3304      	adds	r3, #4
   1676a:	7efa      	ldrb	r2, [r7, #27]
   1676c:	6979      	ldr	r1, [r7, #20]
   1676e:	4618      	mov	r0, r3
   16770:	4b2a      	ldr	r3, [pc, #168]	; (1681c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
   16772:	4798      	blx	r3
   16774:	4603      	mov	r3, r0
   16776:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16778:	7cba      	ldrb	r2, [r7, #18]
   1677a:	7ebb      	ldrb	r3, [r7, #26]
   1677c:	429a      	cmp	r2, r3
   1677e:	da01      	bge.n	16784 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
   16780:	4b1e      	ldr	r3, [pc, #120]	; (167fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16782:	e036      	b.n	167f2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
   16784:	f997 3013 	ldrsb.w	r3, [r7, #19]
   16788:	2b00      	cmp	r3, #0
   1678a:	da01      	bge.n	16790 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
   1678c:	2201      	movs	r2, #1
   1678e:	e000      	b.n	16792 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
   16790:	2200      	movs	r2, #0
   16792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16794:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
   16796:	4b1d      	ldr	r3, [pc, #116]	; (1680c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16798:	681b      	ldr	r3, [r3, #0]
   1679a:	3304      	adds	r3, #4
   1679c:	7efa      	ldrb	r2, [r7, #27]
   1679e:	6979      	ldr	r1, [r7, #20]
   167a0:	4618      	mov	r0, r3
   167a2:	4b1f      	ldr	r3, [pc, #124]	; (16820 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
   167a4:	4798      	blx	r3
   167a6:	4602      	mov	r2, r0
   167a8:	683b      	ldr	r3, [r7, #0]
   167aa:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
   167ac:	7cfb      	ldrb	r3, [r7, #19]
   167ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   167b2:	2b00      	cmp	r3, #0
   167b4:	d01c      	beq.n	167f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
   167b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167b8:	781b      	ldrb	r3, [r3, #0]
   167ba:	461a      	mov	r2, r3
   167bc:	7ebb      	ldrb	r3, [r7, #26]
   167be:	1ad3      	subs	r3, r2, r3
   167c0:	623b      	str	r3, [r7, #32]
   167c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167c4:	781b      	ldrb	r3, [r3, #0]
   167c6:	461a      	mov	r2, r3
   167c8:	6a3b      	ldr	r3, [r7, #32]
   167ca:	429a      	cmp	r2, r3
   167cc:	d910      	bls.n	167f0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
   167ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167d0:	781b      	ldrb	r3, [r3, #0]
   167d2:	b25a      	sxtb	r2, r3
   167d4:	2101      	movs	r1, #1
   167d6:	6a3b      	ldr	r3, [r7, #32]
   167d8:	fa01 f303 	lsl.w	r3, r1, r3
   167dc:	b25b      	sxtb	r3, r3
   167de:	4313      	orrs	r3, r2
   167e0:	b25b      	sxtb	r3, r3
   167e2:	b2da      	uxtb	r2, r3
   167e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167e6:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
   167e8:	6a3b      	ldr	r3, [r7, #32]
   167ea:	3301      	adds	r3, #1
   167ec:	623b      	str	r3, [r7, #32]
   167ee:	e7e8      	b.n	167c2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
   167f0:	2300      	movs	r3, #0
}
   167f2:	4618      	mov	r0, r3
   167f4:	3728      	adds	r7, #40	; 0x28
   167f6:	46bd      	mov	sp, r7
   167f8:	bd80      	pop	{r7, pc}
   167fa:	bf00      	nop
   167fc:	06040041 	.word	0x06040041
   16800:	06040042 	.word	0x06040042
   16804:	2000da2c 	.word	0x2000da2c
   16808:	2000da28 	.word	0x2000da28
   1680c:	2000d9f4 	.word	0x2000d9f4
   16810:	0001778d 	.word	0x0001778d
   16814:	06020000 	.word	0x06020000
   16818:	000178e1 	.word	0x000178e1
   1681c:	00017839 	.word	0x00017839
   16820:	00017991 	.word	0x00017991

00016824 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
   16824:	b590      	push	{r4, r7, lr}
   16826:	b091      	sub	sp, #68	; 0x44
   16828:	af04      	add	r7, sp, #16
   1682a:	6078      	str	r0, [r7, #4]
   1682c:	460b      	mov	r3, r1
   1682e:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   16830:	2300      	movs	r3, #0
   16832:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   16834:	2300      	movs	r3, #0
   16836:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
   16838:	687b      	ldr	r3, [r7, #4]
   1683a:	691b      	ldr	r3, [r3, #16]
   1683c:	3304      	adds	r3, #4
   1683e:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
   16840:	78fb      	ldrb	r3, [r7, #3]
   16842:	62fb      	str	r3, [r7, #44]	; 0x2c
   16844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16846:	2b00      	cmp	r3, #0
   16848:	d045      	beq.n	168d6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
   1684a:	2300      	movs	r3, #0
   1684c:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
   1684e:	7dfb      	ldrb	r3, [r7, #23]
   16850:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   16852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16854:	1d1a      	adds	r2, r3, #4
   16856:	627a      	str	r2, [r7, #36]	; 0x24
   16858:	681b      	ldr	r3, [r3, #0]
   1685a:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   1685c:	687b      	ldr	r3, [r7, #4]
   1685e:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
   16860:	f107 0210 	add.w	r2, r7, #16
   16864:	f107 030e 	add.w	r3, r7, #14
   16868:	9302      	str	r3, [sp, #8]
   1686a:	f107 030f 	add.w	r3, r7, #15
   1686e:	9301      	str	r3, [sp, #4]
   16870:	f107 0317 	add.w	r3, r7, #23
   16874:	9300      	str	r3, [sp, #0]
   16876:	4613      	mov	r3, r2
   16878:	2200      	movs	r2, #0
   1687a:	69b9      	ldr	r1, [r7, #24]
   1687c:	4c1a      	ldr	r4, [pc, #104]	; (168e8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
   1687e:	47a0      	blx	r4
   16880:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   16882:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16884:	2b00      	cmp	r3, #0
   16886:	d00e      	beq.n	168a6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
   16888:	2300      	movs	r3, #0
   1688a:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   1688c:	4b17      	ldr	r3, [pc, #92]	; (168ec <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
   1688e:	681b      	ldr	r3, [r3, #0]
   16890:	1d18      	adds	r0, r3, #4
   16892:	687b      	ldr	r3, [r7, #4]
   16894:	6819      	ldr	r1, [r3, #0]
   16896:	69bb      	ldr	r3, [r7, #24]
   16898:	9300      	str	r3, [sp, #0]
   1689a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   1689e:	221a      	movs	r2, #26
   168a0:	4c13      	ldr	r4, [pc, #76]	; (168f0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
   168a2:	47a0      	blx	r4
   168a4:	e017      	b.n	168d6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   168a6:	7ffb      	ldrb	r3, [r7, #31]
   168a8:	623b      	str	r3, [r7, #32]
   168aa:	7dfb      	ldrb	r3, [r7, #23]
   168ac:	461a      	mov	r2, r3
   168ae:	6a3b      	ldr	r3, [r7, #32]
   168b0:	429a      	cmp	r2, r3
   168b2:	d90c      	bls.n	168ce <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
   168b4:	693a      	ldr	r2, [r7, #16]
   168b6:	1c53      	adds	r3, r2, #1
   168b8:	613b      	str	r3, [r7, #16]
   168ba:	6879      	ldr	r1, [r7, #4]
   168bc:	6a3b      	ldr	r3, [r7, #32]
   168be:	3308      	adds	r3, #8
   168c0:	009b      	lsls	r3, r3, #2
   168c2:	440b      	add	r3, r1
   168c4:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
   168c6:	6a3b      	ldr	r3, [r7, #32]
   168c8:	3301      	adds	r3, #1
   168ca:	623b      	str	r3, [r7, #32]
   168cc:	e7ed      	b.n	168aa <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
   168ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   168d0:	3b01      	subs	r3, #1
   168d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   168d4:	e7b6      	b.n	16844 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
   168d6:	7dfa      	ldrb	r2, [r7, #23]
   168d8:	687b      	ldr	r3, [r7, #4]
   168da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
   168de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   168e0:	4618      	mov	r0, r3
   168e2:	3734      	adds	r7, #52	; 0x34
   168e4:	46bd      	mov	sp, r7
   168e6:	bd90      	pop	{r4, r7, pc}
   168e8:	00016625 	.word	0x00016625
   168ec:	2000d9f4 	.word	0x2000d9f4
   168f0:	00015d35 	.word	0x00015d35

000168f4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
   168f4:	b590      	push	{r4, r7, lr}
   168f6:	b091      	sub	sp, #68	; 0x44
   168f8:	af04      	add	r7, sp, #16
   168fa:	6078      	str	r0, [r7, #4]
   168fc:	460b      	mov	r3, r1
   168fe:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   16900:	2300      	movs	r3, #0
   16902:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   16904:	2300      	movs	r3, #0
   16906:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
   16908:	687b      	ldr	r3, [r7, #4]
   1690a:	68db      	ldr	r3, [r3, #12]
   1690c:	3304      	adds	r3, #4
   1690e:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
   16910:	687b      	ldr	r3, [r7, #4]
   16912:	2200      	movs	r2, #0
   16914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
   16918:	78fb      	ldrb	r3, [r7, #3]
   1691a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1691e:	2b00      	cmp	r3, #0
   16920:	d042      	beq.n	169a8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
   16922:	7dfb      	ldrb	r3, [r7, #23]
   16924:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   16926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16928:	1d1a      	adds	r2, r3, #4
   1692a:	627a      	str	r2, [r7, #36]	; 0x24
   1692c:	681b      	ldr	r3, [r3, #0]
   1692e:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   16930:	687b      	ldr	r3, [r7, #4]
   16932:	6858      	ldr	r0, [r3, #4]
   16934:	687b      	ldr	r3, [r7, #4]
   16936:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
   16938:	f107 0110 	add.w	r1, r7, #16
   1693c:	f107 020f 	add.w	r2, r7, #15
   16940:	9202      	str	r2, [sp, #8]
   16942:	9301      	str	r3, [sp, #4]
   16944:	f107 0317 	add.w	r3, r7, #23
   16948:	9300      	str	r3, [sp, #0]
   1694a:	460b      	mov	r3, r1
   1694c:	2201      	movs	r2, #1
   1694e:	69b9      	ldr	r1, [r7, #24]
   16950:	4c19      	ldr	r4, [pc, #100]	; (169b8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
   16952:	47a0      	blx	r4
   16954:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   16956:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16958:	2b00      	cmp	r3, #0
   1695a:	d00e      	beq.n	1697a <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
   1695c:	2300      	movs	r3, #0
   1695e:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   16960:	4b16      	ldr	r3, [pc, #88]	; (169bc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
   16962:	681b      	ldr	r3, [r3, #0]
   16964:	1d18      	adds	r0, r3, #4
   16966:	687b      	ldr	r3, [r7, #4]
   16968:	6819      	ldr	r1, [r3, #0]
   1696a:	69bb      	ldr	r3, [r7, #24]
   1696c:	9300      	str	r3, [sp, #0]
   1696e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   16972:	221a      	movs	r2, #26
   16974:	4c12      	ldr	r4, [pc, #72]	; (169c0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
   16976:	47a0      	blx	r4
   16978:	e016      	b.n	169a8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   1697a:	7ffb      	ldrb	r3, [r7, #31]
   1697c:	623b      	str	r3, [r7, #32]
   1697e:	7dfb      	ldrb	r3, [r7, #23]
   16980:	461a      	mov	r2, r3
   16982:	6a3b      	ldr	r3, [r7, #32]
   16984:	429a      	cmp	r2, r3
   16986:	d90b      	bls.n	169a0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
   16988:	693b      	ldr	r3, [r7, #16]
   1698a:	1c5a      	adds	r2, r3, #1
   1698c:	613a      	str	r2, [r7, #16]
   1698e:	687a      	ldr	r2, [r7, #4]
   16990:	6a39      	ldr	r1, [r7, #32]
   16992:	3108      	adds	r1, #8
   16994:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
   16998:	6a3b      	ldr	r3, [r7, #32]
   1699a:	3301      	adds	r3, #1
   1699c:	623b      	str	r3, [r7, #32]
   1699e:	e7ee      	b.n	1697e <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
   169a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   169a2:	3b01      	subs	r3, #1
   169a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   169a6:	e7b9      	b.n	1691c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
   169a8:	7dfa      	ldrb	r2, [r7, #23]
   169aa:	687b      	ldr	r3, [r7, #4]
   169ac:	779a      	strb	r2, [r3, #30]

    return ret;
   169ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   169b0:	4618      	mov	r0, r3
   169b2:	3734      	adds	r7, #52	; 0x34
   169b4:	46bd      	mov	sp, r7
   169b6:	bd90      	pop	{r4, r7, pc}
   169b8:	00016625 	.word	0x00016625
   169bc:	2000d9f4 	.word	0x2000d9f4
   169c0:	00015d35 	.word	0x00015d35

000169c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
   169c4:	b580      	push	{r7, lr}
   169c6:	b088      	sub	sp, #32
   169c8:	af00      	add	r7, sp, #0
   169ca:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   169cc:	687b      	ldr	r3, [r7, #4]
   169ce:	681b      	ldr	r3, [r3, #0]
   169d0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   169d2:	687b      	ldr	r3, [r7, #4]
   169d4:	7f5b      	ldrb	r3, [r3, #29]
   169d6:	2b00      	cmp	r3, #0
   169d8:	d025      	beq.n	16a26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
   169da:	687b      	ldr	r3, [r7, #4]
   169dc:	7f1b      	ldrb	r3, [r3, #28]
   169de:	2b01      	cmp	r3, #1
   169e0:	d11f      	bne.n	16a22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   169e2:	687b      	ldr	r3, [r7, #4]
   169e4:	685b      	ldr	r3, [r3, #4]
   169e6:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
   169e8:	69bb      	ldr	r3, [r7, #24]
   169ea:	681b      	ldr	r3, [r3, #0]
   169ec:	b29a      	uxth	r2, r3
   169ee:	69fb      	ldr	r3, [r7, #28]
   169f0:	69db      	ldr	r3, [r3, #28]
   169f2:	429a      	cmp	r2, r3
   169f4:	d10a      	bne.n	16a0c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
   169f6:	69fb      	ldr	r3, [r7, #28]
   169f8:	69db      	ldr	r3, [r3, #28]
   169fa:	2b00      	cmp	r3, #0
   169fc:	d006      	beq.n	16a0c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
   169fe:	69bb      	ldr	r3, [r7, #24]
   16a00:	681b      	ldr	r3, [r3, #0]
   16a02:	69fa      	ldr	r2, [r7, #28]
   16a04:	7e12      	ldrb	r2, [r2, #24]
   16a06:	441a      	add	r2, r3
   16a08:	69bb      	ldr	r3, [r7, #24]
   16a0a:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
   16a0c:	69fb      	ldr	r3, [r7, #28]
   16a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16a12:	2b00      	cmp	r3, #0
   16a14:	d105      	bne.n	16a22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
   16a16:	69bb      	ldr	r3, [r7, #24]
   16a18:	681b      	ldr	r3, [r3, #0]
   16a1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   16a1e:	69bb      	ldr	r3, [r7, #24]
   16a20:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16a22:	2300      	movs	r3, #0
   16a24:	e07f      	b.n	16b26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
   16a26:	69fb      	ldr	r3, [r7, #28]
   16a28:	f893 3020 	ldrb.w	r3, [r3, #32]
   16a2c:	f003 0304 	and.w	r3, r3, #4
   16a30:	2b00      	cmp	r3, #0
   16a32:	d001      	beq.n	16a38 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16a34:	4b3e      	ldr	r3, [pc, #248]	; (16b30 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
   16a36:	e076      	b.n	16b26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
   16a38:	69fb      	ldr	r3, [r7, #28]
   16a3a:	695b      	ldr	r3, [r3, #20]
   16a3c:	781b      	ldrb	r3, [r3, #0]
   16a3e:	2b05      	cmp	r3, #5
   16a40:	d108      	bne.n	16a54 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
   16a42:	69fb      	ldr	r3, [r7, #28]
   16a44:	f893 3020 	ldrb.w	r3, [r3, #32]
   16a48:	f003 0301 	and.w	r3, r3, #1
   16a4c:	2b00      	cmp	r3, #0
   16a4e:	d001      	beq.n	16a54 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16a50:	4b38      	ldr	r3, [pc, #224]	; (16b34 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
   16a52:	e068      	b.n	16b26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   16a54:	687b      	ldr	r3, [r7, #4]
   16a56:	7f1b      	ldrb	r3, [r3, #28]
   16a58:	2b01      	cmp	r3, #1
   16a5a:	d139      	bne.n	16ad0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16a5c:	687b      	ldr	r3, [r7, #4]
   16a5e:	685b      	ldr	r3, [r3, #4]
   16a60:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   16a62:	697b      	ldr	r3, [r7, #20]
   16a64:	681a      	ldr	r2, [r3, #0]
   16a66:	4b34      	ldr	r3, [pc, #208]	; (16b38 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
   16a68:	4013      	ands	r3, r2
   16a6a:	2b00      	cmp	r3, #0
   16a6c:	d001      	beq.n	16a72 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16a6e:	4b33      	ldr	r3, [pc, #204]	; (16b3c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16a70:	e059      	b.n	16b26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
   16a72:	697b      	ldr	r3, [r7, #20]
   16a74:	681b      	ldr	r3, [r3, #0]
   16a76:	b29a      	uxth	r2, r3
   16a78:	69fb      	ldr	r3, [r7, #28]
   16a7a:	69db      	ldr	r3, [r3, #28]
   16a7c:	69f9      	ldr	r1, [r7, #28]
   16a7e:	7e09      	ldrb	r1, [r1, #24]
   16a80:	440b      	add	r3, r1
   16a82:	429a      	cmp	r2, r3
   16a84:	d10c      	bne.n	16aa0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
   16a86:	697b      	ldr	r3, [r7, #20]
   16a88:	681b      	ldr	r3, [r3, #0]
   16a8a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   16a8e:	697b      	ldr	r3, [r7, #20]
   16a90:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
   16a92:	697b      	ldr	r3, [r7, #20]
   16a94:	681a      	ldr	r2, [r3, #0]
   16a96:	69fb      	ldr	r3, [r7, #28]
   16a98:	69db      	ldr	r3, [r3, #28]
   16a9a:	441a      	add	r2, r3
   16a9c:	697b      	ldr	r3, [r7, #20]
   16a9e:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
   16aa0:	69fb      	ldr	r3, [r7, #28]
   16aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	d00b      	beq.n	16ac2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
   16aaa:	697b      	ldr	r3, [r7, #20]
   16aac:	681a      	ldr	r2, [r3, #0]
   16aae:	69fb      	ldr	r3, [r7, #28]
   16ab0:	68db      	ldr	r3, [r3, #12]
   16ab2:	685b      	ldr	r3, [r3, #4]
   16ab4:	4053      	eors	r3, r2
   16ab6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   16aba:	2b00      	cmp	r3, #0
   16abc:	d001      	beq.n	16ac2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16abe:	4b1f      	ldr	r3, [pc, #124]	; (16b3c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16ac0:	e031      	b.n	16b26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
   16ac2:	697b      	ldr	r3, [r7, #20]
   16ac4:	681b      	ldr	r3, [r3, #0]
   16ac6:	4619      	mov	r1, r3
   16ac8:	69f8      	ldr	r0, [r7, #28]
   16aca:	4b1d      	ldr	r3, [pc, #116]	; (16b40 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
   16acc:	4798      	blx	r3
   16ace:	e029      	b.n	16b24 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   16ad0:	687b      	ldr	r3, [r7, #4]
   16ad2:	7f1b      	ldrb	r3, [r3, #28]
   16ad4:	2b02      	cmp	r3, #2
   16ad6:	d125      	bne.n	16b24 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16ad8:	687b      	ldr	r3, [r7, #4]
   16ada:	685b      	ldr	r3, [r3, #4]
   16adc:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
   16ade:	69fb      	ldr	r3, [r7, #28]
   16ae0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16ae4:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   16ae6:	693b      	ldr	r3, [r7, #16]
   16ae8:	781b      	ldrb	r3, [r3, #0]
   16aea:	2bf0      	cmp	r3, #240	; 0xf0
   16aec:	dd05      	ble.n	16afa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
   16aee:	693b      	ldr	r3, [r7, #16]
   16af0:	781b      	ldrb	r3, [r3, #0]
   16af2:	2bfd      	cmp	r3, #253	; 0xfd
   16af4:	dc01      	bgt.n	16afa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16af6:	4b11      	ldr	r3, [pc, #68]	; (16b3c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16af8:	e015      	b.n	16b26 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
   16afa:	693b      	ldr	r3, [r7, #16]
   16afc:	781b      	ldrb	r3, [r3, #0]
   16afe:	2bf0      	cmp	r3, #240	; 0xf0
   16b00:	bfd4      	ite	le
   16b02:	2301      	movle	r3, #1
   16b04:	2300      	movgt	r3, #0
   16b06:	b2db      	uxtb	r3, r3
   16b08:	461a      	mov	r2, r3
   16b0a:	69fb      	ldr	r3, [r7, #28]
   16b0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
   16b10:	69fb      	ldr	r3, [r7, #28]
   16b12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16b16:	7bfa      	ldrb	r2, [r7, #15]
   16b18:	429a      	cmp	r2, r3
   16b1a:	d003      	beq.n	16b24 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
   16b1c:	69fb      	ldr	r3, [r7, #28]
   16b1e:	2200      	movs	r2, #0
   16b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
   16b24:	2300      	movs	r3, #0
}
   16b26:	4618      	mov	r0, r3
   16b28:	3720      	adds	r7, #32
   16b2a:	46bd      	mov	sp, r7
   16b2c:	bd80      	pop	{r7, pc}
   16b2e:	bf00      	nop
   16b30:	06010002 	.word	0x06010002
   16b34:	08000022 	.word	0x08000022
   16b38:	3fff8000 	.word	0x3fff8000
   16b3c:	06090030 	.word	0x06090030
   16b40:	000164b9 	.word	0x000164b9

00016b44 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
   16b44:	b580      	push	{r7, lr}
   16b46:	b088      	sub	sp, #32
   16b48:	af00      	add	r7, sp, #0
   16b4a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   16b4c:	687b      	ldr	r3, [r7, #4]
   16b4e:	681b      	ldr	r3, [r3, #0]
   16b50:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
   16b52:	687b      	ldr	r3, [r7, #4]
   16b54:	7f1b      	ldrb	r3, [r3, #28]
   16b56:	2b04      	cmp	r3, #4
   16b58:	d101      	bne.n	16b5e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
   16b5a:	4b6d      	ldr	r3, [pc, #436]	; (16d10 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
   16b5c:	e0d4      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16b5e:	687b      	ldr	r3, [r7, #4]
   16b60:	7f5b      	ldrb	r3, [r3, #29]
   16b62:	2b00      	cmp	r3, #0
   16b64:	d024      	beq.n	16bb0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
   16b66:	687b      	ldr	r3, [r7, #4]
   16b68:	7f1b      	ldrb	r3, [r3, #28]
   16b6a:	2b01      	cmp	r3, #1
   16b6c:	d11e      	bne.n	16bac <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   16b6e:	687b      	ldr	r3, [r7, #4]
   16b70:	685b      	ldr	r3, [r3, #4]
   16b72:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
   16b74:	69bb      	ldr	r3, [r7, #24]
   16b76:	681b      	ldr	r3, [r3, #0]
   16b78:	b29a      	uxth	r2, r3
   16b7a:	69fb      	ldr	r3, [r7, #28]
   16b7c:	699b      	ldr	r3, [r3, #24]
   16b7e:	429a      	cmp	r2, r3
   16b80:	d10a      	bne.n	16b98 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
   16b82:	69fb      	ldr	r3, [r7, #28]
   16b84:	699b      	ldr	r3, [r3, #24]
   16b86:	2b00      	cmp	r3, #0
   16b88:	d006      	beq.n	16b98 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
   16b8a:	69bb      	ldr	r3, [r7, #24]
   16b8c:	681b      	ldr	r3, [r3, #0]
   16b8e:	69fa      	ldr	r2, [r7, #28]
   16b90:	7d12      	ldrb	r2, [r2, #20]
   16b92:	441a      	add	r2, r3
   16b94:	69bb      	ldr	r3, [r7, #24]
   16b96:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
   16b98:	69fb      	ldr	r3, [r7, #28]
   16b9a:	7f5b      	ldrb	r3, [r3, #29]
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	d105      	bne.n	16bac <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
   16ba0:	69bb      	ldr	r3, [r7, #24]
   16ba2:	681b      	ldr	r3, [r3, #0]
   16ba4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   16ba8:	69bb      	ldr	r3, [r7, #24]
   16baa:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16bac:	2300      	movs	r3, #0
   16bae:	e0ab      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
   16bb0:	69fb      	ldr	r3, [r7, #28]
   16bb2:	7f1b      	ldrb	r3, [r3, #28]
   16bb4:	f003 0304 	and.w	r3, r3, #4
   16bb8:	2b00      	cmp	r3, #0
   16bba:	d001      	beq.n	16bc0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16bbc:	4b55      	ldr	r3, [pc, #340]	; (16d14 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
   16bbe:	e0a3      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
   16bc0:	69fb      	ldr	r3, [r7, #28]
   16bc2:	691b      	ldr	r3, [r3, #16]
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	2b05      	cmp	r3, #5
   16bc8:	d107      	bne.n	16bda <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
   16bca:	69fb      	ldr	r3, [r7, #28]
   16bcc:	7f1b      	ldrb	r3, [r3, #28]
   16bce:	f003 0301 	and.w	r3, r3, #1
   16bd2:	2b00      	cmp	r3, #0
   16bd4:	d001      	beq.n	16bda <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16bd6:	4b50      	ldr	r3, [pc, #320]	; (16d18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
   16bd8:	e096      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   16bda:	687b      	ldr	r3, [r7, #4]
   16bdc:	7f1b      	ldrb	r3, [r3, #28]
   16bde:	2b01      	cmp	r3, #1
   16be0:	d140      	bne.n	16c64 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16be2:	687b      	ldr	r3, [r7, #4]
   16be4:	685b      	ldr	r3, [r3, #4]
   16be6:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   16be8:	697b      	ldr	r3, [r7, #20]
   16bea:	681a      	ldr	r2, [r3, #0]
   16bec:	4b4b      	ldr	r3, [pc, #300]	; (16d1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
   16bee:	4013      	ands	r3, r2
   16bf0:	2b00      	cmp	r3, #0
   16bf2:	d001      	beq.n	16bf8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16bf4:	4b4a      	ldr	r3, [pc, #296]	; (16d20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16bf6:	e087      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
   16bf8:	697b      	ldr	r3, [r7, #20]
   16bfa:	681b      	ldr	r3, [r3, #0]
   16bfc:	b29a      	uxth	r2, r3
   16bfe:	69fb      	ldr	r3, [r7, #28]
   16c00:	699b      	ldr	r3, [r3, #24]
   16c02:	69f9      	ldr	r1, [r7, #28]
   16c04:	7d09      	ldrb	r1, [r1, #20]
   16c06:	440b      	add	r3, r1
   16c08:	429a      	cmp	r2, r3
   16c0a:	d10c      	bne.n	16c26 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
   16c0c:	697b      	ldr	r3, [r7, #20]
   16c0e:	681b      	ldr	r3, [r3, #0]
   16c10:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   16c14:	697b      	ldr	r3, [r7, #20]
   16c16:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
   16c18:	697b      	ldr	r3, [r7, #20]
   16c1a:	681a      	ldr	r2, [r3, #0]
   16c1c:	69fb      	ldr	r3, [r7, #28]
   16c1e:	699b      	ldr	r3, [r3, #24]
   16c20:	441a      	add	r2, r3
   16c22:	697b      	ldr	r3, [r7, #20]
   16c24:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
   16c26:	69fb      	ldr	r3, [r7, #28]
   16c28:	7f5b      	ldrb	r3, [r3, #29]
   16c2a:	2b00      	cmp	r3, #0
   16c2c:	d00b      	beq.n	16c46 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
   16c2e:	697b      	ldr	r3, [r7, #20]
   16c30:	681a      	ldr	r2, [r3, #0]
   16c32:	69fb      	ldr	r3, [r7, #28]
   16c34:	689b      	ldr	r3, [r3, #8]
   16c36:	685b      	ldr	r3, [r3, #4]
   16c38:	4053      	eors	r3, r2
   16c3a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   16c3e:	2b00      	cmp	r3, #0
   16c40:	d001      	beq.n	16c46 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16c42:	4b37      	ldr	r3, [pc, #220]	; (16d20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16c44:	e060      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
   16c46:	697b      	ldr	r3, [r7, #20]
   16c48:	6819      	ldr	r1, [r3, #0]
   16c4a:	69fb      	ldr	r3, [r7, #28]
   16c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16c4e:	7b9b      	ldrb	r3, [r3, #14]
   16c50:	b2db      	uxtb	r3, r3
   16c52:	461a      	mov	r2, r3
   16c54:	69f8      	ldr	r0, [r7, #28]
   16c56:	4b33      	ldr	r3, [pc, #204]	; (16d24 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
   16c58:	4798      	blx	r3
        TPDO->syncCounter = 255;
   16c5a:	69fb      	ldr	r3, [r7, #28]
   16c5c:	22ff      	movs	r2, #255	; 0xff
   16c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   16c62:	e050      	b.n	16d06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   16c64:	687b      	ldr	r3, [r7, #4]
   16c66:	7f1b      	ldrb	r3, [r3, #28]
   16c68:	2b02      	cmp	r3, #2
   16c6a:	d11b      	bne.n	16ca4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16c6c:	687b      	ldr	r3, [r7, #4]
   16c6e:	685b      	ldr	r3, [r3, #4]
   16c70:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   16c72:	693b      	ldr	r3, [r7, #16]
   16c74:	781b      	ldrb	r3, [r3, #0]
   16c76:	2bf0      	cmp	r3, #240	; 0xf0
   16c78:	dd05      	ble.n	16c86 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
   16c7a:	693b      	ldr	r3, [r7, #16]
   16c7c:	781b      	ldrb	r3, [r3, #0]
   16c7e:	2bfd      	cmp	r3, #253	; 0xfd
   16c80:	dc01      	bgt.n	16c86 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16c82:	4b27      	ldr	r3, [pc, #156]	; (16d20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16c84:	e040      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
   16c86:	69fb      	ldr	r3, [r7, #28]
   16c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16c8a:	693a      	ldr	r2, [r7, #16]
   16c8c:	7812      	ldrb	r2, [r2, #0]
   16c8e:	2af0      	cmp	r2, #240	; 0xf0
   16c90:	dc01      	bgt.n	16c96 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
   16c92:	2201      	movs	r2, #1
   16c94:	e000      	b.n	16c98 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
   16c96:	2200      	movs	r2, #0
   16c98:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
   16c9a:	69fb      	ldr	r3, [r7, #28]
   16c9c:	22ff      	movs	r2, #255	; 0xff
   16c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   16ca2:	e030      	b.n	16d06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
   16ca4:	687b      	ldr	r3, [r7, #4]
   16ca6:	7f1b      	ldrb	r3, [r3, #28]
   16ca8:	2b03      	cmp	r3, #3
   16caa:	d109      	bne.n	16cc0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   16cac:	69fb      	ldr	r3, [r7, #28]
   16cae:	7f5b      	ldrb	r3, [r3, #29]
   16cb0:	2b00      	cmp	r3, #0
   16cb2:	d001      	beq.n	16cb8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16cb4:	4b1a      	ldr	r3, [pc, #104]	; (16d20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16cb6:	e027      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
   16cb8:	69fb      	ldr	r3, [r7, #28]
   16cba:	2200      	movs	r2, #0
   16cbc:	645a      	str	r2, [r3, #68]	; 0x44
   16cbe:	e022      	b.n	16d06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
   16cc0:	687b      	ldr	r3, [r7, #4]
   16cc2:	7f1b      	ldrb	r3, [r3, #28]
   16cc4:	2b05      	cmp	r3, #5
   16cc6:	d10b      	bne.n	16ce0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16cc8:	687b      	ldr	r3, [r7, #4]
   16cca:	685b      	ldr	r3, [r3, #4]
   16ccc:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
   16cce:	68bb      	ldr	r3, [r7, #8]
   16cd0:	681b      	ldr	r3, [r3, #0]
   16cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16cd6:	fb02 f203 	mul.w	r2, r2, r3
   16cda:	69fb      	ldr	r3, [r7, #28]
   16cdc:	649a      	str	r2, [r3, #72]	; 0x48
   16cde:	e012      	b.n	16d06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
   16ce0:	687b      	ldr	r3, [r7, #4]
   16ce2:	7f1b      	ldrb	r3, [r3, #28]
   16ce4:	2b06      	cmp	r3, #6
   16ce6:	d10e      	bne.n	16d06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16ce8:	687b      	ldr	r3, [r7, #4]
   16cea:	685b      	ldr	r3, [r3, #4]
   16cec:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   16cee:	69fb      	ldr	r3, [r7, #28]
   16cf0:	7f5b      	ldrb	r3, [r3, #29]
   16cf2:	2b00      	cmp	r3, #0
   16cf4:	d001      	beq.n	16cfa <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16cf6:	4b0a      	ldr	r3, [pc, #40]	; (16d20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16cf8:	e006      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
   16cfa:	68fb      	ldr	r3, [r7, #12]
   16cfc:	781b      	ldrb	r3, [r3, #0]
   16cfe:	2bf0      	cmp	r3, #240	; 0xf0
   16d00:	dd01      	ble.n	16d06 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16d02:	4b07      	ldr	r3, [pc, #28]	; (16d20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16d04:	e000      	b.n	16d08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
   16d06:	2300      	movs	r3, #0
}
   16d08:	4618      	mov	r0, r3
   16d0a:	3720      	adds	r7, #32
   16d0c:	46bd      	mov	sp, r7
   16d0e:	bd80      	pop	{r7, pc}
   16d10:	06090011 	.word	0x06090011
   16d14:	06010002 	.word	0x06010002
   16d18:	08000022 	.word	0x08000022
   16d1c:	3fff8000 	.word	0x3fff8000
   16d20:	06090030 	.word	0x06090030
   16d24:	00016591 	.word	0x00016591

00016d28 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
   16d28:	b590      	push	{r4, r7, lr}
   16d2a:	b08d      	sub	sp, #52	; 0x34
   16d2c:	af04      	add	r7, sp, #16
   16d2e:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   16d30:	687b      	ldr	r3, [r7, #4]
   16d32:	681b      	ldr	r3, [r3, #0]
   16d34:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16d36:	687b      	ldr	r3, [r7, #4]
   16d38:	7f5b      	ldrb	r3, [r3, #29]
   16d3a:	2b00      	cmp	r3, #0
   16d3c:	d010      	beq.n	16d60 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16d3e:	687b      	ldr	r3, [r7, #4]
   16d40:	685b      	ldr	r3, [r3, #4]
   16d42:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   16d44:	687b      	ldr	r3, [r7, #4]
   16d46:	7f1b      	ldrb	r3, [r3, #28]
   16d48:	2b00      	cmp	r3, #0
   16d4a:	d107      	bne.n	16d5c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
   16d4c:	69fb      	ldr	r3, [r7, #28]
   16d4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   16d52:	2b00      	cmp	r3, #0
   16d54:	d102      	bne.n	16d5c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
   16d56:	69bb      	ldr	r3, [r7, #24]
   16d58:	2200      	movs	r2, #0
   16d5a:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16d5c:	2300      	movs	r3, #0
   16d5e:	e054      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
   16d60:	69fb      	ldr	r3, [r7, #28]
   16d62:	f893 3020 	ldrb.w	r3, [r3, #32]
   16d66:	f003 0308 	and.w	r3, r3, #8
   16d6a:	2b00      	cmp	r3, #0
   16d6c:	d001      	beq.n	16d72 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16d6e:	4b29      	ldr	r3, [pc, #164]	; (16e14 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
   16d70:	e04b      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
   16d72:	69fb      	ldr	r3, [r7, #28]
   16d74:	695b      	ldr	r3, [r3, #20]
   16d76:	781b      	ldrb	r3, [r3, #0]
   16d78:	2b05      	cmp	r3, #5
   16d7a:	d108      	bne.n	16d8e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
   16d7c:	69fb      	ldr	r3, [r7, #28]
   16d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
   16d82:	f003 0302 	and.w	r3, r3, #2
   16d86:	2b00      	cmp	r3, #0
   16d88:	d001      	beq.n	16d8e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16d8a:	4b23      	ldr	r3, [pc, #140]	; (16e18 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
   16d8c:	e03d      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
   16d8e:	69fb      	ldr	r3, [r7, #28]
   16d90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16d94:	2b00      	cmp	r3, #0
   16d96:	d001      	beq.n	16d9c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16d98:	4b20      	ldr	r3, [pc, #128]	; (16e1c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   16d9a:	e036      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   16d9c:	687b      	ldr	r3, [r7, #4]
   16d9e:	7f1b      	ldrb	r3, [r3, #28]
   16da0:	2b00      	cmp	r3, #0
   16da2:	d110      	bne.n	16dc6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16da4:	687b      	ldr	r3, [r7, #4]
   16da6:	685b      	ldr	r3, [r3, #4]
   16da8:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   16daa:	697b      	ldr	r3, [r7, #20]
   16dac:	781b      	ldrb	r3, [r3, #0]
   16dae:	2b08      	cmp	r3, #8
   16db0:	dd01      	ble.n	16db6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   16db2:	4b1b      	ldr	r3, [pc, #108]	; (16e20 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
   16db4:	e029      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
   16db6:	697b      	ldr	r3, [r7, #20]
   16db8:	781b      	ldrb	r3, [r3, #0]
   16dba:	4619      	mov	r1, r3
   16dbc:	69f8      	ldr	r0, [r7, #28]
   16dbe:	4b19      	ldr	r3, [pc, #100]	; (16e24 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
   16dc0:	4798      	blx	r3
   16dc2:	4603      	mov	r3, r0
   16dc4:	e021      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16dc6:	687b      	ldr	r3, [r7, #4]
   16dc8:	685b      	ldr	r3, [r3, #4]
   16dca:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   16dcc:	2300      	movs	r3, #0
   16dce:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   16dd0:	2300      	movs	r3, #0
   16dd2:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
   16dd4:	69fb      	ldr	r3, [r7, #28]
   16dd6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   16dda:	2b00      	cmp	r3, #0
   16ddc:	d001      	beq.n	16de2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16dde:	4b0f      	ldr	r3, [pc, #60]	; (16e1c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   16de0:	e013      	b.n	16e0a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
   16de2:	69fb      	ldr	r3, [r7, #28]
   16de4:	6858      	ldr	r0, [r3, #4]
   16de6:	693b      	ldr	r3, [r7, #16]
   16de8:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
   16dea:	f107 020c 	add.w	r2, r7, #12
   16dee:	f107 0309 	add.w	r3, r7, #9
   16df2:	9302      	str	r3, [sp, #8]
   16df4:	f107 030a 	add.w	r3, r7, #10
   16df8:	9301      	str	r3, [sp, #4]
   16dfa:	f107 030b 	add.w	r3, r7, #11
   16dfe:	9300      	str	r3, [sp, #0]
   16e00:	4613      	mov	r3, r2
   16e02:	2200      	movs	r2, #0
   16e04:	4c08      	ldr	r4, [pc, #32]	; (16e28 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
   16e06:	47a0      	blx	r4
   16e08:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   16e0a:	4618      	mov	r0, r3
   16e0c:	3724      	adds	r7, #36	; 0x24
   16e0e:	46bd      	mov	sp, r7
   16e10:	bd90      	pop	{r4, r7, pc}
   16e12:	bf00      	nop
   16e14:	06010002 	.word	0x06010002
   16e18:	08000022 	.word	0x08000022
   16e1c:	06010000 	.word	0x06010000
   16e20:	06040042 	.word	0x06040042
   16e24:	00016825 	.word	0x00016825
   16e28:	00016625 	.word	0x00016625

00016e2c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
   16e2c:	b590      	push	{r4, r7, lr}
   16e2e:	b08d      	sub	sp, #52	; 0x34
   16e30:	af04      	add	r7, sp, #16
   16e32:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   16e34:	687b      	ldr	r3, [r7, #4]
   16e36:	681b      	ldr	r3, [r3, #0]
   16e38:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16e3a:	687b      	ldr	r3, [r7, #4]
   16e3c:	7f5b      	ldrb	r3, [r3, #29]
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d00f      	beq.n	16e62 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16e42:	687b      	ldr	r3, [r7, #4]
   16e44:	685b      	ldr	r3, [r3, #4]
   16e46:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   16e48:	687b      	ldr	r3, [r7, #4]
   16e4a:	7f1b      	ldrb	r3, [r3, #28]
   16e4c:	2b00      	cmp	r3, #0
   16e4e:	d106      	bne.n	16e5e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
   16e50:	69fb      	ldr	r3, [r7, #28]
   16e52:	7f9b      	ldrb	r3, [r3, #30]
   16e54:	2b00      	cmp	r3, #0
   16e56:	d102      	bne.n	16e5e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
   16e58:	69bb      	ldr	r3, [r7, #24]
   16e5a:	2200      	movs	r2, #0
   16e5c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16e5e:	2300      	movs	r3, #0
   16e60:	e050      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
   16e62:	69fb      	ldr	r3, [r7, #28]
   16e64:	7f1b      	ldrb	r3, [r3, #28]
   16e66:	f003 0308 	and.w	r3, r3, #8
   16e6a:	2b00      	cmp	r3, #0
   16e6c:	d001      	beq.n	16e72 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16e6e:	4b27      	ldr	r3, [pc, #156]	; (16f0c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
   16e70:	e048      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
   16e72:	69fb      	ldr	r3, [r7, #28]
   16e74:	691b      	ldr	r3, [r3, #16]
   16e76:	781b      	ldrb	r3, [r3, #0]
   16e78:	2b05      	cmp	r3, #5
   16e7a:	d107      	bne.n	16e8c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
   16e7c:	69fb      	ldr	r3, [r7, #28]
   16e7e:	7f1b      	ldrb	r3, [r3, #28]
   16e80:	f003 0302 	and.w	r3, r3, #2
   16e84:	2b00      	cmp	r3, #0
   16e86:	d001      	beq.n	16e8c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16e88:	4b21      	ldr	r3, [pc, #132]	; (16f10 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
   16e8a:	e03b      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
   16e8c:	69fb      	ldr	r3, [r7, #28]
   16e8e:	7f5b      	ldrb	r3, [r3, #29]
   16e90:	2b00      	cmp	r3, #0
   16e92:	d001      	beq.n	16e98 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16e94:	4b1f      	ldr	r3, [pc, #124]	; (16f14 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   16e96:	e035      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   16e98:	687b      	ldr	r3, [r7, #4]
   16e9a:	7f1b      	ldrb	r3, [r3, #28]
   16e9c:	2b00      	cmp	r3, #0
   16e9e:	d110      	bne.n	16ec2 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16ea0:	687b      	ldr	r3, [r7, #4]
   16ea2:	685b      	ldr	r3, [r3, #4]
   16ea4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   16ea6:	697b      	ldr	r3, [r7, #20]
   16ea8:	781b      	ldrb	r3, [r3, #0]
   16eaa:	2b08      	cmp	r3, #8
   16eac:	dd01      	ble.n	16eb2 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   16eae:	4b1a      	ldr	r3, [pc, #104]	; (16f18 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
   16eb0:	e028      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
   16eb2:	697b      	ldr	r3, [r7, #20]
   16eb4:	781b      	ldrb	r3, [r3, #0]
   16eb6:	4619      	mov	r1, r3
   16eb8:	69f8      	ldr	r0, [r7, #28]
   16eba:	4b18      	ldr	r3, [pc, #96]	; (16f1c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
   16ebc:	4798      	blx	r3
   16ebe:	4603      	mov	r3, r0
   16ec0:	e020      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16ec2:	687b      	ldr	r3, [r7, #4]
   16ec4:	685b      	ldr	r3, [r3, #4]
   16ec6:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   16ec8:	2300      	movs	r3, #0
   16eca:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   16ecc:	2300      	movs	r3, #0
   16ece:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
   16ed0:	69fb      	ldr	r3, [r7, #28]
   16ed2:	7f9b      	ldrb	r3, [r3, #30]
   16ed4:	2b00      	cmp	r3, #0
   16ed6:	d001      	beq.n	16edc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16ed8:	4b0e      	ldr	r3, [pc, #56]	; (16f14 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   16eda:	e013      	b.n	16f04 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
   16edc:	69fb      	ldr	r3, [r7, #28]
   16ede:	6858      	ldr	r0, [r3, #4]
   16ee0:	693b      	ldr	r3, [r7, #16]
   16ee2:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
   16ee4:	f107 020c 	add.w	r2, r7, #12
   16ee8:	f107 0309 	add.w	r3, r7, #9
   16eec:	9302      	str	r3, [sp, #8]
   16eee:	f107 030a 	add.w	r3, r7, #10
   16ef2:	9301      	str	r3, [sp, #4]
   16ef4:	f107 030b 	add.w	r3, r7, #11
   16ef8:	9300      	str	r3, [sp, #0]
   16efa:	4613      	mov	r3, r2
   16efc:	2201      	movs	r2, #1
   16efe:	4c08      	ldr	r4, [pc, #32]	; (16f20 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
   16f00:	47a0      	blx	r4
   16f02:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   16f04:	4618      	mov	r0, r3
   16f06:	3724      	adds	r7, #36	; 0x24
   16f08:	46bd      	mov	sp, r7
   16f0a:	bd90      	pop	{r4, r7, pc}
   16f0c:	06010002 	.word	0x06010002
   16f10:	08000022 	.word	0x08000022
   16f14:	06010000 	.word	0x06010000
   16f18:	06040042 	.word	0x06040042
   16f1c:	000168f5 	.word	0x000168f5
   16f20:	00016625 	.word	0x00016625

00016f24 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
   16f24:	b590      	push	{r4, r7, lr}
   16f26:	b087      	sub	sp, #28
   16f28:	af02      	add	r7, sp, #8
   16f2a:	60f8      	str	r0, [r7, #12]
   16f2c:	60b9      	str	r1, [r7, #8]
   16f2e:	607a      	str	r2, [r7, #4]
   16f30:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
   16f32:	68bb      	ldr	r3, [r7, #8]
   16f34:	2b00      	cmp	r3, #0
   16f36:	d014      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   16f38:	687b      	ldr	r3, [r7, #4]
   16f3a:	2b00      	cmp	r3, #0
   16f3c:	d011      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   16f3e:	683b      	ldr	r3, [r7, #0]
   16f40:	2b00      	cmp	r3, #0
   16f42:	d00e      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   16f44:	6a3b      	ldr	r3, [r7, #32]
   16f46:	2b00      	cmp	r3, #0
   16f48:	d00b      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   16f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	d008      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   16f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f52:	2b00      	cmp	r3, #0
   16f54:	d005      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
   16f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16f58:	2b00      	cmp	r3, #0
   16f5a:	d002      	beq.n	16f62 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   16f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16f5e:	2b00      	cmp	r3, #0
   16f60:	d102      	bne.n	16f68 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   16f62:	f04f 33ff 	mov.w	r3, #4294967295
   16f66:	e050      	b.n	1700a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
   16f68:	68bb      	ldr	r3, [r7, #8]
   16f6a:	687a      	ldr	r2, [r7, #4]
   16f6c:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
   16f6e:	68bb      	ldr	r3, [r7, #8]
   16f70:	683a      	ldr	r2, [r7, #0]
   16f72:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
   16f74:	68bb      	ldr	r3, [r7, #8]
   16f76:	6a3a      	ldr	r2, [r7, #32]
   16f78:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
   16f7a:	68bb      	ldr	r3, [r7, #8]
   16f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16f7e:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
   16f80:	68bb      	ldr	r3, [r7, #8]
   16f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16f84:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
   16f86:	68bb      	ldr	r3, [r7, #8]
   16f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16f8a:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
   16f8c:	68bb      	ldr	r3, [r7, #8]
   16f8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   16f92:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
   16f94:	68bb      	ldr	r3, [r7, #8]
   16f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16f98:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
   16f9a:	68bb      	ldr	r3, [r7, #8]
   16f9c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   16fa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
   16fa4:	4b1b      	ldr	r3, [pc, #108]	; (17014 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   16fa6:	681b      	ldr	r3, [r3, #0]
   16fa8:	1d18      	adds	r0, r3, #4
   16faa:	2300      	movs	r3, #0
   16fac:	9301      	str	r3, [sp, #4]
   16fae:	2300      	movs	r3, #0
   16fb0:	9300      	str	r3, [sp, #0]
   16fb2:	68bb      	ldr	r3, [r7, #8]
   16fb4:	4a18      	ldr	r2, [pc, #96]	; (17018 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
   16fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16fb8:	4c18      	ldr	r4, [pc, #96]	; (1701c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   16fba:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
   16fbc:	4b15      	ldr	r3, [pc, #84]	; (17014 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   16fbe:	681b      	ldr	r3, [r3, #0]
   16fc0:	1d18      	adds	r0, r3, #4
   16fc2:	2300      	movs	r3, #0
   16fc4:	9301      	str	r3, [sp, #4]
   16fc6:	2300      	movs	r3, #0
   16fc8:	9300      	str	r3, [sp, #0]
   16fca:	68bb      	ldr	r3, [r7, #8]
   16fcc:	4a14      	ldr	r2, [pc, #80]	; (17020 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
   16fce:	6c39      	ldr	r1, [r7, #64]	; 0x40
   16fd0:	4c12      	ldr	r4, [pc, #72]	; (1701c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   16fd2:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16fd4:	68bb      	ldr	r3, [r7, #8]
   16fd6:	2200      	movs	r2, #0
   16fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   16fdc:	68bb      	ldr	r3, [r7, #8]
   16fde:	2200      	movs	r2, #0
   16fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
   16fe4:	68bb      	ldr	r3, [r7, #8]
   16fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16fe8:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
   16fea:	68bb      	ldr	r3, [r7, #8]
   16fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16fee:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
   16ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ff2:	781b      	ldrb	r3, [r3, #0]
   16ff4:	4619      	mov	r1, r3
   16ff6:	68b8      	ldr	r0, [r7, #8]
   16ff8:	4b0a      	ldr	r3, [pc, #40]	; (17024 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
   16ffa:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
   16ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ffe:	685b      	ldr	r3, [r3, #4]
   17000:	4619      	mov	r1, r3
   17002:	68b8      	ldr	r0, [r7, #8]
   17004:	4b08      	ldr	r3, [pc, #32]	; (17028 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
   17006:	4798      	blx	r3

    return CO_ERROR_NO;
   17008:	2300      	movs	r3, #0
}
   1700a:	4618      	mov	r0, r3
   1700c:	3714      	adds	r7, #20
   1700e:	46bd      	mov	sp, r7
   17010:	bd90      	pop	{r4, r7, pc}
   17012:	bf00      	nop
   17014:	2000d9f4 	.word	0x2000d9f4
   17018:	000169c5 	.word	0x000169c5
   1701c:	000176d1 	.word	0x000176d1
   17020:	00016d29 	.word	0x00016d29
   17024:	00016825 	.word	0x00016825
   17028:	000164b9 	.word	0x000164b9

0001702c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   1702c:	b590      	push	{r4, r7, lr}
   1702e:	b087      	sub	sp, #28
   17030:	af02      	add	r7, sp, #8
   17032:	60f8      	str	r0, [r7, #12]
   17034:	60b9      	str	r1, [r7, #8]
   17036:	607a      	str	r2, [r7, #4]
   17038:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   1703a:	68bb      	ldr	r3, [r7, #8]
   1703c:	2b00      	cmp	r3, #0
   1703e:	d011      	beq.n	17064 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17040:	687b      	ldr	r3, [r7, #4]
   17042:	2b00      	cmp	r3, #0
   17044:	d00e      	beq.n	17064 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17046:	683b      	ldr	r3, [r7, #0]
   17048:	2b00      	cmp	r3, #0
   1704a:	d00b      	beq.n	17064 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1704c:	6a3b      	ldr	r3, [r7, #32]
   1704e:	2b00      	cmp	r3, #0
   17050:	d008      	beq.n	17064 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17054:	2b00      	cmp	r3, #0
   17056:	d005      	beq.n	17064 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
   17058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1705a:	2b00      	cmp	r3, #0
   1705c:	d002      	beq.n	17064 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1705e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17060:	2b00      	cmp	r3, #0
   17062:	d102      	bne.n	1706a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17064:	f04f 33ff 	mov.w	r3, #4294967295
   17068:	e07e      	b.n	17168 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
   1706a:	68bb      	ldr	r3, [r7, #8]
   1706c:	687a      	ldr	r2, [r7, #4]
   1706e:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
   17070:	68bb      	ldr	r3, [r7, #8]
   17072:	683a      	ldr	r2, [r7, #0]
   17074:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
   17076:	68bb      	ldr	r3, [r7, #8]
   17078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1707a:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
   1707c:	68bb      	ldr	r3, [r7, #8]
   1707e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17080:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
   17082:	68bb      	ldr	r3, [r7, #8]
   17084:	6a3a      	ldr	r2, [r7, #32]
   17086:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
   17088:	68bb      	ldr	r3, [r7, #8]
   1708a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   1708e:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
   17090:	68bb      	ldr	r3, [r7, #8]
   17092:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17094:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
   17096:	68bb      	ldr	r3, [r7, #8]
   17098:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1709c:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
   1709e:	4b34      	ldr	r3, [pc, #208]	; (17170 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   170a0:	681b      	ldr	r3, [r3, #0]
   170a2:	1d18      	adds	r0, r3, #4
   170a4:	2300      	movs	r3, #0
   170a6:	9301      	str	r3, [sp, #4]
   170a8:	2300      	movs	r3, #0
   170aa:	9300      	str	r3, [sp, #0]
   170ac:	68bb      	ldr	r3, [r7, #8]
   170ae:	4a31      	ldr	r2, [pc, #196]	; (17174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
   170b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   170b2:	4c31      	ldr	r4, [pc, #196]	; (17178 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   170b4:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
   170b6:	4b2e      	ldr	r3, [pc, #184]	; (17170 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   170b8:	681b      	ldr	r3, [r3, #0]
   170ba:	1d18      	adds	r0, r3, #4
   170bc:	2300      	movs	r3, #0
   170be:	9301      	str	r3, [sp, #4]
   170c0:	2300      	movs	r3, #0
   170c2:	9300      	str	r3, [sp, #0]
   170c4:	68bb      	ldr	r3, [r7, #8]
   170c6:	4a2d      	ldr	r2, [pc, #180]	; (1717c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
   170c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   170ca:	4c2b      	ldr	r4, [pc, #172]	; (17178 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   170cc:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
   170ce:	68bb      	ldr	r3, [r7, #8]
   170d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   170d2:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
   170d4:	68bb      	ldr	r3, [r7, #8]
   170d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   170d8:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
   170da:	68bb      	ldr	r3, [r7, #8]
   170dc:	22ff      	movs	r2, #255	; 0xff
   170de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
   170e2:	68bb      	ldr	r3, [r7, #8]
   170e4:	2200      	movs	r2, #0
   170e6:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
   170e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   170ea:	695b      	ldr	r3, [r3, #20]
   170ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   170f0:	fb02 f203 	mul.w	r2, r2, r3
   170f4:	68bb      	ldr	r3, [r7, #8]
   170f6:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   170f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   170fa:	7a1b      	ldrb	r3, [r3, #8]
   170fc:	2bfd      	cmp	r3, #253	; 0xfd
   170fe:	dd02      	ble.n	17106 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
   17100:	68bb      	ldr	r3, [r7, #8]
   17102:	2201      	movs	r2, #1
   17104:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
   17106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17108:	781b      	ldrb	r3, [r3, #0]
   1710a:	4619      	mov	r1, r3
   1710c:	68b8      	ldr	r0, [r7, #8]
   1710e:	4b1c      	ldr	r3, [pc, #112]	; (17180 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
   17110:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
   17112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17114:	6859      	ldr	r1, [r3, #4]
   17116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17118:	7a1b      	ldrb	r3, [r3, #8]
   1711a:	2bf0      	cmp	r3, #240	; 0xf0
   1711c:	dc01      	bgt.n	17122 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
   1711e:	2301      	movs	r3, #1
   17120:	e000      	b.n	17124 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
   17122:	2300      	movs	r3, #0
   17124:	461a      	mov	r2, r3
   17126:	68b8      	ldr	r0, [r7, #8]
   17128:	4b16      	ldr	r3, [pc, #88]	; (17184 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
   1712a:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
   1712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1712e:	7a1b      	ldrb	r3, [r3, #8]
   17130:	2bf0      	cmp	r3, #240	; 0xf0
   17132:	dd03      	ble.n	1713c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
   17134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17136:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
   17138:	2bfd      	cmp	r3, #253	; 0xfd
   1713a:	dd03      	ble.n	17144 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
   1713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1713e:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
   17140:	2bf0      	cmp	r3, #240	; 0xf0
   17142:	dd02      	ble.n	1714a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
   17144:	68bb      	ldr	r3, [r7, #8]
   17146:	2200      	movs	r2, #0
   17148:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
   1714a:	68fb      	ldr	r3, [r7, #12]
   1714c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   17150:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
   17152:	68bb      	ldr	r3, [r7, #8]
   17154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17156:	2210      	movs	r2, #16
   17158:	4619      	mov	r1, r3
   1715a:	480b      	ldr	r0, [pc, #44]	; (17188 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   1715c:	4b0b      	ldr	r3, [pc, #44]	; (1718c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
   1715e:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
   17160:	68fb      	ldr	r3, [r7, #12]
   17162:	4a09      	ldr	r2, [pc, #36]	; (17188 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   17164:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   17166:	2300      	movs	r3, #0
}
   17168:	4618      	mov	r0, r3
   1716a:	3714      	adds	r7, #20
   1716c:	46bd      	mov	sp, r7
   1716e:	bd90      	pop	{r4, r7, pc}
   17170:	2000d9f4 	.word	0x2000d9f4
   17174:	00016b45 	.word	0x00016b45
   17178:	000176d1 	.word	0x000176d1
   1717c:	00016e2d 	.word	0x00016e2d
   17180:	000168f5 	.word	0x000168f5
   17184:	00016591 	.word	0x00016591
   17188:	2000da08 	.word	0x2000da08
   1718c:	0001a539 	.word	0x0001a539

00017190 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh>:


    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
}

uint32_t CO_PDO_Class::Send_Simple_Run_Command(uint8_t *data,uint8_t node){
   17190:	b580      	push	{r7, lr}
   17192:	b086      	sub	sp, #24
   17194:	af00      	add	r7, sp, #0
   17196:	60f8      	str	r0, [r7, #12]
   17198:	60b9      	str	r1, [r7, #8]
   1719a:	4613      	mov	r3, r2
   1719c:	71fb      	strb	r3, [r7, #7]
	tx_buffer->ident=(CO_CAN_ID_RPDO_1+node)<<2;
   1719e:	68fb      	ldr	r3, [r7, #12]
   171a0:	681b      	ldr	r3, [r3, #0]
   171a2:	79fa      	ldrb	r2, [r7, #7]
   171a4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   171a8:	0092      	lsls	r2, r2, #2
   171aa:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
   171ac:	2300      	movs	r3, #0
   171ae:	75fb      	strb	r3, [r7, #23]
   171b0:	7dfb      	ldrb	r3, [r7, #23]
   171b2:	2b07      	cmp	r3, #7
   171b4:	dc0d      	bgt.n	171d2 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x42>
	{
		tx_buffer->data[i]=data[i];
   171b6:	68fb      	ldr	r3, [r7, #12]
   171b8:	681a      	ldr	r2, [r3, #0]
   171ba:	7dfb      	ldrb	r3, [r7, #23]
   171bc:	7df9      	ldrb	r1, [r7, #23]
   171be:	68b8      	ldr	r0, [r7, #8]
   171c0:	4401      	add	r1, r0
   171c2:	7809      	ldrb	r1, [r1, #0]
   171c4:	4413      	add	r3, r2
   171c6:	460a      	mov	r2, r1
   171c8:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 8; i++)
   171ca:	7dfb      	ldrb	r3, [r7, #23]
   171cc:	3301      	adds	r3, #1
   171ce:	75fb      	strb	r3, [r7, #23]
   171d0:	e7ee      	b.n	171b0 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x20>
	}
	tx_buffer->DLC=4;
   171d2:	68fb      	ldr	r3, [r7, #12]
   171d4:	681b      	ldr	r3, [r3, #0]
   171d6:	2204      	movs	r2, #4
   171d8:	711a      	strb	r2, [r3, #4]
	 return   canopen_driver->CAN_Send(tx_buffer);
   171da:	4b06      	ldr	r3, [pc, #24]	; (171f4 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x64>)
   171dc:	681a      	ldr	r2, [r3, #0]
   171de:	68fb      	ldr	r3, [r7, #12]
   171e0:	681b      	ldr	r3, [r3, #0]
   171e2:	4619      	mov	r1, r3
   171e4:	4610      	mov	r0, r2
   171e6:	4b04      	ldr	r3, [pc, #16]	; (171f8 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x68>)
   171e8:	4798      	blx	r3
   171ea:	4603      	mov	r3, r0
}
   171ec:	4618      	mov	r0, r3
   171ee:	3718      	adds	r7, #24
   171f0:	46bd      	mov	sp, r7
   171f2:	bd80      	pop	{r7, pc}
   171f4:	2000d9f4 	.word	0x2000d9f4
   171f8:	00015871 	.word	0x00015871

000171fc <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   171fc:	b580      	push	{r7, lr}
   171fe:	b082      	sub	sp, #8
   17200:	af00      	add	r7, sp, #0
   17202:	6078      	str	r0, [r7, #4]
   17204:	6878      	ldr	r0, [r7, #4]
   17206:	4b05      	ldr	r3, [pc, #20]	; (1721c <_ZN12CO_SDO_ClassC1Ev+0x20>)
   17208:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   1720a:	4a05      	ldr	r2, [pc, #20]	; (17220 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   1720c:	687b      	ldr	r3, [r7, #4]
   1720e:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   17210:	687b      	ldr	r3, [r7, #4]
   17212:	4618      	mov	r0, r3
   17214:	3708      	adds	r7, #8
   17216:	46bd      	mov	sp, r7
   17218:	bd80      	pop	{r7, pc}
   1721a:	bf00      	nop
   1721c:	00017ec5 	.word	0x00017ec5
   17220:	2000da30 	.word	0x2000da30

00017224 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   17224:	b580      	push	{r7, lr}
   17226:	b082      	sub	sp, #8
   17228:	af00      	add	r7, sp, #0
   1722a:	6078      	str	r0, [r7, #4]
   1722c:	6878      	ldr	r0, [r7, #4]
   1722e:	4b03      	ldr	r3, [pc, #12]	; (1723c <_ZN12CO_SDO_ClassD1Ev+0x18>)
   17230:	4798      	blx	r3
{
} //~CO_SDO_Class
   17232:	687b      	ldr	r3, [r7, #4]
   17234:	4618      	mov	r0, r3
   17236:	3708      	adds	r7, #8
   17238:	46bd      	mov	sp, r7
   1723a:	bd80      	pop	{r7, pc}
   1723c:	00017ed9 	.word	0x00017ed9

00017240 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   17240:	b480      	push	{r7}
   17242:	b087      	sub	sp, #28
   17244:	af00      	add	r7, sp, #0
   17246:	60f8      	str	r0, [r7, #12]
   17248:	60b9      	str	r1, [r7, #8]
   1724a:	607a      	str	r2, [r7, #4]
   1724c:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   1724e:	2300      	movs	r3, #0
   17250:	617b      	str	r3, [r7, #20]
   17252:	697a      	ldr	r2, [r7, #20]
   17254:	683b      	ldr	r3, [r7, #0]
   17256:	429a      	cmp	r2, r3
   17258:	d20b      	bcs.n	17272 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   1725a:	68ba      	ldr	r2, [r7, #8]
   1725c:	697b      	ldr	r3, [r7, #20]
   1725e:	4413      	add	r3, r2
   17260:	6879      	ldr	r1, [r7, #4]
   17262:	697a      	ldr	r2, [r7, #20]
   17264:	440a      	add	r2, r1
   17266:	7812      	ldrb	r2, [r2, #0]
   17268:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   1726a:	697b      	ldr	r3, [r7, #20]
   1726c:	3301      	adds	r3, #1
   1726e:	617b      	str	r3, [r7, #20]
   17270:	e7ef      	b.n	17252 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   17272:	bf00      	nop
   17274:	371c      	adds	r7, #28
   17276:	46bd      	mov	sp, r7
   17278:	bc80      	pop	{r7}
   1727a:	4770      	bx	lr

0001727c <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   1727c:	b480      	push	{r7}
   1727e:	b087      	sub	sp, #28
   17280:	af00      	add	r7, sp, #0
   17282:	6078      	str	r0, [r7, #4]
   17284:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   17286:	683b      	ldr	r3, [r7, #0]
   17288:	781b      	ldrb	r3, [r3, #0]
   1728a:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   1728c:	683b      	ldr	r3, [r7, #0]
   1728e:	3301      	adds	r3, #1
   17290:	781b      	ldrb	r3, [r3, #0]
   17292:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   17294:	683b      	ldr	r3, [r7, #0]
   17296:	3302      	adds	r3, #2
   17298:	781b      	ldrb	r3, [r3, #0]
   1729a:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   1729c:	683b      	ldr	r3, [r7, #0]
   1729e:	3303      	adds	r3, #3
   172a0:	781b      	ldrb	r3, [r3, #0]
   172a2:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   172a4:	68bb      	ldr	r3, [r7, #8]
}
   172a6:	4618      	mov	r0, r3
   172a8:	371c      	adds	r7, #28
   172aa:	46bd      	mov	sp, r7
   172ac:	bc80      	pop	{r7}
   172ae:	4770      	bx	lr

000172b0 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   172b0:	b480      	push	{r7}
   172b2:	b089      	sub	sp, #36	; 0x24
   172b4:	af00      	add	r7, sp, #0
   172b6:	60f8      	str	r0, [r7, #12]
   172b8:	60b9      	str	r1, [r7, #8]
   172ba:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   172bc:	687b      	ldr	r3, [r7, #4]
   172be:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   172c0:	7c3a      	ldrb	r2, [r7, #16]
   172c2:	68bb      	ldr	r3, [r7, #8]
   172c4:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   172c6:	68bb      	ldr	r3, [r7, #8]
   172c8:	3301      	adds	r3, #1
   172ca:	7c7a      	ldrb	r2, [r7, #17]
   172cc:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   172ce:	68bb      	ldr	r3, [r7, #8]
   172d0:	3302      	adds	r3, #2
   172d2:	7cba      	ldrb	r2, [r7, #18]
   172d4:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   172d6:	68bb      	ldr	r3, [r7, #8]
   172d8:	3303      	adds	r3, #3
   172da:	7cfa      	ldrb	r2, [r7, #19]
   172dc:	701a      	strb	r2, [r3, #0]
}
   172de:	bf00      	nop
   172e0:	3724      	adds	r7, #36	; 0x24
   172e2:	46bd      	mov	sp, r7
   172e4:	bc80      	pop	{r7}
   172e6:	4770      	bx	lr

000172e8 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   172e8:	b480      	push	{r7}
   172ea:	b087      	sub	sp, #28
   172ec:	af00      	add	r7, sp, #0
   172ee:	60f8      	str	r0, [r7, #12]
   172f0:	60b9      	str	r1, [r7, #8]
   172f2:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   172f4:	68bb      	ldr	r3, [r7, #8]
   172f6:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   172f8:	687b      	ldr	r3, [r7, #4]
   172fa:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   172fc:	693b      	ldr	r3, [r7, #16]
   172fe:	781a      	ldrb	r2, [r3, #0]
   17300:	697b      	ldr	r3, [r7, #20]
   17302:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17304:	697b      	ldr	r3, [r7, #20]
   17306:	3301      	adds	r3, #1
   17308:	693a      	ldr	r2, [r7, #16]
   1730a:	7852      	ldrb	r2, [r2, #1]
   1730c:	701a      	strb	r2, [r3, #0]
}
   1730e:	bf00      	nop
   17310:	371c      	adds	r7, #28
   17312:	46bd      	mov	sp, r7
   17314:	bc80      	pop	{r7}
   17316:	4770      	bx	lr

00017318 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   17318:	b480      	push	{r7}
   1731a:	b087      	sub	sp, #28
   1731c:	af00      	add	r7, sp, #0
   1731e:	60f8      	str	r0, [r7, #12]
   17320:	60b9      	str	r1, [r7, #8]
   17322:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   17324:	68bb      	ldr	r3, [r7, #8]
   17326:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   17328:	687b      	ldr	r3, [r7, #4]
   1732a:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   1732c:	693b      	ldr	r3, [r7, #16]
   1732e:	781a      	ldrb	r2, [r3, #0]
   17330:	697b      	ldr	r3, [r7, #20]
   17332:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17334:	697b      	ldr	r3, [r7, #20]
   17336:	3301      	adds	r3, #1
   17338:	693a      	ldr	r2, [r7, #16]
   1733a:	7852      	ldrb	r2, [r2, #1]
   1733c:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   1733e:	697b      	ldr	r3, [r7, #20]
   17340:	3302      	adds	r3, #2
   17342:	693a      	ldr	r2, [r7, #16]
   17344:	7892      	ldrb	r2, [r2, #2]
   17346:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   17348:	697b      	ldr	r3, [r7, #20]
   1734a:	3303      	adds	r3, #3
   1734c:	693a      	ldr	r2, [r7, #16]
   1734e:	78d2      	ldrb	r2, [r2, #3]
   17350:	701a      	strb	r2, [r3, #0]
}
   17352:	bf00      	nop
   17354:	371c      	adds	r7, #28
   17356:	46bd      	mov	sp, r7
   17358:	bc80      	pop	{r7}
   1735a:	4770      	bx	lr

0001735c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   1735c:	b580      	push	{r7, lr}
   1735e:	b086      	sub	sp, #24
   17360:	af00      	add	r7, sp, #0
   17362:	6078      	str	r0, [r7, #4]
   17364:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   17366:	687b      	ldr	r3, [r7, #4]
   17368:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   1736a:	683b      	ldr	r3, [r7, #0]
   1736c:	7d1b      	ldrb	r3, [r3, #20]
   1736e:	2b08      	cmp	r3, #8
   17370:	f040 80a4 	bne.w	174bc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   17374:	693b      	ldr	r3, [r7, #16]
   17376:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   1737a:	2b00      	cmp	r3, #0
   1737c:	f040 809e 	bne.w	174bc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   17380:	693b      	ldr	r3, [r7, #16]
   17382:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   17386:	2b15      	cmp	r3, #21
   17388:	d024      	beq.n	173d4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   1738a:	683b      	ldr	r3, [r7, #0]
   1738c:	7d5a      	ldrb	r2, [r3, #21]
   1738e:	693b      	ldr	r3, [r7, #16]
   17390:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   17392:	683b      	ldr	r3, [r7, #0]
   17394:	7d9a      	ldrb	r2, [r3, #22]
   17396:	693b      	ldr	r3, [r7, #16]
   17398:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   1739a:	683b      	ldr	r3, [r7, #0]
   1739c:	7dda      	ldrb	r2, [r3, #23]
   1739e:	693b      	ldr	r3, [r7, #16]
   173a0:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   173a2:	683b      	ldr	r3, [r7, #0]
   173a4:	7e1a      	ldrb	r2, [r3, #24]
   173a6:	693b      	ldr	r3, [r7, #16]
   173a8:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   173aa:	683b      	ldr	r3, [r7, #0]
   173ac:	7e5a      	ldrb	r2, [r3, #25]
   173ae:	693b      	ldr	r3, [r7, #16]
   173b0:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   173b2:	683b      	ldr	r3, [r7, #0]
   173b4:	7e9a      	ldrb	r2, [r3, #26]
   173b6:	693b      	ldr	r3, [r7, #16]
   173b8:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   173ba:	683b      	ldr	r3, [r7, #0]
   173bc:	7eda      	ldrb	r2, [r3, #27]
   173be:	693b      	ldr	r3, [r7, #16]
   173c0:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   173c2:	683b      	ldr	r3, [r7, #0]
   173c4:	7f1a      	ldrb	r2, [r3, #28]
   173c6:	693b      	ldr	r3, [r7, #16]
   173c8:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   173ca:	693b      	ldr	r3, [r7, #16]
   173cc:	2201      	movs	r2, #1
   173ce:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   173d2:	e067      	b.n	174a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   173d4:	683b      	ldr	r3, [r7, #0]
   173d6:	7d5a      	ldrb	r2, [r3, #21]
   173d8:	693b      	ldr	r3, [r7, #16]
   173da:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   173dc:	693b      	ldr	r3, [r7, #16]
   173de:	781b      	ldrb	r3, [r3, #0]
   173e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   173e4:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   173e6:	693b      	ldr	r3, [r7, #16]
   173e8:	2200      	movs	r2, #0
   173ea:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   173ec:	7bfa      	ldrb	r2, [r7, #15]
   173ee:	693b      	ldr	r3, [r7, #16]
   173f0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   173f4:	3301      	adds	r3, #1
   173f6:	429a      	cmp	r2, r3
   173f8:	d141      	bne.n	1747e <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   173fa:	693b      	ldr	r3, [r7, #16]
   173fc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17400:	3301      	adds	r3, #1
   17402:	b2da      	uxtb	r2, r3
   17404:	693b      	ldr	r3, [r7, #16]
   17406:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   1740a:	2301      	movs	r3, #1
   1740c:	75fb      	strb	r3, [r7, #23]
   1740e:	7dfb      	ldrb	r3, [r7, #23]
   17410:	2b07      	cmp	r3, #7
   17412:	dc1d      	bgt.n	17450 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   17414:	693b      	ldr	r3, [r7, #16]
   17416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   17418:	693b      	ldr	r3, [r7, #16]
   1741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1741c:	1c58      	adds	r0, r3, #1
   1741e:	6939      	ldr	r1, [r7, #16]
   17420:	6388      	str	r0, [r1, #56]	; 0x38
   17422:	4413      	add	r3, r2
   17424:	7dfa      	ldrb	r2, [r7, #23]
   17426:	6839      	ldr	r1, [r7, #0]
   17428:	440a      	add	r2, r1
   1742a:	7d52      	ldrb	r2, [r2, #21]
   1742c:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   1742e:	693b      	ldr	r3, [r7, #16]
   17430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17432:	2b1f      	cmp	r3, #31
   17434:	d908      	bls.n	17448 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17436:	693b      	ldr	r3, [r7, #16]
   17438:	2216      	movs	r2, #22
   1743a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   1743e:	693b      	ldr	r3, [r7, #16]
   17440:	2201      	movs	r2, #1
   17442:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   17446:	e003      	b.n	17450 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   17448:	7dfb      	ldrb	r3, [r7, #23]
   1744a:	3301      	adds	r3, #1
   1744c:	75fb      	strb	r3, [r7, #23]
   1744e:	e7de      	b.n	1740e <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   17450:	693b      	ldr	r3, [r7, #16]
   17452:	781b      	ldrb	r3, [r3, #0]
   17454:	b25b      	sxtb	r3, r3
   17456:	2b00      	cmp	r3, #0
   17458:	db08      	blt.n	1746c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   1745a:	693b      	ldr	r3, [r7, #16]
   1745c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17460:	461a      	mov	r2, r3
   17462:	693b      	ldr	r3, [r7, #16]
   17464:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   17468:	429a      	cmp	r2, r3
   1746a:	db1b      	blt.n	174a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   1746c:	693b      	ldr	r3, [r7, #16]
   1746e:	2216      	movs	r2, #22
   17470:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   17474:	693b      	ldr	r3, [r7, #16]
   17476:	2201      	movs	r2, #1
   17478:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   1747c:	e012      	b.n	174a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   1747e:	693b      	ldr	r3, [r7, #16]
   17480:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17484:	7bfa      	ldrb	r2, [r7, #15]
   17486:	429a      	cmp	r2, r3
   17488:	d00c      	beq.n	174a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   1748a:	693b      	ldr	r3, [r7, #16]
   1748c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17490:	2b00      	cmp	r3, #0
   17492:	d007      	beq.n	174a4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17494:	693b      	ldr	r3, [r7, #16]
   17496:	2216      	movs	r2, #22
   17498:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   1749c:	693b      	ldr	r3, [r7, #16]
   1749e:	2201      	movs	r2, #1
   174a0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   174a4:	693b      	ldr	r3, [r7, #16]
   174a6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   174aa:	2b00      	cmp	r3, #0
   174ac:	d006      	beq.n	174bc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   174ae:	693b      	ldr	r3, [r7, #16]
   174b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   174b2:	2b00      	cmp	r3, #0
   174b4:	d002      	beq.n	174bc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   174b6:	693b      	ldr	r3, [r7, #16]
   174b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   174ba:	4798      	blx	r3
        }
    }
}
   174bc:	bf00      	nop
   174be:	3718      	adds	r7, #24
   174c0:	46bd      	mov	sp, r7
   174c2:	bd80      	pop	{r7, pc}

000174c4 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   174c4:	b580      	push	{r7, lr}
   174c6:	b086      	sub	sp, #24
   174c8:	af00      	add	r7, sp, #0
   174ca:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   174cc:	2300      	movs	r3, #0
   174ce:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   174d0:	687b      	ldr	r3, [r7, #4]
   174d2:	681b      	ldr	r3, [r3, #0]
   174d4:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   174d6:	4b12      	ldr	r3, [pc, #72]	; (17520 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   174d8:	681b      	ldr	r3, [r3, #0]
   174da:	1d1a      	adds	r2, r3, #4
   174dc:	687b      	ldr	r3, [r7, #4]
   174de:	685b      	ldr	r3, [r3, #4]
   174e0:	4619      	mov	r1, r3
   174e2:	4610      	mov	r0, r2
   174e4:	4b0f      	ldr	r3, [pc, #60]	; (17524 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   174e6:	4798      	blx	r3
   174e8:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   174ea:	687b      	ldr	r3, [r7, #4]
   174ec:	7f5b      	ldrb	r3, [r3, #29]
   174ee:	2b00      	cmp	r3, #0
   174f0:	d010      	beq.n	17514 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   174f2:	687b      	ldr	r3, [r7, #4]
   174f4:	7f1b      	ldrb	r3, [r3, #28]
   174f6:	2b00      	cmp	r3, #0
   174f8:	d00c      	beq.n	17514 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
   174fa:	4b09      	ldr	r3, [pc, #36]	; (17520 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   174fc:	681b      	ldr	r3, [r3, #0]
   174fe:	1d18      	adds	r0, r3, #4
   17500:	687b      	ldr	r3, [r7, #4]
   17502:	6859      	ldr	r1, [r3, #4]
   17504:	693b      	ldr	r3, [r7, #16]
   17506:	781b      	ldrb	r3, [r3, #0]
   17508:	461a      	mov	r2, r3
   1750a:	68fb      	ldr	r3, [r7, #12]
   1750c:	4413      	add	r3, r2
   1750e:	461a      	mov	r2, r3
   17510:	4b05      	ldr	r3, [pc, #20]	; (17528 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   17512:	4798      	blx	r3
    }

    return ret;
   17514:	697b      	ldr	r3, [r7, #20]
}
   17516:	4618      	mov	r0, r3
   17518:	3718      	adds	r7, #24
   1751a:	46bd      	mov	sp, r7
   1751c:	bd80      	pop	{r7, pc}
   1751e:	bf00      	nop
   17520:	2000d9f4 	.word	0x2000d9f4
   17524:	0001727d 	.word	0x0001727d
   17528:	000172b1 	.word	0x000172b1

0001752c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   1752c:	b5b0      	push	{r4, r5, r7, lr}
   1752e:	b08a      	sub	sp, #40	; 0x28
   17530:	af04      	add	r7, sp, #16
   17532:	60f8      	str	r0, [r7, #12]
   17534:	60b9      	str	r1, [r7, #8]
   17536:	607a      	str	r2, [r7, #4]
   17538:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   1753a:	68bb      	ldr	r3, [r7, #8]
   1753c:	2b00      	cmp	r3, #0
   1753e:	d005      	beq.n	1754c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   17540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17542:	2b00      	cmp	r3, #0
   17544:	d002      	beq.n	1754c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   17546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17548:	2b00      	cmp	r3, #0
   1754a:	d102      	bne.n	17552 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   1754c:	f04f 33ff 	mov.w	r3, #4294967295
   17550:	e0ac      	b.n	176ac <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   17552:	4a58      	ldr	r2, [pc, #352]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17554:	68bb      	ldr	r3, [r7, #8]
   17556:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   17558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1755a:	2b00      	cmp	r3, #0
   1755c:	d13b      	bne.n	175d6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   1755e:	4b55      	ldr	r3, [pc, #340]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17560:	681b      	ldr	r3, [r3, #0]
   17562:	2201      	movs	r2, #1
   17564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   17568:	4b52      	ldr	r3, [pc, #328]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1756a:	681b      	ldr	r3, [r3, #0]
   1756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1756e:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   17570:	4b50      	ldr	r3, [pc, #320]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17572:	681b      	ldr	r3, [r3, #0]
   17574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17576:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   17578:	4b4e      	ldr	r3, [pc, #312]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1757a:	681b      	ldr	r3, [r3, #0]
   1757c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1757e:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   17580:	2300      	movs	r3, #0
   17582:	617b      	str	r3, [r7, #20]
   17584:	697a      	ldr	r2, [r7, #20]
   17586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17588:	429a      	cmp	r2, r3
   1758a:	d238      	bcs.n	175fe <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   1758c:	4b49      	ldr	r3, [pc, #292]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1758e:	681b      	ldr	r3, [r3, #0]
   17590:	6b59      	ldr	r1, [r3, #52]	; 0x34
   17592:	697a      	ldr	r2, [r7, #20]
   17594:	4613      	mov	r3, r2
   17596:	005b      	lsls	r3, r3, #1
   17598:	4413      	add	r3, r2
   1759a:	009b      	lsls	r3, r3, #2
   1759c:	440b      	add	r3, r1
   1759e:	2200      	movs	r2, #0
   175a0:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   175a2:	4b44      	ldr	r3, [pc, #272]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   175a4:	681b      	ldr	r3, [r3, #0]
   175a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   175a8:	697a      	ldr	r2, [r7, #20]
   175aa:	4613      	mov	r3, r2
   175ac:	005b      	lsls	r3, r3, #1
   175ae:	4413      	add	r3, r2
   175b0:	009b      	lsls	r3, r3, #2
   175b2:	440b      	add	r3, r1
   175b4:	2200      	movs	r2, #0
   175b6:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   175b8:	4b3e      	ldr	r3, [pc, #248]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   175ba:	681b      	ldr	r3, [r3, #0]
   175bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   175be:	697a      	ldr	r2, [r7, #20]
   175c0:	4613      	mov	r3, r2
   175c2:	005b      	lsls	r3, r3, #1
   175c4:	4413      	add	r3, r2
   175c6:	009b      	lsls	r3, r3, #2
   175c8:	440b      	add	r3, r1
   175ca:	2200      	movs	r2, #0
   175cc:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   175ce:	697b      	ldr	r3, [r7, #20]
   175d0:	3301      	adds	r3, #1
   175d2:	617b      	str	r3, [r7, #20]
   175d4:	e7d6      	b.n	17584 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   175d6:	4b37      	ldr	r3, [pc, #220]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   175d8:	681b      	ldr	r3, [r3, #0]
   175da:	2200      	movs	r2, #0
   175dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   175e0:	4b34      	ldr	r3, [pc, #208]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   175e2:	681b      	ldr	r3, [r3, #0]
   175e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   175e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   175e8:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   175ea:	4b32      	ldr	r3, [pc, #200]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   175ec:	681b      	ldr	r3, [r3, #0]
   175ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   175f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
   175f2:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   175f4:	4b2f      	ldr	r3, [pc, #188]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   175f6:	681b      	ldr	r3, [r3, #0]
   175f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   175fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
   175fc:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   175fe:	4b2d      	ldr	r3, [pc, #180]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17600:	681b      	ldr	r3, [r3, #0]
   17602:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   17606:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   1760a:	4b2a      	ldr	r3, [pc, #168]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1760c:	681b      	ldr	r3, [r3, #0]
   1760e:	2200      	movs	r2, #0
   17610:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   17614:	4b27      	ldr	r3, [pc, #156]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17616:	681b      	ldr	r3, [r3, #0]
   17618:	2200      	movs	r2, #0
   1761a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   1761e:	4b25      	ldr	r3, [pc, #148]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17620:	681b      	ldr	r3, [r3, #0]
   17622:	2200      	movs	r2, #0
   17624:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   17626:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17628:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   1762c:	d10f      	bne.n	1764e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   1762e:	4b22      	ldr	r3, [pc, #136]	; (176b8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17630:	681b      	ldr	r3, [r3, #0]
   17632:	1d18      	adds	r0, r3, #4
   17634:	4b1f      	ldr	r3, [pc, #124]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	f103 0268 	add.w	r2, r3, #104	; 0x68
   1763c:	2300      	movs	r3, #0
   1763e:	9301      	str	r3, [sp, #4]
   17640:	2300      	movs	r3, #0
   17642:	9300      	str	r3, [sp, #0]
   17644:	4613      	mov	r3, r2
   17646:	4a1d      	ldr	r2, [pc, #116]	; (176bc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   17648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1764a:	4c1d      	ldr	r4, [pc, #116]	; (176c0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   1764c:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   1764e:	687b      	ldr	r3, [r7, #4]
   17650:	2b00      	cmp	r3, #0
   17652:	db02      	blt.n	1765a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   17654:	683b      	ldr	r3, [r7, #0]
   17656:	2b00      	cmp	r3, #0
   17658:	da03      	bge.n	17662 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   1765a:	2300      	movs	r3, #0
   1765c:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   1765e:	2300      	movs	r3, #0
   17660:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
   17662:	4b15      	ldr	r3, [pc, #84]	; (176b8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17664:	6818      	ldr	r0, [r3, #0]
   17666:	4b13      	ldr	r3, [pc, #76]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17668:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
   1766a:	4a16      	ldr	r2, [pc, #88]	; (176c4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   1766c:	9202      	str	r2, [sp, #8]
   1766e:	9301      	str	r3, [sp, #4]
   17670:	2300      	movs	r3, #0
   17672:	9300      	str	r3, [sp, #0]
   17674:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17678:	687a      	ldr	r2, [r7, #4]
   1767a:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1767c:	4c12      	ldr	r4, [pc, #72]	; (176c8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   1767e:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   17680:	4b0c      	ldr	r3, [pc, #48]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17682:	681b      	ldr	r3, [r3, #0]
   17684:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   1768a:	4b0a      	ldr	r3, [pc, #40]	; (176b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1768c:	681c      	ldr	r4, [r3, #0]
   1768e:	4b0a      	ldr	r3, [pc, #40]	; (176b8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17690:	6818      	ldr	r0, [r3, #0]
   17692:	2300      	movs	r3, #0
   17694:	9301      	str	r3, [sp, #4]
   17696:	2308      	movs	r3, #8
   17698:	9300      	str	r3, [sp, #0]
   1769a:	2300      	movs	r3, #0
   1769c:	683a      	ldr	r2, [r7, #0]
   1769e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   176a0:	4d0a      	ldr	r5, [pc, #40]	; (176cc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
   176a2:	47a8      	blx	r5
   176a4:	4603      	mov	r3, r0
   176a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   176aa:	2300      	movs	r3, #0
}
   176ac:	4618      	mov	r0, r3
   176ae:	3718      	adds	r7, #24
   176b0:	46bd      	mov	sp, r7
   176b2:	bdb0      	pop	{r4, r5, r7, pc}
   176b4:	2000da34 	.word	0x2000da34
   176b8:	2000d9f4 	.word	0x2000d9f4
   176bc:	000174c5 	.word	0x000174c5
   176c0:	000176d1 	.word	0x000176d1
   176c4:	0001735d 	.word	0x0001735d
   176c8:	000156c5 	.word	0x000156c5
   176cc:	000157c5 	.word	0x000157c5

000176d0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   176d0:	b580      	push	{r7, lr}
   176d2:	b088      	sub	sp, #32
   176d4:	af00      	add	r7, sp, #0
   176d6:	60f8      	str	r0, [r7, #12]
   176d8:	60b9      	str	r1, [r7, #8]
   176da:	607a      	str	r2, [r7, #4]
   176dc:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
   176de:	4b28      	ldr	r3, [pc, #160]	; (17780 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   176e0:	681b      	ldr	r3, [r3, #0]
   176e2:	3304      	adds	r3, #4
   176e4:	68b9      	ldr	r1, [r7, #8]
   176e6:	4618      	mov	r0, r3
   176e8:	4b26      	ldr	r3, [pc, #152]	; (17784 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   176ea:	4798      	blx	r3
   176ec:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   176ee:	69bb      	ldr	r3, [r7, #24]
   176f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   176f4:	4293      	cmp	r3, r2
   176f6:	d83e      	bhi.n	17776 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   176f8:	4b23      	ldr	r3, [pc, #140]	; (17788 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   176fa:	681b      	ldr	r3, [r3, #0]
   176fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   176fe:	69ba      	ldr	r2, [r7, #24]
   17700:	4613      	mov	r3, r2
   17702:	005b      	lsls	r3, r3, #1
   17704:	4413      	add	r3, r2
   17706:	009b      	lsls	r3, r3, #2
   17708:	440b      	add	r3, r1
   1770a:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   1770c:	4b1e      	ldr	r3, [pc, #120]	; (17788 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   1770e:	681b      	ldr	r3, [r3, #0]
   17710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17712:	69ba      	ldr	r2, [r7, #24]
   17714:	4613      	mov	r3, r2
   17716:	009b      	lsls	r3, r3, #2
   17718:	4413      	add	r3, r2
   1771a:	009b      	lsls	r3, r3, #2
   1771c:	440b      	add	r3, r1
   1771e:	791b      	ldrb	r3, [r3, #4]
   17720:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   17722:	697b      	ldr	r3, [r7, #20]
   17724:	687a      	ldr	r2, [r7, #4]
   17726:	601a      	str	r2, [r3, #0]
        ext->object = object;
   17728:	697b      	ldr	r3, [r7, #20]
   1772a:	683a      	ldr	r2, [r7, #0]
   1772c:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   1772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17730:	2b00      	cmp	r3, #0
   17732:	d01b      	beq.n	1776c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   17734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   17738:	2b00      	cmp	r3, #0
   1773a:	d017      	beq.n	1776c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   1773c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   17740:	7cfb      	ldrb	r3, [r7, #19]
   17742:	429a      	cmp	r2, r3
   17744:	d112      	bne.n	1776c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   17746:	697b      	ldr	r3, [r7, #20]
   17748:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1774a:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   1774c:	2300      	movs	r3, #0
   1774e:	61fb      	str	r3, [r7, #28]
   17750:	7cfa      	ldrb	r2, [r7, #19]
   17752:	69fb      	ldr	r3, [r7, #28]
   17754:	429a      	cmp	r2, r3
   17756:	d30d      	bcc.n	17774 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   17758:	697b      	ldr	r3, [r7, #20]
   1775a:	689a      	ldr	r2, [r3, #8]
   1775c:	69fb      	ldr	r3, [r7, #28]
   1775e:	4413      	add	r3, r2
   17760:	2200      	movs	r2, #0
   17762:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   17764:	69fb      	ldr	r3, [r7, #28]
   17766:	3301      	adds	r3, #1
   17768:	61fb      	str	r3, [r7, #28]
   1776a:	e7f1      	b.n	17750 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   1776c:	697b      	ldr	r3, [r7, #20]
   1776e:	2200      	movs	r2, #0
   17770:	609a      	str	r2, [r3, #8]
        }
    }
}
   17772:	e000      	b.n	17776 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   17774:	bf00      	nop
}
   17776:	bf00      	nop
   17778:	3720      	adds	r7, #32
   1777a:	46bd      	mov	sp, r7
   1777c:	bd80      	pop	{r7, pc}
   1777e:	bf00      	nop
   17780:	2000d9f4 	.word	0x2000d9f4
   17784:	0001778d 	.word	0x0001778d
   17788:	2000da34 	.word	0x2000da34

0001778c <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   1778c:	b480      	push	{r7}
   1778e:	b087      	sub	sp, #28
   17790:	af00      	add	r7, sp, #0
   17792:	6078      	str	r0, [r7, #4]
   17794:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   17796:	2300      	movs	r3, #0
   17798:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   1779a:	4b26      	ldr	r3, [pc, #152]	; (17834 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   1779c:	681b      	ldr	r3, [r3, #0]
   1779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   177a0:	3b01      	subs	r3, #1
   177a2:	613b      	str	r3, [r7, #16]
    while(min < max){
   177a4:	697a      	ldr	r2, [r7, #20]
   177a6:	693b      	ldr	r3, [r7, #16]
   177a8:	429a      	cmp	r2, r3
   177aa:	d227      	bcs.n	177fc <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   177ac:	697a      	ldr	r2, [r7, #20]
   177ae:	693b      	ldr	r3, [r7, #16]
   177b0:	4413      	add	r3, r2
   177b2:	085b      	lsrs	r3, r3, #1
   177b4:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   177b6:	4b1f      	ldr	r3, [pc, #124]	; (17834 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   177b8:	681b      	ldr	r3, [r3, #0]
   177ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   177bc:	68fa      	ldr	r2, [r7, #12]
   177be:	4613      	mov	r3, r2
   177c0:	009b      	lsls	r3, r3, #2
   177c2:	4413      	add	r3, r2
   177c4:	009b      	lsls	r3, r3, #2
   177c6:	440b      	add	r3, r1
   177c8:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   177ca:	68bb      	ldr	r3, [r7, #8]
   177cc:	681a      	ldr	r2, [r3, #0]
   177ce:	683b      	ldr	r3, [r7, #0]
   177d0:	429a      	cmp	r2, r3
   177d2:	d101      	bne.n	177d8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   177d4:	68fb      	ldr	r3, [r7, #12]
   177d6:	e028      	b.n	1782a <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   177d8:	68bb      	ldr	r3, [r7, #8]
   177da:	681a      	ldr	r2, [r3, #0]
   177dc:	683b      	ldr	r3, [r7, #0]
   177de:	429a      	cmp	r2, r3
   177e0:	d908      	bls.n	177f4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   177e2:	68fb      	ldr	r3, [r7, #12]
   177e4:	613b      	str	r3, [r7, #16]
            if(max) max--;
   177e6:	693b      	ldr	r3, [r7, #16]
   177e8:	2b00      	cmp	r3, #0
   177ea:	d0db      	beq.n	177a4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   177ec:	693b      	ldr	r3, [r7, #16]
   177ee:	3b01      	subs	r3, #1
   177f0:	613b      	str	r3, [r7, #16]
   177f2:	e7d7      	b.n	177a4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   177f4:	68fb      	ldr	r3, [r7, #12]
   177f6:	3301      	adds	r3, #1
   177f8:	617b      	str	r3, [r7, #20]
    while(min < max){
   177fa:	e7d3      	b.n	177a4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   177fc:	697a      	ldr	r2, [r7, #20]
   177fe:	693b      	ldr	r3, [r7, #16]
   17800:	429a      	cmp	r2, r3
   17802:	d110      	bne.n	17826 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   17804:	4b0b      	ldr	r3, [pc, #44]	; (17834 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   17806:	681b      	ldr	r3, [r3, #0]
   17808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1780a:	697a      	ldr	r2, [r7, #20]
   1780c:	4613      	mov	r3, r2
   1780e:	009b      	lsls	r3, r3, #2
   17810:	4413      	add	r3, r2
   17812:	009b      	lsls	r3, r3, #2
   17814:	440b      	add	r3, r1
   17816:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   17818:	68bb      	ldr	r3, [r7, #8]
   1781a:	681a      	ldr	r2, [r3, #0]
   1781c:	683b      	ldr	r3, [r7, #0]
   1781e:	429a      	cmp	r2, r3
   17820:	d101      	bne.n	17826 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   17822:	697b      	ldr	r3, [r7, #20]
   17824:	e001      	b.n	1782a <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   17826:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   1782a:	4618      	mov	r0, r3
   1782c:	371c      	adds	r7, #28
   1782e:	46bd      	mov	sp, r7
   17830:	bc80      	pop	{r7}
   17832:	4770      	bx	lr
   17834:	2000da34 	.word	0x2000da34

00017838 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   17838:	b480      	push	{r7}
   1783a:	b087      	sub	sp, #28
   1783c:	af00      	add	r7, sp, #0
   1783e:	60f8      	str	r0, [r7, #12]
   17840:	60b9      	str	r1, [r7, #8]
   17842:	4613      	mov	r3, r2
   17844:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   17846:	4b25      	ldr	r3, [pc, #148]	; (178dc <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
   17848:	681b      	ldr	r3, [r3, #0]
   1784a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1784c:	68ba      	ldr	r2, [r7, #8]
   1784e:	4613      	mov	r3, r2
   17850:	009b      	lsls	r3, r3, #2
   17852:	4413      	add	r3, r2
   17854:	009b      	lsls	r3, r3, #2
   17856:	440b      	add	r3, r1
   17858:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   1785a:	68bb      	ldr	r3, [r7, #8]
   1785c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17860:	4293      	cmp	r3, r2
   17862:	d101      	bne.n	17868 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   17864:	2300      	movs	r3, #0
   17866:	e034      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   17868:	697b      	ldr	r3, [r7, #20]
   1786a:	791b      	ldrb	r3, [r3, #4]
   1786c:	2b00      	cmp	r3, #0
   1786e:	d108      	bne.n	17882 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   17870:	697b      	ldr	r3, [r7, #20]
   17872:	691b      	ldr	r3, [r3, #16]
   17874:	2b00      	cmp	r3, #0
   17876:	d101      	bne.n	1787c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   17878:	2320      	movs	r3, #32
   1787a:	e02a      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   1787c:	697b      	ldr	r3, [r7, #20]
   1787e:	68db      	ldr	r3, [r3, #12]
   17880:	e027      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   17882:	697b      	ldr	r3, [r7, #20]
   17884:	689b      	ldr	r3, [r3, #8]
   17886:	2b00      	cmp	r3, #0
   17888:	d00d      	beq.n	178a6 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   1788a:	79fb      	ldrb	r3, [r7, #7]
   1788c:	2b00      	cmp	r3, #0
   1788e:	d101      	bne.n	17894 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   17890:	2301      	movs	r3, #1
   17892:	e01e      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   17894:	697b      	ldr	r3, [r7, #20]
   17896:	691b      	ldr	r3, [r3, #16]
   17898:	2b00      	cmp	r3, #0
   1789a:	d101      	bne.n	178a0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   1789c:	2320      	movs	r3, #32
   1789e:	e018      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   178a0:	697b      	ldr	r3, [r7, #20]
   178a2:	68db      	ldr	r3, [r3, #12]
   178a4:	e015      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   178a6:	697b      	ldr	r3, [r7, #20]
   178a8:	6919      	ldr	r1, [r3, #16]
   178aa:	79fa      	ldrb	r2, [r7, #7]
   178ac:	4613      	mov	r3, r2
   178ae:	005b      	lsls	r3, r3, #1
   178b0:	4413      	add	r3, r2
   178b2:	009b      	lsls	r3, r3, #2
   178b4:	440b      	add	r3, r1
   178b6:	681b      	ldr	r3, [r3, #0]
   178b8:	2b00      	cmp	r3, #0
   178ba:	d101      	bne.n	178c0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   178bc:	2320      	movs	r3, #32
   178be:	e008      	b.n	178d2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   178c0:	697b      	ldr	r3, [r7, #20]
   178c2:	6919      	ldr	r1, [r3, #16]
   178c4:	79fa      	ldrb	r2, [r7, #7]
   178c6:	4613      	mov	r3, r2
   178c8:	005b      	lsls	r3, r3, #1
   178ca:	4413      	add	r3, r2
   178cc:	009b      	lsls	r3, r3, #2
   178ce:	440b      	add	r3, r1
   178d0:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   178d2:	4618      	mov	r0, r3
   178d4:	371c      	adds	r7, #28
   178d6:	46bd      	mov	sp, r7
   178d8:	bc80      	pop	{r7}
   178da:	4770      	bx	lr
   178dc:	2000da34 	.word	0x2000da34

000178e0 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   178e0:	b480      	push	{r7}
   178e2:	b089      	sub	sp, #36	; 0x24
   178e4:	af00      	add	r7, sp, #0
   178e6:	60f8      	str	r0, [r7, #12]
   178e8:	60b9      	str	r1, [r7, #8]
   178ea:	4613      	mov	r3, r2
   178ec:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   178ee:	4b27      	ldr	r3, [pc, #156]	; (1798c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
   178f0:	681b      	ldr	r3, [r3, #0]
   178f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   178f4:	68ba      	ldr	r2, [r7, #8]
   178f6:	4613      	mov	r3, r2
   178f8:	009b      	lsls	r3, r3, #2
   178fa:	4413      	add	r3, r2
   178fc:	009b      	lsls	r3, r3, #2
   178fe:	440b      	add	r3, r1
   17900:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   17902:	68bb      	ldr	r3, [r7, #8]
   17904:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17908:	4293      	cmp	r3, r2
   1790a:	d101      	bne.n	17910 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   1790c:	2300      	movs	r3, #0
   1790e:	e037      	b.n	17980 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   17910:	697b      	ldr	r3, [r7, #20]
   17912:	791b      	ldrb	r3, [r3, #4]
   17914:	2b00      	cmp	r3, #0
   17916:	d102      	bne.n	1791e <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   17918:	697b      	ldr	r3, [r7, #20]
   1791a:	689b      	ldr	r3, [r3, #8]
   1791c:	e030      	b.n	17980 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   1791e:	697b      	ldr	r3, [r7, #20]
   17920:	689b      	ldr	r3, [r3, #8]
   17922:	2b00      	cmp	r3, #0
   17924:	d023      	beq.n	1796e <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   17926:	2300      	movs	r3, #0
   17928:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   1792a:	697b      	ldr	r3, [r7, #20]
   1792c:	689b      	ldr	r3, [r3, #8]
   1792e:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   17930:	697b      	ldr	r3, [r7, #20]
   17932:	681b      	ldr	r3, [r3, #0]
   17934:	f241 0203 	movw	r2, #4099	; 0x1003
   17938:	4293      	cmp	r3, r2
   1793a:	d108      	bne.n	1794e <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   1793c:	79fb      	ldrb	r3, [r7, #7]
   1793e:	2b00      	cmp	r3, #0
   17940:	d105      	bne.n	1794e <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   17942:	2301      	movs	r3, #1
   17944:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   17946:	69bb      	ldr	r3, [r7, #24]
   17948:	f043 0308 	orr.w	r3, r3, #8
   1794c:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   1794e:	79fb      	ldrb	r3, [r7, #7]
   17950:	2b00      	cmp	r3, #0
   17952:	d10a      	bne.n	1796a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   17954:	7ffb      	ldrb	r3, [r7, #31]
   17956:	2b00      	cmp	r3, #0
   17958:	d107      	bne.n	1796a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   1795a:	69bb      	ldr	r3, [r7, #24]
   1795c:	f023 0318 	bic.w	r3, r3, #24
   17960:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   17962:	69bb      	ldr	r3, [r7, #24]
   17964:	f043 0304 	orr.w	r3, r3, #4
   17968:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   1796a:	69bb      	ldr	r3, [r7, #24]
   1796c:	e008      	b.n	17980 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   1796e:	697b      	ldr	r3, [r7, #20]
   17970:	6919      	ldr	r1, [r3, #16]
   17972:	79fa      	ldrb	r2, [r7, #7]
   17974:	4613      	mov	r3, r2
   17976:	005b      	lsls	r3, r3, #1
   17978:	4413      	add	r3, r2
   1797a:	009b      	lsls	r3, r3, #2
   1797c:	440b      	add	r3, r1
   1797e:	685b      	ldr	r3, [r3, #4]
    }
}
   17980:	4618      	mov	r0, r3
   17982:	3724      	adds	r7, #36	; 0x24
   17984:	46bd      	mov	sp, r7
   17986:	bc80      	pop	{r7}
   17988:	4770      	bx	lr
   1798a:	bf00      	nop
   1798c:	2000da34 	.word	0x2000da34

00017990 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   17990:	b480      	push	{r7}
   17992:	b087      	sub	sp, #28
   17994:	af00      	add	r7, sp, #0
   17996:	60f8      	str	r0, [r7, #12]
   17998:	60b9      	str	r1, [r7, #8]
   1799a:	4613      	mov	r3, r2
   1799c:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   1799e:	4b20      	ldr	r3, [pc, #128]	; (17a20 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
   179a0:	681b      	ldr	r3, [r3, #0]
   179a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   179a4:	68ba      	ldr	r2, [r7, #8]
   179a6:	4613      	mov	r3, r2
   179a8:	009b      	lsls	r3, r3, #2
   179aa:	4413      	add	r3, r2
   179ac:	009b      	lsls	r3, r3, #2
   179ae:	440b      	add	r3, r1
   179b0:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   179b2:	68bb      	ldr	r3, [r7, #8]
   179b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   179b8:	4293      	cmp	r3, r2
   179ba:	d101      	bne.n	179c0 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   179bc:	2300      	movs	r3, #0
   179be:	e02a      	b.n	17a16 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   179c0:	697b      	ldr	r3, [r7, #20]
   179c2:	791b      	ldrb	r3, [r3, #4]
   179c4:	2b00      	cmp	r3, #0
   179c6:	d102      	bne.n	179ce <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   179c8:	697b      	ldr	r3, [r7, #20]
   179ca:	691b      	ldr	r3, [r3, #16]
   179cc:	e023      	b.n	17a16 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   179ce:	697b      	ldr	r3, [r7, #20]
   179d0:	689b      	ldr	r3, [r3, #8]
   179d2:	2b00      	cmp	r3, #0
   179d4:	d016      	beq.n	17a04 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   179d6:	79fb      	ldrb	r3, [r7, #7]
   179d8:	2b00      	cmp	r3, #0
   179da:	d102      	bne.n	179e2 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   179dc:	697b      	ldr	r3, [r7, #20]
   179de:	3304      	adds	r3, #4
   179e0:	e019      	b.n	17a16 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   179e2:	697b      	ldr	r3, [r7, #20]
   179e4:	691b      	ldr	r3, [r3, #16]
   179e6:	2b00      	cmp	r3, #0
   179e8:	d101      	bne.n	179ee <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   179ea:	2300      	movs	r3, #0
   179ec:	e013      	b.n	17a16 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   179ee:	697b      	ldr	r3, [r7, #20]
   179f0:	691a      	ldr	r2, [r3, #16]
   179f2:	79fb      	ldrb	r3, [r7, #7]
   179f4:	3b01      	subs	r3, #1
   179f6:	4619      	mov	r1, r3
   179f8:	697b      	ldr	r3, [r7, #20]
   179fa:	68db      	ldr	r3, [r3, #12]
   179fc:	fb03 f301 	mul.w	r3, r3, r1
   17a00:	4413      	add	r3, r2
   17a02:	e008      	b.n	17a16 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   17a04:	697b      	ldr	r3, [r7, #20]
   17a06:	6919      	ldr	r1, [r3, #16]
   17a08:	79fa      	ldrb	r2, [r7, #7]
   17a0a:	4613      	mov	r3, r2
   17a0c:	005b      	lsls	r3, r3, #1
   17a0e:	4413      	add	r3, r2
   17a10:	009b      	lsls	r3, r3, #2
   17a12:	440b      	add	r3, r1
   17a14:	681b      	ldr	r3, [r3, #0]
    }
}
   17a16:	4618      	mov	r0, r3
   17a18:	371c      	adds	r7, #28
   17a1a:	46bd      	mov	sp, r7
   17a1c:	bc80      	pop	{r7}
   17a1e:	4770      	bx	lr
   17a20:	2000da34 	.word	0x2000da34

00017a24 <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   17a24:	b480      	push	{r7}
   17a26:	b083      	sub	sp, #12
   17a28:	af00      	add	r7, sp, #0
   17a2a:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   17a2c:	687b      	ldr	r3, [r7, #4]
   17a2e:	4618      	mov	r0, r3
   17a30:	370c      	adds	r7, #12
   17a32:	46bd      	mov	sp, r7
   17a34:	bc80      	pop	{r7}
   17a36:	4770      	bx	lr

00017a38 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   17a38:	b480      	push	{r7}
   17a3a:	b083      	sub	sp, #12
   17a3c:	af00      	add	r7, sp, #0
   17a3e:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   17a40:	687b      	ldr	r3, [r7, #4]
   17a42:	4618      	mov	r0, r3
   17a44:	370c      	adds	r7, #12
   17a46:	46bd      	mov	sp, r7
   17a48:	bc80      	pop	{r7}
   17a4a:	4770      	bx	lr

00017a4c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   17a4c:	b480      	push	{r7}
   17a4e:	b085      	sub	sp, #20
   17a50:	af00      	add	r7, sp, #0
   17a52:	6078      	str	r0, [r7, #4]
   17a54:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   17a56:	687b      	ldr	r3, [r7, #4]
   17a58:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   17a5a:	68fb      	ldr	r3, [r7, #12]
   17a5c:	685b      	ldr	r3, [r3, #4]
   17a5e:	781b      	ldrb	r3, [r3, #0]
   17a60:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   17a62:	7afb      	ldrb	r3, [r7, #11]
   17a64:	2b05      	cmp	r3, #5
   17a66:	d002      	beq.n	17a6e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   17a68:	7afb      	ldrb	r3, [r7, #11]
   17a6a:	2b7f      	cmp	r3, #127	; 0x7f
   17a6c:	d132      	bne.n	17ad4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   17a6e:	68fb      	ldr	r3, [r7, #12]
   17a70:	7e1b      	ldrb	r3, [r3, #24]
   17a72:	2b00      	cmp	r3, #0
   17a74:	d10e      	bne.n	17a94 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   17a76:	683b      	ldr	r3, [r7, #0]
   17a78:	7d1b      	ldrb	r3, [r3, #20]
   17a7a:	2b00      	cmp	r3, #0
   17a7c:	d103      	bne.n	17a86 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   17a7e:	68fb      	ldr	r3, [r7, #12]
   17a80:	2201      	movs	r2, #1
   17a82:	769a      	strb	r2, [r3, #26]
   17a84:	e018      	b.n	17ab8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   17a86:	683b      	ldr	r3, [r7, #0]
   17a88:	7d1b      	ldrb	r3, [r3, #20]
   17a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   17a8e:	68fb      	ldr	r3, [r7, #12]
   17a90:	625a      	str	r2, [r3, #36]	; 0x24
   17a92:	e011      	b.n	17ab8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   17a94:	683b      	ldr	r3, [r7, #0]
   17a96:	7d1b      	ldrb	r3, [r3, #20]
   17a98:	2b01      	cmp	r3, #1
   17a9a:	d107      	bne.n	17aac <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   17a9c:	683b      	ldr	r3, [r7, #0]
   17a9e:	7d5a      	ldrb	r2, [r3, #21]
   17aa0:	68fb      	ldr	r3, [r7, #12]
   17aa2:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   17aa4:	68fb      	ldr	r3, [r7, #12]
   17aa6:	2201      	movs	r2, #1
   17aa8:	769a      	strb	r2, [r3, #26]
   17aaa:	e005      	b.n	17ab8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   17aac:	683b      	ldr	r3, [r7, #0]
   17aae:	7d1b      	ldrb	r3, [r3, #20]
   17ab0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   17ab4:	68fb      	ldr	r3, [r7, #12]
   17ab6:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   17ab8:	68fb      	ldr	r3, [r7, #12]
   17aba:	7e9b      	ldrb	r3, [r3, #26]
   17abc:	2b00      	cmp	r3, #0
   17abe:	d009      	beq.n	17ad4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   17ac0:	68fb      	ldr	r3, [r7, #12]
   17ac2:	7edb      	ldrb	r3, [r3, #27]
   17ac4:	2b00      	cmp	r3, #0
   17ac6:	bf0c      	ite	eq
   17ac8:	2301      	moveq	r3, #1
   17aca:	2300      	movne	r3, #0
   17acc:	b2db      	uxtb	r3, r3
   17ace:	461a      	mov	r2, r3
   17ad0:	68fb      	ldr	r3, [r7, #12]
   17ad2:	76da      	strb	r2, [r3, #27]
        }
    }
}
   17ad4:	bf00      	nop
   17ad6:	3714      	adds	r7, #20
   17ad8:	46bd      	mov	sp, r7
   17ada:	bc80      	pop	{r7}
   17adc:	4770      	bx	lr
	...

00017ae0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   17ae0:	b590      	push	{r4, r7, lr}
   17ae2:	b08b      	sub	sp, #44	; 0x2c
   17ae4:	af04      	add	r7, sp, #16
   17ae6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17ae8:	2300      	movs	r3, #0
   17aea:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   17aec:	687b      	ldr	r3, [r7, #4]
   17aee:	681b      	ldr	r3, [r3, #0]
   17af0:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
   17af2:	4b35      	ldr	r3, [pc, #212]	; (17bc8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   17af4:	681b      	ldr	r3, [r3, #0]
   17af6:	1d1a      	adds	r2, r3, #4
   17af8:	687b      	ldr	r3, [r7, #4]
   17afa:	685b      	ldr	r3, [r3, #4]
   17afc:	4619      	mov	r1, r3
   17afe:	4610      	mov	r0, r2
   17b00:	4b32      	ldr	r3, [pc, #200]	; (17bcc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   17b02:	4798      	blx	r3
   17b04:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   17b06:	687b      	ldr	r3, [r7, #4]
   17b08:	7f5b      	ldrb	r3, [r3, #29]
   17b0a:	2b00      	cmp	r3, #0
   17b0c:	d157      	bne.n	17bbe <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   17b0e:	2300      	movs	r3, #0
   17b10:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   17b12:	68bb      	ldr	r3, [r7, #8]
   17b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   17b18:	2b00      	cmp	r3, #0
   17b1a:	d002      	beq.n	17b22 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   17b1c:	4b2c      	ldr	r3, [pc, #176]	; (17bd0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   17b1e:	617b      	str	r3, [r7, #20]
   17b20:	e00d      	b.n	17b3e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   17b22:	68bb      	ldr	r3, [r7, #8]
   17b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   17b28:	2b00      	cmp	r3, #0
   17b2a:	d008      	beq.n	17b3e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   17b2c:	68fb      	ldr	r3, [r7, #12]
   17b2e:	7a1b      	ldrb	r3, [r3, #8]
   17b30:	2b00      	cmp	r3, #0
   17b32:	d002      	beq.n	17b3a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   17b34:	4b27      	ldr	r3, [pc, #156]	; (17bd4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   17b36:	617b      	str	r3, [r7, #20]
   17b38:	e001      	b.n	17b3e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   17b3a:	2301      	movs	r3, #1
   17b3c:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   17b3e:	697b      	ldr	r3, [r7, #20]
   17b40:	2b00      	cmp	r3, #0
   17b42:	d13c      	bne.n	17bbe <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   17b44:	68bb      	ldr	r3, [r7, #8]
   17b46:	f3c3 020a 	ubfx	r2, r3, #0, #11
   17b4a:	68fb      	ldr	r3, [r7, #12]
   17b4c:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   17b4e:	7cfb      	ldrb	r3, [r7, #19]
   17b50:	2b00      	cmp	r3, #0
   17b52:	d021      	beq.n	17b98 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   17b54:	2300      	movs	r3, #0
   17b56:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   17b58:	68fb      	ldr	r3, [r7, #12]
   17b5a:	7e1b      	ldrb	r3, [r3, #24]
   17b5c:	2b00      	cmp	r3, #0
   17b5e:	d007      	beq.n	17b70 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   17b60:	2301      	movs	r3, #1
   17b62:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   17b64:	68fb      	ldr	r3, [r7, #12]
   17b66:	2200      	movs	r2, #0
   17b68:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   17b6a:	68fb      	ldr	r3, [r7, #12]
   17b6c:	2200      	movs	r2, #0
   17b6e:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   17b70:	4b15      	ldr	r3, [pc, #84]	; (17bc8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   17b72:	6818      	ldr	r0, [r3, #0]
   17b74:	68fb      	ldr	r3, [r7, #12]
   17b76:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17b78:	68fb      	ldr	r3, [r7, #12]
   17b7a:	68da      	ldr	r2, [r3, #12]
   17b7c:	2300      	movs	r3, #0
   17b7e:	9301      	str	r3, [sp, #4]
   17b80:	7cbb      	ldrb	r3, [r7, #18]
   17b82:	9300      	str	r3, [sp, #0]
   17b84:	2300      	movs	r3, #0
   17b86:	4c14      	ldr	r4, [pc, #80]	; (17bd8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   17b88:	47a0      	blx	r4
   17b8a:	4602      	mov	r2, r0
   17b8c:	68fb      	ldr	r3, [r7, #12]
   17b8e:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   17b90:	68fb      	ldr	r3, [r7, #12]
   17b92:	2201      	movs	r2, #1
   17b94:	721a      	strb	r2, [r3, #8]
   17b96:	e002      	b.n	17b9e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   17b98:	68fb      	ldr	r3, [r7, #12]
   17b9a:	2200      	movs	r2, #0
   17b9c:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
   17b9e:	4b0a      	ldr	r3, [pc, #40]	; (17bc8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   17ba0:	6818      	ldr	r0, [r3, #0]
   17ba2:	68fb      	ldr	r3, [r7, #12]
   17ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17ba6:	68fb      	ldr	r3, [r7, #12]
   17ba8:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   17baa:	4b0c      	ldr	r3, [pc, #48]	; (17bdc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   17bac:	9302      	str	r3, [sp, #8]
   17bae:	68fb      	ldr	r3, [r7, #12]
   17bb0:	9301      	str	r3, [sp, #4]
   17bb2:	2300      	movs	r3, #0
   17bb4:	9300      	str	r3, [sp, #0]
   17bb6:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17bba:	4c09      	ldr	r4, [pc, #36]	; (17be0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   17bbc:	47a0      	blx	r4
        }
    }

    return ret;
   17bbe:	697b      	ldr	r3, [r7, #20]
}
   17bc0:	4618      	mov	r0, r3
   17bc2:	371c      	adds	r7, #28
   17bc4:	46bd      	mov	sp, r7
   17bc6:	bd90      	pop	{r4, r7, pc}
   17bc8:	2000d9f4 	.word	0x2000d9f4
   17bcc:	0001727d 	.word	0x0001727d
   17bd0:	06090030 	.word	0x06090030
   17bd4:	08000022 	.word	0x08000022
   17bd8:	000157c5 	.word	0x000157c5
   17bdc:	00017a4d 	.word	0x00017a4d
   17be0:	000156c5 	.word	0x000156c5

00017be4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   17be4:	b580      	push	{r7, lr}
   17be6:	b086      	sub	sp, #24
   17be8:	af00      	add	r7, sp, #0
   17bea:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17bec:	2300      	movs	r3, #0
   17bee:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   17bf0:	687b      	ldr	r3, [r7, #4]
   17bf2:	681b      	ldr	r3, [r3, #0]
   17bf4:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   17bf6:	4b19      	ldr	r3, [pc, #100]	; (17c5c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   17bf8:	681b      	ldr	r3, [r3, #0]
   17bfa:	1d1a      	adds	r2, r3, #4
   17bfc:	687b      	ldr	r3, [r7, #4]
   17bfe:	685b      	ldr	r3, [r3, #4]
   17c00:	4619      	mov	r1, r3
   17c02:	4610      	mov	r0, r2
   17c04:	4b16      	ldr	r3, [pc, #88]	; (17c60 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   17c06:	4798      	blx	r3
   17c08:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   17c0a:	687b      	ldr	r3, [r7, #4]
   17c0c:	7f5b      	ldrb	r3, [r3, #29]
   17c0e:	2b00      	cmp	r3, #0
   17c10:	d11f      	bne.n	17c52 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   17c12:	693b      	ldr	r3, [r7, #16]
   17c14:	691b      	ldr	r3, [r3, #16]
   17c16:	2b00      	cmp	r3, #0
   17c18:	d105      	bne.n	17c26 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   17c1a:	68fb      	ldr	r3, [r7, #12]
   17c1c:	2b00      	cmp	r3, #0
   17c1e:	d002      	beq.n	17c26 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   17c20:	693b      	ldr	r3, [r7, #16]
   17c22:	2200      	movs	r2, #0
   17c24:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   17c26:	693b      	ldr	r3, [r7, #16]
   17c28:	68fa      	ldr	r2, [r7, #12]
   17c2a:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   17c2c:	68fb      	ldr	r3, [r7, #12]
   17c2e:	085a      	lsrs	r2, r3, #1
   17c30:	4613      	mov	r3, r2
   17c32:	005b      	lsls	r3, r3, #1
   17c34:	441a      	add	r2, r3
   17c36:	693b      	ldr	r3, [r7, #16]
   17c38:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   17c3a:	693b      	ldr	r3, [r7, #16]
   17c3c:	695a      	ldr	r2, [r3, #20]
   17c3e:	68fb      	ldr	r3, [r7, #12]
   17c40:	429a      	cmp	r2, r3
   17c42:	d203      	bcs.n	17c4c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   17c44:	693b      	ldr	r3, [r7, #16]
   17c46:	f04f 32ff 	mov.w	r2, #4294967295
   17c4a:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   17c4c:	693b      	ldr	r3, [r7, #16]
   17c4e:	2200      	movs	r2, #0
   17c50:	621a      	str	r2, [r3, #32]
    }

    return ret;
   17c52:	697b      	ldr	r3, [r7, #20]
}
   17c54:	4618      	mov	r0, r3
   17c56:	3718      	adds	r7, #24
   17c58:	46bd      	mov	sp, r7
   17c5a:	bd80      	pop	{r7, pc}
   17c5c:	2000d9f4 	.word	0x2000d9f4
   17c60:	0001727d 	.word	0x0001727d

00017c64 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   17c64:	b590      	push	{r4, r7, lr}
   17c66:	b089      	sub	sp, #36	; 0x24
   17c68:	af02      	add	r7, sp, #8
   17c6a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17c6c:	2300      	movs	r3, #0
   17c6e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   17c70:	687b      	ldr	r3, [r7, #4]
   17c72:	681b      	ldr	r3, [r3, #0]
   17c74:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   17c76:	687b      	ldr	r3, [r7, #4]
   17c78:	685b      	ldr	r3, [r3, #4]
   17c7a:	781b      	ldrb	r3, [r3, #0]
   17c7c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   17c7e:	687b      	ldr	r3, [r7, #4]
   17c80:	7f5b      	ldrb	r3, [r3, #29]
   17c82:	2b00      	cmp	r3, #0
   17c84:	d12c      	bne.n	17ce0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   17c86:	2300      	movs	r3, #0
   17c88:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   17c8a:	68fb      	ldr	r3, [r7, #12]
   17c8c:	691b      	ldr	r3, [r3, #16]
   17c8e:	2b00      	cmp	r3, #0
   17c90:	d002      	beq.n	17c98 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   17c92:	4b16      	ldr	r3, [pc, #88]	; (17cec <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   17c94:	617b      	str	r3, [r7, #20]
   17c96:	e023      	b.n	17ce0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   17c98:	7afb      	ldrb	r3, [r7, #11]
   17c9a:	2b01      	cmp	r3, #1
   17c9c:	d005      	beq.n	17caa <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   17c9e:	7afb      	ldrb	r3, [r7, #11]
   17ca0:	2bf0      	cmp	r3, #240	; 0xf0
   17ca2:	dd05      	ble.n	17cb0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   17ca4:	7afb      	ldrb	r3, [r7, #11]
   17ca6:	2bff      	cmp	r3, #255	; 0xff
   17ca8:	dc02      	bgt.n	17cb0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   17caa:	4b11      	ldr	r3, [pc, #68]	; (17cf0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   17cac:	617b      	str	r3, [r7, #20]
   17cae:	e017      	b.n	17ce0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   17cb0:	68fb      	ldr	r3, [r7, #12]
   17cb2:	7afa      	ldrb	r2, [r7, #11]
   17cb4:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   17cb6:	7afb      	ldrb	r3, [r7, #11]
   17cb8:	2b00      	cmp	r3, #0
   17cba:	d001      	beq.n	17cc0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   17cbc:	2301      	movs	r3, #1
   17cbe:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   17cc0:	4b0c      	ldr	r3, [pc, #48]	; (17cf4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   17cc2:	6818      	ldr	r0, [r3, #0]
   17cc4:	68fb      	ldr	r3, [r7, #12]
   17cc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17cc8:	68fb      	ldr	r3, [r7, #12]
   17cca:	68da      	ldr	r2, [r3, #12]
   17ccc:	2300      	movs	r3, #0
   17cce:	9301      	str	r3, [sp, #4]
   17cd0:	7cfb      	ldrb	r3, [r7, #19]
   17cd2:	9300      	str	r3, [sp, #0]
   17cd4:	2300      	movs	r3, #0
   17cd6:	4c08      	ldr	r4, [pc, #32]	; (17cf8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   17cd8:	47a0      	blx	r4
   17cda:	4602      	mov	r2, r0
   17cdc:	68fb      	ldr	r3, [r7, #12]
   17cde:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   17ce0:	697b      	ldr	r3, [r7, #20]
}
   17ce2:	4618      	mov	r0, r3
   17ce4:	371c      	adds	r7, #28
   17ce6:	46bd      	mov	sp, r7
   17ce8:	bd90      	pop	{r4, r7, pc}
   17cea:	bf00      	nop
   17cec:	08000022 	.word	0x08000022
   17cf0:	06090030 	.word	0x06090030
   17cf4:	2000d9f4 	.word	0x2000d9f4
   17cf8:	000157c5 	.word	0x000157c5

00017cfc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17cfc:	b590      	push	{r4, r7, lr}
   17cfe:	b08b      	sub	sp, #44	; 0x2c
   17d00:	af04      	add	r7, sp, #16
   17d02:	60f8      	str	r0, [r7, #12]
   17d04:	60b9      	str	r1, [r7, #8]
   17d06:	607a      	str	r2, [r7, #4]
   17d08:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   17d0a:	2300      	movs	r3, #0
   17d0c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   17d0e:	68bb      	ldr	r3, [r7, #8]
   17d10:	2b00      	cmp	r3, #0
   17d12:	d00e      	beq.n	17d32 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17d14:	687b      	ldr	r3, [r7, #4]
   17d16:	2b00      	cmp	r3, #0
   17d18:	d00b      	beq.n	17d32 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17d1a:	683b      	ldr	r3, [r7, #0]
   17d1c:	2b00      	cmp	r3, #0
   17d1e:	d008      	beq.n	17d32 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17d22:	2b00      	cmp	r3, #0
   17d24:	d005      	beq.n	17d32 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d28:	2b00      	cmp	r3, #0
   17d2a:	d002      	beq.n	17d32 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   17d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17d2e:	2b00      	cmp	r3, #0
   17d30:	d102      	bne.n	17d38 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17d32:	f04f 33ff 	mov.w	r3, #4294967295
   17d36:	e097      	b.n	17e68 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
   17d38:	68bb      	ldr	r3, [r7, #8]
   17d3a:	2200      	movs	r2, #0
   17d3c:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   17d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d40:	f3c3 020a 	ubfx	r2, r3, #0, #11
   17d44:	68bb      	ldr	r3, [r7, #8]
   17d46:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   17d48:	68bb      	ldr	r3, [r7, #8]
   17d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17d4c:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
   17d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17d50:	4613      	mov	r3, r2
   17d52:	005b      	lsls	r3, r3, #1
   17d54:	441a      	add	r2, r3
   17d56:	68bb      	ldr	r3, [r7, #8]
   17d58:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   17d5a:	68bb      	ldr	r3, [r7, #8]
   17d5c:	695a      	ldr	r2, [r3, #20]
   17d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17d60:	429a      	cmp	r2, r3
   17d62:	d203      	bcs.n	17d6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
   17d64:	68bb      	ldr	r3, [r7, #8]
   17d66:	f04f 32ff 	mov.w	r2, #4294967295
   17d6a:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   17d6c:	68bb      	ldr	r3, [r7, #8]
   17d6e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   17d72:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   17d74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   17d78:	2b00      	cmp	r3, #0
   17d7a:	d001      	beq.n	17d80 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
   17d7c:	2301      	movs	r3, #1
   17d7e:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   17d80:	68bb      	ldr	r3, [r7, #8]
   17d82:	2201      	movs	r2, #1
   17d84:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   17d86:	68bb      	ldr	r3, [r7, #8]
   17d88:	2200      	movs	r2, #0
   17d8a:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   17d8c:	68bb      	ldr	r3, [r7, #8]
   17d8e:	2200      	movs	r2, #0
   17d90:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   17d92:	68bb      	ldr	r3, [r7, #8]
   17d94:	2200      	movs	r2, #0
   17d96:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   17d98:	68bb      	ldr	r3, [r7, #8]
   17d9a:	2200      	movs	r2, #0
   17d9c:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   17d9e:	68bb      	ldr	r3, [r7, #8]
   17da0:	2200      	movs	r2, #0
   17da2:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   17da4:	68bb      	ldr	r3, [r7, #8]
   17da6:	687a      	ldr	r2, [r7, #4]
   17da8:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   17daa:	68bb      	ldr	r3, [r7, #8]
   17dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17dae:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   17db0:	68bb      	ldr	r3, [r7, #8]
   17db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17db4:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   17db6:	68bb      	ldr	r3, [r7, #8]
   17db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17dba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   17dbc:	4b2c      	ldr	r3, [pc, #176]	; (17e70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17dbe:	681b      	ldr	r3, [r3, #0]
   17dc0:	1d18      	adds	r0, r3, #4
   17dc2:	2300      	movs	r3, #0
   17dc4:	9301      	str	r3, [sp, #4]
   17dc6:	2300      	movs	r3, #0
   17dc8:	9300      	str	r3, [sp, #0]
   17dca:	68bb      	ldr	r3, [r7, #8]
   17dcc:	4a29      	ldr	r2, [pc, #164]	; (17e74 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   17dce:	f241 0105 	movw	r1, #4101	; 0x1005
   17dd2:	4c29      	ldr	r4, [pc, #164]	; (17e78 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   17dd4:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   17dd6:	4b26      	ldr	r3, [pc, #152]	; (17e70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17dd8:	681b      	ldr	r3, [r3, #0]
   17dda:	1d18      	adds	r0, r3, #4
   17ddc:	2300      	movs	r3, #0
   17dde:	9301      	str	r3, [sp, #4]
   17de0:	2300      	movs	r3, #0
   17de2:	9300      	str	r3, [sp, #0]
   17de4:	68bb      	ldr	r3, [r7, #8]
   17de6:	4a25      	ldr	r2, [pc, #148]	; (17e7c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   17de8:	f241 0106 	movw	r1, #4102	; 0x1006
   17dec:	4c22      	ldr	r4, [pc, #136]	; (17e78 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   17dee:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   17df0:	4b1f      	ldr	r3, [pc, #124]	; (17e70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17df2:	681b      	ldr	r3, [r3, #0]
   17df4:	1d18      	adds	r0, r3, #4
   17df6:	2300      	movs	r3, #0
   17df8:	9301      	str	r3, [sp, #4]
   17dfa:	2300      	movs	r3, #0
   17dfc:	9300      	str	r3, [sp, #0]
   17dfe:	68bb      	ldr	r3, [r7, #8]
   17e00:	4a1f      	ldr	r2, [pc, #124]	; (17e80 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   17e02:	f241 0119 	movw	r1, #4121	; 0x1019
   17e06:	4c1c      	ldr	r4, [pc, #112]	; (17e78 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   17e08:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
   17e0a:	4b19      	ldr	r3, [pc, #100]	; (17e70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17e0c:	6818      	ldr	r0, [r3, #0]
   17e0e:	68bb      	ldr	r3, [r7, #8]
   17e10:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   17e12:	4b1c      	ldr	r3, [pc, #112]	; (17e84 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   17e14:	9302      	str	r3, [sp, #8]
   17e16:	68bb      	ldr	r3, [r7, #8]
   17e18:	9301      	str	r3, [sp, #4]
   17e1a:	2300      	movs	r3, #0
   17e1c:	9300      	str	r3, [sp, #0]
   17e1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17e22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17e24:	4c18      	ldr	r4, [pc, #96]	; (17e88 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   17e26:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   17e28:	68bb      	ldr	r3, [r7, #8]
   17e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17e2c:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   17e2e:	68bb      	ldr	r3, [r7, #8]
   17e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   17e32:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
   17e34:	4b0e      	ldr	r3, [pc, #56]	; (17e70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17e36:	6818      	ldr	r0, [r3, #0]
   17e38:	68bb      	ldr	r3, [r7, #8]
   17e3a:	68da      	ldr	r2, [r3, #12]
   17e3c:	2300      	movs	r3, #0
   17e3e:	9301      	str	r3, [sp, #4]
   17e40:	7dfb      	ldrb	r3, [r7, #23]
   17e42:	9300      	str	r3, [sp, #0]
   17e44:	2300      	movs	r3, #0
   17e46:	6c79      	ldr	r1, [r7, #68]	; 0x44
   17e48:	4c10      	ldr	r4, [pc, #64]	; (17e8c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   17e4a:	47a0      	blx	r4
   17e4c:	4602      	mov	r2, r0
   17e4e:	68bb      	ldr	r3, [r7, #8]
   17e50:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
   17e52:	68bb      	ldr	r3, [r7, #8]
   17e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17e56:	2210      	movs	r2, #16
   17e58:	4619      	mov	r1, r3
   17e5a:	480d      	ldr	r0, [pc, #52]	; (17e90 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   17e5c:	4b0d      	ldr	r3, [pc, #52]	; (17e94 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
   17e5e:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
   17e60:	68fb      	ldr	r3, [r7, #12]
   17e62:	4a0b      	ldr	r2, [pc, #44]	; (17e90 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   17e64:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   17e66:	2300      	movs	r3, #0
}
   17e68:	4618      	mov	r0, r3
   17e6a:	371c      	adds	r7, #28
   17e6c:	46bd      	mov	sp, r7
   17e6e:	bd90      	pop	{r4, r7, pc}
   17e70:	2000d9f4 	.word	0x2000d9f4
   17e74:	00017ae1 	.word	0x00017ae1
   17e78:	000176d1 	.word	0x000176d1
   17e7c:	00017be5 	.word	0x00017be5
   17e80:	00017c65 	.word	0x00017c65
   17e84:	00017a4d 	.word	0x00017a4d
   17e88:	000156c5 	.word	0x000156c5
   17e8c:	000157c5 	.word	0x000157c5
   17e90:	2000da38 	.word	0x2000da38
   17e94:	0001a539 	.word	0x0001a539

00017e98 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv>:
    }

    return ret;
}

uint8_t CO_SYNC_Class::Send_SYNC_Signal(void){
   17e98:	b580      	push	{r7, lr}
   17e9a:	b082      	sub	sp, #8
   17e9c:	af00      	add	r7, sp, #0
   17e9e:	6078      	str	r0, [r7, #4]
	return 	(uint8_t)canopen_driver->CAN_Send(tx_buffer);
   17ea0:	4b06      	ldr	r3, [pc, #24]	; (17ebc <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x24>)
   17ea2:	681a      	ldr	r2, [r3, #0]
   17ea4:	687b      	ldr	r3, [r7, #4]
   17ea6:	681b      	ldr	r3, [r3, #0]
   17ea8:	4619      	mov	r1, r3
   17eaa:	4610      	mov	r0, r2
   17eac:	4b04      	ldr	r3, [pc, #16]	; (17ec0 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x28>)
   17eae:	4798      	blx	r3
   17eb0:	4603      	mov	r3, r0
   17eb2:	b2db      	uxtb	r3, r3
}
   17eb4:	4618      	mov	r0, r3
   17eb6:	3708      	adds	r7, #8
   17eb8:	46bd      	mov	sp, r7
   17eba:	bd80      	pop	{r7, pc}
   17ebc:	2000d9f4 	.word	0x2000d9f4
   17ec0:	00015871 	.word	0x00015871

00017ec4 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   17ec4:	b480      	push	{r7}
   17ec6:	b083      	sub	sp, #12
   17ec8:	af00      	add	r7, sp, #0
   17eca:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   17ecc:	687b      	ldr	r3, [r7, #4]
   17ece:	4618      	mov	r0, r3
   17ed0:	370c      	adds	r7, #12
   17ed2:	46bd      	mov	sp, r7
   17ed4:	bc80      	pop	{r7}
   17ed6:	4770      	bx	lr

00017ed8 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   17ed8:	b480      	push	{r7}
   17eda:	b083      	sub	sp, #12
   17edc:	af00      	add	r7, sp, #0
   17ede:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   17ee0:	687b      	ldr	r3, [r7, #4]
   17ee2:	4618      	mov	r0, r3
   17ee4:	370c      	adds	r7, #12
   17ee6:	46bd      	mov	sp, r7
   17ee8:	bc80      	pop	{r7}
   17eea:	4770      	bx	lr

00017eec <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   17eec:	b580      	push	{r7, lr}
   17eee:	b084      	sub	sp, #16
   17ef0:	af00      	add	r7, sp, #0
   17ef2:	60f8      	str	r0, [r7, #12]
   17ef4:	60b9      	str	r1, [r7, #8]
   17ef6:	4613      	mov	r3, r2
   17ef8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   17efa:	68fb      	ldr	r3, [r7, #12]
   17efc:	2b00      	cmp	r3, #0
   17efe:	d004      	beq.n	17f0a <io_write+0x1e>
   17f00:	68bb      	ldr	r3, [r7, #8]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d001      	beq.n	17f0a <io_write+0x1e>
   17f06:	2301      	movs	r3, #1
   17f08:	e000      	b.n	17f0c <io_write+0x20>
   17f0a:	2300      	movs	r3, #0
   17f0c:	f003 0301 	and.w	r3, r3, #1
   17f10:	b2db      	uxtb	r3, r3
   17f12:	2234      	movs	r2, #52	; 0x34
   17f14:	4907      	ldr	r1, [pc, #28]	; (17f34 <io_write+0x48>)
   17f16:	4618      	mov	r0, r3
   17f18:	4b07      	ldr	r3, [pc, #28]	; (17f38 <io_write+0x4c>)
   17f1a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   17f1c:	68fb      	ldr	r3, [r7, #12]
   17f1e:	681b      	ldr	r3, [r3, #0]
   17f20:	88fa      	ldrh	r2, [r7, #6]
   17f22:	68b9      	ldr	r1, [r7, #8]
   17f24:	68f8      	ldr	r0, [r7, #12]
   17f26:	4798      	blx	r3
   17f28:	4603      	mov	r3, r0
}
   17f2a:	4618      	mov	r0, r3
   17f2c:	3710      	adds	r7, #16
   17f2e:	46bd      	mov	sp, r7
   17f30:	bd80      	pop	{r7, pc}
   17f32:	bf00      	nop
   17f34:	0001bac0 	.word	0x0001bac0
   17f38:	00004bbd 	.word	0x00004bbd

00017f3c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   17f3c:	b580      	push	{r7, lr}
   17f3e:	b084      	sub	sp, #16
   17f40:	af00      	add	r7, sp, #0
   17f42:	60f8      	str	r0, [r7, #12]
   17f44:	60b9      	str	r1, [r7, #8]
   17f46:	4613      	mov	r3, r2
   17f48:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   17f4a:	68fb      	ldr	r3, [r7, #12]
   17f4c:	2b00      	cmp	r3, #0
   17f4e:	d004      	beq.n	17f5a <io_read+0x1e>
   17f50:	68bb      	ldr	r3, [r7, #8]
   17f52:	2b00      	cmp	r3, #0
   17f54:	d001      	beq.n	17f5a <io_read+0x1e>
   17f56:	2301      	movs	r3, #1
   17f58:	e000      	b.n	17f5c <io_read+0x20>
   17f5a:	2300      	movs	r3, #0
   17f5c:	f003 0301 	and.w	r3, r3, #1
   17f60:	b2db      	uxtb	r3, r3
   17f62:	223d      	movs	r2, #61	; 0x3d
   17f64:	4907      	ldr	r1, [pc, #28]	; (17f84 <io_read+0x48>)
   17f66:	4618      	mov	r0, r3
   17f68:	4b07      	ldr	r3, [pc, #28]	; (17f88 <io_read+0x4c>)
   17f6a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   17f6c:	68fb      	ldr	r3, [r7, #12]
   17f6e:	685b      	ldr	r3, [r3, #4]
   17f70:	88fa      	ldrh	r2, [r7, #6]
   17f72:	68b9      	ldr	r1, [r7, #8]
   17f74:	68f8      	ldr	r0, [r7, #12]
   17f76:	4798      	blx	r3
   17f78:	4603      	mov	r3, r0
}
   17f7a:	4618      	mov	r0, r3
   17f7c:	3710      	adds	r7, #16
   17f7e:	46bd      	mov	sp, r7
   17f80:	bd80      	pop	{r7, pc}
   17f82:	bf00      	nop
   17f84:	0001bac0 	.word	0x0001bac0
   17f88:	00004bbd 	.word	0x00004bbd

00017f8c <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
   17f8c:	b580      	push	{r7, lr}
   17f8e:	b084      	sub	sp, #16
   17f90:	af00      	add	r7, sp, #0
   17f92:	60f8      	str	r0, [r7, #12]
   17f94:	60b9      	str	r1, [r7, #8]
   17f96:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
   17f98:	687a      	ldr	r2, [r7, #4]
   17f9a:	68b9      	ldr	r1, [r7, #8]
   17f9c:	68f8      	ldr	r0, [r7, #12]
   17f9e:	4b03      	ldr	r3, [pc, #12]	; (17fac <itoa+0x20>)
   17fa0:	4798      	blx	r3
   17fa2:	4603      	mov	r3, r0
        }
   17fa4:	4618      	mov	r0, r3
   17fa6:	3710      	adds	r7, #16
   17fa8:	46bd      	mov	sp, r7
   17faa:	bd80      	pop	{r7, pc}
   17fac:	00017fb1 	.word	0x00017fb1

00017fb0 <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
   17fb0:	b480      	push	{r7}
   17fb2:	b093      	sub	sp, #76	; 0x4c
   17fb4:	af00      	add	r7, sp, #0
   17fb6:	60f8      	str	r0, [r7, #12]
   17fb8:	60b9      	str	r1, [r7, #8]
   17fba:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
   17fbc:	f107 0310 	add.w	r3, r7, #16
   17fc0:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
   17fc2:	68bb      	ldr	r3, [r7, #8]
   17fc4:	2b00      	cmp	r3, #0
   17fc6:	d101      	bne.n	17fcc <ltoa+0x1c>
            {
                return 0;
   17fc8:	2300      	movs	r3, #0
   17fca:	e061      	b.n	18090 <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
   17fcc:	687b      	ldr	r3, [r7, #4]
   17fce:	2b24      	cmp	r3, #36	; 0x24
   17fd0:	dc02      	bgt.n	17fd8 <ltoa+0x28>
   17fd2:	687b      	ldr	r3, [r7, #4]
   17fd4:	2b01      	cmp	r3, #1
   17fd6:	dc01      	bgt.n	17fdc <ltoa+0x2c>
            {
                return 0;
   17fd8:	2300      	movs	r3, #0
   17fda:	e059      	b.n	18090 <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
   17fdc:	687b      	ldr	r3, [r7, #4]
   17fde:	2b0a      	cmp	r3, #10
   17fe0:	d104      	bne.n	17fec <ltoa+0x3c>
   17fe2:	68fb      	ldr	r3, [r7, #12]
   17fe4:	2b00      	cmp	r3, #0
   17fe6:	da01      	bge.n	17fec <ltoa+0x3c>
   17fe8:	2301      	movs	r3, #1
   17fea:	e000      	b.n	17fee <ltoa+0x3e>
   17fec:	2300      	movs	r3, #0
   17fee:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
   17ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17ff2:	2b00      	cmp	r3, #0
   17ff4:	d003      	beq.n	17ffe <ltoa+0x4e>
            {
                v = -value;
   17ff6:	68fb      	ldr	r3, [r7, #12]
   17ff8:	425b      	negs	r3, r3
   17ffa:	643b      	str	r3, [r7, #64]	; 0x40
   17ffc:	e023      	b.n	18046 <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
   17ffe:	68fb      	ldr	r3, [r7, #12]
   18000:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
   18002:	e020      	b.n	18046 <ltoa+0x96>
            {
                i = v % radix;
   18004:	687a      	ldr	r2, [r7, #4]
   18006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18008:	fbb3 f1f2 	udiv	r1, r3, r2
   1800c:	fb02 f201 	mul.w	r2, r2, r1
   18010:	1a9b      	subs	r3, r3, r2
   18012:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
   18014:	687b      	ldr	r3, [r7, #4]
   18016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18018:	fbb2 f3f3 	udiv	r3, r2, r3
   1801c:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
   1801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18020:	2b09      	cmp	r3, #9
   18022:	dc08      	bgt.n	18036 <ltoa+0x86>
                    *tp++ = i + '0';
   18024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18026:	1c5a      	adds	r2, r3, #1
   18028:	647a      	str	r2, [r7, #68]	; 0x44
   1802a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1802c:	b2d2      	uxtb	r2, r2
   1802e:	3230      	adds	r2, #48	; 0x30
   18030:	b2d2      	uxtb	r2, r2
   18032:	701a      	strb	r2, [r3, #0]
   18034:	e007      	b.n	18046 <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
   18036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18038:	1c5a      	adds	r2, r3, #1
   1803a:	647a      	str	r2, [r7, #68]	; 0x44
   1803c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1803e:	b2d2      	uxtb	r2, r2
   18040:	3257      	adds	r2, #87	; 0x57
   18042:	b2d2      	uxtb	r2, r2
   18044:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
   18046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18048:	2b00      	cmp	r3, #0
   1804a:	d1db      	bne.n	18004 <ltoa+0x54>
   1804c:	f107 0310 	add.w	r3, r7, #16
   18050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18052:	429a      	cmp	r2, r3
   18054:	d0d6      	beq.n	18004 <ltoa+0x54>
            }

            sp = string;
   18056:	68bb      	ldr	r3, [r7, #8]
   18058:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
   1805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1805c:	2b00      	cmp	r3, #0
   1805e:	d00e      	beq.n	1807e <ltoa+0xce>
                *sp++ = '-';
   18060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18062:	1c5a      	adds	r2, r3, #1
   18064:	63fa      	str	r2, [r7, #60]	; 0x3c
   18066:	222d      	movs	r2, #45	; 0x2d
   18068:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   1806a:	e008      	b.n	1807e <ltoa+0xce>
                *sp++ = *--tp;
   1806c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1806e:	1c5a      	adds	r2, r3, #1
   18070:	63fa      	str	r2, [r7, #60]	; 0x3c
   18072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18074:	3a01      	subs	r2, #1
   18076:	647a      	str	r2, [r7, #68]	; 0x44
   18078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1807a:	7812      	ldrb	r2, [r2, #0]
   1807c:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   1807e:	f107 0310 	add.w	r3, r7, #16
   18082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18084:	429a      	cmp	r2, r3
   18086:	d8f1      	bhi.n	1806c <ltoa+0xbc>
            *sp = 0;
   18088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1808a:	2200      	movs	r2, #0
   1808c:	701a      	strb	r2, [r3, #0]

            return string;
   1808e:	68bb      	ldr	r3, [r7, #8]
        }
   18090:	4618      	mov	r0, r3
   18092:	374c      	adds	r7, #76	; 0x4c
   18094:	46bd      	mov	sp, r7
   18096:	bc80      	pop	{r7}
   18098:	4770      	bx	lr

0001809a <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   1809a:	b480      	push	{r7}
   1809c:	b083      	sub	sp, #12
   1809e:	af00      	add	r7, sp, #0
   180a0:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   180a2:	687b      	ldr	r3, [r7, #4]
   180a4:	4618      	mov	r0, r3
   180a6:	370c      	adds	r7, #12
   180a8:	46bd      	mov	sp, r7
   180aa:	bc80      	pop	{r7}
   180ac:	4770      	bx	lr

000180ae <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   180ae:	b480      	push	{r7}
   180b0:	b083      	sub	sp, #12
   180b2:	af00      	add	r7, sp, #0
   180b4:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   180b6:	687b      	ldr	r3, [r7, #4]
   180b8:	4618      	mov	r0, r3
   180ba:	370c      	adds	r7, #12
   180bc:	46bd      	mov	sp, r7
   180be:	bc80      	pop	{r7}
   180c0:	4770      	bx	lr

000180c2 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   180c2:	b480      	push	{r7}
   180c4:	b085      	sub	sp, #20
   180c6:	af00      	add	r7, sp, #0
   180c8:	6078      	str	r0, [r7, #4]
   180ca:	460b      	mov	r3, r1
   180cc:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   180ce:	2300      	movs	r3, #0
   180d0:	73fb      	strb	r3, [r7, #15]
   180d2:	7bfb      	ldrb	r3, [r7, #15]
   180d4:	2b01      	cmp	r3, #1
   180d6:	dc13      	bgt.n	18100 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   180d8:	7bfb      	ldrb	r3, [r7, #15]
   180da:	78f9      	ldrb	r1, [r7, #3]
   180dc:	7bfa      	ldrb	r2, [r7, #15]
   180de:	2080      	movs	r0, #128	; 0x80
   180e0:	fa40 f202 	asr.w	r2, r0, r2
   180e4:	400a      	ands	r2, r1
   180e6:	2a00      	cmp	r2, #0
   180e8:	bfcc      	ite	gt
   180ea:	2201      	movgt	r2, #1
   180ec:	2200      	movle	r2, #0
   180ee:	b2d1      	uxtb	r1, r2
   180f0:	687a      	ldr	r2, [r7, #4]
   180f2:	4413      	add	r3, r2
   180f4:	460a      	mov	r2, r1
   180f6:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
   180f8:	7bfb      	ldrb	r3, [r7, #15]
   180fa:	3301      	adds	r3, #1
   180fc:	73fb      	strb	r3, [r7, #15]
   180fe:	e7e8      	b.n	180d2 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   18100:	bf00      	nop
   18102:	3714      	adds	r7, #20
   18104:	46bd      	mov	sp, r7
   18106:	bc80      	pop	{r7}
   18108:	4770      	bx	lr

0001810a <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   1810a:	b480      	push	{r7}
   1810c:	b085      	sub	sp, #20
   1810e:	af00      	add	r7, sp, #0
   18110:	6078      	str	r0, [r7, #4]
   18112:	460b      	mov	r3, r1
   18114:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   18116:	2300      	movs	r3, #0
   18118:	73fb      	strb	r3, [r7, #15]
   1811a:	7bfb      	ldrb	r3, [r7, #15]
   1811c:	2b02      	cmp	r3, #2
   1811e:	dc15      	bgt.n	1814c <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   18120:	7bfb      	ldrb	r3, [r7, #15]
   18122:	f1c3 0302 	rsb	r3, r3, #2
   18126:	78f9      	ldrb	r1, [r7, #3]
   18128:	7bfa      	ldrb	r2, [r7, #15]
   1812a:	2020      	movs	r0, #32
   1812c:	fa40 f202 	asr.w	r2, r0, r2
   18130:	400a      	ands	r2, r1
   18132:	2a00      	cmp	r2, #0
   18134:	bfcc      	ite	gt
   18136:	2201      	movgt	r2, #1
   18138:	2200      	movle	r2, #0
   1813a:	b2d1      	uxtb	r1, r2
   1813c:	687a      	ldr	r2, [r7, #4]
   1813e:	4413      	add	r3, r2
   18140:	460a      	mov	r2, r1
   18142:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
   18144:	7bfb      	ldrb	r3, [r7, #15]
   18146:	3301      	adds	r3, #1
   18148:	73fb      	strb	r3, [r7, #15]
   1814a:	e7e6      	b.n	1811a <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   1814c:	bf00      	nop
   1814e:	3714      	adds	r7, #20
   18150:	46bd      	mov	sp, r7
   18152:	bc80      	pop	{r7}
   18154:	4770      	bx	lr
	...

00018158 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   18158:	b580      	push	{r7, lr}
   1815a:	b084      	sub	sp, #16
   1815c:	af00      	add	r7, sp, #0
   1815e:	60f8      	str	r0, [r7, #12]
   18160:	60b9      	str	r1, [r7, #8]
   18162:	4613      	mov	r3, r2
   18164:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   18166:	79fb      	ldrb	r3, [r7, #7]
   18168:	4619      	mov	r1, r3
   1816a:	68b8      	ldr	r0, [r7, #8]
   1816c:	4b0d      	ldr	r3, [pc, #52]	; (181a4 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   1816e:	4798      	blx	r3
	FillLimitSwitch(v);
   18170:	79fb      	ldrb	r3, [r7, #7]
   18172:	4619      	mov	r1, r3
   18174:	68b8      	ldr	r0, [r7, #8]
   18176:	4b0c      	ldr	r3, [pc, #48]	; (181a8 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   18178:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   1817a:	79fb      	ldrb	r3, [r7, #7]
   1817c:	f003 0301 	and.w	r3, r3, #1
   18180:	2b00      	cmp	r3, #0
   18182:	bfcc      	ite	gt
   18184:	2301      	movgt	r3, #1
   18186:	2300      	movle	r3, #0
   18188:	b2da      	uxtb	r2, r3
   1818a:	68bb      	ldr	r3, [r7, #8]
   1818c:	769a      	strb	r2, [r3, #26]
	return controlStatus;
   1818e:	68fa      	ldr	r2, [r7, #12]
   18190:	68bb      	ldr	r3, [r7, #8]
   18192:	3315      	adds	r3, #21
   18194:	6819      	ldr	r1, [r3, #0]
   18196:	6011      	str	r1, [r2, #0]
   18198:	889b      	ldrh	r3, [r3, #4]
   1819a:	8093      	strh	r3, [r2, #4]
}
   1819c:	68f8      	ldr	r0, [r7, #12]
   1819e:	3710      	adds	r7, #16
   181a0:	46bd      	mov	sp, r7
   181a2:	bd80      	pop	{r7, pc}
   181a4:	000180c3 	.word	0x000180c3
   181a8:	0001810b 	.word	0x0001810b

000181ac <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   181ac:	b480      	push	{r7}
   181ae:	b085      	sub	sp, #20
   181b0:	af00      	add	r7, sp, #0
   181b2:	60f8      	str	r0, [r7, #12]
   181b4:	60b9      	str	r1, [r7, #8]
   181b6:	4613      	mov	r3, r2
   181b8:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   181ba:	79fb      	ldrb	r3, [r7, #7]
   181bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   181c0:	2b00      	cmp	r3, #0
   181c2:	bfcc      	ite	gt
   181c4:	2301      	movgt	r3, #1
   181c6:	2300      	movle	r3, #0
   181c8:	b2da      	uxtb	r2, r3
   181ca:	68bb      	ldr	r3, [r7, #8]
   181cc:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   181ce:	79fb      	ldrb	r3, [r7, #7]
   181d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
   181d4:	2b00      	cmp	r3, #0
   181d6:	bfcc      	ite	gt
   181d8:	2301      	movgt	r3, #1
   181da:	2300      	movle	r3, #0
   181dc:	b2da      	uxtb	r2, r3
   181de:	68bb      	ldr	r3, [r7, #8]
   181e0:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   181e2:	79fb      	ldrb	r3, [r7, #7]
   181e4:	f003 0320 	and.w	r3, r3, #32
   181e8:	2b00      	cmp	r3, #0
   181ea:	bfcc      	ite	gt
   181ec:	2301      	movgt	r3, #1
   181ee:	2300      	movle	r3, #0
   181f0:	b2da      	uxtb	r2, r3
   181f2:	68bb      	ldr	r3, [r7, #8]
   181f4:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   181f6:	79fb      	ldrb	r3, [r7, #7]
   181f8:	f003 0310 	and.w	r3, r3, #16
   181fc:	2b00      	cmp	r3, #0
   181fe:	bfcc      	ite	gt
   18200:	2301      	movgt	r3, #1
   18202:	2300      	movle	r3, #0
   18204:	b2da      	uxtb	r2, r3
   18206:	68bb      	ldr	r3, [r7, #8]
   18208:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   1820a:	79fb      	ldrb	r3, [r7, #7]
   1820c:	f003 0308 	and.w	r3, r3, #8
   18210:	2b00      	cmp	r3, #0
   18212:	bfcc      	ite	gt
   18214:	2301      	movgt	r3, #1
   18216:	2300      	movle	r3, #0
   18218:	b2da      	uxtb	r2, r3
   1821a:	68bb      	ldr	r3, [r7, #8]
   1821c:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   1821e:	79fb      	ldrb	r3, [r7, #7]
   18220:	f003 0304 	and.w	r3, r3, #4
   18224:	2b00      	cmp	r3, #0
   18226:	bfcc      	ite	gt
   18228:	2301      	movgt	r3, #1
   1822a:	2300      	movle	r3, #0
   1822c:	b2da      	uxtb	r2, r3
   1822e:	68bb      	ldr	r3, [r7, #8]
   18230:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   18234:	79fb      	ldrb	r3, [r7, #7]
   18236:	f003 0302 	and.w	r3, r3, #2
   1823a:	2b00      	cmp	r3, #0
   1823c:	bfcc      	ite	gt
   1823e:	2301      	movgt	r3, #1
   18240:	2300      	movle	r3, #0
   18242:	b2da      	uxtb	r2, r3
   18244:	68bb      	ldr	r3, [r7, #8]
   18246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   1824a:	79fb      	ldrb	r3, [r7, #7]
   1824c:	f003 0301 	and.w	r3, r3, #1
   18250:	2b00      	cmp	r3, #0
   18252:	bfcc      	ite	gt
   18254:	2301      	movgt	r3, #1
   18256:	2300      	movle	r3, #0
   18258:	b2da      	uxtb	r2, r3
   1825a:	68bb      	ldr	r3, [r7, #8]
   1825c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
   18260:	68fa      	ldr	r2, [r7, #12]
   18262:	68bb      	ldr	r3, [r7, #8]
   18264:	331b      	adds	r3, #27
   18266:	6819      	ldr	r1, [r3, #0]
   18268:	685b      	ldr	r3, [r3, #4]
   1826a:	6011      	str	r1, [r2, #0]
   1826c:	6053      	str	r3, [r2, #4]
   1826e:	68f8      	ldr	r0, [r7, #12]
   18270:	3714      	adds	r7, #20
   18272:	46bd      	mov	sp, r7
   18274:	bc80      	pop	{r7}
   18276:	4770      	bx	lr

00018278 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   18278:	b480      	push	{r7}
   1827a:	b083      	sub	sp, #12
   1827c:	af00      	add	r7, sp, #0
   1827e:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   18280:	4b04      	ldr	r3, [pc, #16]	; (18294 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   18282:	681b      	ldr	r3, [r3, #0]
   18284:	2201      	movs	r2, #1
   18286:	709a      	strb	r2, [r3, #2]
	asm("nop");
   18288:	bf00      	nop
}
   1828a:	bf00      	nop
   1828c:	370c      	adds	r7, #12
   1828e:	46bd      	mov	sp, r7
   18290:	bc80      	pop	{r7}
   18292:	4770      	bx	lr
   18294:	2000db48 	.word	0x2000db48

00018298 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   18298:	b480      	push	{r7}
   1829a:	b083      	sub	sp, #12
   1829c:	af00      	add	r7, sp, #0
   1829e:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   182a0:	687b      	ldr	r3, [r7, #4]
   182a2:	4618      	mov	r0, r3
   182a4:	370c      	adds	r7, #12
   182a6:	46bd      	mov	sp, r7
   182a8:	bc80      	pop	{r7}
   182aa:	4770      	bx	lr

000182ac <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   182ac:	b480      	push	{r7}
   182ae:	b083      	sub	sp, #12
   182b0:	af00      	add	r7, sp, #0
   182b2:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   182b4:	687b      	ldr	r3, [r7, #4]
   182b6:	4618      	mov	r0, r3
   182b8:	370c      	adds	r7, #12
   182ba:	46bd      	mov	sp, r7
   182bc:	bc80      	pop	{r7}
   182be:	4770      	bx	lr

000182c0 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   182c0:	b580      	push	{r7, lr}
   182c2:	b084      	sub	sp, #16
   182c4:	af00      	add	r7, sp, #0
   182c6:	60f8      	str	r0, [r7, #12]
   182c8:	60b9      	str	r1, [r7, #8]
   182ca:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   182cc:	4a1c      	ldr	r2, [pc, #112]	; (18340 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   182ce:	68fb      	ldr	r3, [r7, #12]
   182d0:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   182d2:	68fb      	ldr	r3, [r7, #12]
   182d4:	68ba      	ldr	r2, [r7, #8]
   182d6:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   182d8:	68fb      	ldr	r3, [r7, #12]
   182da:	687a      	ldr	r2, [r7, #4]
   182dc:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   182de:	68fb      	ldr	r3, [r7, #12]
   182e0:	6a1b      	ldr	r3, [r3, #32]
   182e2:	68da      	ldr	r2, [r3, #12]
   182e4:	68fb      	ldr	r3, [r7, #12]
   182e6:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   182e8:	68fb      	ldr	r3, [r7, #12]
   182ea:	6a1b      	ldr	r3, [r3, #32]
   182ec:	689a      	ldr	r2, [r3, #8]
   182ee:	68fb      	ldr	r3, [r7, #12]
   182f0:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   182f2:	68fb      	ldr	r3, [r7, #12]
   182f4:	4a13      	ldr	r2, [pc, #76]	; (18344 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   182f6:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   182f8:	68fb      	ldr	r3, [r7, #12]
   182fa:	2204      	movs	r2, #4
   182fc:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   182fe:	68fb      	ldr	r3, [r7, #12]
   18300:	2209      	movs	r2, #9
   18302:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   18304:	68fb      	ldr	r3, [r7, #12]
   18306:	220e      	movs	r2, #14
   18308:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   1830a:	68fb      	ldr	r3, [r7, #12]
   1830c:	2213      	movs	r2, #19
   1830e:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   18310:	20c8      	movs	r0, #200	; 0xc8
   18312:	4b0d      	ldr	r3, [pc, #52]	; (18348 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   18314:	4798      	blx	r3
	temperatureTimer.Init();
   18316:	480d      	ldr	r0, [pc, #52]	; (1834c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18318:	4b0d      	ldr	r3, [pc, #52]	; (18350 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   1831a:	4798      	blx	r3
	configure_channels();
   1831c:	68f8      	ldr	r0, [r7, #12]
   1831e:	4b0d      	ldr	r3, [pc, #52]	; (18354 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   18320:	4798      	blx	r3
	configure_global_parameters();
   18322:	68f8      	ldr	r0, [r7, #12]
   18324:	4b0c      	ldr	r3, [pc, #48]	; (18358 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   18326:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   18328:	68fb      	ldr	r3, [r7, #12]
   1832a:	2201      	movs	r2, #1
   1832c:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   1832e:	68f8      	ldr	r0, [r7, #12]
   18330:	4b0a      	ldr	r3, [pc, #40]	; (1835c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   18332:	4798      	blx	r3
   18334:	4603      	mov	r3, r0
}
   18336:	4618      	mov	r0, r3
   18338:	3710      	adds	r7, #16
   1833a:	46bd      	mov	sp, r7
   1833c:	bd80      	pop	{r7, pc}
   1833e:	bf00      	nop
   18340:	2000db48 	.word	0x2000db48
   18344:	2000da88 	.word	0x2000da88
   18348:	00003561 	.word	0x00003561
   1834c:	2000da48 	.word	0x2000da48
   18350:	000101cd 	.word	0x000101cd
   18354:	00018769 	.word	0x00018769
   18358:	00018821 	.word	0x00018821
   1835c:	00018859 	.word	0x00018859

00018360 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   18360:	b590      	push	{r4, r7, lr}
   18362:	b089      	sub	sp, #36	; 0x24
   18364:	af02      	add	r7, sp, #8
   18366:	60f8      	str	r0, [r7, #12]
   18368:	60b9      	str	r1, [r7, #8]
   1836a:	603b      	str	r3, [r7, #0]
   1836c:	4613      	mov	r3, r2
   1836e:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   18370:	79fb      	ldrb	r3, [r7, #7]
   18372:	461a      	mov	r2, r3
   18374:	f44f 7100 	mov.w	r1, #512	; 0x200
   18378:	68f8      	ldr	r0, [r7, #12]
   1837a:	4b0b      	ldr	r3, [pc, #44]	; (183a8 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   1837c:	4798      	blx	r3
   1837e:	4603      	mov	r3, r0
   18380:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   18382:	8afa      	ldrh	r2, [r7, #22]
   18384:	683b      	ldr	r3, [r7, #0]
   18386:	9300      	str	r3, [sp, #0]
   18388:	4613      	mov	r3, r2
   1838a:	2202      	movs	r2, #2
   1838c:	68b9      	ldr	r1, [r7, #8]
   1838e:	68f8      	ldr	r0, [r7, #12]
   18390:	4c06      	ldr	r4, [pc, #24]	; (183ac <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   18392:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   18394:	8afb      	ldrh	r3, [r7, #22]
   18396:	79fa      	ldrb	r2, [r7, #7]
   18398:	68b9      	ldr	r1, [r7, #8]
   1839a:	68f8      	ldr	r0, [r7, #12]
   1839c:	4c04      	ldr	r4, [pc, #16]	; (183b0 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1839e:	47a0      	blx	r4
}
   183a0:	bf00      	nop
   183a2:	371c      	adds	r7, #28
   183a4:	46bd      	mov	sp, r7
   183a6:	bd90      	pop	{r4, r7, pc}
   183a8:	0001873d 	.word	0x0001873d
   183ac:	000185fd 	.word	0x000185fd
   183b0:	00018401 	.word	0x00018401

000183b4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   183b4:	b590      	push	{r4, r7, lr}
   183b6:	b087      	sub	sp, #28
   183b8:	af02      	add	r7, sp, #8
   183ba:	6078      	str	r0, [r7, #4]
   183bc:	460b      	mov	r3, r1
   183be:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   183c0:	78fb      	ldrb	r3, [r7, #3]
   183c2:	687a      	ldr	r2, [r7, #4]
   183c4:	4413      	add	r3, r2
   183c6:	78db      	ldrb	r3, [r3, #3]
   183c8:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   183ca:	687b      	ldr	r3, [r7, #4]
   183cc:	2200      	movs	r2, #0
   183ce:	705a      	strb	r2, [r3, #1]
	ready=false;
   183d0:	687b      	ldr	r3, [r7, #4]
   183d2:	2200      	movs	r2, #0
   183d4:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   183d6:	687b      	ldr	r3, [r7, #4]
   183d8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   183da:	7bfb      	ldrb	r3, [r7, #15]
   183dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   183e0:	b2db      	uxtb	r3, r3
   183e2:	9300      	str	r3, [sp, #0]
   183e4:	2300      	movs	r3, #0
   183e6:	2202      	movs	r2, #2
   183e8:	6878      	ldr	r0, [r7, #4]
   183ea:	4c04      	ldr	r4, [pc, #16]	; (183fc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   183ec:	47a0      	blx	r4
	channelOnProcess=channel_number;
   183ee:	687b      	ldr	r3, [r7, #4]
   183f0:	7bfa      	ldrb	r2, [r7, #15]
   183f2:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   183f4:	bf00      	nop
   183f6:	3714      	adds	r7, #20
   183f8:	46bd      	mov	sp, r7
   183fa:	bd90      	pop	{r4, r7, pc}
   183fc:	000186cd 	.word	0x000186cd

00018400 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   18400:	b590      	push	{r4, r7, lr}
   18402:	b089      	sub	sp, #36	; 0x24
   18404:	af02      	add	r7, sp, #8
   18406:	60f8      	str	r0, [r7, #12]
   18408:	60b9      	str	r1, [r7, #8]
   1840a:	4611      	mov	r1, r2
   1840c:	461a      	mov	r2, r3
   1840e:	460b      	mov	r3, r1
   18410:	71fb      	strb	r3, [r7, #7]
   18412:	4613      	mov	r3, r2
   18414:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   18416:	88ba      	ldrh	r2, [r7, #4]
   18418:	2300      	movs	r3, #0
   1841a:	9300      	str	r3, [sp, #0]
   1841c:	4613      	mov	r3, r2
   1841e:	2203      	movs	r2, #3
   18420:	68b9      	ldr	r1, [r7, #8]
   18422:	68f8      	ldr	r0, [r7, #12]
   18424:	4c03      	ldr	r4, [pc, #12]	; (18434 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   18426:	47a0      	blx	r4
   18428:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   1842a:	bf00      	nop
   1842c:	371c      	adds	r7, #28
   1842e:	46bd      	mov	sp, r7
   18430:	bd90      	pop	{r4, r7, pc}
   18432:	bf00      	nop
   18434:	000185fd 	.word	0x000185fd

00018438 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   18438:	b590      	push	{r4, r7, lr}
   1843a:	b085      	sub	sp, #20
   1843c:	af02      	add	r7, sp, #8
   1843e:	6078      	str	r0, [r7, #4]
   18440:	460b      	mov	r3, r1
   18442:	70fb      	strb	r3, [r7, #3]
   18444:	4613      	mov	r3, r2
   18446:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   18448:	78fb      	ldrb	r3, [r7, #3]
   1844a:	461a      	mov	r2, r3
   1844c:	2110      	movs	r1, #16
   1844e:	6878      	ldr	r0, [r7, #4]
   18450:	4b17      	ldr	r3, [pc, #92]	; (184b0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   18452:	4798      	blx	r3
   18454:	4603      	mov	r3, r0
   18456:	461a      	mov	r2, r3
   18458:	687b      	ldr	r3, [r7, #4]
   1845a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1845e:	687b      	ldr	r3, [r7, #4]
   18460:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18462:	687b      	ldr	r3, [r7, #4]
   18464:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   18468:	2300      	movs	r3, #0
   1846a:	9300      	str	r3, [sp, #0]
   1846c:	4613      	mov	r3, r2
   1846e:	2203      	movs	r2, #3
   18470:	6878      	ldr	r0, [r7, #4]
   18472:	4c10      	ldr	r4, [pc, #64]	; (184b4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   18474:	47a0      	blx	r4
   18476:	4602      	mov	r2, r0
   18478:	687b      	ldr	r3, [r7, #4]
   1847a:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   1847c:	687b      	ldr	r3, [r7, #4]
   1847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18480:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   18484:	687b      	ldr	r3, [r7, #4]
   18486:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   18488:	687b      	ldr	r3, [r7, #4]
   1848a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1848c:	78bb      	ldrb	r3, [r7, #2]
   1848e:	78fa      	ldrb	r2, [r7, #3]
   18490:	6878      	ldr	r0, [r7, #4]
   18492:	4c09      	ldr	r4, [pc, #36]	; (184b8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   18494:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   18496:	687b      	ldr	r3, [r7, #4]
   18498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1849a:	0e1b      	lsrs	r3, r3, #24
   1849c:	b2da      	uxtb	r2, r3
   1849e:	687b      	ldr	r3, [r7, #4]
   184a0:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   184a2:	687b      	ldr	r3, [r7, #4]
   184a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   184a6:	4618      	mov	r0, r3
   184a8:	370c      	adds	r7, #12
   184aa:	46bd      	mov	sp, r7
   184ac:	bd90      	pop	{r4, r7, pc}
   184ae:	bf00      	nop
   184b0:	0001873d 	.word	0x0001873d
   184b4:	000185fd 	.word	0x000185fd
   184b8:	00018511 	.word	0x00018511

000184bc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   184bc:	b580      	push	{r7, lr}
   184be:	b082      	sub	sp, #8
   184c0:	af00      	add	r7, sp, #0
   184c2:	6078      	str	r0, [r7, #4]
   184c4:	460b      	mov	r3, r1
   184c6:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   184c8:	78fb      	ldrb	r3, [r7, #3]
   184ca:	687a      	ldr	r2, [r7, #4]
   184cc:	4413      	add	r3, r2
   184ce:	78db      	ldrb	r3, [r3, #3]
   184d0:	4619      	mov	r1, r3
   184d2:	6878      	ldr	r0, [r7, #4]
   184d4:	4b03      	ldr	r3, [pc, #12]	; (184e4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   184d6:	4798      	blx	r3
   184d8:	4603      	mov	r3, r0
}
   184da:	4618      	mov	r0, r3
   184dc:	3708      	adds	r7, #8
   184de:	46bd      	mov	sp, r7
   184e0:	bd80      	pop	{r7, pc}
   184e2:	bf00      	nop
   184e4:	000184e9 	.word	0x000184e9

000184e8 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   184e8:	b580      	push	{r7, lr}
   184ea:	b082      	sub	sp, #8
   184ec:	af00      	add	r7, sp, #0
   184ee:	6078      	str	r0, [r7, #4]
   184f0:	460b      	mov	r3, r1
   184f2:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   184f4:	78fb      	ldrb	r3, [r7, #3]
   184f6:	2202      	movs	r2, #2
   184f8:	4619      	mov	r1, r3
   184fa:	6878      	ldr	r0, [r7, #4]
   184fc:	4b03      	ldr	r3, [pc, #12]	; (1850c <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   184fe:	4798      	blx	r3
   18500:	4603      	mov	r3, r0
}
   18502:	4618      	mov	r0, r3
   18504:	3708      	adds	r7, #8
   18506:	46bd      	mov	sp, r7
   18508:	bd80      	pop	{r7, pc}
   1850a:	bf00      	nop
   1850c:	00018439 	.word	0x00018439

00018510 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   18510:	b580      	push	{r7, lr}
   18512:	b084      	sub	sp, #16
   18514:	af00      	add	r7, sp, #0
   18516:	60f8      	str	r0, [r7, #12]
   18518:	60b9      	str	r1, [r7, #8]
   1851a:	4611      	mov	r1, r2
   1851c:	461a      	mov	r2, r3
   1851e:	460b      	mov	r3, r1
   18520:	71fb      	strb	r3, [r7, #7]
   18522:	4613      	mov	r3, r2
   18524:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   18526:	68ba      	ldr	r2, [r7, #8]
   18528:	68fb      	ldr	r3, [r7, #12]
   1852a:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   1852c:	68fb      	ldr	r3, [r7, #12]
   1852e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   18530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   18534:	2b00      	cmp	r3, #0
   18536:	d006      	beq.n	18546 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   18538:	68fb      	ldr	r3, [r7, #12]
   1853a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1853c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   18540:	461a      	mov	r2, r3
   18542:	68fb      	ldr	r3, [r7, #12]
   18544:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   18546:	79bb      	ldrb	r3, [r7, #6]
   18548:	2b02      	cmp	r3, #2
   1854a:	d11d      	bne.n	18588 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   1854c:	68fb      	ldr	r3, [r7, #12]
   1854e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18550:	4b18      	ldr	r3, [pc, #96]	; (185b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18552:	4610      	mov	r0, r2
   18554:	4798      	blx	r3
   18556:	4602      	mov	r2, r0
   18558:	4b17      	ldr	r3, [pc, #92]	; (185b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1855a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1855e:	4610      	mov	r0, r2
   18560:	4798      	blx	r3
   18562:	4603      	mov	r3, r0
   18564:	461a      	mov	r2, r3
   18566:	68fb      	ldr	r3, [r7, #12]
   18568:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1856a:	79fb      	ldrb	r3, [r7, #7]
   1856c:	4619      	mov	r1, r3
   1856e:	68f8      	ldr	r0, [r7, #12]
   18570:	4b12      	ldr	r3, [pc, #72]	; (185bc <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   18572:	4798      	blx	r3
   18574:	4603      	mov	r3, r0
   18576:	4618      	mov	r0, r3
   18578:	68fb      	ldr	r3, [r7, #12]
   1857a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1857c:	68f9      	ldr	r1, [r7, #12]
   1857e:	1c83      	adds	r3, r0, #2
   18580:	009b      	lsls	r3, r3, #2
   18582:	440b      	add	r3, r1
   18584:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   18586:	e011      	b.n	185ac <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   18588:	79bb      	ldrb	r3, [r7, #6]
   1858a:	2b01      	cmp	r3, #1
   1858c:	d10e      	bne.n	185ac <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   1858e:	68fb      	ldr	r3, [r7, #12]
   18590:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18592:	4b08      	ldr	r3, [pc, #32]	; (185b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18594:	4610      	mov	r0, r2
   18596:	4798      	blx	r3
   18598:	4602      	mov	r2, r0
   1859a:	4b07      	ldr	r3, [pc, #28]	; (185b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1859c:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   185a0:	4610      	mov	r0, r2
   185a2:	4798      	blx	r3
   185a4:	4603      	mov	r3, r0
   185a6:	461a      	mov	r2, r3
   185a8:	68fb      	ldr	r3, [r7, #12]
   185aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
   185ac:	bf00      	nop
   185ae:	3710      	adds	r7, #16
   185b0:	46bd      	mov	sp, r7
   185b2:	bd80      	pop	{r7, pc}
   185b4:	0001a139 	.word	0x0001a139
   185b8:	0001a349 	.word	0x0001a349
   185bc:	000185c1 	.word	0x000185c1

000185c0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   185c0:	b480      	push	{r7}
   185c2:	b085      	sub	sp, #20
   185c4:	af00      	add	r7, sp, #0
   185c6:	6078      	str	r0, [r7, #4]
   185c8:	460b      	mov	r3, r1
   185ca:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   185cc:	2300      	movs	r3, #0
   185ce:	73fb      	strb	r3, [r7, #15]
   185d0:	7bfb      	ldrb	r3, [r7, #15]
   185d2:	2b03      	cmp	r3, #3
   185d4:	dc0c      	bgt.n	185f0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   185d6:	7bfb      	ldrb	r3, [r7, #15]
   185d8:	687a      	ldr	r2, [r7, #4]
   185da:	4413      	add	r3, r2
   185dc:	78db      	ldrb	r3, [r3, #3]
   185de:	78fa      	ldrb	r2, [r7, #3]
   185e0:	429a      	cmp	r2, r3
   185e2:	d101      	bne.n	185e8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   185e4:	7bfb      	ldrb	r3, [r7, #15]
   185e6:	e004      	b.n	185f2 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   185e8:	7bfb      	ldrb	r3, [r7, #15]
   185ea:	3301      	adds	r3, #1
   185ec:	73fb      	strb	r3, [r7, #15]
   185ee:	e7ef      	b.n	185d0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   185f0:	2300      	movs	r3, #0
}
   185f2:	4618      	mov	r0, r3
   185f4:	3714      	adds	r7, #20
   185f6:	46bd      	mov	sp, r7
   185f8:	bc80      	pop	{r7}
   185fa:	4770      	bx	lr

000185fc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   185fc:	b590      	push	{r4, r7, lr}
   185fe:	b089      	sub	sp, #36	; 0x24
   18600:	af02      	add	r7, sp, #8
   18602:	60f8      	str	r0, [r7, #12]
   18604:	60b9      	str	r1, [r7, #8]
   18606:	4611      	mov	r1, r2
   18608:	461a      	mov	r2, r3
   1860a:	460b      	mov	r3, r1
   1860c:	71fb      	strb	r3, [r7, #7]
   1860e:	4613      	mov	r3, r2
   18610:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18612:	2300      	movs	r3, #0
   18614:	75fb      	strb	r3, [r7, #23]
   18616:	7dfb      	ldrb	r3, [r7, #23]
   18618:	2b06      	cmp	r3, #6
   1861a:	dc09      	bgt.n	18630 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   1861c:	68fb      	ldr	r3, [r7, #12]
   1861e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18620:	7dfb      	ldrb	r3, [r7, #23]
   18622:	4413      	add	r3, r2
   18624:	2200      	movs	r2, #0
   18626:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18628:	7dfb      	ldrb	r3, [r7, #23]
   1862a:	3301      	adds	r3, #1
   1862c:	75fb      	strb	r3, [r7, #23]
   1862e:	e7f2      	b.n	18616 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   18630:	68fb      	ldr	r3, [r7, #12]
   18632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18634:	79fa      	ldrb	r2, [r7, #7]
   18636:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   18638:	68fb      	ldr	r3, [r7, #12]
   1863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1863c:	3301      	adds	r3, #1
   1863e:	88ba      	ldrh	r2, [r7, #4]
   18640:	1212      	asrs	r2, r2, #8
   18642:	b2d2      	uxtb	r2, r2
   18644:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   18646:	68fb      	ldr	r3, [r7, #12]
   18648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1864a:	3302      	adds	r3, #2
   1864c:	88ba      	ldrh	r2, [r7, #4]
   1864e:	b2d2      	uxtb	r2, r2
   18650:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   18652:	68fb      	ldr	r3, [r7, #12]
   18654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18656:	3303      	adds	r3, #3
   18658:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1865a:	0e12      	lsrs	r2, r2, #24
   1865c:	b2d2      	uxtb	r2, r2
   1865e:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   18660:	68fb      	ldr	r3, [r7, #12]
   18662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18664:	3304      	adds	r3, #4
   18666:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18668:	0c12      	lsrs	r2, r2, #16
   1866a:	b2d2      	uxtb	r2, r2
   1866c:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   1866e:	68fb      	ldr	r3, [r7, #12]
   18670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18672:	3305      	adds	r3, #5
   18674:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18676:	0a12      	lsrs	r2, r2, #8
   18678:	b2d2      	uxtb	r2, r2
   1867a:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   1867c:	68fb      	ldr	r3, [r7, #12]
   1867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18680:	3306      	adds	r3, #6
   18682:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18684:	b2d2      	uxtb	r2, r2
   18686:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   18688:	68fb      	ldr	r3, [r7, #12]
   1868a:	6a18      	ldr	r0, [r3, #32]
   1868c:	68fb      	ldr	r3, [r7, #12]
   1868e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18690:	f107 0110 	add.w	r1, r7, #16
   18694:	2307      	movs	r3, #7
   18696:	9300      	str	r3, [sp, #0]
   18698:	460b      	mov	r3, r1
   1869a:	68b9      	ldr	r1, [r7, #8]
   1869c:	4c0a      	ldr	r4, [pc, #40]	; (186c8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1869e:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   186a0:	7c3b      	ldrb	r3, [r7, #16]
   186a2:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   186a4:	7c7b      	ldrb	r3, [r7, #17]
   186a6:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   186a8:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   186aa:	7cbb      	ldrb	r3, [r7, #18]
   186ac:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   186ae:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   186b0:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   186b2:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   186b4:	68fb      	ldr	r3, [r7, #12]
   186b6:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   186b8:	bf00      	nop
	return output_data;
   186ba:	68fb      	ldr	r3, [r7, #12]
   186bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   186be:	4618      	mov	r0, r3
   186c0:	371c      	adds	r7, #28
   186c2:	46bd      	mov	sp, r7
   186c4:	bd90      	pop	{r4, r7, pc}
   186c6:	bf00      	nop
   186c8:	00018bf1 	.word	0x00018bf1

000186cc <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   186cc:	b590      	push	{r4, r7, lr}
   186ce:	b087      	sub	sp, #28
   186d0:	af02      	add	r7, sp, #8
   186d2:	60f8      	str	r0, [r7, #12]
   186d4:	60b9      	str	r1, [r7, #8]
   186d6:	4611      	mov	r1, r2
   186d8:	461a      	mov	r2, r3
   186da:	460b      	mov	r3, r1
   186dc:	71fb      	strb	r3, [r7, #7]
   186de:	4613      	mov	r3, r2
   186e0:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   186e2:	68fb      	ldr	r3, [r7, #12]
   186e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   186e6:	79fa      	ldrb	r2, [r7, #7]
   186e8:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   186ea:	68fb      	ldr	r3, [r7, #12]
   186ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   186ee:	3301      	adds	r3, #1
   186f0:	88ba      	ldrh	r2, [r7, #4]
   186f2:	1212      	asrs	r2, r2, #8
   186f4:	b2d2      	uxtb	r2, r2
   186f6:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   186f8:	68fb      	ldr	r3, [r7, #12]
   186fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   186fc:	3302      	adds	r3, #2
   186fe:	88ba      	ldrh	r2, [r7, #4]
   18700:	b2d2      	uxtb	r2, r2
   18702:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   18704:	68fb      	ldr	r3, [r7, #12]
   18706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18708:	3303      	adds	r3, #3
   1870a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1870e:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   18710:	68fb      	ldr	r3, [r7, #12]
   18712:	6a18      	ldr	r0, [r3, #32]
   18714:	68fb      	ldr	r3, [r7, #12]
   18716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18718:	68fb      	ldr	r3, [r7, #12]
   1871a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1871c:	2304      	movs	r3, #4
   1871e:	9300      	str	r3, [sp, #0]
   18720:	460b      	mov	r3, r1
   18722:	68b9      	ldr	r1, [r7, #8]
   18724:	4c04      	ldr	r4, [pc, #16]	; (18738 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   18726:	47a0      	blx	r4
	return rx[0];
   18728:	68fb      	ldr	r3, [r7, #12]
   1872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1872c:	781b      	ldrb	r3, [r3, #0]
}
   1872e:	4618      	mov	r0, r3
   18730:	3714      	adds	r7, #20
   18732:	46bd      	mov	sp, r7
   18734:	bd90      	pop	{r4, r7, pc}
   18736:	bf00      	nop
   18738:	00018bf1 	.word	0x00018bf1

0001873c <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   1873c:	b480      	push	{r7}
   1873e:	b083      	sub	sp, #12
   18740:	af00      	add	r7, sp, #0
   18742:	6078      	str	r0, [r7, #4]
   18744:	460b      	mov	r3, r1
   18746:	807b      	strh	r3, [r7, #2]
   18748:	4613      	mov	r3, r2
   1874a:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   1874c:	787b      	ldrb	r3, [r7, #1]
   1874e:	3b01      	subs	r3, #1
   18750:	b29b      	uxth	r3, r3
   18752:	009b      	lsls	r3, r3, #2
   18754:	b29a      	uxth	r2, r3
   18756:	887b      	ldrh	r3, [r7, #2]
   18758:	4413      	add	r3, r2
   1875a:	b29b      	uxth	r3, r3
}
   1875c:	4618      	mov	r0, r3
   1875e:	370c      	adds	r7, #12
   18760:	46bd      	mov	sp, r7
   18762:	bc80      	pop	{r7}
   18764:	4770      	bx	lr
	...

00018768 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   18768:	b590      	push	{r4, r7, lr}
   1876a:	b085      	sub	sp, #20
   1876c:	af00      	add	r7, sp, #0
   1876e:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   18770:	4b25      	ldr	r3, [pc, #148]	; (18808 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18772:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   18774:	687b      	ldr	r3, [r7, #4]
   18776:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18778:	68fb      	ldr	r3, [r7, #12]
   1877a:	2202      	movs	r2, #2
   1877c:	6878      	ldr	r0, [r7, #4]
   1877e:	4c23      	ldr	r4, [pc, #140]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18780:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   18782:	4b23      	ldr	r3, [pc, #140]	; (18810 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   18784:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   18786:	687b      	ldr	r3, [r7, #4]
   18788:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1878a:	68fb      	ldr	r3, [r7, #12]
   1878c:	2204      	movs	r2, #4
   1878e:	6878      	ldr	r0, [r7, #4]
   18790:	4c1e      	ldr	r4, [pc, #120]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18792:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   18794:	4b1c      	ldr	r3, [pc, #112]	; (18808 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18796:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   18798:	687b      	ldr	r3, [r7, #4]
   1879a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1879c:	68fb      	ldr	r3, [r7, #12]
   1879e:	2207      	movs	r2, #7
   187a0:	6878      	ldr	r0, [r7, #4]
   187a2:	4c1a      	ldr	r4, [pc, #104]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   187a4:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   187a6:	4b1b      	ldr	r3, [pc, #108]	; (18814 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   187a8:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   187aa:	687b      	ldr	r3, [r7, #4]
   187ac:	6d99      	ldr	r1, [r3, #88]	; 0x58
   187ae:	68fb      	ldr	r3, [r7, #12]
   187b0:	2209      	movs	r2, #9
   187b2:	6878      	ldr	r0, [r7, #4]
   187b4:	4c15      	ldr	r4, [pc, #84]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   187b6:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   187b8:	4b13      	ldr	r3, [pc, #76]	; (18808 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   187ba:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   187bc:	687b      	ldr	r3, [r7, #4]
   187be:	6d99      	ldr	r1, [r3, #88]	; 0x58
   187c0:	68fb      	ldr	r3, [r7, #12]
   187c2:	220c      	movs	r2, #12
   187c4:	6878      	ldr	r0, [r7, #4]
   187c6:	4c11      	ldr	r4, [pc, #68]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   187c8:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   187ca:	4b13      	ldr	r3, [pc, #76]	; (18818 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   187cc:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   187ce:	687b      	ldr	r3, [r7, #4]
   187d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   187d2:	68fb      	ldr	r3, [r7, #12]
   187d4:	220e      	movs	r2, #14
   187d6:	6878      	ldr	r0, [r7, #4]
   187d8:	4c0c      	ldr	r4, [pc, #48]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   187da:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   187dc:	4b0a      	ldr	r3, [pc, #40]	; (18808 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   187de:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   187e0:	687b      	ldr	r3, [r7, #4]
   187e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   187e4:	68fb      	ldr	r3, [r7, #12]
   187e6:	2211      	movs	r2, #17
   187e8:	6878      	ldr	r0, [r7, #4]
   187ea:	4c08      	ldr	r4, [pc, #32]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   187ec:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   187ee:	4b0b      	ldr	r3, [pc, #44]	; (1881c <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   187f0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   187f2:	687b      	ldr	r3, [r7, #4]
   187f4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   187f6:	68fb      	ldr	r3, [r7, #12]
   187f8:	2213      	movs	r2, #19
   187fa:	6878      	ldr	r0, [r7, #4]
   187fc:	4c03      	ldr	r4, [pc, #12]	; (1880c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   187fe:	47a0      	blx	r4

}
   18800:	bf00      	nop
   18802:	3714      	adds	r7, #20
   18804:	46bd      	mov	sp, r7
   18806:	bd90      	pop	{r4, r7, pc}
   18808:	e89c4000 	.word	0xe89c4000
   1880c:	00018361 	.word	0x00018361
   18810:	60a91000 	.word	0x60a91000
   18814:	61e91000 	.word	0x61e91000
   18818:	63291000 	.word	0x63291000
   1881c:	64691000 	.word	0x64691000

00018820 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   18820:	b590      	push	{r4, r7, lr}
   18822:	b085      	sub	sp, #20
   18824:	af02      	add	r7, sp, #8
   18826:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   18828:	687b      	ldr	r3, [r7, #4]
   1882a:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   1882c:	2300      	movs	r3, #0
   1882e:	9300      	str	r3, [sp, #0]
   18830:	23f0      	movs	r3, #240	; 0xf0
   18832:	2202      	movs	r2, #2
   18834:	6878      	ldr	r0, [r7, #4]
   18836:	4c07      	ldr	r4, [pc, #28]	; (18854 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18838:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   1883a:	687b      	ldr	r3, [r7, #4]
   1883c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1883e:	2300      	movs	r3, #0
   18840:	9300      	str	r3, [sp, #0]
   18842:	23ff      	movs	r3, #255	; 0xff
   18844:	2202      	movs	r2, #2
   18846:	6878      	ldr	r0, [r7, #4]
   18848:	4c02      	ldr	r4, [pc, #8]	; (18854 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1884a:	47a0      	blx	r4
}
   1884c:	bf00      	nop
   1884e:	370c      	adds	r7, #12
   18850:	46bd      	mov	sp, r7
   18852:	bd90      	pop	{r4, r7, pc}
   18854:	000186cd 	.word	0x000186cd

00018858 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   18858:	b580      	push	{r7, lr}
   1885a:	b082      	sub	sp, #8
   1885c:	af00      	add	r7, sp, #0
   1885e:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   18860:	687b      	ldr	r3, [r7, #4]
   18862:	2200      	movs	r2, #0
   18864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   18868:	687b      	ldr	r3, [r7, #4]
   1886a:	2200      	movs	r2, #0
   1886c:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   1886e:	4a31      	ldr	r2, [pc, #196]	; (18934 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   18870:	687b      	ldr	r3, [r7, #4]
   18872:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   18874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18878:	492f      	ldr	r1, [pc, #188]	; (18938 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1887a:	4830      	ldr	r0, [pc, #192]	; (1893c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   1887c:	4b30      	ldr	r3, [pc, #192]	; (18940 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   1887e:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18880:	687b      	ldr	r3, [r7, #4]
   18882:	79db      	ldrb	r3, [r3, #7]
   18884:	2b01      	cmp	r3, #1
   18886:	d009      	beq.n	1889c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18888:	687b      	ldr	r3, [r7, #4]
   1888a:	789b      	ldrb	r3, [r3, #2]
   1888c:	b2db      	uxtb	r3, r3
   1888e:	f083 0301 	eor.w	r3, r3, #1
   18892:	b2db      	uxtb	r3, r3
   18894:	2b00      	cmp	r3, #0
   18896:	d001      	beq.n	1889c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18898:	2301      	movs	r3, #1
   1889a:	e000      	b.n	1889e <_ZN13LTC2983_Class8SelfTestEv+0x46>
   1889c:	2300      	movs	r3, #0
   1889e:	2b00      	cmp	r3, #0
   188a0:	d034      	beq.n	1890c <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   188a2:	2100      	movs	r1, #0
   188a4:	6878      	ldr	r0, [r7, #4]
   188a6:	4b27      	ldr	r3, [pc, #156]	; (18944 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   188a8:	4798      	blx	r3
		delay_ms(1);
   188aa:	2001      	movs	r0, #1
   188ac:	4b26      	ldr	r3, [pc, #152]	; (18948 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   188ae:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   188b0:	687b      	ldr	r3, [r7, #4]
   188b2:	781b      	ldrb	r3, [r3, #0]
   188b4:	b2db      	uxtb	r3, r3
   188b6:	f083 0301 	eor.w	r3, r3, #1
   188ba:	b2db      	uxtb	r3, r3
   188bc:	2b00      	cmp	r3, #0
   188be:	d009      	beq.n	188d4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   188c0:	687b      	ldr	r3, [r7, #4]
   188c2:	789b      	ldrb	r3, [r3, #2]
   188c4:	b2db      	uxtb	r3, r3
   188c6:	f083 0301 	eor.w	r3, r3, #1
   188ca:	b2db      	uxtb	r3, r3
   188cc:	2b00      	cmp	r3, #0
   188ce:	d001      	beq.n	188d4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   188d0:	2301      	movs	r3, #1
   188d2:	e000      	b.n	188d6 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   188d4:	2300      	movs	r3, #0
   188d6:	2b00      	cmp	r3, #0
   188d8:	d000      	beq.n	188dc <_ZN13LTC2983_Class8SelfTestEv+0x84>
   188da:	e7e9      	b.n	188b0 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   188dc:	687b      	ldr	r3, [r7, #4]
   188de:	789b      	ldrb	r3, [r3, #2]
   188e0:	b2db      	uxtb	r3, r3
   188e2:	f083 0301 	eor.w	r3, r3, #1
   188e6:	b2db      	uxtb	r3, r3
   188e8:	2b00      	cmp	r3, #0
   188ea:	d0c9      	beq.n	18880 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   188ec:	687b      	ldr	r3, [r7, #4]
   188ee:	781b      	ldrb	r3, [r3, #0]
   188f0:	b2db      	uxtb	r3, r3
   188f2:	2b00      	cmp	r3, #0
   188f4:	d006      	beq.n	18904 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   188f6:	687b      	ldr	r3, [r7, #4]
   188f8:	78db      	ldrb	r3, [r3, #3]
   188fa:	4619      	mov	r1, r3
   188fc:	6878      	ldr	r0, [r7, #4]
   188fe:	4b13      	ldr	r3, [pc, #76]	; (1894c <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   18900:	4798      	blx	r3
   18902:	e7bd      	b.n	18880 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   18904:	2001      	movs	r0, #1
   18906:	4b10      	ldr	r3, [pc, #64]	; (18948 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18908:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1890a:	e7b9      	b.n	18880 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   1890c:	490a      	ldr	r1, [pc, #40]	; (18938 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1890e:	480b      	ldr	r0, [pc, #44]	; (1893c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18910:	4b0f      	ldr	r3, [pc, #60]	; (18950 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   18912:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   18914:	687b      	ldr	r3, [r7, #4]
   18916:	79db      	ldrb	r3, [r3, #7]
   18918:	2b01      	cmp	r3, #1
   1891a:	bf0c      	ite	eq
   1891c:	2301      	moveq	r3, #1
   1891e:	2300      	movne	r3, #0
   18920:	b2da      	uxtb	r2, r3
   18922:	687b      	ldr	r3, [r7, #4]
   18924:	771a      	strb	r2, [r3, #28]
	return	isOK;
   18926:	687b      	ldr	r3, [r7, #4]
   18928:	7f1b      	ldrb	r3, [r3, #28]
	}
   1892a:	4618      	mov	r0, r3
   1892c:	3708      	adds	r7, #8
   1892e:	46bd      	mov	sp, r7
   18930:	bd80      	pop	{r7, pc}
   18932:	bf00      	nop
   18934:	2000db48 	.word	0x2000db48
   18938:	00018279 	.word	0x00018279
   1893c:	2000da48 	.word	0x2000da48
   18940:	000103b5 	.word	0x000103b5
   18944:	000183b5 	.word	0x000183b5
   18948:	00003561 	.word	0x00003561
   1894c:	000184e9 	.word	0x000184e9
   18950:	0001035d 	.word	0x0001035d

00018954 <_Z41__static_initialization_and_destruction_0ii>:
   18954:	b580      	push	{r7, lr}
   18956:	b082      	sub	sp, #8
   18958:	af00      	add	r7, sp, #0
   1895a:	6078      	str	r0, [r7, #4]
   1895c:	6039      	str	r1, [r7, #0]
   1895e:	687b      	ldr	r3, [r7, #4]
   18960:	2b01      	cmp	r3, #1
   18962:	d14c      	bne.n	189fe <_Z41__static_initialization_and_destruction_0ii+0xaa>
   18964:	683b      	ldr	r3, [r7, #0]
   18966:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1896a:	4293      	cmp	r3, r2
   1896c:	d147      	bne.n	189fe <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1896e:	4926      	ldr	r1, [pc, #152]	; (18a08 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   18970:	4826      	ldr	r0, [pc, #152]	; (18a0c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   18972:	4b27      	ldr	r3, [pc, #156]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18974:	4798      	blx	r3
   18976:	4a27      	ldr	r2, [pc, #156]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18978:	4927      	ldr	r1, [pc, #156]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1897a:	4824      	ldr	r0, [pc, #144]	; (18a0c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1897c:	4b27      	ldr	r3, [pc, #156]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1897e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   18980:	4927      	ldr	r1, [pc, #156]	; (18a20 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   18982:	4828      	ldr	r0, [pc, #160]	; (18a24 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   18984:	4b22      	ldr	r3, [pc, #136]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18986:	4798      	blx	r3
   18988:	4a22      	ldr	r2, [pc, #136]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1898a:	4923      	ldr	r1, [pc, #140]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1898c:	4825      	ldr	r0, [pc, #148]	; (18a24 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1898e:	4b23      	ldr	r3, [pc, #140]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18990:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   18992:	4925      	ldr	r1, [pc, #148]	; (18a28 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   18994:	4825      	ldr	r0, [pc, #148]	; (18a2c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   18996:	4b1e      	ldr	r3, [pc, #120]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18998:	4798      	blx	r3
   1899a:	4a1e      	ldr	r2, [pc, #120]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1899c:	491e      	ldr	r1, [pc, #120]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1899e:	4823      	ldr	r0, [pc, #140]	; (18a2c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   189a0:	4b1e      	ldr	r3, [pc, #120]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   189a2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   189a4:	4922      	ldr	r1, [pc, #136]	; (18a30 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   189a6:	4823      	ldr	r0, [pc, #140]	; (18a34 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   189a8:	4b19      	ldr	r3, [pc, #100]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   189aa:	4798      	blx	r3
   189ac:	4a19      	ldr	r2, [pc, #100]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   189ae:	491a      	ldr	r1, [pc, #104]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   189b0:	4820      	ldr	r0, [pc, #128]	; (18a34 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   189b2:	4b1a      	ldr	r3, [pc, #104]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   189b4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   189b6:	4920      	ldr	r1, [pc, #128]	; (18a38 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   189b8:	4820      	ldr	r0, [pc, #128]	; (18a3c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   189ba:	4b15      	ldr	r3, [pc, #84]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   189bc:	4798      	blx	r3
   189be:	4a15      	ldr	r2, [pc, #84]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   189c0:	4915      	ldr	r1, [pc, #84]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   189c2:	481e      	ldr	r0, [pc, #120]	; (18a3c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   189c4:	4b15      	ldr	r3, [pc, #84]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   189c6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   189c8:	491d      	ldr	r1, [pc, #116]	; (18a40 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   189ca:	481e      	ldr	r0, [pc, #120]	; (18a44 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   189cc:	4b10      	ldr	r3, [pc, #64]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   189ce:	4798      	blx	r3
   189d0:	4a10      	ldr	r2, [pc, #64]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   189d2:	4911      	ldr	r1, [pc, #68]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   189d4:	481b      	ldr	r0, [pc, #108]	; (18a44 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   189d6:	4b11      	ldr	r3, [pc, #68]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   189d8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   189da:	491b      	ldr	r1, [pc, #108]	; (18a48 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   189dc:	481b      	ldr	r0, [pc, #108]	; (18a4c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   189de:	4b0c      	ldr	r3, [pc, #48]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   189e0:	4798      	blx	r3
   189e2:	4a0c      	ldr	r2, [pc, #48]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   189e4:	490c      	ldr	r1, [pc, #48]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   189e6:	4819      	ldr	r0, [pc, #100]	; (18a4c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   189e8:	4b0c      	ldr	r3, [pc, #48]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   189ea:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   189ec:	4918      	ldr	r1, [pc, #96]	; (18a50 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   189ee:	4819      	ldr	r0, [pc, #100]	; (18a54 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   189f0:	4b07      	ldr	r3, [pc, #28]	; (18a10 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   189f2:	4798      	blx	r3
   189f4:	4a07      	ldr	r2, [pc, #28]	; (18a14 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   189f6:	4908      	ldr	r1, [pc, #32]	; (18a18 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   189f8:	4816      	ldr	r0, [pc, #88]	; (18a54 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   189fa:	4b08      	ldr	r3, [pc, #32]	; (18a1c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   189fc:	4798      	blx	r3
   189fe:	bf00      	nop
   18a00:	3708      	adds	r7, #8
   18a02:	46bd      	mov	sp, r7
   18a04:	bd80      	pop	{r7, pc}
   18a06:	bf00      	nop
   18a08:	2000deb0 	.word	0x2000deb0
   18a0c:	2000da48 	.word	0x2000da48
   18a10:	000100e1 	.word	0x000100e1
   18a14:	20000000 	.word	0x20000000
   18a18:	00010119 	.word	0x00010119
   18a1c:	00019fb9 	.word	0x00019fb9
   18a20:	2000df44 	.word	0x2000df44
   18a24:	2000da68 	.word	0x2000da68
   18a28:	2000e068 	.word	0x2000e068
   18a2c:	2000da88 	.word	0x2000da88
   18a30:	2000df64 	.word	0x2000df64
   18a34:	2000daa8 	.word	0x2000daa8
   18a38:	2000e028 	.word	0x2000e028
   18a3c:	2000dac8 	.word	0x2000dac8
   18a40:	2000e048 	.word	0x2000e048
   18a44:	2000dae8 	.word	0x2000dae8
   18a48:	2000df20 	.word	0x2000df20
   18a4c:	2000db08 	.word	0x2000db08
   18a50:	2000dfc0 	.word	0x2000dfc0
   18a54:	2000db28 	.word	0x2000db28

00018a58 <_GLOBAL__sub_I_ptrLTCClass>:
   18a58:	b580      	push	{r7, lr}
   18a5a:	af00      	add	r7, sp, #0
   18a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18a60:	2001      	movs	r0, #1
   18a62:	4b01      	ldr	r3, [pc, #4]	; (18a68 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   18a64:	4798      	blx	r3
   18a66:	bd80      	pop	{r7, pc}
   18a68:	00018955 	.word	0x00018955

00018a6c <hri_port_set_OUT_reg>:
{
   18a6c:	b480      	push	{r7}
   18a6e:	b085      	sub	sp, #20
   18a70:	af00      	add	r7, sp, #0
   18a72:	60f8      	str	r0, [r7, #12]
   18a74:	460b      	mov	r3, r1
   18a76:	607a      	str	r2, [r7, #4]
   18a78:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   18a7a:	7afb      	ldrb	r3, [r7, #11]
   18a7c:	68fa      	ldr	r2, [r7, #12]
   18a7e:	01db      	lsls	r3, r3, #7
   18a80:	4413      	add	r3, r2
   18a82:	3318      	adds	r3, #24
   18a84:	687a      	ldr	r2, [r7, #4]
   18a86:	601a      	str	r2, [r3, #0]
}
   18a88:	bf00      	nop
   18a8a:	3714      	adds	r7, #20
   18a8c:	46bd      	mov	sp, r7
   18a8e:	bc80      	pop	{r7}
   18a90:	4770      	bx	lr

00018a92 <hri_port_clear_OUT_reg>:
{
   18a92:	b480      	push	{r7}
   18a94:	b085      	sub	sp, #20
   18a96:	af00      	add	r7, sp, #0
   18a98:	60f8      	str	r0, [r7, #12]
   18a9a:	460b      	mov	r3, r1
   18a9c:	607a      	str	r2, [r7, #4]
   18a9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   18aa0:	7afb      	ldrb	r3, [r7, #11]
   18aa2:	68fa      	ldr	r2, [r7, #12]
   18aa4:	01db      	lsls	r3, r3, #7
   18aa6:	4413      	add	r3, r2
   18aa8:	3314      	adds	r3, #20
   18aaa:	687a      	ldr	r2, [r7, #4]
   18aac:	601a      	str	r2, [r3, #0]
}
   18aae:	bf00      	nop
   18ab0:	3714      	adds	r7, #20
   18ab2:	46bd      	mov	sp, r7
   18ab4:	bc80      	pop	{r7}
   18ab6:	4770      	bx	lr

00018ab8 <_gpio_set_level>:
{
   18ab8:	b580      	push	{r7, lr}
   18aba:	b082      	sub	sp, #8
   18abc:	af00      	add	r7, sp, #0
   18abe:	4603      	mov	r3, r0
   18ac0:	6039      	str	r1, [r7, #0]
   18ac2:	71fb      	strb	r3, [r7, #7]
   18ac4:	4613      	mov	r3, r2
   18ac6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   18ac8:	79bb      	ldrb	r3, [r7, #6]
   18aca:	2b00      	cmp	r3, #0
   18acc:	d006      	beq.n	18adc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   18ace:	79fb      	ldrb	r3, [r7, #7]
   18ad0:	683a      	ldr	r2, [r7, #0]
   18ad2:	4619      	mov	r1, r3
   18ad4:	4806      	ldr	r0, [pc, #24]	; (18af0 <_gpio_set_level+0x38>)
   18ad6:	4b07      	ldr	r3, [pc, #28]	; (18af4 <_gpio_set_level+0x3c>)
   18ad8:	4798      	blx	r3
}
   18ada:	e005      	b.n	18ae8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   18adc:	79fb      	ldrb	r3, [r7, #7]
   18ade:	683a      	ldr	r2, [r7, #0]
   18ae0:	4619      	mov	r1, r3
   18ae2:	4803      	ldr	r0, [pc, #12]	; (18af0 <_gpio_set_level+0x38>)
   18ae4:	4b04      	ldr	r3, [pc, #16]	; (18af8 <_gpio_set_level+0x40>)
   18ae6:	4798      	blx	r3
}
   18ae8:	bf00      	nop
   18aea:	3708      	adds	r7, #8
   18aec:	46bd      	mov	sp, r7
   18aee:	bd80      	pop	{r7, pc}
   18af0:	41008000 	.word	0x41008000
   18af4:	00018a6d 	.word	0x00018a6d
   18af8:	00018a93 	.word	0x00018a93

00018afc <gpio_set_pin_level>:
{
   18afc:	b580      	push	{r7, lr}
   18afe:	b082      	sub	sp, #8
   18b00:	af00      	add	r7, sp, #0
   18b02:	4603      	mov	r3, r0
   18b04:	460a      	mov	r2, r1
   18b06:	71fb      	strb	r3, [r7, #7]
   18b08:	4613      	mov	r3, r2
   18b0a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   18b0c:	79fb      	ldrb	r3, [r7, #7]
   18b0e:	115b      	asrs	r3, r3, #5
   18b10:	b2d8      	uxtb	r0, r3
   18b12:	79fb      	ldrb	r3, [r7, #7]
   18b14:	f003 031f 	and.w	r3, r3, #31
   18b18:	2201      	movs	r2, #1
   18b1a:	fa02 f303 	lsl.w	r3, r2, r3
   18b1e:	79ba      	ldrb	r2, [r7, #6]
   18b20:	4619      	mov	r1, r3
   18b22:	4b03      	ldr	r3, [pc, #12]	; (18b30 <gpio_set_pin_level+0x34>)
   18b24:	4798      	blx	r3
}
   18b26:	bf00      	nop
   18b28:	3708      	adds	r7, #8
   18b2a:	46bd      	mov	sp, r7
   18b2c:	bd80      	pop	{r7, pc}
   18b2e:	bf00      	nop
   18b30:	00018ab9 	.word	0x00018ab9

00018b34 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   18b34:	b480      	push	{r7}
   18b36:	b083      	sub	sp, #12
   18b38:	af00      	add	r7, sp, #0
   18b3a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   18b3c:	4a05      	ldr	r2, [pc, #20]	; (18b54 <_ZN6LT_SPIC1Ev+0x20>)
   18b3e:	687b      	ldr	r3, [r7, #4]
   18b40:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   18b42:	687b      	ldr	r3, [r7, #4]
   18b44:	4a04      	ldr	r2, [pc, #16]	; (18b58 <_ZN6LT_SPIC1Ev+0x24>)
   18b46:	605a      	str	r2, [r3, #4]
} //LT_SPI
   18b48:	687b      	ldr	r3, [r7, #4]
   18b4a:	4618      	mov	r0, r3
   18b4c:	370c      	adds	r7, #12
   18b4e:	46bd      	mov	sp, r7
   18b50:	bc80      	pop	{r7}
   18b52:	4770      	bx	lr
   18b54:	2000db4c 	.word	0x2000db4c
   18b58:	2000db50 	.word	0x2000db50

00018b5c <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   18b5c:	b480      	push	{r7}
   18b5e:	b083      	sub	sp, #12
   18b60:	af00      	add	r7, sp, #0
   18b62:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   18b64:	687b      	ldr	r3, [r7, #4]
   18b66:	4618      	mov	r0, r3
   18b68:	370c      	adds	r7, #12
   18b6a:	46bd      	mov	sp, r7
   18b6c:	bc80      	pop	{r7}
   18b6e:	4770      	bx	lr

00018b70 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   18b70:	b580      	push	{r7, lr}
   18b72:	b082      	sub	sp, #8
   18b74:	af00      	add	r7, sp, #0
   18b76:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   18b78:	687b      	ldr	r3, [r7, #4]
   18b7a:	685a      	ldr	r2, [r3, #4]
   18b7c:	687b      	ldr	r3, [r7, #4]
   18b7e:	691b      	ldr	r3, [r3, #16]
   18b80:	4619      	mov	r1, r3
   18b82:	4610      	mov	r0, r2
   18b84:	4b0e      	ldr	r3, [pc, #56]	; (18bc0 <_ZN6LT_SPI4initEv+0x50>)
   18b86:	4798      	blx	r3
	spiTemp->init();
   18b88:	687b      	ldr	r3, [r7, #4]
   18b8a:	685b      	ldr	r3, [r3, #4]
   18b8c:	4618      	mov	r0, r3
   18b8e:	4b0d      	ldr	r3, [pc, #52]	; (18bc4 <_ZN6LT_SPI4initEv+0x54>)
   18b90:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   18b92:	687b      	ldr	r3, [r7, #4]
   18b94:	685b      	ldr	r3, [r3, #4]
   18b96:	685a      	ldr	r2, [r3, #4]
   18b98:	687b      	ldr	r3, [r7, #4]
   18b9a:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   18b9c:	687b      	ldr	r3, [r7, #4]
   18b9e:	685b      	ldr	r3, [r3, #4]
   18ba0:	689a      	ldr	r2, [r3, #8]
   18ba2:	687b      	ldr	r3, [r7, #4]
   18ba4:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   18ba6:	687b      	ldr	r3, [r7, #4]
   18ba8:	685b      	ldr	r3, [r3, #4]
   18baa:	4618      	mov	r0, r3
   18bac:	4b06      	ldr	r3, [pc, #24]	; (18bc8 <_ZN6LT_SPI4initEv+0x58>)
   18bae:	4798      	blx	r3
	ready=true;
   18bb0:	687b      	ldr	r3, [r7, #4]
   18bb2:	2201      	movs	r2, #1
   18bb4:	701a      	strb	r2, [r3, #0]
}
   18bb6:	bf00      	nop
   18bb8:	3708      	adds	r7, #8
   18bba:	46bd      	mov	sp, r7
   18bbc:	bd80      	pop	{r7, pc}
   18bbe:	bf00      	nop
   18bc0:	00018e19 	.word	0x00018e19
   18bc4:	00018dd1 	.word	0x00018dd1
   18bc8:	00018e3d 	.word	0x00018e3d

00018bcc <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   18bcc:	b480      	push	{r7}
   18bce:	b083      	sub	sp, #12
   18bd0:	af00      	add	r7, sp, #0
   18bd2:	6078      	str	r0, [r7, #4]
   18bd4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   18bd6:	687b      	ldr	r3, [r7, #4]
   18bd8:	683a      	ldr	r2, [r7, #0]
   18bda:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   18bdc:	4a03      	ldr	r2, [pc, #12]	; (18bec <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   18bde:	687b      	ldr	r3, [r7, #4]
   18be0:	6013      	str	r3, [r2, #0]
}
   18be2:	bf00      	nop
   18be4:	370c      	adds	r7, #12
   18be6:	46bd      	mov	sp, r7
   18be8:	bc80      	pop	{r7}
   18bea:	4770      	bx	lr
   18bec:	2000db4c 	.word	0x2000db4c

00018bf0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   18bf0:	b580      	push	{r7, lr}
   18bf2:	b086      	sub	sp, #24
   18bf4:	af00      	add	r7, sp, #0
   18bf6:	60f8      	str	r0, [r7, #12]
   18bf8:	60b9      	str	r1, [r7, #8]
   18bfa:	607a      	str	r2, [r7, #4]
   18bfc:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   18bfe:	687b      	ldr	r3, [r7, #4]
   18c00:	781b      	ldrb	r3, [r3, #0]
   18c02:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   18c04:	68b9      	ldr	r1, [r7, #8]
   18c06:	68f8      	ldr	r0, [r7, #12]
   18c08:	4b25      	ldr	r3, [pc, #148]	; (18ca0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   18c0a:	4798      	blx	r3
	
	switch(rOrw){
   18c0c:	7dfb      	ldrb	r3, [r7, #23]
   18c0e:	2b02      	cmp	r3, #2
   18c10:	d002      	beq.n	18c18 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   18c12:	2b03      	cmp	r3, #3
   18c14:	d009      	beq.n	18c2a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   18c16:	e028      	b.n	18c6a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   18c18:	68fb      	ldr	r3, [r7, #12]
   18c1a:	685b      	ldr	r3, [r3, #4]
   18c1c:	f897 2020 	ldrb.w	r2, [r7, #32]
   18c20:	6879      	ldr	r1, [r7, #4]
   18c22:	4618      	mov	r0, r3
   18c24:	4b1f      	ldr	r3, [pc, #124]	; (18ca4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18c26:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   18c28:	e031      	b.n	18c8e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   18c2a:	68fb      	ldr	r3, [r7, #12]
   18c2c:	685b      	ldr	r3, [r3, #4]
   18c2e:	2203      	movs	r2, #3
   18c30:	6879      	ldr	r1, [r7, #4]
   18c32:	4618      	mov	r0, r3
   18c34:	4b1b      	ldr	r3, [pc, #108]	; (18ca4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18c36:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   18c38:	f897 3020 	ldrb.w	r3, [r7, #32]
   18c3c:	2b04      	cmp	r3, #4
   18c3e:	dd0b      	ble.n	18c58 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   18c40:	68fb      	ldr	r3, [r7, #12]
   18c42:	6858      	ldr	r0, [r3, #4]
   18c44:	f897 3020 	ldrb.w	r3, [r7, #32]
   18c48:	3b03      	subs	r3, #3
   18c4a:	461a      	mov	r2, r3
   18c4c:	6839      	ldr	r1, [r7, #0]
   18c4e:	4b16      	ldr	r3, [pc, #88]	; (18ca8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   18c50:	4798      	blx	r3
					asm("nop");
   18c52:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   18c54:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   18c56:	e01a      	b.n	18c8e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   18c58:	68fb      	ldr	r3, [r7, #12]
   18c5a:	685b      	ldr	r3, [r3, #4]
   18c5c:	2201      	movs	r2, #1
   18c5e:	6839      	ldr	r1, [r7, #0]
   18c60:	4618      	mov	r0, r3
   18c62:	4b11      	ldr	r3, [pc, #68]	; (18ca8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   18c64:	4798      	blx	r3
				asm("nop");
   18c66:	bf00      	nop
			break;
   18c68:	e011      	b.n	18c8e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   18c6a:	68fb      	ldr	r3, [r7, #12]
   18c6c:	685b      	ldr	r3, [r3, #4]
   18c6e:	f897 2020 	ldrb.w	r2, [r7, #32]
   18c72:	6879      	ldr	r1, [r7, #4]
   18c74:	4618      	mov	r0, r3
   18c76:	4b0b      	ldr	r3, [pc, #44]	; (18ca4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18c78:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   18c7a:	68fb      	ldr	r3, [r7, #12]
   18c7c:	6858      	ldr	r0, [r3, #4]
   18c7e:	f897 3020 	ldrb.w	r3, [r7, #32]
   18c82:	3b03      	subs	r3, #3
   18c84:	461a      	mov	r2, r3
   18c86:	6839      	ldr	r1, [r7, #0]
   18c88:	4b07      	ldr	r3, [pc, #28]	; (18ca8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   18c8a:	4798      	blx	r3
			break;
   18c8c:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   18c8e:	68b9      	ldr	r1, [r7, #8]
   18c90:	68f8      	ldr	r0, [r7, #12]
   18c92:	4b06      	ldr	r3, [pc, #24]	; (18cac <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   18c94:	4798      	blx	r3
	asm("nop");
   18c96:	bf00      	nop
	
}
   18c98:	bf00      	nop
   18c9a:	3718      	adds	r7, #24
   18c9c:	46bd      	mov	sp, r7
   18c9e:	bd80      	pop	{r7, pc}
   18ca0:	00018cb1 	.word	0x00018cb1
   18ca4:	00018e79 	.word	0x00018e79
   18ca8:	00018ebd 	.word	0x00018ebd
   18cac:	00018cf9 	.word	0x00018cf9

00018cb0 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   18cb0:	b580      	push	{r7, lr}
   18cb2:	b082      	sub	sp, #8
   18cb4:	af00      	add	r7, sp, #0
   18cb6:	6078      	str	r0, [r7, #4]
   18cb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   18cba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   18cbe:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   18cc0:	683b      	ldr	r3, [r7, #0]
   18cc2:	b2db      	uxtb	r3, r3
   18cc4:	2100      	movs	r1, #0
   18cc6:	4618      	mov	r0, r3
   18cc8:	4b08      	ldr	r3, [pc, #32]	; (18cec <_ZN6LT_SPI4OpenEm+0x3c>)
   18cca:	4798      	blx	r3
	 delay_us(10);
   18ccc:	200a      	movs	r0, #10
   18cce:	4b08      	ldr	r3, [pc, #32]	; (18cf0 <_ZN6LT_SPI4OpenEm+0x40>)
   18cd0:	4798      	blx	r3
	spiTemp->Enable();
   18cd2:	687b      	ldr	r3, [r7, #4]
   18cd4:	685b      	ldr	r3, [r3, #4]
   18cd6:	4618      	mov	r0, r3
   18cd8:	4b06      	ldr	r3, [pc, #24]	; (18cf4 <_ZN6LT_SPI4OpenEm+0x44>)
   18cda:	4798      	blx	r3
	 delay_us(10);
   18cdc:	200a      	movs	r0, #10
   18cde:	4b04      	ldr	r3, [pc, #16]	; (18cf0 <_ZN6LT_SPI4OpenEm+0x40>)
   18ce0:	4798      	blx	r3
 }
   18ce2:	bf00      	nop
   18ce4:	3708      	adds	r7, #8
   18ce6:	46bd      	mov	sp, r7
   18ce8:	bd80      	pop	{r7, pc}
   18cea:	bf00      	nop
   18cec:	00018afd 	.word	0x00018afd
   18cf0:	0000352d 	.word	0x0000352d
   18cf4:	00018e3d 	.word	0x00018e3d

00018cf8 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   18cf8:	b580      	push	{r7, lr}
   18cfa:	b082      	sub	sp, #8
   18cfc:	af00      	add	r7, sp, #0
   18cfe:	6078      	str	r0, [r7, #4]
   18d00:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   18d02:	200a      	movs	r0, #10
   18d04:	4b0b      	ldr	r3, [pc, #44]	; (18d34 <_ZN6LT_SPI5CloseEm+0x3c>)
   18d06:	4798      	blx	r3
	 spiTemp->Disable();
   18d08:	687b      	ldr	r3, [r7, #4]
   18d0a:	685b      	ldr	r3, [r3, #4]
   18d0c:	4618      	mov	r0, r3
   18d0e:	4b0a      	ldr	r3, [pc, #40]	; (18d38 <_ZN6LT_SPI5CloseEm+0x40>)
   18d10:	4798      	blx	r3
	delay_us(10);
   18d12:	200a      	movs	r0, #10
   18d14:	4b07      	ldr	r3, [pc, #28]	; (18d34 <_ZN6LT_SPI5CloseEm+0x3c>)
   18d16:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   18d18:	683b      	ldr	r3, [r7, #0]
   18d1a:	b2db      	uxtb	r3, r3
   18d1c:	2101      	movs	r1, #1
   18d1e:	4618      	mov	r0, r3
   18d20:	4b06      	ldr	r3, [pc, #24]	; (18d3c <_ZN6LT_SPI5CloseEm+0x44>)
   18d22:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   18d24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18d28:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   18d2a:	bf00      	nop
   18d2c:	3708      	adds	r7, #8
   18d2e:	46bd      	mov	sp, r7
   18d30:	bd80      	pop	{r7, pc}
   18d32:	bf00      	nop
   18d34:	0000352d 	.word	0x0000352d
   18d38:	00018f01 	.word	0x00018f01
   18d3c:	00018afd 	.word	0x00018afd

00018d40 <_Z41__static_initialization_and_destruction_0ii>:
   18d40:	b580      	push	{r7, lr}
   18d42:	b082      	sub	sp, #8
   18d44:	af00      	add	r7, sp, #0
   18d46:	6078      	str	r0, [r7, #4]
   18d48:	6039      	str	r1, [r7, #0]
   18d4a:	687b      	ldr	r3, [r7, #4]
   18d4c:	2b01      	cmp	r3, #1
   18d4e:	d10c      	bne.n	18d6a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18d50:	683b      	ldr	r3, [r7, #0]
   18d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18d56:	4293      	cmp	r3, r2
   18d58:	d107      	bne.n	18d6a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   18d5a:	4806      	ldr	r0, [pc, #24]	; (18d74 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18d5c:	4b06      	ldr	r3, [pc, #24]	; (18d78 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   18d5e:	4798      	blx	r3
   18d60:	4a06      	ldr	r2, [pc, #24]	; (18d7c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   18d62:	4907      	ldr	r1, [pc, #28]	; (18d80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   18d64:	4803      	ldr	r0, [pc, #12]	; (18d74 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18d66:	4b07      	ldr	r3, [pc, #28]	; (18d84 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   18d68:	4798      	blx	r3
   18d6a:	bf00      	nop
   18d6c:	3708      	adds	r7, #8
   18d6e:	46bd      	mov	sp, r7
   18d70:	bd80      	pop	{r7, pc}
   18d72:	bf00      	nop
   18d74:	2000db50 	.word	0x2000db50
   18d78:	00018d9d 	.word	0x00018d9d
   18d7c:	20000000 	.word	0x20000000
   18d80:	00018dbd 	.word	0x00018dbd
   18d84:	00019fb9 	.word	0x00019fb9

00018d88 <_GLOBAL__sub_I_ptrLTSPIClass>:
   18d88:	b580      	push	{r7, lr}
   18d8a:	af00      	add	r7, sp, #0
   18d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d90:	2001      	movs	r0, #1
   18d92:	4b01      	ldr	r3, [pc, #4]	; (18d98 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   18d94:	4798      	blx	r3
   18d96:	bd80      	pop	{r7, pc}
   18d98:	00018d41 	.word	0x00018d41

00018d9c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   18d9c:	b480      	push	{r7}
   18d9e:	b083      	sub	sp, #12
   18da0:	af00      	add	r7, sp, #0
   18da2:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   18da4:	4a04      	ldr	r2, [pc, #16]	; (18db8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   18da6:	687b      	ldr	r3, [r7, #4]
   18da8:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   18daa:	687b      	ldr	r3, [r7, #4]
   18dac:	4618      	mov	r0, r3
   18dae:	370c      	adds	r7, #12
   18db0:	46bd      	mov	sp, r7
   18db2:	bc80      	pop	{r7}
   18db4:	4770      	bx	lr
   18db6:	bf00      	nop
   18db8:	2000db6c 	.word	0x2000db6c

00018dbc <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   18dbc:	b480      	push	{r7}
   18dbe:	b083      	sub	sp, #12
   18dc0:	af00      	add	r7, sp, #0
   18dc2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   18dc4:	687b      	ldr	r3, [r7, #4]
   18dc6:	4618      	mov	r0, r3
   18dc8:	370c      	adds	r7, #12
   18dca:	46bd      	mov	sp, r7
   18dcc:	bc80      	pop	{r7}
   18dce:	4770      	bx	lr

00018dd0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   18dd0:	b580      	push	{r7, lr}
   18dd2:	b082      	sub	sp, #8
   18dd4:	af00      	add	r7, sp, #0
   18dd6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   18dd8:	687b      	ldr	r3, [r7, #4]
   18dda:	68da      	ldr	r2, [r3, #12]
   18ddc:	687b      	ldr	r3, [r7, #4]
   18dde:	3310      	adds	r3, #16
   18de0:	4619      	mov	r1, r3
   18de2:	4610      	mov	r0, r2
   18de4:	4b09      	ldr	r3, [pc, #36]	; (18e0c <_ZN13SPI_Syn_Class4initEv+0x3c>)
   18de6:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   18de8:	687b      	ldr	r3, [r7, #4]
   18dea:	68db      	ldr	r3, [r3, #12]
   18dec:	4618      	mov	r0, r3
   18dee:	4b08      	ldr	r3, [pc, #32]	; (18e10 <_ZN13SPI_Syn_Class4initEv+0x40>)
   18df0:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   18df2:	687b      	ldr	r3, [r7, #4]
   18df4:	4a07      	ldr	r2, [pc, #28]	; (18e14 <_ZN13SPI_Syn_Class4initEv+0x44>)
   18df6:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   18df8:	687b      	ldr	r3, [r7, #4]
   18dfa:	4a06      	ldr	r2, [pc, #24]	; (18e14 <_ZN13SPI_Syn_Class4initEv+0x44>)
   18dfc:	609a      	str	r2, [r3, #8]
	ready=true;
   18dfe:	687b      	ldr	r3, [r7, #4]
   18e00:	2201      	movs	r2, #1
   18e02:	701a      	strb	r2, [r3, #0]
	
}
   18e04:	bf00      	nop
   18e06:	3708      	adds	r7, #8
   18e08:	46bd      	mov	sp, r7
   18e0a:	bd80      	pop	{r7, pc}
   18e0c:	00003d35 	.word	0x00003d35
   18e10:	00003ba9 	.word	0x00003ba9
   18e14:	2000db70 	.word	0x2000db70

00018e18 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   18e18:	b480      	push	{r7}
   18e1a:	b083      	sub	sp, #12
   18e1c:	af00      	add	r7, sp, #0
   18e1e:	6078      	str	r0, [r7, #4]
   18e20:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   18e22:	4a05      	ldr	r2, [pc, #20]	; (18e38 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   18e24:	687b      	ldr	r3, [r7, #4]
   18e26:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   18e28:	687b      	ldr	r3, [r7, #4]
   18e2a:	683a      	ldr	r2, [r7, #0]
   18e2c:	60da      	str	r2, [r3, #12]
}
   18e2e:	bf00      	nop
   18e30:	370c      	adds	r7, #12
   18e32:	46bd      	mov	sp, r7
   18e34:	bc80      	pop	{r7}
   18e36:	4770      	bx	lr
   18e38:	2000db6c 	.word	0x2000db6c

00018e3c <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   18e3c:	b580      	push	{r7, lr}
   18e3e:	b082      	sub	sp, #8
   18e40:	af00      	add	r7, sp, #0
   18e42:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   18e44:	687b      	ldr	r3, [r7, #4]
   18e46:	68da      	ldr	r2, [r3, #12]
   18e48:	687b      	ldr	r3, [r7, #4]
   18e4a:	3310      	adds	r3, #16
   18e4c:	4619      	mov	r1, r3
   18e4e:	4610      	mov	r0, r2
   18e50:	4b07      	ldr	r3, [pc, #28]	; (18e70 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   18e52:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   18e54:	687b      	ldr	r3, [r7, #4]
   18e56:	68db      	ldr	r3, [r3, #12]
   18e58:	4618      	mov	r0, r3
   18e5a:	4b06      	ldr	r3, [pc, #24]	; (18e74 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   18e5c:	4798      	blx	r3
	ready=true;
   18e5e:	687b      	ldr	r3, [r7, #4]
   18e60:	2201      	movs	r2, #1
   18e62:	701a      	strb	r2, [r3, #0]
	return 0;
   18e64:	2300      	movs	r3, #0
}
   18e66:	4618      	mov	r0, r3
   18e68:	3708      	adds	r7, #8
   18e6a:	46bd      	mov	sp, r7
   18e6c:	bd80      	pop	{r7, pc}
   18e6e:	bf00      	nop
   18e70:	00003d35 	.word	0x00003d35
   18e74:	00003ba9 	.word	0x00003ba9

00018e78 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   18e78:	b580      	push	{r7, lr}
   18e7a:	b086      	sub	sp, #24
   18e7c:	af00      	add	r7, sp, #0
   18e7e:	60f8      	str	r0, [r7, #12]
   18e80:	60b9      	str	r1, [r7, #8]
   18e82:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   18e84:	68fb      	ldr	r3, [r7, #12]
   18e86:	2201      	movs	r2, #1
   18e88:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   18e8a:	68fb      	ldr	r3, [r7, #12]
   18e8c:	691b      	ldr	r3, [r3, #16]
   18e8e:	687a      	ldr	r2, [r7, #4]
   18e90:	b292      	uxth	r2, r2
   18e92:	68b9      	ldr	r1, [r7, #8]
   18e94:	4618      	mov	r0, r3
   18e96:	4b08      	ldr	r3, [pc, #32]	; (18eb8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   18e98:	4798      	blx	r3
   18e9a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   18e9c:	697b      	ldr	r3, [r7, #20]
   18e9e:	2b00      	cmp	r3, #0
   18ea0:	bf14      	ite	ne
   18ea2:	2301      	movne	r3, #1
   18ea4:	2300      	moveq	r3, #0
   18ea6:	b2da      	uxtb	r2, r3
   18ea8:	68fb      	ldr	r3, [r7, #12]
   18eaa:	761a      	strb	r2, [r3, #24]
	 return w;
   18eac:	697b      	ldr	r3, [r7, #20]
	
}
   18eae:	4618      	mov	r0, r3
   18eb0:	3718      	adds	r7, #24
   18eb2:	46bd      	mov	sp, r7
   18eb4:	bd80      	pop	{r7, pc}
   18eb6:	bf00      	nop
   18eb8:	00017eed 	.word	0x00017eed

00018ebc <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   18ebc:	b580      	push	{r7, lr}
   18ebe:	b086      	sub	sp, #24
   18ec0:	af00      	add	r7, sp, #0
   18ec2:	60f8      	str	r0, [r7, #12]
   18ec4:	60b9      	str	r1, [r7, #8]
   18ec6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   18ec8:	68fb      	ldr	r3, [r7, #12]
   18eca:	2201      	movs	r2, #1
   18ecc:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   18ece:	68fb      	ldr	r3, [r7, #12]
   18ed0:	691b      	ldr	r3, [r3, #16]
   18ed2:	687a      	ldr	r2, [r7, #4]
   18ed4:	b292      	uxth	r2, r2
   18ed6:	68b9      	ldr	r1, [r7, #8]
   18ed8:	4618      	mov	r0, r3
   18eda:	4b08      	ldr	r3, [pc, #32]	; (18efc <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   18edc:	4798      	blx	r3
   18ede:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   18ee0:	697b      	ldr	r3, [r7, #20]
   18ee2:	2b00      	cmp	r3, #0
   18ee4:	bf14      	ite	ne
   18ee6:	2301      	movne	r3, #1
   18ee8:	2300      	moveq	r3, #0
   18eea:	b2da      	uxtb	r2, r3
   18eec:	68fb      	ldr	r3, [r7, #12]
   18eee:	765a      	strb	r2, [r3, #25]
	return  r;
   18ef0:	697b      	ldr	r3, [r7, #20]
}
   18ef2:	4618      	mov	r0, r3
   18ef4:	3718      	adds	r7, #24
   18ef6:	46bd      	mov	sp, r7
   18ef8:	bd80      	pop	{r7, pc}
   18efa:	bf00      	nop
   18efc:	00017f3d 	.word	0x00017f3d

00018f00 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   18f00:	b580      	push	{r7, lr}
   18f02:	b082      	sub	sp, #8
   18f04:	af00      	add	r7, sp, #0
   18f06:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   18f08:	687b      	ldr	r3, [r7, #4]
   18f0a:	68db      	ldr	r3, [r3, #12]
   18f0c:	4618      	mov	r0, r3
   18f0e:	4b03      	ldr	r3, [pc, #12]	; (18f1c <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   18f10:	4798      	blx	r3
	
}
   18f12:	bf00      	nop
   18f14:	3708      	adds	r7, #8
   18f16:	46bd      	mov	sp, r7
   18f18:	bd80      	pop	{r7, pc}
   18f1a:	bf00      	nop
   18f1c:	00003be5 	.word	0x00003be5

00018f20 <hri_port_set_DIR_reg>:
{
   18f20:	b480      	push	{r7}
   18f22:	b085      	sub	sp, #20
   18f24:	af00      	add	r7, sp, #0
   18f26:	60f8      	str	r0, [r7, #12]
   18f28:	460b      	mov	r3, r1
   18f2a:	607a      	str	r2, [r7, #4]
   18f2c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   18f2e:	7afb      	ldrb	r3, [r7, #11]
   18f30:	68fa      	ldr	r2, [r7, #12]
   18f32:	01db      	lsls	r3, r3, #7
   18f34:	4413      	add	r3, r2
   18f36:	3308      	adds	r3, #8
   18f38:	687a      	ldr	r2, [r7, #4]
   18f3a:	601a      	str	r2, [r3, #0]
}
   18f3c:	bf00      	nop
   18f3e:	3714      	adds	r7, #20
   18f40:	46bd      	mov	sp, r7
   18f42:	bc80      	pop	{r7}
   18f44:	4770      	bx	lr

00018f46 <hri_port_clear_DIR_reg>:
{
   18f46:	b480      	push	{r7}
   18f48:	b085      	sub	sp, #20
   18f4a:	af00      	add	r7, sp, #0
   18f4c:	60f8      	str	r0, [r7, #12]
   18f4e:	460b      	mov	r3, r1
   18f50:	607a      	str	r2, [r7, #4]
   18f52:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   18f54:	7afb      	ldrb	r3, [r7, #11]
   18f56:	68fa      	ldr	r2, [r7, #12]
   18f58:	01db      	lsls	r3, r3, #7
   18f5a:	4413      	add	r3, r2
   18f5c:	3304      	adds	r3, #4
   18f5e:	687a      	ldr	r2, [r7, #4]
   18f60:	601a      	str	r2, [r3, #0]
}
   18f62:	bf00      	nop
   18f64:	3714      	adds	r7, #20
   18f66:	46bd      	mov	sp, r7
   18f68:	bc80      	pop	{r7}
   18f6a:	4770      	bx	lr

00018f6c <hri_port_set_OUT_reg>:
{
   18f6c:	b480      	push	{r7}
   18f6e:	b085      	sub	sp, #20
   18f70:	af00      	add	r7, sp, #0
   18f72:	60f8      	str	r0, [r7, #12]
   18f74:	460b      	mov	r3, r1
   18f76:	607a      	str	r2, [r7, #4]
   18f78:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   18f7a:	7afb      	ldrb	r3, [r7, #11]
   18f7c:	68fa      	ldr	r2, [r7, #12]
   18f7e:	01db      	lsls	r3, r3, #7
   18f80:	4413      	add	r3, r2
   18f82:	3318      	adds	r3, #24
   18f84:	687a      	ldr	r2, [r7, #4]
   18f86:	601a      	str	r2, [r3, #0]
}
   18f88:	bf00      	nop
   18f8a:	3714      	adds	r7, #20
   18f8c:	46bd      	mov	sp, r7
   18f8e:	bc80      	pop	{r7}
   18f90:	4770      	bx	lr

00018f92 <hri_port_clear_OUT_reg>:
{
   18f92:	b480      	push	{r7}
   18f94:	b085      	sub	sp, #20
   18f96:	af00      	add	r7, sp, #0
   18f98:	60f8      	str	r0, [r7, #12]
   18f9a:	460b      	mov	r3, r1
   18f9c:	607a      	str	r2, [r7, #4]
   18f9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   18fa0:	7afb      	ldrb	r3, [r7, #11]
   18fa2:	68fa      	ldr	r2, [r7, #12]
   18fa4:	01db      	lsls	r3, r3, #7
   18fa6:	4413      	add	r3, r2
   18fa8:	3314      	adds	r3, #20
   18faa:	687a      	ldr	r2, [r7, #4]
   18fac:	601a      	str	r2, [r3, #0]
}
   18fae:	bf00      	nop
   18fb0:	3714      	adds	r7, #20
   18fb2:	46bd      	mov	sp, r7
   18fb4:	bc80      	pop	{r7}
   18fb6:	4770      	bx	lr

00018fb8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   18fb8:	b480      	push	{r7}
   18fba:	b085      	sub	sp, #20
   18fbc:	af00      	add	r7, sp, #0
   18fbe:	6078      	str	r0, [r7, #4]
   18fc0:	4608      	mov	r0, r1
   18fc2:	4611      	mov	r1, r2
   18fc4:	461a      	mov	r2, r3
   18fc6:	4603      	mov	r3, r0
   18fc8:	70fb      	strb	r3, [r7, #3]
   18fca:	460b      	mov	r3, r1
   18fcc:	70bb      	strb	r3, [r7, #2]
   18fce:	4613      	mov	r3, r2
   18fd0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   18fd2:	78fa      	ldrb	r2, [r7, #3]
   18fd4:	78bb      	ldrb	r3, [r7, #2]
   18fd6:	6879      	ldr	r1, [r7, #4]
   18fd8:	01d2      	lsls	r2, r2, #7
   18fda:	440a      	add	r2, r1
   18fdc:	4413      	add	r3, r2
   18fde:	3330      	adds	r3, #48	; 0x30
   18fe0:	781b      	ldrb	r3, [r3, #0]
   18fe2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   18fe4:	7bfb      	ldrb	r3, [r7, #15]
   18fe6:	f023 030f 	bic.w	r3, r3, #15
   18fea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   18fec:	787b      	ldrb	r3, [r7, #1]
   18fee:	f003 030f 	and.w	r3, r3, #15
   18ff2:	b2da      	uxtb	r2, r3
   18ff4:	7bfb      	ldrb	r3, [r7, #15]
   18ff6:	4313      	orrs	r3, r2
   18ff8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   18ffa:	78fa      	ldrb	r2, [r7, #3]
   18ffc:	78bb      	ldrb	r3, [r7, #2]
   18ffe:	6879      	ldr	r1, [r7, #4]
   19000:	01d2      	lsls	r2, r2, #7
   19002:	440a      	add	r2, r1
   19004:	4413      	add	r3, r2
   19006:	3330      	adds	r3, #48	; 0x30
   19008:	7bfa      	ldrb	r2, [r7, #15]
   1900a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1900c:	bf00      	nop
   1900e:	3714      	adds	r7, #20
   19010:	46bd      	mov	sp, r7
   19012:	bc80      	pop	{r7}
   19014:	4770      	bx	lr

00019016 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19016:	b480      	push	{r7}
   19018:	b085      	sub	sp, #20
   1901a:	af00      	add	r7, sp, #0
   1901c:	6078      	str	r0, [r7, #4]
   1901e:	4608      	mov	r0, r1
   19020:	4611      	mov	r1, r2
   19022:	461a      	mov	r2, r3
   19024:	4603      	mov	r3, r0
   19026:	70fb      	strb	r3, [r7, #3]
   19028:	460b      	mov	r3, r1
   1902a:	70bb      	strb	r3, [r7, #2]
   1902c:	4613      	mov	r3, r2
   1902e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   19030:	78fa      	ldrb	r2, [r7, #3]
   19032:	78bb      	ldrb	r3, [r7, #2]
   19034:	6879      	ldr	r1, [r7, #4]
   19036:	01d2      	lsls	r2, r2, #7
   19038:	440a      	add	r2, r1
   1903a:	4413      	add	r3, r2
   1903c:	3330      	adds	r3, #48	; 0x30
   1903e:	781b      	ldrb	r3, [r3, #0]
   19040:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   19042:	7bfb      	ldrb	r3, [r7, #15]
   19044:	f003 030f 	and.w	r3, r3, #15
   19048:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   1904a:	787b      	ldrb	r3, [r7, #1]
   1904c:	011b      	lsls	r3, r3, #4
   1904e:	b2da      	uxtb	r2, r3
   19050:	7bfb      	ldrb	r3, [r7, #15]
   19052:	4313      	orrs	r3, r2
   19054:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19056:	78fa      	ldrb	r2, [r7, #3]
   19058:	78bb      	ldrb	r3, [r7, #2]
   1905a:	6879      	ldr	r1, [r7, #4]
   1905c:	01d2      	lsls	r2, r2, #7
   1905e:	440a      	add	r2, r1
   19060:	4413      	add	r3, r2
   19062:	3330      	adds	r3, #48	; 0x30
   19064:	7bfa      	ldrb	r2, [r7, #15]
   19066:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19068:	bf00      	nop
   1906a:	3714      	adds	r7, #20
   1906c:	46bd      	mov	sp, r7
   1906e:	bc80      	pop	{r7}
   19070:	4770      	bx	lr

00019072 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   19072:	b480      	push	{r7}
   19074:	b085      	sub	sp, #20
   19076:	af00      	add	r7, sp, #0
   19078:	6078      	str	r0, [r7, #4]
   1907a:	4608      	mov	r0, r1
   1907c:	4611      	mov	r1, r2
   1907e:	461a      	mov	r2, r3
   19080:	4603      	mov	r3, r0
   19082:	70fb      	strb	r3, [r7, #3]
   19084:	460b      	mov	r3, r1
   19086:	70bb      	strb	r3, [r7, #2]
   19088:	4613      	mov	r3, r2
   1908a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   1908c:	78fa      	ldrb	r2, [r7, #3]
   1908e:	78bb      	ldrb	r3, [r7, #2]
   19090:	6879      	ldr	r1, [r7, #4]
   19092:	01d2      	lsls	r2, r2, #7
   19094:	440a      	add	r2, r1
   19096:	4413      	add	r3, r2
   19098:	3340      	adds	r3, #64	; 0x40
   1909a:	781b      	ldrb	r3, [r3, #0]
   1909c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1909e:	7bfb      	ldrb	r3, [r7, #15]
   190a0:	f023 0301 	bic.w	r3, r3, #1
   190a4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   190a6:	787a      	ldrb	r2, [r7, #1]
   190a8:	7bfb      	ldrb	r3, [r7, #15]
   190aa:	4313      	orrs	r3, r2
   190ac:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   190ae:	78fa      	ldrb	r2, [r7, #3]
   190b0:	78bb      	ldrb	r3, [r7, #2]
   190b2:	6879      	ldr	r1, [r7, #4]
   190b4:	01d2      	lsls	r2, r2, #7
   190b6:	440a      	add	r2, r1
   190b8:	4413      	add	r3, r2
   190ba:	3340      	adds	r3, #64	; 0x40
   190bc:	7bfa      	ldrb	r2, [r7, #15]
   190be:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   190c0:	bf00      	nop
   190c2:	3714      	adds	r7, #20
   190c4:	46bd      	mov	sp, r7
   190c6:	bc80      	pop	{r7}
   190c8:	4770      	bx	lr

000190ca <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   190ca:	b480      	push	{r7}
   190cc:	b085      	sub	sp, #20
   190ce:	af00      	add	r7, sp, #0
   190d0:	60f8      	str	r0, [r7, #12]
   190d2:	460b      	mov	r3, r1
   190d4:	607a      	str	r2, [r7, #4]
   190d6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   190d8:	7afb      	ldrb	r3, [r7, #11]
   190da:	68fa      	ldr	r2, [r7, #12]
   190dc:	01db      	lsls	r3, r3, #7
   190de:	4413      	add	r3, r2
   190e0:	3328      	adds	r3, #40	; 0x28
   190e2:	687a      	ldr	r2, [r7, #4]
   190e4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   190e6:	bf00      	nop
   190e8:	3714      	adds	r7, #20
   190ea:	46bd      	mov	sp, r7
   190ec:	bc80      	pop	{r7}
   190ee:	4770      	bx	lr

000190f0 <_gpio_set_direction>:
{
   190f0:	b580      	push	{r7, lr}
   190f2:	b082      	sub	sp, #8
   190f4:	af00      	add	r7, sp, #0
   190f6:	4603      	mov	r3, r0
   190f8:	6039      	str	r1, [r7, #0]
   190fa:	71fb      	strb	r3, [r7, #7]
   190fc:	4613      	mov	r3, r2
   190fe:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   19100:	79bb      	ldrb	r3, [r7, #6]
   19102:	2b01      	cmp	r3, #1
   19104:	d01c      	beq.n	19140 <_gpio_set_direction+0x50>
   19106:	2b02      	cmp	r3, #2
   19108:	d037      	beq.n	1917a <_gpio_set_direction+0x8a>
   1910a:	2b00      	cmp	r3, #0
   1910c:	d14e      	bne.n	191ac <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1910e:	79fb      	ldrb	r3, [r7, #7]
   19110:	683a      	ldr	r2, [r7, #0]
   19112:	4619      	mov	r1, r3
   19114:	482a      	ldr	r0, [pc, #168]	; (191c0 <_gpio_set_direction+0xd0>)
   19116:	4b2b      	ldr	r3, [pc, #172]	; (191c4 <_gpio_set_direction+0xd4>)
   19118:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1911a:	683b      	ldr	r3, [r7, #0]
   1911c:	b29b      	uxth	r3, r3
   1911e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   19122:	79fb      	ldrb	r3, [r7, #7]
   19124:	4619      	mov	r1, r3
   19126:	4826      	ldr	r0, [pc, #152]	; (191c0 <_gpio_set_direction+0xd0>)
   19128:	4b27      	ldr	r3, [pc, #156]	; (191c8 <_gpio_set_direction+0xd8>)
   1912a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1912c:	683b      	ldr	r3, [r7, #0]
   1912e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19130:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19134:	79fb      	ldrb	r3, [r7, #7]
   19136:	4619      	mov	r1, r3
   19138:	4821      	ldr	r0, [pc, #132]	; (191c0 <_gpio_set_direction+0xd0>)
   1913a:	4b23      	ldr	r3, [pc, #140]	; (191c8 <_gpio_set_direction+0xd8>)
   1913c:	4798      	blx	r3
		break;
   1913e:	e03a      	b.n	191b6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19140:	79fb      	ldrb	r3, [r7, #7]
   19142:	683a      	ldr	r2, [r7, #0]
   19144:	4619      	mov	r1, r3
   19146:	481e      	ldr	r0, [pc, #120]	; (191c0 <_gpio_set_direction+0xd0>)
   19148:	4b1e      	ldr	r3, [pc, #120]	; (191c4 <_gpio_set_direction+0xd4>)
   1914a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   1914c:	683b      	ldr	r3, [r7, #0]
   1914e:	b29b      	uxth	r3, r3
   19150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   19154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19158:	79f9      	ldrb	r1, [r7, #7]
   1915a:	461a      	mov	r2, r3
   1915c:	4818      	ldr	r0, [pc, #96]	; (191c0 <_gpio_set_direction+0xd0>)
   1915e:	4b1a      	ldr	r3, [pc, #104]	; (191c8 <_gpio_set_direction+0xd8>)
   19160:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   19162:	683b      	ldr	r3, [r7, #0]
   19164:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   19166:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1916a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   1916e:	79f9      	ldrb	r1, [r7, #7]
   19170:	461a      	mov	r2, r3
   19172:	4813      	ldr	r0, [pc, #76]	; (191c0 <_gpio_set_direction+0xd0>)
   19174:	4b14      	ldr	r3, [pc, #80]	; (191c8 <_gpio_set_direction+0xd8>)
   19176:	4798      	blx	r3
		break;
   19178:	e01d      	b.n	191b6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   1917a:	79fb      	ldrb	r3, [r7, #7]
   1917c:	683a      	ldr	r2, [r7, #0]
   1917e:	4619      	mov	r1, r3
   19180:	480f      	ldr	r0, [pc, #60]	; (191c0 <_gpio_set_direction+0xd0>)
   19182:	4b12      	ldr	r3, [pc, #72]	; (191cc <_gpio_set_direction+0xdc>)
   19184:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19186:	683b      	ldr	r3, [r7, #0]
   19188:	b29b      	uxth	r3, r3
   1918a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1918e:	79fb      	ldrb	r3, [r7, #7]
   19190:	4619      	mov	r1, r3
   19192:	480b      	ldr	r0, [pc, #44]	; (191c0 <_gpio_set_direction+0xd0>)
   19194:	4b0c      	ldr	r3, [pc, #48]	; (191c8 <_gpio_set_direction+0xd8>)
   19196:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19198:	683b      	ldr	r3, [r7, #0]
   1919a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   1919c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   191a0:	79fb      	ldrb	r3, [r7, #7]
   191a2:	4619      	mov	r1, r3
   191a4:	4806      	ldr	r0, [pc, #24]	; (191c0 <_gpio_set_direction+0xd0>)
   191a6:	4b08      	ldr	r3, [pc, #32]	; (191c8 <_gpio_set_direction+0xd8>)
   191a8:	4798      	blx	r3
		break;
   191aa:	e004      	b.n	191b6 <_gpio_set_direction+0xc6>
		ASSERT(false);
   191ac:	2246      	movs	r2, #70	; 0x46
   191ae:	4908      	ldr	r1, [pc, #32]	; (191d0 <_gpio_set_direction+0xe0>)
   191b0:	2000      	movs	r0, #0
   191b2:	4b08      	ldr	r3, [pc, #32]	; (191d4 <_gpio_set_direction+0xe4>)
   191b4:	4798      	blx	r3
}
   191b6:	bf00      	nop
   191b8:	3708      	adds	r7, #8
   191ba:	46bd      	mov	sp, r7
   191bc:	bd80      	pop	{r7, pc}
   191be:	bf00      	nop
   191c0:	41008000 	.word	0x41008000
   191c4:	00018f47 	.word	0x00018f47
   191c8:	000190cb 	.word	0x000190cb
   191cc:	00018f21 	.word	0x00018f21
   191d0:	0001bad4 	.word	0x0001bad4
   191d4:	00004bbd 	.word	0x00004bbd

000191d8 <_gpio_set_level>:
{
   191d8:	b580      	push	{r7, lr}
   191da:	b082      	sub	sp, #8
   191dc:	af00      	add	r7, sp, #0
   191de:	4603      	mov	r3, r0
   191e0:	6039      	str	r1, [r7, #0]
   191e2:	71fb      	strb	r3, [r7, #7]
   191e4:	4613      	mov	r3, r2
   191e6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   191e8:	79bb      	ldrb	r3, [r7, #6]
   191ea:	2b00      	cmp	r3, #0
   191ec:	d006      	beq.n	191fc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   191ee:	79fb      	ldrb	r3, [r7, #7]
   191f0:	683a      	ldr	r2, [r7, #0]
   191f2:	4619      	mov	r1, r3
   191f4:	4806      	ldr	r0, [pc, #24]	; (19210 <_gpio_set_level+0x38>)
   191f6:	4b07      	ldr	r3, [pc, #28]	; (19214 <_gpio_set_level+0x3c>)
   191f8:	4798      	blx	r3
}
   191fa:	e005      	b.n	19208 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   191fc:	79fb      	ldrb	r3, [r7, #7]
   191fe:	683a      	ldr	r2, [r7, #0]
   19200:	4619      	mov	r1, r3
   19202:	4803      	ldr	r0, [pc, #12]	; (19210 <_gpio_set_level+0x38>)
   19204:	4b04      	ldr	r3, [pc, #16]	; (19218 <_gpio_set_level+0x40>)
   19206:	4798      	blx	r3
}
   19208:	bf00      	nop
   1920a:	3708      	adds	r7, #8
   1920c:	46bd      	mov	sp, r7
   1920e:	bd80      	pop	{r7, pc}
   19210:	41008000 	.word	0x41008000
   19214:	00018f6d 	.word	0x00018f6d
   19218:	00018f93 	.word	0x00018f93

0001921c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   1921c:	b590      	push	{r4, r7, lr}
   1921e:	b085      	sub	sp, #20
   19220:	af00      	add	r7, sp, #0
   19222:	6078      	str	r0, [r7, #4]
   19224:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   19226:	687b      	ldr	r3, [r7, #4]
   19228:	095b      	lsrs	r3, r3, #5
   1922a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   1922c:	687b      	ldr	r3, [r7, #4]
   1922e:	b2db      	uxtb	r3, r3
   19230:	f003 031f 	and.w	r3, r3, #31
   19234:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   19236:	683b      	ldr	r3, [r7, #0]
   19238:	f1b3 3fff 	cmp.w	r3, #4294967295
   1923c:	d106      	bne.n	1924c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1923e:	7bba      	ldrb	r2, [r7, #14]
   19240:	7bf9      	ldrb	r1, [r7, #15]
   19242:	2300      	movs	r3, #0
   19244:	4812      	ldr	r0, [pc, #72]	; (19290 <_gpio_set_pin_function+0x74>)
   19246:	4c13      	ldr	r4, [pc, #76]	; (19294 <_gpio_set_pin_function+0x78>)
   19248:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   1924a:	e01d      	b.n	19288 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   1924c:	7bba      	ldrb	r2, [r7, #14]
   1924e:	7bf9      	ldrb	r1, [r7, #15]
   19250:	2301      	movs	r3, #1
   19252:	480f      	ldr	r0, [pc, #60]	; (19290 <_gpio_set_pin_function+0x74>)
   19254:	4c0f      	ldr	r4, [pc, #60]	; (19294 <_gpio_set_pin_function+0x78>)
   19256:	47a0      	blx	r4
		if (pin & 1) {
   19258:	7bbb      	ldrb	r3, [r7, #14]
   1925a:	f003 0301 	and.w	r3, r3, #1
   1925e:	2b00      	cmp	r3, #0
   19260:	d009      	beq.n	19276 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   19262:	7bbb      	ldrb	r3, [r7, #14]
   19264:	105b      	asrs	r3, r3, #1
   19266:	b2da      	uxtb	r2, r3
   19268:	683b      	ldr	r3, [r7, #0]
   1926a:	b2db      	uxtb	r3, r3
   1926c:	7bf9      	ldrb	r1, [r7, #15]
   1926e:	4808      	ldr	r0, [pc, #32]	; (19290 <_gpio_set_pin_function+0x74>)
   19270:	4c09      	ldr	r4, [pc, #36]	; (19298 <_gpio_set_pin_function+0x7c>)
   19272:	47a0      	blx	r4
}
   19274:	e008      	b.n	19288 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   19276:	7bbb      	ldrb	r3, [r7, #14]
   19278:	105b      	asrs	r3, r3, #1
   1927a:	b2da      	uxtb	r2, r3
   1927c:	683b      	ldr	r3, [r7, #0]
   1927e:	b2db      	uxtb	r3, r3
   19280:	7bf9      	ldrb	r1, [r7, #15]
   19282:	4803      	ldr	r0, [pc, #12]	; (19290 <_gpio_set_pin_function+0x74>)
   19284:	4c05      	ldr	r4, [pc, #20]	; (1929c <_gpio_set_pin_function+0x80>)
   19286:	47a0      	blx	r4
}
   19288:	bf00      	nop
   1928a:	3714      	adds	r7, #20
   1928c:	46bd      	mov	sp, r7
   1928e:	bd90      	pop	{r4, r7, pc}
   19290:	41008000 	.word	0x41008000
   19294:	00019073 	.word	0x00019073
   19298:	00019017 	.word	0x00019017
   1929c:	00018fb9 	.word	0x00018fb9

000192a0 <gpio_set_pin_function>:
{
   192a0:	b580      	push	{r7, lr}
   192a2:	b082      	sub	sp, #8
   192a4:	af00      	add	r7, sp, #0
   192a6:	6078      	str	r0, [r7, #4]
   192a8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   192aa:	6839      	ldr	r1, [r7, #0]
   192ac:	6878      	ldr	r0, [r7, #4]
   192ae:	4b03      	ldr	r3, [pc, #12]	; (192bc <gpio_set_pin_function+0x1c>)
   192b0:	4798      	blx	r3
}
   192b2:	bf00      	nop
   192b4:	3708      	adds	r7, #8
   192b6:	46bd      	mov	sp, r7
   192b8:	bd80      	pop	{r7, pc}
   192ba:	bf00      	nop
   192bc:	0001921d 	.word	0x0001921d

000192c0 <gpio_set_pin_direction>:
{
   192c0:	b580      	push	{r7, lr}
   192c2:	b082      	sub	sp, #8
   192c4:	af00      	add	r7, sp, #0
   192c6:	4603      	mov	r3, r0
   192c8:	460a      	mov	r2, r1
   192ca:	71fb      	strb	r3, [r7, #7]
   192cc:	4613      	mov	r3, r2
   192ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   192d0:	79fb      	ldrb	r3, [r7, #7]
   192d2:	115b      	asrs	r3, r3, #5
   192d4:	b2d8      	uxtb	r0, r3
   192d6:	79fb      	ldrb	r3, [r7, #7]
   192d8:	f003 031f 	and.w	r3, r3, #31
   192dc:	2201      	movs	r2, #1
   192de:	fa02 f303 	lsl.w	r3, r2, r3
   192e2:	79ba      	ldrb	r2, [r7, #6]
   192e4:	4619      	mov	r1, r3
   192e6:	4b03      	ldr	r3, [pc, #12]	; (192f4 <gpio_set_pin_direction+0x34>)
   192e8:	4798      	blx	r3
}
   192ea:	bf00      	nop
   192ec:	3708      	adds	r7, #8
   192ee:	46bd      	mov	sp, r7
   192f0:	bd80      	pop	{r7, pc}
   192f2:	bf00      	nop
   192f4:	000190f1 	.word	0x000190f1

000192f8 <gpio_set_pin_level>:
{
   192f8:	b580      	push	{r7, lr}
   192fa:	b082      	sub	sp, #8
   192fc:	af00      	add	r7, sp, #0
   192fe:	4603      	mov	r3, r0
   19300:	460a      	mov	r2, r1
   19302:	71fb      	strb	r3, [r7, #7]
   19304:	4613      	mov	r3, r2
   19306:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19308:	79fb      	ldrb	r3, [r7, #7]
   1930a:	115b      	asrs	r3, r3, #5
   1930c:	b2d8      	uxtb	r0, r3
   1930e:	79fb      	ldrb	r3, [r7, #7]
   19310:	f003 031f 	and.w	r3, r3, #31
   19314:	2201      	movs	r2, #1
   19316:	fa02 f303 	lsl.w	r3, r2, r3
   1931a:	79ba      	ldrb	r2, [r7, #6]
   1931c:	4619      	mov	r1, r3
   1931e:	4b03      	ldr	r3, [pc, #12]	; (1932c <gpio_set_pin_level+0x34>)
   19320:	4798      	blx	r3
}
   19322:	bf00      	nop
   19324:	3708      	adds	r7, #8
   19326:	46bd      	mov	sp, r7
   19328:	bd80      	pop	{r7, pc}
   1932a:	bf00      	nop
   1932c:	000191d9 	.word	0x000191d9

00019330 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   19330:	b580      	push	{r7, lr}
   19332:	b082      	sub	sp, #8
   19334:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   19336:	2100      	movs	r1, #0
   19338:	2008      	movs	r0, #8
   1933a:	4b24      	ldr	r3, [pc, #144]	; (193cc <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1933c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1933e:	2100      	movs	r1, #0
   19340:	202b      	movs	r0, #43	; 0x2b
   19342:	4b22      	ldr	r3, [pc, #136]	; (193cc <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19344:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   19346:	2100      	movs	r1, #0
   19348:	202a      	movs	r0, #42	; 0x2a
   1934a:	4b20      	ldr	r3, [pc, #128]	; (193cc <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1934c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1934e:	2102      	movs	r1, #2
   19350:	2008      	movs	r0, #8
   19352:	4b1f      	ldr	r3, [pc, #124]	; (193d0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19354:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   19356:	2102      	movs	r1, #2
   19358:	202b      	movs	r0, #43	; 0x2b
   1935a:	4b1d      	ldr	r3, [pc, #116]	; (193d0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   1935c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1935e:	2102      	movs	r1, #2
   19360:	202a      	movs	r0, #42	; 0x2a
   19362:	4b1b      	ldr	r3, [pc, #108]	; (193d0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19364:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   19366:	2101      	movs	r1, #1
   19368:	2008      	movs	r0, #8
   1936a:	4b1a      	ldr	r3, [pc, #104]	; (193d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1936c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1936e:	2100      	movs	r1, #0
   19370:	202b      	movs	r0, #43	; 0x2b
   19372:	4b18      	ldr	r3, [pc, #96]	; (193d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19374:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   19376:	2100      	movs	r1, #0
   19378:	202a      	movs	r0, #42	; 0x2a
   1937a:	4b16      	ldr	r3, [pc, #88]	; (193d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1937c:	4798      	blx	r3

	delay_us(1);
   1937e:	2001      	movs	r0, #1
   19380:	4b15      	ldr	r3, [pc, #84]	; (193d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19382:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   19384:	2300      	movs	r3, #0
   19386:	607b      	str	r3, [r7, #4]
   19388:	687b      	ldr	r3, [r7, #4]
   1938a:	2b06      	cmp	r3, #6
   1938c:	dc11      	bgt.n	193b2 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1938e:	2101      	movs	r1, #1
   19390:	202a      	movs	r0, #42	; 0x2a
   19392:	4b10      	ldr	r3, [pc, #64]	; (193d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19394:	4798      	blx	r3
		delay_us(1);
   19396:	2001      	movs	r0, #1
   19398:	4b0f      	ldr	r3, [pc, #60]	; (193d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1939a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   1939c:	2100      	movs	r1, #0
   1939e:	202a      	movs	r0, #42	; 0x2a
   193a0:	4b0c      	ldr	r3, [pc, #48]	; (193d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   193a2:	4798      	blx	r3
		delay_us(1);
   193a4:	2001      	movs	r0, #1
   193a6:	4b0c      	ldr	r3, [pc, #48]	; (193d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   193a8:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   193aa:	687b      	ldr	r3, [r7, #4]
   193ac:	3301      	adds	r3, #1
   193ae:	607b      	str	r3, [r7, #4]
   193b0:	e7ea      	b.n	19388 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   193b2:	2101      	movs	r1, #1
   193b4:	202b      	movs	r0, #43	; 0x2b
   193b6:	4b07      	ldr	r3, [pc, #28]	; (193d4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   193b8:	4798      	blx	r3
	delay_us(1);
   193ba:	2001      	movs	r0, #1
   193bc:	4b06      	ldr	r3, [pc, #24]	; (193d8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   193be:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   193c0:	4b06      	ldr	r3, [pc, #24]	; (193dc <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   193c2:	4798      	blx	r3
}
   193c4:	bf00      	nop
   193c6:	3708      	adds	r7, #8
   193c8:	46bd      	mov	sp, r7
   193ca:	bd80      	pop	{r7, pc}
   193cc:	000192a1 	.word	0x000192a1
   193d0:	000192c1 	.word	0x000192c1
   193d4:	000192f9 	.word	0x000192f9
   193d8:	0000352d 	.word	0x0000352d
   193dc:	00002225 	.word	0x00002225

000193e0 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   193e0:	b480      	push	{r7}
   193e2:	b083      	sub	sp, #12
   193e4:	af00      	add	r7, sp, #0
   193e6:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   193e8:	687b      	ldr	r3, [r7, #4]
   193ea:	4618      	mov	r0, r3
   193ec:	370c      	adds	r7, #12
   193ee:	46bd      	mov	sp, r7
   193f0:	bc80      	pop	{r7}
   193f2:	4770      	bx	lr

000193f4 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   193f4:	b480      	push	{r7}
   193f6:	b083      	sub	sp, #12
   193f8:	af00      	add	r7, sp, #0
   193fa:	6078      	str	r0, [r7, #4]
   193fc:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   193fe:	687b      	ldr	r3, [r7, #4]
   19400:	683a      	ldr	r2, [r7, #0]
   19402:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   19404:	687b      	ldr	r3, [r7, #4]
   19406:	4a04      	ldr	r2, [pc, #16]	; (19418 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   19408:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   1940c:	687b      	ldr	r3, [r7, #4]
   1940e:	4618      	mov	r0, r3
   19410:	370c      	adds	r7, #12
   19412:	46bd      	mov	sp, r7
   19414:	bc80      	pop	{r7}
   19416:	4770      	bx	lr
   19418:	001fff00 	.word	0x001fff00

0001941c <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   1941c:	b480      	push	{r7}
   1941e:	b083      	sub	sp, #12
   19420:	af00      	add	r7, sp, #0
   19422:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   19424:	687b      	ldr	r3, [r7, #4]
   19426:	4618      	mov	r0, r3
   19428:	370c      	adds	r7, #12
   1942a:	46bd      	mov	sp, r7
   1942c:	bc80      	pop	{r7}
   1942e:	4770      	bx	lr

00019430 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   19430:	b580      	push	{r7, lr}
   19432:	b082      	sub	sp, #8
   19434:	af00      	add	r7, sp, #0
   19436:	6078      	str	r0, [r7, #4]
	xferDone=false;
   19438:	687b      	ldr	r3, [r7, #4]
   1943a:	2200      	movs	r2, #0
   1943c:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1943e:	6878      	ldr	r0, [r7, #4]
   19440:	4b04      	ldr	r3, [pc, #16]	; (19454 <_ZN13N25Q256_Class4InitEv+0x24>)
   19442:	4798      	blx	r3
	return SelfTest();
   19444:	6878      	ldr	r0, [r7, #4]
   19446:	4b04      	ldr	r3, [pc, #16]	; (19458 <_ZN13N25Q256_Class4InitEv+0x28>)
   19448:	4798      	blx	r3
   1944a:	4603      	mov	r3, r0
}
   1944c:	4618      	mov	r0, r3
   1944e:	3708      	adds	r7, #8
   19450:	46bd      	mov	sp, r7
   19452:	bd80      	pop	{r7, pc}
   19454:	0001945d 	.word	0x0001945d
   19458:	000195f9 	.word	0x000195f9

0001945c <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   1945c:	b590      	push	{r4, r7, lr}
   1945e:	b083      	sub	sp, #12
   19460:	af00      	add	r7, sp, #0
   19462:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   19464:	687b      	ldr	r3, [r7, #4]
   19466:	685b      	ldr	r3, [r3, #4]
   19468:	4618      	mov	r0, r3
   1946a:	4b08      	ldr	r3, [pc, #32]	; (1948c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   1946c:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1946e:	687b      	ldr	r3, [r7, #4]
   19470:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   19472:	2300      	movs	r3, #0
   19474:	4a06      	ldr	r2, [pc, #24]	; (19490 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   19476:	4807      	ldr	r0, [pc, #28]	; (19494 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   19478:	4c07      	ldr	r4, [pc, #28]	; (19498 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1947a:	47a0      	blx	r4
   1947c:	4602      	mov	r2, r0
   1947e:	687b      	ldr	r3, [r7, #4]
   19480:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   19484:	bf00      	nop
   19486:	370c      	adds	r7, #12
   19488:	46bd      	mov	sp, r7
   1948a:	bd90      	pop	{r4, r7, pc}
   1948c:	00003a65 	.word	0x00003a65
   19490:	00019331 	.word	0x00019331
   19494:	2000dbb4 	.word	0x2000dbb4
   19498:	0000d3d1 	.word	0x0000d3d1

0001949c <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   1949c:	b580      	push	{r7, lr}
   1949e:	b084      	sub	sp, #16
   194a0:	af00      	add	r7, sp, #0
   194a2:	6078      	str	r0, [r7, #4]
   194a4:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   194a6:	687b      	ldr	r3, [r7, #4]
   194a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   194ac:	685b      	ldr	r3, [r3, #4]
   194ae:	689b      	ldr	r3, [r3, #8]
   194b0:	687a      	ldr	r2, [r7, #4]
   194b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   194b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   194ba:	6839      	ldr	r1, [r7, #0]
   194bc:	4798      	blx	r3
   194be:	4603      	mov	r3, r0
   194c0:	60fb      	str	r3, [r7, #12]
	return	e;
   194c2:	68fb      	ldr	r3, [r7, #12]
}
   194c4:	4618      	mov	r0, r3
   194c6:	3710      	adds	r7, #16
   194c8:	46bd      	mov	sp, r7
   194ca:	bd80      	pop	{r7, pc}

000194cc <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   194cc:	b590      	push	{r4, r7, lr}
   194ce:	b087      	sub	sp, #28
   194d0:	af00      	add	r7, sp, #0
   194d2:	60f8      	str	r0, [r7, #12]
   194d4:	60b9      	str	r1, [r7, #8]
   194d6:	607a      	str	r2, [r7, #4]
   194d8:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   194da:	68fb      	ldr	r3, [r7, #12]
   194dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   194e0:	685b      	ldr	r3, [r3, #4]
   194e2:	685c      	ldr	r4, [r3, #4]
   194e4:	68fb      	ldr	r3, [r7, #12]
   194e6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   194ea:	683b      	ldr	r3, [r7, #0]
   194ec:	687a      	ldr	r2, [r7, #4]
   194ee:	68b9      	ldr	r1, [r7, #8]
   194f0:	47a0      	blx	r4
   194f2:	4603      	mov	r3, r0
   194f4:	617b      	str	r3, [r7, #20]
	return	w;
   194f6:	697b      	ldr	r3, [r7, #20]
}
   194f8:	4618      	mov	r0, r3
   194fa:	371c      	adds	r7, #28
   194fc:	46bd      	mov	sp, r7
   194fe:	bd90      	pop	{r4, r7, pc}

00019500 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   19500:	b590      	push	{r4, r7, lr}
   19502:	b087      	sub	sp, #28
   19504:	af00      	add	r7, sp, #0
   19506:	60f8      	str	r0, [r7, #12]
   19508:	60b9      	str	r1, [r7, #8]
   1950a:	607a      	str	r2, [r7, #4]
   1950c:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1950e:	68fb      	ldr	r3, [r7, #12]
   19510:	2200      	movs	r2, #0
   19512:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   19514:	68fb      	ldr	r3, [r7, #12]
   19516:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1951a:	685b      	ldr	r3, [r3, #4]
   1951c:	681c      	ldr	r4, [r3, #0]
   1951e:	68fb      	ldr	r3, [r7, #12]
   19520:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   19524:	683b      	ldr	r3, [r7, #0]
   19526:	687a      	ldr	r2, [r7, #4]
   19528:	68b9      	ldr	r1, [r7, #8]
   1952a:	47a0      	blx	r4
   1952c:	4603      	mov	r3, r0
   1952e:	617b      	str	r3, [r7, #20]
	return	r;
   19530:	697b      	ldr	r3, [r7, #20]
}
   19532:	4618      	mov	r0, r3
   19534:	371c      	adds	r7, #28
   19536:	46bd      	mov	sp, r7
   19538:	bd90      	pop	{r4, r7, pc}
	...

0001953c <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   1953c:	b580      	push	{r7, lr}
   1953e:	b082      	sub	sp, #8
   19540:	af00      	add	r7, sp, #0
   19542:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   19544:	687a      	ldr	r2, [r7, #4]
   19546:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1954a:	f043 0310 	orr.w	r3, r3, #16
   1954e:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   19552:	687a      	ldr	r2, [r7, #4]
   19554:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   19558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1955c:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   19560:	687a      	ldr	r2, [r7, #4]
   19562:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   19566:	f36f 1305 	bfc	r3, #4, #2
   1956a:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1956e:	687b      	ldr	r3, [r7, #4]
   19570:	2205      	movs	r2, #5
   19572:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   19576:	687b      	ldr	r3, [r7, #4]
   19578:	2201      	movs	r2, #1
   1957a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1957e:	687b      	ldr	r3, [r7, #4]
   19580:	f203 2212 	addw	r2, r3, #530	; 0x212
   19584:	687b      	ldr	r3, [r7, #4]
   19586:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1958a:	687b      	ldr	r3, [r7, #4]
   1958c:	685a      	ldr	r2, [r3, #4]
   1958e:	687b      	ldr	r3, [r7, #4]
   19590:	f503 7305 	add.w	r3, r3, #532	; 0x214
   19594:	4619      	mov	r1, r3
   19596:	4610      	mov	r0, r2
   19598:	4b04      	ldr	r3, [pc, #16]	; (195ac <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1959a:	4798      	blx	r3
		return status;
   1959c:	687b      	ldr	r3, [r7, #4]
   1959e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   195a2:	4618      	mov	r0, r3
   195a4:	3708      	adds	r7, #8
   195a6:	46bd      	mov	sp, r7
   195a8:	bd80      	pop	{r7, pc}
   195aa:	bf00      	nop
   195ac:	00003add 	.word	0x00003add

000195b0 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   195b0:	b580      	push	{r7, lr}
   195b2:	b082      	sub	sp, #8
   195b4:	af00      	add	r7, sp, #0
   195b6:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   195b8:	6878      	ldr	r0, [r7, #4]
   195ba:	4b0e      	ldr	r3, [pc, #56]	; (195f4 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   195bc:	4798      	blx	r3
   195be:	4603      	mov	r3, r0
   195c0:	461a      	mov	r2, r3
   195c2:	687b      	ldr	r3, [r7, #4]
   195c4:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   195c8:	687b      	ldr	r3, [r7, #4]
   195ca:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   195ce:	f003 0301 	and.w	r3, r3, #1
   195d2:	2b00      	cmp	r3, #0
   195d4:	d000      	beq.n	195d8 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   195d6:	e7ef      	b.n	195b8 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   195d8:	687b      	ldr	r3, [r7, #4]
   195da:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   195de:	f003 0301 	and.w	r3, r3, #1
   195e2:	2b00      	cmp	r3, #0
   195e4:	bf0c      	ite	eq
   195e6:	2301      	moveq	r3, #1
   195e8:	2300      	movne	r3, #0
   195ea:	b2db      	uxtb	r3, r3
}
   195ec:	4618      	mov	r0, r3
   195ee:	3708      	adds	r7, #8
   195f0:	46bd      	mov	sp, r7
   195f2:	bd80      	pop	{r7, pc}
   195f4:	0001953d 	.word	0x0001953d

000195f8 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   195f8:	b590      	push	{r4, r7, lr}
   195fa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   195fe:	b085      	sub	sp, #20
   19600:	af00      	add	r7, sp, #0
   19602:	f107 0310 	add.w	r3, r7, #16
   19606:	3b0c      	subs	r3, #12
   19608:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   1960a:	f107 0310 	add.w	r3, r7, #16
   1960e:	3b0c      	subs	r3, #12
   19610:	681b      	ldr	r3, [r3, #0]
   19612:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   19616:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   1961a:	2300      	movs	r3, #0
   1961c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19620:	f102 020c 	add.w	r2, r2, #12
   19624:	6013      	str	r3, [r2, #0]
   19626:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1962a:	f103 030c 	add.w	r3, r3, #12
   1962e:	681b      	ldr	r3, [r3, #0]
   19630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19634:	d22f      	bcs.n	19696 <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   19636:	4b60      	ldr	r3, [pc, #384]	; (197b8 <_ZN13N25Q256_Class8SelfTestEv+0x1c0>)
   19638:	4798      	blx	r3
   1963a:	4603      	mov	r3, r0
   1963c:	b2d9      	uxtb	r1, r3
   1963e:	f107 0310 	add.w	r3, r7, #16
   19642:	3b08      	subs	r3, #8
   19644:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19648:	f102 020c 	add.w	r2, r2, #12
   1964c:	6812      	ldr	r2, [r2, #0]
   1964e:	4413      	add	r3, r2
   19650:	460a      	mov	r2, r1
   19652:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   19654:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19658:	f103 030c 	add.w	r3, r3, #12
   1965c:	681b      	ldr	r3, [r3, #0]
   1965e:	b2db      	uxtb	r3, r3
   19660:	425b      	negs	r3, r3
   19662:	b2d9      	uxtb	r1, r3
   19664:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   19668:	f103 0310 	add.w	r3, r3, #16
   1966c:	3b08      	subs	r3, #8
   1966e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19672:	f102 020c 	add.w	r2, r2, #12
   19676:	6812      	ldr	r2, [r2, #0]
   19678:	4413      	add	r3, r2
   1967a:	460a      	mov	r2, r1
   1967c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   1967e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19682:	f103 030c 	add.w	r3, r3, #12
   19686:	681b      	ldr	r3, [r3, #0]
   19688:	3301      	adds	r3, #1
   1968a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1968e:	f102 020c 	add.w	r2, r2, #12
   19692:	6013      	str	r3, [r2, #0]
   19694:	e7c7      	b.n	19626 <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   19696:	f107 0310 	add.w	r3, r7, #16
   1969a:	3b0c      	subs	r3, #12
   1969c:	681b      	ldr	r3, [r3, #0]
   1969e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   196a2:	f107 0310 	add.w	r3, r7, #16
   196a6:	3b0c      	subs	r3, #12
   196a8:	4611      	mov	r1, r2
   196aa:	6818      	ldr	r0, [r3, #0]
   196ac:	4b43      	ldr	r3, [pc, #268]	; (197bc <_ZN13N25Q256_Class8SelfTestEv+0x1c4>)
   196ae:	4798      	blx	r3
	WaitOnBusy();
   196b0:	f107 0310 	add.w	r3, r7, #16
   196b4:	3b0c      	subs	r3, #12
   196b6:	6818      	ldr	r0, [r3, #0]
   196b8:	4b41      	ldr	r3, [pc, #260]	; (197c0 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   196ba:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   196bc:	f107 0310 	add.w	r3, r7, #16
   196c0:	3b0c      	subs	r3, #12
   196c2:	681b      	ldr	r3, [r3, #0]
   196c4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   196c8:	f107 0110 	add.w	r1, r7, #16
   196cc:	3908      	subs	r1, #8
   196ce:	f107 0010 	add.w	r0, r7, #16
   196d2:	380c      	subs	r0, #12
   196d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   196d8:	6800      	ldr	r0, [r0, #0]
   196da:	4c3a      	ldr	r4, [pc, #232]	; (197c4 <_ZN13N25Q256_Class8SelfTestEv+0x1cc>)
   196dc:	47a0      	blx	r4
	WaitOnBusy();
   196de:	f107 0310 	add.w	r3, r7, #16
   196e2:	3b0c      	subs	r3, #12
   196e4:	6818      	ldr	r0, [r3, #0]
   196e6:	4b36      	ldr	r3, [pc, #216]	; (197c0 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   196e8:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   196ea:	f107 0310 	add.w	r3, r7, #16
   196ee:	3b0c      	subs	r3, #12
   196f0:	681b      	ldr	r3, [r3, #0]
   196f2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   196f6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   196fa:	f101 0110 	add.w	r1, r1, #16
   196fe:	3908      	subs	r1, #8
   19700:	f107 0010 	add.w	r0, r7, #16
   19704:	380c      	subs	r0, #12
   19706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1970a:	6800      	ldr	r0, [r0, #0]
   1970c:	4c2e      	ldr	r4, [pc, #184]	; (197c8 <_ZN13N25Q256_Class8SelfTestEv+0x1d0>)
   1970e:	47a0      	blx	r4
	WaitOnBusy();
   19710:	f107 0310 	add.w	r3, r7, #16
   19714:	3b0c      	subs	r3, #12
   19716:	6818      	ldr	r0, [r3, #0]
   19718:	4b29      	ldr	r3, [pc, #164]	; (197c0 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   1971a:	4798      	blx	r3
	isOK	 = true;
   1971c:	f107 0310 	add.w	r3, r7, #16
   19720:	3b0c      	subs	r3, #12
   19722:	681b      	ldr	r3, [r3, #0]
   19724:	2201      	movs	r2, #1
   19726:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1972a:	2300      	movs	r3, #0
   1972c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19730:	f102 0208 	add.w	r2, r2, #8
   19734:	6013      	str	r3, [r2, #0]
   19736:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1973a:	f103 0308 	add.w	r3, r3, #8
   1973e:	681b      	ldr	r3, [r3, #0]
   19740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19744:	da2b      	bge.n	1979e <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   19746:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1974a:	f103 0310 	add.w	r3, r3, #16
   1974e:	3b08      	subs	r3, #8
   19750:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19754:	f102 0208 	add.w	r2, r2, #8
   19758:	6812      	ldr	r2, [r2, #0]
   1975a:	4413      	add	r3, r2
   1975c:	781a      	ldrb	r2, [r3, #0]
   1975e:	f107 0310 	add.w	r3, r7, #16
   19762:	3b08      	subs	r3, #8
   19764:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   19768:	f101 0108 	add.w	r1, r1, #8
   1976c:	6809      	ldr	r1, [r1, #0]
   1976e:	440b      	add	r3, r1
   19770:	781b      	ldrb	r3, [r3, #0]
   19772:	429a      	cmp	r2, r3
   19774:	d007      	beq.n	19786 <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   19776:	f107 0310 	add.w	r3, r7, #16
   1977a:	3b0c      	subs	r3, #12
   1977c:	681b      	ldr	r3, [r3, #0]
   1977e:	2200      	movs	r2, #0
   19780:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   19784:	e00b      	b.n	1979e <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   19786:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1978a:	f103 0308 	add.w	r3, r3, #8
   1978e:	681b      	ldr	r3, [r3, #0]
   19790:	3301      	adds	r3, #1
   19792:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19796:	f102 0208 	add.w	r2, r2, #8
   1979a:	6013      	str	r3, [r2, #0]
   1979c:	e7cb      	b.n	19736 <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   1979e:	f107 0310 	add.w	r3, r7, #16
   197a2:	3b0c      	subs	r3, #12
   197a4:	681b      	ldr	r3, [r3, #0]
   197a6:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   197aa:	4618      	mov	r0, r3
   197ac:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   197b0:	3714      	adds	r7, #20
   197b2:	46bd      	mov	sp, r7
   197b4:	bd90      	pop	{r4, r7, pc}
   197b6:	bf00      	nop
   197b8:	0001a709 	.word	0x0001a709
   197bc:	0001949d 	.word	0x0001949d
   197c0:	000195b1 	.word	0x000195b1
   197c4:	000194cd 	.word	0x000194cd
   197c8:	00019501 	.word	0x00019501

000197cc <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   197cc:	b580      	push	{r7, lr}
   197ce:	b082      	sub	sp, #8
   197d0:	af00      	add	r7, sp, #0
   197d2:	6078      	str	r0, [r7, #4]
   197d4:	6039      	str	r1, [r7, #0]
   197d6:	687b      	ldr	r3, [r7, #4]
   197d8:	2b01      	cmp	r3, #1
   197da:	d10d      	bne.n	197f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   197dc:	683b      	ldr	r3, [r7, #0]
   197de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   197e2:	4293      	cmp	r3, r2
   197e4:	d108      	bne.n	197f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   197e6:	4906      	ldr	r1, [pc, #24]	; (19800 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   197e8:	4806      	ldr	r0, [pc, #24]	; (19804 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   197ea:	4b07      	ldr	r3, [pc, #28]	; (19808 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   197ec:	4798      	blx	r3
   197ee:	4a07      	ldr	r2, [pc, #28]	; (1980c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   197f0:	4907      	ldr	r1, [pc, #28]	; (19810 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   197f2:	4804      	ldr	r0, [pc, #16]	; (19804 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   197f4:	4b07      	ldr	r3, [pc, #28]	; (19814 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   197f6:	4798      	blx	r3
   197f8:	bf00      	nop
   197fa:	3708      	adds	r7, #8
   197fc:	46bd      	mov	sp, r7
   197fe:	bd80      	pop	{r7, pc}
   19800:	2000df40 	.word	0x2000df40
   19804:	2000dbc4 	.word	0x2000dbc4
   19808:	000193f5 	.word	0x000193f5
   1980c:	20000000 	.word	0x20000000
   19810:	0001941d 	.word	0x0001941d
   19814:	00019fb9 	.word	0x00019fb9

00019818 <_GLOBAL__sub_I_ptrN25Q256Class>:
   19818:	b580      	push	{r7, lr}
   1981a:	af00      	add	r7, sp, #0
   1981c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19820:	2001      	movs	r0, #1
   19822:	4b01      	ldr	r3, [pc, #4]	; (19828 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   19824:	4798      	blx	r3
   19826:	bd80      	pop	{r7, pc}
   19828:	000197cd 	.word	0x000197cd

0001982c <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   1982c:	b580      	push	{r7, lr}
   1982e:	b082      	sub	sp, #8
   19830:	af00      	add	r7, sp, #0
   19832:	6078      	str	r0, [r7, #4]
   19834:	687b      	ldr	r3, [r7, #4]
   19836:	4618      	mov	r0, r3
   19838:	4b06      	ldr	r3, [pc, #24]	; (19854 <_ZN14Calendar_ClassC1Ev+0x28>)
   1983a:	4798      	blx	r3
   1983c:	4a06      	ldr	r2, [pc, #24]	; (19858 <_ZN14Calendar_ClassC1Ev+0x2c>)
   1983e:	687b      	ldr	r3, [r7, #4]
   19840:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   19842:	4a06      	ldr	r2, [pc, #24]	; (1985c <_ZN14Calendar_ClassC1Ev+0x30>)
   19844:	687b      	ldr	r3, [r7, #4]
   19846:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   19848:	687b      	ldr	r3, [r7, #4]
   1984a:	4618      	mov	r0, r3
   1984c:	3708      	adds	r7, #8
   1984e:	46bd      	mov	sp, r7
   19850:	bd80      	pop	{r7, pc}
   19852:	bf00      	nop
   19854:	00019f79 	.word	0x00019f79
   19858:	0001bb2c 	.word	0x0001bb2c
   1985c:	2000ddf8 	.word	0x2000ddf8

00019860 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   19860:	b580      	push	{r7, lr}
   19862:	b082      	sub	sp, #8
   19864:	af00      	add	r7, sp, #0
   19866:	6078      	str	r0, [r7, #4]
   19868:	6039      	str	r1, [r7, #0]
   1986a:	687b      	ldr	r3, [r7, #4]
   1986c:	4618      	mov	r0, r3
   1986e:	4b08      	ldr	r3, [pc, #32]	; (19890 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   19870:	4798      	blx	r3
   19872:	4a08      	ldr	r2, [pc, #32]	; (19894 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   19874:	687b      	ldr	r3, [r7, #4]
   19876:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   19878:	687b      	ldr	r3, [r7, #4]
   1987a:	683a      	ldr	r2, [r7, #0]
   1987c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   19880:	4a05      	ldr	r2, [pc, #20]	; (19898 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   19882:	687b      	ldr	r3, [r7, #4]
   19884:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   19886:	687b      	ldr	r3, [r7, #4]
   19888:	4618      	mov	r0, r3
   1988a:	3708      	adds	r7, #8
   1988c:	46bd      	mov	sp, r7
   1988e:	bd80      	pop	{r7, pc}
   19890:	00019f79 	.word	0x00019f79
   19894:	0001bb2c 	.word	0x0001bb2c
   19898:	2000ddf8 	.word	0x2000ddf8

0001989c <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   1989c:	b580      	push	{r7, lr}
   1989e:	b082      	sub	sp, #8
   198a0:	af00      	add	r7, sp, #0
   198a2:	6078      	str	r0, [r7, #4]
   198a4:	4a05      	ldr	r2, [pc, #20]	; (198bc <_ZN14Calendar_ClassD1Ev+0x20>)
   198a6:	687b      	ldr	r3, [r7, #4]
   198a8:	601a      	str	r2, [r3, #0]
   198aa:	687b      	ldr	r3, [r7, #4]
   198ac:	4618      	mov	r0, r3
   198ae:	4b04      	ldr	r3, [pc, #16]	; (198c0 <_ZN14Calendar_ClassD1Ev+0x24>)
   198b0:	4798      	blx	r3
{
} //~Calendar_Class
   198b2:	687b      	ldr	r3, [r7, #4]
   198b4:	4618      	mov	r0, r3
   198b6:	3708      	adds	r7, #8
   198b8:	46bd      	mov	sp, r7
   198ba:	bd80      	pop	{r7, pc}
   198bc:	0001bb2c 	.word	0x0001bb2c
   198c0:	00019f99 	.word	0x00019f99

000198c4 <_ZN14Calendar_Class4InitE18calendar_date_time>:
	SaveCurrentDateTime();
	
}


bool	Calendar_Class::Init(calendar_date_time dt_memory){
   198c4:	b580      	push	{r7, lr}
   198c6:	b084      	sub	sp, #16
   198c8:	af00      	add	r7, sp, #0
   198ca:	60f8      	str	r0, [r7, #12]
   198cc:	1d3b      	adds	r3, r7, #4
   198ce:	e883 0006 	stmia.w	r3, {r1, r2}

	calendar_enable(ptrCalendar);
   198d2:	68fb      	ldr	r3, [r7, #12]
   198d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   198d8:	4618      	mov	r0, r3
   198da:	4b4c      	ldr	r3, [pc, #304]	; (19a0c <_ZN14Calendar_Class4InitE18calendar_date_time+0x148>)
   198dc:	4798      	blx	r3
	
	InitReferenceDates();
   198de:	68f8      	ldr	r0, [r7, #12]
   198e0:	4b4b      	ldr	r3, [pc, #300]	; (19a10 <_ZN14Calendar_Class4InitE18calendar_date_time+0x14c>)
   198e2:	4798      	blx	r3
	lastDateTime=dt_memory;
   198e4:	68fb      	ldr	r3, [r7, #12]
   198e6:	3360      	adds	r3, #96	; 0x60
   198e8:	1d3a      	adds	r2, r7, #4
   198ea:	e892 0003 	ldmia.w	r2, {r0, r1}
   198ee:	e883 0003 	stmia.w	r3, {r0, r1}
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   198f2:	68fb      	ldr	r3, [r7, #12]
   198f4:	681b      	ldr	r3, [r3, #0]
   198f6:	3304      	adds	r3, #4
   198f8:	681b      	ldr	r3, [r3, #0]
   198fa:	68fa      	ldr	r2, [r7, #12]
   198fc:	3260      	adds	r2, #96	; 0x60
   198fe:	4611      	mov	r1, r2
   19900:	68f8      	ldr	r0, [r7, #12]
   19902:	4798      	blx	r3
   19904:	4602      	mov	r2, r0
   19906:	68fb      	ldr	r3, [r7, #12]
   19908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   1990c:	68fb      	ldr	r3, [r7, #12]
   1990e:	681b      	ldr	r3, [r3, #0]
   19910:	3304      	adds	r3, #4
   19912:	681b      	ldr	r3, [r3, #0]
   19914:	68fa      	ldr	r2, [r7, #12]
   19916:	326c      	adds	r2, #108	; 0x6c
   19918:	4611      	mov	r1, r2
   1991a:	68f8      	ldr	r0, [r7, #12]
   1991c:	4798      	blx	r3
   1991e:	4602      	mov	r2, r0
   19920:	68fb      	ldr	r3, [r7, #12]
   19922:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   19926:	68fb      	ldr	r3, [r7, #12]
   19928:	681b      	ldr	r3, [r3, #0]
   1992a:	3304      	adds	r3, #4
   1992c:	681b      	ldr	r3, [r3, #0]
   1992e:	68fa      	ldr	r2, [r7, #12]
   19930:	327c      	adds	r2, #124	; 0x7c
   19932:	4611      	mov	r1, r2
   19934:	68f8      	ldr	r0, [r7, #12]
   19936:	4798      	blx	r3
   19938:	4602      	mov	r2, r0
   1993a:	68fb      	ldr	r3, [r7, #12]
   1993c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   19940:	68fb      	ldr	r3, [r7, #12]
   19942:	681b      	ldr	r3, [r3, #0]
   19944:	3304      	adds	r3, #4
   19946:	681b      	ldr	r3, [r3, #0]
   19948:	68fa      	ldr	r2, [r7, #12]
   1994a:	3284      	adds	r2, #132	; 0x84
   1994c:	4611      	mov	r1, r2
   1994e:	68f8      	ldr	r0, [r7, #12]
   19950:	4798      	blx	r3
   19952:	4602      	mov	r2, r0
   19954:	68fb      	ldr	r3, [r7, #12]
   19956:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   19958:	68f8      	ldr	r0, [r7, #12]
   1995a:	4b2e      	ldr	r3, [pc, #184]	; (19a14 <_ZN14Calendar_Class4InitE18calendar_date_time+0x150>)
   1995c:	4798      	blx	r3
	compilationTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   1995e:	68fb      	ldr	r3, [r7, #12]
   19960:	681b      	ldr	r3, [r3, #0]
   19962:	3304      	adds	r3, #4
   19964:	681b      	ldr	r3, [r3, #0]
   19966:	68fa      	ldr	r2, [r7, #12]
   19968:	3274      	adds	r2, #116	; 0x74
   1996a:	4611      	mov	r1, r2
   1996c:	68f8      	ldr	r0, [r7, #12]
   1996e:	4798      	blx	r3
   19970:	4602      	mov	r2, r0
   19972:	68fb      	ldr	r3, [r7, #12]
   19974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   19978:	68fb      	ldr	r3, [r7, #12]
   1997a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1997e:	68fb      	ldr	r3, [r7, #12]
   19980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   19984:	429a      	cmp	r2, r3
   19986:	d80e      	bhi.n	199a6 <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   19988:	68fb      	ldr	r3, [r7, #12]
   1998a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1998e:	68fb      	ldr	r3, [r7, #12]
   19990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   19994:	429a      	cmp	r2, r3
   19996:	d006      	beq.n	199a6 <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   19998:	68fb      	ldr	r3, [r7, #12]
   1999a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1999e:	68fb      	ldr	r3, [r7, #12]
   199a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   199a2:	429a      	cmp	r2, r3
   199a4:	d106      	bne.n	199b4 <_ZN14Calendar_Class4InitE18calendar_date_time+0xf0>
	{
		SetDateTime(&compilationDateTime);
   199a6:	68fb      	ldr	r3, [r7, #12]
   199a8:	3374      	adds	r3, #116	; 0x74
   199aa:	4619      	mov	r1, r3
   199ac:	68f8      	ldr	r0, [r7, #12]
   199ae:	4b1a      	ldr	r3, [pc, #104]	; (19a18 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   199b0:	4798      	blx	r3
   199b2:	e022      	b.n	199fa <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
	}
	else
	{
		if (lastTimestamp<compilationTimestamp)
   199b4:	68fb      	ldr	r3, [r7, #12]
   199b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   199ba:	68fb      	ldr	r3, [r7, #12]
   199bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   199c0:	429a      	cmp	r2, r3
   199c2:	d206      	bcs.n	199d2 <_ZN14Calendar_Class4InitE18calendar_date_time+0x10e>
		{
			SetDateTime(&compilationDateTime);
   199c4:	68fb      	ldr	r3, [r7, #12]
   199c6:	3374      	adds	r3, #116	; 0x74
   199c8:	4619      	mov	r1, r3
   199ca:	68f8      	ldr	r0, [r7, #12]
   199cc:	4b12      	ldr	r3, [pc, #72]	; (19a18 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   199ce:	4798      	blx	r3
   199d0:	e013      	b.n	199fa <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   199d2:	68fb      	ldr	r3, [r7, #12]
   199d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   199d8:	68fb      	ldr	r3, [r7, #12]
   199da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   199dc:	429a      	cmp	r2, r3
   199de:	d106      	bne.n	199ee <_ZN14Calendar_Class4InitE18calendar_date_time+0x12a>
			{
				SetDateTime(&compilationDateTime);
   199e0:	68fb      	ldr	r3, [r7, #12]
   199e2:	3374      	adds	r3, #116	; 0x74
   199e4:	4619      	mov	r1, r3
   199e6:	68f8      	ldr	r0, [r7, #12]
   199e8:	4b0b      	ldr	r3, [pc, #44]	; (19a18 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   199ea:	4798      	blx	r3
   199ec:	e005      	b.n	199fa <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
			}
			else
			{
				SetDateTime(&lastDateTime);
   199ee:	68fb      	ldr	r3, [r7, #12]
   199f0:	3360      	adds	r3, #96	; 0x60
   199f2:	4619      	mov	r1, r3
   199f4:	68f8      	ldr	r0, [r7, #12]
   199f6:	4b08      	ldr	r3, [pc, #32]	; (19a18 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   199f8:	4798      	blx	r3
			}
			
		}
	}
	enlapsedTime=false;
   199fa:	68fb      	ldr	r3, [r7, #12]
   199fc:	2200      	movs	r2, #0
   199fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	return true;
   19a02:	2301      	movs	r3, #1
}
   19a04:	4618      	mov	r0, r3
   19a06:	3710      	adds	r7, #16
   19a08:	46bd      	mov	sp, r7
   19a0a:	bd80      	pop	{r7, pc}
   19a0c:	000030b9 	.word	0x000030b9
   19a10:	00019a1d 	.word	0x00019a1d
   19a14:	00019ac5 	.word	0x00019ac5
   19a18:	00019cc9 	.word	0x00019cc9

00019a1c <_ZN14Calendar_Class18InitReferenceDatesEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitReferenceDates(void){
   19a1c:	b480      	push	{r7}
   19a1e:	b083      	sub	sp, #12
   19a20:	af00      	add	r7, sp, #0
   19a22:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   19a24:	687b      	ldr	r3, [r7, #4]
   19a26:	f640 0202 	movw	r2, #2050	; 0x802
   19a2a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   19a2e:	687b      	ldr	r3, [r7, #4]
   19a30:	220c      	movs	r2, #12
   19a32:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   19a36:	687b      	ldr	r3, [r7, #4]
   19a38:	221f      	movs	r2, #31
   19a3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   19a3e:	687b      	ldr	r3, [r7, #4]
   19a40:	220c      	movs	r2, #12
   19a42:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   19a46:	687b      	ldr	r3, [r7, #4]
   19a48:	223b      	movs	r2, #59	; 0x3b
   19a4a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   19a4e:	687b      	ldr	r3, [r7, #4]
   19a50:	223b      	movs	r2, #59	; 0x3b
   19a52:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   19a56:	687b      	ldr	r3, [r7, #4]
   19a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19a5c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   19a60:	687b      	ldr	r3, [r7, #4]
   19a62:	22ff      	movs	r2, #255	; 0xff
   19a64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   19a68:	687b      	ldr	r3, [r7, #4]
   19a6a:	22ff      	movs	r2, #255	; 0xff
   19a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   19a70:	687b      	ldr	r3, [r7, #4]
   19a72:	22ff      	movs	r2, #255	; 0xff
   19a74:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   19a78:	687b      	ldr	r3, [r7, #4]
   19a7a:	22ff      	movs	r2, #255	; 0xff
   19a7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   19a80:	687b      	ldr	r3, [r7, #4]
   19a82:	22ff      	movs	r2, #255	; 0xff
   19a84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   19a88:	687b      	ldr	r3, [r7, #4]
   19a8a:	2200      	movs	r2, #0
   19a8c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   19a90:	687b      	ldr	r3, [r7, #4]
   19a92:	2200      	movs	r2, #0
   19a94:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   19a98:	687b      	ldr	r3, [r7, #4]
   19a9a:	2200      	movs	r2, #0
   19a9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   19aa0:	687b      	ldr	r3, [r7, #4]
   19aa2:	2200      	movs	r2, #0
   19aa4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   19aa8:	687b      	ldr	r3, [r7, #4]
   19aaa:	2200      	movs	r2, #0
   19aac:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   19ab0:	687b      	ldr	r3, [r7, #4]
   19ab2:	2200      	movs	r2, #0
   19ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   19ab8:	bf00      	nop
   19aba:	370c      	adds	r7, #12
   19abc:	46bd      	mov	sp, r7
   19abe:	bc80      	pop	{r7}
   19ac0:	4770      	bx	lr
	...

00019ac4 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   19ac4:	b480      	push	{r7}
   19ac6:	b083      	sub	sp, #12
   19ac8:	af00      	add	r7, sp, #0
   19aca:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   19acc:	2332      	movs	r3, #50	; 0x32
   19ace:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   19ad2:	4613      	mov	r3, r2
   19ad4:	009b      	lsls	r3, r3, #2
   19ad6:	4413      	add	r3, r2
   19ad8:	005b      	lsls	r3, r3, #1
   19ada:	461a      	mov	r2, r3
   19adc:	2330      	movs	r3, #48	; 0x30
   19ade:	3b30      	subs	r3, #48	; 0x30
   19ae0:	441a      	add	r2, r3
   19ae2:	4613      	mov	r3, r2
   19ae4:	009b      	lsls	r3, r3, #2
   19ae6:	4413      	add	r3, r2
   19ae8:	005b      	lsls	r3, r3, #1
   19aea:	461a      	mov	r2, r3
   19aec:	2332      	movs	r3, #50	; 0x32
   19aee:	3b30      	subs	r3, #48	; 0x30
   19af0:	4413      	add	r3, r2
   19af2:	b29b      	uxth	r3, r3
   19af4:	461a      	mov	r2, r3
   19af6:	0092      	lsls	r2, r2, #2
   19af8:	4413      	add	r3, r2
   19afa:	005b      	lsls	r3, r3, #1
   19afc:	b29a      	uxth	r2, r3
   19afe:	2331      	movs	r3, #49	; 0x31
   19b00:	b29b      	uxth	r3, r3
   19b02:	4413      	add	r3, r2
   19b04:	b29b      	uxth	r3, r3
   19b06:	3b30      	subs	r3, #48	; 0x30
   19b08:	b29a      	uxth	r2, r3
   19b0a:	687b      	ldr	r3, [r7, #4]
   19b0c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   19b10:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b12:	2b6e      	cmp	r3, #110	; 0x6e
   19b14:	d106      	bne.n	19b24 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   19b16:	2361      	movs	r3, #97	; 0x61
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b18:	2b61      	cmp	r3, #97	; 0x61
   19b1a:	d101      	bne.n	19b20 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   19b1c:	2301      	movs	r3, #1
   19b1e:	e02f      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b20:	2306      	movs	r3, #6
   19b22:	e02d      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   19b24:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b26:	2b62      	cmp	r3, #98	; 0x62
   19b28:	d029      	beq.n	19b7e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   19b2a:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b2c:	2b72      	cmp	r3, #114	; 0x72
   19b2e:	d106      	bne.n	19b3e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   19b30:	234a      	movs	r3, #74	; 0x4a
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b32:	2b4d      	cmp	r3, #77	; 0x4d
   19b34:	d101      	bne.n	19b3a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   19b36:	2303      	movs	r3, #3
   19b38:	e022      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b3a:	2304      	movs	r3, #4
   19b3c:	e020      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   19b3e:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b40:	2b79      	cmp	r3, #121	; 0x79
   19b42:	d01a      	beq.n	19b7a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   19b44:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b46:	2b6c      	cmp	r3, #108	; 0x6c
   19b48:	d015      	beq.n	19b76 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   19b4a:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b4c:	2b67      	cmp	r3, #103	; 0x67
   19b4e:	d010      	beq.n	19b72 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   19b50:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b52:	2b70      	cmp	r3, #112	; 0x70
   19b54:	d00b      	beq.n	19b6e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   19b56:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19b58:	2b74      	cmp	r3, #116	; 0x74
   19b5a:	d006      	beq.n	19b6a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   19b5c:	236e      	movs	r3, #110	; 0x6e
   19b5e:	2b76      	cmp	r3, #118	; 0x76
   19b60:	d101      	bne.n	19b66 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   19b62:	230b      	movs	r3, #11
   19b64:	e00c      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b66:	230c      	movs	r3, #12
   19b68:	e00a      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b6a:	230a      	movs	r3, #10
   19b6c:	e008      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b6e:	2309      	movs	r3, #9
   19b70:	e006      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b72:	2308      	movs	r3, #8
   19b74:	e004      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b76:	2307      	movs	r3, #7
   19b78:	e002      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b7a:	2305      	movs	r3, #5
   19b7c:	e000      	b.n	19b80 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19b7e:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   19b80:	687a      	ldr	r2, [r7, #4]
   19b82:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   19b86:	2332      	movs	r3, #50	; 0x32
   19b88:	2b20      	cmp	r3, #32
   19b8a:	d008      	beq.n	19b9e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   19b8c:	2332      	movs	r3, #50	; 0x32
   19b8e:	3b30      	subs	r3, #48	; 0x30
   19b90:	b2db      	uxtb	r3, r3
   19b92:	461a      	mov	r2, r3
   19b94:	0092      	lsls	r2, r2, #2
   19b96:	4413      	add	r3, r2
   19b98:	005b      	lsls	r3, r3, #1
   19b9a:	b2db      	uxtb	r3, r3
   19b9c:	e000      	b.n	19ba0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   19b9e:	2300      	movs	r3, #0
   19ba0:	2239      	movs	r2, #57	; 0x39
   19ba2:	4413      	add	r3, r2
   19ba4:	b2db      	uxtb	r3, r3
   19ba6:	3b30      	subs	r3, #48	; 0x30
   19ba8:	b2da      	uxtb	r2, r3
   19baa:	687b      	ldr	r3, [r7, #4]
   19bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   19bb0:	2331      	movs	r3, #49	; 0x31
   19bb2:	3b30      	subs	r3, #48	; 0x30
   19bb4:	b2db      	uxtb	r3, r3
   19bb6:	461a      	mov	r2, r3
   19bb8:	0092      	lsls	r2, r2, #2
   19bba:	4413      	add	r3, r2
   19bbc:	005b      	lsls	r3, r3, #1
   19bbe:	b2db      	uxtb	r3, r3
   19bc0:	2238      	movs	r2, #56	; 0x38
   19bc2:	4413      	add	r3, r2
   19bc4:	b2db      	uxtb	r3, r3
   19bc6:	3b30      	subs	r3, #48	; 0x30
   19bc8:	b2da      	uxtb	r2, r3
   19bca:	687b      	ldr	r3, [r7, #4]
   19bcc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   19bd0:	2334      	movs	r3, #52	; 0x34
   19bd2:	3b30      	subs	r3, #48	; 0x30
   19bd4:	b2db      	uxtb	r3, r3
   19bd6:	461a      	mov	r2, r3
   19bd8:	0092      	lsls	r2, r2, #2
   19bda:	4413      	add	r3, r2
   19bdc:	005b      	lsls	r3, r3, #1
   19bde:	b2db      	uxtb	r3, r3
   19be0:	2237      	movs	r2, #55	; 0x37
   19be2:	4413      	add	r3, r2
   19be4:	b2db      	uxtb	r3, r3
   19be6:	3b30      	subs	r3, #48	; 0x30
   19be8:	b2da      	uxtb	r2, r3
   19bea:	687b      	ldr	r3, [r7, #4]
   19bec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   19bf0:	2332      	movs	r3, #50	; 0x32
   19bf2:	3b30      	subs	r3, #48	; 0x30
   19bf4:	b2db      	uxtb	r3, r3
   19bf6:	461a      	mov	r2, r3
   19bf8:	0092      	lsls	r2, r2, #2
   19bfa:	4413      	add	r3, r2
   19bfc:	005b      	lsls	r3, r3, #1
   19bfe:	b2db      	uxtb	r3, r3
   19c00:	2232      	movs	r2, #50	; 0x32
   19c02:	4413      	add	r3, r2
   19c04:	b2db      	uxtb	r3, r3
   19c06:	3b30      	subs	r3, #48	; 0x30
   19c08:	b2da      	uxtb	r2, r3
   19c0a:	687b      	ldr	r3, [r7, #4]
   19c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		compiled_time=__TIME__;
   19c10:	687b      	ldr	r3, [r7, #4]
   19c12:	4a04      	ldr	r2, [pc, #16]	; (19c24 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x160>)
   19c14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
   19c18:	bf00      	nop
   19c1a:	370c      	adds	r7, #12
   19c1c:	46bd      	mov	sp, r7
   19c1e:	bc80      	pop	{r7}
   19c20:	4770      	bx	lr
   19c22:	bf00      	nop
   19c24:	0001bb18 	.word	0x0001bb18

00019c28 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   19c28:	b580      	push	{r7, lr}
   19c2a:	b082      	sub	sp, #8
   19c2c:	af00      	add	r7, sp, #0
   19c2e:	6078      	str	r0, [r7, #4]
   19c30:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   19c32:	687b      	ldr	r3, [r7, #4]
   19c34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19c38:	6839      	ldr	r1, [r7, #0]
   19c3a:	4618      	mov	r0, r3
   19c3c:	4b03      	ldr	r3, [pc, #12]	; (19c4c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   19c3e:	4798      	blx	r3
   19c40:	4603      	mov	r3, r0
}
   19c42:	4618      	mov	r0, r3
   19c44:	3708      	adds	r7, #8
   19c46:	46bd      	mov	sp, r7
   19c48:	bd80      	pop	{r7, pc}
   19c4a:	bf00      	nop
   19c4c:	00003209 	.word	0x00003209

00019c50 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   19c50:	b480      	push	{r7}
   19c52:	b083      	sub	sp, #12
   19c54:	af00      	add	r7, sp, #0
   19c56:	6078      	str	r0, [r7, #4]
   19c58:	460b      	mov	r3, r1
   19c5a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   19c5c:	887b      	ldrh	r3, [r7, #2]
   19c5e:	f003 0303 	and.w	r3, r3, #3
   19c62:	2b00      	cmp	r3, #0
   19c64:	d001      	beq.n	19c6a <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   19c66:	2300      	movs	r3, #0
   19c68:	e000      	b.n	19c6c <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   19c6a:	2301      	movs	r3, #1
	}
}
   19c6c:	4618      	mov	r0, r3
   19c6e:	370c      	adds	r7, #12
   19c70:	46bd      	mov	sp, r7
   19c72:	bc80      	pop	{r7}
   19c74:	4770      	bx	lr
	...

00019c78 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   19c78:	b580      	push	{r7, lr}
   19c7a:	b082      	sub	sp, #8
   19c7c:	af00      	add	r7, sp, #0
   19c7e:	6078      	str	r0, [r7, #4]
   19c80:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   19c82:	687b      	ldr	r3, [r7, #4]
   19c84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19c88:	6839      	ldr	r1, [r7, #0]
   19c8a:	4618      	mov	r0, r3
   19c8c:	4b03      	ldr	r3, [pc, #12]	; (19c9c <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   19c8e:	4798      	blx	r3
   19c90:	4603      	mov	r3, r0
}
   19c92:	4618      	mov	r0, r3
   19c94:	3708      	adds	r7, #8
   19c96:	46bd      	mov	sp, r7
   19c98:	bd80      	pop	{r7, pc}
   19c9a:	bf00      	nop
   19c9c:	000030f9 	.word	0x000030f9

00019ca0 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   19ca0:	b580      	push	{r7, lr}
   19ca2:	b082      	sub	sp, #8
   19ca4:	af00      	add	r7, sp, #0
   19ca6:	6078      	str	r0, [r7, #4]
   19ca8:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   19caa:	687b      	ldr	r3, [r7, #4]
   19cac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19cb0:	6839      	ldr	r1, [r7, #0]
   19cb2:	4618      	mov	r0, r3
   19cb4:	4b03      	ldr	r3, [pc, #12]	; (19cc4 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   19cb6:	4798      	blx	r3
   19cb8:	4603      	mov	r3, r0
}
   19cba:	4618      	mov	r0, r3
   19cbc:	3708      	adds	r7, #8
   19cbe:	46bd      	mov	sp, r7
   19cc0:	bd80      	pop	{r7, pc}
   19cc2:	bf00      	nop
   19cc4:	00003181 	.word	0x00003181

00019cc8 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   19cc8:	b580      	push	{r7, lr}
   19cca:	b084      	sub	sp, #16
   19ccc:	af00      	add	r7, sp, #0
   19cce:	6078      	str	r0, [r7, #4]
   19cd0:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   19cd2:	683a      	ldr	r2, [r7, #0]
   19cd4:	f107 030c 	add.w	r3, r7, #12
   19cd8:	3204      	adds	r2, #4
   19cda:	6810      	ldr	r0, [r2, #0]
   19cdc:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   19cde:	f107 030c 	add.w	r3, r7, #12
   19ce2:	4619      	mov	r1, r3
   19ce4:	6878      	ldr	r0, [r7, #4]
   19ce6:	4b0a      	ldr	r3, [pc, #40]	; (19d10 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   19ce8:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   19cea:	683a      	ldr	r2, [r7, #0]
   19cec:	f107 0308 	add.w	r3, r7, #8
   19cf0:	8811      	ldrh	r1, [r2, #0]
   19cf2:	7892      	ldrb	r2, [r2, #2]
   19cf4:	8019      	strh	r1, [r3, #0]
   19cf6:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   19cf8:	f107 0308 	add.w	r3, r7, #8
   19cfc:	4619      	mov	r1, r3
   19cfe:	6878      	ldr	r0, [r7, #4]
   19d00:	4b04      	ldr	r3, [pc, #16]	; (19d14 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   19d02:	4798      	blx	r3
   19d04:	4603      	mov	r3, r0
			
}
   19d06:	4618      	mov	r0, r3
   19d08:	3710      	adds	r7, #16
   19d0a:	46bd      	mov	sp, r7
   19d0c:	bd80      	pop	{r7, pc}
   19d0e:	bf00      	nop
   19d10:	00019ca1 	.word	0x00019ca1
   19d14:	00019c79 	.word	0x00019c79

00019d18 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   19d18:	b580      	push	{r7, lr}
   19d1a:	b086      	sub	sp, #24
   19d1c:	af00      	add	r7, sp, #0
   19d1e:	6078      	str	r0, [r7, #4]
   19d20:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   19d22:	2300      	movs	r3, #0
   19d24:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   19d26:	2300      	movs	r3, #0
   19d28:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   19d2a:	683b      	ldr	r3, [r7, #0]
   19d2c:	88db      	ldrh	r3, [r3, #6]
   19d2e:	b2da      	uxtb	r2, r3
   19d30:	687b      	ldr	r3, [r7, #4]
   19d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19d36:	699b      	ldr	r3, [r3, #24]
   19d38:	b2db      	uxtb	r3, r3
   19d3a:	1ad3      	subs	r3, r2, r3
   19d3c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   19d3e:	683b      	ldr	r3, [r7, #0]
   19d40:	795b      	ldrb	r3, [r3, #5]
   19d42:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   19d44:	683b      	ldr	r3, [r7, #0]
   19d46:	791b      	ldrb	r3, [r3, #4]
   19d48:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   19d4a:	683b      	ldr	r3, [r7, #0]
   19d4c:	789b      	ldrb	r3, [r3, #2]
   19d4e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   19d50:	683b      	ldr	r3, [r7, #0]
   19d52:	785b      	ldrb	r3, [r3, #1]
   19d54:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   19d56:	683b      	ldr	r3, [r7, #0]
   19d58:	781b      	ldrb	r3, [r3, #0]
   19d5a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   19d5c:	2300      	movs	r3, #0
   19d5e:	613b      	str	r3, [r7, #16]
   19d60:	7bfa      	ldrb	r2, [r7, #15]
   19d62:	693b      	ldr	r3, [r7, #16]
   19d64:	429a      	cmp	r2, r3
   19d66:	d91e      	bls.n	19da6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   19d68:	687b      	ldr	r3, [r7, #4]
   19d6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19d6e:	699b      	ldr	r3, [r3, #24]
   19d70:	b29a      	uxth	r2, r3
   19d72:	693b      	ldr	r3, [r7, #16]
   19d74:	b29b      	uxth	r3, r3
   19d76:	4413      	add	r3, r2
   19d78:	b29b      	uxth	r3, r3
   19d7a:	4619      	mov	r1, r3
   19d7c:	6878      	ldr	r0, [r7, #4]
   19d7e:	4b27      	ldr	r3, [pc, #156]	; (19e1c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   19d80:	4798      	blx	r3
   19d82:	4603      	mov	r3, r0
   19d84:	2b00      	cmp	r3, #0
   19d86:	d006      	beq.n	19d96 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   19d88:	697b      	ldr	r3, [r7, #20]
   19d8a:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   19d8e:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   19d92:	617b      	str	r3, [r7, #20]
   19d94:	e003      	b.n	19d9e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   19d96:	697a      	ldr	r2, [r7, #20]
   19d98:	4b21      	ldr	r3, [pc, #132]	; (19e20 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   19d9a:	4413      	add	r3, r2
   19d9c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   19d9e:	693b      	ldr	r3, [r7, #16]
   19da0:	3301      	adds	r3, #1
   19da2:	613b      	str	r3, [r7, #16]
   19da4:	e7dc      	b.n	19d60 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   19da6:	2301      	movs	r3, #1
   19da8:	613b      	str	r3, [r7, #16]
   19daa:	7bba      	ldrb	r2, [r7, #14]
   19dac:	693b      	ldr	r3, [r7, #16]
   19dae:	429a      	cmp	r2, r3
   19db0:	d910      	bls.n	19dd4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   19db2:	683b      	ldr	r3, [r7, #0]
   19db4:	88db      	ldrh	r3, [r3, #6]
   19db6:	4619      	mov	r1, r3
   19db8:	693b      	ldr	r3, [r7, #16]
   19dba:	b2db      	uxtb	r3, r3
   19dbc:	461a      	mov	r2, r3
   19dbe:	6878      	ldr	r0, [r7, #4]
   19dc0:	4b18      	ldr	r3, [pc, #96]	; (19e24 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   19dc2:	4798      	blx	r3
   19dc4:	4602      	mov	r2, r0
   19dc6:	697b      	ldr	r3, [r7, #20]
   19dc8:	4413      	add	r3, r2
   19dca:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   19dcc:	693b      	ldr	r3, [r7, #16]
   19dce:	3301      	adds	r3, #1
   19dd0:	613b      	str	r3, [r7, #16]
   19dd2:	e7ea      	b.n	19daa <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   19dd4:	7b7b      	ldrb	r3, [r7, #13]
   19dd6:	3b01      	subs	r3, #1
   19dd8:	4a13      	ldr	r2, [pc, #76]	; (19e28 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   19dda:	fb02 f303 	mul.w	r3, r2, r3
   19dde:	461a      	mov	r2, r3
   19de0:	697b      	ldr	r3, [r7, #20]
   19de2:	4413      	add	r3, r2
   19de4:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   19de6:	7b3b      	ldrb	r3, [r7, #12]
   19de8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   19dec:	fb02 f303 	mul.w	r3, r2, r3
   19df0:	461a      	mov	r2, r3
   19df2:	697b      	ldr	r3, [r7, #20]
   19df4:	4413      	add	r3, r2
   19df6:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   19df8:	7afa      	ldrb	r2, [r7, #11]
   19dfa:	4613      	mov	r3, r2
   19dfc:	011b      	lsls	r3, r3, #4
   19dfe:	1a9b      	subs	r3, r3, r2
   19e00:	009b      	lsls	r3, r3, #2
   19e02:	461a      	mov	r2, r3
   19e04:	697b      	ldr	r3, [r7, #20]
   19e06:	4413      	add	r3, r2
   19e08:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   19e0a:	7abb      	ldrb	r3, [r7, #10]
   19e0c:	697a      	ldr	r2, [r7, #20]
   19e0e:	4413      	add	r3, r2
   19e10:	617b      	str	r3, [r7, #20]

	return tmp;
   19e12:	697b      	ldr	r3, [r7, #20]
}
   19e14:	4618      	mov	r0, r3
   19e16:	3718      	adds	r7, #24
   19e18:	46bd      	mov	sp, r7
   19e1a:	bd80      	pop	{r7, pc}
   19e1c:	00019c51 	.word	0x00019c51
   19e20:	01e13380 	.word	0x01e13380
   19e24:	00019e2d 	.word	0x00019e2d
   19e28:	00015180 	.word	0x00015180

00019e2c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   19e2c:	b580      	push	{r7, lr}
   19e2e:	b086      	sub	sp, #24
   19e30:	af00      	add	r7, sp, #0
   19e32:	60f8      	str	r0, [r7, #12]
   19e34:	60b9      	str	r1, [r7, #8]
   19e36:	4613      	mov	r3, r2
   19e38:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   19e3a:	2300      	movs	r3, #0
   19e3c:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   19e3e:	68bb      	ldr	r3, [r7, #8]
   19e40:	b29b      	uxth	r3, r3
   19e42:	4619      	mov	r1, r3
   19e44:	68f8      	ldr	r0, [r7, #12]
   19e46:	4b2f      	ldr	r3, [pc, #188]	; (19f04 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   19e48:	4798      	blx	r3
   19e4a:	4603      	mov	r3, r0
   19e4c:	2b00      	cmp	r3, #0
   19e4e:	d028      	beq.n	19ea2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   19e50:	79fb      	ldrb	r3, [r7, #7]
   19e52:	3b01      	subs	r3, #1
   19e54:	2b0b      	cmp	r3, #11
   19e56:	d84c      	bhi.n	19ef2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   19e58:	a201      	add	r2, pc, #4	; (adr r2, 19e60 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   19e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19e5e:	bf00      	nop
   19e60:	00019e91 	.word	0x00019e91
   19e64:	00019e97 	.word	0x00019e97
   19e68:	00019e91 	.word	0x00019e91
   19e6c:	00019e9d 	.word	0x00019e9d
   19e70:	00019e91 	.word	0x00019e91
   19e74:	00019e9d 	.word	0x00019e9d
   19e78:	00019e91 	.word	0x00019e91
   19e7c:	00019e91 	.word	0x00019e91
   19e80:	00019e9d 	.word	0x00019e9d
   19e84:	00019e91 	.word	0x00019e91
   19e88:	00019e9d 	.word	0x00019e9d
   19e8c:	00019e91 	.word	0x00019e91
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   19e90:	4b1d      	ldr	r3, [pc, #116]	; (19f08 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   19e92:	617b      	str	r3, [r7, #20]
			break;
   19e94:	e030      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   19e96:	4b1d      	ldr	r3, [pc, #116]	; (19f0c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   19e98:	617b      	str	r3, [r7, #20]
			break;
   19e9a:	e02d      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   19e9c:	4b1c      	ldr	r3, [pc, #112]	; (19f10 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   19e9e:	617b      	str	r3, [r7, #20]
			break;
   19ea0:	e02a      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   19ea2:	79fb      	ldrb	r3, [r7, #7]
   19ea4:	3b01      	subs	r3, #1
   19ea6:	2b0b      	cmp	r3, #11
   19ea8:	d825      	bhi.n	19ef6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   19eaa:	a201      	add	r2, pc, #4	; (adr r2, 19eb0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   19eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19eb0:	00019ee1 	.word	0x00019ee1
   19eb4:	00019ee7 	.word	0x00019ee7
   19eb8:	00019ee1 	.word	0x00019ee1
   19ebc:	00019eed 	.word	0x00019eed
   19ec0:	00019ee1 	.word	0x00019ee1
   19ec4:	00019eed 	.word	0x00019eed
   19ec8:	00019ee1 	.word	0x00019ee1
   19ecc:	00019ee1 	.word	0x00019ee1
   19ed0:	00019eed 	.word	0x00019eed
   19ed4:	00019ee1 	.word	0x00019ee1
   19ed8:	00019eed 	.word	0x00019eed
   19edc:	00019ee1 	.word	0x00019ee1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   19ee0:	4b09      	ldr	r3, [pc, #36]	; (19f08 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   19ee2:	617b      	str	r3, [r7, #20]
			break;
   19ee4:	e008      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   19ee6:	4b0b      	ldr	r3, [pc, #44]	; (19f14 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   19ee8:	617b      	str	r3, [r7, #20]
			break;
   19eea:	e005      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   19eec:	4b08      	ldr	r3, [pc, #32]	; (19f10 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   19eee:	617b      	str	r3, [r7, #20]
			break;
   19ef0:	e002      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   19ef2:	bf00      	nop
   19ef4:	e000      	b.n	19ef8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   19ef6:	bf00      	nop
		}
	}

	return sec_in_month;
   19ef8:	697b      	ldr	r3, [r7, #20]
}
   19efa:	4618      	mov	r0, r3
   19efc:	3718      	adds	r7, #24
   19efe:	46bd      	mov	sp, r7
   19f00:	bd80      	pop	{r7, pc}
   19f02:	bf00      	nop
   19f04:	00019c51 	.word	0x00019c51
   19f08:	0028de80 	.word	0x0028de80
   19f0c:	00263b80 	.word	0x00263b80
   19f10:	00278d00 	.word	0x00278d00
   19f14:	0024ea00 	.word	0x0024ea00

00019f18 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   19f18:	b580      	push	{r7, lr}
   19f1a:	b082      	sub	sp, #8
   19f1c:	af00      	add	r7, sp, #0
   19f1e:	6078      	str	r0, [r7, #4]
   19f20:	6039      	str	r1, [r7, #0]
   19f22:	687b      	ldr	r3, [r7, #4]
   19f24:	2b01      	cmp	r3, #1
   19f26:	d10d      	bne.n	19f44 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   19f28:	683b      	ldr	r3, [r7, #0]
   19f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19f2e:	4293      	cmp	r3, r2
   19f30:	d108      	bne.n	19f44 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   19f32:	4906      	ldr	r1, [pc, #24]	; (19f4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19f34:	4806      	ldr	r0, [pc, #24]	; (19f50 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19f36:	4b07      	ldr	r3, [pc, #28]	; (19f54 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   19f38:	4798      	blx	r3
   19f3a:	4a07      	ldr	r2, [pc, #28]	; (19f58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   19f3c:	4907      	ldr	r1, [pc, #28]	; (19f5c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19f3e:	4804      	ldr	r0, [pc, #16]	; (19f50 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19f40:	4b07      	ldr	r3, [pc, #28]	; (19f60 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   19f42:	4798      	blx	r3
   19f44:	bf00      	nop
   19f46:	3708      	adds	r7, #8
   19f48:	46bd      	mov	sp, r7
   19f4a:	bd80      	pop	{r7, pc}
   19f4c:	2000e088 	.word	0x2000e088
   19f50:	2000de00 	.word	0x2000de00
   19f54:	00019861 	.word	0x00019861
   19f58:	20000000 	.word	0x20000000
   19f5c:	0001989d 	.word	0x0001989d
   19f60:	00019fb9 	.word	0x00019fb9

00019f64 <_GLOBAL__sub_I_ptrCalendarClass>:
   19f64:	b580      	push	{r7, lr}
   19f66:	af00      	add	r7, sp, #0
   19f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19f6c:	2001      	movs	r0, #1
   19f6e:	4b01      	ldr	r3, [pc, #4]	; (19f74 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   19f70:	4798      	blx	r3
   19f72:	bd80      	pop	{r7, pc}
   19f74:	00019f19 	.word	0x00019f19

00019f78 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   19f78:	b480      	push	{r7}
   19f7a:	b083      	sub	sp, #12
   19f7c:	af00      	add	r7, sp, #0
   19f7e:	6078      	str	r0, [r7, #4]
   19f80:	4a04      	ldr	r2, [pc, #16]	; (19f94 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   19f82:	687b      	ldr	r3, [r7, #4]
   19f84:	601a      	str	r2, [r3, #0]
{
} //~D
   19f86:	687b      	ldr	r3, [r7, #4]
   19f88:	4618      	mov	r0, r3
   19f8a:	370c      	adds	r7, #12
   19f8c:	46bd      	mov	sp, r7
   19f8e:	bc80      	pop	{r7}
   19f90:	4770      	bx	lr
   19f92:	bf00      	nop
   19f94:	0001bb3c 	.word	0x0001bb3c

00019f98 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   19f98:	b480      	push	{r7}
   19f9a:	b083      	sub	sp, #12
   19f9c:	af00      	add	r7, sp, #0
   19f9e:	6078      	str	r0, [r7, #4]
   19fa0:	4a04      	ldr	r2, [pc, #16]	; (19fb4 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   19fa2:	687b      	ldr	r3, [r7, #4]
   19fa4:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   19fa6:	687b      	ldr	r3, [r7, #4]
   19fa8:	4618      	mov	r0, r3
   19faa:	370c      	adds	r7, #12
   19fac:	46bd      	mov	sp, r7
   19fae:	bc80      	pop	{r7}
   19fb0:	4770      	bx	lr
   19fb2:	bf00      	nop
   19fb4:	0001bb3c 	.word	0x0001bb3c

00019fb8 <__aeabi_atexit>:
   19fb8:	460b      	mov	r3, r1
   19fba:	4601      	mov	r1, r0
   19fbc:	4618      	mov	r0, r3
   19fbe:	f000 ba7f 	b.w	1a4c0 <__cxa_atexit>
   19fc2:	bf00      	nop

00019fc4 <__aeabi_frsub>:
   19fc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   19fc8:	e002      	b.n	19fd0 <__addsf3>
   19fca:	bf00      	nop

00019fcc <__aeabi_fsub>:
   19fcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00019fd0 <__addsf3>:
   19fd0:	0042      	lsls	r2, r0, #1
   19fd2:	bf1f      	itttt	ne
   19fd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   19fd8:	ea92 0f03 	teqne	r2, r3
   19fdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   19fe0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   19fe4:	d06a      	beq.n	1a0bc <__addsf3+0xec>
   19fe6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   19fea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   19fee:	bfc1      	itttt	gt
   19ff0:	18d2      	addgt	r2, r2, r3
   19ff2:	4041      	eorgt	r1, r0
   19ff4:	4048      	eorgt	r0, r1
   19ff6:	4041      	eorgt	r1, r0
   19ff8:	bfb8      	it	lt
   19ffa:	425b      	neglt	r3, r3
   19ffc:	2b19      	cmp	r3, #25
   19ffe:	bf88      	it	hi
   1a000:	4770      	bxhi	lr
   1a002:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1a006:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a00a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a00e:	bf18      	it	ne
   1a010:	4240      	negne	r0, r0
   1a012:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a016:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1a01a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a01e:	bf18      	it	ne
   1a020:	4249      	negne	r1, r1
   1a022:	ea92 0f03 	teq	r2, r3
   1a026:	d03f      	beq.n	1a0a8 <__addsf3+0xd8>
   1a028:	f1a2 0201 	sub.w	r2, r2, #1
   1a02c:	fa41 fc03 	asr.w	ip, r1, r3
   1a030:	eb10 000c 	adds.w	r0, r0, ip
   1a034:	f1c3 0320 	rsb	r3, r3, #32
   1a038:	fa01 f103 	lsl.w	r1, r1, r3
   1a03c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a040:	d502      	bpl.n	1a048 <__addsf3+0x78>
   1a042:	4249      	negs	r1, r1
   1a044:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1a048:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a04c:	d313      	bcc.n	1a076 <__addsf3+0xa6>
   1a04e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1a052:	d306      	bcc.n	1a062 <__addsf3+0x92>
   1a054:	0840      	lsrs	r0, r0, #1
   1a056:	ea4f 0131 	mov.w	r1, r1, rrx
   1a05a:	f102 0201 	add.w	r2, r2, #1
   1a05e:	2afe      	cmp	r2, #254	; 0xfe
   1a060:	d251      	bcs.n	1a106 <__addsf3+0x136>
   1a062:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1a066:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a06a:	bf08      	it	eq
   1a06c:	f020 0001 	biceq.w	r0, r0, #1
   1a070:	ea40 0003 	orr.w	r0, r0, r3
   1a074:	4770      	bx	lr
   1a076:	0049      	lsls	r1, r1, #1
   1a078:	eb40 0000 	adc.w	r0, r0, r0
   1a07c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1a080:	f1a2 0201 	sub.w	r2, r2, #1
   1a084:	d1ed      	bne.n	1a062 <__addsf3+0x92>
   1a086:	fab0 fc80 	clz	ip, r0
   1a08a:	f1ac 0c08 	sub.w	ip, ip, #8
   1a08e:	ebb2 020c 	subs.w	r2, r2, ip
   1a092:	fa00 f00c 	lsl.w	r0, r0, ip
   1a096:	bfaa      	itet	ge
   1a098:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1a09c:	4252      	neglt	r2, r2
   1a09e:	4318      	orrge	r0, r3
   1a0a0:	bfbc      	itt	lt
   1a0a2:	40d0      	lsrlt	r0, r2
   1a0a4:	4318      	orrlt	r0, r3
   1a0a6:	4770      	bx	lr
   1a0a8:	f092 0f00 	teq	r2, #0
   1a0ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1a0b0:	bf06      	itte	eq
   1a0b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1a0b6:	3201      	addeq	r2, #1
   1a0b8:	3b01      	subne	r3, #1
   1a0ba:	e7b5      	b.n	1a028 <__addsf3+0x58>
   1a0bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a0c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a0c4:	bf18      	it	ne
   1a0c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a0ca:	d021      	beq.n	1a110 <__addsf3+0x140>
   1a0cc:	ea92 0f03 	teq	r2, r3
   1a0d0:	d004      	beq.n	1a0dc <__addsf3+0x10c>
   1a0d2:	f092 0f00 	teq	r2, #0
   1a0d6:	bf08      	it	eq
   1a0d8:	4608      	moveq	r0, r1
   1a0da:	4770      	bx	lr
   1a0dc:	ea90 0f01 	teq	r0, r1
   1a0e0:	bf1c      	itt	ne
   1a0e2:	2000      	movne	r0, #0
   1a0e4:	4770      	bxne	lr
   1a0e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1a0ea:	d104      	bne.n	1a0f6 <__addsf3+0x126>
   1a0ec:	0040      	lsls	r0, r0, #1
   1a0ee:	bf28      	it	cs
   1a0f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1a0f4:	4770      	bx	lr
   1a0f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1a0fa:	bf3c      	itt	cc
   1a0fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1a100:	4770      	bxcc	lr
   1a102:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a106:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1a10a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a10e:	4770      	bx	lr
   1a110:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1a114:	bf16      	itet	ne
   1a116:	4608      	movne	r0, r1
   1a118:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1a11c:	4601      	movne	r1, r0
   1a11e:	0242      	lsls	r2, r0, #9
   1a120:	bf06      	itte	eq
   1a122:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1a126:	ea90 0f01 	teqeq	r0, r1
   1a12a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1a12e:	4770      	bx	lr

0001a130 <__aeabi_ui2f>:
   1a130:	f04f 0300 	mov.w	r3, #0
   1a134:	e004      	b.n	1a140 <__aeabi_i2f+0x8>
   1a136:	bf00      	nop

0001a138 <__aeabi_i2f>:
   1a138:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1a13c:	bf48      	it	mi
   1a13e:	4240      	negmi	r0, r0
   1a140:	ea5f 0c00 	movs.w	ip, r0
   1a144:	bf08      	it	eq
   1a146:	4770      	bxeq	lr
   1a148:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1a14c:	4601      	mov	r1, r0
   1a14e:	f04f 0000 	mov.w	r0, #0
   1a152:	e01c      	b.n	1a18e <__aeabi_l2f+0x2a>

0001a154 <__aeabi_ul2f>:
   1a154:	ea50 0201 	orrs.w	r2, r0, r1
   1a158:	bf08      	it	eq
   1a15a:	4770      	bxeq	lr
   1a15c:	f04f 0300 	mov.w	r3, #0
   1a160:	e00a      	b.n	1a178 <__aeabi_l2f+0x14>
   1a162:	bf00      	nop

0001a164 <__aeabi_l2f>:
   1a164:	ea50 0201 	orrs.w	r2, r0, r1
   1a168:	bf08      	it	eq
   1a16a:	4770      	bxeq	lr
   1a16c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1a170:	d502      	bpl.n	1a178 <__aeabi_l2f+0x14>
   1a172:	4240      	negs	r0, r0
   1a174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a178:	ea5f 0c01 	movs.w	ip, r1
   1a17c:	bf02      	ittt	eq
   1a17e:	4684      	moveq	ip, r0
   1a180:	4601      	moveq	r1, r0
   1a182:	2000      	moveq	r0, #0
   1a184:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1a188:	bf08      	it	eq
   1a18a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1a18e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1a192:	fabc f28c 	clz	r2, ip
   1a196:	3a08      	subs	r2, #8
   1a198:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1a19c:	db10      	blt.n	1a1c0 <__aeabi_l2f+0x5c>
   1a19e:	fa01 fc02 	lsl.w	ip, r1, r2
   1a1a2:	4463      	add	r3, ip
   1a1a4:	fa00 fc02 	lsl.w	ip, r0, r2
   1a1a8:	f1c2 0220 	rsb	r2, r2, #32
   1a1ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a1b0:	fa20 f202 	lsr.w	r2, r0, r2
   1a1b4:	eb43 0002 	adc.w	r0, r3, r2
   1a1b8:	bf08      	it	eq
   1a1ba:	f020 0001 	biceq.w	r0, r0, #1
   1a1be:	4770      	bx	lr
   1a1c0:	f102 0220 	add.w	r2, r2, #32
   1a1c4:	fa01 fc02 	lsl.w	ip, r1, r2
   1a1c8:	f1c2 0220 	rsb	r2, r2, #32
   1a1cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1a1d0:	fa21 f202 	lsr.w	r2, r1, r2
   1a1d4:	eb43 0002 	adc.w	r0, r3, r2
   1a1d8:	bf08      	it	eq
   1a1da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a1de:	4770      	bx	lr

0001a1e0 <__aeabi_fmul>:
   1a1e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a1e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a1e8:	bf1e      	ittt	ne
   1a1ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a1ee:	ea92 0f0c 	teqne	r2, ip
   1a1f2:	ea93 0f0c 	teqne	r3, ip
   1a1f6:	d06f      	beq.n	1a2d8 <__aeabi_fmul+0xf8>
   1a1f8:	441a      	add	r2, r3
   1a1fa:	ea80 0c01 	eor.w	ip, r0, r1
   1a1fe:	0240      	lsls	r0, r0, #9
   1a200:	bf18      	it	ne
   1a202:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1a206:	d01e      	beq.n	1a246 <__aeabi_fmul+0x66>
   1a208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1a20c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1a210:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1a214:	fba0 3101 	umull	r3, r1, r0, r1
   1a218:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a21c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1a220:	bf3e      	ittt	cc
   1a222:	0049      	lslcc	r1, r1, #1
   1a224:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1a228:	005b      	lslcc	r3, r3, #1
   1a22a:	ea40 0001 	orr.w	r0, r0, r1
   1a22e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1a232:	2afd      	cmp	r2, #253	; 0xfd
   1a234:	d81d      	bhi.n	1a272 <__aeabi_fmul+0x92>
   1a236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a23a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a23e:	bf08      	it	eq
   1a240:	f020 0001 	biceq.w	r0, r0, #1
   1a244:	4770      	bx	lr
   1a246:	f090 0f00 	teq	r0, #0
   1a24a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a24e:	bf08      	it	eq
   1a250:	0249      	lsleq	r1, r1, #9
   1a252:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a256:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1a25a:	3a7f      	subs	r2, #127	; 0x7f
   1a25c:	bfc2      	ittt	gt
   1a25e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a262:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a266:	4770      	bxgt	lr
   1a268:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a26c:	f04f 0300 	mov.w	r3, #0
   1a270:	3a01      	subs	r2, #1
   1a272:	dc5d      	bgt.n	1a330 <__aeabi_fmul+0x150>
   1a274:	f112 0f19 	cmn.w	r2, #25
   1a278:	bfdc      	itt	le
   1a27a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1a27e:	4770      	bxle	lr
   1a280:	f1c2 0200 	rsb	r2, r2, #0
   1a284:	0041      	lsls	r1, r0, #1
   1a286:	fa21 f102 	lsr.w	r1, r1, r2
   1a28a:	f1c2 0220 	rsb	r2, r2, #32
   1a28e:	fa00 fc02 	lsl.w	ip, r0, r2
   1a292:	ea5f 0031 	movs.w	r0, r1, rrx
   1a296:	f140 0000 	adc.w	r0, r0, #0
   1a29a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1a29e:	bf08      	it	eq
   1a2a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a2a4:	4770      	bx	lr
   1a2a6:	f092 0f00 	teq	r2, #0
   1a2aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a2ae:	bf02      	ittt	eq
   1a2b0:	0040      	lsleq	r0, r0, #1
   1a2b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a2b6:	3a01      	subeq	r2, #1
   1a2b8:	d0f9      	beq.n	1a2ae <__aeabi_fmul+0xce>
   1a2ba:	ea40 000c 	orr.w	r0, r0, ip
   1a2be:	f093 0f00 	teq	r3, #0
   1a2c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a2c6:	bf02      	ittt	eq
   1a2c8:	0049      	lsleq	r1, r1, #1
   1a2ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a2ce:	3b01      	subeq	r3, #1
   1a2d0:	d0f9      	beq.n	1a2c6 <__aeabi_fmul+0xe6>
   1a2d2:	ea41 010c 	orr.w	r1, r1, ip
   1a2d6:	e78f      	b.n	1a1f8 <__aeabi_fmul+0x18>
   1a2d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a2dc:	ea92 0f0c 	teq	r2, ip
   1a2e0:	bf18      	it	ne
   1a2e2:	ea93 0f0c 	teqne	r3, ip
   1a2e6:	d00a      	beq.n	1a2fe <__aeabi_fmul+0x11e>
   1a2e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a2ec:	bf18      	it	ne
   1a2ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a2f2:	d1d8      	bne.n	1a2a6 <__aeabi_fmul+0xc6>
   1a2f4:	ea80 0001 	eor.w	r0, r0, r1
   1a2f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a2fc:	4770      	bx	lr
   1a2fe:	f090 0f00 	teq	r0, #0
   1a302:	bf17      	itett	ne
   1a304:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1a308:	4608      	moveq	r0, r1
   1a30a:	f091 0f00 	teqne	r1, #0
   1a30e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1a312:	d014      	beq.n	1a33e <__aeabi_fmul+0x15e>
   1a314:	ea92 0f0c 	teq	r2, ip
   1a318:	d101      	bne.n	1a31e <__aeabi_fmul+0x13e>
   1a31a:	0242      	lsls	r2, r0, #9
   1a31c:	d10f      	bne.n	1a33e <__aeabi_fmul+0x15e>
   1a31e:	ea93 0f0c 	teq	r3, ip
   1a322:	d103      	bne.n	1a32c <__aeabi_fmul+0x14c>
   1a324:	024b      	lsls	r3, r1, #9
   1a326:	bf18      	it	ne
   1a328:	4608      	movne	r0, r1
   1a32a:	d108      	bne.n	1a33e <__aeabi_fmul+0x15e>
   1a32c:	ea80 0001 	eor.w	r0, r0, r1
   1a330:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a334:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a338:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a33c:	4770      	bx	lr
   1a33e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a342:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1a346:	4770      	bx	lr

0001a348 <__aeabi_fdiv>:
   1a348:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a34c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a350:	bf1e      	ittt	ne
   1a352:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a356:	ea92 0f0c 	teqne	r2, ip
   1a35a:	ea93 0f0c 	teqne	r3, ip
   1a35e:	d069      	beq.n	1a434 <__aeabi_fdiv+0xec>
   1a360:	eba2 0203 	sub.w	r2, r2, r3
   1a364:	ea80 0c01 	eor.w	ip, r0, r1
   1a368:	0249      	lsls	r1, r1, #9
   1a36a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1a36e:	d037      	beq.n	1a3e0 <__aeabi_fdiv+0x98>
   1a370:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a374:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1a378:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1a37c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a380:	428b      	cmp	r3, r1
   1a382:	bf38      	it	cc
   1a384:	005b      	lslcc	r3, r3, #1
   1a386:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1a38a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1a38e:	428b      	cmp	r3, r1
   1a390:	bf24      	itt	cs
   1a392:	1a5b      	subcs	r3, r3, r1
   1a394:	ea40 000c 	orrcs.w	r0, r0, ip
   1a398:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1a39c:	bf24      	itt	cs
   1a39e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1a3a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a3a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1a3aa:	bf24      	itt	cs
   1a3ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1a3b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a3b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1a3b8:	bf24      	itt	cs
   1a3ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1a3be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a3c2:	011b      	lsls	r3, r3, #4
   1a3c4:	bf18      	it	ne
   1a3c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1a3ca:	d1e0      	bne.n	1a38e <__aeabi_fdiv+0x46>
   1a3cc:	2afd      	cmp	r2, #253	; 0xfd
   1a3ce:	f63f af50 	bhi.w	1a272 <__aeabi_fmul+0x92>
   1a3d2:	428b      	cmp	r3, r1
   1a3d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a3d8:	bf08      	it	eq
   1a3da:	f020 0001 	biceq.w	r0, r0, #1
   1a3de:	4770      	bx	lr
   1a3e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a3e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a3e8:	327f      	adds	r2, #127	; 0x7f
   1a3ea:	bfc2      	ittt	gt
   1a3ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a3f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a3f4:	4770      	bxgt	lr
   1a3f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a3fa:	f04f 0300 	mov.w	r3, #0
   1a3fe:	3a01      	subs	r2, #1
   1a400:	e737      	b.n	1a272 <__aeabi_fmul+0x92>
   1a402:	f092 0f00 	teq	r2, #0
   1a406:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a40a:	bf02      	ittt	eq
   1a40c:	0040      	lsleq	r0, r0, #1
   1a40e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a412:	3a01      	subeq	r2, #1
   1a414:	d0f9      	beq.n	1a40a <__aeabi_fdiv+0xc2>
   1a416:	ea40 000c 	orr.w	r0, r0, ip
   1a41a:	f093 0f00 	teq	r3, #0
   1a41e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a422:	bf02      	ittt	eq
   1a424:	0049      	lsleq	r1, r1, #1
   1a426:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a42a:	3b01      	subeq	r3, #1
   1a42c:	d0f9      	beq.n	1a422 <__aeabi_fdiv+0xda>
   1a42e:	ea41 010c 	orr.w	r1, r1, ip
   1a432:	e795      	b.n	1a360 <__aeabi_fdiv+0x18>
   1a434:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a438:	ea92 0f0c 	teq	r2, ip
   1a43c:	d108      	bne.n	1a450 <__aeabi_fdiv+0x108>
   1a43e:	0242      	lsls	r2, r0, #9
   1a440:	f47f af7d 	bne.w	1a33e <__aeabi_fmul+0x15e>
   1a444:	ea93 0f0c 	teq	r3, ip
   1a448:	f47f af70 	bne.w	1a32c <__aeabi_fmul+0x14c>
   1a44c:	4608      	mov	r0, r1
   1a44e:	e776      	b.n	1a33e <__aeabi_fmul+0x15e>
   1a450:	ea93 0f0c 	teq	r3, ip
   1a454:	d104      	bne.n	1a460 <__aeabi_fdiv+0x118>
   1a456:	024b      	lsls	r3, r1, #9
   1a458:	f43f af4c 	beq.w	1a2f4 <__aeabi_fmul+0x114>
   1a45c:	4608      	mov	r0, r1
   1a45e:	e76e      	b.n	1a33e <__aeabi_fmul+0x15e>
   1a460:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a464:	bf18      	it	ne
   1a466:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a46a:	d1ca      	bne.n	1a402 <__aeabi_fdiv+0xba>
   1a46c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1a470:	f47f af5c 	bne.w	1a32c <__aeabi_fmul+0x14c>
   1a474:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1a478:	f47f af3c 	bne.w	1a2f4 <__aeabi_fmul+0x114>
   1a47c:	e75f      	b.n	1a33e <__aeabi_fmul+0x15e>
   1a47e:	bf00      	nop

0001a480 <__aeabi_f2uiz>:
   1a480:	0042      	lsls	r2, r0, #1
   1a482:	d20e      	bcs.n	1a4a2 <__aeabi_f2uiz+0x22>
   1a484:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1a488:	d30b      	bcc.n	1a4a2 <__aeabi_f2uiz+0x22>
   1a48a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1a48e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1a492:	d409      	bmi.n	1a4a8 <__aeabi_f2uiz+0x28>
   1a494:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1a498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a49c:	fa23 f002 	lsr.w	r0, r3, r2
   1a4a0:	4770      	bx	lr
   1a4a2:	f04f 0000 	mov.w	r0, #0
   1a4a6:	4770      	bx	lr
   1a4a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1a4ac:	d101      	bne.n	1a4b2 <__aeabi_f2uiz+0x32>
   1a4ae:	0242      	lsls	r2, r0, #9
   1a4b0:	d102      	bne.n	1a4b8 <__aeabi_f2uiz+0x38>
   1a4b2:	f04f 30ff 	mov.w	r0, #4294967295
   1a4b6:	4770      	bx	lr
   1a4b8:	f04f 0000 	mov.w	r0, #0
   1a4bc:	4770      	bx	lr
   1a4be:	bf00      	nop

0001a4c0 <__cxa_atexit>:
   1a4c0:	4613      	mov	r3, r2
   1a4c2:	460a      	mov	r2, r1
   1a4c4:	4601      	mov	r1, r0
   1a4c6:	2002      	movs	r0, #2
   1a4c8:	f000 ba48 	b.w	1a95c <__register_exitproc>

0001a4cc <ffs>:
   1a4cc:	b140      	cbz	r0, 1a4e0 <ffs+0x14>
   1a4ce:	2300      	movs	r3, #0
   1a4d0:	fa40 f103 	asr.w	r1, r0, r3
   1a4d4:	1c5a      	adds	r2, r3, #1
   1a4d6:	07c9      	lsls	r1, r1, #31
   1a4d8:	4613      	mov	r3, r2
   1a4da:	d5f9      	bpl.n	1a4d0 <ffs+0x4>
   1a4dc:	4610      	mov	r0, r2
   1a4de:	4770      	bx	lr
   1a4e0:	4602      	mov	r2, r0
   1a4e2:	4610      	mov	r0, r2
   1a4e4:	4770      	bx	lr
   1a4e6:	bf00      	nop

0001a4e8 <__libc_init_array>:
   1a4e8:	b570      	push	{r4, r5, r6, lr}
   1a4ea:	4e0f      	ldr	r6, [pc, #60]	; (1a528 <__libc_init_array+0x40>)
   1a4ec:	4d0f      	ldr	r5, [pc, #60]	; (1a52c <__libc_init_array+0x44>)
   1a4ee:	1b76      	subs	r6, r6, r5
   1a4f0:	10b6      	asrs	r6, r6, #2
   1a4f2:	bf18      	it	ne
   1a4f4:	2400      	movne	r4, #0
   1a4f6:	d005      	beq.n	1a504 <__libc_init_array+0x1c>
   1a4f8:	3401      	adds	r4, #1
   1a4fa:	f855 3b04 	ldr.w	r3, [r5], #4
   1a4fe:	4798      	blx	r3
   1a500:	42a6      	cmp	r6, r4
   1a502:	d1f9      	bne.n	1a4f8 <__libc_init_array+0x10>
   1a504:	4e0a      	ldr	r6, [pc, #40]	; (1a530 <__libc_init_array+0x48>)
   1a506:	4d0b      	ldr	r5, [pc, #44]	; (1a534 <__libc_init_array+0x4c>)
   1a508:	1b76      	subs	r6, r6, r5
   1a50a:	f001 fb1d 	bl	1bb48 <_init>
   1a50e:	10b6      	asrs	r6, r6, #2
   1a510:	bf18      	it	ne
   1a512:	2400      	movne	r4, #0
   1a514:	d006      	beq.n	1a524 <__libc_init_array+0x3c>
   1a516:	3401      	adds	r4, #1
   1a518:	f855 3b04 	ldr.w	r3, [r5], #4
   1a51c:	4798      	blx	r3
   1a51e:	42a6      	cmp	r6, r4
   1a520:	d1f9      	bne.n	1a516 <__libc_init_array+0x2e>
   1a522:	bd70      	pop	{r4, r5, r6, pc}
   1a524:	bd70      	pop	{r4, r5, r6, pc}
   1a526:	bf00      	nop
   1a528:	0001bb54 	.word	0x0001bb54
   1a52c:	0001bb54 	.word	0x0001bb54
   1a530:	0001bbc8 	.word	0x0001bbc8
   1a534:	0001bb54 	.word	0x0001bb54

0001a538 <memcpy>:
   1a538:	4684      	mov	ip, r0
   1a53a:	ea41 0300 	orr.w	r3, r1, r0
   1a53e:	f013 0303 	ands.w	r3, r3, #3
   1a542:	d16d      	bne.n	1a620 <memcpy+0xe8>
   1a544:	3a40      	subs	r2, #64	; 0x40
   1a546:	d341      	bcc.n	1a5cc <memcpy+0x94>
   1a548:	f851 3b04 	ldr.w	r3, [r1], #4
   1a54c:	f840 3b04 	str.w	r3, [r0], #4
   1a550:	f851 3b04 	ldr.w	r3, [r1], #4
   1a554:	f840 3b04 	str.w	r3, [r0], #4
   1a558:	f851 3b04 	ldr.w	r3, [r1], #4
   1a55c:	f840 3b04 	str.w	r3, [r0], #4
   1a560:	f851 3b04 	ldr.w	r3, [r1], #4
   1a564:	f840 3b04 	str.w	r3, [r0], #4
   1a568:	f851 3b04 	ldr.w	r3, [r1], #4
   1a56c:	f840 3b04 	str.w	r3, [r0], #4
   1a570:	f851 3b04 	ldr.w	r3, [r1], #4
   1a574:	f840 3b04 	str.w	r3, [r0], #4
   1a578:	f851 3b04 	ldr.w	r3, [r1], #4
   1a57c:	f840 3b04 	str.w	r3, [r0], #4
   1a580:	f851 3b04 	ldr.w	r3, [r1], #4
   1a584:	f840 3b04 	str.w	r3, [r0], #4
   1a588:	f851 3b04 	ldr.w	r3, [r1], #4
   1a58c:	f840 3b04 	str.w	r3, [r0], #4
   1a590:	f851 3b04 	ldr.w	r3, [r1], #4
   1a594:	f840 3b04 	str.w	r3, [r0], #4
   1a598:	f851 3b04 	ldr.w	r3, [r1], #4
   1a59c:	f840 3b04 	str.w	r3, [r0], #4
   1a5a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5a4:	f840 3b04 	str.w	r3, [r0], #4
   1a5a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5ac:	f840 3b04 	str.w	r3, [r0], #4
   1a5b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5b4:	f840 3b04 	str.w	r3, [r0], #4
   1a5b8:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5bc:	f840 3b04 	str.w	r3, [r0], #4
   1a5c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5c4:	f840 3b04 	str.w	r3, [r0], #4
   1a5c8:	3a40      	subs	r2, #64	; 0x40
   1a5ca:	d2bd      	bcs.n	1a548 <memcpy+0x10>
   1a5cc:	3230      	adds	r2, #48	; 0x30
   1a5ce:	d311      	bcc.n	1a5f4 <memcpy+0xbc>
   1a5d0:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5d4:	f840 3b04 	str.w	r3, [r0], #4
   1a5d8:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5dc:	f840 3b04 	str.w	r3, [r0], #4
   1a5e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5e4:	f840 3b04 	str.w	r3, [r0], #4
   1a5e8:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5ec:	f840 3b04 	str.w	r3, [r0], #4
   1a5f0:	3a10      	subs	r2, #16
   1a5f2:	d2ed      	bcs.n	1a5d0 <memcpy+0x98>
   1a5f4:	320c      	adds	r2, #12
   1a5f6:	d305      	bcc.n	1a604 <memcpy+0xcc>
   1a5f8:	f851 3b04 	ldr.w	r3, [r1], #4
   1a5fc:	f840 3b04 	str.w	r3, [r0], #4
   1a600:	3a04      	subs	r2, #4
   1a602:	d2f9      	bcs.n	1a5f8 <memcpy+0xc0>
   1a604:	3204      	adds	r2, #4
   1a606:	d008      	beq.n	1a61a <memcpy+0xe2>
   1a608:	07d2      	lsls	r2, r2, #31
   1a60a:	bf1c      	itt	ne
   1a60c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1a610:	f800 3b01 	strbne.w	r3, [r0], #1
   1a614:	d301      	bcc.n	1a61a <memcpy+0xe2>
   1a616:	880b      	ldrh	r3, [r1, #0]
   1a618:	8003      	strh	r3, [r0, #0]
   1a61a:	4660      	mov	r0, ip
   1a61c:	4770      	bx	lr
   1a61e:	bf00      	nop
   1a620:	2a08      	cmp	r2, #8
   1a622:	d313      	bcc.n	1a64c <memcpy+0x114>
   1a624:	078b      	lsls	r3, r1, #30
   1a626:	d08d      	beq.n	1a544 <memcpy+0xc>
   1a628:	f010 0303 	ands.w	r3, r0, #3
   1a62c:	d08a      	beq.n	1a544 <memcpy+0xc>
   1a62e:	f1c3 0304 	rsb	r3, r3, #4
   1a632:	1ad2      	subs	r2, r2, r3
   1a634:	07db      	lsls	r3, r3, #31
   1a636:	bf1c      	itt	ne
   1a638:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1a63c:	f800 3b01 	strbne.w	r3, [r0], #1
   1a640:	d380      	bcc.n	1a544 <memcpy+0xc>
   1a642:	f831 3b02 	ldrh.w	r3, [r1], #2
   1a646:	f820 3b02 	strh.w	r3, [r0], #2
   1a64a:	e77b      	b.n	1a544 <memcpy+0xc>
   1a64c:	3a04      	subs	r2, #4
   1a64e:	d3d9      	bcc.n	1a604 <memcpy+0xcc>
   1a650:	3a01      	subs	r2, #1
   1a652:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a656:	f800 3b01 	strb.w	r3, [r0], #1
   1a65a:	d2f9      	bcs.n	1a650 <memcpy+0x118>
   1a65c:	780b      	ldrb	r3, [r1, #0]
   1a65e:	7003      	strb	r3, [r0, #0]
   1a660:	784b      	ldrb	r3, [r1, #1]
   1a662:	7043      	strb	r3, [r0, #1]
   1a664:	788b      	ldrb	r3, [r1, #2]
   1a666:	7083      	strb	r3, [r0, #2]
   1a668:	4660      	mov	r0, ip
   1a66a:	4770      	bx	lr

0001a66c <memset>:
   1a66c:	b470      	push	{r4, r5, r6}
   1a66e:	0786      	lsls	r6, r0, #30
   1a670:	d046      	beq.n	1a700 <memset+0x94>
   1a672:	1e54      	subs	r4, r2, #1
   1a674:	2a00      	cmp	r2, #0
   1a676:	d041      	beq.n	1a6fc <memset+0x90>
   1a678:	b2ca      	uxtb	r2, r1
   1a67a:	4603      	mov	r3, r0
   1a67c:	e002      	b.n	1a684 <memset+0x18>
   1a67e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1a682:	d33b      	bcc.n	1a6fc <memset+0x90>
   1a684:	f803 2b01 	strb.w	r2, [r3], #1
   1a688:	079d      	lsls	r5, r3, #30
   1a68a:	d1f8      	bne.n	1a67e <memset+0x12>
   1a68c:	2c03      	cmp	r4, #3
   1a68e:	d92e      	bls.n	1a6ee <memset+0x82>
   1a690:	b2cd      	uxtb	r5, r1
   1a692:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1a696:	2c0f      	cmp	r4, #15
   1a698:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1a69c:	d919      	bls.n	1a6d2 <memset+0x66>
   1a69e:	f103 0210 	add.w	r2, r3, #16
   1a6a2:	4626      	mov	r6, r4
   1a6a4:	3e10      	subs	r6, #16
   1a6a6:	2e0f      	cmp	r6, #15
   1a6a8:	f842 5c10 	str.w	r5, [r2, #-16]
   1a6ac:	f842 5c0c 	str.w	r5, [r2, #-12]
   1a6b0:	f842 5c08 	str.w	r5, [r2, #-8]
   1a6b4:	f842 5c04 	str.w	r5, [r2, #-4]
   1a6b8:	f102 0210 	add.w	r2, r2, #16
   1a6bc:	d8f2      	bhi.n	1a6a4 <memset+0x38>
   1a6be:	f1a4 0210 	sub.w	r2, r4, #16
   1a6c2:	f022 020f 	bic.w	r2, r2, #15
   1a6c6:	f004 040f 	and.w	r4, r4, #15
   1a6ca:	3210      	adds	r2, #16
   1a6cc:	2c03      	cmp	r4, #3
   1a6ce:	4413      	add	r3, r2
   1a6d0:	d90d      	bls.n	1a6ee <memset+0x82>
   1a6d2:	461e      	mov	r6, r3
   1a6d4:	4622      	mov	r2, r4
   1a6d6:	3a04      	subs	r2, #4
   1a6d8:	2a03      	cmp	r2, #3
   1a6da:	f846 5b04 	str.w	r5, [r6], #4
   1a6de:	d8fa      	bhi.n	1a6d6 <memset+0x6a>
   1a6e0:	1f22      	subs	r2, r4, #4
   1a6e2:	f022 0203 	bic.w	r2, r2, #3
   1a6e6:	3204      	adds	r2, #4
   1a6e8:	4413      	add	r3, r2
   1a6ea:	f004 0403 	and.w	r4, r4, #3
   1a6ee:	b12c      	cbz	r4, 1a6fc <memset+0x90>
   1a6f0:	b2c9      	uxtb	r1, r1
   1a6f2:	441c      	add	r4, r3
   1a6f4:	f803 1b01 	strb.w	r1, [r3], #1
   1a6f8:	429c      	cmp	r4, r3
   1a6fa:	d1fb      	bne.n	1a6f4 <memset+0x88>
   1a6fc:	bc70      	pop	{r4, r5, r6}
   1a6fe:	4770      	bx	lr
   1a700:	4614      	mov	r4, r2
   1a702:	4603      	mov	r3, r0
   1a704:	e7c2      	b.n	1a68c <memset+0x20>
   1a706:	bf00      	nop

0001a708 <rand>:
   1a708:	b410      	push	{r4}
   1a70a:	4b0c      	ldr	r3, [pc, #48]	; (1a73c <rand+0x34>)
   1a70c:	480c      	ldr	r0, [pc, #48]	; (1a740 <rand+0x38>)
   1a70e:	6819      	ldr	r1, [r3, #0]
   1a710:	4c0c      	ldr	r4, [pc, #48]	; (1a744 <rand+0x3c>)
   1a712:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1a716:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1a71a:	fb00 f002 	mul.w	r0, r0, r2
   1a71e:	fb04 0003 	mla	r0, r4, r3, r0
   1a722:	fba2 2304 	umull	r2, r3, r2, r4
   1a726:	4403      	add	r3, r0
   1a728:	3201      	adds	r2, #1
   1a72a:	f143 0300 	adc.w	r3, r3, #0
   1a72e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1a732:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1a736:	bc10      	pop	{r4}
   1a738:	4770      	bx	lr
   1a73a:	bf00      	nop
   1a73c:	20000614 	.word	0x20000614
   1a740:	5851f42d 	.word	0x5851f42d
   1a744:	4c957f2d 	.word	0x4c957f2d

0001a748 <strcat>:
   1a748:	0783      	lsls	r3, r0, #30
   1a74a:	b510      	push	{r4, lr}
   1a74c:	4604      	mov	r4, r0
   1a74e:	d110      	bne.n	1a772 <strcat+0x2a>
   1a750:	6802      	ldr	r2, [r0, #0]
   1a752:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1a756:	ea23 0302 	bic.w	r3, r3, r2
   1a75a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1a75e:	d108      	bne.n	1a772 <strcat+0x2a>
   1a760:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1a764:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1a768:	ea23 0302 	bic.w	r3, r3, r2
   1a76c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1a770:	d0f6      	beq.n	1a760 <strcat+0x18>
   1a772:	7803      	ldrb	r3, [r0, #0]
   1a774:	b11b      	cbz	r3, 1a77e <strcat+0x36>
   1a776:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a77a:	2b00      	cmp	r3, #0
   1a77c:	d1fb      	bne.n	1a776 <strcat+0x2e>
   1a77e:	f000 f803 	bl	1a788 <strcpy>
   1a782:	4620      	mov	r0, r4
   1a784:	bd10      	pop	{r4, pc}
   1a786:	bf00      	nop

0001a788 <strcpy>:
   1a788:	ea80 0201 	eor.w	r2, r0, r1
   1a78c:	4684      	mov	ip, r0
   1a78e:	f012 0f03 	tst.w	r2, #3
   1a792:	d14f      	bne.n	1a834 <strcpy+0xac>
   1a794:	f011 0f03 	tst.w	r1, #3
   1a798:	d132      	bne.n	1a800 <strcpy+0x78>
   1a79a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1a79e:	f011 0f04 	tst.w	r1, #4
   1a7a2:	f851 3b04 	ldr.w	r3, [r1], #4
   1a7a6:	d00b      	beq.n	1a7c0 <strcpy+0x38>
   1a7a8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1a7ac:	439a      	bics	r2, r3
   1a7ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a7b2:	bf04      	itt	eq
   1a7b4:	f84c 3b04 	streq.w	r3, [ip], #4
   1a7b8:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a7bc:	d116      	bne.n	1a7ec <strcpy+0x64>
   1a7be:	bf00      	nop
   1a7c0:	f851 4b04 	ldr.w	r4, [r1], #4
   1a7c4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1a7c8:	439a      	bics	r2, r3
   1a7ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a7ce:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1a7d2:	d10b      	bne.n	1a7ec <strcpy+0x64>
   1a7d4:	f84c 3b04 	str.w	r3, [ip], #4
   1a7d8:	43a2      	bics	r2, r4
   1a7da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a7de:	bf04      	itt	eq
   1a7e0:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a7e4:	f84c 4b04 	streq.w	r4, [ip], #4
   1a7e8:	d0ea      	beq.n	1a7c0 <strcpy+0x38>
   1a7ea:	4623      	mov	r3, r4
   1a7ec:	f80c 3b01 	strb.w	r3, [ip], #1
   1a7f0:	f013 0fff 	tst.w	r3, #255	; 0xff
   1a7f4:	ea4f 2333 	mov.w	r3, r3, ror #8
   1a7f8:	d1f8      	bne.n	1a7ec <strcpy+0x64>
   1a7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a7fe:	4770      	bx	lr
   1a800:	f011 0f01 	tst.w	r1, #1
   1a804:	d006      	beq.n	1a814 <strcpy+0x8c>
   1a806:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a80a:	f80c 2b01 	strb.w	r2, [ip], #1
   1a80e:	2a00      	cmp	r2, #0
   1a810:	bf08      	it	eq
   1a812:	4770      	bxeq	lr
   1a814:	f011 0f02 	tst.w	r1, #2
   1a818:	d0bf      	beq.n	1a79a <strcpy+0x12>
   1a81a:	f831 2b02 	ldrh.w	r2, [r1], #2
   1a81e:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a822:	bf16      	itet	ne
   1a824:	f82c 2b02 	strhne.w	r2, [ip], #2
   1a828:	f88c 2000 	strbeq.w	r2, [ip]
   1a82c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1a830:	d1b3      	bne.n	1a79a <strcpy+0x12>
   1a832:	4770      	bx	lr
   1a834:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a838:	f80c 2b01 	strb.w	r2, [ip], #1
   1a83c:	2a00      	cmp	r2, #0
   1a83e:	d1f9      	bne.n	1a834 <strcpy+0xac>
   1a840:	4770      	bx	lr
   1a842:	bf00      	nop
	...

0001a880 <strlen>:
   1a880:	f890 f000 	pld	[r0]
   1a884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1a888:	f020 0107 	bic.w	r1, r0, #7
   1a88c:	f06f 0c00 	mvn.w	ip, #0
   1a890:	f010 0407 	ands.w	r4, r0, #7
   1a894:	f891 f020 	pld	[r1, #32]
   1a898:	f040 8049 	bne.w	1a92e <strlen+0xae>
   1a89c:	f04f 0400 	mov.w	r4, #0
   1a8a0:	f06f 0007 	mvn.w	r0, #7
   1a8a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a8a8:	f891 f040 	pld	[r1, #64]	; 0x40
   1a8ac:	f100 0008 	add.w	r0, r0, #8
   1a8b0:	fa82 f24c 	uadd8	r2, r2, ip
   1a8b4:	faa4 f28c 	sel	r2, r4, ip
   1a8b8:	fa83 f34c 	uadd8	r3, r3, ip
   1a8bc:	faa2 f38c 	sel	r3, r2, ip
   1a8c0:	bb4b      	cbnz	r3, 1a916 <strlen+0x96>
   1a8c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1a8c6:	fa82 f24c 	uadd8	r2, r2, ip
   1a8ca:	f100 0008 	add.w	r0, r0, #8
   1a8ce:	faa4 f28c 	sel	r2, r4, ip
   1a8d2:	fa83 f34c 	uadd8	r3, r3, ip
   1a8d6:	faa2 f38c 	sel	r3, r2, ip
   1a8da:	b9e3      	cbnz	r3, 1a916 <strlen+0x96>
   1a8dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1a8e0:	fa82 f24c 	uadd8	r2, r2, ip
   1a8e4:	f100 0008 	add.w	r0, r0, #8
   1a8e8:	faa4 f28c 	sel	r2, r4, ip
   1a8ec:	fa83 f34c 	uadd8	r3, r3, ip
   1a8f0:	faa2 f38c 	sel	r3, r2, ip
   1a8f4:	b97b      	cbnz	r3, 1a916 <strlen+0x96>
   1a8f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1a8fa:	f101 0120 	add.w	r1, r1, #32
   1a8fe:	fa82 f24c 	uadd8	r2, r2, ip
   1a902:	f100 0008 	add.w	r0, r0, #8
   1a906:	faa4 f28c 	sel	r2, r4, ip
   1a90a:	fa83 f34c 	uadd8	r3, r3, ip
   1a90e:	faa2 f38c 	sel	r3, r2, ip
   1a912:	2b00      	cmp	r3, #0
   1a914:	d0c6      	beq.n	1a8a4 <strlen+0x24>
   1a916:	2a00      	cmp	r2, #0
   1a918:	bf04      	itt	eq
   1a91a:	3004      	addeq	r0, #4
   1a91c:	461a      	moveq	r2, r3
   1a91e:	ba12      	rev	r2, r2
   1a920:	fab2 f282 	clz	r2, r2
   1a924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1a928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1a92c:	4770      	bx	lr
   1a92e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a932:	f004 0503 	and.w	r5, r4, #3
   1a936:	f1c4 0000 	rsb	r0, r4, #0
   1a93a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1a93e:	f014 0f04 	tst.w	r4, #4
   1a942:	f891 f040 	pld	[r1, #64]	; 0x40
   1a946:	fa0c f505 	lsl.w	r5, ip, r5
   1a94a:	ea62 0205 	orn	r2, r2, r5
   1a94e:	bf1c      	itt	ne
   1a950:	ea63 0305 	ornne	r3, r3, r5
   1a954:	4662      	movne	r2, ip
   1a956:	f04f 0400 	mov.w	r4, #0
   1a95a:	e7a9      	b.n	1a8b0 <strlen+0x30>

0001a95c <__register_exitproc>:
   1a95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a960:	4d2c      	ldr	r5, [pc, #176]	; (1aa14 <__register_exitproc+0xb8>)
   1a962:	4606      	mov	r6, r0
   1a964:	6828      	ldr	r0, [r5, #0]
   1a966:	4698      	mov	r8, r3
   1a968:	460f      	mov	r7, r1
   1a96a:	4691      	mov	r9, r2
   1a96c:	f000 f882 	bl	1aa74 <__retarget_lock_acquire_recursive>
   1a970:	4b29      	ldr	r3, [pc, #164]	; (1aa18 <__register_exitproc+0xbc>)
   1a972:	681c      	ldr	r4, [r3, #0]
   1a974:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a978:	2b00      	cmp	r3, #0
   1a97a:	d03e      	beq.n	1a9fa <__register_exitproc+0x9e>
   1a97c:	685a      	ldr	r2, [r3, #4]
   1a97e:	2a1f      	cmp	r2, #31
   1a980:	dc1c      	bgt.n	1a9bc <__register_exitproc+0x60>
   1a982:	f102 0e01 	add.w	lr, r2, #1
   1a986:	b176      	cbz	r6, 1a9a6 <__register_exitproc+0x4a>
   1a988:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1a98c:	2401      	movs	r4, #1
   1a98e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1a992:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1a996:	4094      	lsls	r4, r2
   1a998:	4320      	orrs	r0, r4
   1a99a:	2e02      	cmp	r6, #2
   1a99c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1a9a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1a9a4:	d023      	beq.n	1a9ee <__register_exitproc+0x92>
   1a9a6:	3202      	adds	r2, #2
   1a9a8:	f8c3 e004 	str.w	lr, [r3, #4]
   1a9ac:	6828      	ldr	r0, [r5, #0]
   1a9ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1a9b2:	f000 f861 	bl	1aa78 <__retarget_lock_release_recursive>
   1a9b6:	2000      	movs	r0, #0
   1a9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a9bc:	4b17      	ldr	r3, [pc, #92]	; (1aa1c <__register_exitproc+0xc0>)
   1a9be:	b30b      	cbz	r3, 1aa04 <__register_exitproc+0xa8>
   1a9c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1a9c4:	f7f6 fb8c 	bl	110e0 <malloc>
   1a9c8:	4603      	mov	r3, r0
   1a9ca:	b1d8      	cbz	r0, 1aa04 <__register_exitproc+0xa8>
   1a9cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1a9d0:	6002      	str	r2, [r0, #0]
   1a9d2:	2100      	movs	r1, #0
   1a9d4:	6041      	str	r1, [r0, #4]
   1a9d6:	460a      	mov	r2, r1
   1a9d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1a9dc:	f04f 0e01 	mov.w	lr, #1
   1a9e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1a9e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1a9e8:	2e00      	cmp	r6, #0
   1a9ea:	d0dc      	beq.n	1a9a6 <__register_exitproc+0x4a>
   1a9ec:	e7cc      	b.n	1a988 <__register_exitproc+0x2c>
   1a9ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1a9f2:	430c      	orrs	r4, r1
   1a9f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1a9f8:	e7d5      	b.n	1a9a6 <__register_exitproc+0x4a>
   1a9fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1a9fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1aa02:	e7bb      	b.n	1a97c <__register_exitproc+0x20>
   1aa04:	6828      	ldr	r0, [r5, #0]
   1aa06:	f000 f837 	bl	1aa78 <__retarget_lock_release_recursive>
   1aa0a:	f04f 30ff 	mov.w	r0, #4294967295
   1aa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1aa12:	bf00      	nop
   1aa14:	20000a40 	.word	0x20000a40
   1aa18:	0001bb44 	.word	0x0001bb44
   1aa1c:	000110e1 	.word	0x000110e1

0001aa20 <register_fini>:
   1aa20:	4b02      	ldr	r3, [pc, #8]	; (1aa2c <register_fini+0xc>)
   1aa22:	b113      	cbz	r3, 1aa2a <register_fini+0xa>
   1aa24:	4802      	ldr	r0, [pc, #8]	; (1aa30 <register_fini+0x10>)
   1aa26:	f000 b805 	b.w	1aa34 <atexit>
   1aa2a:	4770      	bx	lr
   1aa2c:	00000000 	.word	0x00000000
   1aa30:	0001aa41 	.word	0x0001aa41

0001aa34 <atexit>:
   1aa34:	2300      	movs	r3, #0
   1aa36:	4601      	mov	r1, r0
   1aa38:	461a      	mov	r2, r3
   1aa3a:	4618      	mov	r0, r3
   1aa3c:	f7ff bf8e 	b.w	1a95c <__register_exitproc>

0001aa40 <__libc_fini_array>:
   1aa40:	b538      	push	{r3, r4, r5, lr}
   1aa42:	4c0a      	ldr	r4, [pc, #40]	; (1aa6c <__libc_fini_array+0x2c>)
   1aa44:	4d0a      	ldr	r5, [pc, #40]	; (1aa70 <__libc_fini_array+0x30>)
   1aa46:	1b64      	subs	r4, r4, r5
   1aa48:	10a4      	asrs	r4, r4, #2
   1aa4a:	d00a      	beq.n	1aa62 <__libc_fini_array+0x22>
   1aa4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1aa50:	3b01      	subs	r3, #1
   1aa52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1aa56:	3c01      	subs	r4, #1
   1aa58:	f855 3904 	ldr.w	r3, [r5], #-4
   1aa5c:	4798      	blx	r3
   1aa5e:	2c00      	cmp	r4, #0
   1aa60:	d1f9      	bne.n	1aa56 <__libc_fini_array+0x16>
   1aa62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1aa66:	f001 b8af 	b.w	1bbc8 <_fini>
   1aa6a:	bf00      	nop
   1aa6c:	0001bbd8 	.word	0x0001bbd8
   1aa70:	0001bbd4 	.word	0x0001bbd4

0001aa74 <__retarget_lock_acquire_recursive>:
   1aa74:	4770      	bx	lr
   1aa76:	bf00      	nop

0001aa78 <__retarget_lock_release_recursive>:
   1aa78:	4770      	bx	lr
   1aa7a:	bf00      	nop
   1aa7c:	6f666e49 	.word	0x6f666e49
   1aa80:	6d654d3a 	.word	0x6d654d3a
   1aa84:	2079726f 	.word	0x2079726f
   1aa88:	72617453 	.word	0x72617453
   1aa8c:	00646574 	.word	0x00646574
   1aa90:	6e6e7552 	.word	0x6e6e7552
   1aa94:	20676e69 	.word	0x20676e69
   1aa98:	6b696c20 	.word	0x6b696c20
   1aa9c:	72632065 	.word	0x72632065
   1aaa0:	21797a61 	.word	0x21797a61
   1aaa4:	00002121 	.word	0x00002121

0001aaa8 <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1aaa8:	00000188 00000000 00000000              ............

0001aab4 <_ZTT16Maintenance_Tool>:
   1aab4:	0001aac8 0001aab4                       ........

0001aabc <_ZTV16Maintenance_Tool>:
   1aabc:	00000188 00000000 00000000 682f2e2e     ............../h
   1aacc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1aadc:	7361625f 00682e65 682f2e2e 692f6c61     _base.h.../hal/i
   1aaec:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
   1aafc:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1ab0c:	635f6c61 6e656c61 2e726164 00000063     al_calendar.c...
   1ab1c:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1ab2c:	615f6e61 636e7973 0000632e 682f2e2e     an_async.c..../h
   1ab3c:	732f6c61 682f6372 635f6c61 735f6372     al/src/hal_crc_s
   1ab4c:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
   1ab5c:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
   1ab6c:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1ab7c:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
   1ab8c:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   1ab9c:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   1abac:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
   1abbc:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1abcc:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
   1abdc:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
   1abec:	6c5f736c 2e747369 00000063 03020100     ls_list.c.......
   1abfc:	07060504 14100c08 40302018              ......... 0@

0001ac08 <_map>:
   1ac08:	00000000 00000040 00000001 00000021     ....@.......!...
   1ac18:	00000003 00000003 00000004 00000004     ................
   1ac28:	00000005 00000005 00000006 00000056     ............V...
   1ac38:	00000007 00000057 00000008 00000028     ....W.......(...
   1ac48:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1ac58:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001ac68 <user_mux_confs>:
   1ac68:	00020100 00000000 00000000 00000000     ................
	...

0001acac <channel_confs>:
   1acac:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001acec <interrupt_cfg>:
	...
   1ad6c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   1ad7c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   1ad8c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   1ad9c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1adac:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   1adbc:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   1adcc:	43000400 43000800 43000c00              ...C...C...C

0001add8 <sercomspi_regs>:
   1add8:	0020000c 00020000 00000000 01ff0001     .. .............
   1ade8:	30000c04 02000000 00000000 ff001700     ...0............
   1adf8:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1ae08:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1ae18:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1ae28:	43001400 43001800                       ...C...C

0001ae30 <_usb_ep_cfgs>:
   1ae30:	20002338 00000000 00000040 20002378     8#. ....@...x#. 
   1ae40:	200023b8 00400040 200023f8 20002438     .#. @.@..#. 8$. 
   1ae50:	00400040 20002478 200024b8 00400040     @.@.x$. .$. @.@.
   1ae60:	200024f8 20002538 00400040 00000804     .$. 8%. @.@.....
   1ae70:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1ae80:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1ae90:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1aea0:	7361625f 00682e65                       _base.h.

0001aea8 <n25q256a_interface>:
   1aea8:	0000d421 0000d4c5 0000d5d5 0000d78d     !...............
   1aeb8:	0000d81d 752f2e2e 642f6273 63697665     ....../usb/devic
   1aec8:	73752f65 2e636462 00000063              e/usbdc.c...

0001aed4 <_ZTV20Compresor_Controller>:
	...
   1aedc:	000159b5                                .Y..

0001aee0 <_ZTV28Compressor_CANOpen_Interface>:
	...
   1aee8:	000159b5                                .Y..

0001aeec <_ZTV9CDC_Class>:
	...
   1aef4:	00010a31 00010b11 00010685 000109f9     1...............
   1af04:	00010ba9 000109bd 000108a1 000108f1     ................
   1af14:	00010a19 00010a79                       ....y...

0001af1c <_ZTV6Stream>:
	...
   1af24:	000110f5 00010d15 00010685 00010699     ................
   1af34:	000110f5 000110f5 000110f5 2e257830     ............0x%.
   1af44:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1af54:	0066766f                                ovf.

0001af58 <_ZTV5Print>:
	...
   1af60:	000110f5 00010d15 00010685 00010699     ................

0001af70 <_ZTV18Event_Logger_Class>:
	...
   1af78:	00019c29 00019d19 74696e49 696c6169     ).......Initiali
   1af88:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   1af98:	43555320 53534543 00000000 49414620      SUCCESS.... FAI
   1afa8:	44454c4c 00000000 4b4e5520 4e574f4e     LLED.... UNKNOWN
   1afb8:	00000000 73616c46 654d2068 79726f6d     ....Flash Memory
   1afc8:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   1afd8:	00000000 73616c46 654d2068 79726f6d     ....Flash Memory
   1afe8:	6c655320 73655466 41462074 44454c49      SelfTest FAILED
   1aff8:	00000000 75646f4d 0020656c 20495053     ....Module .SPI 
   1b008:	706d6554 74617265 73657275 61745320     Temperatures Sta
   1b018:	64657472 00000000 20495053 706d6554     rted....SPI Temp
   1b028:	74617265 73657275 69614620 0064656c     eratures Failed.

0001b038 <_ZTV13CANOpen_Class>:
	...
   1b040:	000159b5                                .Y..

0001b044 <_ZTV8CO_Class>:
	...
   1b04c:	000159b5                                .Y..

0001b050 <_ZTV15CO_Driver_Class>:
	...
   1b058:	000159b5                                .Y..

0001b05c <_ZL13OD_record1018>:
   1b05c:	200003e0 00000005 00000001 200003e4     ... ........... 
   1b06c:	00000085 00000004 200003e8 00000085     ........... ....
   1b07c:	00000004 200003ec 00000085 00000004     ....... ........
   1b08c:	200003f0 00000085 00000004              ... ........

0001b098 <_ZL13OD_record1200>:
   1b098:	200003fc 00000005 00000001 20000400     ... ........... 
   1b0a8:	00000085 00000004 20000404 00000085     ........... ....
   1b0b8:	00000004                                ....

0001b0bc <_ZL13OD_record1400>:
   1b0bc:	20000408 00000005 00000001 2000040c     ... ........... 
   1b0cc:	0000008d 00000004 20000410 0000000d     ........... ....
   1b0dc:	00000001                                ....

0001b0e0 <_ZL13OD_record1401>:
   1b0e0:	20000414 00000005 00000001 20000418     ... ........... 
   1b0f0:	0000008d 00000004 2000041c 0000000d     ........... ....
   1b100:	00000001                                ....

0001b104 <_ZL13OD_record1402>:
   1b104:	20000420 00000005 00000001 20000424      .. ........$.. 
   1b114:	0000008d 00000004 20000428 0000000d     ........(.. ....
   1b124:	00000001                                ....

0001b128 <_ZL13OD_record1403>:
   1b128:	2000042c 00000005 00000001 20000430     ,.. ........0.. 
   1b138:	0000008d 00000004 20000434 0000000d     ........4.. ....
   1b148:	00000001                                ....

0001b14c <_ZL13OD_record1600>:
   1b14c:	20000438 0000000d 00000001 2000043c     8.. ........<.. 
   1b15c:	0000008d 00000004 20000440 0000008d     ........@.. ....
   1b16c:	00000004 20000444 0000008d 00000004     ....D.. ........
   1b17c:	20000448 0000008d 00000004 2000044c     H.. ........L.. 
   1b18c:	0000008d 00000004 20000450 0000008d     ........P.. ....
   1b19c:	00000004 20000454 0000008d 00000004     ....T.. ........
   1b1ac:	20000458 0000008d 00000004              X.. ........

0001b1b8 <_ZL13OD_record1601>:
   1b1b8:	2000045c 0000000d 00000001 20000460     \.. ........`.. 
   1b1c8:	0000008d 00000004 20000464 0000008d     ........d.. ....
   1b1d8:	00000004 20000468 0000008d 00000004     ....h.. ........
   1b1e8:	2000046c 0000008d 00000004 20000470     l.. ........p.. 
   1b1f8:	0000008d 00000004 20000474 0000008d     ........t.. ....
   1b208:	00000004 20000478 0000008d 00000004     ....x.. ........
   1b218:	2000047c 0000008d 00000004              |.. ........

0001b224 <_ZL13OD_record1602>:
   1b224:	20000480 0000000d 00000001 20000484     ... ........... 
   1b234:	0000008d 00000004 20000488 0000008d     ........... ....
   1b244:	00000004 2000048c 0000008d 00000004     ....... ........
   1b254:	20000490 0000008d 00000004 20000494     ... ........... 
   1b264:	0000008d 00000004 20000498 0000008d     ........... ....
   1b274:	00000004 2000049c 0000008d 00000004     ....... ........
   1b284:	200004a0 0000008d 00000004              ... ........

0001b290 <_ZL13OD_record1603>:
   1b290:	200004a4 0000000d 00000001 200004a8     ... ........... 
   1b2a0:	0000008d 00000004 200004ac 0000008d     ........... ....
   1b2b0:	00000004 200004b0 0000008d 00000004     ....... ........
   1b2c0:	200004b4 0000008d 00000004 200004b8     ... ........... 
   1b2d0:	0000008d 00000004 200004bc 0000008d     ........... ....
   1b2e0:	00000004 200004c0 0000008d 00000004     ....... ........
   1b2f0:	200004c4 0000008d 00000004              ... ........

0001b2fc <_ZL13OD_record1800>:
   1b2fc:	200004c8 00000005 00000001 200004cc     ... ........... 
   1b30c:	0000008d 00000004 200004d0 0000000d     ........... ....
   1b31c:	00000001 200004d4 0000008d 00000002     ....... ........
   1b32c:	200004d8 0000000d 00000001 200004dc     ... ........... 
   1b33c:	0000008d 00000002 200004e0 0000000d     ........... ....
   1b34c:	00000001                                ....

0001b350 <_ZL13OD_record1801>:
   1b350:	200004e4 00000005 00000001 200004e8     ... ........... 
   1b360:	0000008d 00000004 200004ec 0000000d     ........... ....
   1b370:	00000001 200004f0 0000008d 00000002     ....... ........
   1b380:	200004f4 0000000d 00000001 200004f8     ... ........... 
   1b390:	0000008d 00000002 200004fc 0000000d     ........... ....
   1b3a0:	00000001                                ....

0001b3a4 <_ZL13OD_record1802>:
   1b3a4:	20000500 00000005 00000001 20000504     ... ........... 
   1b3b4:	0000008d 00000004 20000508 0000000d     ........... ....
   1b3c4:	00000001 2000050c 0000008d 00000002     ....... ........
   1b3d4:	20000510 0000000d 00000001 20000514     ... ........... 
   1b3e4:	0000008d 00000002 20000518 0000000d     ........... ....
   1b3f4:	00000001                                ....

0001b3f8 <_ZL13OD_record1803>:
   1b3f8:	2000051c 00000005 00000001 20000520     ... ........ .. 
   1b408:	0000008d 00000004 20000524 0000000d     ........$.. ....
   1b418:	00000001 20000528 0000008d 00000002     ....(.. ........
   1b428:	2000052c 0000000d 00000001 20000530     ,.. ........0.. 
   1b438:	0000008d 00000002 20000534 0000000d     ........4.. ....
   1b448:	00000001                                ....

0001b44c <_ZL13OD_record1A00>:
   1b44c:	20000538 0000000d 00000001 2000053c     8.. ........<.. 
   1b45c:	0000008d 00000004 20000540 0000008d     ........@.. ....
   1b46c:	00000004 20000544 0000008d 00000004     ....D.. ........
   1b47c:	20000548 0000008d 00000004 2000054c     H.. ........L.. 
   1b48c:	0000008d 00000004 20000550 0000008d     ........P.. ....
   1b49c:	00000004 20000554 0000008d 00000004     ....T.. ........
   1b4ac:	20000558 0000008d 00000004              X.. ........

0001b4b8 <_ZL13OD_record1A01>:
   1b4b8:	2000055c 0000000d 00000001 20000560     \.. ........`.. 
   1b4c8:	0000008d 00000004 20000564 0000008d     ........d.. ....
   1b4d8:	00000004 20000568 0000008d 00000004     ....h.. ........
   1b4e8:	2000056c 0000008d 00000004 20000570     l.. ........p.. 
   1b4f8:	0000008d 00000004 20000574 0000008d     ........t.. ....
   1b508:	00000004 20000578 0000008d 00000004     ....x.. ........
   1b518:	2000057c 0000008d 00000004              |.. ........

0001b524 <_ZL13OD_record1A02>:
   1b524:	20000580 0000000d 00000001 20000584     ... ........... 
   1b534:	0000008d 00000004 20000588 0000008d     ........... ....
   1b544:	00000004 2000058c 0000008d 00000004     ....... ........
   1b554:	20000590 0000008d 00000004 20000594     ... ........... 
   1b564:	0000008d 00000004 20000598 0000008d     ........... ....
   1b574:	00000004 2000059c 0000008d 00000004     ....... ........
   1b584:	200005a0 0000008d 00000004              ... ........

0001b590 <_ZL13OD_record1A03>:
   1b590:	200005a4 0000000d 00000001 200005a8     ... ........... 
   1b5a0:	0000008d 00000004 200005ac 0000008d     ........... ....
   1b5b0:	00000004 200005b0 0000008d 00000004     ....... ........
   1b5c0:	200005b4 0000008d 00000004 200005b8     ... ........... 
   1b5d0:	0000008d 00000004 200005bc 0000008d     ........... ....
   1b5e0:	00000004 200005c0 0000008d 00000004     ....... ........
   1b5f0:	200005c4 0000008d 00000004              ... ........

0001b5fc <_ZL13OD_record2120>:
   1b5fc:	200002b0 00000006 00000001 200002b8     ... ........... 
   1b60c:	000000be 00000008 200002c0 000000be     ........... ....
   1b61c:	00000008 200002c8 000000be 00000004     ....... ........
   1b62c:	200002d0 000000be 00000008 00000000     ... ............
   1b63c:	0000000e 00000000                       ........

0001b644 <_ZL13OD_record2130>:
   1b644:	200002e0 00000006 00000001 200002e1     ... ........... 
   1b654:	00000006 0000001e 20000300 0000008e     ........... ....
   1b664:	00000008 20000308 000000be 00000004     ....... ........

0001b674 <CO_ObjDict>:
   1b674:	00001000 00000000 00000085 00000004     ................
   1b684:	200003a0 00001001 00000000 00000036     ... ........6...
   1b694:	00000001 20000224 00001002 00000000     ....$.. ........
   1b6a4:	000000b6 00000004 20000228 00001003     ........(.. ....
   1b6b4:	00000008 0000008e 00000004 2000022c     ............,.. 
   1b6c4:	00001005 00000000 0000008d 00000004     ................
   1b6d4:	200003a4 00001006 00000000 0000008d     ... ............
   1b6e4:	00000004 200003a8 00001007 00000000     ....... ........
   1b6f4:	0000008d 00000004 200003ac 00001008     ........... ....
   1b704:	00000000 00000005 0000000b 200003b0     ............... 
   1b714:	00001009 00000000 00000005 00000004     ................
   1b724:	200003bb 0000100a 00000000 00000005     ... ............
   1b734:	00000004 200003bf 00001010 00000001     ....... ........
   1b744:	0000008e 00000004 2000024c 00001011     ........L.. ....
   1b754:	00000001 0000008e 00000004 20000250     ............P.. 
   1b764:	00001014 00000000 00000085 00000004     ................
   1b774:	200003c4 00001015 00000000 0000008d     ... ............
   1b784:	00000002 200003c8 00001016 00000004     ....... ........
   1b794:	0000008d 00000004 200003cc 00001017     ........... ....
   1b7a4:	00000000 0000008d 00000002 200003dc     ............... 
   1b7b4:	00001018 00000004 00000000 00000000     ................
   1b7c4:	0001b05c 00001019 00000000 0000000d     \...............
   1b7d4:	00000001 200003f4 00001029 00000006     ....... ).......
   1b7e4:	0000000d 00000001 200003f5 00001200     ........... ....
   1b7f4:	00000002 00000000 00000000 0001b098     ................
   1b804:	00001400 00000002 00000000 00000000     ................
   1b814:	0001b0bc 00001401 00000002 00000000     ................
   1b824:	00000000 0001b0e0 00001402 00000002     ................
	...
   1b83c:	0001b104 00001403 00000002 00000000     ................
   1b84c:	00000000 0001b128 00001600 00000008     ....(...........
	...
   1b864:	0001b14c 00001601 00000008 00000000     L...............
   1b874:	00000000 0001b1b8 00001602 00000008     ................
	...
   1b88c:	0001b224 00001603 00000008 00000000     $...............
   1b89c:	00000000 0001b290 00001800 00000006     ................
	...
   1b8b4:	0001b2fc 00001801 00000006 00000000     ................
   1b8c4:	00000000 0001b350 00001802 00000006     ....P...........
	...
   1b8dc:	0001b3a4 00001803 00000006 00000000     ................
   1b8ec:	00000000 0001b3f8 00001a00 00000008     ................
	...
   1b904:	0001b44c 00001a01 00000008 00000000     L...............
   1b914:	00000000 0001b4b8 00001a02 00000008     ................
	...
   1b92c:	0001b524 00001a03 00000008 00000000     $...............
   1b93c:	00000000 0001b590 00001f80 00000000     ................
   1b94c:	0000008d 00000004 200005c8 00002100     ........... .!..
   1b95c:	00000000 00000036 0000000a 20000254     ....6.......T.. 
   1b96c:	00002101 00000000 0000000d 00000001     .!..............
   1b97c:	200005cc 00002102 00000000 0000008d     ... .!..........
   1b98c:	00000002 200005ce 00002103 00000000     ....... .!......
   1b99c:	0000008e 00000002 2000025e 00002104     ........^.. .!..
   1b9ac:	00000000 00000086 00000002 20000260     ............`.. 
   1b9bc:	00002106 00000000 00000087 00000004     .!..............
   1b9cc:	20000354 00002107 00000005 000000be     T.. .!..........
   1b9dc:	00000002 20000262 00002108 00000001     ....b.. .!......
   1b9ec:	000000fd 00000008 2000026c 00002109     ........l.. .!..
   1b9fc:	00000001 000000fd 00000008 2000026e     ............n.. 
   1ba0c:	00002110 00000010 000000fe 00000004     .!..............
   1ba1c:	20000270 00002111 00000010 000000fd     p.. .!..........
   1ba2c:	00000004 200005d0 00002112 00000010     ....... .!......
   1ba3c:	000000ff 00000004 20000358 00002120     ........X..  !..
   1ba4c:	00000005 0000007d 00000008 0001b5fc     ....}...........
   1ba5c:	00002130 00000003 00000000 00000000     0!..............
   1ba6c:	0001b644 00006000 00000008 00000076     D....`......v...
   1ba7c:	00000001 20000310 00006200 00000008     ....... .b......
   1ba8c:	0000003e 00000001 20000318 00006401     >.......... .d..
   1ba9c:	0000000c 000000b6 00000002 20000320     ............ .. 
   1baac:	00006411 00000008 000000be 00000002     .d..............
   1babc:	20000338 682f2e2e 732f6c61 682f6372     8.. ../hal/src/h
   1bacc:	695f6c61 00632e6f 2e2f2e2e 2e2e2f2e     al_io.c.../../..
   1badc:	554c412f 6972445f 2f726576 5f554c41     /ALU_Driver/ALU_
   1baec:	76697244 682f7265 702f6c70 2f74726f     Driver/hpl/port/
   1bafc:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.

0001bb0c <defaultParameters>:
   1bb0c:	00004020                                 @..

0001bb10 <defaultPreferences>:
   1bb10:	000000fa 00000032 343a3831 32323a37     ....2...18:47:22
   1bb20:	00000000                                ....

0001bb24 <_ZTV14Calendar_Class>:
	...
   1bb2c:	00019c29 00019d19                       ).......

0001bb34 <_ZTV17DateTimeLog_Class>:
	...
   1bb3c:	000110f5 000110f5                       ........

0001bb44 <_global_impure_ptr>:
   1bb44:	20000618                                ... 

0001bb48 <_init>:
   1bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb4a:	bf00      	nop
   1bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bb4e:	bc08      	pop	{r3}
   1bb50:	469e      	mov	lr, r3
   1bb52:	4770      	bx	lr

0001bb54 <__init_array_start>:
   1bb54:	0001aa21 	.word	0x0001aa21

0001bb58 <__frame_dummy_init_array_entry>:
   1bb58:	00000289 000006d5 00000ec9 0000123d     ............=...
   1bb68:	0000f1b9 0000f471 0000f8a9 0000f995     ....q...........
   1bb78:	0000fbd1 000100cd 0001064d 00010d01     ........M.......
   1bb88:	000110cd 00011205 000113b1 0001160d     ................
   1bb98:	00011a11 00011d85 00013485 00013b45     .........4..E;..
   1bba8:	00013f45 000141c5 00014369 000146a9     E?...A..iC...F..
   1bbb8:	00018a59 00018d89 00019819 00019f65     Y...........e...

0001bbc8 <_fini>:
   1bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbca:	bf00      	nop
   1bbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bbce:	bc08      	pop	{r3}
   1bbd0:	469e      	mov	lr, r3
   1bbd2:	4770      	bx	lr

0001bbd4 <__fini_array_start>:
   1bbd4:	00000265 	.word	0x00000265
